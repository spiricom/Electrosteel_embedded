
Electrosteel_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  24000000  24000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000289e8  24000298  24000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  24028c80  24028c80  00044fd8  2**0
                  CONTENTS
  3 .exidx        00000000  24028c80  24028c80  00044fd8  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  24028c80  24028c80  00044fd8  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  24028c80  24028c80  00038c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  24028c84  24028c84  00038c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sram1_bss    00000080  30000000  30000000  00050000  2**5
                  ALLOC
  8 .sram2_bss    0003f7a0  30008000  30008000  00048000  2**5
                  ALLOC
  9 .userflash    00000020  38800000  38800000  00050000  2**5
                  ALLOC
 10 .data         000000a4  20000000  24028c88  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000123d4  200000a8  24028d2c  000500a8  2**3
                  ALLOC
 12 .dtcmram_bss  00000400  20012480  24028d2c  00052480  2**5
                  ALLOC
 13 .itcmram      00004bd8  00000400  24028d2c  00040400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .sdram_bss    00000000  c0000000  c0000000  00045006  2**0
                  CONTENTS
 15 .qspiflash_text 00000000  90040000  90040000  00045006  2**0
                  CONTENTS
 16 .qspiflash_data 00000000  90040000  90040000  00045006  2**0
                  CONTENTS
 17 .qspiflash_bss 00000000  90040000  90040000  00045006  2**0
                  CONTENTS
 18 .heap         00000000  20012880  20012880  00045006  2**0
                  CONTENTS
 19 .reserved_for_stack 00000000  20012880  20012880  00045006  2**0
                  CONTENTS
 20 .debug_info   00073ee9  00000000  00000000  00045006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 0000a1f7  00000000  00000000  000b8eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00064ccd  00000000  00000000  000c30e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00003460  00000000  00000000  00127db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 0000d188  00000000  00000000  0012b213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  0004214b  00000000  00000000  0013839b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   00067e37  00000000  00000000  0017a4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    0017474e  00000000  00000000  001e231d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      000000c5  00000000  00000000  00356a6b  2**0
                  CONTENTS, READONLY
 29 .debug_frame  0000b23c  00000000  00000000  00356b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000298 <__do_global_dtors_aux>:
24000298:	b510      	push	{r4, lr}
2400029a:	4c05      	ldr	r4, [pc, #20]	; (240002b0 <__do_global_dtors_aux+0x18>)
2400029c:	7823      	ldrb	r3, [r4, #0]
2400029e:	b933      	cbnz	r3, 240002ae <__do_global_dtors_aux+0x16>
240002a0:	4b04      	ldr	r3, [pc, #16]	; (240002b4 <__do_global_dtors_aux+0x1c>)
240002a2:	b113      	cbz	r3, 240002aa <__do_global_dtors_aux+0x12>
240002a4:	4804      	ldr	r0, [pc, #16]	; (240002b8 <__do_global_dtors_aux+0x20>)
240002a6:	f3af 8000 	nop.w
240002aa:	2301      	movs	r3, #1
240002ac:	7023      	strb	r3, [r4, #0]
240002ae:	bd10      	pop	{r4, pc}
240002b0:	200000a8 	.word	0x200000a8
240002b4:	00000000 	.word	0x00000000
240002b8:	00004fd8 	.word	0x00004fd8

240002bc <frame_dummy>:
240002bc:	b508      	push	{r3, lr}
240002be:	4b03      	ldr	r3, [pc, #12]	; (240002cc <frame_dummy+0x10>)
240002c0:	b11b      	cbz	r3, 240002ca <frame_dummy+0xe>
240002c2:	4903      	ldr	r1, [pc, #12]	; (240002d0 <frame_dummy+0x14>)
240002c4:	4803      	ldr	r0, [pc, #12]	; (240002d4 <frame_dummy+0x18>)
240002c6:	f3af 8000 	nop.w
240002ca:	bd08      	pop	{r3, pc}
240002cc:	00000000 	.word	0x00000000
240002d0:	200000ac 	.word	0x200000ac
240002d4:	00004fd8 	.word	0x00004fd8

240002d8 <strlen>:
240002d8:	4603      	mov	r3, r0
240002da:	f813 2b01 	ldrb.w	r2, [r3], #1
240002de:	2a00      	cmp	r2, #0
240002e0:	d1fb      	bne.n	240002da <strlen+0x2>
240002e2:	1a18      	subs	r0, r3, r0
240002e4:	3801      	subs	r0, #1
240002e6:	4770      	bx	lr

240002e8 <audio_init>:
int MBoffset = 0;

tCycle testSine;

void audio_init(void)
{
240002e8:	b538      	push	{r3, r4, r5, lr}
	LEAF_init(&leaf, SAMPLE_RATE, smallMemory, SMALL_MEM_SIZE, &randomNumber);
240002ea:	4c13      	ldr	r4, [pc, #76]	; (24000338 <audio_init+0x50>)
240002ec:	f648 02b8 	movw	r2, #35000	; 0x88b8
240002f0:	ed9f 0a12 	vldr	s0, [pc, #72]	; 2400033c <audio_init+0x54>
240002f4:	4620      	mov	r0, r4
240002f6:	4b12      	ldr	r3, [pc, #72]	; (24000340 <audio_init+0x58>)
240002f8:	4912      	ldr	r1, [pc, #72]	; (24000344 <audio_init+0x5c>)
240002fa:	f012 fb57 	bl	240129ac <LEAF_init>
	leaf.clearOnAllocation = 1;
240002fe:	2001      	movs	r0, #1
	tMempool_init (&mediumPool, mediumMemory, MEDIUM_MEM_SIZE, &leaf);
	tCycle_init(&testSine, &leaf);
24000300:	4d11      	ldr	r5, [pc, #68]	; (24000348 <audio_init+0x60>)
	tMempool_init (&mediumPool, mediumMemory, MEDIUM_MEM_SIZE, &leaf);
24000302:	4623      	mov	r3, r4
24000304:	4a11      	ldr	r2, [pc, #68]	; (2400034c <audio_init+0x64>)
	leaf.clearOnAllocation = 1;
24000306:	6160      	str	r0, [r4, #20]
	tMempool_init (&mediumPool, mediumMemory, MEDIUM_MEM_SIZE, &leaf);
24000308:	4911      	ldr	r1, [pc, #68]	; (24000350 <audio_init+0x68>)
2400030a:	4812      	ldr	r0, [pc, #72]	; (24000354 <audio_init+0x6c>)
2400030c:	f00e ff40 	bl	2400f190 <tMempool_init>
	tCycle_init(&testSine, &leaf);
24000310:	4621      	mov	r1, r4
24000312:	4628      	mov	r0, r5
24000314:	f00f f8d8 	bl	2400f4c8 <tCycle_init>
	tCycle_setFreq(&testSine, 220.0f);
24000318:	4628      	mov	r0, r5
2400031a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 24000358 <audio_init+0x70>
2400031e:	f00f f915 	bl	2400f54c <tCycle_setFreq>
			(float*) &__leaf_table_fir2XLow,
			(float*) &upState1,
	        1);
*/
#endif
	HAL_Delay(10);
24000322:	200a      	movs	r0, #10
24000324:	f002 fae4 	bl	240028f0 <HAL_Delay>
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{
		audioOutBuffer[i] = 0;
24000328:	2220      	movs	r2, #32
2400032a:	2100      	movs	r1, #0
2400032c:	480b      	ldr	r0, [pc, #44]	; (2400035c <audio_init+0x74>)
	}
}
2400032e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		audioOutBuffer[i] = 0;
24000332:	f012 bc07 	b.w	24012b44 <memset>
24000336:	bf00      	nop
24000338:	20000488 	.word	0x20000488
2400033c:	473b8000 	.word	0x473b8000
24000340:	00002a21 	.word	0x00002a21
24000344:	200007d4 	.word	0x200007d4
24000348:	200090fc 	.word	0x200090fc
2400034c:	0003f7a0 	.word	0x0003f7a0
24000350:	30008000 	.word	0x30008000
24000354:	200005d4 	.word	0x200005d4
24000358:	435c0000 	.word	0x435c0000
2400035c:	30000000 	.word	0x30000000

24000360 <audio_start>:

void audio_start(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
24000360:	b570      	push	{r4, r5, r6, lr}
24000362:	4605      	mov	r5, r0
	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	HAL_Delay(1);
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24000364:	4e0a      	ldr	r6, [pc, #40]	; (24000390 <audio_start+0x30>)
	HAL_Delay(1);
24000366:	2001      	movs	r0, #1
{
24000368:	460c      	mov	r4, r1
	HAL_Delay(1);
2400036a:	f002 fac1 	bl	240028f0 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
2400036e:	2208      	movs	r2, #8
24000370:	4631      	mov	r1, r6
24000372:	4628      	mov	r0, r5
24000374:	f007 f814 	bl	240073a0 <HAL_SAI_Transmit_DMA>
24000378:	4b06      	ldr	r3, [pc, #24]	; (24000394 <audio_start+0x34>)
2400037a:	4605      	mov	r5, r0
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
2400037c:	2208      	movs	r2, #8
2400037e:	f106 0120 	add.w	r1, r6, #32
24000382:	4620      	mov	r0, r4
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24000384:	701d      	strb	r5, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24000386:	f007 f89d 	bl	240074c4 <HAL_SAI_Receive_DMA>
2400038a:	4b03      	ldr	r3, [pc, #12]	; (24000398 <audio_start+0x38>)
2400038c:	7018      	strb	r0, [r3, #0]
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
}
2400038e:	bd70      	pop	{r4, r5, r6, pc}
24000390:	30000000 	.word	0x30000000
24000394:	20009124 	.word	0x20009124
24000398:	20000755 	.word	0x20000755

2400039c <lfoSawSquareTick>:



void lfoSawSquareTick(float* sample, int v)
{
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v]);
2400039c:	4b04      	ldr	r3, [pc, #16]	; (240003b0 <lfoSawSquareTick+0x14>)
{
2400039e:	b510      	push	{r4, lr}
240003a0:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v]);
240003a2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
240003a6:	f012 f9b7 	bl	24012718 <tSawSquareLFO_tick>
240003aa:	ed84 0a00 	vstr	s0, [r4]
}
240003ae:	bd10      	pop	{r4, pc}
240003b0:	200004fc 	.word	0x200004fc

240003b4 <lfoSineTriTick>:

void lfoSineTriTick(float* sample, int v)
{
	*sample = tSineTriLFO_tick(&lfoSineTri[v]);
240003b4:	4b04      	ldr	r3, [pc, #16]	; (240003c8 <lfoSineTriTick+0x14>)
{
240003b6:	b510      	push	{r4, lr}
240003b8:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v]);
240003ba:	eb03 0081 	add.w	r0, r3, r1, lsl #2
240003be:	f012 fa73 	bl	240128a8 <tSineTriLFO_tick>
240003c2:	ed84 0a00 	vstr	s0, [r4]
}
240003c6:	bd10      	pop	{r4, pc}
240003c8:	2000052c 	.word	0x2000052c

240003cc <lfoSineTick>:

void lfoSineTick(float* sample, int v)
{
    *sample = tCycle_tick(&lfoSine[v]);
240003cc:	4b04      	ldr	r3, [pc, #16]	; (240003e0 <lfoSineTick+0x14>)
{
240003ce:	b510      	push	{r4, lr}
240003d0:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v]);
240003d2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
240003d6:	f00f f893 	bl	2400f500 <tCycle_tick>
240003da:	ed84 0a00 	vstr	s0, [r4]
}
240003de:	bd10      	pop	{r4, pc}
240003e0:	2000051c 	.word	0x2000051c

240003e4 <lfoTriTick>:

void lfoTriTick(float* sample, int v)
{
    *sample = tTriLFO_tick(&lfoTri[v]);
240003e4:	4b04      	ldr	r3, [pc, #16]	; (240003f8 <lfoTriTick+0x14>)
{
240003e6:	b510      	push	{r4, lr}
240003e8:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v]);
240003ea:	eb03 0081 	add.w	r0, r3, r1, lsl #2
240003ee:	f012 fa29 	bl	24012844 <tTriLFO_tick>
240003f2:	ed84 0a00 	vstr	s0, [r4]
}
240003f6:	bd10      	pop	{r4, pc}
240003f8:	2000053c 	.word	0x2000053c

240003fc <lfoSawTick>:
void lfoSawTick(float* sample, int v)
{
    *sample = (tIntPhasor_tick(&lfoSaw[v]) * 2.0f) - 1.0f;
240003fc:	4b07      	ldr	r3, [pc, #28]	; (2400041c <lfoSawTick+0x20>)
{
240003fe:	b510      	push	{r4, lr}
24000400:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v]) * 2.0f) - 1.0f;
24000402:	eb03 0081 	add.w	r0, r3, r1, lsl #2
24000406:	f012 f8cd 	bl	240125a4 <tIntPhasor_tick>
2400040a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
2400040e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24000412:	eee0 7a07 	vfma.f32	s15, s0, s14
24000416:	edc4 7a00 	vstr	s15, [r4]
}
2400041a:	bd10      	pop	{r4, pc}
2400041c:	200004ec 	.word	0x200004ec

24000420 <lfoPulseTick>:

void lfoPulseTick(float* sample, int v)
{
    *sample = tSquareLFO_tick(&lfoPulse[v]);
24000420:	4b04      	ldr	r3, [pc, #16]	; (24000434 <lfoPulseTick+0x14>)
{
24000422:	b510      	push	{r4, lr}
24000424:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v]);
24000426:	eb03 0081 	add.w	r0, r3, r1, lsl #2
2400042a:	f012 f8e9 	bl	24012600 <tSquareLFO_tick>
2400042e:	ed84 0a00 	vstr	s0, [r4]
}
24000432:	bd10      	pop	{r4, pc}
24000434:	200004dc 	.word	0x200004dc

24000438 <lfoSawSquareSetRate>:

void lfoSawSquareSetRate(float r, int v)
{
	tSawSquareLFO_setFreq(&lfoSawSquare[v],r);
24000438:	4b02      	ldr	r3, [pc, #8]	; (24000444 <lfoSawSquareSetRate+0xc>)
2400043a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400043e:	f012 b9ab 	b.w	24012798 <tSawSquareLFO_setFreq>
24000442:	bf00      	nop
24000444:	200004fc 	.word	0x200004fc

24000448 <lfoSineTriSetRate>:
}

void lfoSineTriSetRate(float r, int v)
{
	tSineTriLFO_setFreq(&lfoSineTri[v],r);
24000448:	4b02      	ldr	r3, [pc, #8]	; (24000454 <lfoSineTriSetRate+0xc>)
2400044a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400044e:	f012 ba77 	b.w	24012940 <tSineTriLFO_setFreq>
24000452:	bf00      	nop
24000454:	2000052c 	.word	0x2000052c

24000458 <lfoSineSetRate>:
}
void lfoSineSetRate(float r, int v)
{
	tCycle_setFreq(&lfoSine[v], r);
24000458:	4b02      	ldr	r3, [pc, #8]	; (24000464 <lfoSineSetRate+0xc>)
2400045a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400045e:	f00f b875 	b.w	2400f54c <tCycle_setFreq>
24000462:	bf00      	nop
24000464:	2000051c 	.word	0x2000051c

24000468 <lfoTriSetRate>:
}
void lfoTriSetRate(float r, int v)
{
	tTriLFO_setFreq(&lfoTri[v], r);
24000468:	4b02      	ldr	r3, [pc, #8]	; (24000474 <lfoTriSetRate+0xc>)
2400046a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400046e:	f012 ba03 	b.w	24012878 <tTriLFO_setFreq>
24000472:	bf00      	nop
24000474:	2000053c 	.word	0x2000053c

24000478 <lfoSawSetRate>:
}
void lfoSawSetRate(float r, int v)
{
	tIntPhasor_setFreq(&lfoSaw[v], r);
24000478:	4b02      	ldr	r3, [pc, #8]	; (24000484 <lfoSawSetRate+0xc>)
2400047a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400047e:	f012 b8a1 	b.w	240125c4 <tIntPhasor_setFreq>
24000482:	bf00      	nop
24000484:	200004ec 	.word	0x200004ec

24000488 <lfoPulseSetRate>:
}
void lfoPulseSetRate(float r, int v)
{
	 tSquareLFO_setFreq(&lfoPulse[v], r);
24000488:	4b02      	ldr	r3, [pc, #8]	; (24000494 <lfoPulseSetRate+0xc>)
2400048a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400048e:	f012 b8df 	b.w	24012650 <tSquareLFO_setFreq>
24000492:	bf00      	nop
24000494:	200004dc 	.word	0x200004dc

24000498 <lfoSawSquareSetPhase>:
}


void lfoSawSquareSetPhase(float p, int v)
{
	tSawSquareLFO_setPhase(&lfoSawSquare[v],p);
24000498:	4b02      	ldr	r3, [pc, #8]	; (240004a4 <lfoSawSquareSetPhase+0xc>)
2400049a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400049e:	f012 b99f 	b.w	240127e0 <tSawSquareLFO_setPhase>
240004a2:	bf00      	nop
240004a4:	200004fc 	.word	0x200004fc

240004a8 <lfoSineTriSetPhase>:
}
void lfoSineTriSetPhase(float p, int v)
{
	tSineTriLFO_setPhase(&lfoSineTri[v], p);
240004a8:	4b02      	ldr	r3, [pc, #8]	; (240004b4 <lfoSineTriSetPhase+0xc>)
240004aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240004ae:	f012 ba5f 	b.w	24012970 <tSineTriLFO_setPhase>
240004b2:	bf00      	nop
240004b4:	2000052c 	.word	0x2000052c

240004b8 <lfoSineSetPhase>:
}
void lfoSineSetPhase(float p, int v)
{
	tCycle_setPhase(&lfoSine[v],p);
240004b8:	4b02      	ldr	r3, [pc, #8]	; (240004c4 <lfoSineSetPhase+0xc>)
240004ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240004be:	f00f b851 	b.w	2400f564 <tCycle_setPhase>
240004c2:	bf00      	nop
240004c4:	2000051c 	.word	0x2000051c

240004c8 <lfoTriSetPhase>:
}
void lfoTriSetPhase(float p, int v)
{
	tTriLFO_setPhase(&lfoTri[v],p);
240004c8:	4b02      	ldr	r3, [pc, #8]	; (240004d4 <lfoTriSetPhase+0xc>)
240004ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240004ce:	f012 b9df 	b.w	24012890 <tTriLFO_setPhase>
240004d2:	bf00      	nop
240004d4:	2000053c 	.word	0x2000053c

240004d8 <lfoSawSetPhase>:
}
void lfoSawSetPhase(float p, int v)
{
	tIntPhasor_setPhase(&lfoSaw[v], p);
240004d8:	4b02      	ldr	r3, [pc, #8]	; (240004e4 <lfoSawSetPhase+0xc>)
240004da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240004de:	f012 b87d 	b.w	240125dc <tIntPhasor_setPhase>
240004e2:	bf00      	nop
240004e4:	200004ec 	.word	0x200004ec

240004e8 <lfoPulseSetPhase>:
}
void lfoPulseSetPhase(float p, int v)
{
	tSquareLFO_setPhase(&lfoPulse[v], p);
240004e8:	4b02      	ldr	r3, [pc, #8]	; (240004f4 <lfoPulseSetPhase+0xc>)
240004ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240004ee:	f012 b8e7 	b.w	240126c0 <tSquareLFO_setPhase>
240004f2:	bf00      	nop
240004f4:	200004dc 	.word	0x200004dc

240004f8 <lfoSawSquareSetShape>:
}


void lfoSawSquareSetShape(float s, int v)
{
	tSawSquareLFO_setShape(&lfoSawSquare[v],s);
240004f8:	4b02      	ldr	r3, [pc, #8]	; (24000504 <lfoSawSquareSetShape+0xc>)
240004fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240004fe:	f012 b99d 	b.w	2401283c <tSawSquareLFO_setShape>
24000502:	bf00      	nop
24000504:	200004fc 	.word	0x200004fc

24000508 <lfoSineTriSetShape>:
}
void lfoSineTriSetShape(float s, int v)
{
	tSineTriLFO_setShape(&lfoSineTri[v],s);
24000508:	4b02      	ldr	r3, [pc, #8]	; (24000514 <lfoSineTriSetShape+0xc>)
2400050a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400050e:	f012 ba47 	b.w	240129a0 <tSineTriLFO_setShape>
24000512:	bf00      	nop
24000514:	2000052c 	.word	0x2000052c

24000518 <lfoSineSetShape>:
}
void lfoSineSetShape(float s, int v)
{
	//none
}
24000518:	4770      	bx	lr
2400051a:	bf00      	nop

2400051c <lfoTriSetShape>:
2400051c:	4770      	bx	lr
2400051e:	bf00      	nop

24000520 <lfoSawSetShape>:
24000520:	4770      	bx	lr
24000522:	bf00      	nop

24000524 <lfoPulseSetShape>:
{
	//none
}
void lfoPulseSetShape(float s, int v)
{
	tSquareLFO_setPulseWidth(&lfoPulse[v], s);
24000524:	4b02      	ldr	r3, [pc, #8]	; (24000530 <lfoPulseSetShape+0xc>)
24000526:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400052a:	f012 b8a9 	b.w	24012680 <tSquareLFO_setPulseWidth>
2400052e:	bf00      	nop
24000530:	200004dc 	.word	0x200004dc

24000534 <FXLowpassParam1>:
//cutoffparams

void FXLowpassParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24000534:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24000538:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 24000568 <FXLowpassParam1+0x34>
2400053c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 2400056c <FXLowpassParam1+0x38>
24000540:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 24000570 <FXLowpassParam1+0x3c>
24000544:	eee0 7a07 	vfma.f32	s15, s0, s14
24000548:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24000574 <FXLowpassParam1+0x40>
{
2400054c:	b510      	push	{r4, lr}
2400054e:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24000550:	ee67 0aa0 	vmul.f32	s1, s15, s1
24000554:	f028 fb7c 	bl	24028c50 <__LEAF_clip_veneer>
	tSVF_setFreqFast(&FXlowpass[v], value);
24000558:	4807      	ldr	r0, [pc, #28]	; (24000578 <FXLowpassParam1+0x44>)
2400055a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
2400055e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&FXlowpass[v], value);
24000562:	f00d bce5 	b.w	2400df30 <tSVF_setFreqFast>
24000566:	bf00      	nop
24000568:	429a0000 	.word	0x429a0000
2400056c:	420fb824 	.word	0x420fb824
24000570:	457ff000 	.word	0x457ff000
24000574:	00000000 	.word	0x00000000
24000578:	20000144 	.word	0x20000144

2400057c <FXHighpassParam1>:
void FXHighpassParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400057c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24000580:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 240005b0 <FXHighpassParam1+0x34>
24000584:	eddf 0a0b 	vldr	s1, [pc, #44]	; 240005b4 <FXHighpassParam1+0x38>
24000588:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 240005b8 <FXHighpassParam1+0x3c>
2400058c:	eee0 7a07 	vfma.f32	s15, s0, s14
24000590:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 240005bc <FXHighpassParam1+0x40>
{
24000594:	b510      	push	{r4, lr}
24000596:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24000598:	ee67 0aa0 	vmul.f32	s1, s15, s1
2400059c:	f028 fb58 	bl	24028c50 <__LEAF_clip_veneer>
	tSVF_setFreqFast(&FXhighpass[v], value);
240005a0:	4807      	ldr	r0, [pc, #28]	; (240005c0 <FXHighpassParam1+0x44>)
240005a2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
240005a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&FXhighpass[v], value);
240005aa:	f00d bcc1 	b.w	2400df30 <tSVF_setFreqFast>
240005ae:	bf00      	nop
240005b0:	429a0000 	.word	0x429a0000
240005b4:	420fb824 	.word	0x420fb824
240005b8:	457ff000 	.word	0x457ff000
240005bc:	00000000 	.word	0x00000000
240005c0:	20000134 	.word	0x20000134

240005c4 <FXBandpassParam1>:

void FXBandpassParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240005c4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
240005c8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 240005f8 <FXBandpassParam1+0x34>
240005cc:	eddf 0a0b 	vldr	s1, [pc, #44]	; 240005fc <FXBandpassParam1+0x38>
240005d0:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 24000600 <FXBandpassParam1+0x3c>
240005d4:	eee0 7a07 	vfma.f32	s15, s0, s14
240005d8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24000604 <FXBandpassParam1+0x40>
{
240005dc:	b510      	push	{r4, lr}
240005de:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240005e0:	ee67 0aa0 	vmul.f32	s1, s15, s1
240005e4:	f028 fb34 	bl	24028c50 <__LEAF_clip_veneer>
    tSVF_setFreqFast(&FXbandpass[v], value);
240005e8:	4807      	ldr	r0, [pc, #28]	; (24000608 <FXBandpassParam1+0x44>)
240005ea:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
240005ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tSVF_setFreqFast(&FXbandpass[v], value);
240005f2:	f00d bc9d 	b.w	2400df30 <tSVF_setFreqFast>
240005f6:	bf00      	nop
240005f8:	429a0000 	.word	0x429a0000
240005fc:	420fb824 	.word	0x420fb824
24000600:	457ff000 	.word	0x457ff000
24000604:	00000000 	.word	0x00000000
24000608:	20000114 	.word	0x20000114

2400060c <FXDiodeParam1>:

void FXDiodeParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400060c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24000610:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 24000640 <FXDiodeParam1+0x34>
24000614:	eddf 0a0b 	vldr	s1, [pc, #44]	; 24000644 <FXDiodeParam1+0x38>
24000618:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 24000648 <FXDiodeParam1+0x3c>
2400061c:	eee0 7a07 	vfma.f32	s15, s0, s14
24000620:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2400064c <FXDiodeParam1+0x40>
{
24000624:	b510      	push	{r4, lr}
24000626:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24000628:	ee67 0aa0 	vmul.f32	s1, s15, s1
2400062c:	f028 fb10 	bl	24028c50 <__LEAF_clip_veneer>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v], value);
24000630:	4807      	ldr	r0, [pc, #28]	; (24000650 <FXDiodeParam1+0x44>)
24000632:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24000636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v], value);
2400063a:	f00e b9f1 	b.w	2400ea20 <tDiodeFilter_setFreqFast>
2400063e:	bf00      	nop
24000640:	429a0000 	.word	0x429a0000
24000644:	420fb824 	.word	0x420fb824
24000648:	457ff000 	.word	0x457ff000
2400064c:	00000000 	.word	0x00000000
24000650:	20000124 	.word	0x20000124

24000654 <FXPeakParam1>:
void FXPeakParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24000654:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24000658:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 24000688 <FXPeakParam1+0x34>
2400065c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 2400068c <FXPeakParam1+0x38>
24000660:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 24000690 <FXPeakParam1+0x3c>
24000664:	eee0 7a07 	vfma.f32	s15, s0, s14
24000668:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24000694 <FXPeakParam1+0x40>
{
2400066c:	b510      	push	{r4, lr}
2400066e:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24000670:	ee67 0aa0 	vmul.f32	s1, s15, s1
24000674:	f028 faec 	bl	24028c50 <__LEAF_clip_veneer>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v], value);
24000678:	4807      	ldr	r0, [pc, #28]	; (24000698 <FXPeakParam1+0x44>)
2400067a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
2400067e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&FXVZfilterPeak[v], value);
24000682:	f00d be4d 	b.w	2400e320 <tVZFilter_setFreqFast>
24000686:	bf00      	nop
24000688:	429a0000 	.word	0x429a0000
2400068c:	420fb824 	.word	0x420fb824
24000690:	457ff000 	.word	0x457ff000
24000694:	00000000 	.word	0x00000000
24000698:	20000104 	.word	0x20000104

2400069c <FXLowShelfParam1>:
void FXLowShelfParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400069c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
240006a0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 240006d0 <FXLowShelfParam1+0x34>
240006a4:	eddf 0a0b 	vldr	s1, [pc, #44]	; 240006d4 <FXLowShelfParam1+0x38>
240006a8:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 240006d8 <FXLowShelfParam1+0x3c>
240006ac:	eee0 7a07 	vfma.f32	s15, s0, s14
240006b0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 240006dc <FXLowShelfParam1+0x40>
{
240006b4:	b510      	push	{r4, lr}
240006b6:	4604      	mov	r4, r0
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240006b8:	ee67 0aa0 	vmul.f32	s1, s15, s1
240006bc:	f028 fac8 	bl	24028c50 <__LEAF_clip_veneer>
    tVZFilter_setFreqFast(&FXVZfilterLS[v], value);
240006c0:	4807      	ldr	r0, [pc, #28]	; (240006e0 <FXLowShelfParam1+0x44>)
240006c2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
240006c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tVZFilter_setFreqFast(&FXVZfilterLS[v], value);
240006ca:	f00d be29 	b.w	2400e320 <tVZFilter_setFreqFast>
240006ce:	bf00      	nop
240006d0:	429a0000 	.word	0x429a0000
240006d4:	420fb824 	.word	0x420fb824
240006d8:	457ff000 	.word	0x457ff000
240006dc:	00000000 	.word	0x00000000
240006e0:	200000f4 	.word	0x200000f4

240006e4 <FXHighShelfParam1>:
void FXHighShelfParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
240006e4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
240006e8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 24000718 <FXHighShelfParam1+0x34>
240006ec:	eddf 0a0b 	vldr	s1, [pc, #44]	; 2400071c <FXHighShelfParam1+0x38>
240006f0:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 24000720 <FXHighShelfParam1+0x3c>
240006f4:	eee0 7a07 	vfma.f32	s15, s0, s14
240006f8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24000724 <FXHighShelfParam1+0x40>
{
240006fc:	b510      	push	{r4, lr}
240006fe:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24000700:	ee67 0aa0 	vmul.f32	s1, s15, s1
24000704:	f028 faa4 	bl	24028c50 <__LEAF_clip_veneer>
	tVZFilter_setFreqFast(&FXVZfilterHS[v], value);
24000708:	4807      	ldr	r0, [pc, #28]	; (24000728 <FXHighShelfParam1+0x44>)
2400070a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
2400070e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&FXVZfilterHS[v], value);
24000712:	f00d be05 	b.w	2400e320 <tVZFilter_setFreqFast>
24000716:	bf00      	nop
24000718:	429a0000 	.word	0x429a0000
2400071c:	420fb824 	.word	0x420fb824
24000720:	457ff000 	.word	0x457ff000
24000724:	00000000 	.word	0x00000000
24000728:	200000e4 	.word	0x200000e4

2400072c <FXNotchParam1>:
void FXNotchParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
2400072c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24000730:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 24000760 <FXNotchParam1+0x34>
24000734:	eddf 0a0b 	vldr	s1, [pc, #44]	; 24000764 <FXNotchParam1+0x38>
24000738:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 24000768 <FXNotchParam1+0x3c>
2400073c:	eee0 7a07 	vfma.f32	s15, s0, s14
24000740:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2400076c <FXNotchParam1+0x40>
{
24000744:	b510      	push	{r4, lr}
24000746:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24000748:	ee67 0aa0 	vmul.f32	s1, s15, s1
2400074c:	f028 fa80 	bl	24028c50 <__LEAF_clip_veneer>
	tVZFilter_setFreqFast(&FXVZfilterBR[v], value);
24000750:	4807      	ldr	r0, [pc, #28]	; (24000770 <FXNotchParam1+0x44>)
24000752:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
24000756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&FXVZfilterBR[v], value);
2400075a:	f00d bde1 	b.w	2400e320 <tVZFilter_setFreqFast>
2400075e:	bf00      	nop
24000760:	429a0000 	.word	0x429a0000
24000764:	420fb824 	.word	0x420fb824
24000768:	457ff000 	.word	0x457ff000
2400076c:	00000000 	.word	0x00000000
24000770:	200000d4 	.word	0x200000d4

24000774 <FXLadderParam1>:
void FXLadderParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24000774:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
24000778:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 240007a8 <FXLadderParam1+0x34>
2400077c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 240007ac <FXLadderParam1+0x38>
24000780:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 240007b0 <FXLadderParam1+0x3c>
24000784:	eee0 7a07 	vfma.f32	s15, s0, s14
24000788:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 240007b4 <FXLadderParam1+0x40>
{
2400078c:	b510      	push	{r4, lr}
2400078e:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
24000790:	ee67 0aa0 	vmul.f32	s1, s15, s1
24000794:	f028 fa5c 	bl	24028c50 <__LEAF_clip_veneer>
	tLadderFilter_setFreqFast(&FXLadderfilter[v], value);
24000798:	4807      	ldr	r0, [pc, #28]	; (240007b8 <FXLadderParam1+0x44>)
2400079a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
2400079e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tLadderFilter_setFreqFast(&FXLadderfilter[v], value);
240007a2:	f00e ba97 	b.w	2400ecd4 <tLadderFilter_setFreqFast>
240007a6:	bf00      	nop
240007a8:	429a0000 	.word	0x429a0000
240007ac:	420fb824 	.word	0x420fb824
240007b0:	457ff000 	.word	0x457ff000
240007b4:	00000000 	.word	0x00000000
240007b8:	200000c4 	.word	0x200000c4

240007bc <FXPeakParam2>:

//gain params

void FXPeakParam2(float value, int v)
{
	 tVZFilter_setGain(&FXVZfilterPeak[v], fasterdbtoa((value * 50.f) - 25.f));
240007bc:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
240007c0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 240007e4 <FXPeakParam2+0x28>
{
240007c4:	b510      	push	{r4, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v], fasterdbtoa((value * 50.f) - 25.f));
240007c6:	eee0 7a07 	vfma.f32	s15, s0, s14
{
240007ca:	4604      	mov	r4, r0
	 tVZFilter_setGain(&FXVZfilterPeak[v], fasterdbtoa((value * 50.f) - 25.f));
240007cc:	eeb0 0a67 	vmov.f32	s0, s15
240007d0:	f00e fc34 	bl	2400f03c <fasterdbtoa>
240007d4:	4804      	ldr	r0, [pc, #16]	; (240007e8 <FXPeakParam2+0x2c>)
240007d6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
240007da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v], fasterdbtoa((value * 50.f) - 25.f));
240007de:	f00d bf11 	b.w	2400e604 <tVZFilter_setGain>
240007e2:	bf00      	nop
240007e4:	42480000 	.word	0x42480000
240007e8:	20000104 	.word	0x20000104

240007ec <FXLowShelfParam2>:

void FXLowShelfParam2(float value, int v)
{
tVZFilter_setGain(&FXVZfilterLS[v], fasterdbtoa((value * 50.f) - 25.f));
240007ec:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
240007f0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24000814 <FXLowShelfParam2+0x28>
{
240007f4:	b510      	push	{r4, lr}
tVZFilter_setGain(&FXVZfilterLS[v], fasterdbtoa((value * 50.f) - 25.f));
240007f6:	eee0 7a07 	vfma.f32	s15, s0, s14
{
240007fa:	4604      	mov	r4, r0
tVZFilter_setGain(&FXVZfilterLS[v], fasterdbtoa((value * 50.f) - 25.f));
240007fc:	eeb0 0a67 	vmov.f32	s0, s15
24000800:	f00e fc1c 	bl	2400f03c <fasterdbtoa>
24000804:	4804      	ldr	r0, [pc, #16]	; (24000818 <FXLowShelfParam2+0x2c>)
24000806:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
2400080a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
tVZFilter_setGain(&FXVZfilterLS[v], fasterdbtoa((value * 50.f) - 25.f));
2400080e:	f00d bef9 	b.w	2400e604 <tVZFilter_setGain>
24000812:	bf00      	nop
24000814:	42480000 	.word	0x42480000
24000818:	200000f4 	.word	0x200000f4

2400081c <FXHighShelfParam2>:

void FXHighShelfParam2(float value, int v)
{
	tVZFilter_setGain(&FXVZfilterHS[v], fasterdbtoa((value * 50.f) - 25.f));
2400081c:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
24000820:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24000844 <FXHighShelfParam2+0x28>
{
24000824:	b510      	push	{r4, lr}
	tVZFilter_setGain(&FXVZfilterHS[v], fasterdbtoa((value * 50.f) - 25.f));
24000826:	eee0 7a07 	vfma.f32	s15, s0, s14
{
2400082a:	4604      	mov	r4, r0
	tVZFilter_setGain(&FXVZfilterHS[v], fasterdbtoa((value * 50.f) - 25.f));
2400082c:	eeb0 0a67 	vmov.f32	s0, s15
24000830:	f00e fc04 	bl	2400f03c <fasterdbtoa>
24000834:	4804      	ldr	r0, [pc, #16]	; (24000848 <FXHighShelfParam2+0x2c>)
24000836:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
2400083a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&FXVZfilterHS[v], fasterdbtoa((value * 50.f) - 25.f));
2400083e:	f00d bee1 	b.w	2400e604 <tVZFilter_setGain>
24000842:	bf00      	nop
24000844:	42480000 	.word	0x42480000
24000848:	200000e4 	.word	0x200000e4

2400084c <FXNotchParam2>:

void FXNotchParam2(float value, int v)
{
	tVZFilter_setGain(&FXVZfilterBR[v], fasterdbtoa((value * 50.f) - 25.f));
2400084c:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
24000850:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24000874 <FXNotchParam2+0x28>
{
24000854:	b510      	push	{r4, lr}
	tVZFilter_setGain(&FXVZfilterBR[v], fasterdbtoa((value * 50.f) - 25.f));
24000856:	eee0 7a07 	vfma.f32	s15, s0, s14
{
2400085a:	4604      	mov	r4, r0
	tVZFilter_setGain(&FXVZfilterBR[v], fasterdbtoa((value * 50.f) - 25.f));
2400085c:	eeb0 0a67 	vmov.f32	s0, s15
24000860:	f00e fbec 	bl	2400f03c <fasterdbtoa>
24000864:	4804      	ldr	r0, [pc, #16]	; (24000878 <FXNotchParam2+0x2c>)
24000866:	eb00 0084 	add.w	r0, r0, r4, lsl #2

}
2400086a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&FXVZfilterBR[v], fasterdbtoa((value * 50.f) - 25.f));
2400086e:	f00d bec9 	b.w	2400e604 <tVZFilter_setGain>
24000872:	bf00      	nop
24000874:	42480000 	.word	0x42480000
24000878:	200000d4 	.word	0x200000d4

2400087c <FXLowpassParam3>:
//resonance params
void FXLowpassParam3(float value, int v)
{
	tSVF_setQ(&FXlowpass[v], value);
2400087c:	4b02      	ldr	r3, [pc, #8]	; (24000888 <FXLowpassParam3+0xc>)
2400087e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24000882:	f00d bb8b 	b.w	2400df9c <tSVF_setQ>
24000886:	bf00      	nop
24000888:	20000144 	.word	0x20000144

2400088c <FXHighpassParam3>:
}

void FXHighpassParam3(float value, int v)
{
    tSVF_setQ(&FXhighpass[v], value);
2400088c:	4b02      	ldr	r3, [pc, #8]	; (24000898 <FXHighpassParam3+0xc>)
2400088e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24000892:	f00d bb83 	b.w	2400df9c <tSVF_setQ>
24000896:	bf00      	nop
24000898:	20000134 	.word	0x20000134

2400089c <FXBandpassParam3>:
}

void FXBandpassParam3(float value, int v)
{
    tSVF_setQ(&FXbandpass[v], value);
2400089c:	4b02      	ldr	r3, [pc, #8]	; (240008a8 <FXBandpassParam3+0xc>)
2400089e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240008a2:	f00d bb7b 	b.w	2400df9c <tSVF_setQ>
240008a6:	bf00      	nop
240008a8:	20000114 	.word	0x20000114

240008ac <FXDiodeParam3>:
}

void FXDiodeParam3(float value, int v)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v], value);
240008ac:	4b02      	ldr	r3, [pc, #8]	; (240008b8 <FXDiodeParam3+0xc>)
240008ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240008b2:	f00e b8d5 	b.w	2400ea60 <tDiodeFilter_setQ>
240008b6:	bf00      	nop
240008b8:	20000124 	.word	0x20000124

240008bc <FXPeakParam3>:
}


void FXPeakParam3(float value, int v)
{
	tVZFilter_setResonance(&FXVZfilterPeak[v], value);
240008bc:	4b02      	ldr	r3, [pc, #8]	; (240008c8 <FXPeakParam3+0xc>)
240008be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240008c2:	f00d bebb 	b.w	2400e63c <tVZFilter_setResonance>
240008c6:	bf00      	nop
240008c8:	20000104 	.word	0x20000104

240008cc <FXLowShelfParam3>:
}


void FXLowShelfParam3(float value, int v)
{
	tVZFilter_setResonance(&FXVZfilterLS[v], value);
240008cc:	4b02      	ldr	r3, [pc, #8]	; (240008d8 <FXLowShelfParam3+0xc>)
240008ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240008d2:	f00d beb3 	b.w	2400e63c <tVZFilter_setResonance>
240008d6:	bf00      	nop
240008d8:	200000f4 	.word	0x200000f4

240008dc <FXHighShelfParam3>:
}


void FXHighShelfParam3(float value, int v)
{
	tVZFilter_setResonance(&FXVZfilterHS[v], value);
240008dc:	4b02      	ldr	r3, [pc, #8]	; (240008e8 <FXHighShelfParam3+0xc>)
240008de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240008e2:	f00d beab 	b.w	2400e63c <tVZFilter_setResonance>
240008e6:	bf00      	nop
240008e8:	200000e4 	.word	0x200000e4

240008ec <FXNotchParam3>:
}


void FXNotchParam3(float value, int v)
{
	tVZFilter_setResonance(&FXVZfilterBR[v], value);
240008ec:	4b02      	ldr	r3, [pc, #8]	; (240008f8 <FXNotchParam3+0xc>)
240008ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
240008f2:	f00d bea3 	b.w	2400e63c <tVZFilter_setResonance>
240008f6:	bf00      	nop
240008f8:	200000d4 	.word	0x200000d4

240008fc <FXLadderParam3>:
}


void FXLadderParam3(float value, int v)
{
	tLadderFilter_setQ(&FXLadderfilter[v], value);
240008fc:	4b02      	ldr	r3, [pc, #8]	; (24000908 <FXLadderParam3+0xc>)
240008fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
24000902:	f00e ba0b 	b.w	2400ed1c <tLadderFilter_setQ>
24000906:	bf00      	nop
24000908:	200000c4 	.word	0x200000c4

2400090c <codec_init>:
    CODEC_RATE_44K_44K = 0x08 << 2,
};


void codec_init(I2C_HandleTypeDef* i2c)
{
2400090c:	b570      	push	{r4, r5, r6, lr}

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
    uint8_t byte_2  = data & 0xff;
    uint8_t buff[2] = {byte_1, byte_2};
2400090e:	231e      	movs	r3, #30
{
24000910:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000912:	25fa      	movs	r5, #250	; 0xfa
24000914:	2134      	movs	r1, #52	; 0x34
24000916:	aa03      	add	r2, sp, #12
    uint8_t buff[2] = {byte_1, byte_2};
24000918:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400091c:	9500      	str	r5, [sp, #0]
2400091e:	2302      	movs	r3, #2
{
24000920:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000922:	f003 fed5 	bl	240046d0 <HAL_I2C_Master_Transmit>
                                              2, 250);

    HAL_Delay(10);
24000926:	200a      	movs	r0, #10
    uint8_t buff[2] = {byte_1, byte_2};
24000928:	260a      	movs	r6, #10
    HAL_Delay(10);
2400092a:	f001 ffe1 	bl	240028f0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400092e:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000932:	2302      	movs	r3, #2
24000934:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000936:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400093a:	4620      	mov	r0, r4
2400093c:	aa03      	add	r2, sp, #12
2400093e:	9500      	str	r5, [sp, #0]
24000940:	f003 fec6 	bl	240046d0 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000944:	200a      	movs	r0, #10
24000946:	f001 ffd3 	bl	240028f0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400094a:	f241 7202 	movw	r2, #5890	; 0x1702
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400094e:	2302      	movs	r3, #2
24000950:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000952:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000956:	4620      	mov	r0, r4
24000958:	aa03      	add	r2, sp, #12
2400095a:	9500      	str	r5, [sp, #0]
2400095c:	f003 feb8 	bl	240046d0 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000960:	200a      	movs	r0, #10
24000962:	f001 ffc5 	bl	240028f0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000966:	2204      	movs	r2, #4
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000968:	2302      	movs	r3, #2
2400096a:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
2400096c:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000970:	4620      	mov	r0, r4
24000972:	aa03      	add	r2, sp, #12
24000974:	9500      	str	r5, [sp, #0]
24000976:	f003 feab 	bl	240046d0 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
2400097a:	200a      	movs	r0, #10
2400097c:	f001 ffb8 	bl	240028f0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000980:	2206      	movs	r2, #6
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000982:	2302      	movs	r3, #2
24000984:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000986:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400098a:	4620      	mov	r0, r4
2400098c:	aa03      	add	r2, sp, #12
2400098e:	9500      	str	r5, [sp, #0]
24000990:	f003 fe9e 	bl	240046d0 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000994:	200a      	movs	r0, #10
24000996:	f001 ffab 	bl	240028f0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400099a:	f241 2208 	movw	r2, #4616	; 0x1208
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400099e:	2302      	movs	r3, #2
240009a0:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240009a2:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240009a6:	4620      	mov	r0, r4
240009a8:	aa03      	add	r2, sp, #12
240009aa:	9500      	str	r5, [sp, #0]
240009ac:	f003 fe90 	bl	240046d0 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240009b0:	4630      	mov	r0, r6
240009b2:	f001 ff9d 	bl	240028f0 <HAL_Delay>
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240009b6:	aa03      	add	r2, sp, #12
240009b8:	2302      	movs	r3, #2
240009ba:	2134      	movs	r1, #52	; 0x34
240009bc:	4620      	mov	r0, r4
240009be:	9500      	str	r5, [sp, #0]
    uint8_t buff[2] = {byte_1, byte_2};
240009c0:	f8ad 600c 	strh.w	r6, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240009c4:	f003 fe84 	bl	240046d0 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240009c8:	4630      	mov	r0, r6
240009ca:	f001 ff91 	bl	240028f0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240009ce:	f246 230c 	movw	r3, #25100	; 0x620c
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240009d2:	aa03      	add	r2, sp, #12
240009d4:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240009d6:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240009da:	4620      	mov	r0, r4
240009dc:	2302      	movs	r3, #2
240009de:	9500      	str	r5, [sp, #0]
240009e0:	f003 fe76 	bl	240046d0 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240009e4:	4630      	mov	r0, r6
240009e6:	f001 ff83 	bl	240028f0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240009ea:	f640 130e 	movw	r3, #2318	; 0x90e
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240009ee:	aa03      	add	r2, sp, #12
240009f0:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240009f2:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240009f6:	4620      	mov	r0, r4
240009f8:	2302      	movs	r3, #2
240009fa:	9500      	str	r5, [sp, #0]
240009fc:	f003 fe68 	bl	240046d0 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000a00:	4630      	mov	r0, r6
24000a02:	f001 ff75 	bl	240028f0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000a06:	2310      	movs	r3, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000a08:	aa03      	add	r2, sp, #12
24000a0a:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000a0c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000a10:	4620      	mov	r0, r4
24000a12:	2302      	movs	r3, #2
24000a14:	9500      	str	r5, [sp, #0]
24000a16:	f003 fe5b 	bl	240046d0 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000a1a:	4630      	mov	r0, r6
24000a1c:	f001 ff68 	bl	240028f0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000a20:	2312      	movs	r3, #18
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000a22:	aa03      	add	r2, sp, #12
24000a24:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000a26:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000a2a:	4620      	mov	r0, r4
24000a2c:	2302      	movs	r3, #2
24000a2e:	9500      	str	r5, [sp, #0]
24000a30:	f003 fe4e 	bl	240046d0 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000a34:	4630      	mov	r0, r6
24000a36:	f001 ff5b 	bl	240028f0 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000a3a:	f44f 7189 	mov.w	r1, #274	; 0x112
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000a3e:	aa03      	add	r2, sp, #12
24000a40:	2302      	movs	r3, #2
    uint8_t buff[2] = {byte_1, byte_2};
24000a42:	f8ad 100c 	strh.w	r1, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000a46:	4620      	mov	r0, r4
24000a48:	2134      	movs	r1, #52	; 0x34
24000a4a:	9500      	str	r5, [sp, #0]
24000a4c:	f003 fe40 	bl	240046d0 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000a50:	4630      	mov	r0, r6
24000a52:	f001 ff4d 	bl	240028f0 <HAL_Delay>
}
24000a56:	b004      	add	sp, #16
24000a58:	bd70      	pop	{r4, r5, r6, pc}
24000a5a:	bf00      	nop
24000a5c:	0000      	movs	r0, r0
	...

24000a60 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
24000a60:	b500      	push	{lr}
24000a62:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
24000a64:	2224      	movs	r2, #36	; 0x24
24000a66:	2100      	movs	r1, #0
24000a68:	4668      	mov	r0, sp
24000a6a:	f012 f86b 	bl	24012b44 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
24000a6e:	4818      	ldr	r0, [pc, #96]	; (24000ad0 <MX_DAC1_Init+0x70>)
24000a70:	4b18      	ldr	r3, [pc, #96]	; (24000ad4 <MX_DAC1_Init+0x74>)
24000a72:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
24000a74:	f002 f82a 	bl	24002acc <HAL_DAC_Init>
24000a78:	b9b8      	cbnz	r0, 24000aaa <MX_DAC1_Init+0x4a>
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
24000a7a:	2200      	movs	r2, #0
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
24000a7c:	4669      	mov	r1, sp
24000a7e:	4814      	ldr	r0, [pc, #80]	; (24000ad0 <MX_DAC1_Init+0x70>)
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
24000a80:	9204      	str	r2, [sp, #16]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
24000a82:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 24000ac0 <MX_DAC1_Init+0x60>
24000a86:	ed8d 7b00 	vstr	d7, [sp]
24000a8a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 24000ac8 <MX_DAC1_Init+0x68>
24000a8e:	ed8d 7b02 	vstr	d7, [sp, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
24000a92:	f002 f831 	bl	24002af8 <HAL_DAC_ConfigChannel>
24000a96:	b980      	cbnz	r0, 24000aba <MX_DAC1_Init+0x5a>
    Error_Handler();
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
24000a98:	2210      	movs	r2, #16
24000a9a:	4669      	mov	r1, sp
24000a9c:	480c      	ldr	r0, [pc, #48]	; (24000ad0 <MX_DAC1_Init+0x70>)
24000a9e:	f002 f82b 	bl	24002af8 <HAL_DAC_ConfigChannel>
24000aa2:	b928      	cbnz	r0, 24000ab0 <MX_DAC1_Init+0x50>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
24000aa4:	b00b      	add	sp, #44	; 0x2c
24000aa6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
24000aaa:	f001 fa5d 	bl	24001f68 <Error_Handler>
24000aae:	e7e4      	b.n	24000a7a <MX_DAC1_Init+0x1a>
    Error_Handler();
24000ab0:	f001 fa5a 	bl	24001f68 <Error_Handler>
}
24000ab4:	b00b      	add	sp, #44	; 0x2c
24000ab6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
24000aba:	f001 fa55 	bl	24001f68 <Error_Handler>
24000abe:	e7eb      	b.n	24000a98 <MX_DAC1_Init+0x38>
24000ac0:	00000000 	.word	0x00000000
24000ac4:	00000002 	.word	0x00000002
24000ac8:	00000000 	.word	0x00000000
24000acc:	00000001 	.word	0x00000001
24000ad0:	2000914c 	.word	0x2000914c
24000ad4:	40007400 	.word	0x40007400

24000ad8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC1)
24000ad8:	4a1b      	ldr	r2, [pc, #108]	; (24000b48 <HAL_DAC_MspInit+0x70>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000ada:	2300      	movs	r3, #0
  if(dacHandle->Instance==DAC1)
24000adc:	6801      	ldr	r1, [r0, #0]
{
24000ade:	b500      	push	{lr}
  if(dacHandle->Instance==DAC1)
24000ae0:	4291      	cmp	r1, r2
{
24000ae2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000ae4:	e9cd 3302 	strd	r3, r3, [sp, #8]
24000ae8:	e9cd 3304 	strd	r3, r3, [sp, #16]
24000aec:	9306      	str	r3, [sp, #24]
  if(dacHandle->Instance==DAC1)
24000aee:	d002      	beq.n	24000af6 <HAL_DAC_MspInit+0x1e>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
24000af0:	b009      	add	sp, #36	; 0x24
24000af2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC12_CLK_ENABLE();
24000af6:	4b15      	ldr	r3, [pc, #84]	; (24000b4c <HAL_DAC_MspInit+0x74>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24000af8:	a902      	add	r1, sp, #8
24000afa:	4815      	ldr	r0, [pc, #84]	; (24000b50 <HAL_DAC_MspInit+0x78>)
    __HAL_RCC_DAC12_CLK_ENABLE();
24000afc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
24000b00:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
24000b04:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
24000b08:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
24000b0c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
24000b10:	9200      	str	r2, [sp, #0]
24000b12:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24000b14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000b18:	f042 0201 	orr.w	r2, r2, #1
24000b1c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000b24:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
24000b28:	ed9f 7b05 	vldr	d7, [pc, #20]	; 24000b40 <HAL_DAC_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
24000b2c:	9301      	str	r3, [sp, #4]
24000b2e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
24000b30:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24000b34:	f003 fb70 	bl	24004218 <HAL_GPIO_Init>
}
24000b38:	b009      	add	sp, #36	; 0x24
24000b3a:	f85d fb04 	ldr.w	pc, [sp], #4
24000b3e:	bf00      	nop
24000b40:	00000030 	.word	0x00000030
24000b44:	00000003 	.word	0x00000003
24000b48:	40007400 	.word	0x40007400
24000b4c:	58024400 	.word	0x58024400
24000b50:	58020000 	.word	0x58020000

24000b54 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
24000b54:	4b1c      	ldr	r3, [pc, #112]	; (24000bc8 <MX_DMA_Init+0x74>)

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 3, 0);
24000b56:	2200      	movs	r2, #0
24000b58:	2103      	movs	r1, #3
24000b5a:	200c      	movs	r0, #12
{
24000b5c:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
24000b5e:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
24000b62:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
24000b64:	f044 0401 	orr.w	r4, r4, #1
24000b68:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
24000b6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
24000b70:	f003 0301 	and.w	r3, r3, #1
24000b74:	9301      	str	r3, [sp, #4]
24000b76:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 3, 0);
24000b78:	f001 fee4 	bl	24002944 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
24000b7c:	200c      	movs	r0, #12
24000b7e:	f001 ff1f 	bl	240029c0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 3, 0);
24000b82:	2200      	movs	r2, #0
24000b84:	2103      	movs	r1, #3
24000b86:	200d      	movs	r0, #13
24000b88:	f001 fedc 	bl	24002944 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
24000b8c:	200d      	movs	r0, #13
24000b8e:	f001 ff17 	bl	240029c0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 2, 0);
24000b92:	2200      	movs	r2, #0
24000b94:	2102      	movs	r1, #2
24000b96:	2011      	movs	r0, #17
24000b98:	f001 fed4 	bl	24002944 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
24000b9c:	2011      	movs	r0, #17
24000b9e:	f001 ff0f 	bl	240029c0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 2, 0);
24000ba2:	2200      	movs	r2, #0
24000ba4:	2102      	movs	r1, #2
24000ba6:	202f      	movs	r0, #47	; 0x2f
24000ba8:	f001 fecc 	bl	24002944 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
24000bac:	202f      	movs	r0, #47	; 0x2f
24000bae:	f001 ff07 	bl	240029c0 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 5, 0);
24000bb2:	2066      	movs	r0, #102	; 0x66
24000bb4:	2200      	movs	r2, #0
24000bb6:	2105      	movs	r1, #5
24000bb8:	f001 fec4 	bl	24002944 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24000bbc:	2066      	movs	r0, #102	; 0x66

}
24000bbe:	b002      	add	sp, #8
24000bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24000bc4:	f001 befc 	b.w	240029c0 <HAL_NVIC_EnableIRQ>
24000bc8:	58024400 	.word	0x58024400
24000bcc:	00000000 	.word	0x00000000

24000bd0 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24000bd0:	481b      	ldr	r0, [pc, #108]	; (24000c40 <MX_FMC_Init+0x70>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24000bd2:	2201      	movs	r2, #1
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
24000bd4:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24000bd6:	2108      	movs	r1, #8
{
24000bd8:	b510      	push	{r4, lr}
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24000bda:	4c1a      	ldr	r4, [pc, #104]	; (24000c44 <MX_FMC_Init+0x74>)
{
24000bdc:	b088      	sub	sp, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24000bde:	6082      	str	r2, [r0, #8]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24000be0:	2220      	movs	r2, #32
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24000be2:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
24000be4:	f44f 6100 	mov.w	r1, #2048	; 0x800
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24000be8:	6102      	str	r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
24000bea:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
24000bee:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
24000bf0:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24000bf2:	e9c0 4300 	strd	r4, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
24000bf6:	2440      	movs	r4, #64	; 0x40
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
24000bf8:	2308      	movs	r3, #8
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
24000bfa:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24000bfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 7;
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 8;
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 16;
  SdramTiming.RCDDelay = 10;
24000c02:	240a      	movs	r4, #10
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24000c04:	e9c0 1208 	strd	r1, r2, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
24000c08:	2204      	movs	r2, #4

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24000c0a:	4669      	mov	r1, sp
  SdramTiming.RCDDelay = 10;
24000c0c:	9406      	str	r4, [sp, #24]
  SdramTiming.LoadToActiveDelay = 2;
24000c0e:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 24000c38 <MX_FMC_Init+0x68>
24000c12:	e9cd 2302 	strd	r2, r3, [sp, #8]
24000c16:	2203      	movs	r2, #3
24000c18:	2310      	movs	r3, #16
24000c1a:	ed8d 7b00 	vstr	d7, [sp]
24000c1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24000c22:	f007 fe53 	bl	240088cc <HAL_SDRAM_Init>
24000c26:	b908      	cbnz	r0, 24000c2c <MX_FMC_Init+0x5c>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
24000c28:	b008      	add	sp, #32
24000c2a:	bd10      	pop	{r4, pc}
    Error_Handler( );
24000c2c:	f001 f99c 	bl	24001f68 <Error_Handler>
}
24000c30:	b008      	add	sp, #32
24000c32:	bd10      	pop	{r4, pc}
24000c34:	f3af 8000 	nop.w
24000c38:	00000002 	.word	0x00000002
24000c3c:	00000007 	.word	0x00000007
24000c40:	20009164 	.word	0x20009164
24000c44:	52004140 	.word	0x52004140

24000c48 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
24000c48:	4b31      	ldr	r3, [pc, #196]	; (24000d10 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000c4a:	2100      	movs	r1, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
24000c4c:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
24000c4e:	681a      	ldr	r2, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
24000c50:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000c52:	9104      	str	r1, [sp, #16]
  if (FMC_Initialized) {
24000c54:	2a00      	cmp	r2, #0
24000c56:	d159      	bne.n	24000d0c <HAL_SDRAM_MspInit+0xc4>
  __HAL_RCC_FMC_CLK_ENABLE();
24000c58:	4a2e      	ldr	r2, [pc, #184]	; (24000d14 <HAL_SDRAM_MspInit+0xcc>)
  FMC_Initialized = 1;
24000c5a:	2101      	movs	r1, #1
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24000c5c:	f64f 7083 	movw	r0, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24000c60:	240c      	movs	r4, #12
  FMC_Initialized = 1;
24000c62:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24000c64:	2102      	movs	r1, #2
  __HAL_RCC_FMC_CLK_ENABLE();
24000c66:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24000c6a:	2600      	movs	r6, #0
24000c6c:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
24000c6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24000c72:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
24000c76:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24000c7a:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
24000c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24000c80:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000c82:	2303      	movs	r3, #3
  __HAL_RCC_FMC_CLK_ENABLE();
24000c84:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000c86:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24000c88:	e9cd 0102 	strd	r0, r1, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24000c8c:	a902      	add	r1, sp, #8
24000c8e:	4822      	ldr	r0, [pc, #136]	; (24000d18 <HAL_SDRAM_MspInit+0xd0>)
24000c90:	f003 fac2 	bl	24004218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24000c94:	f248 1237 	movw	r2, #33079	; 0x8137
24000c98:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24000c9a:	a902      	add	r1, sp, #8
24000c9c:	481f      	ldr	r0, [pc, #124]	; (24000d1c <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24000c9e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24000ca0:	e9cd 2302 	strd	r2, r3, [sp, #8]
24000ca4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24000ca8:	f003 fab6 	bl	24004218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24000cac:	f24c 7203 	movw	r2, #50947	; 0xc703
24000cb0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24000cb2:	a902      	add	r1, sp, #8
24000cb4:	481a      	ldr	r0, [pc, #104]	; (24000d20 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24000cb6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24000cb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
24000cbc:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24000cc0:	f003 faaa 	bl	24004218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24000cc4:	f240 62ff 	movw	r2, #1791	; 0x6ff
24000cc8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24000cca:	a902      	add	r1, sp, #8
24000ccc:	4815      	ldr	r0, [pc, #84]	; (24000d24 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24000cce:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24000cd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
24000cd4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24000cd8:	f003 fa9e 	bl	24004218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24000cdc:	f64f 722c 	movw	r2, #65324	; 0xff2c
24000ce0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24000ce2:	a902      	add	r1, sp, #8
24000ce4:	4810      	ldr	r0, [pc, #64]	; (24000d28 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24000ce6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24000ce8:	e9cd 2302 	strd	r2, r3, [sp, #8]
24000cec:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24000cf0:	f003 fa92 	bl	24004218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24000cf4:	f64f 023f 	movw	r2, #63551	; 0xf83f
24000cf8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24000cfa:	a902      	add	r1, sp, #8
24000cfc:	480b      	ldr	r0, [pc, #44]	; (24000d2c <HAL_SDRAM_MspInit+0xe4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24000cfe:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24000d00:	e9cd 6704 	strd	r6, r7, [sp, #16]
24000d04:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24000d08:	f003 fa86 	bl	24004218 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
24000d0c:	b008      	add	sp, #32
24000d0e:	bdd0      	pop	{r4, r6, r7, pc}
24000d10:	20009160 	.word	0x20009160
24000d14:	58024400 	.word	0x58024400
24000d18:	58021000 	.word	0x58021000
24000d1c:	58021800 	.word	0x58021800
24000d20:	58020c00 	.word	0x58020c00
24000d24:	58022000 	.word	0x58022000
24000d28:	58021c00 	.word	0x58021c00
24000d2c:	58021400 	.word	0x58021400

24000d30 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
24000d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24000d34:	4b87      	ldr	r3, [pc, #540]	; (24000f54 <MX_GPIO_Init+0x224>)
{
24000d36:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000d38:	2400      	movs	r4, #0
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24000d3a:	4e87      	ldr	r6, [pc, #540]	; (24000f58 <MX_GPIO_Init+0x228>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24000d3c:	4d87      	ldr	r5, [pc, #540]	; (24000f5c <MX_GPIO_Init+0x22c>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24000d3e:	2180      	movs	r1, #128	; 0x80
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000d40:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24000d42:	4630      	mov	r0, r6
                           PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24000d44:	f8df a224 	ldr.w	sl, [pc, #548]	; 24000f6c <MX_GPIO_Init+0x23c>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
24000d48:	2700      	movs	r7, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24000d4a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 24000f70 <MX_GPIO_Init+0x240>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24000d4e:	f04f 0801 	mov.w	r8, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000d52:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
24000d56:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
24000d5a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000d5e:	f042 0210 	orr.w	r2, r2, #16
24000d62:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000d66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000d6a:	f002 0210 	and.w	r2, r2, #16
24000d6e:	9201      	str	r2, [sp, #4]
24000d70:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24000d72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000d76:	f042 0202 	orr.w	r2, r2, #2
24000d7a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000d7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000d82:	f002 0202 	and.w	r2, r2, #2
24000d86:	9202      	str	r2, [sp, #8]
24000d88:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
24000d8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24000d92:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000d96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000d9a:	f002 0240 	and.w	r2, r2, #64	; 0x40
24000d9e:	9203      	str	r2, [sp, #12]
24000da0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24000da2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000da6:	f042 0208 	orr.w	r2, r2, #8
24000daa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000dae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000db2:	f002 0208 	and.w	r2, r2, #8
24000db6:	9204      	str	r2, [sp, #16]
24000db8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24000dba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000dbe:	f042 0204 	orr.w	r2, r2, #4
24000dc2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000dc6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000dca:	f002 0204 	and.w	r2, r2, #4
24000dce:	9205      	str	r2, [sp, #20]
24000dd0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24000dd2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000dd6:	f042 0201 	orr.w	r2, r2, #1
24000dda:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000dde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000de2:	f002 0201 	and.w	r2, r2, #1
24000de6:	9206      	str	r2, [sp, #24]
24000de8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
24000dea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24000df2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000df6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000dfa:	f402 7280 	and.w	r2, r2, #256	; 0x100
24000dfe:	9207      	str	r2, [sp, #28]
24000e00:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
24000e02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000e06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
24000e0a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000e0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000e12:	f002 0280 	and.w	r2, r2, #128	; 0x80
24000e16:	9208      	str	r2, [sp, #32]
24000e18:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
24000e1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000e1e:	f042 0220 	orr.w	r2, r2, #32
24000e22:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24000e26:	4622      	mov	r2, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
24000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000e2c:	f003 0320 	and.w	r3, r3, #32
24000e30:	9309      	str	r3, [sp, #36]	; 0x24
24000e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24000e34:	f003 fb30 	bl	24004498 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24000e38:	4622      	mov	r2, r4
24000e3a:	4628      	mov	r0, r5
24000e3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24000e40:	f003 fb2a 	bl	24004498 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
24000e44:	f44f 42e5 	mov.w	r2, #29312	; 0x7280
24000e48:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24000e4a:	a90a      	add	r1, sp, #40	; 0x28
24000e4c:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24000e4e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
24000e50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24000e54:	f003 f9e0 	bl	24004218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24000e58:	f643 02f8 	movw	r2, #14584	; 0x38f8
24000e5c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24000e5e:	a90a      	add	r1, sp, #40	; 0x28
24000e60:	483f      	ldr	r0, [pc, #252]	; (24000f60 <MX_GPIO_Init+0x230>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24000e62:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24000e64:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24000e68:	f003 f9d6 	bl	24004218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24000e6c:	f649 72cd 	movw	r2, #40909	; 0x9fcd
24000e70:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24000e72:	a90a      	add	r1, sp, #40	; 0x28
24000e74:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24000e76:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24000e78:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24000e7c:	f003 f9cc 	bl	24004218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_2|GPIO_PIN_13
24000e80:	f242 42c7 	movw	r2, #9415	; 0x24c7
24000e84:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000e86:	a90a      	add	r1, sp, #40	; 0x28
24000e88:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24000e8a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_2|GPIO_PIN_13
24000e8c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000e90:	f003 f9c2 	bl	24004218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
24000e94:	f24e 027f 	movw	r2, #57471	; 0xe07f
24000e98:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24000e9a:	a90a      	add	r1, sp, #40	; 0x28
24000e9c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24000e9e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
24000ea0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24000ea4:	f003 f9b8 	bl	24004218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
24000ea8:	f44f 6210 	mov.w	r2, #2304	; 0x900
24000eac:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24000eae:	a90a      	add	r1, sp, #40	; 0x28
24000eb0:	482c      	ldr	r0, [pc, #176]	; (24000f64 <MX_GPIO_Init+0x234>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24000eb2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
24000eb4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24000eb8:	f003 f9ae 	bl	24004218 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24000ebc:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_7;
24000ebe:	2280      	movs	r2, #128	; 0x80
24000ec0:	2600      	movs	r6, #0
24000ec2:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24000ec4:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7;
24000ec6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24000eca:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24000ece:	f003 f9a3 	bl	24004218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24000ed2:	2208      	movs	r2, #8
24000ed4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24000ed8:	4650      	mov	r0, sl
24000eda:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24000edc:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24000ede:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24000ee2:	f003 f999 	bl	24004218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24000ee6:	22c0      	movs	r2, #192	; 0xc0
24000ee8:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24000eea:	a90a      	add	r1, sp, #40	; 0x28
24000eec:	481e      	ldr	r0, [pc, #120]	; (24000f68 <MX_GPIO_Init+0x238>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24000eee:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24000ef0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24000ef4:	f003 f990 	bl	24004218 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24000ef8:	2202      	movs	r2, #2
24000efa:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24000efc:	4648      	mov	r0, r9
24000efe:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24000f00:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24000f04:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24000f08:	f003 f986 	bl	24004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24000f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000f10:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000f12:	a90a      	add	r1, sp, #40	; 0x28
24000f14:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24000f16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24000f1a:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000f1e:	f003 f97b 	bl	24004218 <HAL_GPIO_Init>
  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
24000f22:	230c      	movs	r3, #12
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24000f24:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000f28:	4628      	mov	r0, r5
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
24000f2a:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24000f2c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000f2e:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24000f30:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24000f34:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000f38:	f003 f96e 	bl	24004218 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
24000f3c:	4622      	mov	r2, r4
24000f3e:	4641      	mov	r1, r8
24000f40:	2009      	movs	r0, #9
24000f42:	f001 fcff 	bl	24002944 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
24000f46:	2009      	movs	r0, #9
24000f48:	f001 fd3a 	bl	240029c0 <HAL_NVIC_EnableIRQ>

}
24000f4c:	b010      	add	sp, #64	; 0x40
24000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24000f52:	bf00      	nop
24000f54:	58024400 	.word	0x58024400
24000f58:	58020800 	.word	0x58020800
24000f5c:	58020400 	.word	0x58020400
24000f60:	58020c00 	.word	0x58020c00
24000f64:	58022000 	.word	0x58022000
24000f68:	58021c00 	.word	0x58021c00
24000f6c:	58021800 	.word	0x58021800
24000f70:	58020000 	.word	0x58020000

24000f74 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
24000f74:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
24000f76:	4817      	ldr	r0, [pc, #92]	; (24000fd4 <MX_I2C1_Init+0x60>)
  hi2c1.Init.Timing = 0x30B00F2D;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24000f78:	2300      	movs	r3, #0
24000f7a:	4917      	ldr	r1, [pc, #92]	; (24000fd8 <MX_I2C1_Init+0x64>)
24000f7c:	2401      	movs	r4, #1
24000f7e:	4a17      	ldr	r2, [pc, #92]	; (24000fdc <MX_I2C1_Init+0x68>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24000f80:	6203      	str	r3, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24000f82:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c1.Init.OwnAddress2 = 0;
24000f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24000f8a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
24000f8e:	f003 fb49 	bl	24004624 <HAL_I2C_Init>
24000f92:	b950      	cbnz	r0, 24000faa <MX_I2C1_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24000f94:	2100      	movs	r1, #0
24000f96:	480f      	ldr	r0, [pc, #60]	; (24000fd4 <MX_I2C1_Init+0x60>)
24000f98:	f003 fd3a 	bl	24004a10 <HAL_I2CEx_ConfigAnalogFilter>
24000f9c:	b968      	cbnz	r0, 24000fba <MX_I2C1_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24000f9e:	2100      	movs	r1, #0
24000fa0:	480c      	ldr	r0, [pc, #48]	; (24000fd4 <MX_I2C1_Init+0x60>)
24000fa2:	f003 fd5f 	bl	24004a64 <HAL_I2CEx_ConfigDigitalFilter>
24000fa6:	b980      	cbnz	r0, 24000fca <MX_I2C1_Init+0x56>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
24000fa8:	bd10      	pop	{r4, pc}
    Error_Handler();
24000faa:	f000 ffdd 	bl	24001f68 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24000fae:	2100      	movs	r1, #0
24000fb0:	4808      	ldr	r0, [pc, #32]	; (24000fd4 <MX_I2C1_Init+0x60>)
24000fb2:	f003 fd2d 	bl	24004a10 <HAL_I2CEx_ConfigAnalogFilter>
24000fb6:	2800      	cmp	r0, #0
24000fb8:	d0f1      	beq.n	24000f9e <MX_I2C1_Init+0x2a>
    Error_Handler();
24000fba:	f000 ffd5 	bl	24001f68 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24000fbe:	2100      	movs	r1, #0
24000fc0:	4804      	ldr	r0, [pc, #16]	; (24000fd4 <MX_I2C1_Init+0x60>)
24000fc2:	f003 fd4f 	bl	24004a64 <HAL_I2CEx_ConfigDigitalFilter>
24000fc6:	2800      	cmp	r0, #0
24000fc8:	d0ee      	beq.n	24000fa8 <MX_I2C1_Init+0x34>
}
24000fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24000fce:	f000 bfcb 	b.w	24001f68 <Error_Handler>
24000fd2:	bf00      	nop
24000fd4:	20009198 	.word	0x20009198
24000fd8:	40005400 	.word	0x40005400
24000fdc:	30b00f2d 	.word	0x30b00f2d

24000fe0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
24000fe0:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
24000fe2:	4817      	ldr	r0, [pc, #92]	; (24001040 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24000fe4:	2300      	movs	r3, #0
24000fe6:	4917      	ldr	r1, [pc, #92]	; (24001044 <MX_I2C2_Init+0x64>)
24000fe8:	2401      	movs	r4, #1
24000fea:	4a17      	ldr	r2, [pc, #92]	; (24001048 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24000fec:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24000fee:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
24000ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24000ff6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
24000ffa:	f003 fb13 	bl	24004624 <HAL_I2C_Init>
24000ffe:	b950      	cbnz	r0, 24001016 <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001000:	2100      	movs	r1, #0
24001002:	480f      	ldr	r0, [pc, #60]	; (24001040 <MX_I2C2_Init+0x60>)
24001004:	f003 fd04 	bl	24004a10 <HAL_I2CEx_ConfigAnalogFilter>
24001008:	b968      	cbnz	r0, 24001026 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
2400100a:	2100      	movs	r1, #0
2400100c:	480c      	ldr	r0, [pc, #48]	; (24001040 <MX_I2C2_Init+0x60>)
2400100e:	f003 fd29 	bl	24004a64 <HAL_I2CEx_ConfigDigitalFilter>
24001012:	b980      	cbnz	r0, 24001036 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
24001014:	bd10      	pop	{r4, pc}
    Error_Handler();
24001016:	f000 ffa7 	bl	24001f68 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
2400101a:	2100      	movs	r1, #0
2400101c:	4808      	ldr	r0, [pc, #32]	; (24001040 <MX_I2C2_Init+0x60>)
2400101e:	f003 fcf7 	bl	24004a10 <HAL_I2CEx_ConfigAnalogFilter>
24001022:	2800      	cmp	r0, #0
24001024:	d0f1      	beq.n	2400100a <MX_I2C2_Init+0x2a>
    Error_Handler();
24001026:	f000 ff9f 	bl	24001f68 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
2400102a:	2100      	movs	r1, #0
2400102c:	4804      	ldr	r0, [pc, #16]	; (24001040 <MX_I2C2_Init+0x60>)
2400102e:	f003 fd19 	bl	24004a64 <HAL_I2CEx_ConfigDigitalFilter>
24001032:	2800      	cmp	r0, #0
24001034:	d0ee      	beq.n	24001014 <MX_I2C2_Init+0x34>
}
24001036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
2400103a:	f000 bf95 	b.w	24001f68 <Error_Handler>
2400103e:	bf00      	nop
24001040:	200091ec 	.word	0x200091ec
24001044:	40005800 	.word	0x40005800
24001048:	00b03fdb 	.word	0x00b03fdb

2400104c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
2400104c:	b5f0      	push	{r4, r5, r6, r7, lr}
2400104e:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001050:	2100      	movs	r1, #0
{
24001052:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001054:	22c0      	movs	r2, #192	; 0xc0
24001056:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001058:	910a      	str	r1, [sp, #40]	; 0x28
2400105a:	e9cd 1106 	strd	r1, r1, [sp, #24]
2400105e:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001062:	f011 fd6f 	bl	24012b44 <memset>
  if(i2cHandle->Instance==I2C1)
24001066:	6823      	ldr	r3, [r4, #0]
24001068:	4a45      	ldr	r2, [pc, #276]	; (24001180 <HAL_I2C_MspInit+0x134>)
2400106a:	4293      	cmp	r3, r2
2400106c:	d004      	beq.n	24001078 <HAL_I2C_MspInit+0x2c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
2400106e:	4a45      	ldr	r2, [pc, #276]	; (24001184 <HAL_I2C_MspInit+0x138>)
24001070:	4293      	cmp	r3, r2
24001072:	d034      	beq.n	240010de <HAL_I2C_MspInit+0x92>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
24001074:	b03d      	add	sp, #244	; 0xf4
24001076:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24001078:	2208      	movs	r2, #8
2400107a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400107c:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
2400107e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001082:	f004 fc57 	bl	24005934 <HAL_RCCEx_PeriphCLKConfig>
24001086:	2800      	cmp	r0, #0
24001088:	d173      	bne.n	24001172 <HAL_I2C_MspInit+0x126>
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400108a:	4c3f      	ldr	r4, [pc, #252]	; (24001188 <HAL_I2C_MspInit+0x13c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
2400108c:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
2400108e:	f44f 7640 	mov.w	r6, #768	; 0x300
24001092:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001094:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001098:	a906      	add	r1, sp, #24
2400109a:	483c      	ldr	r0, [pc, #240]	; (2400118c <HAL_I2C_MspInit+0x140>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400109c:	f043 0302 	orr.w	r3, r3, #2
240010a0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
240010a4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
240010a8:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
240010aa:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
240010ac:	f003 0302 	and.w	r3, r3, #2
240010b0:	9301      	str	r3, [sp, #4]
240010b2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
240010b4:	2300      	movs	r3, #0
240010b6:	e9cd 6706 	strd	r6, r7, [sp, #24]
240010ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240010be:	f003 f8ab 	bl	24004218 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
240010c2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
240010c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
240010ca:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
240010ce:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
240010d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
240010d6:	9302      	str	r3, [sp, #8]
240010d8:	9b02      	ldr	r3, [sp, #8]
}
240010da:	b03d      	add	sp, #244	; 0xf4
240010dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
240010de:	2208      	movs	r2, #8
240010e0:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240010e2:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
240010e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240010e8:	f004 fc24 	bl	24005934 <HAL_RCCEx_PeriphCLKConfig>
240010ec:	2800      	cmp	r0, #0
240010ee:	d143      	bne.n	24001178 <HAL_I2C_MspInit+0x12c>
    __HAL_RCC_GPIOH_CLK_ENABLE();
240010f0:	4c25      	ldr	r4, [pc, #148]	; (24001188 <HAL_I2C_MspInit+0x13c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240010f2:	2010      	movs	r0, #16
240010f4:	2112      	movs	r1, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
240010f6:	2504      	movs	r5, #4
    __HAL_RCC_GPIOH_CLK_ENABLE();
240010f8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240010fc:	2600      	movs	r6, #0
240010fe:	2701      	movs	r7, #1
    __HAL_RCC_GPIOH_CLK_ENABLE();
24001100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24001104:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
24001108:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
2400110c:	f003 0380 	and.w	r3, r3, #128	; 0x80
24001110:	9303      	str	r3, [sp, #12]
24001112:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001114:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24001118:	f043 0302 	orr.w	r3, r3, #2
2400111c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
24001120:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
24001124:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001126:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
2400112a:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400112e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001130:	a906      	add	r1, sp, #24
24001132:	4817      	ldr	r0, [pc, #92]	; (24001190 <HAL_I2C_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001134:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24001136:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
2400113a:	f003 f86d 	bl	24004218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
2400113e:	f44f 6200 	mov.w	r2, #2048	; 0x800
24001142:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001144:	a906      	add	r1, sp, #24
24001146:	4811      	ldr	r0, [pc, #68]	; (2400118c <HAL_I2C_MspInit+0x140>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
24001148:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11;
2400114a:	e9cd 2306 	strd	r2, r3, [sp, #24]
2400114e:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001152:	f003 f861 	bl	24004218 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
24001156:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
2400115a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2400115e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
24001162:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
24001166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2400116a:	9305      	str	r3, [sp, #20]
2400116c:	9b05      	ldr	r3, [sp, #20]
}
2400116e:	b03d      	add	sp, #244	; 0xf4
24001170:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
24001172:	f000 fef9 	bl	24001f68 <Error_Handler>
24001176:	e788      	b.n	2400108a <HAL_I2C_MspInit+0x3e>
      Error_Handler();
24001178:	f000 fef6 	bl	24001f68 <Error_Handler>
2400117c:	e7b8      	b.n	240010f0 <HAL_I2C_MspInit+0xa4>
2400117e:	bf00      	nop
24001180:	40005400 	.word	0x40005400
24001184:	40005800 	.word	0x40005800
24001188:	58024400 	.word	0x58024400
2400118c:	58020400 	.word	0x58020400
24001190:	58021c00 	.word	0x58021c00

24001194 <blankFunction>:


void blankFunction(float a, int b)
{
	;
}
24001194:	4770      	bx	lr
24001196:	bf00      	nop

24001198 <checkForSDCardPreset>:
{
24001198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint8_t status = SD_PRESENT;
2400119c:	2501      	movs	r5, #1
{
2400119e:	b08a      	sub	sp, #40	; 0x28
  __IO uint8_t status = SD_PRESENT;
240011a0:	f88d 500b 	strb.w	r5, [sp, #11]
  return status;
240011a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
	if(BSP_SD_IsDetected())
240011a8:	b95b      	cbnz	r3, 240011c2 <checkForSDCardPreset+0x2a>
240011aa:	4e39      	ldr	r6, [pc, #228]	; (24001290 <checkForSDCardPreset+0xf8>)
240011ac:	4f39      	ldr	r7, [pc, #228]	; (24001294 <checkForSDCardPreset+0xfc>)
		loadFailed = 1;
240011ae:	2301      	movs	r3, #1
240011b0:	2000      	movs	r0, #0
240011b2:	703b      	strb	r3, [r7, #0]
	presetWaitingToLoad = 0;
240011b4:	2300      	movs	r3, #0
240011b6:	4a38      	ldr	r2, [pc, #224]	; (24001298 <checkForSDCardPreset+0x100>)
240011b8:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
240011ba:	7033      	strb	r3, [r6, #0]
}
240011bc:	b00a      	add	sp, #40	; 0x28
240011be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		loadFailed = 0;
240011c2:	f04f 0800 	mov.w	r8, #0
		diskBusy = 1;
240011c6:	4e32      	ldr	r6, [pc, #200]	; (24001290 <checkForSDCardPreset+0xf8>)
		loadFailed = 0;
240011c8:	4f32      	ldr	r7, [pc, #200]	; (24001294 <checkForSDCardPreset+0xfc>)
240011ca:	4604      	mov	r4, r0
		disk_initialize(0);
240011cc:	4640      	mov	r0, r8
		diskBusy = 1;
240011ce:	7035      	strb	r5, [r6, #0]
		loadFailed = 0;
240011d0:	f887 8000 	strb.w	r8, [r7]
		disk_initialize(0);
240011d4:	f009 fb14 	bl	2400a800 <disk_initialize>
	    disk_status(0);
240011d8:	4640      	mov	r0, r8
240011da:	f009 fb07 	bl	2400a7ec <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
240011de:	462a      	mov	r2, r5
240011e0:	492e      	ldr	r1, [pc, #184]	; (2400129c <checkForSDCardPreset+0x104>)
240011e2:	482f      	ldr	r0, [pc, #188]	; (240012a0 <checkForSDCardPreset+0x108>)
240011e4:	f00b fd1c 	bl	2400cc20 <f_mount>
240011e8:	2800      	cmp	r0, #0
240011ea:	d1e0      	bne.n	240011ae <checkForSDCardPreset+0x16>
			itoa(numberToLoad, charBuf, 10);
240011ec:	a904      	add	r1, sp, #16
240011ee:	220a      	movs	r2, #10
240011f0:	4620      	mov	r0, r4
240011f2:	f011 fc97 	bl	24012b24 <itoa>
			int len = ((strlen(charBuf)));
240011f6:	a804      	add	r0, sp, #16
240011f8:	f7ff f86e 	bl	240002d8 <strlen>
			if (len == 1)
240011fc:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
240011fe:	4601      	mov	r1, r0
			if (len == 1)
24001200:	d02d      	beq.n	2400125e <checkForSDCardPreset+0xc6>
				strcat(charBuf, ".ebp");
24001202:	ab04      	add	r3, sp, #16
24001204:	4c27      	ldr	r4, [pc, #156]	; (240012a4 <checkForSDCardPreset+0x10c>)
24001206:	f10d 0c10 	add.w	ip, sp, #16
				strcpy(finalString, charBuf);
2400120a:	1d42      	adds	r2, r0, #5
				strcat(charBuf, ".ebp");
2400120c:	181d      	adds	r5, r3, r0
2400120e:	6820      	ldr	r0, [r4, #0]
				strcpy(finalString, charBuf);
24001210:	ab07      	add	r3, sp, #28
				strcat(charBuf, ".ebp");
24001212:	f84c 0001 	str.w	r0, [ip, r1]
24001216:	7921      	ldrb	r1, [r4, #4]
				strcpy(finalString, charBuf);
24001218:	4618      	mov	r0, r3
				strcat(charBuf, ".ebp");
2400121a:	7129      	strb	r1, [r5, #4]
				strcpy(finalString, charBuf);
2400121c:	4661      	mov	r1, ip
2400121e:	f011 fc83 	bl	24012b28 <memcpy>
24001222:	4603      	mov	r3, r0
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24001224:	4a1d      	ldr	r2, [pc, #116]	; (2400129c <checkForSDCardPreset+0x104>)
24001226:	4920      	ldr	r1, [pc, #128]	; (240012a8 <checkForSDCardPreset+0x110>)
24001228:	4820      	ldr	r0, [pc, #128]	; (240012ac <checkForSDCardPreset+0x114>)
2400122a:	f00c fa27 	bl	2400d67c <f_findfirst>
			if(res == FR_OK)
2400122e:	2800      	cmp	r0, #0
24001230:	d1bd      	bne.n	240011ae <checkForSDCardPreset+0x16>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24001232:	4c1f      	ldr	r4, [pc, #124]	; (240012b0 <checkForSDCardPreset+0x118>)
24001234:	2211      	movs	r2, #17
24001236:	491f      	ldr	r1, [pc, #124]	; (240012b4 <checkForSDCardPreset+0x11c>)
24001238:	4620      	mov	r0, r4
2400123a:	f00b fd3d 	bl	2400ccb8 <f_open>
2400123e:	2800      	cmp	r0, #0
24001240:	d1b5      	bne.n	240011ae <checkForSDCardPreset+0x16>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24001242:	ab03      	add	r3, sp, #12
24001244:	68e2      	ldr	r2, [r4, #12]
24001246:	491c      	ldr	r1, [pc, #112]	; (240012b8 <checkForSDCardPreset+0x120>)
24001248:	4620      	mov	r0, r4
2400124a:	f00b feb1 	bl	2400cfb0 <f_read>
					presetWaitingToParse = bytesRead;
2400124e:	9a03      	ldr	r2, [sp, #12]
24001250:	4b1a      	ldr	r3, [pc, #104]	; (240012bc <checkForSDCardPreset+0x124>)
					f_close(&SDFile);
24001252:	4620      	mov	r0, r4
					presetWaitingToParse = bytesRead;
24001254:	601a      	str	r2, [r3, #0]
					f_close(&SDFile);
24001256:	f00c f907 	bl	2400d468 <f_close>
					found = 1;
2400125a:	2001      	movs	r0, #1
2400125c:	e7aa      	b.n	240011b4 <checkForSDCardPreset+0x1c>
				finalString[1] = charBuf[0];
2400125e:	f89d 2010 	ldrb.w	r2, [sp, #16]
				strcat(finalString, ".ebp");
24001262:	ab07      	add	r3, sp, #28
				finalString[2] = charBuf[1];
24001264:	f89d 1011 	ldrb.w	r1, [sp, #17]
				finalString[1] = charBuf[0];
24001268:	f88d 201d 	strb.w	r2, [sp, #29]
				finalString[0] = '0';
2400126c:	2230      	movs	r2, #48	; 0x30
				strcat(finalString, ".ebp");
2400126e:	4618      	mov	r0, r3
				finalString[2] = charBuf[1];
24001270:	f88d 101e 	strb.w	r1, [sp, #30]
				strcat(finalString, ".ebp");
24001274:	9301      	str	r3, [sp, #4]
				finalString[0] = '0';
24001276:	f88d 201c 	strb.w	r2, [sp, #28]
				strcat(finalString, ".ebp");
2400127a:	f7ff f82d 	bl	240002d8 <strlen>
2400127e:	4909      	ldr	r1, [pc, #36]	; (240012a4 <checkForSDCardPreset+0x10c>)
24001280:	4602      	mov	r2, r0
24001282:	9b01      	ldr	r3, [sp, #4]
24001284:	181c      	adds	r4, r3, r0
24001286:	6808      	ldr	r0, [r1, #0]
24001288:	5098      	str	r0, [r3, r2]
2400128a:	790a      	ldrb	r2, [r1, #4]
2400128c:	7122      	strb	r2, [r4, #4]
2400128e:	e7c9      	b.n	24001224 <checkForSDCardPreset+0x8c>
24001290:	2000a27c 	.word	0x2000a27c
24001294:	2000e42c 	.word	0x2000e42c
24001298:	2000f808 	.word	0x2000f808
2400129c:	20012240 	.word	0x20012240
240012a0:	20011de0 	.word	0x20011de0
240012a4:	240140f8 	.word	0x240140f8
240012a8:	2000c2e0 	.word	0x2000c2e0
240012ac:	2000a244 	.word	0x2000a244
240012b0:	20012014 	.word	0x20012014
240012b4:	2000c2f6 	.word	0x2000c2f6
240012b8:	20009240 	.word	0x20009240
240012bc:	2000f80c 	.word	0x2000f80c

240012c0 <SystemClock_Config>:
{
240012c0:	b500      	push	{lr}
240012c2:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
240012c4:	224c      	movs	r2, #76	; 0x4c
240012c6:	2100      	movs	r1, #0
240012c8:	a80c      	add	r0, sp, #48	; 0x30
240012ca:	f011 fc3b 	bl	24012b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
240012ce:	2220      	movs	r2, #32
240012d0:	2100      	movs	r1, #0
240012d2:	a804      	add	r0, sp, #16
240012d4:	f011 fc36 	bl	24012b44 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
240012d8:	2002      	movs	r0, #2
240012da:	f003 fbef 	bl	24004abc <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
240012de:	4b44      	ldr	r3, [pc, #272]	; (240013f0 <SystemClock_Config+0x130>)
240012e0:	2100      	movs	r1, #0
240012e2:	4a44      	ldr	r2, [pc, #272]	; (240013f4 <SystemClock_Config+0x134>)
240012e4:	9101      	str	r1, [sp, #4]
240012e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
240012e8:	f021 0101 	bic.w	r1, r1, #1
240012ec:	62d9      	str	r1, [r3, #44]	; 0x2c
240012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240012f0:	f003 0301 	and.w	r3, r3, #1
240012f4:	9301      	str	r3, [sp, #4]
240012f6:	6993      	ldr	r3, [r2, #24]
240012f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
240012fc:	6193      	str	r3, [r2, #24]
240012fe:	6993      	ldr	r3, [r2, #24]
24001300:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24001304:	9301      	str	r3, [sp, #4]
24001306:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24001308:	6993      	ldr	r3, [r2, #24]
2400130a:	0499      	lsls	r1, r3, #18
2400130c:	d5fc      	bpl.n	24001308 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400130e:	4b3a      	ldr	r3, [pc, #232]	; (240013f8 <SystemClock_Config+0x138>)
24001310:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
24001314:	f041 0102 	orr.w	r1, r1, #2
24001318:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
2400131c:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400131e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24001322:	f003 0302 	and.w	r3, r3, #2
24001326:	9302      	str	r3, [sp, #8]
24001328:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
2400132a:	9103      	str	r1, [sp, #12]
2400132c:	6991      	ldr	r1, [r2, #24]
2400132e:	4b30      	ldr	r3, [pc, #192]	; (240013f0 <SystemClock_Config+0x130>)
24001330:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
24001334:	6191      	str	r1, [r2, #24]
24001336:	6992      	ldr	r2, [r2, #24]
24001338:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
2400133c:	9203      	str	r2, [sp, #12]
2400133e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24001340:	4a2c      	ldr	r2, [pc, #176]	; (240013f4 <SystemClock_Config+0x134>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24001342:	f041 0101 	orr.w	r1, r1, #1
24001346:	62d9      	str	r1, [r3, #44]	; 0x2c
24001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400134a:	f003 0301 	and.w	r3, r3, #1
2400134e:	9303      	str	r3, [sp, #12]
24001350:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24001352:	6993      	ldr	r3, [r2, #24]
24001354:	049b      	lsls	r3, r3, #18
24001356:	d5fc      	bpl.n	24001352 <SystemClock_Config+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
24001358:	4a27      	ldr	r2, [pc, #156]	; (240013f8 <SystemClock_Config+0x138>)
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
2400135a:	2101      	movs	r1, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2400135c:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
2400135e:	6a93      	ldr	r3, [r2, #40]	; 0x28
24001360:	f023 0303 	bic.w	r3, r3, #3
24001364:	f043 0302 	orr.w	r3, r3, #2
24001368:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
2400136a:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
2400136c:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
2400136e:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
24001370:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLM = 1;
24001372:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 60;
24001374:	213c      	movs	r1, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24001376:	921d      	str	r2, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLN = 60;
24001378:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
2400137a:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2400137c:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 6;
24001380:	2306      	movs	r3, #6
24001382:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 8;
24001384:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
24001386:	ed9f 7b14 	vldr	d7, [pc, #80]	; 240013d8 <SystemClock_Config+0x118>
  RCC_OscInitStruct.PLL.PLLR = 8;
2400138a:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
2400138c:	230c      	movs	r3, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
2400138e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
24001392:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24001394:	f003 fc96 	bl	24004cc4 <HAL_RCC_OscConfig>
24001398:	b108      	cbz	r0, 2400139e <SystemClock_Config+0xde>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
2400139a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
2400139c:	e7fe      	b.n	2400139c <SystemClock_Config+0xdc>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2400139e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 240013e0 <SystemClock_Config+0x120>
240013a2:	2200      	movs	r2, #0
240013a4:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
240013a6:	a804      	add	r0, sp, #16
240013a8:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
240013aa:	ed8d 7b04 	vstr	d7, [sp, #16]
240013ae:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 240013e8 <SystemClock_Config+0x128>
240013b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
240013b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
240013ba:	2340      	movs	r3, #64	; 0x40
240013bc:	ed8d 7b08 	vstr	d7, [sp, #32]
240013c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
240013c4:	f004 f812 	bl	240053ec <HAL_RCC_ClockConfig>
240013c8:	b108      	cbz	r0, 240013ce <SystemClock_Config+0x10e>
240013ca:	b672      	cpsid	i
  while (1)
240013cc:	e7fe      	b.n	240013cc <SystemClock_Config+0x10c>
}
240013ce:	b021      	add	sp, #132	; 0x84
240013d0:	f85d fb04 	ldr.w	pc, [sp], #4
240013d4:	f3af 8000 	nop.w
240013d8:	00000021 	.word	0x00000021
240013dc:	00010000 	.word	0x00010000
240013e0:	0000003f 	.word	0x0000003f
240013e4:	00000003 	.word	0x00000003
240013e8:	00000040 	.word	0x00000040
240013ec:	00000040 	.word	0x00000040
240013f0:	58000400 	.word	0x58000400
240013f4:	58024800 	.word	0x58024800
240013f8:	58024400 	.word	0x58024400
240013fc:	00000000 	.word	0x00000000

24001400 <PeriphCommonClock_Config>:
{
24001400:	b500      	push	{lr}
24001402:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001404:	2280      	movs	r2, #128	; 0x80
24001406:	2100      	movs	r1, #0
24001408:	a810      	add	r0, sp, #64	; 0x40
2400140a:	f011 fb9b 	bl	24012b44 <memset>
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
2400140e:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24001410:	2201      	movs	r2, #1
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001412:	4668      	mov	r0, sp
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
24001414:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
24001416:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24001418:	23c0      	movs	r3, #192	; 0xc0
2400141a:	ed9f 7b17 	vldr	d7, [pc, #92]	; 24001478 <PeriphCommonClock_Config+0x78>
2400141e:	e9cd 2306 	strd	r2, r3, [sp, #24]
24001422:	2201      	movs	r2, #1
24001424:	230c      	movs	r3, #12
24001426:	ed8d 7b02 	vstr	d7, [sp, #8]
2400142a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 24001480 <PeriphCommonClock_Config+0x80>
2400142e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
24001432:	2210      	movs	r2, #16
24001434:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24001438:	ed8d 7b04 	vstr	d7, [sp, #16]
2400143c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 24001488 <PeriphCommonClock_Config+0x88>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
24001440:	ed9f 6b13 	vldr	d6, [pc, #76]	; 24001490 <PeriphCommonClock_Config+0x90>
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24001444:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
24001448:	ed8d 7b08 	vstr	d7, [sp, #32]
2400144c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 24001498 <PeriphCommonClock_Config+0x98>
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
24001450:	f640 1238 	movw	r2, #2360	; 0x938
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
24001454:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
24001458:	ed8d 6b00 	vstr	d6, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
2400145c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
24001460:	9211      	str	r2, [sp, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
24001462:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001464:	f004 fa66 	bl	24005934 <HAL_RCCEx_PeriphCLKConfig>
24001468:	b108      	cbz	r0, 2400146e <PeriphCommonClock_Config+0x6e>
2400146a:	b672      	cpsid	i
  while (1)
2400146c:	e7fe      	b.n	2400146c <PeriphCommonClock_Config+0x6c>
}
2400146e:	b031      	add	sp, #196	; 0xc4
24001470:	f85d fb04 	ldr.w	pc, [sp], #4
24001474:	f3af 8000 	nop.w
24001478:	00000001 	.word	0x00000001
2400147c:	0000000a 	.word	0x0000000a
24001480:	00000008 	.word	0x00000008
24001484:	00000002 	.word	0x00000002
24001488:	00000020 	.word	0x00000020
2400148c:	00001000 	.word	0x00001000
24001490:	01010100 	.word	0x01010100
24001494:	00000000 	.word	0x00000000
24001498:	00000004 	.word	0x00000004
2400149c:	00000008 	.word	0x00000008

240014a0 <getPresetNamesFromSDCard>:
{
240014a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
240014a4:	2401      	movs	r4, #1
{
240014a6:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
240014a8:	f88d 4003 	strb.w	r4, [sp, #3]
  return status;
240014ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
240014b0:	b92b      	cbnz	r3, 240014be <getPresetNamesFromSDCard+0x1e>
240014b2:	4e9d      	ldr	r6, [pc, #628]	; (24001728 <getPresetNamesFromSDCard+0x288>)
	diskBusy = 0;
240014b4:	2300      	movs	r3, #0
240014b6:	7033      	strb	r3, [r6, #0]
}
240014b8:	b009      	add	sp, #36	; 0x24
240014ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		loadFailed = 0;
240014be:	2500      	movs	r5, #0
240014c0:	4b9a      	ldr	r3, [pc, #616]	; (2400172c <getPresetNamesFromSDCard+0x28c>)
		diskBusy = 1;
240014c2:	4e99      	ldr	r6, [pc, #612]	; (24001728 <getPresetNamesFromSDCard+0x288>)
		disk_initialize(0);
240014c4:	4628      	mov	r0, r5
		loadFailed = 0;
240014c6:	701d      	strb	r5, [r3, #0]
		diskBusy = 1;
240014c8:	7034      	strb	r4, [r6, #0]
		disk_initialize(0);
240014ca:	f009 f999 	bl	2400a800 <disk_initialize>
	    disk_status(0);
240014ce:	4628      	mov	r0, r5
240014d0:	f009 f98c 	bl	2400a7ec <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
240014d4:	4622      	mov	r2, r4
240014d6:	4996      	ldr	r1, [pc, #600]	; (24001730 <getPresetNamesFromSDCard+0x290>)
240014d8:	4896      	ldr	r0, [pc, #600]	; (24001734 <getPresetNamesFromSDCard+0x294>)
240014da:	f00b fba1 	bl	2400cc20 <f_mount>
240014de:	2800      	cmp	r0, #0
240014e0:	d1e8      	bne.n	240014b4 <getPresetNamesFromSDCard+0x14>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
240014e2:	4604      	mov	r4, r0
240014e4:	4d94      	ldr	r5, [pc, #592]	; (24001738 <getPresetNamesFromSDCard+0x298>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240014e6:	f8df 9248 	ldr.w	r9, [pc, #584]	; 24001730 <getPresetNamesFromSDCard+0x290>
240014ea:	f8df 8264 	ldr.w	r8, [pc, #612]	; 24001750 <getPresetNamesFromSDCard+0x2b0>
240014ee:	4f93      	ldr	r7, [pc, #588]	; (2400173c <getPresetNamesFromSDCard+0x29c>)
240014f0:	e014      	b.n	2400151c <getPresetNamesFromSDCard+0x7c>
					strcat(charBuf, ".ebp");
240014f2:	6828      	ldr	r0, [r5, #0]
240014f4:	f10d 0e08 	add.w	lr, sp, #8
240014f8:	f84e 0003 	str.w	r0, [lr, r3]
					strcpy(finalString, charBuf);
240014fc:	a805      	add	r0, sp, #20
					strcat(charBuf, ".ebp");
240014fe:	792b      	ldrb	r3, [r5, #4]
24001500:	f88c 3004 	strb.w	r3, [ip, #4]
					strcpy(finalString, charBuf);
24001504:	f011 fb10 	bl	24012b28 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24001508:	ab05      	add	r3, sp, #20
2400150a:	464a      	mov	r2, r9
2400150c:	4641      	mov	r1, r8
2400150e:	4638      	mov	r0, r7
24001510:	f00c f8b4 	bl	2400d67c <f_findfirst>
				if(res == FR_OK)
24001514:	b378      	cbz	r0, 24001576 <getPresetNamesFromSDCard+0xd6>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
24001516:	3401      	adds	r4, #1
24001518:	2c14      	cmp	r4, #20
2400151a:	d074      	beq.n	24001606 <getPresetNamesFromSDCard+0x166>
				itoa(i, charBuf, 10);
2400151c:	220a      	movs	r2, #10
2400151e:	a902      	add	r1, sp, #8
24001520:	4620      	mov	r0, r4
24001522:	f011 faff 	bl	24012b24 <itoa>
				int len = ((strlen(charBuf)));
24001526:	a802      	add	r0, sp, #8
24001528:	f7fe fed6 	bl	240002d8 <strlen>
					strcpy(finalString, charBuf);
2400152c:	a902      	add	r1, sp, #8
				if (len == 1)
2400152e:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
24001530:	4603      	mov	r3, r0
					strcat(charBuf, ".ebp");
24001532:	eb01 0c00 	add.w	ip, r1, r0
					strcpy(finalString, charBuf);
24001536:	f100 0205 	add.w	r2, r0, #5
				if (len == 1)
2400153a:	d1da      	bne.n	240014f2 <getPresetNamesFromSDCard+0x52>
					finalString[2] = charBuf[1];
2400153c:	f89d 3009 	ldrb.w	r3, [sp, #9]
					strcat(finalString, ".ebp");
24001540:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
24001542:	f88d 3016 	strb.w	r3, [sp, #22]
					finalString[1] = charBuf[0];
24001546:	f89d 3008 	ldrb.w	r3, [sp, #8]
2400154a:	f88d 3015 	strb.w	r3, [sp, #21]
					finalString[0] = '0';
2400154e:	2330      	movs	r3, #48	; 0x30
24001550:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
24001554:	f7fe fec0 	bl	240002d8 <strlen>
24001558:	aa05      	add	r2, sp, #20
2400155a:	4603      	mov	r3, r0
2400155c:	6828      	ldr	r0, [r5, #0]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400155e:	4641      	mov	r1, r8
					strcat(finalString, ".ebp");
24001560:	50d0      	str	r0, [r2, r3]
24001562:	4413      	add	r3, r2
24001564:	792a      	ldrb	r2, [r5, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24001566:	4638      	mov	r0, r7
					strcat(finalString, ".ebp");
24001568:	711a      	strb	r2, [r3, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400156a:	ab05      	add	r3, sp, #20
2400156c:	464a      	mov	r2, r9
2400156e:	f00c f885 	bl	2400d67c <f_findfirst>
				if(res == FR_OK)
24001572:	2800      	cmp	r0, #0
24001574:	d1cf      	bne.n	24001516 <getPresetNamesFromSDCard+0x76>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24001576:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 24001754 <getPresetNamesFromSDCard+0x2b4>
2400157a:	2211      	movs	r2, #17
2400157c:	4970      	ldr	r1, [pc, #448]	; (24001740 <getPresetNamesFromSDCard+0x2a0>)
2400157e:	4650      	mov	r0, sl
24001580:	f00b fb9a 	bl	2400ccb8 <f_open>
24001584:	2800      	cmp	r0, #0
24001586:	d1c6      	bne.n	24001516 <getPresetNamesFromSDCard+0x76>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24001588:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 24001758 <getPresetNamesFromSDCard+0x2b8>
2400158c:	ab01      	add	r3, sp, #4
2400158e:	f8da 200c 	ldr.w	r2, [sl, #12]
24001592:	4650      	mov	r0, sl
24001594:	4659      	mov	r1, fp
24001596:	f00b fd0b 	bl	2400cfb0 <f_read>
						f_close(&SDFile);
2400159a:	4650      	mov	r0, sl
2400159c:	f00b ff64 	bl	2400d468 <f_close>
							presetNamesArray[i][j] = buffer[j];
240015a0:	4a68      	ldr	r2, [pc, #416]	; (24001744 <getPresetNamesFromSDCard+0x2a4>)
240015a2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
240015a6:	f89b 1000 	ldrb.w	r1, [fp]
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
240015aa:	3401      	adds	r4, #1
							presetNamesArray[i][j] = buffer[j];
240015ac:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
240015b0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
240015b4:	f89b 2001 	ldrb.w	r2, [fp, #1]
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
240015b8:	2c14      	cmp	r4, #20
							presetNamesArray[i][j] = buffer[j];
240015ba:	705a      	strb	r2, [r3, #1]
240015bc:	f89b 2002 	ldrb.w	r2, [fp, #2]
240015c0:	709a      	strb	r2, [r3, #2]
240015c2:	f89b 2003 	ldrb.w	r2, [fp, #3]
240015c6:	70da      	strb	r2, [r3, #3]
240015c8:	f89b 2004 	ldrb.w	r2, [fp, #4]
240015cc:	711a      	strb	r2, [r3, #4]
240015ce:	f89b 2005 	ldrb.w	r2, [fp, #5]
240015d2:	715a      	strb	r2, [r3, #5]
240015d4:	f89b 2006 	ldrb.w	r2, [fp, #6]
240015d8:	719a      	strb	r2, [r3, #6]
240015da:	f89b 2007 	ldrb.w	r2, [fp, #7]
240015de:	71da      	strb	r2, [r3, #7]
240015e0:	f89b 2008 	ldrb.w	r2, [fp, #8]
240015e4:	721a      	strb	r2, [r3, #8]
240015e6:	f89b 2009 	ldrb.w	r2, [fp, #9]
240015ea:	725a      	strb	r2, [r3, #9]
240015ec:	f89b 200a 	ldrb.w	r2, [fp, #10]
240015f0:	729a      	strb	r2, [r3, #10]
240015f2:	f89b 200b 	ldrb.w	r2, [fp, #11]
240015f6:	72da      	strb	r2, [r3, #11]
240015f8:	f89b 200c 	ldrb.w	r2, [fp, #12]
240015fc:	731a      	strb	r2, [r3, #12]
240015fe:	f89b 200d 	ldrb.w	r2, [fp, #13]
24001602:	735a      	strb	r2, [r3, #13]
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
24001604:	d18a      	bne.n	2400151c <getPresetNamesFromSDCard+0x7c>
			for(int i = 0; i < MAX_NUM_TUNINGS; i++)
24001606:	2400      	movs	r4, #0
24001608:	4d4f      	ldr	r5, [pc, #316]	; (24001748 <getPresetNamesFromSDCard+0x2a8>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400160a:	f8df 9124 	ldr.w	r9, [pc, #292]	; 24001730 <getPresetNamesFromSDCard+0x290>
2400160e:	f8df 8140 	ldr.w	r8, [pc, #320]	; 24001750 <getPresetNamesFromSDCard+0x2b0>
24001612:	4f4a      	ldr	r7, [pc, #296]	; (2400173c <getPresetNamesFromSDCard+0x29c>)
24001614:	e015      	b.n	24001642 <getPresetNamesFromSDCard+0x1a2>
					strcat(charBuf, ".ebt");
24001616:	6828      	ldr	r0, [r5, #0]
24001618:	f10d 0e08 	add.w	lr, sp, #8
2400161c:	f84e 0003 	str.w	r0, [lr, r3]
					strcpy(finalString, charBuf);
24001620:	a805      	add	r0, sp, #20
					strcat(charBuf, ".ebt");
24001622:	792b      	ldrb	r3, [r5, #4]
24001624:	f88c 3004 	strb.w	r3, [ip, #4]
					strcpy(finalString, charBuf);
24001628:	f011 fa7e 	bl	24012b28 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400162c:	ab05      	add	r3, sp, #20
2400162e:	464a      	mov	r2, r9
24001630:	4641      	mov	r1, r8
24001632:	4638      	mov	r0, r7
24001634:	f00c f822 	bl	2400d67c <f_findfirst>
				if(res == FR_OK)
24001638:	b380      	cbz	r0, 2400169c <getPresetNamesFromSDCard+0x1fc>
			for(int i = 0; i < MAX_NUM_TUNINGS; i++)
2400163a:	3401      	adds	r4, #1
2400163c:	2c14      	cmp	r4, #20
2400163e:	f43f af39 	beq.w	240014b4 <getPresetNamesFromSDCard+0x14>
				itoa(i, charBuf, 10);
24001642:	220a      	movs	r2, #10
24001644:	a902      	add	r1, sp, #8
24001646:	4620      	mov	r0, r4
24001648:	f011 fa6c 	bl	24012b24 <itoa>
				int len = ((strlen(charBuf)));
2400164c:	a802      	add	r0, sp, #8
2400164e:	f7fe fe43 	bl	240002d8 <strlen>
					strcpy(finalString, charBuf);
24001652:	a902      	add	r1, sp, #8
				if (len == 1)
24001654:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
24001656:	4603      	mov	r3, r0
					strcat(charBuf, ".ebt");
24001658:	eb01 0c00 	add.w	ip, r1, r0
					strcpy(finalString, charBuf);
2400165c:	f100 0205 	add.w	r2, r0, #5
				if (len == 1)
24001660:	d1d9      	bne.n	24001616 <getPresetNamesFromSDCard+0x176>
					finalString[2] = charBuf[1];
24001662:	f89d 3009 	ldrb.w	r3, [sp, #9]
					strcat(finalString, ".ebt");
24001666:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
24001668:	f88d 3016 	strb.w	r3, [sp, #22]
					finalString[1] = charBuf[0];
2400166c:	f89d 3008 	ldrb.w	r3, [sp, #8]
24001670:	f88d 3015 	strb.w	r3, [sp, #21]
					finalString[0] = '0';
24001674:	2330      	movs	r3, #48	; 0x30
24001676:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebt");
2400167a:	f7fe fe2d 	bl	240002d8 <strlen>
2400167e:	aa05      	add	r2, sp, #20
24001680:	4603      	mov	r3, r0
24001682:	6828      	ldr	r0, [r5, #0]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24001684:	4641      	mov	r1, r8
					strcat(finalString, ".ebt");
24001686:	50d0      	str	r0, [r2, r3]
24001688:	4413      	add	r3, r2
2400168a:	792a      	ldrb	r2, [r5, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400168c:	4638      	mov	r0, r7
					strcat(finalString, ".ebt");
2400168e:	711a      	strb	r2, [r3, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24001690:	ab05      	add	r3, sp, #20
24001692:	464a      	mov	r2, r9
24001694:	f00b fff2 	bl	2400d67c <f_findfirst>
				if(res == FR_OK)
24001698:	2800      	cmp	r0, #0
2400169a:	d1ce      	bne.n	2400163a <getPresetNamesFromSDCard+0x19a>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
2400169c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 24001754 <getPresetNamesFromSDCard+0x2b4>
240016a0:	2211      	movs	r2, #17
240016a2:	4927      	ldr	r1, [pc, #156]	; (24001740 <getPresetNamesFromSDCard+0x2a0>)
240016a4:	4650      	mov	r0, sl
240016a6:	f00b fb07 	bl	2400ccb8 <f_open>
240016aa:	2800      	cmp	r0, #0
240016ac:	d1c5      	bne.n	2400163a <getPresetNamesFromSDCard+0x19a>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
240016ae:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 24001758 <getPresetNamesFromSDCard+0x2b8>
240016b2:	ab01      	add	r3, sp, #4
240016b4:	f8da 200c 	ldr.w	r2, [sl, #12]
240016b8:	4650      	mov	r0, sl
240016ba:	4659      	mov	r1, fp
240016bc:	f00b fc78 	bl	2400cfb0 <f_read>
						f_close(&SDFile);
240016c0:	4650      	mov	r0, sl
240016c2:	f00b fed1 	bl	2400d468 <f_close>
							tuningNamesArray[i][j] = buffer[j];
240016c6:	4a21      	ldr	r2, [pc, #132]	; (2400174c <getPresetNamesFromSDCard+0x2ac>)
240016c8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
240016cc:	f89b 1000 	ldrb.w	r1, [fp]
240016d0:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
240016d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
240016d8:	f89b 2001 	ldrb.w	r2, [fp, #1]
240016dc:	705a      	strb	r2, [r3, #1]
240016de:	f89b 2002 	ldrb.w	r2, [fp, #2]
240016e2:	709a      	strb	r2, [r3, #2]
240016e4:	f89b 2003 	ldrb.w	r2, [fp, #3]
240016e8:	70da      	strb	r2, [r3, #3]
240016ea:	f89b 2004 	ldrb.w	r2, [fp, #4]
240016ee:	711a      	strb	r2, [r3, #4]
240016f0:	f89b 2005 	ldrb.w	r2, [fp, #5]
240016f4:	715a      	strb	r2, [r3, #5]
240016f6:	f89b 2006 	ldrb.w	r2, [fp, #6]
240016fa:	719a      	strb	r2, [r3, #6]
240016fc:	f89b 2007 	ldrb.w	r2, [fp, #7]
24001700:	71da      	strb	r2, [r3, #7]
24001702:	f89b 2008 	ldrb.w	r2, [fp, #8]
24001706:	721a      	strb	r2, [r3, #8]
24001708:	f89b 2009 	ldrb.w	r2, [fp, #9]
2400170c:	725a      	strb	r2, [r3, #9]
2400170e:	f89b 200a 	ldrb.w	r2, [fp, #10]
24001712:	729a      	strb	r2, [r3, #10]
24001714:	f89b 200b 	ldrb.w	r2, [fp, #11]
24001718:	72da      	strb	r2, [r3, #11]
2400171a:	f89b 200c 	ldrb.w	r2, [fp, #12]
2400171e:	731a      	strb	r2, [r3, #12]
24001720:	f89b 200d 	ldrb.w	r2, [fp, #13]
24001724:	735a      	strb	r2, [r3, #13]
						for (int j = 0; j < 14; j++)
24001726:	e788      	b.n	2400163a <getPresetNamesFromSDCard+0x19a>
24001728:	2000a27c 	.word	0x2000a27c
2400172c:	2000e42c 	.word	0x2000e42c
24001730:	20012240 	.word	0x20012240
24001734:	20011de0 	.word	0x20011de0
24001738:	240140f8 	.word	0x240140f8
2400173c:	2000a244 	.word	0x2000a244
24001740:	2000c2f6 	.word	0x2000c2f6
24001744:	2000f6ec 	.word	0x2000f6ec
24001748:	24014100 	.word	0x24014100
2400174c:	20011824 	.word	0x20011824
24001750:	2000c2e0 	.word	0x2000c2e0
24001754:	20012014 	.word	0x20012014
24001758:	20009240 	.word	0x20009240

2400175c <BSP_SD_IsDetected>:
{
2400175c:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
2400175e:	2301      	movs	r3, #1
24001760:	f88d 3007 	strb.w	r3, [sp, #7]
  return status;
24001764:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
24001768:	b002      	add	sp, #8
2400176a:	4770      	bx	lr

2400176c <MPU_Conf>:
{
2400176c:	b570      	push	{r4, r5, r6, lr}
2400176e:	b084      	sub	sp, #16
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24001770:	2401      	movs	r4, #1
	  HAL_MPU_Disable();
24001772:	f001 f95b 	bl	24002a2c <HAL_MPU_Disable>
	  MPU_InitStruct.BaseAddress = 0x30000000;
24001776:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
2400177a:	4a27      	ldr	r2, [pc, #156]	; (24001818 <MPU_Conf+0xac>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400177c:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
2400177e:	4b27      	ldr	r3, [pc, #156]	; (2400181c <MPU_Conf+0xb0>)
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24001780:	f240 1601 	movw	r6, #257	; 0x101
	  MPU_InitStruct.BaseAddress = 0x30000000;
24001784:	9101      	str	r1, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24001786:	9202      	str	r2, [sp, #8]
24001788:	9303      	str	r3, [sp, #12]
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
2400178a:	f8ad 4000 	strh.w	r4, [sp]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400178e:	f001 f96b 	bl	24002a68 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.BaseAddress = 0x38000000;
24001792:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
24001796:	4d22      	ldr	r5, [pc, #136]	; (24001820 <MPU_Conf+0xb4>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24001798:	4668      	mov	r0, sp
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
2400179a:	f8ad 6000 	strh.w	r6, [sp]
	  MPU_InitStruct.BaseAddress = 0x38000000;
2400179e:	9301      	str	r3, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
240017a0:	4b20      	ldr	r3, [pc, #128]	; (24001824 <MPU_Conf+0xb8>)
240017a2:	e9cd 3502 	strd	r3, r5, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240017a6:	f001 f95f 	bl	24002a68 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.BaseAddress = 0x38800000;
240017aa:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240017ae:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
240017b0:	9603      	str	r6, [sp, #12]
	  MPU_InitStruct.BaseAddress = 0x38800000;
240017b2:	9301      	str	r3, [sp, #4]
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
240017b4:	f240 2301 	movw	r3, #513	; 0x201
240017b8:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
240017bc:	4b1a      	ldr	r3, [pc, #104]	; (24001828 <MPU_Conf+0xbc>)
240017be:	9302      	str	r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240017c0:	f001 f952 	bl	24002a68 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
240017c4:	f240 3301 	movw	r3, #769	; 0x301
	  MPU_InitStruct.BaseAddress = 0x24000000;
240017c8:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240017cc:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
240017ce:	9503      	str	r5, [sp, #12]
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
240017d0:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
240017d4:	4b15      	ldr	r3, [pc, #84]	; (2400182c <MPU_Conf+0xc0>)
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
240017d6:	4d16      	ldr	r5, [pc, #88]	; (24001830 <MPU_Conf+0xc4>)
	  MPU_InitStruct.BaseAddress = 0x24000000;
240017d8:	9201      	str	r2, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
240017da:	9302      	str	r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240017dc:	f001 f944 	bl	24002a68 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.BaseAddress = 0xc0000000;
240017e0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
240017e4:	f240 4301 	movw	r3, #1025	; 0x401
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240017e8:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
240017ea:	9403      	str	r4, [sp, #12]
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
240017ec:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.BaseAddress = 0xc0000000;
240017f0:	e9cd 2501 	strd	r2, r5, [sp, #4]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240017f4:	f001 f938 	bl	24002a68 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.BaseAddress = 0x90040000;
240017f8:	4a0e      	ldr	r2, [pc, #56]	; (24001834 <MPU_Conf+0xc8>)
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
240017fa:	f240 5301 	movw	r3, #1281	; 0x501
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240017fe:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
24001800:	9403      	str	r4, [sp, #12]
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24001802:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
24001806:	e9cd 2501 	strd	r2, r5, [sp, #4]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400180a:	f001 f92d 	bl	24002a68 <HAL_MPU_ConfigRegion>
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
2400180e:	2004      	movs	r0, #4
24001810:	f001 f91a 	bl	24002a48 <HAL_MPU_Enable>
}
24001814:	b004      	add	sp, #16
24001816:	bd70      	pop	{r4, r5, r6, pc}
24001818:	03000011 	.word	0x03000011
2400181c:	01000101 	.word	0x01000101
24001820:	01010000 	.word	0x01010000
24001824:	0301000f 	.word	0x0301000f
24001828:	0300000b 	.word	0x0300000b
2400182c:	03010012 	.word	0x03010012
24001830:	03000019 	.word	0x03000019
24001834:	90040000 	.word	0x90040000

24001838 <main>:
{
24001838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400183c:	ed2d 8b04 	vpush	{d8-d9}
24001840:	b08d      	sub	sp, #52	; 0x34
  MPU_Conf();
24001842:	f7ff ff93 	bl	2400176c <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
24001846:	4ac2      	ldr	r2, [pc, #776]	; (24001b50 <main+0x318>)
24001848:	6953      	ldr	r3, [r2, #20]
2400184a:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
2400184e:	d111      	bne.n	24001874 <main+0x3c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
24001850:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24001854:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
24001858:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
2400185c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24001860:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
24001864:	6953      	ldr	r3, [r2, #20]
24001866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400186a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
2400186c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24001870:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
24001874:	48b6      	ldr	r0, [pc, #728]	; (24001b50 <main+0x318>)
24001876:	6943      	ldr	r3, [r0, #20]
24001878:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
2400187c:	d124      	bne.n	240018c8 <main+0x90>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
2400187e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
24001882:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
24001886:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
2400188a:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
2400188e:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24001892:	f3c5 05c9 	ubfx	r5, r5, #3, #10
24001896:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24001898:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
2400189c:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
2400189e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
240018a2:	3b01      	subs	r3, #1
240018a4:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
240018a6:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
240018aa:	d1f8      	bne.n	2400189e <main+0x66>
    } while(sets-- != 0U);
240018ac:	3c20      	subs	r4, #32
240018ae:	f114 0f20 	cmn.w	r4, #32
240018b2:	d1f1      	bne.n	24001898 <main+0x60>
240018b4:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
240018b8:	6943      	ldr	r3, [r0, #20]
240018ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240018be:	6143      	str	r3, [r0, #20]
240018c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240018c4:	f3bf 8f6f 	isb	sy
  HAL_Init();
240018c8:	f000 ffd0 	bl	2400286c <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
240018cc:	b662      	cpsie	i
  SystemClock_Config();
240018ce:	f7ff fcf7 	bl	240012c0 <SystemClock_Config>
  PeriphCommonClock_Config();
240018d2:	f7ff fd95 	bl	24001400 <PeriphCommonClock_Config>
  MX_GPIO_Init();
240018d6:	f7ff fa2b 	bl	24000d30 <MX_GPIO_Init>
  MX_DMA_Init();
240018da:	f7ff f93b 	bl	24000b54 <MX_DMA_Init>
  MX_DAC1_Init();
240018de:	f7ff f8bf 	bl	24000a60 <MX_DAC1_Init>
  MX_FMC_Init();
240018e2:	f7ff f975 	bl	24000bd0 <MX_FMC_Init>
  MX_I2C2_Init();
240018e6:	f7ff fb7b 	bl	24000fe0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
240018ea:	f000 fb3f 	bl	24001f6c <MX_QUADSPI_Init>
  MX_SAI1_Init();
240018ee:	f000 fc11 	bl	24002114 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
240018f2:	f000 fd27 	bl	24002344 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
240018f6:	f000 fd9b 	bl	24002430 <MX_SPI1_Init>
  MX_I2C1_Init();
240018fa:	f7ff fb3b 	bl	24000f74 <MX_I2C1_Init>
  MX_RNG_Init();
240018fe:	f000 fbc9 	bl	24002094 <MX_RNG_Init>
  MX_FATFS_Init();
24001902:	f008 fe87 	bl	2400a614 <MX_FATFS_Init>
   PWR->CR1 |= PWR_CR1_DBP;
24001906:	4a93      	ldr	r2, [pc, #588]	; (24001b54 <main+0x31c>)
24001908:	6813      	ldr	r3, [r2, #0]
2400190a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400190e:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
24001910:	6813      	ldr	r3, [r2, #0]
24001912:	05d9      	lsls	r1, r3, #23
24001914:	d5fc      	bpl.n	24001910 <main+0xd8>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24001916:	4b90      	ldr	r3, [pc, #576]	; (24001b58 <main+0x320>)
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24001918:	2200      	movs	r2, #0
2400191a:	2180      	movs	r1, #128	; 0x80
2400191c:	488f      	ldr	r0, [pc, #572]	; (24001b5c <main+0x324>)
   __HAL_RCC_BKPRAM_CLK_ENABLE();
2400191e:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
24001922:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
24001926:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
2400192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24001932:	9304      	str	r3, [sp, #16]
24001934:	9b04      	ldr	r3, [sp, #16]
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24001936:	f002 fdaf 	bl	24004498 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
2400193a:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register
2400193e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
24001942:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24001946:	4a82      	ldr	r2, [pc, #520]	; (24001b50 <main+0x318>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
24001948:	4985      	ldr	r1, [pc, #532]	; (24001b60 <main+0x328>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
2400194a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
2400194e:	f8d1 0fb4 	ldr.w	r0, [r1, #4020]	; 0xfb4
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24001952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24001956:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
2400195a:	07c3      	lsls	r3, r0, #31
2400195c:	d502      	bpl.n	24001964 <main+0x12c>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
2400195e:	4b81      	ldr	r3, [pc, #516]	; (24001b64 <main+0x32c>)
24001960:	f8c1 3fb0 	str.w	r3, [r1, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
24001964:	4b7e      	ldr	r3, [pc, #504]	; (24001b60 <main+0x328>)
24001966:	2400      	movs	r4, #0
  DWT->CTRL = 0x40000001;
24001968:	4a7f      	ldr	r2, [pc, #508]	; (24001b68 <main+0x330>)
  DWT->CYCCNT = 0;
2400196a:	605c      	str	r4, [r3, #4]
  cStack_init(&midiStack);
2400196c:	487f      	ldr	r0, [pc, #508]	; (24001b6c <main+0x334>)
  DWT->CTRL = 0x40000001;
2400196e:	601a      	str	r2, [r3, #0]
  cStack_init(&midiStack);
24001970:	f027 f972 	bl	24028c58 <__cStack_init_veneer>
  for (int i = 0; i < 128; i++){
24001974:	4a7e      	ldr	r2, [pc, #504]	; (24001b70 <main+0x338>)
24001976:	4623      	mov	r3, r4
	  fractionalMidi[i] = i;
24001978:	ee07 3a90 	vmov	s15, r3
  for (int i = 0; i < 128; i++){
2400197c:	3301      	adds	r3, #1
	  fractionalMidi[i] = i;
2400197e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i = 0; i < 128; i++){
24001982:	2b80      	cmp	r3, #128	; 0x80
	  fractionalMidi[i] = i;
24001984:	ece2 7a01 	vstmia	r2!, {s15}
  for (int i = 0; i < 128; i++){
24001988:	d1f6      	bne.n	24001978 <main+0x140>
	  buffer[i] = 0;
2400198a:	4b7a      	ldr	r3, [pc, #488]	; (24001b74 <main+0x33c>)
2400198c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001990:	2100      	movs	r1, #0
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
24001992:	4d79      	ldr	r5, [pc, #484]	; (24001b78 <main+0x340>)
	  buffer[i] = 0;
24001994:	4618      	mov	r0, r3
  if (foundOne == 0)
24001996:	2400      	movs	r4, #0
	  buffer[i] = 0;
24001998:	f011 f8d4 	bl	24012b44 <memset>
  buffer[15+112] = NUM_PARAMS;
2400199c:	219b      	movs	r1, #155	; 0x9b
	  buffer[i] = 0;
2400199e:	4603      	mov	r3, r0
  buffer[NUM_PARAMS*2+16+112] = 0xef;
240019a0:	f64e 70ef 	movw	r0, #61423	; 0xefef
  tuningNamesArray[0][0] = 'E';
240019a4:	4a75      	ldr	r2, [pc, #468]	; (24001b7c <main+0x344>)
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
240019a6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15+112] = NUM_PARAMS;
240019aa:	f883 107f 	strb.w	r1, [r3, #127]	; 0x7f
  buffer[NUM_PARAMS*2+19+112] = 1;
240019ae:	2101      	movs	r1, #1
  buffer[NUM_PARAMS*2+16+112] = 0xef;
240019b0:	f8a3 01b6 	strh.w	r0, [r3, #438]	; 0x1b6
  tuningNamesArray[0][0] = 'E';
240019b4:	2045      	movs	r0, #69	; 0x45
  buffer[NUM_PARAMS*2+19+112] = 1;
240019b6:	f883 11b9 	strb.w	r1, [r3, #441]	; 0x1b9
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
240019ba:	f64f 61fe 	movw	r1, #65278	; 0xfefe
  tuningNamesArray[0][0] = 'E';
240019be:	7010      	strb	r0, [r2, #0]
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
240019c0:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
240019c4:	f8a3 11bf 	strh.w	r1, [r3, #447]	; 0x1bf
  tuningNamesArray[0][1] = 'T';
240019c8:	2354      	movs	r3, #84	; 0x54
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
240019ca:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 24001b80 <main+0x348>
240019ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
  tuningNamesArray[0][1] = 'T';
240019d2:	7053      	strb	r3, [r2, #1]
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
240019d4:	486b      	ldr	r0, [pc, #428]	; (24001b84 <main+0x34c>)
240019d6:	f00d fa83 	bl	2400eee0 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
240019da:	f44f 6100 	mov.w	r1, #2048	; 0x800
240019de:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 24001b88 <main+0x350>
240019e2:	eddf 0a6a 	vldr	s1, [pc, #424]	; 24001b8c <main+0x354>
240019e6:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 24001b90 <main+0x358>
240019ea:	486a      	ldr	r0, [pc, #424]	; (24001b94 <main+0x35c>)
240019ec:	f00d fa78 	bl	2400eee0 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
240019f0:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
240019f4:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
240019f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
240019fc:	ed9f 0a64 	vldr	s0, [pc, #400]	; 24001b90 <main+0x358>
24001a00:	4865      	ldr	r0, [pc, #404]	; (24001b98 <main+0x360>)
24001a02:	f00d fa6d 	bl	2400eee0 <LEAF_generate_table_skew_non_sym>
  HAL_Delay(10);
24001a06:	200a      	movs	r0, #10
24001a08:	f000 ff72 	bl	240028f0 <HAL_Delay>
  getPresetNamesFromSDCard();
24001a0c:	f7ff fd48 	bl	240014a0 <getPresetNamesFromSDCard>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
24001a10:	4b62      	ldr	r3, [pc, #392]	; (24001b9c <main+0x364>)
24001a12:	7818      	ldrb	r0, [r3, #0]
24001a14:	f7ff fbc0 	bl	24001198 <checkForSDCardPreset>
24001a18:	4603      	mov	r3, r0
  codec_init(&hi2c2);
24001a1a:	4861      	ldr	r0, [pc, #388]	; (24001ba0 <main+0x368>)
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
24001a1c:	b2db      	uxtb	r3, r3
24001a1e:	702b      	strb	r3, [r5, #0]
  codec_init(&hi2c2);
24001a20:	f7fe ff74 	bl	2400090c <codec_init>
  audio_init();
24001a24:	f7fe fc60 	bl	240002e8 <audio_init>
  if (foundOne == 0)
24001a28:	782b      	ldrb	r3, [r5, #0]
  for (int i = 0; i < SPI_BUFFER_SIZE; i++)
24001a2a:	4b5e      	ldr	r3, [pc, #376]	; (24001ba4 <main+0x36c>)
	  SPI_TX[i] = counter++;
24001a2c:	f803 4f01 	strb.w	r4, [r3, #1]!
  for (int i = 0; i < SPI_BUFFER_SIZE; i++)
24001a30:	3401      	adds	r4, #1
24001a32:	2c20      	cmp	r4, #32
24001a34:	d1fa      	bne.n	24001a2c <main+0x1f4>
  HAL_Delay(10);
24001a36:	200a      	movs	r0, #10
	  if (rand > TWO_TO_31)
24001a38:	eddf 9a5b 	vldr	s19, [pc, #364]	; 24001ba8 <main+0x370>
  HAL_Delay(10);
24001a3c:	f000 ff58 	bl	240028f0 <HAL_Delay>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_TX, SPI_RX, SPI_BUFFER_SIZE);
24001a40:	4a5a      	ldr	r2, [pc, #360]	; (24001bac <main+0x374>)
24001a42:	4623      	mov	r3, r4
24001a44:	485a      	ldr	r0, [pc, #360]	; (24001bb0 <main+0x378>)
24001a46:	f1a2 0120 	sub.w	r1, r2, #32
24001a4a:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 24001bec <main+0x3b4>
24001a4e:	f007 f897 	bl	24008b80 <HAL_SPI_TransmitReceive_DMA>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
24001a52:	2201      	movs	r2, #1
24001a54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24001a58:	4856      	ldr	r0, [pc, #344]	; (24001bb4 <main+0x37c>)
24001a5a:	f002 fd1d 	bl	24004498 <HAL_GPIO_WritePin>
  audio_start(&hsai_BlockB1, &hsai_BlockA1);
24001a5e:	4956      	ldr	r1, [pc, #344]	; (24001bb8 <main+0x380>)
24001a60:	4856      	ldr	r0, [pc, #344]	; (24001bbc <main+0x384>)
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24001a62:	ed9f 9a57 	vldr	s18, [pc, #348]	; 24001bc0 <main+0x388>
  audio_start(&hsai_BlockB1, &hsai_BlockA1);
24001a66:	f7fe fc7b 	bl	24000360 <audio_start>
24001a6a:	f8df a184 	ldr.w	sl, [pc, #388]	; 24001bf0 <main+0x3b8>
24001a6e:	4d55      	ldr	r5, [pc, #340]	; (24001bc4 <main+0x38c>)
24001a70:	4f55      	ldr	r7, [pc, #340]	; (24001bc8 <main+0x390>)
24001a72:	4e56      	ldr	r6, [pc, #344]	; (24001bcc <main+0x394>)
24001a74:	f8df 817c 	ldr.w	r8, [pc, #380]	; 24001bf4 <main+0x3bc>
24001a78:	f8df 917c 	ldr.w	r9, [pc, #380]	; 24001bf8 <main+0x3c0>
24001a7c:	4c54      	ldr	r4, [pc, #336]	; (24001bd0 <main+0x398>)
		 audioOutBuffer[i] = 0;
24001a7e:	ed9f 8b32 	vldr	d8, [pc, #200]	; 24001b48 <main+0x310>
24001a82:	e032      	b.n	24001aea <main+0x2b2>
	  if (presetWaitingToParse > 0)
24001a84:	f8da 0000 	ldr.w	r0, [sl]
24001a88:	2800      	cmp	r0, #0
24001a8a:	d13a      	bne.n	24001b02 <main+0x2ca>
	  else if (presetWaitingToWrite > 0)
24001a8c:	4b51      	ldr	r3, [pc, #324]	; (24001bd4 <main+0x39c>)
24001a8e:	681b      	ldr	r3, [r3, #0]
24001a90:	2b00      	cmp	r3, #0
24001a92:	f040 80f4 	bne.w	24001c7e <main+0x446>
	  if (tuningWaitingToLoad > 0)
24001a96:	6833      	ldr	r3, [r6, #0]
24001a98:	2b00      	cmp	r3, #0
24001a9a:	d139      	bne.n	24001b10 <main+0x2d8>
	  if(tuningWaitingToParse > 0)
24001a9c:	f8d8 0000 	ldr.w	r0, [r8]
24001aa0:	2800      	cmp	r0, #0
24001aa2:	d149      	bne.n	24001b38 <main+0x300>
	  else if  (tuningWaitingToWrite)
24001aa4:	4b4c      	ldr	r3, [pc, #304]	; (24001bd8 <main+0x3a0>)
24001aa6:	681b      	ldr	r3, [r3, #0]
24001aa8:	2b00      	cmp	r3, #0
24001aaa:	f040 80a7 	bne.w	24001bfc <main+0x3c4>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
24001aae:	a909      	add	r1, sp, #36	; 0x24
24001ab0:	484a      	ldr	r0, [pc, #296]	; (24001bdc <main+0x3a4>)
24001ab2:	f005 f945 	bl	24006d40 <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
24001ab6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
24001aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001abe:	eef4 7ae9 	vcmpe.f32	s15, s19
24001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24001ac6:	dd04      	ble.n	24001ad2 <main+0x29a>
		  myTestInt++;
24001ac8:	f8d9 3000 	ldr.w	r3, [r9]
24001acc:	3301      	adds	r3, #1
24001ace:	f8c9 3000 	str.w	r3, [r9]
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
24001ad2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24001ad6:	7823      	ldrb	r3, [r4, #0]
24001ad8:	1c5a      	adds	r2, r3, #1
24001ada:	eea7 7a89 	vfma.f32	s14, s15, s18
24001ade:	7022      	strb	r2, [r4, #0]
24001ae0:	4a3f      	ldr	r2, [pc, #252]	; (24001be0 <main+0x3a8>)
24001ae2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24001ae6:	ed83 7a00 	vstr	s14, [r3]
	  if (presetWaitingToLoad > 0)
24001aea:	f8db 3000 	ldr.w	r3, [fp]
24001aee:	2b00      	cmp	r3, #0
24001af0:	d0c8      	beq.n	24001a84 <main+0x24c>
		  checkForSDCardPreset(presetNumberToLoad);
24001af2:	4b2a      	ldr	r3, [pc, #168]	; (24001b9c <main+0x364>)
24001af4:	7818      	ldrb	r0, [r3, #0]
24001af6:	f7ff fb4f 	bl	24001198 <checkForSDCardPreset>
	  if (presetWaitingToParse > 0)
24001afa:	f8da 0000 	ldr.w	r0, [sl]
24001afe:	2800      	cmp	r0, #0
24001b00:	d0c4      	beq.n	24001a8c <main+0x254>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
24001b02:	4b26      	ldr	r3, [pc, #152]	; (24001b9c <main+0x364>)
24001b04:	7819      	ldrb	r1, [r3, #0]
24001b06:	f027 f8b3 	bl	24028c70 <__parsePreset_veneer>
	  if (tuningWaitingToLoad > 0)
24001b0a:	6833      	ldr	r3, [r6, #0]
24001b0c:	2b00      	cmp	r3, #0
24001b0e:	d0c5      	beq.n	24001a9c <main+0x264>
  __IO uint8_t status = SD_PRESENT;
24001b10:	2201      	movs	r2, #1
		  checkForSDCardTuning(tuningNumberToLoad);
24001b12:	4b34      	ldr	r3, [pc, #208]	; (24001be4 <main+0x3ac>)
  __IO uint8_t status = SD_PRESENT;
24001b14:	f88d 200e 	strb.w	r2, [sp, #14]
  return status;
24001b18:	f89d 100e 	ldrb.w	r1, [sp, #14]
		  checkForSDCardTuning(tuningNumberToLoad);
24001b1c:	781b      	ldrb	r3, [r3, #0]
	if(BSP_SD_IsDetected())
24001b1e:	2900      	cmp	r1, #0
24001b20:	f040 80ee 	bne.w	24001d00 <main+0x4c8>
		loadFailed = 1;
24001b24:	2301      	movs	r3, #1
24001b26:	4a30      	ldr	r2, [pc, #192]	; (24001be8 <main+0x3b0>)
24001b28:	7013      	strb	r3, [r2, #0]
	tuningWaitingToLoad = 0;
24001b2a:	2300      	movs	r3, #0
	  if(tuningWaitingToParse > 0)
24001b2c:	f8d8 0000 	ldr.w	r0, [r8]
	tuningWaitingToLoad = 0;
24001b30:	6033      	str	r3, [r6, #0]
	diskBusy = 0;
24001b32:	703b      	strb	r3, [r7, #0]
	  if(tuningWaitingToParse > 0)
24001b34:	2800      	cmp	r0, #0
24001b36:	d0b5      	beq.n	24001aa4 <main+0x26c>
		  parseTuning(tuningWaitingToParse, tuningNumberToLoad);
24001b38:	4b2a      	ldr	r3, [pc, #168]	; (24001be4 <main+0x3ac>)
24001b3a:	7819      	ldrb	r1, [r3, #0]
24001b3c:	f027 f880 	bl	24028c40 <__parseTuning_veneer>
24001b40:	e7b5      	b.n	24001aae <main+0x276>
24001b42:	bf00      	nop
24001b44:	f3af 8000 	nop.w
	...
24001b50:	e000ed00 	.word	0xe000ed00
24001b54:	58024800 	.word	0x58024800
24001b58:	58024400 	.word	0x58024400
24001b5c:	58020800 	.word	0x58020800
24001b60:	e0001000 	.word	0xe0001000
24001b64:	c5acce55 	.word	0xc5acce55
24001b68:	40000001 	.word	0x40000001
24001b6c:	200005d8 	.word	0x200005d8
24001b70:	20000240 	.word	0x20000240
24001b74:	20009240 	.word	0x20009240
24001b78:	2000c3f8 	.word	0x2000c3f8
24001b7c:	20011824 	.word	0x20011824
24001b80:	3c23d70a 	.word	0x3c23d70a
24001b84:	2000f814 	.word	0x2000f814
24001b88:	457a0000 	.word	0x457a0000
24001b8c:	469c4000 	.word	0x469c4000
24001b90:	00000000 	.word	0x00000000
24001b94:	2000a2d0 	.word	0x2000a2d0
24001b98:	2000c3fc 	.word	0x2000c3fc
24001b9c:	2000f804 	.word	0x2000f804
24001ba0:	200091ec 	.word	0x200091ec
24001ba4:	3000003f 	.word	0x3000003f
24001ba8:	4f000000 	.word	0x4f000000
24001bac:	30000060 	.word	0x30000060
24001bb0:	20011d40 	.word	0x20011d40
24001bb4:	58020400 	.word	0x58020400
24001bb8:	20011aa0 	.word	0x20011aa0
24001bbc:	20011b38 	.word	0x20011b38
24001bc0:	3000000d 	.word	0x3000000d
24001bc4:	30000000 	.word	0x30000000
24001bc8:	2000a27c 	.word	0x2000a27c
24001bcc:	20011940 	.word	0x20011940
24001bd0:	2000a242 	.word	0x2000a242
24001bd4:	2000f810 	.word	0x2000f810
24001bd8:	20011948 	.word	0x20011948
24001bdc:	20011998 	.word	0x20011998
24001be0:	20012480 	.word	0x20012480
24001be4:	2001193c 	.word	0x2001193c
24001be8:	2000e42c 	.word	0x2000e42c
24001bec:	2000f808 	.word	0x2000f808
24001bf0:	2000f80c 	.word	0x2000f80c
24001bf4:	20011944 	.word	0x20011944
24001bf8:	2000eab8 	.word	0x2000eab8
  __ASM volatile ("cpsid i" : : : "memory");
24001bfc:	b672      	cpsid	i
  __IO uint8_t status = SD_PRESENT;
24001bfe:	2201      	movs	r2, #1
24001c00:	f88d 200f 	strb.w	r2, [sp, #15]
  return status;
24001c04:	f89d 100f 	ldrb.w	r1, [sp, #15]
		 audioOutBuffer[i] = 0;
24001c08:	ed85 8b00 	vstr	d8, [r5]
24001c0c:	ed85 8b02 	vstr	d8, [r5, #8]
24001c10:	ed85 8b04 	vstr	d8, [r5, #16]
24001c14:	ed85 8b06 	vstr	d8, [r5, #24]
	if(BSP_SD_IsDetected())
24001c18:	b359      	cbz	r1, 24001c72 <main+0x43a>
				diskBusy = 1;
24001c1a:	703a      	strb	r2, [r7, #0]
			    if (tuningNumberToSave > 99)
24001c1c:	4a8b      	ldr	r2, [pc, #556]	; (24001e4c <main+0x614>)
24001c1e:	7810      	ldrb	r0, [r2, #0]
24001c20:	2863      	cmp	r0, #99	; 0x63
24001c22:	d901      	bls.n	24001c28 <main+0x3f0>
			    	tuningNumberToSave = 99;
24001c24:	2063      	movs	r0, #99	; 0x63
24001c26:	7010      	strb	r0, [r2, #0]
				itoa(tuningNumberToSave, charBuf, 10);
24001c28:	220a      	movs	r2, #10
24001c2a:	a906      	add	r1, sp, #24
24001c2c:	9301      	str	r3, [sp, #4]
24001c2e:	f010 ff79 	bl	24012b24 <itoa>
				int len = ((strlen(charBuf)));
24001c32:	a806      	add	r0, sp, #24
24001c34:	f7fe fb50 	bl	240002d8 <strlen>
				if (len == 1)
24001c38:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
24001c3a:	4602      	mov	r2, r0
				if (len == 1)
24001c3c:	9b01      	ldr	r3, [sp, #4]
24001c3e:	f000 80aa 	beq.w	24001d96 <main+0x55e>
					strcat(charBuf, ".ebt");
24001c42:	9301      	str	r3, [sp, #4]
24001c44:	a906      	add	r1, sp, #24
24001c46:	4b82      	ldr	r3, [pc, #520]	; (24001e50 <main+0x618>)
24001c48:	6818      	ldr	r0, [r3, #0]
24001c4a:	5088      	str	r0, [r1, r2]
24001c4c:	4411      	add	r1, r2
24001c4e:	7918      	ldrb	r0, [r3, #4]
					strcpy(finalString, charBuf);
24001c50:	3205      	adds	r2, #5
					strcat(charBuf, ".ebt");
24001c52:	7108      	strb	r0, [r1, #4]
					strcpy(finalString, charBuf);
24001c54:	a906      	add	r1, sp, #24
24001c56:	a809      	add	r0, sp, #36	; 0x24
24001c58:	f010 ff66 	bl	24012b28 <memcpy>
24001c5c:	9b01      	ldr	r3, [sp, #4]
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
24001c5e:	220a      	movs	r2, #10
24001c60:	a909      	add	r1, sp, #36	; 0x24
24001c62:	487c      	ldr	r0, [pc, #496]	; (24001e54 <main+0x61c>)
24001c64:	9301      	str	r3, [sp, #4]
24001c66:	f00b f827 	bl	2400ccb8 <f_open>
24001c6a:	9b01      	ldr	r3, [sp, #4]
24001c6c:	2800      	cmp	r0, #0
24001c6e:	f000 80cc 	beq.w	24001e0a <main+0x5d2>
	tuningWaitingToWrite = 0;
24001c72:	2300      	movs	r3, #0
24001c74:	4a78      	ldr	r2, [pc, #480]	; (24001e58 <main+0x620>)
	diskBusy = 0;
24001c76:	703b      	strb	r3, [r7, #0]
	tuningWaitingToWrite = 0;
24001c78:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
24001c7a:	b662      	cpsie	i
}
24001c7c:	e717      	b.n	24001aae <main+0x276>
  __ASM volatile ("cpsid i" : : : "memory");
24001c7e:	b672      	cpsid	i
  __IO uint8_t status = SD_PRESENT;
24001c80:	2201      	movs	r2, #1
24001c82:	f88d 200d 	strb.w	r2, [sp, #13]
  return status;
24001c86:	f89d 100d 	ldrb.w	r1, [sp, #13]
		 audioOutBuffer[i] = 0;
24001c8a:	ed85 8b00 	vstr	d8, [r5]
24001c8e:	ed85 8b02 	vstr	d8, [r5, #8]
24001c92:	ed85 8b04 	vstr	d8, [r5, #16]
24001c96:	ed85 8b06 	vstr	d8, [r5, #24]
	if(BSP_SD_IsDetected())
24001c9a:	b359      	cbz	r1, 24001cf4 <main+0x4bc>
				diskBusy = 1;
24001c9c:	703a      	strb	r2, [r7, #0]
			    if (presetNumberToSave > 99)
24001c9e:	4a6f      	ldr	r2, [pc, #444]	; (24001e5c <main+0x624>)
24001ca0:	7810      	ldrb	r0, [r2, #0]
24001ca2:	2863      	cmp	r0, #99	; 0x63
24001ca4:	d901      	bls.n	24001caa <main+0x472>
			        presetNumberToSave = 99;
24001ca6:	2063      	movs	r0, #99	; 0x63
24001ca8:	7010      	strb	r0, [r2, #0]
				itoa(presetNumberToSave, charBuf, 10);
24001caa:	220a      	movs	r2, #10
24001cac:	a906      	add	r1, sp, #24
24001cae:	9301      	str	r3, [sp, #4]
24001cb0:	f010 ff38 	bl	24012b24 <itoa>
				int len = ((strlen(charBuf)));
24001cb4:	a806      	add	r0, sp, #24
24001cb6:	f7fe fb0f 	bl	240002d8 <strlen>
				if (len == 1)
24001cba:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
24001cbc:	4602      	mov	r2, r0
				if (len == 1)
24001cbe:	9b01      	ldr	r3, [sp, #4]
24001cc0:	f000 8081 	beq.w	24001dc6 <main+0x58e>
					strcat(charBuf, ".ebp");
24001cc4:	9301      	str	r3, [sp, #4]
24001cc6:	a906      	add	r1, sp, #24
24001cc8:	4b65      	ldr	r3, [pc, #404]	; (24001e60 <main+0x628>)
24001cca:	6818      	ldr	r0, [r3, #0]
24001ccc:	5088      	str	r0, [r1, r2]
24001cce:	4411      	add	r1, r2
24001cd0:	7918      	ldrb	r0, [r3, #4]
					strcpy(finalString, charBuf);
24001cd2:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
24001cd4:	7108      	strb	r0, [r1, #4]
					strcpy(finalString, charBuf);
24001cd6:	a906      	add	r1, sp, #24
24001cd8:	a809      	add	r0, sp, #36	; 0x24
24001cda:	f010 ff25 	bl	24012b28 <memcpy>
24001cde:	9b01      	ldr	r3, [sp, #4]
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
24001ce0:	220a      	movs	r2, #10
24001ce2:	a909      	add	r1, sp, #36	; 0x24
24001ce4:	485b      	ldr	r0, [pc, #364]	; (24001e54 <main+0x61c>)
24001ce6:	9301      	str	r3, [sp, #4]
24001ce8:	f00a ffe6 	bl	2400ccb8 <f_open>
24001cec:	9b01      	ldr	r3, [sp, #4]
24001cee:	2800      	cmp	r0, #0
24001cf0:	f000 8081 	beq.w	24001df6 <main+0x5be>
	presetWaitingToWrite = 0;
24001cf4:	2300      	movs	r3, #0
24001cf6:	4a5b      	ldr	r2, [pc, #364]	; (24001e64 <main+0x62c>)
	diskBusy = 0;
24001cf8:	703b      	strb	r3, [r7, #0]
	presetWaitingToWrite = 0;
24001cfa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
24001cfc:	b662      	cpsie	i
}
24001cfe:	e6ca      	b.n	24001a96 <main+0x25e>
		loadFailed = 0;
24001d00:	2100      	movs	r1, #0
24001d02:	9301      	str	r3, [sp, #4]
24001d04:	4b58      	ldr	r3, [pc, #352]	; (24001e68 <main+0x630>)
		disk_initialize(0);
24001d06:	4608      	mov	r0, r1
		diskBusy = 1;
24001d08:	703a      	strb	r2, [r7, #0]
		loadFailed = 0;
24001d0a:	7019      	strb	r1, [r3, #0]
		disk_initialize(0);
24001d0c:	f008 fd78 	bl	2400a800 <disk_initialize>
	    disk_status(0);
24001d10:	2100      	movs	r1, #0
24001d12:	4608      	mov	r0, r1
24001d14:	f008 fd6a 	bl	2400a7ec <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
24001d18:	2201      	movs	r2, #1
24001d1a:	4954      	ldr	r1, [pc, #336]	; (24001e6c <main+0x634>)
24001d1c:	4854      	ldr	r0, [pc, #336]	; (24001e70 <main+0x638>)
24001d1e:	f00a ff7f 	bl	2400cc20 <f_mount>
24001d22:	9b01      	ldr	r3, [sp, #4]
24001d24:	2800      	cmp	r0, #0
24001d26:	f47f aefd 	bne.w	24001b24 <main+0x2ec>
			itoa(numberToLoad, charBuf, 10);
24001d2a:	220a      	movs	r2, #10
24001d2c:	4618      	mov	r0, r3
24001d2e:	a906      	add	r1, sp, #24
24001d30:	f010 fef8 	bl	24012b24 <itoa>
			int len = ((strlen(charBuf)));
24001d34:	a806      	add	r0, sp, #24
24001d36:	f7fe facf 	bl	240002d8 <strlen>
			if (len == 1)
24001d3a:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
24001d3c:	4602      	mov	r2, r0
			if (len == 1)
24001d3e:	d06e      	beq.n	24001e1e <main+0x5e6>
				strcat(charBuf, ".ebt");
24001d40:	4943      	ldr	r1, [pc, #268]	; (24001e50 <main+0x618>)
24001d42:	ab06      	add	r3, sp, #24
24001d44:	6808      	ldr	r0, [r1, #0]
24001d46:	7909      	ldrb	r1, [r1, #4]
24001d48:	5098      	str	r0, [r3, r2]
24001d4a:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
24001d4c:	a809      	add	r0, sp, #36	; 0x24
24001d4e:	3205      	adds	r2, #5
				strcat(charBuf, ".ebt");
24001d50:	7119      	strb	r1, [r3, #4]
				strcpy(finalString, charBuf);
24001d52:	a906      	add	r1, sp, #24
24001d54:	f010 fee8 	bl	24012b28 <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24001d58:	ab09      	add	r3, sp, #36	; 0x24
24001d5a:	4a44      	ldr	r2, [pc, #272]	; (24001e6c <main+0x634>)
24001d5c:	4945      	ldr	r1, [pc, #276]	; (24001e74 <main+0x63c>)
24001d5e:	4846      	ldr	r0, [pc, #280]	; (24001e78 <main+0x640>)
24001d60:	f00b fc8c 	bl	2400d67c <f_findfirst>
			if(res == FR_OK)
24001d64:	2800      	cmp	r0, #0
24001d66:	f47f aedd 	bne.w	24001b24 <main+0x2ec>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24001d6a:	2211      	movs	r2, #17
24001d6c:	4943      	ldr	r1, [pc, #268]	; (24001e7c <main+0x644>)
24001d6e:	4839      	ldr	r0, [pc, #228]	; (24001e54 <main+0x61c>)
24001d70:	f00a ffa2 	bl	2400ccb8 <f_open>
24001d74:	2800      	cmp	r0, #0
24001d76:	f47f aed5 	bne.w	24001b24 <main+0x2ec>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24001d7a:	4a36      	ldr	r2, [pc, #216]	; (24001e54 <main+0x61c>)
24001d7c:	ab05      	add	r3, sp, #20
24001d7e:	4940      	ldr	r1, [pc, #256]	; (24001e80 <main+0x648>)
24001d80:	68d2      	ldr	r2, [r2, #12]
24001d82:	4834      	ldr	r0, [pc, #208]	; (24001e54 <main+0x61c>)
24001d84:	f00b f914 	bl	2400cfb0 <f_read>
					tuningWaitingToParse = bytesRead;
24001d88:	9b05      	ldr	r3, [sp, #20]
					f_close(&SDFile);
24001d8a:	4832      	ldr	r0, [pc, #200]	; (24001e54 <main+0x61c>)
					tuningWaitingToParse = bytesRead;
24001d8c:	f8c8 3000 	str.w	r3, [r8]
					f_close(&SDFile);
24001d90:	f00b fb6a 	bl	2400d468 <f_close>
	if (!found)
24001d94:	e6c9      	b.n	24001b2a <main+0x2f2>
					finalString[2] = charBuf[1];
24001d96:	f89d 2019 	ldrb.w	r2, [sp, #25]
					strcat(finalString, ".ebt");
24001d9a:	a809      	add	r0, sp, #36	; 0x24
					finalString[2] = charBuf[1];
24001d9c:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
					finalString[1] = charBuf[0];
24001da0:	f89d 2018 	ldrb.w	r2, [sp, #24]
24001da4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
					finalString[0] = '0';
24001da8:	2230      	movs	r2, #48	; 0x30
24001daa:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
					strcat(finalString, ".ebt");
24001dae:	f7fe fa93 	bl	240002d8 <strlen>
24001db2:	4b27      	ldr	r3, [pc, #156]	; (24001e50 <main+0x618>)
24001db4:	4602      	mov	r2, r0
24001db6:	a909      	add	r1, sp, #36	; 0x24
24001db8:	6818      	ldr	r0, [r3, #0]
24001dba:	5088      	str	r0, [r1, r2]
24001dbc:	440a      	add	r2, r1
24001dbe:	7919      	ldrb	r1, [r3, #4]
24001dc0:	9b01      	ldr	r3, [sp, #4]
24001dc2:	7111      	strb	r1, [r2, #4]
24001dc4:	e74b      	b.n	24001c5e <main+0x426>
					finalString[2] = charBuf[1];
24001dc6:	f89d 2019 	ldrb.w	r2, [sp, #25]
					strcat(finalString, ".ebp");
24001dca:	a809      	add	r0, sp, #36	; 0x24
					finalString[2] = charBuf[1];
24001dcc:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
					finalString[1] = charBuf[0];
24001dd0:	f89d 2018 	ldrb.w	r2, [sp, #24]
24001dd4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
					finalString[0] = '0';
24001dd8:	2230      	movs	r2, #48	; 0x30
24001dda:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
					strcat(finalString, ".ebp");
24001dde:	f7fe fa7b 	bl	240002d8 <strlen>
24001de2:	4b1f      	ldr	r3, [pc, #124]	; (24001e60 <main+0x628>)
24001de4:	4602      	mov	r2, r0
24001de6:	a909      	add	r1, sp, #36	; 0x24
24001de8:	6818      	ldr	r0, [r3, #0]
24001dea:	5088      	str	r0, [r1, r2]
24001dec:	440a      	add	r2, r1
24001dee:	7919      	ldrb	r1, [r3, #4]
24001df0:	9b01      	ldr	r3, [sp, #4]
24001df2:	7111      	strb	r1, [r2, #4]
24001df4:	e774      	b.n	24001ce0 <main+0x4a8>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
24001df6:	461a      	mov	r2, r3
24001df8:	4921      	ldr	r1, [pc, #132]	; (24001e80 <main+0x648>)
24001dfa:	ab05      	add	r3, sp, #20
24001dfc:	4815      	ldr	r0, [pc, #84]	; (24001e54 <main+0x61c>)
24001dfe:	f00b f9f7 	bl	2400d1f0 <f_write>
					f_close(&SDFile);
24001e02:	4814      	ldr	r0, [pc, #80]	; (24001e54 <main+0x61c>)
24001e04:	f00b fb30 	bl	2400d468 <f_close>
24001e08:	e774      	b.n	24001cf4 <main+0x4bc>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
24001e0a:	461a      	mov	r2, r3
24001e0c:	491c      	ldr	r1, [pc, #112]	; (24001e80 <main+0x648>)
24001e0e:	ab05      	add	r3, sp, #20
24001e10:	4810      	ldr	r0, [pc, #64]	; (24001e54 <main+0x61c>)
24001e12:	f00b f9ed 	bl	2400d1f0 <f_write>
					f_close(&SDFile);
24001e16:	480f      	ldr	r0, [pc, #60]	; (24001e54 <main+0x61c>)
24001e18:	f00b fb26 	bl	2400d468 <f_close>
24001e1c:	e729      	b.n	24001c72 <main+0x43a>
				finalString[2] = charBuf[1];
24001e1e:	f89d 3019 	ldrb.w	r3, [sp, #25]
				strcat(finalString, ".ebt");
24001e22:	a809      	add	r0, sp, #36	; 0x24
				finalString[2] = charBuf[1];
24001e24:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
				finalString[1] = charBuf[0];
24001e28:	f89d 3018 	ldrb.w	r3, [sp, #24]
24001e2c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
				finalString[0] = '0';
24001e30:	2330      	movs	r3, #48	; 0x30
24001e32:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
				strcat(finalString, ".ebt");
24001e36:	f7fe fa4f 	bl	240002d8 <strlen>
24001e3a:	4a05      	ldr	r2, [pc, #20]	; (24001e50 <main+0x618>)
24001e3c:	4603      	mov	r3, r0
24001e3e:	a909      	add	r1, sp, #36	; 0x24
24001e40:	6810      	ldr	r0, [r2, #0]
24001e42:	7912      	ldrb	r2, [r2, #4]
24001e44:	50c8      	str	r0, [r1, r3]
24001e46:	440b      	add	r3, r1
24001e48:	711a      	strb	r2, [r3, #4]
24001e4a:	e785      	b.n	24001d58 <main+0x520>
24001e4c:	2001193d 	.word	0x2001193d
24001e50:	24014100 	.word	0x24014100
24001e54:	20012014 	.word	0x20012014
24001e58:	20011948 	.word	0x20011948
24001e5c:	2000f805 	.word	0x2000f805
24001e60:	240140f8 	.word	0x240140f8
24001e64:	2000f810 	.word	0x2000f810
24001e68:	2000e42c 	.word	0x2000e42c
24001e6c:	20012240 	.word	0x20012240
24001e70:	20011de0 	.word	0x20011de0
24001e74:	2000c2e0 	.word	0x2000c2e0
24001e78:	2000a244 	.word	0x2000a244
24001e7c:	2000c2f6 	.word	0x2000c2f6
24001e80:	20009240 	.word	0x20009240

24001e84 <HAL_GPIO_EXTI_Callback>:
    if(GPIO_Pin == GPIO_PIN_3) // If The INT Source Is EXTI Line3
24001e84:	2808      	cmp	r0, #8
24001e86:	d000      	beq.n	24001e8a <HAL_GPIO_EXTI_Callback+0x6>
24001e88:	4770      	bx	lr
    	  if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 1) //button is pressed, wait
24001e8a:	4601      	mov	r1, r0
24001e8c:	4833      	ldr	r0, [pc, #204]	; (24001f5c <HAL_GPIO_EXTI_Callback+0xd8>)
{
24001e8e:	b510      	push	{r4, lr}
24001e90:	b084      	sub	sp, #16
    	  if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) == 1) //button is pressed, wait
24001e92:	f002 fafb 	bl	2400448c <HAL_GPIO_ReadPin>
24001e96:	2801      	cmp	r0, #1
24001e98:	d005      	beq.n	24001ea6 <HAL_GPIO_EXTI_Callback+0x22>
    		  if (buttonPressed == 1)
24001e9a:	4c31      	ldr	r4, [pc, #196]	; (24001f60 <HAL_GPIO_EXTI_Callback+0xdc>)
24001e9c:	7823      	ldrb	r3, [r4, #0]
24001e9e:	2b01      	cmp	r3, #1
24001ea0:	d004      	beq.n	24001eac <HAL_GPIO_EXTI_Callback+0x28>
}
24001ea2:	b004      	add	sp, #16
24001ea4:	bd10      	pop	{r4, pc}
    		  buttonPressed = 1;
24001ea6:	4b2e      	ldr	r3, [pc, #184]	; (24001f60 <HAL_GPIO_EXTI_Callback+0xdc>)
24001ea8:	7018      	strb	r0, [r3, #0]
24001eaa:	e7fa      	b.n	24001ea2 <HAL_GPIO_EXTI_Callback+0x1e>
    				  bootloaderFlag[i] = 231;
24001eac:	4b2d      	ldr	r3, [pc, #180]	; (24001f64 <HAL_GPIO_EXTI_Callback+0xe0>)
24001eae:	2220      	movs	r2, #32
24001eb0:	21e7      	movs	r1, #231	; 0xe7
24001eb2:	4618      	mov	r0, r3
24001eb4:	f010 fe46 	bl	24012b44 <memset>
	if(addr >= 0x24000000 && addr < 0x24080000){
24001eb8:	f100 425c 	add.w	r2, r0, #3690987520	; 0xdc000000
    				  bootloaderFlag[i] = 231;
24001ebc:	4603      	mov	r3, r0
	if(addr >= 0x24000000 && addr < 0x24080000){
24001ebe:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
24001ec2:	d229      	bcs.n	24001f18 <HAL_GPIO_EXTI_Callback+0x94>
			temp = *flush_ptr;
24001ec4:	e9d0 0100 	ldrd	r0, r1, [r0]
24001ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
			*flush_ptr = temp;
24001ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
24001ed0:	e9c3 0100 	strd	r0, r1, [r3]
			temp = *flush_ptr;
24001ed4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
24001ed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
			*flush_ptr = temp;
24001edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
24001ee0:	e9c3 0102 	strd	r0, r1, [r3, #8]
			temp = *flush_ptr;
24001ee4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
24001ee8:	e9cd 0102 	strd	r0, r1, [sp, #8]
			*flush_ptr = temp;
24001eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
24001ef0:	e9c3 0104 	strd	r0, r1, [r3, #16]
			temp = *flush_ptr;
24001ef4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
24001ef8:	e9cd 0102 	strd	r0, r1, [sp, #8]
			*flush_ptr = temp;
24001efc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
24001f00:	e9c3 0106 	strd	r0, r1, [r3, #24]
				  buttonPressed = 0;
24001f04:	2300      	movs	r3, #0
				  HAL_Delay(100);
24001f06:	2064      	movs	r0, #100	; 0x64
				  buttonPressed = 0;
24001f08:	7023      	strb	r3, [r4, #0]
				  HAL_Delay(100);
24001f0a:	f000 fcf1 	bl	240028f0 <HAL_Delay>
}
24001f0e:	b004      	add	sp, #16
24001f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				  HAL_NVIC_SystemReset();
24001f14:	f000 bd62 	b.w	240029dc <HAL_NVIC_SystemReset>
			temp = *flush_ptr;
24001f18:	6802      	ldr	r2, [r0, #0]
24001f1a:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24001f1c:	9a01      	ldr	r2, [sp, #4]
24001f1e:	6002      	str	r2, [r0, #0]
			temp = *flush_ptr;
24001f20:	6842      	ldr	r2, [r0, #4]
24001f22:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24001f24:	9a01      	ldr	r2, [sp, #4]
24001f26:	6042      	str	r2, [r0, #4]
			temp = *flush_ptr;
24001f28:	6882      	ldr	r2, [r0, #8]
24001f2a:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24001f2c:	9a01      	ldr	r2, [sp, #4]
24001f2e:	6082      	str	r2, [r0, #8]
			temp = *flush_ptr;
24001f30:	68c2      	ldr	r2, [r0, #12]
24001f32:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24001f34:	9a01      	ldr	r2, [sp, #4]
24001f36:	60c2      	str	r2, [r0, #12]
			temp = *flush_ptr;
24001f38:	6902      	ldr	r2, [r0, #16]
24001f3a:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24001f3c:	9a01      	ldr	r2, [sp, #4]
24001f3e:	6102      	str	r2, [r0, #16]
			temp = *flush_ptr;
24001f40:	6942      	ldr	r2, [r0, #20]
24001f42:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24001f44:	9a01      	ldr	r2, [sp, #4]
24001f46:	6142      	str	r2, [r0, #20]
			temp = *flush_ptr;
24001f48:	6982      	ldr	r2, [r0, #24]
24001f4a:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24001f4c:	9a01      	ldr	r2, [sp, #4]
24001f4e:	6182      	str	r2, [r0, #24]
			temp = *flush_ptr;
24001f50:	69c2      	ldr	r2, [r0, #28]
24001f52:	9201      	str	r2, [sp, #4]
			*flush_ptr = temp;
24001f54:	9a01      	ldr	r2, [sp, #4]
24001f56:	61c2      	str	r2, [r0, #28]
		}while(flush_ptr != end_ptr);
24001f58:	e7d4      	b.n	24001f04 <HAL_GPIO_EXTI_Callback+0x80>
24001f5a:	bf00      	nop
24001f5c:	58021800 	.word	0x58021800
24001f60:	2000a240 	.word	0x2000a240
24001f64:	38800000 	.word	0x38800000

24001f68 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
24001f68:	b672      	cpsid	i
  while (1)
24001f6a:	e7fe      	b.n	24001f6a <Error_Handler+0x2>

24001f6c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
24001f6c:	b510      	push	{r4, lr}
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
24001f6e:	480b      	ldr	r0, [pc, #44]	; (24001f9c <MX_QUADSPI_Init+0x30>)
  hqspi.Init.ClockPrescaler = 1;
  hqspi.Init.FifoThreshold = 1;
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
24001f70:	2300      	movs	r3, #0
  hqspi.Init.ClockPrescaler = 1;
24001f72:	2201      	movs	r2, #1
  hqspi.Instance = QUADSPI;
24001f74:	4c0a      	ldr	r4, [pc, #40]	; (24001fa0 <MX_QUADSPI_Init+0x34>)
  hqspi.Init.FlashSize = 19;
24001f76:	2113      	movs	r1, #19
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
24001f78:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FifoThreshold = 1;
24001f7a:	6082      	str	r2, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
24001f7c:	6203      	str	r3, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
24001f7e:	e9c0 4200 	strd	r4, r2, [r0]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
24001f82:	e9c0 1304 	strd	r1, r3, [r0, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
24001f86:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
24001f8a:	f002 fdbb 	bl	24004b04 <HAL_QSPI_Init>
24001f8e:	b900      	cbnz	r0, 24001f92 <MX_QUADSPI_Init+0x26>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
24001f90:	bd10      	pop	{r4, pc}
24001f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24001f96:	f7ff bfe7 	b.w	24001f68 <Error_Handler>
24001f9a:	bf00      	nop
24001f9c:	2001194c 	.word	0x2001194c
24001fa0:	52005000 	.word	0x52005000

24001fa4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
24001fa4:	b570      	push	{r4, r5, r6, lr}
24001fa6:	b0ba      	sub	sp, #232	; 0xe8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001fa8:	2100      	movs	r1, #0
{
24001faa:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001fac:	22c0      	movs	r2, #192	; 0xc0
24001fae:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001fb0:	9108      	str	r1, [sp, #32]
24001fb2:	e9cd 1104 	strd	r1, r1, [sp, #16]
24001fb6:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001fba:	f010 fdc3 	bl	24012b44 <memset>
  if(qspiHandle->Instance==QUADSPI)
24001fbe:	4b31      	ldr	r3, [pc, #196]	; (24002084 <HAL_QSPI_MspInit+0xe0>)
24001fc0:	6822      	ldr	r2, [r4, #0]
24001fc2:	429a      	cmp	r2, r3
24001fc4:	d001      	beq.n	24001fca <HAL_QSPI_MspInit+0x26>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
24001fc6:	b03a      	add	sp, #232	; 0xe8
24001fc8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
24001fca:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
24001fce:	2500      	movs	r5, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL;
24001fd0:	2310      	movs	r3, #16
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001fd2:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
24001fd4:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_PLL;
24001fd8:	931d      	str	r3, [sp, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001fda:	f003 fcab 	bl	24005934 <HAL_RCCEx_PeriphCLKConfig>
24001fde:	2800      	cmp	r0, #0
24001fe0:	d14d      	bne.n	2400207e <HAL_QSPI_MspInit+0xda>
    __HAL_RCC_QSPI_CLK_ENABLE();
24001fe2:	4b29      	ldr	r3, [pc, #164]	; (24002088 <HAL_QSPI_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
24001fe4:	2040      	movs	r0, #64	; 0x40
24001fe6:	2102      	movs	r1, #2
24001fe8:	2400      	movs	r4, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
24001fea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Pin = GPIO_PIN_6;
24001fee:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
24001ff0:	260a      	movs	r6, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
24001ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24001ff6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
24001ffa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
24001ffe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
24002002:	9201      	str	r2, [sp, #4]
24002004:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
24002006:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400200a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400200e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24002012:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002016:	f002 0240 	and.w	r2, r2, #64	; 0x40
2400201a:	9202      	str	r2, [sp, #8]
2400201c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
2400201e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002022:	f042 0220 	orr.w	r2, r2, #32
24002026:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400202a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
2400202e:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
24002030:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pin = GPIO_PIN_6;
24002034:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
24002038:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400203a:	a904      	add	r1, sp, #16
2400203c:	4813      	ldr	r0, [pc, #76]	; (2400208c <HAL_QSPI_MspInit+0xe8>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
2400203e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
24002040:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24002044:	f002 f8e8 	bl	24004218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
24002048:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
2400204c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
2400204e:	a904      	add	r1, sp, #16
24002050:	480f      	ldr	r0, [pc, #60]	; (24002090 <HAL_QSPI_MspInit+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
24002052:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24002056:	2309      	movs	r3, #9
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10;
24002058:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
2400205c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
2400205e:	f002 f8db 	bl	24004218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
24002062:	f44f 7240 	mov.w	r2, #768	; 0x300
24002066:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24002068:	a904      	add	r1, sp, #16
2400206a:	4809      	ldr	r0, [pc, #36]	; (24002090 <HAL_QSPI_MspInit+0xec>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
2400206c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
2400206e:	e9cd 4506 	strd	r4, r5, [sp, #24]
24002072:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24002076:	f002 f8cf 	bl	24004218 <HAL_GPIO_Init>
}
2400207a:	b03a      	add	sp, #232	; 0xe8
2400207c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
2400207e:	f7ff ff73 	bl	24001f68 <Error_Handler>
24002082:	e7ae      	b.n	24001fe2 <HAL_QSPI_MspInit+0x3e>
24002084:	52005000 	.word	0x52005000
24002088:	58024400 	.word	0x58024400
2400208c:	58021800 	.word	0x58021800
24002090:	58021400 	.word	0x58021400

24002094 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
24002094:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
24002096:	4806      	ldr	r0, [pc, #24]	; (240020b0 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
24002098:	2300      	movs	r3, #0
2400209a:	4a06      	ldr	r2, [pc, #24]	; (240020b4 <MX_RNG_Init+0x20>)
2400209c:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
240020a0:	f004 fe10 	bl	24006cc4 <HAL_RNG_Init>
240020a4:	b900      	cbnz	r0, 240020a8 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
240020a6:	bd08      	pop	{r3, pc}
240020a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
240020ac:	f7ff bf5c 	b.w	24001f68 <Error_Handler>
240020b0:	20011998 	.word	0x20011998
240020b4:	48021800 	.word	0x48021800

240020b8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
240020b8:	b510      	push	{r4, lr}
240020ba:	b0b2      	sub	sp, #200	; 0xc8
240020bc:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240020be:	22c0      	movs	r2, #192	; 0xc0
240020c0:	2100      	movs	r1, #0
240020c2:	a802      	add	r0, sp, #8
240020c4:	f010 fd3e 	bl	24012b44 <memset>
  if(rngHandle->Instance==RNG)
240020c8:	4b10      	ldr	r3, [pc, #64]	; (2400210c <HAL_RNG_MspInit+0x54>)
240020ca:	6822      	ldr	r2, [r4, #0]
240020cc:	429a      	cmp	r2, r3
240020ce:	d001      	beq.n	240020d4 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
240020d0:	b032      	add	sp, #200	; 0xc8
240020d2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
240020d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
240020d8:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240020da:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
240020dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240020e0:	f003 fc28 	bl	24005934 <HAL_RCCEx_PeriphCLKConfig>
240020e4:	b970      	cbnz	r0, 24002104 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
240020e6:	4b0a      	ldr	r3, [pc, #40]	; (24002110 <HAL_RNG_MspInit+0x58>)
240020e8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
240020ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
240020f0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
240020f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
240020f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
240020fc:	9301      	str	r3, [sp, #4]
240020fe:	9b01      	ldr	r3, [sp, #4]
}
24002100:	b032      	add	sp, #200	; 0xc8
24002102:	bd10      	pop	{r4, pc}
      Error_Handler();
24002104:	f7ff ff30 	bl	24001f68 <Error_Handler>
24002108:	e7ed      	b.n	240020e6 <HAL_RNG_MspInit+0x2e>
2400210a:	bf00      	nop
2400210c:	48021800 	.word	0x48021800
24002110:	58024400 	.word	0x58024400

24002114 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
24002114:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
24002116:	4817      	ldr	r0, [pc, #92]	; (24002174 <MX_SAI1_Init+0x60>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24002118:	2200      	movs	r2, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
2400211a:	4c17      	ldr	r4, [pc, #92]	; (24002178 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
2400211c:	2101      	movs	r1, #1
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
2400211e:	2302      	movs	r3, #2
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24002120:	61c2      	str	r2, [r0, #28]
  hsai_BlockA1.Instance = SAI1_Block_A;
24002122:	6004      	str	r4, [r0, #0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24002124:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24002128:	60c2      	str	r2, [r0, #12]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
2400212a:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
2400212c:	e9c0 1201 	strd	r1, r2, [r0, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
24002130:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
24002134:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24002138:	461a      	mov	r2, r3
2400213a:	f004 ffff 	bl	2400713c <HAL_SAI_InitProtocol>
2400213e:	b990      	cbnz	r0, 24002166 <MX_SAI1_Init+0x52>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
24002140:	480e      	ldr	r0, [pc, #56]	; (2400217c <MX_SAI1_Init+0x68>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24002142:	2200      	movs	r2, #0
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
24002144:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24002146:	2101      	movs	r1, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
24002148:	4c0d      	ldr	r4, [pc, #52]	; (24002180 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
2400214a:	6142      	str	r2, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
2400214c:	61c2      	str	r2, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
2400214e:	60c2      	str	r2, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
24002150:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockB1.Instance = SAI1_Block_B;
24002152:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
24002154:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24002158:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
2400215a:	e9c0 3101 	strd	r3, r1, [r0, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
2400215e:	f004 ffed 	bl	2400713c <HAL_SAI_InitProtocol>
24002162:	b918      	cbnz	r0, 2400216c <MX_SAI1_Init+0x58>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
24002164:	bd10      	pop	{r4, pc}
    Error_Handler();
24002166:	f7ff feff 	bl	24001f68 <Error_Handler>
2400216a:	e7e9      	b.n	24002140 <MX_SAI1_Init+0x2c>
}
2400216c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24002170:	f7ff befa 	b.w	24001f68 <Error_Handler>
24002174:	20011aa0 	.word	0x20011aa0
24002178:	40015804 	.word	0x40015804
2400217c:	20011b38 	.word	0x20011b38
24002180:	40015824 	.word	0x40015824
24002184:	00000000 	.word	0x00000000

24002188 <HAL_SAI_MspInit>:
{

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
24002188:	4a65      	ldr	r2, [pc, #404]	; (24002320 <HAL_SAI_MspInit+0x198>)
2400218a:	6803      	ldr	r3, [r0, #0]
2400218c:	4293      	cmp	r3, r2
{
2400218e:	b530      	push	{r4, r5, lr}
24002190:	4604      	mov	r4, r0
24002192:	b08d      	sub	sp, #52	; 0x34
    if(saiHandle->Instance==SAI1_Block_A)
24002194:	d004      	beq.n	240021a0 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
24002196:	4a63      	ldr	r2, [pc, #396]	; (24002324 <HAL_SAI_MspInit+0x19c>)
24002198:	4293      	cmp	r3, r2
2400219a:	d04d      	beq.n	24002238 <HAL_SAI_MspInit+0xb0>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
2400219c:	b00d      	add	sp, #52	; 0x34
2400219e:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
240021a0:	4d61      	ldr	r5, [pc, #388]	; (24002328 <HAL_SAI_MspInit+0x1a0>)
240021a2:	682a      	ldr	r2, [r5, #0]
240021a4:	2a00      	cmp	r2, #0
240021a6:	d07f      	beq.n	240022a8 <HAL_SAI_MspInit+0x120>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
240021a8:	2074      	movs	r0, #116	; 0x74
240021aa:	2102      	movs	r1, #2
    SAI1_client ++;
240021ac:	3201      	adds	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
240021ae:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
240021b0:	ed9f 7b59 	vldr	d7, [pc, #356]	; 24002318 <HAL_SAI_MspInit+0x190>
240021b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240021b8:	a906      	add	r1, sp, #24
240021ba:	485c      	ldr	r0, [pc, #368]	; (2400232c <HAL_SAI_MspInit+0x1a4>)
    SAI1_client ++;
240021bc:	602a      	str	r2, [r5, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
240021be:	930a      	str	r3, [sp, #40]	; 0x28
    hdma_sai1_a.Instance = DMA1_Stream1;
240021c0:	4d5b      	ldr	r5, [pc, #364]	; (24002330 <HAL_SAI_MspInit+0x1a8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
240021c2:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
240021c6:	f002 f827 	bl	24004218 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
240021ca:	495a      	ldr	r1, [pc, #360]	; (24002334 <HAL_SAI_MspInit+0x1ac>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
240021cc:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
240021ce:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
240021d0:	4628      	mov	r0, r5
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
240021d2:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
240021d4:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
240021d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
240021dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
240021e0:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
240021e4:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
240021e8:	f44f 7380 	mov.w	r3, #256	; 0x100
240021ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
240021f0:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_HIGH;
240021f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
240021f8:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
240021fa:	f000 fe11 	bl	24002e20 <HAL_DMA_Init>
240021fe:	2800      	cmp	r0, #0
24002200:	f040 8084 	bne.w	2400230c <HAL_SAI_MspInit+0x184>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
24002204:	2006      	movs	r0, #6
24002206:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    pSyncConfig.SyncEnable = DISABLE;
2400220a:	f44f 7280 	mov.w	r2, #256	; 0x100
    pSyncConfig.RequestNumber = 1;
2400220e:	2301      	movs	r3, #1
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
24002210:	e9cd 0102 	strd	r0, r1, [sp, #8]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24002214:	a902      	add	r1, sp, #8
24002216:	4846      	ldr	r0, [pc, #280]	; (24002330 <HAL_SAI_MspInit+0x1a8>)
    pSyncConfig.SyncEnable = DISABLE;
24002218:	f8ad 2010 	strh.w	r2, [sp, #16]
    pSyncConfig.RequestNumber = 1;
2400221c:	9305      	str	r3, [sp, #20]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
2400221e:	f001 ff99 	bl	24004154 <HAL_DMAEx_ConfigMuxSync>
24002222:	2800      	cmp	r0, #0
24002224:	d16f      	bne.n	24002306 <HAL_SAI_MspInit+0x17e>
    if(saiHandle->Instance==SAI1_Block_B)
24002226:	6823      	ldr	r3, [r4, #0]
24002228:	4a3e      	ldr	r2, [pc, #248]	; (24002324 <HAL_SAI_MspInit+0x19c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
2400222a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(saiHandle->Instance==SAI1_Block_B)
2400222e:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
24002230:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
24002232:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
24002236:	d1b1      	bne.n	2400219c <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
24002238:	4d3b      	ldr	r5, [pc, #236]	; (24002328 <HAL_SAI_MspInit+0x1a0>)
2400223a:	682a      	ldr	r2, [r5, #0]
2400223c:	2a00      	cmp	r2, #0
2400223e:	d04c      	beq.n	240022da <HAL_SAI_MspInit+0x152>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24002240:	2008      	movs	r0, #8
24002242:	2102      	movs	r1, #2
    SAI1_client ++;
24002244:	3201      	adds	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24002246:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24002248:	ed9f 7b33 	vldr	d7, [pc, #204]	; 24002318 <HAL_SAI_MspInit+0x190>
2400224c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24002250:	a906      	add	r1, sp, #24
24002252:	4836      	ldr	r0, [pc, #216]	; (2400232c <HAL_SAI_MspInit+0x1a4>)
    SAI1_client ++;
24002254:	602a      	str	r2, [r5, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24002256:	930a      	str	r3, [sp, #40]	; 0x28
    hdma_sai1_b.Instance = DMA1_Stream2;
24002258:	4d37      	ldr	r5, [pc, #220]	; (24002338 <HAL_SAI_MspInit+0x1b0>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
2400225a:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
2400225e:	f001 ffdb 	bl	24004218 <HAL_GPIO_Init>
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
24002262:	2300      	movs	r3, #0
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
24002264:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Instance = DMA1_Stream2;
24002266:	4935      	ldr	r1, [pc, #212]	; (2400233c <HAL_SAI_MspInit+0x1b4>)
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
24002268:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
2400226a:	4628      	mov	r0, r5
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
2400226c:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
2400226e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
24002272:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24002276:	2240      	movs	r2, #64	; 0x40
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
24002278:	612b      	str	r3, [r5, #16]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
2400227a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
2400227e:	60aa      	str	r2, [r5, #8]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24002280:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002284:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_HIGH;
24002288:	f44f 7280 	mov.w	r2, #256	; 0x100
2400228c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
24002290:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
24002294:	f000 fdc4 	bl	24002e20 <HAL_DMA_Init>
24002298:	b9e0      	cbnz	r0, 240022d4 <HAL_SAI_MspInit+0x14c>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
2400229a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
2400229e:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
240022a0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
240022a4:	b00d      	add	sp, #52	; 0x34
240022a6:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
240022a8:	4b25      	ldr	r3, [pc, #148]	; (24002340 <HAL_SAI_MspInit+0x1b8>)
    HAL_NVIC_SetPriority(SAI1_IRQn, 3, 0);
240022aa:	2057      	movs	r0, #87	; 0x57
       __HAL_RCC_SAI1_CLK_ENABLE();
240022ac:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
240022b0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
240022b4:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
    HAL_NVIC_SetPriority(SAI1_IRQn, 3, 0);
240022b8:	2103      	movs	r1, #3
       __HAL_RCC_SAI1_CLK_ENABLE();
240022ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
240022be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240022c2:	9300      	str	r3, [sp, #0]
240022c4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(SAI1_IRQn, 3, 0);
240022c6:	f000 fb3d 	bl	24002944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI1_IRQn);
240022ca:	2057      	movs	r0, #87	; 0x57
240022cc:	f000 fb78 	bl	240029c0 <HAL_NVIC_EnableIRQ>
    SAI1_client ++;
240022d0:	682a      	ldr	r2, [r5, #0]
240022d2:	e769      	b.n	240021a8 <HAL_SAI_MspInit+0x20>
      Error_Handler();
240022d4:	f7ff fe48 	bl	24001f68 <Error_Handler>
240022d8:	e7df      	b.n	2400229a <HAL_SAI_MspInit+0x112>
       __HAL_RCC_SAI1_CLK_ENABLE();
240022da:	4b19      	ldr	r3, [pc, #100]	; (24002340 <HAL_SAI_MspInit+0x1b8>)
      HAL_NVIC_SetPriority(SAI1_IRQn, 3, 0);
240022dc:	2057      	movs	r0, #87	; 0x57
       __HAL_RCC_SAI1_CLK_ENABLE();
240022de:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
240022e2:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
240022e6:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
      HAL_NVIC_SetPriority(SAI1_IRQn, 3, 0);
240022ea:	2103      	movs	r1, #3
       __HAL_RCC_SAI1_CLK_ENABLE();
240022ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
240022f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240022f4:	9301      	str	r3, [sp, #4]
240022f6:	9b01      	ldr	r3, [sp, #4]
      HAL_NVIC_SetPriority(SAI1_IRQn, 3, 0);
240022f8:	f000 fb24 	bl	24002944 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI1_IRQn);
240022fc:	2057      	movs	r0, #87	; 0x57
240022fe:	f000 fb5f 	bl	240029c0 <HAL_NVIC_EnableIRQ>
    SAI1_client ++;
24002302:	682a      	ldr	r2, [r5, #0]
24002304:	e79c      	b.n	24002240 <HAL_SAI_MspInit+0xb8>
      Error_Handler();
24002306:	f7ff fe2f 	bl	24001f68 <Error_Handler>
2400230a:	e78c      	b.n	24002226 <HAL_SAI_MspInit+0x9e>
      Error_Handler();
2400230c:	f7ff fe2c 	bl	24001f68 <Error_Handler>
24002310:	e778      	b.n	24002204 <HAL_SAI_MspInit+0x7c>
24002312:	bf00      	nop
24002314:	f3af 8000 	nop.w
24002318:	00000000 	.word	0x00000000
2400231c:	00000002 	.word	0x00000002
24002320:	40015804 	.word	0x40015804
24002324:	40015824 	.word	0x40015824
24002328:	200119ac 	.word	0x200119ac
2400232c:	58021000 	.word	0x58021000
24002330:	200119b0 	.word	0x200119b0
24002334:	40020028 	.word	0x40020028
24002338:	20011a28 	.word	0x20011a28
2400233c:	40020040 	.word	0x40020040
24002340:	58024400 	.word	0x58024400

24002344 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
24002344:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
24002346:	4b07      	ldr	r3, [pc, #28]	; (24002364 <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
24002348:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
2400234a:	4c07      	ldr	r4, [pc, #28]	; (24002368 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
2400234c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
24002350:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
24002352:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
24002356:	e9c3 2002 	strd	r2, r0, [r3, #8]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
2400235a:	f85d 4b04 	ldr.w	r4, [sp], #4
  hsd1.Init.ClockDiv = 25;
2400235e:	e9c3 2104 	strd	r2, r1, [r3, #16]
}
24002362:	4770      	bx	lr
24002364:	20011bd0 	.word	0x20011bd0
24002368:	52007000 	.word	0x52007000

2400236c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
2400236c:	4b2b      	ldr	r3, [pc, #172]	; (2400241c <HAL_SD_MspInit+0xb0>)
2400236e:	6802      	ldr	r2, [r0, #0]
{
24002370:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(sdHandle->Instance==SDMMC1)
24002372:	429a      	cmp	r2, r3
{
24002374:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24002376:	f04f 0400 	mov.w	r4, #0
2400237a:	e9cd 4404 	strd	r4, r4, [sp, #16]
2400237e:	e9cd 4406 	strd	r4, r4, [sp, #24]
24002382:	9408      	str	r4, [sp, #32]
  if(sdHandle->Instance==SDMMC1)
24002384:	d001      	beq.n	2400238a <HAL_SD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
24002386:	b00b      	add	sp, #44	; 0x2c
24002388:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
2400238a:	4b25      	ldr	r3, [pc, #148]	; (24002420 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
2400238c:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
2400238e:	2601      	movs	r6, #1
24002390:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24002392:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24002396:	4823      	ldr	r0, [pc, #140]	; (24002424 <HAL_SD_MspInit+0xb8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24002398:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400239c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
240023a0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
240023a4:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
240023a8:	9201      	str	r2, [sp, #4]
240023aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
240023ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240023b0:	f042 0204 	orr.w	r2, r2, #4
240023b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240023b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240023bc:	f002 0204 	and.w	r2, r2, #4
240023c0:	9202      	str	r2, [sp, #8]
240023c2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
240023c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240023c8:	f042 0208 	orr.w	r2, r2, #8
240023cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
240023d0:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
240023d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
240023d8:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
240023da:	f003 0308 	and.w	r3, r3, #8
240023de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
240023e0:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
240023e2:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240023e4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
240023e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
240023ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240023ee:	f001 ff13 	bl	24004218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
240023f2:	2302      	movs	r3, #2
240023f4:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240023f6:	a904      	add	r1, sp, #16
240023f8:	480b      	ldr	r0, [pc, #44]	; (24002428 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
240023fa:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
240023fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
24002400:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24002404:	f001 ff08 	bl	24004218 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 4, 0);
24002408:	4622      	mov	r2, r4
2400240a:	2104      	movs	r1, #4
2400240c:	2031      	movs	r0, #49	; 0x31
2400240e:	f000 fa99 	bl	24002944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
24002412:	2031      	movs	r0, #49	; 0x31
24002414:	f000 fad4 	bl	240029c0 <HAL_NVIC_EnableIRQ>
}
24002418:	b00b      	add	sp, #44	; 0x2c
2400241a:	bdf0      	pop	{r4, r5, r6, r7, pc}
2400241c:	52007000 	.word	0x52007000
24002420:	58024400 	.word	0x58024400
24002424:	58020800 	.word	0x58020800
24002428:	58020c00 	.word	0x58020c00
2400242c:	00000000 	.word	0x00000000

24002430 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
24002430:	4813      	ldr	r0, [pc, #76]	; (24002480 <MX_SPI1_Init+0x50>)
24002432:	4a14      	ldr	r2, [pc, #80]	; (24002484 <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
24002434:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24002478 <MX_SPI1_Init+0x48>
{
24002438:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
2400243a:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
2400243c:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
2400243e:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
24002440:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
24002442:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
24002444:	ed80 7b08 	vstr	d7, [r0, #32]
24002448:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
2400244c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
24002450:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24002454:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24002458:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
2400245c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24002460:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24002464:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
24002468:	f006 fab6 	bl	240089d8 <HAL_SPI_Init>
2400246c:	b900      	cbnz	r0, 24002470 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
2400246e:	bd08      	pop	{r3, pc}
24002470:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24002474:	f7ff bd78 	b.w	24001f68 <Error_Handler>
	...
24002480:	20011d40 	.word	0x20011d40
24002484:	40013000 	.word	0x40013000

24002488 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
24002488:	b5f0      	push	{r4, r5, r6, r7, lr}
2400248a:	b0bb      	sub	sp, #236	; 0xec

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400248c:	2100      	movs	r1, #0
{
2400248e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24002490:	22c0      	movs	r2, #192	; 0xc0
24002492:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24002494:	9108      	str	r1, [sp, #32]
24002496:	e9cd 1104 	strd	r1, r1, [sp, #16]
2400249a:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400249e:	f010 fb51 	bl	24012b44 <memset>
  if(spiHandle->Instance==SPI1)
240024a2:	4b50      	ldr	r3, [pc, #320]	; (240025e4 <HAL_SPI_MspInit+0x15c>)
240024a4:	6822      	ldr	r2, [r4, #0]
240024a6:	429a      	cmp	r2, r3
240024a8:	d001      	beq.n	240024ae <HAL_SPI_MspInit+0x26>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
240024aa:	b03b      	add	sp, #236	; 0xec
240024ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
240024ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240024b2:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240024b4:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
240024b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240024ba:	f003 fa3b 	bl	24005934 <HAL_RCCEx_PeriphCLKConfig>
240024be:	2800      	cmp	r0, #0
240024c0:	f040 8086 	bne.w	240025d0 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI1_CLK_ENABLE();
240024c4:	4b48      	ldr	r3, [pc, #288]	; (240025e8 <HAL_SPI_MspInit+0x160>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240024c6:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
240024c8:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240024ca:	2702      	movs	r7, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
240024cc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240024d0:	4846      	ldr	r0, [pc, #280]	; (240025ec <HAL_SPI_MspInit+0x164>)
    __HAL_RCC_SPI1_CLK_ENABLE();
240024d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
240024d6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
240024da:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
240024de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
240024e2:	9201      	str	r2, [sp, #4]
240024e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
240024e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240024ea:	f042 0202 	orr.w	r2, r2, #2
240024ee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240024f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240024f6:	f002 0202 	and.w	r2, r2, #2
240024fa:	9202      	str	r2, [sp, #8]
240024fc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
240024fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24002502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24002506:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
2400250a:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
2400250c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24002510:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
24002512:	f003 0340 	and.w	r3, r3, #64	; 0x40
24002516:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24002518:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
2400251a:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400251c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
2400251e:	e9cd 2304 	strd	r2, r3, [sp, #16]
24002522:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002526:	f001 fe77 	bl	24004218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
2400252a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
2400252e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24002530:	a904      	add	r1, sp, #16
24002532:	482f      	ldr	r0, [pc, #188]	; (240025f0 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24002534:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
24002536:	e9cd 2304 	strd	r2, r3, [sp, #16]
2400253a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400253e:	f001 fe6b 	bl	24004218 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream6;
24002542:	4e2c      	ldr	r6, [pc, #176]	; (240025f4 <HAL_SPI_MspInit+0x16c>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
24002544:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream6;
24002546:	492c      	ldr	r1, [pc, #176]	; (240025f8 <HAL_SPI_MspInit+0x170>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
24002548:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
2400254a:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
2400254c:	6333      	str	r3, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
2400254e:	e886 000e 	stmia.w	r6, {r1, r2, r3}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
24002552:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
24002556:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
2400255a:	e9c6 3103 	strd	r3, r1, [r6, #12]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
2400255e:	61f2      	str	r2, [r6, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24002560:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24002564:	2204      	movs	r2, #4
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24002566:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
2400256a:	e9c6 330a 	strd	r3, r3, [r6, #40]	; 0x28
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2400256e:	e9c6 1208 	strd	r1, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
24002572:	f000 fc55 	bl	24002e20 <HAL_DMA_Init>
24002576:	2800      	cmp	r0, #0
24002578:	d130      	bne.n	240025dc <HAL_SPI_MspInit+0x154>
    hdma_spi1_tx.Instance = DMA1_Stream7;
2400257a:	4d20      	ldr	r5, [pc, #128]	; (240025fc <HAL_SPI_MspInit+0x174>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
2400257c:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream7;
2400257e:	4920      	ldr	r1, [pc, #128]	; (24002600 <HAL_SPI_MspInit+0x178>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24002580:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
24002582:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24002584:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream7;
24002588:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
2400258a:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
2400258c:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400258e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24002592:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
24002594:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24002598:	622a      	str	r2, [r5, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2400259a:	2204      	movs	r2, #4
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
2400259c:	4628      	mov	r0, r5
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
2400259e:	67e6      	str	r6, [r4, #124]	; 0x7c
240025a0:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240025a2:	60eb      	str	r3, [r5, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
240025a4:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240025a6:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
240025a8:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
240025aa:	61e9      	str	r1, [r5, #28]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
240025ac:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
240025ae:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240025b0:	626a      	str	r2, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
240025b2:	f000 fc35 	bl	24002e20 <HAL_DMA_Init>
240025b6:	b970      	cbnz	r0, 240025d6 <HAL_SPI_MspInit+0x14e>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
240025b8:	2200      	movs	r2, #0
240025ba:	2102      	movs	r1, #2
240025bc:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
240025be:	67a5      	str	r5, [r4, #120]	; 0x78
240025c0:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
240025c2:	f000 f9bf 	bl	24002944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
240025c6:	2023      	movs	r0, #35	; 0x23
240025c8:	f000 f9fa 	bl	240029c0 <HAL_NVIC_EnableIRQ>
}
240025cc:	b03b      	add	sp, #236	; 0xec
240025ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
240025d0:	f7ff fcca 	bl	24001f68 <Error_Handler>
240025d4:	e776      	b.n	240024c4 <HAL_SPI_MspInit+0x3c>
      Error_Handler();
240025d6:	f7ff fcc7 	bl	24001f68 <Error_Handler>
240025da:	e7ed      	b.n	240025b8 <HAL_SPI_MspInit+0x130>
      Error_Handler();
240025dc:	f7ff fcc4 	bl	24001f68 <Error_Handler>
240025e0:	e7cb      	b.n	2400257a <HAL_SPI_MspInit+0xf2>
240025e2:	bf00      	nop
240025e4:	40013000 	.word	0x40013000
240025e8:	58024400 	.word	0x58024400
240025ec:	58020400 	.word	0x58020400
240025f0:	58021800 	.word	0x58021800
240025f4:	20011c4c 	.word	0x20011c4c
240025f8:	400200a0 	.word	0x400200a0
240025fc:	20011cc4 	.word	0x20011cc4
24002600:	400200b8 	.word	0x400200b8

24002604 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
24002604:	e7fe      	b.n	24002604 <Default_Handler>
24002606:	bf00      	nop

24002608 <Reset_Handler>:
	asm ("ldr sp, =_estack");
24002608:	f8df d060 	ldr.w	sp, [pc, #96]	; 2400266c <Reset_Handler+0x64>
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
2400260c:	480f      	ldr	r0, [pc, #60]	; (2400264c <Reset_Handler+0x44>)
2400260e:	4a10      	ldr	r2, [pc, #64]	; (24002650 <Reset_Handler+0x48>)
24002610:	4290      	cmp	r0, r2
24002612:	d003      	beq.n	2400261c <Reset_Handler+0x14>
		*pDest = *pSource;
24002614:	1a12      	subs	r2, r2, r0
24002616:	490f      	ldr	r1, [pc, #60]	; (24002654 <Reset_Handler+0x4c>)
24002618:	f010 fa86 	bl	24012b28 <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
2400261c:	480e      	ldr	r0, [pc, #56]	; (24002658 <Reset_Handler+0x50>)
2400261e:	4a0f      	ldr	r2, [pc, #60]	; (2400265c <Reset_Handler+0x54>)
24002620:	4290      	cmp	r0, r2
24002622:	d003      	beq.n	2400262c <Reset_Handler+0x24>
		*pDest = 0;
24002624:	1a12      	subs	r2, r2, r0
24002626:	2100      	movs	r1, #0
24002628:	f010 fa8c 	bl	24012b44 <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
2400262c:	480c      	ldr	r0, [pc, #48]	; (24002660 <Reset_Handler+0x58>)
2400262e:	4a0d      	ldr	r2, [pc, #52]	; (24002664 <Reset_Handler+0x5c>)
24002630:	4290      	cmp	r0, r2
24002632:	d003      	beq.n	2400263c <Reset_Handler+0x34>
		*pDest = *pSource;
24002634:	1a12      	subs	r2, r2, r0
24002636:	490c      	ldr	r1, [pc, #48]	; (24002668 <Reset_Handler+0x60>)
24002638:	f010 fa76 	bl	24012b28 <memcpy>
	SystemInit();
2400263c:	f000 f878 	bl	24002730 <SystemInit>
	__libc_init_array();
24002640:	f010 fa34 	bl	24012aac <__libc_init_array>
	(void)main();
24002644:	f7ff f8f8 	bl	24001838 <main>
	for (;;) ;
24002648:	e7fe      	b.n	24002648 <Reset_Handler+0x40>
2400264a:	bf00      	nop
2400264c:	20000000 	.word	0x20000000
24002650:	200000a4 	.word	0x200000a4
24002654:	24028c88 	.word	0x24028c88
24002658:	200000a8 	.word	0x200000a8
2400265c:	2001247c 	.word	0x2001247c
24002660:	00000400 	.word	0x00000400
24002664:	00004fd8 	.word	0x00004fd8
24002668:	24028d2c 	.word	0x24028d2c
2400266c:	20020000 	.word	0x20020000

24002670 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24002670:	4b07      	ldr	r3, [pc, #28]	; (24002690 <HAL_MspInit+0x20>)
{
24002672:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24002674:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24002678:	f042 0202 	orr.w	r2, r2, #2
2400267c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24002680:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24002684:	f003 0302 	and.w	r3, r3, #2
24002688:	9301      	str	r3, [sp, #4]
2400268a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2400268c:	b002      	add	sp, #8
2400268e:	4770      	bx	lr
24002690:	58024400 	.word	0x58024400

24002694 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
24002694:	e7fe      	b.n	24002694 <NMI_Handler>
24002696:	bf00      	nop

24002698 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24002698:	e7fe      	b.n	24002698 <HardFault_Handler>
2400269a:	bf00      	nop

2400269c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2400269c:	e7fe      	b.n	2400269c <MemManage_Handler>
2400269e:	bf00      	nop

240026a0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
240026a0:	e7fe      	b.n	240026a0 <BusFault_Handler>
240026a2:	bf00      	nop

240026a4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
240026a4:	e7fe      	b.n	240026a4 <UsageFault_Handler>
240026a6:	bf00      	nop

240026a8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
240026a8:	4770      	bx	lr
240026aa:	bf00      	nop

240026ac <DebugMon_Handler>:
240026ac:	4770      	bx	lr
240026ae:	bf00      	nop

240026b0 <PendSV_Handler>:
240026b0:	4770      	bx	lr
240026b2:	bf00      	nop

240026b4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
240026b4:	f000 b90a 	b.w	240028cc <HAL_IncTick>

240026b8 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
240026b8:	2008      	movs	r0, #8
240026ba:	f001 bef1 	b.w	240044a0 <HAL_GPIO_EXTI_IRQHandler>
240026be:	bf00      	nop

240026c0 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
240026c0:	4801      	ldr	r0, [pc, #4]	; (240026c8 <DMA1_Stream1_IRQHandler+0x8>)
240026c2:	f001 b9f5 	b.w	24003ab0 <HAL_DMA_IRQHandler>
240026c6:	bf00      	nop
240026c8:	200119b0 	.word	0x200119b0

240026cc <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
240026cc:	4801      	ldr	r0, [pc, #4]	; (240026d4 <DMA1_Stream2_IRQHandler+0x8>)
240026ce:	f001 b9ef 	b.w	24003ab0 <HAL_DMA_IRQHandler>
240026d2:	bf00      	nop
240026d4:	20011a28 	.word	0x20011a28

240026d8 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
240026d8:	4801      	ldr	r0, [pc, #4]	; (240026e0 <DMA1_Stream6_IRQHandler+0x8>)
240026da:	f001 b9e9 	b.w	24003ab0 <HAL_DMA_IRQHandler>
240026de:	bf00      	nop
240026e0:	20011c4c 	.word	0x20011c4c

240026e4 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
240026e4:	4801      	ldr	r0, [pc, #4]	; (240026ec <SPI1_IRQHandler+0x8>)
240026e6:	f006 bbed 	b.w	24008ec4 <HAL_SPI_IRQHandler>
240026ea:	bf00      	nop
240026ec:	20011d40 	.word	0x20011d40

240026f0 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
240026f0:	4801      	ldr	r0, [pc, #4]	; (240026f8 <DMA1_Stream7_IRQHandler+0x8>)
240026f2:	f001 b9dd 	b.w	24003ab0 <HAL_DMA_IRQHandler>
240026f6:	bf00      	nop
240026f8:	20011cc4 	.word	0x20011cc4

240026fc <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
240026fc:	4801      	ldr	r0, [pc, #4]	; (24002704 <SDMMC1_IRQHandler+0x8>)
240026fe:	f005 bf9b 	b.w	24008638 <HAL_SD_IRQHandler>
24002702:	bf00      	nop
24002704:	20011bd0 	.word	0x20011bd0

24002708 <SAI1_IRQHandler>:
void SAI1_IRQHandler(void)
{
  /* USER CODE BEGIN SAI1_IRQn 0 */

  /* USER CODE END SAI1_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA1);
24002708:	4804      	ldr	r0, [pc, #16]	; (2400271c <SAI1_IRQHandler+0x14>)
{
2400270a:	b508      	push	{r3, lr}
  HAL_SAI_IRQHandler(&hsai_BlockA1);
2400270c:	f004 ffee 	bl	240076ec <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB1);
24002710:	4803      	ldr	r0, [pc, #12]	; (24002720 <SAI1_IRQHandler+0x18>)
  /* USER CODE BEGIN SAI1_IRQn 1 */

  /* USER CODE END SAI1_IRQn 1 */
}
24002712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SAI_IRQHandler(&hsai_BlockB1);
24002716:	f004 bfe9 	b.w	240076ec <HAL_SAI_IRQHandler>
2400271a:	bf00      	nop
2400271c:	20011aa0 	.word	0x20011aa0
24002720:	20011b38 	.word	0x20011b38

24002724 <DMAMUX1_OVR_IRQHandler>:
{
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
24002724:	4801      	ldr	r0, [pc, #4]	; (2400272c <DMAMUX1_OVR_IRQHandler+0x8>)
24002726:	f001 bd4b 	b.w	240041c0 <HAL_DMAEx_MUX_IRQHandler>
2400272a:	bf00      	nop
2400272c:	200119b0 	.word	0x200119b0

24002730 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24002730:	4930      	ldr	r1, [pc, #192]	; (240027f4 <SystemInit+0xc4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24002732:	4a31      	ldr	r2, [pc, #196]	; (240027f8 <SystemInit+0xc8>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24002734:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
24002738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
2400273c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
2400273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
{
24002742:	b083      	sub	sp, #12
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24002744:	6813      	ldr	r3, [r2, #0]
24002746:	f003 030f 	and.w	r3, r3, #15
2400274a:	2b06      	cmp	r3, #6
2400274c:	d805      	bhi.n	2400275a <SystemInit+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
2400274e:	6813      	ldr	r3, [r2, #0]
24002750:	f023 030f 	bic.w	r3, r3, #15
24002754:	f043 0307 	orr.w	r3, r3, #7
24002758:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
2400275a:	4b28      	ldr	r3, [pc, #160]	; (240027fc <SystemInit+0xcc>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
2400275c:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
2400275e:	4a28      	ldr	r2, [pc, #160]	; (24002800 <SystemInit+0xd0>)
  RCC->CR |= RCC_CR_HSION;
24002760:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24002762:	4825      	ldr	r0, [pc, #148]	; (240027f8 <SystemInit+0xc8>)
  RCC->CR |= RCC_CR_HSION;
24002764:	f041 0101 	orr.w	r1, r1, #1
24002768:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
2400276a:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
2400276c:	6819      	ldr	r1, [r3, #0]
2400276e:	400a      	ands	r2, r1
24002770:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24002772:	6803      	ldr	r3, [r0, #0]
24002774:	071b      	lsls	r3, r3, #28
24002776:	d505      	bpl.n	24002784 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24002778:	6803      	ldr	r3, [r0, #0]
2400277a:	f023 030f 	bic.w	r3, r3, #15
2400277e:	f043 0307 	orr.w	r3, r3, #7
24002782:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24002784:	4b1d      	ldr	r3, [pc, #116]	; (240027fc <SystemInit+0xcc>)
24002786:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24002788:	491e      	ldr	r1, [pc, #120]	; (24002804 <SystemInit+0xd4>)
  RCC->PLLCKSELR = 0x02020200;
2400278a:	4c1f      	ldr	r4, [pc, #124]	; (24002808 <SystemInit+0xd8>)
  RCC->PLLCFGR = 0x01FF0000;
2400278c:	481f      	ldr	r0, [pc, #124]	; (2400280c <SystemInit+0xdc>)
  RCC->D1CFGR = 0x00000000;
2400278e:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
24002790:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
24002792:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
24002794:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
24002796:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
24002798:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
2400279a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
2400279c:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
2400279e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
240027a0:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
240027a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
240027a4:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
240027a6:	4c1a      	ldr	r4, [pc, #104]	; (24002810 <SystemInit+0xe0>)
  RCC->CR &= 0xFFFBFFFFU;
240027a8:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
240027ac:	4919      	ldr	r1, [pc, #100]	; (24002814 <SystemInit+0xe4>)
  RCC->CR &= 0xFFFBFFFFU;
240027ae:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
240027b0:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
240027b2:	6823      	ldr	r3, [r4, #0]
240027b4:	4019      	ands	r1, r3
240027b6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
240027ba:	d203      	bcs.n	240027c4 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
240027bc:	4b16      	ldr	r3, [pc, #88]	; (24002818 <SystemInit+0xe8>)
240027be:	2201      	movs	r2, #1
240027c0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
240027c4:	4b0d      	ldr	r3, [pc, #52]	; (240027fc <SystemInit+0xcc>)
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
240027c6:	f243 04d2 	movw	r4, #12498	; 0x30d2
240027ca:	4814      	ldr	r0, [pc, #80]	; (2400281c <SystemInit+0xec>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
240027cc:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
240027d0:	4908      	ldr	r1, [pc, #32]	; (240027f4 <SystemInit+0xc4>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
240027d2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
240027d6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  tmpreg = RCC->AHB2ENR;
240027da:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
240027de:	9301      	str	r3, [sp, #4]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
240027e0:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  (void) tmpreg;
240027e4:	9a01      	ldr	r2, [sp, #4]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
240027e6:	6004      	str	r4, [r0, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
240027e8:	608b      	str	r3, [r1, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
240027ea:	b003      	add	sp, #12
240027ec:	f85d 4b04 	ldr.w	r4, [sp], #4
240027f0:	4770      	bx	lr
240027f2:	bf00      	nop
240027f4:	e000ed00 	.word	0xe000ed00
240027f8:	52002000 	.word	0x52002000
240027fc:	58024400 	.word	0x58024400
24002800:	eaf6ed7f 	.word	0xeaf6ed7f
24002804:	01010280 	.word	0x01010280
24002808:	02020200 	.word	0x02020200
2400280c:	01ff0000 	.word	0x01ff0000
24002810:	5c001000 	.word	0x5c001000
24002814:	ffff0000 	.word	0xffff0000
24002818:	51008000 	.word	0x51008000
2400281c:	52004000 	.word	0x52004000

24002820 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24002820:	4b0f      	ldr	r3, [pc, #60]	; (24002860 <HAL_InitTick+0x40>)
24002822:	781b      	ldrb	r3, [r3, #0]
24002824:	b90b      	cbnz	r3, 2400282a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
24002826:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
24002828:	4770      	bx	lr
{
2400282a:	b510      	push	{r4, lr}
2400282c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
2400282e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
24002832:	4a0c      	ldr	r2, [pc, #48]	; (24002864 <HAL_InitTick+0x44>)
24002834:	fbb0 f3f3 	udiv	r3, r0, r3
24002838:	6810      	ldr	r0, [r2, #0]
2400283a:	fbb0 f0f3 	udiv	r0, r0, r3
2400283e:	f000 f8df 	bl	24002a00 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24002842:	2c0f      	cmp	r4, #15
24002844:	d800      	bhi.n	24002848 <HAL_InitTick+0x28>
24002846:	b108      	cbz	r0, 2400284c <HAL_InitTick+0x2c>
    return HAL_ERROR;
24002848:	2001      	movs	r0, #1
}
2400284a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
2400284c:	2200      	movs	r2, #0
2400284e:	4621      	mov	r1, r4
24002850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24002854:	f000 f876 	bl	24002944 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24002858:	4b03      	ldr	r3, [pc, #12]	; (24002868 <HAL_InitTick+0x48>)
2400285a:	2000      	movs	r0, #0
2400285c:	601c      	str	r4, [r3, #0]
}
2400285e:	bd10      	pop	{r4, pc}
24002860:	20000034 	.word	0x20000034
24002864:	2000002c 	.word	0x2000002c
24002868:	20000038 	.word	0x20000038

2400286c <HAL_Init>:
{
2400286c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2400286e:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24002870:	4c12      	ldr	r4, [pc, #72]	; (240028bc <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24002872:	f000 f855 	bl	24002920 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24002876:	f002 fd19 	bl	240052ac <HAL_RCC_GetSysClockFreq>
2400287a:	4b11      	ldr	r3, [pc, #68]	; (240028c0 <HAL_Init+0x54>)
2400287c:	4911      	ldr	r1, [pc, #68]	; (240028c4 <HAL_Init+0x58>)
2400287e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24002880:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24002882:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24002886:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400288a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400288c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400288e:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
24002892:	490d      	ldr	r1, [pc, #52]	; (240028c8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24002894:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24002898:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400289a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
2400289e:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
240028a0:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240028a2:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
240028a4:	f7ff ffbc 	bl	24002820 <HAL_InitTick>
240028a8:	b110      	cbz	r0, 240028b0 <HAL_Init+0x44>
    return HAL_ERROR;
240028aa:	2401      	movs	r4, #1
}
240028ac:	4620      	mov	r0, r4
240028ae:	bd10      	pop	{r4, pc}
240028b0:	4604      	mov	r4, r0
  HAL_MspInit();
240028b2:	f7ff fedd 	bl	24002670 <HAL_MspInit>
}
240028b6:	4620      	mov	r0, r4
240028b8:	bd10      	pop	{r4, pc}
240028ba:	bf00      	nop
240028bc:	20000030 	.word	0x20000030
240028c0:	58024400 	.word	0x58024400
240028c4:	24014108 	.word	0x24014108
240028c8:	2000002c 	.word	0x2000002c

240028cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
240028cc:	4a03      	ldr	r2, [pc, #12]	; (240028dc <HAL_IncTick+0x10>)
240028ce:	4b04      	ldr	r3, [pc, #16]	; (240028e0 <HAL_IncTick+0x14>)
240028d0:	6811      	ldr	r1, [r2, #0]
240028d2:	781b      	ldrb	r3, [r3, #0]
240028d4:	440b      	add	r3, r1
240028d6:	6013      	str	r3, [r2, #0]
}
240028d8:	4770      	bx	lr
240028da:	bf00      	nop
240028dc:	20011ddc 	.word	0x20011ddc
240028e0:	20000034 	.word	0x20000034

240028e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
240028e4:	4b01      	ldr	r3, [pc, #4]	; (240028ec <HAL_GetTick+0x8>)
240028e6:	6818      	ldr	r0, [r3, #0]
}
240028e8:	4770      	bx	lr
240028ea:	bf00      	nop
240028ec:	20011ddc 	.word	0x20011ddc

240028f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
240028f0:	b538      	push	{r3, r4, r5, lr}
240028f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
240028f4:	f7ff fff6 	bl	240028e4 <HAL_GetTick>
240028f8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
240028fa:	1c63      	adds	r3, r4, #1
240028fc:	d002      	beq.n	24002904 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
240028fe:	4b04      	ldr	r3, [pc, #16]	; (24002910 <HAL_Delay+0x20>)
24002900:	781b      	ldrb	r3, [r3, #0]
24002902:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
24002904:	f7ff ffee 	bl	240028e4 <HAL_GetTick>
24002908:	1b43      	subs	r3, r0, r5
2400290a:	42a3      	cmp	r3, r4
2400290c:	d3fa      	bcc.n	24002904 <HAL_Delay+0x14>
  {
  }
}
2400290e:	bd38      	pop	{r3, r4, r5, pc}
24002910:	20000034 	.word	0x20000034

24002914 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
24002914:	4b01      	ldr	r3, [pc, #4]	; (2400291c <HAL_GetREVID+0x8>)
24002916:	6818      	ldr	r0, [r3, #0]
}
24002918:	0c00      	lsrs	r0, r0, #16
2400291a:	4770      	bx	lr
2400291c:	5c001000 	.word	0x5c001000

24002920 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24002920:	4906      	ldr	r1, [pc, #24]	; (2400293c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24002922:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24002926:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
24002928:	4b05      	ldr	r3, [pc, #20]	; (24002940 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
2400292a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
2400292c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24002930:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24002934:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
24002936:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
24002938:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
2400293a:	4770      	bx	lr
2400293c:	e000ed00 	.word	0xe000ed00
24002940:	05fa0000 	.word	0x05fa0000

24002944 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24002944:	4b1b      	ldr	r3, [pc, #108]	; (240029b4 <HAL_NVIC_SetPriority+0x70>)
24002946:	68db      	ldr	r3, [r3, #12]
24002948:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
2400294c:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2400294e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24002952:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24002956:	f1be 0f04 	cmp.w	lr, #4
2400295a:	bf28      	it	cs
2400295c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24002960:	f1bc 0f06 	cmp.w	ip, #6
24002964:	d91a      	bls.n	2400299c <HAL_NVIC_SetPriority+0x58>
24002966:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24002968:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
2400296c:	fa0c fc03 	lsl.w	ip, ip, r3
24002970:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24002974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
24002978:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2400297a:	fa0c fc0e 	lsl.w	ip, ip, lr
2400297e:	ea21 010c 	bic.w	r1, r1, ip
24002982:	fa01 f103 	lsl.w	r1, r1, r3
24002986:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
2400298a:	db0a      	blt.n	240029a2 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2400298c:	0109      	lsls	r1, r1, #4
2400298e:	4b0a      	ldr	r3, [pc, #40]	; (240029b8 <HAL_NVIC_SetPriority+0x74>)
24002990:	b2c9      	uxtb	r1, r1
24002992:	4403      	add	r3, r0
24002994:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
24002998:	f85d fb04 	ldr.w	pc, [sp], #4
2400299c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2400299e:	4613      	mov	r3, r2
240029a0:	e7e8      	b.n	24002974 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
240029a2:	f000 000f 	and.w	r0, r0, #15
240029a6:	0109      	lsls	r1, r1, #4
240029a8:	4b04      	ldr	r3, [pc, #16]	; (240029bc <HAL_NVIC_SetPriority+0x78>)
240029aa:	b2c9      	uxtb	r1, r1
240029ac:	4403      	add	r3, r0
240029ae:	7619      	strb	r1, [r3, #24]
240029b0:	f85d fb04 	ldr.w	pc, [sp], #4
240029b4:	e000ed00 	.word	0xe000ed00
240029b8:	e000e100 	.word	0xe000e100
240029bc:	e000ecfc 	.word	0xe000ecfc

240029c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
240029c0:	2800      	cmp	r0, #0
240029c2:	db07      	blt.n	240029d4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
240029c4:	2301      	movs	r3, #1
240029c6:	f000 011f 	and.w	r1, r0, #31
240029ca:	4a03      	ldr	r2, [pc, #12]	; (240029d8 <HAL_NVIC_EnableIRQ+0x18>)
240029cc:	0940      	lsrs	r0, r0, #5
240029ce:	408b      	lsls	r3, r1
240029d0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
240029d4:	4770      	bx	lr
240029d6:	bf00      	nop
240029d8:	e000e100 	.word	0xe000e100

240029dc <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
240029dc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
240029e0:	4905      	ldr	r1, [pc, #20]	; (240029f8 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
240029e2:	4b06      	ldr	r3, [pc, #24]	; (240029fc <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
240029e4:	68ca      	ldr	r2, [r1, #12]
240029e6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
240029ea:	4313      	orrs	r3, r2
240029ec:	60cb      	str	r3, [r1, #12]
240029ee:	f3bf 8f4f 	dsb	sy
    __NOP();
240029f2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
240029f4:	e7fd      	b.n	240029f2 <HAL_NVIC_SystemReset+0x16>
240029f6:	bf00      	nop
240029f8:	e000ed00 	.word	0xe000ed00
240029fc:	05fa0004 	.word	0x05fa0004

24002a00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24002a00:	1e43      	subs	r3, r0, #1
24002a02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24002a06:	d20c      	bcs.n	24002a22 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24002a08:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24002a0c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24002a0e:	4906      	ldr	r1, [pc, #24]	; (24002a28 <HAL_SYSTICK_Config+0x28>)
24002a10:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24002a14:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24002a16:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24002a18:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24002a1c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24002a1e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24002a20:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
24002a22:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
24002a24:	4770      	bx	lr
24002a26:	bf00      	nop
24002a28:	e000ed00 	.word	0xe000ed00

24002a2c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
24002a2c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24002a30:	4b04      	ldr	r3, [pc, #16]	; (24002a44 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
24002a32:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24002a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24002a36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24002a3a:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
24002a3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
24002a40:	4770      	bx	lr
24002a42:	bf00      	nop
24002a44:	e000ed00 	.word	0xe000ed00

24002a48 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24002a48:	4b06      	ldr	r3, [pc, #24]	; (24002a64 <HAL_MPU_Enable+0x1c>)
24002a4a:	f040 0001 	orr.w	r0, r0, #1
24002a4e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
24002a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24002a54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24002a58:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24002a5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24002a5e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
24002a62:	4770      	bx	lr
24002a64:	e000ed00 	.word	0xe000ed00

24002a68 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24002a68:	4a17      	ldr	r2, [pc, #92]	; (24002ac8 <HAL_MPU_ConfigRegion+0x60>)
24002a6a:	7843      	ldrb	r3, [r0, #1]
24002a6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
24002a70:	7801      	ldrb	r1, [r0, #0]
24002a72:	b321      	cbz	r1, 24002abe <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
24002a74:	6843      	ldr	r3, [r0, #4]
{
24002a76:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
24002a78:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24002a7c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002a7e:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24002a82:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24002a84:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002a88:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24002a8c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24002a90:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24002a92:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24002a94:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24002a98:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24002a9c:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24002aa0:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24002aa4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
24002aa8:	7a01      	ldrb	r1, [r0, #8]
24002aaa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
24002aae:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
24002ab2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002ab6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
24002aba:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
24002abe:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
24002ac2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
24002ac6:	4770      	bx	lr
24002ac8:	e000ed00 	.word	0xe000ed00

24002acc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
24002acc:	b188      	cbz	r0, 24002af2 <HAL_DAC_Init+0x26>
{
24002ace:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
24002ad0:	7903      	ldrb	r3, [r0, #4]
24002ad2:	4604      	mov	r4, r0
24002ad4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24002ad8:	b13b      	cbz	r3, 24002aea <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
24002ada:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
24002adc:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
24002ade:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
24002ae0:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
24002ae2:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
24002ae4:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
24002ae6:	7122      	strb	r2, [r4, #4]
}
24002ae8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
24002aea:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
24002aec:	f7fd fff4 	bl	24000ad8 <HAL_DAC_MspInit>
24002af0:	e7f3      	b.n	24002ada <HAL_DAC_Init+0xe>
    return HAL_ERROR;
24002af2:	2001      	movs	r0, #1
}
24002af4:	4770      	bx	lr
24002af6:	bf00      	nop

24002af8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
24002af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
24002afc:	7943      	ldrb	r3, [r0, #5]
{
24002afe:	460e      	mov	r6, r1
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
24002b00:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
24002b02:	2b01      	cmp	r3, #1
24002b04:	f000 8098 	beq.w	24002c38 <HAL_DAC_ConfigChannel+0x140>
24002b08:	2301      	movs	r3, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
24002b0a:	2904      	cmp	r1, #4
24002b0c:	4605      	mov	r5, r0
24002b0e:	4614      	mov	r4, r2
  __HAL_LOCK(hdac);
24002b10:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
24002b12:	f04f 0302 	mov.w	r3, #2
24002b16:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
24002b18:	d045      	beq.n	24002ba6 <HAL_DAC_ConfigChannel+0xae>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
24002b1a:	f002 0210 	and.w	r2, r2, #16

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
24002b1e:	6800      	ldr	r0, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
24002b20:	6933      	ldr	r3, [r6, #16]
24002b22:	2b01      	cmp	r3, #1
24002b24:	d108      	bne.n	24002b38 <HAL_DAC_ConfigChannel+0x40>
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
24002b26:	241f      	movs	r4, #31
    tmpreg1 = hdac->Instance->CCR;
24002b28:	6b83      	ldr	r3, [r0, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
24002b2a:	4094      	lsls	r4, r2
24002b2c:	ea23 0404 	bic.w	r4, r3, r4
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24002b30:	6973      	ldr	r3, [r6, #20]
24002b32:	4093      	lsls	r3, r2
24002b34:	4323      	orrs	r3, r4
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
24002b36:	6383      	str	r3, [r0, #56]	; 0x38
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
24002b38:	2407      	movs	r4, #7
24002b3a:	fa04 f302 	lsl.w	r3, r4, r2
  tmpreg1 = hdac->Instance->MCR;
24002b3e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
24002b40:	ea24 0403 	bic.w	r4, r4, r3
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
24002b44:	e9d6 7302 	ldrd	r7, r3, [r6, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
24002b48:	2b01      	cmp	r3, #1
24002b4a:	d028      	beq.n	24002b9e <HAL_DAC_ConfigChannel+0xa6>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
24002b4c:	2b02      	cmp	r3, #2
24002b4e:	d028      	beq.n	24002ba2 <HAL_DAC_ConfigChannel+0xaa>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
24002b50:	fab7 f387 	clz	r3, r7
24002b54:	095b      	lsrs	r3, r3, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
24002b56:	433b      	orrs	r3, r7
24002b58:	430b      	orrs	r3, r1
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24002b5a:	6871      	ldr	r1, [r6, #4]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24002b5c:	4093      	lsls	r3, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24002b5e:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24002b60:	4323      	orrs	r3, r4
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
24002b62:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
24002b66:	63c3      	str	r3, [r0, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
24002b68:	4094      	lsls	r4, r2
24002b6a:	6803      	ldr	r3, [r0, #0]
24002b6c:	ea23 0304 	bic.w	r3, r3, r4
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
24002b70:	f640 74fe 	movw	r4, #4094	; 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
24002b74:	6003      	str	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
24002b76:	4094      	lsls	r4, r2
  tmpreg1 = hdac->Instance->CR;
24002b78:	6803      	ldr	r3, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
24002b7a:	ea23 0304 	bic.w	r3, r3, r4
  hdac->Instance->CR = tmpreg1;
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
24002b7e:	2401      	movs	r4, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
24002b80:	430b      	orrs	r3, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
24002b82:	21c0      	movs	r1, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
24002b84:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
24002b86:	fa01 f302 	lsl.w	r3, r1, r2
24002b8a:	6802      	ldr	r2, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
24002b8c:	2100      	movs	r1, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
24002b8e:	ea22 0203 	bic.w	r2, r2, r3
24002b92:	6002      	str	r2, [r0, #0]

  /* Return function status */
  return HAL_OK;
24002b94:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
24002b96:	712c      	strb	r4, [r5, #4]
  __HAL_UNLOCK(hdac);
24002b98:	7169      	strb	r1, [r5, #5]
}
24002b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
24002b9e:	2300      	movs	r3, #0
24002ba0:	e7d9      	b.n	24002b56 <HAL_DAC_ConfigChannel+0x5e>
    connectOnChip = DAC_MCR_MODE1_0;
24002ba2:	2301      	movs	r3, #1
24002ba4:	e7d7      	b.n	24002b56 <HAL_DAC_ConfigChannel+0x5e>
    tickstart = HAL_GetTick();
24002ba6:	f7ff fe9d 	bl	240028e4 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
24002baa:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
24002bac:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
24002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (Channel == DAC_CHANNEL_1)
24002bb0:	bb1c      	cbnz	r4, 24002bfa <HAL_DAC_ConfigChannel+0x102>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
24002bb2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 24002c50 <HAL_DAC_ConfigChannel+0x158>
24002bb6:	ea13 0f08 	tst.w	r3, r8
24002bba:	d00d      	beq.n	24002bd8 <HAL_DAC_ConfigChannel+0xe0>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
24002bbc:	f7ff fe92 	bl	240028e4 <HAL_GetTick>
24002bc0:	1bc3      	subs	r3, r0, r7
24002bc2:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
24002bc4:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
24002bc6:	d903      	bls.n	24002bd0 <HAL_DAC_ConfigChannel+0xd8>
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
24002bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24002bca:	ea12 0f08 	tst.w	r2, r8
24002bce:	d136      	bne.n	24002c3e <HAL_DAC_ConfigChannel+0x146>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
24002bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24002bd2:	ea13 0f08 	tst.w	r3, r8
24002bd6:	d1f1      	bne.n	24002bbc <HAL_DAC_ConfigChannel+0xc4>
      HAL_Delay(1);
24002bd8:	2001      	movs	r0, #1
24002bda:	f7ff fe89 	bl	240028f0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
24002bde:	6828      	ldr	r0, [r5, #0]
24002be0:	69b3      	ldr	r3, [r6, #24]
24002be2:	6403      	str	r3, [r0, #64]	; 0x40
24002be4:	e011      	b.n	24002c0a <HAL_DAC_ConfigChannel+0x112>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
24002be6:	f7ff fe7d 	bl	240028e4 <HAL_GetTick>
24002bea:	1bc3      	subs	r3, r0, r7
24002bec:	2b01      	cmp	r3, #1
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
24002bee:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
24002bf0:	d902      	bls.n	24002bf8 <HAL_DAC_ConfigChannel+0x100>
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
24002bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24002bf4:	2a00      	cmp	r2, #0
24002bf6:	db22      	blt.n	24002c3e <HAL_DAC_ConfigChannel+0x146>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
24002bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24002bfa:	2b00      	cmp	r3, #0
24002bfc:	dbf3      	blt.n	24002be6 <HAL_DAC_ConfigChannel+0xee>
      HAL_Delay(1U);
24002bfe:	2001      	movs	r0, #1
24002c00:	f7ff fe76 	bl	240028f0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
24002c04:	6828      	ldr	r0, [r5, #0]
24002c06:	69b3      	ldr	r3, [r6, #24]
24002c08:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
24002c0a:	f004 0210 	and.w	r2, r4, #16
24002c0e:	f240 31ff 	movw	r1, #1023	; 0x3ff
24002c12:	6c83      	ldr	r3, [r0, #72]	; 0x48
24002c14:	4091      	lsls	r1, r2
24002c16:	ea23 0301 	bic.w	r3, r3, r1
24002c1a:	69f1      	ldr	r1, [r6, #28]
24002c1c:	4091      	lsls	r1, r2
24002c1e:	430b      	orrs	r3, r1
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
24002c20:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
24002c22:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
24002c24:	4091      	lsls	r1, r2
24002c26:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
24002c28:	ea23 0301 	bic.w	r3, r3, r1
24002c2c:	6a31      	ldr	r1, [r6, #32]
24002c2e:	4091      	lsls	r1, r2
24002c30:	430b      	orrs	r3, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
24002c32:	6831      	ldr	r1, [r6, #0]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
24002c34:	64c3      	str	r3, [r0, #76]	; 0x4c
24002c36:	e773      	b.n	24002b20 <HAL_DAC_ConfigChannel+0x28>
  __HAL_LOCK(hdac);
24002c38:	2002      	movs	r0, #2
}
24002c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
24002c3e:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
24002c40:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
24002c42:	f043 0308 	orr.w	r3, r3, #8
            return HAL_TIMEOUT;
24002c46:	4610      	mov	r0, r2
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
24002c48:	612b      	str	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
24002c4a:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
24002c4c:	e7a5      	b.n	24002b9a <HAL_DAC_ConfigChannel+0xa2>
24002c4e:	bf00      	nop
24002c50:	20008000 	.word	0x20008000

24002c54 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24002c54:	6802      	ldr	r2, [r0, #0]
24002c56:	4b34      	ldr	r3, [pc, #208]	; (24002d28 <DMA_CalcBaseAndBitshift+0xd4>)
24002c58:	4934      	ldr	r1, [pc, #208]	; (24002d2c <DMA_CalcBaseAndBitshift+0xd8>)
{
24002c5a:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24002c5c:	4d34      	ldr	r5, [pc, #208]	; (24002d30 <DMA_CalcBaseAndBitshift+0xdc>)
24002c5e:	4c35      	ldr	r4, [pc, #212]	; (24002d34 <DMA_CalcBaseAndBitshift+0xe0>)
24002c60:	42aa      	cmp	r2, r5
24002c62:	bf18      	it	ne
24002c64:	429a      	cmpne	r2, r3
24002c66:	bf0c      	ite	eq
24002c68:	2301      	moveq	r3, #1
24002c6a:	2300      	movne	r3, #0
24002c6c:	428a      	cmp	r2, r1
24002c6e:	bf08      	it	eq
24002c70:	f043 0301 	orreq.w	r3, r3, #1
24002c74:	3130      	adds	r1, #48	; 0x30
24002c76:	42a2      	cmp	r2, r4
24002c78:	bf08      	it	eq
24002c7a:	f043 0301 	orreq.w	r3, r3, #1
24002c7e:	3430      	adds	r4, #48	; 0x30
24002c80:	428a      	cmp	r2, r1
24002c82:	bf08      	it	eq
24002c84:	f043 0301 	orreq.w	r3, r3, #1
24002c88:	3130      	adds	r1, #48	; 0x30
24002c8a:	42a2      	cmp	r2, r4
24002c8c:	bf08      	it	eq
24002c8e:	f043 0301 	orreq.w	r3, r3, #1
24002c92:	3430      	adds	r4, #48	; 0x30
24002c94:	428a      	cmp	r2, r1
24002c96:	bf08      	it	eq
24002c98:	f043 0301 	orreq.w	r3, r3, #1
24002c9c:	f501 715c 	add.w	r1, r1, #880	; 0x370
24002ca0:	42a2      	cmp	r2, r4
24002ca2:	bf08      	it	eq
24002ca4:	f043 0301 	orreq.w	r3, r3, #1
24002ca8:	f504 745c 	add.w	r4, r4, #880	; 0x370
24002cac:	428a      	cmp	r2, r1
24002cae:	bf08      	it	eq
24002cb0:	f043 0301 	orreq.w	r3, r3, #1
24002cb4:	3130      	adds	r1, #48	; 0x30
24002cb6:	42a2      	cmp	r2, r4
24002cb8:	bf08      	it	eq
24002cba:	f043 0301 	orreq.w	r3, r3, #1
24002cbe:	3430      	adds	r4, #48	; 0x30
24002cc0:	428a      	cmp	r2, r1
24002cc2:	bf08      	it	eq
24002cc4:	f043 0301 	orreq.w	r3, r3, #1
24002cc8:	3130      	adds	r1, #48	; 0x30
24002cca:	42a2      	cmp	r2, r4
24002ccc:	bf08      	it	eq
24002cce:	f043 0301 	orreq.w	r3, r3, #1
24002cd2:	3430      	adds	r4, #48	; 0x30
24002cd4:	428a      	cmp	r2, r1
24002cd6:	bf08      	it	eq
24002cd8:	f043 0301 	orreq.w	r3, r3, #1
24002cdc:	3130      	adds	r1, #48	; 0x30
24002cde:	42a2      	cmp	r2, r4
24002ce0:	bf08      	it	eq
24002ce2:	f043 0301 	orreq.w	r3, r3, #1
24002ce6:	428a      	cmp	r2, r1
24002ce8:	bf08      	it	eq
24002cea:	f043 0301 	orreq.w	r3, r3, #1
24002cee:	b913      	cbnz	r3, 24002cf6 <DMA_CalcBaseAndBitshift+0xa2>
24002cf0:	4b11      	ldr	r3, [pc, #68]	; (24002d38 <DMA_CalcBaseAndBitshift+0xe4>)
24002cf2:	429a      	cmp	r2, r3
24002cf4:	d113      	bne.n	24002d1e <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24002cf6:	b2d3      	uxtb	r3, r2
24002cf8:	4910      	ldr	r1, [pc, #64]	; (24002d3c <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24002cfa:	4c11      	ldr	r4, [pc, #68]	; (24002d40 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24002cfc:	3b10      	subs	r3, #16
24002cfe:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
24002d02:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24002d04:	4b0f      	ldr	r3, [pc, #60]	; (24002d44 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24002d06:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24002d0a:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24002d0e:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24002d10:	bf88      	it	hi
24002d12:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24002d14:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24002d16:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
24002d18:	4618      	mov	r0, r3
24002d1a:	bc30      	pop	{r4, r5}
24002d1c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
24002d1e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
24002d22:	6583      	str	r3, [r0, #88]	; 0x58
24002d24:	e7f8      	b.n	24002d18 <DMA_CalcBaseAndBitshift+0xc4>
24002d26:	bf00      	nop
24002d28:	40020010 	.word	0x40020010
24002d2c:	40020040 	.word	0x40020040
24002d30:	40020028 	.word	0x40020028
24002d34:	40020058 	.word	0x40020058
24002d38:	400204b8 	.word	0x400204b8
24002d3c:	aaaaaaab 	.word	0xaaaaaaab
24002d40:	24014118 	.word	0x24014118
24002d44:	fffffc00 	.word	0xfffffc00

24002d48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
24002d48:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24002d4a:	4a29      	ldr	r2, [pc, #164]	; (24002df0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
24002d4c:	4929      	ldr	r1, [pc, #164]	; (24002df4 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
24002d4e:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24002d50:	4d29      	ldr	r5, [pc, #164]	; (24002df8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
24002d52:	4c2a      	ldr	r4, [pc, #168]	; (24002dfc <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
24002d54:	42ab      	cmp	r3, r5
24002d56:	bf18      	it	ne
24002d58:	4293      	cmpne	r3, r2
24002d5a:	bf0c      	ite	eq
24002d5c:	2201      	moveq	r2, #1
24002d5e:	2200      	movne	r2, #0
24002d60:	428b      	cmp	r3, r1
24002d62:	bf08      	it	eq
24002d64:	f042 0201 	orreq.w	r2, r2, #1
24002d68:	3128      	adds	r1, #40	; 0x28
24002d6a:	42a3      	cmp	r3, r4
24002d6c:	bf08      	it	eq
24002d6e:	f042 0201 	orreq.w	r2, r2, #1
24002d72:	3428      	adds	r4, #40	; 0x28
24002d74:	428b      	cmp	r3, r1
24002d76:	bf08      	it	eq
24002d78:	f042 0201 	orreq.w	r2, r2, #1
24002d7c:	3128      	adds	r1, #40	; 0x28
24002d7e:	42a3      	cmp	r3, r4
24002d80:	bf08      	it	eq
24002d82:	f042 0201 	orreq.w	r2, r2, #1
24002d86:	428b      	cmp	r3, r1
24002d88:	bf08      	it	eq
24002d8a:	f042 0201 	orreq.w	r2, r2, #1
24002d8e:	b912      	cbnz	r2, 24002d96 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
24002d90:	4a1b      	ldr	r2, [pc, #108]	; (24002e00 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
24002d92:	4293      	cmp	r3, r2
24002d94:	d113      	bne.n	24002dbe <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24002d96:	b2db      	uxtb	r3, r3
24002d98:	4c1a      	ldr	r4, [pc, #104]	; (24002e04 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24002d9a:	4a1b      	ldr	r2, [pc, #108]	; (24002e08 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24002d9c:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24002d9e:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24002da0:	4d1a      	ldr	r5, [pc, #104]	; (24002e0c <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24002da2:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24002da6:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24002da8:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24002dac:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24002db0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24002db2:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24002db6:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24002db8:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24002dba:	bc30      	pop	{r4, r5}
24002dbc:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24002dbe:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24002dc0:	4913      	ldr	r1, [pc, #76]	; (24002e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24002dc2:	4c14      	ldr	r4, [pc, #80]	; (24002e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24002dc4:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24002dc6:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24002dc8:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24002dca:	fba4 2302 	umull	r2, r3, r4, r2
24002dce:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24002dd2:	d800      	bhi.n	24002dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
24002dd4:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24002dd6:	4a10      	ldr	r2, [pc, #64]	; (24002e18 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24002dd8:	f003 051f 	and.w	r5, r3, #31
24002ddc:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24002dde:	4c0f      	ldr	r4, [pc, #60]	; (24002e1c <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24002de0:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24002de2:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
24002de4:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24002de6:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24002de8:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24002dea:	6602      	str	r2, [r0, #96]	; 0x60
}
24002dec:	e7e5      	b.n	24002dba <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
24002dee:	bf00      	nop
24002df0:	58025408 	.word	0x58025408
24002df4:	58025430 	.word	0x58025430
24002df8:	5802541c 	.word	0x5802541c
24002dfc:	58025444 	.word	0x58025444
24002e00:	58025494 	.word	0x58025494
24002e04:	cccccccd 	.word	0xcccccccd
24002e08:	16009600 	.word	0x16009600
24002e0c:	58025880 	.word	0x58025880
24002e10:	bffdfbf0 	.word	0xbffdfbf0
24002e14:	aaaaaaab 	.word	0xaaaaaaab
24002e18:	10008200 	.word	0x10008200
24002e1c:	40020880 	.word	0x40020880

24002e20 <HAL_DMA_Init>:
{
24002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24002e22:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24002e24:	f7ff fd5e 	bl	240028e4 <HAL_GetTick>
  if(hdma == NULL)
24002e28:	2c00      	cmp	r4, #0
24002e2a:	f000 8177 	beq.w	2400311c <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24002e2e:	6823      	ldr	r3, [r4, #0]
24002e30:	4605      	mov	r5, r0
24002e32:	4a92      	ldr	r2, [pc, #584]	; (2400307c <HAL_DMA_Init+0x25c>)
24002e34:	4293      	cmp	r3, r2
24002e36:	d048      	beq.n	24002eca <HAL_DMA_Init+0xaa>
24002e38:	3218      	adds	r2, #24
24002e3a:	4293      	cmp	r3, r2
24002e3c:	d045      	beq.n	24002eca <HAL_DMA_Init+0xaa>
24002e3e:	3230      	adds	r2, #48	; 0x30
24002e40:	498f      	ldr	r1, [pc, #572]	; (24003080 <HAL_DMA_Init+0x260>)
24002e42:	428b      	cmp	r3, r1
24002e44:	bf18      	it	ne
24002e46:	4293      	cmpne	r3, r2
24002e48:	f101 0130 	add.w	r1, r1, #48	; 0x30
24002e4c:	bf0c      	ite	eq
24002e4e:	2201      	moveq	r2, #1
24002e50:	2200      	movne	r2, #0
24002e52:	428b      	cmp	r3, r1
24002e54:	bf08      	it	eq
24002e56:	f042 0201 	orreq.w	r2, r2, #1
24002e5a:	3118      	adds	r1, #24
24002e5c:	428b      	cmp	r3, r1
24002e5e:	bf08      	it	eq
24002e60:	f042 0201 	orreq.w	r2, r2, #1
24002e64:	3118      	adds	r1, #24
24002e66:	428b      	cmp	r3, r1
24002e68:	bf08      	it	eq
24002e6a:	f042 0201 	orreq.w	r2, r2, #1
24002e6e:	3118      	adds	r1, #24
24002e70:	428b      	cmp	r3, r1
24002e72:	bf08      	it	eq
24002e74:	f042 0201 	orreq.w	r2, r2, #1
24002e78:	f501 7156 	add.w	r1, r1, #856	; 0x358
24002e7c:	428b      	cmp	r3, r1
24002e7e:	bf08      	it	eq
24002e80:	f042 0201 	orreq.w	r2, r2, #1
24002e84:	3118      	adds	r1, #24
24002e86:	428b      	cmp	r3, r1
24002e88:	bf08      	it	eq
24002e8a:	f042 0201 	orreq.w	r2, r2, #1
24002e8e:	3118      	adds	r1, #24
24002e90:	428b      	cmp	r3, r1
24002e92:	bf08      	it	eq
24002e94:	f042 0201 	orreq.w	r2, r2, #1
24002e98:	3118      	adds	r1, #24
24002e9a:	428b      	cmp	r3, r1
24002e9c:	bf08      	it	eq
24002e9e:	f042 0201 	orreq.w	r2, r2, #1
24002ea2:	3118      	adds	r1, #24
24002ea4:	428b      	cmp	r3, r1
24002ea6:	bf08      	it	eq
24002ea8:	f042 0201 	orreq.w	r2, r2, #1
24002eac:	3118      	adds	r1, #24
24002eae:	428b      	cmp	r3, r1
24002eb0:	bf08      	it	eq
24002eb2:	f042 0201 	orreq.w	r2, r2, #1
24002eb6:	3118      	adds	r1, #24
24002eb8:	428b      	cmp	r3, r1
24002eba:	bf08      	it	eq
24002ebc:	f042 0201 	orreq.w	r2, r2, #1
24002ec0:	b91a      	cbnz	r2, 24002eca <HAL_DMA_Init+0xaa>
24002ec2:	4a70      	ldr	r2, [pc, #448]	; (24003084 <HAL_DMA_Init+0x264>)
24002ec4:	4293      	cmp	r3, r2
24002ec6:	f040 8198 	bne.w	240031fa <HAL_DMA_Init+0x3da>
    __HAL_UNLOCK(hdma);
24002eca:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24002ecc:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
24002ece:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
24002ed2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
24002ed6:	681a      	ldr	r2, [r3, #0]
24002ed8:	f022 0201 	bic.w	r2, r2, #1
24002edc:	601a      	str	r2, [r3, #0]
24002ede:	e006      	b.n	24002eee <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24002ee0:	f7ff fd00 	bl	240028e4 <HAL_GetTick>
24002ee4:	1b43      	subs	r3, r0, r5
24002ee6:	2b05      	cmp	r3, #5
24002ee8:	f200 80ff 	bhi.w	240030ea <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24002eec:	6823      	ldr	r3, [r4, #0]
24002eee:	681a      	ldr	r2, [r3, #0]
24002ef0:	07d6      	lsls	r6, r2, #31
24002ef2:	d4f5      	bmi.n	24002ee0 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
24002ef4:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24002ef8:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
24002efa:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24002efc:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24002efe:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24002f00:	4302      	orrs	r2, r0
24002f02:	6960      	ldr	r0, [r4, #20]
24002f04:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24002f06:	69e0      	ldr	r0, [r4, #28]
24002f08:	430a      	orrs	r2, r1
24002f0a:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24002f0c:	485e      	ldr	r0, [pc, #376]	; (24003088 <HAL_DMA_Init+0x268>)
24002f0e:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
24002f10:	6a25      	ldr	r5, [r4, #32]
24002f12:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24002f14:	4d5d      	ldr	r5, [pc, #372]	; (2400308c <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
24002f16:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24002f18:	6a60      	ldr	r0, [r4, #36]	; 0x24
24002f1a:	2804      	cmp	r0, #4
24002f1c:	f000 8100 	beq.w	24003120 <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24002f20:	682e      	ldr	r6, [r5, #0]
24002f22:	4d5b      	ldr	r5, [pc, #364]	; (24003090 <HAL_DMA_Init+0x270>)
24002f24:	4035      	ands	r5, r6
24002f26:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
24002f2a:	f080 80bb 	bcs.w	240030a4 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24002f2e:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24002f30:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24002f32:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
24002f36:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24002f38:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24002f3a:	4620      	mov	r0, r4
24002f3c:	f7ff fe8a 	bl	24002c54 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24002f40:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24002f42:	233f      	movs	r3, #63	; 0x3f
24002f44:	f002 021f 	and.w	r2, r2, #31
24002f48:	4093      	lsls	r3, r2
24002f4a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24002f4c:	6822      	ldr	r2, [r4, #0]
24002f4e:	4b4b      	ldr	r3, [pc, #300]	; (2400307c <HAL_DMA_Init+0x25c>)
24002f50:	4850      	ldr	r0, [pc, #320]	; (24003094 <HAL_DMA_Init+0x274>)
24002f52:	494b      	ldr	r1, [pc, #300]	; (24003080 <HAL_DMA_Init+0x260>)
24002f54:	4282      	cmp	r2, r0
24002f56:	bf18      	it	ne
24002f58:	429a      	cmpne	r2, r3
24002f5a:	f100 0030 	add.w	r0, r0, #48	; 0x30
24002f5e:	bf0c      	ite	eq
24002f60:	2301      	moveq	r3, #1
24002f62:	2300      	movne	r3, #0
24002f64:	428a      	cmp	r2, r1
24002f66:	bf08      	it	eq
24002f68:	f043 0301 	orreq.w	r3, r3, #1
24002f6c:	3130      	adds	r1, #48	; 0x30
24002f6e:	4282      	cmp	r2, r0
24002f70:	bf08      	it	eq
24002f72:	f043 0301 	orreq.w	r3, r3, #1
24002f76:	3030      	adds	r0, #48	; 0x30
24002f78:	428a      	cmp	r2, r1
24002f7a:	bf08      	it	eq
24002f7c:	f043 0301 	orreq.w	r3, r3, #1
24002f80:	3130      	adds	r1, #48	; 0x30
24002f82:	4282      	cmp	r2, r0
24002f84:	bf08      	it	eq
24002f86:	f043 0301 	orreq.w	r3, r3, #1
24002f8a:	3030      	adds	r0, #48	; 0x30
24002f8c:	428a      	cmp	r2, r1
24002f8e:	bf08      	it	eq
24002f90:	f043 0301 	orreq.w	r3, r3, #1
24002f94:	f501 715c 	add.w	r1, r1, #880	; 0x370
24002f98:	4282      	cmp	r2, r0
24002f9a:	bf08      	it	eq
24002f9c:	f043 0301 	orreq.w	r3, r3, #1
24002fa0:	f500 705c 	add.w	r0, r0, #880	; 0x370
24002fa4:	428a      	cmp	r2, r1
24002fa6:	bf08      	it	eq
24002fa8:	f043 0301 	orreq.w	r3, r3, #1
24002fac:	3130      	adds	r1, #48	; 0x30
24002fae:	4282      	cmp	r2, r0
24002fb0:	bf08      	it	eq
24002fb2:	f043 0301 	orreq.w	r3, r3, #1
24002fb6:	3030      	adds	r0, #48	; 0x30
24002fb8:	428a      	cmp	r2, r1
24002fba:	bf08      	it	eq
24002fbc:	f043 0301 	orreq.w	r3, r3, #1
24002fc0:	3130      	adds	r1, #48	; 0x30
24002fc2:	4282      	cmp	r2, r0
24002fc4:	bf08      	it	eq
24002fc6:	f043 0301 	orreq.w	r3, r3, #1
24002fca:	3030      	adds	r0, #48	; 0x30
24002fcc:	428a      	cmp	r2, r1
24002fce:	bf08      	it	eq
24002fd0:	f043 0301 	orreq.w	r3, r3, #1
24002fd4:	3130      	adds	r1, #48	; 0x30
24002fd6:	4282      	cmp	r2, r0
24002fd8:	bf08      	it	eq
24002fda:	f043 0301 	orreq.w	r3, r3, #1
24002fde:	3030      	adds	r0, #48	; 0x30
24002fe0:	428a      	cmp	r2, r1
24002fe2:	bf08      	it	eq
24002fe4:	f043 0301 	orreq.w	r3, r3, #1
24002fe8:	492b      	ldr	r1, [pc, #172]	; (24003098 <HAL_DMA_Init+0x278>)
24002fea:	4282      	cmp	r2, r0
24002fec:	bf08      	it	eq
24002fee:	f043 0301 	orreq.w	r3, r3, #1
24002ff2:	482a      	ldr	r0, [pc, #168]	; (2400309c <HAL_DMA_Init+0x27c>)
24002ff4:	428a      	cmp	r2, r1
24002ff6:	bf08      	it	eq
24002ff8:	f043 0301 	orreq.w	r3, r3, #1
24002ffc:	3128      	adds	r1, #40	; 0x28
24002ffe:	4282      	cmp	r2, r0
24003000:	bf08      	it	eq
24003002:	f043 0301 	orreq.w	r3, r3, #1
24003006:	3028      	adds	r0, #40	; 0x28
24003008:	428a      	cmp	r2, r1
2400300a:	bf08      	it	eq
2400300c:	f043 0301 	orreq.w	r3, r3, #1
24003010:	3128      	adds	r1, #40	; 0x28
24003012:	4282      	cmp	r2, r0
24003014:	bf08      	it	eq
24003016:	f043 0301 	orreq.w	r3, r3, #1
2400301a:	3028      	adds	r0, #40	; 0x28
2400301c:	428a      	cmp	r2, r1
2400301e:	bf08      	it	eq
24003020:	f043 0301 	orreq.w	r3, r3, #1
24003024:	3128      	adds	r1, #40	; 0x28
24003026:	4282      	cmp	r2, r0
24003028:	bf08      	it	eq
2400302a:	f043 0301 	orreq.w	r3, r3, #1
2400302e:	428a      	cmp	r2, r1
24003030:	bf08      	it	eq
24003032:	f043 0301 	orreq.w	r3, r3, #1
24003036:	b913      	cbnz	r3, 2400303e <HAL_DMA_Init+0x21e>
24003038:	4b19      	ldr	r3, [pc, #100]	; (240030a0 <HAL_DMA_Init+0x280>)
2400303a:	429a      	cmp	r2, r3
2400303c:	d118      	bne.n	24003070 <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
2400303e:	4620      	mov	r0, r4
24003040:	f7ff fe82 	bl	24002d48 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24003044:	68a3      	ldr	r3, [r4, #8]
24003046:	2b80      	cmp	r3, #128	; 0x80
24003048:	d05c      	beq.n	24003104 <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
2400304a:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400304c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
2400304e:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24003050:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24003052:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24003056:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24003058:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400305a:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
2400305c:	d859      	bhi.n	24003112 <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
2400305e:	1e50      	subs	r0, r2, #1
24003060:	2807      	cmp	r0, #7
24003062:	d96e      	bls.n	24003142 <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24003064:	6f62      	ldr	r2, [r4, #116]	; 0x74
24003066:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
2400306a:	2000      	movs	r0, #0
2400306c:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
2400306e:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24003070:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
24003072:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24003074:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
24003076:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
2400307a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400307c:	40020010 	.word	0x40020010
24003080:	40020040 	.word	0x40020040
24003084:	400204b8 	.word	0x400204b8
24003088:	fe10803f 	.word	0xfe10803f
2400308c:	5c001000 	.word	0x5c001000
24003090:	ffff0000 	.word	0xffff0000
24003094:	40020028 	.word	0x40020028
24003098:	58025408 	.word	0x58025408
2400309c:	5802541c 	.word	0x5802541c
240030a0:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
240030a4:	6865      	ldr	r5, [r4, #4]
240030a6:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
240030aa:	2e1f      	cmp	r6, #31
240030ac:	d924      	bls.n	240030f8 <HAL_DMA_Init+0x2d8>
240030ae:	3d4f      	subs	r5, #79	; 0x4f
240030b0:	2d03      	cmp	r5, #3
240030b2:	d801      	bhi.n	240030b8 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
240030b4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
240030b8:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240030ba:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
240030bc:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
240030be:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
240030c2:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
240030c6:	f47f af37 	bne.w	24002f38 <HAL_DMA_Init+0x118>
240030ca:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
240030cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
240030ce:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
240030d0:	2d00      	cmp	r5, #0
240030d2:	f43f af31 	beq.w	24002f38 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
240030d6:	2900      	cmp	r1, #0
240030d8:	d169      	bne.n	240031ae <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
240030da:	2801      	cmp	r0, #1
240030dc:	f000 8088 	beq.w	240031f0 <HAL_DMA_Init+0x3d0>
240030e0:	f030 0102 	bics.w	r1, r0, #2
240030e4:	f47f af28 	bne.w	24002f38 <HAL_DMA_Init+0x118>
240030e8:	e069      	b.n	240031be <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240030ea:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
240030ec:	2303      	movs	r3, #3
        return HAL_ERROR;
240030ee:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
240030f0:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
240030f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
240030f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
240030f8:	4d73      	ldr	r5, [pc, #460]	; (240032c8 <HAL_DMA_Init+0x4a8>)
240030fa:	fa25 f606 	lsr.w	r6, r5, r6
240030fe:	07f5      	lsls	r5, r6, #31
24003100:	d5da      	bpl.n	240030b8 <HAL_DMA_Init+0x298>
24003102:	e7d7      	b.n	240030b4 <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
24003104:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24003106:	6ea1      	ldr	r1, [r4, #104]	; 0x68
24003108:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
2400310c:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
2400310e:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24003110:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
24003112:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
24003114:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
24003118:	6763      	str	r3, [r4, #116]	; 0x74
2400311a:	e7a9      	b.n	24003070 <HAL_DMA_Init+0x250>
    return HAL_ERROR;
2400311c:	2001      	movs	r0, #1
}
2400311e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24003120:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24003122:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
24003126:	432e      	orrs	r6, r5
24003128:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
2400312a:	4e68      	ldr	r6, [pc, #416]	; (240032cc <HAL_DMA_Init+0x4ac>)
2400312c:	403e      	ands	r6, r7
2400312e:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
24003132:	d2b7      	bcs.n	240030a4 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24003134:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24003136:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24003138:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
2400313c:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24003140:	e7c4      	b.n	240030cc <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24003142:	6821      	ldr	r1, [r4, #0]
24003144:	4b62      	ldr	r3, [pc, #392]	; (240032d0 <HAL_DMA_Init+0x4b0>)
24003146:	4d63      	ldr	r5, [pc, #396]	; (240032d4 <HAL_DMA_Init+0x4b4>)
24003148:	42a9      	cmp	r1, r5
2400314a:	bf18      	it	ne
2400314c:	4299      	cmpne	r1, r3
2400314e:	f105 0514 	add.w	r5, r5, #20
24003152:	bf0c      	ite	eq
24003154:	2301      	moveq	r3, #1
24003156:	2300      	movne	r3, #0
24003158:	42a9      	cmp	r1, r5
2400315a:	bf08      	it	eq
2400315c:	f043 0301 	orreq.w	r3, r3, #1
24003160:	3514      	adds	r5, #20
24003162:	42a9      	cmp	r1, r5
24003164:	bf08      	it	eq
24003166:	f043 0301 	orreq.w	r3, r3, #1
2400316a:	3514      	adds	r5, #20
2400316c:	42a9      	cmp	r1, r5
2400316e:	bf08      	it	eq
24003170:	f043 0301 	orreq.w	r3, r3, #1
24003174:	3514      	adds	r5, #20
24003176:	42a9      	cmp	r1, r5
24003178:	bf08      	it	eq
2400317a:	f043 0301 	orreq.w	r3, r3, #1
2400317e:	3514      	adds	r5, #20
24003180:	42a9      	cmp	r1, r5
24003182:	bf08      	it	eq
24003184:	f043 0301 	orreq.w	r3, r3, #1
24003188:	b93b      	cbnz	r3, 2400319a <HAL_DMA_Init+0x37a>
2400318a:	4b53      	ldr	r3, [pc, #332]	; (240032d8 <HAL_DMA_Init+0x4b8>)
2400318c:	4299      	cmp	r1, r3
2400318e:	d004      	beq.n	2400319a <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24003190:	4b52      	ldr	r3, [pc, #328]	; (240032dc <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24003192:	4953      	ldr	r1, [pc, #332]	; (240032e0 <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24003194:	4413      	add	r3, r2
24003196:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24003198:	e003      	b.n	240031a2 <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
2400319a:	4b52      	ldr	r3, [pc, #328]	; (240032e4 <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
2400319c:	4952      	ldr	r1, [pc, #328]	; (240032e8 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
2400319e:	4413      	add	r3, r2
240031a0:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
240031a2:	2201      	movs	r2, #1
240031a4:	4082      	lsls	r2, r0
240031a6:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
240031aa:	6762      	str	r2, [r4, #116]	; 0x74
240031ac:	e75d      	b.n	2400306a <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
240031ae:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
240031b2:	d00e      	beq.n	240031d2 <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
240031b4:	2802      	cmp	r0, #2
240031b6:	d905      	bls.n	240031c4 <HAL_DMA_Init+0x3a4>
240031b8:	2803      	cmp	r0, #3
240031ba:	f47f aebd 	bne.w	24002f38 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
240031be:	01e9      	lsls	r1, r5, #7
240031c0:	f57f aeba 	bpl.w	24002f38 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
240031c4:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240031c6:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
240031c8:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240031ca:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
240031cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
240031d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
240031d2:	2803      	cmp	r0, #3
240031d4:	f63f aeb0 	bhi.w	24002f38 <HAL_DMA_Init+0x118>
240031d8:	a101      	add	r1, pc, #4	; (adr r1, 240031e0 <HAL_DMA_Init+0x3c0>)
240031da:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
240031de:	bf00      	nop
240031e0:	240031c5 	.word	0x240031c5
240031e4:	240031bf 	.word	0x240031bf
240031e8:	240031c5 	.word	0x240031c5
240031ec:	240031f1 	.word	0x240031f1
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
240031f0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
240031f4:	f47f aea0 	bne.w	24002f38 <HAL_DMA_Init+0x118>
240031f8:	e7e4      	b.n	240031c4 <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
240031fa:	4a35      	ldr	r2, [pc, #212]	; (240032d0 <HAL_DMA_Init+0x4b0>)
240031fc:	4835      	ldr	r0, [pc, #212]	; (240032d4 <HAL_DMA_Init+0x4b4>)
240031fe:	493b      	ldr	r1, [pc, #236]	; (240032ec <HAL_DMA_Init+0x4cc>)
24003200:	4283      	cmp	r3, r0
24003202:	bf18      	it	ne
24003204:	4293      	cmpne	r3, r2
24003206:	f100 0028 	add.w	r0, r0, #40	; 0x28
2400320a:	bf0c      	ite	eq
2400320c:	2201      	moveq	r2, #1
2400320e:	2200      	movne	r2, #0
24003210:	428b      	cmp	r3, r1
24003212:	bf08      	it	eq
24003214:	f042 0201 	orreq.w	r2, r2, #1
24003218:	3128      	adds	r1, #40	; 0x28
2400321a:	4283      	cmp	r3, r0
2400321c:	bf08      	it	eq
2400321e:	f042 0201 	orreq.w	r2, r2, #1
24003222:	3028      	adds	r0, #40	; 0x28
24003224:	428b      	cmp	r3, r1
24003226:	bf08      	it	eq
24003228:	f042 0201 	orreq.w	r2, r2, #1
2400322c:	3128      	adds	r1, #40	; 0x28
2400322e:	4283      	cmp	r3, r0
24003230:	bf08      	it	eq
24003232:	f042 0201 	orreq.w	r2, r2, #1
24003236:	428b      	cmp	r3, r1
24003238:	bf08      	it	eq
2400323a:	f042 0201 	orreq.w	r2, r2, #1
2400323e:	b912      	cbnz	r2, 24003246 <HAL_DMA_Init+0x426>
24003240:	4a25      	ldr	r2, [pc, #148]	; (240032d8 <HAL_DMA_Init+0x4b8>)
24003242:	4293      	cmp	r3, r2
24003244:	d138      	bne.n	240032b8 <HAL_DMA_Init+0x498>
    __HAL_UNLOCK(hdma);
24003246:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24003248:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
2400324a:	4d29      	ldr	r5, [pc, #164]	; (240032f0 <HAL_DMA_Init+0x4d0>)
    hdma->State = HAL_DMA_STATE_BUSY;
2400324c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
24003250:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
24003254:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24003256:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24003258:	68a2      	ldr	r2, [r4, #8]
2400325a:	2a40      	cmp	r2, #64	; 0x40
2400325c:	d02a      	beq.n	240032b4 <HAL_DMA_Init+0x494>
2400325e:	2a80      	cmp	r2, #128	; 0x80
24003260:	bf0c      	ite	eq
24003262:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
24003266:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
24003268:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
2400326a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
2400326e:	08d2      	lsrs	r2, r2, #3
24003270:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
24003274:	6961      	ldr	r1, [r4, #20]
24003276:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
2400327a:	69a1      	ldr	r1, [r4, #24]
2400327c:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
24003280:	69e1      	ldr	r1, [r4, #28]
24003282:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24003286:	491b      	ldr	r1, [pc, #108]	; (240032f4 <HAL_DMA_Init+0x4d4>)
24003288:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
2400328c:	4419      	add	r1, r3
2400328e:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24003290:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24003292:	4819      	ldr	r0, [pc, #100]	; (240032f8 <HAL_DMA_Init+0x4d8>)
24003294:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24003298:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
2400329a:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
2400329c:	090b      	lsrs	r3, r1, #4
2400329e:	009b      	lsls	r3, r3, #2
240032a0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
240032a2:	f7ff fcd7 	bl	24002c54 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240032a6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
240032a8:	2301      	movs	r3, #1
240032aa:	f002 021f 	and.w	r2, r2, #31
240032ae:	4093      	lsls	r3, r2
240032b0:	6043      	str	r3, [r0, #4]
240032b2:	e64b      	b.n	24002f4c <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
240032b4:	2010      	movs	r0, #16
240032b6:	e7d7      	b.n	24003268 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240032b8:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
240032ba:	2303      	movs	r3, #3
    return HAL_ERROR;
240032bc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
240032be:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
240032c0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
240032c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240032c6:	bf00      	nop
240032c8:	c3c0003f 	.word	0xc3c0003f
240032cc:	ffff0000 	.word	0xffff0000
240032d0:	58025408 	.word	0x58025408
240032d4:	5802541c 	.word	0x5802541c
240032d8:	58025494 	.word	0x58025494
240032dc:	1000823f 	.word	0x1000823f
240032e0:	40020940 	.word	0x40020940
240032e4:	1600963f 	.word	0x1600963f
240032e8:	58025940 	.word	0x58025940
240032ec:	58025430 	.word	0x58025430
240032f0:	fffe000f 	.word	0xfffe000f
240032f4:	a7fdabf8 	.word	0xa7fdabf8
240032f8:	cccccccd 	.word	0xcccccccd

240032fc <HAL_DMA_Start_IT>:
  if(hdma == NULL)
240032fc:	2800      	cmp	r0, #0
240032fe:	f000 8177 	beq.w	240035f0 <HAL_DMA_Start_IT+0x2f4>
24003302:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
24003304:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
24003308:	2801      	cmp	r0, #1
2400330a:	f000 8173 	beq.w	240035f4 <HAL_DMA_Start_IT+0x2f8>
2400330e:	2001      	movs	r0, #1
{
24003310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
24003314:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
24003318:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
2400331c:	4284      	cmp	r4, r0
2400331e:	d008      	beq.n	24003332 <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24003320:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
24003324:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24003326:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
2400332a:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
2400332e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
24003332:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
24003334:	f8dc 4000 	ldr.w	r4, [ip]
24003338:	4d53      	ldr	r5, [pc, #332]	; (24003488 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
2400333a:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2400333e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
24003340:	4e52      	ldr	r6, [pc, #328]	; (2400348c <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24003342:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
24003346:	4852      	ldr	r0, [pc, #328]	; (24003490 <HAL_DMA_Start_IT+0x194>)
24003348:	42ac      	cmp	r4, r5
2400334a:	bf18      	it	ne
2400334c:	4284      	cmpne	r4, r0
2400334e:	f105 0518 	add.w	r5, r5, #24
24003352:	bf0c      	ite	eq
24003354:	2001      	moveq	r0, #1
24003356:	2000      	movne	r0, #0
24003358:	42ac      	cmp	r4, r5
2400335a:	bf08      	it	eq
2400335c:	f040 0001 	orreq.w	r0, r0, #1
24003360:	3518      	adds	r5, #24
24003362:	42ac      	cmp	r4, r5
24003364:	bf08      	it	eq
24003366:	f040 0001 	orreq.w	r0, r0, #1
2400336a:	3518      	adds	r5, #24
2400336c:	42ac      	cmp	r4, r5
2400336e:	bf08      	it	eq
24003370:	f040 0001 	orreq.w	r0, r0, #1
24003374:	3518      	adds	r5, #24
24003376:	42ac      	cmp	r4, r5
24003378:	bf08      	it	eq
2400337a:	f040 0001 	orreq.w	r0, r0, #1
2400337e:	f505 7556 	add.w	r5, r5, #856	; 0x358
24003382:	42ac      	cmp	r4, r5
24003384:	bf08      	it	eq
24003386:	f040 0001 	orreq.w	r0, r0, #1
2400338a:	3518      	adds	r5, #24
2400338c:	42ac      	cmp	r4, r5
2400338e:	bf08      	it	eq
24003390:	f040 0001 	orreq.w	r0, r0, #1
24003394:	3518      	adds	r5, #24
24003396:	42ac      	cmp	r4, r5
24003398:	bf08      	it	eq
2400339a:	f040 0001 	orreq.w	r0, r0, #1
2400339e:	3518      	adds	r5, #24
240033a0:	42ac      	cmp	r4, r5
240033a2:	bf08      	it	eq
240033a4:	f040 0001 	orreq.w	r0, r0, #1
240033a8:	3518      	adds	r5, #24
240033aa:	42ac      	cmp	r4, r5
240033ac:	bf08      	it	eq
240033ae:	f040 0001 	orreq.w	r0, r0, #1
240033b2:	3518      	adds	r5, #24
240033b4:	42ac      	cmp	r4, r5
240033b6:	bf08      	it	eq
240033b8:	f040 0001 	orreq.w	r0, r0, #1
240033bc:	3518      	adds	r5, #24
240033be:	42ac      	cmp	r4, r5
240033c0:	bf08      	it	eq
240033c2:	f040 0001 	orreq.w	r0, r0, #1
240033c6:	3518      	adds	r5, #24
240033c8:	42ac      	cmp	r4, r5
240033ca:	bf14      	ite	ne
240033cc:	4681      	movne	r9, r0
240033ce:	f040 0901 	orreq.w	r9, r0, #1
240033d2:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
240033d6:	42ac      	cmp	r4, r5
240033d8:	bf18      	it	ne
240033da:	42b4      	cmpne	r4, r6
240033dc:	bf0c      	ite	eq
240033de:	2501      	moveq	r5, #1
240033e0:	2500      	movne	r5, #0
240033e2:	d002      	beq.n	240033ea <HAL_DMA_Start_IT+0xee>
240033e4:	f1b9 0f00 	cmp.w	r9, #0
240033e8:	d054      	beq.n	24003494 <HAL_DMA_Start_IT+0x198>
240033ea:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240033ec:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
240033f0:	f026 0601 	bic.w	r6, r6, #1
240033f4:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240033f6:	2d00      	cmp	r5, #0
240033f8:	d078      	beq.n	240034ec <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240033fa:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
240033fe:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
24003400:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
24003404:	b117      	cbz	r7, 2400340c <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24003406:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
2400340a:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400340c:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
24003410:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
24003414:	f006 081f 	and.w	r8, r6, #31
24003418:	fa0e fe08 	lsl.w	lr, lr, r8
2400341c:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
24003420:	6826      	ldr	r6, [r4, #0]
24003422:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
24003426:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
24003428:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2400342a:	f8dc 3008 	ldr.w	r3, [ip, #8]
2400342e:	2b40      	cmp	r3, #64	; 0x40
24003430:	f000 80e2 	beq.w	240035f8 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
24003434:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
24003436:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24003438:	b91d      	cbnz	r5, 24003442 <HAL_DMA_Start_IT+0x146>
2400343a:	f1b9 0f00 	cmp.w	r9, #0
2400343e:	f000 80e1 	beq.w	24003604 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
24003442:	6823      	ldr	r3, [r4, #0]
24003444:	f023 031e 	bic.w	r3, r3, #30
24003448:	f043 0316 	orr.w	r3, r3, #22
2400344c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
2400344e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
24003452:	b11b      	cbz	r3, 2400345c <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24003454:	6823      	ldr	r3, [r4, #0]
24003456:	f043 0308 	orr.w	r3, r3, #8
2400345a:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
2400345c:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
24003460:	681a      	ldr	r2, [r3, #0]
24003462:	03d2      	lsls	r2, r2, #15
24003464:	d503      	bpl.n	2400346e <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24003466:	681a      	ldr	r2, [r3, #0]
24003468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2400346c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
2400346e:	b11f      	cbz	r7, 24003478 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24003470:	683b      	ldr	r3, [r7, #0]
24003472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24003476:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
24003478:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
2400347a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
2400347c:	f043 0301 	orr.w	r3, r3, #1
24003480:	6023      	str	r3, [r4, #0]
}
24003482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24003486:	bf00      	nop
24003488:	40020058 	.word	0x40020058
2400348c:	40020010 	.word	0x40020010
24003490:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24003494:	4f61      	ldr	r7, [pc, #388]	; (2400361c <HAL_DMA_Start_IT+0x320>)
24003496:	4e62      	ldr	r6, [pc, #392]	; (24003620 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24003498:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400349c:	42b4      	cmp	r4, r6
2400349e:	bf18      	it	ne
240034a0:	42bc      	cmpne	r4, r7
240034a2:	f106 0628 	add.w	r6, r6, #40	; 0x28
240034a6:	bf0c      	ite	eq
240034a8:	2701      	moveq	r7, #1
240034aa:	2700      	movne	r7, #0
240034ac:	42b4      	cmp	r4, r6
240034ae:	bf08      	it	eq
240034b0:	f047 0701 	orreq.w	r7, r7, #1
240034b4:	3614      	adds	r6, #20
240034b6:	42b4      	cmp	r4, r6
240034b8:	bf08      	it	eq
240034ba:	f047 0701 	orreq.w	r7, r7, #1
240034be:	3614      	adds	r6, #20
240034c0:	42b4      	cmp	r4, r6
240034c2:	bf08      	it	eq
240034c4:	f047 0701 	orreq.w	r7, r7, #1
240034c8:	3614      	adds	r6, #20
240034ca:	42b4      	cmp	r4, r6
240034cc:	bf08      	it	eq
240034ce:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
240034d2:	6826      	ldr	r6, [r4, #0]
240034d4:	f026 0601 	bic.w	r6, r6, #1
240034d8:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240034da:	4e52      	ldr	r6, [pc, #328]	; (24003624 <HAL_DMA_Start_IT+0x328>)
240034dc:	42b4      	cmp	r4, r6
240034de:	bf08      	it	eq
240034e0:	f047 0701 	orreq.w	r7, r7, #1
240034e4:	b917      	cbnz	r7, 240034ec <HAL_DMA_Start_IT+0x1f0>
240034e6:	4f50      	ldr	r7, [pc, #320]	; (24003628 <HAL_DMA_Start_IT+0x32c>)
240034e8:	42bc      	cmp	r4, r7
240034ea:	d10b      	bne.n	24003504 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240034ec:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
240034f0:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
240034f2:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
240034f6:	b117      	cbz	r7, 240034fe <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240034f8:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
240034fc:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240034fe:	f1b9 0f00 	cmp.w	r9, #0
24003502:	d183      	bne.n	2400340c <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24003504:	4f46      	ldr	r7, [pc, #280]	; (24003620 <HAL_DMA_Start_IT+0x324>)
24003506:	f8df e114 	ldr.w	lr, [pc, #276]	; 2400361c <HAL_DMA_Start_IT+0x320>
2400350a:	4574      	cmp	r4, lr
2400350c:	bf18      	it	ne
2400350e:	42bc      	cmpne	r4, r7
24003510:	f10e 0e14 	add.w	lr, lr, #20
24003514:	bf0c      	ite	eq
24003516:	2701      	moveq	r7, #1
24003518:	2700      	movne	r7, #0
2400351a:	4574      	cmp	r4, lr
2400351c:	bf08      	it	eq
2400351e:	f047 0701 	orreq.w	r7, r7, #1
24003522:	f10e 0e14 	add.w	lr, lr, #20
24003526:	4574      	cmp	r4, lr
24003528:	bf08      	it	eq
2400352a:	f047 0701 	orreq.w	r7, r7, #1
2400352e:	f10e 0e14 	add.w	lr, lr, #20
24003532:	4574      	cmp	r4, lr
24003534:	bf08      	it	eq
24003536:	f047 0701 	orreq.w	r7, r7, #1
2400353a:	f10e 0e14 	add.w	lr, lr, #20
2400353e:	4574      	cmp	r4, lr
24003540:	bf08      	it	eq
24003542:	f047 0701 	orreq.w	r7, r7, #1
24003546:	f10e 0e14 	add.w	lr, lr, #20
2400354a:	4574      	cmp	r4, lr
2400354c:	bf08      	it	eq
2400354e:	f047 0701 	orreq.w	r7, r7, #1
24003552:	b917      	cbnz	r7, 2400355a <HAL_DMA_Start_IT+0x25e>
24003554:	4f34      	ldr	r7, [pc, #208]	; (24003628 <HAL_DMA_Start_IT+0x32c>)
24003556:	42bc      	cmp	r4, r7
24003558:	d154      	bne.n	24003604 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
2400355a:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
2400355e:	2701      	movs	r7, #1
24003560:	f000 0e1f 	and.w	lr, r0, #31
24003564:	fa07 f70e 	lsl.w	r7, r7, lr
24003568:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
2400356c:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2400356e:	f8dc 3008 	ldr.w	r3, [ip, #8]
24003572:	2b40      	cmp	r3, #64	; 0x40
24003574:	d043      	beq.n	240035fe <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
24003576:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24003578:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
2400357a:	6823      	ldr	r3, [r4, #0]
2400357c:	f023 030e 	bic.w	r3, r3, #14
24003580:	f043 030a 	orr.w	r3, r3, #10
24003584:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
24003586:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
2400358a:	2b00      	cmp	r3, #0
2400358c:	d02d      	beq.n	240035ea <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
2400358e:	6823      	ldr	r3, [r4, #0]
24003590:	f043 0304 	orr.w	r3, r3, #4
24003594:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24003596:	4b21      	ldr	r3, [pc, #132]	; (2400361c <HAL_DMA_Start_IT+0x320>)
24003598:	4a21      	ldr	r2, [pc, #132]	; (24003620 <HAL_DMA_Start_IT+0x324>)
2400359a:	4294      	cmp	r4, r2
2400359c:	bf18      	it	ne
2400359e:	429c      	cmpne	r4, r3
240035a0:	f102 0228 	add.w	r2, r2, #40	; 0x28
240035a4:	bf0c      	ite	eq
240035a6:	2301      	moveq	r3, #1
240035a8:	2300      	movne	r3, #0
240035aa:	4294      	cmp	r4, r2
240035ac:	bf08      	it	eq
240035ae:	f043 0301 	orreq.w	r3, r3, #1
240035b2:	3214      	adds	r2, #20
240035b4:	4294      	cmp	r4, r2
240035b6:	bf08      	it	eq
240035b8:	f043 0301 	orreq.w	r3, r3, #1
240035bc:	3214      	adds	r2, #20
240035be:	4294      	cmp	r4, r2
240035c0:	bf08      	it	eq
240035c2:	f043 0301 	orreq.w	r3, r3, #1
240035c6:	3214      	adds	r2, #20
240035c8:	4294      	cmp	r4, r2
240035ca:	bf08      	it	eq
240035cc:	f043 0301 	orreq.w	r3, r3, #1
240035d0:	3214      	adds	r2, #20
240035d2:	4294      	cmp	r4, r2
240035d4:	bf08      	it	eq
240035d6:	f043 0301 	orreq.w	r3, r3, #1
240035da:	3214      	adds	r2, #20
240035dc:	4294      	cmp	r4, r2
240035de:	bf08      	it	eq
240035e0:	f043 0301 	orreq.w	r3, r3, #1
240035e4:	2b00      	cmp	r3, #0
240035e6:	f43f af47 	beq.w	24003478 <HAL_DMA_Start_IT+0x17c>
240035ea:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
240035ee:	e735      	b.n	2400345c <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
240035f0:	2001      	movs	r0, #1
240035f2:	4770      	bx	lr
  __HAL_LOCK(hdma);
240035f4:	2002      	movs	r0, #2
}
240035f6:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
240035f8:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
240035fa:	60e1      	str	r1, [r4, #12]
240035fc:	e71c      	b.n	24003438 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
240035fe:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
24003600:	60e1      	str	r1, [r4, #12]
24003602:	e7ba      	b.n	2400357a <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24003604:	6823      	ldr	r3, [r4, #0]
24003606:	f023 030e 	bic.w	r3, r3, #14
2400360a:	f043 030a 	orr.w	r3, r3, #10
2400360e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
24003610:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
24003614:	2b00      	cmp	r3, #0
24003616:	d1ba      	bne.n	2400358e <HAL_DMA_Start_IT+0x292>
24003618:	e7bd      	b.n	24003596 <HAL_DMA_Start_IT+0x29a>
2400361a:	bf00      	nop
2400361c:	5802541c 	.word	0x5802541c
24003620:	58025408 	.word	0x58025408
24003624:	58025480 	.word	0x58025480
24003628:	58025494 	.word	0x58025494

2400362c <HAL_DMA_Abort>:
{
2400362c:	b570      	push	{r4, r5, r6, lr}
2400362e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
24003630:	f7ff f958 	bl	240028e4 <HAL_GetTick>
  if(hdma == NULL)
24003634:	2d00      	cmp	r5, #0
24003636:	f000 8124 	beq.w	24003882 <HAL_DMA_Abort+0x256>
  if(hdma->State != HAL_DMA_STATE_BUSY)
2400363a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
2400363e:	2b02      	cmp	r3, #2
24003640:	f040 80dd 	bne.w	240037fe <HAL_DMA_Abort+0x1d2>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24003644:	682c      	ldr	r4, [r5, #0]
24003646:	4606      	mov	r6, r0
24003648:	4b8f      	ldr	r3, [pc, #572]	; (24003888 <HAL_DMA_Abort+0x25c>)
2400364a:	4890      	ldr	r0, [pc, #576]	; (2400388c <HAL_DMA_Abort+0x260>)
2400364c:	4a90      	ldr	r2, [pc, #576]	; (24003890 <HAL_DMA_Abort+0x264>)
2400364e:	4284      	cmp	r4, r0
24003650:	bf18      	it	ne
24003652:	429c      	cmpne	r4, r3
24003654:	f100 0030 	add.w	r0, r0, #48	; 0x30
24003658:	498e      	ldr	r1, [pc, #568]	; (24003894 <HAL_DMA_Abort+0x268>)
2400365a:	bf0c      	ite	eq
2400365c:	2301      	moveq	r3, #1
2400365e:	2300      	movne	r3, #0
24003660:	4284      	cmp	r4, r0
24003662:	bf08      	it	eq
24003664:	f043 0301 	orreq.w	r3, r3, #1
24003668:	3018      	adds	r0, #24
2400366a:	4284      	cmp	r4, r0
2400366c:	bf08      	it	eq
2400366e:	f043 0301 	orreq.w	r3, r3, #1
24003672:	3018      	adds	r0, #24
24003674:	4284      	cmp	r4, r0
24003676:	bf08      	it	eq
24003678:	f043 0301 	orreq.w	r3, r3, #1
2400367c:	3018      	adds	r0, #24
2400367e:	4284      	cmp	r4, r0
24003680:	bf08      	it	eq
24003682:	f043 0301 	orreq.w	r3, r3, #1
24003686:	f500 7056 	add.w	r0, r0, #856	; 0x358
2400368a:	4284      	cmp	r4, r0
2400368c:	bf08      	it	eq
2400368e:	f043 0301 	orreq.w	r3, r3, #1
24003692:	3018      	adds	r0, #24
24003694:	4284      	cmp	r4, r0
24003696:	bf08      	it	eq
24003698:	f043 0301 	orreq.w	r3, r3, #1
2400369c:	3018      	adds	r0, #24
2400369e:	4284      	cmp	r4, r0
240036a0:	bf08      	it	eq
240036a2:	f043 0301 	orreq.w	r3, r3, #1
240036a6:	3018      	adds	r0, #24
240036a8:	4284      	cmp	r4, r0
240036aa:	bf08      	it	eq
240036ac:	f043 0301 	orreq.w	r3, r3, #1
240036b0:	3018      	adds	r0, #24
240036b2:	4284      	cmp	r4, r0
240036b4:	bf08      	it	eq
240036b6:	f043 0301 	orreq.w	r3, r3, #1
240036ba:	3018      	adds	r0, #24
240036bc:	4284      	cmp	r4, r0
240036be:	bf08      	it	eq
240036c0:	f043 0301 	orreq.w	r3, r3, #1
240036c4:	3018      	adds	r0, #24
240036c6:	4284      	cmp	r4, r0
240036c8:	bf08      	it	eq
240036ca:	f043 0301 	orreq.w	r3, r3, #1
240036ce:	3018      	adds	r0, #24
240036d0:	4284      	cmp	r4, r0
240036d2:	bf08      	it	eq
240036d4:	f043 0301 	orreq.w	r3, r3, #1
240036d8:	428c      	cmp	r4, r1
240036da:	bf18      	it	ne
240036dc:	4294      	cmpne	r4, r2
240036de:	bf0c      	ite	eq
240036e0:	2201      	moveq	r2, #1
240036e2:	2200      	movne	r2, #0
240036e4:	d002      	beq.n	240036ec <HAL_DMA_Abort+0xc0>
240036e6:	2b00      	cmp	r3, #0
240036e8:	f000 8090 	beq.w	2400380c <HAL_DMA_Abort+0x1e0>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
240036ec:	6821      	ldr	r1, [r4, #0]
240036ee:	f021 011e 	bic.w	r1, r1, #30
240036f2:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
240036f4:	6961      	ldr	r1, [r4, #20]
240036f6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
240036fa:	6161      	str	r1, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240036fc:	2a00      	cmp	r2, #0
240036fe:	f000 80b0 	beq.w	24003862 <HAL_DMA_Abort+0x236>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24003702:	6e2a      	ldr	r2, [r5, #96]	; 0x60
24003704:	6813      	ldr	r3, [r2, #0]
24003706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400370a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
2400370c:	6823      	ldr	r3, [r4, #0]
2400370e:	f023 0301 	bic.w	r3, r3, #1
24003712:	6023      	str	r3, [r4, #0]
24003714:	e005      	b.n	24003722 <HAL_DMA_Abort+0xf6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24003716:	f7ff f8e5 	bl	240028e4 <HAL_GetTick>
2400371a:	1b83      	subs	r3, r0, r6
2400371c:	2b05      	cmp	r3, #5
2400371e:	f200 80a6 	bhi.w	2400386e <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24003722:	6823      	ldr	r3, [r4, #0]
24003724:	07db      	lsls	r3, r3, #31
24003726:	d4f6      	bmi.n	24003716 <HAL_DMA_Abort+0xea>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24003728:	682a      	ldr	r2, [r5, #0]
2400372a:	4b57      	ldr	r3, [pc, #348]	; (24003888 <HAL_DMA_Abort+0x25c>)
2400372c:	4857      	ldr	r0, [pc, #348]	; (2400388c <HAL_DMA_Abort+0x260>)
2400372e:	495a      	ldr	r1, [pc, #360]	; (24003898 <HAL_DMA_Abort+0x26c>)
24003730:	4282      	cmp	r2, r0
24003732:	bf18      	it	ne
24003734:	429a      	cmpne	r2, r3
24003736:	f100 0048 	add.w	r0, r0, #72	; 0x48
2400373a:	bf0c      	ite	eq
2400373c:	2301      	moveq	r3, #1
2400373e:	2300      	movne	r3, #0
24003740:	428a      	cmp	r2, r1
24003742:	bf08      	it	eq
24003744:	f043 0301 	orreq.w	r3, r3, #1
24003748:	3130      	adds	r1, #48	; 0x30
2400374a:	4282      	cmp	r2, r0
2400374c:	bf08      	it	eq
2400374e:	f043 0301 	orreq.w	r3, r3, #1
24003752:	3030      	adds	r0, #48	; 0x30
24003754:	428a      	cmp	r2, r1
24003756:	bf08      	it	eq
24003758:	f043 0301 	orreq.w	r3, r3, #1
2400375c:	f501 715c 	add.w	r1, r1, #880	; 0x370
24003760:	4282      	cmp	r2, r0
24003762:	bf08      	it	eq
24003764:	f043 0301 	orreq.w	r3, r3, #1
24003768:	f500 705c 	add.w	r0, r0, #880	; 0x370
2400376c:	428a      	cmp	r2, r1
2400376e:	bf08      	it	eq
24003770:	f043 0301 	orreq.w	r3, r3, #1
24003774:	3130      	adds	r1, #48	; 0x30
24003776:	4282      	cmp	r2, r0
24003778:	bf08      	it	eq
2400377a:	f043 0301 	orreq.w	r3, r3, #1
2400377e:	3030      	adds	r0, #48	; 0x30
24003780:	428a      	cmp	r2, r1
24003782:	bf08      	it	eq
24003784:	f043 0301 	orreq.w	r3, r3, #1
24003788:	3130      	adds	r1, #48	; 0x30
2400378a:	4282      	cmp	r2, r0
2400378c:	bf08      	it	eq
2400378e:	f043 0301 	orreq.w	r3, r3, #1
24003792:	3030      	adds	r0, #48	; 0x30
24003794:	428a      	cmp	r2, r1
24003796:	bf08      	it	eq
24003798:	f043 0301 	orreq.w	r3, r3, #1
2400379c:	3130      	adds	r1, #48	; 0x30
2400379e:	4282      	cmp	r2, r0
240037a0:	bf08      	it	eq
240037a2:	f043 0301 	orreq.w	r3, r3, #1
240037a6:	428a      	cmp	r2, r1
240037a8:	bf08      	it	eq
240037aa:	f043 0301 	orreq.w	r3, r3, #1
240037ae:	3118      	adds	r1, #24
240037b0:	428a      	cmp	r2, r1
240037b2:	bf08      	it	eq
240037b4:	f043 0301 	orreq.w	r3, r3, #1
240037b8:	b933      	cbnz	r3, 240037c8 <HAL_DMA_Abort+0x19c>
240037ba:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
240037be:	4b35      	ldr	r3, [pc, #212]	; (24003894 <HAL_DMA_Abort+0x268>)
240037c0:	429a      	cmp	r2, r3
240037c2:	bf18      	it	ne
240037c4:	428a      	cmpne	r2, r1
240037c6:	d16f      	bne.n	240038a8 <HAL_DMA_Abort+0x27c>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240037c8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
240037ca:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240037cc:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240037ce:	f002 021f 	and.w	r2, r2, #31
240037d2:	4093      	lsls	r3, r2
240037d4:	608b      	str	r3, [r1, #8]
      if(hdma->DMAmuxRequestGen != 0U)
240037d6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240037d8:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
240037dc:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
240037de:	b133      	cbz	r3, 240037ee <HAL_DMA_Abort+0x1c2>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240037e0:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240037e2:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240037e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240037ea:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240037ec:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
240037ee:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
240037f0:	2201      	movs	r2, #1
  return HAL_OK;
240037f2:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
240037f4:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
240037f8:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
240037fc:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240037fe:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
24003800:	2300      	movs	r3, #0
    return HAL_ERROR;
24003802:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24003804:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24003806:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
2400380a:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
2400380c:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400380e:	4923      	ldr	r1, [pc, #140]	; (2400389c <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24003810:	f022 020e 	bic.w	r2, r2, #14
24003814:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24003816:	4a22      	ldr	r2, [pc, #136]	; (240038a0 <HAL_DMA_Abort+0x274>)
24003818:	428c      	cmp	r4, r1
2400381a:	bf18      	it	ne
2400381c:	4294      	cmpne	r4, r2
2400381e:	f101 0128 	add.w	r1, r1, #40	; 0x28
24003822:	bf0c      	ite	eq
24003824:	2201      	moveq	r2, #1
24003826:	2200      	movne	r2, #0
24003828:	428c      	cmp	r4, r1
2400382a:	bf08      	it	eq
2400382c:	f042 0201 	orreq.w	r2, r2, #1
24003830:	3114      	adds	r1, #20
24003832:	428c      	cmp	r4, r1
24003834:	bf08      	it	eq
24003836:	f042 0201 	orreq.w	r2, r2, #1
2400383a:	3114      	adds	r1, #20
2400383c:	428c      	cmp	r4, r1
2400383e:	bf08      	it	eq
24003840:	f042 0201 	orreq.w	r2, r2, #1
24003844:	3114      	adds	r1, #20
24003846:	428c      	cmp	r4, r1
24003848:	bf08      	it	eq
2400384a:	f042 0201 	orreq.w	r2, r2, #1
2400384e:	3114      	adds	r1, #20
24003850:	428c      	cmp	r4, r1
24003852:	bf08      	it	eq
24003854:	f042 0201 	orreq.w	r2, r2, #1
24003858:	b91a      	cbnz	r2, 24003862 <HAL_DMA_Abort+0x236>
2400385a:	4a12      	ldr	r2, [pc, #72]	; (240038a4 <HAL_DMA_Abort+0x278>)
2400385c:	4294      	cmp	r4, r2
2400385e:	f47f af55 	bne.w	2400370c <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24003862:	6e29      	ldr	r1, [r5, #96]	; 0x60
24003864:	680a      	ldr	r2, [r1, #0]
24003866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
2400386a:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
2400386c:	e74e      	b.n	2400370c <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
2400386e:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
24003870:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
24003872:	2300      	movs	r3, #0
        return HAL_ERROR;
24003874:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24003876:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
24003878:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
2400387c:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
24003880:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
24003882:	2001      	movs	r0, #1
}
24003884:	bd70      	pop	{r4, r5, r6, pc}
24003886:	bf00      	nop
24003888:	40020058 	.word	0x40020058
2400388c:	40020040 	.word	0x40020040
24003890:	40020010 	.word	0x40020010
24003894:	40020028 	.word	0x40020028
24003898:	40020070 	.word	0x40020070
2400389c:	58025408 	.word	0x58025408
240038a0:	5802541c 	.word	0x5802541c
240038a4:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240038a8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
240038aa:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240038ac:	4b16      	ldr	r3, [pc, #88]	; (24003908 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240038ae:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240038b2:	4c16      	ldr	r4, [pc, #88]	; (2400390c <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240038b4:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240038b6:	42a2      	cmp	r2, r4
240038b8:	bf18      	it	ne
240038ba:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
240038bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240038be:	bf0c      	ite	eq
240038c0:	2301      	moveq	r3, #1
240038c2:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
240038c4:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240038c6:	4812      	ldr	r0, [pc, #72]	; (24003910 <HAL_DMA_Abort+0x2e4>)
240038c8:	4912      	ldr	r1, [pc, #72]	; (24003914 <HAL_DMA_Abort+0x2e8>)
240038ca:	4282      	cmp	r2, r0
240038cc:	bf08      	it	eq
240038ce:	f043 0301 	orreq.w	r3, r3, #1
240038d2:	3028      	adds	r0, #40	; 0x28
240038d4:	428a      	cmp	r2, r1
240038d6:	bf08      	it	eq
240038d8:	f043 0301 	orreq.w	r3, r3, #1
240038dc:	3128      	adds	r1, #40	; 0x28
240038de:	4282      	cmp	r2, r0
240038e0:	bf08      	it	eq
240038e2:	f043 0301 	orreq.w	r3, r3, #1
240038e6:	428a      	cmp	r2, r1
240038e8:	bf08      	it	eq
240038ea:	f043 0301 	orreq.w	r3, r3, #1
240038ee:	3114      	adds	r1, #20
240038f0:	428a      	cmp	r2, r1
240038f2:	bf08      	it	eq
240038f4:	f043 0301 	orreq.w	r3, r3, #1
240038f8:	2b00      	cmp	r3, #0
240038fa:	f47f af6c 	bne.w	240037d6 <HAL_DMA_Abort+0x1aa>
240038fe:	4b06      	ldr	r3, [pc, #24]	; (24003918 <HAL_DMA_Abort+0x2ec>)
24003900:	429a      	cmp	r2, r3
24003902:	f43f af68 	beq.w	240037d6 <HAL_DMA_Abort+0x1aa>
24003906:	e772      	b.n	240037ee <HAL_DMA_Abort+0x1c2>
24003908:	5802541c 	.word	0x5802541c
2400390c:	58025408 	.word	0x58025408
24003910:	58025430 	.word	0x58025430
24003914:	58025444 	.word	0x58025444
24003918:	58025494 	.word	0x58025494

2400391c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
2400391c:	2800      	cmp	r0, #0
2400391e:	d05f      	beq.n	240039e0 <HAL_DMA_Abort_IT+0xc4>
{
24003920:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
24003922:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
24003926:	4603      	mov	r3, r0
24003928:	2a02      	cmp	r2, #2
2400392a:	d155      	bne.n	240039d8 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
2400392c:	6801      	ldr	r1, [r0, #0]
2400392e:	4a57      	ldr	r2, [pc, #348]	; (24003a8c <HAL_DMA_Abort_IT+0x170>)
24003930:	4291      	cmp	r1, r2
24003932:	d048      	beq.n	240039c6 <HAL_DMA_Abort_IT+0xaa>
24003934:	3218      	adds	r2, #24
24003936:	4291      	cmp	r1, r2
24003938:	d045      	beq.n	240039c6 <HAL_DMA_Abort_IT+0xaa>
2400393a:	3230      	adds	r2, #48	; 0x30
2400393c:	4c54      	ldr	r4, [pc, #336]	; (24003a90 <HAL_DMA_Abort_IT+0x174>)
2400393e:	4855      	ldr	r0, [pc, #340]	; (24003a94 <HAL_DMA_Abort_IT+0x178>)
24003940:	42a1      	cmp	r1, r4
24003942:	bf18      	it	ne
24003944:	4291      	cmpne	r1, r2
24003946:	f104 0448 	add.w	r4, r4, #72	; 0x48
2400394a:	bf0c      	ite	eq
2400394c:	2201      	moveq	r2, #1
2400394e:	2200      	movne	r2, #0
24003950:	4281      	cmp	r1, r0
24003952:	bf08      	it	eq
24003954:	f042 0201 	orreq.w	r2, r2, #1
24003958:	3030      	adds	r0, #48	; 0x30
2400395a:	42a1      	cmp	r1, r4
2400395c:	bf08      	it	eq
2400395e:	f042 0201 	orreq.w	r2, r2, #1
24003962:	3430      	adds	r4, #48	; 0x30
24003964:	4281      	cmp	r1, r0
24003966:	bf08      	it	eq
24003968:	f042 0201 	orreq.w	r2, r2, #1
2400396c:	f500 705c 	add.w	r0, r0, #880	; 0x370
24003970:	42a1      	cmp	r1, r4
24003972:	bf08      	it	eq
24003974:	f042 0201 	orreq.w	r2, r2, #1
24003978:	f504 745c 	add.w	r4, r4, #880	; 0x370
2400397c:	4281      	cmp	r1, r0
2400397e:	bf08      	it	eq
24003980:	f042 0201 	orreq.w	r2, r2, #1
24003984:	3030      	adds	r0, #48	; 0x30
24003986:	42a1      	cmp	r1, r4
24003988:	bf08      	it	eq
2400398a:	f042 0201 	orreq.w	r2, r2, #1
2400398e:	3430      	adds	r4, #48	; 0x30
24003990:	4281      	cmp	r1, r0
24003992:	bf08      	it	eq
24003994:	f042 0201 	orreq.w	r2, r2, #1
24003998:	3030      	adds	r0, #48	; 0x30
2400399a:	42a1      	cmp	r1, r4
2400399c:	bf08      	it	eq
2400399e:	f042 0201 	orreq.w	r2, r2, #1
240039a2:	3430      	adds	r4, #48	; 0x30
240039a4:	4281      	cmp	r1, r0
240039a6:	bf08      	it	eq
240039a8:	f042 0201 	orreq.w	r2, r2, #1
240039ac:	3030      	adds	r0, #48	; 0x30
240039ae:	42a1      	cmp	r1, r4
240039b0:	bf08      	it	eq
240039b2:	f042 0201 	orreq.w	r2, r2, #1
240039b6:	4281      	cmp	r1, r0
240039b8:	bf08      	it	eq
240039ba:	f042 0201 	orreq.w	r2, r2, #1
240039be:	b912      	cbnz	r2, 240039c6 <HAL_DMA_Abort_IT+0xaa>
240039c0:	4a35      	ldr	r2, [pc, #212]	; (24003a98 <HAL_DMA_Abort_IT+0x17c>)
240039c2:	4291      	cmp	r1, r2
240039c4:	d10e      	bne.n	240039e4 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
240039c6:	2204      	movs	r2, #4
  return HAL_OK;
240039c8:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
240039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
240039ce:	680b      	ldr	r3, [r1, #0]
240039d0:	f023 0301 	bic.w	r3, r3, #1
240039d4:	600b      	str	r3, [r1, #0]
}
240039d6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240039d8:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
240039da:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
240039dc:	655a      	str	r2, [r3, #84]	; 0x54
}
240039de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
240039e0:	2001      	movs	r0, #1
}
240039e2:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240039e4:	4a2d      	ldr	r2, [pc, #180]	; (24003a9c <HAL_DMA_Abort_IT+0x180>)
240039e6:	4d2e      	ldr	r5, [pc, #184]	; (24003aa0 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240039e8:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240039ea:	42a9      	cmp	r1, r5
240039ec:	bf18      	it	ne
240039ee:	4291      	cmpne	r1, r2
240039f0:	4c2c      	ldr	r4, [pc, #176]	; (24003aa4 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
240039f2:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240039f6:	f105 053c 	add.w	r5, r5, #60	; 0x3c
240039fa:	bf0c      	ite	eq
240039fc:	2201      	moveq	r2, #1
240039fe:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24003a00:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24003a02:	42a1      	cmp	r1, r4
24003a04:	bf08      	it	eq
24003a06:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
24003a0a:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24003a0c:	3428      	adds	r4, #40	; 0x28
24003a0e:	42a9      	cmp	r1, r5
24003a10:	bf08      	it	eq
24003a12:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
24003a16:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24003a1a:	42a1      	cmp	r1, r4
24003a1c:	bf08      	it	eq
24003a1e:	f042 0201 	orreq.w	r2, r2, #1
24003a22:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
24003a24:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24003a26:	42a1      	cmp	r1, r4
24003a28:	bf08      	it	eq
24003a2a:	f042 0201 	orreq.w	r2, r2, #1
24003a2e:	481e      	ldr	r0, [pc, #120]	; (24003aa8 <HAL_DMA_Abort_IT+0x18c>)
24003a30:	4281      	cmp	r1, r0
24003a32:	bf08      	it	eq
24003a34:	f042 0201 	orreq.w	r2, r2, #1
24003a38:	b912      	cbnz	r2, 24003a40 <HAL_DMA_Abort_IT+0x124>
24003a3a:	4a1c      	ldr	r2, [pc, #112]	; (24003aac <HAL_DMA_Abort_IT+0x190>)
24003a3c:	4291      	cmp	r1, r2
24003a3e:	d117      	bne.n	24003a70 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24003a40:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24003a42:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24003a44:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24003a48:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24003a4a:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24003a4e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24003a52:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24003a54:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24003a56:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
24003a58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24003a5a:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
24003a5e:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
24003a60:	b132      	cbz	r2, 24003a70 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24003a62:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24003a64:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24003a68:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24003a6c:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24003a6e:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
24003a70:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
24003a72:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
24003a74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
24003a76:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
24003a7a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
24003a7e:	b11a      	cbz	r2, 24003a88 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
24003a80:	4618      	mov	r0, r3
24003a82:	4790      	blx	r2
  return HAL_OK;
24003a84:	4620      	mov	r0, r4
}
24003a86:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
24003a88:	4610      	mov	r0, r2
}
24003a8a:	bd38      	pop	{r3, r4, r5, pc}
24003a8c:	40020010 	.word	0x40020010
24003a90:	40020040 	.word	0x40020040
24003a94:	40020070 	.word	0x40020070
24003a98:	400204b8 	.word	0x400204b8
24003a9c:	5802541c 	.word	0x5802541c
24003aa0:	58025408 	.word	0x58025408
24003aa4:	58025430 	.word	0x58025430
24003aa8:	58025480 	.word	0x58025480
24003aac:	58025494 	.word	0x58025494

24003ab0 <HAL_DMA_IRQHandler>:
{
24003ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
24003ab4:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
24003ab6:	4b9c      	ldr	r3, [pc, #624]	; (24003d28 <HAL_DMA_IRQHandler+0x278>)
{
24003ab8:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24003aba:	4e9c      	ldr	r6, [pc, #624]	; (24003d2c <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
24003abc:	681d      	ldr	r5, [r3, #0]
{
24003abe:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
24003ac0:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24003ac2:	6803      	ldr	r3, [r0, #0]
24003ac4:	4a9a      	ldr	r2, [pc, #616]	; (24003d30 <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24003ac6:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24003ac8:	4293      	cmp	r3, r2
24003aca:	bf18      	it	ne
24003acc:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
24003ace:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24003ad0:	bf08      	it	eq
24003ad2:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
24003ad4:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24003ad6:	bf18      	it	ne
24003ad8:	2600      	movne	r6, #0
24003ada:	d045      	beq.n	24003b68 <HAL_DMA_IRQHandler+0xb8>
24003adc:	3218      	adds	r2, #24
24003ade:	4895      	ldr	r0, [pc, #596]	; (24003d34 <HAL_DMA_IRQHandler+0x284>)
24003ae0:	4283      	cmp	r3, r0
24003ae2:	bf18      	it	ne
24003ae4:	4293      	cmpne	r3, r2
24003ae6:	f100 0018 	add.w	r0, r0, #24
24003aea:	bf0c      	ite	eq
24003aec:	2201      	moveq	r2, #1
24003aee:	2200      	movne	r2, #0
24003af0:	4283      	cmp	r3, r0
24003af2:	bf08      	it	eq
24003af4:	f042 0201 	orreq.w	r2, r2, #1
24003af8:	3018      	adds	r0, #24
24003afa:	4283      	cmp	r3, r0
24003afc:	bf08      	it	eq
24003afe:	f042 0201 	orreq.w	r2, r2, #1
24003b02:	3018      	adds	r0, #24
24003b04:	4283      	cmp	r3, r0
24003b06:	bf08      	it	eq
24003b08:	f042 0201 	orreq.w	r2, r2, #1
24003b0c:	3018      	adds	r0, #24
24003b0e:	4283      	cmp	r3, r0
24003b10:	bf08      	it	eq
24003b12:	f042 0201 	orreq.w	r2, r2, #1
24003b16:	f500 7056 	add.w	r0, r0, #856	; 0x358
24003b1a:	4283      	cmp	r3, r0
24003b1c:	bf08      	it	eq
24003b1e:	f042 0201 	orreq.w	r2, r2, #1
24003b22:	3018      	adds	r0, #24
24003b24:	4283      	cmp	r3, r0
24003b26:	bf08      	it	eq
24003b28:	f042 0201 	orreq.w	r2, r2, #1
24003b2c:	3018      	adds	r0, #24
24003b2e:	4283      	cmp	r3, r0
24003b30:	bf08      	it	eq
24003b32:	f042 0201 	orreq.w	r2, r2, #1
24003b36:	3018      	adds	r0, #24
24003b38:	4283      	cmp	r3, r0
24003b3a:	bf08      	it	eq
24003b3c:	f042 0201 	orreq.w	r2, r2, #1
24003b40:	3018      	adds	r0, #24
24003b42:	4283      	cmp	r3, r0
24003b44:	bf08      	it	eq
24003b46:	f042 0201 	orreq.w	r2, r2, #1
24003b4a:	3018      	adds	r0, #24
24003b4c:	4283      	cmp	r3, r0
24003b4e:	bf08      	it	eq
24003b50:	f042 0201 	orreq.w	r2, r2, #1
24003b54:	3018      	adds	r0, #24
24003b56:	4283      	cmp	r3, r0
24003b58:	bf08      	it	eq
24003b5a:	f042 0201 	orreq.w	r2, r2, #1
24003b5e:	b91a      	cbnz	r2, 24003b68 <HAL_DMA_IRQHandler+0xb8>
24003b60:	4a75      	ldr	r2, [pc, #468]	; (24003d38 <HAL_DMA_IRQHandler+0x288>)
24003b62:	4293      	cmp	r3, r2
24003b64:	f040 8250 	bne.w	24004008 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24003b68:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
24003b6c:	2208      	movs	r2, #8
24003b6e:	f001 0c1f 	and.w	ip, r1, #31
24003b72:	fa02 f20c 	lsl.w	r2, r2, ip
24003b76:	4217      	tst	r7, r2
24003b78:	f040 8188 	bne.w	24003e8c <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24003b7c:	fa27 f20c 	lsr.w	r2, r7, ip
24003b80:	07d2      	lsls	r2, r2, #31
24003b82:	d50c      	bpl.n	24003b9e <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24003b84:	695a      	ldr	r2, [r3, #20]
24003b86:	0610      	lsls	r0, r2, #24
24003b88:	d509      	bpl.n	24003b9e <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24003b8a:	2201      	movs	r2, #1
24003b8c:	fa02 f20c 	lsl.w	r2, r2, ip
24003b90:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24003b92:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
24003b96:	f042 0202 	orr.w	r2, r2, #2
24003b9a:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24003b9e:	f04f 0e04 	mov.w	lr, #4
24003ba2:	fa0e f00c 	lsl.w	r0, lr, ip
24003ba6:	4238      	tst	r0, r7
24003ba8:	d05b      	beq.n	24003c62 <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24003baa:	2e00      	cmp	r6, #0
24003bac:	d14f      	bne.n	24003c4e <HAL_DMA_IRQHandler+0x19e>
24003bae:	4a61      	ldr	r2, [pc, #388]	; (24003d34 <HAL_DMA_IRQHandler+0x284>)
24003bb0:	f8df 8188 	ldr.w	r8, [pc, #392]	; 24003d3c <HAL_DMA_IRQHandler+0x28c>
24003bb4:	4543      	cmp	r3, r8
24003bb6:	bf18      	it	ne
24003bb8:	4293      	cmpne	r3, r2
24003bba:	f108 0830 	add.w	r8, r8, #48	; 0x30
24003bbe:	bf0c      	ite	eq
24003bc0:	2201      	moveq	r2, #1
24003bc2:	2200      	movne	r2, #0
24003bc4:	4543      	cmp	r3, r8
24003bc6:	bf08      	it	eq
24003bc8:	f042 0201 	orreq.w	r2, r2, #1
24003bcc:	f108 0818 	add.w	r8, r8, #24
24003bd0:	4543      	cmp	r3, r8
24003bd2:	bf08      	it	eq
24003bd4:	f042 0201 	orreq.w	r2, r2, #1
24003bd8:	f108 0818 	add.w	r8, r8, #24
24003bdc:	4543      	cmp	r3, r8
24003bde:	bf08      	it	eq
24003be0:	f042 0201 	orreq.w	r2, r2, #1
24003be4:	f108 0818 	add.w	r8, r8, #24
24003be8:	4543      	cmp	r3, r8
24003bea:	bf08      	it	eq
24003bec:	f042 0201 	orreq.w	r2, r2, #1
24003bf0:	f508 7856 	add.w	r8, r8, #856	; 0x358
24003bf4:	4543      	cmp	r3, r8
24003bf6:	bf08      	it	eq
24003bf8:	f042 0201 	orreq.w	r2, r2, #1
24003bfc:	f108 0818 	add.w	r8, r8, #24
24003c00:	4543      	cmp	r3, r8
24003c02:	bf08      	it	eq
24003c04:	f042 0201 	orreq.w	r2, r2, #1
24003c08:	f108 0818 	add.w	r8, r8, #24
24003c0c:	4543      	cmp	r3, r8
24003c0e:	bf08      	it	eq
24003c10:	f042 0201 	orreq.w	r2, r2, #1
24003c14:	f108 0818 	add.w	r8, r8, #24
24003c18:	4543      	cmp	r3, r8
24003c1a:	bf08      	it	eq
24003c1c:	f042 0201 	orreq.w	r2, r2, #1
24003c20:	f108 0818 	add.w	r8, r8, #24
24003c24:	4543      	cmp	r3, r8
24003c26:	bf08      	it	eq
24003c28:	f042 0201 	orreq.w	r2, r2, #1
24003c2c:	f108 0818 	add.w	r8, r8, #24
24003c30:	4543      	cmp	r3, r8
24003c32:	bf08      	it	eq
24003c34:	f042 0201 	orreq.w	r2, r2, #1
24003c38:	f108 0818 	add.w	r8, r8, #24
24003c3c:	4543      	cmp	r3, r8
24003c3e:	bf08      	it	eq
24003c40:	f042 0201 	orreq.w	r2, r2, #1
24003c44:	b91a      	cbnz	r2, 24003c4e <HAL_DMA_IRQHandler+0x19e>
24003c46:	4a3c      	ldr	r2, [pc, #240]	; (24003d38 <HAL_DMA_IRQHandler+0x288>)
24003c48:	4293      	cmp	r3, r2
24003c4a:	f040 8219 	bne.w	24004080 <HAL_DMA_IRQHandler+0x5d0>
24003c4e:	681a      	ldr	r2, [r3, #0]
24003c50:	0792      	lsls	r2, r2, #30
24003c52:	d506      	bpl.n	24003c62 <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24003c54:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24003c56:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
24003c5a:	f042 0204 	orr.w	r2, r2, #4
24003c5e:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24003c62:	2210      	movs	r2, #16
24003c64:	fa02 fc0c 	lsl.w	ip, r2, ip
24003c68:	ea1c 0f07 	tst.w	ip, r7
24003c6c:	d06c      	beq.n	24003d48 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24003c6e:	2e00      	cmp	r6, #0
24003c70:	d145      	bne.n	24003cfe <HAL_DMA_IRQHandler+0x24e>
24003c72:	4a30      	ldr	r2, [pc, #192]	; (24003d34 <HAL_DMA_IRQHandler+0x284>)
24003c74:	4e31      	ldr	r6, [pc, #196]	; (24003d3c <HAL_DMA_IRQHandler+0x28c>)
24003c76:	42b3      	cmp	r3, r6
24003c78:	bf18      	it	ne
24003c7a:	4293      	cmpne	r3, r2
24003c7c:	f106 0630 	add.w	r6, r6, #48	; 0x30
24003c80:	bf0c      	ite	eq
24003c82:	2201      	moveq	r2, #1
24003c84:	2200      	movne	r2, #0
24003c86:	42b3      	cmp	r3, r6
24003c88:	bf08      	it	eq
24003c8a:	f042 0201 	orreq.w	r2, r2, #1
24003c8e:	3618      	adds	r6, #24
24003c90:	42b3      	cmp	r3, r6
24003c92:	bf08      	it	eq
24003c94:	f042 0201 	orreq.w	r2, r2, #1
24003c98:	3618      	adds	r6, #24
24003c9a:	42b3      	cmp	r3, r6
24003c9c:	bf08      	it	eq
24003c9e:	f042 0201 	orreq.w	r2, r2, #1
24003ca2:	3618      	adds	r6, #24
24003ca4:	42b3      	cmp	r3, r6
24003ca6:	bf08      	it	eq
24003ca8:	f042 0201 	orreq.w	r2, r2, #1
24003cac:	f506 7656 	add.w	r6, r6, #856	; 0x358
24003cb0:	42b3      	cmp	r3, r6
24003cb2:	bf08      	it	eq
24003cb4:	f042 0201 	orreq.w	r2, r2, #1
24003cb8:	3618      	adds	r6, #24
24003cba:	42b3      	cmp	r3, r6
24003cbc:	bf08      	it	eq
24003cbe:	f042 0201 	orreq.w	r2, r2, #1
24003cc2:	3618      	adds	r6, #24
24003cc4:	42b3      	cmp	r3, r6
24003cc6:	bf08      	it	eq
24003cc8:	f042 0201 	orreq.w	r2, r2, #1
24003ccc:	3618      	adds	r6, #24
24003cce:	42b3      	cmp	r3, r6
24003cd0:	bf08      	it	eq
24003cd2:	f042 0201 	orreq.w	r2, r2, #1
24003cd6:	3618      	adds	r6, #24
24003cd8:	42b3      	cmp	r3, r6
24003cda:	bf08      	it	eq
24003cdc:	f042 0201 	orreq.w	r2, r2, #1
24003ce0:	3618      	adds	r6, #24
24003ce2:	42b3      	cmp	r3, r6
24003ce4:	bf08      	it	eq
24003ce6:	f042 0201 	orreq.w	r2, r2, #1
24003cea:	3618      	adds	r6, #24
24003cec:	42b3      	cmp	r3, r6
24003cee:	bf08      	it	eq
24003cf0:	f042 0201 	orreq.w	r2, r2, #1
24003cf4:	b91a      	cbnz	r2, 24003cfe <HAL_DMA_IRQHandler+0x24e>
24003cf6:	4a10      	ldr	r2, [pc, #64]	; (24003d38 <HAL_DMA_IRQHandler+0x288>)
24003cf8:	4293      	cmp	r3, r2
24003cfa:	f040 81c9 	bne.w	24004090 <HAL_DMA_IRQHandler+0x5e0>
24003cfe:	681a      	ldr	r2, [r3, #0]
24003d00:	0710      	lsls	r0, r2, #28
24003d02:	d521      	bpl.n	24003d48 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24003d04:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24003d08:	681a      	ldr	r2, [r3, #0]
24003d0a:	0356      	lsls	r6, r2, #13
24003d0c:	f100 814c 	bmi.w	24003fa8 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24003d10:	681a      	ldr	r2, [r3, #0]
24003d12:	05d2      	lsls	r2, r2, #23
24003d14:	d403      	bmi.n	24003d1e <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24003d16:	681a      	ldr	r2, [r3, #0]
24003d18:	f022 0208 	bic.w	r2, r2, #8
24003d1c:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
24003d1e:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
24003d22:	b18b      	cbz	r3, 24003d48 <HAL_DMA_IRQHandler+0x298>
24003d24:	e00c      	b.n	24003d40 <HAL_DMA_IRQHandler+0x290>
24003d26:	bf00      	nop
24003d28:	2000002c 	.word	0x2000002c
24003d2c:	40020010 	.word	0x40020010
24003d30:	40020028 	.word	0x40020028
24003d34:	40020058 	.word	0x40020058
24003d38:	400204b8 	.word	0x400204b8
24003d3c:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
24003d40:	4648      	mov	r0, r9
24003d42:	4798      	blx	r3
24003d44:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24003d48:	f001 011f 	and.w	r1, r1, #31
24003d4c:	2620      	movs	r6, #32
24003d4e:	408e      	lsls	r6, r1
24003d50:	423e      	tst	r6, r7
24003d52:	d068      	beq.n	24003e26 <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24003d54:	f8d9 2000 	ldr.w	r2, [r9]
24003d58:	4ba5      	ldr	r3, [pc, #660]	; (24003ff0 <HAL_DMA_IRQHandler+0x540>)
24003d5a:	4fa6      	ldr	r7, [pc, #664]	; (24003ff4 <HAL_DMA_IRQHandler+0x544>)
24003d5c:	42ba      	cmp	r2, r7
24003d5e:	bf18      	it	ne
24003d60:	429a      	cmpne	r2, r3
24003d62:	f107 0718 	add.w	r7, r7, #24
24003d66:	bf0c      	ite	eq
24003d68:	2301      	moveq	r3, #1
24003d6a:	2300      	movne	r3, #0
24003d6c:	42ba      	cmp	r2, r7
24003d6e:	bf08      	it	eq
24003d70:	f043 0301 	orreq.w	r3, r3, #1
24003d74:	3718      	adds	r7, #24
24003d76:	42ba      	cmp	r2, r7
24003d78:	bf08      	it	eq
24003d7a:	f043 0301 	orreq.w	r3, r3, #1
24003d7e:	3718      	adds	r7, #24
24003d80:	42ba      	cmp	r2, r7
24003d82:	bf08      	it	eq
24003d84:	f043 0301 	orreq.w	r3, r3, #1
24003d88:	3718      	adds	r7, #24
24003d8a:	42ba      	cmp	r2, r7
24003d8c:	bf08      	it	eq
24003d8e:	f043 0301 	orreq.w	r3, r3, #1
24003d92:	3718      	adds	r7, #24
24003d94:	42ba      	cmp	r2, r7
24003d96:	bf08      	it	eq
24003d98:	f043 0301 	orreq.w	r3, r3, #1
24003d9c:	3718      	adds	r7, #24
24003d9e:	42ba      	cmp	r2, r7
24003da0:	bf08      	it	eq
24003da2:	f043 0301 	orreq.w	r3, r3, #1
24003da6:	f507 7756 	add.w	r7, r7, #856	; 0x358
24003daa:	42ba      	cmp	r2, r7
24003dac:	bf08      	it	eq
24003dae:	f043 0301 	orreq.w	r3, r3, #1
24003db2:	3718      	adds	r7, #24
24003db4:	42ba      	cmp	r2, r7
24003db6:	bf08      	it	eq
24003db8:	f043 0301 	orreq.w	r3, r3, #1
24003dbc:	3718      	adds	r7, #24
24003dbe:	42ba      	cmp	r2, r7
24003dc0:	bf08      	it	eq
24003dc2:	f043 0301 	orreq.w	r3, r3, #1
24003dc6:	3718      	adds	r7, #24
24003dc8:	42ba      	cmp	r2, r7
24003dca:	bf08      	it	eq
24003dcc:	f043 0301 	orreq.w	r3, r3, #1
24003dd0:	3718      	adds	r7, #24
24003dd2:	42ba      	cmp	r2, r7
24003dd4:	bf08      	it	eq
24003dd6:	f043 0301 	orreq.w	r3, r3, #1
24003dda:	3718      	adds	r7, #24
24003ddc:	42ba      	cmp	r2, r7
24003dde:	bf08      	it	eq
24003de0:	f043 0301 	orreq.w	r3, r3, #1
24003de4:	3718      	adds	r7, #24
24003de6:	42ba      	cmp	r2, r7
24003de8:	bf08      	it	eq
24003dea:	f043 0301 	orreq.w	r3, r3, #1
24003dee:	b91b      	cbnz	r3, 24003df8 <HAL_DMA_IRQHandler+0x348>
24003df0:	4b81      	ldr	r3, [pc, #516]	; (24003ff8 <HAL_DMA_IRQHandler+0x548>)
24003df2:	429a      	cmp	r2, r3
24003df4:	f040 8162 	bne.w	240040bc <HAL_DMA_IRQHandler+0x60c>
24003df8:	6813      	ldr	r3, [r2, #0]
24003dfa:	06db      	lsls	r3, r3, #27
24003dfc:	d513      	bpl.n	24003e26 <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24003dfe:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
24003e00:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
24003e04:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24003e06:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
24003e08:	f000 80ae 	beq.w	24003f68 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24003e0c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24003e10:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24003e12:	f000 80d3 	beq.w	24003fbc <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24003e16:	031c      	lsls	r4, r3, #12
24003e18:	f140 80de 	bpl.w	24003fd8 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
24003e1c:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
24003e20:	b10b      	cbz	r3, 24003e26 <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
24003e22:	4648      	mov	r0, r9
24003e24:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24003e26:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
24003e2a:	2b00      	cmp	r3, #0
24003e2c:	f000 80b9 	beq.w	24003fa2 <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24003e30:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
24003e34:	07d8      	lsls	r0, r3, #31
24003e36:	d51f      	bpl.n	24003e78 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
24003e38:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
24003e3c:	2104      	movs	r1, #4
24003e3e:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
24003e42:	6813      	ldr	r3, [r2, #0]
24003e44:	f023 0301 	bic.w	r3, r3, #1
24003e48:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
24003e4a:	4b6c      	ldr	r3, [pc, #432]	; (24003ffc <HAL_DMA_IRQHandler+0x54c>)
24003e4c:	fba3 3505 	umull	r3, r5, r3, r5
24003e50:	0aad      	lsrs	r5, r5, #10
24003e52:	e002      	b.n	24003e5a <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24003e54:	6813      	ldr	r3, [r2, #0]
24003e56:	07d9      	lsls	r1, r3, #31
24003e58:	d504      	bpl.n	24003e64 <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
24003e5a:	9b01      	ldr	r3, [sp, #4]
24003e5c:	3301      	adds	r3, #1
24003e5e:	42ab      	cmp	r3, r5
24003e60:	9301      	str	r3, [sp, #4]
24003e62:	d9f7      	bls.n	24003e54 <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24003e64:	6813      	ldr	r3, [r2, #0]
24003e66:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
24003e68:	bf4c      	ite	mi
24003e6a:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
24003e6c:	2301      	movpl	r3, #1
24003e6e:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
24003e72:	2300      	movs	r3, #0
24003e74:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
24003e78:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
24003e7c:	2b00      	cmp	r3, #0
24003e7e:	f000 8090 	beq.w	24003fa2 <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
24003e82:	4648      	mov	r0, r9
}
24003e84:	b003      	add	sp, #12
24003e86:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
24003e8a:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
24003e8c:	6818      	ldr	r0, [r3, #0]
24003e8e:	0740      	lsls	r0, r0, #29
24003e90:	d50a      	bpl.n	24003ea8 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
24003e92:	6818      	ldr	r0, [r3, #0]
24003e94:	f020 0004 	bic.w	r0, r0, #4
24003e98:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24003e9a:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24003e9c:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
24003ea0:	f042 0201 	orr.w	r2, r2, #1
24003ea4:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24003ea8:	fa27 f20c 	lsr.w	r2, r7, ip
24003eac:	07d2      	lsls	r2, r2, #31
24003eae:	f57f ae76 	bpl.w	24003b9e <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24003eb2:	4a53      	ldr	r2, [pc, #332]	; (24004000 <HAL_DMA_IRQHandler+0x550>)
24003eb4:	4853      	ldr	r0, [pc, #332]	; (24004004 <HAL_DMA_IRQHandler+0x554>)
24003eb6:	4283      	cmp	r3, r0
24003eb8:	bf18      	it	ne
24003eba:	4293      	cmpne	r3, r2
24003ebc:	f100 0030 	add.w	r0, r0, #48	; 0x30
24003ec0:	bf0c      	ite	eq
24003ec2:	2201      	moveq	r2, #1
24003ec4:	2200      	movne	r2, #0
24003ec6:	4283      	cmp	r3, r0
24003ec8:	bf08      	it	eq
24003eca:	f042 0201 	orreq.w	r2, r2, #1
24003ece:	3018      	adds	r0, #24
24003ed0:	4283      	cmp	r3, r0
24003ed2:	bf08      	it	eq
24003ed4:	f042 0201 	orreq.w	r2, r2, #1
24003ed8:	3018      	adds	r0, #24
24003eda:	4283      	cmp	r3, r0
24003edc:	bf08      	it	eq
24003ede:	f042 0201 	orreq.w	r2, r2, #1
24003ee2:	3018      	adds	r0, #24
24003ee4:	4283      	cmp	r3, r0
24003ee6:	bf08      	it	eq
24003ee8:	f042 0201 	orreq.w	r2, r2, #1
24003eec:	f500 7056 	add.w	r0, r0, #856	; 0x358
24003ef0:	4283      	cmp	r3, r0
24003ef2:	bf08      	it	eq
24003ef4:	f042 0201 	orreq.w	r2, r2, #1
24003ef8:	3018      	adds	r0, #24
24003efa:	4283      	cmp	r3, r0
24003efc:	bf08      	it	eq
24003efe:	f042 0201 	orreq.w	r2, r2, #1
24003f02:	3018      	adds	r0, #24
24003f04:	4283      	cmp	r3, r0
24003f06:	bf08      	it	eq
24003f08:	f042 0201 	orreq.w	r2, r2, #1
24003f0c:	3018      	adds	r0, #24
24003f0e:	4283      	cmp	r3, r0
24003f10:	bf08      	it	eq
24003f12:	f042 0201 	orreq.w	r2, r2, #1
24003f16:	3018      	adds	r0, #24
24003f18:	4283      	cmp	r3, r0
24003f1a:	bf08      	it	eq
24003f1c:	f042 0201 	orreq.w	r2, r2, #1
24003f20:	3018      	adds	r0, #24
24003f22:	4283      	cmp	r3, r0
24003f24:	bf08      	it	eq
24003f26:	f042 0201 	orreq.w	r2, r2, #1
24003f2a:	3018      	adds	r0, #24
24003f2c:	4283      	cmp	r3, r0
24003f2e:	bf08      	it	eq
24003f30:	f042 0201 	orreq.w	r2, r2, #1
24003f34:	3018      	adds	r0, #24
24003f36:	4283      	cmp	r3, r0
24003f38:	bf08      	it	eq
24003f3a:	f042 0201 	orreq.w	r2, r2, #1
24003f3e:	2a00      	cmp	r2, #0
24003f40:	f47f ae20 	bne.w	24003b84 <HAL_DMA_IRQHandler+0xd4>
24003f44:	2e00      	cmp	r6, #0
24003f46:	f47f ae1d 	bne.w	24003b84 <HAL_DMA_IRQHandler+0xd4>
24003f4a:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24003f4c:	2204      	movs	r2, #4
24003f4e:	fa02 f20c 	lsl.w	r2, r2, ip
24003f52:	423a      	tst	r2, r7
24003f54:	f040 8094 	bne.w	24004080 <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24003f58:	2210      	movs	r2, #16
24003f5a:	fa02 fc0c 	lsl.w	ip, r2, ip
24003f5e:	ea17 0f0c 	tst.w	r7, ip
24003f62:	f43f aef1 	beq.w	24003d48 <HAL_DMA_IRQHandler+0x298>
24003f66:	e684      	b.n	24003c72 <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24003f68:	f023 0316 	bic.w	r3, r3, #22
24003f6c:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24003f6e:	6953      	ldr	r3, [r2, #20]
24003f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24003f74:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24003f76:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
24003f7a:	b39b      	cbz	r3, 24003fe4 <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24003f7c:	6813      	ldr	r3, [r2, #0]
24003f7e:	f023 0308 	bic.w	r3, r3, #8
24003f82:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24003f84:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
24003f86:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
24003f88:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24003f8a:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
24003f8e:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24003f92:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
24003f94:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24003f98:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
24003f9c:	2b00      	cmp	r3, #0
24003f9e:	f47f af70 	bne.w	24003e82 <HAL_DMA_IRQHandler+0x3d2>
}
24003fa2:	b003      	add	sp, #12
24003fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24003fa8:	681b      	ldr	r3, [r3, #0]
24003faa:	0318      	lsls	r0, r3, #12
24003fac:	f57f aeb7 	bpl.w	24003d1e <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
24003fb0:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
24003fb4:	2b00      	cmp	r3, #0
24003fb6:	f47f aec3 	bne.w	24003d40 <HAL_DMA_IRQHandler+0x290>
24003fba:	e6c5      	b.n	24003d48 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24003fbc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
24003fc0:	f47f af2c 	bne.w	24003e1c <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24003fc4:	6811      	ldr	r1, [r2, #0]
24003fc6:	f021 0110 	bic.w	r1, r1, #16
24003fca:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
24003fcc:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
24003fce:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
24003fd2:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
24003fd6:	e721      	b.n	24003e1c <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
24003fd8:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
24003fdc:	2b00      	cmp	r3, #0
24003fde:	f47f af20 	bne.w	24003e22 <HAL_DMA_IRQHandler+0x372>
24003fe2:	e720      	b.n	24003e26 <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24003fe4:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
24003fe8:	2b00      	cmp	r3, #0
24003fea:	d1c7      	bne.n	24003f7c <HAL_DMA_IRQHandler+0x4cc>
24003fec:	e7ca      	b.n	24003f84 <HAL_DMA_IRQHandler+0x4d4>
24003fee:	bf00      	nop
24003ff0:	40020010 	.word	0x40020010
24003ff4:	40020028 	.word	0x40020028
24003ff8:	400204b8 	.word	0x400204b8
24003ffc:	1b4e81b5 	.word	0x1b4e81b5
24004000:	40020058 	.word	0x40020058
24004004:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24004008:	4a4e      	ldr	r2, [pc, #312]	; (24004144 <HAL_DMA_IRQHandler+0x694>)
2400400a:	4d4f      	ldr	r5, [pc, #316]	; (24004148 <HAL_DMA_IRQHandler+0x698>)
2400400c:	42ab      	cmp	r3, r5
2400400e:	bf18      	it	ne
24004010:	4293      	cmpne	r3, r2
24004012:	f105 0514 	add.w	r5, r5, #20
24004016:	bf0c      	ite	eq
24004018:	2201      	moveq	r2, #1
2400401a:	2200      	movne	r2, #0
2400401c:	42ab      	cmp	r3, r5
2400401e:	bf08      	it	eq
24004020:	f042 0201 	orreq.w	r2, r2, #1
24004024:	3514      	adds	r5, #20
24004026:	42ab      	cmp	r3, r5
24004028:	bf08      	it	eq
2400402a:	f042 0201 	orreq.w	r2, r2, #1
2400402e:	3514      	adds	r5, #20
24004030:	42ab      	cmp	r3, r5
24004032:	bf08      	it	eq
24004034:	f042 0201 	orreq.w	r2, r2, #1
24004038:	3514      	adds	r5, #20
2400403a:	42ab      	cmp	r3, r5
2400403c:	bf08      	it	eq
2400403e:	f042 0201 	orreq.w	r2, r2, #1
24004042:	3514      	adds	r5, #20
24004044:	42ab      	cmp	r3, r5
24004046:	bf08      	it	eq
24004048:	f042 0201 	orreq.w	r2, r2, #1
2400404c:	b912      	cbnz	r2, 24004054 <HAL_DMA_IRQHandler+0x5a4>
2400404e:	4a3f      	ldr	r2, [pc, #252]	; (2400414c <HAL_DMA_IRQHandler+0x69c>)
24004050:	4293      	cmp	r3, r2
24004052:	d1a6      	bne.n	24003fa2 <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24004054:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
24004058:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
2400405a:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
2400405c:	f005 051f 	and.w	r5, r5, #31
24004060:	40ae      	lsls	r6, r5
24004062:	420e      	tst	r6, r1
24004064:	d019      	beq.n	2400409a <HAL_DMA_IRQHandler+0x5ea>
24004066:	0757      	lsls	r7, r2, #29
24004068:	d517      	bpl.n	2400409a <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2400406a:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
2400406c:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
2400406e:	d54b      	bpl.n	24004108 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24004070:	03d1      	lsls	r1, r2, #15
24004072:	d44f      	bmi.n	24004114 <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
24004074:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
24004078:	2b00      	cmp	r3, #0
2400407a:	f47f af02 	bne.w	24003e82 <HAL_DMA_IRQHandler+0x3d2>
2400407e:	e790      	b.n	24003fa2 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24004080:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24004082:	2210      	movs	r2, #16
24004084:	fa02 fc0c 	lsl.w	ip, r2, ip
24004088:	ea17 0f0c 	tst.w	r7, ip
2400408c:	f43f ae5c 	beq.w	24003d48 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24004090:	681a      	ldr	r2, [r3, #0]
24004092:	0752      	lsls	r2, r2, #29
24004094:	f57f ae58 	bpl.w	24003d48 <HAL_DMA_IRQHandler+0x298>
24004098:	e634      	b.n	24003d04 <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
2400409a:	2602      	movs	r6, #2
2400409c:	40ae      	lsls	r6, r5
2400409e:	420e      	tst	r6, r1
240040a0:	d011      	beq.n	240040c6 <HAL_DMA_IRQHandler+0x616>
240040a2:	0797      	lsls	r7, r2, #30
240040a4:	d50f      	bpl.n	240040c6 <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
240040a6:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240040a8:	0414      	lsls	r4, r2, #16
240040aa:	d539      	bpl.n	24004120 <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
240040ac:	03d0      	lsls	r0, r2, #15
240040ae:	d443      	bmi.n	24004138 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
240040b0:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
240040b4:	2b00      	cmp	r3, #0
240040b6:	f47f aee4 	bne.w	24003e82 <HAL_DMA_IRQHandler+0x3d2>
240040ba:	e772      	b.n	24003fa2 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
240040bc:	6813      	ldr	r3, [r2, #0]
240040be:	079f      	lsls	r7, r3, #30
240040c0:	f57f aeb1 	bpl.w	24003e26 <HAL_DMA_IRQHandler+0x376>
240040c4:	e69b      	b.n	24003dfe <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
240040c6:	2608      	movs	r6, #8
240040c8:	40ae      	lsls	r6, r5
240040ca:	420e      	tst	r6, r1
240040cc:	f43f af69 	beq.w	24003fa2 <HAL_DMA_IRQHandler+0x4f2>
240040d0:	0711      	lsls	r1, r2, #28
240040d2:	f57f af66 	bpl.w	24003fa2 <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
240040d6:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
240040d8:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
240040da:	f022 020e 	bic.w	r2, r2, #14
240040de:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
240040e0:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
240040e2:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
240040e6:	fa03 f505 	lsl.w	r5, r3, r5
240040ea:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
240040ec:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
240040f0:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
240040f4:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
240040f8:	2a00      	cmp	r2, #0
240040fa:	f43f af52 	beq.w	24003fa2 <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
240040fe:	4648      	mov	r0, r9
}
24004100:	b003      	add	sp, #12
24004102:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
24004106:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24004108:	0692      	lsls	r2, r2, #26
2400410a:	d403      	bmi.n	24004114 <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
2400410c:	681a      	ldr	r2, [r3, #0]
2400410e:	f022 0204 	bic.w	r2, r2, #4
24004112:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
24004114:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
24004118:	2b00      	cmp	r3, #0
2400411a:	f47f aeb2 	bne.w	24003e82 <HAL_DMA_IRQHandler+0x3d2>
2400411e:	e740      	b.n	24003fa2 <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24004120:	f012 0220 	ands.w	r2, r2, #32
24004124:	d108      	bne.n	24004138 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24004126:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
24004128:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
2400412a:	f021 010a 	bic.w	r1, r1, #10
2400412e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
24004130:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24004134:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
24004138:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
2400413c:	2b00      	cmp	r3, #0
2400413e:	f47f aea0 	bne.w	24003e82 <HAL_DMA_IRQHandler+0x3d2>
24004142:	e72e      	b.n	24003fa2 <HAL_DMA_IRQHandler+0x4f2>
24004144:	58025408 	.word	0x58025408
24004148:	5802541c 	.word	0x5802541c
2400414c:	58025494 	.word	0x58025494

24004150 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
24004150:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
24004152:	4770      	bx	lr

24004154 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
24004154:	b470      	push	{r4, r5, r6}
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
24004156:	7a0b      	ldrb	r3, [r1, #8]
{
24004158:	4602      	mov	r2, r0
  if(pSyncConfig->SyncEnable == ENABLE)
2400415a:	2b01      	cmp	r3, #1
2400415c:	d029      	beq.n	240041b2 <HAL_DMAEx_ConfigMuxSync+0x5e>
  uint32_t syncPolarity = 0;
2400415e:	2400      	movs	r4, #0
  uint32_t syncSignalID = 0;
24004160:	4625      	mov	r5, r4
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
24004162:	f892 0035 	ldrb.w	r0, [r2, #53]	; 0x35
24004166:	2801      	cmp	r0, #1
24004168:	d11d      	bne.n	240041a6 <HAL_DMAEx_ConfigMuxSync+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
2400416a:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
2400416e:	2801      	cmp	r0, #1
24004170:	d022      	beq.n	240041b8 <HAL_DMAEx_ConfigMuxSync+0x64>

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24004172:	68ce      	ldr	r6, [r1, #12]
24004174:	041b      	lsls	r3, r3, #16
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
24004176:	6e10      	ldr	r0, [r2, #96]	; 0x60
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24004178:	3e01      	subs	r6, #1
2400417a:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
2400417e:	6806      	ldr	r6, [r0, #0]
24004180:	f426 3681 	bic.w	r6, r6, #66048	; 0x10200
24004184:	6006      	str	r6, [r0, #0]
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24004186:	7a4e      	ldrb	r6, [r1, #9]
24004188:	6801      	ldr	r1, [r0, #0]
2400418a:	b2c9      	uxtb	r1, r1
2400418c:	430b      	orrs	r3, r1
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
2400418e:	2100      	movs	r1, #0
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24004190:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
24004194:	4323      	orrs	r3, r4
24004196:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
2400419a:	6003      	str	r3, [r0, #0]

    return HAL_OK;
2400419c:	4608      	mov	r0, r1
    __HAL_UNLOCK(hdma);
2400419e:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;

    /* Return error status */
    return HAL_ERROR;
  }
}
240041a2:	bc70      	pop	{r4, r5, r6}
240041a4:	4770      	bx	lr
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240041a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    return HAL_ERROR;
240041aa:	2001      	movs	r0, #1
}
240041ac:	bc70      	pop	{r4, r5, r6}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240041ae:	6553      	str	r3, [r2, #84]	; 0x54
}
240041b0:	4770      	bx	lr
    syncPolarity = pSyncConfig->SyncPolarity;
240041b2:	e9d1 5400 	ldrd	r5, r4, [r1]
240041b6:	e7d4      	b.n	24004162 <HAL_DMAEx_ConfigMuxSync+0xe>
    __HAL_LOCK(hdma);
240041b8:	2002      	movs	r0, #2
}
240041ba:	bc70      	pop	{r4, r5, r6}
240041bc:	4770      	bx	lr
240041be:	bf00      	nop

240041c0 <HAL_DMAEx_MUX_IRQHandler>:
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
240041c0:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
{
240041c4:	b570      	push	{r4, r5, r6, lr}
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
240041c6:	6819      	ldr	r1, [r3, #0]
{
240041c8:	4604      	mov	r4, r0
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
240041ca:	4211      	tst	r1, r2
240041cc:	d00c      	beq.n	240041e8 <HAL_DMAEx_MUX_IRQHandler+0x28>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240041ce:	6e05      	ldr	r5, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;

    if(hdma->XferErrorCallback != NULL)
240041d0:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240041d2:	6829      	ldr	r1, [r5, #0]
240041d4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
240041d8:	6029      	str	r1, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240041da:	605a      	str	r2, [r3, #4]
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
240041dc:	6d43      	ldr	r3, [r0, #84]	; 0x54
240041de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
240041e2:	6543      	str	r3, [r0, #84]	; 0x54
    if(hdma->XferErrorCallback != NULL)
240041e4:	b106      	cbz	r6, 240041e8 <HAL_DMAEx_MUX_IRQHandler+0x28>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
240041e6:	47b0      	blx	r6
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
240041e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
240041ea:	b19b      	cbz	r3, 24004214 <HAL_DMAEx_MUX_IRQHandler+0x54>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
240041ec:	e9d4 211c 	ldrd	r2, r1, [r4, #112]	; 0x70
240041f0:	6810      	ldr	r0, [r2, #0]
240041f2:	4208      	tst	r0, r1
240041f4:	d00e      	beq.n	24004214 <HAL_DMAEx_MUX_IRQHandler+0x54>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240041f6:	6818      	ldr	r0, [r3, #0]
240041f8:	f420 7080 	bic.w	r0, r0, #256	; 0x100
240041fc:	6018      	str	r0, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240041fe:	6051      	str	r1, [r2, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24004200:	6d63      	ldr	r3, [r4, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
24004202:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24004204:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
24004208:	6563      	str	r3, [r4, #84]	; 0x54
      if(hdma->XferErrorCallback != NULL)
2400420a:	b11a      	cbz	r2, 24004214 <HAL_DMAEx_MUX_IRQHandler+0x54>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
2400420c:	4620      	mov	r0, r4
      }
    }
  }
}
2400420e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hdma->XferErrorCallback(hdma);
24004212:	4710      	bx	r2
}
24004214:	bd70      	pop	{r4, r5, r6, pc}
24004216:	bf00      	nop

24004218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
24004218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400421c:	680c      	ldr	r4, [r1, #0]
{
2400421e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24004220:	2c00      	cmp	r4, #0
24004222:	f000 80a6 	beq.w	24004372 <HAL_GPIO_Init+0x15a>
24004226:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2400422a:	4f8e      	ldr	r7, [pc, #568]	; (24004464 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
2400422c:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
2400422e:	2201      	movs	r2, #1
24004230:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
24004232:	ea12 0e04 	ands.w	lr, r2, r4
24004236:	f000 8095 	beq.w	24004364 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
2400423a:	684d      	ldr	r5, [r1, #4]
2400423c:	f005 0903 	and.w	r9, r5, #3
24004240:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
24004244:	2e01      	cmp	r6, #1
24004246:	f240 8097 	bls.w	24004378 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
2400424a:	f1b9 0f03 	cmp.w	r9, #3
2400424e:	f040 80d1 	bne.w	240043f4 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24004252:	fa09 f20c 	lsl.w	r2, r9, ip
24004256:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
2400425a:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
2400425c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24004260:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24004264:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
24004268:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
2400426a:	d07b      	beq.n	24004364 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2400426c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
24004270:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24004274:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24004278:	f042 0202 	orr.w	r2, r2, #2
2400427c:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24004280:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24004284:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
24004288:	f508 6880 	add.w	r8, r8, #1024	; 0x400
2400428c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
24004290:	f002 0202 	and.w	r2, r2, #2
24004294:	9201      	str	r2, [sp, #4]
24004296:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
24004298:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
2400429a:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
2400429e:	fa02 f209 	lsl.w	r2, r2, r9
240042a2:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240042a6:	4e70      	ldr	r6, [pc, #448]	; (24004468 <HAL_GPIO_Init+0x250>)
240042a8:	42b0      	cmp	r0, r6
240042aa:	d029      	beq.n	24004300 <HAL_GPIO_Init+0xe8>
240042ac:	f506 6680 	add.w	r6, r6, #1024	; 0x400
240042b0:	42b0      	cmp	r0, r6
240042b2:	f000 80ac 	beq.w	2400440e <HAL_GPIO_Init+0x1f6>
240042b6:	4e6d      	ldr	r6, [pc, #436]	; (2400446c <HAL_GPIO_Init+0x254>)
240042b8:	42b0      	cmp	r0, r6
240042ba:	f000 80ae 	beq.w	2400441a <HAL_GPIO_Init+0x202>
240042be:	4e6c      	ldr	r6, [pc, #432]	; (24004470 <HAL_GPIO_Init+0x258>)
240042c0:	42b0      	cmp	r0, r6
240042c2:	f000 809e 	beq.w	24004402 <HAL_GPIO_Init+0x1ea>
240042c6:	4e6b      	ldr	r6, [pc, #428]	; (24004474 <HAL_GPIO_Init+0x25c>)
240042c8:	42b0      	cmp	r0, r6
240042ca:	f000 80b2 	beq.w	24004432 <HAL_GPIO_Init+0x21a>
240042ce:	4e6a      	ldr	r6, [pc, #424]	; (24004478 <HAL_GPIO_Init+0x260>)
240042d0:	42b0      	cmp	r0, r6
240042d2:	f000 80b4 	beq.w	2400443e <HAL_GPIO_Init+0x226>
240042d6:	4e69      	ldr	r6, [pc, #420]	; (2400447c <HAL_GPIO_Init+0x264>)
240042d8:	42b0      	cmp	r0, r6
240042da:	f000 80a4 	beq.w	24004426 <HAL_GPIO_Init+0x20e>
240042de:	4e68      	ldr	r6, [pc, #416]	; (24004480 <HAL_GPIO_Init+0x268>)
240042e0:	42b0      	cmp	r0, r6
240042e2:	f000 80b2 	beq.w	2400444a <HAL_GPIO_Init+0x232>
240042e6:	4e67      	ldr	r6, [pc, #412]	; (24004484 <HAL_GPIO_Init+0x26c>)
240042e8:	42b0      	cmp	r0, r6
240042ea:	f000 80b4 	beq.w	24004456 <HAL_GPIO_Init+0x23e>
240042ee:	4e66      	ldr	r6, [pc, #408]	; (24004488 <HAL_GPIO_Init+0x270>)
240042f0:	42b0      	cmp	r0, r6
240042f2:	bf0c      	ite	eq
240042f4:	2609      	moveq	r6, #9
240042f6:	260a      	movne	r6, #10
240042f8:	fa06 f909 	lsl.w	r9, r6, r9
240042fc:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
24004300:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
24004304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24004308:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
2400430a:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
2400430e:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
24004310:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
24004314:	bf54      	ite	pl
24004316:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
2400431a:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
2400431e:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24004320:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
24004322:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
24004324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
24004328:	bf54      	ite	pl
2400432a:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
2400432e:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
24004332:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
24004334:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24004338:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
2400433a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
2400433e:	bf54      	ite	pl
24004340:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
24004344:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
24004348:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
2400434a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
2400434e:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
24004352:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
24004356:	bf54      	ite	pl
24004358:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
2400435c:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
24004360:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
24004364:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24004366:	f10c 0c02 	add.w	ip, ip, #2
2400436a:	fa34 f203 	lsrs.w	r2, r4, r3
2400436e:	f47f af5e 	bne.w	2400422e <HAL_GPIO_Init+0x16>
  }
}
24004372:	b003      	add	sp, #12
24004374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24004378:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
2400437c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400437e:	fa08 f80c 	lsl.w	r8, r8, ip
24004382:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
24004386:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24004388:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
2400438c:	fa06 f60c 	lsl.w	r6, r6, ip
24004390:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
24004394:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24004396:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
2400439a:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
2400439e:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
240043a0:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240043a4:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
240043a6:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
240043a8:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
240043aa:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
240043ae:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
240043b0:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
240043b4:	fa06 f60c 	lsl.w	r6, r6, ip
240043b8:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
240043bc:	fa09 f20c 	lsl.w	r2, r9, ip
240043c0:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
240043c2:	f47f af4a 	bne.w	2400425a <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
240043c6:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
240043ca:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
240043ce:	ea4f 0b86 	mov.w	fp, r6, lsl #2
240043d2:	260f      	movs	r6, #15
240043d4:	eb00 0989 	add.w	r9, r0, r9, lsl #2
240043d8:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
240043dc:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
240043e0:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
240043e4:	690e      	ldr	r6, [r1, #16]
240043e6:	fa06 f60b 	lsl.w	r6, r6, fp
240043ea:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
240043ee:	f8c9 6020 	str.w	r6, [r9, #32]
240043f2:	e732      	b.n	2400425a <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
240043f4:	f04f 0803 	mov.w	r8, #3
240043f8:	fa08 f80c 	lsl.w	r8, r8, ip
240043fc:	ea6f 0808 	mvn.w	r8, r8
24004400:	e7d2      	b.n	240043a8 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24004402:	2603      	movs	r6, #3
24004404:	fa06 f909 	lsl.w	r9, r6, r9
24004408:	ea42 0209 	orr.w	r2, r2, r9
2400440c:	e778      	b.n	24004300 <HAL_GPIO_Init+0xe8>
2400440e:	2601      	movs	r6, #1
24004410:	fa06 f909 	lsl.w	r9, r6, r9
24004414:	ea42 0209 	orr.w	r2, r2, r9
24004418:	e772      	b.n	24004300 <HAL_GPIO_Init+0xe8>
2400441a:	2602      	movs	r6, #2
2400441c:	fa06 f909 	lsl.w	r9, r6, r9
24004420:	ea42 0209 	orr.w	r2, r2, r9
24004424:	e76c      	b.n	24004300 <HAL_GPIO_Init+0xe8>
24004426:	2606      	movs	r6, #6
24004428:	fa06 f909 	lsl.w	r9, r6, r9
2400442c:	ea42 0209 	orr.w	r2, r2, r9
24004430:	e766      	b.n	24004300 <HAL_GPIO_Init+0xe8>
24004432:	2604      	movs	r6, #4
24004434:	fa06 f909 	lsl.w	r9, r6, r9
24004438:	ea42 0209 	orr.w	r2, r2, r9
2400443c:	e760      	b.n	24004300 <HAL_GPIO_Init+0xe8>
2400443e:	2605      	movs	r6, #5
24004440:	fa06 f909 	lsl.w	r9, r6, r9
24004444:	ea42 0209 	orr.w	r2, r2, r9
24004448:	e75a      	b.n	24004300 <HAL_GPIO_Init+0xe8>
2400444a:	2607      	movs	r6, #7
2400444c:	fa06 f909 	lsl.w	r9, r6, r9
24004450:	ea42 0209 	orr.w	r2, r2, r9
24004454:	e754      	b.n	24004300 <HAL_GPIO_Init+0xe8>
24004456:	2608      	movs	r6, #8
24004458:	fa06 f909 	lsl.w	r9, r6, r9
2400445c:	ea42 0209 	orr.w	r2, r2, r9
24004460:	e74e      	b.n	24004300 <HAL_GPIO_Init+0xe8>
24004462:	bf00      	nop
24004464:	58024400 	.word	0x58024400
24004468:	58020000 	.word	0x58020000
2400446c:	58020800 	.word	0x58020800
24004470:	58020c00 	.word	0x58020c00
24004474:	58021000 	.word	0x58021000
24004478:	58021400 	.word	0x58021400
2400447c:	58021800 	.word	0x58021800
24004480:	58021c00 	.word	0x58021c00
24004484:	58022000 	.word	0x58022000
24004488:	58022400 	.word	0x58022400

2400448c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
2400448c:	6903      	ldr	r3, [r0, #16]
2400448e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
24004490:	bf14      	ite	ne
24004492:	2001      	movne	r0, #1
24004494:	2000      	moveq	r0, #0
24004496:	4770      	bx	lr

24004498 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
24004498:	b902      	cbnz	r2, 2400449c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
2400449a:	0409      	lsls	r1, r1, #16
2400449c:	6181      	str	r1, [r0, #24]
  }
}
2400449e:	4770      	bx	lr

240044a0 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
240044a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240044a4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
240044a8:	4201      	tst	r1, r0
240044aa:	d100      	bne.n	240044ae <HAL_GPIO_EXTI_IRQHandler+0xe>
240044ac:	4770      	bx	lr
{
240044ae:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
240044b0:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
240044b4:	f7fd fce6 	bl	24001e84 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
240044b8:	bd08      	pop	{r3, pc}
240044ba:	bf00      	nop

240044bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240044bc:	6803      	ldr	r3, [r0, #0]
{
240044be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
240044c2:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240044c4:	699a      	ldr	r2, [r3, #24]
240044c6:	0694      	lsls	r4, r2, #26
240044c8:	d465      	bmi.n	24004596 <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
240044ca:	4606      	mov	r6, r0
240044cc:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240044ce:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
240044d2:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
240044d4:	f014 0410 	ands.w	r4, r4, #16
240044d8:	d060      	beq.n	2400459c <I2C_WaitOnSTOPFlagUntilTimeout+0xe0>
  uint32_t error_code = 0;
240044da:	2500      	movs	r5, #0
  uint32_t tickstart = Tickstart;
240044dc:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240044de:	f8c3 901c 	str.w	r9, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
240044e2:	46aa      	mov	sl, r5
240044e4:	1c79      	adds	r1, r7, #1

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240044e6:	699a      	ldr	r2, [r3, #24]
240044e8:	d15a      	bne.n	240045a0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
240044ea:	0690      	lsls	r0, r2, #26
240044ec:	d47d      	bmi.n	240045ea <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
240044ee:	f1ba 0f00 	cmp.w	sl, #0
240044f2:	d104      	bne.n	240044fe <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
240044f4:	699c      	ldr	r4, [r3, #24]
240044f6:	06a1      	lsls	r1, r4, #26
240044f8:	d5fc      	bpl.n	240044f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240044fa:	2220      	movs	r2, #32
240044fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
240044fe:	f045 0404 	orr.w	r4, r5, #4

    status = HAL_ERROR;
24004502:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
24004504:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24004506:	05d0      	lsls	r0, r2, #23
24004508:	d530      	bpl.n	2400456c <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400450a:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2400450e:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
24004510:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24004514:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24004516:	d504      	bpl.n	24004522 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24004518:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
2400451c:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24004520:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24004522:	0597      	lsls	r7, r2, #22
24004524:	d504      	bpl.n	24004530 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24004526:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
2400452a:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400452e:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24004530:	699a      	ldr	r2, [r3, #24]
24004532:	0790      	lsls	r0, r2, #30
24004534:	d501      	bpl.n	2400453a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    hi2c->Instance->TXDR = 0x00U;
24004536:	2200      	movs	r2, #0
24004538:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
2400453a:	699a      	ldr	r2, [r3, #24]
2400453c:	07d1      	lsls	r1, r2, #31
2400453e:	d403      	bmi.n	24004548 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24004540:	699a      	ldr	r2, [r3, #24]
24004542:	f042 0201 	orr.w	r2, r2, #1
24004546:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
24004548:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400454a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
2400454c:	4834      	ldr	r0, [pc, #208]	; (24004620 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>)
    hi2c->State = HAL_I2C_STATE_READY;
2400454e:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
24004550:	4002      	ands	r2, r0
      return HAL_ERROR;
24004552:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24004554:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
24004556:	6c73      	ldr	r3, [r6, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24004558:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
2400455c:	431c      	orrs	r4, r3
2400455e:	6474      	str	r4, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24004560:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24004564:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
24004568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2400456c:	0550      	lsls	r0, r2, #21
2400456e:	d4d3      	bmi.n	24004518 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24004570:	0595      	lsls	r5, r2, #22
24004572:	d4d8      	bmi.n	24004526 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
  if (status != HAL_OK)
24004574:	2900      	cmp	r1, #0
24004576:	d1db      	bne.n	24004530 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24004578:	f7fe f9b4 	bl	240028e4 <HAL_GetTick>
2400457c:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
24004580:	6833      	ldr	r3, [r6, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24004582:	42b8      	cmp	r0, r7
24004584:	d800      	bhi.n	24004588 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
24004586:	b91f      	cbnz	r7, 24004590 <I2C_WaitOnSTOPFlagUntilTimeout+0xd4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
24004588:	699a      	ldr	r2, [r3, #24]
2400458a:	f012 0220 	ands.w	r2, r2, #32
2400458e:	d030      	beq.n	240045f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x136>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24004590:	699a      	ldr	r2, [r3, #24]
24004592:	0692      	lsls	r2, r2, #26
24004594:	d59d      	bpl.n	240044d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
24004596:	2000      	movs	r0, #0
}
24004598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
2400459c:	4621      	mov	r1, r4
2400459e:	e7b1      	b.n	24004504 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240045a0:	0692      	lsls	r2, r2, #26
240045a2:	d422      	bmi.n	240045ea <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
240045a4:	f1ba 0f00 	cmp.w	sl, #0
240045a8:	d1a9      	bne.n	240044fe <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240045aa:	f7fe f99b 	bl	240028e4 <HAL_GetTick>
240045ae:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240045b0:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240045b2:	4287      	cmp	r7, r0
240045b4:	d301      	bcc.n	240045ba <I2C_WaitOnSTOPFlagUntilTimeout+0xfe>
240045b6:	2f00      	cmp	r7, #0
240045b8:	d194      	bne.n	240044e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240045ba:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
240045bc:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240045c0:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
240045c2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240045c4:	0409      	lsls	r1, r1, #16
240045c6:	d503      	bpl.n	240045d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
              (tmp1 != I2C_CR2_STOP) && \
240045c8:	0441      	lsls	r1, r0, #17
240045ca:	d401      	bmi.n	240045d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
240045cc:	2a20      	cmp	r2, #32
240045ce:	d11d      	bne.n	2400460c <I2C_WaitOnSTOPFlagUntilTimeout+0x150>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240045d0:	699a      	ldr	r2, [r3, #24]
240045d2:	0690      	lsls	r0, r2, #26
240045d4:	d486      	bmi.n	240044e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
240045d6:	f7fe f985 	bl	240028e4 <HAL_GetTick>
240045da:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240045dc:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
240045de:	2819      	cmp	r0, #25
240045e0:	d9f6      	bls.n	240045d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
240045e2:	2520      	movs	r5, #32
              status = HAL_ERROR;
240045e4:	f04f 0a01 	mov.w	sl, #1
240045e8:	e77c      	b.n	240044e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    if (status == HAL_OK)
240045ea:	f1ba 0f00 	cmp.w	sl, #0
240045ee:	d084      	beq.n	240044fa <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
240045f0:	e785      	b.n	240044fe <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240045f2:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240045f4:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
240045f6:	2001      	movs	r0, #1
240045f8:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240045fc:	430b      	orrs	r3, r1
240045fe:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24004600:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24004604:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
}
24004608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400460c:	685a      	ldr	r2, [r3, #4]
2400460e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24004612:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
24004614:	f7fe f966 	bl	240028e4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24004618:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
2400461a:	4604      	mov	r4, r0
2400461c:	e7d8      	b.n	240045d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
2400461e:	bf00      	nop
24004620:	fe00e800 	.word	0xfe00e800

24004624 <HAL_I2C_Init>:
  if (hi2c == NULL)
24004624:	2800      	cmp	r0, #0
24004626:	d04e      	beq.n	240046c6 <HAL_I2C_Init+0xa2>
{
24004628:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
2400462a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
2400462e:	4604      	mov	r4, r0
24004630:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24004634:	2b00      	cmp	r3, #0
24004636:	d041      	beq.n	240046bc <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
24004638:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
2400463a:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
2400463c:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
2400463e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
24004642:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24004644:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24004648:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
2400464a:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
2400464e:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
24004650:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24004652:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
24004654:	689a      	ldr	r2, [r3, #8]
24004656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
2400465a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
2400465c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
2400465e:	d029      	beq.n	240046b4 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
24004660:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24004664:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
24004666:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24004668:	d102      	bne.n	24004670 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
2400466a:	f44f 6200 	mov.w	r2, #2048	; 0x800
2400466e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24004670:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
24004672:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24004676:	4915      	ldr	r1, [pc, #84]	; (240046cc <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24004678:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
2400467a:	4301      	orrs	r1, r0
2400467c:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
2400467e:	68d9      	ldr	r1, [r3, #12]
24004680:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
24004684:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
24004686:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
2400468a:	4302      	orrs	r2, r0
2400468c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24004690:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24004694:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24004696:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24004698:	4301      	orrs	r1, r0
  return HAL_OK;
2400469a:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
2400469c:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
2400469e:	6819      	ldr	r1, [r3, #0]
240046a0:	f041 0101 	orr.w	r1, r1, #1
240046a4:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240046a6:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
240046a8:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
240046ac:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
240046ae:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
240046b2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
240046b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
240046b8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
240046ba:	e7d9      	b.n	24004670 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
240046bc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
240046c0:	f7fc fcc4 	bl	2400104c <HAL_I2C_MspInit>
240046c4:	e7b8      	b.n	24004638 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
240046c6:	2001      	movs	r0, #1
}
240046c8:	4770      	bx	lr
240046ca:	bf00      	nop
240046cc:	02008000 	.word	0x02008000

240046d0 <HAL_I2C_Master_Transmit>:
{
240046d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
240046d4:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
240046d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
240046da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
240046dc:	2b20      	cmp	r3, #32
240046de:	d12c      	bne.n	2400473a <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
240046e0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
240046e4:	4683      	mov	fp, r0
240046e6:	2b01      	cmp	r3, #1
240046e8:	d027      	beq.n	2400473a <HAL_I2C_Master_Transmit+0x6a>
240046ea:	2301      	movs	r3, #1
240046ec:	468a      	mov	sl, r1
240046ee:	4616      	mov	r6, r2
240046f0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
240046f4:	f7fe f8f6 	bl	240028e4 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
240046f8:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
240046fc:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
240046fe:	699a      	ldr	r2, [r3, #24]
24004700:	0417      	lsls	r7, r2, #16
24004702:	d51d      	bpl.n	24004740 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24004704:	f7fe f8ee 	bl	240028e4 <HAL_GetTick>
24004708:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
2400470c:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24004710:	2819      	cmp	r0, #25
24004712:	d9f4      	bls.n	240046fe <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24004714:	699a      	ldr	r2, [r3, #24]
24004716:	0410      	lsls	r0, r2, #16
24004718:	d5f1      	bpl.n	240046fe <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400471a:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400471e:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
24004720:	2200      	movs	r2, #0
      return HAL_ERROR;
24004722:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24004724:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
24004726:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400472a:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400472e:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24004732:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
24004736:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
2400473a:	2002      	movs	r0, #2
}
2400473c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24004740:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24004742:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
24004744:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24004748:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
2400474c:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
2400474e:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
24004752:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24004756:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
2400475a:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400475e:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
24004762:	b292      	uxth	r2, r2
24004764:	2aff      	cmp	r2, #255	; 0xff
24004766:	d86c      	bhi.n	24004842 <HAL_I2C_Master_Transmit+0x172>
      hi2c->XferSize = hi2c->XferCount;
24004768:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
2400476c:	48a2      	ldr	r0, [pc, #648]	; (240049f8 <HAL_I2C_Master_Transmit+0x328>)
2400476e:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
24004770:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
24004772:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24004774:	f3ca 0109 	ubfx	r1, sl, #0, #10
      hi2c->XferSize = hi2c->XferCount;
24004778:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
2400477c:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
2400477e:	4301      	orrs	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24004780:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
24004784:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
24004788:	499c      	ldr	r1, [pc, #624]	; (240049fc <HAL_I2C_Master_Transmit+0x32c>)
2400478a:	4311      	orrs	r1, r2
2400478c:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
2400478e:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
24004792:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
24004796:	b292      	uxth	r2, r2
24004798:	2a00      	cmp	r2, #0
2400479a:	f000 80ee 	beq.w	2400497a <HAL_I2C_Master_Transmit+0x2aa>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
2400479e:	699c      	ldr	r4, [r3, #24]
240047a0:	f014 0402 	ands.w	r4, r4, #2
240047a4:	f040 80b2 	bne.w	2400490c <HAL_I2C_Master_Transmit+0x23c>
  uint32_t itflag   = hi2c->Instance->ISR;
240047a8:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
240047aa:	f012 0210 	ands.w	r2, r2, #16
240047ae:	d07b      	beq.n	240048a8 <HAL_I2C_Master_Transmit+0x1d8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240047b0:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
240047b2:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
240047b4:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240047b6:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240047b8:	1c69      	adds	r1, r5, #1
240047ba:	699a      	ldr	r2, [r3, #24]
240047bc:	d176      	bne.n	240048ac <HAL_I2C_Master_Transmit+0x1dc>
240047be:	0690      	lsls	r0, r2, #26
240047c0:	f100 80f1 	bmi.w	240049a6 <HAL_I2C_Master_Transmit+0x2d6>
240047c4:	b927      	cbnz	r7, 240047d0 <HAL_I2C_Master_Transmit+0x100>
240047c6:	699a      	ldr	r2, [r3, #24]
240047c8:	0691      	lsls	r1, r2, #26
240047ca:	d5fc      	bpl.n	240047c6 <HAL_I2C_Master_Transmit+0xf6>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240047cc:	f8c3 901c 	str.w	r9, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
240047d0:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
240047d4:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
240047d6:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
240047d8:	05ce      	lsls	r6, r1, #23
240047da:	d541      	bpl.n	24004860 <HAL_I2C_Master_Transmit+0x190>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
240047dc:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240047e0:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
240047e2:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
240047e6:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240047e8:	d504      	bpl.n	240047f4 <HAL_I2C_Master_Transmit+0x124>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
240047ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
240047ee:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
240047f2:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
240047f4:	0589      	lsls	r1, r1, #22
240047f6:	d504      	bpl.n	24004802 <HAL_I2C_Master_Transmit+0x132>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
240047f8:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
240047fc:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24004800:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24004802:	6999      	ldr	r1, [r3, #24]
24004804:	078e      	lsls	r6, r1, #30
24004806:	d501      	bpl.n	2400480c <HAL_I2C_Master_Transmit+0x13c>
    hi2c->Instance->TXDR = 0x00U;
24004808:	2100      	movs	r1, #0
2400480a:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
2400480c:	6999      	ldr	r1, [r3, #24]
2400480e:	07cd      	lsls	r5, r1, #31
24004810:	d403      	bmi.n	2400481a <HAL_I2C_Master_Transmit+0x14a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24004812:	6999      	ldr	r1, [r3, #24]
24004814:	f041 0101 	orr.w	r1, r1, #1
24004818:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
2400481a:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400481c:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
2400481e:	4878      	ldr	r0, [pc, #480]	; (24004a00 <HAL_I2C_Master_Transmit+0x330>)
    hi2c->State = HAL_I2C_STATE_READY;
24004820:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
24004822:	4001      	ands	r1, r0
        return HAL_ERROR;
24004824:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24004826:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
24004828:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
2400482c:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
24004830:	431a      	orrs	r2, r3
24004832:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24004836:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400483a:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
2400483e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
24004842:	685a      	ldr	r2, [r3, #4]
24004844:	496c      	ldr	r1, [pc, #432]	; (240049f8 <HAL_I2C_Master_Transmit+0x328>)
24004846:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24004848:	f3ca 0109 	ubfx	r1, sl, #0, #10
2400484c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
24004850:	4311      	orrs	r1, r2
24004852:	4a6c      	ldr	r2, [pc, #432]	; (24004a04 <HAL_I2C_Master_Transmit+0x334>)
24004854:	430a      	orrs	r2, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
24004856:	21ff      	movs	r1, #255	; 0xff
24004858:	f8ab 1028 	strh.w	r1, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
2400485c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
2400485e:	e796      	b.n	2400478e <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24004860:	054c      	lsls	r4, r1, #21
24004862:	d4c2      	bmi.n	240047ea <HAL_I2C_Master_Transmit+0x11a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24004864:	058f      	lsls	r7, r1, #22
24004866:	d4c7      	bmi.n	240047f8 <HAL_I2C_Master_Transmit+0x128>
  if (status != HAL_OK)
24004868:	2800      	cmp	r0, #0
2400486a:	d1ca      	bne.n	24004802 <HAL_I2C_Master_Transmit+0x132>
    if (Timeout != HAL_MAX_DELAY)
2400486c:	1c6a      	adds	r2, r5, #1
2400486e:	d096      	beq.n	2400479e <HAL_I2C_Master_Transmit+0xce>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24004870:	f7fe f838 	bl	240028e4 <HAL_GetTick>
24004874:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24004878:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400487c:	4285      	cmp	r5, r0
2400487e:	d301      	bcc.n	24004884 <HAL_I2C_Master_Transmit+0x1b4>
24004880:	2d00      	cmp	r5, #0
24004882:	d18c      	bne.n	2400479e <HAL_I2C_Master_Transmit+0xce>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24004884:	699a      	ldr	r2, [r3, #24]
24004886:	f012 0202 	ands.w	r2, r2, #2
2400488a:	d188      	bne.n	2400479e <HAL_I2C_Master_Transmit+0xce>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400488c:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24004890:	2120      	movs	r1, #32
          return HAL_ERROR;
24004892:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
24004894:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24004898:	430b      	orrs	r3, r1
2400489a:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400489e:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
240048a2:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
240048a6:	e749      	b.n	2400473c <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
240048a8:	4610      	mov	r0, r2
240048aa:	e794      	b.n	240047d6 <HAL_I2C_Master_Transmit+0x106>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240048ac:	0692      	lsls	r2, r2, #26
240048ae:	d47a      	bmi.n	240049a6 <HAL_I2C_Master_Transmit+0x2d6>
240048b0:	2f00      	cmp	r7, #0
240048b2:	d18d      	bne.n	240047d0 <HAL_I2C_Master_Transmit+0x100>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240048b4:	f7fe f816 	bl	240028e4 <HAL_GetTick>
240048b8:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240048ba:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240048be:	4285      	cmp	r5, r0
240048c0:	d302      	bcc.n	240048c8 <HAL_I2C_Master_Transmit+0x1f8>
240048c2:	2d00      	cmp	r5, #0
240048c4:	f47f af78 	bne.w	240047b8 <HAL_I2C_Master_Transmit+0xe8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240048c8:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
240048ca:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240048ce:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
240048d0:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240048d2:	0409      	lsls	r1, r1, #16
240048d4:	d50c      	bpl.n	240048f0 <HAL_I2C_Master_Transmit+0x220>
              (tmp1 != I2C_CR2_STOP) && \
240048d6:	0441      	lsls	r1, r0, #17
240048d8:	d40a      	bmi.n	240048f0 <HAL_I2C_Master_Transmit+0x220>
240048da:	2a20      	cmp	r2, #32
240048dc:	d008      	beq.n	240048f0 <HAL_I2C_Master_Transmit+0x220>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
240048de:	685a      	ldr	r2, [r3, #4]
240048e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
240048e4:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
240048e6:	f7fd fffd 	bl	240028e4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240048ea:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
240048ee:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240048f0:	699a      	ldr	r2, [r3, #24]
240048f2:	0690      	lsls	r0, r2, #26
240048f4:	f53f af60 	bmi.w	240047b8 <HAL_I2C_Master_Transmit+0xe8>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
240048f8:	f7fd fff4 	bl	240028e4 <HAL_GetTick>
240048fc:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240048fe:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24004902:	2819      	cmp	r0, #25
24004904:	d9f4      	bls.n	240048f0 <HAL_I2C_Master_Transmit+0x220>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24004906:	2420      	movs	r4, #32
              status = HAL_ERROR;
24004908:	2701      	movs	r7, #1
2400490a:	e755      	b.n	240047b8 <HAL_I2C_Master_Transmit+0xe8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400490c:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
      hi2c->XferSize--;
24004910:	f8bb 2028 	ldrh.w	r2, [fp, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24004914:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
24004918:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
2400491a:	6299      	str	r1, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400491c:	f8bb 102a 	ldrh.w	r1, [fp, #42]	; 0x2a
      hi2c->XferSize--;
24004920:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
24004922:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
      hi2c->XferCount--;
24004926:	3901      	subs	r1, #1
      hi2c->XferSize--;
24004928:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
      hi2c->XferCount--;
2400492c:	b289      	uxth	r1, r1
2400492e:	f8ab 102a 	strh.w	r1, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
24004932:	f8bb 102a 	ldrh.w	r1, [fp, #42]	; 0x2a
24004936:	b289      	uxth	r1, r1
24004938:	2900      	cmp	r1, #0
2400493a:	f43f af2a 	beq.w	24004792 <HAL_I2C_Master_Transmit+0xc2>
2400493e:	2a00      	cmp	r2, #0
24004940:	f47f af27 	bne.w	24004792 <HAL_I2C_Master_Transmit+0xc2>
24004944:	1c6c      	adds	r4, r5, #1
24004946:	d132      	bne.n	240049ae <HAL_I2C_Master_Transmit+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24004948:	699a      	ldr	r2, [r3, #24]
2400494a:	0610      	lsls	r0, r2, #24
2400494c:	d5fc      	bpl.n	24004948 <HAL_I2C_Master_Transmit+0x278>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
2400494e:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
24004952:	b292      	uxth	r2, r2
24004954:	2aff      	cmp	r2, #255	; 0xff
24004956:	d93c      	bls.n	240049d2 <HAL_I2C_Master_Transmit+0x302>
  MODIFY_REG(hi2c->Instance->CR2, \
24004958:	685a      	ldr	r2, [r3, #4]
2400495a:	492b      	ldr	r1, [pc, #172]	; (24004a08 <HAL_I2C_Master_Transmit+0x338>)
2400495c:	400a      	ands	r2, r1
2400495e:	492b      	ldr	r1, [pc, #172]	; (24004a0c <HAL_I2C_Master_Transmit+0x33c>)
24004960:	ea4a 0202 	orr.w	r2, sl, r2
24004964:	4311      	orrs	r1, r2
          hi2c->XferSize = MAX_NBYTE_SIZE;
24004966:	22ff      	movs	r2, #255	; 0xff
24004968:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
2400496c:	6059      	str	r1, [r3, #4]
    while (hi2c->XferCount > 0U)
2400496e:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
24004972:	b292      	uxth	r2, r2
24004974:	2a00      	cmp	r2, #0
24004976:	f47f af12 	bne.w	2400479e <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400497a:	4642      	mov	r2, r8
2400497c:	4629      	mov	r1, r5
2400497e:	4658      	mov	r0, fp
24004980:	f7ff fd9c 	bl	240044bc <I2C_WaitOnSTOPFlagUntilTimeout>
24004984:	2800      	cmp	r0, #0
24004986:	d135      	bne.n	240049f4 <HAL_I2C_Master_Transmit+0x324>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24004988:	f8db 3000 	ldr.w	r3, [fp]
2400498c:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
2400498e:	4c1c      	ldr	r4, [pc, #112]	; (24004a00 <HAL_I2C_Master_Transmit+0x330>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24004990:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
24004992:	685a      	ldr	r2, [r3, #4]
24004994:	4022      	ands	r2, r4
24004996:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
24004998:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
2400499c:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
240049a0:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
240049a4:	e6ca      	b.n	2400473c <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
240049a6:	2f00      	cmp	r7, #0
240049a8:	f43f af10 	beq.w	240047cc <HAL_I2C_Master_Transmit+0xfc>
240049ac:	e710      	b.n	240047d0 <HAL_I2C_Master_Transmit+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
240049ae:	699a      	ldr	r2, [r3, #24]
240049b0:	0611      	lsls	r1, r2, #24
240049b2:	d4cc      	bmi.n	2400494e <HAL_I2C_Master_Transmit+0x27e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240049b4:	f7fd ff96 	bl	240028e4 <HAL_GetTick>
240049b8:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
240049bc:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240049c0:	4285      	cmp	r5, r0
240049c2:	d301      	bcc.n	240049c8 <HAL_I2C_Master_Transmit+0x2f8>
240049c4:	2d00      	cmp	r5, #0
240049c6:	d1bd      	bne.n	24004944 <HAL_I2C_Master_Transmit+0x274>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
240049c8:	699a      	ldr	r2, [r3, #24]
240049ca:	f012 0280 	ands.w	r2, r2, #128	; 0x80
240049ce:	d1b9      	bne.n	24004944 <HAL_I2C_Master_Transmit+0x274>
240049d0:	e75c      	b.n	2400488c <HAL_I2C_Master_Transmit+0x1bc>
          hi2c->XferSize = hi2c->XferCount;
240049d2:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
240049d6:	480c      	ldr	r0, [pc, #48]	; (24004a08 <HAL_I2C_Master_Transmit+0x338>)
          hi2c->XferSize = hi2c->XferCount;
240049d8:	b292      	uxth	r2, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
240049da:	b2d1      	uxtb	r1, r2
          hi2c->XferSize = hi2c->XferCount;
240049dc:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
240049e0:	685a      	ldr	r2, [r3, #4]
240049e2:	4002      	ands	r2, r0
240049e4:	ea4a 0202 	orr.w	r2, sl, r2
240049e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
240049ec:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
240049f0:	605a      	str	r2, [r3, #4]
}
240049f2:	e6ce      	b.n	24004792 <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
240049f4:	2001      	movs	r0, #1
240049f6:	e6a1      	b.n	2400473c <HAL_I2C_Master_Transmit+0x6c>
240049f8:	fc009800 	.word	0xfc009800
240049fc:	02002000 	.word	0x02002000
24004a00:	fe00e800 	.word	0xfe00e800
24004a04:	01ff2000 	.word	0x01ff2000
24004a08:	fc009c00 	.word	0xfc009c00
24004a0c:	01ff0000 	.word	0x01ff0000

24004a10 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24004a10:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
24004a14:	2a20      	cmp	r2, #32
24004a16:	d123      	bne.n	24004a60 <HAL_I2CEx_ConfigAnalogFilter+0x50>
24004a18:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24004a1c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
24004a20:	4603      	mov	r3, r0
24004a22:	2a01      	cmp	r2, #1
24004a24:	d01c      	beq.n	24004a60 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24004a26:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
24004a28:	2024      	movs	r0, #36	; 0x24
{
24004a2a:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
24004a2c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24004a30:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
24004a34:	6810      	ldr	r0, [r2, #0]
24004a36:	f020 0001 	bic.w	r0, r0, #1
24004a3a:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
24004a3c:	6810      	ldr	r0, [r2, #0]
24004a3e:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
24004a42:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
24004a44:	6810      	ldr	r0, [r2, #0]
24004a46:	4301      	orrs	r1, r0

    return HAL_OK;
24004a48:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
24004a4a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
24004a4c:	6811      	ldr	r1, [r2, #0]
24004a4e:	f041 0101 	orr.w	r1, r1, #1
24004a52:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
24004a54:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24004a58:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
24004a5c:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
24004a60:	2002      	movs	r0, #2
}
24004a62:	4770      	bx	lr

24004a64 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24004a64:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
24004a68:	2a20      	cmp	r2, #32
24004a6a:	d122      	bne.n	24004ab2 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
24004a6c:	4603      	mov	r3, r0
{
24004a6e:	b500      	push	{lr}
24004a70:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24004a74:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
24004a78:	2a01      	cmp	r2, #1
24004a7a:	d01c      	beq.n	24004ab6 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24004a7c:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
24004a7e:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24004a80:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
24004a84:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
24004a88:	6810      	ldr	r0, [r2, #0]
24004a8a:	f020 0001 	bic.w	r0, r0, #1
24004a8e:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
24004a90:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
24004a92:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
24004a96:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
24004a9a:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
24004a9c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
24004a9e:	6811      	ldr	r1, [r2, #0]
24004aa0:	f041 0101 	orr.w	r1, r1, #1
24004aa4:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
24004aa6:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24004aaa:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
24004aae:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
24004ab2:	2002      	movs	r0, #2
}
24004ab4:	4770      	bx	lr
    return HAL_BUSY;
24004ab6:	2002      	movs	r0, #2
}
24004ab8:	f85d fb04 	ldr.w	pc, [sp], #4

24004abc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24004abc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24004abe:	4c10      	ldr	r4, [pc, #64]	; (24004b00 <HAL_PWREx_ConfigSupply+0x44>)
24004ac0:	68e3      	ldr	r3, [r4, #12]
24004ac2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24004ac6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24004ac8:	d105      	bne.n	24004ad6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24004aca:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
24004ace:	1a18      	subs	r0, r3, r0
24004ad0:	bf18      	it	ne
24004ad2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
24004ad4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
24004ad6:	f023 0307 	bic.w	r3, r3, #7
24004ada:	4318      	orrs	r0, r3
24004adc:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
24004ade:	f7fd ff01 	bl	240028e4 <HAL_GetTick>
24004ae2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24004ae4:	e005      	b.n	24004af2 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24004ae6:	f7fd fefd 	bl	240028e4 <HAL_GetTick>
24004aea:	1b40      	subs	r0, r0, r5
24004aec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
24004af0:	d804      	bhi.n	24004afc <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24004af2:	6863      	ldr	r3, [r4, #4]
24004af4:	049b      	lsls	r3, r3, #18
24004af6:	d5f6      	bpl.n	24004ae6 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
24004af8:	2000      	movs	r0, #0
}
24004afa:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
24004afc:	2001      	movs	r0, #1
}
24004afe:	bd38      	pop	{r3, r4, r5, pc}
24004b00:	58024800 	.word	0x58024800

24004b04 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
24004b04:	b570      	push	{r4, r5, r6, lr}
24004b06:	4605      	mov	r5, r0
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24004b08:	f7fd feec 	bl	240028e4 <HAL_GetTick>

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
24004b0c:	2d00      	cmp	r5, #0
24004b0e:	d046      	beq.n	24004b9e <HAL_QSPI_Init+0x9a>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
24004b10:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
24004b14:	4606      	mov	r6, r0
24004b16:	2b00      	cmp	r3, #0
24004b18:	d039      	beq.n	24004b8e <HAL_QSPI_Init+0x8a>
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24004b1a:	6cac      	ldr	r4, [r5, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
24004b1c:	682a      	ldr	r2, [r5, #0]
24004b1e:	68a9      	ldr	r1, [r5, #8]
24004b20:	6813      	ldr	r3, [r2, #0]
24004b22:	3901      	subs	r1, #1
24004b24:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
24004b28:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
24004b2c:	6013      	str	r3, [r2, #0]
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
24004b2e:	e001      	b.n	24004b34 <HAL_QSPI_Init+0x30>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
24004b30:	1c63      	adds	r3, r4, #1
24004b32:	d124      	bne.n	24004b7e <HAL_QSPI_Init+0x7a>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
24004b34:	6893      	ldr	r3, [r2, #8]
24004b36:	f013 0320 	ands.w	r3, r3, #32
24004b3a:	d1f9      	bne.n	24004b30 <HAL_QSPI_Init+0x2c>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
24004b3c:	69e8      	ldr	r0, [r5, #28]
24004b3e:	68e9      	ldr	r1, [r5, #12]
24004b40:	6814      	ldr	r4, [r2, #0]
24004b42:	4301      	orrs	r1, r0
24004b44:	6a28      	ldr	r0, [r5, #32]
24004b46:	4301      	orrs	r1, r0
24004b48:	6868      	ldr	r0, [r5, #4]
24004b4a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
24004b4e:	4819      	ldr	r0, [pc, #100]	; (24004bb4 <HAL_QSPI_Init+0xb0>)
24004b50:	4020      	ands	r0, r4
24004b52:	4301      	orrs	r1, r0
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
24004b54:	6968      	ldr	r0, [r5, #20]
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
24004b56:	6011      	str	r1, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
24004b58:	69a9      	ldr	r1, [r5, #24]
24004b5a:	6854      	ldr	r4, [r2, #4]
24004b5c:	4301      	orrs	r1, r0
24004b5e:	6928      	ldr	r0, [r5, #16]
24004b60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
24004b64:	4814      	ldr	r0, [pc, #80]	; (24004bb8 <HAL_QSPI_Init+0xb4>)
24004b66:	4020      	ands	r0, r4
    hqspi->State = HAL_QSPI_STATE_READY;
24004b68:	2401      	movs	r4, #1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
24004b6a:	4301      	orrs	r1, r0
    hqspi->State = HAL_QSPI_STATE_READY;
24004b6c:	4618      	mov	r0, r3
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
24004b6e:	6051      	str	r1, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
24004b70:	6811      	ldr	r1, [r2, #0]
24004b72:	4321      	orrs	r1, r4
24004b74:	6011      	str	r1, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24004b76:	646b      	str	r3, [r5, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
24004b78:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
}
24004b7c:	bd70      	pop	{r4, r5, r6, pc}
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24004b7e:	f7fd feb1 	bl	240028e4 <HAL_GetTick>
24004b82:	1b80      	subs	r0, r0, r6
24004b84:	42a0      	cmp	r0, r4
24004b86:	d80c      	bhi.n	24004ba2 <HAL_QSPI_Init+0x9e>
24004b88:	b15c      	cbz	r4, 24004ba2 <HAL_QSPI_Init+0x9e>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
24004b8a:	682a      	ldr	r2, [r5, #0]
24004b8c:	e7d2      	b.n	24004b34 <HAL_QSPI_Init+0x30>
    HAL_QSPI_MspInit(hqspi);
24004b8e:	4628      	mov	r0, r5
24004b90:	f7fd fa08 	bl	24001fa4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
24004b94:	f241 3388 	movw	r3, #5000	; 0x1388
}
24004b98:	461c      	mov	r4, r3
  hqspi->Timeout = Timeout;
24004b9a:	64ab      	str	r3, [r5, #72]	; 0x48
}
24004b9c:	e7be      	b.n	24004b1c <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
24004b9e:	2001      	movs	r0, #1
}
24004ba0:	bd70      	pop	{r4, r5, r6, pc}
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
24004ba2:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
24004ba4:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
24004ba6:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
24004baa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
24004bac:	4303      	orrs	r3, r0
24004bae:	646b      	str	r3, [r5, #68]	; 0x44
}
24004bb0:	bd70      	pop	{r4, r5, r6, pc}
24004bb2:	bf00      	nop
24004bb4:	00ffff2f 	.word	0x00ffff2f
24004bb8:	ffe0f8fe 	.word	0xffe0f8fe

24004bbc <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24004bbc:	4b3b      	ldr	r3, [pc, #236]	; (24004cac <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
24004bbe:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24004bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24004bc2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24004bc4:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
24004bc6:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24004bca:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24004bcc:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
24004bd0:	d038      	beq.n	24004c44 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24004bd2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24004bd6:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24004bda:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24004bde:	fb05 f101 	mul.w	r1, r5, r1
24004be2:	2a01      	cmp	r2, #1
24004be4:	ee07 1a90 	vmov	s15, r1
24004be8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
24004bec:	d002      	beq.n	24004bf4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
24004bee:	2a02      	cmp	r2, #2
24004bf0:	d04e      	beq.n	24004c90 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
24004bf2:	b34a      	cbz	r2, 24004c48 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24004bf4:	ee07 0a90 	vmov	s15, r0
24004bf8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 24004cb0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
24004bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24004c02:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24004c06:	eddf 5a2b 	vldr	s11, [pc, #172]	; 24004cb4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
24004c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
24004c0e:	ee06 3a90 	vmov	s13, r3
24004c12:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24004c16:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24004c1a:	ee76 6a85 	vadd.f32	s13, s13, s10
24004c1e:	eee7 6a25 	vfma.f32	s13, s14, s11
24004c22:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24004c26:	4b21      	ldr	r3, [pc, #132]	; (24004cac <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
24004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24004c2a:	f3c3 2346 	ubfx	r3, r3, #9, #7
24004c2e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24004c30:	ee07 3a90 	vmov	s15, r3
24004c34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24004c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
24004c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24004c40:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
24004c44:	bc30      	pop	{r4, r5}
24004c46:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24004c48:	681a      	ldr	r2, [r3, #0]
24004c4a:	0692      	lsls	r2, r2, #26
24004c4c:	d527      	bpl.n	24004c9e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24004c4e:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24004c50:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24004c54:	4a18      	ldr	r2, [pc, #96]	; (24004cb8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24004c56:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24004c5c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24004c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24004c64:	ed9f 5a13 	vldr	s10, [pc, #76]	; 24004cb4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
24004c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24004c6c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24004c6e:	ee06 3a90 	vmov	s13, r3
24004c72:	ee05 2a90 	vmov	s11, r2
24004c76:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24004c7a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24004c7e:	ee76 6a86 	vadd.f32	s13, s13, s12
24004c82:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24004c86:	eee7 6a05 	vfma.f32	s13, s14, s10
24004c8a:	ee66 6a26 	vmul.f32	s13, s12, s13
24004c8e:	e7ca      	b.n	24004c26 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24004c90:	ee07 0a90 	vmov	s15, r0
24004c94:	eddf 6a09 	vldr	s13, [pc, #36]	; 24004cbc <HAL_RCC_GetSysClockFreq.part.0+0x100>
24004c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24004c9c:	e7b0      	b.n	24004c00 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24004c9e:	ee07 0a90 	vmov	s15, r0
24004ca2:	eddf 6a07 	vldr	s13, [pc, #28]	; 24004cc0 <HAL_RCC_GetSysClockFreq.part.0+0x104>
24004ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24004caa:	e7a9      	b.n	24004c00 <HAL_RCC_GetSysClockFreq.part.0+0x44>
24004cac:	58024400 	.word	0x58024400
24004cb0:	4a742400 	.word	0x4a742400
24004cb4:	39000000 	.word	0x39000000
24004cb8:	03d09000 	.word	0x03d09000
24004cbc:	4b742400 	.word	0x4b742400
24004cc0:	4c742400 	.word	0x4c742400

24004cc4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
24004cc4:	2800      	cmp	r0, #0
24004cc6:	f000 81e8 	beq.w	2400509a <HAL_RCC_OscConfig+0x3d6>
{
24004cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
24004ccc:	6803      	ldr	r3, [r0, #0]
24004cce:	4604      	mov	r4, r0
24004cd0:	07d9      	lsls	r1, r3, #31
24004cd2:	d52e      	bpl.n	24004d32 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24004cd4:	49a4      	ldr	r1, [pc, #656]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
24004cd6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24004cd8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24004cda:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24004cde:	2a10      	cmp	r2, #16
24004ce0:	f000 8107 	beq.w	24004ef2 <HAL_RCC_OscConfig+0x22e>
24004ce4:	2a18      	cmp	r2, #24
24004ce6:	f000 80ff 	beq.w	24004ee8 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24004cea:	6863      	ldr	r3, [r4, #4]
24004cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24004cf0:	f000 812a 	beq.w	24004f48 <HAL_RCC_OscConfig+0x284>
24004cf4:	2b00      	cmp	r3, #0
24004cf6:	f000 8168 	beq.w	24004fca <HAL_RCC_OscConfig+0x306>
24004cfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24004cfe:	4b9a      	ldr	r3, [pc, #616]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
24004d00:	681a      	ldr	r2, [r3, #0]
24004d02:	f000 8289 	beq.w	24005218 <HAL_RCC_OscConfig+0x554>
24004d06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24004d0a:	601a      	str	r2, [r3, #0]
24004d0c:	681a      	ldr	r2, [r3, #0]
24004d0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24004d12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
24004d14:	f7fd fde6 	bl	240028e4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24004d18:	4e93      	ldr	r6, [pc, #588]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
24004d1a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24004d1c:	e005      	b.n	24004d2a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24004d1e:	f7fd fde1 	bl	240028e4 <HAL_GetTick>
24004d22:	1b40      	subs	r0, r0, r5
24004d24:	2864      	cmp	r0, #100	; 0x64
24004d26:	f200 814e 	bhi.w	24004fc6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24004d2a:	6833      	ldr	r3, [r6, #0]
24004d2c:	039b      	lsls	r3, r3, #14
24004d2e:	d5f6      	bpl.n	24004d1e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24004d30:	6823      	ldr	r3, [r4, #0]
24004d32:	079d      	lsls	r5, r3, #30
24004d34:	f100 808a 	bmi.w	24004e4c <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24004d38:	06d9      	lsls	r1, r3, #27
24004d3a:	d533      	bpl.n	24004da4 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24004d3c:	4a8a      	ldr	r2, [pc, #552]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
24004d3e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24004d40:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24004d42:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24004d46:	2b08      	cmp	r3, #8
24004d48:	f000 80e3 	beq.w	24004f12 <HAL_RCC_OscConfig+0x24e>
24004d4c:	2b18      	cmp	r3, #24
24004d4e:	f000 80db 	beq.w	24004f08 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24004d52:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
24004d54:	4d84      	ldr	r5, [pc, #528]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24004d56:	2b00      	cmp	r3, #0
24004d58:	f000 816f 	beq.w	2400503a <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
24004d5c:	682b      	ldr	r3, [r5, #0]
24004d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24004d62:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24004d64:	f7fd fdbe 	bl	240028e4 <HAL_GetTick>
24004d68:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24004d6a:	e005      	b.n	24004d78 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24004d6c:	f7fd fdba 	bl	240028e4 <HAL_GetTick>
24004d70:	1b80      	subs	r0, r0, r6
24004d72:	2802      	cmp	r0, #2
24004d74:	f200 8127 	bhi.w	24004fc6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24004d78:	682b      	ldr	r3, [r5, #0]
24004d7a:	05db      	lsls	r3, r3, #23
24004d7c:	d5f6      	bpl.n	24004d6c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24004d7e:	f7fd fdc9 	bl	24002914 <HAL_GetREVID>
24004d82:	f241 0303 	movw	r3, #4099	; 0x1003
24004d86:	4298      	cmp	r0, r3
24004d88:	f200 826d 	bhi.w	24005266 <HAL_RCC_OscConfig+0x5a2>
24004d8c:	6a22      	ldr	r2, [r4, #32]
24004d8e:	686b      	ldr	r3, [r5, #4]
24004d90:	2a20      	cmp	r2, #32
24004d92:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24004d96:	bf0c      	ite	eq
24004d98:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
24004d9c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
24004da0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24004da2:	6823      	ldr	r3, [r4, #0]
24004da4:	071d      	lsls	r5, r3, #28
24004da6:	d516      	bpl.n	24004dd6 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24004da8:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
24004daa:	4d6f      	ldr	r5, [pc, #444]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24004dac:	2b00      	cmp	r3, #0
24004dae:	f000 8122 	beq.w	24004ff6 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
24004db2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24004db4:	f043 0301 	orr.w	r3, r3, #1
24004db8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24004dba:	f7fd fd93 	bl	240028e4 <HAL_GetTick>
24004dbe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24004dc0:	e005      	b.n	24004dce <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24004dc2:	f7fd fd8f 	bl	240028e4 <HAL_GetTick>
24004dc6:	1b80      	subs	r0, r0, r6
24004dc8:	2802      	cmp	r0, #2
24004dca:	f200 80fc 	bhi.w	24004fc6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24004dce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24004dd0:	0798      	lsls	r0, r3, #30
24004dd2:	d5f6      	bpl.n	24004dc2 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
24004dd4:	6823      	ldr	r3, [r4, #0]
24004dd6:	069a      	lsls	r2, r3, #26
24004dd8:	d516      	bpl.n	24004e08 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24004dda:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
24004ddc:	4d62      	ldr	r5, [pc, #392]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24004dde:	2b00      	cmp	r3, #0
24004de0:	f000 811a 	beq.w	24005018 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
24004de4:	682b      	ldr	r3, [r5, #0]
24004de6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24004dea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
24004dec:	f7fd fd7a 	bl	240028e4 <HAL_GetTick>
24004df0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24004df2:	e005      	b.n	24004e00 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24004df4:	f7fd fd76 	bl	240028e4 <HAL_GetTick>
24004df8:	1b80      	subs	r0, r0, r6
24004dfa:	2802      	cmp	r0, #2
24004dfc:	f200 80e3 	bhi.w	24004fc6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24004e00:	682b      	ldr	r3, [r5, #0]
24004e02:	049f      	lsls	r7, r3, #18
24004e04:	d5f6      	bpl.n	24004df4 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
24004e06:	6823      	ldr	r3, [r4, #0]
24004e08:	0759      	lsls	r1, r3, #29
24004e0a:	f100 80a3 	bmi.w	24004f54 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
24004e0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
24004e10:	b1d0      	cbz	r0, 24004e48 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
24004e12:	4d55      	ldr	r5, [pc, #340]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
24004e14:	692b      	ldr	r3, [r5, #16]
24004e16:	f003 0338 	and.w	r3, r3, #56	; 0x38
24004e1a:	2b18      	cmp	r3, #24
24004e1c:	f000 81ae 	beq.w	2400517c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
24004e20:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24004e22:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
24004e24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24004e28:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24004e2a:	f000 8142 	beq.w	240050b2 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
24004e2e:	f7fd fd59 	bl	240028e4 <HAL_GetTick>
24004e32:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24004e34:	e005      	b.n	24004e42 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24004e36:	f7fd fd55 	bl	240028e4 <HAL_GetTick>
24004e3a:	1b00      	subs	r0, r0, r4
24004e3c:	2802      	cmp	r0, #2
24004e3e:	f200 80c2 	bhi.w	24004fc6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24004e42:	682b      	ldr	r3, [r5, #0]
24004e44:	019b      	lsls	r3, r3, #6
24004e46:	d4f6      	bmi.n	24004e36 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
24004e48:	2000      	movs	r0, #0
}
24004e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24004e4c:	4a46      	ldr	r2, [pc, #280]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
24004e4e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24004e50:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24004e52:	f013 0338 	ands.w	r3, r3, #56	; 0x38
24004e56:	d12d      	bne.n	24004eb4 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24004e58:	4b43      	ldr	r3, [pc, #268]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
24004e5a:	68e2      	ldr	r2, [r4, #12]
24004e5c:	681b      	ldr	r3, [r3, #0]
24004e5e:	0759      	lsls	r1, r3, #29
24004e60:	d501      	bpl.n	24004e66 <HAL_RCC_OscConfig+0x1a2>
24004e62:	2a00      	cmp	r2, #0
24004e64:	d04e      	beq.n	24004f04 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24004e66:	4d40      	ldr	r5, [pc, #256]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
24004e68:	682b      	ldr	r3, [r5, #0]
24004e6a:	f023 0319 	bic.w	r3, r3, #25
24004e6e:	4313      	orrs	r3, r2
24004e70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24004e72:	f7fd fd37 	bl	240028e4 <HAL_GetTick>
24004e76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24004e78:	e005      	b.n	24004e86 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24004e7a:	f7fd fd33 	bl	240028e4 <HAL_GetTick>
24004e7e:	1b80      	subs	r0, r0, r6
24004e80:	2802      	cmp	r0, #2
24004e82:	f200 80a0 	bhi.w	24004fc6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24004e86:	682b      	ldr	r3, [r5, #0]
24004e88:	075b      	lsls	r3, r3, #29
24004e8a:	d5f6      	bpl.n	24004e7a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24004e8c:	f7fd fd42 	bl	24002914 <HAL_GetREVID>
24004e90:	f241 0303 	movw	r3, #4099	; 0x1003
24004e94:	4298      	cmp	r0, r3
24004e96:	f200 80f7 	bhi.w	24005088 <HAL_RCC_OscConfig+0x3c4>
24004e9a:	6922      	ldr	r2, [r4, #16]
24004e9c:	686b      	ldr	r3, [r5, #4]
24004e9e:	2a40      	cmp	r2, #64	; 0x40
24004ea0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24004ea4:	bf0c      	ite	eq
24004ea6:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
24004eaa:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
24004eae:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24004eb0:	6823      	ldr	r3, [r4, #0]
24004eb2:	e741      	b.n	24004d38 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24004eb4:	2b18      	cmp	r3, #24
24004eb6:	f000 80e3 	beq.w	24005080 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24004eba:	4d2b      	ldr	r5, [pc, #172]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24004ebc:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24004ebe:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24004ec0:	2a00      	cmp	r2, #0
24004ec2:	f000 80cc 	beq.w	2400505e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24004ec6:	f023 0319 	bic.w	r3, r3, #25
24004eca:	4313      	orrs	r3, r2
24004ecc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24004ece:	f7fd fd09 	bl	240028e4 <HAL_GetTick>
24004ed2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24004ed4:	e004      	b.n	24004ee0 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24004ed6:	f7fd fd05 	bl	240028e4 <HAL_GetTick>
24004eda:	1b80      	subs	r0, r0, r6
24004edc:	2802      	cmp	r0, #2
24004ede:	d872      	bhi.n	24004fc6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24004ee0:	682b      	ldr	r3, [r5, #0]
24004ee2:	075f      	lsls	r7, r3, #29
24004ee4:	d5f7      	bpl.n	24004ed6 <HAL_RCC_OscConfig+0x212>
24004ee6:	e7d1      	b.n	24004e8c <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24004ee8:	f001 0103 	and.w	r1, r1, #3
24004eec:	2902      	cmp	r1, #2
24004eee:	f47f aefc 	bne.w	24004cea <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24004ef2:	4a1d      	ldr	r2, [pc, #116]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
24004ef4:	6812      	ldr	r2, [r2, #0]
24004ef6:	0392      	lsls	r2, r2, #14
24004ef8:	f57f af1b 	bpl.w	24004d32 <HAL_RCC_OscConfig+0x6e>
24004efc:	6862      	ldr	r2, [r4, #4]
24004efe:	2a00      	cmp	r2, #0
24004f00:	f47f af17 	bne.w	24004d32 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
24004f04:	2001      	movs	r0, #1
}
24004f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24004f08:	f002 0203 	and.w	r2, r2, #3
24004f0c:	2a01      	cmp	r2, #1
24004f0e:	f47f af20 	bne.w	24004d52 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24004f12:	4b15      	ldr	r3, [pc, #84]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
24004f14:	681b      	ldr	r3, [r3, #0]
24004f16:	05da      	lsls	r2, r3, #23
24004f18:	d502      	bpl.n	24004f20 <HAL_RCC_OscConfig+0x25c>
24004f1a:	69e3      	ldr	r3, [r4, #28]
24004f1c:	2b80      	cmp	r3, #128	; 0x80
24004f1e:	d1f1      	bne.n	24004f04 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24004f20:	f7fd fcf8 	bl	24002914 <HAL_GetREVID>
24004f24:	f241 0303 	movw	r3, #4099	; 0x1003
24004f28:	4298      	cmp	r0, r3
24004f2a:	f200 80b8 	bhi.w	2400509e <HAL_RCC_OscConfig+0x3da>
24004f2e:	6a22      	ldr	r2, [r4, #32]
24004f30:	2a20      	cmp	r2, #32
24004f32:	f000 81a7 	beq.w	24005284 <HAL_RCC_OscConfig+0x5c0>
24004f36:	490c      	ldr	r1, [pc, #48]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
24004f38:	684b      	ldr	r3, [r1, #4]
24004f3a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24004f3e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
24004f42:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24004f44:	6823      	ldr	r3, [r4, #0]
24004f46:	e72d      	b.n	24004da4 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24004f48:	4a07      	ldr	r2, [pc, #28]	; (24004f68 <HAL_RCC_OscConfig+0x2a4>)
24004f4a:	6813      	ldr	r3, [r2, #0]
24004f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24004f50:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24004f52:	e6df      	b.n	24004d14 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
24004f54:	4d05      	ldr	r5, [pc, #20]	; (24004f6c <HAL_RCC_OscConfig+0x2a8>)
24004f56:	682b      	ldr	r3, [r5, #0]
24004f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24004f5c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
24004f5e:	f7fd fcc1 	bl	240028e4 <HAL_GetTick>
24004f62:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24004f64:	e009      	b.n	24004f7a <HAL_RCC_OscConfig+0x2b6>
24004f66:	bf00      	nop
24004f68:	58024400 	.word	0x58024400
24004f6c:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24004f70:	f7fd fcb8 	bl	240028e4 <HAL_GetTick>
24004f74:	1b80      	subs	r0, r0, r6
24004f76:	2864      	cmp	r0, #100	; 0x64
24004f78:	d825      	bhi.n	24004fc6 <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24004f7a:	682b      	ldr	r3, [r5, #0]
24004f7c:	05da      	lsls	r2, r3, #23
24004f7e:	d5f7      	bpl.n	24004f70 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24004f80:	68a3      	ldr	r3, [r4, #8]
24004f82:	2b01      	cmp	r3, #1
24004f84:	f000 8178 	beq.w	24005278 <HAL_RCC_OscConfig+0x5b4>
24004f88:	2b00      	cmp	r3, #0
24004f8a:	f000 8153 	beq.w	24005234 <HAL_RCC_OscConfig+0x570>
24004f8e:	2b05      	cmp	r3, #5
24004f90:	4ba5      	ldr	r3, [pc, #660]	; (24005228 <HAL_RCC_OscConfig+0x564>)
24004f92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24004f94:	f000 817f 	beq.w	24005296 <HAL_RCC_OscConfig+0x5d2>
24004f98:	f022 0201 	bic.w	r2, r2, #1
24004f9c:	671a      	str	r2, [r3, #112]	; 0x70
24004f9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24004fa0:	f022 0204 	bic.w	r2, r2, #4
24004fa4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
24004fa6:	f7fd fc9d 	bl	240028e4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24004faa:	4e9f      	ldr	r6, [pc, #636]	; (24005228 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24004fac:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
24004fb0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24004fb2:	e004      	b.n	24004fbe <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24004fb4:	f7fd fc96 	bl	240028e4 <HAL_GetTick>
24004fb8:	1b40      	subs	r0, r0, r5
24004fba:	42b8      	cmp	r0, r7
24004fbc:	d803      	bhi.n	24004fc6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24004fbe:	6f33      	ldr	r3, [r6, #112]	; 0x70
24004fc0:	079b      	lsls	r3, r3, #30
24004fc2:	d5f7      	bpl.n	24004fb4 <HAL_RCC_OscConfig+0x2f0>
24004fc4:	e723      	b.n	24004e0e <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
24004fc6:	2003      	movs	r0, #3
}
24004fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24004fca:	4d97      	ldr	r5, [pc, #604]	; (24005228 <HAL_RCC_OscConfig+0x564>)
24004fcc:	682b      	ldr	r3, [r5, #0]
24004fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24004fd2:	602b      	str	r3, [r5, #0]
24004fd4:	682b      	ldr	r3, [r5, #0]
24004fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24004fda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24004fdc:	f7fd fc82 	bl	240028e4 <HAL_GetTick>
24004fe0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24004fe2:	e004      	b.n	24004fee <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24004fe4:	f7fd fc7e 	bl	240028e4 <HAL_GetTick>
24004fe8:	1b80      	subs	r0, r0, r6
24004fea:	2864      	cmp	r0, #100	; 0x64
24004fec:	d8eb      	bhi.n	24004fc6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24004fee:	682b      	ldr	r3, [r5, #0]
24004ff0:	039f      	lsls	r7, r3, #14
24004ff2:	d4f7      	bmi.n	24004fe4 <HAL_RCC_OscConfig+0x320>
24004ff4:	e69c      	b.n	24004d30 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
24004ff6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24004ff8:	f023 0301 	bic.w	r3, r3, #1
24004ffc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24004ffe:	f7fd fc71 	bl	240028e4 <HAL_GetTick>
24005002:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24005004:	e004      	b.n	24005010 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24005006:	f7fd fc6d 	bl	240028e4 <HAL_GetTick>
2400500a:	1b80      	subs	r0, r0, r6
2400500c:	2802      	cmp	r0, #2
2400500e:	d8da      	bhi.n	24004fc6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24005010:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24005012:	0799      	lsls	r1, r3, #30
24005014:	d4f7      	bmi.n	24005006 <HAL_RCC_OscConfig+0x342>
24005016:	e6dd      	b.n	24004dd4 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
24005018:	682b      	ldr	r3, [r5, #0]
2400501a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2400501e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
24005020:	f7fd fc60 	bl	240028e4 <HAL_GetTick>
24005024:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24005026:	e004      	b.n	24005032 <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24005028:	f7fd fc5c 	bl	240028e4 <HAL_GetTick>
2400502c:	1b80      	subs	r0, r0, r6
2400502e:	2802      	cmp	r0, #2
24005030:	d8c9      	bhi.n	24004fc6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24005032:	682b      	ldr	r3, [r5, #0]
24005034:	0498      	lsls	r0, r3, #18
24005036:	d4f7      	bmi.n	24005028 <HAL_RCC_OscConfig+0x364>
24005038:	e6e5      	b.n	24004e06 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
2400503a:	682b      	ldr	r3, [r5, #0]
2400503c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24005040:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24005042:	f7fd fc4f 	bl	240028e4 <HAL_GetTick>
24005046:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24005048:	e004      	b.n	24005054 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
2400504a:	f7fd fc4b 	bl	240028e4 <HAL_GetTick>
2400504e:	1b80      	subs	r0, r0, r6
24005050:	2802      	cmp	r0, #2
24005052:	d8b8      	bhi.n	24004fc6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24005054:	682b      	ldr	r3, [r5, #0]
24005056:	05df      	lsls	r7, r3, #23
24005058:	d4f7      	bmi.n	2400504a <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2400505a:	6823      	ldr	r3, [r4, #0]
2400505c:	e6a2      	b.n	24004da4 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
2400505e:	f023 0301 	bic.w	r3, r3, #1
24005062:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24005064:	f7fd fc3e 	bl	240028e4 <HAL_GetTick>
24005068:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
2400506a:	e004      	b.n	24005076 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2400506c:	f7fd fc3a 	bl	240028e4 <HAL_GetTick>
24005070:	1b80      	subs	r0, r0, r6
24005072:	2802      	cmp	r0, #2
24005074:	d8a7      	bhi.n	24004fc6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24005076:	682b      	ldr	r3, [r5, #0]
24005078:	0758      	lsls	r0, r3, #29
2400507a:	d4f7      	bmi.n	2400506c <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
2400507c:	6823      	ldr	r3, [r4, #0]
2400507e:	e65b      	b.n	24004d38 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24005080:	0790      	lsls	r0, r2, #30
24005082:	f47f af1a 	bne.w	24004eba <HAL_RCC_OscConfig+0x1f6>
24005086:	e6e7      	b.n	24004e58 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24005088:	686b      	ldr	r3, [r5, #4]
2400508a:	6922      	ldr	r2, [r4, #16]
2400508c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
24005090:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24005094:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24005096:	6823      	ldr	r3, [r4, #0]
24005098:	e64e      	b.n	24004d38 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
2400509a:	2001      	movs	r0, #1
}
2400509c:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2400509e:	4a62      	ldr	r2, [pc, #392]	; (24005228 <HAL_RCC_OscConfig+0x564>)
240050a0:	6a21      	ldr	r1, [r4, #32]
240050a2:	68d3      	ldr	r3, [r2, #12]
240050a4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
240050a8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
240050ac:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240050ae:	6823      	ldr	r3, [r4, #0]
240050b0:	e678      	b.n	24004da4 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
240050b2:	f7fd fc17 	bl	240028e4 <HAL_GetTick>
240050b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240050b8:	e004      	b.n	240050c4 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
240050ba:	f7fd fc13 	bl	240028e4 <HAL_GetTick>
240050be:	1b80      	subs	r0, r0, r6
240050c0:	2802      	cmp	r0, #2
240050c2:	d880      	bhi.n	24004fc6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240050c4:	682b      	ldr	r3, [r5, #0]
240050c6:	0199      	lsls	r1, r3, #6
240050c8:	d4f7      	bmi.n	240050ba <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
240050ca:	6aa9      	ldr	r1, [r5, #40]	; 0x28
240050cc:	4b57      	ldr	r3, [pc, #348]	; (2400522c <HAL_RCC_OscConfig+0x568>)
240050ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
240050d0:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240050d2:	4957      	ldr	r1, [pc, #348]	; (24005230 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240050d4:	4e54      	ldr	r6, [pc, #336]	; (24005228 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
240050d6:	4313      	orrs	r3, r2
240050d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240050da:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
240050de:	62ab      	str	r3, [r5, #40]	; 0x28
240050e0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
240050e4:	3b01      	subs	r3, #1
240050e6:	3a01      	subs	r2, #1
240050e8:	025b      	lsls	r3, r3, #9
240050ea:	0412      	lsls	r2, r2, #16
240050ec:	b29b      	uxth	r3, r3
240050ee:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
240050f2:	4313      	orrs	r3, r2
240050f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
240050f6:	3a01      	subs	r2, #1
240050f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
240050fc:	4313      	orrs	r3, r2
240050fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
24005100:	3a01      	subs	r2, #1
24005102:	0612      	lsls	r2, r2, #24
24005104:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24005108:	4313      	orrs	r3, r2
2400510a:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
2400510c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400510e:	f023 0301 	bic.w	r3, r3, #1
24005112:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24005114:	6b6a      	ldr	r2, [r5, #52]	; 0x34
24005116:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24005118:	4011      	ands	r1, r2
2400511a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
2400511e:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24005120:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24005122:	6c22      	ldr	r2, [r4, #64]	; 0x40
24005124:	f023 030c 	bic.w	r3, r3, #12
24005128:	4313      	orrs	r3, r2
2400512a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
2400512c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400512e:	6c62      	ldr	r2, [r4, #68]	; 0x44
24005130:	f023 0302 	bic.w	r3, r3, #2
24005134:	4313      	orrs	r3, r2
24005136:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24005138:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400513a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400513e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24005140:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24005142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24005146:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
24005148:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400514a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400514e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
24005150:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24005152:	f043 0301 	orr.w	r3, r3, #1
24005156:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
24005158:	682b      	ldr	r3, [r5, #0]
2400515a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2400515e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24005160:	f7fd fbc0 	bl	240028e4 <HAL_GetTick>
24005164:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24005166:	e005      	b.n	24005174 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24005168:	f7fd fbbc 	bl	240028e4 <HAL_GetTick>
2400516c:	1b00      	subs	r0, r0, r4
2400516e:	2802      	cmp	r0, #2
24005170:	f63f af29 	bhi.w	24004fc6 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24005174:	6833      	ldr	r3, [r6, #0]
24005176:	019a      	lsls	r2, r3, #6
24005178:	d5f6      	bpl.n	24005168 <HAL_RCC_OscConfig+0x4a4>
2400517a:	e665      	b.n	24004e48 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2400517c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
2400517e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
24005180:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24005182:	f43f ae62 	beq.w	24004e4a <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24005186:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2400518a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
2400518c:	428b      	cmp	r3, r1
2400518e:	f47f aeb9 	bne.w	24004f04 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24005192:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24005196:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24005198:	429a      	cmp	r2, r3
2400519a:	f47f aeb3 	bne.w	24004f04 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2400519e:	6b23      	ldr	r3, [r4, #48]	; 0x30
240051a0:	f3c6 0208 	ubfx	r2, r6, #0, #9
240051a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
240051a6:	429a      	cmp	r2, r3
240051a8:	f47f aeac 	bne.w	24004f04 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
240051ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
240051ae:	f3c6 2246 	ubfx	r2, r6, #9, #7
240051b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
240051b4:	429a      	cmp	r2, r3
240051b6:	f47f aea5 	bne.w	24004f04 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240051ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
240051bc:	f3c6 4206 	ubfx	r2, r6, #16, #7
240051c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
240051c2:	429a      	cmp	r2, r3
240051c4:	f47f ae9e 	bne.w	24004f04 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
240051c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
240051ca:	f3c6 6606 	ubfx	r6, r6, #24, #7
240051ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
240051d0:	429e      	cmp	r6, r3
240051d2:	f47f ae97 	bne.w	24004f04 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
240051d6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
240051d8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
240051da:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
240051de:	429a      	cmp	r2, r3
240051e0:	f43f ae32 	beq.w	24004e48 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
240051e4:	4a10      	ldr	r2, [pc, #64]	; (24005228 <HAL_RCC_OscConfig+0x564>)
240051e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240051e8:	f023 0301 	bic.w	r3, r3, #1
240051ec:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
240051ee:	f7fd fb79 	bl	240028e4 <HAL_GetTick>
240051f2:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
240051f4:	f7fd fb76 	bl	240028e4 <HAL_GetTick>
240051f8:	42a8      	cmp	r0, r5
240051fa:	d0fb      	beq.n	240051f4 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240051fc:	4a0a      	ldr	r2, [pc, #40]	; (24005228 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
240051fe:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24005200:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24005202:	4b0b      	ldr	r3, [pc, #44]	; (24005230 <HAL_RCC_OscConfig+0x56c>)
24005204:	6b54      	ldr	r4, [r2, #52]	; 0x34
24005206:	4023      	ands	r3, r4
24005208:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
2400520c:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
2400520e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24005210:	f043 0301 	orr.w	r3, r3, #1
24005214:	62d3      	str	r3, [r2, #44]	; 0x2c
}
24005216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24005218:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
2400521c:	601a      	str	r2, [r3, #0]
2400521e:	681a      	ldr	r2, [r3, #0]
24005220:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24005224:	601a      	str	r2, [r3, #0]
24005226:	e575      	b.n	24004d14 <HAL_RCC_OscConfig+0x50>
24005228:	58024400 	.word	0x58024400
2400522c:	fffffc0c 	.word	0xfffffc0c
24005230:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24005234:	4d1c      	ldr	r5, [pc, #112]	; (240052a8 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24005236:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2400523a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
2400523c:	f023 0301 	bic.w	r3, r3, #1
24005240:	672b      	str	r3, [r5, #112]	; 0x70
24005242:	6f2b      	ldr	r3, [r5, #112]	; 0x70
24005244:	f023 0304 	bic.w	r3, r3, #4
24005248:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
2400524a:	f7fd fb4b 	bl	240028e4 <HAL_GetTick>
2400524e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24005250:	e005      	b.n	2400525e <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24005252:	f7fd fb47 	bl	240028e4 <HAL_GetTick>
24005256:	1b80      	subs	r0, r0, r6
24005258:	42b8      	cmp	r0, r7
2400525a:	f63f aeb4 	bhi.w	24004fc6 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2400525e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
24005260:	0798      	lsls	r0, r3, #30
24005262:	d4f6      	bmi.n	24005252 <HAL_RCC_OscConfig+0x58e>
24005264:	e5d3      	b.n	24004e0e <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24005266:	68eb      	ldr	r3, [r5, #12]
24005268:	6a22      	ldr	r2, [r4, #32]
2400526a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
2400526e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24005272:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24005274:	6823      	ldr	r3, [r4, #0]
24005276:	e595      	b.n	24004da4 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24005278:	4a0b      	ldr	r2, [pc, #44]	; (240052a8 <HAL_RCC_OscConfig+0x5e4>)
2400527a:	6f13      	ldr	r3, [r2, #112]	; 0x70
2400527c:	f043 0301 	orr.w	r3, r3, #1
24005280:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24005282:	e690      	b.n	24004fa6 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24005284:	4a08      	ldr	r2, [pc, #32]	; (240052a8 <HAL_RCC_OscConfig+0x5e4>)
24005286:	6853      	ldr	r3, [r2, #4]
24005288:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
2400528c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24005290:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24005292:	6823      	ldr	r3, [r4, #0]
24005294:	e586      	b.n	24004da4 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24005296:	f042 0204 	orr.w	r2, r2, #4
2400529a:	671a      	str	r2, [r3, #112]	; 0x70
2400529c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2400529e:	f042 0201 	orr.w	r2, r2, #1
240052a2:	671a      	str	r2, [r3, #112]	; 0x70
240052a4:	e67f      	b.n	24004fa6 <HAL_RCC_OscConfig+0x2e2>
240052a6:	bf00      	nop
240052a8:	58024400 	.word	0x58024400

240052ac <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
240052ac:	4a47      	ldr	r2, [pc, #284]	; (240053cc <HAL_RCC_GetSysClockFreq+0x120>)
240052ae:	6913      	ldr	r3, [r2, #16]
240052b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
240052b4:	2b10      	cmp	r3, #16
240052b6:	d004      	beq.n	240052c2 <HAL_RCC_GetSysClockFreq+0x16>
240052b8:	2b18      	cmp	r3, #24
240052ba:	d00d      	beq.n	240052d8 <HAL_RCC_GetSysClockFreq+0x2c>
240052bc:	b11b      	cbz	r3, 240052c6 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
240052be:	4844      	ldr	r0, [pc, #272]	; (240053d0 <HAL_RCC_GetSysClockFreq+0x124>)
240052c0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
240052c2:	4844      	ldr	r0, [pc, #272]	; (240053d4 <HAL_RCC_GetSysClockFreq+0x128>)
240052c4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240052c6:	6813      	ldr	r3, [r2, #0]
240052c8:	0699      	lsls	r1, r3, #26
240052ca:	d54a      	bpl.n	24005362 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240052cc:	6813      	ldr	r3, [r2, #0]
240052ce:	4842      	ldr	r0, [pc, #264]	; (240053d8 <HAL_RCC_GetSysClockFreq+0x12c>)
240052d0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240052d4:	40d8      	lsrs	r0, r3
240052d6:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240052d8:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
240052da:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240052dc:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240052de:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
240052e0:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240052e4:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240052e6:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
240052ea:	d038      	beq.n	2400535e <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240052ec:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240052f0:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240052f4:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240052f8:	fb05 f101 	mul.w	r1, r5, r1
240052fc:	2b01      	cmp	r3, #1
240052fe:	ee07 1a90 	vmov	s15, r1
24005302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
24005306:	d002      	beq.n	2400530e <HAL_RCC_GetSysClockFreq+0x62>
24005308:	2b02      	cmp	r3, #2
2400530a:	d02c      	beq.n	24005366 <HAL_RCC_GetSysClockFreq+0xba>
2400530c:	b393      	cbz	r3, 24005374 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400530e:	ee07 0a90 	vmov	s15, r0
24005312:	eddf 6a32 	vldr	s13, [pc, #200]	; 240053dc <HAL_RCC_GetSysClockFreq+0x130>
24005316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400531a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2400531c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24005320:	eddf 5a2f 	vldr	s11, [pc, #188]	; 240053e0 <HAL_RCC_GetSysClockFreq+0x134>
24005324:	f3c3 0308 	ubfx	r3, r3, #0, #9
24005328:	ee06 3a90 	vmov	s13, r3
2400532c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24005330:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24005334:	ee76 6a85 	vadd.f32	s13, s13, s10
24005338:	eee7 6a25 	vfma.f32	s13, s14, s11
2400533c:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24005340:	4b22      	ldr	r3, [pc, #136]	; (240053cc <HAL_RCC_GetSysClockFreq+0x120>)
24005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24005344:	f3c3 2346 	ubfx	r3, r3, #9, #7
24005348:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
2400534a:	ee07 3a90 	vmov	s15, r3
2400534e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24005352:	eec6 7a87 	vdiv.f32	s15, s13, s14
24005356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400535a:	ee17 0a90 	vmov	r0, s15
}
2400535e:	bc30      	pop	{r4, r5}
24005360:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
24005362:	481d      	ldr	r0, [pc, #116]	; (240053d8 <HAL_RCC_GetSysClockFreq+0x12c>)
}
24005364:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24005366:	ee07 0a90 	vmov	s15, r0
2400536a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 240053e4 <HAL_RCC_GetSysClockFreq+0x138>
2400536e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24005372:	e7d2      	b.n	2400531a <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24005374:	6813      	ldr	r3, [r2, #0]
24005376:	069b      	lsls	r3, r3, #26
24005378:	d520      	bpl.n	240053bc <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400537a:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400537c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24005380:	4915      	ldr	r1, [pc, #84]	; (240053d8 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24005382:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24005386:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24005388:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400538c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24005390:	ed9f 5a13 	vldr	s10, [pc, #76]	; 240053e0 <HAL_RCC_GetSysClockFreq+0x134>
24005394:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24005398:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400539a:	ee06 3a90 	vmov	s13, r3
2400539e:	ee05 1a90 	vmov	s11, r1
240053a2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
240053a6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
240053aa:	ee76 6a86 	vadd.f32	s13, s13, s12
240053ae:	ee85 6aa7 	vdiv.f32	s12, s11, s15
240053b2:	eee7 6a05 	vfma.f32	s13, s14, s10
240053b6:	ee66 6a26 	vmul.f32	s13, s12, s13
240053ba:	e7c1      	b.n	24005340 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240053bc:	ee07 0a90 	vmov	s15, r0
240053c0:	eddf 6a09 	vldr	s13, [pc, #36]	; 240053e8 <HAL_RCC_GetSysClockFreq+0x13c>
240053c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240053c8:	e7a7      	b.n	2400531a <HAL_RCC_GetSysClockFreq+0x6e>
240053ca:	bf00      	nop
240053cc:	58024400 	.word	0x58024400
240053d0:	003d0900 	.word	0x003d0900
240053d4:	00f42400 	.word	0x00f42400
240053d8:	03d09000 	.word	0x03d09000
240053dc:	4a742400 	.word	0x4a742400
240053e0:	39000000 	.word	0x39000000
240053e4:	4b742400 	.word	0x4b742400
240053e8:	4c742400 	.word	0x4c742400

240053ec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
240053ec:	2800      	cmp	r0, #0
240053ee:	f000 810c 	beq.w	2400560a <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
240053f2:	4a8c      	ldr	r2, [pc, #560]	; (24005624 <HAL_RCC_ClockConfig+0x238>)
240053f4:	6813      	ldr	r3, [r2, #0]
240053f6:	f003 030f 	and.w	r3, r3, #15
240053fa:	428b      	cmp	r3, r1
{
240053fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24005400:	4604      	mov	r4, r0
24005402:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24005404:	d20c      	bcs.n	24005420 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
24005406:	6813      	ldr	r3, [r2, #0]
24005408:	f023 030f 	bic.w	r3, r3, #15
2400540c:	430b      	orrs	r3, r1
2400540e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24005410:	6813      	ldr	r3, [r2, #0]
24005412:	f003 030f 	and.w	r3, r3, #15
24005416:	428b      	cmp	r3, r1
24005418:	d002      	beq.n	24005420 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
2400541a:	2001      	movs	r0, #1
}
2400541c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24005420:	6823      	ldr	r3, [r4, #0]
24005422:	075f      	lsls	r7, r3, #29
24005424:	d50b      	bpl.n	2400543e <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24005426:	4980      	ldr	r1, [pc, #512]	; (24005628 <HAL_RCC_ClockConfig+0x23c>)
24005428:	6920      	ldr	r0, [r4, #16]
2400542a:	698a      	ldr	r2, [r1, #24]
2400542c:	f002 0270 	and.w	r2, r2, #112	; 0x70
24005430:	4290      	cmp	r0, r2
24005432:	d904      	bls.n	2400543e <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24005434:	698a      	ldr	r2, [r1, #24]
24005436:	f022 0270 	bic.w	r2, r2, #112	; 0x70
2400543a:	4302      	orrs	r2, r0
2400543c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2400543e:	071e      	lsls	r6, r3, #28
24005440:	d50b      	bpl.n	2400545a <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24005442:	4979      	ldr	r1, [pc, #484]	; (24005628 <HAL_RCC_ClockConfig+0x23c>)
24005444:	6960      	ldr	r0, [r4, #20]
24005446:	69ca      	ldr	r2, [r1, #28]
24005448:	f002 0270 	and.w	r2, r2, #112	; 0x70
2400544c:	4290      	cmp	r0, r2
2400544e:	d904      	bls.n	2400545a <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24005450:	69ca      	ldr	r2, [r1, #28]
24005452:	f022 0270 	bic.w	r2, r2, #112	; 0x70
24005456:	4302      	orrs	r2, r0
24005458:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2400545a:	06d8      	lsls	r0, r3, #27
2400545c:	d50b      	bpl.n	24005476 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
2400545e:	4972      	ldr	r1, [pc, #456]	; (24005628 <HAL_RCC_ClockConfig+0x23c>)
24005460:	69a0      	ldr	r0, [r4, #24]
24005462:	69ca      	ldr	r2, [r1, #28]
24005464:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24005468:	4290      	cmp	r0, r2
2400546a:	d904      	bls.n	24005476 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2400546c:	69ca      	ldr	r2, [r1, #28]
2400546e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
24005472:	4302      	orrs	r2, r0
24005474:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24005476:	0699      	lsls	r1, r3, #26
24005478:	d50b      	bpl.n	24005492 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
2400547a:	496b      	ldr	r1, [pc, #428]	; (24005628 <HAL_RCC_ClockConfig+0x23c>)
2400547c:	69e0      	ldr	r0, [r4, #28]
2400547e:	6a0a      	ldr	r2, [r1, #32]
24005480:	f002 0270 	and.w	r2, r2, #112	; 0x70
24005484:	4290      	cmp	r0, r2
24005486:	d904      	bls.n	24005492 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24005488:	6a0a      	ldr	r2, [r1, #32]
2400548a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
2400548e:	4302      	orrs	r2, r0
24005490:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24005492:	079a      	lsls	r2, r3, #30
24005494:	f140 80ab 	bpl.w	240055ee <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24005498:	4863      	ldr	r0, [pc, #396]	; (24005628 <HAL_RCC_ClockConfig+0x23c>)
2400549a:	68e1      	ldr	r1, [r4, #12]
2400549c:	6982      	ldr	r2, [r0, #24]
2400549e:	f002 020f 	and.w	r2, r2, #15
240054a2:	4291      	cmp	r1, r2
240054a4:	d904      	bls.n	240054b0 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
240054a6:	6982      	ldr	r2, [r0, #24]
240054a8:	f022 020f 	bic.w	r2, r2, #15
240054ac:	430a      	orrs	r2, r1
240054ae:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
240054b0:	07d8      	lsls	r0, r3, #31
240054b2:	d530      	bpl.n	24005516 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
240054b4:	4a5c      	ldr	r2, [pc, #368]	; (24005628 <HAL_RCC_ClockConfig+0x23c>)
240054b6:	68a1      	ldr	r1, [r4, #8]
240054b8:	6993      	ldr	r3, [r2, #24]
240054ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
240054be:	430b      	orrs	r3, r1
240054c0:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
240054c2:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240054c4:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
240054c6:	2902      	cmp	r1, #2
240054c8:	f000 80a1 	beq.w	2400560e <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
240054cc:	2903      	cmp	r1, #3
240054ce:	f000 8098 	beq.w	24005602 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
240054d2:	2901      	cmp	r1, #1
240054d4:	f000 80a1 	beq.w	2400561a <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240054d8:	0758      	lsls	r0, r3, #29
240054da:	d59e      	bpl.n	2400541a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
240054dc:	4e52      	ldr	r6, [pc, #328]	; (24005628 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
240054de:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
240054e2:	6933      	ldr	r3, [r6, #16]
240054e4:	f023 0307 	bic.w	r3, r3, #7
240054e8:	430b      	orrs	r3, r1
240054ea:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
240054ec:	f7fd f9fa 	bl	240028e4 <HAL_GetTick>
240054f0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
240054f2:	e005      	b.n	24005500 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
240054f4:	f7fd f9f6 	bl	240028e4 <HAL_GetTick>
240054f8:	1bc0      	subs	r0, r0, r7
240054fa:	4540      	cmp	r0, r8
240054fc:	f200 808b 	bhi.w	24005616 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24005500:	6933      	ldr	r3, [r6, #16]
24005502:	6862      	ldr	r2, [r4, #4]
24005504:	f003 0338 	and.w	r3, r3, #56	; 0x38
24005508:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
2400550c:	d1f2      	bne.n	240054f4 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2400550e:	6823      	ldr	r3, [r4, #0]
24005510:	0799      	lsls	r1, r3, #30
24005512:	d506      	bpl.n	24005522 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24005514:	68e1      	ldr	r1, [r4, #12]
24005516:	4844      	ldr	r0, [pc, #272]	; (24005628 <HAL_RCC_ClockConfig+0x23c>)
24005518:	6982      	ldr	r2, [r0, #24]
2400551a:	f002 020f 	and.w	r2, r2, #15
2400551e:	428a      	cmp	r2, r1
24005520:	d869      	bhi.n	240055f6 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
24005522:	4940      	ldr	r1, [pc, #256]	; (24005624 <HAL_RCC_ClockConfig+0x238>)
24005524:	680a      	ldr	r2, [r1, #0]
24005526:	f002 020f 	and.w	r2, r2, #15
2400552a:	42aa      	cmp	r2, r5
2400552c:	d90a      	bls.n	24005544 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
2400552e:	680a      	ldr	r2, [r1, #0]
24005530:	f022 020f 	bic.w	r2, r2, #15
24005534:	432a      	orrs	r2, r5
24005536:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24005538:	680a      	ldr	r2, [r1, #0]
2400553a:	f002 020f 	and.w	r2, r2, #15
2400553e:	42aa      	cmp	r2, r5
24005540:	f47f af6b 	bne.w	2400541a <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24005544:	075a      	lsls	r2, r3, #29
24005546:	d50b      	bpl.n	24005560 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24005548:	4937      	ldr	r1, [pc, #220]	; (24005628 <HAL_RCC_ClockConfig+0x23c>)
2400554a:	6920      	ldr	r0, [r4, #16]
2400554c:	698a      	ldr	r2, [r1, #24]
2400554e:	f002 0270 	and.w	r2, r2, #112	; 0x70
24005552:	4290      	cmp	r0, r2
24005554:	d204      	bcs.n	24005560 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24005556:	698a      	ldr	r2, [r1, #24]
24005558:	f022 0270 	bic.w	r2, r2, #112	; 0x70
2400555c:	4302      	orrs	r2, r0
2400555e:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24005560:	071f      	lsls	r7, r3, #28
24005562:	d50b      	bpl.n	2400557c <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24005564:	4930      	ldr	r1, [pc, #192]	; (24005628 <HAL_RCC_ClockConfig+0x23c>)
24005566:	6960      	ldr	r0, [r4, #20]
24005568:	69ca      	ldr	r2, [r1, #28]
2400556a:	f002 0270 	and.w	r2, r2, #112	; 0x70
2400556e:	4290      	cmp	r0, r2
24005570:	d204      	bcs.n	2400557c <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24005572:	69ca      	ldr	r2, [r1, #28]
24005574:	f022 0270 	bic.w	r2, r2, #112	; 0x70
24005578:	4302      	orrs	r2, r0
2400557a:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2400557c:	06de      	lsls	r6, r3, #27
2400557e:	d50b      	bpl.n	24005598 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24005580:	4929      	ldr	r1, [pc, #164]	; (24005628 <HAL_RCC_ClockConfig+0x23c>)
24005582:	69a0      	ldr	r0, [r4, #24]
24005584:	69ca      	ldr	r2, [r1, #28]
24005586:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
2400558a:	4290      	cmp	r0, r2
2400558c:	d204      	bcs.n	24005598 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
2400558e:	69ca      	ldr	r2, [r1, #28]
24005590:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
24005594:	4302      	orrs	r2, r0
24005596:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24005598:	069d      	lsls	r5, r3, #26
2400559a:	d50b      	bpl.n	240055b4 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
2400559c:	4a22      	ldr	r2, [pc, #136]	; (24005628 <HAL_RCC_ClockConfig+0x23c>)
2400559e:	69e1      	ldr	r1, [r4, #28]
240055a0:	6a13      	ldr	r3, [r2, #32]
240055a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
240055a6:	4299      	cmp	r1, r3
240055a8:	d204      	bcs.n	240055b4 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
240055aa:	6a13      	ldr	r3, [r2, #32]
240055ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
240055b0:	430b      	orrs	r3, r1
240055b2:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240055b4:	f7ff fe7a 	bl	240052ac <HAL_RCC_GetSysClockFreq>
240055b8:	4a1b      	ldr	r2, [pc, #108]	; (24005628 <HAL_RCC_ClockConfig+0x23c>)
240055ba:	4603      	mov	r3, r0
240055bc:	481b      	ldr	r0, [pc, #108]	; (2400562c <HAL_RCC_ClockConfig+0x240>)
240055be:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240055c0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240055c2:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
240055c6:	4d1a      	ldr	r5, [pc, #104]	; (24005630 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240055c8:	f002 020f 	and.w	r2, r2, #15
240055cc:	4c19      	ldr	r4, [pc, #100]	; (24005634 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240055ce:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240055d0:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240055d2:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
240055d6:	4818      	ldr	r0, [pc, #96]	; (24005638 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240055d8:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240055dc:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
240055de:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
240055e0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240055e2:	40d3      	lsrs	r3, r2
240055e4:	6023      	str	r3, [r4, #0]
}
240055e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
240055ea:	f7fd b919 	b.w	24002820 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
240055ee:	07da      	lsls	r2, r3, #31
240055f0:	f53f af60 	bmi.w	240054b4 <HAL_RCC_ClockConfig+0xc8>
240055f4:	e795      	b.n	24005522 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
240055f6:	6982      	ldr	r2, [r0, #24]
240055f8:	f022 020f 	bic.w	r2, r2, #15
240055fc:	4311      	orrs	r1, r2
240055fe:	6181      	str	r1, [r0, #24]
24005600:	e78f      	b.n	24005522 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24005602:	019f      	lsls	r7, r3, #6
24005604:	f53f af6a 	bmi.w	240054dc <HAL_RCC_ClockConfig+0xf0>
24005608:	e707      	b.n	2400541a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
2400560a:	2001      	movs	r0, #1
}
2400560c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400560e:	039b      	lsls	r3, r3, #14
24005610:	f53f af64 	bmi.w	240054dc <HAL_RCC_ClockConfig+0xf0>
24005614:	e701      	b.n	2400541a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
24005616:	2003      	movs	r0, #3
24005618:	e700      	b.n	2400541c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2400561a:	05de      	lsls	r6, r3, #23
2400561c:	f53f af5e 	bmi.w	240054dc <HAL_RCC_ClockConfig+0xf0>
24005620:	e6fb      	b.n	2400541a <HAL_RCC_ClockConfig+0x2e>
24005622:	bf00      	nop
24005624:	52002000 	.word	0x52002000
24005628:	58024400 	.word	0x58024400
2400562c:	24014108 	.word	0x24014108
24005630:	2000002c 	.word	0x2000002c
24005634:	20000030 	.word	0x20000030
24005638:	20000038 	.word	0x20000038

2400563c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400563c:	4a18      	ldr	r2, [pc, #96]	; (240056a0 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2400563e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24005640:	6913      	ldr	r3, [r2, #16]
24005642:	f003 0338 	and.w	r3, r3, #56	; 0x38
24005646:	2b10      	cmp	r3, #16
24005648:	d01a      	beq.n	24005680 <HAL_RCC_GetHCLKFreq+0x44>
2400564a:	2b18      	cmp	r3, #24
2400564c:	d023      	beq.n	24005696 <HAL_RCC_GetHCLKFreq+0x5a>
2400564e:	b1cb      	cbz	r3, 24005684 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
24005650:	4814      	ldr	r0, [pc, #80]	; (240056a4 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24005652:	4b13      	ldr	r3, [pc, #76]	; (240056a0 <HAL_RCC_GetHCLKFreq+0x64>)
24005654:	4914      	ldr	r1, [pc, #80]	; (240056a8 <HAL_RCC_GetHCLKFreq+0x6c>)
24005656:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005658:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400565a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400565e:	4c13      	ldr	r4, [pc, #76]	; (240056ac <HAL_RCC_GetHCLKFreq+0x70>)
24005660:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24005664:	4d12      	ldr	r5, [pc, #72]	; (240056b0 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24005666:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005668:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400566a:	f002 021f 	and.w	r2, r2, #31
2400566e:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24005672:	f003 001f 	and.w	r0, r3, #31
24005676:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
2400567a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400567c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
2400567e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24005680:	480c      	ldr	r0, [pc, #48]	; (240056b4 <HAL_RCC_GetHCLKFreq+0x78>)
24005682:	e7e6      	b.n	24005652 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24005684:	6813      	ldr	r3, [r2, #0]
24005686:	069b      	lsls	r3, r3, #26
24005688:	d508      	bpl.n	2400569c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400568a:	6812      	ldr	r2, [r2, #0]
2400568c:	480a      	ldr	r0, [pc, #40]	; (240056b8 <HAL_RCC_GetHCLKFreq+0x7c>)
2400568e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
24005692:	40d0      	lsrs	r0, r2
24005694:	e7dd      	b.n	24005652 <HAL_RCC_GetHCLKFreq+0x16>
24005696:	f7ff fa91 	bl	24004bbc <HAL_RCC_GetSysClockFreq.part.0>
2400569a:	e7da      	b.n	24005652 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
2400569c:	4806      	ldr	r0, [pc, #24]	; (240056b8 <HAL_RCC_GetHCLKFreq+0x7c>)
2400569e:	e7d8      	b.n	24005652 <HAL_RCC_GetHCLKFreq+0x16>
240056a0:	58024400 	.word	0x58024400
240056a4:	003d0900 	.word	0x003d0900
240056a8:	24014108 	.word	0x24014108
240056ac:	20000030 	.word	0x20000030
240056b0:	2000002c 	.word	0x2000002c
240056b4:	00f42400 	.word	0x00f42400
240056b8:	03d09000 	.word	0x03d09000

240056bc <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
240056bc:	4a1c      	ldr	r2, [pc, #112]	; (24005730 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
240056be:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
240056c0:	6913      	ldr	r3, [r2, #16]
240056c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
240056c6:	2b10      	cmp	r3, #16
240056c8:	d021      	beq.n	2400570e <HAL_RCC_GetPCLK1Freq+0x52>
240056ca:	2b18      	cmp	r3, #24
240056cc:	d02b      	beq.n	24005726 <HAL_RCC_GetPCLK1Freq+0x6a>
240056ce:	b303      	cbz	r3, 24005712 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
240056d0:	4818      	ldr	r0, [pc, #96]	; (24005734 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240056d2:	4a17      	ldr	r2, [pc, #92]	; (24005730 <HAL_RCC_GetPCLK1Freq+0x74>)
240056d4:	4918      	ldr	r1, [pc, #96]	; (24005738 <HAL_RCC_GetPCLK1Freq+0x7c>)
240056d6:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
240056d8:	4d18      	ldr	r5, [pc, #96]	; (2400573c <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240056da:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240056de:	4c18      	ldr	r4, [pc, #96]	; (24005740 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240056e0:	5ccb      	ldrb	r3, [r1, r3]
240056e2:	f003 031f 	and.w	r3, r3, #31
240056e6:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240056ea:	6990      	ldr	r0, [r2, #24]
240056ec:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
240056f0:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240056f2:	5c08      	ldrb	r0, [r1, r0]
240056f4:	f000 001f 	and.w	r0, r0, #31
240056f8:	40c3      	lsrs	r3, r0
240056fa:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
240056fc:	69d2      	ldr	r2, [r2, #28]
240056fe:	f3c2 1202 	ubfx	r2, r2, #4, #3
24005702:	5c88      	ldrb	r0, [r1, r2]
24005704:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
24005708:	fa23 f000 	lsr.w	r0, r3, r0
2400570c:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400570e:	480d      	ldr	r0, [pc, #52]	; (24005744 <HAL_RCC_GetPCLK1Freq+0x88>)
24005710:	e7df      	b.n	240056d2 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24005712:	6813      	ldr	r3, [r2, #0]
24005714:	069b      	lsls	r3, r3, #26
24005716:	d509      	bpl.n	2400572c <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24005718:	6810      	ldr	r0, [r2, #0]
2400571a:	4b0b      	ldr	r3, [pc, #44]	; (24005748 <HAL_RCC_GetPCLK1Freq+0x8c>)
2400571c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
24005720:	fa23 f000 	lsr.w	r0, r3, r0
24005724:	e7d5      	b.n	240056d2 <HAL_RCC_GetPCLK1Freq+0x16>
24005726:	f7ff fa49 	bl	24004bbc <HAL_RCC_GetSysClockFreq.part.0>
2400572a:	e7d2      	b.n	240056d2 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
2400572c:	4806      	ldr	r0, [pc, #24]	; (24005748 <HAL_RCC_GetPCLK1Freq+0x8c>)
2400572e:	e7d0      	b.n	240056d2 <HAL_RCC_GetPCLK1Freq+0x16>
24005730:	58024400 	.word	0x58024400
24005734:	003d0900 	.word	0x003d0900
24005738:	24014108 	.word	0x24014108
2400573c:	2000002c 	.word	0x2000002c
24005740:	20000030 	.word	0x20000030
24005744:	00f42400 	.word	0x00f42400
24005748:	03d09000 	.word	0x03d09000

2400574c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
2400574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2400574e:	4c3a      	ldr	r4, [pc, #232]	; (24005838 <RCCEx_PLL2_Config+0xec>)
24005750:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24005752:	f003 0303 	and.w	r3, r3, #3
24005756:	2b03      	cmp	r3, #3
24005758:	d067      	beq.n	2400582a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
2400575a:	6823      	ldr	r3, [r4, #0]
2400575c:	4606      	mov	r6, r0
2400575e:	460f      	mov	r7, r1
24005760:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24005764:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24005766:	f7fd f8bd 	bl	240028e4 <HAL_GetTick>
2400576a:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2400576c:	e004      	b.n	24005778 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
2400576e:	f7fd f8b9 	bl	240028e4 <HAL_GetTick>
24005772:	1b43      	subs	r3, r0, r5
24005774:	2b02      	cmp	r3, #2
24005776:	d856      	bhi.n	24005826 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24005778:	6823      	ldr	r3, [r4, #0]
2400577a:	011a      	lsls	r2, r3, #4
2400577c:	d4f7      	bmi.n	2400576e <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
2400577e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24005780:	6832      	ldr	r2, [r6, #0]
24005782:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24005786:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
2400578a:	62a3      	str	r3, [r4, #40]	; 0x28
2400578c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
24005790:	3b01      	subs	r3, #1
24005792:	3a01      	subs	r2, #1
24005794:	025b      	lsls	r3, r3, #9
24005796:	0412      	lsls	r2, r2, #16
24005798:	b29b      	uxth	r3, r3
2400579a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
2400579e:	4313      	orrs	r3, r2
240057a0:	6872      	ldr	r2, [r6, #4]
240057a2:	3a01      	subs	r2, #1
240057a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
240057a8:	4313      	orrs	r3, r2
240057aa:	6932      	ldr	r2, [r6, #16]
240057ac:	3a01      	subs	r2, #1
240057ae:	0612      	lsls	r2, r2, #24
240057b0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
240057b4:	4313      	orrs	r3, r2
240057b6:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
240057b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240057ba:	6972      	ldr	r2, [r6, #20]
240057bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
240057c0:	4313      	orrs	r3, r2
240057c2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
240057c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240057c6:	69b3      	ldr	r3, [r6, #24]
240057c8:	f022 0220 	bic.w	r2, r2, #32
240057cc:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
240057ce:	4b1b      	ldr	r3, [pc, #108]	; (2400583c <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
240057d0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
240057d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240057d4:	f022 0210 	bic.w	r2, r2, #16
240057d8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
240057da:	6be1      	ldr	r1, [r4, #60]	; 0x3c
240057dc:	69f2      	ldr	r2, [r6, #28]
240057de:	400b      	ands	r3, r1
240057e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
240057e4:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
240057e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240057e8:	f043 0310 	orr.w	r3, r3, #16
240057ec:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
240057ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
240057f0:	b1ef      	cbz	r7, 2400582e <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
240057f2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
240057f4:	bf0c      	ite	eq
240057f6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
240057fa:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
240057fe:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
24005800:	4c0d      	ldr	r4, [pc, #52]	; (24005838 <RCCEx_PLL2_Config+0xec>)
24005802:	6823      	ldr	r3, [r4, #0]
24005804:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
24005808:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400580a:	f7fd f86b 	bl	240028e4 <HAL_GetTick>
2400580e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24005810:	e004      	b.n	2400581c <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24005812:	f7fd f867 	bl	240028e4 <HAL_GetTick>
24005816:	1b40      	subs	r0, r0, r5
24005818:	2802      	cmp	r0, #2
2400581a:	d804      	bhi.n	24005826 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2400581c:	6823      	ldr	r3, [r4, #0]
2400581e:	011b      	lsls	r3, r3, #4
24005820:	d5f7      	bpl.n	24005812 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
24005822:	2000      	movs	r0, #0
}
24005824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
24005826:	2003      	movs	r0, #3
}
24005828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
2400582a:	2001      	movs	r0, #1
}
2400582c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
2400582e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
24005832:	62e3      	str	r3, [r4, #44]	; 0x2c
24005834:	e7e4      	b.n	24005800 <RCCEx_PLL2_Config+0xb4>
24005836:	bf00      	nop
24005838:	58024400 	.word	0x58024400
2400583c:	ffff0007 	.word	0xffff0007

24005840 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
24005840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24005842:	4c3a      	ldr	r4, [pc, #232]	; (2400592c <RCCEx_PLL3_Config+0xec>)
24005844:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24005846:	f003 0303 	and.w	r3, r3, #3
2400584a:	2b03      	cmp	r3, #3
2400584c:	d067      	beq.n	2400591e <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
2400584e:	6823      	ldr	r3, [r4, #0]
24005850:	4606      	mov	r6, r0
24005852:	460f      	mov	r7, r1
24005854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24005858:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400585a:	f7fd f843 	bl	240028e4 <HAL_GetTick>
2400585e:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24005860:	e004      	b.n	2400586c <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24005862:	f7fd f83f 	bl	240028e4 <HAL_GetTick>
24005866:	1b43      	subs	r3, r0, r5
24005868:	2b02      	cmp	r3, #2
2400586a:	d856      	bhi.n	2400591a <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2400586c:	6823      	ldr	r3, [r4, #0]
2400586e:	009a      	lsls	r2, r3, #2
24005870:	d4f7      	bmi.n	24005862 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
24005872:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24005874:	6832      	ldr	r2, [r6, #0]
24005876:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
2400587a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
2400587e:	62a3      	str	r3, [r4, #40]	; 0x28
24005880:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
24005884:	3b01      	subs	r3, #1
24005886:	3a01      	subs	r2, #1
24005888:	025b      	lsls	r3, r3, #9
2400588a:	0412      	lsls	r2, r2, #16
2400588c:	b29b      	uxth	r3, r3
2400588e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24005892:	4313      	orrs	r3, r2
24005894:	6872      	ldr	r2, [r6, #4]
24005896:	3a01      	subs	r2, #1
24005898:	f3c2 0208 	ubfx	r2, r2, #0, #9
2400589c:	4313      	orrs	r3, r2
2400589e:	6932      	ldr	r2, [r6, #16]
240058a0:	3a01      	subs	r2, #1
240058a2:	0612      	lsls	r2, r2, #24
240058a4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
240058a8:	4313      	orrs	r3, r2
240058aa:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
240058ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240058ae:	6972      	ldr	r2, [r6, #20]
240058b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
240058b4:	4313      	orrs	r3, r2
240058b6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
240058b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240058ba:	69b3      	ldr	r3, [r6, #24]
240058bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
240058c0:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
240058c2:	4b1b      	ldr	r3, [pc, #108]	; (24005930 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
240058c4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
240058c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240058c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240058cc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
240058ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
240058d0:	69f2      	ldr	r2, [r6, #28]
240058d2:	400b      	ands	r3, r1
240058d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
240058d8:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
240058da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240058dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240058e0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
240058e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
240058e4:	b1ef      	cbz	r7, 24005922 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
240058e6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
240058e8:	bf0c      	ite	eq
240058ea:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
240058ee:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
240058f2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
240058f4:	4c0d      	ldr	r4, [pc, #52]	; (2400592c <RCCEx_PLL3_Config+0xec>)
240058f6:	6823      	ldr	r3, [r4, #0]
240058f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
240058fc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240058fe:	f7fc fff1 	bl	240028e4 <HAL_GetTick>
24005902:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24005904:	e004      	b.n	24005910 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24005906:	f7fc ffed 	bl	240028e4 <HAL_GetTick>
2400590a:	1b40      	subs	r0, r0, r5
2400590c:	2802      	cmp	r0, #2
2400590e:	d804      	bhi.n	2400591a <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24005910:	6823      	ldr	r3, [r4, #0]
24005912:	009b      	lsls	r3, r3, #2
24005914:	d5f7      	bpl.n	24005906 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
24005916:	2000      	movs	r0, #0
}
24005918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
2400591a:	2003      	movs	r0, #3
}
2400591c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
2400591e:	2001      	movs	r0, #1
}
24005920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24005922:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24005926:	62e3      	str	r3, [r4, #44]	; 0x2c
24005928:	e7e4      	b.n	240058f4 <RCCEx_PLL3_Config+0xb4>
2400592a:	bf00      	nop
2400592c:	58024400 	.word	0x58024400
24005930:	ffff0007 	.word	0xffff0007

24005934 <HAL_RCCEx_PeriphCLKConfig>:
{
24005934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24005938:	e9d0 3200 	ldrd	r3, r2, [r0]
{
2400593c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2400593e:	011d      	lsls	r5, r3, #4
24005940:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
24005944:	d523      	bpl.n	2400598e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
24005946:	6e81      	ldr	r1, [r0, #104]	; 0x68
24005948:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
2400594c:	f000 854f 	beq.w	240063ee <HAL_RCCEx_PeriphCLKConfig+0xaba>
24005950:	d812      	bhi.n	24005978 <HAL_RCCEx_PeriphCLKConfig+0x44>
24005952:	2900      	cmp	r1, #0
24005954:	f000 85a5 	beq.w	240064a2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
24005958:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
2400595c:	f040 859e 	bne.w	2400649c <HAL_RCCEx_PeriphCLKConfig+0xb68>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24005960:	2102      	movs	r1, #2
24005962:	3008      	adds	r0, #8
24005964:	f7ff fef2 	bl	2400574c <RCCEx_PLL2_Config>
24005968:	4606      	mov	r6, r0
    if (ret == HAL_OK)
2400596a:	2e00      	cmp	r6, #0
2400596c:	f040 851e 	bne.w	240063ac <HAL_RCCEx_PeriphCLKConfig+0xa78>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24005970:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
24005972:	e9d4 3200 	ldrd	r3, r2, [r4]
24005976:	e003      	b.n	24005980 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
24005978:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
2400597c:	f040 858e 	bne.w	2400649c <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24005980:	4dae      	ldr	r5, [pc, #696]	; (24005c3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
24005982:	2600      	movs	r6, #0
24005984:	6d28      	ldr	r0, [r5, #80]	; 0x50
24005986:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
2400598a:	4301      	orrs	r1, r0
2400598c:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
2400598e:	05d8      	lsls	r0, r3, #23
24005990:	d50a      	bpl.n	240059a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
24005992:	6da1      	ldr	r1, [r4, #88]	; 0x58
24005994:	2904      	cmp	r1, #4
24005996:	d806      	bhi.n	240059a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
24005998:	e8df f011 	tbh	[pc, r1, lsl #1]
2400599c:	05390532 	.word	0x05390532
240059a0:	03100516 	.word	0x03100516
240059a4:	0310      	.short	0x0310
240059a6:	2601      	movs	r6, #1
240059a8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
240059aa:	0599      	lsls	r1, r3, #22
240059ac:	d51d      	bpl.n	240059ea <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
240059ae:	6de1      	ldr	r1, [r4, #92]	; 0x5c
240059b0:	2980      	cmp	r1, #128	; 0x80
240059b2:	f000 8512 	beq.w	240063da <HAL_RCCEx_PeriphCLKConfig+0xaa6>
240059b6:	f200 80f9 	bhi.w	24005bac <HAL_RCCEx_PeriphCLKConfig+0x278>
240059ba:	2900      	cmp	r1, #0
240059bc:	f000 8420 	beq.w	24006200 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
240059c0:	2940      	cmp	r1, #64	; 0x40
240059c2:	f040 80fa 	bne.w	24005bba <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240059c6:	2100      	movs	r1, #0
240059c8:	f104 0008 	add.w	r0, r4, #8
240059cc:	f7ff febe 	bl	2400574c <RCCEx_PLL2_Config>
240059d0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
240059d2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
240059d6:	2d00      	cmp	r5, #0
240059d8:	f040 83eb 	bne.w	240061b2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
240059dc:	4f97      	ldr	r7, [pc, #604]	; (24005c3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
240059de:	6de0      	ldr	r0, [r4, #92]	; 0x5c
240059e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
240059e2:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
240059e6:	4301      	orrs	r1, r0
240059e8:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
240059ea:	055f      	lsls	r7, r3, #21
240059ec:	d521      	bpl.n	24005a32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
240059ee:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
240059f2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
240059f6:	f000 851d 	beq.w	24006434 <HAL_RCCEx_PeriphCLKConfig+0xb00>
240059fa:	f200 80e1 	bhi.w	24005bc0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
240059fe:	2900      	cmp	r1, #0
24005a00:	f000 8405 	beq.w	2400620e <HAL_RCCEx_PeriphCLKConfig+0x8da>
24005a04:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24005a08:	f040 80e2 	bne.w	24005bd0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24005a0c:	2100      	movs	r1, #0
24005a0e:	f104 0008 	add.w	r0, r4, #8
24005a12:	f7ff fe9b 	bl	2400574c <RCCEx_PLL2_Config>
24005a16:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24005a18:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24005a1c:	2d00      	cmp	r5, #0
24005a1e:	f040 83cf 	bne.w	240061c0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
24005a22:	4f86      	ldr	r7, [pc, #536]	; (24005c3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
24005a24:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
24005a28:	6db9      	ldr	r1, [r7, #88]	; 0x58
24005a2a:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
24005a2e:	4301      	orrs	r1, r0
24005a30:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24005a32:	0518      	lsls	r0, r3, #20
24005a34:	d521      	bpl.n	24005a7a <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
24005a36:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24005a3a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
24005a3e:	f000 84b9 	beq.w	240063b4 <HAL_RCCEx_PeriphCLKConfig+0xa80>
24005a42:	f200 80c8 	bhi.w	24005bd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
24005a46:	2900      	cmp	r1, #0
24005a48:	f000 83d4 	beq.w	240061f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
24005a4c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
24005a50:	f040 80c9 	bne.w	24005be6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24005a54:	2100      	movs	r1, #0
24005a56:	f104 0008 	add.w	r0, r4, #8
24005a5a:	f7ff fe77 	bl	2400574c <RCCEx_PLL2_Config>
24005a5e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24005a60:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24005a64:	2d00      	cmp	r5, #0
24005a66:	f040 83a2 	bne.w	240061ae <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
24005a6a:	4f74      	ldr	r7, [pc, #464]	; (24005c3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
24005a6c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
24005a70:	6db9      	ldr	r1, [r7, #88]	; 0x58
24005a72:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
24005a76:	4301      	orrs	r1, r0
24005a78:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24005a7a:	0199      	lsls	r1, r3, #6
24005a7c:	d518      	bpl.n	24005ab0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
24005a7e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
24005a80:	2920      	cmp	r1, #32
24005a82:	f000 841e 	beq.w	240062c2 <HAL_RCCEx_PeriphCLKConfig+0x98e>
24005a86:	f200 80b1 	bhi.w	24005bec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
24005a8a:	b139      	cbz	r1, 24005a9c <HAL_RCCEx_PeriphCLKConfig+0x168>
24005a8c:	2910      	cmp	r1, #16
24005a8e:	f040 80b0 	bne.w	24005bf2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24005a92:	486a      	ldr	r0, [pc, #424]	; (24005c3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
24005a94:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
24005a96:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
24005a9a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
24005a9c:	2d00      	cmp	r5, #0
24005a9e:	f040 83d3 	bne.w	24006248 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
24005aa2:	4f66      	ldr	r7, [pc, #408]	; (24005c3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
24005aa4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
24005aa6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
24005aa8:	f021 0130 	bic.w	r1, r1, #48	; 0x30
24005aac:	4301      	orrs	r1, r0
24005aae:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
24005ab0:	04df      	lsls	r7, r3, #19
24005ab2:	d51f      	bpl.n	24005af4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
24005ab4:	6e21      	ldr	r1, [r4, #96]	; 0x60
24005ab6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
24005aba:	f000 84b1 	beq.w	24006420 <HAL_RCCEx_PeriphCLKConfig+0xaec>
24005abe:	f200 809b 	bhi.w	24005bf8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
24005ac2:	2900      	cmp	r1, #0
24005ac4:	f000 8390 	beq.w	240061e8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
24005ac8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
24005acc:	f040 809c 	bne.w	24005c08 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24005ad0:	2100      	movs	r1, #0
24005ad2:	f104 0008 	add.w	r0, r4, #8
24005ad6:	f7ff fe39 	bl	2400574c <RCCEx_PLL2_Config>
24005ada:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24005adc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24005ae0:	2d00      	cmp	r5, #0
24005ae2:	f040 8368 	bne.w	240061b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24005ae6:	4f55      	ldr	r7, [pc, #340]	; (24005c3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
24005ae8:	6e20      	ldr	r0, [r4, #96]	; 0x60
24005aea:	6d39      	ldr	r1, [r7, #80]	; 0x50
24005aec:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
24005af0:	4301      	orrs	r1, r0
24005af2:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24005af4:	0498      	lsls	r0, r3, #18
24005af6:	d51d      	bpl.n	24005b34 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
24005af8:	6e61      	ldr	r1, [r4, #100]	; 0x64
24005afa:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
24005afe:	f000 840f 	beq.w	24006320 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
24005b02:	f200 8084 	bhi.w	24005c0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
24005b06:	b159      	cbz	r1, 24005b20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
24005b08:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24005b0c:	f040 8087 	bne.w	24005c1e <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24005b10:	2101      	movs	r1, #1
24005b12:	f104 0008 	add.w	r0, r4, #8
24005b16:	f7ff fe19 	bl	2400574c <RCCEx_PLL2_Config>
24005b1a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24005b1c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24005b20:	2d00      	cmp	r5, #0
24005b22:	f040 839b 	bne.w	2400625c <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
24005b26:	4f45      	ldr	r7, [pc, #276]	; (24005c3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
24005b28:	6e60      	ldr	r0, [r4, #100]	; 0x64
24005b2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
24005b2c:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
24005b30:	4301      	orrs	r1, r0
24005b32:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24005b34:	0459      	lsls	r1, r3, #17
24005b36:	d51d      	bpl.n	24005b74 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
24005b38:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
24005b3c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24005b40:	f000 83fa 	beq.w	24006338 <HAL_RCCEx_PeriphCLKConfig+0xa04>
24005b44:	d86e      	bhi.n	24005c24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
24005b46:	b151      	cbz	r1, 24005b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
24005b48:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24005b4c:	d172      	bne.n	24005c34 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24005b4e:	2101      	movs	r1, #1
24005b50:	f104 0008 	add.w	r0, r4, #8
24005b54:	f7ff fdfa 	bl	2400574c <RCCEx_PLL2_Config>
24005b58:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24005b5a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24005b5e:	2d00      	cmp	r5, #0
24005b60:	f040 8380 	bne.w	24006264 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
24005b64:	4f35      	ldr	r7, [pc, #212]	; (24005c3c <HAL_RCCEx_PeriphCLKConfig+0x308>)
24005b66:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
24005b6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
24005b6c:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
24005b70:	4301      	orrs	r1, r0
24005b72:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24005b74:	041f      	lsls	r7, r3, #16
24005b76:	d50d      	bpl.n	24005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
24005b78:	6f21      	ldr	r1, [r4, #112]	; 0x70
24005b7a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24005b7e:	f000 83c7 	beq.w	24006310 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
24005b82:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24005b86:	f000 8225 	beq.w	24005fd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
24005b8a:	2900      	cmp	r1, #0
24005b8c:	f000 822a 	beq.w	24005fe4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
24005b90:	2601      	movs	r6, #1
24005b92:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24005b94:	01d8      	lsls	r0, r3, #7
24005b96:	d55f      	bpl.n	24005c58 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->FmcClockSelection)
24005b98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24005b9a:	2903      	cmp	r1, #3
24005b9c:	f200 84bb 	bhi.w	24006516 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
24005ba0:	e8df f011 	tbh	[pc, r1, lsl #1]
24005ba4:	03e10056 	.word	0x03e10056
24005ba8:	0056004e 	.word	0x0056004e
    switch (PeriphClkInit->Sai23ClockSelection)
24005bac:	29c0      	cmp	r1, #192	; 0xc0
24005bae:	f43f af12 	beq.w	240059d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
24005bb2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
24005bb6:	f43f af0e 	beq.w	240059d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
24005bba:	2601      	movs	r6, #1
24005bbc:	4635      	mov	r5, r6
24005bbe:	e714      	b.n	240059ea <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
24005bc0:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
24005bc4:	f43f af2a 	beq.w	24005a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
24005bc8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
24005bcc:	f43f af26 	beq.w	24005a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
24005bd0:	2601      	movs	r6, #1
24005bd2:	4635      	mov	r5, r6
24005bd4:	e72d      	b.n	24005a32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
24005bd6:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
24005bda:	f43f af43 	beq.w	24005a64 <HAL_RCCEx_PeriphCLKConfig+0x130>
24005bde:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
24005be2:	f43f af3f 	beq.w	24005a64 <HAL_RCCEx_PeriphCLKConfig+0x130>
24005be6:	2601      	movs	r6, #1
24005be8:	4635      	mov	r5, r6
24005bea:	e746      	b.n	24005a7a <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
24005bec:	2930      	cmp	r1, #48	; 0x30
24005bee:	f43f af55 	beq.w	24005a9c <HAL_RCCEx_PeriphCLKConfig+0x168>
24005bf2:	2601      	movs	r6, #1
24005bf4:	4635      	mov	r5, r6
24005bf6:	e75b      	b.n	24005ab0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
24005bf8:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
24005bfc:	f43f af70 	beq.w	24005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
24005c00:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
24005c04:	f43f af6c 	beq.w	24005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
24005c08:	2601      	movs	r6, #1
24005c0a:	4635      	mov	r5, r6
24005c0c:	e772      	b.n	24005af4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
24005c0e:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
24005c12:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
24005c16:	d083      	beq.n	24005b20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
24005c18:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
24005c1c:	d080      	beq.n	24005b20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
24005c1e:	2601      	movs	r6, #1
24005c20:	4635      	mov	r5, r6
24005c22:	e787      	b.n	24005b34 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
24005c24:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
24005c28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24005c2c:	d097      	beq.n	24005b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
24005c2e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
24005c32:	d094      	beq.n	24005b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
24005c34:	2601      	movs	r6, #1
24005c36:	4635      	mov	r5, r6
24005c38:	e79c      	b.n	24005b74 <HAL_RCCEx_PeriphCLKConfig+0x240>
24005c3a:	bf00      	nop
24005c3c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24005c40:	2102      	movs	r1, #2
24005c42:	f104 0008 	add.w	r0, r4, #8
24005c46:	f7ff fd81 	bl	2400574c <RCCEx_PLL2_Config>
24005c4a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24005c4c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24005c50:	2d00      	cmp	r5, #0
24005c52:	f000 82fb 	beq.w	2400624c <HAL_RCCEx_PeriphCLKConfig+0x918>
24005c56:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24005c58:	0259      	lsls	r1, r3, #9
24005c5a:	f100 825a 	bmi.w	24006112 <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24005c5e:	07d8      	lsls	r0, r3, #31
24005c60:	d52f      	bpl.n	24005cc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart16ClockSelection)
24005c62:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
24005c64:	2928      	cmp	r1, #40	; 0x28
24005c66:	d82a      	bhi.n	24005cbe <HAL_RCCEx_PeriphCLKConfig+0x38a>
24005c68:	e8df f011 	tbh	[pc, r1, lsl #1]
24005c6c:	002901fa 	.word	0x002901fa
24005c70:	00290029 	.word	0x00290029
24005c74:	00290029 	.word	0x00290029
24005c78:	00290029 	.word	0x00290029
24005c7c:	00290406 	.word	0x00290406
24005c80:	00290029 	.word	0x00290029
24005c84:	00290029 	.word	0x00290029
24005c88:	00290029 	.word	0x00290029
24005c8c:	002901f2 	.word	0x002901f2
24005c90:	00290029 	.word	0x00290029
24005c94:	00290029 	.word	0x00290029
24005c98:	00290029 	.word	0x00290029
24005c9c:	002901fa 	.word	0x002901fa
24005ca0:	00290029 	.word	0x00290029
24005ca4:	00290029 	.word	0x00290029
24005ca8:	00290029 	.word	0x00290029
24005cac:	002901fa 	.word	0x002901fa
24005cb0:	00290029 	.word	0x00290029
24005cb4:	00290029 	.word	0x00290029
24005cb8:	00290029 	.word	0x00290029
24005cbc:	01fa      	.short	0x01fa
24005cbe:	2601      	movs	r6, #1
24005cc0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24005cc2:	0799      	lsls	r1, r3, #30
24005cc4:	d517      	bpl.n	24005cf6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->Usart234578ClockSelection)
24005cc6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
24005cc8:	2905      	cmp	r1, #5
24005cca:	f200 8420 	bhi.w	2400650e <HAL_RCCEx_PeriphCLKConfig+0xbda>
24005cce:	e8df f011 	tbh	[pc, r1, lsl #1]
24005cd2:	000e      	.short	0x000e
24005cd4:	000603bb 	.word	0x000603bb
24005cd8:	000e000e 	.word	0x000e000e
24005cdc:	000e      	.short	0x000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24005cde:	2101      	movs	r1, #1
24005ce0:	f104 0028 	add.w	r0, r4, #40	; 0x28
24005ce4:	f7ff fdac 	bl	24005840 <RCCEx_PLL3_Config>
24005ce8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24005cea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24005cee:	2d00      	cmp	r5, #0
24005cf0:	f000 8299 	beq.w	24006226 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
24005cf4:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24005cf6:	075f      	lsls	r7, r3, #29
24005cf8:	d518      	bpl.n	24005d2c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24005cfa:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
24005cfe:	2905      	cmp	r1, #5
24005d00:	f200 840d 	bhi.w	2400651e <HAL_RCCEx_PeriphCLKConfig+0xbea>
24005d04:	e8df f011 	tbh	[pc, r1, lsl #1]
24005d08:	03ac000e 	.word	0x03ac000e
24005d0c:	000e0006 	.word	0x000e0006
24005d10:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24005d14:	2101      	movs	r1, #1
24005d16:	f104 0028 	add.w	r0, r4, #40	; 0x28
24005d1a:	f7ff fd91 	bl	24005840 <RCCEx_PLL3_Config>
24005d1e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24005d20:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24005d24:	2d00      	cmp	r5, #0
24005d26:	f000 8286 	beq.w	24006236 <HAL_RCCEx_PeriphCLKConfig+0x902>
24005d2a:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24005d2c:	0698      	lsls	r0, r3, #26
24005d2e:	d51f      	bpl.n	24005d70 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim1ClockSelection)
24005d30:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
24005d34:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24005d38:	f000 8309 	beq.w	2400634e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
24005d3c:	f200 810b 	bhi.w	24005f56 <HAL_RCCEx_PeriphCLKConfig+0x622>
24005d40:	b159      	cbz	r1, 24005d5a <HAL_RCCEx_PeriphCLKConfig+0x426>
24005d42:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24005d46:	f040 8110 	bne.w	24005f6a <HAL_RCCEx_PeriphCLKConfig+0x636>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24005d4a:	2100      	movs	r1, #0
24005d4c:	f104 0008 	add.w	r0, r4, #8
24005d50:	f7ff fcfc 	bl	2400574c <RCCEx_PLL2_Config>
24005d54:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24005d56:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24005d5a:	2d00      	cmp	r5, #0
24005d5c:	f040 825f 	bne.w	2400621e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
24005d60:	4fa6      	ldr	r7, [pc, #664]	; (24005ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24005d62:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
24005d66:	6d79      	ldr	r1, [r7, #84]	; 0x54
24005d68:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
24005d6c:	4301      	orrs	r1, r0
24005d6e:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24005d70:	0659      	lsls	r1, r3, #25
24005d72:	d51f      	bpl.n	24005db4 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim2ClockSelection)
24005d74:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
24005d78:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
24005d7c:	f000 82b2 	beq.w	240062e4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
24005d80:	f200 80f6 	bhi.w	24005f70 <HAL_RCCEx_PeriphCLKConfig+0x63c>
24005d84:	b159      	cbz	r1, 24005d9e <HAL_RCCEx_PeriphCLKConfig+0x46a>
24005d86:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
24005d8a:	f040 80fb 	bne.w	24005f84 <HAL_RCCEx_PeriphCLKConfig+0x650>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24005d8e:	2100      	movs	r1, #0
24005d90:	f104 0008 	add.w	r0, r4, #8
24005d94:	f7ff fcda 	bl	2400574c <RCCEx_PLL2_Config>
24005d98:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24005d9a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24005d9e:	2d00      	cmp	r5, #0
24005da0:	f040 8262 	bne.w	24006268 <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24005da4:	4f95      	ldr	r7, [pc, #596]	; (24005ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24005da6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
24005daa:	6db9      	ldr	r1, [r7, #88]	; 0x58
24005dac:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
24005db0:	4301      	orrs	r1, r0
24005db2:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24005db4:	061f      	lsls	r7, r3, #24
24005db6:	d51f      	bpl.n	24005df8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->Lptim345ClockSelection)
24005db8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
24005dbc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
24005dc0:	f000 829b 	beq.w	240062fa <HAL_RCCEx_PeriphCLKConfig+0x9c6>
24005dc4:	f200 80e1 	bhi.w	24005f8a <HAL_RCCEx_PeriphCLKConfig+0x656>
24005dc8:	b159      	cbz	r1, 24005de2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
24005dca:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
24005dce:	f040 80e6 	bne.w	24005f9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24005dd2:	2100      	movs	r1, #0
24005dd4:	f104 0008 	add.w	r0, r4, #8
24005dd8:	f7ff fcb8 	bl	2400574c <RCCEx_PLL2_Config>
24005ddc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24005dde:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24005de2:	2d00      	cmp	r5, #0
24005de4:	f040 823c 	bne.w	24006260 <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
24005de8:	4f84      	ldr	r7, [pc, #528]	; (24005ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24005dea:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
24005dee:	6db9      	ldr	r1, [r7, #88]	; 0x58
24005df0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
24005df4:	4301      	orrs	r1, r0
24005df6:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24005df8:	0718      	lsls	r0, r3, #28
24005dfa:	d50b      	bpl.n	24005e14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
24005dfc:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
24005e00:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
24005e04:	f000 82b8 	beq.w	24006378 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24005e08:	4f7c      	ldr	r7, [pc, #496]	; (24005ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24005e0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
24005e0c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
24005e10:	4301      	orrs	r1, r0
24005e12:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24005e14:	06d9      	lsls	r1, r3, #27
24005e16:	d50b      	bpl.n	24005e30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
24005e18:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
24005e1c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
24005e20:	f000 82b7 	beq.w	24006392 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24005e24:	4f75      	ldr	r7, [pc, #468]	; (24005ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24005e26:	6db9      	ldr	r1, [r7, #88]	; 0x58
24005e28:	f421 7140 	bic.w	r1, r1, #768	; 0x300
24005e2c:	4301      	orrs	r1, r0
24005e2e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
24005e30:	031f      	lsls	r7, r3, #12
24005e32:	d50e      	bpl.n	24005e52 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    switch (PeriphClkInit->AdcClockSelection)
24005e34:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
24005e38:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24005e3c:	f000 80f4 	beq.w	24006028 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
24005e40:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
24005e44:	f000 80f8 	beq.w	24006038 <HAL_RCCEx_PeriphCLKConfig+0x704>
24005e48:	2900      	cmp	r1, #0
24005e4a:	f000 822e 	beq.w	240062aa <HAL_RCCEx_PeriphCLKConfig+0x976>
24005e4e:	2601      	movs	r6, #1
24005e50:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24005e52:	0358      	lsls	r0, r3, #13
24005e54:	d50f      	bpl.n	24005e76 <HAL_RCCEx_PeriphCLKConfig+0x542>
    switch (PeriphClkInit->UsbClockSelection)
24005e56:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
24005e5a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24005e5e:	f000 80cf 	beq.w	24006000 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
24005e62:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
24005e66:	f000 80d3 	beq.w	24006010 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
24005e6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24005e6e:	f000 8214 	beq.w	2400629a <HAL_RCCEx_PeriphCLKConfig+0x966>
24005e72:	2601      	movs	r6, #1
24005e74:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24005e76:	03d9      	lsls	r1, r3, #15
24005e78:	d509      	bpl.n	24005e8e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->SdmmcClockSelection)
24005e7a:	6d21      	ldr	r1, [r4, #80]	; 0x50
24005e7c:	2900      	cmp	r1, #0
24005e7e:	f000 8203 	beq.w	24006288 <HAL_RCCEx_PeriphCLKConfig+0x954>
24005e82:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24005e86:	f000 819d 	beq.w	240061c4 <HAL_RCCEx_PeriphCLKConfig+0x890>
24005e8a:	2601      	movs	r6, #1
24005e8c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24005e8e:	009f      	lsls	r7, r3, #2
24005e90:	f100 80f1 	bmi.w	24006076 <HAL_RCCEx_PeriphCLKConfig+0x742>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24005e94:	0398      	lsls	r0, r3, #14
24005e96:	d50c      	bpl.n	24005eb2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->RngClockSelection)
24005e98:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
24005e9c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
24005ea0:	f000 81ea 	beq.w	24006278 <HAL_RCCEx_PeriphCLKConfig+0x944>
24005ea4:	d97e      	bls.n	24005fa4 <HAL_RCCEx_PeriphCLKConfig+0x670>
24005ea6:	f421 7080 	bic.w	r0, r1, #256	; 0x100
24005eaa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
24005eae:	d07b      	beq.n	24005fa8 <HAL_RCCEx_PeriphCLKConfig+0x674>
24005eb0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24005eb2:	02d9      	lsls	r1, r3, #11
24005eb4:	d506      	bpl.n	24005ec4 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
24005eb6:	4851      	ldr	r0, [pc, #324]	; (24005ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24005eb8:	6f65      	ldr	r5, [r4, #116]	; 0x74
24005eba:	6d01      	ldr	r1, [r0, #80]	; 0x50
24005ebc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
24005ec0:	4329      	orrs	r1, r5
24005ec2:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
24005ec4:	00df      	lsls	r7, r3, #3
24005ec6:	d507      	bpl.n	24005ed8 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
24005ec8:	484c      	ldr	r0, [pc, #304]	; (24005ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24005eca:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
24005ece:	6901      	ldr	r1, [r0, #16]
24005ed0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
24005ed4:	4329      	orrs	r1, r5
24005ed6:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
24005ed8:	029d      	lsls	r5, r3, #10
24005eda:	d506      	bpl.n	24005eea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
24005edc:	4847      	ldr	r0, [pc, #284]	; (24005ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24005ede:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
24005ee0:	6d01      	ldr	r1, [r0, #80]	; 0x50
24005ee2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
24005ee6:	4329      	orrs	r1, r5
24005ee8:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
24005eea:	0058      	lsls	r0, r3, #1
24005eec:	d509      	bpl.n	24005f02 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
24005eee:	4943      	ldr	r1, [pc, #268]	; (24005ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24005ef0:	6908      	ldr	r0, [r1, #16]
24005ef2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
24005ef6:	6108      	str	r0, [r1, #16]
24005ef8:	6908      	ldr	r0, [r1, #16]
24005efa:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
24005efe:	4328      	orrs	r0, r5
24005f00:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
24005f02:	2b00      	cmp	r3, #0
24005f04:	da06      	bge.n	24005f14 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
24005f06:	483d      	ldr	r0, [pc, #244]	; (24005ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24005f08:	6d65      	ldr	r5, [r4, #84]	; 0x54
24005f0a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
24005f0c:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
24005f10:	4329      	orrs	r1, r5
24005f12:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
24005f14:	0219      	lsls	r1, r3, #8
24005f16:	d507      	bpl.n	24005f28 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
24005f18:	4938      	ldr	r1, [pc, #224]	; (24005ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24005f1a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
24005f1e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
24005f20:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
24005f24:	4303      	orrs	r3, r0
24005f26:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
24005f28:	07d3      	lsls	r3, r2, #31
24005f2a:	f100 80b0 	bmi.w	2400608e <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24005f2e:	0797      	lsls	r7, r2, #30
24005f30:	f100 80ba 	bmi.w	240060a8 <HAL_RCCEx_PeriphCLKConfig+0x774>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24005f34:	0755      	lsls	r5, r2, #29
24005f36:	f100 80c4 	bmi.w	240060c2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24005f3a:	0710      	lsls	r0, r2, #28
24005f3c:	f100 80ce 	bmi.w	240060dc <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24005f40:	06d1      	lsls	r1, r2, #27
24005f42:	f100 80d8 	bmi.w	240060f6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24005f46:	0692      	lsls	r2, r2, #26
24005f48:	f100 8125 	bmi.w	24006196 <HAL_RCCEx_PeriphCLKConfig+0x862>
    return HAL_OK;
24005f4c:	1e30      	subs	r0, r6, #0
24005f4e:	bf18      	it	ne
24005f50:	2001      	movne	r0, #1
}
24005f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
24005f56:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
24005f5a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24005f5e:	f43f aefc 	beq.w	24005d5a <HAL_RCCEx_PeriphCLKConfig+0x426>
24005f62:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
24005f66:	f43f aef8 	beq.w	24005d5a <HAL_RCCEx_PeriphCLKConfig+0x426>
24005f6a:	2601      	movs	r6, #1
24005f6c:	4635      	mov	r5, r6
24005f6e:	e6ff      	b.n	24005d70 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim2ClockSelection)
24005f70:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
24005f74:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
24005f78:	f43f af11 	beq.w	24005d9e <HAL_RCCEx_PeriphCLKConfig+0x46a>
24005f7c:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
24005f80:	f43f af0d 	beq.w	24005d9e <HAL_RCCEx_PeriphCLKConfig+0x46a>
24005f84:	2601      	movs	r6, #1
24005f86:	4635      	mov	r5, r6
24005f88:	e714      	b.n	24005db4 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim345ClockSelection)
24005f8a:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
24005f8e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
24005f92:	f43f af26 	beq.w	24005de2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
24005f96:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
24005f9a:	f43f af22 	beq.w	24005de2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
24005f9e:	2601      	movs	r6, #1
24005fa0:	4635      	mov	r5, r6
24005fa2:	e729      	b.n	24005df8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->RngClockSelection)
24005fa4:	2900      	cmp	r1, #0
24005fa6:	d183      	bne.n	24005eb0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    if (ret == HAL_OK)
24005fa8:	2d00      	cmp	r5, #0
24005faa:	f040 8163 	bne.w	24006274 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24005fae:	4d13      	ldr	r5, [pc, #76]	; (24005ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24005fb0:	6d68      	ldr	r0, [r5, #84]	; 0x54
24005fb2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
24005fb6:	4301      	orrs	r1, r0
24005fb8:	6569      	str	r1, [r5, #84]	; 0x54
24005fba:	e77a      	b.n	24005eb2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Sai1ClockSelection)
24005fbc:	4635      	mov	r5, r6
    if (ret == HAL_OK)
24005fbe:	2d00      	cmp	r5, #0
24005fc0:	f040 80fb 	bne.w	240061ba <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
24005fc4:	4f0d      	ldr	r7, [pc, #52]	; (24005ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24005fc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
24005fc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
24005fca:	f021 0107 	bic.w	r1, r1, #7
24005fce:	4301      	orrs	r1, r0
24005fd0:	6539      	str	r1, [r7, #80]	; 0x50
24005fd2:	e4ea      	b.n	240059aa <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24005fd4:	2101      	movs	r1, #1
24005fd6:	f104 0008 	add.w	r0, r4, #8
24005fda:	f7ff fbb7 	bl	2400574c <RCCEx_PLL2_Config>
24005fde:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24005fe0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24005fe4:	2d00      	cmp	r5, #0
24005fe6:	f040 811c 	bne.w	24006222 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
24005fea:	4f04      	ldr	r7, [pc, #16]	; (24005ffc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
24005fec:	6f20      	ldr	r0, [r4, #112]	; 0x70
24005fee:	6d39      	ldr	r1, [r7, #80]	; 0x50
24005ff0:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
24005ff4:	4301      	orrs	r1, r0
24005ff6:	6539      	str	r1, [r7, #80]	; 0x50
24005ff8:	e5cc      	b.n	24005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>
24005ffa:	bf00      	nop
24005ffc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24006000:	2101      	movs	r1, #1
24006002:	f104 0028 	add.w	r0, r4, #40	; 0x28
24006006:	f7ff fc1b 	bl	24005840 <RCCEx_PLL3_Config>
2400600a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2400600c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24006010:	2d00      	cmp	r5, #0
24006012:	f040 812d 	bne.w	24006270 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
24006016:	4fb1      	ldr	r7, [pc, #708]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24006018:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
2400601c:	6d79      	ldr	r1, [r7, #84]	; 0x54
2400601e:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
24006022:	4301      	orrs	r1, r0
24006024:	6579      	str	r1, [r7, #84]	; 0x54
24006026:	e726      	b.n	24005e76 <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24006028:	2102      	movs	r1, #2
2400602a:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400602e:	f7ff fc07 	bl	24005840 <RCCEx_PLL3_Config>
24006032:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24006034:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24006038:	2d00      	cmp	r5, #0
2400603a:	f040 8117 	bne.w	2400626c <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
2400603e:	4fa7      	ldr	r7, [pc, #668]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24006040:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
24006044:	6db9      	ldr	r1, [r7, #88]	; 0x58
24006046:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
2400604a:	4301      	orrs	r1, r0
2400604c:	65b9      	str	r1, [r7, #88]	; 0x58
2400604e:	e700      	b.n	24005e52 <HAL_RCCEx_PeriphCLKConfig+0x51e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24006050:	2101      	movs	r1, #1
24006052:	f104 0028 	add.w	r0, r4, #40	; 0x28
24006056:	f7ff fbf3 	bl	24005840 <RCCEx_PLL3_Config>
2400605a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
2400605c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24006060:	2d00      	cmp	r5, #0
24006062:	f040 80da 	bne.w	2400621a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24006066:	4f9d      	ldr	r7, [pc, #628]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24006068:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400606a:	6d79      	ldr	r1, [r7, #84]	; 0x54
2400606c:	f021 0138 	bic.w	r1, r1, #56	; 0x38
24006070:	4301      	orrs	r1, r0
24006072:	6579      	str	r1, [r7, #84]	; 0x54
24006074:	e625      	b.n	24005cc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24006076:	2102      	movs	r1, #2
24006078:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400607c:	f7ff fbe0 	bl	24005840 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24006080:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24006084:	2800      	cmp	r0, #0
24006086:	f43f af05 	beq.w	24005e94 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = HAL_ERROR;
2400608a:	2601      	movs	r6, #1
2400608c:	e702      	b.n	24005e94 <HAL_RCCEx_PeriphCLKConfig+0x560>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400608e:	2100      	movs	r1, #0
24006090:	f104 0008 	add.w	r0, r4, #8
24006094:	f7ff fb5a 	bl	2400574c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24006098:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
2400609a:	2800      	cmp	r0, #0
2400609c:	f43f af47 	beq.w	24005f2e <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
240060a0:	0797      	lsls	r7, r2, #30
240060a2:	4606      	mov	r6, r0
240060a4:	f57f af46 	bpl.w	24005f34 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240060a8:	2101      	movs	r1, #1
240060aa:	f104 0008 	add.w	r0, r4, #8
240060ae:	f7ff fb4d 	bl	2400574c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
240060b2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
240060b4:	2800      	cmp	r0, #0
240060b6:	f43f af3d 	beq.w	24005f34 <HAL_RCCEx_PeriphCLKConfig+0x600>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
240060ba:	0755      	lsls	r5, r2, #29
240060bc:	4606      	mov	r6, r0
240060be:	f57f af3c 	bpl.w	24005f3a <HAL_RCCEx_PeriphCLKConfig+0x606>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240060c2:	2102      	movs	r1, #2
240060c4:	f104 0008 	add.w	r0, r4, #8
240060c8:	f7ff fb40 	bl	2400574c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
240060cc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
240060ce:	2800      	cmp	r0, #0
240060d0:	f43f af33 	beq.w	24005f3a <HAL_RCCEx_PeriphCLKConfig+0x606>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
240060d4:	4606      	mov	r6, r0
240060d6:	0710      	lsls	r0, r2, #28
240060d8:	f57f af32 	bpl.w	24005f40 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240060dc:	2100      	movs	r1, #0
240060de:	f104 0028 	add.w	r0, r4, #40	; 0x28
240060e2:	f7ff fbad 	bl	24005840 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
240060e6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
240060e8:	2800      	cmp	r0, #0
240060ea:	f43f af29 	beq.w	24005f40 <HAL_RCCEx_PeriphCLKConfig+0x60c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
240060ee:	06d1      	lsls	r1, r2, #27
240060f0:	4606      	mov	r6, r0
240060f2:	f57f af28 	bpl.w	24005f46 <HAL_RCCEx_PeriphCLKConfig+0x612>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
240060f6:	f104 0528 	add.w	r5, r4, #40	; 0x28
240060fa:	2101      	movs	r1, #1
240060fc:	4628      	mov	r0, r5
240060fe:	f7ff fb9f 	bl	24005840 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24006102:	2800      	cmp	r0, #0
24006104:	f000 80db 	beq.w	240062be <HAL_RCCEx_PeriphCLKConfig+0x98a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24006108:	6863      	ldr	r3, [r4, #4]
2400610a:	069b      	lsls	r3, r3, #26
2400610c:	d54c      	bpl.n	240061a8 <HAL_RCCEx_PeriphCLKConfig+0x874>
2400610e:	4606      	mov	r6, r0
24006110:	e043      	b.n	2400619a <HAL_RCCEx_PeriphCLKConfig+0x866>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
24006112:	4f73      	ldr	r7, [pc, #460]	; (240062e0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
24006114:	683b      	ldr	r3, [r7, #0]
24006116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400611a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
2400611c:	f7fc fbe2 	bl	240028e4 <HAL_GetTick>
24006120:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24006122:	e006      	b.n	24006132 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24006124:	f7fc fbde 	bl	240028e4 <HAL_GetTick>
24006128:	eba0 0008 	sub.w	r0, r0, r8
2400612c:	2864      	cmp	r0, #100	; 0x64
2400612e:	f200 81af 	bhi.w	24006490 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24006132:	683b      	ldr	r3, [r7, #0]
24006134:	05da      	lsls	r2, r3, #23
24006136:	d5f5      	bpl.n	24006124 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
    if (ret == HAL_OK)
24006138:	2d00      	cmp	r5, #0
2400613a:	f040 81e3 	bne.w	24006504 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
2400613e:	4a67      	ldr	r2, [pc, #412]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24006140:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
24006144:	6f11      	ldr	r1, [r2, #112]	; 0x70
24006146:	4059      	eors	r1, r3
24006148:	f411 7f40 	tst.w	r1, #768	; 0x300
2400614c:	d00b      	beq.n	24006166 <HAL_RCCEx_PeriphCLKConfig+0x832>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2400614e:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
24006150:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24006152:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
24006156:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
2400615a:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
2400615c:	6f10      	ldr	r0, [r2, #112]	; 0x70
2400615e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
24006162:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
24006164:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
24006166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400616a:	f000 81ad 	beq.w	240064c8 <HAL_RCCEx_PeriphCLKConfig+0xb94>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2400616e:	f403 7240 	and.w	r2, r3, #768	; 0x300
24006172:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
24006176:	f000 81bb 	beq.w	240064f0 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
2400617a:	4958      	ldr	r1, [pc, #352]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
2400617c:	690a      	ldr	r2, [r1, #16]
2400617e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
24006182:	610a      	str	r2, [r1, #16]
24006184:	4855      	ldr	r0, [pc, #340]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24006186:	f3c3 010b 	ubfx	r1, r3, #0, #12
2400618a:	6f07      	ldr	r7, [r0, #112]	; 0x70
2400618c:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
2400618e:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24006192:	6701      	str	r1, [r0, #112]	; 0x70
24006194:	e563      	b.n	24005c5e <HAL_RCCEx_PeriphCLKConfig+0x32a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24006196:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400619a:	2102      	movs	r1, #2
2400619c:	4628      	mov	r0, r5
2400619e:	f7ff fb4f 	bl	24005840 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
240061a2:	2800      	cmp	r0, #0
240061a4:	f43f aed2 	beq.w	24005f4c <HAL_RCCEx_PeriphCLKConfig+0x618>
  return HAL_ERROR;
240061a8:	2001      	movs	r0, #1
}
240061aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
240061ae:	462e      	mov	r6, r5
240061b0:	e463      	b.n	24005a7a <HAL_RCCEx_PeriphCLKConfig+0x146>
240061b2:	462e      	mov	r6, r5
240061b4:	e419      	b.n	240059ea <HAL_RCCEx_PeriphCLKConfig+0xb6>
240061b6:	462e      	mov	r6, r5
240061b8:	e49c      	b.n	24005af4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
240061ba:	462e      	mov	r6, r5
240061bc:	f7ff bbf5 	b.w	240059aa <HAL_RCCEx_PeriphCLKConfig+0x76>
240061c0:	462e      	mov	r6, r5
240061c2:	e436      	b.n	24005a32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240061c4:	2102      	movs	r1, #2
240061c6:	f104 0008 	add.w	r0, r4, #8
240061ca:	f7ff fabf 	bl	2400574c <RCCEx_PLL2_Config>
240061ce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
240061d0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
240061d4:	2d00      	cmp	r5, #0
240061d6:	d15e      	bne.n	24006296 <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
240061d8:	4f40      	ldr	r7, [pc, #256]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
240061da:	6d20      	ldr	r0, [r4, #80]	; 0x50
240061dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
240061de:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
240061e2:	4301      	orrs	r1, r0
240061e4:	64f9      	str	r1, [r7, #76]	; 0x4c
240061e6:	e652      	b.n	24005e8e <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240061e8:	483c      	ldr	r0, [pc, #240]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
240061ea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
240061ec:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
240061f0:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
240061f2:	e475      	b.n	24005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240061f4:	4839      	ldr	r0, [pc, #228]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
240061f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
240061f8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
240061fc:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
240061fe:	e431      	b.n	24005a64 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24006200:	4836      	ldr	r0, [pc, #216]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24006202:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
24006204:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
24006208:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
2400620a:	f7ff bbe4 	b.w	240059d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400620e:	4833      	ldr	r0, [pc, #204]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24006210:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
24006212:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
24006216:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
24006218:	e400      	b.n	24005a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
2400621a:	462e      	mov	r6, r5
2400621c:	e551      	b.n	24005cc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
2400621e:	462e      	mov	r6, r5
24006220:	e5a6      	b.n	24005d70 <HAL_RCCEx_PeriphCLKConfig+0x43c>
24006222:	462e      	mov	r6, r5
24006224:	e4b6      	b.n	24005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
24006226:	4f2d      	ldr	r7, [pc, #180]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24006228:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400622a:	6d79      	ldr	r1, [r7, #84]	; 0x54
2400622c:	f021 0107 	bic.w	r1, r1, #7
24006230:	4301      	orrs	r1, r0
24006232:	6579      	str	r1, [r7, #84]	; 0x54
24006234:	e55f      	b.n	24005cf6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
24006236:	4f29      	ldr	r7, [pc, #164]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
24006238:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
2400623c:	6db9      	ldr	r1, [r7, #88]	; 0x58
2400623e:	f021 0107 	bic.w	r1, r1, #7
24006242:	4301      	orrs	r1, r0
24006244:	65b9      	str	r1, [r7, #88]	; 0x58
24006246:	e571      	b.n	24005d2c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
24006248:	462e      	mov	r6, r5
2400624a:	e431      	b.n	24005ab0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
2400624c:	4f23      	ldr	r7, [pc, #140]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
2400624e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
24006250:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
24006252:	f021 0103 	bic.w	r1, r1, #3
24006256:	4301      	orrs	r1, r0
24006258:	64f9      	str	r1, [r7, #76]	; 0x4c
2400625a:	e4fd      	b.n	24005c58 <HAL_RCCEx_PeriphCLKConfig+0x324>
2400625c:	462e      	mov	r6, r5
2400625e:	e469      	b.n	24005b34 <HAL_RCCEx_PeriphCLKConfig+0x200>
24006260:	462e      	mov	r6, r5
24006262:	e5c9      	b.n	24005df8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
24006264:	462e      	mov	r6, r5
24006266:	e485      	b.n	24005b74 <HAL_RCCEx_PeriphCLKConfig+0x240>
24006268:	462e      	mov	r6, r5
2400626a:	e5a3      	b.n	24005db4 <HAL_RCCEx_PeriphCLKConfig+0x480>
2400626c:	462e      	mov	r6, r5
2400626e:	e5f0      	b.n	24005e52 <HAL_RCCEx_PeriphCLKConfig+0x51e>
24006270:	462e      	mov	r6, r5
24006272:	e600      	b.n	24005e76 <HAL_RCCEx_PeriphCLKConfig+0x542>
24006274:	462e      	mov	r6, r5
24006276:	e61c      	b.n	24005eb2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24006278:	4f18      	ldr	r7, [pc, #96]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
2400627a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
2400627c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
24006280:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
24006282:	2d00      	cmp	r5, #0
24006284:	d1f6      	bne.n	24006274 <HAL_RCCEx_PeriphCLKConfig+0x940>
24006286:	e692      	b.n	24005fae <HAL_RCCEx_PeriphCLKConfig+0x67a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24006288:	4814      	ldr	r0, [pc, #80]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
2400628a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
2400628c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
24006290:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
24006292:	2d00      	cmp	r5, #0
24006294:	d0a0      	beq.n	240061d8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
24006296:	462e      	mov	r6, r5
24006298:	e5f9      	b.n	24005e8e <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400629a:	4810      	ldr	r0, [pc, #64]	; (240062dc <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
2400629c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
2400629e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
240062a2:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
240062a4:	2d00      	cmp	r5, #0
240062a6:	d1e3      	bne.n	24006270 <HAL_RCCEx_PeriphCLKConfig+0x93c>
240062a8:	e6b5      	b.n	24006016 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240062aa:	f104 0008 	add.w	r0, r4, #8
240062ae:	f7ff fa4d 	bl	2400574c <RCCEx_PLL2_Config>
240062b2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
240062b4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
240062b8:	2d00      	cmp	r5, #0
240062ba:	d1d7      	bne.n	2400626c <HAL_RCCEx_PeriphCLKConfig+0x938>
240062bc:	e6bf      	b.n	2400603e <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
240062be:	6862      	ldr	r2, [r4, #4]
240062c0:	e641      	b.n	24005f46 <HAL_RCCEx_PeriphCLKConfig+0x612>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
240062c2:	2102      	movs	r1, #2
240062c4:	f104 0008 	add.w	r0, r4, #8
240062c8:	f7ff fa40 	bl	2400574c <RCCEx_PLL2_Config>
240062cc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
240062ce:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
240062d2:	2d00      	cmp	r5, #0
240062d4:	d1b8      	bne.n	24006248 <HAL_RCCEx_PeriphCLKConfig+0x914>
240062d6:	f7ff bbe4 	b.w	24005aa2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
240062da:	bf00      	nop
240062dc:	58024400 	.word	0x58024400
240062e0:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240062e4:	2102      	movs	r1, #2
240062e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
240062ea:	f7ff faa9 	bl	24005840 <RCCEx_PLL3_Config>
240062ee:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
240062f0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
240062f4:	2d00      	cmp	r5, #0
240062f6:	d1b7      	bne.n	24006268 <HAL_RCCEx_PeriphCLKConfig+0x934>
240062f8:	e554      	b.n	24005da4 <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240062fa:	2102      	movs	r1, #2
240062fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
24006300:	f7ff fa9e 	bl	24005840 <RCCEx_PLL3_Config>
24006304:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24006306:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
2400630a:	2d00      	cmp	r5, #0
2400630c:	d1a8      	bne.n	24006260 <HAL_RCCEx_PeriphCLKConfig+0x92c>
2400630e:	e56b      	b.n	24005de8 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24006310:	4884      	ldr	r0, [pc, #528]	; (24006524 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
24006312:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
24006314:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
24006318:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
2400631a:	2d00      	cmp	r5, #0
2400631c:	d181      	bne.n	24006222 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
2400631e:	e664      	b.n	24005fea <HAL_RCCEx_PeriphCLKConfig+0x6b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24006320:	2101      	movs	r1, #1
24006322:	f104 0028 	add.w	r0, r4, #40	; 0x28
24006326:	f7ff fa8b 	bl	24005840 <RCCEx_PLL3_Config>
2400632a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
2400632c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24006330:	2d00      	cmp	r5, #0
24006332:	d193      	bne.n	2400625c <HAL_RCCEx_PeriphCLKConfig+0x928>
24006334:	f7ff bbf7 	b.w	24005b26 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24006338:	2101      	movs	r1, #1
2400633a:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400633e:	f7ff fa7f 	bl	24005840 <RCCEx_PLL3_Config>
24006342:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24006344:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24006348:	2d00      	cmp	r5, #0
2400634a:	d18b      	bne.n	24006264 <HAL_RCCEx_PeriphCLKConfig+0x930>
2400634c:	e40a      	b.n	24005b64 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400634e:	2102      	movs	r1, #2
24006350:	f104 0028 	add.w	r0, r4, #40	; 0x28
24006354:	f7ff fa74 	bl	24005840 <RCCEx_PLL3_Config>
24006358:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
2400635a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
2400635e:	2d00      	cmp	r5, #0
24006360:	f47f af5d 	bne.w	2400621e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
24006364:	e4fc      	b.n	24005d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24006366:	486f      	ldr	r0, [pc, #444]	; (24006524 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
24006368:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
2400636a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
2400636e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
24006370:	2d00      	cmp	r5, #0
24006372:	f47f ac70 	bne.w	24005c56 <HAL_RCCEx_PeriphCLKConfig+0x322>
24006376:	e769      	b.n	2400624c <HAL_RCCEx_PeriphCLKConfig+0x918>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24006378:	2102      	movs	r1, #2
2400637a:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400637e:	f7ff fa5f 	bl	24005840 <RCCEx_PLL3_Config>
24006382:	2800      	cmp	r0, #0
24006384:	f040 8094 	bne.w	240064b0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24006388:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
2400638c:	e9d4 3200 	ldrd	r3, r2, [r4]
24006390:	e53a      	b.n	24005e08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24006392:	2102      	movs	r1, #2
24006394:	f104 0028 	add.w	r0, r4, #40	; 0x28
24006398:	f7ff fa52 	bl	24005840 <RCCEx_PLL3_Config>
2400639c:	2800      	cmp	r0, #0
2400639e:	f040 808d 	bne.w	240064bc <HAL_RCCEx_PeriphCLKConfig+0xb88>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
240063a2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
240063a6:	e9d4 3200 	ldrd	r3, r2, [r4]
240063aa:	e53b      	b.n	24005e24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
240063ac:	e9d4 3200 	ldrd	r3, r2, [r4]
240063b0:	f7ff baed 	b.w	2400598e <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240063b4:	2100      	movs	r1, #0
240063b6:	f104 0028 	add.w	r0, r4, #40	; 0x28
240063ba:	f7ff fa41 	bl	24005840 <RCCEx_PLL3_Config>
240063be:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
240063c0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
240063c4:	f7ff bb4e 	b.w	24005a64 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240063c8:	2100      	movs	r1, #0
240063ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
240063ce:	f7ff fa37 	bl	24005840 <RCCEx_PLL3_Config>
240063d2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
240063d4:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
240063d8:	e5f1      	b.n	24005fbe <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240063da:	2100      	movs	r1, #0
240063dc:	f104 0028 	add.w	r0, r4, #40	; 0x28
240063e0:	f7ff fa2e 	bl	24005840 <RCCEx_PLL3_Config>
240063e4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
240063e6:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
240063ea:	f7ff baf4 	b.w	240059d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240063ee:	2102      	movs	r1, #2
240063f0:	3028      	adds	r0, #40	; 0x28
240063f2:	f7ff fa25 	bl	24005840 <RCCEx_PLL3_Config>
240063f6:	4606      	mov	r6, r0
    if (ret == HAL_OK)
240063f8:	2e00      	cmp	r6, #0
240063fa:	f43f aab9 	beq.w	24005970 <HAL_RCCEx_PeriphCLKConfig+0x3c>
240063fe:	e7d5      	b.n	240063ac <HAL_RCCEx_PeriphCLKConfig+0xa78>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24006400:	4848      	ldr	r0, [pc, #288]	; (24006524 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
        break;
24006402:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24006404:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
24006406:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
2400640a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
2400640c:	e5d7      	b.n	24005fbe <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400640e:	2100      	movs	r1, #0
24006410:	f104 0008 	add.w	r0, r4, #8
24006414:	f7ff f99a 	bl	2400574c <RCCEx_PLL2_Config>
24006418:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
2400641a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
2400641e:	e5ce      	b.n	24005fbe <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24006420:	2100      	movs	r1, #0
24006422:	f104 0028 	add.w	r0, r4, #40	; 0x28
24006426:	f7ff fa0b 	bl	24005840 <RCCEx_PLL3_Config>
2400642a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
2400642c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
24006430:	f7ff bb56 	b.w	24005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24006434:	2100      	movs	r1, #0
24006436:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400643a:	f7ff fa01 	bl	24005840 <RCCEx_PLL3_Config>
2400643e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24006440:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
24006444:	f7ff baea 	b.w	24005a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24006448:	2101      	movs	r1, #1
2400644a:	f104 0008 	add.w	r0, r4, #8
2400644e:	f7ff f97d 	bl	2400574c <RCCEx_PLL2_Config>
24006452:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24006454:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24006458:	2d00      	cmp	r5, #0
2400645a:	f47f ac4b 	bne.w	24005cf4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
2400645e:	e6e2      	b.n	24006226 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24006460:	2101      	movs	r1, #1
24006462:	f104 0008 	add.w	r0, r4, #8
24006466:	f7ff f971 	bl	2400574c <RCCEx_PLL2_Config>
2400646a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2400646c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24006470:	2d00      	cmp	r5, #0
24006472:	f47f ac5a 	bne.w	24005d2a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
24006476:	e6de      	b.n	24006236 <HAL_RCCEx_PeriphCLKConfig+0x902>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24006478:	2101      	movs	r1, #1
2400647a:	f104 0008 	add.w	r0, r4, #8
2400647e:	f7ff f965 	bl	2400574c <RCCEx_PLL2_Config>
24006482:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24006484:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
24006488:	2d00      	cmp	r5, #0
2400648a:	f47f aec6 	bne.w	2400621a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
2400648e:	e5ea      	b.n	24006066 <HAL_RCCEx_PeriphCLKConfig+0x732>
            ret = HAL_TIMEOUT;
24006490:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24006492:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
24006496:	4635      	mov	r5, r6
24006498:	f7ff bbe1 	b.w	24005c5e <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->SpdifrxClockSelection)
2400649c:	2601      	movs	r6, #1
2400649e:	f7ff ba76 	b.w	2400598e <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240064a2:	4d20      	ldr	r5, [pc, #128]	; (24006524 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
240064a4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
240064a6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
240064aa:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
240064ac:	f7ff ba68 	b.w	24005980 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
240064b0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
240064b4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
240064b6:	e9d4 3200 	ldrd	r3, r2, [r4]
240064ba:	e4a5      	b.n	24005e08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
240064bc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
240064c0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
240064c2:	e9d4 3200 	ldrd	r3, r2, [r4]
240064c6:	e4ad      	b.n	24005e24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        tickstart = HAL_GetTick();
240064c8:	f7fc fa0c 	bl	240028e4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240064cc:	f8df 8054 	ldr.w	r8, [pc, #84]	; 24006524 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
        tickstart = HAL_GetTick();
240064d0:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240064d2:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240064d6:	e004      	b.n	240064e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240064d8:	f7fc fa04 	bl	240028e4 <HAL_GetTick>
240064dc:	1bc0      	subs	r0, r0, r7
240064de:	4548      	cmp	r0, r9
240064e0:	d8d6      	bhi.n	24006490 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240064e2:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
240064e6:	079b      	lsls	r3, r3, #30
240064e8:	d5f6      	bpl.n	240064d8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
240064ea:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
240064ee:	e63e      	b.n	2400616e <HAL_RCCEx_PeriphCLKConfig+0x83a>
240064f0:	480c      	ldr	r0, [pc, #48]	; (24006524 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
240064f2:	4a0d      	ldr	r2, [pc, #52]	; (24006528 <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
240064f4:	6901      	ldr	r1, [r0, #16]
240064f6:	ea02 1213 	and.w	r2, r2, r3, lsr #4
240064fa:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
240064fe:	430a      	orrs	r2, r1
24006500:	6102      	str	r2, [r0, #16]
24006502:	e63f      	b.n	24006184 <HAL_RCCEx_PeriphCLKConfig+0x850>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24006504:	e9d4 3200 	ldrd	r3, r2, [r4]
24006508:	462e      	mov	r6, r5
2400650a:	f7ff bba8 	b.w	24005c5e <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Usart234578ClockSelection)
2400650e:	2601      	movs	r6, #1
24006510:	4635      	mov	r5, r6
24006512:	f7ff bbf0 	b.w	24005cf6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->FmcClockSelection)
24006516:	2601      	movs	r6, #1
24006518:	4635      	mov	r5, r6
2400651a:	f7ff bb9d 	b.w	24005c58 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->Lpuart1ClockSelection)
2400651e:	2601      	movs	r6, #1
24006520:	4635      	mov	r5, r6
24006522:	e403      	b.n	24005d2c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
24006524:	58024400 	.word	0x58024400
24006528:	00ffffcf 	.word	0x00ffffcf

2400652c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400652c:	4b4f      	ldr	r3, [pc, #316]	; (2400666c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
2400652e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24006530:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
24006532:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24006534:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
24006536:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
2400653a:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2400653e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
24006540:	d05c      	beq.n	240065fc <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24006542:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24006546:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400654a:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
2400654e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24006552:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24006554:	ee07 4a90 	vmov	s15, r4
24006558:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
2400655c:	d003      	beq.n	24006566 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
2400655e:	2902      	cmp	r1, #2
24006560:	d075      	beq.n	2400664e <HAL_RCCEx_GetPLL2ClockFreq+0x122>
24006562:	2900      	cmp	r1, #0
24006564:	d04f      	beq.n	24006606 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24006566:	ee07 2a90 	vmov	s15, r2
2400656a:	eddf 6a41 	vldr	s13, [pc, #260]	; 24006670 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
2400656e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24006574:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24006578:	eddf 5a3e 	vldr	s11, [pc, #248]	; 24006674 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
2400657c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24006580:	ee06 3a90 	vmov	s13, r3
24006584:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24006588:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400658c:	ee76 6a85 	vadd.f32	s13, s13, s10
24006590:	eee7 6a25 	vfma.f32	s13, s14, s11
24006594:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24006598:	4a34      	ldr	r2, [pc, #208]	; (2400666c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
2400659a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400659e:	6b93      	ldr	r3, [r2, #56]	; 0x38
240065a0:	f3c3 2346 	ubfx	r3, r3, #9, #7
240065a4:	ee07 3a10 	vmov	s14, r3
240065a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
240065ac:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
240065ae:	ee37 7a06 	vadd.f32	s14, s14, s12
240065b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
240065b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240065ba:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
240065be:	6b93      	ldr	r3, [r2, #56]	; 0x38
240065c0:	f3c3 4306 	ubfx	r3, r3, #16, #7
240065c4:	ee07 3a10 	vmov	s14, r3
240065c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240065cc:	ee37 7a06 	vadd.f32	s14, s14, s12
240065d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
240065d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240065d8:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
240065dc:	6b93      	ldr	r3, [r2, #56]	; 0x38
240065de:	f3c3 6306 	ubfx	r3, r3, #24, #7
240065e2:	ee07 3a90 	vmov	s15, r3
240065e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240065ea:	ee77 7a86 	vadd.f32	s15, s15, s12
240065ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240065f2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
240065f6:	ed80 7a02 	vstr	s14, [r0, #8]
}
240065fa:	4770      	bx	lr
240065fc:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
240065fe:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
24006602:	6082      	str	r2, [r0, #8]
}
24006604:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24006606:	6819      	ldr	r1, [r3, #0]
24006608:	0689      	lsls	r1, r1, #26
2400660a:	d527      	bpl.n	2400665c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400660c:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400660e:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24006612:	4919      	ldr	r1, [pc, #100]	; (24006678 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24006614:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400661a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400661e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24006622:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24006674 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
24006626:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400662a:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400662c:	ee06 3a90 	vmov	s13, r3
24006630:	ee05 1a90 	vmov	s11, r1
24006634:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24006638:	eef8 5ae5 	vcvt.f32.s32	s11, s11
2400663c:	ee76 6a86 	vadd.f32	s13, s13, s12
24006640:	ee85 6aa7 	vdiv.f32	s12, s11, s15
24006644:	eee7 6a05 	vfma.f32	s13, s14, s10
24006648:	ee66 6a26 	vmul.f32	s13, s12, s13
2400664c:	e7a4      	b.n	24006598 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400664e:	ee07 2a90 	vmov	s15, r2
24006652:	eddf 6a0a 	vldr	s13, [pc, #40]	; 2400667c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
24006656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400665a:	e78a      	b.n	24006572 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400665c:	ee07 2a90 	vmov	s15, r2
24006660:	eddf 6a07 	vldr	s13, [pc, #28]	; 24006680 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
24006664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24006668:	e783      	b.n	24006572 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
2400666a:	bf00      	nop
2400666c:	58024400 	.word	0x58024400
24006670:	4a742400 	.word	0x4a742400
24006674:	39000000 	.word	0x39000000
24006678:	03d09000 	.word	0x03d09000
2400667c:	4b742400 	.word	0x4b742400
24006680:	4c742400 	.word	0x4c742400

24006684 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24006684:	4b4f      	ldr	r3, [pc, #316]	; (240067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
24006686:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24006688:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
2400668a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
2400668c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
2400668e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24006692:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24006696:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
24006698:	d05c      	beq.n	24006754 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400669a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
2400669e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240066a2:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
240066a6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
240066aa:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
240066ac:	ee07 4a90 	vmov	s15, r4
240066b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
240066b4:	d003      	beq.n	240066be <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
240066b6:	2902      	cmp	r1, #2
240066b8:	d075      	beq.n	240067a6 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
240066ba:	2900      	cmp	r1, #0
240066bc:	d04f      	beq.n	2400675e <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240066be:	ee07 2a90 	vmov	s15, r2
240066c2:	eddf 6a41 	vldr	s13, [pc, #260]	; 240067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
240066c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
240066cc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
240066d0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 240067cc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
240066d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
240066d8:	ee06 3a90 	vmov	s13, r3
240066dc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
240066e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
240066e4:	ee76 6a85 	vadd.f32	s13, s13, s10
240066e8:	eee7 6a25 	vfma.f32	s13, s14, s11
240066ec:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
240066f0:	4a34      	ldr	r2, [pc, #208]	; (240067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
240066f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
240066f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
240066f8:	f3c3 2346 	ubfx	r3, r3, #9, #7
240066fc:	ee07 3a10 	vmov	s14, r3
24006700:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
24006704:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24006706:	ee37 7a06 	vadd.f32	s14, s14, s12
2400670a:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400670e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24006712:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
24006716:	6c13      	ldr	r3, [r2, #64]	; 0x40
24006718:	f3c3 4306 	ubfx	r3, r3, #16, #7
2400671c:	ee07 3a10 	vmov	s14, r3
24006720:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24006724:	ee37 7a06 	vadd.f32	s14, s14, s12
24006728:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400672c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24006730:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
24006734:	6c13      	ldr	r3, [r2, #64]	; 0x40
24006736:	f3c3 6306 	ubfx	r3, r3, #24, #7
2400673a:	ee07 3a90 	vmov	s15, r3
2400673e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24006742:	ee77 7a86 	vadd.f32	s15, s15, s12
24006746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400674a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
2400674e:	ed80 7a02 	vstr	s14, [r0, #8]
}
24006752:	4770      	bx	lr
24006754:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
24006756:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
2400675a:	6082      	str	r2, [r0, #8]
}
2400675c:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400675e:	6819      	ldr	r1, [r3, #0]
24006760:	0689      	lsls	r1, r1, #26
24006762:	d527      	bpl.n	240067b4 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24006764:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24006766:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400676a:	4919      	ldr	r1, [pc, #100]	; (240067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400676c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24006772:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24006776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400677a:	ed9f 5a14 	vldr	s10, [pc, #80]	; 240067cc <HAL_RCCEx_GetPLL3ClockFreq+0x148>
2400677e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24006782:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24006784:	ee06 3a90 	vmov	s13, r3
24006788:	ee05 1a90 	vmov	s11, r1
2400678c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
24006790:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24006794:	ee76 6a86 	vadd.f32	s13, s13, s12
24006798:	ee85 6aa7 	vdiv.f32	s12, s11, s15
2400679c:	eee7 6a05 	vfma.f32	s13, s14, s10
240067a0:	ee66 6a26 	vmul.f32	s13, s12, s13
240067a4:	e7a4      	b.n	240066f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240067a6:	ee07 2a90 	vmov	s15, r2
240067aa:	eddf 6a0a 	vldr	s13, [pc, #40]	; 240067d4 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
240067ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240067b2:	e78a      	b.n	240066ca <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240067b4:	ee07 2a90 	vmov	s15, r2
240067b8:	eddf 6a07 	vldr	s13, [pc, #28]	; 240067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
240067bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240067c0:	e783      	b.n	240066ca <HAL_RCCEx_GetPLL3ClockFreq+0x46>
240067c2:	bf00      	nop
240067c4:	58024400 	.word	0x58024400
240067c8:	4a742400 	.word	0x4a742400
240067cc:	39000000 	.word	0x39000000
240067d0:	03d09000 	.word	0x03d09000
240067d4:	4b742400 	.word	0x4b742400
240067d8:	4c742400 	.word	0x4c742400

240067dc <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240067dc:	4b4f      	ldr	r3, [pc, #316]	; (2400691c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
240067de:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240067e0:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
240067e2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
240067e4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
240067e6:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
240067ea:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240067ee:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
240067f0:	d05c      	beq.n	240068ac <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240067f2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
240067f6:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240067fa:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240067fe:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24006802:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24006804:	ee07 4a90 	vmov	s15, r4
24006808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
2400680c:	d07e      	beq.n	2400690c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
2400680e:	2902      	cmp	r1, #2
24006810:	d075      	beq.n	240068fe <HAL_RCCEx_GetPLL1ClockFreq+0x122>
24006812:	2900      	cmp	r1, #0
24006814:	d04f      	beq.n	240068b6 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24006816:	ee07 2a90 	vmov	s15, r2
2400681a:	eddf 6a41 	vldr	s13, [pc, #260]	; 24006920 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
2400681e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24006824:	ee86 6aa7 	vdiv.f32	s12, s13, s15
24006828:	eddf 5a3e 	vldr	s11, [pc, #248]	; 24006924 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
2400682c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24006830:	ee06 3a90 	vmov	s13, r3
24006834:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24006838:	eef8 6ae6 	vcvt.f32.s32	s13, s13
2400683c:	ee76 6a85 	vadd.f32	s13, s13, s10
24006840:	eee7 6a25 	vfma.f32	s13, s14, s11
24006844:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24006848:	4a34      	ldr	r2, [pc, #208]	; (2400691c <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
2400684a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400684e:	6b13      	ldr	r3, [r2, #48]	; 0x30
24006850:	f3c3 2346 	ubfx	r3, r3, #9, #7
24006854:	ee07 3a10 	vmov	s14, r3
24006858:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
2400685c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
2400685e:	ee37 7a06 	vadd.f32	s14, s14, s12
24006862:	eec6 7a87 	vdiv.f32	s15, s13, s14
24006866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400686a:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
2400686e:	6b13      	ldr	r3, [r2, #48]	; 0x30
24006870:	f3c3 4306 	ubfx	r3, r3, #16, #7
24006874:	ee07 3a10 	vmov	s14, r3
24006878:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2400687c:	ee37 7a06 	vadd.f32	s14, s14, s12
24006880:	eec6 7a87 	vdiv.f32	s15, s13, s14
24006884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24006888:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
2400688c:	6b13      	ldr	r3, [r2, #48]	; 0x30
2400688e:	f3c3 6306 	ubfx	r3, r3, #24, #7
24006892:	ee07 3a90 	vmov	s15, r3
24006896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400689a:	ee77 7a86 	vadd.f32	s15, s15, s12
2400689e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240068a2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
240068a6:	ed80 7a02 	vstr	s14, [r0, #8]
}
240068aa:	4770      	bx	lr
240068ac:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
240068ae:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
240068b2:	6082      	str	r2, [r0, #8]
}
240068b4:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240068b6:	6819      	ldr	r1, [r3, #0]
240068b8:	0689      	lsls	r1, r1, #26
240068ba:	d5ac      	bpl.n	24006816 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240068bc:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240068be:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240068c2:	4919      	ldr	r1, [pc, #100]	; (24006928 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240068c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
240068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240068ca:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240068ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240068d2:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24006924 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
240068d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240068da:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240068dc:	ee06 3a90 	vmov	s13, r3
240068e0:	ee05 1a90 	vmov	s11, r1
240068e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
240068e8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
240068ec:	ee76 6a86 	vadd.f32	s13, s13, s12
240068f0:	ee85 6aa7 	vdiv.f32	s12, s11, s15
240068f4:	eee7 6a05 	vfma.f32	s13, s14, s10
240068f8:	ee66 6a26 	vmul.f32	s13, s12, s13
240068fc:	e7a4      	b.n	24006848 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240068fe:	ee07 2a90 	vmov	s15, r2
24006902:	eddf 6a0a 	vldr	s13, [pc, #40]	; 2400692c <HAL_RCCEx_GetPLL1ClockFreq+0x150>
24006906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400690a:	e78a      	b.n	24006822 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400690c:	ee07 2a90 	vmov	s15, r2
24006910:	eddf 6a07 	vldr	s13, [pc, #28]	; 24006930 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
24006914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24006918:	e783      	b.n	24006822 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
2400691a:	bf00      	nop
2400691c:	58024400 	.word	0x58024400
24006920:	4c742400 	.word	0x4c742400
24006924:	39000000 	.word	0x39000000
24006928:	03d09000 	.word	0x03d09000
2400692c:	4b742400 	.word	0x4b742400
24006930:	4a742400 	.word	0x4a742400

24006934 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24006934:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
24006938:	430b      	orrs	r3, r1
{
2400693a:	b500      	push	{lr}
2400693c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
2400693e:	f000 8084 	beq.w	24006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
24006942:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
24006946:	430b      	orrs	r3, r1
24006948:	d039      	beq.n	240069be <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
2400694a:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
2400694e:	430b      	orrs	r3, r1
24006950:	f000 80e6 	beq.w	24006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
24006954:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
24006958:	430b      	orrs	r3, r1
2400695a:	f000 8089 	beq.w	24006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
2400695e:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
24006962:	430b      	orrs	r3, r1
24006964:	d061      	beq.n	24006a2a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
24006966:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
2400696a:	430b      	orrs	r3, r1
2400696c:	f000 8112 	beq.w	24006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24006970:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
24006974:	430b      	orrs	r3, r1
24006976:	f000 80a3 	beq.w	24006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
2400697a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
2400697e:	430b      	orrs	r3, r1
24006980:	f000 80fa 	beq.w	24006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24006984:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
24006988:	430b      	orrs	r3, r1
2400698a:	f000 8143 	beq.w	24006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
2400698e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
24006992:	ea50 0301 	orrs.w	r3, r0, r1
24006996:	d137      	bne.n	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
24006998:	4a99      	ldr	r2, [pc, #612]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400699a:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400699c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
240069a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240069a4:	f000 8083 	beq.w	24006aae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
240069a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240069ac:	f000 8156 	beq.w	24006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
240069b0:	bb53      	cbnz	r3, 24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
240069b2:	6810      	ldr	r0, [r2, #0]
240069b4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
240069b8:	d044      	beq.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
240069ba:	4892      	ldr	r0, [pc, #584]	; (24006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
240069bc:	e042      	b.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
240069be:	4a90      	ldr	r2, [pc, #576]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240069c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
240069c2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
240069c6:	2b80      	cmp	r3, #128	; 0x80
240069c8:	f000 80a5 	beq.w	24006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
240069cc:	d920      	bls.n	24006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
240069ce:	2bc0      	cmp	r3, #192	; 0xc0
240069d0:	d037      	beq.n	24006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
240069d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240069d6:	d117      	bne.n	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240069d8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240069da:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240069dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240069e0:	0749      	lsls	r1, r1, #29
240069e2:	d502      	bpl.n	240069ea <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
240069e4:	2b00      	cmp	r3, #0
240069e6:	f000 80c1 	beq.w	24006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
240069ea:	4a85      	ldr	r2, [pc, #532]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240069ec:	6812      	ldr	r2, [r2, #0]
240069ee:	05d0      	lsls	r0, r2, #23
240069f0:	d503      	bpl.n	240069fa <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
240069f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240069f6:	f000 8101 	beq.w	24006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
240069fa:	4a81      	ldr	r2, [pc, #516]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240069fc:	6812      	ldr	r2, [r2, #0]
240069fe:	0391      	lsls	r1, r2, #14
24006a00:	d502      	bpl.n	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
24006a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24006a06:	d0d8      	beq.n	240069ba <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
24006a08:	2000      	movs	r0, #0
}
24006a0a:	b005      	add	sp, #20
24006a0c:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
24006a10:	2b00      	cmp	r3, #0
24006a12:	d04c      	beq.n	24006aae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24006a14:	2b40      	cmp	r3, #64	; 0x40
24006a16:	d1f7      	bne.n	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24006a18:	6810      	ldr	r0, [r2, #0]
24006a1a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24006a1e:	d011      	beq.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24006a20:	a801      	add	r0, sp, #4
24006a22:	f7ff fd83 	bl	2400652c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24006a26:	9801      	ldr	r0, [sp, #4]
24006a28:	e00c      	b.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
24006a2a:	4a75      	ldr	r2, [pc, #468]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24006a2c:	6d13      	ldr	r3, [r2, #80]	; 0x50
24006a2e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
24006a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24006a36:	d06e      	beq.n	24006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24006a38:	d937      	bls.n	24006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x176>
24006a3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24006a3e:	f040 8087 	bne.w	24006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
24006a42:	4871      	ldr	r0, [pc, #452]	; (24006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
24006a44:	b005      	add	sp, #20
24006a46:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
24006a4a:	4b6d      	ldr	r3, [pc, #436]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24006a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24006a4e:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
24006a52:	2b04      	cmp	r3, #4
24006a54:	d8d8      	bhi.n	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
24006a56:	a201      	add	r2, pc, #4	; (adr r2, 24006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
24006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24006a5c:	24006aff 	.word	0x24006aff
24006a60:	24006adb 	.word	0x24006adb
24006a64:	24006aeb 	.word	0x24006aeb
24006a68:	24006a43 	.word	0x24006a43
24006a6c:	24006ae7 	.word	0x24006ae7
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
24006a70:	4a63      	ldr	r2, [pc, #396]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24006a72:	6d93      	ldr	r3, [r2, #88]	; 0x58
24006a74:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
24006a78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24006a7c:	d04b      	beq.n	24006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24006a7e:	d944      	bls.n	24006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
24006a80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24006a84:	d0dd      	beq.n	24006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24006a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24006a8a:	d1bd      	bne.n	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24006a8c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24006a8e:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24006a90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24006a94:	0752      	lsls	r2, r2, #29
24006a96:	d5a8      	bpl.n	240069ea <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
24006a98:	2b00      	cmp	r3, #0
24006a9a:	d1a6      	bne.n	240069ea <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24006a9c:	4b58      	ldr	r3, [pc, #352]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24006a9e:	485b      	ldr	r0, [pc, #364]	; (24006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
24006aa0:	681b      	ldr	r3, [r3, #0]
24006aa2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24006aa6:	40d8      	lsrs	r0, r3
24006aa8:	e7cc      	b.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
24006aaa:	2b00      	cmp	r3, #0
24006aac:	d154      	bne.n	24006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24006aae:	6810      	ldr	r0, [r2, #0]
24006ab0:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
24006ab4:	d0c6      	beq.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24006ab6:	a801      	add	r0, sp, #4
24006ab8:	f7ff fe90 	bl	240067dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24006abc:	9802      	ldr	r0, [sp, #8]
24006abe:	e7c1      	b.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
24006ac0:	4a4f      	ldr	r2, [pc, #316]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24006ac2:	6d93      	ldr	r3, [r2, #88]	; 0x58
24006ac4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
24006ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24006acc:	f000 80d0 	beq.w	24006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
24006ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24006ad4:	d0da      	beq.n	24006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
24006ad6:	2b00      	cmp	r3, #0
24006ad8:	d196      	bne.n	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24006ada:	4b49      	ldr	r3, [pc, #292]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24006adc:	6818      	ldr	r0, [r3, #0]
24006ade:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24006ae2:	d0af      	beq.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24006ae4:	e79c      	b.n	24006a20 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24006ae6:	4a46      	ldr	r2, [pc, #280]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24006ae8:	e776      	b.n	240069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24006aea:	4b45      	ldr	r3, [pc, #276]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24006aec:	6818      	ldr	r0, [r3, #0]
24006aee:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24006af2:	d0a7      	beq.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24006af4:	a801      	add	r0, sp, #4
24006af6:	f7ff fdc5 	bl	24006684 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24006afa:	9801      	ldr	r0, [sp, #4]
24006afc:	e7a2      	b.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24006afe:	4b40      	ldr	r3, [pc, #256]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24006b00:	6818      	ldr	r0, [r3, #0]
24006b02:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
24006b06:	d09d      	beq.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24006b08:	e7d5      	b.n	24006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
24006b0a:	2b00      	cmp	r3, #0
24006b0c:	d0cf      	beq.n	24006aae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24006b0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24006b12:	d081      	beq.n	24006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
24006b14:	e778      	b.n	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24006b16:	6810      	ldr	r0, [r2, #0]
24006b18:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24006b1c:	d092      	beq.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24006b1e:	e7e9      	b.n	24006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
24006b20:	4a37      	ldr	r2, [pc, #220]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24006b22:	6d93      	ldr	r3, [r2, #88]	; 0x58
24006b24:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
24006b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24006b2c:	d0f3      	beq.n	24006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24006b2e:	d806      	bhi.n	24006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
24006b30:	2b00      	cmp	r3, #0
24006b32:	d0bc      	beq.n	24006aae <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24006b34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24006b38:	f43f af6e 	beq.w	24006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
24006b3c:	e764      	b.n	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
24006b3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24006b42:	f43f af7e 	beq.w	24006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24006b46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24006b4a:	f43f af45 	beq.w	240069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
24006b4e:	e75b      	b.n	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
24006b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24006b54:	d09a      	beq.n	24006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
24006b56:	e757      	b.n	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
24006b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24006b5c:	f43f af5c 	beq.w	24006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
24006b60:	e752      	b.n	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24006b62:	6810      	ldr	r0, [r2, #0]
24006b64:	f010 0004 	ands.w	r0, r0, #4
24006b68:	f43f af6c 	beq.w	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24006b6c:	6813      	ldr	r3, [r2, #0]
24006b6e:	4827      	ldr	r0, [pc, #156]	; (24006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
24006b70:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24006b74:	40d8      	lsrs	r0, r3
24006b76:	e765      	b.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
24006b78:	4b21      	ldr	r3, [pc, #132]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24006b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
24006b7c:	03d2      	lsls	r2, r2, #15
24006b7e:	d5bf      	bpl.n	24006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24006b80:	6818      	ldr	r0, [r3, #0]
24006b82:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24006b86:	f43f af5d 	beq.w	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24006b8a:	a801      	add	r0, sp, #4
24006b8c:	f7ff fcce 	bl	2400652c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
24006b90:	9803      	ldr	r0, [sp, #12]
24006b92:	e757      	b.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
24006b94:	4a1a      	ldr	r2, [pc, #104]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24006b96:	6d13      	ldr	r3, [r2, #80]	; 0x50
24006b98:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
24006b9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24006ba0:	d0df      	beq.n	24006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
24006ba2:	d810      	bhi.n	24006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
24006ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24006ba8:	d058      	beq.n	24006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
24006baa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24006bae:	d118      	bne.n	24006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24006bb0:	4b13      	ldr	r3, [pc, #76]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24006bb2:	6818      	ldr	r0, [r3, #0]
24006bb4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24006bb8:	f43f af44 	beq.w	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24006bbc:	a801      	add	r0, sp, #4
24006bbe:	f7ff fd61 	bl	24006684 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24006bc2:	9802      	ldr	r0, [sp, #8]
24006bc4:	e73e      	b.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
24006bc6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24006bca:	d012      	beq.n	24006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
24006bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24006bd0:	f47f af1a 	bne.w	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24006bd4:	4b0a      	ldr	r3, [pc, #40]	; (24006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24006bd6:	6818      	ldr	r0, [r3, #0]
24006bd8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
24006bdc:	f43f af32 	beq.w	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24006be0:	e6eb      	b.n	240069ba <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
24006be2:	2b00      	cmp	r3, #0
24006be4:	f47f af10 	bne.w	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
24006be8:	b005      	add	sp, #20
24006bea:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
24006bee:	f7fe bd65 	b.w	240056bc <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24006bf2:	6810      	ldr	r0, [r2, #0]
24006bf4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
24006bf8:	f43f af24 	beq.w	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
24006bfc:	4804      	ldr	r0, [pc, #16]	; (24006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
24006bfe:	e721      	b.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24006c00:	58024400 	.word	0x58024400
24006c04:	00f42400 	.word	0x00f42400
24006c08:	00bb8000 	.word	0x00bb8000
24006c0c:	03d09000 	.word	0x03d09000
24006c10:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
24006c14:	4b28      	ldr	r3, [pc, #160]	; (24006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24006c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24006c18:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
24006c1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24006c20:	d037      	beq.n	24006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
24006c22:	d814      	bhi.n	24006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
24006c24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24006c28:	d03f      	beq.n	24006caa <HAL_RCCEx_GetPeriphCLKFreq+0x376>
24006c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24006c2e:	d0bf      	beq.n	24006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
24006c30:	2b00      	cmp	r3, #0
24006c32:	f47f aee9 	bne.w	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
24006c36:	f7fe fd01 	bl	2400563c <HAL_RCC_GetHCLKFreq>
24006c3a:	4b1f      	ldr	r3, [pc, #124]	; (24006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24006c3c:	4a1f      	ldr	r2, [pc, #124]	; (24006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
24006c3e:	6a1b      	ldr	r3, [r3, #32]
24006c40:	f3c3 1302 	ubfx	r3, r3, #4, #3
24006c44:	5cd3      	ldrb	r3, [r2, r3]
24006c46:	f003 031f 	and.w	r3, r3, #31
24006c4a:	40d8      	lsrs	r0, r3
        break;
24006c4c:	e6fa      	b.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
24006c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24006c52:	d017      	beq.n	24006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
24006c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24006c58:	d0bc      	beq.n	24006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
24006c5a:	e6d5      	b.n	24006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24006c5c:	6810      	ldr	r0, [r2, #0]
24006c5e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24006c62:	f43f aeef 	beq.w	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24006c66:	a801      	add	r0, sp, #4
24006c68:	f7ff fc60 	bl	2400652c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24006c6c:	9802      	ldr	r0, [sp, #8]
24006c6e:	e6e9      	b.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24006c70:	6810      	ldr	r0, [r2, #0]
24006c72:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24006c76:	f43f aee5 	beq.w	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24006c7a:	a801      	add	r0, sp, #4
24006c7c:	f7ff fd02 	bl	24006684 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
24006c80:	9803      	ldr	r0, [sp, #12]
24006c82:	e6df      	b.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24006c84:	4b0c      	ldr	r3, [pc, #48]	; (24006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24006c86:	6818      	ldr	r0, [r3, #0]
24006c88:	f410 7080 	ands.w	r0, r0, #256	; 0x100
24006c8c:	f43f aeda 	beq.w	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24006c90:	e7b4      	b.n	24006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24006c92:	4b09      	ldr	r3, [pc, #36]	; (24006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24006c94:	6818      	ldr	r0, [r3, #0]
24006c96:	f010 0004 	ands.w	r0, r0, #4
24006c9a:	f43f aed3 	beq.w	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24006c9e:	681b      	ldr	r3, [r3, #0]
24006ca0:	4807      	ldr	r0, [pc, #28]	; (24006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
24006ca2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24006ca6:	40d8      	lsrs	r0, r3
24006ca8:	e6cc      	b.n	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24006caa:	4b03      	ldr	r3, [pc, #12]	; (24006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24006cac:	6818      	ldr	r0, [r3, #0]
24006cae:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24006cb2:	f43f aec7 	beq.w	24006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
24006cb6:	e7d6      	b.n	24006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
24006cb8:	58024400 	.word	0x58024400
24006cbc:	24014108 	.word	0x24014108
24006cc0:	03d09000 	.word	0x03d09000

24006cc4 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
24006cc4:	2800      	cmp	r0, #0
24006cc6:	d039      	beq.n	24006d3c <HAL_RNG_Init+0x78>
{
24006cc8:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
24006cca:	7a43      	ldrb	r3, [r0, #9]
24006ccc:	4604      	mov	r4, r0
24006cce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24006cd2:	b37b      	cbz	r3, 24006d34 <HAL_RNG_Init+0x70>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
24006cd4:	6823      	ldr	r3, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
24006cd6:	2202      	movs	r2, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
24006cd8:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
24006cda:	7262      	strb	r2, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
24006cdc:	681a      	ldr	r2, [r3, #0]
24006cde:	f022 0220 	bic.w	r2, r2, #32
24006ce2:	430a      	orrs	r2, r1
24006ce4:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
24006ce6:	681a      	ldr	r2, [r3, #0]
24006ce8:	f042 0204 	orr.w	r2, r2, #4
24006cec:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
24006cee:	685b      	ldr	r3, [r3, #4]
24006cf0:	0658      	lsls	r0, r3, #25
24006cf2:	d503      	bpl.n	24006cfc <HAL_RNG_Init+0x38>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
24006cf4:	2304      	movs	r3, #4
    return HAL_ERROR;
24006cf6:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
24006cf8:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
24006cfa:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
24006cfc:	f7fb fdf2 	bl	240028e4 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24006d00:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
24006d02:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24006d04:	685b      	ldr	r3, [r3, #4]
24006d06:	0759      	lsls	r1, r3, #29
24006d08:	d50e      	bpl.n	24006d28 <HAL_RNG_Init+0x64>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24006d0a:	f7fb fdeb 	bl	240028e4 <HAL_GetTick>
24006d0e:	1b43      	subs	r3, r0, r5
24006d10:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24006d12:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24006d14:	d9f6      	bls.n	24006d04 <HAL_RNG_Init+0x40>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
24006d16:	685a      	ldr	r2, [r3, #4]
24006d18:	0752      	lsls	r2, r2, #29
24006d1a:	d5f3      	bpl.n	24006d04 <HAL_RNG_Init+0x40>
        hrng->State = HAL_RNG_STATE_ERROR;
24006d1c:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24006d1e:	2302      	movs	r3, #2
        return HAL_ERROR;
24006d20:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
24006d22:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24006d24:	60e3      	str	r3, [r4, #12]
}
24006d26:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
24006d28:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
24006d2a:	2201      	movs	r2, #1
  return HAL_OK;
24006d2c:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
24006d2e:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
24006d30:	60e3      	str	r3, [r4, #12]
}
24006d32:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
24006d34:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
24006d36:	f7fb f9bf 	bl	240020b8 <HAL_RNG_MspInit>
24006d3a:	e7cb      	b.n	24006cd4 <HAL_RNG_Init+0x10>
    return HAL_ERROR;
24006d3c:	2001      	movs	r0, #1
}
24006d3e:	4770      	bx	lr

24006d40 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
24006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
24006d42:	7a03      	ldrb	r3, [r0, #8]
24006d44:	2b01      	cmp	r3, #1
24006d46:	d027      	beq.n	24006d98 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
24006d48:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
24006d4a:	2201      	movs	r2, #1
24006d4c:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
24006d4e:	4293      	cmp	r3, r2
24006d50:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
24006d52:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
24006d54:	d006      	beq.n	24006d64 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
24006d56:	2304      	movs	r3, #4
    status = HAL_ERROR;
24006d58:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
24006d5a:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
24006d5c:	2300      	movs	r3, #0
24006d5e:	7223      	strb	r3, [r4, #8]

  return status;
}
24006d60:	4630      	mov	r0, r6
24006d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
24006d64:	2302      	movs	r3, #2
24006d66:	460d      	mov	r5, r1
24006d68:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
24006d6a:	f7fb fdbb 	bl	240028e4 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24006d6e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
24006d70:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24006d72:	685a      	ldr	r2, [r3, #4]
24006d74:	07d2      	lsls	r2, r2, #31
24006d76:	d412      	bmi.n	24006d9e <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24006d78:	f7fb fdb4 	bl	240028e4 <HAL_GetTick>
24006d7c:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24006d7e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24006d80:	2802      	cmp	r0, #2
24006d82:	d9f6      	bls.n	24006d72 <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24006d84:	685a      	ldr	r2, [r3, #4]
24006d86:	f012 0201 	ands.w	r2, r2, #1
24006d8a:	d1f2      	bne.n	24006d72 <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
24006d8c:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24006d8e:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
24006d90:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
24006d92:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24006d94:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
24006d96:	e7e3      	b.n	24006d60 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
24006d98:	2602      	movs	r6, #2
}
24006d9a:	4630      	mov	r0, r6
24006d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
24006d9e:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
24006da0:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
24006da2:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
24006da4:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
24006da6:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
24006da8:	7262      	strb	r2, [r4, #9]
24006daa:	e7d7      	b.n	24006d5c <HAL_RNG_GenerateRandomNumber+0x1c>

24006dac <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
24006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24006dae:	6801      	ldr	r1, [r0, #0]
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
24006db0:	4605      	mov	r5, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24006db2:	4bab      	ldr	r3, [pc, #684]	; (24007060 <HAL_SAI_Init.part.0+0x2b4>)
24006db4:	4299      	cmp	r1, r3
24006db6:	d01c      	beq.n	24006df2 <HAL_SAI_Init.part.0+0x46>
24006db8:	3320      	adds	r3, #32
24006dba:	4299      	cmp	r1, r3
24006dbc:	d019      	beq.n	24006df2 <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24006dbe:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
24006dc2:	4299      	cmp	r1, r3
24006dc4:	d04e      	beq.n	24006e64 <HAL_SAI_Init.part.0+0xb8>
24006dc6:	3320      	adds	r3, #32
24006dc8:	4299      	cmp	r1, r3
24006dca:	d04b      	beq.n	24006e64 <HAL_SAI_Init.part.0+0xb8>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24006dcc:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
24006dd0:	4299      	cmp	r1, r3
24006dd2:	f000 812e 	beq.w	24007032 <HAL_SAI_Init.part.0+0x286>
24006dd6:	3320      	adds	r3, #32
24006dd8:	4299      	cmp	r1, r3
24006dda:	f000 812a 	beq.w	24007032 <HAL_SAI_Init.part.0+0x286>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
24006dde:	4ba1      	ldr	r3, [pc, #644]	; (24007064 <HAL_SAI_Init.part.0+0x2b8>)
24006de0:	4299      	cmp	r1, r3
24006de2:	f000 8128 	beq.w	24007036 <HAL_SAI_Init.part.0+0x28a>
24006de6:	3320      	adds	r3, #32
24006de8:	4299      	cmp	r1, r3
24006dea:	f000 8124 	beq.w	24007036 <HAL_SAI_Init.part.0+0x28a>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
24006dee:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
24006df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
24006df2:	4e9d      	ldr	r6, [pc, #628]	; (24007068 <HAL_SAI_Init.part.0+0x2bc>)
  if (hsai->State == HAL_SAI_STATE_RESET)
24006df4:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
24006df8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24006dfc:	2b00      	cmp	r3, #0
24006dfe:	d038      	beq.n	24006e72 <HAL_SAI_Init.part.0+0xc6>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24006e00:	4b9a      	ldr	r3, [pc, #616]	; (2400706c <HAL_SAI_Init.part.0+0x2c0>)
24006e02:	4a9b      	ldr	r2, [pc, #620]	; (24007070 <HAL_SAI_Init.part.0+0x2c4>)
24006e04:	681b      	ldr	r3, [r3, #0]
24006e06:	fba2 2303 	umull	r2, r3, r2, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
24006e0a:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24006e0c:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
24006e0e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24006e12:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
24006e14:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
24006e16:	2b00      	cmp	r3, #0
24006e18:	d032      	beq.n	24006e80 <HAL_SAI_Init.part.0+0xd4>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24006e1a:	680c      	ldr	r4, [r1, #0]
    count--;
24006e1c:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24006e1e:	f414 3480 	ands.w	r4, r4, #65536	; 0x10000
24006e22:	d1f8      	bne.n	24006e16 <HAL_SAI_Init.part.0+0x6a>
  hsai->State = HAL_SAI_STATE_BUSY;
24006e24:	2302      	movs	r3, #2
24006e26:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
24006e2a:	68eb      	ldr	r3, [r5, #12]
24006e2c:	2b01      	cmp	r3, #1
24006e2e:	f000 8144 	beq.w	240070ba <HAL_SAI_Init.part.0+0x30e>
24006e32:	2b02      	cmp	r3, #2
24006e34:	bf15      	itete	ne
24006e36:	2003      	movne	r0, #3
24006e38:	2023      	moveq	r0, #35	; 0x23
24006e3a:	2702      	movne	r7, #2
24006e3c:	2722      	moveq	r7, #34	; 0x22
24006e3e:	bf15      	itete	ne
24006e40:	f04f 0c01 	movne.w	ip, #1
24006e44:	f04f 0c21 	moveq.w	ip, #33	; 0x21
24006e48:	2200      	movne	r2, #0
24006e4a:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
24006e4c:	68ab      	ldr	r3, [r5, #8]
24006e4e:	3b01      	subs	r3, #1
24006e50:	2b04      	cmp	r3, #4
24006e52:	f200 816e 	bhi.w	24007132 <HAL_SAI_Init.part.0+0x386>
24006e56:	e8df f013 	tbh	[pc, r3, lsl #1]
24006e5a:	00e1      	.short	0x00e1
24006e5c:	00e8001c 	.word	0x00e8001c
24006e60:	00e4001b 	.word	0x00e4001b
  if (hsai->State == HAL_SAI_STATE_RESET)
24006e64:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
    SaiBaseAddress = SAI2;
24006e68:	4e82      	ldr	r6, [pc, #520]	; (24007074 <HAL_SAI_Init.part.0+0x2c8>)
  if (hsai->State == HAL_SAI_STATE_RESET)
24006e6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24006e6e:	2b00      	cmp	r3, #0
24006e70:	d1c6      	bne.n	24006e00 <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
24006e72:	4628      	mov	r0, r5
    hsai->Lock = HAL_UNLOCKED;
24006e74:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
24006e78:	f7fb f986 	bl	24002188 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
24006e7c:	6829      	ldr	r1, [r5, #0]
24006e7e:	e7bf      	b.n	24006e00 <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24006e80:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    return HAL_ERROR;
24006e84:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24006e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24006e8a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
24006e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
24006e90:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
24006e92:	f44f 6700 	mov.w	r7, #2048	; 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
24006e96:	6a2b      	ldr	r3, [r5, #32]
  SaiBaseAddress->GCR = tmpregisterGCR;
24006e98:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
24006e9a:	2b00      	cmp	r3, #0
24006e9c:	d049      	beq.n	24006f32 <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24006e9e:	4b70      	ldr	r3, [pc, #448]	; (24007060 <HAL_SAI_Init.part.0+0x2b4>)
24006ea0:	4299      	cmp	r1, r3
24006ea2:	f000 811f 	beq.w	240070e4 <HAL_SAI_Init.part.0+0x338>
24006ea6:	4874      	ldr	r0, [pc, #464]	; (24007078 <HAL_SAI_Init.part.0+0x2cc>)
24006ea8:	1a08      	subs	r0, r1, r0
24006eaa:	fab0 f080 	clz	r0, r0
24006eae:	0940      	lsrs	r0, r0, #5
24006eb0:	2800      	cmp	r0, #0
24006eb2:	f040 8117 	bne.w	240070e4 <HAL_SAI_Init.part.0+0x338>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24006eb6:	4b71      	ldr	r3, [pc, #452]	; (2400707c <HAL_SAI_Init.part.0+0x2d0>)
24006eb8:	4299      	cmp	r1, r3
24006eba:	f000 8121 	beq.w	24007100 <HAL_SAI_Init.part.0+0x354>
24006ebe:	3320      	adds	r3, #32
24006ec0:	4299      	cmp	r1, r3
24006ec2:	f000 811d 	beq.w	24007100 <HAL_SAI_Init.part.0+0x354>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24006ec6:	4b6e      	ldr	r3, [pc, #440]	; (24007080 <HAL_SAI_Init.part.0+0x2d4>)
24006ec8:	4299      	cmp	r1, r3
24006eca:	f000 8112 	beq.w	240070f2 <HAL_SAI_Init.part.0+0x346>
24006ece:	3320      	adds	r3, #32
24006ed0:	4299      	cmp	r1, r3
24006ed2:	f000 810e 	beq.w	240070f2 <HAL_SAI_Init.part.0+0x346>
    if (hsai->Instance == SAI4_Block_A)
24006ed6:	4b63      	ldr	r3, [pc, #396]	; (24007064 <HAL_SAI_Init.part.0+0x2b8>)
24006ed8:	4299      	cmp	r1, r3
24006eda:	f000 8121 	beq.w	24007120 <HAL_SAI_Init.part.0+0x374>
    if (hsai->Instance == SAI4_Block_B)
24006ede:	4b69      	ldr	r3, [pc, #420]	; (24007084 <HAL_SAI_Init.part.0+0x2d8>)
24006ee0:	4299      	cmp	r1, r3
24006ee2:	f000 8117 	beq.w	24007114 <HAL_SAI_Init.part.0+0x368>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
24006ee6:	69ab      	ldr	r3, [r5, #24]
24006ee8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
24006eec:	f000 80eb 	beq.w	240070c6 <HAL_SAI_Init.part.0+0x31a>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24006ef0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24006ef2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24006ef6:	6c69      	ldr	r1, [r5, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24006ef8:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24006efc:	ea4f 0340 	mov.w	r3, r0, lsl #1
24006f00:	6a28      	ldr	r0, [r5, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24006f02:	bf0c      	ite	eq
24006f04:	2202      	moveq	r2, #2
24006f06:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24006f08:	fb00 f202 	mul.w	r2, r0, r2
24006f0c:	0212      	lsls	r2, r2, #8
24006f0e:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
24006f12:	4a5d      	ldr	r2, [pc, #372]	; (24007088 <HAL_SAI_Init.part.0+0x2dc>)
24006f14:	fba2 0203 	umull	r0, r2, r2, r3
24006f18:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
24006f1a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
24006f1e:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
24006f22:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
24006f24:	bf08      	it	eq
24006f26:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24006f28:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
24006f2a:	626a      	str	r2, [r5, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24006f2c:	d101      	bne.n	24006f32 <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
24006f2e:	0852      	lsrs	r2, r2, #1
24006f30:	626a      	str	r2, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24006f32:	686b      	ldr	r3, [r5, #4]
24006f34:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
24006f38:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24006f3a:	f040 80b9 	bne.w	240070b0 <HAL_SAI_Init.part.0+0x304>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
24006f3e:	2b01      	cmp	r3, #1
24006f40:	bf14      	ite	ne
24006f42:	f44f 7400 	movne.w	r4, #512	; 0x200
24006f46:	2400      	moveq	r4, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24006f48:	f7fb fce4 	bl	24002914 <HAL_GetREVID>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24006f4c:	6c69      	ldr	r1, [r5, #68]	; 0x44
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24006f4e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24006f52:	e9d5 3200 	ldrd	r3, r2, [r5]
24006f56:	ea42 0201 	orr.w	r2, r2, r1
24006f5a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
24006f5c:	ea42 0201 	orr.w	r2, r2, r1
24006f60:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
24006f62:	ea42 0201 	orr.w	r2, r2, r1
24006f66:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
24006f68:	ea42 0201 	orr.w	r2, r2, r1
24006f6c:	6969      	ldr	r1, [r5, #20]
24006f6e:	ea42 0201 	orr.w	r2, r2, r1
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24006f72:	f0c0 8095 	bcc.w	240070a0 <HAL_SAI_Init.part.0+0x2f4>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24006f76:	69a9      	ldr	r1, [r5, #24]
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
24006f78:	6818      	ldr	r0, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24006f7a:	430a      	orrs	r2, r1
24006f7c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
24006f7e:	430a      	orrs	r2, r1
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
24006f80:	4942      	ldr	r1, [pc, #264]	; (2400708c <HAL_SAI_Init.part.0+0x2e0>)
24006f82:	4001      	ands	r1, r0
24006f84:	6019      	str	r1, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24006f86:	6929      	ldr	r1, [r5, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24006f88:	430a      	orrs	r2, r1
24006f8a:	6819      	ldr	r1, [r3, #0]
24006f8c:	430a      	orrs	r2, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
24006f8e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24006f90:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
24006f94:	493e      	ldr	r1, [pc, #248]	; (24007090 <HAL_SAI_Init.part.0+0x2e4>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24006f96:	433a      	orrs	r2, r7
24006f98:	4322      	orrs	r2, r4
24006f9a:	601a      	str	r2, [r3, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
24006f9c:	685a      	ldr	r2, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
24006f9e:	6b28      	ldr	r0, [r5, #48]	; 0x30
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
24006fa0:	4011      	ands	r1, r2
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
24006fa2:	69ea      	ldr	r2, [r5, #28]
24006fa4:	4302      	orrs	r2, r0
24006fa6:	6b68      	ldr	r0, [r5, #52]	; 0x34
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
24006fa8:	6059      	str	r1, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
24006faa:	4302      	orrs	r2, r0
24006fac:	6859      	ldr	r1, [r3, #4]
24006fae:	430a      	orrs	r2, r1
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
24006fb0:	4938      	ldr	r1, [pc, #224]	; (24007094 <HAL_SAI_Init.part.0+0x2e8>)
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
24006fb2:	605a      	str	r2, [r3, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
24006fb4:	689a      	ldr	r2, [r3, #8]
24006fb6:	4011      	ands	r1, r2
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24006fb8:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
24006fba:	6099      	str	r1, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24006fbc:	6de9      	ldr	r1, [r5, #92]	; 0x5c
24006fbe:	6898      	ldr	r0, [r3, #8]
24006fc0:	430a      	orrs	r2, r1
24006fc2:	6e29      	ldr	r1, [r5, #96]	; 0x60
24006fc4:	430a      	orrs	r2, r1
24006fc6:	6d69      	ldr	r1, [r5, #84]	; 0x54
24006fc8:	3901      	subs	r1, #1
24006fca:	430a      	orrs	r2, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
24006fcc:	6da9      	ldr	r1, [r5, #88]	; 0x58
24006fce:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24006fd0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
24006fd4:	4302      	orrs	r2, r0
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
24006fd6:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24006fda:	609a      	str	r2, [r3, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
24006fdc:	68d9      	ldr	r1, [r3, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24006fde:	6eaa      	ldr	r2, [r5, #104]	; 0x68
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
24006fe0:	4001      	ands	r1, r0
24006fe2:	60d9      	str	r1, [r3, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24006fe4:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
24006fe6:	68d8      	ldr	r0, [r3, #12]
24006fe8:	430a      	orrs	r2, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
24006fea:	6f69      	ldr	r1, [r5, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24006fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
24006ff0:	6f29      	ldr	r1, [r5, #112]	; 0x70
24006ff2:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24006ff4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
24006ff8:	4919      	ldr	r1, [pc, #100]	; (24007060 <HAL_SAI_Init.part.0+0x2b4>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24006ffa:	4302      	orrs	r2, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
24006ffc:	428b      	cmp	r3, r1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24006ffe:	60da      	str	r2, [r3, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
24007000:	d01b      	beq.n	2400703a <HAL_SAI_Init.part.0+0x28e>
24007002:	4a18      	ldr	r2, [pc, #96]	; (24007064 <HAL_SAI_Init.part.0+0x2b8>)
24007004:	4293      	cmp	r3, r2
24007006:	d018      	beq.n	2400703a <HAL_SAI_Init.part.0+0x28e>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24007008:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
2400700a:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
2400700c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return HAL_OK;
24007010:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
24007012:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
  __HAL_UNLOCK(hsai);
24007016:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
2400701a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
2400701c:	f44f 6780 	mov.w	r7, #1024	; 0x400
24007020:	e739      	b.n	24006e96 <HAL_SAI_Init.part.0+0xea>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
24007022:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
24007024:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
24007028:	e735      	b.n	24006e96 <HAL_SAI_Init.part.0+0xea>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
2400702a:	4662      	mov	r2, ip
      syncen_bits = SAI_xCR1_SYNCEN_1;
2400702c:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
24007030:	e731      	b.n	24006e96 <HAL_SAI_Init.part.0+0xea>
    SaiBaseAddress = SAI3;
24007032:	4e19      	ldr	r6, [pc, #100]	; (24007098 <HAL_SAI_Init.part.0+0x2ec>)
24007034:	e6de      	b.n	24006df4 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
24007036:	4e19      	ldr	r6, [pc, #100]	; (2400709c <HAL_SAI_Init.part.0+0x2f0>)
24007038:	e6dc      	b.n	24006df4 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
2400703a:	6c73      	ldr	r3, [r6, #68]	; 0x44
2400703c:	f023 0301 	bic.w	r3, r3, #1
24007040:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
24007042:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
24007046:	2b01      	cmp	r3, #1
24007048:	d1de      	bne.n	24007008 <HAL_SAI_Init.part.0+0x25c>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
2400704a:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
2400704e:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
24007050:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
24007054:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
24007056:	6c73      	ldr	r3, [r6, #68]	; 0x44
24007058:	f043 0301 	orr.w	r3, r3, #1
2400705c:	6473      	str	r3, [r6, #68]	; 0x44
2400705e:	e7d3      	b.n	24007008 <HAL_SAI_Init.part.0+0x25c>
24007060:	40015804 	.word	0x40015804
24007064:	58005404 	.word	0x58005404
24007068:	40015800 	.word	0x40015800
2400706c:	2000002c 	.word	0x2000002c
24007070:	95cbec1b 	.word	0x95cbec1b
24007074:	40015c00 	.word	0x40015c00
24007078:	40015824 	.word	0x40015824
2400707c:	40015c04 	.word	0x40015c04
24007080:	40016004 	.word	0x40016004
24007084:	58005424 	.word	0x58005424
24007088:	cccccccd 	.word	0xcccccccd
2400708c:	f005c010 	.word	0xf005c010
24007090:	ffff1ff0 	.word	0xffff1ff0
24007094:	fff88000 	.word	0xfff88000
24007098:	40016000 	.word	0x40016000
2400709c:	58005400 	.word	0x58005400
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240070a0:	69a9      	ldr	r1, [r5, #24]
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
240070a2:	6818      	ldr	r0, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240070a4:	430a      	orrs	r2, r1
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
240070a6:	4924      	ldr	r1, [pc, #144]	; (24007138 <HAL_SAI_Init.part.0+0x38c>)
240070a8:	4001      	ands	r1, r0
240070aa:	6019      	str	r1, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
240070ac:	6aa9      	ldr	r1, [r5, #40]	; 0x28
240070ae:	e76b      	b.n	24006f88 <HAL_SAI_Init.part.0+0x1dc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
240070b0:	2b01      	cmp	r3, #1
240070b2:	bf08      	it	eq
240070b4:	f44f 7400 	moveq.w	r4, #512	; 0x200
240070b8:	e746      	b.n	24006f48 <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
240070ba:	2013      	movs	r0, #19
240070bc:	2712      	movs	r7, #18
240070be:	f04f 0c11 	mov.w	ip, #17
240070c2:	2210      	movs	r2, #16
240070c4:	e6c2      	b.n	24006e4c <HAL_SAI_Init.part.0+0xa0>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
240070c6:	6c69      	ldr	r1, [r5, #68]	; 0x44
240070c8:	2904      	cmp	r1, #4
240070ca:	d030      	beq.n	2400712e <HAL_SAI_Init.part.0+0x382>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
240070cc:	2908      	cmp	r1, #8
240070ce:	d01e      	beq.n	2400710e <HAL_SAI_Init.part.0+0x362>
        tmpframelength = hsai->FrameInit.FrameLength;
240070d0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
240070d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
240070d6:	0043      	lsls	r3, r0, #1
240070d8:	6a28      	ldr	r0, [r5, #32]
240070da:	fb00 f202 	mul.w	r2, r0, r2
240070de:	fbb3 f3f2 	udiv	r3, r3, r2
240070e2:	e716      	b.n	24006f12 <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
240070e4:	2100      	movs	r1, #0
240070e6:	f44f 7080 	mov.w	r0, #256	; 0x100
240070ea:	f7ff fc23 	bl	24006934 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
240070ee:	6829      	ldr	r1, [r5, #0]
240070f0:	e6e1      	b.n	24006eb6 <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
240070f2:	2100      	movs	r1, #0
240070f4:	f44f 7000 	mov.w	r0, #512	; 0x200
240070f8:	f7ff fc1c 	bl	24006934 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
240070fc:	6829      	ldr	r1, [r5, #0]
240070fe:	e6ea      	b.n	24006ed6 <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
24007100:	2100      	movs	r1, #0
24007102:	f44f 7000 	mov.w	r0, #512	; 0x200
24007106:	f7ff fc15 	bl	24006934 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
2400710a:	6829      	ldr	r1, [r5, #0]
2400710c:	e6db      	b.n	24006ec6 <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
2400710e:	f44f 7280 	mov.w	r2, #256	; 0x100
24007112:	e7de      	b.n	240070d2 <HAL_SAI_Init.part.0+0x326>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
24007114:	2100      	movs	r1, #0
24007116:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400711a:	f7ff fc0b 	bl	24006934 <HAL_RCCEx_GetPeriphCLKFreq>
2400711e:	e6e2      	b.n	24006ee6 <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
24007120:	2100      	movs	r1, #0
24007122:	f44f 6080 	mov.w	r0, #1024	; 0x400
24007126:	f7ff fc05 	bl	24006934 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
2400712a:	6829      	ldr	r1, [r5, #0]
2400712c:	e6d7      	b.n	24006ede <HAL_SAI_Init.part.0+0x132>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
2400712e:	2240      	movs	r2, #64	; 0x40
24007130:	e7cf      	b.n	240070d2 <HAL_SAI_Init.part.0+0x326>
      syncen_bits = 0;
24007132:	2700      	movs	r7, #0
24007134:	e6af      	b.n	24006e96 <HAL_SAI_Init.part.0+0xea>
24007136:	bf00      	nop
24007138:	f805c010 	.word	0xf805c010

2400713c <HAL_SAI_InitProtocol>:
  switch (protocol)
2400713c:	2902      	cmp	r1, #2
{
2400713e:	b538      	push	{r3, r4, r5, lr}
24007140:	4604      	mov	r4, r0
  switch (protocol)
24007142:	d935      	bls.n	240071b0 <HAL_SAI_InitProtocol+0x74>
24007144:	1ec8      	subs	r0, r1, #3
24007146:	2801      	cmp	r0, #1
24007148:	d830      	bhi.n	240071ac <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400714a:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
2400714c:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
2400714e:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
24007150:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
24007152:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
24007154:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
24007156:	f64f 70ff 	movw	r0, #65535	; 0xffff
2400715a:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400715c:	6860      	ldr	r0, [r4, #4]
2400715e:	f030 0002 	bics.w	r0, r0, #2
24007162:	bf0c      	ite	eq
24007164:	2501      	moveq	r5, #1
24007166:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
24007168:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2400716a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
2400716e:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
24007170:	bf0c      	ite	eq
24007172:	2001      	moveq	r0, #1
24007174:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
24007176:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
24007178:	f44f 2180 	mov.w	r1, #262144	; 0x40000
2400717c:	65a0      	str	r0, [r4, #88]	; 0x58
2400717e:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
24007180:	2a03      	cmp	r2, #3
24007182:	d813      	bhi.n	240071ac <HAL_SAI_InitProtocol+0x70>
24007184:	e8df f002 	tbb	[pc, r2]
24007188:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
2400718c:	6823      	ldr	r3, [r4, #0]
2400718e:	4a47      	ldr	r2, [pc, #284]	; (240072ac <HAL_SAI_InitProtocol+0x170>)
24007190:	4293      	cmp	r3, r2
24007192:	d005      	beq.n	240071a0 <HAL_SAI_InitProtocol+0x64>
24007194:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
24007198:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
2400719c:	4293      	cmp	r3, r2
2400719e:	d105      	bne.n	240071ac <HAL_SAI_InitProtocol+0x70>
240071a0:	6863      	ldr	r3, [r4, #4]
240071a2:	2b01      	cmp	r3, #1
240071a4:	d102      	bne.n	240071ac <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
240071a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
240071a8:	2b00      	cmp	r3, #0
240071aa:	d037      	beq.n	2400721c <HAL_SAI_InitProtocol+0xe0>
}
240071ac:	2001      	movs	r0, #1
240071ae:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
240071b0:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
240071b2:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
240071b4:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
240071b6:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
240071b8:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
240071ba:	6860      	ldr	r0, [r4, #4]
240071bc:	f030 0002 	bics.w	r0, r0, #2
240071c0:	bf14      	ite	ne
240071c2:	2001      	movne	r0, #1
240071c4:	2000      	moveq	r0, #0
240071c6:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
240071c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
240071cc:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
240071ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
240071d2:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
240071d4:	f013 0001 	ands.w	r0, r3, #1
240071d8:	d1e8      	bne.n	240071ac <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
240071da:	b949      	cbnz	r1, 240071f0 <HAL_SAI_InitProtocol+0xb4>
240071dc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
240071e0:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
240071e4:	2a03      	cmp	r2, #3
240071e6:	d8e1      	bhi.n	240071ac <HAL_SAI_InitProtocol+0x70>
240071e8:	e8df f002 	tbb	[pc, r2]
240071ec:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
240071f0:	6660      	str	r0, [r4, #100]	; 0x64
240071f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
240071f6:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
240071f8:	2a03      	cmp	r2, #3
240071fa:	d8d7      	bhi.n	240071ac <HAL_SAI_InitProtocol+0x70>
240071fc:	e8df f002 	tbb	[pc, r2]
24007200:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
24007204:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
24007206:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24007208:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400720a:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
2400720c:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400720e:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24007210:	f7fb fb80 	bl	24002914 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
24007214:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
24007218:	2b01      	cmp	r3, #1
2400721a:	d0b7      	beq.n	2400718c <HAL_SAI_InitProtocol+0x50>
2400721c:	4620      	mov	r0, r4
}
2400721e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
24007222:	f7ff bdc3 	b.w	24006dac <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
24007226:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
24007228:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400722a:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400722c:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400722e:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
24007230:	e7ee      	b.n	24007210 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
24007232:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
24007234:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24007236:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
24007238:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400723a:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400723c:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
2400723e:	e7e7      	b.n	24007210 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
24007240:	21e0      	movs	r1, #224	; 0xe0
24007242:	e7f7      	b.n	24007234 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24007244:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
24007246:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24007248:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400724a:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400724c:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400724e:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24007250:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24007252:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24007256:	e7db      	b.n	24007210 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24007258:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400725a:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400725c:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400725e:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24007260:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
24007264:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24007266:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400726a:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400726c:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400726e:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24007270:	d1ce      	bne.n	24007210 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
24007272:	2308      	movs	r3, #8
24007274:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
24007276:	e7cb      	b.n	24007210 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24007278:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400727a:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400727c:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400727e:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
24007282:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24007284:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24007288:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400728a:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400728e:	d1bf      	bne.n	24007210 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
24007290:	2310      	movs	r3, #16
24007292:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
24007294:	e7bc      	b.n	24007210 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
24007296:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
24007298:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400729a:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2400729c:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400729e:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
240072a0:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
240072a2:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
240072a4:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
240072a8:	e7b2      	b.n	24007210 <HAL_SAI_InitProtocol+0xd4>
240072aa:	bf00      	nop
240072ac:	40015804 	.word	0x40015804

240072b0 <HAL_SAI_Abort>:
{
240072b0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hsai);
240072b2:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
240072b6:	2b01      	cmp	r3, #1
240072b8:	d06a      	beq.n	24007390 <HAL_SAI_Abort+0xe0>
240072ba:	2601      	movs	r6, #1
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
240072bc:	6802      	ldr	r2, [r0, #0]
240072be:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
240072c0:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
240072c4:	6815      	ldr	r5, [r2, #0]
240072c6:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
240072ca:	d00d      	beq.n	240072e8 <HAL_SAI_Abort+0x38>
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
240072cc:	6813      	ldr	r3, [r2, #0]
240072ce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
240072d2:	6013      	str	r3, [r2, #0]
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
240072d4:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
240072d8:	2b12      	cmp	r3, #18
240072da:	d02e      	beq.n	2400733a <HAL_SAI_Abort+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
240072dc:	2500      	movs	r5, #0
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
240072de:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
240072e2:	2b22      	cmp	r3, #34	; 0x22
240072e4:	d03e      	beq.n	24007364 <HAL_SAI_Abort+0xb4>
  hsai->Instance->IMR = 0;
240072e6:	6822      	ldr	r2, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
240072e8:	4b2b      	ldr	r3, [pc, #172]	; (24007398 <HAL_SAI_Abort+0xe8>)
  hsai->Instance->IMR = 0;
240072ea:	2000      	movs	r0, #0
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
240072ec:	492b      	ldr	r1, [pc, #172]	; (2400739c <HAL_SAI_Abort+0xec>)
240072ee:	681b      	ldr	r3, [r3, #0]
  hsai->Instance->IMR = 0;
240072f0:	6110      	str	r0, [r2, #16]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
240072f2:	fba1 1303 	umull	r1, r3, r1, r3
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
240072f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
240072fa:	0b1b      	lsrs	r3, r3, #12
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
240072fc:	6191      	str	r1, [r2, #24]
  __HAL_SAI_DISABLE(hsai);
240072fe:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24007300:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
24007302:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
24007306:	6011      	str	r1, [r2, #0]
    if (count == 0U)
24007308:	b17b      	cbz	r3, 2400732a <HAL_SAI_Abort+0x7a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400730a:	6811      	ldr	r1, [r2, #0]
    count--;
2400730c:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400730e:	03c9      	lsls	r1, r1, #15
24007310:	d4fa      	bmi.n	24007308 <HAL_SAI_Abort+0x58>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
24007312:	6853      	ldr	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
24007314:	2101      	movs	r1, #1
}
24007316:	4628      	mov	r0, r5
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
24007318:	f043 0308 	orr.w	r3, r3, #8
2400731c:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hsai);
2400731e:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
24007320:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
24007324:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
24007328:	bd70      	pop	{r4, r5, r6, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400732a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    status = HAL_ERROR;
2400732e:	2501      	movs	r5, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24007330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24007334:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    status = HAL_ERROR;
24007338:	e7eb      	b.n	24007312 <HAL_SAI_Abort+0x62>
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
2400733a:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
2400733e:	2800      	cmp	r0, #0
24007340:	d0cc      	beq.n	240072dc <HAL_SAI_Abort+0x2c>
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
24007342:	f7fc f973 	bl	2400362c <HAL_DMA_Abort>
24007346:	2800      	cmp	r0, #0
24007348:	d0c8      	beq.n	240072dc <HAL_SAI_Abort+0x2c>
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
2400734a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
2400734e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24007350:	2b80      	cmp	r3, #128	; 0x80
24007352:	d0c3      	beq.n	240072dc <HAL_SAI_Abort+0x2c>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24007354:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
24007358:	4635      	mov	r5, r6
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400735a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400735e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
24007362:	e7bc      	b.n	240072de <HAL_SAI_Abort+0x2e>
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
24007364:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
24007368:	2800      	cmp	r0, #0
2400736a:	d0bc      	beq.n	240072e6 <HAL_SAI_Abort+0x36>
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
2400736c:	f7fc f95e 	bl	2400362c <HAL_DMA_Abort>
24007370:	2800      	cmp	r0, #0
24007372:	d0b8      	beq.n	240072e6 <HAL_SAI_Abort+0x36>
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
24007374:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
24007378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400737a:	2b80      	cmp	r3, #128	; 0x80
2400737c:	d0b3      	beq.n	240072e6 <HAL_SAI_Abort+0x36>
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400737e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
          status = HAL_ERROR;
24007382:	2501      	movs	r5, #1
  hsai->Instance->IMR = 0;
24007384:	6822      	ldr	r2, [r4, #0]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24007386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400738a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
2400738e:	e7ab      	b.n	240072e8 <HAL_SAI_Abort+0x38>
  __HAL_LOCK(hsai);
24007390:	2502      	movs	r5, #2
}
24007392:	4628      	mov	r0, r5
24007394:	bd70      	pop	{r4, r5, r6, pc}
24007396:	bf00      	nop
24007398:	2000002c 	.word	0x2000002c
2400739c:	95cbec1b 	.word	0x95cbec1b

240073a0 <HAL_SAI_Transmit_DMA>:
{
240073a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
240073a4:	460f      	mov	r7, r1
240073a6:	4604      	mov	r4, r0
240073a8:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
240073aa:	f7fb fa9b 	bl	240028e4 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
240073ae:	2f00      	cmp	r7, #0
240073b0:	d061      	beq.n	24007476 <HAL_SAI_Transmit_DMA+0xd6>
240073b2:	fab5 f885 	clz	r8, r5
240073b6:	ea4f 1858 	mov.w	r8, r8, lsr #5
240073ba:	2d00      	cmp	r5, #0
240073bc:	d05b      	beq.n	24007476 <HAL_SAI_Transmit_DMA+0xd6>
  if (hsai->State == HAL_SAI_STATE_READY)
240073be:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
240073c2:	2b01      	cmp	r3, #1
240073c4:	fa5f f983 	uxtb.w	r9, r3
240073c8:	d150      	bne.n	2400746c <HAL_SAI_Transmit_DMA+0xcc>
    __HAL_LOCK(hsai);
240073ca:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
240073ce:	2b01      	cmp	r3, #1
240073d0:	d04c      	beq.n	2400746c <HAL_SAI_Transmit_DMA+0xcc>
    hsai->XferSize = Size;
240073d2:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
240073d4:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
240073d8:	4606      	mov	r6, r0
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
240073da:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    hsai->XferSize = Size;
240073de:	f365 030f 	bfi	r3, r5, #0, #16
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
240073e2:	6822      	ldr	r2, [r4, #0]
    __HAL_LOCK(hsai);
240073e4:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
240073e8:	4639      	mov	r1, r7
    hsai->XferSize = Size;
240073ea:	f365 431f 	bfi	r3, r5, #16, #16
    hsai->pBuffPtr = pData;
240073ee:	67a7      	str	r7, [r4, #120]	; 0x78
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
240073f0:	321c      	adds	r2, #28
    hsai->XferSize = Size;
240073f2:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
240073f4:	462b      	mov	r3, r5
    hsai->State = HAL_SAI_STATE_BUSY_TX;
240073f6:	2512      	movs	r5, #18
240073f8:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
240073fc:	4d2e      	ldr	r5, [pc, #184]	; (240074b8 <HAL_SAI_Transmit_DMA+0x118>)
    hsai->hdmatx->XferAbortCallback = NULL;
240073fe:	f8c0 8050 	str.w	r8, [r0, #80]	; 0x50
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
24007402:	6405      	str	r5, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
24007404:	4d2d      	ldr	r5, [pc, #180]	; (240074bc <HAL_SAI_Transmit_DMA+0x11c>)
24007406:	63c5      	str	r5, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
24007408:	4d2d      	ldr	r5, [pc, #180]	; (240074c0 <HAL_SAI_Transmit_DMA+0x120>)
2400740a:	64c5      	str	r5, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
2400740c:	f7fb ff76 	bl	240032fc <HAL_DMA_Start_IT>
24007410:	2800      	cmp	r0, #0
24007412:	d13e      	bne.n	24007492 <HAL_SAI_Transmit_DMA+0xf2>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24007414:	6c63      	ldr	r3, [r4, #68]	; 0x44
24007416:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24007418:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400741a:	d031      	beq.n	24007480 <HAL_SAI_Transmit_DMA+0xe0>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400741c:	2105      	movs	r1, #5
2400741e:	2261      	movs	r2, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24007420:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
24007422:	2b01      	cmp	r3, #1
24007424:	bf98      	it	ls
24007426:	4611      	movls	r1, r2
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24007428:	6822      	ldr	r2, [r4, #0]
2400742a:	6913      	ldr	r3, [r2, #16]
2400742c:	430b      	orrs	r3, r1
2400742e:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
24007430:	6813      	ldr	r3, [r2, #0]
24007432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24007436:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
24007438:	e006      	b.n	24007448 <HAL_SAI_Transmit_DMA+0xa8>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
2400743a:	f7fb fa53 	bl	240028e4 <HAL_GetTick>
2400743e:	1b83      	subs	r3, r0, r6
24007440:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24007444:	d82a      	bhi.n	2400749c <HAL_SAI_Transmit_DMA+0xfc>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
24007446:	6822      	ldr	r2, [r4, #0]
24007448:	6955      	ldr	r5, [r2, #20]
2400744a:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
2400744e:	d0f4      	beq.n	2400743a <HAL_SAI_Transmit_DMA+0x9a>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
24007450:	6813      	ldr	r3, [r2, #0]
24007452:	03db      	lsls	r3, r3, #15
24007454:	d403      	bmi.n	2400745e <HAL_SAI_Transmit_DMA+0xbe>
      __HAL_SAI_ENABLE(hsai);
24007456:	6813      	ldr	r3, [r2, #0]
24007458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400745c:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
2400745e:	2300      	movs	r3, #0
    return HAL_OK;
24007460:	4699      	mov	r9, r3
    __HAL_UNLOCK(hsai);
24007462:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
24007466:	4648      	mov	r0, r9
24007468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
2400746c:	f04f 0902 	mov.w	r9, #2
}
24007470:	4648      	mov	r0, r9
24007472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
24007476:	f04f 0901 	mov.w	r9, #1
}
2400747a:	4648      	mov	r0, r9
2400747c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24007480:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24007484:	2a01      	cmp	r2, #1
24007486:	bf0b      	itete	eq
24007488:	2115      	moveq	r1, #21
2400748a:	2105      	movne	r1, #5
2400748c:	2271      	moveq	r2, #113	; 0x71
2400748e:	2261      	movne	r2, #97	; 0x61
24007490:	e7c6      	b.n	24007420 <HAL_SAI_Transmit_DMA+0x80>
}
24007492:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
24007494:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
24007498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400749c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
240074a0:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
240074a4:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
240074a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
240074ac:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
240074ae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
240074b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
240074b6:	bf00      	nop
240074b8:	24007601 	.word	0x24007601
240074bc:	24007599 	.word	0x24007599
240074c0:	24007681 	.word	0x24007681

240074c4 <HAL_SAI_Receive_DMA>:
{
240074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0U))
240074c6:	2900      	cmp	r1, #0
240074c8:	d04e      	beq.n	24007568 <HAL_SAI_Receive_DMA+0xa4>
240074ca:	fab2 f582 	clz	r5, r2
240074ce:	4613      	mov	r3, r2
240074d0:	096d      	lsrs	r5, r5, #5
240074d2:	2a00      	cmp	r2, #0
240074d4:	d048      	beq.n	24007568 <HAL_SAI_Receive_DMA+0xa4>
  if (hsai->State == HAL_SAI_STATE_READY)
240074d6:	f890 2091 	ldrb.w	r2, [r0, #145]	; 0x91
240074da:	4604      	mov	r4, r0
240074dc:	2a01      	cmp	r2, #1
240074de:	b2d6      	uxtb	r6, r2
240074e0:	d13f      	bne.n	24007562 <HAL_SAI_Receive_DMA+0x9e>
    __HAL_LOCK(hsai);
240074e2:	f890 2090 	ldrb.w	r2, [r0, #144]	; 0x90
240074e6:	2a01      	cmp	r2, #1
240074e8:	d03b      	beq.n	24007562 <HAL_SAI_Receive_DMA+0x9e>
    hsai->pBuffPtr = pData;
240074ea:	6781      	str	r1, [r0, #120]	; 0x78
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
240074ec:	460a      	mov	r2, r1
    hsai->XferSize = Size;
240074ee:	4629      	mov	r1, r5
    hsai->State = HAL_SAI_STATE_BUSY_RX;
240074f0:	2722      	movs	r7, #34	; 0x22
    __HAL_LOCK(hsai);
240074f2:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
    hsai->XferSize = Size;
240074f6:	f363 010f 	bfi	r1, r3, #0, #16
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
240074fa:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
    hsai->XferSize = Size;
240074fe:	f363 411f 	bfi	r1, r3, #16, #16
24007502:	67c1      	str	r1, [r0, #124]	; 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
24007504:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
24007508:	f884 7091 	strb.w	r7, [r4, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
2400750c:	4f1e      	ldr	r7, [pc, #120]	; (24007588 <HAL_SAI_Receive_DMA+0xc4>)
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
2400750e:	6821      	ldr	r1, [r4, #0]
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
24007510:	6407      	str	r7, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
24007512:	4f1e      	ldr	r7, [pc, #120]	; (2400758c <HAL_SAI_Receive_DMA+0xc8>)
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
24007514:	311c      	adds	r1, #28
    hsai->hdmarx->XferAbortCallback = NULL;
24007516:	6505      	str	r5, [r0, #80]	; 0x50
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
24007518:	63c7      	str	r7, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
2400751a:	4f1d      	ldr	r7, [pc, #116]	; (24007590 <HAL_SAI_Receive_DMA+0xcc>)
2400751c:	64c7      	str	r7, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
2400751e:	f7fb feed 	bl	240032fc <HAL_DMA_Start_IT>
24007522:	bb20      	cbnz	r0, 2400756e <HAL_SAI_Receive_DMA+0xaa>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24007524:	6c63      	ldr	r3, [r4, #68]	; 0x44
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24007526:	6862      	ldr	r2, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24007528:	2b08      	cmp	r3, #8
2400752a:	d024      	beq.n	24007576 <HAL_SAI_Receive_DMA+0xb2>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400752c:	2105      	movs	r1, #5
2400752e:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24007530:	6823      	ldr	r3, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24007532:	3a02      	subs	r2, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
24007534:	2a01      	cmp	r2, #1
24007536:	bf98      	it	ls
24007538:	4601      	movls	r1, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400753a:	691a      	ldr	r2, [r3, #16]
2400753c:	430a      	orrs	r2, r1
2400753e:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
24007540:	681a      	ldr	r2, [r3, #0]
24007542:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24007546:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
24007548:	681a      	ldr	r2, [r3, #0]
2400754a:	03d2      	lsls	r2, r2, #15
2400754c:	d403      	bmi.n	24007556 <HAL_SAI_Receive_DMA+0x92>
      __HAL_SAI_ENABLE(hsai);
2400754e:	681a      	ldr	r2, [r3, #0]
24007550:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24007554:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
24007556:	2300      	movs	r3, #0
    return HAL_OK;
24007558:	461e      	mov	r6, r3
    __HAL_UNLOCK(hsai);
2400755a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400755e:	4630      	mov	r0, r6
24007560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
24007562:	2602      	movs	r6, #2
}
24007564:	4630      	mov	r0, r6
24007566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
24007568:	2601      	movs	r6, #1
}
2400756a:	4630      	mov	r0, r6
2400756c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400756e:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
24007570:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
}
24007574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24007576:	f022 0302 	bic.w	r3, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400757a:	2b01      	cmp	r3, #1
2400757c:	bf0b      	itete	eq
2400757e:	2115      	moveq	r1, #21
24007580:	2105      	movne	r1, #5
24007582:	2071      	moveq	r0, #113	; 0x71
24007584:	2061      	movne	r0, #97	; 0x61
24007586:	e7d3      	b.n	24007530 <HAL_SAI_Receive_DMA+0x6c>
24007588:	24007671 	.word	0x24007671
2400758c:	2400760d 	.word	0x2400760d
24007590:	24007681 	.word	0x24007681

24007594 <HAL_SAI_TxCpltCallback>:
24007594:	4770      	bx	lr
24007596:	bf00      	nop

24007598 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
24007598:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
2400759a:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400759c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
2400759e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240075a2:	d01b      	beq.n	240075dc <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
240075a4:	6803      	ldr	r3, [r0, #0]
    hsai->XferCount = 0;
240075a6:	f04f 0c00 	mov.w	ip, #0
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
240075aa:	6c41      	ldr	r1, [r0, #68]	; 0x44
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
240075ac:	681a      	ldr	r2, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
240075ae:	2908      	cmp	r1, #8
    hsai->XferCount = 0;
240075b0:	f8a0 c07e 	strh.w	ip, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
240075b4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
240075b8:	601a      	str	r2, [r3, #0]
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
240075ba:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
240075bc:	d011      	beq.n	240075e2 <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
240075be:	f06f 0c61 	mvn.w	ip, #97	; 0x61
240075c2:	f06f 0105 	mvn.w	r1, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
240075c6:	3a02      	subs	r2, #2
240075c8:	2a01      	cmp	r2, #1
240075ca:	bf98      	it	ls
240075cc:	4661      	movls	r1, ip

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
240075ce:	691a      	ldr	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
240075d0:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
240075d4:	400a      	ands	r2, r1
240075d6:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
240075d8:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
240075dc:	f7ff ffda 	bl	24007594 <HAL_SAI_TxCpltCallback>
#endif
}
240075e0:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
240075e2:	f022 0102 	bic.w	r1, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
240075e6:	2901      	cmp	r1, #1
240075e8:	bf0b      	itete	eq
240075ea:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
240075ee:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
240075f2:	f06f 0115 	mvneq.w	r1, #21
240075f6:	f06f 0105 	mvnne.w	r1, #5
240075fa:	e7e4      	b.n	240075c6 <SAI_DMATxCplt+0x2e>

240075fc <HAL_SAI_TxHalfCpltCallback>:
240075fc:	4770      	bx	lr
240075fe:	bf00      	nop

24007600 <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
24007600:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
24007602:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
24007604:	f7ff fffa 	bl	240075fc <HAL_SAI_TxHalfCpltCallback>
#endif
}
24007608:	bd08      	pop	{r3, pc}
2400760a:	bf00      	nop

2400760c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
2400760c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
2400760e:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24007610:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
24007612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24007616:	d01b      	beq.n	24007650 <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24007618:	6803      	ldr	r3, [r0, #0]
    hsai->XferCount = 0;
2400761a:	f04f 0c00 	mov.w	ip, #0
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400761e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24007620:	681a      	ldr	r2, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24007622:	2908      	cmp	r1, #8
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24007624:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
24007628:	601a      	str	r2, [r3, #0]
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400762a:	6842      	ldr	r2, [r0, #4]
    hsai->XferCount = 0;
2400762c:	f8a0 c07e 	strh.w	ip, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24007630:	d011      	beq.n	24007656 <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24007632:	f06f 0c61 	mvn.w	ip, #97	; 0x61
24007636:	f06f 0105 	mvn.w	r1, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400763a:	3a02      	subs	r2, #2
2400763c:	2a01      	cmp	r2, #1
2400763e:	bf98      	it	ls
24007640:	4661      	movls	r1, ip

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24007642:	691a      	ldr	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
24007644:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24007648:	400a      	ands	r2, r1
2400764a:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
2400764c:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
24007650:	f021 fb06 	bl	24028c60 <__HAL_SAI_RxCpltCallback_veneer>
#endif
}
24007654:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24007656:	f022 0102 	bic.w	r1, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400765a:	2901      	cmp	r1, #1
2400765c:	bf0b      	itete	eq
2400765e:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
24007662:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
24007666:	f06f 0115 	mvneq.w	r1, #21
2400766a:	f06f 0105 	mvnne.w	r1, #5
2400766e:	e7e4      	b.n	2400763a <SAI_DMARxCplt+0x2e>

24007670 <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
24007670:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
24007672:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
24007674:	f021 faf8 	bl	24028c68 <__HAL_SAI_RxHalfCpltCallback_veneer>
#endif
}
24007678:	bd08      	pop	{r3, pc}
2400767a:	bf00      	nop

2400767c <HAL_SAI_ErrorCallback>:
2400767c:	4770      	bx	lr
2400767e:	bf00      	nop

24007680 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
24007680:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24007682:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
24007684:	f7fc fd64 	bl	24004150 <HAL_DMA_GetError>
24007688:	2802      	cmp	r0, #2
2400768a:	d023      	beq.n	240076d4 <SAI_DMAError+0x54>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400768c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
24007690:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24007692:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24007696:	4b13      	ldr	r3, [pc, #76]	; (240076e4 <SAI_DMAError+0x64>)
24007698:	4813      	ldr	r0, [pc, #76]	; (240076e8 <SAI_DMAError+0x68>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400769a:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400769e:	681b      	ldr	r3, [r3, #0]
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
240076a0:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
240076a2:	fba0 0303 	umull	r0, r3, r0, r3
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
240076a6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
240076aa:	0b1b      	lsrs	r3, r3, #12
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
240076ac:	600a      	str	r2, [r1, #0]
  __HAL_SAI_DISABLE(hsai);
240076ae:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
240076b0:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
240076b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
240076b6:	600a      	str	r2, [r1, #0]
    if (count == 0U)
240076b8:	b16b      	cbz	r3, 240076d6 <SAI_DMAError+0x56>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
240076ba:	680a      	ldr	r2, [r1, #0]
    count--;
240076bc:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
240076be:	03d2      	lsls	r2, r2, #15
240076c0:	d4fa      	bmi.n	240076b8 <SAI_DMAError+0x38>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
240076c2:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
240076c4:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
240076c6:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
240076c8:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
240076cc:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
240076d0:	f7ff ffd4 	bl	2400767c <HAL_SAI_ErrorCallback>
#endif
  }
}
240076d4:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
240076d6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
240076da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240076de:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
240076e2:	e7ee      	b.n	240076c2 <SAI_DMAError+0x42>
240076e4:	2000002c 	.word	0x2000002c
240076e8:	95cbec1b 	.word	0x95cbec1b

240076ec <HAL_SAI_IRQHandler>:
  if (hsai->State != HAL_SAI_STATE_RESET)
240076ec:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
240076f0:	b903      	cbnz	r3, 240076f4 <HAL_SAI_IRQHandler+0x8>
240076f2:	4770      	bx	lr
    uint32_t itflags = hsai->Instance->SR;
240076f4:	6803      	ldr	r3, [r0, #0]
240076f6:	695a      	ldr	r2, [r3, #20]
    uint32_t itsources = hsai->Instance->IMR;
240076f8:	6919      	ldr	r1, [r3, #16]
{
240076fa:	b570      	push	{r4, r5, r6, lr}
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
240076fc:	0716      	lsls	r6, r2, #28
240076fe:	4604      	mov	r4, r0
    uint32_t cr1config = hsai->Instance->CR1;
24007700:	681d      	ldr	r5, [r3, #0]
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
24007702:	d506      	bpl.n	24007712 <HAL_SAI_IRQHandler+0x26>
24007704:	070e      	lsls	r6, r1, #28
24007706:	d504      	bpl.n	24007712 <HAL_SAI_IRQHandler+0x26>
      hsai->InterruptServiceRoutine(hsai);
24007708:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
}
2400770c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      hsai->InterruptServiceRoutine(hsai);
24007710:	4718      	bx	r3
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
24007712:	07d6      	lsls	r6, r2, #31
24007714:	d514      	bpl.n	24007740 <HAL_SAI_IRQHandler+0x54>
24007716:	f011 0c01 	ands.w	ip, r1, #1
2400771a:	d011      	beq.n	24007740 <HAL_SAI_IRQHandler+0x54>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
2400771c:	2201      	movs	r2, #1
      HAL_SAI_ErrorCallback(hsai);
2400771e:	4620      	mov	r0, r4
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
24007720:	619a      	str	r2, [r3, #24]
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
24007722:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
      hsai->ErrorCode |= tmperror;
24007726:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
2400772a:	2a22      	cmp	r2, #34	; 0x22
2400772c:	bf18      	it	ne
2400772e:	f04f 0c02 	movne.w	ip, #2
      hsai->ErrorCode |= tmperror;
24007732:	ea43 030c 	orr.w	r3, r3, ip
24007736:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
2400773a:	f7ff ff9f 	bl	2400767c <HAL_SAI_ErrorCallback>
}
2400773e:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
24007740:	0790      	lsls	r0, r2, #30
24007742:	d50a      	bpl.n	2400775a <HAL_SAI_IRQHandler+0x6e>
24007744:	078e      	lsls	r6, r1, #30
24007746:	d508      	bpl.n	2400775a <HAL_SAI_IRQHandler+0x6e>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
24007748:	2102      	movs	r1, #2
      if (hsai->mutecallback != NULL)
2400774a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
2400774e:	6199      	str	r1, [r3, #24]
      if (hsai->mutecallback != NULL)
24007750:	2a00      	cmp	r2, #0
24007752:	d0f4      	beq.n	2400773e <HAL_SAI_IRQHandler+0x52>
}
24007754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hsai->mutecallback();
24007758:	4710      	bx	r2
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
2400775a:	0690      	lsls	r0, r2, #26
2400775c:	d530      	bpl.n	240077c0 <HAL_SAI_IRQHandler+0xd4>
2400775e:	068e      	lsls	r6, r1, #26
24007760:	d52e      	bpl.n	240077c0 <HAL_SAI_IRQHandler+0xd4>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
24007762:	2220      	movs	r2, #32
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
24007764:	03ad      	lsls	r5, r5, #14
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
24007766:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
24007768:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400776c:	f043 0304 	orr.w	r3, r3, #4
24007770:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
24007774:	d532      	bpl.n	240077dc <HAL_SAI_IRQHandler+0xf0>
        if (hsai->hdmatx != NULL)
24007776:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
2400777a:	b168      	cbz	r0, 24007798 <HAL_SAI_IRQHandler+0xac>
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
2400777c:	4b30      	ldr	r3, [pc, #192]	; (24007840 <HAL_SAI_IRQHandler+0x154>)
2400777e:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
24007780:	f7fc f8cc 	bl	2400391c <HAL_DMA_Abort_IT>
24007784:	b140      	cbz	r0, 24007798 <HAL_SAI_IRQHandler+0xac>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24007786:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
2400778a:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400778c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24007790:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
24007794:	f7ff ff72 	bl	2400767c <HAL_SAI_ErrorCallback>
        if (hsai->hdmarx != NULL)
24007798:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
2400779c:	2800      	cmp	r0, #0
2400779e:	d0ce      	beq.n	2400773e <HAL_SAI_IRQHandler+0x52>
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
240077a0:	4b27      	ldr	r3, [pc, #156]	; (24007840 <HAL_SAI_IRQHandler+0x154>)
240077a2:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
240077a4:	f7fc f8ba 	bl	2400391c <HAL_DMA_Abort_IT>
240077a8:	2800      	cmp	r0, #0
240077aa:	d0c8      	beq.n	2400773e <HAL_SAI_IRQHandler+0x52>
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
240077ac:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
240077b0:	4620      	mov	r0, r4
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
240077b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240077b6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
            HAL_SAI_ErrorCallback(hsai);
240077ba:	f7ff ff5f 	bl	2400767c <HAL_SAI_ErrorCallback>
}
240077be:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
240077c0:	0650      	lsls	r0, r2, #25
240077c2:	d512      	bpl.n	240077ea <HAL_SAI_IRQHandler+0xfe>
240077c4:	064e      	lsls	r6, r1, #25
240077c6:	d510      	bpl.n	240077ea <HAL_SAI_IRQHandler+0xfe>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
240077c8:	2240      	movs	r2, #64	; 0x40
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
240077ca:	03ad      	lsls	r5, r5, #14
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
240077cc:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
240077ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
240077d2:	f043 0308 	orr.w	r3, r3, #8
240077d6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
240077da:	d4cc      	bmi.n	24007776 <HAL_SAI_IRQHandler+0x8a>
        (void) HAL_SAI_Abort(hsai);
240077dc:	4620      	mov	r0, r4
240077de:	f7ff fd67 	bl	240072b0 <HAL_SAI_Abort>
        HAL_SAI_ErrorCallback(hsai);
240077e2:	4620      	mov	r0, r4
240077e4:	f7ff ff4a 	bl	2400767c <HAL_SAI_ErrorCallback>
}
240077e8:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
240077ea:	0750      	lsls	r0, r2, #29
240077ec:	d519      	bpl.n	24007822 <HAL_SAI_IRQHandler+0x136>
240077ee:	074e      	lsls	r6, r1, #29
240077f0:	d517      	bpl.n	24007822 <HAL_SAI_IRQHandler+0x136>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
240077f2:	2204      	movs	r2, #4
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
240077f4:	f415 3500 	ands.w	r5, r5, #131072	; 0x20000
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
240077f8:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
240077fa:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
240077fe:	f042 0220 	orr.w	r2, r2, #32
24007802:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
24007806:	d1b6      	bne.n	24007776 <HAL_SAI_IRQHandler+0x8a>
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
24007808:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        hsai->State = HAL_SAI_STATE_READY;
2400780c:	2201      	movs	r2, #1
        hsai->Instance->IMR = 0U;
2400780e:	611d      	str	r5, [r3, #16]
        HAL_SAI_ErrorCallback(hsai);
24007810:	4620      	mov	r0, r4
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
24007812:	6199      	str	r1, [r3, #24]
        hsai->State = HAL_SAI_STATE_READY;
24007814:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
        hsai->XferCount = 0U;
24007818:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
        HAL_SAI_ErrorCallback(hsai);
2400781c:	f7ff ff2e 	bl	2400767c <HAL_SAI_ErrorCallback>
}
24007820:	bd70      	pop	{r4, r5, r6, pc}
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
24007822:	06d0      	lsls	r0, r2, #27
24007824:	d58b      	bpl.n	2400773e <HAL_SAI_IRQHandler+0x52>
24007826:	06ca      	lsls	r2, r1, #27
24007828:	d589      	bpl.n	2400773e <HAL_SAI_IRQHandler+0x52>
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
2400782a:	2210      	movs	r2, #16
      HAL_SAI_ErrorCallback(hsai);
2400782c:	4620      	mov	r0, r4
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
2400782e:	619a      	str	r2, [r3, #24]
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
24007830:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
24007834:	4313      	orrs	r3, r2
24007836:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      HAL_SAI_ErrorCallback(hsai);
2400783a:	f7ff ff1f 	bl	2400767c <HAL_SAI_ErrorCallback>
}
2400783e:	bd70      	pop	{r4, r5, r6, pc}
24007840:	24007845 	.word	0x24007845

24007844 <SAI_DMAAbort>:
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24007844:	6b80      	ldr	r0, [r0, #56]	; 0x38
  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
24007846:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400784a:	6802      	ldr	r2, [r0, #0]
2400784c:	6813      	ldr	r3, [r2, #0]
{
2400784e:	b510      	push	{r4, lr}
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
24007850:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  hsai->Instance->IMR = 0U;
24007854:	2400      	movs	r4, #0
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
24007856:	6013      	str	r3, [r2, #0]
  hsai->Instance->IMR = 0U;
24007858:	6114      	str	r4, [r2, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
2400785a:	6191      	str	r1, [r2, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
2400785c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
24007860:	2b20      	cmp	r3, #32
24007862:	d013      	beq.n	2400788c <SAI_DMAAbort+0x48>
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24007864:	4b11      	ldr	r3, [pc, #68]	; (240078ac <SAI_DMAAbort+0x68>)
24007866:	4c12      	ldr	r4, [pc, #72]	; (240078b0 <SAI_DMAAbort+0x6c>)
24007868:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
2400786a:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400786c:	fba4 4303 	umull	r4, r3, r4, r3
  __HAL_SAI_DISABLE(hsai);
24007870:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24007874:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
24007876:	6011      	str	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24007878:	009b      	lsls	r3, r3, #2
    if (count == 0U)
2400787a:	b183      	cbz	r3, 2400789e <SAI_DMAAbort+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400787c:	6811      	ldr	r1, [r2, #0]
    count--;
2400787e:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24007880:	03c9      	lsls	r1, r1, #15
24007882:	d4fa      	bmi.n	2400787a <SAI_DMAAbort+0x36>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
24007884:	6853      	ldr	r3, [r2, #4]
24007886:	f043 0308 	orr.w	r3, r3, #8
2400788a:	6053      	str	r3, [r2, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
2400788c:	2201      	movs	r2, #1

  /* Initialize XferCount */
  hsai->XferCount = 0U;
2400788e:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
24007890:	f880 2091 	strb.w	r2, [r0, #145]	; 0x91
  hsai->XferCount = 0U;
24007894:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
24007898:	f7ff fef0 	bl	2400767c <HAL_SAI_ErrorCallback>
#endif
}
2400789c:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400789e:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
240078a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240078a6:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      break;
240078aa:	e7eb      	b.n	24007884 <SAI_DMAAbort+0x40>
240078ac:	2000002c 	.word	0x2000002c
240078b0:	95cbec1b 	.word	0x95cbec1b

240078b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
240078b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
240078b8:	4605      	mov	r5, r0
240078ba:	b086      	sub	sp, #24
240078bc:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
240078be:	f7fb f811 	bl	240028e4 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
240078c2:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
240078c4:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
240078c6:	6828      	ldr	r0, [r5, #0]
240078c8:	f001 fcf8 	bl	240092bc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
240078cc:	4604      	mov	r4, r0
240078ce:	b118      	cbz	r0, 240078d8 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
240078d0:	4620      	mov	r0, r4
240078d2:	b006      	add	sp, #24
240078d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
240078d8:	6c69      	ldr	r1, [r5, #68]	; 0x44
240078da:	6828      	ldr	r0, [r5, #0]
240078dc:	0409      	lsls	r1, r1, #16
240078de:	f002 fa47 	bl	24009d70 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
240078e2:	4604      	mov	r4, r0
240078e4:	2800      	cmp	r0, #0
240078e6:	d1f3      	bne.n	240078d0 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
240078e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
240078ec:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
240078ee:	4669      	mov	r1, sp
240078f0:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
240078f2:	e9cd 2300 	strd	r2, r3, [sp]
240078f6:	2230      	movs	r2, #48	; 0x30
240078f8:	2302      	movs	r3, #2
240078fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
240078fe:	2200      	movs	r2, #0
24007900:	2301      	movs	r3, #1
24007902:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24007906:	f001 fcc3 	bl	24009290 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
2400790a:	6828      	ldr	r0, [r5, #0]
2400790c:	f002 fbb6 	bl	2400a07c <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
24007910:	4604      	mov	r4, r0
24007912:	2800      	cmp	r0, #0
24007914:	d1dc      	bne.n	240078d0 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
24007916:	4682      	mov	sl, r0
24007918:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400791a:	f240 582a 	movw	r8, #1322	; 0x52a
2400791e:	e004      	b.n	2400792a <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
24007920:	f7fa ffe0 	bl	240028e4 <HAL_GetTick>
24007924:	1b83      	subs	r3, r0, r6
24007926:	3301      	adds	r3, #1
24007928:	d024      	beq.n	24007974 <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400792a:	6828      	ldr	r0, [r5, #0]
2400792c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400792e:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
24007932:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
24007934:	d10c      	bne.n	24007950 <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
24007936:	0319      	lsls	r1, r3, #12
24007938:	d4f2      	bmi.n	24007920 <SD_FindSCR+0x6c>
2400793a:	2c00      	cmp	r4, #0
2400793c:	d1f0      	bne.n	24007920 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
2400793e:	f001 fc8d 	bl	2400925c <SDMMC_ReadFIFO>
24007942:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
24007944:	6828      	ldr	r0, [r5, #0]
      index++;
24007946:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
24007948:	f001 fc88 	bl	2400925c <SDMMC_ReadFIFO>
2400794c:	4682      	mov	sl, r0
      index++;
2400794e:	e7e7      	b.n	24007920 <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
24007950:	071a      	lsls	r2, r3, #28
24007952:	d416      	bmi.n	24007982 <SD_FindSCR+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
24007954:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007956:	079b      	lsls	r3, r3, #30
24007958:	d40f      	bmi.n	2400797a <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400795a:	6b44      	ldr	r4, [r0, #52]	; 0x34
2400795c:	f014 0420 	ands.w	r4, r4, #32
24007960:	d113      	bne.n	2400798a <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24007962:	fa9a f28a 	rev.w	r2, sl
24007966:	fa99 f389 	rev.w	r3, r9
2400796a:	490a      	ldr	r1, [pc, #40]	; (24007994 <SD_FindSCR+0xe0>)
2400796c:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
2400796e:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
24007972:	e7ad      	b.n	240078d0 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
24007974:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
24007978:	e7aa      	b.n	240078d0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400797a:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400797c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400797e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
24007980:	e7a6      	b.n	240078d0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
24007982:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
24007984:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
24007986:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
24007988:	e7a2      	b.n	240078d0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400798a:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
2400798c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400798e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
24007990:	e79e      	b.n	240078d0 <SD_FindSCR+0x1c>
24007992:	bf00      	nop
24007994:	18000f3a 	.word	0x18000f3a

24007998 <HAL_SD_GetCardStatus.part.0>:
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
24007998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
2400799c:	4604      	mov	r4, r0
2400799e:	b097      	sub	sp, #92	; 0x5c
240079a0:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
240079a2:	f7fa ff9f 	bl	240028e4 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
240079a6:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
240079a8:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
240079aa:	6820      	ldr	r0, [r4, #0]
240079ac:	f001 fc6c 	bl	24009288 <SDMMC_GetResponse>
240079b0:	0182      	lsls	r2, r0, #6
240079b2:	d45b      	bmi.n	24007a6c <HAL_SD_GetCardStatus.part.0+0xd4>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
240079b4:	2140      	movs	r1, #64	; 0x40
240079b6:	6820      	ldr	r0, [r4, #0]
240079b8:	f001 fc80 	bl	240092bc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
240079bc:	4603      	mov	r3, r0
240079be:	b1e0      	cbz	r0, 240079fa <HAL_SD_GetCardStatus.part.0+0x62>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
240079c0:	6b62      	ldr	r2, [r4, #52]	; 0x34
240079c2:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
240079c4:	6820      	ldr	r0, [r4, #0]
240079c6:	4a5a      	ldr	r2, [pc, #360]	; (24007b30 <HAL_SD_GetCardStatus.part.0+0x198>)
    hsd->State = HAL_SD_STATE_READY;
240079c8:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
240079ca:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
240079cc:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
240079ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
240079d0:	4313      	orrs	r3, r2
240079d2:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
240079d4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
240079d8:	f44f 7100 	mov.w	r1, #512	; 0x200
240079dc:	f001 fc6e 	bl	240092bc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
240079e0:	b138      	cbz	r0, 240079f2 <HAL_SD_GetCardStatus.part.0+0x5a>
    hsd->State = HAL_SD_STATE_READY;
240079e2:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
240079e4:	6822      	ldr	r2, [r4, #0]
240079e6:	4952      	ldr	r1, [pc, #328]	; (24007b30 <HAL_SD_GetCardStatus.part.0+0x198>)
    status = HAL_ERROR;
240079e8:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
240079ea:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
240079ec:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
240079ee:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
240079f2:	4630      	mov	r0, r6
240079f4:	b017      	add	sp, #92	; 0x5c
240079f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
240079fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
240079fc:	6820      	ldr	r0, [r4, #0]
240079fe:	0409      	lsls	r1, r1, #16
24007a00:	f002 f9b6 	bl	24009d70 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
24007a04:	4603      	mov	r3, r0
24007a06:	2800      	cmp	r0, #0
24007a08:	d1da      	bne.n	240079c0 <HAL_SD_GetCardStatus.part.0+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
24007a0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
24007a0e:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24007a10:	4669      	mov	r1, sp
24007a12:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
24007a14:	e9cd 2300 	strd	r2, r3, [sp]
24007a18:	2260      	movs	r2, #96	; 0x60
24007a1a:	2302      	movs	r3, #2
24007a1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
24007a20:	2301      	movs	r3, #1
24007a22:	2200      	movs	r2, #0
24007a24:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24007a28:	f001 fc32 	bl	24009290 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
24007a2c:	6820      	ldr	r0, [r4, #0]
24007a2e:	f002 fd49 	bl	2400a4c4 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
24007a32:	4603      	mov	r3, r0
24007a34:	2800      	cmp	r0, #0
24007a36:	d1c3      	bne.n	240079c0 <HAL_SD_GetCardStatus.part.0+0x28>
  uint32_t *pData = pSDstatus;
24007a38:	ae06      	add	r6, sp, #24
24007a3a:	e004      	b.n	24007a46 <HAL_SD_GetCardStatus.part.0+0xae>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
24007a3c:	f7fa ff52 	bl	240028e4 <HAL_GetTick>
24007a40:	1bc0      	subs	r0, r0, r7
24007a42:	3001      	adds	r0, #1
24007a44:	d016      	beq.n	24007a74 <HAL_SD_GetCardStatus.part.0+0xdc>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24007a46:	6820      	ldr	r0, [r4, #0]
24007a48:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007a4a:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
24007a4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24007a50:	d113      	bne.n	24007a7a <HAL_SD_GetCardStatus.part.0+0xe2>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
24007a52:	041b      	lsls	r3, r3, #16
24007a54:	d5f2      	bpl.n	24007a3c <HAL_SD_GetCardStatus.part.0+0xa4>
24007a56:	f106 0820 	add.w	r8, r6, #32
24007a5a:	e000      	b.n	24007a5e <HAL_SD_GetCardStatus.part.0+0xc6>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
24007a5c:	6820      	ldr	r0, [r4, #0]
24007a5e:	f001 fbfd 	bl	2400925c <SDMMC_ReadFIFO>
24007a62:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
24007a66:	4546      	cmp	r6, r8
24007a68:	d1f8      	bne.n	24007a5c <HAL_SD_GetCardStatus.part.0+0xc4>
24007a6a:	e7e7      	b.n	24007a3c <HAL_SD_GetCardStatus.part.0+0xa4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007a6c:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
24007a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
24007a72:	e7a8      	b.n	240079c6 <HAL_SD_GetCardStatus.part.0+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
24007a74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
24007a78:	e7a4      	b.n	240079c4 <HAL_SD_GetCardStatus.part.0+0x2c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
24007a7a:	0719      	lsls	r1, r3, #28
24007a7c:	d451      	bmi.n	24007b22 <HAL_SD_GetCardStatus.part.0+0x18a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
24007a7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007a80:	079a      	lsls	r2, r3, #30
24007a82:	d450      	bmi.n	24007b26 <HAL_SD_GetCardStatus.part.0+0x18e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
24007a84:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007a86:	069b      	lsls	r3, r3, #26
24007a88:	d50a      	bpl.n	24007aa0 <HAL_SD_GetCardStatus.part.0+0x108>
24007a8a:	e04e      	b.n	24007b2a <HAL_SD_GetCardStatus.part.0+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
24007a8c:	f001 fbe6 	bl	2400925c <SDMMC_ReadFIFO>
24007a90:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
24007a94:	f7fa ff26 	bl	240028e4 <HAL_GetTick>
24007a98:	1bc0      	subs	r0, r0, r7
24007a9a:	3001      	adds	r0, #1
24007a9c:	d0ea      	beq.n	24007a74 <HAL_SD_GetCardStatus.part.0+0xdc>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
24007a9e:	6820      	ldr	r0, [r4, #0]
24007aa0:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007aa2:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
24007aa6:	d1f1      	bne.n	24007a8c <HAL_SD_GetCardStatus.part.0+0xf4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
24007aa8:	9906      	ldr	r1, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
24007aaa:	461e      	mov	r6, r3
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24007aac:	4a21      	ldr	r2, [pc, #132]	; (24007b34 <HAL_SD_GetCardStatus.part.0+0x19c>)
24007aae:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
24007ab0:	0a0a      	lsrs	r2, r1, #8
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
24007ab2:	e9dd c308 	ldrd	ip, r3, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
24007ab6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
24007aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
24007abe:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
24007ac2:	fa5f f883 	uxtb.w	r8, r3
24007ac6:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
24007aca:	fa1f f982 	uxth.w	r9, r2
24007ace:	9a07      	ldr	r2, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
24007ad0:	ea47 0708 	orr.w	r7, r7, r8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
24007ad4:	f3c1 1881 	ubfx	r8, r1, #6, #2
24007ad8:	fa92 fe82 	rev.w	lr, r2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
24007adc:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
24007ae0:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
24007ae4:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
24007ae8:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
24007aea:	f8a5 9002 	strh.w	r9, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
24007aee:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
24007af2:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
24007af4:	f3cc 2207 	ubfx	r2, ip, #8, #8
24007af8:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
24007afa:	f3cc 5203 	ubfx	r2, ip, #20, #4
24007afe:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
24007b00:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
24007b04:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
24007b06:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
24007b08:	f3c3 2201 	ubfx	r2, r3, #8, #2
24007b0c:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
24007b0e:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
24007b12:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
24007b16:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
24007b18:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
24007b1a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
24007b1e:	74ab      	strb	r3, [r5, #18]
24007b20:	e75a      	b.n	240079d8 <HAL_SD_GetCardStatus.part.0+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
24007b22:	2308      	movs	r3, #8
24007b24:	e74f      	b.n	240079c6 <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
24007b26:	2302      	movs	r3, #2
24007b28:	e74d      	b.n	240079c6 <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
24007b2a:	2320      	movs	r3, #32
24007b2c:	e74b      	b.n	240079c6 <HAL_SD_GetCardStatus.part.0+0x2e>
24007b2e:	bf00      	nop
24007b30:	1fe00fff 	.word	0x1fe00fff
24007b34:	18000f3a 	.word	0x18000f3a

24007b38 <HAL_SD_ReadBlocks>:
{
24007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24007b3c:	460d      	mov	r5, r1
24007b3e:	b087      	sub	sp, #28
24007b40:	4680      	mov	r8, r0
24007b42:	4614      	mov	r4, r2
24007b44:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
24007b46:	f7fa fecd 	bl	240028e4 <HAL_GetTick>
  if (NULL == pData)
24007b4a:	2d00      	cmp	r5, #0
24007b4c:	f000 8099 	beq.w	24007c82 <HAL_SD_ReadBlocks+0x14a>
  if (hsd->State == HAL_SD_STATE_READY)
24007b50:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
24007b54:	2b01      	cmp	r3, #1
24007b56:	fa5f f983 	uxtb.w	r9, r3
24007b5a:	d17f      	bne.n	24007c5c <HAL_SD_ReadBlocks+0x124>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24007b5c:	19e3      	adds	r3, r4, r7
24007b5e:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
24007b62:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24007b64:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
24007b66:	f8c8 1034 	str.w	r1, [r8, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24007b6a:	f200 8096 	bhi.w	24007c9a <HAL_SD_ReadBlocks+0x162>
    hsd->State = HAL_SD_STATE_BUSY;
24007b6e:	2303      	movs	r3, #3
24007b70:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
24007b72:	f8d8 0000 	ldr.w	r0, [r8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
24007b76:	f04f 0a02 	mov.w	sl, #2
    hsd->State = HAL_SD_STATE_BUSY;
24007b7a:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
24007b7e:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    hsd->Instance->DCTRL = 0U;
24007b82:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
24007b84:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
24007b86:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
24007b88:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
24007b8c:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
24007b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
24007b94:	bf18      	it	ne
24007b96:	0264      	lslne	r4, r4, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
24007b98:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
24007b9a:	027b      	lsls	r3, r7, #9
24007b9c:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
24007b9e:	2390      	movs	r3, #144	; 0x90
24007ba0:	e9cd 3a02 	strd	r3, sl, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
24007ba4:	f001 fb74 	bl	24009290 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
24007ba8:	f8d8 0000 	ldr.w	r0, [r8]
    if (NumberOfBlocks > 1U)
24007bac:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
24007bae:	68c3      	ldr	r3, [r0, #12]
24007bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24007bb4:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
24007bb6:	d95d      	bls.n	24007c74 <HAL_SD_ReadBlocks+0x13c>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
24007bb8:	4621      	mov	r1, r4
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
24007bba:	f8c8 a02c 	str.w	sl, [r8, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
24007bbe:	f001 fcc9 	bl	24009554 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
24007bc2:	2800      	cmp	r0, #0
24007bc4:	d173      	bne.n	24007cae <HAL_SD_ReadBlocks+0x176>
    dataremaining = config.DataLength;
24007bc6:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24007bca:	e005      	b.n	24007bd8 <HAL_SD_ReadBlocks+0xa0>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
24007bcc:	f7fa fe8a 	bl	240028e4 <HAL_GetTick>
24007bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
24007bd2:	1b80      	subs	r0, r0, r6
24007bd4:	4298      	cmp	r0, r3
24007bd6:	d22b      	bcs.n	24007c30 <HAL_SD_ReadBlocks+0xf8>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24007bd8:	f8d8 0000 	ldr.w	r0, [r8]
24007bdc:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007bde:	f413 7f95 	tst.w	r3, #298	; 0x12a
24007be2:	d174      	bne.n	24007cce <HAL_SD_ReadBlocks+0x196>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
24007be4:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007be6:	041a      	lsls	r2, r3, #16
24007be8:	d5f0      	bpl.n	24007bcc <HAL_SD_ReadBlocks+0x94>
24007bea:	f1bb 0f1f 	cmp.w	fp, #31
24007bee:	d9ed      	bls.n	24007bcc <HAL_SD_ReadBlocks+0x94>
24007bf0:	1d2c      	adds	r4, r5, #4
24007bf2:	f105 0a24 	add.w	sl, r5, #36	; 0x24
24007bf6:	e001      	b.n	24007bfc <HAL_SD_ReadBlocks+0xc4>
          data = SDMMC_ReadFIFO(hsd->Instance);
24007bf8:	f8d8 0000 	ldr.w	r0, [r8]
        for (count = 0U; count < 8U; count++)
24007bfc:	3404      	adds	r4, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
24007bfe:	f001 fb2d 	bl	2400925c <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
24007c02:	0a01      	lsrs	r1, r0, #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
24007c04:	0c02      	lsrs	r2, r0, #16
        for (count = 0U; count < 8U; count++)
24007c06:	4554      	cmp	r4, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
24007c08:	ea4f 6310 	mov.w	r3, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
24007c0c:	f804 0c08 	strb.w	r0, [r4, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
24007c10:	f804 1c07 	strb.w	r1, [r4, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
24007c14:	f804 2c06 	strb.w	r2, [r4, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
24007c18:	f804 3c05 	strb.w	r3, [r4, #-5]
        for (count = 0U; count < 8U; count++)
24007c1c:	d1ec      	bne.n	24007bf8 <HAL_SD_ReadBlocks+0xc0>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
24007c1e:	f7fa fe61 	bl	240028e4 <HAL_GetTick>
24007c22:	9b10      	ldr	r3, [sp, #64]	; 0x40
24007c24:	1b80      	subs	r0, r0, r6
          tempbuff++;
24007c26:	3520      	adds	r5, #32
        dataremaining -= 32U;
24007c28:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
24007c2c:	4298      	cmp	r0, r3
24007c2e:	d3d3      	bcc.n	24007bd8 <HAL_SD_ReadBlocks+0xa0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007c30:	f8d8 3000 	ldr.w	r3, [r8]
        return HAL_TIMEOUT;
24007c34:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007c38:	484d      	ldr	r0, [pc, #308]	; (24007d70 <HAL_SD_ReadBlocks+0x238>)
        hsd->State = HAL_SD_STATE_READY;
24007c3a:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
24007c3c:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007c3e:	6398      	str	r0, [r3, #56]	; 0x38
}
24007c40:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
24007c42:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
24007c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
24007c4a:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
24007c4e:	f888 1030 	strb.w	r1, [r8, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
24007c52:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
}
24007c56:	b007      	add	sp, #28
24007c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
24007c5c:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    return HAL_ERROR;
24007c60:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
24007c64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
24007c68:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
}
24007c6c:	4648      	mov	r0, r9
24007c6e:	b007      	add	sp, #28
24007c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
24007c74:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
24007c76:	4621      	mov	r1, r4
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
24007c78:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
24007c7c:	f001 fbc4 	bl	24009408 <SDMMC_CmdReadSingleBlock>
24007c80:	e79f      	b.n	24007bc2 <HAL_SD_ReadBlocks+0x8a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
24007c82:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    return HAL_ERROR;
24007c86:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
24007c8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
24007c8e:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
24007c90:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
}
24007c94:	b007      	add	sp, #28
24007c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
24007c9a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
}
24007c9e:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
24007ca0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
24007ca4:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
}
24007ca8:	b007      	add	sp, #28
24007caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007cae:	f8d8 3000 	ldr.w	r3, [r8]
24007cb2:	4a2f      	ldr	r2, [pc, #188]	; (24007d70 <HAL_SD_ReadBlocks+0x238>)
24007cb4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
24007cb6:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
24007cb8:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
24007cbc:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
24007cbe:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
24007cc0:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
24007cc4:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
24007cc8:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
          return HAL_ERROR;
24007ccc:	e7ce      	b.n	24007c6c <HAL_SD_ReadBlocks+0x134>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
24007cce:	68c3      	ldr	r3, [r0, #12]
24007cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
24007cd4:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
24007cd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007cd8:	05db      	lsls	r3, r3, #23
24007cda:	d50b      	bpl.n	24007cf4 <HAL_SD_ReadBlocks+0x1bc>
24007cdc:	2f01      	cmp	r7, #1
24007cde:	d909      	bls.n	24007cf4 <HAL_SD_ReadBlocks+0x1bc>
      if (hsd->SdCard.CardType != CARD_SECURED)
24007ce0:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
24007ce4:	2b03      	cmp	r3, #3
24007ce6:	d005      	beq.n	24007cf4 <HAL_SD_ReadBlocks+0x1bc>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
24007ce8:	f001 fe26 	bl	24009938 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
24007cec:	2800      	cmp	r0, #0
24007cee:	d1de      	bne.n	24007cae <HAL_SD_ReadBlocks+0x176>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
24007cf0:	f8d8 0000 	ldr.w	r0, [r8]
24007cf4:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007cf6:	f013 0308 	ands.w	r3, r3, #8
24007cfa:	d115      	bne.n	24007d28 <HAL_SD_ReadBlocks+0x1f0>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
24007cfc:	6b42      	ldr	r2, [r0, #52]	; 0x34
24007cfe:	f012 0202 	ands.w	r2, r2, #2
24007d02:	d120      	bne.n	24007d46 <HAL_SD_ReadBlocks+0x20e>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
24007d04:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007d06:	f013 0320 	ands.w	r3, r3, #32
24007d0a:	d02a      	beq.n	24007d62 <HAL_SD_ReadBlocks+0x22a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007d0c:	4b18      	ldr	r3, [pc, #96]	; (24007d70 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
24007d0e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007d10:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
24007d12:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
24007d16:	f043 0320 	orr.w	r3, r3, #32
24007d1a:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
24007d1e:	f888 1030 	strb.w	r1, [r8, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
24007d22:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
      return HAL_ERROR;
24007d26:	e7a1      	b.n	24007c6c <HAL_SD_ReadBlocks+0x134>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007d28:	4b11      	ldr	r3, [pc, #68]	; (24007d70 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
24007d2a:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007d2c:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
24007d2e:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
24007d32:	f043 0308 	orr.w	r3, r3, #8
24007d36:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
24007d3a:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
24007d3c:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
24007d40:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
      return HAL_ERROR;
24007d44:	e792      	b.n	24007c6c <HAL_SD_ReadBlocks+0x134>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007d46:	4a0a      	ldr	r2, [pc, #40]	; (24007d70 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
24007d48:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007d4a:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
24007d4c:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
24007d50:	f042 0202 	orr.w	r2, r2, #2
24007d54:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
24007d58:	f888 1030 	strb.w	r1, [r8, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
24007d5c:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
      return HAL_ERROR;
24007d60:	e784      	b.n	24007c6c <HAL_SD_ReadBlocks+0x134>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24007d62:	4904      	ldr	r1, [pc, #16]	; (24007d74 <HAL_SD_ReadBlocks+0x23c>)
    hsd->State = HAL_SD_STATE_READY;
24007d64:	2201      	movs	r2, #1
    return HAL_OK;
24007d66:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24007d68:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
24007d6a:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
    return HAL_OK;
24007d6e:	e77d      	b.n	24007c6c <HAL_SD_ReadBlocks+0x134>
24007d70:	1fe00fff 	.word	0x1fe00fff
24007d74:	18000f3a 	.word	0x18000f3a

24007d78 <HAL_SD_WriteBlocks>:
{
24007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24007d7c:	460d      	mov	r5, r1
24007d7e:	b089      	sub	sp, #36	; 0x24
24007d80:	4604      	mov	r4, r0
24007d82:	4692      	mov	sl, r2
24007d84:	461f      	mov	r7, r3
24007d86:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
24007d8a:	f7fa fdab 	bl	240028e4 <HAL_GetTick>
  if (NULL == pData)
24007d8e:	2d00      	cmp	r5, #0
24007d90:	d079      	beq.n	24007e86 <HAL_SD_WriteBlocks+0x10e>
  if (hsd->State == HAL_SD_STATE_READY)
24007d92:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
24007d96:	2b01      	cmp	r3, #1
24007d98:	fa5f f983 	uxtb.w	r9, r3
24007d9c:	d164      	bne.n	24007e68 <HAL_SD_WriteBlocks+0xf0>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24007d9e:	eb0a 0307 	add.w	r3, sl, r7
24007da2:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
24007da4:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24007da6:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
24007da8:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24007daa:	d876      	bhi.n	24007e9a <HAL_SD_WriteBlocks+0x122>
    hsd->State = HAL_SD_STATE_BUSY;
24007dac:	2303      	movs	r3, #3
24007dae:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
24007db0:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
24007db2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
24007db6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->Instance->DCTRL = 0U;
24007db8:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
24007dba:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
24007dbc:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
24007dbe:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
24007dc2:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
24007dc6:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
24007dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
24007dcc:	bf18      	it	ne
24007dce:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
24007dd2:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
24007dd4:	027b      	lsls	r3, r7, #9
24007dd6:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
24007dd8:	2390      	movs	r3, #144	; 0x90
24007dda:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
24007ddc:	f001 fa58 	bl	24009290 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
24007de0:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
24007de2:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
24007de4:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
24007de6:	68c3      	ldr	r3, [r0, #12]
24007de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24007dec:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
24007dee:	d945      	bls.n	24007e7c <HAL_SD_WriteBlocks+0x104>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
24007df0:	2320      	movs	r3, #32
24007df2:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
24007df4:	f001 fcfa 	bl	240097ec <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
24007df8:	2800      	cmp	r0, #0
24007dfa:	d156      	bne.n	24007eaa <HAL_SD_WriteBlocks+0x132>
    dataremaining = config.DataLength;
24007dfc:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
24007e00:	e004      	b.n	24007e0c <HAL_SD_WriteBlocks+0x94>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
24007e02:	f7fa fd6f 	bl	240028e4 <HAL_GetTick>
24007e06:	1b80      	subs	r0, r0, r6
24007e08:	4540      	cmp	r0, r8
24007e0a:	d21d      	bcs.n	24007e48 <HAL_SD_WriteBlocks+0xd0>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
24007e0c:	6820      	ldr	r0, [r4, #0]
24007e0e:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007e10:	f413 7f8d 	tst.w	r3, #282	; 0x11a
24007e14:	d155      	bne.n	24007ec2 <HAL_SD_WriteBlocks+0x14a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
24007e16:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007e18:	045a      	lsls	r2, r3, #17
24007e1a:	d5f2      	bpl.n	24007e02 <HAL_SD_WriteBlocks+0x8a>
24007e1c:	f1bb 0f1f 	cmp.w	fp, #31
24007e20:	d9ef      	bls.n	24007e02 <HAL_SD_WriteBlocks+0x8a>
24007e22:	f105 0a20 	add.w	sl, r5, #32
24007e26:	e000      	b.n	24007e2a <HAL_SD_WriteBlocks+0xb2>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
24007e28:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
24007e2a:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
24007e2e:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
24007e30:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
24007e32:	f001 fa17 	bl	24009264 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
24007e36:	4555      	cmp	r5, sl
24007e38:	d1f6      	bne.n	24007e28 <HAL_SD_WriteBlocks+0xb0>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
24007e3a:	f7fa fd53 	bl	240028e4 <HAL_GetTick>
24007e3e:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
24007e40:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
24007e44:	4540      	cmp	r0, r8
24007e46:	d3e1      	bcc.n	24007e0c <HAL_SD_WriteBlocks+0x94>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007e48:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
24007e4a:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007e4e:	4840      	ldr	r0, [pc, #256]	; (24007f50 <HAL_SD_WriteBlocks+0x1d8>)
        hsd->State = HAL_SD_STATE_READY;
24007e50:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
24007e52:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007e54:	6388      	str	r0, [r1, #56]	; 0x38
}
24007e56:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
24007e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
24007e5a:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
24007e5c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
24007e60:	62e3      	str	r3, [r4, #44]	; 0x2c
}
24007e62:	b009      	add	sp, #36	; 0x24
24007e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
24007e68:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
24007e6a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
24007e6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
24007e72:	6363      	str	r3, [r4, #52]	; 0x34
}
24007e74:	4648      	mov	r0, r9
24007e76:	b009      	add	sp, #36	; 0x24
24007e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
24007e7c:	2310      	movs	r3, #16
24007e7e:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
24007e80:	f001 fc0e 	bl	240096a0 <SDMMC_CmdWriteSingleBlock>
24007e84:	e7b8      	b.n	24007df8 <HAL_SD_WriteBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
24007e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
24007e88:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
24007e8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
24007e90:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
24007e92:	6363      	str	r3, [r4, #52]	; 0x34
}
24007e94:	b009      	add	sp, #36	; 0x24
24007e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
24007e9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
24007e9c:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
24007e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
24007ea2:	6363      	str	r3, [r4, #52]	; 0x34
}
24007ea4:	b009      	add	sp, #36	; 0x24
24007ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007eaa:	6823      	ldr	r3, [r4, #0]
24007eac:	4a28      	ldr	r2, [pc, #160]	; (24007f50 <HAL_SD_WriteBlocks+0x1d8>)
24007eae:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
24007eb0:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
24007eb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
24007eb4:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
24007eb6:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
24007eb8:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
24007eba:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
24007ebe:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
24007ec0:	e7d8      	b.n	24007e74 <HAL_SD_WriteBlocks+0xfc>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
24007ec2:	68c3      	ldr	r3, [r0, #12]
24007ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
24007ec8:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
24007eca:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007ecc:	05db      	lsls	r3, r3, #23
24007ece:	d509      	bpl.n	24007ee4 <HAL_SD_WriteBlocks+0x16c>
24007ed0:	2f01      	cmp	r7, #1
24007ed2:	d907      	bls.n	24007ee4 <HAL_SD_WriteBlocks+0x16c>
      if (hsd->SdCard.CardType != CARD_SECURED)
24007ed4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24007ed6:	2b03      	cmp	r3, #3
24007ed8:	d004      	beq.n	24007ee4 <HAL_SD_WriteBlocks+0x16c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
24007eda:	f001 fd2d 	bl	24009938 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
24007ede:	2800      	cmp	r0, #0
24007ee0:	d1e3      	bne.n	24007eaa <HAL_SD_WriteBlocks+0x132>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
24007ee2:	6820      	ldr	r0, [r4, #0]
24007ee4:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007ee6:	f013 0308 	ands.w	r3, r3, #8
24007eea:	d112      	bne.n	24007f12 <HAL_SD_WriteBlocks+0x19a>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
24007eec:	6b42      	ldr	r2, [r0, #52]	; 0x34
24007eee:	f012 0202 	ands.w	r2, r2, #2
24007ef2:	d11a      	bne.n	24007f2a <HAL_SD_WriteBlocks+0x1b2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
24007ef4:	6b43      	ldr	r3, [r0, #52]	; 0x34
24007ef6:	f013 0310 	ands.w	r3, r3, #16
24007efa:	d021      	beq.n	24007f40 <HAL_SD_WriteBlocks+0x1c8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007efc:	4b14      	ldr	r3, [pc, #80]	; (24007f50 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
24007efe:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007f00:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
24007f02:	6b63      	ldr	r3, [r4, #52]	; 0x34
24007f04:	f043 0310 	orr.w	r3, r3, #16
24007f08:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
24007f0a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
24007f0e:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
24007f10:	e7b0      	b.n	24007e74 <HAL_SD_WriteBlocks+0xfc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007f12:	4b0f      	ldr	r3, [pc, #60]	; (24007f50 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
24007f14:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007f16:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
24007f18:	6b63      	ldr	r3, [r4, #52]	; 0x34
24007f1a:	f043 0308 	orr.w	r3, r3, #8
24007f1e:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
24007f20:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
24007f22:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
24007f26:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
24007f28:	e7a4      	b.n	24007e74 <HAL_SD_WriteBlocks+0xfc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007f2a:	4a09      	ldr	r2, [pc, #36]	; (24007f50 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
24007f2c:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24007f2e:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
24007f30:	6b62      	ldr	r2, [r4, #52]	; 0x34
24007f32:	f042 0202 	orr.w	r2, r2, #2
24007f36:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
24007f38:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
24007f3c:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
24007f3e:	e799      	b.n	24007e74 <HAL_SD_WriteBlocks+0xfc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24007f40:	4904      	ldr	r1, [pc, #16]	; (24007f54 <HAL_SD_WriteBlocks+0x1dc>)
    hsd->State = HAL_SD_STATE_READY;
24007f42:	2201      	movs	r2, #1
    return HAL_OK;
24007f44:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24007f46:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
24007f48:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
24007f4c:	e792      	b.n	24007e74 <HAL_SD_WriteBlocks+0xfc>
24007f4e:	bf00      	nop
24007f50:	1fe00fff 	.word	0x1fe00fff
24007f54:	18000f3a 	.word	0x18000f3a

24007f58 <HAL_SD_ErrorCallback>:
24007f58:	4770      	bx	lr
24007f5a:	bf00      	nop

24007f5c <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
24007f5c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
{
24007f5e:	4603      	mov	r3, r0
24007f60:	b410      	push	{r4}
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
24007f62:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
24007f66:	0f94      	lsrs	r4, r2, #30
24007f68:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
24007f6a:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
24007f6e:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
24007f70:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
24007f74:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
24007f76:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
24007f78:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
24007f7c:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
24007f7e:	7108      	strb	r0, [r1, #4]
  pCSD->Reserved2 = 0U; /*!< Reserved */
24007f80:	2000      	movs	r0, #0
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
24007f82:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
24007f84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
24007f86:	0d14      	lsrs	r4, r2, #20
24007f88:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
24007f8a:	f3c2 4403 	ubfx	r4, r2, #16, #4
24007f8e:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
24007f90:	f3c2 34c0 	ubfx	r4, r2, #15, #1
24007f94:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
24007f96:	f3c2 3480 	ubfx	r4, r2, #14, #1
24007f9a:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
24007f9c:	f3c2 3440 	ubfx	r4, r2, #13, #1
24007fa0:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
24007fa2:	f3c2 3400 	ubfx	r4, r2, #12, #1
24007fa6:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
24007fa8:	7348      	strb	r0, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
24007faa:	6b98      	ldr	r0, [r3, #56]	; 0x38
24007fac:	2800      	cmp	r0, #0
24007fae:	d170      	bne.n	24008092 <HAL_SD_GetCardCSD+0x136>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
24007fb0:	f640 74fc 	movw	r4, #4092	; 0xffc
24007fb4:	6e58      	ldr	r0, [r3, #100]	; 0x64
24007fb6:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
24007fba:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
24007fbe:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
24007fc2:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
24007fc4:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
24007fc8:	750c      	strb	r4, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
24007fca:	f3c0 6402 	ubfx	r4, r0, #24, #3
24007fce:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
24007fd0:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
24007fd4:	758a      	strb	r2, [r1, #22]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
24007fd6:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
24007fda:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
24007fdc:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
24007fde:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
24007fe0:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
24007fe2:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
24007fe4:	f004 0407 	and.w	r4, r4, #7
24007fe8:	3402      	adds	r4, #2
24007fea:	fa02 f404 	lsl.w	r4, r2, r4
24007fee:	649c      	str	r4, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
24007ff0:	7a0a      	ldrb	r2, [r1, #8]
24007ff2:	f002 0c0f 	and.w	ip, r2, #15
24007ff6:	2201      	movs	r2, #1
24007ff8:	fa02 f20c 	lsl.w	r2, r2, ip
24007ffc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
24007ffe:	0a52      	lsrs	r2, r2, #9
24008000:	fb04 f202 	mul.w	r2, r4, r2
    hsd->SdCard.LogBlockSize = 512U;
24008004:	f44f 7400 	mov.w	r4, #512	; 0x200
24008008:	e9c3 2414 	strd	r2, r4, [r3, #80]	; 0x50
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
2400800c:	f3c0 14c6 	ubfx	r4, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
24008010:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
24008014:	f3c0 3c80 	ubfx	ip, r0, #14, #1
  pCSD->Reserved3 = 0;
24008018:	2000      	movs	r0, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400801a:	f881 c019 	strb.w	ip, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
2400801e:	768c      	strb	r4, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
24008020:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
24008022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24008024:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
24008026:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
2400802a:	770c      	strb	r4, [r1, #28]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
2400802c:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
24008030:	774a      	strb	r2, [r1, #29]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
24008032:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
24008036:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
24008038:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
2400803c:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
2400803e:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
24008042:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
24008046:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3 = 0;
2400804a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
2400804e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
24008052:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
24008056:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
2400805a:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
2400805e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
24008062:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
24008066:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
2400806a:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
2400806e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
24008072:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
24008076:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
2400807a:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
2400807e:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->Reserved4 = 1;
24008082:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
24008084:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
24008088:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
2400808c:	f85d 4b04 	ldr.w	r4, [sp], #4
24008090:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
24008092:	2801      	cmp	r0, #1
24008094:	d110      	bne.n	240080b8 <HAL_SD_GetCardCSD+0x15c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
24008096:	0412      	lsls	r2, r2, #16
24008098:	6e58      	ldr	r0, [r3, #100]	; 0x64
    hsd->SdCard.BlockSize = 512U;
2400809a:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400809e:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
240080a2:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
240080a6:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
240080a8:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
240080aa:	64dc      	str	r4, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
240080ac:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
240080ae:	655c      	str	r4, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
240080b0:	0292      	lsls	r2, r2, #10
240080b2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
240080b4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
240080b6:	e7a9      	b.n	2400800c <HAL_SD_GetCardCSD+0xb0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
240080b8:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
240080ba:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
240080bc:	4805      	ldr	r0, [pc, #20]	; (240080d4 <HAL_SD_GetCardCSD+0x178>)
240080be:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
240080c0:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
240080c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240080c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
240080c8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
240080ca:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
240080ce:	f85d 4b04 	ldr.w	r4, [sp], #4
240080d2:	4770      	bx	lr
240080d4:	1fe00fff 	.word	0x1fe00fff

240080d8 <HAL_SD_InitCard>:
{
240080d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
240080da:	2200      	movs	r2, #0
{
240080dc:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
240080de:	2300      	movs	r3, #0
{
240080e0:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
240080e2:	2100      	movs	r1, #0
240080e4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
240080e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
240080ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
240080f0:	f7fe fc20 	bl	24006934 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
240080f4:	b940      	cbnz	r0, 24008108 <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
240080f6:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
240080f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
240080fc:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
24008100:	6363      	str	r3, [r4, #52]	; 0x34
}
24008102:	4630      	mov	r0, r6
24008104:	b015      	add	sp, #84	; 0x54
24008106:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
24008108:	0a06      	lsrs	r6, r0, #8
2400810a:	4b8f      	ldr	r3, [pc, #572]	; (24008348 <HAL_SD_InitCard+0x270>)
  (void)SDMMC_Init(hsd->Instance, Init);
2400810c:	aa07      	add	r2, sp, #28
2400810e:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
24008110:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
24008114:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
24008116:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
24008118:	9608      	str	r6, [sp, #32]
2400811a:	e892 0003 	ldmia.w	r2, {r0, r1}
2400811e:	e88d 0003 	stmia.w	sp, {r0, r1}
24008122:	cb0e      	ldmia	r3, {r1, r2, r3}
24008124:	6820      	ldr	r0, [r4, #0]
24008126:	f001 f87d 	bl	24009224 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
2400812a:	6820      	ldr	r0, [r4, #0]
2400812c:	f001 f8a0 	bl	24009270 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
24008130:	4b86      	ldr	r3, [pc, #536]	; (2400834c <HAL_SD_InitCard+0x274>)
24008132:	429d      	cmp	r5, r3
24008134:	d902      	bls.n	2400813c <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
24008136:	0076      	lsls	r6, r6, #1
24008138:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
2400813c:	4884      	ldr	r0, [pc, #528]	; (24008350 <HAL_SD_InitCard+0x278>)
2400813e:	fbb0 f0f5 	udiv	r0, r0, r5
24008142:	3001      	adds	r0, #1
24008144:	f7fa fbd4 	bl	240028f0 <HAL_Delay>
  __IO uint32_t count = 0U;
24008148:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400814a:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
2400814c:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400814e:	f001 fda3 	bl	24009c98 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
24008152:	4605      	mov	r5, r0
24008154:	b140      	cbz	r0, 24008168 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
24008156:	2601      	movs	r6, #1
24008158:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
2400815c:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400815e:	6b63      	ldr	r3, [r4, #52]	; 0x34
24008160:	431d      	orrs	r5, r3
24008162:	6365      	str	r5, [r4, #52]	; 0x34
}
24008164:	b015      	add	sp, #84	; 0x54
24008166:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
24008168:	6820      	ldr	r0, [r4, #0]
2400816a:	f001 fdc1 	bl	24009cf0 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
2400816e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
24008172:	d06c      	beq.n	2400824e <HAL_SD_InitCard+0x176>
    hsd->SdCard.CardVersion = CARD_V2_X;
24008174:	2301      	movs	r3, #1
24008176:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
24008178:	2100      	movs	r1, #0
2400817a:	6820      	ldr	r0, [r4, #0]
2400817c:	f001 fdf8 	bl	24009d70 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
24008180:	bb08      	cbnz	r0, 240081c6 <HAL_SD_InitCard+0xee>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
24008182:	9b03      	ldr	r3, [sp, #12]
24008184:	f64f 76fe 	movw	r6, #65534	; 0xfffe
24008188:	42b3      	cmp	r3, r6
2400818a:	f200 80d6 	bhi.w	2400833a <HAL_SD_InitCard+0x262>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400818e:	4f71      	ldr	r7, [pc, #452]	; (24008354 <HAL_SD_InitCard+0x27c>)
24008190:	e00b      	b.n	240081aa <HAL_SD_InitCard+0xd2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
24008192:	6820      	ldr	r0, [r4, #0]
24008194:	f001 f878 	bl	24009288 <SDMMC_GetResponse>
    count++;
24008198:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400819a:	2800      	cmp	r0, #0
    count++;
2400819c:	f103 0301 	add.w	r3, r3, #1
240081a0:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
240081a2:	9b03      	ldr	r3, [sp, #12]
240081a4:	db12      	blt.n	240081cc <HAL_SD_InitCard+0xf4>
240081a6:	42b3      	cmp	r3, r6
240081a8:	d810      	bhi.n	240081cc <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
240081aa:	2100      	movs	r1, #0
240081ac:	6820      	ldr	r0, [r4, #0]
240081ae:	f001 fddf 	bl	24009d70 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
240081b2:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
240081b4:	4605      	mov	r5, r0
240081b6:	2800      	cmp	r0, #0
240081b8:	d1cd      	bne.n	24008156 <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
240081ba:	6820      	ldr	r0, [r4, #0]
240081bc:	f001 fe7e 	bl	24009ebc <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
240081c0:	4601      	mov	r1, r0
240081c2:	2800      	cmp	r0, #0
240081c4:	d0e5      	beq.n	24008192 <HAL_SD_InitCard+0xba>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
240081c6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
240081ca:	e7c4      	b.n	24008156 <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
240081cc:	9a03      	ldr	r2, [sp, #12]
240081ce:	f64f 73fe 	movw	r3, #65534	; 0xfffe
240081d2:	429a      	cmp	r2, r3
240081d4:	f200 80ab 	bhi.w	2400832e <HAL_SD_InitCard+0x256>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
240081d8:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
240081dc:	d043      	beq.n	24008266 <HAL_SD_InitCard+0x18e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
240081de:	2301      	movs	r3, #1
240081e0:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
240081e2:	2300      	movs	r3, #0
240081e4:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
240081e8:	f7fa fb7c 	bl	240028e4 <HAL_GetTick>
240081ec:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
240081ee:	6820      	ldr	r0, [r4, #0]
240081f0:	f001 f846 	bl	24009280 <SDMMC_GetPowerState>
240081f4:	2800      	cmp	r0, #0
240081f6:	d038      	beq.n	2400826a <HAL_SD_InitCard+0x192>
  if (hsd->SdCard.CardType != CARD_SECURED)
240081f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
240081fa:	2b03      	cmp	r3, #3
240081fc:	d140      	bne.n	24008280 <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
240081fe:	2104      	movs	r1, #4
24008200:	6820      	ldr	r0, [r4, #0]
24008202:	f001 f841 	bl	24009288 <SDMMC_GetResponse>
24008206:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
24008208:	a909      	add	r1, sp, #36	; 0x24
2400820a:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400820c:	0d1b      	lsrs	r3, r3, #20
2400820e:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
24008210:	f7ff fea4 	bl	24007f5c <HAL_SD_GetCardCSD>
24008214:	4606      	mov	r6, r0
24008216:	2800      	cmp	r0, #0
24008218:	f040 808c 	bne.w	24008334 <HAL_SD_InitCard+0x25c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
2400821c:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400821e:	6820      	ldr	r0, [r4, #0]
24008220:	0409      	lsls	r1, r1, #16
24008222:	f001 fc93 	bl	24009b4c <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
24008226:	bb10      	cbnz	r0, 2400826e <HAL_SD_InitCard+0x196>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
24008228:	f44f 7100 	mov.w	r1, #512	; 0x200
2400822c:	6820      	ldr	r0, [r4, #0]
2400822e:	f001 f845 	bl	240092bc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
24008232:	2800      	cmp	r0, #0
24008234:	f43f af65 	beq.w	24008102 <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24008238:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
2400823a:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400823c:	4946      	ldr	r1, [pc, #280]	; (24008358 <HAL_SD_InitCard+0x280>)
    return HAL_ERROR;
2400823e:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24008240:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
24008242:	6b62      	ldr	r2, [r4, #52]	; 0x34
24008244:	4310      	orrs	r0, r2
24008246:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
24008248:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
2400824c:	e759      	b.n	24008102 <HAL_SD_InitCard+0x2a>
    hsd->SdCard.CardVersion = CARD_V1_X;
2400824e:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
24008250:	6820      	ldr	r0, [r4, #0]
24008252:	f001 fd21 	bl	24009c98 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
24008256:	4605      	mov	r5, r0
24008258:	2800      	cmp	r0, #0
2400825a:	f47f af7c 	bne.w	24008156 <HAL_SD_InitCard+0x7e>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
2400825e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24008260:	2b01      	cmp	r3, #1
24008262:	d18e      	bne.n	24008182 <HAL_SD_InitCard+0xaa>
24008264:	e788      	b.n	24008178 <HAL_SD_InitCard+0xa0>
  hsd->SdCard.CardType = CARD_SDSC;
24008266:	63a0      	str	r0, [r4, #56]	; 0x38
24008268:	e7bb      	b.n	240081e2 <HAL_SD_InitCard+0x10a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400826a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
2400826e:	2601      	movs	r6, #1
24008270:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
24008274:	6b63      	ldr	r3, [r4, #52]	; 0x34
24008276:	4318      	orrs	r0, r3
24008278:	6360      	str	r0, [r4, #52]	; 0x34
}
2400827a:	4630      	mov	r0, r6
2400827c:	b015      	add	sp, #84	; 0x54
2400827e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
24008280:	6820      	ldr	r0, [r4, #0]
24008282:	f001 ffa3 	bl	2400a1cc <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
24008286:	2800      	cmp	r0, #0
24008288:	d1f1      	bne.n	2400826e <HAL_SD_InitCard+0x196>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400828a:	4601      	mov	r1, r0
2400828c:	6820      	ldr	r0, [r4, #0]
2400828e:	f000 fffb 	bl	24009288 <SDMMC_GetResponse>
24008292:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
24008294:	2104      	movs	r1, #4
24008296:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
24008298:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400829a:	f000 fff5 	bl	24009288 <SDMMC_GetResponse>
2400829e:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
240082a0:	2108      	movs	r1, #8
240082a2:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
240082a4:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
240082a6:	f000 ffef 	bl	24009288 <SDMMC_GetResponse>
240082aa:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
240082ac:	210c      	movs	r1, #12
240082ae:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
240082b0:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
240082b2:	f000 ffe9 	bl	24009288 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
240082b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
240082b8:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
240082ba:	2b03      	cmp	r3, #3
240082bc:	d09f      	beq.n	240081fe <HAL_SD_InitCard+0x126>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
240082be:	f241 3687 	movw	r6, #4999	; 0x1387
240082c2:	e009      	b.n	240082d8 <HAL_SD_InitCard+0x200>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
240082c4:	6820      	ldr	r0, [r4, #0]
240082c6:	f001 ffff 	bl	2400a2c8 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
240082ca:	2800      	cmp	r0, #0
240082cc:	d1cf      	bne.n	2400826e <HAL_SD_InitCard+0x196>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
240082ce:	f7fa fb09 	bl	240028e4 <HAL_GetTick>
240082d2:	1b43      	subs	r3, r0, r5
240082d4:	42b3      	cmp	r3, r6
240082d6:	d827      	bhi.n	24008328 <HAL_SD_InitCard+0x250>
    while (sd_rca == 0U)
240082d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
240082dc:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
240082e0:	2b00      	cmp	r3, #0
240082e2:	d0ef      	beq.n	240082c4 <HAL_SD_InitCard+0x1ec>
  if (hsd->SdCard.CardType != CARD_SECURED)
240082e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
240082e6:	2a03      	cmp	r2, #3
240082e8:	d089      	beq.n	240081fe <HAL_SD_InitCard+0x126>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
240082ea:	0419      	lsls	r1, r3, #16
240082ec:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
240082ee:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
240082f0:	f001 ffaa 	bl	2400a248 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
240082f4:	2800      	cmp	r0, #0
240082f6:	d1ba      	bne.n	2400826e <HAL_SD_InitCard+0x196>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
240082f8:	4601      	mov	r1, r0
240082fa:	6820      	ldr	r0, [r4, #0]
240082fc:	f000 ffc4 	bl	24009288 <SDMMC_GetResponse>
24008300:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
24008302:	2104      	movs	r1, #4
24008304:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
24008306:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
24008308:	f000 ffbe 	bl	24009288 <SDMMC_GetResponse>
2400830c:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400830e:	2108      	movs	r1, #8
24008310:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
24008312:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
24008314:	f000 ffb8 	bl	24009288 <SDMMC_GetResponse>
24008318:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400831a:	210c      	movs	r1, #12
2400831c:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400831e:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
24008320:	f000 ffb2 	bl	24009288 <SDMMC_GetResponse>
24008324:	66a0      	str	r0, [r4, #104]	; 0x68
24008326:	e76a      	b.n	240081fe <HAL_SD_InitCard+0x126>
        return HAL_SD_ERROR_TIMEOUT;
24008328:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
2400832c:	e79f      	b.n	2400826e <HAL_SD_InitCard+0x196>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
2400832e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
24008332:	e710      	b.n	24008156 <HAL_SD_InitCard+0x7e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
24008334:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
24008338:	e799      	b.n	2400826e <HAL_SD_InitCard+0x196>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400833a:	9b03      	ldr	r3, [sp, #12]
2400833c:	42b3      	cmp	r3, r6
2400833e:	d8f6      	bhi.n	2400832e <HAL_SD_InitCard+0x256>
  hsd->SdCard.CardType = CARD_SDSC;
24008340:	2300      	movs	r3, #0
24008342:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
24008344:	e74d      	b.n	240081e2 <HAL_SD_InitCard+0x10a>
24008346:	bf00      	nop
24008348:	014f8b59 	.word	0x014f8b59
2400834c:	000c34ff 	.word	0x000c34ff
24008350:	00012110 	.word	0x00012110
24008354:	c1100000 	.word	0xc1100000
24008358:	1fe00fff 	.word	0x1fe00fff

2400835c <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400835c:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
2400835e:	b4f0      	push	{r4, r5, r6, r7}
24008360:	e9d0 c70f 	ldrd	ip, r7, [r0, #60]	; 0x3c
24008364:	e9d0 6511 	ldrd	r6, r5, [r0, #68]	; 0x44
24008368:	e9d0 4213 	ldrd	r4, r2, [r0, #76]	; 0x4c
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400836c:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400836e:	61cb      	str	r3, [r1, #28]
24008370:	6008      	str	r0, [r1, #0]
}
24008372:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
24008374:	e9c1 c701 	strd	ip, r7, [r1, #4]
24008378:	e9c1 6503 	strd	r6, r5, [r1, #12]
2400837c:	e9c1 4205 	strd	r4, r2, [r1, #20]
}
24008380:	bcf0      	pop	{r4, r5, r6, r7}
24008382:	4770      	bx	lr

24008384 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
24008384:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
24008386:	6b83      	ldr	r3, [r0, #56]	; 0x38
24008388:	4293      	cmp	r3, r2
{
2400838a:	b530      	push	{r4, r5, lr}
2400838c:	4604      	mov	r4, r0
2400838e:	b089      	sub	sp, #36	; 0x24
24008390:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
24008392:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
24008396:	d034      	beq.n	24008402 <HAL_SD_ConfigWideBusOperation+0x7e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
24008398:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
2400839c:	d031      	beq.n	24008402 <HAL_SD_ConfigWideBusOperation+0x7e>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
2400839e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
240083a2:	f000 8086 	beq.w	240084b2 <HAL_SD_ConfigWideBusOperation+0x12e>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
240083a6:	2900      	cmp	r1, #0
240083a8:	d064      	beq.n	24008474 <HAL_SD_ConfigWideBusOperation+0xf0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
240083aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
240083ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
240083b0:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
240083b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
240083b4:	bb63      	cbnz	r3, 24008410 <HAL_SD_ConfigWideBusOperation+0x8c>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
240083b6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
240083ba:	2100      	movs	r1, #0
240083bc:	f7fe faba 	bl	24006934 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
240083c0:	2800      	cmp	r0, #0
240083c2:	d03b      	beq.n	2400843c <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
240083c4:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
240083c6:	4b56      	ldr	r3, [pc, #344]	; (24008520 <HAL_SD_ConfigWideBusOperation+0x19c>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
240083c8:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
240083ca:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
240083cc:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
240083ce:	fba3 5300 	umull	r5, r3, r3, r0
240083d2:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
240083d4:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
240083d6:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
240083da:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
240083dc:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
240083e0:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
240083e2:	d239      	bcs.n	24008458 <HAL_SD_ConfigWideBusOperation+0xd4>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
240083e4:	6da1      	ldr	r1, [r4, #88]	; 0x58
240083e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
240083ea:	d035      	beq.n	24008458 <HAL_SD_ConfigWideBusOperation+0xd4>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
240083ec:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
240083f0:	f000 8081 	beq.w	240084f6 <HAL_SD_ConfigWideBusOperation+0x172>
        if (hsd->Init.ClockDiv == 0U)
240083f4:	bb4a      	cbnz	r2, 2400844a <HAL_SD_ConfigWideBusOperation+0xc6>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
240083f6:	4b4b      	ldr	r3, [pc, #300]	; (24008524 <HAL_SD_ConfigWideBusOperation+0x1a0>)
240083f8:	4298      	cmp	r0, r3
240083fa:	f240 8086 	bls.w	2400850a <HAL_SD_ConfigWideBusOperation+0x186>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
240083fe:	9506      	str	r5, [sp, #24]
24008400:	e02b      	b.n	2400845a <HAL_SD_ConfigWideBusOperation+0xd6>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
24008402:	6b63      	ldr	r3, [r4, #52]	; 0x34
24008404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24008408:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400840a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400840c:	2b00      	cmp	r3, #0
2400840e:	d0d2      	beq.n	240083b6 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24008410:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
24008412:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24008414:	4b44      	ldr	r3, [pc, #272]	; (24008528 <HAL_SD_ConfigWideBusOperation+0x1a4>)
24008416:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
24008418:	f44f 7100 	mov.w	r1, #512	; 0x200
2400841c:	f000 ff4e 	bl	240092bc <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
24008420:	b130      	cbz	r0, 24008430 <HAL_SD_ConfigWideBusOperation+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24008422:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
24008424:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24008426:	4a40      	ldr	r2, [pc, #256]	; (24008528 <HAL_SD_ConfigWideBusOperation+0x1a4>)
24008428:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400842a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400842c:	4318      	orrs	r0, r3
2400842e:	6360      	str	r0, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
24008430:	2301      	movs	r3, #1
}
24008432:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
24008434:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
24008438:	b009      	add	sp, #36	; 0x24
2400843a:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400843c:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400843e:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
24008440:	6820      	ldr	r0, [r4, #0]
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
24008442:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
24008446:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
24008448:	e7e6      	b.n	24008418 <HAL_SD_ConfigWideBusOperation+0x94>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
2400844a:	0053      	lsls	r3, r2, #1
2400844c:	fbb0 f0f3 	udiv	r0, r0, r3
24008450:	4b34      	ldr	r3, [pc, #208]	; (24008524 <HAL_SD_ConfigWideBusOperation+0x1a0>)
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
24008452:	4298      	cmp	r0, r3
24008454:	bf88      	it	hi
24008456:	462a      	movhi	r2, r5
24008458:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
2400845a:	aa05      	add	r2, sp, #20
2400845c:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
2400845e:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
24008460:	e892 0003 	ldmia.w	r2, {r0, r1}
24008464:	e88d 0003 	stmia.w	sp, {r0, r1}
24008468:	cb0e      	ldmia	r3, {r1, r2, r3}
2400846a:	6820      	ldr	r0, [r4, #0]
2400846c:	f000 feda 	bl	24009224 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
24008470:	6820      	ldr	r0, [r4, #0]
24008472:	e7d1      	b.n	24008418 <HAL_SD_ConfigWideBusOperation+0x94>
  uint32_t scr[2U] = {0UL, 0UL};
24008474:	2200      	movs	r2, #0
24008476:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
24008478:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400847a:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400847e:	f000 ff03 	bl	24009288 <SDMMC_GetResponse>
24008482:	0182      	lsls	r2, r0, #6
24008484:	d434      	bmi.n	240084f0 <HAL_SD_ConfigWideBusOperation+0x16c>
  errorstate = SD_FindSCR(hsd, scr);
24008486:	a902      	add	r1, sp, #8
24008488:	4620      	mov	r0, r4
2400848a:	f7ff fa13 	bl	240078b4 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400848e:	b960      	cbnz	r0, 240084aa <HAL_SD_ConfigWideBusOperation+0x126>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
24008490:	9b03      	ldr	r3, [sp, #12]
24008492:	03db      	lsls	r3, r3, #15
24008494:	d536      	bpl.n	24008504 <HAL_SD_ConfigWideBusOperation+0x180>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
24008496:	6c61      	ldr	r1, [r4, #68]	; 0x44
24008498:	6820      	ldr	r0, [r4, #0]
2400849a:	0409      	lsls	r1, r1, #16
2400849c:	f001 fc68 	bl	24009d70 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
240084a0:	b918      	cbnz	r0, 240084aa <HAL_SD_ConfigWideBusOperation+0x126>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
240084a2:	4601      	mov	r1, r0
240084a4:	6820      	ldr	r0, [r4, #0]
240084a6:	f001 fd43 	bl	24009f30 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
240084aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
240084ac:	4318      	orrs	r0, r3
240084ae:	6360      	str	r0, [r4, #52]	; 0x34
240084b0:	e7ab      	b.n	2400840a <HAL_SD_ConfigWideBusOperation+0x86>
  uint32_t scr[2U] = {0UL, 0UL};
240084b2:	2200      	movs	r2, #0
240084b4:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
240084b6:	2100      	movs	r1, #0
240084b8:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
240084ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
240084be:	f000 fee3 	bl	24009288 <SDMMC_GetResponse>
240084c2:	0180      	lsls	r0, r0, #6
240084c4:	d414      	bmi.n	240084f0 <HAL_SD_ConfigWideBusOperation+0x16c>
  errorstate = SD_FindSCR(hsd, scr);
240084c6:	a902      	add	r1, sp, #8
240084c8:	4620      	mov	r0, r4
240084ca:	f7ff f9f3 	bl	240078b4 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
240084ce:	2800      	cmp	r0, #0
240084d0:	d1eb      	bne.n	240084aa <HAL_SD_ConfigWideBusOperation+0x126>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
240084d2:	9b03      	ldr	r3, [sp, #12]
240084d4:	0359      	lsls	r1, r3, #13
240084d6:	d515      	bpl.n	24008504 <HAL_SD_ConfigWideBusOperation+0x180>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
240084d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
240084da:	6820      	ldr	r0, [r4, #0]
240084dc:	0409      	lsls	r1, r1, #16
240084de:	f001 fc47 	bl	24009d70 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
240084e2:	2800      	cmp	r0, #0
240084e4:	d1e1      	bne.n	240084aa <HAL_SD_ConfigWideBusOperation+0x126>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
240084e6:	2102      	movs	r1, #2
240084e8:	6820      	ldr	r0, [r4, #0]
240084ea:	f001 fd21 	bl	24009f30 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
240084ee:	e7dc      	b.n	240084aa <HAL_SD_ConfigWideBusOperation+0x126>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
240084f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
240084f4:	e7d9      	b.n	240084aa <HAL_SD_ConfigWideBusOperation+0x126>
        if (hsd->Init.ClockDiv == 0U)
240084f6:	b95a      	cbnz	r2, 24008510 <HAL_SD_ConfigWideBusOperation+0x18c>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
240084f8:	4a0c      	ldr	r2, [pc, #48]	; (2400852c <HAL_SD_ConfigWideBusOperation+0x1a8>)
240084fa:	4290      	cmp	r0, r2
240084fc:	d905      	bls.n	2400850a <HAL_SD_ConfigWideBusOperation+0x186>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
240084fe:	0e5b      	lsrs	r3, r3, #25
24008500:	9306      	str	r3, [sp, #24]
24008502:	e7aa      	b.n	2400845a <HAL_SD_ConfigWideBusOperation+0xd6>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
24008504:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
24008508:	e7cf      	b.n	240084aa <HAL_SD_ConfigWideBusOperation+0x126>
            Init.ClockDiv = hsd->Init.ClockDiv;
2400850a:	2300      	movs	r3, #0
2400850c:	9306      	str	r3, [sp, #24]
2400850e:	e7a4      	b.n	2400845a <HAL_SD_ConfigWideBusOperation+0xd6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
24008510:	0051      	lsls	r1, r2, #1
24008512:	fbb0 f0f1 	udiv	r0, r0, r1
24008516:	4905      	ldr	r1, [pc, #20]	; (2400852c <HAL_SD_ConfigWideBusOperation+0x1a8>)
24008518:	4288      	cmp	r0, r1
2400851a:	d99d      	bls.n	24008458 <HAL_SD_ConfigWideBusOperation+0xd4>
2400851c:	e7ef      	b.n	240084fe <HAL_SD_ConfigWideBusOperation+0x17a>
2400851e:	bf00      	nop
24008520:	55e63b89 	.word	0x55e63b89
24008524:	017d7840 	.word	0x017d7840
24008528:	1fe00fff 	.word	0x1fe00fff
2400852c:	02faf080 	.word	0x02faf080

24008530 <HAL_SD_Init>:
{
24008530:	b5f0      	push	{r4, r5, r6, r7, lr}
24008532:	b087      	sub	sp, #28
  if (hsd == NULL)
24008534:	2800      	cmp	r0, #0
24008536:	d044      	beq.n	240085c2 <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_RESET)
24008538:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
2400853c:	4604      	mov	r4, r0
2400853e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24008542:	2b00      	cmp	r3, #0
24008544:	d041      	beq.n	240085ca <HAL_SD_Init+0x9a>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
24008546:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
24008548:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400854a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400854e:	f7ff fdc3 	bl	240080d8 <HAL_SD_InitCard>
24008552:	2800      	cmp	r0, #0
24008554:	d135      	bne.n	240085c2 <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_BUSY)
24008556:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400855a:	2b03      	cmp	r3, #3
2400855c:	d031      	beq.n	240085c2 <HAL_SD_Init+0x92>
2400855e:	a901      	add	r1, sp, #4
24008560:	4620      	mov	r0, r4
24008562:	f7ff fa19 	bl	24007998 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
24008566:	bb60      	cbnz	r0, 240085c2 <HAL_SD_Init+0x92>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
24008568:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
2400856a:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400856e:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
24008570:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
24008574:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
24008576:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
24008578:	d02b      	beq.n	240085d2 <HAL_SD_Init+0xa2>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
2400857a:	65a0      	str	r0, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400857c:	68e1      	ldr	r1, [r4, #12]
2400857e:	4620      	mov	r0, r4
24008580:	f7ff ff00 	bl	24008384 <HAL_SD_ConfigWideBusOperation>
24008584:	4606      	mov	r6, r0
24008586:	b9e0      	cbnz	r0, 240085c2 <HAL_SD_Init+0x92>
  tickstart = HAL_GetTick();
24008588:	f7fa f9ac 	bl	240028e4 <HAL_GetTick>
2400858c:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400858e:	e00c      	b.n	240085aa <HAL_SD_Init+0x7a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
24008590:	6820      	ldr	r0, [r4, #0]
24008592:	4629      	mov	r1, r5
24008594:	f000 fe78 	bl	24009288 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
24008598:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400859c:	2804      	cmp	r0, #4
2400859e:	d020      	beq.n	240085e2 <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
240085a0:	f7fa f9a0 	bl	240028e4 <HAL_GetTick>
240085a4:	1bc3      	subs	r3, r0, r7
240085a6:	3301      	adds	r3, #1
240085a8:	d021      	beq.n	240085ee <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
240085aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
240085ac:	6820      	ldr	r0, [r4, #0]
240085ae:	0409      	lsls	r1, r1, #16
240085b0:	f001 fee2 	bl	2400a378 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
240085b4:	4605      	mov	r5, r0
240085b6:	2800      	cmp	r0, #0
240085b8:	d0ea      	beq.n	24008590 <HAL_SD_Init+0x60>
    hsd->ErrorCode |= errorstate;
240085ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
240085bc:	4303      	orrs	r3, r0
240085be:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
240085c0:	e7ee      	b.n	240085a0 <HAL_SD_Init+0x70>
    return HAL_ERROR;
240085c2:	2601      	movs	r6, #1
}
240085c4:	4630      	mov	r0, r6
240085c6:	b007      	add	sp, #28
240085c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
240085ca:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
240085cc:	f7f9 fece 	bl	2400236c <HAL_SD_MspInit>
240085d0:	e7b9      	b.n	24008546 <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
240085d2:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
240085d4:	bf14      	ite	ne
240085d6:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
240085da:	f44f 7380 	moveq.w	r3, #256	; 0x100
240085de:	65a3      	str	r3, [r4, #88]	; 0x58
240085e0:	e7cc      	b.n	2400857c <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
240085e2:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
240085e4:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
240085e6:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
240085e8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
240085ec:	e7ea      	b.n	240085c4 <HAL_SD_Init+0x94>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
240085ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
240085f2:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
240085f4:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
240085f6:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
240085f8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
240085fc:	e7e2      	b.n	240085c4 <HAL_SD_Init+0x94>
240085fe:	bf00      	nop

24008600 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
24008600:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
24008602:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
24008604:	0409      	lsls	r1, r1, #16
{
24008606:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
24008608:	6800      	ldr	r0, [r0, #0]
2400860a:	f001 feb5 	bl	2400a378 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400860e:	4601      	mov	r1, r0
24008610:	b120      	cbz	r0, 2400861c <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
24008612:	6b63      	ldr	r3, [r4, #52]	; 0x34
24008614:	2000      	movs	r0, #0
24008616:	4319      	orrs	r1, r3
24008618:	6361      	str	r1, [r4, #52]	; 0x34
}
2400861a:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400861c:	6820      	ldr	r0, [r4, #0]
2400861e:	f000 fe33 	bl	24009288 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
24008622:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
24008626:	bd10      	pop	{r4, pc}

24008628 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
24008628:	4770      	bx	lr
2400862a:	bf00      	nop

2400862c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
2400862c:	4770      	bx	lr
2400862e:	bf00      	nop

24008630 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
24008630:	4770      	bx	lr
24008632:	bf00      	nop

24008634 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
24008634:	4770      	bx	lr
24008636:	bf00      	nop

24008638 <HAL_SD_IRQHandler>:
{
24008638:	b5f0      	push	{r4, r5, r6, r7, lr}
2400863a:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
2400863c:	6800      	ldr	r0, [r0, #0]
{
2400863e:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
24008640:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
24008642:	6b43      	ldr	r3, [r0, #52]	; 0x34
24008644:	041a      	lsls	r2, r3, #16
24008646:	d52b      	bpl.n	240086a0 <HAL_SD_IRQHandler+0x68>
24008648:	072b      	lsls	r3, r5, #28
2400864a:	f100 80e2 	bmi.w	24008812 <HAL_SD_IRQHandler+0x1da>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
2400864e:	6b43      	ldr	r3, [r0, #52]	; 0x34
24008650:	05db      	lsls	r3, r3, #23
24008652:	d579      	bpl.n	24008748 <HAL_SD_IRQHandler+0x110>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
24008654:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
24008658:	4b9a      	ldr	r3, [pc, #616]	; (240088c4 <HAL_SD_IRQHandler+0x28c>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
2400865a:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
2400865c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
2400865e:	4013      	ands	r3, r2
24008660:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
24008662:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
24008664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24008668:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400866a:	68c3      	ldr	r3, [r0, #12]
2400866c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
24008670:	60c3      	str	r3, [r0, #12]
    else if ((context & SD_CONTEXT_DMA) != 0U)
24008672:	0629      	lsls	r1, r5, #24
24008674:	d512      	bpl.n	2400869c <HAL_SD_IRQHandler+0x64>
      hsd->Instance->DLEN = 0;
24008676:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
24008678:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
2400867c:	6283      	str	r3, [r0, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
2400867e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
24008680:	6503      	str	r3, [r0, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
24008682:	f040 810b 	bne.w	2400889c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
24008686:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
24008688:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
2400868a:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
2400868e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
24008692:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
24008694:	f040 80fe 	bne.w	24008894 <HAL_SD_IRQHandler+0x25c>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
24008698:	07aa      	lsls	r2, r5, #30
2400869a:	d124      	bne.n	240086e6 <HAL_SD_IRQHandler+0xae>
}
2400869c:	b003      	add	sp, #12
2400869e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
240086a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
240086a2:	05df      	lsls	r7, r3, #23
240086a4:	d524      	bpl.n	240086f0 <HAL_SD_IRQHandler+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
240086a6:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
240086aa:	4b86      	ldr	r3, [pc, #536]	; (240088c4 <HAL_SD_IRQHandler+0x28c>)
    if ((context & SD_CONTEXT_IT) != 0U)
240086ac:	072e      	lsls	r6, r5, #28
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
240086ae:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
240086b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
240086b2:	ea03 0302 	and.w	r3, r3, r2
240086b6:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
240086b8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
240086ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
240086be:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
240086c0:	68c3      	ldr	r3, [r0, #12]
240086c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
240086c6:	60c3      	str	r3, [r0, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
240086c8:	d5d3      	bpl.n	24008672 <HAL_SD_IRQHandler+0x3a>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
240086ca:	f015 0f22 	tst.w	r5, #34	; 0x22
240086ce:	f040 80c6 	bne.w	2400885e <HAL_SD_IRQHandler+0x226>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
240086d2:	4b7d      	ldr	r3, [pc, #500]	; (240088c8 <HAL_SD_IRQHandler+0x290>)
      hsd->State = HAL_SD_STATE_READY;
240086d4:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
240086d6:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
240086d8:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
240086da:	07a8      	lsls	r0, r5, #30
      hsd->State = HAL_SD_STATE_READY;
240086dc:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
240086e0:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
240086e2:	f000 80b7 	beq.w	24008854 <HAL_SD_IRQHandler+0x21c>
        HAL_SD_RxCpltCallback(hsd);
240086e6:	4620      	mov	r0, r4
240086e8:	f001 ffe0 	bl	2400a6ac <HAL_SD_RxCpltCallback>
}
240086ec:	b003      	add	sp, #12
240086ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
240086f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
240086f2:	045b      	lsls	r3, r3, #17
240086f4:	d529      	bpl.n	2400874a <HAL_SD_IRQHandler+0x112>
240086f6:	072f      	lsls	r7, r5, #28
240086f8:	d527      	bpl.n	2400874a <HAL_SD_IRQHandler+0x112>
  if (hsd->TxXferSize >= 32U)
240086fa:	6a23      	ldr	r3, [r4, #32]
240086fc:	2b1f      	cmp	r3, #31
240086fe:	d9cd      	bls.n	2400869c <HAL_SD_IRQHandler+0x64>
  tmp = hsd->pTxBuffPtr;
24008700:	69e6      	ldr	r6, [r4, #28]
24008702:	1d37      	adds	r7, r6, #4
24008704:	f106 0524 	add.w	r5, r6, #36	; 0x24
24008708:	e000      	b.n	2400870c <HAL_SD_IRQHandler+0xd4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400870a:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
2400870c:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
24008710:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
24008712:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
24008714:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
24008716:	f817 2c07 	ldrb.w	r2, [r7, #-7]
2400871a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
2400871e:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
24008720:	f817 2c06 	ldrb.w	r2, [r7, #-6]
24008724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
24008728:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
2400872a:	f817 2c05 	ldrb.w	r2, [r7, #-5]
2400872e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24008732:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
24008734:	f000 fd96 	bl	24009264 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
24008738:	42af      	cmp	r7, r5
2400873a:	d1e6      	bne.n	2400870a <HAL_SD_IRQHandler+0xd2>
    hsd->TxXferSize -= 32U;
2400873c:	6a23      	ldr	r3, [r4, #32]
      tmp++;
2400873e:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
24008740:	3b20      	subs	r3, #32
24008742:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
24008746:	e7a9      	b.n	2400869c <HAL_SD_IRQHandler+0x64>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
24008748:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
2400874a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400874c:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
24008750:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
24008752:	d04f      	beq.n	240087f4 <HAL_SD_IRQHandler+0x1bc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
24008754:	079e      	lsls	r6, r3, #30
24008756:	d503      	bpl.n	24008760 <HAL_SD_IRQHandler+0x128>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
24008758:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400875a:	f043 0302 	orr.w	r3, r3, #2
2400875e:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
24008760:	6b43      	ldr	r3, [r0, #52]	; 0x34
24008762:	0719      	lsls	r1, r3, #28
24008764:	d503      	bpl.n	2400876e <HAL_SD_IRQHandler+0x136>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
24008766:	6b63      	ldr	r3, [r4, #52]	; 0x34
24008768:	f043 0308 	orr.w	r3, r3, #8
2400876c:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
2400876e:	6b43      	ldr	r3, [r0, #52]	; 0x34
24008770:	069a      	lsls	r2, r3, #26
24008772:	d503      	bpl.n	2400877c <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
24008774:	6b63      	ldr	r3, [r4, #52]	; 0x34
24008776:	f043 0320 	orr.w	r3, r3, #32
2400877a:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
2400877c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400877e:	06db      	lsls	r3, r3, #27
24008780:	d503      	bpl.n	2400878a <HAL_SD_IRQHandler+0x152>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
24008782:	6b63      	ldr	r3, [r4, #52]	; 0x34
24008784:	f043 0310 	orr.w	r3, r3, #16
24008788:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400878a:	4b4f      	ldr	r3, [pc, #316]	; (240088c8 <HAL_SD_IRQHandler+0x290>)
2400878c:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
2400878e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
24008790:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
24008794:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
24008796:	68c3      	ldr	r3, [r0, #12]
24008798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400879c:	60c3      	str	r3, [r0, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
2400879e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
240087a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
240087a4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
240087a6:	68c3      	ldr	r3, [r0, #12]
240087a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240087ac:	60c3      	str	r3, [r0, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
240087ae:	f001 f8c3 	bl	24009938 <SDMMC_CmdStopTransfer>
240087b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
240087b4:	6823      	ldr	r3, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
240087b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
240087ba:	4310      	orrs	r0, r2
240087bc:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
240087be:	68da      	ldr	r2, [r3, #12]
240087c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
240087c4:	60da      	str	r2, [r3, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
240087c6:	f015 0208 	ands.w	r2, r5, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
240087ca:	6399      	str	r1, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
240087cc:	d14d      	bne.n	2400886a <HAL_SD_IRQHandler+0x232>
    else if ((context & SD_CONTEXT_DMA) != 0U)
240087ce:	062f      	lsls	r7, r5, #24
240087d0:	f57f af64 	bpl.w	2400869c <HAL_SD_IRQHandler+0x64>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
240087d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
240087d6:	2900      	cmp	r1, #0
240087d8:	f43f af60 	beq.w	2400869c <HAL_SD_IRQHandler+0x64>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
240087dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        hsd->State = HAL_SD_STATE_READY;
240087de:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
240087e0:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
240087e2:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
240087e6:	63d9      	str	r1, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
240087e8:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
240087ea:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
240087ee:	f7ff fbb3 	bl	24007f58 <HAL_SD_ErrorCallback>
240087f2:	e753      	b.n	2400869c <HAL_SD_IRQHandler+0x64>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
240087f4:	00de      	lsls	r6, r3, #3
240087f6:	f57f af51 	bpl.w	2400869c <HAL_SD_IRQHandler+0x64>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
240087fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
240087fe:	6383      	str	r3, [r0, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
24008800:	6d03      	ldr	r3, [r0, #80]	; 0x50
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
24008802:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
24008804:	075c      	lsls	r4, r3, #29
24008806:	d439      	bmi.n	2400887c <HAL_SD_IRQHandler+0x244>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
24008808:	06a9      	lsls	r1, r5, #26
2400880a:	d557      	bpl.n	240088bc <HAL_SD_IRQHandler+0x284>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
2400880c:	f7ff ff12 	bl	24008634 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
24008810:	e744      	b.n	2400869c <HAL_SD_IRQHandler+0x64>
  if (hsd->RxXferSize >= 32U)
24008812:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24008814:	2b1f      	cmp	r3, #31
24008816:	f67f af41 	bls.w	2400869c <HAL_SD_IRQHandler+0x64>
  tmp = hsd->pRxBuffPtr;
2400881a:	6a67      	ldr	r7, [r4, #36]	; 0x24
2400881c:	1d3d      	adds	r5, r7, #4
2400881e:	f107 0624 	add.w	r6, r7, #36	; 0x24
24008822:	e000      	b.n	24008826 <HAL_SD_IRQHandler+0x1ee>
      data = SDMMC_ReadFIFO(hsd->Instance);
24008824:	6820      	ldr	r0, [r4, #0]
    for (count = 0U; count < 8U; count++)
24008826:	3504      	adds	r5, #4
      data = SDMMC_ReadFIFO(hsd->Instance);
24008828:	f000 fd18 	bl	2400925c <SDMMC_ReadFIFO>
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
2400882c:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
2400882e:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)(data & 0xFFU);
24008830:	f805 0c08 	strb.w	r0, [r5, #-8]
    for (count = 0U; count < 8U; count++)
24008834:	42ae      	cmp	r6, r5
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
24008836:	ea4f 6010 	mov.w	r0, r0, lsr #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
2400883a:	f805 2c07 	strb.w	r2, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
2400883e:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
24008842:	f805 0c05 	strb.w	r0, [r5, #-5]
    for (count = 0U; count < 8U; count++)
24008846:	d1ed      	bne.n	24008824 <HAL_SD_IRQHandler+0x1ec>
    hsd->RxXferSize -= 32U;
24008848:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp++;
2400884a:	3720      	adds	r7, #32
    hsd->RxXferSize -= 32U;
2400884c:	3b20      	subs	r3, #32
2400884e:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
24008852:	e723      	b.n	2400869c <HAL_SD_IRQHandler+0x64>
        HAL_SD_TxCpltCallback(hsd);
24008854:	4620      	mov	r0, r4
24008856:	f001 ff23 	bl	2400a6a0 <HAL_SD_TxCpltCallback>
}
2400885a:	b003      	add	sp, #12
2400885c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400885e:	f001 f86b 	bl	24009938 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
24008862:	4603      	mov	r3, r0
24008864:	b978      	cbnz	r0, 24008886 <HAL_SD_IRQHandler+0x24e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24008866:	6820      	ldr	r0, [r4, #0]
24008868:	e733      	b.n	240086d2 <HAL_SD_IRQHandler+0x9a>
      hsd->State = HAL_SD_STATE_READY;
2400886a:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
2400886c:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
2400886e:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
24008870:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
24008874:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
24008876:	f7ff fb6f 	bl	24007f58 <HAL_SD_ErrorCallback>
2400887a:	e70f      	b.n	2400869c <HAL_SD_IRQHandler+0x64>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
2400887c:	06aa      	lsls	r2, r5, #26
2400887e:	d51a      	bpl.n	240088b6 <HAL_SD_IRQHandler+0x27e>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
24008880:	f7ff fed6 	bl	24008630 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
24008884:	e70a      	b.n	2400869c <HAL_SD_IRQHandler+0x64>
          hsd->ErrorCode |= errorstate;
24008886:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
24008888:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
2400888a:	4313      	orrs	r3, r2
2400888c:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
2400888e:	f7ff fb63 	bl	24007f58 <HAL_SD_ErrorCallback>
24008892:	e7e8      	b.n	24008866 <HAL_SD_IRQHandler+0x22e>
        HAL_SD_TxCpltCallback(hsd);
24008894:	4620      	mov	r0, r4
24008896:	f001 ff03 	bl	2400a6a0 <HAL_SD_TxCpltCallback>
2400889a:	e6fd      	b.n	24008698 <HAL_SD_IRQHandler+0x60>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400889c:	f001 f84c 	bl	24009938 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
240088a0:	4603      	mov	r3, r0
240088a2:	2800      	cmp	r0, #0
240088a4:	f43f aeef 	beq.w	24008686 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
240088a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
240088aa:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
240088ac:	4313      	orrs	r3, r2
240088ae:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
240088b0:	f7ff fb52 	bl	24007f58 <HAL_SD_ErrorCallback>
240088b4:	e6e7      	b.n	24008686 <HAL_SD_IRQHandler+0x4e>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
240088b6:	f7ff feb7 	bl	24008628 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
240088ba:	e6ef      	b.n	2400869c <HAL_SD_IRQHandler+0x64>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
240088bc:	f7ff feb6 	bl	2400862c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
240088c0:	e6ec      	b.n	2400869c <HAL_SD_IRQHandler+0x64>
240088c2:	bf00      	nop
240088c4:	ffff3ec5 	.word	0xffff3ec5
240088c8:	18000f3a 	.word	0x18000f3a

240088cc <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
240088cc:	b318      	cbz	r0, 24008916 <HAL_SDRAM_Init+0x4a>
{
240088ce:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
240088d0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
240088d4:	4604      	mov	r4, r0
240088d6:	460d      	mov	r5, r1
240088d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
240088dc:	b1b3      	cbz	r3, 2400890c <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
240088de:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
240088e0:	2302      	movs	r3, #2
240088e2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
240088e6:	f851 0b04 	ldr.w	r0, [r1], #4
240088ea:	f000 fc11 	bl	24009110 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
240088ee:	6862      	ldr	r2, [r4, #4]
240088f0:	4629      	mov	r1, r5
240088f2:	6820      	ldr	r0, [r4, #0]
240088f4:	f000 fc4a 	bl	2400918c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
240088f8:	4a08      	ldr	r2, [pc, #32]	; (2400891c <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
240088fa:	2101      	movs	r1, #1

  return HAL_OK;
240088fc:	2000      	movs	r0, #0
  __FMC_ENABLE();
240088fe:	6813      	ldr	r3, [r2, #0]
24008900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
24008904:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
24008906:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
2400890a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
2400890c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
24008910:	f7f8 f99a 	bl	24000c48 <HAL_SDRAM_MspInit>
24008914:	e7e3      	b.n	240088de <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
24008916:	2001      	movs	r0, #1
}
24008918:	4770      	bx	lr
2400891a:	bf00      	nop
2400891c:	52004000 	.word	0x52004000

24008920 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
24008920:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
24008922:	492c      	ldr	r1, [pc, #176]	; (240089d4 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
24008924:	695a      	ldr	r2, [r3, #20]
{
24008926:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
24008928:	699c      	ldr	r4, [r3, #24]
2400892a:	f044 0408 	orr.w	r4, r4, #8
2400892e:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
24008930:	699c      	ldr	r4, [r3, #24]
24008932:	f044 0410 	orr.w	r4, r4, #16
24008936:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
24008938:	681c      	ldr	r4, [r3, #0]
2400893a:	f024 0401 	bic.w	r4, r4, #1
2400893e:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
24008940:	691c      	ldr	r4, [r3, #16]
24008942:	4021      	ands	r1, r4
24008944:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
24008946:	6899      	ldr	r1, [r3, #8]
24008948:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
2400894c:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400894e:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
24008952:	2904      	cmp	r1, #4
24008954:	d001      	beq.n	2400895a <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
24008956:	0691      	lsls	r1, r2, #26
24008958:	d430      	bmi.n	240089bc <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400895a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
2400895e:	2903      	cmp	r1, #3
24008960:	d001      	beq.n	24008966 <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
24008962:	0654      	lsls	r4, r2, #25
24008964:	d41f      	bmi.n	240089a6 <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
24008966:	0591      	lsls	r1, r2, #22
24008968:	d509      	bpl.n	2400897e <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400896a:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
2400896e:	f041 0101 	orr.w	r1, r1, #1
24008972:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
24008976:	6999      	ldr	r1, [r3, #24]
24008978:	f441 7100 	orr.w	r1, r1, #512	; 0x200
2400897c:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400897e:	05d2      	lsls	r2, r2, #23
24008980:	d509      	bpl.n	24008996 <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
24008982:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
24008986:	f042 0208 	orr.w	r2, r2, #8
2400898a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400898e:	699a      	ldr	r2, [r3, #24]
24008990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24008994:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
24008996:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
24008998:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
2400899c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
240089a0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
240089a4:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
240089a6:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
240089aa:	f041 0104 	orr.w	r1, r1, #4
240089ae:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
240089b2:	6999      	ldr	r1, [r3, #24]
240089b4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
240089b8:	6199      	str	r1, [r3, #24]
240089ba:	e7d4      	b.n	24008966 <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
240089bc:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
240089c0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
240089c4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
240089c8:	6999      	ldr	r1, [r3, #24]
240089ca:	f041 0120 	orr.w	r1, r1, #32
240089ce:	6199      	str	r1, [r3, #24]
240089d0:	e7c3      	b.n	2400895a <SPI_CloseTransfer+0x3a>
240089d2:	bf00      	nop
240089d4:	fffffc90 	.word	0xfffffc90

240089d8 <HAL_SPI_Init>:
  if (hspi == NULL)
240089d8:	2800      	cmp	r0, #0
240089da:	f000 80c9 	beq.w	24008b70 <HAL_SPI_Init+0x198>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
240089de:	4a66      	ldr	r2, [pc, #408]	; (24008b78 <HAL_SPI_Init+0x1a0>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
240089e0:	2100      	movs	r1, #0
{
240089e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
240089e6:	6803      	ldr	r3, [r0, #0]
240089e8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
240089ea:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
240089ec:	4293      	cmp	r3, r2
240089ee:	d017      	beq.n	24008a20 <HAL_SPI_Init+0x48>
240089f0:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
240089f4:	4293      	cmp	r3, r2
240089f6:	d013      	beq.n	24008a20 <HAL_SPI_Init+0x48>
240089f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
240089fc:	4293      	cmp	r3, r2
240089fe:	68c2      	ldr	r2, [r0, #12]
24008a00:	f000 80ae 	beq.w	24008b60 <HAL_SPI_Init+0x188>
24008a04:	2a0f      	cmp	r2, #15
24008a06:	d808      	bhi.n	24008a1a <HAL_SPI_Init+0x42>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
24008a08:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
24008a0a:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
24008a0e:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
24008a10:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
24008a12:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
24008a16:	2908      	cmp	r1, #8
24008a18:	d916      	bls.n	24008a48 <HAL_SPI_Init+0x70>
    return HAL_ERROR;
24008a1a:	2001      	movs	r0, #1
}
24008a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
24008a20:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
24008a22:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
24008a24:	f102 0108 	add.w	r1, r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
24008a28:	4e53      	ldr	r6, [pc, #332]	; (24008b78 <HAL_SPI_Init+0x1a0>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
24008a2a:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
24008a2c:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
24008a2e:	fb05 1101 	mla	r1, r5, r1, r1
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
24008a32:	4d52      	ldr	r5, [pc, #328]	; (24008b7c <HAL_SPI_Init+0x1a4>)
24008a34:	42ab      	cmp	r3, r5
24008a36:	bf18      	it	ne
24008a38:	42b3      	cmpne	r3, r6
24008a3a:	d003      	beq.n	24008a44 <HAL_SPI_Init+0x6c>
24008a3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
24008a40:	42ab      	cmp	r3, r5
24008a42:	d101      	bne.n	24008a48 <HAL_SPI_Init+0x70>
24008a44:	2910      	cmp	r1, #16
24008a46:	d8e8      	bhi.n	24008a1a <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
24008a48:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
24008a4c:	f001 05ff 	and.w	r5, r1, #255	; 0xff
24008a50:	2900      	cmp	r1, #0
24008a52:	d07a      	beq.n	24008b4a <HAL_SPI_Init+0x172>
24008a54:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
24008a58:	2102      	movs	r1, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
24008a5a:	69a7      	ldr	r7, [r4, #24]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
24008a5c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
24008a5e:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
24008a62:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
24008a66:	6819      	ldr	r1, [r3, #0]
24008a68:	f021 0101 	bic.w	r1, r1, #1
24008a6c:	6019      	str	r1, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
24008a6e:	6899      	ldr	r1, [r3, #8]
24008a70:	f401 1cf8 	and.w	ip, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
24008a74:	6861      	ldr	r1, [r4, #4]
24008a76:	d058      	beq.n	24008b2a <HAL_SPI_Init+0x152>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
24008a78:	f411 0980 	ands.w	r9, r1, #4194304	; 0x400000
24008a7c:	d001      	beq.n	24008a82 <HAL_SPI_Init+0xaa>
24008a7e:	2a06      	cmp	r2, #6
24008a80:	d849      	bhi.n	24008b16 <HAL_SPI_Init+0x13e>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
24008a82:	f8d3 e000 	ldr.w	lr, [r3]
24008a86:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
24008a8a:	f8c3 e000 	str.w	lr, [r3]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
24008a8e:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
24008a90:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
24008a94:	4337      	orrs	r7, r6
24008a96:	6a66      	ldr	r6, [r4, #36]	; 0x24
24008a98:	4337      	orrs	r7, r6
24008a9a:	6926      	ldr	r6, [r4, #16]
24008a9c:	4337      	orrs	r7, r6
24008a9e:	6966      	ldr	r6, [r4, #20]
24008aa0:	4337      	orrs	r7, r6
24008aa2:	6a26      	ldr	r6, [r4, #32]
24008aa4:	4337      	orrs	r7, r6
24008aa6:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
24008aa8:	4337      	orrs	r7, r6
24008aaa:	68a6      	ldr	r6, [r4, #8]
24008aac:	4337      	orrs	r7, r6
24008aae:	6ca6      	ldr	r6, [r4, #72]	; 0x48
24008ab0:	4337      	orrs	r7, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
24008ab2:	69e6      	ldr	r6, [r4, #28]
24008ab4:	4332      	orrs	r2, r6
24008ab6:	4310      	orrs	r0, r2
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
24008ab8:	6da2      	ldr	r2, [r4, #88]	; 0x58
24008aba:	433a      	orrs	r2, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
24008abc:	ea40 000c 	orr.w	r0, r0, ip
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
24008ac0:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
24008ac2:	6098      	str	r0, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
24008ac4:	4315      	orrs	r5, r2
24008ac6:	60dd      	str	r5, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
24008ac8:	b9b9      	cbnz	r1, 24008afa <HAL_SPI_Init+0x122>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
24008aca:	689a      	ldr	r2, [r3, #8]
24008acc:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
24008ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
24008ad4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
24008ad6:	689a      	ldr	r2, [r3, #8]
24008ad8:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
24008adc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
24008ae0:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
24008ae2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
24008ae4:	f022 0201 	bic.w	r2, r2, #1
24008ae8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
24008aea:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
24008aec:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
24008aee:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
24008af2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
24008af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
24008afa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
24008afc:	f022 0201 	bic.w	r2, r2, #1
24008b00:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
24008b02:	f1b9 0f00 	cmp.w	r9, #0
24008b06:	d0f0      	beq.n	24008aea <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
24008b08:	68da      	ldr	r2, [r3, #12]
24008b0a:	6d61      	ldr	r1, [r4, #84]	; 0x54
24008b0c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
24008b10:	430a      	orrs	r2, r1
24008b12:	60da      	str	r2, [r3, #12]
24008b14:	e7e9      	b.n	24008aea <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
24008b16:	f8d3 e000 	ldr.w	lr, [r3]
24008b1a:	6d26      	ldr	r6, [r4, #80]	; 0x50
24008b1c:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
24008b20:	ea4e 0e06 	orr.w	lr, lr, r6
24008b24:	f8c3 e000 	str.w	lr, [r3]
24008b28:	e7b1      	b.n	24008a8e <HAL_SPI_Init+0xb6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
24008b2a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
24008b2e:	d006      	beq.n	24008b3e <HAL_SPI_Init+0x166>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
24008b30:	2900      	cmp	r1, #0
24008b32:	d1a1      	bne.n	24008a78 <HAL_SPI_Init+0xa0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
24008b34:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
24008b38:	d002      	beq.n	24008b40 <HAL_SPI_Init+0x168>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
24008b3a:	4689      	mov	r9, r1
24008b3c:	e7a1      	b.n	24008a82 <HAL_SPI_Init+0xaa>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
24008b3e:	b9cd      	cbnz	r5, 24008b74 <HAL_SPI_Init+0x19c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
24008b40:	681e      	ldr	r6, [r3, #0]
24008b42:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
24008b46:	601e      	str	r6, [r3, #0]
24008b48:	e796      	b.n	24008a78 <HAL_SPI_Init+0xa0>
    HAL_SPI_MspInit(hspi);
24008b4a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
24008b4c:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
24008b50:	f7f9 fc9a 	bl	24002488 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
24008b54:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
24008b56:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
24008b58:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
24008b5c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24008b5e:	e77b      	b.n	24008a58 <HAL_SPI_Init+0x80>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
24008b60:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
24008b62:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
24008b66:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
24008b68:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
24008b6a:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
24008b6e:	e769      	b.n	24008a44 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
24008b70:	2001      	movs	r0, #1
}
24008b72:	4770      	bx	lr
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
24008b74:	4689      	mov	r9, r1
24008b76:	e782      	b.n	24008a7e <HAL_SPI_Init+0xa6>
24008b78:	40013000 	.word	0x40013000
24008b7c:	40003800 	.word	0x40003800

24008b80 <HAL_SPI_TransmitReceive_DMA>:
{
24008b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
24008b84:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
24008b86:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
24008b8a:	2b01      	cmp	r3, #1
24008b8c:	f000 8084 	beq.w	24008c98 <HAL_SPI_TransmitReceive_DMA+0x118>
24008b90:	2301      	movs	r3, #1
24008b92:	4604      	mov	r4, r0
24008b94:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
24008b98:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
24008b9c:	2b01      	cmp	r3, #1
24008b9e:	b2de      	uxtb	r6, r3
24008ba0:	d151      	bne.n	24008c46 <HAL_SPI_TransmitReceive_DMA+0xc6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
24008ba2:	2d00      	cmp	r5, #0
24008ba4:	bf18      	it	ne
24008ba6:	2a00      	cmpne	r2, #0
24008ba8:	d047      	beq.n	24008c3a <HAL_SPI_TransmitReceive_DMA+0xba>
24008baa:	fab1 f381 	clz	r3, r1
24008bae:	095b      	lsrs	r3, r3, #5
24008bb0:	2900      	cmp	r1, #0
24008bb2:	d042      	beq.n	24008c3a <HAL_SPI_TransmitReceive_DMA+0xba>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
24008bb4:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->TxXferSize  = Size;
24008bb6:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  SPI_2LINES(hspi);
24008bba:	6801      	ldr	r1, [r0, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
24008bbc:	6642      	str	r2, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
24008bbe:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxISR       = NULL;
24008bc2:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
24008bc6:	2005      	movs	r0, #5
24008bc8:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
24008bcc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxXferCount = Size;
24008bd0:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->RxXferCount = Size;
24008bd4:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  SPI_2LINES(hspi);
24008bd8:	68cb      	ldr	r3, [r1, #12]
24008bda:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
24008bde:	60cb      	str	r3, [r1, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
24008be0:	688b      	ldr	r3, [r1, #8]
24008be2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
24008be6:	608b      	str	r3, [r1, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
24008be8:	68e3      	ldr	r3, [r4, #12]
24008bea:	2b0f      	cmp	r3, #15
24008bec:	d932      	bls.n	24008c54 <HAL_SPI_TransmitReceive_DMA+0xd4>
24008bee:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
24008bf0:	6983      	ldr	r3, [r0, #24]
24008bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24008bf6:	d120      	bne.n	24008c3a <HAL_SPI_TransmitReceive_DMA+0xba>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
24008bf8:	4f60      	ldr	r7, [pc, #384]	; (24008d7c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
  hspi->hdmarx->XferAbortCallback = NULL;
24008bfa:	f04f 0800 	mov.w	r8, #0
                                 hspi->RxXferCount))
24008bfe:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
24008c02:	3130      	adds	r1, #48	; 0x30
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
24008c04:	6407      	str	r7, [r0, #64]	; 0x40
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
24008c06:	f8df 9180 	ldr.w	r9, [pc, #384]	; 24008d88 <HAL_SPI_TransmitReceive_DMA+0x208>
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
24008c0a:	b29b      	uxth	r3, r3
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
24008c0c:	4f5c      	ldr	r7, [pc, #368]	; (24008d80 <HAL_SPI_TransmitReceive_DMA+0x200>)
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
24008c0e:	f8c0 904c 	str.w	r9, [r0, #76]	; 0x4c
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
24008c12:	63c7      	str	r7, [r0, #60]	; 0x3c
  hspi->hdmarx->XferAbortCallback = NULL;
24008c14:	f8c0 8050 	str.w	r8, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
24008c18:	f7fa fb70 	bl	240032fc <HAL_DMA_Start_IT>
24008c1c:	4607      	mov	r7, r0
24008c1e:	2800      	cmp	r0, #0
24008c20:	d03e      	beq.n	24008ca0 <HAL_SPI_TransmitReceive_DMA+0x120>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
24008c22:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
24008c26:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
24008c28:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
24008c2c:	f043 0310 	orr.w	r3, r3, #16
24008c30:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
24008c34:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
24008c38:	e002      	b.n	24008c40 <HAL_SPI_TransmitReceive_DMA+0xc0>
    __HAL_UNLOCK(hspi);
24008c3a:	2300      	movs	r3, #0
24008c3c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
24008c40:	4630      	mov	r0, r6
24008c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
24008c46:	2300      	movs	r3, #0
    return errorcode;
24008c48:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
24008c4a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
24008c4e:	4630      	mov	r0, r6
24008c50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
24008c54:	2b07      	cmp	r3, #7
24008c56:	d868      	bhi.n	24008d2a <HAL_SPI_TransmitReceive_DMA+0x1aa>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24008c58:	6fa3      	ldr	r3, [r4, #120]	; 0x78
24008c5a:	699b      	ldr	r3, [r3, #24]
24008c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24008c60:	f000 8084 	beq.w	24008d6c <HAL_SPI_TransmitReceive_DMA+0x1ec>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
24008c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24008c68:	d106      	bne.n	24008c78 <HAL_SPI_TransmitReceive_DMA+0xf8>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
24008c6a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
24008c6e:	b29b      	uxth	r3, r3
24008c70:	3303      	adds	r3, #3
24008c72:	089b      	lsrs	r3, r3, #2
24008c74:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24008c78:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
24008c7a:	6983      	ldr	r3, [r0, #24]
24008c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24008c80:	d06c      	beq.n	24008d5c <HAL_SPI_TransmitReceive_DMA+0x1dc>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
24008c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24008c86:	d1b7      	bne.n	24008bf8 <HAL_SPI_TransmitReceive_DMA+0x78>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
24008c88:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
24008c8c:	b29b      	uxth	r3, r3
24008c8e:	3303      	adds	r3, #3
24008c90:	089b      	lsrs	r3, r3, #2
24008c92:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
24008c96:	e7af      	b.n	24008bf8 <HAL_SPI_TransmitReceive_DMA+0x78>
  __HAL_LOCK(hspi);
24008c98:	2602      	movs	r6, #2
}
24008c9a:	4630      	mov	r0, r6
24008c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
24008ca0:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
24008ca2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
24008ca4:	6893      	ldr	r3, [r2, #8]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
24008ca6:	3220      	adds	r2, #32
24008ca8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
24008caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24008cae:	f842 3c18 	str.w	r3, [r2, #-24]
                                 hspi->TxXferCount))
24008cb2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
24008cb6:	f8c0 904c 	str.w	r9, [r0, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
24008cba:	b29b      	uxth	r3, r3
  hspi->hdmatx->XferAbortCallback    = NULL;
24008cbc:	6507      	str	r7, [r0, #80]	; 0x50
  hspi->hdmatx->XferCpltCallback     = NULL;
24008cbe:	e9c0 770f 	strd	r7, r7, [r0, #60]	; 0x3c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
24008cc2:	f7fa fb1b 	bl	240032fc <HAL_DMA_Start_IT>
24008cc6:	bb20      	cbnz	r0, 24008d12 <HAL_SPI_TransmitReceive_DMA+0x192>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
24008cc8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
24008cca:	4a2e      	ldr	r2, [pc, #184]	; (24008d84 <HAL_SPI_TransmitReceive_DMA+0x204>)
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
24008ccc:	69db      	ldr	r3, [r3, #28]
24008cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
24008cd2:	6823      	ldr	r3, [r4, #0]
24008cd4:	6859      	ldr	r1, [r3, #4]
24008cd6:	ea02 0201 	and.w	r2, r2, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
24008cda:	bf18      	it	ne
24008cdc:	432a      	orrne	r2, r5
24008cde:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
24008ce0:	689a      	ldr	r2, [r3, #8]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
24008ce2:	6861      	ldr	r1, [r4, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
24008ce4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  if (hspi->Init.Mode == SPI_MODE_MASTER)
24008ce8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
24008cec:	609a      	str	r2, [r3, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
24008cee:	691a      	ldr	r2, [r3, #16]
24008cf0:	f442 7258 	orr.w	r2, r2, #864	; 0x360
24008cf4:	611a      	str	r2, [r3, #16]
  __HAL_SPI_ENABLE(hspi);
24008cf6:	681a      	ldr	r2, [r3, #0]
24008cf8:	f042 0201 	orr.w	r2, r2, #1
24008cfc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
24008cfe:	d103      	bne.n	24008d08 <HAL_SPI_TransmitReceive_DMA+0x188>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
24008d00:	681a      	ldr	r2, [r3, #0]
24008d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
24008d06:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
24008d08:	2300      	movs	r3, #0
  return errorcode;
24008d0a:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
24008d0c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
24008d10:	e796      	b.n	24008c40 <HAL_SPI_TransmitReceive_DMA+0xc0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
24008d12:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
24008d16:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
24008d18:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
24008d1c:	f043 0310 	orr.w	r3, r3, #16
24008d20:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
24008d24:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
24008d28:	e78a      	b.n	24008c40 <HAL_SPI_TransmitReceive_DMA+0xc0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
24008d2a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
24008d2c:	6983      	ldr	r3, [r0, #24]
24008d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24008d32:	d003      	beq.n	24008d3c <HAL_SPI_TransmitReceive_DMA+0x1bc>
24008d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24008d38:	f47f af7f 	bne.w	24008c3a <HAL_SPI_TransmitReceive_DMA+0xba>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
24008d3c:	6fa7      	ldr	r7, [r4, #120]	; 0x78
24008d3e:	69bf      	ldr	r7, [r7, #24]
24008d40:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
24008d44:	d106      	bne.n	24008d54 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
24008d46:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
24008d4a:	b2bf      	uxth	r7, r7
24008d4c:	3701      	adds	r7, #1
24008d4e:	087f      	lsrs	r7, r7, #1
24008d50:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
24008d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24008d58:	f47f af4e 	bne.w	24008bf8 <HAL_SPI_TransmitReceive_DMA+0x78>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
24008d5c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
24008d60:	b29b      	uxth	r3, r3
24008d62:	3301      	adds	r3, #1
24008d64:	085b      	lsrs	r3, r3, #1
24008d66:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
24008d6a:	e745      	b.n	24008bf8 <HAL_SPI_TransmitReceive_DMA+0x78>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
24008d6c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
24008d70:	b29b      	uxth	r3, r3
24008d72:	3301      	adds	r3, #1
24008d74:	085b      	lsrs	r3, r3, #1
24008d76:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
24008d7a:	e77d      	b.n	24008c78 <HAL_SPI_TransmitReceive_DMA+0xf8>
24008d7c:	24008dbd 	.word	0x24008dbd
24008d80:	24008d95 	.word	0x24008d95
24008d84:	ffff0000 	.word	0xffff0000
24008d88:	24008dcd 	.word	0x24008dcd

24008d8c <HAL_SPI_TxCpltCallback>:
24008d8c:	4770      	bx	lr
24008d8e:	bf00      	nop

24008d90 <HAL_SPI_RxCpltCallback>:
24008d90:	4770      	bx	lr
24008d92:	bf00      	nop

24008d94 <SPI_DMATransmitReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24008d94:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
24008d96:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
24008d98:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
24008d9c:	2b07      	cmp	r3, #7
24008d9e:	d009      	beq.n	24008db4 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
24008da0:	6f83      	ldr	r3, [r0, #120]	; 0x78
24008da2:	69db      	ldr	r3, [r3, #28]
24008da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24008da8:	d005      	beq.n	24008db6 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
24008daa:	6802      	ldr	r2, [r0, #0]
24008dac:	6913      	ldr	r3, [r2, #16]
24008dae:	f043 0308 	orr.w	r3, r3, #8
24008db2:	6113      	str	r3, [r2, #16]
}
24008db4:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
24008db6:	f01f ff5f 	bl	24028c78 <__HAL_SPI_TxRxCpltCallback_veneer>
}
24008dba:	bd08      	pop	{r3, pc}

24008dbc <SPI_DMAHalfTransmitReceiveCplt>:
  HAL_SPI_TxRxHalfCpltCallback(hspi);
24008dbc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
24008dbe:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
24008dc0:	f01f ff42 	bl	24028c48 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
24008dc4:	bd08      	pop	{r3, pc}
24008dc6:	bf00      	nop

24008dc8 <HAL_SPI_ErrorCallback>:
24008dc8:	4770      	bx	lr
24008dca:	bf00      	nop

24008dcc <SPI_DMAError>:
{
24008dcc:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24008dce:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
24008dd0:	f7fb f9be 	bl	24004150 <HAL_DMA_GetError>
24008dd4:	2802      	cmp	r0, #2
24008dd6:	d100      	bne.n	24008dda <SPI_DMAError+0xe>
}
24008dd8:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
24008dda:	6823      	ldr	r3, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
24008ddc:	4930      	ldr	r1, [pc, #192]	; (24008ea0 <SPI_DMAError+0xd4>)
  uint32_t itflag = hspi->Instance->SR;
24008dde:	695a      	ldr	r2, [r3, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
24008de0:	6998      	ldr	r0, [r3, #24]
24008de2:	f040 0008 	orr.w	r0, r0, #8
24008de6:	6198      	str	r0, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
24008de8:	6998      	ldr	r0, [r3, #24]
24008dea:	f040 0010 	orr.w	r0, r0, #16
24008dee:	6198      	str	r0, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
24008df0:	6818      	ldr	r0, [r3, #0]
24008df2:	f020 0001 	bic.w	r0, r0, #1
24008df6:	6018      	str	r0, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
24008df8:	6918      	ldr	r0, [r3, #16]
24008dfa:	4001      	ands	r1, r0
24008dfc:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
24008dfe:	6899      	ldr	r1, [r3, #8]
24008e00:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
24008e04:	6099      	str	r1, [r3, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
24008e06:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
24008e0a:	2904      	cmp	r1, #4
24008e0c:	d001      	beq.n	24008e12 <SPI_DMAError+0x46>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
24008e0e:	0691      	lsls	r1, r2, #26
24008e10:	d43a      	bmi.n	24008e88 <SPI_DMAError+0xbc>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
24008e12:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
24008e16:	2903      	cmp	r1, #3
24008e18:	d001      	beq.n	24008e1e <SPI_DMAError+0x52>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
24008e1a:	0650      	lsls	r0, r2, #25
24008e1c:	d429      	bmi.n	24008e72 <SPI_DMAError+0xa6>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
24008e1e:	0591      	lsls	r1, r2, #22
24008e20:	d509      	bpl.n	24008e36 <SPI_DMAError+0x6a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
24008e22:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
24008e26:	f041 0101 	orr.w	r1, r1, #1
24008e2a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
24008e2e:	6999      	ldr	r1, [r3, #24]
24008e30:	f441 7100 	orr.w	r1, r1, #512	; 0x200
24008e34:	6199      	str	r1, [r3, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
24008e36:	05d2      	lsls	r2, r2, #23
24008e38:	d509      	bpl.n	24008e4e <SPI_DMAError+0x82>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
24008e3a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
24008e3e:	f042 0208 	orr.w	r2, r2, #8
24008e42:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
24008e46:	699a      	ldr	r2, [r3, #24]
24008e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24008e4c:	619a      	str	r2, [r3, #24]
  hspi->TxXferCount = (uint16_t)0UL;
24008e4e:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
24008e50:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
24008e52:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
24008e54:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
24008e58:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
24008e5c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
24008e60:	f043 0310 	orr.w	r3, r3, #16
24008e64:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
24008e68:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
24008e6c:	f7ff ffac 	bl	24008dc8 <HAL_SPI_ErrorCallback>
}
24008e70:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
24008e72:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
24008e76:	f041 0104 	orr.w	r1, r1, #4
24008e7a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
24008e7e:	6999      	ldr	r1, [r3, #24]
24008e80:	f041 0140 	orr.w	r1, r1, #64	; 0x40
24008e84:	6199      	str	r1, [r3, #24]
24008e86:	e7ca      	b.n	24008e1e <SPI_DMAError+0x52>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
24008e88:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
24008e8c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
24008e90:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
24008e94:	6999      	ldr	r1, [r3, #24]
24008e96:	f041 0120 	orr.w	r1, r1, #32
24008e9a:	6199      	str	r1, [r3, #24]
24008e9c:	e7b9      	b.n	24008e12 <SPI_DMAError+0x46>
24008e9e:	bf00      	nop
24008ea0:	fffffc90 	.word	0xfffffc90

24008ea4 <SPI_DMAAbortOnError>:
{
24008ea4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24008ea6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
24008ea8:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
24008eaa:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
24008eac:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
24008eb0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
24008eb4:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
24008eb8:	f7ff ff86 	bl	24008dc8 <HAL_SPI_ErrorCallback>
}
24008ebc:	bd08      	pop	{r3, pc}
24008ebe:	bf00      	nop

24008ec0 <HAL_SPI_SuspendCallback>:
24008ec0:	4770      	bx	lr
24008ec2:	bf00      	nop

24008ec4 <HAL_SPI_IRQHandler>:
{
24008ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itsource = hspi->Instance->IER;
24008ec8:	6807      	ldr	r7, [r0, #0]
{
24008eca:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
24008ecc:	693a      	ldr	r2, [r7, #16]
  uint32_t itflag   = hspi->Instance->SR;
24008ece:	697b      	ldr	r3, [r7, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
24008ed0:	f8d7 9008 	ldr.w	r9, [r7, #8]
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
24008ed4:	0519      	lsls	r1, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
24008ed6:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  uint32_t trigger  = itsource & itflag;
24008eda:	ea02 0503 	and.w	r5, r2, r3
  HAL_SPI_StateTypeDef State = hspi->State;
24008ede:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
24008ee0:	d502      	bpl.n	24008ee8 <HAL_SPI_IRQHandler+0x24>
24008ee2:	0713      	lsls	r3, r2, #28
24008ee4:	f100 8088 	bmi.w	24008ff8 <HAL_SPI_IRQHandler+0x134>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
24008ee8:	f005 0364 	and.w	r3, r5, #100	; 0x64
24008eec:	2b04      	cmp	r3, #4
24008eee:	d07b      	beq.n	24008fe8 <HAL_SPI_IRQHandler+0x124>
  uint32_t handled  = 0UL;
24008ef0:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
24008ef2:	f005 0845 	and.w	r8, r5, #69	; 0x45
24008ef6:	f1b8 0f01 	cmp.w	r8, #1
24008efa:	d103      	bne.n	24008f04 <HAL_SPI_IRQHandler+0x40>
    hspi->RxISR(hspi);
24008efc:	6f23      	ldr	r3, [r4, #112]	; 0x70
24008efe:	4620      	mov	r0, r4
24008f00:	4798      	blx	r3
    handled = 1UL;
24008f02:	4643      	mov	r3, r8
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
24008f04:	f005 0226 	and.w	r2, r5, #38	; 0x26
24008f08:	2a02      	cmp	r2, #2
24008f0a:	d05e      	beq.n	24008fca <HAL_SPI_IRQHandler+0x106>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
24008f0c:	056a      	lsls	r2, r5, #21
24008f0e:	d43d      	bmi.n	24008f8c <HAL_SPI_IRQHandler+0xc8>
  if (handled != 0UL)
24008f10:	2b00      	cmp	r3, #0
24008f12:	d139      	bne.n	24008f88 <HAL_SPI_IRQHandler+0xc4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
24008f14:	072b      	lsls	r3, r5, #28
24008f16:	d534      	bpl.n	24008f82 <HAL_SPI_IRQHandler+0xbe>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
24008f18:	6823      	ldr	r3, [r4, #0]
24008f1a:	699a      	ldr	r2, [r3, #24]
24008f1c:	f042 0208 	orr.w	r2, r2, #8
24008f20:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
24008f22:	699a      	ldr	r2, [r3, #24]
24008f24:	f042 0210 	orr.w	r2, r2, #16
24008f28:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
24008f2a:	699a      	ldr	r2, [r3, #24]
24008f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
24008f30:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
24008f32:	691a      	ldr	r2, [r3, #16]
24008f34:	f022 0208 	bic.w	r2, r2, #8
24008f38:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
24008f3a:	689b      	ldr	r3, [r3, #8]
24008f3c:	f413 4f40 	tst.w	r3, #49152	; 0xc000
24008f40:	d12d      	bne.n	24008f9e <HAL_SPI_IRQHandler+0xda>
      while (hspi->RxXferCount != 0UL)
24008f42:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
24008f46:	b29b      	uxth	r3, r3
24008f48:	b34b      	cbz	r3, 24008f9e <HAL_SPI_IRQHandler+0xda>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
24008f4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
24008f4c:	e00e      	b.n	24008f6c <HAL_SPI_IRQHandler+0xa8>
24008f4e:	6823      	ldr	r3, [r4, #0]
24008f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008f52:	f842 3b04 	str.w	r3, [r2], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
24008f56:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
24008f58:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
24008f5c:	3b01      	subs	r3, #1
24008f5e:	b29b      	uxth	r3, r3
24008f60:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
24008f64:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
24008f68:	b29b      	uxth	r3, r3
24008f6a:	b1c3      	cbz	r3, 24008f9e <HAL_SPI_IRQHandler+0xda>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
24008f6c:	68e3      	ldr	r3, [r4, #12]
24008f6e:	2b0f      	cmp	r3, #15
24008f70:	d8ed      	bhi.n	24008f4e <HAL_SPI_IRQHandler+0x8a>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
24008f72:	2b07      	cmp	r3, #7
24008f74:	f240 80ba 	bls.w	240090ec <HAL_SPI_IRQHandler+0x228>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
24008f78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
24008f7a:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
24008f7e:	6662      	str	r2, [r4, #100]	; 0x64
24008f80:	e7ea      	b.n	24008f58 <HAL_SPI_IRQHandler+0x94>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
24008f82:	f415 7f58 	tst.w	r5, #864	; 0x360
24008f86:	d13f      	bne.n	24009008 <HAL_SPI_IRQHandler+0x144>
}
24008f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
24008f8c:	6821      	ldr	r1, [r4, #0]
    hspi->Reload.Requested = 0UL;
24008f8e:	2200      	movs	r2, #0
24008f90:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
24008f94:	698a      	ldr	r2, [r1, #24]
24008f96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
24008f9a:	618a      	str	r2, [r1, #24]
24008f9c:	e7b8      	b.n	24008f10 <HAL_SPI_IRQHandler+0x4c>
    SPI_CloseTransfer(hspi);
24008f9e:	4620      	mov	r0, r4
24008fa0:	f7ff fcbe 	bl	24008920 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
24008fa4:	2301      	movs	r3, #1
24008fa6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
24008faa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
24008fae:	2b00      	cmp	r3, #0
24008fb0:	f040 8098 	bne.w	240090e4 <HAL_SPI_IRQHandler+0x220>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
24008fb4:	2e05      	cmp	r6, #5
24008fb6:	f000 80a1 	beq.w	240090fc <HAL_SPI_IRQHandler+0x238>
    else if (State == HAL_SPI_STATE_BUSY_RX)
24008fba:	2e04      	cmp	r6, #4
24008fbc:	f000 80a1 	beq.w	24009102 <HAL_SPI_IRQHandler+0x23e>
    else if (State == HAL_SPI_STATE_BUSY_TX)
24008fc0:	2e03      	cmp	r6, #3
24008fc2:	d1e1      	bne.n	24008f88 <HAL_SPI_IRQHandler+0xc4>
      HAL_SPI_TxCpltCallback(hspi);
24008fc4:	f7ff fee2 	bl	24008d8c <HAL_SPI_TxCpltCallback>
24008fc8:	e7de      	b.n	24008f88 <HAL_SPI_IRQHandler+0xc4>
    hspi->TxISR(hspi);
24008fca:	6f63      	ldr	r3, [r4, #116]	; 0x74
24008fcc:	4620      	mov	r0, r4
24008fce:	4798      	blx	r3
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
24008fd0:	0569      	lsls	r1, r5, #21
24008fd2:	d5d9      	bpl.n	24008f88 <HAL_SPI_IRQHandler+0xc4>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
24008fd4:	6822      	ldr	r2, [r4, #0]
    hspi->Reload.Requested = 0UL;
24008fd6:	2100      	movs	r1, #0
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
24008fd8:	6993      	ldr	r3, [r2, #24]
    hspi->Reload.Requested = 0UL;
24008fda:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
24008fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
24008fe2:	6193      	str	r3, [r2, #24]
}
24008fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hspi->TxISR(hspi);
24008fe8:	4620      	mov	r0, r4
24008fea:	6f63      	ldr	r3, [r4, #116]	; 0x74
24008fec:	4798      	blx	r3
    hspi->RxISR(hspi);
24008fee:	6f23      	ldr	r3, [r4, #112]	; 0x70
24008ff0:	4620      	mov	r0, r4
24008ff2:	4798      	blx	r3
    handled = 1UL;
24008ff4:	2301      	movs	r3, #1
24008ff6:	e77c      	b.n	24008ef2 <HAL_SPI_IRQHandler+0x2e>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
24008ff8:	69bb      	ldr	r3, [r7, #24]
24008ffa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
24008ffe:	61bb      	str	r3, [r7, #24]
    HAL_SPI_SuspendCallback(hspi);
24009000:	f7ff ff5e 	bl	24008ec0 <HAL_SPI_SuspendCallback>
}
24009004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((trigger & SPI_FLAG_OVR) != 0UL)
24009008:	0668      	lsls	r0, r5, #25
2400900a:	d50a      	bpl.n	24009022 <HAL_SPI_IRQHandler+0x15e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400900c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
24009010:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
24009012:	f043 0304 	orr.w	r3, r3, #4
24009016:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400901a:	6993      	ldr	r3, [r2, #24]
2400901c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24009020:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
24009022:	05a9      	lsls	r1, r5, #22
24009024:	d50a      	bpl.n	2400903c <HAL_SPI_IRQHandler+0x178>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
24009026:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400902a:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400902c:	f043 0301 	orr.w	r3, r3, #1
24009030:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
24009034:	6993      	ldr	r3, [r2, #24]
24009036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400903a:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
2400903c:	05ea      	lsls	r2, r5, #23
2400903e:	d50a      	bpl.n	24009056 <HAL_SPI_IRQHandler+0x192>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
24009040:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
24009044:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
24009046:	f043 0308 	orr.w	r3, r3, #8
2400904a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400904e:	6993      	ldr	r3, [r2, #24]
24009050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24009054:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
24009056:	06ab      	lsls	r3, r5, #26
24009058:	d50a      	bpl.n	24009070 <HAL_SPI_IRQHandler+0x1ac>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400905a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400905e:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
24009060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24009064:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
24009068:	6993      	ldr	r3, [r2, #24]
2400906a:	f043 0320 	orr.w	r3, r3, #32
2400906e:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
24009070:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
24009074:	2b00      	cmp	r3, #0
24009076:	d087      	beq.n	24008f88 <HAL_SPI_IRQHandler+0xc4>
      __HAL_SPI_DISABLE(hspi);
24009078:	6823      	ldr	r3, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400907a:	f409 4940 	and.w	r9, r9, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
2400907e:	4a22      	ldr	r2, [pc, #136]	; (24009108 <HAL_SPI_IRQHandler+0x244>)
      __HAL_SPI_DISABLE(hspi);
24009080:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
24009082:	f5b9 4f40 	cmp.w	r9, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
24009086:	f021 0101 	bic.w	r1, r1, #1
2400908a:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
2400908c:	6919      	ldr	r1, [r3, #16]
2400908e:	ea02 0201 	and.w	r2, r2, r1
24009092:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
24009094:	d122      	bne.n	240090dc <HAL_SPI_IRQHandler+0x218>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
24009096:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
24009098:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400909a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400909e:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
240090a0:	b150      	cbz	r0, 240090b8 <HAL_SPI_IRQHandler+0x1f4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
240090a2:	4b1a      	ldr	r3, [pc, #104]	; (2400910c <HAL_SPI_IRQHandler+0x248>)
240090a4:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
240090a6:	f7fa fc39 	bl	2400391c <HAL_DMA_Abort_IT>
240090aa:	b128      	cbz	r0, 240090b8 <HAL_SPI_IRQHandler+0x1f4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
240090ac:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
240090b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240090b4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
240090b8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
240090ba:	2800      	cmp	r0, #0
240090bc:	f43f af64 	beq.w	24008f88 <HAL_SPI_IRQHandler+0xc4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
240090c0:	4b12      	ldr	r3, [pc, #72]	; (2400910c <HAL_SPI_IRQHandler+0x248>)
240090c2:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
240090c4:	f7fa fc2a 	bl	2400391c <HAL_DMA_Abort_IT>
240090c8:	2800      	cmp	r0, #0
240090ca:	f43f af5d 	beq.w	24008f88 <HAL_SPI_IRQHandler+0xc4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
240090ce:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
240090d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
240090d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
240090da:	e755      	b.n	24008f88 <HAL_SPI_IRQHandler+0xc4>
        hspi->State = HAL_SPI_STATE_READY;
240090dc:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
240090de:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
240090e0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
240090e4:	f7ff fe70 	bl	24008dc8 <HAL_SPI_ErrorCallback>
}
240090e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
240090ec:	6823      	ldr	r3, [r4, #0]
240090ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
240090f2:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
240090f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
240090f6:	3201      	adds	r2, #1
240090f8:	6662      	str	r2, [r4, #100]	; 0x64
240090fa:	e72d      	b.n	24008f58 <HAL_SPI_IRQHandler+0x94>
      HAL_SPI_TxRxCpltCallback(hspi);
240090fc:	f01f fdbc 	bl	24028c78 <__HAL_SPI_TxRxCpltCallback_veneer>
24009100:	e742      	b.n	24008f88 <HAL_SPI_IRQHandler+0xc4>
      HAL_SPI_RxCpltCallback(hspi);
24009102:	f7ff fe45 	bl	24008d90 <HAL_SPI_RxCpltCallback>
24009106:	e73f      	b.n	24008f88 <HAL_SPI_IRQHandler+0xc4>
24009108:	fffffc94 	.word	0xfffffc94
2400910c:	24008ea5 	.word	0x24008ea5

24009110 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
24009110:	680b      	ldr	r3, [r1, #0]
{
24009112:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
24009114:	b9d3      	cbnz	r3, 2400914c <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
24009116:	6804      	ldr	r4, [r0, #0]
24009118:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
2400911c:	684a      	ldr	r2, [r1, #4]
2400911e:	4023      	ands	r3, r4
24009120:	4313      	orrs	r3, r2
24009122:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
24009126:	4323      	orrs	r3, r4
24009128:	4313      	orrs	r3, r2
2400912a:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
2400912e:	4323      	orrs	r3, r4
24009130:	4313      	orrs	r3, r2
24009132:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
24009136:	4323      	orrs	r3, r4
24009138:	4313      	orrs	r3, r2
2400913a:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
2400913e:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
24009140:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
24009144:	4313      	orrs	r3, r2
24009146:	6003      	str	r3, [r0, #0]
}
24009148:	2000      	movs	r0, #0
2400914a:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400914c:	6802      	ldr	r2, [r0, #0]
2400914e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
24009152:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
24009156:	4322      	orrs	r2, r4
24009158:	6a4c      	ldr	r4, [r1, #36]	; 0x24
2400915a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400915c:	4b0a      	ldr	r3, [pc, #40]	; (24009188 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400915e:	4322      	orrs	r2, r4
24009160:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
24009162:	6842      	ldr	r2, [r0, #4]
24009164:	4013      	ands	r3, r2
24009166:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
2400916a:	4323      	orrs	r3, r4
2400916c:	4313      	orrs	r3, r2
2400916e:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
24009172:	4323      	orrs	r3, r4
24009174:	4313      	orrs	r3, r2
24009176:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
2400917a:	4323      	orrs	r3, r4
}
2400917c:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
24009180:	4313      	orrs	r3, r2
24009182:	6043      	str	r3, [r0, #4]
}
24009184:	2000      	movs	r0, #0
24009186:	4770      	bx	lr
24009188:	ffff8000 	.word	0xffff8000

2400918c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
2400918c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
2400918e:	bb0a      	cbnz	r2, 240091d4 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
24009190:	6883      	ldr	r3, [r0, #8]
24009192:	e9d1 2400 	ldrd	r2, r4, [r1]
24009196:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400919a:	3c01      	subs	r4, #1
2400919c:	3a01      	subs	r2, #1
2400919e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
240091a2:	4313      	orrs	r3, r2
240091a4:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
240091a8:	3a01      	subs	r2, #1
240091aa:	3c01      	subs	r4, #1
240091ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
240091b0:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
240091b4:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
240091b8:	6989      	ldr	r1, [r1, #24]
240091ba:	3b01      	subs	r3, #1
240091bc:	3c01      	subs	r4, #1
240091be:	3901      	subs	r1, #1
240091c0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
240091c4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
240091c8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
240091cc:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
240091ce:	6083      	str	r3, [r0, #8]
}
240091d0:	2000      	movs	r0, #0
240091d2:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
240091d4:	6882      	ldr	r2, [r0, #8]
240091d6:	68cc      	ldr	r4, [r1, #12]
240091d8:	4b11      	ldr	r3, [pc, #68]	; (24009220 <FMC_SDRAM_Timing_Init+0x94>)
240091da:	3c01      	subs	r4, #1
240091dc:	4013      	ands	r3, r2
240091de:	694a      	ldr	r2, [r1, #20]
240091e0:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
240091e4:	1e54      	subs	r4, r2, #1
240091e6:	ea43 5404 	orr.w	r4, r3, r4, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
240091ea:	e9d1 2500 	ldrd	r2, r5, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
240091ee:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
240091f0:	68c3      	ldr	r3, [r0, #12]
240091f2:	1e6c      	subs	r4, r5, #1
240091f4:	3a01      	subs	r2, #1
240091f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
240091fa:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
240091fe:	690c      	ldr	r4, [r1, #16]
24009200:	431a      	orrs	r2, r3
24009202:	688b      	ldr	r3, [r1, #8]
24009204:	3c01      	subs	r4, #1
24009206:	6989      	ldr	r1, [r1, #24]
24009208:	3b01      	subs	r3, #1
2400920a:	3901      	subs	r1, #1
2400920c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
24009210:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
24009214:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
24009218:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
2400921a:	60c3      	str	r3, [r0, #12]
}
2400921c:	2000      	movs	r0, #0
2400921e:	4770      	bx	lr
24009220:	ff0f0fff 	.word	0xff0f0fff

24009224 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
24009224:	b084      	sub	sp, #16
24009226:	b410      	push	{r4}
24009228:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
2400922c:	4614      	mov	r4, r2
{
2400922e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
24009232:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
24009234:	9904      	ldr	r1, [sp, #16]
{
24009236:	4602      	mov	r2, r0
             Init.BusWide             | \
24009238:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
2400923a:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400923c:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
2400923e:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
24009240:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
24009242:	4303      	orrs	r3, r0

  return HAL_OK;
}
24009244:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
24009246:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
24009248:	4903      	ldr	r1, [pc, #12]	; (24009258 <SDMMC_Init+0x34>)
2400924a:	4021      	ands	r1, r4
}
2400924c:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
24009250:	430b      	orrs	r3, r1
}
24009252:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
24009254:	6053      	str	r3, [r2, #4]
}
24009256:	4770      	bx	lr
24009258:	ffc02c00 	.word	0xffc02c00

2400925c <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
2400925c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
24009260:	4770      	bx	lr
24009262:	bf00      	nop

24009264 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
24009264:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
24009266:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
24009268:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
2400926a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
2400926e:	4770      	bx	lr

24009270 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
24009270:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
24009272:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
24009274:	681a      	ldr	r2, [r3, #0]
24009276:	f042 0203 	orr.w	r2, r2, #3
2400927a:	601a      	str	r2, [r3, #0]
}
2400927c:	4770      	bx	lr
2400927e:	bf00      	nop

24009280 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
24009280:	6800      	ldr	r0, [r0, #0]
}
24009282:	f000 0003 	and.w	r0, r0, #3
24009286:	4770      	bx	lr

24009288 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
24009288:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
2400928a:	5840      	ldr	r0, [r0, r1]
}
2400928c:	4770      	bx	lr
2400928e:	bf00      	nop

24009290 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
24009290:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
24009292:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   | \
24009296:	690d      	ldr	r5, [r1, #16]
{
24009298:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
2400929a:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
2400929c:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
2400929e:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
240092a0:	6250      	str	r0, [r2, #36]	; 0x24
                       Data->TransferDir   | \
240092a2:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
240092a4:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
240092a6:	6294      	str	r4, [r2, #40]	; 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
240092a8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferMode  | \
240092aa:	4303      	orrs	r3, r0

  return HAL_OK;

}
240092ac:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
240092ae:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
240092b2:	430b      	orrs	r3, r1
}
240092b4:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
240092b6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
240092b8:	4770      	bx	lr
240092ba:	bf00      	nop

240092bc <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
240092bc:	4a4c      	ldr	r2, [pc, #304]	; (240093f0 <SDMMC_CmdBlockLength+0x134>)
240092be:	4b4d      	ldr	r3, [pc, #308]	; (240093f4 <SDMMC_CmdBlockLength+0x138>)
240092c0:	6812      	ldr	r2, [r2, #0]
{
240092c2:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
240092c4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
240092c8:	4c4b      	ldr	r4, [pc, #300]	; (240093f8 <SDMMC_CmdBlockLength+0x13c>)
  SDMMCx->ARG = Command->Argument;
240092ca:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
240092cc:	f241 1310 	movw	r3, #4368	; 0x1110
240092d0:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
240092d2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
240092d4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
240092d6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
240092da:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
240092dc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
240092e0:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
240092e2:	b14a      	cbz	r2, 240092f8 <SDMMC_CmdBlockLength+0x3c>
240092e4:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
240092e6:	4945      	ldr	r1, [pc, #276]	; (240093fc <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
240092e8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
240092ea:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
240092ec:	420a      	tst	r2, r1
240092ee:	d001      	beq.n	240092f4 <SDMMC_CmdBlockLength+0x38>
240092f0:	0492      	lsls	r2, r2, #18
240092f2:	d507      	bpl.n	24009304 <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
240092f4:	1c5c      	adds	r4, r3, #1
240092f6:	d1f7      	bne.n	240092e8 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
240092f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
240092fc:	4618      	mov	r0, r3
240092fe:	f85d 4b04 	ldr.w	r4, [sp], #4
24009302:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
24009304:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009306:	075c      	lsls	r4, r3, #29
24009308:	d43d      	bmi.n	24009386 <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400930a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400930c:	f013 0301 	ands.w	r3, r3, #1
24009310:	d134      	bne.n	2400937c <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
24009312:	4b3b      	ldr	r3, [pc, #236]	; (24009400 <SDMMC_CmdBlockLength+0x144>)
24009314:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
24009316:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
24009318:	b2db      	uxtb	r3, r3
2400931a:	2b10      	cmp	r3, #16
2400931c:	d131      	bne.n	24009382 <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
2400931e:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
24009320:	4b38      	ldr	r3, [pc, #224]	; (24009404 <SDMMC_CmdBlockLength+0x148>)
24009322:	4013      	ands	r3, r2
24009324:	2b00      	cmp	r3, #0
24009326:	d0e9      	beq.n	240092fc <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
24009328:	2a00      	cmp	r2, #0
2400932a:	db30      	blt.n	2400938e <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400932c:	0051      	lsls	r1, r2, #1
2400932e:	d431      	bmi.n	24009394 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
24009330:	0094      	lsls	r4, r2, #2
24009332:	d431      	bmi.n	24009398 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
24009334:	00d0      	lsls	r0, r2, #3
24009336:	d431      	bmi.n	2400939c <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
24009338:	0111      	lsls	r1, r2, #4
2400933a:	d432      	bmi.n	240093a2 <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400933c:	0154      	lsls	r4, r2, #5
2400933e:	d433      	bmi.n	240093a8 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
24009340:	01d0      	lsls	r0, r2, #7
24009342:	d434      	bmi.n	240093ae <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
24009344:	0211      	lsls	r1, r2, #8
24009346:	d435      	bmi.n	240093b4 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
24009348:	0254      	lsls	r4, r2, #9
2400934a:	d436      	bmi.n	240093ba <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400934c:	0290      	lsls	r0, r2, #10
2400934e:	d440      	bmi.n	240093d2 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
24009350:	02d1      	lsls	r1, r2, #11
24009352:	d43b      	bmi.n	240093cc <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
24009354:	0354      	lsls	r4, r2, #13
24009356:	d436      	bmi.n	240093c6 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
24009358:	0390      	lsls	r0, r2, #14
2400935a:	d431      	bmi.n	240093c0 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400935c:	03d1      	lsls	r1, r2, #15
2400935e:	d444      	bmi.n	240093ea <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
24009360:	0414      	lsls	r4, r2, #16
24009362:	d43f      	bmi.n	240093e4 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
24009364:	0450      	lsls	r0, r2, #17
24009366:	d43a      	bmi.n	240093de <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
24009368:	0491      	lsls	r1, r2, #18
2400936a:	d435      	bmi.n	240093d8 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400936c:	f012 0f08 	tst.w	r2, #8
24009370:	bf14      	ite	ne
24009372:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
24009376:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400937a:	e7bf      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400937c:	2201      	movs	r2, #1
2400937e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
24009380:	e7bc      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
24009382:	2301      	movs	r3, #1
24009384:	e7ba      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
24009386:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
24009388:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400938a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400938c:	e7b6      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400938e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
24009392:	e7b3      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
24009394:	2340      	movs	r3, #64	; 0x40
24009396:	e7b1      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
24009398:	2380      	movs	r3, #128	; 0x80
2400939a:	e7af      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400939c:	f44f 7380 	mov.w	r3, #256	; 0x100
240093a0:	e7ac      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
240093a2:	f44f 7300 	mov.w	r3, #512	; 0x200
240093a6:	e7a9      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
240093a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
240093ac:	e7a6      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
240093ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
240093b2:	e7a3      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
240093b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
240093b8:	e7a0      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
240093ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240093be:	e79d      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
240093c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
240093c4:	e79a      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
240093c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
240093ca:	e797      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
240093cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
240093d0:	e794      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
240093d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
240093d6:	e791      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
240093d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
240093dc:	e78e      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
240093de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
240093e2:	e78b      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
240093e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
240093e8:	e788      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
240093ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
240093ee:	e785      	b.n	240092fc <SDMMC_CmdBlockLength+0x40>
240093f0:	2000002c 	.word	0x2000002c
240093f4:	10624dd3 	.word	0x10624dd3
240093f8:	fffee0c0 	.word	0xfffee0c0
240093fc:	00200045 	.word	0x00200045
24009400:	002000c5 	.word	0x002000c5
24009404:	fdffe008 	.word	0xfdffe008

24009408 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009408:	4a4c      	ldr	r2, [pc, #304]	; (2400953c <SDMMC_CmdReadSingleBlock+0x134>)
2400940a:	4b4d      	ldr	r3, [pc, #308]	; (24009540 <SDMMC_CmdReadSingleBlock+0x138>)
2400940c:	6812      	ldr	r2, [r2, #0]
{
2400940e:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009410:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009414:	4c4b      	ldr	r4, [pc, #300]	; (24009544 <SDMMC_CmdReadSingleBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
24009416:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009418:	f241 1311 	movw	r3, #4369	; 0x1111
2400941c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400941e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009420:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009422:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009426:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009428:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400942c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400942e:	b14a      	cbz	r2, 24009444 <SDMMC_CmdReadSingleBlock+0x3c>
24009430:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
24009432:	4945      	ldr	r1, [pc, #276]	; (24009548 <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
24009434:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
24009436:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
24009438:	420a      	tst	r2, r1
2400943a:	d001      	beq.n	24009440 <SDMMC_CmdReadSingleBlock+0x38>
2400943c:	0492      	lsls	r2, r2, #18
2400943e:	d507      	bpl.n	24009450 <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
24009440:	1c5c      	adds	r4, r3, #1
24009442:	d1f7      	bne.n	24009434 <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
24009444:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
24009448:	4618      	mov	r0, r3
2400944a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400944e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
24009450:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009452:	075c      	lsls	r4, r3, #29
24009454:	d43d      	bmi.n	240094d2 <SDMMC_CmdReadSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
24009456:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009458:	f013 0301 	ands.w	r3, r3, #1
2400945c:	d134      	bne.n	240094c8 <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400945e:	4b3b      	ldr	r3, [pc, #236]	; (2400954c <SDMMC_CmdReadSingleBlock+0x144>)
24009460:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
24009462:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
24009464:	b2db      	uxtb	r3, r3
24009466:	2b11      	cmp	r3, #17
24009468:	d131      	bne.n	240094ce <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400946a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400946c:	4b38      	ldr	r3, [pc, #224]	; (24009550 <SDMMC_CmdReadSingleBlock+0x148>)
2400946e:	4013      	ands	r3, r2
24009470:	2b00      	cmp	r3, #0
24009472:	d0e9      	beq.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
24009474:	2a00      	cmp	r2, #0
24009476:	db30      	blt.n	240094da <SDMMC_CmdReadSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
24009478:	0051      	lsls	r1, r2, #1
2400947a:	d431      	bmi.n	240094e0 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400947c:	0094      	lsls	r4, r2, #2
2400947e:	d431      	bmi.n	240094e4 <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
24009480:	00d0      	lsls	r0, r2, #3
24009482:	d431      	bmi.n	240094e8 <SDMMC_CmdReadSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
24009484:	0111      	lsls	r1, r2, #4
24009486:	d432      	bmi.n	240094ee <SDMMC_CmdReadSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
24009488:	0154      	lsls	r4, r2, #5
2400948a:	d433      	bmi.n	240094f4 <SDMMC_CmdReadSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400948c:	01d0      	lsls	r0, r2, #7
2400948e:	d434      	bmi.n	240094fa <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
24009490:	0211      	lsls	r1, r2, #8
24009492:	d435      	bmi.n	24009500 <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
24009494:	0254      	lsls	r4, r2, #9
24009496:	d436      	bmi.n	24009506 <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
24009498:	0290      	lsls	r0, r2, #10
2400949a:	d440      	bmi.n	2400951e <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400949c:	02d1      	lsls	r1, r2, #11
2400949e:	d43b      	bmi.n	24009518 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
240094a0:	0354      	lsls	r4, r2, #13
240094a2:	d436      	bmi.n	24009512 <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
240094a4:	0390      	lsls	r0, r2, #14
240094a6:	d431      	bmi.n	2400950c <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
240094a8:	03d1      	lsls	r1, r2, #15
240094aa:	d444      	bmi.n	24009536 <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
240094ac:	0414      	lsls	r4, r2, #16
240094ae:	d43f      	bmi.n	24009530 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
240094b0:	0450      	lsls	r0, r2, #17
240094b2:	d43a      	bmi.n	2400952a <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
240094b4:	0491      	lsls	r1, r2, #18
240094b6:	d435      	bmi.n	24009524 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
240094b8:	f012 0f08 	tst.w	r2, #8
240094bc:	bf14      	ite	ne
240094be:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
240094c2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
240094c6:	e7bf      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
240094c8:	2201      	movs	r2, #1
240094ca:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
240094cc:	e7bc      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
240094ce:	2301      	movs	r3, #1
240094d0:	e7ba      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
240094d2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
240094d4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
240094d6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
240094d8:	e7b6      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
240094da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
240094de:	e7b3      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
240094e0:	2340      	movs	r3, #64	; 0x40
240094e2:	e7b1      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
240094e4:	2380      	movs	r3, #128	; 0x80
240094e6:	e7af      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
240094e8:	f44f 7380 	mov.w	r3, #256	; 0x100
240094ec:	e7ac      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
240094ee:	f44f 7300 	mov.w	r3, #512	; 0x200
240094f2:	e7a9      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
240094f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
240094f8:	e7a6      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
240094fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
240094fe:	e7a3      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
24009500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24009504:	e7a0      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
24009506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400950a:	e79d      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400950c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
24009510:	e79a      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
24009512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
24009516:	e797      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
24009518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400951c:	e794      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400951e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24009522:	e791      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
24009524:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
24009528:	e78e      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400952a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400952e:	e78b      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
24009530:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
24009534:	e788      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
24009536:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400953a:	e785      	b.n	24009448 <SDMMC_CmdReadSingleBlock+0x40>
2400953c:	2000002c 	.word	0x2000002c
24009540:	10624dd3 	.word	0x10624dd3
24009544:	fffee0c0 	.word	0xfffee0c0
24009548:	00200045 	.word	0x00200045
2400954c:	002000c5 	.word	0x002000c5
24009550:	fdffe008 	.word	0xfdffe008

24009554 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009554:	4a4c      	ldr	r2, [pc, #304]	; (24009688 <SDMMC_CmdReadMultiBlock+0x134>)
24009556:	4b4d      	ldr	r3, [pc, #308]	; (2400968c <SDMMC_CmdReadMultiBlock+0x138>)
24009558:	6812      	ldr	r2, [r2, #0]
{
2400955a:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400955c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009560:	4c4b      	ldr	r4, [pc, #300]	; (24009690 <SDMMC_CmdReadMultiBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
24009562:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009564:	f241 1312 	movw	r3, #4370	; 0x1112
24009568:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400956a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400956c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400956e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009572:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009574:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009578:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400957a:	b14a      	cbz	r2, 24009590 <SDMMC_CmdReadMultiBlock+0x3c>
2400957c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400957e:	4945      	ldr	r1, [pc, #276]	; (24009694 <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
24009580:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
24009582:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
24009584:	420a      	tst	r2, r1
24009586:	d001      	beq.n	2400958c <SDMMC_CmdReadMultiBlock+0x38>
24009588:	0492      	lsls	r2, r2, #18
2400958a:	d507      	bpl.n	2400959c <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
2400958c:	1c5c      	adds	r4, r3, #1
2400958e:	d1f7      	bne.n	24009580 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
24009590:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
24009594:	4618      	mov	r0, r3
24009596:	f85d 4b04 	ldr.w	r4, [sp], #4
2400959a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400959c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400959e:	075c      	lsls	r4, r3, #29
240095a0:	d43d      	bmi.n	2400961e <SDMMC_CmdReadMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
240095a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
240095a4:	f013 0301 	ands.w	r3, r3, #1
240095a8:	d134      	bne.n	24009614 <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
240095aa:	4b3b      	ldr	r3, [pc, #236]	; (24009698 <SDMMC_CmdReadMultiBlock+0x144>)
240095ac:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
240095ae:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
240095b0:	b2db      	uxtb	r3, r3
240095b2:	2b12      	cmp	r3, #18
240095b4:	d131      	bne.n	2400961a <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
240095b6:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
240095b8:	4b38      	ldr	r3, [pc, #224]	; (2400969c <SDMMC_CmdReadMultiBlock+0x148>)
240095ba:	4013      	ands	r3, r2
240095bc:	2b00      	cmp	r3, #0
240095be:	d0e9      	beq.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
240095c0:	2a00      	cmp	r2, #0
240095c2:	db30      	blt.n	24009626 <SDMMC_CmdReadMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
240095c4:	0051      	lsls	r1, r2, #1
240095c6:	d431      	bmi.n	2400962c <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
240095c8:	0094      	lsls	r4, r2, #2
240095ca:	d431      	bmi.n	24009630 <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
240095cc:	00d0      	lsls	r0, r2, #3
240095ce:	d431      	bmi.n	24009634 <SDMMC_CmdReadMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
240095d0:	0111      	lsls	r1, r2, #4
240095d2:	d432      	bmi.n	2400963a <SDMMC_CmdReadMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
240095d4:	0154      	lsls	r4, r2, #5
240095d6:	d433      	bmi.n	24009640 <SDMMC_CmdReadMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
240095d8:	01d0      	lsls	r0, r2, #7
240095da:	d434      	bmi.n	24009646 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
240095dc:	0211      	lsls	r1, r2, #8
240095de:	d435      	bmi.n	2400964c <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
240095e0:	0254      	lsls	r4, r2, #9
240095e2:	d436      	bmi.n	24009652 <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
240095e4:	0290      	lsls	r0, r2, #10
240095e6:	d440      	bmi.n	2400966a <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
240095e8:	02d1      	lsls	r1, r2, #11
240095ea:	d43b      	bmi.n	24009664 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
240095ec:	0354      	lsls	r4, r2, #13
240095ee:	d436      	bmi.n	2400965e <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
240095f0:	0390      	lsls	r0, r2, #14
240095f2:	d431      	bmi.n	24009658 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
240095f4:	03d1      	lsls	r1, r2, #15
240095f6:	d444      	bmi.n	24009682 <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
240095f8:	0414      	lsls	r4, r2, #16
240095fa:	d43f      	bmi.n	2400967c <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
240095fc:	0450      	lsls	r0, r2, #17
240095fe:	d43a      	bmi.n	24009676 <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
24009600:	0491      	lsls	r1, r2, #18
24009602:	d435      	bmi.n	24009670 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
24009604:	f012 0f08 	tst.w	r2, #8
24009608:	bf14      	ite	ne
2400960a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400960e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
24009612:	e7bf      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
24009614:	2201      	movs	r2, #1
24009616:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
24009618:	e7bc      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400961a:	2301      	movs	r3, #1
2400961c:	e7ba      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400961e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
24009620:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
24009622:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
24009624:	e7b6      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
24009626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400962a:	e7b3      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400962c:	2340      	movs	r3, #64	; 0x40
2400962e:	e7b1      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
24009630:	2380      	movs	r3, #128	; 0x80
24009632:	e7af      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
24009634:	f44f 7380 	mov.w	r3, #256	; 0x100
24009638:	e7ac      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400963a:	f44f 7300 	mov.w	r3, #512	; 0x200
2400963e:	e7a9      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
24009640:	f44f 6380 	mov.w	r3, #1024	; 0x400
24009644:	e7a6      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
24009646:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400964a:	e7a3      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400964c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24009650:	e7a0      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
24009652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24009656:	e79d      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
24009658:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400965c:	e79a      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400965e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
24009662:	e797      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
24009664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
24009668:	e794      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400966a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400966e:	e791      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
24009670:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
24009674:	e78e      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
24009676:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400967a:	e78b      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400967c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
24009680:	e788      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
24009682:	f44f 2300 	mov.w	r3, #524288	; 0x80000
24009686:	e785      	b.n	24009594 <SDMMC_CmdReadMultiBlock+0x40>
24009688:	2000002c 	.word	0x2000002c
2400968c:	10624dd3 	.word	0x10624dd3
24009690:	fffee0c0 	.word	0xfffee0c0
24009694:	00200045 	.word	0x00200045
24009698:	002000c5 	.word	0x002000c5
2400969c:	fdffe008 	.word	0xfdffe008

240096a0 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
240096a0:	4a4c      	ldr	r2, [pc, #304]	; (240097d4 <SDMMC_CmdWriteSingleBlock+0x134>)
240096a2:	4b4d      	ldr	r3, [pc, #308]	; (240097d8 <SDMMC_CmdWriteSingleBlock+0x138>)
240096a4:	6812      	ldr	r2, [r2, #0]
{
240096a6:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
240096a8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
240096ac:	4c4b      	ldr	r4, [pc, #300]	; (240097dc <SDMMC_CmdWriteSingleBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
240096ae:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
240096b0:	f241 1318 	movw	r3, #4376	; 0x1118
240096b4:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
240096b6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
240096b8:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
240096ba:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
240096be:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
240096c0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
240096c4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
240096c6:	b14a      	cbz	r2, 240096dc <SDMMC_CmdWriteSingleBlock+0x3c>
240096c8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
240096ca:	4945      	ldr	r1, [pc, #276]	; (240097e0 <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
240096cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
240096ce:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
240096d0:	420a      	tst	r2, r1
240096d2:	d001      	beq.n	240096d8 <SDMMC_CmdWriteSingleBlock+0x38>
240096d4:	0492      	lsls	r2, r2, #18
240096d6:	d507      	bpl.n	240096e8 <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
240096d8:	1c5c      	adds	r4, r3, #1
240096da:	d1f7      	bne.n	240096cc <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
240096dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
240096e0:	4618      	mov	r0, r3
240096e2:	f85d 4b04 	ldr.w	r4, [sp], #4
240096e6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
240096e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
240096ea:	075c      	lsls	r4, r3, #29
240096ec:	d43d      	bmi.n	2400976a <SDMMC_CmdWriteSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
240096ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
240096f0:	f013 0301 	ands.w	r3, r3, #1
240096f4:	d134      	bne.n	24009760 <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
240096f6:	4b3b      	ldr	r3, [pc, #236]	; (240097e4 <SDMMC_CmdWriteSingleBlock+0x144>)
240096f8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
240096fa:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
240096fc:	b2db      	uxtb	r3, r3
240096fe:	2b18      	cmp	r3, #24
24009700:	d131      	bne.n	24009766 <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
24009702:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
24009704:	4b38      	ldr	r3, [pc, #224]	; (240097e8 <SDMMC_CmdWriteSingleBlock+0x148>)
24009706:	4013      	ands	r3, r2
24009708:	2b00      	cmp	r3, #0
2400970a:	d0e9      	beq.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400970c:	2a00      	cmp	r2, #0
2400970e:	db30      	blt.n	24009772 <SDMMC_CmdWriteSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
24009710:	0051      	lsls	r1, r2, #1
24009712:	d431      	bmi.n	24009778 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
24009714:	0094      	lsls	r4, r2, #2
24009716:	d431      	bmi.n	2400977c <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
24009718:	00d0      	lsls	r0, r2, #3
2400971a:	d431      	bmi.n	24009780 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400971c:	0111      	lsls	r1, r2, #4
2400971e:	d432      	bmi.n	24009786 <SDMMC_CmdWriteSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
24009720:	0154      	lsls	r4, r2, #5
24009722:	d433      	bmi.n	2400978c <SDMMC_CmdWriteSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
24009724:	01d0      	lsls	r0, r2, #7
24009726:	d434      	bmi.n	24009792 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
24009728:	0211      	lsls	r1, r2, #8
2400972a:	d435      	bmi.n	24009798 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400972c:	0254      	lsls	r4, r2, #9
2400972e:	d436      	bmi.n	2400979e <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
24009730:	0290      	lsls	r0, r2, #10
24009732:	d440      	bmi.n	240097b6 <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
24009734:	02d1      	lsls	r1, r2, #11
24009736:	d43b      	bmi.n	240097b0 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
24009738:	0354      	lsls	r4, r2, #13
2400973a:	d436      	bmi.n	240097aa <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400973c:	0390      	lsls	r0, r2, #14
2400973e:	d431      	bmi.n	240097a4 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
24009740:	03d1      	lsls	r1, r2, #15
24009742:	d444      	bmi.n	240097ce <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
24009744:	0414      	lsls	r4, r2, #16
24009746:	d43f      	bmi.n	240097c8 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
24009748:	0450      	lsls	r0, r2, #17
2400974a:	d43a      	bmi.n	240097c2 <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400974c:	0491      	lsls	r1, r2, #18
2400974e:	d435      	bmi.n	240097bc <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
24009750:	f012 0f08 	tst.w	r2, #8
24009754:	bf14      	ite	ne
24009756:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400975a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400975e:	e7bf      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
24009760:	2201      	movs	r2, #1
24009762:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
24009764:	e7bc      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
24009766:	2301      	movs	r3, #1
24009768:	e7ba      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400976a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400976c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400976e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
24009770:	e7b6      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
24009772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
24009776:	e7b3      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
24009778:	2340      	movs	r3, #64	; 0x40
2400977a:	e7b1      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400977c:	2380      	movs	r3, #128	; 0x80
2400977e:	e7af      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
24009780:	f44f 7380 	mov.w	r3, #256	; 0x100
24009784:	e7ac      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
24009786:	f44f 7300 	mov.w	r3, #512	; 0x200
2400978a:	e7a9      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400978c:	f44f 6380 	mov.w	r3, #1024	; 0x400
24009790:	e7a6      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
24009792:	f44f 6300 	mov.w	r3, #2048	; 0x800
24009796:	e7a3      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
24009798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400979c:	e7a0      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400979e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240097a2:	e79d      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
240097a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
240097a8:	e79a      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
240097aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
240097ae:	e797      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
240097b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
240097b4:	e794      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
240097b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
240097ba:	e791      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
240097bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
240097c0:	e78e      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
240097c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
240097c6:	e78b      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
240097c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
240097cc:	e788      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
240097ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
240097d2:	e785      	b.n	240096e0 <SDMMC_CmdWriteSingleBlock+0x40>
240097d4:	2000002c 	.word	0x2000002c
240097d8:	10624dd3 	.word	0x10624dd3
240097dc:	fffee0c0 	.word	0xfffee0c0
240097e0:	00200045 	.word	0x00200045
240097e4:	002000c5 	.word	0x002000c5
240097e8:	fdffe008 	.word	0xfdffe008

240097ec <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
240097ec:	4a4c      	ldr	r2, [pc, #304]	; (24009920 <SDMMC_CmdWriteMultiBlock+0x134>)
240097ee:	4b4d      	ldr	r3, [pc, #308]	; (24009924 <SDMMC_CmdWriteMultiBlock+0x138>)
240097f0:	6812      	ldr	r2, [r2, #0]
{
240097f2:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
240097f4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
240097f8:	4c4b      	ldr	r4, [pc, #300]	; (24009928 <SDMMC_CmdWriteMultiBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
240097fa:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
240097fc:	f241 1319 	movw	r3, #4377	; 0x1119
24009800:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009802:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009804:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009806:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400980a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400980c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009810:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
24009812:	b14a      	cbz	r2, 24009828 <SDMMC_CmdWriteMultiBlock+0x3c>
24009814:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
24009816:	4945      	ldr	r1, [pc, #276]	; (2400992c <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
24009818:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400981a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400981c:	420a      	tst	r2, r1
2400981e:	d001      	beq.n	24009824 <SDMMC_CmdWriteMultiBlock+0x38>
24009820:	0492      	lsls	r2, r2, #18
24009822:	d507      	bpl.n	24009834 <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
24009824:	1c5c      	adds	r4, r3, #1
24009826:	d1f7      	bne.n	24009818 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
24009828:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400982c:	4618      	mov	r0, r3
2400982e:	f85d 4b04 	ldr.w	r4, [sp], #4
24009832:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
24009834:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009836:	075c      	lsls	r4, r3, #29
24009838:	d43d      	bmi.n	240098b6 <SDMMC_CmdWriteMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400983a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400983c:	f013 0301 	ands.w	r3, r3, #1
24009840:	d134      	bne.n	240098ac <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
24009842:	4b3b      	ldr	r3, [pc, #236]	; (24009930 <SDMMC_CmdWriteMultiBlock+0x144>)
24009844:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
24009846:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
24009848:	b2db      	uxtb	r3, r3
2400984a:	2b19      	cmp	r3, #25
2400984c:	d131      	bne.n	240098b2 <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
2400984e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
24009850:	4b38      	ldr	r3, [pc, #224]	; (24009934 <SDMMC_CmdWriteMultiBlock+0x148>)
24009852:	4013      	ands	r3, r2
24009854:	2b00      	cmp	r3, #0
24009856:	d0e9      	beq.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
24009858:	2a00      	cmp	r2, #0
2400985a:	db30      	blt.n	240098be <SDMMC_CmdWriteMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400985c:	0051      	lsls	r1, r2, #1
2400985e:	d431      	bmi.n	240098c4 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
24009860:	0094      	lsls	r4, r2, #2
24009862:	d431      	bmi.n	240098c8 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
24009864:	00d0      	lsls	r0, r2, #3
24009866:	d431      	bmi.n	240098cc <SDMMC_CmdWriteMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
24009868:	0111      	lsls	r1, r2, #4
2400986a:	d432      	bmi.n	240098d2 <SDMMC_CmdWriteMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400986c:	0154      	lsls	r4, r2, #5
2400986e:	d433      	bmi.n	240098d8 <SDMMC_CmdWriteMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
24009870:	01d0      	lsls	r0, r2, #7
24009872:	d434      	bmi.n	240098de <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
24009874:	0211      	lsls	r1, r2, #8
24009876:	d435      	bmi.n	240098e4 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
24009878:	0254      	lsls	r4, r2, #9
2400987a:	d436      	bmi.n	240098ea <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400987c:	0290      	lsls	r0, r2, #10
2400987e:	d440      	bmi.n	24009902 <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
24009880:	02d1      	lsls	r1, r2, #11
24009882:	d43b      	bmi.n	240098fc <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
24009884:	0354      	lsls	r4, r2, #13
24009886:	d436      	bmi.n	240098f6 <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
24009888:	0390      	lsls	r0, r2, #14
2400988a:	d431      	bmi.n	240098f0 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400988c:	03d1      	lsls	r1, r2, #15
2400988e:	d444      	bmi.n	2400991a <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
24009890:	0414      	lsls	r4, r2, #16
24009892:	d43f      	bmi.n	24009914 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
24009894:	0450      	lsls	r0, r2, #17
24009896:	d43a      	bmi.n	2400990e <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
24009898:	0491      	lsls	r1, r2, #18
2400989a:	d435      	bmi.n	24009908 <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400989c:	f012 0f08 	tst.w	r2, #8
240098a0:	bf14      	ite	ne
240098a2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
240098a6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
240098aa:	e7bf      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
240098ac:	2201      	movs	r2, #1
240098ae:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
240098b0:	e7bc      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
240098b2:	2301      	movs	r3, #1
240098b4:	e7ba      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
240098b6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
240098b8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
240098ba:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
240098bc:	e7b6      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
240098be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
240098c2:	e7b3      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
240098c4:	2340      	movs	r3, #64	; 0x40
240098c6:	e7b1      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
240098c8:	2380      	movs	r3, #128	; 0x80
240098ca:	e7af      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
240098cc:	f44f 7380 	mov.w	r3, #256	; 0x100
240098d0:	e7ac      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
240098d2:	f44f 7300 	mov.w	r3, #512	; 0x200
240098d6:	e7a9      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
240098d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
240098dc:	e7a6      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
240098de:	f44f 6300 	mov.w	r3, #2048	; 0x800
240098e2:	e7a3      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
240098e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
240098e8:	e7a0      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
240098ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240098ee:	e79d      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
240098f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
240098f4:	e79a      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
240098f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
240098fa:	e797      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
240098fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
24009900:	e794      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
24009902:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24009906:	e791      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
24009908:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400990c:	e78e      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400990e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
24009912:	e78b      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
24009914:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
24009918:	e788      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400991a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400991e:	e785      	b.n	2400982c <SDMMC_CmdWriteMultiBlock+0x40>
24009920:	2000002c 	.word	0x2000002c
24009924:	10624dd3 	.word	0x10624dd3
24009928:	fffee0c0 	.word	0xfffee0c0
2400992c:	00200045 	.word	0x00200045
24009930:	002000c5 	.word	0x002000c5
24009934:	fdffe008 	.word	0xfdffe008

24009938 <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009938:	4b7d      	ldr	r3, [pc, #500]	; (24009b30 <SDMMC_CmdStopTransfer+0x1f8>)
2400993a:	497e      	ldr	r1, [pc, #504]	; (24009b34 <SDMMC_CmdStopTransfer+0x1fc>)
2400993c:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400993e:	4b7e      	ldr	r3, [pc, #504]	; (24009b38 <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009940:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
24009944:	68c1      	ldr	r1, [r0, #12]
24009946:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400994a:	0a52      	lsrs	r2, r2, #9
{
2400994c:	b430      	push	{r4, r5}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400994e:	60c1      	str	r1, [r0, #12]
  SDMMCx->ARG = Command->Argument;
24009950:	2400      	movs	r4, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
24009952:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009954:	4d79      	ldr	r5, [pc, #484]	; (24009b3c <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
24009956:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400995a:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400995e:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009960:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
24009964:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009966:	68c4      	ldr	r4, [r0, #12]
24009968:	4023      	ands	r3, r4
2400996a:	4319      	orrs	r1, r3
2400996c:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
2400996e:	b14a      	cbz	r2, 24009984 <SDMMC_CmdStopTransfer+0x4c>
24009970:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
24009972:	4973      	ldr	r1, [pc, #460]	; (24009b40 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
24009974:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
24009976:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
24009978:	420a      	tst	r2, r1
2400997a:	d001      	beq.n	24009980 <SDMMC_CmdStopTransfer+0x48>
2400997c:	0492      	lsls	r2, r2, #18
2400997e:	d50a      	bpl.n	24009996 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
24009980:	1c5c      	adds	r4, r3, #1
24009982:	d1f7      	bne.n	24009974 <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009984:	68c2      	ldr	r2, [r0, #12]
24009986:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
2400998a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2400998e:	60c2      	str	r2, [r0, #12]
}
24009990:	4618      	mov	r0, r3
24009992:	bc30      	pop	{r4, r5}
24009994:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
24009996:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009998:	075b      	lsls	r3, r3, #29
2400999a:	d454      	bmi.n	24009a46 <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400999c:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400999e:	f013 0301 	ands.w	r3, r3, #1
240099a2:	d13c      	bne.n	24009a1e <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
240099a4:	4a67      	ldr	r2, [pc, #412]	; (24009b44 <SDMMC_CmdStopTransfer+0x20c>)
240099a6:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
240099a8:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
240099aa:	b2d2      	uxtb	r2, r2
240099ac:	2a0c      	cmp	r2, #12
240099ae:	d144      	bne.n	24009a3a <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
240099b0:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
240099b2:	4965      	ldr	r1, [pc, #404]	; (24009b48 <SDMMC_CmdStopTransfer+0x210>)
240099b4:	4011      	ands	r1, r2
240099b6:	2900      	cmp	r1, #0
240099b8:	d038      	beq.n	24009a2c <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
240099ba:	2a00      	cmp	r2, #0
240099bc:	db36      	blt.n	24009a2c <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
240099be:	0055      	lsls	r5, r2, #1
240099c0:	d448      	bmi.n	24009a54 <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
240099c2:	0094      	lsls	r4, r2, #2
240099c4:	d44c      	bmi.n	24009a60 <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
240099c6:	00d1      	lsls	r1, r2, #3
240099c8:	d450      	bmi.n	24009a6c <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
240099ca:	0113      	lsls	r3, r2, #4
240099cc:	d455      	bmi.n	24009a7a <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
240099ce:	0155      	lsls	r5, r2, #5
240099d0:	d45a      	bmi.n	24009a88 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
240099d2:	01d4      	lsls	r4, r2, #7
240099d4:	d466      	bmi.n	24009aa4 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
240099d6:	0211      	lsls	r1, r2, #8
240099d8:	d45d      	bmi.n	24009a96 <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
240099da:	0253      	lsls	r3, r2, #9
240099dc:	d470      	bmi.n	24009ac0 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
240099de:	0295      	lsls	r5, r2, #10
240099e0:	d467      	bmi.n	24009ab2 <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
240099e2:	02d4      	lsls	r4, r2, #11
240099e4:	f100 8081 	bmi.w	24009aea <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
240099e8:	0351      	lsls	r1, r2, #13
240099ea:	d477      	bmi.n	24009adc <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
240099ec:	0393      	lsls	r3, r2, #14
240099ee:	d46e      	bmi.n	24009ace <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
240099f0:	03d5      	lsls	r5, r2, #15
240099f2:	f100 8096 	bmi.w	24009b22 <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
240099f6:	0414      	lsls	r4, r2, #16
240099f8:	f100 8085 	bmi.w	24009b06 <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
240099fc:	0451      	lsls	r1, r2, #17
240099fe:	d47b      	bmi.n	24009af8 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
24009a00:	0493      	lsls	r3, r2, #18
24009a02:	f100 8087 	bmi.w	24009b14 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
24009a06:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a0a:	68c2      	ldr	r2, [r0, #12]
24009a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
24009a10:	bf14      	ite	ne
24009a12:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
24009a16:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a1a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009a1c:	e7b8      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
24009a1e:	2201      	movs	r2, #1
24009a20:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a22:	68c2      	ldr	r2, [r0, #12]
24009a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009a28:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009a2a:	e7b1      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a2c:	68c2      	ldr	r2, [r0, #12]
24009a2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
}
24009a32:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a34:	60c2      	str	r2, [r0, #12]
}
24009a36:	4618      	mov	r0, r3
24009a38:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a3a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
24009a3c:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009a42:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009a44:	e7a4      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
24009a46:	2304      	movs	r3, #4
24009a48:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a4a:	68c2      	ldr	r2, [r0, #12]
24009a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009a50:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009a52:	e79d      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a54:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
24009a56:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009a5c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009a5e:	e797      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a60:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
24009a62:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009a68:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009a6a:	e791      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a6c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
24009a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009a76:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009a78:	e78a      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a7a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
24009a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009a84:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009a86:	e783      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a88:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
24009a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009a92:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009a94:	e77c      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a96:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
24009a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009aa0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009aa2:	e775      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009aa4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
24009aa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009aaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009aae:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009ab0:	e76e      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009ab2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
24009ab4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009abc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009abe:	e767      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009ac0:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
24009ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009ac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009aca:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009acc:	e760      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009ace:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
24009ad0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009ad8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009ada:	e759      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009adc:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
24009ade:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009ae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009ae6:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009ae8:	e752      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009aea:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
24009aec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009af4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009af6:	e74b      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009af8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
24009afa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009afe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009b02:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009b04:	e744      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009b06:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
24009b08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009b10:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009b12:	e73d      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009b14:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
24009b16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009b1e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009b20:	e736      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009b22:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
24009b24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
24009b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
24009b2c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
24009b2e:	e72f      	b.n	24009990 <SDMMC_CmdStopTransfer+0x58>
24009b30:	2000002c 	.word	0x2000002c
24009b34:	10624dd3 	.word	0x10624dd3
24009b38:	fffee0c0 	.word	0xfffee0c0
24009b3c:	05f5e100 	.word	0x05f5e100
24009b40:	00200045 	.word	0x00200045
24009b44:	002000c5 	.word	0x002000c5
24009b48:	fdffe008 	.word	0xfdffe008

24009b4c <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009b4c:	4a4c      	ldr	r2, [pc, #304]	; (24009c80 <SDMMC_CmdSelDesel+0x134>)
24009b4e:	4b4d      	ldr	r3, [pc, #308]	; (24009c84 <SDMMC_CmdSelDesel+0x138>)
24009b50:	6812      	ldr	r2, [r2, #0]
{
24009b52:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009b54:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009b58:	4c4b      	ldr	r4, [pc, #300]	; (24009c88 <SDMMC_CmdSelDesel+0x13c>)
  SDMMCx->ARG = Command->Argument;
24009b5a:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009b5c:	f241 1307 	movw	r3, #4359	; 0x1107
24009b60:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009b62:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009b64:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009b66:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009b6a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009b6c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009b70:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
24009b72:	b14a      	cbz	r2, 24009b88 <SDMMC_CmdSelDesel+0x3c>
24009b74:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
24009b76:	4945      	ldr	r1, [pc, #276]	; (24009c8c <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
24009b78:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
24009b7a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
24009b7c:	420a      	tst	r2, r1
24009b7e:	d001      	beq.n	24009b84 <SDMMC_CmdSelDesel+0x38>
24009b80:	0492      	lsls	r2, r2, #18
24009b82:	d507      	bpl.n	24009b94 <SDMMC_CmdSelDesel+0x48>
    if (count-- == 0U)
24009b84:	1c5c      	adds	r4, r3, #1
24009b86:	d1f7      	bne.n	24009b78 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
24009b88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
24009b8c:	4618      	mov	r0, r3
24009b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
24009b92:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
24009b94:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009b96:	075c      	lsls	r4, r3, #29
24009b98:	d43d      	bmi.n	24009c16 <SDMMC_CmdSelDesel+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
24009b9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009b9c:	f013 0301 	ands.w	r3, r3, #1
24009ba0:	d134      	bne.n	24009c0c <SDMMC_CmdSelDesel+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
24009ba2:	4b3b      	ldr	r3, [pc, #236]	; (24009c90 <SDMMC_CmdSelDesel+0x144>)
24009ba4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
24009ba6:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
24009ba8:	b2db      	uxtb	r3, r3
24009baa:	2b07      	cmp	r3, #7
24009bac:	d131      	bne.n	24009c12 <SDMMC_CmdSelDesel+0xc6>
  return (*(__IO uint32_t *) tmp);
24009bae:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
24009bb0:	4b38      	ldr	r3, [pc, #224]	; (24009c94 <SDMMC_CmdSelDesel+0x148>)
24009bb2:	4013      	ands	r3, r2
24009bb4:	2b00      	cmp	r3, #0
24009bb6:	d0e9      	beq.n	24009b8c <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
24009bb8:	2a00      	cmp	r2, #0
24009bba:	db30      	blt.n	24009c1e <SDMMC_CmdSelDesel+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
24009bbc:	0051      	lsls	r1, r2, #1
24009bbe:	d431      	bmi.n	24009c24 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
24009bc0:	0094      	lsls	r4, r2, #2
24009bc2:	d431      	bmi.n	24009c28 <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
24009bc4:	00d0      	lsls	r0, r2, #3
24009bc6:	d431      	bmi.n	24009c2c <SDMMC_CmdSelDesel+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
24009bc8:	0111      	lsls	r1, r2, #4
24009bca:	d432      	bmi.n	24009c32 <SDMMC_CmdSelDesel+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
24009bcc:	0154      	lsls	r4, r2, #5
24009bce:	d433      	bmi.n	24009c38 <SDMMC_CmdSelDesel+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
24009bd0:	01d0      	lsls	r0, r2, #7
24009bd2:	d434      	bmi.n	24009c3e <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
24009bd4:	0211      	lsls	r1, r2, #8
24009bd6:	d435      	bmi.n	24009c44 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
24009bd8:	0254      	lsls	r4, r2, #9
24009bda:	d436      	bmi.n	24009c4a <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
24009bdc:	0290      	lsls	r0, r2, #10
24009bde:	d440      	bmi.n	24009c62 <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
24009be0:	02d1      	lsls	r1, r2, #11
24009be2:	d43b      	bmi.n	24009c5c <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
24009be4:	0354      	lsls	r4, r2, #13
24009be6:	d436      	bmi.n	24009c56 <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
24009be8:	0390      	lsls	r0, r2, #14
24009bea:	d431      	bmi.n	24009c50 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
24009bec:	03d1      	lsls	r1, r2, #15
24009bee:	d444      	bmi.n	24009c7a <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
24009bf0:	0414      	lsls	r4, r2, #16
24009bf2:	d43f      	bmi.n	24009c74 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
24009bf4:	0450      	lsls	r0, r2, #17
24009bf6:	d43a      	bmi.n	24009c6e <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
24009bf8:	0491      	lsls	r1, r2, #18
24009bfa:	d435      	bmi.n	24009c68 <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
24009bfc:	f012 0f08 	tst.w	r2, #8
24009c00:	bf14      	ite	ne
24009c02:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
24009c06:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
24009c0a:	e7bf      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
24009c0c:	2201      	movs	r2, #1
24009c0e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
24009c10:	e7bc      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
24009c12:	2301      	movs	r3, #1
24009c14:	e7ba      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
24009c16:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
24009c18:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
24009c1a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
24009c1c:	e7b6      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
24009c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
24009c22:	e7b3      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
24009c24:	2340      	movs	r3, #64	; 0x40
24009c26:	e7b1      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
24009c28:	2380      	movs	r3, #128	; 0x80
24009c2a:	e7af      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
24009c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
24009c30:	e7ac      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
24009c32:	f44f 7300 	mov.w	r3, #512	; 0x200
24009c36:	e7a9      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
24009c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
24009c3c:	e7a6      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
24009c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
24009c42:	e7a3      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
24009c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24009c48:	e7a0      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
24009c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24009c4e:	e79d      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
24009c50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
24009c54:	e79a      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
24009c56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
24009c5a:	e797      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
24009c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
24009c60:	e794      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
24009c62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24009c66:	e791      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
24009c68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
24009c6c:	e78e      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
24009c6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
24009c72:	e78b      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
24009c74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
24009c78:	e788      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
24009c7a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
24009c7e:	e785      	b.n	24009b8c <SDMMC_CmdSelDesel+0x40>
24009c80:	2000002c 	.word	0x2000002c
24009c84:	10624dd3 	.word	0x10624dd3
24009c88:	fffee0c0 	.word	0xfffee0c0
24009c8c:	00200045 	.word	0x00200045
24009c90:	002000c5 	.word	0x002000c5
24009c94:	fdffe008 	.word	0xfdffe008

24009c98 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009c98:	4b11      	ldr	r3, [pc, #68]	; (24009ce0 <SDMMC_CmdGoIdleState+0x48>)
{
24009c9a:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009c9c:	4a11      	ldr	r2, [pc, #68]	; (24009ce4 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009c9e:	681b      	ldr	r3, [r3, #0]
{
24009ca0:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009ca2:	4c11      	ldr	r4, [pc, #68]	; (24009ce8 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
24009ca4:	2500      	movs	r5, #0
24009ca6:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009ca8:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009cac:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009cae:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009cb2:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009cb4:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009cb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009cba:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009cbe:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009cc0:	e002      	b.n	24009cc8 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
24009cc2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
24009cc4:	0612      	lsls	r2, r2, #24
24009cc6:	d405      	bmi.n	24009cd4 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
24009cc8:	3b01      	subs	r3, #1
24009cca:	d2fa      	bcs.n	24009cc2 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
24009ccc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
24009cd0:	bc30      	pop	{r4, r5}
24009cd2:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
24009cd4:	4b05      	ldr	r3, [pc, #20]	; (24009cec <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
24009cd6:	2000      	movs	r0, #0
}
24009cd8:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
24009cda:	638b      	str	r3, [r1, #56]	; 0x38
}
24009cdc:	4770      	bx	lr
24009cde:	bf00      	nop
24009ce0:	2000002c 	.word	0x2000002c
24009ce4:	fffee0c0 	.word	0xfffee0c0
24009ce8:	10624dd3 	.word	0x10624dd3
24009cec:	002000c5 	.word	0x002000c5

24009cf0 <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009cf0:	4a1c      	ldr	r2, [pc, #112]	; (24009d64 <SDMMC_CmdOperCond+0x74>)
{
24009cf2:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
24009cf4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009cf8:	481b      	ldr	r0, [pc, #108]	; (24009d68 <SDMMC_CmdOperCond+0x78>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009cfa:	6812      	ldr	r2, [r2, #0]
{
24009cfc:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009cfe:	4c1b      	ldr	r4, [pc, #108]	; (24009d6c <SDMMC_CmdOperCond+0x7c>)
  SDMMCx->ARG = Command->Argument;
24009d00:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009d02:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009d06:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009d0a:	68cc      	ldr	r4, [r1, #12]
24009d0c:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009d0e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009d10:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009d12:	f241 3088 	movw	r0, #5000	; 0x1388
24009d16:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009d1a:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
24009d1c:	b14a      	cbz	r2, 24009d32 <SDMMC_CmdOperCond+0x42>
24009d1e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
24009d20:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
24009d22:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
24009d24:	f012 0f45 	tst.w	r2, #69	; 0x45
24009d28:	d001      	beq.n	24009d2e <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
24009d2a:	0490      	lsls	r0, r2, #18
24009d2c:	d506      	bpl.n	24009d3c <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
24009d2e:	1c5c      	adds	r4, r3, #1
24009d30:	d1f6      	bne.n	24009d20 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
24009d32:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
24009d36:	f85d 4b04 	ldr.w	r4, [sp], #4
24009d3a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
24009d3c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
24009d3e:	075a      	lsls	r2, r3, #29
24009d40:	d40c      	bmi.n	24009d5c <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
24009d42:	6b48      	ldr	r0, [r1, #52]	; 0x34
24009d44:	f010 0001 	ands.w	r0, r0, #1
24009d48:	d105      	bne.n	24009d56 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
24009d4a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
24009d4c:	065b      	lsls	r3, r3, #25
24009d4e:	d5f2      	bpl.n	24009d36 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
24009d50:	2340      	movs	r3, #64	; 0x40
24009d52:	638b      	str	r3, [r1, #56]	; 0x38
24009d54:	e7ef      	b.n	24009d36 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
24009d56:	2301      	movs	r3, #1
24009d58:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
24009d5a:	e7ec      	b.n	24009d36 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
24009d5c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
24009d5e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
24009d60:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
24009d62:	e7e8      	b.n	24009d36 <SDMMC_CmdOperCond+0x46>
24009d64:	2000002c 	.word	0x2000002c
24009d68:	fffee0c0 	.word	0xfffee0c0
24009d6c:	10624dd3 	.word	0x10624dd3

24009d70 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009d70:	4a4c      	ldr	r2, [pc, #304]	; (24009ea4 <SDMMC_CmdAppCommand+0x134>)
24009d72:	4b4d      	ldr	r3, [pc, #308]	; (24009ea8 <SDMMC_CmdAppCommand+0x138>)
24009d74:	6812      	ldr	r2, [r2, #0]
{
24009d76:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009d78:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009d7c:	4c4b      	ldr	r4, [pc, #300]	; (24009eac <SDMMC_CmdAppCommand+0x13c>)
  SDMMCx->ARG = Command->Argument;
24009d7e:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009d80:	f241 1337 	movw	r3, #4407	; 0x1137
24009d84:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009d86:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009d88:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009d8a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009d8e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009d90:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009d94:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
24009d96:	b14a      	cbz	r2, 24009dac <SDMMC_CmdAppCommand+0x3c>
24009d98:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
24009d9a:	4945      	ldr	r1, [pc, #276]	; (24009eb0 <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
24009d9c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
24009d9e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
24009da0:	420a      	tst	r2, r1
24009da2:	d001      	beq.n	24009da8 <SDMMC_CmdAppCommand+0x38>
24009da4:	0492      	lsls	r2, r2, #18
24009da6:	d507      	bpl.n	24009db8 <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
24009da8:	1c5c      	adds	r4, r3, #1
24009daa:	d1f7      	bne.n	24009d9c <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
24009dac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
24009db0:	4618      	mov	r0, r3
24009db2:	f85d 4b04 	ldr.w	r4, [sp], #4
24009db6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
24009db8:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009dba:	075c      	lsls	r4, r3, #29
24009dbc:	d43d      	bmi.n	24009e3a <SDMMC_CmdAppCommand+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
24009dbe:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009dc0:	f013 0301 	ands.w	r3, r3, #1
24009dc4:	d134      	bne.n	24009e30 <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
24009dc6:	4b3b      	ldr	r3, [pc, #236]	; (24009eb4 <SDMMC_CmdAppCommand+0x144>)
24009dc8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
24009dca:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
24009dcc:	b2db      	uxtb	r3, r3
24009dce:	2b37      	cmp	r3, #55	; 0x37
24009dd0:	d131      	bne.n	24009e36 <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
24009dd2:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
24009dd4:	4b38      	ldr	r3, [pc, #224]	; (24009eb8 <SDMMC_CmdAppCommand+0x148>)
24009dd6:	4013      	ands	r3, r2
24009dd8:	2b00      	cmp	r3, #0
24009dda:	d0e9      	beq.n	24009db0 <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
24009ddc:	2a00      	cmp	r2, #0
24009dde:	db30      	blt.n	24009e42 <SDMMC_CmdAppCommand+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
24009de0:	0051      	lsls	r1, r2, #1
24009de2:	d431      	bmi.n	24009e48 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
24009de4:	0094      	lsls	r4, r2, #2
24009de6:	d431      	bmi.n	24009e4c <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
24009de8:	00d0      	lsls	r0, r2, #3
24009dea:	d431      	bmi.n	24009e50 <SDMMC_CmdAppCommand+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
24009dec:	0111      	lsls	r1, r2, #4
24009dee:	d432      	bmi.n	24009e56 <SDMMC_CmdAppCommand+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
24009df0:	0154      	lsls	r4, r2, #5
24009df2:	d433      	bmi.n	24009e5c <SDMMC_CmdAppCommand+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
24009df4:	01d0      	lsls	r0, r2, #7
24009df6:	d434      	bmi.n	24009e62 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
24009df8:	0211      	lsls	r1, r2, #8
24009dfa:	d435      	bmi.n	24009e68 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
24009dfc:	0254      	lsls	r4, r2, #9
24009dfe:	d436      	bmi.n	24009e6e <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
24009e00:	0290      	lsls	r0, r2, #10
24009e02:	d440      	bmi.n	24009e86 <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
24009e04:	02d1      	lsls	r1, r2, #11
24009e06:	d43b      	bmi.n	24009e80 <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
24009e08:	0354      	lsls	r4, r2, #13
24009e0a:	d436      	bmi.n	24009e7a <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
24009e0c:	0390      	lsls	r0, r2, #14
24009e0e:	d431      	bmi.n	24009e74 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
24009e10:	03d1      	lsls	r1, r2, #15
24009e12:	d444      	bmi.n	24009e9e <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
24009e14:	0414      	lsls	r4, r2, #16
24009e16:	d43f      	bmi.n	24009e98 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
24009e18:	0450      	lsls	r0, r2, #17
24009e1a:	d43a      	bmi.n	24009e92 <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
24009e1c:	0491      	lsls	r1, r2, #18
24009e1e:	d435      	bmi.n	24009e8c <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
24009e20:	f012 0f08 	tst.w	r2, #8
24009e24:	bf14      	ite	ne
24009e26:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
24009e2a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
24009e2e:	e7bf      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
24009e30:	2201      	movs	r2, #1
24009e32:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
24009e34:	e7bc      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
24009e36:	2301      	movs	r3, #1
24009e38:	e7ba      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
24009e3a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
24009e3c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
24009e3e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
24009e40:	e7b6      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
24009e42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
24009e46:	e7b3      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
24009e48:	2340      	movs	r3, #64	; 0x40
24009e4a:	e7b1      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
24009e4c:	2380      	movs	r3, #128	; 0x80
24009e4e:	e7af      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
24009e50:	f44f 7380 	mov.w	r3, #256	; 0x100
24009e54:	e7ac      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
24009e56:	f44f 7300 	mov.w	r3, #512	; 0x200
24009e5a:	e7a9      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
24009e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
24009e60:	e7a6      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
24009e62:	f44f 6300 	mov.w	r3, #2048	; 0x800
24009e66:	e7a3      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
24009e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24009e6c:	e7a0      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
24009e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24009e72:	e79d      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
24009e74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
24009e78:	e79a      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
24009e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
24009e7e:	e797      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
24009e80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
24009e84:	e794      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
24009e86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24009e8a:	e791      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
24009e8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
24009e90:	e78e      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
24009e92:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
24009e96:	e78b      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
24009e98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
24009e9c:	e788      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
24009e9e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
24009ea2:	e785      	b.n	24009db0 <SDMMC_CmdAppCommand+0x40>
24009ea4:	2000002c 	.word	0x2000002c
24009ea8:	10624dd3 	.word	0x10624dd3
24009eac:	fffee0c0 	.word	0xfffee0c0
24009eb0:	00200045 	.word	0x00200045
24009eb4:	002000c5 	.word	0x002000c5
24009eb8:	fdffe008 	.word	0xfdffe008

24009ebc <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009ebc:	4a18      	ldr	r2, [pc, #96]	; (24009f20 <SDMMC_CmdAppOperCommand+0x64>)
24009ebe:	4b19      	ldr	r3, [pc, #100]	; (24009f24 <SDMMC_CmdAppOperCommand+0x68>)
24009ec0:	6812      	ldr	r2, [r2, #0]
{
24009ec2:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009ec4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009ec8:	4c17      	ldr	r4, [pc, #92]	; (24009f28 <SDMMC_CmdAppOperCommand+0x6c>)
  SDMMCx->ARG = Command->Argument;
24009eca:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009ecc:	f241 1329 	movw	r3, #4393	; 0x1129
24009ed0:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009ed2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009ed4:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009ed6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009eda:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
24009edc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009ee0:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
24009ee2:	b14a      	cbz	r2, 24009ef8 <SDMMC_CmdAppOperCommand+0x3c>
24009ee4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
24009ee6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
24009ee8:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
24009eea:	f012 0f45 	tst.w	r2, #69	; 0x45
24009eee:	d001      	beq.n	24009ef4 <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
24009ef0:	0492      	lsls	r2, r2, #18
24009ef2:	d507      	bpl.n	24009f04 <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
24009ef4:	1c59      	adds	r1, r3, #1
24009ef6:	d1f6      	bne.n	24009ee6 <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
24009ef8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
24009efc:	4618      	mov	r0, r3
24009efe:	f85d 4b04 	ldr.w	r4, [sp], #4
24009f02:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
24009f04:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009f06:	f013 0304 	ands.w	r3, r3, #4
24009f0a:	d105      	bne.n	24009f18 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
24009f0c:	4a07      	ldr	r2, [pc, #28]	; (24009f2c <SDMMC_CmdAppOperCommand+0x70>)
}
24009f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
24009f12:	6382      	str	r2, [r0, #56]	; 0x38
}
24009f14:	4618      	mov	r0, r3
24009f16:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
24009f18:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
24009f1a:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
24009f1c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
24009f1e:	e7ed      	b.n	24009efc <SDMMC_CmdAppOperCommand+0x40>
24009f20:	2000002c 	.word	0x2000002c
24009f24:	10624dd3 	.word	0x10624dd3
24009f28:	fffee0c0 	.word	0xfffee0c0
24009f2c:	002000c5 	.word	0x002000c5

24009f30 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009f30:	4a4c      	ldr	r2, [pc, #304]	; (2400a064 <SDMMC_CmdBusWidth+0x134>)
24009f32:	4b4d      	ldr	r3, [pc, #308]	; (2400a068 <SDMMC_CmdBusWidth+0x138>)
24009f34:	6812      	ldr	r2, [r2, #0]
{
24009f36:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009f38:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009f3c:	4c4b      	ldr	r4, [pc, #300]	; (2400a06c <SDMMC_CmdBusWidth+0x13c>)
  SDMMCx->ARG = Command->Argument;
24009f3e:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009f40:	f241 1306 	movw	r3, #4358	; 0x1106
24009f44:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009f46:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009f48:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009f4a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009f4e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
24009f50:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
24009f54:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
24009f56:	b14a      	cbz	r2, 24009f6c <SDMMC_CmdBusWidth+0x3c>
24009f58:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
24009f5a:	4945      	ldr	r1, [pc, #276]	; (2400a070 <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
24009f5c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
24009f5e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
24009f60:	420a      	tst	r2, r1
24009f62:	d001      	beq.n	24009f68 <SDMMC_CmdBusWidth+0x38>
24009f64:	0492      	lsls	r2, r2, #18
24009f66:	d507      	bpl.n	24009f78 <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
24009f68:	1c5c      	adds	r4, r3, #1
24009f6a:	d1f7      	bne.n	24009f5c <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
24009f6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
24009f70:	4618      	mov	r0, r3
24009f72:	f85d 4b04 	ldr.w	r4, [sp], #4
24009f76:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
24009f78:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009f7a:	075c      	lsls	r4, r3, #29
24009f7c:	d43d      	bmi.n	24009ffa <SDMMC_CmdBusWidth+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
24009f7e:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009f80:	f013 0301 	ands.w	r3, r3, #1
24009f84:	d134      	bne.n	24009ff0 <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
24009f86:	4b3b      	ldr	r3, [pc, #236]	; (2400a074 <SDMMC_CmdBusWidth+0x144>)
24009f88:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
24009f8a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
24009f8c:	b2db      	uxtb	r3, r3
24009f8e:	2b06      	cmp	r3, #6
24009f90:	d131      	bne.n	24009ff6 <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
24009f92:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
24009f94:	4b38      	ldr	r3, [pc, #224]	; (2400a078 <SDMMC_CmdBusWidth+0x148>)
24009f96:	4013      	ands	r3, r2
24009f98:	2b00      	cmp	r3, #0
24009f9a:	d0e9      	beq.n	24009f70 <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
24009f9c:	2a00      	cmp	r2, #0
24009f9e:	db30      	blt.n	2400a002 <SDMMC_CmdBusWidth+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
24009fa0:	0051      	lsls	r1, r2, #1
24009fa2:	d431      	bmi.n	2400a008 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
24009fa4:	0094      	lsls	r4, r2, #2
24009fa6:	d431      	bmi.n	2400a00c <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
24009fa8:	00d0      	lsls	r0, r2, #3
24009faa:	d431      	bmi.n	2400a010 <SDMMC_CmdBusWidth+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
24009fac:	0111      	lsls	r1, r2, #4
24009fae:	d432      	bmi.n	2400a016 <SDMMC_CmdBusWidth+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
24009fb0:	0154      	lsls	r4, r2, #5
24009fb2:	d433      	bmi.n	2400a01c <SDMMC_CmdBusWidth+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
24009fb4:	01d0      	lsls	r0, r2, #7
24009fb6:	d434      	bmi.n	2400a022 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
24009fb8:	0211      	lsls	r1, r2, #8
24009fba:	d435      	bmi.n	2400a028 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
24009fbc:	0254      	lsls	r4, r2, #9
24009fbe:	d436      	bmi.n	2400a02e <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
24009fc0:	0290      	lsls	r0, r2, #10
24009fc2:	d440      	bmi.n	2400a046 <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
24009fc4:	02d1      	lsls	r1, r2, #11
24009fc6:	d43b      	bmi.n	2400a040 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
24009fc8:	0354      	lsls	r4, r2, #13
24009fca:	d436      	bmi.n	2400a03a <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
24009fcc:	0390      	lsls	r0, r2, #14
24009fce:	d431      	bmi.n	2400a034 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
24009fd0:	03d1      	lsls	r1, r2, #15
24009fd2:	d444      	bmi.n	2400a05e <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
24009fd4:	0414      	lsls	r4, r2, #16
24009fd6:	d43f      	bmi.n	2400a058 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
24009fd8:	0450      	lsls	r0, r2, #17
24009fda:	d43a      	bmi.n	2400a052 <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
24009fdc:	0491      	lsls	r1, r2, #18
24009fde:	d435      	bmi.n	2400a04c <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
24009fe0:	f012 0f08 	tst.w	r2, #8
24009fe4:	bf14      	ite	ne
24009fe6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
24009fea:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
24009fee:	e7bf      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
24009ff0:	2201      	movs	r2, #1
24009ff2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
24009ff4:	e7bc      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
24009ff6:	2301      	movs	r3, #1
24009ff8:	e7ba      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
24009ffa:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
24009ffc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
24009ffe:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400a000:	e7b6      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400a002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a006:	e7b3      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400a008:	2340      	movs	r3, #64	; 0x40
2400a00a:	e7b1      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400a00c:	2380      	movs	r3, #128	; 0x80
2400a00e:	e7af      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400a010:	f44f 7380 	mov.w	r3, #256	; 0x100
2400a014:	e7ac      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400a016:	f44f 7300 	mov.w	r3, #512	; 0x200
2400a01a:	e7a9      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400a01c:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400a020:	e7a6      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400a022:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400a026:	e7a3      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400a028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400a02c:	e7a0      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400a02e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400a032:	e79d      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400a034:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400a038:	e79a      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400a03a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400a03e:	e797      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
2400a040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400a044:	e794      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400a046:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400a04a:	e791      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400a04c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400a050:	e78e      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400a052:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400a056:	e78b      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400a058:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400a05c:	e788      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400a05e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400a062:	e785      	b.n	24009f70 <SDMMC_CmdBusWidth+0x40>
2400a064:	2000002c 	.word	0x2000002c
2400a068:	10624dd3 	.word	0x10624dd3
2400a06c:	fffee0c0 	.word	0xfffee0c0
2400a070:	00200045 	.word	0x00200045
2400a074:	002000c5 	.word	0x002000c5
2400a078:	fdffe008 	.word	0xfdffe008

2400a07c <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a07c:	4a4d      	ldr	r2, [pc, #308]	; (2400a1b4 <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
2400a07e:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a080:	494d      	ldr	r1, [pc, #308]	; (2400a1b8 <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a082:	6812      	ldr	r2, [r2, #0]
{
2400a084:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a086:	4c4d      	ldr	r4, [pc, #308]	; (2400a1bc <SDMMC_CmdSendSCR+0x140>)
  SDMMCx->ARG = Command->Argument;
2400a088:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a08a:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a08e:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a092:	68c4      	ldr	r4, [r0, #12]
2400a094:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a096:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a098:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a09a:	f241 3188 	movw	r1, #5000	; 0x1388
2400a09e:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a0a2:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400a0a4:	b14a      	cbz	r2, 2400a0ba <SDMMC_CmdSendSCR+0x3e>
2400a0a6:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400a0a8:	4945      	ldr	r1, [pc, #276]	; (2400a1c0 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
2400a0aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400a0ac:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400a0ae:	420a      	tst	r2, r1
2400a0b0:	d001      	beq.n	2400a0b6 <SDMMC_CmdSendSCR+0x3a>
2400a0b2:	0492      	lsls	r2, r2, #18
2400a0b4:	d507      	bpl.n	2400a0c6 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
2400a0b6:	1c5c      	adds	r4, r3, #1
2400a0b8:	d1f7      	bne.n	2400a0aa <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400a0ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400a0be:	4618      	mov	r0, r3
2400a0c0:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a0c4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400a0c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a0c8:	075c      	lsls	r4, r3, #29
2400a0ca:	d43d      	bmi.n	2400a148 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400a0cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a0ce:	f013 0301 	ands.w	r3, r3, #1
2400a0d2:	d134      	bne.n	2400a13e <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400a0d4:	4b3b      	ldr	r3, [pc, #236]	; (2400a1c4 <SDMMC_CmdSendSCR+0x148>)
2400a0d6:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400a0d8:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400a0da:	b2db      	uxtb	r3, r3
2400a0dc:	2b33      	cmp	r3, #51	; 0x33
2400a0de:	d131      	bne.n	2400a144 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
2400a0e0:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400a0e2:	4b39      	ldr	r3, [pc, #228]	; (2400a1c8 <SDMMC_CmdSendSCR+0x14c>)
2400a0e4:	4013      	ands	r3, r2
2400a0e6:	2b00      	cmp	r3, #0
2400a0e8:	d0e9      	beq.n	2400a0be <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400a0ea:	2a00      	cmp	r2, #0
2400a0ec:	db30      	blt.n	2400a150 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400a0ee:	0051      	lsls	r1, r2, #1
2400a0f0:	d431      	bmi.n	2400a156 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400a0f2:	0094      	lsls	r4, r2, #2
2400a0f4:	d431      	bmi.n	2400a15a <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400a0f6:	00d0      	lsls	r0, r2, #3
2400a0f8:	d431      	bmi.n	2400a15e <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400a0fa:	0111      	lsls	r1, r2, #4
2400a0fc:	d432      	bmi.n	2400a164 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400a0fe:	0154      	lsls	r4, r2, #5
2400a100:	d433      	bmi.n	2400a16a <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400a102:	01d0      	lsls	r0, r2, #7
2400a104:	d434      	bmi.n	2400a170 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400a106:	0211      	lsls	r1, r2, #8
2400a108:	d435      	bmi.n	2400a176 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400a10a:	0254      	lsls	r4, r2, #9
2400a10c:	d436      	bmi.n	2400a17c <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400a10e:	0290      	lsls	r0, r2, #10
2400a110:	d440      	bmi.n	2400a194 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400a112:	02d1      	lsls	r1, r2, #11
2400a114:	d43b      	bmi.n	2400a18e <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400a116:	0354      	lsls	r4, r2, #13
2400a118:	d436      	bmi.n	2400a188 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400a11a:	0390      	lsls	r0, r2, #14
2400a11c:	d431      	bmi.n	2400a182 <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400a11e:	03d1      	lsls	r1, r2, #15
2400a120:	d444      	bmi.n	2400a1ac <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400a122:	0414      	lsls	r4, r2, #16
2400a124:	d43f      	bmi.n	2400a1a6 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400a126:	0450      	lsls	r0, r2, #17
2400a128:	d43a      	bmi.n	2400a1a0 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400a12a:	0491      	lsls	r1, r2, #18
2400a12c:	d435      	bmi.n	2400a19a <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400a12e:	f012 0f08 	tst.w	r2, #8
2400a132:	bf14      	ite	ne
2400a134:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400a138:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400a13c:	e7bf      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400a13e:	2201      	movs	r2, #1
2400a140:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400a142:	e7bc      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400a144:	2301      	movs	r3, #1
2400a146:	e7ba      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400a148:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400a14a:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400a14c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400a14e:	e7b6      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400a150:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a154:	e7b3      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400a156:	2340      	movs	r3, #64	; 0x40
2400a158:	e7b1      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400a15a:	2380      	movs	r3, #128	; 0x80
2400a15c:	e7af      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400a15e:	f44f 7380 	mov.w	r3, #256	; 0x100
2400a162:	e7ac      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400a164:	f44f 7300 	mov.w	r3, #512	; 0x200
2400a168:	e7a9      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400a16a:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400a16e:	e7a6      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400a170:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400a174:	e7a3      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400a176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400a17a:	e7a0      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400a17c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400a180:	e79d      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400a182:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400a186:	e79a      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400a188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400a18c:	e797      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
2400a18e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400a192:	e794      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400a194:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400a198:	e791      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
2400a19a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400a19e:	e78e      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400a1a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400a1a4:	e78b      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400a1a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400a1aa:	e788      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400a1ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400a1b0:	e785      	b.n	2400a0be <SDMMC_CmdSendSCR+0x42>
2400a1b2:	bf00      	nop
2400a1b4:	2000002c 	.word	0x2000002c
2400a1b8:	fffee0c0 	.word	0xfffee0c0
2400a1bc:	10624dd3 	.word	0x10624dd3
2400a1c0:	00200045 	.word	0x00200045
2400a1c4:	002000c5 	.word	0x002000c5
2400a1c8:	fdffe008 	.word	0xfdffe008

2400a1cc <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a1cc:	4a1a      	ldr	r2, [pc, #104]	; (2400a238 <SDMMC_CmdSendCID+0x6c>)
{
2400a1ce:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400a1d0:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a1d2:	481a      	ldr	r0, [pc, #104]	; (2400a23c <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a1d4:	6812      	ldr	r2, [r2, #0]
{
2400a1d6:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a1d8:	4c19      	ldr	r4, [pc, #100]	; (2400a240 <SDMMC_CmdSendCID+0x74>)
  SDMMCx->ARG = Command->Argument;
2400a1da:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a1dc:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a1e0:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a1e4:	68cc      	ldr	r4, [r1, #12]
2400a1e6:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a1e8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a1ea:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a1ec:	f241 3088 	movw	r0, #5000	; 0x1388
2400a1f0:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a1f4:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400a1f6:	b14a      	cbz	r2, 2400a20c <SDMMC_CmdSendCID+0x40>
2400a1f8:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400a1fa:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400a1fc:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400a1fe:	f012 0f45 	tst.w	r2, #69	; 0x45
2400a202:	d001      	beq.n	2400a208 <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400a204:	0492      	lsls	r2, r2, #18
2400a206:	d506      	bpl.n	2400a216 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
2400a208:	1c58      	adds	r0, r3, #1
2400a20a:	d1f6      	bne.n	2400a1fa <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400a20c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400a210:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a214:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400a216:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400a218:	075b      	lsls	r3, r3, #29
2400a21a:	d409      	bmi.n	2400a230 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400a21c:	6b48      	ldr	r0, [r1, #52]	; 0x34
}
2400a21e:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400a222:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400a226:	bf14      	ite	ne
2400a228:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400a22a:	4b06      	ldreq	r3, [pc, #24]	; (2400a244 <SDMMC_CmdSendCID+0x78>)
2400a22c:	638b      	str	r3, [r1, #56]	; 0x38
}
2400a22e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400a230:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400a232:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400a234:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400a236:	e7eb      	b.n	2400a210 <SDMMC_CmdSendCID+0x44>
2400a238:	2000002c 	.word	0x2000002c
2400a23c:	fffee0c0 	.word	0xfffee0c0
2400a240:	10624dd3 	.word	0x10624dd3
2400a244:	002000c5 	.word	0x002000c5

2400a248 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a248:	4a1b      	ldr	r2, [pc, #108]	; (2400a2b8 <SDMMC_CmdSendCSD+0x70>)
{
2400a24a:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a24c:	4b1b      	ldr	r3, [pc, #108]	; (2400a2bc <SDMMC_CmdSendCSD+0x74>)
2400a24e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400a250:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a254:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a258:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400a25c:	4818      	ldr	r0, [pc, #96]	; (2400a2c0 <SDMMC_CmdSendCSD+0x78>)
2400a25e:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a262:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a264:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a266:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a26a:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a26c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a270:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400a274:	1e53      	subs	r3, r2, #1
2400a276:	b14a      	cbz	r2, 2400a28c <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
2400a278:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400a27c:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400a27e:	f012 0f45 	tst.w	r2, #69	; 0x45
2400a282:	d001      	beq.n	2400a288 <SDMMC_CmdSendCSD+0x40>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400a284:	0492      	lsls	r2, r2, #18
2400a286:	d504      	bpl.n	2400a292 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
2400a288:	1c59      	adds	r1, r3, #1
2400a28a:	d1f5      	bne.n	2400a278 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400a28c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400a290:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400a292:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400a296:	075b      	lsls	r3, r3, #29
2400a298:	d409      	bmi.n	2400a2ae <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400a29a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400a29e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400a2a2:	bf14      	ite	ne
2400a2a4:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400a2a6:	4b07      	ldreq	r3, [pc, #28]	; (2400a2c4 <SDMMC_CmdSendCSD+0x7c>)
2400a2a8:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400a2ac:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400a2ae:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400a2b0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400a2b2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400a2b6:	4770      	bx	lr
2400a2b8:	2000002c 	.word	0x2000002c
2400a2bc:	10624dd3 	.word	0x10624dd3
2400a2c0:	fffee0c0 	.word	0xfffee0c0
2400a2c4:	002000c5 	.word	0x002000c5

2400a2c8 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
2400a2c8:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a2ca:	4a27      	ldr	r2, [pc, #156]	; (2400a368 <SDMMC_CmdSetRelAdd+0xa0>)
{
2400a2cc:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400a2ce:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a2d0:	4c26      	ldr	r4, [pc, #152]	; (2400a36c <SDMMC_CmdSetRelAdd+0xa4>)
2400a2d2:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a2d4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a2d6:	401c      	ands	r4, r3
2400a2d8:	f241 1303 	movw	r3, #4355	; 0x1103
2400a2dc:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a2de:	4c24      	ldr	r4, [pc, #144]	; (2400a370 <SDMMC_CmdSetRelAdd+0xa8>)
2400a2e0:	fba4 4202 	umull	r4, r2, r4, r2
2400a2e4:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a2e8:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400a2ea:	0a52      	lsrs	r2, r2, #9
2400a2ec:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
2400a2f0:	b14a      	cbz	r2, 2400a306 <SDMMC_CmdSetRelAdd+0x3e>
2400a2f2:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400a2f4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400a2f6:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400a2f8:	f012 0f45 	tst.w	r2, #69	; 0x45
2400a2fc:	d001      	beq.n	2400a302 <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400a2fe:	0492      	lsls	r2, r2, #18
2400a300:	d507      	bpl.n	2400a312 <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
2400a302:	1c5c      	adds	r4, r3, #1
2400a304:	d1f6      	bne.n	2400a2f4 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400a306:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400a30a:	4618      	mov	r0, r3
2400a30c:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a310:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400a312:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a314:	075c      	lsls	r4, r3, #29
2400a316:	d41c      	bmi.n	2400a352 <SDMMC_CmdSetRelAdd+0x8a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400a318:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a31a:	f013 0301 	ands.w	r3, r3, #1
2400a31e:	d113      	bne.n	2400a348 <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
2400a320:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400a322:	b2db      	uxtb	r3, r3
2400a324:	2b03      	cmp	r3, #3
2400a326:	d112      	bne.n	2400a34e <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400a328:	4b12      	ldr	r3, [pc, #72]	; (2400a374 <SDMMC_CmdSetRelAdd+0xac>)
2400a32a:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
2400a32c:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
2400a32e:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
2400a332:	d015      	beq.n	2400a360 <SDMMC_CmdSetRelAdd+0x98>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
2400a334:	0451      	lsls	r1, r2, #17
2400a336:	d410      	bmi.n	2400a35a <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400a338:	f412 4f00 	tst.w	r2, #32768	; 0x8000
2400a33c:	bf14      	ite	ne
2400a33e:	f44f 5380 	movne.w	r3, #4096	; 0x1000
2400a342:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400a346:	e7e0      	b.n	2400a30a <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400a348:	2201      	movs	r2, #1
2400a34a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400a34c:	e7dd      	b.n	2400a30a <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400a34e:	2301      	movs	r3, #1
2400a350:	e7db      	b.n	2400a30a <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400a352:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400a354:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400a356:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400a358:	e7d7      	b.n	2400a30a <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400a35a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400a35e:	e7d4      	b.n	2400a30a <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
2400a360:	0c12      	lsrs	r2, r2, #16
2400a362:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
2400a364:	e7d1      	b.n	2400a30a <SDMMC_CmdSetRelAdd+0x42>
2400a366:	bf00      	nop
2400a368:	2000002c 	.word	0x2000002c
2400a36c:	fffee0c0 	.word	0xfffee0c0
2400a370:	10624dd3 	.word	0x10624dd3
2400a374:	002000c5 	.word	0x002000c5

2400a378 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a378:	4a4c      	ldr	r2, [pc, #304]	; (2400a4ac <SDMMC_CmdSendStatus+0x134>)
2400a37a:	4b4d      	ldr	r3, [pc, #308]	; (2400a4b0 <SDMMC_CmdSendStatus+0x138>)
2400a37c:	6812      	ldr	r2, [r2, #0]
{
2400a37e:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a380:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a384:	4c4b      	ldr	r4, [pc, #300]	; (2400a4b4 <SDMMC_CmdSendStatus+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400a386:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a388:	f241 130d 	movw	r3, #4365	; 0x110d
2400a38c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a38e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a390:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a392:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a396:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a398:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a39c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400a39e:	b14a      	cbz	r2, 2400a3b4 <SDMMC_CmdSendStatus+0x3c>
2400a3a0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400a3a2:	4945      	ldr	r1, [pc, #276]	; (2400a4b8 <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
2400a3a4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400a3a6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400a3a8:	420a      	tst	r2, r1
2400a3aa:	d001      	beq.n	2400a3b0 <SDMMC_CmdSendStatus+0x38>
2400a3ac:	0492      	lsls	r2, r2, #18
2400a3ae:	d507      	bpl.n	2400a3c0 <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
2400a3b0:	1c5c      	adds	r4, r3, #1
2400a3b2:	d1f7      	bne.n	2400a3a4 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
2400a3b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400a3b8:	4618      	mov	r0, r3
2400a3ba:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a3be:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400a3c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a3c2:	075c      	lsls	r4, r3, #29
2400a3c4:	d43d      	bmi.n	2400a442 <SDMMC_CmdSendStatus+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400a3c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a3c8:	f013 0301 	ands.w	r3, r3, #1
2400a3cc:	d134      	bne.n	2400a438 <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400a3ce:	4b3b      	ldr	r3, [pc, #236]	; (2400a4bc <SDMMC_CmdSendStatus+0x144>)
2400a3d0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400a3d2:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400a3d4:	b2db      	uxtb	r3, r3
2400a3d6:	2b0d      	cmp	r3, #13
2400a3d8:	d131      	bne.n	2400a43e <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
2400a3da:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400a3dc:	4b38      	ldr	r3, [pc, #224]	; (2400a4c0 <SDMMC_CmdSendStatus+0x148>)
2400a3de:	4013      	ands	r3, r2
2400a3e0:	2b00      	cmp	r3, #0
2400a3e2:	d0e9      	beq.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400a3e4:	2a00      	cmp	r2, #0
2400a3e6:	db30      	blt.n	2400a44a <SDMMC_CmdSendStatus+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400a3e8:	0051      	lsls	r1, r2, #1
2400a3ea:	d431      	bmi.n	2400a450 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400a3ec:	0094      	lsls	r4, r2, #2
2400a3ee:	d431      	bmi.n	2400a454 <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400a3f0:	00d0      	lsls	r0, r2, #3
2400a3f2:	d431      	bmi.n	2400a458 <SDMMC_CmdSendStatus+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400a3f4:	0111      	lsls	r1, r2, #4
2400a3f6:	d432      	bmi.n	2400a45e <SDMMC_CmdSendStatus+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400a3f8:	0154      	lsls	r4, r2, #5
2400a3fa:	d433      	bmi.n	2400a464 <SDMMC_CmdSendStatus+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400a3fc:	01d0      	lsls	r0, r2, #7
2400a3fe:	d434      	bmi.n	2400a46a <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400a400:	0211      	lsls	r1, r2, #8
2400a402:	d435      	bmi.n	2400a470 <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400a404:	0254      	lsls	r4, r2, #9
2400a406:	d436      	bmi.n	2400a476 <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400a408:	0290      	lsls	r0, r2, #10
2400a40a:	d440      	bmi.n	2400a48e <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400a40c:	02d1      	lsls	r1, r2, #11
2400a40e:	d43b      	bmi.n	2400a488 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400a410:	0354      	lsls	r4, r2, #13
2400a412:	d436      	bmi.n	2400a482 <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400a414:	0390      	lsls	r0, r2, #14
2400a416:	d431      	bmi.n	2400a47c <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400a418:	03d1      	lsls	r1, r2, #15
2400a41a:	d444      	bmi.n	2400a4a6 <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400a41c:	0414      	lsls	r4, r2, #16
2400a41e:	d43f      	bmi.n	2400a4a0 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400a420:	0450      	lsls	r0, r2, #17
2400a422:	d43a      	bmi.n	2400a49a <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400a424:	0491      	lsls	r1, r2, #18
2400a426:	d435      	bmi.n	2400a494 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400a428:	f012 0f08 	tst.w	r2, #8
2400a42c:	bf14      	ite	ne
2400a42e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400a432:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400a436:	e7bf      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400a438:	2201      	movs	r2, #1
2400a43a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400a43c:	e7bc      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400a43e:	2301      	movs	r3, #1
2400a440:	e7ba      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400a442:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400a444:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400a446:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400a448:	e7b6      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400a44a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a44e:	e7b3      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400a450:	2340      	movs	r3, #64	; 0x40
2400a452:	e7b1      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400a454:	2380      	movs	r3, #128	; 0x80
2400a456:	e7af      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400a458:	f44f 7380 	mov.w	r3, #256	; 0x100
2400a45c:	e7ac      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400a45e:	f44f 7300 	mov.w	r3, #512	; 0x200
2400a462:	e7a9      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400a464:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400a468:	e7a6      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400a46a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400a46e:	e7a3      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400a470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400a474:	e7a0      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400a476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400a47a:	e79d      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400a47c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400a480:	e79a      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400a482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400a486:	e797      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
2400a488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400a48c:	e794      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400a48e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400a492:	e791      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
2400a494:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400a498:	e78e      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400a49a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400a49e:	e78b      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400a4a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400a4a4:	e788      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400a4a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400a4aa:	e785      	b.n	2400a3b8 <SDMMC_CmdSendStatus+0x40>
2400a4ac:	2000002c 	.word	0x2000002c
2400a4b0:	10624dd3 	.word	0x10624dd3
2400a4b4:	fffee0c0 	.word	0xfffee0c0
2400a4b8:	00200045 	.word	0x00200045
2400a4bc:	002000c5 	.word	0x002000c5
2400a4c0:	fdffe008 	.word	0xfdffe008

2400a4c4 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a4c4:	4a4d      	ldr	r2, [pc, #308]	; (2400a5fc <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
2400a4c6:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a4c8:	494d      	ldr	r1, [pc, #308]	; (2400a600 <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a4ca:	6812      	ldr	r2, [r2, #0]
{
2400a4cc:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a4ce:	4c4d      	ldr	r4, [pc, #308]	; (2400a604 <SDMMC_CmdStatusRegister+0x140>)
  SDMMCx->ARG = Command->Argument;
2400a4d0:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a4d2:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a4d6:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a4da:	68c4      	ldr	r4, [r0, #12]
2400a4dc:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a4de:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a4e0:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400a4e2:	f241 3188 	movw	r1, #5000	; 0x1388
2400a4e6:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400a4ea:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
2400a4ec:	b14a      	cbz	r2, 2400a502 <SDMMC_CmdStatusRegister+0x3e>
2400a4ee:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400a4f0:	4945      	ldr	r1, [pc, #276]	; (2400a608 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
2400a4f2:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
2400a4f4:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400a4f6:	420a      	tst	r2, r1
2400a4f8:	d001      	beq.n	2400a4fe <SDMMC_CmdStatusRegister+0x3a>
2400a4fa:	0492      	lsls	r2, r2, #18
2400a4fc:	d507      	bpl.n	2400a50e <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
2400a4fe:	1c5c      	adds	r4, r3, #1
2400a500:	d1f7      	bne.n	2400a4f2 <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400a502:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
2400a506:	4618      	mov	r0, r3
2400a508:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a50c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400a50e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a510:	075c      	lsls	r4, r3, #29
2400a512:	d43d      	bmi.n	2400a590 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400a514:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a516:	f013 0301 	ands.w	r3, r3, #1
2400a51a:	d134      	bne.n	2400a586 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400a51c:	4b3b      	ldr	r3, [pc, #236]	; (2400a60c <SDMMC_CmdStatusRegister+0x148>)
2400a51e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400a520:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400a522:	b2db      	uxtb	r3, r3
2400a524:	2b0d      	cmp	r3, #13
2400a526:	d131      	bne.n	2400a58c <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
2400a528:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400a52a:	4b39      	ldr	r3, [pc, #228]	; (2400a610 <SDMMC_CmdStatusRegister+0x14c>)
2400a52c:	4013      	ands	r3, r2
2400a52e:	2b00      	cmp	r3, #0
2400a530:	d0e9      	beq.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400a532:	2a00      	cmp	r2, #0
2400a534:	db30      	blt.n	2400a598 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400a536:	0051      	lsls	r1, r2, #1
2400a538:	d431      	bmi.n	2400a59e <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400a53a:	0094      	lsls	r4, r2, #2
2400a53c:	d431      	bmi.n	2400a5a2 <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400a53e:	00d0      	lsls	r0, r2, #3
2400a540:	d431      	bmi.n	2400a5a6 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400a542:	0111      	lsls	r1, r2, #4
2400a544:	d432      	bmi.n	2400a5ac <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400a546:	0154      	lsls	r4, r2, #5
2400a548:	d433      	bmi.n	2400a5b2 <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400a54a:	01d0      	lsls	r0, r2, #7
2400a54c:	d434      	bmi.n	2400a5b8 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400a54e:	0211      	lsls	r1, r2, #8
2400a550:	d435      	bmi.n	2400a5be <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400a552:	0254      	lsls	r4, r2, #9
2400a554:	d436      	bmi.n	2400a5c4 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400a556:	0290      	lsls	r0, r2, #10
2400a558:	d440      	bmi.n	2400a5dc <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400a55a:	02d1      	lsls	r1, r2, #11
2400a55c:	d43b      	bmi.n	2400a5d6 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400a55e:	0354      	lsls	r4, r2, #13
2400a560:	d436      	bmi.n	2400a5d0 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400a562:	0390      	lsls	r0, r2, #14
2400a564:	d431      	bmi.n	2400a5ca <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400a566:	03d1      	lsls	r1, r2, #15
2400a568:	d444      	bmi.n	2400a5f4 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400a56a:	0414      	lsls	r4, r2, #16
2400a56c:	d43f      	bmi.n	2400a5ee <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400a56e:	0450      	lsls	r0, r2, #17
2400a570:	d43a      	bmi.n	2400a5e8 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400a572:	0491      	lsls	r1, r2, #18
2400a574:	d435      	bmi.n	2400a5e2 <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400a576:	f012 0f08 	tst.w	r2, #8
2400a57a:	bf14      	ite	ne
2400a57c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
2400a580:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
2400a584:	e7bf      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400a586:	2201      	movs	r2, #1
2400a588:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400a58a:	e7bc      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400a58c:	2301      	movs	r3, #1
2400a58e:	e7ba      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400a590:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400a592:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400a594:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400a596:	e7b6      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400a598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2400a59c:	e7b3      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400a59e:	2340      	movs	r3, #64	; 0x40
2400a5a0:	e7b1      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400a5a2:	2380      	movs	r3, #128	; 0x80
2400a5a4:	e7af      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400a5a6:	f44f 7380 	mov.w	r3, #256	; 0x100
2400a5aa:	e7ac      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400a5ac:	f44f 7300 	mov.w	r3, #512	; 0x200
2400a5b0:	e7a9      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400a5b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400a5b6:	e7a6      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400a5b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
2400a5bc:	e7a3      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400a5be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400a5c2:	e7a0      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400a5c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400a5c8:	e79d      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400a5ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2400a5ce:	e79a      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400a5d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
2400a5d4:	e797      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
2400a5d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2400a5da:	e794      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400a5dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2400a5e0:	e791      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
2400a5e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2400a5e6:	e78e      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400a5e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2400a5ec:	e78b      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400a5ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2400a5f2:	e788      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400a5f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2400a5f8:	e785      	b.n	2400a506 <SDMMC_CmdStatusRegister+0x42>
2400a5fa:	bf00      	nop
2400a5fc:	2000002c 	.word	0x2000002c
2400a600:	fffee0c0 	.word	0xfffee0c0
2400a604:	10624dd3 	.word	0x10624dd3
2400a608:	00200045 	.word	0x00200045
2400a60c:	002000c5 	.word	0x002000c5
2400a610:	fdffe008 	.word	0xfdffe008

2400a614 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
2400a614:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
2400a616:	4903      	ldr	r1, [pc, #12]	; (2400a624 <MX_FATFS_Init+0x10>)
2400a618:	4803      	ldr	r0, [pc, #12]	; (2400a628 <MX_FATFS_Init+0x14>)
2400a61a:	f003 f87d 	bl	2400d718 <FATFS_LinkDriver>
2400a61e:	4b03      	ldr	r3, [pc, #12]	; (2400a62c <MX_FATFS_Init+0x18>)
2400a620:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
2400a622:	bd08      	pop	{r3, pc}
2400a624:	20012240 	.word	0x20012240
2400a628:	24014120 	.word	0x24014120
2400a62c:	20012244 	.word	0x20012244

2400a630 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
2400a630:	2000      	movs	r0, #0
2400a632:	4770      	bx	lr

2400a634 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400a634:	b510      	push	{r4, lr}
2400a636:	4694      	mov	ip, r2
2400a638:	b082      	sub	sp, #8
2400a63a:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
2400a63c:	460a      	mov	r2, r1
2400a63e:	4663      	mov	r3, ip
2400a640:	4601      	mov	r1, r0
2400a642:	9400      	str	r4, [sp, #0]
2400a644:	4803      	ldr	r0, [pc, #12]	; (2400a654 <BSP_SD_ReadBlocks+0x20>)
2400a646:	f7fd fa77 	bl	24007b38 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400a64a:	3800      	subs	r0, #0
2400a64c:	bf18      	it	ne
2400a64e:	2001      	movne	r0, #1
2400a650:	b002      	add	sp, #8
2400a652:	bd10      	pop	{r4, pc}
2400a654:	20011bd0 	.word	0x20011bd0

2400a658 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400a658:	b510      	push	{r4, lr}
2400a65a:	4694      	mov	ip, r2
2400a65c:	b082      	sub	sp, #8
2400a65e:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
2400a660:	460a      	mov	r2, r1
2400a662:	4663      	mov	r3, ip
2400a664:	4601      	mov	r1, r0
2400a666:	9400      	str	r4, [sp, #0]
2400a668:	4803      	ldr	r0, [pc, #12]	; (2400a678 <BSP_SD_WriteBlocks+0x20>)
2400a66a:	f7fd fb85 	bl	24007d78 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400a66e:	3800      	subs	r0, #0
2400a670:	bf18      	it	ne
2400a672:	2001      	movne	r0, #1
2400a674:	b002      	add	sp, #8
2400a676:	bd10      	pop	{r4, pc}
2400a678:	20011bd0 	.word	0x20011bd0

2400a67c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
2400a67c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
2400a67e:	4803      	ldr	r0, [pc, #12]	; (2400a68c <BSP_SD_GetCardState+0x10>)
2400a680:	f7fd ffbe 	bl	24008600 <HAL_SD_GetCardState>
}
2400a684:	3804      	subs	r0, #4
2400a686:	bf18      	it	ne
2400a688:	2001      	movne	r0, #1
2400a68a:	bd08      	pop	{r3, pc}
2400a68c:	20011bd0 	.word	0x20011bd0

2400a690 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
2400a690:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
2400a692:	4801      	ldr	r0, [pc, #4]	; (2400a698 <BSP_SD_GetCardInfo+0x8>)
2400a694:	f7fd be62 	b.w	2400835c <HAL_SD_GetCardInfo>
2400a698:	20011bd0 	.word	0x20011bd0

2400a69c <BSP_SD_WriteCpltCallback>:
2400a69c:	4770      	bx	lr
2400a69e:	bf00      	nop

2400a6a0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
2400a6a0:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
2400a6a2:	f7ff fffb 	bl	2400a69c <BSP_SD_WriteCpltCallback>
}
2400a6a6:	bd08      	pop	{r3, pc}

2400a6a8 <BSP_SD_ReadCpltCallback>:
2400a6a8:	4770      	bx	lr
2400a6aa:	bf00      	nop

2400a6ac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
2400a6ac:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
2400a6ae:	f7ff fffb 	bl	2400a6a8 <BSP_SD_ReadCpltCallback>
}
2400a6b2:	bd08      	pop	{r3, pc}

2400a6b4 <BSP_SD_Init>:
{
2400a6b4:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
2400a6b6:	f7f7 f851 	bl	2400175c <BSP_SD_IsDetected>
2400a6ba:	2801      	cmp	r0, #1
2400a6bc:	d001      	beq.n	2400a6c2 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
2400a6be:	2002      	movs	r0, #2
}
2400a6c0:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
2400a6c2:	4807      	ldr	r0, [pc, #28]	; (2400a6e0 <BSP_SD_Init+0x2c>)
2400a6c4:	f7fd ff34 	bl	24008530 <HAL_SD_Init>
  if (sd_state == MSD_OK)
2400a6c8:	2800      	cmp	r0, #0
2400a6ca:	d1f9      	bne.n	2400a6c0 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
2400a6cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2400a6d0:	4803      	ldr	r0, [pc, #12]	; (2400a6e0 <BSP_SD_Init+0x2c>)
2400a6d2:	f7fd fe57 	bl	24008384 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
2400a6d6:	3800      	subs	r0, #0
2400a6d8:	bf18      	it	ne
2400a6da:	2001      	movne	r0, #1
}
2400a6dc:	bd08      	pop	{r3, pc}
2400a6de:	bf00      	nop
2400a6e0:	20011bd0 	.word	0x20011bd0

2400a6e4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
2400a6e4:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
2400a6e6:	4c0a      	ldr	r4, [pc, #40]	; (2400a710 <SD_initialize+0x2c>)
2400a6e8:	2501      	movs	r5, #1
2400a6ea:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
2400a6ec:	f7ff ffe2 	bl	2400a6b4 <BSP_SD_Init>
2400a6f0:	b108      	cbz	r0, 2400a6f6 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
2400a6f2:	7820      	ldrb	r0, [r4, #0]
}
2400a6f4:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
2400a6f6:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400a6f8:	f7ff ffc0 	bl	2400a67c <BSP_SD_GetCardState>
2400a6fc:	b918      	cbnz	r0, 2400a706 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
2400a6fe:	7823      	ldrb	r3, [r4, #0]
2400a700:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400a704:	7023      	strb	r3, [r4, #0]
  return Stat;
2400a706:	7823      	ldrb	r3, [r4, #0]
2400a708:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
2400a70a:	7023      	strb	r3, [r4, #0]
  return Stat;
2400a70c:	7820      	ldrb	r0, [r4, #0]
}
2400a70e:	bd38      	pop	{r3, r4, r5, pc}
2400a710:	2000003c 	.word	0x2000003c

2400a714 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
2400a714:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
2400a716:	2301      	movs	r3, #1
2400a718:	4c05      	ldr	r4, [pc, #20]	; (2400a730 <SD_status+0x1c>)
2400a71a:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400a71c:	f7ff ffae 	bl	2400a67c <BSP_SD_GetCardState>
2400a720:	b918      	cbnz	r0, 2400a72a <SD_status+0x16>
    Stat &= ~STA_NOINIT;
2400a722:	7823      	ldrb	r3, [r4, #0]
2400a724:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400a728:	7023      	strb	r3, [r4, #0]
  return Stat;
2400a72a:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
2400a72c:	bd10      	pop	{r4, pc}
2400a72e:	bf00      	nop
2400a730:	2000003c 	.word	0x2000003c

2400a734 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
2400a734:	b508      	push	{r3, lr}
2400a736:	4608      	mov	r0, r1
2400a738:	4611      	mov	r1, r2
2400a73a:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
2400a73c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400a740:	f7ff ff78 	bl	2400a634 <BSP_SD_ReadBlocks>
2400a744:	b108      	cbz	r0, 2400a74a <SD_read+0x16>
  DRESULT res = RES_ERROR;
2400a746:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
2400a748:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400a74a:	f7ff ff97 	bl	2400a67c <BSP_SD_GetCardState>
2400a74e:	2800      	cmp	r0, #0
2400a750:	d0fa      	beq.n	2400a748 <SD_read+0x14>
2400a752:	f7ff ff93 	bl	2400a67c <BSP_SD_GetCardState>
2400a756:	2800      	cmp	r0, #0
2400a758:	d1f7      	bne.n	2400a74a <SD_read+0x16>
2400a75a:	e7f5      	b.n	2400a748 <SD_read+0x14>

2400a75c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400a75c:	4b18      	ldr	r3, [pc, #96]	; (2400a7c0 <SD_ioctl+0x64>)
{
2400a75e:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400a760:	7818      	ldrb	r0, [r3, #0]
{
2400a762:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400a764:	f010 0401 	ands.w	r4, r0, #1
2400a768:	d106      	bne.n	2400a778 <SD_ioctl+0x1c>
2400a76a:	4615      	mov	r5, r2

  switch (cmd)
2400a76c:	2903      	cmp	r1, #3
2400a76e:	d824      	bhi.n	2400a7ba <SD_ioctl+0x5e>
2400a770:	e8df f001 	tbb	[pc, r1]
2400a774:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400a778:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
2400a77a:	4620      	mov	r0, r4
2400a77c:	b00b      	add	sp, #44	; 0x2c
2400a77e:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
2400a780:	460c      	mov	r4, r1
}
2400a782:	4620      	mov	r0, r4
2400a784:	b00b      	add	sp, #44	; 0x2c
2400a786:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400a788:	a801      	add	r0, sp, #4
2400a78a:	f7ff ff81 	bl	2400a690 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400a78e:	9b07      	ldr	r3, [sp, #28]
}
2400a790:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400a792:	602b      	str	r3, [r5, #0]
}
2400a794:	b00b      	add	sp, #44	; 0x2c
2400a796:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400a798:	a801      	add	r0, sp, #4
2400a79a:	f7ff ff79 	bl	2400a690 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
2400a79e:	9b08      	ldr	r3, [sp, #32]
}
2400a7a0:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
2400a7a2:	802b      	strh	r3, [r5, #0]
}
2400a7a4:	b00b      	add	sp, #44	; 0x2c
2400a7a6:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400a7a8:	a801      	add	r0, sp, #4
2400a7aa:	f7ff ff71 	bl	2400a690 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400a7ae:	9b08      	ldr	r3, [sp, #32]
}
2400a7b0:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400a7b2:	0a5b      	lsrs	r3, r3, #9
2400a7b4:	602b      	str	r3, [r5, #0]
}
2400a7b6:	b00b      	add	sp, #44	; 0x2c
2400a7b8:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
2400a7ba:	2404      	movs	r4, #4
2400a7bc:	e7dd      	b.n	2400a77a <SD_ioctl+0x1e>
2400a7be:	bf00      	nop
2400a7c0:	2000003c 	.word	0x2000003c

2400a7c4 <SD_write>:
{
2400a7c4:	b508      	push	{r3, lr}
2400a7c6:	4608      	mov	r0, r1
2400a7c8:	4611      	mov	r1, r2
2400a7ca:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
2400a7cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400a7d0:	f7ff ff42 	bl	2400a658 <BSP_SD_WriteBlocks>
2400a7d4:	b108      	cbz	r0, 2400a7da <SD_write+0x16>
  DRESULT res = RES_ERROR;
2400a7d6:	2001      	movs	r0, #1
}
2400a7d8:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400a7da:	f7ff ff4f 	bl	2400a67c <BSP_SD_GetCardState>
2400a7de:	2800      	cmp	r0, #0
2400a7e0:	d0fa      	beq.n	2400a7d8 <SD_write+0x14>
2400a7e2:	f7ff ff4b 	bl	2400a67c <BSP_SD_GetCardState>
2400a7e6:	2800      	cmp	r0, #0
2400a7e8:	d1f7      	bne.n	2400a7da <SD_write+0x16>
2400a7ea:	e7f5      	b.n	2400a7d8 <SD_write+0x14>

2400a7ec <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
2400a7ec:	4b03      	ldr	r3, [pc, #12]	; (2400a7fc <disk_status+0x10>)
2400a7ee:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400a7f2:	4403      	add	r3, r0
2400a7f4:	6852      	ldr	r2, [r2, #4]
2400a7f6:	7a18      	ldrb	r0, [r3, #8]
2400a7f8:	6853      	ldr	r3, [r2, #4]
2400a7fa:	4718      	bx	r3
2400a7fc:	20012470 	.word	0x20012470

2400a800 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
2400a800:	4b07      	ldr	r3, [pc, #28]	; (2400a820 <disk_initialize+0x20>)
2400a802:	5c1a      	ldrb	r2, [r3, r0]
2400a804:	b952      	cbnz	r2, 2400a81c <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400a806:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400a80a:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
2400a80c:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400a810:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
2400a812:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400a816:	7a08      	ldrb	r0, [r1, #8]
2400a818:	6813      	ldr	r3, [r2, #0]
2400a81a:	4718      	bx	r3
  }
  return stat;
}
2400a81c:	2000      	movs	r0, #0
2400a81e:	4770      	bx	lr
2400a820:	20012470 	.word	0x20012470

2400a824 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
2400a824:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400a826:	4c05      	ldr	r4, [pc, #20]	; (2400a83c <disk_read+0x18>)
2400a828:	eb04 0580 	add.w	r5, r4, r0, lsl #2
2400a82c:	4404      	add	r4, r0
2400a82e:	686d      	ldr	r5, [r5, #4]
2400a830:	7a20      	ldrb	r0, [r4, #8]
2400a832:	68ac      	ldr	r4, [r5, #8]
2400a834:	46a4      	mov	ip, r4
  return res;
}
2400a836:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400a838:	4760      	bx	ip
2400a83a:	bf00      	nop
2400a83c:	20012470 	.word	0x20012470

2400a840 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
2400a840:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400a842:	4c05      	ldr	r4, [pc, #20]	; (2400a858 <disk_write+0x18>)
2400a844:	eb04 0580 	add.w	r5, r4, r0, lsl #2
2400a848:	4404      	add	r4, r0
2400a84a:	686d      	ldr	r5, [r5, #4]
2400a84c:	7a20      	ldrb	r0, [r4, #8]
2400a84e:	68ec      	ldr	r4, [r5, #12]
2400a850:	46a4      	mov	ip, r4
  return res;
}
2400a852:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400a854:	4760      	bx	ip
2400a856:	bf00      	nop
2400a858:	20012470 	.word	0x20012470

2400a85c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
2400a85c:	4b04      	ldr	r3, [pc, #16]	; (2400a870 <disk_ioctl+0x14>)
2400a85e:	eb03 0c00 	add.w	ip, r3, r0
2400a862:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2400a866:	685b      	ldr	r3, [r3, #4]
2400a868:	f89c 0008 	ldrb.w	r0, [ip, #8]
2400a86c:	691b      	ldr	r3, [r3, #16]
2400a86e:	4718      	bx	r3
2400a870:	20012470 	.word	0x20012470

2400a874 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
2400a874:	4b27      	ldr	r3, [pc, #156]	; (2400a914 <inc_lock+0xa0>)
{
2400a876:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
2400a878:	681a      	ldr	r2, [r3, #0]
2400a87a:	6805      	ldr	r5, [r0, #0]
2400a87c:	4295      	cmp	r5, r2
2400a87e:	d01b      	beq.n	2400a8b8 <inc_lock+0x44>
2400a880:	691c      	ldr	r4, [r3, #16]
2400a882:	42ac      	cmp	r4, r5
2400a884:	d006      	beq.n	2400a894 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400a886:	b30a      	cbz	r2, 2400a8cc <inc_lock+0x58>
2400a888:	2c00      	cmp	r4, #0
2400a88a:	d037      	beq.n	2400a8fc <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
2400a88c:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
2400a88e:	4620      	mov	r0, r4
2400a890:	bcf0      	pop	{r4, r5, r6, r7}
2400a892:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
2400a894:	695e      	ldr	r6, [r3, #20]
2400a896:	6887      	ldr	r7, [r0, #8]
2400a898:	42be      	cmp	r6, r7
2400a89a:	d1f4      	bne.n	2400a886 <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
2400a89c:	699e      	ldr	r6, [r3, #24]
2400a89e:	6947      	ldr	r7, [r0, #20]
2400a8a0:	42be      	cmp	r6, r7
2400a8a2:	d1f0      	bne.n	2400a886 <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400a8a4:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400a8a6:	eb03 1002 	add.w	r0, r3, r2, lsl #4
2400a8aa:	bb51      	cbnz	r1, 2400a902 <inc_lock+0x8e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400a8ac:	0111      	lsls	r1, r2, #4
	return i + 1;
2400a8ae:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400a8b0:	8982      	ldrh	r2, [r0, #12]
2400a8b2:	3201      	adds	r2, #1
2400a8b4:	b292      	uxth	r2, r2
2400a8b6:	e01c      	b.n	2400a8f2 <inc_lock+0x7e>
		if (Files[i].fs == dp->obj.fs &&
2400a8b8:	6884      	ldr	r4, [r0, #8]
2400a8ba:	685e      	ldr	r6, [r3, #4]
2400a8bc:	42a6      	cmp	r6, r4
2400a8be:	d1df      	bne.n	2400a880 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
2400a8c0:	689c      	ldr	r4, [r3, #8]
2400a8c2:	6946      	ldr	r6, [r0, #20]
2400a8c4:	42a6      	cmp	r6, r4
2400a8c6:	d1db      	bne.n	2400a880 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400a8c8:	2200      	movs	r2, #0
2400a8ca:	e7ec      	b.n	2400a8a6 <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400a8cc:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400a8ce:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
2400a8d0:	ea4f 1102 	mov.w	r1, r2, lsl #4
2400a8d4:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
		Files[i].clu = dp->obj.sclust;
2400a8d8:	6882      	ldr	r2, [r0, #8]
		Files[i].fs = dp->obj.fs;
2400a8da:	505d      	str	r5, [r3, r1]
		Files[i].clu = dp->obj.sclust;
2400a8dc:	6945      	ldr	r5, [r0, #20]
2400a8de:	e9cc 2501 	strd	r2, r5, [ip, #4]
		Files[i].ctr = 0;
2400a8e2:	f04f 0200 	mov.w	r2, #0
2400a8e6:	f8ac 200c 	strh.w	r2, [ip, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400a8ea:	bf14      	ite	ne
2400a8ec:	f44f 7280 	movne.w	r2, #256	; 0x100
2400a8f0:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400a8f2:	440b      	add	r3, r1
}
2400a8f4:	4620      	mov	r0, r4
2400a8f6:	bcf0      	pop	{r4, r5, r6, r7}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400a8f8:	819a      	strh	r2, [r3, #12]
}
2400a8fa:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400a8fc:	2402      	movs	r4, #2
2400a8fe:	2201      	movs	r2, #1
2400a900:	e7e5      	b.n	2400a8ce <inc_lock+0x5a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400a902:	8980      	ldrh	r0, [r0, #12]
2400a904:	0111      	lsls	r1, r2, #4
2400a906:	2800      	cmp	r0, #0
2400a908:	d1c0      	bne.n	2400a88c <inc_lock+0x18>
	return i + 1;
2400a90a:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400a90c:	f44f 7280 	mov.w	r2, #256	; 0x100
2400a910:	e7ef      	b.n	2400a8f2 <inc_lock+0x7e>
2400a912:	bf00      	nop
2400a914:	2001224c 	.word	0x2001224c

2400a918 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
2400a918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400a91c:	440a      	add	r2, r1
2400a91e:	460d      	mov	r5, r1
2400a920:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400a922:	4f37      	ldr	r7, [pc, #220]	; (2400aa00 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
2400a924:	42aa      	cmp	r2, r5
2400a926:	d012      	beq.n	2400a94e <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400a928:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400a92c:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400a930:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400a934:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400a938:	2919      	cmp	r1, #25
2400a93a:	d9f3      	bls.n	2400a924 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400a93c:	2c7f      	cmp	r4, #127	; 0x7f
2400a93e:	bf88      	it	hi
2400a940:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2400a944:	2c00      	cmp	r4, #0
2400a946:	d1ed      	bne.n	2400a924 <pattern_matching+0xc>
2400a948:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
2400a94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
2400a94e:	1e1f      	subs	r7, r3, #0
2400a950:	f896 8000 	ldrb.w	r8, [r6]
2400a954:	bf18      	it	ne
2400a956:	2701      	movne	r7, #1
2400a958:	f1b8 0f00 	cmp.w	r8, #0
2400a95c:	d100      	bne.n	2400a960 <pattern_matching+0x48>
2400a95e:	bb8f      	cbnz	r7, 2400a9c4 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400a960:	4c27      	ldr	r4, [pc, #156]	; (2400aa00 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400a962:	4630      	mov	r0, r6
{
2400a964:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400a966:	46a9      	mov	r9, r5
2400a968:	e010      	b.n	2400a98c <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400a96a:	3a20      	subs	r2, #32
2400a96c:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400a96e:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400a972:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400a976:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400a978:	f1bc 0f19 	cmp.w	ip, #25
2400a97c:	d815      	bhi.n	2400a9aa <pattern_matching+0x92>
2400a97e:	3b20      	subs	r3, #32
2400a980:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400a982:	4293      	cmp	r3, r2
2400a984:	d118      	bne.n	2400a9b8 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400a986:	b1eb      	cbz	r3, 2400a9c4 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400a988:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400a98c:	2b3f      	cmp	r3, #63	; 0x3f
2400a98e:	d01c      	beq.n	2400a9ca <pattern_matching+0xb2>
2400a990:	2b2a      	cmp	r3, #42	; 0x2a
2400a992:	d01a      	beq.n	2400a9ca <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400a994:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400a998:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400a99a:	2919      	cmp	r1, #25
2400a99c:	d9e5      	bls.n	2400a96a <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400a99e:	2a7f      	cmp	r2, #127	; 0x7f
2400a9a0:	d9e5      	bls.n	2400a96e <pattern_matching+0x56>
2400a9a2:	4423      	add	r3, r4
2400a9a4:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400a9a8:	e7e1      	b.n	2400a96e <pattern_matching+0x56>
2400a9aa:	2b7f      	cmp	r3, #127	; 0x7f
2400a9ac:	d9e9      	bls.n	2400a982 <pattern_matching+0x6a>
2400a9ae:	4421      	add	r1, r4
2400a9b0:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
2400a9b4:	4293      	cmp	r3, r2
2400a9b6:	d0e6      	beq.n	2400a986 <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400a9b8:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2400a9ba:	2b00      	cmp	r3, #0
2400a9bc:	d0c4      	beq.n	2400a948 <pattern_matching+0x30>
2400a9be:	2f00      	cmp	r7, #0
2400a9c0:	d1cf      	bne.n	2400a962 <pattern_matching+0x4a>
2400a9c2:	e7c1      	b.n	2400a948 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
2400a9c4:	2001      	movs	r0, #1
}
2400a9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400a9ca:	4601      	mov	r1, r0
				nm = nx = 0;
2400a9cc:	2300      	movs	r3, #0
2400a9ce:	f811 cb01 	ldrb.w	ip, [r1], #1
2400a9d2:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400a9d4:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400a9d8:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
2400a9da:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400a9de:	bf0c      	ite	eq
2400a9e0:	3201      	addeq	r2, #1
2400a9e2:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400a9e4:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
2400a9e8:	d0f4      	beq.n	2400a9d4 <pattern_matching+0xbc>
2400a9ea:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400a9ee:	d0f1      	beq.n	2400a9d4 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400a9f0:	4649      	mov	r1, r9
2400a9f2:	f7ff ff91 	bl	2400a918 <pattern_matching>
2400a9f6:	2800      	cmp	r0, #0
2400a9f8:	d1e4      	bne.n	2400a9c4 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
2400a9fa:	f899 3000 	ldrb.w	r3, [r9]
2400a9fe:	e7db      	b.n	2400a9b8 <pattern_matching+0xa0>
2400aa00:	24014148 	.word	0x24014148

2400aa04 <get_fileinfo>:
{
2400aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
2400aa08:	2600      	movs	r6, #0
	FATFS *fs = dp->obj.fs;
2400aa0a:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
2400aa0e:	758e      	strb	r6, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
2400aa10:	69c3      	ldr	r3, [r0, #28]
2400aa12:	2b00      	cmp	r3, #0
2400aa14:	d05a      	beq.n	2400aacc <get_fileinfo+0xc8>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2400aa16:	6b03      	ldr	r3, [r0, #48]	; 0x30
2400aa18:	4607      	mov	r7, r0
2400aa1a:	460d      	mov	r5, r1
2400aa1c:	3301      	adds	r3, #1
2400aa1e:	d01e      	beq.n	2400aa5e <get_fileinfo+0x5a>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400aa20:	f8d8 300c 	ldr.w	r3, [r8, #12]
2400aa24:	8818      	ldrh	r0, [r3, #0]
2400aa26:	2800      	cmp	r0, #0
2400aa28:	d061      	beq.n	2400aaee <get_fileinfo+0xea>
2400aa2a:	f101 0615 	add.w	r6, r1, #21
2400aa2e:	2401      	movs	r4, #1
2400aa30:	e000      	b.n	2400aa34 <get_fileinfo+0x30>
2400aa32:	461c      	mov	r4, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
2400aa34:	2100      	movs	r1, #0
2400aa36:	f002 fe93 	bl	2400d760 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400aa3a:	1c63      	adds	r3, r4, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2400aa3c:	2800      	cmp	r0, #0
2400aa3e:	d056      	beq.n	2400aaee <get_fileinfo+0xea>
2400aa40:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
2400aa44:	d053      	beq.n	2400aaee <get_fileinfo+0xea>
				fno->fname[i++] = (TCHAR)w;
2400aa46:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400aa4a:	f8d8 200c 	ldr.w	r2, [r8, #12]
2400aa4e:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
2400aa52:	2800      	cmp	r0, #0
2400aa54:	d1ed      	bne.n	2400aa32 <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
2400aa56:	442c      	add	r4, r5
2400aa58:	2300      	movs	r3, #0
2400aa5a:	75a3      	strb	r3, [r4, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400aa5c:	7dae      	ldrb	r6, [r5, #22]
2400aa5e:	f8d7 c020 	ldr.w	ip, [r7, #32]
	i = j = 0;
2400aa62:	2000      	movs	r0, #0
			fno->altname[j++] = '.';
2400aa64:	f04f 082e 	mov.w	r8, #46	; 0x2e
2400aa68:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	i = j = 0;
2400aa6c:	4602      	mov	r2, r0
		c = (TCHAR)dp->dir[i++];
2400aa6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
2400aa72:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
2400aa74:	2b20      	cmp	r3, #32
2400aa76:	d018      	beq.n	2400aaaa <get_fileinfo+0xa6>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2400aa78:	2b05      	cmp	r3, #5
2400aa7a:	bf08      	it	eq
2400aa7c:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
2400aa7e:	2a09      	cmp	r2, #9
2400aa80:	d026      	beq.n	2400aad0 <get_fileinfo+0xcc>
		fno->altname[j] = c;
2400aa82:	182c      	adds	r4, r5, r0
2400aa84:	7263      	strb	r3, [r4, #9]
		if (!lfv) {
2400aa86:	b97e      	cbnz	r6, 2400aaa8 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2400aa88:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
2400aa8c:	2f19      	cmp	r7, #25
2400aa8e:	d80a      	bhi.n	2400aaa6 <get_fileinfo+0xa2>
2400aa90:	2a08      	cmp	r2, #8
2400aa92:	f89c e00c 	ldrb.w	lr, [ip, #12]
2400aa96:	bf8c      	ite	hi
2400aa98:	2710      	movhi	r7, #16
2400aa9a:	2708      	movls	r7, #8
2400aa9c:	ea1e 0f07 	tst.w	lr, r7
2400aaa0:	d001      	beq.n	2400aaa6 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
2400aaa2:	3320      	adds	r3, #32
2400aaa4:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
2400aaa6:	75a3      	strb	r3, [r4, #22]
		j++;
2400aaa8:	3001      	adds	r0, #1
	while (i < 11) {		/* Copy name body and extension */
2400aaaa:	2a0b      	cmp	r2, #11
2400aaac:	d1df      	bne.n	2400aa6e <get_fileinfo+0x6a>
		fno->fname[j] = 0;
2400aaae:	182c      	adds	r4, r5, r0
	if (!lfv) {
2400aab0:	b1b6      	cbz	r6, 2400aae0 <get_fileinfo+0xdc>
	fno->altname[j] = 0;	/* Terminate the SFN */
2400aab2:	2300      	movs	r3, #0
2400aab4:	7263      	strb	r3, [r4, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
2400aab6:	f89c 300b 	ldrb.w	r3, [ip, #11]
2400aaba:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
2400aabc:	f8dc 301c 	ldr.w	r3, [ip, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
2400aac0:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
2400aac2:	f8dc 3016 	ldr.w	r3, [ip, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
2400aac6:	0c1a      	lsrs	r2, r3, #16
2400aac8:	80eb      	strh	r3, [r5, #6]
2400aaca:	80aa      	strh	r2, [r5, #4]
}
2400aacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
2400aad0:	182c      	adds	r4, r5, r0
2400aad2:	b90e      	cbnz	r6, 2400aad8 <get_fileinfo+0xd4>
2400aad4:	f884 8016 	strb.w	r8, [r4, #22]
			fno->altname[j++] = '.';
2400aad8:	3001      	adds	r0, #1
2400aada:	f884 8009 	strb.w	r8, [r4, #9]
2400aade:	e7d0      	b.n	2400aa82 <get_fileinfo+0x7e>
		fno->fname[j] = 0;
2400aae0:	75a6      	strb	r6, [r4, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
2400aae2:	f89c 300c 	ldrb.w	r3, [ip, #12]
2400aae6:	2b00      	cmp	r3, #0
2400aae8:	bf08      	it	eq
2400aaea:	462c      	moveq	r4, r5
2400aaec:	e7e1      	b.n	2400aab2 <get_fileinfo+0xae>
			i = j = 0;
2400aaee:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
2400aaf0:	2300      	movs	r3, #0
2400aaf2:	442c      	add	r4, r5
2400aaf4:	75a3      	strb	r3, [r4, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400aaf6:	7dae      	ldrb	r6, [r5, #22]
2400aaf8:	e7b1      	b.n	2400aa5e <get_fileinfo+0x5a>
2400aafa:	bf00      	nop

2400aafc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
2400aafc:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400aafe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
2400ab02:	2300      	movs	r3, #0
{
2400ab04:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ab06:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400ab08:	70c3      	strb	r3, [r0, #3]
2400ab0a:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ab0c:	d00c      	beq.n	2400ab28 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400ab0e:	460d      	mov	r5, r1
2400ab10:	460a      	mov	r2, r1
2400ab12:	2301      	movs	r3, #1
2400ab14:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400ab18:	7840      	ldrb	r0, [r0, #1]
2400ab1a:	f7ff fe83 	bl	2400a824 <disk_read>
2400ab1e:	b110      	cbz	r0, 2400ab26 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2400ab20:	2004      	movs	r0, #4
			fs->winsect = sector;
2400ab22:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
2400ab24:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
2400ab26:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400ab28:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400ab2c:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
2400ab30:	429a      	cmp	r2, r3
2400ab32:	d11a      	bne.n	2400ab6a <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
2400ab34:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
2400ab38:	2be9      	cmp	r3, #233	; 0xe9
2400ab3a:	d007      	beq.n	2400ab4c <check_fs+0x50>
2400ab3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ab3e:	4a0d      	ldr	r2, [pc, #52]	; (2400ab74 <check_fs+0x78>)
2400ab40:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
2400ab44:	4293      	cmp	r3, r2
2400ab46:	d001      	beq.n	2400ab4c <check_fs+0x50>
	return 2;
2400ab48:	2002      	movs	r0, #2
}
2400ab4a:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
2400ab4c:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400ab50:	4a09      	ldr	r2, [pc, #36]	; (2400ab78 <check_fs+0x7c>)
2400ab52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2400ab56:	4293      	cmp	r3, r2
2400ab58:	d009      	beq.n	2400ab6e <check_fs+0x72>
	rv = rv << 8 | ptr[0];
2400ab5a:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400ab5e:	4b07      	ldr	r3, [pc, #28]	; (2400ab7c <check_fs+0x80>)
2400ab60:	4298      	cmp	r0, r3
2400ab62:	bf14      	ite	ne
2400ab64:	2002      	movne	r0, #2
2400ab66:	2000      	moveq	r0, #0
}
2400ab68:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400ab6a:	2003      	movs	r0, #3
}
2400ab6c:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400ab6e:	2000      	movs	r0, #0
}
2400ab70:	bd70      	pop	{r4, r5, r6, pc}
2400ab72:	bf00      	nop
2400ab74:	009000eb 	.word	0x009000eb
2400ab78:	00544146 	.word	0x00544146
2400ab7c:	33544146 	.word	0x33544146

2400ab80 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
2400ab80:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ab82:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
2400ab84:	b083      	sub	sp, #12
2400ab86:	4604      	mov	r4, r0
2400ab88:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ab8a:	b973      	cbnz	r3, 2400abaa <move_window.part.0+0x2a>
2400ab8c:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400ab90:	2301      	movs	r3, #1
2400ab92:	462a      	mov	r2, r5
2400ab94:	7860      	ldrb	r0, [r4, #1]
2400ab96:	f7ff fe45 	bl	2400a824 <disk_read>
2400ab9a:	b910      	cbnz	r0, 2400aba2 <move_window.part.0+0x22>
			fs->winsect = sector;
2400ab9c:	6325      	str	r5, [r4, #48]	; 0x30
}
2400ab9e:	b003      	add	sp, #12
2400aba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
2400aba2:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
2400aba4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
2400aba8:	e7f8      	b.n	2400ab9c <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
2400abaa:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400abac:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400abb0:	2301      	movs	r3, #1
2400abb2:	7840      	ldrb	r0, [r0, #1]
2400abb4:	4632      	mov	r2, r6
2400abb6:	9101      	str	r1, [sp, #4]
2400abb8:	f7ff fe42 	bl	2400a840 <disk_write>
2400abbc:	b9b8      	cbnz	r0, 2400abee <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400abbe:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400abc0:	69e3      	ldr	r3, [r4, #28]
2400abc2:	1ab2      	subs	r2, r6, r2
2400abc4:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
2400abc6:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400abc8:	429a      	cmp	r2, r3
2400abca:	d2e1      	bcs.n	2400ab90 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400abcc:	78a7      	ldrb	r7, [r4, #2]
2400abce:	2f01      	cmp	r7, #1
2400abd0:	d801      	bhi.n	2400abd6 <move_window.part.0+0x56>
2400abd2:	e7dd      	b.n	2400ab90 <move_window.part.0+0x10>
					wsect += fs->fsize;
2400abd4:	69e3      	ldr	r3, [r4, #28]
2400abd6:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400abd8:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400abda:	2301      	movs	r3, #1
2400abdc:	7860      	ldrb	r0, [r4, #1]
2400abde:	4632      	mov	r2, r6
2400abe0:	9101      	str	r1, [sp, #4]
2400abe2:	f7ff fe2d 	bl	2400a840 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400abe6:	2f01      	cmp	r7, #1
2400abe8:	9901      	ldr	r1, [sp, #4]
2400abea:	d1f3      	bne.n	2400abd4 <move_window.part.0+0x54>
2400abec:	e7d0      	b.n	2400ab90 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
2400abee:	2001      	movs	r0, #1
}
2400abf0:	b003      	add	sp, #12
2400abf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

2400abf4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
2400abf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
2400abf8:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
2400abfa:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
2400abfc:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
2400abfe:	b18c      	cbz	r4, 2400ac24 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400ac00:	7825      	ldrb	r5, [r4, #0]
2400ac02:	2d1f      	cmp	r5, #31
2400ac04:	d912      	bls.n	2400ac2c <find_volume+0x38>
2400ac06:	2d3a      	cmp	r5, #58	; 0x3a
2400ac08:	d010      	beq.n	2400ac2c <find_volume+0x38>
2400ac0a:	46a4      	mov	ip, r4
2400ac0c:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
2400ac10:	2b1f      	cmp	r3, #31
2400ac12:	d90d      	bls.n	2400ac30 <find_volume+0x3c>
2400ac14:	2b3a      	cmp	r3, #58	; 0x3a
2400ac16:	d1f9      	bne.n	2400ac0c <find_volume+0x18>
			i = *tp++ - '0';
2400ac18:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400ac1a:	45a4      	cmp	ip, r4
2400ac1c:	d102      	bne.n	2400ac24 <find_volume+0x30>
2400ac1e:	2d30      	cmp	r5, #48	; 0x30
2400ac20:	f000 80da 	beq.w	2400add8 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
2400ac24:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
2400ac26:	4620      	mov	r0, r4
2400ac28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400ac2c:	462b      	mov	r3, r5
2400ac2e:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400ac30:	2b3a      	cmp	r3, #58	; 0x3a
2400ac32:	d0f1      	beq.n	2400ac18 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
2400ac34:	4ba6      	ldr	r3, [pc, #664]	; (2400aed0 <find_volume+0x2dc>)
2400ac36:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400ac38:	2d00      	cmp	r5, #0
2400ac3a:	f000 80c9 	beq.w	2400add0 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
2400ac3e:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
2400ac40:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
2400ac44:	782b      	ldrb	r3, [r5, #0]
2400ac46:	b17b      	cbz	r3, 2400ac68 <find_volume+0x74>
		stat = disk_status(fs->drv);
2400ac48:	7868      	ldrb	r0, [r5, #1]
2400ac4a:	f7ff fdcf 	bl	2400a7ec <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2400ac4e:	07c1      	lsls	r1, r0, #31
2400ac50:	d40a      	bmi.n	2400ac68 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
2400ac52:	2c00      	cmp	r4, #0
2400ac54:	f000 80ab 	beq.w	2400adae <find_volume+0x1ba>
2400ac58:	f010 0404 	ands.w	r4, r0, #4
2400ac5c:	f000 80a7 	beq.w	2400adae <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
2400ac60:	240a      	movs	r4, #10
}
2400ac62:	4620      	mov	r0, r4
2400ac64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
2400ac68:	2000      	movs	r0, #0
2400ac6a:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2400ac6c:	f7ff fdc8 	bl	2400a800 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
2400ac70:	07c2      	lsls	r2, r0, #31
2400ac72:	f100 809f 	bmi.w	2400adb4 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
2400ac76:	b10c      	cbz	r4, 2400ac7c <find_volume+0x88>
2400ac78:	0743      	lsls	r3, r0, #29
2400ac7a:	d4f1      	bmi.n	2400ac60 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
2400ac7c:	2100      	movs	r1, #0
2400ac7e:	4628      	mov	r0, r5
2400ac80:	f7ff ff3c 	bl	2400aafc <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
2400ac84:	2802      	cmp	r0, #2
2400ac86:	d077      	beq.n	2400ad78 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400ac88:	2804      	cmp	r0, #4
2400ac8a:	f000 809f 	beq.w	2400adcc <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400ac8e:	2801      	cmp	r0, #1
2400ac90:	f200 808c 	bhi.w	2400adac <find_volume+0x1b8>
	bsect = 0;
2400ac94:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
2400ac96:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
2400ac9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2400ac9e:	f040 8085 	bne.w	2400adac <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
2400aca2:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
2400aca6:	b902      	cbnz	r2, 2400acaa <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
2400aca8:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400acaa:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
2400acae:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400acb0:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400acb2:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400acb4:	2901      	cmp	r1, #1
2400acb6:	d879      	bhi.n	2400adac <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
2400acb8:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
2400acbc:	b288      	uxth	r0, r1
2400acbe:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2400acc0:	2800      	cmp	r0, #0
2400acc2:	d073      	beq.n	2400adac <find_volume+0x1b8>
2400acc4:	1e48      	subs	r0, r1, #1
2400acc6:	4208      	tst	r0, r1
2400acc8:	d170      	bne.n	2400adac <find_volume+0x1b8>
	rv = ptr[1];
2400acca:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400acce:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400acd2:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400acd6:	d169      	bne.n	2400adac <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
2400acd8:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
2400acdc:	b900      	cbnz	r0, 2400ace0 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
2400acde:	6d68      	ldr	r0, [r5, #84]	; 0x54
	rv = ptr[1];
2400ace0:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
2400ace4:	2f00      	cmp	r7, #0
2400ace6:	d061      	beq.n	2400adac <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
2400ace8:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
2400acec:	eb07 161c 	add.w	r6, r7, ip, lsr #4
2400acf0:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
2400acf2:	42b0      	cmp	r0, r6
2400acf4:	d35a      	bcc.n	2400adac <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400acf6:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400acfa:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400acfc:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400ad00:	d354      	bcc.n	2400adac <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
2400ad02:	f64f 71f5 	movw	r1, #65525	; 0xfff5
2400ad06:	4288      	cmp	r0, r1
2400ad08:	f200 8084 	bhi.w	2400ae14 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
2400ad0c:	f640 71f5 	movw	r1, #4085	; 0xff5
2400ad10:	4288      	cmp	r0, r1
2400ad12:	f200 80a3 	bhi.w	2400ae5c <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400ad16:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400ad18:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400ad1a:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400ad1c:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400ad1e:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400ad20:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400ad22:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400ad24:	f1bc 0f00 	cmp.w	ip, #0
2400ad28:	d040      	beq.n	2400adac <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400ad2a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
2400ad2e:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400ad32:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400ad34:	eb00 0151 	add.w	r1, r0, r1, lsr #1
2400ad38:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400ad3a:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400ad3c:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
2400ad40:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
2400ad44:	d332      	bcc.n	2400adac <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400ad46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400ad4a:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400ad4c:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
2400ad50:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
2400ad52:	4960      	ldr	r1, [pc, #384]	; (2400aed4 <find_volume+0x2e0>)
	fs->fs_type = fmt;		/* FAT sub-type */
2400ad54:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400ad56:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400ad58:	485f      	ldr	r0, [pc, #380]	; (2400aed8 <find_volume+0x2e4>)
		if (Files[i].fs == fs) Files[i].fs = 0;
2400ad5a:	4a60      	ldr	r2, [pc, #384]	; (2400aedc <find_volume+0x2e8>)
	fs->id = ++Fsid;		/* File system mount ID */
2400ad5c:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400ad5e:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400ad60:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400ad62:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400ad64:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
2400ad66:	800b      	strh	r3, [r1, #0]
2400ad68:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400ad6a:	f000 8086 	beq.w	2400ae7a <find_volume+0x286>
2400ad6e:	6913      	ldr	r3, [r2, #16]
2400ad70:	429d      	cmp	r5, r3
2400ad72:	d06f      	beq.n	2400ae54 <find_volume+0x260>
	return FR_OK;
2400ad74:	2400      	movs	r4, #0
2400ad76:	e01a      	b.n	2400adae <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400ad78:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
2400ad7c:	b10e      	cbz	r6, 2400ad82 <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
2400ad7e:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400ad82:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
2400ad86:	b10c      	cbz	r4, 2400ad8c <find_volume+0x198>
	rv = rv << 8 | ptr[0];
2400ad88:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400ad8c:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
2400ad90:	b303      	cbz	r3, 2400add4 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
2400ad92:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400ad96:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
2400ad9a:	b10f      	cbz	r7, 2400ada0 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
2400ad9c:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400ada0:	b9f6      	cbnz	r6, 2400ade0 <find_volume+0x1ec>
2400ada2:	bb2c      	cbnz	r4, 2400adf0 <find_volume+0x1fc>
2400ada4:	f1b8 0f00 	cmp.w	r8, #0
2400ada8:	d12c      	bne.n	2400ae04 <find_volume+0x210>
2400adaa:	b93f      	cbnz	r7, 2400adbc <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400adac:	240d      	movs	r4, #13
}
2400adae:	4620      	mov	r0, r4
2400adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2400adb4:	2403      	movs	r4, #3
}
2400adb6:	4620      	mov	r0, r4
2400adb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400adbc:	4639      	mov	r1, r7
2400adbe:	4628      	mov	r0, r5
2400adc0:	f7ff fe9c 	bl	2400aafc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400adc4:	2801      	cmp	r0, #1
2400adc6:	d95b      	bls.n	2400ae80 <find_volume+0x28c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400adc8:	2804      	cmp	r0, #4
2400adca:	d1ef      	bne.n	2400adac <find_volume+0x1b8>
2400adcc:	2401      	movs	r4, #1
2400adce:	e7ee      	b.n	2400adae <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400add0:	240c      	movs	r4, #12
2400add2:	e7ec      	b.n	2400adae <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400add4:	4698      	mov	r8, r3
2400add6:	e7de      	b.n	2400ad96 <find_volume+0x1a2>
					*path = ++tt;
2400add8:	f10c 0301 	add.w	r3, ip, #1
2400addc:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
2400adde:	e729      	b.n	2400ac34 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400ade0:	4631      	mov	r1, r6
2400ade2:	4628      	mov	r0, r5
2400ade4:	f7ff fe8a 	bl	2400aafc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400ade8:	2801      	cmp	r0, #1
2400adea:	d8da      	bhi.n	2400ada2 <find_volume+0x1ae>
2400adec:	4634      	mov	r4, r6
2400adee:	e752      	b.n	2400ac96 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400adf0:	4621      	mov	r1, r4
2400adf2:	4628      	mov	r0, r5
2400adf4:	f7ff fe82 	bl	2400aafc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400adf8:	2801      	cmp	r0, #1
2400adfa:	f67f af4c 	bls.w	2400ac96 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400adfe:	f1b8 0f00 	cmp.w	r8, #0
2400ae02:	d0d2      	beq.n	2400adaa <find_volume+0x1b6>
2400ae04:	4641      	mov	r1, r8
2400ae06:	4628      	mov	r0, r5
2400ae08:	f7ff fe78 	bl	2400aafc <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400ae0c:	2801      	cmp	r0, #1
2400ae0e:	d8cc      	bhi.n	2400adaa <find_volume+0x1b6>
2400ae10:	4644      	mov	r4, r8
2400ae12:	e740      	b.n	2400ac96 <find_volume+0xa2>
	rv = rv << 8 | ptr[0];
2400ae14:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400ae18:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400ae1a:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400ae1c:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400ae1e:	ea53 030c 	orrs.w	r3, r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400ae22:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400ae24:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
2400ae26:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
2400ae28:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400ae2a:	d1bf      	bne.n	2400adac <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
2400ae2c:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
2400ae2e:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400ae30:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
2400ae34:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400ae36:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
2400ae3a:	d3b7      	bcc.n	2400adac <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400ae3c:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400ae40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400ae44:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400ae46:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
2400ae48:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400ae4a:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400ae4e:	d019      	beq.n	2400ae84 <find_volume+0x290>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400ae50:	2003      	movs	r0, #3
2400ae52:	e77e      	b.n	2400ad52 <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400ae54:	2300      	movs	r3, #0
	return FR_OK;
2400ae56:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400ae58:	6113      	str	r3, [r2, #16]
2400ae5a:	e7a8      	b.n	2400adae <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400ae5c:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400ae5e:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400ae60:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400ae62:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400ae64:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400ae66:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400ae68:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400ae6a:	f1bc 0f00 	cmp.w	ip, #0
2400ae6e:	d09d      	beq.n	2400adac <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400ae70:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400ae72:	0049      	lsls	r1, r1, #1
2400ae74:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400ae76:	62ab      	str	r3, [r5, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
2400ae78:	e760      	b.n	2400ad3c <find_volume+0x148>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400ae7a:	2300      	movs	r3, #0
2400ae7c:	6013      	str	r3, [r2, #0]
2400ae7e:	e776      	b.n	2400ad6e <find_volume+0x17a>
2400ae80:	463c      	mov	r4, r7
2400ae82:	e708      	b.n	2400ac96 <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
2400ae84:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ae86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
2400ae88:	4299      	cmp	r1, r3
2400ae8a:	d004      	beq.n	2400ae96 <find_volume+0x2a2>
2400ae8c:	4628      	mov	r0, r5
2400ae8e:	f7ff fe77 	bl	2400ab80 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
2400ae92:	2800      	cmp	r0, #0
2400ae94:	d1dc      	bne.n	2400ae50 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400ae96:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400ae9a:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
2400ae9e:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400aea0:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
2400aea2:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400aea4:	d1d4      	bne.n	2400ae50 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
2400aea6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
2400aea8:	4b0d      	ldr	r3, [pc, #52]	; (2400aee0 <find_volume+0x2ec>)
2400aeaa:	429a      	cmp	r2, r3
2400aeac:	d1d0      	bne.n	2400ae50 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400aeae:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
2400aeb2:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400aeb6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
2400aeba:	3320      	adds	r3, #32
2400aebc:	429a      	cmp	r2, r3
2400aebe:	d1c7      	bne.n	2400ae50 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
2400aec0:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400aec4:	2003      	movs	r0, #3
2400aec6:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
2400aeca:	e9c5 2304 	strd	r2, r3, [r5, #16]
2400aece:	e740      	b.n	2400ad52 <find_volume+0x15e>
2400aed0:	20012248 	.word	0x20012248
2400aed4:	2001226c 	.word	0x2001226c
2400aed8:	20012270 	.word	0x20012270
2400aedc:	2001224c 	.word	0x2001224c
2400aee0:	41615252 	.word	0x41615252

2400aee4 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400aee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
2400aee8:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400aeea:	4604      	mov	r4, r0
2400aeec:	460d      	mov	r5, r1
2400aeee:	4616      	mov	r6, r2
		switch (fs->fs_type) {
2400aef0:	2b02      	cmp	r3, #2
2400aef2:	d006      	beq.n	2400af02 <put_fat.part.0+0x1e>
2400aef4:	2b03      	cmp	r3, #3
2400aef6:	d052      	beq.n	2400af9e <put_fat.part.0+0xba>
2400aef8:	2b01      	cmp	r3, #1
2400aefa:	d01b      	beq.n	2400af34 <put_fat.part.0+0x50>
2400aefc:	2002      	movs	r0, #2
}
2400aefe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400af02:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400af04:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400af06:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400af0a:	4299      	cmp	r1, r3
2400af0c:	d003      	beq.n	2400af16 <put_fat.part.0+0x32>
2400af0e:	f7ff fe37 	bl	2400ab80 <move_window.part.0>
			if (res != FR_OK) break;
2400af12:	2800      	cmp	r0, #0
2400af14:	d1f3      	bne.n	2400aefe <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400af16:	006d      	lsls	r5, r5, #1
2400af18:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
2400af1c:	f3c6 2207 	ubfx	r2, r6, #8, #8
			break;
2400af20:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400af22:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
2400af26:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400af28:	1959      	adds	r1, r3, r5
			fs->wflag = 1;
2400af2a:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
2400af2c:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
2400af2e:	70e3      	strb	r3, [r4, #3]
}
2400af30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
2400af34:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400af38:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400af3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400af3c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400af40:	4299      	cmp	r1, r3
2400af42:	d003      	beq.n	2400af4c <put_fat.part.0+0x68>
2400af44:	f7ff fe1c 	bl	2400ab80 <move_window.part.0>
			if (res != FR_OK) break;
2400af48:	2800      	cmp	r0, #0
2400af4a:	d1d8      	bne.n	2400aefe <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400af4c:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
2400af4e:	f107 0801 	add.w	r8, r7, #1
2400af52:	f104 0934 	add.w	r9, r4, #52	; 0x34
2400af56:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400af5a:	d542      	bpl.n	2400afe2 <put_fat.part.0+0xfe>
2400af5c:	f819 3007 	ldrb.w	r3, [r9, r7]
2400af60:	f003 030f 	and.w	r3, r3, #15
2400af64:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
2400af68:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
2400af6c:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400af6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400af70:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400af72:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400af76:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400af78:	4299      	cmp	r1, r3
2400af7a:	d004      	beq.n	2400af86 <put_fat.part.0+0xa2>
2400af7c:	4620      	mov	r0, r4
2400af7e:	f7ff fdff 	bl	2400ab80 <move_window.part.0>
			if (res != FR_OK) break;
2400af82:	2800      	cmp	r0, #0
2400af84:	d1bb      	bne.n	2400aefe <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400af86:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400af8a:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
2400af8e:	44c8      	add	r8, r9
			fs->wflag = 1;
2400af90:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400af92:	f888 2000 	strb.w	r2, [r8]
			break;
2400af96:	2000      	movs	r0, #0
			fs->wflag = 1;
2400af98:	70e3      	strb	r3, [r4, #3]
}
2400af9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400af9e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400afa0:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400afa2:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400afa6:	4299      	cmp	r1, r3
2400afa8:	d003      	beq.n	2400afb2 <put_fat.part.0+0xce>
2400afaa:	f7ff fde9 	bl	2400ab80 <move_window.part.0>
			if (res != FR_OK) break;
2400afae:	2800      	cmp	r0, #0
2400afb0:	d1a5      	bne.n	2400aefe <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400afb2:	00ad      	lsls	r5, r5, #2
2400afb4:	f104 0034 	add.w	r0, r4, #52	; 0x34
2400afb8:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
2400afbc:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400afc0:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400afc2:	1941      	adds	r1, r0, r5
2400afc4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400afc8:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
2400afca:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400afcc:	5542      	strb	r2, [r0, r5]
2400afce:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400afd0:	708b      	strb	r3, [r1, #2]
2400afd2:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
2400afd4:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400afd6:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
2400afd8:	70ca      	strb	r2, [r1, #3]
			break;
2400afda:	2000      	movs	r0, #0
			fs->wflag = 1;
2400afdc:	70e3      	strb	r3, [r4, #3]
}
2400afde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400afe2:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
2400afe6:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400afe8:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400afea:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400afec:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400aff0:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400aff2:	4299      	cmp	r1, r3
2400aff4:	d005      	beq.n	2400b002 <put_fat.part.0+0x11e>
2400aff6:	4620      	mov	r0, r4
2400aff8:	f7ff fdc2 	bl	2400ab80 <move_window.part.0>
			if (res != FR_OK) break;
2400affc:	2800      	cmp	r0, #0
2400affe:	f47f af7e 	bne.w	2400aefe <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400b002:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400b006:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
2400b00a:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400b00c:	f898 3000 	ldrb.w	r3, [r8]
2400b010:	f023 060f 	bic.w	r6, r3, #15
2400b014:	4332      	orrs	r2, r6
2400b016:	e7bb      	b.n	2400af90 <put_fat.part.0+0xac>

2400b018 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400b018:	2901      	cmp	r1, #1
2400b01a:	d90e      	bls.n	2400b03a <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
2400b01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400b01e:	6983      	ldr	r3, [r0, #24]
2400b020:	460c      	mov	r4, r1
2400b022:	4605      	mov	r5, r0
2400b024:	4299      	cmp	r1, r3
2400b026:	d206      	bcs.n	2400b036 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
2400b028:	7803      	ldrb	r3, [r0, #0]
2400b02a:	2b02      	cmp	r3, #2
2400b02c:	d03e      	beq.n	2400b0ac <get_fat.isra.0+0x94>
2400b02e:	2b03      	cmp	r3, #3
2400b030:	d02b      	beq.n	2400b08a <get_fat.isra.0+0x72>
2400b032:	2b01      	cmp	r3, #1
2400b034:	d003      	beq.n	2400b03e <get_fat.isra.0+0x26>
2400b036:	2001      	movs	r0, #1
}
2400b038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
2400b03a:	2001      	movs	r0, #1
}
2400b03c:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
2400b03e:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b042:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b044:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b046:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b04a:	4291      	cmp	r1, r2
2400b04c:	d004      	beq.n	2400b058 <get_fat.isra.0+0x40>
2400b04e:	f7ff fd97 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b052:	bba0      	cbnz	r0, 2400b0be <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b054:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b056:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400b058:	1c77      	adds	r7, r6, #1
2400b05a:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b05e:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400b062:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b064:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400b066:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b06a:	d003      	beq.n	2400b074 <get_fat.isra.0+0x5c>
2400b06c:	4628      	mov	r0, r5
2400b06e:	f7ff fd87 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b072:	bb20      	cbnz	r0, 2400b0be <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
2400b074:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400b078:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400b07a:	443d      	add	r5, r7
2400b07c:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
2400b080:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400b084:	d524      	bpl.n	2400b0d0 <get_fat.isra.0+0xb8>
2400b086:	0900      	lsrs	r0, r0, #4
}
2400b088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400b08a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b08c:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400b08e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b092:	4299      	cmp	r1, r3
2400b094:	d002      	beq.n	2400b09c <get_fat.isra.0+0x84>
2400b096:	f7ff fd73 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400b09a:	b980      	cbnz	r0, 2400b0be <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400b09c:	00a4      	lsls	r4, r4, #2
2400b09e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400b0a2:	4425      	add	r5, r4
2400b0a4:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400b0a6:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
2400b0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400b0ac:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b0ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400b0b0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b0b4:	4299      	cmp	r1, r3
2400b0b6:	d005      	beq.n	2400b0c4 <get_fat.isra.0+0xac>
2400b0b8:	f7ff fd62 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400b0bc:	b110      	cbz	r0, 2400b0c4 <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
2400b0be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
2400b0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400b0c4:	0064      	lsls	r4, r4, #1
2400b0c6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
2400b0ca:	4425      	add	r5, r4
2400b0cc:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
2400b0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400b0d0:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
2400b0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400b0d6:	bf00      	nop

2400b0d8 <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
2400b0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400b0dc:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400b0de:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400b0e0:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400b0e2:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400b0e6:	d22c      	bcs.n	2400b142 <dir_next.constprop.0+0x6a>
2400b0e8:	b35b      	cbz	r3, 2400b142 <dir_next.constprop.0+0x6a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400b0ea:	f3c5 0708 	ubfx	r7, r5, #0, #9
2400b0ee:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400b0f0:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400b0f2:	b137      	cbz	r7, 2400b102 <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400b0f4:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
2400b0f6:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
2400b0f8:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400b0fa:	443e      	add	r6, r7
2400b0fc:	6226      	str	r6, [r4, #32]
}
2400b0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
2400b102:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
2400b104:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
2400b106:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
2400b108:	b1f1      	cbz	r1, 2400b148 <dir_next.constprop.0+0x70>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400b10a:	8973      	ldrh	r3, [r6, #10]
2400b10c:	3b01      	subs	r3, #1
2400b10e:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
2400b112:	d1ef      	bne.n	2400b0f4 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400b114:	4630      	mov	r0, r6
2400b116:	f7ff ff7f 	bl	2400b018 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400b11a:	2801      	cmp	r0, #1
2400b11c:	d91c      	bls.n	2400b158 <dir_next.constprop.0+0x80>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400b11e:	1c43      	adds	r3, r0, #1
2400b120:	d01c      	beq.n	2400b15c <dir_next.constprop.0+0x84>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400b122:	69b3      	ldr	r3, [r6, #24]
2400b124:	4298      	cmp	r0, r3
2400b126:	d213      	bcs.n	2400b150 <dir_next.constprop.0+0x78>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400b128:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
2400b12a:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400b12c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400b12e:	4298      	cmp	r0, r3
2400b130:	d204      	bcs.n	2400b13c <dir_next.constprop.0+0x64>
	return clst * fs->csize + fs->database;
2400b132:	f8b6 800a 	ldrh.w	r8, [r6, #10]
2400b136:	6af3      	ldr	r3, [r6, #44]	; 0x2c
2400b138:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
2400b13c:	f8c4 801c 	str.w	r8, [r4, #28]
2400b140:	e7d8      	b.n	2400b0f4 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400b142:	2004      	movs	r0, #4
}
2400b144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400b148:	8933      	ldrh	r3, [r6, #8]
2400b14a:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400b14e:	d8d1      	bhi.n	2400b0f4 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
2400b150:	2300      	movs	r3, #0
2400b152:	2004      	movs	r0, #4
2400b154:	61e3      	str	r3, [r4, #28]
2400b156:	e7d2      	b.n	2400b0fe <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400b158:	2002      	movs	r0, #2
2400b15a:	e7d0      	b.n	2400b0fe <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400b15c:	2001      	movs	r0, #1
2400b15e:	e7ce      	b.n	2400b0fe <dir_next.constprop.0+0x26>

2400b160 <dir_read.constprop.0>:
FRESULT dir_read (
2400b160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
2400b164:	f8d0 a01c 	ldr.w	sl, [r0, #28]
FRESULT dir_read (
2400b168:	b083      	sub	sp, #12
2400b16a:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400b16c:	6806      	ldr	r6, [r0, #0]
	while (dp->sect) {
2400b16e:	f1ba 0f00 	cmp.w	sl, #0
2400b172:	d064      	beq.n	2400b23e <dir_read.constprop.0+0xde>
	BYTE ord = 0xFF, sum = 0xFF;
2400b174:	f04f 09ff 	mov.w	r9, #255	; 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400b178:	f106 0834 	add.w	r8, r6, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
2400b17c:	464f      	mov	r7, r9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b17e:	6b35      	ldr	r5, [r6, #48]	; 0x30
2400b180:	4555      	cmp	r5, sl
2400b182:	d015      	beq.n	2400b1b0 <dir_read.constprop.0+0x50>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400b184:	78f3      	ldrb	r3, [r6, #3]
2400b186:	2b00      	cmp	r3, #0
2400b188:	f040 80d6 	bne.w	2400b338 <dir_read.constprop.0+0x1d8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400b18c:	2301      	movs	r3, #1
2400b18e:	4652      	mov	r2, sl
2400b190:	4641      	mov	r1, r8
2400b192:	7870      	ldrb	r0, [r6, #1]
2400b194:	f7ff fb46 	bl	2400a824 <disk_read>
2400b198:	b140      	cbz	r0, 2400b1ac <dir_read.constprop.0+0x4c>
			fs->winsect = sector;
2400b19a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400b19e:	2001      	movs	r0, #1
			fs->winsect = sector;
2400b1a0:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400b1a2:	2300      	movs	r3, #0
2400b1a4:	61e3      	str	r3, [r4, #28]
}
2400b1a6:	b003      	add	sp, #12
2400b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400b1ac:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
2400b1b0:	6a21      	ldr	r1, [r4, #32]
2400b1b2:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
2400b1b4:	2a00      	cmp	r2, #0
2400b1b6:	d042      	beq.n	2400b23e <dir_read.constprop.0+0xde>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400b1b8:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400b1ba:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400b1bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400b1c0:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400b1c2:	d005      	beq.n	2400b1d0 <dir_read.constprop.0+0x70>
2400b1c4:	2a2e      	cmp	r2, #46	; 0x2e
2400b1c6:	d003      	beq.n	2400b1d0 <dir_read.constprop.0+0x70>
2400b1c8:	f023 0020 	bic.w	r0, r3, #32
2400b1cc:	2808      	cmp	r0, #8
2400b1ce:	d13d      	bne.n	2400b24c <dir_read.constprop.0+0xec>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400b1d0:	6965      	ldr	r5, [r4, #20]
				ord = 0xFF;
2400b1d2:	27ff      	movs	r7, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400b1d4:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400b1d6:	f8d4 a01c 	ldr.w	sl, [r4, #28]
2400b1da:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400b1de:	d22e      	bcs.n	2400b23e <dir_read.constprop.0+0xde>
2400b1e0:	f1ba 0f00 	cmp.w	sl, #0
2400b1e4:	d02b      	beq.n	2400b23e <dir_read.constprop.0+0xde>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400b1e6:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400b1ea:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400b1ec:	bb4a      	cbnz	r2, 2400b242 <dir_read.constprop.0+0xe2>
		dp->sect++;				/* Next sector */
2400b1ee:	f10a 0a01 	add.w	sl, sl, #1
		if (!dp->clust) {		/* Static table */
2400b1f2:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400b1f4:	f8c4 a01c 	str.w	sl, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400b1f8:	b969      	cbnz	r1, 2400b216 <dir_read.constprop.0+0xb6>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400b1fa:	891a      	ldrh	r2, [r3, #8]
2400b1fc:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400b200:	d91d      	bls.n	2400b23e <dir_read.constprop.0+0xde>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400b202:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400b204:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400b206:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
2400b208:	f1ba 0f00 	cmp.w	sl, #0
2400b20c:	d1b7      	bne.n	2400b17e <dir_read.constprop.0+0x1e>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400b20e:	2000      	movs	r0, #0
}
2400b210:	b003      	add	sp, #12
2400b212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400b216:	895a      	ldrh	r2, [r3, #10]
2400b218:	3a01      	subs	r2, #1
2400b21a:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
2400b21e:	d1f0      	bne.n	2400b202 <dir_read.constprop.0+0xa2>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400b220:	4618      	mov	r0, r3
2400b222:	9301      	str	r3, [sp, #4]
2400b224:	f7ff fef8 	bl	2400b018 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400b228:	2801      	cmp	r0, #1
2400b22a:	f240 80ba 	bls.w	2400b3a2 <dir_read.constprop.0+0x242>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400b22e:	1c43      	adds	r3, r0, #1
2400b230:	f000 8089 	beq.w	2400b346 <dir_read.constprop.0+0x1e6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400b234:	9b01      	ldr	r3, [sp, #4]
2400b236:	699a      	ldr	r2, [r3, #24]
2400b238:	4290      	cmp	r0, r2
2400b23a:	f0c0 80a5 	bcc.w	2400b388 <dir_read.constprop.0+0x228>
	FRESULT res = FR_NO_FILE;
2400b23e:	2004      	movs	r0, #4
2400b240:	e7af      	b.n	2400b1a2 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400b242:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400b244:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400b246:	441a      	add	r2, r3
2400b248:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
2400b24a:	e798      	b.n	2400b17e <dir_read.constprop.0+0x1e>
				if (a == AM_LFN) {			/* An LFN entry is found */
2400b24c:	2b0f      	cmp	r3, #15
2400b24e:	f040 80b0 	bne.w	2400b3b2 <dir_read.constprop.0+0x252>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2400b252:	0650      	lsls	r0, r2, #25
						dp->blk_ofs = dp->dptr;
2400b254:	6965      	ldr	r5, [r4, #20]
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2400b256:	d578      	bpl.n	2400b34a <dir_read.constprop.0+0x1ea>
						c &= (BYTE)~LLEF; ord = c;
2400b258:	f002 07bf 	and.w	r7, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400b25c:	f891 900d 	ldrb.w	r9, [r1, #13]
						dp->blk_ofs = dp->dptr;
2400b260:	6325      	str	r5, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400b262:	7b4b      	ldrb	r3, [r1, #13]
2400b264:	454b      	cmp	r3, r9
2400b266:	d1b4      	bne.n	2400b1d2 <dir_read.constprop.0+0x72>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
2400b268:	8b4b      	ldrh	r3, [r1, #26]
2400b26a:	2b00      	cmp	r3, #0
2400b26c:	d1b1      	bne.n	2400b1d2 <dir_read.constprop.0+0x72>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
2400b26e:	780b      	ldrb	r3, [r1, #0]
2400b270:	f8b1 0001 	ldrh.w	r0, [r1, #1]
2400b274:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400b278:	3b01      	subs	r3, #1
2400b27a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
2400b27e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400b282:	2bfe      	cmp	r3, #254	; 0xfe
2400b284:	d8a5      	bhi.n	2400b1d2 <dir_read.constprop.0+0x72>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400b286:	f8d6 c00c 	ldr.w	ip, [r6, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
2400b28a:	1c5a      	adds	r2, r3, #1
2400b28c:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
2400b290:	f8b1 e003 	ldrh.w	lr, [r1, #3]
		if (wc) {
2400b294:	2800      	cmp	r0, #0
2400b296:	f040 8094 	bne.w	2400b3c2 <dir_read.constprop.0+0x262>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400b29a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400b29e:	459e      	cmp	lr, r3
2400b2a0:	d197      	bne.n	2400b1d2 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400b2a2:	f8b1 b005 	ldrh.w	fp, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400b2a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400b2aa:	459b      	cmp	fp, r3
2400b2ac:	d191      	bne.n	2400b1d2 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400b2ae:	f8b1 a007 	ldrh.w	sl, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400b2b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400b2b6:	459a      	cmp	sl, r3
2400b2b8:	d18b      	bne.n	2400b1d2 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400b2ba:	f8b1 e009 	ldrh.w	lr, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400b2be:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400b2c2:	459e      	cmp	lr, r3
2400b2c4:	d185      	bne.n	2400b1d2 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400b2c6:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400b2ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400b2ce:	459a      	cmp	sl, r3
2400b2d0:	f47f af7f 	bne.w	2400b1d2 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400b2d4:	f8b1 b010 	ldrh.w	fp, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400b2d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400b2dc:	459b      	cmp	fp, r3
2400b2de:	f47f af78 	bne.w	2400b1d2 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400b2e2:	f8b1 e012 	ldrh.w	lr, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400b2e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400b2ea:	459e      	cmp	lr, r3
2400b2ec:	f47f af71 	bne.w	2400b1d2 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400b2f0:	f8b1 a014 	ldrh.w	sl, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400b2f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400b2f8:	459a      	cmp	sl, r3
2400b2fa:	f47f af6a 	bne.w	2400b1d2 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400b2fe:	f8b1 e016 	ldrh.w	lr, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400b302:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400b306:	459e      	cmp	lr, r3
2400b308:	f47f af63 	bne.w	2400b1d2 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400b30c:	f8b1 a018 	ldrh.w	sl, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400b310:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400b314:	459a      	cmp	sl, r3
2400b316:	f47f af5c 	bne.w	2400b1d2 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400b31a:	f8b1 e01c 	ldrh.w	lr, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400b31e:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400b322:	459e      	cmp	lr, r3
2400b324:	f47f af55 	bne.w	2400b1d2 <dir_read.constprop.0+0x72>
	rv = ptr[1];
2400b328:	f8b1 a01e 	ldrh.w	sl, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400b32c:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400b330:	459a      	cmp	sl, r3
2400b332:	f000 80d5 	beq.w	2400b4e0 <dir_read.constprop.0+0x380>
2400b336:	e74c      	b.n	2400b1d2 <dir_read.constprop.0+0x72>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400b338:	2301      	movs	r3, #1
2400b33a:	462a      	mov	r2, r5
2400b33c:	4641      	mov	r1, r8
2400b33e:	7870      	ldrb	r0, [r6, #1]
2400b340:	f7ff fa7e 	bl	2400a840 <disk_write>
2400b344:	b128      	cbz	r0, 2400b352 <dir_read.constprop.0+0x1f2>
	FRESULT res = FR_NO_FILE;
2400b346:	2001      	movs	r0, #1
2400b348:	e72b      	b.n	2400b1a2 <dir_read.constprop.0+0x42>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400b34a:	42ba      	cmp	r2, r7
2400b34c:	f47f af41 	bne.w	2400b1d2 <dir_read.constprop.0+0x72>
2400b350:	e787      	b.n	2400b262 <dir_read.constprop.0+0x102>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400b352:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
2400b354:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400b356:	1aea      	subs	r2, r5, r3
2400b358:	69f3      	ldr	r3, [r6, #28]
2400b35a:	429a      	cmp	r2, r3
2400b35c:	f4bf af16 	bcs.w	2400b18c <dir_read.constprop.0+0x2c>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400b360:	f896 b002 	ldrb.w	fp, [r6, #2]
2400b364:	f1bb 0f01 	cmp.w	fp, #1
2400b368:	d801      	bhi.n	2400b36e <dir_read.constprop.0+0x20e>
2400b36a:	e70f      	b.n	2400b18c <dir_read.constprop.0+0x2c>
					wsect += fs->fsize;
2400b36c:	69f3      	ldr	r3, [r6, #28]
2400b36e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400b370:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400b374:	2301      	movs	r3, #1
2400b376:	4641      	mov	r1, r8
2400b378:	462a      	mov	r2, r5
2400b37a:	7870      	ldrb	r0, [r6, #1]
2400b37c:	f7ff fa60 	bl	2400a840 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400b380:	f1bb 0f01 	cmp.w	fp, #1
2400b384:	d1f2      	bne.n	2400b36c <dir_read.constprop.0+0x20c>
2400b386:	e701      	b.n	2400b18c <dir_read.constprop.0+0x2c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400b388:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
2400b38a:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400b38c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400b38e:	4290      	cmp	r0, r2
2400b390:	d209      	bcs.n	2400b3a6 <dir_read.constprop.0+0x246>
	return clst * fs->csize + fs->database;
2400b392:	f8b3 a00a 	ldrh.w	sl, [r3, #10]
2400b396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2400b398:	fb00 2a0a 	mla	sl, r0, sl, r2
				dp->sect = clust2sect(fs, clst);
2400b39c:	f8c4 a01c 	str.w	sl, [r4, #28]
2400b3a0:	e72f      	b.n	2400b202 <dir_read.constprop.0+0xa2>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400b3a2:	2002      	movs	r0, #2
2400b3a4:	e6fd      	b.n	2400b1a2 <dir_read.constprop.0+0x42>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400b3a6:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
2400b3a8:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
2400b3ac:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400b3ae:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
2400b3b0:	e72d      	b.n	2400b20e <dir_read.constprop.0+0xae>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400b3b2:	2f00      	cmp	r7, #0
2400b3b4:	f000 809f 	beq.w	2400b4f6 <dir_read.constprop.0+0x396>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400b3b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400b3bc:	2000      	movs	r0, #0
2400b3be:	6323      	str	r3, [r4, #48]	; 0x30
2400b3c0:	e6f1      	b.n	2400b1a6 <dir_read.constprop.0+0x46>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400b3c2:	2aff      	cmp	r2, #255	; 0xff
2400b3c4:	f000 80e1 	beq.w	2400b58a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400b3c8:	f82c e012 	strh.w	lr, [ip, r2, lsl #1]
2400b3cc:	0050      	lsls	r0, r2, #1
2400b3ce:	f8b1 b005 	ldrh.w	fp, [r1, #5]
2400b3d2:	1c9a      	adds	r2, r3, #2
		if (wc) {
2400b3d4:	f1be 0f00 	cmp.w	lr, #0
2400b3d8:	f43f af65 	beq.w	2400b2a6 <dir_read.constprop.0+0x146>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400b3dc:	2aff      	cmp	r2, #255	; 0xff
2400b3de:	f000 80d4 	beq.w	2400b58a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400b3e2:	4460      	add	r0, ip
2400b3e4:	1cda      	adds	r2, r3, #3
2400b3e6:	f8a0 b002 	strh.w	fp, [r0, #2]
2400b3ea:	f8b1 a007 	ldrh.w	sl, [r1, #7]
		if (wc) {
2400b3ee:	f1bb 0f00 	cmp.w	fp, #0
2400b3f2:	f43f af5e 	beq.w	2400b2b2 <dir_read.constprop.0+0x152>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400b3f6:	2aff      	cmp	r2, #255	; 0xff
2400b3f8:	f000 80c7 	beq.w	2400b58a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400b3fc:	f8a0 a004 	strh.w	sl, [r0, #4]
2400b400:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
2400b402:	f8b1 e009 	ldrh.w	lr, [r1, #9]
		if (wc) {
2400b406:	f1ba 0f00 	cmp.w	sl, #0
2400b40a:	f43f af58 	beq.w	2400b2be <dir_read.constprop.0+0x15e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400b40e:	2aff      	cmp	r2, #255	; 0xff
2400b410:	f000 80bb 	beq.w	2400b58a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400b414:	f8a0 e006 	strh.w	lr, [r0, #6]
2400b418:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
2400b41a:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
		if (wc) {
2400b41e:	f1be 0f00 	cmp.w	lr, #0
2400b422:	f43f af52 	beq.w	2400b2ca <dir_read.constprop.0+0x16a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400b426:	2aff      	cmp	r2, #255	; 0xff
2400b428:	f000 80af 	beq.w	2400b58a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400b42c:	f8a0 a008 	strh.w	sl, [r0, #8]
2400b430:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
2400b432:	f8b1 b010 	ldrh.w	fp, [r1, #16]
		if (wc) {
2400b436:	f1ba 0f00 	cmp.w	sl, #0
2400b43a:	f43f af4d 	beq.w	2400b2d8 <dir_read.constprop.0+0x178>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400b43e:	2aff      	cmp	r2, #255	; 0xff
2400b440:	f000 80a3 	beq.w	2400b58a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400b444:	f8a0 b00a 	strh.w	fp, [r0, #10]
2400b448:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
2400b44a:	f8b1 e012 	ldrh.w	lr, [r1, #18]
		if (wc) {
2400b44e:	f1bb 0f00 	cmp.w	fp, #0
2400b452:	f43f af48 	beq.w	2400b2e6 <dir_read.constprop.0+0x186>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400b456:	2aff      	cmp	r2, #255	; 0xff
2400b458:	f000 8097 	beq.w	2400b58a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400b45c:	f8a0 e00c 	strh.w	lr, [r0, #12]
2400b460:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
2400b464:	f8b1 a014 	ldrh.w	sl, [r1, #20]
		if (wc) {
2400b468:	f1be 0f00 	cmp.w	lr, #0
2400b46c:	f43f af42 	beq.w	2400b2f4 <dir_read.constprop.0+0x194>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400b470:	2aff      	cmp	r2, #255	; 0xff
2400b472:	f000 808a 	beq.w	2400b58a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400b476:	f8a0 a00e 	strh.w	sl, [r0, #14]
2400b47a:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
2400b47e:	f8b1 e016 	ldrh.w	lr, [r1, #22]
		if (wc) {
2400b482:	f1ba 0f00 	cmp.w	sl, #0
2400b486:	f43f af3c 	beq.w	2400b302 <dir_read.constprop.0+0x1a2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400b48a:	2aff      	cmp	r2, #255	; 0xff
2400b48c:	f43f aea1 	beq.w	2400b1d2 <dir_read.constprop.0+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400b490:	f8a0 e010 	strh.w	lr, [r0, #16]
2400b494:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
2400b498:	f8b1 a018 	ldrh.w	sl, [r1, #24]
		if (wc) {
2400b49c:	f1be 0f00 	cmp.w	lr, #0
2400b4a0:	f43f af36 	beq.w	2400b310 <dir_read.constprop.0+0x1b0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400b4a4:	2aff      	cmp	r2, #255	; 0xff
2400b4a6:	d070      	beq.n	2400b58a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400b4a8:	f8a0 a012 	strh.w	sl, [r0, #18]
2400b4ac:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
2400b4b0:	f8b1 e01c 	ldrh.w	lr, [r1, #28]
		if (wc) {
2400b4b4:	f1ba 0f00 	cmp.w	sl, #0
2400b4b8:	f43f af31 	beq.w	2400b31e <dir_read.constprop.0+0x1be>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400b4bc:	2aff      	cmp	r2, #255	; 0xff
2400b4be:	d064      	beq.n	2400b58a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400b4c0:	f8a0 e014 	strh.w	lr, [r0, #20]
2400b4c4:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
2400b4c8:	f8b1 a01e 	ldrh.w	sl, [r1, #30]
		if (wc) {
2400b4cc:	f1be 0f00 	cmp.w	lr, #0
2400b4d0:	f43f af2c 	beq.w	2400b32c <dir_read.constprop.0+0x1cc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400b4d4:	2aff      	cmp	r2, #255	; 0xff
2400b4d6:	d058      	beq.n	2400b58a <dir_read.constprop.0+0x42a>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400b4d8:	f103 020d 	add.w	r2, r3, #13
2400b4dc:	f8a0 a016 	strh.w	sl, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
2400b4e0:	780b      	ldrb	r3, [r1, #0]
2400b4e2:	0659      	lsls	r1, r3, #25
2400b4e4:	d504      	bpl.n	2400b4f0 <dir_read.constprop.0+0x390>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
2400b4e6:	2aff      	cmp	r2, #255	; 0xff
2400b4e8:	d04f      	beq.n	2400b58a <dir_read.constprop.0+0x42a>
		lfnbuf[i] = 0;
2400b4ea:	2300      	movs	r3, #0
2400b4ec:	f82c 3012 	strh.w	r3, [ip, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400b4f0:	3f01      	subs	r7, #1
2400b4f2:	b2ff      	uxtb	r7, r7
2400b4f4:	e66e      	b.n	2400b1d4 <dir_read.constprop.0+0x74>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400b4f6:	780a      	ldrb	r2, [r1, #0]
2400b4f8:	01d3      	lsls	r3, r2, #7
2400b4fa:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
2400b4fe:	784a      	ldrb	r2, [r1, #1]
2400b500:	441a      	add	r2, r3
2400b502:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400b506:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400b50a:	788a      	ldrb	r2, [r1, #2]
2400b50c:	fa52 f283 	uxtab	r2, r2, r3
2400b510:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400b514:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400b518:	78ca      	ldrb	r2, [r1, #3]
2400b51a:	fa52 f283 	uxtab	r2, r2, r3
2400b51e:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400b522:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400b526:	790a      	ldrb	r2, [r1, #4]
2400b528:	fa52 f283 	uxtab	r2, r2, r3
2400b52c:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400b530:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400b534:	794a      	ldrb	r2, [r1, #5]
2400b536:	fa52 f283 	uxtab	r2, r2, r3
2400b53a:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400b53e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400b542:	798a      	ldrb	r2, [r1, #6]
2400b544:	fa52 f283 	uxtab	r2, r2, r3
2400b548:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400b54c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400b550:	79ca      	ldrb	r2, [r1, #7]
2400b552:	fa52 f283 	uxtab	r2, r2, r3
2400b556:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400b55a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400b55e:	7a0a      	ldrb	r2, [r1, #8]
2400b560:	fa52 f283 	uxtab	r2, r2, r3
2400b564:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400b568:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400b56c:	7a4a      	ldrb	r2, [r1, #9]
2400b56e:	7a89      	ldrb	r1, [r1, #10]
2400b570:	fa52 f283 	uxtab	r2, r2, r3
2400b574:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400b578:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400b57c:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400b580:	b2db      	uxtb	r3, r3
2400b582:	4599      	cmp	r9, r3
2400b584:	f47f af18 	bne.w	2400b3b8 <dir_read.constprop.0+0x258>
2400b588:	e641      	b.n	2400b20e <dir_read.constprop.0+0xae>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400b58a:	4617      	mov	r7, r2
2400b58c:	e622      	b.n	2400b1d4 <dir_read.constprop.0+0x74>
2400b58e:	bf00      	nop

2400b590 <sync_fs>:
{
2400b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400b592:	78c3      	ldrb	r3, [r0, #3]
{
2400b594:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400b596:	b95b      	cbnz	r3, 2400b5b0 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400b598:	7823      	ldrb	r3, [r4, #0]
2400b59a:	2b03      	cmp	r3, #3
2400b59c:	d029      	beq.n	2400b5f2 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
2400b59e:	2200      	movs	r2, #0
2400b5a0:	7860      	ldrb	r0, [r4, #1]
2400b5a2:	4611      	mov	r1, r2
2400b5a4:	f7ff f95a 	bl	2400a85c <disk_ioctl>
			res = FR_DISK_ERR;
2400b5a8:	3800      	subs	r0, #0
2400b5aa:	bf18      	it	ne
2400b5ac:	2001      	movne	r0, #1
}
2400b5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
2400b5b0:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400b5b2:	f100 0734 	add.w	r7, r0, #52	; 0x34
2400b5b6:	2301      	movs	r3, #1
2400b5b8:	7840      	ldrb	r0, [r0, #1]
2400b5ba:	462a      	mov	r2, r5
2400b5bc:	4639      	mov	r1, r7
2400b5be:	f7ff f93f 	bl	2400a840 <disk_write>
2400b5c2:	2800      	cmp	r0, #0
2400b5c4:	d150      	bne.n	2400b668 <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400b5c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400b5c8:	69e3      	ldr	r3, [r4, #28]
2400b5ca:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
2400b5cc:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400b5ce:	429a      	cmp	r2, r3
2400b5d0:	d2e2      	bcs.n	2400b598 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400b5d2:	78a6      	ldrb	r6, [r4, #2]
2400b5d4:	2e01      	cmp	r6, #1
2400b5d6:	d801      	bhi.n	2400b5dc <sync_fs+0x4c>
2400b5d8:	e7de      	b.n	2400b598 <sync_fs+0x8>
					wsect += fs->fsize;
2400b5da:	69e3      	ldr	r3, [r4, #28]
2400b5dc:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400b5de:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400b5e0:	2301      	movs	r3, #1
2400b5e2:	4639      	mov	r1, r7
2400b5e4:	462a      	mov	r2, r5
2400b5e6:	7860      	ldrb	r0, [r4, #1]
2400b5e8:	f7ff f92a 	bl	2400a840 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400b5ec:	2e01      	cmp	r6, #1
2400b5ee:	d1f4      	bne.n	2400b5da <sync_fs+0x4a>
2400b5f0:	e7d2      	b.n	2400b598 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400b5f2:	7925      	ldrb	r5, [r4, #4]
2400b5f4:	2d01      	cmp	r5, #1
2400b5f6:	d1d2      	bne.n	2400b59e <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
2400b5f8:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400b5fc:	f44f 7200 	mov.w	r2, #512	; 0x200
2400b600:	2100      	movs	r1, #0
2400b602:	4630      	mov	r0, r6
2400b604:	f007 fa9e 	bl	24012b44 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
2400b608:	f64a 2055 	movw	r0, #43605	; 0xaa55
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
2400b60c:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400b60e:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400b610:	f8a4 0232 	strh.w	r0, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400b614:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
2400b616:	4815      	ldr	r0, [pc, #84]	; (2400b66c <sync_fs+0xdc>)
2400b618:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
2400b61c:	6360      	str	r0, [r4, #52]	; 0x34
2400b61e:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
2400b622:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
2400b626:	3020      	adds	r0, #32
2400b628:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
2400b62c:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400b62e:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
2400b632:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400b634:	0e12      	lsrs	r2, r2, #24
2400b636:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
2400b63a:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val;
2400b63c:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
2400b640:	0a05      	lsrs	r5, r0, #8
			fs->winsect = fs->volbase + 1;
2400b642:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
2400b644:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
2400b648:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400b64a:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
2400b64e:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400b650:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
2400b652:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400b654:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
2400b658:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400b65c:	7860      	ldrb	r0, [r4, #1]
2400b65e:	f7ff f8ef 	bl	2400a840 <disk_write>
			fs->fsi_flag = 0;
2400b662:	2300      	movs	r3, #0
2400b664:	7123      	strb	r3, [r4, #4]
2400b666:	e79a      	b.n	2400b59e <sync_fs+0xe>
			res = FR_DISK_ERR;
2400b668:	2001      	movs	r0, #1
}
2400b66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400b66c:	41615252 	.word	0x41615252

2400b670 <create_chain>:
{
2400b670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400b674:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
2400b676:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
2400b678:	f8d0 9000 	ldr.w	r9, [r0]
	if (clst == 0) {	/* Create a new chain */
2400b67c:	2900      	cmp	r1, #0
2400b67e:	f040 80b4 	bne.w	2400b7ea <create_chain+0x17a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
2400b682:	f8d9 6010 	ldr.w	r6, [r9, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400b686:	f8d9 3018 	ldr.w	r3, [r9, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400b68a:	b9ce      	cbnz	r6, 2400b6c0 <create_chain+0x50>
2400b68c:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
2400b68e:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
2400b690:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400b692:	429c      	cmp	r4, r3
2400b694:	d318      	bcc.n	2400b6c8 <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
2400b696:	2e01      	cmp	r6, #1
2400b698:	f000 80a3 	beq.w	2400b7e2 <create_chain+0x172>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
2400b69c:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
2400b6a0:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400b6a2:	69ab      	ldr	r3, [r5, #24]
2400b6a4:	42a3      	cmp	r3, r4
2400b6a6:	d907      	bls.n	2400b6b8 <create_chain+0x48>
		switch (fs->fs_type) {
2400b6a8:	782b      	ldrb	r3, [r5, #0]
2400b6aa:	2b02      	cmp	r3, #2
2400b6ac:	f000 8088 	beq.w	2400b7c0 <create_chain+0x150>
2400b6b0:	2b03      	cmp	r3, #3
2400b6b2:	d044      	beq.n	2400b73e <create_chain+0xce>
2400b6b4:	2b01      	cmp	r3, #1
2400b6b6:	d00c      	beq.n	2400b6d2 <create_chain+0x62>
2400b6b8:	2401      	movs	r4, #1
}
2400b6ba:	4620      	mov	r0, r4
2400b6bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400b6c0:	42b3      	cmp	r3, r6
2400b6c2:	bf98      	it	ls
2400b6c4:	2601      	movls	r6, #1
2400b6c6:	e7e2      	b.n	2400b68e <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400b6c8:	2c01      	cmp	r4, #1
2400b6ca:	f8da 5000 	ldr.w	r5, [sl]
2400b6ce:	d9f3      	bls.n	2400b6b8 <create_chain+0x48>
2400b6d0:	e7e7      	b.n	2400b6a2 <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
2400b6d2:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b6d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b6d8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b6da:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b6de:	4291      	cmp	r1, r2
2400b6e0:	d005      	beq.n	2400b6ee <create_chain+0x7e>
2400b6e2:	4628      	mov	r0, r5
2400b6e4:	f7ff fa4c 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b6e8:	bb20      	cbnz	r0, 2400b734 <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b6ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b6ec:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400b6ee:	f107 0b01 	add.w	fp, r7, #1
2400b6f2:	f3c7 0708 	ubfx	r7, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b6f6:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400b6fa:	442f      	add	r7, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b6fc:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400b6fe:	f897 7034 	ldrb.w	r7, [r7, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b702:	d003      	beq.n	2400b70c <create_chain+0x9c>
2400b704:	4628      	mov	r0, r5
2400b706:	f7ff fa3b 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b70a:	b998      	cbnz	r0, 2400b734 <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
2400b70c:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400b710:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400b712:	445d      	add	r5, fp
2400b714:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
2400b718:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400b71c:	d575      	bpl.n	2400b80a <create_chain+0x19a>
2400b71e:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
2400b720:	b30b      	cbz	r3, 2400b766 <create_chain+0xf6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
2400b722:	2b01      	cmp	r3, #1
2400b724:	d0c8      	beq.n	2400b6b8 <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
2400b726:	42a6      	cmp	r6, r4
2400b728:	d05b      	beq.n	2400b7e2 <create_chain+0x172>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400b72a:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400b72e:	e7af      	b.n	2400b690 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
2400b730:	2801      	cmp	r0, #1
2400b732:	d1c1      	bne.n	2400b6b8 <create_chain+0x48>
2400b734:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
2400b738:	4620      	mov	r0, r4
2400b73a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400b73e:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b740:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400b742:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b746:	4299      	cmp	r1, r3
2400b748:	d004      	beq.n	2400b754 <create_chain+0xe4>
2400b74a:	4628      	mov	r0, r5
2400b74c:	f7ff fa18 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400b750:	2800      	cmp	r0, #0
2400b752:	d1ef      	bne.n	2400b734 <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400b754:	00a3      	lsls	r3, r4, #2
2400b756:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400b75a:	441d      	add	r5, r3
2400b75c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400b75e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
2400b762:	2b00      	cmp	r3, #0
2400b764:	d1dd      	bne.n	2400b722 <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400b766:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400b76a:	42a3      	cmp	r3, r4
2400b76c:	d9a4      	bls.n	2400b6b8 <create_chain+0x48>
2400b76e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400b772:	4621      	mov	r1, r4
2400b774:	4648      	mov	r0, r9
2400b776:	f7ff fbb5 	bl	2400aee4 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
2400b77a:	b970      	cbnz	r0, 2400b79a <create_chain+0x12a>
2400b77c:	f1b8 0f00 	cmp.w	r8, #0
2400b780:	d00b      	beq.n	2400b79a <create_chain+0x12a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400b782:	f1b8 0f01 	cmp.w	r8, #1
2400b786:	d097      	beq.n	2400b6b8 <create_chain+0x48>
2400b788:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400b78c:	4598      	cmp	r8, r3
2400b78e:	d293      	bcs.n	2400b6b8 <create_chain+0x48>
2400b790:	4622      	mov	r2, r4
2400b792:	4641      	mov	r1, r8
2400b794:	4648      	mov	r0, r9
2400b796:	f7ff fba5 	bl	2400aee4 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
2400b79a:	2800      	cmp	r0, #0
2400b79c:	d1c8      	bne.n	2400b730 <create_chain+0xc0>
		fs->last_clst = ncl;
2400b79e:	f8c9 4010 	str.w	r4, [r9, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
2400b7a2:	e9d9 2305 	ldrd	r2, r3, [r9, #20]
2400b7a6:	3b02      	subs	r3, #2
2400b7a8:	429a      	cmp	r2, r3
2400b7aa:	d802      	bhi.n	2400b7b2 <create_chain+0x142>
2400b7ac:	3a01      	subs	r2, #1
2400b7ae:	f8c9 2014 	str.w	r2, [r9, #20]
		fs->fsi_flag |= 1;
2400b7b2:	f899 3004 	ldrb.w	r3, [r9, #4]
2400b7b6:	f043 0301 	orr.w	r3, r3, #1
2400b7ba:	f889 3004 	strb.w	r3, [r9, #4]
2400b7be:	e77c      	b.n	2400b6ba <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400b7c0:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b7c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400b7c4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b7c8:	4299      	cmp	r1, r3
2400b7ca:	d004      	beq.n	2400b7d6 <create_chain+0x166>
2400b7cc:	4628      	mov	r0, r5
2400b7ce:	f7ff f9d7 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400b7d2:	2800      	cmp	r0, #0
2400b7d4:	d1ae      	bne.n	2400b734 <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400b7d6:	0063      	lsls	r3, r4, #1
2400b7d8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400b7dc:	441d      	add	r5, r3
2400b7de:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
2400b7e0:	e79e      	b.n	2400b720 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
2400b7e2:	2400      	movs	r4, #0
}
2400b7e4:	4620      	mov	r0, r4
2400b7e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400b7ea:	4648      	mov	r0, r9
2400b7ec:	f7ff fc14 	bl	2400b018 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
2400b7f0:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400b7f2:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
2400b7f4:	f67f af60 	bls.w	2400b6b8 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
2400b7f8:	1c41      	adds	r1, r0, #1
2400b7fa:	d09b      	beq.n	2400b734 <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
2400b7fc:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400b800:	4283      	cmp	r3, r0
2400b802:	f63f af5a 	bhi.w	2400b6ba <create_chain+0x4a>
2400b806:	4646      	mov	r6, r8
2400b808:	e741      	b.n	2400b68e <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400b80a:	f3c3 030b 	ubfx	r3, r3, #0, #12
2400b80e:	e787      	b.n	2400b720 <create_chain+0xb0>

2400b810 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400b810:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
2400b814:	d274      	bcs.n	2400b900 <dir_sdi+0xf0>
2400b816:	06ca      	lsls	r2, r1, #27
{
2400b818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400b81c:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400b81e:	d151      	bne.n	2400b8c4 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
2400b820:	6885      	ldr	r5, [r0, #8]
2400b822:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
2400b824:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
2400b828:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400b82a:	2d00      	cmp	r5, #0
2400b82c:	d04d      	beq.n	2400b8ca <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400b82e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
2400b832:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400b836:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
2400b83a:	f0c0 808e 	bcc.w	2400b95a <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400b83e:	2d01      	cmp	r5, #1
2400b840:	d040      	beq.n	2400b8c4 <dir_sdi+0xb4>
2400b842:	4647      	mov	r7, r8
2400b844:	e03b      	b.n	2400b8be <dir_sdi+0xae>
		switch (fs->fs_type) {
2400b846:	783b      	ldrb	r3, [r7, #0]
2400b848:	2b02      	cmp	r3, #2
2400b84a:	d073      	beq.n	2400b934 <dir_sdi+0x124>
2400b84c:	2b03      	cmp	r3, #3
2400b84e:	d05f      	beq.n	2400b910 <dir_sdi+0x100>
2400b850:	2b01      	cmp	r3, #1
2400b852:	d137      	bne.n	2400b8c4 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
2400b854:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b85a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b85c:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b860:	4291      	cmp	r1, r2
2400b862:	d006      	beq.n	2400b872 <dir_sdi+0x62>
2400b864:	4638      	mov	r0, r7
2400b866:	f7ff f98b 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b86a:	2800      	cmp	r0, #0
2400b86c:	d172      	bne.n	2400b954 <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400b872:	f10a 0b01 	add.w	fp, sl, #1
2400b876:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b87a:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400b87e:	44ba      	add	sl, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b880:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400b882:	f89a a034 	ldrb.w	sl, [sl, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b886:	d004      	beq.n	2400b892 <dir_sdi+0x82>
2400b888:	4638      	mov	r0, r7
2400b88a:	f7ff f979 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400b88e:	2800      	cmp	r0, #0
2400b890:	d160      	bne.n	2400b954 <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
2400b892:	f3cb 0b08 	ubfx	fp, fp, #0, #9
2400b896:	445f      	add	r7, fp
2400b898:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400b89c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400b8a0:	07eb      	lsls	r3, r5, #31
2400b8a2:	d568      	bpl.n	2400b976 <dir_sdi+0x166>
2400b8a4:	ea4f 151a 	mov.w	r5, sl, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
2400b8a8:	2d01      	cmp	r5, #1
2400b8aa:	d90b      	bls.n	2400b8c4 <dir_sdi+0xb4>
2400b8ac:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400b8b0:	42ab      	cmp	r3, r5
2400b8b2:	d907      	bls.n	2400b8c4 <dir_sdi+0xb4>
			ofs -= csz;
2400b8b4:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
2400b8b8:	45a1      	cmp	r9, r4
2400b8ba:	d850      	bhi.n	2400b95e <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
2400b8bc:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400b8be:	69bb      	ldr	r3, [r7, #24]
2400b8c0:	42ab      	cmp	r3, r5
2400b8c2:	d8c0      	bhi.n	2400b846 <dir_sdi+0x36>
		switch (fs->fs_type) {
2400b8c4:	2002      	movs	r0, #2
}
2400b8c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400b8ca:	f898 3000 	ldrb.w	r3, [r8]
2400b8ce:	2b02      	cmp	r3, #2
2400b8d0:	d818      	bhi.n	2400b904 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
2400b8d2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
2400b8d6:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
2400b8da:	d9f3      	bls.n	2400b8c4 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
2400b8dc:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
2400b8e0:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
2400b8e2:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400b8e4:	2a00      	cmp	r2, #0
2400b8e6:	d0ed      	beq.n	2400b8c4 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400b8e8:	f108 0834 	add.w	r8, r8, #52	; 0x34
2400b8ec:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
2400b8f0:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
2400b8f4:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400b8f6:	4443      	add	r3, r8
2400b8f8:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
2400b8fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
2400b900:	2002      	movs	r0, #2
}
2400b902:	4770      	bx	lr
		clst = fs->dirbase;
2400b904:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
2400b908:	2b00      	cmp	r3, #0
2400b90a:	d0e2      	beq.n	2400b8d2 <dir_sdi+0xc2>
2400b90c:	461d      	mov	r5, r3
2400b90e:	e78e      	b.n	2400b82e <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400b910:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400b914:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b918:	4299      	cmp	r1, r3
2400b91a:	d003      	beq.n	2400b924 <dir_sdi+0x114>
2400b91c:	4638      	mov	r0, r7
2400b91e:	f7ff f92f 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400b922:	b9b8      	cbnz	r0, 2400b954 <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400b924:	00ad      	lsls	r5, r5, #2
2400b926:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400b92a:	442f      	add	r7, r5
2400b92c:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400b92e:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
2400b932:	e7b9      	b.n	2400b8a8 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400b934:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400b938:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b93c:	4299      	cmp	r1, r3
2400b93e:	d003      	beq.n	2400b948 <dir_sdi+0x138>
2400b940:	4638      	mov	r0, r7
2400b942:	f7ff f91d 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400b946:	b928      	cbnz	r0, 2400b954 <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400b948:	006d      	lsls	r5, r5, #1
2400b94a:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
2400b94e:	442f      	add	r7, r5
2400b950:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
2400b952:	e7a9      	b.n	2400b8a8 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400b954:	2001      	movs	r0, #1
}
2400b956:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400b95a:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400b95e:	3b02      	subs	r3, #2
	clst -= 2;
2400b960:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400b962:	4299      	cmp	r1, r3
2400b964:	d20a      	bcs.n	2400b97c <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
2400b966:	f8b8 300a 	ldrh.w	r3, [r8, #10]
2400b96a:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
2400b96e:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
2400b972:	61f2      	str	r2, [r6, #28]
2400b974:	e7b5      	b.n	2400b8e2 <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400b976:	f3ca 050b 	ubfx	r5, sl, #0, #12
2400b97a:	e795      	b.n	2400b8a8 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
2400b97c:	2300      	movs	r3, #0
2400b97e:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400b982:	e79f      	b.n	2400b8c4 <dir_sdi+0xb4>

2400b984 <dir_find>:
{
2400b984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400b988:	2100      	movs	r1, #0
{
2400b98a:	b085      	sub	sp, #20
2400b98c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400b98e:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400b992:	f7ff ff3d 	bl	2400b810 <dir_sdi>
	if (res != FR_OK) return res;
2400b996:	4607      	mov	r7, r0
2400b998:	b9e8      	cbnz	r0, 2400b9d6 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400b99a:	f04f 09ff 	mov.w	r9, #255	; 0xff
2400b99e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400b9a2:	69e6      	ldr	r6, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400b9a4:	46ca      	mov	sl, r9
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400b9a6:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400b9a8:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400b9ac:	42b5      	cmp	r5, r6
2400b9ae:	d018      	beq.n	2400b9e2 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400b9b0:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400b9b4:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400b9b8:	2b00      	cmp	r3, #0
2400b9ba:	f040 8088 	bne.w	2400bace <dir_find+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400b9be:	2301      	movs	r3, #1
2400b9c0:	4632      	mov	r2, r6
2400b9c2:	f898 0001 	ldrb.w	r0, [r8, #1]
2400b9c6:	f7fe ff2d 	bl	2400a824 <disk_read>
2400b9ca:	b140      	cbz	r0, 2400b9de <dir_find+0x5a>
			fs->winsect = sector;
2400b9cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400b9d0:	2701      	movs	r7, #1
			fs->winsect = sector;
2400b9d2:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
2400b9d6:	4638      	mov	r0, r7
2400b9d8:	b005      	add	sp, #20
2400b9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400b9de:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
2400b9e2:	6a26      	ldr	r6, [r4, #32]
2400b9e4:	7835      	ldrb	r5, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400b9e6:	b34d      	cbz	r5, 2400ba3c <dir_find+0xb8>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400b9e8:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400b9ea:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400b9ec:	f002 033f 	and.w	r3, r2, #63	; 0x3f
2400b9f0:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400b9f2:	d004      	beq.n	2400b9fe <dir_find+0x7a>
2400b9f4:	0717      	lsls	r7, r2, #28
2400b9f6:	d526      	bpl.n	2400ba46 <dir_find+0xc2>
2400b9f8:	2b0f      	cmp	r3, #15
2400b9fa:	f000 8093 	beq.w	2400bb24 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400b9fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400ba02:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400ba06:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400ba08:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400ba0a:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400ba0c:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400ba0e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400ba12:	d213      	bcs.n	2400ba3c <dir_find+0xb8>
2400ba14:	b196      	cbz	r6, 2400ba3c <dir_find+0xb8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400ba16:	f3c5 0308 	ubfx	r3, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400ba1a:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400ba1c:	b94b      	cbnz	r3, 2400ba32 <dir_find+0xae>
		dp->sect++;				/* Next sector */
2400ba1e:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400ba20:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400ba22:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400ba24:	2900      	cmp	r1, #0
2400ba26:	d15e      	bne.n	2400bae6 <dir_find+0x162>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400ba28:	893a      	ldrh	r2, [r7, #8]
2400ba2a:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400ba2e:	f240 8133 	bls.w	2400bc98 <dir_find+0x314>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400ba32:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400ba34:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400ba36:	443b      	add	r3, r7
2400ba38:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
2400ba3a:	e7b5      	b.n	2400b9a8 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400ba3c:	2704      	movs	r7, #4
}
2400ba3e:	4638      	mov	r0, r7
2400ba40:	b005      	add	sp, #20
2400ba42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
2400ba46:	2b0f      	cmp	r3, #15
2400ba48:	d06c      	beq.n	2400bb24 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400ba4a:	f1ba 0f00 	cmp.w	sl, #0
2400ba4e:	f000 80d5 	beq.w	2400bbfc <dir_find+0x278>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400ba52:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
2400ba56:	f01a 0a01 	ands.w	sl, sl, #1
2400ba5a:	d1d0      	bne.n	2400b9fe <dir_find+0x7a>
	} while (--cnt && r == 0);
2400ba5c:	7832      	ldrb	r2, [r6, #0]
2400ba5e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
2400ba62:	429a      	cmp	r2, r3
2400ba64:	d1cb      	bne.n	2400b9fe <dir_find+0x7a>
2400ba66:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400ba6a:	7873      	ldrb	r3, [r6, #1]
2400ba6c:	429a      	cmp	r2, r3
2400ba6e:	d1c6      	bne.n	2400b9fe <dir_find+0x7a>
2400ba70:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400ba74:	78b3      	ldrb	r3, [r6, #2]
2400ba76:	429a      	cmp	r2, r3
2400ba78:	d1c1      	bne.n	2400b9fe <dir_find+0x7a>
2400ba7a:	78f2      	ldrb	r2, [r6, #3]
2400ba7c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
2400ba80:	429a      	cmp	r2, r3
2400ba82:	d1bc      	bne.n	2400b9fe <dir_find+0x7a>
2400ba84:	7932      	ldrb	r2, [r6, #4]
2400ba86:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
2400ba8a:	429a      	cmp	r2, r3
2400ba8c:	d1b7      	bne.n	2400b9fe <dir_find+0x7a>
2400ba8e:	7972      	ldrb	r2, [r6, #5]
2400ba90:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
2400ba94:	429a      	cmp	r2, r3
2400ba96:	d1b2      	bne.n	2400b9fe <dir_find+0x7a>
2400ba98:	79b2      	ldrb	r2, [r6, #6]
2400ba9a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400ba9e:	429a      	cmp	r2, r3
2400baa0:	d1ad      	bne.n	2400b9fe <dir_find+0x7a>
2400baa2:	79f2      	ldrb	r2, [r6, #7]
2400baa4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
2400baa8:	429a      	cmp	r2, r3
2400baaa:	d1a8      	bne.n	2400b9fe <dir_find+0x7a>
2400baac:	7a32      	ldrb	r2, [r6, #8]
2400baae:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400bab2:	429a      	cmp	r2, r3
2400bab4:	d1a3      	bne.n	2400b9fe <dir_find+0x7a>
2400bab6:	7a72      	ldrb	r2, [r6, #9]
2400bab8:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
2400babc:	429a      	cmp	r2, r3
2400babe:	d19e      	bne.n	2400b9fe <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400bac0:	7ab2      	ldrb	r2, [r6, #10]
2400bac2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
2400bac6:	429a      	cmp	r2, r3
2400bac8:	d199      	bne.n	2400b9fe <dir_find+0x7a>
2400baca:	4657      	mov	r7, sl
2400bacc:	e783      	b.n	2400b9d6 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400bace:	2301      	movs	r3, #1
2400bad0:	462a      	mov	r2, r5
2400bad2:	f898 0001 	ldrb.w	r0, [r8, #1]
2400bad6:	9100      	str	r1, [sp, #0]
2400bad8:	f7fe feb2 	bl	2400a840 <disk_write>
2400badc:	9900      	ldr	r1, [sp, #0]
2400bade:	2800      	cmp	r0, #0
2400bae0:	d06c      	beq.n	2400bbbc <dir_find+0x238>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400bae2:	2701      	movs	r7, #1
2400bae4:	e777      	b.n	2400b9d6 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400bae6:	897a      	ldrh	r2, [r7, #10]
2400bae8:	3a01      	subs	r2, #1
2400baea:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
2400baee:	d1a0      	bne.n	2400ba32 <dir_find+0xae>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400baf0:	4638      	mov	r0, r7
2400baf2:	9300      	str	r3, [sp, #0]
2400baf4:	f7ff fa90 	bl	2400b018 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400baf8:	2801      	cmp	r0, #1
2400bafa:	f240 80d1 	bls.w	2400bca0 <dir_find+0x31c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400bafe:	1c43      	adds	r3, r0, #1
2400bb00:	d0ef      	beq.n	2400bae2 <dir_find+0x15e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400bb02:	69ba      	ldr	r2, [r7, #24]
2400bb04:	4290      	cmp	r0, r2
2400bb06:	f080 80c7 	bcs.w	2400bc98 <dir_find+0x314>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400bb0a:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
2400bb0c:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400bb0e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400bb10:	9b00      	ldr	r3, [sp, #0]
2400bb12:	4290      	cmp	r0, r2
2400bb14:	f080 80c6 	bcs.w	2400bca4 <dir_find+0x320>
	return clst * fs->csize + fs->database;
2400bb18:	897a      	ldrh	r2, [r7, #10]
2400bb1a:	6afe      	ldr	r6, [r7, #44]	; 0x2c
2400bb1c:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
2400bb20:	61e6      	str	r6, [r4, #28]
2400bb22:	e786      	b.n	2400ba32 <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2400bb24:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400bb28:	0658      	lsls	r0, r3, #25
2400bb2a:	f53f af6d 	bmi.w	2400ba08 <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
2400bb2e:	0669      	lsls	r1, r5, #25
2400bb30:	d53f      	bpl.n	2400bbb2 <dir_find+0x22e>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400bb32:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2400bb34:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400bb38:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400bb3c:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400bb3e:	7b73      	ldrb	r3, [r6, #13]
2400bb40:	454b      	cmp	r3, r9
2400bb42:	d138      	bne.n	2400bbb6 <dir_find+0x232>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
2400bb44:	8b73      	ldrh	r3, [r6, #26]
2400bb46:	bbb3      	cbnz	r3, 2400bbb6 <dir_find+0x232>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400bb48:	7837      	ldrb	r7, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400bb4a:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400bb4c:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400bb50:	f007 073f 	and.w	r7, r7, #63	; 0x3f
2400bb54:	f8df a174 	ldr.w	sl, [pc, #372]	; 2400bccc <dir_find+0x348>
2400bb58:	9502      	str	r5, [sp, #8]
2400bb5a:	4615      	mov	r5, r2
2400bb5c:	3f01      	subs	r7, #1
2400bb5e:	f10a 0b0d 	add.w	fp, sl, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400bb62:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400bb64:	eb07 0347 	add.w	r3, r7, r7, lsl #1
2400bb68:	f8cd 8000 	str.w	r8, [sp]
2400bb6c:	9401      	str	r4, [sp, #4]
2400bb6e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400bb72:	e010      	b.n	2400bb96 <dir_find+0x212>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
2400bb74:	2ffe      	cmp	r7, #254	; 0xfe
2400bb76:	4620      	mov	r0, r4
2400bb78:	d816      	bhi.n	2400bba8 <dir_find+0x224>
2400bb7a:	f001 fe0f 	bl	2400d79c <ff_wtoupper>
2400bb7e:	4680      	mov	r8, r0
2400bb80:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
2400bb84:	3701      	adds	r7, #1
2400bb86:	f001 fe09 	bl	2400d79c <ff_wtoupper>
2400bb8a:	4580      	cmp	r8, r0
2400bb8c:	4621      	mov	r1, r4
2400bb8e:	d10b      	bne.n	2400bba8 <dir_find+0x224>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400bb90:	45d3      	cmp	fp, sl
2400bb92:	f000 8089 	beq.w	2400bca8 <dir_find+0x324>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
2400bb96:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
2400bb9a:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
2400bb9c:	2900      	cmp	r1, #0
2400bb9e:	d1e9      	bne.n	2400bb74 <dir_find+0x1f0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400bba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400bba4:	429c      	cmp	r4, r3
2400bba6:	d0f3      	beq.n	2400bb90 <dir_find+0x20c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400bba8:	e9dd 8400 	ldrd	r8, r4, [sp]
2400bbac:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400bbb0:	e72a      	b.n	2400ba08 <dir_find+0x84>
2400bbb2:	45aa      	cmp	sl, r5
2400bbb4:	d0c3      	beq.n	2400bb3e <dir_find+0x1ba>
2400bbb6:	f04f 0aff 	mov.w	sl, #255	; 0xff
2400bbba:	e725      	b.n	2400ba08 <dir_find+0x84>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400bbbc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400bbc0:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400bbc4:	1aea      	subs	r2, r5, r3
2400bbc6:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400bbca:	429a      	cmp	r2, r3
2400bbcc:	f4bf aef7 	bcs.w	2400b9be <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400bbd0:	f898 7002 	ldrb.w	r7, [r8, #2]
2400bbd4:	2f01      	cmp	r7, #1
2400bbd6:	f67f aef2 	bls.w	2400b9be <dir_find+0x3a>
2400bbda:	468b      	mov	fp, r1
2400bbdc:	e001      	b.n	2400bbe2 <dir_find+0x25e>
					wsect += fs->fsize;
2400bbde:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400bbe2:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400bbe4:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400bbe6:	2301      	movs	r3, #1
2400bbe8:	4659      	mov	r1, fp
2400bbea:	462a      	mov	r2, r5
2400bbec:	f898 0001 	ldrb.w	r0, [r8, #1]
2400bbf0:	f7fe fe26 	bl	2400a840 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400bbf4:	2f01      	cmp	r7, #1
2400bbf6:	d1f2      	bne.n	2400bbde <dir_find+0x25a>
2400bbf8:	4659      	mov	r1, fp
2400bbfa:	e6e0      	b.n	2400b9be <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400bbfc:	7830      	ldrb	r0, [r6, #0]
2400bbfe:	7872      	ldrb	r2, [r6, #1]
2400bc00:	01c1      	lsls	r1, r0, #7
2400bc02:	78b3      	ldrb	r3, [r6, #2]
2400bc04:	f896 b003 	ldrb.w	fp, [r6, #3]
2400bc08:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
2400bc0c:	7937      	ldrb	r7, [r6, #4]
2400bc0e:	f896 e005 	ldrb.w	lr, [r6, #5]
2400bc12:	4411      	add	r1, r2
2400bc14:	f896 c006 	ldrb.w	ip, [r6, #6]
2400bc18:	7a32      	ldrb	r2, [r6, #8]
2400bc1a:	f3c1 0046 	ubfx	r0, r1, #1, #7
2400bc1e:	7a75      	ldrb	r5, [r6, #9]
2400bc20:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
2400bc24:	fa53 f180 	uxtab	r1, r3, r0
2400bc28:	79f3      	ldrb	r3, [r6, #7]
2400bc2a:	f3c1 0046 	ubfx	r0, r1, #1, #7
2400bc2e:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
2400bc32:	7ab1      	ldrb	r1, [r6, #10]
2400bc34:	fa5b fb80 	uxtab	fp, fp, r0
2400bc38:	f3cb 0046 	ubfx	r0, fp, #1, #7
2400bc3c:	ea40 10cb 	orr.w	r0, r0, fp, lsl #7
2400bc40:	fa57 f780 	uxtab	r7, r7, r0
2400bc44:	f3c7 0046 	ubfx	r0, r7, #1, #7
2400bc48:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
2400bc4c:	fa5e f080 	uxtab	r0, lr, r0
2400bc50:	f3c0 0746 	ubfx	r7, r0, #1, #7
2400bc54:	ea47 10c0 	orr.w	r0, r7, r0, lsl #7
2400bc58:	fa5c f780 	uxtab	r7, ip, r0
2400bc5c:	f3c7 0046 	ubfx	r0, r7, #1, #7
2400bc60:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
2400bc64:	fa53 f080 	uxtab	r0, r3, r0
2400bc68:	f3c0 0346 	ubfx	r3, r0, #1, #7
2400bc6c:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
2400bc70:	fa52 f383 	uxtab	r3, r2, r3
2400bc74:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400bc78:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
2400bc7c:	fa55 f283 	uxtab	r2, r5, r3
2400bc80:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400bc84:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400bc88:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400bc8c:	b2db      	uxtb	r3, r3
2400bc8e:	4599      	cmp	r9, r3
2400bc90:	f47f aedf 	bne.w	2400ba52 <dir_find+0xce>
2400bc94:	4657      	mov	r7, sl
2400bc96:	e69e      	b.n	2400b9d6 <dir_find+0x52>
				dp->sect = 0; return FR_NO_FILE;
2400bc98:	2300      	movs	r3, #0
2400bc9a:	2704      	movs	r7, #4
2400bc9c:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
2400bc9e:	e69a      	b.n	2400b9d6 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400bca0:	2702      	movs	r7, #2
2400bca2:	e698      	b.n	2400b9d6 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400bca4:	461e      	mov	r6, r3
2400bca6:	e73b      	b.n	2400bb20 <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400bca8:	7833      	ldrb	r3, [r6, #0]
2400bcaa:	f8dd 8000 	ldr.w	r8, [sp]
2400bcae:	065a      	lsls	r2, r3, #25
2400bcb0:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
2400bcb4:	d500      	bpl.n	2400bcb8 <dir_find+0x334>
2400bcb6:	b919      	cbnz	r1, 2400bcc0 <dir_find+0x33c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400bcb8:	3d01      	subs	r5, #1
2400bcba:	fa5f fa85 	uxtb.w	sl, r5
2400bcbe:	e6a3      	b.n	2400ba08 <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400bcc0:	9b03      	ldr	r3, [sp, #12]
2400bcc2:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
2400bcc6:	2b00      	cmp	r3, #0
2400bcc8:	d0f6      	beq.n	2400bcb8 <dir_find+0x334>
2400bcca:	e774      	b.n	2400bbb6 <dir_find+0x232>
2400bccc:	240141c8 	.word	0x240141c8

2400bcd0 <follow_path>:
{
2400bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400bcd4:	780b      	ldrb	r3, [r1, #0]
{
2400bcd6:	b083      	sub	sp, #12
2400bcd8:	4688      	mov	r8, r1
2400bcda:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400bcdc:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
2400bcde:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400bce2:	d103      	bne.n	2400bcec <follow_path+0x1c>
2400bce4:	f818 3f01 	ldrb.w	r3, [r8, #1]!
2400bce8:	2b2f      	cmp	r3, #47	; 0x2f
2400bcea:	d0fb      	beq.n	2400bce4 <follow_path+0x14>
2400bcec:	2b5c      	cmp	r3, #92	; 0x5c
2400bcee:	d0f9      	beq.n	2400bce4 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
2400bcf0:	2100      	movs	r1, #0
2400bcf2:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2400bcf4:	f898 3000 	ldrb.w	r3, [r8]
2400bcf8:	2b1f      	cmp	r3, #31
2400bcfa:	f240 8148 	bls.w	2400bf8e <follow_path+0x2be>
2400bcfe:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
2400bd00:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400bd02:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
2400bd04:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
2400bd06:	d929      	bls.n	2400bd5c <follow_path+0x8c>
2400bd08:	f1a5 0902 	sub.w	r9, r5, #2
2400bd0c:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
2400bd0e:	2401      	movs	r4, #1
2400bd10:	e008      	b.n	2400bd24 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
2400bd12:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
2400bd16:	1c63      	adds	r3, r4, #1
2400bd18:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
2400bd1c:	281f      	cmp	r0, #31
2400bd1e:	f240 80f7 	bls.w	2400bf10 <follow_path+0x240>
		w = p[si++];					/* Get a character */
2400bd22:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2400bd24:	282f      	cmp	r0, #47	; 0x2f
2400bd26:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
2400bd2a:	d01d      	beq.n	2400bd68 <follow_path+0x98>
2400bd2c:	285c      	cmp	r0, #92	; 0x5c
2400bd2e:	d01b      	beq.n	2400bd68 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2400bd30:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
2400bd34:	d00e      	beq.n	2400bd54 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2400bd36:	2101      	movs	r1, #1
2400bd38:	f001 fd12 	bl	2400d760 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2400bd3c:	b150      	cbz	r0, 2400bd54 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
2400bd3e:	287f      	cmp	r0, #127	; 0x7f
2400bd40:	d8e7      	bhi.n	2400bd12 <follow_path+0x42>
	while (*str && *str != chr) str++;
2400bd42:	2322      	movs	r3, #34	; 0x22
2400bd44:	4aa5      	ldr	r2, [pc, #660]	; (2400bfdc <follow_path+0x30c>)
2400bd46:	e003      	b.n	2400bd50 <follow_path+0x80>
2400bd48:	f812 3f01 	ldrb.w	r3, [r2, #1]!
2400bd4c:	2b00      	cmp	r3, #0
2400bd4e:	d0e0      	beq.n	2400bd12 <follow_path+0x42>
2400bd50:	4298      	cmp	r0, r3
2400bd52:	d1f9      	bne.n	2400bd48 <follow_path+0x78>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400bd54:	2006      	movs	r0, #6
}
2400bd56:	b003      	add	sp, #12
2400bd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
2400bd5c:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400bd5e:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
2400bd60:	802b      	strh	r3, [r5, #0]
}
2400bd62:	b003      	add	sp, #12
2400bd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400bd68:	f818 3004 	ldrb.w	r3, [r8, r4]
2400bd6c:	eb08 0204 	add.w	r2, r8, r4
2400bd70:	2b5c      	cmp	r3, #92	; 0x5c
2400bd72:	d002      	beq.n	2400bd7a <follow_path+0xaa>
2400bd74:	2b2f      	cmp	r3, #47	; 0x2f
2400bd76:	f040 811f 	bne.w	2400bfb8 <follow_path+0x2e8>
2400bd7a:	1c63      	adds	r3, r4, #1
2400bd7c:	4443      	add	r3, r8
2400bd7e:	4698      	mov	r8, r3
2400bd80:	f813 2b01 	ldrb.w	r2, [r3], #1
2400bd84:	2a2f      	cmp	r2, #47	; 0x2f
2400bd86:	d0fa      	beq.n	2400bd7e <follow_path+0xae>
2400bd88:	2a5c      	cmp	r2, #92	; 0x5c
2400bd8a:	d0f8      	beq.n	2400bd7e <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400bd8c:	f1ba 0f00 	cmp.w	sl, #0
2400bd90:	d0e4      	beq.n	2400bd5c <follow_path+0x8c>
2400bd92:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400bd94:	2400      	movs	r4, #0
2400bd96:	eb05 024a 	add.w	r2, r5, sl, lsl #1
2400bd9a:	e002      	b.n	2400bda2 <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400bd9c:	f1ba 0a01 	subs.w	sl, sl, #1
2400bda0:	d0dc      	beq.n	2400bd5c <follow_path+0x8c>
		w = lfn[di - 1];
2400bda2:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
2400bda6:	2b20      	cmp	r3, #32
2400bda8:	d0f8      	beq.n	2400bd9c <follow_path+0xcc>
2400bdaa:	2b2e      	cmp	r3, #46	; 0x2e
2400bdac:	d0f6      	beq.n	2400bd9c <follow_path+0xcc>
		*d++ = (BYTE)val;
2400bdae:	2320      	movs	r3, #32
2400bdb0:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
2400bdb4:	2100      	movs	r1, #0
2400bdb6:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
2400bdba:	627a      	str	r2, [r7, #36]	; 0x24
2400bdbc:	62ba      	str	r2, [r7, #40]	; 0x28
2400bdbe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
2400bdc2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
2400bdc6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400bdca:	8828      	ldrh	r0, [r5, #0]
2400bdcc:	282e      	cmp	r0, #46	; 0x2e
2400bdce:	d002      	beq.n	2400bdd6 <follow_path+0x106>
2400bdd0:	4298      	cmp	r0, r3
2400bdd2:	f040 80e5 	bne.w	2400bfa0 <follow_path+0x2d0>
2400bdd6:	462a      	mov	r2, r5
2400bdd8:	2300      	movs	r3, #0
2400bdda:	f832 0f02 	ldrh.w	r0, [r2, #2]!
2400bdde:	461c      	mov	r4, r3
2400bde0:	3301      	adds	r3, #1
2400bde2:	2820      	cmp	r0, #32
2400bde4:	d0f9      	beq.n	2400bdda <follow_path+0x10a>
2400bde6:	282e      	cmp	r0, #46	; 0x2e
2400bde8:	d0f7      	beq.n	2400bdda <follow_path+0x10a>
		w = lfn[si++];					/* Get an LFN character */
2400bdea:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2400bdec:	eb05 034a 	add.w	r3, r5, sl, lsl #1
2400bdf0:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
2400bdf4:	2a2e      	cmp	r2, #46	; 0x2e
2400bdf6:	d002      	beq.n	2400bdfe <follow_path+0x12e>
2400bdf8:	f1ba 0a01 	subs.w	sl, sl, #1
2400bdfc:	d1f8      	bne.n	2400bdf0 <follow_path+0x120>
		if (!w) break;					/* Break on end of the LFN */
2400bdfe:	b3b0      	cbz	r0, 2400be6e <follow_path+0x19e>
2400be00:	2208      	movs	r2, #8
2400be02:	4641      	mov	r1, r8
2400be04:	2300      	movs	r3, #0
2400be06:	46b8      	mov	r8, r7
2400be08:	462f      	mov	r7, r5
2400be0a:	4615      	mov	r5, r2
2400be0c:	4699      	mov	r9, r3
2400be0e:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2400be10:	2820      	cmp	r0, #32
2400be12:	d003      	beq.n	2400be1c <follow_path+0x14c>
2400be14:	282e      	cmp	r0, #46	; 0x2e
2400be16:	d14d      	bne.n	2400beb4 <follow_path+0x1e4>
2400be18:	45a2      	cmp	sl, r4
2400be1a:	d04b      	beq.n	2400beb4 <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
2400be1c:	f046 0603 	orr.w	r6, r6, #3
2400be20:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
2400be22:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
2400be26:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
2400be28:	2800      	cmp	r0, #0
2400be2a:	d1f1      	bne.n	2400be10 <follow_path+0x140>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400be2c:	4647      	mov	r7, r8
2400be2e:	4690      	mov	r8, r2
2400be30:	462a      	mov	r2, r5
2400be32:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
2400be36:	29e5      	cmp	r1, #229	; 0xe5
2400be38:	d102      	bne.n	2400be40 <follow_path+0x170>
2400be3a:	2105      	movs	r1, #5
2400be3c:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400be40:	2a08      	cmp	r2, #8
2400be42:	f000 8093 	beq.w	2400bf6c <follow_path+0x29c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400be46:	f003 020c 	and.w	r2, r3, #12
2400be4a:	2a0c      	cmp	r2, #12
2400be4c:	d065      	beq.n	2400bf1a <follow_path+0x24a>
2400be4e:	f003 0303 	and.w	r3, r3, #3
2400be52:	2b03      	cmp	r3, #3
2400be54:	d061      	beq.n	2400bf1a <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400be56:	07b1      	lsls	r1, r6, #30
2400be58:	d409      	bmi.n	2400be6e <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2400be5a:	2b01      	cmp	r3, #1
2400be5c:	d102      	bne.n	2400be64 <follow_path+0x194>
2400be5e:	f046 0610 	orr.w	r6, r6, #16
2400be62:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2400be64:	2a04      	cmp	r2, #4
2400be66:	d102      	bne.n	2400be6e <follow_path+0x19e>
2400be68:	f046 0608 	orr.w	r6, r6, #8
2400be6c:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
2400be6e:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400be70:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400be74:	f7ff fd86 	bl	2400b984 <dir_find>
			ns = dp->fn[NSFLAG];
2400be78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400be7c:	2800      	cmp	r0, #0
2400be7e:	d158      	bne.n	2400bf32 <follow_path+0x262>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2400be80:	075a      	lsls	r2, r3, #29
2400be82:	f53f af68 	bmi.w	2400bd56 <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
2400be86:	79bb      	ldrb	r3, [r7, #6]
2400be88:	06db      	lsls	r3, r3, #27
2400be8a:	f140 8097 	bpl.w	2400bfbc <follow_path+0x2ec>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400be8e:	697a      	ldr	r2, [r7, #20]
2400be90:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
2400be94:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400be98:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
2400be9c:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400be9e:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
2400bea0:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400bea2:	d102      	bne.n	2400beaa <follow_path+0x1da>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400bea4:	8a9b      	ldrh	r3, [r3, #20]
2400bea6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400beaa:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400beac:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
2400beae:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
2400beb2:	e725      	b.n	2400bd00 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
2400beb4:	454d      	cmp	r5, r9
2400beb6:	d91c      	bls.n	2400bef2 <follow_path+0x222>
2400beb8:	ebaa 0104 	sub.w	r1, sl, r4
2400bebc:	fab1 f181 	clz	r1, r1
2400bec0:	0949      	lsrs	r1, r1, #5
2400bec2:	b9b1      	cbnz	r1, 2400bef2 <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
2400bec4:	287f      	cmp	r0, #127	; 0x7f
2400bec6:	d83c      	bhi.n	2400bf42 <follow_path+0x272>
	while (*str && *str != chr) str++;
2400bec8:	212b      	movs	r1, #43	; 0x2b
2400beca:	f8df c118 	ldr.w	ip, [pc, #280]	; 2400bfe4 <follow_path+0x314>
2400bece:	e003      	b.n	2400bed8 <follow_path+0x208>
2400bed0:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
2400bed4:	2900      	cmp	r1, #0
2400bed6:	d052      	beq.n	2400bf7e <follow_path+0x2ae>
2400bed8:	4281      	cmp	r1, r0
2400beda:	d1f9      	bne.n	2400bed0 <follow_path+0x200>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400bedc:	f046 0603 	orr.w	r6, r6, #3
2400bee0:	205f      	movs	r0, #95	; 0x5f
2400bee2:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
2400bee4:	eb08 0109 	add.w	r1, r8, r9
2400bee8:	f109 0901 	add.w	r9, r9, #1
2400beec:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
2400bef0:	e797      	b.n	2400be22 <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
2400bef2:	2d0b      	cmp	r5, #11
2400bef4:	d064      	beq.n	2400bfc0 <follow_path+0x2f0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2400bef6:	45a2      	cmp	sl, r4
2400bef8:	d003      	beq.n	2400bf02 <follow_path+0x232>
2400befa:	f046 0603 	orr.w	r6, r6, #3
2400befe:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
2400bf00:	d394      	bcc.n	2400be2c <follow_path+0x15c>
			b <<= 2; continue;
2400bf02:	009b      	lsls	r3, r3, #2
2400bf04:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
2400bf06:	250b      	movs	r5, #11
2400bf08:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
2400bf0c:	b2db      	uxtb	r3, r3
2400bf0e:	e788      	b.n	2400be22 <follow_path+0x152>
	*path = &p[si];						/* Return pointer to the next segment */
2400bf10:	46a2      	mov	sl, r4
2400bf12:	4498      	add	r8, r3
2400bf14:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400bf16:	2404      	movs	r4, #4
2400bf18:	e73d      	b.n	2400bd96 <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400bf1a:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
2400bf1e:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400bf20:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400bf22:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400bf26:	f7ff fd2d 	bl	2400b984 <dir_find>
			ns = dp->fn[NSFLAG];
2400bf2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400bf2e:	2800      	cmp	r0, #0
2400bf30:	d0a6      	beq.n	2400be80 <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
2400bf32:	2804      	cmp	r0, #4
2400bf34:	f47f af0f 	bne.w	2400bd56 <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400bf38:	f013 0f04 	tst.w	r3, #4
2400bf3c:	bf08      	it	eq
2400bf3e:	2005      	moveq	r0, #5
2400bf40:	e709      	b.n	2400bd56 <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2400bf42:	e9cd 3200 	strd	r3, r2, [sp]
2400bf46:	f001 fc0b 	bl	2400d760 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400bf4a:	e9dd 3200 	ldrd	r3, r2, [sp]
2400bf4e:	b918      	cbnz	r0, 2400bf58 <follow_path+0x288>
			cf |= NS_LFN;				/* Force create LFN entry */
2400bf50:	f046 0602 	orr.w	r6, r6, #2
2400bf54:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400bf56:	e7c1      	b.n	2400bedc <follow_path+0x20c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400bf58:	4921      	ldr	r1, [pc, #132]	; (2400bfe0 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
2400bf5a:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400bf5e:	4401      	add	r1, r0
			cf |= NS_LFN;				/* Force create LFN entry */
2400bf60:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400bf62:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400bf66:	2800      	cmp	r0, #0
2400bf68:	d0b8      	beq.n	2400bedc <follow_path+0x20c>
2400bf6a:	e7ad      	b.n	2400bec8 <follow_path+0x1f8>
	if (ni == 8) b <<= 2;
2400bf6c:	009b      	lsls	r3, r3, #2
2400bf6e:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400bf72:	2a0c      	cmp	r2, #12
2400bf74:	d0d1      	beq.n	2400bf1a <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400bf76:	07b0      	lsls	r0, r6, #30
2400bf78:	f57f af74 	bpl.w	2400be64 <follow_path+0x194>
2400bf7c:	e777      	b.n	2400be6e <follow_path+0x19e>
				if (IsUpper(w)) {		/* ASCII large capital */
2400bf7e:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
2400bf82:	2919      	cmp	r1, #25
2400bf84:	d80f      	bhi.n	2400bfa6 <follow_path+0x2d6>
					b |= 2;
2400bf86:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
2400bf8a:	b2c0      	uxtb	r0, r0
2400bf8c:	e7aa      	b.n	2400bee4 <follow_path+0x214>
		dp->fn[NSFLAG] = NS_NONAME;
2400bf8e:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
2400bf90:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
2400bf92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
2400bf96:	b003      	add	sp, #12
2400bf98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
2400bf9c:	f7ff bc38 	b.w	2400b810 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400bfa0:	4626      	mov	r6, r4
2400bfa2:	2401      	movs	r4, #1
2400bfa4:	e722      	b.n	2400bdec <follow_path+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
2400bfa6:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
2400bfaa:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
2400bfac:	bf9c      	itt	ls
2400bfae:	3820      	subls	r0, #32
2400bfb0:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
2400bfb4:	b2c0      	uxtb	r0, r0
2400bfb6:	e795      	b.n	2400bee4 <follow_path+0x214>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400bfb8:	4690      	mov	r8, r2
2400bfba:	e6e7      	b.n	2400bd8c <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400bfbc:	2005      	movs	r0, #5
2400bfbe:	e6ca      	b.n	2400bd56 <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
2400bfc0:	4647      	mov	r7, r8
2400bfc2:	4690      	mov	r8, r2
2400bfc4:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400bfc8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
2400bfcc:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400bfce:	2ae5      	cmp	r2, #229	; 0xe5
2400bfd0:	f47f af39 	bne.w	2400be46 <follow_path+0x176>
2400bfd4:	2205      	movs	r2, #5
2400bfd6:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400bfda:	e734      	b.n	2400be46 <follow_path+0x176>
2400bfdc:	24014134 	.word	0x24014134
2400bfe0:	24014148 	.word	0x24014148
2400bfe4:	24014140 	.word	0x24014140

2400bfe8 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400bfe8:	2901      	cmp	r1, #1
{
2400bfea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400bfee:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
2400bff0:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400bff2:	d90f      	bls.n	2400c014 <remove_chain+0x2c>
2400bff4:	69ab      	ldr	r3, [r5, #24]
2400bff6:	428b      	cmp	r3, r1
2400bff8:	d90c      	bls.n	2400c014 <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
2400bffa:	4606      	mov	r6, r0
2400bffc:	4611      	mov	r1, r2
2400bffe:	b962      	cbnz	r2, 2400c01a <remove_chain+0x32>
2400c000:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400c002:	429c      	cmp	r4, r3
2400c004:	d206      	bcs.n	2400c014 <remove_chain+0x2c>
		switch (fs->fs_type) {
2400c006:	783b      	ldrb	r3, [r7, #0]
2400c008:	2b02      	cmp	r3, #2
2400c00a:	d072      	beq.n	2400c0f2 <remove_chain+0x10a>
2400c00c:	2b03      	cmp	r3, #3
2400c00e:	d05d      	beq.n	2400c0cc <remove_chain+0xe4>
2400c010:	2b01      	cmp	r3, #1
2400c012:	d010      	beq.n	2400c036 <remove_chain+0x4e>
2400c014:	2002      	movs	r0, #2
}
2400c016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400c01a:	4293      	cmp	r3, r2
2400c01c:	d9fa      	bls.n	2400c014 <remove_chain+0x2c>
2400c01e:	2a01      	cmp	r2, #1
2400c020:	d0f8      	beq.n	2400c014 <remove_chain+0x2c>
2400c022:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400c026:	4628      	mov	r0, r5
2400c028:	f7fe ff5c 	bl	2400aee4 <put_fat.part.0>
		if (res != FR_OK) return res;
2400c02c:	2800      	cmp	r0, #0
2400c02e:	d1f2      	bne.n	2400c016 <remove_chain+0x2e>
2400c030:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400c032:	69bb      	ldr	r3, [r7, #24]
2400c034:	e7e5      	b.n	2400c002 <remove_chain+0x1a>
			bc = (UINT)clst; bc += bc / 2;
2400c036:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400c03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400c03c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400c03e:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
2400c042:	4291      	cmp	r1, r2
2400c044:	d006      	beq.n	2400c054 <remove_chain+0x6c>
2400c046:	4638      	mov	r0, r7
2400c048:	f7fe fd9a 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400c04c:	2800      	cmp	r0, #0
2400c04e:	d161      	bne.n	2400c114 <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400c050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400c052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
2400c054:	f108 0901 	add.w	r9, r8, #1
2400c058:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400c05c:	eb03 2159 	add.w	r1, r3, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400c060:	44b8      	add	r8, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400c062:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
2400c064:	f898 8034 	ldrb.w	r8, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
2400c068:	d004      	beq.n	2400c074 <remove_chain+0x8c>
2400c06a:	4638      	mov	r0, r7
2400c06c:	f7fe fd88 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400c070:	2800      	cmp	r0, #0
2400c072:	d14f      	bne.n	2400c114 <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
2400c074:	f3c9 0908 	ubfx	r9, r9, #0, #9
2400c078:	444f      	add	r7, r9
2400c07a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400c07e:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400c082:	07e3      	lsls	r3, r4, #31
2400c084:	d548      	bpl.n	2400c118 <remove_chain+0x130>
2400c086:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
2400c08a:	f1b8 0f00 	cmp.w	r8, #0
2400c08e:	d046      	beq.n	2400c11e <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400c090:	f1b8 0f01 	cmp.w	r8, #1
2400c094:	d0be      	beq.n	2400c014 <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400c096:	69ab      	ldr	r3, [r5, #24]
2400c098:	42a3      	cmp	r3, r4
2400c09a:	d9bb      	bls.n	2400c014 <remove_chain+0x2c>
2400c09c:	2200      	movs	r2, #0
2400c09e:	4621      	mov	r1, r4
2400c0a0:	4628      	mov	r0, r5
2400c0a2:	f7fe ff1f 	bl	2400aee4 <put_fat.part.0>
			if (res != FR_OK) return res;
2400c0a6:	2800      	cmp	r0, #0
2400c0a8:	d1b5      	bne.n	2400c016 <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
2400c0aa:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
2400c0ae:	1e91      	subs	r1, r2, #2
2400c0b0:	428b      	cmp	r3, r1
2400c0b2:	d205      	bcs.n	2400c0c0 <remove_chain+0xd8>
			fs->free_clst++;
2400c0b4:	3301      	adds	r3, #1
2400c0b6:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
2400c0b8:	792b      	ldrb	r3, [r5, #4]
2400c0ba:	f043 0301 	orr.w	r3, r3, #1
2400c0be:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
2400c0c0:	4542      	cmp	r2, r8
2400c0c2:	d92c      	bls.n	2400c11e <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400c0c4:	6837      	ldr	r7, [r6, #0]
2400c0c6:	4644      	mov	r4, r8
2400c0c8:	69bb      	ldr	r3, [r7, #24]
2400c0ca:	e79a      	b.n	2400c002 <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400c0cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400c0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400c0d0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
2400c0d4:	4299      	cmp	r1, r3
2400c0d6:	d003      	beq.n	2400c0e0 <remove_chain+0xf8>
2400c0d8:	4638      	mov	r0, r7
2400c0da:	f7fe fd51 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400c0de:	b9c8      	cbnz	r0, 2400c114 <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400c0e0:	00a3      	lsls	r3, r4, #2
2400c0e2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400c0e6:	441f      	add	r7, r3
2400c0e8:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400c0ec:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
2400c0f0:	e7cb      	b.n	2400c08a <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400c0f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400c0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400c0f6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
2400c0fa:	4299      	cmp	r1, r3
2400c0fc:	d003      	beq.n	2400c106 <remove_chain+0x11e>
2400c0fe:	4638      	mov	r0, r7
2400c100:	f7fe fd3e 	bl	2400ab80 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400c104:	b930      	cbnz	r0, 2400c114 <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400c106:	0063      	lsls	r3, r4, #1
2400c108:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400c10c:	441f      	add	r7, r3
2400c10e:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
2400c112:	e7ba      	b.n	2400c08a <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
2400c114:	2001      	movs	r0, #1
2400c116:	e77e      	b.n	2400c016 <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400c118:	f3c8 080b 	ubfx	r8, r8, #0, #12
2400c11c:	e7b5      	b.n	2400c08a <remove_chain+0xa2>
	return FR_OK;
2400c11e:	2000      	movs	r0, #0
2400c120:	e779      	b.n	2400c016 <remove_chain+0x2e>
2400c122:	bf00      	nop

2400c124 <dir_register>:
{
2400c124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400c128:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
2400c12c:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400c12e:	930a      	str	r3, [sp, #40]	; 0x28
2400c130:	f013 03a0 	ands.w	r3, r3, #160	; 0xa0
2400c134:	f040 835a 	bne.w	2400c7ec <dir_register+0x6c8>
	FATFS *fs = dp->obj.fs;
2400c138:	6802      	ldr	r2, [r0, #0]
2400c13a:	4682      	mov	sl, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400c13c:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	FATFS *fs = dp->obj.fs;
2400c140:	9201      	str	r2, [sp, #4]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400c142:	f8bc 7000 	ldrh.w	r7, [ip]
2400c146:	b137      	cbz	r7, 2400c156 <dir_register+0x32>
2400c148:	461f      	mov	r7, r3
2400c14a:	4663      	mov	r3, ip
2400c14c:	f833 2f02 	ldrh.w	r2, [r3, #2]!
2400c150:	3701      	adds	r7, #1
2400c152:	2a00      	cmp	r2, #0
2400c154:	d1fa      	bne.n	2400c14c <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
2400c156:	f10a 0524 	add.w	r5, sl, #36	; 0x24
			*d++ = *s++;
2400c15a:	ab12      	add	r3, sp, #72	; 0x48
2400c15c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
2400c160:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2400c164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
2400c166:	07d8      	lsls	r0, r3, #31
2400c168:	f100 8097 	bmi.w	2400c29a <dir_register+0x176>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400c16c:	f013 0302 	ands.w	r3, r3, #2
2400c170:	f8dd 9004 	ldr.w	r9, [sp, #4]
2400c174:	f000 829b 	beq.w	2400c6ae <dir_register+0x58a>
2400c178:	4a76      	ldr	r2, [pc, #472]	; (2400c354 <dir_register+0x230>)
2400c17a:	f107 030c 	add.w	r3, r7, #12
	res = dir_sdi(dp, 0);
2400c17e:	2100      	movs	r1, #0
2400c180:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400c182:	fba2 2303 	umull	r2, r3, r2, r3
2400c186:	089b      	lsrs	r3, r3, #2
2400c188:	9302      	str	r3, [sp, #8]
2400c18a:	3301      	adds	r3, #1
2400c18c:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
2400c18e:	f7ff fb3f 	bl	2400b810 <dir_sdi>
	if (res == FR_OK) {
2400c192:	4683      	mov	fp, r0
2400c194:	2800      	cmp	r0, #0
2400c196:	f040 8295 	bne.w	2400c6c4 <dir_register+0x5a0>
			res = move_window(fs, dp->sect);
2400c19a:	f8da 101c 	ldr.w	r1, [sl, #28]
		n = 0;
2400c19e:	4680      	mov	r8, r0
						fs->wflag = 1;
2400c1a0:	9006      	str	r0, [sp, #24]
2400c1a2:	e029      	b.n	2400c1f8 <dir_register+0xd4>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400c1a4:	fab3 f283 	clz	r2, r3
2400c1a8:	0952      	lsrs	r2, r2, #5
2400c1aa:	b3a3      	cbz	r3, 2400c216 <dir_register+0xf2>
				n = 0;					/* Not a blank entry. Restart to search */
2400c1ac:	4690      	mov	r8, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400c1ae:	f8da 5014 	ldr.w	r5, [sl, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400c1b2:	f8da 101c 	ldr.w	r1, [sl, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400c1b6:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400c1b8:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400c1bc:	f080 8285 	bcs.w	2400c6ca <dir_register+0x5a6>
2400c1c0:	2900      	cmp	r1, #0
2400c1c2:	f000 8282 	beq.w	2400c6ca <dir_register+0x5a6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400c1c6:	f3c5 0708 	ubfx	r7, r5, #0, #9
	FATFS *fs = dp->obj.fs;
2400c1ca:	f8da 4000 	ldr.w	r4, [sl]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400c1ce:	b967      	cbnz	r7, 2400c1ea <dir_register+0xc6>
		dp->sect++;				/* Next sector */
2400c1d0:	3101      	adds	r1, #1
		if (!dp->clust) {		/* Static table */
2400c1d2:	f8da 3018 	ldr.w	r3, [sl, #24]
		dp->sect++;				/* Next sector */
2400c1d6:	f8ca 101c 	str.w	r1, [sl, #28]
		if (!dp->clust) {		/* Static table */
2400c1da:	2b00      	cmp	r3, #0
2400c1dc:	f040 82cd 	bne.w	2400c77a <dir_register+0x656>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400c1e0:	8922      	ldrh	r2, [r4, #8]
2400c1e2:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
2400c1e6:	f240 83bb 	bls.w	2400c960 <dir_register+0x83c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400c1ea:	f104 0634 	add.w	r6, r4, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400c1ee:	443e      	add	r6, r7
	dp->dptr = ofs;						/* Current entry */
2400c1f0:	f8ca 5014 	str.w	r5, [sl, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400c1f4:	f8ca 6020 	str.w	r6, [sl, #32]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400c1f8:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
2400c1fc:	428b      	cmp	r3, r1
2400c1fe:	d005      	beq.n	2400c20c <dir_register+0xe8>
2400c200:	4648      	mov	r0, r9
2400c202:	f7fe fcbd 	bl	2400ab80 <move_window.part.0>
			if (res != FR_OK) break;
2400c206:	2800      	cmp	r0, #0
2400c208:	f040 83b2 	bne.w	2400c970 <dir_register+0x84c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400c20c:	f8da 3020 	ldr.w	r3, [sl, #32]
2400c210:	781b      	ldrb	r3, [r3, #0]
2400c212:	2be5      	cmp	r3, #229	; 0xe5
2400c214:	d1c6      	bne.n	2400c1a4 <dir_register+0x80>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
2400c216:	f108 0801 	add.w	r8, r8, #1
2400c21a:	9b03      	ldr	r3, [sp, #12]
2400c21c:	4543      	cmp	r3, r8
2400c21e:	d1c6      	bne.n	2400c1ae <dir_register+0x8a>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2400c220:	9b02      	ldr	r3, [sp, #8]
2400c222:	f8dd b018 	ldr.w	fp, [sp, #24]
2400c226:	2b00      	cmp	r3, #0
2400c228:	f040 82eb 	bne.w	2400c802 <dir_register+0x6de>
	if (sector != fs->winsect) {	/* Window offset changed? */
2400c22c:	9b01      	ldr	r3, [sp, #4]
		res = move_window(fs, dp->sect);
2400c22e:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400c232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400c234:	4299      	cmp	r1, r3
2400c236:	d005      	beq.n	2400c244 <dir_register+0x120>
2400c238:	9801      	ldr	r0, [sp, #4]
2400c23a:	f7fe fca1 	bl	2400ab80 <move_window.part.0>
		if (res == FR_OK) {
2400c23e:	2800      	cmp	r0, #0
2400c240:	f040 82da 	bne.w	2400c7f8 <dir_register+0x6d4>
		*d++ = (BYTE)val;
2400c244:	2220      	movs	r2, #32
2400c246:	2100      	movs	r1, #0
2400c248:	f8da 0020 	ldr.w	r0, [sl, #32]
2400c24c:	f006 fc7a 	bl	24012b44 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2400c250:	f8da 3020 	ldr.w	r3, [sl, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400c254:	f10a 0225 	add.w	r2, sl, #37	; 0x25
2400c258:	1a9a      	subs	r2, r3, r2
2400c25a:	2a02      	cmp	r2, #2
2400c25c:	f240 8486 	bls.w	2400cb6c <dir_register+0xa48>
			*d++ = *s++;
2400c260:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
2400c264:	601a      	str	r2, [r3, #0]
2400c266:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
2400c26a:	605a      	str	r2, [r3, #4]
2400c26c:	f89a 202c 	ldrb.w	r2, [sl, #44]	; 0x2c
}
2400c270:	4658      	mov	r0, fp
			*d++ = *s++;
2400c272:	721a      	strb	r2, [r3, #8]
2400c274:	f89a 202d 	ldrb.w	r2, [sl, #45]	; 0x2d
2400c278:	725a      	strb	r2, [r3, #9]
2400c27a:	f89a 202e 	ldrb.w	r2, [sl, #46]	; 0x2e
2400c27e:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
2400c280:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2400c282:	f89a 302f 	ldrb.w	r3, [sl, #47]	; 0x2f
2400c286:	f8da 1020 	ldr.w	r1, [sl, #32]
2400c28a:	f003 0318 	and.w	r3, r3, #24
2400c28e:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
2400c290:	9b01      	ldr	r3, [sp, #4]
2400c292:	70da      	strb	r2, [r3, #3]
}
2400c294:	b013      	add	sp, #76	; 0x4c
2400c296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400c29a:	2340      	movs	r3, #64	; 0x40
			*d++ = *s++;
2400c29c:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
2400c2a0:	f89d 1045 	ldrb.w	r1, [sp, #69]	; 0x45
		for (n = 1; n < 100; n++) {
2400c2a4:	2601      	movs	r6, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400c2a6:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c2aa:	f04f 0920 	mov.w	r9, #32
			*d++ = *s++;
2400c2ae:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
2400c2b2:	9208      	str	r2, [sp, #32]
2400c2b4:	9302      	str	r3, [sp, #8]
2400c2b6:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
2400c2ba:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
2400c2be:	9303      	str	r3, [sp, #12]
2400c2c0:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
2400c2c4:	9207      	str	r2, [sp, #28]
2400c2c6:	9306      	str	r3, [sp, #24]
2400c2c8:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
2400c2cc:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
2400c2d0:	9305      	str	r3, [sp, #20]
2400c2d2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c2d6:	4693      	mov	fp, r2
			*d++ = *s++;
2400c2d8:	9109      	str	r1, [sp, #36]	; 0x24
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c2da:	4661      	mov	r1, ip
			*d++ = *s++;
2400c2dc:	9304      	str	r3, [sp, #16]
2400c2de:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c2e2:	970b      	str	r7, [sp, #44]	; 0x2c
			*d++ = *s++;
2400c2e4:	f89d 8046 	ldrb.w	r8, [sp, #70]	; 0x46
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c2e8:	461f      	mov	r7, r3
				if (sr & 0x10000) sr ^= 0x11021;
2400c2ea:	4c1b      	ldr	r4, [pc, #108]	; (2400c358 <dir_register+0x234>)
			*d++ = *s++;
2400c2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
2400c2ee:	2200      	movs	r2, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400c2f0:	2e05      	cmp	r6, #5
			*d++ = *s++;
2400c2f2:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
2400c2f6:	f88a 302d 	strb.w	r3, [sl, #45]	; 0x2d
2400c2fa:	9b02      	ldr	r3, [sp, #8]
2400c2fc:	f88a 802e 	strb.w	r8, [sl, #46]	; 0x2e
2400c300:	f363 0207 	bfi	r2, r3, #0, #8
2400c304:	9b03      	ldr	r3, [sp, #12]
2400c306:	f363 220f 	bfi	r2, r3, #8, #8
2400c30a:	9b06      	ldr	r3, [sp, #24]
2400c30c:	f363 4217 	bfi	r2, r3, #16, #8
2400c310:	9b05      	ldr	r3, [sp, #20]
2400c312:	f363 621f 	bfi	r2, r3, #24, #8
2400c316:	9b04      	ldr	r3, [sp, #16]
2400c318:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
2400c31c:	f04f 0200 	mov.w	r2, #0
2400c320:	f363 0207 	bfi	r2, r3, #0, #8
2400c324:	9b08      	ldr	r3, [sp, #32]
2400c326:	f367 220f 	bfi	r2, r7, #8, #8
2400c32a:	f363 4217 	bfi	r2, r3, #16, #8
2400c32e:	9b07      	ldr	r3, [sp, #28]
2400c330:	f363 621f 	bfi	r2, r3, #24, #8
2400c334:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400c338:	f240 8135 	bls.w	2400c5a6 <dir_register+0x482>
		while (*lfn) {	/* Create a CRC */
2400c33c:	880a      	ldrh	r2, [r1, #0]
2400c33e:	2a00      	cmp	r2, #0
2400c340:	f000 8131 	beq.w	2400c5a6 <dir_register+0x482>
				sr = (sr << 1) + (wc & 1);
2400c344:	468c      	mov	ip, r1
2400c346:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
2400c34a:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
2400c34c:	eb01 0146 	add.w	r1, r1, r6, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c350:	e00e      	b.n	2400c370 <dir_register+0x24c>
2400c352:	bf00      	nop
2400c354:	4ec4ec4f 	.word	0x4ec4ec4f
2400c358:	00011021 	.word	0x00011021
				sr = (sr << 1) + (wc & 1);
2400c35c:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c360:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
2400c364:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
2400c368:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c36c:	bf18      	it	ne
2400c36e:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
2400c370:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
2400c374:	0893      	lsrs	r3, r2, #2
2400c376:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
2400c378:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c37c:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
2400c37e:	f003 0301 	and.w	r3, r3, #1
2400c382:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c386:	bf48      	it	mi
2400c388:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
2400c38c:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
2400c38e:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c392:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
2400c396:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c39a:	bf18      	it	ne
2400c39c:	4063      	eorne	r3, r4
				sr = (sr << 1) + (wc & 1);
2400c39e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c3a2:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400c3a4:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
2400c3a8:	bf48      	it	mi
2400c3aa:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400c3ac:	f003 0301 	and.w	r3, r3, #1
2400c3b0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c3b4:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400c3b6:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
2400c3ba:	bf48      	it	mi
2400c3bc:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400c3be:	f000 0001 	and.w	r0, r0, #1
2400c3c2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c3c6:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400c3c8:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
2400c3cc:	bf48      	it	mi
2400c3ce:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400c3d0:	f001 0101 	and.w	r1, r1, #1
2400c3d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c3d8:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400c3da:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
2400c3de:	bf48      	it	mi
2400c3e0:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400c3e2:	f003 0301 	and.w	r3, r3, #1
2400c3e6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c3ea:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400c3ec:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
2400c3f0:	bf48      	it	mi
2400c3f2:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400c3f4:	f000 0001 	and.w	r0, r0, #1
2400c3f8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c3fc:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400c3fe:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
2400c402:	bf48      	it	mi
2400c404:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400c406:	f001 0101 	and.w	r1, r1, #1
2400c40a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c40e:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400c410:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
2400c414:	bf48      	it	mi
2400c416:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
2400c418:	f003 0301 	and.w	r3, r3, #1
2400c41c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c420:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400c422:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
2400c426:	bf48      	it	mi
2400c428:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400c42a:	f000 0001 	and.w	r0, r0, #1
2400c42e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c432:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400c434:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
2400c438:	bf48      	it	mi
2400c43a:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400c43c:	f001 0101 	and.w	r1, r1, #1
2400c440:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c444:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400c446:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
2400c44a:	bf48      	it	mi
2400c44c:	4060      	eormi	r0, r4
				wc >>= 1;
2400c44e:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
2400c450:	f003 0301 	and.w	r3, r3, #1
2400c454:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c458:	0400      	lsls	r0, r0, #16
2400c45a:	bf48      	it	mi
2400c45c:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
2400c45e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c462:	0408      	lsls	r0, r1, #16
2400c464:	bf48      	it	mi
2400c466:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
2400c468:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400c46c:	0419      	lsls	r1, r3, #16
		while (*lfn) {	/* Create a CRC */
2400c46e:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
2400c472:	bf48      	it	mi
2400c474:	ea8e 0e04 	eormi.w	lr, lr, r4
		while (*lfn) {	/* Create a CRC */
2400c478:	2a00      	cmp	r2, #0
2400c47a:	f47f af6f 	bne.w	2400c35c <dir_register+0x238>
		c = (BYTE)((seq % 16) + '0');
2400c47e:	f00e 010f 	and.w	r1, lr, #15
2400c482:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400c486:	2a39      	cmp	r2, #57	; 0x39
2400c488:	bf88      	it	hi
2400c48a:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400c48e:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
2400c492:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
2400c496:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
2400c49a:	f240 8153 	bls.w	2400c744 <dir_register+0x620>
		c = (BYTE)((seq % 16) + '0');
2400c49e:	f001 000f 	and.w	r0, r1, #15
2400c4a2:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400c4a6:	2a39      	cmp	r2, #57	; 0x39
2400c4a8:	bf88      	it	hi
2400c4aa:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400c4ae:	290f      	cmp	r1, #15
		seq /= 16;
2400c4b0:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
2400c4b4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	} while (seq);
2400c4b8:	f240 814a 	bls.w	2400c750 <dir_register+0x62c>
		c = (BYTE)((seq % 16) + '0');
2400c4bc:	f000 010f 	and.w	r1, r0, #15
2400c4c0:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400c4c4:	2a39      	cmp	r2, #57	; 0x39
2400c4c6:	bf88      	it	hi
2400c4c8:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400c4cc:	280f      	cmp	r0, #15
		seq /= 16;
2400c4ce:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
2400c4d2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	} while (seq);
2400c4d6:	f240 814a 	bls.w	2400c76e <dir_register+0x64a>
		c = (BYTE)((seq % 16) + '0');
2400c4da:	f001 000f 	and.w	r0, r1, #15
2400c4de:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400c4e2:	2a39      	cmp	r2, #57	; 0x39
2400c4e4:	bf88      	it	hi
2400c4e6:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400c4ea:	290f      	cmp	r1, #15
		seq /= 16;
2400c4ec:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
2400c4f0:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	} while (seq);
2400c4f4:	f240 8168 	bls.w	2400c7c8 <dir_register+0x6a4>
		c = (BYTE)((seq % 16) + '0');
2400c4f8:	f000 010f 	and.w	r1, r0, #15
2400c4fc:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400c500:	2a39      	cmp	r2, #57	; 0x39
2400c502:	bf88      	it	hi
2400c504:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400c508:	280f      	cmp	r0, #15
		seq /= 16;
2400c50a:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
2400c50e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	} while (seq);
2400c512:	f240 815f 	bls.w	2400c7d4 <dir_register+0x6b0>
		c = (BYTE)((seq % 16) + '0');
2400c516:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
2400c51a:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
2400c51e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400c522:	2a39      	cmp	r2, #57	; 0x39
2400c524:	bf88      	it	hi
2400c526:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400c52a:	290f      	cmp	r1, #15
		ns[i--] = c;
2400c52c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	} while (seq);
2400c530:	f240 8156 	bls.w	2400c7e0 <dir_register+0x6bc>
		c = (BYTE)((seq % 16) + '0');
2400c534:	f00e 010f 	and.w	r1, lr, #15
2400c538:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400c53c:	2a39      	cmp	r2, #57	; 0x39
2400c53e:	bf88      	it	hi
2400c540:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400c544:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
2400c548:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
2400c54c:	f240 8106 	bls.w	2400c75c <dir_register+0x638>
		ns[i--] = c;
2400c550:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
2400c554:	f10a 0123 	add.w	r1, sl, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400c558:	2200      	movs	r2, #0
2400c55a:	e002      	b.n	2400c562 <dir_register+0x43e>
2400c55c:	3201      	adds	r2, #1
2400c55e:	4562      	cmp	r2, ip
2400c560:	d003      	beq.n	2400c56a <dir_register+0x446>
2400c562:	f811 3f01 	ldrb.w	r3, [r1, #1]!
2400c566:	2b20      	cmp	r3, #32
2400c568:	d1f8      	bne.n	2400c55c <dir_register+0x438>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c56a:	f1bc 0f07 	cmp.w	ip, #7
2400c56e:	d91c      	bls.n	2400c5aa <dir_register+0x486>
2400c570:	1c50      	adds	r0, r2, #1
2400c572:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
2400c576:	2807      	cmp	r0, #7
2400c578:	d809      	bhi.n	2400c58e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c57a:	1c42      	adds	r2, r0, #1
2400c57c:	2120      	movs	r1, #32
2400c57e:	2a08      	cmp	r2, #8
2400c580:	f1c0 0208 	rsb	r2, r0, #8
2400c584:	4428      	add	r0, r5
2400c586:	bf88      	it	hi
2400c588:	2201      	movhi	r2, #1
2400c58a:	f006 fadb 	bl	24012b44 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400c58e:	4650      	mov	r0, sl
2400c590:	f7ff f9f8 	bl	2400b984 <dir_find>
			if (res != FR_OK) break;
2400c594:	2800      	cmp	r0, #0
2400c596:	d17d      	bne.n	2400c694 <dir_register+0x570>
		for (n = 1; n < 100; n++) {
2400c598:	3601      	adds	r6, #1
2400c59a:	2e64      	cmp	r6, #100	; 0x64
2400c59c:	f000 8095 	beq.w	2400c6ca <dir_register+0x5a6>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2400c5a0:	9b01      	ldr	r3, [sp, #4]
2400c5a2:	68d9      	ldr	r1, [r3, #12]
2400c5a4:	e6a2      	b.n	2400c2ec <dir_register+0x1c8>
2400c5a6:	46b6      	mov	lr, r6
2400c5a8:	e769      	b.n	2400c47e <dir_register+0x35a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c5aa:	f10c 0348 	add.w	r3, ip, #72	; 0x48
2400c5ae:	f10c 0c01 	add.w	ip, ip, #1
2400c5b2:	eb0d 0103 	add.w	r1, sp, r3
2400c5b6:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400c5ba:	54a9      	strb	r1, [r5, r2]
2400c5bc:	3201      	adds	r2, #1
	} while (j < 8);
2400c5be:	2a07      	cmp	r2, #7
2400c5c0:	d8e5      	bhi.n	2400c58e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c5c2:	f1bc 0f08 	cmp.w	ip, #8
2400c5c6:	f000 8086 	beq.w	2400c6d6 <dir_register+0x5b2>
2400c5ca:	f10c 0348 	add.w	r3, ip, #72	; 0x48
	} while (j < 8);
2400c5ce:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c5d0:	f102 0001 	add.w	r0, r2, #1
2400c5d4:	eb0d 0103 	add.w	r1, sp, r3
2400c5d8:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400c5dc:	54a9      	strb	r1, [r5, r2]
2400c5de:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
2400c5e2:	d0d4      	beq.n	2400c58e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c5e4:	2908      	cmp	r1, #8
2400c5e6:	d07e      	beq.n	2400c6e6 <dir_register+0x5c2>
2400c5e8:	f10c 0349 	add.w	r3, ip, #73	; 0x49
	} while (j < 8);
2400c5ec:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c5ee:	eb0d 0103 	add.w	r1, sp, r3
2400c5f2:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400c5f6:	5429      	strb	r1, [r5, r0]
2400c5f8:	f10c 0102 	add.w	r1, ip, #2
2400c5fc:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400c600:	d0c5      	beq.n	2400c58e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c602:	2908      	cmp	r1, #8
2400c604:	d077      	beq.n	2400c6f6 <dir_register+0x5d2>
2400c606:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
	} while (j < 8);
2400c60a:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c60c:	eb0d 0103 	add.w	r1, sp, r3
2400c610:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400c614:	5429      	strb	r1, [r5, r0]
2400c616:	f10c 0103 	add.w	r1, ip, #3
2400c61a:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400c61e:	d0b6      	beq.n	2400c58e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c620:	2908      	cmp	r1, #8
2400c622:	d070      	beq.n	2400c706 <dir_register+0x5e2>
2400c624:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
	} while (j < 8);
2400c628:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c62a:	eb0d 0103 	add.w	r1, sp, r3
2400c62e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400c632:	5429      	strb	r1, [r5, r0]
2400c634:	f10c 0104 	add.w	r1, ip, #4
2400c638:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400c63c:	d0a7      	beq.n	2400c58e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c63e:	2908      	cmp	r1, #8
2400c640:	d069      	beq.n	2400c716 <dir_register+0x5f2>
2400c642:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
	} while (j < 8);
2400c646:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c648:	eb0d 0103 	add.w	r1, sp, r3
2400c64c:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400c650:	5429      	strb	r1, [r5, r0]
2400c652:	f10c 0105 	add.w	r1, ip, #5
2400c656:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400c65a:	d098      	beq.n	2400c58e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c65c:	2908      	cmp	r1, #8
2400c65e:	d062      	beq.n	2400c726 <dir_register+0x602>
2400c660:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
	} while (j < 8);
2400c664:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c666:	eb0d 0103 	add.w	r1, sp, r3
2400c66a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400c66e:	5429      	strb	r1, [r5, r0]
2400c670:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
2400c674:	d08b      	beq.n	2400c58e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c676:	f1bc 0f01 	cmp.w	ip, #1
2400c67a:	d15c      	bne.n	2400c736 <dir_register+0x612>
2400c67c:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	} while (j < 8);
2400c680:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c682:	546a      	strb	r2, [r5, r1]
	} while (j < 8);
2400c684:	d183      	bne.n	2400c58e <dir_register+0x46a>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400c686:	4650      	mov	r0, sl
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c688:	f88a 902b 	strb.w	r9, [sl, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400c68c:	f7ff f97a 	bl	2400b984 <dir_find>
			if (res != FR_OK) break;
2400c690:	2800      	cmp	r0, #0
2400c692:	d081      	beq.n	2400c598 <dir_register+0x474>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2400c694:	2804      	cmp	r0, #4
2400c696:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
2400c698:	4683      	mov	fp, r0
2400c69a:	d118      	bne.n	2400c6ce <dir_register+0x5aa>
		dp->fn[NSFLAG] = sn[NSFLAG];
2400c69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	FATFS *fs = dp->obj.fs;
2400c69e:	f8da 9000 	ldr.w	r9, [sl]
		dp->fn[NSFLAG] = sn[NSFLAG];
2400c6a2:	f88a 302f 	strb.w	r3, [sl, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400c6a6:	f013 0302 	ands.w	r3, r3, #2
2400c6aa:	f47f ad65 	bne.w	2400c178 <dir_register+0x54>
2400c6ae:	9302      	str	r3, [sp, #8]
2400c6b0:	2301      	movs	r3, #1
	res = dir_sdi(dp, 0);
2400c6b2:	2100      	movs	r1, #0
2400c6b4:	4650      	mov	r0, sl
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400c6b6:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
2400c6b8:	f7ff f8aa 	bl	2400b810 <dir_sdi>
	if (res == FR_OK) {
2400c6bc:	4683      	mov	fp, r0
2400c6be:	2800      	cmp	r0, #0
2400c6c0:	f43f ad6b 	beq.w	2400c19a <dir_register+0x76>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400c6c4:	f1bb 0f04 	cmp.w	fp, #4
2400c6c8:	d101      	bne.n	2400c6ce <dir_register+0x5aa>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400c6ca:	f04f 0b07 	mov.w	fp, #7
}
2400c6ce:	4658      	mov	r0, fp
2400c6d0:	b013      	add	sp, #76	; 0x4c
2400c6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
2400c6d6:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c6d8:	f102 0001 	add.w	r0, r2, #1
2400c6dc:	f805 9002 	strb.w	r9, [r5, r2]
	} while (j < 8);
2400c6e0:	f47f af4b 	bne.w	2400c57a <dir_register+0x456>
2400c6e4:	e753      	b.n	2400c58e <dir_register+0x46a>
2400c6e6:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c6e8:	f805 9000 	strb.w	r9, [r5, r0]
2400c6ec:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400c6f0:	f47f af43 	bne.w	2400c57a <dir_register+0x456>
2400c6f4:	e74b      	b.n	2400c58e <dir_register+0x46a>
2400c6f6:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c6f8:	f805 9000 	strb.w	r9, [r5, r0]
2400c6fc:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400c700:	f47f af3b 	bne.w	2400c57a <dir_register+0x456>
2400c704:	e743      	b.n	2400c58e <dir_register+0x46a>
2400c706:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c708:	f805 9000 	strb.w	r9, [r5, r0]
2400c70c:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400c710:	f47f af33 	bne.w	2400c57a <dir_register+0x456>
2400c714:	e73b      	b.n	2400c58e <dir_register+0x46a>
2400c716:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c718:	f805 9000 	strb.w	r9, [r5, r0]
2400c71c:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400c720:	f47f af2b 	bne.w	2400c57a <dir_register+0x456>
2400c724:	e733      	b.n	2400c58e <dir_register+0x46a>
2400c726:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c728:	f805 9000 	strb.w	r9, [r5, r0]
2400c72c:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
2400c730:	f47f af23 	bne.w	2400c57a <dir_register+0x456>
2400c734:	e72b      	b.n	2400c58e <dir_register+0x46a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c736:	f805 9001 	strb.w	r9, [r5, r1]
	} while (j < 8);
2400c73a:	2a00      	cmp	r2, #0
2400c73c:	f47f af27 	bne.w	2400c58e <dir_register+0x46a>
2400c740:	2007      	movs	r0, #7
2400c742:	e71a      	b.n	2400c57a <dir_register+0x456>
	ns[i] = '~';
2400c744:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400c746:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
2400c74a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400c74e:	e701      	b.n	2400c554 <dir_register+0x430>
	ns[i] = '~';
2400c750:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400c752:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
2400c756:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400c75a:	e6fb      	b.n	2400c554 <dir_register+0x430>
	ns[i] = '~';
2400c75c:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c75e:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400c762:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400c766:	f88a 2024 	strb.w	r2, [sl, #36]	; 0x24
2400c76a:	4662      	mov	r2, ip
2400c76c:	e72d      	b.n	2400c5ca <dir_register+0x4a6>
	ns[i] = '~';
2400c76e:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400c770:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
2400c774:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400c778:	e6ec      	b.n	2400c554 <dir_register+0x430>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400c77a:	8962      	ldrh	r2, [r4, #10]
2400c77c:	3a01      	subs	r2, #1
2400c77e:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
2400c782:	f47f ad32 	bne.w	2400c1ea <dir_register+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400c786:	4619      	mov	r1, r3
2400c788:	4620      	mov	r0, r4
2400c78a:	f7fe fc45 	bl	2400b018 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400c78e:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400c790:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400c792:	f240 8205 	bls.w	2400cba0 <dir_register+0xa7c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400c796:	1c42      	adds	r2, r0, #1
2400c798:	f000 80dc 	beq.w	2400c954 <dir_register+0x830>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400c79c:	69a3      	ldr	r3, [r4, #24]
2400c79e:	4602      	mov	r2, r0
2400c7a0:	4298      	cmp	r0, r3
2400c7a2:	f080 80e7 	bcs.w	2400c974 <dir_register+0x850>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400c7a6:	3b02      	subs	r3, #2
	clst -= 2;
2400c7a8:	f1a0 0b02 	sub.w	fp, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400c7ac:	f104 0634 	add.w	r6, r4, #52	; 0x34
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400c7b0:	455b      	cmp	r3, fp
				dp->clust = clst;		/* Initialize data for new cluster */
2400c7b2:	f8ca 2018 	str.w	r2, [sl, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400c7b6:	f240 813b 	bls.w	2400ca30 <dir_register+0x90c>
	return clst * fs->csize + fs->database;
2400c7ba:	8963      	ldrh	r3, [r4, #10]
2400c7bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
2400c7be:	fb0b 1103 	mla	r1, fp, r3, r1
				dp->sect = clust2sect(fs, clst);
2400c7c2:	f8ca 101c 	str.w	r1, [sl, #28]
2400c7c6:	e512      	b.n	2400c1ee <dir_register+0xca>
	ns[i] = '~';
2400c7c8:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400c7ca:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
2400c7ce:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400c7d2:	e6bf      	b.n	2400c554 <dir_register+0x430>
	ns[i] = '~';
2400c7d4:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400c7d6:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
2400c7da:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400c7de:	e6b9      	b.n	2400c554 <dir_register+0x430>
	ns[i] = '~';
2400c7e0:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400c7e2:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400c7e6:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400c7ea:	e6b3      	b.n	2400c554 <dir_register+0x430>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400c7ec:	f04f 0b06 	mov.w	fp, #6
}
2400c7f0:	4658      	mov	r0, fp
2400c7f2:	b013      	add	sp, #76	; 0x4c
2400c7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400c7f8:	4683      	mov	fp, r0
2400c7fa:	4658      	mov	r0, fp
2400c7fc:	b013      	add	sp, #76	; 0x4c
2400c7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2400c802:	f8da 1014 	ldr.w	r1, [sl, #20]
2400c806:	4650      	mov	r0, sl
2400c808:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
2400c80c:	f7ff f800 	bl	2400b810 <dir_sdi>
		if (res == FR_OK) {
2400c810:	4605      	mov	r5, r0
2400c812:	2800      	cmp	r0, #0
2400c814:	f040 810a 	bne.w	2400ca2c <dir_register+0x908>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400c818:	f89a 1024 	ldrb.w	r1, [sl, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400c81c:	f04f 090f 	mov.w	r9, #15
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400c820:	f89a 4025 	ldrb.w	r4, [sl, #37]	; 0x25
2400c824:	01cb      	lsls	r3, r1, #7
2400c826:	f89a 0026 	ldrb.w	r0, [sl, #38]	; 0x26
2400c82a:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
2400c82e:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
2400c832:	f89a 8028 	ldrb.w	r8, [sl, #40]	; 0x28
2400c836:	f89a e029 	ldrb.w	lr, [sl, #41]	; 0x29
2400c83a:	1919      	adds	r1, r3, r4
2400c83c:	f89a c02a 	ldrb.w	ip, [sl, #42]	; 0x2a
2400c840:	f89a 702b 	ldrb.w	r7, [sl, #43]	; 0x2b
	*ptr++ = (BYTE)val; val >>= 8;
2400c844:	f64f 74ff 	movw	r4, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400c848:	f3c1 0346 	ubfx	r3, r1, #1, #7
2400c84c:	f89a 602c 	ldrb.w	r6, [sl, #44]	; 0x2c
2400c850:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
2400c854:	fa50 f383 	uxtab	r3, r0, r3
2400c858:	f89a 002d 	ldrb.w	r0, [sl, #45]	; 0x2d
2400c85c:	f3c3 0146 	ubfx	r1, r3, #1, #7
2400c860:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
2400c864:	f89a 102e 	ldrb.w	r1, [sl, #46]	; 0x2e
2400c868:	fa52 f283 	uxtab	r2, r2, r3
2400c86c:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400c870:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400c874:	fa58 f883 	uxtab	r8, r8, r3
2400c878:	f3c8 0346 	ubfx	r3, r8, #1, #7
2400c87c:	ea43 13c8 	orr.w	r3, r3, r8, lsl #7
2400c880:	fa5e fe83 	uxtab	lr, lr, r3
2400c884:	f3ce 0346 	ubfx	r3, lr, #1, #7
2400c888:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
2400c88c:	fa5c fc83 	uxtab	ip, ip, r3
2400c890:	f3cc 0346 	ubfx	r3, ip, #1, #7
2400c894:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
2400c898:	fa57 f783 	uxtab	r7, r7, r3
2400c89c:	f3c7 0346 	ubfx	r3, r7, #1, #7
2400c8a0:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
2400c8a4:	fa56 f683 	uxtab	r6, r6, r3
2400c8a8:	f3c6 0346 	ubfx	r3, r6, #1, #7
2400c8ac:	ea43 13c6 	orr.w	r3, r3, r6, lsl #7
2400c8b0:	9e01      	ldr	r6, [sp, #4]
2400c8b2:	fa50 f083 	uxtab	r0, r0, r3
2400c8b6:	f3c0 0346 	ubfx	r3, r0, #1, #7
2400c8ba:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
2400c8be:	fa51 f180 	uxtab	r1, r1, r0
2400c8c2:	fa5f f881 	uxtb.w	r8, r1
				res = move_window(fs, dp->sect);
2400c8c6:	f8da 101c 	ldr.w	r1, [sl, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400c8ca:	6b33      	ldr	r3, [r6, #48]	; 0x30
2400c8cc:	4299      	cmp	r1, r3
2400c8ce:	d004      	beq.n	2400c8da <dir_register+0x7b6>
2400c8d0:	4630      	mov	r0, r6
2400c8d2:	f7fe f955 	bl	2400ab80 <move_window.part.0>
				if (res != FR_OK) break;
2400c8d6:	2800      	cmp	r0, #0
2400c8d8:	d18e      	bne.n	2400c7f8 <dir_register+0x6d4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400c8da:	f89d 0008 	ldrb.w	r0, [sp, #8]
2400c8de:	68f1      	ldr	r1, [r6, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400c8e0:	1e42      	subs	r2, r0, #1
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400c8e2:	f8da 3020 	ldr.w	r3, [sl, #32]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400c8e6:	eb02 0742 	add.w	r7, r2, r2, lsl #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
2400c8ea:	f883 800d 	strb.w	r8, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400c8ee:	f883 900b 	strb.w	r9, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400c8f2:	eb02 0287 	add.w	r2, r2, r7, lsl #2
	dir[LDIR_Type] = 0;
2400c8f6:	731d      	strb	r5, [r3, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400c8f8:	769d      	strb	r5, [r3, #26]
	*ptr++ = (BYTE)val;
2400c8fa:	76dd      	strb	r5, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400c8fc:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
2400c900:	ea4f 2c17 	mov.w	ip, r7, lsr #8
2400c904:	705f      	strb	r7, [r3, #1]
	*ptr++ = (BYTE)val;
2400c906:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400c90a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400c90e:	2f00      	cmp	r7, #0
2400c910:	f040 8090 	bne.w	2400ca34 <dir_register+0x910>
	*ptr++ = (BYTE)val; val >>= 8;
2400c914:	f8a3 4003 	strh.w	r4, [r3, #3]
2400c918:	f8a3 4005 	strh.w	r4, [r3, #5]
2400c91c:	f8a3 4007 	strh.w	r4, [r3, #7]
2400c920:	f8a3 4009 	strh.w	r4, [r3, #9]
2400c924:	81dc      	strh	r4, [r3, #14]
2400c926:	821c      	strh	r4, [r3, #16]
2400c928:	825c      	strh	r4, [r3, #18]
2400c92a:	829c      	strh	r4, [r3, #20]
2400c92c:	82dc      	strh	r4, [r3, #22]
2400c92e:	831c      	strh	r4, [r3, #24]
2400c930:	839c      	strh	r4, [r3, #28]
2400c932:	83dc      	strh	r4, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400c934:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
2400c938:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
2400c93a:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
2400c93c:	4650      	mov	r0, sl
				fs->wflag = 1;
2400c93e:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
2400c940:	f7fe fbca 	bl	2400b0d8 <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
2400c944:	2800      	cmp	r0, #0
2400c946:	f47f af57 	bne.w	2400c7f8 <dir_register+0x6d4>
2400c94a:	9b02      	ldr	r3, [sp, #8]
2400c94c:	3b01      	subs	r3, #1
2400c94e:	9302      	str	r3, [sp, #8]
2400c950:	d1b9      	bne.n	2400c8c6 <dir_register+0x7a2>
2400c952:	e46b      	b.n	2400c22c <dir_register+0x108>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400c954:	f04f 0b01 	mov.w	fp, #1
}
2400c958:	4658      	mov	r0, fp
2400c95a:	b013      	add	sp, #76	; 0x4c
2400c95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400c960:	f04f 0b07 	mov.w	fp, #7
				dp->sect = 0; return FR_NO_FILE;
2400c964:	f8ca 301c 	str.w	r3, [sl, #28]
}
2400c968:	4658      	mov	r0, fp
2400c96a:	b013      	add	sp, #76	; 0x4c
2400c96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400c970:	4683      	mov	fp, r0
2400c972:	e6a7      	b.n	2400c6c4 <dir_register+0x5a0>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
2400c974:	f8da 1018 	ldr.w	r1, [sl, #24]
2400c978:	4650      	mov	r0, sl
2400c97a:	f7fe fe79 	bl	2400b670 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400c97e:	4603      	mov	r3, r0
2400c980:	9004      	str	r0, [sp, #16]
2400c982:	2800      	cmp	r0, #0
2400c984:	f43f aea1 	beq.w	2400c6ca <dir_register+0x5a6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
2400c988:	2801      	cmp	r0, #1
2400c98a:	f000 8109 	beq.w	2400cba0 <dir_register+0xa7c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400c98e:	3301      	adds	r3, #1
2400c990:	d0e0      	beq.n	2400c954 <dir_register+0x830>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400c992:	78e3      	ldrb	r3, [r4, #3]
2400c994:	2b00      	cmp	r3, #0
2400c996:	f040 8111 	bne.w	2400cbbc <dir_register+0xa98>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400c99a:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400c99e:	f44f 7200 	mov.w	r2, #512	; 0x200
2400c9a2:	2100      	movs	r1, #0
2400c9a4:	4630      	mov	r0, r6
2400c9a6:	f006 f8cd 	bl	24012b44 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400c9aa:	69a3      	ldr	r3, [r4, #24]
	clst -= 2;
2400c9ac:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400c9ae:	3b02      	subs	r3, #2
	return clst * fs->csize + fs->database;
2400c9b0:	8961      	ldrh	r1, [r4, #10]
	clst -= 2;
2400c9b2:	f1a2 0b02 	sub.w	fp, r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400c9b6:	459b      	cmp	fp, r3
2400c9b8:	f080 80fe 	bcs.w	2400cbb8 <dir_register+0xa94>
	return clst * fs->csize + fs->database;
2400c9bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2400c9be:	fb0b 2201 	mla	r2, fp, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400c9c2:	6322      	str	r2, [r4, #48]	; 0x30
2400c9c4:	2900      	cmp	r1, #0
2400c9c6:	f000 80f4 	beq.w	2400cbb2 <dir_register+0xa8e>
2400c9ca:	2300      	movs	r3, #0
2400c9cc:	e9cd 5707 	strd	r5, r7, [sp, #28]
2400c9d0:	4637      	mov	r7, r6
2400c9d2:	4616      	mov	r6, r2
2400c9d4:	9305      	str	r3, [sp, #20]
						fs->wflag = 1;
2400c9d6:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400c9da:	4632      	mov	r2, r6
2400c9dc:	4639      	mov	r1, r7
2400c9de:	7860      	ldrb	r0, [r4, #1]
						fs->wflag = 1;
2400c9e0:	70e3      	strb	r3, [r4, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400c9e2:	2301      	movs	r3, #1
2400c9e4:	f7fd ff2c 	bl	2400a840 <disk_write>
2400c9e8:	2800      	cmp	r0, #0
2400c9ea:	d1b3      	bne.n	2400c954 <dir_register+0x830>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400c9ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
			fs->wflag = 0;
2400c9ee:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400c9f0:	1af0      	subs	r0, r6, r3
2400c9f2:	69e3      	ldr	r3, [r4, #28]
2400c9f4:	4298      	cmp	r0, r3
2400c9f6:	d20e      	bcs.n	2400ca16 <dir_register+0x8f2>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400c9f8:	78a5      	ldrb	r5, [r4, #2]
2400c9fa:	2d01      	cmp	r5, #1
2400c9fc:	d801      	bhi.n	2400ca02 <dir_register+0x8de>
2400c9fe:	e00a      	b.n	2400ca16 <dir_register+0x8f2>
					wsect += fs->fsize;
2400ca00:	69e3      	ldr	r3, [r4, #28]
2400ca02:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ca04:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400ca06:	2301      	movs	r3, #1
2400ca08:	4639      	mov	r1, r7
2400ca0a:	4632      	mov	r2, r6
2400ca0c:	7860      	ldrb	r0, [r4, #1]
2400ca0e:	f7fd ff17 	bl	2400a840 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ca12:	2d01      	cmp	r5, #1
2400ca14:	d1f4      	bne.n	2400ca00 <dir_register+0x8dc>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400ca16:	9a05      	ldr	r2, [sp, #20]
2400ca18:	6b23      	ldr	r3, [r4, #48]	; 0x30
2400ca1a:	1c50      	adds	r0, r2, #1
2400ca1c:	8965      	ldrh	r5, [r4, #10]
2400ca1e:	1c5e      	adds	r6, r3, #1
2400ca20:	42a8      	cmp	r0, r5
2400ca22:	6326      	str	r6, [r4, #48]	; 0x30
2400ca24:	f080 80bf 	bcs.w	2400cba6 <dir_register+0xa82>
2400ca28:	9005      	str	r0, [sp, #20]
2400ca2a:	e7d4      	b.n	2400c9d6 <dir_register+0x8b2>
2400ca2c:	4683      	mov	fp, r0
2400ca2e:	e64e      	b.n	2400c6ce <dir_register+0x5aa>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ca30:	2100      	movs	r1, #0
2400ca32:	e6c6      	b.n	2400c7c2 <dir_register+0x69e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ca34:	42a7      	cmp	r7, r4
2400ca36:	f43f af6d 	beq.w	2400c914 <dir_register+0x7f0>
2400ca3a:	3201      	adds	r2, #1
2400ca3c:	f831 7012 	ldrh.w	r7, [r1, r2, lsl #1]
2400ca40:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400ca42:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ca46:	70df      	strb	r7, [r3, #3]
	*ptr++ = (BYTE)val;
2400ca48:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ca4c:	2f00      	cmp	r7, #0
2400ca4e:	f43f af63 	beq.w	2400c918 <dir_register+0x7f4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ca52:	42a7      	cmp	r7, r4
2400ca54:	f43f af60 	beq.w	2400c918 <dir_register+0x7f4>
2400ca58:	440a      	add	r2, r1
2400ca5a:	8857      	ldrh	r7, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
2400ca5c:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ca60:	715f      	strb	r7, [r3, #5]
	*ptr++ = (BYTE)val;
2400ca62:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ca66:	2f00      	cmp	r7, #0
2400ca68:	f43f af58 	beq.w	2400c91c <dir_register+0x7f8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ca6c:	42a7      	cmp	r7, r4
2400ca6e:	f43f af55 	beq.w	2400c91c <dir_register+0x7f8>
2400ca72:	8897      	ldrh	r7, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
2400ca74:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ca78:	71df      	strb	r7, [r3, #7]
	*ptr++ = (BYTE)val;
2400ca7a:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ca7e:	2f00      	cmp	r7, #0
2400ca80:	f43f af4e 	beq.w	2400c920 <dir_register+0x7fc>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ca84:	42a7      	cmp	r7, r4
2400ca86:	f43f af4b 	beq.w	2400c920 <dir_register+0x7fc>
2400ca8a:	88d7      	ldrh	r7, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
2400ca8c:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400ca90:	725f      	strb	r7, [r3, #9]
	*ptr++ = (BYTE)val;
2400ca92:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400ca96:	2f00      	cmp	r7, #0
2400ca98:	f43f af44 	beq.w	2400c924 <dir_register+0x800>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ca9c:	42a7      	cmp	r7, r4
2400ca9e:	f43f af41 	beq.w	2400c924 <dir_register+0x800>
2400caa2:	8917      	ldrh	r7, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
2400caa4:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400caa8:	739f      	strb	r7, [r3, #14]
	*ptr++ = (BYTE)val;
2400caaa:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400caae:	2f00      	cmp	r7, #0
2400cab0:	f43f af39 	beq.w	2400c926 <dir_register+0x802>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400cab4:	42a7      	cmp	r7, r4
2400cab6:	f43f af36 	beq.w	2400c926 <dir_register+0x802>
2400caba:	8957      	ldrh	r7, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
2400cabc:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400cac0:	741f      	strb	r7, [r3, #16]
	*ptr++ = (BYTE)val;
2400cac2:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400cac6:	2f00      	cmp	r7, #0
2400cac8:	f43f af2e 	beq.w	2400c928 <dir_register+0x804>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400cacc:	42a7      	cmp	r7, r4
2400cace:	f43f af2b 	beq.w	2400c928 <dir_register+0x804>
2400cad2:	8997      	ldrh	r7, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400cad4:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400cad8:	749f      	strb	r7, [r3, #18]
	*ptr++ = (BYTE)val;
2400cada:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400cade:	2f00      	cmp	r7, #0
2400cae0:	f43f af23 	beq.w	2400c92a <dir_register+0x806>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400cae4:	42a7      	cmp	r7, r4
2400cae6:	f43f af20 	beq.w	2400c92a <dir_register+0x806>
2400caea:	89d7      	ldrh	r7, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
2400caec:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400caf0:	751f      	strb	r7, [r3, #20]
	*ptr++ = (BYTE)val;
2400caf2:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400caf6:	2f00      	cmp	r7, #0
2400caf8:	f43f af18 	beq.w	2400c92c <dir_register+0x808>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400cafc:	42a7      	cmp	r7, r4
2400cafe:	f43f af15 	beq.w	2400c92c <dir_register+0x808>
2400cb02:	8a17      	ldrh	r7, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
2400cb04:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400cb08:	759f      	strb	r7, [r3, #22]
	*ptr++ = (BYTE)val;
2400cb0a:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400cb0e:	2f00      	cmp	r7, #0
2400cb10:	f43f af0d 	beq.w	2400c92e <dir_register+0x80a>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400cb14:	42a7      	cmp	r7, r4
2400cb16:	f43f af0a 	beq.w	2400c92e <dir_register+0x80a>
2400cb1a:	8a57      	ldrh	r7, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
2400cb1c:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400cb20:	761f      	strb	r7, [r3, #24]
	*ptr++ = (BYTE)val;
2400cb22:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400cb26:	2f00      	cmp	r7, #0
2400cb28:	f43f af02 	beq.w	2400c930 <dir_register+0x80c>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400cb2c:	42a7      	cmp	r7, r4
2400cb2e:	f43f aeff 	beq.w	2400c930 <dir_register+0x80c>
2400cb32:	8a97      	ldrh	r7, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
2400cb34:	ea4f 2e17 	mov.w	lr, r7, lsr #8
2400cb38:	771f      	strb	r7, [r3, #28]
	*ptr++ = (BYTE)val;
2400cb3a:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400cb3e:	2f00      	cmp	r7, #0
2400cb40:	f43f aef7 	beq.w	2400c932 <dir_register+0x80e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400cb44:	42a7      	cmp	r7, r4
2400cb46:	f43f aef4 	beq.w	2400c932 <dir_register+0x80e>
2400cb4a:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400cb4c:	1e57      	subs	r7, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400cb4e:	779a      	strb	r2, [r3, #30]
2400cb50:	0a12      	lsrs	r2, r2, #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400cb52:	b2bf      	uxth	r7, r7
	*ptr++ = (BYTE)val;
2400cb54:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
2400cb56:	f64f 72fd 	movw	r2, #65533	; 0xfffd
2400cb5a:	4297      	cmp	r7, r2
2400cb5c:	f63f aeea 	bhi.w	2400c934 <dir_register+0x810>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400cb60:	4461      	add	r1, ip
2400cb62:	8b4a      	ldrh	r2, [r1, #26]
2400cb64:	2a00      	cmp	r2, #0
2400cb66:	f47f aee7 	bne.w	2400c938 <dir_register+0x814>
2400cb6a:	e6e3      	b.n	2400c934 <dir_register+0x810>
			*d++ = *s++;
2400cb6c:	f89a 2024 	ldrb.w	r2, [sl, #36]	; 0x24
2400cb70:	701a      	strb	r2, [r3, #0]
2400cb72:	f89a 2025 	ldrb.w	r2, [sl, #37]	; 0x25
2400cb76:	705a      	strb	r2, [r3, #1]
2400cb78:	f89a 2026 	ldrb.w	r2, [sl, #38]	; 0x26
2400cb7c:	709a      	strb	r2, [r3, #2]
2400cb7e:	f89a 2027 	ldrb.w	r2, [sl, #39]	; 0x27
2400cb82:	70da      	strb	r2, [r3, #3]
2400cb84:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
2400cb88:	711a      	strb	r2, [r3, #4]
2400cb8a:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
2400cb8e:	715a      	strb	r2, [r3, #5]
2400cb90:	f89a 202a 	ldrb.w	r2, [sl, #42]	; 0x2a
2400cb94:	719a      	strb	r2, [r3, #6]
2400cb96:	f89a 202b 	ldrb.w	r2, [sl, #43]	; 0x2b
2400cb9a:	71da      	strb	r2, [r3, #7]
2400cb9c:	f7ff bb66 	b.w	2400c26c <dir_register+0x148>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400cba0:	f04f 0b02 	mov.w	fp, #2
2400cba4:	e593      	b.n	2400c6ce <dir_register+0x5aa>
					fs->winsect -= n;							/* Restore window offset */
2400cba6:	1a9a      	subs	r2, r3, r2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400cba8:	69a3      	ldr	r3, [r4, #24]
					fs->winsect -= n;							/* Restore window offset */
2400cbaa:	463e      	mov	r6, r7
2400cbac:	9d07      	ldr	r5, [sp, #28]
2400cbae:	9f08      	ldr	r7, [sp, #32]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400cbb0:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
2400cbb2:	6322      	str	r2, [r4, #48]	; 0x30
2400cbb4:	9a04      	ldr	r2, [sp, #16]
2400cbb6:	e5fb      	b.n	2400c7b0 <dir_register+0x68c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400cbb8:	2200      	movs	r2, #0
2400cbba:	e702      	b.n	2400c9c2 <dir_register+0x89e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400cbbc:	f104 0634 	add.w	r6, r4, #52	; 0x34
		wsect = fs->winsect;	/* Current sector number */
2400cbc0:	6b22      	ldr	r2, [r4, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400cbc2:	2301      	movs	r3, #1
2400cbc4:	7860      	ldrb	r0, [r4, #1]
2400cbc6:	4631      	mov	r1, r6
2400cbc8:	9205      	str	r2, [sp, #20]
2400cbca:	f7fd fe39 	bl	2400a840 <disk_write>
2400cbce:	2800      	cmp	r0, #0
2400cbd0:	f47f aec0 	bne.w	2400c954 <dir_register+0x830>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400cbd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
2400cbd6:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
2400cbd8:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400cbda:	1ad1      	subs	r1, r2, r3
2400cbdc:	69e3      	ldr	r3, [r4, #28]
2400cbde:	4299      	cmp	r1, r3
2400cbe0:	f4bf aedd 	bcs.w	2400c99e <dir_register+0x87a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400cbe4:	f894 b002 	ldrb.w	fp, [r4, #2]
2400cbe8:	f1bb 0f01 	cmp.w	fp, #1
2400cbec:	f67f aed7 	bls.w	2400c99e <dir_register+0x87a>
2400cbf0:	4631      	mov	r1, r6
2400cbf2:	462e      	mov	r6, r5
2400cbf4:	4625      	mov	r5, r4
2400cbf6:	4614      	mov	r4, r2
2400cbf8:	e000      	b.n	2400cbfc <dir_register+0xad8>
					wsect += fs->fsize;
2400cbfa:	69eb      	ldr	r3, [r5, #28]
2400cbfc:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400cbfe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400cc02:	2301      	movs	r3, #1
2400cc04:	7868      	ldrb	r0, [r5, #1]
2400cc06:	4622      	mov	r2, r4
2400cc08:	9105      	str	r1, [sp, #20]
2400cc0a:	f7fd fe19 	bl	2400a840 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400cc0e:	f1bb 0f01 	cmp.w	fp, #1
2400cc12:	9905      	ldr	r1, [sp, #20]
2400cc14:	d1f1      	bne.n	2400cbfa <dir_register+0xad6>
2400cc16:	462c      	mov	r4, r5
2400cc18:	4635      	mov	r5, r6
2400cc1a:	460e      	mov	r6, r1
2400cc1c:	e6bf      	b.n	2400c99e <dir_register+0x87a>
2400cc1e:	bf00      	nop

2400cc20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
2400cc20:	b510      	push	{r4, lr}
2400cc22:	b082      	sub	sp, #8
2400cc24:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
2400cc28:	b1a1      	cbz	r1, 2400cc54 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400cc2a:	f891 c000 	ldrb.w	ip, [r1]
2400cc2e:	f1bc 0f1f 	cmp.w	ip, #31
2400cc32:	d912      	bls.n	2400cc5a <f_mount+0x3a>
2400cc34:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
2400cc38:	d00f      	beq.n	2400cc5a <f_mount+0x3a>
2400cc3a:	4608      	mov	r0, r1
2400cc3c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400cc40:	2b1f      	cmp	r3, #31
2400cc42:	d90c      	bls.n	2400cc5e <f_mount+0x3e>
2400cc44:	2b3a      	cmp	r3, #58	; 0x3a
2400cc46:	d1f9      	bne.n	2400cc3c <f_mount+0x1c>
			i = *tp++ - '0';
2400cc48:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400cc4a:	4288      	cmp	r0, r1
2400cc4c:	d102      	bne.n	2400cc54 <f_mount+0x34>
2400cc4e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
2400cc52:	d006      	beq.n	2400cc62 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
2400cc54:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
2400cc56:	b002      	add	sp, #8
2400cc58:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400cc5a:	4663      	mov	r3, ip
2400cc5c:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400cc5e:	2b3a      	cmp	r3, #58	; 0x3a
2400cc60:	d0f2      	beq.n	2400cc48 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
2400cc62:	4913      	ldr	r1, [pc, #76]	; (2400ccb0 <f_mount+0x90>)
2400cc64:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
2400cc66:	b143      	cbz	r3, 2400cc7a <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400cc68:	4812      	ldr	r0, [pc, #72]	; (2400ccb4 <f_mount+0x94>)
2400cc6a:	6804      	ldr	r4, [r0, #0]
2400cc6c:	42a3      	cmp	r3, r4
2400cc6e:	d019      	beq.n	2400cca4 <f_mount+0x84>
2400cc70:	6904      	ldr	r4, [r0, #16]
2400cc72:	429c      	cmp	r4, r3
2400cc74:	d013      	beq.n	2400cc9e <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
2400cc76:	2000      	movs	r0, #0
2400cc78:	7018      	strb	r0, [r3, #0]
	if (fs) {
2400cc7a:	9b01      	ldr	r3, [sp, #4]
2400cc7c:	b15b      	cbz	r3, 2400cc96 <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
2400cc7e:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400cc80:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
2400cc82:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
2400cc84:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400cc86:	d1e6      	bne.n	2400cc56 <f_mount+0x36>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
2400cc88:	4602      	mov	r2, r0
2400cc8a:	a901      	add	r1, sp, #4
2400cc8c:	4668      	mov	r0, sp
2400cc8e:	f7fd ffb1 	bl	2400abf4 <find_volume>
}
2400cc92:	b002      	add	sp, #8
2400cc94:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400cc96:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
2400cc98:	600b      	str	r3, [r1, #0]
}
2400cc9a:	b002      	add	sp, #8
2400cc9c:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
2400cc9e:	2400      	movs	r4, #0
2400cca0:	6104      	str	r4, [r0, #16]
2400cca2:	e7e8      	b.n	2400cc76 <f_mount+0x56>
2400cca4:	2400      	movs	r4, #0
2400cca6:	6004      	str	r4, [r0, #0]
2400cca8:	6904      	ldr	r4, [r0, #16]
2400ccaa:	429c      	cmp	r4, r3
2400ccac:	d1e3      	bne.n	2400cc76 <f_mount+0x56>
2400ccae:	e7f6      	b.n	2400cc9e <f_mount+0x7e>
2400ccb0:	20012248 	.word	0x20012248
2400ccb4:	2001224c 	.word	0x2001224c

2400ccb8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
2400ccb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400ccbc:	b092      	sub	sp, #72	; 0x48
2400ccbe:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
2400ccc0:	2800      	cmp	r0, #0
2400ccc2:	f000 80a0 	beq.w	2400ce06 <f_open+0x14e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
2400ccc6:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
2400ccca:	4616      	mov	r6, r2
2400cccc:	4604      	mov	r4, r0
2400ccce:	a903      	add	r1, sp, #12
2400ccd0:	a801      	add	r0, sp, #4
2400ccd2:	463a      	mov	r2, r7
2400ccd4:	f7fd ff8e 	bl	2400abf4 <find_volume>
	if (res == FR_OK) {
2400ccd8:	4605      	mov	r5, r0
2400ccda:	b128      	cbz	r0, 2400cce8 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
2400ccdc:	2300      	movs	r3, #0
2400ccde:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
2400cce0:	4628      	mov	r0, r5
2400cce2:	b012      	add	sp, #72	; 0x48
2400cce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
2400cce8:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
2400ccea:	a804      	add	r0, sp, #16
2400ccec:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
2400ccee:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
2400ccf0:	f7fe ffee 	bl	2400bcd0 <follow_path>
		if (res == FR_OK) {
2400ccf4:	bb00      	cbnz	r0, 2400cd38 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
2400ccf6:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
2400ccfa:	2b00      	cmp	r3, #0
2400ccfc:	f2c0 808a 	blt.w	2400ce14 <f_open+0x15c>
		if (Files[i].fs) {	/* Existing entry */
2400cd00:	4ba6      	ldr	r3, [pc, #664]	; (2400cf9c <f_open+0x2e4>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400cd02:	f027 0201 	bic.w	r2, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400cd06:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
2400cd08:	f8d3 8000 	ldr.w	r8, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400cd0c:	4611      	mov	r1, r2
				Files[i].clu == dp->obj.sclust &&
2400cd0e:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
2400cd12:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
2400cd16:	f1b8 0f00 	cmp.w	r8, #0
2400cd1a:	f000 80fc 	beq.w	2400cf16 <f_open+0x25e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400cd1e:	4580      	cmp	r8, r0
2400cd20:	d07a      	beq.n	2400ce18 <f_open+0x160>
		if (Files[i].fs) {	/* Existing entry */
2400cd22:	f8d3 8010 	ldr.w	r8, [r3, #16]
2400cd26:	f1b8 0f00 	cmp.w	r8, #0
2400cd2a:	f000 808d 	beq.w	2400ce48 <f_open+0x190>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400cd2e:	4580      	cmp	r8, r0
2400cd30:	f000 8101 	beq.w	2400cf36 <f_open+0x27e>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
2400cd34:	2512      	movs	r5, #18
2400cd36:	e7d1      	b.n	2400ccdc <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400cd38:	f016 0f1c 	tst.w	r6, #28
2400cd3c:	d068      	beq.n	2400ce10 <f_open+0x158>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
2400cd3e:	2804      	cmp	r0, #4
2400cd40:	d166      	bne.n	2400ce10 <f_open+0x158>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400cd42:	4b96      	ldr	r3, [pc, #600]	; (2400cf9c <f_open+0x2e4>)
2400cd44:	681a      	ldr	r2, [r3, #0]
2400cd46:	b112      	cbz	r2, 2400cd4e <f_open+0x96>
2400cd48:	691b      	ldr	r3, [r3, #16]
2400cd4a:	2b00      	cmp	r3, #0
2400cd4c:	d1f2      	bne.n	2400cd34 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400cd4e:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
2400cd50:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400cd54:	f7ff f9e6 	bl	2400c124 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400cd58:	2800      	cmp	r0, #0
2400cd5a:	d159      	bne.n	2400ce10 <f_open+0x158>
				dw = GET_FATTIME();
2400cd5c:	f7fd fc68 	bl	2400a630 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
2400cd60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400cd62:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400cd66:	f3c0 4107 	ubfx	r1, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400cd6a:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400cd6e:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
2400cd72:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
2400cd74:	73d6      	strb	r6, [r2, #15]
	*ptr++ = (BYTE)val; val >>= 8;
2400cd76:	f882 c00e 	strb.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
2400cd7a:	7411      	strb	r1, [r2, #16]
	*ptr++ = (BYTE)val;
2400cd7c:	7450      	strb	r0, [r2, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
2400cd7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
2400cd80:	9b03      	ldr	r3, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400cd82:	75d6      	strb	r6, [r2, #23]
	*ptr++ = (BYTE)val; val >>= 8;
2400cd84:	f882 c016 	strb.w	ip, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
2400cd88:	7611      	strb	r1, [r2, #24]
	*ptr++ = (BYTE)val;
2400cd8a:	7650      	strb	r0, [r2, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400cd8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
2400cd8e:	f882 e00b 	strb.w	lr, [r2, #11]
	if (fs->fs_type == FS_FAT32) {
2400cd92:	7819      	ldrb	r1, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
2400cd94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2400cd96:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
2400cd98:	8b56      	ldrh	r6, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
2400cd9a:	d102      	bne.n	2400cda2 <f_open+0xea>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400cd9c:	8a91      	ldrh	r1, [r2, #20]
2400cd9e:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
2400cda2:	2100      	movs	r1, #0
2400cda4:	8351      	strh	r1, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
2400cda6:	7818      	ldrb	r0, [r3, #0]
2400cda8:	2803      	cmp	r0, #3
2400cdaa:	d100      	bne.n	2400cdae <f_open+0xf6>
	*ptr++ = (BYTE)val; val >>= 8;
2400cdac:	8291      	strh	r1, [r2, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
2400cdae:	990c      	ldr	r1, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400cdb0:	2200      	movs	r2, #0
2400cdb2:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
2400cdb4:	2101      	movs	r1, #1
2400cdb6:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
2400cdb8:	b19e      	cbz	r6, 2400cde2 <f_open+0x12a>
						res = remove_chain(&dj.obj, cl, 0);
2400cdba:	4631      	mov	r1, r6
2400cdbc:	a804      	add	r0, sp, #16
						dw = fs->winsect;
2400cdbe:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
2400cdc2:	f7ff f911 	bl	2400bfe8 <remove_chain>
						if (res == FR_OK) {
2400cdc6:	bb18      	cbnz	r0, 2400ce10 <f_open+0x158>
							res = move_window(fs, dw);
2400cdc8:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400cdca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2400cdcc:	4590      	cmp	r8, r2
2400cdce:	f000 80e2 	beq.w	2400cf96 <f_open+0x2de>
2400cdd2:	4618      	mov	r0, r3
2400cdd4:	4641      	mov	r1, r8
2400cdd6:	f7fd fed3 	bl	2400ab80 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400cdda:	3e01      	subs	r6, #1
2400cddc:	9b03      	ldr	r3, [sp, #12]
2400cdde:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
2400cde0:	b9b0      	cbnz	r0, 2400ce10 <f_open+0x158>
				mode |= FA_MODIFIED;
2400cde2:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400cde6:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400cdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400cdec:	3900      	subs	r1, #0
2400cdee:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400cdf0:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400cdf2:	bf18      	it	ne
2400cdf4:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
2400cdf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400cdf8:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400cdfa:	f7fd fd3b 	bl	2400a874 <inc_lock>
2400cdfe:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
2400ce00:	bb70      	cbnz	r0, 2400ce60 <f_open+0x1a8>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
2400ce02:	2502      	movs	r5, #2
2400ce04:	e76a      	b.n	2400ccdc <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
2400ce06:	2509      	movs	r5, #9
}
2400ce08:	4628      	mov	r0, r5
2400ce0a:	b012      	add	sp, #72	; 0x48
2400ce0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2400ce10:	4605      	mov	r5, r0
2400ce12:	e763      	b.n	2400ccdc <f_open+0x24>
				res = FR_INVALID_NAME;
2400ce14:	2506      	movs	r5, #6
2400ce16:	e761      	b.n	2400ccdc <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400ce18:	6858      	ldr	r0, [r3, #4]
2400ce1a:	4560      	cmp	r0, ip
2400ce1c:	f000 8094 	beq.w	2400cf48 <f_open+0x290>
		if (Files[i].fs) {	/* Existing entry */
2400ce20:	6918      	ldr	r0, [r3, #16]
2400ce22:	b188      	cbz	r0, 2400ce48 <f_open+0x190>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400ce24:	4540      	cmp	r0, r8
2400ce26:	d185      	bne.n	2400cd34 <f_open+0x7c>
2400ce28:	6958      	ldr	r0, [r3, #20]
2400ce2a:	4560      	cmp	r0, ip
2400ce2c:	d182      	bne.n	2400cd34 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
2400ce2e:	6998      	ldr	r0, [r3, #24]
2400ce30:	4570      	cmp	r0, lr
2400ce32:	f47f af7f 	bne.w	2400cd34 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
2400ce36:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
2400ce38:	2a00      	cmp	r2, #0
2400ce3a:	d163      	bne.n	2400cf04 <f_open+0x24c>
2400ce3c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
2400ce40:	899b      	ldrh	r3, [r3, #12]
2400ce42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400ce46:	d05d      	beq.n	2400cf04 <f_open+0x24c>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400ce48:	f016 0f1c 	tst.w	r6, #28
2400ce4c:	d04a      	beq.n	2400cee4 <f_open+0x22c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2400ce4e:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400ce52:	f013 0f11 	tst.w	r3, #17
2400ce56:	d15c      	bne.n	2400cf12 <f_open+0x25a>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
2400ce58:	0773      	lsls	r3, r6, #29
2400ce5a:	d555      	bpl.n	2400cf08 <f_open+0x250>
2400ce5c:	2508      	movs	r5, #8
2400ce5e:	e73d      	b.n	2400ccdc <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400ce60:	f8dd 900c 	ldr.w	r9, [sp, #12]
2400ce64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2400ce66:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
2400ce6a:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400ce6c:	2a03      	cmp	r2, #3
2400ce6e:	d102      	bne.n	2400ce76 <f_open+0x1be>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400ce70:	8a9a      	ldrh	r2, [r3, #20]
2400ce72:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->err = 0;			/* Clear error flag */
2400ce76:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400ce78:	60a6      	str	r6, [r4, #8]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
2400ce7a:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
	rv = rv << 8 | ptr[0];
2400ce7e:	f8d3 801c 	ldr.w	r8, [r3, #28]
			fp->obj.id = fs->id;
2400ce82:	f8b9 3006 	ldrh.w	r3, [r9, #6]
		*d++ = (BYTE)val;
2400ce86:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->err = 0;			/* Clear error flag */
2400ce8a:	7561      	strb	r1, [r4, #21]
		*d++ = (BYTE)val;
2400ce8c:	4650      	mov	r0, sl
			fp->sect = 0;			/* Invalidate current data sector */
2400ce8e:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
2400ce90:	61a1      	str	r1, [r4, #24]
			fp->obj.fs = fs;	 	/* Validate the file object */
2400ce92:	f8c4 9000 	str.w	r9, [r4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
2400ce96:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->obj.id = fs->id;
2400ce9a:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
2400ce9c:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
2400ce9e:	f005 fe51 	bl	24012b44 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
2400cea2:	06b9      	lsls	r1, r7, #26
2400cea4:	f57f af1c 	bpl.w	2400cce0 <f_open+0x28>
2400cea8:	f1b8 0f00 	cmp.w	r8, #0
2400ceac:	f43f af18 	beq.w	2400cce0 <f_open+0x28>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400ceb0:	f8b9 300a 	ldrh.w	r3, [r9, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
2400ceb4:	f8c4 8018 	str.w	r8, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400ceb8:	ebb8 2f43 	cmp.w	r8, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400cebc:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400cec0:	d804      	bhi.n	2400cecc <f_open+0x214>
2400cec2:	e047      	b.n	2400cf54 <f_open+0x29c>
2400cec4:	1c42      	adds	r2, r0, #1
2400cec6:	d06b      	beq.n	2400cfa0 <f_open+0x2e8>
2400cec8:	4547      	cmp	r7, r8
2400ceca:	d269      	bcs.n	2400cfa0 <f_open+0x2e8>
					clst = get_fat(&fp->obj, clst);
2400cecc:	4631      	mov	r1, r6
2400cece:	6820      	ldr	r0, [r4, #0]
2400ced0:	f7fe f8a2 	bl	2400b018 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
2400ced4:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400ced6:	eba8 0807 	sub.w	r8, r8, r7
					clst = get_fat(&fp->obj, clst);
2400ceda:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
2400cedc:	d8f2      	bhi.n	2400cec4 <f_open+0x20c>
2400cede:	2502      	movs	r5, #2
				fp->clust = clst;
2400cee0:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400cee2:	e6fb      	b.n	2400ccdc <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
2400cee4:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400cee8:	06d9      	lsls	r1, r3, #27
2400ceea:	d422      	bmi.n	2400cf32 <f_open+0x27a>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
2400ceec:	07b1      	lsls	r1, r6, #30
2400ceee:	d501      	bpl.n	2400cef4 <f_open+0x23c>
2400cef0:	07d8      	lsls	r0, r3, #31
2400cef2:	d40e      	bmi.n	2400cf12 <f_open+0x25a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2400cef4:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400cef8:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2400cefa:	2e00      	cmp	r6, #0
2400cefc:	f47f af71 	bne.w	2400cde2 <f_open+0x12a>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400cf00:	4611      	mov	r1, r2
2400cf02:	e772      	b.n	2400cdea <f_open+0x132>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
2400cf04:	2510      	movs	r5, #16
2400cf06:	e6e9      	b.n	2400ccdc <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400cf08:	0730      	lsls	r0, r6, #28
2400cf0a:	f53f af27 	bmi.w	2400cd5c <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400cf0e:	9b03      	ldr	r3, [sp, #12]
2400cf10:	e76b      	b.n	2400cdea <f_open+0x132>
						res = FR_DENIED;
2400cf12:	2507      	movs	r5, #7
2400cf14:	e6e2      	b.n	2400ccdc <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
2400cf16:	f8d3 8010 	ldr.w	r8, [r3, #16]
2400cf1a:	f1b8 0f00 	cmp.w	r8, #0
2400cf1e:	d093      	beq.n	2400ce48 <f_open+0x190>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400cf20:	4540      	cmp	r0, r8
2400cf22:	d191      	bne.n	2400ce48 <f_open+0x190>
2400cf24:	6958      	ldr	r0, [r3, #20]
2400cf26:	4560      	cmp	r0, ip
2400cf28:	d18e      	bne.n	2400ce48 <f_open+0x190>
				Files[i].clu == dp->obj.sclust &&
2400cf2a:	6998      	ldr	r0, [r3, #24]
2400cf2c:	4586      	cmp	lr, r0
2400cf2e:	d18b      	bne.n	2400ce48 <f_open+0x190>
2400cf30:	e781      	b.n	2400ce36 <f_open+0x17e>
					res = FR_NO_FILE;
2400cf32:	2504      	movs	r5, #4
2400cf34:	e6d2      	b.n	2400ccdc <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400cf36:	6958      	ldr	r0, [r3, #20]
2400cf38:	4560      	cmp	r0, ip
2400cf3a:	f47f aefb 	bne.w	2400cd34 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
2400cf3e:	6998      	ldr	r0, [r3, #24]
2400cf40:	4586      	cmp	lr, r0
2400cf42:	f47f aef7 	bne.w	2400cd34 <f_open+0x7c>
2400cf46:	e776      	b.n	2400ce36 <f_open+0x17e>
2400cf48:	6898      	ldr	r0, [r3, #8]
2400cf4a:	4570      	cmp	r0, lr
2400cf4c:	f47f af68 	bne.w	2400ce20 <f_open+0x168>
	for (i = be = 0; i < _FS_LOCK; i++) {
2400cf50:	4628      	mov	r0, r5
2400cf52:	e771      	b.n	2400ce38 <f_open+0x180>
				fp->clust = clst;
2400cf54:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400cf56:	f3c8 0308 	ubfx	r3, r8, #0, #9
2400cf5a:	2b00      	cmp	r3, #0
2400cf5c:	f43f aec0 	beq.w	2400cce0 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
2400cf60:	9803      	ldr	r0, [sp, #12]
	clst -= 2;
2400cf62:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400cf64:	6983      	ldr	r3, [r0, #24]
2400cf66:	3b02      	subs	r3, #2
2400cf68:	429e      	cmp	r6, r3
2400cf6a:	f4bf af4a 	bcs.w	2400ce02 <f_open+0x14a>
	return clst * fs->csize + fs->database;
2400cf6e:	8942      	ldrh	r2, [r0, #10]
2400cf70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
2400cf72:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
2400cf76:	2a00      	cmp	r2, #0
2400cf78:	f43f af43 	beq.w	2400ce02 <f_open+0x14a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400cf7c:	eb02 2258 	add.w	r2, r2, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400cf80:	4651      	mov	r1, sl
2400cf82:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400cf84:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400cf86:	7840      	ldrb	r0, [r0, #1]
2400cf88:	f7fd fc4c 	bl	2400a824 <disk_read>
2400cf8c:	2800      	cmp	r0, #0
2400cf8e:	f43f aea7 	beq.w	2400cce0 <f_open+0x28>
2400cf92:	2501      	movs	r5, #1
2400cf94:	e6a2      	b.n	2400ccdc <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400cf96:	3e01      	subs	r6, #1
2400cf98:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
2400cf9a:	e722      	b.n	2400cde2 <f_open+0x12a>
2400cf9c:	2001224c 	.word	0x2001224c
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400cfa0:	1c70      	adds	r0, r6, #1
				fp->clust = clst;
2400cfa2:	61e6      	str	r6, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400cfa4:	bf0c      	ite	eq
2400cfa6:	2301      	moveq	r3, #1
2400cfa8:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400cfaa:	d1d4      	bne.n	2400cf56 <f_open+0x29e>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400cfac:	461d      	mov	r5, r3
2400cfae:	e695      	b.n	2400ccdc <f_open+0x24>

2400cfb0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
2400cfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400cfb4:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
2400cfb6:	2300      	movs	r3, #0
{
2400cfb8:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
2400cfba:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400cfbc:	b150      	cbz	r0, 2400cfd4 <f_read+0x24>
2400cfbe:	6803      	ldr	r3, [r0, #0]
2400cfc0:	4604      	mov	r4, r0
2400cfc2:	b13b      	cbz	r3, 2400cfd4 <f_read+0x24>
2400cfc4:	4617      	mov	r7, r2
2400cfc6:	781a      	ldrb	r2, [r3, #0]
2400cfc8:	b122      	cbz	r2, 2400cfd4 <f_read+0x24>
2400cfca:	460d      	mov	r5, r1
2400cfcc:	88da      	ldrh	r2, [r3, #6]
2400cfce:	8881      	ldrh	r1, [r0, #4]
2400cfd0:	4291      	cmp	r1, r2
2400cfd2:	d005      	beq.n	2400cfe0 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2400cfd4:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
2400cfd8:	4640      	mov	r0, r8
2400cfda:	b005      	add	sp, #20
2400cfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400cfe0:	7858      	ldrb	r0, [r3, #1]
2400cfe2:	f7fd fc03 	bl	2400a7ec <disk_status>
2400cfe6:	07c2      	lsls	r2, r0, #31
2400cfe8:	d4f4      	bmi.n	2400cfd4 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400cfea:	f894 8015 	ldrb.w	r8, [r4, #21]
2400cfee:	f1b8 0f00 	cmp.w	r8, #0
2400cff2:	d1f1      	bne.n	2400cfd8 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400cff4:	7d23      	ldrb	r3, [r4, #20]
2400cff6:	f013 0301 	ands.w	r3, r3, #1
2400cffa:	9300      	str	r3, [sp, #0]
2400cffc:	f000 80c8 	beq.w	2400d190 <f_read+0x1e0>
	remain = fp->obj.objsize - fp->fptr;
2400d000:	69a3      	ldr	r3, [r4, #24]
2400d002:	68e2      	ldr	r2, [r4, #12]
2400d004:	1ad2      	subs	r2, r2, r3
2400d006:	4297      	cmp	r7, r2
2400d008:	bf28      	it	cs
2400d00a:	4617      	movcs	r7, r2
	for ( ;  btr;								/* Repeat until all data read */
2400d00c:	2f00      	cmp	r7, #0
2400d00e:	d0e3      	beq.n	2400cfd8 <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400d010:	46a2      	mov	sl, r4
2400d012:	f104 022d 	add.w	r2, r4, #45	; 0x2d
2400d016:	f8cd 8008 	str.w	r8, [sp, #8]
2400d01a:	f85a 9b2c 	ldr.w	r9, [sl], #44
2400d01e:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400d020:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400d024:	2a00      	cmp	r2, #0
2400d026:	d154      	bne.n	2400d0d2 <f_read+0x122>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
2400d028:	f8b9 200a 	ldrh.w	r2, [r9, #10]
2400d02c:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
2400d02e:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
2400d032:	d07f      	beq.n	2400d134 <f_read+0x184>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
2400d034:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400d036:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
2400d03a:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400d03c:	3b02      	subs	r3, #2
2400d03e:	4298      	cmp	r0, r3
2400d040:	f080 8086 	bcs.w	2400d150 <f_read+0x1a0>
	return clst * fs->csize + fs->database;
2400d044:	f8b9 100a 	ldrh.w	r1, [r9, #10]
2400d048:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
2400d04c:	fb01 3000 	mla	r0, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
2400d050:	2800      	cmp	r0, #0
2400d052:	d07d      	beq.n	2400d150 <f_read+0x1a0>
			if (cc) {							/* Read maximum contiguous sectors directly */
2400d054:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
2400d058:	eb02 0b00 	add.w	fp, r2, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
2400d05c:	d324      	bcc.n	2400d0a8 <f_read+0xf8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400d05e:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
2400d062:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400d066:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400d068:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
2400d06c:	bf88      	it	hi
2400d06e:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400d072:	465a      	mov	r2, fp
2400d074:	4629      	mov	r1, r5
2400d076:	4643      	mov	r3, r8
2400d078:	f7fd fbd4 	bl	2400a824 <disk_read>
2400d07c:	2800      	cmp	r0, #0
2400d07e:	d16e      	bne.n	2400d15e <f_read+0x1ae>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400d080:	f994 2014 	ldrsb.w	r2, [r4, #20]
2400d084:	2a00      	cmp	r2, #0
2400d086:	f2c0 8093 	blt.w	2400d1b0 <f_read+0x200>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
2400d08a:	ea4f 2c48 	mov.w	ip, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400d08e:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
2400d090:	ebb7 070c 	subs.w	r7, r7, ip
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400d094:	6832      	ldr	r2, [r6, #0]
2400d096:	4465      	add	r5, ip
2400d098:	4463      	add	r3, ip
2400d09a:	4462      	add	r2, ip
2400d09c:	61a3      	str	r3, [r4, #24]
2400d09e:	6032      	str	r2, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
2400d0a0:	d1be      	bne.n	2400d020 <f_read+0x70>
2400d0a2:	f8dd 8008 	ldr.w	r8, [sp, #8]
2400d0a6:	e797      	b.n	2400cfd8 <f_read+0x28>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
2400d0a8:	6a22      	ldr	r2, [r4, #32]
2400d0aa:	455a      	cmp	r2, fp
2400d0ac:	d00c      	beq.n	2400d0c8 <f_read+0x118>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
2400d0ae:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400d0b2:	2b00      	cmp	r3, #0
2400d0b4:	db6f      	blt.n	2400d196 <f_read+0x1e6>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
2400d0b6:	2301      	movs	r3, #1
2400d0b8:	465a      	mov	r2, fp
2400d0ba:	4651      	mov	r1, sl
2400d0bc:	f899 0001 	ldrb.w	r0, [r9, #1]
2400d0c0:	f7fd fbb0 	bl	2400a824 <disk_read>
2400d0c4:	2800      	cmp	r0, #0
2400d0c6:	d14a      	bne.n	2400d15e <f_read+0x1ae>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400d0c8:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
2400d0ca:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400d0ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400d0d2:	1c51      	adds	r1, r2, #1
2400d0d4:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
2400d0d8:	eb0a 0302 	add.w	r3, sl, r2
2400d0dc:	4451      	add	r1, sl
2400d0de:	45bc      	cmp	ip, r7
2400d0e0:	eba5 0101 	sub.w	r1, r5, r1
2400d0e4:	bf28      	it	cs
2400d0e6:	46bc      	movcs	ip, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400d0e8:	2902      	cmp	r1, #2
2400d0ea:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
2400d0ee:	d945      	bls.n	2400d17c <f_read+0x1cc>
2400d0f0:	f1bb 0f07 	cmp.w	fp, #7
2400d0f4:	d942      	bls.n	2400d17c <f_read+0x1cc>
2400d0f6:	f02c 0e03 	bic.w	lr, ip, #3
2400d0fa:	461a      	mov	r2, r3
2400d0fc:	4629      	mov	r1, r5
2400d0fe:	449e      	add	lr, r3
			*d++ = *s++;
2400d100:	f852 0b04 	ldr.w	r0, [r2], #4
2400d104:	4572      	cmp	r2, lr
2400d106:	f841 0b04 	str.w	r0, [r1], #4
		} while (--cnt);
2400d10a:	d1f9      	bne.n	2400d100 <f_read+0x150>
2400d10c:	f02c 0203 	bic.w	r2, ip, #3
2400d110:	4594      	cmp	ip, r2
2400d112:	eb05 0102 	add.w	r1, r5, r2
2400d116:	eb03 0002 	add.w	r0, r3, r2
2400d11a:	d0b8      	beq.n	2400d08e <f_read+0xde>
			*d++ = *s++;
2400d11c:	5c9b      	ldrb	r3, [r3, r2]
2400d11e:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
2400d120:	ebbb 0202 	subs.w	r2, fp, r2
2400d124:	d0b3      	beq.n	2400d08e <f_read+0xde>
			*d++ = *s++;
2400d126:	7843      	ldrb	r3, [r0, #1]
		} while (--cnt);
2400d128:	2a01      	cmp	r2, #1
			*d++ = *s++;
2400d12a:	704b      	strb	r3, [r1, #1]
		} while (--cnt);
2400d12c:	d0af      	beq.n	2400d08e <f_read+0xde>
			*d++ = *s++;
2400d12e:	7883      	ldrb	r3, [r0, #2]
2400d130:	708b      	strb	r3, [r1, #2]
		} while (--cnt);
2400d132:	e7ac      	b.n	2400d08e <f_read+0xde>
				if (fp->fptr == 0) {			/* On the top of the file? */
2400d134:	b9db      	cbnz	r3, 2400d16e <f_read+0x1be>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
2400d136:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400d138:	2801      	cmp	r0, #1
2400d13a:	d909      	bls.n	2400d150 <f_read+0x1a0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400d13c:	1c43      	adds	r3, r0, #1
2400d13e:	d00e      	beq.n	2400d15e <f_read+0x1ae>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400d140:	f8d9 3018 	ldr.w	r3, [r9, #24]
				fp->clust = clst;				/* Update current cluster */
2400d144:	61e0      	str	r0, [r4, #28]
	clst -= 2;
2400d146:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400d148:	3b02      	subs	r3, #2
2400d14a:	4298      	cmp	r0, r3
2400d14c:	f4ff af7a 	bcc.w	2400d044 <f_read+0x94>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400d150:	2302      	movs	r3, #2
2400d152:	4698      	mov	r8, r3
2400d154:	7563      	strb	r3, [r4, #21]
}
2400d156:	4640      	mov	r0, r8
2400d158:	b005      	add	sp, #20
2400d15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400d15e:	f8dd 8000 	ldr.w	r8, [sp]
2400d162:	2301      	movs	r3, #1
}
2400d164:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400d166:	7563      	strb	r3, [r4, #21]
}
2400d168:	b005      	add	sp, #20
2400d16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
2400d16e:	69e1      	ldr	r1, [r4, #28]
2400d170:	6820      	ldr	r0, [r4, #0]
2400d172:	9203      	str	r2, [sp, #12]
2400d174:	f7fd ff50 	bl	2400b018 <get_fat.isra.0>
2400d178:	9a03      	ldr	r2, [sp, #12]
2400d17a:	e7dd      	b.n	2400d138 <f_read+0x188>
2400d17c:	1e6a      	subs	r2, r5, #1
2400d17e:	eb03 000c 	add.w	r0, r3, ip
			*d++ = *s++;
2400d182:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
2400d186:	4283      	cmp	r3, r0
			*d++ = *s++;
2400d188:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
2400d18c:	d1f9      	bne.n	2400d182 <f_read+0x1d2>
2400d18e:	e77e      	b.n	2400d08e <f_read+0xde>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400d190:	f04f 0807 	mov.w	r8, #7
2400d194:	e720      	b.n	2400cfd8 <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400d196:	2301      	movs	r3, #1
2400d198:	4651      	mov	r1, sl
2400d19a:	f899 0001 	ldrb.w	r0, [r9, #1]
2400d19e:	f7fd fb4f 	bl	2400a840 <disk_write>
2400d1a2:	2800      	cmp	r0, #0
2400d1a4:	d1db      	bne.n	2400d15e <f_read+0x1ae>
					fp->flag &= (BYTE)~FA_DIRTY;
2400d1a6:	7d23      	ldrb	r3, [r4, #20]
2400d1a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400d1ac:	7523      	strb	r3, [r4, #20]
2400d1ae:	e782      	b.n	2400d0b6 <f_read+0x106>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400d1b0:	6a22      	ldr	r2, [r4, #32]
2400d1b2:	eba2 0b0b 	sub.w	fp, r2, fp
2400d1b6:	45c3      	cmp	fp, r8
2400d1b8:	f4bf af67 	bcs.w	2400d08a <f_read+0xda>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
2400d1bc:	eb05 224b 	add.w	r2, r5, fp, lsl #9
2400d1c0:	9b01      	ldr	r3, [sp, #4]
2400d1c2:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400d1c4:	1ad0      	subs	r0, r2, r3
2400d1c6:	2802      	cmp	r0, #2
2400d1c8:	d908      	bls.n	2400d1dc <f_read+0x22c>
2400d1ca:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
2400d1ce:	f851 3b04 	ldr.w	r3, [r1], #4
2400d1d2:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
2400d1d6:	4562      	cmp	r2, ip
2400d1d8:	d1f9      	bne.n	2400d1ce <f_read+0x21e>
2400d1da:	e756      	b.n	2400d08a <f_read+0xda>
2400d1dc:	3a01      	subs	r2, #1
2400d1de:	f504 7c0b 	add.w	ip, r4, #556	; 0x22c
			*d++ = *s++;
2400d1e2:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
2400d1e6:	458c      	cmp	ip, r1
			*d++ = *s++;
2400d1e8:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
2400d1ec:	d1f9      	bne.n	2400d1e2 <f_read+0x232>
2400d1ee:	e74c      	b.n	2400d08a <f_read+0xda>

2400d1f0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
2400d1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400d1f4:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
2400d1f6:	2300      	movs	r3, #0
{
2400d1f8:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
2400d1fa:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400d1fc:	b150      	cbz	r0, 2400d214 <f_write+0x24>
2400d1fe:	6803      	ldr	r3, [r0, #0]
2400d200:	4604      	mov	r4, r0
2400d202:	b13b      	cbz	r3, 2400d214 <f_write+0x24>
2400d204:	4616      	mov	r6, r2
2400d206:	781a      	ldrb	r2, [r3, #0]
2400d208:	b122      	cbz	r2, 2400d214 <f_write+0x24>
2400d20a:	460d      	mov	r5, r1
2400d20c:	88da      	ldrh	r2, [r3, #6]
2400d20e:	8881      	ldrh	r1, [r0, #4]
2400d210:	4291      	cmp	r1, r2
2400d212:	d005      	beq.n	2400d220 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2400d214:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
2400d218:	4640      	mov	r0, r8
2400d21a:	b005      	add	sp, #20
2400d21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400d220:	7858      	ldrb	r0, [r3, #1]
2400d222:	f7fd fae3 	bl	2400a7ec <disk_status>
2400d226:	07c0      	lsls	r0, r0, #31
2400d228:	d4f4      	bmi.n	2400d214 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400d22a:	f894 8015 	ldrb.w	r8, [r4, #21]
2400d22e:	f1b8 0f00 	cmp.w	r8, #0
2400d232:	d1f1      	bne.n	2400d218 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2400d234:	7d22      	ldrb	r2, [r4, #20]
2400d236:	0791      	lsls	r1, r2, #30
2400d238:	f140 80de 	bpl.w	2400d3f8 <f_write+0x208>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
2400d23c:	69a3      	ldr	r3, [r4, #24]
2400d23e:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2400d240:	bf28      	it	cs
2400d242:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
2400d244:	2e00      	cmp	r6, #0
2400d246:	d064      	beq.n	2400d312 <f_write+0x122>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400d248:	46a2      	mov	sl, r4
2400d24a:	f504 720b 	add.w	r2, r4, #556	; 0x22c
2400d24e:	f85a 9b2c 	ldr.w	r9, [sl], #44
2400d252:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400d254:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400d258:	2a00      	cmp	r2, #0
2400d25a:	d168      	bne.n	2400d32e <f_write+0x13e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
2400d25c:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
2400d260:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
2400d264:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
2400d268:	d110      	bne.n	2400d28c <f_write+0x9c>
				if (fp->fptr == 0) {		/* On the top of the file? */
2400d26a:	2b00      	cmp	r3, #0
2400d26c:	f040 80b2 	bne.w	2400d3d4 <f_write+0x1e4>
					clst = fp->obj.sclust;	/* Follow from the origin */
2400d270:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
2400d272:	2800      	cmp	r0, #0
2400d274:	f000 80c3 	beq.w	2400d3fe <f_write+0x20e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2400d278:	2801      	cmp	r0, #1
2400d27a:	f000 8090 	beq.w	2400d39e <f_write+0x1ae>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400d27e:	1c43      	adds	r3, r0, #1
2400d280:	f000 80a1 	beq.w	2400d3c6 <f_write+0x1d6>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
2400d284:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
2400d286:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
2400d288:	b903      	cbnz	r3, 2400d28c <f_write+0x9c>
2400d28a:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
2400d28c:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400d290:	2b00      	cmp	r3, #0
2400d292:	f2c0 808b 	blt.w	2400d3ac <f_write+0x1bc>
	clst -= 2;
2400d296:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400d298:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
2400d29c:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400d29e:	3b02      	subs	r3, #2
2400d2a0:	429a      	cmp	r2, r3
2400d2a2:	d27c      	bcs.n	2400d39e <f_write+0x1ae>
	return clst * fs->csize + fs->database;
2400d2a4:	f8b9 100a 	ldrh.w	r1, [r9, #10]
2400d2a8:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
2400d2ac:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
2400d2b0:	2a00      	cmp	r2, #0
2400d2b2:	d074      	beq.n	2400d39e <f_write+0x1ae>
			if (cc) {						/* Write maximum contiguous sectors directly */
2400d2b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
2400d2b8:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
2400d2ba:	d32e      	bcc.n	2400d31a <f_write+0x12a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400d2bc:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
2400d2c0:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400d2c2:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400d2c4:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
2400d2c8:	bf88      	it	hi
2400d2ca:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400d2ce:	4629      	mov	r1, r5
2400d2d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
2400d2d4:	f7fd fab4 	bl	2400a840 <disk_write>
2400d2d8:	2800      	cmp	r0, #0
2400d2da:	d174      	bne.n	2400d3c6 <f_write+0x1d6>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
2400d2dc:	6a21      	ldr	r1, [r4, #32]
2400d2de:	9a02      	ldr	r2, [sp, #8]
2400d2e0:	9b03      	ldr	r3, [sp, #12]
2400d2e2:	1a8a      	subs	r2, r1, r2
2400d2e4:	429a      	cmp	r2, r3
2400d2e6:	f0c0 809e 	bcc.w	2400d426 <f_write+0x236>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
2400d2ea:	eb05 2243 	add.w	r2, r5, r3, lsl #9
2400d2ee:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2400d2f2:	69a3      	ldr	r3, [r4, #24]
2400d2f4:	4615      	mov	r5, r2
2400d2f6:	68e2      	ldr	r2, [r4, #12]
2400d2f8:	4463      	add	r3, ip
2400d2fa:	429a      	cmp	r2, r3
2400d2fc:	61a3      	str	r3, [r4, #24]
2400d2fe:	bf38      	it	cc
2400d300:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
2400d302:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2400d306:	60e2      	str	r2, [r4, #12]
2400d308:	683a      	ldr	r2, [r7, #0]
2400d30a:	4462      	add	r2, ip
2400d30c:	603a      	str	r2, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
2400d30e:	d1a1      	bne.n	2400d254 <f_write+0x64>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
2400d310:	7d22      	ldrb	r2, [r4, #20]
2400d312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400d316:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
2400d318:	e77e      	b.n	2400d218 <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2400d31a:	6a23      	ldr	r3, [r4, #32]
2400d31c:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
2400d31e:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2400d320:	d002      	beq.n	2400d328 <f_write+0x138>
2400d322:	68e1      	ldr	r1, [r4, #12]
2400d324:	428b      	cmp	r3, r1
2400d326:	d372      	bcc.n	2400d40e <f_write+0x21e>
			fp->sect = sect;
2400d328:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400d32a:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400d32e:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
2400d332:	eb0a 0302 	add.w	r3, sl, r2
2400d336:	1c6a      	adds	r2, r5, #1
2400d338:	45b4      	cmp	ip, r6
2400d33a:	eba3 0202 	sub.w	r2, r3, r2
2400d33e:	bf28      	it	cs
2400d340:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400d342:	2a02      	cmp	r2, #2
2400d344:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
2400d348:	d94c      	bls.n	2400d3e4 <f_write+0x1f4>
2400d34a:	f1bb 0f07 	cmp.w	fp, #7
2400d34e:	d949      	bls.n	2400d3e4 <f_write+0x1f4>
2400d350:	f02c 0e03 	bic.w	lr, ip, #3
2400d354:	461a      	mov	r2, r3
2400d356:	4629      	mov	r1, r5
2400d358:	449e      	add	lr, r3
			*d++ = *s++;
2400d35a:	f851 0b04 	ldr.w	r0, [r1], #4
2400d35e:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
2400d362:	4596      	cmp	lr, r2
2400d364:	d1f9      	bne.n	2400d35a <f_write+0x16a>
2400d366:	f02c 0103 	bic.w	r1, ip, #3
2400d36a:	458c      	cmp	ip, r1
2400d36c:	eb03 0001 	add.w	r0, r3, r1
2400d370:	eb05 0201 	add.w	r2, r5, r1
2400d374:	d00e      	beq.n	2400d394 <f_write+0x1a4>
			*d++ = *s++;
2400d376:	f815 e001 	ldrb.w	lr, [r5, r1]
2400d37a:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
2400d37e:	ebbb 0101 	subs.w	r1, fp, r1
2400d382:	d005      	beq.n	2400d390 <f_write+0x1a0>
			*d++ = *s++;
2400d384:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
2400d386:	2901      	cmp	r1, #1
			*d++ = *s++;
2400d388:	7043      	strb	r3, [r0, #1]
2400d38a:	bf1c      	itt	ne
2400d38c:	7893      	ldrbne	r3, [r2, #2]
2400d38e:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
2400d390:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
2400d394:	7d23      	ldrb	r3, [r4, #20]
2400d396:	f063 037f 	orn	r3, r3, #127	; 0x7f
2400d39a:	7523      	strb	r3, [r4, #20]
2400d39c:	e7a9      	b.n	2400d2f2 <f_write+0x102>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2400d39e:	2302      	movs	r3, #2
2400d3a0:	4698      	mov	r8, r3
2400d3a2:	7563      	strb	r3, [r4, #21]
}
2400d3a4:	4640      	mov	r0, r8
2400d3a6:	b005      	add	sp, #20
2400d3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400d3ac:	2301      	movs	r3, #1
2400d3ae:	6a22      	ldr	r2, [r4, #32]
2400d3b0:	4651      	mov	r1, sl
2400d3b2:	f899 0001 	ldrb.w	r0, [r9, #1]
2400d3b6:	f7fd fa43 	bl	2400a840 <disk_write>
2400d3ba:	b920      	cbnz	r0, 2400d3c6 <f_write+0x1d6>
				fp->flag &= (BYTE)~FA_DIRTY;
2400d3bc:	7d23      	ldrb	r3, [r4, #20]
2400d3be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400d3c2:	7523      	strb	r3, [r4, #20]
2400d3c4:	e767      	b.n	2400d296 <f_write+0xa6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400d3c6:	2301      	movs	r3, #1
2400d3c8:	4698      	mov	r8, r3
2400d3ca:	7563      	strb	r3, [r4, #21]
}
2400d3cc:	4640      	mov	r0, r8
2400d3ce:	b005      	add	sp, #20
2400d3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
2400d3d4:	69e1      	ldr	r1, [r4, #28]
2400d3d6:	4620      	mov	r0, r4
2400d3d8:	f7fe f94a 	bl	2400b670 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2400d3dc:	2800      	cmp	r0, #0
2400d3de:	f47f af4b 	bne.w	2400d278 <f_write+0x88>
2400d3e2:	e795      	b.n	2400d310 <f_write+0x120>
2400d3e4:	3b01      	subs	r3, #1
2400d3e6:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
2400d3ea:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
2400d3ee:	4295      	cmp	r5, r2
			*d++ = *s++;
2400d3f0:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
2400d3f4:	d1f9      	bne.n	2400d3ea <f_write+0x1fa>
2400d3f6:	e7cd      	b.n	2400d394 <f_write+0x1a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2400d3f8:	f04f 0807 	mov.w	r8, #7
2400d3fc:	e70c      	b.n	2400d218 <f_write+0x28>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
2400d3fe:	4659      	mov	r1, fp
2400d400:	4620      	mov	r0, r4
2400d402:	f7fe f935 	bl	2400b670 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2400d406:	2800      	cmp	r0, #0
2400d408:	f47f af36 	bne.w	2400d278 <f_write+0x88>
2400d40c:	e780      	b.n	2400d310 <f_write+0x120>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
2400d40e:	2301      	movs	r3, #1
2400d410:	4651      	mov	r1, sl
2400d412:	f899 0001 	ldrb.w	r0, [r9, #1]
2400d416:	9202      	str	r2, [sp, #8]
2400d418:	f7fd fa04 	bl	2400a824 <disk_read>
				fp->fptr < fp->obj.objsize &&
2400d41c:	2800      	cmp	r0, #0
2400d41e:	d1d2      	bne.n	2400d3c6 <f_write+0x1d6>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400d420:	69a3      	ldr	r3, [r4, #24]
2400d422:	9a02      	ldr	r2, [sp, #8]
2400d424:	e780      	b.n	2400d328 <f_write+0x138>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
2400d426:	eb05 2042 	add.w	r0, r5, r2, lsl #9
2400d42a:	1c42      	adds	r2, r0, #1
2400d42c:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400d42e:	ebaa 0202 	sub.w	r2, sl, r2
2400d432:	2a02      	cmp	r2, #2
2400d434:	d90d      	bls.n	2400d452 <f_write+0x262>
2400d436:	4652      	mov	r2, sl
2400d438:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
2400d43c:	f851 0b04 	ldr.w	r0, [r1], #4
2400d440:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
2400d444:	4562      	cmp	r2, ip
2400d446:	d1f9      	bne.n	2400d43c <f_write+0x24c>
					fp->flag &= (BYTE)~FA_DIRTY;
2400d448:	7d22      	ldrb	r2, [r4, #20]
2400d44a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400d44e:	7522      	strb	r2, [r4, #20]
2400d450:	e74b      	b.n	2400d2ea <f_write+0xfa>
2400d452:	f104 022b 	add.w	r2, r4, #43	; 0x2b
2400d456:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
2400d45a:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
2400d45e:	458c      	cmp	ip, r1
			*d++ = *s++;
2400d460:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2400d464:	d1f9      	bne.n	2400d45a <f_write+0x26a>
2400d466:	e7ef      	b.n	2400d448 <f_write+0x258>

2400d468 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400d468:	b158      	cbz	r0, 2400d482 <f_close+0x1a>
2400d46a:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
2400d46c:	b570      	push	{r4, r5, r6, lr}
2400d46e:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400d470:	b12b      	cbz	r3, 2400d47e <f_close+0x16>
2400d472:	781a      	ldrb	r2, [r3, #0]
2400d474:	b11a      	cbz	r2, 2400d47e <f_close+0x16>
2400d476:	8881      	ldrh	r1, [r0, #4]
2400d478:	88da      	ldrh	r2, [r3, #6]
2400d47a:	4291      	cmp	r1, r2
2400d47c:	d003      	beq.n	2400d486 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
2400d47e:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
2400d480:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
2400d482:	2009      	movs	r0, #9
}
2400d484:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400d486:	7858      	ldrb	r0, [r3, #1]
2400d488:	f7fd f9b0 	bl	2400a7ec <disk_status>
2400d48c:	07c1      	lsls	r1, r0, #31
2400d48e:	d4f6      	bmi.n	2400d47e <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2400d490:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400d492:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2400d494:	065a      	lsls	r2, r3, #25
2400d496:	d53c      	bpl.n	2400d512 <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
2400d498:	061b      	lsls	r3, r3, #24
2400d49a:	d45d      	bmi.n	2400d558 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
2400d49c:	f7fd f8c8 	bl	2400a630 <get_fattime>
				res = move_window(fs, fp->dir_sect);
2400d4a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d4a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
2400d4a4:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d4a6:	4299      	cmp	r1, r3
2400d4a8:	d004      	beq.n	2400d4b4 <f_close+0x4c>
2400d4aa:	4628      	mov	r0, r5
2400d4ac:	f7fd fb68 	bl	2400ab80 <move_window.part.0>
				if (res == FR_OK) {
2400d4b0:	2800      	cmp	r0, #0
2400d4b2:	d1e5      	bne.n	2400d480 <f_close+0x18>
					dir = fp->dir_ptr;
2400d4b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
2400d4b6:	7ad3      	ldrb	r3, [r2, #11]
2400d4b8:	f043 0320 	orr.w	r3, r3, #32
2400d4bc:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
2400d4be:	68a3      	ldr	r3, [r4, #8]
2400d4c0:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
2400d4c2:	f3c3 2007 	ubfx	r0, r3, #8, #8
2400d4c6:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
2400d4c8:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
2400d4ca:	7809      	ldrb	r1, [r1, #0]
2400d4cc:	2903      	cmp	r1, #3
2400d4ce:	d103      	bne.n	2400d4d8 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
2400d4d0:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400d4d2:	7513      	strb	r3, [r2, #20]
2400d4d4:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
2400d4d6:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
2400d4d8:	68e3      	ldr	r3, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
2400d4da:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400d4dc:	7596      	strb	r6, [r2, #22]
2400d4de:	0a19      	lsrs	r1, r3, #8
2400d4e0:	7713      	strb	r3, [r2, #28]
	*ptr++ = (BYTE)val; val >>= 8;
2400d4e2:	7751      	strb	r1, [r2, #29]
2400d4e4:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400d4e6:	0e1b      	lsrs	r3, r3, #24
2400d4e8:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
2400d4ea:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
2400d4ec:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
2400d4ee:	75d3      	strb	r3, [r2, #23]
2400d4f0:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400d4f2:	0e36      	lsrs	r6, r6, #24
2400d4f4:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
2400d4f6:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
2400d4f8:	7656      	strb	r6, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
2400d4fa:	8253      	strh	r3, [r2, #18]
					fs->wflag = 1;
2400d4fc:	2301      	movs	r3, #1
2400d4fe:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
2400d500:	f7fe f846 	bl	2400b590 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
2400d504:	7d23      	ldrb	r3, [r4, #20]
2400d506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400d50a:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
2400d50c:	2800      	cmp	r0, #0
2400d50e:	d1b7      	bne.n	2400d480 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400d510:	6825      	ldr	r5, [r4, #0]
2400d512:	2d00      	cmp	r5, #0
2400d514:	d0b3      	beq.n	2400d47e <f_close+0x16>
2400d516:	782b      	ldrb	r3, [r5, #0]
2400d518:	2b00      	cmp	r3, #0
2400d51a:	d0b0      	beq.n	2400d47e <f_close+0x16>
2400d51c:	88a2      	ldrh	r2, [r4, #4]
2400d51e:	88eb      	ldrh	r3, [r5, #6]
2400d520:	429a      	cmp	r2, r3
2400d522:	d1ac      	bne.n	2400d47e <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400d524:	7868      	ldrb	r0, [r5, #1]
2400d526:	f7fd f961 	bl	2400a7ec <disk_status>
2400d52a:	f010 0001 	ands.w	r0, r0, #1
2400d52e:	d1a6      	bne.n	2400d47e <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
2400d530:	6923      	ldr	r3, [r4, #16]
2400d532:	3b01      	subs	r3, #1
2400d534:	2b01      	cmp	r3, #1
2400d536:	d81c      	bhi.n	2400d572 <f_close+0x10a>
		n = Files[i].ctr;
2400d538:	4912      	ldr	r1, [pc, #72]	; (2400d584 <f_close+0x11c>)
2400d53a:	011d      	lsls	r5, r3, #4
2400d53c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
2400d540:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
2400d542:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
2400d546:	d016      	beq.n	2400d576 <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
2400d548:	b1b2      	cbz	r2, 2400d578 <f_close+0x110>
2400d54a:	3a01      	subs	r2, #1
2400d54c:	b292      	uxth	r2, r2
		Files[i].ctr = n;
2400d54e:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2400d550:	b192      	cbz	r2, 2400d578 <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
2400d552:	2300      	movs	r3, #0
2400d554:	6023      	str	r3, [r4, #0]
}
2400d556:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2400d558:	2301      	movs	r3, #1
2400d55a:	6a22      	ldr	r2, [r4, #32]
2400d55c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
2400d560:	7868      	ldrb	r0, [r5, #1]
2400d562:	f7fd f96d 	bl	2400a840 <disk_write>
2400d566:	b950      	cbnz	r0, 2400d57e <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
2400d568:	7d23      	ldrb	r3, [r4, #20]
2400d56a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400d56e:	7523      	strb	r3, [r4, #20]
2400d570:	e794      	b.n	2400d49c <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
2400d572:	2002      	movs	r0, #2
}
2400d574:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
2400d576:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2400d578:	2300      	movs	r3, #0
2400d57a:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
2400d57c:	e7e9      	b.n	2400d552 <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2400d57e:	2001      	movs	r0, #1
}
2400d580:	bd70      	pop	{r4, r5, r6, pc}
2400d582:	bf00      	nop
2400d584:	2001224c 	.word	0x2001224c

2400d588 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
2400d588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400d58a:	b150      	cbz	r0, 2400d5a2 <f_findnext+0x1a>
2400d58c:	4605      	mov	r5, r0
2400d58e:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d590:	4c39      	ldr	r4, [pc, #228]	; (2400d678 <f_findnext+0xf0>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400d592:	682b      	ldr	r3, [r5, #0]
2400d594:	b12b      	cbz	r3, 2400d5a2 <f_findnext+0x1a>
2400d596:	781a      	ldrb	r2, [r3, #0]
2400d598:	b11a      	cbz	r2, 2400d5a2 <f_findnext+0x1a>
2400d59a:	88a9      	ldrh	r1, [r5, #4]
2400d59c:	88da      	ldrh	r2, [r3, #6]
2400d59e:	4291      	cmp	r1, r2
2400d5a0:	d002      	beq.n	2400d5a8 <f_findnext+0x20>
	FRESULT res = FR_INVALID_OBJECT;
2400d5a2:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
2400d5a4:	4638      	mov	r0, r7
2400d5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400d5a8:	7858      	ldrb	r0, [r3, #1]
2400d5aa:	f7fd f91f 	bl	2400a7ec <disk_status>
2400d5ae:	07c3      	lsls	r3, r0, #31
2400d5b0:	d4f7      	bmi.n	2400d5a2 <f_findnext+0x1a>
		if (!fno) {
2400d5b2:	2e00      	cmp	r6, #0
2400d5b4:	d058      	beq.n	2400d668 <f_findnext+0xe0>
			res = dir_read(dp, 0);			/* Read an item */
2400d5b6:	4628      	mov	r0, r5
2400d5b8:	f7fd fdd2 	bl	2400b160 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
2400d5bc:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
2400d5c0:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
2400d5c2:	d1ef      	bne.n	2400d5a4 <f_findnext+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
2400d5c4:	4631      	mov	r1, r6
2400d5c6:	4628      	mov	r0, r5
2400d5c8:	f7fd fa1c 	bl	2400aa04 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
2400d5cc:	4628      	mov	r0, r5
2400d5ce:	f7fd fd83 	bl	2400b0d8 <dir_next.constprop.0>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
2400d5d2:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
2400d5d6:	d14d      	bne.n	2400d674 <f_findnext+0xec>
2400d5d8:	7db3      	ldrb	r3, [r6, #22]
2400d5da:	2b00      	cmp	r3, #0
2400d5dc:	d0e2      	beq.n	2400d5a4 <f_findnext+0x1c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
2400d5de:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
2400d5e2:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
2400d5e6:	e00f      	b.n	2400d608 <f_findnext+0x80>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d5e8:	3a20      	subs	r2, #32
2400d5ea:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d5ec:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d5f0:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d5f4:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d5f6:	f1be 0f19 	cmp.w	lr, #25
2400d5fa:	d817      	bhi.n	2400d62c <f_findnext+0xa4>
2400d5fc:	3b20      	subs	r3, #32
2400d5fe:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400d600:	4293      	cmp	r3, r2
2400d602:	d1c6      	bne.n	2400d592 <f_findnext+0xa>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400d604:	2b00      	cmp	r3, #0
2400d606:	d0cd      	beq.n	2400d5a4 <f_findnext+0x1c>
2400d608:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400d60a:	f81c 3b01 	ldrb.w	r3, [ip], #1
2400d60e:	2b3f      	cmp	r3, #63	; 0x3f
2400d610:	d012      	beq.n	2400d638 <f_findnext+0xb0>
2400d612:	2b2a      	cmp	r3, #42	; 0x2a
2400d614:	d010      	beq.n	2400d638 <f_findnext+0xb0>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d616:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d61a:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d61c:	2819      	cmp	r0, #25
2400d61e:	d9e3      	bls.n	2400d5e8 <f_findnext+0x60>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d620:	2a7f      	cmp	r2, #127	; 0x7f
2400d622:	d9e3      	bls.n	2400d5ec <f_findnext+0x64>
2400d624:	4423      	add	r3, r4
2400d626:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400d62a:	e7df      	b.n	2400d5ec <f_findnext+0x64>
2400d62c:	2b7f      	cmp	r3, #127	; 0x7f
2400d62e:	d9e7      	bls.n	2400d600 <f_findnext+0x78>
2400d630:	4420      	add	r0, r4
2400d632:	f810 3c80 	ldrb.w	r3, [r0, #-128]
2400d636:	e7e3      	b.n	2400d600 <f_findnext+0x78>
2400d638:	4694      	mov	ip, r2
				nm = nx = 0;
2400d63a:	2300      	movs	r3, #0
2400d63c:	f81c eb01 	ldrb.w	lr, [ip], #1
2400d640:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400d642:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
2400d646:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
2400d648:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400d64c:	bf0c      	ite	eq
2400d64e:	3201      	addeq	r2, #1
2400d650:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400d652:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
2400d656:	d0f4      	beq.n	2400d642 <f_findnext+0xba>
2400d658:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
2400d65c:	d0f1      	beq.n	2400d642 <f_findnext+0xba>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400d65e:	f7fd f95b 	bl	2400a918 <pattern_matching>
2400d662:	2800      	cmp	r0, #0
2400d664:	d095      	beq.n	2400d592 <f_findnext+0xa>
2400d666:	e79d      	b.n	2400d5a4 <f_findnext+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
2400d668:	4631      	mov	r1, r6
2400d66a:	4628      	mov	r0, r5
}
2400d66c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
2400d670:	f7fe b8ce 	b.w	2400b810 <dir_sdi>
2400d674:	4607      	mov	r7, r0
2400d676:	e795      	b.n	2400d5a4 <f_findnext+0x1c>
2400d678:	24014148 	.word	0x24014148

2400d67c <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
2400d67c:	b570      	push	{r4, r5, r6, lr}
2400d67e:	b082      	sub	sp, #8
2400d680:	4615      	mov	r5, r2
2400d682:	4604      	mov	r4, r0
2400d684:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
2400d686:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
2400d688:	2200      	movs	r2, #0
2400d68a:	a901      	add	r1, sp, #4
2400d68c:	4668      	mov	r0, sp
2400d68e:	9500      	str	r5, [sp, #0]
2400d690:	f7fd fab0 	bl	2400abf4 <find_volume>
	if (res == FR_OK) {
2400d694:	b118      	cbz	r0, 2400d69e <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400d696:	2300      	movs	r3, #0
2400d698:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
2400d69a:	b002      	add	sp, #8
2400d69c:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
2400d69e:	e9dd 1300 	ldrd	r1, r3, [sp]
2400d6a2:	4620      	mov	r0, r4
		obj->fs = fs;
2400d6a4:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
2400d6a6:	f7fe fb13 	bl	2400bcd0 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
2400d6aa:	bb08      	cbnz	r0, 2400d6f0 <f_findfirst+0x74>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
2400d6ac:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
2400d6b0:	2b00      	cmp	r3, #0
2400d6b2:	db25      	blt.n	2400d700 <f_findfirst+0x84>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
2400d6b4:	79a3      	ldrb	r3, [r4, #6]
2400d6b6:	06db      	lsls	r3, r3, #27
2400d6b8:	d520      	bpl.n	2400d6fc <f_findfirst+0x80>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400d6ba:	9b01      	ldr	r3, [sp, #4]
2400d6bc:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
2400d6be:	7818      	ldrb	r0, [r3, #0]
	cl = ld_word(dir + DIR_FstClusLO);
2400d6c0:	8b4a      	ldrh	r2, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
2400d6c2:	2803      	cmp	r0, #3
2400d6c4:	d102      	bne.n	2400d6cc <f_findfirst+0x50>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400d6c6:	8a89      	ldrh	r1, [r1, #20]
2400d6c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400d6cc:	60a2      	str	r2, [r4, #8]
				obj->id = fs->id;
2400d6ce:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
2400d6d0:	2100      	movs	r1, #0
2400d6d2:	4620      	mov	r0, r4
				obj->id = fs->id;
2400d6d4:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
2400d6d6:	f7fe f89b 	bl	2400b810 <dir_sdi>
				if (res == FR_OK) {
2400d6da:	b948      	cbnz	r0, 2400d6f0 <f_findfirst+0x74>
					if (obj->sclust) {
2400d6dc:	68a3      	ldr	r3, [r4, #8]
2400d6de:	b98b      	cbnz	r3, 2400d704 <f_findfirst+0x88>
						obj->lockid = 0;	/* Root directory need not to be locked */
2400d6e0:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
2400d6e2:	4631      	mov	r1, r6
2400d6e4:	4620      	mov	r0, r4
}
2400d6e6:	b002      	add	sp, #8
2400d6e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
2400d6ec:	f7ff bf4c 	b.w	2400d588 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
2400d6f0:	2804      	cmp	r0, #4
2400d6f2:	d1d0      	bne.n	2400d696 <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400d6f4:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
2400d6f6:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400d6f8:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
2400d6fa:	e7ce      	b.n	2400d69a <f_findfirst+0x1e>
					res = FR_NO_PATH;
2400d6fc:	2005      	movs	r0, #5
2400d6fe:	e7ca      	b.n	2400d696 <f_findfirst+0x1a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400d700:	9b01      	ldr	r3, [sp, #4]
2400d702:	e7e4      	b.n	2400d6ce <f_findfirst+0x52>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
2400d704:	4601      	mov	r1, r0
2400d706:	4620      	mov	r0, r4
2400d708:	f7fd f8b4 	bl	2400a874 <inc_lock>
2400d70c:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
2400d70e:	2800      	cmp	r0, #0
2400d710:	d1e7      	bne.n	2400d6e2 <f_findfirst+0x66>
2400d712:	2012      	movs	r0, #18
2400d714:	e7bf      	b.n	2400d696 <f_findfirst+0x1a>
2400d716:	bf00      	nop

2400d718 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
2400d718:	4b10      	ldr	r3, [pc, #64]	; (2400d75c <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
2400d71a:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
2400d71c:	7a5c      	ldrb	r4, [r3, #9]
2400d71e:	b9cc      	cbnz	r4, 2400d754 <FATFS_LinkDriver+0x3c>
2400d720:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
2400d722:	f004 00ff 	and.w	r0, r4, #255	; 0xff
2400d726:	7a5c      	ldrb	r4, [r3, #9]
2400d728:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
2400d72a:	7a5c      	ldrb	r4, [r3, #9]
2400d72c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
2400d730:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
2400d732:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
2400d734:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
2400d736:	441c      	add	r4, r3
2400d738:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
2400d73a:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
2400d73c:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
2400d73e:	b2e4      	uxtb	r4, r4
2400d740:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
2400d742:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
2400d744:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
2400d746:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
2400d748:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
2400d74a:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
2400d74c:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
2400d750:	708b      	strb	r3, [r1, #2]
}
2400d752:	4770      	bx	lr
  uint8_t ret = 1;
2400d754:	2001      	movs	r0, #1
}
2400d756:	f85d 4b04 	ldr.w	r4, [sp], #4
2400d75a:	4770      	bx	lr
2400d75c:	20012470 	.word	0x20012470

2400d760 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
2400d760:	287f      	cmp	r0, #127	; 0x7f
2400d762:	d912      	bls.n	2400d78a <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
2400d764:	b971      	cbnz	r1, 2400d784 <ff_convert+0x24>
2400d766:	4b0c      	ldr	r3, [pc, #48]	; (2400d798 <ff_convert+0x38>)
2400d768:	e001      	b.n	2400d76e <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
2400d76a:	2980      	cmp	r1, #128	; 0x80
2400d76c:	d00c      	beq.n	2400d788 <ff_convert+0x28>
				if (chr == Tbl[c]) break;
2400d76e:	f833 2b02 	ldrh.w	r2, [r3], #2
2400d772:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
2400d776:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
2400d778:	4282      	cmp	r2, r0
2400d77a:	d1f6      	bne.n	2400d76a <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
2400d77c:	f10c 0080 	add.w	r0, ip, #128	; 0x80
2400d780:	b280      	uxth	r0, r0
2400d782:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
2400d784:	28ff      	cmp	r0, #255	; 0xff
2400d786:	d901      	bls.n	2400d78c <ff_convert+0x2c>
2400d788:	2000      	movs	r0, #0
		}
	}

	return c;
}
2400d78a:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
2400d78c:	4b02      	ldr	r3, [pc, #8]	; (2400d798 <ff_convert+0x38>)
2400d78e:	3880      	subs	r0, #128	; 0x80
2400d790:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
2400d794:	4770      	bx	lr
2400d796:	bf00      	nop
2400d798:	240141d8 	.word	0x240141d8

2400d79c <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
2400d79c:	4b22      	ldr	r3, [pc, #136]	; (2400d828 <ff_wtoupper+0x8c>)
2400d79e:	4a23      	ldr	r2, [pc, #140]	; (2400d82c <ff_wtoupper+0x90>)
2400d7a0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
2400d7a4:	bf28      	it	cs
2400d7a6:	4613      	movcs	r3, r2
{
2400d7a8:	b510      	push	{r4, lr}
2400d7aa:	3304      	adds	r3, #4
2400d7ac:	e001      	b.n	2400d7b2 <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
2400d7ae:	3304      	adds	r3, #4
2400d7b0:	b1da      	cbz	r2, 2400d7ea <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
2400d7b2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
2400d7b6:	461c      	mov	r4, r3
2400d7b8:	b1b1      	cbz	r1, 2400d7e8 <ff_wtoupper+0x4c>
2400d7ba:	4288      	cmp	r0, r1
2400d7bc:	d314      	bcc.n	2400d7e8 <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
2400d7be:	f833 2c02 	ldrh.w	r2, [r3, #-2]
2400d7c2:	fa5f fc82 	uxtb.w	ip, r2
2400d7c6:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
2400d7c8:	eb0c 0e01 	add.w	lr, ip, r1
2400d7cc:	4570      	cmp	r0, lr
2400d7ce:	daee      	bge.n	2400d7ae <ff_wtoupper+0x12>
			switch (cmd) {
2400d7d0:	2a08      	cmp	r2, #8
2400d7d2:	d809      	bhi.n	2400d7e8 <ff_wtoupper+0x4c>
2400d7d4:	e8df f002 	tbb	[pc, r2]
2400d7d8:	19161005 	.word	0x19161005
2400d7dc:	25221f1c 	.word	0x25221f1c
2400d7e0:	0c          	.byte	0x0c
2400d7e1:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
2400d7e2:	1a41      	subs	r1, r0, r1
2400d7e4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
2400d7e8:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
2400d7ea:	eb04 034c 	add.w	r3, r4, ip, lsl #1
2400d7ee:	e7dc      	b.n	2400d7aa <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
2400d7f0:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
2400d7f4:	b280      	uxth	r0, r0
}
2400d7f6:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
2400d7f8:	1a43      	subs	r3, r0, r1
2400d7fa:	f003 0301 	and.w	r3, r3, #1
2400d7fe:	1ac0      	subs	r0, r0, r3
2400d800:	b280      	uxth	r0, r0
}
2400d802:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
2400d804:	3810      	subs	r0, #16
2400d806:	b280      	uxth	r0, r0
}
2400d808:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
2400d80a:	3820      	subs	r0, #32
2400d80c:	b280      	uxth	r0, r0
}
2400d80e:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
2400d810:	3830      	subs	r0, #48	; 0x30
2400d812:	b280      	uxth	r0, r0
}
2400d814:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
2400d816:	381a      	subs	r0, #26
2400d818:	b280      	uxth	r0, r0
}
2400d81a:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
2400d81c:	3008      	adds	r0, #8
2400d81e:	b280      	uxth	r0, r0
}
2400d820:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
2400d822:	3850      	subs	r0, #80	; 0x50
2400d824:	b280      	uxth	r0, r0
}
2400d826:	bd10      	pop	{r4, pc}
2400d828:	240142d8 	.word	0x240142d8
2400d82c:	240144cc 	.word	0x240144cc

2400d830 <tLinearDelay_tick>:
    }
}

float   tLinearDelay_tick (tLinearDelay* const dl, float input)
{
    _tLinearDelay* d = *dl;
2400d830:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
2400d832:	695a      	ldr	r2, [r3, #20]
2400d834:	edd3 7a01 	vldr	s15, [r3, #4]
2400d838:	6899      	ldr	r1, [r3, #8]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400d83a:	69d8      	ldr	r0, [r3, #28]
    d->buff[d->inPoint] = input * d->gain;
2400d83c:	ee27 0a80 	vmul.f32	s0, s15, s0
{
2400d840:	b410      	push	{r4}
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400d842:	1c54      	adds	r4, r2, #1
    d->buff[d->inPoint] = input * d->gain;
2400d844:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400d848:	4284      	cmp	r4, r0
    d->buff[d->inPoint] = input * d->gain;
2400d84a:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400d84e:	615c      	str	r4, [r3, #20]
2400d850:	d101      	bne.n	2400d856 <tLinearDelay_tick+0x26>
2400d852:	2200      	movs	r2, #0
2400d854:	615a      	str	r2, [r3, #20]

    uint32_t idx = (uint32_t) d->outPoint;
2400d856:	699a      	ldr	r2, [r3, #24]
    // First 1/2 of interpolation
    d->lastOut = d->buff[idx] * d->omAlpha;
2400d858:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
2400d85c:	eb01 0482 	add.w	r4, r1, r2, lsl #2
        // Second 1/2 of interpolation
    if ((idx + 1) < d->maxDelay)
2400d860:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
2400d862:	ed94 0a00 	vldr	s0, [r4]
    if ((idx + 1) < d->maxDelay)
2400d866:	4290      	cmp	r0, r2
    d->lastOut = d->buff[idx] * d->omAlpha;
2400d868:	ee20 0a27 	vmul.f32	s0, s0, s15
2400d86c:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
2400d870:	d90b      	bls.n	2400d88a <tLinearDelay_tick+0x5a>
        d->lastOut += d->buff[idx+1] * d->alpha;
2400d872:	ed94 7a01 	vldr	s14, [r4, #4]
2400d876:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24

    // Increment output pointer modulo length
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;

    return d->lastOut;
}
2400d87a:	f85d 4b04 	ldr.w	r4, [sp], #4
        d->lastOut += d->buff[idx+1] * d->alpha;
2400d87e:	eea7 0a27 	vfma.f32	s0, s14, s15
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400d882:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
2400d884:	ed83 0a03 	vstr	s0, [r3, #12]
}
2400d888:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
2400d88a:	ed91 7a00 	vldr	s14, [r1]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400d88e:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
2400d890:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
}
2400d894:	f85d 4b04 	ldr.w	r4, [sp], #4
        d->lastOut += d->buff[0] * d->alpha;
2400d898:	eea7 0a27 	vfma.f32	s0, s14, s15
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400d89c:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
2400d89e:	ed83 0a03 	vstr	s0, [r3, #12]
}
2400d8a2:	4770      	bx	lr

2400d8a4 <tLinearDelay_setDelay>:

    return d->lastOut;
}

void     tLinearDelay_setDelay (tLinearDelay* const dl, float delay)
{
2400d8a4:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
2400d8a6:	6804      	ldr	r4, [r0, #0]
{
2400d8a8:	eef0 0a40 	vmov.f32	s1, s0

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400d8ac:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 2400d924 <tLinearDelay_setDelay+0x80>
2400d8b0:	edd4 7a07 	vldr	s15, [r4, #28]
2400d8b4:	eeb8 1a67 	vcvt.f32.u32	s2, s15
2400d8b8:	f01b f9ca 	bl	24028c50 <__LEAF_clip_veneer>

    float outPointer = d->inPoint - d->delay;
2400d8bc:	edd4 7a05 	vldr	s15, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400d8c0:	ed84 0a08 	vstr	s0, [r4, #32]
    float outPointer = d->inPoint - d->delay;
2400d8c4:	eef8 7a67 	vcvt.f32.u32	s15, s15

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
2400d8c8:	69e2      	ldr	r2, [r4, #28]
    float outPointer = d->inPoint - d->delay;
2400d8ca:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
2400d8ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400d8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400d8d6:	d50a      	bpl.n	2400d8ee <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
2400d8d8:	ee07 2a90 	vmov	s15, r2
2400d8dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400d8e0:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
2400d8e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400d8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400d8ec:	d4f8      	bmi.n	2400d8e0 <tLinearDelay_setDelay+0x3c>

    d->outPoint = (uint32_t) outPointer;   // integer part
2400d8ee:	eefc 7ac0 	vcvt.u32.f32	s15, s0
2400d8f2:	ee17 3a90 	vmov	r3, s15

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
2400d8f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
2400d8fa:	ee07 3a10 	vmov	s14, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400d8fe:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
2400d900:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
2400d904:	61a3      	str	r3, [r4, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
2400d906:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400d90a:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
2400d90e:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
2400d912:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
2400d916:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400d91a:	d000      	beq.n	2400d91e <tLinearDelay_setDelay+0x7a>
}
2400d91c:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400d91e:	2300      	movs	r3, #0
2400d920:	61a3      	str	r3, [r4, #24]
}
2400d922:	bd10      	pop	{r4, pc}
2400d924:	00000000 	.word	0x00000000

2400d928 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    float sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
2400d928:	eddf 7a1e 	vldr	s15, [pc, #120]	; 2400d9a4 <tCrusher_tick+0x7c>
2400d92c:	ee20 0a27 	vmul.f32	s0, s0, s15
{
2400d930:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
2400d932:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
2400d936:	6804      	ldr	r4, [r0, #0]
    
    sample /= c->div;
2400d938:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
2400d93c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
2400d940:	6960      	ldr	r0, [r4, #20]
2400d942:	05c0      	lsls	r0, r0, #23
2400d944:	ee80 0a27 	vdiv.f32	s0, s0, s15
2400d948:	f001 fac4 	bl	2400eed4 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
2400d94c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
2400d950:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
2400d954:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2400d958:	f01b f97a 	bl	24028c50 <__LEAF_clip_veneer>
    
    sample = LEAF_round(sample, c->rnd);
2400d95c:	edd4 0a04 	vldr	s1, [r4, #16]
2400d960:	f001 faa6 	bl	2400eeb0 <LEAF_round>
    _tSampleReducer* s = *sr;
2400d964:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
2400d966:	68da      	ldr	r2, [r3, #12]
2400d968:	edd3 7a01 	vldr	s15, [r3, #4]
2400d96c:	ee07 2a10 	vmov	s14, r2
2400d970:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400d974:	eeb4 7ae7 	vcmpe.f32	s14, s15
2400d978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400d97c:	dc08      	bgt.n	2400d990 <tCrusher_tick+0x68>
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
2400d97e:	edd4 7a06 	vldr	s15, [r4, #24]
    s->count++;
2400d982:	3201      	adds	r2, #1
    return s->hold;
2400d984:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
2400d988:	60da      	str	r2, [r3, #12]
    
}
2400d98a:	ee20 0a27 	vmul.f32	s0, s0, s15
2400d98e:	bd10      	pop	{r4, pc}
    return sample * c->gain;
2400d990:	edd4 7a06 	vldr	s15, [r4, #24]
        s->hold = input;
2400d994:	2201      	movs	r2, #1
2400d996:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
2400d99a:	60da      	str	r2, [r3, #12]
}
2400d99c:	ee20 0a27 	vmul.f32	s0, s0, s15
2400d9a0:	bd10      	pop	{r4, pc}
2400d9a2:	bf00      	nop
2400d9a4:	459c4000 	.word	0x459c4000

2400d9a8 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, float op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
2400d9a8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
2400d9ac:	6803      	ldr	r3, [r0, #0]
2400d9ae:	ee20 0a27 	vmul.f32	s0, s0, s15
2400d9b2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2400d9b6:	ed83 0a05 	vstr	s0, [r3, #20]
}
2400d9ba:	4770      	bx	lr

2400d9bc <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, float val)
{
2400d9bc:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
2400d9c0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 2400d9f4 <tCrusher_setQuality+0x38>
2400d9c4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
2400d9c8:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
2400d9ca:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
2400d9cc:	f01b f940 	bl	24028c50 <__LEAF_clip_veneer>
    
    c->div = 0.01f + val * SCALAR;
2400d9d0:	ed9f 6a09 	vldr	s12, [pc, #36]	; 2400d9f8 <tCrusher_setQuality+0x3c>
2400d9d4:	eddf 7a09 	vldr	s15, [pc, #36]	; 2400d9fc <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
2400d9d8:	eddf 6a09 	vldr	s13, [pc, #36]	; 2400da00 <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
2400d9dc:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
2400d9e0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 2400da04 <tCrusher_setQuality+0x48>
2400d9e4:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
2400d9e8:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
2400d9ec:	ed84 7a06 	vstr	s14, [r4, #24]
}
2400d9f0:	bd10      	pop	{r4, pc}
2400d9f2:	bf00      	nop
2400d9f4:	00000000 	.word	0x00000000
2400d9f8:	459c4000 	.word	0x459c4000
2400d9fc:	3c23d70a 	.word	0x3c23d70a
2400da00:	3912ccf6 	.word	0x3912ccf6
2400da04:	3e99999a 	.word	0x3e99999a

2400da08 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, float rnd)
{
    _tCrusher* c = *cr;
    c->rnd = rnd;
2400da08:	6803      	ldr	r3, [r0, #0]
2400da0a:	ed83 0a04 	vstr	s0, [r3, #16]
}
2400da0e:	4770      	bx	lr

2400da10 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
2400da10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, float ratio)
{
    _tCrusher* c = *cr;
2400da14:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
2400da16:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
2400da1a:	eeb4 0a67 	vcmp.f32	s0, s15
2400da1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400da22:	d809      	bhi.n	2400da38 <tCrusher_setSamplingRatio+0x28>
2400da24:	eeb5 0a40 	vcmp.f32	s0, #0.0
2400da28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400da2c:	db04      	blt.n	2400da38 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
2400da2e:	ee87 7a80 	vdiv.f32	s14, s15, s0
2400da32:	69db      	ldr	r3, [r3, #28]
2400da34:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
2400da38:	4770      	bx	lr
2400da3a:	bf00      	nop

2400da3c <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

float tCompressor_tick(tCompressor* const comp, float in)
{
2400da3c:	b510      	push	{r4, lr}
2400da3e:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
2400da42:	6804      	ldr	r4, [r0, #0]
{
2400da44:	eeb0 8a40 	vmov.f32	s16, s0
    
    float slope, overshoot;
    
    float in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
2400da48:	f001 f9ae 	bl	2400eda8 <fastabsf>
2400da4c:	f001 fac2 	bl	2400efd4 <fasteratodb>
2400da50:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 2400db04 <tCompressor_tick+0xc8>
2400da54:	eef0 0a40 	vmov.f32	s1, s0
2400da58:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 2400db08 <tCompressor_tick+0xcc>
2400da5c:	f01b f8f8 	bl	24028c50 <__LEAF_clip_veneer>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
2400da60:	ed94 7a03 	vldr	s14, [r4, #12]
    

    if (overshoot <= -(c->W))
2400da64:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
2400da68:	ee30 7a47 	vsub.f32	s14, s0, s14
    c->y_T[1] = c->y_T[0];
2400da6c:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
2400da70:	eef1 7a46 	vneg.f32	s15, s12
    c->y_T[1] = c->y_T[0];
2400da74:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
2400da78:	eef4 7ac7 	vcmpe.f32	s15, s14
2400da7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400da80:	db23      	blt.n	2400daca <tCompressor_tick+0x8e>
    {
        out_db = in_db;
        c->isActive = 0;
2400da82:	2300      	movs	r3, #0
2400da84:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 2400db04 <tCompressor_tick+0xc8>
2400da88:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
2400da8a:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
2400da8e:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
2400da92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->x_T[0] = out_db - in_db;
2400da96:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
2400da9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
2400da9e:	bf4c      	ite	mi
2400daa0:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
2400daa4:	ed94 6a02 	vldrpl	s12, [r4, #8]
2400daa8:	ee77 7ac6 	vsub.f32	s15, s15, s12
2400daac:	ee67 7a87 	vmul.f32	s15, s15, s14
2400dab0:	eee6 7a86 	vfma.f32	s15, s13, s12
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
2400dab4:	ee30 0a67 	vsub.f32	s0, s0, s15
2400dab8:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
2400dabc:	f001 fabe 	bl	2400f03c <fasterdbtoa>
    return attenuation * in;
}
2400dac0:	ee28 0a00 	vmul.f32	s0, s16, s0
2400dac4:	ecbd 8b02 	vpop	{d8}
2400dac8:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
2400daca:	eeb4 6ac7 	vcmpe.f32	s12, s14
    slope = 1.0f - c->invR; // feed-forward topology;
2400dace:	edd4 5a07 	vldr	s11, [r4, #28]
2400dad2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
2400dad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
2400dada:	ee77 7ae5 	vsub.f32	s15, s15, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
2400dade:	dd0c      	ble.n	2400dafa <tCompressor_tick+0xbe>
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
2400dae0:	edd4 5a08 	vldr	s11, [r4, #32]
        float squareit = (overshoot + c->W);
2400dae4:	ee36 7a07 	vadd.f32	s14, s12, s14
        c->isActive = 1;
2400dae8:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
2400daea:	ee67 7aa5 	vmul.f32	s15, s15, s11
        c->isActive = 1;
2400daee:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
2400daf0:	ee67 7a87 	vmul.f32	s15, s15, s14
2400daf4:	ee27 7a87 	vmul.f32	s14, s15, s14
    {
2400daf8:	e7c7      	b.n	2400da8a <tCompressor_tick+0x4e>
        c->isActive = 1;
2400dafa:	2301      	movs	r3, #1
        out_db = in_db + slope * overshoot;
2400dafc:	ee27 7a87 	vmul.f32	s14, s15, s14
        c->isActive = 1;
2400db00:	6463      	str	r3, [r4, #68]	; 0x44
2400db02:	e7c2      	b.n	2400da8a <tCompressor_tick+0x4e>
2400db04:	00000000 	.word	0x00000000
2400db08:	c2b40000 	.word	0xc2b40000

2400db0c <tADSRT_setAttack>:
    mpool_free((char*)adsr, adsr->mempool);
}

void     tADSRT_setAttack(tADSRT* const adsrenv, float attack)
{
    _tADSRT* adsr = *adsrenv;
2400db0c:	6803      	ldr	r3, [r0, #0]

    if (attack < 0.0f)
2400db0e:	eddf 7a06 	vldr	s15, [pc, #24]	; 2400db28 <tADSRT_setAttack+0x1c>
    {
        attack = 0.0f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
2400db12:	ed93 7a05 	vldr	s14, [r3, #20]
2400db16:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    adsr->attack = attack;
2400db1a:	ed83 0a07 	vstr	s0, [r3, #28]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
2400db1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400db22:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
2400db26:	4770      	bx	lr
2400db28:	00000000 	.word	0x00000000

2400db2c <tADSRT_setDecay>:

void     tADSRT_setDecay(tADSRT* const adsrenv, float decay)
{
    _tADSRT* adsr = *adsrenv;
2400db2c:	6803      	ldr	r3, [r0, #0]

    if (decay < 0.0f)
2400db2e:	eddf 7a06 	vldr	s15, [pc, #24]	; 2400db48 <tADSRT_setDecay+0x1c>
    {
        decay = 0.0f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
2400db32:	ed93 7a05 	vldr	s14, [r3, #20]
2400db36:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    adsr->decay = decay;
2400db3a:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
2400db3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400db42:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
2400db46:	4770      	bx	lr
2400db48:	00000000 	.word	0x00000000

2400db4c <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, float sustain)
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
2400db4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
2400db50:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
2400db52:	eeb4 0ae7 	vcmpe.f32	s0, s15
2400db56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400db5a:	dd02      	ble.n	2400db62 <tADSRT_setSustain+0x16>
2400db5c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
2400db60:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
2400db62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400db66:	2200      	movs	r2, #0
2400db68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400db6c:	bf4c      	ite	mi
2400db6e:	63da      	strmi	r2, [r3, #60]	; 0x3c
    else                     adsr->sustain = sustain;
2400db70:	ed83 0a0f 	vstrpl	s0, [r3, #60]	; 0x3c
}
2400db74:	4770      	bx	lr
2400db76:	bf00      	nop

2400db78 <tADSRT_setRelease>:

void     tADSRT_setRelease(tADSRT* const adsrenv, float release)
{
    _tADSRT* adsr = *adsrenv;
2400db78:	6803      	ldr	r3, [r0, #0]

    if (release < 0.0f)
2400db7a:	eddf 7a06 	vldr	s15, [pc, #24]	; 2400db94 <tADSRT_setRelease+0x1c>
    {
        release = 0.0f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
2400db7e:	ed93 7a05 	vldr	s14, [r3, #20]
2400db82:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    adsr->release = release;
2400db86:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
2400db8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400db8e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
2400db92:	4770      	bx	lr
2400db94:	00000000 	.word	0x00000000

2400db98 <tADSRT_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, float leakFactor)
{
2400db98:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
2400db9a:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
2400db9c:	eddf 7a06 	vldr	s15, [pc, #24]	; 2400dbb8 <tADSRT_setLeakFactor+0x20>
2400dba0:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
    adsr->baseLeakFactor = leakFactor;
2400dba4:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
2400dba8:	ee60 0aa7 	vmul.f32	s1, s1, s15
2400dbac:	f005 f9bc 	bl	24012f28 <powf>
2400dbb0:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
2400dbb4:	bd10      	pop	{r4, pc}
2400dbb6:	bf00      	nop
2400dbb8:	472c4400 	.word	0x472c4400

2400dbbc <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, float velocity)
{
    _tADSRT* adsr = *adsrenv;
2400dbbc:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
2400dbbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400dbc0:	b162      	cbz	r2, 2400dbdc <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
2400dbc2:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
2400dbc4:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
2400dbc6:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
2400dbc8:	6598      	str	r0, [r3, #88]	; 0x58
        adsr->rampPeak = adsr->next;
2400dbca:	645a      	str	r2, [r3, #68]	; 0x44
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
2400dbcc:	2200      	movs	r2, #0
2400dbce:	6399      	str	r1, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
2400dbd0:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    adsr->attackPhase = 0;
2400dbd4:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
2400dbd6:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
2400dbd8:	655a      	str	r2, [r3, #84]	; 0x54
}
2400dbda:	4770      	bx	lr
        adsr->whichStage = env_attack;
2400dbdc:	2101      	movs	r1, #1
2400dbde:	e7f5      	b.n	2400dbcc <tADSRT_on+0x10>

2400dbe0 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
2400dbe0:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
2400dbe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400dbe4:	b11a      	cbz	r2, 2400dbee <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
2400dbe6:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
2400dbe8:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
2400dbea:	6399      	str	r1, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
2400dbec:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
2400dbee:	4770      	bx	lr

2400dbf0 <tADSRT_tick>:

float   tADSRT_tick(tADSRT* const adsrenv)
{
2400dbf0:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
2400dbf2:	6804      	ldr	r4, [r0, #0]

    switch (adsr->whichStage)
2400dbf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400dbf6:	3b01      	subs	r3, #1
{
2400dbf8:	ed2d 8b02 	vpush	{d8}
    switch (adsr->whichStage)
2400dbfc:	2b04      	cmp	r3, #4
2400dbfe:	f200 8148 	bhi.w	2400de92 <tADSRT_tick+0x2a2>
2400dc02:	e8df f003 	tbb	[pc, r3]
2400dc06:	441f      	.short	0x441f
2400dc08:	6339      	.short	0x6339
2400dc0a:	03          	.byte	0x03
2400dc0b:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
2400dc0c:	edd4 7a03 	vldr	s15, [r4, #12]
2400dc10:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
2400dc14:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400dc18:	eeb4 1ae7 	vcmpe.f32	s2, s15
2400dc1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400dc20:	dd71      	ble.n	2400dd06 <tADSRT_tick+0x116>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
2400dc22:	eddf 7a9d 	vldr	s15, [pc, #628]	; 2400de98 <tADSRT_tick+0x2a8>
                adsr->whichStage = env_attack;
2400dc26:	2301      	movs	r3, #1
2400dc28:	eeb0 0a67 	vmov.f32	s0, s15
2400dc2c:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
2400dc2e:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
            }

            adsr->rampPhase += adsr->rampInc;
2400dc32:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
2400dc36:	ee37 1a81 	vadd.f32	s2, s15, s2
2400dc3a:	ed84 1a16 	vstr	s2, [r4, #88]	; 0x58
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
2400dc3e:	ecbd 8b02 	vpop	{d8}
2400dc42:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
2400dc44:	edd4 7a03 	vldr	s15, [r4, #12]
2400dc48:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
2400dc4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400dc50:	eeb4 1ae7 	vcmpe.f32	s2, s15
2400dc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400dc58:	dd7f      	ble.n	2400dd5a <tADSRT_tick+0x16a>
                adsr->whichStage = env_decay;
2400dc5a:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
2400dc5c:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_decay;
2400dc60:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain;
2400dc62:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
2400dc66:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
2400dc6a:	ee37 1a81 	vadd.f32	s2, s15, s2
}
2400dc6e:	ecbd 8b02 	vpop	{d8}
            adsr->attackPhase += adsr->attackInc;
2400dc72:	ed84 1a13 	vstr	s2, [r4, #76]	; 0x4c
}
2400dc76:	bd10      	pop	{r4, pc}
            adsr->next = adsr->next * adsr->leakFactor;
2400dc78:	ed94 0a06 	vldr	s0, [r4, #24]
2400dc7c:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
2400dc80:	ee20 0a27 	vmul.f32	s0, s0, s15
}
2400dc84:	ecbd 8b02 	vpop	{d8}
            adsr->next = adsr->next * adsr->leakFactor;
2400dc88:	ed84 0a06 	vstr	s0, [r4, #24]
}
2400dc8c:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
2400dc8e:	edd4 7a03 	vldr	s15, [r4, #12]
2400dc92:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
2400dc96:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400dc9a:	eeb4 1ae7 	vcmpe.f32	s2, s15
2400dc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400dca2:	f340 8088 	ble.w	2400ddb6 <tADSRT_tick+0x1c6>
                adsr->next = adsr->gain * adsr->sustain;
2400dca6:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
2400dcaa:	2303      	movs	r3, #3
                adsr->next = adsr->gain * adsr->sustain;
2400dcac:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
                adsr->whichStage = env_sustain;
2400dcb0:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
2400dcb2:	ee20 0a27 	vmul.f32	s0, s0, s15
2400dcb6:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
2400dcba:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
2400dcbe:	ee37 1a81 	vadd.f32	s2, s15, s2
}
2400dcc2:	ecbd 8b02 	vpop	{d8}
            adsr->decayPhase += adsr->decayInc;
2400dcc6:	ed84 1a14 	vstr	s2, [r4, #80]	; 0x50
}
2400dcca:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
2400dccc:	edd4 7a03 	vldr	s15, [r4, #12]
2400dcd0:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
2400dcd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400dcd8:	eeb4 1ae7 	vcmpe.f32	s2, s15
2400dcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400dce0:	f340 809e 	ble.w	2400de20 <tADSRT_tick+0x230>
                adsr->next = 0.0f;
2400dce4:	eddf 7a6c 	vldr	s15, [pc, #432]	; 2400de98 <tADSRT_tick+0x2a8>
                adsr->whichStage = env_idle;
2400dce8:	2300      	movs	r3, #0
2400dcea:	eeb0 0a67 	vmov.f32	s0, s15
2400dcee:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
2400dcf0:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
2400dcf4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
2400dcf8:	ee37 1a81 	vadd.f32	s2, s15, s2
}
2400dcfc:	ecbd 8b02 	vpop	{d8}
            adsr->releasePhase += adsr->releaseInc;
2400dd00:	ed84 1a15 	vstr	s2, [r4, #84]	; 0x54
}
2400dd04:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
2400dd06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
2400dd0a:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
2400dd0e:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->rampPhase - intPart;
2400dd12:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
2400dd16:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->rampPhase - intPart;
2400dd1a:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
2400dd1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400dd22:	f100 80b2 	bmi.w	2400de8a <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
2400dd26:	eefc 7ac7 	vcvt.u32.f32	s15, s14
2400dd2a:	6862      	ldr	r2, [r4, #4]
2400dd2c:	ee17 3a90 	vmov	r3, s15
2400dd30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2400dd34:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
2400dd38:	ee16 3a90 	vmov	r3, s13
2400dd3c:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
2400dd40:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2400dd44:	ed92 0a00 	vldr	s0, [r2]
2400dd48:	f001 f906 	bl	2400ef58 <LEAF_interpolation_linear>
2400dd4c:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
2400dd50:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
2400dd54:	ed84 0a06 	vstr	s0, [r4, #24]
2400dd58:	e76b      	b.n	2400dc32 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
2400dd5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
2400dd5e:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
2400dd62:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->attackPhase - intPart;
2400dd66:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
2400dd6a:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->attackPhase - intPart;
2400dd6e:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
2400dd72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400dd76:	f100 8084 	bmi.w	2400de82 <tADSRT_tick+0x292>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
2400dd7a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
2400dd7e:	6862      	ldr	r2, [r4, #4]
2400dd80:	ee17 3a90 	vmov	r3, s15
2400dd84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2400dd88:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
2400dd8c:	ee16 3a90 	vmov	r3, s13
2400dd90:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
2400dd94:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2400dd98:	ed92 0a00 	vldr	s0, [r2]
2400dd9c:	f001 f8dc 	bl	2400ef58 <LEAF_interpolation_linear>
2400dda0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
2400dda4:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
2400dda8:	ee37 0ac0 	vsub.f32	s0, s15, s0
2400ddac:	ee20 0a08 	vmul.f32	s0, s0, s16
2400ddb0:	ed84 0a06 	vstr	s0, [r4, #24]
2400ddb4:	e757      	b.n	2400dc66 <tADSRT_tick+0x76>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
2400ddb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
2400ddba:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
2400ddbe:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->decayPhase - intPart;
2400ddc2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
2400ddc6:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->decayPhase - intPart;
2400ddca:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
2400ddce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400ddd2:	d452      	bmi.n	2400de7a <tADSRT_tick+0x28a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
2400ddd4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
2400ddd8:	6862      	ldr	r2, [r4, #4]
2400ddda:	ee17 3a90 	vmov	r3, s15
2400ddde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2400dde2:	edd3 0a00 	vldr	s1, [r3]
                float interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart));
2400dde6:	ee16 3a90 	vmov	r3, s13
2400ddea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2400ddee:	ed92 0a00 	vldr	s0, [r2]
2400ddf2:	f001 f8b1 	bl	2400ef58 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
2400ddf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400ddfa:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
2400ddfe:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
2400de02:	ee76 6ac7 	vsub.f32	s13, s13, s14
2400de06:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
            adsr->decayPhase += adsr->decayInc;
2400de0a:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
2400de0e:	ee67 7a86 	vmul.f32	s15, s15, s12
2400de12:	eea6 7a80 	vfma.f32	s14, s13, s0
2400de16:	ee27 0a87 	vmul.f32	s0, s15, s14
2400de1a:	ed84 0a06 	vstr	s0, [r4, #24]
2400de1e:	e74c      	b.n	2400dcba <tADSRT_tick+0xca>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
2400de20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
2400de24:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
2400de28:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->releasePhase - intPart;
2400de2c:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
2400de30:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->releasePhase - intPart;
2400de34:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
2400de38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400de3c:	d419      	bmi.n	2400de72 <tADSRT_tick+0x282>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
2400de3e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
2400de42:	6862      	ldr	r2, [r4, #4]
2400de44:	ee17 3a90 	vmov	r3, s15
2400de48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2400de4c:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
2400de50:	ee16 3a90 	vmov	r3, s13
2400de54:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
2400de58:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2400de5c:	ed92 0a00 	vldr	s0, [r2]
2400de60:	f001 f87a 	bl	2400ef58 <LEAF_interpolation_linear>
2400de64:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
2400de68:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
2400de6c:	ed84 0a06 	vstr	s0, [r4, #24]
2400de70:	e740      	b.n	2400dcf4 <tADSRT_tick+0x104>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
2400de72:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
2400de74:	eddf 0a08 	vldr	s1, [pc, #32]	; 2400de98 <tADSRT_tick+0x2a8>
2400de78:	e7ea      	b.n	2400de50 <tADSRT_tick+0x260>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
2400de7a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
2400de7c:	eddf 0a06 	vldr	s1, [pc, #24]	; 2400de98 <tADSRT_tick+0x2a8>
2400de80:	e7b1      	b.n	2400dde6 <tADSRT_tick+0x1f6>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
2400de82:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
2400de84:	eddf 0a04 	vldr	s1, [pc, #16]	; 2400de98 <tADSRT_tick+0x2a8>
2400de88:	e780      	b.n	2400dd8c <tADSRT_tick+0x19c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
2400de8a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
2400de8c:	eddf 0a02 	vldr	s1, [pc, #8]	; 2400de98 <tADSRT_tick+0x2a8>
2400de90:	e752      	b.n	2400dd38 <tADSRT_tick+0x148>
    return adsr->next;
2400de92:	ed94 0a06 	vldr	s0, [r4, #24]
2400de96:	e6d2      	b.n	2400dc3e <tADSRT_tick+0x4e>
2400de98:	00000000 	.word	0x00000000

2400de9c <tExpSmooth_setDest>:
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
    smooth->dest=dest;
2400de9c:	6803      	ldr	r3, [r0, #0]
2400de9e:	ed83 0a05 	vstr	s0, [r3, #20]
}
2400dea2:	4770      	bx	lr

2400dea4 <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
2400dea4:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
2400dea6:	edd3 6a04 	vldr	s13, [r3, #16]
2400deaa:	ed93 0a03 	vldr	s0, [r3, #12]
2400deae:	ed93 7a02 	vldr	s14, [r3, #8]
2400deb2:	ee20 0a26 	vmul.f32	s0, s0, s13
2400deb6:	edd3 7a05 	vldr	s15, [r3, #20]
2400deba:	eea7 0a27 	vfma.f32	s0, s14, s15
2400debe:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
2400dec2:	4770      	bx	lr

2400dec4 <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
2400dec4:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
2400dec6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
2400deca:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
2400dece:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
2400ded2:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
2400ded6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
2400deda:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
2400dede:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
2400dee2:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
2400dee6:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
2400deea:	edd3 2a08 	vldr	s5, [r3, #32]
2400deee:	ee67 7a84 	vmul.f32	s15, s15, s8
2400def2:	ed93 2a07 	vldr	s4, [r3, #28]
2400def6:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
2400defa:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
2400defe:	eea2 5a23 	vfma.f32	s10, s4, s7
2400df02:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
2400df06:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
2400df0a:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
2400df0e:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
2400df12:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
2400df16:	eed5 6aa4 	vfnms.f32	s13, s11, s9
2400df1a:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
2400df1e:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
2400df22:	edc3 6a05 	vstr	s13, [r3, #20]
}
2400df26:	eea3 7a80 	vfma.f32	s14, s7, s0
2400df2a:	eeb0 0a47 	vmov.f32	s0, s14
2400df2e:	4770      	bx	lr

2400df30 <tSVF_setFreqFast>:

//expects cutoff as a number from 0-4095 based on midinote lookup table
void    tSVF_setFreqFast     (tSVF* const vf, float cutoff)
{
	_tSVF* svf = *vf;
    int intVer = (int)cutoff;
2400df30:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400df34:	4a18      	ldr	r2, [pc, #96]	; (2400df98 <tSVF_setFreqFast+0x68>)
2400df36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSVF* svf = *vf;
2400df3a:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
2400df3c:	ee17 1a10 	vmov	r1, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2400df40:	ed93 7a07 	vldr	s14, [r3, #28]
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400df44:	ee77 6ac0 	vsub.f32	s13, s15, s0
    float floatVer = cutoff - (float)intVer;
2400df48:	ee06 1a10 	vmov	s12, r1
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400df4c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    float floatVer = cutoff - (float)intVer;
2400df50:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400df54:	edd0 5a01 	vldr	s11, [r0, #4]
    float floatVer = cutoff - (float)intVer;
2400df58:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400df5c:	ee76 6a86 	vadd.f32	s13, s13, s12
2400df60:	ed90 6a00 	vldr	s12, [r0]
2400df64:	ee20 0a25 	vmul.f32	s0, s0, s11
2400df68:	eea6 0a26 	vfma.f32	s0, s12, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2400df6c:	eef0 6a67 	vmov.f32	s13, s15
2400df70:	ee30 7a07 	vadd.f32	s14, s0, s14
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400df74:	ed83 0a06 	vstr	s0, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2400df78:	eee0 6a07 	vfma.f32	s13, s0, s14
2400df7c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g * svf->a1;
2400df80:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2400df84:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g * svf->a2;
2400df88:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
2400df8c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
2400df90:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
2400df94:	4770      	bx	lr
2400df96:	bf00      	nop
2400df98:	24014588 	.word	0x24014588

2400df9c <tSVF_setQ>:

void    tSVF_setQ(tSVF* const svff, float Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
2400df9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
2400dfa0:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2400dfa2:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
2400dfa6:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
2400dfaa:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2400dfae:	eeb0 6a47 	vmov.f32	s12, s14
2400dfb2:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
2400dfb6:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2400dfba:	eea7 6aa5 	vfma.f32	s12, s15, s11
2400dfbe:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
2400dfc2:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2400dfc6:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
2400dfca:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
2400dfce:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
2400dfd2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
2400dfd6:	4770      	bx	lr

2400dfd8 <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
2400dfd8:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
2400dfda:	edd3 7a01 	vldr	s15, [r3, #4]
2400dfde:	ed93 7a02 	vldr	s14, [r3, #8]
2400dfe2:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
2400dfe6:	ed83 0a01 	vstr	s0, [r3, #4]
2400dfea:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
2400dfee:	ee30 0a27 	vadd.f32	s0, s0, s15
2400dff2:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
2400dff6:	4770      	bx	lr

2400dff8 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

float   tVZFilter_tickEfficient             (tVZFilter* const vf, float in)
{
    _tVZFilter* f = *vf;
2400dff8:	6803      	ldr	r3, [r0, #0]
    
    float yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
2400dffa:	edd3 6a03 	vldr	s13, [r3, #12]
2400dffe:	ed93 7a02 	vldr	s14, [r3, #8]
2400e002:	ee70 7a66 	vsub.f32	s15, s0, s13
2400e006:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
2400e00a:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
2400e00e:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
2400e012:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
2400e016:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
2400e01a:	edd3 4a08 	vldr	s9, [r3, #32]
2400e01e:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
2400e022:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
2400e026:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
2400e02a:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
2400e02e:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
2400e032:	eeb0 5a47 	vmov.f32	s10, s14
2400e036:	eea4 0a87 	vfma.f32	s0, s9, s14
2400e03a:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
2400e03e:	eef0 7a66 	vmov.f32	s15, s13
}
2400e042:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
2400e046:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
2400e04a:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
2400e04e:	edc3 7a03 	vstr	s15, [r3, #12]
}
2400e052:	4770      	bx	lr

2400e054 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
2400e054:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
2400e056:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2400e058:	eddf 7aa2 	vldr	s15, [pc, #648]	; 2400e2e4 <tVZFilter_calcCoeffs+0x290>
2400e05c:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
{
2400e060:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2400e064:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
2400e068:	ee68 8a87 	vmul.f32	s17, s17, s14
2400e06c:	ee68 8aa7 	vmul.f32	s17, s17, s15
2400e070:	eeb0 0a68 	vmov.f32	s0, s17
2400e074:	f005 f8b8 	bl	240131e8 <tanf>
    
    switch( f->type )
2400e078:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2400e07a:	eeb0 8a40 	vmov.f32	s16, s0
2400e07e:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
2400e082:	2b0a      	cmp	r3, #10
2400e084:	f200 812b 	bhi.w	2400e2de <tVZFilter_calcCoeffs+0x28a>
2400e088:	e8df f013 	tbh	[pc, r3, lsl #1]
2400e08c:	002f0026 	.word	0x002f0026
2400e090:	00410038 	.word	0x00410038
2400e094:	0056004d 	.word	0x0056004d
2400e098:	00ab008b 	.word	0x00ab008b
2400e09c:	011e00cb 	.word	0x011e00cb
2400e0a0:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
2400e0a2:	edd4 7a05 	vldr	s15, [r4, #20]
2400e0a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400e0aa:	eeb1 7a67 	vneg.f32	s14, s15
2400e0ae:	61e3      	str	r3, [r4, #28]
2400e0b0:	6263      	str	r3, [r4, #36]	; 0x24
2400e0b2:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cL *= s; f->cB *= s; f->cH *= s;
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
2400e0b6:	ee37 0a88 	vadd.f32	s0, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2400e0ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
2400e0be:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2400e0c2:	eef0 6a67 	vmov.f32	s13, s15
2400e0c6:	eee0 6a08 	vfma.f32	s13, s0, s16
}
2400e0ca:	ecbd 8b02 	vpop	{d8}
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2400e0ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
2400e0d2:	ed84 7a06 	vstr	s14, [r4, #24]
}
2400e0d6:	bd38      	pop	{r3, r4, r5, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
2400e0d8:	2300      	movs	r3, #0
2400e0da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
2400e0de:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
2400e0e2:	61e3      	str	r3, [r4, #28]
2400e0e4:	6223      	str	r3, [r4, #32]
2400e0e6:	6262      	str	r2, [r4, #36]	; 0x24
            break;
2400e0e8:	e7e5      	b.n	2400e0b6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
2400e0ea:	2300      	movs	r3, #0
2400e0ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
2400e0f0:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
2400e0f4:	6223      	str	r3, [r4, #32]
2400e0f6:	6263      	str	r3, [r4, #36]	; 0x24
2400e0f8:	61e2      	str	r2, [r4, #28]
            break;
2400e0fa:	e7dc      	b.n	2400e0b6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
2400e0fc:	2300      	movs	r3, #0
2400e0fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
2400e102:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
2400e106:	61e3      	str	r3, [r4, #28]
2400e108:	6263      	str	r3, [r4, #36]	; 0x24
2400e10a:	6222      	str	r2, [r4, #32]
            break;
2400e10c:	e7d3      	b.n	2400e0b6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2400e10e:	edd4 7a05 	vldr	s15, [r4, #20]
2400e112:	2300      	movs	r3, #0
2400e114:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
2400e118:	61e3      	str	r3, [r4, #28]
2400e11a:	ee27 7a27 	vmul.f32	s14, s14, s15
2400e11e:	6263      	str	r3, [r4, #36]	; 0x24
2400e120:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
2400e124:	e7c7      	b.n	2400e0b6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
2400e126:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400e12a:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
2400e12c:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
2400e130:	6222      	str	r2, [r4, #32]
2400e132:	61e3      	str	r3, [r4, #28]
2400e134:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400e136:	e7be      	b.n	2400e0b6 <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2400e138:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
2400e13c:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
2400e140:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
2400e144:	ee60 0aa7 	vmul.f32	s1, s1, s15
2400e148:	f004 feee 	bl	24012f28 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
2400e14c:	ee28 0a80 	vmul.f32	s0, s17, s0
2400e150:	f005 f84a 	bl	240131e8 <tanf>
            float r  = f->g/wl;
2400e154:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2400e158:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
2400e15c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400e160:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
2400e164:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2400e168:	ed84 7a07 	vstr	s14, [r4, #28]
2400e16c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
2400e170:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2400e174:	eea7 7aa7 	vfma.f32	s14, s15, s15
2400e178:	eef0 6a47 	vmov.f32	s13, s14
2400e17c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400e180:	ee77 7a45 	vsub.f32	s15, s14, s10
2400e184:	ee67 7aa5 	vmul.f32	s15, s15, s11
2400e188:	ee87 7a86 	vdiv.f32	s14, s15, s12
2400e18c:	eeb1 0ac7 	vsqrt.f32	s0, s14
2400e190:	ee70 7a00 	vadd.f32	s15, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2400e194:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2400e198:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2400e19c:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
2400e1a0:	e789      	b.n	2400e0b6 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
2400e1a2:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
2400e1a6:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f); //if using bandwidth instead of Q
2400e1aa:	eddf 7a4f 	vldr	s15, [pc, #316]	; 2400e2e8 <tVZFilter_calcCoeffs+0x294>
2400e1ae:	eeb1 7ae8 	vsqrt.f32	s14, s17
2400e1b2:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
2400e1b6:	ee20 0a27 	vmul.f32	s0, s0, s15
2400e1ba:	eef1 7ac7 	vsqrt.f32	s15, s14
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
2400e1be:	ee88 8a27 	vdiv.f32	s16, s16, s15
2400e1c2:	ed84 8a04 	vstr	s16, [r4, #16]
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f); //if using bandwidth instead of Q
2400e1c6:	f005 f88d 	bl	240132e4 <sinhf>
2400e1ca:	ee70 7a00 	vadd.f32	s15, s0, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
2400e1ce:	edc4 8a07 	vstr	s17, [r4, #28]
2400e1d2:	6265      	str	r5, [r4, #36]	; 0x24
2400e1d4:	ee68 8aa7 	vmul.f32	s17, s17, s15
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f); //if using bandwidth instead of Q
2400e1d8:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
2400e1dc:	edc4 8a08 	vstr	s17, [r4, #32]
            break;
2400e1e0:	e769      	b.n	2400e0b6 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
2400e1e2:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f); //if using bandwidth instead of Q
2400e1e6:	eddf 7a40 	vldr	s15, [pc, #256]	; 2400e2e8 <tVZFilter_calcCoeffs+0x294>
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
2400e1ea:	eeb1 7ae8 	vsqrt.f32	s14, s17
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f); //if using bandwidth instead of Q
2400e1ee:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
2400e1f2:	ee20 0a27 	vmul.f32	s0, s0, s15
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
2400e1f6:	eef1 7ac7 	vsqrt.f32	s15, s14
2400e1fa:	ee28 8a27 	vmul.f32	s16, s16, s15
2400e1fe:	ed84 8a04 	vstr	s16, [r4, #16]
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f); //if using bandwidth instead of Q
2400e202:	f005 f86f 	bl	240132e4 <sinhf>
2400e206:	ee70 7a00 	vadd.f32	s15, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
2400e20a:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
2400e20e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400e212:	ee68 8aa7 	vmul.f32	s17, s17, s15
2400e216:	61e3      	str	r3, [r4, #28]
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f); //if using bandwidth instead of Q
2400e218:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
2400e21c:	edc4 8a08 	vstr	s17, [r4, #32]
            break;
2400e220:	e749      	b.n	2400e0b6 <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
2400e222:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
2400e226:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
2400e22a:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2400e22e:	eddf 0a2f 	vldr	s1, [pc, #188]	; 2400e2ec <tVZFilter_calcCoeffs+0x298>
2400e232:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
2400e236:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2400e23a:	eeb0 0a48 	vmov.f32	s0, s16
2400e23e:	eea7 0a67 	vfms.f32	s0, s14, s15
2400e242:	f000 ff15 	bl	2400f070 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2400e246:	eddf 0a29 	vldr	s1, [pc, #164]	; 2400e2ec <tVZFilter_calcCoeffs+0x298>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2400e24a:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2400e24e:	eeb0 0a68 	vmov.f32	s0, s17
2400e252:	f000 ff11 	bl	2400f078 <minimum>
            f->cB = 1.0f-x*x;
2400e256:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2400e25a:	edd4 7a05 	vldr	s15, [r4, #20]
2400e25e:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
2400e262:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2400e266:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
2400e26a:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2400e26e:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2400e272:	ee76 5a06 	vadd.f32	s11, s12, s12
2400e276:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
2400e27a:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2400e27e:	eee6 7a06 	vfma.f32	s15, s12, s12
2400e282:	eee0 7a00 	vfma.f32	s15, s0, s0
2400e286:	eee0 7a65 	vfms.f32	s15, s0, s11
2400e28a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
2400e28e:	f000 fd69 	bl	2400ed64 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
2400e292:	edd4 5a07 	vldr	s11, [r4, #28]
2400e296:	ed94 6a08 	vldr	s12, [r4, #32]
2400e29a:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
2400e29e:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2400e2a2:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
2400e2a6:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2400e2aa:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
2400e2ae:	ee65 5a80 	vmul.f32	s11, s11, s0
2400e2b2:	ee26 6a00 	vmul.f32	s12, s12, s0
2400e2b6:	ee26 0a80 	vmul.f32	s0, s13, s0
2400e2ba:	edc4 5a07 	vstr	s11, [r4, #28]
2400e2be:	ed84 6a08 	vstr	s12, [r4, #32]
2400e2c2:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
2400e2c6:	e6f6      	b.n	2400e0b6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
2400e2c8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
2400e2cc:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
2400e2d0:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
2400e2d2:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
2400e2d6:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
2400e2da:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400e2dc:	e6eb      	b.n	2400e0b6 <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
2400e2de:	edd4 7a05 	vldr	s15, [r4, #20]
2400e2e2:	e6e8      	b.n	2400e0b6 <tVZFilter_calcCoeffs+0x62>
2400e2e4:	40490fdb 	.word	0x40490fdb
2400e2e8:	3eb17218 	.word	0x3eb17218
2400e2ec:	00000000 	.word	0x00000000

2400e2f0 <tVZFilter_setFreq>:
    f->B = LEAF_clip(0.0f, B, 100.0f);
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
    tVZFilter_calcCoeffs(vf);
}
void   tVZFilter_setFreq           (tVZFilter* const vf, float freq)
{
2400e2f0:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
2400e2f2:	6805      	ldr	r5, [r0, #0]
    
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2400e2f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
2400e2f8:	4604      	mov	r4, r0
2400e2fa:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2400e2fe:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
2400e302:	ed9f 0a06 	vldr	s0, [pc, #24]	; 2400e31c <tVZFilter_setFreq+0x2c>
2400e306:	ee21 1a27 	vmul.f32	s2, s2, s15
2400e30a:	f01a fca1 	bl	24028c50 <__LEAF_clip_veneer>
    tVZFilter_calcCoeffs(vf);
2400e30e:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2400e310:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
2400e314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
2400e318:	f7ff be9c 	b.w	2400e054 <tVZFilter_calcCoeffs>
2400e31c:	00000000 	.word	0x00000000

2400e320 <tVZFilter_setFreqFast>:

void    tVZFilter_setFreqFast     (tVZFilter* const vf, float cutoff)
{
	 _tVZFilter* f = *vf;
    int intVer = (int)cutoff;
2400e320:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400e324:	4bb3      	ldr	r3, [pc, #716]	; (2400e5f4 <tVZFilter_setFreqFast+0x2d4>)
2400e326:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intVer = (int)cutoff;
2400e32a:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
2400e32e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400e332:	ee77 7ac0 	vsub.f32	s15, s15, s0
2400e336:	eb03 0182 	add.w	r1, r3, r2, lsl #2
{
2400e33a:	b510      	push	{r4, lr}
2400e33c:	ed2d 8b02 	vpush	{d8}
    float floatVer = cutoff - (float)intVer;
2400e340:	ee30 8a47 	vsub.f32	s16, s0, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400e344:	edd1 6a01 	vldr	s13, [r1, #4]
2400e348:	ee77 7a87 	vadd.f32	s15, s15, s14
2400e34c:	ed91 7a00 	vldr	s14, [r1]
	 _tVZFilter* f = *vf;
2400e350:	6804      	ldr	r4, [r0, #0]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400e352:	ee28 8a26 	vmul.f32	s16, s16, s13
    
    switch( f->type )
2400e356:	7922      	ldrb	r2, [r4, #4]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400e358:	eea7 8a27 	vfma.f32	s16, s14, s15
2400e35c:	ed84 8a04 	vstr	s16, [r4, #16]
    switch( f->type )
2400e360:	2a0a      	cmp	r2, #10
2400e362:	f200 8143 	bhi.w	2400e5ec <tVZFilter_setFreqFast+0x2cc>
2400e366:	e8df f012 	tbh	[pc, r2, lsl #1]
2400e36a:	0026      	.short	0x0026
2400e36c:	0038002f 	.word	0x0038002f
2400e370:	004d0041 	.word	0x004d0041
2400e374:	009b0056 	.word	0x009b0056
2400e378:	00e300bf 	.word	0x00e300bf
2400e37c:	000b0136 	.word	0x000b0136
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
2400e380:	edd4 7a05 	vldr	s15, [r4, #20]
2400e384:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400e388:	eeb1 7a67 	vneg.f32	s14, s15
2400e38c:	61e3      	str	r3, [r4, #28]
2400e38e:	6263      	str	r3, [r4, #36]	; 0x24
2400e390:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cL *= s; f->cB *= s; f->cH *= s;
        }
        break;

    }
    f->R2Plusg = f->R2+f->g;
2400e394:	ee37 0a88 	vadd.f32	s0, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2400e398:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
2400e39c:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2400e3a0:	eef0 6a67 	vmov.f32	s13, s15
2400e3a4:	eee0 6a08 	vfma.f32	s13, s0, s16
}
2400e3a8:	ecbd 8b02 	vpop	{d8}
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2400e3ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
2400e3b0:	ed84 7a06 	vstr	s14, [r4, #24]
}
2400e3b4:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
2400e3b6:	2300      	movs	r3, #0
2400e3b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
2400e3bc:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
2400e3c0:	61e3      	str	r3, [r4, #28]
2400e3c2:	6223      	str	r3, [r4, #32]
2400e3c4:	6262      	str	r2, [r4, #36]	; 0x24
            break;
2400e3c6:	e7e5      	b.n	2400e394 <tVZFilter_setFreqFast+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
2400e3c8:	2300      	movs	r3, #0
2400e3ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
2400e3ce:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
2400e3d2:	6223      	str	r3, [r4, #32]
2400e3d4:	6263      	str	r3, [r4, #36]	; 0x24
2400e3d6:	61e2      	str	r2, [r4, #28]
            break;
2400e3d8:	e7dc      	b.n	2400e394 <tVZFilter_setFreqFast+0x74>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
2400e3da:	2300      	movs	r3, #0
2400e3dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
2400e3e0:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
2400e3e4:	61e3      	str	r3, [r4, #28]
2400e3e6:	6263      	str	r3, [r4, #36]	; 0x24
2400e3e8:	6222      	str	r2, [r4, #32]
            break;
2400e3ea:	e7d3      	b.n	2400e394 <tVZFilter_setFreqFast+0x74>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2400e3ec:	edd4 7a05 	vldr	s15, [r4, #20]
2400e3f0:	2300      	movs	r3, #0
2400e3f2:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
2400e3f6:	61e3      	str	r3, [r4, #28]
2400e3f8:	ee27 7a27 	vmul.f32	s14, s14, s15
2400e3fc:	6263      	str	r3, [r4, #36]	; 0x24
2400e3fe:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
2400e402:	e7c7      	b.n	2400e394 <tVZFilter_setFreqFast+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
2400e404:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400e408:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
2400e40a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
2400e40e:	6222      	str	r2, [r4, #32]
2400e410:	61e3      	str	r3, [r4, #28]
2400e412:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400e414:	e7be      	b.n	2400e394 <tVZFilter_setFreqFast+0x74>
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2400e416:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
2400e41a:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
2400e41e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
2400e422:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2400e426:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2400e42a:	ee60 0aa7 	vmul.f32	s1, s1, s15
2400e42e:	f000 fcdd 	bl	2400edec <fastPowf>
            float wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
2400e432:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
2400e436:	eddf 7a70 	vldr	s15, [pc, #448]	; 2400e5f8 <tVZFilter_setFreqFast+0x2d8>
2400e43a:	ee28 8a07 	vmul.f32	s16, s16, s14
2400e43e:	ee28 8a27 	vmul.f32	s16, s16, s15
2400e442:	ee28 0a00 	vmul.f32	s0, s16, s0
2400e446:	f000 fc79 	bl	2400ed3c <fastertanf>
            float r  = f->g/wl;
2400e44a:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2400e44e:	eeb0 5a68 	vmov.f32	s10, s17
2400e452:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            float r  = f->g/wl;
2400e456:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2400e45a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
2400e45e:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
2400e462:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2400e466:	eea7 5aa7 	vfma.f32	s10, s15, s15
2400e46a:	ee85 7a27 	vdiv.f32	s14, s10, s15
2400e46e:	ee77 7a65 	vsub.f32	s15, s14, s11
2400e472:	ee67 7a86 	vmul.f32	s15, s15, s12
2400e476:	ee87 0aa6 	vdiv.f32	s0, s15, s13
2400e47a:	f000 fc73 	bl	2400ed64 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2400e47e:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
2400e482:	ed94 8a04 	vldr	s16, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2400e486:	edc4 8a07 	vstr	s17, [r4, #28]
2400e48a:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2400e48e:	ee70 7a00 	vadd.f32	s15, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2400e492:	ee27 7a27 	vmul.f32	s14, s14, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2400e496:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2400e49a:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
2400e49e:	e779      	b.n	2400e394 <tVZFilter_setFreqFast+0x74>
            float A = fastsqrtf(f->G);
2400e4a0:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
2400e4a4:	f000 fc5e 	bl	2400ed64 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
2400e4a8:	f000 fc5c 	bl	2400ed64 <fastsqrtf>
2400e4ac:	edd4 6a04 	vldr	s13, [r4, #16]
            f->R2 = 2.0f*sinhf(f->B*0.346573590279973f); //if using bandwidth instead of Q
2400e4b0:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
2400e4b4:	ee86 8a80 	vdiv.f32	s16, s13, s0
            f->R2 = 2.0f*sinhf(f->B*0.346573590279973f); //if using bandwidth instead of Q
2400e4b8:	eddf 7a50 	vldr	s15, [pc, #320]	; 2400e5fc <tVZFilter_setFreqFast+0x2dc>
2400e4bc:	ee27 0a27 	vmul.f32	s0, s14, s15
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
2400e4c0:	ed84 8a04 	vstr	s16, [r4, #16]
            f->R2 = 2.0f*sinhf(f->B*0.346573590279973f); //if using bandwidth instead of Q
2400e4c4:	f004 ff0e 	bl	240132e4 <sinhf>
2400e4c8:	ee70 7a00 	vadd.f32	s15, s0, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
2400e4cc:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
2400e4d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400e4d4:	ed84 7a07 	vstr	s14, [r4, #28]
2400e4d8:	ee27 7a87 	vmul.f32	s14, s15, s14
2400e4dc:	6263      	str	r3, [r4, #36]	; 0x24
            f->R2 = 2.0f*sinhf(f->B*0.346573590279973f); //if using bandwidth instead of Q
2400e4de:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
2400e4e2:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
2400e4e6:	e755      	b.n	2400e394 <tVZFilter_setFreqFast+0x74>
            float A = fastsqrtf(f->G);
2400e4e8:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
2400e4ec:	f000 fc3a 	bl	2400ed64 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
2400e4f0:	f000 fc38 	bl	2400ed64 <fastsqrtf>
2400e4f4:	edd4 6a04 	vldr	s13, [r4, #16]
            f->R2 = 2.0f*sinhf(f->B*0.346573590279973f); //if using bandwidth instead of Q
2400e4f8:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
2400e4fc:	ee20 8a26 	vmul.f32	s16, s0, s13
            f->R2 = 2.0f*sinhf(f->B*0.346573590279973f); //if using bandwidth instead of Q
2400e500:	eddf 7a3e 	vldr	s15, [pc, #248]	; 2400e5fc <tVZFilter_setFreqFast+0x2dc>
2400e504:	ee27 0a27 	vmul.f32	s0, s14, s15
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
2400e508:	ed84 8a04 	vstr	s16, [r4, #16]
            f->R2 = 2.0f*sinhf(f->B*0.346573590279973f); //if using bandwidth instead of Q
2400e50c:	f004 feea 	bl	240132e4 <sinhf>
2400e510:	ee70 7a00 	vadd.f32	s15, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
2400e514:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
2400e518:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2400e51c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
2400e520:	ee27 7a87 	vmul.f32	s14, s15, s14
2400e524:	61e3      	str	r3, [r4, #28]
            f->R2 = 2.0f*sinhf(f->B*0.346573590279973f); //if using bandwidth instead of Q
2400e526:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
2400e52a:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
2400e52e:	e731      	b.n	2400e394 <tVZFilter_setFreqFast+0x74>
            float x  = (2.0f*f->m-1.0f);
2400e530:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
2400e534:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
2400e538:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2400e53c:	eddf 0a30 	vldr	s1, [pc, #192]	; 2400e600 <tVZFilter_setFreqFast+0x2e0>
2400e540:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
2400e544:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2400e548:	eeb0 0a48 	vmov.f32	s0, s16
2400e54c:	eea7 0a67 	vfms.f32	s0, s14, s15
2400e550:	f000 fd8e 	bl	2400f070 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2400e554:	eddf 0a2a 	vldr	s1, [pc, #168]	; 2400e600 <tVZFilter_setFreqFast+0x2e0>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
2400e558:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2400e55c:	eeb0 0a68 	vmov.f32	s0, s17
2400e560:	f000 fd8a 	bl	2400f078 <minimum>
            f->cB = 1.0f-x*x;
2400e564:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2400e568:	edd4 7a05 	vldr	s15, [r4, #20]
2400e56c:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
2400e570:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2400e574:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
2400e578:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
2400e57c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2400e580:	ee76 5a06 	vadd.f32	s11, s12, s12
2400e584:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
2400e588:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2400e58c:	eee6 7a06 	vfma.f32	s15, s12, s12
2400e590:	eee0 7a00 	vfma.f32	s15, s0, s0
2400e594:	eee0 7a65 	vfms.f32	s15, s0, s11
2400e598:	ee86 0aa7 	vdiv.f32	s0, s13, s15
2400e59c:	f000 fbe2 	bl	2400ed64 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
2400e5a0:	edd4 5a07 	vldr	s11, [r4, #28]
2400e5a4:	ed94 6a08 	vldr	s12, [r4, #32]
2400e5a8:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
2400e5ac:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2400e5b0:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
2400e5b4:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2400e5b8:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
2400e5bc:	ee65 5a80 	vmul.f32	s11, s11, s0
2400e5c0:	ee26 6a00 	vmul.f32	s12, s12, s0
2400e5c4:	ee26 0a80 	vmul.f32	s0, s13, s0
2400e5c8:	edc4 5a07 	vstr	s11, [r4, #28]
2400e5cc:	ed84 6a08 	vstr	s12, [r4, #32]
2400e5d0:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
2400e5d4:	e6de      	b.n	2400e394 <tVZFilter_setFreqFast+0x74>
            f->cL = 1.0f;
2400e5d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
2400e5da:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
2400e5de:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
2400e5e0:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
2400e5e4:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
2400e5e8:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2400e5ea:	e6d3      	b.n	2400e394 <tVZFilter_setFreqFast+0x74>
    f->R2Plusg = f->R2+f->g;
2400e5ec:	edd4 7a05 	vldr	s15, [r4, #20]
2400e5f0:	e6d0      	b.n	2400e394 <tVZFilter_setFreqFast+0x74>
2400e5f2:	bf00      	nop
2400e5f4:	24014588 	.word	0x24014588
2400e5f8:	40490fdb 	.word	0x40490fdb
2400e5fc:	3eb17218 	.word	0x3eb17218
2400e600:	00000000 	.word	0x00000000

2400e604 <tVZFilter_setGain>:
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
    tVZFilter_calcCoeffsEfficientBP(vf);
}

void   tVZFilter_setGain                (tVZFilter* const vf, float gain)
{
2400e604:	b538      	push	{r3, r4, r5, lr}
2400e606:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
2400e60a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 2400e634 <tVZFilter_setGain+0x30>
2400e60e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2400e638 <tVZFilter_setGain+0x34>
{
2400e612:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
2400e614:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
2400e616:	f01a fb1b 	bl	24028c50 <__LEAF_clip_veneer>
    f->invG = 1.0f/f->G;
2400e61a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
2400e61e:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
2400e620:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
2400e624:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400e628:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
2400e62c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
2400e630:	f7ff bd10 	b.w	2400e054 <tVZFilter_calcCoeffs>
2400e634:	457a0000 	.word	0x457a0000
2400e638:	358637bd 	.word	0x358637bd

2400e63c <tVZFilter_setResonance>:


void   tVZFilter_setResonance                (tVZFilter* const vf, float res)
{
2400e63c:	b538      	push	{r3, r4, r5, lr}
2400e63e:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
    f->Q = LEAF_clip(0.01f, res, 100.0f);
2400e642:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 2400e66c <tVZFilter_setResonance+0x30>
2400e646:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2400e670 <tVZFilter_setResonance+0x34>
{
2400e64a:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
2400e64c:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
2400e64e:	f01a faff 	bl	24028c50 <__LEAF_clip_veneer>
    f->R2 = 1.0f / f->Q;
2400e652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
2400e656:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
2400e658:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
2400e65c:	eec7 7a00 	vdiv.f32	s15, s14, s0
2400e660:	edc5 7a05 	vstr	s15, [r5, #20]
}
2400e664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
2400e668:	f7ff bcf4 	b.w	2400e054 <tVZFilter_calcCoeffs>
2400e66c:	42c80000 	.word	0x42c80000
2400e670:	3c23d70a 	.word	0x3c23d70a

2400e674 <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
float   tDiodeFilter_tick               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
2400e674:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2400e676:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e67a:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
2400e67e:	ed9f 7ae2 	vldr	s14, [pc, #904]	; 2400ea08 <tDiodeFilter_tick+0x394>
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2400e682:	ed93 4a03 	vldr	s8, [r3, #12]
2400e686:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float ih = 0.5f * (in + f->zi);
2400e68a:	ed93 6a07 	vldr	s12, [r3, #28]
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2400e68e:	ee66 7ac4 	vnmul.f32	s15, s13, s8
2400e692:	ed93 2a08 	vldr	s4, [r3, #32]
    float ih = 0.5f * (in + f->zi);
2400e696:	ee30 6a06 	vadd.f32	s12, s0, s12
    if (testVal!= 0.0f)
2400e69a:	eddf 5adc 	vldr	s11, [pc, #880]	; 2400ea0c <tDiodeFilter_tick+0x398>
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2400e69e:	ed93 5a02 	vldr	s10, [r3, #8]
2400e6a2:	eee6 7a23 	vfma.f32	s15, s12, s7
{
2400e6a6:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2400e6aa:	ee67 7a82 	vmul.f32	s15, s15, s4
    float a = x*x;
2400e6ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e6b2:	eea7 7aa4 	vfma.f32	s14, s15, s9
2400e6b6:	ee27 7a87 	vmul.f32	s14, s15, s14
    if (testVal!= 0.0f)
2400e6ba:	eeb4 7a65 	vcmp.f32	s14, s11
2400e6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e6c2:	f000 8194 	beq.w	2400e9ee <tDiodeFilter_tick+0x37a>
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e6c6:	eddf 4ad2 	vldr	s9, [pc, #840]	; 2400ea10 <tDiodeFilter_tick+0x39c>
2400e6ca:	ee77 4a24 	vadd.f32	s9, s14, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2400e6ce:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e6d2:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2400e6d6:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2400e6da:	ee25 2a02 	vmul.f32	s4, s10, s4
    return ((a + 105.0f)*a + 945.0f) / output;
2400e6de:	eddf 1acc 	vldr	s3, [pc, #816]	; 2400ea10 <tDiodeFilter_tick+0x39c>
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
    
    // This formula gives the result for y3 thanks to MATLAB
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2400e6e2:	eef0 9a08 	vmov.f32	s19, #8	; 0x40400000  3.0
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2400e6e6:	ee33 7ac3 	vsub.f32	s14, s7, s6
2400e6ea:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
    return ((a + 105.0f)*a + 945.0f) / output;
2400e6ee:	eddf 5ac9 	vldr	s11, [pc, #804]	; 2400ea14 <tDiodeFilter_tick+0x3a0>
2400e6f2:	eeb0 8a61 	vmov.f32	s16, s3
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e6f6:	ed9f 6ac4 	vldr	s12, [pc, #784]	; 2400ea08 <tDiodeFilter_tick+0x394>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2400e6fa:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
2400e6fe:	ee77 5aa5 	vadd.f32	s11, s15, s11
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2400e702:	ee27 7a01 	vmul.f32	s14, s14, s2
    return ((a + 105.0f)*a + 945.0f) / output;
2400e706:	eea7 8aa5 	vfma.f32	s16, s15, s11
    if (testVal!= 0.0f)
2400e70a:	eddf 5ac0 	vldr	s11, [pc, #768]	; 2400ea0c <tDiodeFilter_tick+0x398>
    float a = x*x;
2400e70e:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e712:	eef0 7a46 	vmov.f32	s15, s12
2400e716:	ee25 6a01 	vmul.f32	s12, s10, s2
2400e71a:	eee7 7a20 	vfma.f32	s15, s14, s1
    return ((a + 105.0f)*a + 945.0f) / output;
2400e71e:	eddf 0abc 	vldr	s1, [pc, #752]	; 2400ea10 <tDiodeFilter_tick+0x39c>
2400e722:	eec8 2a24 	vdiv.f32	s5, s16, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2400e726:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e72a:	ee67 7a27 	vmul.f32	s15, s14, s15
2400e72e:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
2400e732:	eef0 8a60 	vmov.f32	s17, s1
    if (testVal!= 0.0f)
2400e736:	eef4 7a65 	vcmp.f32	s15, s11
    return ((a + 105.0f)*a + 945.0f) / output;
2400e73a:	eddf 5ab6 	vldr	s11, [pc, #728]	; 2400ea14 <tDiodeFilter_tick+0x3a0>
2400e73e:	ee77 5a25 	vadd.f32	s11, s14, s11
    if (testVal!= 0.0f)
2400e742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
2400e746:	eee7 8a25 	vfma.f32	s17, s14, s11
    if (testVal!= 0.0f)
2400e74a:	eddf 5ab0 	vldr	s11, [pc, #704]	; 2400ea0c <tDiodeFilter_tick+0x398>
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e74e:	bf18      	it	ne
2400e750:	ee77 1aa1 	vaddne.f32	s3, s15, s3
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2400e754:	ee74 7ae3 	vsub.f32	s15, s9, s7
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2400e758:	ee22 2a82 	vmul.f32	s4, s5, s4
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e75c:	eddf 2aaa 	vldr	s5, [pc, #680]	; 2400ea08 <tDiodeFilter_tick+0x394>
    float output = 1.0f;
2400e760:	bf08      	it	eq
2400e762:	eef7 1a00 	vmoveq.f32	s3, #112	; 0x3f800000  1.0
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2400e766:	ee67 7a81 	vmul.f32	s15, s15, s2
    return ((a + 105.0f)*a + 945.0f) / output;
2400e76a:	ee88 7aa1 	vdiv.f32	s14, s17, s3
2400e76e:	eddf 1aa9 	vldr	s3, [pc, #676]	; 2400ea14 <tDiodeFilter_tick+0x3a0>
    float a = x*x;
2400e772:	ee67 7aa7 	vmul.f32	s15, s15, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e776:	eee7 2a88 	vfma.f32	s5, s15, s16
    return ((a + 105.0f)*a + 945.0f) / output;
2400e77a:	ee77 1aa1 	vadd.f32	s3, s15, s3
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e77e:	ee67 2aa2 	vmul.f32	s5, s15, s5
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2400e782:	ee27 7a06 	vmul.f32	s14, s14, s12
    if (testVal!= 0.0f)
2400e786:	eef4 2a65 	vcmp.f32	s5, s11
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
2400e78a:	ee76 5ae4 	vsub.f32	s11, s13, s9
    if (testVal!= 0.0f)
2400e78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
2400e792:	ee65 5a81 	vmul.f32	s11, s11, s2
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e796:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
2400e79a:	bf18      	it	ne
2400e79c:	ee72 2aa0 	vaddne.f32	s5, s5, s1
    return ((a + 105.0f)*a + 945.0f) / output;
2400e7a0:	eddf 0a9b 	vldr	s1, [pc, #620]	; 2400ea10 <tDiodeFilter_tick+0x39c>
    float output = 1.0f;
2400e7a4:	bf08      	it	eq
2400e7a6:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
2400e7aa:	eeb0 8a60 	vmov.f32	s16, s1
    float a = x*x;
2400e7ae:	ee65 5aa5 	vmul.f32	s11, s11, s11
    return ((a + 105.0f)*a + 945.0f) / output;
2400e7b2:	eea7 8aa1 	vfma.f32	s16, s15, s3
    if (testVal!= 0.0f)
2400e7b6:	eddf 1a95 	vldr	s3, [pc, #596]	; 2400ea0c <tDiodeFilter_tick+0x398>
    return ((a + 105.0f)*a + 945.0f) / output;
2400e7ba:	eec8 7a22 	vdiv.f32	s15, s16, s5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e7be:	eddf 2a92 	vldr	s5, [pc, #584]	; 2400ea08 <tDiodeFilter_tick+0x394>
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
2400e7c2:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e7c6:	eee5 2a81 	vfma.f32	s5, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
2400e7ca:	ed9f 1a91 	vldr	s2, [pc, #580]	; 2400ea10 <tDiodeFilter_tick+0x39c>
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
2400e7ce:	ee25 5a08 	vmul.f32	s10, s10, s16
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e7d2:	ee65 2aa2 	vmul.f32	s5, s11, s5
    if (testVal!= 0.0f)
2400e7d6:	eef4 2a61 	vcmp.f32	s5, s3
    return ((a + 105.0f)*a + 945.0f) / output;
2400e7da:	eddf 1a8e 	vldr	s3, [pc, #568]	; 2400ea14 <tDiodeFilter_tick+0x3a0>
2400e7de:	ee75 1aa1 	vadd.f32	s3, s11, s3
    if (testVal!= 0.0f)
2400e7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2400e7e6:	ee67 7a86 	vmul.f32	s15, s15, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e7ea:	bf18      	it	ne
2400e7ec:	ee72 2aa0 	vaddne.f32	s5, s5, s1
    return ((a + 105.0f)*a + 945.0f) / output;
2400e7f0:	eef0 0a41 	vmov.f32	s1, s2
    float output = 1.0f;
2400e7f4:	bf08      	it	eq
2400e7f6:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
2400e7fa:	eee5 0aa1 	vfma.f32	s1, s11, s3
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
2400e7fe:	ee66 1a88 	vmul.f32	s3, s13, s16
    float a = x*x;
2400e802:	ee61 1aa1 	vmul.f32	s3, s3, s3
    return ((a + 105.0f)*a + 945.0f) / output;
2400e806:	eec0 5aa2 	vdiv.f32	s11, s1, s5
2400e80a:	eddf 0a81 	vldr	s1, [pc, #516]	; 2400ea10 <tDiodeFilter_tick+0x39c>
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e80e:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
2400e812:	ee25 6a86 	vmul.f32	s12, s11, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e816:	eddf 5a7c 	vldr	s11, [pc, #496]	; 2400ea08 <tDiodeFilter_tick+0x394>
2400e81a:	eee1 5aa2 	vfma.f32	s11, s3, s5
    if (testVal!= 0.0f)
2400e81e:	eddf 2a7b 	vldr	s5, [pc, #492]	; 2400ea0c <tDiodeFilter_tick+0x398>
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e822:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
2400e826:	eef4 5a62 	vcmp.f32	s11, s5
2400e82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2400e82e:	bf18      	it	ne
2400e830:	ee75 2a81 	vaddne.f32	s5, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
2400e834:	ed9f 1a77 	vldr	s2, [pc, #476]	; 2400ea14 <tDiodeFilter_tick+0x3a0>
    float output = 1.0f;
2400e838:	bf08      	it	eq
2400e83a:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
2400e83e:	ee31 1a81 	vadd.f32	s2, s3, s2
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2400e842:	ee76 5aa4 	vadd.f32	s11, s13, s9
    return ((a + 105.0f)*a + 945.0f) / output;
2400e846:	eee1 0a81 	vfma.f32	s1, s3, s2
2400e84a:	ee36 1aa3 	vadd.f32	s2, s13, s7
2400e84e:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
2400e852:	eef0 8a61 	vmov.f32	s17, s3
2400e856:	ee80 8aa2 	vdiv.f32	s16, s1, s5
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2400e85a:	ee73 2a24 	vadd.f32	s5, s6, s9
2400e85e:	ee74 0a81 	vadd.f32	s1, s9, s2
2400e862:	ee72 2a81 	vadd.f32	s5, s5, s2
2400e866:	eeb0 1a60 	vmov.f32	s2, s1
2400e86a:	eee0 2a02 	vfma.f32	s5, s0, s4
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
2400e86e:	ee28 5a05 	vmul.f32	s10, s16, s10
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2400e872:	eea2 1a87 	vfma.f32	s2, s5, s14
2400e876:	ee75 2aa5 	vadd.f32	s5, s11, s11
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2400e87a:	ee35 9a29 	vadd.f32	s18, s10, s19
2400e87e:	eee5 8a21 	vfma.f32	s17, s10, s3
2400e882:	eee7 5a22 	vfma.f32	s11, s14, s5
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2400e886:	ee66 2a87 	vmul.f32	s5, s13, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2400e88a:	ee75 0a0a 	vadd.f32	s1, s10, s20
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2400e88e:	eee1 5a27 	vfma.f32	s11, s2, s15
2400e892:	eeb0 1a66 	vmov.f32	s2, s13
2400e896:	eea2 1aa1 	vfma.f32	s2, s5, s3
2400e89a:	ee62 2aa9 	vmul.f32	s5, s5, s19
2400e89e:	eee6 2aa1 	vfma.f32	s5, s13, s3
2400e8a2:	eea2 1aa7 	vfma.f32	s2, s5, s15
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2400e8a6:	eef1 2a00 	vmov.f32	s5, #16	; 0x40800000  4.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2400e8aa:	eea5 1a86 	vfma.f32	s2, s11, s12
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2400e8ae:	eef0 5a62 	vmov.f32	s11, s5
2400e8b2:	eee5 2a21 	vfma.f32	s5, s10, s3
2400e8b6:	eee4 5a02 	vfma.f32	s11, s8, s4
2400e8ba:	eeb0 8a62 	vmov.f32	s16, s5
2400e8be:	ee75 2a25 	vadd.f32	s5, s10, s11
2400e8c2:	eef0 5a45 	vmov.f32	s11, s10
2400e8c6:	eea2 9a87 	vfma.f32	s18, s5, s14
2400e8ca:	ee75 2a21 	vadd.f32	s5, s10, s3
2400e8ce:	eee8 2a07 	vfma.f32	s5, s16, s14
2400e8d2:	eeb0 8a68 	vmov.f32	s16, s17
2400e8d6:	eee9 2a27 	vfma.f32	s5, s18, s15
2400e8da:	ee20 9a87 	vmul.f32	s18, s1, s14
2400e8de:	eea9 8a29 	vfma.f32	s16, s18, s19
2400e8e2:	eee9 5a21 	vfma.f32	s11, s18, s3
2400e8e6:	eee8 5a27 	vfma.f32	s11, s16, s15
2400e8ea:	eee2 5a86 	vfma.f32	s11, s5, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
2400e8ee:	eeff 2a00 	vmov.f32	s5, #240	; 0xbf800000 -1.0
2400e8f2:	eef4 5a62 	vcmp.f32	s11, s5
2400e8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
2400e8fa:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2400e8fe:	bf14      	ite	ne
2400e900:	ee75 5a8a 	vaddne.f32	s11, s11, s20
        tempy3denom = 0.000001f;
2400e904:	eddf 5a44 	vldreq	s11, [pc, #272]	; 2400ea18 <tDiodeFilter_tick+0x3a4>
    if (t1 == 0.0f)
2400e908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
2400e90c:	eec1 2a25 	vdiv.f32	s5, s2, s11
    if (t1 == 0.0f)
2400e910:	d075      	beq.n	2400e9fe <tDiodeFilter_tick+0x38a>
2400e912:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
2400e916:	ee77 1a21 	vadd.f32	s3, s14, s3
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
2400e91a:	eef5 7a40 	vcmp.f32	s15, #0.0
2400e91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e922:	d067      	beq.n	2400e9f4 <tDiodeFilter_tick+0x380>
2400e924:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2400e928:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
2400e92c:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
2400e930:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2400e934:	eeb0 8a66 	vmov.f32	s16, s13
    float xx = (in - f->r*y3);
2400e938:	ee24 4a22 	vmul.f32	s8, s8, s5
    if (t3 == 0.0f)
2400e93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400e940:	eeb0 1a64 	vmov.f32	s2, s9
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
2400e944:	ee77 1aa1 	vadd.f32	s3, s15, s3
        t3 = 0.000001f;
2400e948:	bf08      	it	eq
2400e94a:	ed9f 6a33 	vldreq	s12, [pc, #204]	; 2400ea18 <tDiodeFilter_tick+0x3a4>
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2400e94e:	ee70 0a86 	vadd.f32	s1, s1, s12
2400e952:	eea6 1a22 	vfma.f32	s2, s12, s5
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
2400e956:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2400e95a:	ee90 8aa2 	vfnms.f32	s16, s1, s5
    float xx = (in - f->r*y3);
2400e95e:	ee70 0a44 	vsub.f32	s1, s0, s8
    return tanhf(y3*f->r);
2400e962:	eeb0 0a44 	vmov.f32	s0, s8
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2400e966:	ee88 4a06 	vdiv.f32	s8, s16, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
2400e96a:	ee95 1a84 	vfnms.f32	s2, s11, s8
2400e96e:	eeb0 8a41 	vmov.f32	s16, s2
2400e972:	eeb0 1a63 	vmov.f32	s2, s7
2400e976:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
2400e97a:	eea7 1a84 	vfma.f32	s2, s15, s8
2400e97e:	ee91 1aa5 	vfnms.f32	s2, s3, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2400e982:	ee75 1ac4 	vsub.f32	s3, s11, s8
2400e986:	ee61 1aa7 	vmul.f32	s3, s3, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
2400e98a:	ee81 8a07 	vdiv.f32	s16, s2, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
2400e98e:	ee34 1a62 	vsub.f32	s2, s8, s5
2400e992:	ee21 1a06 	vmul.f32	s2, s2, s12
2400e996:	eea5 1a62 	vfms.f32	s2, s10, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2400e99a:	ee72 2ac4 	vsub.f32	s5, s5, s8
2400e99e:	eeb0 5a61 	vmov.f32	s10, s3
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2400e9a2:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2400e9a6:	eea2 5a86 	vfma.f32	s10, s5, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2400e9aa:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2400e9ae:	ee75 5ac8 	vsub.f32	s11, s11, s16
2400e9b2:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
2400e9b6:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2400e9ba:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
2400e9be:	eee1 6a22 	vfma.f32	s13, s2, s5
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2400e9c2:	eee2 5a20 	vfma.f32	s11, s4, s1
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2400e9c6:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2400e9ca:	eee5 4a22 	vfma.f32	s9, s10, s5
}
2400e9ce:	ecbd 8b06 	vpop	{d8-d10}
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2400e9d2:	eea5 3aa2 	vfma.f32	s6, s11, s5
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
2400e9d6:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2400e9da:	eee7 3a22 	vfma.f32	s7, s14, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2400e9de:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2400e9e2:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
2400e9e6:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
    return tanhf(y3*f->r);
2400e9ea:	f004 bc29 	b.w	24013240 <tanhf>
    float output = 1.0f;
2400e9ee:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
2400e9f2:	e66c      	b.n	2400e6ce <tDiodeFilter_tick+0x5a>
2400e9f4:	eddf 5a09 	vldr	s11, [pc, #36]	; 2400ea1c <tDiodeFilter_tick+0x3a8>
        t2 = 0.000001f;
2400e9f8:	eddf 7a07 	vldr	s15, [pc, #28]	; 2400ea18 <tDiodeFilter_tick+0x3a4>
2400e9fc:	e796      	b.n	2400e92c <tDiodeFilter_tick+0x2b8>
2400e9fe:	eddf 1a07 	vldr	s3, [pc, #28]	; 2400ea1c <tDiodeFilter_tick+0x3a8>
        t1 = 0.000001f;
2400ea02:	ed9f 7a05 	vldr	s14, [pc, #20]	; 2400ea18 <tDiodeFilter_tick+0x3a4>
2400ea06:	e788      	b.n	2400e91a <tDiodeFilter_tick+0x2a6>
2400ea08:	43d20000 	.word	0x43d20000
2400ea0c:	c46c4000 	.word	0xc46c4000
2400ea10:	446c4000 	.word	0x446c4000
2400ea14:	42d20000 	.word	0x42d20000
2400ea18:	358637bd 	.word	0x358637bd
2400ea1c:	3f800008 	.word	0x3f800008

2400ea20 <tDiodeFilter_setFreqFast>:
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, float cutoff)
{
	_tDiodeFilter* f = *vf;
    int intVer = (int)cutoff;
2400ea20:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400ea24:	4b0d      	ldr	r3, [pc, #52]	; (2400ea5c <tDiodeFilter_setFreqFast+0x3c>)
2400ea26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400ea2a:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
2400ea2c:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
2400ea30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400ea34:	ee77 7ac0 	vsub.f32	s15, s15, s0
2400ea38:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
2400ea3c:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400ea40:	edd0 6a01 	vldr	s13, [r0, #4]
2400ea44:	ee77 7a87 	vadd.f32	s15, s15, s14
2400ea48:	ed90 7a00 	vldr	s14, [r0]
2400ea4c:	ee20 0a26 	vmul.f32	s0, s0, s13
2400ea50:	eea7 0a27 	vfma.f32	s0, s14, s15
2400ea54:	ed81 0a02 	vstr	s0, [r1, #8]
}
2400ea58:	4770      	bx	lr
2400ea5a:	bf00      	nop
2400ea5c:	24014588 	.word	0x24014588

2400ea60 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, float resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
2400ea60:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2400ea64:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
2400ea68:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
2400ea6c:	eef0 0a67 	vmov.f32	s1, s15
{
2400ea70:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
2400ea72:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
2400ea74:	eee0 0a07 	vfma.f32	s1, s0, s14
2400ea78:	eeb0 0a67 	vmov.f32	s0, s15
2400ea7c:	f01a f8e8 	bl	24028c50 <__LEAF_clip_veneer>
2400ea80:	ed84 0a03 	vstr	s0, [r4, #12]
}
2400ea84:	bd10      	pop	{r4, pc}
2400ea86:	bf00      	nop

2400ea88 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

float   tLadderFilter_tick               (tLadderFilter* const vf, float in)
{
    _tLadderFilter* f = *vf;
2400ea88:	6802      	ldr	r2, [r0, #0]
    
    float y3 = 0.0f;
    in += 0.015f;
2400ea8a:	eddf 7a8f 	vldr	s15, [pc, #572]	; 2400ecc8 <tLadderFilter_tick+0x240>
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
2400ea8e:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
2400ea90:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
2400ea94:	2900      	cmp	r1, #0
{
2400ea96:	ed2d 8b10 	vpush	{d8-d15}
    for (int i = 0; i < f->oversampling; i++) {
2400ea9a:	f340 8110 	ble.w	2400ecbe <tLadderFilter_tick+0x236>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2400ea9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        float g0 = 1.0f / (1.0f + f->c*t0);
2400eaa2:	ed92 5a04 	vldr	s10, [r2, #16]
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
2400eaa6:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    float  x2 = smoothABS (x-b, 0.01f);
2400eaaa:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        float z1 = f->c*t1 / (1.0f + f->c*t1);
        float z2 = f->c*t2 / (1.0f + f->c*t2);
        float z3 = f->c*t3 / (1.0f + f->c*t3);
        
        float f3 = f->c       * t2*g3;
        float f2 = f->c*f->c     * t1*g2 * t2*g3;
2400eaae:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2400eab2:	ed92 7a08 	vldr	s14, [r2, #32]
2400eab6:	ee72 2a27 	vadd.f32	s5, s4, s15
2400eaba:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        float estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
2400eabe:	ee65 aa00 	vmul.f32	s21, s10, s0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
2400eac2:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
2400eac6:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
2400eaca:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        float f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
2400eace:	ee25 9a28 	vmul.f32	s18, s10, s17
2400ead2:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2400ead6:	ee62 2a87 	vmul.f32	s5, s5, s14
2400eada:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2400eade:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
2400eae2:	2300      	movs	r3, #0
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
2400eae4:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2400eae8:	ed9f 8a78 	vldr	s16, [pc, #480]	; 2400eccc <tLadderFilter_tick+0x244>
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
2400eaec:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
2400eaf0:	3301      	adds	r3, #1
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
2400eaf2:	ee31 6a23 	vadd.f32	s12, s2, s7
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
2400eaf6:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
2400eafa:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2400eafc:	ee65 5aa5 	vmul.f32	s11, s11, s11
2400eb00:	ee26 6a06 	vmul.f32	s12, s12, s12
2400eb04:	ee66 6aa6 	vmul.f32	s13, s13, s13
2400eb08:	ee22 baa5 	vmul.f32	s22, s5, s11
2400eb0c:	ee26 ca22 	vmul.f32	s24, s12, s5
2400eb10:	ee72 5a25 	vadd.f32	s11, s4, s11
2400eb14:	ee32 6a06 	vadd.f32	s12, s4, s12
2400eb18:	ee66 baa2 	vmul.f32	s23, s13, s5
2400eb1c:	eecb ea25 	vdiv.f32	s29, s22, s11
2400eb20:	ee8c ba06 	vdiv.f32	s22, s24, s12
2400eb24:	ee72 6a26 	vadd.f32	s13, s4, s13
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
2400eb28:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2400eb2c:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
2400eb30:	ee27 7a07 	vmul.f32	s14, s14, s14
2400eb34:	ee77 eaee 	vsub.f32	s29, s15, s29
2400eb38:	ee77 6acb 	vsub.f32	s13, s15, s22
2400eb3c:	ee62 5a87 	vmul.f32	s11, s5, s14
2400eb40:	ee32 7a07 	vadd.f32	s14, s4, s14
        float g1 = 1.0f / (1.0f + f->c*t1);
2400eb44:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2400eb48:	ee85 ca87 	vdiv.f32	s24, s11, s14
        float g0 = 1.0f / (1.0f + f->c*t0);
2400eb4c:	ee65 5a2e 	vmul.f32	s11, s10, s29
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2400eb50:	ee37 7ac6 	vsub.f32	s14, s15, s12
        float g1 = 1.0f / (1.0f + f->c*t1);
2400eb54:	ee3e da27 	vadd.f32	s26, s28, s15
        float g0 = 1.0f / (1.0f + f->c*t0);
2400eb58:	ee35 6aa7 	vadd.f32	s12, s11, s15
        float g2 = 1.0f / (1.0f + f->c*t2);
2400eb5c:	ee65 ca07 	vmul.f32	s25, s10, s14
        float z0 = f->c*t0 / (1.0f + f->c*t0);
2400eb60:	eec5 ba86 	vdiv.f32	s23, s11, s12
        float z1 = f->c*t1 / (1.0f + f->c*t1);
2400eb64:	eece 5a0d 	vdiv.f32	s11, s28, s26
        float g2 = 1.0f / (1.0f + f->c*t2);
2400eb68:	ee7c daa7 	vadd.f32	s27, s25, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2400eb6c:	ee37 cacc 	vsub.f32	s24, s15, s24
        float g0 = 1.0f / (1.0f + f->c*t0);
2400eb70:	ee87 fa86 	vdiv.f32	s30, s15, s12
        float z2 = f->c*t2 / (1.0f + f->c*t2);
2400eb74:	ee8c eaad 	vdiv.f32	s28, s25, s27
        float g3 = 1.0f / (1.0f + f->c*t3);
2400eb78:	ee25 ba0c 	vmul.f32	s22, s10, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2400eb7c:	ee6b baa5 	vmul.f32	s23, s23, s11
        float g1 = 1.0f / (1.0f + f->c*t1);
2400eb80:	ee87 6a8d 	vdiv.f32	s12, s15, s26
        float g3 = 1.0f / (1.0f + f->c*t3);
2400eb84:	ee7b 5a27 	vadd.f32	s11, s22, s15
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2400eb88:	ee6b baa0 	vmul.f32	s23, s23, s1
        float g2 = 1.0f / (1.0f + f->c*t2);
2400eb8c:	ee87 daad 	vdiv.f32	s26, s15, s27
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2400eb90:	ee6b ba8e 	vmul.f32	s23, s23, s28
        float z3 = f->c*t3 / (1.0f + f->c*t3);
2400eb94:	eecb da25 	vdiv.f32	s27, s22, s11
        float g3 = 1.0f / (1.0f + f->c*t3);
2400eb98:	ee87 eaa5 	vdiv.f32	s28, s15, s11
        float estimate =
2400eb9c:	ee73 5a2a 	vadd.f32	s11, s6, s21
2400eba0:	ee27 ba26 	vmul.f32	s22, s14, s13
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
2400eba4:	ee66 6a26 	vmul.f32	s13, s12, s13
2400eba8:	ee65 5a89 	vmul.f32	s11, s11, s18
2400ebac:	ee2b ba06 	vmul.f32	s22, s22, s12
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
2400ebb0:	ee2f 6a2e 	vmul.f32	s12, s30, s29
2400ebb4:	ee65 5aae 	vmul.f32	s11, s11, s29
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
2400ebb8:	ee2d 7a07 	vmul.f32	s14, s26, s14
2400ebbc:	ee65 5a8f 	vmul.f32	s11, s11, s30
2400ebc0:	ee60 ea8e 	vmul.f32	s29, s1, s28
2400ebc4:	eee3 5aa8 	vfma.f32	s11, s7, s17
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
2400ebc8:	ee2e ca0c 	vmul.f32	s24, s28, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2400ebcc:	eeb0 ea67 	vmov.f32	s28, s15
2400ebd0:	eeab eaad 	vfma.f32	s28, s23, s27
2400ebd4:	ee6b 5a25 	vmul.f32	s11, s22, s11
    float  x1 = smoothABS (x-a, 0.01f);
2400ebd8:	eeb0 ba67 	vmov.f32	s22, s15
2400ebdc:	eeec 5a84 	vfma.f32	s11, s25, s8
2400ebe0:	eef0 ca64 	vmov.f32	s25, s9
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
2400ebe4:	eec9 ba8e 	vdiv.f32	s23, s19, s28
2400ebe8:	eeed ca25 	vfma.f32	s25, s26, s11
    float  x2 = smoothABS (x-b, 0.01f);
2400ebec:	eef0 5a4a 	vmov.f32	s11, s20
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2400ebf0:	eeb0 da48 	vmov.f32	s26, s16
    float  x1 = smoothABS (x-a, 0.01f);
2400ebf4:	eeac baae 	vfma.f32	s22, s25, s29
    float  x2 = smoothABS (x-b, 0.01f);
2400ebf8:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2400ebfc:	eef0 ca48 	vmov.f32	s25, s16
2400ec00:	eeab da0b 	vfma.f32	s26, s22, s22
2400ec04:	eee5 caa5 	vfma.f32	s25, s11, s11
2400ec08:	eef1 5acd 	vsqrt.f32	s11, s26
2400ec0c:	eeb1 baec 	vsqrt.f32	s22, s25
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
2400ec10:	ee3b ba65 	vsub.f32	s22, s22, s11
2400ec14:	eef0 5a40 	vmov.f32	s11, s0
2400ec18:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
2400ec1c:	eeb0 ba43 	vmov.f32	s22, s6
2400ec20:	eea5 ba25 	vfma.f32	s22, s10, s11
2400ec24:	ee26 6a0b 	vmul.f32	s12, s12, s22
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
2400ec28:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
2400ec2c:	ee75 5ac6 	vsub.f32	s11, s11, s12
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
2400ec30:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
2400ec34:	eea1 3aa5 	vfma.f32	s6, s3, s11
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
2400ec38:	eef0 5a44 	vmov.f32	s11, s8
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
2400ec3c:	ee66 6a8b 	vmul.f32	s13, s13, s22
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
2400ec40:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
2400ec44:	ee36 6a66 	vsub.f32	s12, s12, s13
2400ec48:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
2400ec4c:	eeb0 6a64 	vmov.f32	s12, s9
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
2400ec50:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
2400ec54:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
2400ec58:	ee76 6ac7 	vsub.f32	s13, s13, s14
2400ec5c:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
2400ec60:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
2400ec64:	ee37 7a4c 	vsub.f32	s14, s14, s24
2400ec68:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
2400ec6c:	f47f af3e 	bne.w	2400eaec <tLadderFilter_tick+0x64>
2400ec70:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
2400ec74:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
2400ec78:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
2400ec7c:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2400ec80:	ed9f 7a12 	vldr	s14, [pc, #72]	; 2400eccc <tLadderFilter_tick+0x244>
    float  x2 = smoothABS (x-b, 0.01f);
2400ec84:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
2400ec88:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2400ec8c:	eef0 5a47 	vmov.f32	s11, s14
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
2400ec90:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2400ec94:	eee0 5aa0 	vfma.f32	s11, s1, s1
    float  x2 = smoothABS (x-b, 0.01f);
2400ec98:	ee70 0ae6 	vsub.f32	s1, s1, s13
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2400ec9c:	eea0 7aa0 	vfma.f32	s14, s1, s1
2400eca0:	eef1 7ae5 	vsqrt.f32	s15, s11
2400eca4:	eef1 5ac7 	vsqrt.f32	s11, s14
    x = x - x2;
2400eca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400ecac:	ee77 7ae5 	vsub.f32	s15, s15, s11
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
2400ecb0:	eea7 0a86 	vfma.f32	s0, s15, s12
    return y3 * compensation;
}
2400ecb4:	ee20 0a0c 	vmul.f32	s0, s0, s24
2400ecb8:	ecbd 8b10 	vpop	{d8-d15}
2400ecbc:	4770      	bx	lr
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
2400ecbe:	edd2 0a05 	vldr	s1, [r2, #20]
    float y3 = 0.0f;
2400ecc2:	ed9f ca03 	vldr	s24, [pc, #12]	; 2400ecd0 <tLadderFilter_tick+0x248>
2400ecc6:	e7db      	b.n	2400ec80 <tLadderFilter_tick+0x1f8>
2400ecc8:	3c75c28f 	.word	0x3c75c28f
2400eccc:	3c23d70a 	.word	0x3c23d70a
2400ecd0:	00000000 	.word	0x00000000

2400ecd4 <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, float cutoff)
{
    _tLadderFilter* f = *vf;
    int intVer = (int)cutoff;
2400ecd4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400ecd8:	4b0f      	ldr	r3, [pc, #60]	; (2400ed18 <tLadderFilter_setFreqFast+0x44>)
2400ecda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tLadderFilter* f = *vf;
2400ecde:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
2400ece0:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
2400ece4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400ece8:	ee77 7ac0 	vsub.f32	s15, s15, s0
2400ecec:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
2400ecf0:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400ecf4:	edd0 6a01 	vldr	s13, [r0, #4]
2400ecf8:	ee77 7a87 	vadd.f32	s15, s15, s14
2400ecfc:	ed90 7a00 	vldr	s14, [r0]
2400ed00:	ee20 0a26 	vmul.f32	s0, s0, s13
2400ed04:	eea7 0a27 	vfma.f32	s0, s14, s15
    f->c2 = 2.0f * f->c;
2400ed08:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
2400ed0c:	ed81 0a04 	vstr	s0, [r1, #16]
    f->c2 = 2.0f * f->c;
2400ed10:	edc1 7a06 	vstr	s15, [r1, #24]
}
2400ed14:	4770      	bx	lr
2400ed16:	bf00      	nop
2400ed18:	24014588 	.word	0x24014588

2400ed1c <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, float resonance)
{
2400ed1c:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
2400ed1e:	6804      	ldr	r4, [r0, #0]
{
2400ed20:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
2400ed24:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
2400ed28:	ed9f 0a03 	vldr	s0, [pc, #12]	; 2400ed38 <tLadderFilter_setQ+0x1c>
2400ed2c:	f019 ff90 	bl	24028c50 <__LEAF_clip_veneer>
2400ed30:	ed84 0a05 	vstr	s0, [r4, #20]
}
2400ed34:	bd10      	pop	{r4, pc}
2400ed36:	bf00      	nop
2400ed38:	3e4ccccd 	.word	0x3e4ccccd

2400ed3c <fastertanf>:
    return fResult;
}

float fastertanf(float fAngle)
{
    float fASqr = fAngle*fAngle;
2400ed3c:	ee60 6a00 	vmul.f32	s13, s0, s0
    float fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
2400ed40:	ed9f 6a06 	vldr	s12, [pc, #24]	; 2400ed5c <fastertanf+0x20>
2400ed44:	ed9f 7a06 	vldr	s14, [pc, #24]	; 2400ed60 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
2400ed48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
2400ed4c:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
2400ed50:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
2400ed54:	ee20 0a27 	vmul.f32	s0, s0, s15
2400ed58:	4770      	bx	lr
2400ed5a:	bf00      	nop
2400ed5c:	3e502de0 	.word	0x3e502de0
2400ed60:	3ea295ea 	.word	0x3ea295ea

2400ed64 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
2400ed64:	ee10 2a10 	vmov	r2, s0
2400ed68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
2400ed6c:	4b0d      	ldr	r3, [pc, #52]	; (2400eda4 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
2400ed6e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
2400ed72:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
2400ed76:	ee60 7a27 	vmul.f32	s15, s0, s15
2400ed7a:	ee00 3a10 	vmov	s0, r3
2400ed7e:	ee67 7a80 	vmul.f32	s15, s15, s0
2400ed82:	eea0 7a67 	vfms.f32	s14, s0, s15
2400ed86:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
2400ed8a:	ee10 3a10 	vmov	r3, s0
2400ed8e:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
2400ed92:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
2400ed96:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
2400ed9a:	336e      	adds	r3, #110	; 0x6e
}
2400ed9c:	ee00 3a10 	vmov	s0, r3
2400eda0:	4770      	bx	lr
2400eda2:	bf00      	nop
2400eda4:	5f3759df 	.word	0x5f3759df

2400eda8 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
2400eda8:	ee10 3a10 	vmov	r3, s0
2400edac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400edb0:	ee00 3a10 	vmov	s0, r3
}
2400edb4:	4770      	bx	lr
2400edb6:	bf00      	nop

2400edb8 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline float fasterexpf(float x) {
    x = 1.0f + (x * 0.00390625f);
2400edb8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400edbc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 2400ede8 <fasterexpf+0x30>
2400edc0:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
2400edc4:	ee27 0aa7 	vmul.f32	s0, s15, s15
2400edc8:	ee20 0a00 	vmul.f32	s0, s0, s0
2400edcc:	ee20 0a00 	vmul.f32	s0, s0, s0
2400edd0:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
2400edd4:	ee20 0a00 	vmul.f32	s0, s0, s0
2400edd8:	ee20 0a00 	vmul.f32	s0, s0, s0
2400eddc:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
2400ede0:	ee20 0a00 	vmul.f32	s0, s0, s0
2400ede4:	4770      	bx	lr
2400ede6:	bf00      	nop
2400ede8:	3b800000 	.word	0x3b800000

2400edec <fastPowf>:
    { 
        float d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
2400edec:	ee10 3a10 	vmov	r3, s0
2400edf0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 2400ee14 <fastPowf+0x28>
2400edf4:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
2400edf8:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
2400edfc:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
2400ee00:	330b      	adds	r3, #11
2400ee02:	ee07 3a90 	vmov	s15, r3
2400ee06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400ee0a:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
2400ee0e:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
2400ee12:	4770      	bx	lr
2400ee14:	4e7de250 	.word	0x4e7de250

2400ee18 <LEAF_shaper>:
    if (min > max)
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
2400ee18:	eddf 7a1f 	vldr	s15, [pc, #124]	; 2400ee98 <LEAF_shaper+0x80>
2400ee1c:	eeb4 0ae7 	vcmpe.f32	s0, s15
2400ee20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400ee24:	d406      	bmi.n	2400ee34 <LEAF_shaper+0x1c>
    {
        return tempmin;
    }
    else if (val > tempmax)
2400ee26:	eddf 7a1d 	vldr	s15, [pc, #116]	; 2400ee9c <LEAF_shaper+0x84>
2400ee2a:	eeb4 0ae7 	vcmpe.f32	s0, s15
2400ee2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400ee32:	dd02      	ble.n	2400ee3a <LEAF_shaper+0x22>
2400ee34:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 2400eea0 <LEAF_shaper+0x88>
}
2400ee38:	4770      	bx	lr
    float fx = input * 2.0f;    // prescale
2400ee3a:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2400ee3e:	ed9f 5a19 	vldr	s10, [pc, #100]	; 2400eea4 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
2400ee42:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    shaperOut *= 0.5f;    // post_scale
2400ee46:	ed9f 4a18 	vldr	s8, [pc, #96]	; 2400eea8 <LEAF_shaper+0x90>
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2400ee4a:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
    xc2 = xc*xc;
2400ee4e:	ee60 6a00 	vmul.f32	s13, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2400ee52:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    c = 0.5f*fx*(3.0f - (xc2));
2400ee56:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
2400ee5a:	ee20 0a25 	vmul.f32	s0, s0, s11
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2400ee5e:	eddf 5a13 	vldr	s11, [pc, #76]	; 2400eeac <LEAF_shaper+0x94>
2400ee62:	ee70 0aa4 	vadd.f32	s1, s1, s9
    c = 0.5f*fx*(3.0f - (xc2));
2400ee66:	ee77 7ae6 	vsub.f32	s15, s15, s13
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2400ee6a:	ee66 4aa6 	vmul.f32	s9, s13, s13
2400ee6e:	ee27 7a66 	vnmul.f32	s14, s14, s13
    c = 0.5f*fx*(3.0f - (xc2));
2400ee72:	ee27 0a80 	vmul.f32	s0, s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2400ee76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400ee7a:	eea4 7a85 	vfma.f32	s14, s9, s10
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2400ee7e:	eef0 7a40 	vmov.f32	s15, s0
    shaperOut *= 0.5f;    // post_scale
2400ee82:	ee60 0a84 	vmul.f32	s1, s1, s8
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2400ee86:	eee6 7aa5 	vfma.f32	s15, s13, s11
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2400ee8a:	ee37 0a06 	vadd.f32	s0, s14, s12
    shaperOut *= 0.5f;    // post_scale
2400ee8e:	ee20 0a80 	vmul.f32	s0, s1, s0
2400ee92:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return tempmax;
    }
    else
    {
        return val;
2400ee96:	4770      	bx	lr
2400ee98:	bfb504f3 	.word	0xbfb504f3
2400ee9c:	3fb504f3 	.word	0x3fb504f3
2400eea0:	00000000 	.word	0x00000000
2400eea4:	3c800000 	.word	0x3c800000
2400eea8:	3f272f05 	.word	0x3f272f05
2400eeac:	3d4ccccd 	.word	0x3d4ccccd

2400eeb0 <LEAF_round>:
    rnd = fabsf(rnd);
2400eeb0:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
2400eeb4:	eddf 7a06 	vldr	s15, [pc, #24]	; 2400eed0 <LEAF_round+0x20>
2400eeb8:	eef4 0ae7 	vcmpe.f32	s1, s15
2400eebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400eec0:	d905      	bls.n	2400eece <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
2400eec2:	eec0 7a20 	vdiv.f32	s15, s0, s1
2400eec6:	feb8 0a67 	vrinta.f32	s0, s15
2400eeca:	ee20 0a20 	vmul.f32	s0, s0, s1
}
2400eece:	4770      	bx	lr
2400eed0:	33d6bf95 	.word	0x33d6bf95

2400eed4 <LEAF_bitwise_xor>:
    return unholy.f;
2400eed4:	ee10 3a10 	vmov	r3, s0
2400eed8:	4043      	eors	r3, r0
2400eeda:	ee00 3a10 	vmov	s0, r3
}
2400eede:	4770      	bx	lr

2400eee0 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(float* buffer, float start, float end, float center, int size)
{
2400eee0:	b538      	push	{r3, r4, r5, lr}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
2400eee2:	ee31 1a40 	vsub.f32	s2, s2, s0
{
2400eee6:	460d      	mov	r5, r1
2400eee8:	4604      	mov	r4, r0
2400eeea:	ed2d 8b06 	vpush	{d8-d10}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
2400eeee:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
2400eef2:	eef0 8a40 	vmov.f32	s17, s0
    float skew = logf (0.5) / logf ((center - start) / (end - start));
2400eef6:	ee81 0a29 	vdiv.f32	s0, s2, s19
2400eefa:	f003 ff57 	bl	24012dac <logf>
    float increment = 1.0 / (float)(size-1);
2400eefe:	1e6b      	subs	r3, r5, #1
    float x = 0.0;
    float proportion = 0.0;
    for (int i = 0; i < size; i++)
2400ef00:	2d00      	cmp	r5, #0
    float increment = 1.0 / (float)(size-1);
2400ef02:	ee07 3a90 	vmov	s15, r3
2400ef06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400ef0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400ef0e:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
2400ef12:	dd19      	ble.n	2400ef48 <LEAF_generate_table_skew_non_sym+0x68>
2400ef14:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 2400ef50 <LEAF_generate_table_skew_non_sym+0x70>
2400ef18:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    float x = 0.0;
2400ef1c:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 2400ef54 <LEAF_generate_table_skew_non_sym+0x74>
2400ef20:	ee20 9a09 	vmul.f32	s18, s0, s18
    {
        proportion = expf (logf(x) / skew);
2400ef24:	eeb0 0a48 	vmov.f32	s0, s16
2400ef28:	f003 ff40 	bl	24012dac <logf>
2400ef2c:	ee20 0a09 	vmul.f32	s0, s0, s18
2400ef30:	f003 fec0 	bl	24012cb4 <expf>
        buffer[i] = (float)(start + (end - start) * proportion);
2400ef34:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
2400ef38:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (float)(start + (end - start) * proportion);
2400ef3c:	eee9 7a80 	vfma.f32	s15, s19, s0
2400ef40:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
2400ef44:	42a5      	cmp	r5, r4
2400ef46:	d1ed      	bne.n	2400ef24 <LEAF_generate_table_skew_non_sym+0x44>
    }
}
2400ef48:	ecbd 8b06 	vpop	{d8-d10}
2400ef4c:	bd38      	pop	{r3, r4, r5, pc}
2400ef4e:	bf00      	nop
2400ef50:	bfb8aa3b 	.word	0xbfb8aa3b
2400ef54:	00000000 	.word	0x00000000

2400ef58 <LEAF_interpolation_linear>:
}

// alpha, [0.0, 1.0]
float LEAF_interpolation_linear (float A, float B, float alpha)
{
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
2400ef58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (val < tempmin)
2400ef5c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 2400ef7c <LEAF_interpolation_linear+0x24>
2400ef60:	fe81 1a67 	vminnm.f32	s2, s2, s15
2400ef64:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    
    float omAlpha = 1.0f - alpha;
2400ef68:	ee77 7ac1 	vsub.f32	s15, s15, s2
    
    // First 1/2 of interpolation
    float out = A * omAlpha;
    
    out += B * alpha;
2400ef6c:	ee61 0a20 	vmul.f32	s1, s2, s1
    
    return out;
}
2400ef70:	eee7 0a80 	vfma.f32	s1, s15, s0
2400ef74:	eeb0 0a60 	vmov.f32	s0, s1
2400ef78:	4770      	bx	lr
2400ef7a:	bf00      	nop
2400ef7c:	00000000 	.word	0x00000000

2400ef80 <mtof>:

#define LOGTEN 2.302585092994

float mtof(float f)
{
    if (f <= -1500.0f) return(0);
2400ef80:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 2400efc0 <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
2400ef84:	eddf 7a0f 	vldr	s15, [pc, #60]	; 2400efc4 <mtof+0x44>
2400ef88:	e006      	b.n	2400ef98 <mtof+0x18>
2400ef8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
2400ef8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400ef92:	dd09      	ble.n	2400efa8 <mtof+0x28>
2400ef94:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
2400ef98:	eeb4 0ac7 	vcmpe.f32	s0, s14
2400ef9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400efa0:	d8f3      	bhi.n	2400ef8a <mtof+0xa>
2400efa2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 2400efc8 <mtof+0x48>
    else return (8.17579891564f * expf(0.0577622650f * f));
}
2400efa6:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
2400efa8:	eddf 7a08 	vldr	s15, [pc, #32]	; 2400efcc <mtof+0x4c>
{
2400efac:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
2400efae:	ee20 0a27 	vmul.f32	s0, s0, s15
2400efb2:	f003 fe7f 	bl	24012cb4 <expf>
2400efb6:	eddf 7a06 	vldr	s15, [pc, #24]	; 2400efd0 <mtof+0x50>
2400efba:	ee20 0a27 	vmul.f32	s0, s0, s15
}
2400efbe:	bd08      	pop	{r3, pc}
2400efc0:	c4bb8000 	.word	0xc4bb8000
2400efc4:	44bb6000 	.word	0x44bb6000
2400efc8:	00000000 	.word	0x00000000
2400efcc:	3d6c9820 	.word	0x3d6c9820
2400efd0:	4102d013 	.word	0x4102d013

2400efd4 <fasteratodb>:
float atodb(float a)
{
    return 20.0f*log10f(a);
}
float fasteratodb(float a)
{
2400efd4:	b500      	push	{lr}
2400efd6:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
2400efd8:	eeb0 0ac0 	vabs.f32	s0, s0
2400efdc:	a801      	add	r0, sp, #4
2400efde:	f003 fdb9 	bl	24012b54 <frexpf>
    Y += -4.11852516267426f;
2400efe2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2400f018 <fasteratodb+0x44>
2400efe6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 2400f01c <fasteratodb+0x48>
    Y += 6.02197014179219f;
2400efea:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 2400f020 <fasteratodb+0x4c>
    Y += -4.11852516267426f;
2400efee:	eee0 6a27 	vfma.f32	s13, s0, s15
    Y += E;
2400eff2:	eddd 7a01 	vldr	s15, [sp, #4]
2400eff6:	eddf 5a0b 	vldr	s11, [pc, #44]	; 2400f024 <fasteratodb+0x50>
2400effa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return 20.0f*log10f_fast(a);
2400effe:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 2400f028 <fasteratodb+0x54>
    Y += E;
2400f002:	ee77 7ae5 	vsub.f32	s15, s15, s11
    Y += 6.02197014179219f;
2400f006:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
2400f00a:	eee0 7a07 	vfma.f32	s15, s0, s14
}
2400f00e:	ee27 0a86 	vmul.f32	s0, s15, s12
2400f012:	b003      	add	sp, #12
2400f014:	f85d fb04 	ldr.w	pc, [sp], #4
2400f018:	3f9da1a8 	.word	0x3f9da1a8
2400f01c:	c083caf5 	.word	0xc083caf5
2400f020:	40c0b3fb 	.word	0x40c0b3fb
2400f024:	404892e0 	.word	0x404892e0
2400f028:	40c0a8c2 	.word	0x40c0a8c2

2400f02c <fastdbtoa>:


float fastdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
2400f02c:	eddf 7a02 	vldr	s15, [pc, #8]	; 2400f038 <fastdbtoa+0xc>
2400f030:	ee20 0a27 	vmul.f32	s0, s0, s15
2400f034:	f003 be3e 	b.w	24012cb4 <expf>
2400f038:	3debc8e3 	.word	0x3debc8e3

2400f03c <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
2400f03c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400f040:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 2400f06c <fasterdbtoa+0x30>
2400f044:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
2400f048:	ee27 0aa7 	vmul.f32	s0, s15, s15
2400f04c:	ee20 0a00 	vmul.f32	s0, s0, s0
2400f050:	ee20 0a00 	vmul.f32	s0, s0, s0
2400f054:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
2400f058:	ee20 0a00 	vmul.f32	s0, s0, s0
2400f05c:	ee20 0a00 	vmul.f32	s0, s0, s0
2400f060:	ee20 0a00 	vmul.f32	s0, s0, s0

float fasterdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
2400f064:	ee20 0a00 	vmul.f32	s0, s0, s0
2400f068:	4770      	bx	lr
2400f06a:	bf00      	nop
2400f06c:	39ebc8e3 	.word	0x39ebc8e3

2400f070 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
2400f070:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
2400f074:	4770      	bx	lr
2400f076:	bf00      	nop

2400f078 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
2400f078:	fe80 0ac0 	vminnm.f32	s0, s1, s0
2400f07c:	4770      	bx	lr
2400f07e:	bf00      	nop

2400f080 <leaf_pool_init>:
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
2400f080:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
2400f082:	6a04      	ldr	r4, [r0, #32]
2400f084:	2510      	movs	r5, #16
    pool->usize  = 0;
2400f086:	2300      	movs	r3, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
2400f088:	6365      	str	r5, [r4, #52]	; 0x34
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
2400f08a:	194c      	adds	r4, r1, r5
    pool->msize  = size;
2400f08c:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
2400f08e:	3a10      	subs	r2, #16
    pool->usize  = 0;
2400f090:	e9c0 1309 	strd	r1, r3, [r0, #36]	; 0x24
    node->pool = block_location + header_size;
2400f094:	600c      	str	r4, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
2400f096:	f100 041c 	add.w	r4, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
2400f09a:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
2400f09c:	e9c1 3301 	strd	r3, r3, [r1, #4]
    leaf->mempool = &leaf->_internal_mempool;
2400f0a0:	6184      	str	r4, [r0, #24]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
2400f0a2:	6301      	str	r1, [r0, #48]	; 0x30
}
2400f0a4:	bc30      	pop	{r4, r5}
2400f0a6:	4770      	bx	lr

2400f0a8 <mpool_alloc>:
{
2400f0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    pool->leaf->allocCount++;
2400f0ac:	684d      	ldr	r5, [r1, #4]
    if (pool->head == NULL)
2400f0ae:	694e      	ldr	r6, [r1, #20]
    pool->leaf->allocCount++;
2400f0b0:	6cab      	ldr	r3, [r5, #72]	; 0x48
2400f0b2:	3301      	adds	r3, #1
2400f0b4:	64ab      	str	r3, [r5, #72]	; 0x48
    if (pool->head == NULL)
2400f0b6:	2e00      	cmp	r6, #0
2400f0b8:	d056      	beq.n	2400f168 <mpool_alloc+0xc0>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
2400f0ba:	1dc2      	adds	r2, r0, #7
    while (node_to_alloc->size < size_to_alloc)
2400f0bc:	4634      	mov	r4, r6
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
2400f0be:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
2400f0c2:	e002      	b.n	2400f0ca <mpool_alloc+0x22>
        node_to_alloc = node_to_alloc->next;
2400f0c4:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
2400f0c6:	2c00      	cmp	r4, #0
2400f0c8:	d03d      	beq.n	2400f146 <mpool_alloc+0x9e>
    while (node_to_alloc->size < size_to_alloc)
2400f0ca:	68e3      	ldr	r3, [r4, #12]
2400f0cc:	4293      	cmp	r3, r2
2400f0ce:	d3f9      	bcc.n	2400f0c4 <mpool_alloc+0x1c>
    size_t leftover = node_to_alloc->size - size_to_alloc;
2400f0d0:	1a9f      	subs	r7, r3, r2
    if (leftover > pool->leaf->header_size)
2400f0d2:	6b68      	ldr	r0, [r5, #52]	; 0x34
    node_to_alloc->size = size_to_alloc;
2400f0d4:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
2400f0d6:	42b8      	cmp	r0, r7
2400f0d8:	d242      	bcs.n	2400f160 <mpool_alloc+0xb8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
2400f0da:	f8d1 c008 	ldr.w	ip, [r1, #8]
        new_node = create_node(&pool->mpool[offset],
2400f0de:	1a3b      	subs	r3, r7, r0
        offset += pool->leaf->header_size + node_to_alloc->size;
2400f0e0:	4402      	add	r2, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
2400f0e2:	eba4 070c 	sub.w	r7, r4, ip
        offset += pool->leaf->header_size + node_to_alloc->size;
2400f0e6:	443a      	add	r2, r7
        new_node = create_node(&pool->mpool[offset],
2400f0e8:	eb0c 0702 	add.w	r7, ip, r2
                               node_to_alloc->next,
2400f0ec:	e9d4 8e01 	ldrd	r8, lr, [r4, #4]
    node->pool = block_location + header_size;
2400f0f0:	eb07 0900 	add.w	r9, r7, r0
2400f0f4:	f84c 9002 	str.w	r9, [ip, r2]
    node->size = size;
2400f0f8:	60fb      	str	r3, [r7, #12]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
2400f0fa:	68e3      	ldr	r3, [r4, #12]
    node->next = next;
2400f0fc:	e9c7 8e01 	strd	r8, lr, [r7, #4]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
2400f100:	6862      	ldr	r2, [r4, #4]
    if (pool->head == node_to_alloc)
2400f102:	42a6      	cmp	r6, r4
        pool->head = new_node;
2400f104:	bf08      	it	eq
2400f106:	614f      	streq	r7, [r1, #20]
    if (node->next != NULL)
2400f108:	b10a      	cbz	r2, 2400f10e <mpool_alloc+0x66>
    {
        // Close the link
        node->next->prev = node->prev;
2400f10a:	68a6      	ldr	r6, [r4, #8]
2400f10c:	6096      	str	r6, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
2400f10e:	68a6      	ldr	r6, [r4, #8]
2400f110:	b106      	cbz	r6, 2400f114 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
2400f112:	6072      	str	r2, [r6, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
2400f114:	68ca      	ldr	r2, [r1, #12]
    if (pool->leaf->clearOnAllocation > 0)
2400f116:	696d      	ldr	r5, [r5, #20]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
2400f118:	4402      	add	r2, r0
    }
    
    node->next = NULL;
2400f11a:	2000      	movs	r0, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
2400f11c:	441a      	add	r2, r3
    if (pool->leaf->clearOnAllocation > 0)
2400f11e:	4285      	cmp	r5, r0
    node->prev = NULL;
2400f120:	e9c4 0001 	strd	r0, r0, [r4, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
2400f124:	60ca      	str	r2, [r1, #12]
    if (pool->leaf->clearOnAllocation > 0)
2400f126:	dd0a      	ble.n	2400f13e <mpool_alloc+0x96>
        char* new_pool = (char*)node_to_alloc->pool;
2400f128:	6825      	ldr	r5, [r4, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
2400f12a:	b373      	cbz	r3, 2400f18a <mpool_alloc+0xe2>
2400f12c:	1e6a      	subs	r2, r5, #1
2400f12e:	4613      	mov	r3, r2
2400f130:	f802 0f01 	strb.w	r0, [r2, #1]!
2400f134:	68e1      	ldr	r1, [r4, #12]
2400f136:	3302      	adds	r3, #2
2400f138:	1b5b      	subs	r3, r3, r5
2400f13a:	4299      	cmp	r1, r3
2400f13c:	d8f7      	bhi.n	2400f12e <mpool_alloc+0x86>
    return node_to_alloc->pool;
2400f13e:	6824      	ldr	r4, [r4, #0]
}
2400f140:	4620      	mov	r0, r4
2400f142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if ((pool->msize - pool->usize) > asize)
2400f146:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
2400f14a:	1a9b      	subs	r3, r3, r2
2400f14c:	4283      	cmp	r3, r0
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
2400f14e:	4628      	mov	r0, r5
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
2400f150:	bf8c      	ite	hi
2400f152:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
2400f154:	4621      	movls	r1, r4
2400f156:	f003 fc53 	bl	24012a00 <LEAF_internalErrorCallback>
}
2400f15a:	4620      	mov	r0, r4
2400f15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_node = node_to_alloc->next;
2400f160:	6867      	ldr	r7, [r4, #4]
        node_to_alloc->size += leftover;
2400f162:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
2400f164:	463a      	mov	r2, r7
2400f166:	e7cc      	b.n	2400f102 <mpool_alloc+0x5a>
        if ((pool->msize - pool->usize) > asize)
2400f168:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
2400f16c:	1a9b      	subs	r3, r3, r2
2400f16e:	4283      	cmp	r3, r0
2400f170:	d905      	bls.n	2400f17e <mpool_alloc+0xd6>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
2400f172:	2101      	movs	r1, #1
2400f174:	4628      	mov	r0, r5
        return NULL;
2400f176:	4634      	mov	r4, r6
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
2400f178:	f003 fc42 	bl	24012a00 <LEAF_internalErrorCallback>
2400f17c:	e7e0      	b.n	2400f140 <mpool_alloc+0x98>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
2400f17e:	4631      	mov	r1, r6
2400f180:	4628      	mov	r0, r5
        return NULL;
2400f182:	4634      	mov	r4, r6
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
2400f184:	f003 fc3c 	bl	24012a00 <LEAF_internalErrorCallback>
2400f188:	e7da      	b.n	2400f140 <mpool_alloc+0x98>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
2400f18a:	462c      	mov	r4, r5
    return node_to_alloc->pool;
2400f18c:	e7d8      	b.n	2400f140 <mpool_alloc+0x98>
2400f18e:	bf00      	nop

2400f190 <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
2400f190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
2400f192:	699f      	ldr	r7, [r3, #24]
{
2400f194:	460c      	mov	r4, r1
2400f196:	4606      	mov	r6, r0
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
2400f198:	2018      	movs	r0, #24
2400f19a:	4639      	mov	r1, r7
{
2400f19c:	4615      	mov	r5, r2
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
2400f19e:	f7ff ff83 	bl	2400f0a8 <mpool_alloc>
    m->leaf = mm->leaf;
2400f1a2:	687b      	ldr	r3, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
2400f1a4:	2210      	movs	r2, #16
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
2400f1a6:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
2400f1a8:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
2400f1aa:	635a      	str	r2, [r3, #52]	; 0x34
    pool->usize  = 0;
2400f1ac:	2300      	movs	r3, #0
    pool->msize  = size;
2400f1ae:	6105      	str	r5, [r0, #16]
    node->pool = block_location + header_size;
2400f1b0:	18a2      	adds	r2, r4, r2
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
2400f1b2:	3d10      	subs	r5, #16
    pool->usize  = 0;
2400f1b4:	e9c0 4302 	strd	r4, r3, [r0, #8]
    node->next = next;
2400f1b8:	e9c4 2300 	strd	r2, r3, [r4]
    node->size = size;
2400f1bc:	e9c4 3502 	strd	r3, r5, [r4, #8]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
2400f1c0:	6144      	str	r4, [r0, #20]
}
2400f1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

2400f1c4 <tStack_remove>:
    return added;
}

// Remove noteVal. return 1 if removed, 0 if not
int tStack_remove(tStack* const stack, uint16_t noteVal)
{
2400f1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    _tStack* ns = *stack;
2400f1c8:	6805      	ldr	r5, [r0, #0]
    for (int i = 0; i < ns->size; i++)
2400f1ca:	f8b5 4206 	ldrh.w	r4, [r5, #518]	; 0x206
2400f1ce:	4620      	mov	r0, r4
2400f1d0:	b384      	cbz	r4, 2400f234 <tStack_remove+0x70>
2400f1d2:	462b      	mov	r3, r5
2400f1d4:	2000      	movs	r0, #0
2400f1d6:	e002      	b.n	2400f1de <tStack_remove+0x1a>
2400f1d8:	3001      	adds	r0, #1
2400f1da:	42a0      	cmp	r0, r4
2400f1dc:	d02c      	beq.n	2400f238 <tStack_remove+0x74>
        if (ns->data[i] == noteVal)    return i;
2400f1de:	f853 2f04 	ldr.w	r2, [r3, #4]!
2400f1e2:	428a      	cmp	r2, r1
2400f1e4:	d1f8      	bne.n	2400f1d8 <tStack_remove+0x14>
    int foundIndex = tStack_contains(stack, noteVal);
    int removed = 0;
    
    if (foundIndex >= 0)
    {
        for (k = 0; k < (ns->size - foundIndex); k++)
2400f1e6:	1a26      	subs	r6, r4, r0
2400f1e8:	2e00      	cmp	r6, #0
2400f1ea:	dd28      	ble.n	2400f23e <tStack_remove+0x7a>
        {
            if ((k+foundIndex) >= (ns->capacity - 1))
2400f1ec:	f8b5 e208 	ldrh.w	lr, [r5, #520]	; 0x208
        for (k = 0; k < (ns->size - foundIndex); k++)
2400f1f0:	2200      	movs	r2, #0
2400f1f2:	3c01      	subs	r4, #1
            else
            {
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
                if ((k + foundIndex) == (ns->size - 1))
                {
                    ns->data[k + foundIndex + 1] = -1;
2400f1f4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
            if ((k+foundIndex) >= (ns->capacity - 1))
2400f1f8:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
        for (k = 0; k < (ns->size - foundIndex); k++)
2400f1fc:	4613      	mov	r3, r2
2400f1fe:	e006      	b.n	2400f20e <tStack_remove+0x4a>
2400f200:	3201      	adds	r2, #1
                ns->data[k + foundIndex] = -1;
2400f202:	f8c1 8004 	str.w	r8, [r1, #4]
        for (k = 0; k < (ns->size - foundIndex); k++)
2400f206:	b2d2      	uxtb	r2, r2
2400f208:	42b2      	cmp	r2, r6
2400f20a:	4613      	mov	r3, r2
2400f20c:	da0f      	bge.n	2400f22e <tStack_remove+0x6a>
            if ((k+foundIndex) >= (ns->capacity - 1))
2400f20e:	4403      	add	r3, r0
2400f210:	4573      	cmp	r3, lr
2400f212:	eb05 0183 	add.w	r1, r5, r3, lsl #2
2400f216:	daf3      	bge.n	2400f200 <tStack_remove+0x3c>
        for (k = 0; k < (ns->size - foundIndex); k++)
2400f218:	3201      	adds	r2, #1
                if ((k + foundIndex) == (ns->size - 1))
2400f21a:	42a3      	cmp	r3, r4
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
2400f21c:	688f      	ldr	r7, [r1, #8]
        for (k = 0; k < (ns->size - foundIndex); k++)
2400f21e:	b2d2      	uxtb	r2, r2
                    ns->data[k + foundIndex + 1] = -1;
2400f220:	bf08      	it	eq
2400f222:	f8c1 8008 	streq.w	r8, [r1, #8]
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
2400f226:	604f      	str	r7, [r1, #4]
        for (k = 0; k < (ns->size - foundIndex); k++)
2400f228:	42b2      	cmp	r2, r6
2400f22a:	4613      	mov	r3, r2
2400f22c:	dbef      	blt.n	2400f20e <tStack_remove+0x4a>
            
        }
        // in case it got put on the stack multiple times
        foundIndex--;
        ns->size--;
        removed = 1;
2400f22e:	2001      	movs	r0, #1
        ns->size--;
2400f230:	f8a5 4206 	strh.w	r4, [r5, #518]	; 0x206
    }
    
    return removed;
}
2400f234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int removed = 0;
2400f238:	2000      	movs	r0, #0
}
2400f23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2400f23e:	3c01      	subs	r4, #1
2400f240:	e7f5      	b.n	2400f22e <tStack_remove+0x6a>
2400f242:	bf00      	nop

2400f244 <tSimplePoly_noteOn>:
    mpool_free((char*)poly->voices, poly->mempool);
    mpool_free((char*)poly, poly->mempool);
}

int tSimplePoly_noteOn(tSimplePoly* const polyh, int note, uint8_t vel)
{
2400f244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tSimplePoly* poly = *polyh;
2400f248:	f8d0 e000 	ldr.w	lr, [r0]
{
2400f24c:	4694      	mov	ip, r2
    _tStack* ns = *stack;
2400f24e:	f8de 4004 	ldr.w	r4, [lr, #4]
    for (int i = 0; i < ns->size; i++)
2400f252:	f8b4 5206 	ldrh.w	r5, [r4, #518]	; 0x206
2400f256:	b175      	cbz	r5, 2400f276 <tSimplePoly_noteOn+0x32>
2400f258:	b28e      	uxth	r6, r1
2400f25a:	4620      	mov	r0, r4
2400f25c:	2300      	movs	r3, #0
2400f25e:	e001      	b.n	2400f264 <tSimplePoly_noteOn+0x20>
2400f260:	42ab      	cmp	r3, r5
2400f262:	d008      	beq.n	2400f276 <tSimplePoly_noteOn+0x32>
        if (ns->data[i] == noteVal)    return i;
2400f264:	f850 7f04 	ldr.w	r7, [r0, #4]!
    for (int i = 0; i < ns->size; i++)
2400f268:	3301      	adds	r3, #1
        if (ns->data[i] == noteVal)    return i;
2400f26a:	42b7      	cmp	r7, r6
2400f26c:	d1f8      	bne.n	2400f260 <tSimplePoly_noteOn+0x1c>
    int whichVoice, whichNote, oldNote, alteredVoice;
    // if not in keymap or already on stack, dont do anything. else, add that note.
    if (tStack_contains(&poly->stack, note) >= 0) return -1;
2400f26e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                }
            }
        }
        return alteredVoice;
    }
}
2400f272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        for (int i = 0; i < poly->numVoices; i++)
2400f276:	f8de 7008 	ldr.w	r7, [lr, #8]
2400f27a:	2f00      	cmp	r7, #0
2400f27c:	dd46      	ble.n	2400f30c <tSimplePoly_noteOn+0xc8>
2400f27e:	f8de 3010 	ldr.w	r3, [lr, #16]
            if (poly->voices[i][0] == -1)    // if inactive voice, give this note to voice
2400f282:	2000      	movs	r0, #0
2400f284:	f1a3 0804 	sub.w	r8, r3, #4
2400f288:	4646      	mov	r6, r8
2400f28a:	e002      	b.n	2400f292 <tSimplePoly_noteOn+0x4e>
        for (int i = 0; i < poly->numVoices; i++)
2400f28c:	3001      	adds	r0, #1
2400f28e:	42b8      	cmp	r0, r7
2400f290:	d07f      	beq.n	2400f392 <tSimplePoly_noteOn+0x14e>
            if (poly->voices[i][0] == -1)    // if inactive voice, give this note to voice
2400f292:	f856 3f04 	ldr.w	r3, [r6, #4]!
2400f296:	681a      	ldr	r2, [r3, #0]
2400f298:	3201      	adds	r2, #1
2400f29a:	d1f7      	bne.n	2400f28c <tSimplePoly_noteOn+0x48>
                poly->notes[note][0] = i;
2400f29c:	eb0e 06c1 	add.w	r6, lr, r1, lsl #3
                poly->voices[i][1] = vel;
2400f2a0:	e9c3 1c00 	strd	r1, ip, [r3]
                poly->notes[note][0] = i;
2400f2a4:	61f0      	str	r0, [r6, #28]
                poly->notes[note][1] = vel;
2400f2a6:	46b6      	mov	lr, r6
2400f2a8:	f8c6 c020 	str.w	ip, [r6, #32]
                poly->voices[i][2] = note; // voices[i][2] is the output midi note, (avoiding the -1 when a voice is inactive)
2400f2ac:	b28e      	uxth	r6, r1
2400f2ae:	6099      	str	r1, [r3, #8]
    if (ns->ordered)
2400f2b0:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
2400f2b4:	b19b      	cbz	r3, 2400f2de <tSimplePoly_noteOn+0x9a>
        for (j = 0; j < ns->size; j++)
2400f2b6:	b195      	cbz	r5, 2400f2de <tSimplePoly_noteOn+0x9a>
2400f2b8:	2200      	movs	r2, #0
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
2400f2ba:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
2400f2be:	1c53      	adds	r3, r2, #1
            if (noteVal > ns->data[j])
2400f2c0:	f8dc 7004 	ldr.w	r7, [ip, #4]
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
2400f2c4:	4619      	mov	r1, r3
            if (noteVal > ns->data[j])
2400f2c6:	42b7      	cmp	r7, r6
2400f2c8:	da05      	bge.n	2400f2d6 <tSimplePoly_noteOn+0x92>
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
2400f2ca:	f8dc 2008 	ldr.w	r2, [ip, #8]
2400f2ce:	42b2      	cmp	r2, r6
2400f2d0:	dc06      	bgt.n	2400f2e0 <tSimplePoly_noteOn+0x9c>
2400f2d2:	3201      	adds	r2, #1
2400f2d4:	d004      	beq.n	2400f2e0 <tSimplePoly_noteOn+0x9c>
        for (j = 0; j < ns->size; j++)
2400f2d6:	b2d9      	uxtb	r1, r3
2400f2d8:	42a9      	cmp	r1, r5
2400f2da:	460a      	mov	r2, r1
2400f2dc:	d3ed      	bcc.n	2400f2ba <tSimplePoly_noteOn+0x76>
    int whereToInsert = 0;
2400f2de:	2100      	movs	r1, #0
    for (j = ns->size; j > whereToInsert; j--)
2400f2e0:	b2eb      	uxtb	r3, r5
2400f2e2:	428b      	cmp	r3, r1
2400f2e4:	dd0a      	ble.n	2400f2fc <tSimplePoly_noteOn+0xb8>
2400f2e6:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
2400f2ea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
        ns->data[j] = ns->data[(j - 1)];
2400f2ee:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
    for (j = ns->size; j > whereToInsert; j--)
2400f2f2:	fa5f f38c 	uxtb.w	r3, ip
        ns->data[j] = ns->data[(j - 1)];
2400f2f6:	6057      	str	r7, [r2, #4]
    for (j = ns->size; j > whereToInsert; j--)
2400f2f8:	428b      	cmp	r3, r1
2400f2fa:	dcf4      	bgt.n	2400f2e6 <tSimplePoly_noteOn+0xa2>
    ns->data[whereToInsert] = noteVal;
2400f2fc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    ns->size++;
2400f300:	3501      	adds	r5, #1
    ns->data[whereToInsert] = noteVal;
2400f302:	604e      	str	r6, [r1, #4]
    ns->size++;
2400f304:	f8a4 5206 	strh.w	r5, [r4, #518]	; 0x206
}
2400f308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((!found) && (poly->stealing_on)) //steal
2400f30c:	f8de 3014 	ldr.w	r3, [lr, #20]
2400f310:	2b00      	cmp	r3, #0
2400f312:	d0ac      	beq.n	2400f26e <tSimplePoly_noteOn+0x2a>
            for (int j = tStack_getSize(&poly->stack) - 1; j >= 0; j--)
2400f314:	1e68      	subs	r0, r5, #1
2400f316:	2d00      	cmp	r5, #0
2400f318:	d0ab      	beq.n	2400f272 <tSimplePoly_noteOn+0x2e>
2400f31a:	eb04 0685 	add.w	r6, r4, r5, lsl #2
2400f31e:	e001      	b.n	2400f324 <tSimplePoly_noteOn+0xe0>
2400f320:	1c43      	adds	r3, r0, #1
2400f322:	d0a6      	beq.n	2400f272 <tSimplePoly_noteOn+0x2e>
    return ns->data[which];
2400f324:	f856 3904 	ldr.w	r3, [r6], #-4
            for (int j = tStack_getSize(&poly->stack) - 1; j >= 0; j--)
2400f328:	3801      	subs	r0, #1
                whichVoice = poly->notes[whichNote][0];
2400f32a:	eb0e 03c3 	add.w	r3, lr, r3, lsl #3
2400f32e:	69df      	ldr	r7, [r3, #28]
                if (whichVoice >= 0)
2400f330:	2f00      	cmp	r7, #0
2400f332:	dbf5      	blt.n	2400f320 <tSimplePoly_noteOn+0xdc>
                    oldNote = poly->voices[whichVoice][0];
2400f334:	f8de 3010 	ldr.w	r3, [lr, #16]
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
2400f338:	f06f 0602 	mvn.w	r6, #2
                    oldNote = poly->voices[whichVoice][0];
2400f33c:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
2400f340:	6818      	ldr	r0, [r3, #0]
                    poly->voices[whichVoice][1] = vel;
2400f342:	f8c3 c004 	str.w	ip, [r3, #4]
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
2400f346:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
                    poly->voices[whichVoice][0] = note;
2400f34a:	6019      	str	r1, [r3, #0]
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
2400f34c:	61c6      	str	r6, [r0, #28]
                    poly->notes[note][0] = whichVoice;
2400f34e:	eb0e 00c1 	add.w	r0, lr, r1, lsl #3
2400f352:	61c7      	str	r7, [r0, #28]
                    poly->notes[note][1] = vel;
2400f354:	f8c0 c020 	str.w	ip, [r0, #32]
                    poly->voices[whichVoice][2] = note;
2400f358:	6099      	str	r1, [r3, #8]
    if (ns->ordered)
2400f35a:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
2400f35e:	2b00      	cmp	r3, #0
2400f360:	d058      	beq.n	2400f414 <tSimplePoly_noteOn+0x1d0>
        for (j = 0; j < ns->size; j++)
2400f362:	2d00      	cmp	r5, #0
2400f364:	d06e      	beq.n	2400f444 <tSimplePoly_noteOn+0x200>
2400f366:	b28e      	uxth	r6, r1
2400f368:	2200      	movs	r2, #0
2400f36a:	46b6      	mov	lr, r6
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
2400f36c:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
2400f370:	1c53      	adds	r3, r2, #1
            if (noteVal > ns->data[j])
2400f372:	f8dc 1004 	ldr.w	r1, [ip, #4]
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
2400f376:	4618      	mov	r0, r3
            if (noteVal > ns->data[j])
2400f378:	42b1      	cmp	r1, r6
2400f37a:	da05      	bge.n	2400f388 <tSimplePoly_noteOn+0x144>
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
2400f37c:	f8dc 2008 	ldr.w	r2, [ip, #8]
2400f380:	42b2      	cmp	r2, r6
2400f382:	dc4a      	bgt.n	2400f41a <tSimplePoly_noteOn+0x1d6>
2400f384:	3201      	adds	r2, #1
2400f386:	d048      	beq.n	2400f41a <tSimplePoly_noteOn+0x1d6>
        for (j = 0; j < ns->size; j++)
2400f388:	b2d8      	uxtb	r0, r3
2400f38a:	42a8      	cmp	r0, r5
2400f38c:	4602      	mov	r2, r0
2400f38e:	d3ed      	bcc.n	2400f36c <tSimplePoly_noteOn+0x128>
2400f390:	e041      	b.n	2400f416 <tSimplePoly_noteOn+0x1d2>
2400f392:	2000      	movs	r0, #0
2400f394:	e002      	b.n	2400f39c <tSimplePoly_noteOn+0x158>
            for (int i = 0 ; i < poly->numVoices; i++)
2400f396:	3001      	adds	r0, #1
2400f398:	42b8      	cmp	r0, r7
2400f39a:	d0b7      	beq.n	2400f30c <tSimplePoly_noteOn+0xc8>
                if (poly->voices[i][0] == -2)    // if voice is released but still sounding, take over this voice
2400f39c:	f858 6f04 	ldr.w	r6, [r8, #4]!
2400f3a0:	6833      	ldr	r3, [r6, #0]
2400f3a2:	3302      	adds	r3, #2
2400f3a4:	d1f7      	bne.n	2400f396 <tSimplePoly_noteOn+0x152>
                    poly->notes[note][0] = i;
2400f3a6:	eb0e 03c1 	add.w	r3, lr, r1, lsl #3
                    poly->voices[i][1] = vel;
2400f3aa:	e9c6 1c00 	strd	r1, ip, [r6]
                    poly->notes[note][1] = vel;
2400f3ae:	469e      	mov	lr, r3
                    poly->notes[note][0] = i;
2400f3b0:	61d8      	str	r0, [r3, #28]
                    poly->notes[note][1] = vel;
2400f3b2:	f8c3 c020 	str.w	ip, [r3, #32]
                    poly->voices[i][2] = note; // voices[i][2] is the output midi note, (avoiding the -1 when a voice is inactive)
2400f3b6:	60b1      	str	r1, [r6, #8]
    if (ns->ordered)
2400f3b8:	b28e      	uxth	r6, r1
2400f3ba:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
2400f3be:	b19b      	cbz	r3, 2400f3e8 <tSimplePoly_noteOn+0x1a4>
        for (j = 0; j < ns->size; j++)
2400f3c0:	b195      	cbz	r5, 2400f3e8 <tSimplePoly_noteOn+0x1a4>
2400f3c2:	2200      	movs	r2, #0
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
2400f3c4:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
2400f3c8:	1c53      	adds	r3, r2, #1
            if (noteVal > ns->data[j])
2400f3ca:	f8dc 7004 	ldr.w	r7, [ip, #4]
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
2400f3ce:	4619      	mov	r1, r3
            if (noteVal > ns->data[j])
2400f3d0:	42b7      	cmp	r7, r6
2400f3d2:	da05      	bge.n	2400f3e0 <tSimplePoly_noteOn+0x19c>
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
2400f3d4:	f8dc 2008 	ldr.w	r2, [ip, #8]
2400f3d8:	1c57      	adds	r7, r2, #1
2400f3da:	d006      	beq.n	2400f3ea <tSimplePoly_noteOn+0x1a6>
2400f3dc:	42b2      	cmp	r2, r6
2400f3de:	dc04      	bgt.n	2400f3ea <tSimplePoly_noteOn+0x1a6>
        for (j = 0; j < ns->size; j++)
2400f3e0:	b2d9      	uxtb	r1, r3
2400f3e2:	42a9      	cmp	r1, r5
2400f3e4:	460a      	mov	r2, r1
2400f3e6:	d3ed      	bcc.n	2400f3c4 <tSimplePoly_noteOn+0x180>
    int whereToInsert = 0;
2400f3e8:	2100      	movs	r1, #0
    for (j = ns->size; j > whereToInsert; j--)
2400f3ea:	b2eb      	uxtb	r3, r5
2400f3ec:	4299      	cmp	r1, r3
2400f3ee:	da85      	bge.n	2400f2fc <tSimplePoly_noteOn+0xb8>
2400f3f0:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
2400f3f4:	eb04 0283 	add.w	r2, r4, r3, lsl #2
        ns->data[j] = ns->data[(j - 1)];
2400f3f8:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
    for (j = ns->size; j > whereToInsert; j--)
2400f3fc:	fa5f f38c 	uxtb.w	r3, ip
        ns->data[j] = ns->data[(j - 1)];
2400f400:	6057      	str	r7, [r2, #4]
    for (j = ns->size; j > whereToInsert; j--)
2400f402:	428b      	cmp	r3, r1
2400f404:	dcf4      	bgt.n	2400f3f0 <tSimplePoly_noteOn+0x1ac>
    ns->data[whereToInsert] = noteVal;
2400f406:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    ns->size++;
2400f40a:	3501      	adds	r5, #1
    ns->data[whereToInsert] = noteVal;
2400f40c:	604e      	str	r6, [r1, #4]
    ns->size++;
2400f40e:	f8a4 5206 	strh.w	r5, [r4, #518]	; 0x206
2400f412:	e779      	b.n	2400f308 <tSimplePoly_noteOn+0xc4>
2400f414:	b28e      	uxth	r6, r1
2400f416:	46b6      	mov	lr, r6
    int whereToInsert = 0;
2400f418:	2000      	movs	r0, #0
    for (j = ns->size; j > whereToInsert; j--)
2400f41a:	b2eb      	uxtb	r3, r5
2400f41c:	4298      	cmp	r0, r3
2400f41e:	da08      	bge.n	2400f432 <tSimplePoly_noteOn+0x1ee>
2400f420:	1e5a      	subs	r2, r3, #1
2400f422:	eb04 0683 	add.w	r6, r4, r3, lsl #2
        ns->data[j] = ns->data[(j - 1)];
2400f426:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
2400f42a:	6073      	str	r3, [r6, #4]
    for (j = ns->size; j > whereToInsert; j--)
2400f42c:	b2d3      	uxtb	r3, r2
2400f42e:	4283      	cmp	r3, r0
2400f430:	dcf6      	bgt.n	2400f420 <tSimplePoly_noteOn+0x1dc>
    ns->data[whereToInsert] = noteVal;
2400f432:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    ns->size++;
2400f436:	3501      	adds	r5, #1
                whichVoice = poly->notes[whichNote][0];
2400f438:	4638      	mov	r0, r7
    ns->data[whereToInsert] = noteVal;
2400f43a:	f8c3 e004 	str.w	lr, [r3, #4]
    ns->size++;
2400f43e:	f8a4 5206 	strh.w	r5, [r4, #518]	; 0x206
}
2400f442:	e716      	b.n	2400f272 <tSimplePoly_noteOn+0x2e>
2400f444:	fa1f fe81 	uxth.w	lr, r1
    int whereToInsert = 0;
2400f448:	4628      	mov	r0, r5
2400f44a:	e7f2      	b.n	2400f432 <tSimplePoly_noteOn+0x1ee>

2400f44c <tSimplePoly_noteOff>:



int tSimplePoly_noteOff(tSimplePoly* const polyh, uint8_t note)
{
2400f44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tSimplePoly* poly = *polyh;
2400f44e:	6805      	ldr	r5, [r0, #0]
{
2400f450:	460c      	mov	r4, r1
    int16_t noteToTest = -1;

    tStack_remove(&poly->stack, note);
2400f452:	1d28      	adds	r0, r5, #4
2400f454:	f7ff feb6 	bl	2400f1c4 <tStack_remove>
    poly->notes[note][0] = -1;

    int deactivatedVoice = -1;
    for (int i = 0; i < poly->maxNumVoices; i++)
2400f458:	68e9      	ldr	r1, [r5, #12]
    poly->notes[note][0] = -1;
2400f45a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
2400f45e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    for (int i = 0; i < poly->maxNumVoices; i++)
2400f462:	2900      	cmp	r1, #0
    poly->notes[note][0] = -1;
2400f464:	61d8      	str	r0, [r3, #28]
    for (int i = 0; i < poly->maxNumVoices; i++)
2400f466:	dd2d      	ble.n	2400f4c4 <tSimplePoly_noteOff+0x78>
2400f468:	692b      	ldr	r3, [r5, #16]
2400f46a:	2000      	movs	r0, #0
2400f46c:	3b04      	subs	r3, #4
2400f46e:	e002      	b.n	2400f476 <tSimplePoly_noteOff+0x2a>
2400f470:	3001      	adds	r0, #1
2400f472:	4288      	cmp	r0, r1
2400f474:	d024      	beq.n	2400f4c0 <tSimplePoly_noteOff+0x74>
    {
        if (poly->voices[i][0] == note)
2400f476:	f853 2f04 	ldr.w	r2, [r3, #4]!
2400f47a:	6816      	ldr	r6, [r2, #0]
2400f47c:	42b4      	cmp	r4, r6
2400f47e:	d1f7      	bne.n	2400f470 <tSimplePoly_noteOff+0x24>
        {
            poly->voices[i][0] = -1;
            poly->voices[i][1] = 0;
2400f480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400f484:	2400      	movs	r4, #0
2400f486:	e9c2 3400 	strd	r3, r4, [r2]
            deactivatedVoice = i;
            break;
        }
    }

    if (poly->recover_stolen)
2400f48a:	69ab      	ldr	r3, [r5, #24]
2400f48c:	b1d3      	cbz	r3, 2400f4c4 <tSimplePoly_noteOff+0x78>
    _tStack* ns = *stack;
2400f48e:	686b      	ldr	r3, [r5, #4]
    return ns->size;
2400f490:	f8b3 6206 	ldrh.w	r6, [r3, #518]	; 0x206
    {
        //grab old notes off the stack if there are notes waiting to replace the free voice
        if (deactivatedVoice >= 0)
        {
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
2400f494:	b1b6      	cbz	r6, 2400f4c4 <tSimplePoly_noteOff+0x78>
2400f496:	469c      	mov	ip, r3
2400f498:	e001      	b.n	2400f49e <tSimplePoly_noteOff+0x52>
2400f49a:	42b4      	cmp	r4, r6
2400f49c:	d012      	beq.n	2400f4c4 <tSimplePoly_noteOff+0x78>
            {
                noteToTest = tStack_get(&poly->stack, j);
2400f49e:	f85c 3f04 	ldr.w	r3, [ip, #4]!
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
2400f4a2:	3401      	adds	r4, #1

                if (poly->notes[noteToTest][0] == -3) //if there is a stolen note waiting (marked inactive but on the stack)
2400f4a4:	b21b      	sxth	r3, r3
2400f4a6:	1cd9      	adds	r1, r3, #3
2400f4a8:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
2400f4ac:	684f      	ldr	r7, [r1, #4]
2400f4ae:	3703      	adds	r7, #3
2400f4b0:	d1f3      	bne.n	2400f49a <tSimplePoly_noteOff+0x4e>
                {
                    poly->voices[deactivatedVoice][0] = noteToTest; //set the newly free voice to use the old stolen note
                    poly->voices[deactivatedVoice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
2400f4b2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
                    poly->voices[deactivatedVoice][0] = noteToTest; //set the newly free voice to use the old stolen note
2400f4b6:	6013      	str	r3, [r2, #0]
                    poly->voices[deactivatedVoice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
2400f4b8:	6a2c      	ldr	r4, [r5, #32]
2400f4ba:	e9c2 4301 	strd	r4, r3, [r2, #4]
                    poly->voices[deactivatedVoice][2] = noteToTest;
                    poly->notes[noteToTest][0] = deactivatedVoice; //mark that it is no longer stolen and is now active
2400f4be:	6048      	str	r0, [r1, #4]
                    return -1;
2400f4c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                }
            }
        }
    }
    return deactivatedVoice;
}
2400f4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400f4c6:	bf00      	nop

2400f4c8 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
2400f4c8:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
2400f4ca:	698c      	ldr	r4, [r1, #24]
{
2400f4cc:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
2400f4ce:	2018      	movs	r0, #24
2400f4d0:	4621      	mov	r1, r4
2400f4d2:	f7ff fde9 	bl	2400f0a8 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
2400f4d6:	6862      	ldr	r2, [r4, #4]
    
    c->inc      =  0;
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2400f4d8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 2400f4fc <tCycle_init+0x34>
    c->inc      =  0;
2400f4dc:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2400f4de:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
2400f4e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
2400f4e6:	6028      	str	r0, [r5, #0]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2400f4e8:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->mempool = m;
2400f4ec:	6004      	str	r4, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
2400f4ee:	6142      	str	r2, [r0, #20]
    c->phase    =  0;
2400f4f0:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2400f4f4:	edc0 7a04 	vstr	s15, [r0, #16]
}
2400f4f8:	bd38      	pop	{r3, r4, r5, pc}
2400f4fa:	bf00      	nop
2400f4fc:	4f800000 	.word	0x4f800000

2400f500 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
2400f500:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
2400f502:	4910      	ldr	r1, [pc, #64]	; (2400f544 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
2400f504:	ed9f 7a10 	vldr	s14, [pc, #64]	; 2400f548 <tCycle_tick+0x48>
    c->phase += c->inc;
2400f508:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
2400f50c:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
2400f50e:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
2400f510:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
2400f512:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
2400f516:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
2400f518:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
2400f51c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
2400f520:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
2400f522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
2400f526:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
2400f52a:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
2400f52c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
2400f530:	ee67 7a87 	vmul.f32	s15, s15, s14
2400f534:	ed92 7a00 	vldr	s14, [r2]
2400f538:	ee37 7a40 	vsub.f32	s14, s14, s0
}
2400f53c:	eea7 0a27 	vfma.f32	s0, s14, s15
2400f540:	4770      	bx	lr
2400f542:	bf00      	nop
2400f544:	24018588 	.word	0x24018588
2400f548:	35000004 	.word	0x35000004

2400f54c <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
2400f54c:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2400f54e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
2400f552:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2400f556:	ee20 0a27 	vmul.f32	s0, s0, s15
2400f55a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2400f55e:	ed83 0a02 	vstr	s0, [r3, #8]
}
2400f562:	4770      	bx	lr

2400f564 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, float phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
2400f564:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
2400f568:	ed9f 7a06 	vldr	s14, [pc, #24]	; 2400f584 <tCycle_setPhase+0x20>
2400f56c:	6803      	ldr	r3, [r0, #0]
    phase -= i;
2400f56e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400f572:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
2400f576:	ee20 0a07 	vmul.f32	s0, s0, s14
2400f57a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2400f57e:	ed83 0a01 	vstr	s0, [r3, #4]
}
2400f582:	4770      	bx	lr
2400f584:	4f800000 	.word	0x4f800000

2400f588 <tMBPulse_tick>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}


float tMBPulse_tick(tMBPulse* const osc)
{
2400f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _tMBPulse* c = *osc;
2400f58c:	6804      	ldr	r4, [r0, #0]
{
2400f58e:	ed2d 8b0a 	vpush	{d8-d12}
    
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    
    sync = c->sync;
2400f592:	ed94 8a05 	vldr	s16, [r4, #20]
{
2400f596:	b083      	sub	sp, #12


    p = c->_p;  /* phase [0, 1) */
2400f598:	ed94 7a08 	vldr	s14, [r4, #32]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2400f59c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    w = c->_w;  /* phase increment */
2400f5a0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    b = c->_b;  /* duty cycle (0, 1) */
2400f5a4:	edd4 aa0a 	vldr	s21, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
2400f5a8:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2400f5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    z = c->_z;  /* low pass filter state */
2400f5b0:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
2400f5b4:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2400f5b8:	dd63      	ble.n	2400f682 <tMBPulse_tick+0xfa>
2400f5ba:	f8d4 801c 	ldr.w	r8, [r4, #28]
2400f5be:	f1b8 0f00 	cmp.w	r8, #0
2400f5c2:	dd2e      	ble.n	2400f622 <tMBPulse_tick+0x9a>
2400f5c4:	edd4 6a06 	vldr	s13, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
2400f5c8:	ed94 9a0d 	vldr	s18, [r4, #52]	; 0x34
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2400f5cc:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
2400f5d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2400f5d4:	edc4 6a06 	vstr	s13, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
2400f5d8:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
2400f5dc:	eebd 8ae7 	vcvt.s32.f32	s16, s15
2400f5e0:	ee37 7a27 	vadd.f32	s14, s14, s15
2400f5e4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
2400f5e8:	ee37 8a48 	vsub.f32	s16, s14, s16
                x = 0.5f;
            }
        }
    } else if (!k) {  /* normal operation, signal currently high */
        
        if (sw > 0)
2400f5ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    } else if (!k) {  /* normal operation, signal currently high */
2400f5f0:	2f00      	cmp	r7, #0
2400f5f2:	d15a      	bne.n	2400f6aa <tMBPulse_tick+0x122>
        if (sw > 0)
2400f5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f5f8:	f340 81c2 	ble.w	2400f980 <tMBPulse_tick+0x3f8>
        {
            if (p >= b) {
2400f5fc:	eef4 aac8 	vcmpe.f32	s21, s16
2400f600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f604:	f240 8154 	bls.w	2400f8b0 <tMBPulse_tick+0x328>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f608:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
2400f60c:	463b      	mov	r3, r7
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
                k = 1;
                x = -0.5f;
            }
            if (p >= 1.0f) {
2400f60e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
2400f612:	eeb4 8ae8 	vcmpe.f32	s16, s17
2400f616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f61a:	f280 8266 	bge.w	2400faea <tMBPulse_tick+0x562>
2400f61e:	461f      	mov	r7, r3
2400f620:	e051      	b.n	2400f6c6 <tMBPulse_tick+0x13e>
    sw = w * c->syncdir;
2400f622:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
2400f626:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
2400f62a:	ee67 7a89 	vmul.f32	s15, s15, s18
    float inv_sw = c->_inv_w * c->syncdir;
2400f62e:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
2400f632:	eefd 8ae7 	vcvt.s32.f32	s17, s15
2400f636:	ee37 7a27 	vadd.f32	s14, s14, s15
2400f63a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
2400f63e:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
2400f642:	f040 84dd 	bne.w	24010000 <tMBPulse_tick+0xa78>
        if (sw > 0) p = eof_offset;
2400f646:	eef5 7ac0 	vcmpe.f32	s15, #0.0
        float eof_offset = sync * sw;
2400f64a:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (sw > 0) p = eof_offset;
2400f64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
2400f652:	ee38 aac8 	vsub.f32	s20, s17, s16
        if (sw > 0) p = eof_offset;
2400f656:	f340 80c7 	ble.w	2400f7e8 <tMBPulse_tick+0x260>
        if (!k) {
2400f65a:	2f00      	cmp	r7, #0
2400f65c:	f040 8208 	bne.w	2400fa70 <tMBPulse_tick+0x4e8>
                if (p_at_reset >= b) {
2400f660:	eef4 aaca 	vcmpe.f32	s21, s20
2400f664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f668:	f240 8395 	bls.w	2400fd96 <tMBPulse_tick+0x80e>
                if (p_at_reset >= 1.0f) {
2400f66c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400f670:	eeb4 aae7 	vcmpe.f32	s20, s15
2400f674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f678:	f280 8287 	bge.w	2400fb8a <tMBPulse_tick+0x602>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f67c:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
2400f680:	e22c      	b.n	2400fadc <tMBPulse_tick+0x554>
    sw = w * c->syncdir;
2400f682:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
2400f686:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
2400f68a:	ee67 7a89 	vmul.f32	s15, s15, s18
    float inv_sw = c->_inv_w * c->syncdir;
2400f68e:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
2400f692:	eebd 8ae7 	vcvt.s32.f32	s16, s15
2400f696:	ee37 7a87 	vadd.f32	s14, s15, s14
        if (sw > 0)
2400f69a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
2400f69e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
2400f6a2:	ee37 8a48 	vsub.f32	s16, s14, s16
    } else if (!k) {  /* normal operation, signal currently high */
2400f6a6:	2f00      	cmp	r7, #0
2400f6a8:	d0a4      	beq.n	2400f5f4 <tMBPulse_tick+0x6c>
            }
        }
        
    } else {  /* normal operation, signal currently low */
        
        if (sw > 0)
2400f6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f6ae:	f340 8132 	ble.w	2400f916 <tMBPulse_tick+0x38e>
        {
            if (p >= 1.0f) {
2400f6b2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
2400f6b6:	eeb4 8ae8 	vcmpe.f32	s16, s17
2400f6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f6be:	f280 809a 	bge.w	2400f7f6 <tMBPulse_tick+0x26e>

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    
    c->_f[currentSamp] = x;

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
2400f6c2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
2400f6c6:	1d33      	adds	r3, r6, #4
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
2400f6c8:	b2ea      	uxtb	r2, r5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
2400f6ca:	f003 0307 	and.w	r3, r3, #7
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
2400f6ce:	f88d 2005 	strb.w	r2, [sp, #5]
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
2400f6d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c->_f[currentSamp] = x;
2400f6d6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
2400f6da:	edc3 5a10 	vstr	s11, [r3, #64]	; 0x40
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
2400f6de:	2a00      	cmp	r2, #0
2400f6e0:	f000 81bb 	beq.w	2400fa5a <tMBPulse_tick+0x4d2>
2400f6e4:	eb04 0986 	add.w	r9, r4, r6, lsl #2
	{
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
2400f6e8:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

		//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2400f6ec:	f8b4 e064 	ldrh.w	lr, [r4, #100]	; 0x64
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
2400f6f0:	f04f 0c00 	mov.w	ip, #0
2400f6f4:	ed99 7a10 	vldr	s14, [r9, #64]	; 0x40
2400f6f8:	4dda      	ldr	r5, [pc, #872]	; (2400fa64 <tMBPulse_tick+0x4dc>)
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
2400f6fa:	eba8 030c 	sub.w	r3, r8, ip
2400f6fe:	b29b      	uxth	r3, r3
2400f700:	f8ad 3006 	strh.w	r3, [sp, #6]
		whichBLEP &= 63;
2400f704:	f8bd 3006 	ldrh.w	r3, [sp, #6]
2400f708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400f70c:	f8ad 3006 	strh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2400f710:	f8bd 1006 	ldrh.w	r1, [sp, #6]
2400f714:	f8bd 2006 	ldrh.w	r2, [sp, #6]
2400f718:	f8bd 0006 	ldrh.w	r0, [sp, #6]
2400f71c:	b289      	uxth	r1, r1
2400f71e:	f8bd a006 	ldrh.w	sl, [sp, #6]
2400f722:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2400f724:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2400f728:	b280      	uxth	r0, r0
2400f72a:	fa1f fa8a 	uxth.w	sl, sl
2400f72e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
2400f732:	eb04 0a4a 	add.w	sl, r4, sl, lsl #1
2400f736:	f8b2 b066 	ldrh.w	fp, [r2, #102]	; 0x66
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2400f73a:	b29b      	uxth	r3, r3
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2400f73c:	f8ba a066 	ldrh.w	sl, [sl, #102]	; 0x66
2400f740:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
2400f744:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2400f748:	f8bd 2006 	ldrh.w	r2, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2400f74c:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
2400f750:	ed90 6a3a 	vldr	s12, [r0, #232]	; 0xe8
2400f754:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2400f758:	f8b3 0066 	ldrh.w	r0, [r3, #102]	; 0x66
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2400f75c:	eddb 7a00 	vldr	s15, [fp]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2400f760:	b292      	uxth	r2, r2
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2400f762:	edda 6a01 	vldr	s13, [sl, #4]
2400f766:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2400f76a:	3040      	adds	r0, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2400f76c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2400f770:	eee6 7a26 	vfma.f32	s15, s12, s13
2400f774:	edd1 6a3b 	vldr	s13, [r1, #236]	; 0xec
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2400f778:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2400f77c:	f8b2 3066 	ldrh.w	r3, [r2, #102]	; 0x66
2400f780:	4573      	cmp	r3, lr
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2400f782:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2400f786:	d328      	bcc.n	2400f7da <tMBPulse_tick+0x252>
		{
			c->numBLEPs--;
2400f788:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
2400f78c:	f10c 0c01 	add.w	ip, ip, #1
2400f790:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
2400f794:	3b01      	subs	r3, #1
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
2400f796:	4562      	cmp	r2, ip
			c->numBLEPs--;
2400f798:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
2400f79c:	dcad      	bgt.n	2400f6fa <tMBPulse_tick+0x172>
2400f79e:	ed89 7a10 	vstr	s14, [r9, #64]	; 0x40
		}

	}

    z += 0.5f * (c->_f[j] - z);
2400f7a2:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;

    j = (j+1) & 7;
2400f7a6:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z);
2400f7a8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
2400f7ac:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
2400f7b0:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7;
2400f7b4:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
    c->_b = b;
    c->_x = x;
2400f7b8:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
    c->_z = z;
    c->_j = j;
    c->_k = k;
2400f7bc:	63e7      	str	r7, [r4, #60]	; 0x3c
    z += 0.5f * (c->_f[j] - z);
2400f7be:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_j = j;
2400f7c2:	63a6      	str	r6, [r4, #56]	; 0x38
    
    return -c->out;
2400f7c4:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
2400f7c8:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
2400f7cc:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
2400f7d0:	b003      	add	sp, #12
2400f7d2:	ecbd 8b0a 	vpop	{d8-d12}
2400f7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
2400f7da:	f89d 3005 	ldrb.w	r3, [sp, #5]
2400f7de:	f10c 0c01 	add.w	ip, ip, #1
2400f7e2:	4563      	cmp	r3, ip
2400f7e4:	dc89      	bgt.n	2400f6fa <tMBPulse_tick+0x172>
2400f7e6:	e7da      	b.n	2400f79e <tMBPulse_tick+0x216>
        else if (sw < 0) p = 1.0f - eof_offset;
2400f7e8:	f100 8232 	bmi.w	2400fc50 <tMBPulse_tick+0x6c8>
    p += sw - (int)sw;
2400f7ec:	eeb0 8a68 	vmov.f32	s16, s17
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
2400f7f0:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
2400f7f4:	e767      	b.n	2400f6c6 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
2400f7f6:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
2400f7fa:	eddf 7a9c 	vldr	s15, [pc, #624]	; 2400fa6c <tMBPulse_tick+0x4e4>
                p -= 1.0f;
2400f7fe:	ee38 8a68 	vsub.f32	s16, s16, s17
	r = MINBLEP_PHASES * phase * inv_w;
2400f802:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
2400f806:	eeb0 0a4a 	vmov.f32	s0, s20
2400f80a:	eea8 0a09 	vfma.f32	s0, s16, s18
2400f80e:	f003 fb33 	bl	24012e78 <lrintf>
	r -= (float)i;
2400f812:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f816:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
            if (!k && p >= b) {
2400f81a:	eef4 aac8 	vcmpe.f32	s21, s16
	r -= (float)i;
2400f81e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f822:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f826:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400f828:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f82c:	3201      	adds	r2, #1
            if (!k && p >= b) {
2400f82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f832:	f003 073f 	and.w	r7, r3, #63	; 0x3f
	r -= (float)i;
2400f836:	eed8 7a09 	vfnms.f32	s15, s16, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f83a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
2400f83e:	eb04 0347 	add.w	r3, r4, r7, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f842:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400f846:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400f84a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
2400f84e:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400f852:	edc3 8a3b 	vstr	s17, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f856:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
            if (!k && p >= b) {
2400f85a:	f200 82e1 	bhi.w	2400fe20 <tMBPulse_tick+0x898>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
2400f85e:	ee78 aa6a 	vsub.f32	s21, s16, s21
	i = lrintf(r - 0.5f);
2400f862:	eeb0 0a4a 	vmov.f32	s0, s20
2400f866:	eeaa 0a89 	vfma.f32	s0, s21, s18
2400f86a:	f003 fb05 	bl	24012e78 <lrintf>
	r -= (float)i;
2400f86e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f872:	1c7b      	adds	r3, r7, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f874:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
2400f876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400f87a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                x = -0.5f;
2400f87e:	eef0 5a4a 	vmov.f32	s11, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f886:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
2400f88a:	eeda 7a89 	vfnms.f32	s15, s21, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f88e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400f892:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400f896:	4a74      	ldr	r2, [pc, #464]	; (2400fa68 <tMBPulse_tick+0x4e0>)
                k = 1;
2400f898:	2701      	movs	r7, #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2400f89a:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400f89e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
2400f8a2:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400f8a6:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f8aa:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
2400f8ae:	e70a      	b.n	2400f6c6 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
2400f8b0:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
2400f8b4:	eddf 8a6d 	vldr	s17, [pc, #436]	; 2400fa6c <tMBPulse_tick+0x4e4>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
2400f8b8:	ee78 aa6a 	vsub.f32	s21, s16, s21
	r = MINBLEP_PHASES * phase * inv_w;
2400f8bc:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
2400f8c0:	eeb0 0a4a 	vmov.f32	s0, s20
2400f8c4:	eeaa 0aa8 	vfma.f32	s0, s21, s17
2400f8c8:	f003 fad6 	bl	24012e78 <lrintf>
	r -= (float)i;
2400f8cc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f8d0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400f8d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2400f8d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f8dc:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f8e0:	3301      	adds	r3, #1
                x = -0.5f;
2400f8e2:	eef0 5a4a 	vmov.f32	s11, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f8e6:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f8e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2400f8ec:	eeda 7aa8 	vfnms.f32	s15, s21, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f8f0:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400f8f4:	4a5c      	ldr	r2, [pc, #368]	; (2400fa68 <tMBPulse_tick+0x4e0>)
	c->BLEPindices[c->mostRecentBLEP] = i;
2400f8f6:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f8fa:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400f8fe:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400f902:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
                k = 1;
2400f906:	2301      	movs	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400f908:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400f90c:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f910:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
2400f914:	e67b      	b.n	2400f60e <tMBPulse_tick+0x86>
        else if (sw < 0)
2400f916:	f57f aed4 	bpl.w	2400f6c2 <tMBPulse_tick+0x13a>
            if (p < b) {
2400f91a:	eef4 aac8 	vcmpe.f32	s21, s16
2400f91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f922:	f300 8163 	bgt.w	2400fbec <tMBPulse_tick+0x664>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f926:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
            if (p < 0.0f) {
2400f92a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
2400f92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f932:	f57f aec8 	bpl.w	2400f6c6 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
2400f936:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
2400f93a:	eddf 8a4c 	vldr	s17, [pc, #304]	; 2400fa6c <tMBPulse_tick+0x4e4>
	r = MINBLEP_PHASES * phase * inv_w;
2400f93e:	ee28 9a09 	vmul.f32	s18, s16, s18
                p += 1.0f;
2400f942:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
2400f946:	eeb0 0a4a 	vmov.f32	s0, s20
                p += 1.0f;
2400f94a:	ee38 8a27 	vadd.f32	s16, s16, s15
	i = lrintf(r - 0.5f);
2400f94e:	eea9 0a28 	vfma.f32	s0, s18, s17
2400f952:	f003 fa91 	bl	24012e78 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f956:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	r -= (float)i;
2400f95a:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f95e:	1c6a      	adds	r2, r5, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f960:	3301      	adds	r3, #1
                x = -0.5f;
2400f962:	eef0 5a4a 	vmov.f32	s11, s20
	r -= (float)i;
2400f966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f96a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f96e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400f972:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2400f976:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f97a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
2400f97e:	e788      	b.n	2400f892 <tMBPulse_tick+0x30a>
            if (p < 0.0f) {
2400f980:	eeb5 8a40 	vcmp.f32	s16, #0.0
2400f984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f988:	f57f ae9b 	bpl.w	2400f6c2 <tMBPulse_tick+0x13a>
2400f98c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400f990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400f994:	f57f ae95 	bpl.w	2400f6c2 <tMBPulse_tick+0x13a>
	i = lrintf(r - 0.5f);
2400f998:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
2400f99c:	eddf 8a33 	vldr	s17, [pc, #204]	; 2400fa6c <tMBPulse_tick+0x4e4>
	r = MINBLEP_PHASES * phase * inv_w;
2400f9a0:	ee68 ba09 	vmul.f32	s23, s16, s18
                p += 1.0f;
2400f9a4:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
2400f9a8:	eeb0 0a4a 	vmov.f32	s0, s20
                p += 1.0f;
2400f9ac:	ee38 8a0b 	vadd.f32	s16, s16, s22
	i = lrintf(r - 0.5f);
2400f9b0:	eeab 0aa8 	vfma.f32	s0, s23, s17
2400f9b4:	f003 fa60 	bl	24012e78 <lrintf>
	r -= (float)i;
2400f9b8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f9bc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
            if (k && p < b) {
2400f9c0:	eef4 aac8 	vcmpe.f32	s21, s16
	r -= (float)i;
2400f9c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f9c8:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f9cc:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400f9ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f9d2:	3201      	adds	r2, #1
            if (k && p < b) {
2400f9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f9d8:	f003 083f 	and.w	r8, r3, #63	; 0x3f
	r -= (float)i;
2400f9dc:	eedb 7aa8 	vfnms.f32	s15, s23, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f9e0:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400f9e4:	4a20      	ldr	r2, [pc, #128]	; (2400fa68 <tMBPulse_tick+0x4e0>)
	c->BLEPindices[c->mostRecentBLEP] = i;
2400f9e6:	eb04 0348 	add.w	r3, r4, r8, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400f9ea:	f8a4 8062 	strh.w	r8, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400f9ee:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400f9f2:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
2400f9f6:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400f9fa:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400f9fe:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
            if (k && p < b) {
2400fa02:	f340 82f8 	ble.w	2400fff6 <tMBPulse_tick+0xa6e>
	r = MINBLEP_PHASES * phase * inv_w;
2400fa06:	ee78 aa6a 	vsub.f32	s21, s16, s21
2400fa0a:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
2400fa0e:	eeb0 0a4a 	vmov.f32	s0, s20
2400fa12:	eea8 0aaa 	vfma.f32	s0, s17, s21
2400fa16:	f003 fa2f 	bl	24012e78 <lrintf>
	r -= (float)i;
2400fa1a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fa1e:	f108 0301 	add.w	r3, r8, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fa22:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
2400fa24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400fa28:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fa2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fa30:	f002 053f 	and.w	r5, r2, #63	; 0x3f
                x = 0.5f;
2400fa34:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	r -= (float)i;
2400fa38:	eed8 7aaa 	vfnms.f32	s15, s17, s21
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fa3c:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fa40:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fa44:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400fa48:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fa4c:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400fa50:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fa54:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
2400fa58:	e635      	b.n	2400f6c6 <tMBPulse_tick+0x13e>
    z += 0.5f * (c->_f[j] - z);
2400fa5a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
2400fa5e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
2400fa62:	e69e      	b.n	2400f7a2 <tMBPulse_tick+0x21a>
2400fa64:	2401ec8c 	.word	0x2401ec8c
2400fa68:	bf800000 	.word	0xbf800000
2400fa6c:	42800000 	.word	0x42800000
                if (p_at_reset >= 1.0f) {
2400fa70:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
2400fa74:	eeb4 aae8 	vcmpe.f32	s20, s17
2400fa78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fa7c:	f280 8131 	bge.w	2400fce2 <tMBPulse_tick+0x75a>
2400fa80:	ed5f ba06 	vldr	s23, [pc, #-24]	; 2400fa6c <tMBPulse_tick+0x4e4>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fa84:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
2400fa88:	ee69 ba2b 	vmul.f32	s23, s18, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fa8c:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
	i = lrintf(r - 0.5f);
2400fa90:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2400fa94:	eea8 0a2b 	vfma.f32	s0, s16, s23
2400fa98:	f003 f9ee 	bl	24012e78 <lrintf>
	r -= (float)i;
2400fa9c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400faa0:	1c7b      	adds	r3, r7, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400faa2:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
2400faa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400faa8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400faac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                x = 0.5f;
2400fab0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fab4:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fab8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	r -= (float)i;
2400fabc:	eed8 7a2b 	vfnms.f32	s15, s16, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fac0:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fac4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fac8:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400facc:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fad0:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400fad4:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fad8:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
            if (p >= b) {
2400fadc:	eef4 aac8 	vcmpe.f32	s21, s16
2400fae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fae4:	d92e      	bls.n	2400fb44 <tMBPulse_tick+0x5bc>
2400fae6:	4647      	mov	r7, r8
2400fae8:	e5ed      	b.n	2400f6c6 <tMBPulse_tick+0x13e>
                p -= 1.0f;
2400faea:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 2400fa6c <tMBPulse_tick+0x4e4>
2400faee:	ee38 8a68 	vsub.f32	s16, s16, s17
	i = lrintf(r - 0.5f);
2400faf2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2400faf6:	ee29 9a27 	vmul.f32	s18, s18, s15
2400fafa:	eea8 0a09 	vfma.f32	s0, s16, s18
2400fafe:	f003 f9bb 	bl	24012e78 <lrintf>
	r -= (float)i;
2400fb02:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fb06:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fb0a:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
2400fb0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400fb10:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fb14:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fb16:	f002 053f 	and.w	r5, r2, #63	; 0x3f
                x = 0.5f;
2400fb1a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fb1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2400fb22:	eed8 7a09 	vfnms.f32	s15, s16, s18
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fb26:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fb2a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fb2e:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400fb32:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
2400fb36:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fb3a:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fb3e:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
2400fb42:	e5c0      	b.n	2400f6c6 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
2400fb44:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
2400fb48:	ed5f 7a38 	vldr	s15, [pc, #-224]	; 2400fa6c <tMBPulse_tick+0x4e4>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
2400fb4c:	ee78 aa6a 	vsub.f32	s21, s16, s21
	r = MINBLEP_PHASES * phase * inv_w;
2400fb50:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
2400fb54:	eeb0 0a68 	vmov.f32	s0, s17
2400fb58:	eeaa 0a89 	vfma.f32	s0, s21, s18
2400fb5c:	f003 f98c 	bl	24012e78 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fb60:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	r -= (float)i;
2400fb64:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fb68:	1c6a      	adds	r2, r5, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fb6a:	3301      	adds	r3, #1
                x = -0.5f;
2400fb6c:	eef0 5a68 	vmov.f32	s11, s17
	r -= (float)i;
2400fb70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fb74:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fb78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400fb7c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2400fb80:	eeda 7a89 	vfnms.f32	s15, s21, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fb84:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fb88:	e683      	b.n	2400f892 <tMBPulse_tick+0x30a>
2400fb8a:	ed5f ba48 	vldr	s23, [pc, #-288]	; 2400fa6c <tMBPulse_tick+0x4e4>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fb8e:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
2400fb92:	ee69 ba2b 	vmul.f32	s23, s18, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fb96:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
2400fb9a:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
2400fb9e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
2400fba2:	ee78 8aca 	vsub.f32	s17, s17, s20
	i = lrintf(r - 0.5f);
2400fba6:	eea8 0aab 	vfma.f32	s0, s17, s23
2400fbaa:	f003 f965 	bl	24012e78 <lrintf>
	r -= (float)i;
2400fbae:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fbb2:	1c7b      	adds	r3, r7, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fbb4:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
2400fbb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400fbba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fbbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fbc2:	f002 053f 	and.w	r5, r2, #63	; 0x3f
                    x = 0.5f;
2400fbc6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	r -= (float)i;
2400fbca:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fbce:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fbd2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fbd6:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400fbda:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fbde:	ed82 aa3b 	vstr	s20, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400fbe2:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fbe6:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
        if (sw > 0)
2400fbea:	e777      	b.n	2400fadc <tMBPulse_tick+0x554>
	r = MINBLEP_PHASES * phase * inv_w;
2400fbec:	ed5f 8a61 	vldr	s17, [pc, #-388]	; 2400fa6c <tMBPulse_tick+0x4e4>
2400fbf0:	ee78 aa6a 	vsub.f32	s21, s16, s21
	i = lrintf(r - 0.5f);
2400fbf4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                k = 0;
2400fbf8:	2700      	movs	r7, #0
2400fbfa:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
2400fbfe:	eea8 0aaa 	vfma.f32	s0, s17, s21
2400fc02:	f003 f939 	bl	24012e78 <lrintf>
	r -= (float)i;
2400fc06:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fc0a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400fc0e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2400fc12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fc16:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fc1a:	3301      	adds	r3, #1
                x = 0.5f;
2400fc1c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fc20:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fc22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2400fc26:	eed8 7aaa 	vfnms.f32	s15, s17, s21
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fc2a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fc2e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fc32:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fc36:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fc3a:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400fc3e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
2400fc42:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fc46:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fc4a:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
2400fc4e:	e66c      	b.n	2400f92a <tMBPulse_tick+0x3a2>
        else if (sw < 0) p = 1.0f - eof_offset;
2400fc50:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
2400fc54:	ee7b cac8 	vsub.f32	s25, s23, s16
        if (!k) {
2400fc58:	2f00      	cmp	r7, #0
2400fc5a:	f040 80d2 	bne.w	2400fe02 <tMBPulse_tick+0x87a>
                if (p_at_reset < 0.0f) {
2400fc5e:	eeb5 aac0 	vcmpe.f32	s20, #0.0
2400fc62:	ed1f ba7e 	vldr	s22, [pc, #-504]	; 2400fa6c <tMBPulse_tick+0x4e4>
2400fc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fc6a:	f100 810f 	bmi.w	2400fe8c <tMBPulse_tick+0x904>
2400fc6e:	ee29 ba0b 	vmul.f32	s22, s18, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fc72:	f8b4 9062 	ldrh.w	r9, [r4, #98]	; 0x62
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fc76:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
	i = lrintf(r - 0.5f);
2400fc7a:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                k = 1;
2400fc7e:	2701      	movs	r7, #1
2400fc80:	eeb1 aa48 	vneg.f32	s20, s16
	i = lrintf(r - 0.5f);
2400fc84:	eeb0 0a68 	vmov.f32	s0, s17
2400fc88:	eea8 0a4b 	vfms.f32	s0, s16, s22
2400fc8c:	f003 f8f4 	bl	24012e78 <lrintf>
	r -= (float)i;
2400fc90:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fc94:	eb09 0307 	add.w	r3, r9, r7
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fc98:	19ea      	adds	r2, r5, r7
	r -= (float)i;
2400fc9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400fc9e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                x = -0.5f;
2400fca2:	eef0 5a68 	vmov.f32	s11, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fcaa:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
2400fcae:	eeda 7a0b 	vfnms.f32	s15, s20, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fcb2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fcb6:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fcba:	4ad3      	ldr	r2, [pc, #844]	; (24010008 <tMBPulse_tick+0xa80>)
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fcbc:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400fcc0:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
2400fcc4:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fcc8:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fccc:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
            if (p < b) {
2400fcd0:	eef4 aaec 	vcmpe.f32	s21, s25
2400fcd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fcd8:	f300 80a6 	bgt.w	2400fe28 <tMBPulse_tick+0x8a0>
2400fcdc:	eeb0 8a6c 	vmov.f32	s16, s25
2400fce0:	e4f1      	b.n	2400f6c6 <tMBPulse_tick+0x13e>
                    p_at_reset -= 1.0f;
2400fce2:	ee3a aa68 	vsub.f32	s20, s20, s17
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
2400fce6:	eddf bac9 	vldr	s23, [pc, #804]	; 2401000c <tMBPulse_tick+0xa84>
	i = lrintf(r - 0.5f);
2400fcea:	eebe ca00 	vmov.f32	s24, #224	; 0xbf000000 -0.5
2400fcee:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
2400fcf2:	ee38 ba0a 	vadd.f32	s22, s16, s20
	i = lrintf(r - 0.5f);
2400fcf6:	eeb0 0a4c 	vmov.f32	s0, s24
2400fcfa:	eeab 0a8b 	vfma.f32	s0, s23, s22
2400fcfe:	f003 f8bb 	bl	24012e78 <lrintf>
	r -= (float)i;
2400fd02:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fd06:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
                if (!k && p_at_reset >= b) {
2400fd0a:	eef4 aaca 	vcmpe.f32	s21, s20
	r -= (float)i;
2400fd0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fd12:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fd16:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400fd18:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fd1c:	3201      	adds	r2, #1
                if (!k && p_at_reset >= b) {
2400fd1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fd22:	f003 073f 	and.w	r7, r3, #63	; 0x3f
	r -= (float)i;
2400fd26:	eedb 7a8b 	vfnms.f32	s15, s23, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fd2a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fd2e:	eb04 0347 	add.w	r3, r4, r7, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fd32:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fd36:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400fd3a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
2400fd3e:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fd42:	edc3 8a3b 	vstr	s17, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fd46:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
                if (!k && p_at_reset >= b) {
2400fd4a:	f200 8144 	bhi.w	2400ffd6 <tMBPulse_tick+0xa4e>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
2400fd4e:	ee78 8a6a 	vsub.f32	s17, s16, s21
	i = lrintf(r - 0.5f);
2400fd52:	eeb0 0a4c 	vmov.f32	s0, s24
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
2400fd56:	ee78 8a8a 	vadd.f32	s17, s17, s20
	i = lrintf(r - 0.5f);
2400fd5a:	eeab 0aa8 	vfma.f32	s0, s23, s17
2400fd5e:	f003 f88b 	bl	24012e78 <lrintf>
	r -= (float)i;
2400fd62:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fd66:	1c7b      	adds	r3, r7, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fd68:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
2400fd6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400fd6e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fd72:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fd76:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fd7a:	4aa3      	ldr	r2, [pc, #652]	; (24010008 <tMBPulse_tick+0xa80>)
	r -= (float)i;
2400fd7c:	eedb 7aa8 	vfnms.f32	s15, s23, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fd80:	eb04 0347 	add.w	r3, r4, r7, lsl #1
2400fd84:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400fd88:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fd8c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400fd90:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
        if (sw > 0)
2400fd94:	e67c      	b.n	2400fa90 <tMBPulse_tick+0x508>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
2400fd96:	eddf ba9d 	vldr	s23, [pc, #628]	; 2401000c <tMBPulse_tick+0xa84>
2400fd9a:	ee38 baea 	vsub.f32	s22, s17, s21
	i = lrintf(r - 0.5f);
2400fd9e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2400fda2:	ee69 ba2b 	vmul.f32	s23, s18, s23
2400fda6:	eeab 0a2b 	vfma.f32	s0, s22, s23
2400fdaa:	f003 f865 	bl	24012e78 <lrintf>
	r -= (float)i;
2400fdae:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fdb2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
                if (p_at_reset >= 1.0f) {
2400fdb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	r -= (float)i;
2400fdba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fdbe:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fdc2:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400fdc4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
2400fdc8:	eeb4 aac7 	vcmpe.f32	s20, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fdcc:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fdce:	f003 073f 	and.w	r7, r3, #63	; 0x3f
	r -= (float)i;
2400fdd2:	eedb 7a2b 	vfnms.f32	s15, s22, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fdd6:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fdda:	4a8b      	ldr	r2, [pc, #556]	; (24010008 <tMBPulse_tick+0xa80>)
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fddc:	eb04 0347 	add.w	r3, r4, r7, lsl #1
                if (p_at_reset >= 1.0f) {
2400fde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fde4:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fde8:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400fdec:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
2400fdf0:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fdf4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fdf8:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
                if (p_at_reset >= 1.0f) {
2400fdfc:	f6ff ae48 	blt.w	2400fa90 <tMBPulse_tick+0x508>
2400fe00:	e6cb      	b.n	2400fb9a <tMBPulse_tick+0x612>
                if (p_at_reset < b) {
2400fe02:	eef4 aaca 	vcmpe.f32	s21, s20
2400fe06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fe0a:	f300 8095 	bgt.w	2400ff38 <tMBPulse_tick+0x9b0>
                if (p_at_reset < 0.0f) {
2400fe0e:	eeb5 aac0 	vcmpe.f32	s20, #0.0
2400fe12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fe16:	f100 80e1 	bmi.w	2400ffdc <tMBPulse_tick+0xa54>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fe1a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
2400fe1e:	e757      	b.n	2400fcd0 <tMBPulse_tick+0x748>
                x = 0.5f;
2400fe20:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
                k = 0;
2400fe24:	2700      	movs	r7, #0
2400fe26:	e44e      	b.n	2400f6c6 <tMBPulse_tick+0x13e>
	r = MINBLEP_PHASES * phase * inv_w;
2400fe28:	eddf 7a78 	vldr	s15, [pc, #480]	; 2401000c <tMBPulse_tick+0xa84>
2400fe2c:	ee7c aaea 	vsub.f32	s21, s25, s21
	i = lrintf(r - 0.5f);
2400fe30:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                k = 0;
2400fe34:	4647      	mov	r7, r8
2400fe36:	ee29 9a27 	vmul.f32	s18, s18, s15
}
2400fe3a:	eeb0 8a6c 	vmov.f32	s16, s25
	i = lrintf(r - 0.5f);
2400fe3e:	eeaa 0a89 	vfma.f32	s0, s21, s18
2400fe42:	f003 f819 	bl	24012e78 <lrintf>
	r -= (float)i;
2400fe46:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fe4a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fe4e:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
2400fe50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400fe54:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fe58:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fe5a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fe5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                x = 0.5f;
2400fe62:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fe66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2400fe6a:	eeda 7a89 	vfnms.f32	s15, s21, s18
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fe6e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fe72:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fe76:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400fe7a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
2400fe7e:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fe82:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fe86:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
2400fe8a:	e41c      	b.n	2400f6c6 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
2400fe8c:	eebe ca00 	vmov.f32	s24, #224	; 0xbf000000 -0.5
2400fe90:	ee29 ba0b 	vmul.f32	s22, s18, s22
                    p_at_reset += 1.0f;
2400fe94:	ee3a aa2b 	vadd.f32	s20, s20, s23
	i = lrintf(r - 0.5f);
2400fe98:	eeb0 0a4c 	vmov.f32	s0, s24
2400fe9c:	eea8 0a8b 	vfma.f32	s0, s17, s22
2400fea0:	f002 ffea 	bl	24012e78 <lrintf>
	r -= (float)i;
2400fea4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fea8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
                if (k && p_at_reset < b) {
2400feac:	eef4 aaca 	vcmpe.f32	s21, s20
	r -= (float)i;
2400feb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400feb4:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400feb8:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400feba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400febe:	3201      	adds	r2, #1
                if (k && p_at_reset < b) {
2400fec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fec4:	f003 093f 	and.w	r9, r3, #63	; 0x3f
	r -= (float)i;
2400fec8:	eed8 7a8b 	vfnms.f32	s15, s17, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400fecc:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fed0:	4a4d      	ldr	r2, [pc, #308]	; (24010008 <tMBPulse_tick+0xa80>)
	c->BLEPindices[c->mostRecentBLEP] = i;
2400fed2:	eb04 0349 	add.w	r3, r4, r9, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400fed6:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400feda:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400fede:	eb04 03c9 	add.w	r3, r4, r9, lsl #3
2400fee2:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400fee6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400feea:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
                if (k && p_at_reset < b) {
2400feee:	dd7e      	ble.n	2400ffee <tMBPulse_tick+0xa66>
	r = MINBLEP_PHASES * phase * inv_w;
2400fef0:	ee78 8a6a 	vsub.f32	s17, s16, s21
	i = lrintf(r - 0.5f);
2400fef4:	eeb0 0a4c 	vmov.f32	s0, s24
2400fef8:	ee78 8a8a 	vadd.f32	s17, s17, s20
2400fefc:	eeab 0a28 	vfma.f32	s0, s22, s17
2400ff00:	f002 ffba 	bl	24012e78 <lrintf>
	r -= (float)i;
2400ff04:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400ff08:	f109 0301 	add.w	r3, r9, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400ff0c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2400ff10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400ff14:	1c6a      	adds	r2, r5, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400ff16:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400ff1a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
2400ff1e:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
2400ff22:	eb04 0349 	add.w	r3, r4, r9, lsl #1
2400ff26:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400ff2a:	eb04 03c9 	add.w	r3, r4, r9, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400ff2e:	edc3 ba3b 	vstr	s23, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400ff32:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
        else if (sw < 0)
2400ff36:	e6a0      	b.n	2400fc7a <tMBPulse_tick+0x6f2>
	r = MINBLEP_PHASES * phase * inv_w;
2400ff38:	ed9f ba34 	vldr	s22, [pc, #208]	; 2401000c <tMBPulse_tick+0xa84>
2400ff3c:	ee38 caea 	vsub.f32	s24, s17, s21
	i = lrintf(r - 0.5f);
2400ff40:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2400ff44:	ee29 ba0b 	vmul.f32	s22, s18, s22
2400ff48:	eeac 0a0b 	vfma.f32	s0, s24, s22
2400ff4c:	f002 ff94 	bl	24012e78 <lrintf>
	r -= (float)i;
2400ff50:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400ff54:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
                if (p_at_reset < 0.0f) {
2400ff58:	eeb5 aac0 	vcmpe.f32	s20, #0.0
	r -= (float)i;
2400ff5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400ff60:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400ff64:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400ff66:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400ff6a:	3201      	adds	r2, #1
                if (p_at_reset < 0.0f) {
2400ff6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400ff70:	f003 093f 	and.w	r9, r3, #63	; 0x3f
	r -= (float)i;
2400ff74:	eedc 7a0b 	vfnms.f32	s15, s24, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400ff78:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
2400ff7c:	eb04 0349 	add.w	r3, r4, r9, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400ff80:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
2400ff84:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2400ff88:	eb04 03c9 	add.w	r3, r4, r9, lsl #3
2400ff8c:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2400ff90:	edc3 ba3b 	vstr	s23, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400ff94:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
                if (p_at_reset < 0.0f) {
2400ff98:	f57f ae6f 	bpl.w	2400fc7a <tMBPulse_tick+0x6f2>
	i = lrintf(r - 0.5f);
2400ff9c:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
                    k = 1;
2400ffa0:	2701      	movs	r7, #1
	i = lrintf(r - 0.5f);
2400ffa2:	eeb0 0a48 	vmov.f32	s0, s16
2400ffa6:	eea8 0a8b 	vfma.f32	s0, s17, s22
2400ffaa:	f002 ff65 	bl	24012e78 <lrintf>
	r -= (float)i;
2400ffae:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400ffb2:	eb09 0307 	add.w	r3, r9, r7
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400ffb6:	19ea      	adds	r2, r5, r7
	r -= (float)i;
2400ffb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2400ffbc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400ffc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                    x = -0.5f;
2400ffc4:	eef0 5a48 	vmov.f32	s11, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400ffc8:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
2400ffcc:	eed8 7a8b 	vfnms.f32	s15, s17, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400ffd0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
2400ffd4:	e66f      	b.n	2400fcb6 <tMBPulse_tick+0x72e>
                    x = 0.5f;
2400ffd6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
2400ffda:	e57f      	b.n	2400fadc <tMBPulse_tick+0x554>
2400ffdc:	ed9f ba0b 	vldr	s22, [pc, #44]	; 2401000c <tMBPulse_tick+0xa84>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2400ffe0:	f8b4 9062 	ldrh.w	r9, [r4, #98]	; 0x62
2400ffe4:	ee29 ba0b 	vmul.f32	s22, s18, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2400ffe8:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
2400ffec:	e7d6      	b.n	2400ff9c <tMBPulse_tick+0xa14>
                    x = -0.5f;
2400ffee:	eef0 5a4c 	vmov.f32	s11, s24
                    k = 1;
2400fff2:	2701      	movs	r7, #1
2400fff4:	e66c      	b.n	2400fcd0 <tMBPulse_tick+0x748>
                x = -0.5f;
2400fff6:	eef0 5a4a 	vmov.f32	s11, s20
                k = 1;
2400fffa:	2701      	movs	r7, #1
2400fffc:	f7ff bb63 	b.w	2400f6c6 <tMBPulse_tick+0x13e>
    p += sw - (int)sw;
24010000:	eeb0 8a68 	vmov.f32	s16, s17
24010004:	f7ff baf2 	b.w	2400f5ec <tMBPulse_tick+0x64>
24010008:	bf800000 	.word	0xbf800000
2401000c:	42800000 	.word	0x42800000

24010010 <tMBPulse_setFreq>:

void tMBPulse_setFreq(tMBPulse* const osc, float f)
{
    _tMBPulse* c = *osc;
24010010:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
24010012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24010016:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
    c->freq = f;
2401001a:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
2401001e:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
24010022:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24010026:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
2401002a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
2401002e:	4770      	bx	lr

24010030 <tMBPulse_setWidth>:

void tMBPulse_setWidth(tMBPulse* const osc, float w)
{
    _tMBPulse* c = *osc;
    c->waveform = w;
    c->_b = 0.5f * (1.0f + c->waveform);
24010030:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tMBPulse* c = *osc;
24010034:	6803      	ldr	r3, [r0, #0]
    c->_b = 0.5f * (1.0f + c->waveform);
24010036:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->waveform = w;
2401003a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->_b = 0.5f * (1.0f + c->waveform);
2401003e:	ee70 7a27 	vadd.f32	s15, s0, s15
24010042:	ee67 7a87 	vmul.f32	s15, s15, s14
24010046:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
2401004a:	4770      	bx	lr

2401004c <tMBPulse_sync>:

float tMBPulse_sync(tMBPulse* const osc, float value)
{
    _tMBPulse* c = *osc;
2401004c:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
2401004e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
24010052:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
24010056:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
2401005a:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
2401005e:	eef1 7a67 	vneg.f32	s15, s15
24010062:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24010066:	eef5 6ac0 	vcmpe.f32	s13, #0.0
2401006a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401006e:	eef4 6ac7 	vcmpe.f32	s13, s14
24010072:	bfcc      	ite	gt
24010074:	2201      	movgt	r2, #1
24010076:	2200      	movle	r2, #0
24010078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401007c:	f002 0201 	and.w	r2, r2, #1
24010080:	bf88      	it	hi
24010082:	2200      	movhi	r2, #0
24010084:	b122      	cbz	r2, 24010090 <tMBPulse_sync+0x44>
24010086:	eeb5 0a40 	vcmp.f32	s0, #0.0
2401008a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401008e:	da04      	bge.n	2401009a <tMBPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
24010090:	ed9f 7a05 	vldr	s14, [pc, #20]	; 240100a8 <tMBPulse_sync+0x5c>
24010094:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
24010098:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
2401009a:	ee37 7a66 	vsub.f32	s14, s14, s13
2401009e:	ee27 7a06 	vmul.f32	s14, s14, s12
240100a2:	ed83 7a05 	vstr	s14, [r3, #20]
}
240100a6:	4770      	bx	lr
240100a8:	00000000 	.word	0x00000000

240100ac <tMBTriangle_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBTriangle_tick(tMBTriangle* const osc)
{
240100ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tMBTriangle* c = *osc;
240100b0:	6804      	ldr	r4, [r0, #0]
{
240100b2:	ed2d 8b10 	vpush	{d8-d15}
    sync = c->sync;

    p = c->_p;  /* phase [0, 1) */
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
240100b6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
    
    

    b = 0.5f * (1.0f + c->waveform);
240100ba:	edd4 6a03 	vldr	s13, [r4, #12]
240100be:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    sync = c->sync;
240100c2:	ed94 8a05 	vldr	s16, [r4, #20]
    invB = 1.0f / b;
240100c6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
{
240100ca:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
240100cc:	ee76 6a89 	vadd.f32	s13, s13, s18
    p = c->_p;  /* phase [0, 1) */
240100d0:	edd4 7a08 	vldr	s15, [r4, #32]
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
240100d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    w = c->_w;  /* phase increment */
240100d8:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
    invB = 1.0f / b;
240100dc:	eec9 ca07 	vdiv.f32	s25, s18, s14
    z = c->_z;  /* low pass filter state */
240100e0:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    b = 0.5f * (1.0f + c->waveform);
240100e4:	ee26 aa8b 	vmul.f32	s20, s13, s22
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
240100e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
240100ec:	ee39 7a4a 	vsub.f32	s14, s18, s20
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
240100f0:	e9d4 560d 	ldrd	r5, r6, [r4, #52]	; 0x34
    invB1 = 1.0f / b1;
240100f4:	ee89 da07 	vdiv.f32	s26, s18, s14
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
240100f8:	dd7f      	ble.n	240101fa <tMBTriangle_tick+0x14e>
240100fa:	f8d4 801c 	ldr.w	r8, [r4, #28]
240100fe:	f1b8 0f00 	cmp.w	r8, #0
24010102:	dd34      	ble.n	2401016e <tMBTriangle_tick+0xc2>
24010104:	ed94 7a06 	vldr	s14, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
24010108:	edd4 ba0f 	vldr	s23, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2401010c:	eeb1 7a47 	vneg.f32	s14, s14
    sw = w * c->syncdir;
24010110:	ee67 8a28 	vmul.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
24010114:	ed84 7a06 	vstr	s14, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24010118:	ee67 ba2b 	vmul.f32	s23, s14, s23
    p += sw - (int)sw;
2401011c:	eebd 8ae8 	vcvt.s32.f32	s16, s17
24010120:	ee77 7aa8 	vadd.f32	s15, s15, s17
24010124:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
24010128:	ee37 8ac8 	vsub.f32	s16, s15, s16
                x = -0.5f + p * invB;
                tMBTriangle_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
2401012c:	2e00      	cmp	r6, #0
2401012e:	d176      	bne.n	2401021e <tMBTriangle_tick+0x172>
        
        x = -0.5f + p * invB;
24010130:	eefe 9a00 	vmov.f32	s19, #224	; 0xbf000000 -0.5
        if (sw > 0)
24010134:	eef5 8ac0 	vcmpe.f32	s17, #0.0
        x = -0.5f + p * invB;
24010138:	eeb0 9a69 	vmov.f32	s18, s19
        if (sw > 0)
2401013c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
24010140:	eea8 9a2c 	vfma.f32	s18, s16, s25
        if (sw > 0)
24010144:	f340 8296 	ble.w	24010674 <tMBTriangle_tick+0x5c8>
        {
            if (p >= b) {
24010148:	eeb4 8aca 	vcmpe.f32	s16, s20
2401014c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010150:	f280 8206 	bge.w	24010560 <tMBTriangle_tick+0x4b4>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010154:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
24010158:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
2401015a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
2401015e:	eeb4 8ae9 	vcmpe.f32	s16, s19
24010162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010166:	f280 836d 	bge.w	24010844 <tMBTriangle_tick+0x798>
2401016a:	461e      	mov	r6, r3
2401016c:	e06f      	b.n	2401024e <tMBTriangle_tick+0x1a2>
    sw = w * c->syncdir;
2401016e:	edd4 ba06 	vldr	s23, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24010172:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
24010176:	ee68 8aab 	vmul.f32	s17, s17, s23
    float inv_sw = c->_inv_w * c->syncdir;
2401017a:	ee6b ba87 	vmul.f32	s23, s23, s14
    p += sw - (int)sw;
2401017e:	eebd cae8 	vcvt.s32.f32	s24, s17
24010182:	ee77 9aa8 	vadd.f32	s19, s15, s17
24010186:	eeb8 cacc 	vcvt.f32.s32	s24, s24
2401018a:	ee39 eacc 	vsub.f32	s28, s19, s24
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
2401018e:	f040 8712 	bne.w	24010fb6 <tMBTriangle_tick+0xf0a>
        if (sw > 0) p = eof_offset;
24010192:	eef5 8ac0 	vcmpe.f32	s17, #0.0
        float eof_offset = sync * sw;
24010196:	ee28 8a28 	vmul.f32	s16, s16, s17
        if (sw > 0) p = eof_offset;
2401019a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
2401019e:	ee7e da48 	vsub.f32	s27, s28, s16
        if (sw > 0) p = eof_offset;
240101a2:	f340 8150 	ble.w	24010446 <tMBTriangle_tick+0x39a>
        if (!k) {
240101a6:	2e00      	cmp	r6, #0
240101a8:	f040 82e3 	bne.w	24010772 <tMBTriangle_tick+0x6c6>
                if (p_at_reset >= b) {
240101ac:	eeb4 aaed 	vcmpe.f32	s20, s27
240101b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240101b4:	f240 8522 	bls.w	24010bfc <tMBTriangle_tick+0xb50>
                if (p_at_reset >= 1.0f) {
240101b8:	eef4 dac9 	vcmpe.f32	s27, s18
240101bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240101c0:	f280 83b8 	bge.w	24010934 <tMBTriangle_tick+0x888>
240101c4:	eddf 7ae5 	vldr	s15, [pc, #916]	; 2401055c <tMBTriangle_tick+0x4b0>
            x = -0.5f + p_at_reset * invB;
240101c8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240101cc:	ee6b baa7 	vmul.f32	s23, s23, s15
240101d0:	eeb0 ca40 	vmov.f32	s24, s0
	i = lrintf(r - 0.5f);
240101d4:	eea8 0a2b 	vfma.f32	s0, s16, s23
240101d8:	f002 fe4e 	bl	24012e78 <lrintf>
	r -= (float)i;
240101dc:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
240101e0:	eeac caad 	vfma.f32	s24, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240101e4:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
	r -= (float)i;
240101e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
240101ec:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240101f0:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	r -= (float)i;
240101f4:	eed8 7a2b 	vfnms.f32	s15, s16, s23
240101f8:	e2fb      	b.n	240107f2 <tMBTriangle_tick+0x746>
    sw = w * c->syncdir;
240101fa:	edd4 ba06 	vldr	s23, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
240101fe:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
24010202:	ee6b 8aa8 	vmul.f32	s17, s23, s17
    float inv_sw = c->_inv_w * c->syncdir;
24010206:	ee6b ba87 	vmul.f32	s23, s23, s14
    p += sw - (int)sw;
2401020a:	eebd 8ae8 	vcvt.s32.f32	s16, s17
2401020e:	ee78 7aa7 	vadd.f32	s15, s17, s15
24010212:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
24010216:	ee37 8ac8 	vsub.f32	s16, s15, s16
    } else if (!k) {  /* normal operation, slope currently up */
2401021a:	2e00      	cmp	r6, #0
2401021c:	d088      	beq.n	24010130 <tMBTriangle_tick+0x84>
            }
        }
        
    } else {  /* normal operation, slope currently down */
        
        x = 0.5f - (p - b) * invB1;
2401021e:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
        if (sw > 0)
24010222:	eef5 8ac0 	vcmpe.f32	s17, #0.0
        x = 0.5f - (p - b) * invB1;
24010226:	ee7a 7a48 	vsub.f32	s15, s20, s16
2401022a:	eeb0 9a69 	vmov.f32	s18, s19
        if (sw > 0)
2401022e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
24010232:	eea7 9a8d 	vfma.f32	s18, s15, s26
        if (sw > 0)
24010236:	f340 81d1 	ble.w	240105dc <tMBTriangle_tick+0x530>
        {
            if (p >= 1.0f) {
2401023a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
2401023e:	eeb4 8acb 	vcmpe.f32	s16, s22
24010242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010246:	f280 8112 	bge.w	2401046e <tMBTriangle_tick+0x3c2>
    }
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    
    c->_f[currentSamp] = x;

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
2401024a:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
2401024e:	1d2b      	adds	r3, r5, #4
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24010250:	b2ff      	uxtb	r7, r7
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24010252:	f003 0307 	and.w	r3, r3, #7
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24010256:	f88d 7005 	strb.w	r7, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
2401025a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c->_f[currentSamp] = x;
2401025e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24010262:	ed83 9a11 	vstr	s18, [r3, #68]	; 0x44
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24010266:	2a00      	cmp	r2, #0
24010268:	f000 827e 	beq.w	24010768 <tMBTriangle_tick+0x6bc>
2401026c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    	whichBLEP &= 63;

    	//use the scale and r values from the BLEPproperties array to compute the current state of each active BLEP and add it to the output value

    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
24010270:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24010274:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24010278:	2200      	movs	r2, #0
    	{
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2401027a:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
2401027e:	49b5      	ldr	r1, [pc, #724]	; (24010554 <tMBTriangle_tick+0x4a8>)
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24010280:	4fb5      	ldr	r7, [pc, #724]	; (24010558 <tMBTriangle_tick+0x4ac>)
24010282:	e051      	b.n	24010328 <tMBTriangle_tick+0x27c>
24010284:	f8bd e006 	ldrh.w	lr, [sp, #6]
24010288:	f8bd 9006 	ldrh.w	r9, [sp, #6]
2401028c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24010290:	fa1f fe8e 	uxth.w	lr, lr
24010294:	f8bd 8006 	ldrh.w	r8, [sp, #6]
24010298:	fa1f f989 	uxth.w	r9, r9
2401029c:	b29b      	uxth	r3, r3
2401029e:	fa1f f888 	uxth.w	r8, r8
240102a2:	eb04 0949 	add.w	r9, r4, r9, lsl #1
240102a6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
240102aa:	eb04 0848 	add.w	r8, r4, r8, lsl #1
240102ae:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
240102b2:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
240102b6:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
240102ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
240102be:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
240102c2:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
240102c6:	eb07 0ec8 	add.w	lr, r7, r8, lsl #3
240102ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
240102ce:	ed99 7a00 	vldr	s14, [r9]
240102d2:	edde 5a01 	vldr	s11, [lr, #4]
240102d6:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240102da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
240102de:	eea5 7a25 	vfma.f32	s14, s10, s11
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
240102e2:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240102e6:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
240102e8:	fa1f fe8e 	uxth.w	lr, lr
240102ec:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240102f0:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
240102f4:	eee6 7a87 	vfma.f32	s15, s13, s14
240102f8:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240102fc:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
24010300:	f108 0840 	add.w	r8, r8, #64	; 0x40
24010304:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24010308:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
2401030c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
24010310:	459e      	cmp	lr, r3
24010312:	d304      	bcc.n	2401031e <tMBTriangle_tick+0x272>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
24010314:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
24010318:	3b01      	subs	r3, #1
2401031a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
2401031e:	f89d 3005 	ldrb.w	r3, [sp, #5]
24010322:	3201      	adds	r2, #1
24010324:	4293      	cmp	r3, r2
24010326:	dd72      	ble.n	2401040e <tMBTriangle_tick+0x362>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24010328:	ebac 0302 	sub.w	r3, ip, r2
2401032c:	b29b      	uxth	r3, r3
2401032e:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
24010332:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24010336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401033a:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
2401033e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24010342:	b29b      	uxth	r3, r3
24010344:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24010348:	eb04 0383 	add.w	r3, r4, r3, lsl #2
2401034c:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
24010350:	eeb4 7ac6 	vcmpe.f32	s14, s12
24010354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010358:	d494      	bmi.n	24010284 <tMBTriangle_tick+0x1d8>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
2401035a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
2401035e:	f8bd e006 	ldrh.w	lr, [sp, #6]
24010362:	b29b      	uxth	r3, r3
24010364:	f8bd 8006 	ldrh.w	r8, [sp, #6]
24010368:	f8bd 9006 	ldrh.w	r9, [sp, #6]
2401036c:	fa1f fe8e 	uxth.w	lr, lr
24010370:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24010374:	fa1f f989 	uxth.w	r9, r9
24010378:	eb04 0383 	add.w	r3, r4, r3, lsl #2
2401037c:	fa1f f888 	uxth.w	r8, r8
24010380:	edd3 5a3c 	vldr	s11, [r3, #240]	; 0xf0
24010384:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24010388:	f8bd 3006 	ldrh.w	r3, [sp, #6]
2401038c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
24010390:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
24010394:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
24010398:	b29b      	uxth	r3, r3
2401039a:	eb04 0888 	add.w	r8, r4, r8, lsl #2
2401039e:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
240103a2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240103a6:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
240103aa:	eb01 0889 	add.w	r8, r1, r9, lsl #2
240103ae:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
240103b2:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
240103b6:	edd8 6a01 	vldr	s13, [r8, #4]
240103ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
240103be:	ed9e 7a00 	vldr	s14, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240103c2:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
240103c6:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240103ca:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
240103ce:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
240103d2:	ee76 6ae4 	vsub.f32	s13, s13, s9
240103d6:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
240103da:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
240103de:	eea5 7a26 	vfma.f32	s14, s10, s13
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
240103e2:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
240103e6:	eee5 7a87 	vfma.f32	s15, s11, s14
240103ea:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240103ee:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
240103f2:	3340      	adds	r3, #64	; 0x40
240103f4:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
240103f8:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
240103fc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
24010400:	459e      	cmp	lr, r3
24010402:	d287      	bcs.n	24010314 <tMBTriangle_tick+0x268>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24010404:	f89d 3005 	ldrb.w	r3, [sp, #5]
24010408:	3201      	adds	r2, #1
2401040a:	4293      	cmp	r3, r2
2401040c:	dc8c      	bgt.n	24010328 <tMBTriangle_tick+0x27c>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
2401040e:	ee77 7aea 	vsub.f32	s15, s15, s21
    c->out = z;
    j = (j+1) & 7;
24010412:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
24010414:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    c->_p = p;
24010418:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
2401041c:	eeb0 7a6a 	vmov.f32	s14, s21
    j = (j+1) & 7;
24010420:	f005 0507 	and.w	r5, r5, #7
    c->_w = w;
    c->_b = b;
24010424:	ed84 aa0a 	vstr	s20, [r4, #40]	; 0x28
    c->_z = z;
    c->_j = j;
    c->_k = k;
24010428:	63a6      	str	r6, [r4, #56]	; 0x38
    z += 0.5f * (c->_f[j] - z);
2401042a:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->_j = j;
2401042e:	6365      	str	r5, [r4, #52]	; 0x34
    
    return -c->out;
24010430:	eeb1 0a47 	vneg.f32	s0, s14
    c->out = z;
24010434:	ed84 7a01 	vstr	s14, [r4, #4]
    c->_z = z;
24010438:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
}
2401043c:	b003      	add	sp, #12
2401043e:	ecbd 8b10 	vpop	{d8-d15}
24010442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (sw < 0) p = 1.0f - eof_offset;
24010446:	f100 82fa 	bmi.w	24010a3e <tMBTriangle_tick+0x992>
        if (!k) {
2401044a:	2e00      	cmp	r6, #0
2401044c:	f000 8269 	beq.w	24010922 <tMBTriangle_tick+0x876>
            x = 0.5f - (p_at_reset - b) * invB1;
24010450:	ee3a 7a08 	vadd.f32	s14, s20, s16
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24010454:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            x = 0.5f - (p_at_reset - b) * invB1;
24010458:	ee7c 7a69 	vsub.f32	s15, s24, s19
2401045c:	eeb0 9a4b 	vmov.f32	s18, s22
    p += sw - (int)sw;
24010460:	eeb0 8a4e 	vmov.f32	s16, s28
            x = 0.5f - (p_at_reset - b) * invB1;
24010464:	ee77 7a27 	vadd.f32	s15, s14, s15
24010468:	eead 9a27 	vfma.f32	s18, s26, s15
            if (sw > 0)
2401046c:	e6ef      	b.n	2401024e <tMBTriangle_tick+0x1a2>
	i = lrintf(r - 0.5f);
2401046e:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
24010472:	eddf 7a3a 	vldr	s15, [pc, #232]	; 2401055c <tMBTriangle_tick+0x4b0>
                p -= 1.0f;
24010476:	ee38 ca4b 	vsub.f32	s24, s16, s22
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
2401047a:	ee6b baa7 	vmul.f32	s23, s23, s15
	i = lrintf(r - 0.5f);
2401047e:	eeb0 0a49 	vmov.f32	s0, s18
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
24010482:	ee3c 7a8d 	vadd.f32	s14, s25, s26
	i = lrintf(r - 0.5f);
24010486:	eeab 0a8c 	vfma.f32	s0, s23, s24
	scale *= w;
2401048a:	ee68 8a87 	vmul.f32	s17, s17, s14
	i = lrintf(r - 0.5f);
2401048e:	f002 fcf3 	bl	24012e78 <lrintf>
	r -= (float)i;
24010492:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010496:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401049a:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            if (!k && p >= b) {
2401049e:	eeb4 aacc 	vcmpe.f32	s20, s24
	r -= (float)i;
240104a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240104a6:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240104a8:	3701      	adds	r7, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240104aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240104ae:	f003 063f 	and.w	r6, r3, #63	; 0x3f
            if (!k && p >= b) {
240104b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
240104b6:	eedb 7a8c 	vfnms.f32	s15, s23, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240104ba:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240104be:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240104c2:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
240104c6:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240104ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
240104ce:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240104d2:	edc3 8a3c 	vstr	s17, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240104d6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240104da:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240104de:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (!k && p >= b) {
240104e2:	f200 8403 	bhi.w	24010cec <tMBTriangle_tick+0xc40>
                x = 0.5f - (p - b) * invB1;
240104e6:	ee7a 7a0b 	vadd.f32	s15, s20, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240104ea:	3701      	adds	r7, #1
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
240104ec:	ee7c ca4a 	vsub.f32	s25, s24, s20
	i = lrintf(r - 0.5f);
240104f0:	eeb0 0a49 	vmov.f32	s0, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240104f4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
240104f8:	ee77 7ac8 	vsub.f32	s15, s15, s16
240104fc:	eeb0 9a69 	vmov.f32	s18, s19
	i = lrintf(r - 0.5f);
24010500:	eeab 0aac 	vfma.f32	s0, s23, s25
                p -= 1.0f;
24010504:	eeb0 8a4c 	vmov.f32	s16, s24
                x = 0.5f - (p - b) * invB1;
24010508:	eea7 9a8d 	vfma.f32	s18, s15, s26
	i = lrintf(r - 0.5f);
2401050c:	f002 fcb4 	bl	24012e78 <lrintf>
	r -= (float)i;
24010510:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010514:	1c73      	adds	r3, r6, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24010516:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401051a:	eef1 7a68 	vneg.f32	s15, s17
	r -= (float)i;
2401051e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                k = 1;
24010526:	2601      	movs	r6, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010528:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401052c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	r -= (float)i;
24010530:	ee9b 7aac 	vfnms.f32	s14, s23, s25
	c->BLEPindices[c->mostRecentBLEP] = i;
24010534:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24010538:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401053c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010540:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010544:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010548:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401054c:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24010550:	e67d      	b.n	2401024e <tMBTriangle_tick+0x1a2>
24010552:	bf00      	nop
24010554:	2401a588 	.word	0x2401a588
24010558:	2401ec8c 	.word	0x2401ec8c
2401055c:	42800000 	.word	0x42800000
                x = 0.5f - (p - b) * invB1;;
24010560:	ed1f ca02 	vldr	s24, [pc, #-8]	; 2401055c <tMBTriangle_tick+0x4b0>
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
24010564:	ee78 da4a 	vsub.f32	s27, s16, s20
	i = lrintf(r - 0.5f);
24010568:	eeb0 0a69 	vmov.f32	s0, s19
2401056c:	ee2b ca8c 	vmul.f32	s24, s23, s24
                x = 0.5f - (p - b) * invB1;;
24010570:	ee7a 7a48 	vsub.f32	s15, s20, s16
24010574:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
24010578:	eead 0a8c 	vfma.f32	s0, s27, s24
2401057c:	ee3c ba8d 	vadd.f32	s22, s25, s26
                x = 0.5f - (p - b) * invB1;;
24010580:	eea7 9a8d 	vfma.f32	s18, s15, s26
	i = lrintf(r - 0.5f);
24010584:	f002 fc78 	bl	24012e78 <lrintf>
	r -= (float)i;
24010588:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401058c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010590:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24010594:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24010598:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401059c:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401059e:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240105a0:	ee68 7acb 	vnmul.f32	s15, s17, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240105a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240105a8:	ee9d 7a8c 	vfnms.f32	s14, s27, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240105ac:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240105b0:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240105b4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240105b8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240105bc:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240105c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240105c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240105c8:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240105cc:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240105d0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
                k = 1;
240105d4:	2301      	movs	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240105d6:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
240105da:	e5be      	b.n	2401015a <tMBTriangle_tick+0xae>
        else if (sw < 0)
240105dc:	f57f ae35 	bpl.w	2401024a <tMBTriangle_tick+0x19e>
            if (p < b) {
240105e0:	eeb4 8aca 	vcmpe.f32	s16, s20
240105e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240105e8:	f100 81ed 	bmi.w	240109c6 <tMBTriangle_tick+0x91a>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240105ec:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            if (p < 0.0f) {
240105f0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
240105f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240105f8:	f57f ae29 	bpl.w	2401024e <tMBTriangle_tick+0x1a2>
                p += 1.0f;
240105fc:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
24010600:	ed1f ba2a 	vldr	s22, [pc, #-168]	; 2401055c <tMBTriangle_tick+0x4b0>
	r = MINBLEP_PHASES * phase * inv_w;
24010604:	ee6b ba88 	vmul.f32	s23, s23, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010608:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
2401060a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                k = 1;
2401060e:	2601      	movs	r6, #1
                p += 1.0f;
24010610:	ee38 8a29 	vadd.f32	s16, s16, s19
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010614:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
24010618:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
2401061c:	eeab 0a8b 	vfma.f32	s0, s23, s22
                x = 0.5f - (p - b) * invB1;
24010620:	ee7a 7a48 	vsub.f32	s15, s20, s16
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
24010624:	ee7c ca8d 	vadd.f32	s25, s25, s26
                x = 0.5f - (p - b) * invB1;
24010628:	eea7 9a8d 	vfma.f32	s18, s15, s26
	i = lrintf(r - 0.5f);
2401062c:	f002 fc24 	bl	24012e78 <lrintf>
	r -= (float)i;
24010630:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010634:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24010638:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401063c:	ee6c cae8 	vnmul.f32	s25, s25, s17
	r -= (float)i;
24010640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010644:	3301      	adds	r3, #1
24010646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401064a:	eedb 7a8b 	vfnms.f32	s15, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401064e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010652:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24010656:	eb04 0343 	add.w	r3, r4, r3, lsl #1
2401065a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401065e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010662:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010666:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401066a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401066e:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24010672:	e5ec      	b.n	2401024e <tMBTriangle_tick+0x1a2>
            if (p < 0.0f) {
24010674:	eeb5 8a40 	vcmp.f32	s16, #0.0
24010678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401067c:	f57f ade5 	bpl.w	2401024a <tMBTriangle_tick+0x19e>
24010680:	eef5 8ac0 	vcmpe.f32	s17, #0.0
24010684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010688:	f57f addf 	bpl.w	2401024a <tMBTriangle_tick+0x19e>
	r = MINBLEP_PHASES * phase * inv_w;
2401068c:	ee6b da88 	vmul.f32	s27, s23, s16
	i = lrintf(r - 0.5f);
24010690:	ed1f ba4e 	vldr	s22, [pc, #-312]	; 2401055c <tMBTriangle_tick+0x4b0>
24010694:	eeb0 0a69 	vmov.f32	s0, s19
                p += 1.0f;
24010698:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
2401069c:	ee3c 9a8d 	vadd.f32	s18, s25, s26
	i = lrintf(r - 0.5f);
240106a0:	eead 0a8b 	vfma.f32	s0, s27, s22
240106a4:	f002 fbe8 	bl	24012e78 <lrintf>
	r -= (float)i;
240106a8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240106ac:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                p += 1.0f;
240106b0:	ee38 8a0c 	vadd.f32	s16, s16, s24
	r -= (float)i;
240106b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240106b8:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240106bc:	3301      	adds	r3, #1
240106be:	ee69 8a28 	vmul.f32	s17, s18, s17
            if (k && p < b) {
240106c2:	eeb4 aac8 	vcmpe.f32	s20, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240106c6:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240106c8:	f003 083f 	and.w	r8, r3, #63	; 0x3f
	r -= (float)i;
240106cc:	eedd 7a8b 	vfnms.f32	s15, s27, s22
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240106d0:	eeb1 7a68 	vneg.f32	s14, s17
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240106d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240106d8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
            if (k && p < b) {
240106dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240106e0:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
240106e4:	eb04 0248 	add.w	r2, r4, r8, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240106e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240106ec:	f8a4 8066 	strh.w	r8, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
240106f0:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240106f4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240106f8:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240106fc:	ed83 ca3d 	vstr	s24, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010700:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (k && p < b) {
24010704:	f340 844e 	ble.w	24010fa4 <tMBTriangle_tick+0xef8>
                x = -0.5f + p * invB;
24010708:	ee38 da4a 	vsub.f32	s26, s16, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401070c:	3701      	adds	r7, #1
2401070e:	ee2b ba8b 	vmul.f32	s22, s23, s22
	i = lrintf(r - 0.5f);
24010712:	eeb0 0a69 	vmov.f32	s0, s19
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010716:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = -0.5f + p * invB;
2401071a:	eeb0 9a69 	vmov.f32	s18, s19
	i = lrintf(r - 0.5f);
2401071e:	eeab 0a0d 	vfma.f32	s0, s22, s26
24010722:	f002 fba9 	bl	24012e78 <lrintf>
	r -= (float)i;
24010726:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401072a:	f108 0301 	add.w	r3, r8, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401072e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24010732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010736:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                x = -0.5f + p * invB;
2401073a:	eeac 9a88 	vfma.f32	s18, s25, s16
	r -= (float)i;
2401073e:	eedb 7a0d 	vfnms.f32	s15, s22, s26
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010742:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010746:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
2401074a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
2401074e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010752:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010756:	edc3 8a3c 	vstr	s17, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401075a:	ed83 ca3d 	vstr	s24, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401075e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010762:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24010766:	e572      	b.n	2401024e <tMBTriangle_tick+0x1a2>
    z += 0.5f * (c->_f[j] - z);
24010768:	eb04 0385 	add.w	r3, r4, r5, lsl #2
2401076c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
24010770:	e64d      	b.n	2401040e <tMBTriangle_tick+0x362>
            x = 0.5f - (p_at_reset - b) * invB1;
24010772:	ee7c 9a69 	vsub.f32	s19, s24, s19
24010776:	ee7a 7a08 	vadd.f32	s15, s20, s16
                if (p_at_reset >= 1.0f) {
2401077a:	eef4 dac9 	vcmpe.f32	s27, s18
            x = 0.5f - (p_at_reset - b) * invB1;
2401077e:	eeb0 ca4b 	vmov.f32	s24, s22
24010782:	ee77 7aa9 	vadd.f32	s15, s15, s19
                if (p_at_reset >= 1.0f) {
24010786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
2401078a:	eea7 ca8d 	vfma.f32	s24, s15, s26
                if (p_at_reset >= 1.0f) {
2401078e:	f280 81c6 	bge.w	24010b1e <tMBTriangle_tick+0xa72>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24010792:	ee3c ea8d 	vadd.f32	s28, s25, s26
24010796:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 2401055c <tMBTriangle_tick+0x4b0>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401079a:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
2401079e:	ee6b baa7 	vmul.f32	s23, s23, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240107a2:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
240107a6:	ee2e ea28 	vmul.f32	s28, s28, s17
	i = lrintf(r - 0.5f);
240107aa:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240107ae:	3601      	adds	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240107b0:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240107b2:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	i = lrintf(r - 0.5f);
240107b6:	eea8 0a2b 	vfma.f32	s0, s16, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240107ba:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
240107be:	f002 fb5b 	bl	24012e78 <lrintf>
	r -= (float)i;
240107c2:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240107c6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240107ca:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
240107ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240107d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240107d6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
240107da:	eb04 0046 	add.w	r0, r4, r6, lsl #1
	r -= (float)i;
240107de:	eed8 7a2b 	vfnms.f32	s15, s16, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
240107e2:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240107e6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240107ea:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240107ee:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
240107f2:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240107f6:	3601      	adds	r6, #1
            if (p >= b) {
240107f8:	eeb4 aac8 	vcmpe.f32	s20, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240107fc:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240107fe:	f006 063f 	and.w	r6, r6, #63	; 0x3f
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
24010802:	ee39 ca4c 	vsub.f32	s24, s18, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010806:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
2401080a:	eb04 0346 	add.w	r3, r4, r6, lsl #1
            if (p >= b) {
2401080e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010812:	eb06 0246 	add.w	r2, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010816:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	scale *= w;
2401081a:	ee2c ca28 	vmul.f32	s24, s24, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
2401081e:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010822:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010826:	f04f 0300 	mov.w	r3, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401082a:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401082e:	ed82 ca3c 	vstr	s24, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010832:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010836:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (p >= b) {
2401083a:	d93a      	bls.n	240108b2 <tMBTriangle_tick+0x806>
            x = -0.5f + p * invB;
2401083c:	eeac 9a88 	vfma.f32	s18, s25, s16
            k = 0;
24010840:	4646      	mov	r6, r8
24010842:	e504      	b.n	2401024e <tMBTriangle_tick+0x1a2>
                p -= 1.0f;
24010844:	ed5f 7abb 	vldr	s15, [pc, #-748]	; 2401055c <tMBTriangle_tick+0x4b0>
24010848:	ee38 8a69 	vsub.f32	s16, s16, s19
                x = -0.5f + p * invB;
2401084c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010850:	3701      	adds	r7, #1
24010852:	ee6b baa7 	vmul.f32	s23, s23, s15
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
24010856:	ee3c da8d 	vadd.f32	s26, s25, s26
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401085a:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = -0.5f + p * invB;
2401085e:	eeb0 9a40 	vmov.f32	s18, s0
	i = lrintf(r - 0.5f);
24010862:	eeab 0a88 	vfma.f32	s0, s23, s16
24010866:	f002 fb07 	bl	24012e78 <lrintf>
	r -= (float)i;
2401086a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401086e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24010872:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24010876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401087a:	3301      	adds	r3, #1
	scale *= w;
2401087c:	ee2d da28 	vmul.f32	s26, s26, s17
                x = -0.5f + p * invB;
24010880:	eeac 9a88 	vfma.f32	s18, s25, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24010888:	eedb 7a88 	vfnms.f32	s15, s23, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401088c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010890:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24010894:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24010898:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401089c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
240108a0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240108a4:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240108a8:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240108ac:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
240108b0:	e4cd      	b.n	2401024e <tMBTriangle_tick+0x1a2>
                x = 0.5f - (p - b) * invB1;
240108b2:	ee3a 7a48 	vsub.f32	s14, s20, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240108b6:	3701      	adds	r7, #1
                x = 0.5f - (p - b) * invB1;
240108b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
240108bc:	ee78 9a4a 	vsub.f32	s19, s16, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240108c0:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
240108c4:	eeb0 0a49 	vmov.f32	s0, s18
                x = 0.5f - (p - b) * invB1;
240108c8:	eee7 7a0d 	vfma.f32	s15, s14, s26
240108cc:	ee7c ca8d 	vadd.f32	s25, s25, s26
	i = lrintf(r - 0.5f);
240108d0:	eea9 0aab 	vfma.f32	s0, s19, s23
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240108d4:	ee68 caec 	vnmul.f32	s25, s17, s25
                x = 0.5f - (p - b) * invB1;
240108d8:	eeb0 9a67 	vmov.f32	s18, s15
	i = lrintf(r - 0.5f);
240108dc:	f002 facc 	bl	24012e78 <lrintf>
	r -= (float)i;
240108e0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240108e4:	1c73      	adds	r3, r6, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240108e6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240108ea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	r -= (float)i;
240108ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240108f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                k = 1;
240108f6:	2601      	movs	r6, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240108f8:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240108fc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	r -= (float)i;
24010900:	eed9 7aab 	vfnms.f32	s15, s19, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
24010904:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24010908:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401090c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010910:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010914:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010918:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401091c:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24010920:	e495      	b.n	2401024e <tMBTriangle_tick+0x1a2>
            x = -0.5f + p_at_reset * invB;
24010922:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24010926:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    p += sw - (int)sw;
2401092a:	eeb0 8a4e 	vmov.f32	s16, s28
            x = -0.5f + p_at_reset * invB;
2401092e:	eeac 9aad 	vfma.f32	s18, s25, s27
            else if (sw < 0)
24010932:	e48c      	b.n	2401024e <tMBTriangle_tick+0x1a2>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24010934:	ee7c 7a8d 	vadd.f32	s15, s25, s26
24010938:	ed9f 7af0 	vldr	s14, [pc, #960]	; 24010cfc <tMBTriangle_tick+0xc50>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401093c:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
24010940:	ee6b ba87 	vmul.f32	s23, s23, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010944:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
24010948:	ee67 eaa8 	vmul.f32	s29, s15, s17
                    p_at_reset -= 1.0f;
2401094c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010950:	3601      	adds	r6, #1
                    x = -0.5f + p_at_reset * invB;
24010952:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010956:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010958:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    p_at_reset -= 1.0f;
2401095c:	ee7d dae9 	vsub.f32	s27, s27, s19
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010960:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
24010964:	eeb0 0a49 	vmov.f32	s0, s18
                    x = -0.5f + p_at_reset * invB;
24010968:	eeb0 ca49 	vmov.f32	s24, s18
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
2401096c:	ee38 ba2d 	vadd.f32	s22, s16, s27
                    x = -0.5f + p_at_reset * invB;
24010970:	eeac caad 	vfma.f32	s24, s25, s27
	i = lrintf(r - 0.5f);
24010974:	eeab 0a2b 	vfma.f32	s0, s22, s23
24010978:	f002 fa7e 	bl	24012e78 <lrintf>
	r -= (float)i;
2401097c:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010980:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i = lrintf(r - 0.5f);
24010984:	eeb0 0a49 	vmov.f32	s0, s18
	r -= (float)i;
24010988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401098c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010990:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24010994:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	i = lrintf(r - 0.5f);
24010998:	eea8 0a2b 	vfma.f32	s0, s16, s23
	r -= (float)i;
2401099c:	eedb 7a2b 	vfnms.f32	s15, s22, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
240109a0:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240109a4:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240109a8:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240109ac:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	i = lrintf(r - 0.5f);
240109b0:	f002 fa62 	bl	24012e78 <lrintf>
	r -= (float)i;
240109b4:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
240109b8:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
240109bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240109c0:	eed8 7a2b 	vfnms.f32	s15, s16, s23
240109c4:	e715      	b.n	240107f2 <tMBTriangle_tick+0x746>
                x = -0.5f + p * invB;
240109c6:	ed9f bacd 	vldr	s22, [pc, #820]	; 24010cfc <tMBTriangle_tick+0xc50>
240109ca:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240109ce:	ee78 9a4a 	vsub.f32	s19, s16, s20
                k = 0;
240109d2:	2600      	movs	r6, #0
240109d4:	ee2b ba8b 	vmul.f32	s22, s23, s22
                x = -0.5f + p * invB;
240109d8:	eeb0 9a40 	vmov.f32	s18, s0
	i = lrintf(r - 0.5f);
240109dc:	eeab 0a29 	vfma.f32	s0, s22, s19
240109e0:	f002 fa4a 	bl	24012e78 <lrintf>
	r -= (float)i;
240109e4:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240109e8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
240109ec:	ee7c 7a8d 	vadd.f32	s15, s25, s26
	r -= (float)i;
240109f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240109f4:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240109f8:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240109fa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240109fe:	3701      	adds	r7, #1
	scale *= w;
24010a00:	ee67 7aa8 	vmul.f32	s15, s15, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24010a08:	ee9b 7a29 	vfnms.f32	s14, s22, s19
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010a0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010a10:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010a14:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010a18:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24010a1c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
                x = -0.5f + p * invB;
24010a20:	eea8 9a2c 	vfma.f32	s18, s16, s25
	c->BLEPindices[c->mostRecentBLEP] = i;
24010a24:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010a28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
24010a2c:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010a30:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010a34:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010a38:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24010a3c:	e5d8      	b.n	240105f0 <tMBTriangle_tick+0x544>
        else if (sw < 0) p = 1.0f - eof_offset;
24010a3e:	ee79 ea48 	vsub.f32	s29, s18, s16
        if (!k) {
24010a42:	2e00      	cmp	r6, #0
24010a44:	f040 8123 	bne.w	24010c8e <tMBTriangle_tick+0xbe2>
                if (p_at_reset < 0.0f) {
24010a48:	eef5 dac0 	vcmpe.f32	s27, #0.0
24010a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010a50:	f100 818e 	bmi.w	24010d70 <tMBTriangle_tick+0xcc4>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24010a54:	ee7c 9a8d 	vadd.f32	s19, s25, s26
24010a58:	eddf 7aa8 	vldr	s15, [pc, #672]	; 24010cfc <tMBTriangle_tick+0xc50>
            x = -0.5f + p_at_reset * invB;
24010a5c:	ee6c daad 	vmul.f32	s27, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010a60:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
24010a64:	ee6b baa7 	vmul.f32	s23, s23, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010a68:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
24010a6c:	ee68 9ae9 	vnmul.f32	s19, s17, s19
	i = lrintf(r - 0.5f);
24010a70:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010a74:	3601      	adds	r6, #1
24010a76:	eeb1 9a48 	vneg.f32	s18, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010a7a:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010a7c:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	i = lrintf(r - 0.5f);
24010a80:	eea8 0a6b 	vfms.f32	s0, s16, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010a84:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
24010a88:	f002 f9f6 	bl	24012e78 <lrintf>
	r -= (float)i;
24010a8c:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010a90:	eb06 0246 	add.w	r2, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24010a94:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
24010a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010a9c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010aa0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24010aa4:	eb04 0046 	add.w	r0, r4, r6, lsl #1
	r -= (float)i;
24010aa8:	eed9 7a2b 	vfnms.f32	s15, s18, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
24010aac:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010ab0:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010ab4:	edc2 9a3c 	vstr	s19, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010ab8:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010abc:	3601      	adds	r6, #1
            if (p < b) {
24010abe:	eeb4 aaee 	vcmpe.f32	s20, s29
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010ac2:	3701      	adds	r7, #1
	scale *= w;
24010ac4:	ee28 7aad 	vmul.f32	s14, s17, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010ac8:	f006 093f 	and.w	r9, r6, #63	; 0x3f
            if (p < b) {
24010acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010ad0:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010ad4:	eb09 0249 	add.w	r2, r9, r9, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010ad8:	f8a4 9066 	strh.w	r9, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24010adc:	eb04 0149 	add.w	r1, r4, r9, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010ae0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24010ae4:	f8a1 306c 	strh.w	r3, [r1, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010ae8:	f04f 0300 	mov.w	r3, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010aec:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010af0:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010af4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010af8:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (p < b) {
24010afc:	f300 8100 	bgt.w	24010d00 <tMBTriangle_tick+0xc54>
            x = 0.5f - (p - b) * invB1;
24010b00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            k = 1;
24010b04:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
24010b06:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
24010b0a:	ee78 7a67 	vsub.f32	s15, s16, s15
24010b0e:	eeb0 8a6e 	vmov.f32	s16, s29
24010b12:	ee77 7a8a 	vadd.f32	s15, s15, s20
24010b16:	eea7 9a8d 	vfma.f32	s18, s15, s26
24010b1a:	f7ff bb98 	b.w	2401024e <tMBTriangle_tick+0x1a2>
                    p_at_reset -= 1.0f;
24010b1e:	ee7d dac9 	vsub.f32	s27, s27, s18
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24010b22:	eddf 7a76 	vldr	s15, [pc, #472]	; 24010cfc <tMBTriangle_tick+0xc50>
	i = lrintf(r - 0.5f);
24010b26:	eebe ca00 	vmov.f32	s24, #224	; 0xbf000000 -0.5
24010b2a:	ee6b baa7 	vmul.f32	s23, s23, s15
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24010b2e:	ee78 ea2d 	vadd.f32	s29, s16, s27
	i = lrintf(r - 0.5f);
24010b32:	eeb0 0a4c 	vmov.f32	s0, s24
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24010b36:	ee3c ea8d 	vadd.f32	s28, s25, s26
	i = lrintf(r - 0.5f);
24010b3a:	eeae 0aab 	vfma.f32	s0, s29, s23
24010b3e:	f002 f99b 	bl	24012e78 <lrintf>
	r -= (float)i;
24010b42:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010b46:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (!k && p_at_reset >= b) {
24010b4a:	eeb4 aaed 	vcmpe.f32	s20, s27
	r -= (float)i;
24010b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010b52:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010b56:	3301      	adds	r3, #1
	scale *= w;
24010b58:	ee2e ea28 	vmul.f32	s28, s28, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010b5c:	3701      	adds	r7, #1
                if (!k && p_at_reset >= b) {
24010b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010b62:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
24010b66:	eede 7aab 	vfnms.f32	s15, s29, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24010b6a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010b6e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010b72:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24010b76:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010b7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24010b7e:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010b82:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010b86:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010b8a:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010b8e:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (!k && p_at_reset >= b) {
24010b92:	f200 8190 	bhi.w	24010eb6 <tMBTriangle_tick+0xe0a>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24010b96:	ee78 7a4a 	vsub.f32	s15, s16, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010b9a:	3601      	adds	r6, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
24010b9c:	ee3a 7a09 	vadd.f32	s14, s20, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010ba0:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
24010ba2:	eeb0 0a4c 	vmov.f32	s0, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010ba6:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24010baa:	ee77 daad 	vadd.f32	s27, s15, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010bae:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                    x = 0.5f - (p_at_reset - b) * invB1;
24010bb2:	ee37 7a08 	vadd.f32	s14, s14, s16
	i = lrintf(r - 0.5f);
24010bb6:	eead 0aab 	vfma.f32	s0, s27, s23
                    x = 0.5f - (p_at_reset - b) * invB1;
24010bba:	ee77 9a29 	vadd.f32	s19, s14, s19
	i = lrintf(r - 0.5f);
24010bbe:	f002 f95b 	bl	24012e78 <lrintf>
	r -= (float)i;
24010bc2:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010bc6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010bca:	eeb1 7a4e 	vneg.f32	s14, s28
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24010bce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24010bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010bd6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                    x = 0.5f - (p_at_reset - b) * invB1;
24010bda:	eea9 ba8d 	vfma.f32	s22, s19, s26
	c->BLEPindices[c->mostRecentBLEP] = i;
24010bde:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	r -= (float)i;
24010be2:	eedd 7aab 	vfnms.f32	s15, s27, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
24010be6:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010bea:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010bee:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
                    x = 0.5f - (p_at_reset - b) * invB1;
24010bf2:	eeb0 ca4b 	vmov.f32	s24, s22
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010bf6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
        if (sw > 0)
24010bfa:	e5d6      	b.n	240107aa <tMBTriangle_tick+0x6fe>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24010bfc:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 24010cfc <tMBTriangle_tick+0xc50>
24010c00:	ee3e fa4a 	vsub.f32	s30, s28, s20
	i = lrintf(r - 0.5f);
24010c04:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24010c08:	ee6b ba87 	vmul.f32	s23, s23, s14
24010c0c:	ee7c 7a8d 	vadd.f32	s15, s25, s26
24010c10:	eeaf 0a2b 	vfma.f32	s0, s30, s23
24010c14:	ee27 eaa8 	vmul.f32	s28, s15, s17
24010c18:	f002 f92e 	bl	24012e78 <lrintf>
	r -= (float)i;
24010c1c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010c20:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010c24:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
24010c28:	eef4 dac9 	vcmpe.f32	s27, s18
	r -= (float)i;
24010c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010c30:	1c5e      	adds	r6, r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010c32:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010c34:	eeb1 7a4e 	vneg.f32	s14, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010c38:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
24010c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
24010c40:	eedf 7a2b 	vfnms.f32	s15, s30, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24010c44:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010c48:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010c4c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24010c50:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010c54:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010c58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24010c5c:	eef0 ea4e 	vmov.f32	s29, s28
	c->BLEPindices[c->mostRecentBLEP] = i;
24010c60:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010c64:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010c68:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010c6c:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010c70:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
24010c74:	f6bf ae6a 	bge.w	2401094c <tMBTriangle_tick+0x8a0>
                    x = 0.5f - (p_at_reset - b) * invB1;
24010c78:	ee7a 7a08 	vadd.f32	s15, s20, s16
24010c7c:	ee77 7a8c 	vadd.f32	s15, s15, s24
24010c80:	ee77 7ae9 	vsub.f32	s15, s15, s19
24010c84:	eea7 ba8d 	vfma.f32	s22, s15, s26
24010c88:	eeb0 ca4b 	vmov.f32	s24, s22
24010c8c:	e58d      	b.n	240107aa <tMBTriangle_tick+0x6fe>
            x = 0.5f - (p_at_reset - b) * invB1;
24010c8e:	ee7c 9a69 	vsub.f32	s19, s24, s19
24010c92:	ee3a 7a08 	vadd.f32	s14, s20, s16
                if (p_at_reset < b) {
24010c96:	eeb4 aaed 	vcmpe.f32	s20, s27
            x = 0.5f - (p_at_reset - b) * invB1;
24010c9a:	ee39 7a87 	vadd.f32	s14, s19, s14
                if (p_at_reset < b) {
24010c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
24010ca2:	ee6d 7a07 	vmul.f32	s15, s26, s14
                if (p_at_reset < b) {
24010ca6:	f300 80c8 	bgt.w	24010e3a <tMBTriangle_tick+0xd8e>
                if (p_at_reset < 0.0f) {
24010caa:	eef5 dac0 	vcmpe.f32	s27, #0.0
24010cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010cb2:	f100 8111 	bmi.w	24010ed8 <tMBTriangle_tick+0xe2c>
        else if (sw < 0)
24010cb6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 24010cfc <tMBTriangle_tick+0xc50>
	i = lrintf(r - 0.5f);
24010cba:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24010cbe:	ee77 da89 	vadd.f32	s27, s15, s18
24010cc2:	ee6b ba87 	vmul.f32	s23, s23, s14
24010cc6:	eeb1 9a48 	vneg.f32	s18, s16
24010cca:	eea8 0a6b 	vfms.f32	s0, s16, s23
24010cce:	f002 f8d3 	bl	24012e78 <lrintf>
	r -= (float)i;
24010cd2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010cd6:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24010cda:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
24010cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010ce2:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	r -= (float)i;
24010ce6:	eed9 7a2b 	vfnms.f32	s15, s18, s23
24010cea:	e6e7      	b.n	24010abc <tMBTriangle_tick+0xa10>
                x = -0.5f + p * invB;
24010cec:	eeac 9a8c 	vfma.f32	s18, s25, s24
                k = 0;
24010cf0:	2600      	movs	r6, #0
                p -= 1.0f;
24010cf2:	eeb0 8a4c 	vmov.f32	s16, s24
24010cf6:	f7ff baaa 	b.w	2401024e <tMBTriangle_tick+0x1a2>
24010cfa:	bf00      	nop
24010cfc:	42800000 	.word	0x42800000
                x = -0.5f + p * invB;
24010d00:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010d04:	3701      	adds	r7, #1
24010d06:	ee7e 9aca 	vsub.f32	s19, s29, s20
                k = 0;
24010d0a:	4646      	mov	r6, r8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010d0c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
}
24010d10:	eeb0 8a6e 	vmov.f32	s16, s29
	i = lrintf(r - 0.5f);
24010d14:	eeb0 0a49 	vmov.f32	s0, s18
                x = -0.5f + p * invB;
24010d18:	eeac 9aae 	vfma.f32	s18, s25, s29
	scale *= w;
24010d1c:	ee7c ca8d 	vadd.f32	s25, s25, s26
	i = lrintf(r - 0.5f);
24010d20:	eea9 0aab 	vfma.f32	s0, s19, s23
24010d24:	f002 f8a8 	bl	24012e78 <lrintf>
	r -= (float)i;
24010d28:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010d2c:	f109 0301 	add.w	r3, r9, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24010d30:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24010d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	scale *= w;
24010d3c:	ee6c 8aa8 	vmul.f32	s17, s25, s17
	r -= (float)i;
24010d40:	eed9 7aab 	vfnms.f32	s15, s19, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010d44:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010d48:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24010d4c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24010d50:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010d54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010d58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010d5c:	edc3 8a3c 	vstr	s17, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010d60:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010d64:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010d68:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24010d6c:	f7ff ba6f 	b.w	2401024e <tMBTriangle_tick+0x1a2>
	i = lrintf(r - 0.5f);
24010d70:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
24010d74:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 24010cfc <tMBTriangle_tick+0xc50>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24010d78:	ee3c ba8d 	vadd.f32	s22, s25, s26
24010d7c:	ee6b baa7 	vmul.f32	s23, s23, s15
	i = lrintf(r - 0.5f);
24010d80:	eeb0 0a6f 	vmov.f32	s0, s31
                    p_at_reset += 1.0f;
24010d84:	ee3d fa89 	vadd.f32	s30, s27, s18
	i = lrintf(r - 0.5f);
24010d88:	ee2b ba28 	vmul.f32	s22, s22, s17
24010d8c:	eeae 0a2b 	vfma.f32	s0, s28, s23
24010d90:	f002 f872 	bl	24012e78 <lrintf>
	r -= (float)i;
24010d94:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010d98:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (k && p_at_reset < b) {
24010d9c:	eeb4 aacf 	vcmpe.f32	s20, s30
	r -= (float)i;
24010da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010da4:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010da8:	3301      	adds	r3, #1
24010daa:	eef1 9a4b 	vneg.f32	s19, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010dae:	3701      	adds	r7, #1
                if (k && p_at_reset < b) {
24010db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010db4:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
24010db8:	eede 7a2b 	vfnms.f32	s15, s28, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24010dbc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010dc0:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010dc4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24010dc8:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010dcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24010dd0:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010dd4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010dd8:	edc3 9a3c 	vstr	s19, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010ddc:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010de0:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (k && p_at_reset < b) {
24010de4:	f340 80c7 	ble.w	24010f76 <tMBTriangle_tick+0xeca>
                    x = -0.5f + p_at_reset * invB;
24010de8:	ee38 ca4a 	vsub.f32	s24, s16, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010dec:	3601      	adds	r6, #1
	i = lrintf(r - 0.5f);
24010dee:	eeb0 0a6f 	vmov.f32	s0, s31
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010df2:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010df4:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    x = -0.5f + p_at_reset * invB;
24010df8:	ee6c da8f 	vmul.f32	s27, s25, s30
	r = MINBLEP_PHASES * phase * inv_w;
24010dfc:	ee3c ca0f 	vadd.f32	s24, s24, s30
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010e00:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
24010e04:	eeac 0a2b 	vfma.f32	s0, s24, s23
24010e08:	f002 f836 	bl	24012e78 <lrintf>
	r -= (float)i;
24010e0c:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010e10:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24010e14:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24010e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
24010e1c:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010e20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24010e24:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
	r -= (float)i;
24010e28:	eedc 7a2b 	vfnms.f32	s15, s24, s23
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010e2c:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010e30:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010e34:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
        else if (sw < 0)
24010e38:	e61a      	b.n	24010a70 <tMBTriangle_tick+0x9c4>
	r = MINBLEP_PHASES * phase * inv_w;
24010e3a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 24010cfc <tMBTriangle_tick+0xc50>
24010e3e:	ee38 ca47 	vsub.f32	s24, s16, s14
	i = lrintf(r - 0.5f);
24010e42:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24010e46:	ee6b baa7 	vmul.f32	s23, s23, s15
	scale *= w;
24010e4a:	ee3c ba8d 	vadd.f32	s22, s25, s26
	i = lrintf(r - 0.5f);
24010e4e:	eeac 0a2b 	vfma.f32	s0, s24, s23
24010e52:	f002 f811 	bl	24012e78 <lrintf>
	r -= (float)i;
24010e56:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010e5a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (p_at_reset < 0.0f) {
24010e5e:	eef5 dac0 	vcmpe.f32	s27, #0.0
	r -= (float)i;
24010e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010e66:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010e6a:	3301      	adds	r3, #1
	scale *= w;
24010e6c:	ee2b ba28 	vmul.f32	s22, s22, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010e70:	3701      	adds	r7, #1
                if (p_at_reset < 0.0f) {
24010e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010e76:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
24010e7a:	eedc 7a2b 	vfnms.f32	s15, s24, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24010e7e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010e82:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010e86:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010e8a:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24010e8e:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010e92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24010e96:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010e9a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010e9e:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010ea2:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010ea6:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset < 0.0f) {
24010eaa:	d421      	bmi.n	24010ef0 <tMBTriangle_tick+0xe44>
                    x = -0.5f + p_at_reset * invB;
24010eac:	ee6c daad 	vmul.f32	s27, s25, s27
        else if (sw < 0)
24010eb0:	eef1 9a4b 	vneg.f32	s19, s22
24010eb4:	e5dc      	b.n	24010a70 <tMBTriangle_tick+0x9c4>
	i = lrintf(r - 0.5f);
24010eb6:	eeb0 0a4c 	vmov.f32	s0, s24
                    x = -0.5f + p_at_reset * invB;
24010eba:	eeac caad 	vfma.f32	s24, s25, s27
	i = lrintf(r - 0.5f);
24010ebe:	eeab 0a88 	vfma.f32	s0, s23, s16
24010ec2:	f001 ffd9 	bl	24012e78 <lrintf>
	r -= (float)i;
24010ec6:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24010eca:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
24010ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24010ed2:	eedb 7a88 	vfnms.f32	s15, s23, s16
24010ed6:	e48c      	b.n	240107f2 <tMBTriangle_tick+0x746>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24010ed8:	ee3c ba8d 	vadd.f32	s22, s25, s26
24010edc:	ed5f 7a79 	vldr	s15, [pc, #-484]	; 24010cfc <tMBTriangle_tick+0xc50>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010ee0:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
24010ee4:	ee6b baa7 	vmul.f32	s23, s23, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010ee8:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
24010eec:	ee2b ba28 	vmul.f32	s22, s22, s17
                    x = 0.5f - (p_at_reset - b) * invB1;
24010ef0:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010ef4:	3601      	adds	r6, #1
	i = lrintf(r - 0.5f);
24010ef6:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010efa:	3701      	adds	r7, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
24010efc:	ee79 9a88 	vadd.f32	s19, s19, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24010f00:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    x = 0.5f - (p_at_reset - b) * invB1;
24010f04:	ee7a 7a4c 	vsub.f32	s15, s20, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24010f08:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
24010f0c:	eeb0 0a4f 	vmov.f32	s0, s30
24010f10:	eef0 da4c 	vmov.f32	s27, s24
                    x = 0.5f - (p_at_reset - b) * invB1;
24010f14:	ee79 7aa7 	vadd.f32	s15, s19, s15
	i = lrintf(r - 0.5f);
24010f18:	eeae 0a2b 	vfma.f32	s0, s28, s23
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010f1c:	eef1 9a4b 	vneg.f32	s19, s22
24010f20:	eee7 da8d 	vfma.f32	s27, s15, s26
	i = lrintf(r - 0.5f);
24010f24:	f001 ffa8 	bl	24012e78 <lrintf>
	r -= (float)i;
24010f28:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010f2c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i = lrintf(r - 0.5f);
24010f30:	eeb0 0a4f 	vmov.f32	s0, s30
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24010f34:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24010f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010f3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24010f40:	eb04 0246 	add.w	r2, r4, r6, lsl #1
24010f44:	eeb1 9a48 	vneg.f32	s18, s16
	i = lrintf(r - 0.5f);
24010f48:	eea8 0a6b 	vfms.f32	s0, s16, s23
	r -= (float)i;
24010f4c:	eede 7a2b 	vfnms.f32	s15, s28, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
24010f50:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24010f54:	edc3 9a3c 	vstr	s19, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24010f58:	ed83 ca3d 	vstr	s24, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24010f5c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	i = lrintf(r - 0.5f);
24010f60:	f001 ff8a 	bl	24012e78 <lrintf>
	r -= (float)i;
24010f64:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24010f68:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
24010f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24010f70:	eedb 7a89 	vfnms.f32	s15, s23, s18
24010f74:	e5a2      	b.n	24010abc <tMBTriangle_tick+0xa10>
                    x = 0.5f - (p_at_reset - b)  * invB1;
24010f76:	ee3a ca4f 	vsub.f32	s24, s20, s30
	i = lrintf(r - 0.5f);
24010f7a:	eeb0 0a6f 	vmov.f32	s0, s31
24010f7e:	eef1 9a48 	vneg.f32	s19, s16
24010f82:	eeac 9a0d 	vfma.f32	s18, s24, s26
24010f86:	eea8 0a6b 	vfms.f32	s0, s16, s23
24010f8a:	f001 ff75 	bl	24012e78 <lrintf>
	r -= (float)i;
24010f8e:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24010f92:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
24010f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24010f9a:	eef0 da49 	vmov.f32	s27, s18
24010f9e:	eedb 7aa9 	vfnms.f32	s15, s23, s19
24010fa2:	e58b      	b.n	24010abc <tMBTriangle_tick+0xa10>
                x = 0.5f - (p - b) * invB1;
24010fa4:	ee7a 7a48 	vsub.f32	s15, s20, s16
                k = 1;
24010fa8:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
24010faa:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
24010fae:	eea7 9a8d 	vfma.f32	s18, s15, s26
24010fb2:	f7ff b94c 	b.w	2401024e <tMBTriangle_tick+0x1a2>
    p += sw - (int)sw;
24010fb6:	eeb0 8a4e 	vmov.f32	s16, s28
24010fba:	f7ff b8b7 	b.w	2401012c <tMBTriangle_tick+0x80>
24010fbe:	bf00      	nop

24010fc0 <tMBTriangle_setFreq>:

void tMBTriangle_setFreq(tMBTriangle* const osc, float f)
{
    _tMBTriangle* c = *osc;
24010fc0:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
24010fc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24010fc6:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
24010fca:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24010fce:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
24010fd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24010fd6:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
24010fda:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    //c->quarterwaveoffset = c->_w * 0.25f;
}
24010fde:	4770      	bx	lr

24010fe0 <tMBTriangle_setWidth>:

void tMBTriangle_setWidth(tMBTriangle* const osc, float w)
{
24010fe0:	b510      	push	{r4, lr}
    _tMBTriangle* c = *osc;
24010fe2:	6804      	ldr	r4, [r0, #0]
{
24010fe4:	eef0 0a40 	vmov.f32	s1, s0
    w = LEAF_clip(0.0f, w, 0.99f);
24010fe8:	ed9f 1a04 	vldr	s2, [pc, #16]	; 24010ffc <tMBTriangle_setWidth+0x1c>
24010fec:	ed9f 0a04 	vldr	s0, [pc, #16]	; 24011000 <tMBTriangle_setWidth+0x20>
24010ff0:	f017 fe2e 	bl	24028c50 <__LEAF_clip_veneer>
    c->waveform = w;
24010ff4:	ed84 0a03 	vstr	s0, [r4, #12]
}
24010ff8:	bd10      	pop	{r4, pc}
24010ffa:	bf00      	nop
24010ffc:	3f7d70a4 	.word	0x3f7d70a4
24011000:	00000000 	.word	0x00000000

24011004 <tMBTriangle_sync>:

float tMBTriangle_sync(tMBTriangle* const osc, float value)
{
    _tMBTriangle* c = *osc;
24011004:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24011006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
2401100a:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
2401100e:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
24011012:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
24011016:	eef1 7a67 	vneg.f32	s15, s15
2401101a:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
2401101e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
24011022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011026:	eef4 6ac7 	vcmpe.f32	s13, s14
2401102a:	bfcc      	ite	gt
2401102c:	2201      	movgt	r2, #1
2401102e:	2200      	movle	r2, #0
24011030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011034:	f002 0201 	and.w	r2, r2, #1
24011038:	bf88      	it	hi
2401103a:	2200      	movhi	r2, #0
2401103c:	b122      	cbz	r2, 24011048 <tMBTriangle_sync+0x44>
2401103e:	eeb5 0a40 	vcmp.f32	s0, #0.0
24011042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011046:	da04      	bge.n	24011052 <tMBTriangle_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
24011048:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24011060 <tMBTriangle_sync+0x5c>
2401104c:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
24011050:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
24011052:	ee37 7a66 	vsub.f32	s14, s14, s13
24011056:	ee27 7a06 	vmul.f32	s14, s14, s12
2401105a:	ed83 7a05 	vstr	s14, [r3, #20]
}
2401105e:	4770      	bx	lr
24011060:	00000000 	.word	0x00000000

24011064 <tMBSineTri_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBSineTri_tick(tMBSineTri* const osc)
{
24011064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tMBSineTri* c = *osc;
24011068:	6804      	ldr	r4, [r0, #0]
{
2401106a:	ed2d 8b10 	vpush	{d8-d15}

    p = c->_p;  /* phase [0, 1) */
    sinPhase = c->_sinPhase;
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
2401106e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */



    b = 0.5f * (1.0f + c->waveform);
24011072:	ed94 9a03 	vldr	s18, [r4, #12]
24011076:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    sync = c->sync;
2401107a:	ed94 7a05 	vldr	s14, [r4, #20]
    invB = 1.0f / b;
2401107e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
{
24011082:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
24011084:	ee39 9a28 	vadd.f32	s18, s18, s17
    p = c->_p;  /* phase [0, 1) */
24011088:	ed94 aa08 	vldr	s20, [r4, #32]
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
2401108c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    sinPhase = c->_sinPhase;
24011090:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
    invB = 1.0f / b;
24011094:	eec8 caa7 	vdiv.f32	s25, s17, s15
    w = c->_w;  /* phase increment */
24011098:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
2401109c:	edd4 9a0b 	vldr	s19, [r4, #44]	; 0x2c
    j = c->_j;  /* index into buffer _f */
240110a0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
240110a2:	6be6      	ldr	r6, [r4, #60]	; 0x3c
    b = 0.5f * (1.0f + c->waveform);
240110a4:	ee29 9a0b 	vmul.f32	s18, s18, s22
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
240110a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
240110ac:	ee78 7ac9 	vsub.f32	s15, s17, s18
    invB1 = 1.0f / b1;
240110b0:	ee88 daa7 	vdiv.f32	s26, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
240110b4:	f340 8088 	ble.w	240111c8 <tMBSineTri_tick+0x164>
240110b8:	f8d4 801c 	ldr.w	r8, [r4, #28]
240110bc:	f1b8 0f00 	cmp.w	r8, #0
240110c0:	dd36      	ble.n	24011130 <tMBSineTri_tick+0xcc>
240110c2:	ed94 7a06 	vldr	s14, [r4, #24]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
240110c6:	ed94 ca10 	vldr	s24, [r4, #64]	; 0x40
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
240110ca:	eeb1 7a47 	vneg.f32	s14, s14
    sw = w * c->syncdir;
240110ce:	ee67 ba2b 	vmul.f32	s23, s14, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
240110d2:	ed84 7a06 	vstr	s14, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
240110d6:	ee27 ca0c 	vmul.f32	s24, s14, s24
    float inc_amount = sw - (int)sw;
240110da:	eefd 7aeb 	vcvt.s32.f32	s15, s23
240110de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240110e2:	ee7b 7ae7 	vsub.f32	s15, s23, s15
    p += inc_amount;
240110e6:	ee37 aa8a 	vadd.f32	s20, s15, s20
    sinPhase += inc_amount;
240110ea:	ee37 8a88 	vadd.f32	s16, s15, s16
                x = -0.5f + p * invB;
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
240110ee:	2e00      	cmp	r6, #0
240110f0:	d173      	bne.n	240111da <tMBSineTri_tick+0x176>

        x = -0.5f + p * invB;
240110f2:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
        if (sw > 0)
240110f6:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = -0.5f + p * invB;
240110fa:	eef0 8a6a 	vmov.f32	s17, s21
        if (sw > 0)
240110fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
24011102:	eeea 8a2c 	vfma.f32	s17, s20, s25
        if (sw > 0)
24011106:	f340 82e5 	ble.w	240116d4 <tMBSineTri_tick+0x670>
        {
            if (p >= b) {
2401110a:	eeb4 aac9 	vcmpe.f32	s20, s18
2401110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011112:	f280 8255 	bge.w	240115c0 <tMBSineTri_tick+0x55c>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011116:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
2401111a:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
2401111c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
24011120:	eeb4 aaea 	vcmpe.f32	s20, s21
24011124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011128:	f280 83b8 	bge.w	2401189c <tMBSineTri_tick+0x838>
2401112c:	461e      	mov	r6, r3
2401112e:	e06c      	b.n	2401120a <tMBSineTri_tick+0x1a6>
    sw = w * c->syncdir;
24011130:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
24011134:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
24011138:	ee6b ba8c 	vmul.f32	s23, s23, s24
    float inv_sw = c->_inv_w * c->syncdir;
2401113c:	ee2c ca27 	vmul.f32	s24, s24, s15
    float inc_amount = sw - (int)sw;
24011140:	eefd 7aeb 	vcvt.s32.f32	s15, s23
24011144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24011148:	ee7b 7ae7 	vsub.f32	s15, s23, s15
    p += inc_amount;
2401114c:	ee77 aa8a 	vadd.f32	s21, s15, s20
    sinPhase += inc_amount;
24011150:	ee77 7a88 	vadd.f32	s15, s15, s16
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
24011154:	f040 875b 	bne.w	2401200e <tMBSineTri_tick+0xfaa>
        if (sw > 0)
24011158:	eef5 bac0 	vcmpe.f32	s23, #0.0
        float eof_offset = sync * sw;
2401115c:	ee2b 8a87 	vmul.f32	s16, s23, s14
        if (sw > 0)
24011160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
24011164:	ee7a dac8 	vsub.f32	s27, s21, s16
        if (sw > 0)
24011168:	f340 819a 	ble.w	240114a0 <tMBSineTri_tick+0x43c>
        	p = eof_offset + 0.25f;
2401116c:	eeb5 aa00 	vmov.f32	s20, #80	; 0x3e800000  0.250
24011170:	ee38 aa0a 	vadd.f32	s20, s16, s20
        if (!k) {
24011174:	2e00      	cmp	r6, #0
24011176:	f040 832c 	bne.w	240117d2 <tMBSineTri_tick+0x76e>
                if (p_at_reset >= b) {
2401117a:	eeb4 9aed 	vcmpe.f32	s18, s27
2401117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011182:	f240 856f 	bls.w	24011c64 <tMBSineTri_tick+0xc00>
                if (p_at_reset >= 1.0f) {
24011186:	eef4 dae8 	vcmpe.f32	s27, s17
2401118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401118e:	f280 83fd 	bge.w	2401198c <tMBSineTri_tick+0x928>
24011192:	eddf 7ad1 	vldr	s15, [pc, #836]	; 240114d8 <tMBSineTri_tick+0x474>
            x = -0.5f + p_at_reset * invB;
24011196:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401119a:	ee2c ca27 	vmul.f32	s24, s24, s15
2401119e:	eeb0 fa40 	vmov.f32	s30, s0
	i = lrintf(r - 0.5f);
240111a2:	eeaa 0a0c 	vfma.f32	s0, s20, s24
240111a6:	f001 fe67 	bl	24012e78 <lrintf>
	r -= (float)i;
240111aa:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
240111ae:	eeac faad 	vfma.f32	s30, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240111b2:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
	r -= (float)i;
240111b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
240111ba:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240111be:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	r -= (float)i;
240111c2:	eeda 7a0c 	vfnms.f32	s15, s20, s24
240111c6:	e342      	b.n	2401184e <tMBSineTri_tick+0x7ea>
    sw = w * c->syncdir;
240111c8:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
240111cc:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
240111d0:	ee6b ba8c 	vmul.f32	s23, s23, s24
    float inv_sw = c->_inv_w * c->syncdir;
240111d4:	ee2c ca27 	vmul.f32	s24, s24, s15
240111d8:	e77f      	b.n	240110da <tMBSineTri_tick+0x76>
            }
        }

    } else {  /* normal operation, slope currently down */

        x = 0.5f - (p - b) * invB1;
240111da:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        if (sw > 0)
240111de:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = 0.5f - (p - b) * invB1;
240111e2:	ee79 7a4a 	vsub.f32	s15, s18, s20
240111e6:	eef0 8a6a 	vmov.f32	s17, s21
        if (sw > 0)
240111ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
240111ee:	eee7 8a8d 	vfma.f32	s17, s15, s26
        if (sw > 0)
240111f2:	f340 8223 	ble.w	2401163c <tMBSineTri_tick+0x5d8>
        {
            if (p >= 1.0f) {
240111f6:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
240111fa:	eeb4 aacb 	vcmpe.f32	s20, s22
240111fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011202:	f280 816b 	bge.w	240114dc <tMBSineTri_tick+0x478>
    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151

    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine


    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24011206:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    while (sinPhase >= 1.0f)
2401120a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
2401120e:	1d2b      	adds	r3, r5, #4
    c->_f[currentSamp] = x * c->shape; //add the triangle
24011210:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24011214:	f003 0307 	and.w	r3, r3, #7
    while (sinPhase >= 1.0f)
24011218:	eeb4 8ac7 	vcmpe.f32	s16, s14
    c->_f[currentSamp] = x * c->shape; //add the triangle
2401121c:	ee64 8a28 	vmul.f32	s17, s8, s17
    while (sinPhase >= 1.0f)
24011220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011224:	db0a      	blt.n	2401123c <tMBSineTri_tick+0x1d8>
24011226:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    	sinPhase -= 1.0f;
2401122a:	eef0 7a48 	vmov.f32	s15, s16
2401122e:	ee38 8a47 	vsub.f32	s16, s16, s14
    while (sinPhase >= 1.0f)
24011232:	eef4 7ae6 	vcmpe.f32	s15, s13
24011236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401123a:	daf6      	bge.n	2401122a <tMBSineTri_tick+0x1c6>
    while (sinPhase < 0.0f)
2401123c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24011240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011244:	d50c      	bpl.n	24011260 <tMBSineTri_tick+0x1fc>
    	sinPhase += 1.0f;
24011246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    while (sinPhase < 0.0f)
2401124a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    	sinPhase += 1.0f;
2401124e:	eef0 7a48 	vmov.f32	s15, s16
24011252:	ee38 8a26 	vadd.f32	s16, s16, s13
    while (sinPhase < 0.0f)
24011256:	eef4 7ac7 	vcmpe.f32	s15, s14
2401125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401125e:	d4f6      	bmi.n	2401124e <tMBSineTri_tick+0x1ea>
    float tempPhase = (sinPhase * 2048.0f);
24011260:	eddf 7a99 	vldr	s15, [pc, #612]	; 240114c8 <tMBSineTri_tick+0x464>
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24011264:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    idx = (idx + 1) & c->sineMask;
24011268:	f8d4 03f0 	ldr.w	r0, [r4, #1008]	; 0x3f0
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
2401126c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    float tempPhase = (sinPhase * 2048.0f);
24011270:	ee68 7a27 	vmul.f32	s15, s16, s15
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24011274:	b2ff      	uxtb	r7, r7
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
24011276:	ee37 7a44 	vsub.f32	s14, s14, s8
2401127a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
2401127e:	f88d 7005 	strb.w	r7, [sp, #5]
    idx = (uint32_t)tempPhase; //11 bit table
24011282:	eefc 6ae7 	vcvt.u32.f32	s13, s15
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24011286:	f89d 7005 	ldrb.w	r7, [sp, #5]
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
2401128a:	ee27 7a25 	vmul.f32	s14, s14, s11
    idx = (uint32_t)tempPhase; //11 bit table
2401128e:	ee16 2a90 	vmov	r2, s13
    tempFrac = tempPhase - idx;
24011292:	eef8 6a66 	vcvt.f32.u32	s13, s13
    idx = (idx + 1) & c->sineMask;
24011296:	1c51      	adds	r1, r2, #1
    tempFrac = tempPhase - idx;
24011298:	ee77 7ae6 	vsub.f32	s15, s15, s13
    idx = (idx + 1) & c->sineMask;
2401129c:	4008      	ands	r0, r1
    samp0 = __leaf_table_sinewave[idx];
2401129e:	498b      	ldr	r1, [pc, #556]	; (240114cc <tMBSineTri_tick+0x468>)
240112a0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    samp1 = __leaf_table_sinewave[idx];
240112a4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    samp0 = __leaf_table_sinewave[idx];
240112a8:	edd2 6a00 	vldr	s13, [r2]
    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
240112ac:	ed91 6a00 	vldr	s12, [r1]
240112b0:	ee36 6a66 	vsub.f32	s12, s12, s13
240112b4:	eee6 6a27 	vfma.f32	s13, s12, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
240112b8:	eee7 8a26 	vfma.f32	s17, s14, s13
240112bc:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
240112c0:	2f00      	cmp	r7, #0
240112c2:	f000 8281 	beq.w	240117c8 <tMBSineTri_tick+0x764>
240112c6:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
240112ca:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
240112ce:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
240112d0:	497f      	ldr	r1, [pc, #508]	; (240114d0 <tMBSineTri_tick+0x46c>)
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
240112d2:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
240112d6:	4f7f      	ldr	r7, [pc, #508]	; (240114d4 <tMBSineTri_tick+0x470>)
240112d8:	e051      	b.n	2401137e <tMBSineTri_tick+0x31a>
240112da:	f8bd e006 	ldrh.w	lr, [sp, #6]
240112de:	f8bd 9006 	ldrh.w	r9, [sp, #6]
240112e2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
240112e6:	fa1f fe8e 	uxth.w	lr, lr
240112ea:	f8bd 8006 	ldrh.w	r8, [sp, #6]
240112ee:	fa1f f989 	uxth.w	r9, r9
240112f2:	b29b      	uxth	r3, r3
240112f4:	fa1f f888 	uxth.w	r8, r8
240112f8:	eb04 0949 	add.w	r9, r4, r9, lsl #1
240112fc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
24011300:	eb04 0848 	add.w	r8, r4, r8, lsl #1
24011304:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
24011308:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
2401130c:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
24011310:	eb03 0343 	add.w	r3, r3, r3, lsl #1
24011314:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
24011318:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
2401131c:	eb07 0ec8 	add.w	lr, r7, r8, lsl #3
24011320:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24011324:	ed99 7a00 	vldr	s14, [r9]
24011328:	ed9e 6a01 	vldr	s12, [lr, #4]
2401132c:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24011330:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24011334:	eea5 7a06 	vfma.f32	s14, s10, s12
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
24011338:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401133c:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2401133e:	fa1f fe8e 	uxth.w	lr, lr
24011342:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24011346:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2401134a:	eee6 7a87 	vfma.f32	s15, s13, s14
2401134e:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24011352:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
24011356:	f108 0840 	add.w	r8, r8, #64	; 0x40
2401135a:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2401135e:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
24011362:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
24011366:	459e      	cmp	lr, r3
24011368:	d304      	bcc.n	24011374 <tMBSineTri_tick+0x310>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
2401136a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
2401136e:	3b01      	subs	r3, #1
24011370:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24011374:	f89d 3005 	ldrb.w	r3, [sp, #5]
24011378:	3201      	adds	r2, #1
2401137a:	4293      	cmp	r3, r2
2401137c:	dd74      	ble.n	24011468 <tMBSineTri_tick+0x404>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
2401137e:	ebac 0302 	sub.w	r3, ip, r2
24011382:	b29b      	uxth	r3, r3
24011384:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
24011388:	f8bd 3006 	ldrh.w	r3, [sp, #6]
2401138c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24011390:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
24011394:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24011398:	b29b      	uxth	r3, r3
2401139a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
2401139e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
240113a2:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
240113a6:	eeb4 7ae5 	vcmpe.f32	s14, s11
240113aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240113ae:	d494      	bmi.n	240112da <tMBSineTri_tick+0x276>
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
240113b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
240113b4:	f8bd e006 	ldrh.w	lr, [sp, #6]
240113b8:	b29b      	uxth	r3, r3
240113ba:	f8bd 8006 	ldrh.w	r8, [sp, #6]
240113be:	f8bd 9006 	ldrh.w	r9, [sp, #6]
240113c2:	fa1f fe8e 	uxth.w	lr, lr
240113c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
240113ca:	fa1f f989 	uxth.w	r9, r9
240113ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
240113d2:	fa1f f888 	uxth.w	r8, r8
240113d6:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
240113da:	eb04 0949 	add.w	r9, r4, r9, lsl #1
240113de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
240113e2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
240113e6:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
240113ea:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
240113ee:	b29b      	uxth	r3, r3
240113f0:	ee24 7a07 	vmul.f32	s14, s8, s14
240113f4:	eb04 0888 	add.w	r8, r4, r8, lsl #2
240113f8:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
240113fc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24011400:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
24011404:	eb01 0889 	add.w	r8, r1, r9, lsl #2
24011408:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
2401140c:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
24011410:	ed98 6a01 	vldr	s12, [r8, #4]
24011414:	eb01 0383 	add.w	r3, r1, r3, lsl #2
24011418:	edde 6a00 	vldr	s13, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
2401141c:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24011420:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24011424:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24011428:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
2401142c:	ee36 6a64 	vsub.f32	s12, s12, s9
24011430:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24011434:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24011438:	eee5 6a06 	vfma.f32	s13, s10, s12
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
2401143c:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
24011440:	eee6 7a87 	vfma.f32	s15, s13, s14
24011444:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24011448:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
2401144c:	3340      	adds	r3, #64	; 0x40
2401144e:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
24011452:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
24011456:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2401145a:	459e      	cmp	lr, r3
2401145c:	d285      	bcs.n	2401136a <tMBSineTri_tick+0x306>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
2401145e:	f89d 3005 	ldrb.w	r3, [sp, #5]
24011462:	3201      	adds	r2, #1
24011464:	4293      	cmp	r3, r2
24011466:	dc8a      	bgt.n	2401137e <tMBSineTri_tick+0x31a>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
24011468:	ee77 7ae9 	vsub.f32	s15, s15, s19
    j = (j+1) & 7;
2401146c:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
2401146e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->out = z;
    c->_p = p;
24011472:	ed84 aa08 	vstr	s20, [r4, #32]
    j = (j+1) & 7;
24011476:	f005 0507 	and.w	r5, r5, #7
    c->_w = w;
    c->_b = b;
2401147a:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    c->_z = z;
    c->_j = j;
    c->_k = k;
2401147e:	63e6      	str	r6, [r4, #60]	; 0x3c
    z += 0.5f * (c->_f[j] - z);
24011480:	eee7 9a87 	vfma.f32	s19, s15, s14
    c->_sinPhase = sinPhase;
24011484:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    c->_j = j;
24011488:	63a5      	str	r5, [r4, #56]	; 0x38

    return -c->out;
2401148a:	eeb1 0a69 	vneg.f32	s0, s19
    c->out = z;
2401148e:	edc4 9a01 	vstr	s19, [r4, #4]
    c->_z = z;
24011492:	edc4 9a0b 	vstr	s19, [r4, #44]	; 0x2c
}
24011496:	b003      	add	sp, #12
24011498:	ecbd 8b10 	vpop	{d8-d15}
2401149c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (sw < 0)
240114a0:	f100 82f9 	bmi.w	24011a96 <tMBSineTri_tick+0xa32>
        if (!k) {
240114a4:	2e00      	cmp	r6, #0
240114a6:	f000 8266 	beq.w	24011976 <tMBSineTri_tick+0x912>
            x = 0.5f - (p_at_reset - b) * invB1;
240114aa:	ee39 7a08 	vadd.f32	s14, s18, s16
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
240114ae:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    p += inc_amount;
240114b2:	eeb0 aa6a 	vmov.f32	s20, s21
            x = 0.5f - (p_at_reset - b) * invB1;
240114b6:	eef0 8a4b 	vmov.f32	s17, s22
240114ba:	ee77 aa6a 	vsub.f32	s21, s14, s21
    sinPhase += inc_amount;
240114be:	eeb0 8a67 	vmov.f32	s16, s15
            x = 0.5f - (p_at_reset - b) * invB1;
240114c2:	eeed 8a2a 	vfma.f32	s17, s26, s21
            if (sw > 0)
240114c6:	e6a0      	b.n	2401120a <tMBSineTri_tick+0x1a6>
240114c8:	45000000 	.word	0x45000000
240114cc:	24018588 	.word	0x24018588
240114d0:	2401a588 	.word	0x2401a588
240114d4:	2401ec8c 	.word	0x2401ec8c
240114d8:	42800000 	.word	0x42800000
	i = lrintf(r - 0.5f);
240114dc:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
240114e0:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 240114d8 <tMBSineTri_tick+0x474>
                p -= 1.0f;
240114e4:	ee7a da4b 	vsub.f32	s27, s20, s22
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
240114e8:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
240114ec:	eeb0 0a68 	vmov.f32	s0, s17
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
240114f0:	ee3c 7a8d 	vadd.f32	s14, s25, s26
	i = lrintf(r - 0.5f);
240114f4:	eeac 0a2d 	vfma.f32	s0, s24, s27
	scale *= w;
240114f8:	ee6b ba87 	vmul.f32	s23, s23, s14
	i = lrintf(r - 0.5f);
240114fc:	f001 fcbc 	bl	24012e78 <lrintf>
	r -= (float)i;
24011500:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011504:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011508:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            if (!k && p >= b) {
2401150c:	eeb4 9aed 	vcmpe.f32	s18, s27
	r -= (float)i;
24011510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011514:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011516:	3701      	adds	r7, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24011518:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401151c:	f003 063f 	and.w	r6, r3, #63	; 0x3f
            if (!k && p >= b) {
24011520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
24011524:	eedc 7a2d 	vfnms.f32	s15, s24, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011528:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401152c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011530:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24011534:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011538:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
2401153c:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011540:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011544:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011548:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401154c:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (!k && p >= b) {
24011550:	f200 83fc 	bhi.w	24011d4c <tMBSineTri_tick+0xce8>
                x = 0.5f - (p - b) * invB1;
24011554:	ee79 7a0b 	vadd.f32	s15, s18, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011558:	3701      	adds	r7, #1
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
2401155a:	ee7d cac9 	vsub.f32	s25, s27, s18
	i = lrintf(r - 0.5f);
2401155e:	eeb0 0a68 	vmov.f32	s0, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011562:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
24011566:	ee77 7aca 	vsub.f32	s15, s15, s20
2401156a:	eef0 8a6a 	vmov.f32	s17, s21
	i = lrintf(r - 0.5f);
2401156e:	eeac 0a8c 	vfma.f32	s0, s25, s24
                p -= 1.0f;
24011572:	eeb0 aa6d 	vmov.f32	s20, s27
                x = 0.5f - (p - b) * invB1;
24011576:	eee7 8a8d 	vfma.f32	s17, s15, s26
	i = lrintf(r - 0.5f);
2401157a:	f001 fc7d 	bl	24012e78 <lrintf>
	r -= (float)i;
2401157e:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011582:	1c73      	adds	r3, r6, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24011584:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011588:	eef1 7a6b 	vneg.f32	s15, s23
	r -= (float)i;
2401158c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                k = 1;
24011594:	2601      	movs	r6, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011596:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401159a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	r -= (float)i;
2401159e:	ee9c 7a8c 	vfnms.f32	s14, s25, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
240115a2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240115a6:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240115aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240115ae:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240115b2:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240115b6:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240115ba:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
240115be:	e624      	b.n	2401120a <tMBSineTri_tick+0x1a6>
                x = 0.5f - (p - b) * invB1;;
240115c0:	ed1f ea3b 	vldr	s28, [pc, #-236]	; 240114d8 <tMBSineTri_tick+0x474>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
240115c4:	ee7a da49 	vsub.f32	s27, s20, s18
	i = lrintf(r - 0.5f);
240115c8:	eeb0 0a6a 	vmov.f32	s0, s21
240115cc:	ee2c ea0e 	vmul.f32	s28, s24, s28
                x = 0.5f - (p - b) * invB1;;
240115d0:	ee79 7a4a 	vsub.f32	s15, s18, s20
240115d4:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
240115d8:	eeae 0a2d 	vfma.f32	s0, s28, s27
240115dc:	ee3c ba8d 	vadd.f32	s22, s25, s26
                x = 0.5f - (p - b) * invB1;;
240115e0:	eee7 8a8d 	vfma.f32	s17, s15, s26
	i = lrintf(r - 0.5f);
240115e4:	f001 fc48 	bl	24012e78 <lrintf>
	r -= (float)i;
240115e8:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240115ec:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240115f0:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240115f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240115f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240115fc:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240115fe:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011600:	ee6b 7acb 	vnmul.f32	s15, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24011608:	ee9e 7a2d 	vfnms.f32	s14, s28, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401160c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011610:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011614:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24011618:	eb04 0343 	add.w	r3, r4, r3, lsl #1
2401161c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011620:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011624:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011628:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401162c:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011630:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
                k = 1;
24011634:	2301      	movs	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011636:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
2401163a:	e56f      	b.n	2401111c <tMBSineTri_tick+0xb8>
        else if (sw < 0)
2401163c:	f57f ade3 	bpl.w	24011206 <tMBSineTri_tick+0x1a2>
            if (p < b) {
24011640:	eeb4 aac9 	vcmpe.f32	s20, s18
24011644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011648:	f100 81e9 	bmi.w	24011a1e <tMBSineTri_tick+0x9ba>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401164c:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            if (p < 0.0f) {
24011650:	eeb5 aac0 	vcmpe.f32	s20, #0.0
24011654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011658:	f57f add7 	bpl.w	2401120a <tMBSineTri_tick+0x1a6>
                p += 1.0f;
2401165c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
24011660:	ed1f ba63 	vldr	s22, [pc, #-396]	; 240114d8 <tMBSineTri_tick+0x474>
	r = MINBLEP_PHASES * phase * inv_w;
24011664:	ee2c ca0a 	vmul.f32	s24, s24, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011668:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
2401166a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                k = 1;
2401166e:	2601      	movs	r6, #1
                p += 1.0f;
24011670:	ee3a aa2a 	vadd.f32	s20, s20, s21
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011674:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
24011678:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
2401167c:	eeac 0a0b 	vfma.f32	s0, s24, s22
                x = 0.5f - (p - b) * invB1;
24011680:	ee79 7a4a 	vsub.f32	s15, s18, s20
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
24011684:	ee7c ca8d 	vadd.f32	s25, s25, s26
                x = 0.5f - (p - b) * invB1;
24011688:	eee7 8a8d 	vfma.f32	s17, s15, s26
	i = lrintf(r - 0.5f);
2401168c:	f001 fbf4 	bl	24012e78 <lrintf>
	r -= (float)i;
24011690:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011694:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24011698:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401169c:	ee6c caeb 	vnmul.f32	s25, s25, s23
	r -= (float)i;
240116a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240116a4:	3301      	adds	r3, #1
240116a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240116aa:	eedc 7a0b 	vfnms.f32	s15, s24, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240116ae:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240116b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240116b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240116ba:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240116be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240116c2:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240116c6:	edc3 aa3d 	vstr	s21, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240116ca:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240116ce:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
240116d2:	e59a      	b.n	2401120a <tMBSineTri_tick+0x1a6>
            if (p < 0.0f) {
240116d4:	eeb5 aa40 	vcmp.f32	s20, #0.0
240116d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240116dc:	f57f ad93 	bpl.w	24011206 <tMBSineTri_tick+0x1a2>
240116e0:	eef5 bac0 	vcmpe.f32	s23, #0.0
240116e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240116e8:	f57f ad8d 	bpl.w	24011206 <tMBSineTri_tick+0x1a2>
	r = MINBLEP_PHASES * phase * inv_w;
240116ec:	ee2c ea0a 	vmul.f32	s28, s24, s20
	i = lrintf(r - 0.5f);
240116f0:	ed1f ba87 	vldr	s22, [pc, #-540]	; 240114d8 <tMBSineTri_tick+0x474>
240116f4:	eeb0 0a6a 	vmov.f32	s0, s21
                p += 1.0f;
240116f8:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
240116fc:	ee7c 8a8d 	vadd.f32	s17, s25, s26
	i = lrintf(r - 0.5f);
24011700:	eeae 0a0b 	vfma.f32	s0, s28, s22
24011704:	f001 fbb8 	bl	24012e78 <lrintf>
	r -= (float)i;
24011708:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401170c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                p += 1.0f;
24011710:	ee3a aa2d 	vadd.f32	s20, s20, s27
	r -= (float)i;
24011714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011718:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401171c:	3301      	adds	r3, #1
2401171e:	ee6b baa8 	vmul.f32	s23, s23, s17
            if (k && p < b) {
24011722:	eeb4 9aca 	vcmpe.f32	s18, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011726:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011728:	f003 083f 	and.w	r8, r3, #63	; 0x3f
	r -= (float)i;
2401172c:	eede 7a0b 	vfnms.f32	s15, s28, s22
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011730:	eeb1 7a6b 	vneg.f32	s14, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24011734:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011738:	eb08 0348 	add.w	r3, r8, r8, lsl #1
            if (k && p < b) {
2401173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011740:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24011744:	eb04 0248 	add.w	r2, r4, r8, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011748:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401174c:	f8a4 8066 	strh.w	r8, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24011750:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011754:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011758:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401175c:	edc3 da3d 	vstr	s27, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011760:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (k && p < b) {
24011764:	f340 844a 	ble.w	24011ffc <tMBSineTri_tick+0xf98>
                x = -0.5f + p * invB;
24011768:	ee3a da49 	vsub.f32	s26, s20, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401176c:	3701      	adds	r7, #1
2401176e:	ee2c ba0b 	vmul.f32	s22, s24, s22
	i = lrintf(r - 0.5f);
24011772:	eeb0 0a6a 	vmov.f32	s0, s21
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011776:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = -0.5f + p * invB;
2401177a:	eef0 8a6a 	vmov.f32	s17, s21
	i = lrintf(r - 0.5f);
2401177e:	eeab 0a0d 	vfma.f32	s0, s22, s26
24011782:	f001 fb79 	bl	24012e78 <lrintf>
	r -= (float)i;
24011786:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401178a:	f108 0301 	add.w	r3, r8, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
2401178e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24011792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                x = -0.5f + p * invB;
2401179a:	eeec 8a8a 	vfma.f32	s17, s25, s20
	r -= (float)i;
2401179e:	eedb 7a0d 	vfnms.f32	s15, s22, s26
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240117a2:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240117a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240117aa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240117ae:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240117b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240117b6:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
240117ba:	edc3 da3d 	vstr	s27, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240117be:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240117c2:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
240117c6:	e520      	b.n	2401120a <tMBSineTri_tick+0x1a6>
    z += 0.5f * (c->_f[j] - z);
240117c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
240117cc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
240117d0:	e64a      	b.n	24011468 <tMBSineTri_tick+0x404>
            x = 0.5f - (p_at_reset - b) * invB1;
240117d2:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset >= 1.0f) {
240117d6:	eef4 dae8 	vcmpe.f32	s27, s17
            x = 0.5f - (p_at_reset - b) * invB1;
240117da:	eeb0 fa4b 	vmov.f32	s30, s22
240117de:	ee77 7aea 	vsub.f32	s15, s15, s21
                if (p_at_reset >= 1.0f) {
240117e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
240117e6:	eead fa27 	vfma.f32	s30, s26, s15
                if (p_at_reset >= 1.0f) {
240117ea:	f280 81cc 	bge.w	24011b86 <tMBSineTri_tick+0xb22>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
240117ee:	ee3c ea8d 	vadd.f32	s28, s25, s26
240117f2:	ed5f 7ac7 	vldr	s15, [pc, #-796]	; 240114d8 <tMBSineTri_tick+0x474>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240117f6:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
240117fa:	ee2c ca27 	vmul.f32	s24, s24, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240117fe:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
24011802:	ee2e ea2b 	vmul.f32	s28, s28, s23
	i = lrintf(r - 0.5f);
24011806:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401180a:	3601      	adds	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401180c:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401180e:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	i = lrintf(r - 0.5f);
24011812:	eeaa 0a0c 	vfma.f32	s0, s20, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011816:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
2401181a:	f001 fb2d 	bl	24012e78 <lrintf>
	r -= (float)i;
2401181e:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011822:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24011826:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
2401182a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
2401182e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011832:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24011836:	eb04 0046 	add.w	r0, r4, r6, lsl #1
	r -= (float)i;
2401183a:	eeda 7a0c 	vfnms.f32	s15, s20, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
2401183e:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011842:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011846:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401184a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401184e:	3601      	adds	r6, #1
            if (p >= b) {
24011850:	eeb4 9aca 	vcmpe.f32	s18, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011854:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011856:	ee2f 7a6b 	vnmul.f32	s14, s30, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401185a:	f006 063f 	and.w	r6, r6, #63	; 0x3f
            if (p >= b) {
2401185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011862:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24011866:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401186a:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401186e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24011872:	f8a2 106c 	strh.w	r1, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011876:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401187a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
2401187e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011882:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011886:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401188a:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (p >= b) {
2401188e:	d93c      	bls.n	2401190a <tMBSineTri_tick+0x8a6>
            x = -0.5f + p * invB;
24011890:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            k = 0;
24011894:	4646      	mov	r6, r8
            x = -0.5f + p * invB;
24011896:	eeec 8a8a 	vfma.f32	s17, s25, s20
2401189a:	e4b6      	b.n	2401120a <tMBSineTri_tick+0x1a6>
                p -= 1.0f;
2401189c:	ed5f 7af2 	vldr	s15, [pc, #-968]	; 240114d8 <tMBSineTri_tick+0x474>
240118a0:	ee3a aa6a 	vsub.f32	s20, s20, s21
                x = -0.5f + p * invB;
240118a4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240118a8:	3701      	adds	r7, #1
240118aa:	ee2c ca27 	vmul.f32	s24, s24, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
240118ae:	ee3c da8d 	vadd.f32	s26, s25, s26
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240118b2:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = -0.5f + p * invB;
240118b6:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
240118ba:	eeac 0a0a 	vfma.f32	s0, s24, s20
240118be:	f001 fadb 	bl	24012e78 <lrintf>
	r -= (float)i;
240118c2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240118c6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240118ca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
240118ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240118d2:	3301      	adds	r3, #1
	scale *= w;
240118d4:	ee2b da8d 	vmul.f32	s26, s23, s26
                x = -0.5f + p * invB;
240118d8:	eeec 8a8a 	vfma.f32	s17, s25, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240118dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240118e0:	eedc 7a0a 	vfnms.f32	s15, s24, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240118e4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240118e8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
240118ec:	eb04 0343 	add.w	r3, r4, r3, lsl #1
240118f0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240118f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
240118f8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240118fc:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011900:	edc3 aa3d 	vstr	s21, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011904:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24011908:	e47f      	b.n	2401120a <tMBSineTri_tick+0x1a6>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
2401190a:	ee7a aa49 	vsub.f32	s21, s20, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401190e:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
24011910:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                x = 0.5f - (p - b) * invB1;
24011914:	ee79 7a4a 	vsub.f32	s15, s18, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011918:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
2401191c:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
24011920:	eeaa 0a8c 	vfma.f32	s0, s21, s24
24011924:	ee7c ca8d 	vadd.f32	s25, s25, s26
                x = 0.5f - (p - b) * invB1;
24011928:	eee7 8a8d 	vfma.f32	s17, s15, s26
	i = lrintf(r - 0.5f);
2401192c:	f001 faa4 	bl	24012e78 <lrintf>
	r -= (float)i;
24011930:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011934:	1c73      	adds	r3, r6, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24011936:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
2401193a:	ee6c caeb 	vnmul.f32	s25, s25, s23
	r -= (float)i;
2401193e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011942:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011946:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
                k = 1;
2401194a:	2601      	movs	r6, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401194c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011950:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	r -= (float)i;
24011954:	eeda 7a8c 	vfnms.f32	s15, s21, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
24011958:	eb04 0343 	add.w	r3, r4, r3, lsl #1
2401195c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011960:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011964:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011968:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401196c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011970:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24011974:	e449      	b.n	2401120a <tMBSineTri_tick+0x1a6>
            x = -0.5f + p_at_reset * invB;
24011976:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
2401197a:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    sinPhase += inc_amount;
2401197e:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
24011982:	eeb0 aa6a 	vmov.f32	s20, s21
            x = -0.5f + p_at_reset * invB;
24011986:	eeec 8aad 	vfma.f32	s17, s25, s27
            else if (sw < 0)
2401198a:	e43e      	b.n	2401120a <tMBSineTri_tick+0x1a6>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
2401198c:	ee3c ea8d 	vadd.f32	s28, s25, s26
24011990:	eddf 7af2 	vldr	s15, [pc, #968]	; 24011d5c <tMBSineTri_tick+0xcf8>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011994:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
24011998:	ee2c ca27 	vmul.f32	s24, s24, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401199c:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
240119a0:	ee6b ea8e 	vmul.f32	s29, s23, s28
                    p_at_reset -= 1.0f;
240119a4:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240119a8:	3601      	adds	r6, #1
                    x = -0.5f + p_at_reset * invB;
240119aa:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240119ae:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240119b0:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    p_at_reset -= 1.0f;
240119b4:	ee7d daea 	vsub.f32	s27, s27, s21
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240119b8:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
240119bc:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
240119c0:	eeb0 fa68 	vmov.f32	s30, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
240119c4:	ee38 ba2d 	vadd.f32	s22, s16, s27
                    x = -0.5f + p_at_reset * invB;
240119c8:	eeac faad 	vfma.f32	s30, s25, s27
	i = lrintf(r - 0.5f);
240119cc:	eeab 0a0c 	vfma.f32	s0, s22, s24
240119d0:	f001 fa52 	bl	24012e78 <lrintf>
	r -= (float)i;
240119d4:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240119d8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i = lrintf(r - 0.5f);
240119dc:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
240119e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240119e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240119e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
240119ec:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	i = lrintf(r - 0.5f);
240119f0:	eeaa 0a0c 	vfma.f32	s0, s20, s24
	r -= (float)i;
240119f4:	eedb 7a0c 	vfnms.f32	s15, s22, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
240119f8:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240119fc:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011a00:	edc3 aa3d 	vstr	s21, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011a04:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	i = lrintf(r - 0.5f);
24011a08:	f001 fa36 	bl	24012e78 <lrintf>
	r -= (float)i;
24011a0c:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24011a10:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
24011a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24011a18:	eeda 7a0c 	vfnms.f32	s15, s20, s24
24011a1c:	e717      	b.n	2401184e <tMBSineTri_tick+0x7ea>
                x = -0.5f + p * invB;
24011a1e:	ed9f bacf 	vldr	s22, [pc, #828]	; 24011d5c <tMBSineTri_tick+0xcf8>
24011a22:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24011a26:	ee7a aa49 	vsub.f32	s21, s20, s18
                k = 0;
24011a2a:	2600      	movs	r6, #0
24011a2c:	ee2c ba0b 	vmul.f32	s22, s24, s22
                x = -0.5f + p * invB;
24011a30:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
24011a34:	eeab 0a2a 	vfma.f32	s0, s22, s21
24011a38:	f001 fa1e 	bl	24012e78 <lrintf>
	r -= (float)i;
24011a3c:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011a40:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
24011a44:	ee7c 7a8d 	vadd.f32	s15, s25, s26
	r -= (float)i;
24011a48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011a4c:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011a50:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24011a52:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011a56:	3701      	adds	r7, #1
	scale *= w;
24011a58:	ee67 7aab 	vmul.f32	s15, s15, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24011a60:	ee9b 7a2a 	vfnms.f32	s14, s22, s21
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011a64:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011a68:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011a6c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011a70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24011a74:	eb04 0343 	add.w	r3, r4, r3, lsl #1
                x = -0.5f + p * invB;
24011a78:	eeea 8a2c 	vfma.f32	s17, s20, s25
	c->BLEPindices[c->mostRecentBLEP] = i;
24011a7c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011a80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
24011a84:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011a88:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011a8c:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011a90:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24011a94:	e5dc      	b.n	24011650 <tMBSineTri_tick+0x5ec>
        	p = (1.0f - eof_offset) + 0.25f;
24011a96:	eeb7 aa04 	vmov.f32	s20, #116	; 0x3fa00000  1.250
        	sinPhase = (1.0f - eof_offset);
24011a9a:	ee78 eac8 	vsub.f32	s29, s17, s16
        	p = (1.0f - eof_offset) + 0.25f;
24011a9e:	ee3a aa48 	vsub.f32	s20, s20, s16
        if (!k) {
24011aa2:	2e00      	cmp	r6, #0
24011aa4:	f040 8125 	bne.w	24011cf2 <tMBSineTri_tick+0xc8e>
                if (p_at_reset < 0.0f) {
24011aa8:	eef5 dac0 	vcmpe.f32	s27, #0.0
24011aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011ab0:	f100 818e 	bmi.w	24011dd0 <tMBSineTri_tick+0xd6c>
            x = -0.5f + p_at_reset * invB;
24011ab4:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
24011ab8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 24011d5c <tMBSineTri_tick+0xcf8>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24011abc:	ee7c aa8d 	vadd.f32	s21, s25, s26
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011ac0:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
24011ac4:	ee2c ca27 	vmul.f32	s24, s24, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011ac8:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            x = -0.5f + p_at_reset * invB;
24011acc:	eeac baad 	vfma.f32	s22, s25, s27
24011ad0:	ee6b aaea 	vnmul.f32	s21, s23, s21
	r = MINBLEP_PHASES * phase * inv_w;
24011ad4:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011ad8:	3601      	adds	r6, #1
	i = lrintf(r - 0.5f);
24011ada:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011ade:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011ae0:	f006 063f 	and.w	r6, r6, #63	; 0x3f
24011ae4:	ee78 8ac8 	vsub.f32	s17, s17, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011ae8:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
24011aec:	eea8 0a8c 	vfma.f32	s0, s17, s24
24011af0:	f001 f9c2 	bl	24012e78 <lrintf>
	r -= (float)i;
24011af4:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011af8:	eb06 0246 	add.w	r2, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24011afc:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
24011b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011b04:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011b08:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24011b0c:	eb04 0046 	add.w	r0, r4, r6, lsl #1
	r -= (float)i;
24011b10:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
24011b14:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011b18:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011b1c:	edc2 aa3c 	vstr	s21, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011b20:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011b24:	3601      	adds	r6, #1
            if (p < b) {
24011b26:	eeb4 9aca 	vcmpe.f32	s18, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011b2a:	3701      	adds	r7, #1
	scale *= w;
24011b2c:	ee2b 7a8b 	vmul.f32	s14, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011b30:	f006 093f 	and.w	r9, r6, #63	; 0x3f
            if (p < b) {
24011b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011b38:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011b3c:	eb09 0249 	add.w	r2, r9, r9, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011b40:	f8a4 9066 	strh.w	r9, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24011b44:	eb04 0149 	add.w	r1, r4, r9, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011b48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24011b4c:	f8a1 306c 	strh.w	r3, [r1, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011b50:	f04f 0300 	mov.w	r3, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011b54:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011b58:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011b5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011b60:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (p < b) {
24011b64:	f300 80fc 	bgt.w	24011d60 <tMBSineTri_tick+0xcfc>
            x = 0.5f - (p - b) * invB1;
24011b68:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
            k = 1;
24011b6c:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
24011b6e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
24011b72:	ee78 7a67 	vsub.f32	s15, s16, s15
24011b76:	eeb0 8a6e 	vmov.f32	s16, s29
24011b7a:	ee77 7a89 	vadd.f32	s15, s15, s18
24011b7e:	eee7 8a8d 	vfma.f32	s17, s15, s26
24011b82:	f7ff bb42 	b.w	2401120a <tMBSineTri_tick+0x1a6>
                    p_at_reset -= 1.0f;
24011b86:	ee7d dae8 	vsub.f32	s27, s27, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24011b8a:	eddf 7a74 	vldr	s15, [pc, #464]	; 24011d5c <tMBSineTri_tick+0xcf8>
	i = lrintf(r - 0.5f);
24011b8e:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
24011b92:	ee2c ca27 	vmul.f32	s24, s24, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24011b96:	ee78 ea2d 	vadd.f32	s29, s16, s27
	i = lrintf(r - 0.5f);
24011b9a:	eeb0 0a4f 	vmov.f32	s0, s30
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
24011b9e:	ee3c ea8d 	vadd.f32	s28, s25, s26
	i = lrintf(r - 0.5f);
24011ba2:	eeae 0a8c 	vfma.f32	s0, s29, s24
24011ba6:	f001 f967 	bl	24012e78 <lrintf>
	r -= (float)i;
24011baa:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011bae:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (!k && p_at_reset >= b) {
24011bb2:	eeb4 9aed 	vcmpe.f32	s18, s27
	r -= (float)i;
24011bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011bba:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011bbe:	3301      	adds	r3, #1
	scale *= w;
24011bc0:	ee2e ea2b 	vmul.f32	s28, s28, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011bc4:	3701      	adds	r7, #1
                if (!k && p_at_reset >= b) {
24011bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011bca:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
24011bce:	eede 7a8c 	vfnms.f32	s15, s29, s24
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24011bd2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011bd6:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011bda:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24011bde:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011be2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24011be6:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011bea:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011bee:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011bf2:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011bf6:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (!k && p_at_reset >= b) {
24011bfa:	f200 8190 	bhi.w	24011f1e <tMBSineTri_tick+0xeba>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24011bfe:	ee78 7a49 	vsub.f32	s15, s16, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011c02:	3601      	adds	r6, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
24011c04:	ee39 7a28 	vadd.f32	s14, s18, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011c08:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
24011c0a:	eeb0 0a4f 	vmov.f32	s0, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011c0e:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24011c12:	ee77 daad 	vadd.f32	s27, s15, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011c16:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                    x = 0.5f - (p_at_reset - b) * invB1;
24011c1a:	ee37 7a08 	vadd.f32	s14, s14, s16
	i = lrintf(r - 0.5f);
24011c1e:	eead 0a8c 	vfma.f32	s0, s27, s24
                    x = 0.5f - (p_at_reset - b) * invB1;
24011c22:	ee77 aa6a 	vsub.f32	s21, s14, s21
	i = lrintf(r - 0.5f);
24011c26:	f001 f927 	bl	24012e78 <lrintf>
	r -= (float)i;
24011c2a:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011c2e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011c32:	eeb1 7a4e 	vneg.f32	s14, s28
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24011c36:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24011c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011c3e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                    x = 0.5f - (p_at_reset - b) * invB1;
24011c42:	eeaa ba8d 	vfma.f32	s22, s21, s26
	c->BLEPindices[c->mostRecentBLEP] = i;
24011c46:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	r -= (float)i;
24011c4a:	eedd 7a8c 	vfnms.f32	s15, s27, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
24011c4e:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011c52:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011c56:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
                    x = 0.5f - (p_at_reset - b) * invB1;
24011c5a:	eeb0 fa4b 	vmov.f32	s30, s22
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011c5e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
        if (sw > 0)
24011c62:	e5d0      	b.n	24011806 <tMBSineTri_tick+0x7a2>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
24011c64:	eddf 7a3d 	vldr	s15, [pc, #244]	; 24011d5c <tMBSineTri_tick+0xcf8>
24011c68:	ee3a fac9 	vsub.f32	s30, s21, s18
	i = lrintf(r - 0.5f);
24011c6c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24011c70:	ee2c ca27 	vmul.f32	s24, s24, s15
24011c74:	ee3c ea8d 	vadd.f32	s28, s25, s26
24011c78:	eeaf 0a0c 	vfma.f32	s0, s30, s24
24011c7c:	f001 f8fc 	bl	24012e78 <lrintf>
	r -= (float)i;
24011c80:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011c84:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
24011c88:	ee2b ea8e 	vmul.f32	s28, s23, s28
	r -= (float)i;
24011c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011c90:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011c94:	1c5e      	adds	r6, r3, #1
                if (p_at_reset >= 1.0f) {
24011c96:	eef4 dae8 	vcmpe.f32	s27, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011c9a:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011c9c:	eeb1 7a4e 	vneg.f32	s14, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011ca0:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	r -= (float)i;
24011ca4:	eedf 7a0c 	vfnms.f32	s15, s30, s24
                if (p_at_reset >= 1.0f) {
24011ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24011cac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011cb0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011cb4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24011cb8:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011cbc:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011cc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24011cc4:	eef0 ea4e 	vmov.f32	s29, s28
	c->BLEPindices[c->mostRecentBLEP] = i;
24011cc8:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011ccc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011cd0:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011cd4:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011cd8:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
24011cdc:	f6bf ae62 	bge.w	240119a4 <tMBSineTri_tick+0x940>
                    x = 0.5f - (p_at_reset - b) * invB1;
24011ce0:	ee79 7a08 	vadd.f32	s15, s18, s16
24011ce4:	ee77 aaea 	vsub.f32	s21, s15, s21
24011ce8:	eeaa ba8d 	vfma.f32	s22, s21, s26
24011cec:	eeb0 fa4b 	vmov.f32	s30, s22
24011cf0:	e589      	b.n	24011806 <tMBSineTri_tick+0x7a2>
            x = 0.5f - (p_at_reset - b) * invB1;
24011cf2:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset < b) {
24011cf6:	eeb4 9aed 	vcmpe.f32	s18, s27
            x = 0.5f - (p_at_reset - b) * invB1;
24011cfa:	ee77 7aea 	vsub.f32	s15, s15, s21
                if (p_at_reset < b) {
24011cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
24011d02:	eea7 ba8d 	vfma.f32	s22, s15, s26
                if (p_at_reset < b) {
24011d06:	f300 80ca 	bgt.w	24011e9e <tMBSineTri_tick+0xe3a>
                if (p_at_reset < 0.0f) {
24011d0a:	eef5 dac0 	vcmpe.f32	s27, #0.0
24011d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011d12:	f100 8115 	bmi.w	24011f40 <tMBSineTri_tick+0xedc>
        else if (sw < 0)
24011d16:	eef5 aa00 	vmov.f32	s21, #80	; 0x3e800000  0.250
24011d1a:	eddf 7a10 	vldr	s15, [pc, #64]	; 24011d5c <tMBSineTri_tick+0xcf8>
	i = lrintf(r - 0.5f);
24011d1e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24011d22:	ee2c ca27 	vmul.f32	s24, s24, s15
24011d26:	ee7a aac8 	vsub.f32	s21, s21, s16
24011d2a:	eeac 0a2a 	vfma.f32	s0, s24, s21
24011d2e:	f001 f8a3 	bl	24012e78 <lrintf>
	r -= (float)i;
24011d32:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011d36:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24011d3a:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
24011d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011d42:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	r -= (float)i;
24011d46:	eedc 7a2a 	vfnms.f32	s15, s24, s21
24011d4a:	e6eb      	b.n	24011b24 <tMBSineTri_tick+0xac0>
                x = -0.5f + p * invB;
24011d4c:	eeec 8aad 	vfma.f32	s17, s25, s27
                k = 0;
24011d50:	2600      	movs	r6, #0
                p -= 1.0f;
24011d52:	eeb0 aa6d 	vmov.f32	s20, s27
24011d56:	f7ff ba58 	b.w	2401120a <tMBSineTri_tick+0x1a6>
24011d5a:	bf00      	nop
24011d5c:	42800000 	.word	0x42800000
                x = -0.5f + p * invB;
24011d60:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011d64:	3701      	adds	r7, #1
24011d66:	ee7a aa49 	vsub.f32	s21, s20, s18
                k = 0;
24011d6a:	4646      	mov	r6, r8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011d6c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
}
24011d70:	eeb0 8a6e 	vmov.f32	s16, s29
	i = lrintf(r - 0.5f);
24011d74:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
24011d78:	eeec 8a8a 	vfma.f32	s17, s25, s20
	scale *= w;
24011d7c:	ee7c ca8d 	vadd.f32	s25, s25, s26
	i = lrintf(r - 0.5f);
24011d80:	eeaa 0a8c 	vfma.f32	s0, s21, s24
24011d84:	f001 f878 	bl	24012e78 <lrintf>
	r -= (float)i;
24011d88:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011d8c:	f109 0301 	add.w	r3, r9, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24011d90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24011d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	scale *= w;
24011d9c:	ee6c baab 	vmul.f32	s23, s25, s23
	r -= (float)i;
24011da0:	eeda 7a8c 	vfnms.f32	s15, s21, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011da4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011da8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24011dac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
24011db0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011db4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011db8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011dbc:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011dc0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011dc4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011dc8:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
24011dcc:	f7ff ba1d 	b.w	2401120a <tMBSineTri_tick+0x1a6>
	i = lrintf(r - 0.5f);
24011dd0:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
24011dd4:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 24011d5c <tMBSineTri_tick+0xcf8>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24011dd8:	ee3c ea8d 	vadd.f32	s28, s25, s26
24011ddc:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
24011de0:	eeb0 0a4f 	vmov.f32	s0, s30
                    p_at_reset += 1.0f;
24011de4:	ee7d daa8 	vadd.f32	s27, s27, s17
	i = lrintf(r - 0.5f);
24011de8:	ee2e ea2b 	vmul.f32	s28, s28, s23
24011dec:	eeac 0a2a 	vfma.f32	s0, s24, s21
24011df0:	f001 f842 	bl	24012e78 <lrintf>
	r -= (float)i;
24011df4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011df8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (k && p_at_reset < b) {
24011dfc:	eeb4 9aed 	vcmpe.f32	s18, s27
	r -= (float)i;
24011e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011e04:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011e08:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24011e0a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011e0e:	3701      	adds	r7, #1
                if (k && p_at_reset < b) {
24011e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
24011e14:	eedc 7a2a 	vfnms.f32	s15, s24, s21
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011e18:	f003 063f 	and.w	r6, r3, #63	; 0x3f
24011e1c:	eef1 aa4e 	vneg.f32	s21, s28
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011e20:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011e24:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
24011e28:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011e2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24011e30:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011e34:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011e38:	edc3 aa3c 	vstr	s21, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011e3c:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011e40:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (k && p_at_reset < b) {
24011e44:	f340 80cd 	ble.w	24011fe2 <tMBSineTri_tick+0xf7e>
                    x = -0.5f + p_at_reset * invB;
24011e48:	ee78 7a49 	vsub.f32	s15, s16, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011e4c:	3601      	adds	r6, #1
                    x = -0.5f + p_at_reset * invB;
24011e4e:	eeb0 ba4f 	vmov.f32	s22, s30
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011e52:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
24011e54:	eeb0 0a4f 	vmov.f32	s0, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011e58:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011e5c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                    x = -0.5f + p_at_reset * invB;
24011e60:	eeac baad 	vfma.f32	s22, s25, s27
	r = MINBLEP_PHASES * phase * inv_w;
24011e64:	ee77 daad 	vadd.f32	s27, s15, s27
	i = lrintf(r - 0.5f);
24011e68:	eeac 0a2d 	vfma.f32	s0, s24, s27
24011e6c:	f001 f804 	bl	24012e78 <lrintf>
	r -= (float)i;
24011e70:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011e74:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24011e78:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24011e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
24011e80:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011e84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24011e88:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
	r -= (float)i;
24011e8c:	eedc 7a2d 	vfnms.f32	s15, s24, s27
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011e90:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011e94:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011e98:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
        else if (sw < 0)
24011e9c:	e61a      	b.n	24011ad4 <tMBSineTri_tick+0xa70>
	i = lrintf(r - 0.5f);
24011e9e:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
24011ea2:	ed5f 7a52 	vldr	s15, [pc, #-328]	; 24011d5c <tMBSineTri_tick+0xcf8>
24011ea6:	ee3a fac9 	vsub.f32	s30, s21, s18
24011eaa:	ee2c ca27 	vmul.f32	s24, s24, s15
24011eae:	eeb0 0a4b 	vmov.f32	s0, s22
	scale *= w;
24011eb2:	ee3c ea8d 	vadd.f32	s28, s25, s26
	i = lrintf(r - 0.5f);
24011eb6:	eeac 0a0f 	vfma.f32	s0, s24, s30
24011eba:	f000 ffdd 	bl	24012e78 <lrintf>
	r -= (float)i;
24011ebe:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011ec2:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (p_at_reset < 0.0f) {
24011ec6:	eef5 dac0 	vcmpe.f32	s27, #0.0
	r -= (float)i;
24011eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011ece:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011ed2:	3301      	adds	r3, #1
	scale *= w;
24011ed4:	ee2e ea2b 	vmul.f32	s28, s28, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011ed8:	3701      	adds	r7, #1
                if (p_at_reset < 0.0f) {
24011eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011ede:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
24011ee2:	eedc 7a0f 	vfnms.f32	s15, s24, s30
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24011ee6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011eea:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011eee:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011ef2:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
24011ef6:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011efa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
24011efe:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011f02:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011f06:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011f0a:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011f0e:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset < 0.0f) {
24011f12:	d421      	bmi.n	24011f58 <tMBSineTri_tick+0xef4>
                    x = -0.5f + p_at_reset * invB;
24011f14:	eeac baad 	vfma.f32	s22, s25, s27
        else if (sw < 0)
24011f18:	eef1 aa4e 	vneg.f32	s21, s28
24011f1c:	e5da      	b.n	24011ad4 <tMBSineTri_tick+0xa70>
	i = lrintf(r - 0.5f);
24011f1e:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = -0.5f + p_at_reset * invB;
24011f22:	eeac faad 	vfma.f32	s30, s25, s27
	i = lrintf(r - 0.5f);
24011f26:	eeaa 0a0c 	vfma.f32	s0, s20, s24
24011f2a:	f000 ffa5 	bl	24012e78 <lrintf>
	r -= (float)i;
24011f2e:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24011f32:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
24011f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24011f3a:	eeda 7a0c 	vfnms.f32	s15, s20, s24
24011f3e:	e486      	b.n	2401184e <tMBSineTri_tick+0x7ea>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
24011f40:	ee3c ea8d 	vadd.f32	s28, s25, s26
24011f44:	ed5f 7a7b 	vldr	s15, [pc, #-492]	; 24011d5c <tMBSineTri_tick+0xcf8>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011f48:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
24011f4c:	ee2c ca27 	vmul.f32	s24, s24, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011f50:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
24011f54:	ee2e ea2b 	vmul.f32	s28, s28, s23
                    x = 0.5f - (p_at_reset - b) * invB1;
24011f58:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011f5c:	3601      	adds	r6, #1
	i = lrintf(r - 0.5f);
24011f5e:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011f62:	3701      	adds	r7, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
24011f64:	ee78 7a6a 	vsub.f32	s15, s16, s21
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24011f68:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    x = 0.5f - (p_at_reset - b) * invB1;
24011f6c:	ee39 7a6d 	vsub.f32	s14, s18, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24011f70:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
24011f74:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = 0.5f - (p_at_reset - b) * invB1;
24011f78:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
24011f7c:	ee77 7a87 	vadd.f32	s15, s15, s14
	i = lrintf(r - 0.5f);
24011f80:	eeaa 0a8c 	vfma.f32	s0, s21, s24
24011f84:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b) * invB1;
24011f88:	eea7 ba8d 	vfma.f32	s22, s15, s26
	i = lrintf(r - 0.5f);
24011f8c:	f000 ff74 	bl	24012e78 <lrintf>
	r -= (float)i;
24011f90:	ee07 0a90 	vmov	s15, r0
	i = lrintf(r - 0.5f);
24011f94:	eeb0 0a4f 	vmov.f32	s0, s30
24011f98:	ee78 8ac8 	vsub.f32	s17, s17, s16
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011f9c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	r -= (float)i;
24011fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24011fa4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011fa8:	eeb1 ea4e 	vneg.f32	s28, s28
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011fac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	i = lrintf(r - 0.5f);
24011fb0:	eeac 0a28 	vfma.f32	s0, s24, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
24011fb4:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	r -= (float)i;
24011fb8:	eeda 7a8c 	vfnms.f32	s15, s21, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
24011fbc:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24011fc0:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
24011fc4:	edc3 da3d 	vstr	s27, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24011fc8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	i = lrintf(r - 0.5f);
24011fcc:	f000 ff54 	bl	24012e78 <lrintf>
	r -= (float)i;
24011fd0:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
24011fd4:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
24011fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24011fdc:	eedc 7a28 	vfnms.f32	s15, s24, s17
24011fe0:	e5a0      	b.n	24011b24 <tMBSineTri_tick+0xac0>
24011fe2:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b)  * invB1;
24011fe6:	ee79 da6d 	vsub.f32	s27, s18, s27
	i = lrintf(r - 0.5f);
24011fea:	eeb0 0a4f 	vmov.f32	s0, s30
24011fee:	ee78 8ac8 	vsub.f32	s17, s17, s16
                    x = 0.5f - (p_at_reset - b)  * invB1;
24011ff2:	eead ba8d 	vfma.f32	s22, s27, s26
	i = lrintf(r - 0.5f);
24011ff6:	eeac 0a28 	vfma.f32	s0, s24, s17
24011ffa:	e7e7      	b.n	24011fcc <tMBSineTri_tick+0xf68>
                x = 0.5f - (p - b) * invB1;
24011ffc:	ee79 7a4a 	vsub.f32	s15, s18, s20
                k = 1;
24012000:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
24012002:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
24012006:	eee7 8a8d 	vfma.f32	s17, s15, s26
2401200a:	f7ff b8fe 	b.w	2401120a <tMBSineTri_tick+0x1a6>
    sinPhase += inc_amount;
2401200e:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
24012012:	eeb0 aa6a 	vmov.f32	s20, s21
24012016:	f7ff b86a 	b.w	240110ee <tMBSineTri_tick+0x8a>
2401201a:	bf00      	nop

2401201c <tMBSineTri_setFreq>:

void tMBSineTri_setFreq(tMBSineTri* const osc, float f)
{
    _tMBSineTri* c = *osc;
2401201c:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
2401201e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24012022:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
24012026:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
2401202a:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
2401202e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
24012032:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
24012036:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    //c->quarterwaveoffset = c->_w * 0.25f;
}
2401203a:	4770      	bx	lr

2401203c <tMBSineTri_sync>:
    c->waveform = w;
}

float tMBSineTri_sync(tMBSineTri* const osc, float value)
{
    _tMBSineTri* c = *osc;
2401203c:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
2401203e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
24012042:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
24012046:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
2401204a:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
2401204e:	eef1 7a67 	vneg.f32	s15, s15
24012052:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24012056:	eef5 6ac0 	vcmpe.f32	s13, #0.0
2401205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401205e:	eef4 6ac7 	vcmpe.f32	s13, s14
24012062:	bfcc      	ite	gt
24012064:	2201      	movgt	r2, #1
24012066:	2200      	movle	r2, #0
24012068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401206c:	f002 0201 	and.w	r2, r2, #1
24012070:	bf88      	it	hi
24012072:	2200      	movhi	r2, #0
24012074:	b122      	cbz	r2, 24012080 <tMBSineTri_sync+0x44>
24012076:	eeb5 0a40 	vcmp.f32	s0, #0.0
2401207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401207e:	da04      	bge.n	2401208a <tMBSineTri_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
24012080:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24012098 <tMBSineTri_sync+0x5c>
24012084:	ed83 7a05 	vstr	s14, [r3, #20]

    return value;
}
24012088:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
2401208a:	ee37 7a66 	vsub.f32	s14, s14, s13
2401208e:	ee27 7a06 	vmul.f32	s14, s14, s12
24012092:	ed83 7a05 	vstr	s14, [r3, #20]
}
24012096:	4770      	bx	lr
24012098:	00000000 	.word	0x00000000

2401209c <tMBSineTri_setShape>:
}

void tMBSineTri_setShape(tMBSineTri* const osc, float shape)
{
    _tMBSineTri* c = *osc;
    c->shape = shape;
2401209c:	6803      	ldr	r3, [r0, #0]
2401209e:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
240120a2:	4770      	bx	lr

240120a4 <tMBSaw_tick>:
}



float tMBSaw_tick(tMBSaw* const osc)
{
240120a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    _tMBSaw* c = *osc;
240120a8:	6804      	ldr	r4, [r0, #0]

    int    j;
    float  sync;
    float  p, sw, z;

    sync = c->sync;
240120aa:	ed94 7a04 	vldr	s14, [r4, #16]


    p = c->_p;  /* phase [0, 1) */
240120ae:	edd4 7a07 	vldr	s15, [r4, #28]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
240120b2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    j = c->_j;  /* index into buffer _f */
240120b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
{
240120b8:	ed2d 8b08 	vpush	{d8-d11}
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
240120bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
240120c0:	b082      	sub	sp, #8
    z = c->_z;  /* low pass filter state */
240120c2:	edd4 9a09 	vldr	s19, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
240120c6:	f340 8114 	ble.w	240122f2 <tMBSaw_tick+0x24e>
240120ca:	69a3      	ldr	r3, [r4, #24]
240120cc:	2b00      	cmp	r3, #0
240120ce:	f340 80b1 	ble.w	24012234 <tMBSaw_tick+0x190>
240120d2:	edd4 6a05 	vldr	s13, [r4, #20]
    sw = c->_w * c->syncdir;
240120d6:	ed94 7a08 	vldr	s14, [r4, #32]
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
240120da:	eef1 6a66 	vneg.f32	s13, s13
    float inv_sw = c->_inv_w * c->syncdir;
240120de:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
240120e2:	ee26 7a87 	vmul.f32	s14, s13, s14
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
240120e6:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
240120ea:	ee66 8aa8 	vmul.f32	s17, s13, s17
    p += sw - (int)sw;
240120ee:	eefd 6ac7 	vcvt.s32.f32	s13, s14
240120f2:	ee37 8a27 	vadd.f32	s16, s14, s15
240120f6:	eef8 7ae6 	vcvt.f32.s32	s15, s13
240120fa:	ee38 8a67 	vsub.f32	s16, s16, s15
        if (sw > 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset);
        else if (sw < 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);

    } else if (p >= 1.0f) {  /* normal phase reset */
240120fe:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
24012102:	eeb4 8ac9 	vcmpe.f32	s16, s18
24012106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401210a:	f280 810c 	bge.w	24012326 <tMBSaw_tick+0x282>
        p -= 1.0f;
        tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);

    } else if (p < 0.0f) {
2401210e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
24012112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012116:	f100 8195 	bmi.w	24012444 <tMBSaw_tick+0x3a0>

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;

    c->_f[currentSamp] = 0.5f - p;

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
2401211a:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
    c->_f[currentSamp] = 0.5f - p;
2401211e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24012122:	1d33      	adds	r3, r6, #4
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
24012124:	b2ea      	uxtb	r2, r5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
24012126:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = 0.5f - p;
2401212a:	ee37 7a48 	vsub.f32	s14, s14, s16
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
2401212e:	f88d 2005 	strb.w	r2, [sp, #5]
    c->_f[currentSamp] = 0.5f - p;
24012132:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24012136:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c->_f[currentSamp] = 0.5f - p;
2401213a:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
2401213e:	2a00      	cmp	r2, #0
24012140:	f000 817b 	beq.w	2401243a <tMBSaw_tick+0x396>
24012144:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24012148:	f8b4 e052 	ldrh.w	lr, [r4, #82]	; 0x52
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

    	//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
2401214c:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
24012150:	2000      	movs	r0, #0
24012152:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
24012156:	4dec      	ldr	r5, [pc, #944]	; (24012508 <tMBSaw_tick+0x464>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
24012158:	ebae 0300 	sub.w	r3, lr, r0
2401215c:	b29b      	uxth	r3, r3
2401215e:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
24012162:	f8bd 3006 	ldrh.w	r3, [sp, #6]
24012166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2401216a:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
2401216e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
24012172:	f8bd 2006 	ldrh.w	r2, [sp, #6]
24012176:	f8bd 8006 	ldrh.w	r8, [sp, #6]
2401217a:	b289      	uxth	r1, r1
2401217c:	f8bd 9006 	ldrh.w	r9, [sp, #6]
24012180:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
24012182:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
24012186:	fa1f f888 	uxth.w	r8, r8
2401218a:	fa1f f989 	uxth.w	r9, r9
2401218e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
24012192:	eb04 0949 	add.w	r9, r4, r9, lsl #1
24012196:	f8b2 a056 	ldrh.w	sl, [r2, #86]	; 0x56
2401219a:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
2401219e:	f8b9 9056 	ldrh.w	r9, [r9, #86]	; 0x56
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240121a2:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
240121a4:	ed98 6a36 	vldr	s12, [r8, #216]	; 0xd8
240121a8:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
240121ac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
240121b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
240121b4:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
240121b8:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
240121bc:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240121be:	f8b3 8056 	ldrh.w	r8, [r3, #86]	; 0x56
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
240121c2:	edd9 6a01 	vldr	s13, [r9, #4]
240121c6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240121ca:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
240121ce:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
240121d2:	eee6 7a26 	vfma.f32	s15, s12, s13
240121d6:	edd1 6a37 	vldr	s13, [r1, #220]	; 0xdc
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
240121da:	f8a3 8056 	strh.w	r8, [r3, #86]	; 0x56
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
240121de:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
240121e2:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
240121e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
240121e8:	d37c      	bcc.n	240122e4 <tMBSaw_tick+0x240>
		{
			c->numBLEPs--;
240121ea:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
240121ee:	3001      	adds	r0, #1
240121f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
240121f4:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
240121f6:	4290      	cmp	r0, r2
			c->numBLEPs--;
240121f8:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
240121fc:	dbac      	blt.n	24012158 <tMBSaw_tick+0xb4>
240121fe:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
		}

    }

    z += 0.5f * (c->_f[j] - z); // LP filtering
24012202:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
24012206:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
24012208:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
2401220c:	ed84 8a07 	vstr	s16, [r4, #28]
    z += 0.5f * (c->_f[j] - z); // LP filtering
24012210:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
24012214:	f006 0607 	and.w	r6, r6, #7
    c->_z = z;
    c->_j = j;
24012218:	62e6      	str	r6, [r4, #44]	; 0x2c
    z += 0.5f * (c->_f[j] - z); // LP filtering
2401221a:	eee7 7a26 	vfma.f32	s15, s14, s13


    return -c->out;
2401221e:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
24012222:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
24012226:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
2401222a:	b002      	add	sp, #8
2401222c:	ecbd 8b08 	vpop	{d8-d11}
24012230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sw = c->_w * c->syncdir;
24012234:	edd4 8a05 	vldr	s17, [r4, #20]
24012238:	ed94 aa08 	vldr	s20, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
2401223c:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
24012240:	ee28 aa8a 	vmul.f32	s20, s17, s20
    float inv_sw = c->_inv_w * c->syncdir;
24012244:	ee68 8aa6 	vmul.f32	s17, s17, s13
    p += sw - (int)sw;
24012248:	eebd 9aca 	vcvt.s32.f32	s18, s20
2401224c:	ee77 7a8a 	vadd.f32	s15, s15, s20
24012250:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
24012254:	ee37 9ac9 	vsub.f32	s18, s15, s18
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
24012258:	f040 815c 	bne.w	24012514 <tMBSaw_tick+0x470>
        if (sw > 0) p = eof_offset;
2401225c:	eeb5 aac0 	vcmpe.f32	s20, #0.0
        float eof_offset = sync * sw;
24012260:	ee27 7a0a 	vmul.f32	s14, s14, s20
        if (sw > 0) p = eof_offset;
24012264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
24012268:	ee79 aa47 	vsub.f32	s21, s18, s14
        if (sw > 0) p = eof_offset;
2401226c:	f340 8088 	ble.w	24012380 <tMBSaw_tick+0x2dc>
24012270:	eeb0 8a47 	vmov.f32	s16, s14
        if (p_at_reset >= 1.0f) {
24012274:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
24012278:	eef4 aacb 	vcmpe.f32	s21, s22
2401227c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012280:	f280 80ac 	bge.w	240123dc <tMBSaw_tick+0x338>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24012284:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
        if (p_at_reset < 0.0f) {
24012288:	eef5 aac0 	vcmpe.f32	s21, #0.0
2401228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012290:	f100 8106 	bmi.w	240124a0 <tMBSaw_tick+0x3fc>
        if (sw > 0)
24012294:	eeb5 aac0 	vcmpe.f32	s20, #0.0
24012298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401229c:	dc75      	bgt.n	2401238a <tMBSaw_tick+0x2e6>
        else if (sw < 0)
2401229e:	f57f af3e 	bpl.w	2401211e <tMBSaw_tick+0x7a>
	r = MINBLEP_PHASES * phase * inv_w;
240122a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240122a6:	ed9f 9a99 	vldr	s18, [pc, #612]	; 2401250c <tMBSaw_tick+0x468>
	i = lrintf(r - 0.5f);
240122aa:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240122ae:	ee28 9a89 	vmul.f32	s18, s17, s18
240122b2:	ee78 8a67 	vsub.f32	s17, s16, s15
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);
240122b6:	eef1 aa6a 	vneg.f32	s21, s21
	i = lrintf(r - 0.5f);
240122ba:	eea9 0a28 	vfma.f32	s0, s18, s17
240122be:	f000 fddb 	bl	24012e78 <lrintf>
	r -= (float)i;
240122c2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240122c6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240122ca:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
240122cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240122d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240122d4:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240122d6:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
240122da:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240122de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
240122e2:	e06c      	b.n	240123be <tMBSaw_tick+0x31a>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
240122e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
240122e8:	3001      	adds	r0, #1
240122ea:	4283      	cmp	r3, r0
240122ec:	f73f af34 	bgt.w	24012158 <tMBSaw_tick+0xb4>
240122f0:	e785      	b.n	240121fe <tMBSaw_tick+0x15a>
    sw = c->_w * c->syncdir;
240122f2:	edd4 8a05 	vldr	s17, [r4, #20]
    } else if (p >= 1.0f) {  /* normal phase reset */
240122f6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    sw = c->_w * c->syncdir;
240122fa:	ed94 8a08 	vldr	s16, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
240122fe:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
24012302:	ee28 8a88 	vmul.f32	s16, s17, s16
    float inv_sw = c->_inv_w * c->syncdir;
24012306:	ee68 8a87 	vmul.f32	s17, s17, s14
    p += sw - (int)sw;
2401230a:	eebd 7ac8 	vcvt.s32.f32	s14, s16
2401230e:	ee77 7a88 	vadd.f32	s15, s15, s16
24012312:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
24012316:	ee37 8ac8 	vsub.f32	s16, s15, s16
    } else if (p >= 1.0f) {  /* normal phase reset */
2401231a:	eeb4 8ac9 	vcmpe.f32	s16, s18
2401231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012322:	f6ff aef4 	blt.w	2401210e <tMBSaw_tick+0x6a>
        p -= 1.0f;
24012326:	eddf 7a79 	vldr	s15, [pc, #484]	; 2401250c <tMBSaw_tick+0x468>
2401232a:	ee38 8a49 	vsub.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
2401232e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24012332:	ee68 8aa7 	vmul.f32	s17, s17, s15
24012336:	eea8 0a88 	vfma.f32	s0, s17, s16
2401233a:	f000 fd9d 	bl	24012e78 <lrintf>
	r -= (float)i;
2401233e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24012342:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24012346:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
2401234a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401234e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24012352:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24012354:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24012356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
2401235a:	eed8 7a88 	vfnms.f32	s15, s17, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401235e:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
24012362:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24012366:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
2401236a:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401236e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
24012372:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24012376:	ed82 9a37 	vstr	s18, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401237a:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
2401237e:	e6ce      	b.n	2401211e <tMBSaw_tick+0x7a>
        else if (sw < 0) p = 1.0f - eof_offset;
24012380:	f100 80bc 	bmi.w	240124fc <tMBSaw_tick+0x458>
    p += sw - (int)sw;
24012384:	eeb0 8a49 	vmov.f32	s16, s18
24012388:	e774      	b.n	24012274 <tMBSaw_tick+0x1d0>
	r = MINBLEP_PHASES * phase * inv_w;
2401238a:	eddf 7a60 	vldr	s15, [pc, #384]	; 2401250c <tMBSaw_tick+0x468>
	i = lrintf(r - 0.5f);
2401238e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24012392:	ee68 8aa7 	vmul.f32	s17, s17, s15
24012396:	eea8 0a88 	vfma.f32	s0, s17, s16
2401239a:	f000 fd6d 	bl	24012e78 <lrintf>
	r -= (float)i;
2401239e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240123a2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240123a6:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
240123a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240123ac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240123b0:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240123b2:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
240123b6:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240123ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
240123be:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240123c2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
240123c6:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240123ca:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
240123ce:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240123d2:	edc2 aa37 	vstr	s21, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240123d6:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
240123da:	e6a0      	b.n	2401211e <tMBSaw_tick+0x7a>
            p_at_reset -= 1.0f;
240123dc:	ee7a aacb 	vsub.f32	s21, s21, s22
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
240123e0:	eddf ba4a 	vldr	s23, [pc, #296]	; 2401250c <tMBSaw_tick+0x468>
	i = lrintf(r - 0.5f);
240123e4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240123e8:	ee68 baab 	vmul.f32	s23, s17, s23
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
240123ec:	ee37 9a2a 	vadd.f32	s18, s14, s21
	i = lrintf(r - 0.5f);
240123f0:	eea9 0a2b 	vfma.f32	s0, s18, s23
240123f4:	f000 fd40 	bl	24012e78 <lrintf>
	r -= (float)i;
240123f8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240123fc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24012400:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24012404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24012408:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
2401240c:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401240e:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24012410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24012414:	eed9 7a2b 	vfnms.f32	s15, s18, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24012418:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
2401241c:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24012420:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
24012424:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
24012428:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
2401242c:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24012430:	ed82 ba37 	vstr	s22, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24012434:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
24012438:	e726      	b.n	24012288 <tMBSaw_tick+0x1e4>
    z += 0.5f * (c->_f[j] - z); // LP filtering
2401243a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
2401243e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
24012442:	e6de      	b.n	24012202 <tMBSaw_tick+0x15e>
	r = MINBLEP_PHASES * phase * inv_w;
24012444:	ee68 8a88 	vmul.f32	s17, s17, s16
	i = lrintf(r - 0.5f);
24012448:	ed9f aa30 	vldr	s20, [pc, #192]	; 2401250c <tMBSaw_tick+0x468>
2401244c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
        p += 1.0f;
24012450:	ee38 8a09 	vadd.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
24012454:	eea8 0a8a 	vfma.f32	s0, s17, s20
24012458:	f000 fd0e 	bl	24012e78 <lrintf>
	r -= (float)i;
2401245c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24012460:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
24012464:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
24012468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401246c:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24012470:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
24012472:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24012474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
24012478:	eed8 7a8a 	vfnms.f32	s15, s17, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401247c:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24012480:	4a23      	ldr	r2, [pc, #140]	; (24012510 <tMBSaw_tick+0x46c>)
	c->BLEPindices[c->mostRecentBLEP] = i;
24012482:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
24012486:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
2401248a:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
2401248e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
24012492:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
24012496:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
2401249a:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
2401249e:	e63e      	b.n	2401211e <tMBSaw_tick+0x7a>
            p_at_reset += 1.0f;
240124a0:	ed9f ba1a 	vldr	s22, [pc, #104]	; 2401250c <tMBSaw_tick+0x468>
	i = lrintf(r - 0.5f);
240124a4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
            p_at_reset += 1.0f;
240124a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240124ac:	ee28 ba8b 	vmul.f32	s22, s17, s22
240124b0:	ee7a aaa7 	vadd.f32	s21, s21, s15
	i = lrintf(r - 0.5f);
240124b4:	eeab 0a09 	vfma.f32	s0, s22, s18
240124b8:	f000 fcde 	bl	24012e78 <lrintf>
	r -= (float)i;
240124bc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240124c0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240124c4:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
240124c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
240124ca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240124ce:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240124d0:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240124d4:	4a0e      	ldr	r2, [pc, #56]	; (24012510 <tMBSaw_tick+0x46c>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240124d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
240124da:	eedb 7a09 	vfnms.f32	s15, s22, s18
	c->BLEPindices[c->mostRecentBLEP] = i;
240124de:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
240124e2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
240124e6:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
240124ea:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
240124ee:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
240124f2:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
240124f6:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
240124fa:	e6cb      	b.n	24012294 <tMBSaw_tick+0x1f0>
        else if (sw < 0) p = 1.0f - eof_offset;
240124fc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
24012500:	ee38 8a47 	vsub.f32	s16, s16, s14
24012504:	e6b6      	b.n	24012274 <tMBSaw_tick+0x1d0>
24012506:	bf00      	nop
24012508:	2401ec8c 	.word	0x2401ec8c
2401250c:	42800000 	.word	0x42800000
24012510:	bf800000 	.word	0xbf800000
    p += sw - (int)sw;
24012514:	eeb0 8a49 	vmov.f32	s16, s18
24012518:	e5f1      	b.n	240120fe <tMBSaw_tick+0x5a>
2401251a:	bf00      	nop

2401251c <tMBSaw_setFreq>:

void tMBSaw_setFreq(tMBSaw* const osc, float f)
{
    _tMBSaw* c = *osc;
2401251c:	6803      	ldr	r3, [r0, #0]
    c->freq = f;

    c->_w = c->freq * c->invSampleRate;
    c->_inv_w = 1.0f / c->_w;
2401251e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;
24012522:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
    c->freq = f;
24012526:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;
2401252a:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
2401252e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;
24012532:	ed83 0a08 	vstr	s0, [r3, #32]
    c->_inv_w = 1.0f / c->_w;
24012536:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
2401253a:	4770      	bx	lr

2401253c <tMBSaw_sync>:

float tMBSaw_sync(tMBSaw* const osc, float value)
{
    _tMBSaw* c = *osc;
2401253c:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
2401253e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
24012542:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
24012546:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
2401254a:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
2401254e:	eef1 7a67 	vneg.f32	s15, s15
24012552:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
24012556:	eef5 6ac0 	vcmpe.f32	s13, #0.0
2401255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401255e:	eef4 6ac7 	vcmpe.f32	s13, s14
24012562:	bfcc      	ite	gt
24012564:	2201      	movgt	r2, #1
24012566:	2200      	movle	r2, #0
24012568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401256c:	f002 0201 	and.w	r2, r2, #1
24012570:	bf88      	it	hi
24012572:	2200      	movhi	r2, #0
24012574:	b122      	cbz	r2, 24012580 <tMBSaw_sync+0x44>
24012576:	eeb5 0a40 	vcmp.f32	s0, #0.0
2401257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401257e:	da04      	bge.n	2401258a <tMBSaw_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
24012580:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24012598 <tMBSaw_sync+0x5c>
24012584:	ed83 7a04 	vstr	s14, [r3, #16]
    
    return value;
}
24012588:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
2401258a:	ee37 7a66 	vsub.f32	s14, s14, s13
2401258e:	ee27 7a06 	vmul.f32	s14, s14, s12
24012592:	ed83 7a04 	vstr	s14, [r3, #16]
}
24012596:	4770      	bx	lr
24012598:	00000000 	.word	0x00000000

2401259c <tMBSawPulse_setShape>:
}

void tMBSawPulse_setShape(tMBSawPulse* const osc, float shape)
{
    _tMBSawPulse* c = *osc;
    c->shape = shape;
2401259c:	6803      	ldr	r3, [r0, #0]
2401259e:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
240125a2:	4770      	bx	lr

240125a4 <tIntPhasor_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
240125a4:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
240125a6:	eddf 7a06 	vldr	s15, [pc, #24]	; 240125c0 <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
240125aa:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
240125ae:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
240125b0:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
240125b4:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
240125b6:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
240125ba:	ee20 0a27 	vmul.f32	s0, s0, s15
240125be:	4770      	bx	lr
240125c0:	2f80000d 	.word	0x2f80000d

240125c4 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, float freq)
{
    _tIntPhasor* c = *cy;
240125c4:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240125c6:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
240125ca:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240125ce:	ee20 0a27 	vmul.f32	s0, s0, s15
240125d2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240125d6:	ed83 0a02 	vstr	s0, [r3, #8]
}
240125da:	4770      	bx	lr

240125dc <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, float phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
240125dc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
240125e0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240125fc <tIntPhasor_setPhase+0x20>
240125e4:	6803      	ldr	r3, [r0, #0]
    phase -= i;
240125e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240125ea:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
240125ee:	ee20 0a07 	vmul.f32	s0, s0, s14
240125f2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240125f6:	ed83 0a01 	vstr	s0, [r3, #4]
}
240125fa:	4770      	bx	lr
240125fc:	4f800000 	.word	0x4f800000

24012600 <tSquareLFO_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tSquareLFO_tick(tSquareLFO* const cy)
{
    _tSquareLFO* c = *cy;
24012600:	6803      	ldr	r3, [r0, #0]
    // Phasor increment
    float a = tIntPhasor_tick(&c->phasor);
    float b = tIntPhasor_tick(&c->invPhasor);
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
24012602:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24012606:	ed9f 7a11 	vldr	s14, [pc, #68]	; 2401264c <tSquareLFO_tick+0x4c>
2401260a:	ed93 0a01 	vldr	s0, [r3, #4]
    _tIntPhasor* c = *cy;
2401260e:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
{
24012612:	b410      	push	{r4}
    c->phase = (c->phase + c->inc);
24012614:	6853      	ldr	r3, [r2, #4]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
24012616:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = (c->phase + c->inc);
2401261a:	6894      	ldr	r4, [r2, #8]
2401261c:	6888      	ldr	r0, [r1, #8]
2401261e:	4423      	add	r3, r4
    return 2 * tmp;
}
24012620:	f85d 4b04 	ldr.w	r4, [sp], #4
    c->phase = (c->phase + c->inc);
24012624:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24012626:	ee07 3a90 	vmov	s15, r3
    c->phase = (c->phase + c->inc);
2401262a:	684a      	ldr	r2, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
2401262c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
24012630:	4402      	add	r2, r0
    return c->phase * INV_TWO_TO_32; 
24012632:	ee06 2a90 	vmov	s13, r2
    c->phase = (c->phase + c->inc);
24012636:	604a      	str	r2, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24012638:	eef8 6a66 	vcvt.f32.u32	s13, s13
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401263c:	ee77 7ae6 	vsub.f32	s15, s15, s13
24012640:	eea7 0a87 	vfma.f32	s0, s15, s14
}
24012644:	ee30 0a00 	vadd.f32	s0, s0, s0
24012648:	4770      	bx	lr
2401264a:	bf00      	nop
2401264c:	2f80000d 	.word	0x2f80000d

24012650 <tSquareLFO_setFreq>:

void     tSquareLFO_setFreq(tSquareLFO* const cy, float freq)
{
    _tSquareLFO* c = *cy;
24012650:	6803      	ldr	r3, [r0, #0]
    _tIntPhasor* c = *cy;
24012652:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24012656:	ed92 7a06 	vldr	s14, [r2, #24]
2401265a:	edd3 7a06 	vldr	s15, [r3, #24]
2401265e:	ee20 7a07 	vmul.f32	s14, s0, s14
    c->freq  = freq;
24012662:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24012666:	ee60 7a27 	vmul.f32	s15, s0, s15
2401266a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
2401266e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24012672:	ed82 7a02 	vstr	s14, [r2, #8]
    c->freq  = freq;
24012676:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401267a:	edc3 7a02 	vstr	s15, [r3, #8]
    tIntPhasor_setFreq(&c->phasor,freq);
    tIntPhasor_setFreq(&c->invPhasor,freq);
}
2401267e:	4770      	bx	lr

24012680 <tSquareLFO_setPulseWidth>:
    tIntPhasor_setSampleRate(&c->invPhasor, sr);
}

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, float pw)
{
    _tSquareLFO *c = *cy;
24012680:	6803      	ldr	r3, [r0, #0]

    c->pulsewidth = pw;
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012682:	eddf 6a0d 	vldr	s13, [pc, #52]	; 240126b8 <tSquareLFO_setPulseWidth+0x38>
    c->pulsewidth = pw;
24012686:	ed83 0a01 	vstr	s0, [r3, #4]
    c->phase = phase * TWO_TO_32;
2401268a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 240126bc <tSquareLFO_setPulseWidth+0x3c>
2401268e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012692:	edd1 7a01 	vldr	s15, [r1, #4]
24012696:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401269a:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
2401269e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
240126a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240126a6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
240126aa:	ee20 0a07 	vmul.f32	s0, s0, s14
240126ae:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240126b2:	ed82 0a01 	vstr	s0, [r2, #4]
}
240126b6:	4770      	bx	lr
240126b8:	2f80000d 	.word	0x2f80000d
240126bc:	4f800000 	.word	0x4f800000

240126c0 <tSquareLFO_setPhase>:
    int i = phase;
240126c0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
240126c4:	eddf 6a12 	vldr	s13, [pc, #72]	; 24012710 <tSquareLFO_setPhase+0x50>

void tSquareLFO_setPhase(tSquareLFO* const cy, float phase)
{
    _tSquareLFO *c = *cy;
240126c8:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240126ca:	ed9f 6a12 	vldr	s12, [pc, #72]	; 24012714 <tSquareLFO_setPhase+0x54>
    phase -= i;
240126ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240126d2:	ed93 7a01 	vldr	s14, [r3, #4]
    c->phase = phase * TWO_TO_32;
240126d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    phase -= i;
240126da:	ee70 7a67 	vsub.f32	s15, s0, s15
    c->phase = phase * TWO_TO_32;
240126de:	ee67 7aa6 	vmul.f32	s15, s15, s13
240126e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240126e6:	eef8 5a67 	vcvt.f32.u32	s11, s15
    c->phase = phase * TWO_TO_32;
240126ea:	edc2 7a01 	vstr	s15, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240126ee:	eef0 7a47 	vmov.f32	s15, s14
240126f2:	eee5 7a86 	vfma.f32	s15, s11, s12
    int i = phase;
240126f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
240126fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240126fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24012702:	ee67 7aa6 	vmul.f32	s15, s15, s13
24012706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401270a:	edc3 7a01 	vstr	s15, [r3, #4]
}
2401270e:	4770      	bx	lr
24012710:	4f800000 	.word	0x4f800000
24012714:	2f80000d 	.word	0x2f80000d

24012718 <tSawSquareLFO_tick>:
    mpool_free((char*)c, c->mempool);
}
    
float   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
    _tSawSquareLFO* c = *cy;
24012718:	6802      	ldr	r2, [r0, #0]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401271a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
2401271e:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
24012722:	eddf 5a1c 	vldr	s11, [pc, #112]	; 24012794 <tSawSquareLFO_tick+0x7c>
    float b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
24012726:	ed92 0a01 	vldr	s0, [r2, #4]
2401272a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
{
2401272e:	b430      	push	{r4, r5}
    _tSquareLFO* c = *cy;
24012730:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
    return  (1 - c->shape) * a + c->shape * b; 
24012734:	ee37 7a40 	vsub.f32	s14, s14, s0
    _tIntPhasor* c = *cy;
24012738:	6898      	ldr	r0, [r3, #8]
    return  (1 - c->shape) * a + c->shape * b; 
2401273a:	ee30 0a00 	vadd.f32	s0, s0, s0
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401273e:	edd3 6a01 	vldr	s13, [r3, #4]
    c->phase = (c->phase + c->inc);
24012742:	6885      	ldr	r5, [r0, #8]
    return  (1 - c->shape) * a + c->shape * b; 
24012744:	ee37 7a07 	vadd.f32	s14, s14, s14
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
24012748:	ee76 6ae7 	vsub.f32	s13, s13, s15
    c->phase = (c->phase + c->inc);
2401274c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
24012750:	440a      	add	r2, r1
    _tIntPhasor* c = *cy;
24012752:	68d9      	ldr	r1, [r3, #12]
    c->phase = (c->phase + c->inc);
24012754:	6062      	str	r2, [r4, #4]
    return c->phase * INV_TWO_TO_32; 
24012756:	ee07 2a90 	vmov	s15, r2
    c->phase = (c->phase + c->inc);
2401275a:	6843      	ldr	r3, [r0, #4]
2401275c:	688c      	ldr	r4, [r1, #8]
    return c->phase * INV_TWO_TO_32; 
2401275e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
24012762:	442b      	add	r3, r5
24012764:	6043      	str	r3, [r0, #4]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24012766:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
2401276a:	684a      	ldr	r2, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
2401276c:	ee07 3a90 	vmov	s15, r3
    c->phase = (c->phase + c->inc);
24012770:	4422      	add	r2, r4
    return c->phase * INV_TWO_TO_32; 
24012772:	eef8 7a67 	vcvt.f32.u32	s15, s15
24012776:	ee05 2a10 	vmov	s10, r2
    c->phase = (c->phase + c->inc);
2401277a:	604a      	str	r2, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
2401277c:	eeb8 5a45 	vcvt.f32.u32	s10, s10
}
24012780:	bc30      	pop	{r4, r5}
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
24012782:	ee77 7ac5 	vsub.f32	s15, s15, s10
24012786:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
2401278a:	ee20 0a26 	vmul.f32	s0, s0, s13
}
2401278e:	eea6 0a07 	vfma.f32	s0, s12, s14
24012792:	4770      	bx	lr
24012794:	2f80000d 	.word	0x2f80000d

24012798 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, float freq)
{
    _tSawSquareLFO* c = *cy;
24012798:	6803      	ldr	r3, [r0, #0]
    _tIntPhasor* c = *cy;
2401279a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
2401279e:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240127a2:	edd3 7a06 	vldr	s15, [r3, #24]
240127a6:	edd1 6a06 	vldr	s13, [r1, #24]
240127aa:	ed92 7a06 	vldr	s14, [r2, #24]
240127ae:	ee60 7a27 	vmul.f32	s15, s0, s15
240127b2:	ee60 6a26 	vmul.f32	s13, s0, s13
    c->freq  = freq;
240127b6:	ed81 0a03 	vstr	s0, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240127ba:	ee20 7a07 	vmul.f32	s14, s0, s14
240127be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240127c2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
240127c6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
240127ca:	edc1 6a02 	vstr	s13, [r1, #8]
    c->freq  = freq;
240127ce:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240127d2:	ed82 7a02 	vstr	s14, [r2, #8]
    c->freq  = freq;
240127d6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240127da:	edc3 7a02 	vstr	s15, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
240127de:	4770      	bx	lr

240127e0 <tSawSquareLFO_setPhase>:
    int i = phase;
240127e0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
240127e4:	eddf 6a13 	vldr	s13, [pc, #76]	; 24012834 <tSawSquareLFO_setPhase+0x54>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, float phase)
{
    _tSawSquareLFO* c = *cy;
240127e8:	6802      	ldr	r2, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240127ea:	ed9f 6a13 	vldr	s12, [pc, #76]	; 24012838 <tSawSquareLFO_setPhase+0x58>
    phase -= i;
240127ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->phase = phase * TWO_TO_32;
240127f2:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
    phase -= i;
240127f6:	ee30 0a47 	vsub.f32	s0, s0, s14
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240127fa:	edd3 7a01 	vldr	s15, [r3, #4]
    c->phase = phase * TWO_TO_32;
240127fe:	ee20 0a26 	vmul.f32	s0, s0, s13
24012802:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
24012806:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401280a:	eeb8 7a40 	vcvt.f32.u32	s14, s0
    c->phase = phase * TWO_TO_32;
2401280e:	ed81 0a01 	vstr	s0, [r1, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012812:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
24012816:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
2401281a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401281e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24012822:	ee67 7aa6 	vmul.f32	s15, s15, s13
24012826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401282a:	edc3 7a01 	vstr	s15, [r3, #4]
2401282e:	ed82 0a01 	vstr	s0, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
24012832:	4770      	bx	lr
24012834:	4f800000 	.word	0x4f800000
24012838:	2f80000d 	.word	0x2f80000d

2401283c <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, float shape)
{
    _tSawSquareLFO* c = *cy;
    c->shape = shape; 
2401283c:	6803      	ldr	r3, [r0, #0]
2401283e:	ed83 0a01 	vstr	s0, [r3, #4]
}
24012842:	4770      	bx	lr

24012844 <tTriLFO_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tTriLFO_tick(tTriLFO* const cy)
{
    _tTriLFO* c = *cy;
24012844:	6803      	ldr	r3, [r0, #0]
    //bitmask fun
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
    uint32_t mask = shiftedPhase >> 31; //get the sign bit
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
24012846:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401284a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24012874 <tTriLFO_tick+0x30>
    c->phase += c->inc;
2401284e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
24012852:	440a      	add	r2, r1
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
24012854:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
    c->phase += c->inc;
24012858:	605a      	str	r2, [r3, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
2401285a:	eb01 73e1 	add.w	r3, r1, r1, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
2401285e:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
24012862:	ee07 3a90 	vmov	s15, r3
24012866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401286a:	eea7 0a87 	vfma.f32	s0, s15, s14
    return output;

}
2401286e:	ee30 0a00 	vadd.f32	s0, s0, s0
24012872:	4770      	bx	lr
24012874:	2ffffff6 	.word	0x2ffffff6

24012878 <tTriLFO_setFreq>:

void     tTriLFO_setFreq(tTriLFO* const cy, float freq)
{
    _tTriLFO* c = *cy;
24012878:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401287a:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
2401287e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24012882:	ee20 0a27 	vmul.f32	s0, s0, s15
24012886:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401288a:	ed83 0a02 	vstr	s0, [r3, #8]
}
2401288e:	4770      	bx	lr

24012890 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, float phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
24012890:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32_INT;
24012894:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24012896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401289a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
2401289e:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
240128a2:	ed83 0a01 	vstr	s0, [r3, #4]
}
240128a6:	4770      	bx	lr

240128a8 <tSineTriLFO_tick>:
    mpool_free((char*)c, c->mempool);
}
    
float   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
    _tSineTriLFO* c = *cy;
240128a8:	6803      	ldr	r3, [r0, #0]
    float a = tCycle_tick(&c->sine);
    float b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
240128aa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
240128ae:	4a21      	ldr	r2, [pc, #132]	; (24012934 <tSineTriLFO_tick+0x8c>)
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
240128b0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
240128b4:	68d9      	ldr	r1, [r3, #12]
    return  (1.0f - c->shape) * a + c->shape * b;
240128b6:	ed93 7a01 	vldr	s14, [r3, #4]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
240128ba:	eddf 6a1f 	vldr	s13, [pc, #124]	; 24012938 <tSineTriLFO_tick+0x90>
    return  (1.0f - c->shape) * a + c->shape * b;
240128be:	ee37 6a07 	vadd.f32	s12, s14, s14
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
240128c2:	eddf 4a1e 	vldr	s9, [pc, #120]	; 2401293c <tSineTriLFO_tick+0x94>
    return  (1.0f - c->shape) * a + c->shape * b;
240128c6:	ee75 5ac7 	vsub.f32	s11, s11, s14
{
240128ca:	b430      	push	{r4, r5}
    _tTriLFO* c = *cy;
240128cc:	689c      	ldr	r4, [r3, #8]
    idx = (idx + 1) & c->mask;
240128ce:	694d      	ldr	r5, [r1, #20]
    c->phase += c->inc;
240128d0:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
240128d4:	4403      	add	r3, r0
    idx = c->phase >> 21; //11 bit table 
240128d6:	0d58      	lsrs	r0, r3, #21
    c->phase += c->inc;
240128d8:	604b      	str	r3, [r1, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
240128da:	f3c3 0314 	ubfx	r3, r3, #0, #21
    c->phase += c->inc;
240128de:	68a1      	ldr	r1, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
240128e0:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
240128e4:	6863      	ldr	r3, [r4, #4]
240128e6:	440b      	add	r3, r1
    idx = (idx + 1) & c->mask;
240128e8:	1c41      	adds	r1, r0, #1
    samp0 = __leaf_table_sinewave[idx];
240128ea:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
240128ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    idx = (idx + 1) & c->mask;
240128f2:	4029      	ands	r1, r5
    c->phase += c->inc;
240128f4:	6063      	str	r3, [r4, #4]
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
240128f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    samp1 = __leaf_table_sinewave[idx];
240128fa:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
240128fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24012902:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    samp0 = __leaf_table_sinewave[idx];
24012906:	edd0 6a00 	vldr	s13, [r0]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
2401290a:	ed91 5a00 	vldr	s10, [r1]
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
2401290e:	ea82 73e3 	eor.w	r3, r2, r3, asr #31
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
24012912:	ee35 5a66 	vsub.f32	s10, s10, s13
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
24012916:	ee07 3a10 	vmov	s14, r3
2401291a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
2401291e:	eee7 6a85 	vfma.f32	s13, s15, s10
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
24012922:	eea7 0a24 	vfma.f32	s0, s14, s9
}
24012926:	bc30      	pop	{r4, r5}
    return  (1.0f - c->shape) * a + c->shape * b;
24012928:	ee26 0a00 	vmul.f32	s0, s12, s0
}
2401292c:	eea5 0aa6 	vfma.f32	s0, s11, s13
24012930:	4770      	bx	lr
24012932:	bf00      	nop
24012934:	24018588 	.word	0x24018588
24012938:	35000004 	.word	0x35000004
2401293c:	2ffffff6 	.word	0x2ffffff6

24012940 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, float freq)
{
    _tSineTriLFO* c = *cy;
24012940:	6803      	ldr	r3, [r0, #0]
    _tCycle* c = *cy;
24012942:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24012946:	ed92 7a05 	vldr	s14, [r2, #20]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401294a:	edd3 7a04 	vldr	s15, [r3, #16]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401294e:	ee20 7a07 	vmul.f32	s14, s0, s14
    c->freq  = freq;
24012952:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24012956:	ee60 7a27 	vmul.f32	s15, s0, s15
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401295a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401295e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24012962:	ed82 7a02 	vstr	s14, [r2, #8]
    c->freq  = freq;
24012966:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401296a:	edc3 7a02 	vstr	s15, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
2401296e:	4770      	bx	lr

24012970 <tSineTriLFO_setPhase>:
    int i = phase;
24012970:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
24012974:	ed9f 7a09 	vldr	s14, [pc, #36]	; 2401299c <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, float phase)
{
    _tSineTriLFO* c = *cy;
24012978:	6803      	ldr	r3, [r0, #0]
    phase -= i;
2401297a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase = phase * TWO_TO_32;
2401297e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    phase -= i;
24012982:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
24012986:	ee20 0a07 	vmul.f32	s0, s0, s14
2401298a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
2401298e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
24012992:	edc2 7a01 	vstr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
24012996:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
2401299a:	4770      	bx	lr
2401299c:	4f800000 	.word	0x4f800000

240129a0 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, float shape)
 {
    _tSineTriLFO* c = *cy;
    c->shape = shape;
240129a0:	6803      	ldr	r3, [r0, #0]
240129a2:	ed83 0a01 	vstr	s0, [r3, #4]

 }
240129a6:	4770      	bx	lr

240129a8 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
240129a8:	4770      	bx	lr
240129aa:	bf00      	nop

240129ac <LEAF_init>:
{
240129ac:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
240129ae:	6200      	str	r0, [r0, #32]
{
240129b0:	4604      	mov	r4, r0
240129b2:	461d      	mov	r5, r3
240129b4:	ed2d 8b02 	vpush	{d8}
240129b8:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
240129bc:	f7fc fb60 	bl	2400f080 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
240129c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
240129c4:	eddf 7a0c 	vldr	s15, [pc, #48]	; 240129f8 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
240129c8:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
240129ca:	4b0c      	ldr	r3, [pc, #48]	; (240129fc <LEAF_init+0x50>)
    leaf->sampleRate = sr;
240129cc:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
240129d0:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
240129d4:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
240129d6:	6162      	str	r2, [r4, #20]
}
240129d8:	ecbd 8b02 	vpop	{d8}
        leaf->errorState[i] = 0;
240129dc:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
240129e0:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
240129e4:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
240129e8:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
240129ec:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
240129f0:	edc4 7a03 	vstr	s15, [r4, #12]
}
240129f4:	bd38      	pop	{r3, r4, r5, pc}
240129f6:	bf00      	nop
240129f8:	40c90fdb 	.word	0x40c90fdb
240129fc:	240129a9 	.word	0x240129a9

24012a00 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
24012a00:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
24012a02:	eb00 0281 	add.w	r2, r0, r1, lsl #2
24012a06:	2401      	movs	r4, #1
    leaf->errorCallback(leaf, whichone);
24012a08:	6b83      	ldr	r3, [r0, #56]	; 0x38
    leaf->errorState[whichone] = 1;
24012a0a:	63d4      	str	r4, [r2, #60]	; 0x3c
}
24012a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
24012a10:	4718      	bx	r3
24012a12:	bf00      	nop

24012a14 <arm_sin_f32>:
24012a14:	eddf 7a1f 	vldr	s15, [pc, #124]	; 24012a94 <arm_sin_f32+0x80>
24012a18:	ee20 0a27 	vmul.f32	s0, s0, s15
24012a1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24012a20:	eefd 7ac0 	vcvt.s32.f32	s15, s0
24012a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012a28:	d504      	bpl.n	24012a34 <arm_sin_f32+0x20>
24012a2a:	ee17 3a90 	vmov	r3, s15
24012a2e:	3b01      	subs	r3, #1
24012a30:	ee07 3a90 	vmov	s15, r3
24012a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24012a38:	eddf 6a17 	vldr	s13, [pc, #92]	; 24012a98 <arm_sin_f32+0x84>
24012a3c:	ee70 7a67 	vsub.f32	s15, s0, s15
24012a40:	ee67 7aa6 	vmul.f32	s15, s15, s13
24012a44:	eebc 7ae7 	vcvt.u32.f32	s14, s15
24012a48:	ee17 3a10 	vmov	r3, s14
24012a4c:	b29b      	uxth	r3, r3
24012a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24012a52:	d21a      	bcs.n	24012a8a <arm_sin_f32+0x76>
24012a54:	ee07 3a10 	vmov	s14, r3
24012a58:	1c59      	adds	r1, r3, #1
24012a5a:	eeb8 0a47 	vcvt.f32.u32	s0, s14
24012a5e:	ee77 7ac0 	vsub.f32	s15, s15, s0
24012a62:	4a0e      	ldr	r2, [pc, #56]	; (24012a9c <arm_sin_f32+0x88>)
24012a64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24012a68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24012a6c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24012a70:	ee30 0a67 	vsub.f32	s0, s0, s15
24012a74:	edd3 6a00 	vldr	s13, [r3]
24012a78:	ed92 7a00 	vldr	s14, [r2]
24012a7c:	ee20 0a26 	vmul.f32	s0, s0, s13
24012a80:	ee67 7a87 	vmul.f32	s15, s15, s14
24012a84:	ee30 0a27 	vadd.f32	s0, s0, s15
24012a88:	4770      	bx	lr
24012a8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
24012a8e:	2101      	movs	r1, #1
24012a90:	2300      	movs	r3, #0
24012a92:	e7e6      	b.n	24012a62 <arm_sin_f32+0x4e>
24012a94:	3e22f983 	.word	0x3e22f983
24012a98:	44000000 	.word	0x44000000
24012a9c:	24027c94 	.word	0x24027c94

24012aa0 <__errno>:
24012aa0:	4b01      	ldr	r3, [pc, #4]	; (24012aa8 <__errno+0x8>)
24012aa2:	6818      	ldr	r0, [r3, #0]
24012aa4:	4770      	bx	lr
24012aa6:	bf00      	nop
24012aa8:	20000040 	.word	0x20000040

24012aac <__libc_init_array>:
24012aac:	b570      	push	{r4, r5, r6, lr}
24012aae:	4d0d      	ldr	r5, [pc, #52]	; (24012ae4 <__libc_init_array+0x38>)
24012ab0:	4c0d      	ldr	r4, [pc, #52]	; (24012ae8 <__libc_init_array+0x3c>)
24012ab2:	1b64      	subs	r4, r4, r5
24012ab4:	10a4      	asrs	r4, r4, #2
24012ab6:	2600      	movs	r6, #0
24012ab8:	42a6      	cmp	r6, r4
24012aba:	d109      	bne.n	24012ad0 <__libc_init_array+0x24>
24012abc:	4d0b      	ldr	r5, [pc, #44]	; (24012aec <__libc_init_array+0x40>)
24012abe:	4c0c      	ldr	r4, [pc, #48]	; (24012af0 <__libc_init_array+0x44>)
24012ac0:	f016 f8b2 	bl	24028c28 <_init>
24012ac4:	1b64      	subs	r4, r4, r5
24012ac6:	10a4      	asrs	r4, r4, #2
24012ac8:	2600      	movs	r6, #0
24012aca:	42a6      	cmp	r6, r4
24012acc:	d105      	bne.n	24012ada <__libc_init_array+0x2e>
24012ace:	bd70      	pop	{r4, r5, r6, pc}
24012ad0:	f855 3b04 	ldr.w	r3, [r5], #4
24012ad4:	4798      	blx	r3
24012ad6:	3601      	adds	r6, #1
24012ad8:	e7ee      	b.n	24012ab8 <__libc_init_array+0xc>
24012ada:	f855 3b04 	ldr.w	r3, [r5], #4
24012ade:	4798      	blx	r3
24012ae0:	3601      	adds	r6, #1
24012ae2:	e7f2      	b.n	24012aca <__libc_init_array+0x1e>
24012ae4:	24028c80 	.word	0x24028c80
24012ae8:	24028c80 	.word	0x24028c80
24012aec:	24028c80 	.word	0x24028c80
24012af0:	24028c84 	.word	0x24028c84

24012af4 <__itoa>:
24012af4:	1e93      	subs	r3, r2, #2
24012af6:	2b22      	cmp	r3, #34	; 0x22
24012af8:	b510      	push	{r4, lr}
24012afa:	460c      	mov	r4, r1
24012afc:	d904      	bls.n	24012b08 <__itoa+0x14>
24012afe:	2300      	movs	r3, #0
24012b00:	700b      	strb	r3, [r1, #0]
24012b02:	461c      	mov	r4, r3
24012b04:	4620      	mov	r0, r4
24012b06:	bd10      	pop	{r4, pc}
24012b08:	2a0a      	cmp	r2, #10
24012b0a:	d109      	bne.n	24012b20 <__itoa+0x2c>
24012b0c:	2800      	cmp	r0, #0
24012b0e:	da07      	bge.n	24012b20 <__itoa+0x2c>
24012b10:	232d      	movs	r3, #45	; 0x2d
24012b12:	700b      	strb	r3, [r1, #0]
24012b14:	4240      	negs	r0, r0
24012b16:	2101      	movs	r1, #1
24012b18:	4421      	add	r1, r4
24012b1a:	f000 f841 	bl	24012ba0 <__utoa>
24012b1e:	e7f1      	b.n	24012b04 <__itoa+0x10>
24012b20:	2100      	movs	r1, #0
24012b22:	e7f9      	b.n	24012b18 <__itoa+0x24>

24012b24 <itoa>:
24012b24:	f7ff bfe6 	b.w	24012af4 <__itoa>

24012b28 <memcpy>:
24012b28:	440a      	add	r2, r1
24012b2a:	4291      	cmp	r1, r2
24012b2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
24012b30:	d100      	bne.n	24012b34 <memcpy+0xc>
24012b32:	4770      	bx	lr
24012b34:	b510      	push	{r4, lr}
24012b36:	f811 4b01 	ldrb.w	r4, [r1], #1
24012b3a:	f803 4f01 	strb.w	r4, [r3, #1]!
24012b3e:	4291      	cmp	r1, r2
24012b40:	d1f9      	bne.n	24012b36 <memcpy+0xe>
24012b42:	bd10      	pop	{r4, pc}

24012b44 <memset>:
24012b44:	4402      	add	r2, r0
24012b46:	4603      	mov	r3, r0
24012b48:	4293      	cmp	r3, r2
24012b4a:	d100      	bne.n	24012b4e <memset+0xa>
24012b4c:	4770      	bx	lr
24012b4e:	f803 1b01 	strb.w	r1, [r3], #1
24012b52:	e7f9      	b.n	24012b48 <memset+0x4>

24012b54 <frexpf>:
24012b54:	ee10 3a10 	vmov	r3, s0
24012b58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24012b5c:	2100      	movs	r1, #0
24012b5e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24012b62:	6001      	str	r1, [r0, #0]
24012b64:	da19      	bge.n	24012b9a <frexpf+0x46>
24012b66:	b1c2      	cbz	r2, 24012b9a <frexpf+0x46>
24012b68:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
24012b6c:	d10a      	bne.n	24012b84 <frexpf+0x30>
24012b6e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 24012b9c <frexpf+0x48>
24012b72:	ee60 7a27 	vmul.f32	s15, s0, s15
24012b76:	f06f 0118 	mvn.w	r1, #24
24012b7a:	ee17 3a90 	vmov	r3, s15
24012b7e:	6001      	str	r1, [r0, #0]
24012b80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24012b84:	6801      	ldr	r1, [r0, #0]
24012b86:	15d2      	asrs	r2, r2, #23
24012b88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24012b8c:	3a7e      	subs	r2, #126	; 0x7e
24012b8e:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
24012b92:	440a      	add	r2, r1
24012b94:	ee00 3a10 	vmov	s0, r3
24012b98:	6002      	str	r2, [r0, #0]
24012b9a:	4770      	bx	lr
24012b9c:	4c000000 	.word	0x4c000000

24012ba0 <__utoa>:
24012ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
24012ba2:	4c1f      	ldr	r4, [pc, #124]	; (24012c20 <__utoa+0x80>)
24012ba4:	b08b      	sub	sp, #44	; 0x2c
24012ba6:	4605      	mov	r5, r0
24012ba8:	460b      	mov	r3, r1
24012baa:	466e      	mov	r6, sp
24012bac:	f104 0c20 	add.w	ip, r4, #32
24012bb0:	6820      	ldr	r0, [r4, #0]
24012bb2:	6861      	ldr	r1, [r4, #4]
24012bb4:	4637      	mov	r7, r6
24012bb6:	c703      	stmia	r7!, {r0, r1}
24012bb8:	3408      	adds	r4, #8
24012bba:	4564      	cmp	r4, ip
24012bbc:	463e      	mov	r6, r7
24012bbe:	d1f7      	bne.n	24012bb0 <__utoa+0x10>
24012bc0:	7921      	ldrb	r1, [r4, #4]
24012bc2:	7139      	strb	r1, [r7, #4]
24012bc4:	1e91      	subs	r1, r2, #2
24012bc6:	6820      	ldr	r0, [r4, #0]
24012bc8:	6038      	str	r0, [r7, #0]
24012bca:	2922      	cmp	r1, #34	; 0x22
24012bcc:	f04f 0100 	mov.w	r1, #0
24012bd0:	d904      	bls.n	24012bdc <__utoa+0x3c>
24012bd2:	7019      	strb	r1, [r3, #0]
24012bd4:	460b      	mov	r3, r1
24012bd6:	4618      	mov	r0, r3
24012bd8:	b00b      	add	sp, #44	; 0x2c
24012bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
24012bdc:	1e58      	subs	r0, r3, #1
24012bde:	4684      	mov	ip, r0
24012be0:	fbb5 f7f2 	udiv	r7, r5, r2
24012be4:	fb02 5617 	mls	r6, r2, r7, r5
24012be8:	3628      	adds	r6, #40	; 0x28
24012bea:	446e      	add	r6, sp
24012bec:	460c      	mov	r4, r1
24012bee:	f816 6c28 	ldrb.w	r6, [r6, #-40]
24012bf2:	f80c 6f01 	strb.w	r6, [ip, #1]!
24012bf6:	462e      	mov	r6, r5
24012bf8:	42b2      	cmp	r2, r6
24012bfa:	f101 0101 	add.w	r1, r1, #1
24012bfe:	463d      	mov	r5, r7
24012c00:	d9ee      	bls.n	24012be0 <__utoa+0x40>
24012c02:	2200      	movs	r2, #0
24012c04:	545a      	strb	r2, [r3, r1]
24012c06:	1919      	adds	r1, r3, r4
24012c08:	1aa5      	subs	r5, r4, r2
24012c0a:	42aa      	cmp	r2, r5
24012c0c:	dae3      	bge.n	24012bd6 <__utoa+0x36>
24012c0e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
24012c12:	780e      	ldrb	r6, [r1, #0]
24012c14:	7006      	strb	r6, [r0, #0]
24012c16:	3201      	adds	r2, #1
24012c18:	f801 5901 	strb.w	r5, [r1], #-1
24012c1c:	e7f4      	b.n	24012c08 <__utoa+0x68>
24012c1e:	bf00      	nop
24012c20:	24028498 	.word	0x24028498

24012c24 <with_errnof>:
24012c24:	b513      	push	{r0, r1, r4, lr}
24012c26:	4604      	mov	r4, r0
24012c28:	ed8d 0a01 	vstr	s0, [sp, #4]
24012c2c:	f7ff ff38 	bl	24012aa0 <__errno>
24012c30:	ed9d 0a01 	vldr	s0, [sp, #4]
24012c34:	6004      	str	r4, [r0, #0]
24012c36:	b002      	add	sp, #8
24012c38:	bd10      	pop	{r4, pc}

24012c3a <xflowf>:
24012c3a:	b130      	cbz	r0, 24012c4a <xflowf+0x10>
24012c3c:	eef1 7a40 	vneg.f32	s15, s0
24012c40:	ee27 0a80 	vmul.f32	s0, s15, s0
24012c44:	2022      	movs	r0, #34	; 0x22
24012c46:	f7ff bfed 	b.w	24012c24 <with_errnof>
24012c4a:	eef0 7a40 	vmov.f32	s15, s0
24012c4e:	e7f7      	b.n	24012c40 <xflowf+0x6>

24012c50 <__math_uflowf>:
24012c50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24012c58 <__math_uflowf+0x8>
24012c54:	f7ff bff1 	b.w	24012c3a <xflowf>
24012c58:	10000000 	.word	0x10000000

24012c5c <__math_may_uflowf>:
24012c5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24012c64 <__math_may_uflowf+0x8>
24012c60:	f7ff bfeb 	b.w	24012c3a <xflowf>
24012c64:	1a200000 	.word	0x1a200000

24012c68 <__math_oflowf>:
24012c68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24012c70 <__math_oflowf+0x8>
24012c6c:	f7ff bfe5 	b.w	24012c3a <xflowf>
24012c70:	70000000 	.word	0x70000000

24012c74 <__math_divzerof>:
24012c74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24012c78:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24012c7c:	2800      	cmp	r0, #0
24012c7e:	fe40 7a27 	vseleq.f32	s15, s0, s15
24012c82:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24012c90 <__math_divzerof+0x1c>
24012c86:	2022      	movs	r0, #34	; 0x22
24012c88:	ee87 0a80 	vdiv.f32	s0, s15, s0
24012c8c:	f7ff bfca 	b.w	24012c24 <with_errnof>
24012c90:	00000000 	.word	0x00000000

24012c94 <__math_invalidf>:
24012c94:	eef0 7a40 	vmov.f32	s15, s0
24012c98:	ee30 7a40 	vsub.f32	s14, s0, s0
24012c9c:	eef4 7a67 	vcmp.f32	s15, s15
24012ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012ca4:	ee87 0a07 	vdiv.f32	s0, s14, s14
24012ca8:	d602      	bvs.n	24012cb0 <__math_invalidf+0x1c>
24012caa:	2021      	movs	r0, #33	; 0x21
24012cac:	f7ff bfba 	b.w	24012c24 <with_errnof>
24012cb0:	4770      	bx	lr
	...

24012cb4 <expf>:
24012cb4:	ee10 2a10 	vmov	r2, s0
24012cb8:	f240 412a 	movw	r1, #1066	; 0x42a
24012cbc:	f3c2 530a 	ubfx	r3, r2, #20, #11
24012cc0:	428b      	cmp	r3, r1
24012cc2:	b430      	push	{r4, r5}
24012cc4:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
24012cc8:	d92a      	bls.n	24012d20 <expf+0x6c>
24012cca:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
24012cce:	d058      	beq.n	24012d82 <expf+0xce>
24012cd0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
24012cd4:	d303      	bcc.n	24012cde <expf+0x2a>
24012cd6:	ee30 0a00 	vadd.f32	s0, s0, s0
24012cda:	bc30      	pop	{r4, r5}
24012cdc:	4770      	bx	lr
24012cde:	eddf 7a2a 	vldr	s15, [pc, #168]	; 24012d88 <expf+0xd4>
24012ce2:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012cea:	dd03      	ble.n	24012cf4 <expf+0x40>
24012cec:	bc30      	pop	{r4, r5}
24012cee:	2000      	movs	r0, #0
24012cf0:	f7ff bfba 	b.w	24012c68 <__math_oflowf>
24012cf4:	eddf 7a25 	vldr	s15, [pc, #148]	; 24012d8c <expf+0xd8>
24012cf8:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012d00:	d503      	bpl.n	24012d0a <expf+0x56>
24012d02:	bc30      	pop	{r4, r5}
24012d04:	2000      	movs	r0, #0
24012d06:	f7ff bfa3 	b.w	24012c50 <__math_uflowf>
24012d0a:	eddf 7a21 	vldr	s15, [pc, #132]	; 24012d90 <expf+0xdc>
24012d0e:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012d16:	d503      	bpl.n	24012d20 <expf+0x6c>
24012d18:	bc30      	pop	{r4, r5}
24012d1a:	2000      	movs	r0, #0
24012d1c:	f7ff bf9e 	b.w	24012c5c <__math_may_uflowf>
24012d20:	4b1c      	ldr	r3, [pc, #112]	; (24012d94 <expf+0xe0>)
24012d22:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24012d26:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
24012d2a:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
24012d2e:	eeb0 7b44 	vmov.f64	d7, d4
24012d32:	eea5 7b06 	vfma.f64	d7, d5, d6
24012d36:	ee17 0a10 	vmov	r0, s14
24012d3a:	ee37 7b44 	vsub.f64	d7, d7, d4
24012d3e:	f000 021f 	and.w	r2, r0, #31
24012d42:	ee95 7b06 	vfnms.f64	d7, d5, d6
24012d46:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
24012d4a:	ee27 4b07 	vmul.f64	d4, d7, d7
24012d4e:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
24012d52:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
24012d56:	eea5 6b07 	vfma.f64	d6, d5, d7
24012d5a:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
24012d5e:	684d      	ldr	r5, [r1, #4]
24012d60:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
24012d64:	2100      	movs	r1, #0
24012d66:	190a      	adds	r2, r1, r4
24012d68:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
24012d6c:	eea5 0b07 	vfma.f64	d0, d5, d7
24012d70:	ec43 2b17 	vmov	d7, r2, r3
24012d74:	eea6 0b04 	vfma.f64	d0, d6, d4
24012d78:	ee20 0b07 	vmul.f64	d0, d0, d7
24012d7c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24012d80:	e7ab      	b.n	24012cda <expf+0x26>
24012d82:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24012d98 <expf+0xe4>
24012d86:	e7a8      	b.n	24012cda <expf+0x26>
24012d88:	42b17217 	.word	0x42b17217
24012d8c:	c2cff1b4 	.word	0xc2cff1b4
24012d90:	c2ce8ecf 	.word	0xc2ce8ecf
24012d94:	240284c0 	.word	0x240284c0
24012d98:	00000000 	.word	0x00000000

24012d9c <fabsf>:
24012d9c:	ee10 3a10 	vmov	r3, s0
24012da0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24012da4:	ee00 3a10 	vmov	s0, r3
24012da8:	4770      	bx	lr
	...

24012dac <logf>:
24012dac:	ee10 3a10 	vmov	r3, s0
24012db0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24012db4:	b410      	push	{r4}
24012db6:	d055      	beq.n	24012e64 <logf+0xb8>
24012db8:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
24012dbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
24012dc0:	d31a      	bcc.n	24012df8 <logf+0x4c>
24012dc2:	005a      	lsls	r2, r3, #1
24012dc4:	d104      	bne.n	24012dd0 <logf+0x24>
24012dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
24012dca:	2001      	movs	r0, #1
24012dcc:	f7ff bf52 	b.w	24012c74 <__math_divzerof>
24012dd0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24012dd4:	d043      	beq.n	24012e5e <logf+0xb2>
24012dd6:	2b00      	cmp	r3, #0
24012dd8:	db02      	blt.n	24012de0 <logf+0x34>
24012dda:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
24012dde:	d303      	bcc.n	24012de8 <logf+0x3c>
24012de0:	f85d 4b04 	ldr.w	r4, [sp], #4
24012de4:	f7ff bf56 	b.w	24012c94 <__math_invalidf>
24012de8:	eddf 7a20 	vldr	s15, [pc, #128]	; 24012e6c <logf+0xc0>
24012dec:	ee20 0a27 	vmul.f32	s0, s0, s15
24012df0:	ee10 3a10 	vmov	r3, s0
24012df4:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
24012df8:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
24012dfc:	491c      	ldr	r1, [pc, #112]	; (24012e70 <logf+0xc4>)
24012dfe:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
24012e02:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
24012e06:	f3c2 40c3 	ubfx	r0, r2, #19, #4
24012e0a:	0dd4      	lsrs	r4, r2, #23
24012e0c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
24012e10:	05e4      	lsls	r4, r4, #23
24012e12:	ed90 6b00 	vldr	d6, [r0]
24012e16:	1b1b      	subs	r3, r3, r4
24012e18:	ee07 3a90 	vmov	s15, r3
24012e1c:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
24012e20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24012e24:	15d2      	asrs	r2, r2, #23
24012e26:	eea6 0b07 	vfma.f64	d0, d6, d7
24012e2a:	ed90 6b02 	vldr	d6, [r0, #8]
24012e2e:	ee20 4b00 	vmul.f64	d4, d0, d0
24012e32:	ee07 2a90 	vmov	s15, r2
24012e36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24012e3a:	eea7 6b05 	vfma.f64	d6, d7, d5
24012e3e:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
24012e42:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
24012e46:	eea5 7b00 	vfma.f64	d7, d5, d0
24012e4a:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
24012e4e:	ee30 0b06 	vadd.f64	d0, d0, d6
24012e52:	eea5 7b04 	vfma.f64	d7, d5, d4
24012e56:	eea4 0b07 	vfma.f64	d0, d4, d7
24012e5a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24012e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
24012e62:	4770      	bx	lr
24012e64:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24012e74 <logf+0xc8>
24012e68:	e7f9      	b.n	24012e5e <logf+0xb2>
24012e6a:	bf00      	nop
24012e6c:	4b000000 	.word	0x4b000000
24012e70:	24028608 	.word	0x24028608
24012e74:	00000000 	.word	0x00000000

24012e78 <lrintf>:
24012e78:	ee10 3a10 	vmov	r3, s0
24012e7c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24012e80:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
24012e84:	281e      	cmp	r0, #30
24012e86:	b082      	sub	sp, #8
24012e88:	dc2e      	bgt.n	24012ee8 <lrintf+0x70>
24012e8a:	1c41      	adds	r1, r0, #1
24012e8c:	da02      	bge.n	24012e94 <lrintf+0x1c>
24012e8e:	2000      	movs	r0, #0
24012e90:	b002      	add	sp, #8
24012e92:	4770      	bx	lr
24012e94:	2816      	cmp	r0, #22
24012e96:	ea4f 71d3 	mov.w	r1, r3, lsr #31
24012e9a:	dd09      	ble.n	24012eb0 <lrintf+0x38>
24012e9c:	f3c3 0016 	ubfx	r0, r3, #0, #23
24012ea0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
24012ea4:	3a96      	subs	r2, #150	; 0x96
24012ea6:	4090      	lsls	r0, r2
24012ea8:	2900      	cmp	r1, #0
24012eaa:	d0f1      	beq.n	24012e90 <lrintf+0x18>
24012eac:	4240      	negs	r0, r0
24012eae:	e7ef      	b.n	24012e90 <lrintf+0x18>
24012eb0:	4b10      	ldr	r3, [pc, #64]	; (24012ef4 <lrintf+0x7c>)
24012eb2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
24012eb6:	ed93 7a00 	vldr	s14, [r3]
24012eba:	ee37 0a00 	vadd.f32	s0, s14, s0
24012ebe:	ed8d 0a01 	vstr	s0, [sp, #4]
24012ec2:	eddd 7a01 	vldr	s15, [sp, #4]
24012ec6:	ee77 7ac7 	vsub.f32	s15, s15, s14
24012eca:	ee17 3a90 	vmov	r3, s15
24012ece:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
24012ed2:	d0dc      	beq.n	24012e8e <lrintf+0x16>
24012ed4:	f3c3 0016 	ubfx	r0, r3, #0, #23
24012ed8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
24012edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
24012ee0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
24012ee4:	40d8      	lsrs	r0, r3
24012ee6:	e7df      	b.n	24012ea8 <lrintf+0x30>
24012ee8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
24012eec:	ee17 0a90 	vmov	r0, s15
24012ef0:	e7ce      	b.n	24012e90 <lrintf+0x18>
24012ef2:	bf00      	nop
24012ef4:	24028728 	.word	0x24028728

24012ef8 <checkint>:
24012ef8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
24012efc:	2b7e      	cmp	r3, #126	; 0x7e
24012efe:	dd10      	ble.n	24012f22 <checkint+0x2a>
24012f00:	2b96      	cmp	r3, #150	; 0x96
24012f02:	dc0c      	bgt.n	24012f1e <checkint+0x26>
24012f04:	2201      	movs	r2, #1
24012f06:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
24012f0a:	fa02 f303 	lsl.w	r3, r2, r3
24012f0e:	1e5a      	subs	r2, r3, #1
24012f10:	4202      	tst	r2, r0
24012f12:	d106      	bne.n	24012f22 <checkint+0x2a>
24012f14:	4203      	tst	r3, r0
24012f16:	bf0c      	ite	eq
24012f18:	2002      	moveq	r0, #2
24012f1a:	2001      	movne	r0, #1
24012f1c:	4770      	bx	lr
24012f1e:	2002      	movs	r0, #2
24012f20:	4770      	bx	lr
24012f22:	2000      	movs	r0, #0
24012f24:	4770      	bx	lr
	...

24012f28 <powf>:
24012f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
24012f2a:	ee10 1a10 	vmov	r1, s0
24012f2e:	ee10 4a90 	vmov	r4, s1
24012f32:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
24012f36:	0062      	lsls	r2, r4, #1
24012f38:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24012f3c:	eef0 7a40 	vmov.f32	s15, s0
24012f40:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
24012f44:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
24012f48:	d252      	bcs.n	24012ff0 <powf+0xc8>
24012f4a:	4298      	cmp	r0, r3
24012f4c:	d252      	bcs.n	24012ff4 <powf+0xcc>
24012f4e:	2000      	movs	r0, #0
24012f50:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
24012f54:	4ca0      	ldr	r4, [pc, #640]	; (240131d8 <powf+0x2b0>)
24012f56:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
24012f5a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
24012f5e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
24012f62:	0dd2      	lsrs	r2, r2, #23
24012f64:	05d2      	lsls	r2, r2, #23
24012f66:	eb04 1505 	add.w	r5, r4, r5, lsl #4
24012f6a:	1a8b      	subs	r3, r1, r2
24012f6c:	ed95 6b00 	vldr	d6, [r5]
24012f70:	ee07 3a90 	vmov	s15, r3
24012f74:	15d2      	asrs	r2, r2, #23
24012f76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24012f7a:	eea6 5b07 	vfma.f64	d5, d6, d7
24012f7e:	ed95 6b02 	vldr	d6, [r5, #8]
24012f82:	ee25 2b05 	vmul.f64	d2, d5, d5
24012f86:	ee22 1b02 	vmul.f64	d1, d2, d2
24012f8a:	ee07 2a90 	vmov	s15, r2
24012f8e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
24012f92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24012f96:	ee37 7b06 	vadd.f64	d7, d7, d6
24012f9a:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
24012f9e:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
24012fa2:	eea5 3b06 	vfma.f64	d3, d5, d6
24012fa6:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
24012faa:	eea5 6b04 	vfma.f64	d6, d5, d4
24012fae:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
24012fb2:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
24012fb6:	eea5 7b04 	vfma.f64	d7, d5, d4
24012fba:	eea2 7b06 	vfma.f64	d7, d2, d6
24012fbe:	eea3 7b01 	vfma.f64	d7, d3, d1
24012fc2:	ee20 0b07 	vmul.f64	d0, d0, d7
24012fc6:	ee10 3a90 	vmov	r3, s1
24012fca:	f3c3 32cf 	ubfx	r2, r3, #15, #16
24012fce:	f248 03bf 	movw	r3, #32959	; 0x80bf
24012fd2:	429a      	cmp	r2, r3
24012fd4:	f0c0 80b1 	bcc.w	2401313a <powf+0x212>
24012fd8:	ed9f 7b77 	vldr	d7, [pc, #476]	; 240131b8 <powf+0x290>
24012fdc:	eeb4 0bc7 	vcmpe.f64	d0, d7
24012fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012fe4:	dd79      	ble.n	240130da <powf+0x1b2>
24012fe6:	b003      	add	sp, #12
24012fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24012fec:	f7ff be3c 	b.w	24012c68 <__math_oflowf>
24012ff0:	4298      	cmp	r0, r3
24012ff2:	d32d      	bcc.n	24013050 <powf+0x128>
24012ff4:	b952      	cbnz	r2, 2401300c <powf+0xe4>
24012ff6:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
24012ffa:	005b      	lsls	r3, r3, #1
24012ffc:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
24013000:	f240 80c9 	bls.w	24013196 <powf+0x26e>
24013004:	ee37 0aa0 	vadd.f32	s0, s15, s1
24013008:	b003      	add	sp, #12
2401300a:	bd30      	pop	{r4, r5, pc}
2401300c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
24013010:	d105      	bne.n	2401301e <powf+0xf6>
24013012:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
24013016:	0064      	lsls	r4, r4, #1
24013018:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
2401301c:	e7f0      	b.n	24013000 <powf+0xd8>
2401301e:	004b      	lsls	r3, r1, #1
24013020:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
24013024:	d8ee      	bhi.n	24013004 <powf+0xdc>
24013026:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
2401302a:	d1eb      	bne.n	24013004 <powf+0xdc>
2401302c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24013030:	f000 80b1 	beq.w	24013196 <powf+0x26e>
24013034:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24013038:	ea6f 0404 	mvn.w	r4, r4
2401303c:	bf34      	ite	cc
2401303e:	2300      	movcc	r3, #0
24013040:	2301      	movcs	r3, #1
24013042:	0fe4      	lsrs	r4, r4, #31
24013044:	42a3      	cmp	r3, r4
24013046:	f040 80a9 	bne.w	2401319c <powf+0x274>
2401304a:	ee20 0aa0 	vmul.f32	s0, s1, s1
2401304e:	e7db      	b.n	24013008 <powf+0xe0>
24013050:	004d      	lsls	r5, r1, #1
24013052:	1e6a      	subs	r2, r5, #1
24013054:	429a      	cmp	r2, r3
24013056:	d31c      	bcc.n	24013092 <powf+0x16a>
24013058:	2900      	cmp	r1, #0
2401305a:	ee20 0a00 	vmul.f32	s0, s0, s0
2401305e:	da0f      	bge.n	24013080 <powf+0x158>
24013060:	ee10 0a90 	vmov	r0, s1
24013064:	f7ff ff48 	bl	24012ef8 <checkint>
24013068:	2801      	cmp	r0, #1
2401306a:	d109      	bne.n	24013080 <powf+0x158>
2401306c:	eeb1 0a40 	vneg.f32	s0, s0
24013070:	b945      	cbnz	r5, 24013084 <powf+0x15c>
24013072:	2c00      	cmp	r4, #0
24013074:	dac8      	bge.n	24013008 <powf+0xe0>
24013076:	b003      	add	sp, #12
24013078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401307c:	f7ff bdfa 	b.w	24012c74 <__math_divzerof>
24013080:	2000      	movs	r0, #0
24013082:	e7f5      	b.n	24013070 <powf+0x148>
24013084:	2c00      	cmp	r4, #0
24013086:	dabf      	bge.n	24013008 <powf+0xe0>
24013088:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401308c:	ee87 0a80 	vdiv.f32	s0, s15, s0
24013090:	e7ba      	b.n	24013008 <powf+0xe0>
24013092:	2900      	cmp	r1, #0
24013094:	da1f      	bge.n	240130d6 <powf+0x1ae>
24013096:	ee10 0a90 	vmov	r0, s1
2401309a:	f7ff ff2d 	bl	24012ef8 <checkint>
2401309e:	b920      	cbnz	r0, 240130aa <powf+0x182>
240130a0:	b003      	add	sp, #12
240130a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
240130a6:	f7ff bdf5 	b.w	24012c94 <__math_invalidf>
240130aa:	2801      	cmp	r0, #1
240130ac:	bf14      	ite	ne
240130ae:	2000      	movne	r0, #0
240130b0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
240130b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240130b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
240130bc:	f4bf af48 	bcs.w	24012f50 <powf+0x28>
240130c0:	ed9f 0a46 	vldr	s0, [pc, #280]	; 240131dc <powf+0x2b4>
240130c4:	ee27 0a80 	vmul.f32	s0, s15, s0
240130c8:	ee10 3a10 	vmov	r3, s0
240130cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240130d0:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
240130d4:	e73c      	b.n	24012f50 <powf+0x28>
240130d6:	2000      	movs	r0, #0
240130d8:	e7ee      	b.n	240130b8 <powf+0x190>
240130da:	ed9f 7b39 	vldr	d7, [pc, #228]	; 240131c0 <powf+0x298>
240130de:	eeb4 0bc7 	vcmpe.f64	d0, d7
240130e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240130e6:	dd10      	ble.n	2401310a <powf+0x1e2>
240130e8:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
240130ec:	2800      	cmp	r0, #0
240130ee:	d158      	bne.n	240131a2 <powf+0x27a>
240130f0:	9300      	str	r3, [sp, #0]
240130f2:	eddd 7a00 	vldr	s15, [sp]
240130f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240130fa:	ee77 7a87 	vadd.f32	s15, s15, s14
240130fe:	eef4 7a47 	vcmp.f32	s15, s14
24013102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013106:	f47f af6e 	bne.w	24012fe6 <powf+0xbe>
2401310a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 240131c8 <powf+0x2a0>
2401310e:	eeb4 0bc7 	vcmpe.f64	d0, d7
24013112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013116:	d804      	bhi.n	24013122 <powf+0x1fa>
24013118:	b003      	add	sp, #12
2401311a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401311e:	f7ff bd97 	b.w	24012c50 <__math_uflowf>
24013122:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 240131d0 <powf+0x2a8>
24013126:	eeb4 0bc7 	vcmpe.f64	d0, d7
2401312a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401312e:	d504      	bpl.n	2401313a <powf+0x212>
24013130:	b003      	add	sp, #12
24013132:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24013136:	f7ff bd91 	b.w	24012c5c <__math_may_uflowf>
2401313a:	4b29      	ldr	r3, [pc, #164]	; (240131e0 <powf+0x2b8>)
2401313c:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
24013140:	ee30 6b07 	vadd.f64	d6, d0, d7
24013144:	ee16 2a10 	vmov	r2, s12
24013148:	ee36 7b47 	vsub.f64	d7, d6, d7
2401314c:	f002 011f 	and.w	r1, r2, #31
24013150:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
24013154:	ee30 7b47 	vsub.f64	d7, d0, d7
24013158:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401315c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
24013160:	ee27 4b07 	vmul.f64	d4, d7, d7
24013164:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
24013168:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
2401316c:	eea7 6b05 	vfma.f64	d6, d7, d5
24013170:	686d      	ldr	r5, [r5, #4]
24013172:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
24013176:	1882      	adds	r2, r0, r2
24013178:	2300      	movs	r3, #0
2401317a:	1918      	adds	r0, r3, r4
2401317c:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
24013180:	eea7 0b05 	vfma.f64	d0, d7, d5
24013184:	ec41 0b17 	vmov	d7, r0, r1
24013188:	eea6 0b04 	vfma.f64	d0, d6, d4
2401318c:	ee20 0b07 	vmul.f64	d0, d0, d7
24013190:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24013194:	e738      	b.n	24013008 <powf+0xe0>
24013196:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401319a:	e735      	b.n	24013008 <powf+0xe0>
2401319c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 240131e4 <powf+0x2bc>
240131a0:	e732      	b.n	24013008 <powf+0xe0>
240131a2:	9301      	str	r3, [sp, #4]
240131a4:	eddd 7a01 	vldr	s15, [sp, #4]
240131a8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
240131ac:	ee77 7a67 	vsub.f32	s15, s14, s15
240131b0:	e7a5      	b.n	240130fe <powf+0x1d6>
240131b2:	bf00      	nop
240131b4:	f3af 8000 	nop.w
240131b8:	ffd1d571 	.word	0xffd1d571
240131bc:	405fffff 	.word	0x405fffff
240131c0:	ffa3aae2 	.word	0xffa3aae2
240131c4:	405fffff 	.word	0x405fffff
240131c8:	00000000 	.word	0x00000000
240131cc:	c062c000 	.word	0xc062c000
240131d0:	00000000 	.word	0x00000000
240131d4:	c062a000 	.word	0xc062a000
240131d8:	24028730 	.word	0x24028730
240131dc:	4b000000 	.word	0x4b000000
240131e0:	240284c0 	.word	0x240284c0
240131e4:	00000000 	.word	0x00000000

240131e8 <tanf>:
240131e8:	ee10 3a10 	vmov	r3, s0
240131ec:	b507      	push	{r0, r1, r2, lr}
240131ee:	4a12      	ldr	r2, [pc, #72]	; (24013238 <tanf+0x50>)
240131f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240131f4:	4293      	cmp	r3, r2
240131f6:	dc07      	bgt.n	24013208 <tanf+0x20>
240131f8:	eddf 0a10 	vldr	s1, [pc, #64]	; 2401323c <tanf+0x54>
240131fc:	2001      	movs	r0, #1
240131fe:	b003      	add	sp, #12
24013200:	f85d eb04 	ldr.w	lr, [sp], #4
24013204:	f000 bcb8 	b.w	24013b78 <__kernel_tanf>
24013208:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401320c:	db04      	blt.n	24013218 <tanf+0x30>
2401320e:	ee30 0a40 	vsub.f32	s0, s0, s0
24013212:	b003      	add	sp, #12
24013214:	f85d fb04 	ldr.w	pc, [sp], #4
24013218:	4668      	mov	r0, sp
2401321a:	f000 f88b 	bl	24013334 <__ieee754_rem_pio2f>
2401321e:	0040      	lsls	r0, r0, #1
24013220:	f000 0002 	and.w	r0, r0, #2
24013224:	eddd 0a01 	vldr	s1, [sp, #4]
24013228:	ed9d 0a00 	vldr	s0, [sp]
2401322c:	f1c0 0001 	rsb	r0, r0, #1
24013230:	f000 fca2 	bl	24013b78 <__kernel_tanf>
24013234:	e7ed      	b.n	24013212 <tanf+0x2a>
24013236:	bf00      	nop
24013238:	3f490fda 	.word	0x3f490fda
2401323c:	00000000 	.word	0x00000000

24013240 <tanhf>:
24013240:	b510      	push	{r4, lr}
24013242:	ee10 4a10 	vmov	r4, s0
24013246:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
2401324a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401324e:	ed2d 8b02 	vpush	{d8}
24013252:	eeb0 7a40 	vmov.f32	s14, s0
24013256:	db0c      	blt.n	24013272 <tanhf+0x32>
24013258:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401325c:	eec0 7a07 	vdiv.f32	s15, s0, s14
24013260:	2c00      	cmp	r4, #0
24013262:	bfac      	ite	ge
24013264:	ee37 0a80 	vaddge.f32	s0, s15, s0
24013268:	ee37 0ac0 	vsublt.f32	s0, s15, s0
2401326c:	ecbd 8b02 	vpop	{d8}
24013270:	bd10      	pop	{r4, pc}
24013272:	4a1b      	ldr	r2, [pc, #108]	; (240132e0 <tanhf+0xa0>)
24013274:	4293      	cmp	r3, r2
24013276:	dc30      	bgt.n	240132da <tanhf+0x9a>
24013278:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
2401327c:	da06      	bge.n	2401328c <tanhf+0x4c>
2401327e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013282:	ee70 7a27 	vadd.f32	s15, s0, s15
24013286:	ee27 0a80 	vmul.f32	s0, s15, s0
2401328a:	e7ef      	b.n	2401326c <tanhf+0x2c>
2401328c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24013290:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
24013294:	db12      	blt.n	240132bc <tanhf+0x7c>
24013296:	f7ff fd81 	bl	24012d9c <fabsf>
2401329a:	ee30 0a00 	vadd.f32	s0, s0, s0
2401329e:	f000 fd4b 	bl	24013d38 <expm1f>
240132a2:	ee30 0a08 	vadd.f32	s0, s0, s16
240132a6:	eec8 7a00 	vdiv.f32	s15, s16, s0
240132aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240132ae:	ee30 0a67 	vsub.f32	s0, s0, s15
240132b2:	2c00      	cmp	r4, #0
240132b4:	bfb8      	it	lt
240132b6:	eeb1 0a40 	vneglt.f32	s0, s0
240132ba:	e7d7      	b.n	2401326c <tanhf+0x2c>
240132bc:	f7ff fd6e 	bl	24012d9c <fabsf>
240132c0:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
240132c4:	ee20 0a27 	vmul.f32	s0, s0, s15
240132c8:	f000 fd36 	bl	24013d38 <expm1f>
240132cc:	ee70 7a08 	vadd.f32	s15, s0, s16
240132d0:	eeb1 7a40 	vneg.f32	s14, s0
240132d4:	ee87 0a27 	vdiv.f32	s0, s14, s15
240132d8:	e7eb      	b.n	240132b2 <tanhf+0x72>
240132da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240132de:	e7e8      	b.n	240132b2 <tanhf+0x72>
240132e0:	41afffff 	.word	0x41afffff

240132e4 <sinhf>:
240132e4:	b508      	push	{r3, lr}
240132e6:	ed2d 8b02 	vpush	{d8}
240132ea:	eef0 8a40 	vmov.f32	s17, s0
240132ee:	f000 f95d 	bl	240135ac <__ieee754_sinhf>
240132f2:	eeb0 8a40 	vmov.f32	s16, s0
240132f6:	f000 fe39 	bl	24013f6c <finitef>
240132fa:	b990      	cbnz	r0, 24013322 <sinhf+0x3e>
240132fc:	eeb0 0a68 	vmov.f32	s0, s17
24013300:	f000 fe34 	bl	24013f6c <finitef>
24013304:	b168      	cbz	r0, 24013322 <sinhf+0x3e>
24013306:	f7ff fbcb 	bl	24012aa0 <__errno>
2401330a:	ed9f 8a08 	vldr	s16, [pc, #32]	; 2401332c <sinhf+0x48>
2401330e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 24013330 <sinhf+0x4c>
24013312:	2322      	movs	r3, #34	; 0x22
24013314:	eef5 8ac0 	vcmpe.f32	s17, #0.0
24013318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401331c:	6003      	str	r3, [r0, #0]
2401331e:	fe38 8a00 	vselgt.f32	s16, s16, s0
24013322:	eeb0 0a48 	vmov.f32	s0, s16
24013326:	ecbd 8b02 	vpop	{d8}
2401332a:	bd08      	pop	{r3, pc}
2401332c:	7f800000 	.word	0x7f800000
24013330:	ff800000 	.word	0xff800000

24013334 <__ieee754_rem_pio2f>:
24013334:	b5f0      	push	{r4, r5, r6, r7, lr}
24013336:	ee10 6a10 	vmov	r6, s0
2401333a:	4b8e      	ldr	r3, [pc, #568]	; (24013574 <__ieee754_rem_pio2f+0x240>)
2401333c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
24013340:	429d      	cmp	r5, r3
24013342:	b087      	sub	sp, #28
24013344:	eef0 7a40 	vmov.f32	s15, s0
24013348:	4604      	mov	r4, r0
2401334a:	dc05      	bgt.n	24013358 <__ieee754_rem_pio2f+0x24>
2401334c:	2300      	movs	r3, #0
2401334e:	ed80 0a00 	vstr	s0, [r0]
24013352:	6043      	str	r3, [r0, #4]
24013354:	2000      	movs	r0, #0
24013356:	e01a      	b.n	2401338e <__ieee754_rem_pio2f+0x5a>
24013358:	4b87      	ldr	r3, [pc, #540]	; (24013578 <__ieee754_rem_pio2f+0x244>)
2401335a:	429d      	cmp	r5, r3
2401335c:	dc46      	bgt.n	240133ec <__ieee754_rem_pio2f+0xb8>
2401335e:	2e00      	cmp	r6, #0
24013360:	ed9f 0a86 	vldr	s0, [pc, #536]	; 2401357c <__ieee754_rem_pio2f+0x248>
24013364:	4b86      	ldr	r3, [pc, #536]	; (24013580 <__ieee754_rem_pio2f+0x24c>)
24013366:	f025 050f 	bic.w	r5, r5, #15
2401336a:	dd1f      	ble.n	240133ac <__ieee754_rem_pio2f+0x78>
2401336c:	429d      	cmp	r5, r3
2401336e:	ee77 7ac0 	vsub.f32	s15, s15, s0
24013372:	d00e      	beq.n	24013392 <__ieee754_rem_pio2f+0x5e>
24013374:	ed9f 7a83 	vldr	s14, [pc, #524]	; 24013584 <__ieee754_rem_pio2f+0x250>
24013378:	ee37 0ac7 	vsub.f32	s0, s15, s14
2401337c:	ee77 7ac0 	vsub.f32	s15, s15, s0
24013380:	ed80 0a00 	vstr	s0, [r0]
24013384:	ee77 7ac7 	vsub.f32	s15, s15, s14
24013388:	2001      	movs	r0, #1
2401338a:	edc4 7a01 	vstr	s15, [r4, #4]
2401338e:	b007      	add	sp, #28
24013390:	bdf0      	pop	{r4, r5, r6, r7, pc}
24013392:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 24013588 <__ieee754_rem_pio2f+0x254>
24013396:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 2401358c <__ieee754_rem_pio2f+0x258>
2401339a:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401339e:	ee77 6ac7 	vsub.f32	s13, s15, s14
240133a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
240133a6:	edc0 6a00 	vstr	s13, [r0]
240133aa:	e7eb      	b.n	24013384 <__ieee754_rem_pio2f+0x50>
240133ac:	429d      	cmp	r5, r3
240133ae:	ee77 7a80 	vadd.f32	s15, s15, s0
240133b2:	d00e      	beq.n	240133d2 <__ieee754_rem_pio2f+0x9e>
240133b4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 24013584 <__ieee754_rem_pio2f+0x250>
240133b8:	ee37 0a87 	vadd.f32	s0, s15, s14
240133bc:	ee77 7ac0 	vsub.f32	s15, s15, s0
240133c0:	ed80 0a00 	vstr	s0, [r0]
240133c4:	ee77 7a87 	vadd.f32	s15, s15, s14
240133c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
240133cc:	edc4 7a01 	vstr	s15, [r4, #4]
240133d0:	e7dd      	b.n	2401338e <__ieee754_rem_pio2f+0x5a>
240133d2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 24013588 <__ieee754_rem_pio2f+0x254>
240133d6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 2401358c <__ieee754_rem_pio2f+0x258>
240133da:	ee77 7a80 	vadd.f32	s15, s15, s0
240133de:	ee77 6a87 	vadd.f32	s13, s15, s14
240133e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
240133e6:	edc0 6a00 	vstr	s13, [r0]
240133ea:	e7eb      	b.n	240133c4 <__ieee754_rem_pio2f+0x90>
240133ec:	4b68      	ldr	r3, [pc, #416]	; (24013590 <__ieee754_rem_pio2f+0x25c>)
240133ee:	429d      	cmp	r5, r3
240133f0:	dc72      	bgt.n	240134d8 <__ieee754_rem_pio2f+0x1a4>
240133f2:	f7ff fcd3 	bl	24012d9c <fabsf>
240133f6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 24013594 <__ieee754_rem_pio2f+0x260>
240133fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240133fe:	eee0 7a07 	vfma.f32	s15, s0, s14
24013402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24013406:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2401340a:	ee17 0a90 	vmov	r0, s15
2401340e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 2401357c <__ieee754_rem_pio2f+0x248>
24013412:	eea7 0a67 	vfms.f32	s0, s14, s15
24013416:	281f      	cmp	r0, #31
24013418:	eddf 7a5a 	vldr	s15, [pc, #360]	; 24013584 <__ieee754_rem_pio2f+0x250>
2401341c:	ee67 7a27 	vmul.f32	s15, s14, s15
24013420:	eeb1 6a47 	vneg.f32	s12, s14
24013424:	ee70 6a67 	vsub.f32	s13, s0, s15
24013428:	ee16 2a90 	vmov	r2, s13
2401342c:	dc1c      	bgt.n	24013468 <__ieee754_rem_pio2f+0x134>
2401342e:	495a      	ldr	r1, [pc, #360]	; (24013598 <__ieee754_rem_pio2f+0x264>)
24013430:	1e47      	subs	r7, r0, #1
24013432:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
24013436:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
2401343a:	428b      	cmp	r3, r1
2401343c:	d014      	beq.n	24013468 <__ieee754_rem_pio2f+0x134>
2401343e:	6022      	str	r2, [r4, #0]
24013440:	ed94 7a00 	vldr	s14, [r4]
24013444:	ee30 0a47 	vsub.f32	s0, s0, s14
24013448:	2e00      	cmp	r6, #0
2401344a:	ee30 0a67 	vsub.f32	s0, s0, s15
2401344e:	ed84 0a01 	vstr	s0, [r4, #4]
24013452:	da9c      	bge.n	2401338e <__ieee754_rem_pio2f+0x5a>
24013454:	eeb1 7a47 	vneg.f32	s14, s14
24013458:	eeb1 0a40 	vneg.f32	s0, s0
2401345c:	ed84 7a00 	vstr	s14, [r4]
24013460:	ed84 0a01 	vstr	s0, [r4, #4]
24013464:	4240      	negs	r0, r0
24013466:	e792      	b.n	2401338e <__ieee754_rem_pio2f+0x5a>
24013468:	f3c2 51c7 	ubfx	r1, r2, #23, #8
2401346c:	15eb      	asrs	r3, r5, #23
2401346e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
24013472:	2d08      	cmp	r5, #8
24013474:	dde3      	ble.n	2401343e <__ieee754_rem_pio2f+0x10a>
24013476:	eddf 7a44 	vldr	s15, [pc, #272]	; 24013588 <__ieee754_rem_pio2f+0x254>
2401347a:	eddf 5a44 	vldr	s11, [pc, #272]	; 2401358c <__ieee754_rem_pio2f+0x258>
2401347e:	eef0 6a40 	vmov.f32	s13, s0
24013482:	eee6 6a27 	vfma.f32	s13, s12, s15
24013486:	ee30 0a66 	vsub.f32	s0, s0, s13
2401348a:	eea6 0a27 	vfma.f32	s0, s12, s15
2401348e:	eef0 7a40 	vmov.f32	s15, s0
24013492:	eed7 7a25 	vfnms.f32	s15, s14, s11
24013496:	ee76 5ae7 	vsub.f32	s11, s13, s15
2401349a:	ee15 2a90 	vmov	r2, s11
2401349e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
240134a2:	1a5b      	subs	r3, r3, r1
240134a4:	2b19      	cmp	r3, #25
240134a6:	dc04      	bgt.n	240134b2 <__ieee754_rem_pio2f+0x17e>
240134a8:	edc4 5a00 	vstr	s11, [r4]
240134ac:	eeb0 0a66 	vmov.f32	s0, s13
240134b0:	e7c6      	b.n	24013440 <__ieee754_rem_pio2f+0x10c>
240134b2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 2401359c <__ieee754_rem_pio2f+0x268>
240134b6:	eeb0 0a66 	vmov.f32	s0, s13
240134ba:	eea6 0a25 	vfma.f32	s0, s12, s11
240134be:	ee76 7ac0 	vsub.f32	s15, s13, s0
240134c2:	eddf 6a37 	vldr	s13, [pc, #220]	; 240135a0 <__ieee754_rem_pio2f+0x26c>
240134c6:	eee6 7a25 	vfma.f32	s15, s12, s11
240134ca:	eed7 7a26 	vfnms.f32	s15, s14, s13
240134ce:	ee30 7a67 	vsub.f32	s14, s0, s15
240134d2:	ed84 7a00 	vstr	s14, [r4]
240134d6:	e7b3      	b.n	24013440 <__ieee754_rem_pio2f+0x10c>
240134d8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
240134dc:	db06      	blt.n	240134ec <__ieee754_rem_pio2f+0x1b8>
240134de:	ee70 7a40 	vsub.f32	s15, s0, s0
240134e2:	edc0 7a01 	vstr	s15, [r0, #4]
240134e6:	edc0 7a00 	vstr	s15, [r0]
240134ea:	e733      	b.n	24013354 <__ieee754_rem_pio2f+0x20>
240134ec:	15ea      	asrs	r2, r5, #23
240134ee:	3a86      	subs	r2, #134	; 0x86
240134f0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
240134f4:	ee07 3a90 	vmov	s15, r3
240134f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
240134fc:	eddf 6a29 	vldr	s13, [pc, #164]	; 240135a4 <__ieee754_rem_pio2f+0x270>
24013500:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24013504:	ee77 7ac7 	vsub.f32	s15, s15, s14
24013508:	ed8d 7a03 	vstr	s14, [sp, #12]
2401350c:	ee67 7aa6 	vmul.f32	s15, s15, s13
24013510:	eebd 7ae7 	vcvt.s32.f32	s14, s15
24013514:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24013518:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401351c:	ed8d 7a04 	vstr	s14, [sp, #16]
24013520:	ee67 7aa6 	vmul.f32	s15, s15, s13
24013524:	eef5 7a40 	vcmp.f32	s15, #0.0
24013528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401352c:	edcd 7a05 	vstr	s15, [sp, #20]
24013530:	d11e      	bne.n	24013570 <__ieee754_rem_pio2f+0x23c>
24013532:	eeb5 7a40 	vcmp.f32	s14, #0.0
24013536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401353a:	bf14      	ite	ne
2401353c:	2302      	movne	r3, #2
2401353e:	2301      	moveq	r3, #1
24013540:	4919      	ldr	r1, [pc, #100]	; (240135a8 <__ieee754_rem_pio2f+0x274>)
24013542:	9101      	str	r1, [sp, #4]
24013544:	2102      	movs	r1, #2
24013546:	9100      	str	r1, [sp, #0]
24013548:	a803      	add	r0, sp, #12
2401354a:	4621      	mov	r1, r4
2401354c:	f000 f89e 	bl	2401368c <__kernel_rem_pio2f>
24013550:	2e00      	cmp	r6, #0
24013552:	f6bf af1c 	bge.w	2401338e <__ieee754_rem_pio2f+0x5a>
24013556:	edd4 7a00 	vldr	s15, [r4]
2401355a:	eef1 7a67 	vneg.f32	s15, s15
2401355e:	edc4 7a00 	vstr	s15, [r4]
24013562:	edd4 7a01 	vldr	s15, [r4, #4]
24013566:	eef1 7a67 	vneg.f32	s15, s15
2401356a:	edc4 7a01 	vstr	s15, [r4, #4]
2401356e:	e779      	b.n	24013464 <__ieee754_rem_pio2f+0x130>
24013570:	2303      	movs	r3, #3
24013572:	e7e5      	b.n	24013540 <__ieee754_rem_pio2f+0x20c>
24013574:	3f490fd8 	.word	0x3f490fd8
24013578:	4016cbe3 	.word	0x4016cbe3
2401357c:	3fc90f80 	.word	0x3fc90f80
24013580:	3fc90fd0 	.word	0x3fc90fd0
24013584:	37354443 	.word	0x37354443
24013588:	37354400 	.word	0x37354400
2401358c:	2e85a308 	.word	0x2e85a308
24013590:	43490f80 	.word	0x43490f80
24013594:	3f22f984 	.word	0x3f22f984
24013598:	24028858 	.word	0x24028858
2401359c:	2e85a300 	.word	0x2e85a300
240135a0:	248d3132 	.word	0x248d3132
240135a4:	43800000 	.word	0x43800000
240135a8:	240288d8 	.word	0x240288d8

240135ac <__ieee754_sinhf>:
240135ac:	b510      	push	{r4, lr}
240135ae:	ee10 3a10 	vmov	r3, s0
240135b2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
240135b6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
240135ba:	ed2d 8b02 	vpush	{d8}
240135be:	eef0 7a40 	vmov.f32	s15, s0
240135c2:	db06      	blt.n	240135d2 <__ieee754_sinhf+0x26>
240135c4:	ee70 7a00 	vadd.f32	s15, s0, s0
240135c8:	ecbd 8b02 	vpop	{d8}
240135cc:	eeb0 0a67 	vmov.f32	s0, s15
240135d0:	bd10      	pop	{r4, pc}
240135d2:	2b00      	cmp	r3, #0
240135d4:	4b29      	ldr	r3, [pc, #164]	; (2401367c <__ieee754_sinhf+0xd0>)
240135d6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
240135da:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
240135de:	fe28 8a88 	vselge.f32	s16, s17, s16
240135e2:	429c      	cmp	r4, r3
240135e4:	dc2c      	bgt.n	24013640 <__ieee754_sinhf+0x94>
240135e6:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
240135ea:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
240135ee:	da08      	bge.n	24013602 <__ieee754_sinhf+0x56>
240135f0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 24013680 <__ieee754_sinhf+0xd4>
240135f4:	ee30 7a07 	vadd.f32	s14, s0, s14
240135f8:	eeb4 7ae8 	vcmpe.f32	s14, s17
240135fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013600:	dce2      	bgt.n	240135c8 <__ieee754_sinhf+0x1c>
24013602:	eeb0 0a67 	vmov.f32	s0, s15
24013606:	f7ff fbc9 	bl	24012d9c <fabsf>
2401360a:	f000 fb95 	bl	24013d38 <expm1f>
2401360e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
24013612:	da0c      	bge.n	2401362e <__ieee754_sinhf+0x82>
24013614:	ee60 7a00 	vmul.f32	s15, s0, s0
24013618:	ee70 8a28 	vadd.f32	s17, s0, s17
2401361c:	ee87 7aa8 	vdiv.f32	s14, s15, s17
24013620:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24013624:	ee90 7a27 	vfnms.f32	s14, s0, s15
24013628:	ee67 7a08 	vmul.f32	s15, s14, s16
2401362c:	e7cc      	b.n	240135c8 <__ieee754_sinhf+0x1c>
2401362e:	ee70 8a28 	vadd.f32	s17, s0, s17
24013632:	ee80 7a28 	vdiv.f32	s14, s0, s17
24013636:	ee77 7a00 	vadd.f32	s15, s14, s0
2401363a:	ee67 7a88 	vmul.f32	s15, s15, s16
2401363e:	e7c3      	b.n	240135c8 <__ieee754_sinhf+0x1c>
24013640:	4b10      	ldr	r3, [pc, #64]	; (24013684 <__ieee754_sinhf+0xd8>)
24013642:	429c      	cmp	r4, r3
24013644:	dc06      	bgt.n	24013654 <__ieee754_sinhf+0xa8>
24013646:	f7ff fba9 	bl	24012d9c <fabsf>
2401364a:	f7ff fb33 	bl	24012cb4 <expf>
2401364e:	ee60 7a08 	vmul.f32	s15, s0, s16
24013652:	e7b9      	b.n	240135c8 <__ieee754_sinhf+0x1c>
24013654:	4b0c      	ldr	r3, [pc, #48]	; (24013688 <__ieee754_sinhf+0xdc>)
24013656:	429c      	cmp	r4, r3
24013658:	dc0a      	bgt.n	24013670 <__ieee754_sinhf+0xc4>
2401365a:	f7ff fb9f 	bl	24012d9c <fabsf>
2401365e:	ee20 0a28 	vmul.f32	s0, s0, s17
24013662:	f7ff fb27 	bl	24012cb4 <expf>
24013666:	ee68 7a00 	vmul.f32	s15, s16, s0
2401366a:	ee67 7a80 	vmul.f32	s15, s15, s0
2401366e:	e7ab      	b.n	240135c8 <__ieee754_sinhf+0x1c>
24013670:	ed9f 7a03 	vldr	s14, [pc, #12]	; 24013680 <__ieee754_sinhf+0xd4>
24013674:	ee60 7a07 	vmul.f32	s15, s0, s14
24013678:	e7a6      	b.n	240135c8 <__ieee754_sinhf+0x1c>
2401367a:	bf00      	nop
2401367c:	41afffff 	.word	0x41afffff
24013680:	7cf0bdc2 	.word	0x7cf0bdc2
24013684:	42b17217 	.word	0x42b17217
24013688:	42b2d4fc 	.word	0x42b2d4fc

2401368c <__kernel_rem_pio2f>:
2401368c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24013690:	ed2d 8b04 	vpush	{d8-d9}
24013694:	b0d9      	sub	sp, #356	; 0x164
24013696:	4688      	mov	r8, r1
24013698:	9002      	str	r0, [sp, #8]
2401369a:	49bb      	ldr	r1, [pc, #748]	; (24013988 <__kernel_rem_pio2f+0x2fc>)
2401369c:	9866      	ldr	r0, [sp, #408]	; 0x198
2401369e:	9301      	str	r3, [sp, #4]
240136a0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
240136a4:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
240136a8:	1e59      	subs	r1, r3, #1
240136aa:	1d13      	adds	r3, r2, #4
240136ac:	db27      	blt.n	240136fe <__kernel_rem_pio2f+0x72>
240136ae:	f1b2 0b03 	subs.w	fp, r2, #3
240136b2:	bf48      	it	mi
240136b4:	f102 0b04 	addmi.w	fp, r2, #4
240136b8:	ea4f 00eb 	mov.w	r0, fp, asr #3
240136bc:	1c45      	adds	r5, r0, #1
240136be:	00ec      	lsls	r4, r5, #3
240136c0:	1a47      	subs	r7, r0, r1
240136c2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 24013998 <__kernel_rem_pio2f+0x30c>
240136c6:	9403      	str	r4, [sp, #12]
240136c8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
240136cc:	eb0a 0c01 	add.w	ip, sl, r1
240136d0:	ae1c      	add	r6, sp, #112	; 0x70
240136d2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
240136d6:	2400      	movs	r4, #0
240136d8:	4564      	cmp	r4, ip
240136da:	dd12      	ble.n	24013702 <__kernel_rem_pio2f+0x76>
240136dc:	9b01      	ldr	r3, [sp, #4]
240136de:	ac1c      	add	r4, sp, #112	; 0x70
240136e0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
240136e4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
240136e8:	f04f 0c00 	mov.w	ip, #0
240136ec:	45d4      	cmp	ip, sl
240136ee:	dc27      	bgt.n	24013740 <__kernel_rem_pio2f+0xb4>
240136f0:	f8dd 9008 	ldr.w	r9, [sp, #8]
240136f4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 24013998 <__kernel_rem_pio2f+0x30c>
240136f8:	4627      	mov	r7, r4
240136fa:	2600      	movs	r6, #0
240136fc:	e016      	b.n	2401372c <__kernel_rem_pio2f+0xa0>
240136fe:	2000      	movs	r0, #0
24013700:	e7dc      	b.n	240136bc <__kernel_rem_pio2f+0x30>
24013702:	42e7      	cmn	r7, r4
24013704:	bf5d      	ittte	pl
24013706:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
2401370a:	ee07 3a90 	vmovpl	s15, r3
2401370e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
24013712:	eef0 7a47 	vmovmi.f32	s15, s14
24013716:	ece6 7a01 	vstmia	r6!, {s15}
2401371a:	3401      	adds	r4, #1
2401371c:	e7dc      	b.n	240136d8 <__kernel_rem_pio2f+0x4c>
2401371e:	ecf9 6a01 	vldmia	r9!, {s13}
24013722:	ed97 7a00 	vldr	s14, [r7]
24013726:	eee6 7a87 	vfma.f32	s15, s13, s14
2401372a:	3601      	adds	r6, #1
2401372c:	428e      	cmp	r6, r1
2401372e:	f1a7 0704 	sub.w	r7, r7, #4
24013732:	ddf4      	ble.n	2401371e <__kernel_rem_pio2f+0x92>
24013734:	eceb 7a01 	vstmia	fp!, {s15}
24013738:	f10c 0c01 	add.w	ip, ip, #1
2401373c:	3404      	adds	r4, #4
2401373e:	e7d5      	b.n	240136ec <__kernel_rem_pio2f+0x60>
24013740:	ab08      	add	r3, sp, #32
24013742:	eb03 038a 	add.w	r3, r3, sl, lsl #2
24013746:	eddf 8a93 	vldr	s17, [pc, #588]	; 24013994 <__kernel_rem_pio2f+0x308>
2401374a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 24013990 <__kernel_rem_pio2f+0x304>
2401374e:	9304      	str	r3, [sp, #16]
24013750:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
24013754:	4656      	mov	r6, sl
24013756:	00b3      	lsls	r3, r6, #2
24013758:	9305      	str	r3, [sp, #20]
2401375a:	ab58      	add	r3, sp, #352	; 0x160
2401375c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
24013760:	ac08      	add	r4, sp, #32
24013762:	ab44      	add	r3, sp, #272	; 0x110
24013764:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
24013768:	46a4      	mov	ip, r4
2401376a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
2401376e:	4637      	mov	r7, r6
24013770:	2f00      	cmp	r7, #0
24013772:	f1a0 0004 	sub.w	r0, r0, #4
24013776:	dc4f      	bgt.n	24013818 <__kernel_rem_pio2f+0x18c>
24013778:	4628      	mov	r0, r5
2401377a:	e9cd 1206 	strd	r1, r2, [sp, #24]
2401377e:	f000 fc45 	bl	2401400c <scalbnf>
24013782:	eeb0 8a40 	vmov.f32	s16, s0
24013786:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
2401378a:	ee28 0a00 	vmul.f32	s0, s16, s0
2401378e:	f000 fbfb 	bl	24013f88 <floorf>
24013792:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
24013796:	eea0 8a67 	vfms.f32	s16, s0, s15
2401379a:	2d00      	cmp	r5, #0
2401379c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
240137a0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
240137a4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
240137a8:	ee17 9a90 	vmov	r9, s15
240137ac:	ee38 8a40 	vsub.f32	s16, s16, s0
240137b0:	dd44      	ble.n	2401383c <__kernel_rem_pio2f+0x1b0>
240137b2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
240137b6:	ab08      	add	r3, sp, #32
240137b8:	f1c5 0e08 	rsb	lr, r5, #8
240137bc:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
240137c0:	fa47 f00e 	asr.w	r0, r7, lr
240137c4:	4481      	add	r9, r0
240137c6:	fa00 f00e 	lsl.w	r0, r0, lr
240137ca:	1a3f      	subs	r7, r7, r0
240137cc:	f1c5 0007 	rsb	r0, r5, #7
240137d0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
240137d4:	4107      	asrs	r7, r0
240137d6:	2f00      	cmp	r7, #0
240137d8:	dd3f      	ble.n	2401385a <__kernel_rem_pio2f+0x1ce>
240137da:	f04f 0e00 	mov.w	lr, #0
240137de:	f109 0901 	add.w	r9, r9, #1
240137e2:	4673      	mov	r3, lr
240137e4:	4576      	cmp	r6, lr
240137e6:	dc6b      	bgt.n	240138c0 <__kernel_rem_pio2f+0x234>
240137e8:	2d00      	cmp	r5, #0
240137ea:	dd04      	ble.n	240137f6 <__kernel_rem_pio2f+0x16a>
240137ec:	2d01      	cmp	r5, #1
240137ee:	d078      	beq.n	240138e2 <__kernel_rem_pio2f+0x256>
240137f0:	2d02      	cmp	r5, #2
240137f2:	f000 8081 	beq.w	240138f8 <__kernel_rem_pio2f+0x26c>
240137f6:	2f02      	cmp	r7, #2
240137f8:	d12f      	bne.n	2401385a <__kernel_rem_pio2f+0x1ce>
240137fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
240137fe:	ee30 8a48 	vsub.f32	s16, s0, s16
24013802:	b353      	cbz	r3, 2401385a <__kernel_rem_pio2f+0x1ce>
24013804:	4628      	mov	r0, r5
24013806:	e9cd 1206 	strd	r1, r2, [sp, #24]
2401380a:	f000 fbff 	bl	2401400c <scalbnf>
2401380e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
24013812:	ee38 8a40 	vsub.f32	s16, s16, s0
24013816:	e020      	b.n	2401385a <__kernel_rem_pio2f+0x1ce>
24013818:	ee60 7a28 	vmul.f32	s15, s0, s17
2401381c:	3f01      	subs	r7, #1
2401381e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24013822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013826:	eea7 0ac9 	vfms.f32	s0, s15, s18
2401382a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401382e:	ecac 0a01 	vstmia	ip!, {s0}
24013832:	ed90 0a00 	vldr	s0, [r0]
24013836:	ee37 0a80 	vadd.f32	s0, s15, s0
2401383a:	e799      	b.n	24013770 <__kernel_rem_pio2f+0xe4>
2401383c:	d105      	bne.n	2401384a <__kernel_rem_pio2f+0x1be>
2401383e:	1e70      	subs	r0, r6, #1
24013840:	ab08      	add	r3, sp, #32
24013842:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
24013846:	11ff      	asrs	r7, r7, #7
24013848:	e7c5      	b.n	240137d6 <__kernel_rem_pio2f+0x14a>
2401384a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401384e:	eeb4 8ae7 	vcmpe.f32	s16, s15
24013852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013856:	da31      	bge.n	240138bc <__kernel_rem_pio2f+0x230>
24013858:	2700      	movs	r7, #0
2401385a:	eeb5 8a40 	vcmp.f32	s16, #0.0
2401385e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013862:	f040 809b 	bne.w	2401399c <__kernel_rem_pio2f+0x310>
24013866:	1e74      	subs	r4, r6, #1
24013868:	46a4      	mov	ip, r4
2401386a:	2000      	movs	r0, #0
2401386c:	45d4      	cmp	ip, sl
2401386e:	da4a      	bge.n	24013906 <__kernel_rem_pio2f+0x27a>
24013870:	2800      	cmp	r0, #0
24013872:	d07a      	beq.n	2401396a <__kernel_rem_pio2f+0x2de>
24013874:	ab08      	add	r3, sp, #32
24013876:	3d08      	subs	r5, #8
24013878:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
2401387c:	2b00      	cmp	r3, #0
2401387e:	f000 8081 	beq.w	24013984 <__kernel_rem_pio2f+0x2f8>
24013882:	4628      	mov	r0, r5
24013884:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24013888:	00a5      	lsls	r5, r4, #2
2401388a:	f000 fbbf 	bl	2401400c <scalbnf>
2401388e:	aa44      	add	r2, sp, #272	; 0x110
24013890:	1d2b      	adds	r3, r5, #4
24013892:	ed9f 7a40 	vldr	s14, [pc, #256]	; 24013994 <__kernel_rem_pio2f+0x308>
24013896:	18d1      	adds	r1, r2, r3
24013898:	4622      	mov	r2, r4
2401389a:	2a00      	cmp	r2, #0
2401389c:	f280 80ae 	bge.w	240139fc <__kernel_rem_pio2f+0x370>
240138a0:	4622      	mov	r2, r4
240138a2:	2a00      	cmp	r2, #0
240138a4:	f2c0 80cc 	blt.w	24013a40 <__kernel_rem_pio2f+0x3b4>
240138a8:	a944      	add	r1, sp, #272	; 0x110
240138aa:	eb01 0682 	add.w	r6, r1, r2, lsl #2
240138ae:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 2401398c <__kernel_rem_pio2f+0x300>
240138b2:	eddf 7a39 	vldr	s15, [pc, #228]	; 24013998 <__kernel_rem_pio2f+0x30c>
240138b6:	2000      	movs	r0, #0
240138b8:	1aa1      	subs	r1, r4, r2
240138ba:	e0b6      	b.n	24013a2a <__kernel_rem_pio2f+0x39e>
240138bc:	2702      	movs	r7, #2
240138be:	e78c      	b.n	240137da <__kernel_rem_pio2f+0x14e>
240138c0:	6820      	ldr	r0, [r4, #0]
240138c2:	b94b      	cbnz	r3, 240138d8 <__kernel_rem_pio2f+0x24c>
240138c4:	b118      	cbz	r0, 240138ce <__kernel_rem_pio2f+0x242>
240138c6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
240138ca:	6020      	str	r0, [r4, #0]
240138cc:	2001      	movs	r0, #1
240138ce:	f10e 0e01 	add.w	lr, lr, #1
240138d2:	3404      	adds	r4, #4
240138d4:	4603      	mov	r3, r0
240138d6:	e785      	b.n	240137e4 <__kernel_rem_pio2f+0x158>
240138d8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
240138dc:	6020      	str	r0, [r4, #0]
240138de:	4618      	mov	r0, r3
240138e0:	e7f5      	b.n	240138ce <__kernel_rem_pio2f+0x242>
240138e2:	1e74      	subs	r4, r6, #1
240138e4:	a808      	add	r0, sp, #32
240138e6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
240138ea:	f000 007f 	and.w	r0, r0, #127	; 0x7f
240138ee:	f10d 0c20 	add.w	ip, sp, #32
240138f2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
240138f6:	e77e      	b.n	240137f6 <__kernel_rem_pio2f+0x16a>
240138f8:	1e74      	subs	r4, r6, #1
240138fa:	a808      	add	r0, sp, #32
240138fc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
24013900:	f000 003f 	and.w	r0, r0, #63	; 0x3f
24013904:	e7f3      	b.n	240138ee <__kernel_rem_pio2f+0x262>
24013906:	ab08      	add	r3, sp, #32
24013908:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
2401390c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
24013910:	4318      	orrs	r0, r3
24013912:	e7ab      	b.n	2401386c <__kernel_rem_pio2f+0x1e0>
24013914:	f10c 0c01 	add.w	ip, ip, #1
24013918:	f850 4d04 	ldr.w	r4, [r0, #-4]!
2401391c:	2c00      	cmp	r4, #0
2401391e:	d0f9      	beq.n	24013914 <__kernel_rem_pio2f+0x288>
24013920:	9b05      	ldr	r3, [sp, #20]
24013922:	f503 73b0 	add.w	r3, r3, #352	; 0x160
24013926:	eb0d 0003 	add.w	r0, sp, r3
2401392a:	9b01      	ldr	r3, [sp, #4]
2401392c:	18f4      	adds	r4, r6, r3
2401392e:	ab1c      	add	r3, sp, #112	; 0x70
24013930:	1c77      	adds	r7, r6, #1
24013932:	384c      	subs	r0, #76	; 0x4c
24013934:	eb03 0484 	add.w	r4, r3, r4, lsl #2
24013938:	4466      	add	r6, ip
2401393a:	42be      	cmp	r6, r7
2401393c:	f6ff af0b 	blt.w	24013756 <__kernel_rem_pio2f+0xca>
24013940:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
24013944:	f8dd e008 	ldr.w	lr, [sp, #8]
24013948:	ee07 3a90 	vmov	s15, r3
2401394c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013950:	f04f 0c00 	mov.w	ip, #0
24013954:	ece4 7a01 	vstmia	r4!, {s15}
24013958:	eddf 7a0f 	vldr	s15, [pc, #60]	; 24013998 <__kernel_rem_pio2f+0x30c>
2401395c:	46a1      	mov	r9, r4
2401395e:	458c      	cmp	ip, r1
24013960:	dd07      	ble.n	24013972 <__kernel_rem_pio2f+0x2e6>
24013962:	ece0 7a01 	vstmia	r0!, {s15}
24013966:	3701      	adds	r7, #1
24013968:	e7e7      	b.n	2401393a <__kernel_rem_pio2f+0x2ae>
2401396a:	9804      	ldr	r0, [sp, #16]
2401396c:	f04f 0c01 	mov.w	ip, #1
24013970:	e7d2      	b.n	24013918 <__kernel_rem_pio2f+0x28c>
24013972:	ecfe 6a01 	vldmia	lr!, {s13}
24013976:	ed39 7a01 	vldmdb	r9!, {s14}
2401397a:	f10c 0c01 	add.w	ip, ip, #1
2401397e:	eee6 7a87 	vfma.f32	s15, s13, s14
24013982:	e7ec      	b.n	2401395e <__kernel_rem_pio2f+0x2d2>
24013984:	3c01      	subs	r4, #1
24013986:	e775      	b.n	24013874 <__kernel_rem_pio2f+0x1e8>
24013988:	24028c1c 	.word	0x24028c1c
2401398c:	24028bf0 	.word	0x24028bf0
24013990:	43800000 	.word	0x43800000
24013994:	3b800000 	.word	0x3b800000
24013998:	00000000 	.word	0x00000000
2401399c:	9b03      	ldr	r3, [sp, #12]
2401399e:	eeb0 0a48 	vmov.f32	s0, s16
240139a2:	1a98      	subs	r0, r3, r2
240139a4:	f000 fb32 	bl	2401400c <scalbnf>
240139a8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 24013990 <__kernel_rem_pio2f+0x304>
240139ac:	eeb4 0ac7 	vcmpe.f32	s0, s14
240139b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240139b4:	db19      	blt.n	240139ea <__kernel_rem_pio2f+0x35e>
240139b6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 24013994 <__kernel_rem_pio2f+0x308>
240139ba:	ee60 7a27 	vmul.f32	s15, s0, s15
240139be:	aa08      	add	r2, sp, #32
240139c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240139c4:	1c74      	adds	r4, r6, #1
240139c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240139ca:	3508      	adds	r5, #8
240139cc:	eea7 0ac7 	vfms.f32	s0, s15, s14
240139d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240139d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240139d8:	ee10 3a10 	vmov	r3, s0
240139dc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
240139e0:	ee17 3a90 	vmov	r3, s15
240139e4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
240139e8:	e74b      	b.n	24013882 <__kernel_rem_pio2f+0x1f6>
240139ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240139ee:	aa08      	add	r2, sp, #32
240139f0:	ee10 3a10 	vmov	r3, s0
240139f4:	4634      	mov	r4, r6
240139f6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
240139fa:	e742      	b.n	24013882 <__kernel_rem_pio2f+0x1f6>
240139fc:	a808      	add	r0, sp, #32
240139fe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
24013a02:	9001      	str	r0, [sp, #4]
24013a04:	ee07 0a90 	vmov	s15, r0
24013a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013a0c:	3a01      	subs	r2, #1
24013a0e:	ee67 7a80 	vmul.f32	s15, s15, s0
24013a12:	ee20 0a07 	vmul.f32	s0, s0, s14
24013a16:	ed61 7a01 	vstmdb	r1!, {s15}
24013a1a:	e73e      	b.n	2401389a <__kernel_rem_pio2f+0x20e>
24013a1c:	ecfc 6a01 	vldmia	ip!, {s13}
24013a20:	ecb6 7a01 	vldmia	r6!, {s14}
24013a24:	eee6 7a87 	vfma.f32	s15, s13, s14
24013a28:	3001      	adds	r0, #1
24013a2a:	4550      	cmp	r0, sl
24013a2c:	dc01      	bgt.n	24013a32 <__kernel_rem_pio2f+0x3a6>
24013a2e:	4288      	cmp	r0, r1
24013a30:	ddf4      	ble.n	24013a1c <__kernel_rem_pio2f+0x390>
24013a32:	a858      	add	r0, sp, #352	; 0x160
24013a34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
24013a38:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
24013a3c:	3a01      	subs	r2, #1
24013a3e:	e730      	b.n	240138a2 <__kernel_rem_pio2f+0x216>
24013a40:	9a66      	ldr	r2, [sp, #408]	; 0x198
24013a42:	2a02      	cmp	r2, #2
24013a44:	dc09      	bgt.n	24013a5a <__kernel_rem_pio2f+0x3ce>
24013a46:	2a00      	cmp	r2, #0
24013a48:	dc2a      	bgt.n	24013aa0 <__kernel_rem_pio2f+0x414>
24013a4a:	d043      	beq.n	24013ad4 <__kernel_rem_pio2f+0x448>
24013a4c:	f009 0007 	and.w	r0, r9, #7
24013a50:	b059      	add	sp, #356	; 0x164
24013a52:	ecbd 8b04 	vpop	{d8-d9}
24013a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24013a5a:	9b66      	ldr	r3, [sp, #408]	; 0x198
24013a5c:	2b03      	cmp	r3, #3
24013a5e:	d1f5      	bne.n	24013a4c <__kernel_rem_pio2f+0x3c0>
24013a60:	ab30      	add	r3, sp, #192	; 0xc0
24013a62:	442b      	add	r3, r5
24013a64:	461a      	mov	r2, r3
24013a66:	4619      	mov	r1, r3
24013a68:	4620      	mov	r0, r4
24013a6a:	2800      	cmp	r0, #0
24013a6c:	f1a1 0104 	sub.w	r1, r1, #4
24013a70:	dc51      	bgt.n	24013b16 <__kernel_rem_pio2f+0x48a>
24013a72:	4621      	mov	r1, r4
24013a74:	2901      	cmp	r1, #1
24013a76:	f1a2 0204 	sub.w	r2, r2, #4
24013a7a:	dc5c      	bgt.n	24013b36 <__kernel_rem_pio2f+0x4aa>
24013a7c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 24013998 <__kernel_rem_pio2f+0x30c>
24013a80:	3304      	adds	r3, #4
24013a82:	2c01      	cmp	r4, #1
24013a84:	dc67      	bgt.n	24013b56 <__kernel_rem_pio2f+0x4ca>
24013a86:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
24013a8a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
24013a8e:	2f00      	cmp	r7, #0
24013a90:	d167      	bne.n	24013b62 <__kernel_rem_pio2f+0x4d6>
24013a92:	edc8 6a00 	vstr	s13, [r8]
24013a96:	ed88 7a01 	vstr	s14, [r8, #4]
24013a9a:	edc8 7a02 	vstr	s15, [r8, #8]
24013a9e:	e7d5      	b.n	24013a4c <__kernel_rem_pio2f+0x3c0>
24013aa0:	aa30      	add	r2, sp, #192	; 0xc0
24013aa2:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 24013998 <__kernel_rem_pio2f+0x30c>
24013aa6:	4413      	add	r3, r2
24013aa8:	4622      	mov	r2, r4
24013aaa:	2a00      	cmp	r2, #0
24013aac:	da24      	bge.n	24013af8 <__kernel_rem_pio2f+0x46c>
24013aae:	b34f      	cbz	r7, 24013b04 <__kernel_rem_pio2f+0x478>
24013ab0:	eef1 7a47 	vneg.f32	s15, s14
24013ab4:	edc8 7a00 	vstr	s15, [r8]
24013ab8:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
24013abc:	ee77 7ac7 	vsub.f32	s15, s15, s14
24013ac0:	aa31      	add	r2, sp, #196	; 0xc4
24013ac2:	2301      	movs	r3, #1
24013ac4:	429c      	cmp	r4, r3
24013ac6:	da20      	bge.n	24013b0a <__kernel_rem_pio2f+0x47e>
24013ac8:	b10f      	cbz	r7, 24013ace <__kernel_rem_pio2f+0x442>
24013aca:	eef1 7a67 	vneg.f32	s15, s15
24013ace:	edc8 7a01 	vstr	s15, [r8, #4]
24013ad2:	e7bb      	b.n	24013a4c <__kernel_rem_pio2f+0x3c0>
24013ad4:	aa30      	add	r2, sp, #192	; 0xc0
24013ad6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 24013998 <__kernel_rem_pio2f+0x30c>
24013ada:	4413      	add	r3, r2
24013adc:	2c00      	cmp	r4, #0
24013ade:	da05      	bge.n	24013aec <__kernel_rem_pio2f+0x460>
24013ae0:	b10f      	cbz	r7, 24013ae6 <__kernel_rem_pio2f+0x45a>
24013ae2:	eef1 7a67 	vneg.f32	s15, s15
24013ae6:	edc8 7a00 	vstr	s15, [r8]
24013aea:	e7af      	b.n	24013a4c <__kernel_rem_pio2f+0x3c0>
24013aec:	ed33 7a01 	vldmdb	r3!, {s14}
24013af0:	3c01      	subs	r4, #1
24013af2:	ee77 7a87 	vadd.f32	s15, s15, s14
24013af6:	e7f1      	b.n	24013adc <__kernel_rem_pio2f+0x450>
24013af8:	ed73 7a01 	vldmdb	r3!, {s15}
24013afc:	3a01      	subs	r2, #1
24013afe:	ee37 7a27 	vadd.f32	s14, s14, s15
24013b02:	e7d2      	b.n	24013aaa <__kernel_rem_pio2f+0x41e>
24013b04:	eef0 7a47 	vmov.f32	s15, s14
24013b08:	e7d4      	b.n	24013ab4 <__kernel_rem_pio2f+0x428>
24013b0a:	ecb2 7a01 	vldmia	r2!, {s14}
24013b0e:	3301      	adds	r3, #1
24013b10:	ee77 7a87 	vadd.f32	s15, s15, s14
24013b14:	e7d6      	b.n	24013ac4 <__kernel_rem_pio2f+0x438>
24013b16:	edd1 7a00 	vldr	s15, [r1]
24013b1a:	edd1 6a01 	vldr	s13, [r1, #4]
24013b1e:	ee37 7aa6 	vadd.f32	s14, s15, s13
24013b22:	3801      	subs	r0, #1
24013b24:	ee77 7ac7 	vsub.f32	s15, s15, s14
24013b28:	ed81 7a00 	vstr	s14, [r1]
24013b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24013b30:	edc1 7a01 	vstr	s15, [r1, #4]
24013b34:	e799      	b.n	24013a6a <__kernel_rem_pio2f+0x3de>
24013b36:	edd2 7a00 	vldr	s15, [r2]
24013b3a:	edd2 6a01 	vldr	s13, [r2, #4]
24013b3e:	ee37 7aa6 	vadd.f32	s14, s15, s13
24013b42:	3901      	subs	r1, #1
24013b44:	ee77 7ac7 	vsub.f32	s15, s15, s14
24013b48:	ed82 7a00 	vstr	s14, [r2]
24013b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24013b50:	edc2 7a01 	vstr	s15, [r2, #4]
24013b54:	e78e      	b.n	24013a74 <__kernel_rem_pio2f+0x3e8>
24013b56:	ed33 7a01 	vldmdb	r3!, {s14}
24013b5a:	3c01      	subs	r4, #1
24013b5c:	ee77 7a87 	vadd.f32	s15, s15, s14
24013b60:	e78f      	b.n	24013a82 <__kernel_rem_pio2f+0x3f6>
24013b62:	eef1 6a66 	vneg.f32	s13, s13
24013b66:	eeb1 7a47 	vneg.f32	s14, s14
24013b6a:	edc8 6a00 	vstr	s13, [r8]
24013b6e:	ed88 7a01 	vstr	s14, [r8, #4]
24013b72:	eef1 7a67 	vneg.f32	s15, s15
24013b76:	e790      	b.n	24013a9a <__kernel_rem_pio2f+0x40e>

24013b78 <__kernel_tanf>:
24013b78:	b508      	push	{r3, lr}
24013b7a:	ee10 3a10 	vmov	r3, s0
24013b7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24013b82:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
24013b86:	eef0 7a40 	vmov.f32	s15, s0
24013b8a:	da17      	bge.n	24013bbc <__kernel_tanf+0x44>
24013b8c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
24013b90:	ee17 1a10 	vmov	r1, s14
24013b94:	bb41      	cbnz	r1, 24013be8 <__kernel_tanf+0x70>
24013b96:	1c43      	adds	r3, r0, #1
24013b98:	4313      	orrs	r3, r2
24013b9a:	d108      	bne.n	24013bae <__kernel_tanf+0x36>
24013b9c:	f7ff f8fe 	bl	24012d9c <fabsf>
24013ba0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24013ba4:	eec7 7a00 	vdiv.f32	s15, s14, s0
24013ba8:	eeb0 0a67 	vmov.f32	s0, s15
24013bac:	bd08      	pop	{r3, pc}
24013bae:	2801      	cmp	r0, #1
24013bb0:	d0fa      	beq.n	24013ba8 <__kernel_tanf+0x30>
24013bb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24013bb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
24013bba:	e7f5      	b.n	24013ba8 <__kernel_tanf+0x30>
24013bbc:	494c      	ldr	r1, [pc, #304]	; (24013cf0 <__kernel_tanf+0x178>)
24013bbe:	428a      	cmp	r2, r1
24013bc0:	db12      	blt.n	24013be8 <__kernel_tanf+0x70>
24013bc2:	2b00      	cmp	r3, #0
24013bc4:	bfb8      	it	lt
24013bc6:	eef1 7a40 	vneglt.f32	s15, s0
24013bca:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 24013cf4 <__kernel_tanf+0x17c>
24013bce:	ee70 7a67 	vsub.f32	s15, s0, s15
24013bd2:	ed9f 0a49 	vldr	s0, [pc, #292]	; 24013cf8 <__kernel_tanf+0x180>
24013bd6:	bfb8      	it	lt
24013bd8:	eef1 0a60 	vneglt.f32	s1, s1
24013bdc:	ee70 0a60 	vsub.f32	s1, s0, s1
24013be0:	ee70 7aa7 	vadd.f32	s15, s1, s15
24013be4:	eddf 0a45 	vldr	s1, [pc, #276]	; 24013cfc <__kernel_tanf+0x184>
24013be8:	eddf 5a45 	vldr	s11, [pc, #276]	; 24013d00 <__kernel_tanf+0x188>
24013bec:	ed9f 6a45 	vldr	s12, [pc, #276]	; 24013d04 <__kernel_tanf+0x18c>
24013bf0:	ed9f 5a45 	vldr	s10, [pc, #276]	; 24013d08 <__kernel_tanf+0x190>
24013bf4:	493e      	ldr	r1, [pc, #248]	; (24013cf0 <__kernel_tanf+0x178>)
24013bf6:	ee67 6aa7 	vmul.f32	s13, s15, s15
24013bfa:	428a      	cmp	r2, r1
24013bfc:	ee26 7aa6 	vmul.f32	s14, s13, s13
24013c00:	eea7 6a25 	vfma.f32	s12, s14, s11
24013c04:	eddf 5a41 	vldr	s11, [pc, #260]	; 24013d0c <__kernel_tanf+0x194>
24013c08:	eee6 5a07 	vfma.f32	s11, s12, s14
24013c0c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 24013d10 <__kernel_tanf+0x198>
24013c10:	eea5 6a87 	vfma.f32	s12, s11, s14
24013c14:	eddf 5a3f 	vldr	s11, [pc, #252]	; 24013d14 <__kernel_tanf+0x19c>
24013c18:	eee6 5a07 	vfma.f32	s11, s12, s14
24013c1c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 24013d18 <__kernel_tanf+0x1a0>
24013c20:	eea5 6a87 	vfma.f32	s12, s11, s14
24013c24:	eddf 5a3d 	vldr	s11, [pc, #244]	; 24013d1c <__kernel_tanf+0x1a4>
24013c28:	eee7 5a05 	vfma.f32	s11, s14, s10
24013c2c:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 24013d20 <__kernel_tanf+0x1a8>
24013c30:	eea5 5a87 	vfma.f32	s10, s11, s14
24013c34:	eddf 5a3b 	vldr	s11, [pc, #236]	; 24013d24 <__kernel_tanf+0x1ac>
24013c38:	eee5 5a07 	vfma.f32	s11, s10, s14
24013c3c:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 24013d28 <__kernel_tanf+0x1b0>
24013c40:	eea5 5a87 	vfma.f32	s10, s11, s14
24013c44:	eddf 5a39 	vldr	s11, [pc, #228]	; 24013d2c <__kernel_tanf+0x1b4>
24013c48:	eee5 5a07 	vfma.f32	s11, s10, s14
24013c4c:	eeb0 7a46 	vmov.f32	s14, s12
24013c50:	eea5 7aa6 	vfma.f32	s14, s11, s13
24013c54:	ee27 5aa6 	vmul.f32	s10, s15, s13
24013c58:	eeb0 6a60 	vmov.f32	s12, s1
24013c5c:	eea7 6a05 	vfma.f32	s12, s14, s10
24013c60:	ed9f 7a33 	vldr	s14, [pc, #204]	; 24013d30 <__kernel_tanf+0x1b8>
24013c64:	eee6 0a26 	vfma.f32	s1, s12, s13
24013c68:	eee5 0a07 	vfma.f32	s1, s10, s14
24013c6c:	ee37 7aa0 	vadd.f32	s14, s15, s1
24013c70:	db1d      	blt.n	24013cae <__kernel_tanf+0x136>
24013c72:	ee06 0a90 	vmov	s13, r0
24013c76:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
24013c7a:	ee27 6a07 	vmul.f32	s12, s14, s14
24013c7e:	ee37 7a00 	vadd.f32	s14, s14, s0
24013c82:	179b      	asrs	r3, r3, #30
24013c84:	eec6 6a07 	vdiv.f32	s13, s12, s14
24013c88:	f003 0302 	and.w	r3, r3, #2
24013c8c:	f1c3 0301 	rsb	r3, r3, #1
24013c90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24013c94:	ee76 0ae0 	vsub.f32	s1, s13, s1
24013c98:	ee77 7ae0 	vsub.f32	s15, s15, s1
24013c9c:	eea7 0ac7 	vfms.f32	s0, s15, s14
24013ca0:	ee07 3a90 	vmov	s15, r3
24013ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013ca8:	ee67 7a80 	vmul.f32	s15, s15, s0
24013cac:	e77c      	b.n	24013ba8 <__kernel_tanf+0x30>
24013cae:	2801      	cmp	r0, #1
24013cb0:	d01b      	beq.n	24013cea <__kernel_tanf+0x172>
24013cb2:	4b20      	ldr	r3, [pc, #128]	; (24013d34 <__kernel_tanf+0x1bc>)
24013cb4:	ee17 2a10 	vmov	r2, s14
24013cb8:	401a      	ands	r2, r3
24013cba:	ee06 2a10 	vmov	s12, r2
24013cbe:	ee76 7a67 	vsub.f32	s15, s12, s15
24013cc2:	ee70 0ae7 	vsub.f32	s1, s1, s15
24013cc6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24013cca:	eec7 6a87 	vdiv.f32	s13, s15, s14
24013cce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24013cd2:	ee16 2a90 	vmov	r2, s13
24013cd6:	4013      	ands	r3, r2
24013cd8:	ee07 3a90 	vmov	s15, r3
24013cdc:	eea6 7a27 	vfma.f32	s14, s12, s15
24013ce0:	eea0 7aa7 	vfma.f32	s14, s1, s15
24013ce4:	eee7 7a26 	vfma.f32	s15, s14, s13
24013ce8:	e75e      	b.n	24013ba8 <__kernel_tanf+0x30>
24013cea:	eef0 7a47 	vmov.f32	s15, s14
24013cee:	e75b      	b.n	24013ba8 <__kernel_tanf+0x30>
24013cf0:	3f2ca140 	.word	0x3f2ca140
24013cf4:	3f490fda 	.word	0x3f490fda
24013cf8:	33222168 	.word	0x33222168
24013cfc:	00000000 	.word	0x00000000
24013d00:	b79bae5f 	.word	0xb79bae5f
24013d04:	38a3f445 	.word	0x38a3f445
24013d08:	37d95384 	.word	0x37d95384
24013d0c:	3a1a26c8 	.word	0x3a1a26c8
24013d10:	3b6b6916 	.word	0x3b6b6916
24013d14:	3cb327a4 	.word	0x3cb327a4
24013d18:	3e088889 	.word	0x3e088889
24013d1c:	3895c07a 	.word	0x3895c07a
24013d20:	398137b9 	.word	0x398137b9
24013d24:	3abede48 	.word	0x3abede48
24013d28:	3c11371f 	.word	0x3c11371f
24013d2c:	3d5d0dd1 	.word	0x3d5d0dd1
24013d30:	3eaaaaab 	.word	0x3eaaaaab
24013d34:	fffff000 	.word	0xfffff000

24013d38 <expm1f>:
24013d38:	ee10 2a10 	vmov	r2, s0
24013d3c:	497c      	ldr	r1, [pc, #496]	; (24013f30 <expm1f+0x1f8>)
24013d3e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
24013d42:	428b      	cmp	r3, r1
24013d44:	d920      	bls.n	24013d88 <expm1f+0x50>
24013d46:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24013d4a:	d902      	bls.n	24013d52 <expm1f+0x1a>
24013d4c:	ee30 0a00 	vadd.f32	s0, s0, s0
24013d50:	4770      	bx	lr
24013d52:	d105      	bne.n	24013d60 <expm1f+0x28>
24013d54:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24013d58:	2a00      	cmp	r2, #0
24013d5a:	fe20 0a27 	vselge.f32	s0, s0, s15
24013d5e:	4770      	bx	lr
24013d60:	2a00      	cmp	r2, #0
24013d62:	db05      	blt.n	24013d70 <expm1f+0x38>
24013d64:	4973      	ldr	r1, [pc, #460]	; (24013f34 <expm1f+0x1fc>)
24013d66:	428b      	cmp	r3, r1
24013d68:	d95c      	bls.n	24013e24 <expm1f+0xec>
24013d6a:	2000      	movs	r0, #0
24013d6c:	f7fe bf7c 	b.w	24012c68 <__math_oflowf>
24013d70:	eddf 7a71 	vldr	s15, [pc, #452]	; 24013f38 <expm1f+0x200>
24013d74:	ee70 7a27 	vadd.f32	s15, s0, s15
24013d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24013d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013d80:	d550      	bpl.n	24013e24 <expm1f+0xec>
24013d82:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24013d86:	4770      	bx	lr
24013d88:	496c      	ldr	r1, [pc, #432]	; (24013f3c <expm1f+0x204>)
24013d8a:	428b      	cmp	r3, r1
24013d8c:	d966      	bls.n	24013e5c <expm1f+0x124>
24013d8e:	496c      	ldr	r1, [pc, #432]	; (24013f40 <expm1f+0x208>)
24013d90:	428b      	cmp	r3, r1
24013d92:	d847      	bhi.n	24013e24 <expm1f+0xec>
24013d94:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 24013f44 <expm1f+0x20c>
24013d98:	2a00      	cmp	r2, #0
24013d9a:	bfa7      	ittee	ge
24013d9c:	ee30 7a47 	vsubge.f32	s14, s0, s14
24013da0:	eddf 7a69 	vldrge	s15, [pc, #420]	; 24013f48 <expm1f+0x210>
24013da4:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 24013f4c <expm1f+0x214>
24013da8:	ee30 7a07 	vaddlt.f32	s14, s0, s14
24013dac:	bfac      	ite	ge
24013dae:	2301      	movge	r3, #1
24013db0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
24013db4:	ee37 0a67 	vsub.f32	s0, s14, s15
24013db8:	ee37 7a40 	vsub.f32	s14, s14, s0
24013dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
24013dc0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
24013dc4:	ee20 4a25 	vmul.f32	s8, s0, s11
24013dc8:	ed9f 6a61 	vldr	s12, [pc, #388]	; 24013f50 <expm1f+0x218>
24013dcc:	eddf 6a61 	vldr	s13, [pc, #388]	; 24013f54 <expm1f+0x21c>
24013dd0:	ed9f 5a61 	vldr	s10, [pc, #388]	; 24013f58 <expm1f+0x220>
24013dd4:	ee20 7a04 	vmul.f32	s14, s0, s8
24013dd8:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
24013ddc:	eee7 6a06 	vfma.f32	s13, s14, s12
24013de0:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 24013f5c <expm1f+0x224>
24013de4:	eea6 6a87 	vfma.f32	s12, s13, s14
24013de8:	eddf 6a5d 	vldr	s13, [pc, #372]	; 24013f60 <expm1f+0x228>
24013dec:	eee6 6a07 	vfma.f32	s13, s12, s14
24013df0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24013df4:	eea6 5a87 	vfma.f32	s10, s13, s14
24013df8:	eef0 6a46 	vmov.f32	s13, s12
24013dfc:	eee5 6a07 	vfma.f32	s13, s10, s14
24013e00:	eee4 4a66 	vfms.f32	s9, s8, s13
24013e04:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
24013e08:	eea0 4a64 	vfms.f32	s8, s0, s9
24013e0c:	ee36 5ae4 	vsub.f32	s10, s13, s9
24013e10:	eec5 6a04 	vdiv.f32	s13, s10, s8
24013e14:	ee66 6a87 	vmul.f32	s13, s13, s14
24013e18:	bb73      	cbnz	r3, 24013e78 <expm1f+0x140>
24013e1a:	eef0 7a47 	vmov.f32	s15, s14
24013e1e:	eed0 7a26 	vfnms.f32	s15, s0, s13
24013e22:	e024      	b.n	24013e6e <expm1f+0x136>
24013e24:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
24013e28:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24013e2c:	2a00      	cmp	r2, #0
24013e2e:	fe67 7a87 	vselge.f32	s15, s15, s14
24013e32:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 24013f64 <expm1f+0x22c>
24013e36:	eddf 6a43 	vldr	s13, [pc, #268]	; 24013f44 <expm1f+0x20c>
24013e3a:	ee40 7a07 	vmla.f32	s15, s0, s14
24013e3e:	eeb0 7a40 	vmov.f32	s14, s0
24013e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24013e46:	ee17 3a90 	vmov	r3, s15
24013e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013e4e:	eea7 7ae6 	vfms.f32	s14, s15, s13
24013e52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 24013f48 <expm1f+0x210>
24013e56:	ee67 7aa6 	vmul.f32	s15, s15, s13
24013e5a:	e7ab      	b.n	24013db4 <expm1f+0x7c>
24013e5c:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
24013e60:	d208      	bcs.n	24013e74 <expm1f+0x13c>
24013e62:	eddf 7a41 	vldr	s15, [pc, #260]	; 24013f68 <expm1f+0x230>
24013e66:	ee70 7a27 	vadd.f32	s15, s0, s15
24013e6a:	ee77 7ae7 	vsub.f32	s15, s15, s15
24013e6e:	ee30 0a67 	vsub.f32	s0, s0, s15
24013e72:	4770      	bx	lr
24013e74:	2300      	movs	r3, #0
24013e76:	e7a3      	b.n	24013dc0 <expm1f+0x88>
24013e78:	ee76 6ae7 	vsub.f32	s13, s13, s15
24013e7c:	1c5a      	adds	r2, r3, #1
24013e7e:	eed6 7a80 	vfnms.f32	s15, s13, s0
24013e82:	ee77 7ac7 	vsub.f32	s15, s15, s14
24013e86:	d106      	bne.n	24013e96 <expm1f+0x15e>
24013e88:	ee70 7a67 	vsub.f32	s15, s0, s15
24013e8c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24013e90:	eea7 0aa5 	vfma.f32	s0, s15, s11
24013e94:	4770      	bx	lr
24013e96:	2b01      	cmp	r3, #1
24013e98:	d118      	bne.n	24013ecc <expm1f+0x194>
24013e9a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
24013e9e:	eeb4 0ac7 	vcmpe.f32	s0, s14
24013ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013ea6:	bf5b      	ittet	pl
24013ea8:	ee70 7a67 	vsubpl.f32	s15, s0, s15
24013eac:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
24013eb0:	ee30 0a25 	vaddmi.f32	s0, s0, s11
24013eb4:	eea7 6a87 	vfmapl.f32	s12, s15, s14
24013eb8:	bf43      	ittte	mi
24013eba:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
24013ebe:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
24013ec2:	ee27 0a80 	vmulmi.f32	s0, s15, s0
24013ec6:	eeb0 0a46 	vmovpl.f32	s0, s12
24013eca:	4770      	bx	lr
24013ecc:	1c5a      	adds	r2, r3, #1
24013ece:	2a39      	cmp	r2, #57	; 0x39
24013ed0:	ea4f 51c3 	mov.w	r1, r3, lsl #23
24013ed4:	d90b      	bls.n	24013eee <expm1f+0x1b6>
24013ed6:	ee37 0ac0 	vsub.f32	s0, s15, s0
24013eda:	ee36 0a40 	vsub.f32	s0, s12, s0
24013ede:	ee10 3a10 	vmov	r3, s0
24013ee2:	440b      	add	r3, r1
24013ee4:	ee00 3a10 	vmov	s0, r3
24013ee8:	ee30 0a46 	vsub.f32	s0, s0, s12
24013eec:	4770      	bx	lr
24013eee:	2b16      	cmp	r3, #22
24013ef0:	dc11      	bgt.n	24013f16 <expm1f+0x1de>
24013ef2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
24013ef6:	fa42 f303 	asr.w	r3, r2, r3
24013efa:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
24013efe:	ee37 0ac0 	vsub.f32	s0, s15, s0
24013f02:	ee07 3a90 	vmov	s15, r3
24013f06:	ee37 0ac0 	vsub.f32	s0, s15, s0
24013f0a:	ee10 3a10 	vmov	r3, s0
24013f0e:	440b      	add	r3, r1
24013f10:	ee00 3a10 	vmov	s0, r3
24013f14:	4770      	bx	lr
24013f16:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
24013f1a:	05db      	lsls	r3, r3, #23
24013f1c:	ee07 3a10 	vmov	s14, r3
24013f20:	ee77 7a87 	vadd.f32	s15, s15, s14
24013f24:	ee70 7a67 	vsub.f32	s15, s0, s15
24013f28:	ee37 0a86 	vadd.f32	s0, s15, s12
24013f2c:	e7ed      	b.n	24013f0a <expm1f+0x1d2>
24013f2e:	bf00      	nop
24013f30:	4195b843 	.word	0x4195b843
24013f34:	42b17217 	.word	0x42b17217
24013f38:	0da24260 	.word	0x0da24260
24013f3c:	3eb17218 	.word	0x3eb17218
24013f40:	3f851591 	.word	0x3f851591
24013f44:	3f317180 	.word	0x3f317180
24013f48:	3717f7d1 	.word	0x3717f7d1
24013f4c:	b717f7d1 	.word	0xb717f7d1
24013f50:	b457edbb 	.word	0xb457edbb
24013f54:	36867e54 	.word	0x36867e54
24013f58:	bd088889 	.word	0xbd088889
24013f5c:	b8a670cd 	.word	0xb8a670cd
24013f60:	3ad00d01 	.word	0x3ad00d01
24013f64:	3fb8aa3b 	.word	0x3fb8aa3b
24013f68:	7149f2ca 	.word	0x7149f2ca

24013f6c <finitef>:
24013f6c:	b082      	sub	sp, #8
24013f6e:	ed8d 0a01 	vstr	s0, [sp, #4]
24013f72:	9801      	ldr	r0, [sp, #4]
24013f74:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
24013f78:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
24013f7c:	bfac      	ite	ge
24013f7e:	2000      	movge	r0, #0
24013f80:	2001      	movlt	r0, #1
24013f82:	b002      	add	sp, #8
24013f84:	4770      	bx	lr
	...

24013f88 <floorf>:
24013f88:	ee10 3a10 	vmov	r3, s0
24013f8c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24013f90:	3a7f      	subs	r2, #127	; 0x7f
24013f92:	2a16      	cmp	r2, #22
24013f94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
24013f98:	dc2a      	bgt.n	24013ff0 <floorf+0x68>
24013f9a:	2a00      	cmp	r2, #0
24013f9c:	da11      	bge.n	24013fc2 <floorf+0x3a>
24013f9e:	eddf 7a18 	vldr	s15, [pc, #96]	; 24014000 <floorf+0x78>
24013fa2:	ee30 0a27 	vadd.f32	s0, s0, s15
24013fa6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24013faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013fae:	dd05      	ble.n	24013fbc <floorf+0x34>
24013fb0:	2b00      	cmp	r3, #0
24013fb2:	da23      	bge.n	24013ffc <floorf+0x74>
24013fb4:	4a13      	ldr	r2, [pc, #76]	; (24014004 <floorf+0x7c>)
24013fb6:	2900      	cmp	r1, #0
24013fb8:	bf18      	it	ne
24013fba:	4613      	movne	r3, r2
24013fbc:	ee00 3a10 	vmov	s0, r3
24013fc0:	4770      	bx	lr
24013fc2:	4911      	ldr	r1, [pc, #68]	; (24014008 <floorf+0x80>)
24013fc4:	4111      	asrs	r1, r2
24013fc6:	420b      	tst	r3, r1
24013fc8:	d0fa      	beq.n	24013fc0 <floorf+0x38>
24013fca:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24014000 <floorf+0x78>
24013fce:	ee30 0a27 	vadd.f32	s0, s0, s15
24013fd2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24013fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013fda:	ddef      	ble.n	24013fbc <floorf+0x34>
24013fdc:	2b00      	cmp	r3, #0
24013fde:	bfbe      	ittt	lt
24013fe0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
24013fe4:	fa40 f202 	asrlt.w	r2, r0, r2
24013fe8:	189b      	addlt	r3, r3, r2
24013fea:	ea23 0301 	bic.w	r3, r3, r1
24013fee:	e7e5      	b.n	24013fbc <floorf+0x34>
24013ff0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
24013ff4:	d3e4      	bcc.n	24013fc0 <floorf+0x38>
24013ff6:	ee30 0a00 	vadd.f32	s0, s0, s0
24013ffa:	4770      	bx	lr
24013ffc:	2300      	movs	r3, #0
24013ffe:	e7dd      	b.n	24013fbc <floorf+0x34>
24014000:	7149f2ca 	.word	0x7149f2ca
24014004:	bf800000 	.word	0xbf800000
24014008:	007fffff 	.word	0x007fffff

2401400c <scalbnf>:
2401400c:	ee10 3a10 	vmov	r3, s0
24014010:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
24014014:	d024      	beq.n	24014060 <scalbnf+0x54>
24014016:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401401a:	d302      	bcc.n	24014022 <scalbnf+0x16>
2401401c:	ee30 0a00 	vadd.f32	s0, s0, s0
24014020:	4770      	bx	lr
24014022:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
24014026:	d121      	bne.n	2401406c <scalbnf+0x60>
24014028:	4b29      	ldr	r3, [pc, #164]	; (240140d0 <scalbnf+0xc4>)
2401402a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 240140d4 <scalbnf+0xc8>
2401402e:	4298      	cmp	r0, r3
24014030:	ee20 0a27 	vmul.f32	s0, s0, s15
24014034:	db15      	blt.n	24014062 <scalbnf+0x56>
24014036:	ee10 3a10 	vmov	r3, s0
2401403a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
2401403e:	3a19      	subs	r2, #25
24014040:	4402      	add	r2, r0
24014042:	2afe      	cmp	r2, #254	; 0xfe
24014044:	dd14      	ble.n	24014070 <scalbnf+0x64>
24014046:	eddf 7a24 	vldr	s15, [pc, #144]	; 240140d8 <scalbnf+0xcc>
2401404a:	eddf 6a24 	vldr	s13, [pc, #144]	; 240140dc <scalbnf+0xd0>
2401404e:	ee10 3a10 	vmov	r3, s0
24014052:	eeb0 7a67 	vmov.f32	s14, s15
24014056:	2b00      	cmp	r3, #0
24014058:	fe67 7aa6 	vselge.f32	s15, s15, s13
2401405c:	ee27 0a27 	vmul.f32	s0, s14, s15
24014060:	4770      	bx	lr
24014062:	eddf 7a1f 	vldr	s15, [pc, #124]	; 240140e0 <scalbnf+0xd4>
24014066:	ee20 0a27 	vmul.f32	s0, s0, s15
2401406a:	4770      	bx	lr
2401406c:	0dd2      	lsrs	r2, r2, #23
2401406e:	e7e7      	b.n	24014040 <scalbnf+0x34>
24014070:	2a00      	cmp	r2, #0
24014072:	dd06      	ble.n	24014082 <scalbnf+0x76>
24014074:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24014078:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
2401407c:	ee00 3a10 	vmov	s0, r3
24014080:	4770      	bx	lr
24014082:	f112 0f16 	cmn.w	r2, #22
24014086:	da19      	bge.n	240140bc <scalbnf+0xb0>
24014088:	f24c 3350 	movw	r3, #50000	; 0xc350
2401408c:	4298      	cmp	r0, r3
2401408e:	ee10 3a10 	vmov	r3, s0
24014092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
24014096:	dd09      	ble.n	240140ac <scalbnf+0xa0>
24014098:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 240140d8 <scalbnf+0xcc>
2401409c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 240140dc <scalbnf+0xd0>
240140a0:	eef0 7a40 	vmov.f32	s15, s0
240140a4:	2b00      	cmp	r3, #0
240140a6:	fe00 0a07 	vseleq.f32	s0, s0, s14
240140aa:	e7dc      	b.n	24014066 <scalbnf+0x5a>
240140ac:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 240140e0 <scalbnf+0xd4>
240140b0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 240140e4 <scalbnf+0xd8>
240140b4:	eef0 7a40 	vmov.f32	s15, s0
240140b8:	2b00      	cmp	r3, #0
240140ba:	e7f4      	b.n	240140a6 <scalbnf+0x9a>
240140bc:	3219      	adds	r2, #25
240140be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
240140c2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
240140c6:	eddf 7a08 	vldr	s15, [pc, #32]	; 240140e8 <scalbnf+0xdc>
240140ca:	ee07 3a10 	vmov	s14, r3
240140ce:	e7c5      	b.n	2401405c <scalbnf+0x50>
240140d0:	ffff3cb0 	.word	0xffff3cb0
240140d4:	4c000000 	.word	0x4c000000
240140d8:	7149f2ca 	.word	0x7149f2ca
240140dc:	f149f2ca 	.word	0xf149f2ca
240140e0:	0da24260 	.word	0x0da24260
240140e4:	8da24260 	.word	0x8da24260
240140e8:	33000000 	.word	0x33000000

240140ec <syncMap>:
240140ec:	00000002 00000000 00000001 7062652e     .............ebp
240140fc:	00000000 7462652e 00000000              .....ebt....

24014108 <D1CorePrescTable>:
24014108:	00000000 04030201 04030201 09080706     ................

24014118 <flagBitshiftOffset.0>:
24014118:	16100600 16100600                       ........

24014120 <SD_Driver>:
24014120:	2400a6e5 2400a715 2400a735 2400a7c5     ...$...$5..$...$
24014130:	2400a75d 3c3a2a22 7f7c3f3e 00000000     ]..$"*:<>?|.....
24014140:	3d3b2c2b 00005d5b                       +,;=[]..

24014148 <ExCvt>:
24014148:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
24014158:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
24014168:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
24014178:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
24014188:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
24014198:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
240141a8:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
240141b8:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

240141c8 <LfnOfs>:
240141c8:	07050301 12100e09 1c181614 0000001e     ................

240141d8 <Tbl>:
240141d8:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
240141e8:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
240141f8:	00e600c9 00f400c6 00f200f6 00f900fb     ................
24014208:	00d600ff 00f800dc 00d800a3 019200d7     ................
24014218:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
24014228:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
24014238:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
24014248:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
24014258:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
24014268:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
24014278:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
24014288:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
24014298:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
240142a8:	00da00de 00d900db 00dd00fd 00b400af     ................
240142b8:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
240142c8:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

240142d8 <cvt1.1>:
240142d8:	031a0061 031700e0 030700f8 000100ff     a...............
240142e8:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
240142f8:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
24014308:	01840182 01860184 01870187 018a0189     ................
24014318:	018b018b 018e018d 0190018f 01910191     ................
24014328:	01940193 019601f6 01980197 023d0198     ..............=.
24014338:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
24014348:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
24014358:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
24014368:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
24014378:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
24014388:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
24014398:	01ca01cb 011001cd 000101dd 01de018e     ................
240143a8:	01f30112 01f10003 01f401f4 012801f8     ..............(.
240143b8:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
240143c8:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
240143d8:	01810040 02550186 018a0189 018f0258     @.....U.....X...
240143e8:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
240143f8:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
24014408:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
24014418:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
24014428:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
24014438:	01a90282 02850284 02870286 024401ae     ..............D.
24014448:	01b201b1 028d0245 028f028e 02910290     ....E...........
24014458:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
24014468:	03880386 038a0389 031103b1 000203c2     ................
24014478:	03a303a3 030803c4 000303cc 038e038c     ................
24014488:	03d8038f 03f20118 03f9000a 03f403f3     ................
24014498:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
240144a8:	04500320 04600710 048a0122 04c10136      .P...`."...6...
240144b8:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
240144c8:	00000000                                ....

240144cc <cvt2.0>:
240144cc:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
240144dc:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
240144ec:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
240144fc:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
2401450c:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
2401451c:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
2401452c:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
2401453c:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
2401454c:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
2401455c:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
2401456c:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
2401457c:	2d000164 ff410826 0000031a              d..-&.A.....

24014588 <__leaf_table_filtertan>:
24014588:	3ab0d0ee 3ab1140a 3ab178b3 3ab1bbcf     ...:...:.x.:...:
24014598:	3ab1feeb 3ab24207 3ab28523 3ab2e9cd     ...:.B.:#..:...:
240145a8:	3ab32ce9 3ab37004 3ab3b320 3ab3f63c     .,.:.p.: ..:<..:
240145b8:	3ab45ae6 3ab49e02 3ab4e11e 3ab5243a     .Z.:...:...::$.:
240145c8:	3ab56755 3ab5cbff 3ab60f1b 3ab65237     Ug.:...:...:7R.:
240145d8:	3ab69553 3ab6f9fd 3ab73d19 3ab78034     S..:...:.=.:4..:
240145e8:	3ab7c350 3ab827fa 3ab86b16 3ab8ae32     P..:.'.:.k.:2..:
240145f8:	3ab8f14e 3ab955f8 3ab99913 3ab9dc2f     N..:.U.:...:/..:
24014608:	3aba1f4b 3aba83f5 3abac711 3abb0a2d     K..:...:...:-..:
24014618:	3abb6ed6 3abbb1f2 3abbf50e 3abc59b8     .n.:...:...:.Y.:
24014628:	3abc9cd4 3abcdff0 3abd449a 3abd87b5     ...:...:.D.:...:
24014638:	3abdcad1 3abe0ded 3abe7297 3abeb5b3     ...:...:.r.:...:
24014648:	3abf1a5d 3abf5d79 3abfa094 3ac0053e     ]..:y].:...:>..:
24014658:	3ac0485a 3ac08b76 3ac0f020 3ac1333c     ZH.:v..: ..:<3.:
24014668:	3ac17657 3ac1db01 3ac21e1d 3ac282c7     Wv.:...:...:...:
24014678:	3ac2c5e3 3ac308ff 3ac36da8 3ac3b0c4     ...:...:.m.:...:
24014688:	3ac3f3e0 3ac4588a 3ac49ba6 3ac50050     ...:.X.:...:P..:
24014698:	3ac5436c 3ac5a815 3ac5eb31 3ac62e4d     lC.:...:1..:M..:
240146a8:	3ac692f7 3ac6d613 3ac73abd 3ac77dd8     ...:...:.:.:.}.:
240146b8:	3ac7e282 3ac8259e 3ac88a48 3ac8cd64     ...:.%.:H..:d..:
240146c8:	3ac91080 3ac97529 3ac9b845 3aca1cef     ...:)u.:E..:...:
240146d8:	3aca600b 3acac4b5 3acb07d1 3acb6c7a     .`.:...:...:zl.:
240146e8:	3acbaf96 3acc1440 3acc575c 3accbc06     ...:@..:\W.:...:
240146f8:	3accff22 3acd63cc 3acda6e7 3ace0b91     "..:.c.:...:...:
24014708:	3ace4ead 3aceb357 3acf1801 3acf5b1d     .N.:W..:...:.[.:
24014718:	3acfbfc6 3ad002e2 3ad0678c 3ad0aaa8     ...:...:.g.:...:
24014728:	3ad10f52 3ad1526e 3ad1b717 3ad21bc1     R..:nR.:...:...:
24014738:	3ad25edd 3ad2c387 3ad306a3 3ad36b4c     .^.:...:...:Lk.:
24014748:	3ad3ae68 3ad41312 3ad477bc 3ad4bad8     h..:...:.w.:...:
24014758:	3ad51f82 3ad5629e 3ad5c747 3ad62bf1     ...:.b.:G..:.+.:
24014768:	3ad66f0d 3ad6d3b7 3ad73861 3ad77b7c     .o.:...:a8.:|{.:
24014778:	3ad7e026 3ad844d0 3ad887ec 3ad8ec96     &..:.D.:...:...:
24014788:	3ad95140 3ad9945b 3ad9f905 3ada5daf     @Q.:[..:...:.].:
24014798:	3adaa0cb 3adb0575 3adb6a1f 3adbad3a     ...:u..:.j.::..:
240147a8:	3adc11e4 3adc768e 3adcb9aa 3add1e54     ...:.v.:...:T..:
240147b8:	3add82fd 3adde7a7 3ade2ac3 3ade8f6d     ...:...:.*.:m..:
240147c8:	3adef417 3adf3733 3adf9bdc 3ae00086     ...:37.:...:...:
240147d8:	3ae06530 3ae0a84c 3ae10cf6 3ae1719f     0e.:L..:...:.q.:
240147e8:	3ae1d649 3ae23af3 3ae27e0f 3ae2e2b9     I..:.:.:.~.:...:
240147f8:	3ae34763 3ae3ac0c 3ae3ef28 3ae453d2     cG.:...:(..:.S.:
24014808:	3ae4b87c 3ae51d26 3ae581cf 3ae5c4eb     |..:&..:...:...:
24014818:	3ae62995 3ae68e3f 3ae6f2e9 3ae75793     .).:?..:...:.W.:
24014828:	3ae7bc3c 3ae7ff58 3ae86402 3ae8c8ac     <..:X..:.d.:...:
24014838:	3ae92d56 3ae991ff 3ae9f6a9 3aea5b53     V-.:...:...:S[.:
24014848:	3aeabffd 3aeb0319 3aeb67c3 3aebcc6c     ...:...:.g.:l..:
24014858:	3aec3116 3aec95c0 3aecfa6a 3aed5f14     .1.:...:j..:._.:
24014868:	3aedc3bd 3aee2867 3aee8d11 3aeed02d     ...:g(.:...:-..:
24014878:	3aef34d7 3aef9980 3aeffe2a 3af062d4     .4.:...:*..:.b.:
24014888:	3af0c77e 3af12c28 3af190d1 3af1f57b     ~..:(,.:...:{..:
24014898:	3af25a25 3af2becf 3af32379 3af38822     %Z.:...:y#.:"..:
240148a8:	3af3eccc 3af45176 3af4b620 3af51aca     ...:vQ.: ..:...:
240148b8:	3af57f73 3af5e41d 3af648c7 3af6ad71     s..:...:.H.:q..:
240148c8:	3af7121b 3af776c5 3af7db6e 3af84018     ...:.v.:n..:.@.:
240148d8:	3af8a4c2 3af9096c 3af96e16 3af9d2bf     ...:l..:.n.:...:
240148e8:	3afa3769 3afabda1 3afb224b 3afb86f4     i7.:...:K".:...:
240148f8:	3afbeb9e 3afc5048 3afcb4f2 3afd199c     ...:HP.:...:...:
24014908:	3afd7e46 3afde2ef 3afe4799 3afecdd1     F~.:...:.G.:...:
24014918:	3aff327b 3aff9724 3afffbce 3b00303c     {2.:$..:...:<0.;
24014928:	3b006291 3b0094e6 3b00d802 3b010a57     .b.;...;...;W..;
24014938:	3b013cac 3b016f00 3b01a155 3b01d3aa     .<.;.o.;U..;...;
24014948:	3b0216c6 3b02491b 3b027b70 3b02adc5     ...;.I.;p{.;...;
24014958:	3b02e01a 3b032336 3b03558a 3b0387df     ...;6#.;.U.;...;
24014968:	3b03ba34 3b03ec89 3b042fa5 3b0461fa     4..;...;./.;.a.;
24014978:	3b04944f 3b04c6a4 3b0509c0 3b053c15     O..;...;...;.<.;
24014988:	3b056e69 3b05b185 3b05e3da 3b06162f     in.;...;...;/..;
24014998:	3b064884 3b068ba0 3b06bdf5 3b06f04a     .H.;...;...;J..;
240149a8:	3b073366 3b0765ba 3b07980f 3b07db2b     f3.;.e.;...;+..;
240149b8:	3b080d80 3b083fd5 3b0882f1 3b08b546     ...;.?.;...;F..;
240149c8:	3b08e79b 3b092ab7 3b095d0b 3b098f60     ...;.*.;.].;`..;
240149d8:	3b09d27c 3b0a04d1 3b0a47ed 3b0a7a42     |..;...;.G.;Bz.;
240149e8:	3b0aac97 3b0aefb3 3b0b2208 3b0b6523     ...;...;.".;#e.;
240149f8:	3b0b9778 3b0bc9cd 3b0c0ce9 3b0c3f3e     x..;...;...;>?.;
24014a08:	3b0c825a 3b0cb4af 3b0cf7cb 3b0d2a20     Z..;...;...; *.;
24014a18:	3b0d6d3b 3b0d9f90 3b0de2ac 3b0e1501     ;m.;...;...;...;
24014a28:	3b0e581d 3b0e8a72 3b0ecd8e 3b0effe3     .X.;r..;...;...;
24014a38:	3b0f42ff 3b0f7553 3b0fb86f 3b0feac4     .B.;Su.;o..;...;
24014a48:	3b102de0 3b106035 3b10a351 3b10d5a6     .-.;5`.;Q..;...;
24014a58:	3b1118c2 3b114b16 3b118e32 3b11d14e     ...;.K.;2..;N..;
24014a68:	3b1203a3 3b1246bf 3b127914 3b12bc30     ...;.F.;.y.;0..;
24014a78:	3b12ee85 3b1331a1 3b1374bc 3b13a711     ...;.1.;.t.;...;
24014a88:	3b13ea2d 3b142d49 3b145f9e 3b14a2ba     -..;I-.;._.;...;
24014a98:	3b14d50f 3b15182b 3b155b46 3b158d9b     ...;+..;F[.;...;
24014aa8:	3b15d0b7 3b1613d3 3b1656ef 3b168944     ...;...;.V.;D..;
24014ab8:	3b16cc60 3b170f7c 3b1741d1 3b1784ec     `..;|..;.A.;...;
24014ac8:	3b17c808 3b17fa5d 3b183d79 3b188095     ...;]..;y=.;...;
24014ad8:	3b18c3b1 3b18f606 3b193922 3b197c3d     ...;...;"9.;=|.;
24014ae8:	3b19bf59 3b19f1ae 3b1a34ca 3b1a77e6     Y..;...;.4.;.w.;
24014af8:	3b1abb02 3b1afe1e 3b1b3073 3b1b738e     ...;...;s0.;.s.;
24014b08:	3b1bb6aa 3b1bf9c6 3b1c3ce2 3b1c7ffe     ...;...;.<.;...;
24014b18:	3b1cb253 3b1cf56f 3b1d388b 3b1d7ba6     S..;o..;.8.;.{.;
24014b28:	3b1dbec2 3b1e01de 3b1e44fa 3b1e774f     ...;...;.D.;Ow.;
24014b38:	3b1eba6b 3b1efd87 3b1f40a3 3b1f83be     k..;...;.@.;...;
24014b48:	3b1fc6da 3b2009f6 3b204d12 3b20902e     ...;.. ;.M ;.. ;
24014b58:	3b20d34a 3b211666 3b215981 3b219c9d     J. ;f.!;.Y!;..!;
24014b68:	3b21dfb9 3b2222d5 3b2265f1 3b229846     ..!;."";.e";F.";
24014b78:	3b22db62 3b231e7e 3b236199 3b23b57c     b.";~.#;.a#;|.#;
24014b88:	3b23f898 3b243bb4 3b247ed0 3b24c1ec     ..#;.;$;.~$;..$;
24014b98:	3b250508 3b254824 3b258b3f 3b25ce5b     ..%;$H%;?.%;[.%;
24014ba8:	3b261177 3b265493 3b2697af 3b26dacb     w.&;.T&;..&;..&;
24014bb8:	3b271de7 3b276102 3b27a41e 3b27f801     ..';.a';..';..';
24014bc8:	3b283b1d 3b287e39 3b28c155 3b290471     .;(;9~(;U.(;q.);
24014bd8:	3b29478d 3b298aa8 3b29de8b 3b2a21a7     .G);..);..);.!*;
24014be8:	3b2a64c3 3b2aa7df 3b2aeafb 3b2b2e17     .d*;..*;..*;..+;
24014bf8:	3b2b81f9 3b2bc515 3b2c0831 3b2c4b4d     ..+;..+;1.,;MK,;
24014c08:	3b2c9f30 3b2ce24c 3b2d2568 3b2d6883     0.,;L.,;h%-;.h-;
24014c18:	3b2dbc66 3b2dff82 3b2e429e 3b2e85ba     f.-;..-;.B.;...;
24014c28:	3b2ed99d 3b2f1cb9 3b2f5fd4 3b2fb3b7     ...;../;._/;../;
24014c38:	3b2ff6d3 3b3039ef 3b308dd2 3b30d0ee     ../;.90;..0;..0;
24014c48:	3b31140a 3b3167ec 3b31ab08 3b31ee24     ..1;.g1;..1;$.1;
24014c58:	3b324207 3b328523 3b32c83f 3b331c22     .B2;#.2;?.2;".3;
24014c68:	3b335f3d 3b33b320 3b33f63c 3b343958     =_3; .3;<.3;X94;
24014c78:	3b348d3b 3b34d057 3b35243a 3b356755     ;.4;W.4;:$5;Ug5;
24014c88:	3b35bb38 3b35fe54 3b365237 3b369553     8.5;T.5;7R6;S.6;
24014c98:	3b36d86f 3b372c52 3b376f6d 3b37c350     o.6;R,7;mo7;P.7;
24014ca8:	3b38066c 3b385a4f 3b38ae32 3b38f14e     l.8;OZ8;2.8;N.8;
24014cb8:	3b394531 3b39884c 3b39dc2f 3b3a1f4b     1E9;L.9;/.9;K.:;
24014cc8:	3b3a732e 3b3ab64a 3b3b0a2d 3b3b5e0f     .s:;J.:;-.;;.^;;
24014cd8:	3b3ba12b 3b3bf50e 3b3c382a 3b3c8c0d     +.;;..;;*8<;..<;
24014ce8:	3b3cdff0 3b3d230c 3b3d76ee 3b3dcad1     ..<;.#=;.v=;..=;
24014cf8:	3b3e0ded 3b3e61d0 3b3eb5b3 3b3ef8cf     ..>;.a>;..>;..>;
24014d08:	3b3f4cb2 3b3fa094 3b3fe3b0 3b403793     .L?;..?;..?;.7@;
24014d18:	3b408b76 3b40df59 3b412275 3b417657     v.@;Y.@;u"A;WvA;
24014d28:	3b41ca3a 3b421e1d 3b426139 3b42b51c     :.A;..B;9aB;..B;
24014d38:	3b4308ff 3b435ce2 3b439ffd 3b43f3e0     ..C;.\C;..C;..C;
24014d48:	3b4447c3 3b449ba6 3b44ef89 3b45436c     .GD;..D;..D;lCE;
24014d58:	3b458687 3b45da6a 3b462e4d 3b468230     ..E;j.E;M.F;0.F;
24014d68:	3b46d613 3b4729f6 3b477dd8 3b47c0f4     ..F;.)G;.}G;..G;
24014d78:	3b4814d7 3b4868ba 3b48bc9d 3b491080     ..H;.hH;..H;..I;
24014d88:	3b496463 3b49b845 3b4a0c28 3b4a600b     cdI;E.I;(.J;.`J;
24014d98:	3b4ab3ee 3b4b07d1 3b4b5bb4 3b4baf96     ..J;..K;.[K;..K;
24014da8:	3b4c0379 3b4c575c 3b4cab3f 3b4cff22     y.L;\WL;?.L;".L;
24014db8:	3b4d5305 3b4da6e7 3b4dfaca 3b4e4ead     .SM;..M;..M;.NN;
24014dc8:	3b4ea290 3b4ef673 3b4f4a56 3b4f9e38     ..N;s.N;VJO;8.O;
24014dd8:	3b4ff21b 3b5056c5 3b50aaa8 3b50fe8b     ..O;.VP;..P;..P;
24014de8:	3b51526e 3b51a650 3b51fa33 3b524e16     nRQ;P.Q;3.Q;.NR;
24014df8:	3b52b2c0 3b5306a3 3b535a86 3b53ae68     ..R;..S;.ZS;h.S;
24014e08:	3b54024b 3b5466f5 3b54bad8 3b550ebb     K.T;.fT;..T;..U;
24014e18:	3b55629e 3b55b680 3b561b2a 3b566f0d     .bU;..U;*.V;.oV;
24014e28:	3b56c2f0 3b5716d3 3b577b7c 3b57cf5f     ..V;..W;|{W;_.W;
24014e38:	3b582342 3b5887ec 3b58dbcf 3b592fb2     B#X;..X;..X;./Y;
24014e48:	3b59945b 3b59e83e 3b5a3c21 3b5aa0cb     [.Y;>.Y;!<Z;..Z;
24014e58:	3b5af4ae 3b5b4891 3b5bad3a 3b5c011d     ..Z;.H[;:.[;..\;
24014e68:	3b5c65c7 3b5cb9aa 3b5d0d8d 3b5d7236     .e\;..\;..];6r];
24014e78:	3b5dc619 3b5e2ac3 3b5e7ea6 3b5ee350     ..];.*^;.~^;P.^;
24014e88:	3b5f3733 3b5f9bdc 3b5fefbf 3b605469     37_;.._;.._;iT`;
24014e98:	3b60a84c 3b610cf6 3b6160d9 3b61c582     L.`;..a;.`a;..a;
24014ea8:	3b621965 3b627e0f 3b62d1f2 3b63369c     e.b;.~b;..b;.6c;
24014eb8:	3b638a7e 3b63ef28 3b6453d2 3b64a7b5     ~.c;(.c;.Sd;..d;
24014ec8:	3b650c5f 3b656042 3b65c4eb 3b662995     _.e;B`e;..e;.)f;
24014ed8:	3b667d78 3b66e222 3b6746cc 3b679aae     x}f;".f;.Fg;..g;
24014ee8:	3b67ff58 3b686402 3b68b7e5 3b691c8f     X.g;.dh;..h;..i;
24014ef8:	3b698138 3b69e5e2 3b6a39c5 3b6a9e6f     8.i;..i;.9j;o.j;
24014f08:	3b6b0319 3b6b67c3 3b6bbba5 3b6c204f     ..k;.gk;..k;O l;
24014f18:	3b6c84f9 3b6ce9a3 3b6d4e4d 3b6da22f     ..l;..l;MNm;/.m;
24014f28:	3b6e06d9 3b6e6b83 3b6ed02d 3b6f34d7     ..n;.kn;-.n;.4o;
24014f38:	3b6f9980 3b6ffe2a 3b7062d4 3b70b6b7     ..o;*.o;.bp;..p;
24014f48:	3b711b61 3b71800a 3b71e4b4 3b72495e     a.q;..q;..q;^Ir;
24014f58:	3b72ae08 3b7312b2 3b73775c 3b73dc05     ..r;..s;\ws;..s;
24014f68:	3b7440af 3b74a559 3b750a03 3b756ead     .@t;Y.t;..u;.nu;
24014f78:	3b75d356 3b763800 3b769caa 3b770154     V.u;.8v;..v;T.w;
24014f88:	3b7765fe 3b77caa7 3b782f51 3b7893fb     .ew;..w;Q/x;..x;
24014f98:	3b79096c 3b796e16 3b79d2bf 3b7a3769     l.y;.ny;..y;i7z;
24014fa8:	3b7a9c13 3b7b00bd 3b7b6567 3b7bdad7     ..z;..{;ge{;..{;
24014fb8:	3b7c3f81 3b7ca42b 3b7d08d5 3b7d6d7f     .?|;+.|;..};.m};
24014fc8:	3b7de2ef 3b7e4799 3b7eac43 3b7f10ed     ..};.G~;C.~;...;
24014fd8:	3b7f865d 3b7feb07 3b8027d9 3b805a2d     ]..;...;.'.;-Z.;
24014fe8:	3b8094e6 3b80c73b 3b80f990 3b813448     ...;;..;...;H4.;
24014ff8:	3b81669d 3b8198f2 3b81d3aa 3b8205ff     .f.;...;...;...;
24015008:	3b8240b8 3b82730c 3b82a561 3b82e01a     .@.;.s.;a..;...;
24015018:	3b83126f 3b834d27 3b837f7c 3b83b1d1     o..;'M.;|..;...;
24015028:	3b83ec89 3b841ede 3b845996 3b848beb     ...;...;.Y.;...;
24015038:	3b84c6a4 3b84f8f9 3b8533b1 3b856e69     ...;...;.3.;in.;
24015048:	3b85a0be 3b85db77 3b860dcc 3b864884     ...;w..;...;.H.;
24015058:	3b867ad9 3b86b591 3b86f04a 3b87229f     .z.;...;J..;.".;
24015068:	3b875d57 3b87980f 3b87ca64 3b88051d     W].;...;d..;...;
24015078:	3b883fd5 3b88722a 3b88ace2 3b88e79b     .?.;*r.;...;...;
24015088:	3b8919f0 3b8954a8 3b898f60 3b89ca19     ...;.T.;`..;...;
24015098:	3b89fc6e 3b8a3726 3b8a71de 3b8aac97     n..;&7.;.q.;...;
240150a8:	3b8adeec 3b8b19a4 3b8b545c 3b8b8f15     ...;...;\T.;...;
240150b8:	3b8bc9cd 3b8c0486 3b8c3f3e 3b8c7193     ...;...;>?.;.q.;
240150c8:	3b8cac4b 3b8ce704 3b8d21bc 3b8d5c74     K..;...;.!.;t\.;
240150d8:	3b8d972d 3b8dd1e5 3b8e0c9e 3b8e4756     -..;...;...;VG.;
240150e8:	3b8e820e 3b8ebcc7 3b8ef77f 3b8f3238     ...;...;...;82.;
240150f8:	3b8f6cf0 3b8fa7a8 3b8fe261 3b901d19     .l.;...;a..;...;
24015108:	3b9057d1 3b90928a 3b90cd42 3b91105e     .W.;...;B..;^..;
24015118:	3b914b16 3b9185cf 3b91c087 3b91fb40     .K.;...;...;@..;
24015128:	3b9235f8 3b9270b0 3b92b3cc 3b92ee85     .5.;.p.;...;...;
24015138:	3b93293d 3b9363f5 3b93a711 3b93e1ca     =).;.c.;...;...;
24015148:	3b941c82 3b94573a 3b949a56 3b94d50f     ...;:W.;V..;...;
24015158:	3b950fc7 3b954a80 3b958d9b 3b95c854     ...;.J.;...;T..;
24015168:	3b960b70 3b964628 3b9680e0 3b96c3fc     p..;(F.;...;...;
24015178:	3b96feb5 3b97396d 3b977c89 3b97b741     ...;m9.;.|.;A..;
24015188:	3b97fa5d 3b983516 3b987831 3b98b2ea     ]..;.5.;1x.;...;
24015198:	3b98f606 3b9930be 3b9973da 3b99ae92     ...;.0.;.s.;...;
240151a8:	3b99f1ae 3b9a2c67 3b9a6f82 3b9ab29e     ...;g,.;.o.;...;
240151b8:	3b9aed57 3b9b3073 3b9b6b2b 3b9bae47     W..;s0.;+k.;G..;
240151c8:	3b9bf163 3b9c2c1b 3b9c6f37 3b9cb253     c..;.,.;7o.;S..;
240151d8:	3b9ced0b 3b9d3027 3b9d7343 3b9dadfb     ...;'0.;Cs.;...;
240151e8:	3b9df117 3b9e3433 3b9e774f 3b9eba6b     ...;34.;Ow.;k..;
240151f8:	3b9ef523 3b9f383f 3b9f7b5b 3b9fbe77     #..;?8.;[{.;w..;
24015208:	3ba00193 3ba03c4b 3ba07f67 3ba0c283     ...;K<.;g..;...;
24015218:	3ba1059f 3ba148bb 3ba18bd6 3ba1cef2     ...;.H.;...;...;
24015228:	3ba2120e 3ba2552a 3ba29846 3ba2db62     ...;*U.;F..;b..;
24015238:	3ba31e7e 3ba36199 3ba3a4b5 3ba3e7d1     ~..;.a.;...;...;
24015248:	3ba42aed 3ba46e09 3ba4b125 3ba4f441     .*.;.n.;%..;A..;
24015258:	3ba5375d 3ba57a78 3ba5bd94 3ba60914     ]7.;xz.;...;...;
24015268:	3ba64c30 3ba68f4b 3ba6d267 3ba71583     0L.;K..;g..;...;
24015278:	3ba7589f 3ba7a41e 3ba7e73a 3ba82a56     .X.;...;:..;V*.;
24015288:	3ba86d72 3ba8b8f1 3ba8fc0d 3ba93f29     rm.;...;...;)?.;
24015298:	3ba98aa8 3ba9cdc4 3baa10e0 3baa5c5f     ...;...;...;_\.;
240152a8:	3baa9f7b 3baae297 3bab2e17 3bab7132     {..;...;...;2q.;
240152b8:	3babbcb2 3babffce 3bac42ea 3bac8e69     ...;...;.B.;i..;
240152c8:	3bacd185 3bad1d04 3bad6020 3badab9f     ...;...; `.;...;
240152d8:	3badeebb 3bae3a3b 3bae7d56 3baec8d6     ...;;:.;V}.;...;
240152e8:	3baf1455 3baf5771 3bafa2f0 3bafe60c     U..;qW.;...;...;
240152f8:	3bb0318c 3bb07d0b 3bb0c027 3bb10ba6     .1.;.}.;'..;...;
24015308:	3bb15726 3bb19a41 3bb1e5c1 3bb23140     &W.;A..;...;@1.;
24015318:	3bb27cbf 3bb2bfdb 3bb30b5b 3bb356da     .|.;...;[..;.V.;
24015328:	3bb3a259 3bb3edd9 3bb430f5 3bb47c74     Y..;...;.0.;t|.;
24015338:	3bb4c7f3 3bb51373 3bb55ef2 3bb5aa71     ...;s..;.^.;q..;
24015348:	3bb5f5f1 3bb64170 3bb68cef 3bb6d86f     ...;pA.;...;o..;
24015358:	3bb723ee 3bb76f6d 3bb7baed 3bb8066c     .#.;mo.;...;l..;
24015368:	3bb851ec 3bb89d6b 3bb8e8ea 3bb9346a     .Q.;k..;...;j4.;
24015378:	3bb97fe9 3bb9cb68 3bba16e8 3bba6267     ...;h..;...;gb.;
24015388:	3bbaade6 3bbb01c9 3bbb4d49 3bbb98c8     ...;...;IM.;...;
24015398:	3bbbe447 3bbc2fc7 3bbc83a9 3bbccf29     G..;./.;...;)..;
240153a8:	3bbd1aa8 3bbd6627 3bbdba0a 3bbe058a     ...;'f.;...;...;
240153b8:	3bbe5109 3bbea4ec 3bbef06b 3bbf444e     .Q.;...;k..;ND.;
240153c8:	3bbf8fcd 3bbfdb4d 3bc02f30 3bc07aaf     ...;M..;0/.;.z.;
240153d8:	3bc0ce92 3bc11a11 3bc16df4 3bc1b973     ...;...;.m.;s..;
240153e8:	3bc20d56 3bc258d6 3bc2acb8 3bc2f838     V..;.X.;...;8..;
240153f8:	3bc34c1b 3bc3979a 3bc3eb7d 3bc43f60     .L.;...;}..;`?.;
24015408:	3bc48adf 3bc4dec2 3bc532a5 3bc57e24     ...;...;.2.;$~.;
24015418:	3bc5d207 3bc625ea 3bc67169 3bc6c54c     ...;.%.;iq.;L..;
24015428:	3bc7192f 3bc76d11 3bc7b891 3bc80c74     /..;.m.;...;t..;
24015438:	3bc86057 3bc8b439 3bc9081c 3bc95bff     W`.;9..;...;.[.;
24015448:	3bc9afe2 3bc9fb61 3bca4f44 3bcaa327     ...;a..;DO.;'..;
24015458:	3bcaf70a 3bcb4aed 3bcb9ecf 3bcbf2b2     ...;.J.;...;...;
24015468:	3bcc4695 3bcc9a78 3bccee5b 3bcd423e     .F.;x..;[..;>B.;
24015478:	3bcd9620 3bcdf267 3bce464a 3bce9a2c      ..;g..;JF.;,..;
24015488:	3bceee0f 3bcf41f2 3bcf95d5 3bcfe9b8     ...;.A.;...;...;
24015498:	3bd045fe 3bd099e1 3bd0edc4 3bd141a7     .E.;...;...;.A.;
240154a8:	3bd19ded 3bd1f1d0 3bd245b3 3bd2a1f9     ...;...;.E.;...;
240154b8:	3bd2f5dc 3bd349bf 3bd3a605 3bd3f9e8     ...;.I.;...;...;
240154c8:	3bd44dcb 3bd4aa11 3bd4fdf4 3bd55a3a     .M.;...;...;:Z.;
240154d8:	3bd5ae1d 3bd60a63 3bd65e46 3bd6ba8c     ...;c..;F^.;...;
240154e8:	3bd70e6f 3bd76ab6 3bd7be98 3bd81adf     o..;.j.;...;...;
240154f8:	3bd87725 3bd8cb08 3bd9274e 3bd98394     %w.;...;N'.;...;
24015508:	3bd9d777 3bda33be 3bda9004 3bdae3e7     w..;.3.;...;...;
24015518:	3bdb402d 3bdb9c73 3bdbf8ba 3bdc5500     -@.;s..;...;.U.;
24015528:	3bdca8e3 3bdd0529 3bdd6170 3bddbdb6     ...;)..;pa.;...;
24015538:	3bde19fc 3bde7642 3bded289 3bdf2ecf     ...;Bv.;...;...;
24015548:	3bdf8b15 3bdfdef8 3be03b3f 3be09785     ...;...;?;.;...;
24015558:	3be0fc2f 3be15875 3be1b4bb 3be21102     /..;uX.;...;...;
24015568:	3be26d48 3be2c98e 3be325d5 3be3821b     Hm.;...;.%.;...;
24015578:	3be3de61 3be4430b 3be49f51 3be4fb98     a..;.C.;Q..;...;
24015588:	3be557de 3be5bc88 3be618ce 3be67514     .W.;...;...;.u.;
24015598:	3be6d15b 3be73605 3be7924b 3be7ee91     [..;.6.;K..;...;
240155a8:	3be8533b 3be8af81 3be9142b 3be97072     ;S.;...;+..;rp.;
240155b8:	3be9d51b 3bea3162 3bea960b 3beaf252     ...;b1.;...;R..;
240155c8:	3beb56fc 3bebb342 3bec17ec 3bec7432     .V.;B..;...;2t.;
240155d8:	3becd8dc 3bed3d86 3bed99cc 3bedfe76     ...;.=.;...;v..;
240155e8:	3bee6320 3beebf66 3bef2410 3bef88b9      c.;f..;.$.;...;
240155f8:	3befed63 3bf049aa 3bf0ae53 3bf112fd     c..;.I.;S..;...;
24015608:	3bf177a7 3bf1dc51 3bf23897 3bf29d41     .w.;Q..;.8.;A..;
24015618:	3bf301eb 3bf36695 3bf3cb3e 3bf42fe8     ...;.f.;>..;./.;
24015628:	3bf49492 3bf4f93c 3bf55de6 3bf5c28f     ...;<..;.].;...;
24015638:	3bf62739 3bf68be3 3bf6f08d 3bf75d9a     9'.;...;...;.].;
24015648:	3bf7c244 3bf826ee 3bf88b97 3bf8f041     D..;.&.;...;A..;
24015658:	3bf95d4f 3bf9c1f8 3bfa26a2 3bfa8b4c     O].;...;.&.;L..;
24015668:	3bfaf859 3bfb5d03 3bfbc1ad 3bfc2eba     Y..;.].;...;...;
24015678:	3bfc9364 3bfcf80e 3bfd651b 3bfdc9c5     d..;...;.e.;...;
24015688:	3bfe36d2 3bfe9b7c 3bff0889 3bff6d33     .6.;|..;...;3m.;
24015698:	3bffda40 3c001f75 3c0055fc 3c008c82     @..;u..<.U.<...<
240156a8:	3c00bed7 3c00f55e 3c012be5 3c015e39     ...<^..<.+.<9^.<
240156b8:	3c0194c0 3c01cb47 3c01fd9c 3c023422     ...<G..<...<"4.<
240156c8:	3c026aa9 3c02a130 3c02d7b6 3c030a0b     .j.<0..<...<...<
240156d8:	3c034092 3c037718 3c03ad9f 3c03e426     .@.<.w.<...<&..<
240156e8:	3c041aac 3c045133 3c0487ba 3c04be40     ...<3Q.<...<@..<
240156f8:	3c04f4c7 3c052b4e 3c0561d4 3c05985b     ...<N+.<.a.<[..<
24015708:	3c05cee1 3c060568 3c064021 3c0676a7     ...<h..<!@.<.v.<
24015718:	3c06ad2e 3c06e3b4 3c071a3b 3c0754f3     ...<...<;..<.T.<
24015728:	3c078b7a 3c07c201 3c07fcb9 3c083340     z..<...<...<@3.<
24015738:	3c0869c6 3c08a47f 3c08db05 3c0915be     .i.<...<...<...<
24015748:	3c094c44 3c0986fd 3c09bd84 3c09f83c     DL.<...<...<<..<
24015758:	3c0a2ec3 3c0a697b 3c0aa002 3c0adaba     ...<{i.<...<...<
24015768:	3c0b1572 3c0b4bf9 3c0b86b1 3c0bc16a     r..<.K.<...<j..<
24015778:	3c0bf7f0 3c0c32a9 3c0c6d61 3c0ca81a     ...<.2.<am.<...<
24015788:	3c0ce2d2 3c0d1959 3c0d5411 3c0d8ec9     ...<Y..<.T.<...<
24015798:	3c0dc982 3c0e043a 3c0e3ef3 3c0e79ab     ...<:..<.>.<.y.<
240157a8:	3c0eb463 3c0eef1c 3c0f29d4 3c0f648c     c..<...<.).<.d.<
240157b8:	3c0f9f45 3c0fd9fd 3c1014b6 3c104f6e     E..<...<...<nO.<
240157c8:	3c108e58 3c10c910 3c1103c9 3c113e81     X..<...<...<.>.<
240157d8:	3c11793a 3c11b824 3c11f2dc 3c122d95     :y.<$..<...<.-.<
240157e8:	3c126c7f 3c12a737 3c12e621 3c1320da     .l.<7..<!..<. .<
240157f8:	3c135b92 3c139a7c 3c13d534 3c14141f     .[.<|..<4..<...<
24015808:	3c144ed7 3c148dc1 3c14ccab 3c150764     .N.<...<...<d..<
24015818:	3c15464e 3c158538 3c15bff0 3c15feda     NF.<8..<...<...<
24015828:	3c163dc5 3c16787d 3c16b767 3c16f651     .=.<}x.<g..<Q..<
24015838:	3c17353b 3c177425 3c17b310 3c17edc8     ;5.<%t.<...<...<
24015848:	3c182cb2 3c186b9c 3c18aa86 3c18e970     .,.<.k.<...<p..<
24015858:	3c19285b 3c196745 3c19a62f 3c19e519     [(.<Eg.</..<...<
24015868:	3c1a2835 3c1a671f 3c1aa609 3c1ae4f3     5(.<.g.<...<...<
24015878:	3c1b23dd 3c1b66f9 3c1ba5e3 3c1be4cd     .#.<.f.<...<...<
24015888:	3c1c23b8 3c1c66d3 3c1ca5be 3c1ce4a8     .#.<.f.<...<...<
24015898:	3c1d27c4 3c1d66ae 3c1da9ca 3c1de8b4     .'.<.f.<...<...<
240158a8:	3c1e2bd0 3c1e6aba 3c1eadd6 3c1eecc0     .+.<.j.<...<...<
240158b8:	3c1f2fdc 3c1f72f7 3c1fb1e2 3c1ff4fd     ./.<.r.<...<...<
240158c8:	3c203819 3c207703 3c20ba1f 3c20fd3b     .8 <.w <.. <;. <
240158d8:	3c214057 3c218373 3c21c25d 3c220579     W@!<s.!<].!<y."<
240158e8:	3c224895 3c228bb1 3c22cecd 3c2311e8     .H"<.."<.."<..#<
240158f8:	3c235504 3c239820 3c23db3c 3c241e58     .U#< .#<<.#<X.$<
24015908:	3c2465a5 3c24a8c1 3c24ebdd 3c252ef9     .e$<..$<..$<..%<
24015918:	3c257215 3c25b963 3c25fc7e 3c263f9a     .r%<c.%<~.%<.?&<
24015928:	3c2682b6 3c26ca04 3c270d20 3c27546d     ..&<..&< .'<mT'<
24015938:	3c279789 3c27daa5 3c2821f3 3c28650e     ..'<..'<.!(<.e(<
24015948:	3c28ac5c 3c28f3aa 3c2936c6 3c297e13     \.(<..(<.6)<.~)<
24015958:	3c29c12f 3c2a087d 3c2a4fca 3c2a92e6     /.)<}.*<.O*<..*<
24015968:	3c2ada34 3c2b2181 3c2b68cf 3c2bb01d     4.*<.!+<.h+<..+<
24015978:	3c2bf76a 3c2c3a86 3c2c81d4 3c2cc921     j.+<.:,<..,<!.,<
24015988:	3c2d106f 3c2d57bc 3c2d9f0a 3c2de658     o.-<.W-<..-<X.-<
24015998:	3c2e2da5 3c2e74f3 3c2ec072 3c2f07c0     .-.<.t.<r..<../<
240159a8:	3c2f4f0e 3c2f965b 3c2fdda9 3c302928     .O/<[./<../<()0<
240159b8:	3c307076 3c30b7c3 3c310343 3c314a90     vp0<..0<C.1<.J1<
240159c8:	3c3191de 3c31dd5d 3c3224ab 3c32702a     ..1<].1<.$2<*p2<
240159d8:	3c32b778 3c3302f7 3c334e77 3c3395c4     x.2<..3<wN3<..3<
240159e8:	3c33e143 3c342891 3c347410 3c34bf90     C.3<.(4<.t4<..4<
240159f8:	3c350b0f 3c35525d 3c359ddc 3c35e95b     ..5<]R5<..5<[.5<
24015a08:	3c3634db 3c36805a 3c36cbda 3c371759     .46<Z.6<..6<Y.7<
24015a18:	3c3762d8 3c37ae58 3c37f9d7 3c384556     .b7<X.7<..7<VE8<
24015a28:	3c3890d6 3c38dc55 3c3927d4 3c397354     ..8<U.8<.'9<Ts9<
24015a38:	3c39c305 3c3a0e84 3c3a5a04 3c3aa583     ..9<..:<.Z:<..:<
24015a48:	3c3af534 3c3b40b3 3c3b8c33 3c3bdbe4     4.:<.@;<3.;<..;<
24015a58:	3c3c2763 3c3c7714 3c3cc294 3c3d1245     c'<<.w<<..<<E.=<
24015a68:	3c3d5dc4 3c3dad75 3c3dfd26 3c3e48a6     .]=<u.=<&.=<.H><
24015a78:	3c3e9857 3c3ee808 3c3f3387 3c3f8338     W.><..><.3?<8.?<
24015a88:	3c3fd2e9 3c40229a 3c40724b 3c40c1fd     ..?<."@<Kr@<..@<
24015a98:	3c4111ae 3c41615f 3c41b110 3c4200c1     ..A<_aA<..A<..B<
24015aa8:	3c425072 3c42a023 3c42efd4 3c433f85     rPB<#.B<..B<.?C<
24015ab8:	3c438f36 3c43dee8 3c4432ca 3c44827b     6.C<..C<.2D<{.D<
24015ac8:	3c44d22d 3c4521de 3c4575c0 3c45c572     -.D<.!E<.uE<r.E<
24015ad8:	3c461954 3c466905 3c46bce8 3c470c99     T.F<.iF<..F<..G<
24015ae8:	3c47607c 3c47b02d 3c480410 3c4857f3     |`G<-.G<..H<.WH<
24015af8:	3c48a7a4 3c48fb87 3c494f6a 3c499f1b     ..H<..H<jOI<..I<
24015b08:	3c49f2fe 3c4a46e1 3c4a9ac3 3c4aeea6     ..I<.FJ<..J<..J<
24015b18:	3c4b4289 3c4b966c 3c4bea4f 3c4c3e32     .BK<l.K<O.K<2>L<
24015b28:	3c4c9214 3c4ce5f7 3c4d39da 3c4d8dbd     ..L<..L<.9M<..M<
24015b38:	3c4de1a0 3c4e39b4 3c4e8d97 3c4ee17a     ..M<.9N<..N<z.N<
24015b48:	3c4f355d 3c4f8d71 3c4fe154 3c503969     ]5O<q.O<T.O<i9P<
24015b58:	3c508d4c 3c50e12f 3c513943 3c519158     L.P</.P<C9Q<X.Q<
24015b68:	3c51e53b 3c523d4f 3c529132 3c52e947     ;.Q<O=R<2.R<G.R<
24015b78:	3c53415b 3c539970 3c53ed52 3c544567     [AS<p.S<R.S<gET<
24015b88:	3c549d7c 3c54f590 3c554da5 3c55a5b9     |.T<..T<.MU<..U<
24015b98:	3c55fdce 3c5655e3 3c56adf7 3c57060c     ..U<.UV<..V<..W<
24015ba8:	3c575e20 3c57b635 3c580e49 3c586a90      ^W<5.W<I.X<.jX<
24015bb8:	3c58c2a4 3c591ab9 3c5972cd 3c59cf14     ..X<..Y<.rY<..Y<
24015bc8:	3c5a2728 3c5a836f 3c5adb83 3c5b37ca     ('Z<o.Z<..Z<.7[<
24015bd8:	3c5b8fde 3c5bec25 3c5c4439 3c5ca07f     ..[<%.[<9D\<..\<
24015be8:	3c5cfcc6 3c5d54da 3c5db121 3c5e0d67     ..\<.T]<!.]<g.^<
24015bf8:	3c5e69ad 3c5ec1c2 3c5f1e08 3c5f7a4e     .i^<..^<.._<Nz_<
24015c08:	3c5fd695 3c6032db 3c608f21 3c60eb68     .._<.2`<!.`<h.`<
24015c18:	3c6147ae 3c61a3f4 3c62046c 3c6260b3     .Ga<..a<l.b<.`b<
24015c28:	3c62bcf9 3c63193f 3c6379b7 3c63d5fe     ..b<?.c<.yc<..c<
24015c38:	3c643244 3c6492bc 3c64ef03 3c654f7b     D2d<..d<..d<{Oe<
24015c48:	3c65abc1 3c660c39 3c66687f 3c66c8f7     ..e<9.f<.hf<..f<
24015c58:	3c67296f 3c6785b6 3c67e62e 3c6846a6     o)g<..g<..g<.Fh<
24015c68:	3c68a71e 3c690364 3c6963dc 3c69c454     ..h<d.i<.ci<T.i<
24015c78:	3c6a24cc 3c6a8544 3c6ae5bd 3c6b4635     .$j<D.j<..j<5Fk<
24015c88:	3c6ba6ad 3c6c0b56 3c6c6bcf 3c6ccc47     ..k<V.l<.kl<G.l<
24015c98:	3c6d2cbf 3c6d9168 3c6df1e1 3c6e5259     .,m<h.m<..m<YRn<
24015ca8:	3c6eb702 3c6f177a 3c6f7c24 3c6fdc9c     ..n<z.o<$|o<..o<
24015cb8:	3c704146 3c70a1be 3c710668 3c716b12     FAp<..p<h.q<.kq<
24015cc8:	3c71cb8a 3c723034 3c7294dd 3c72f987     ..q<40r<..r<..r<
24015cd8:	3c735e31 3c73bea9 3c742353 3c7487fd     1^s<..s<S#t<..t<
24015ce8:	3c74eca7 3c755150 3c75b5fa 3c761ed6     ..t<PQu<..u<..v<
24015cf8:	3c76837f 3c76e829 3c774cd3 3c77b5af     ..v<).v<.Lw<..w<
24015d08:	3c781a58 3c787f02 3c78e7de 3c794c88     X.x<..x<..x<.Ly<
24015d18:	3c79b563 3c7a1a0d 3c7a82e8 3c7ae792     c.y<..z<..z<..z<
24015d28:	3c7b506e 3c7bb949 3c7c1df3 3c7c86cf     nP{<I.{<..|<..|<
24015d38:	3c7cefaa 3c7d5886 3c7dc161 3c7e2a3d     ..|<.X}<a.}<=*~<
24015d48:	3c7e9318 3c7efbf4 3c7f64d0 3c7fcdab     ..~<..~<.d.<...<
24015d58:	3c801b43 3c804fb1 3c80841f 3c80b88d     C..<.O.<...<...<
24015d68:	3c80ef13 3c812381 3c8157ef 3c818e75     ...<.#.<.W.<u..<
24015d78:	3c81c2e3 3c81f96a 3c822dd8 3c82645e     ...<j..<.-.<^d.<
24015d88:	3c8298cc 3c82cf53 3c8305d9 3c833c60     ...<S..<...<`<.<
24015d98:	3c8370ce 3c83a754 3c83dddb 3c841462     .p.<T..<...<b..<
24015da8:	3c844ae8 3c84816f 3c84b7f6 3c84ee7c     .J.<o..<...<|..<
24015db8:	3c852503 3c855b8a 3c859210 3c85cab0     .%.<.[.<...<...<
24015dc8:	3c860136 3c8637bd 3c86705d 3c86a6e3     6..<.7.<]p.<...<
24015dd8:	3c86dd6a 3c871609 3c874c90 3c87852f     j..<...<.L.</..<
24015de8:	3c87bdcf 3c87f456 3c882cf5 3c886595     ...<V..<.,.<.e.<
24015df8:	3c889e34 3c88d4bb 3c890d5a 3c8945fa     4..<...<Z..<.E.<
24015e08:	3c897e99 3c89b739 3c89efd8 3c8a2878     .~.<9..<...<x(.<
24015e18:	3c8a6117 3c8a9bd0 3c8ad46f 3c8b0d0f     .a.<...<o..<...<
24015e28:	3c8b45ae 3c8b8067 3c8bb906 3c8bf3bf     .E.<g..<...<...<
24015e38:	3c8c2c5e 3c8c6717 3c8c9fb6 3c8cda6e     ^,.<.g.<...<n..<
24015e48:	3c8d1527 3c8d4dc6 3c8d887f 3c8dc337     '..<.M.<...<7..<
24015e58:	3c8dfdf0 3c8e38a8 3c8e7360 3c8eae19     ...<.8.<`s.<...<
24015e68:	3c8ee8d1 3c8f2389 3c8f5e42 3c8f98fa     ...<.#.<B^.<...<
24015e78:	3c8fd3b3 3c900e6b 3c904b3c 3c9085f5     ...<k..<<K.<...<
24015e88:	3c90c0ad 3c90fd7e 3c913837 3c917508     ...<~..<78.<.u.<
24015e98:	3c91afc0 3c91ec92 3c922963 3c92641b     ...<...<c).<.d.<
24015ea8:	3c92a0ec 3c92ddbe 3c931a8f 3c935760     ...<...<...<`W.<
24015eb8:	3c939431 3c93d103 3c940dd4 3c944aa5     1..<...<...<.J.<
24015ec8:	3c948777 3c94c448 3c950119 3c954003     w..<H..<...<.@.<
24015ed8:	3c957cd4 3c95b9a6 3c95f890 3c963561     .|.<...<...<a5.<
24015ee8:	3c96744b 3c96b11c 3c96f007 3c972cd8     Kt.<...<...<.,.<
24015ef8:	3c976bc2 3c97aaac 3c97e996 3c982880     .k.<...<...<.(.<
24015f08:	3c986552 3c98a43c 3c98e326 3c992210     Re.<<..<&..<.".<
24015f18:	3c996313 3c99a1fd 3c99e0e7 3c9a1fd1     .c.<...<...<...<
24015f28:	3c9a5ebb 3c9a9fbe 3c9adea9 3c9b1d93     .^.<...<...<...<
24015f38:	3c9b5e96 3c9b9d80 3c9bde83 3c9c1f86     .^.<...<...<...<
24015f48:	3c9c5e70 3c9c9f73 3c9ce076 3c9d2179     p^.<s..<v..<y!.<
24015f58:	3c9d6063 3c9da166 3c9de269 3c9e236c     c`.<f..<i..<l#.<
24015f68:	3c9e646f 3c9ea78b 3c9ee88e 3c9f2991     od.<...<...<.).<
24015f78:	3c9f6a94 3c9fadb0 3c9feeb3 3ca02fb6     .j.<...<...<./.<
24015f88:	3ca072d2 3ca0b3d5 3ca0f6f1 3ca13a0c     .r.<...<...<.:.<
24015f98:	3ca17b0f 3ca1be2b 3ca20147 3ca24463     .{.<+..<G..<cD.<
24015fa8:	3ca28566 3ca2c882 3ca30b9e 3ca34eba     f..<...<...<.N.<
24015fb8:	3ca391d5 3ca3d70a 3ca41a26 3ca45d42     ...<...<&..<B].<
24015fc8:	3ca4a05e 3ca4e593 3ca528ae 3ca56bca     ^..<...<.(.<.k.<
24015fd8:	3ca5b0ff 3ca5f41b 3ca63950 3ca67e84     ...<...<P9.<.~.<
24015fe8:	3ca6c1a0 3ca706d5 3ca74c0a 3ca7913f     ...<...<.L.<?..<
24015ff8:	3ca7d673 3ca81ba8 3ca860dd 3ca8a611     s..<...<.`.<...<
24016008:	3ca8eb46 3ca9307b 3ca975b0 3ca9bcfd     F..<{0.<.u.<...<
24016018:	3caa0232 3caa4767 3caa8eb4 3caad3e9     2..<gG.<...<...<
24016028:	3cab1b37 3cab6284 3caba7b9 3cabef07     7..<.b.<...<...<
24016038:	3cac3654 3cac7da2 3cacc4f0 3cad0a24     T6.<.}.<...<$..<
24016048:	3cad5172 3cad9ad8 3cade226 3cae2974     rQ.<...<&..<t).<
24016058:	3cae70c1 3caeb80f 3caf0175 3caf48c3     .p.<...<u..<.H.<
24016068:	3caf9011 3cafd977 3cb020c5 3cb06a2b     ...<w..<. .<+j.<
24016078:	3cb0b392 3cb0fadf 3cb14446 3cb18dac     ...<...<FD.<...<
24016088:	3cb1d713 3cb22079 3cb269e0 3cb2b346     ...<y .<.i.<F..<
24016098:	3cb2fcad 3cb34613 3cb38f7a 3cb3daf9     ...<.F.<z..<...<
240160a8:	3cb4245f 3cb46dc6 3cb4b945 3cb502ac     _$.<.m.<E..<...<
240160b8:	3cb54e2b 3cb599aa 3cb5e311 3cb62e90     +N.<...<...<...<
240160c8:	3cb67a10 3cb6c58f 3cb7110e 3cb75a75     .z.<...<...<uZ.<
240160d8:	3cb7a5f4 3cb7f38c 3cb83f0c 3cb88a8b     ...<...<.?.<...<
240160e8:	3cb8d60a 3cb9218a 3cb96f22 3cb9baa1     ...<.!.<"o.<...<
240160f8:	3cba083a 3cba53b9 3cbaa151 3cbaeee9     :..<.S.<Q..<...<
24016108:	3cbb3a69 3cbb8801 3cbbd599 3cbc2331     i:.<...<...<1#.<
24016118:	3cbc70ca 3cbcbe62 3cbd0bfa 3cbd5992     .p.<b..<...<.Y.<
24016128:	3cbda72a 3cbdf6dc 3cbe4474 3cbe920c     *..<...<tD.<...<
24016138:	3cbee1bd 3cbf2f55 3cbf7f06 3cbfcc9f     ...<U/.<...<...<
24016148:	3cc01c50 3cc06c01 3cc0bbb2 3cc1094a     P..<.l.<...<J..<
24016158:	3cc158fb 3cc1a8ac 3cc1f85d 3cc24a27     .X.<...<]..<'J.<
24016168:	3cc299d9 3cc2e98a 3cc3393b 3cc38b05     ...<...<;9.<...<
24016178:	3cc3dab6 3cc42c80 3cc47c31 3cc4cdfb     ...<.,.<1|.<...<
24016188:	3cc51dac 3cc56f76 3cc5c140 3cc6130a     ...<vo.<@..<...<
24016198:	3cc664d4 3cc6b69e 3cc70868 3cc75a32     .d.<...<h..<2Z.<
240161a8:	3cc7abfc 3cc7fdc6 3cc84f90 3cc8a372     ...<...<.O.<r..<
240161b8:	3cc8f53c 3cc9491f 3cc99ae9 3cc9eecc     <..<.I.<...<...<
240161c8:	3cca42af 3cca9479 3ccae85c 3ccb3c3e     .B.<y..<\..<><.<
240161d8:	3ccb9021 3ccbe404 3ccc37e7 3ccc8bca     !..<...<.7.<...<
240161e8:	3cccdfad 3ccd35a8 3ccd898b 3ccddd6e     ...<.5.<...<n..<
240161f8:	3cce336a 3cce874d 3ccedd48 3ccf312b     j3.<M..<H..<+1.<
24016208:	3ccf8727 3ccfdd23 3cd0331e 3cd0891a     '..<#..<.3.<...<
24016218:	3cd0df16 3cd13511 3cd18b0d 3cd1e109     ...<.5.<...<...<
24016228:	3cd23704 3cd28f19 3cd2e515 3cd33b10     .7.<...<...<.;.<
24016238:	3cd39325 3cd3e921 3cd44135 3cd4994a     %..<!..<5A.<J..<
24016248:	3cd4f15e 3cd5475a 3cd59f6f 3cd5f783     ^..<ZG.<o..<...<
24016258:	3cd64f98 3cd6a7ad 3cd701da 3cd759ef     .O.<...<...<.Y.<
24016268:	3cd7b203 3cd80c31 3cd86445 3cd8bc5a     ...<1..<Ed.<Z..<
24016278:	3cd91687 3cd970b5 3cd9c8c9 3cda22f7     ...<.p.<...<.".<
24016288:	3cda7d24 3cdad752 3cdb317f 3cdb8bac     $}.<R..<.1.<...<
24016298:	3cdbe5da 3cdc4007 3cdc9c4e 3cdcf67b     ...<.@.<N..<{..<
240162a8:	3cdd52c1 3cddacef 3cde0935 3cde6363     .R.<...<5..<cc.<
240162b8:	3cdebfa9 3cdf1bef 3cdf7836 3cdfd263     ...<...<6x.<c..<
240162c8:	3ce02ea9 3ce08af0 3ce0e94f 3ce14595     ...<...<O..<.E.<
240162d8:	3ce1a1dc 3ce1fe22 3ce25c81 3ce2b8c7     ...<"..<.\.<...<
240162e8:	3ce31727 3ce3736d 3ce3d1cc 3ce4302b     '..<ms.<...<+0.<
240162f8:	3ce48e8a 3ce4ecea 3ce54b49 3ce5a9a8     ...<...<IK.<...<
24016308:	3ce60807 3ce66666 3ce6c4c6 3ce7253e     ...<ff.<...<>%.<
24016318:	3ce7839d 3ce7e415 3ce84274 3ce8a2ec     ...<...<tB.<...<
24016328:	3ce9014b 3ce961c3 3ce9c23b 3cea22b4     K..<.a.<;..<.".<
24016338:	3cea832c 3ceae3a4 3ceb441c 3ceba6ad     ,..<...<.D.<...<
24016348:	3cec0725 3cec679d 3cecca2e 3ced2aa6     %..<.g.<...<.*.<
24016358:	3ced8d37 3cedefc8 3cee5040 3ceeb2d1     7..<...<@P.<...<
24016368:	3cef1562 3cef77f2 3cefda83 3cf03d14     b..<.w.<...<.=.<
24016378:	3cf09fa5 3cf1044f 3cf166e0 3cf1cb8a     ...<O..<.f.<...<
24016388:	3cf22e1b 3cf292c5 3cf2f556 3cf359ff     ...<...<V..<.Y.<
24016398:	3cf3bea9 3cf42353 3cf487fd 3cf4eca7     ...<S#.<...<...<
240163a8:	3cf55150 3cf5b5fa 3cf61aa4 3cf68167     PQ.<...<...<g..<
240163b8:	3cf6e610 3cf74cd3 3cf7b17d 3cf81840     ...<.L.<}..<@..<
240163c8:	3cf87f02 3cf8e5c5 3cf94c88 3cf9b34a     ...<...<.L.<J..<
240163d8:	3cfa1a0d 3cfa80d0 3cfae792 3cfb4e55     ...<...<...<UN.<
240163e8:	3cfbb731 3cfc1df3 3cfc86cf 3cfced91     1..<...<...<...<
240163f8:	3cfd566d 3cfdbf48 3cfe2824 3cfe9100     mV.<H..<$(.<...<
24016408:	3cfef9db 3cff62b7 3cffcb92 3d001a37     ...<.b.<...<7..=
24016418:	3d004fb1 3d00841f 3d00b999 3d00ee07     .O.=...=...=...=
24016428:	3d012381 3d0158fb 3d018d69 3d01c2e3     .#.=.X.=i..=...=
24016438:	3d01f85d 3d022dd8 3d02645e 3d0299d9     ]..=.-.=^d.=...=
24016448:	3d02cf53 3d0305d9 3d033b54 3d0371da     S..=...=T;.=.q.=
24016458:	3d03a754 3d03dddb 3d041462 3d044ae8     T..=...=b..=.J.=
24016468:	3d04816f 3d04b7f6 3d04ee7c 3d052503     o..=...=|..=.%.=
24016478:	3d055c96 3d05931d 3d05cab0 3d060136     .\.=...=...=6..=
24016488:	3d0638c9 3d06705d 3d06a7f0 3d06de76     .8.=]p.=...=v..=
24016498:	3d071609 3d074ea9 3d07863c 3d07bdcf     ...=.N.=<..=...=
240164a8:	3d07f562 3d082e02 3d086595 3d089e34     b..=...=.e.=4..=
240164b8:	3d08d6d4 3d090e67 3d094706 3d097fa6     ...=g..=.G.=...=
240164c8:	3d09b845 3d09f0e5 3d0a2a91 3d0a6330     E..=...=.*.=0c.=
240164d8:	3d0a9bd0 3d0ad57c 3d0b0f28 3d0b47c7     ...=|..=(..=.G.=
240164e8:	3d0b8173 3d0bbb1f 3d0bf4cb 3d0c2e77     s..=...=...=w..=
240164f8:	3d0c6823 3d0ca1cf 3d0cdb7b 3d0d1633     #h.=...={..=3..=
24016508:	3d0d4fdf 3d0d8a98 3d0dc444 3d0dfefc     .O.=...=D..=...=
24016518:	3d0e39b4 3d0e746d 3d0eaf25 3d0ee9dd     .9.=mt.=%..=...=
24016528:	3d0f2496 3d0f5f4e 3d0f9b13 3d0fd5cb     .$.=N_.=...=...=
24016538:	3d101190 3d104c49 3d10880e 3d10c3d2     ...=IL.=...=...=
24016548:	3d10ff97 3d113b5c 3d117721 3d11b2e6     ...=\;.=!w.=...=
24016558:	3d11eeaa 3d122b7c 3d126741 3d12a412     ...=|+.=Ag.=...=
24016568:	3d12dfd7 3d131ca8 3d135979 3d13964a     ...=...=yY.=J..=
24016578:	3d13d31c 3d140fed 3d144cbe 3d148a9c     ...=...=.L.=...=
24016588:	3d14c76d 3d15043e 3d15421c 3d157ffa     m..=>..=.B.=...=
24016598:	3d15bdd7 3d15faa9 3d163886 3d167664     ...=...=.8.=dv.=
240165a8:	3d16b54e 3d16f32c 3d17310a 3d176ff4     N..=,..=.1.=.o.=
240165b8:	3d17add1 3d17ecbb 3d182ba6 3d186983     ...=...=.+.=.i.=
240165c8:	3d18a86d 3d18e758 3d192642 3d196638     m..=X..=B&.=8f.=
240165d8:	3d19a522 3d19e40d 3d1a2403 3d1a62ed     "..=...=.$.=.b.=
240165e8:	3d1aa2e4 3d1ae2da 3d1b22d1 3d1b62c7     ...=...=.".=.b.=
240165f8:	3d1ba2be 3d1be2b5 3d1c22ab 3d1c63ae     ...=...=.".=.c.=
24016608:	3d1ca3a5 3d1ce4a8 3d1d25ab 3d1d65a1     ...=...=.%.=.e.=
24016618:	3d1da6a4 3d1de7a7 3d1e28aa 3d1e6aba     ...=...=.(.=.j.=
24016628:	3d1eabbd 3d1eecc0 3d1f2ecf 3d1f6fd2     ...=...=...=.o.=
24016638:	3d1fb1e2 3d1ff3f1 3d203600 3d207810     ...=...=.6 =.x =
24016648:	3d20ba1f 3d20fc2f 3d213e3e 3d21815a     .. =/. =>>!=Z.!=
24016658:	3d21c369 3d220685 3d2249a1 3d228bb1     i.!=.."=.I"=.."=
24016668:	3d22cecd 3d2311e8 3d235504 3d23992d     .."=..#=.U#=-.#=
24016678:	3d23dc48 3d241f64 3d24638d 3d24a7b5     H.#=d.$=.c$=..$=
24016688:	3d24ead1 3d252ef9 3d257321 3d25b74a     ..$=..%=!s%=J.%=
24016698:	3d25fb72 3d2640a7 3d2684cf 3d26c8f7     r.%=.@&=..&=..&=
240166a8:	3d270e2c 3d275361 3d279896 3d27dcbe     ,.'=aS'=..'=..'=
240166b8:	3d2821f3 3d286834 3d28ad69 3d28f29d     .!(=4h(=i.(=..(=
240166c8:	3d2938de 3d297e13 3d29c454 3d2a0a96     .8)=.~)=T.)=..*=
240166d8:	3d2a4fca 3d2a960b 3d2adc4d 3d2b239a     .O*=..*=M.*=.#+=
240166e8:	3d2b69db 3d2bb01d 3d2bf76a 3d2c3eb8     .i+=..+=j.+=.>,=
240166f8:	3d2c84f9 3d2ccc47 3d2d1394 3d2d5ae2     ..,=G.,=..-=.Z-=
24016708:	3d2da22f 3d2dea89 3d2e31d7 3d2e7925     /.-=..-=.1.=%y.=
24016718:	3d2ec17f 3d2f09d9 3d2f5233 3d2f9a8d     ...=../=3R/=../=
24016728:	3d2fe2e7 3d302b41 3d30739b 3d30bd01     ../=A+0=.s0=..0=
24016738:	3d31055c 3d314ec2 3d31971c 3d31e083     \.1=.N1=..1=..1=
24016748:	3d3229e9 3d327350 3d32bcb6 3d330729     .)2=Ps2=..2=).3=
24016758:	3d33508f 3d339b02 3d33e469 3d342edc     .P3=..3=i.3=..4=
24016768:	3d34794f 3d34c3c2 3d350e34 3d3558a7     Oy4=..4=4.5=.X5=
24016778:	3d35a427 3d35ee9a 3d363a19 3d36848c     '.5=..5=.:6=..6=
24016788:	3d36d00b 3d371b8b 3d37670a 3d37b289     ..6=..7=.g7=..7=
24016798:	3d37fe09 3d384a94 3d389614 3d38e2a0     ..7=.J8=..8=..8=
240167a8:	3d392f2b 3d397aab 3d39c737 3d3a13c2     +/9=.z9=7.9=..:=
240167b8:	3d3a615b 3d3aade6 3d3afa72 3d3b480a     [a:=..:=r.:=.H;=
240167c8:	3d3b95a3 3d3be22e 3d3c2fc7 3d3c7d5f     ..;=..;=./<=_}<=
240167d8:	3d3ccaf7 3d3d199c 3d3d6734 3d3db5d9     ..<=..==4g==..==
240167e8:	3d3e0371 3d3e5215 3d3ea0ba 3d3eef5f     q.>=.R>=..>=_.>=
240167f8:	3d3f3e03 3d3f8ca8 3d3fdc59 3d402afe     .>?=..?=Y.?=.*@=
24016808:	3d407aaf 3d40c954 3d411905 3d4168b6     .z@=T.@=..A=.hA=
24016818:	3d41b867 3d420818 3d4258d6 3d42a887     g.A=..B=.XB=..B=
24016828:	3d42f944 3d4348f5 3d4399b3 3d43ea70     D.B=.HC=..C=p.C=
24016838:	3d443b2e 3d448cf8 3d44ddb5 3d452e73     .;D=..D=..D=s.E=
24016848:	3d45803d 3d45d207 3d4622c4 3d46748e     =.E=..E=."F=.tF=
24016858:	3d46c658 3d47192f 3d476af9 3d47bcc3     X.F=/.G=.jG=..G=
24016868:	3d480f99 3d48626f 3d48b546 3d49081c     ..H=obH=F.H=..I=
24016878:	3d495af3 3d49adc9 3d4a009f 3d4a5482     .ZI=..I=..J=.TJ=
24016888:	3d4aa759 3d4afb3b 3d4b4f1e 3d4ba301     Y.J=;.J=.OK=..K=
24016898:	3d4bf6e4 3d4c4ac7 3d4c9fb6 3d4cf399     ..K=.JL=..L=..L=
240168a8:	3d4d4888 3d4d9d77 3d4df15a 3d4e464a     .HM=w.M=Z.M=JFN=
240168b8:	3d4e9c45 3d4ef135 3d4f4624 3d4f9c20     E.N=5.N=$FO= .O=
240168c8:	3d4ff21b 3d50470b 3d509d06 3d50f302     ..O=.GP=..P=..P=
240168d8:	3d514a0a 3d51a006 3d51f70e 3d524d0a     .JQ=..Q=..Q=.MR=
240168e8:	3d52a412 3d52fb1a 3d535222 3d53a92a     ..R=..R="RS=*.S=
240168f8:	3d540032 3d545847 3d54af4f 3d550764     2.T=GXT=O.T=d.U=
24016908:	3d555f78 3d55b78d 3d560fa1 3d5667b6     x_U=..U=..V=.gV=
24016918:	3d56bfcb 3d5718ec 3d57720d 3d57ca21     ..V=..W=.rW=!.W=
24016928:	3d582342 3d587c63 3d58d691 3d592fb2     B#X=c|X=..X=./Y=
24016938:	3d5988d3 3d59e300 3d5a3d2e 3d5a975b     ..Y=..Y=.=Z=[.Z=
24016948:	3d5af188 3d5b4bb6 3d5ba5e3 3d5c011d     ..Z=.K[=..[=..\=
24016958:	3d5c5b4b 3d5cb685 3d5d11be 3d5d6cf8     K[\=..\=..]=.l]=
24016968:	3d5dc832 3d5e236c 3d5e7fb2 3d5edaec     2.]=l#^=..^=..^=
24016978:	3d5f3733 3d5f9379 3d5fefbf 3d604c06     37_=y._=.._=.L`=
24016988:	3d60a84c 3d61059f 3d6161e5 3d61bf38     L.`=..a=.aa=8.a=
24016998:	3d621c8a 3d6279dd 3d62d730 3d633483     ..b=.yb=0.b=.4c=
240169a8:	3d6392e2 3d63f035 3d644e94 3d64acf3     ..c=5.c=.Nd=..d=
240169b8:	3d650b52 3d6569b1 3d65c811 3d66277c     R.e=.ie=..e=|'f=
240169c8:	3d6685db 3d66e547 3d6744b3 3d67a41e     ..f=G.f=.Dg=..g=
240169d8:	3d68038a 3d6862f6 3d68c36e 3d6923e6     ..h=.bh=n.h=.#i=
240169e8:	3d698351 3d69e3c9 3d6a4441 3d6aa5c6     Q.i=..i=ADj=..j=
240169f8:	3d6b063e 3d6b66b6 3d6bc83b 3d6c29bf     >.k=.fk=;.k=.)l=
24016a08:	3d6c8b44 3d6cecc8 3d6d4e4d 3d6db0de     D.l=..l=MNm=..m=
24016a18:	3d6e1262 3d6e74f3 3d6ed784 3d6f3a15     b.n=.tn=..n=.:o=
24016a28:	3d6f9ca6 3d6fff37 3d7062d4 3d70c671     ..o=7.o=.bp=q.p=
24016a38:	3d712902 3d718ca0 3d71f03d 3d7254e7     .)q=..q==.q=.Tr=
24016a48:	3d72b884 3d731d2e 3d7380cb 3d73e575     ..r=..s=..s=u.s=
24016a58:	3d744a1f 3d74aec9 3d75147f 3d757929     .Jt=..t=..u=)yu=
24016a68:	3d75dedf 3d764495 3d76aa4c 3d771002     ..u=.Dv=L.v=..w=
24016a78:	3d7775b8 3d77dc7b 3d784231 3d78a8f4     .uw={.w=1Bx=..x=
24016a88:	3d790fb6 3d797679 3d79dd3c 3d7a450b     ..y=yvy=<.y=.Ez=
24016a98:	3d7aabcd 3d7b139d 3d7b7b6c 3d7be33b     ..z=..{=l{{=;.{=
24016aa8:	3d7c4b0a 3d7cb2d9 3d7d1bb5 3d7d8490     .K|=..|=..}=..}=
24016ab8:	3d7dec5f 3d7e553b 3d7ebe16 3d7f27fe     _.}=;U~=..~=.'.=
24016ac8:	3d7f90da 3d7ffac2 3d803255 3d806749     ...=...=U2.=Ig.=
24016ad8:	3d809c3d 3d80d131 3d8106ab 3d813b9f     =..=1..=...=.;.=
24016ae8:	3d817119 3d81a693 3d81dc0e 3d821188     .q.=...=...=...=
24016af8:	3d824788 3d827d89 3d82b303 3d82e903     .G.=.}.=...=...=
24016b08:	3d831f04 3d83558a 3d838b8b 3d83c212     ...=.U.=...=...=
24016b18:	3d83f898 3d842f1f 3d8465a5 3d849c2c     ...=./.=.e.=,..=
24016b28:	3d84d2b3 3d8509c0 3d8540cc 3d8577d9     ...=...=.@.=.w.=
24016b38:	3d85aee6 3d85e5f3 3d861d86 3d865519     ...=...=...=.U.=
24016b48:	3d868c26 3d86c3b9 3d86fbd2 3d873366     &..=...=...=f3.=
24016b58:	3d876af9 3d87a312 3d87db2b 3d881345     .j.=...=+..=E..=
24016b68:	3d884b5e 3d8883fd 3d88bc17 3d88f4b6     ^K.=...=...=...=
24016b78:	3d892d56 3d8965f5 3d899e95 3d89d7ba     V-.=.e.=...=...=
24016b88:	3d8a105a 3d8a4980 3d8a82a5 3d8abbcb     Z..=.I.=...=...=
24016b98:	3d8af577 3d8b2e9d 3d8b6849 3d8ba1f5     w..=...=Ih.=...=
24016ba8:	3d8bdba1 3d8c154d 3d8c4ef9 3d8c892b     ...=M..=.N.=+..=
24016bb8:	3d8cc35d 3d8cfd09 3d8d37c1 3d8d71f3     ]..=...=.7.=.q.=
24016bc8:	3d8dac26 3d8de6de 3d8e2196 3d8e5c4f     &..=...=.!.=O\.=
24016bd8:	3d8e9707 3d8ed1bf 3d8f0cfe 3d8f483d     ...=...=...==H.=
24016be8:	3d8f837b 3d8fbeba 3d8ff9f8 3d9035bd     {..=...=...=.5.=
24016bf8:	3d9070fc 3d90acc1 3d90e886 3d91244a     .p.=...=...=J$.=
24016c08:	3d916095 3d919c5a 3d91d8a5 3d9214f0     .`.=Z..=...=...=
24016c18:	3d92513b 3d928e0d 3d92ca58 3d930729     ;Q.=...=X..=)..=
24016c28:	3d9343fa 3d9380cb 3d93bd9d 3d93faf4     .C.=...=...=...=
24016c38:	3d9437c5 3d94751d 3d94b274 3d94efcc     .7.=.u.=t..=...=
24016c48:	3d952daa 3d956b01 3d95a8df 3d95e6bc     .-.=.k.=...=...=
24016c58:	3d96249a 3d9662fe 3d96a0dc 3d96df40     .$.=.b.=...=@..=
24016c68:	3d971da3 3d975c07 3d979af2 3d97d955     ...=.\.=...=U..=
24016c78:	3d981840 3d98572a 3d989614 3d98d4fe     @..=*W.=...=...=
24016c88:	3d99146e 3d995358 3d9992c9 3d99d239     n..=XS.=...=9..=
24016c98:	3d9a1230 3d9a51a0 3d9a9197 3d9ad18d     0..=.Q.=...=...=
24016ca8:	3d9b1184 3d9b517a 3d9b91f7 3d9bd1ee     ...=zQ.=...=...=
24016cb8:	3d9c126a 3d9c52e7 3d9c93ea 3d9cd467     j..=.R.=...=g..=
24016cc8:	3d9d156a 3d9d566d 3d9d9770 3d9dd873     j..=mV.=p..=s..=
24016cd8:	3d9e19fc 3d9e5aff 3d9e9c88 3d9ede12     ...=.Z.=...=...=
24016ce8:	3d9f2021 3d9f61aa 3d9fa3ba 3d9fe5c9     ! .=.a.=...=...=
24016cf8:	3da027d9 3da069e8 3da0ac7e 3da0ef13     .'.=.i.=~..=...=
24016d08:	3da13123 3da1743f 3da1b6d4 3da1f9f0     #1.=?t.=...=...=
24016d18:	3da23c86 3da27fa2 3da2c344 3da30660     .<.=...=D..=`..=
24016d28:	3da34a02 3da38d1e 3da3d0c0 3da414e8     .J.=...=...=...=
24016d38:	3da4588a 3da49cb2 3da4e0db 3da52503     .X.=...=...=.%.=
24016d48:	3da5692b 3da5adda 3da5f202 3da636b1     +i.=...=...=.6.=
24016d58:	3da67b5f 3da6c094 3da70542 3da74a77     _{.=...=B..=wJ.=
24016d68:	3da78fac 3da7d4e1 3da81a9c 3da86057     ...=...=...=W`.=
24016d78:	3da8a58b 3da8eb46 3da93187 3da97742     ...=F..=.1.=Bw.=
24016d88:	3da9bd84 3daa03c5 3daa4a06 3daa90cd     ...=...=.J.=...=
24016d98:	3daad70e 3dab1dd6 3dab649d 3dabab65     ...=...=.d.=e..=
24016da8:	3dabf2b2 3dac3a00 3dac814d 3dacc89b     ...=.:.=M..=...=
24016db8:	3dad0fe9 3dad57bc 3dad9f90 3dade764     ...=.W.=...=d..=
24016dc8:	3dae2f38 3dae770c 3daebf66 3daf07c0     8/.=.w.=f..=...=
24016dd8:	3daf501a 3daf98fa 3dafe154 3db02a35     .P.=...=T..=5*.=
24016de8:	3db07315 3db0bbf5 3db1055c 3db14ec2     .s.=...=\..=.N.=
24016df8:	3db19829 3db1e18f 3db22af5 3db274e2     )..=...=.*.=.t.=
24016e08:	3db2becf 3db308bc 3db3532e 3db39d1b     ...=...=.S.=...=
24016e18:	3db3e78e 3db43201 3db47c74 3db4c76d     ...=.2.=t|.=m..=
24016e28:	3db51266 3db55d5f 3db5a858 3db5f352     f..=_].=X..=R..=
24016e38:	3db63ed1 3db68a50 3db6d5d0 3db7214f     .>.=P..=...=O!.=
24016e48:	3db76d55 3db7b95a 3db80560 3db85165     Um.=Z..=`..=eQ.=
24016e58:	3db89df1 3db8ea7d 3db93709 3db98394     ...=}..=.7.=...=
24016e68:	3db9d0a6 3dba1db8 3dba6aca 3dbab7dc     ...=...=.j.=...=
24016e78:	3dbb04ee 3dbb5287 3dbba01f 3dbbedb7     ...=.R.=...=...=
24016e88:	3dbc3bd6 3dbc896e 3dbcd78c 3dbd2631     .;.=n..=...=1&.=
24016e98:	3dbd744f 3dbdc2f4 3dbe1199 3dbe603d     Ot.=...=...==`.=
24016ea8:	3dbeaee2 3dbefe0d 3dbf4d38 3dbf9c63     ...=...=8M.=c..=
24016eb8:	3dbfeb8e 3dc03b3f 3dc08af0 3dc0daa1     ...=?;.=...=...=
24016ec8:	3dc12ad8 3dc17a89 3dc1cac1 3dc21af8     .*.=.z.=...=...=
24016ed8:	3dc26bb5 3dc2bbed 3dc30caa 3dc35d68     .k.=...=...=h].=
24016ee8:	3dc3aeab 3dc3ffef 3dc450ad 3dc4a277     ...=...=.P.=w..=
24016ef8:	3dc4f3ba 3dc54584 3dc5974e 3dc5e918     ...=.E.=N..=...=
24016f08:	3dc63ae2 3dc68d33 3dc6df83 3dc731d3     .:.=3..=...=.1.=
24016f18:	3dc784a9 3dc7d6f9 3dc829d0 3dc87d2c     ...=...=.).=,}.=
24016f28:	3dc8d003 3dc92360 3dc976bc 3dc9ca19     ...=`#.=.v.=...=
24016f38:	3dca1dfc 3dca71de 3dcac5c1 3dcb19a4     ...=.q.=...=...=
24016f48:	3dcb6e0d 3dcbc276 3dcc16df 3dcc6b48     .n.=v..=...=Hk.=
24016f58:	3dccc038 3dcd1527 3dcd6a16 3dcdbf05     8..='..=.j.=...=
24016f68:	3dce147b 3dce69f0 3dcebf66 3dcf1562     {..=.i.=f..=b..=
24016f78:	3dcf6b5d 3dcfc159 3dd01755 3dd06dd7     ]k.=Y..=U..=.m.=
24016f88:	3dd0c3d2 3dd11ada 3dd1715c 3dd1c865     ...=...=\q.=e..=
24016f98:	3dd21f6d 3dd27675 3dd2cd7d 3dd3250b     m..=uv.=}..=.%.=
24016fa8:	3dd37c9a 3dd3d4ae 3dd42c3d 3dd48451     .|.=...==,.=Q..=
24016fb8:	3dd4dc66 3dd53501 3dd58d15 3dd5e5b0     f..=.5.=...=...=
24016fc8:	3dd63ed1 3dd6976c 3dd6f08d 3dd749ae     .>.=l..=...=.I.=
24016fd8:	3dd7a2cf 3dd7fc76 3dd8561d 3dd8afc4     ...=v..=.V.=...=
24016fe8:	3dd909f2 3dd9641f 3dd9be4d 3dda187a     ...=.d.=M..=z..=
24016ff8:	3dda732e 3ddacde2 3ddb2895 3ddb8349     .s.=...=.(.=I..=
24017008:	3ddbde83 3ddc39bd 3ddc94f7 3ddcf0b7     ...=.9.=...=...=
24017018:	3ddd4c77 3ddda837 3dde047d 3dde603d     wL.=7..=}..==`.=
24017028:	3ddebd0a 3ddf1950 3ddf761d 3ddfd263     ...=P..=.v.=c..=
24017038:	3de02fb6 3de08c82 3de0e9d5 3de14728     ./.=...=...=(G.=
24017048:	3de1a501 3de20254 3de2602d 3de2be8c     ...=T..=-`.=...=
24017058:	3de31c65 3de37ac4 3de3d923 3de43809     e..=.z.=#..=.8.=
24017068:	3de49668 3de4f5d3 3de554b9 3de5b424     h..=...=.T.=$..=
24017078:	3de61390 3de672fc 3de6d267 3de73259     ...=.r.=g..=Y2.=
24017088:	3de7924b 3de7f2c3 3de8533b 3de8b3b3     K..=...=;S.=...=
24017098:	3de9142b 3de97529 3de9d628 3dea3726     +..=)u.=(..=&7.=
240170a8:	3dea98ab 3deafa2f 3deb5bb4 3debbd38     ...=/..=.[.=8..=
240170b8:	3dec1f43 3dec814d 3dece3de 3ded466f     C..=M..=...=oF.=
240170c8:	3deda900 3dee0b91 3dee6ea8 3deed1bf     ...=...=.n.=...=
240170d8:	3def34d7 3def9874 3deffc11 3df05faf     .4.=t..=...=._.=
240170e8:	3df0c3d2 3df12770 3df18c19 3df1f03d     ...=p'.=...==..=
240170f8:	3df254e7 3df2b991 3df31ec1 3df3836b     .T.=...=...=k..=
24017108:	3df3e921 3df44e51 3df4b407 3df519bd     !..=QN.=...=...=
24017118:	3df57f73 3df5e5b0 3df64bec 3df6b229     s..=...=.K.=)..=
24017128:	3df718ec 3df77fae 3df7e671 3df84dba     ...=...=q..=.M.=
24017138:	3df8b503 3df91c4c 3df9841b 3df9ebea     ...=L..=...=...=
24017148:	3dfa53b9 3dfabc0e 3dfb2464 3dfb8cb9     .S.=...=d$.=...=
24017158:	3dfbf594 3dfc5dea 3dfcc74c 3dfd3027     ...=.].=L..='0.=
24017168:	3dfd9989 3dfe0371 3dfe6cd3 3dfed6bb     ...=q..=.l.=...=
24017178:	3dff40a3 3dffab11 3e000abf 3e003ff7     .@.=...=...>.?.>
24017188:	3e007571 3e00aaeb 3e00e065 3e011623     qu.>...>e..>#..>
24017198:	3e014be0 3e01819d 3e01b79e 3e01ed9e     .K.>...>...>...>
240171a8:	3e02239e 3e0259e2 3e029025 3e02c669     .#.>.Y.>%..>i..>
240171b8:	3e02fcf0 3e033376 3e0369fd 3e03a0c7     ...>v3.>.i.>...>
240171c8:	3e03d790 3e040e5a 3e044567 3e047c74     ...>Z..>gE.>t|.>
240171d8:	3e04b3c4 3e04eb14 3e052264 3e0559b4     ...>...>d".>.Y.>
240171e8:	3e059147 3e05c91d 3e0600b0 3e063886     G..>...>...>.8.>
240171f8:	3e06705d 3e06a876 3e06e08f 3e0718a8     ]p.>v..>...>...>
24017208:	3e075105 3e078961 3e07c201 3e07faa0     .Q.>a..>...>...>
24017218:	3e083340 3e086bdf 3e08a4c2 3e08dda5     @3.>.k.>...>...>
24017228:	3e0916ca 3e094ff0 3e098916 3e09c27f     ...>.O.>...>...>
24017238:	3e09fbe7 3e0a3550 3e0a6efc 3e0aa8a8     ...>P5.>.n.>...>
24017248:	3e0ae297 3e0b1c86 3e0b5675 3e0b90a8     ...>...>uV.>...>
24017258:	3e0bcada 3e0c050c 3e0c3f81 3e0c79f6     ...>...>.?.>.y.>
24017268:	3e0cb46c 3e0cef24 3e0d29dc 3e0d64d8     l..>$..>.).>.d.>
24017278:	3e0d9fd3 3e0ddacf 3e0e160e 3e0e514c     ...>...>...>LQ.>
24017288:	3e0e8cce 3e0ec850 3e0f03d1 3e0f3f96     ...>P..>...>.?.>
24017298:	3e0f7b5b 3e0fb720 3e0ff328 3e102f30     [{.> ..>(..>0/.>
240172a8:	3e106b38 3e10a783 3e10e411 3e11205c     8k.>...>...>\ .>
240172b8:	3e115cea 3e1199bb 3e11d68c 3e12135e     .\.>...>...>^..>
240172c8:	3e125072 3e128d86 3e12ca9b 3e1307f2     rP.>...>...>...>
240172d8:	3e13454a 3e1382e4 3e13c03c 3e13fe19     JE.>...><..>...>
240172e8:	3e143bf7 3e1479d5 3e14b7b3 3e14f5d3     .;.>.y.>...>...>
240172f8:	3e153437 3e157258 3e15b0bc 3e15ef63     74.>Xr.>...>c..>
24017308:	3e162e0a 3e166cb1 3e16ab9b 3e16ea85     ...>.l.>...>...>
24017318:	3e1729b3 3e1768e0 3e17a80d 3e17e77d     .).>.h.>...>}..>
24017328:	3e1826ee 3e1866a1 3e18a655 3e18e608     .&.>.f.>U..>...>
24017338:	3e1925ff 3e1965f5 3e19a62f 3e19e668     .%.>.e.>/..>h..>
24017348:	3e1a26a2 3e1a671f 3e1aa79c 3e1ae85c     .&.>.g.>...>\..>
24017358:	3e1b291c 3e1b6a1f 3e1baade 3e1bec25     .).>.j.>...>%..>
24017368:	3e1c2d6b 3e1c6eb1 3e1caff7 3e1cf180     k-.>.n.>...>...>
24017378:	3e1d334c 3e1d7519 3e1db6e5 3e1df8f4     L3.>.u.>...>...>
24017388:	3e1e3b04 3e1e7d13 3e1ebf66 3e1f01fc     .;.>.}.>f..>...>
24017398:	3e1f4491 3e1f8727 3e1fca00 3e200cd8     .D.>'..>...>.. >
240173a8:	3e204fb1 3e2092cd 3e20d62c 3e21198b     .O >.. >,. >..!>
240173b8:	3e215cea 3e21a08c 3e21e42e 3e2227d0     .\!>..!>..!>.'">
240173c8:	3e226bb5 3e22afde 3e22f406 3e23382e     .k">..">..">.8#>
240173d8:	3e237c9a 3e23c105 3e2405b4 3e244a62     .|#>..#>..$>bJ$>
240173e8:	3e248f11 3e24d402 3e251937 3e255e6c     ..$>..$>7.%>l^%>
240173f8:	3e25a3a1 3e25e918 3e262e90 3e26744b     ..%>..%>..&>Kt&>
24017408:	3e26ba06 3e270004 3e274602 3e278c00     ..&>..'>.F'>..'>
24017418:	3e27d242 3e281883 3e285f07 3e28a5ce     B.'>..(>._(>..(>
24017428:	3e28ec53 3e29335d 3e297a25 3e29c12f     S.(>]3)>%z)>/.)>
24017438:	3e2a087d 3e2a4fca 3e2a975b 3e2adea9     }.*>.O*>[.*>..*>
24017448:	3e2b267c 3e2b6e50 3e2bb624 3e2bfe3b     |&+>Pn+>$.+>;.+>
24017458:	3e2c4652 3e2c8eac 3e2cd706 3e2d1fa3     RF,>..,>..,>..->
24017468:	3e2d6840 3e2db121 3e2dfa01 3e2e4324     @h->!.->..->$C.>
24017478:	3e2e8c48 3e2ed56b 3e2f1ed1 3e2f687b     H..>k..>../>{h/>
24017488:	3e2fb225 3e2ffbce 3e3045bb 3e308feb     %./>../>.E0>..0>
24017498:	3e30d9d7 3e31244a 3e316ebd 3e31b930     ..0>J$1>.n1>0.1>
240174a8:	3e3203e6 3e324e9c 3e329995 3e32e48f     ..2>.N2>..2>..2>
240174b8:	3e332fcb 3e337b07 3e33c686 3e341206     ./3>.{3>..3>..4>
240174c8:	3e345dc8 3e34a98b 3e34f590 3e354196     .]4>..4>..4>.A5>
240174d8:	3e358dde 3e35da27 3e3626b3 3e36733f     ..5>'.5>.&6>?s6>
240174e8:	3e36c00e 3e370cdd 3e3759ef 3e37a701     ..6>..7>.Y7>..7>
240174f8:	3e37f456 3e3841ab 3e388f43 3e38dcdb     V.7>.A8>C.8>..8>
24017508:	3e392ab7 3e397892 3e39c6b0 3e3a14cf     .*9>.x9>..9>..:>
24017518:	3e3a6330 3e3ab192 3e3b0037 3e3b4edb     0c:>..:>7.;>.N;>
24017528:	3e3b9dc3 3e3becab 3e3c3bd6 3e3c8b44     ..;>..;>.;<>D.<>
24017538:	3e3cdab2 3e3d2a20 3e3d79d1 3e3dc982     ..<> *=>.y=>..=>
24017548:	3e3e1976 3e3e69ad 3e3eb9e5 3e3f0a5f     v.>>.i>>..>>_.?>
24017558:	3e3f5ad9 3e3fab54 3e3ffc54 3e404d12     .Z?>T.?>T.?>.M@>
24017568:	3e409e13 3e40ef56 3e41409a 3e419221     ..@>V.@>.@A>!.A>
24017578:	3e41e3eb 3e4235b5 3e42877f 3e42d98c     ..A>.5B>..B>..B>
24017588:	3e432b99 3e437de9 3e43d07d 3e442310     .+C>.}C>}.C>.#D>
24017598:	3e4475e6 3e44c8bd 3e451bd6 3e456ef0     .uD>..D>..E>.nE>
240175a8:	3e45c24c 3e4615a9 3e466949 3e46bd2b     L.E>..F>IiF>+.F>
240175b8:	3e47110e 3e476534 3e47b95a 3e480dc3     ..G>4eG>Z.G>..H>
240175c8:	3e48622c 3e48b6d8 3e490b85 3e496074     ,bH>..H>..I>t`I>
240175d8:	3e49b5a6 3e4a0ad9 3e4a600b 3e4ab580     ..I>..J>.`J>..J>
240175e8:	3e4b0b39 3e4b6135 3e4bb731 3e4c0d2c     9.K>5aK>1.K>,.L>
240175f8:	3e4c636b 3e4cb9ed 3e4d106f 3e4d6734     kcL>..L>o.M>4gM>
24017608:	3e4dbdf9 3e4e1501 3e4e6c09 3e4ec354     ..M>..N>.lN>T.N>
24017618:	3e4f1ae3 3e4f7271 3e4fca43 3e502257     ..O>qrO>C.O>W"P>
24017628:	3e507a6c 3e50d280 3e512ad8 3e518373     lzP>..P>.*Q>s.Q>
24017638:	3e51dc0e 3e5234ec 3e528e0d 3e52e72e     ..Q>.4R>..R>..R>
24017648:	3e534092 3e5399f6 3e53f39d 3e544d44     .@S>..S>..S>DMT>
24017658:	3e54a72f 3e55015c 3e555b8a 3e55b5fa     /.T>\.U>.[U>..U>
24017668:	3e5610ae 3e566b61 3e56c615 3e57214f     ..V>akV>..V>O!W>
24017678:	3e577c89 3e57d7c3 3e583340 3e588f00     .|W>..W>@3X>..X>
24017688:	3e58eac0 3e5946c3 3e59a30a 3e59ff50     ..X>.FY>..Y>P.Y>
24017698:	3e5a5bd9 3e5ab863 3e5b152f 3e5b723f     .[Z>c.Z>/.[>?r[>
240176a8:	3e5bcf4f 3e5c2ca1 3e5c8a37 3e5ce7cd     O.[>.,\>7.\>..\>
240176b8:	3e5d45a6 3e5da37f 3e5e019b 3e5e5ffa     .E]>..]>..^>._^>
240176c8:	3e5ebe59 3e5f1cfc 3e5f7be1 3e5fdac7     Y.^>.._>.{_>.._>
240176d8:	3e6039ef 3e609918 3e60f883 3e615832     .9`>..`>..`>2Xa>
240176e8:	3e61b7e1 3e621816 3e627807 3e62d880     ..a>..b>.xb>..b>
240176f8:	3e6338f8 3e639970 3e63fa6e 3e645b29     .8c>p.c>n.c>)[d>
24017708:	3e64bc6a 3e651dac 3e657f30 3e65e0f8     j.d>..e>0.e>..e>
24017718:	3e6642c0 3e66a4ca 3e670718 3e676966     .Bf>..f>..g>fig>
24017728:	3e67cbf7 3e682e88 3e68915c 3e68f473     ..g>..h>\.h>s.h>
24017738:	3e6957cd 3e69bb28 3e6a1ec5 3e6a82a5     .Wi>(.i>..j>..j>
24017748:	3e6ae686 3e6b4aa9 3e6baecd 3e6c1377     ..j>.Jk>..k>w.l>
24017758:	3e6c7821 3e6cdcca 3e6d41fa 3e6da72a     !xl>..l>.Am>*.m>
24017768:	3e6e0c5b 3e6e7211 3e6ed7c7 3e6f3dc0     [.n>.rn>..n>.=o>
24017778:	3e6fa3ba 3e7009f6 3e707076 3e70d738     ..o>..p>vpp>8.p>
24017788:	3e713dfb 3e71a501 3e720c07 3e727393     .=q>..q>..r>.sr>
24017798:	3e72db1f 3e7342ee 3e73aabd 3e7412cf     ..r>.Bs>..s>..t>
240177a8:	3e747b24 3e74e3bd 3e754c55 3e75b531     ${t>..t>ULu>1.u>
240177b8:	3e761e4f 3e76876e 3e76f113 3e775a75     O.v>n.v>..v>uZw>
240177c8:	3e77c45d 3e782e45 3e7898b3 3e7902de     ].w>E.x>..x>..y>
240177d8:	3e796d8f 3e79d841 3e7a4335 3e7aae6d     .my>A.y>5Cz>m.z>
240177e8:	3e7b19a4 3e7b8562 3e7bf120 3e7c5cdd     ..{>b.{> .{>.\|>
240177f8:	3e7cc921 3e7d3565 3e7da1ec 3e7e0e73     !.|>e5}>..}>s.~>
24017808:	3e7e7b81 3e7ee88e 3e7f55de 3e7fc32f     .{~>..~>.U.>/..>
24017818:	3e801883 3e804f6e 3e80867b 3e80bda9     ...>nO.>{..>...>
24017828:	3e80f4d8 3e812c28 3e816399 3e819b2c     ...>(,.>.c.>,..>
24017838:	3e81d2e1 3e820a96 3e82426c 3e827a63     ...>...>lB.>cz.>
24017848:	3e82b25b 3e82ea96 3e8322d1 3e835b2d     [..>...>.".>-[.>
24017858:	3e83938a 3e83cc29 3e8404c9 3e843d8a     ...>)..>...>.=.>
24017868:	3e84766c 3e84af71 3e84e875 3e85219b     lv.>q..>u..>.!.>
24017878:	3e855ae2 3e85944b 3e85cdd5 3e86075f     .Z.>K..>...>_..>
24017888:	3e86410b 3e867ad9 3e86b4c8 3e86eed9     .A.>.z.>...>...>
24017898:	3e8728e9 3e87633d 3e879d91 3e87d7e4     .(.>=c.>...>...>
240178a8:	3e88127b 3e884d34 3e8887ec 3e88c2c6     {..>4M.>...>...>
240178b8:	3e88fdc1 3e8938de 3e89741d 3e89af5c     ...>.8.>.t.>\..>
240178c8:	3e89eabc 3e8a263e 3e8a61e1 3e8a9da6     ...>>&.>.a.>...>
240178d8:	3e8ad98c 3e8b1572 3e8b519c 3e8b8dc5     ...>r..>.Q.>...>
240178e8:	3e8bca10 3e8c067d 3e8c42ea 3e8c7f99     ...>}..>.B.>...>
240178f8:	3e8cbc49 3e8cf93c 3e8d362f 3e8d7343     I..><..>/6.>Cs.>
24017908:	3e8db057 3e8dedaf 3e8e2b28 3e8e68a1     W..>...>(+.>.h.>
24017918:	3e8ea63b 3e8ee419 3e8f21f7 3e8f5ff6     ;..>...>.!.>._.>
24017928:	3e8f9df5 3e8fdc38 3e901a9c 3e9058ff     ...>8..>...>.X.>
24017938:	3e909785 3e90d64d 3e911516 3e915400     ...>M..>...>.T.>
24017948:	3e91930c 3e91d218 3e921166 3e9250d7     ...>...>f..>.P.>
24017958:	3e929047 3e92cffa 3e930fae 3e934f83     G..>...>...>.O.>
24017968:	3e938f7a 3e93cf92 3e940fcb 3e945027     z..>...>...>'P.>
24017978:	3e9490a3 3e94d142 3e9511e0 3e9552c1     ...>B..>...>.R.>
24017988:	3e9593a3 3e95d4c7 3e9615ec 3e965732     ...>...>...>2W.>
24017998:	3e96989a 3e96da45 3e971bef 3e975dbc     ...>E..>...>.].>
240179a8:	3e979fa9 3e97e1b9 3e9823c8 3e98661b     ...>...>.#.>.f.>
240179b8:	3e98a88f 3e98eb25 3e992ddc 3e997093     ...>%..>.-.>.p.>
240179c8:	3e99b38d 3e99f688 3e9a39c5 3e9a7d03     ...>...>.9.>.}.>
240179d8:	3e9ac083 3e9b0404 3e9b47c7 3e9b8b8b     ...>...>.G.>...>
240179e8:	3e9bcf92 3e9c1398 3e9c57c1 3e9c9c2c     ...>...>.W.>,..>
240179f8:	3e9ce098 3e9d2546 3e9d69f5 3e9daec5     ...>F%.>.i.>...>
24017a08:	3e9df3d8 3e9e38eb 3e9e7e20 3e9ec398     ...>.8.> ~.>...>
24017a18:	3e9f090f 3e9f4ea9 3e9f9485 3e9fda62     ...>.N.>...>b..>
24017a28:	3ea02081 3ea066a1 3ea0ad04 3ea0f367     . .>.f.>...>g..>
24017a38:	3ea13a0c 3ea180b2 3ea1c79b 3ea20ea6     .:.>...>...>...>
24017a48:	3ea255b0 3ea29cfe 3ea2e46d 3ea32bfe     .U.>...>m..>.+.>
24017a58:	3ea373b0 3ea3bb84 3ea40379 3ea44b90     .s.>...>y..>.K.>
24017a68:	3ea493c9 3ea4dc23 3ea5249e 3ea56d3b     ...>#..>.$.>;m.>
24017a78:	3ea5b61c 3ea5fefc 3ea6481f 3ea69143     ...>...>.H.>C..>
24017a88:	3ea6daa9 3ea72431 3ea76ddb 3ea7b7a6     ...>1$.>.m.>...>
24017a98:	3ea80193 3ea84ba1 3ea895d1 3ea8e044     ...>.K.>...>D..>
24017aa8:	3ea92ab7 3ea9756d 3ea9c023 3eaa0b1c     .*.>mu.>#..>...>
24017ab8:	3eaa5636 3eaaa173 3eaaecd0 3eab3871     6V.>s..>...>q8.>
24017ac8:	3eab8412 3eabcff6 3eac1bda 3eac6801     ...>...>...>.h.>
24017ad8:	3eacb44a 3ead00b4 3ead4d40 3ead9a0f     J..>...>@M.>...>
24017ae8:	3eade6de 3eae33f0 3eae8124 3eaece79     ...>.3.>$..>y..>
24017af8:	3eaf1bef 3eaf6988 3eafb763 3eb0053e     ...>.i.>c..>>..>
24017b08:	3eb0535d 3eb0a19d 3eb0effe 3eb13ea3     ]S.>...>...>.>.>
24017b18:	3eb18d47 3eb1dc2f 3eb22b39 3eb27a63     G..>/..>9+.>cz.>
24017b28:	3eb2c9d1 3eb3193f 3eb368f1 3eb3b8c3     ...>?..>.h.>...>
24017b38:	3eb408b7 3eb458ef 3eb4a926 3eb4f9a0     ...>.X.>&..>...>
24017b48:	3eb54a3c 3eb59afa 3eb5ebfb 3eb63d1d     <J.>...>...>.=.>
24017b58:	3eb68e61 3eb6dfc6 3eb7314d 3eb78317     a..>...>M1.>...>
24017b68:	3eb7d502 3eb8270f 3eb8795f 3eb8cbd1     ...>.'.>_y.>...>
24017b78:	3eb91e64 3eb97119 3eb9c411 3eba1709     d..>.q.>...>...>
24017b88:	3eba6a66 3ebabdc2 3ebb1162 3ebb6523     fj.>...>b..>#e.>
24017b98:	3ebbb906 3ebc0d0b 3ebc6152 3ebcb5bb     ...>...>Ra.>...>
24017ba8:	3ebd0a67 3ebd5f35 3ebdb424 3ebe0935     g..>5_.>$..>5..>
24017bb8:	3ebe5e89 3ebeb3ff 3ebf0996 3ebf5f70     .^.>...>...>p_.>
24017bc8:	3ebfb56c 3ec00baa 3ec061e9 3ec0b86b     l..>...>.a.>k..>
24017bd8:	3ec10f30 3ec16617 3ec1bd1f 3ec21449     0..>.f.>...>I..>
24017be8:	3ec26bb5 3ec2c344 3ec31b15 3ec37308     .k.>D..>...>.s.>
24017bf8:	3ec3cb1d 3ec42374 3ec47bee 3ec4d4aa     ...>t#.>.{.>...>
24017c08:	3ec52d88 3ec58687 3ec5dfca 3ec6392e     .-.>...>...>.9.>
24017c18:	3ec692b4 3ec6ec7d 3ec74688 3ec7a0b6     ...>}..>.F.>...>
24017c28:	3ec7fb05 3ec85597 3ec8b04b 3ec90b20     ...>.U.>K..> ..>
24017c38:	3ec96638 3ec9c194 3eca1d11 3eca78af     8f.>...>...>.x.>
24017c48:	3ecad491 3ecb3094 3ecb8cda 3ecbe942     ...>.0.>...>B..>
24017c58:	3ecc45ed 3ecca2ba 3eccffa8 3ecd5cfb     .E.>...>...>.\.>
24017c68:	3ecdba4d 3ece17e3 3ece75bc 3eced3b7     M..>...>.u.>...>
24017c78:	3ecf31f4 3ecf9054 3ecfeef6 3ed04dba     .1.>T..>...>.M.>
24017c88:	3ed0acc1 3ed10be9 3ed16b55 3ed1cae2     ...>...>Uk.>...>
24017c98:	3ed22ab2 3ed28ac6 3ed2eafb 3ed34b51     .*.>...>...>QK.>
24017ca8:	3ed3ac0c 3ed40cc8 3ed46de7 3ed4cf07     ...>...>.m.>...>
24017cb8:	3ed5308c 3ed59232 3ed5f41b 3ed65626     .0.>2..>...>&V.>
24017cc8:	3ed6b873 3ed71ae3 3ed77d95 3ed7e08b     s..>...>.}.>...>
24017cd8:	3ed843a2 3ed8a6fc 3ed90a9a 3ed96e59     .C.>...>...>Yn.>
24017ce8:	3ed9d25b 3eda36a0 3eda9b07 3edaffb0     [..>.6.>...>...>
24017cf8:	3edb647c 3edbc98a 3edc2edc 3edc9470     |d.>...>...>p..>
24017d08:	3edcfa27 3edd6020 3eddc63b 3ede2c99     '..> `.>;..>.,.>
24017d18:	3ede933a 3edefa1e 3edf6146 3edfc88e     :..>...>Fa.>...>
24017d28:	3ee02ff9 3ee097c8 3ee0ffb9 3ee167ec     ./.>...>...>.g.>
24017d38:	3ee1d063 3ee2391d 3ee2a1f9 3ee30b18     c..>.9.>...>...>
24017d48:	3ee37479 3ee3de1e 3ee447e5 3ee4b1ee     yt.>...>.G.>...>
24017d58:	3ee51c3b 3ee586cb 3ee5f19d 3ee65c92     ;..>...>...>.\.>
24017d68:	3ee6c7c9 3ee73344 3ee79f02 3ee80b03     ...>D3.>...>...>
24017d78:	3ee87725 3ee8e3ac 3ee95055 3ee9bd40     %w.>...>UP.>@..>
24017d88:	3eea2a6f 3eea97e1 3eeb0575 3eeb736d     o*.>...>u..>ms.>
24017d98:	3eebe187 3eec4fe3 3eecbea5 3eed2d88     ...>.O.>...>.-.>
24017da8:	3eed9cae 3eee0c17 3eee7bc4 3eeeeb92     ...>...>.{.>...>
24017db8:	3eef5bc4 3eefcc3a 3ef03cd1 3ef0adcd     .[.>:..>.<.>...>
24017dc8:	3ef11eeb 3ef1906d 3ef20210 3ef27419     ...>m..>...>.t.>
24017dd8:	3ef2e643 3ef358d1 3ef3cb81 3ef43e75     C..>.X.>...>u>.>
24017de8:	3ef4b1cd 3ef52546 3ef59924 3ef60d24     ...>F%.>$..>$..>
24017df8:	3ef68188 3ef6f60e 3ef76af9 3ef7e026     ...>...>.j.>&..>
24017e08:	3ef85597 3ef8cb29 3ef94120 3ef9b75a     .U.>)..> A.>Z..>
24017e18:	3efa2dd8 3efaa4ba 3efb1bbd 3efb9303     .-.>...>...>...>
24017e28:	3efc0aaf 3efc829d 3efcfaad 3efd7321     ...>...>...>!s.>
24017e38:	3efdebd9 3efe64f5 3efede33 3eff57d6     ...>.d.>3..>.W.>
24017e48:	3effd1bb 3f0025f2 3f006328 3f00a07f     ...>.%.?(c.?...?
24017e58:	3f00de09 3f011bb5 3f015981 3f019770     ...?...?.Y.?p..?
24017e68:	3f01d580 3f0213c2 3f025226 3f0290bc     ...?...?&R.?...?
24017e78:	3f02cf64 3f030e3d 3f034d38 3f038c65     d..?=..?8M.?e..?
24017e88:	3f03cba3 3f040b13 3f044ab6 3f048a7a     ...?...?.J.?z..?
24017e98:	3f04ca60 3f050a67 3f054aa1 3f058afc     `..?g..?.J.?...?
24017ea8:	3f05cb8a 3f060c28 3f064d0a 3f068dfc     ...?(..?.M.?...?
24017eb8:	3f06cf31 3f071077 3f0751f0 3f07938a     1..?w..?.Q.?...?
24017ec8:	3f07d556 3f081744 3f085964 3f089ba6     V..?D..?dY.?...?
24017ed8:	3f08de1a 3f0920b0 3f096378 3f09a661     ...?. .?xc.?a..?
24017ee8:	3f09e97d 3f0a2cba 3f0a702a 3f0ab3bc     }..?.,.?*p.?...?
24017ef8:	3f0af77f 3f0b3b64 3f0b7f7c 3f0bc3c6     ...?d;.?|..?...?
24017f08:	3f0c0831 3f0c4ccf 3f0c918e 3f0cd680     1..?.L.?...?...?
24017f18:	3f0d1ba4 3f0d60e9 3f0da661 3f0debfb     ...?.`.?a..?...?
24017f28:	3f0e31d7 3f0e77d5 3f0ebdf5 3f0f0447     .1.?.w.?...?G..?
24017f38:	3f0f4adc 3f0f9182 3f0fd86b 3f101f75     .J.?...?k..?u..?
24017f48:	3f1066b2 3f10ae21 3f10f5b2 3f113d75     .f.?!..?...?u=.?
24017f58:	3f11857b 3f11cd92 3f1215ec 3f125e78     {..?...?...?x^.?
24017f68:	3f12a726 3f12f007 3f133919 3f13825e     &..?...?.9.?^..?
24017f78:	3f13cbd5 3f14157f 3f145f5b 3f14a958     ...?...?[_.?X..?
24017f88:	3f14f399 3f153dfb 3f158890 3f15d367     ...?.=.?...?g..?
24017f98:	3f161e60 3f16698c 3f16b4fa 3f17008a     `..?.i.?...?...?
24017fa8:	3f174c4d 3f179852 3f17e47a 3f1830e4     ML.?R..?z..?.0.?
24017fb8:	3f187d70 3f18ca3e 3f191740 3f196473     p}.?>..?@..?sd.?
24017fc8:	3f19b1d9 3f19ff71 3f1a4d3c 3f1a9b39     ...?q..?<M.?9..?
24017fd8:	3f1ae979 3f1b37eb 3f1b8690 3f1bd567     y..?.7.?...?g..?
24017fe8:	3f1c2470 3f1c73bd 3f1cc33b 3f1d12ec     p$.?.s.?;..?...?
24017ff8:	3f1d62e1 3f1db2f6 3f1e034f 3f1e53eb     .b.?...?O..?.S.?
24018008:	3f1ea4ba 3f1ef5ba 3f1f46ed 3f1f9863     ...?...?.F.?c..?
24018018:	3f1fea0c 3f203bf7 3f208e15 3f20e065     ...?.; ?.. ?e. ?
24018028:	3f2132f8 3f2185be 3f21d8c7 3f222c13     .2!?..!?..!?.,"?
24018038:	3f227f91 3f22d341 3f232735 3f237b5b     .."?A."?5'#?[{#?
24018048:	3f23cfc4 3f242470 3f24794f 3f24ce70     ..#?p$$?Oy$?p.$?
24018058:	3f2523d5 3f25796c 3f25cf35 3f262553     .#%?ly%?5.%?S%&?
24018068:	3f267ba2 3f26d235 3f2728fa 3f278013     .{&?5.&?.('?..'?
24018078:	3f27d75e 3f282eec 3f2886ad 3f28dec2     ^.'?..(?..(?..(?
24018088:	3f293709 3f298f93 3f29e860 3f2a4170     .7)?..)?`.)?pA*?
24018098:	3f2a9ac3 3f2af45a 3f2b4e23 3f2ba83f     ..*?Z.*?#N+??.+?
240180a8:	3f2c028e 3f2c5d31 3f2cb817 3f2d1330     ..,?1],?..,?0.-?
240180b8:	3f2d6e9c 3f2dca3a 3f2e262d 3f2e8262     .n-?:.-?-&.?b..?
240180c8:	3f2ededb 3f2f3b97 3f2f9896 3f2ff5d8     ...?.;/?../?../?
240180d8:	3f30536d 3f30b146 3f310f62 3f316dc2     mS0?F.0?b.1?.m1?
240180e8:	3f31cc64 3f322b5a 3f328a93 3f32ea21     d.1?Z+2?..2?!.2?
240180f8:	3f3349f1 3f33aa04 3f340a5b 3f346b05     .I3?..3?[.4?.k4?
24018108:	3f34cc03 3f352d34 3f358ec9 3f35f091     ..4?4-5?..5?..5?
24018118:	3f3652bd 3f36b52d 3f3717df 3f377ae5     .R6?-.6?..7?.z7?
24018128:	3f37de40 3f3841dd 3f38a5ce 3f390a03     @.7?.A8?..8?..9?
24018138:	3f396e8b 3f39d367 3f3a3897 3f3a9e0a     .n9?g.9?.8:?..:?
24018148:	3f3b03d1 3f3b69ec 3f3bd05b 3f3c371e     ..;?.i;?[.;?.7<?
24018158:	3f3c9e34 3f3d058e 3f3d6d3b 3f3dd54e     4.<?..=?;m=?N.=?
24018168:	3f3e3da3 3f3ea64c 3f3f0f5a 3f3f78ab     .=>?L.>?Z.??.x??
24018178:	3f3fe261 3f404c59 3f40b6b7 3f412168     a.??YL@?..@?h!A?
24018188:	3f418c6d 3f41f7c6 3f426373 3f42cf85     m.A?..A?scB?..B?
24018198:	3f433beb 3f43a8a4 3f4415c2 3f448334     .;C?..C?..D?4.D?
240181a8:	3f44f0fa 3f455f24 3f45cda3 3f463c86     ..D?$_E?..E?.<F?
240181b8:	3f46abbd 3f471b58 3f478b48 3f47fb9c     ..F?X.G?H.G?..G?
240181c8:	3f486c55 3f48dd61 3f494ed3 3f49c0a9     UlH?a.H?.NI?..I?
240181d8:	3f4a32d3 3f4aa561 3f4b1855 3f4b8bac     .2J?a.J?U.K?..K?
240181e8:	3f4bff58 3f4c7379 3f4ce7ef 3f4d5cc8     X.K?ysL?..L?.\M?
240181f8:	3f4dd218 3f4e47bb 3f4ebdc2 3f4f3440     ..M?.GN?..N?@4O?
24018208:	3f4fab11 3f502257 3f509a02 3f511212     ..O?W"P?..P?..Q?
24018218:	3f518a98 3f520371 3f527cbf 3f52f683     ..Q?q.R?.|R?..R?
24018228:	3f5370ac 3f53eb3a 3f54662c 3f54e193     .pS?:.S?,fT?..T?
24018238:	3f555d70 3f55d9b2 3f565669 3f56d395     p]U?..U?iVV?..V?
24018248:	3f575126 3f57cf2d 3f584d98 3f58cc8a     &QW?-.W?.MX?..X?
24018258:	3f594be0 3f59cbab 3f5a4bec 3f5acca3     .KY?..Y?.KZ?..Z?
24018268:	3f5b4dcf 3f5bcf70 3f5c5187 3f5cd413     .M[?p.[?.Q\?..\?
24018278:	3f5d5715 3f5dda9d 3f5e5e9a 3f5ee30d     .W]?..]?.^^?..^?
24018288:	3f5f67f5 3f5fed63 3f607347 3f60f9a0     .g_?c._?Gs`?..`?
24018298:	3f618080 3f6207e6 3f628fc1 3f631822     ..a?..b?..b?".c?
240182a8:	3f63a0f9 3f642a56 3f64b439 3f653ea3     ..c?V*d?9.d?.>e?
240182b8:	3f65c982 3f6654f8 3f66e0e3 3f676d55     ..e?.Tf?..f?Umg?
240182c8:	3f67fa5d 3f6887db 3f6915f0 3f69a48b     ].g?..h?..i?..i?
240182d8:	3f6a33ad 3f6ac354 3f6b5393 3f6be458     .3j?T.j?.Sk?X.k?
240182e8:	3f6c75a3 3f6d0785 3f6d99fe 3f6e2cfe     .ul?..m?..m?.,n?
240182f8:	3f6ec083 3f6f54b0 3f6fe964 3f707eae     ..n?.To?d.o?.~p?
24018308:	3f711490 3f71ab08 3f724218 3f72d9be     ..q?..q?.Br?..r?
24018318:	3f7371fc 3f740ad0 3f74a43c 3f753e4f     .qs?..t?<.t?O>u?
24018328:	3f75d8f9 3f76743a 3f771023 3f77aca3     ..u?:tv?#.w?..w?
24018338:	3f7849cb 3f78e78a 3f7985f0 3f7a24ff     .Ix?..x?..y?.$z?
24018348:	3f7ac4b5 3f7b6513 3f7c0608 3f7ca7b5     ..z?.e{?..|?..|?
24018358:	3f7d4a0a 3f7decf6 3f7e909b 3f7f34f8     .J}?..}?..~?.4.?
24018368:	3f7fd9ec 3f803fd5 3f8092ff 3f80e686     ...?.?.?...?...?
24018378:	3f813a69 3f818ea8 3f81e33b 3f82382a     i:.?...?;..?*8.?
24018388:	3f828d76 3f82e31d 3f833922 3f838f82     v..?...?"9.?...?
24018398:	3f83e647 3f843d68 3f8494e6 3f84ecc0     G..?h=.?...?...?
240183a8:	3f854507 3f859da1 3f85f6a9 3f86500d     .E.?...?...?.P.?
240183b8:	3f86a9d6 3f870404 3f875e96 3f87b98c     ...?...?.^.?...?
240183c8:	3f8814f0 3f8870b9 3f88cce6 3f892978     ...?.p.?...?x).?
240183d8:	3f898677 3f89e3e3 3f8a41b3 3f8a9ff9     w..?...?.A.?...?
240183e8:	3f8afea4 3f8b5dbc 3f8bbd40 3f8c1d3b     ...?.].?@..?;..?
240183f8:	3f8c7da2 3f8cde76 3f8d3fc0 3f8da177     .}.?v..?.?.?w..?
24018408:	3f8e03a3 3f8e6645 3f8ec954 3f8f2ce0     ...?Ef.?T..?.,.?
24018418:	3f8f90e2 3f8ff55a 3f905a47 3f90bfb1     ...?Z..?GZ.?...?
24018428:	3f912592 3f918bf0 3f91f2cb 3f925a25     .%.?...?...?%Z.?
24018438:	3f92c1f4 3f932a49 3f93931d 3f93fc6e     ...?I*.?...?n..?
24018448:	3f946645 3f94d09a 3f953b75 3f95a6ce     Ef.?...?u;.?...?
24018458:	3f9612b6 3f967f24 3f96ec18 3f975992     ...?$..?...?.Y.?
24018468:	3f97c79b 3f98362a 3f98a548 3f9914f5     ...?*6.?H..?...?
24018478:	3f99852f 3f99f5f9 3f9a6751 3f9ad938     /..?...?Qg.?8..?
24018488:	3f9b4bbe 3f9bbecb 3f9c3276 3f9ca6b9     .K.?...?v2.?...?
24018498:	3f9d1b8b 3f9d90fb 3f9e070c 3f9e7db3     ...?...?...?.}.?
240184a8:	3f9ef4f1 3f9f6cd7 3f9fe554 3fa05e78     ...?.l.?T..?x^.?
240184b8:	3fa0d83c 3fa152a8 3fa1cdb3 3fa24966     <..?.R.?...?fI.?
240184c8:	3fa2c5c1 3fa342cc 3fa3c07f 3fa43ed9     ...?.B.?...?.>.?
240184d8:	3fa4bde4 3fa53d9f 3fa5be0a 3fa63f25     ...?.=.?...?%?.?
240184e8:	3fa6c0f0 3fa7437c 3fa7c6b9 3fa84aae     ...?|C.?...?.J.?
240184f8:	3fa8cf5b 3fa954ca 3fa9daf0 3faa61d8     [..?.T.?...?.a.?
24018508:	3faae98a 3fab71f3 3fabfb26 3fac851b     ...?.q.?&..?...?
24018518:	3fad0fd8 3fad9b67 3fae27b7 3faeb4d9     ...?g..?.'.?...?
24018528:	3faf42cc 3fafd191 3fb06128 3fb0f199     .B.?...?(a.?...?
24018538:	3fb182dc 3fb214f9 3fb2a7f0 3fb33bc1     ...?...?...?.;.?
24018548:	3fb3d07d 3fb46613 3fb4fc8b 3fb593ee     }..?.f.?...?...?
24018558:	3fb62c34 3fb6c565 3fb75f89 3fb7fa98     4,.?e..?._.?...?
24018568:	3fb89692 3fb93387 3fb9d170 3fba7054     ...?.3.?p..?Tp.?
24018578:	3fbb102c 3fbbb107 3fbc52df 3fbcf5ba     ,..?...?.R.?...?

24018588 <__leaf_table_sinewave>:
24018588:	00000000 3b47e282 3bc8de2b 3c1691a7     ......G;+..;...<
24018598:	3c49081c 3c7b00bd 3c96bb99 3cafb7e9     ..I<..{<...<...<
240185a8:	3cc9081c 3ce2046c 3cfb3fa7 3d0a1dfc     ...<l..<.?.<...=
240185b8:	3d16bb99 3d23443d 3d2fc265 3d3c6003     ...==D#=e./=.`<=
240185c8:	3d48de2b 3d557bc8 3d62046c 3d6e8295     +.H=.{U=l.b=..n=
240185d8:	3d7b2032 3d83cf2d 3d8a0e41 3d90624e     2 {=-..=A..=Nb.=
240185e8:	3d96a162 3d9ce076 3da31f8a 3da96e59     b..=v..=...=Yn.=
240185f8:	3dafad6d 3db5f1bf 3dbc30d3 3dc26fe7     m..=...=.0.=.o.=
24018608:	3dc8aefb 3dceee0f 3dd53261 3ddb7176     ...=...=a2.=vq.=
24018618:	3de1b08a 3de7ef9e 3dee2eb2 3df46dc6     ...=...=...=.m.=
24018628:	3dfab218 3e0070b9 3e039043 3e06afcd     ...=.p.>C..>...>
24018638:	3e09c77a 3e0ce704 3e10092d 3e1320da     z..>...>-..>. .>
24018648:	3e163886 3e195810 3e1c6fbd 3e1f8f47     .8.>.X.>.o.>G..>
24018658:	3e22a6f4 3e25c140 3e28d8ed 3e2bf099     ..">@.%>..(>..+>
24018668:	3e2f0846 3e3227d0 3e3537a0 3e384f4c     F./>.'2>.75>LO8>
24018678:	3e3b66f9 3e3e8145 3e4198f2 3e44a8c1     .f;>E.>>..A>..D>
24018688:	3e47c06e 3e4ad81b 3e4de7ea 3e50ff97     n.G>..J>..M>..P>
24018698:	3e540f67 3e571f36 3e5a36e3 3e5d46b2     g.T>6.W>.6Z>.F]>
240186a8:	3e605921 3e6368f1 3e6678c0 3e698890     !Y`>.hc>.xf>..i>
240186b8:	3e6c985f 3e6fa051 3e72b021 3e75bff0     _.l>Q.o>!.r>..u>
240186c8:	3e78c7e3 3e7bd7b2 3e7edfa4 3e80f7ba     ..x>..{>..~>...>
240186d8:	3e827bb3 3e83ffac 3e8583a5 3e87079e     .{.>...>...>...>
240186e8:	3e888b97 3e8a0f91 3e8b938a 3e8d1394     ...>...>...>...>
240186f8:	3e8e978d 3e901798 3e919b91 3e931b9b     ...>...>...>...>
24018708:	3e949ba6 3e961f9f 3e979fa9 3e991fb4     ...>...>...>...>
24018718:	3e9a9bd0 3e9c1bda 3e9d9be5 3e9f1bef     ...>...>...>...>
24018728:	3ea0980b 3ea21427 3ea39431 3ea5104d     ...>'..>1..>M..>
24018738:	3ea68c69 3ea80885 3ea984a1 3eaaff6d     i..>...>...>m..>
24018748:	3eac7b89 3eadf3b6 3eaf6fd2 3eb0e7ff     .{.>...>.o.>...>
24018758:	3eb2602d 3eb3d85a 3eb55476 3eb6cca3     -`.>Z..>vT.>...>
24018768:	3eb83f92 3eb9b7bf 3ebb2fec 3ebca42b     .?.>...>./.>+..>
24018778:	3ebe1c58 3ebf9097 3ec10386 3ec277c4     X..>...>...>.w.>
24018788:	3ec3ec03 3ec56042 3ec6d480 3ec84381     ...>B`.>...>.C.>
24018798:	3ec9b7bf 3ecb280f 3ecc985f 3ece075f     ...>.(.>_..>_..>
240187a8:	3ecf77af 3ed0e7ff 3ed2584f 3ed3c361     .w.>...>OX.>a..>
240187b8:	3ed533b1 3ed6a012 3ed80c74 3ed97785     .3.>...>t..>.w.>
240187c8:	3edae3e7 3edc5048 3eddbb5a 3edf23cd     ...>HP.>Z..>.#.>
240187d8:	3ee0902e 3ee1f8a1 3ee35fc4 3ee4c836     ...>...>._.>6..>
240187e8:	3ee62f5a 3ee797cc 3ee8fc50 3eea6373     Z/.>...>P..>sc.>
240187f8:	3eebc7f7 3eed2c7c 3eee8fb0 3eeff434     ...>|,.>...>4..>
24018808:	3ef15769 3ef2bbed 3ef41c82 3ef57bc8     iW.>...>...>.{.>
24018818:	3ef6dc5d 3ef83ba3 3ef99c39 3efafb7f     ]..>.;.>9..>...>
24018828:	3efc5c14 3efdb76b 3eff1412 3f0037b5     .\.>k..>...>.7.?
24018838:	3f00e608 3f0193b4 3f024207 3f02edbb     ...?...?.B.?...?
24018848:	3f039a17 3f0447c3 3f04f228 3f059ddc     ...?.G.?(..?...?
24018858:	3f064a38 3f06f3f5 3f07a051 3f084a0e     8J.?...?Q..?.J.?
24018868:	3f08f3cb 3f099e30 3f0a47ed 3f0aefb3     ...?0..?.G.?...?
24018878:	3f0b9820 3f0c41dd 3f0cea4b 3f0d9019      ..?.A.?K..?...?
24018888:	3f0e37df 3f0ee04c 3f0f861a 3f102be9     .7.?L..?...?.+.?
24018898:	3f10d1b7 3f11782d 3f121dfc 3f12c1d3     ...?-x.?...?...?
240188a8:	3f136651 3f140a28 3f14ae00 3f1551d7     Qf.?(..?...?.Q.?
240188b8:	3f15f5ae 3f169835 3f173a15 3f17dbf5     ...?5..?.:.?...?
240188c8:	3f187dd4 3f191fb4 3f19c044 3f1a602d     .}.?...?D..?-`.?
240188d8:	3f1b020c 3f1b9ffd 3f1c3fe6 3f1cdfce     ...?...?.?.?...?
240188e8:	3f1d7dbf 3f1e1bb0 3f1eba49 3f1f583a     .}.?...?I..?:X.?
240188f8:	3f1ff62b 3f209225 3f212e1f 3f21ca19     +..?%. ?..!?..!?
24018908:	3f226613 3f23020c 3f239c0f 3f243611     .f"?..#?..#?.6$?
24018918:	3f24d014 3f256a16 3f260419 3f269c24     ..$?.j%?..&?$.&?
24018928:	3f27342f 3f27cc3a 3f286445 3f28fc50     /4'?:.'?Ed(?P.(?
24018938:	3f2991bc 3f2a27d0 3f2abde4 3f2b53f8     ..)?.'*?..*?.S+?
24018948:	3f2bea0c 3f2c7e28 3f2d1245 3f2da5b9     ..+?(~,?E.-?..-?
24018958:	3f2e39d6 3f2ecdf2 3f2f6018 3f2ff23d     .9.?...?.`/?=./?
24018968:	3f3083ba 3f3115df 3f31a60d 3f32363b     ..0?..1?..1?;62?
24018978:	3f32c7b9 3f3355ef 3f33e61d 3f347454     ..2?.U3?..3?Tt4?
24018988:	3f3503da 3f359210 3f361e4f 3f36abde     ..5?..5?O.6?..6?
24018998:	3f37381d 3f37c3b5 3f384ff4 3f38dc33     .87?..7?.O8?3.8?
240189a8:	3f3965d4 3f39f01c 3f3a79bc 3f3b0404     .e9?..9?.y:?..;?
240189b8:	3f3b8e4c 3f3c15f4 3f3c9e45 3f3d25ee     L.;?..<?E.<?.%=?
240189c8:	3f3dae3e 3f3e33f0 3f3eba49 3f3f3ffb     >.=?.3>?I.>?.???
240189d8:	3f3fc5ac 3f404a0e 3f40cfc0 3f415422     ..??.J@?..@?"TA?
240189e8:	3f41d5e5 3f425a47 3f42dc0a 3f435dcc     ..A?GZB?..B?.]C?
240189f8:	3f43e037 3f4461fa 3f44e1c6 3f456239     7.C?.aD?..D?9bE?
24018a08:	3f45e204 3f4661d0 3f46e04c 3f475e20     ..E?.aF?L.F? ^G?
24018a18:	3f47dbf5 3f4859c9 3f48d64d 3f495422     ..G?.YH?M.H?"TI?
24018a28:	3f49cfff 3f4a49e4 3f4ac5c1 3f4b404f     ..I?.IJ?..J?O@K?
24018a38:	3f4bba34 3f4c341a 3f4cac08 3f4d25ee     4.K?.4L?..L?.%M?
24018a48:	3f4d9ddc 3f4e13d3 3f4e8bc1 3f4f01b8     ..M?..N?..N?..O?
24018a58:	3f4f77af 3f4fee4e 3f50624e 3f50d845     .wO?N.O?NbP?E.P?
24018a68:	3f514c44 3f51be4d 3f52324d 3f52a3ad     DLQ?M.Q?M2R?..R?
24018a78:	3f5315b5 3f5387be 3f53f7cf 3f5469d7     ..S?..S?..S?.iT?
24018a88:	3f54d9e8 3f554802 3f55b813 3f56262d     ..T?.HU?..U?-&V?
24018a98:	3f569446 3f5701b8 3f576ddb 3f57d9fd     F.V?..W?.mW?..W?
24018aa8:	3f584620 3f58b242 3f591bc5 3f5985f0      FX?B.X?..Y?..Y?
24018ab8:	3f59f01c 3f5a5a47 3f5ac1d3 3f5b2a06     ..Y?GZZ?..Z?.*[?
24018ac8:	3f5b923a 3f5bf9c6 3f5c6003 3f5cc63f     :.[?..[?.`\??.\?
24018ad8:	3f5d2bd4 3f5d9019 3f5df3b6 3f5e57fb     .+]?..]?..]?.W^?
24018ae8:	3f5ebc41 3f5f1de7 3f5f822c 3f5fe3d2     A.^?.._?,._?.._?
24018af8:	3f604428 3f60a3d7 3f610625 3f6163dc     (D`?..`?%.a?.ca?
24018b08:	3f61c433 3f6221ea 3f628049 3f62de01     3.a?.!b?I.b?..b?
24018b18:	3f6339c1 3f639629 3f63f1e9 3f644e51     .9c?).c?..c?QNd?
24018b28:	3f64a81a 3f6501e2 3f655c53 3f65b61c     ..d?..e?S\e?..e?
24018b38:	3f660ded 3f6665bf 3f66bc41 3f671412     ..f?.ef?A.f?..g?
24018b48:	3f6769ec 3f67bfc6 3f681451 3f686a2b     .ig?..g?Q.h?+jh?
24018b58:	3f68be0e 3f690ff9 3f6963dc 3f69b5c8     ..h?..i?.ci?..i?
24018b68:	3f6a07b3 3f6a584f 3f6aaa3b 3f6afa2f     ..j?OXj?;.j?/.j?
24018b78:	3f6b4a23 3f6b9820 3f6be61d 3f6c341a     #Jk? .k?..k?.4l?
24018b88:	3f6c8217 3f6cce1c 3f6d1a22 3f6d6627     ..l?..l?".m?'fm?
24018b98:	3f6db036 3f6dfc3b 3f6e4452 3f6e8db9     6.m?;.m?RDn?..n?
24018ba8:	3f6ed5d0 3f6f1de7 3f6f65fe 3f6fae14     ..n?..o?.eo?..o?
24018bb8:	3f6ff434 3f703a54 3f707dd4 3f70c3f4     4.o?T:p?.}p?..p?
24018bc8:	3f71081c 3f714a4d 3f718dce 3f71cfff     ..q?MJq?..q?..q?
24018bd8:	3f721230 3f7251c2 3f7293f3 3f72d235     0.r?.Qr?..r?5.r?
24018be8:	3f7311c7 3f735200 3f739043 3f73cbe6     ..s?.Rs?C.s?..s?
24018bf8:	3f740a28 3f7445cc 3f748217 3f74bdba     (.t?.Et?..t?..t?
24018c08:	3f74f80e 3f7531ba 3f756c0d 3f75a3c2     ..t?.1u?.lu?..u?
24018c18:	3f75dc1e 3f7613d3 3f764c30 3f7681ed     ..u?..v?0Lv?..v?
24018c28:	3f76b852 3f76ee0f 3f7721d5 3f775643     R.v?..v?.!w?CVw?
24018c38:	3f778a09 3f77bbd8 3f77f045 3f78201d     ..w?..w?E.w?. x?
24018c48:	3f7851ec 3f7881c3 3f78b242 3f78e219     .Qx?..x?B.x?..x?
24018c58:	3f790ff9 3f793dd9 3f796bba 3f799a41     ..y?.=y?.ky?A.y?
24018c68:	3f79c62a 3f79f213 3f7a1c04 3f7a47ed     *.y?..y?..z?.Gz?
24018c78:	3f7a71de 3f7a99d9 3f7ac3ca 3f7aebc4     .qz?..z?..z?..z?
24018c88:	3f7b11c7 3f7b39c1 3f7b5fc4 3f7b85c6     ..{?.9{?._{?..{?
24018c98:	3f7ba9d2 3f7bcfd5 3f7bf3e0 3f7c15f4     ..{?..{?..{?..|?
24018ca8:	3f7c3a00 3f7c5c14 3f7c7c31 3f7c9e45     .:|?.\|?1||?E.|?
24018cb8:	3f7cbdba 3f7cddd7 3f7cfbfc 3f7d1a22     ..|?..|?..|?".}?
24018cc8:	3f7d3847 3f7d55c5 3f7d71f3 3f7d8e22     G8}?.U}?.q}?".}?
24018cd8:	3f7daa50 3f7dc3df 3f7dde16 3f7df84d     P.}?..}?..}?M.}?
24018ce8:	3f7e11dc 3f7e2a1b 3f7e41b3 3f7e57fb     ..~?.*~?.A~?.W~?
24018cf8:	3f7e6e44 3f7e83e4 3f7e9a2c 3f7eadd6     Dn~?..~?,.~?..~?
24018d08:	3f7ec227 3f7ed5d0 3f7ee829 3f7ef9db     '.~?..~?).~?..~?
24018d18:	3f7f0c35 3f7f1de7 3f7f2e49 3f7f3e03     5..?...?I..?.>.?
24018d28:	3f7f4bc7 3f7f5a32 3f7f67f5 3f7f75b8     .K.?2Z.?.g.?.u.?
24018d38:	3f7f822c 3f7f8df8 3f7f99c4 3f7fa440     ,..?...?...?@..?
24018d48:	3f7fb00c 3f7fb7e9 3f7fc1be 3f7fca43     ...?...?...?C..?
24018d58:	3f7fd220 3f7fd806 3f7fdfe3 3f7fe5c9      ..?...?...?...?
24018d68:	3f7fe9b8 3f7fee4e 3f7ff23d 3f7ff62b     ...?N..?=..?+..?
24018d78:	3f7ffa1a 3f7ffc11 3f7ffc11 3f7ffe09     ...?...?...?...?
24018d88:	3f7ffe09 3f7ffe09 3f7ffc11 3f7ffc11     ...?...?...?...?
24018d98:	3f7ffa1a 3f7ff62b 3f7ff23d 3f7fee4e     ...?+..?=..?N..?
24018da8:	3f7fe9b8 3f7fe5c9 3f7fdfe3 3f7fd806     ...?...?...?...?
24018db8:	3f7fd220 3f7fca43 3f7fc1be 3f7fb7e9      ..?C..?...?...?
24018dc8:	3f7fb00c 3f7fa440 3f7f99c4 3f7f8df8     ...?@..?...?...?
24018dd8:	3f7f822c 3f7f75b8 3f7f67f5 3f7f5a32     ,..?.u.?.g.?2Z.?
24018de8:	3f7f4bc7 3f7f3e03 3f7f2e49 3f7f1de7     .K.?.>.?I..?...?
24018df8:	3f7f0c35 3f7ef9db 3f7ee829 3f7ed5d0     5..?..~?).~?..~?
24018e08:	3f7ec227 3f7eadd6 3f7e9a2c 3f7e83e4     '.~?..~?,.~?..~?
24018e18:	3f7e6e44 3f7e57fb 3f7e41b3 3f7e2a1b     Dn~?.W~?.A~?.*~?
24018e28:	3f7e11dc 3f7df84d 3f7dde16 3f7dc3df     ..~?M.}?..}?..}?
24018e38:	3f7daa50 3f7d8e22 3f7d71f3 3f7d55c5     P.}?".}?.q}?.U}?
24018e48:	3f7d3847 3f7d1a22 3f7cfbfc 3f7cddd7     G8}?".}?..|?..|?
24018e58:	3f7cbdba 3f7c9e45 3f7c7c31 3f7c5c14     ..|?E.|?1||?.\|?
24018e68:	3f7c3a00 3f7c15f4 3f7bf3e0 3f7bcfd5     .:|?..|?..{?..{?
24018e78:	3f7ba9d2 3f7b85c6 3f7b5fc4 3f7b39c1     ..{?..{?._{?.9{?
24018e88:	3f7b11c7 3f7aebc4 3f7ac3ca 3f7a99d9     ..{?..z?..z?..z?
24018e98:	3f7a71de 3f7a47ed 3f7a1c04 3f79f213     .qz?.Gz?..z?..y?
24018ea8:	3f79c62a 3f799a41 3f796bba 3f793dd9     *.y?A.y?.ky?.=y?
24018eb8:	3f790ff9 3f78e219 3f78b242 3f7881c3     ..y?..x?B.x?..x?
24018ec8:	3f7851ec 3f78201d 3f77f045 3f77bbd8     .Qx?. x?E.w?..w?
24018ed8:	3f778a09 3f775643 3f7721d5 3f76ee0f     ..w?CVw?.!w?..v?
24018ee8:	3f76b852 3f7681ed 3f764c30 3f7613d3     R.v?..v?0Lv?..v?
24018ef8:	3f75dc1e 3f75a3c2 3f756c0d 3f7531ba     ..u?..u?.lu?.1u?
24018f08:	3f74f80e 3f74bdba 3f748217 3f7445cc     ..t?..t?..t?.Et?
24018f18:	3f740a28 3f73cbe6 3f739043 3f735200     (.t?..s?C.s?.Rs?
24018f28:	3f7311c7 3f72d235 3f7293f3 3f7251c2     ..s?5.r?..r?.Qr?
24018f38:	3f721230 3f71cfff 3f718dce 3f714a4d     0.r?..q?..q?MJq?
24018f48:	3f71081c 3f70c3f4 3f707dd4 3f703a54     ..q?..p?.}p?T:p?
24018f58:	3f6ff434 3f6fae14 3f6f65fe 3f6f1de7     4.o?..o?.eo?..o?
24018f68:	3f6ed5d0 3f6e8db9 3f6e4452 3f6dfc3b     ..n?..n?RDn?;.m?
24018f78:	3f6db036 3f6d6627 3f6d1a22 3f6cce1c     6.m?'fm?".m?..l?
24018f88:	3f6c8217 3f6c341a 3f6be61d 3f6b9820     ..l?.4l?..k? .k?
24018f98:	3f6b4a23 3f6afa2f 3f6aaa3b 3f6a584f     #Jk?/.j?;.j?OXj?
24018fa8:	3f6a07b3 3f69b5c8 3f6963dc 3f690ff9     ..j?..i?.ci?..i?
24018fb8:	3f68be0e 3f686a2b 3f681451 3f67bfc6     ..h?+jh?Q.h?..g?
24018fc8:	3f6769ec 3f671412 3f66bc41 3f6665bf     .ig?..g?A.f?.ef?
24018fd8:	3f660ded 3f65b61c 3f655c53 3f6501e2     ..f?..e?S\e?..e?
24018fe8:	3f64a81a 3f644e51 3f63f1e9 3f639629     ..d?QNd?..c?).c?
24018ff8:	3f6339c1 3f62de01 3f628049 3f6221ea     .9c?..b?I.b?.!b?
24019008:	3f61c433 3f6163dc 3f610625 3f60a3d7     3.a?.ca?%.a?..`?
24019018:	3f604428 3f5fe3d2 3f5f822c 3f5f1de7     (D`?.._?,._?.._?
24019028:	3f5ebc41 3f5e57fb 3f5df3b6 3f5d9019     A.^?.W^?..]?..]?
24019038:	3f5d2bd4 3f5cc63f 3f5c6003 3f5bf9c6     .+]??.\?.`\?..[?
24019048:	3f5b923a 3f5b2a06 3f5ac1d3 3f5a5a47     :.[?.*[?..Z?GZZ?
24019058:	3f59f01c 3f5985f0 3f591bc5 3f58b242     ..Y?..Y?..Y?B.X?
24019068:	3f584620 3f57d9fd 3f576ddb 3f5701b8      FX?..W?.mW?..W?
24019078:	3f569446 3f56262d 3f55b813 3f554802     F.V?-&V?..U?.HU?
24019088:	3f54d9e8 3f5469d7 3f53f7cf 3f5387be     ..T?.iT?..S?..S?
24019098:	3f5315b5 3f52a3ad 3f52324d 3f51be4d     ..S?..R?M2R?M.Q?
240190a8:	3f514c44 3f50d845 3f50624e 3f4fee4e     DLQ?E.P?NbP?N.O?
240190b8:	3f4f77af 3f4f01b8 3f4e8bc1 3f4e13d3     .wO?..O?..N?..N?
240190c8:	3f4d9ddc 3f4d25ee 3f4cac08 3f4c341a     ..M?.%M?..L?.4L?
240190d8:	3f4bba34 3f4b404f 3f4ac5c1 3f4a49e4     4.K?O@K?..J?.IJ?
240190e8:	3f49cfff 3f495422 3f48d64d 3f4859c9     ..I?"TI?M.H?.YH?
240190f8:	3f47dbf5 3f475e20 3f46e04c 3f4661d0     ..G? ^G?L.F?.aF?
24019108:	3f45e204 3f456239 3f44e1c6 3f4461fa     ..E?9bE?..D?.aD?
24019118:	3f43e037 3f435dcc 3f42dc0a 3f425a47     7.C?.]C?..B?GZB?
24019128:	3f41d5e5 3f415422 3f40cfc0 3f404a0e     ..A?"TA?..@?.J@?
24019138:	3f3fc5ac 3f3f3ffb 3f3eba49 3f3e33f0     ..??.???I.>?.3>?
24019148:	3f3dae3e 3f3d25ee 3f3c9e45 3f3c15f4     >.=?.%=?E.<?..<?
24019158:	3f3b8e4c 3f3b0404 3f3a79bc 3f39f01c     L.;?..;?.y:?..9?
24019168:	3f3965d4 3f38dc33 3f384ff4 3f37c3b5     .e9?3.8?.O8?..7?
24019178:	3f37381d 3f36abde 3f361e4f 3f359210     .87?..6?O.6?..5?
24019188:	3f3503da 3f347454 3f33e61d 3f3355ef     ..5?Tt4?..3?.U3?
24019198:	3f32c7b9 3f32363b 3f31a60d 3f3115df     ..2?;62?..1?..1?
240191a8:	3f3083ba 3f2ff23d 3f2f6018 3f2ecdf2     ..0?=./?.`/?...?
240191b8:	3f2e39d6 3f2da5b9 3f2d1245 3f2c7e28     .9.?..-?E.-?(~,?
240191c8:	3f2bea0c 3f2b53f8 3f2abde4 3f2a27d0     ..+?.S+?..*?.'*?
240191d8:	3f2991bc 3f28fc50 3f286445 3f27cc3a     ..)?P.(?Ed(?:.'?
240191e8:	3f27342f 3f269c24 3f260419 3f256a16     /4'?$.&?..&?.j%?
240191f8:	3f24d014 3f243611 3f239c0f 3f23020c     ..$?.6$?..#?..#?
24019208:	3f226613 3f21ca19 3f212e1f 3f209225     .f"?..!?..!?%. ?
24019218:	3f1ff62b 3f1f583a 3f1eba49 3f1e1bb0     +..?:X.?I..?...?
24019228:	3f1d7dbf 3f1cdfce 3f1c3fe6 3f1b9ffd     .}.?...?.?.?...?
24019238:	3f1b020c 3f1a602d 3f19c044 3f191fb4     ...?-`.?D..?...?
24019248:	3f187dd4 3f17dbf5 3f173a15 3f169835     .}.?...?.:.?5..?
24019258:	3f15f5ae 3f1551d7 3f14ae00 3f140a28     ...?.Q.?...?(..?
24019268:	3f136651 3f12c1d3 3f121dfc 3f11782d     Qf.?...?...?-x.?
24019278:	3f10d1b7 3f102be9 3f0f861a 3f0ee04c     ...?.+.?...?L..?
24019288:	3f0e37df 3f0d9019 3f0cea4b 3f0c41dd     .7.?...?K..?.A.?
24019298:	3f0b9820 3f0aefb3 3f0a47ed 3f099e30      ..?...?.G.?0..?
240192a8:	3f08f3cb 3f084a0e 3f07a051 3f06f3f5     ...?.J.?Q..?...?
240192b8:	3f064a38 3f059ddc 3f04f228 3f0447c3     8J.?...?(..?.G.?
240192c8:	3f039a17 3f02edbb 3f024207 3f0193b4     ...?...?.B.?...?
240192d8:	3f00e608 3f0037b5 3eff1412 3efdb76b     ...?.7.?...>k..>
240192e8:	3efc5c14 3efafb7f 3ef99c39 3ef83ba3     .\.>...>9..>.;.>
240192f8:	3ef6dc5d 3ef57bc8 3ef41c82 3ef2bbed     ]..>.{.>...>...>
24019308:	3ef15769 3eeff434 3eee8fb0 3eed2c7c     iW.>4..>...>|,.>
24019318:	3eebc7f7 3eea6373 3ee8fc50 3ee797cc     ...>sc.>P..>...>
24019328:	3ee62f5a 3ee4c836 3ee35fc4 3ee1f8a1     Z/.>6..>._.>...>
24019338:	3ee0902e 3edf23cd 3eddbb5a 3edc5048     ...>.#.>Z..>HP.>
24019348:	3edae3e7 3ed97785 3ed80c74 3ed6a012     ...>.w.>t..>...>
24019358:	3ed533b1 3ed3c361 3ed2584f 3ed0e7ff     .3.>a..>OX.>...>
24019368:	3ecf77af 3ece075f 3ecc985f 3ecb280f     .w.>_..>_..>.(.>
24019378:	3ec9b7bf 3ec84381 3ec6d480 3ec56042     ...>.C.>...>B`.>
24019388:	3ec3ec03 3ec277c4 3ec10386 3ebf9097     ...>.w.>...>...>
24019398:	3ebe1c58 3ebca42b 3ebb2fec 3eb9b7bf     X..>+..>./.>...>
240193a8:	3eb83f92 3eb6cca3 3eb55476 3eb3d85a     .?.>...>vT.>Z..>
240193b8:	3eb2602d 3eb0e7ff 3eaf6fd2 3eadf3b6     -`.>...>.o.>...>
240193c8:	3eac7b89 3eaaff6d 3ea984a1 3ea80885     .{.>m..>...>...>
240193d8:	3ea68c69 3ea5104d 3ea39431 3ea21427     i..>M..>1..>'..>
240193e8:	3ea0980b 3e9f1bef 3e9d9be5 3e9c1bda     ...>...>...>...>
240193f8:	3e9a9bd0 3e991fb4 3e979fa9 3e961f9f     ...>...>...>...>
24019408:	3e949ba6 3e931b9b 3e919b91 3e901798     ...>...>...>...>
24019418:	3e8e978d 3e8d1394 3e8b938a 3e8a0f91     ...>...>...>...>
24019428:	3e888b97 3e87079e 3e8583a5 3e83ffac     ...>...>...>...>
24019438:	3e827bb3 3e80f7ba 3e7edfa4 3e7bd7b2     .{.>...>..~>..{>
24019448:	3e78c7e3 3e75bff0 3e72b021 3e6fa051     ..x>..u>!.r>Q.o>
24019458:	3e6c985f 3e698890 3e6678c0 3e6368f1     _.l>..i>.xf>.hc>
24019468:	3e605921 3e5d46b2 3e5a36e3 3e571f36     !Y`>.F]>.6Z>6.W>
24019478:	3e540f67 3e50ff97 3e4de7ea 3e4ad81b     g.T>..P>..M>..J>
24019488:	3e47c06e 3e44a8c1 3e4198f2 3e3e8145     n.G>..D>..A>E.>>
24019498:	3e3b66f9 3e384f4c 3e3537a0 3e3227d0     .f;>LO8>.75>.'2>
240194a8:	3e2f0846 3e2bf099 3e28d8ed 3e25c140     F./>..+>..(>@.%>
240194b8:	3e22a6f4 3e1f8f47 3e1c6fbd 3e195810     ..">G..>.o.>.X.>
240194c8:	3e163886 3e1320da 3e10092d 3e0ce704     .8.>. .>-..>...>
240194d8:	3e09c77a 3e06afcd 3e039043 3e0070b9     z..>...>C..>.p.>
240194e8:	3dfab218 3df46dc6 3dee2eb2 3de7ef9e     ...=.m.=...=...=
240194f8:	3de1b08a 3ddb7176 3dd53261 3dceee0f     ...=vq.=a2.=...=
24019508:	3dc8aefb 3dc26fe7 3dbc30d3 3db5f1bf     ...=.o.=.0.=...=
24019518:	3dafad6d 3da96e59 3da31f8a 3d9ce076     m..=Yn.=...=v..=
24019528:	3d96a162 3d90624e 3d8a0e41 3d83cf2d     b..=Nb.=A..=-..=
24019538:	3d7b2032 3d6e8295 3d62046c 3d557bc8     2 {=..n=l.b=.{U=
24019548:	3d48de2b 3d3c6003 3d2fc265 3d23443d     +.H=.`<=e./==D#=
24019558:	3d16bb99 3d0a1dfc 3cfb3fa7 3ce2046c     ...=...=.?.<l..<
24019568:	3cc9081c 3cafb7e9 3c96bb99 3c7b00bd     ...<...<...<..{<
24019578:	3c49081c 3c1691a7 3bc8de2b 3b47e282     ..I<...<+..;..G;
24019588:	00000000 bb49d9d3 bbc9d9d3 bc170f7c     ......I.....|...
24019598:	bc4985f0 bc7b7e91 bc96fa83 bcaff6d3     ..I..~{.........
240195a8:	bcc94706 bce24357 bcfb7e91 bd0a3d71     .G..WC...~..q=..
240195b8:	bd16db0e bd2363b2 bd2fe1da bd3c7f78     .....c#.../.x.<.
240195c8:	bd48fda0 bd559b3d bd6223e2 bd6ea20a     ..H.=.U..#b...n.
240195d8:	bd7b3fa7 bd83dee8 bd8a1dfc bd907208     .?{..........r..
240195e8:	bd96b11c bd9cf030 bda32f45 bda97e13     ....0...E/...~..
240195f8:	bdafc265 bdb60179 bdbc408e bdc27fa2     e...y....@......
24019608:	bdc8beb6 bdcefdca bdd5421c bddb8130     .........B..0...
24019618:	bde1c044 bde7ff58 bdee3e6c bdf47d80     D...X...l>...}..
24019628:	bdfac1d3 be007896 be039820 be06b7aa     .....x.. .......
24019638:	be09cf57 be0ceee1 be10110a be1328b7     W............(..
24019648:	be164064 be195fee be1c779a be1f9724     d@..._...w..$...
24019658:	be22aed1 be25c91d be28e0ca be2bf877     .."...%...(.w.+.
24019668:	be2f1023 be322fad be353f7d be38572a     #./../2.}?5.*W8.
24019678:	be3b6ed6 be3e8922 be41a0cf be44b09f     .n;.".>...A...D.
24019688:	be47c84b be4adff8 be4defc8 be510774     K.G...J...M.t.Q.
24019698:	be541744 be572713 be5a3ec0 be5d512f     D.T..'W..>Z./Q].
240196a8:	be6060fe be6370ce be66809d be69906d     .``..pc...f.m.i.
240196b8:	be6ca03c be6fa82f be72b7fe be75c7ce     <.l./.o...r...u.
240196c8:	be78cfc0 be7bdf8f be7ee782 be80fba9     ..x...{...~.....
240196d8:	be827fa2 be84039b be858794 be870b8d     ................
240196e8:	be888f86 be8a137f be8b9778 be8d1783     ........x.......
240196f8:	be8e9b7c be901b86 be919f80 be931f8a     |...............
24019708:	be949f95 be96238e be97a398 be9923a3     .....#.......#..
24019718:	be9a9fbe be9c1fc9 be9d9fd3 be9f1fde     ................
24019728:	bea09bfa bea21816 bea39820 bea5143c     ........ ...<...
24019738:	bea69058 bea80c74 bea98890 beab035c     X...t.......\...
24019748:	beac7f78 beadf7a5 beaf73c1 beb0ebee     x........s......
24019758:	beb2641b beb3dc48 beb55864 beb6d091     .d..H...dX......
24019768:	beb84381 beb9bbae bebb33db bebca81a     .C.......3......
24019778:	bebe2047 bebf9485 bec10774 bec27bb3     G ......t....{..
24019788:	bec3eff2 bec56430 bec6d86f bec8476f     ....0d..o...oG..
24019798:	bec9bbae becb2bfe becc9c4e bece0c9e     .....+..N.......
240197a8:	becf7b9e bed0ebee bed25c3e bed3c89f     .{......>\......
240197b8:	bed537a0 bed6a401 bed81062 bed97b74     .7......b...t{..
240197c8:	bedae7d5 bedc5437 beddc098 bedf27bb     ....7T.......'..
240197d8:	bee0941d bee1fc8f bee363b2 bee4cc25     .........c..%...
240197e8:	bee63498 bee79bbb bee9003f beea6762     .4......?...bg..
240197f8:	beebcbe6 beed306a beee939f beeff823     ....j0......#...
24019808:	bef15ca7 bef2bfdb bef42071 bef57fb7     .\......q ......
24019818:	bef6e04c bef83f92 bef9a027 befaff6d     L....?..'...m...
24019828:	befc6003 befdbb5a beff1801 bf003a54     .`..Z.......T:..
24019838:	bf00e7ff bf019653 bf0243fe bf02efb3     ....S....C......
24019848:	bf039c0f bf0449ba bf04f41f bf059fd3     .....I..........
24019858:	bf064c30 bf06f5ed bf07a249 bf084c06     0L......I....L..
24019868:	bf08f5c3 bf09a027 bf0a49e4 bf0af252     ....'....I..R...
24019878:	bf0b9a17 bf0c43d4 bf0cec42 bf0d9210     .....C..B.......
24019888:	bf0e39d6 bf0ee243 bf0f8812 bf102de0     .9..C........-..
24019898:	bf10d3ae bf117a25 bf121ff3 bf12c3ca     ....%z..........
240198a8:	bf136849 bf140c20 bf14aff7 bf1553ce     Ih.. ........S..
240198b8:	bf15f84d bf169a2c bf173c0c bf17ddec     M...,....<......
240198c8:	bf187fcc bf192253 bf19c23b bf1a6224     ....S"..;...$b..
240198d8:	bf1b0404 bf1ba1f5 bf1c41dd bf1ce1c6     .........A......
240198e8:	bf1d7fb7 bf1e1e4f bf1ebc41 bf1f5a32     ....O...A...2Z..
240198f8:	bf1ff823 bf20941d bf213016 bf21cc10     #..... ..0!...!.
24019908:	bf22680a bf230404 bf239e06 bf243809     .h"...#...#..8$.
24019918:	bf24d20b bf256c0d bf260610 bf269e1b     ..$..l%...&...&.
24019928:	bf273626 bf27ce31 bf28663c bf28fe48     &6'.1.'.<f(.H.(.
24019938:	bf2993b4 bf2a29c7 bf2abfdb bf2b55ef     ..)..)*...*..U+.
24019948:	bf2bec03 bf2c801f bf2d143c bf2da7b1     ..+...,.<.-...-.
24019958:	bf2e3bcd bf2ecfea bf2f620f bf2ff434     .;.......b/.4./.
24019968:	bf3085b2 bf3117d7 bf31a805 bf323832     ..0...1...1.282.
24019978:	bf32c9b0 bf3357e6 bf33e814 bf34764b     ..2..W3...3.Kv4.
24019988:	bf3505d1 bf359408 bf362047 bf36add6     ..5...5.G 6...6.
24019998:	bf373a15 bf37c5ac bf3851ec bf38de2b     .:7...7..Q8.+.8.
240199a8:	bf3967cb bf39f213 bf3a7bb3 bf3b05fb     .g9...9..{:...;.
240199b8:	bf3b9043 bf3c17ec bf3ca03c bf3d27e5     C.;...<.<.<..'=.
240199c8:	bf3db036 bf3e35e7 bf3ebc41 bf3f41f2     6.=..5>.A.>..A?.
240199d8:	bf3fc84b bf404c06 bf40d1b7 bf415619     K.?..L@...@..VA.
240199e8:	bf41d7dc bf425c3e bf42de01 bf435fc4     ..A.>\B...B.._C.
240199f8:	bf43e22e bf4463f1 bf44e3bd bf456430     ..C..cD...D.0dE.
24019a08:	bf45e3fc bf4663c7 bf46e243 bf476018     ..E..cF.C.F..`G.
24019a18:	bf47ddec bf485bc0 bf48d845 bf495619     ..G..[H.E.H..VI.
24019a28:	bf49d1f6 bf4a4bdc bf4ac7b9 bf4b4246     ..I..KJ...J.FBK.
24019a38:	bf4bbc2c bf4c3611 bf4cae00 bf4d27e5     ,.K..6L...L..'M.
24019a48:	bf4d9fd3 bf4e15ca bf4e8db9 bf4f03b0     ..M...N...N...O.
24019a58:	bf4f7a4e bf4ff045 bf506445 bf50da3c     NzO.E.O.EdP.<.P.
24019a68:	bf514e3c bf51c044 bf523444 bf52a64c     <NQ.D.Q.D4R.L.R.
24019a78:	bf5317ad bf5389b5 bf53f9c6 bf546bcf     ..S...S...S..kT.
24019a88:	bf54dbe0 bf5549f9 bf55ba0a bf562824     ..T..IU...U.$(V.
24019a98:	bf56963e bf5703b0 bf576fd2 bf57dbf5     >.V...W..oW...W.
24019aa8:	bf584817 bf58b439 bf591dbd bf5987e8     .HX.9.X...Y...Y.
24019ab8:	bf59f213 bf5a5c3e bf5ac3ca bf5b2bfe     ..Y.>\Z...Z..+[.
24019ac8:	bf5b9431 bf5bfbbd bf5c61fa bf5cc836     1.[...[..a\.6.\.
24019ad8:	bf5d2dcb bf5d9210 bf5df5ae bf5e59f3     .-]...]...]..Y^.
24019ae8:	bf5ebe38 bf5f1fde bf5f8423 bf5fe5c9     8.^..._.#._..._.
24019af8:	bf604620 bf60a5ce bf61081c bf6165d4      F`...`...a..ea.
24019b08:	bf61c62a bf6223e2 bf628241 bf62dff8     *.a..#b.A.b...b.
24019b18:	bf633bb8 bf639820 bf63f3e0 bf645048     .;c. .c...c.HPd.
24019b28:	bf64aa11 bf6503da bf655e4a bf65b813     ..d...e.J^e...e.
24019b38:	bf660fe4 bf6667b6 bf66be38 bf671609     ..f..gf.8.f...g.
24019b48:	bf676be3 bf67c1be bf681648 bf686c22     .kg...g.H.h."lh.
24019b58:	bf68c005 bf6911f1 bf6965d4 bf69b7bf     ..h...i..ei...i.
24019b68:	bf6a0a52 bf6a5a47 bf6aac32 bf6afc26     R.j.GZj.2.j.&.j.
24019b78:	bf6b4c1b bf6b9a17 bf6be814 bf6c3611     .Lk...k...k..6l.
24019b88:	bf6c840e bf6cd014 bf6d1c19 bf6d681f     ..l...l...m..hm.
24019b98:	bf6db22d bf6dfe33 bf6e464a bf6e8fb0     -.m.3.m.JFn...n.
24019ba8:	bf6ed7c7 bf6f1fde bf6f67f5 bf6fb00c     ..n...o..go...o.
24019bb8:	bf6ff62b bf703c4b bf707fcc bf70c5eb     +.o.K<p...p...p.
24019bc8:	bf710a13 bf714c44 bf718fc5 bf71d1f6     ..q.DLq...q...q.
24019bd8:	bf721427 bf7253b9 bf7295ea bf72d42c     '.r..Sr...r.,.r.
24019be8:	bf7313be bf7353f8 bf73923a bf73cddd     ..s..Ss.:.s...s.
24019bf8:	bf740c20 bf7447c3 bf74840e bf74bfb1      .t..Gt...t...t.
24019c08:	bf74fa05 bf7533b1 bf756e05 bf75a5b9     ..t..3u..nu...u.
24019c18:	bf75de16 bf7615ca bf764e27 bf7683e4     ..u...v.'Nv...v.
24019c28:	bf76ba49 bf76f007 bf7723cd bf77583a     I.v...v..#w.:Xw.
24019c38:	bf778c00 bf77bdcf bf77f23d bf782214     ..w...w.=.w.."x.
24019c48:	bf7853e3 bf7883ba bf78b439 bf78e411     .Sx...x.9.x...x.
24019c58:	bf7911f1 bf793fd1 bf796db1 bf799c39     ..y..?y..my.9.y.
24019c68:	bf79c821 bf79f40a bf7a1dfc bf7a49e4     !.y...y...z..Iz.
24019c78:	bf7a73d6 bf7a9bd0 bf7ac5c1 bf7aedbb     .sz...z...z...z.
24019c88:	bf7b13be bf7b3bb8 bf7b61bb bf7b87be     ..{..;{..a{...{.
24019c98:	bf7babc9 bf7bd1cc bf7bf5d8 bf7c17ec     ..{...{...{...|.
24019ca8:	bf7c3bf7 bf7c5e0b bf7c7e28 bf7ca03c     .;|..^|.(~|.<.|.
24019cb8:	bf7cbfb1 bf7cdfce bf7cfdf4 bf7d1c19     ..|...|...|...}.
24019cc8:	bf7d3a3f bf7d57bc bf7d73eb bf7d9019     ?:}..W}..s}...}.
24019cd8:	bf7dac47 bf7dc5d6 bf7de00d bf7dfa44     G.}...}...}.D.}.
24019ce8:	bf7e13d3 bf7e2c13 bf7e4452 bf7e59f3     ..~..,~.RD~..Y~.
24019cf8:	bf7e703b bf7e85db bf7e9c24 bf7eafcd     ;p~...~.$.~...~.
24019d08:	bf7ec41e bf7ed7c7 bf7eea21 bf7efbd2     ..~...~.!.~...~.
24019d18:	bf7f0e2c bf7f1fde bf7f3040 bf7f3ffb     ,.......@0...?..
24019d28:	bf7f4dbe bf7f5c29 bf7f69ec bf7f77af     .M..)\...i...w..
24019d38:	bf7f8423 bf7f8fef bf7f9bbb bf7fa637     #...........7...
24019d48:	bf7fb203 bf7fb9e0 bf7fc3b5 bf7fcc3a     ............:...
24019d58:	bf7fd417 bf7fd9fd bf7fe1da bf7fe7c0     ................
24019d68:	bf7febaf bf7ff045 bf7ff434 bf7ff823     ....E...4...#...
24019d78:	bf7ffc11 bf7ffe09 bf7ffe09 bf800000     ................
24019d88:	bf800000 bf800000 bf7ffe09 bf7ffe09     ................
24019d98:	bf7ffc11 bf7ff823 bf7ff434 bf7ff045     ....#...4...E...
24019da8:	bf7febaf bf7fe7c0 bf7fe1da bf7fd9fd     ................
24019db8:	bf7fd417 bf7fcc3a bf7fc3b5 bf7fb9e0     ....:...........
24019dc8:	bf7fb203 bf7fa637 bf7f9bbb bf7f8fef     ....7...........
24019dd8:	bf7f8423 bf7f77af bf7f69ec bf7f5c29     #....w...i..)\..
24019de8:	bf7f4dbe bf7f3ffb bf7f3040 bf7f1fde     .M...?..@0......
24019df8:	bf7f0e2c bf7efbd2 bf7eea21 bf7ed7c7     ,.....~.!.~...~.
24019e08:	bf7ec41e bf7eafcd bf7e9c24 bf7e85db     ..~...~.$.~...~.
24019e18:	bf7e703b bf7e59f3 bf7e4452 bf7e2c13     ;p~..Y~.RD~..,~.
24019e28:	bf7e13d3 bf7dfa44 bf7de00d bf7dc5d6     ..~.D.}...}...}.
24019e38:	bf7dac47 bf7d9019 bf7d73eb bf7d57bc     G.}...}..s}..W}.
24019e48:	bf7d3a3f bf7d1c19 bf7cfdf4 bf7cdfce     ?:}...}...|...|.
24019e58:	bf7cbfb1 bf7ca03c bf7c7e28 bf7c5e0b     ..|.<.|.(~|..^|.
24019e68:	bf7c3bf7 bf7c17ec bf7bf5d8 bf7bd1cc     .;|...|...{...{.
24019e78:	bf7babc9 bf7b87be bf7b61bb bf7b3bb8     ..{...{..a{..;{.
24019e88:	bf7b13be bf7aedbb bf7ac5c1 bf7a9bd0     ..{...z...z...z.
24019e98:	bf7a73d6 bf7a49e4 bf7a1dfc bf79f40a     .sz..Iz...z...y.
24019ea8:	bf79c821 bf799c39 bf796db1 bf793fd1     !.y.9.y..my..?y.
24019eb8:	bf7911f1 bf78e411 bf78b439 bf7883ba     ..y...x.9.x...x.
24019ec8:	bf7853e3 bf782214 bf77f23d bf77bdcf     .Sx.."x.=.w...w.
24019ed8:	bf778c00 bf77583a bf7723cd bf76f007     ..w.:Xw..#w...v.
24019ee8:	bf76ba49 bf7683e4 bf764e27 bf7615ca     I.v...v.'Nv...v.
24019ef8:	bf75de16 bf75a5b9 bf756e05 bf7533b1     ..u...u..nu..3u.
24019f08:	bf74fa05 bf74bfb1 bf74840e bf7447c3     ..t...t...t..Gt.
24019f18:	bf740c20 bf73cddd bf73923a bf7353f8      .t...s.:.s..Ss.
24019f28:	bf7313be bf72d42c bf7295ea bf7253b9     ..s.,.r...r..Sr.
24019f38:	bf721427 bf71d1f6 bf718fc5 bf714c44     '.r...q...q.DLq.
24019f48:	bf710a13 bf70c5eb bf707fcc bf703c4b     ..q...p...p.K<p.
24019f58:	bf6ff62b bf6fb00c bf6f67f5 bf6f1fde     +.o...o..go...o.
24019f68:	bf6ed7c7 bf6e8fb0 bf6e464a bf6dfe33     ..n...n.JFn.3.m.
24019f78:	bf6db22d bf6d681f bf6d1c19 bf6cd014     -.m..hm...m...l.
24019f88:	bf6c840e bf6c3611 bf6be814 bf6b9a17     ..l..6l...k...k.
24019f98:	bf6b4c1b bf6afc26 bf6aac32 bf6a5a47     .Lk.&.j.2.j.GZj.
24019fa8:	bf6a0a52 bf69b7bf bf6965d4 bf6911f1     R.j...i..ei...i.
24019fb8:	bf68c005 bf686c22 bf681648 bf67c1be     ..h."lh.H.h...g.
24019fc8:	bf676be3 bf671609 bf66be38 bf6667b6     .kg...g.8.f..gf.
24019fd8:	bf660fe4 bf65b813 bf655e4a bf6503da     ..f...e.J^e...e.
24019fe8:	bf64aa11 bf645048 bf63f3e0 bf639820     ..d.HPd...c. .c.
24019ff8:	bf633bb8 bf62dff8 bf628241 bf6223e2     .;c...b.A.b..#b.
2401a008:	bf61c62a bf6165d4 bf61081c bf60a5ce     *.a..ea...a...`.
2401a018:	bf604620 bf5fe5c9 bf5f8423 bf5f1fde      F`..._.#._..._.
2401a028:	bf5ebe38 bf5e59f3 bf5df5ae bf5d9210     8.^..Y^...]...].
2401a038:	bf5d2dcb bf5cc836 bf5c61fa bf5bfbbd     .-].6.\..a\...[.
2401a048:	bf5b9431 bf5b2bfe bf5ac3ca bf5a5c3e     1.[..+[...Z.>\Z.
2401a058:	bf59f213 bf5987e8 bf591dbd bf58b439     ..Y...Y...Y.9.X.
2401a068:	bf584817 bf57dbf5 bf576fd2 bf5703b0     .HX...W..oW...W.
2401a078:	bf56963e bf562824 bf55ba0a bf5549f9     >.V.$(V...U..IU.
2401a088:	bf54dbe0 bf546bcf bf53f9c6 bf5389b5     ..T..kT...S...S.
2401a098:	bf5317ad bf52a64c bf523444 bf51c044     ..S.L.R.D4R.D.Q.
2401a0a8:	bf514e3c bf50da3c bf506445 bf4ff045     <NQ.<.P.EdP.E.O.
2401a0b8:	bf4f7a4e bf4f03b0 bf4e8db9 bf4e15ca     NzO...O...N...N.
2401a0c8:	bf4d9fd3 bf4d27e5 bf4cae00 bf4c3611     ..M..'M...L..6L.
2401a0d8:	bf4bbc2c bf4b4246 bf4ac7b9 bf4a4bdc     ,.K.FBK...J..KJ.
2401a0e8:	bf49d1f6 bf495619 bf48d845 bf485bc0     ..I..VI.E.H..[H.
2401a0f8:	bf47ddec bf476018 bf46e243 bf4663c7     ..G..`G.C.F..cF.
2401a108:	bf45e3fc bf456430 bf44e3bd bf4463f1     ..E.0dE...D..cD.
2401a118:	bf43e22e bf435fc4 bf42de01 bf425c3e     ..C.._C...B.>\B.
2401a128:	bf41d7dc bf415619 bf40d1b7 bf404c06     ..A..VA...@..L@.
2401a138:	bf3fc84b bf3f41f2 bf3ebc41 bf3e35e7     K.?..A?.A.>..5>.
2401a148:	bf3db036 bf3d27e5 bf3ca03c bf3c17ec     6.=..'=.<.<...<.
2401a158:	bf3b9043 bf3b05fb bf3a7bb3 bf39f213     C.;...;..{:...9.
2401a168:	bf3967cb bf38de2b bf3851ec bf37c5ac     .g9.+.8..Q8...7.
2401a178:	bf373a15 bf36add6 bf362047 bf359408     .:7...6.G 6...5.
2401a188:	bf3505d1 bf34764b bf33e814 bf3357e6     ..5.Kv4...3..W3.
2401a198:	bf32c9b0 bf323832 bf31a805 bf3117d7     ..2.282...1...1.
2401a1a8:	bf3085b2 bf2ff434 bf2f620f bf2ecfea     ..0.4./..b/.....
2401a1b8:	bf2e3bcd bf2da7b1 bf2d143c bf2c801f     .;....-.<.-...,.
2401a1c8:	bf2bec03 bf2b55ef bf2abfdb bf2a29c7     ..+..U+...*..)*.
2401a1d8:	bf2993b4 bf28fe48 bf28663c bf27ce31     ..).H.(.<f(.1.'.
2401a1e8:	bf273626 bf269e1b bf260610 bf256c0d     &6'...&...&..l%.
2401a1f8:	bf24d20b bf243809 bf239e06 bf230404     ..$..8$...#...#.
2401a208:	bf22680a bf21cc10 bf213016 bf20941d     .h"...!..0!... .
2401a218:	bf1ff823 bf1f5a32 bf1ebc41 bf1e1e4f     #...2Z..A...O...
2401a228:	bf1d7fb7 bf1ce1c6 bf1c41dd bf1ba1f5     .........A......
2401a238:	bf1b0404 bf1a6224 bf19c23b bf192253     ....$b..;...S"..
2401a248:	bf187fcc bf17ddec bf173c0c bf169a2c     .........<..,...
2401a258:	bf15f84d bf1553ce bf14aff7 bf140c20     M....S...... ...
2401a268:	bf136849 bf12c3ca bf121ff3 bf117a25     Ih..........%z..
2401a278:	bf10d3ae bf102de0 bf0f8812 bf0ee243     .....-......C...
2401a288:	bf0e39d6 bf0d9210 bf0cec42 bf0c43d4     .9......B....C..
2401a298:	bf0b9a17 bf0af252 bf0a49e4 bf09a027     ....R....I..'...
2401a2a8:	bf08f5c3 bf084c06 bf07a249 bf06f5ed     .....L..I.......
2401a2b8:	bf064c30 bf059fd3 bf04f41f bf0449ba     0L...........I..
2401a2c8:	bf039c0f bf02efb3 bf0243fe bf019653     .........C..S...
2401a2d8:	bf00e7ff bf003a54 beff1801 befdbb5a     ....T:......Z...
2401a2e8:	befc6003 befaff6d bef9a027 bef83f92     .`..m...'....?..
2401a2f8:	bef6e04c bef57fb7 bef42071 bef2bfdb     L.......q ......
2401a308:	bef15ca7 beeff823 beee939f beed306a     .\..#.......j0..
2401a318:	beebcbe6 beea6762 bee9003f bee79bbb     ....bg..?.......
2401a328:	bee63498 bee4cc25 bee363b2 bee1fc8f     .4..%....c......
2401a338:	bee0941d bedf27bb beddc098 bedc5437     .....'......7T..
2401a348:	bedae7d5 bed97b74 bed81062 bed6a401     ....t{..b.......
2401a358:	bed537a0 bed3c89f bed25c3e bed0ebee     .7......>\......
2401a368:	becf7b9e bece0c9e becc9c4e becb2bfe     .{......N....+..
2401a378:	bec9bbae bec8476f bec6d86f bec56430     ....oG..o...0d..
2401a388:	bec3eff2 bec27bb3 bec10774 bebf9485     .....{..t.......
2401a398:	bebe2047 bebca81a bebb33db beb9bbae     G .......3......
2401a3a8:	beb84381 beb6d091 beb55864 beb3dc48     .C......dX..H...
2401a3b8:	beb2641b beb0ebee beaf73c1 beadf7a5     .d.......s......
2401a3c8:	beac7f78 beab035c bea98890 bea80c74     x...\.......t...
2401a3d8:	bea69058 bea5143c bea39820 bea21816     X...<... .......
2401a3e8:	bea09bfa be9f1fde be9d9fd3 be9c1fc9     ................
2401a3f8:	be9a9fbe be9923a3 be97a398 be96238e     .....#.......#..
2401a408:	be949f95 be931f8a be919f80 be901b86     ................
2401a418:	be8e9b7c be8d1783 be8b9778 be8a137f     |.......x.......
2401a428:	be888f86 be870b8d be858794 be84039b     ................
2401a438:	be827fa2 be80fba9 be7ee782 be7bdf8f     ..........~...{.
2401a448:	be78cfc0 be75c7ce be72b7fe be6fa82f     ..x...u...r./.o.
2401a458:	be6ca03c be69906d be66809d be6370ce     <.l.m.i...f..pc.
2401a468:	be6060fe be5d512f be5a3ec0 be572713     .``./Q]..>Z..'W.
2401a478:	be541744 be510774 be4defc8 be4adff8     D.T.t.Q...M...J.
2401a488:	be47c84b be44b09f be41a0cf be3e8922     K.G...D...A.".>.
2401a498:	be3b6ed6 be38572a be353f7d be322fad     .n;.*W8.}?5../2.
2401a4a8:	be2f1023 be2bf877 be28e0ca be25c91d     #./.w.+...(...%.
2401a4b8:	be22aed1 be1f9724 be1c779a be195fee     ..".$....w..._..
2401a4c8:	be164064 be1328b7 be10110a be0ceee1     d@...(..........
2401a4d8:	be09cf57 be06b7aa be039820 be007896     W....... ....x..
2401a4e8:	bdfac1d3 bdf47d80 bdee3e6c bde7ff58     .....}..l>..X...
2401a4f8:	bde1c044 bddb8130 bdd5421c bdcefdca     D...0....B......
2401a508:	bdc8beb6 bdc27fa2 bdbc408e bdb60179     .........@..y...
2401a518:	bdafc265 bda97e13 bda32f45 bd9cf030     e....~..E/..0...
2401a528:	bd96b11c bd907208 bd8a1dfc bd83dee8     .....r..........
2401a538:	bd7b3fa7 bd6ea20a bd6223e2 bd559b3d     .?{...n..#b.=.U.
2401a548:	bd48fda0 bd3c7f78 bd2fe1da bd2363b2     ..H.x.<.../..c#.
2401a558:	bd16db0e bd0a3d71 bcfb7e91 bce24357     ....q=...~..WC..
2401a568:	bcc94706 bcaff6d3 bc96fa83 bc7b7e91     .G...........~{.
2401a578:	bc4985f0 bc170f7c bbc9d9d3 bb49d9d3     ..I.|.........I.

2401a588 <slope_dd_table>:
	...
2401a624:	2cab8ce3 2d68347f 2deb01ac 2e544fe2     ...,.4h-...-.OT.
2401a634:	2eb4d9a2 2f1478c0 2f6d355b 2fb9305e     .....x./[5m/^0./
2401a644:	300d9bec 30546b62 309c713f 30e28342     ...0bkT0?q.0B..0
2401a654:	31215d25 316277dc 319cb3d0 31d609f3     %]!1.wb1...1...1
2401a664:	321068d1 3240ab9c 327e5e66 32a64673     .h.2..@2f^~2sF.2
2401a674:	32d7679c 330a5764 3330496c 335ef8ba     .g.2dW.3lI03..^3
2401a684:	338c0709 33aeb9ae 33d8adc2 340592c9     ...3...3...3...4
2401a694:	3423c86b 3447c905 347281d6 34927fa8     k.#4..G4..r4...4
2401a6a4:	34b03812 34d3147a 34fbd406 3515a661     .8.4z..4...4a..5
2401a6b4:	353136ea 355120e8 3575f8a9 3590316c     .615. Q5..u5l1.5
2401a6c4:	35a88b00 35c46df5 35e449d3 36044cb4     ...5.m.5.I.5.L.6
2401a6d4:	3618f201 36305f16 364ae57f 3668de86     ...6._06..J6..h6
2401a6e4:	368555ed 36985c1c 36adbc07 36c5b517     .U.6.\.6...6...6
2401a6f4:	36e08c51 36fe8cae 371003cc 3722aaa7     Q..6...6...7.."7
2401a704:	37376ab0 374e7796 37680929 37822de0     .j77.wN7).h7.-.7
2401a714:	3791d827 37a3266e 37b63e57 37cb4867     '..7n&.7W>.7gH.7
2401a724:	37e2701a 37fbe415 380beb2e 381b3e47     .p.7...7...8G>.8
2401a734:	382c07fc 383e66f3 38527bee 386869e2     ..,8.f>8.{R8.ih8
2401a744:	38802b0b 388d3423 389b6562 38aad54a     .+.8#4.8be.8J..8
2401a754:	38bb9bce 38cdd25a 38e193ee 38f6fd38     ...8Z..8...88..8
2401a764:	3907164c 3913a123 3921301d 392fd553     L..9#..9.0!9S./9
2401a774:	393fa3cd 3950afad 39630e43 3976d600     ..?9..P9C.c9..v9
2401a784:	39860f46 39918074 399dcbac 39aafec7     F..9t..9...9...9
2401a794:	39b92855 39c857a7 39d89cd5 39ea08cb     U(.9.W.9...9...9
2401a7a4:	39fcad41 3a084e6f 3a12f592 3a1e5647     A..9oN.:...:GV.:
2401a7b4:	3a2a7b43 3a376fc2 3a453f7f 3a53f6c4     C{*:.o7:.?E:..S:
2401a7c4:	3a63a266 3a744fcf 3a830681 3a8c744b     f.c:.Ot:...:Kt.:
2401a7d4:	3a9678ed 3aa11c4d 3aac66c8 3ab860eb     .x.:M..:.f.:.`.:
2401a7e4:	3ac513c6 3ad288a3 3ae0c93f 3aefdfc4     ...:...:?..:...:
2401a7f4:	3affd6a9 3b085c70 3b1148db 3b1ab683     ...:p\.;.H.;...;
2401a804:	3b24ab75 3b2f2e12 3b3a44e0 3b45f6af     u.$;../;.D:;..E;
2401a814:	3b524a8c 3b5f47b9 3b6cf5c4 3b7b5c7a     .JR;.G_;..l;z\{;
2401a824:	3b8541f6 3b8d3a34 3b959b48 3b9e699e     .A.;4:.;H..;.i.;
2401a834:	3ba7a9d0 3bb16098 3bbb92d5 3bc6458e     ...;.`.;...;.E.;
2401a844:	3bd17df1 3bdd4153 3be99532 3bf67f36     .}.;SA.;2..;6..;
2401a854:	3c020297 3c09168a 3c107e87 3c183db6     ...<...<.~.<.=.<
2401a864:	3c205754 3c28ceb6 3c31a742 3c3ae482     TW <..(<B.1<..:<
2401a874:	3c448a08 3c4e9b84 3c591cbc 3c64118d     ..D<..N<..Y<..d<
2401a884:	3c6f7de7 3c7b65dd 3c83e6ca 3c8a5ca0     .}o<.e{<...<.\.<
2401a894:	3c91169e 3c9816f8 3c9f5ff2 3ca6f3da     ...<...<._.<...<
2401a8a4:	3caed50a 3cb705eb 3cbf88ec 3cc8608c     ...<...<...<.`.<
2401a8b4:	3cd18f5a 3cdb17e9 3ce4fcdf 3cef40eb     Z..<...<...<.@.<
2401a8c4:	3cf9e6c1 3d027898 3d083185 3d0e1f93     ...<.x.=.1.=...=
2401a8d4:	3d14443a 3d1aa0f3 3d213740 3d2808a3     :D.=...=@7!=..(=
2401a8e4:	3d2f16a6 3d3662de 3d3deede 3d45bc3f     ../=.b6=..==?.E=
2401a8f4:	3d4dcca4 3d5621b0 3d5ebd0a 3d67a063     ..M=.!V=..^=c.g=
2401a904:	3d70cd6d 3d7a45dc 3d8205b5 3d870fee     m.p=.Ez=...=...=
2401a914:	3d8c4276 3d919e34 3d97240a 3d9cd4e1     vB.=4..=.$.=...=
2401a924:	3da2b19e 3da8bb2d 3daef277 3db55868     ...=-..=w..=hX.=
2401a934:	3dbbedee 3dc2b3f6 3dc9ab70 3dd0d548     ...=...=p..=H..=
2401a944:	3dd83276 3ddfc3dd 3de78a7b 3def8734     v2.=...={..=4..=
2401a954:	3df7bb08 3e00136d 3e0465d4 3e08d526     ...=m..>.e.>&..>
2401a964:	3e0d61e8 3e120c86 3e16d57f 3e1bbd4c     .a.>...>...>L..>
2401a974:	3e20c452 3e25eb16 3e2b3205 3e309997     R. >..%>.2+>..0>
2401a984:	3e362237 3e3bcc5f 3e319872 3e2786ea     7"6>_.;>r.1>..'>
2401a994:	3e1d9833 3e13ccb6 3e0a24e1 3e00a116     3..>...>.$.>...>
2401a9a4:	3dee8386 3ddc0e97 3dc9e41b 3db804df     ...=...=...=...=
2401a9b4:	3da6719c 3d952b10 3d8431ec 3d670dc3     .q.=.+.=.1.=..g=
2401a9c4:	3d465539 3d263b89 3d06c1eb 3ccfd33c     9UF=.;&=...=<..<
2401a9d4:	3c936791 3c30861a 3b733efc bb513f96     .g.<..0<.>s;.?Q.
2401a9e4:	bc22d4f0 bc875dd8 bcbc005c bcef5060     .."..]..\...`P..
2401a9f4:	bd10a636 bd28f986 bd40a183 bd579d99     6.....(...@...W.
2401aa04:	bd6ded43 bd81c805 bd8c42c9 bd9666c0     C.m......B...f..
2401aa14:	bda033cd bda9a9d4 bdb2c8c6 bdbb909f     .3..............
2401aa24:	bdc4015e bdcc1b10 bdd3ddce bddb499d     ^............I..
2401aa34:	bde25ed0 bde91d73 bdef85ca bdf59818     .^..s...........
2401aa44:	bdfb54ad be005df4 be02e70c be0545dc     .T...].......E..
2401aa54:	be077a98 be09857e be0b66de be0d1ef5     .z..~....f......
2401aa64:	be0eae12 be10148d be1152be be1268fb     .........R...h..
2401aa74:	be1357b1 be141f3c be14c00f be153a96     .W..<........:..
2401aa84:	be158f49 be15bea1 be15c91d be15af3d     I...........=...
2401aa94:	be15718f be15109e be148cff be13e73e     .q..........>...
2401aaa4:	be131ffc be1237d5 be112f6f be10076b     .....7..o/..k...
2401aab4:	be0ec079 be0d5b46 be0bd889 be0a38f5     y...F[.......8..
2401aac4:	be087d41 be06a635 be04b487 be02a8ff     A}..5...........
2401aad4:	be008469 bdfc8f17 bdf7e671 bdf3107e     i.......q...~...
2401aae4:	bdee0eec bde8e34e bde38f6c bdde14f4     ....N...l.......
2401aaf4:	bdd875ad bdd2b339 bdcccf6c bdc6cc11     .u..9...l.......
2401ab04:	bdc0aadf bdba6da6 bdb41633 bdada656     .....m..3...V...
2401ab14:	bda71fdb bda08496 bd99d658 bd9316f5     ........X.......
2401ab24:	bd8c483d bd856c05 bd7d0841 bd6f24b9     =H...l..A.}..$o.
2401ab34:	bd613118 bd5330fd bd4527fb bd3719aa     .1a..0S..'E...7.
2401ab44:	bd290997 bd1afb4c bd0cf249 bcfde417     ..).L...I.......
2401ab54:	bce1fc09 bcc63335 bcaa905d bc8f1a24     ....53..]...$...
2401ab64:	bc67ae45 bc319ba4 bbf8124f bb8e06b8     E.g...1.O.......
2401ab74:	ba94b4b6 3b04c42c 3ba88f58 3c06a1ae     ....,..;X..;...<
2401ab84:	3c3833b9 3c68f2a8 3c8c69db 3ca3e62e     .38<..h<.i.<...<
2401ab94:	3cbae930 3cd16de7 3ce76f86 3cfce965     0..<.m.<.o.<e..<
2401aba4:	3d08eb87 3d131a16 3d1cfe50 3d26963a     ...=...=P..=:.&=
2401abb4:	3d2fdfea 3d38d996 3d418188 3d49d622     ../=..8=..A=".I=
2401abc4:	3d51d5e1 3d597f55 3d60d12c 3d67ca2c     ..Q=U.Y=,.`=,.g=
2401abd4:	3d6e692f 3d74ad36 3d7a954d 3d801052     /in=6.t=M.z=R..=
2401abe4:	3d82a73f 3d850f21 3d8747b2 3d8950c1     ?..=!..=.G.=.P.=
2401abf4:	3d8b2a24 3d8cd3bf 3d8e4d88 3d8f977c     $*.=...=.M.=|..=
2401ac04:	3d90b1a9 3d919c2a 3d925724 3d92e2cd     ...=*..=$W.=...=
2401ac14:	3d933f65 3d936d3a 3d936ca7 3d933e12     e?.=:m.=.l.=.>.=
2401ac24:	3d92e1ed 3d9258b9 3d91a301 3d90c15d     ...=.X.=...=]..=
2401ac34:	3d8fb46e 3d8e7ce3 3d8d1b75 3d8b90eb     n..=.|.=u..=...=
2401ac44:	3d89de10 3d8803c1 3d8602df 3d83dc59     ...=...=...=Y..=
2401ac54:	3d819125 3d7e4487 3d79217f 3d73bb51     %..=.D~=.!y=Q.s=
2401ac64:	3d6e1435 3d682e70 3d620c4f 3d5bb03d     5.n=p.h=O.b==.[=
2401ac74:	3d551ca2 3d4e5401 3d4758dd 3d402dcd     ..U=.TN=.XG=.-@=
2401ac84:	3d38d571 3d315270 3d29a77e 3d21d750     q.8=pR1=~.)=P.!=
2401ac94:	3d19e4ae 3d11d258 3d09a31f 3d0159d7     ...=X..=...=.Y.=
2401aca4:	3cf1f2a6 3ce108d9 3ccffbfc 3cbed1c8     ...<...<...<...<
2401acb4:	3cad8ffb 3c9c3c46 3c8adc67 3c72ec11     ...<F<.<g..<..r<
2401acc4:	3c501daf 3c2d58f4 3c0aa90b 3bd03236     ..P<.X-<...<62.;
2401acd4:	3b8b6844 3b0e141d 38cb48bd bb00327c     Dh.;...;.H.8|2..
2401ace4:	bb82b41e bbc48edb bc02ca95 bc22d996     ..............".
2401acf4:	bc426aa9 bc61744f bc7fed2b bc8ee61c     .jB.Ota.+.......
2401ad04:	bc9d8445 bcabccc8 bcb9bb83 bcc74c65     E...........eL..
2401ad14:	bcd47b92 bce1454f bceda601 bcf99a35     .{..OE......5...
2401ad24:	bd028f57 bd081822 bd0d6605 bd127797     W..."....f...w..
2401ad34:	bd174b8e bd1be0b1 bd2035de bd244a07     .K.......5 ..J$.
2401ad44:	bd281c39 bd2bab9a bd2ef75f bd31fee0     9.(...+._.....1.
2401ad54:	bd34c186 bd373ed1 bd397659 bd3b67d5     ..4..>7.Yv9..g;.
2401ad64:	bd3d130e bd3e77e5 bd3f9653 bd406e6d     ..=..w>.S.?.mn@.
2401ad74:	bd410058 bd414c5b bd4152ce bd41141f     X.A.[LA..RA...A.
2401ad84:	bd4090d7 bd3fc994 bd3ebf0b bd3d7203     ..@...?...>..r=.
2401ad94:	bd3be366 bd3a1423 bd380548 bd35b7f3     f.;.#.:.H.8...5.
2401ada4:	bd332d59 bd3066c5 bd2d658e bd2a2b27     Y-3..f0..e-.'+*.
2401adb4:	bd26b90a bd2310cc bd1f3410 bd1b2484     ..&...#..4...$..
2401adc4:	bd16e3f2 bd127424 bd0dd6fe bd090e6c     ....$t......l...
2401add4:	bd041c6a bcfe05fa bcf38868 bce8c465     j.......h...e...
2401ade4:	bcddbe2c bcd27a2b bcc6fcc4 bcbb4a84     ,...+z.......J..
2401adf4:	bcaf67e7 bca35991 bc97241e bc8acc37     .g...Y...$..7...
2401ae04:	bc7cad1a bc638fa7 bc4a4990 bc30e439     ..|...c..IJ.9.0.
2401ae14:	bc176927 bbfbc383 bbc8aee6 bb95a735     'i..........5...
2401ae24:	bb457e2d bac02426 389a269e 3ad20ea2     -~E.&$...&.8...:
2401ae34:	3b4c6c55 3b976e69 3bc81ae8 3bf82a7a     UlL;in.;...;z*.;
2401ae44:	3c13c61c 3c2b17c6 3c42022e 3c587d5a     ...<..+<..B<Z}X<
2401ae54:	3c6e8193 3c8203a6 3c8c83a7 3c96bd36     ..n<...<...<6..<
2401ae64:	3ca0acee 3caa4f7f 3cb3a1b8 3cbca09a     ...<.O.<...<...<
2401ae74:	3cc54935 3ccd98bf 3cd58c9f 3cdd2255     5I.<...<...<U".<
2401ae84:	3ce45788 3ceb2a0a 3cf197d8 3cf79f03     .W.<.*.<...<...<
2401ae94:	3cfd3de4 3d01396e 3d039e45 3d05ccdb     .=.<n9.=E..=...=
2401aea4:	3d07c4a5 3d09852f 3d0b0e19 3d0c5f1c     ...=/..=...=._.=
2401aeb4:	3d0d7800 3d0e58ab 3d0f010f 3d0f713d     .x.=.X.=...==q.=
2401aec4:	3d0fa94e 3d0fa97e 3d0f7219 3d0f0379     N..=~..=.r.=y..=
2401aed4:	3d0e5e14 3d0d8275 3d0c7135 3d0b2b07     .^.=u..=5q.=.+.=
2401aee4:	3d09b0ab 3d0802f9 3d0622dc 3d04114d     ...=...=.".=M..=
2401aef4:	3d01cf58 3cfebc3e 3cf97d9a 3cf3e54a     X..=>..<.}.<J..<
2401af04:	3cedf5ed 3ce7b236 3ce11d0b 3cda3962     ...<6..<...<b9.<
2401af14:	3cd30a49 3ccb92eb 3cc3d689 3cbbd889     I..<...<...<...<
2401af24:	3cb39c55 3cab2573 3ca27774 3c99960e     U..<s%.<tw.<...<
2401af34:	3c9084ee 3c8747e8 3c7bc589 3c68b2dc     ...<.G.<..{<..h<
2401af44:	3c555f98 3c41d39f 3c2e16df 3c1a315e     ._U<..A<...<^1.<
2401af54:	3c062b1f 3be41854 3bbbb916 3b934890     .+.<T..;...;.H.;
2401af64:	3b55ad9c 3b04e786 3a517a74 b9de6c9f     ..U;...;tzQ:.l..
2401af74:	bad6fb9c bb3a9320 bb84777e bbab3999     .... .:.~w...9..
2401af84:	bbd18107 bbf73f2d bc0e32dc bc20734c     ....-?...2..Ls .
2401af94:	bc325a10 bc43e05f bc54ffcc bc65b201     .Z2._.C...T...e.
2401afa4:	bc75f0bd bc82db17 bc8a7e43 bc91df26     ..u.....C~..&...
2401afb4:	bc98fb19 bc9fcf94 bca65a37 bcac98b5     ........7Z......
2401afc4:	bcb288e9 bcb828cb bcbd767e bcc2703d     .....(..~v..=p..
2401afd4:	bcc7146c bccb6193 bccf5654 bcd2f18f     l....a..TV......
2401afe4:	bcd63226 bcd91743 bcdba01a bcddcc19     &2..C...........
2401aff4:	bcdf9ac5 bce10bce bce21f0f bce2d486     ................
2401b004:	bce32c50 bce326bc bce2c430 bce20543     P,...&..0...C...
2401b014:	bce0eaac bcdf7546 bcdda613 bcdb7e30     ....Fu......0~..
2401b024:	bcd8fee5 bcd6299d bcd2ffdd bccf8350     .....)......P...
2401b034:	bccbb5c1 bcc79911 bcc32f55 bcbe7aa5     ........U/...z..
2401b044:	bcb97d4a bcb4399e bcaeb20f bca8e938     J}...9......8...
2401b054:	bca2e1bc bc9c9e5c bc9621eb bc8f6f54     ....\....!..To..
2401b064:	bc88898c bc8173ae bc74619c bc65883a     .....s...at.:.e.
2401b074:	bc5661b6 bc46f4a6 bc3747a0 bc276179     .aV...F..G7.ya'.
2401b084:	bc1748f1 bc0704e7 bbed3888 bbcc2bef     .H.......8...+..
2401b094:	bbaaf1ed bb899876 bb505af2 bb0d7dc2     ....v....ZP..}..
2401b0a4:	ba956a35 b901c962 3a68c173 3af82d12     5j..b...s.h:.-.:
2401b0b4:	3b3d7b02 3b7e4323 3b9f2a54 3bbecad4     .{=;#C~;T*.;...;
2401b0c4:	3bddf65a 3bfca067 3c0d5e5e 3c1c1fb3     Z..;g..;^^.<...<
2401b0d4:	3c2a8e5e 3c38a4ac 3c465d1c 3c53b25a     ^.*<..8<.]F<Z.S<
2401b0e4:	3c609f32 3c6d1ebc 3c792c1c 3c826164     2.`<..m<.,y<da.<
2401b0f4:	3c87ef32 3c8d3d65 3c924a0a 3c97133d     2..<e=.<.J.<=..<
2401b104:	3c9b974b 3c9fd491 3ca3c999 3ca774f9     K..<...<...<.t.<
2401b114:	3caad57c 3cadea03 3cb0b189 3cb32b3b     |..<...<...<;+.<
2401b124:	3cb55659 3cb7324c 3cb8be9e 3cb9faf9     YV.<L2.<...<...<
2401b134:	3cbae727 3cbb8313 3cbbced8 3cbbcaa1     '..<...<...<...<
2401b144:	3cbb76be 3cbad3ab 3cb9e1f9 3cb8a25e     .v.<...<...<^..<
2401b154:	3cb715b1 3cb53ce9 3cb3191d 3cb0ab79     ...<.<.<...<y..<
2401b164:	3cadf556 3caaf821 3ca7b566 3ca42ed4     V..<!..<f..<...<
2401b174:	3ca06622 3c9c5d39 3c981606 3c9392a4     "f.<9].<...<...<
2401b184:	3c8ed535 3c89dff8 3c84b53c 3c7eaee7     5..<...<<..<..~<
2401b194:	3c739229 3c681964 3c5c49cd 3c5028c2     ).s<d.h<.I\<.(P<
2401b1a4:	3c43bbd7 3c37088b 3c2a14a7 3c1ce5df     ..C<..7<..*<...<
2401b1b4:	3c0f821f 3c01ef52 3be866e9 3bcca920     ...<R..<.f.; ..;
2401b1c4:	3bb0b170 3b948c0b 3b708a68 3b37d24c     p..;...;h.p;L.7;
2401b1d4:	3afe1092 3a8c8999 395a0339 ba2b3541     ...:...:9.Z9A5+.
2401b1e4:	bac5d765 bb1aa322 bb51dc09 bb843f93     e...".....Q..?..
2401b1f4:	bb9f3abf bbb9d440 bbd400fe bbedb61a     .:..@...........
2401b204:	bc03747a bc0fc796 bc1bcf51 bc2786c2     zt......Q.....'.
2401b214:	bc32e92c bc3df1f3 bc489ca7 bc52e4ff     ,.2...=...H...R.
2401b224:	bc5cc6eb bc663e8e bc6f482d bc77e04c     ..\..>f.-Ho.L.w.
2401b234:	bc8001c8 bc83d77b bc876fc6 bc8ac952     ....{....o..R...
2401b244:	bc8de2f2 bc90bb7f bc9351fc bc95a58e     .........Q......
2401b254:	bc97b569 bc9980eb bc9b0788 bc9c48e1     i............H..
2401b264:	bc9d449f bc9dfa9d bc9e6aca bc9e9537     .D.......j..7...
2401b274:	bc9e7a0e bc9e19a1 bc9d745a bc9c8abb     .z......Zt......
2401b284:	bc9b5d6e bc99ed37 bc983aef bc964795     n]..7....:...G..
2401b294:	bc941439 bc91a214 bc8ef26c bc8c06a4     9.......l.......
2401b2a4:	bc88e03e bc8580ce bc81ea05 bc7c3b4f     >...........O;|.
2401b2b4:	bc743b1b bc6bd749 bc6313ec bc59f529     .;t.I.k...c.).Y.
2401b2c4:	bc507f54 bc46b6de bc3ca06f bc3240a5     T.P...F.o.<..@2.
2401b2d4:	bc279c5c bc1cb878 bc1199fe bc064604     \.'.x........F..
2401b2e4:	bbf58369 bbde2497 bbc67a25 bbae8ec1     i....$..%z......
2401b2f4:	bb966d28 bb7c4058 bb4b654c bb1a5ee6     (m..X@|.LeK..^..
2401b304:	bad285db ba609c3b b8e41eb9 3a26e759     ....;.`.....Y.&:
2401b314:	3ab4a7df 3b0a981f 3b3a7167 3b69cb06     ...:...;gq:;..i;
2401b324:	3b8c4843 3ba356e1 3bba0776 3bd05052     CH.;.V.;v..;RP.;
2401b334:	3be627f5 3bfb8518 3c082f5c 3c125608     .'.;...;\/.<.V.<
2401b344:	3c1c324e 3c25c00e 3c2efb60 3c37e06c     N2.<..%<`..<l.7<
2401b354:	3c406b8b 3c489941 3c50664a 3c57cf80     .k@<A.H<JfP<..W<
2401b364:	3c5ed1e8 3c656ac9 3c6b9793 3c7155e3     ..^<.je<..k<.Uq<
2401b374:	3c76a396 3c7b7e9c 3c7fe548 3c81eafc     ..v<.~{<H..<...<
2401b384:	3c83a7b5 3c85282e 3c866bfa 3c8772c0     ...<.(.<.k.<.r.<
2401b394:	3c883c3a 3c88c840 3c8916d0 3c8927fd     :<.<@..<...<.'.<
2401b3a4:	3c88fbed 3c8892ec 3c87ed5f 3c870bc3     ...<...<_..<...<
2401b3b4:	3c85eeb2 3c8496d8 3c830508 3c813a22     ...<...<...<":.<
2401b3c4:	3c7e6e50 3c79fa62 3c751aca 3c6fd20a     Pn~<b.y<..u<..o<
2401b3d4:	3c6a22f4 3c641056 3c5d9d4a 3c56cceb     ."j<V.d<J.]<..V<
2401b3e4:	3c4fa2b5 3c48220d 3c404eaf 3c382c57     ..O<."H<.N@<W,8<
2401b3f4:	3c2fbeea 3c270a70 3c1e1317 3c14dd0d     ../<p.'<...<...<
2401b404:	3c0b6cae 3c01c667 3befdd71 3bdbd470     .l.<g..<q..;p..;
2401b414:	3bc77b12 3bb2dabc 3b9dfcef 3b88eb3a     .{.;...;...;:..;
2401b424:	3b675e85 3b3ca567 3b11be88 3acd7aa5     .^g;g.<;...;.z.:
2401b434:	3a6ed4cd 3985cc53 b9d112eb ba8996b1     ..n:S..9........
2401b444:	bade5cb1 bb193890 bb42d751 bb6bf83a     .\...8..Q.B.:.k.
2401b454:	bb8a4498 bb9e3c34 bbb1da2f bbc51601     .D..4<../.......
2401b464:	bbd7e750 bbea45f5 bbfc2a0a bc06c5ef     P....E...*......
2401b474:	bc0f3204 bc1755b0 bc1f2d82 bc26b62d     .2...U...-..-.&.
2401b484:	bc2dec8d bc34cda8 bc3b56a3 bc4184d0     ..-...4..V;...A.
2401b494:	bc4755b5 bc4cc6f8 bc51d677 bc568238     .UG...L.w.Q.8.V.
2401b4a4:	bc5ac86e bc5ea780 bc621df8 bc652ab2     n.Z...^...b..*e.
2401b4b4:	bc67cc82 bc6a02a8 bc6bcc77 bc6d2979     ..g...j.w.k.y)m.
2401b4c4:	bc6e1958 bc6e9c20 bc6eb1cf bc6e5ac7     X.n. .n...n..Zn.
2401b4d4:	bc6d977d bc6c68b4 bc6acf37 bc68cc27     }.m..hl.7.j.'.h.
2401b4e4:	bc6660bd bc638e70 bc6056cd bc5cbba3     .`f.p.c..V`...\.
2401b4f4:	bc58bee9 bc5462b9 bc4fa96b bc4a955a     ..X..bT.k.O.Z.J.
2401b504:	bc45292a bc3f679f bc395393 bc32f017     *)E..g?..S9...2.
2401b514:	bc2c4050 bc254778 bc1e090c bc168888     P@,.xG%.........
2401b524:	bc0ec98b bc06cfd1 bbfd3e55 bbec7701     ........U>...w..
2401b534:	bbdb519e bbc9d647 bbb80d3c bba5feda     .Q..G...<.......
2401b544:	bb93b393 bb8133f0 bb5d1124 bb37743a     .....3..$.].:t7.
2401b554:	bb11a288 bad75b01 ba8b4d2e b9fcf9c6     .....[...M......
2401b564:	38cae747 3a30add5 3aa39890 3aee514e     G..8..0:...:NQ.:
2401b574:	3b1c2fb2 3b40d0c4 3b64fb60 3b844fb3     ./.;..@;`.d;.O.;
2401b584:	3b95d672 3ba70a27 3bb7e335 3bc85a2a     r..;'..;5..;*Z.;
2401b594:	3bd867c9 3be8050f 3bf72b29 3c02e9c5     .g.;...;)+.;...<
2401b5a4:	3c09fbec 3c10c901 3c174e1e 3c1d887c     ...<...<.N.<|..<
2401b5b4:	3c23757d 3c2912a9 3c2e5da1 3c335440     }u#<..)<.].<@T3<
2401b5c4:	3c37f483 3c3c3c87 3c402aa8 3c43bd4f     ..7<.<<<.*@<O.C<
2401b5d4:	3c46f32f 3c49cb05 3c4c43db 3c4e5cda     /.F<..I<.CL<.\N<
2401b5e4:	3c50154c 3c516cba 3c5262d9 3c52f774     L.P<.lQ<.bR<t.R<
2401b5f4:	3c532a95 3c52fc7c 3c526d80 3c517e42     .*S<|.R<.mR<B~Q<
2401b604:	3c502f63 3c4e81ce 3c4c769b 3c4a0f0d     c/P<..N<.vL<..J<
2401b614:	3c474c70 3c44305c 3c40bc89 3c3cf2d0     pLG<\0D<..@<..<<
2401b624:	3c38d534 3c3465d8 3c2fa702 3c2a9b34     4.8<.e4<../<4.*<
2401b634:	3c2544f3 3c1fa6e9 3c19c3ed 3c139ee9     .D%<...<...<...<
2401b644:	3c0d3ae8 3c069b0d 3bff852f 3bf169b4     .:.<...</..;.i.;
2401b654:	3be2ea82 3bd40e97 3bc4dd1d 3bb55d56     ...;...;...;V].;
2401b664:	3ba596aa 3b95909e 3b8552c5 3b69c9a6     ...;...;.R.;..i;
2401b674:	3b489d05 3b272f40 3b059000 3ac79dec     ..H;@/';...;...:
2401b684:	3a83f7b6 3a00999a b7d0dec1 ba0d33e0     ...:...:.....3..
2401b694:	ba899790 bacc1d9d bb0706d2 bb27a4c6     ..............'.
2401b6a4:	bb47d9d1 bb679760 bb836789 bb92b96b     ..G.`.g..g..k...
2401b6b4:	bba1ba76 bbb063f4 bbbeaf5b bbcc9653     v....c..[...S...
2401b6c4:	bbda12b7 bbe71e95 bbf3b437 bbffce21     ........7...!...
2401b6d4:	bc05b38b bc0b3d09 bc10812f bc157dbe     .....=../....}..
2401b6e4:	bc1a309e bc1e97d6 bc22b197 bc267c36     .0........".6|&.
2401b6f4:	bc29f628 bc2d1e11 bc2ff2ac bc327304     (.)...-.../..s2.
2401b704:	bc349e17 bc367324 bc37f1a9 bc39191c     ..4.$s6...7...9.
2401b714:	bc39e945 bc3a6206 bc3a835f bc3a4d99     E.9..b:._.:..M:.
2401b724:	bc39c0f7 bc38de02 bc37a573 bc361815     ..9...8.s.7...6.
2401b734:	bc3436df bc3202f2 bc2f7d91 bc2ca834     .64...2..}/.4.,.
2401b744:	bc29845e bc2613c6 bc22583a bc1e53b9     ^.)...&.:X"..S..
2401b754:	bc1a0859 bc15784d bc10a5ed bc0b93a9     Y...Mx..........
2401b764:	bc064412 bc00b9cf bbf5ef48 bbea00d2     .D......H.......
2401b774:	bbddae22 bbd0fd46 bbc3f472 bbb699fd     "...F...r.......
2401b784:	bba8f462 bb9b0a3d bb8ce240 bb7d066a     b...=...@...j.}.
2401b794:	bb5fe803 bb42772b bb24c1e3 bb06d644     .._.+wB...$.D...
2401b7a4:	bad184e5 ba952947 ba316bfc b9623b7d     ....G)...k1.};b.
2401b7b4:	39801899 3a382d4c 3a97ce24 3ad310f0     ...9L-8:$..:...:
2401b7c4:	3b06e1cf 3b23e596 3b408676 3b5cb755     ...;..#;v.@;U.\;
2401b7d4:	3b786b4c 3b89cae3 3b971538 3ba40ea6     Lkx;...;8..;...;
2401b7e4:	3bb0b150 3bbcf791 3bc8dbeb 3bd45917     P..;...;...;.Y.;
2401b7f4:	3bdf6a00 3bea09c5 3bf433c4 3bfde38c     .j.;...;.3.;...;
2401b804:	3c038a7a 3c07e204 3c0bf68b 3c0fc659     z..<...<...<Y..<
2401b814:	3c134fd8 3c169192 3c198a36 3c1c3898     .O.<...<6..<.8.<
2401b824:	3c1e9bac 3c20b28c 3c227c76 3c23f8ce     ...<.. <v|"<..#<
2401b834:	3c252716 3c260706 3c269865 3c26db36     .'%<..&<e.&<6.&<
2401b844:	3c26cf82 3c267595 3c25cdda 3c24d8c8     ..&<.u&<..%<..$<
2401b854:	3c23971e 3c2209a5 3c203153 3c1e0f3c     ..#<.."<S1 <<..<
2401b864:	3c1ba49a 3c18f2c4 3c15fb37 3c12bf8c     ...<...<7..<...<
2401b874:	3c0f417a 3c0b82d9 3c07859b 3c034bd2     zA.<...<...<.K.<
2401b884:	3bfdaf4b 3bf456bb 3bea92aa 3be06804     K..;.V.;...;.h.;
2401b894:	3bd5dbdf 3bcaf37b 3bbfb445 3bb423c3     ...;{..;E..;.#.;
2401b8a4:	3ba847ac 3b9c25ca 3b8fc40e 3b832878     .G.;.%.;...;x(.;
2401b8b4:	3b6cb257 3b52b8a8 3b38706c 3b1de641     W.l;..R;lp8;A..;
2401b8c4:	3b0326de 3ad07e10 3a9a7718 3a48a4fa     .&.;.~.:.w.:..H:
2401b8d4:	39b8a790 b87d2477 b9f73496 ba66d1a6     ...9w$}..4....f.
2401b8e4:	baa8a319 badd631d bb08c826 bb22893e     .....c..&...>.".
2401b8f4:	bb3be8e9 bb54db75 bb6d556a bb82a5cb     ..;.u.T.jUm.....
2401b904:	bb8e5984 bb99c08c bba4d5ba bbaf940f     .Y..............
2401b914:	bbb9f6b8 bbc3f912 bbcd96a6 bbd6cb35     ............5...
2401b924:	bbdf92b3 bbe7e94f bbefcb66 bbf73597     ....O...f....5..
2401b934:	bbfe24b8 bc024aef bc05432f bc07f9e2     .$...J../C......
2401b944:	bc0a6df2 bc0c9e66 bc0e8a69 bc103144     .m..f...i...D1..
2401b954:	bc119261 bc12ad50 bc1381be bc140f7a     a...P.......z...
2401b964:	bc145678 bc1456c9 bc1410a3 bc13845b     xV...V......[...
2401b974:	bc12b269 bc119b64 bc104003 bc0ea11f     i...d....@......
2401b984:	bc0cbfae bc0a9cc6 bc08399d bc059782     .........9......
2401b994:	bc02b7e6 bbff38a3 bbf88cda bbf16ff1     .....8.......o..
2401b9a4:	bbe9e59b bbe1f1be bbd9986f bbd0ddef     ........o.......
2401b9b4:	bbc7c6ad bbbe573e bbb49461 bbaa82ef     ....>W..a.......
2401b9c4:	bba027f3 bb95888a bb8aa9f4 bb7f2314     .'...........#..
2401b9d4:	bb688974 bb519219 bb3a482a bb22b6fe     t.h...Q.*H:...".
2401b9e4:	bb0ae9f6 bae5d927 bab594bc ba851dd9     ....'...........
2401b9f4:	ba291742 b98fd528 38c8e127 39f39dc5     B.).(...'..8...9
2401ba04:	3a59ffea 3a9cc0eb 3acc13ea 3afae2b5     ..Y:...:...:...:
2401ba14:	3b148bb5 3b2b4e44 3b41ae72 3b57a1e8     ...;DN+;r.A;..W;
2401ba24:	3b6d1e80 3b810d2c 3b8b45ed 3b9534d5     ..m;,..;.E.;.4.;
2401ba34:	3b9ed563 3ba8233d 3bb11a30 3bb9b63a     c..;=#.;0..;:..;
2401ba44:	3bc1f384 3bc9ce6b 3bd14376 3bd84f68     ...;k..;vC.;hO.;
2401ba54:	3bdeef33 3be51ffe 3beadf2b 3bf02a50     3..;...;+..;P*.;
2401ba64:	3bf4ff3f 3bf95c04 3bfd3ee1 3c00532d     ?..;.\.;.>.;-S.<
2401ba74:	3c01c895 3c02ff27 3c03f67a 3c04ae4a     ...<'..<z..<J..<
2401ba84:	3c05266f 3c055edd 3c0557ac 3c05110c     o&.<.^.<.W.<...<
2401ba94:	3c048b50 3c03c6e6 3c02c45b 3c018459     P..<...<[..<Y..<
2401baa4:	3c0007a5 3bfc9e4a 3bf8b7aa 3bf45da2     ...<J..;...;.].;
2401bab4:	3bef929b 3bea5934 3be4b43b 3bdea6b8     ...;4Y.;;..;...;
2401bac4:	3bd833da 3bd15f01 3bca2bb7 3bc29db9     .3.;._.;.+.;...;
2401bad4:	3bbab8e1 3bb2813a 3ba9faec 3ba12a47     ...;:..;...;G*.;
2401bae4:	3b9813b5 3b8ebbc5 3b852720 3b76b50b     ...;...; '.;..v;
2401baf4:	3b62b5a0 3b4e59d5 3b39abb3 3b24b552     ..b;.YN;..9;R.$;
2401bb04:	3b0f80f4 3af431da 3ac90f39 3a9daee3     ...;.1.:9..:...:
2401bb14:	3a644b87 3a0d11a8 395767d6 b904c749     .Kd:...:.gW9I...
2401bb24:	b9efd05f ba4e1fe5 ba91d804 babc3819     _.....N......8..
2401bb34:	bae61c32 bb07b853 bb1c1107 bb300ebc     2...S.........0.
2401bb44:	bb43a81c bb56d415 bb6989cb bb7bc09e     ..C...V...i...{.
2401bb54:	bb86b81e bb8f4845 bb978ce2 bb9f8238     ....EH......8...
2401bb64:	bba724b2 bbae70e6 bbb56396 bbbbf9b2     .$...p...c......
2401bb74:	bbc23055 bbc804d1 bbcd74a2 bbd27d77     U0.......t..w}..
2401bb84:	bbd71d35 bbdb51f6 bbdf1a04 bbe273e2     5....Q.......s..
2401bb94:	bbe55e47 bbe7d821 bbe9e097 bbeb7701     G^..!........w..
2401bba4:	bbec9af6 bbed4c3e bbed8adb bbed5706     ....>L.......W..
2401bbb4:	bbecb12c bbeb99f7 bbea123e bbe81b16     ,.......>.......
2401bbc4:	bbe5b5c3 bbe2e3bd bbdfa6b3 bbdc0083     ................
2401bbd4:	bbd7f33c bbd38120 bbceac9d bbc9784f     <... .......Ox..
2401bbe4:	bbc3e6fe bbbdfb9b bbb7b946 bbb12341     ........F...A#..
2401bbf4:	bbaa3cf3 bba309ee bb9b8ddd bb93cc93     .<..............
2401bc04:	bb8bc9fa bb838a23 bb762260 bb64c6bf     ....#...`"v...d.
2401bc14:	bb530a0b bb40f50e bb2e90c8 bb1be643     ..S...@.....C...
2401bc24:	bb08feb5 baebc6b8 bac53b2a ba9e6d8b     ........*;...m..
2401bc34:	ba6ee152 ba20aeea b9a4d33c b786e4a2     R.n... .<.......
2401bc44:	399385e4 3a175f4f 3a6478df 3a98757a     ...9O_.:.xd:zu.:
2401bc54:	3abe489d 3ae3a3ee 3b043aeb 3b165684     .H.:...:.:.;.V.;
2401bc64:	3b281c3e 3b3983d6 3b4a8527 3b5b1859     >.(;..9;'.J;Y.[;
2401bc74:	3b6b35bf 3b7ad5f5 3b84f8e7 3b8c4137     .5k;..z;...;7A.;
2401bc84:	3b93409c 3b99f3f0 3ba0582f 3ba66a87     .@.;...;/X.;.j.;
2401bc94:	3bac2845 3bb18ee8 3bb69c16 3bbb4da5     E(.;...;...;.M.;
2401bca4:	3bbfa198 3bc39622 3bc729a4 3bca5aaa     ...;"..;.).;.Z.;
2401bcb4:	3bcd27fc 3bcf9088 3bd19373 3bd33011     .'.;...;s..;.0.;
2401bcc4:	3bd465ed 3bd534bd 3bd59c6c 3bd59d18     .e.;.4.;l..;...;
2401bcd4:	3bd53710 3bd46ad1 3bd3390f 3bd1a2aa     .7.;.j.;.9.;...;
2401bce4:	3bcfa8b3 3bcd4c68 3bca8f3d 3bc772c8     ...;hL.;=..;.r.;
2401bcf4:	3bc3f8d8 3bc02360 3bbbf47e 3bb76e7f     ...;`#.;~..;.n.;
2401bd04:	3bb293d1 3bad670e 3ba7eaf6 3ba2226a     ...;.g.;...;j".;
2401bd14:	3b9c106f 3b95b82c 3b8f1ce9 3b884208     o..;,..;...;.B.;
2401bd24:	3b812b07 3b73b70b 3b64ae67 3b5543ba     .+.;..s;g.d;.CU;
2401bd34:	3b457ebf 3b356755 3b250589 3b14617b     .~E;Ug5;..%;{a.;
2401bd44:	3b038369 3ae4e742 3ac27516 3a9fc137     i..;B..:.u.:7..:
2401bd54:	3a79b929 3a33b063 39db1457 391da1e7     ).y:c.3:W..9...9
2401bd64:	b8f49665 b9c88be8 ba298f84 ba6e4e4e     e.........).NNn.
2401bd74:	ba9930c7 babad463 badc020e bafcaa1b     .0..c...........
2401bd84:	bb0e5e93 bb1e160d bb2d7428 bb3c71b2     .^......(t-..q<.
2401bd94:	bb4b07bb bb592f87 bb66e28d bb741a88     ..K../Y...f...t.
2401bda4:	bb8068bb bb8680cb bb8c52b4 bb91dbda     .h.......R......
2401bdb4:	bb9719cb bb9c0a35 bba0aaf2 bba4fa04     ....5...........
2401bdc4:	bba8f593 bbac9bf3 bbafeba0 bbb2e346     ............F...
2401bdd4:	bbb581b9 bbb7c5fb bbb9af37 bbbb3cc8     ........7....<..
2401bde4:	bbbc6e36 bbbd4335 bbbdbba4 bbbdd794     6n..5C..........
2401bdf4:	bbbd973c bbbcfb08 bbbc0387 bbbab17b     <...........{...
2401be04:	bbb905ce bbb70194 bbb4a60f bbb1f4a5     ................
2401be14:	bbaeeee9 bbab9696 bba7ed89 bba3f5c7     ................
2401be24:	bb9fb17a bb9b22f3 bb964ca0 bb91310f     z...."...L...1..
2401be34:	bb8bd2f4 bb86351d bb805a72 bb748bfb     .....5..rZ....t.
2401be44:	bb67f5bb bb5af896 bb4d9b29 bb3fe43e     ..g...Z.).M.>.?.
2401be54:	bb31dabf bb2385bd bb14ec69 bb06160d     ..1...#.i.......
2401be64:	baee1412 bacf9fb2 bab0de04 ba91de31     ............1...
2401be74:	ba655efd ba26c255 b9d00a03 b9251651     .^e.U.&.....Q.%.
2401be84:	38aaebf2 39a78bc9 3a11d582 3a4f6e79     ...8...9...:ynO:
2401be94:	3a86399e 3aa46355 3ac22608 3adf7387     .9.:Uc.:.&.:.s.:
2401bea4:	3afc3df6 3b0c3be3 3b1a09db 3b27826e     .=.:.;.;...;n.';
2401beb4:	3b349f51 3b415a71 3b4dadeb 3b599412     Q.4;qZA;..M;..Y;
2401bec4:	3b65077d 3b7002ee 3b7a816f 3b823f28     }.e;..p;o.z;(?.;
2401bed4:	3b86fa8e 3b8b70cf 3b8f9ffb 3b93863e     ...;.p.;...;>..;
2401bee4:	3b9721f2 3b9a718c 3b9d73ae 3ba02723     .!.;.q.;.s.;#'.;
2401bef4:	3ba28ad6 3ba49ddc 3ba65f76 3ba7cf0b     ...;...;v_.;...;
2401bf04:	3ba8ec26 3ba9b681 3baa2dfc 3baa529e     &..;...;.-.;.R.;
2401bf14:	3baa2497 3ba9a43e 3ba8d217 3ba7aec8     .$.;>..;...;...;
2401bf24:	3ba63b1d 3ba4780f 3ba266b7 3ba00856     .;.;.x.;.f.;V..;
2401bf34:	3b9d5e4f 3b9a6a2d 3b972d97 3b93aa5f     O^.;-j.;.-.;_..;
2401bf44:	3b8fe272 3b8bd7dc 3b878ccd 3b83038d     r..;...;...;...;
2401bf54:	3b7c7d0b 3b72806e 3b68167b 3b5d449d     .}|;n.r;{.h;.D];
2401bf64:	3b52106e 3b467fac 3b3a984a 3b2e6054     n.R;..F;J.:;T`.;
2401bf74:	3b21ddff 3b15179d 3b0813a0 3af5b11d     ..!;...;...;...:
2401bf84:	3adada12 3abfaf72 3aa43eca 3a8895aa     ...:r..:.>.:...:
2401bf94:	3a598376 3a21a14e 39d3409b 39466f4a     v.Y:N.!:.@.9JoF9
2401bfa4:	b7ca1a98 b97829fa b9eaec59 ba2c791f     .....)x.Y....y,.
2401bfb4:	ba62f8de ba8c6d9d baa7034b bac130b7     ..b..m..K....0..
2401bfc4:	badae981 baf4217a bb066661 bb126fe7     ....z!..af...o..
2401bfd4:	bb1e27a6 bb298835 bb348c46 bb3f2ec8     .'..5.).F.4...?.
2401bfe4:	bb496adc bb533bdf bb5c9d54 bb658b0a     .jI..;S.T.\...e.
2401bff4:	bb6e00fe bb75fb7c bb7d76fd bb823823     ..n.|.u..v}.#8..
2401c004:	bb85722e bb886842 bb8b1923 bb8d83bd     .r..Bh..#.......
2401c014:	bb8fa71d bb91826d bb931503 bb945e5a     ....m.......Z^..
2401c024:	bb955e07 bb9613cf bb967f91 bb96a15b     .^..........[...
2401c034:	bb967956 bb9607d2 bb954d44 bb944a42     Vy......DM..BJ..
2401c044:	bb92ff88 bb916df1 bb8f967c bb8d7a4b     .....m..|...Kz..
2401c054:	bb8b1a9b bb8878cf bb859662 bb8274f8     .....x..b....t..
2401c064:	bb7e2c96 bb76f85e bb6f513a bb673b3c     .,~.^.v.:Qo.<;g.
2401c074:	bb5ebaba bb55d42e bb4c8c4b bb42e7e5     ..^...U.K.L...B.
2401c084:	bb38ec00 bb2e9dc9 bb24028b bb191fb2     ..8.......$.....
2401c094:	bb0dfad1 bb029989 baee0342 bad671df     ........B....q..
2401c0a4:	babe8ac0 baa659d8 ba8deb32 ba6a9608     .....Y..2.....j.
2401c0b4:	ba390ae4 ba074d78 b9aaec78 b90e768e     ..9.xM..x....v..
2401c0c4:	38623f05 397ed902 39e20272 3a21ecfa     .?b8..~9r..9..!:
2401c0d4:	3a5261e7 3a81245a 3a98c533 3ab00835     .aR:Z$.:3..:5..:
2401c0e4:	3ac6e252 3add48b5 3af330cb 3b04481f     R..:.H.:.0.:.H.;
2401c0f4:	3b0eae88 3b18c6cb 3b228c36 3b2bfa44     ...;...;6.";D.+;
2401c104:	3b350cab 3b3dbf3e 3b460e0e 3b4df563     ..5;>.=;..F;c.M;
2401c114:	3b5571b3 3b5c7fae 3b631c3c 3b694481     .qU;..\;<.c;.Di;
2401c124:	3b6ef5e0 3b742de9 3b78ea80 3b7d29b3     ..n;.-t;..x;.)};
2401c134:	3b8074f0 3b8214c9 3b8373d3 3b849197     .t.;...;.s.;...;
2401c144:	3b856dc2 3b86081e 3b866097 3b86773b     .m.;...;.`.;;w.;
2401c154:	3b864c35 3b85dfd1 3b85327e 3b8444c7     5L.;...;~2.;.D.;
2401c164:	3b831757 3b81aaf4 3b80008c 3b7c3240     W..;...;...;@2|;
2401c174:	3b77eba8 3b732fd2 3b6e016a 3b686363     ..w;./s;j.n;cch;
2401c184:	3b6258d9 3b5be51d 3b550bb1 3b4dd04b     .Xb;..[;..U;K.M;
2401c194:	3b4636ca 3b3e4332 3b35f9b7 3b2d5eb7     .6F;2C>;..5;.^-;
2401c1a4:	3b2476a9 3b1b462d 3b11d1fe 3b081f04     .v$;-F.;...;...;
2401c1b4:	3afc6450 3ae82109 3ad37e6d 3abe86ec     Pd.:.!.:m~.:...:
2401c1c4:	3aa94519 3a93c39f 3a7c1a7e 3a505997     .E.:...:~.|:.YP:
2401c1d4:	3a245a40 39f0648f 3997eee3 38fdfbf4     @Z$:.d.9...9...8
2401c1e4:	b845fe3b b96144a2 b9c7fdd9 ba0f53fe     ;.E..Da......S..
2401c1f4:	ba3a3b69 ba64a083 ba873775 ba9bc95b     i;:...d.u7..[...
2401c204:	baaffc18 bac3c61c bad71e12 bae9fad2     ................
2401c214:	bafc5392 bb070fe1 bb0fab91 bb17f8df     .S..............
2401c224:	bb1ff3f7 bb27993f bb2ee53d bb35d4ac     ....?.'.=.....5.
2401c234:	bb3c6470 bb4291a9 bb4859a5 bb4db9e1     pd<...B..YH...M.
2401c244:	bb52b015 bb573a30 bb5b5657 bb5f02e7     ..R.0:W.WV[..._.
2401c254:	bb623e6c bb6507b9 bb675dd0 bb693ff5     l>b...e..]g..?i.
2401c264:	bb6aad9a bb6ba679 bb6c2a76 bb6c39be     ..j.y.k.v*l..9l.
2401c274:	bb6bd4a9 bb6afbd5 bb69b00c bb67f25c     ..k...j...i.\.g.
2401c284:	bb65c3ff bb63266b bb601b4d bb5ca482     ..e.k&c.M.`...\.
2401c294:	bb58c41e bb547c66 bb4fcfcc bb4ac0f7     ..X.f|T...O...J.
2401c2a4:	bb4552b9 bb3f8811 bb39642d bb32ea5a     .RE...?.-d9.Z.2.
2401c2b4:	bb2c1e1a bb250304 bb1d9ce3 bb15ef9a     ..,...%.........
2401c2c4:	bb0dff2d bb05cfbd bafacb15 bae989e1     -...............
2401c2d4:	bad7e4a5 bac5e47b bab3927a baa0f7ff     ....{...z.......
2401c2e4:	ba8e1e66 ba761e63 ba4fa7d3 ba28ec5b     f...c.v...O.[.(.
2401c2f4:	ba01ff44 b9b5e7bd b94f75e7 b84cf593     D........uO...L.
2401c304:	38d11aa8 3981cf02 39ced488 3a0d98e5     ...8...9...9...:
2401c314:	3a3360e6 3a58b00f 3a7d746f 3a90ce33     .`3:..X:ot}:3..:
2401c324:	3aa28b63 3ab3e951 3ac4dfd5 3ad566e0     c..:Q..:...:.f.:
2401c334:	3ae576bd 3af507ee 3b0209a3 3b0948e1     .v.:...:...;.H.;
2401c344:	3b103e67 3b16e704 3b1d3fbd 3b2345b3     g>.;...;.?.;.E#;
2401c354:	3b28f63f 3b2e4edd 3b334d41 3b37ef3d     ?.(;.N.;AM3;=.7;
2401c364:	3b3c32e1 3b40166c 3b439841 3b46b709     .2<;l.@;A.C;..F;
2401c374:	3b49718e 3b4bc6d3 3b4db60e 3b4f3ea4     .qI;..K;..M;.>O;
2401c384:	3b506037 3b511a8f 3b516db5 3b5159d4     7`P;..Q;.mQ;.YQ;
2401c394:	3b50df5a 3b4ffedb 3b4eb929 3b4d0f39     Z.P;..O;).N;9.M;
2401c3a4:	3b4b023a 3b48938b 3b45c4b5 3b42976e     :.K;..H;..E;n.B;
2401c3b4:	3b3f0da5 3b3b2966 3b36ecef 3b325aa8     ..?;f);;..6;.Z2;
2401c3c4:	3b2d751d 3b283f06 3b22bb3d 3b1cecbe     .u-;.?(;=.";...;
2401c3d4:	3b16d6b1 3b107c4b 3b09e0f7 3b03082e     ...;K|.;...;...;
2401c3e4:	3af7eb09 3ae95964 3ada62f4 3acb0f77     ...:dY.:.b.:w..:
2401c3f4:	3abb66d1 3aab7107 3a9b3641 3a8abebe     .f.:.q.:A6.:...:
2401c404:	3a7425aa 3a5275cf 3a307ede 3a0e51d8     .%t:.uR:.~0:.Q.:
2401c414:	39d7ff8e 39933374 391cc2dc 379ab728     ...9t3.9...9(..7
2401c424:	b8eb32e1 b97dcb0b b9c27dbb ba02ba3d     .2....}..}..=...
2401c434:	ba23d4aa ba447e29 ba64a707 ba821ff1     ..#.)~D...d.....
2401c444:	ba919cd4 baa0c2d0 baaf8abf babdedae     ................
2401c454:	bacbe4e8 bad969e1 bae6765b baf3045e     .....i..[v..^...
2401c464:	baff0e2c bb054723 bb0abfc4 bb0fee86     ,...#G..........
2401c474:	bb14d126 bb196579 bb1da989 bb219b86     &...ye........!.
2401c484:	bb2539d0 bb2882df bb2b7571 bb2e105a     .9%...(.qu+.Z...
2401c494:	bb3052aa bb323b8d bb33ca6e bb34fed8     .R0..;2.n.3...4.
2401c4a4:	bb35d88c bb365773 bb367b9f bb364554     ..5.sW6..{6.TE6.
2401c4b4:	bb35b507 bb34cb4e bb3388f7 bb31eef2     ..5.N.4...3...1.
2401c4c4:	bb2ffe5c bb2db879 bb2b1ebd bb2832be     \./.y.-...+..2(.
2401c4d4:	bb24f63b bb216b1b bb1d9368 bb197151     ;.$..k!.h...Qq..
2401c4e4:	bb150723 bb105759 bb0b647c bb063143     #...YW..|d..C1..
2401c4f4:	bb00c080 baf62a2d baea641e bade3508     ....-*...d...5..
2401c504:	bad1a35c bac4b5b0 bab772b7 baa9e154     \........r..T...
2401c514:	ba9c088a ba8def75 ba7f3a79 ba623274     ....u...y:..t2b.
2401c524:	ba44d58b ba273294 ba095878 b9d6ac5d     ..D..2'.xX..]...
2401c534:	b99a7567 b93c5407 b887a067 385194ab     gu...T<.g.....Q8
2401c544:	392c10eb 39917c36 39cc70c8 3a0364bf     ..,96|.9.p.9.d.:
2401c554:	3a20350d 3a3c9b61 3a588a19 3a73f3d3     .5 :a.<:..X:..s:
2401c564:	3a8765c3 3a948236 3aa14919 3aadb461     .e.:6..:.I.:a..:
2401c574:	3ab9be52 3ac56149 3ad097ef 3adb5d1a     R..:Ia.:...:.].:
2401c584:	3ae5abe3 3aef7fa2 3af8d3f8 3b00d25f     ...:...:...:_..;
2401c594:	3b04f70b 3b08d635 3b0c6e34 3b0fbd89     ...;5..;4n.;...;
2401c5a4:	3b12c2d0 3b157cdd 3b17ea94 3b1a0b15     ...;.|.;...;...;
2401c5b4:	3b1bdd97 3b1d617f 3b1e965d 3b1f7be4     ...;.a.;]..;.{.;
2401c5c4:	3b2011ee 3b20587b 3b204fbd 3b1ff7fe     .. ;{X ;.O ;...;
2401c5d4:	3b1f51bb 3b1e5d8e 3b1d1c46 3b1b8ec1     .Q.;.].;F..;...;
2401c5e4:	3b19b612 3b179374 3b152830 3b1275ce     ...;t..;0(.;.u.;
2401c5f4:	3b0f7de2 3b0c4225 3b08c479 3b0506d9     .}.;%B.;y..;...;
2401c604:	3b010b5d 3af9a86f 3af0c77e 3ae778b1     ]..;o..:~..:.x.:
2401c614:	3addc119 3ad3a5eb 3ac92c84 3abe5a7f     ...:...:.,.:.Z.:
2401c624:	3ab33580 3aa7c36d 3a9c0a2f 3a900fe1     .5.:m..:/..:...:
2401c634:	3a83daaf 3a6ee1d1 3a55b1c2 3a3c3208     ...:..n:..U:.2<:
2401c644:	3a226f96 3a087770 39dcad54 39a834bd     .o":pw.:T..9.4.9
2401c654:	39673ea9 38fc1d03 37a86981 b8a722e2     .>g9...8.i.7."..
2401c664:	b93b99ec b9916ca1 b9c48e8c b9f719d9     ..;..l..........
2401c674:	ba147b0a ba2d0598 ba4520d2 ba5cc131     .{....-.. E.1.\.
2401c684:	ba73db7c ba853262 ba902936 ba9acd18     |.s.b2..6)......
2401c694:	baa51918 baaf0874 bab89693 bac1bf1f     ....t...........
2401c6a4:	baca7df9 bad2cf2c badaaf0e bae21a22     .}..,......."...
2401c6b4:	bae90d30 baef8545 baf57f9e bafaf9cb     0...E...........
2401c6c4:	bafff19b bb023286 bb042938 bb05dc34     .....2..8)..4...
2401c6d4:	bb074ae2 bb0874d5 bb0959b9 bb09f964     .J...t...Y..d...
2401c6e4:	bb0a53d2 bb0a6914 bb0a396e bb09c537     .S...i..n9..7...
2401c6f4:	bb090cf3 bb081142 bb06d2e5 bb0552bb     ....B........R..
2401c704:	bb0391c5 bb019129 bafea447 baf9ac29     ....)...G...)...
2401c714:	baf43ce4 baee59a9 bae805d2 bae14507     .<...Y.......E..
2401c724:	bada1b03 bad28bc2 baca9b78 bac24e6f     ........x...oN..
2401c734:	bab9a926 bab0b03f baa76898 ba9dd705     &...?....h......
2401c744:	ba9400a0 ba89ea94 ba7f3436 ba6a2933     ........64..3)j.
2401c754:	ba54befa ba3f0092 ba28f91e ba12b3dd     ..T...?...(.....
2401c764:	b9f87839 b9cb3a78 b99dc541 b9605ecc     9x..x:..A....^`.
2401c774:	b9051f62 b827e69e 384394ae 390b503a     b.....'...C8:P.9
2401c784:	39651b07 399f0cc9 39cb1042 39f68288     ..e9...9B..9...9
2401c794:	3a10a74d 3a25aff0 3a3a5115 3a4e80ec     M..:..%:.Q::..N:
2401c7a4:	3a6235dd 3a75669d 3a840519 3a8d0bed     .5b:.fu:...:...:
2401c7b4:	3a95c3a1 3a9e2830 3aa635c5 3aade8ba     ...:0(.:.5.:...:
2401c7c4:	3ab53d8f 3abc3116 3ac2c02f 3ac8e808     .=.:.1.:/..:...:
2401c7d4:	3acea5f3 3ad3f78e 3ad8daa2 3add4d34     ...:...:...:4M.:
2401c7e4:	3ae14d7c 3ae4da01 3ae7f16b 3aea92b9     |M.:...:k..:...:
2401c7f4:	3aecbd0b 3aee6fcf 3aefaaae 3af06d80     ...:.o.:...:.m.:
2401c804:	3af0b86d 3af08bc4 3aefe81f 3aeece4c     m..:...:...:L..:
2401c814:	3aed3f4d 3aeb3c68 3ae8c721 3ae5e11b     M?.:h<.:!..:...:
2401c824:	3ae28c41 3adecab7 3ada9ec8 3ad60af5     A..:...:...:...:
2401c834:	3ad11201 3acbb6bc 3ac5fc4e 3abfe5e7     ...:...:N..:...:
2401c844:	3ab976f3 3ab2b301 3aab9dd3 3aa43b33     .v.:...:...:3;.:
2401c854:	3a9c8f3a 3a949ded 3a8c6ba2 3a83fc9c     :..:...:.k.:...:
2401c864:	3a76aac0 3a64f4e0 3a52e0da 3a407811     ..v:..d:..R:.x@:
2401c874:	3a2dc40d 3a1ace6c 3a07a0e4 39e88a7a     ..-:l..:...:z..9
2401c884:	39c18a9c 399a55e0 39660015 391739a1     ...9.U.9..f9.9.9
2401c894:	3890ff75 b6c0ce57 b8a8640d b921dc73     u..8W....d..s.!.
2401c8a4:	b96edf95 b99d8ae6 b9c32cfe b9e843d3     ..n......,...C..
2401c8b4:	ba065ec5 ba18444c ba29c9f4 ba3ae76d     .^..LD....).m.:.
2401c8c4:	ba4b949f ba5bc9b4 ba6b7f1b ba7aad8d     ..K...[...k...z.
2401c8d4:	ba84a708 ba8bacf2 ba926559 ba98cd41     ........Ye..A...
2401c8e4:	ba9ee1be baa4a03b baaa0623 baaf112e     ....;...#.......
2401c8f4:	bab3bf3d bab80e69 babbfce0 babf8920     =...i....... ...
2401c904:	bac2b1d2 bac575c9 bac7d415 bac9cbf8     .....u..........
2401c914:	bacb5cf1 bacc8692 bacd48c9 bacda3a6     .\.......H......
2401c924:	bacd9767 bacd2483 bacc4ba6 bacb0db0     g....$...K......
2401c934:	bac96bab bac766dc bac500a6 bac23aab     .k...f.......:..
2401c944:	babf16bd babb96cd bab7bd01 bab38bab     ................
2401c954:	baaf053c baaa2c64 baa503db ba9f8e8c     <...d,..........
2401c964:	ba99cf8e ba93ca08 ba8d8155 ba86f8d8     ........U.......
2401c974:	ba803418 ba726d83 ba64091a ba554299     .4...mr...d..BU.
2401c984:	ba4621d0 ba36aeac ba26f143 ba16f1c3     .!F...6.C.&.....
2401c994:	ba06b86f b9ec9b4b b9cb7398 b9aa0ab7     o...K....s......
2401c9a4:	b988719a b94d727a b909e540 b88cbaa6     .q..zrM.@.......
2401c9b4:	b63f1c5a 388037d9 3902ca92 3944eeb4     Z.?..7.8...9..D9
2401c9c4:	398333e8 39a38afe 39c36ce8 39e2ca3a     .3.9...9.l.9:..9
2401c9d4:	3a00c9ed 3a0fdd8a 3a1e98c3 3a2cf4a3     ...:...:...:..,:
2401c9e4:	3a3aea64 3a487383 3a5589b5 3a6226f0     d.::.sH:..U:.&b:
2401c9f4:	3a6e4573 3a79dfba 3a827848 3a87b984     sEn:..y:Hx.:...:
2401ca04:	3a8cb143 3a915d4f 3a95bbbf 3a99caa8     C..:O].:...:...:
2401ca14:	3a9d8867 3aa0f377 3aa40a83 3aa6cc54     g..:w..:...:T..:
2401ca24:	3aa937f2 3aab4c8e 3aad0974 3aae6e2c     .7.:.L.:t..:,n.:
2401ca34:	3aaf7a70 3ab02e17 3ab08928 3ab08be8     pz.:...:(..:...:
2401ca44:	3ab036ae 3aaf8a0b 3aae86bc 3aad2da0     .6.:...:...:.-.:
2401ca54:	3aab7fcb 3aa97e72 3aa72afd 3aa486dd     ...:r~.:.*.:...:
2401ca64:	3aa193db 3a9e53b5 3a9ac876 3a96f42b     ...:.S.:v..:+..:
2401ca74:	3a92d914 3a8e799a 3a89d831 3a84f776     ...:.y.:1..:v..:
2401ca84:	3a7fb445 3a750620 3a69ea52 3a5e66e8     E..: .u:R.i:.f^:
2401ca94:	3a52821c 3a464252 3a39ae10 3a2ccc04     ..R:RBF:..9:..,:
2401caa4:	3a1fa2fa 3a1239d7 3a04979e 39ed86bd     ...:.9.:...:...9
2401cab4:	39d18885 39b542ef 3998c478 3978373c     ...9.B.9x..9<7x9
2401cac4:	393eade3 390509e2 3896d060 378f2d25     ..>9...9`..8%-.7
2401cad4:	b81d8479 b8c09f6c b918ca0d b950b460     y...l.......`.P.
2401cae4:	b983f9b4 b99f361d b9ba0243 b9d4513a     .....6..C...:Q..
2401caf4:	b9ee166e ba03a2cc ba0fe966 ba1bd93f     n.......f...?...
2401cb04:	ba276cc3 ba329e92 ba3d6986 ba47c8af     .l'...2..i=...G.
2401cb14:	ba51b75a ba5b3114 ba6431a8 ba6cb520     Z.Q..1[..1d. .l.
2401cb24:	ba74b7cf ba7c3649 ba8196b4 ba84cd26     ..t.I6|.....&...
2401cb34:	ba87bd34 ba8a65b9 ba8cc5b2 ba8edc49     4....e......I...
2401cb44:	ba90a8c0 ba922a8f ba93614f ba944cb1     .....*..Oa...L..
2401cb54:	ba94ecae ba95413d ba954a91 ba950909     ....=A...J......
2401cb64:	ba947d14 ba93a756 ba928894 ba9121af     .}..V........!..
2401cb74:	ba8f73b7 ba8d7fd2 ba8b474f ba88cba7     .s......OG......
2401cb84:	ba860e5e ba831122 ba7fab90 ba78bc68     ^...".......h.x.
2401cb94:	ba7158db ba698524 ba6145bc ba589f43     .Xq.$.i..Ea.C.X.
2401cba4:	ba4f968d ba463099 ba3c728e ba3261b9     ..O..0F..r<..a2.
2401cbb4:	ba28038a ba1d5d92 ba127580 ba07511d     ..(..]...u...Q..
2401cbc4:	b9f7ec8b b9e0d5e4 b9c96a4e b9b1b5ee     ........Nj......
2401cbd4:	b999c507 b981a3df b952bd9f b922046b     ..........R.k.".
2401cbe4:	b8e2698d b880ceac b77b4913 38032cd3     .i.......I{..,.8
2401cbf4:	38a1ffc1 3900d197 393028d6 395eee66     ...8...9.(09f.^9
2401cc04:	398685bb 399d34dd 39b379a7 39c94968     ...9.4.9.y.9hI.9
2401cc14:	39de99bc 39f3608e 3a03ca07 3a0d9569     ...9.`.9...:i..:
2401cc24:	3a170de1 3a202f0f 3a28f4cc 3a315b1b     ...:./ :..(:.[1:
2401cc34:	3a395e3e 3a40faa2 3a482cf7 3a4ef21f     >^9:..@:.,H:..N:
2401cc44:	3a554737 3a5b299d 3a6096e7 3a658ceb     7GU:.)[:..`:..e:
2401cc54:	3a6a09bc 3a6e0bb0 3a719159 3a749989     ..j:..n:Y.q:..t:
2401cc64:	3a772356 3a792e15 3a7ab95b 3a7bc4fc     V#w:..y:[.z:..{:
2401cc74:	3a7c5113 3a7c5df4 3a7bec34 3a7afcaa     .Q|:.]|:4.{:..z:
2401cc84:	3a79906b 3a77a8c5 3a754748 3a726dba     k.y:..w:HGu:.mr:
2401cc94:	3a6f1e21 3a6b5ab7 3a6725f0 3a628276     !.o:.Zk:.%g:v.b:
2401cca4:	3a5d7327 3a57fb13 3a521d7c 3a4bddd5     's]:..W:|.R:..K:
2401ccb4:	3a453fb7 3a3e46ef 3a36f770 3a2f554d     .?E:.F>:p.6:MU/:
2401ccc4:	3a2764ca 3a1f2a3f 3a16aa32 3a0de93e     .d':?*.:2..:>..:
2401ccd4:	3a04ec18 39f76f25 39e4a125 39d17821     ...:%o.9%..9!x.9
2401cce4:	39bdfe32 39aa3d84 39964063 39821123     2..9.=.9c@.9#..9
2401ccf4:	395b7452 39328bcb 39097d87 38c0bcb4     Rt[9..29.}.9...8
2401cd04:	385d0c26 376403d4 b7d4ac5c b88653fe     &.]8..d7\....S..
2401cd14:	b8d6d20d b9133ed6 b93a97d9 b96160fb     .....>....:..`a.
2401cd24:	b983c3ae b9967c50 b9a8d169 b9baba46     ....P|..i...F...
2401cd34:	b9cc2e69 b9dd259a b9ed97f9 b9fd7dde     i....%.......}..
2401cd44:	ba066803 ba0dc3b9 ba14cec2 ba1b85f7     .h..............
2401cd54:	ba21e663 ba27ed41 ba2d97fb ba32e42a     c.!.A.'...-.*.2.
2401cd64:	ba37cf9f ba3c585d ba407c9a ba443ac0     ..7.]X<..|@..:D.
2401cd74:	ba479171 ba4a7f83 ba4d0404 ba4f1e39     q.G...J...M.9.O.
2401cd84:	ba50cd99 ba5211d8 ba52eada ba5358c0     ..P...R...R..XS.
2401cd94:	ba535bda ba52f4b1 ba522404 ba50eac6     .[S...R..$R...P.
2401cda4:	ba4f4a19 ba4d4357 ba4ad80c ba4809ef     .JO.WCM...J...H.
2401cdb4:	ba44daef ba414d20 ba3d62cb ba391e60     ..D. MA..b=.`.9.
2401cdc4:	ba34827b ba2f91e3 ba2a4f84 ba24be6d     {.4.../..O*.m.$.
2401cdd4:	ba1ee1d3 ba18bd11 ba12539b ba0ba908     .........S......
2401cde4:	ba04c10b b9fb3eda b9ec9027 b9dd7df5     .....>..'....}..
2401cdf4:	b9ce105c b9be4f9d b9ae4418 b99df645     \....O...D..E...
2401ce04:	b98d6ebc b9796c2e b957aa0f b935a890     .n...ly...W...5.
2401ce14:	b9137931 b8e25ad7 b89dad63 b832198c     1y...Z..c.....2.
2401ce24:	b724dca7 37be0f9f 38665f77 38b64657     ..$....7w_f8WF.8
2401ce34:	38f8a6a3 391d180f 393d6160 395d1f9e     ...8...9`a=9..]9
2401ce44:	397c4388 398d5f0f 399c4077 39aabef5     .C|9._.9w@.9...9
2401ce54:	39b8d3b5 39c6782d 39d3a60c 39e0574c     ...9-x.9...9LW.9
2401ce64:	39ec8627 39f82d28 3a01a391 3a06e79c     '..9(-.9...:...:
2401ce74:	3a0be06d 3a108be3 3a14e810 3a18f328     m..:...:...:(..:
2401ce84:	3a1cab8c 3a200fcb 3a231ea0 3a25d6f2     ...:.. :..#:..%:
2401ce94:	3a2837d7 3a2a4090 3a2bf08d 3a2d476c     .7(:.@*:..+:lG-:
2401cea4:	3a2e44f7 3a2ee929 3a2f3428 3a2f2645     .D.:)..:(4/:E&/:
2401ceb4:	3a2ebfff 3a2e0205 3a2ced2b 3a2b8275     ...:...:+.,:u.+:
2401cec4:	3a29c30d 3a27b04b 3a254bab 3a2296d3     ..):K.':.K%:..":
2401ced4:	3a1f9390 3a1c43d1 3a18a9ac 3a14c75b     ...:.C.:...:[..:
2401cee4:	3a109f34 3a0c33b5 3a078773 3a029d27     4..:.3.:s..:'..:
2401cef4:	39faef43 39f0339c 39e50d64 39d982d4     C..9.3.9d..9...9
2401cf04:	39cd9a4a 39c15a4e 39b4c98c 39a7eed3     J..9NZ.9...9...9
2401cf14:	399ad10c 398d7734 397fd0c0 39645779     ...94w.9...9yWd9
2401cf24:	394890f0 392c8ba5 39105624 38e7fdf3     ..H9..,9$V.9...8
2401cf34:	38af295f 386c970f 37f60540 361cec30     _).8..l8@..70..6
2401cf44:	b7cd9758 b856946d b8a2a9ff b8d969d6     X...m.V......i..
2401cf54:	b907b76a b9224f50 b93c6fb4 b9560bf9     j...PO"..o<...V.
2401cf64:	b96f17e0 b983c3bc b98fa79e b99b3205     ..o..........2..
2401cf74:	b9a65d8e b9b12512 b9bb83ab b9c574a3     .]...%.......t..
2401cf84:	b9cef38d b9d7fc33 b9e08aa6 b9e89b36     ....3.......6...
2401cf94:	b9f02a7f b9f73564 b9fdb901 ba01d965     .*..d5......e...
2401cfa4:	ba04903e ba07000a ba0927f1 ba0b073f     >........'..?...
2401cfb4:	ba0c9d67 ba0dea02 ba0eecce ba0fa5af     g...............
2401cfc4:	ba1014b0 ba1039ff ba1015f2 ba0fa903     .....9..........
2401cfd4:	ba0ef3ce ba0df718 ba0cb3c3 ba0b2ad9     .............*..
2401cfe4:	ba095d82 ba074d0c ba04fadf ba026888     .]...M.......h..
2401cff4:	b9ff2f5e b9f9143a b9f28364 b9eb80df     ^/..:...d.......
2401d004:	b9e410d9 b9dc37b3 b9d3fa07 b9cb5c8c     .....7.......\..
2401d014:	b9c26430 b9b91603 b9af7739 b9a58d2b     0d......9w..+...
2401d024:	b99b5d4a b990ed30 b9864281 b976c601     J]..0....B....v.
2401d034:	b960a8ff b94a39c4 b933842d b91c942e     ..`..9J.-.3.....
2401d044:	b90575cb b8dc69fe b8adbbb9 b87df171     .u...i......q.}.
2401d054:	b82071d6 b786505f 36cde2b2 37ec1a00     .q ._P.....6...7
2401d064:	38519ba8 38961d60 38c2dec2 38eefbfc     ..Q8`..8...8...8
2401d074:	390d2fc3 39227a21 393752de 394baffd     ./.9!z"9.R79..K9
2401d084:	395f87cf 3972d0fb 3982c13e 398bc9d1     .._9..r9>..9...9
2401d094:	39947e12 399cda0a 39a4d9f6 39ac7a47     .~.9...9...9Gz.9
2401d0a4:	39b3b7a6 39ba8ef0 39c0fd3d 39c6ffdb     ...9...9=..9...9
2401d0b4:	39cc9456 39d1b879 39d66a46 39daa7f9     V..9y..9Fj.9...9
2401d0c4:	39de7016 39e1c159 39e49abe 39e6fb7c     .p.9Y..9...9|..9
2401d0d4:	39e8e30c 39ea5127 39eb45c0 39ebc10e     ...9'Q.9.E.9...9
2401d0e4:	39ebc37f 39eb4dc6 39ea60c9 39e8fdb3     ...9.M.9.`.9...9
2401d0f4:	39e725e3 39e4daf0 39e21eaf 39def331     .%.9...9...91..9
2401d104:	39db5aac 39d7579c 39d2eca7 39ce1ca7     .Z.9.W.9...9...9
2401d114:	39c8ea9f 39c359cb 39bd6d8d 39b7296b     ...9.Y.9.m.9k).9
2401d124:	39b0911f 39a9a87b 39a27383 399af651     ...9{..9.s.9Q..9
2401d134:	39933525 398b3456 3982f854 39750b61     %5.9V4.9T..9a.u9
2401d144:	3963c216 39521e2c 39402930 392decb8     ..c9,.R90)@9..-9
2401d154:	391b7290 3908c477 38ebd89c 38c5e7cf     .r.9w..9...8...8
2401d164:	389fca60 38732806 3826b0ca 37b4ac65     `..8.(s8..&8e..7
2401d174:	3663f186 b775b801 b8088b05 b852f262     ..c6..u.....b.R.
2401d184:	b88e3f90 b8b28670 b8d63bff b8f94ed7     .?..p....;...N..
2401d194:	b90dd6ff b91ea46f b92f07b4 b93ef913     ....o...../...>.
2401d1a4:	b94e7102 b95d6856 b96bd821 b979b9c2     .qN.Vh].!.k...y.
2401d1b4:	b983837f b989dcf1 b98fe664 b9959d3e     ........d...>...
2401d1c4:	b99aff0b b9a00988 b9a4baa5 b9a9107e     ............~...
2401d1d4:	b9ad0965 b9b0a3d8 b9b3de8f b9b6b86f     e...........o...
2401d1e4:	b9b93096 b9bb4651 b9bcf921 b9be48ba     .0..QF..!....H..
2401d1f4:	b9bf3508 b9bfbe22 b9bfe459 b9bfa82d     .5.."...Y...-...
2401d204:	b9bf0a4f b9be0ba2 b9bcad3b b9baf05d     O.......;...]...
2401d214:	b9b8d676 b9b6612b b9b39242 b9b06bb7     v...+a..B....k..
2401d224:	b9acefa3 b9a92058 b9a50044 b9a091fa     ....X ..D.......
2401d234:	b99bd83c b996d5e4 b9918dee b98c037a     <...........z...
2401d244:	b98639c4 b9803420 b973ec0c b96705f1     .9.. 4....s...g.
2401d254:	b959bd29 b94c1923 b93e2163 b92fdd91     ).Y.#.L.c!>.../.
2401d264:	b921556d b91290dc b90397c4 b8e8e444     mU!.........D...
2401d274:	b8ca5015 b8ab8303 b88c8d39 b85afda9     .P......9.....Z.
2401d284:	b81ccfdb b7bd6210 b70303e5 36e70675     .....b......u..6
2401d294:	37b42a48 3816bd46 3852bae2 3886f819     H*.7F..8..R8...8
2401d2a4:	38a42002 38c0c6e2 38dcdec3 38f85a22     . .8...8...8"Z.8
2401d2b4:	390995df 3916a369 39234f90 392f9464     ...9i..9.O#9d./9
2401d2c4:	393b6c2e 3946d189 3951bf40 395c3070     .l;9..F9@.Q9p0\9
2401d2d4:	39662082 396f8b0f 39786c1e 39805ff6     . f9..o9.lx9._.9
2401d2e4:	39844182 3987d924 398b257b 398e253f     .A.9$..9{%.9?%.9
2401d2f4:	3990d761 39933af1 39954f32 39971389     a..9.:.92O.9...9
2401d304:	39988789 3999aaec 399a7d9a 399affa5     ...9...9.}.9...9
2401d314:	399b3144 399b12d7 399aa4ea 3999e831     D1.9...9...91..9
2401d324:	3998dd84 399785e7 3995e280 3993f49e     ...9...9...9...9
2401d334:	3991bdab 398f3f43 398c7b1a 39897304     ...9C?.9.{.9.s.9
2401d344:	39862900 39829f20 397daf35 3975a984     .).9 ..95.}9..u9
2401d354:	396d3202 39644db3 395b01e3 395153ee     .2m9.Md9..[9.SQ9
2401d364:	39474972 393ce820 393235d7 3927389c     rIG9 .<9.529.8'9
2401d374:	391bf687 391075d1 3904bcca 38f1a39c     ...9.u.9...9...8
2401d384:	38d9769d 38c0ff92 38a84b88 388f6798     .v.8...8.K.8.g.8
2401d394:	386cc1b8 383a88dd 38083ec4 37abfada     ..l8..:8.>.8...7
2401d3a4:	370f7ab7 b6603dc7 b77e436f b7e15e9e     .z.7.=`.oC~..^..
2401d3b4:	b8214693 b8513e75 b8803f97 b89778c3     .F!.u>Q..?...x..
2401d3c4:	b8ae3f6a b8c4887e b8da4948 b8ef7769     j?..~...HI..iw..
2401d3d4:	b9020471 b90bf9fc b91597c1 b91ed950     q...........P...
2401d3e4:	b927ba74 b930372b b9384bbc b93ff49a     t.'.+70..K8...?.
2401d3f4:	b9472e78 b94df655 b9544959 b95a24fd     x.G.U.M.YIT..$Z.
2401d404:	b95f86fa b9646d45 b968d61f b96cc000     .._.Emd...h...l.
2401d414:	b97029ae b973122f b97578d2 b9775d22     .)p./.s..xu."]w.
2401d424:	b978bef5 b9799e60 b979fbc4 b979d7b7     ..x.`.y...y...y.
2401d434:	b979331c b9780f14 b9766cfd b9744e74     .3y...x..lv.tNt.
2401d444:	b971b55a b96ea3c7 b96b1c09 b96720bb     Z.q...n...k.. g.
2401d454:	b962b49b b95ddaa2 b9589604 b952ea21     ..b...]...X.!.R.
2401d464:	b94cda84 b9466aff b93f9f66 b9387be4     ..L..jF.f.?..{8.
2401d474:	b93104a1 b9293e0c b9212ca0 b918d501     ..1..>)..,!.....
2401d484:	b9103bf1 b907664b b8fcb1e2 b8ea31fc     .;..Kf.......1..
2401d494:	b8d756fb b8c42b3d b8b0b920 b89d0b25     .V..=+.. ...%...
2401d4a4:	b8892bda b86a4ba0 b8420746 b8199fcd     .+...Kj.F.B.....
2401d4b4:	b7e254a2 b79177aa b701a4cb 35f71cbf     .T...w.........5
2401d4c4:	373e5809 37ae33ea 37fc61b0 3824c729     .X>7.3.7.a.7).$8
2401d4d4:	384ac9be 387025da 388a649b 389c5103     ..J8.%p8.d.8.Q.8
2401d4e4:	38adcf82 38bed7bb 38cf619d 38df655e     ...8...8.a.8^e.8
2401d4f4:	38eedb9c 38fdbd31 390601ad 390cd3d2     ...81..8...9...9
2401d504:	39135207 3919797a 391f4782 3924b9ae     .R.9zy.9.G.9..$9
2401d514:	3929cdc4 392e81ba 3932d3bc 3936c227     ..)9...9..29'.69
2401d524:	393a4b9d 393d6ee1 39402b03 39427f35     .K:9.n=9.+@95.B9
2401d534:	39446aed 3945edda 394707d7 3947b909     .jD9..E9..G9..G9
2401d544:	394801ad 3947e252 39475bac 39466eac     ..H9R.G9.[G9.nF9
2401d554:	39451c71 3943664e 39414dcf 393ed49f     q.E9NfC9.MA9..>9
2401d564:	393bfca7 3938c7fe 393538de 393151c0     ..;9..89.859.Q19
2401d574:	392d152a 392885df 3923a6c0 391e7ae1     *.-9..(9..#9.z.9
2401d584:	39190560 39134992 390d4ad8 39070ccc     `..9.I.9.J.9...9
2401d594:	39009305 38f3c28c 38e5f6be 38d7ca83     ...9...8...8...8
2401d5a4:	38c945c0 38ba7096 38ab5339 389bf5f8     .E.8.p.89S.8...8
2401d5b4:	388c6133 38793ab2 385965d2 383954c1     3a.8.:y8.eY8.T98
2401d5c4:	3819188b 37f18460 37b0c53c 37602add     ...8`..7<..7.*`7
2401d5d4:	36be59c1 b604b4d9 b720a1cf b78f781d     .Y.6...... ..x..
2401d5e4:	b7cdec68 b805c73e b8241fdc b841f115     h...>.....$...A.
2401d5f4:	b85f2c4a b87bc342 b88bd41c b89966ea     J,_.B.{......f..
2401d604:	b8a6939d b8b35404 b8bfa233 b8cb7885     .....T..3....x..
2401d614:	b8d6d191 b8e1a855 b8ebf7f7 b8f5bbf5     ....U...........
2401d624:	b8fef02d b903c868 b907cd21 b90b84ae     -...h...!.......
2401d634:	b90eeda2 b91206b3 b914cece b9174509     .............E..
2401d644:	b919689e b91b3903 b91cb5c9 b91ddebb     .h...9..........
2401d654:	b91eb3c3 b91f3503 b91f62c1 b91f3d78     .....5...b..x=..
2401d664:	b91ec5b8 b91dfc50 b91ce22f b91b7878     ....P.../...xx..
2401d674:	b919c05e b917bb4f b9156ad8 b912d0ab     ^...O....j......
2401d684:	b90fee9b b90cc6ab b9095ae6 b905ad8c     .........Z......
2401d694:	b901c0fb b8fb2f2d b8f267ff b8e931af     ....-/...g...1..
2401d6a4:	b8df91d2 b8d58e0c b8cb2c3a b8c0726a     ........:,..jr..
2401d6b4:	b8b566c4 b8aa0f8f b89e7335 b8929832     .f......5s..2...
2401d6c4:	b886851d b874813e b85ba2db b8427c95     ....>.t...[..|B.
2401d6d4:	b8291bfe b80f8eaf b7ebc488 b7b848a7     ..)..........H..
2401d6e4:	b784c4bd b722a76f b67081f4 36275a21     ....o."...p.!Z'6
2401d6f4:	370f0973 377344d0 37ab2b04 37dc05ba     s..7.Ds7.+.7...7
2401d704:	38060d1f 381da863 3834c91b 384b6407     ...8c..8..48.dK8
2401d714:	38616e40 3876dd41 3885d372 388fe0b3     @na8A.v8r..8...8
2401d724:	389991be 38a2e21f 38abcda0 38b45045     ...8...8...8EP.8
2401d734:	38bc6652 38c40c44 38cb3ee0 38d1fb2b     Rf.8D..8.>.8+..8
2401d744:	38d83e5f 38de0618 38e35015 38e81a75     _>.8...8.P.8u..8
2401d754:	38ec638d 38f029f9 38f36ca6 38f62ab7     .c.8.).8.l.8.*.8
2401d764:	38f863b0 38fa1741 38fb4575 38fbee77     .c.8A..8uE.8w..8
2401d774:	38fc12f9 38fbb3ad 38fad1b5 38f96e5a     ...8...8...8Zn.8
2401d784:	38f78b39 38f52a40 38f24d5e 38eef6fe     9..8@*.8^M.8...8
2401d794:	38eb29a5 38e6e82c 38e23579 38dd14d3     .).8,..8y5.8...8
2401d7a4:	38d789a9 38d19790 38cb4251 38c48dec     ...8...8QB.8...8
2401d7b4:	38bd7e82 38b61862 38ae5fff 38a659ed     .~.8b..8._.8.Y.8
2401d7c4:	389e0ae6 389577bf 388ca569 388398ec     ...8.w.8i..8...8
2401d7d4:	3874aed3 3861cc24 384e9452 383b11fb     ..t8$.a8R.N8..;8
2401d7e4:	38274fd4 381358a0 37fe6e57 37d5ec8c     .O'8.X.8Wn.7...7
2401d7f4:	37ad4181 378482ba 37378b5f 36cc7eb9     .A.7...7_.77.~.6
2401d804:	35aa5cd1 b66c9886 b70aeca4 b759df59     .\.5..l.....Y.Y.
2401d814:	b793eb2e b7ba5553 b7e01af3 b80294b8     ....SU..........
2401d824:	b814b74f b8266c72 b837ab98 b8486c8a     O...rl&...7..lH.
2401d834:	b858a75f b868547e b8776cad b882f483     _.X.~Th..lw.....
2401d844:	b889e182 b8907a40 b896bbdc b89ca3a9     ....@z..........
2401d854:	b8a22f2a b8a75c1c b8ac286a b8b0923c     */...\..j(..<...
2401d864:	b8b497ee b8b83815 b8bb717b b8be4324     .....8..{q..$C..
2401d874:	b8c0ac4d b8c2ac68 b8c44322 b8c5705e     M...h..."C..^p..
2401d884:	b8c63438 b8c68f02 b8c68146 b8c60bc1     84......F.......
2401d894:	b8c52f69 b8c3ed65 b8c24712 b8c03dfd     i/..e....G...=..
2401d8a4:	b8bdd3e7 b8bb0abc b8b7e49b b8b463d1     .............c..
2401d8b4:	b8b08ad0 b8ac5c3c b8a7dadd b8a309a1     ....<\..........
2401d8c4:	b89deb9c b8988406 b892d638 b88ce5a8     ........8.......
2401d8d4:	b886b5e9 b8804aac b8734f6e b865a1d7     .....J..nOs...e.
2401d8e4:	b8579471 b8492f4b b83a7a90 b82b7e83     q.W.K/I..z:..~+.
2401d8f4:	b81c4382 b80cd1fe b7fa64dd b7dadac1     .C.......d......
2401d904:	b7bb16b4 b79b29d0 b7764a40 b736334d     .....)..@Jv.M36.
2401d914:	b6ec60fb b6598d4e 351130b4 369023c4     .`..N.Y..0.5.#.6
2401d924:	370678eb 3744286a 3780809d 379e7272     .x.7j(D7...7rr.7
2401d934:	37bbdad6 37d8ab3a 37f4d599 38082622     ...7:..7...7"&.8
2401d944:	38158109 38227525 382efc61 383b10eb     ...8%u"8a..8..;8
2401d954:	3846ad32 3851cbf4 385c683b 38667d58     2.F8..Q8;h\8X}f8
2401d964:	387006f5 38790106 3880b3ea 38849bfc     ..p8..y8...8...8
2401d974:	38883736 388b8439 388e81d8 38912f0c     67.89..8...8./.8
2401d984:	38938b00 38959507 38974ca1 3898b17c     ...8...8.L.8|..8
2401d994:	3899c373 389a828a 389aeef0 389b0905     s..8...8...8...8
2401d9a4:	389ad14e 389a487b 38996f6a 3898471b     N..8{H.8jo.8.G.8
2401d9b4:	3896d0bc 38950d9d 3892ff38 3890a72d     ...8...88..8-..8
2401d9c4:	388e073a 388b2146 3887f754 38848b8d     :..8F!.8T..8...8
2401d9d4:	3880e036 3879ef60 3871a8f5 3868f25d     6..8`.y8..q8].h8
2401d9e4:	385fd0fb 38564a62 384c6452 384224ad     .._8bJV8RdL8.$B8
2401d9f4:	38379181 382cb0fb 38218960 38162116     ..78..,8`.!8.!.8
2401da04:	380a7e9a 37fd50eb 37e54a8c 37ccf772     .~.8.P.7.J.7r..7
2401da14:	37b464f3 379ba081 3782b787 37536ee5     .d.7...7...7.nS7
2401da24:	37215b2d 36de9d0e 36758d3a 353b3a04     -[!7...6:.u6.:;5
2401da34:	b6169ad7 b6ad2480 b706f5f4 b736b943     .....$......C.6.
2401da44:	b765c40d b789ff6a b7a0a95c b7b6d4aa     ..e.j...\.......
2401da54:	b7cc7693 b7e1849b b7f5f4bc b804dea3     .v..............
2401da64:	b80e6a7f b8179987 b820678c b828d09b     .j.......g ...(.
2401da74:	b830d0fc b8386531 b83f8a05 b8463c7c     ..0.1e8...?.|<F.
2401da84:	b84c79e1 b8523fbc b8578be2 b85c5c60     .yL..?R...W.`\\.
2401da94:	b860af94 b864841b b867d8d7 b86aacf3     ..`...d...g...j.
2401daa4:	b86cffe1 b86ed150 b870213e b870efe8     ..l.P.n.>!p...p.
2401dab4:	b8713dd1 b8710bbd b8705ab9 b86f2c0b     .=q...q..Zp..,o.
2401dac4:	b86d813b b86b5c17 b868bea2 b865ab1e     ;.m..\k...h...e.
2401dad4:	b862240c b85e2c1b b859c63c b854f591     .$b..,^.<.Y...T.
2401dae4:	b84fbd6c b84a2151 b84424f5 b83dcc39     l.O.Q!J..$D.9.=.
2401daf4:	b8371b25 b83015ea b828c0e0 b821207b     %.7...0...(.{ !.
2401db04:	b8193956 b8111022 b808a9b5 b8000af2     V9.."...........
2401db14:	b7ee71aa b7dc70d8 b7ca1da5 b7b7826b     .q...p......k...
2401db24:	b7a4a984 b7919d70 b77cd14b b7562b3c     ....p...K.|.<+V.
2401db34:	b72f5da9 b7087d7e b6c33eea b66b60b5     .]/.~}...>...`k.
2401db44:	b5a1e08f 35910587 3660a8ca 36bb99c2     .......5..`6...6
2401db54:	3702f580 3727913d 374b8dae 376ed8ea     ...7=.'7..K7..n7
2401db64:	3788b0bb 37998b3d 37a9f3c8 37b9e280     ...7=..7...7...7
2401db74:	37c94fce 37d8347e 37e689a4 37f448ae     .O.7~4.7...7.H.7
2401db84:	3800b5b9 3806f60c 380ce29a 381278d6     ...8...8...8.x.8
2401db94:	3817b672 381c994a 38211f70 3825472f     r..8J..8p.!8/G%8
2401dba4:	38290f03 382c759f 382f79f2 38321b15     ..)8.u,8.y/8..28
2401dbb4:	38345863 38363169 3837a5ed 3838b5e5     cX48i168..78..88
2401dbc4:	38396180 3839a924 38398d67 38390f1c     .a98$.98g.98..98
2401dbd4:	38382f3c 3836eefb 38354fbe 38335317     </88..68.O58.S38
2401dbe4:	3830fac9 382e48be 382b3f19 3827e01c     ..08.H.8.?+8..'8
2401dbf4:	38242e38 38202c03 381bdc3a 381741c0     8.$8., 8:..8.A.8
2401dc04:	38125f98 380d38e6 3807d0ee 38022b0d     ._.8.8.8...8.+.8
2401dc14:	37f89585 37ec6739 37dfd289 37d2def3     ...79g.7...7...7
2401dc24:	37c59417 37b7f9b6 37aa17ab 379bf5e9     ...7...7...7...7
2401dc34:	378d9c72 377e26b3 3760c591 374325af     r..7.&~7..`7.%C7
2401dc44:	37255760 37076aeb 36d2e106 3696f08a     `W%7.j.7...6...6
2401dc54:	363648bc 357ce15d b55c460e b62c5724     .H66].|5.F\.$W,.
2401dc64:	b6902ded b6c9720b b700ed60 b71ca5cb     .-...r..`.......
2401dc74:	b737d463 b7526bb2 b76c5e97 b782d045     c.7..kR..^l.E...
2401dc84:	b78f12a5 b79af09a b7a66495 b7b1693d     .........d..=i..
2401dc94:	b7bbf986 b7c610b0 b7cfaa3f b7d8c208     ........?.......
2401dca4:	b7e15429 b7e95d0a b7f0d97a b7f7c67b     )T...]..z...{...
2401dcb4:	b7fe2175 b801f411 b8048c43 b806d885     u!......C.......
2401dcc4:	b808d82b b80a8abf b80befed b80d078a     +...............
2401dcd4:	b80dd19e b80e4e52 b80e7dfc b80e611a     ....RN...}...a..
2401dce4:	b80df850 b80d4471 b80c466a b80aff5d     P...qD..jF..]...
2401dcf4:	b8097083 b8079b41 b8058121 b80323c9     .p..A...!....#..
2401dd04:	b8008502 b7fb4d6a b7f515d4 b7ee6792     ....jM.......g..
2401dd14:	b7e74717 b7dfb927 b7d7c2a2 b7cf689e     .G..'........h..
2401dd24:	b7c6b05a b7bd9f44 b7b43ae7 b7aa88f8     Z...D....:......
2401dd34:	b7a08f4a b79653b9 b78bdc54 b7812f35     J....S..T...5/..
2401dd44:	b76ca4f1 b75698ab b740462c b729b9f3     ..l...V.,F@...).
2401dd54:	b713008d b6f84d2e b6ca7135 b69c8626     .....M..5q..&...
2401dd64:	b65d49b1 b601cbcb b51b0d35 354e7ebb     .I].....5....~N5
2401dd74:	360d2dce 3665b888 369e891b 36c98718     .-.6..e6...6...6
2401dd84:	36f3c072 370e8ffa 3722c887 37367fed     r..6...7.."7..67
2401dd94:	3749ac83 375c450e 376e40bf 377f971f     ..I7.E\7.@n7...7
2401dda4:	37882008 379019fd 3797b5dd 379ef044     . .7...7...7D..7
2401ddb4:	37a5c619 37ac346d 37b2389f 37b7d03e     ...7m4.7.8.7>..7
2401ddc4:	37bcf92e 37c1b17c 37c5f77f 37c9c9d4     ...7|..7...7...7
2401ddd4:	37cd2750 37d00f12 37d28076 37d47b18     P'.7...7v..7.{.7
2401dde4:	37d5fed8 37d70bd7 37d7a271 37d7c341     ...7...7q..7A..7
2401ddf4:	37d76f34 37d6a751 37d56cfd 37d3c1ca     4o.7Q..7.l.7...7
2401de04:	37d1a77b 37cf201f 37cc2de7 37c8d351     {..7. .7.-.7Q..7
2401de14:	37c512fc 37c0efc2 37bc6ca6 37b78cda     ...7...7.l.7...7
2401de24:	37b253c4 37acc4f3 37a6e40f 37a0b4ef     .S.7...7...7...7
2401de34:	379a3b97 37937c17 378c7aa4 37853b9a     .;.7.|.7.z.7.;.7
2401de44:	377b86c0 376c2cf1 375c72f8 374c6211     ..{7.,l7.r\7.bL7
2401de54:	373c03ae 372b6143 371a847b 370976e1     ..<7Ca+7{..7.v.7
2401de64:	36f0843b 36cddfb1 36ab1367 36883294     ;..6...6g..6.2.6
2401de74:	364aa0a4 3604ff27 357e98f1 b3a8a189     ..J6'..6..~5....
2401de84:	b5933c4a b60d4115 b6500a9c b688ec18     J<...A....P.....
2401de94:	b6a94407 b6c8fcb4 b6e80625 b7032873     .D......%...s(..
2401dea4:	b711e704 b7203797 b72e134b b73b7374     .....7 .K...ts;.
2401deb4:	b74851e9 b754a8a5 b7607208 b76ba8d4     .QH...T..r`...k.
2401dec4:	b7764825 b78025b1 b784d730 b78936ab     %Hv..%..0....6..
2401ded4:	b78d4261 b790f8db b79458b9 b79760de     aB.......X...`..
2401dee4:	b79a105d b79c6670 b79e6293 b7a00469     ]...pf...b..i...
2401def4:	b7a14bcb b7a238c5 b7a2cb98 b7a304a7     .K...8..........
2401df04:	b7a2e497 b7a26c33 b7a19c74 b7a07682     ....3l..t....v..
2401df14:	b79efbb6 b79d2d8d b79b0db9 b7989e0d     .....-..........
2401df24:	b795e07d b792d73b b78f8486 b78beac8     }...;...........
2401df34:	b7880c99 b783ec9e b77f1b57 b775e53b     ........W...;.u.
2401df44:	b76c3d0c b76228fa b757af75 b74cd6f9     .=l..(b.u.W...L.
2401df54:	b741a65c b7362466 b72a5817 b71e4884     \.A.f$6..X*..H..
2401df64:	b711fcd9 b7057c51 b6f19c6d b6d7f3ba     ....Q|..m.......
2401df74:	b6be0d43 b6a3f7bb b689c1d2 b65ef46c     C...........l.^.
2401df84:	b62a5ee1 b5ebbfe2 b5832877 b4598081     .^*.....w(....Y.
2401df94:	3517e325 35b20597 360b6b1c 363d1760     %..5...5.k.6`.=6
2401dfa4:	366dedde 368eeac8 36a65b0f 36bd3bfc     ..m6...6.[.6.;.6
2401dfb4:	36d38230 36e922b6 36fe1310 37092499     0..6.".6...6.$.7
2401dfc4:	3712ddc6 371c308b 372518a0 372d9203     ...7.0.7..%7..-7
2401dfd4:	373598fc 373d2a1a 37444224 374ade46     ..57.*=7$BD7F.J7
2401dfe4:	3750fbe0 375698a0 375bb28e 376047f0     ..P7..V7..[7.G`7
2401dff4:	3764575d 3767dfc1 376ae04c 376d5879     ]Wd7..g7L.j7yXm7
2401e004:	376f481d 3770af42 37718e4b 3771e5f5     .Ho7B.p7K.q7..q7
2401e014:	3771b72f 3771032e 376fcb7f 376e11f9     /.q7..q7..o7..n7
2401e024:	376bd897 376921b5 3765efe7 376245f7     ..k7.!i7..e7.Eb7
2401e034:	375e26fe 3759963f 37549735 374f2d9b     .&^7?.Y75.T7.-O7
2401e044:	37495d5b 37432a8a 373c997d 3735ae8b     []I7.*C7}.<7..57
2401e054:	372e6e63 3726ddc5 371f018c 3716debf     cn.7..&7...7...7
2401e064:	370e7a7a 3705d9f5 36fa0501 36e7f2f6     zz.7...7...6...6
2401e074:	36d588b0 36c2d125 36afd768 369ca697     ...6%..6h..6...6
2401e084:	368949d0 366b9875 364471e0 361d360b     .I.6u.k6.qD6.6.6
2401e094:	35ebf5d4 359dacb0 351f7782 329367e6     ...5...5.w.5.g.2
2401e0a4:	b514e783 b5965f2c b5e14c42 b61589bb     ....,_..BL......
2401e0b4:	b639c723 b65d4ba2 b6800284 b690f0e0     #.9..K].........
2401e0c4:	b6a1686e b6b16108 b6c0d2e4 b6cfb693     nh...a..........
2401e0d4:	b6de0503 b6ebb789 b6f8c7df b7029813     ................
2401e0e4:	b7087574 b70df990 b713221d b717ed03     tu......."......
2401e0f4:	b71c586c b72062b4 b7240a74 b7274e81     lX...b .t.$..N'.
2401e104:	b72a2dea b72ca7f0 b72ebc16 b7306a24     .-*...,.....$j0.
2401e114:	b731b204 b73293ef b7331051 b73327b9     ..1...2.Q.3..'3.
2401e124:	b732db04 b7322b4f b73119ce b72fa802     ..2.O+2...1.../.
2401e134:	b72dd798 b72baa5d b729226d b72641fd     ..-.].+.m")..A&.
2401e144:	b7230b71 b71f815e b71ba680 b7177dba     q.#.^........}..
2401e154:	b7130a15 b70e4ebc b7094efc b7040e42     .....N...N..B...
2401e164:	b6fd2031 b6f1b045 b6e5d437 b6d993b0     1 ..E...7.......
2401e174:	b6ccf67b b6c00489 b6b2c5e6 b6a542bc     {............B..
2401e184:	b6978342 b6898fc5 b676e138 b65a5c45     B.......8.v.E\Z.
2401e194:	b63da166 b620c150 b603cca5 b5cda7d9     f.=.P. .........
2401e1a4:	b593cf1c b5345efb b483a42f 343f256f     .....^4./...o%?4
2401e1b4:	3520355b 35879a89 35be4690 35f401c4     [5 5...5.F.5...5
2401e1c4:	361457f2 362e1acd 36473c3b 365faf7a     .W.6...6;<G6z._6
2401e1d4:	36776849 36872d76 36923e19 369ce0bf     Ihw6v-.6.>.6...6
2401e1e4:	36a71060 36b0c847 36ba0405 36c2bf89     `..6G..6...6...6
2401e1f4:	36caf705 36d2a70b 36d9cc7a 36e06489     ...6...6z..6.d.6
2401e204:	36e66ccd 36ebe325 36f0c5d5 36f51370     .l.6%..6...6p..6
2401e214:	36f8cae7 36fbeb81 36fe74dc 37003377     ...6...6.t.6w3.7
2401e224:	3700e101 3701435d 37015b06 370128a1     ...7]C.7.[.7.(.7
2401e234:	3700acfb 36ffd215 36fdbbd7 36fb19bf     ...7...6...6...6
2401e244:	36f7ee9f 36f43d91 36f009eb 36eb5754     ...6.=.6...6TW.6
2401e254:	36e629a7 36e08503 36da6dc5 36d3e874     .).6...6.m.6t..6
2401e264:	36ccf9dc 36c5a6ef 36bdf4d0 36b5e8d2     ...6...6...6...6
2401e274:	36ad8862 36a4d923 369be0c8 3692a528     b..6#..6...6(..6
2401e284:	36892c34 367ef7db 366b34d9 36571ba6     4,.6..~6.4k6..W6
2401e294:	3642b8a5 362e183d 361946df 360450fb     ..B6=..6.F.6.P.6
2401e2a4:	35de85f0 35b45258 358a1fb6 35400c96     ...5XR.5...5..@5
2401e2b4:	34d87880 33c7edc1 b46601ae b50b1078     .x.4...3..f.x...
2401e2c4:	b55b85ab b5955a2d b5bc38f7 b5e24a85     ..[.-Z...8...J..
2401e2d4:	b603bd71 b615db5f b62775bc b63883a3     q..._....u'...8.
2401e2e4:	b648fc97 b658d87d b6680fae b6769aef     ..H.}.X...h...v.
2401e2f4:	b68239c5 b688c995 b68efa01 b694c861     .9..........a...
2401e304:	b69a324c b69f3597 b6a3d05a b6a800eb     L2...5..Z.......
2401e314:	b6abc5e7 b6af1e2a b6b208cf b6b4853b     ....*.......;...
2401e324:	b6b6930c b6b83225 b6b962af b6ba2508     ....%2...b...%..
2401e334:	b6ba79d9 b6ba6201 b6b9de9f b6b8f10c     .y...b..........
2401e344:	b6b79ae5 b6b5ddf2 b6b3bc3e b6b13806     ........>....8..
2401e354:	b6ae53b7 b6ab11fa b6a775a0 b6a381a9     .S.......u......
2401e364:	b69f3947 b69a9fcd b695b8be b69087ba     G9..............
2401e374:	b68b108c b6855714 b67ebeb7 b6725af8     .....W....~..Zr.
2401e384:	b6658b5d b658587f b64acb17 b63cebff     ].e..XX...J...<.
2401e394:	b62ec431 b6205cb9 b611beb1 b602f337     1....\ .....7...
2401e3a4:	b5e806f3 b5c9f137 b5abb779 b58d6bee     ....7...y....k..
2401e3b4:	b55e4113 b521ce5b b4cb45e1 b4278657     .A^.[.!..E..W.'.
2401e3c4:	338a9c67 3497b5e9 350593d8 353e5e3d     g..3...4...5=^>5
2401e3d4:	35761b07 35965600 35b0f9ff 35caeb6c     ..v5.V.5...5l..5
2401e3e4:	35e41cbf 35fc8103 360a05f5 361558db     ...5...5...6.X.6
2401e3f4:	362033ae 362a9137 36346c98 363dc156     .3 67.*6.l46V.=6
2401e404:	36468b47 364ec6a1 36566ffd 365d844b     G.F6..N6.oV6K.]6
2401e414:	366400e6 3669e381 366f2a34 3673d380     ..d6..i64*o6..s6
2401e424:	3677de3a 367b49a0 367e155b 368020b3     :.w6.I{6[.~6. .6
2401e434:	3680e70d 36815e20 36818676 368160cc     ...6 ^.6v..6.`.6
2401e444:	3680ee09 36802f42 367e4b6c 367ba59b     ...6B/.6lK~6..{6
2401e454:	36787034 3674aea5 367064ae 366b964f     4px6..t6.dp6O.k6
2401e464:	366647d4 36607dca 365a3cf8 36538a67     .Gf6.}`6.<Z6g.S6
2401e474:	364c6b4f 3644e527 363cfd89 3634ba48     OkL6'.D6..<6H.46
2401e484:	362c215a 362338d4 361a06ed 36109202     Z!,6.8#6...6...6
2401e494:	3606e07f 35f9f1ce 35e5c38b 35d14378     ...6...5...5xC.5
2401e4a4:	35bc7eda 35a78304 35925d43 357a35a8     .~.5...5C].5.5z5
2401e4b4:	354f91e8 3524e96f 34f4ac59 349fe37e     ..O5o.$5Y..4~..4
2401e4c4:	34175591 b2798518 b434a16b b4abb349     .U.4..y.k.4.I...
2401e4d4:	b4fbc58d b5252d34 b54ba313 b5712f46     ....4-%...K.F/q.
2401e4e4:	b58adeb7 b59c9d13 b5adc94c b5be5a90     ........L....Z..
2401e4f4:	b5ce4872 b5dd8af9 b5ec1abb b5f9f0c6     rH..............
2401e504:	b603835b b609ab4d b60f6d93 b614c7c1     [...M....m......
2401e514:	b619b7b6 b61e3ba0 b62251e5 b625f93c     .....;...Q".<.%.
2401e524:	b62930ab b62bf76f b62e4d1a b630317d     .0).o.+..M..}10.
2401e534:	b631a4b6 b632a72a b6333978 b6335c8d     ..1.*.2.x93..\3.
2401e544:	b633118f b63259f6 b6313765 b62fabc7     ..3..Y2.e71.../.
2401e554:	b62db949 b62b6242 b628a953 b6259143     I.-.Bb+.S.(.C.%.
2401e564:	b6221d15 b61e4ffb b61a2d5c b615b8bc     .."..O..\-......
2401e574:	b610f5d3 b60be886 b60694c9 b600fec9     ................
2401e584:	b5f6557e b5ea3a01 b5ddb412 b5d0ccb9     ~U...:..........
2401e594:	b5c38d24 b5b5fea3 b5a82a96 b59a1a7a     $........*..z...
2401e5a4:	b58bd7dc b57ad85d b55dc20a b5407fb5     ....].z...]...@.
2401e5b4:	b5232441 b505c26d b4d0d987 b4966b27     A$#.m.......'k..
2401e5c4:	b438bb90 b38b5357 333067f7 341c4ba4     ..8.WS...g03.K.4
2401e5d4:	348554a2 34bb795e 34f074fc 351214c5     .T.4^y.4.t.4...5
2401e5e4:	352b3d1a 3543a5b7 355b416e 357203be     .=+5..C5nA[5..r5
2401e5f4:	3583f06b 358e66ca 35985fd2 35a1d6a1     k..5.f.5._.5...5
2401e604:	35aac6d1 35b32c54 35bb037c 35c24907     ...5T,.5|..5.I.5
2401e614:	35c8fa11 35cf1432 35d49553 35d97bcc     ...52..5S..5.{.5
2401e624:	35ddc66b 35e1745b 35e48522 35e6f8bf     k..5[t.5"..5...5
2401e634:	35e8cf94 35ea0a62 35eaaa4b 35eab0db     ...5b..5K..5...5
2401e644:	35ea1fed 35e8f9c5 35e74101 35e4f88c     ...5...5.A.5...5
2401e654:	35e223b1 35dec605 35dae368 35d68016     .#.5...5h..5...5
2401e664:	35d1a07c 35cc4958 35c67fa6 35c0488d     |..5XI.5...5.H.5
2401e674:	35b9a98d 35b2a83f 35ab4a6a 35a39610     ...5?..5jJ.5...5
2401e684:	359b9158 35934279 358aafd1 3581dfe2     X..5yB.5...5...5
2401e694:	3571b26b 355f44ce 354c843e 35397e18     k.q5.D_5>.L5.~95
2401e6a4:	35263fc0 3512d690 34fe9fb9 34d771b7     .?&5...5...4.q.4
2401e6b4:	34b03d55 34891c82 34445186 33edece0     U=.4...4.QD4...3
2401e6c4:	3329641f b3055a25 b3d7d2a0 b43531ad     .d)3%Z.......15.
2401e6d4:	b47d0361 b4a199e2 b4c3ccde b4e506f6     a.}.............
2401e6e4:	b5029aaf b512231e b5211453 b52f665f     .....#..S.!._f/.
2401e6f4:	b53d11d4 b54a0fca b55659e6 b561ea5a     ..=...J..YV.Z.a.
2401e704:	b56cbbe6 b576c9df b5800814 b584459d     ..l...v......E..
2401e714:	b5881c13 b58b8a46 b58e8f55 b5912aa2     ....F...U....*..
2401e724:	b5935bde b5952308 b5968055 b5977452     .[...#..U...Rt..
2401e734:	b597ffc9 b59823dd b597e1ca b5973b37     .....#......7;..
2401e744:	b59631f5 b594c81d b592fff4 b590dc05     .1..............
2401e754:	b58e5f0f b58b8bfe b58865fb b584f05d     ._.......e..]...
2401e764:	b5812e96 b57a489e b571aaab b5688b2d     .....Hz...q.-.h.
2401e774:	b55ef23d b554e831 b54a7590 b53fa307     =.^.1.T..uJ...?.
2401e784:	b534796e b52901b9 b51d44f3 b5114c39     ny4...)..D..9L..
2401e794:	b50520b4 b4f1971a b4d8abd9 b4bf91e3     . ..............
2401e7a4:	b4a65b5b b48d1a37 b467c062 b4357d91     [[..7...b.g..}5.
2401e7b4:	b4038e51 b3a428a0 b304c193 326fd6b5     Q....(........o2
2401e7c4:	33795845 33d97706 341a10c6 34463a10     EXy3.w.3...4.:F4
2401e7d4:	34711ccc 348d4fd1 34a1554d 34b4938d     ..q4.O.4MU.4...4
2401e7e4:	34c6fffa 34d890b7 34e93cad 34f8fb80     ...4...4.<.4...4
2401e7f4:	3503e2d2 350aca29 351130cb 35171422     ...5)..5.0.5"..5
2401e804:	351c7203 352148a9 352596b7 35295b39     .r.5.H!5..%59[)5
2401e814:	352c959d 352f45c2 35316bdf 35330896     ..,5.E/5.k15..35
2401e824:	35341ce8 3534aa39 3534b241 35343720     ..459.45A.45 745
2401e834:	35333b41 3531c16d 352fccbc 352d6092     A;35m.15../5.`-5
2401e844:	352a80a2 352730e3 35237594 351f532b     ..*5.0'5.u#5+S.5
2401e854:	351ace61 3515ec21 3510b18b 350b23ec     a..5!..5...5.#.5
2401e864:	350548bb 34fe4b24 34f18058 34e43cc3     .H.5$K.4X..4.<.4
2401e874:	34d68c38 34c87abb 34ba145e 34ab654e     8..4.z.4^..4Ne.4
2401e884:	349c79b2 348d5dc0 347c3b28 345d8a7d     .y.4.].4(;|4}.]4
2401e894:	343ec15a 341ff757 340143ac 33c57a35     Z.>4W..4.C.45z.3
2401e8a4:	3388f3f6 331a402e 32114718 b29f22aa     ...3.@.3.G.2."..
2401e8b4:	b3411a0b b397fe24 b3cdf79a b4012b58     ..A.$.......X+..
2401e8c4:	b41a7d45 b432e1f9 b44a4af1 b460aa9a     E}....2..JJ...`.
2401e8d4:	b475f455 b4850e56 b48e8c92 b4977034     U.u.V.......4p..
2401e8e4:	b49fb511 b4a75799 b4ae54bd b4b4aa09     .....W...T......
2401e8f4:	b4ba558e b4bf55ec b4c3aa54 b4c7527e     .U...U..T...~R..
2401e904:	b4ca4eab b4cc9fa6 b4ce46ba b4cf45b7     .N.......F...E..
2401e914:	b4cf9eee b4cf5523 b4ce6b96 b4cce5f3     ....#U...k......
2401e924:	b4cac85b b4c8174e b4c4d7bb b4c10ee2     [...N...........
2401e934:	b4bcc262 b4b7f82a b4b2b672 b4ad03c0     b...*...r.......
2401e944:	b4a6e6d1 b4a0669c b4998a4e b492593a     .....f..N...:Y..
2401e954:	b48adad7 b48316c6 b476295b b465b89e     ........[)v...e.
2401e964:	b454eaea b443cfdd b43276f6 b420efc6     ..T...C..v2... .
2401e974:	b40f499b b3fb275f b3d7b9e3 b3b4682b     .I.._'......+h..
2401e984:	b3914efe b35d14ca b3186b4b b2a9ac8f     .N....].Kk......
2401e994:	b19444ff 32393335 32daf688 332ad657     .D..5392...2W.*3
2401e9a4:	336633fd 338fb652 33ab2dac 33c56ee4     .3f3R..3.-.3.n.3
2401e9b4:	33de6a36 33f61138 34062b7b 341097f7     6j.38..3{+.4...4
2401e9c4:	341a490b 34233a6b 342b6893 3432d0a1     .I.4k:#4.h+4..24
2401e9d4:	34397092 343f46ff 3444534f 3448959d     .p94.F?4OSD4..H4
2401e9e4:	344c0ea6 344ebfe8 3450ab86 3451d449     ..L4..N4..P4I.Q4
2401e9f4:	34523d97 3451eb7c 3450e28e 344f27eb     .=R4|.Q4..P4.'O4
2401ea04:	344cc152 3449b4dc 3446093f 3441c57c     R.L4..I4?.F4|.A4
2401ea14:	343cf11c 343793e7 3431b60e 342b6007     ..<4..74..14.`+4
2401ea24:	34249a90 341d6e99 3415e542 340e07d5     ..$4.n.4B..4...4
2401ea34:	3405dfb9 33faecc5 33e9aab6 33d80c4b     ...4...3...3K..3
2401ea44:	33c6247d 33b40620 33a1c3d7 338f7004     }$.3 ..3...3.p.3
2401ea54:	337a395c 3355b6fc 33317b49 330da79c     \9z3..U3I{13...3
2401ea64:	32d4b870 328f7037 321763d1 309b60fd     p..27p.2.c.2.`.0
2401ea74:	b1d9373f b2684eb1 b2afa77a b2e8a27f     ?7...Nh.z.......
2401ea84:	b30f7821 b3293619 b3417abc b3583779     !x...6)..zA.y7X.
2401ea94:	b36d5fa5 b380743e b3896492 b3917d59     ._m.>t...d..Y}..
2401eaa4:	b398bc0f b39f1f1e b3a4a5e6 b3a950ac     .............P..
2401eab4:	b3ad209c b3b017c2 b3b23903 b3b38812     . .......9......
2401eac4:	b3b40972 b3b3c262 b3b2b8d8 b3b0f37a     r...b.......z...
2401ead4:	b3ae798e b3ab52f0 b3a7880c b3a321c8     .y...R.......!..
2401eae4:	b39e2980 b398a8f4 b392aa40 b38c37ca     .)......@....7..
2401eaf4:	b3855c39 b37c44c0 b36d2a7b b35d7fc8     9\...D|.{*m...].
2401eb04:	b34d5ad7 b33cd1e0 b32bfaeb b31aebd3     .ZM...<...+.....
2401eb14:	b309ba1b b2f0f5bf b2ce8572 b2ac4b4e     ........r...NK..
2401eb24:	b28a6e18 b25225eb b210bb10 b1a1be60     .n...%R.....`...
2401eb34:	b0969102 3124c101 31c5e07f 321a3ab0     ......$1...1.:.2
2401eb44:	324ee0c0 32805c39 3297ce32 32adb60e     ..N29\.22..2...2
2401eb54:	32c20610 32d4b2df 32e5b3aa 32f501fe     ...2...2...2...2
2401eb64:	33014cf9 33073cf0 330c514c 33108b97     .L.3.<.3LQ.3...3
2401eb74:	3313ee75 33167d94 33183db8 33193495     u..3.}.3.=.3.4.3
2401eb84:	331968c9 3318e1d5 3317a805 3315c463     .h.3...3...3c..3
2401eb94:	331340a8 3310271b 330c8297 33085e68     .@.3.'.3...3h^.3
2401eba4:	3303c63d 32fd8c16 32f2d41a 32e77d31     =..3...2...21}.2
2401ebb4:	32dba046 32cf563e 32c2b7d0 32b5dd6a     F..2>V.2...2j..2
2401ebc4:	32a8df0f 329bd443 328ed3b0 3281f34f     ...2C..2...2O..2
2401ebd4:	326a903f 3251cc32 3239bffd 32228ee0     ?.j22.Q2..92.."2
2401ebe4:	320c5960 31ee7a7f 31c6aa9f 31a17301     `Y.2.z.1...1.s.1
2401ebf4:	317dfa42 313ed8c1 3105bb42 30a59e03     B.}1..>1B..1...0
2401ec04:	3018d301 287ffffa 00000000 00000000     ...0...(........
	...

2401ec8c <step_dd_table>:
	...
2401edc0:	2fab8ce1 2fab8ce1 2f729e86 30126e14     .../.../..r/.n.0
2401edd0:	2fb6c188 306dced6 300d6d57 30bd9e15     .../..m0Wm.0...0
2401ede0:	305a5159 31156364 30a598ce 31682fc6     YQZ0dc.1...0./h1
2401edf0:	30f5854b 31b17936 3131bb06 32052b5d     K..06y.1..11]+.2
2401ee00:	317b8e5c 32440ef2 31ae5dca 328d9eec     \.{1..D2.].1...2
2401ee10:	31ed3d32 32c8ee3c 321eb3c7 330c240e     2=.1<..2...2.$.3
2401ee20:	32512804 33406e0f 3287f987 33823569     .(Q2.n@3...2i5.3
2401ee30:	32aea874 33addf87 32dde428 33e5588c     t..2...3(..2.X.3
2401ee40:	330b8c5d 34158f63 332def60 34410b3a     ]..3c..4`.-3:.A4
2401ee50:	3356ff82 3476cb18 3383dda7 349c5cf5     ..V3..v4...3.\.4
2401ee60:	33a09ed4 34c484aa 33c25ffe 34f51ca9     ...3...4._.3...4
2401ee70:	33e9ce56 3517c81f 340bd463 353abd3a     V..3...5c..4:.:5
2401ee80:	342660a2 35645563 3444ff1b 358aca95     .`&4cUd5..D4...5
2401ee90:	34682dde 35a7d053 34883b5b 35c9df24     .-h4S..5[;.4$..5
2401eea0:	349f37f1 35f1ad24 34b95e74 3610025e     .7.4$..5t^.4^..6
2401eeb0:	34d707b6 362ae356 34f89409 3649f5d6     ...4V.*6...4..I6
2401eec0:	350f35e2 366dc350 35247fce 368b71a1     .5.5P.m6..$5.q.6
2401eed0:	353c64a2 36a2fe35 355725f2 36bde2f5     .d<55..6.%W5...6
2401eee0:	35750a4e 36dc843e 358b2ec6 36ff4ff0     N.u5>..6...5.O.6
2401eef0:	359db882 37135f08 35b24dfc 3729a8c5     ...5._.7.M.5..)7
2401ef00:	35c91dde 3742cc86 35e25a15 375f17c5     ...5..B7.Z.5.._7
2401ef10:	35fe37e3 377edec8 360e780e 37913e64     .7.5..~7.x.6d>.7
2401ef20:	361f5faa 37a52a58 3631f2f3 37bb68b8     ._.6X*.7..16.h.7
2401ef30:	3646542f 37d4333e 365ca7b4 37efc836     /TF6>3.7..\66..7
2401ef40:	36751413 3807355b 3687e116 3818317f     ..u6[5.8...6.1.8
2401ef50:	36966ea0 382aff51 36a6498b 383fc883     .n.6Q.*8.I.6..?8
2401ef60:	36b789fd 3856b9c3 36ca4981 387002f4     ...6..V8.I.6..p8
2401ef70:	36dea2fb 3885eba9 36f4b2c7 389536d5     ...6...8...6.6.8
2401ef80:	37064b5f 38a60041 37133723 38b86725     _K.7A..8#7.7%g.8
2401ef90:	37212d2e 38cc8ccb 37303ed9 38e294a9     .-!7...8.>07...8
2401efa0:	37407e44 38faa473 3751fe84 390a7220     D~@7s..8..Q7 r.9
2401efb0:	3764d393 3918bf58 37791250 3928507b     ..d7X..9P.y7{P(9
2401efc0:	3787684b 39393d8a 3793129b 394b9fdb     Kh.7.=99...7..K9
2401efd0:	379f9408 395f925c 37acf8fc 39753178     ...7\._9...7x1u9
2401efe0:	37bb4e74 39864da5 37caa1f9 3992f7c4     tN.7.M.9...7...9
2401eff0:	37db018f 39a0a7de 37ec7be8 39af6f9a     ...7...9.{.7.o.9
2401f000:	37ff2031 39bf619e 38097f23 39d09184     1 .7.a.9#..8...9
2401f010:	38141343 39e313ea 381f5501 39f6fe8c     C..8...9.U.8...9
2401f020:	382b4d2c 3a063418 383804f1 3a11b467     ,M+8.4.:..88g..:
2401f030:	384585c4 3a1e0cc4 3853d974 3a2b4a5b     ..E8...:t.S8[J+:
2401f040:	38630a24 3a397afe 38732248 3a48ad21     $.c8.z9:H"s8!.H:
2401f050:	38821658 3a58efed 388b1a44 3a6a5336     X..8..X:D..86Sj:
2401f060:	3894a2a8 3a7ce78a 389eb571 3a885f1b     ...8..|:q..8._.:
2401f070:	38a958bb 3a92f4a9 38b492cb 3a9e3dd4     .X.8...:...8.=.:
2401f080:	38c06a1c 3aaa4473 38cce54f 3ab712c9     .j.8sD.:O..8...:
2401f090:	38da0b38 3ac4b381 38e7e2d6 3ad331b0     8..8...:...8.1.:
2401f0a0:	38f6735a 3ae298de 3902e216 3af2f522     Zs.8...:...9"..:
2401f0b0:	390aee62 3b022977 39136275 3b0b5f9e     b..9w).;ub.9._.;
2401f0c0:	391c4240 3b1523c2 392591cc 3b1f7ce2     @B.9.#.;..%9.|.;
2401f0d0:	392f553a 3b2a7233 393990c1 3b360b3f     :U/93r*;..99?.6;
2401f0e0:	394448b4 3b424fcb 394f8172 3b4f47e2     .HD9.OB;r.O9.GO;
2401f0f0:	395b3f70 3b5cfbd9 39678746 3b6b744f     p?[9..\;F.g9Otk;
2401f100:	39745d84 3b7aba28 3980e378 3b856b4b     .]t9(.z;x..9Kk.;
2401f110:	3987e426 3b8de98d 398f3339 3b96dcc0     &..9...;93.9...;
2401f120:	3996d32a 3ba049f3 399ec678 3baa365b     *..9.I.;x..9[6.;
2401f130:	39a70fac 3bb4a756 39afb154 3bbfa26b     ...9V..;T..9k..;
2401f140:	39b8ae0c 3bcb2d4c 39c20873 3bd74dd2     ...9L-.;s..9.M.;
2401f150:	39cbc32b 3be40a04 39d5e0e7 3bf16813     +..9...;...9.h.;
2401f160:	39e06451 3bff6e59 39eb5023 3c0711ae     Qd.9Yn.;#P.9...<
2401f170:	39f6a718 3c0ec6e6 3a0135fb 3c16da46     ...9...<.5.:F..<
2401f180:	3a0750bb 3c1f4f52 3a0da532 3c2829a0     .P.:RO.<2..:.)(<
2401f190:	3a1434c3 3c316cf5 3a1b00d4 3c3b1d02     .4.:.l1<...:..;<
2401f1a0:	3a220ac8 3c453dad 3a295406 3c4fd2e7     ..":.=E<.T):..O<
2401f1b0:	3a30ddef 3c5ae0cc 3a38a9ea 3c666b64     ..0:..Z<..8:dkf<
2401f1c0:	3a40b958 3c727700 3a490d99 3c7f07d3     X.@:.wr<..I:...<
2401f1d0:	3a51a80c 3c86112c 3a5a8a0b 3c8ce57c     ..Q:,..<..Z:|..<
2401f1e0:	3a63b4f1 3c940322 3a6d2a11 3c9b6c72     ..c:"..<.*m:rl.<
2401f1f0:	3a76eabf 3ca323cc 3a807c22 3cab2b8d     ..v:.#.<"|.:.+.<
2401f200:	3a85a9f9 3cb3862a 3a8aff78 3cbc3621     ...:*..<x..:!6.<
2401f210:	3a907d4c 3cc53df8 3a962408 3ccea037     L}.:.=.<.$.:7..<
2401f220:	3a9bf43d 3cd85f7d 3aa1ee8e 3ce27e65     =..:}_.<...:e~.<
2401f230:	3aa8137c 3cecff9d 3aae639a 3cf7e5d5     |..:...<.c.:...<
2401f240:	3ab4df68 3d0199e6 3abb8766 3d077621     h..:...=f..:!v.=
2401f250:	3ac25c17 3d0d8902 3ac95de0 3d13d3f2     .\.:...=.].:...=
2401f260:	3ad08d43 3d1a585b 3ad7ea9e 3d2117b0     C..:[X.=...:..!=
2401f270:	3adf7659 3d281362 3ae730c9 3d2f4cea     Yv.:b.(=.0.:.L/=
2401f280:	3aef1a43 3d36c5bd 3af7331f 3d3e7f54     C..:..6=.3.:T.>=
2401f290:	3aff7b98 3d467b31 3b03f9f5 3d4ebad1     .{.:1{F=...;..N=
2401f2a0:	3b084e25 3d573fb2 3b0cba74 3d600b5b     %N.;.?W=t..;[.`=
2401f2b0:	3b113ef1 3d691f49 3b15dbac 3d727d05     .>.;I.i=...;.}r=
2401f2c0:	3b1a90a9 3d7c260e 3b1f5dee 3d830df7     ...;.&|=.].;...=
2401f2d0:	3b244370 3d883012 3b294131 3d8d7a1c     pC$;.0.=1A);.z.=
2401f2e0:	3b2e571e 3d92ecd4 3b338528 3d9888fe     .W.;...=(.3;...=
2401f2f0:	3b38cb34 3d9e4f58 3b3e2924 3da440a0     4.8;XO.=$)>;.@.=
2401f300:	3b439ed1 3daa5d97 3b492c10 3db0a6f8     ..C;.].=.,I;...=
2401f310:	3b4ed0b7 3db71d7e 3b548c85 3dbdc1e2     ..N;~..=..T;...=
2401f320:	3b5a5f43 3dc494dc 3b6048a6 3dcb9721     C_Z;...=.H`;!..=
2401f330:	3b66486b 3dd2c966 3b6c5e38 3dda2c59     kHf;f..=8^l;Y,.=
2401f340:	3b7289b5 3de1c0a2 3b78ca86 3de986fd     ..r;...=..x;...=
2401f350:	3b7f203e 3df17ffd 3b82c537 3df9ac51     > .;...=7..;Q..=
2401f360:	3b860453 3e010646 3b894d31 3e0550b6     S..;F..>1M.;.P.>
2401f370:	3b8c9f8f 3e09b5ad 3b8ffb28 3e0e3589     ...;...>(..;.5.>
2401f380:	3b935fb0 3e12d087 3b96ccdc 3e1786ea     ._.;...>...;...>
2401f390:	3b9a4256 3e1c5903 3b9dbfcd 3e214700     VB.;.Y.>...;.G!>
2401f3a0:	3ba144e5 3e265124 3ba4d13f 3e2b77ac     .D.;$Q&>?..;.w+>
2401f3b0:	3ba8647c 3e30bad4 3babfe36 3e361ac5     |d.;..0>6..;..6>
2401f3c0:	3baf9e04 3e3b97b5 3bb3437b 3e4131d1     ...;..;>{C.;.1A>
2401f3d0:	3bb6ee27 3e46e943 3bba9d95 3e4cbe2c     '..;C.F>...;,.L>
2401f3e0:	3bbe514e 3e52b0bb 3bc208d3 3e58c0fe     NQ.;..R>...;..X>
2401f3f0:	3bc5c3a6 3e5eef1c 3bc98142 3e653b2a     ...;..^>B..;*;e>
2401f400:	3bcd4122 3e6ba52e 3bd102ba 3e722d44     "A.;..k>...;D-r>
2401f410:	3bd4c57b 3e78d372 3bd888d4 3e7f97b8     {..;r.x>...;...>
2401f420:	3bdc4c31 3e833d0b 3be00ef6 3e86bd4a     1L.;.=.>...;J..>
2401f430:	3be3d08a 3e8a4c8a 3be7904c 3e8deacd     ...;.L.>L..;...>
2401f440:	3beb4d9b 3e919804 3bef07d1 3e955422     .M.;...>...;"T.>
2401f450:	3bf2be48 3e991f1a 3bf67050 3e9cf8da     H..;...>Pp.;...>
2401f460:	3bfa1d41 3ea0e150 3bfdc469 3ea4d863     A..;P..>i..;c..>
2401f470:	3c00b289 3ea8ddf8 3c027f46 3eacf1f2     ...<...>F..<...>
2401f480:	3c04480e 3eb11432 3c060c85 bf255db5     .H.<2..>...<.]%.
2401f490:	3c07cc4d bf233e85 3c098709 bf211867     M..<.>#....<g.!.
2401f4a0:	3c0b3c56 bf1eeb77 3c0cebd8 bf1cb7c7     V<.<w......<....
2401f4b0:	3c0e952b bf1a7d73 3c1037f0 bf183c93     +..<s}...7.<.<..
2401f4c0:	3c11d3c3 bf15f544 3c136843 bf13a7a3     ...<D...Ch.<....
2401f4d0:	3c14f50d bf1153ce 3c1679be bf0ef9e7     ...<.S...y.<....
2401f4e0:	3c17f5f4 bf0c9a10 3c196949 bf0a346a     ...<....Ii.<j4..
2401f4f0:	3c1ad35d bf07c91d 3c1c33cc bf05584e     ]..<.....3.<NX..
2401f500:	3c1d8a33 bf02e225 3c1ed630 bf0066cd     3..<%...0..<.f..
2401f510:	3c201761 befbccde 3c214d65 bef6c274     a. <....eM!<t...
2401f520:	3c2277db bef1aeb4 3c239663 beec9200     .w"<....c.#<....
2401f530:	3c24a8a1 bee76cba 3c25ae30 bee23f4a     ..$<.l..0.%<J?..
2401f540:	3c26a6b3 bedd0a13 3c2791d5 bed7cd86     ..&<......'<....
2401f550:	3c286f40 bed28a0d 3c293e93 becd4017     @o(<.....>)<.@..
2401f560:	3c29ff6d bec7f01d 3c2ab18f bec29a8e     m.)<......*<....
2401f570:	3c2b548d bebd3fec 3c2be826 beb7e0a9     .T+<.?..&.+<....
2401f580:	3c2c6c04 beb27d49 3c2cdfd2 bead164b     .l,<I}....,<K...
2401f590:	3c2d435a bea7ac31 3c2d9631 bea23f7f     ZC-<1...1.-<.?..
2401f5a0:	3c2dd82a be9cd0bf 3c2e08fd be976076     *.-<.......<v`..
2401f5b0:	3c2e285c be91ef31 3c2e3614 be8c7d80     \(.<1....6.<.}..
2401f5c0:	3c2e31e2 be870bf2 3c2e1b92 be819b15     .1.<.......<....
2401f5d0:	3c2df2e2 be7856fb 3c2db7b4 be6d7b85     ..-<.Vx...-<.{m.
2401f5e0:	3c2d69bb be62a4e9 3c2d08e2 be57d45a     .i-<..b...-<Z.W.
2401f5f0:	3c2c94f4 be4d0b08 3c2c0ddb be424a2e     ..,<..M...,<.JB.
2401f600:	3c2b7361 be3792f3 3c2ac571 be2ce69f     as+<..7.q.*<..,.
2401f610:	3c2a03ea be224661 3c292ec3 be17b374     ..*<aF"...)<t...
2401f620:	3c2845da be0d2f14 3c274930 be02ba82     .E(<./..0I'<....
2401f630:	3c2638af bdf0adf5 3c251457 bddc0b64     .8&<....W.%<d...
2401f640:	3c23dc28 bdc78fe2 3c229016 bdb33ddf     (.#<......"<.=..
2401f650:	3c213035 bd9f17d8 3c1fbc8f bd8b2046     50!<.......<F ..
2401f660:	3c1e3530 bd6eb341 3c1c9a2d bd478cb4     05.<A.n.-..<..G.
2401f670:	3c1aeba0 bd20d1cd 3c1929a4 bcf50ec5     ...<.. ..).<....
2401f680:	3c17545d bca96498 3c156bef bc3d5d43     ]T.<.d...k.<C]=.
2401f690:	3c137087 bb27b2f3 3c116254 3bceeb31     .p.<..'.Tb.<1..;
2401f6a0:	3c0f418b 3c76b721 3c0d0e64 3cc1e2c4     .A.<!.v<d..<...<
2401f6b0:	3c0ac91e 3d03a3a9 3c0871fb 3d25c029     ...<...=.q.<).%=
2401f6c0:	3c060941 3d474277 3c038f3e 3d682647     A..<wBG=>..<G&h=
2401f6d0:	3c010441 3d8433ac 3bfcd13b 3d9400bf     A..<.3.=;..;...=
2401f6e0:	3bf77963 3da37855 3bf201ae 3db29871     cy.;Ux.=...;q..=
2401f6f0:	3bec6ae4 3dc15f1f 3be6b5d7 3dcfca78     .j.;._.=...;x..=
2401f700:	3be0e358 3dddd8b6 3bdaf44b 3deb87f3     X..;...=K..;...=
2401f710:	3bd4e996 3df8d691 3bcec429 3e02e169     ...;...=)..;i..>
2401f720:	3bc884ff 3e092593 3bc22d19 3e0f36fd     ...;.%.>.-.;.6.>
2401f730:	3bbbbd7d 3e1514e4 3bb5373e 3e1abea0     }..;...>>7.;...>
2401f740:	3bae9b72 3e20337c 3ba7eb3b 3e2572d8     r..;|3 >;..;.r%>
2401f750:	3ba127bf 3e2a7c11 3b9a5228 3e2f4ea2     .'.;.|*>(R.;.N/>
2401f760:	3b936baf 3e33ea05 3b8c758b 3e384dac     .k.;..3>.u.;.M8>
2401f770:	3b8570fd 3e3c7934 3b7cbe93 3e406c30     .p.;4y<>..|;0l@>
2401f780:	3b6e8381 3e44263c 3b603365 3e47a70e     ..n;<&D>e3`;..G>
2401f790:	3b51d0e5 3e4aee4f 3b435eba 3e4dfbc9     ..Q;O.J>.^C;..M>
2401f7a0:	3b34df9f 3e50cf47 3b265663 3e5368a0     ..4;G.P>cV&;.hS>
2401f7b0:	3b17c5cd 3e55c7b9 3b0930b4 3e57ec7f     ...;..U>.0.;..W>
2401f7c0:	3af533e3 3e59d6e4 3ad808c9 3e5b86f4     .3.:..Y>...:..[>
2401f7d0:	3abae5e7 3e5cfcbf 3a9dd114 3e5e3865     ...:..\>...:e8^>
2401f7e0:	3a80d01a 3e5f3a01 3a47d1c2 3e6001d6     ...:.:_>..G:..`>
2401f7f0:	3a0e4288 3e60901a 39a9fc92 3e60e516     .B.:..`>...9..`>
2401f800:	38e08650 3e61012a b8e3d1a1 3e60e4ab     P..8*.a>......`>
2401f810:	b9a92df1 3e609013 ba0c39ce 3e6003db     .-....`>.9....`>
2401f820:	ba435715 3e5f4088 ba79e332 3e5e46a1     .WC..@_>2.y..F^>
2401f830:	ba97e951 3e5d16ce bab28d06 3e5bb1b6     Q.....]>......[>
2401f840:	baccd6f8 3e5a1808 bae6c1a7 3e584a87     ......Z>.....JX>
2401f850:	bb0023b8 3e5649f5 bb0cb172 3e541730     .#...IV>r...0.T>
2401f860:	bb19074d 3e51b315 bb2522a0 3e4f1e88     M.....Q>."%...O>
2401f870:	bb3100d0 3e4c5a81 bb3c9f47 3e496807     ..1..ZL>G.<..hI>
2401f880:	bb47fb82 3e464819 bb531304 3e42fbcf     ..G..HF>..S...B>
2401f890:	bb5de36d 3e3f843e bb686a5a 3e3be293     m.].>.?>Zjh...;>
2401f8a0:	bb72a586 3e381803 bb7c92b8 3e3425b6     ..r...8>..|..%4>
2401f8b0:	bb8317e0 3e300cf3 bb87bd46 3e2bcf0b     ......0>F.....+>
2401f8c0:	bb8c388c 3e276d47 bb9088b9 3e22e903     .8..Gm'>......">
2401f8d0:	bb94acde 3e1e439d bb98a419 3e197e78     .....C.>....x~.>
2401f8e0:	bb9c6d8e 3e149b0c bba0086d 3e0f9ac9     .m.....>m......>
2401f8f0:	bba373f8 3e0a7f29 bba6af71 3e0549af     .s..)..>q....I.>
2401f900:	bba9ba30 3dfff7b7 bbac9392 3df52e80     0......=.......=
2401f910:	bbaf3b03 3dea3ad2 bbb1affe 3ddf1fd0     .;...:.=.......=
2401f920:	bbb3f206 3dd3e0b0 bbb600ab 3dc880a6     .......=.......=
2401f930:	bbb7db91 3dbd02ed bbb9825e 3db16ac8     .......=^....j.=
2401f940:	bbbaf4cf 3da5bb7a bbbc32ab 3d99f850     ....z..=.2..P..=
2401f950:	bbbd3bc9 3d8e2493 bbbe1006 3d824393     .;...$.=.....C.=
2401f960:	bbbeaf55 3d6cb13c bbbf19b5 3d54ce06     U...<.l=......T=
2401f970:	bbbf4f31 3d3ce41f bbbf4fe6 3d24fa23     1O....<=.O..#.$=
2401f980:	bbbf1bf9 3d0d16a4 bbbeb3a0 3cea805c     .......=....\..<
2401f990:	bbbe1723 3cbafa98 bbbd46d5 3c8ba8e0     #......<.F.....<
2401f9a0:	bbbc4312 3c393038 bbbb0c4e 3bb7541f     .C..809<N....T.;
2401f9b0:	bbb9a302 b893b8a1 bbb807bb bbba569e     .............V..
2401f9c0:	bbb63b10 bc3848d2 bbb43da6 bc8933d6     .;...H8..=...3..
2401f9d0:	bbb21031 bcb5b7e3 bbafb373 bce1a4bb     1.......s.......
2401f9e0:	bbad2837 bd067766 bbaa6f5b bd1bc550     7(..fw..[o..P...
2401f9f0:	bba789c5 bd30b689 bba47867 bd454597     ......0.gx...EE.
2401fa00:	bba13c46 bd596d1f bb9dd66a bd6d27ec     F<...mY.j....'m.
2401fa10:	bb9a47ec bd803875 bb9691f3 bd89a194     .G..u8..........
2401fa20:	bb92b5a9 bd92ccef bb8eb44a bd9bb834     ........J...4...
2401fa30:	bb8a8f18 bda46125 bb864764 bdacc59b     ....%a..dG......
2401fa40:	bb81de85 bdb4e383 bb7aabba bdbcb8e2     ..........z.....
2401fa50:	bb715dae bdc443cf bb67d5ca bdcb827d     .]q..C....g.}...
2401fa60:	bb5e1704 bdd27335 bb542467 bdd91453     ..^.5s..g$T.S...
2401fa70:	bb4a0104 bddf6464 bb3fafff bde561e2     ..J.dd....?..a..
2401fa80:	bb353488 bdeb0b8a bb2a91e0 bdf0601a     .45.......*..`..
2401fa90:	bb1fcb48 bdf55e6c bb14e413 bdfa058d     H...l^..........
2401faa0:	bb09df9b bdfe548c bafd8288 be012549     .....T......I%..
2401fab0:	bae718f6 be02f380 bad0894d be049492     ........M.......
2401fac0:	bab9da82 be060844 baa3137c be074e6c     ....D...|...lN..
2401fad0:	ba8c3b40 be0866e4 ba6ab183 be095190     @;...f....j..Q..
2401fae0:	ba3ce5f1 be0a0e77 ba0f21c8 be0a9d98     ..<.w....!......
2401faf0:	b9c2e5ec be0aff0f b94f9d7f be0b32f7     ..........O..2..
2401fb00:	b7d19bcc be0b3985 391a3b27 be0b12f5     .....9..';.9....
2401fb10:	39a6bbd4 be0abf98 39ffa5de be0a3fc6     ...9.......9.?..
2401fb20:	3a2be069 be0993e3 3a577906 be08bc67     i.+:.....yW:g...
2401fb30:	3a8147d0 be07b9da 3a968b9d be068cc0     .G.:.......:....
2401fb40:	3aab818a be0535bc 3ac02346 be03b576     ...:.5..F#.:v...
2401fb50:	3ad46aa6 be020ca1 3ae8519f be003c01     .j.:.....Q.:.<..
2401fb60:	3afbd238 bdfc88b2 3b077351 bdf84d19     8..:....Qs.;.M..
2401fb70:	3b10c49e bdf3c6f2 3b19da42 bdeef820     ...;....B..; ...
2401fb80:	3b22b18a bde9e295 3b2b47e0 bde4885b     ..";.....G+;[...
2401fb90:	3b339ac0 bddeeb8b 3b3ba7bb bdd90e4c     ..3;......;;L...
2401fba0:	3b436c7c bdd2f2df 3b4ae6c8 bdcc9bad     |lC;......J;....
2401fbb0:	3b521475 bdc60b08 3b58f37b bdbf436d     u.R;....{.X;mC..
2401fbc0:	3b5f81e4 bdb8475e 3b65bddb bdb1196f     .._;^G....e;o...
2401fbd0:	3b6ba5a2 bda9bc41 3b7137a1 bda23285     ..k;A....7q;.2..
2401fbe0:	3b767249 bd9a7ef3 3b7b543d bd92a451     Irv;.~..=T{;Q...
2401fbf0:	3b7fdc2e bd8aa56f 3b82047d bd828527     ...;o...}..;'...
2401fc00:	3b83ecc3 bd748cb7 3b85a677 bd63d7e6     ...;..t.w..;..c.
2401fc10:	3b873131 bd52f1c2 3b888c99 bd41e02f     11.;..R....;/.A.
2401fc20:	3b89b863 bd30a923 3b8ab45b bd1f5296     c..;#.0.[..;.R..
2401fc30:	3b8b8056 bd0de28c 3b8c1c3d bcf8be07     V..;....=..;....
2401fc40:	3b8c8806 bcd59c09 3b8cc3b7 bcb26b1c     ...;.......;.k..
2401fc50:	3b8ccf6b bc8f3740 3b8cab45 bc5818db     k..;@7..E..;..X.
2401fc60:	3b8c5781 bc11ed1d 3b8bd461 bb9805d9     .W.;....a..;....
2401fc70:	3b8b223f b9ce39b3 3b8a4180 3b7abbc8     ?".;.9...A.;..z;
2401fc80:	3b893299 3c03483f 3b87f612 3c47434b     .2.;?H.<...;KCG<
2401fc90:	3b868c7b 3c8544c3 3b84f67b 3ca68260     {..;.D.<{..;`..<
2401fca0:	3b8334c0 3cc74f90 3b81480e 3ce7a195     .4.;.O.<.H.;...<
2401fcb0:	3b7e6264 3d03b6f1 3b79e211 3d135512     db~;...=..y;.U.=
2401fcc0:	3b7510f5 3d22a620 3b6ff0ff 3d31a531     ..u; ."=..o;1.1=
2401fcd0:	3b6a843a 3d404d75 3b64ccc9 3d4e9a42     :.j;uM@=..d;B.N=
2401fce0:	3b5ecce6 3d5c870f 3b5886dd 3d6a0f7e     ..^;..\=..X;~.j=
2401fcf0:	3b51fd1f 3d772f4f 3b4b3229 3d81f139     ..Q;O/w=)2K;9..=
2401fd00:	3b44288a 3d88127e 3b3ce2f5 3d8df996     .(D;~..=..<;...=
2401fd10:	3b356419 3d93a4b5 3b2daecf 3d99122c     .d5;...=..-;,..=
2401fd20:	3b25c5f3 3d9e405c 3b1dac70 3da32dbf     ..%;\@.=p..;.-.=
2401fd30:	3b15654f 3da7d8ea 3b0cf399 3dac4087     Oe.;...=...;.@.=
2401fd40:	3b045a69 3db0635a 3af739c4 3db44041     iZ.;Zc.=.9.:A@.=
2401fd50:	3ae57c7a 3db7d633 3ad38364 3dbb2441     z|.:3..=d..:A$.=
2401fd60:	3ac15517 3dbe2995 3aaef814 3dc0e576     .U.:.).=...:v..=
2401fd70:	3a9c7313 3dc35741 3a89ccc8 3dc57e74     .s.:AW.=...:t~.=
2401fd80:	3a6e17ae 3dc75aa4 3a486e18 3dc8eb80     ..n:.Z.=.nH:...=
2401fd90:	3a22aa49 3dca30d5 39f9b387 3dcb2a89     I.":.0.=...9.*.=
2401fda0:	39ae140f 3dcbd89d 3945223e 3dcc3b2e     ...9...=>"E9.;.=
2401fdb0:	383a2c72 3dcc5272 b8cecfc1 3dcc1ebf     r,:8rR.=.......=
2401fdc0:	b97c81a6 3dcba07e b9c846c5 3dcad837     ..|.~..=.F..7..=
2401fdd0:	ba08d5d9 3dc9c68c ba2d2ae8 3dc86c35     .......=.*-.5l.=
2401fde0:	ba5115d2 3dc6ca0a ba748a09 3dc4e0f7     ..Q....=..t....=
2401fdf0:	ba8bbd97 3dc2b200 ba9cee85 3dc03e45     .......=....E>.=
2401fe00:	baadd1e8 3dbd86fe babe61e1 3dba8d76     .......=.a..v..=
2401fe10:	bace98b2 3db75314 bade70d3 3db3d951     .....S.=.p..Q..=
2401fe20:	baede4d3 3db021bd bafcef6e 3dac2e00     .....!.=n......=
2401fe30:	bb05c5c1 3da7ffd1 bb0cda14 3da39900     .......=.......=
2401fe40:	bb13b24f 3d9efb6e bb1a4c20 3d9a290d     O...n..= L...).=
2401fe50:	bb20a55a 3d9523e2 bb26bbdf 3d8fee03     Z. ..#.=..&....=
2401fe60:	bb2c8db0 3d8a8996 bb3218ec 3d84f8cf     ..,....=..2....=
2401fe70:	bb375bbf 3d7e7be1 bb3c5485 3d72b699     .[7..{~=.T<...r=
2401fe80:	bb41019f 3d66a680 bb45619a 3d5a5066     ..A...f=.aE.fPZ=
2401fe90:	bb497322 3d4db934 bb4d34f8 3d40e5e4     "sI.4.M=.4M...@=
2401fea0:	bb50a5fa 3d33db84 bb53c531 3d269f31     ..P...3=1.S.1.&=
2401feb0:	bb5691b6 3d193614 bb590ac9 3d0ba568     ..V..6.=..Y.h..=
2401fec0:	bb5b2fc9 3cfbe4d8 bb5d0036 3ce044d4     ./[....<6.]..D.<
2401fed0:	bb5e7ba9 3cc4755b bb5fa1e7 3ca8811e     .{^.[u.<.._....<
2401fee0:	bb6072c3 3c8c72ca bb60ee3e 3c60aa04     .r`..r.<>.`...`<
2401fef0:	bb611471 3c2864e4 bb60e59e 3be056fa     q.a..d(<..`..V.;
2401ff00:	bb60621e 3b604bd6 bb5f8a6e 37416576     .b`..K`;n._.veA7
2401ff10:	bb5e5f28 bb5d9dc0 bb5ce102 bbdd3f61     (_^...]...\.a?..
2401ff20:	bb5b10d5 bc2563e8 bb58ef9b bc5b9fce     ..[..c%...X...[.
2401ff30:	bb567e63 bc889fb1 bb53be61 bca3177c     c~V.....a.S.|...
2401ff40:	bb50b0e1 bcbd2d9d bb4d5754 bcd6d884     ..P..-..TWM.....
2401ff50:	bb49b339 bcf00eec bb45c633 bd0463da     9.I.....3.E..c..
2401ff60:	bb419202 bd107cfb bb3d1875 bd1c4e82     ..A..|..u.=..N..
2401ff70:	bb385b84 bd27d43a bb335d32 bd330a0e     .[8.:.'.2]3...3.
2401ff80:	bb2e1f9a bd3dec07 bb28a4f6 bd487656     ......=...(.VvH.
2401ff90:	bb22ef91 bd52a54f bb1d01c8 bd5c756c     ..".O.R.....lu\.
2401ffa0:	bb16de13 bd65e34c bb1086f6 bd6eebbb     ....L.e.......n.
2401ffb0:	bb09ff0c bd778bad bb034902 bd7fc03c     ......w..I..<...
2401ffc0:	baf8cf1a bd83c35a baeabaec bd876e46     ....Z.......Fn..
2401ffd0:	badc5b2d bd8adfb2 bacdb5a2 bd8e1689     -[..............
2401ffe0:	babed024 bd9111ca baafb0b2 bd93d08d     $...............
2401fff0:	baa05d47 bd965201 ba90dbf5 bd989571     G]...R......q...
24020000:	ba8132e9 bd9a9a3d ba62d097 bd9c5fde     .2..=.....b.._..
24020010:	ba4304ab bd9de5e8 ba230e8a bd9f2c05     ..C.......#..,..
24020020:	ba02fab7 bda031fa b9c5ab77 bda0f7a6     .....1..w.......
24020030:	b9855836 bda17cfd b90a2968 bda1c213     6X...|..h)......
24020040:	b71f3a7b bda1c70d 38eb7e6a bda18c2c     {:......j~.8,...
24020050:	3974bdf6 bda111ce 39b96bdc bda05862     ..t9.....k.9bX..
24020060:	39f7ee0c bd9f6074 3a1ae6cd bd9e2aa7     ...9t`.....:.*..
24020070:	3a397978 bd9cb7b4 3a57a360 bd9b086c     xy9:....`.W:l...
24020080:	3a755914 bd991dba 3a8947ac bd96f89c     .Yu:.....G.:....
24020090:	3a979d8d bd949a26 3aa5a8cf bd920383     ...:&......:....
240200a0:	3ab36435 bd8f35f2 3ac0ca94 bd8c32c8     5d.:.5.....:.2..
240200b0:	3acdd6ec bd88fb6c 3ada8479 bd85915a     ...:l...y..:Z...
240200c0:	3ae6ce78 bd81f620 3af2b07b bd7c56bb     x..: ...{..:.V|.
240200d0:	3afe261c bd74658b 3b04959a bd6c1c30     .&.:.et....;0.l.
240200e0:	3b09dde5 bd637e52 3b0eea0b bd5a8fb3     ...;R~c....;..Z.
240200f0:	3b13b83b bd51542e 3b1846c9 bd47cfc3     ;..;.TQ..F.;..G.
24020100:	3b1c9417 bd3e0681 3b209ead bd33fc97     ...;..>... ;..3.
24020110:	3b246520 bd29b645 3b27e634 bd1f37e1      e$;E.).4.';.7..
24020120:	3b2b20b7 bd1485d4 3b2e139c bd09a49c     . +;.......;....
24020130:	3b30bdf4 bcfd3179 3b331eef bce6cd9a     ..0;y1....3;....
24020140:	3b3535d3 bcd026df 3b37020f bcb9469e     .55;.&....7;.F..
24020150:	3b388321 bca2363b 3b39b8b3 bc8aff22     !.8;;6....9;"...
24020160:	3b3aa286 bc6755a5 3b3b4080 bc388583     ..:;.Ug..@;;..8.
24020170:	3b3b929b bc09a0de 3b3b98f7 bbb57540     ..;;......;;@u..
24020180:	3b3b53d4 bb2f96ad 3b3ac387 3932cd6d     .S;;../...:;m.29
24020190:	3b39e888 3b45155e 3b38c36f 3bbeec67     ..9;^.E;o.8;g..;
240201a0:	3b3754f0 3c0d4b6f 3b359dd8 3c3ab2e4     .T7;oK.<..5;..:<
240201b0:	3b339f14 3c679aae 3b3159ae 3c89f88c     ..3;..g<.Y1;...<
240201c0:	3b2ececa 3c9fd263 3b2bffa7 3cb55257     ...;c..<..+;WR.<
240201d0:	3b28eda0 3cca700b 3b259a25 3cdf2351     ..(;.p.<%.%;Q#.<
240201e0:	3b2206c8 3cf3642b 3b1e3530 3d039569     ..";+d.<05.;i..=
240201f0:	3b1a2715 3d0d37d9 3b15de52 3d1695be     .'.;.7.=R..;...=
24020200:	3b115cd2 3d1fab8c 3b0ca494 3d2875d5     .\.;...=...;.u(=
24020210:	3b07b7af 3d30f14f 3b029850 3d391ad4     ...;O.0=P..;..9=
24020220:	3afa915f 3d40ef61 3aef9648 3d486c12     _..:a.@=H..:.lH=
24020230:	3ae4440d 3d4f8e33 3ad89f94 3d565331     .D.:3.O=...:1SV=
24020240:	3accade5 3d5cb89d 3ac0740a 3d62bc40     ...:..\=.t.:@.b=
24020250:	3ab3f746 3d685bfa 3aa73ce8 3d6d95e0     F..:.[h=.<.:..m=
24020260:	3a9a4a44 3d726832 3a8d24db 3d76d158     DJ.:2hr=.$.:X.v=
24020270:	3a7fa456 3d7acfea 3a64afa7 3d7e62a9     V..:..z=..d:.b~=
24020280:	3a4976e3 3d80c443 3a2e0563 3d82204d     .vI:C..=c..:M .=
24020290:	3a126693 3d83451b 39ed4bc7 3d843266     .f.:.E.=.K.9f2.=
240202a0:	39b59d99 3d84e804 397bb331 3d8565de     ...9...=1.{9.e.=
240202b0:	390c2d6b 3d85abf4 37e6bcaf 3d85ba60     k-.9...=...7`..=
240202c0:	b8a4416c 3d85914f b9408e33 3d853109     lA..O..=3.@..1.=
240202d0:	b99721f4 3d8499e7 b9cd8aa3 3d83cc5c     .!.....=....\..=
240202e0:	ba01b593 3d82c8f1 ba1c56dc 3d819043     .......=.V..C..=
240202f0:	ba369e73 3d802306 ba5081cb 3d7d0405     s.6..#.=..P...}=
24020300:	ba69f687 3d795c2a ba81793f 3d755061     ..i.*\y=?y..aPu=
24020310:	ba8db5e1 3d70e2b1 ba99ac53 3d6c154f     ......p=S...O.l=
24020320:	baa557cf 3d66ea90 bab0b3ce 3d6164f2     .W....f=.....da=
24020330:	babbbbd0 3d5b8715 bac66b8a 3d5553b7     ......[=.k...SU=
24020340:	bad0bed2 3d4ecdc1 badab1b4 3d47f834     ......N=....4.G=
24020350:	bae4405c 3d40d631 baed6719 3d396af8     \@..1.@=.g...j9=
24020360:	baf62275 3d31b9e4 bafe6f29 3d29c66b     u"....1=)o..k.)=
24020370:	bb03250a 3d21941a bb06d825 3d192698     .%....!=%....&.=
24020380:	bb0a4f8f 3d1081a0 bb0d8a06 3d07a8ff     .O.....=.......=
24020390:	bb10865c 3cfd4134 bb13438c 3cead8c1     \...4A.<.C.....<
240203a0:	bb15c09c 3cd820ae bb17fcb6 3cc52117     ..... .<.....!.<
240203b0:	bb19f722 3cb1e230 bb1baf40 3c9e6c4c     "...0..<@...Ll.<
240203c0:	bb1d248f 3c8ac7ba bb1e56a0 3c6df9c3     .$.....<.V....m<
240203d0:	bb1f452e 3c462879 bb1ff00a 3c1e2c7a     .E..y(F<....z,.<
240203e0:	bb20571f 3bec2d65 bb207a78 3b9bf029     .W .e-.;xz .)..;
240203f0:	bb205a42 3b178610 bb1ff6b4 b9070a1c     BZ ....;........
24020400:	bb1f5034 bb27c0d7 bb1e673c bba3140a     4P....'.<g......
24020410:	bb1d3c62 bbf1b23b bb1bd056 bc1fcd33     b<..;...V...3...
24020420:	bb1a23e5 bc465630 bb1837f0 bc6c642c     .#..0VF..7..,dl.
24020430:	bb160d80 bc88f3c5 bb13a5ad bc9b687c     ............|h..
24020440:	bb1101a7 bcad88af bb0e22ba bcbf4d07     ........."...M..
24020450:	bb0b0a4e bcd0ae4e bb07b9d9 bce1a58c     N...N...........
24020460:	bb0432ef bcf22be7 bb007738 bd011d69     .2...+..8w..i...
24020470:	baf910df bd08e5f0 baf0d0c9 bd106c74     ............tl..
24020480:	bae83203 bd17ae04 badf3870 bd1ea7c9     .2......p8......
24020490:	bad5e821 bd25570a bacc4557 bd2bb934     !....W%.WE..4.+.
240204a0:	bac25456 bd31cbd8 bab8199e bd378ca4     VT....1.......7.
240204b0:	baad99b4 bd3cf973 baa2d945 bd42103b     ....s.<.E...;.B.
240204c0:	ba97dd1b bd46cf24 ba8ca9fb bd4b3474     ....$.F.....t4K.
240204d0:	ba8144db bd4f3e9c ba6b6572 bd52ec31     .D...>O.rek.1.R.
240204e0:	ba53f140 bd563bf7 ba3c3755 bd592cd5     @.S..;V.U7<..,Y.
240204f0:	ba2441fe bd5bbddc ba0c1b9a bd5dee4a     .A$...[.....J.].
24020500:	b9e79d27 bd5fbd85 b9b6cac8 bd612b1b     '....._......+a.
24020510:	b985d509 bd6236c4 b929a1cc bd62e065     .....6b...).e.b.
24020520:	b88f4d1f bd63280b 37d0eed1 bd630def     .M...(c....7..c.
24020530:	38f703d3 bd62926c 395c5c54 bd61b610     ...8l.b.T\\9..a.
24020540:	399e4214 bd60798d 39cde871 bd5eddbc     .B.9.y`.q..9..^.
24020550:	39fd0d35 bd5ce3a1 3a15ce4e bd5a8c69     5..9..\.N..:i.Z.
24020560:	3a2cc198 bd57d960 3a4356e5 bd54cc05     ..,:`.W..VC:..T.
24020570:	3a5984d6 bd5165f1 3a6f4237 bd4da8e8     ..Y:.eQ.7Bo:..M.
24020580:	3a824307 bd4996d2 3a8ca3ce bd4531b3     .C.:..I....:.1E.
24020590:	3a96bf30 bd407bb9 3aa0910d bd3b7732     0..:.{@....:2w;.
240205a0:	3aaa155f bd362685 3ab34853 bd308c42     _..:.&6.SH.:B.0.
240205b0:	3abc2636 bd2aab12 3ac4ab6b bd2485b6     6&.:..*.k..:..$.
240205c0:	3accd49e bd1e1f12 3ad49e86 bd177a1d     ...:.......:.z..
240205d0:	3adc061d bd1099ec 3ae30870 bd0981a9     ...:....p..:....
240205e0:	3ae9a2cf bd023493 3aefd2b6 bcf56bf8     ...:.4.....:.k..
240205f0:	3af595c4 bce6129e 3afae9c9 bcd66400     ...:.......:.d..
24020600:	3affccdd bcc66732 3b021e9c bcb6235d     ...:2g.....;]#..
24020610:	3b041c9a bca59fcd 3b05dfc2 bc94e3d2     ...;.......;....
24020620:	3b07677d bc83f6e5 3b08b347 bc65c0ef     }g.;....G..;..e.
24020630:	3b09c2c8 bc435042 3b0a95b0 bc20aad7     ...;BPC....;.. .
24020640:	3b0b2bd4 bbfbbfc3 3b0b8522 bbb5fd32     .+.;...."..;2...
24020650:	3b0ba19f bb6058c1 3b0b8171 baa9aea9     ...;.X`.q..;....
24020660:	3b0b24cc 3a5935ee 3b0a8c0f 3b40d98b     .$.;.5Y:...;..@;
24020670:	3b09b7a0 3ba54895 3b08a80d 3be99c9c     ...;.H.;...;...;
24020680:	3b075dfa 3c16a5cd 3b05da1b 3c381c51     .].;...<...;Q.8<
24020690:	3b041d4a 3c5923a8 3b022871 3c79adc1     J..;.#Y<q(.;..y<
240206a0:	3afff928 3c8cd672 3afb3596 3c9c89ce     (..:r..<.5.:...<
240206b0:	3af60897 3cabea59 3af074b6 3cbaf1a3     ...:Y..<.t.:...<
240206c0:	3aea7ca5 3cc9996c 3ae42356 3cd7dba4     .|.:l..<V#.:...<
240206d0:	3add6bc5 3ce5b25c 3ad65935 3cf317f0     .k.:\..<5Y.:...<
240206e0:	3aceeef7 3d000370 3ac73089 3d063cf6     ...:p..=.0.:.<.=
240206f0:	3abf2182 3d0c3601 3ab6c5ad 3d11ec2e     .!.:.6.=...:...=
24020700:	3aae20dd 3d175d34 3aa53718 3d1c86ef     . .:4].=.7.:...=
24020710:	3a9c0c6e 3d216751 3a92a51a 3d25fc79     n..:Qg!=...:y.%=
24020720:	3a890555 3d2a44a5 3a7e630f 3d2e3e31     U..:.D*=.c~:1>.=
24020730:	3a6a5c42 3d31e7a1 3a55ff4d 3d353fa0     B\j:..1=M.U:.?5=
24020740:	3a415555 3d3844f6 3a2c679d 3d3af694     UUA:.D8=.g,:..:=
24020750:	3a173f82 3d3d5390 3a01e66f 3d3f5b2a     .?.:.S==o..:*[?=
24020760:	39d8cbc8 3d410cc3 39ad8ed2 3d4267df     ...9..A=...9.gB=
24020770:	39822915 3d436c31 392d5b78 3d44198d     .).91lC=x[-9..D=
24020780:	38acbf89 3d446fec b4f581df 3d446f73     ...8.oD=....soD=
24020790:	b8ae1c2f 3d441863 b92d3477 3d436b2f     /...c.D=w4-./kC=
240207a0:	b981642c 3d426868 b9abd247 3d4110c4     ,d..hhB=G.....A=
240207b0:	b9d5d234 3d3f651d b9ff51c7 3d3d667b     4....e?=.Q..{f==
240207c0:	ba141f93 3d3b15fe ba28445e 3d3874ec     ......;=^D(..t8=
240207d0:	ba3c0ea3 3d3584b2 ba4f75f3 3d3246da     ..<...5=.uO..F2=
240207e0:	ba627208 3d2ebd12 ba74fad8 3d2ae925     .rb....=..t.%.*=
240207f0:	ba838448 3d26cd03 ba8c49c7 3d226ab6     H.....&=.I...j"=
24020800:	ba94ca41 3d1dc464 ba9d021e 3d18dc52     A...d..=....R..=
24020810:	baa4ee03 3d13b4e1 baac8a9e 3d0e508e     .......=.....P.=
24020820:	bab3d4d9 3d08b1e5 babac9a6 3d02db9a     .......=.......=
24020830:	bac16645 3cf9a0cb bac7a7fd 3ced264e     Ef.....<....N&.<
24020840:	bacd8c54 3ce04d88 bad310f0 3cd31c78     T....M.<....x..<
24020850:	bad833ab 3cc5993c badcf281 3cb7ca16     .3..<..<.......<
24020860:	bae14ba4 3ca9b55b bae53d6d 3c9b6185     .K..[..<m=...a.<
24020870:	bae8c675 3c8cd520 baebe574 3c7c2d8e     u... ..<t....-|<
24020880:	baee9948 3c5e5a69 baf0e121 3c403e3e     H...iZ^<!...>>@<
24020890:	baf2bc39 3c21e6ba baf42a11 3c036178     9.....!<.*..xa.<
240208a0:	baf52a64 3bc9785a baf5bcfd 3b8c091a     d*..Zx.;.......;
240208b0:	baf5e1ef 3b1d213d baf59986 3a0951e4     ....=!.;.....Q.:
240208c0:	baf4e421 bab03b2d baf3c26b bb51fed0     !...-;..k.....Q.
240208d0:	baf2352b bba58cb3 baf03d6a bbe19c0d     +5......j=......
240208e0:	baeddc4d bc0e8990 baeb132b bc2bebf7     M.......+.....+.
240208f0:	bae7e398 bc48e867 bae44f42 bc657255     ....g.H.BO..Ure.
24020900:	bae05809 bc80bea7 badbfff1 bc8e7ea9     .X...........~..
24020910:	bad74941 bc9bf33b bad2364c bca9169f     AI..;...L6......
24020920:	baccc994 bcb5e33c bac705ca bcc25397     ....<........S..
24020930:	bac0edbe bcce6274 baba8465 bcda0ab8     ....tb..e.......
24020940:	bab3cccc bce54788 baacca34 bcf0142a     .....G..4...*...
24020950:	baa57ff1 bcfa6c27 ba9df176 bd02259f     ....'l..v....%..
24020960:	ba96225b bd06d6b4 ba8e163f bd0b4764     ["......?...dG..
24020970:	ba85d0e5 bd0f75ec ba7aac6c bd13609d     .....u..l.z..`..
24020980:	ba69542d bd1705ee ba57a11c bd1a6472     -Ti.......W.rd..
24020990:	ba459b61 bd1d7ae0 ba334b48 bd20480c     a.E..z..HK3..H .
240209a0:	ba20b936 bd22caf3 ba0deda9 bd2502a9     6. ...".......%.
240209b0:	b9f5e265 bd26ee6f b9cf98eb bd288da0     e...o.&.......(.
240209c0:	b9a91044 bd29dfc0 b98259db bd2ae475     D.....)..Y..u.*.
240209d0:	b9370e4f bd2b9b82 b8d2a697 bd2c04d6     O.7...+.......,.
240209e0:	b7dd2c5c bd2c207a 384760a9 bd2beea3     \,..z ,..`G8..+.
240209f0:	38fe066c bd2b6fa0 394bb940 bd2aa3e5     l..8.o+.@.K9..*.
24020a00:	398bec11 bd298c0d 39b19f1a bd2828d1     ...9..)....9.((.
24020a10:	39d6e50b bd267b07 39fbad7a bd2483ab     ...9.{&.z..9..$.
24020a20:	3a0ff41d bd2243da 3a21c2b6 bd1fbccf     ...:.C"...!:....
24020a30:	3a333ac1 bd1cefe5 3a4454a0 bd19de93     .:3:.....TD:....
24020a40:	3a5508e7 bd168a6e 3a65505f bd12f52d     ..U:n..._Pe:-...
24020a50:	3a752400 bd0f209d 3a823e80 bd0b0eaa     .$u:. ...>.:....
24020a60:	3a89aa63 bd06c155 3a90d287 bd023ac3     c..:U......:.:..
24020a70:	3a97b3e6 bcfafa47 3a9e4b8e bcf1158c     ...:G....K.:....
24020a80:	3aa496c5 bce6cc22 3aaa92e6 bcdc22f1     ...:"......:."..
24020a90:	3ab03d75 bcd11f1c 3ab59421 bcc5c5d8     u=.:....!..:....
24020aa0:	3aba94c4 bcba1c8c 3abf3d53 bcae28b8     ...:....S=.:.(..
24020ab0:	3ac38bf5 bca1eff5 3ac77ef4 bc957807     ...:.....~.:.x..
24020ac0:	3acb14d6 bc88c6b9 3ace4c29 bc77c3f1     ...:....)L.:..w.
24020ad0:	3ad123d2 bc5d9f78 3ad39abf bc432c1a     .#.:x.]....:.,C.
24020ae0:	3ad5b018 bc287616 3ad7633a bc0d89b4     ...:.v(.:c.:....
24020af0:	3ad8b39c bbe4e681 3ad9a0f1 bbae7e45     ...:.......:E~..
24020b00:	3ada2b15 bb6fe6ff 3ada5213 bb02bdf5     .+.:..o..R.:....
24020b10:	3ada1614 b9ad9762 3ad97780 3aae11a9     ...:b....w.:...:
24020b20:	3ad876e9 3b434449 3ad714fa 3b976763     .v.:IDC;...:cg.;
24020b30:	3ad552ad 3bccbc0e 3ad33104 3c00c428     .R.:...;.1.:(..<
24020b40:	3ad0b133 3c1ada4e 3acdd4b5 3c3494e8     3..:N..<...:..4<
24020b50:	3aca9d03 3c4de881 3ac70bd4 3c66ca04     ...:..M<...:..f<
24020b60:	3ac32311 3c7f2e5e 3abee4b5 3c8b857a     .#.:^..<...:z..<
24020b70:	3aba52e6 3c972aa9 3ab56ffe 3ca281aa     .R.:.*.<.o.:...<
24020b80:	3ab03e5d 3cad858f 3aaac0a2 3cb8319a     ]>.:...<...:.1.<
24020b90:	3aa4f985 3cc28134 3a9eebc7 3ccc6ff0     ...:4..<...:.o.<
24020ba0:	3a989a63 3cd5f997 3a920867 3cdf1a1c     c..:...<g..:...<
24020bb0:	3a8b3904 3ce7cdaa 3a842f71 3cf010a4     .9.:...<q/.:...<
24020bc0:	3a79de21 3cf7df95 3a6af6a2 3cff3748     !.y:...<..j:H7.<
24020bd0:	3a5baf7a 3d030a64 3a4c0fdb 3d063aa2     z.[:d..=..L:.:.=
24020be0:	3a3c1f20 3d092b1f 3a2be4c0 3d0bdab2      .<:.+.=..+:...=
24020bf0:	3a1b6854 3d0e4852 3a0ab189 3d10731a     Th.:RH.=...:.s.=
24020c00:	39f39048 3d125a3b 39d167f5 3d13fd0a     H..9;Z.=.g.9...=
24020c10:	39aef9e8 3d155afe 398c55fb 3d1673aa     ...9.Z.=.U.9.s.=
24020c20:	3953183f 3d1746c1 390d5890 3d17d41a     ?.S9.F.=.X.9...=
24020c30:	388f199d 3d181ba8 35ea6c11 3d181d7b     ...8...=.l.5{..=
24020c40:	b8875f32 3d17d9cc b908e0f2 3d1750ea     2_.....=.....P.=
24020c50:	b94d9fe6 3d16834c b988e6b1 3d15717f     ..M.L..=.....q.=
24020c60:	b9aaa55c 3d141c34 b9cbfcc3 3d128439     \...4..=....9..=
24020c70:	b9ecde00 3d10aa7d ba069d2e 3d0e9009     ....}..=.......=
24020c80:	ba1681b7 3d0c3601 ba26158d 3d099dab     .....6.=..&....=
24020c90:	ba3551cb 3d06c864 ba442fb6 3d03b7a5     .Q5.d..=./D....=
24020ca0:	ba52a8c7 3d006d03 ba60b6a5 3cf9d452     ..R..m.=..`.R..<
24020cb0:	ba6e532f 3cf261b7 ba7b787b 3cea85f6     /Sn..a.<{x{....<
24020cc0:	ba841068 3ce244ef ba8a236b 3cd9a2b4     h....D.<k#.....<
24020cd0:	ba8ff29e 3cd0a38c ba957b8e 3cc74bd4     .......<.{...K.<
24020ce0:	ba9abbe1 3cbda014 ba9fb161 3cb3a4fe     .......<a......<
24020cf0:	baa45a09 3ca95f5f baa8b3d8 3c9ed421     .Z..__.<....!..<
24020d00:	baacbd15 3c940850 bab0741e 3c89010b     ....P..<.t.....<
24020d10:	bab3d777 3c7b872a bab6e5ca 3c64aa6f     w...*.{<....o.d<
24020d20:	bab99df1 3c4d76b6 babbfeda 3c35f6dd     .....vM<......5<
24020d30:	babe07c1 3c1e35e1 babfb7e6 3c063ee5     .....5.<.....>.<
24020d40:	bac10ec2 3bdc3a19 bac20bf6 3babb719     .....:.;.......;
24020d50:	bac2af56 3b76168c bac2f8c1 3b149a2b     V.....v;....+..;
24020d60:	bac2e86a 3a4c97d5 bac27e84 ba38653c     j.....L:.~..<e8.
24020d70:	bac1bb90 bb0ef718 bac0a019 bb6f4724     ............$Go.
24020d80:	babf2ce2 bba76ecb babd62d5 bbd6c77e     .,...n...b..~...
24020d90:	babb42fb bc02cc1e bab8ce8b bc19e5f0     .B..............
24020da0:	bab606eb bc30a6d1 bab2ed8f bc470481     ......0.......G.
24020db0:	baaf8423 bc5cf503 baabcc6e bc726e92     #.....\.n....nr.
24020dc0:	baa7c85b bc83b3cf baa379fe bc8deb70     [........y..p...
24020dd0:	ba9ee385 bc97d9a6 ba9a0739 bca17a18     ........9....z..
24020de0:	ba94e783 bcaac891 ba8f8702 bcb3c102     ................
24020df0:	ba89e84c bcbc5f87 ba840e20 bcc4a069     L...._.. ...i...
24020e00:	ba7bf6d5 bccc8021 ba6f6623 bcd3fb4f     ..{.!...#fo.O...
24020e10:	ba627046 bcdb0ed5 ba551b80 bce1b7b0     Fpb.......U.....
24020e20:	ba476e36 bce7f31e ba396ef4 bcedbe9a     6nG......n9.....
24020e30:	ba2b2468 bcf317ba ba1c955e bcf7fc66     h$+.....^...f...
24020e40:	ba0dc8bc bcfc6aaa b9fd8b06 bd00306c     .....j......l0..
24020e50:	b9df2589 bd01eeb8 b9c06f51 bd036f96     .%......Qo...o..
24020e60:	b9a176ba bd04b284 b9824a49 bd05b717     .v......IJ......
24020e70:	b945f104 bd067d0a b9071fef bd070429     ..E..}......)...
24020e80:	b8907ceb bd074c68 b7169b72 bd0755d0     .|..hL..r....U..
24020e90:	3855053b bd072090 38e74b7e bd06aceb     ;.U8. ..~K.8....
24020ea0:	3931a6fb bd05fb42 396f2892 bd050c19     ..19B....(o9....
24020eb0:	39960735 bd03e00c 39b41e65 bd0277cf     5..9....e..9.w..
24020ec0:	39d1cc2d bd00d436 39ef0319 bcfdec5f     -..96......9_...
24020ed0:	3a05dafb bcf9bd8c 3a13ebec bcf51e2a     ...:.......:*...
24020ee0:	3a21ae0e bcf010ba 3a2f1b3a bcea97df     ..!:....:./:....
24020ef0:	3a3c2d72 bce4b673 3a48dee8 bcde6f7c     r-<:s.....H:|o..
24020f00:	3a5529fd bcd7c62a 3a610947 bcd0bde3     .)U:*...G.a:....
24020f10:	3a6c778d bcc95a27 3a776fd4 bcc19ea6     .wl:'Z...ow:....
24020f20:	3a80f6ac bcb98f3d 3a85f5c5 bcb12fde     ...:=......:./..
24020f30:	3a8ab319 bca884ae 3a8f2c9d bc9f91e6     ...:.....,.:....
24020f40:	3a936067 bc965bdd 3a974cb8 bc8ce714     g`.:.[...L.:....
24020f50:	3a9aeff5 bc833813 3a9e489a bc72a711     ...:.8...H.:..r.
24020f60:	3aa15550 bc5e7c6d 3aa414e1 bc49f9d4     PU.:m|^....:..I.
24020f70:	3aa6863c bc35290c 3aa8a86f bc2013f9     <..:.)5.o..:.. .
24020f80:	3aaa7abd bc0ac4a3 3aabfc7b bbea8a26     .z.:....{..:&...
24020f90:	3aad2d30 bbbf3eda 3aae0c87 bb93bbb6     0-.:.>.....:....
24020fa0:	3aae9a5d bb502a42 3aaed68f baf17df6     ]..:B*P....:.}..
24020fb0:	3aaec149 ba05794f 3aae5acf 3a573c54     I..:Oy...Z.:T<W:
24020fc0:	3aada389 3b0ca0da 3aac9bf7 3b62eed6     ...:...;...:..b;
24020fd0:	3aab44d7 3b9c48a1 3aa99efe 3bc6b060     .D.:.H.;...:`..;
24020fe0:	3aa7ab5e 3bf09b37 3aa56b23 3c0cfb00     ^..:7..;#k.:...<
24020ff0:	3aa2df82 3c2156f1 3aa009e5 3c355831     ...:.V!<...:1X5<
24021000:	3a9cebd6 3c48f5a8 3a9986e9 3c5c2687     ...:..H<...:.&\<
24021010:	3a95dcee 3c6ee220 3a91efce 3c80900e     ...: .n<...:...<
24021020:	3a8dc185 3c896c25 3a895438 3c92016a     ...:%l.<8T.:j..<
24021030:	3a84aa16 3c9a4c0c 3a7f8b09 3ca24864     ...:.L.<...:dH.<
24021040:	3a7551d6 3ca9f2f3 3a6aada9 3cb14862     .Qu:...<..j:bH.<
24021050:	3a5fa3c1 3cb8457c 3a543988 3cbee74c     .._:|E.<.9T:L..<
24021060:	3a487496 3cc52aed 3a3c5aa3 3ccb0dc5     .tH:.*.<.Z<:...<
24021070:	3a2ff194 3cd08d51 3a233f63 3cd5a74c     ../:Q..<c?#:L..<
24021080:	3a164a34 3cda599e 3a09183f 3cdea25d     4J.:.Y.<?..:]..<
24021090:	39f75faf 3ce27fdd 39dc2ec6 3ce5f09a     ._.9...<...9...<
240210a0:	39c0aab8 3ce8f344 39a4e09a 3ceb86c7     ...9D..<...9...<
240210b0:	3988dd97 3cedaa3d 39595dd0 3cef5cfa     ...9=..<.]Y9.\.<
240210c0:	3920c3a3 3cf09e7e 38d00eaa 3cf16e8d     .. 9~..<...8.n.<
240210d0:	383d0dc6 3cf1cd17 b716d77e 3cf1ba3d     ..=8...<~...=..<
240210e0:	b883e1ec 3cf13659 b8f45976 3cf041fd     ....Y6.<vY...A.<
240210f0:	b93206b4 3ceeddf4 b9696509 3ced0b26     ..2....<.ei.&..<
24021100:	b9901712 3ceacaca b9ab2466 3ce81e37     .......<f$..7..<
24021110:	b9c5ce1b 3ce50700 b9e007f6 3ce186e3     .......<.......<
24021120:	b9f9c606 3cdd9fc9 ba097e47 3cd953d9     .......<G~...S.<
24021130:	ba15d011 3cd4a559 ba21d2d0 3ccf96c1     ....Y..<..!....<
24021140:	ba2d811a 3cca2ab6 ba38d5b2 3cc46408     ..-..*.<..8..d.<
24021150:	ba43cb88 3cbe45ab ba4e5dba 3cb7d2c0     ..C..E.<.]N....<
24021160:	ba58879b 3cb10e80 ba6244b0 3ca9fc5e     ..X....<.Db.^..<
24021170:	ba6b90b2 3ca29fd8 ba746795 3c9afc9b     ..k....<.gt....<
24021180:	ba7cc585 3c93166d ba825376 3c8af135     ..|.m..<vS..5..<
24021190:	ba860433 3c8290f4 ba897376 3c73f378     3......<vs..x.s<
240211a0:	ba8c9fbf 3c625f86 ba8f87c8 3c506e8d     ....._b<.....nP<
240211b0:	ba922a6d 3c3e293b ba94868a 3c2b986a     m*..;)><....j.+<
240211c0:	ba969b49 3c18c500 ba9867da 3c05b805     I......<.g.....<
240211d0:	ba99eb9b 3be4f522 ba9b25fa 3bbe2ba4     ...."..;.%...+.;
240211e0:	ba9c16aa 3b9725f9 ba9cbd5d 3b5fed44     .....%.;]...D._;
240211f0:	ba9d1a02 3b116043 ba9d2c99 3a8593ed     ....C`.;.,.....:
24021200:	ba9cf54c b93b0b0f ba9c7473 bab3d5d2     L.....;.st......
24021210:	ba9baa74 bb27c023 ba9a97e0 bb750c13     t...#.'.......u.
24021220:	ba993d6d bba0d565 ba979be8 bbc6bc5f     m=..e......._...
24021230:	ba95b454 bbec2976 ba9387c3 bc0885b2     T...v)..........
24021240:	ba911761 bc1aa89f ba8e6487 bc2c7534     a........d..4u,.
24021250:	ba8b70ae bc3de345 ba883d59 bc4eeaf5     .p..E.=.Y=....N.
24021260:	ba84cc3e bc5f8475 ba811f29 bc6fa859     >...u._.)...Y.o.
24021270:	ba7a6ff0 bc7f4f61 ba723154 bc87393a     .oz.aO..T1r.:9..
24021280:	ba6986b1 bc8e856f ba607463 bc958914     ..i.o...ct`.....
24021290:	ba56fef6 bc9c4109 ba4d2b23 bca2aa64     ..V..A..#+M.d...
240212a0:	ba42fdca bca8c251 ba387bf5 bcae8630     ..B.Q....{8.0...
240212b0:	ba2daacf bcb3f388 ba228faa bcb90804     ..-.......".....
240212c0:	ba172ff0 bcbdc182 ba0b912f bcc21e0d     ./....../.......
240212d0:	b9ff7216 bcc61bd3 b9e75a7c bcc9b942     .r......|Z..B...
240212e0:	b9cee737 bcccf4db b9b6240b bccfcd6d     7........$..m...
240212f0:	b99d1cd7 bcd241e1 b983dd99 bcd45156     .....A......VQ..
24021300:	b954e4bf bcd5fb1f b921ce84 bcd73ebb     ..T.......!..>..
24021310:	b8dd217f bcd81be0 b86d0f0a bcd89263     .!........m.c...
24021320:	b6fff827 bcd8a263 382c8c6b bcd84c1c     '...c...k.,8.L..
24021330:	38bc1991 bcd79004 3910a569 bcd66ebc     ...8....i..9.n..
24021340:	3942d560 bcd4e910 39748537 bcd30008     `.B9....7.t9....
24021350:	3992ceec bcd0b4c9 39ab0444 bcce08b7     ...9....D..9....
24021360:	39c2d76e bccafd5a 39da3d72 bcc79464     n..9Z...r=.9d...
24021370:	39f12b8a bcc3cfb9 3a03cb9e bcbfb15b     .+.9.......:[...
24021380:	3a0ebb24 bcbb3b80 3a195f5b bcb67085     $..:.;..[_.:.p..
24021390:	3a23b375 bcb152e9 3a2db2c5 bcabe556     u.#:.R....-:V...
240213a0:	3a3758ce bca62a8c 3a40a13f bca02585     .X7:.*..?.@:.%..
240213b0:	3a4987f4 bc99d945 3a5208fc bc9348fd     ..I:E.....R:.H..
240213c0:	3a5a209c bc8c77f8 3a61cb44 bc85699c     . Z:.w..D.a:.i..
240213d0:	3a6905a4 bc7c42dc 3a6fcc9d bc6d4614     ..i:.B|...o:.Fm.
240213e0:	3a761d4b bc5de442 3a7bf502 bc4e24f1     K.v:B.]...{:.$N.
240213f0:	3a80a8aa bc3e0fdb 3a831809 bc2dacd7     ...:..>....:..-.
24021400:	3a85479f bc1d03e8 3a87368d bc0c1d17     .G.:.....6.:....
24021410:	3a88e41d bbf60128 3a8a4fa5 bbd36d3d     ...:(....O.:=m..
24021420:	3a8b78bc bbb08f0e 3a8c5eeb bb8d7753     .x.:.....^.:Sw..
24021430:	3a8d0207 bb546da2 3a8d61e4 bb0dbcb0     ...:.mT..a.:....
24021440:	3a8d7e8c ba8dfad5 3a8d5818 b6a2baaf     .~.:.....X.:....
24021450:	3a8ceed5 3a8c4c18 3a8c4311 3b0c4799     ...:.L.:.C.:.G.;
24021460:	3a8b555e 3b51f248 3a8a2656 3b8b82b7     ^U.:H.Q;V&.:...;
24021470:	3a88b6a6 3badb063 3a87073d 3bcf7232     ...:c..;=..:2r.;
24021480:	3a85190d 3bf0b876 3a82ed2b 3c08b9e1     ...:v..;+..:...<
24021490:	3a8084c9 3c18ca7a 3a7bc26a 3c28869c     ...:z..<j.{:..(<
240214a0:	3a7607b2 3c37e717 3a6fdc73 3c46e4e1     ..v:..7<s.o:..F<
240214b0:	3a6943e7 3c557924 3a62417b 3c639d3e     .Ci:$yU<{Ab:>.c<
240214c0:	3a5ad8cc 3c714ac6 3a530da3 3c7e7b9c     ..Z:.Jq<..S:.{~<
240214d0:	3a4ae3f9 3c8594f0 3a425fef 3c8ba7ef     ..J:...<._B:...<
240214e0:	3a3985cf 3c91741c 3a305a06 3c96f6ed     ..9:.t.<.Z0:...<
240214f0:	3a26e129 3c9c2df9 3a1d1feb 3ca116f7     ).&:.-.<...:...<
24021500:	3a131b22 3ca5afcd 3a08d7bc 3ca9f68e     "..:...<...:...<
24021510:	39fcb58d 3cade962 39e752c4 3cb186b0     ...9b..<.R.9...<
24021520:	39d19194 3cb4ccf6 39bb7c8e 3cb7bae7     ...9...<.|.9...<
24021530:	39a51e6d 3cba4f62 398e8204 3cbc8968     m..9bO.<...9h..<
24021540:	396f6475 3cbe6830 3941740f 3cbfeb17     udo90h.<.tA9...<
24021550:	391348f4 3cc111ae 38c9f262 3cc1db9d     .H.9...<b..8...<
24021560:	385a6b94 3cc248d5 37044237 3cc2595c     .kZ8.H.<7B.7\Y.<
24021570:	b817d443 3cc20d71 b8a7f5a7 3cc1657b     C...q..<....{e.<
24021580:	b901b766 3cc06210 b92f1542 3cbf03e1     f....b.<B./....<
24021590:	b95bff0c 3cbd4be6 b9842fdf 3cbb3b25     ..[..K.<./..%;.<
240215a0:	b99a1151 3cb8d2e0 b9af99a7 3cb6147a     Q......<....z..<
240215b0:	b9c4bee5 3cb3017f b9d9773b 3caf9b9f     .......<;w.....<
240215c0:	b9edb91c 3cabe4bb ba00bd9d 3ca7ded1     .......<.......<
240215d0:	ba0a5a41 3ca38bfc ba13ae1a 3c9eee8d     AZ.....<.......<
240215e0:	ba1cb4e7 3c9a08e5 ba256a93 3c94dd92     .......<.j%....<
240215f0:	ba2dcb31 3c8f6f39 ba35d301 3c89c09e     1.-.9o.<..5....<
24021600:	ba3d7e6d 3c83d4ac ba44ca0f 3c7b5cb8     m~=....<..D..\{<
24021610:	ba4bb2b0 3c6ea189 ba52354c 3c617e35     ..K...n<L5R.5~a<
24021620:	ba584f0f 3c53f947 ba5dfd5d 3c461975     .OX.G.S<].].u.F<
24021630:	ba633dca 3c37e595 ba680e23 3c2964b3     .=c...7<#.h..d)<
24021640:	ba6c6c6d 3c1a9deb ba7056e0 3c0b987d     mll....<.Vp.}..<
24021650:	ba73cbf1 3bf8b77d ba76ca4e 3bd9de34     ..s.}..;N.v.4..;
24021660:	ba7950da 3bbab417 ba7b5eb9 3b9b4841     .Py....;.^{.AH.;
24021670:	ba7cf340 3b7753b4 ba7e0e06 3b37d02f     @.|..Sw;..~./.7;
24021680:	ba7eaedc 3af048f5 ba7ed5c6 3a61bc21     ..~..H.:..~.!.a:
24021690:	ba7e8309 b8e63746 ba7db724 ba8d3f07     ..~.F7..$.}..?..
240216a0:	ba7c72cc bb05bc35 ba7ab6f0 bb4469f4     .r|.5.....z..iD.
240216b0:	ba7884b7 bb814590 ba75dd83 bba00141     ..x..E....u.A...
240216c0:	ba72c2e9 bbbe599e ba6f36b4 bbdc4073     ..r..Y...6o.s@..
240216d0:	ba6b3ae8 bbf9a7d1 ba66d1b9 bc0b4104     .:k.......f..A..
240216e0:	ba61fd91 bc1960dd ba5cc106 bc272ceb     ..a..`....\..,'.
240216f0:	ba571ee4 bc349ed9 ba511a23 bc41b07a     ..W...4.#.Q.z.A.
24021700:	ba4ab5e9 bc4e5bd9 ba43f585 bc5a9b37     ..J..[N...C.7.Z.
24021710:	ba3cdc72 bc666900 ba356e55 bc71bfe1     r.<..if.Un5...q.
24021720:	ba2daef3 bc7c9ad0 ba25a23b bc837a79     ..-...|.;.%.yz..
24021730:	ba1d4c3d bc8864de ba14b127 bc8d0a65     =L...d..'...e...
24021740:	ba0bd547 bc91690e ba02bd06 bc957ef8     G....i.......~..
24021750:	b9f2d9d0 bc994a5f b9dfd314 bc9cc9aa     ...._J..........
24021760:	b9cc6f32 bc9ffb68 b9b8b7b9 bca2de47     2o..h.......G...
24021770:	b9a4b649 bca5711e b99074b0 bca7b2f2     I....q...t......
24021780:	b977f98d bca9a2e7 b94eb0fa bcab4045     ..w.......N.E@..
24021790:	b92523a2 bcac8a8d b8f6cb3d bcad8158     .#%.....=...X...
240217a0:	b8a31610 bcae2470 b81e9fd5 bcae73c1     ....p$.......s..
240217b0:	360be183 bcae6f5f 382f9db6 bcae1790     ...6_o..../8....
240217c0:	38aad7c0 bcad6cbb 38fd524d bcac6f6a     ...8.l..MR.8jo..
240217d0:	39278baa bcab204f 3950002c bca98052     ..'9O ..,.P9R...
240217e0:	3977f390 bca79068 398fa989 bca551c4     ..w9h......9.Q..
240217f0:	39a30621 bca2c5ad 39b60688 bc9fed91     !..9.......9....
24021800:	39c8a1e0 bc9ccb07 39dacf8e bc995fcd     ...9.......9._..
24021810:	39ec8726 bc95adac 39fdc085 bc91b6ac     &..9.......9....
24021820:	3a0739df bc8d7cdb 3a0f4c9b bc890278     .9.:.|...L.:x...
24021830:	3a1714c9 bc8449d1 3a1e8ee2 bc7eaab6     ...:.I.....:..~.
24021840:	3a25b78c bc744f3d 3a2c8b90 bc698681     ..%:=Ot...,:..i.
24021850:	3a3307e6 bc5e5601 3a3929af bc52c367     ..3:.V^..)9:g.R.
24021860:	3a3eee3d bc46d485 3a44530d bc3a8f53     =.>:..F..SD:S.:.
24021870:	3a4955cc bc2df9f9 3a4df45c bc211ab4     .UI:..-.\.M:..!.
24021880:	3a522ccb bc13f7e8 3a55fd5e bc069812     .,R:....^.U:....
24021890:	3a596487 bbf20393 3a5c60f4 bbd67775     .dY:.....`\:uw..
240218a0:	3a5ef180 bbba9944 3a61153c bb9e769d     ..^:D...<.a:.v..
240218b0:	3a62cb71 bb821d2f 3a64139b bb4b3577     q.b:/.....d:w5K.
240218c0:	3a64ed68 bb11fa1c 3a6558c3 bab147d8     h.d:.....Xe:.G..
240218d0:	3a6555c4 b9fa73d6 3a64e4be 39cf55a6     .Ue:.s....d:.U.9
240218e0:	3a640632 3aa5d886 3a62bade 3b0b9afa     2.d:...:..b:...;
240218f0:	3a6103ac 3b43dbe2 3a5ee1bc 3b7b9454     ..a:..C;..^:T.{;
24021900:	3a5c5660 3b9954f5 3a596320 3bb4815a     `V\:.T.; cY:Z..;
24021910:	3a5609ad 3bcf428f 3a524bef 3be98c0d     ..V:.B.;.KR:...;
24021920:	3a4e2bf8 3c01a8c6 3a49ac09 3c0e4386     .+N:...<..I:.C.<
24021930:	3a44ce92 3c1a906f 3a3f962c 3c2689d8     ..D:o..<,.?:..&<
24021940:	3a3a0599 3c322a29 3a341fc5 3c3d6c27     ..::)*2<..4:'l=<
24021950:	3a2de7c6 3c484aa7 3a2760cf 3c52c0ad     ..-:.JH<.`':..R<
24021960:	3a208e3f 3c5cc99a 3a197392 3c6660d2     ?. :..\<.s.:.`f<
24021970:	3a121468 3c6f8219 3a0a747c 3c78295c     h..:..o<|t.:\)x<
24021980:	3a0297a6 3c80296b 39f503b7 3c83fd7b     ...:k).<...9{..<
24021990:	39e46e51 3c878f36 39d3775a 3c8add13     Qn.96..<Zw.9...<
240219a0:	39c22748 3c8de5ac 39b086ab 3c90a7c8     H'.9...<...9...<
240219b0:	399e9e34 3c932241 398c76b7 3c95541a     4..9A".<.v.9.T.<
240219c0:	3974323e 3c973c82 394f1ccf 3c98dabd     >2t9.<.<..O9...<
240219d0:	3929bf38 3c9a2e3a 39042b9e 3c9b3692     8.)9:..<.+.9.6.<
240219e0:	38bce897 3c9bf37c 3862addf 3c9c64d0     ...8|..<..b8.d.<
240219f0:	37971b02 3c9c8a95 b7968e6f 3c9c64f6     ...7...<o....d.<
24021a00:	b86187e4 3c9bf42d b8bb7651 3c9b38bb     ..a.-..<Qv...8.<
24021a10:	b902cb8a 3c9a3322 b9278177 3c98e41d     ...."3.<w.'....<
24021a20:	b94bcb88 3c974c88 b96f9897 3c956d55     ..K..L.<..o.Um.<
24021a30:	b9896bdd 3c9347a6 b99abc30 3c90dcb7     .k...G.<0......<
24021a40:	b9abb527 3c8e2de0 b9bc4ed9 3c8b3ca4     '....-.<.N...<.<
24021a50:	b9cc8184 3c880aa1 b9dc45b0 3c849988     .......<.E.....<
24021a60:	b9eb940d 3c80eb37 b9fa6595 3c7a0347     ....7..<.e..G.z<
24021a70:	ba0459be 3c71bda8 ba0b3b9e 3c6909ef     .Y....q<.;....i<
24021a80:	ba11d54e 3c5fec9a ba1823d5 3c566a5a     N....._<.#..ZjV<
24021a90:	ba1e245b 3c4c8819 ba23d439 3c424ad3     [$....L<9.#..JB<
24021aa0:	ba2930e8 3c37b7c8 ba2e3811 3c2cd449     .0)...7<.8..I.,<
24021ab0:	ba32e788 3c21a5cd ba373d47 3c1631f8     ..2...!<G=7..1.<
24021ac0:	ba3b3779 3c0a7e81 ba3ed476 3bfd2273     y7;..~.<v.>.s".;
24021ad0:	ba4212c4 3be4e01a ba44f119 3bcc41f8     ..B....;..D..A.;
24021ae0:	ba476e56 3bb3542d ba498992 3b9a22fb     VnG.-T.;..I..".;
24021af0:	ba4b420d 3b80bab9 ba4c973e 3b4e4fa2     .BK....;>.L..ON;
24021b00:	ba4d88c6 3b1aed70 ba4e167b 3acecfa0     ..M.p..;{.N....:
24021b10:	ba4e4060 3a4f5ee5 ba4e06ab 36ac1d59     `@N..^O:..N.Y..6
24021b20:	ba4d69bf ba4c1185 ba4c6a34 bacc3ddc     .iM...L.4jL..=..
24021b30:	ba4b08ca bb18e122 ba494674 bb4b32c0     ..K."...tFI..2K.
24021b40:	ba472453 bb7cfbd4 ba44a3b3 bb971260     S$G...|...D.`...
24021b50:	ba41c611 bbaf4b23 ba3e8d12 bbc71cc4     ..A.#K....>.....
24021b60:	ba3afa88 bbde7c15 ba37106e bbf55e24     ..:..|..n.7.$^..
24021b70:	ba32d0e7 bc05dc20 ba2e3e40 bc10c003     ..2. ...@>......
24021b80:	ba295ae9 bc1b55b2 ba24297d bc25984b     .Z)..U..})$.K.%.
24021b90:	ba1eacb7 bc2f831b ba18e772 bc39118f     ....../.r.....9.
24021ba0:	ba12dcae bc423f55 ba0c8f8b bc4b0852     ....U?B.....R.K.
24021bb0:	ba060346 bc536888 b9fe7666 bc5b5c3c     F....hS.fv..<\[.
24021bc0:	b9f07591 bc62dfe9 b9e20b21 bc69f03e     .u....b.!...>.i.
24021bd0:	b9d33e5d bc708a2c b9c416b1 bc76aae2     ]>..,.p.......v.
24021be0:	b9b49bb6 bc7c4fc7 b9a4d528 bc80bb36     .....O|.(...6...
24021bf0:	b994cad8 bc830e62 b98484bd bc852076     ....b.......v ..
24021c00:	b96815c2 bc86f0a0 b946cabf bc887e34     ..h.......F.4~..
24021c10:	b92538c9 bc89c8a6 b903705c bc8acf87     .8%.....\p......
24021c20:	b8c303d0 bc8b928b b87df7e8 bc8c1186     ..........}.....
24021c30:	b7eba892 bc8c4c74 36910a8d bc8c4360     ....tL.....6`C..
24021c40:	3819a74c bc8bf68e 38903e32 bc8b6650     L..8....2>.8Pf..
24021c50:	38d32ff9 bc8a9321 390ac474 bc897d98     ./.8!...t..9.}..
24021c60:	392b94af bc882670 394bf90f bc868e7a     ..+9p&....K9z...
24021c70:	396be238 bc84b6b9 3985a08b bc82a033     8.k9.......93...
24021c80:	3995036e bc804c26 39a41291 bc7b77bb     n..9&L.....9.w{.
24021c90:	39b2c6e4 bc75e184 39c1198f bc6fd8b6     ...9..u....9..o.
24021ca0:	39cf03e9 bc696097 39dc7f82 bc627c97     ...9.`i....9.|b.
24021cb0:	39e9862c bc5b3068 39f611e9 bc537fda     ,..9h0[....9..S.
24021cc0:	3a010e83 bc4b6ef4 3a06d104 bc4301dd     ...:.nK....:..C.
24021cd0:	3a0c4de3 bc3a3d08 3a1182a9 bc3124db     .M.:.=:....:.$1.
24021ce0:	3a166d08 bc27be0a 3a1b0ad5 bc1e0d5a     .m.:..'....:Z...
24021cf0:	3a1f5a0d bc1417b9 3a2358d4 bc09e22c     .Z.:.....X#:,...
24021d00:	3a270577 bbfee3a9 3a2a5e6b bbe997dd     w.':....k^*:....
24021d10:	3a2d6250 bbd3eb92 3a300ff0 bbbde994     Pb-:......0:....
24021d20:	3a32663f bba79ccc 3a34645c bb911040     ?f2:....\d4:@...
24021d30:	3a360992 bb749e1e 3a375558 bb46c8c5     ..6:..t.XU7:..F.
24021d40:	3a38474e bb18b6f5 3a38df44 bad4fe41     NG8:....D.8:A...
24021d50:	3a391d35 ba70df54 3a390143 b95f784b     5.9:T.p.C.9:Kx_.
24021d60:	3a388bc1 3a00adae 3a37bd2c 3a9c356f     ..8:...:,.7:o5.:
24021d70:	3a36962a 3af78080 3a35178b 3b290622     *.6:...:..5:".);
24021d80:	3a33424e 3b55d6b7 3a311793 3b810e4e     NB3:..U;..1:N..;
24021d90:	3a2e98ac 3b96e163 3a2bc70b 3bac5a44     ...:c..;..+:DZ.;
24021da0:	3a28a44d 3bc16ecf 3a253235 3bd61515     M.(:.n.;52%:...;
24021db0:	3a2172aa 3bea436b 3a1d67ba 3bfdf062     .r!:kC.;.g.:b..;
24021dc0:	3a19138f 3c08896a 3a14787f 3c11d0f2     ...:j..<.x.:...<
24021dd0:	3a0f98f8 3c1aca81 3a0a778c 3c2371fa     ...:...<.w.:.q#<
24021de0:	3a0516ea 3c2bc368 39fef3bf 3c33bb03     ...:h.+<...9..3<
24021df0:	39f346a3 3c3b5541 39e72c84 3c428e9b     .F.9AU;<.,.9..B<
24021e00:	39daab92 3c4963f7 39cdca2d 3c4fd250     ...9.cI<-..9P.O<
24021e10:	39c08ee2 3c55d6c1 39b3005d 3c5b6ec6     ...9..U<]..9.n[<
24021e20:	39a52572 3c6097f0 39970515 3c65501c     r%.9..`<...9.Pe<
24021e30:	3988a659 3c699550 397420d2 3c6d65d4     Y..9P.i<. t9.em<
24021e40:	395694fb 3c70c027 3938b7dc 3c73a305     ..V9'.p<..89..s<
24021e50:	391a982a 3c760d63 38f8897c 3c77fe74     *..9c.v<|..8t.w<
24021e60:	38bb98f5 3c7975ad 387cf913 3c7a72a2     ...8.uy<..|8.rz<
24021e70:	3802a420 3c7af549 3606e8d8 3c7afdb8      ..8I.z<...6..z<
24021e80:	b7e2d8b4 3c7a8c4e b86ab1a7 3c79a197     ....N.z<..j...y<
24021e90:	b8b19371 3c783e75 b8ed4911 3c7663df     q...u>x<.I...cv<
24021ea0:	b9142e8c 3c741322 b931599e 3c714dc0     ....".t<.Y1..Mq<
24021eb0:	b94e17e3 3c6e155c b96a5bba 3c6a6bef     ..N.\.n<.[j..kj<
24021ec0:	b9830bdb 3c665391 b9909f66 3c61ce92     .....Sf<f.....a<
24021ed0:	b99de219 3c5cdf8a b9aacdc6 3c578913     ......\<......W<
24021ee0:	b9b75c65 3c51ce34 b9c38820 3c4bb1f0     e\..4.Q< .....K<
24021ef0:	b9cf4b5b 3c453798 b9daa0ac 3c3e6291     [K...7E<.....b><
24021f00:	b9e582e6 3c373678 b9efed14 3c2fb712     ....x67<....../<
24021f10:	b9f9da81 3c27e83c ba01a35e 3c1fce0a     ....<.'<^......<
24021f20:	ba0616c8 3c176c9d ba0a4588 3c0ec845     .....l.<.E..E..<
24021f30:	ba0e2dca 3c05e569 ba11cddd 3bf99115     .-..i..<.......;
24021f40:	ba152435 3be6ec8f ba182f6c 3bd3e6a1     5$.....;l/.....;
24021f50:	ba1aee3f 3bc088d8 ba1d5f94 3bacdce7     ?......;._.....;
24021f60:	ba1f8276 3b98ec98 ba215619 3b84c1d5     v......;.V!....;
24021f70:	ba22d9d3 3b60cd35 ba240d28 3b37c9e8     ..".5.`;(.$...7;
24021f80:	ba24efbe 3b0e8dfc ba258167 3aca5b3f     ..$....;g.%.?[.:
24021f90:	ba25c218 3a6ef46c ba25b1f3 399284f1     ..%.l.n:..%....9
24021fa0:	ba25513d b9b81d85 ba24a063 ba805793     =Q%.....c.$..W..
24021fb0:	ba239ff8 bad22791 ba2250b9 bb11a7f7     ..#..'...P".....
24021fc0:	ba20b383 bb39d4d6 ba1ec95e bb61872f     .. ...9.^.../.a.
24021fd0:	ba1c9374 bb845606 ba1a1313 bb979869     t....V......i...
24021fe0:	ba1749ac bbaa819e ba1438d2 bbbd08b9     .I.......8......
24021ff0:	ba10e23e bbcf24ff ba0d47c2 bbe0cdf8     >....$...G......
24022000:	ba096b58 bbf1fb63 ba054f14 bc0152a3     Xk..c....O...R..
24022010:	ba00f525 bc0961f5 b9f8bfb9 bc1127f3     %....a.......'..
24022020:	b9ef2348 bc18a10d b9e519fe bc1fc9dd     H#..............
24022030:	b9daa913 bc269f26 b9cfd5ef bc2d1dd0     ....&.&.......-.
24022040:	b9c4a621 bc334303 b9b91f6c bc390c05     !....C3.l.....9.
24022050:	b9ad47af bc3e763d b9a124eb bc437f66     .G..=v>..$..f.C.
24022060:	b994bd46 bc482553 b9881708 bc4c660a     F...S%H......fL.
24022070:	b976710b bc503fc9 b95c5062 bc53b10d     .qv..?P.bP\...S.
24022080:	b941d92e bc56b873 b9271888 bc5954d0     ..A.s.V...'..TY.
24022090:	b90c1bba bc5b8542 b8e1e046 bc5d4906     ....B.[.F....I].
240220a0:	b8ab4641 bc5e9f93 b8690879 bc5f889c     AF....^.y.i..._.
240220b0:	b7f6d43f bc600401 b65e6f89 bc6011ee     ?.....`..o^...`.
240220c0:	37be9748 bc5fb2a3 384bf8b3 bc5ee6ab     H..7.._...K8..^.
240220d0:	389bf5cd bc5daebd 38d17822 bc5c0bcf     ...8..]."x.8..\.
240220e0:	390334cb bc59fefa 391d5868 bc578994     .4.9..Y.hX.9..W.
240220f0:	39371a6a bc54ad2b 39506e87 bc516b6d     j.79+.T..nP9mkQ.
24022100:	396948be bc4dc652 3980ceaa bc49bfdd     .Hi9R.M....9..I.
24022110:	398cb063 bc455a52 399843f8 bc409836     c..9RZE..C.96.@.
24022120:	39a38407 bc3b7c17 39ae6b4c bc3608bb     ...9.|;.Lk.9..6.
24022130:	39b8f4c1 bc30411b 39c31b84 bc2a283d     ...9.A0....9=(*.
24022140:	39ccdaf6 bc23c163 39d62ea4 bc1d0fee     ...9c.#....9....
24022150:	39df1251 bc16175b 39e78207 bc0edb4a     Q..9[......9J...
24022160:	39ef79fd bc075f7b 39f6f6ac bbff4f8c     .y.9{_.....9.O..
24022170:	39fdf4d3 bbef703d 3a0238b6 bbdf2928     ...9=p...8.:()..
24022180:	3a0534d9 bbce828b 3a07ed90 bbbd84d9     .4.:.......:....
24022190:	3a0a61be bbac38a3 3a0c9066 bb9aa695     .a.:.8..f..:....
240221a0:	3a0e78ad bb88d780 3a1019df bb6da887     .x.:.......:..m.
240221b0:	3a117366 bb494bb0 3a1284d6 bb24aa77     fs.:.KI....:w.$.
240221c0:	3a134dde baffae07 3a13ce59 bab5c6d4     .M.:....Y..:....
240221d0:	3a140640 ba57876e 3a13f5b3 b9872377     @..:n.W....:w#..
240221e0:	3a139cf3 39a0166b 3a12fc64 3a630799     ...:k..9d..:..c:
240221f0:	3a12148e 3aba8e17 3a10e61c 3b018091     ...:...:...:...;
24022200:	3a0f71db 3b255d07 3a0db8b7 3b48cb35     .q.:.]%;...:5.H;
24022210:	3a0bbbc0 3b6bba27 3a097c23 3b870c97     ...:'.k;#|.:...;
24022220:	3a06fb31 3b97ebff 3a043a56 3ba87349     1..:...;V:.:Is.;
24022230:	3a013b1f 3bb89aad 39fbfe65 3bc85a93     .;.:...;e..9.Z.;
24022240:	39f510b2 3bd7ab9d 39edb0e2 3be686ac     ...9...;...9...;
24022250:	39e5e2f2 3bf4e4dc 39ddab00 3c015fc6     ...9...;...9._.<
24022260:	39d50d71 3c080831 39cc0eca 3c0e68a8     q..91..<...9.h.<
24022270:	39c2b3ba 3c147e45 39b90124 3c1a464e     ...9E~.<$..9NF.<
24022280:	39aefc0d 3c1fbe2f 39a4a99d 3c24e37a     ...9/..<...9z.$<
24022290:	399a0f1a 3c29b3f9 398f31f6 3c2e2d85     ...9..)<.1.9.-.<
240222a0:	398417b0 3c324e46 39718bda 3c36146f     ...9FN2<..q9o.6<
240222b0:	395a84c5 3c397e87 394325b1 3c3c8b16     ..Z9.~9<.%C9..<<
240222c0:	392b7a53 3c3f3906 39138e81 3c41873f     Sz+9.9?<...9?.A<
240222d0:	38f6dc4f 3c4374f5 38c64a7e 3c450187     O..8.tC<~J.8..E<
240222e0:	38957f89 3c462c8a 3849270c 3c46f5b3     ...8.,F<.'I8..F<
240222f0:	37ce7a03 3c475cec 35ae1e2b 3c47625f     .z.7.\G<+..5_bG<
24022300:	b7b81ac2 3c47064f b83d0e7c 3c464945     ....O.G<|.=.EIF<
24022310:	b88eb1a3 3c452be4 b8be6e93 3c43af01     .....+E<.n....C<
24022320:	b8eda704 3c41d3b5 b90e2221 3c3f9b2b     ......A<!"..+.?<
24022330:	b9251802 3c3d06d1 b93baa29 3c3a181f     ..%...=<).;...:<
24022340:	b951cde2 3c36d0ed b96778a5 3c333308     ..Q...6<.xg..33<
24022350:	b97ca039 3c2f408a b9889d57 3c2afba1     9.|..@/<W.....*<
24022360:	b9929f36 3c2666a7 b99c5107 3c21841d     6....f&<.Q....!<
24022370:	b9a5ae52 3c1c56aa b9aeb2c2 3c16e114     R....V.<.......<
24022380:	b9b75a35 3c112643 b9bfa0be 3c0b293c     5Z..C&.<....<).<
24022390:	b9c78299 3c04ed28 b9cefc3c 3bfcea8c     ....(..<<......;
240223a0:	b9d60a55 3bef89e6 b9dca9c9 3be1bf4b     U......;....K..;
240223b0:	b9e2d7b0 3bd391d0 b9e89163 3bc508ba     .......;c......;
240223c0:	b9edd46c 3bb62b71 b9f29ea3 3ba70188     l...q+.;.......;
240223d0:	b9f6ee0a 3b9792a8 b9fac0eb 3b87e698     .......;.......;
240223e0:	b9fe15ce 3b700a76 ba0075ba 3b4fed0a     ....v.p;.u....O;
240223f0:	ba01a074 3b2f84ed ba028ab4 3b0ee242     t...../;....B..;
24022400:	ba033440 3adc2a63 ba039cf7 3a9a5be1     @4..c*.:.....[.:
24022410:	ba03c4dc 3a30f2ea ba03ac12 39351b5e     ......0:....^.59
24022420:	ba0352da b9ac1801 ba02b991 ba58c591     .R............X.
24022430:	ba01e0bd baad5324 ba00c8f9 baedb7a0     ....$S..........
24022440:	b9fee607 bb16b894 b9fbbf6c bb36307e     ........l...~06.
24022450:	b9f82015 bb553483 b9f40a2e bb73b5c9     . ...4U.......s.
24022460:	b9ef8018 bb88d2e7 b9ea846c bb977b2d     ........l...-{..
24022470:	b9e519fb bba5cccc b9df43c6 bbb3c109     .........C......
24022480:	b9d9050a bbc15159 b9d26129 bbce776b     ....YQ..)a..kw..
24022490:	b9cb5bba bbdb2d27 b9c3f87e bbe76cb0     .[..'-..~....l..
240224a0:	b9bc3b66 bbf33066 b9b4288a bbfe72ef     f;..f0...(...r..
240224b0:	b9abc421 bc049799 b9a31292 bc09b02d     !...........-...
240224c0:	b99a1860 bc0e80f0 b990da2f bc1307c1     `......./.......
240224d0:	b9875cc3 bc1742a7 b97b49f1 bc1b2fcf     .\...B...I{../..
240224e0:	b9676f84 bc1ecd8d b953345a bc221a5e     .og.....Z4S.^.".
240224f0:	b93ea2b1 bc2514ed b929c4f6 bc27bbfc     ..>...%...)...'.
24022500:	b914a592 bc2a0e92 b8fe9e5b bc2c0bcd     ......*.[.....,.
24022510:	b8d398d3 bc2db301 b8a84fe9 bc2f03a4     ......-..O..../.
24022520:	b879b24d bc2ffd53 b8229404 bc309fe6     M.y.S./..."...0.
24022530:	b796dfd3 bc30eb5a 3638f2e5 bc30dfc7     ....Z.0...86..0.
24022540:	37c47d5e bc307d8c 38387444 bc2fc515     ^}.7.}0.Dt88../.
24022550:	38870301 bc2eb70d 38b16534 bc2d5441     ...8....4e.8AT-.
24022560:	38db4c45 bc2b9da8 390251fe bc299463     EL.8..+..Q.9c.).
24022570:	3916ac45 bc2739b6 392aab3a bc248f0b     E..9.9'.:.*9..$.
24022580:	393e455c bc2195f1 3951715a bc1e502c     \E>9..!.ZqQ9,P..
24022590:	39642629 bc1abf93 39765af3 bc16e628     )&d9.....Zv9(...
240225a0:	398403a2 bc12c60b 398c9169 bc0e617f     ...9....i..9.a..
240225b0:	3994d2d8 bc09bae9 399cc426 bc04d4c7     ...9....&..9....
240225c0:	39a461a9 bbff6374 39aba7eb bbf4a8f6     .a.9tc.....9....
240225d0:	39b293a9 bbe97fba 39b921be bbddeda0     ...9.....!.9....
240225e0:	39bf4f4c bbd1f8aa 39c51992 bbc5a712     LO.9.......9....
240225f0:	39ca7e11 bbb8ff30 39cf7a77 bbac078a     .~.90...wz.9....
24022600:	39d40cab bb9ec6bd 39d832c3 bb914392     ...9.....2.9.C..
24022610:	39dbeb13 bb8384e1 39df3427 bb6b233e     ...9....'4.9>#k.
24022620:	39e20cbd bb4ee1a5 39e473ce bb32532d     ...9..N..s.9-S2.
24022630:	39e6688f bb158617 39e7ea68 baf11194     .h.9....h..9....
24022640:	39e8f8fd bab6d355 39e99430 ba78dc9b     ...9U...0..9..x.
24022650:	39e9bc10 ba03fe93 39e970f1 b87461b2     ...9.....p.9.at.
24022660:	39e8b358 39ca2722 39e78407 3a58d593     X..9"'.9...9..X:
24022670:	39e5e3ec 3aa5e3c4 39e3d43f 3aded8d8     ...9...:?..9...:
24022680:	39e1565d 3b0b9738 39de6bdf 3b2764b3     ]V.98..;.k.9.d';
24022690:	39db1692 3b42c783 39d75875 3b5db292     ...9..B;uX.9..];
240226a0:	39d333b5 3b781909 39ceaabc 3b88f731     .3.9..x;...91..;
240226b0:	39c9c015 3b959332 39c47683 3ba1da99     ...92..;.v.9...;
240226c0:	39bed0ee 3badc7a8 39b8d26f 3bb954cf     ...9...;o..9.T.;
240226d0:	39b27e44 3bc47cb4 39abd7d9 3bcf3a32     D~.9.|.;...92:.;
240226e0:	39a4e2b2 3bd9885d 399da285 3be36286     ...9]..;...9.b.;
240226f0:	39961b24 3becc437 398e5081 3bf5a940     $..97..;.P.9@..;
24022700:	398646aa 3bfe0dab 397c039e 3c02f6e3     .F.9...;..|9...<
24022710:	396b0c5c 3c06a315 3959b054 3c0a09d6     \.k9...<T.Y9...<
24022720:	3947f863 3c0d29b8 3935ed94 3c10016f     c.G9.).<..59o..<
24022730:	3923990f 3c128fd3 39110416 3c14d3e3     ..#9...<...9...<
24022740:	38fc701e 3c16ccc4 38d67cd9 3c1879bd     .p.8...<.|.8.y.<
24022750:	38b0414f 3c19da3f 3889d09a 3c1aede0     OA.8?..<...8...<
24022760:	38467ba7 3c1bb45d 37f2706d 3c1c2d95     .{F8]..<mp.7.-.<
24022770:	372ff41d 3c1c5991 b7043f81 3c1c3882     ../7.Y.<.?...8.<
24022780:	b7db916b 3c1bcab9 b83a07f6 3c1b10b1     k......<..:....<
24022790:	b882d43e 3c1a0b09 b8a842c8 3c18ba83     >......<.B.....<
240227a0:	b8cd3d7d 3c172008 b8f1b289 3c153ca3     }=... .<.....<.<
240227b0:	b90ac836 3c131182 b91c6300 3c109ff6     6......<.c.....<
240227c0:	b92da13c 3c0de971 b93e7ab9 3c0aef87     <.-.q..<.z>....<
240227d0:	b94ee78d 3c07b3e8 b95edff5 3c043868     ..N....<..^.h8.<
240227e0:	b96e5c7b 3c007ef6 b97d55e6 3bf9133e     {\n..~.<.U}.>..;
240227f0:	b985e2a5 3bf0b514 b98cd202 3be7e7f3     .......;.......;
24022800:	b99375dd 3bdeb096 b999cb33 3bd513e1     .u.....;3......;
24022810:	b99fcf2d 3bcb16ee b9a57f13 3bc0befe     -......;.......;
24022820:	b9aad86b 3bb61177 b9afd8d7 3bab13ea     k...w..;.......;
24022830:	b9b47e2f 3b9fcc07 b9b8c67a 3b943f9f     /~.....;z....?.;
24022840:	b9bcafed 3b8874a1 b9c038ee 3b78e225     .....t.;.8..%.x;
24022850:	b9c36010 3b607622 b9c62424 3b47b19f     .`.."v`;$$....G;
24022860:	b9c8841b 3b2ea11b b9ca7f28 3b155135     .......;(...5Q.;
24022870:	b9cc14a4 3af79d41 b9cd4425 3ac44c3a     ....A..:%D..:L.:
24022880:	b9ce0d72 3a90c8dd b9ce707c 3a3a5978     r......:|p..xY::
24022890:	b9ce6d6d 39a64580 b9ce04a8 b89efc92     mm...E.9........
240228a0:	b9cd36b3 b9f4f5d6 b9cc044e ba607d12     .6......N....}`.
240228b0:	b9ca6e6e baa2da24 b9c87630 bad4f7ad     nn..$...0v......
240228c0:	b9c61ce5 bb033f76 b9c36409 bb1babf6     ....v?...d......
240228d0:	b9c04d4e bb33b5a0 b9bcda8a bb4b50f2     NM....3......PK.
240228e0:	b9b90dc5 bb6272ab b9b4e92f bb790fd0     .....rb./.....y.
240228f0:	b9b06f1c bb878ed9 b9aba214 bb9248fa     .o...........H..
24022900:	b9a684bb bb9cb146 b9a119e3 bba6c2e5     ....F...........
24022910:	b99b647f bbb0792d b995679c bbb9cfa7     .d..-y...g......
24022920:	b98f2672 bbc2c20d b988a456 bbcb4c53     r&......V...SL..
24022930:	b981e4b6 bbd36a9f b975d643 bbdb1950     .....j..C.u.P...
24022940:	b9677671 bbe25503 b958b17a bbe91a90     qvg..U..z.X.....
24022950:	b9498efc bbef6707 b93a16c9 bbf537bf     ..I..g....:..7..
24022960:	b92a50d1 bbfa8a44 b91a4523 bbff5c6e     .P*.D...#E..n\..
24022970:	b909fbe8 bc01d626 b8f2fab9 bc03bc1c     ....&...........
24022980:	b8d1a3cc bc055f63 b8b003b6 bc06bf6a     ....c_......j...
24022990:	b88e2b5d bc07dbc2 b8585756 bc08b419     ]+......VWX.....
240229a0:	b8142b1a bc094844 b79fe7b8 bc099838     .+..DH......8...
240229b0:	b63d3593 bc09a40b 37605373 bc096bf7     .5=.....sS`7.k..
240229c0:	37f746db bc08f053 383eb747 bc08319c     .F.7S...G.>8.1..
240229d0:	388097dc bc07306c 38a1763a bc05ed80     ...8l0..:v.8....
240229e0:	38c1e6d6 bc0469b2 38e1da0b bc02a5fe     ...8.i.....8....
240229f0:	3900a041 bc00a37c 3910059c bbfcc6cc     A..9|......9....
24022a00:	391f15bd bbf7ce1e 392dc987 bbf25fd3     ...9......-9._..
24022a10:	393c19fe bbec7f02 394a007b bbe62efe     ..<9....{.J9....
24022a20:	39577671 bbdf734b 3964759e bbd84f9e     qvW9Ks...ud9.O..
24022a30:	3970f80d bbd0c7dd 397cf7f9 bbc8e01d     ..p9......|9....
24022a40:	398437f7 bbc09c9e 3989ad5c bbb801c9     .7.9....\..9....
24022a50:	398ed9ba bbaf142c 3993bac5 bba5d882     ...9,......9....
24022a60:	39984e58 bb9c539c 399c9276 bb928a73     XN.9.S..v..9s...
24022a70:	39a0854f bb88821e 39a42535 bb7c7f98     O..9....5%.9..|.
24022a80:	39a770a9 bb679181 39aa6658 bb5244b5     .p.9..g.Xf.9.DR.
24022a90:	39ad0520 bb3ca413 39af4bfb bb26ba94      ..9..<..K.9..&.
24022aa0:	39b13a1d bb10934f 39b2cee7 baf472ea     .:.9O......9.r..
24022ab0:	39b409dc bac7706c 39b4eab6 ba9a35c3     ...9lp.....9.5..
24022ac0:	39b5715c ba59b2d5 39b59dd7 b9fdc7cf     \q.9..Y....9....
24022ad0:	39b5706c b910aece 39b4e97a 39592427     lp.9....z..9'$Y9
24022ae0:	39b4099e 3a104dda 39b2d19a 3a69b6a5     ...9.M.:...9..i:
24022af0:	39b14251 3aa12be8 39af5cdd 3acd0320     QB.9.+.:.\.9 ..:
24022b00:	39ad2281 3af84bbd 39aa94a3 3b117874     .".9.K.:...9tx.;
24022b10:	39a7b4d4 3b266f11 39a484c9 3b3affa8     ...9.o&;...9..:;
24022b20:	39a10662 3b4f2075 399d3ba4 3b62c7e9     b..9u O;.;.9..b;
24022b30:	399926b4 3b75ecc1 3994c9dd 3b8442fd     .&.9..u;...9.B.;
24022b40:	39902787 3b8d4576 398b4241 3b95f99a     .'.9vE.;AB.9...;
24022b50:	39861cb2 3b9e5b66 3980b9a6 3ba666ff     ...9f[.;...9.f.;
24022b60:	397637f9 3bae18c0 396a8d71 3bb56d2a     .7v9...;q.j9*m.;
24022b70:	395e79d8 3bbc60fa 3952038b 3bc2f116     .y^9.`.;..R9...;
24022b80:	39453116 3bc91aa0 39380929 3bcedae9     .1E9...;).89...;
24022b90:	392a9295 3bd42f7e 391cd448 3bd91620     ..*9~/.;H..9 ..;
24022ba0:	390ed557 3bdd8cca 39009ced 3be191b1     W..9...;...9...;
24022bb0:	38e46492 3be52343 38c73983 3be8402a     .d.8C#.;.9.8*@.;
24022bc0:	38a9c766 3beae748 388c1d15 3bed17bb     f..8H..;...8...;
24022bd0:	385c92ea 3beed0e1 3820b6e6 3bf0124e     ..\8...;.. 8N..;
24022be0:	37c987e6 3bf0dbd8 37235f6e 3bf12d86     ...7...;n_#7.-.;
24022bf0:	b6977dd8 3bf107a8 b79ceaae 3bf06abd     .}.....;.....j.;
24022c00:	b8099bb8 3bef5784 b84445ec 3bedcef9     .....W.;.ED....;
24022c10:	b87e5754 3bebd24c b89bd9e1 3be962e3     TW~.L..;.....b.;
24022c20:	b8b81fb7 3be68265 b8d3ef88 3be332a6     ....e..;.....2.;
24022c30:	b8ef3c08 3bdf75b6 b904fc16 3bdb4dd5     .<...u.;.....M.;
24022c40:	b9120b95 3bd6bd78 b91ec65d 3bd1c746     ....x..;]...F..;
24022c50:	b92b2662 3bcc6e13 b93725e7 3bc6b4e3     b&+..n.;.%7....;
24022c60:	b942bf48 3bc09eea b94ded35 3bba2f80     H.B....;5.M../.;
24022c70:	b958aa78 3bb36a2c b962f22f 3bac5299     x.X.,j.;/.b..R.;
24022c80:	b96cbfb5 3ba4ec9c b9760ea2 3b9d3c28     ..l....;..v.(<.;
24022c90:	b97edac8 3b954550 b9839027 3b8d0c4f     ..~.PE.;'...O..;
24022ca0:	b9876dcb 3b849573 b98b04aa 3b77ca4d     .m..s..;....M.w;
24022cb0:	b98e533e 3b65ffe8 b9915826 3b53d4e1     >S....e;&X....S;
24022cc0:	b9941229 3b41529f b9968038 3b2e8297     )....RA;8......;
24022cd0:	b998a162 3b1b6e6c b99a74e4 3b081fce     b...ln.;.t.....;
24022ce0:	b99bfa23 3ae94111 b99d30a3 3ac1f4e9     #....A.:.0.....:
24022cf0:	b99e1818 3a9a6edf b99eb05d 3a658598     .....n.:].....e:
24022d00:	b99ef96b 3a1608e1 b99ef372 398d1e53     k......:r...S..9
24022d10:	b99e9eb7 b80c032d b99dfbb8 b9af7c20     ....-....... |..
24022d20:	b99d0b0e ba264395 b99bcd78 ba742a51     .....C&.x...Q*t.
24022d30:	b99a43e0 baa0a620 b9986f4f bac6c1f1     .C.. ...Oo......
24022d40:	b99650f9 baec5633 b993ea31 bb08a85f     .P..3V..1..._...
24022d50:	b9913c6b bb1acfee b98e493e bb2c9914     k<......>I....,.
24022d60:	b98b126c bb3dfb63 b98799c4 bb4eee99     l...c.=.......N.
24022d70:	b983e146 bb5f6ac1 b97fd609 bb6f6825     F....j_.....%ho.
24022d80:	b9777264 bb7edf48 b96e9c3c bb86e487     drw.H.~.<.n.....
24022d90:	b965585d bb8e0f49 b95babce bb94eca8     ]Xe.I.....[.....
24022da0:	b9519bc4 bb9b7985 b9472d9c bba1b2f4     ..Q..y...-G.....
24022db0:	b93c66d8 bba79629 b9314d30 bbad2093     .f<.)...0M1.. ..
24022dc0:	b925e66f bbb24fc7 b91a388c bbb7218a     o.%..O...8...!..
24022dd0:	b90e4997 bbbb93d7 b9021fbd bbbfa4d5     .I..............
24022de0:	b8eb827f bbc352e0 b8d268f5 bbc69c83     .....R...h......
24022df0:	b8b8ff97 bbc98081 b89f5363 bbcbfdd0     ........cS......
24022e00:	b8857152 bbce1394 b856cceb bbcfc12f     Rq........V./...
24022e10:	b8227fc1 bbd1062d b7dc2aaf bbd1e258     ..".-....*..X...
24022e20:	b7669f4f bbd255a9 b5aa280a bbd2604a     O.f..U...(..J`..
24022e30:	373b51e9 bbd202a1 37c55f4e bbd13d43     .Q;7....N_.7C=..
24022e40:	381626c9 bbd010f6 384920b9 bbce7eb3     .&.8..... I8.~..
24022e50:	387b8498 bbcc87ab 38969cfb bbca2d37     ..{8.......87-..
24022e60:	38af1464 bbc770e5 38c71cc2 bbc45472     d..8.p.....8rT..
24022e70:	38deaa97 bbc0d9c7 38f5b290 bbbd02fe     ...8.......8....
24022e80:	390614f3 bbb8d255 391102ef bbb44a3f     ...9U......9?J..
24022e90:	391b9e1a bbaf6d4d 3925e18d bbaa3e42     ...9Mm....%9B>..
24022ea0:	392fc877 bba4bffe 39394e51 bb9ef58a     w./9....QN99....
24022eb0:	39426eba bb98e215 394b2588 bb9288e8     .nB9.....%K9....
24022ec0:	39536ed8 bb8bed72 395b46f4 bb85133a     .nS9r....F[9:...
24022ed0:	3962aa61 bb7bfbcf 396995eb bb6d626f     a.b9..{...i9obm.
24022ee0:	39700698 bb5e6207 3975f9ab bb4f026d     ..p9.b^...u9m.O.
24022ef0:	397b6cad bb3f4b9f 39802eb4 bb2f45cb     .l{9.K?....9.E/.
24022f00:	398264f1 bb1ef92e 39845838 bb0e6e24     .d.9....8X.9$n..
24022f10:	398607d3 bafb5a54 3987732d bad97d8a     ...9TZ..-s.9.}..
24022f20:	398899d3 bab7571a 39897b7c ba94f839     ...9.W..|{.99...
24022f30:	398a17fc ba64e471 398a6f44 ba1faccd     ...9q.d.Do.9....
24022f40:	398a8174 b9b4d82a 398a4ebe b8aa25a7     t..9*....N.9.%..
24022f50:	3989d78c 393e9c40 39891c53 39e86a77     ...9@.>9S..9wj.9
24022f60:	39881dba 3a384418 3986dc81 3a7bb259     ...9.D8:...9Y.{:
24022f70:	3985598a 3a9f2f8e 398395d5 3ac01503     .Y.9./.:...9...:
24022f80:	39819287 3ae079a8 397ea1b6 3b0026f1     ...9.y.:..~9.&.;
24022f90:	3979a46a 3b0fc136 39743011 3b1f0438     j.y96..;.0t98..;
24022fa0:	396e47e4 3b2de8b5 3967ef3d 3b3c67a9     .Gn9..-;=.g9.g<;
24022fb0:	396129bc 3b4a7a44 3959fb32 3b5819f7     .)a9DzJ;2.Y9..X;
24022fc0:	39526789 3b65406e 394a72f8 3b71e7a0     .gR9n@e;.rJ9..q;
24022fd0:	394221d8 3b7e09be 3939789f 3b84d0a4     .!B9..~;.x99...;
24022fe0:	39307bff 3b8a5484 392730bf 3b8f8e0a     .{09.T.;.0'9...;
24022ff0:	391d9bcf 3b947ae8 3913c23c 3b9918fa     ...9.z.;<..9...;
24023000:	3909a933 3b9d6642 38feabf0 3ba160f2     3..9Bf.;...8.`.;
24023010:	38e99be0 3ba50763 38d42d1c 3ba85816     ...8c..;.-.8.X.;
24023020:	38be6a9e 3bab51c2 38a85f9b 3badf341     .j.8.Q.;._.8A..;
24023030:	38921750 3bb03b9d 38773a2d 3bb22a12     P..8.;.;-:w8.*.;
24023040:	3849f89f 3bb3be04 381c80cc 3bb4f705     ..I8...;...8...;
24023050:	37ddd31d 3bb5d4d7 37829374 3bb6576a     ...7...;t..7jW.;
24023060:	369dc062 3bb67edc b6cda6bb 3bb64b72     b..6.~.;....rK.;
24023070:	b78dccef 3bb5bda5 b7e78d1f 3bb4d618     .......;.......;
24023080:	b8203f1d 3bb39599 b84c3a5c 3bb1fd24     .? ....;\:L.$..;
24023090:	b877a2eb 3bb00dde b89131e0 3badc917     ..w....;.1.....;
240230a0:	b8a6341d 3bab3047 b8bace15 3ba8450e     .4..G0.;.....E.;
240230b0:	b8cef5f0 3ba50937 b8e2a215 3ba17eaf     ....7..;.....~.;
240230c0:	b8f5c945 3b9da78a b9043134 3b9985ff     E......;41.....;
240230d0:	b90d326b 3b951c6e b915e412 3b906d4b     k2..n..;....Km.;
240230e0:	b91e422f 3b8b7b3a b92648e6 3b8648f4     /B..:{.;.H&..H.;
240230f0:	b92df495 3b80d94f b93541c8 3b765e81     ..-.O..;.A5..^v;
24023100:	b93c2d36 3b6a9baf b942b3d2 3b5e7070     6-<...j;..B.pp^;
24023110:	b948d2c2 3b51e344 b94e8765 3b44facf     ..H.D.Q;e.N...D;
24023120:	b953cf58 3b37bdd8 b958a859 3b2a3352     X.S...7;Y.X.R3*;
24023130:	b95d1081 3b1c624c b9610602 3b0e51ec     ..].Lb.;..a..Q.;
24023140:	b9648763 3b000976 b967935a 3ae3207f     c.d.v..;Z.g.. .:
24023150:	b96a28dc 3ac5db63 b96c4712 3aa85280     .(j.c..:.Gl..R.:
24023160:	b96ded6d 3a8a94d5 b96f1b9b 3a5962bd     m.m....:..o..bY:
24023170:	b96fd17f 3a1d6e5d b9700f3d 39c2d51b     ..o.]n.:=.p....9
24023180:	b96fd526 3915d510 b96f23e0 b8b29d97     &.o....9.#o.....
24023190:	b96dfc38 b9a3a580 b96c5f3b ba0cea91     8.m.....;_l.....
240231a0:	b96a4e3a ba477e1f b967caad ba80b864     :Nj..~G...g.d...
240231b0:	b964d648 ba9d532f b96172fe bab9818e     H.d./S...ra.....
240231c0:	b95da2f6 bad535ec b9596886 baf062ff     ..]..5...hY..b..
240231d0:	b954c633 bb057de1 b94fbec1 bb1279cd     3.T..}....O..y..
240231e0:	b94a5510 bb1f1f1d b9448c44 bb2b67e3     .UJ.....D.D..g+.
240231f0:	b93e679c bb374e5c b937ea8f bb42cd04     .g>.\N7...7...B.
24023200:	b93118ae bb4dde92 b929f5bd bb587dec     ..1...M...)..}X.
24023210:	b922859e bb62a646 b91acc59 bb6c530b     ..".F.b.Y....Sl.
24023220:	b912ce10 bb757fec b90a8f10 bb7e28dd     ......u......(~.
24023230:	b90213b7 bb83250c b8f2c0f5 bb86f010     .....%..........
24023240:	b8e0f3e3 bb8a73e0 b8cec98a bb8daf06     .....s..........
24023250:	b8bc4b4f bb90a034 b8a982cc bb93463f     OK..4.......?F..
24023260:	b89679ae bb95a025 b88339b7 bb97ad0c     .y..%....9......
24023270:	b85f997a bb996c40 b8387945 bb9add33     z._.@l..Ey8.3...
24023280:	b811269c bb9bff7f b7d36aaa bb9cd2ea     .&.......j......
24023290:	b7847283 bb9d575c b6d6310c bb9d8ce8     .r..\W...1......
240232a0:	3649061c bb9d73c8 374edb0f bb9d0c5a     ..I6.s....N7Z...
240232b0:	37b53358 bb9c5728 380125fb bb9b54db     X3.7(W...%.8.T..
240232c0:	382748c9 bb9a0648 384cef7d bb986c6a     .H'8H...}.L8jl..
240232d0:	387207cf bb96885a 388b3fe8 bb945b5b     ..r8Z....?.8[[..
240232e0:	389d22f8 bb91e6ce 38aea48b bb8f2c3c     .".8.......8<,..
240232f0:	38bfbc47 bb8c2d4d 38d06215 bb88ebc4     G..8M-...b.8....
24023300:	38e08e19 bb85698c 38f038cb bb81a8a8     ...8.i...8.8....
24023310:	38ff5ada bb7b5678 3906f6a6 bb72e70e     .Z.8xV{....9..r.
24023320:	390df4b6 bb6a07c2 3914a472 bb60bd7c     ...9..j.r..9|.`.
24023330:	391b02d7 bb570d4f 39210d07 bb4cfc7f     ...9O.W...!9..L.
24023340:	3926c061 bb429078 392c1a64 bb37ced3     a.&9x.B.d.,9..7.
24023350:	393118bc bb2cbd45 3935b957 bb2161b1     ..19E.,.W.59.a!.
24023360:	3939fa47 bb15c20d 393dd9cc bb09e470     G.99......=9p...
24023370:	39415666 bafb9e13 39446ebd bae31039     fVA9.....nD99...
24023380:	394721b8 baca2c00 39496e5f bab0fe3a     .!G9.,.._nI9:...
24023390:	394b53f8 ba9793b9 394cd210 ba7bf2ed     .SK9......L9..{.
240233a0:	394de845 ba4878da 394e9689 ba14d33a     E.M9.xH...N9:...
240233b0:	394edceb b9c237fe 394ebbb7 b935b444     ..N9.7....N9D.5.
240233c0:	394e3375 37c3f9a4 394d44d8 3965c409     u3N9...7.DM9..e9
240233d0:	394bf0bd 39d8da63 394a3843 3a1efb42     ..K9c..9C8J9B..:
240233e0:	39481cae 3a51026d 39459f77 3a813525     ..H9m.Q:w.E9%5.:
240233f0:	3942c243 3a998d6b 393f86f2 3ab17e4e     C.B9k..:..?9N~.:
24023400:	393bef80 3ac8fc3b 3937fe21 3adffbff     ..;9;..:!.79...:
24023410:	3933b524 3af672a7 392f171c 3b062ac5     $.39.r.:../9.*.;
24023420:	392a26a5 3b10cd2d 3924e69e 3b1b1b98     .&*9-..;..$9...;
24023430:	391f59fa 3b25113a 391983c8 3b2ea976     .Y.9:.%;...9v..;
24023440:	39136750 3b37dfeb 390d07e6 3b40b067     Pg.9..7;...9g.@;
24023450:	39066906 3b4916fa 38ff1c85 3b510fdb     .i.9..I;...8..Q;
24023460:	38f0f693 3b58978f 38e267c7 3b5faacf     ...8..X;.g.8.._;
24023470:	38d377dd 3b66468f 38c42eb3 3b6c6804     .w.8.Ff;...8.hl;
24023480:	38b49457 3b720ca7 38a4b0ea 3b77322f     W..8..r;...8/2w;
24023490:	38948cb1 3b7bd694 38843007 3b7ff815     ...8..{;.0.8...;
240234a0:	386746ac 3b81ca97 3845de39 3b835654     .Fg8...;9.E8TV.;
240234b0:	382437c3 3b849ec3 38026464 3b85a38c     .7$8...;dd.8...;
240234c0:	37c0ea74 3b866475 3779ed7c 3b86e16c     t..7ud.;|.y7l..;
240234d0:	36e43ee9 3b871a7c b5aa8a46 3b870fd4     .>.6|..;F......;
240234e0:	b71c215f 3b86c1c4 b7910702 3b8630bc     _!.....;.....0.;
240234f0:	b7d36a94 3b855d51 b80a8d68 3b844837     .j..Q].;h...7H.;
24023500:	b82afbcb 3b82f23f b84af0ad 3b815c5f     ..*.?..;..J._\.;
24023510:	b86a5c95 3b7f0f48 b884982f 3b7aea86     .\j.H..;/.....z;
24023520:	b893aea0 3b764d13 b8a26a6e 3b7139bf     .....Mv;nj...9q;
24023530:	b8b0c49c 3b6bb39c b8beb664 3b65bde8     ......k;d.....e;
24023540:	b8cc3940 3b5f5c1c b8d946e3 3b5891e7     @9...\_;.F....X;
24023550:	b8e5d952 3b51631b b8f1eabe 3b49d3c5     R....cQ;......I;
24023560:	b8fd75ae 3b41e817 b9043a76 3b39a46f     .u....A;v:..o.9;
24023570:	b90971cb 3b310d54 b90e5e87 3b28276b     .q..T.1;.^..k'(;
24023580:	b912fe8b 3b1ef785 b9174fd4 3b158284     .......;.O.....;
24023590:	b91b5094 3b0bcd7e b91eff23 3b01dd8c     .P..~..;#......;
240235a0:	b9225a06 3aef6fd4 b9255fe5 3adac3db     .Z"..o.:._%....:
240235b0:	b9280fa0 3ac5c1e3 b92a6840 3ab074db     ..(....:@h*..t.:
240235c0:	b92c68fd 3a9ae7bc b92e112c 3a852599     .h,....:,....%.:
240235d0:	b92f6065 3a5e7312 b9305663 3a325d7a     e`/..s^:cV0.z]2:
240235e0:	b930f305 3a0620b8 b931366d 39b3a637     ..0.. .:m61.7..9
240235f0:	b93120d8 39362b96 b930b2b4 36af1bf9     . 1..+69..0....6
24023600:	b92feca0 b92a73be b92ecf55 b9aca189     ../..s*.U.......
24023610:	b92d5bd1 ba01a7b9 b92b9327 ba2c8c83     .[-.....'.+...,.
24023620:	b92976a2 ba56ea2b b92707ad ba80560b     .v).+.V...'..V..
24023630:	b92447dd ba94df06 b92138eb baa90627     .G$......8!.'...
24023640:	b91ddcb7 babcc1bd b91a354d bad00863     ........M5..c...
24023650:	b91644d0 bae2d101 b9120d99 baf512b4     .D..............
24023660:	b90d9209 bb03627a b908d4ae bb0befc5     ....zb..........
24023670:	b903d830 bb142d45 b8fd3ec2 bb1c173c     0...E-...>..<...
24023680:	b8f25a33 bb23aa0f b8e708b5 bb2ae253     3Z....#.....S.*.
24023690:	b8db5075 bb31bcda b8cf37b6 bb383697     uP....1..7...68.
240236a0:	b8c2c506 bb3e4cbe b8b5ff03 bb43fcb8     .....L>.......C.
240236b0:	b8a8ec75 bb49441b b89b9442 bb4e20bd     u....DI.B.... N.
240236c0:	b88dfd6a bb5290a8 b8802f04 bb56921d     j.....R../....V.
240236d0:	b864607b bb5a23a2 b84810a3 bb5d43e4     {`d..#Z...H..C].
240236e0:	b82b7d13 bb5ff1d8 b80eb46f bb622ca8     .}+..._.o....,b.
240236f0:	b7e38ac0 bb63f3c1 b7a97d38 bb6546b9     ......c.8}...Fe.
24023700:	b75ebb20 bb662575 b6d52447 bb669006      .^.u%f.G$....f.
24023710:	35146659 bb6686bf 36f92967 bb660a2d     Yf.5..f.g).6-.f.
24023720:	376f1f86 bb651b0d 37b05722 bb63ba5c     ..o7..e."W.7\.c.
24023730:	37e8848e bb61e954 380ffe3e bb5fa95e     ...7T.a.>..8^._.
24023740:	382b51f6 bb5cfc16 3846302e bb59e354     .Q+8..\..0F8T.Y.
24023750:	38608bf3 bb566124 387a589f bb5277c3     ..`8$aV..Xz8.wR.
24023760:	3889c4f2 bb4e2999 389609e7 bb49794a     ...8.)N....8JyI.
24023770:	38a1f567 bb44699e 38ad81dc bb3efd8e     g..8.iD....8..>.
24023780:	38b8a9e8 bb393841 38c36864 bb331cfd     ...8A89.dh.8..3.
24023790:	38cdb867 bb2caf3a 38d79542 bb25f290     g..8:.,.B..8..%.
240237a0:	38e0fa7e bb1eeabc 38e9e408 bb179b9b     ~..8.......8....
240237b0:	38f24dcc bb10092f 38fa344c bb08378b     .M.8/...L4.8.7..
240237c0:	3900ca05 bb002aeb 39043503 baefcf39     ...9.*...5.99...
240237d0:	390759b4 badee3fc 390a36d4 bacd9d24     .Y.9.....6.9$...
240237e0:	390ccb42 babc03c1 390f160f baaa20fb     B..9.......9. ..
240237f0:	3911165e ba97fe30 3912cb91 ba85a4bd     ^..90......9....
24023800:	39143520 ba663c2f 391552af ba40e785      5.9/<f..R.9..@.
24023810:	391623fc ba1b5e85 3916a905 b9eb6886     .#.9.^.....9.h..
24023820:	3916e1d9 b99ff79d 3916ceaf b929208c     ...9.......9. ).
24023830:	39166ff4 b79584aa 3915c62b 39031593     .o.9....+..9...9
24023840:	3914d1ff 398bf3c9 39139447 39d5bdec     ...9...9G..9...9
24023850:	39120df2 3a0f6271 3910401a 3a337278     ...9qb.:.@.9xr3:
24023860:	390e2c02 3a56fd78 390bd2fb 3a79f237     .,.9x.V:...97.y:
24023870:	39093694 3a8e1ff1 39065861 3a9eeaf8     .6.9...:aX.9...:
24023880:	39033a22 3aaf523e 38ffbb62 3abf4df8     ":.9>R.:b..8.M.:
24023890:	38f88a21 3aced692 38f0e497 3adde4de     !..8...:...8...:
240238a0:	38e8cf39 3aec71d0 38e04e88 3afa76ba     9..8.q.:.N.8.v.:
240238b0:	38d7674d 3b03f696 38ce1e7f 3b0a678d     Mg.8...;...8.g.;
240238c0:	38c4793f 3b108b57 38ba7cce 3b165f3d     ?y.8W..;.|.8=_.;
240238d0:	38b02e9b 3b1be0b1 38a59434 3b210d52     ...8...;4..8R.!;
240238e0:	389ab348 3b25e2ed 388f91a3 3b2a5f7a     H..8..%;...8z_*;
240238f0:	3884352a 3b2e8125 387147b2 3b324641     *5.8%..;.Gq8AF2;
24023900:	3859c780 3b35ad61 3841f602 3b38b539     ..Y8a.5;..A89.8;
24023910:	3829df90 3b3b5cb8 38119099 3b3da2f9     ..)8.\;;...8..=;
24023920:	37f22b36 3b3f8750 37c0f639 3b41093d     6+.7P.?;9..7=.A;
24023930:	378f9b3f 3b422873 373c66a3 3b42e4d7     ?..7s(B;.f<7..B;
24023940:	36b35d48 3b433e88 b50bfe40 3b4335c6     H].6.>C;@....5C;
24023950:	b6d56795 3b42cb12 b74bfc5c 3b41ff18     .g....B;\.K...A;
24023960:	b79634b7 3b40d2ae b7c5e5c2 3b3f46e3     .4....@;.....F?;
24023970:	b7f4f9ee 3b3d5ced b811ad23 3b3b1638     .....\=;#...8.;;
24023980:	b8287826 3b387459 b83ed300 3b35790d     &x(.Yt8;..>..y5;
24023990:	b854b2f6 3b322643 b86a0d99 3b2e7e0b     ..T.C&2;..j..~.;
240239a0:	b87ed8cd 3b2a82a9 b8898561 3b26367e     ..~...*;a...~6&;
240239b0:	b8934d03 3b219c14 b89cbec3 3b1cb61d     .M....!;.......;
240239c0:	b8a5d646 3b17876c b8ae8f67 3b1212f0     F...l..;g......;
240239d0:	b8b6e630 3b0c5bbf b8bed6e7 3b066509     0....[.;.....e.;
240239e0:	b8c65e06 3b003219 b8cd7843 3af38caa     .^...2.;Cx.....:
240239f0:	b8d42288 3ae64a80 b8da5a08 3ad8a4e1     ."...J.:.Z.....:
24023a00:	b8e01c3a 3acaa31e b8e566a5 3abc4cb3     :......:.f...L.:
24023a10:	b8ea373f 3aada93d b8ee8c35 3a9ec07e     ?7..=..:5...~..:
24023a20:	b8f263ea 3a8f9a3c b8f5bcfa 3a803e70     .c..<..:....p>.:
24023a30:	b8f8965f 3a616a14 b8faef3c 3a420c2d     _....ja:<...-.B:
24023a40:	b8fcc70a 3a22734c b8fe1d66 3a02af9f     ....Ls":f......:
24023a50:	b8fef245 39c5a2a9 b8ff45ea 3985d12f     E......9.E../..9
24023a60:	b8ff18b6 390c160a b8fe6b5b 374e058e     .......9[k....N7
24023a70:	b8fd3ed0 b8e37e25 b8fb9453 b96f893c     .>..%~..S...<.o.
24023a80:	b8f96d47 b9b61ff0 b8f6cb58 b9f3d2c6     Gm......X.......
24023a90:	b8f3b082 ba185f73 b8f01ecf ba36634d     ....s_......Mc6.
24023aa0:	b8ec18a9 ba53e662 b8e7a0b2 ba70da78     ....b.S.....x.p.
24023ab0:	b8e2b999 ba8698d8 b8dd667b ba946f41     ........{f..Ao..
24023ac0:	b8d7aa76 baa1e9e4 b8d188f7 baaf0273     v...........s...
24023ad0:	b8cb0594 babbb2c9 b8c4240a bac7f510     .........$......
24023ae0:	b8bce845 bad3c395 b8b55659 badf18f7     E.......YV......
24023af0:	b8ad7281 bae9f01e b8a5411c baf44435     .r.......A..5D..
24023b00:	b89cc6ac bafe109a b89407ce bb03a88e     ................
24023b10:	b88b0942 bb0800d5 b881cfdf bb0c0f54     B...........T...
24023b20:	b870c125 bb0fd25b b85d80c2 bb13485c     %.p.[.....].\H..
24023b30:	b849e8c8 bb167000 b8360380 bb194810     ..I..p....6..H..
24023b40:	b821db55 bb1bcf7b b80d7ac0 bb1e0568     U.!.{....z..h...
24023b50:	b7f1d8a4 bb1fe918 b7c87547 bb217a01     ........Gu...z!.
24023b60:	b79ee097 bb22b7c4 b76a5f94 bb23a224     ......".._j.$.#.
24023b70:	b716f02d bb243912 b6873a1d bb247cae     -....9$..:...|$.
24023b80:	3576fdc9 bb246d3f 36c41a09 bb240b33     ..v5?m$....63.$.
24023b90:	37341148 bb235721 3782aa00 bb2251cf     H.47!W#....7.Q".
24023ba0:	37aad68f bb20fc20 37d27a9f bb1f572b     ...7 . ..z.7+W..
24023bb0:	37f982d1 bb1d6425 380fee21 bb1b246f     ...7%d..!..8o$..
24023bc0:	3822ba33 bb189983 38351c9d bb15c513     3."8......58....
24023bd0:	38470c9c bb12a8e0 385881b2 bb0f46da     ..G8......X8.F..
24023be0:	386973a5 bb0ba10d 3879da8e bb07b9a2     .si8......y8....
24023bf0:	3884d76b bb0392e5 388c7499 bafe5e84     k..8.....t.8.^..
24023c00:	3893c15a baf52268 389aba66 baeb76c2     Z..8h"..f..8.v..
24023c10:	38a15c9d bae160fb 38a7a516 bad6e6ac     .\.8.`.....8....
24023c20:	38ad9114 bacc0d9b 38b31e0e bac0dbb9     ...8.......8....
24023c30:	38b849ac bab55721 38bd11ce baa985fe     .I.8!W.....8....
24023c40:	38c17488 ba9d6ebb 38c57023 ba9117b7     .t.8.n..#p.8....
24023c50:	38c9031b ba848786 38cc2c28 ba6f8982     ...8....(,.8..o.
24023c60:	38ceea38 ba55ac3a 38d13c6d ba3b84ad     8..8:.U.m<.8..;.
24023c70:	38d32220 ba212069 38d49af4 ba068d0a      ".8i !....8....
24023c80:	38d5a6a3 b9d7b06c 38d6453a b9a21f1d     ...8l...:E.8....
24023c90:	38d676f1 b95902c9 38d63c28 b8dbc95c     .v.8..Y.(<.8\...
24023ca0:	38d595ac b6467698 38d48431 38ce5082     ...8.vF.1..8.P.8
24023cb0:	38d308f2 3950acb9 38d1250a 399c9f9d     ...8..P9.%.8...9
24023cc0:	38ceda10 39d05624 38cc29a8 3a01b046     ...8$V.9.).8F..:
24023cd0:	38c915ae 3a1ad2fc 38c5a030 3a338702     ...8...:0..8..3:
24023ce0:	38c1cb69 3a4bc06f 38bd99c2 3a6373a8     i..8o.K:...8.sc:
24023cf0:	38b90dd2 3a7a9562 38b42a58 3a888d58     ...8b.z:X*.8X..:
24023d00:	38aef23d 3a937c7d 38a96890 3a9e1304     =..8}|.:.h.8...:
24023d10:	38a39084 3aa84c0f 389d6d76 3ab222e4     ...8.L.:vm.8.".:
24023d20:	389702de 3abb9314 38905456 3ac49853     ...8...:VT.8S..:
24023d30:	38896597 3acd2eae 38823a76 3ad55257     .e.8...:v:.8WR.:
24023d40:	3875adbd 3adcffc2 38667dae 3ae433b5     ..u8...:.}f8.3.:
24023d50:	3856ecf2 3aeaeb1b 384703e9 3af1233b     ..V8...:..G8;#.:
24023d60:	3836cb0e 3af6d991 38264afc 3afc0be6     ..68...:.J&8...:
24023d70:	38158c6a 3b005c28 3804981d 3b026e85     j..8(\.;...8.n.;
24023d80:	37e6ede8 3b043c61 37c463a4 3b05c52b     ...7a<.;.c.7+..;
24023d90:	37a1a33d 3b070872 377d7d2d 3b0805ef     =..7r..;-}}7...;
24023da0:	37378f11 3b08bd7e 36e33f51 3b092f1c     ..77~..;Q?.6./.;
24023db0:	362f49a1 3b095aee b5cdac62 3b09413a     .I/6.Z.;b...:A.;
24023dc0:	b6bdaabc 3b08e263 b7236a98 3b083efa     ....c..;.j#..>.;
24023dd0:	b7675339 3b0757a7 b79536dc 3b062d38     9Sg..W.;.6..8-.;
24023de0:	b7b64c99 3b04c09e b7d6daa9 3b0312eb     .L.....;.......;
24023df0:	b7f6d14e 3b012548 b80b1088 3afdf209     N...H%.;.......:
24023e00:	b81a5d7b 3af91f21 b8294833 3af3d4e0     {]..!..:3H)....:
24023e10:	b837c9a9 3aee168d b845db08 3ae7e7b9     ..7....:..E....:
24023e20:	b85375c5 3ae14c0b b8609395 3ada4770     .uS..L.:..`.pG.:
24023e30:	b86d2e7b 3ad2ddf8 b87940bd 3acb13f6     {.m....:.@y....:
24023e40:	b8826278 3ac2edc8 b887dafc 3aba7018     xb.....:.....p.:
24023e50:	b88d0787 3ab19fa0 b891e5dd 3aa88147     .......:....G..:
24023e60:	b89673eb 3a9f1a04 b89aafd0 3a956f0a     .s.....:.....o.:
24023e70:	b89e97ce 3a8b858d b8a22a5c 3a8162e7     .......:\*...b.:
24023e80:	b8a56619 3a6e190b b8a849d4 3a590fcf     .f....n:.I....Y:
24023e90:	b8aad48b 3a43b53e b8ad0568 3a2e1491     ....>.C:h......:
24023ea0:	b8aedbc7 3a183919 b8b0572f 3a022e32     .....9.:/W..2..:
24023eb0:	b8b17759 39d7fe90 b8b23c2c 39ab6f85     Yw.....9,<...o.9
24023ec0:	b8b2a5b9 397d8c2d b8b2b449 3924320a     ....-.}9I....2$9
24023ed0:	b8b26849 3895fbc4 b8b1c259 b75e34a7     Ih.....8Y....4^.
24023ee0:	b8b0c344 b8cc89d7 b8af6c00 b93dfaec     D........l....=.
24023ef0:	b8adbdb2 b98a6ce4 b8abb9a7 b9b55b4b     .....l......K[..
24023f00:	b8a96156 b9dfb3a2 b8a6b660 ba04b09d     Va......`.......
24023f10:	b8a3ba8e ba1927ee b8a06fcd ba2d35e8     .....'...o...5-.
24023f20:	b89cd833 ba40d0ef b898f5f8 ba53efae     3.....@.......S.
24023f30:	b894cb79 ba66891d b8905b33 ba789483     y.....f.3[....x.
24023f40:	b88ba7c4 ba8504c0 b886b3e5 ba8d6ffc     .............o..
24023f50:	b8818274 ba958823 b8782cc7 ba9d498e     t...#....,x..I..
24023f60:	b86ce587 baa4b0b5 b8613573 baabba61     ..l.....s5a.a...
24023f70:	b8552307 bab2637b b848b4eb bab8a921     .#U.{c....H.!...
24023f80:	b83bf1e3 babe88b4 b82ee0df bac3ffb8     ..;.............
24023f90:	b82188ec bac90c01 b813f129 bacdab89     ..!.....).......
24023fa0:	b80620d9 bad1dc92 b7f03e8f bad59d89     . .......>......
24023fb0:	b7d3e7ac bad8ed28 b7b74bd9 badbca5a     ....(....K..Z...
24023fc0:	b79a79ff bade3442 b77b0209 bae02a44     .y..B4....{.D*..
24023fd0:	b740dfb8 bae1ac02 b706aace bae2b959     ..@.........Y...
24023fe0:	b69901e5 bae3525b b593fd27 bae37756     ....[R..'...Vw..
24023ff0:	361cef66 bae328e2 36c12925 bae267b6     f..6.(..%).6.g..
24024000:	37196de8 bae134db 3751aba0 badf9187     .m.7.4....Q7....
24024010:	378498ff badd7f22 379ff2e3 badaff59     ...7"......7Y...
24024020:	37bad61c bad813fe 37d535ab bad4bf23     ...7.....5.7#...
24024030:	37ef04d5 bad10312 38041ba0 bacce235     ...7.......85...
24024040:	38106078 bac85f32 381c4b2a bac37cdc     x`.82_..*K.8.|..
24024050:	3827d61f babe3e25 3832fbfd bab8a647     ..'8%>....28G...
24024060:	383db7a4 bab2b88b 3848042c baac7866     ..=8....,.H8fx..
24024070:	3851dcf1 baa5e981 385b3d8f ba9f0f94     ..Q8.....=[8....
24024080:	386421e4 ba97ee85 386c8615 ba908a5a     .!d8......l8Z...
24024090:	3874668d ba88e722 387bbffb ba810921     .ft8".....{8!...
240240a0:	388147ad ba71e94d 388468fa ba615c2f     .G.8M.q..h.8/\a.
240240b0:	388742ac ba5073d9 3889d3b0 ba3f3963     .B.8.sP....8c9?.
240240c0:	388c1b1e ba2db5ff 388e1830 ba1bf2fa     ...8..-.0..8....
240240d0:	388fca49 ba09f9af 389130f4 b9efa723     I..8.....0.8#...
240240e0:	38924be1 b9cb142a 38931ae8 b9a64d6f     .K.8*......8oM..
240240f0:	38939e07 b98165ee 3893d564 b938e12c     ...8.e..d..8,.8.
24024100:	3893c14b b8de010c 3893622f b8153db8     K..8..../b.8.=..
24024110:	3892b8a6 38103394 3891c56d 38d9df32     ...8.3.8m..82..8
24024120:	38908965 3935344e 388f0595 397cb718     e..8N459...8..|9
24024130:	388d3b24 39a1aa55 388b2b5c 39c4752b     $;.8U..9\+.8+u.9
24024140:	3888d7aa 39e6ab17 3886419d 3a041dbf     ...8...9.A.8...:
24024150:	38836adf 3a148b1b 3880553c 3a2495c3     .j.8...:<U.8..$:
24024160:	387a053f 3a343617 3872ea1a 3a4364b8     ?.z8.64:..r8.dC:
24024170:	386b5d4a 3a521a8c 38636348 3a6050c1     J]k8..R:Hcc8.P`:
24024180:	385b00b8 3a6e00cd 38523a77 3a7b2474     ..[8..n:w:R8t${:
24024190:	38491581 3a83dae3 383f9706 3a89d79e     ..I8...:..?8...:
240241a0:	3835c457 3a8f85c4 382ba2e9 3a94e2d9     W.58...:..+8...:
240241b0:	38213859 3a99ec9d 38168a55 3a9ea0ea     Y8!8...:U..8...:
240241c0:	380b9eb2 3aa2fde0 38007b52 3aa701c0     ...8...:R{.8...:
240241d0:	37ea4c66 3aaaaaed 37d34ac1 3aadf818     fL.7...:.J.7...:
240241e0:	37bbfde7 3ab0e815 37a47227 3ab379d9     ...7...:'r.7.y.:
240241f0:	378cb3da 3ab5aca8 37699ebb 3ab77fe7     ...7...:..i7...:
24024200:	3739a239 3ab8f32f 37098add 3aba0643     9.97/..:...7C..:
24024210:	36b2e2c1 3abab924 3625b930 3abb0c05     ...6$..:0.%6...:
24024220:	b4ccc03c 3abaff34 b657cd95 3aba934b     <...4..:..W.K..:
24024230:	b6ca43ff 3ab9c906 b713da43 3ab8a158     .C.....:C...X..:
24024240:	b7420505 3ab71d49 b76f8b6a 3ab53e32     ..B.I..:j.o.2>.:
24024250:	b78e2b9e 3ab30584 b7a42944 3ab074e4     .+.....:D)...t.:
24024260:	b7b9b40c 3aad8e10 b7cec191 3aaa530b     .......:.....S.:
24024270:	b7e347c6 3aa6c5ec b7f73cf0 3aa2e8f9     .G.....:.<.....:
24024280:	b8054bd6 3a9ebe9d b80ea779 3a9a495c     .K.....:y...\I.:
24024290:	b817ad0d 3a958bf6 b820586e 3a908936     .......:nX .6..:
240242a0:	b828a5b0 3a8b4405 b830911b 3a85bf7b     ..(..D.:..0.{..:
240242b0:	b838172f 3a7ffd84 b83f349d 3a740a3b     /.8....:.4?.;.t:
240242c0:	b845e65f 3a67abd6 b84c299b 3a5ae93b     _.E...g:.)L.;.Z:
240242d0:	b851fbbf 3a4dc980 b8575a70 3a4053d7     ..Q...M:pZW..S@:
240242e0:	b85c4393 3a328f9e b860b54a 3a24844a     .C\...2:J.`.J.$:
240242f0:	b864adfc 3a16396b b8682c4b 3a07b6a6     ..d.k9.:K,h....:
24024300:	b86b2f1c 39f20766 b86db596 39d450b4     ./k.f..9..m..P.9
24024310:	b86fbf1d 39b658d2 b8714b56 39982f68     ..o..X.9VKq.h/.9
24024320:	b8725a2d 3973c844 b872ebc4 39370d50     -Zr.D.s9..r.P.79
24024330:	b8730088 38f49a5e b872991c 38769ba1     ..s.^..8..r...v8
24024340:	b871b666 359ca77c b870598a b86b7450     f.q.|..5.Yp.Ptk.
24024350:	b86e83e8 b8ecfc22 b86c371c b9318bd7     ..n."....7l...1.
24024360:	b86974fc b96be911 b8663f9b b992bc7f     .ti...k..?f.....
24024370:	b862993c b9af0fa6 b85e8463 b9cae032     <.b.....c.^.2...
24024380:	b85a03c2 b9e620a8 b8551a3f ba0061f8     ..Z.. ..?.U..a..
24024390:	b84fcaf4 ba0d5ea8 b84a192a ba1a003b     ..O..^..*.J.;...
240243a0:	b844085a ba2640c0 b83d9c1f ba321a82     Z.D..@&...=...2.
240243b0:	b836d84b ba3d8808 b82fc0cf ba488415     K.6...=.../...H.
240243c0:	b82859c6 ba5309b0 b820a767 ba5d1427     .Y(...S.g. .'.].
240243d0:	b818ae12 ba669f08 b8107240 ba6fa62c     ......f.@r..,.o.
240243e0:	b807f888 ba7825b5 b7fe8b2e ba800d07     .....%x.........
240243f0:	b7ecbc65 ba83bffa b7da8e6e ba872a34     e.......n...4*..
24024400:	b7c80b21 ba8a4a60 b7b53c6d ba8d1f52     !...`J..m<..R...
24024410:	b7a22c61 ba8fa7fe b78ee51e ba91e398     a,..............
24024420:	b776e19a ba93d159 b74fb35a ba9570c0     ..v.Y...Z.O..p..
24024430:	b72853ec ba96c167 b700d7bd ba97c31a     .S(.g...........
24024440:	b6b2a657 ba9875be b6476a08 ba98d96f     W....u...jG.o...
24024450:	b5281e8c ba98ee79 35e5154e ba98b532     ..(.y...N..52...
24024460:	3686fee8 ba982e35 36d401ec ba975a2d     ...65......6-Z..
24024470:	371013f9 ba963a0b 3735a59c ba94cec0     ...7.:....57....
24024480:	375aa35f ba931978 377efb16 ba911b82     _.Z7x.....~7....
24024490:	37914d93 ba8ed647 37a2b92b ba8c4b64     .M.7G...+..7dK..
240244a0:	37b3b7ed ba897c85 37c441cc ba866b7b     ...7.|...A.7{k..
240244b0:	37d44ef1 ba831a40 37e3d7de ba7f15c7     .N.7@......7....
240244c0:	37f2d55b ba777f1c 3800a03d ba6f7518     [..7..w.=..8.uo.
240244d0:	3807895b ba66fc83 380e22ec ba5e1a54     [..8..f..".8T.^.
240244e0:	381469fd ba54d3b5 381a5bd3 ba4b2df7     .i.8..T..[.8.-K.
240244f0:	381ff5da ba412e9a 382535b4 ba36db3f     ...8..A..5%8?.6.
24024500:	382a1934 ba2c39aa 382e9e60 ba214fc5     4.*8.9,.`..8.O!.
24024510:	3832c36d ba16238e 383686c6 ba0abb22     m.28.#....68"...
24024520:	3839e713 b9fe3962 383ce320 b9e69cfc     ..98b9.. .<8....
24024530:	383f79fd b9ceadbe 3841aae9 b9b6785f     .y?8......A8_x..
24024540:	38437559 b99e09b5 3844d8f5 b9856e96     YuC8......D8.n..
24024550:	3845d5a2 b95967c5 38466b71 b927ccec     ..E8.gY.qkF8..'.
24024560:	38469aad b8ec4c78 384663d4 b8891a93     ..F8xL...cF8....
24024570:	3845c799 b798db1a 3844c6de 37f0b2a1     ..E8......D8...7
24024580:	384362bd 389dde07 38419c7e 38feac43     .bC8...8~.A8C..8
24024590:	383f7599 392f338a 383cefb6 395e6f74     .u?8.3/9..<8to^9
240245a0:	383a0cad 39867951 3836ce86 399d5321     ..:8Qy.9..68!S.9
240245b0:	3833376c 39b3ba0d 382f49bb 39c9a347     l738...9.I/8G..9
240245c0:	382b07f8 39df0447 382674cc 39f3d2de     ..+8G..9.t&8...9
240245d0:	3821930c 3a0402a1 381c65aa 3a0dc8fa     ..!8...:.e.8...:
240245e0:	3816efc2 3a1737f7 38113489 3a204b3f     ...8.7.:.4.8?K :
240245f0:	380b3759 3a28feb5 3804fba6 3a314e70     Y7.8..(:...8pN1:
24024600:	37fd0a02 3a3936bf 37efae24 3a40b430     ...7.69:$..70.@:
24024610:	37e1eb31 3a47c38a 37d3c8db 3a4e61d1     1..7..G:...7.aN:
24024620:	37c54ee6 3a548c48 37b68550 3a5a4072     .N.7H.T:P..7r@Z:
24024630:	37a7741d 3a5f7c14 3798237e 3a643d2f     .t.7.|_:~#.7/=d:
24024640:	37889baf 3a68820d 3771c9f4 3a6c4935     ...7..h:..q75Il:
24024650:	37520f65 3a6f9173 3732188a 3a7259d4     e.R7s.o:..27.Yr:
24024660:	3711f623 3a74a1ad 36e371dc 3a766891     #..7..t:.q.6.hv:
24024670:	36a2e355 3a77ae57 3644c3fa 3a78731b     U..6W.w:..D6.sx:
24024680:	35883baf 3a78b73a b56fa87f 3a787b50     .;.5:.x:..o.P{x:
24024690:	b63b1304 3a77c03b b69c8e5e 3a76871f     ..;.;.w:^.....v:
240246a0:	b6dae40f 3a74d156 b70c35c8 3a72a080     ....V.t:.5....r:
240246b0:	b72a8337 3a6ff673 b7484b6d 3a6cd545     7.*.s.o:mKH.E.l:
240246c0:	b7657fe3 3a693f46 b7810932 3a6536fc     ..e.F?i:2....6e:
240246d0:	b78efa9d 3a60bf27 b79c8d8b 3a5bdaba     ....'.`:......[:
240246e0:	b7a9bb8a 3a568cde b7b67e66 3a50d8ec     ......V:f~....P:
240246f0:	b7c2d032 3a4ac269 b7ceab41 3a444d10     2...i.J:A....MD:
24024700:	b7da0a26 3a3d7cbe b7e4e7c8 3a365581     &....|=:.....U6:
24024710:	b7ef3f49 3a2edb86 b7f90c26 3a271325     I?.....:&...%.':
24024720:	b8012512 3a1f00d4 b8057aa7 3a16a929     .%.....:.z..)..:
24024730:	b8098508 3a0e10da b80d4293 3a053caf     .......:.B...<.:
24024740:	b810b1cc 39f86327 b813d161 39e5e8f8     ....'c.9a......9
24024750:	b816a035 39d314f5 b8191d4a 39bff149     5......9J...I..9
24024760:	b81b47d5 39ac8851 b81d1f32 3998e46a     .G..Q..92...j..9
24024770:	b81ea2ef 3985100b b81fd2c0 39622b68     .......9....h+b9
24024780:	b820ae86 3939ffc7 b8213652 3911b232     .. ...99R6!.2..9
24024790:	b8216a58 38d2af2e b8214afd 388209b6     Xj!....8.J!....8
240247a0:	b820d8d1 37c67531 b820148a b77367c6     .. .1u.7.. ..gs.
240247b0:	b81eff0a b85bd8fc b81d9958 b8bcb92a     ......[.X...*...
240247c0:	b81be4a7 b90555be b819e252 b92bce51     .....U..R...Q.+.
240247d0:	b81793d4 b951b348 b814fad1 b976f1f9     ....H.Q.......v.
240247e0:	b8121912 b98dbc20 b80ef07d b99f9a2f     .... ...}.../...
240247f0:	b80b8325 b9b10a93 b807d32f b9c204fa     %......./.......
24024800:	b803e2ee b9d28158 b7ff698d b9e277f0     ....X....i...w..
24024810:	b7f6967c b9f1e159 b7ed51ec ba005b3b     |...Y....Q..;[..
24024820:	b7e3a152 ba077847 b7d98a4f ba0e4499     R...Gx..O....D..
24024830:	b7cf12ad ba14bd2e b7c44072 ba1adf31     ........r@..1...
24024840:	b7b919b5 ba20a7ff b7ada4b2 ba261525     ...... .....%.&.
24024850:	b7a1e7d5 ba2b2464 b795e98d ba2fd3b0     ....d$+......./.
24024860:	b789b074 ba342133 b77a8657 ba380b4d     t...3!4.W.z.M.8.
24024870:	b76150f0 ba3b9091 b747ce24 ba3eafc9     .Pa...;.$.G...>.
24024880:	b72e0ba6 ba4167f8 b714171d ba43b855     .....gA.....U.C.
24024890:	b6f3fc6a ba45a04c b6bf9d3e ba471f88     j...L.E.>.....G.
240248a0:	b68b2c06 ba4835df b62d87d8 ba48e367     .,...5H...-.g.H.
240248b0:	b589ffb9 ba492867 350c298f ba49055e     ....g(I..).5^.I.
240248c0:	360a61f0 ba487afb 3670d283 ba478a29     .a.6.zH...p6).G.
240248d0:	36ab144e ba463400 36dd18ce ba4479ce     N..6.4F....6.yD.
240248e0:	37072ef7 ba425d12 371f65b2 ba3fdf7b     ...7.]B..e.7{.?.
240248f0:	373724b9 ba3d02e8 374e6086 ba39c967     .$77..=..`N7g.9.
24024900:	37650de6 ba36352f 377b21f3 ba3248a7     ..e7/56..!{7.H2.
24024910:	37884918 ba2e065e 3792aa4e ba29710d     .I.7^...N..7.q).
24024920:	379cafb5 ba248b8e 37a654bc ba1f58e8     ...7..$..T.7.X..
24024930:	37af94f0 ba19dc41 37b86c2c ba1418df     ...7A...,l.7....
24024940:	37c0d67c ba0e122c 37c8d034 ba07cbab     |..7,...4..7....
24024950:	37d055da ba0148fc 37d76446 b9f51bb3     .U.7.H..Fd.7....
24024960:	37ddf886 b9e73c2a 37e40ff6 b9d8fb29     ...7*<.....7)...
24024970:	37e9a829 b9ca60a9 37eebeff b9bb74b7     )..7.`.....7.t..
24024980:	37f352a4 b9ac3f8f 37f76187 b99cc976     .R.7.?...a.7v...
24024990:	37faea54 b98d1acf 37fdec08 b97a7821     T..7.......7!xz.
240249a0:	380032f6 b95a6b60 38012bc5 b93a2073     .2.8`kZ..+.8s :.
240249b0:	3801e054 b919a858 380250b8 b8f22860     T..8X....P.8`(..
240249c0:	38027d1b b8b0e9cd 380265ce b85f6dcc     .}.8.....e.8.m_.
240249d0:	38020b4a b7bac4fe 38016e26 37102e93     J..8....&n.8...7
240249e0:	38008f17 38249abb 37feddf2 389204db     ...8..$8...7...8
240249f0:	37fc1d8c 38d10c3e 37f8df34 3907a205     ...7>..84..7...9
24024a00:	37f5254f 392646b2 37f0f295 394464ff     O%.7.F&9...7.dD9
24024a10:	37ec49e9 3961ee42 37e72e70 397ed40b     .I.7B.a9p..7..~9
24024a20:	37e1a37d 398d843d 37dbac9b 399b3f09     }..7=..9...7.?.9
24024a30:	37d54d8c 39a893df 37ce8a3a 39b57c83     .M.7...9:..7.|.9
24024a40:	37c766c8 39c1f2f0 37bfe778 39cdf168     .f.7...9x..7h..9
24024a50:	37b810bb 39d97274 37afe725 39e470e8     ...7tr.9%..7.p.9
24024a60:	37a76f79 39eee7dd 379eae93 39f8d2c8     yo.7...9...7...9
24024a70:	3795a962 3a0116ae 378c650a 3a0579d7     b..7...:.e.7.y.:
24024a80:	3782e6b0 3a09910c 3772673c 3a0d5aaa     ...7...:<gr7.Z.:
24024a90:	375ea258 3a10d533 374a897d 3a13ff58     X.^73..:}.J7X..:
24024aa0:	3736279f 3a16d7f7 372187ba 3a195e16     .'67...:..!7.^.:
24024ab0:	370cb4e1 3a1b90e9 36ef7455 3a1d6fd2     ...7...:Ut.6.o.:
24024ac0:	36c54569 3a1efa5d 369af32f 3a203043     iE.6]..:/..6C0 :
24024ad0:	36612798 3a21116b 360c7a8d 3a219de5     .'a6k.!:.z.6..!:
24024ae0:	35602c11 3a21d5f0 b4dfdd41 3a21b9f4     .,`5..!:A.....!:
24024af0:	b5dedd25 3a214a87 b6422367 3a208863     %....J!:g#B.c. :
24024b00:	b689f83b 3a1f7473 b6b25663 3a1e0fc6     ;...st.:cV.....:
24024b10:	b6da1818 3a1c5b96 b70094da 3a1a5942     .....[.:....BY.:
24024b20:	b713bc08 3a180a53 b7267840 3a157071     ....S..:@x&.qp.:
24024b30:	b738c07b 3a128d6f b74a8be5 3a0f633f     {.8.o..:..J.?c.:
24024b40:	b75bd21f 3a0bf3f7 b76c8b00 3a0841cb     ..[....:..l..A.:
24024b50:	b77caeb8 3a044f11 b7861ae6 3a001e39     ..|..O.:....9..:
24024b60:	b78d8c99 39f763a8 b794a91b 39ee1917     .....c.9.......9
24024b70:	b79b6d44 39e46243 b7a1d612 39da44e1     Dm..Cb.9.....D.9
24024b80:	b7a7e0d1 39cfc6d2 b7ad8aed 39c4ee23     .......9....#..9
24024b90:	b7b2d20f 39b9c105 b7b7b417 39ae45c2     .......9.....E.9
24024ba0:	b7bc2f20 39a282d0 b7c04173 39967ebb      /.....9sA...~.9
24024bb0:	b7c3e99f 398a4021 b7c7266c 397b9b70     ....!@.9l&..p.{9
24024bc0:	b7c9f6cb 39625c96 b7cc59f8 3948d156     .....\b9.Y..V.H9
24024bd0:	b7ce4f62 392f076f b7cfd6b8 39150c99     bO..o./9.......9
24024be0:	b7d0efd9 38f5dd30 b7d19ae5 38c1767e     ....0..8....~v.8
24024bf0:	b7d1d82f 388d0072 b7d1a846 38312cc1     /...r..8F....,18
24024c00:	b7d10bf5 37914d8d b7d0043a b6fadab6     .....M.7:.......
24024c10:	b7ce9242 b806a47a b7ccb783 b86d0039     B...z.......9.m.
24024c20:	b7ca758a b8a91d80 b7c7ce3a b8db110d     .u......:.......
24024c30:	b7c4c387 b90620fa b7c157a7 b91e4bee     ..... ...W...K..
24024c40:	b7bd8d03 b935fd8d b7b96623 b94d2a53     ......5.#f..S*M.
24024c50:	b7b4e5c7 b963c707 b7b00ecf b979c8e5     ......c.......y.
24024c60:	b7aae452 b98792b8 b7a5697a b991e94e     R.......zi..N...
24024c70:	b79fa1ab b99be36a b799905a b9a57c6e     ....j...Z...n|..
24024c80:	b7933927 b9aeb001 b78c9fcb b9b779fe     '9...........y..
24024c90:	b785c81d b9bfd67f b77d6c2b b9c7c1e1     ........+l}.....
24024ca0:	b76edb68 b9cf38bd b75fe645 b9d637ed     h.n..8..E._..7..
24024cb0:	b7509523 b9dcbc97 b740f08e b9e2c41b     #.P.......@.....
24024cc0:	b7310127 b9e84c25 b720cfaf b9ed52a2     '.1.%L.... ..R..
24024cd0:	b71064fe b9f1d5cb b6ff93f1 b9f5d41a     .d..............
24024ce0:	b6de0f1d b9f94c57 b6bc4d6a b9fc3d8b     ....WL..jM...=..
24024cf0:	b69a60c9 b9fea711 b670b640 ba00443d     .`......@.p.=D..
24024d00:	b62c9c95 ba00f0db b5d13020 ba015972     ..,..... 0..rY..
24024d10:	b5132fa9 ba017e3e 34f52788 ba015f9a     ./..>~...'.4._..
24024d20:	35c33007 ba00fe01 3623eb46 ba005a17     .0.5....F.#6.Z..
24024d30:	36657d3a b9fee932 36931681 b9fc9cd7     :}e62......6....
24024d40:	36b2ed2f b9f9d123 36d232ea b9f68858     /..6#....2.6X...
24024d50:	36f0d858 b9f2c4f8 37076745 b9ee89bd     X..6....Eg.7....
24024d60:	37160383 b9e9d9a1 372439e4 b9e4b7d0     ...7.....9$7....
24024d70:	373203aa b9df27b2 373f5a56 b9d92ce0     ..27.'..VZ?7.,..
24024d80:	374c37b7 b9d2cb23 375895d6 b9cc0674     .7L7#.....X7t...
24024d90:	37646f1d b9c4e2fc 376fbe2e b9bd650a     .od7......o7.e..
24024da0:	377a7e0d b9b5911a 37825501 b9ad6bca     .~z7.....U.7.k..
24024db0:	37871ee5 b9a4f9dd 378b9a9e b99c4033     ...7.......73@..
24024dc0:	378fc663 b99343cd 3793a089 b98a09c2     c..7.C.....7....
24024dd0:	3797278d b9809749 379a5a26 b96de34f     .'.7I...&Z.7O.m.
24024de0:	379d3732 b95a3c6d 379fbdbd b94644b0     27.7m<Z....7.DF.
24024df0:	37a1ed01 b9320714 37a3c471 b91d8e85     ...7..2.q..7....
24024e00:	37a5439e b908e613 37a66a57 b8e8318b     .C.7....Wj.7.1..
24024e10:	37a7388a b8be636a 37a7ae6a b89477ce     .8.7jc..j..7.w..
24024e20:	37a7cc3f b855097c 37a79290 b8014034     ?..7|.U....74@..
24024e30:	37a70204 b736fcc7 37a61b7c 37153a30     ...7..6.|..70:.7
24024e40:	37a4dff4 37ef7d0c 37a350a1 384966d7     ...7.}.7.P.7.fI8
24024e50:	37a16edd 388d0f22 379f3c28 38b4de2b     .n.7"..8(<.7+..8
24024e60:	379cba2b 38dc0cbd 3799eab8 390143b4     +..7...8...7.C.9
24024e70:	3796cfc8 39141daa 37936b6d 39268b18     ...7...9mk.7..&9
24024e80:	378fbff2 39388315 378bcfa9 3949fd0b     ...7..89...7..I9
24024e90:	37879d14 395af0ae 37832ad4 396b560b     ...7..Z9.*.7.Vk9
24024ea0:	377cf742 397b257c 377324a4 39852be5     B.|7|%{9.$s7.+.9
24024eb0:	3768e3a5 398c72ff 375e3a52 399364d5     ..h7.r.9R:^7.d.9
24024ec0:	37532ef2 3999fe4c 3747c7ea 39a03c89     ..S7L..9..G7.<.9
24024ed0:	373c0bb6 39a61ce7 3730010b 39ab9cf0     ..<7...9..07...9
24024ee0:	3723aeae 39b0ba65 37171b89 39b57341     ..#7e..9...7As.9
24024ef0:	370a4e91 39b9c5b7 36fa9dae 39bdb02d     .N.7...9...6-..9
24024f00:	36e046eb 39c13149 36c5a728 39c447e5     .F.6I1.9(..6.G.9
24024f10:	36aaccc0 39c6f317 368fc61e 39c93230     ...6...9...602.9
24024f20:	36694340 39cb04b7 3632db4a 39cc6a6f     @Ci6...9J.26oj.9
24024f30:	35f8e1ea 39cd6350 358c414f 39cdef92     ...5Pc.9OA.5...9
24024f40:	348034a4 39ce0f9f b5170581 39cdc41c     .4.4...9.......9
24024f50:	b5b63755 39cd0de5 b60fed26 39cbee0a     U7.....9&......9
24024f60:	b6441b1e 39ca65d4 b6778b67 39c876bd     ..D..e.9g.w..v.9
24024f70:	b695122d 39c62273 b6ade67a 39c36ada     -...s".9z....j.9
24024f80:	b6c6366b 39c05201 b6ddf629 39bcda27     k6...R.9)...'..9
24024f90:	b6f51a3c 39b905bf b705cbc7 39b4d75f     <......9...._..9
24024fa0:	b710b1bc 39b051d3 b71b39df 39ab7804     .....Q.9.9...x.9
24024fb0:	b7255f4a 39a64d0b b72f1d53 39a0d41f     J_%..M.9S./....9
24024fc0:	b7386f9b 399b10a3 b74151e1 39950613     .o8....9.QA....9
24024fd0:	b749c050 398eb811 b751b738 39882a58     P.I....98.Q.X*.9
24024fe0:	b759333f 398160bc b7603138 3974be64     ?3Y..`.981`.d.t9
24024ff0:	b766ae57 39665383 b76ca814 395788fd     W.f..Sf9..l...W9
24025000:	b7721c28 39486740 b777089a 3938f6b3     (.r.@gH9..w...89
24025010:	b77b6bb1 39293ffb b77f440e 39194bb5     .k{..?)9.D...K.9
24025020:	b781484f 390922b0 b782a843 38f19b4a     OH...".9C...J..8
24025030:	b783c1a0 38d0aae2 b7849450 38af85ce     .......8P......8
24025040:	b785205a 388e3db7 b78565e3 3859c87d     Z ...=.8.e..}.Y8
24025050:	b7856543 381715db b7851ef4 37a90cc2     Ce.....8.......7
24025060:	b784938a 3691e4e6 b783c3c0 b73e9511     .......6......>.
24025070:	b782b07c b7e1fb05 b7815ac2 b831aae3     |........Z....1.
24025080:	b77f8751 b8718cb7 b77bd8f5 b898417a     Q.....q...{.zA..
24025090:	b777ad2f b8b73720 b773070d b8d597fb     /.w. 7....s.....
240250a0:	b76de9bb b8f3553d b76858bf b9083028     ..m.=U...Xh.(0..
240250b0:	b76257bf b91655a5 b75bea8f b924144c     .Wb..U....[.L.$.
240250c0:	b7551559 b93165a4 b74ddc5e b93e4366     Y.U..e1.^.M.fC>.
240250d0:	b74643fe b94aa7a9 b73e50dd b9568cb6     .CF...J..P>...V.
240250e0:	b73607c0 b961ed2f b72d6d8d b96cc40e     ..6./.a..m-...l.
240250f0:	b724874f b9770c7e b71b5a31 b9806110     O.$.~.w.1Z...a..
24025100:	b711eb76 b984f06c b7084080 b9893272     v...l....@..r2..
24025110:	b6fcbd89 b98d2566 b6e8979b b990c7c5     ....f%..........
24025120:	b6d41a6b b9941830 b6bf514a b9971575     k...0...JQ..u...
24025130:	b6aa479b b999be92 b69508d5 b99c12b6     .G..............
24025140:	b67f40da b99e1139 b65433d0 b99fb99e     .@..9....3T.....
24025150:	b6290179 b9a10ba2 b5fb817a b9a20725     y.).....z...%...
24025160:	b5a510bd b9a2ac34 b51dbbd5 b9a2fb12     ....4...........
24025170:	335d4690 b9a2f429 353836bf b9a2980f     .F]3)....685....
24025180:	35b089f3 b9a1e782 36020577 b9a0e37a     ...5....w..6z...
24025190:	362b3a0f b99f8d05 3653ce1b b99de566     .:+6......S6f...
240251a0:	367bad5f b99bee0f 36916213 b999a885     _.{6.....b.6....
240251b0:	36a47fa8 b9971688 36b7261d b99439ee     ...6.....&.6.9..
240251c0:	36c94c7a b99114bb 36daea13 b98da914     zL.6.......6....
240251d0:	36ebf693 b989f938 36fc6a02 b9860791     ...68....j.6....
240251e0:	37061e63 b981d69e 370db3cf b97ad201     c..7.......7..z.
240251f0:	3714f1df b97182e3 371bd557 b967c58d     ...7..q.W..7..g.
24025200:	37225b37 b95d9fd9 372880b8 b95317d1     7["7..]...(7..S.
24025210:	372e4339 b948339a 3733a069 b93cf992     9C.7.3H.i.37..<.
24025220:	37389617 b9317031 373d2274 b9259e0a     ..871p1.t"=7..%.
24025230:	374143b4 b91989d3 3744f876 b90d3a48     .CA7....v.D7H:..
24025240:	37483f87 b900b651 374b17d3 b8e809a7     .?H7Q.....K7....
24025250:	374d80b6 b8ce5990 374f7996 b8b46a5e     ..M7.Y...yO7^j..
24025260:	37510230 b89a4a18 37521a85 b88006c8     0.Q7.J....R7....
24025270:	3752c2ab b84b5ce6 3752fb1b b8169e1d     ..R7.\K...R7....
24025280:	3752c479 b7c3d9fd 37521fa1 b7359458     y.R7......R7X.5.
24025290:	37510d9d 35dbca10 374f8fbf 376b0903     ..Q7...5..O7..k7
240252a0:	374da78a 37dc5846 374b56b4 382101d0     ..M7FX.7.VK7..!8
240252b0:	37489f38 3853299e 3745831b 38824532     8.H7.)S8..E72E.8
240252c0:	374204c3 389a85cb 373e26a5 38b24a9f     ..B7...8.&>7.J.8
240252d0:	3739eb69 38c9880d 373555fb 38e032c7     i.97...8.U57.2.8
240252e0:	37306953 38f63ff9 372b28a8 3905d283     Si07.?.8.(+7...9
240252f0:	37259743 39102bf8 371fb8a6 391a2787     C.%7.+.9...7.'.9
24025300:	37199068 3923c08c 3713224a 392cf2b2     h..7..#9J".7..,9
24025310:	370c7223 3935b9d3 370583ec 393e120f     #r.7..59...7..>9
24025320:	36fcb76b 3945f7c8 36edfb4e 394d67a9     k..6..E9N..6.gM9
24025330:	36dedbfe 39545e87 36cf621e 395ad998     ...6.^T9.b.6..Z9
24025340:	36bf966a 3960d648 36af81c4 3966525c     j..6H.`9...6\Rf9
24025350:	369f2d21 396b4bc3 368ea185 396fc0cd     !-.6.Kk9...6..o9
24025360:	367bd00f 3973b00d 365a1388 3977185c     ..{6..s9..Z6\.w9
24025370:	36381fb8 3979f8dd 361606da 397c50f4     ..86..y9...6.P|9
24025380:	35e7b64f 397e2061 35a35d70 397f671f     O..5a ~9p].5.g.9
24025390:	353e4e41 398012b5 3459b80f 39802ded     AN>5...9..Y4.-.9
240253a0:	b4a13e75 3980059f b55693cf 397f34a7     u>.....9..V..4.9
240253b0:	b5ad958d 397dd97c b5ef10d8 397bfb59     ....|.}9....Y.{9
240253c0:	b617cd5d 39799c26 b637896a 3976be01     ]...&.y9j.7...v9
240253d0:	b656acce 3973634e b6752831 396f8ea8     ..V.Ncs91(u...o9
240253e0:	b6897653 396b42f5 b697f5e2 3966834b     Sv...Bk9....K.f9
240253f0:	b6a60bca 396152ea b6b3b15e 395bb563     .....Ra9^...c.[9
24025400:	b6c0e031 3955ae5e b6cd921d 394f41cc     1...^.U9.....AO9
24025410:	b6d9c153 394873c2 b6e56846 3941487e     S....sH9Fh..~HA9
24025420:	b6f081c8 3939c474 b6fb08f1 3931ec28     ....t.99....(.19
24025430:	b7027c9f 3929c45f b7072739 392151f0     .|.._.)99'...Q!9
24025440:	b70b825c 391899ca b70f8c46 390fa107     \......9F......9
24025450:	b7134367 39066ccf b716a659 38fa04c9     gC...l.9Y......8
24025460:	b719b3ea 38e6ce4b b71c6b12 38d340f1     ....K..8.k...@.8
24025470:	b71ecafc 38bf6790 b720d300 38ab4d30     .....g.8.. .0M.8
24025480:	b72282a8 3896fcda b723d9ab 388281a6     .."....8..#....8
24025490:	b724d7f2 385bcd50 b7257d93 38326de9     ..$.P.[8.}%..m28
240254a0:	b725cad3 3808fb35 b725c026 37bf1659     ..%.5..8&.%.Y..7
240254b0:	b7255e2b 3758ce88 b724a5b5 3650a33c     +^%...X7..$.<.P6
240254c0:	b72397b9 b6deddd2 b7223560 b788d225     ..#.....`5".%...
240254d0:	b7207ffa b7d91222 b71e7901 b8142752     .. ."....y..R'..
240254e0:	b71c2216 b83b2fd7 b7197d06 b8618f19     .".../;..}....a.
240254f0:	b7168bbf b8839904 b7135056 b896030f     ........VP......
24025500:	b70fcd04 b8a7fcb0 b70c0424 b8b97d34     ........$...4}..
24025510:	b707f82f b8ca7c39 b703abc3 b8daf1b3     /...9|..........
24025520:	b6fe432a b8ead5e4 b6f4b8f4 b8fa2174     *C..........t!..
24025530:	b6eabec1 b90466ad b6e05a9b b90b6984     .....f...Z...i..
24025540:	b6d592bc b912161b b6ca6d8a b9186986     .........m...i..
24025550:	b6bef18e b91e6115 b6b32577 b923fa42     .....a..w%..B.#.
24025560:	b6a7100a b92932bf b69ab832 b92e0880     .....2).2.......
24025570:	b68e24ec b93279a6 b6815d44 b9368493     .$...y2.D]....6.
24025580:	b668d0b6 b93a27d4 b64e9ab8 b93d6243     ..h..':...N.Cb=.
24025590:	b63426f2 b94032da b61983d4 b94298ec     .&4..2@.......B.
240255a0:	b5fd7f7a b94493eb b5c7d232 b9462390     z.....D.2....#F.
240255b0:	b5921c6c b94747c8 b538f556 b94800bc     l....GG.V.8...H.
240255c0:	b49c2483 b9484ed3 33e1c3fe b9483295     .$...NH....3.2H.
240255d0:	3505b3c5 b947ace0 356e2931 b946beb8     ...5..G.1)n5..F.
240255e0:	35aab1af b945695a 35dd96e6 b943ae2a     ...5ZiE....5*.C.
240255f0:	3607d54f b9418ed3 362069eb b93f0d2f     O..6..A..i 6/.?.
24025600:	36387d0f b93c2b3a 365002ee b938eb2f     .}86:+<...P6/.8.
24025610:	3666f009 b9354f6b 367d395a b9315a87     ..f6kO5.Z9}6.Z1.
24025620:	36896a1a b92d0f34 3693db30 b928705f     .j.64.-.0..6_p(.
24025630:	369deb0f b9238102 36a79512 b91e445c     ...6..#....6\D..
24025640:	36b0d4d4 b918bdb4 36b9a62b b912f081     ...6....+..6....
24025650:	36c20533 b90ce05b 36c9ee4e b90690ea     3..6[...N..6....
24025660:	36d15e1e b90005f5 36d8518c b8f286d0     .^.6.....Q.6....
24025670:	36dec5c9 b8e49a79 36e4b854 b8d64ef2     ...6y...T..6.N..
24025680:	36ea26ed b8c7ac83 36ef0fa2 b8b8bb88     .&.6.......6....
24025690:	36f370cb b8a9847c 36f7490d b89a0feb     .p.6|....I.6....
240256a0:	36fa9753 b88a6675 36fd5ad8 b8752190     S..6uf...Z.6.!u.
240256b0:	36ff931e b8552f2c 37009ffb b835072e     ...6,/U....7..5.
240256c0:	370130bd b814bafe 37017c06 b7e8b7fc     .0.7.....|.7....
240256d0:	3701822c b7a7f6e5 370143aa b74eaa18     ,..7.....C.7..N.
240256e0:	3700c11c b69bd202 36fff68a 3648490b     ...7.......6.IH6
240256f0:	36fde60b 37310546 36fb52ca 37975755     ...6F.17.R.6UW.7
24025700:	36f83f0f 37d5671b 36f4ad68 3809493c     .?.6.g.7h..6<I.8
24025710:	36f0a09f 38275d4e 36ec1bb8 3844e0c7     ...6N]'8...6..D8
24025720:	36e721f6 3861c505 36e1b6d1 387dfbde     .!.6..a8...6..}8
24025730:	36dbddf5 388cbbcf 36d59b4b 389a1583     ...6...8K..6...8
24025740:	36cef2e0 38a704b2 36c7e8fc 38b38341     ...6...8...6A..8
24025750:	36c0820b 38bf8b62 36b8c2a7 38cb178c     ...6b..8...6...8
24025760:	36b0af8c 38d6227e 36a84d9e 38e0a762     ...6~".8.M.6b..8
24025770:	369fa1e2 38eaa17e 3696b179 38f40c95     ...6~..8y..6...8
24025780:	368d81a0 38fce4ac 368417b0 39029316     ...6...8...6...9
24025790:	3674f21c 390666e0 36615676 3909ec3a     ..t6.f.9vVa6:..9
240257a0:	364d6786 390d21d4 3639307c 3910069a     .gM6.!.9|096...9
240257b0:	3624bc98 39129988 3610172c 3914d9e4     ..$6...9,..6...9
240257c0:	35f69716 3916c716 35ccca17 391860aa     ...5...9...5.`.9
240257d0:	35a2ddf6 3919a662 3571d26a 391a9838     ...5b..9j.q58..9
240257e0:	351e046a 391b3638 3494fc93 391b80bd     j..586.9...4...9
240257f0:	b30940e5 391b7826 b4b60e83 391b1d1f     .@..&x.9.......9
24025800:	b52cb096 391a7070 b57d6613 39197308     ..,.pp.9.f}..s.9
24025810:	b5a67f41 3918260a b5cda8cf 39168ab7     A....&.9.......9
24025820:	b5f41c04 3914a27c b60ce2da 39126ef5     ....|..9.....n.9
24025830:	b61f49ac 390ff1cd b6313971 390d2cea     .I.....9q91..,.9
24025840:	b642a975 390a2244 b6539165 3906d3ff     u.B.D".9e.S....9
24025850:	b663e935 39034456 b673a93c 38feeb66     5.c.VD.9<.s.f..8
24025860:	b6816519 38f6d510 b688a295 38ee4aec     .e.....8.....J.8
24025870:	b68f89d3 38e5524c b69617c4 38dbf0d2     ....LR.8.......8
24025880:	b69c498e 38d22c3d b6a21c91 38c80a6e     .I..=,.8....n..8
24025890:	b6a78e61 38bd9189 b6ac9ccc 38b2c7bc     a......8.......8
240258a0:	b6b145d6 38a7b35e b6b587c1 389c5ae2     .E..^..8.....Z.8
240258b0:	b6b96109 3890c4d1 b6bcd05f 3884f7cc     .a.....8_......8
240258c0:	b6bfd4b5 3871f500 b6c26d37 3859a75a     ......q87m..Z.Y8
240258d0:	b6c4994b 38411431 b6c6588e 3828491f     K...1.A8.X...I(8
240258e0:	b6c7aadf 380f53c1 b6c89055 37ec8371     .....S.8U...q..7
240258f0:	b6c9093c 37ba411e b6c91621 3787fb97     <....A.7!......7
24025900:	b6c8b7c7 372b9b4a b6c7ef24 368f4775     ....J.+7$...uG.6
24025910:	b6c6bd6b b5ddd7d6 b6c52403 b6fc99fb     k........$......
24025920:	b6c32489 b75fdf45 b6c0c0cb b7a01fd5     .$..E._.........
24025930:	b6bdfac9 b7cf9e85 b6bad4b9 b7fe53b6     .............S..
24025940:	b6b750f8 b81613fa b6b3721a b82c823d     .P.......r..=.,.
24025950:	b6af3ad6 b8426996 b6aaae16 b857bf59     .:...iB.....Y.W.
24025960:	b6a5cee3 b86c7936 b6a0a077 b88046a2     ....6yl.w....F..
24025970:	b69b2624 b889f904 b695636b b8934f3b     $&......kc..;O..
24025980:	b68f5be5 b89c44f9 b689134b b8a4d62f     .[...D..K.../...
24025990:	b6828d71 b8acff06 b6779c99 b8b4bbeb     q.........w.....
240259a0:	b669b3ba b8bc0988 b65b6880 b8c2e4cd     ..i......h[.....
240259b0:	b64cc34e b8c94ae6 b63dcc9b b8cf394b     N.L..J....=.K9..
240259c0:	b62e8d03 b8d4adb1 b61f0d33 b8d9a621     ........3...!...
240259d0:	b60f55ef b8de20c7 b5fee00b b8e21c4b     .U... ......K...
240259e0:	b5dec8aa b8e59772 b5be776c b8e89152     ....r...lw..R...
240259f0:	b59dfe04 b8eb0945 b57adc3a b8ecfefa     ....E...:.z.....
24025a00:	b539b2ac b8ee7262 b4f1448b b8ef63a7     ..9.br...D...c..
24025a10:	b45f36aa b8efd345 330a8e23 b8efc1ee     .6_.E...#..3....
24025a20:	34913f22 b8ef30b4 3507f513 b8ee20c8     "?.4.0.....5. ..
24025a30:	354688b3 b8ec93b6 35821d2e b8ea8b44     ..F5.......5D...
24025a40:	35a07558 b8e80970 35be3d87 b8e5107a     Xu.5p....=.5z...
24025a50:	35db66de b8e1a2db 35f7e2dd b8ddc34f     .f.5.......5O...
24025a60:	3609d1d1 b8d974bc 36174dc9 b8d4ba4e     ...6.t...M.6N...
24025a70:	36245ee9 b8cf975b 3630fef1 b8ca0f64     .^$6[.....06d...
24025a80:	363d27f8 b8c42623 3648d457 b8bddf81     .'=6#&..W.H6....
24025a90:	3653feba b8b73f8b 365ea21d b8b04a7a     ..S6.?....^6zJ..
24025aa0:	3668b9cb b8a904ac 36724167 b8a172a0     ..h6....gAr6.r..
24025ab0:	367b34df b89998f9 3681c841 b8917c75     .4{6....A..6u|..
24025ac0:	3685a87c b88921ee 3689399c b8808e54     |..6.!...9.6T...
24025ad0:	368c7a52 b86f8d5e 368f6977 b85da02f     Rz.6^.o.wi.6/.].
24025ae0:	36920610 b84b5f6c 36944f57 b838d581     ...6l_K.WO.6..8.
24025af0:	369644af b8260cec 3697e5aa b8131036     .D.6..&....66...
24025b00:	3699320b b7ffd3eb 369a29be b7d94979     .2.6.....).6yI..
24025b10:	369acce2 b7b29640 369b1bbf b78bcf51     ...6@......6Q...
24025b20:	369b16cc b74a1340 369abeac b6f967d3     ...6@.J....6.g..
24025b30:	369a142c b63ea74e 36991848 35e71284     ,..6N.>.H..6...5
24025b40:	3697cc1e 36d190bf 369630fc 3733e0e1     ...6...6.0.6..37
24025b50:	36944859 377e0507 369213cd 37a3877a     YH.6..~7...6z..7
24025b60:	368f9518 37c76cc0 368cce22 37eaa048     ...6.l.7"..6H..7
24025b70:	3689c0f0 38068842 36866faf 38175637     ...6B..8.o.67V.8
24025b80:	3682dcab 3827b1cc 367e149a 38379315     ...6..'8..~6..78
24025b90:	3675f637 3846f279 366d6378 3855c8b2     7.u6y.F8xcm6..U8
24025ba0:	366461dc 38640ed0 365af707 3871be40     .ad6..d8..Z6@.q8
24025bb0:	365128e0 387ed0cd 3646fd63 3885a052     .(Q6..~8c.F6R..8
24025bc0:	363c7ac3 388b8427 3631a74a 38911163     .z<6'..8J.16c..8
24025bd0:	36268971 389645ae 361b27b8 389b1eeb     q.&6.E.8.'.6...8
24025be0:	360f88cd 389f9b32 3603b35f 38a3b8cc     ...62..8_..6...8
24025bf0:	35ef5c81 38a77640 35d7007d 38aad240     .\.5@v.8}..5@..8
24025c00:	35be6079 38adcbc2 35a58a3c 38b061ec     y`.5...8<..5.a.8
24025c10:	358c8b8f 38b2941b 3566e46f 38b461e3     ...5...8o.f5.a.8
24025c20:	353497e3 38b5cb13 35024cc9 38b6cfac     ..45...8.L.5...8
24025c30:	34a03c7c 38b76fe9 33f138b2 38b7ac36     |<.4.o.8.8.36..8
24025c40:	b39bf124 38b7853b b4896e96 38b6fbcc     $...;..8.n.....8
24025c50:	b4ead545 38b610f7 b5257ee6 38b4c5f9     E......8.~%....8
24025c60:	b554db59 38b31c43 b581b3ea 38b11573     Y.T.C..8....s..8
24025c70:	b5988668 38aeb359 b5aed9ab 38abf7f2     h...Y..8.......8
24025c80:	b5c4a2a2 38a8e567 b5d9d69c 38a57e0d     ....g..8.....~.8
24025c90:	b5ee6b4d 38a1c460 b6012b5e 389dbb06     Mk..`..8^+.....8
24025ca0:	b60ac7bb 389964c7 b6140639 3894c496     .....d.89......8
24025cb0:	b61ce295 388fdd81 b62558be 388ab2bb     .......8.X%....8
24025cc0:	b62d64ef 38854794 b6350396 387f3eef     .d-..G.8..5..>.8
24025cd0:	b63c3170 38737bd7 b642eb76 38674d20     p1<..{s8v.B. Mg8
24025ce0:	b6492ee1 385aba33 b64ef93e 384dca9e     ..I.3.Z8>.N...M8
24025cf0:	b654484f 38408618 b6591a2a 3832f476     OHT...@8*.Y.v.28
24025d00:	b65d6d2b 38251da4 b6613fec 381709a6     +m]...%8.?a....8
24025d10:	b6649159 3808c08f b66760a6 37f4950b     Y.d....8.`g....7
24025d20:	b669ad44 37d75f60 b66b76fd 37b9f080     D.i.`_.7.vk....7
24025d30:	b66cbdd6 379c58c7 b66d821a 377d5106     ..l..X.7..m..Q}7
24025d40:	b66dc461 3741dfe9 b66d8589 37067e8a     a.m...A7..m..~.7
24025d50:	b66cc6ab 369699c0 b66b892f 3583549e     ..l....6/.k..T.5
24025d60:	b669ceb7 b6282467 b6679928 b6c7dec7     ..i.g$(.(.g.....
24025d70:	b664eaa1 b71d2a0c b661c58c b7559b70     ..d..*....a.p.U.
24025d80:	b65e2c80 b7869349 b65a2253 b7a1d793     .,^.I...S"Z.....
24025d90:	b655aa1c b7bc8cd7 b650c717 b7d6a5ba     ..U.......P.....
24025da0:	b64b7cbf b7f0154e b645cec4 b8046795     .|K.N.....E..g..
24025db0:	b63fc0f8 b81063a3 b639575d b81bf919     ..?..c..]W9.....
24025dc0:	b632962d b827227c b62b81b7 b831da98     -.2.|"'...+...1.
24025dd0:	b6241e7d b83c1c7e b61c7118 b845e392     }.$.~.<..q....E.
24025de0:	b6147e46 b84f2b75 b60c4ae1 b857f023     F~..u+O..J..#.W.
24025df0:	b603dbe2 b8602de1 b5f66c95 b867e145     .....-`..l..E.g.
24025e00:	b5e4be7a b86f073a b5d2b7d4 b8759cf8     z...:.o.......u.
24025e10:	b5c0631d b87ba012 b5adcae1 b8808734     .c....{.....4...
24025e20:	b59af9c8 b882f31b b587fa78 b8851305     ........x.......
24025e30:	b569af3f b886e663 b54337e0 b8886cd4     ?.i.c....7C..l..
24025e40:	b51ca420 b889a61c b4ec1262 b88a922e      .......b.......
24025e50:	b49ef847 b88b3126 b424474d b88b834a     G...&1..MG$.J...
24025e60:	b237b948 b88b8907 340c2130 b88b42f7     H.7.....0!.4.B..
24025e70:	34911f6d b88ab1d8 34db4752 b889d691     m..4....RG.4....
24025e80:	351230d9 b888b230 3536246b b88745e6     .0.50...k$65.E..
24025e90:	35596bfe b885930e 357bf5ad b8839b23     .kY5......{5#...
24025ea0:	358ed813 b8815fc3 359f4554 b87dc55a     ...5._..TE.5Z.}.
24025eb0:	35af3a7e b8784b88 35beafcf b8725608     ~:.5.Kx....5.Vr.
24025ec0:	35cd9de2 b86be91a 35dbfd92 b865092d     ...5..k....5-.e.
24025ed0:	35e9c834 b85dbaec 35f6f765 b856032f     4..5..].e..5/.V.
24025ee0:	3601c29a b84de707 3607b5f9 b8456ba7     ...6..M....6.kE.
24025ef0:	360d5347 b83c9670 36129811 b8336cf0     GS.6p.<....6.l3.
24025f00:	36178233 b829f4cd 361c0faf b82033d4     3..6..)....6.3 .
24025f10:	36203ec3 b8162fe7 36240de4 b80bef09     .> 6./....$6....
24025f20:	36277bbb b801774c 362a872e b7ed9db0     .{'6Lw....*6....
24025f30:	362d2f5a b7d7f7c8 362f7391 b7c20956     Z/-6.....s/6V...
24025f40:	3631535d b7abdee9 3632ce82 b7958518     ]S16......26....
24025f50:	3633e4fe b77e10f7 36349703 b750eb36     ..36..~...466.P.
24025f60:	3634e4f5 b723b1f5 3634cf72 b6ecfc31     ..46..#.r.461...
24025f70:	36345758 b692d085 36337da4 b5e446cd     XW46.....}36.F..
24025f80:	36324397 35804068 3630aaa4 3670cad5     .C26h@.5..06..p6
24025f90:	362eb45f 36cfbf9a 362c629e 3712f874     _..6...6.b,6t..7
24025fa0:	3629b760 373d6651 3626b4ca 3767137d     `.)6Qf=7..&6}.g7
24025fb0:	36235d37 3787f568 361fb328 379bebcb     7]#6h..7(..6...7
24025fc0:	361bb945 37af62f2 36177258 37c2513c     E..6.b.7Xr.6<Q.7
24025fd0:	3612e15b 37d4ad69 360e0962 37e66e95     [..6i..7b..6.n.7
24025fe0:	3608eda7 37f78c49 3603917f 3803ff3c     ...6I..7...6<..8
24025ff0:	35fbf0b3 380bdec4 35f04b94 38136121     ...5...8.K.5!a.8
24026000:	35e43aea 381a82f7 35d7c631 3821412a     .:.5...81..5*A!8
24026010:	35caf4fa 382798d0 35bdcf21 382d8749     ...5..'8!..5I.-8
24026020:	35b05c75 38330a2c 35a2a507 38381f55     u\.5,.38...5U.88
24026030:	3594b0da 383cc4db 35868824 3840f91c     ...5..<8$..5..@8
24026040:	35706619 3844bab6 355373a1 38480885     .fp5..D8.sS5..H8
24026050:	35364960 384ae1aa 3518f7cb 384d4589     `I65..J8...5.EM8
24026060:	34f71ea4 384f33c5 34bc40a0 3850ac47     ...4.3O8.@.4G.P8
24026070:	34817604 3851af33 340dbe00 38523cf2     .v.43.Q8...4.<R8
24026080:	32c9b669 38525628 b3b4d594 3851fbbc     i..2(VR8......Q8
24026090:	b44ce8f5 38512ed5 b49f0382 384ff0cd     ..L...Q8......O8
240260a0:	b4d6c4c0 384e4343 b506cd93 384c280d     ....CCN8.....(L8
240260b0:	b521b52f 3849a13a b53c0b73 3846b10a     /.!.:.I8s.<...F8
240260c0:	b555c304 384359ff b56ecefc 383f9ec4     ..U..YC8..n...?8
240260d0:	b5839177 383b8238 b58f5970 3837076b     w...8.;8pY..k.78
240260e0:	b59ab9c5 3832319f b5a5acf1 382d0437     .....128....7.-8
240260f0:	b5b02dcc 382782c7 b5ba377e 3821b10c     .-....'8~7....!8
24026100:	b5c3c575 381b92e1 b5ccd366 38152c46     u......8f...F,.8
24026110:	b5d55d55 380e815b b5dd5f9d 3807965e     U]..[..8._..^..8
24026120:	b5e4d6e8 38006fa6 b5ebc03a 37f2234a     .....o.8:...J#.7
24026130:	b5f218e5 37e301be b5f7de92 37d383d0     .......7.......7
24026140:	b5fd0f42 37c3b2dc b600d4a0 37b3984b     B......7....K..7
24026150:	b602d5a2 37a33d95 b6048a28 3792ac52     .....=.7(...R..7
24026160:	b605f1de 3781ee13 b6070c99 376218ff     .......7......b7
24026170:	b607da61 37402270 b6085b62 371e0b93     a...p"@7b[.....7
24026180:	b6088fef 36f7cf2f b6087892 36b392e6     ..../..6.x.....6
24026190:	b60815ec 365f0fe0 b60768da 35af4e14     ......_6.h...N.5
240261a0:	b606724e b53b2d11 b605336e b633feb2     Nr...-;.n3....3.
240261b0:	b603ad7f b69bd616 b601e1eb b6dcc70e     ................
240261c0:	b5ffa495 b70e581a b5fb0086 b72db827     .....X......'.-.
240261d0:	b5f5db6a b74c7397 b5f03918 b76a7ab8     j....sL..9...zj.
240261e0:	b5ea1db1 b783df37 b5e38dac b7921815     ....7...........
240261f0:	b5dc8d89 b79fe0ea b5d52221 b7ad330d     ........!"...3..
24026200:	b5cd5067 b7ba0814 b5c51d9b b7c659f0     gP...........Y..
24026210:	b5bc8f09 b7d222e0 b5b3aa38 b7dd5d84     ....."..8....]..
24026220:	b5aa74c4 b7e804cd b5a0f482 b7f21415     .t..............
24026230:	b5972f4a b7fb870d b58d2b20 b8022cde     J/...... +...,..
24026240:	b582ee1c b8064450 b570fccb b80a0843     ....PD....p.C...
24026250:	b55bc46a b80d7753 b5463fa1 b8109054     j.[.Sw...?F.T...
24026260:	b5307b07 b813523f b51a8343 b815bc4b     .{0.?R..C...K...
24026270:	b50464fa b817cde0 b4dc599f b8198692     .d.......Y......
24026280:	b4afceb2 b81ae630 b483423e b81becb5     ....0...>B......
24026290:	b42d9a1f b81c9a4f b3aa1f18 b81cef5f     ..-.O......._...
240262a0:	313aacff b81cec73 33b44982 b81c924f     ..:1s....I.3O...
240262b0:	34306f86 b81be1df 3482ce70 b81adc41     .o04....p..4A...
240262c0:	34acbfd1 b81982c2 34d5f5d9 b817d6d7     ...4.......4....
240262d0:	34fe5b12 b815da22 3512ed55 b8138e6b     .[.4"...U..5k...
240262e0:	3526303c b810f5ab 3538ec86 b80e11fa     <0&5......85....
240262f0:	354b18d5 b80ae595 355cac37 b80772e4     ..K5....7.\5.r..
24026300:	356d9e19 b803bc6d 357de65c b7ff89a8     ..m5m...\.}5....
24026310:	3586bea2 b7f71dbc 358e2dd2 b7ee3adc     ...5.....-.5.:..
24026320:	35953d59 b7e4e708 359bea06 b7db2868     Y=.5.......5h(..
24026330:	35a230ed b7d10558 35a80f71 b7c6845f     .0.5X...q..5_...
24026340:	35ad8323 b7bbac31 35b289ce b7b08391     #..51......5....
24026350:	35b72198 b7a51179 35bb48d3 b7995ceb     .!.5y....H.5.\..
24026360:	35befe1d b78d6d07 35c24055 b7814905     ...5.m..U@.5.I..
24026370:	35c50ea0 b769f035 35c76867 b7510322     ...55.i.gh.5".Q.
24026380:	35c94d40 b737d97f 35cabd24 b71e81da     @M.5..7.$..5....
24026390:	35cbb83e b7050ad2 35cc3ef7 b6d705e6     >..5.....>.5....
240263a0:	35cc5200 b6a3f166 35cbf246 b661e9a9     .R.5f...F..5..a.
240263b0:	35cb20f5 b5f8b25d 35c9df7c b4bb4b81     . .5]...|..5.K..
240263c0:	35c82f72 35995c92 35c612cc 362fb7af     r/.5.\.5...5../6
240263d0:	35c38b90 3688bebb 35c09c1d 36b8e5c1     ...5...6...5...6
240263e0:	35bd46ed 36e8377c 35b98ec9 370b4d98     .F.5|7.6...5.M.7
240263f0:	35b5769b 3721fc6c 35b10185 37381ca1     .v.5l.!7...5..87
24026400:	35ac32c1 374da2f1 35a70dd9 376284ac     .2.5..M7...5..b7
24026410:	35a19660 3776b778 359bd027 378518c0     `..5x.v7'..5...7
24026420:	3595bf0f 378e74b2 358f672e 37976b22     ...5.t.7.g.5"k.7
24026430:	3588ccaf 379ff7ef 3581f3df 37a8172c     ...5...7...5,..7
24026440:	3575c23c 37afc53c 356731d3 37b6fecc     <.u5<..7.1g5...7
24026450:	35583fa2 37bdc0ca 3548f4f1 37c40870     .?X5...7..H5p..7
24026460:	35395b23 37c9d34c 35297bb3 37cf1f27     #[95L..7.{)5'..7
24026470:	35196030 37d3ea29 3509123c 37d832bb     0`.5)..7<..5.2.7
24026480:	34f136f0 37dbf798 34d00b1f 37df37c4     .6.4...7...4.7.7
24026490:	34aeb450 37e1f294 348d45c1 37e427ab     P..4...7.E.4.'.7
240264a0:	3457a51b 37e5d6f8 3414db5e 37e700ad     ..W4...7^..4...7
240264b0:	33a4a7d6 37e7a552 32819eb6 37e7c5ba     ...3R..7...2...7
240264c0:	b3458119 37e762fd b3e488e7 37e67e73     ..E..b.7....s~.7
240264d0:	b4325566 37e519c7 b471709b 37e336e4     fU2....7.pq..6.7
240264e0:	b497ba33 37e0d7fe b4b61ffb 37ddff80     3......7.......7
240264f0:	b4d3d9be 37dab015 b4f0d817 37d6ecb9     .......7.......7
24026500:	b5068614 37d2b888 b51433d5 37ce16e8     .......7.3.....7
24026510:	b5216e79 37c90b74 b52e2f77 37c399f9     yn!.t..7w/.....7
24026520:	b53a709c 37bdc675 b5462c0b 37b79514     .p:.u..7.,F....7
24026530:	b5515c3e 37b10a31 b55bfc0b 37aa2a4f     >\Q.1..7..[.O*.7
24026540:	b56606a4 37a2fa1b b56f779d 379b7e5c     ..f....7.wo.\~.7
24026550:	b5784aeb 3793bc06 b5803e70 378bb81f     .Jx....7p>.....7
24026560:	b584051d 378377d1 b587780a 37760097     .....w.7.x....v7
24026570:	b58a95fa 3764addd b58d5de9 3753021b     ......d7.]....S7
24026580:	b58fcef3 37410843 b591e879 372ecb34     ....C.A7y...4..7
24026590:	b593aa12 371c55ef b5951380 3709b380     .....U.7.......7
240265a0:	b59624a9 36edddd3 b596ddca 36c82660     .$.....6....`&.6
240265b0:	b5973f33 36a25693 b5974970 3679086f     3?...V.6pI..o.y6
240265c0:	b596fd43 362d89d2 b5965b88 35c4b812     C.....-6.[.....5
240265d0:	b5956572 34bd4a87 b5941c36 b5499332     re...J.46...2.I.
240265e0:	b592815f b5f74af5 b590967a b643f0b8     _....J..z.....C.
240265f0:	b58e5d57 b6858fb2 b58bd7f6 b6a885af     W]..............
24026600:	b589086f b6cac7cb b585f0ff b6ec440a     o............D..
24026610:	b5829411 b7067488 b57de85f b716530e     .....t.._.}..S..
24026620:	b5762807 b725b58e b56decaf b734945d     .(v...%...m.].4.
24026630:	b5653c23 b742e818 b55c1c6b b750a9e2     #<e...B.k.\...P.
24026640:	b55293bc b75dd31d b548a87f b76a5da5     ..R...]...H..]j.
24026650:	b53e6143 b77643b8 b533c4c3 b780c002     Ca>..Cv...3.....
24026660:	b528d9d6 b78606d2 b51da777 b78af40f     ..(.....w.......
24026670:	b51234b7 b78f85b5 b50688c0 b793b9fb     .4..............
24026680:	b4f5559a b7978f51 b4dd4441 b79b0462     .U..Q...AD..b...
24026690:	b4c4ec1d b79e180f b4ac5bcd b7a0c982     .........[......
240266a0:	b493a202 b7a31805 b4759aaa b7a5033d     ..........u.=...
240266b0:	b443d8b7 b7a68af0 b4121b14 b7a7af25     ..C.........%...
240266c0:	b3c0fcd4 b7a87024 b33c7c60 b7a8ce5f     ....$p..`|<._...
240266d0:	30f37563 b7a8ca92 3349e05b b7a865a4     cu.0....[.I3.e..
240266e0:	33c4f2ca b7a7a0b1 3411d05d b7a67d11     ...3....]..4.}..
240266f0:	3440631d b7a4fc47 346e1880 b7a32019     .c@4G.....n4. ..
24026700:	348d6c01 b7a0ea68 34a344f9 b79e5d56     .l.4h....D.4V]..
24026710:	34b88bb1 b79b7b23 34cd352b b798464e     ...4#{..+5.4NF..
24026720:	34e136d5 b794c175 34f48690 b790ef5d     .6.4u......4]...
24026730:	35038d65 b78cd2ed 350c7533 b7886f46     e..5....3u.5Fo..
24026740:	3514f667 b783c792 351d0d01 b77dbe55     g..5.......5U.}.
24026750:	3524b541 b77372fb 352bebb3 b768b445     A.$5.rs...+5E.h.
24026760:	3532ad2b b75d8974 3538f6cb b751fa02     +.25t.]...85..Q.
24026770:	353ec5fe b7460da9 3544187e b739cc1a     ..>5..F.~.D5..9.
24026780:	3548ec52 b72d3d5c 354d3fce b720695c     R.H5\=-..?M5\i .
24026790:	35511198 b7135843 355460a1 b7061239     ..Q5CX...`T59...
240267a0:	35572c2c b6f13eed 355973c6 b6d61073     ,,W5.>...sY5s...
240267b0:	355b374d b6baa98a 355c76ec b69f1aab     M7[5.....v\5....
240267c0:	355d331e b6837448 355d6ca3 b64f8d67     .3]5Ht...l]5g.O.
240267d0:	355d2489 b6184448 355c5c2b b5c25a7b     .$]5HD..+\\5{Z..
240267e0:	355b1526 b5299fca 35595161 343ec65b     &.[5..).aQY5[.>4
240267f0:	35571307 3583624f 35545c85 35ed9091     ..W5Ob.5.\T5...5
24026800:	3551308d 362b146b 354d9209 365e78ef     .0Q5k.+6..M5.x^6
24026810:	35498427 36886cfb 35450a48 36a10e45     '.I5.l.6H.E5E..6
24026820:	3540280c 36b91347 353ae142 36d06f70     .(@5G..6B.:5po.6
24026830:	353539ef 36e716ac 352f3648 36fcfd76     .955...6H6/5v..6
24026840:	3528daab 37090c66 35222ba4 37132f20     ..(5f..7.+"5 /.7
24026850:	351b2de6 371ce1ff 3513e643 37262062     .-.5...7C..5b &7
24026860:	350c59b1 372ee601 35048d44 37372ed1     .Y.5...7D..5..77
24026870:	34f90c56 373ef735 34e8934c 37463bca     V..45.>7L..4.;F7
24026880:	34d7ba1e 374cf9a2 34c68b9e 37532e00     ...4..L7...4..S7
24026890:	34b512b2 3758d690 34a35a58 375df164     ...4..X7XZ.4d.]7
240268a0:	34916d9a 37627cd0 347eaf0f 37667789     .m.4.|b7..~4.wf7
240268b0:	345a465d 3769e0a9 3435b736 376cb77f     ]FZ4..i76.54..l7
240268c0:	3411177b 376efbe0 33d8fa10 3770add7     {..4..n7...3..p7
240268d0:	338ffae2 3771cdd1 330eb822 37725c7f     ...3..q7"..3.\r7
240268e0:	afb84db9 37725b14 b31031b8 3771cae6     .M...[r7.1....q7
240268f0:	b38e9d04 3770adab b3d41d0c 376f0569     ......p7....i.o7
24026900:	b40c391a 376cd488 b42dbb62 376a1d9b     .9....l7b.-...j7
24026910:	b44e8313 3766e38e b46e7e74 37632999     ..N...f7t~n..)c7
24026920:	b486ce3f 375ef322 b495e65f 375a43ef     ?...".^7_....CZ7
24026930:	b4a47fc3 37551ff5 b4b292ee 374f8b5e     ......U7....^.O7
24026940:	b4c018c5 37498a95 b4cd0a90 37432240     ......I7....@"C7
24026950:	b4d96202 373c572d b4e51933 37352e62     .b..-W<73...b.57
24026960:	b4f02aaf 372dad12 b4fa916a 3725d886     .*....-7j.....%7
24026970:	b5022468 371db640 b506a65d 37154bda     h$..@..7]....K.7
24026980:	b50accbf 370c9f0e b50e95f2 3703b5af     .......7.......7
24026990:	b5120091 36f52b4b b5150b7b 36e289dc     ....K+.6{......6
240269a0:	b517b5c4 36cf9324 b519fec1 36bc534d     ....$..6....MS.6
240269b0:	b51be601 36a8d68d b51d6b4b 36952923     .......6Kk..#).6
240269c0:	b51e8ea6 3681574e b51f5052 365ada87     ....NW.6RP....Z6
240269d0:	b51fb0ca 3632ee53 b51fb0c2 360b0224     ....S.26....$..6
240269e0:	b51f5124 35c65bb5 b51e9313 356e2459     $Q...[.5....Y$n5
240269f0:	b51d77e9 34a158df b51c0132 b496a985     .w...X.42.......
24026a00:	b51a30b3 b5658574 b518085d b5bec6e6     .0..t.e.].......
24026a10:	b5158a54 b604c60b b512b8eb b6297445     T...........Et).
24026a20:	b50f96a0 b64d59eb b50c261f b6706376     .....YM..&..vcp.
24026a30:	b5086a3a b6893f01 b50465ec b699cbbe     :j...?...e......
24026a40:	b5001c54 b6a9cf4a b4f72164 b6b9415f     T...J...d!.._A..
24026a50:	b4ed8cd2 b6c81a2e b4e381f1 b6d6524d     ............MR..
24026a60:	b4d907f5 b6e3e2ca b4ce264a b6f0c530     ........J&..0...
24026a70:	b4c2e483 b6fcf379 b4b74a63 b704340f     ....y...cJ...4..
24026a80:	b4ab5fc7 b7098f0d b49f2caf b70e8873     ._.......,..s...
24026a90:	b492b93a b7131e3d b4860d8f b7174ea9     :...=........N..
24026aa0:	b47263d9 b71b1838 b4585d31 b71e79ad     .cr.8...1]X..y..
24026ab0:	b43e17b3 b721720c b423a3ff b724009c     ..>..r!...#...$.
24026ac0:	b4091295 b72624e6 b3dce7c9 b727deb6     .....$&.......'.
24026ad0:	b3a7b09e b7292e1b b3653fd7 b72a1354     ......)..?e.T.*.
24026ae0:	b2f756b3 b72a8f06 b19715d4 b72aa1e1     .V....*.......*.
24026af0:	32a9b83c b72a4d0e 333b547f b72991b5     <..2.M*..T;3..).
24026b00:	33902587 b728716e 33c1c2f6 b726ede4     .%.3nq(....3..&.
24026b10:	33f26667 b7250916 3410fa4a b722c52d     gf.3..%.J..4-.".
24026b20:	34282997 b7202487 343eb45a b71d29b5     .)(4.$ .Z.>4.)..
24026b30:	34548e72 b719d77c 3469ac39 b71630cb     r.T4|...9.i4.0..
24026b40:	347e029a b71238c1 3488c38b b70df2a4     ..~4.8.....4....
24026b50:	349217e0 b70961e5 349af9ae b7048a17     ...4.a.....4....
24026b60:	34a364a0 b6fedde5 34ab54ba b6f42899     .d.4.....T.4.(..
24026b70:	34b2c655 b6e8fc34 34b9b619 b6dd60d3     U..44......4.`..
24026b80:	34c02112 b6d15ec1 34c604a0 b6c4fe77     .!.4.^.....4w...
24026b90:	34cb5e77 b6b84891 34d02cb2 b6ab45c4     w^.4.H...,.4.E..
24026ba0:	34d46dbc b69dfee9 34d82060 b6907ce3     .m.4....` .4.|..
24026bb0:	34db43c2 b682c8a7 34ddd766 b669d661     .C.4....f..4a.i.
24026bc0:	34dfdb23 b64ddafe 34e14f2c b631b119     #..4..M.,O.4..1.
24026bd0:	34e23413 b6156a95 34e28ab7 b5f2327e     .4.4.j.....4~2..
24026be0:	34e25459 b5b99d63 34e19280 b58138c7     YT.4c......4.8..
24026bf0:	34e04711 b5124e03 34de7442 b40c4f88     .G.4.N..Bt.4.O..
24026c00:	34dc1c92 3495f4d1 34d942cf 35379bd0     ...4...4.B.4..75
24026c10:	34d5ea15 3591486d 34d215c2 35c5cddf     ...4mH.5...4...5
24026c20:	34cdc977 35f9403c 34c90925 3615c142     w..4<@.5%..4B..6
24026c30:	34c3d8e8 362e3c5f 34be3d26 36460406     ...4_<.6&=.4..F6
24026c40:	34b83a7b 365d0b54 34b1d5b4 3673460a     {:.4T.]6...4.Fs6
24026c50:	34ab13d4 36845443 34a3fa0c 368e93e3     ...4CT.6...4...6
24026c60:	349c8dae 36985cbf 3494d443 36a1aa03     ...4.\.6C..4...6
24026c70:	348cd368 36aa7739 348490de 36b2c046     h..49w.6...4F..6
24026c80:	3478250e 36ba816f 3466bca7 36c1b755     .%x4o..6..f4U..6
24026c90:	3454f490 36c85efa 3442d8ff 36ce75c2     ..T4.^.6..B4.u.6
24026ca0:	34307634 36d3f971 341dd874 36d8e837     4v04q..6t..47..6
24026cb0:	340b0c24 36dd4098 33f03b26 36e10184     $..4.@.6&;.3...6
24026cc0:	33ca321e 36e42a4d 33a4159f 36e6baa2     .2.3M*.6...3...6
24026cd0:	337bfbe3 36e8b29b 33300638 36ea12a7     ..{3...68.03...6
24026ce0:	32c8f356 36eadb9b 31cc2779 36eb0ea4     V..2...6y'.1...6
24026cf0:	b242a876 36eaad51 b2f3cd1e 36e9b982     v.B.Q..6.......6
24026d00:	b3420483 36e83579 b3846ca0 36e623c7     ..B.y5.6.l...#.6
24026d10:	b3a71da5 36e38751 b3c9013a 36e0634c     ....Q..6:...Lc.6
24026d20:	b3ea03fe 36dcbb3c b40509ad 36d892ef     ....<..6.......6
24026d30:	b4148eb5 36d3ee79 b423889f 36ced233     ....y..6..#.3..6
24026d40:	b431ef56 36c942b8 b43fbb37 36c344e0     V.1..B.67.?..D.6
24026d50:	b44ce51c 36bcddb6 b459665d 36b61284     ..L....6]fY....6
24026d60:	b46538be 36aee8be b470568e 36a76608     .8e....6.Vp..f.6
24026d70:	b47abaa1 369f9035 b4823026 36976d33     ..z.5..6&0..3m.6
24026d80:	b486a1b1 368f0317 b48ab027 36865814     .......6'....X.6
24026d90:	b48e59fe 367ae4eb b4919ded 3668b12b     .Y....z6....+.h6
24026da0:	b4947af1 365621cd b496f054 364343c4     .z...!V6T....CC6
24026db0:	b498fd9f 3630240e b49aa299 361ccfbd     .....$06.......6
24026dc0:	b49bdf57 360953d2 b49cb42d 35eb7a95     W....S.6-....z.5
24026dd0:	b49d21b4 35c4322c b49d28c4 359ce7fa     .!..,2.5.(.....5
24026de0:	b49cca71 356b6aba b49c0813 351d66b0     q....jk5.....f.5
24026df0:	b49ae343 349fea1a b4995dd1 3251894d     C......4.]..M.Q2
24026e00:	b49779c5 b490ed7b b4953961 b513136e     .y..{...a9..n...
24026e10:	b4929f21 b55c62fe b48fadb0 b5921ce8     !....b\.........
24026e20:	b48c67ee b5b536e7 b488d0e7 b5d76b24     .g...6......$k..
24026e30:	b484ebda b5f8a618 b480bc28 b60c6a8f     ........(....j..
24026e40:	b4788ac2 b61bf33c b46f1675 b62ae4a4     ..x.<...u.o...*.
24026e50:	b465230e b63936d3 b45ab877 b646e25d     .#e..69.w.Z.].F.
24026e60:	b44fded3 b653e048 b4449e7d b6602a31     ..O.H.S.}.D.1*`.
24026e70:	b438fff4 b66bba2e b42d0bee b6768af1     ..8...k...-...v.
24026e80:	b420cb29 b6804bd0 b414469b b684ee06     ). ..K...F......
24026e90:	b4078733 b6892a3e b3f52c23 b68cfef1     3...>*..#,......
24026ea0:	b3daf875 b6906ad2 b3c08595 b6936ce9     u....j.......l..
24026eb0:	b3a5e5b5 b6960480 b38b2ae9 b698312b     .........*..+1..
24026ec0:	b360ce54 b699f2c6 b32b5891 b69b4978     T.`......X+.xI..
24026ed0:	b2ec2f71 b69c35a6 b2825cfe b69cb805     q/...5...\......
24026ee0:	b14bf031 b69cd182 321c5536 b69c8359     1.K.....6U.2Y...
24026ef0:	32b45b87 b69bcefc 330c6a85 b69ab627     .[.2.....j.3'...
24026f00:	333daca5 b6993ace 336dd626 b6975f21     ..=3.:..&.m3!_..
24026f10:	338e6511 b695258e 33a53666 b69290b5     .e.3.%..f6.3....
24026f20:	33bb51c1 b68fa36c 33d0aa73 b68c60c4     .Q.3l...s..3.`..
24026f30:	33e5346d b688cbf2 33f8e450 b684e861     m4.3....P..3a...
24026f40:	3405d7b9 b680b9a3 340ec5e9 b67886e6     ...4.......4..x.
24026f50:	3417381a b66f1363 341f2a0f b66520c3     .8.4c.o..*.4. e.
24026f60:	342697f1 b65ab746 342d7e40 b64fdf62     ..&4F.Z.@~-4b.O.
24026f70:	3433d9f1 b644a1c1 3439a857 b639073c     ..34..D.W.94<.9.
24026f80:	343ee726 b62d18cb 3443947d b620df84     &.>4..-.}.C4.. .
24026f90:	3447aeef b6146493 344b356a b607b13b     ..G4.d..j5K4;...
24026fa0:	344e2744 b5f59d91 3450843f b5db8d0b     D'N4....?.P4....
24026fb0:	34524c7d b5c1437b 34538092 b5a6d367     }LR4{C....S4g...
24026fc0:	34542160 b58c4f39 34543038 b5639268     `!T49O..80T4h.c.
24026fd0:	3453aed5 b52ea6b3 34529f3a b4f3fdc9     ..S4....:.R4....
24026fe0:	345103d8 b48b7bdd 344edf76 b3903090     ..Q4.{..v.N4.0..
24026ff0:	344c3522 34041cd7 34490852 34a69298     "5L4...4R.I4...4
24027000:	34455cc2 3504a07b 34413677 3534ee18     .\E4{..5w6A4..45
24027010:	343c99c8 3564148b 34378b4d 3588fbb0     ..<4..d5M.74...5
24027020:	34320fdb 359f3daa 342c2c90 35b4c337     ..24.=.5.,,47..5
24027030:	3425e6ba 35c98012 341f43df 35dd688c     ..%4...5.C.4.h.5
24027040:	341849b7 35f071ca 3410fe2a 360148c7     .I.4.q.5*..4.H.6
24027050:	34096738 3609df37 34018b1d 3611f7eb     8g.47..6...4...6
24027060:	33f2e02c 36198eed 33e23934 3620a0b4     ,..3...649.3.. 6
24027070:	33d12e31 36272a29 33bfcc42 362d2887     1..3)*'6B..3.(-6
24027080:	33ae2098 3632998f 339c386c 36377b53     . .3..26l8.3S{76
24027090:	338a20fe 363bcc5a 336fcf17 363f8b97     . .3Z.;6..o3..?6
240270a0:	334b327d 3642b85f 33268658 36455278     }2K3_.B6X.&3xRE6
240270b0:	3301e48d 36475a0a 32bacd6f 3648cfa6     ...3.ZG6o..2..H6
240270c0:	3264980e 3649b43f 31a9d96d 364a092a     ..d2?.I6m..1*.J6
240270d0:	b1641906 3649d025 b244e251 36490b43     ..d.%.I6Q.D.C.I6
240270e0:	b2a725c3 3647bcf6 b2ea744b 3645e80d     .%....G6Kt....E6
240270f0:	b31618d7 36438fab b3361a34 3640b742     ......C64.6.B.@6
24027100:	b3552a58 363d629b b3733644 363995be     X*U..b=6D6s...96
24027110:	b38815f4 3635550e b395fd18 3630a529     .....U56....).06
24027120:	b3a34888 362b8ae4 b3aff0c2 36260b5c     .H....+6....\.&6
24027130:	b3bbeed3 36202be6 b3c73c54 3619f205     .....+ 6T<.....6
24027140:	b3d1d370 36136368 b3dbaeec 360c85f1     p...hc.6.......6
24027150:	b3e4ca1b 36055fa2 b3ed20eb 35fbed32     ....._.6. ..2..5
24027160:	b3f4afe4 35eca236 b3fb742c 35dceaed     ....6..5,t.....5
24027170:	b400b5c8 35ccd43a b4034a2c 35bc6af5     ....:..5,J...j.5
24027180:	b40576b8 35abbc1c b4073b40 359ad4b5     .v.....5@;.....5
24027190:	b40897d3 3589c1bc b4098cc4 35712042     .......5....B q5
240271a0:	b40a1acc 354e998f b40a42d2 352c08db     ......N5.B....,5
240271b0:	b40a0619 35098755 b4096617 34ce5ba1     ....U..5.f...[.4
240271c0:	b408648f 348a295a b407038f 340d4f24     .d..Z).4....$O.4
240271d0:	b4054553 32009cdd b4032c68 b3f6453a     SE.....2h,..:E..
240271e0:	b400bb7f b47bde1c b3fbeb40 b4bce9de     ......{.@.......
240271f0:	b3f5bbca b4fa58cd b3eeef5f b51b0a52     .....X.._...R...
24027200:	b3e78d25 b537fbf7 b3df9c89 b553ef88     %.....7.......S.
24027210:	b3d72565 b56ed435 b3ce2fab b5844d15     e%..5.n../...M..
24027220:	b3c4c3c9 b5909954 b3baea4e b59c47f7     ....T...N....G..
24027230:	b3b0ac08 b5a752b5 b3a611f4 b5b1b3d9     .....R..........
24027240:	b39b2535 b5bb662b b38fef13 b5c46518     5%..+f.......e..
24027250:	b38478ef b5ccacad b371987a b5d4396a     .x......z.q.j9..
24027260:	b359e4f6 b5db0896 b341ea5e b5e117e5     ..Y.....^.A.....
24027270:	b329bbb3 b5e665c1 b3116be1 b5eaf124     ..)..e...k..$...
24027280:	b2f21b6d b5eeb992 b2c167a0 b5f1bf2e     m........g......
24027290:	b290e11a b5f402b1 b2415803 b5f58569     .........XA.i...
240272a0:	b1c3af36 b5f64917 af6196a5 b5f65022     6....I....a."P..
240272b0:	31b2b052 b5f59d6e 32348246 b5f43469     R..1n...F.42i4..
240272c0:	3286dc45 b5f218ff 32b25edf b5ef4f7b     E..2.....^.2{O..
240272d0:	32dcab8b b5ebdcd1 3302d31d b5e7c638     ...2.......38...
240272e0:	33169a1f b5e31165 33299e25 b5ddc475     ...3e...%.)3u...
240272f0:	333bd34b b5d7e5df 334d2e74 b5d17c68     K.;3....t.M3h|..
24027300:	335da54c b5ca8f3c 336d2e55 b5c325ca     L.]3<...U.m3.%..
24027310:	337bc0eb b5bb47c2 3384aaa2 b5b2fd1e     ..{3.G.....3....
24027320:	338af23c b5aa4df9 3390b43c b5a142b6     <..3.M..<..3.B..
24027330:	3395ee15 b597e3d1 339a9da6 b58e39f3     ...3.......3.9..
24027340:	339ec147 b5844de3 33a257bf b57450cc     G..3.M...W.3.Pt.
24027350:	33a5604d b55fa4c2 33a7da9c b54aa970     M`.3.._....3p.J.
24027360:	33a9c6d1 b5357096 33ab2579 b5200be6     ...3.p5.y%.3.. .
24027370:	33abf795 b50a8cf4 33ac3e91 b4ea0a42     ...3.....>.3B...
24027380:	33abfc43 b4bf0b33 33ab32e5 b4943e78     C..33....2.3x>..
24027390:	33a9e51d b4538a62 33a815e9 b3fefee3     ...3b.S....3....
240273a0:	33a5c8ad b3326c60 33a30122 331395e4     ...3`l2."..3...3
240273b0:	339fc359 33e98e4a 339c13b4 3442d0ff     Y..3J..3...3..B4
240273c0:	3397f6e3 3487663a 339371df 34ac42b1     ...3:f.4.q.3.B.4
240273d0:	338e89e3 34cfe529 3389446b 34f23645     ...3)..4kD.3E6.4
240273e0:	3383a72c 35099008 337b701b 35194709     ,..3...5.p{3.G.5
240273f0:	336efa53 352836af 3361f982 35365646     S.n3.6(5..a3FV65
24027400:	33547a72 35439dec 33468a28 35500690     rzT3..C5(.F3..P5
24027410:	333835db 355b89ee 33298aea 3566229c     .583..[5..)3."f5
24027420:	331a96c1 356fcc08 330b66ea 35788277     ...3..o5.f.3w.x5
24027430:	32f811c5 35802183 32d91449 358385d3     ...2.!.5I..2...5
24027440:	32b9f02b 35866d94 329abff4 3588d892     +..2.m.5...2...5
24027450:	32773bac 358ac70b 32394743 358c399d     .;w2...5CG92.9.5
24027460:	31f7aa6f 358d3147 317c5c59 358daf72     o..1G1.5Y\|1r..5
24027470:	2f4f46d1 358db5f1 b15e2794 358d46db     .FO/...5.'^..F.5
24027480:	b1e2214e 358c64bc b2292ba2 358b1265     N!...d.5.+).e..5
24027490:	b25fb11e 358952ff b28a3ca9 35872a0b     .._..R.5.<...*.5
240274a0:	b2a3af3f 35849b4f b2bc1e80 3581aad4     ?...O..5.......5
240274b0:	b2d379c7 357cb9db b2e9b187 35756c4f     .y....|5....Olu5
240274c0:	b2feb776 356d7693 b3093f39 3564e2a0     v....vm59?....d5
240274d0:	b3127d5d 355bbaca b31b10db 355209bc     ]}....[5......R5
240274e0:	b322f51c 3547da6a b32a2627 353d3808     ..".j.G5'&*..8=5
240274f0:	b330a0b9 35322dfb b3366231 3526c7d8     ..0..-251b6...&5
24027500:	b33b689b 351b1150 b33fb2b9 350f1624     .h;.P..5..?.$..5
24027510:	b3433fe9 3502e225 b3461038 34ed0245     .?C.%..58.F.E..4
24027520:	b3482460 34d3fdb5 b3497db5 34bacdfe     `$H....4.}I....4
24027530:	b34a1e34 34a18a3a b34a0875 3488492b     4.J.:..4u.J.+I.4
24027540:	b3493fa7 345e426f b347c793 342c5084     .?I.oB^4..G..P,4
24027550:	b345a489 33f5cecf b342db6f 33946113     ..E....3o.B..a.3
24027560:	b33f71a4 32d2a105 b33b6d07 b2a43909     .q?....2.m;..9..
24027570:	b336d3f5 b384783d b331ad2e b3dd4ecf     ..6.=x....1..N..
24027580:	b32bffe1 b419a763 b325d398 b4431c49     ..+.c.....%.I.C.
24027590:	b31f303c b46ae855 b3181dfa b48877e9     <0..U.j......w..
240275a0:	b310a54f b49a8c94 b308ceee b4aba673     O...........s...
240275b0:	b300a3bf b4bbbae9 b2f059b4 b4cac086     .........Y......
240275c0:	b2dee6f0 b4d8aef4 b2cd01cd b4e57f12     ................
240275d0:	b2babd18 b4f12ae2 b2a82b99 b4fbad9c     .....*...+......
240275e0:	b2956033 b50281d1 b2826daf b506953d     3`.......m..=...
240275f0:	b25ecd57 b50a1072 b238bb45 b50cf360     W.^.r...E.8.`...
24027600:	b212c97f b50f3e85 b1da3766 b510f2f5     .....>..f7......
24027610:	b18fa971 b5121248 b10c5a09 b5129ea2     q...H....Z......
24027620:	2e7e00ff b5129aa9 31112416 b5120985     ..~......$.1....
24027630:	318d580c b510eed6 31d0139e b50f4ead     .X.1.......1.N..
24027640:	3208469e b50d2d93 32274837 b50a9072     .F.2.-..7H'2r...
24027650:	3244f5fa b5077c9a 326138fb b503f7b6     ..D2.|...8a2....
24027660:	327bfc0a b50007c6 328a95e0 b4f7662e     ..{2.......2.f..
24027670:	32965b49 b4ee007a 32a1467c b4e3ec12     I[.2z...|F.2....
24027680:	32ab509e b4d93708 32b473d9 b4cdefcc     .P.2.7...s.2....
24027690:	32bcab53 b4c22516 32c3f33d b4b5e5e2     S..2.%..=..2....
240276a0:	32ca48c7 b4a94156 32cfaa17 b49c46b5     .H.2VA.....2.F..
240276b0:	32d41669 b48f054c 32d78dea b4818c6f     i..2L......2o...
240276c0:	32da11ca b467d6a6 32dba430 b44c6221     ...2..g.0..2!bL.
240276d0:	32dc4831 b430d91b 32dc01d8 b41558e1     1H.2..0....2.X..
240276e0:	32dad613 b3f3fc3b 32d8ca9e b3bdc98e     ...2;......2....
240276f0:	32d5e624 b3885005 32d23008 b3278806     $..2.P...0.2..'.
24027700:	32cdb06d b2815f9f 32c8703b 320e212f     m..2._..;p.2/!.2
24027710:	32c278eb 3304c4c3 32bbd4ae 3362af1a     .x.2...3...2..b3
24027720:	32b48e32 339e7b18 32acb0a8 33c9a742     2..2.{.3...2B..3
24027730:	32a447bf 33f2b932 329b5f89 340cc889     .G.22..3._.2...4
24027740:	32920468 341f091a 3288431b 3430117d     h..2...4.C.2}.04
24027750:	327c5119 343fd68a 326783c4 344e4ecb     .Q|2..?4..g2.NN4
24027760:	325238c9 345b7256 323c8ac2 34673b03     .8R2Vr[4..<2.;g4
24027770:	3226948c 3471a449 321070c7 347aab59     ..&2I.q4.p.2Y.z4
24027780:	31f473bc 3481277c 31c813b2 348447ca     .s.1|'.4...1.G.4
24027790:	319bf49d 3486b79d 3160912c 348878bc     ...1...4,.`1.x.4
240277a0:	310a80ce 34898dbe 30585a4f 3489f9ec     ...1...4OZX0...4
240277b0:	afe29461 3489c148 b0d8c6c3 3488e880     a...H..4.......4
240277c0:	b139c8ef 348774ef b1821a5f 34856c85     ..9..t.4_....l.4
240277d0:	b1a5aea3 3482d5ca b1c77f03 347f6f9d     .......4.....o.4
240277e0:	b1e76bf7 34783441 b202ac67 3470097a     .k..A4x4g...z.p4
240277f0:	b21095e0 3467001b b21d6703 345d29a6     ......g4.g...)]4
24027800:	b22915fd 3452984c b2339a8b 34475e9d     ..).L.R4..3..^G4
24027810:	b23cee11 343b8fc1 b2450b7b 342f3f0b     ..<...;4{.E..?/4
24027820:	b24bef5d 34228014 b25197fe 34156691     ].K..."4..Q..f.4
24027830:	b2560526 3408063f b2593849 33f4e570     &.V.?..4I8Y.p..3
24027840:	b25b346f 33d97ee2 b25bfe16 33bdff27     o4[..~.3..[.'..3
24027850:	b25b9b4e 33a28bbd b25a1392 3387494b     N.[....3..Z.KI.3
24027860:	b2576fc4 3358b6a4 b253ba19 3323c81e     .oW...X3..S...#3
24027870:	b24efe15 32e01131 b249484e 3276da14     ..N.1..2NHI...v2
24027880:	b242a69d 3150cde0 b23b27a9 b206f432     ..B...P1.';.2...
24027890:	b232db3a b29ce7b6 b229d1cb b2f1d09e     :.2.......).....
240278a0:	b2201c9f b320ef76 b215cd92 b34662d9     .. .v. ......bF.
240278b0:	b20af70e b369209d b1ff57c5 b38485cb     ..... i..W......
240278c0:	b1e7fe67 b39305b1 b1d008bd b3a0063d     g...........=...
240278d0:	b1b79db9 b3ab8019 b19ee464 b3b56e5f     ........d..._n..
240278e0:	b18603a1 b3bdce99 b15a4420 b3c4a0ba     ........ DZ.....
240278f0:	b128cb83 b3c9e716 b0efcf8f b3cda654     ..(.........T...
24027900:	b08fc1cc b3cfe55b afc7dfdc b3d0ad3b     ....[.......;...
24027910:	2fa425c7 b3d00915 3080c457 b3ce0604     .%./....W..0....
24027920:	30d4c1f0 b3cab2fc 311249e5 b3c620ad     ...0.....I.1. ..
24027930:	3137e9ea b3c0615e 315b1284 b3b988c9     ..71^a....[1....
24027940:	317b9a1d b3b1abf8 318cae13 b3a8e118     ..{1.......1....
24027950:	319a1c99 b39f3f4f 31a60ba3 b394de94     ...1O?.....1....
24027960:	31b070fc b389d784 31b94528 b37c8664     .p.1....(E.1d.|.
24027970:	31c08384 b36475f3 31c62a43 b34bb0ab     ...1.ud.C*.1..K.
24027980:	31ca3a60 b332695f 31ccb79b b318d26a     `:.1_i2....1j...
24027990:	31cda876 b2fe3abb 31cd160f b2caf534     v..1.:.....14...
240279a0:	31cb0c1b b298322f 31c798c7 b24c97fc     ...1/2.....1..L.
240279b0:	31c2cc8d b1d66366 31bcba22 b04d4a25     ...1fc.."..1%JM.
240279c0:	31b5763a 319bccf6 31ad1770 32247233     :v.1...1p..13r$2
240279d0:	31a3b601 32764d36 31996bae 32a18188     ...16Mv2.k.1...2
240279e0:	318e5377 32c51664 31828967 32e5b8be     wS.1d..2g..1...2
240279f0:	316c54ac 3301a1a8 3152a770 330ecc1f     .Tl1...3p.R1...3
24027a00:	313846a5 331a508a 311d6e02 33242769     .F81.P.3.n.1i'$3
24027a10:	31025900 332c4cfa 30ce849a 3332c120     .Y.1.L,3...0 .23
24027a20:	3098c6c6 33378755 3047d005 333aa696     ...0U.73..G0..:3
24027a30:	2fc14e57 333c2933 ad4818fa 333c1cb2     WN./3)<3..H...<3
24027a40:	afc58b58 333a9199 b03d94a4 33379b47     X.....:3..=.G.73
24027a50:	b0897393 33334faa b0b11316 332dc713     .s...O33......-3
24027a60:	b0d5650d 33271be9 b0f62dca 331f6a7c     .e....'3.-..|j.3
24027a70:	b1099d4d 3316d0a6 b11631c8 330d6d8b     M......3.1...m.3
24027a80:	b120c66f 33036123 b1295337 32f197e2     o. .#a.37S)....2
24027a90:	b12fd540 32db9d38 b1344f15 32c51355     @./.8..2.O4.U..2
24027aa0:	b136c8f2 32ae3a38 b137507a 32975026     ..6.8:.2zP7.&P.2
24027ab0:	b135f844 3280911c b132d831 32546c2d     D.5....21.2.-lT2
24027ac0:	b12e0cc0 3228e8ff b127b6c5 31fdf69d     ......(2..'....1
24027ad0:	b11ffb3a 31adf901 b1170288 3144ef7a     :......1....z.D1
24027ae0:	b10cf83e 305fdce4 b1020a6a b0942665     >....._0j...e&..
24027af0:	b0ecd1f2 b1407c2c b0d48a4f b19560a7     ....,|@.O....`..
24027b00:	b0bba187 b1c44909 b0a27b00 b1ece7cb     .....I...{......
24027b10:	b0897889 b207a2f7 b061f10f b215c208     .x........a.....
24027b20:	b032a9bc b220eca3 b005c24c b22948c8     ..2... .L....H).
24027b30:	afb7a529 b22f05ef af558159 b2325bf2     )...../.Y.U..[2.
24027b40:	ae96e200 b23389be 2e360020 b232d3c0     ......3. .6...2.
24027b50:	2f145295 b2308274 2f68731a b22ce09e     .R./t.0..sh/..,.
24027b60:	2f94e105 b228399c 2fac4a82 b222d748     .../.9(..J./H.".
24027b70:	2fbadd03 b21d0060 2fc139eb b216f690     .../`....9./....
24027b80:	2fc03b77 b210f4b5 2fb8f017 b20b2d34     w;./......./4-..
24027b90:	2fac949c b205c88e 2f9c8bdf b200e430     .../......./0...
24027ba0:	2f8a540f b1f9231e 2f6ef27b b1f1ab8a     .T./.#..{.n/....
24027bb0:	2f4b0acd b1eb5333 2f2bd8e1 b1e5f46d     ..K/3S....+/m...
24027bc0:	2f13eb9e b1e1550f 2f0542b6 b1dd2afb     .../.U...B./.*..
24027bd0:	2f0111ed b1d9226b 2f0779db b1d4e69b     .../k"...y./....
24027be0:	2f173b32 b1d02cc2 2f2d3ef1 b1cac2cb     2;./.,...>-/....
24027bf0:	2f44e786 b1c49b90 2f5c3202 b1bdb9fe     ..D/.....2\/....
24027c00:	2f72e932 b1b622b5 2f848411 b1adda74     2.r/."...../t...
24027c10:	2f8f40e5 b1a4e667 2f99a50f b19b4c14     .@./g....../.L..
24027c20:	2fa3aa9b b191116c 2fad4bcb b1863caf     .../l....K./.<..
24027c30:	2fb6832f b175a8f8 2fbf4b70 b15dbf8a     /../..u.pK./..].
24027c40:	2fc79fa7 b144cb96 2fcf7b17 b12adc31     .../..D..{./1.*.
24027c50:	2fd6d953 b1100106 2fddb655 b0e89479     S../....U../y...
24027c60:	2fe40e42 b0af90e7 2fe9ddba b06a32f2     B../......./.2j.
24027c70:	2fef219d afe54447 2fe54447 00000000     .!./GD..GD./....
	...

24027c94 <sinTable_f32>:
24027c94:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
24027ca4:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
24027cb4:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
24027cc4:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
24027cd4:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
24027ce4:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
24027cf4:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
24027d04:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
24027d14:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
24027d24:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
24027d34:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
24027d44:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
24027d54:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
24027d64:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
24027d74:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
24027d84:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
24027d94:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
24027da4:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
24027db4:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
24027dc4:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
24027dd4:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
24027de4:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
24027df4:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
24027e04:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
24027e14:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
24027e24:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
24027e34:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
24027e44:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
24027e54:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
24027e64:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
24027e74:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
24027e84:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
24027e94:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
24027ea4:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
24027eb4:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
24027ec4:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
24027ed4:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
24027ee4:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
24027ef4:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
24027f04:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
24027f14:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
24027f24:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
24027f34:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
24027f44:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
24027f54:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
24027f64:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
24027f74:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
24027f84:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
24027f94:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
24027fa4:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
24027fb4:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
24027fc4:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
24027fd4:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
24027fe4:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
24027ff4:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
24028004:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
24028014:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
24028024:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
24028034:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
24028044:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
24028054:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
24028064:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
24028074:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
24028084:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
24028094:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
240280a4:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
240280b4:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
240280c4:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
240280d4:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
240280e4:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
240280f4:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
24028104:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
24028114:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
24028124:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
24028134:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
24028144:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
24028154:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
24028164:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
24028174:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
24028184:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
24028194:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
240281a4:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
240281b4:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
240281c4:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
240281d4:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
240281e4:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
240281f4:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
24028204:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
24028214:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
24028224:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
24028234:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
24028244:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
24028254:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
24028264:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
24028274:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
24028284:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
24028294:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
240282a4:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
240282b4:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
240282c4:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
240282d4:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
240282e4:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
240282f4:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
24028304:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
24028314:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
24028324:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
24028334:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
24028344:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
24028354:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
24028364:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
24028374:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
24028384:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
24028394:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
240283a4:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
240283b4:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
240283c4:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
240283d4:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
240283e4:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
240283f4:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
24028404:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
24028414:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
24028424:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
24028434:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
24028444:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
24028454:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
24028464:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
24028474:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
24028484:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
24028494:	80000000 33323130 37363534 62613938     ....0123456789ab
240284a4:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
240284b4:	76757473 7a797877 00000000              stuvwxyz....

240284c0 <__exp2f_data>:
240284c0:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
240284d0:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
240284e0:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
240284f0:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
24028500:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
24028510:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
24028520:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
24028530:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
24028540:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
24028550:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
24028560:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
24028570:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
24028580:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
24028590:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
240285a0:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
240285b0:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
240285c0:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
240285d0:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
240285e0:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
240285f0:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
24028600:	ff0c52d6 3f962e42                       .R..B..?

24028608 <__logf_data>:
24028608:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
24028618:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
24028628:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
24028638:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
24028648:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
24028658:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
24028668:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
24028678:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
24028688:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
24028698:	00000000 3ff00000 00000000 00000000     .......?........
240286a8:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
240286b8:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
240286c8:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
240286d8:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
240286e8:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
240286f8:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
24028708:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
24028718:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

24028728 <TWO23>:
24028728:	4b000000 cb000000                       ...K....

24028730 <__powf_log2_data>:
24028730:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
24028740:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
24028750:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
24028760:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
24028770:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
24028780:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
24028790:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
240287a0:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
240287b0:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
240287c0:	00000000 3ff00000 00000000 00000000     .......?........
240287d0:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
240287e0:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
240287f0:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
24028800:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
24028810:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
24028820:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
24028830:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
24028840:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
24028850:	652ab82b 3ff71547                       +.*eG..?

24028858 <npio2_hw>:
24028858:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
24028868:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
24028878:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
24028888:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
24028898:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
240288a8:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
240288b8:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
240288c8:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

240288d8 <two_over_pi>:
240288d8:	000000a2 000000f9 00000083 0000006e     ............n...
240288e8:	0000004e 00000044 00000015 00000029     N...D.......)...
240288f8:	000000fc 00000027 00000057 000000d1     ....'...W.......
24028908:	000000f5 00000034 000000dd 000000c0     ....4...........
24028918:	000000db 00000062 00000095 00000099     ....b...........
24028928:	0000003c 00000043 00000090 00000041     <...C.......A...
24028938:	000000fe 00000051 00000063 000000ab     ....Q...c.......
24028948:	000000de 000000bb 000000c5 00000061     ............a...
24028958:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
24028968:	00000042 0000004d 000000d2 000000e0     B...M...........
24028978:	00000006 00000049 0000002e 000000ea     ....I...........
24028988:	00000009 000000d1 00000092 0000001c     ................
24028998:	000000fe 0000001d 000000eb 0000001c     ................
240289a8:	000000b1 00000029 000000a7 0000003e     ....).......>...
240289b8:	000000e8 00000082 00000035 000000f5     ........5.......
240289c8:	0000002e 000000bb 00000044 00000084     ........D.......
240289d8:	000000e9 0000009c 00000070 00000026     ........p...&...
240289e8:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
240289f8:	00000039 00000091 000000d6 00000039     9...........9...
24028a08:	00000083 00000053 00000039 000000f4     ....S...9.......
24028a18:	0000009c 00000084 0000005f 0000008b     ........_.......
24028a28:	000000bd 000000f9 00000028 0000003b     ........(...;...
24028a38:	0000001f 000000f8 00000097 000000ff     ................
24028a48:	000000de 00000005 00000098 0000000f     ................
24028a58:	000000ef 0000002f 00000011 0000008b     ..../...........
24028a68:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
24028a78:	0000006d 00000036 0000007e 000000cf     m...6...~.......
24028a88:	00000027 000000cb 00000009 000000b7     '...............
24028a98:	0000004f 00000046 0000003f 00000066     O...F...?...f...
24028aa8:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
24028ab8:	00000075 00000027 000000ba 000000c7     u...'...........
24028ac8:	000000eb 000000e5 000000f1 0000007b     ............{...
24028ad8:	0000003d 00000007 00000039 000000f7     =.......9.......
24028ae8:	0000008a 00000052 00000092 000000ea     ....R...........
24028af8:	0000006b 000000fb 0000005f 000000b1     k......._.......
24028b08:	0000001f 0000008d 0000005d 00000008     ........].......
24028b18:	00000056 00000003 00000030 00000046     V.......0...F...
24028b28:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
24028b38:	000000f0 000000cf 000000bc 00000020     ............ ...
24028b48:	0000009a 000000f4 00000036 0000001d     ........6.......
24028b58:	000000a9 000000e3 00000091 00000061     ............a...
24028b68:	0000005e 000000e6 0000001b 00000008     ^...............
24028b78:	00000065 00000099 00000085 0000005f     e..........._...
24028b88:	00000014 000000a0 00000068 00000040     ........h...@...
24028b98:	0000008d 000000ff 000000d8 00000080     ................
24028ba8:	0000004d 00000073 00000027 00000031     M...s...'...1...
24028bb8:	00000006 00000006 00000015 00000056     ............V...
24028bc8:	000000ca 00000073 000000a8 000000c9     ....s...........
24028bd8:	00000060 000000e2 0000007b 000000c0     `.......{.......
24028be8:	0000008c 0000006b                       ....k...

24028bf0 <PIo2>:
24028bf0:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
24028c00:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
24028c10:	1fc40000 1bc60000 17440000              ..........D.

24028c1c <init_jk>:
24028c1c:	00000004 00000007 00000009              ............

24028c28 <_init>:
24028c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24028c2a:	bf00      	nop
24028c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
24028c2e:	bc08      	pop	{r3}
24028c30:	469e      	mov	lr, r3
24028c32:	4770      	bx	lr

24028c34 <_fini>:
24028c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24028c36:	bf00      	nop
24028c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
24028c3a:	bc08      	pop	{r3}
24028c3c:	469e      	mov	lr, r3
24028c3e:	4770      	bx	lr

24028c40 <__parseTuning_veneer>:
24028c40:	f85f f000 	ldr.w	pc, [pc]	; 24028c44 <__parseTuning_veneer+0x4>
24028c44:	00002901 	.word	0x00002901

24028c48 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
24028c48:	f85f f000 	ldr.w	pc, [pc]	; 24028c4c <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
24028c4c:	00003da1 	.word	0x00003da1

24028c50 <__LEAF_clip_veneer>:
24028c50:	f85f f000 	ldr.w	pc, [pc]	; 24028c54 <__LEAF_clip_veneer+0x4>
24028c54:	00003ec1 	.word	0x00003ec1

24028c58 <__cStack_init_veneer>:
24028c58:	f85f f000 	ldr.w	pc, [pc]	; 24028c5c <__cStack_init_veneer+0x4>
24028c5c:	00001761 	.word	0x00001761

24028c60 <__HAL_SAI_RxCpltCallback_veneer>:
24028c60:	f85f f000 	ldr.w	pc, [pc]	; 24028c64 <__HAL_SAI_RxCpltCallback_veneer+0x4>
24028c64:	00001621 	.word	0x00001621

24028c68 <__HAL_SAI_RxHalfCpltCallback_veneer>:
24028c68:	f85f f000 	ldr.w	pc, [pc]	; 24028c6c <__HAL_SAI_RxHalfCpltCallback_veneer+0x4>
24028c6c:	000016c1 	.word	0x000016c1

24028c70 <__parsePreset_veneer>:
24028c70:	f85f f000 	ldr.w	pc, [pc]	; 24028c74 <__parsePreset_veneer+0x4>
24028c74:	00002a81 	.word	0x00002a81

24028c78 <__HAL_SPI_TxRxCpltCallback_veneer>:
24028c78:	f85f f000 	ldr.w	pc, [pc]	; 24028c7c <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
24028c7c:	00003d81 	.word	0x00003d81

Disassembly of section .itcmram:

00000400 <audioFrame>:
}
     400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     404:	2300      	movs	r3, #0
     406:	4c1e      	ldr	r4, [pc, #120]	; (480 <audioFrame+0x80>)
     408:	b083      	sub	sp, #12
     40a:	4f1e      	ldr	r7, [pc, #120]	; (484 <audioFrame+0x84>)
     40c:	4605      	mov	r5, r0
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
     40e:	9301      	str	r3, [sp, #4]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     410:	4638      	mov	r0, r7
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
     412:	6866      	ldr	r6, [r4, #4]
     414:	6863      	ldr	r3, [r4, #4]
     416:	9301      	str	r3, [sp, #4]
     418:	f8d4 8004 	ldr.w	r8, [r4, #4]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     41c:	f004 fd7c 	bl	4f18 <__tCycle_tick_veneer>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
     420:	eebe 0ae4 	vcvt.s32.f32	s0, s0, #23
     424:	6862      	ldr	r2, [r4, #4]
     426:	4638      	mov	r0, r7
  __HAL_LOCK(hdma);
     428:	4f17      	ldr	r7, [pc, #92]	; (488 <audioFrame+0x88>)
}
     42a:	eba2 0208 	sub.w	r2, r2, r8
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     42e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 498 <audioFrame+0x98>
     432:	ee10 3a10 	vmov	r3, s0
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     436:	603a      	str	r2, [r7, #0]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
     438:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
     43c:	3502      	adds	r5, #2
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     43e:	f8d4 9004 	ldr.w	r9, [r4, #4]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
     442:	f004 fd69 	bl	4f18 <__tCycle_tick_veneer>
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     446:	eebe 0ae4 	vcvt.s32.f32	s0, s0, #23
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
     44a:	6862      	ldr	r2, [r4, #4]
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
     44c:	490f      	ldr	r1, [pc, #60]	; (48c <audioFrame+0x8c>)
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     44e:	eba2 0209 	sub.w	r2, r2, r9
    __HAL_DMA_ENABLE(hdma);
     452:	ee10 3a10 	vmov	r3, s0
     456:	603a      	str	r2, [r7, #0]
     458:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     45c:	4b0c      	ldr	r3, [pc, #48]	; (490 <audioFrame+0x90>)
     45e:	4a0d      	ldr	r2, [pc, #52]	; (494 <audioFrame+0x94>)
     460:	ed93 7a00 	vldr	s14, [r3]
     464:	6863      	ldr	r3, [r4, #4]
     466:	1b9b      	subs	r3, r3, r6
     468:	ee07 3a90 	vmov	s15, r3
     46c:	600b      	str	r3, [r1, #0]
     46e:	eef8 7a67 	vcvt.f32.u32	s15, s15
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
     472:	ee67 7a87 	vmul.f32	s15, s15, s14
        hdma->State = HAL_DMA_STATE_READY;
     476:	edc2 7a00 	vstr	s15, [r2]
        __HAL_UNLOCK(hdma);
     47a:	b003      	add	sp, #12
     47c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
     480:	e0001000 	.word	0xe0001000
     484:	200090fc 	.word	0x200090fc
        (void) HAL_DMA_Abort(hdma);
     488:	20009120 	.word	0x20009120
        return HAL_ERROR;
     48c:	20009108 	.word	0x20009108
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     490:	20000008 	.word	0x20000008
     494:	20000440 	.word	0x20000440
     498:	30000000 	.word	0x30000000
     49c:	f3af 8000 	nop.w

000004a0 <oscillator_tick>:
     4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4a4:	4a3d      	ldr	r2, [pc, #244]	; (59c <oscillator_tick+0xfc>)
     4a6:	2500      	movs	r5, #0
     4a8:	4b3d      	ldr	r3, [pc, #244]	; (5a0 <oscillator_tick+0x100>)
     4aa:	4c3e      	ldr	r4, [pc, #248]	; (5a4 <oscillator_tick+0x104>)
     4ac:	4e3e      	ldr	r6, [pc, #248]	; (5a8 <oscillator_tick+0x108>)
     4ae:	f8df a10c 	ldr.w	sl, [pc, #268]	; 5bc <oscillator_tick+0x11c>
     4b2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 5c0 <oscillator_tick+0x120>
     4b6:	f8df 810c 	ldr.w	r8, [pc, #268]	; 5c4 <oscillator_tick+0x124>
     4ba:	4f3c      	ldr	r7, [pc, #240]	; (5ac <oscillator_tick+0x10c>)
     4bc:	f8df b108 	ldr.w	fp, [pc, #264]	; 5c8 <oscillator_tick+0x128>
     4c0:	ed2d 8b08 	vpush	{d8-d11}
     4c4:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
     4c8:	b087      	sub	sp, #28
     4ca:	eeb0 9a40 	vmov.f32	s18, s0
     4ce:	7015      	strb	r5, [r2, #0]
     4d0:	ed9f aa37 	vldr	s20, [pc, #220]	; 5b0 <oscillator_tick+0x110>
     4d4:	685b      	ldr	r3, [r3, #4]
     4d6:	eddf 9a37 	vldr	s19, [pc, #220]	; 5b4 <oscillator_tick+0x114>
     4da:	9303      	str	r3, [sp, #12]
     4dc:	ed94 7aa6 	vldr	s14, [r4, #664]	; 0x298
     4e0:	eeb0 0a49 	vmov.f32	s0, s18
     4e4:	edd4 7a83 	vldr	s15, [r4, #524]	; 0x20c
     4e8:	4630      	mov	r0, r6
     4ea:	eeb4 7aea 	vcmpe.f32	s14, s21
     4ee:	edd4 0a8d 	vldr	s1, [r4, #564]	; 0x234
     4f2:	eea7 0a8a 	vfma.f32	s0, s15, s20
     4f6:	ed94 8ab5 	vldr	s16, [r4, #724]	; 0x2d4
     4fa:	ed94 ba88 	vldr	s22, [r4, #544]	; 0x220
     4fe:	f504 7482 	add.w	r4, r4, #260	; 0x104
     502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     506:	edcd 0a02 	vstr	s1, [sp, #8]
     50a:	edd4 8a51 	vldr	s17, [r4, #324]	; 0x144
     50e:	bfcc      	ite	gt
     510:	2201      	movgt	r2, #1
     512:	2200      	movle	r2, #0
     514:	9201      	str	r2, [sp, #4]
     516:	f004 fcc7 	bl	4ea8 <__tExpSmooth_setDest_veneer>
     51a:	4630      	mov	r0, r6
     51c:	3604      	adds	r6, #4
     51e:	f004 fccb 	bl	4eb8 <__tExpSmooth_tick_veneer>
     522:	f004 fccd 	bl	4ec0 <__mtof_veneer>
     526:	ecfa 7a01 	vldmia	sl!, {s15}
     52a:	4629      	mov	r1, r5
     52c:	eddd 0a02 	vldr	s1, [sp, #8]
     530:	eea7 ba80 	vfma.f32	s22, s15, s0
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     534:	9a01      	ldr	r2, [sp, #4]
     536:	f859 3b04 	ldr.w	r3, [r9], #4
     53a:	a805      	add	r0, sp, #20
     53c:	edcd 9a05 	vstr	s19, [sp, #20]
     540:	3501      	adds	r5, #1
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     542:	eeb0 0a4b 	vmov.f32	s0, s22
     546:	4798      	blx	r3
     548:	eddd 6a05 	vldr	s13, [sp, #20]
     54c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     550:	ed9b 7a00 	vldr	s14, [fp]
    if(Timeout != HAL_MAX_DELAY)
     554:	ee68 6aa6 	vmul.f32	s13, s17, s13
     558:	ed94 6a38 	vldr	s12, [r4, #224]	; 0xe0
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
     55c:	2d03      	cmp	r5, #3
     55e:	ee77 7ac8 	vsub.f32	s15, s15, s16
     562:	ee26 7a87 	vmul.f32	s14, s13, s14
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
     566:	ece8 6a01 	vstmia	r8!, {s13}
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
     56a:	ee26 8a08 	vmul.f32	s16, s12, s16
     56e:	ee67 7a87 	vmul.f32	s15, s15, s14
    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
     572:	ee28 8a07 	vmul.f32	s16, s16, s14
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
     576:	ee67 7a86 	vmul.f32	s15, s15, s12
     57a:	eca7 8a01 	vstmia	r7!, {s16}
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
     57e:	edc7 7a02 	vstr	s15, [r7, #8]
     582:	d1ab      	bne.n	4dc <oscillator_tick+0x3c>
        return HAL_ERROR;
     584:	4b06      	ldr	r3, [pc, #24]	; (5a0 <oscillator_tick+0x100>)
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
     586:	9903      	ldr	r1, [sp, #12]
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
     588:	685b      	ldr	r3, [r3, #4]
        __HAL_UNLOCK(hdma);
     58a:	4a0b      	ldr	r2, [pc, #44]	; (5b8 <oscillator_tick+0x118>)
     58c:	1a5b      	subs	r3, r3, r1
        hdma->State = HAL_DMA_STATE_READY;
     58e:	6013      	str	r3, [r2, #0]
     590:	b007      	add	sp, #28
        return HAL_ERROR;
     592:	ecbd 8b08 	vpop	{d8-d11}
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
     596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     59a:	bf00      	nop
     59c:	2000c3f9 	.word	0x2000c3f9
     5a0:	e0001000 	.word	0xe0001000
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5a4:	2000eac0 	.word	0x2000eac0
     5a8:	2000073c 	.word	0x2000073c
     5ac:	200006d4 	.word	0x200006d4
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
     5b0:	3c23d70a 	.word	0x3c23d70a
     5b4:	00000000 	.word	0x00000000
     5b8:	20009118 	.word	0x20009118
     5bc:	20000444 	.word	0x20000444
     5c0:	20000790 	.word	0x20000790
     5c4:	2000908c 	.word	0x2000908c
	*ptr++ = (BYTE)val; val >>= 8;
     5c8:	20000010 	.word	0x20000010
     5cc:	f3af 8000 	nop.w
     5d0:	f3af 8000 	nop.w
     5d4:	f3af 8000 	nop.w
     5d8:	f3af 8000 	nop.w
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
     5dc:	f3af 8000 	nop.w

000005e0 <sawSquareTick>:
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
     5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5e2:	4c16      	ldr	r4, [pc, #88]	; (63c <sawSquareTick+0x5c>)
     5e4:	4617      	mov	r7, r2
     5e6:	4605      	mov	r5, r0
     5e8:	460e      	mov	r6, r1
     5ea:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		*d++ = (BYTE)val;
     5ee:	ed2d 8b02 	vpush	{d8}
     5f2:	eeb0 8a60 	vmov.f32	s16, s1
	*ptr++ = (BYTE)val; val >>= 8;
     5f6:	4620      	mov	r0, r4
     5f8:	f004 fbb2 	bl	4d60 <tMBSawPulse_setFreq>
     5fc:	4620      	mov	r0, r4
     5fe:	eeb0 0a48 	vmov.f32	s0, s16
     602:	f004 fc6d 	bl	4ee0 <__tMBSawPulse_setShape_veneer>
     606:	b96f      	cbnz	r7, 624 <sawSquareTick+0x44>
}
     608:	4620      	mov	r0, r4
	*ptr++ = (BYTE)val; val >>= 8;
     60a:	f003 fdd9 	bl	41c0 <tMBSawPulse_tick>
     60e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
	*ptr++ = (BYTE)val; val >>= 8;
     612:	edd5 7a00 	vldr	s15, [r5]
	*ptr++ = (BYTE)val; val >>= 8;
     616:	eee0 7a07 	vfma.f32	s15, s0, s14
     61a:	ecbd 8b02 	vpop	{d8}
	*ptr++ = (BYTE)val;
     61e:	edc5 7a00 	vstr	s15, [r5]
	const BYTE *s = (const BYTE*)src;
     622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     624:	4a06      	ldr	r2, [pc, #24]	; (640 <sawSquareTick+0x60>)
     626:	4620      	mov	r0, r4
     628:	4b06      	ldr	r3, [pc, #24]	; (644 <sawSquareTick+0x64>)
			*d++ = *s++;
     62a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
		} while (--cnt);
     62e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			*d++ = *s++;
     632:	ed93 0a00 	vldr	s0, [r3]
		} while (--cnt);
     636:	f004 fba3 	bl	4d80 <tMBSawPulse_sync>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
     63a:	e7e5      	b.n	608 <sawSquareTick+0x28>
     63c:	20000764 	.word	0x20000764
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
     640:	240140ec 	.word	0x240140ec
     644:	2000908c 	.word	0x2000908c
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
     648:	f3af 8000 	nop.w
     64c:	f3af 8000 	nop.w
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
     650:	f3af 8000 	nop.w
		*d++ = (BYTE)val;
     654:	f3af 8000 	nop.w
     658:	f3af 8000 	nop.w
     65c:	f3af 8000 	nop.w

00000660 <sineTriTick>:
     660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	*ptr++ = (BYTE)val; val >>= 8;
     662:	4c16      	ldr	r4, [pc, #88]	; (6bc <sineTriTick+0x5c>)
			pte[PTE_Boot] = 0;					/* Boot indicator */
			pte[PTE_StHead] = 1;				/* Start head */
			pte[PTE_StSec] = 1;					/* Start sector */
			pte[PTE_StCyl] = 0;					/* Start cylinder */
			pte[PTE_System] = sys;				/* System type */
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     664:	4617      	mov	r7, r2
     666:	4605      	mov	r5, r0
			pte[PTE_System] = sys;				/* System type */
     668:	460e      	mov	r6, r1
     66a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
	*ptr++ = (BYTE)val; val >>= 8;
     66e:	ed2d 8b02 	vpush	{d8}
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     672:	eeb0 8a60 	vmov.f32	s16, s1
	*ptr++ = (BYTE)val; val >>= 8;
     676:	4620      	mov	r0, r4
     678:	f004 fbfa 	bl	4e70 <__tMBSineTri_setFreq_veneer>
	*ptr++ = (BYTE)val; val >>= 8;
     67c:	4620      	mov	r0, r4
     67e:	eeb0 0a48 	vmov.f32	s0, s16
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     682:	f004 fbd5 	bl	4e30 <__tMBSineTri_setShape_veneer>
			pte[PTE_EdHead] = 254;				/* End head */
     686:	b96f      	cbnz	r7, 6a4 <sineTriTick+0x44>
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
     688:	4620      	mov	r0, r4
     68a:	f004 fc41 	bl	4f10 <__tMBSineTri_tick_veneer>
	*ptr++ = (BYTE)val; val >>= 8;
     68e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
			pte[PTE_EdHead] = 254;				/* End head */
     692:	edd5 7a00 	vldr	s15, [r5]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     696:	eee0 7a07 	vfma.f32	s15, s0, s14
     69a:	ecbd 8b02 	vpop	{d8}
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     69e:	edc5 7a00 	vstr	s15, [r5]
	*ptr++ = (BYTE)val;
     6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*ptr++ = (BYTE)val; val >>= 8;
     6a4:	4a06      	ldr	r2, [pc, #24]	; (6c0 <sineTriTick+0x60>)
     6a6:	4620      	mov	r0, r4
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     6a8:	4b06      	ldr	r3, [pc, #24]	; (6c4 <sineTriTick+0x64>)
     6aa:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
	*ptr++ = (BYTE)val; val >>= 8;
     6ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			pte[PTE_Boot] = 0;					/* Boot indicator */
     6b2:	ed93 0a00 	vldr	s0, [r3]
     6b6:	f004 fbbf 	bl	4e38 <__tMBSineTri_sync_veneer>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     6ba:	e7e5      	b.n	688 <sineTriTick+0x28>
     6bc:	200007c8 	.word	0x200007c8
     6c0:	240140ec 	.word	0x240140ec
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
     6c4:	2000908c 	.word	0x2000908c
     6c8:	f3af 8000 	nop.w
     6cc:	f3af 8000 	nop.w
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
     6d0:	f3af 8000 	nop.w
     6d4:	f3af 8000 	nop.w
				sys = 0x06;	/* FAT12/16 (>=64KS) */
     6d8:	f3af 8000 	nop.w
			sys = 0x0C;		/* FAT32X */
     6dc:	f3af 8000 	nop.w

000006e0 <sawTick>:
	const BYTE *s = (const BYTE*)src;
     6e0:	4b12      	ldr	r3, [pc, #72]	; (72c <sawTick+0x4c>)
     6e2:	b570      	push	{r4, r5, r6, lr}
     6e4:	4616      	mov	r6, r2
			*d++ = *s++;
     6e6:	b082      	sub	sp, #8
     6e8:	4604      	mov	r4, r0
		} while (--cnt);
     6ea:	eb03 0081 	add.w	r0, r3, r1, lsl #2
			*d++ = *s++;
     6ee:	460d      	mov	r5, r1
		} while (--cnt);
     6f0:	9001      	str	r0, [sp, #4]
     6f2:	f004 fb85 	bl	4e00 <__tMBSaw_setFreq_veneer>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
     6f6:	9801      	ldr	r0, [sp, #4]
     6f8:	b95e      	cbnz	r6, 712 <sawTick+0x32>
     6fa:	f004 fc65 	bl	4fc8 <__tMBSaw_tick_veneer>
     6fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     702:	edd4 7a00 	vldr	s15, [r4]
     706:	eee0 7a07 	vfma.f32	s15, s0, s14
     70a:	edc4 7a00 	vstr	s15, [r4]
     70e:	b002      	add	sp, #8
     710:	bd70      	pop	{r4, r5, r6, pc}
     712:	4a07      	ldr	r2, [pc, #28]	; (730 <sawTick+0x50>)
     714:	4b07      	ldr	r3, [pc, #28]	; (734 <sawTick+0x54>)
     716:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
     71a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     71e:	ed93 0a00 	vldr	s0, [r3]
     722:	f004 fc09 	bl	4f38 <__tMBSaw_sync_veneer>
     726:	9801      	ldr	r0, [sp, #4]
		tMBSaw_sync(&saw[v], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]]);
     728:	e7e7      	b.n	6fa <sawTick+0x1a>
     72a:	bf00      	nop
     72c:	20000758 	.word	0x20000758
     730:	240140ec 	.word	0x240140ec
     734:	2000908c 	.word	0x2000908c
     738:	f3af 8000 	nop.w
     73c:	f3af 8000 	nop.w

00000740 <pulseTick>:
{
     740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBPulse_setFreq(&pulse[v], freq);
     742:	4c16      	ldr	r4, [pc, #88]	; (79c <pulseTick+0x5c>)
{
     744:	4617      	mov	r7, r2
     746:	4605      	mov	r5, r0
     748:	460e      	mov	r6, r1
    tMBPulse_setFreq(&pulse[v], freq);
     74a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
{
     74e:	ed2d 8b02 	vpush	{d8}
     752:	eeb0 8a60 	vmov.f32	s16, s1
    tMBPulse_setFreq(&pulse[v], freq);
     756:	4620      	mov	r0, r4
     758:	f004 fb56 	bl	4e08 <__tMBPulse_setFreq_veneer>
    tMBPulse_setWidth(&pulse[v], shape);
     75c:	4620      	mov	r0, r4
     75e:	eeb0 0a48 	vmov.f32	s0, s16
     762:	f004 fc35 	bl	4fd0 <__tMBPulse_setWidth_veneer>
    if (sync)
     766:	b96f      	cbnz	r7, 784 <pulseTick+0x44>
    *sample += tMBPulse_tick(&pulse[v]) * 2.f;;
     768:	4620      	mov	r0, r4
     76a:	f004 fc01 	bl	4f70 <__tMBPulse_tick_veneer>
     76e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     772:	edd5 7a00 	vldr	s15, [r5]
     776:	eee0 7a07 	vfma.f32	s15, s0, s14
}
     77a:	ecbd 8b02 	vpop	{d8}
    *sample += tMBPulse_tick(&pulse[v]) * 2.f;;
     77e:	edc5 7a00 	vstr	s15, [r5]
}
     782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tMBPulse_sync(&pulse[v], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]]);
     784:	4a06      	ldr	r2, [pc, #24]	; (7a0 <pulseTick+0x60>)
     786:	4620      	mov	r0, r4
     788:	4b06      	ldr	r3, [pc, #24]	; (7a4 <pulseTick+0x64>)
     78a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
     78e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     792:	ed93 0a00 	vldr	s0, [r3]
     796:	f004 fbc3 	bl	4f20 <__tMBPulse_sync_veneer>
     79a:	e7e5      	b.n	768 <pulseTick+0x28>
     79c:	20000748 	.word	0x20000748
     7a0:	240140ec 	.word	0x240140ec
     7a4:	2000908c 	.word	0x2000908c
     7a8:	f3af 8000 	nop.w
     7ac:	f3af 8000 	nop.w
     7b0:	f3af 8000 	nop.w
     7b4:	f3af 8000 	nop.w
     7b8:	f3af 8000 	nop.w
     7bc:	f3af 8000 	nop.w

000007c0 <sineTick>:
    tCycle_setFreq(&sine[v], freq);
     7c0:	4b09      	ldr	r3, [pc, #36]	; (7e8 <sineTick+0x28>)
{
     7c2:	b510      	push	{r4, lr}
     7c4:	4604      	mov	r4, r0
     7c6:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v], freq);
     7c8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     7cc:	9001      	str	r0, [sp, #4]
     7ce:	f004 fbdf 	bl	4f90 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v]);
     7d2:	9801      	ldr	r0, [sp, #4]
     7d4:	f004 fba0 	bl	4f18 <__tCycle_tick_veneer>
     7d8:	edd4 7a00 	vldr	s15, [r4]
     7dc:	ee37 0a80 	vadd.f32	s0, s15, s0
     7e0:	ed84 0a00 	vstr	s0, [r4]
}
     7e4:	b002      	add	sp, #8
     7e6:	bd10      	pop	{r4, pc}
     7e8:	200007bc 	.word	0x200007bc
     7ec:	f3af 8000 	nop.w
     7f0:	f3af 8000 	nop.w
     7f4:	f3af 8000 	nop.w
     7f8:	f3af 8000 	nop.w
     7fc:	f3af 8000 	nop.w

00000800 <triTick>:
{
     800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBTriangle_setFreq(&tri[v], freq);
     802:	4c16      	ldr	r4, [pc, #88]	; (85c <triTick+0x5c>)
{
     804:	4617      	mov	r7, r2
     806:	4605      	mov	r5, r0
     808:	460e      	mov	r6, r1
    tMBTriangle_setFreq(&tri[v], freq);
     80a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
{
     80e:	ed2d 8b02 	vpush	{d8}
     812:	eeb0 8a60 	vmov.f32	s16, s1
    tMBTriangle_setFreq(&tri[v], freq);
     816:	4620      	mov	r0, r4
     818:	f004 fb3e 	bl	4e98 <__tMBTriangle_setFreq_veneer>
    tMBTriangle_setWidth(&tri[v], shape);
     81c:	4620      	mov	r0, r4
     81e:	eeb0 0a48 	vmov.f32	s0, s16
     822:	f004 fb9d 	bl	4f60 <__tMBTriangle_setWidth_veneer>
    if (sync)
     826:	b96f      	cbnz	r7, 844 <triTick+0x44>
    *sample += tMBTriangle_tick(&tri[v]) * 2.0f;;
     828:	4620      	mov	r0, r4
     82a:	f004 fbc5 	bl	4fb8 <__tMBTriangle_tick_veneer>
     82e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     832:	edd5 7a00 	vldr	s15, [r5]
     836:	eee0 7a07 	vfma.f32	s15, s0, s14
}
     83a:	ecbd 8b02 	vpop	{d8}
    *sample += tMBTriangle_tick(&tri[v]) * 2.0f;;
     83e:	edc5 7a00 	vstr	s15, [r5]
}
     842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tMBTriangle_sync(&tri[v], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]]);
     844:	4a06      	ldr	r2, [pc, #24]	; (860 <triTick+0x60>)
     846:	4620      	mov	r0, r4
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <triTick+0x64>)
     84a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
     84e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     852:	ed93 0a00 	vldr	s0, [r3]
     856:	f004 fb07 	bl	4e68 <__tMBTriangle_sync_veneer>
     85a:	e7e5      	b.n	828 <triTick+0x28>
     85c:	2000912c 	.word	0x2000912c
     860:	240140ec 	.word	0x240140ec
     864:	2000908c 	.word	0x2000908c
     868:	f3af 8000 	nop.w
     86c:	f3af 8000 	nop.w
     870:	f3af 8000 	nop.w
     874:	f3af 8000 	nop.w
     878:	f3af 8000 	nop.w
     87c:	f3af 8000 	nop.w

00000880 <userTick>:
}
     880:	4770      	bx	lr
     882:	bf00      	nop
     884:	f3af 8000 	nop.w
     888:	f3af 8000 	nop.w
     88c:	f3af 8000 	nop.w
     890:	f3af 8000 	nop.w
     894:	f3af 8000 	nop.w
     898:	f3af 8000 	nop.w
     89c:	f3af 8000 	nop.w

000008a0 <filter_tick>:
		float enabled = filtParams[FilterEnabled].realVal;
     8a0:	4b54      	ldr	r3, [pc, #336]	; (9f4 <filter_tick+0x154>)
		if (!enabledFilt[f]) continue;
     8a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	interruptChecker = 0;
     8a6:	4a54      	ldr	r2, [pc, #336]	; (9f8 <filter_tick+0x158>)
     8a8:	2100      	movs	r1, #0
{
     8aa:	b570      	push	{r4, r5, r6, lr}
     8ac:	ed2d 8b04 	vpush	{d8-d9}
		float enabled = filtParams[FilterEnabled].realVal;
     8b0:	ed93 9a00 	vldr	s18, [r3]
{
     8b4:	eeb0 8a40 	vmov.f32	s16, s0
	interruptChecker = 0;
     8b8:	7011      	strb	r1, [r2, #0]
{
     8ba:	b082      	sub	sp, #8
		if (!enabledFilt[f]) continue;
     8bc:	eeb4 9ae7 	vcmpe.f32	s18, s15
	uint32_t tempCount1 = DWT->CYCCNT;
     8c0:	4a4e      	ldr	r2, [pc, #312]	; (9fc <filter_tick+0x15c>)
{
     8c2:	4604      	mov	r4, r0
	uint32_t tempCount1 = DWT->CYCCNT;
     8c4:	6856      	ldr	r6, [r2, #4]
		if (!enabledFilt[f]) continue;
     8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     8ca:	d91b      	bls.n	904 <filter_tick+0x64>
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     8cc:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
     8d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
     8d4:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
     8d8:	eddf 0a49 	vldr	s1, [pc, #292]	; a00 <filter_tick+0x160>
     8dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
     8e0:	ed9f 1a48 	vldr	s2, [pc, #288]	; a04 <filter_tick+0x164>
     8e4:	ed9f 0a48 	vldr	s0, [pc, #288]	; a08 <filter_tick+0x168>
     8e8:	eee8 7a07 	vfma.f32	s15, s16, s14
     8ec:	ee67 0aa0 	vmul.f32	s1, s15, s1
     8f0:	f003 fae6 	bl	3ec0 <LEAF_clip>
		tExpSmooth_setDest(&filterCutoffSmoother[f], cutoff[f]);
     8f4:	4845      	ldr	r0, [pc, #276]	; (a0c <filter_tick+0x16c>)
     8f6:	f004 fad7 	bl	4ea8 <__tExpSmooth_setDest_veneer>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f]);
     8fa:	4844      	ldr	r0, [pc, #272]	; (a0c <filter_tick+0x16c>)
     8fc:	f004 fadc 	bl	4eb8 <__tExpSmooth_tick_veneer>
     900:	ed8d 0a00 	vstr	s0, [sp]
		float enabled = filtParams[FilterEnabled].realVal;
     904:	4b42      	ldr	r3, [pc, #264]	; (a10 <filter_tick+0x170>)
		if (!enabledFilt[f]) continue;
     906:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal;
     90a:	edd3 8a00 	vldr	s17, [r3]
		if (!enabledFilt[f]) continue;
     90e:	eef4 8ae7 	vcmpe.f32	s17, s15
     912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     916:	d91b      	bls.n	950 <filter_tick+0xb0>
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
     918:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
     91c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
     920:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
     924:	eddf 0a36 	vldr	s1, [pc, #216]	; a00 <filter_tick+0x160>
     928:	ee77 7ae6 	vsub.f32	s15, s15, s13
     92c:	ed9f 1a35 	vldr	s2, [pc, #212]	; a04 <filter_tick+0x164>
     930:	ed9f 0a35 	vldr	s0, [pc, #212]	; a08 <filter_tick+0x168>
     934:	eee7 7a08 	vfma.f32	s15, s14, s16
     938:	ee67 0aa0 	vmul.f32	s1, s15, s1
     93c:	f003 fac0 	bl	3ec0 <LEAF_clip>
		tExpSmooth_setDest(&filterCutoffSmoother[f], cutoff[f]);
     940:	4834      	ldr	r0, [pc, #208]	; (a14 <filter_tick+0x174>)
     942:	f004 fab1 	bl	4ea8 <__tExpSmooth_setDest_veneer>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f]);
     946:	4833      	ldr	r0, [pc, #204]	; (a14 <filter_tick+0x174>)
     948:	f004 fab6 	bl	4eb8 <__tExpSmooth_tick_veneer>
     94c:	ed8d 0a01 	vstr	s0, [sp, #4]
	if (enabledFilt[0])
     950:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	float  sp = params[FilterSeriesParallelMix].realVal;
     954:	4b30      	ldr	r3, [pc, #192]	; (a18 <filter_tick+0x178>)
     956:	ed93 8a00 	vldr	s16, [r3]
	if (enabledFilt[0])
     95a:	eeb4 9ae7 	vcmpe.f32	s18, s15
     95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     962:	dd06      	ble.n	972 <filter_tick+0xd2>
		filterTick[0](&samples[0], 0, cutoff[0]);
     964:	4b2d      	ldr	r3, [pc, #180]	; (a1c <filter_tick+0x17c>)
     966:	2100      	movs	r1, #0
     968:	ed9d 0a00 	vldr	s0, [sp]
     96c:	4620      	mov	r0, r4
     96e:	681b      	ldr	r3, [r3, #0]
     970:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
     972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
     976:	edd4 7a01 	vldr	s15, [r4, #4]
	if (enabledFilt[1])
     97a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	float sendToFilter2 = samples[0] * (1.0f - sp);
     97e:	edd4 0a00 	vldr	s1, [r4]
     982:	ee37 7a48 	vsub.f32	s14, s14, s16
	if (enabledFilt[1])
     986:	eef4 8ae6 	vcmpe.f32	s17, s13
	samples[1] += sendToFilter2;
     98a:	eee0 7a87 	vfma.f32	s15, s1, s14
	if (enabledFilt[1])
     98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	samples[1] += sendToFilter2;
     992:	edc4 7a01 	vstr	s15, [r4, #4]
	if (enabledFilt[1])
     996:	dd08      	ble.n	9aa <filter_tick+0x10a>
		filterTick[1](&samples[1], 1, cutoff[1]);
     998:	4b20      	ldr	r3, [pc, #128]	; (a1c <filter_tick+0x17c>)
     99a:	2101      	movs	r1, #1
     99c:	ed9d 0a01 	vldr	s0, [sp, #4]
     9a0:	1d20      	adds	r0, r4, #4
     9a2:	685b      	ldr	r3, [r3, #4]
     9a4:	4798      	blx	r3
	sourceValues[MACRO_SOURCE_OFFSET] = LEAF_clip(0.0f, samples[0], 1.0f);
     9a6:	edd4 0a00 	vldr	s1, [r4]
     9aa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     9ae:	ed9f 0a16 	vldr	s0, [pc, #88]	; a08 <filter_tick+0x168>
     9b2:	f003 fa85 	bl	3ec0 <LEAF_clip>
     9b6:	eef0 7a40 	vmov.f32	s15, s0
     9ba:	4d19      	ldr	r5, [pc, #100]	; (a20 <filter_tick+0x180>)
	sourceValues[MACRO_SOURCE_OFFSET + 1] = LEAF_clip(0.0f, samples[1], 1.0f);
     9bc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     9c0:	ed9f 0a11 	vldr	s0, [pc, #68]	; a08 <filter_tick+0x168>
	sourceValues[MACRO_SOURCE_OFFSET] = LEAF_clip(0.0f, samples[0], 1.0f);
     9c4:	edc5 7a04 	vstr	s15, [r5, #16]
	sourceValues[MACRO_SOURCE_OFFSET + 1] = LEAF_clip(0.0f, samples[1], 1.0f);
     9c8:	edd4 0a01 	vldr	s1, [r4, #4]
     9cc:	f003 fa78 	bl	3ec0 <LEAF_clip>
     9d0:	ed85 0a05 	vstr	s0, [r5, #20]
	return samples[1] + (samples[0] * sp);
     9d4:	edd4 7a00 	vldr	s15, [r4]
     9d8:	ed94 0a01 	vldr	s0, [r4, #4]
	timeFilt = DWT->CYCCNT - tempCount1;
     9dc:	4b07      	ldr	r3, [pc, #28]	; (9fc <filter_tick+0x15c>)
}
     9de:	eea7 0a88 	vfma.f32	s0, s15, s16
	timeFilt = DWT->CYCCNT - tempCount1;
     9e2:	4a10      	ldr	r2, [pc, #64]	; (a24 <filter_tick+0x184>)
     9e4:	685b      	ldr	r3, [r3, #4]
     9e6:	1b9b      	subs	r3, r3, r6
     9e8:	6013      	str	r3, [r2, #0]
}
     9ea:	b002      	add	sp, #8
     9ec:	ecbd 8b04 	vpop	{d8-d9}
     9f0:	bd70      	pop	{r4, r5, r6, pc}
     9f2:	bf00      	nop
     9f4:	2000f230 	.word	0x2000f230
     9f8:	2000c3f9 	.word	0x2000c3f9
     9fc:	e0001000 	.word	0xe0001000
     a00:	420fb824 	.word	0x420fb824
     a04:	457ff000 	.word	0x457ff000
     a08:	00000000 	.word	0x00000000
     a0c:	20000224 	.word	0x20000224
     a10:	2000f2a8 	.word	0x2000f2a8
     a14:	20000228 	.word	0x20000228
     a18:	2000f320 	.word	0x2000f320
     a1c:	20000234 	.word	0x20000234
     a20:	2000908c 	.word	0x2000908c
     a24:	20009104 	.word	0x20009104
     a28:	f3af 8000 	nop.w
     a2c:	f3af 8000 	nop.w
     a30:	f3af 8000 	nop.w
     a34:	f3af 8000 	nop.w
     a38:	f3af 8000 	nop.w
     a3c:	f3af 8000 	nop.w

00000a40 <lowpassTick>:
	tSVF_setFreqFast(&lowpass[v], cutoff);
     a40:	4b0d      	ldr	r3, [pc, #52]	; (a78 <lowpassTick+0x38>)
{
     a42:	b530      	push	{r4, r5, lr}
     a44:	4604      	mov	r4, r0
     a46:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v], cutoff);
     a48:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     a4c:	008d      	lsls	r5, r1, #2
     a4e:	9001      	str	r0, [sp, #4]
     a50:	f004 faaa 	bl	4fa8 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v], *sample);
     a54:	ed94 0a00 	vldr	s0, [r4]
     a58:	9801      	ldr	r0, [sp, #4]
     a5a:	f004 f9e5 	bl	4e28 <__tSVF_tick_veneer>
    *sample *= filterGain[v];
     a5e:	4907      	ldr	r1, [pc, #28]	; (a7c <lowpassTick+0x3c>)
	*sample = tSVF_tick(&lowpass[v], *sample);
     a60:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v];
     a64:	4429      	add	r1, r5
     a66:	edd1 7a00 	vldr	s15, [r1]
     a6a:	ee27 0a80 	vmul.f32	s0, s15, s0
     a6e:	ed84 0a00 	vstr	s0, [r4]
}
     a72:	b003      	add	sp, #12
     a74:	bd30      	pop	{r4, r5, pc}
     a76:	bf00      	nop
     a78:	2000054c 	.word	0x2000054c
     a7c:	2000022c 	.word	0x2000022c

00000a80 <highpassTick>:
	tSVF_setFreqFast(&highpass[v], cutoff);
     a80:	4b0d      	ldr	r3, [pc, #52]	; (ab8 <highpassTick+0x38>)
{
     a82:	b530      	push	{r4, r5, lr}
     a84:	4604      	mov	r4, r0
     a86:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v], cutoff);
     a88:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     a8c:	008d      	lsls	r5, r1, #2
     a8e:	9001      	str	r0, [sp, #4]
     a90:	f004 fa8a 	bl	4fa8 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v], *sample);
     a94:	ed94 0a00 	vldr	s0, [r4]
     a98:	9801      	ldr	r0, [sp, #4]
     a9a:	f004 f9c5 	bl	4e28 <__tSVF_tick_veneer>
    *sample *= filterGain[v];
     a9e:	4907      	ldr	r1, [pc, #28]	; (abc <highpassTick+0x3c>)
	*sample = tSVF_tick(&highpass[v], *sample);
     aa0:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v];
     aa4:	4429      	add	r1, r5
     aa6:	edd1 7a00 	vldr	s15, [r1]
     aaa:	ee27 0a80 	vmul.f32	s0, s15, s0
     aae:	ed84 0a00 	vstr	s0, [r4]
}
     ab2:	b003      	add	sp, #12
     ab4:	bd30      	pop	{r4, r5, pc}
     ab6:	bf00      	nop
     ab8:	20000470 	.word	0x20000470
     abc:	2000022c 	.word	0x2000022c

00000ac0 <bandpassTick>:
	tSVF_setFreqFast(&bandpass[v], cutoff);
     ac0:	4b0d      	ldr	r3, [pc, #52]	; (af8 <bandpassTick+0x38>)
{
     ac2:	b530      	push	{r4, r5, lr}
     ac4:	4604      	mov	r4, r0
     ac6:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v], cutoff);
     ac8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     acc:	008d      	lsls	r5, r1, #2
     ace:	9001      	str	r0, [sp, #4]
     ad0:	f004 fa6a 	bl	4fa8 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v], *sample);
     ad4:	ed94 0a00 	vldr	s0, [r4]
     ad8:	9801      	ldr	r0, [sp, #4]
     ada:	f004 f9a5 	bl	4e28 <__tSVF_tick_veneer>
    *sample *= filterGain[v];
     ade:	4907      	ldr	r1, [pc, #28]	; (afc <bandpassTick+0x3c>)
	*sample = tSVF_tick(&bandpass[v], *sample);
     ae0:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v];
     ae4:	4429      	add	r1, r5
     ae6:	edd1 7a00 	vldr	s15, [r1]
     aea:	ee27 0a80 	vmul.f32	s0, s15, s0
     aee:	ed84 0a00 	vstr	s0, [r4]
}
     af2:	b003      	add	sp, #12
     af4:	bd30      	pop	{r4, r5, pc}
     af6:	bf00      	nop
     af8:	20000180 	.word	0x20000180
     afc:	2000022c 	.word	0x2000022c

00000b00 <diodeLowpassTick>:
	tDiodeFilter_setFreqFast(&diodeFilters[v], cutoff);
     b00:	4b0d      	ldr	r3, [pc, #52]	; (b38 <diodeLowpassTick+0x38>)
{
     b02:	b530      	push	{r4, r5, lr}
     b04:	4604      	mov	r4, r0
     b06:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v], cutoff);
     b08:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     b0c:	008d      	lsls	r5, r1, #2
     b0e:	9001      	str	r0, [sp, #4]
     b10:	f004 f9ea 	bl	4ee8 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tick(&diodeFilters[v], *sample);
     b14:	ed94 0a00 	vldr	s0, [r4]
     b18:	9801      	ldr	r0, [sp, #4]
     b1a:	f004 f9a1 	bl	4e60 <__tDiodeFilter_tick_veneer>
    *sample *= filterGain[v];
     b1e:	4907      	ldr	r1, [pc, #28]	; (b3c <diodeLowpassTick+0x3c>)
	*sample = tDiodeFilter_tick(&diodeFilters[v], *sample);
     b20:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v];
     b24:	4429      	add	r1, r5
     b26:	edd1 7a00 	vldr	s15, [r1]
     b2a:	ee27 0a80 	vmul.f32	s0, s15, s0
     b2e:	ed84 0a00 	vstr	s0, [r4]
}
     b32:	b003      	add	sp, #12
     b34:	bd30      	pop	{r4, r5, pc}
     b36:	bf00      	nop
     b38:	200001fc 	.word	0x200001fc
     b3c:	2000022c 	.word	0x2000022c

00000b40 <VZpeakTick>:
	tVZFilter_setFreqFast(&VZfilterPeak[v], cutoff);
     b40:	4b08      	ldr	r3, [pc, #32]	; (b64 <VZpeakTick+0x24>)
{
     b42:	b510      	push	{r4, lr}
     b44:	4604      	mov	r4, r0
     b46:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterPeak[v], cutoff);
     b48:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     b4c:	9001      	str	r0, [sp, #4]
     b4e:	f004 f947 	bl	4de0 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterPeak[v], *sample);
     b52:	9801      	ldr	r0, [sp, #4]
     b54:	ed94 0a00 	vldr	s0, [r4]
     b58:	f004 f992 	bl	4e80 <__tVZFilter_tickEfficient_veneer>
     b5c:	ed84 0a00 	vstr	s0, [r4]
}
     b60:	b002      	add	sp, #8
     b62:	bd10      	pop	{r4, pc}
     b64:	20000174 	.word	0x20000174
     b68:	f3af 8000 	nop.w
     b6c:	f3af 8000 	nop.w
     b70:	f3af 8000 	nop.w
     b74:	f3af 8000 	nop.w
     b78:	f3af 8000 	nop.w
     b7c:	f3af 8000 	nop.w

00000b80 <VZlowshelfTick>:
	tVZFilter_setFreqFast(&VZfilterLS[v], cutoff);
     b80:	4b08      	ldr	r3, [pc, #32]	; (ba4 <VZlowshelfTick+0x24>)
{
     b82:	b510      	push	{r4, lr}
     b84:	4604      	mov	r4, r0
     b86:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterLS[v], cutoff);
     b88:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     b8c:	9001      	str	r0, [sp, #4]
     b8e:	f004 f927 	bl	4de0 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterLS[v], *sample);
     b92:	9801      	ldr	r0, [sp, #4]
     b94:	ed94 0a00 	vldr	s0, [r4]
     b98:	f004 f972 	bl	4e80 <__tVZFilter_tickEfficient_veneer>
     b9c:	ed84 0a00 	vstr	s0, [r4]
}
     ba0:	b002      	add	sp, #8
     ba2:	bd10      	pop	{r4, pc}
     ba4:	2000016c 	.word	0x2000016c
     ba8:	f3af 8000 	nop.w
     bac:	f3af 8000 	nop.w
     bb0:	f3af 8000 	nop.w
     bb4:	f3af 8000 	nop.w
     bb8:	f3af 8000 	nop.w
     bbc:	f3af 8000 	nop.w

00000bc0 <VZhighshelfTick>:
	tVZFilter_setFreqFast(&VZfilterHS[v], cutoff);
     bc0:	4b08      	ldr	r3, [pc, #32]	; (be4 <VZhighshelfTick+0x24>)
{
     bc2:	b510      	push	{r4, lr}
     bc4:	4604      	mov	r4, r0
     bc6:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterHS[v], cutoff);
     bc8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     bcc:	9001      	str	r0, [sp, #4]
     bce:	f004 f907 	bl	4de0 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterHS[v], *sample);
     bd2:	9801      	ldr	r0, [sp, #4]
     bd4:	ed94 0a00 	vldr	s0, [r4]
     bd8:	f004 f952 	bl	4e80 <__tVZFilter_tickEfficient_veneer>
     bdc:	ed84 0a00 	vstr	s0, [r4]
}
     be0:	b002      	add	sp, #8
     be2:	bd10      	pop	{r4, pc}
     be4:	20000164 	.word	0x20000164
     be8:	f3af 8000 	nop.w
     bec:	f3af 8000 	nop.w
     bf0:	f3af 8000 	nop.w
     bf4:	f3af 8000 	nop.w
     bf8:	f3af 8000 	nop.w
     bfc:	f3af 8000 	nop.w

00000c00 <VZbandrejectTick>:
	tVZFilter_setFreqFast(&VZfilterBR[v], cutoff);
     c00:	4b0d      	ldr	r3, [pc, #52]	; (c38 <VZbandrejectTick+0x38>)
{
     c02:	b530      	push	{r4, r5, lr}
     c04:	4604      	mov	r4, r0
     c06:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v], cutoff);
     c08:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     c0c:	008d      	lsls	r5, r1, #2
     c0e:	9001      	str	r0, [sp, #4]
     c10:	f004 f8e6 	bl	4de0 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v], *sample);
     c14:	ed94 0a00 	vldr	s0, [r4]
     c18:	9801      	ldr	r0, [sp, #4]
     c1a:	f004 f931 	bl	4e80 <__tVZFilter_tickEfficient_veneer>
    *sample *= filterGain[v];
     c1e:	4907      	ldr	r1, [pc, #28]	; (c3c <VZbandrejectTick+0x3c>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v], *sample);
     c20:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v];
     c24:	4429      	add	r1, r5
     c26:	edd1 7a00 	vldr	s15, [r1]
     c2a:	ee27 0a80 	vmul.f32	s0, s15, s0
     c2e:	ed84 0a00 	vstr	s0, [r4]
}
     c32:	b003      	add	sp, #12
     c34:	bd30      	pop	{r4, r5, pc}
     c36:	bf00      	nop
     c38:	2000015c 	.word	0x2000015c
     c3c:	2000022c 	.word	0x2000022c

00000c40 <LadderLowpassTick>:
	tLadderFilter_setFreqFast(&Ladderfilter[v], cutoff);
     c40:	4b0d      	ldr	r3, [pc, #52]	; (c78 <LadderLowpassTick+0x38>)
{
     c42:	b530      	push	{r4, r5, lr}
     c44:	4604      	mov	r4, r0
     c46:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v], cutoff);
     c48:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     c4c:	008d      	lsls	r5, r1, #2
     c4e:	9001      	str	r0, [sp, #4]
     c50:	f004 f92e 	bl	4eb0 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v], *sample);
     c54:	ed94 0a00 	vldr	s0, [r4]
     c58:	9801      	ldr	r0, [sp, #4]
     c5a:	f004 f9a1 	bl	4fa0 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v];
     c5e:	4907      	ldr	r1, [pc, #28]	; (c7c <LadderLowpassTick+0x3c>)
	*sample = tLadderFilter_tick(&Ladderfilter[v], *sample);
     c60:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v];
     c64:	4429      	add	r1, r5
     c66:	edd1 7a00 	vldr	s15, [r1]
     c6a:	ee27 0a80 	vmul.f32	s0, s15, s0
     c6e:	ed84 0a00 	vstr	s0, [r4]
}
     c72:	b003      	add	sp, #12
     c74:	bd30      	pop	{r4, r5, pc}
     c76:	bf00      	nop
     c78:	20000154 	.word	0x20000154
     c7c:	2000022c 	.word	0x2000022c

00000c80 <setFreqMultPitch>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal > 0.5f) ///check for value of 1 since this is a float
     c80:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     c84:	4a0f      	ldr	r2, [pc, #60]	; (cc4 <setFreqMultPitch+0x44>)
     c86:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     c8a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     c8e:	3320      	adds	r3, #32
     c90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     c94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     c98:	ed93 7a01 	vldr	s14, [r3, #4]
     c9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
     ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     ca4:	dc0d      	bgt.n	cc2 <setFreqMultPitch+0x42>
		freqMult[osc] = powf(1.059463094359295f, pitch);
     ca6:	eef0 0a40 	vmov.f32	s1, s0
     caa:	ed9f 0a07 	vldr	s0, [pc, #28]	; cc8 <setFreqMultPitch+0x48>
{
     cae:	b510      	push	{r4, lr}
     cb0:	4604      	mov	r4, r0
		freqMult[osc] = powf(1.059463094359295f, pitch);
     cb2:	f004 f8a1 	bl	4df8 <__powf_veneer>
     cb6:	4805      	ldr	r0, [pc, #20]	; (ccc <setFreqMultPitch+0x4c>)
     cb8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
     cbc:	ed84 0a00 	vstr	s0, [r4]
}
     cc0:	bd10      	pop	{r4, pc}
     cc2:	4770      	bx	lr
     cc4:	2000eac0 	.word	0x2000eac0
     cc8:	3f879c7d 	.word	0x3f879c7d
     ccc:	20000444 	.word	0x20000444
     cd0:	f3af 8000 	nop.w
     cd4:	f3af 8000 	nop.w
     cd8:	f3af 8000 	nop.w
     cdc:	f3af 8000 	nop.w

00000ce0 <setFreqMultHarm>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal > 0.5f) ///check for value of 1 since this is a float
     ce0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     ce4:	4a16      	ldr	r2, [pc, #88]	; (d40 <setFreqMultHarm+0x60>)
     ce6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     cea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     cee:	3320      	adds	r3, #32
     cf0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     cf4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     cf8:	ed93 7a01 	vldr	s14, [r3, #4]
     cfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
     d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d04:	dd01      	ble.n	d0a <setFreqMultHarm+0x2a>
		harm = roundf(harm);
     d06:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
     d0a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		freqMult[osc] = (harm + 1);
     d0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
     d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     d16:	db07      	blt.n	d28 <setFreqMultHarm+0x48>
		freqMult[osc] = (harm + 1);
     d18:	4b0a      	ldr	r3, [pc, #40]	; (d44 <setFreqMultHarm+0x64>)
     d1a:	ee30 0a27 	vadd.f32	s0, s0, s15
     d1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     d22:	ed80 0a00 	vstr	s0, [r0]
}
     d26:	4770      	bx	lr
		freqMult[osc] = (1.0f / fabsf((harm - 1)));
     d28:	ee30 0a67 	vsub.f32	s0, s0, s15
     d2c:	4b05      	ldr	r3, [pc, #20]	; (d44 <setFreqMultHarm+0x64>)
     d2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     d32:	eeb0 7ac0 	vabs.f32	s14, s0
     d36:	ee87 0a87 	vdiv.f32	s0, s15, s14
     d3a:	ed80 0a00 	vstr	s0, [r0]
}
     d3e:	4770      	bx	lr
     d40:	2000eac0 	.word	0x2000eac0
     d44:	20000444 	.word	0x20000444
     d48:	f3af 8000 	nop.w
     d4c:	f3af 8000 	nop.w
     d50:	f3af 8000 	nop.w
     d54:	f3af 8000 	nop.w
     d58:	f3af 8000 	nop.w
     d5c:	f3af 8000 	nop.w

00000d60 <lowpassSetQ>:
    tSVF_setQ(&lowpass[v], q);
     d60:	4b02      	ldr	r3, [pc, #8]	; (d6c <lowpassSetQ+0xc>)
     d62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     d66:	f004 b8cf 	b.w	4f08 <__tSVF_setQ_veneer>
     d6a:	bf00      	nop
     d6c:	2000054c 	.word	0x2000054c
     d70:	f3af 8000 	nop.w
     d74:	f3af 8000 	nop.w
     d78:	f3af 8000 	nop.w
     d7c:	f3af 8000 	nop.w

00000d80 <highpassSetQ>:
    tSVF_setQ(&highpass[v], q);
     d80:	4b02      	ldr	r3, [pc, #8]	; (d8c <highpassSetQ+0xc>)
     d82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     d86:	f004 b8bf 	b.w	4f08 <__tSVF_setQ_veneer>
     d8a:	bf00      	nop
     d8c:	20000470 	.word	0x20000470
     d90:	f3af 8000 	nop.w
     d94:	f3af 8000 	nop.w
     d98:	f3af 8000 	nop.w
     d9c:	f3af 8000 	nop.w

00000da0 <bandpassSetQ>:
    tSVF_setQ(&bandpass[v], q);
     da0:	4b02      	ldr	r3, [pc, #8]	; (dac <bandpassSetQ+0xc>)
     da2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     da6:	f004 b8af 	b.w	4f08 <__tSVF_setQ_veneer>
     daa:	bf00      	nop
     dac:	20000180 	.word	0x20000180
     db0:	f3af 8000 	nop.w
     db4:	f3af 8000 	nop.w
     db8:	f3af 8000 	nop.w
     dbc:	f3af 8000 	nop.w

00000dc0 <diodeLowpassSetQ>:
	tDiodeFilter_setQ(&diodeFilters[v], q);
     dc0:	4b02      	ldr	r3, [pc, #8]	; (dcc <diodeLowpassSetQ+0xc>)
     dc2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     dc6:	f004 b89b 	b.w	4f00 <__tDiodeFilter_setQ_veneer>
     dca:	bf00      	nop
     dcc:	200001fc 	.word	0x200001fc
     dd0:	f3af 8000 	nop.w
     dd4:	f3af 8000 	nop.w
     dd8:	f3af 8000 	nop.w
     ddc:	f3af 8000 	nop.w

00000de0 <VZpeakSetQ>:
	tVZFilter_setResonance(&VZfilterPeak[v], q);
     de0:	4b02      	ldr	r3, [pc, #8]	; (dec <VZpeakSetQ+0xc>)
     de2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     de6:	f004 b8b3 	b.w	4f50 <__tVZFilter_setResonance_veneer>
     dea:	bf00      	nop
     dec:	20000174 	.word	0x20000174
     df0:	f3af 8000 	nop.w
     df4:	f3af 8000 	nop.w
     df8:	f3af 8000 	nop.w
     dfc:	f3af 8000 	nop.w

00000e00 <VZlowshelfSetQ>:
	tVZFilter_setResonance(&VZfilterLS[v], q);
     e00:	4b02      	ldr	r3, [pc, #8]	; (e0c <VZlowshelfSetQ+0xc>)
     e02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e06:	f004 b8a3 	b.w	4f50 <__tVZFilter_setResonance_veneer>
     e0a:	bf00      	nop
     e0c:	2000016c 	.word	0x2000016c
     e10:	f3af 8000 	nop.w
     e14:	f3af 8000 	nop.w
     e18:	f3af 8000 	nop.w
     e1c:	f3af 8000 	nop.w

00000e20 <VZhighshelfSetQ>:
	tVZFilter_setResonance(&VZfilterHS[v], q);
     e20:	4b02      	ldr	r3, [pc, #8]	; (e2c <VZhighshelfSetQ+0xc>)
     e22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e26:	f004 b893 	b.w	4f50 <__tVZFilter_setResonance_veneer>
     e2a:	bf00      	nop
     e2c:	20000164 	.word	0x20000164
     e30:	f3af 8000 	nop.w
     e34:	f3af 8000 	nop.w
     e38:	f3af 8000 	nop.w
     e3c:	f3af 8000 	nop.w

00000e40 <VZbandrejectSetQ>:
	tVZFilter_setResonance(&VZfilterBR[v], q);
     e40:	4b02      	ldr	r3, [pc, #8]	; (e4c <VZbandrejectSetQ+0xc>)
     e42:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e46:	f004 b883 	b.w	4f50 <__tVZFilter_setResonance_veneer>
     e4a:	bf00      	nop
     e4c:	2000015c 	.word	0x2000015c
     e50:	f3af 8000 	nop.w
     e54:	f3af 8000 	nop.w
     e58:	f3af 8000 	nop.w
     e5c:	f3af 8000 	nop.w

00000e60 <LadderLowpassSetQ>:
	tLadderFilter_setQ(&Ladderfilter[v], q);
     e60:	4b02      	ldr	r3, [pc, #8]	; (e6c <LadderLowpassSetQ+0xc>)
     e62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e66:	f004 b88b 	b.w	4f80 <__tLadderFilter_setQ_veneer>
     e6a:	bf00      	nop
     e6c:	20000154 	.word	0x20000154
     e70:	f3af 8000 	nop.w
     e74:	f3af 8000 	nop.w
     e78:	f3af 8000 	nop.w
     e7c:	f3af 8000 	nop.w

00000e80 <lowpassSetGain>:
    filterGain[v] = fasterdbtoa((gain * 24.0f) - 12.0f);
     e80:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     e84:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
     e88:	b510      	push	{r4, lr}
    filterGain[v] = fasterdbtoa((gain * 24.0f) - 12.0f);
     e8a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
     e8e:	4604      	mov	r4, r0
    filterGain[v] = fasterdbtoa((gain * 24.0f) - 12.0f);
     e90:	eeb0 0a67 	vmov.f32	s0, s15
     e94:	f004 f854 	bl	4f40 <__fasterdbtoa_veneer>
     e98:	4802      	ldr	r0, [pc, #8]	; (ea4 <lowpassSetGain+0x24>)
     e9a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     e9e:	ed80 0a00 	vstr	s0, [r0]
}
     ea2:	bd10      	pop	{r4, pc}
     ea4:	2000022c 	.word	0x2000022c
     ea8:	f3af 8000 	nop.w
     eac:	f3af 8000 	nop.w
     eb0:	f3af 8000 	nop.w
     eb4:	f3af 8000 	nop.w
     eb8:	f3af 8000 	nop.w
     ebc:	f3af 8000 	nop.w

00000ec0 <highpassSetGain>:
     ec0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     ec4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
     ec8:	b510      	push	{r4, lr}
     eca:	eee0 7a07 	vfma.f32	s15, s0, s14
     ece:	4604      	mov	r4, r0
     ed0:	eeb0 0a67 	vmov.f32	s0, s15
     ed4:	f004 f834 	bl	4f40 <__fasterdbtoa_veneer>
     ed8:	4802      	ldr	r0, [pc, #8]	; (ee4 <highpassSetGain+0x24>)
     eda:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     ede:	ed80 0a00 	vstr	s0, [r0]
     ee2:	bd10      	pop	{r4, pc}
     ee4:	2000022c 	.word	0x2000022c
     ee8:	f3af 8000 	nop.w
     eec:	f3af 8000 	nop.w
     ef0:	f3af 8000 	nop.w
     ef4:	f3af 8000 	nop.w
     ef8:	f3af 8000 	nop.w
     efc:	f3af 8000 	nop.w

00000f00 <bandpassSetGain>:
     f00:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     f04:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
     f08:	b510      	push	{r4, lr}
     f0a:	eee0 7a07 	vfma.f32	s15, s0, s14
     f0e:	4604      	mov	r4, r0
     f10:	eeb0 0a67 	vmov.f32	s0, s15
     f14:	f004 f814 	bl	4f40 <__fasterdbtoa_veneer>
     f18:	4802      	ldr	r0, [pc, #8]	; (f24 <bandpassSetGain+0x24>)
     f1a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     f1e:	ed80 0a00 	vstr	s0, [r0]
     f22:	bd10      	pop	{r4, pc}
     f24:	2000022c 	.word	0x2000022c
     f28:	f3af 8000 	nop.w
     f2c:	f3af 8000 	nop.w
     f30:	f3af 8000 	nop.w
     f34:	f3af 8000 	nop.w
     f38:	f3af 8000 	nop.w
     f3c:	f3af 8000 	nop.w

00000f40 <diodeLowpassSetGain>:
     f40:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     f44:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
     f48:	b510      	push	{r4, lr}
     f4a:	eee0 7a07 	vfma.f32	s15, s0, s14
     f4e:	4604      	mov	r4, r0
     f50:	eeb0 0a67 	vmov.f32	s0, s15
     f54:	f003 fff4 	bl	4f40 <__fasterdbtoa_veneer>
     f58:	4802      	ldr	r0, [pc, #8]	; (f64 <diodeLowpassSetGain+0x24>)
     f5a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     f5e:	ed80 0a00 	vstr	s0, [r0]
     f62:	bd10      	pop	{r4, pc}
     f64:	2000022c 	.word	0x2000022c
     f68:	f3af 8000 	nop.w
     f6c:	f3af 8000 	nop.w
     f70:	f3af 8000 	nop.w
     f74:	f3af 8000 	nop.w
     f78:	f3af 8000 	nop.w
     f7c:	f3af 8000 	nop.w

00000f80 <VZpeakSetGain>:
	 tVZFilter_setGain(&VZfilterPeak[v], fasterdbtoa((gain * 50.f) - 25.f));
     f80:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
     f84:	ed9f 7a08 	vldr	s14, [pc, #32]	; fa8 <VZpeakSetGain+0x28>
{
     f88:	b510      	push	{r4, lr}
	 tVZFilter_setGain(&VZfilterPeak[v], fasterdbtoa((gain * 50.f) - 25.f));
     f8a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
     f8e:	4604      	mov	r4, r0
	 tVZFilter_setGain(&VZfilterPeak[v], fasterdbtoa((gain * 50.f) - 25.f));
     f90:	eeb0 0a67 	vmov.f32	s0, s15
     f94:	f003 ffd4 	bl	4f40 <__fasterdbtoa_veneer>
     f98:	4804      	ldr	r0, [pc, #16]	; (fac <VZpeakSetGain+0x2c>)
     f9a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
     f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	 tVZFilter_setGain(&VZfilterPeak[v], fasterdbtoa((gain * 50.f) - 25.f));
     fa2:	f004 b80d 	b.w	4fc0 <__tVZFilter_setGain_veneer>
     fa6:	bf00      	nop
     fa8:	42480000 	.word	0x42480000
     fac:	20000174 	.word	0x20000174
     fb0:	f3af 8000 	nop.w
     fb4:	f3af 8000 	nop.w
     fb8:	f3af 8000 	nop.w
     fbc:	f3af 8000 	nop.w

00000fc0 <VZlowshelfSetGain>:
	tVZFilter_setGain(&VZfilterLS[v], fasterdbtoa((gain * 50.f) - 25.f));
     fc0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
     fc4:	ed9f 7a08 	vldr	s14, [pc, #32]	; fe8 <VZlowshelfSetGain+0x28>
{
     fc8:	b510      	push	{r4, lr}
	tVZFilter_setGain(&VZfilterLS[v], fasterdbtoa((gain * 50.f) - 25.f));
     fca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
     fce:	4604      	mov	r4, r0
	tVZFilter_setGain(&VZfilterLS[v], fasterdbtoa((gain * 50.f) - 25.f));
     fd0:	eeb0 0a67 	vmov.f32	s0, s15
     fd4:	f003 ffb4 	bl	4f40 <__fasterdbtoa_veneer>
     fd8:	4804      	ldr	r0, [pc, #16]	; (fec <VZlowshelfSetGain+0x2c>)
     fda:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
     fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&VZfilterLS[v], fasterdbtoa((gain * 50.f) - 25.f));
     fe2:	f003 bfed 	b.w	4fc0 <__tVZFilter_setGain_veneer>
     fe6:	bf00      	nop
     fe8:	42480000 	.word	0x42480000
     fec:	2000016c 	.word	0x2000016c
     ff0:	f3af 8000 	nop.w
     ff4:	f3af 8000 	nop.w
     ff8:	f3af 8000 	nop.w
     ffc:	f3af 8000 	nop.w

00001000 <VZhighshelfSetGain>:
    1000:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    1004:	ed9f 7a08 	vldr	s14, [pc, #32]	; 1028 <VZhighshelfSetGain+0x28>
    1008:	b510      	push	{r4, lr}
    100a:	eee0 7a07 	vfma.f32	s15, s0, s14
    100e:	4604      	mov	r4, r0
    1010:	eeb0 0a67 	vmov.f32	s0, s15
    1014:	f003 ff94 	bl	4f40 <__fasterdbtoa_veneer>
    1018:	4804      	ldr	r0, [pc, #16]	; (102c <VZhighshelfSetGain+0x2c>)
    101a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    101e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1022:	f003 bfcd 	b.w	4fc0 <__tVZFilter_setGain_veneer>
    1026:	bf00      	nop
    1028:	42480000 	.word	0x42480000
    102c:	2000016c 	.word	0x2000016c
    1030:	f3af 8000 	nop.w
    1034:	f3af 8000 	nop.w
    1038:	f3af 8000 	nop.w
    103c:	f3af 8000 	nop.w

00001040 <VZbandrejectSetGain>:
    1040:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1044:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1048:	b510      	push	{r4, lr}
    104a:	eee0 7a07 	vfma.f32	s15, s0, s14
    104e:	4604      	mov	r4, r0
    1050:	eeb0 0a67 	vmov.f32	s0, s15
    1054:	f003 ff74 	bl	4f40 <__fasterdbtoa_veneer>
    1058:	4802      	ldr	r0, [pc, #8]	; (1064 <VZbandrejectSetGain+0x24>)
    105a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    105e:	ed80 0a00 	vstr	s0, [r0]
    1062:	bd10      	pop	{r4, pc}
    1064:	2000022c 	.word	0x2000022c
    1068:	f3af 8000 	nop.w
    106c:	f3af 8000 	nop.w
    1070:	f3af 8000 	nop.w
    1074:	f3af 8000 	nop.w
    1078:	f3af 8000 	nop.w
    107c:	f3af 8000 	nop.w

00001080 <LadderLowpassSetGain>:
    1080:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1084:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    1088:	b510      	push	{r4, lr}
    108a:	eee0 7a07 	vfma.f32	s15, s0, s14
    108e:	4604      	mov	r4, r0
    1090:	eeb0 0a67 	vmov.f32	s0, s15
    1094:	f003 ff54 	bl	4f40 <__fasterdbtoa_veneer>
    1098:	4802      	ldr	r0, [pc, #8]	; (10a4 <LadderLowpassSetGain+0x24>)
    109a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    109e:	ed80 0a00 	vstr	s0, [r0]
    10a2:	bd10      	pop	{r4, pc}
    10a4:	2000022c 	.word	0x2000022c
    10a8:	f3af 8000 	nop.w
    10ac:	f3af 8000 	nop.w
    10b0:	f3af 8000 	nop.w
    10b4:	f3af 8000 	nop.w
    10b8:	f3af 8000 	nop.w
    10bc:	f3af 8000 	nop.w

000010c0 <envelope_tick>:
{
    10c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	interruptChecker = 0;
    10c2:	4a0b      	ldr	r2, [pc, #44]	; (10f0 <envelope_tick+0x30>)
    10c4:	2100      	movs	r1, #0
	uint32_t tempCount1 = DWT->CYCCNT;
    10c6:	4b0b      	ldr	r3, [pc, #44]	; (10f4 <envelope_tick+0x34>)
    10c8:	4c0b      	ldr	r4, [pc, #44]	; (10f8 <envelope_tick+0x38>)
	interruptChecker = 0;
    10ca:	7011      	strb	r1, [r2, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
    10cc:	4d0b      	ldr	r5, [pc, #44]	; (10fc <envelope_tick+0x3c>)
    10ce:	f104 0610 	add.w	r6, r4, #16
    10d2:	685f      	ldr	r7, [r3, #4]
		float value = tADSRT_tick(&envs[v]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
    10d4:	4628      	mov	r0, r5
	for (int v = 0; v < NUM_ENV; v++)
    10d6:	3504      	adds	r5, #4
		float value = tADSRT_tick(&envs[v]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
    10d8:	f003 fe86 	bl	4de8 <__tADSRT_tick_veneer>
		sourceValues[ENV_SOURCE_OFFSET + v] = value;
    10dc:	eca4 0a01 	vstmia	r4!, {s0}
	for (int v = 0; v < NUM_ENV; v++)
    10e0:	42b4      	cmp	r4, r6
    10e2:	d1f7      	bne.n	10d4 <envelope_tick+0x14>
	timeEnv = DWT->CYCCNT - tempCount1;
    10e4:	4b03      	ldr	r3, [pc, #12]	; (10f4 <envelope_tick+0x34>)
    10e6:	4a06      	ldr	r2, [pc, #24]	; (1100 <envelope_tick+0x40>)
    10e8:	685b      	ldr	r3, [r3, #4]
    10ea:	1bdb      	subs	r3, r3, r7
    10ec:	6013      	str	r3, [r2, #0]
}
    10ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10f0:	2000c3f9 	.word	0x2000c3f9
    10f4:	e0001000 	.word	0xe0001000
    10f8:	200090dc 	.word	0x200090dc
    10fc:	20000214 	.word	0x20000214
    1100:	20009100 	.word	0x20009100
    1104:	f3af 8000 	nop.w
    1108:	f3af 8000 	nop.w
    110c:	f3af 8000 	nop.w
    1110:	f3af 8000 	nop.w
    1114:	f3af 8000 	nop.w
    1118:	f3af 8000 	nop.w
    111c:	f3af 8000 	nop.w

00001120 <lfo_tick>:
{
    1120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	interruptChecker = 0;
    1124:	4a14      	ldr	r2, [pc, #80]	; (1178 <lfo_tick+0x58>)
    1126:	2400      	movs	r4, #0
	uint32_t tempCount1 = DWT->CYCCNT;
    1128:	4b14      	ldr	r3, [pc, #80]	; (117c <lfo_tick+0x5c>)
{
    112a:	b083      	sub	sp, #12
	interruptChecker = 0;
    112c:	7014      	strb	r4, [r2, #0]
		float sample = 0.0f;
    112e:	2700      	movs	r7, #0
    1130:	4e13      	ldr	r6, [pc, #76]	; (1180 <lfo_tick+0x60>)
    1132:	4d14      	ldr	r5, [pc, #80]	; (1184 <lfo_tick+0x64>)
	uint32_t tempCount1 = DWT->CYCCNT;
    1134:	f8d3 8004 	ldr.w	r8, [r3, #4]
			lfoShapeTick[i](&sample,i);
    1138:	f8df 9050 	ldr.w	r9, [pc, #80]	; 118c <lfo_tick+0x6c>
		if (lfoOn[i])
    113c:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i);
    1140:	4621      	mov	r1, r4
    1142:	a801      	add	r0, sp, #4
		float sample = 0.0f;
    1144:	9701      	str	r7, [sp, #4]
		if (lfoOn[i])
    1146:	b18b      	cbz	r3, 116c <lfo_tick+0x4c>
			lfoShapeTick[i](&sample,i);
    1148:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
    114c:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i);
    114e:	4798      	blx	r3
		sourceValues[LFO_SOURCE_OFFSET + i] = sample;
    1150:	9b01      	ldr	r3, [sp, #4]
	for (int i = 0; i < NUM_LFOS; i++)
    1152:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i] = sample;
    1154:	f845 3b04 	str.w	r3, [r5], #4
	for (int i = 0; i < NUM_LFOS; i++)
    1158:	d1f0      	bne.n	113c <lfo_tick+0x1c>
	timeLFO = DWT->CYCCNT - tempCount1;
    115a:	4b08      	ldr	r3, [pc, #32]	; (117c <lfo_tick+0x5c>)
    115c:	4a0a      	ldr	r2, [pc, #40]	; (1188 <lfo_tick+0x68>)
    115e:	685b      	ldr	r3, [r3, #4]
    1160:	eba3 0308 	sub.w	r3, r3, r8
    1164:	6013      	str	r3, [r2, #0]
}
    1166:	b003      	add	sp, #12
    1168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 0; i < NUM_LFOS; i++)
    116c:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i] = sample;
    116e:	f845 7b04 	str.w	r7, [r5], #4
	for (int i = 0; i < NUM_LFOS; i++)
    1172:	2c04      	cmp	r4, #4
    1174:	d1e2      	bne.n	113c <lfo_tick+0x1c>
    1176:	e7f0      	b.n	115a <lfo_tick+0x3a>
    1178:	2000c3f9 	.word	0x2000c3f9
    117c:	e0001000 	.word	0xe0001000
    1180:	200004d8 	.word	0x200004d8
    1184:	200090ec 	.word	0x200090ec
    1188:	2000910c 	.word	0x2000910c
    118c:	2000050c 	.word	0x2000050c
    1190:	f3af 8000 	nop.w
    1194:	f3af 8000 	nop.w
    1198:	f3af 8000 	nop.w
    119c:	f3af 8000 	nop.w

000011a0 <setEnvelopeAttack>:
	tADSRT_setAttack(&envs[v], a);
    11a0:	4b02      	ldr	r3, [pc, #8]	; (11ac <setEnvelopeAttack+0xc>)
    11a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    11a6:	f003 be73 	b.w	4e90 <__tADSRT_setAttack_veneer>
    11aa:	bf00      	nop
    11ac:	20000214 	.word	0x20000214
    11b0:	f3af 8000 	nop.w
    11b4:	f3af 8000 	nop.w
    11b8:	f3af 8000 	nop.w
    11bc:	f3af 8000 	nop.w

000011c0 <setEnvelopeDecay>:
	tADSRT_setDecay(&envs[v], d);
    11c0:	4b02      	ldr	r3, [pc, #8]	; (11cc <setEnvelopeDecay+0xc>)
    11c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    11c6:	f003 be3b 	b.w	4e40 <__tADSRT_setDecay_veneer>
    11ca:	bf00      	nop
    11cc:	20000214 	.word	0x20000214
    11d0:	f3af 8000 	nop.w
    11d4:	f3af 8000 	nop.w
    11d8:	f3af 8000 	nop.w
    11dc:	f3af 8000 	nop.w

000011e0 <setEnvelopeSustain>:
	tADSRT_setSustain(&envs[v], s);
    11e0:	4b02      	ldr	r3, [pc, #8]	; (11ec <setEnvelopeSustain+0xc>)
    11e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    11e6:	f003 be33 	b.w	4e50 <__tADSRT_setSustain_veneer>
    11ea:	bf00      	nop
    11ec:	20000214 	.word	0x20000214
    11f0:	f3af 8000 	nop.w
    11f4:	f3af 8000 	nop.w
    11f8:	f3af 8000 	nop.w
    11fc:	f3af 8000 	nop.w

00001200 <setEnvelopeRelease>:
	tADSRT_setRelease(&envs[v], r);
    1200:	4b02      	ldr	r3, [pc, #8]	; (120c <setEnvelopeRelease+0xc>)
    1202:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1206:	f003 be63 	b.w	4ed0 <__tADSRT_setRelease_veneer>
    120a:	bf00      	nop
    120c:	20000214 	.word	0x20000214
    1210:	f3af 8000 	nop.w
    1214:	f3af 8000 	nop.w
    1218:	f3af 8000 	nop.w
    121c:	f3af 8000 	nop.w

00001220 <setEnvelopeLeak>:
	tADSRT_setLeakFactor(&envs[v], 0.99995f + 0.00005f*(1.f-leak));
    1220:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1224:	eddf 6a07 	vldr	s13, [pc, #28]	; 1244 <setEnvelopeLeak+0x24>
    1228:	ed9f 7a07 	vldr	s14, [pc, #28]	; 1248 <setEnvelopeLeak+0x28>
    122c:	4b07      	ldr	r3, [pc, #28]	; (124c <setEnvelopeLeak+0x2c>)
    122e:	ee77 7ac0 	vsub.f32	s15, s15, s0
    1232:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1236:	eea7 7aa6 	vfma.f32	s14, s15, s13
    123a:	eeb0 0a47 	vmov.f32	s0, s14
    123e:	f003 be9b 	b.w	4f78 <__tADSRT_setLeakFactor_veneer>
    1242:	bf00      	nop
    1244:	3851b717 	.word	0x3851b717
    1248:	3f7ffcb9 	.word	0x3f7ffcb9
    124c:	20000214 	.word	0x20000214
    1250:	f3af 8000 	nop.w
    1254:	f3af 8000 	nop.w
    1258:	f3af 8000 	nop.w
    125c:	f3af 8000 	nop.w

00001260 <setAmp>:
	amplitude = amp;
    1260:	4b01      	ldr	r3, [pc, #4]	; (1268 <setAmp+0x8>)
    1262:	ed83 0a00 	vstr	s0, [r3]
}
    1266:	4770      	bx	lr
    1268:	2000017c 	.word	0x2000017c
    126c:	f3af 8000 	nop.w
    1270:	f3af 8000 	nop.w
    1274:	f3af 8000 	nop.w
    1278:	f3af 8000 	nop.w
    127c:	f3af 8000 	nop.w

00001280 <setMaster>:
	finalMaster = amp;
    1280:	4b01      	ldr	r3, [pc, #4]	; (1288 <setMaster+0x8>)
    1282:	ed83 0a00 	vstr	s0, [r3]
}
    1286:	4770      	bx	lr
    1288:	20000004 	.word	0x20000004
    128c:	f3af 8000 	nop.w
    1290:	f3af 8000 	nop.w
    1294:	f3af 8000 	nop.w
    1298:	f3af 8000 	nop.w
    129c:	f3af 8000 	nop.w

000012a0 <setTranspose>:
	transpose = in;
    12a0:	4b01      	ldr	r3, [pc, #4]	; (12a8 <setTranspose+0x8>)
    12a2:	ed83 0a00 	vstr	s0, [r3]
}
    12a6:	4770      	bx	lr
    12a8:	20009128 	.word	0x20009128
    12ac:	f3af 8000 	nop.w
    12b0:	f3af 8000 	nop.w
    12b4:	f3af 8000 	nop.w
    12b8:	f3af 8000 	nop.w
    12bc:	f3af 8000 	nop.w

000012c0 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    12c0:	eddf 7a03 	vldr	s15, [pc, #12]	; 12d0 <setPitchBendRange+0x10>
    12c4:	4b03      	ldr	r3, [pc, #12]	; (12d4 <setPitchBendRange+0x14>)
    12c6:	ee20 0a27 	vmul.f32	s0, s0, s15
    12ca:	ed83 0a00 	vstr	s0, [r3]
}
    12ce:	4770      	bx	lr
    12d0:	39000200 	.word	0x39000200
    12d4:	20000000 	.word	0x20000000
    12d8:	f3af 8000 	nop.w
    12dc:	f3af 8000 	nop.w

000012e0 <setFinalLowpass>:
	tSVF_setFreqFast(&finalLowpass, LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    12e0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    12e4:	eddf 0a09 	vldr	s1, [pc, #36]	; 130c <setFinalLowpass+0x2c>
{
    12e8:	eef0 7a40 	vmov.f32	s15, s0
	tSVF_setFreqFast(&finalLowpass, LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    12ec:	ed9f 1a08 	vldr	s2, [pc, #32]	; 1310 <setFinalLowpass+0x30>
    12f0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 1314 <setFinalLowpass+0x34>
    12f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
{
    12f8:	b508      	push	{r3, lr}
	tSVF_setFreqFast(&finalLowpass, LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    12fa:	ee67 0aa0 	vmul.f32	s1, s15, s1
    12fe:	f002 fddf 	bl	3ec0 <LEAF_clip>
    1302:	4805      	ldr	r0, [pc, #20]	; (1318 <setFinalLowpass+0x38>)
}
    1304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tSVF_setFreqFast(&finalLowpass, LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    1308:	f003 be4e 	b.w	4fa8 <__tSVF_setFreqFast_veneer>
    130c:	420fb824 	.word	0x420fb824
    1310:	457ff000 	.word	0x457ff000
    1314:	00000000 	.word	0x00000000
    1318:	2000023c 	.word	0x2000023c
    131c:	f3af 8000 	nop.w

00001320 <tickMappings>:
{
    1320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (int i = 0; i < numMappings; i++)
    1324:	f8df 8120 	ldr.w	r8, [pc, #288]	; 1448 <tickMappings+0x128>
	interruptChecker = 0;
    1328:	2600      	movs	r6, #0
    132a:	4941      	ldr	r1, [pc, #260]	; (1430 <tickMappings+0x110>)
	uint32_t tempCount1 = DWT->CYCCNT;
    132c:	4a41      	ldr	r2, [pc, #260]	; (1434 <tickMappings+0x114>)
	for (int i = 0; i < numMappings; i++)
    132e:	f898 3000 	ldrb.w	r3, [r8]
{
    1332:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    1336:	700e      	strb	r6, [r1, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
    1338:	f8d2 9004 	ldr.w	r9, [r2, #4]
	for (int i = 0; i < numMappings; i++)
    133c:	2b00      	cmp	r3, #0
    133e:	d06d      	beq.n	141c <tickMappings+0xfc>
    1340:	4c3d      	ldr	r4, [pc, #244]	; (1438 <tickMappings+0x118>)
    1342:	4d3e      	ldr	r5, [pc, #248]	; (143c <tickMappings+0x11c>)
    1344:	e04a      	b.n	13dc <tickMappings+0xbc>
				unsmoothedValue += sum;
    1346:	eeb0 8a67 	vmov.f32	s16, s15
		float smoothedValue = 0.0f;
    134a:	eddf 7a3d 	vldr	s15, [pc, #244]	; 1440 <tickMappings+0x120>
		for (int j = 0; j < mappings[i].numHooks; j++)
    134e:	2b01      	cmp	r3, #1
    1350:	d023      	beq.n	139a <tickMappings+0x7a>
			float sum = *mappings[i].sourceValPtr[j] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j];
    1352:	69e1      	ldr	r1, [r4, #28]
    1354:	68e2      	ldr	r2, [r4, #12]
    1356:	ed91 7a00 	vldr	s14, [r1]
    135a:	ed92 6a00 	vldr	s12, [r2]
    135e:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    1362:	ee27 7a06 	vmul.f32	s14, s14, s12
			if (mappings[i].sourceSmoothed[j])
    1366:	7d60      	ldrb	r0, [r4, #21]
			float sum = *mappings[i].sourceValPtr[j] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j];
    1368:	ee27 7a26 	vmul.f32	s14, s14, s13
			if (mappings[i].sourceSmoothed[j])
    136c:	2800      	cmp	r0, #0
    136e:	d14a      	bne.n	1406 <tickMappings+0xe6>
				unsmoothedValue += sum;
    1370:	ee38 8a07 	vadd.f32	s16, s16, s14
		for (int j = 0; j < mappings[i].numHooks; j++)
    1374:	2b02      	cmp	r3, #2
    1376:	d010      	beq.n	139a <tickMappings+0x7a>
			float sum = *mappings[i].sourceValPtr[j] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j];
    1378:	6a21      	ldr	r1, [r4, #32]
    137a:	6922      	ldr	r2, [r4, #16]
    137c:	ed91 7a00 	vldr	s14, [r1]
    1380:	ed92 6a00 	vldr	s12, [r2]
    1384:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    1388:	ee27 7a06 	vmul.f32	s14, s14, s12
			if (mappings[i].sourceSmoothed[j])
    138c:	7da3      	ldrb	r3, [r4, #22]
			float sum = *mappings[i].sourceValPtr[j] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j];
    138e:	ee27 7a26 	vmul.f32	s14, s14, s13
			if (mappings[i].sourceSmoothed[j])
    1392:	2b00      	cmp	r3, #0
    1394:	d03f      	beq.n	1416 <tickMappings+0xf6>
				smoothedValue += sum;
    1396:	ee77 7a87 	vadd.f32	s15, s15, s14
		smoothedValue += mappings[i].dest->zeroToOneVal;
    139a:	6863      	ldr	r3, [r4, #4]
		tExpSmooth_setDest(&mapSmoothers[i], smoothedValue);
    139c:	4628      	mov	r0, r5
	for (int i = 0; i < numMappings; i++)
    139e:	3434      	adds	r4, #52	; 0x34
    13a0:	3601      	adds	r6, #1
		smoothedValue += mappings[i].dest->zeroToOneVal;
    13a2:	ed93 0a00 	vldr	s0, [r3]
		tExpSmooth_setDest(&mapSmoothers[i], smoothedValue);
    13a6:	ee37 0a80 	vadd.f32	s0, s15, s0
    13aa:	f003 fd7d 	bl	4ea8 <__tExpSmooth_setDest_veneer>
		smoothedValue = tExpSmooth_tick(&mapSmoothers[i]);
    13ae:	4628      	mov	r0, r5
    13b0:	f003 fd82 	bl	4eb8 <__tExpSmooth_tick_veneer>
		mappings[i].dest->realVal = mappings[i].dest->scaleFunc(finalVal);
    13b4:	f854 7c30 	ldr.w	r7, [r4, #-48]
    13b8:	ee30 0a08 	vadd.f32	s0, s0, s16
	for (int i = 0; i < numMappings; i++)
    13bc:	3504      	adds	r5, #4
		mappings[i].dest->realVal = mappings[i].dest->scaleFunc(finalVal);
    13be:	68bb      	ldr	r3, [r7, #8]
    13c0:	4798      	blx	r3
		mappings[i].dest->setParam(mappings[i].dest->realVal, mappings[i].dest->objectNumber);
    13c2:	f854 3c30 	ldr.w	r3, [r4, #-48]
		mappings[i].dest->realVal = mappings[i].dest->scaleFunc(finalVal);
    13c6:	ed87 0a01 	vstr	s0, [r7, #4]
		mappings[i].dest->setParam(mappings[i].dest->realVal, mappings[i].dest->objectNumber);
    13ca:	68da      	ldr	r2, [r3, #12]
    13cc:	7c18      	ldrb	r0, [r3, #16]
    13ce:	ed93 0a01 	vldr	s0, [r3, #4]
    13d2:	4790      	blx	r2
	for (int i = 0; i < numMappings; i++)
    13d4:	f898 3000 	ldrb.w	r3, [r8]
    13d8:	42b3      	cmp	r3, r6
    13da:	dd1f      	ble.n	141c <tickMappings+0xfc>
		for (int j = 0; j < mappings[i].numHooks; j++)
    13dc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    13e0:	b1a3      	cbz	r3, 140c <tickMappings+0xec>
			float sum = *mappings[i].sourceValPtr[j] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j];
    13e2:	68a1      	ldr	r1, [r4, #8]
    13e4:	69a2      	ldr	r2, [r4, #24]
    13e6:	edd1 7a00 	vldr	s15, [r1]
    13ea:	ed92 7a00 	vldr	s14, [r2]
    13ee:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
    13f2:	ee67 7a87 	vmul.f32	s15, s15, s14
			if (mappings[i].sourceSmoothed[j])
    13f6:	7d20      	ldrb	r0, [r4, #20]
			float sum = *mappings[i].sourceValPtr[j] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j];
    13f8:	ee67 7a80 	vmul.f32	s15, s15, s0
			if (mappings[i].sourceSmoothed[j])
    13fc:	2800      	cmp	r0, #0
    13fe:	d0a2      	beq.n	1346 <tickMappings+0x26>
		float unsmoothedValue = 0.0f;
    1400:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 1440 <tickMappings+0x120>
    1404:	e7a3      	b.n	134e <tickMappings+0x2e>
				smoothedValue += sum;
    1406:	ee77 7a87 	vadd.f32	s15, s15, s14
    140a:	e7b3      	b.n	1374 <tickMappings+0x54>
		float smoothedValue = 0.0f;
    140c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 1440 <tickMappings+0x120>
		float unsmoothedValue = 0.0f;
    1410:	eeb0 8a67 	vmov.f32	s16, s15
    1414:	e7c1      	b.n	139a <tickMappings+0x7a>
				unsmoothedValue += sum;
    1416:	ee38 8a07 	vadd.f32	s16, s16, s14
		for (int j = 0; j < mappings[i].numHooks; j++)
    141a:	e7be      	b.n	139a <tickMappings+0x7a>
	timeMap = DWT->CYCCNT - tempCount1;
    141c:	4b05      	ldr	r3, [pc, #20]	; (1434 <tickMappings+0x114>)
    141e:	4a09      	ldr	r2, [pc, #36]	; (1444 <tickMappings+0x124>)
    1420:	685b      	ldr	r3, [r3, #4]
}
    1422:	ecbd 8b02 	vpop	{d8}
	timeMap = DWT->CYCCNT - tempCount1;
    1426:	eba3 0309 	sub.w	r3, r3, r9
    142a:	6013      	str	r3, [r2, #0]
}
    142c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1430:	2000c3f9 	.word	0x2000c3f9
    1434:	e0001000 	.word	0xe0001000
    1438:	2000e430 	.word	0x2000e430
    143c:	20000554 	.word	0x20000554
    1440:	00000000 	.word	0x00000000
    1444:	20009110 	.word	0x20009110
    1448:	2000eabc 	.word	0x2000eabc
    144c:	f3af 8000 	nop.w
    1450:	f3af 8000 	nop.w
    1454:	f3af 8000 	nop.w
    1458:	f3af 8000 	nop.w
    145c:	f3af 8000 	nop.w

00001460 <audioTickL>:
{
    1460:	b538      	push	{r3, r4, r5, lr}
	uint32_t tempCount5 = DWT->CYCCNT;
    1462:	4c05      	ldr	r4, [pc, #20]	; (1478 <audioTickL+0x18>)
	sample = tCycle_tick(&testSine);
    1464:	4805      	ldr	r0, [pc, #20]	; (147c <audioTickL+0x1c>)
	uint32_t tempCount5 = DWT->CYCCNT;
    1466:	6865      	ldr	r5, [r4, #4]
	sample = tCycle_tick(&testSine);
    1468:	f003 fd56 	bl	4f18 <__tCycle_tick_veneer>
	uint32_t tempCount6 = DWT->CYCCNT;
    146c:	6863      	ldr	r3, [r4, #4]
	timeTick = tempCount6-tempCount5;
    146e:	4a04      	ldr	r2, [pc, #16]	; (1480 <audioTickL+0x20>)
    1470:	1b5b      	subs	r3, r3, r5
    1472:	6013      	str	r3, [r2, #0]
}
    1474:	bd38      	pop	{r3, r4, r5, pc}
    1476:	bf00      	nop
    1478:	e0001000 	.word	0xe0001000
    147c:	200090fc 	.word	0x200090fc
    1480:	20009120 	.word	0x20009120
    1484:	f3af 8000 	nop.w
    1488:	f3af 8000 	nop.w
    148c:	f3af 8000 	nop.w
    1490:	f3af 8000 	nop.w
    1494:	f3af 8000 	nop.w
    1498:	f3af 8000 	nop.w
    149c:	f3af 8000 	nop.w

000014a0 <sendNoteOn>:
{
    14a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14a4:	460c      	mov	r4, r1
    14a6:	4601      	mov	r1, r0
    14a8:	ed2d 8b02 	vpush	{d8}
	if (velocity > 0)
    14ac:	2c00      	cmp	r4, #0
    14ae:	d059      	beq.n	1564 <sendNoteOn+0xc4>
		tSimplePoly_noteOn(&myPoly, note, velocity);
    14b0:	4622      	mov	r2, r4
    14b2:	4836      	ldr	r0, [pc, #216]	; (158c <sendNoteOn+0xec>)
    14b4:	f003 fce0 	bl	4e78 <__tSimplePoly_noteOn_veneer>
		sourceValues[RANDOM_SOURCE_OFFSET] = (random_values[randomValPointer++] * 0.5f) + 0.5f;
    14b8:	4935      	ldr	r1, [pc, #212]	; (1590 <sendNoteOn+0xf0>)
		fvelocity = (float)velocity;
    14ba:	ee07 4a90 	vmov	s15, r4
		sourceValues[RANDOM_SOURCE_OFFSET] = (random_values[randomValPointer++] * 0.5f) + 0.5f;
    14be:	4a35      	ldr	r2, [pc, #212]	; (1594 <sendNoteOn+0xf4>)
    14c0:	780b      	ldrb	r3, [r1, #0]
    14c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
		fvelocity = (float)velocity;
    14c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
		fvelocity = ((0.007685533519034f*fvelocity) + 0.0239372430f);
    14ca:	ed9f 6a33 	vldr	s12, [pc, #204]	; 1598 <sendNoteOn+0xf8>
    14ce:	ed9f 8a33 	vldr	s16, [pc, #204]	; 159c <sendNoteOn+0xfc>
		sourceValues[RANDOM_SOURCE_OFFSET] = (random_values[randomValPointer++] * 0.5f) + 0.5f;
    14d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    14d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    14da:	3301      	adds	r3, #1
		fvelocity = ((0.007685533519034f*fvelocity) + 0.0239372430f);
    14dc:	eea7 8a86 	vfma.f32	s16, s15, s12
		sourceValues[RANDOM_SOURCE_OFFSET] = (random_values[randomValPointer++] * 0.5f) + 0.5f;
    14e0:	edd2 7a00 	vldr	s15, [r2]
    14e4:	4c2e      	ldr	r4, [pc, #184]	; (15a0 <sendNoteOn+0x100>)
		    voiceSounding = 1;
    14e6:	2601      	movs	r6, #1
		sourceValues[RANDOM_SOURCE_OFFSET] = (random_values[randomValPointer++] * 0.5f) + 0.5f;
    14e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
    14ec:	700b      	strb	r3, [r1, #0]
    14ee:	4d2d      	ldr	r5, [pc, #180]	; (15a4 <sendNoteOn+0x104>)
    14f0:	f504 78f0 	add.w	r8, r4, #480	; 0x1e0
    14f4:	4b2c      	ldr	r3, [pc, #176]	; (15a8 <sendNoteOn+0x108>)
    14f6:	ee67 7a87 	vmul.f32	s15, s15, s14
    14fa:	4f2c      	ldr	r7, [pc, #176]	; (15ac <sendNoteOn+0x10c>)
		fvelocity = fvelocity * fvelocity;
    14fc:	ee28 8a08 	vmul.f32	s16, s16, s16
		sourceValues[RANDOM_SOURCE_OFFSET] = (random_values[randomValPointer++] * 0.5f) + 0.5f;
    1500:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		sourceValues[VELOCITY_SOURCE_OFFSET] = fvelocity;
    1504:	ed83 8a12 	vstr	s16, [r3, #72]	; 0x48
			if (useVelocity == 0) envVel = 1.f;
    1508:	edd4 7a00 	vldr	s15, [r4]
		for (int v = 0; v < NUM_ENV; v++)
    150c:	3478      	adds	r4, #120	; 0x78
		    tADSRT_on(&envs[v], envVel);
    150e:	4628      	mov	r0, r5
    1510:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
			if (useVelocity == 0) envVel = 1.f;
    1514:	eef5 7a40 	vcmp.f32	s15, #0.0
    1518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		    tADSRT_on(&envs[v], envVel);
    151c:	bf0c      	ite	eq
    151e:	4628      	moveq	r0, r5
    1520:	eeb0 0a48 	vmovne.f32	s0, s16
    1524:	f003 fcb0 	bl	4e88 <__tADSRT_on_veneer>
		for (int v = 0; v < NUM_ENV; v++)
    1528:	4544      	cmp	r4, r8
    152a:	f105 0504 	add.w	r5, r5, #4
		    voiceSounding = 1;
    152e:	703e      	strb	r6, [r7, #0]
		for (int v = 0; v < NUM_ENV; v++)
    1530:	d1ea      	bne.n	1508 <sendNoteOn+0x68>
			if (noteOnSync > 0.5f)
    1532:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    1536:	4d1e      	ldr	r5, [pc, #120]	; (15b0 <sendNoteOn+0x110>)
		for (int v = 0; v < NUM_LFOS; v++)
    1538:	2400      	movs	r4, #0
			if (noteOnSync > 0.5f)
    153a:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
				lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal, v);
    153e:	4620      	mov	r0, r4
		for (int v = 0; v < NUM_LFOS; v++)
    1540:	3401      	adds	r4, #1
			if (noteOnSync > 0.5f)
    1542:	eef4 7ac8 	vcmpe.f32	s15, s16
    1546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    154a:	dd03      	ble.n	1554 <sendNoteOn+0xb4>
				lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal, v);
    154c:	68ab      	ldr	r3, [r5, #8]
    154e:	ed95 0a00 	vldr	s0, [r5]
    1552:	4798      	blx	r3
		for (int v = 0; v < NUM_LFOS; v++)
    1554:	2c04      	cmp	r4, #4
    1556:	f105 0564 	add.w	r5, r5, #100	; 0x64
    155a:	d1ee      	bne.n	153a <sendNoteOn+0x9a>
}
    155c:	ecbd 8b02 	vpop	{d8}
    1560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tSimplePoly_noteOff(&myPoly, note);
    1564:	4809      	ldr	r0, [pc, #36]	; (158c <sendNoteOn+0xec>)
    1566:	f003 fc6f 	bl	4e48 <__tSimplePoly_noteOff_veneer>
			tADSRT_off(&envs[v]);
    156a:	480e      	ldr	r0, [pc, #56]	; (15a4 <sendNoteOn+0x104>)
    156c:	f003 fd20 	bl	4fb0 <__tADSRT_off_veneer>
    1570:	4810      	ldr	r0, [pc, #64]	; (15b4 <sendNoteOn+0x114>)
    1572:	f003 fd1d 	bl	4fb0 <__tADSRT_off_veneer>
    1576:	4810      	ldr	r0, [pc, #64]	; (15b8 <sendNoteOn+0x118>)
    1578:	f003 fd1a 	bl	4fb0 <__tADSRT_off_veneer>
    157c:	480f      	ldr	r0, [pc, #60]	; (15bc <sendNoteOn+0x11c>)
}
    157e:	ecbd 8b02 	vpop	{d8}
    1582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			tADSRT_off(&envs[v]);
    1586:	f003 bd13 	b.w	4fb0 <__tADSRT_off_veneer>
    158a:	bf00      	nop
    158c:	200006bc 	.word	0x200006bc
    1590:	20000754 	.word	0x20000754
    1594:	20012480 	.word	0x20012480
    1598:	3bfbd6ee 	.word	0x3bfbd6ee
    159c:	3cc41809 	.word	0x3cc41809
    15a0:	2000f398 	.word	0x2000f398
    15a4:	20000214 	.word	0x20000214
    15a8:	2000908c 	.word	0x2000908c
    15ac:	20009138 	.word	0x20009138
    15b0:	2000f53c 	.word	0x2000f53c
    15b4:	20000218 	.word	0x20000218
    15b8:	2000021c 	.word	0x2000021c
    15bc:	20000220 	.word	0x20000220

000015c0 <sendCtrl>:
	sourceValues[CTRL_SOURCE_OFFSET + (ctrl - CTRL_MIDI_START)] = (float)value * INV_TWO_TO_7;
    15c0:	ee07 1a90 	vmov	s15, r1
    15c4:	4b03      	ldr	r3, [pc, #12]	; (15d4 <sendCtrl+0x14>)
    15c6:	eefb 7aec 	vcvt.f32.u32	s15, s15, #7
    15ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    15ce:	edc0 7a03 	vstr	s15, [r0, #12]
}
    15d2:	4770      	bx	lr
    15d4:	2000908c 	.word	0x2000908c
    15d8:	f3af 8000 	nop.w
    15dc:	f3af 8000 	nop.w

000015e0 <sendPitchBend>:
	bend = bendInt * bendRangeMultiplier; //by default, divide by (16383 / 96 semitones)
    15e0:	4a08      	ldr	r2, [pc, #32]	; (1604 <sendPitchBend+0x24>)
	int bendInt = value + (ctrl << 7);
    15e2:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
	bend = bendInt * bendRangeMultiplier; //by default, divide by (16383 / 96 semitones)
    15e6:	4b08      	ldr	r3, [pc, #32]	; (1608 <sendPitchBend+0x28>)
    15e8:	ed92 7a00 	vldr	s14, [r2]
	bendInt = bendInt - 8192;
    15ec:	f5a1 5200 	sub.w	r2, r1, #8192	; 0x2000
    15f0:	ee07 2a90 	vmov	s15, r2
	bend = bendInt * bendRangeMultiplier; //by default, divide by (16383 / 96 semitones)
    15f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    15f8:	ee67 7a87 	vmul.f32	s15, s15, s14
    15fc:	edc3 7a00 	vstr	s15, [r3]
}
    1600:	4770      	bx	lr
    1602:	bf00      	nop
    1604:	20000000 	.word	0x20000000
    1608:	200001a8 	.word	0x200001a8
    160c:	f3af 8000 	nop.w
    1610:	f3af 8000 	nop.w
    1614:	f3af 8000 	nop.w
    1618:	f3af 8000 	nop.w
    161c:	f3af 8000 	nop.w

00001620 <HAL_SAI_RxCpltCallback>:
	if (!diskBusy)
    1620:	4b1c      	ldr	r3, [pc, #112]	; (1694 <HAL_SAI_RxCpltCallback+0x74>)
    1622:	781b      	ldrb	r3, [r3, #0]
    1624:	b103      	cbz	r3, 1628 <HAL_SAI_RxCpltCallback+0x8>
    1626:	4770      	bx	lr
{
    1628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
    162c:	4c1a      	ldr	r4, [pc, #104]	; (1698 <HAL_SAI_RxCpltCallback+0x78>)
{
    162e:	b082      	sub	sp, #8
	sample = tCycle_tick(&testSine);
    1630:	481a      	ldr	r0, [pc, #104]	; (169c <HAL_SAI_RxCpltCallback+0x7c>)
	volatile uint32_t tmpCnt = 0;
    1632:	9301      	str	r3, [sp, #4]
	uint32_t tempCountFrame = DWT->CYCCNT;
    1634:	6867      	ldr	r7, [r4, #4]
	tmpCnt = DWT->CYCCNT;
    1636:	6863      	ldr	r3, [r4, #4]
	timeTick = tempCount6-tempCount5;
    1638:	4d19      	ldr	r5, [pc, #100]	; (16a0 <HAL_SAI_RxCpltCallback+0x80>)
	tmpCnt = DWT->CYCCNT;
    163a:	9301      	str	r3, [sp, #4]
	uint32_t tempCount5 = DWT->CYCCNT;
    163c:	6866      	ldr	r6, [r4, #4]
	sample = tCycle_tick(&testSine);
    163e:	f003 fc6b 	bl	4f18 <__tCycle_tick_veneer>
	uint32_t tempCount6 = DWT->CYCCNT;
    1642:	6862      	ldr	r2, [r4, #4]
		current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    1644:	eebe 0ae4 	vcvt.s32.f32	s0, s0, #23
	sample = tCycle_tick(&testSine);
    1648:	4814      	ldr	r0, [pc, #80]	; (169c <HAL_SAI_RxCpltCallback+0x7c>)
	timeTick = tempCount6-tempCount5;
    164a:	1b92      	subs	r2, r2, r6
		audioOutBuffer[buffer_offset + i] = current_sample;
    164c:	4e15      	ldr	r6, [pc, #84]	; (16a4 <HAL_SAI_RxCpltCallback+0x84>)
		current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    164e:	ed86 0a04 	vstr	s0, [r6, #16]
	timeTick = tempCount6-tempCount5;
    1652:	602a      	str	r2, [r5, #0]
	uint32_t tempCount5 = DWT->CYCCNT;
    1654:	f8d4 8004 	ldr.w	r8, [r4, #4]
	sample = tCycle_tick(&testSine);
    1658:	f003 fc5e 	bl	4f18 <__tCycle_tick_veneer>
		current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    165c:	eebe 0ae4 	vcvt.s32.f32	s0, s0, #23
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1660:	4b11      	ldr	r3, [pc, #68]	; (16a8 <HAL_SAI_RxCpltCallback+0x88>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1662:	4912      	ldr	r1, [pc, #72]	; (16ac <HAL_SAI_RxCpltCallback+0x8c>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1664:	ed93 7a00 	vldr	s14, [r3]
		current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    1668:	ed86 0a06 	vstr	s0, [r6, #24]
	uint32_t tempCount6 = DWT->CYCCNT;
    166c:	6862      	ldr	r2, [r4, #4]
	timeTick = tempCount6-tempCount5;
    166e:	eba2 0208 	sub.w	r2, r2, r8
    1672:	602a      	str	r2, [r5, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1674:	6863      	ldr	r3, [r4, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1676:	4a0e      	ldr	r2, [pc, #56]	; (16b0 <HAL_SAI_RxCpltCallback+0x90>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1678:	1bdb      	subs	r3, r3, r7
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    167a:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    167e:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1680:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1684:	ee67 7a87 	vmul.f32	s15, s15, s14
    1688:	edc2 7a00 	vstr	s15, [r2]
}
    168c:	b002      	add	sp, #8
    168e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1692:	bf00      	nop
    1694:	2000a27c 	.word	0x2000a27c
    1698:	e0001000 	.word	0xe0001000
    169c:	200090fc 	.word	0x200090fc
    16a0:	20009120 	.word	0x20009120
    16a4:	30000000 	.word	0x30000000
    16a8:	20000008 	.word	0x20000008
    16ac:	20009108 	.word	0x20009108
    16b0:	20000440 	.word	0x20000440
    16b4:	f3af 8000 	nop.w
    16b8:	f3af 8000 	nop.w
    16bc:	f3af 8000 	nop.w

000016c0 <HAL_SAI_RxHalfCpltCallback>:
	if (!diskBusy)
    16c0:	4b1c      	ldr	r3, [pc, #112]	; (1734 <HAL_SAI_RxHalfCpltCallback+0x74>)
    16c2:	781b      	ldrb	r3, [r3, #0]
    16c4:	b103      	cbz	r3, 16c8 <HAL_SAI_RxHalfCpltCallback+0x8>
    16c6:	4770      	bx	lr
{
    16c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
    16cc:	4c1a      	ldr	r4, [pc, #104]	; (1738 <HAL_SAI_RxHalfCpltCallback+0x78>)
{
    16ce:	b082      	sub	sp, #8
	sample = tCycle_tick(&testSine);
    16d0:	481a      	ldr	r0, [pc, #104]	; (173c <HAL_SAI_RxHalfCpltCallback+0x7c>)
	volatile uint32_t tmpCnt = 0;
    16d2:	9301      	str	r3, [sp, #4]
	uint32_t tempCountFrame = DWT->CYCCNT;
    16d4:	6867      	ldr	r7, [r4, #4]
	tmpCnt = DWT->CYCCNT;
    16d6:	6863      	ldr	r3, [r4, #4]
	timeTick = tempCount6-tempCount5;
    16d8:	4d19      	ldr	r5, [pc, #100]	; (1740 <HAL_SAI_RxHalfCpltCallback+0x80>)
	tmpCnt = DWT->CYCCNT;
    16da:	9301      	str	r3, [sp, #4]
	uint32_t tempCount5 = DWT->CYCCNT;
    16dc:	6866      	ldr	r6, [r4, #4]
	sample = tCycle_tick(&testSine);
    16de:	f003 fc1b 	bl	4f18 <__tCycle_tick_veneer>
	uint32_t tempCount6 = DWT->CYCCNT;
    16e2:	6862      	ldr	r2, [r4, #4]
		current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    16e4:	eebe 0ae4 	vcvt.s32.f32	s0, s0, #23
	sample = tCycle_tick(&testSine);
    16e8:	4814      	ldr	r0, [pc, #80]	; (173c <HAL_SAI_RxHalfCpltCallback+0x7c>)
	timeTick = tempCount6-tempCount5;
    16ea:	1b92      	subs	r2, r2, r6
		audioOutBuffer[buffer_offset + i] = current_sample;
    16ec:	4e15      	ldr	r6, [pc, #84]	; (1744 <HAL_SAI_RxHalfCpltCallback+0x84>)
		current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    16ee:	ed86 0a00 	vstr	s0, [r6]
	timeTick = tempCount6-tempCount5;
    16f2:	602a      	str	r2, [r5, #0]
	uint32_t tempCount5 = DWT->CYCCNT;
    16f4:	f8d4 8004 	ldr.w	r8, [r4, #4]
	sample = tCycle_tick(&testSine);
    16f8:	f003 fc0e 	bl	4f18 <__tCycle_tick_veneer>
		current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    16fc:	eebe 0ae4 	vcvt.s32.f32	s0, s0, #23
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1700:	4b11      	ldr	r3, [pc, #68]	; (1748 <HAL_SAI_RxHalfCpltCallback+0x88>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1702:	4912      	ldr	r1, [pc, #72]	; (174c <HAL_SAI_RxHalfCpltCallback+0x8c>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1704:	ed93 7a00 	vldr	s14, [r3]
		current_sample = (int32_t)(audioTickL() * TWO_TO_23);
    1708:	ed86 0a02 	vstr	s0, [r6, #8]
	uint32_t tempCount6 = DWT->CYCCNT;
    170c:	6862      	ldr	r2, [r4, #4]
	timeTick = tempCount6-tempCount5;
    170e:	eba2 0208 	sub.w	r2, r2, r8
    1712:	602a      	str	r2, [r5, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1714:	6863      	ldr	r3, [r4, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1716:	4a0e      	ldr	r2, [pc, #56]	; (1750 <HAL_SAI_RxHalfCpltCallback+0x90>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1718:	1bdb      	subs	r3, r3, r7
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    171a:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    171e:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1720:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1724:	ee67 7a87 	vmul.f32	s15, s15, s14
    1728:	edc2 7a00 	vstr	s15, [r2]
}
    172c:	b002      	add	sp, #8
    172e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1732:	bf00      	nop
    1734:	2000a27c 	.word	0x2000a27c
    1738:	e0001000 	.word	0xe0001000
    173c:	200090fc 	.word	0x200090fc
    1740:	20009120 	.word	0x20009120
    1744:	30000000 	.word	0x30000000
    1748:	20000008 	.word	0x20000008
    174c:	20009108 	.word	0x20009108
    1750:	20000440 	.word	0x20000440
    1754:	f3af 8000 	nop.w
    1758:	f3af 8000 	nop.w
    175c:	f3af 8000 	nop.w

00001760 <cStack_init>:
        stack->buffer[i][0] = -1;
    1760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    stack->writeCnt = 0;
    1764:	2200      	movs	r2, #0
        stack->buffer[i][0] = -1;
    1766:	6003      	str	r3, [r0, #0]
    stack->writeCnt = 0;
    1768:	f8a0 20c0 	strh.w	r2, [r0, #192]	; 0xc0
        stack->buffer[i][0] = -1;
    176c:	6043      	str	r3, [r0, #4]
    176e:	6083      	str	r3, [r0, #8]
    1770:	60c3      	str	r3, [r0, #12]
    1772:	6103      	str	r3, [r0, #16]
    1774:	6143      	str	r3, [r0, #20]
    1776:	6183      	str	r3, [r0, #24]
    1778:	61c3      	str	r3, [r0, #28]
    177a:	6203      	str	r3, [r0, #32]
    177c:	6243      	str	r3, [r0, #36]	; 0x24
    177e:	6283      	str	r3, [r0, #40]	; 0x28
    1780:	62c3      	str	r3, [r0, #44]	; 0x2c
    1782:	6303      	str	r3, [r0, #48]	; 0x30
    1784:	6343      	str	r3, [r0, #52]	; 0x34
    1786:	6383      	str	r3, [r0, #56]	; 0x38
    1788:	63c3      	str	r3, [r0, #60]	; 0x3c
    178a:	6403      	str	r3, [r0, #64]	; 0x40
    178c:	6443      	str	r3, [r0, #68]	; 0x44
    178e:	6483      	str	r3, [r0, #72]	; 0x48
    1790:	64c3      	str	r3, [r0, #76]	; 0x4c
    1792:	6503      	str	r3, [r0, #80]	; 0x50
    1794:	6543      	str	r3, [r0, #84]	; 0x54
    1796:	6583      	str	r3, [r0, #88]	; 0x58
    1798:	65c3      	str	r3, [r0, #92]	; 0x5c
    179a:	6603      	str	r3, [r0, #96]	; 0x60
    179c:	6643      	str	r3, [r0, #100]	; 0x64
    179e:	6683      	str	r3, [r0, #104]	; 0x68
    17a0:	66c3      	str	r3, [r0, #108]	; 0x6c
    17a2:	6703      	str	r3, [r0, #112]	; 0x70
    17a4:	6743      	str	r3, [r0, #116]	; 0x74
    17a6:	6783      	str	r3, [r0, #120]	; 0x78
    17a8:	67c3      	str	r3, [r0, #124]	; 0x7c
    17aa:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    17ae:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    17b2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    17b6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    17ba:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    17be:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    17c2:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    17c6:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    17ca:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    17ce:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    17d2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    17d6:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    17da:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    17de:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    17e2:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
    17e6:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
}
    17ea:	4770      	bx	lr
    17ec:	f3af 8000 	nop.w
    17f0:	f3af 8000 	nop.w
    17f4:	f3af 8000 	nop.w
    17f8:	f3af 8000 	nop.w
    17fc:	f3af 8000 	nop.w

00001800 <cStack_push>:
    stack->buffer[stack->writeCnt][0] = val;
    1800:	f990 c0c0 	ldrsb.w	ip, [r0, #192]	; 0xc0
{
    1804:	b500      	push	{lr}
    stack->buffer[stack->writeCnt][0] = val;
    1806:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
    stack->writeCnt = (stack->writeCnt + 1 ) & 63;
    180a:	f10c 0c01 	add.w	ip, ip, #1
    stack->buffer[stack->writeCnt][0] = val;
    180e:	f800 100e 	strb.w	r1, [r0, lr]
    stack->writeCnt = (stack->writeCnt + 1 ) & 63;
    1812:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    stack->buffer[stack->writeCnt][0] = val;
    1816:	4486      	add	lr, r0
    stack->buffer[stack->writeCnt][1] = val1;
    1818:	f88e 2001 	strb.w	r2, [lr, #1]
    stack->buffer[stack->writeCnt][2] = val2;
    181c:	f88e 3002 	strb.w	r3, [lr, #2]
    stack->writeCnt = (stack->writeCnt + 1 ) & 63;
    1820:	f880 c0c0 	strb.w	ip, [r0, #192]	; 0xc0
}
    1824:	f85d fb04 	ldr.w	pc, [sp], #4
    1828:	f3af 8000 	nop.w
    182c:	f3af 8000 	nop.w
    1830:	f3af 8000 	nop.w
    1834:	f3af 8000 	nop.w
    1838:	f3af 8000 	nop.w
    183c:	f3af 8000 	nop.w

00001840 <cStack_pop>:
    output[0] = stack->buffer[stack->readCnt][0];
    1840:	f990 30c1 	ldrsb.w	r3, [r0, #193]	; 0xc1
    1844:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1848:	5cc3      	ldrb	r3, [r0, r3]
    184a:	700b      	strb	r3, [r1, #0]
    output[1] = stack->buffer[stack->readCnt][1];
    184c:	f990 30c1 	ldrsb.w	r3, [r0, #193]	; 0xc1
    1850:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1854:	4403      	add	r3, r0
    1856:	785b      	ldrb	r3, [r3, #1]
    1858:	704b      	strb	r3, [r1, #1]
    output[2] = stack->buffer[stack->readCnt][2];
    185a:	f990 30c1 	ldrsb.w	r3, [r0, #193]	; 0xc1
    185e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1862:	4403      	add	r3, r0
    1864:	789b      	ldrb	r3, [r3, #2]
    1866:	708b      	strb	r3, [r1, #2]
    stack->readCnt = (stack->readCnt + 1) & 63;
    1868:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    186c:	3301      	adds	r3, #1
    186e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1872:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
}
    1876:	4770      	bx	lr
    1878:	f3af 8000 	nop.w
    187c:	f3af 8000 	nop.w

00001880 <clipperGainSet>:
	param1[v] = fasterdbtoa(value * 24.0f);
    1880:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    1884:	b510      	push	{r4, lr}
	param1[v] = fasterdbtoa(value * 24.0f);
    1886:	ee20 0a27 	vmul.f32	s0, s0, s15
{
    188a:	4604      	mov	r4, r0
	param1[v] = fasterdbtoa(value * 24.0f);
    188c:	f003 fb58 	bl	4f40 <__fasterdbtoa_veneer>
    1890:	4802      	ldr	r0, [pc, #8]	; (189c <clipperGainSet+0x1c>)
    1892:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1896:	ed80 0a00 	vstr	s0, [r0]
}
    189a:	bd10      	pop	{r4, pc}
    189c:	200006ec 	.word	0x200006ec

000018a0 <wavefolderParam1>:
	param1[v] = fasterdbtoa(value * 12.0f);
    18a0:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    18a4:	b510      	push	{r4, lr}
	param1[v] = fasterdbtoa(value * 12.0f);
    18a6:	ee20 0a27 	vmul.f32	s0, s0, s15
{
    18aa:	4604      	mov	r4, r0
	param1[v] = fasterdbtoa(value * 12.0f);
    18ac:	f003 fb48 	bl	4f40 <__fasterdbtoa_veneer>
    18b0:	4802      	ldr	r0, [pc, #8]	; (18bc <wavefolderParam1+0x1c>)
    18b2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    18b6:	ed80 0a00 	vstr	s0, [r0]
}
    18ba:	bd10      	pop	{r4, pc}
    18bc:	200006ec 	.word	0x200006ec

000018c0 <wavefolderParam3>:
	invCurFB[v] = (1.0f / (1.0f + value));
    18c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    18c4:	4b07      	ldr	r3, [pc, #28]	; (18e4 <wavefolderParam3+0x24>)
	param3[v] = value;
    18c6:	4a08      	ldr	r2, [pc, #32]	; (18e8 <wavefolderParam3+0x28>)
	invCurFB[v] = (1.0f / (1.0f + value));
    18c8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    18cc:	ee70 6a27 	vadd.f32	s13, s0, s15
	param3[v] = value;
    18d0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    18d4:	ed82 0a00 	vstr	s0, [r2]
	invCurFB[v] = (1.0f / (1.0f + value));
    18d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    18dc:	ed83 7a00 	vstr	s14, [r3]
}
    18e0:	4770      	bx	lr
    18e2:	bf00      	nop
    18e4:	20000478 	.word	0x20000478
    18e8:	2000070c 	.word	0x2000070c
    18ec:	f3af 8000 	nop.w
    18f0:	f3af 8000 	nop.w
    18f4:	f3af 8000 	nop.w
    18f8:	f3af 8000 	nop.w
    18fc:	f3af 8000 	nop.w

00001900 <tiltParam1>:
{
    1900:	b510      	push	{r4, lr}
	tVZFilter_setGain(&shelf1[v], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    1902:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    1906:	0084      	lsls	r4, r0, #2
{
    1908:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    190c:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    1910:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&shelf1[v], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    1914:	eee0 7a68 	vfms.f32	s15, s0, s17
    1918:	eeb0 0a67 	vmov.f32	s0, s15
    191c:	f003 fb10 	bl	4f40 <__fasterdbtoa_veneer>
    1920:	4808      	ldr	r0, [pc, #32]	; (1944 <tiltParam1+0x44>)
    1922:	4420      	add	r0, r4
    1924:	f003 fb4c 	bl	4fc0 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&shelf2[v], fasterdbtoa((value * 30.0f) - 15.0f));
    1928:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    192c:	eea8 0a28 	vfma.f32	s0, s16, s17
    1930:	f003 fb06 	bl	4f40 <__fasterdbtoa_veneer>
    1934:	4804      	ldr	r0, [pc, #16]	; (1948 <tiltParam1+0x48>)
}
    1936:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&shelf2[v], fasterdbtoa((value * 30.0f) - 15.0f));
    193a:	4420      	add	r0, r4
}
    193c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&shelf2[v], fasterdbtoa((value * 30.0f) - 15.0f));
    1940:	f003 bb3e 	b.w	4fc0 <__tVZFilter_setGain_veneer>
    1944:	2000079c 	.word	0x2000079c
    1948:	200007ac 	.word	0x200007ac
    194c:	f3af 8000 	nop.w
    1950:	f3af 8000 	nop.w
    1954:	f3af 8000 	nop.w
    1958:	f3af 8000 	nop.w
    195c:	f3af 8000 	nop.w

00001960 <tiltParam2>:
	value = (value * 77.0f) + 42.0f;
    1960:	ed9f 7a09 	vldr	s14, [pc, #36]	; 1988 <tiltParam2+0x28>
    1964:	eddf 7a09 	vldr	s15, [pc, #36]	; 198c <tiltParam2+0x2c>
	tVZFilter_setFreq(&bell1[v], mtof(value));
    1968:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    196c:	b510      	push	{r4, lr}
    196e:	4604      	mov	r4, r0
	tVZFilter_setFreq(&bell1[v], mtof(value));
    1970:	eeb0 0a67 	vmov.f32	s0, s15
    1974:	f003 faa4 	bl	4ec0 <__mtof_veneer>
    1978:	4805      	ldr	r0, [pc, #20]	; (1990 <tiltParam2+0x30>)
    197a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    197e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreq(&bell1[v], mtof(value));
    1982:	f003 bb09 	b.w	4f98 <__tVZFilter_setFreq_veneer>
    1986:	bf00      	nop
    1988:	429a0000 	.word	0x429a0000
    198c:	42280000 	.word	0x42280000
    1990:	20000198 	.word	0x20000198
    1994:	f3af 8000 	nop.w
    1998:	f3af 8000 	nop.w
    199c:	f3af 8000 	nop.w

000019a0 <tiltParam3>:
	tVZFilter_setResonance(&bell1[v], (value +1.0f)*6.0f);//TODO: make this match plugin
    19a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    19a4:	4b05      	ldr	r3, [pc, #20]	; (19bc <tiltParam3+0x1c>)
    19a6:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    19aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    19ae:	ee30 0a07 	vadd.f32	s0, s0, s14
    19b2:	ee20 0a27 	vmul.f32	s0, s0, s15
    19b6:	f003 bacb 	b.w	4f50 <__tVZFilter_setResonance_veneer>
    19ba:	bf00      	nop
    19bc:	20000198 	.word	0x20000198

000019c0 <tiltParam4>:
	tVZFilter_setGain(&bell1[v], fastdbtoa((value * 34.0f) - 17.0f));
    19c0:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    19c4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 19e8 <tiltParam4+0x28>
{
    19c8:	b510      	push	{r4, lr}
	tVZFilter_setGain(&bell1[v], fastdbtoa((value * 34.0f) - 17.0f));
    19ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    19ce:	4604      	mov	r4, r0
	tVZFilter_setGain(&bell1[v], fastdbtoa((value * 34.0f) - 17.0f));
    19d0:	eeb0 0a67 	vmov.f32	s0, s15
    19d4:	f003 fa20 	bl	4e18 <__fastdbtoa_veneer>
    19d8:	4804      	ldr	r0, [pc, #16]	; (19ec <tiltParam4+0x2c>)
    19da:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    19de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&bell1[v], fastdbtoa((value * 34.0f) - 17.0f));
    19e2:	f003 baed 	b.w	4fc0 <__tVZFilter_setGain_veneer>
    19e6:	bf00      	nop
    19e8:	42080000 	.word	0x42080000
    19ec:	20000198 	.word	0x20000198
    19f0:	f3af 8000 	nop.w
    19f4:	f3af 8000 	nop.w
    19f8:	f3af 8000 	nop.w
    19fc:	f3af 8000 	nop.w

00001a00 <compressorParam1>:
	comp[v]->T = value*-24.0f;
    1a00:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    1a04:	4b03      	ldr	r3, [pc, #12]	; (1a14 <compressorParam1+0x14>)
    1a06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1a0a:	ee20 0a27 	vmul.f32	s0, s0, s15
    1a0e:	ed83 0a03 	vstr	s0, [r3, #12]
}
    1a12:	4770      	bx	lr
    1a14:	200001ac 	.word	0x200001ac
    1a18:	f3af 8000 	nop.w
    1a1c:	f3af 8000 	nop.w

00001a20 <compressorParam2>:
	comp[v]->R = ((value*10.0f)+1.0f);
    1a20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1a24:	4b07      	ldr	r3, [pc, #28]	; (1a44 <compressorParam2+0x24>)
    1a26:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    1a2a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1a2e:	eef0 7a47 	vmov.f32	s15, s14
    1a32:	eee0 7a26 	vfma.f32	s15, s0, s13
	comp[v]->invR  = 1.0f / comp[v]->R;
    1a36:	eec7 6a27 	vdiv.f32	s13, s14, s15
	comp[v]->R = ((value*10.0f)+1.0f);
    1a3a:	edc3 7a04 	vstr	s15, [r3, #16]
	comp[v]->invR  = 1.0f / comp[v]->R;
    1a3e:	edc3 6a07 	vstr	s13, [r3, #28]
}
    1a42:	4770      	bx	lr
    1a44:	200001ac 	.word	0x200001ac
    1a48:	f3af 8000 	nop.w
    1a4c:	f3af 8000 	nop.w
    1a50:	f3af 8000 	nop.w
    1a54:	f3af 8000 	nop.w
    1a58:	f3af 8000 	nop.w
    1a5c:	f3af 8000 	nop.w

00001a60 <compressorParam3>:
	comp[v]->M = value * 18.0f;
    1a60:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    1a64:	4b03      	ldr	r3, [pc, #12]	; (1a74 <compressorParam3+0x14>)
    1a66:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1a6a:	ee20 0a27 	vmul.f32	s0, s0, s15
    1a6e:	ed83 0a06 	vstr	s0, [r3, #24]
}
    1a72:	4770      	bx	lr
    1a74:	200001ac 	.word	0x200001ac
    1a78:	f3af 8000 	nop.w
    1a7c:	f3af 8000 	nop.w

00001a80 <compressorParam4>:
	comp[v]->tauAttack = fasterexpf(-1.0f/(value * comp[v]->sampleRate));
    1a80:	4b0a      	ldr	r3, [pc, #40]	; (1aac <compressorParam4+0x2c>)
    1a82:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
	value = (value +  0.001f);
    1a86:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 1ab0 <compressorParam4+0x30>
{
    1a8a:	b510      	push	{r4, lr}
	comp[v]->tauAttack = fasterexpf(-1.0f/(value * comp[v]->sampleRate));
    1a8c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    1a90:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v]->tauAttack = fasterexpf(-1.0f/(value * comp[v]->sampleRate));
    1a94:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    1a98:	ee20 0a07 	vmul.f32	s0, s0, s14
    1a9c:	ee87 0a80 	vdiv.f32	s0, s15, s0
    1aa0:	f003 fa12 	bl	4ec8 <__fasterexpf_veneer>
    1aa4:	ed84 0a01 	vstr	s0, [r4, #4]
}
    1aa8:	bd10      	pop	{r4, pc}
    1aaa:	bf00      	nop
    1aac:	200001ac 	.word	0x200001ac
    1ab0:	3a83126f 	.word	0x3a83126f
    1ab4:	f3af 8000 	nop.w
    1ab8:	f3af 8000 	nop.w
    1abc:	f3af 8000 	nop.w

00001ac0 <compressorParam5>:
	comp[v]->tauRelease = fasterexpf(-1.0f/(value * comp[v]->sampleRate));
    1ac0:	4b0a      	ldr	r3, [pc, #40]	; (1aec <compressorParam5+0x2c>)
    1ac2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
	value = (value + 0.001f);
    1ac6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 1af0 <compressorParam5+0x30>
{
    1aca:	b510      	push	{r4, lr}
	comp[v]->tauRelease = fasterexpf(-1.0f/(value * comp[v]->sampleRate));
    1acc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    1ad0:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v]->tauRelease = fasterexpf(-1.0f/(value * comp[v]->sampleRate));
    1ad4:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    1ad8:	ee20 0a07 	vmul.f32	s0, s0, s14
    1adc:	ee87 0a80 	vdiv.f32	s0, s15, s0
    1ae0:	f003 f9f2 	bl	4ec8 <__fasterexpf_veneer>
    1ae4:	ed84 0a02 	vstr	s0, [r4, #8]
}
    1ae8:	bd10      	pop	{r4, pc}
    1aea:	bf00      	nop
    1aec:	200001ac 	.word	0x200001ac
    1af0:	3a83126f 	.word	0x3a83126f
    1af4:	f3af 8000 	nop.w
    1af8:	f3af 8000 	nop.w
    1afc:	f3af 8000 	nop.w

00001b00 <offsetParam2>:
	param2[v] = (value * 2.0f) - 1.0f;
    1b00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    1b04:	4b04      	ldr	r3, [pc, #16]	; (1b18 <offsetParam2+0x18>)
    1b06:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    1b0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1b0e:	eee0 7a07 	vfma.f32	s15, s0, s14
    1b12:	edc0 7a00 	vstr	s15, [r0]
}
    1b16:	4770      	bx	lr
    1b18:	200006fc 	.word	0x200006fc
    1b1c:	f3af 8000 	nop.w

00001b20 <param2Linear>:
	param2[v] = value;
    1b20:	4b02      	ldr	r3, [pc, #8]	; (1b2c <param2Linear+0xc>)
    1b22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1b26:	ed80 0a00 	vstr	s0, [r0]
}
    1b2a:	4770      	bx	lr
    1b2c:	200006fc 	.word	0x200006fc
    1b30:	f3af 8000 	nop.w
    1b34:	f3af 8000 	nop.w
    1b38:	f3af 8000 	nop.w
    1b3c:	f3af 8000 	nop.w

00001b40 <param3Linear>:
	param3[v] = value;
    1b40:	4b02      	ldr	r3, [pc, #8]	; (1b4c <param3Linear+0xc>)
    1b42:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1b46:	ed80 0a00 	vstr	s0, [r0]
}
    1b4a:	4770      	bx	lr
    1b4c:	2000070c 	.word	0x2000070c
    1b50:	f3af 8000 	nop.w
    1b54:	f3af 8000 	nop.w
    1b58:	f3af 8000 	nop.w
    1b5c:	f3af 8000 	nop.w

00001b60 <param3Soft>:
	param3[v] = (value * .99f) + 0.01f;
    1b60:	eddf 6a0f 	vldr	s13, [pc, #60]	; 1ba0 <param3Soft+0x40>
    1b64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1b68:	eddf 7a0e 	vldr	s15, [pc, #56]	; 1ba4 <param3Soft+0x44>
    1b6c:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 1ba8 <param3Soft+0x48>
    1b70:	eee0 7a26 	vfma.f32	s15, s0, s13
    1b74:	4a0d      	ldr	r2, [pc, #52]	; (1bac <param3Soft+0x4c>)
    1b76:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v] = 1.0f / (param3[v] - ((param3[v]*param3[v]*param3[v]) * 0.3333333f));
    1b7a:	4b0d      	ldr	r3, [pc, #52]	; (1bb0 <param3Soft+0x50>)
	param3[v] = (value * .99f) + 0.01f;
    1b7c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	shapeDividerS[v] = 1.0f / (param3[v] - ((param3[v]*param3[v]*param3[v]) * 0.3333333f));
    1b80:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1b84:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v] = (value * .99f) + 0.01f;
    1b88:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v] = 1.0f / (param3[v] - ((param3[v]*param3[v]*param3[v]) * 0.3333333f));
    1b8c:	eee5 6a86 	vfma.f32	s13, s11, s12
    1b90:	ee67 7aa6 	vmul.f32	s15, s15, s13
    1b94:	eec7 6a27 	vdiv.f32	s13, s14, s15
    1b98:	edc3 6a00 	vstr	s13, [r3]
}
    1b9c:	4770      	bx	lr
    1b9e:	bf00      	nop
    1ba0:	3f7d70a4 	.word	0x3f7d70a4
    1ba4:	3c23d70a 	.word	0x3c23d70a
    1ba8:	3eaaaaaa 	.word	0x3eaaaaaa
    1bac:	2000070c 	.word	0x2000070c
    1bb0:	20000780 	.word	0x20000780
    1bb4:	f3af 8000 	nop.w
    1bb8:	f3af 8000 	nop.w
    1bbc:	f3af 8000 	nop.w

00001bc0 <param3Hard>:
	param3[v] = ((value * .99f) + 0.01f) * HALF_PI;
    1bc0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 1bf8 <param3Hard+0x38>
    1bc4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 1bfc <param3Hard+0x3c>
    1bc8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 1c00 <param3Hard+0x40>
    1bcc:	eee0 7a26 	vfma.f32	s15, s0, s13
    1bd0:	4b0c      	ldr	r3, [pc, #48]	; (1c04 <param3Hard+0x44>)
    1bd2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
    1bd6:	b510      	push	{r4, lr}
	param3[v] = ((value * .99f) + 0.01f) * HALF_PI;
    1bd8:	ee27 0a87 	vmul.f32	s0, s15, s14
    1bdc:	0084      	lsls	r4, r0, #2
    1bde:	ed83 0a00 	vstr	s0, [r3]
	shapeDividerH[v] = 1.0f / arm_sin_f32(param3[v]);
    1be2:	f003 f905 	bl	4df0 <__arm_sin_f32_veneer>
    1be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1bea:	4807      	ldr	r0, [pc, #28]	; (1c08 <param3Hard+0x48>)
    1bec:	eec7 7a00 	vdiv.f32	s15, s14, s0
    1bf0:	4420      	add	r0, r4
    1bf2:	edc0 7a00 	vstr	s15, [r0]
}
    1bf6:	bd10      	pop	{r4, pc}
    1bf8:	3f7d70a4 	.word	0x3f7d70a4
    1bfc:	3c23d70a 	.word	0x3c23d70a
    1c00:	3fc90fdb 	.word	0x3fc90fdb
    1c04:	2000070c 	.word	0x2000070c
    1c08:	20000770 	.word	0x20000770
    1c0c:	f3af 8000 	nop.w
    1c10:	f3af 8000 	nop.w
    1c14:	f3af 8000 	nop.w
    1c18:	f3af 8000 	nop.w
    1c1c:	f3af 8000 	nop.w

00001c20 <param4Linear>:
	param4[v] = value;
    1c20:	4b02      	ldr	r3, [pc, #8]	; (1c2c <param4Linear+0xc>)
    1c22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1c26:	ed80 0a00 	vstr	s0, [r0]
}
    1c2a:	4770      	bx	lr
    1c2c:	2000071c 	.word	0x2000071c
    1c30:	f3af 8000 	nop.w
    1c34:	f3af 8000 	nop.w
    1c38:	f3af 8000 	nop.w
    1c3c:	f3af 8000 	nop.w

00001c40 <param5Linear>:
	param5[v] = value;
    1c40:	4b02      	ldr	r3, [pc, #8]	; (1c4c <param5Linear+0xc>)
    1c42:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1c46:	ed80 0a00 	vstr	s0, [r0]
}
    1c4a:	4770      	bx	lr
    1c4c:	2000072c 	.word	0x2000072c
    1c50:	f3af 8000 	nop.w
    1c54:	f3af 8000 	nop.w
    1c58:	f3af 8000 	nop.w
    1c5c:	f3af 8000 	nop.w

00001c60 <param2BC>:
	tCrusher_setQuality (&bc[v],value);
    1c60:	4b02      	ldr	r3, [pc, #8]	; (1c6c <param2BC+0xc>)
    1c62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1c66:	f003 b8f7 	b.w	4e58 <__tCrusher_setQuality_veneer>
    1c6a:	bf00      	nop
    1c6c:	20000188 	.word	0x20000188
    1c70:	f3af 8000 	nop.w
    1c74:	f3af 8000 	nop.w
    1c78:	f3af 8000 	nop.w
    1c7c:	f3af 8000 	nop.w

00001c80 <param3BC>:
	value = (value * inv_oversample) + 0.01f;
    1c80:	4b06      	ldr	r3, [pc, #24]	; (1c9c <param3BC+0x1c>)
    1c82:	eddf 7a07 	vldr	s15, [pc, #28]	; 1ca0 <param3BC+0x20>
    1c86:	ed93 7a00 	vldr	s14, [r3]
	tCrusher_setSamplingRatio (&bc[v], value);
    1c8a:	4b06      	ldr	r3, [pc, #24]	; (1ca4 <param3BC+0x24>)
    1c8c:	eee7 7a00 	vfma.f32	s15, s14, s0
    1c90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1c94:	eeb0 0a67 	vmov.f32	s0, s15
    1c98:	f003 b976 	b.w	4f88 <__tCrusher_setSamplingRatio_veneer>
    1c9c:	2000000c 	.word	0x2000000c
    1ca0:	3c23d70a 	.word	0x3c23d70a
    1ca4:	20000188 	.word	0x20000188
    1ca8:	f3af 8000 	nop.w
    1cac:	f3af 8000 	nop.w
    1cb0:	f3af 8000 	nop.w
    1cb4:	f3af 8000 	nop.w
    1cb8:	f3af 8000 	nop.w
    1cbc:	f3af 8000 	nop.w

00001cc0 <param4BC>:
	tCrusher_setRound(&bc[v], value);
    1cc0:	4b02      	ldr	r3, [pc, #8]	; (1ccc <param4BC+0xc>)
    1cc2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1cc6:	f003 b8eb 	b.w	4ea0 <__tCrusher_setRound_veneer>
    1cca:	bf00      	nop
    1ccc:	20000188 	.word	0x20000188
    1cd0:	f3af 8000 	nop.w
    1cd4:	f3af 8000 	nop.w
    1cd8:	f3af 8000 	nop.w
    1cdc:	f3af 8000 	nop.w

00001ce0 <param5BC>:
	tCrusher_setOperation(&bc[v], value);
    1ce0:	4b02      	ldr	r3, [pc, #8]	; (1cec <param5BC+0xc>)
    1ce2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1ce6:	f003 b89b 	b.w	4e20 <__tCrusher_setOperation_veneer>
    1cea:	bf00      	nop
    1cec:	20000188 	.word	0x20000188
    1cf0:	f3af 8000 	nop.w
    1cf4:	f3af 8000 	nop.w
    1cf8:	f3af 8000 	nop.w
    1cfc:	f3af 8000 	nop.w

00001d00 <fxMixSet>:
	fxMix[v] = value;
    1d00:	4b02      	ldr	r3, [pc, #8]	; (1d0c <fxMixSet+0xc>)
    1d02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1d06:	ed80 0a00 	vstr	s0, [r0]
}
    1d0a:	4770      	bx	lr
    1d0c:	20000450 	.word	0x20000450
    1d10:	f3af 8000 	nop.w
    1d14:	f3af 8000 	nop.w
    1d18:	f3af 8000 	nop.w
    1d1c:	f3af 8000 	nop.w

00001d20 <fxPostGainSet>:
	fxPostGain[v] = fasterdbtoa((value * 24.0f) - 12.0f);
    1d20:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    1d24:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    1d28:	b510      	push	{r4, lr}
	fxPostGain[v] = fasterdbtoa((value * 24.0f) - 12.0f);
    1d2a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    1d2e:	4604      	mov	r4, r0
	fxPostGain[v] = fasterdbtoa((value * 24.0f) - 12.0f);
    1d30:	eeb0 0a67 	vmov.f32	s0, s15
    1d34:	f003 f904 	bl	4f40 <__fasterdbtoa_veneer>
    1d38:	4802      	ldr	r0, [pc, #8]	; (1d44 <fxPostGainSet+0x24>)
    1d3a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1d3e:	ed80 0a00 	vstr	s0, [r0]
}
    1d42:	bd10      	pop	{r4, pc}
    1d44:	20000460 	.word	0x20000460
    1d48:	f3af 8000 	nop.w
    1d4c:	f3af 8000 	nop.w
    1d50:	f3af 8000 	nop.w
    1d54:	f3af 8000 	nop.w
    1d58:	f3af 8000 	nop.w
    1d5c:	f3af 8000 	nop.w

00001d60 <wavefolderTick>:
{
    1d60:	b538      	push	{r3, r4, r5, lr}
    float fbSample = wfState[v];
    1d62:	4d36      	ldr	r5, [pc, #216]	; (1e3c <wavefolderTick+0xdc>)
    1d64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    1d68:	eebf 5a00 	vmov.f32	s10, #240	; 0xbf800000 -1.0
    sample = sample * param1[v] + ((param2[v] * param1[v]));
    1d6c:	4b34      	ldr	r3, [pc, #208]	; (1e40 <wavefolderTick+0xe0>)
    float fbSample = wfState[v];
    1d6e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    sample = sample * param1[v] + ((param2[v] * param1[v]));
    1d72:	4a34      	ldr	r2, [pc, #208]	; (1e44 <wavefolderTick+0xe4>)
    1d74:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1d78:	ed9f 4a33 	vldr	s8, [pc, #204]	; 1e48 <wavefolderTick+0xe8>
    1d7c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float fb = curFB * fbSample;
    1d80:	eddf 4a32 	vldr	s9, [pc, #200]	; 1e4c <wavefolderTick+0xec>
    sample = sample * param1[v] + ((param2[v] * param1[v]));
    1d84:	ed93 6a00 	vldr	s12, [r3]
    1d88:	0084      	lsls	r4, r0, #2
    float curFB = param3[v];
    1d8a:	4b31      	ldr	r3, [pc, #196]	; (1e50 <wavefolderTick+0xf0>)
    sample = sample * param1[v] + ((param2[v] * param1[v]));
    1d8c:	ee30 0a06 	vadd.f32	s0, s0, s12
    1d90:	ed92 6a00 	vldr	s12, [r2]
    float curFB = param3[v];
    1d94:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v];
    1d98:	4a2e      	ldr	r2, [pc, #184]	; (1e54 <wavefolderTick+0xf4>)
{
    1d9a:	ed2d 8b02 	vpush	{d8}
    1d9e:	ed95 8a00 	vldr	s16, [r5]
    sample = sample * param1[v] + ((param2[v] * param1[v]));
    1da2:	ee20 6a06 	vmul.f32	s12, s0, s12
    float curFF = param4[v];
    1da6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1daa:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 1e58 <wavefolderTick+0xf8>
    1dae:	fe88 8a66 	vminnm.f32	s16, s16, s13
    1db2:	fe88 8a05 	vmaxnm.f32	s16, s16, s10
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    1db6:	ee68 7a08 	vmul.f32	s15, s16, s16
    1dba:	fe86 7a66 	vminnm.f32	s14, s12, s13
    1dbe:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    1dc2:	ee27 5a07 	vmul.f32	s10, s14, s14
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1dc6:	ee26 0a00 	vmul.f32	s0, s12, s0
    1dca:	ee67 7a84 	vmul.f32	s15, s15, s8
    1dce:	ee25 5a04 	vmul.f32	s10, s10, s8
    1dd2:	ee76 5ae7 	vsub.f32	s11, s13, s15
    float fb = curFB * fbSample;
    1dd6:	edd3 7a00 	vldr	s15, [r3]
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1dda:	4b20      	ldr	r3, [pc, #128]	; (1e5c <wavefolderTick+0xfc>)
    float fb = curFB * fbSample;
    1ddc:	ee67 7aa4 	vmul.f32	s15, s15, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    1de0:	ee28 8a25 	vmul.f32	s16, s16, s11
    float curFF = param4[v];
    1de4:	edd2 5a00 	vldr	s11, [r2]
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1de8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    1dec:	ee76 3ae5 	vsub.f32	s7, s13, s11
    float fb = curFB * fbSample;
    1df0:	ee67 7a88 	vmul.f32	s15, s15, s16
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1df4:	edd3 8a00 	vldr	s17, [r3]
    1df8:	ee76 6ac5 	vsub.f32	s13, s13, s10
    1dfc:	ee65 5aa4 	vmul.f32	s11, s11, s9
    1e00:	eee3 7a86 	vfma.f32	s15, s7, s12
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    1e04:	ee27 7a26 	vmul.f32	s14, s14, s13
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1e08:	eee7 7a25 	vfma.f32	s15, s14, s11
    1e0c:	eeb0 8a67 	vmov.f32	s16, s15
    1e10:	f002 ffee 	bl	4df0 <__arm_sin_f32_veneer>
    sample = wfState[v] * invCurFB[v];
    1e14:	4b12      	ldr	r3, [pc, #72]	; (1e60 <wavefolderTick+0x100>)
    sample = tHighpass_tick(&dcBlock1[v], sample);
    1e16:	4813      	ldr	r0, [pc, #76]	; (1e64 <wavefolderTick+0x104>)
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1e18:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v] * invCurFB[v];
    1e1c:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v], sample);
    1e1e:	4420      	add	r0, r4
    sample = wfState[v] * invCurFB[v];
    1e20:	ed93 7a00 	vldr	s14, [r3]
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1e24:	eee8 7ac0 	vfms.f32	s15, s17, s0
}
    1e28:	ecbd 8b02 	vpop	{d8}
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1e2c:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v], sample);
    1e30:	ee27 0a87 	vmul.f32	s0, s15, s14
}
    1e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v], sample);
    1e38:	f003 b886 	b.w	4f48 <__tHighpass_tick_veneer>
    1e3c:	2000913c 	.word	0x2000913c
    1e40:	200006fc 	.word	0x200006fc
    1e44:	200006ec 	.word	0x200006ec
    1e48:	3eaaaaaa 	.word	0x3eaaaaaa
    1e4c:	3fbffff8 	.word	0x3fbffff8
    1e50:	2000070c 	.word	0x2000070c
    1e54:	2000071c 	.word	0x2000071c
    1e58:	40c90fdb 	.word	0x40c90fdb
    1e5c:	2000072c 	.word	0x2000072c
    1e60:	20000478 	.word	0x20000478
    1e64:	200001bc 	.word	0x200001bc
    1e68:	f3af 8000 	nop.w
    1e6c:	f3af 8000 	nop.w
    1e70:	f3af 8000 	nop.w
    1e74:	f3af 8000 	nop.w
    1e78:	f3af 8000 	nop.w
    1e7c:	f3af 8000 	nop.w

00001e80 <chorusParam1>:
	param1[v] = value * 5780.0f + 10.0f;
    1e80:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    1e84:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1e98 <chorusParam1+0x18>
    1e88:	4b04      	ldr	r3, [pc, #16]	; (1e9c <chorusParam1+0x1c>)
    1e8a:	eee0 7a07 	vfma.f32	s15, s0, s14
    1e8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1e92:	edc0 7a00 	vstr	s15, [r0]
}
    1e96:	4770      	bx	lr
    1e98:	45b4a000 	.word	0x45b4a000
    1e9c:	200006ec 	.word	0x200006ec

00001ea0 <chorusParam2>:
	param2[v] = value * 0.1f;
    1ea0:	eddf 7a04 	vldr	s15, [pc, #16]	; 1eb4 <chorusParam2+0x14>
    1ea4:	4b04      	ldr	r3, [pc, #16]	; (1eb8 <chorusParam2+0x18>)
    1ea6:	ee20 0a27 	vmul.f32	s0, s0, s15
    1eaa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1eae:	ed80 0a00 	vstr	s0, [r0]
}
    1eb2:	4770      	bx	lr
    1eb4:	3dcccccd 	.word	0x3dcccccd
    1eb8:	200006fc 	.word	0x200006fc
    1ebc:	f3af 8000 	nop.w

00001ec0 <chorusParam3>:
    tCycle_setFreq(&mod1[v], (value * 0.4f) + 0.01f);
    1ec0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 1edc <chorusParam3+0x1c>
    1ec4:	eddf 7a06 	vldr	s15, [pc, #24]	; 1ee0 <chorusParam3+0x20>
    1ec8:	4b06      	ldr	r3, [pc, #24]	; (1ee4 <chorusParam3+0x24>)
    1eca:	eee0 7a07 	vfma.f32	s15, s0, s14
    1ece:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1ed2:	eeb0 0a67 	vmov.f32	s0, s15
    1ed6:	f003 b85b 	b.w	4f90 <__tCycle_setFreq_veneer>
    1eda:	bf00      	nop
    1edc:	3ecccccd 	.word	0x3ecccccd
    1ee0:	3c23d70a 	.word	0x3c23d70a
    1ee4:	2000069c 	.word	0x2000069c
    1ee8:	f3af 8000 	nop.w
    1eec:	f3af 8000 	nop.w
    1ef0:	f3af 8000 	nop.w
    1ef4:	f3af 8000 	nop.w
    1ef8:	f3af 8000 	nop.w
    1efc:	f3af 8000 	nop.w

00001f00 <chorusParam4>:
    tCycle_setFreq(&mod2[v], (value * 0.4444444f) + 0.011f);
    1f00:	ed9f 7a06 	vldr	s14, [pc, #24]	; 1f1c <chorusParam4+0x1c>
    1f04:	eddf 7a06 	vldr	s15, [pc, #24]	; 1f20 <chorusParam4+0x20>
    1f08:	4b06      	ldr	r3, [pc, #24]	; (1f24 <chorusParam4+0x24>)
    1f0a:	eee0 7a07 	vfma.f32	s15, s0, s14
    1f0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1f12:	eeb0 0a67 	vmov.f32	s0, s15
    1f16:	f003 b83b 	b.w	4f90 <__tCycle_setFreq_veneer>
    1f1a:	bf00      	nop
    1f1c:	3ee38e37 	.word	0x3ee38e37
    1f20:	3c343958 	.word	0x3c343958
    1f24:	200006ac 	.word	0x200006ac
    1f28:	f3af 8000 	nop.w
    1f2c:	f3af 8000 	nop.w
    1f30:	f3af 8000 	nop.w
    1f34:	f3af 8000 	nop.w
    1f38:	f3af 8000 	nop.w
    1f3c:	f3af 8000 	nop.w

00001f40 <chorusTick>:
{
    1f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f42:	4604      	mov	r4, r0
	tLinearDelay_setDelay(&delay1[v], param1[v] * .707f * (1.0f + param2[v] * tCycle_tick(&mod1[v])));
    1f44:	4f27      	ldr	r7, [pc, #156]	; (1fe4 <chorusTick+0xa4>)
    1f46:	4e28      	ldr	r6, [pc, #160]	; (1fe8 <chorusTick+0xa8>)
    1f48:	4828      	ldr	r0, [pc, #160]	; (1fec <chorusTick+0xac>)
    1f4a:	eb07 0784 	add.w	r7, r7, r4, lsl #2
    1f4e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    1f52:	4d27      	ldr	r5, [pc, #156]	; (1ff0 <chorusTick+0xb0>)
    1f54:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1f58:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    1f5c:	00a4      	lsls	r4, r4, #2
{
    1f5e:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[v], param1[v] * .707f * (1.0f + param2[v] * tCycle_tick(&mod1[v])));
    1f62:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    1f66:	ed97 9a00 	vldr	s18, [r7]
{
    1f6a:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[v], param1[v] * .707f * (1.0f + param2[v] * tCycle_tick(&mod1[v])));
    1f6e:	edd6 9a00 	vldr	s19, [r6]
    1f72:	f002 ffd1 	bl	4f18 <__tCycle_tick_veneer>
    1f76:	4628      	mov	r0, r5
    1f78:	eef0 7a48 	vmov.f32	s15, s16
    1f7c:	eee9 7a80 	vfma.f32	s15, s19, s0
    1f80:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 1ff4 <chorusTick+0xb4>
    1f84:	ee29 0a00 	vmul.f32	s0, s18, s0
    1f88:	ee20 0a27 	vmul.f32	s0, s0, s15
    1f8c:	f002 ff40 	bl	4e10 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[v], param1[v] * .5f * (1.0f - param2[v] * tCycle_tick(&mod2[v])));
    1f90:	4819      	ldr	r0, [pc, #100]	; (1ff8 <chorusTick+0xb8>)
    1f92:	4b1a      	ldr	r3, [pc, #104]	; (1ffc <chorusTick+0xbc>)
    1f94:	edd6 9a00 	vldr	s19, [r6]
    1f98:	4420      	add	r0, r4
    1f9a:	ed97 9a00 	vldr	s18, [r7]
    1f9e:	441c      	add	r4, r3
    1fa0:	f002 ffba 	bl	4f18 <__tCycle_tick_veneer>
    1fa4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1fa8:	eea9 8ac0 	vfms.f32	s16, s19, s0
    1fac:	4620      	mov	r0, r4
    1fae:	ee29 0a27 	vmul.f32	s0, s18, s15
    1fb2:	ee20 0a08 	vmul.f32	s0, s0, s16
    1fb6:	f002 ff2b 	bl	4e10 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[v], sample) - sample;
    1fba:	eeb0 0a68 	vmov.f32	s0, s17
    1fbe:	4628      	mov	r0, r5
    1fc0:	f002 ff9a 	bl	4ef8 <__tLinearDelay_tick_veneer>
    1fc4:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[v], sample) - sample;
    1fc8:	4620      	mov	r0, r4
    1fca:	eeb0 0a68 	vmov.f32	s0, s17
    1fce:	f002 ff93 	bl	4ef8 <__tLinearDelay_tick_veneer>
    return -temp;
    1fd2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    1fd6:	ee38 0a00 	vadd.f32	s0, s16, s0
}
    1fda:	ee98 0aa7 	vfnms.f32	s0, s17, s15
    1fde:	ecbd 8b04 	vpop	{d8-d9}
    1fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fe4:	200006ec 	.word	0x200006ec
    1fe8:	200006fc 	.word	0x200006fc
    1fec:	2000069c 	.word	0x2000069c
    1ff0:	200001dc 	.word	0x200001dc
    1ff4:	3f34fdf4 	.word	0x3f34fdf4
    1ff8:	200006ac 	.word	0x200006ac
    1ffc:	200001ec 	.word	0x200001ec

00002000 <shaperTick>:
    float temp = LEAF_shaper(sample + (param2[v] * param1[v]),param3[v]);
    2000:	4b0e      	ldr	r3, [pc, #56]	; (203c <shaperTick+0x3c>)
    sample = sample * param1[v];
    2002:	4a0f      	ldr	r2, [pc, #60]	; (2040 <shaperTick+0x40>)
    float temp = LEAF_shaper(sample + (param2[v] * param1[v]),param3[v]);
    2004:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    sample = sample * param1[v];
    2008:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float temp = LEAF_shaper(sample + (param2[v] * param1[v]),param3[v]);
    200c:	edd3 7a00 	vldr	s15, [r3]
    2010:	4b0c      	ldr	r3, [pc, #48]	; (2044 <shaperTick+0x44>)
    2012:	ee30 0a27 	vadd.f32	s0, s0, s15
    2016:	edd2 7a00 	vldr	s15, [r2]
    201a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
    201e:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v] * param1[v]),param3[v]);
    2020:	ee20 0a27 	vmul.f32	s0, s0, s15
    2024:	edd3 0a00 	vldr	s1, [r3]
    2028:	0084      	lsls	r4, r0, #2
    202a:	f002 ff55 	bl	4ed8 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v], temp);
    202e:	4806      	ldr	r0, [pc, #24]	; (2048 <shaperTick+0x48>)
    2030:	4420      	add	r0, r4
}
    2032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v], temp);
    2036:	f002 bf87 	b.w	4f48 <__tHighpass_tick_veneer>
    203a:	bf00      	nop
    203c:	200006fc 	.word	0x200006fc
    2040:	200006ec 	.word	0x200006ec
    2044:	2000070c 	.word	0x2000070c
    2048:	200001bc 	.word	0x200001bc
    204c:	f3af 8000 	nop.w
    2050:	f3af 8000 	nop.w
    2054:	f3af 8000 	nop.w
    2058:	f3af 8000 	nop.w
    205c:	f3af 8000 	nop.w

00002060 <blankTick>:
}
    2060:	4770      	bx	lr
    2062:	bf00      	nop
    2064:	f3af 8000 	nop.w
    2068:	f3af 8000 	nop.w
    206c:	f3af 8000 	nop.w
    2070:	f3af 8000 	nop.w
    2074:	f3af 8000 	nop.w
    2078:	f3af 8000 	nop.w
    207c:	f3af 8000 	nop.w

00002080 <tiltFilterTick>:
{
    2080:	b510      	push	{r4, lr}
    2082:	4604      	mov	r4, r0
    sample = tVZFilter_tickEfficient(&shelf1[v], sample);
    2084:	4807      	ldr	r0, [pc, #28]	; (20a4 <tiltFilterTick+0x24>)
    2086:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    208a:	f002 fef9 	bl	4e80 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&shelf2[v], sample);
    208e:	4806      	ldr	r0, [pc, #24]	; (20a8 <tiltFilterTick+0x28>)
    2090:	00a4      	lsls	r4, r4, #2
    2092:	4420      	add	r0, r4
    2094:	f002 fef4 	bl	4e80 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&bell1[v], sample);
    2098:	4804      	ldr	r0, [pc, #16]	; (20ac <tiltFilterTick+0x2c>)
    209a:	4420      	add	r0, r4
}
    209c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilter_tickEfficient(&bell1[v], sample);
    20a0:	f002 beee 	b.w	4e80 <__tVZFilter_tickEfficient_veneer>
    20a4:	2000079c 	.word	0x2000079c
    20a8:	200007ac 	.word	0x200007ac
    20ac:	20000198 	.word	0x20000198
    20b0:	f3af 8000 	nop.w
    20b4:	f3af 8000 	nop.w
    20b8:	f3af 8000 	nop.w
    20bc:	f3af 8000 	nop.w

000020c0 <tanhTick>:
    float temp = tanhf(sample + (param2[v]*gain));
    20c0:	4a10      	ldr	r2, [pc, #64]	; (2104 <tanhTick+0x44>)
    20c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    float gain = param1[v];
    20c6:	4b10      	ldr	r3, [pc, #64]	; (2108 <tanhTick+0x48>)
    float temp = tanhf(sample + (param2[v]*gain));
    20c8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float gain = param1[v];
    20cc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    20d0:	ed92 7a00 	vldr	s14, [r2]
    20d4:	eea7 0a27 	vfma.f32	s0, s14, s15
    float temp = tanhf(sample + (param2[v]*gain));
    20d8:	edd3 7a00 	vldr	s15, [r3]
{
    20dc:	b510      	push	{r4, lr}
    float temp = tanhf(sample + (param2[v]*gain));
    20de:	0084      	lsls	r4, r0, #2
    20e0:	ee20 0a27 	vmul.f32	s0, s0, s15
    20e4:	f002 ff40 	bl	4f68 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v], temp);
    20e8:	4808      	ldr	r0, [pc, #32]	; (210c <tanhTick+0x4c>)
    20ea:	4420      	add	r0, r4
    20ec:	f002 ff2c 	bl	4f48 <__tHighpass_tick_veneer>
    temp *= param4[v];
    20f0:	4b07      	ldr	r3, [pc, #28]	; (2110 <tanhTick+0x50>)
    20f2:	4423      	add	r3, r4
    20f4:	edd3 7a00 	vldr	s15, [r3]
}
    20f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    20fc:	ee20 0a27 	vmul.f32	s0, s0, s15
    2100:	f002 bf32 	b.w	4f68 <__tanhf_veneer>
    2104:	200006fc 	.word	0x200006fc
    2108:	200006ec 	.word	0x200006ec
    210c:	200001bc 	.word	0x200001bc
    2110:	2000071c 	.word	0x2000071c
    2114:	f3af 8000 	nop.w
    2118:	f3af 8000 	nop.w
    211c:	f3af 8000 	nop.w

00002120 <softClipTick>:
    sample = sample * param1[v];
    2120:	4918      	ldr	r1, [pc, #96]	; (2184 <softClipTick+0x64>)
    2122:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    sample = sample + param2[v];
    2126:	4a18      	ldr	r2, [pc, #96]	; (2188 <softClipTick+0x68>)
    2128:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    sample = sample * param1[v];
    212c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    float shape = param3[v];
    2130:	4b16      	ldr	r3, [pc, #88]	; (218c <softClipTick+0x6c>)
    sample = sample + param2[v];
    2132:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2136:	ed9f 7a16 	vldr	s14, [pc, #88]	; 2190 <softClipTick+0x70>
    213a:	ed91 5a00 	vldr	s10, [r1]
    float shape = param3[v];
    213e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    sample = sample + param2[v];
    2142:	edd2 7a00 	vldr	s15, [r2]
    float shape = param3[v];
    2146:	edd3 6a00 	vldr	s13, [r3]
    sample = sample + param2[v];
    214a:	eee5 7a00 	vfma.f32	s15, s10, s0
        sample = sample * shapeDividerS[v];
    214e:	4b11      	ldr	r3, [pc, #68]	; (2194 <softClipTick+0x74>)
    2150:	ee26 7a87 	vmul.f32	s14, s13, s14
    sample = tHighpass_tick(&dcBlock1[v], sample);
    2154:	4a10      	ldr	r2, [pc, #64]	; (2198 <softClipTick+0x78>)
        sample = sample * shapeDividerS[v];
    2156:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    sample = tHighpass_tick(&dcBlock1[v], sample);
    215a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
        sample = sample * shapeDividerS[v];
    215e:	ed93 0a00 	vldr	s0, [r3]
    2162:	fec7 7ae5 	vminnm.f32	s15, s15, s11
    2166:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
    216a:	ee27 7a27 	vmul.f32	s14, s14, s15
    216e:	ee27 7a27 	vmul.f32	s14, s14, s15
    2172:	ee36 7ac7 	vsub.f32	s14, s13, s14
    2176:	ee67 7a87 	vmul.f32	s15, s15, s14
    sample = tHighpass_tick(&dcBlock1[v], sample);
    217a:	ee27 0a80 	vmul.f32	s0, s15, s0
    217e:	f002 bee3 	b.w	4f48 <__tHighpass_tick_veneer>
    2182:	bf00      	nop
    2184:	200006ec 	.word	0x200006ec
    2188:	200006fc 	.word	0x200006fc
    218c:	2000070c 	.word	0x2000070c
    2190:	3eaaaaaa 	.word	0x3eaaaaaa
    2194:	20000780 	.word	0x20000780
    2198:	200001bc 	.word	0x200001bc
    219c:	f3af 8000 	nop.w

000021a0 <hardClipTick>:
    sample = sample * param1[v];
    21a0:	4a1a      	ldr	r2, [pc, #104]	; (220c <hardClipTick+0x6c>)
    21a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample + param2[v];
    21a6:	4b1a      	ldr	r3, [pc, #104]	; (2210 <hardClipTick+0x70>)
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v]) * shapeDividerH[v]) * param3[v]);
    21a8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    sample = sample * param1[v];
    21ac:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    sample = sample + param2[v];
    21b0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    21b4:	ed92 6a00 	vldr	s12, [r2]
    21b8:	edd3 7a00 	vldr	s15, [r3]
{
    21bc:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v];
    21be:	eee6 7a00 	vfma.f32	s15, s12, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v]) * shapeDividerH[v]) * param3[v]);
    21c2:	4e14      	ldr	r6, [pc, #80]	; (2214 <hardClipTick+0x74>)
    sample = sample * param1[v];
    21c4:	0084      	lsls	r4, r0, #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v]) * shapeDividerH[v]) * param3[v]);
    21c6:	4d14      	ldr	r5, [pc, #80]	; (2218 <hardClipTick+0x78>)
    21c8:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    21cc:	4425      	add	r5, r4
    21ce:	ed96 0a00 	vldr	s0, [r6]
    21d2:	fec7 7ae6 	vminnm.f32	s15, s15, s13
    21d6:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
    21da:	ee27 0a80 	vmul.f32	s0, s15, s0
    21de:	f002 fe07 	bl	4df0 <__arm_sin_f32_veneer>
    21e2:	ed96 7a00 	vldr	s14, [r6]
    21e6:	edd5 7a00 	vldr	s15, [r5]
    21ea:	ee67 7a87 	vmul.f32	s15, s15, s14
    21ee:	ee27 0a80 	vmul.f32	s0, s15, s0
    21f2:	f002 fdfd 	bl	4df0 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v];
    21f6:	edd5 7a00 	vldr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v], sample);
    21fa:	4808      	ldr	r0, [pc, #32]	; (221c <hardClipTick+0x7c>)
    21fc:	ee20 0a27 	vmul.f32	s0, s0, s15
    2200:	4420      	add	r0, r4
}
    2202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v], sample);
    2206:	f002 be9f 	b.w	4f48 <__tHighpass_tick_veneer>
    220a:	bf00      	nop
    220c:	200006ec 	.word	0x200006ec
    2210:	200006fc 	.word	0x200006fc
    2214:	2000070c 	.word	0x2000070c
    2218:	20000770 	.word	0x20000770
    221c:	200001bc 	.word	0x200001bc

00002220 <satTick>:
    float temp = (sample + (param2[v] * param1[v])) / (1.0f + fabs(sample + param2[v]));
    2220:	4b17      	ldr	r3, [pc, #92]	; (2280 <satTick+0x60>)
    2222:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    sample = sample * param1[v];
    2226:	4a17      	ldr	r2, [pc, #92]	; (2284 <satTick+0x64>)
    float temp = (sample + (param2[v] * param1[v])) / (1.0f + fabs(sample + param2[v]));
    2228:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    sample = sample * param1[v];
    222c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float temp = (sample + (param2[v] * param1[v])) / (1.0f + fabs(sample + param2[v]));
    2230:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v];
    2234:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v] * param1[v])) / (1.0f + fabs(sample + param2[v]));
    2238:	eeb0 6a47 	vmov.f32	s12, s14
    temp = tHighpass_tick(&dcBlock1[v], temp);
    223c:	4a12      	ldr	r2, [pc, #72]	; (2288 <satTick+0x68>)
    float temp = (sample + (param2[v] * param1[v])) / (1.0f + fabs(sample + param2[v]));
    223e:	ee27 7a87 	vmul.f32	s14, s15, s14
    2242:	eea7 6a80 	vfma.f32	s12, s15, s0
    2246:	eea7 7a80 	vfma.f32	s14, s15, s0
{;
    224a:	b510      	push	{r4, lr}
    sample = sample * param1[v];
    224c:	0084      	lsls	r4, r0, #2
    float temp = (sample + (param2[v] * param1[v])) / (1.0f + fabs(sample + param2[v]));
    224e:	eeb0 6ac6 	vabs.f32	s12, s12
    temp = tHighpass_tick(&dcBlock1[v], temp);
    2252:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    float temp = (sample + (param2[v] * param1[v])) / (1.0f + fabs(sample + param2[v]));
    2256:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    225a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    225e:	ee36 6b05 	vadd.f64	d6, d6, d5
    2262:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v], temp);
    2266:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    226a:	f002 fe6d 	bl	4f48 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v], temp);
    226e:	4807      	ldr	r0, [pc, #28]	; (228c <satTick+0x6c>)
    2270:	4420      	add	r0, r4
    2272:	f002 fe69 	bl	4f48 <__tHighpass_tick_veneer>
}
    2276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    227a:	f002 be75 	b.w	4f68 <__tanhf_veneer>
    227e:	bf00      	nop
    2280:	200006fc 	.word	0x200006fc
    2284:	200006ec 	.word	0x200006ec
    2288:	200001bc 	.word	0x200001bc
    228c:	200001cc 	.word	0x200001cc
    2290:	f3af 8000 	nop.w
    2294:	f3af 8000 	nop.w
    2298:	f3af 8000 	nop.w
    229c:	f3af 8000 	nop.w

000022a0 <bcTick>:
    sample = sample * param1[v];
    22a0:	4b05      	ldr	r3, [pc, #20]	; (22b8 <bcTick+0x18>)
    return tCrusher_tick(&bc[v], sample);
    22a2:	4a06      	ldr	r2, [pc, #24]	; (22bc <bcTick+0x1c>)
    sample = sample * param1[v];
    22a4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    return tCrusher_tick(&bc[v], sample);
    22a8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    sample = sample * param1[v];
    22ac:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v], sample);
    22b0:	ee20 0a27 	vmul.f32	s0, s0, s15
    22b4:	f002 be1c 	b.w	4ef0 <__tCrusher_tick_veneer>
    22b8:	200006ec 	.word	0x200006ec
    22bc:	20000188 	.word	0x20000188

000022c0 <compressorTick>:
    return tCompressor_tick(&comp[v], sample);
    22c0:	4b02      	ldr	r3, [pc, #8]	; (22cc <compressorTick+0xc>)
    22c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    22c6:	f002 be33 	b.w	4f30 <__tCompressor_tick_veneer>
    22ca:	bf00      	nop
    22cc:	200001ac 	.word	0x200001ac
    22d0:	f3af 8000 	nop.w
    22d4:	f3af 8000 	nop.w
    22d8:	f3af 8000 	nop.w
    22dc:	f3af 8000 	nop.w

000022e0 <FXlowpassTick>:
	return tSVF_tick(&FXlowpass[v], sample);
    22e0:	4b02      	ldr	r3, [pc, #8]	; (22ec <FXlowpassTick+0xc>)
    22e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    22e6:	f002 bd9f 	b.w	4e28 <__tSVF_tick_veneer>
    22ea:	bf00      	nop
    22ec:	20000144 	.word	0x20000144
    22f0:	f3af 8000 	nop.w
    22f4:	f3af 8000 	nop.w
    22f8:	f3af 8000 	nop.w
    22fc:	f3af 8000 	nop.w

00002300 <FXhighpassTick>:
	return tSVF_tick(&FXhighpass[v], sample);
    2300:	4b02      	ldr	r3, [pc, #8]	; (230c <FXhighpassTick+0xc>)
    2302:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2306:	f002 bd8f 	b.w	4e28 <__tSVF_tick_veneer>
    230a:	bf00      	nop
    230c:	20000134 	.word	0x20000134
    2310:	f3af 8000 	nop.w
    2314:	f3af 8000 	nop.w
    2318:	f3af 8000 	nop.w
    231c:	f3af 8000 	nop.w

00002320 <FXbandpassTick>:
	return tSVF_tick(&FXbandpass[v], sample);
    2320:	4b02      	ldr	r3, [pc, #8]	; (232c <FXbandpassTick+0xc>)
    2322:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2326:	f002 bd7f 	b.w	4e28 <__tSVF_tick_veneer>
    232a:	bf00      	nop
    232c:	20000114 	.word	0x20000114
    2330:	f3af 8000 	nop.w
    2334:	f3af 8000 	nop.w
    2338:	f3af 8000 	nop.w
    233c:	f3af 8000 	nop.w

00002340 <FXdiodeLowpassTick>:
	return tDiodeFilter_tick(&FXdiodeFilters[v], sample);
    2340:	4b02      	ldr	r3, [pc, #8]	; (234c <FXdiodeLowpassTick+0xc>)
    2342:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2346:	f002 bd8b 	b.w	4e60 <__tDiodeFilter_tick_veneer>
    234a:	bf00      	nop
    234c:	20000124 	.word	0x20000124
    2350:	f3af 8000 	nop.w
    2354:	f3af 8000 	nop.w
    2358:	f3af 8000 	nop.w
    235c:	f3af 8000 	nop.w

00002360 <FXVZpeakTick>:
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v], sample);
    2360:	4b02      	ldr	r3, [pc, #8]	; (236c <FXVZpeakTick+0xc>)
    2362:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2366:	f002 bd8b 	b.w	4e80 <__tVZFilter_tickEfficient_veneer>
    236a:	bf00      	nop
    236c:	20000104 	.word	0x20000104
    2370:	f3af 8000 	nop.w
    2374:	f3af 8000 	nop.w
    2378:	f3af 8000 	nop.w
    237c:	f3af 8000 	nop.w

00002380 <FXVZlowshelfTick>:
	return tVZFilter_tickEfficient(&FXVZfilterLS[v], sample);
    2380:	4b02      	ldr	r3, [pc, #8]	; (238c <FXVZlowshelfTick+0xc>)
    2382:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2386:	f002 bd7b 	b.w	4e80 <__tVZFilter_tickEfficient_veneer>
    238a:	bf00      	nop
    238c:	200000f4 	.word	0x200000f4
    2390:	f3af 8000 	nop.w
    2394:	f3af 8000 	nop.w
    2398:	f3af 8000 	nop.w
    239c:	f3af 8000 	nop.w

000023a0 <FXVZhighshelfTick>:
	return tVZFilter_tickEfficient(&FXVZfilterHS[v], sample);
    23a0:	4b02      	ldr	r3, [pc, #8]	; (23ac <FXVZhighshelfTick+0xc>)
    23a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    23a6:	f002 bd6b 	b.w	4e80 <__tVZFilter_tickEfficient_veneer>
    23aa:	bf00      	nop
    23ac:	200000e4 	.word	0x200000e4
    23b0:	f3af 8000 	nop.w
    23b4:	f3af 8000 	nop.w
    23b8:	f3af 8000 	nop.w
    23bc:	f3af 8000 	nop.w

000023c0 <FXVZbandrejectTick>:
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v], sample);
    23c0:	4b02      	ldr	r3, [pc, #8]	; (23cc <FXVZbandrejectTick+0xc>)
    23c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    23c6:	f002 bd5b 	b.w	4e80 <__tVZFilter_tickEfficient_veneer>
    23ca:	bf00      	nop
    23cc:	200000d4 	.word	0x200000d4
    23d0:	f3af 8000 	nop.w
    23d4:	f3af 8000 	nop.w
    23d8:	f3af 8000 	nop.w
    23dc:	f3af 8000 	nop.w

000023e0 <FXLadderLowpassTick>:
	return tLadderFilter_tick(&FXLadderfilter[v], sample);
    23e0:	4b02      	ldr	r3, [pc, #8]	; (23ec <FXLadderLowpassTick+0xc>)
    23e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    23e6:	f002 bddb 	b.w	4fa0 <__tLadderFilter_tick_veneer>
    23ea:	bf00      	nop
    23ec:	200000c4 	.word	0x200000c4
    23f0:	f3af 8000 	nop.w
    23f4:	f3af 8000 	nop.w
    23f8:	f3af 8000 	nop.w
    23fc:	f3af 8000 	nop.w

00002400 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v)
{
    2400:	b508      	push	{r3, lr}
	tVZFilter_setGain(&noiseShelf1, fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    2402:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
{
    2406:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&noiseShelf1, fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    240a:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    240e:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&noiseShelf1, fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    2412:	eee0 7a68 	vfms.f32	s15, s0, s17
    2416:	eeb0 0a67 	vmov.f32	s0, s15
    241a:	f002 fcfd 	bl	4e18 <__fastdbtoa_veneer>
    241e:	4808      	ldr	r0, [pc, #32]	; (2440 <noiseSetTilt+0x40>)
    2420:	f002 fdce 	bl	4fc0 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&noiseShelf2, fastdbtoa((value * 30.0f) - 15.0f));
    2424:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    2428:	eea8 0a28 	vfma.f32	s0, s16, s17
    242c:	f002 fcf4 	bl	4e18 <__fastdbtoa_veneer>
    2430:	4804      	ldr	r0, [pc, #16]	; (2444 <noiseSetTilt+0x44>)
}
    2432:	ecbd 8b02 	vpop	{d8}
    2436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tVZFilter_setGain(&noiseShelf2, fastdbtoa((value * 30.0f) - 15.0f));
    243a:	f002 bdc1 	b.w	4fc0 <__tVZFilter_setGain_veneer>
    243e:	bf00      	nop
    2440:	200006cc 	.word	0x200006cc
    2444:	200006d0 	.word	0x200006d0
    2448:	f3af 8000 	nop.w
    244c:	f3af 8000 	nop.w
    2450:	f3af 8000 	nop.w
    2454:	f3af 8000 	nop.w
    2458:	f3af 8000 	nop.w
    245c:	f3af 8000 	nop.w

00002460 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v)
{
	tVZFilter_setGain(&noiseBell1, fastdbtoa((value* 34.0f) - 17.0f));
    2460:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    2464:	ed9f 7a06 	vldr	s14, [pc, #24]	; 2480 <noiseSetGain+0x20>
{
    2468:	b508      	push	{r3, lr}
	tVZFilter_setGain(&noiseBell1, fastdbtoa((value* 34.0f) - 17.0f));
    246a:	eee0 7a07 	vfma.f32	s15, s0, s14
    246e:	eeb0 0a67 	vmov.f32	s0, s15
    2472:	f002 fcd1 	bl	4e18 <__fastdbtoa_veneer>
    2476:	4803      	ldr	r0, [pc, #12]	; (2484 <noiseSetGain+0x24>)
}
    2478:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tVZFilter_setGain(&noiseBell1, fastdbtoa((value* 34.0f) - 17.0f));
    247c:	f002 bda0 	b.w	4fc0 <__tVZFilter_setGain_veneer>
    2480:	42080000 	.word	0x42080000
    2484:	200006c0 	.word	0x200006c0
    2488:	f3af 8000 	nop.w
    248c:	f3af 8000 	nop.w
    2490:	f3af 8000 	nop.w
    2494:	f3af 8000 	nop.w
    2498:	f3af 8000 	nop.w
    249c:	f3af 8000 	nop.w

000024a0 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
    24a0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24b8 <noiseSetFreq+0x18>
    24a4:	eddf 7a05 	vldr	s15, [pc, #20]	; 24bc <noiseSetFreq+0x1c>
	//value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
	tVZFilter_setFreq(&noiseBell1, value);
    24a8:	4805      	ldr	r0, [pc, #20]	; (24c0 <noiseSetFreq+0x20>)
    24aa:	eee0 7a07 	vfma.f32	s15, s0, s14
    24ae:	eeb0 0a67 	vmov.f32	s0, s15
    24b2:	f002 bd71 	b.w	4f98 <__tVZFilter_setFreq_veneer>
    24b6:	bf00      	nop
    24b8:	429a0000 	.word	0x429a0000
    24bc:	42280000 	.word	0x42280000
    24c0:	200006c0 	.word	0x200006c0
    24c4:	f3af 8000 	nop.w
    24c8:	f3af 8000 	nop.w
    24cc:	f3af 8000 	nop.w
    24d0:	f3af 8000 	nop.w
    24d4:	f3af 8000 	nop.w
    24d8:	f3af 8000 	nop.w
    24dc:	f3af 8000 	nop.w

000024e0 <noise_tick>:
	float amp = params[NoiseAmp].realVal;
	float filterSend = params[NoiseFilterSend].realVal;
	amp = amp < 0.f ? 0.f : amp;

	uint32_t tempCount9 = DWT->CYCCNT;
	float sample = random_values[randomValPointer++];
    24e0:	4924      	ldr	r1, [pc, #144]	; (2574 <noise_tick+0x94>)
	float enabled = params[Noise].realVal;
    24e2:	4a25      	ldr	r2, [pc, #148]	; (2578 <noise_tick+0x98>)
{
    24e4:	b570      	push	{r4, r5, r6, lr}
    24e6:	ed2d 8b04 	vpush	{d8-d9}
	float sample = random_values[randomValPointer++];
    24ea:	7808      	ldrb	r0, [r1, #0]
	uint32_t tempCount7 = DWT->CYCCNT;
    24ec:	4c23      	ldr	r4, [pc, #140]	; (257c <noise_tick+0x9c>)
	float sample = random_values[randomValPointer++];
    24ee:	1c43      	adds	r3, r0, #1
	float enabled = params[Noise].realVal;
    24f0:	ed92 9a5b 	vldr	s18, [r2, #364]	; 0x16c
	uint32_t tempCount7 = DWT->CYCCNT;
    24f4:	6865      	ldr	r5, [r4, #4]
	uint32_t tempCount9 = DWT->CYCCNT;
    24f6:	6866      	ldr	r6, [r4, #4]
	float sample = random_values[randomValPointer++];
    24f8:	700b      	strb	r3, [r1, #0]
    24fa:	4921      	ldr	r1, [pc, #132]	; (2580 <noise_tick+0xa0>)
	float filterSend = params[NoiseFilterSend].realVal;
    24fc:	ed92 8a74 	vldr	s16, [r2, #464]	; 0x1d0
	float amp = params[NoiseAmp].realVal;
    2500:	edd2 8a6f 	vldr	s17, [r2, #444]	; 0x1bc
	float sample = random_values[randomValPointer++];
    2504:	eb01 0180 	add.w	r1, r1, r0, lsl #2
	uint32_t tempCount10 = DWT->CYCCNT;
    2508:	6862      	ldr	r2, [r4, #4]
	timeRandom = tempCount10-tempCount9;
    250a:	4b1e      	ldr	r3, [pc, #120]	; (2584 <noise_tick+0xa4>)
    250c:	1b92      	subs	r2, r2, r6

	sample = tVZFilter_tickEfficient(&noiseShelf1, sample);
    250e:	ed91 0a00 	vldr	s0, [r1]
    2512:	481d      	ldr	r0, [pc, #116]	; (2588 <noise_tick+0xa8>)
	timeRandom = tempCount10-tempCount9;
    2514:	601a      	str	r2, [r3, #0]
	sample = tVZFilter_tickEfficient(&noiseShelf1, sample);
    2516:	f002 fcb3 	bl	4e80 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseShelf2, sample);
    251a:	481c      	ldr	r0, [pc, #112]	; (258c <noise_tick+0xac>)
    251c:	f002 fcb0 	bl	4e80 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseBell1, sample);
    2520:	481b      	ldr	r0, [pc, #108]	; (2590 <noise_tick+0xb0>)
    2522:	f002 fcad 	bl	4e80 <__tVZFilter_tickEfficient_veneer>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
    2526:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    252a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 2594 <noise_tick+0xb4>
	sourceValues[NOISE_SOURCE_OFFSET] = normSample;
	noiseOuts[0] = sample * filterSend *  enabled;
    252e:	ee29 7a08 	vmul.f32	s14, s18, s16
	noiseOuts[1] = sample * (1.f-filterSend) * enabled ;
	uint32_t tempCount8 = DWT->CYCCNT;
    2532:	6863      	ldr	r3, [r4, #4]
	amp = amp < 0.f ? 0.f : amp;
    2534:	fec8 8aa6 	vmaxnm.f32	s17, s17, s13
	noiseOuts[1] = sample * (1.f-filterSend) * enabled ;
    2538:	ee37 8ac8 	vsub.f32	s16, s15, s16
	sample = sample * amp;
    253c:	ee28 0a80 	vmul.f32	s0, s17, s0
	noiseOuts[0] = sample * filterSend *  enabled;
    2540:	4a15      	ldr	r2, [pc, #84]	; (2598 <noise_tick+0xb8>)
	float normSample = (sample + 1.f) * 0.5f;
    2542:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	sourceValues[NOISE_SOURCE_OFFSET] = normSample;
    2546:	4815      	ldr	r0, [pc, #84]	; (259c <noise_tick+0xbc>)
	noiseOuts[1] = sample * (1.f-filterSend) * enabled ;
    2548:	ee28 8a09 	vmul.f32	s16, s16, s18
	timeNoise = tempCount8-tempCount7;
    254c:	4914      	ldr	r1, [pc, #80]	; (25a0 <noise_tick+0xc0>)
	float normSample = (sample + 1.f) * 0.5f;
    254e:	ee70 7a27 	vadd.f32	s15, s0, s15
	timeNoise = tempCount8-tempCount7;
    2552:	1b5b      	subs	r3, r3, r5
	noiseOuts[0] = sample * filterSend *  enabled;
    2554:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1] = sample * (1.f-filterSend) * enabled ;
    2558:	ee28 0a00 	vmul.f32	s0, s16, s0
	timeNoise = tempCount8-tempCount7;
    255c:	600b      	str	r3, [r1, #0]
	float normSample = (sample + 1.f) * 0.5f;
    255e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0] = sample * filterSend *  enabled;
    2562:	ed82 7a00 	vstr	s14, [r2]
	noiseOuts[1] = sample * (1.f-filterSend) * enabled ;
    2566:	ed82 0a01 	vstr	s0, [r2, #4]
	sourceValues[NOISE_SOURCE_OFFSET] = normSample;
    256a:	edc0 7a03 	vstr	s15, [r0, #12]
}
    256e:	ecbd 8b04 	vpop	{d8-d9}
    2572:	bd70      	pop	{r4, r5, r6, pc}
    2574:	20000754 	.word	0x20000754
    2578:	2000eac0 	.word	0x2000eac0
    257c:	e0001000 	.word	0xe0001000
    2580:	20012480 	.word	0x20012480
    2584:	2000911c 	.word	0x2000911c
    2588:	200006cc 	.word	0x200006cc
    258c:	200006d0 	.word	0x200006d0
    2590:	200006c0 	.word	0x200006c0
    2594:	00000000 	.word	0x00000000
    2598:	200006c4 	.word	0x200006c4
    259c:	2000908c 	.word	0x2000908c
    25a0:	20009114 	.word	0x20009114
	...

000025c0 <scaleOscPitch>:
	return (input * 48.0f) - 24.0f;
    25c0:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    25c4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 25d4 <scaleOscPitch+0x14>
}
    25c8:	eee0 7a07 	vfma.f32	s15, s0, s14
    25cc:	eeb0 0a67 	vmov.f32	s0, s15
    25d0:	4770      	bx	lr
    25d2:	bf00      	nop
    25d4:	42400000 	.word	0x42400000
    25d8:	f3af 8000 	nop.w
    25dc:	f3af 8000 	nop.w

000025e0 <scaleOscHarmonics>:
	return (input * 34.0f) - 17.0f; // fix this when adjusting the plugin - should be 32 and +/-16 but that's not what the plugin sends right now
    25e0:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    25e4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 25f4 <scaleOscHarmonics+0x14>
}
    25e8:	eee0 7a07 	vfma.f32	s15, s0, s14
    25ec:	eeb0 0a67 	vmov.f32	s0, s15
    25f0:	4770      	bx	lr
    25f2:	bf00      	nop
    25f4:	42080000 	.word	0x42080000
    25f8:	f3af 8000 	nop.w
    25fc:	f3af 8000 	nop.w

00002600 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    2600:	ed9f 7a04 	vldr	s14, [pc, #16]	; 2614 <scaleOscFine+0x14>
    2604:	eddf 7a04 	vldr	s15, [pc, #16]	; 2618 <scaleOscFine+0x18>
}
    2608:	eee0 7a07 	vfma.f32	s15, s0, s14
    260c:	eeb0 0a67 	vmov.f32	s0, s15
    2610:	4770      	bx	lr
    2612:	bf00      	nop
    2614:	43480000 	.word	0x43480000
    2618:	c2c80000 	.word	0xc2c80000
    261c:	f3af 8000 	nop.w

00002620 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    2620:	ed9f 7a04 	vldr	s14, [pc, #16]	; 2634 <scaleOscFreq+0x14>
    2624:	eddf 7a04 	vldr	s15, [pc, #16]	; 2638 <scaleOscFreq+0x18>
}
    2628:	eee0 7a07 	vfma.f32	s15, s0, s14
    262c:	eeb0 0a67 	vmov.f32	s0, s15
    2630:	4770      	bx	lr
    2632:	bf00      	nop
    2634:	457a0000 	.word	0x457a0000
    2638:	c4fa0000 	.word	0xc4fa0000
    263c:	f3af 8000 	nop.w

00002640 <scaleFilterCutoff>:
	return (input * 127.0f);
    2640:	eddf 7a02 	vldr	s15, [pc, #8]	; 264c <scaleFilterCutoff+0xc>
}
    2644:	ee20 0a27 	vmul.f32	s0, s0, s15
    2648:	4770      	bx	lr
    264a:	bf00      	nop
    264c:	42fe0000 	.word	0x42fe0000
    2650:	f3af 8000 	nop.w
    2654:	f3af 8000 	nop.w
    2658:	f3af 8000 	nop.w
    265c:	f3af 8000 	nop.w

00002660 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    2660:	ed9f 7a04 	vldr	s14, [pc, #16]	; 2674 <scaleFinalLowpass+0x14>
    2664:	eddf 7a04 	vldr	s15, [pc, #16]	; 2678 <scaleFinalLowpass+0x18>
}
    2668:	eee0 7a07 	vfma.f32	s15, s0, s14
    266c:	eeb0 0a67 	vmov.f32	s0, s15
    2670:	4770      	bx	lr
    2672:	bf00      	nop
    2674:	428c0000 	.word	0x428c0000
    2678:	42680000 	.word	0x42680000
    267c:	f3af 8000 	nop.w

00002680 <scaleDefault>:
{
    2680:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    2684:	ed9f 0a02 	vldr	s0, [pc, #8]	; 2690 <scaleDefault+0x10>
    2688:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    268c:	f001 bc18 	b.w	3ec0 <LEAF_clip>
    2690:	00000000 	.word	0x00000000
    2694:	f3af 8000 	nop.w
    2698:	f3af 8000 	nop.w
    269c:	f3af 8000 	nop.w

000026a0 <scaleTranspose>:
{
    26a0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    26a4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 26c4 <scaleTranspose+0x24>
    26a8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    26ac:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    26ae:	f001 fc07 	bl	3ec0 <LEAF_clip>
	return (input * 96.0f) - 48.0f;
    26b2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 26c8 <scaleTranspose+0x28>
    26b6:	eddf 7a05 	vldr	s15, [pc, #20]	; 26cc <scaleTranspose+0x2c>
}
    26ba:	eee0 7a07 	vfma.f32	s15, s0, s14
    26be:	eeb0 0a67 	vmov.f32	s0, s15
    26c2:	bd08      	pop	{r3, pc}
    26c4:	00000000 	.word	0x00000000
    26c8:	42c00000 	.word	0x42c00000
    26cc:	c2400000 	.word	0xc2400000
    26d0:	f3af 8000 	nop.w
    26d4:	f3af 8000 	nop.w
    26d8:	f3af 8000 	nop.w
    26dc:	f3af 8000 	nop.w

000026e0 <scalePitchBend>:
{
    26e0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    26e4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 26fc <scalePitchBend+0x1c>
    26e8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    26ec:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    26ee:	f001 fbe7 	bl	3ec0 <LEAF_clip>
	return (input * 48.0f);
    26f2:	eddf 7a03 	vldr	s15, [pc, #12]	; 2700 <scalePitchBend+0x20>
}
    26f6:	ee20 0a27 	vmul.f32	s0, s0, s15
    26fa:	bd08      	pop	{r3, pc}
    26fc:	00000000 	.word	0x00000000
    2700:	42400000 	.word	0x42400000
    2704:	f3af 8000 	nop.w
    2708:	f3af 8000 	nop.w
    270c:	f3af 8000 	nop.w
    2710:	f3af 8000 	nop.w
    2714:	f3af 8000 	nop.w
    2718:	f3af 8000 	nop.w
    271c:	f3af 8000 	nop.w

00002720 <scaleFilterResonance>:
{
    2720:	b510      	push	{r4, lr}
    2722:	ed2d 8b04 	vpush	{d8-d9}
	input = LEAF_clip(0.1f, input, 1.0f);
    2726:	ed9f 9a21 	vldr	s18, [pc, #132]	; 27ac <scaleFilterResonance+0x8c>
{
    272a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.1f, input, 1.0f);
    272e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    2732:	eeb0 0a49 	vmov.f32	s0, s18
    2736:	f001 fbc3 	bl	3ec0 <LEAF_clip>
    273a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    273e:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 27b0 <scaleFilterResonance+0x90>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2742:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 27b4 <scaleFilterResonance+0x94>
	input *= 2047.0f;
    2746:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    274a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    274e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    2752:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2756:	1c63      	adds	r3, r4, #1
    2758:	ee00 3a90 	vmov	s1, r3
    275c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    2760:	f001 fbae 	bl	3ec0 <LEAF_clip>
    2764:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    2768:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    276c:	4b12      	ldr	r3, [pc, #72]	; (27b8 <scaleFilterResonance+0x98>)
	float inputFloat = (float)inputInt - input;
    276e:	ee78 0ac8 	vsub.f32	s1, s17, s16
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2772:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    2776:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    277a:	ee38 8a27 	vadd.f32	s16, s16, s15
    277e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2782:	edd4 7a00 	vldr	s15, [r4]
    2786:	eeb0 0a49 	vmov.f32	s0, s18
    278a:	ed93 7a00 	vldr	s14, [r3]
    278e:	ee38 8a68 	vsub.f32	s16, s16, s17
    2792:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    2796:	ee60 0a87 	vmul.f32	s1, s1, s14
    279a:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    279e:	ecbd 8b04 	vpop	{d8-d9}
    27a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    27a6:	f001 bb8b 	b.w	3ec0 <LEAF_clip>
    27aa:	bf00      	nop
    27ac:	3dcccccd 	.word	0x3dcccccd
    27b0:	44ffe000 	.word	0x44ffe000
    27b4:	00000000 	.word	0x00000000
    27b8:	2000f814 	.word	0x2000f814
    27bc:	f3af 8000 	nop.w

000027c0 <scaleEnvTimes>:
{
    27c0:	b510      	push	{r4, lr}
    27c2:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
    27c6:	eddf 8a1d 	vldr	s17, [pc, #116]	; 283c <scaleEnvTimes+0x7c>
{
    27ca:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    27ce:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    27d2:	eeb0 0a68 	vmov.f32	s0, s17
    27d6:	f001 fb73 	bl	3ec0 <LEAF_clip>
    27da:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    27de:	ed9f 1a18 	vldr	s2, [pc, #96]	; 2840 <scaleEnvTimes+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    27e2:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
    27e6:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    27ea:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    27ee:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    27f2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    27f6:	1c63      	adds	r3, r4, #1
    27f8:	ee00 3a90 	vmov	s1, r3
    27fc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    2800:	f001 fb5e 	bl	3ec0 <LEAF_clip>
    2804:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    2808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    280c:	4b0d      	ldr	r3, [pc, #52]	; (2844 <scaleEnvTimes+0x84>)
	float inputFloat = (float)inputInt - input;
    280e:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    2812:	ee10 2a10 	vmov	r2, s0
    2816:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    281a:	ee38 8a07 	vadd.f32	s16, s16, s14
    281e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2822:	ed94 7a00 	vldr	s14, [r4]
    2826:	ed93 0a00 	vldr	s0, [r3]
    282a:	ee38 8a68 	vsub.f32	s16, s16, s17
    282e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    2832:	eea7 0a08 	vfma.f32	s0, s14, s16
    2836:	ecbd 8b02 	vpop	{d8}
    283a:	bd10      	pop	{r4, pc}
    283c:	00000000 	.word	0x00000000
    2840:	44ffe000 	.word	0x44ffe000
    2844:	2000a2d0 	.word	0x2000a2d0
    2848:	f3af 8000 	nop.w
    284c:	f3af 8000 	nop.w
    2850:	f3af 8000 	nop.w
    2854:	f3af 8000 	nop.w
    2858:	f3af 8000 	nop.w
    285c:	f3af 8000 	nop.w

00002860 <scaleLFORates>:
{
    2860:	b510      	push	{r4, lr}
    2862:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
    2866:	eddf 8a1d 	vldr	s17, [pc, #116]	; 28dc <scaleLFORates+0x7c>
{
    286a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    286e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    2872:	eeb0 0a68 	vmov.f32	s0, s17
    2876:	f001 fb23 	bl	3ec0 <LEAF_clip>
    287a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    287e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 28e0 <scaleLFORates+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2882:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
    2886:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    288a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    288e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    2892:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2896:	1c63      	adds	r3, r4, #1
    2898:	ee00 3a90 	vmov	s1, r3
    289c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    28a0:	f001 fb0e 	bl	3ec0 <LEAF_clip>
    28a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    28a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    28ac:	4b0d      	ldr	r3, [pc, #52]	; (28e4 <scaleLFORates+0x84>)
	float inputFloat = (float)inputInt - input;
    28ae:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    28b2:	ee10 2a10 	vmov	r2, s0
    28b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    28ba:	ee38 8a07 	vadd.f32	s16, s16, s14
    28be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    28c2:	ed94 7a00 	vldr	s14, [r4]
    28c6:	ed93 0a00 	vldr	s0, [r3]
    28ca:	ee38 8a68 	vsub.f32	s16, s16, s17
    28ce:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    28d2:	eea7 0a08 	vfma.f32	s0, s14, s16
    28d6:	ecbd 8b02 	vpop	{d8}
    28da:	bd10      	pop	{r4, pc}
    28dc:	00000000 	.word	0x00000000
    28e0:	44ffe000 	.word	0x44ffe000
    28e4:	2000c3fc 	.word	0x2000c3fc
    28e8:	f3af 8000 	nop.w
    28ec:	f3af 8000 	nop.w
    28f0:	f3af 8000 	nop.w
    28f4:	f3af 8000 	nop.w
    28f8:	f3af 8000 	nop.w
    28fc:	f3af 8000 	nop.w

00002900 <parseTuning>:
  __ASM volatile ("cpsid i" : : : "memory");
    2900:	b672      	cpsid	i
	if (size > 280)
    2902:	f5b0 7f8c 	cmp.w	r0, #280	; 0x118
    2906:	dc70      	bgt.n	29ea <parseTuning+0xea>
	uint16_t paramEndCheck = (buffer[270] << 8) + buffer[271];
    2908:	4a3a      	ldr	r2, [pc, #232]	; (29f4 <parseTuning+0xf4>)
	if (paramEndCheck != 0xefef)
    290a:	f64e 70ef 	movw	r0, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[270] << 8) + buffer[271];
    290e:	f892 c10e 	ldrb.w	ip, [r2, #270]	; 0x10e
    2912:	f892 310f 	ldrb.w	r3, [r2, #271]	; 0x10f
    2916:	eb03 230c 	add.w	r3, r3, ip, lsl #8
	if (paramEndCheck != 0xefef)
    291a:	b29b      	uxth	r3, r3
    291c:	4283      	cmp	r3, r0
    291e:	d164      	bne.n	29ea <parseTuning+0xea>
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    2920:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
		tuningName[i] = buffer[bufferIndex];
    2924:	4b34      	ldr	r3, [pc, #208]	; (29f8 <parseTuning+0xf8>)
		fractionalMidi[i] =  ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]) * 0.001953125f; // divide by 512.f
    2926:	ed9f 7a35 	vldr	s14, [pc, #212]	; 29fc <parseTuning+0xfc>
{
    292a:	b510      	push	{r4, lr}
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    292c:	4c34      	ldr	r4, [pc, #208]	; (2a00 <parseTuning+0x100>)
		tuningName[i] = buffer[bufferIndex];
    292e:	f892 c000 	ldrb.w	ip, [r2]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    2932:	eb04 0041 	add.w	r0, r4, r1, lsl #1
    2936:	0049      	lsls	r1, r1, #1
		tuningName[i] = buffer[bufferIndex];
    2938:	f883 c000 	strb.w	ip, [r3]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    293c:	f804 c001 	strb.w	ip, [r4, r1]
		tuningName[i] = buffer[bufferIndex];
    2940:	f892 c001 	ldrb.w	ip, [r2, #1]
    2944:	7891      	ldrb	r1, [r2, #2]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    2946:	f880 c001 	strb.w	ip, [r0, #1]
		tuningName[i] = buffer[bufferIndex];
    294a:	f883 c001 	strb.w	ip, [r3, #1]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    294e:	7081      	strb	r1, [r0, #2]
		tuningName[i] = buffer[bufferIndex];
    2950:	f892 c003 	ldrb.w	ip, [r2, #3]
    2954:	7099      	strb	r1, [r3, #2]
    2956:	7911      	ldrb	r1, [r2, #4]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    2958:	f880 c003 	strb.w	ip, [r0, #3]
		tuningName[i] = buffer[bufferIndex];
    295c:	f883 c003 	strb.w	ip, [r3, #3]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    2960:	7101      	strb	r1, [r0, #4]
		tuningName[i] = buffer[bufferIndex];
    2962:	f892 c005 	ldrb.w	ip, [r2, #5]
    2966:	7119      	strb	r1, [r3, #4]
    2968:	7991      	ldrb	r1, [r2, #6]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    296a:	f880 c005 	strb.w	ip, [r0, #5]
		tuningName[i] = buffer[bufferIndex];
    296e:	f883 c005 	strb.w	ip, [r3, #5]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    2972:	7181      	strb	r1, [r0, #6]
		tuningName[i] = buffer[bufferIndex];
    2974:	f892 c007 	ldrb.w	ip, [r2, #7]
    2978:	7199      	strb	r1, [r3, #6]
    297a:	7a11      	ldrb	r1, [r2, #8]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    297c:	f880 c007 	strb.w	ip, [r0, #7]
		tuningName[i] = buffer[bufferIndex];
    2980:	f883 c007 	strb.w	ip, [r3, #7]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    2984:	7201      	strb	r1, [r0, #8]
		tuningName[i] = buffer[bufferIndex];
    2986:	f892 c009 	ldrb.w	ip, [r2, #9]
    298a:	7219      	strb	r1, [r3, #8]
    298c:	7a91      	ldrb	r1, [r2, #10]
    298e:	f883 c009 	strb.w	ip, [r3, #9]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    2992:	f880 c009 	strb.w	ip, [r0, #9]
		tuningName[i] = buffer[bufferIndex];
    2996:	7299      	strb	r1, [r3, #10]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    2998:	7281      	strb	r1, [r0, #10]
		tuningName[i] = buffer[bufferIndex];
    299a:	f892 c00b 	ldrb.w	ip, [r2, #11]
    299e:	7b11      	ldrb	r1, [r2, #12]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    29a0:	f880 c00b 	strb.w	ip, [r0, #11]
		tuningName[i] = buffer[bufferIndex];
    29a4:	7319      	strb	r1, [r3, #12]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    29a6:	7301      	strb	r1, [r0, #12]
    29a8:	4916      	ldr	r1, [pc, #88]	; (2a04 <parseTuning+0x104>)
		tuningName[i] = buffer[bufferIndex];
    29aa:	f892 e00d 	ldrb.w	lr, [r2, #13]
    29ae:	f883 c00b 	strb.w	ip, [r3, #11]
    29b2:	f501 7c00 	add.w	ip, r1, #512	; 0x200
    29b6:	f883 e00d 	strb.w	lr, [r3, #13]
		tuningNamesArray[tuningNumber][i] = buffer[bufferIndex];
    29ba:	f880 e00d 	strb.w	lr, [r0, #13]
		fractionalMidi[i] =  ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]) * 0.001953125f; // divide by 512.f
    29be:	7b90      	ldrb	r0, [r2, #14]
	for (int i = 0; i < 128; i++)
    29c0:	3202      	adds	r2, #2
		fractionalMidi[i] =  ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]) * 0.001953125f; // divide by 512.f
    29c2:	7b53      	ldrb	r3, [r2, #13]
    29c4:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    29c8:	ee07 3a90 	vmov	s15, r3
    29cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    29d0:	ee67 7a87 	vmul.f32	s15, s15, s14
    29d4:	ece1 7a01 	vstmia	r1!, {s15}
	for (int i = 0; i < 128; i++)
    29d8:	458c      	cmp	ip, r1
    29da:	d1f0      	bne.n	29be <parseTuning+0xbe>
	tuningWaitingToParse = 0;
    29dc:	2300      	movs	r3, #0
    29de:	490a      	ldr	r1, [pc, #40]	; (2a08 <parseTuning+0x108>)
	diskBusy = 0;
    29e0:	4a0a      	ldr	r2, [pc, #40]	; (2a0c <parseTuning+0x10c>)
	tuningWaitingToParse = 0;
    29e2:	600b      	str	r3, [r1, #0]
	diskBusy = 0;
    29e4:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    29e6:	b662      	cpsie	i
}
    29e8:	bd10      	pop	{r4, pc}
		tuningWaitingToParse = 0;
    29ea:	4b07      	ldr	r3, [pc, #28]	; (2a08 <parseTuning+0x108>)
    29ec:	2200      	movs	r2, #0
    29ee:	601a      	str	r2, [r3, #0]
    29f0:	b662      	cpsie	i
		return;
    29f2:	4770      	bx	lr
    29f4:	20009240 	.word	0x20009240
    29f8:	20011814 	.word	0x20011814
    29fc:	3b000000 	.word	0x3b000000
    2a00:	20011824 	.word	0x20011824
    2a04:	20000240 	.word	0x20000240
    2a08:	20011944 	.word	0x20011944
    2a0c:	2000a27c 	.word	0x2000a27c
    2a10:	f3af 8000 	nop.w
    2a14:	f3af 8000 	nop.w
    2a18:	f3af 8000 	nop.w
    2a1c:	f3af 8000 	nop.w

00002a20 <randomNumber>:
	rand = hrng.Instance->DR; //should be faster, just may be that number isn't ready yet so we get repeated values. Unlikely at the rate we are polling it
    2a20:	4b05      	ldr	r3, [pc, #20]	; (2a38 <randomNumber+0x18>)
	return ((float)rand * INV_TWO_TO_32);
    2a22:	ed9f 0a06 	vldr	s0, [pc, #24]	; 2a3c <randomNumber+0x1c>
	rand = hrng.Instance->DR; //should be faster, just may be that number isn't ready yet so we get repeated values. Unlikely at the rate we are polling it
    2a26:	681b      	ldr	r3, [r3, #0]
    2a28:	edd3 7a02 	vldr	s15, [r3, #8]
	return ((float)rand * INV_TWO_TO_32);
    2a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
    2a30:	ee27 0a80 	vmul.f32	s0, s15, s0
    2a34:	4770      	bx	lr
    2a36:	bf00      	nop
    2a38:	20011998 	.word	0x20011998
    2a3c:	2f80000d 	.word	0x2f80000d

00002a40 <handleSPI>:
}
    2a40:	4770      	bx	lr
    2a42:	bf00      	nop
    2a44:	f3af 8000 	nop.w
    2a48:	f3af 8000 	nop.w
    2a4c:	f3af 8000 	nop.w
    2a50:	f3af 8000 	nop.w
    2a54:	f3af 8000 	nop.w
    2a58:	f3af 8000 	nop.w
    2a5c:	f3af 8000 	nop.w

00002a60 <scaleTwo>:
{
    2a60:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    2a64:	ed9f 0a04 	vldr	s0, [pc, #16]	; 2a78 <scaleTwo+0x18>
    2a68:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    2a6c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    2a6e:	f001 fa27 	bl	3ec0 <LEAF_clip>
}
    2a72:	ee30 0a00 	vadd.f32	s0, s0, s0
    2a76:	bd08      	pop	{r3, pc}
    2a78:	00000000 	.word	0x00000000
    2a7c:	f3af 8000 	nop.w

00002a80 <parsePreset>:
{
    2a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a84:	b087      	sub	sp, #28
    2a86:	460d      	mov	r5, r1
    2a88:	9001      	str	r0, [sp, #4]
    2a8a:	9105      	str	r1, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    2a8c:	b672      	cpsid	i
		presetName[i] = buffer[bufferIndex];
    2a8e:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 2e3c <parsePreset+0x3bc>
		 audioOutBuffer[i] = 0;
    2a92:	2220      	movs	r2, #32
    2a94:	2100      	movs	r1, #0
    2a96:	48d0      	ldr	r0, [pc, #832]	; (2dd8 <parsePreset+0x358>)
    2a98:	f002 fa5e 	bl	4f58 <__memset_veneer>
		presetName[i] = buffer[bufferIndex];
    2a9c:	4bcf      	ldr	r3, [pc, #828]	; (2ddc <parsePreset+0x35c>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2a9e:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
		presetName[i] = buffer[bufferIndex];
    2aa2:	f89b 5006 	ldrb.w	r5, [fp, #6]
    2aa6:	f89b 2000 	ldrb.w	r2, [fp]
    2aaa:	f89b c007 	ldrb.w	ip, [fp, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2aae:	4ccc      	ldr	r4, [pc, #816]	; (2de0 <parsePreset+0x360>)
		presetName[i] = buffer[bufferIndex];
    2ab0:	719d      	strb	r5, [r3, #6]
    2ab2:	9503      	str	r5, [sp, #12]
	audioMasterLevel = 0.0f;
    2ab4:	eddf 7acb 	vldr	s15, [pc, #812]	; 2de4 <parsePreset+0x364>
    2ab8:	4dcb      	ldr	r5, [pc, #812]	; (2de8 <parsePreset+0x368>)
		presetName[i] = buffer[bufferIndex];
    2aba:	9202      	str	r2, [sp, #8]
	audioMasterLevel = 0.0f;
    2abc:	edc5 7a00 	vstr	s15, [r5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2ac0:	4625      	mov	r5, r4
		presetName[i] = buffer[bufferIndex];
    2ac2:	f89b a001 	ldrb.w	sl, [fp, #1]
    2ac6:	f89b 9002 	ldrb.w	r9, [fp, #2]
    2aca:	f89b 8003 	ldrb.w	r8, [fp, #3]
    2ace:	f89b 7004 	ldrb.w	r7, [fp, #4]
    2ad2:	f89b 6005 	ldrb.w	r6, [fp, #5]
    2ad6:	f89b e008 	ldrb.w	lr, [fp, #8]
    2ada:	701a      	strb	r2, [r3, #0]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2adc:	eb04 0241 	add.w	r2, r4, r1, lsl #1
		presetName[i] = buffer[bufferIndex];
    2ae0:	f883 c007 	strb.w	ip, [r3, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2ae4:	0049      	lsls	r1, r1, #1
    2ae6:	9c02      	ldr	r4, [sp, #8]
		presetName[i] = buffer[bufferIndex];
    2ae8:	f8cd c010 	str.w	ip, [sp, #16]
    2aec:	f89b c009 	ldrb.w	ip, [fp, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2af0:	546c      	strb	r4, [r5, r1]
		presetName[i] = buffer[bufferIndex];
    2af2:	f89b 000a 	ldrb.w	r0, [fp, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2af6:	f882 a001 	strb.w	sl, [r2, #1]
		presetName[i] = buffer[bufferIndex];
    2afa:	f883 a001 	strb.w	sl, [r3, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2afe:	f882 9002 	strb.w	r9, [r2, #2]
		presetName[i] = buffer[bufferIndex];
    2b02:	f883 9002 	strb.w	r9, [r3, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2b06:	f882 8003 	strb.w	r8, [r2, #3]
		presetName[i] = buffer[bufferIndex];
    2b0a:	f883 8003 	strb.w	r8, [r3, #3]
    2b0e:	711f      	strb	r7, [r3, #4]
    2b10:	715e      	strb	r6, [r3, #5]
    2b12:	f883 e008 	strb.w	lr, [r3, #8]
    2b16:	f883 c009 	strb.w	ip, [r3, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2b1a:	7117      	strb	r7, [r2, #4]
    2b1c:	7156      	strb	r6, [r2, #5]
    2b1e:	9c03      	ldr	r4, [sp, #12]
    2b20:	9904      	ldr	r1, [sp, #16]
    2b22:	7194      	strb	r4, [r2, #6]
		presetName[i] = buffer[bufferIndex];
    2b24:	7298      	strb	r0, [r3, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2b26:	71d1      	strb	r1, [r2, #7]
    2b28:	f882 e008 	strb.w	lr, [r2, #8]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2b2c:	f89b 107f 	ldrb.w	r1, [fp, #127]	; 0x7f
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2b30:	f882 c009 	strb.w	ip, [r2, #9]
    2b34:	7290      	strb	r0, [r2, #10]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2b36:	f89b 007e 	ldrb.w	r0, [fp, #126]	; 0x7e
    2b3a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
		presetName[i] = buffer[bufferIndex];
    2b3e:	f89b 000b 	ldrb.w	r0, [fp, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2b42:	72d0      	strb	r0, [r2, #11]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2b44:	b289      	uxth	r1, r1
		presetName[i] = buffer[bufferIndex];
    2b46:	72d8      	strb	r0, [r3, #11]
    2b48:	f89b 000c 	ldrb.w	r0, [fp, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2b4c:	7310      	strb	r0, [r2, #12]
		presetName[i] = buffer[bufferIndex];
    2b4e:	7318      	strb	r0, [r3, #12]
    2b50:	f89b 000d 	ldrb.w	r0, [fp, #13]
    2b54:	7358      	strb	r0, [r3, #13]
	if (paramCount > size)
    2b56:	9b01      	ldr	r3, [sp, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2b58:	7350      	strb	r0, [r2, #13]
	if (paramCount > size)
    2b5a:	4299      	cmp	r1, r3
    2b5c:	dc0d      	bgt.n	2b7a <parsePreset+0xfa>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    2b5e:	eb0b 0441 	add.w	r4, fp, r1, lsl #1
	if (paramEndCheck != 0xefef)
    2b62:	f64e 70ef 	movw	r0, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    2b66:	004a      	lsls	r2, r1, #1
    2b68:	f894 5080 	ldrb.w	r5, [r4, #128]	; 0x80
    2b6c:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
    2b70:	eb03 2305 	add.w	r3, r3, r5, lsl #8
	if (paramEndCheck != 0xefef)
    2b74:	b29b      	uxth	r3, r3
    2b76:	4283      	cmp	r3, r0
    2b78:	d00a      	beq.n	2b90 <parsePreset+0x110>
		audioMasterLevel = 1.0f;
    2b7a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    2b7e:	4b9b      	ldr	r3, [pc, #620]	; (2dec <parsePreset+0x36c>)
    2b80:	2200      	movs	r2, #0
		audioMasterLevel = 1.0f;
    2b82:	4899      	ldr	r0, [pc, #612]	; (2de8 <parsePreset+0x368>)
		presetWaitingToParse = 0;
    2b84:	601a      	str	r2, [r3, #0]
		audioMasterLevel = 1.0f;
    2b86:	6001      	str	r1, [r0, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    2b88:	b662      	cpsie	i
}
    2b8a:	b007      	add	sp, #28
    2b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    2b90:	f102 0384 	add.w	r3, r2, #132	; 0x84
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    2b94:	f894 a083 	ldrb.w	sl, [r4, #131]	; 0x83
    2b98:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
    2b9c:	eb0a 2a02 	add.w	sl, sl, r2, lsl #8
    2ba0:	fa1f fa8a 	uxth.w	sl, sl
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    2ba4:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
    2ba8:	b292      	uxth	r2, r2
    2baa:	4413      	add	r3, r2
    2bac:	9202      	str	r2, [sp, #8]
	if (mappingEndLocation > size)
    2bae:	9a01      	ldr	r2, [sp, #4]
    2bb0:	b29b      	uxth	r3, r3
    2bb2:	4293      	cmp	r3, r2
    2bb4:	dce1      	bgt.n	2b7a <parsePreset+0xfa>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    2bb6:	eb0b 0003 	add.w	r0, fp, r3
    2bba:	f81b 2003 	ldrb.w	r2, [fp, r3]
    2bbe:	7843      	ldrb	r3, [r0, #1]
    2bc0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    2bc4:	f64f 62fe 	movw	r2, #65278	; 0xfefe
    2bc8:	b29b      	uxth	r3, r3
    2bca:	4293      	cmp	r3, r2
    2bcc:	d1d5      	bne.n	2b7a <parsePreset+0xfa>
	for (int i = 0; i < paramCount; i++)
    2bce:	2900      	cmp	r1, #0
    2bd0:	f001 806a 	beq.w	3ca8 <parsePreset+0x1228>
    2bd4:	4886      	ldr	r0, [pc, #536]	; (2df0 <parsePreset+0x370>)
    2bd6:	465a      	mov	r2, fp
		params[i].zeroToOneVal = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2bd8:	ed9f 7a86 	vldr	s14, [pc, #536]	; 2df4 <parsePreset+0x374>
	for (int i = 0; i < paramCount; i++)
    2bdc:	4605      	mov	r5, r0
    2bde:	4606      	mov	r6, r0
		params[i].zeroToOneVal = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2be0:	f892 7080 	ldrb.w	r7, [r2, #128]	; 0x80
	for (int i = 0; i < paramCount; i++)
    2be4:	3202      	adds	r2, #2
		params[i].zeroToOneVal = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2be6:	f892 307f 	ldrb.w	r3, [r2, #127]	; 0x7f
	for (int i = 0; i < paramCount; i++)
    2bea:	42a2      	cmp	r2, r4
		params[i].zeroToOneVal = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2bec:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    2bf0:	ee07 3a90 	vmov	s15, r3
    2bf4:	4633      	mov	r3, r6
    2bf6:	f106 0614 	add.w	r6, r6, #20
    2bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
    2c02:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < paramCount; i++)
    2c06:	d1eb      	bne.n	2be0 <parsePreset+0x160>
    2c08:	eb01 0281 	add.w	r2, r1, r1, lsl #2
    2c0c:	4b78      	ldr	r3, [pc, #480]	; (2df0 <parsePreset+0x370>)
    2c0e:	4f7a      	ldr	r7, [pc, #488]	; (2df8 <parsePreset+0x378>)
    2c10:	eb00 0282 	add.w	r2, r0, r2, lsl #2
		params[i].scaleFunc = &scaleDefault;
    2c14:	609f      	str	r7, [r3, #8]
	for (int i = 0; i < paramCount; i++)
    2c16:	3314      	adds	r3, #20
    2c18:	4293      	cmp	r3, r2
    2c1a:	d1fb      	bne.n	2c14 <parsePreset+0x194>
    2c1c:	f8df c220 	ldr.w	ip, [pc, #544]	; 2e40 <parsePreset+0x3c0>
    2c20:	4663      	mov	r3, ip
		params[i].setParam = &blankFunction;
    2c22:	60c3      	str	r3, [r0, #12]
	for (int i = 0; i < paramCount; i++)
    2c24:	3014      	adds	r0, #20
    2c26:	4290      	cmp	r0, r2
    2c28:	d1fb      	bne.n	2c22 <parsePreset+0x1a2>
	bufferIndex += 2;
    2c2a:	004e      	lsls	r6, r1, #1
    2c2c:	3684      	adds	r6, #132	; 0x84
    2c2e:	b2b6      	uxth	r6, r6
	for (int i = paramCount; i < NUM_PARAMS; i++)
    2c30:	299a      	cmp	r1, #154	; 0x9a
    2c32:	f301 8036 	bgt.w	3ca2 <parsePreset+0x1222>
    2c36:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    2c3a:	f8df c204 	ldr.w	ip, [pc, #516]	; 2e40 <parsePreset+0x3c0>
    2c3e:	4c6f      	ldr	r4, [pc, #444]	; (2dfc <parsePreset+0x37c>)
		params[i].zeroToOneVal = 0.0f;
    2c40:	2200      	movs	r2, #0
    2c42:	eb05 0381 	add.w	r3, r5, r1, lsl #2
    2c46:	4f6c      	ldr	r7, [pc, #432]	; (2df8 <parsePreset+0x378>)
    2c48:	4661      	mov	r1, ip
    2c4a:	601a      	str	r2, [r3, #0]
		params[i].setParam = &blankFunction;
    2c4c:	e9c3 7102 	strd	r7, r1, [r3, #8]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    2c50:	3314      	adds	r3, #20
    2c52:	42a3      	cmp	r3, r4
    2c54:	d1f9      	bne.n	2c4a <parsePreset+0x1ca>
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    2c56:	4a6a      	ldr	r2, [pc, #424]	; (2e00 <parsePreset+0x380>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    2c58:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    2c5c:	4b69      	ldr	r3, [pc, #420]	; (2e04 <parsePreset+0x384>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    2c5e:	f8c5 21fc 	str.w	r2, [r5, #508]	; 0x1fc
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    2c62:	f8c5 2300 	str.w	r2, [r5, #768]	; 0x300
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    2c66:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    2c6a:	4a67      	ldr	r2, [pc, #412]	; (2e08 <parsePreset+0x388>)
	params[Transpose].scaleFunc = &scaleTranspose;
    2c6c:	4967      	ldr	r1, [pc, #412]	; (2e0c <parsePreset+0x38c>)
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    2c6e:	f8c5 2210 	str.w	r2, [r5, #528]	; 0x210
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    2c72:	f8c5 2314 	str.w	r2, [r5, #788]	; 0x314
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    2c76:	f8c5 2418 	str.w	r2, [r5, #1048]	; 0x418
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    2c7a:	4a65      	ldr	r2, [pc, #404]	; (2e10 <parsePreset+0x390>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    2c7c:	f8c5 3878 	str.w	r3, [r5, #2168]	; 0x878
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    2c80:	f8c5 2224 	str.w	r2, [r5, #548]	; 0x224
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    2c84:	f8c5 2328 	str.w	r2, [r5, #808]	; 0x328
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    2c88:	f8c5 242c 	str.w	r2, [r5, #1068]	; 0x42c
	params[Osc1Harmonics].scaleFunc = &scaleOscHarmonics;
    2c8c:	4a61      	ldr	r2, [pc, #388]	; (2e14 <parsePreset+0x394>)
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    2c8e:	f8c5 388c 	str.w	r3, [r5, #2188]	; 0x88c
	params[Osc1Harmonics].scaleFunc = &scaleOscHarmonics;
    2c92:	f8c5 2260 	str.w	r2, [r5, #608]	; 0x260
	params[Osc2Harmonics].scaleFunc = &scaleOscHarmonics;
    2c96:	f8c5 2364 	str.w	r2, [r5, #868]	; 0x364
	params[Osc3Harmonics].scaleFunc = &scaleOscHarmonics;
    2c9a:	f8c5 2468 	str.w	r2, [r5, #1128]	; 0x468
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    2c9e:	4a5e      	ldr	r2, [pc, #376]	; (2e18 <parsePreset+0x398>)
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    2ca0:	f8c5 38b4 	str.w	r3, [r5, #2228]	; 0x8b4
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    2ca4:	f8c5 38f0 	str.w	r3, [r5, #2288]	; 0x8f0
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    2ca8:	f8c5 3904 	str.w	r3, [r5, #2308]	; 0x904
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    2cac:	f8c5 392c 	str.w	r3, [r5, #2348]	; 0x92c
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    2cb0:	f8c5 3968 	str.w	r3, [r5, #2408]	; 0x968
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    2cb4:	f8c5 397c 	str.w	r3, [r5, #2428]	; 0x97c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    2cb8:	f8c5 39a4 	str.w	r3, [r5, #2468]	; 0x9a4
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    2cbc:	f8c5 39e0 	str.w	r3, [r5, #2528]	; 0x9e0
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    2cc0:	f8c5 39f4 	str.w	r3, [r5, #2548]	; 0x9f4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    2cc4:	f8c5 3a1c 	str.w	r3, [r5, #2588]	; 0xa1c
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    2cc8:	f8c5 279c 	str.w	r2, [r5, #1948]	; 0x79c
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    2ccc:	4b53      	ldr	r3, [pc, #332]	; (2e1c <parsePreset+0x39c>)
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    2cce:	f8c5 2814 	str.w	r2, [r5, #2068]	; 0x814
	params[Transpose].scaleFunc = &scaleTranspose;
    2cd2:	f8c5 1148 	str.w	r1, [r5, #328]	; 0x148
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    2cd6:	4a52      	ldr	r2, [pc, #328]	; (2e20 <parsePreset+0x3a0>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    2cd8:	4952      	ldr	r1, [pc, #328]	; (2e24 <parsePreset+0x3a4>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    2cda:	f8c5 3a58 	str.w	r3, [r5, #2648]	; 0xa58
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    2cde:	f8c5 3abc 	str.w	r3, [r5, #2748]	; 0xabc
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    2ce2:	f8c5 27c4 	str.w	r2, [r5, #1988]	; 0x7c4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    2ce6:	f8c5 283c 	str.w	r2, [r5, #2108]	; 0x83c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    2cea:	f8c5 115c 	str.w	r1, [r5, #348]	; 0x15c
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    2cee:	f8c5 3b20 	str.w	r3, [r5, #2848]	; 0xb20
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    2cf2:	f8c5 3b84 	str.w	r3, [r5, #2948]	; 0xb84
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    2cf6:	4b4c      	ldr	r3, [pc, #304]	; (2e28 <parsePreset+0x3a8>)
    2cf8:	edd3 7a00 	vldr	s15, [r3]
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    2cfc:	4b4b      	ldr	r3, [pc, #300]	; (2e2c <parsePreset+0x3ac>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    2cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    2d02:	f8c5 3bfc 	str.w	r3, [r5, #3068]	; 0xbfc
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    2d06:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    2d0a:	fef8 7a67 	vrinta.f32	s15, s15
    2d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2d12:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
    2d16:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2d1a:	2b0b      	cmp	r3, #11
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    2d1c:	4b44      	ldr	r3, [pc, #272]	; (2e30 <parsePreset+0x3b0>)
    2d1e:	edd3 7a00 	vldr	s15, [r3]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    2d22:	bf88      	it	hi
    2d24:	f8c5 2530 	strhi.w	r2, [r5, #1328]	; 0x530
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    2d28:	ee67 7a87 	vmul.f32	s15, s15, s14
    2d2c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    2d30:	fef8 7a67 	vrinta.f32	s15, s15
    2d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2d38:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
    2d3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2d40:	2b0b      	cmp	r3, #11
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    2d42:	4b3c      	ldr	r3, [pc, #240]	; (2e34 <parsePreset+0x3b4>)
    2d44:	edd3 7a00 	vldr	s15, [r3]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    2d48:	bf88      	it	hi
    2d4a:	f8c5 25d0 	strhi.w	r2, [r5, #1488]	; 0x5d0
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    2d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
    2d52:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    2d56:	fef8 7a67 	vrinta.f32	s15, s15
    2d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2d5e:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
    2d62:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2d66:	2b0b      	cmp	r3, #11
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    2d68:	4b33      	ldr	r3, [pc, #204]	; (2e38 <parsePreset+0x3b8>)
    2d6a:	edd3 7a00 	vldr	s15, [r3]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    2d6e:	bf88      	it	hi
    2d70:	f8c5 2670 	strhi.w	r2, [r5, #1648]	; 0x670
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    2d74:	ee67 7a87 	vmul.f32	s15, s15, s14
    2d78:	fef8 7a67 	vrinta.f32	s15, s15
    2d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2d80:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
    2d84:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2d88:	2b0b      	cmp	r3, #11
    2d8a:	d901      	bls.n	2d90 <parsePreset+0x310>
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    2d8c:	f8c5 2710 	str.w	r2, [r5, #1808]	; 0x710
	for (int i = 0; i < NUM_EFFECT; i++)
    2d90:	f8df 905c 	ldr.w	r9, [pc, #92]	; 2df0 <parsePreset+0x370>
	for (int i = 0; i < paramCount; i++)
    2d94:	464d      	mov	r5, r9
    2d96:	464f      	mov	r7, r9
		params[i].realVal = params[i].scaleFunc(params[i].zeroToOneVal);
    2d98:	68bb      	ldr	r3, [r7, #8]
	for (int i = 0; i < NUM_PARAMS; i++)
    2d9a:	3714      	adds	r7, #20
		params[i].realVal = params[i].scaleFunc(params[i].zeroToOneVal);
    2d9c:	ed17 0a05 	vldr	s0, [r7, #-20]	; 0xffffffec
    2da0:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    2da2:	42a7      	cmp	r7, r4
		params[i].realVal = params[i].scaleFunc(params[i].zeroToOneVal);
    2da4:	ed07 0a04 	vstr	s0, [r7, #-16]
	for (int i = 0; i < NUM_PARAMS; i++)
    2da8:	d1f6      	bne.n	2d98 <parsePreset+0x318>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal * (NUM_OSC_SHAPES-1));
    2daa:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    2dae:	edd5 7ab0 	vldr	s15, [r5, #704]	; 0x2c0
    2db2:	ee67 7a87 	vmul.f32	s15, s15, s14
    2db6:	fef8 7a67 	vrinta.f32	s15, s15
    2dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2dbe:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
    2dc2:	2b06      	cmp	r3, #6
    2dc4:	d841      	bhi.n	2e4a <parsePreset+0x3ca>
    2dc6:	e8df f013 	tbh	[pc, r3, lsl #1]
    2dca:	003d      	.short	0x003d
    2dcc:	06bc06c1 	.word	0x06bc06c1
    2dd0:	06b206b7 	.word	0x06b206b7
    2dd4:	06a806ad 	.word	0x06a806ad
    2dd8:	30000000 	.word	0x30000000
    2ddc:	2000f6dc 	.word	0x2000f6dc
    2de0:	2000f6ec 	.word	0x2000f6ec
    2de4:	00000000 	.word	0x00000000
    2de8:	20000024 	.word	0x20000024
    2dec:	2000f80c 	.word	0x2000f80c
    2df0:	2000eac0 	.word	0x2000eac0
    2df4:	377ffff6 	.word	0x377ffff6
    2df8:	00002681 	.word	0x00002681
    2dfc:	2000f6dc 	.word	0x2000f6dc
    2e00:	000025c1 	.word	0x000025c1
    2e04:	000027c1 	.word	0x000027c1
    2e08:	00002601 	.word	0x00002601
    2e0c:	000026a1 	.word	0x000026a1
    2e10:	00002621 	.word	0x00002621
    2e14:	000025e1 	.word	0x000025e1
    2e18:	00002641 	.word	0x00002641
    2e1c:	00002861 	.word	0x00002861
    2e20:	00002721 	.word	0x00002721
    2e24:	000026e1 	.word	0x000026e1
    2e28:	2000efb0 	.word	0x2000efb0
    2e2c:	00002661 	.word	0x00002661
    2e30:	2000f050 	.word	0x2000f050
    2e34:	2000f0f0 	.word	0x2000f0f0
    2e38:	2000f190 	.word	0x2000f190
    2e3c:	20009240 	.word	0x20009240
    2e40:	24001195 	.word	0x24001195
				  shapeTick[i] = &sawSquareTick;
    2e44:	4b8d      	ldr	r3, [pc, #564]	; (307c <parsePreset+0x5fc>)
    2e46:	4a8e      	ldr	r2, [pc, #568]	; (3080 <parsePreset+0x600>)
    2e48:	601a      	str	r2, [r3, #0]
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal * (NUM_OSC_SHAPES-1));
    2e4a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    2e4e:	edd5 7af1 	vldr	s15, [r5, #964]	; 0x3c4
		if (params[Osc1 + (OscParamsNum * i)].realVal  > 0.5f)
    2e52:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    2e56:	ed95 6a79 	vldr	s12, [r5, #484]	; 0x1e4
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal * (NUM_OSC_SHAPES-1));
    2e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (params[Osc1 + (OscParamsNum * i)].realVal  > 0.5f)
    2e5e:	eeb4 6ae6 	vcmpe.f32	s12, s13
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal * (NUM_OSC_SHAPES-1));
    2e62:	fef8 7a67 	vrinta.f32	s15, s15
    2e66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		if (params[Osc1 + (OscParamsNum * i)].realVal  > 0.5f)
    2e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal * (NUM_OSC_SHAPES-1));
    2e6e:	ee17 3a90 	vmov	r3, s15
	uint8_t enabledCount = 0;
    2e72:	bfcc      	ite	gt
    2e74:	2201      	movgt	r2, #1
    2e76:	2200      	movle	r2, #0
		switch (oscshape)
    2e78:	2b06      	cmp	r3, #6
    2e7a:	d80b      	bhi.n	2e94 <parsePreset+0x414>
    2e7c:	e8df f013 	tbh	[pc, r3, lsl #1]
    2e80:	06480007 	.word	0x06480007
    2e84:	063e0643 	.word	0x063e0643
    2e88:	06340639 	.word	0x06340639
    2e8c:	062f      	.short	0x062f
				  shapeTick[i] = &sawSquareTick;
    2e8e:	4b7b      	ldr	r3, [pc, #492]	; (307c <parsePreset+0x5fc>)
    2e90:	497b      	ldr	r1, [pc, #492]	; (3080 <parsePreset+0x600>)
    2e92:	6059      	str	r1, [r3, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal  > 0.5f)
    2e94:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2e98:	ed95 7aba 	vldr	s14, [r5, #744]	; 0x2e8
    2e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2ea4:	dd01      	ble.n	2eaa <parsePreset+0x42a>
			enabledCount++;
    2ea6:	3201      	adds	r2, #1
    2ea8:	b2d2      	uxtb	r2, r2
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal * (NUM_OSC_SHAPES-1));
    2eaa:	4b76      	ldr	r3, [pc, #472]	; (3084 <parsePreset+0x604>)
    2eac:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    2eb0:	edd3 7a00 	vldr	s15, [r3]
    2eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
    2eb8:	fef8 7a67 	vrinta.f32	s15, s15
    2ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2ec0:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
    2ec4:	2b06      	cmp	r3, #6
    2ec6:	d80b      	bhi.n	2ee0 <parsePreset+0x460>
    2ec8:	e8df f013 	tbh	[pc, r3, lsl #1]
    2ecc:	06040007 	.word	0x06040007
    2ed0:	05fa05ff 	.word	0x05fa05ff
    2ed4:	05a805ad 	.word	0x05a805ad
    2ed8:	05a3      	.short	0x05a3
				  shapeTick[i] = &sawSquareTick;
    2eda:	4b68      	ldr	r3, [pc, #416]	; (307c <parsePreset+0x5fc>)
    2edc:	4968      	ldr	r1, [pc, #416]	; (3080 <parsePreset+0x600>)
    2ede:	6099      	str	r1, [r3, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal  > 0.5f)
    2ee0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2ee4:	ed95 7afb 	vldr	s14, [r5, #1004]	; 0x3ec
    2ee8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2ef0:	dd01      	ble.n	2ef6 <parsePreset+0x476>
			enabledCount++;
    2ef2:	3201      	adds	r2, #1
    2ef4:	b2d2      	uxtb	r2, r2
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal * (NUM_FILTER_TYPES-1));
    2ef6:	4b64      	ldr	r3, [pc, #400]	; (3088 <parsePreset+0x608>)
    2ef8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    2efc:	4f63      	ldr	r7, [pc, #396]	; (308c <parsePreset+0x60c>)
    2efe:	edd3 7a00 	vldr	s15, [r3]
	oscAmpMult = oscAmpMultArray[enabledCount];
    2f02:	4b63      	ldr	r3, [pc, #396]	; (3090 <parsePreset+0x610>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal * (NUM_FILTER_TYPES-1));
    2f04:	ee67 7a87 	vmul.f32	s15, s15, s14
	oscAmpMult = oscAmpMultArray[enabledCount];
    2f08:	eb03 0282 	add.w	r2, r3, r2, lsl #2
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal * (NUM_FILTER_TYPES-1));
    2f0c:	fef8 7a67 	vrinta.f32	s15, s15
    2f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    2f14:	6811      	ldr	r1, [r2, #0]
    2f16:	4a5f      	ldr	r2, [pc, #380]	; (3094 <parsePreset+0x614>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal * (NUM_FILTER_TYPES-1));
    2f18:	ee17 3a90 	vmov	r3, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    2f1c:	6011      	str	r1, [r2, #0]
		switch (filterType)
    2f1e:	2b08      	cmp	r3, #8
    2f20:	d811      	bhi.n	2f46 <parsePreset+0x4c6>
    2f22:	e8df f013 	tbh	[pc, r3, lsl #1]
    2f26:	0009      	.short	0x0009
    2f28:	0696069f 	.word	0x0696069f
    2f2c:	0684068d 	.word	0x0684068d
    2f30:	0672067b 	.word	0x0672067b
    2f34:	06600669 	.word	0x06600669
				  filterTick[i] = &lowpassTick;
    2f38:	4b57      	ldr	r3, [pc, #348]	; (3098 <parsePreset+0x618>)
    2f3a:	4a58      	ldr	r2, [pc, #352]	; (309c <parsePreset+0x61c>)
    2f3c:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &lowpassSetQ;
    2f3e:	4b58      	ldr	r3, [pc, #352]	; (30a0 <parsePreset+0x620>)
    2f40:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &lowpassSetGain;
    2f42:	4b58      	ldr	r3, [pc, #352]	; (30a4 <parsePreset+0x624>)
    2f44:	607b      	str	r3, [r7, #4]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal * (NUM_FILTER_TYPES-1));
    2f46:	4b58      	ldr	r3, [pc, #352]	; (30a8 <parsePreset+0x628>)
    2f48:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    2f4c:	edd3 7a00 	vldr	s15, [r3]
    2f50:	ee67 7a87 	vmul.f32	s15, s15, s14
    2f54:	fef8 7a67 	vrinta.f32	s15, s15
    2f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2f5c:	ee17 3a90 	vmov	r3, s15
		switch (filterType)
    2f60:	2b08      	cmp	r3, #8
    2f62:	d811      	bhi.n	2f88 <parsePreset+0x508>
    2f64:	e8df f013 	tbh	[pc, r3, lsl #1]
    2f68:	062d0009 	.word	0x062d0009
    2f6c:	061b0624 	.word	0x061b0624
    2f70:	06090612 	.word	0x06090612
    2f74:	05f70600 	.word	0x05f70600
    2f78:	0636      	.short	0x0636
				  filterTick[i] = &lowpassTick;
    2f7a:	4b47      	ldr	r3, [pc, #284]	; (3098 <parsePreset+0x618>)
    2f7c:	4a47      	ldr	r2, [pc, #284]	; (309c <parsePreset+0x61c>)
    2f7e:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &lowpassSetQ;
    2f80:	4b47      	ldr	r3, [pc, #284]	; (30a0 <parsePreset+0x620>)
    2f82:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &lowpassSetGain;
    2f84:	4b47      	ldr	r3, [pc, #284]	; (30a4 <parsePreset+0x624>)
    2f86:	60fb      	str	r3, [r7, #12]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal * (NUM_LFO_SHAPES-1));
    2f88:	4b48      	ldr	r3, [pc, #288]	; (30ac <parsePreset+0x62c>)
    2f8a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2f8e:	edd3 7a00 	vldr	s15, [r3]
    2f92:	ee67 7a87 	vmul.f32	s15, s15, s14
    2f96:	fef8 7a67 	vrinta.f32	s15, s15
    2f9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2f9e:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    2fa2:	2b05      	cmp	r3, #5
    2fa4:	f200 8698 	bhi.w	3cd8 <parsePreset+0x1258>
    2fa8:	e8df f013 	tbh	[pc, r3, lsl #1]
    2fac:	051b0527 	.word	0x051b0527
    2fb0:	0503050f 	.word	0x0503050f
    2fb4:	000604f7 	.word	0x000604f7
				lfoShapeTick[i] = &lfoPulseTick;
    2fb8:	4b3d      	ldr	r3, [pc, #244]	; (30b0 <parsePreset+0x630>)
    2fba:	493e      	ldr	r1, [pc, #248]	; (30b4 <parsePreset+0x634>)
				lfoSetters[i].setRate = &lfoPulseSetRate;
    2fbc:	4a3e      	ldr	r2, [pc, #248]	; (30b8 <parsePreset+0x638>)
				lfoShapeTick[i] = &lfoPulseTick;
    2fbe:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    2fc0:	4b3e      	ldr	r3, [pc, #248]	; (30bc <parsePreset+0x63c>)
    2fc2:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    2fc4:	4b3e      	ldr	r3, [pc, #248]	; (30c0 <parsePreset+0x640>)
    2fc6:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    2fc8:	4b3e      	ldr	r3, [pc, #248]	; (30c4 <parsePreset+0x644>)
    2fca:	6093      	str	r3, [r2, #8]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal * (NUM_LFO_SHAPES-1));
    2fcc:	4b3e      	ldr	r3, [pc, #248]	; (30c8 <parsePreset+0x648>)
    2fce:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2fd2:	edd3 7a00 	vldr	s15, [r3]
    2fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
    2fda:	fef8 7a67 	vrinta.f32	s15, s15
    2fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2fe2:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    2fe6:	2b05      	cmp	r3, #5
    2fe8:	d810      	bhi.n	300c <parsePreset+0x58c>
    2fea:	e8df f013 	tbh	[pc, r3, lsl #1]
    2fee:	04cb      	.short	0x04cb
    2ff0:	04b504c0 	.word	0x04b504c0
    2ff4:	049404aa 	.word	0x049404aa
    2ff8:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
    2ffa:	4b2d      	ldr	r3, [pc, #180]	; (30b0 <parsePreset+0x630>)
    2ffc:	492d      	ldr	r1, [pc, #180]	; (30b4 <parsePreset+0x634>)
    2ffe:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    3000:	4b2e      	ldr	r3, [pc, #184]	; (30bc <parsePreset+0x63c>)
    3002:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    3004:	4b2e      	ldr	r3, [pc, #184]	; (30c0 <parsePreset+0x640>)
    3006:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    3008:	4b2e      	ldr	r3, [pc, #184]	; (30c4 <parsePreset+0x644>)
    300a:	6153      	str	r3, [r2, #20]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal * (NUM_LFO_SHAPES-1));
    300c:	4b2f      	ldr	r3, [pc, #188]	; (30cc <parsePreset+0x64c>)
    300e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    3012:	edd3 7a00 	vldr	s15, [r3]
    3016:	ee67 7a87 	vmul.f32	s15, s15, s14
    301a:	fef8 7a67 	vrinta.f32	s15, s15
    301e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3022:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    3026:	2b05      	cmp	r3, #5
    3028:	d810      	bhi.n	304c <parsePreset+0x5cc>
    302a:	e8df f013 	tbh	[pc, r3, lsl #1]
    302e:	047f      	.short	0x047f
    3030:	045e0469 	.word	0x045e0469
    3034:	04340453 	.word	0x04340453
    3038:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
    303a:	4b1d      	ldr	r3, [pc, #116]	; (30b0 <parsePreset+0x630>)
    303c:	491d      	ldr	r1, [pc, #116]	; (30b4 <parsePreset+0x634>)
    303e:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    3040:	4b1e      	ldr	r3, [pc, #120]	; (30bc <parsePreset+0x63c>)
    3042:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    3044:	4b1e      	ldr	r3, [pc, #120]	; (30c0 <parsePreset+0x640>)
    3046:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    3048:	4b1e      	ldr	r3, [pc, #120]	; (30c4 <parsePreset+0x644>)
    304a:	6213      	str	r3, [r2, #32]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal * (NUM_LFO_SHAPES-1));
    304c:	4b20      	ldr	r3, [pc, #128]	; (30d0 <parsePreset+0x650>)
    304e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    3052:	edd3 7a00 	vldr	s15, [r3]
    3056:	ee67 7a87 	vmul.f32	s15, s15, s14
    305a:	fef8 7a67 	vrinta.f32	s15, s15
    305e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3062:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    3066:	2b05      	cmp	r3, #5
    3068:	d83d      	bhi.n	30e6 <parsePreset+0x666>
    306a:	e8df f013 	tbh	[pc, r3, lsl #1]
    306e:	0429      	.short	0x0429
    3070:	040a041f 	.word	0x040a041f
    3074:	03f60400 	.word	0x03f60400
    3078:	0033      	.short	0x0033
    307a:	bf00      	nop
    307c:	20000790 	.word	0x20000790
    3080:	000005e1 	.word	0x000005e1
    3084:	2000ef88 	.word	0x2000ef88
    3088:	2000f244 	.word	0x2000f244
    308c:	2000c2d0 	.word	0x2000c2d0
    3090:	20000014 	.word	0x20000014
    3094:	20000010 	.word	0x20000010
    3098:	20000234 	.word	0x20000234
    309c:	00000a41 	.word	0x00000a41
    30a0:	00000d61 	.word	0x00000d61
    30a4:	00000e81 	.word	0x00000e81
    30a8:	2000f2bc 	.word	0x2000f2bc
    30ac:	2000f550 	.word	0x2000f550
    30b0:	2000050c 	.word	0x2000050c
    30b4:	24000421 	.word	0x24000421
    30b8:	2000e3fc 	.word	0x2000e3fc
    30bc:	24000489 	.word	0x24000489
    30c0:	24000525 	.word	0x24000525
    30c4:	240004e9 	.word	0x240004e9
    30c8:	2000f5b4 	.word	0x2000f5b4
    30cc:	2000f618 	.word	0x2000f618
    30d0:	2000f67c 	.word	0x2000f67c
				lfoShapeTick[i] = &lfoPulseTick;
    30d4:	4b8f      	ldr	r3, [pc, #572]	; (3314 <parsePreset+0x894>)
    30d6:	4990      	ldr	r1, [pc, #576]	; (3318 <parsePreset+0x898>)
    30d8:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    30da:	4b90      	ldr	r3, [pc, #576]	; (331c <parsePreset+0x89c>)
    30dc:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoPulseSetShape;
    30de:	4b90      	ldr	r3, [pc, #576]	; (3320 <parsePreset+0x8a0>)
    30e0:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    30e2:	4b90      	ldr	r3, [pc, #576]	; (3324 <parsePreset+0x8a4>)
    30e4:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (int i = 0; i < NUM_LFOS; i++)
    30e6:	4890      	ldr	r0, [pc, #576]	; (3328 <parsePreset+0x8a8>)
    30e8:	4c90      	ldr	r4, [pc, #576]	; (332c <parsePreset+0x8ac>)
    30ea:	f8df c294 	ldr.w	ip, [pc, #660]	; 3380 <parsePreset+0x900>
    30ee:	f100 0810 	add.w	r8, r0, #16
    30f2:	4623      	mov	r3, r4
				  effectSetters[i].setParam2 = &blankFunction;;
    30f4:	f8df e28c 	ldr.w	lr, [pc, #652]	; 3384 <parsePreset+0x904>
				  effectTick[i] = FXVZhighshelfTick;
    30f8:	9203      	str	r2, [sp, #12]
		FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    30fa:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    30fe:	eddc 7a00 	vldr	s15, [ip]
    3102:	ee67 7a87 	vmul.f32	s15, s15, s14
    3106:	fef8 7a67 	vrinta.f32	s15, s15
    310a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    310e:	edcd 7a01 	vstr	s15, [sp, #4]
		switch (effectType)
    3112:	f89d 1004 	ldrb.w	r1, [sp, #4]
    3116:	2913      	cmp	r1, #19
    3118:	d81f      	bhi.n	315a <parsePreset+0x6da>
    311a:	e8df f011 	tbh	[pc, r1, lsl #1]
    311e:	0395      	.short	0x0395
    3120:	037b0388 	.word	0x037b0388
    3124:	03730377 	.word	0x03730377
    3128:	029d02e2 	.word	0x029d02e2
    312c:	02880290 	.word	0x02880290
    3130:	026e027b 	.word	0x026e027b
    3134:	02580263 	.word	0x02580263
    3138:	02cb024d 	.word	0x02cb024d
    313c:	02b502c0 	.word	0x02b502c0
    3140:	02d602aa 	.word	0x02d602aa
    3144:	0014      	.short	0x0014
				  effectTick[i] = &FXLadderLowpassTick;
    3146:	497a      	ldr	r1, [pc, #488]	; (3330 <parsePreset+0x8b0>)
    3148:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &FXLadderParam1;;
    314a:	497a      	ldr	r1, [pc, #488]	; (3334 <parsePreset+0x8b4>)
				  effectSetters[i].setParam5 = &blankFunction;;
    314c:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectSetters[i].setParam2 = &blankFunction;;
    3150:	e9c3 1e00 	strd	r1, lr, [r3]
				  effectSetters[i].setParam3 = &FXLadderParam3;;
    3154:	4978      	ldr	r1, [pc, #480]	; (3338 <parsePreset+0x8b8>)
				  effectSetters[i].setParam4 = &blankFunction;;
    3156:	e9c3 1e02 	strd	r1, lr, [r3, #8]
	for (int i = 0; i < NUM_EFFECT; i++)
    315a:	3004      	adds	r0, #4
    315c:	f10c 0ca0 	add.w	ip, ip, #160	; 0xa0
    3160:	3314      	adds	r3, #20
    3162:	4580      	cmp	r8, r0
    3164:	d1c9      	bne.n	30fa <parsePreset+0x67a>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    3166:	4b75      	ldr	r3, [pc, #468]	; (333c <parsePreset+0x8bc>)
	params[OutputAmp].setParam = &setAmp;
    3168:	f04f 0801 	mov.w	r8, #1
	params[Effect1PostGain].setParam = &fxPostGainSet;
    316c:	4974      	ldr	r1, [pc, #464]	; (3340 <parsePreset+0x8c0>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    316e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    3172:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    3176:	f8c5 3408 	str.w	r3, [r5, #1032]	; 0x408
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    317a:	4b72      	ldr	r3, [pc, #456]	; (3344 <parsePreset+0x8c4>)
	params[Effect1Mix].setParam = &fxMixSet;
    317c:	4872      	ldr	r0, [pc, #456]	; (3348 <parsePreset+0x8c8>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    317e:	f8c5 3264 	str.w	r3, [r5, #612]	; 0x264
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    3182:	f8c5 3368 	str.w	r3, [r5, #872]	; 0x368
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    3186:	f8c5 346c 	str.w	r3, [r5, #1132]	; 0x46c
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    318a:	6823      	ldr	r3, [r4, #0]
	params[Effect1Mix].setParam = &fxMixSet;
    318c:	9a03      	ldr	r2, [sp, #12]
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    318e:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    3192:	6863      	ldr	r3, [r4, #4]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    3194:	f8c5 1584 	str.w	r1, [r5, #1412]	; 0x584
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    3198:	f8c5 3520 	str.w	r3, [r5, #1312]	; 0x520
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    319c:	68a3      	ldr	r3, [r4, #8]
	params[Effect1Mix].setParam = &fxMixSet;
    319e:	f8c5 0570 	str.w	r0, [r5, #1392]	; 0x570
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    31a2:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    31a6:	68e3      	ldr	r3, [r4, #12]
    31a8:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    31ac:	6923      	ldr	r3, [r4, #16]
    31ae:	f8c5 355c 	str.w	r3, [r5, #1372]	; 0x55c
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    31b2:	6963      	ldr	r3, [r4, #20]
    31b4:	f8c5 35ac 	str.w	r3, [r5, #1452]	; 0x5ac
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    31b8:	69a3      	ldr	r3, [r4, #24]
    31ba:	f8c5 35c0 	str.w	r3, [r5, #1472]	; 0x5c0
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    31be:	69e3      	ldr	r3, [r4, #28]
    31c0:	f8c5 35d4 	str.w	r3, [r5, #1492]	; 0x5d4
	params[NoiseTilt].setParam = &noiseSetTilt;
    31c4:	4b61      	ldr	r3, [pc, #388]	; (334c <parsePreset+0x8cc>)
    31c6:	f8c5 3188 	str.w	r3, [r5, #392]	; 0x188
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    31ca:	4b61      	ldr	r3, [pc, #388]	; (3350 <parsePreset+0x8d0>)
    31cc:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	params[NoisePeakGain].setParam  = &noiseSetGain;
    31d0:	4b60      	ldr	r3, [pc, #384]	; (3354 <parsePreset+0x8d4>)
    31d2:	f8c5 319c 	str.w	r3, [r5, #412]	; 0x19c
	params[Master].setParam = &setMaster;
    31d6:	4b60      	ldr	r3, [pc, #384]	; (3358 <parsePreset+0x8d8>)
    31d8:	636b      	str	r3, [r5, #52]	; 0x34
	params[Transpose].setParam = &setTranspose;
    31da:	4b60      	ldr	r3, [pc, #384]	; (335c <parsePreset+0x8dc>)
    31dc:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
	params[PitchBendRange].setParam = &setPitchBendRange;
    31e0:	4b5f      	ldr	r3, [pc, #380]	; (3360 <parsePreset+0x8e0>)
    31e2:	f8c5 3160 	str.w	r3, [r5, #352]	; 0x160
	params[OutputTone].setParam = &setFinalLowpass;
    31e6:	4b5f      	ldr	r3, [pc, #380]	; (3364 <parsePreset+0x8e4>)
    31e8:	f8c5 3c00 	str.w	r3, [r5, #3072]	; 0xc00
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    31ec:	6a23      	ldr	r3, [r4, #32]
	params[Effect2PostGain].setParam = &fxPostGainSet;
    31ee:	f8c5 1624 	str.w	r1, [r5, #1572]	; 0x624
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    31f2:	f8c5 35e8 	str.w	r3, [r5, #1512]	; 0x5e8
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    31f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
	params[Effect3PostGain].setParam = &fxPostGainSet;
    31f8:	f8c5 16c4 	str.w	r1, [r5, #1732]	; 0x6c4
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    31fc:	f8c5 35fc 	str.w	r3, [r5, #1532]	; 0x5fc
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    3200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	params[Effect4PostGain].setParam = &fxPostGainSet;
    3202:	f8c5 1764 	str.w	r1, [r5, #1892]	; 0x764
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    3206:	f8c5 364c 	str.w	r3, [r5, #1612]	; 0x64c
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    320a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	params[Effect2Mix].setParam = &fxMixSet;
    320c:	f8c5 0610 	str.w	r0, [r5, #1552]	; 0x610
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    3210:	f8c5 3660 	str.w	r3, [r5, #1632]	; 0x660
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    3214:	6b23      	ldr	r3, [r4, #48]	; 0x30
	params[Effect3Mix].setParam = &fxMixSet;
    3216:	f8c5 06b0 	str.w	r0, [r5, #1712]	; 0x6b0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    321a:	f8c5 3674 	str.w	r3, [r5, #1652]	; 0x674
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    321e:	6b63      	ldr	r3, [r4, #52]	; 0x34
	params[Effect4Mix].setParam = &fxMixSet;
    3220:	f8c5 0750 	str.w	r0, [r5, #1872]	; 0x750
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    3224:	f8c5 3688 	str.w	r3, [r5, #1672]	; 0x688
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    3228:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    322a:	494f      	ldr	r1, [pc, #316]	; (3368 <parsePreset+0x8e8>)
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    322c:	f8c5 369c 	str.w	r3, [r5, #1692]	; 0x69c
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    3230:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3232:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    3236:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3238:	f8c5 3700 	str.w	r3, [r5, #1792]	; 0x700
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    323c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    323e:	f8c5 3714 	str.w	r3, [r5, #1812]	; 0x714
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    3242:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3244:	f8c5 3728 	str.w	r3, [r5, #1832]	; 0x728
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    3248:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
		params[i].objectNumber = 0;
    324a:	2400      	movs	r4, #0
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    324c:	f8c5 373c 	str.w	r3, [r5, #1852]	; 0x73c
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    3250:	683b      	ldr	r3, [r7, #0]
    3252:	f8c5 37c8 	str.w	r3, [r5, #1992]	; 0x7c8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    3256:	687b      	ldr	r3, [r7, #4]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    3258:	f8c5 187c 	str.w	r1, [r5, #2172]	; 0x87c
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    325c:	f8c5 37b4 	str.w	r3, [r5, #1972]	; 0x7b4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    3260:	68bb      	ldr	r3, [r7, #8]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    3262:	f8c5 18f4 	str.w	r1, [r5, #2292]	; 0x8f4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    3266:	f8c5 3840 	str.w	r3, [r5, #2112]	; 0x840
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    326a:	68fb      	ldr	r3, [r7, #12]
			params[i].objectNumber = 2;
    326c:	2702      	movs	r7, #2
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    326e:	f8c5 196c 	str.w	r1, [r5, #2412]	; 0x96c
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    3272:	f8c5 382c 	str.w	r3, [r5, #2092]	; 0x82c
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    3276:	4b3d      	ldr	r3, [pc, #244]	; (336c <parsePreset+0x8ec>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    3278:	f8c5 19e4 	str.w	r1, [r5, #2532]	; 0x9e4
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    327c:	f8c5 3890 	str.w	r3, [r5, #2192]	; 0x890
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    3280:	f8c5 3908 	str.w	r3, [r5, #2312]	; 0x908
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    3284:	f8c5 3980 	str.w	r3, [r5, #2432]	; 0x980
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    3288:	f8c5 39f8 	str.w	r3, [r5, #2552]	; 0x9f8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    328c:	4b38      	ldr	r3, [pc, #224]	; (3370 <parsePreset+0x8f0>)
	params[OutputAmp].setParam = &setAmp;
    328e:	4939      	ldr	r1, [pc, #228]	; (3374 <parsePreset+0x8f4>)
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    3290:	f8c5 38a4 	str.w	r3, [r5, #2212]	; 0x8a4
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    3294:	f8c5 391c 	str.w	r3, [r5, #2332]	; 0x91c
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    3298:	f8c5 3994 	str.w	r3, [r5, #2452]	; 0x994
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    329c:	f8c5 3a0c 	str.w	r3, [r5, #2572]	; 0xa0c
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    32a0:	4b35      	ldr	r3, [pc, #212]	; (3378 <parsePreset+0x8f8>)
    32a2:	f8c5 38b8 	str.w	r3, [r5, #2232]	; 0x8b8
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    32a6:	f8c5 3930 	str.w	r3, [r5, #2352]	; 0x930
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    32aa:	f8c5 39a8 	str.w	r3, [r5, #2472]	; 0x9a8
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    32ae:	f8c5 3a20 	str.w	r3, [r5, #2592]	; 0xa20
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    32b2:	4b32      	ldr	r3, [pc, #200]	; (337c <parsePreset+0x8fc>)
    32b4:	f8c5 38cc 	str.w	r3, [r5, #2252]	; 0x8cc
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    32b8:	f8c5 3944 	str.w	r3, [r5, #2372]	; 0x944
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    32bc:	f8c5 39bc 	str.w	r3, [r5, #2492]	; 0x9bc
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    32c0:	f8c5 3a34 	str.w	r3, [r5, #2612]	; 0xa34
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    32c4:	6813      	ldr	r3, [r2, #0]
    32c6:	f8c5 3a5c 	str.w	r3, [r5, #2652]	; 0xa5c
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    32ca:	68d3      	ldr	r3, [r2, #12]
    32cc:	f8c5 3ac0 	str.w	r3, [r5, #2752]	; 0xac0
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    32d0:	6993      	ldr	r3, [r2, #24]
    32d2:	f8c5 3b24 	str.w	r3, [r5, #2852]	; 0xb24
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    32d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
	params[OutputAmp].setParam = &setAmp;
    32d8:	f8c5 1bec 	str.w	r1, [r5, #3052]	; 0xbec
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    32dc:	f8c5 3b88 	str.w	r3, [r5, #2952]	; 0xb88
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    32e0:	6853      	ldr	r3, [r2, #4]
    32e2:	f8c5 3a70 	str.w	r3, [r5, #2672]	; 0xa70
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    32e6:	6913      	ldr	r3, [r2, #16]
    32e8:	f8c5 3ad4 	str.w	r3, [r5, #2772]	; 0xad4
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    32ec:	69d3      	ldr	r3, [r2, #28]
    32ee:	f8c5 3b38 	str.w	r3, [r5, #2872]	; 0xb38
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    32f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    32f4:	f8c5 3b9c 	str.w	r3, [r5, #2972]	; 0xb9c
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    32f8:	6893      	ldr	r3, [r2, #8]
    32fa:	f8c5 3a84 	str.w	r3, [r5, #2692]	; 0xa84
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    32fe:	6953      	ldr	r3, [r2, #20]
    3300:	f8c5 3ae8 	str.w	r3, [r5, #2792]	; 0xae8
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    3304:	6a13      	ldr	r3, [r2, #32]
    3306:	f8c5 3b4c 	str.w	r3, [r5, #2892]	; 0xb4c
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    330a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    330c:	f8c5 3bb0 	str.w	r3, [r5, #2992]	; 0xbb0
	for (int i = 0; i < NUM_PARAMS; i++)
    3310:	e042      	b.n	3398 <parsePreset+0x918>
    3312:	bf00      	nop
    3314:	2000050c 	.word	0x2000050c
    3318:	24000421 	.word	0x24000421
    331c:	24000489 	.word	0x24000489
    3320:	24000525 	.word	0x24000525
    3324:	240004e9 	.word	0x240004e9
    3328:	20000204 	.word	0x20000204
    332c:	2000a280 	.word	0x2000a280
    3330:	000023e1 	.word	0x000023e1
    3334:	24000775 	.word	0x24000775
    3338:	240008fd 	.word	0x240008fd
    333c:	00000c81 	.word	0x00000c81
    3340:	00001d21 	.word	0x00001d21
    3344:	00000ce1 	.word	0x00000ce1
    3348:	00001d01 	.word	0x00001d01
    334c:	00002401 	.word	0x00002401
    3350:	000024a1 	.word	0x000024a1
    3354:	00002461 	.word	0x00002461
    3358:	00001281 	.word	0x00001281
    335c:	000012a1 	.word	0x000012a1
    3360:	000012c1 	.word	0x000012c1
    3364:	000012e1 	.word	0x000012e1
    3368:	000011a1 	.word	0x000011a1
    336c:	000011c1 	.word	0x000011c1
    3370:	000011e1 	.word	0x000011e1
    3374:	00001261 	.word	0x00001261
    3378:	00001201 	.word	0x00001201
    337c:	00001221 	.word	0x00001221
    3380:	2000efb0 	.word	0x2000efb0
    3384:	24001195 	.word	0x24001195
    3388:	42fe0000 	.word	0x42fe0000
    338c:	3c010204 	.word	0x3c010204
    3390:	f109 0914 	add.w	r9, r9, #20
    3394:	f108 0801 	add.w	r8, r8, #1
		if ((i >= Osc1) && (i < Osc2))
    3398:	f1a8 0319 	sub.w	r3, r8, #25
		params[i].objectNumber = 0;
    339c:	f889 4010 	strb.w	r4, [r9, #16]
		if ((i >= Osc1) && (i < Osc2))
    33a0:	2b0c      	cmp	r3, #12
    33a2:	d94b      	bls.n	343c <parsePreset+0x9bc>
		else if ((i >= Osc2) && (i < Osc3))
    33a4:	f1a8 0326 	sub.w	r3, r8, #38	; 0x26
    33a8:	2b0c      	cmp	r3, #12
    33aa:	f240 848c 	bls.w	3cc6 <parsePreset+0x1246>
		else if ((i >= Osc3) && (i < Effect1FXType))
    33ae:	f1a8 0333 	sub.w	r3, r8, #51	; 0x33
    33b2:	2b0c      	cmp	r3, #12
    33b4:	f240 847c 	bls.w	3cb0 <parsePreset+0x1230>
		else if ((i >= Filter1) && (i < Filter2))
    33b8:	f1a8 0360 	sub.w	r3, r8, #96	; 0x60
    33bc:	2b05      	cmp	r3, #5
    33be:	d93d      	bls.n	343c <parsePreset+0x9bc>
		else if ((i >= Filter2) && (i < Envelope1Attack))
    33c0:	f1a8 0366 	sub.w	r3, r8, #102	; 0x66
    33c4:	2b06      	cmp	r3, #6
    33c6:	f240 847e 	bls.w	3cc6 <parsePreset+0x1246>
		else if ((i >= Envelope1Attack) && (i < Envelope2Attack))
    33ca:	f1a8 036d 	sub.w	r3, r8, #109	; 0x6d
    33ce:	2b05      	cmp	r3, #5
    33d0:	d934      	bls.n	343c <parsePreset+0x9bc>
		else if ((i >= Envelope2Attack) && (i < Envelope3Attack))
    33d2:	f1a8 0373 	sub.w	r3, r8, #115	; 0x73
    33d6:	2b05      	cmp	r3, #5
    33d8:	f240 8475 	bls.w	3cc6 <parsePreset+0x1246>
		else if ((i >= Envelope3Attack) && (i < Envelope4Attack))
    33dc:	f1a8 0379 	sub.w	r3, r8, #121	; 0x79
    33e0:	2b05      	cmp	r3, #5
    33e2:	f240 8465 	bls.w	3cb0 <parsePreset+0x1230>
		else if ((i >= Envelope4Attack) && (i < LFO1Rate))
    33e6:	f1a8 037f 	sub.w	r3, r8, #127	; 0x7f
    33ea:	2b05      	cmp	r3, #5
    33ec:	f240 846f 	bls.w	3cce <parsePreset+0x124e>
		else if ((i >= LFO1Rate) && (i < LFO2Rate))
    33f0:	f1a8 0385 	sub.w	r3, r8, #133	; 0x85
    33f4:	2b04      	cmp	r3, #4
    33f6:	d921      	bls.n	343c <parsePreset+0x9bc>
		else if ((i >= LFO2Rate) && (i < LFO3Rate))
    33f8:	f1a8 038a 	sub.w	r3, r8, #138	; 0x8a
    33fc:	2b04      	cmp	r3, #4
    33fe:	f240 8462 	bls.w	3cc6 <parsePreset+0x1246>
		else if ((i >= LFO3Rate) && (i < LFO4Rate))
    3402:	f1a8 038f 	sub.w	r3, r8, #143	; 0x8f
    3406:	2b04      	cmp	r3, #4
    3408:	f240 8452 	bls.w	3cb0 <parsePreset+0x1230>
		else if ((i >= LFO4Rate) && (i < OutputAmp))
    340c:	f1a8 0394 	sub.w	r3, r8, #148	; 0x94
    3410:	2b04      	cmp	r3, #4
    3412:	f240 845c 	bls.w	3cce <parsePreset+0x124e>
		else if ((i >= Effect1FXType) && (i < Effect2FXType))
    3416:	f1a8 0340 	sub.w	r3, r8, #64	; 0x40
    341a:	2b07      	cmp	r3, #7
    341c:	d90e      	bls.n	343c <parsePreset+0x9bc>
		else if ((i >= Effect2FXType) && (i < Effect3FXType))
    341e:	f1a8 0348 	sub.w	r3, r8, #72	; 0x48
    3422:	2b07      	cmp	r3, #7
    3424:	f240 844f 	bls.w	3cc6 <parsePreset+0x1246>
		else if ((i >= Effect3FXType) && (i < Effect4FXType))
    3428:	f1a8 0350 	sub.w	r3, r8, #80	; 0x50
    342c:	2b07      	cmp	r3, #7
    342e:	f240 843f 	bls.w	3cb0 <parsePreset+0x1230>
		else if ((i >= Effect4FXType) && (i < Filter1))
    3432:	f1a8 0358 	sub.w	r3, r8, #88	; 0x58
    3436:	2b07      	cmp	r3, #7
    3438:	f240 8449 	bls.w	3cce <parsePreset+0x124e>
		params[i].setParam(params[i].realVal, params[i].objectNumber);
    343c:	f8d9 300c 	ldr.w	r3, [r9, #12]
    3440:	2000      	movs	r0, #0
    3442:	ed99 0a01 	vldr	s0, [r9, #4]
    3446:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    3448:	f1b8 0f9b 	cmp.w	r8, #155	; 0x9b
    344c:	d1a0      	bne.n	3390 <parsePreset+0x910>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal*127.0f) - (params[MIDIKeyMin].realVal*127.0f));
    344e:	edd5 7a06 	vldr	s15, [r5, #24]
	numMappings = 0;
    3452:	2200      	movs	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal*127.0f) - (params[MIDIKeyMin].realVal*127.0f));
    3454:	ed95 7a01 	vldr	s14, [r5, #4]
		mappings[i].destNumber = 255;
    3458:	21ff      	movs	r1, #255	; 0xff
	midiKeySubtractor = (params[MIDIKeyMin].realVal * 127.0f);
    345a:	ed5f 6a35 	vldr	s13, [pc, #-212]	; 3388 <parsePreset+0x908>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal*127.0f) - (params[MIDIKeyMin].realVal*127.0f));
    345e:	ee37 7a67 	vsub.f32	s14, s14, s15
    3462:	ed1f 6a36 	vldr	s12, [pc, #-216]	; 338c <parsePreset+0x90c>
	midiKeySubtractor = (params[MIDIKeyMin].realVal * 127.0f);
    3466:	ee67 7aa6 	vmul.f32	s15, s15, s13
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal*127.0f) - (params[MIDIKeyMin].realVal*127.0f));
    346a:	4ba4      	ldr	r3, [pc, #656]	; (36fc <parsePreset+0xc7c>)
    346c:	f8df e390 	ldr.w	lr, [pc, #912]	; 3800 <parsePreset+0xd80>
    3470:	eec6 6a07 	vdiv.f32	s13, s12, s14
    3474:	f50e 60d0 	add.w	r0, lr, #1664	; 0x680
    3478:	edc3 6a00 	vstr	s13, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal * 127.0f);
    347c:	4ba0      	ldr	r3, [pc, #640]	; (3700 <parsePreset+0xc80>)
    347e:	edc3 7a00 	vstr	s15, [r3]
	numMappings = 0;
    3482:	4ba0      	ldr	r3, [pc, #640]	; (3704 <parsePreset+0xc84>)
    3484:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
    3486:	4ba0      	ldr	r3, [pc, #640]	; (3708 <parsePreset+0xc88>)
    3488:	601a      	str	r2, [r3, #0]
    348a:	4673      	mov	r3, lr
		mappings[i].destNumber = 255;
    348c:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    348e:	3334      	adds	r3, #52	; 0x34
		mappings[i].numHooks = 0;
    3490:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    3494:	4298      	cmp	r0, r3
    3496:	d1f9      	bne.n	348c <parsePreset+0xa0c>
	for (int i = 0; i < mappingCount; i++)
    3498:	f1ba 0f00 	cmp.w	sl, #0
    349c:	d07e      	beq.n	359c <parsePreset+0xb1c>
    349e:	9b02      	ldr	r3, [sp, #8]
    34a0:	f04f 0a00 	mov.w	sl, #0
			mappings[whichMapping].scalarSourceValPtr[whichHook] = &defaultScaling;
    34a4:	9501      	str	r5, [sp, #4]
				foundOne = 1;
    34a6:	f04f 0801 	mov.w	r8, #1
    34aa:	4433      	add	r3, r6
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    34ac:	ed9f 7a97 	vldr	s14, [pc, #604]	; 370c <parsePreset+0xc8c>
			mappings[whichMapping].destNumber = destNumber;
    34b0:	f04f 0934 	mov.w	r9, #52	; 0x34
    34b4:	b29b      	uxth	r3, r3
			mappings[whichMapping].scalarSourceValPtr[whichHook] = &defaultScaling;
    34b6:	461d      	mov	r5, r3
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    34b8:	2300      	movs	r3, #0
		uint8_t destNumber = buffer[bufferIndex+1];
    34ba:	eb0b 0206 	add.w	r2, fp, r6
		uint8_t foundOne = 0;
    34be:	461f      	mov	r7, r3
		uint8_t destNumber = buffer[bufferIndex+1];
    34c0:	7850      	ldrb	r0, [r2, #1]
		uint8_t whichHook = 0;
    34c2:	469c      	mov	ip, r3
		uint8_t destNumber = buffer[bufferIndex+1];
    34c4:	4672      	mov	r2, lr
		uint8_t whichMapping = 0;
    34c6:	461c      	mov	r4, r3
			if (mappings[j].destNumber == destNumber)
    34c8:	7811      	ldrb	r1, [r2, #0]
    34ca:	4281      	cmp	r1, r0
    34cc:	d103      	bne.n	34d6 <parsePreset+0xa56>
				whichHook = mappings[j].numHooks;
    34ce:	f892 c030 	ldrb.w	ip, [r2, #48]	; 0x30
    34d2:	b2dc      	uxtb	r4, r3
				foundOne = 1;
    34d4:	2701      	movs	r7, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    34d6:	3301      	adds	r3, #1
    34d8:	3234      	adds	r2, #52	; 0x34
    34da:	2b20      	cmp	r3, #32
    34dc:	d1f4      	bne.n	34c8 <parsePreset+0xa48>
		if (foundOne == 0)
    34de:	2f00      	cmp	r7, #0
    34e0:	f000 83c9 	beq.w	3c76 <parsePreset+0x11f6>
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    34e4:	4667      	mov	r7, ip
		int source = buffer[bufferIndex];
    34e6:	f81b 2006 	ldrb.w	r2, [fp, r6]
		mappings[whichMapping].sourceValPtr[whichHook] = &sourceValues[source];
    34ea:	eb04 0344 	add.w	r3, r4, r4, lsl #1
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    34ee:	fb09 e104 	mla	r1, r9, r4, lr
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    34f2:	2a0b      	cmp	r2, #11
		mappings[whichMapping].sourceValPtr[whichHook] = &sourceValues[source];
    34f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    34f8:	4439      	add	r1, r7
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    34fa:	bfcc      	ite	gt
    34fc:	4640      	movgt	r0, r8
    34fe:	2000      	movle	r0, #0
		mappings[whichMapping].sourceValPtr[whichHook] = &sourceValues[source];
    3500:	443b      	add	r3, r7
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    3502:	7508      	strb	r0, [r1, #20]
		mappings[whichMapping].sourceValPtr[whichHook] = &sourceValues[source];
    3504:	4982      	ldr	r1, [pc, #520]	; (3710 <parsePreset+0xc90>)
    3506:	3302      	adds	r3, #2
    3508:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    350c:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3510:	f1a2 0118 	sub.w	r1, r2, #24
		mappings[whichMapping].sourceValPtr[whichHook] = &sourceValues[source];
    3514:	0063      	lsls	r3, r4, #1
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3516:	2903      	cmp	r1, #3
    3518:	d803      	bhi.n	3522 <parsePreset+0xaa2>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    351a:	497b      	ldr	r1, [pc, #492]	; (3708 <parsePreset+0xc88>)
    351c:	440a      	add	r2, r1
    351e:	f802 8c18 	strb.w	r8, [r2, #-24]
		int scalar = buffer[bufferIndex+2];
    3522:	eb0b 0206 	add.w	r2, fp, r6
    3526:	7891      	ldrb	r1, [r2, #2]
			mappings[whichMapping].scalarSourceValPtr[whichHook] = &defaultScaling;
    3528:	191a      	adds	r2, r3, r4
    352a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		if (scalar == 0xff)
    352e:	29ff      	cmp	r1, #255	; 0xff
			mappings[whichMapping].scalarSourceValPtr[whichHook] = &defaultScaling;
    3530:	443a      	add	r2, r7
    3532:	f102 0206 	add.w	r2, r2, #6
		if (scalar == 0xff)
    3536:	f000 83b0 	beq.w	3c9a <parsePreset+0x121a>
			mappings[whichMapping].scalarSourceValPtr[whichHook] = &sourceValues[buffer[bufferIndex+2]];
    353a:	4875      	ldr	r0, [pc, #468]	; (3710 <parsePreset+0xc90>)
    353c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    3540:	f84e 0022 	str.w	r0, [lr, r2, lsl #2]
			if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3544:	f1a1 0218 	sub.w	r2, r1, #24
    3548:	2a03      	cmp	r2, #3
    354a:	d803      	bhi.n	3554 <parsePreset+0xad4>
				lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    354c:	4a6e      	ldr	r2, [pc, #440]	; (3708 <parsePreset+0xc88>)
    354e:	4411      	add	r1, r2
    3550:	f801 8c18 	strb.w	r8, [r1, #-24]
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    3554:	eb0b 0106 	add.w	r1, fp, r6
		mappings[whichMapping].amount[whichHook] = amountFloat;
    3558:	4423      	add	r3, r4
		bufferIndex += 5;
    355a:	3605      	adds	r6, #5
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    355c:	78c8      	ldrb	r0, [r1, #3]
		mappings[whichMapping].amount[whichHook] = amountFloat;
    355e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    3562:	790a      	ldrb	r2, [r1, #4]
		mappings[whichMapping].numHooks++;
    3564:	fb09 e404 	mla	r4, r9, r4, lr
		mappings[whichMapping].amount[whichHook] = amountFloat;
    3568:	443b      	add	r3, r7
		bufferIndex += 5;
    356a:	b2b6      	uxth	r6, r6
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    356c:	eb02 2200 	add.w	r2, r2, r0, lsl #8
		mappings[whichMapping].amount[whichHook] = amountFloat;
    3570:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
	for (int i = 0; i < mappingCount; i++)
    3574:	42ae      	cmp	r6, r5
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    3576:	b212      	sxth	r2, r2
    3578:	ee07 2a90 	vmov	s15, r2
    357c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3580:	ee67 7a87 	vmul.f32	s15, s15, s14
		mappings[whichMapping].amount[whichHook] = amountFloat;
    3584:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		mappings[whichMapping].numHooks++;
    3588:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    358c:	f103 0301 	add.w	r3, r3, #1
    3590:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	for (int i = 0; i < mappingCount; i++)
    3594:	d190      	bne.n	34b8 <parsePreset+0xa38>
    3596:	4b5b      	ldr	r3, [pc, #364]	; (3704 <parsePreset+0xc84>)
    3598:	f883 a000 	strb.w	sl, [r3]
	presetWaitingToParse = 0;
    359c:	4b5d      	ldr	r3, [pc, #372]	; (3714 <parsePreset+0xc94>)
    359e:	2200      	movs	r2, #0
	audioMasterLevel = 1.0f;
    35a0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    35a4:	485c      	ldr	r0, [pc, #368]	; (3718 <parsePreset+0xc98>)
	presetWaitingToParse = 0;
    35a6:	601a      	str	r2, [r3, #0]
	currentActivePreset = presetNumber;
    35a8:	4b5c      	ldr	r3, [pc, #368]	; (371c <parsePreset+0xc9c>)
    35aa:	9a05      	ldr	r2, [sp, #20]
	audioMasterLevel = 1.0f;
    35ac:	6001      	str	r1, [r0, #0]
	currentActivePreset = presetNumber;
    35ae:	701a      	strb	r2, [r3, #0]
    35b0:	b662      	cpsie	i
}
    35b2:	b007      	add	sp, #28
    35b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				  effectTick[i] = &FXbandpassTick;
    35b8:	4959      	ldr	r1, [pc, #356]	; (3720 <parsePreset+0xca0>)
				  effectSetters[i].setParam2 = &blankFunction;
    35ba:	f8c3 e004 	str.w	lr, [r3, #4]
				  effectTick[i] = &FXbandpassTick;
    35be:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &FXBandpassParam1;
    35c0:	4958      	ldr	r1, [pc, #352]	; (3724 <parsePreset+0xca4>)
    35c2:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
    35c4:	4958      	ldr	r1, [pc, #352]	; (3728 <parsePreset+0xca8>)
				  effectSetters[i].setParam5 = &blankFunction;
    35c6:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
    35ca:	6099      	str	r1, [r3, #8]
				  break;
    35cc:	e5c5      	b.n	315a <parsePreset+0x6da>
				  effectTick[i] = &FXhighpassTick;
    35ce:	4957      	ldr	r1, [pc, #348]	; (372c <parsePreset+0xcac>)
				  effectSetters[i].setParam2 = &blankFunction;
    35d0:	f8c3 e004 	str.w	lr, [r3, #4]
				  effectTick[i] = &FXhighpassTick;
    35d4:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &FXHighpassParam1;
    35d6:	4956      	ldr	r1, [pc, #344]	; (3730 <parsePreset+0xcb0>)
    35d8:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
    35da:	4956      	ldr	r1, [pc, #344]	; (3734 <parsePreset+0xcb4>)
				  effectSetters[i].setParam5 = &blankFunction;
    35dc:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
    35e0:	6099      	str	r1, [r3, #8]
				  break;
    35e2:	e5ba      	b.n	315a <parsePreset+0x6da>
				  effectTick[i] = &FXlowpassTick;
    35e4:	4954      	ldr	r1, [pc, #336]	; (3738 <parsePreset+0xcb8>)
				  effectSetters[i].setParam2 = &blankFunction;
    35e6:	f8c3 e004 	str.w	lr, [r3, #4]
				  effectTick[i] = &FXlowpassTick;
    35ea:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &FXLowpassParam1;
    35ec:	4953      	ldr	r1, [pc, #332]	; (373c <parsePreset+0xcbc>)
    35ee:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
    35f0:	4953      	ldr	r1, [pc, #332]	; (3740 <parsePreset+0xcc0>)
				  effectSetters[i].setParam5 = &blankFunction;;
    35f2:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
    35f6:	6099      	str	r1, [r3, #8]
				  break;
    35f8:	e5af      	b.n	315a <parsePreset+0x6da>
				  effectTick[i] = &wavefolderTick;
    35fa:	4952      	ldr	r1, [pc, #328]	; (3744 <parsePreset+0xcc4>)
    35fc:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &wavefolderParam1;
    35fe:	4952      	ldr	r1, [pc, #328]	; (3748 <parsePreset+0xcc8>)
    3600:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
    3602:	4952      	ldr	r1, [pc, #328]	; (374c <parsePreset+0xccc>)
    3604:	6059      	str	r1, [r3, #4]
				  effectSetters[i].setParam3 = &wavefolderParam3;
    3606:	4952      	ldr	r1, [pc, #328]	; (3750 <parsePreset+0xcd0>)
    3608:	6099      	str	r1, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    360a:	4952      	ldr	r1, [pc, #328]	; (3754 <parsePreset+0xcd4>)
    360c:	60d9      	str	r1, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
    360e:	4952      	ldr	r1, [pc, #328]	; (3758 <parsePreset+0xcd8>)
    3610:	6119      	str	r1, [r3, #16]
				  break;
    3612:	e5a2      	b.n	315a <parsePreset+0x6da>
				  effectTick[i] = &tiltFilterTick;
    3614:	4951      	ldr	r1, [pc, #324]	; (375c <parsePreset+0xcdc>)
    3616:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &tiltParam1;
    3618:	4951      	ldr	r1, [pc, #324]	; (3760 <parsePreset+0xce0>)
    361a:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam2 = &tiltParam2;
    361c:	4951      	ldr	r1, [pc, #324]	; (3764 <parsePreset+0xce4>)
    361e:	6059      	str	r1, [r3, #4]
				  effectSetters[i].setParam3 = &tiltParam3;
    3620:	4951      	ldr	r1, [pc, #324]	; (3768 <parsePreset+0xce8>)
    3622:	6099      	str	r1, [r3, #8]
				  effectSetters[i].setParam4 = &tiltParam4;
    3624:	4951      	ldr	r1, [pc, #324]	; (376c <parsePreset+0xcec>)
    3626:	60d9      	str	r1, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
    3628:	494b      	ldr	r1, [pc, #300]	; (3758 <parsePreset+0xcd8>)
    362a:	6119      	str	r1, [r3, #16]
				  break;
    362c:	e595      	b.n	315a <parsePreset+0x6da>
				  effectTick[i] = &bcTick;
    362e:	4950      	ldr	r1, [pc, #320]	; (3770 <parsePreset+0xcf0>)
    3630:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
    3632:	4950      	ldr	r1, [pc, #320]	; (3774 <parsePreset+0xcf4>)
    3634:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam2 = &param2Linear;
    3636:	4950      	ldr	r1, [pc, #320]	; (3778 <parsePreset+0xcf8>)
    3638:	6059      	str	r1, [r3, #4]
				  effectSetters[i].setParam3 = &param3BC;
    363a:	4950      	ldr	r1, [pc, #320]	; (377c <parsePreset+0xcfc>)
    363c:	e7e4      	b.n	3608 <parsePreset+0xb88>
				  effectTick[i] = &chorusTick;
    363e:	4950      	ldr	r1, [pc, #320]	; (3780 <parsePreset+0xd00>)
				  effectSetters[i].setParam5 = &blankFunction;
    3640:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectTick[i] = &chorusTick;
    3644:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &chorusParam1;
    3646:	494f      	ldr	r1, [pc, #316]	; (3784 <parsePreset+0xd04>)
    3648:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam2 = &chorusParam2;
    364a:	494f      	ldr	r1, [pc, #316]	; (3788 <parsePreset+0xd08>)
    364c:	6059      	str	r1, [r3, #4]
				  effectSetters[i].setParam3 = &chorusParam3;
    364e:	494f      	ldr	r1, [pc, #316]	; (378c <parsePreset+0xd0c>)
    3650:	6099      	str	r1, [r3, #8]
				  effectSetters[i].setParam4 = &chorusParam4;
    3652:	494f      	ldr	r1, [pc, #316]	; (3790 <parsePreset+0xd10>)
    3654:	60d9      	str	r1, [r3, #12]
				  break;
    3656:	e580      	b.n	315a <parsePreset+0x6da>
				  effectTick[i] = &compressorTick;
    3658:	494e      	ldr	r1, [pc, #312]	; (3794 <parsePreset+0xd14>)
    365a:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &compressorParam1;
    365c:	494e      	ldr	r1, [pc, #312]	; (3798 <parsePreset+0xd18>)
    365e:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam2 = &compressorParam2;
    3660:	494e      	ldr	r1, [pc, #312]	; (379c <parsePreset+0xd1c>)
    3662:	6059      	str	r1, [r3, #4]
				  effectSetters[i].setParam3 = &compressorParam3;
    3664:	494e      	ldr	r1, [pc, #312]	; (37a0 <parsePreset+0xd20>)
    3666:	6099      	str	r1, [r3, #8]
				  effectSetters[i].setParam4 = &compressorParam4;
    3668:	494e      	ldr	r1, [pc, #312]	; (37a4 <parsePreset+0xd24>)
    366a:	60d9      	str	r1, [r3, #12]
				  effectSetters[i].setParam5 = &compressorParam5;
    366c:	494e      	ldr	r1, [pc, #312]	; (37a8 <parsePreset+0xd28>)
    366e:	6119      	str	r1, [r3, #16]
				  break;
    3670:	e573      	b.n	315a <parsePreset+0x6da>
				  effectTick[i] = FXVZhighshelfTick;
    3672:	494e      	ldr	r1, [pc, #312]	; (37ac <parsePreset+0xd2c>)
    3674:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
    3676:	494e      	ldr	r1, [pc, #312]	; (37b0 <parsePreset+0xd30>)
    3678:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
    367a:	494e      	ldr	r1, [pc, #312]	; (37b4 <parsePreset+0xd34>)
    367c:	6059      	str	r1, [r3, #4]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
    367e:	494e      	ldr	r1, [pc, #312]	; (37b8 <parsePreset+0xd38>)
				  effectSetters[i].setParam5 = &blankFunction;;
    3680:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
    3684:	6099      	str	r1, [r3, #8]
				  break;
    3686:	e568      	b.n	315a <parsePreset+0x6da>
				  effectTick[i] = &FXVZlowshelfTick;
    3688:	494c      	ldr	r1, [pc, #304]	; (37bc <parsePreset+0xd3c>)
    368a:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &FXLowShelfParam1;
    368c:	494c      	ldr	r1, [pc, #304]	; (37c0 <parsePreset+0xd40>)
    368e:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam2 = &FXLowShelfParam2;
    3690:	494c      	ldr	r1, [pc, #304]	; (37c4 <parsePreset+0xd44>)
    3692:	6059      	str	r1, [r3, #4]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
    3694:	494c      	ldr	r1, [pc, #304]	; (37c8 <parsePreset+0xd48>)
				  effectSetters[i].setParam5 = &blankFunction;
    3696:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
    369a:	6099      	str	r1, [r3, #8]
				  break;
    369c:	e55d      	b.n	315a <parsePreset+0x6da>
				  effectTick[i] = &FXVZpeakTick;
    369e:	494b      	ldr	r1, [pc, #300]	; (37cc <parsePreset+0xd4c>)
    36a0:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &FXPeakParam1;
    36a2:	494b      	ldr	r1, [pc, #300]	; (37d0 <parsePreset+0xd50>)
    36a4:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam2 = &FXPeakParam2;
    36a6:	494b      	ldr	r1, [pc, #300]	; (37d4 <parsePreset+0xd54>)
    36a8:	6059      	str	r1, [r3, #4]
				  effectSetters[i].setParam3 = &FXPeakParam3;
    36aa:	494b      	ldr	r1, [pc, #300]	; (37d8 <parsePreset+0xd58>)
				  effectSetters[i].setParam5 = &blankFunction;
    36ac:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXPeakParam3;
    36b0:	6099      	str	r1, [r3, #8]
				  break;
    36b2:	e552      	b.n	315a <parsePreset+0x6da>
				  effectTick[i] = &FXdiodeLowpassTick;
    36b4:	4949      	ldr	r1, [pc, #292]	; (37dc <parsePreset+0xd5c>)
				  effectSetters[i].setParam2 = &blankFunction;
    36b6:	f8c3 e004 	str.w	lr, [r3, #4]
				  effectTick[i] = &FXdiodeLowpassTick;
    36ba:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &FXDiodeParam1;
    36bc:	4948      	ldr	r1, [pc, #288]	; (37e0 <parsePreset+0xd60>)
    36be:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
    36c0:	4948      	ldr	r1, [pc, #288]	; (37e4 <parsePreset+0xd64>)
				  effectSetters[i].setParam5 = &blankFunction;
    36c2:	e9c3 ee03 	strd	lr, lr, [r3, #12]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
    36c6:	6099      	str	r1, [r3, #8]
				  break;
    36c8:	e547      	b.n	315a <parsePreset+0x6da>
				  effectTick[i] = FXVZbandrejectTick;
    36ca:	4947      	ldr	r1, [pc, #284]	; (37e8 <parsePreset+0xd68>)
    36cc:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
    36ce:	4947      	ldr	r1, [pc, #284]	; (37ec <parsePreset+0xd6c>)
				  effectSetters[i].setParam5 = &blankFunction;;
    36d0:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
    36d4:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam2 = &FXNotchParam2;;
    36d6:	4946      	ldr	r1, [pc, #280]	; (37f0 <parsePreset+0xd70>)
    36d8:	6059      	str	r1, [r3, #4]
				  effectSetters[i].setParam3 = &FXNotchParam3;;
    36da:	4946      	ldr	r1, [pc, #280]	; (37f4 <parsePreset+0xd74>)
				  effectSetters[i].setParam4 = &blankFunction;;
    36dc:	e9c3 1e02 	strd	r1, lr, [r3, #8]
				  break;
    36e0:	e53b      	b.n	315a <parsePreset+0x6da>
				  effectTick[i] = &shaperTick;
    36e2:	4945      	ldr	r1, [pc, #276]	; (37f8 <parsePreset+0xd78>)
				  effectSetters[i].setParam5 = &blankFunction;
    36e4:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectTick[i] = &tanhTick;
    36e8:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
    36ea:	4922      	ldr	r1, [pc, #136]	; (3774 <parsePreset+0xcf4>)
    36ec:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
    36ee:	4917      	ldr	r1, [pc, #92]	; (374c <parsePreset+0xccc>)
    36f0:	6059      	str	r1, [r3, #4]
				  effectSetters[i].setParam3 = &param3Linear;
    36f2:	4942      	ldr	r1, [pc, #264]	; (37fc <parsePreset+0xd7c>)
    36f4:	6099      	str	r1, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    36f6:	4917      	ldr	r1, [pc, #92]	; (3754 <parsePreset+0xcd4>)
    36f8:	60d9      	str	r1, [r3, #12]
				  break;
    36fa:	e52e      	b.n	315a <parsePreset+0x6da>
    36fc:	2000eab0 	.word	0x2000eab0
    3700:	2000eab4 	.word	0x2000eab4
    3704:	2000eabc 	.word	0x2000eabc
    3708:	200004d8 	.word	0x200004d8
    370c:	37fffffc 	.word	0x37fffffc
    3710:	2000908c 	.word	0x2000908c
    3714:	2000f80c 	.word	0x2000f80c
    3718:	20000024 	.word	0x20000024
    371c:	2000a241 	.word	0x2000a241
    3720:	00002321 	.word	0x00002321
    3724:	240005c5 	.word	0x240005c5
    3728:	2400089d 	.word	0x2400089d
    372c:	00002301 	.word	0x00002301
    3730:	2400057d 	.word	0x2400057d
    3734:	2400088d 	.word	0x2400088d
    3738:	000022e1 	.word	0x000022e1
    373c:	24000535 	.word	0x24000535
    3740:	2400087d 	.word	0x2400087d
    3744:	00001d61 	.word	0x00001d61
    3748:	000018a1 	.word	0x000018a1
    374c:	00001b01 	.word	0x00001b01
    3750:	000018c1 	.word	0x000018c1
    3754:	00001c21 	.word	0x00001c21
    3758:	00001c41 	.word	0x00001c41
    375c:	00002081 	.word	0x00002081
    3760:	00001901 	.word	0x00001901
    3764:	00001961 	.word	0x00001961
    3768:	000019a1 	.word	0x000019a1
    376c:	000019c1 	.word	0x000019c1
    3770:	000022a1 	.word	0x000022a1
    3774:	00001881 	.word	0x00001881
    3778:	00001b21 	.word	0x00001b21
    377c:	00001c81 	.word	0x00001c81
    3780:	00001f41 	.word	0x00001f41
    3784:	00001e81 	.word	0x00001e81
    3788:	00001ea1 	.word	0x00001ea1
    378c:	00001ec1 	.word	0x00001ec1
    3790:	00001f01 	.word	0x00001f01
    3794:	000022c1 	.word	0x000022c1
    3798:	00001a01 	.word	0x00001a01
    379c:	00001a21 	.word	0x00001a21
    37a0:	00001a61 	.word	0x00001a61
    37a4:	00001a81 	.word	0x00001a81
    37a8:	00001ac1 	.word	0x00001ac1
    37ac:	000023a1 	.word	0x000023a1
    37b0:	240006e5 	.word	0x240006e5
    37b4:	2400081d 	.word	0x2400081d
    37b8:	240008dd 	.word	0x240008dd
    37bc:	00002381 	.word	0x00002381
    37c0:	2400069d 	.word	0x2400069d
    37c4:	240007ed 	.word	0x240007ed
    37c8:	240008cd 	.word	0x240008cd
    37cc:	00002361 	.word	0x00002361
    37d0:	24000655 	.word	0x24000655
    37d4:	240007bd 	.word	0x240007bd
    37d8:	240008bd 	.word	0x240008bd
    37dc:	00002341 	.word	0x00002341
    37e0:	2400060d 	.word	0x2400060d
    37e4:	240008ad 	.word	0x240008ad
    37e8:	000023c1 	.word	0x000023c1
    37ec:	2400072d 	.word	0x2400072d
    37f0:	2400084d 	.word	0x2400084d
    37f4:	240008ed 	.word	0x240008ed
    37f8:	00002001 	.word	0x00002001
    37fc:	00001b41 	.word	0x00001b41
    3800:	2000e430 	.word	0x2000e430
				  effectTick[i] = &tanhTick;
    3804:	498a      	ldr	r1, [pc, #552]	; (3a30 <parsePreset+0xfb0>)
				  effectSetters[i].setParam5 = &blankFunction;
    3806:	f8c3 e010 	str.w	lr, [r3, #16]
    380a:	e76d      	b.n	36e8 <parsePreset+0xc68>
				  effectTick[i] = &satTick;
    380c:	4989      	ldr	r1, [pc, #548]	; (3a34 <parsePreset+0xfb4>)
				  effectSetters[i].setParam5 = &blankFunction;
    380e:	f8c3 e010 	str.w	lr, [r3, #16]
    3812:	e769      	b.n	36e8 <parsePreset+0xc68>
				  effectTick[i] = &hardClipTick;
    3814:	4988      	ldr	r1, [pc, #544]	; (3a38 <parsePreset+0xfb8>)
				  effectSetters[i].setParam5 = &blankFunction;
    3816:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectTick[i] = &hardClipTick;
    381a:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
    381c:	4987      	ldr	r1, [pc, #540]	; (3a3c <parsePreset+0xfbc>)
    381e:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
    3820:	4987      	ldr	r1, [pc, #540]	; (3a40 <parsePreset+0xfc0>)
    3822:	6059      	str	r1, [r3, #4]
				  effectSetters[i].setParam3 = &param3Hard;
    3824:	4987      	ldr	r1, [pc, #540]	; (3a44 <parsePreset+0xfc4>)
    3826:	6099      	str	r1, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    3828:	4987      	ldr	r1, [pc, #540]	; (3a48 <parsePreset+0xfc8>)
    382a:	60d9      	str	r1, [r3, #12]
				  break;
    382c:	e495      	b.n	315a <parsePreset+0x6da>
				  effectTick[i] = &softClipTick;
    382e:	4987      	ldr	r1, [pc, #540]	; (3a4c <parsePreset+0xfcc>)
				  effectSetters[i].setParam5 = &blankFunction;
    3830:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectTick[i] = &softClipTick;
    3834:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
    3836:	4981      	ldr	r1, [pc, #516]	; (3a3c <parsePreset+0xfbc>)
    3838:	6019      	str	r1, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
    383a:	4981      	ldr	r1, [pc, #516]	; (3a40 <parsePreset+0xfc0>)
    383c:	6059      	str	r1, [r3, #4]
				  effectSetters[i].setParam3 = &param3Soft;
    383e:	4984      	ldr	r1, [pc, #528]	; (3a50 <parsePreset+0xfd0>)
    3840:	6099      	str	r1, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    3842:	4981      	ldr	r1, [pc, #516]	; (3a48 <parsePreset+0xfc8>)
    3844:	60d9      	str	r1, [r3, #12]
				  break;
    3846:	e488      	b.n	315a <parsePreset+0x6da>
				  effectTick[i] = &blankTick;
    3848:	4982      	ldr	r1, [pc, #520]	; (3a54 <parsePreset+0xfd4>)
				  effectSetters[i].setParam5 = &blankFunction;
    384a:	f8c3 e010 	str.w	lr, [r3, #16]
				  effectTick[i] = &blankTick;
    384e:	6001      	str	r1, [r0, #0]
				  effectSetters[i].setParam2 = &blankFunction;
    3850:	e9c3 ee00 	strd	lr, lr, [r3]
				  effectSetters[i].setParam4 = &blankFunction;
    3854:	e9c3 ee02 	strd	lr, lr, [r3, #8]
				  break;
    3858:	e47f      	b.n	315a <parsePreset+0x6da>
				lfoShapeTick[i] = &lfoSawTick;
    385a:	4b7f      	ldr	r3, [pc, #508]	; (3a58 <parsePreset+0xfd8>)
    385c:	497f      	ldr	r1, [pc, #508]	; (3a5c <parsePreset+0xfdc>)
    385e:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSetRate;
    3860:	4b7f      	ldr	r3, [pc, #508]	; (3a60 <parsePreset+0xfe0>)
    3862:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSetShape;
    3864:	4b7f      	ldr	r3, [pc, #508]	; (3a64 <parsePreset+0xfe4>)
    3866:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    3868:	4b7f      	ldr	r3, [pc, #508]	; (3a68 <parsePreset+0xfe8>)
    386a:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    386c:	e43b      	b.n	30e6 <parsePreset+0x666>
				lfoShapeTick[i] = &lfoTriTick;
    386e:	4b7a      	ldr	r3, [pc, #488]	; (3a58 <parsePreset+0xfd8>)
    3870:	497e      	ldr	r1, [pc, #504]	; (3a6c <parsePreset+0xfec>)
    3872:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoTriSetRate;
    3874:	4b7e      	ldr	r3, [pc, #504]	; (3a70 <parsePreset+0xff0>)
    3876:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoTriSetShape;
    3878:	4b7e      	ldr	r3, [pc, #504]	; (3a74 <parsePreset+0xff4>)
    387a:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    387c:	4b7e      	ldr	r3, [pc, #504]	; (3a78 <parsePreset+0xff8>)
    387e:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    3880:	e431      	b.n	30e6 <parsePreset+0x666>
				lfoShapeTick[i] = &lfoSineTick;
    3882:	4b75      	ldr	r3, [pc, #468]	; (3a58 <parsePreset+0xfd8>)
    3884:	497d      	ldr	r1, [pc, #500]	; (3a7c <parsePreset+0xffc>)
    3886:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoSineSetRate;
    3888:	4b7d      	ldr	r3, [pc, #500]	; (3a80 <parsePreset+0x1000>)
    388a:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineSetShape;
    388c:	4b7d      	ldr	r3, [pc, #500]	; (3a84 <parsePreset+0x1004>)
    388e:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    3890:	4b7d      	ldr	r3, [pc, #500]	; (3a88 <parsePreset+0x1008>)
    3892:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    3894:	e427      	b.n	30e6 <parsePreset+0x666>
				lfoShapeTick[i] = &lfoSawTick;
    3896:	4b70      	ldr	r3, [pc, #448]	; (3a58 <parsePreset+0xfd8>)
    3898:	4970      	ldr	r1, [pc, #448]	; (3a5c <parsePreset+0xfdc>)
    389a:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSetRate;
    389c:	4b70      	ldr	r3, [pc, #448]	; (3a60 <parsePreset+0xfe0>)
    389e:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSetShape;
    38a0:	4b70      	ldr	r3, [pc, #448]	; (3a64 <parsePreset+0xfe4>)
    38a2:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    38a4:	4b70      	ldr	r3, [pc, #448]	; (3a68 <parsePreset+0xfe8>)
    38a6:	6213      	str	r3, [r2, #32]
				break;
    38a8:	f7ff bbd0 	b.w	304c <parsePreset+0x5cc>
				lfoShapeTick[i] = &lfoSawSquareTick;
    38ac:	4b6a      	ldr	r3, [pc, #424]	; (3a58 <parsePreset+0xfd8>)
    38ae:	4977      	ldr	r1, [pc, #476]	; (3a8c <parsePreset+0x100c>)
    38b0:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    38b2:	4b77      	ldr	r3, [pc, #476]	; (3a90 <parsePreset+0x1010>)
    38b4:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    38b6:	4b77      	ldr	r3, [pc, #476]	; (3a94 <parsePreset+0x1014>)
    38b8:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    38ba:	4b77      	ldr	r3, [pc, #476]	; (3a98 <parsePreset+0x1018>)
    38bc:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    38be:	e412      	b.n	30e6 <parsePreset+0x666>
				lfoShapeTick[i] = &lfoSineTriTick;
    38c0:	4b65      	ldr	r3, [pc, #404]	; (3a58 <parsePreset+0xfd8>)
    38c2:	4976      	ldr	r1, [pc, #472]	; (3a9c <parsePreset+0x101c>)
    38c4:	60d9      	str	r1, [r3, #12]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    38c6:	4b76      	ldr	r3, [pc, #472]	; (3aa0 <parsePreset+0x1020>)
    38c8:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    38ca:	4b76      	ldr	r3, [pc, #472]	; (3aa4 <parsePreset+0x1024>)
    38cc:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    38ce:	4b76      	ldr	r3, [pc, #472]	; (3aa8 <parsePreset+0x1028>)
    38d0:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    38d2:	e408      	b.n	30e6 <parsePreset+0x666>
				lfoShapeTick[i] = &lfoTriTick;
    38d4:	4b60      	ldr	r3, [pc, #384]	; (3a58 <parsePreset+0xfd8>)
    38d6:	4965      	ldr	r1, [pc, #404]	; (3a6c <parsePreset+0xfec>)
    38d8:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoTriSetRate;
    38da:	4b65      	ldr	r3, [pc, #404]	; (3a70 <parsePreset+0xff0>)
    38dc:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoTriSetShape;
    38de:	4b65      	ldr	r3, [pc, #404]	; (3a74 <parsePreset+0xff4>)
    38e0:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    38e2:	4b65      	ldr	r3, [pc, #404]	; (3a78 <parsePreset+0xff8>)
    38e4:	6213      	str	r3, [r2, #32]
				break;
    38e6:	f7ff bbb1 	b.w	304c <parsePreset+0x5cc>
				lfoShapeTick[i] = &lfoSineTick;
    38ea:	4b5b      	ldr	r3, [pc, #364]	; (3a58 <parsePreset+0xfd8>)
    38ec:	4963      	ldr	r1, [pc, #396]	; (3a7c <parsePreset+0xffc>)
    38ee:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoSineSetRate;
    38f0:	4b63      	ldr	r3, [pc, #396]	; (3a80 <parsePreset+0x1000>)
    38f2:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineSetShape;
    38f4:	4b63      	ldr	r3, [pc, #396]	; (3a84 <parsePreset+0x1004>)
    38f6:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    38f8:	4b63      	ldr	r3, [pc, #396]	; (3a88 <parsePreset+0x1008>)
    38fa:	6213      	str	r3, [r2, #32]
				break;
    38fc:	f7ff bba6 	b.w	304c <parsePreset+0x5cc>
				lfoShapeTick[i] = &lfoSawSquareTick;
    3900:	4b55      	ldr	r3, [pc, #340]	; (3a58 <parsePreset+0xfd8>)
    3902:	4962      	ldr	r1, [pc, #392]	; (3a8c <parsePreset+0x100c>)
    3904:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    3906:	4b62      	ldr	r3, [pc, #392]	; (3a90 <parsePreset+0x1010>)
    3908:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    390a:	4b62      	ldr	r3, [pc, #392]	; (3a94 <parsePreset+0x1014>)
    390c:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    390e:	4b62      	ldr	r3, [pc, #392]	; (3a98 <parsePreset+0x1018>)
    3910:	6213      	str	r3, [r2, #32]
				break;
    3912:	f7ff bb9b 	b.w	304c <parsePreset+0x5cc>
				lfoShapeTick[i] = &lfoSawTick;
    3916:	4b50      	ldr	r3, [pc, #320]	; (3a58 <parsePreset+0xfd8>)
    3918:	4950      	ldr	r1, [pc, #320]	; (3a5c <parsePreset+0xfdc>)
    391a:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSetRate;
    391c:	4b50      	ldr	r3, [pc, #320]	; (3a60 <parsePreset+0xfe0>)
    391e:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSetShape;
    3920:	4b50      	ldr	r3, [pc, #320]	; (3a64 <parsePreset+0xfe4>)
    3922:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    3924:	4b50      	ldr	r3, [pc, #320]	; (3a68 <parsePreset+0xfe8>)
    3926:	6153      	str	r3, [r2, #20]
				break;
    3928:	f7ff bb70 	b.w	300c <parsePreset+0x58c>
				lfoShapeTick[i] = &lfoSineTriTick;
    392c:	4b4a      	ldr	r3, [pc, #296]	; (3a58 <parsePreset+0xfd8>)
    392e:	495b      	ldr	r1, [pc, #364]	; (3a9c <parsePreset+0x101c>)
    3930:	6099      	str	r1, [r3, #8]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    3932:	4b5b      	ldr	r3, [pc, #364]	; (3aa0 <parsePreset+0x1020>)
    3934:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    3936:	4b5b      	ldr	r3, [pc, #364]	; (3aa4 <parsePreset+0x1024>)
    3938:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    393a:	4b5b      	ldr	r3, [pc, #364]	; (3aa8 <parsePreset+0x1028>)
    393c:	6213      	str	r3, [r2, #32]
				break;
    393e:	f7ff bb85 	b.w	304c <parsePreset+0x5cc>
				lfoShapeTick[i] = &lfoTriTick;
    3942:	4b45      	ldr	r3, [pc, #276]	; (3a58 <parsePreset+0xfd8>)
    3944:	4949      	ldr	r1, [pc, #292]	; (3a6c <parsePreset+0xfec>)
    3946:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoTriSetRate;
    3948:	4b49      	ldr	r3, [pc, #292]	; (3a70 <parsePreset+0xff0>)
    394a:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoTriSetShape;
    394c:	4b49      	ldr	r3, [pc, #292]	; (3a74 <parsePreset+0xff4>)
    394e:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    3950:	4b49      	ldr	r3, [pc, #292]	; (3a78 <parsePreset+0xff8>)
    3952:	6153      	str	r3, [r2, #20]
				break;
    3954:	f7ff bb5a 	b.w	300c <parsePreset+0x58c>
				lfoShapeTick[i] = &lfoSineTick;
    3958:	4b3f      	ldr	r3, [pc, #252]	; (3a58 <parsePreset+0xfd8>)
    395a:	4948      	ldr	r1, [pc, #288]	; (3a7c <parsePreset+0xffc>)
    395c:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoSineSetRate;
    395e:	4b48      	ldr	r3, [pc, #288]	; (3a80 <parsePreset+0x1000>)
    3960:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineSetShape;
    3962:	4b48      	ldr	r3, [pc, #288]	; (3a84 <parsePreset+0x1004>)
    3964:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    3966:	4b48      	ldr	r3, [pc, #288]	; (3a88 <parsePreset+0x1008>)
    3968:	6153      	str	r3, [r2, #20]
				break;
    396a:	f7ff bb4f 	b.w	300c <parsePreset+0x58c>
				lfoShapeTick[i] = &lfoSawSquareTick;
    396e:	4b3a      	ldr	r3, [pc, #232]	; (3a58 <parsePreset+0xfd8>)
    3970:	4946      	ldr	r1, [pc, #280]	; (3a8c <parsePreset+0x100c>)
    3972:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    3974:	4b46      	ldr	r3, [pc, #280]	; (3a90 <parsePreset+0x1010>)
    3976:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    3978:	4b46      	ldr	r3, [pc, #280]	; (3a94 <parsePreset+0x1014>)
    397a:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    397c:	4b46      	ldr	r3, [pc, #280]	; (3a98 <parsePreset+0x1018>)
    397e:	6153      	str	r3, [r2, #20]
				break;
    3980:	f7ff bb44 	b.w	300c <parsePreset+0x58c>
				lfoShapeTick[i] = &lfoSineTriTick;
    3984:	4b34      	ldr	r3, [pc, #208]	; (3a58 <parsePreset+0xfd8>)
    3986:	4945      	ldr	r1, [pc, #276]	; (3a9c <parsePreset+0x101c>)
    3988:	6059      	str	r1, [r3, #4]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    398a:	4b45      	ldr	r3, [pc, #276]	; (3aa0 <parsePreset+0x1020>)
    398c:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    398e:	4b45      	ldr	r3, [pc, #276]	; (3aa4 <parsePreset+0x1024>)
    3990:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    3992:	4b45      	ldr	r3, [pc, #276]	; (3aa8 <parsePreset+0x1028>)
    3994:	6153      	str	r3, [r2, #20]
				break;
    3996:	f7ff bb39 	b.w	300c <parsePreset+0x58c>
				lfoShapeTick[i] = &lfoSawTick;
    399a:	4b2f      	ldr	r3, [pc, #188]	; (3a58 <parsePreset+0xfd8>)
    399c:	492f      	ldr	r1, [pc, #188]	; (3a5c <parsePreset+0xfdc>)
				lfoSetters[i].setRate = &lfoSawSetRate;
    399e:	4a43      	ldr	r2, [pc, #268]	; (3aac <parsePreset+0x102c>)
				lfoShapeTick[i] = &lfoSawTick;
    39a0:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSetRate;
    39a2:	4b2f      	ldr	r3, [pc, #188]	; (3a60 <parsePreset+0xfe0>)
    39a4:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSetShape;
    39a6:	4b2f      	ldr	r3, [pc, #188]	; (3a64 <parsePreset+0xfe4>)
    39a8:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    39aa:	4b2f      	ldr	r3, [pc, #188]	; (3a68 <parsePreset+0xfe8>)
    39ac:	6093      	str	r3, [r2, #8]
				break;
    39ae:	f7ff bb0d 	b.w	2fcc <parsePreset+0x54c>
				lfoShapeTick[i] = &lfoTriTick;
    39b2:	4b29      	ldr	r3, [pc, #164]	; (3a58 <parsePreset+0xfd8>)
    39b4:	492d      	ldr	r1, [pc, #180]	; (3a6c <parsePreset+0xfec>)
				lfoSetters[i].setRate = &lfoTriSetRate;
    39b6:	4a3d      	ldr	r2, [pc, #244]	; (3aac <parsePreset+0x102c>)
				lfoShapeTick[i] = &lfoTriTick;
    39b8:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoTriSetRate;
    39ba:	4b2d      	ldr	r3, [pc, #180]	; (3a70 <parsePreset+0xff0>)
    39bc:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoTriSetShape;
    39be:	4b2d      	ldr	r3, [pc, #180]	; (3a74 <parsePreset+0xff4>)
    39c0:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    39c2:	4b2d      	ldr	r3, [pc, #180]	; (3a78 <parsePreset+0xff8>)
    39c4:	6093      	str	r3, [r2, #8]
				break;
    39c6:	f7ff bb01 	b.w	2fcc <parsePreset+0x54c>
				lfoShapeTick[i] = &lfoSineTick;
    39ca:	4b23      	ldr	r3, [pc, #140]	; (3a58 <parsePreset+0xfd8>)
    39cc:	492b      	ldr	r1, [pc, #172]	; (3a7c <parsePreset+0xffc>)
				lfoSetters[i].setRate = &lfoSineSetRate;
    39ce:	4a37      	ldr	r2, [pc, #220]	; (3aac <parsePreset+0x102c>)
				lfoShapeTick[i] = &lfoSineTick;
    39d0:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoSineSetRate;
    39d2:	4b2b      	ldr	r3, [pc, #172]	; (3a80 <parsePreset+0x1000>)
    39d4:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineSetShape;
    39d6:	4b2b      	ldr	r3, [pc, #172]	; (3a84 <parsePreset+0x1004>)
    39d8:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    39da:	4b2b      	ldr	r3, [pc, #172]	; (3a88 <parsePreset+0x1008>)
    39dc:	6093      	str	r3, [r2, #8]
				break;
    39de:	f7ff baf5 	b.w	2fcc <parsePreset+0x54c>
				lfoShapeTick[i] = &lfoSawSquareTick;
    39e2:	4b1d      	ldr	r3, [pc, #116]	; (3a58 <parsePreset+0xfd8>)
    39e4:	4929      	ldr	r1, [pc, #164]	; (3a8c <parsePreset+0x100c>)
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    39e6:	4a31      	ldr	r2, [pc, #196]	; (3aac <parsePreset+0x102c>)
				lfoShapeTick[i] = &lfoSawSquareTick;
    39e8:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    39ea:	4b29      	ldr	r3, [pc, #164]	; (3a90 <parsePreset+0x1010>)
    39ec:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    39ee:	4b29      	ldr	r3, [pc, #164]	; (3a94 <parsePreset+0x1014>)
    39f0:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    39f2:	4b29      	ldr	r3, [pc, #164]	; (3a98 <parsePreset+0x1018>)
    39f4:	6093      	str	r3, [r2, #8]
				break;
    39f6:	f7ff bae9 	b.w	2fcc <parsePreset+0x54c>
				lfoShapeTick[i] = &lfoSineTriTick;
    39fa:	4b17      	ldr	r3, [pc, #92]	; (3a58 <parsePreset+0xfd8>)
    39fc:	4927      	ldr	r1, [pc, #156]	; (3a9c <parsePreset+0x101c>)
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    39fe:	4a2b      	ldr	r2, [pc, #172]	; (3aac <parsePreset+0x102c>)
				lfoShapeTick[i] = &lfoSineTriTick;
    3a00:	6019      	str	r1, [r3, #0]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    3a02:	4b27      	ldr	r3, [pc, #156]	; (3aa0 <parsePreset+0x1020>)
    3a04:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    3a06:	4b27      	ldr	r3, [pc, #156]	; (3aa4 <parsePreset+0x1024>)
    3a08:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    3a0a:	4b27      	ldr	r3, [pc, #156]	; (3aa8 <parsePreset+0x1028>)
    3a0c:	6093      	str	r3, [r2, #8]
				break;
    3a0e:	f7ff badd 	b.w	2fcc <parsePreset+0x54c>
				  shapeTick[i] = &userTick;
    3a12:	4b27      	ldr	r3, [pc, #156]	; (3ab0 <parsePreset+0x1030>)
    3a14:	4927      	ldr	r1, [pc, #156]	; (3ab4 <parsePreset+0x1034>)
    3a16:	6099      	str	r1, [r3, #8]
				  break;
    3a18:	f7ff ba62 	b.w	2ee0 <parsePreset+0x460>
				  shapeTick[i] = &triTick;
    3a1c:	4b24      	ldr	r3, [pc, #144]	; (3ab0 <parsePreset+0x1030>)
    3a1e:	4926      	ldr	r1, [pc, #152]	; (3ab8 <parsePreset+0x1038>)
    3a20:	6099      	str	r1, [r3, #8]
				  break;
    3a22:	f7ff ba5d 	b.w	2ee0 <parsePreset+0x460>
				  shapeTick[i] = &sineTick;
    3a26:	4b22      	ldr	r3, [pc, #136]	; (3ab0 <parsePreset+0x1030>)
    3a28:	4924      	ldr	r1, [pc, #144]	; (3abc <parsePreset+0x103c>)
    3a2a:	6099      	str	r1, [r3, #8]
				  break;
    3a2c:	f7ff ba58 	b.w	2ee0 <parsePreset+0x460>
    3a30:	000020c1 	.word	0x000020c1
    3a34:	00002221 	.word	0x00002221
    3a38:	000021a1 	.word	0x000021a1
    3a3c:	00001881 	.word	0x00001881
    3a40:	00001b01 	.word	0x00001b01
    3a44:	00001bc1 	.word	0x00001bc1
    3a48:	00001c21 	.word	0x00001c21
    3a4c:	00002121 	.word	0x00002121
    3a50:	00001b61 	.word	0x00001b61
    3a54:	00002061 	.word	0x00002061
    3a58:	2000050c 	.word	0x2000050c
    3a5c:	240003fd 	.word	0x240003fd
    3a60:	24000479 	.word	0x24000479
    3a64:	24000521 	.word	0x24000521
    3a68:	240004d9 	.word	0x240004d9
    3a6c:	240003e5 	.word	0x240003e5
    3a70:	24000469 	.word	0x24000469
    3a74:	2400051d 	.word	0x2400051d
    3a78:	240004c9 	.word	0x240004c9
    3a7c:	240003cd 	.word	0x240003cd
    3a80:	24000459 	.word	0x24000459
    3a84:	24000519 	.word	0x24000519
    3a88:	240004b9 	.word	0x240004b9
    3a8c:	2400039d 	.word	0x2400039d
    3a90:	24000439 	.word	0x24000439
    3a94:	240004f9 	.word	0x240004f9
    3a98:	24000499 	.word	0x24000499
    3a9c:	240003b5 	.word	0x240003b5
    3aa0:	24000449 	.word	0x24000449
    3aa4:	24000509 	.word	0x24000509
    3aa8:	240004a9 	.word	0x240004a9
    3aac:	2000e3fc 	.word	0x2000e3fc
    3ab0:	20000790 	.word	0x20000790
    3ab4:	00000881 	.word	0x00000881
    3ab8:	00000801 	.word	0x00000801
    3abc:	000007c1 	.word	0x000007c1
				  shapeTick[i] = &pulseTick;
    3ac0:	4b87      	ldr	r3, [pc, #540]	; (3ce0 <parsePreset+0x1260>)
    3ac2:	4988      	ldr	r1, [pc, #544]	; (3ce4 <parsePreset+0x1264>)
    3ac4:	6099      	str	r1, [r3, #8]
				  break;
    3ac6:	f7ff ba0b 	b.w	2ee0 <parsePreset+0x460>
				  shapeTick[i] = &sawTick;
    3aca:	4b85      	ldr	r3, [pc, #532]	; (3ce0 <parsePreset+0x1260>)
    3acc:	4986      	ldr	r1, [pc, #536]	; (3ce8 <parsePreset+0x1268>)
    3ace:	6099      	str	r1, [r3, #8]
				  break;
    3ad0:	f7ff ba06 	b.w	2ee0 <parsePreset+0x460>
				  shapeTick[i] = &sineTriTick;
    3ad4:	4b82      	ldr	r3, [pc, #520]	; (3ce0 <parsePreset+0x1260>)
    3ad6:	4985      	ldr	r1, [pc, #532]	; (3cec <parsePreset+0x126c>)
    3ad8:	6099      	str	r1, [r3, #8]
				  break;
    3ada:	f7ff ba01 	b.w	2ee0 <parsePreset+0x460>
				  shapeTick[i] = &userTick;
    3ade:	4b80      	ldr	r3, [pc, #512]	; (3ce0 <parsePreset+0x1260>)
    3ae0:	4983      	ldr	r1, [pc, #524]	; (3cf0 <parsePreset+0x1270>)
    3ae2:	6059      	str	r1, [r3, #4]
				  break;
    3ae4:	f7ff b9d6 	b.w	2e94 <parsePreset+0x414>
				  shapeTick[i] = &triTick;
    3ae8:	4b7d      	ldr	r3, [pc, #500]	; (3ce0 <parsePreset+0x1260>)
    3aea:	4982      	ldr	r1, [pc, #520]	; (3cf4 <parsePreset+0x1274>)
    3aec:	6059      	str	r1, [r3, #4]
				  break;
    3aee:	f7ff b9d1 	b.w	2e94 <parsePreset+0x414>
				  shapeTick[i] = &sineTick;
    3af2:	4b7b      	ldr	r3, [pc, #492]	; (3ce0 <parsePreset+0x1260>)
    3af4:	4980      	ldr	r1, [pc, #512]	; (3cf8 <parsePreset+0x1278>)
    3af6:	6059      	str	r1, [r3, #4]
				  break;
    3af8:	f7ff b9cc 	b.w	2e94 <parsePreset+0x414>
				  shapeTick[i] = &pulseTick;
    3afc:	4b78      	ldr	r3, [pc, #480]	; (3ce0 <parsePreset+0x1260>)
    3afe:	4979      	ldr	r1, [pc, #484]	; (3ce4 <parsePreset+0x1264>)
    3b00:	6059      	str	r1, [r3, #4]
				  break;
    3b02:	f7ff b9c7 	b.w	2e94 <parsePreset+0x414>
				  shapeTick[i] = &sawTick;
    3b06:	4b76      	ldr	r3, [pc, #472]	; (3ce0 <parsePreset+0x1260>)
    3b08:	4977      	ldr	r1, [pc, #476]	; (3ce8 <parsePreset+0x1268>)
    3b0a:	6059      	str	r1, [r3, #4]
				  break;
    3b0c:	f7ff b9c2 	b.w	2e94 <parsePreset+0x414>
				  shapeTick[i] = &sineTriTick;
    3b10:	4b73      	ldr	r3, [pc, #460]	; (3ce0 <parsePreset+0x1260>)
    3b12:	4976      	ldr	r1, [pc, #472]	; (3cec <parsePreset+0x126c>)
    3b14:	6059      	str	r1, [r3, #4]
				  break;
    3b16:	f7ff b9bd 	b.w	2e94 <parsePreset+0x414>
				  shapeTick[i] = &userTick;
    3b1a:	4b71      	ldr	r3, [pc, #452]	; (3ce0 <parsePreset+0x1260>)
    3b1c:	4a74      	ldr	r2, [pc, #464]	; (3cf0 <parsePreset+0x1270>)
    3b1e:	601a      	str	r2, [r3, #0]
				  break;
    3b20:	f7ff b993 	b.w	2e4a <parsePreset+0x3ca>
				  shapeTick[i] = &triTick;
    3b24:	4b6e      	ldr	r3, [pc, #440]	; (3ce0 <parsePreset+0x1260>)
    3b26:	4a73      	ldr	r2, [pc, #460]	; (3cf4 <parsePreset+0x1274>)
    3b28:	601a      	str	r2, [r3, #0]
				  break;
    3b2a:	f7ff b98e 	b.w	2e4a <parsePreset+0x3ca>
				  shapeTick[i] = &sineTick;
    3b2e:	4b6c      	ldr	r3, [pc, #432]	; (3ce0 <parsePreset+0x1260>)
    3b30:	4a71      	ldr	r2, [pc, #452]	; (3cf8 <parsePreset+0x1278>)
    3b32:	601a      	str	r2, [r3, #0]
				  break;
    3b34:	f7ff b989 	b.w	2e4a <parsePreset+0x3ca>
				  shapeTick[i] = &pulseTick;
    3b38:	4b69      	ldr	r3, [pc, #420]	; (3ce0 <parsePreset+0x1260>)
    3b3a:	4a6a      	ldr	r2, [pc, #424]	; (3ce4 <parsePreset+0x1264>)
    3b3c:	601a      	str	r2, [r3, #0]
				  break;
    3b3e:	f7ff b984 	b.w	2e4a <parsePreset+0x3ca>
				  shapeTick[i] = &sawTick;
    3b42:	4b67      	ldr	r3, [pc, #412]	; (3ce0 <parsePreset+0x1260>)
    3b44:	4a68      	ldr	r2, [pc, #416]	; (3ce8 <parsePreset+0x1268>)
    3b46:	601a      	str	r2, [r3, #0]
				  break;
    3b48:	f7ff b97f 	b.w	2e4a <parsePreset+0x3ca>
				  shapeTick[i] = &sineTriTick;
    3b4c:	4b64      	ldr	r3, [pc, #400]	; (3ce0 <parsePreset+0x1260>)
    3b4e:	4a67      	ldr	r2, [pc, #412]	; (3cec <parsePreset+0x126c>)
    3b50:	601a      	str	r2, [r3, #0]
				  break;
    3b52:	f7ff b97a 	b.w	2e4a <parsePreset+0x3ca>
				  filterTick[i] = &VZbandrejectTick;
    3b56:	4b69      	ldr	r3, [pc, #420]	; (3cfc <parsePreset+0x127c>)
    3b58:	4a69      	ldr	r2, [pc, #420]	; (3d00 <parsePreset+0x1280>)
    3b5a:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
    3b5c:	4b69      	ldr	r3, [pc, #420]	; (3d04 <parsePreset+0x1284>)
    3b5e:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
    3b60:	4b69      	ldr	r3, [pc, #420]	; (3d08 <parsePreset+0x1288>)
    3b62:	60fb      	str	r3, [r7, #12]
				  break;
    3b64:	f7ff ba10 	b.w	2f88 <parsePreset+0x508>
				  filterTick[i] = &VZhighshelfTick;
    3b68:	4b64      	ldr	r3, [pc, #400]	; (3cfc <parsePreset+0x127c>)
    3b6a:	4a68      	ldr	r2, [pc, #416]	; (3d0c <parsePreset+0x128c>)
    3b6c:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
    3b6e:	4b68      	ldr	r3, [pc, #416]	; (3d10 <parsePreset+0x1290>)
    3b70:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
    3b72:	4b68      	ldr	r3, [pc, #416]	; (3d14 <parsePreset+0x1294>)
    3b74:	60fb      	str	r3, [r7, #12]
				  break;
    3b76:	f7ff ba07 	b.w	2f88 <parsePreset+0x508>
				  filterTick[i] = &VZlowshelfTick;
    3b7a:	4b60      	ldr	r3, [pc, #384]	; (3cfc <parsePreset+0x127c>)
    3b7c:	4a66      	ldr	r2, [pc, #408]	; (3d18 <parsePreset+0x1298>)
    3b7e:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
    3b80:	4b66      	ldr	r3, [pc, #408]	; (3d1c <parsePreset+0x129c>)
    3b82:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
    3b84:	4b66      	ldr	r3, [pc, #408]	; (3d20 <parsePreset+0x12a0>)
    3b86:	60fb      	str	r3, [r7, #12]
				  break;
    3b88:	f7ff b9fe 	b.w	2f88 <parsePreset+0x508>
				  filterTick[i] = &VZpeakTick;
    3b8c:	4b5b      	ldr	r3, [pc, #364]	; (3cfc <parsePreset+0x127c>)
    3b8e:	4a65      	ldr	r2, [pc, #404]	; (3d24 <parsePreset+0x12a4>)
    3b90:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZpeakSetQ;
    3b92:	4b65      	ldr	r3, [pc, #404]	; (3d28 <parsePreset+0x12a8>)
    3b94:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &VZpeakSetGain;
    3b96:	4b65      	ldr	r3, [pc, #404]	; (3d2c <parsePreset+0x12ac>)
    3b98:	60fb      	str	r3, [r7, #12]
				  break;
    3b9a:	f7ff b9f5 	b.w	2f88 <parsePreset+0x508>
				  filterTick[i] = &diodeLowpassTick;
    3b9e:	4b57      	ldr	r3, [pc, #348]	; (3cfc <parsePreset+0x127c>)
    3ba0:	4a63      	ldr	r2, [pc, #396]	; (3d30 <parsePreset+0x12b0>)
    3ba2:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
    3ba4:	4b63      	ldr	r3, [pc, #396]	; (3d34 <parsePreset+0x12b4>)
    3ba6:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
    3ba8:	4b63      	ldr	r3, [pc, #396]	; (3d38 <parsePreset+0x12b8>)
    3baa:	60fb      	str	r3, [r7, #12]
				  break;
    3bac:	f7ff b9ec 	b.w	2f88 <parsePreset+0x508>
				  filterTick[i] = &bandpassTick;
    3bb0:	4b52      	ldr	r3, [pc, #328]	; (3cfc <parsePreset+0x127c>)
    3bb2:	4a62      	ldr	r2, [pc, #392]	; (3d3c <parsePreset+0x12bc>)
    3bb4:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &bandpassSetQ;
    3bb6:	4b62      	ldr	r3, [pc, #392]	; (3d40 <parsePreset+0x12c0>)
    3bb8:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &bandpassSetGain;
    3bba:	4b62      	ldr	r3, [pc, #392]	; (3d44 <parsePreset+0x12c4>)
    3bbc:	60fb      	str	r3, [r7, #12]
				  break;
    3bbe:	f7ff b9e3 	b.w	2f88 <parsePreset+0x508>
				  filterTick[i] = &highpassTick;
    3bc2:	4b4e      	ldr	r3, [pc, #312]	; (3cfc <parsePreset+0x127c>)
    3bc4:	4a60      	ldr	r2, [pc, #384]	; (3d48 <parsePreset+0x12c8>)
    3bc6:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &highpassSetQ;
    3bc8:	4b60      	ldr	r3, [pc, #384]	; (3d4c <parsePreset+0x12cc>)
    3bca:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &highpassSetGain;
    3bcc:	4b60      	ldr	r3, [pc, #384]	; (3d50 <parsePreset+0x12d0>)
    3bce:	60fb      	str	r3, [r7, #12]
				  break;
    3bd0:	f7ff b9da 	b.w	2f88 <parsePreset+0x508>
				  filterTick[i] = &LadderLowpassTick;
    3bd4:	4b49      	ldr	r3, [pc, #292]	; (3cfc <parsePreset+0x127c>)
    3bd6:	4a5f      	ldr	r2, [pc, #380]	; (3d54 <parsePreset+0x12d4>)
    3bd8:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
    3bda:	4b5f      	ldr	r3, [pc, #380]	; (3d58 <parsePreset+0x12d8>)
    3bdc:	60bb      	str	r3, [r7, #8]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
    3bde:	4b5f      	ldr	r3, [pc, #380]	; (3d5c <parsePreset+0x12dc>)
    3be0:	60fb      	str	r3, [r7, #12]
				  break;
    3be2:	f7ff b9d1 	b.w	2f88 <parsePreset+0x508>
				  filterTick[i] = &LadderLowpassTick;
    3be6:	4b45      	ldr	r3, [pc, #276]	; (3cfc <parsePreset+0x127c>)
    3be8:	4a5a      	ldr	r2, [pc, #360]	; (3d54 <parsePreset+0x12d4>)
    3bea:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
    3bec:	4b5a      	ldr	r3, [pc, #360]	; (3d58 <parsePreset+0x12d8>)
    3bee:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
    3bf0:	4b5a      	ldr	r3, [pc, #360]	; (3d5c <parsePreset+0x12dc>)
    3bf2:	607b      	str	r3, [r7, #4]
				  break;
    3bf4:	f7ff b9a7 	b.w	2f46 <parsePreset+0x4c6>
				  filterTick[i] = &VZbandrejectTick;
    3bf8:	4b40      	ldr	r3, [pc, #256]	; (3cfc <parsePreset+0x127c>)
    3bfa:	4a41      	ldr	r2, [pc, #260]	; (3d00 <parsePreset+0x1280>)
    3bfc:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
    3bfe:	4b41      	ldr	r3, [pc, #260]	; (3d04 <parsePreset+0x1284>)
    3c00:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
    3c02:	4b41      	ldr	r3, [pc, #260]	; (3d08 <parsePreset+0x1288>)
    3c04:	607b      	str	r3, [r7, #4]
				  break;
    3c06:	f7ff b99e 	b.w	2f46 <parsePreset+0x4c6>
				  filterTick[i] = &VZhighshelfTick;
    3c0a:	4b3c      	ldr	r3, [pc, #240]	; (3cfc <parsePreset+0x127c>)
    3c0c:	4a3f      	ldr	r2, [pc, #252]	; (3d0c <parsePreset+0x128c>)
    3c0e:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
    3c10:	4b3f      	ldr	r3, [pc, #252]	; (3d10 <parsePreset+0x1290>)
    3c12:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
    3c14:	4b3f      	ldr	r3, [pc, #252]	; (3d14 <parsePreset+0x1294>)
    3c16:	607b      	str	r3, [r7, #4]
				  break;
    3c18:	f7ff b995 	b.w	2f46 <parsePreset+0x4c6>
				  filterTick[i] = &VZlowshelfTick;
    3c1c:	4b37      	ldr	r3, [pc, #220]	; (3cfc <parsePreset+0x127c>)
    3c1e:	4a3e      	ldr	r2, [pc, #248]	; (3d18 <parsePreset+0x1298>)
    3c20:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
    3c22:	4b3e      	ldr	r3, [pc, #248]	; (3d1c <parsePreset+0x129c>)
    3c24:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
    3c26:	4b3e      	ldr	r3, [pc, #248]	; (3d20 <parsePreset+0x12a0>)
    3c28:	607b      	str	r3, [r7, #4]
				  break;
    3c2a:	f7ff b98c 	b.w	2f46 <parsePreset+0x4c6>
				  filterTick[i] = &VZpeakTick;
    3c2e:	4b33      	ldr	r3, [pc, #204]	; (3cfc <parsePreset+0x127c>)
    3c30:	4a3c      	ldr	r2, [pc, #240]	; (3d24 <parsePreset+0x12a4>)
    3c32:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZpeakSetQ;
    3c34:	4b3c      	ldr	r3, [pc, #240]	; (3d28 <parsePreset+0x12a8>)
    3c36:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &VZpeakSetGain;
    3c38:	4b3c      	ldr	r3, [pc, #240]	; (3d2c <parsePreset+0x12ac>)
    3c3a:	607b      	str	r3, [r7, #4]
				  break;
    3c3c:	f7ff b983 	b.w	2f46 <parsePreset+0x4c6>
				  filterTick[i] = &diodeLowpassTick;
    3c40:	4b2e      	ldr	r3, [pc, #184]	; (3cfc <parsePreset+0x127c>)
    3c42:	4a3b      	ldr	r2, [pc, #236]	; (3d30 <parsePreset+0x12b0>)
    3c44:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
    3c46:	4b3b      	ldr	r3, [pc, #236]	; (3d34 <parsePreset+0x12b4>)
    3c48:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
    3c4a:	4b3b      	ldr	r3, [pc, #236]	; (3d38 <parsePreset+0x12b8>)
    3c4c:	607b      	str	r3, [r7, #4]
				  break;
    3c4e:	f7ff b97a 	b.w	2f46 <parsePreset+0x4c6>
				  filterTick[i] = &bandpassTick;
    3c52:	4b2a      	ldr	r3, [pc, #168]	; (3cfc <parsePreset+0x127c>)
    3c54:	4a39      	ldr	r2, [pc, #228]	; (3d3c <parsePreset+0x12bc>)
    3c56:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &bandpassSetQ;
    3c58:	4b39      	ldr	r3, [pc, #228]	; (3d40 <parsePreset+0x12c0>)
    3c5a:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &bandpassSetGain;
    3c5c:	4b39      	ldr	r3, [pc, #228]	; (3d44 <parsePreset+0x12c4>)
    3c5e:	607b      	str	r3, [r7, #4]
				  break;
    3c60:	f7ff b971 	b.w	2f46 <parsePreset+0x4c6>
				  filterTick[i] = &highpassTick;
    3c64:	4b25      	ldr	r3, [pc, #148]	; (3cfc <parsePreset+0x127c>)
    3c66:	4a38      	ldr	r2, [pc, #224]	; (3d48 <parsePreset+0x12c8>)
    3c68:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &highpassSetQ;
    3c6a:	4b38      	ldr	r3, [pc, #224]	; (3d4c <parsePreset+0x12cc>)
    3c6c:	603b      	str	r3, [r7, #0]
				  filterSetters[i].setGain = &highpassSetGain;
    3c6e:	4b38      	ldr	r3, [pc, #224]	; (3d50 <parsePreset+0x12d0>)
    3c70:	607b      	str	r3, [r7, #4]
				  break;
    3c72:	f7ff b968 	b.w	2f46 <parsePreset+0x4c6>
			mappings[whichMapping].destNumber = destNumber;
    3c76:	fb09 f30a 	mul.w	r3, r9, sl
    3c7a:	4654      	mov	r4, sl
    3c7c:	eb0e 0203 	add.w	r2, lr, r3
    3c80:	f80e 0003 	strb.w	r0, [lr, r3]
			mappings[whichMapping].dest = &params[destNumber];
    3c84:	9b01      	ldr	r3, [sp, #4]
    3c86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3c8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			numMappings++;
    3c8e:	f10a 0301 	add.w	r3, sl, #1
			mappings[whichMapping].dest = &params[destNumber];
    3c92:	6050      	str	r0, [r2, #4]
			numMappings++;
    3c94:	fa5f fa83 	uxtb.w	sl, r3
    3c98:	e425      	b.n	34e6 <parsePreset+0xa66>
			mappings[whichMapping].scalarSourceValPtr[whichHook] = &defaultScaling;
    3c9a:	4931      	ldr	r1, [pc, #196]	; (3d60 <parsePreset+0x12e0>)
    3c9c:	f84e 1022 	str.w	r1, [lr, r2, lsl #2]
    3ca0:	e458      	b.n	3554 <parsePreset+0xad4>
    3ca2:	4c30      	ldr	r4, [pc, #192]	; (3d64 <parsePreset+0x12e4>)
    3ca4:	f7fe bfd7 	b.w	2c56 <parsePreset+0x1d6>
	for (int i = 0; i < paramCount; i++)
    3ca8:	2684      	movs	r6, #132	; 0x84
    3caa:	4d2f      	ldr	r5, [pc, #188]	; (3d68 <parsePreset+0x12e8>)
    3cac:	f7fe bfc0 	b.w	2c30 <parsePreset+0x1b0>
			params[i].objectNumber = 2;
    3cb0:	f889 7010 	strb.w	r7, [r9, #16]
		params[i].setParam(params[i].realVal, params[i].objectNumber);
    3cb4:	ed99 0a01 	vldr	s0, [r9, #4]
    3cb8:	f8d9 300c 	ldr.w	r3, [r9, #12]
    3cbc:	f899 0010 	ldrb.w	r0, [r9, #16]
    3cc0:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    3cc2:	f7ff bb65 	b.w	3390 <parsePreset+0x910>
			params[i].objectNumber = 1;
    3cc6:	2301      	movs	r3, #1
    3cc8:	f889 3010 	strb.w	r3, [r9, #16]
    3ccc:	e7f2      	b.n	3cb4 <parsePreset+0x1234>
			params[i].objectNumber = 3;
    3cce:	f04f 0303 	mov.w	r3, #3
    3cd2:	f889 3010 	strb.w	r3, [r9, #16]
    3cd6:	e7ed      	b.n	3cb4 <parsePreset+0x1234>
    3cd8:	4a24      	ldr	r2, [pc, #144]	; (3d6c <parsePreset+0x12ec>)
    3cda:	f7ff b977 	b.w	2fcc <parsePreset+0x54c>
    3cde:	bf00      	nop
    3ce0:	20000790 	.word	0x20000790
    3ce4:	00000741 	.word	0x00000741
    3ce8:	000006e1 	.word	0x000006e1
    3cec:	00000661 	.word	0x00000661
    3cf0:	00000881 	.word	0x00000881
    3cf4:	00000801 	.word	0x00000801
    3cf8:	000007c1 	.word	0x000007c1
    3cfc:	20000234 	.word	0x20000234
    3d00:	00000c01 	.word	0x00000c01
    3d04:	00000e41 	.word	0x00000e41
    3d08:	00001041 	.word	0x00001041
    3d0c:	00000bc1 	.word	0x00000bc1
    3d10:	00000e21 	.word	0x00000e21
    3d14:	00001001 	.word	0x00001001
    3d18:	00000b81 	.word	0x00000b81
    3d1c:	00000e01 	.word	0x00000e01
    3d20:	00000fc1 	.word	0x00000fc1
    3d24:	00000b41 	.word	0x00000b41
    3d28:	00000de1 	.word	0x00000de1
    3d2c:	00000f81 	.word	0x00000f81
    3d30:	00000b01 	.word	0x00000b01
    3d34:	00000dc1 	.word	0x00000dc1
    3d38:	00000f41 	.word	0x00000f41
    3d3c:	00000ac1 	.word	0x00000ac1
    3d40:	00000da1 	.word	0x00000da1
    3d44:	00000f01 	.word	0x00000f01
    3d48:	00000a81 	.word	0x00000a81
    3d4c:	00000d81 	.word	0x00000d81
    3d50:	00000ec1 	.word	0x00000ec1
    3d54:	00000c41 	.word	0x00000c41
    3d58:	00000e61 	.word	0x00000e61
    3d5c:	00001081 	.word	0x00001081
    3d60:	20000028 	.word	0x20000028
    3d64:	2000f6dc 	.word	0x2000f6dc
    3d68:	2000eac0 	.word	0x2000eac0
    3d6c:	2000e3fc 	.word	0x2000e3fc
    3d70:	f3af 8000 	nop.w
    3d74:	f3af 8000 	nop.w
    3d78:	f3af 8000 	nop.w
    3d7c:	f3af 8000 	nop.w

00003d80 <HAL_SPI_TxRxCpltCallback>:
}
    3d80:	4770      	bx	lr
    3d82:	bf00      	nop
    3d84:	f3af 8000 	nop.w
    3d88:	f3af 8000 	nop.w
    3d8c:	f3af 8000 	nop.w
    3d90:	f3af 8000 	nop.w
    3d94:	f3af 8000 	nop.w
    3d98:	f3af 8000 	nop.w
    3d9c:	f3af 8000 	nop.w

00003da0 <HAL_SPI_TxRxHalfCpltCallback>:
    3da0:	4770      	bx	lr
    3da2:	bf00      	nop
	...

00003dc0 <place_step_dd>:
#endif
{
	float r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    3dc0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 3e2c <place_step_dd+0x6c>
	i = lrintf(r - 0.5f);
    3dc4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    3dc8:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    3dcc:	b538      	push	{r3, r4, r5, lr}
    3dce:	ed2d 8b02 	vpush	{d8}
	r = MINBLEP_PHASES * phase / w;
    3dd2:	ee80 8a20 	vdiv.f32	s16, s0, s1
{
    3dd6:	460d      	mov	r5, r1
    3dd8:	4604      	mov	r4, r0
    3dda:	eef0 8a41 	vmov.f32	s17, s2
	i = lrintf(r - 0.5f);
    3dde:	ee38 0a67 	vsub.f32	s0, s16, s15
    3de2:	f001 f8a1 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    3de6:	ee07 0a90 	vmov	s15, r0
    3dea:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    3dee:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    3df2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    3df6:	4b0e      	ldr	r3, [pc, #56]	; (3e30 <place_step_dd+0x70>)
    3df8:	f502 7190 	add.w	r1, r2, #288	; 0x120
    3dfc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    3e00:	ee38 6a46 	vsub.f32	s12, s16, s12

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    3e04:	edd3 6a01 	vldr	s13, [r3, #4]
    3e08:	ed93 7a00 	vldr	s14, [r3]
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    3e0c:	f503 7300 	add.w	r3, r3, #512	; 0x200
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    3e10:	edd2 7a00 	vldr	s15, [r2]
    3e14:	eea6 7a86 	vfma.f32	s14, s13, s12
    3e18:	eee7 7a28 	vfma.f32	s15, s14, s17
    3e1c:	ece2 7a01 	vstmia	r2!, {s15}
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    3e20:	4291      	cmp	r1, r2
    3e22:	d1ef      	bne.n	3e04 <place_step_dd+0x44>
		i += MINBLEP_PHASES;
		index++;
	}
}
    3e24:	ecbd 8b02 	vpop	{d8}
    3e28:	bd38      	pop	{r3, r4, r5, pc}
    3e2a:	bf00      	nop
    3e2c:	42800000 	.word	0x42800000
    3e30:	2401ec8c 	.word	0x2401ec8c
    3e34:	f3af 8000 	nop.w
    3e38:	f3af 8000 	nop.w
    3e3c:	f3af 8000 	nop.w

00003e40 <place_slope_dd>:
#endif
{
	float r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    3e40:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 3eb8 <place_slope_dd+0x78>
	i = lrintf(r - 0.5f);
    3e44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    3e48:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    3e4c:	b538      	push	{r3, r4, r5, lr}
    3e4e:	ed2d 8b04 	vpush	{d8-d9}
	r = MINBLEP_PHASES * phase / w;
    3e52:	eec0 8a20 	vdiv.f32	s17, s0, s1
{
    3e56:	460d      	mov	r5, r1
    3e58:	4604      	mov	r4, r0
    3e5a:	eeb0 8a60 	vmov.f32	s16, s1
    3e5e:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    3e62:	ee38 0ae7 	vsub.f32	s0, s17, s15
    3e66:	f001 f85f 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    3e6a:	ee07 0a90 	vmov	s15, r0
    3e6e:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    3e72:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    3e76:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    3e7a:	4b10      	ldr	r3, [pc, #64]	; (3ebc <place_slope_dd+0x7c>)

	slope_delta *= w;
    3e7c:	ee28 1a09 	vmul.f32	s2, s16, s18
    3e80:	f502 718e 	add.w	r1, r2, #284	; 0x11c
    3e84:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	r -= (float)i;
    3e88:	ee38 6ac6 	vsub.f32	s12, s17, s12

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    3e8c:	edd3 7a00 	vldr	s15, [r3]
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    3e90:	f503 7380 	add.w	r3, r3, #256	; 0x100
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    3e94:	ed53 6a3f 	vldr	s13, [r3, #-252]	; 0xffffff04
    3e98:	ed92 7a00 	vldr	s14, [r2]
    3e9c:	ee76 6ae7 	vsub.f32	s13, s13, s15
    3ea0:	eee6 7a86 	vfma.f32	s15, s13, s12
    3ea4:	eea7 7a81 	vfma.f32	s14, s15, s2
    3ea8:	eca2 7a01 	vstmia	r2!, {s14}
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    3eac:	4291      	cmp	r1, r2
    3eae:	d1ed      	bne.n	3e8c <place_slope_dd+0x4c>
		i += MINBLEP_PHASES;
		index++;
	}
}
    3eb0:	ecbd 8b04 	vpop	{d8-d9}
    3eb4:	bd38      	pop	{r3, r4, r5, pc}
    3eb6:	bf00      	nop
    3eb8:	42800000 	.word	0x42800000
    3ebc:	2401a588 	.word	0x2401a588

00003ec0 <LEAF_clip>:
    if (min > max)
    3ec0:	eeb4 0ac1 	vcmpe.f32	s0, s2
    3ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ec8:	dd05      	ble.n	3ed6 <LEAF_clip+0x16>
    3eca:	eef0 7a40 	vmov.f32	s15, s0
        tempmin = max;
    3ece:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
    3ed2:	eeb0 1a67 	vmov.f32	s2, s15
    if (val < tempmin)
    3ed6:	eeb4 0ae0 	vcmpe.f32	s0, s1
    3eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ede:	dc01      	bgt.n	3ee4 <LEAF_clip+0x24>
    else if (val > tempmax)
    3ee0:	fe81 0a60 	vminnm.f32	s0, s2, s1
}
    3ee4:	4770      	bx	lr
    3ee6:	bf00      	nop
	...

00003f00 <tMBPulse_place_step_dd_noBuffer>:
{
    3f00:	b510      	push	{r4, lr}
    3f02:	ed2d 8b04 	vpush	{d8-d9}
    3f06:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 3f70 <tMBPulse_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    3f0a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
    3f0e:	6804      	ldr	r4, [r0, #0]
{
    3f10:	eef0 8a40 	vmov.f32	s17, s0
    3f14:	ee20 8a88 	vmul.f32	s16, s1, s16
    3f18:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    3f1c:	eee0 7a08 	vfma.f32	s15, s0, s16
    3f20:	eeb0 0a67 	vmov.f32	s0, s15
    3f24:	f001 f800 	bl	4f28 <__lrintf_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    3f28:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	r -= (float)i;
    3f2c:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    3f30:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    3f34:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    3f36:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    3f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    3f3e:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    3f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    3f44:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	r -= (float)i;
    3f48:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
    3f4c:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    3f50:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
    3f54:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    3f58:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    3f5c:	ed81 9a3b 	vstr	s18, [r1, #236]	; 0xec
}
    3f60:	ecbd 8b04 	vpop	{d8-d9}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    3f64:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    3f68:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
}
    3f6c:	bd10      	pop	{r4, pc}
    3f6e:	bf00      	nop
    3f70:	42800000 	.word	0x42800000
    3f74:	f3af 8000 	nop.w
    3f78:	f3af 8000 	nop.w
    3f7c:	f3af 8000 	nop.w

00003f80 <tMBTriangle_place_dd_noBuffer>:
{
    3f80:	b510      	push	{r4, lr}
    3f82:	ed2d 8b06 	vpush	{d8-d10}
    3f86:	eddf 8a1f 	vldr	s17, [pc, #124]	; 4004 <tMBTriangle_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    3f8a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
    3f8e:	6804      	ldr	r4, [r0, #0]
{
    3f90:	eeb0 9a40 	vmov.f32	s18, s0
    3f94:	ee60 8aa8 	vmul.f32	s17, s1, s17
    3f98:	eeb0 8a41 	vmov.f32	s16, s2
    3f9c:	eef0 9a61 	vmov.f32	s19, s3
	i = lrintf(r - 0.5f);
    3fa0:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    3fa4:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    3fa8:	eeb0 0a67 	vmov.f32	s0, s15
    3fac:	f000 ffbc 	bl	4f28 <__lrintf_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    3fb0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	r -= (float)i;
    3fb4:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    3fb8:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    3fbc:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    3fbe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    3fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    3fc6:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    3fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	scale *= w;
    3fcc:	ee28 1a0a 	vmul.f32	s2, s16, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    3fd0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	r -= (float)i;
    3fd4:	eed9 7a28 	vfnms.f32	s15, s18, s17
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    3fd8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    3fdc:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    3fe0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    3fe4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
    3fe8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    3fec:	edc1 9a3d 	vstr	s19, [r1, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    3ff0:	ed81 1a3c 	vstr	s2, [r1, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    3ff4:	edc1 7a3b 	vstr	s15, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    3ff8:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
}
    3ffc:	ecbd 8b06 	vpop	{d8-d10}
    4000:	bd10      	pop	{r4, pc}
    4002:	bf00      	nop
    4004:	42800000 	.word	0x42800000
    4008:	f3af 8000 	nop.w
    400c:	f3af 8000 	nop.w
    4010:	f3af 8000 	nop.w
    4014:	f3af 8000 	nop.w
    4018:	f3af 8000 	nop.w
    401c:	f3af 8000 	nop.w

00004020 <tMBSineTri_place_dd_noBuffer>:
{
    4020:	b510      	push	{r4, lr}
    4022:	ed2d 8b06 	vpush	{d8-d10}
    4026:	eddf 8a1f 	vldr	s17, [pc, #124]	; 40a4 <tMBSineTri_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    402a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
    402e:	6804      	ldr	r4, [r0, #0]
{
    4030:	eeb0 9a40 	vmov.f32	s18, s0
    4034:	ee60 8aa8 	vmul.f32	s17, s1, s17
    4038:	eeb0 8a41 	vmov.f32	s16, s2
    403c:	eef0 9a61 	vmov.f32	s19, s3
	i = lrintf(r - 0.5f);
    4040:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    4044:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    4048:	eeb0 0a67 	vmov.f32	s0, s15
    404c:	f000 ff6c 	bl	4f28 <__lrintf_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4050:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	r -= (float)i;
    4054:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4058:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    405c:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    405e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    4062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4066:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	scale *= w;
    406c:	ee28 1a0a 	vmul.f32	s2, s16, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4070:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	r -= (float)i;
    4074:	eed9 7a28 	vfnms.f32	s15, s18, s17
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4078:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    407c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    4080:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4084:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
    4088:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    408c:	edc1 9a3d 	vstr	s19, [r1, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4090:	ed81 1a3c 	vstr	s2, [r1, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4094:	edc1 7a3b 	vstr	s15, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4098:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
}
    409c:	ecbd 8b06 	vpop	{d8-d10}
    40a0:	bd10      	pop	{r4, pc}
    40a2:	bf00      	nop
    40a4:	42800000 	.word	0x42800000
    40a8:	f3af 8000 	nop.w
    40ac:	f3af 8000 	nop.w
    40b0:	f3af 8000 	nop.w
    40b4:	f3af 8000 	nop.w
    40b8:	f3af 8000 	nop.w
    40bc:	f3af 8000 	nop.w

000040c0 <tMBSaw_place_step_dd_noBuffer>:
{
    40c0:	b510      	push	{r4, lr}
    40c2:	ed2d 8b04 	vpush	{d8-d9}
    40c6:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 4130 <tMBSaw_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    40ca:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
    40ce:	6804      	ldr	r4, [r0, #0]
{
    40d0:	eef0 8a40 	vmov.f32	s17, s0
    40d4:	ee20 8a88 	vmul.f32	s16, s1, s16
    40d8:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    40dc:	eee0 7a08 	vfma.f32	s15, s0, s16
    40e0:	eeb0 0a67 	vmov.f32	s0, s15
    40e4:	f000 ff20 	bl	4f28 <__lrintf_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    40e8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	r -= (float)i;
    40ec:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    40f0:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    40f4:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    40f6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    40fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    40fe:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4104:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	r -= (float)i;
    4108:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
    410c:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4110:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
    4114:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4118:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    411c:	ed81 9a37 	vstr	s18, [r1, #220]	; 0xdc
}
    4120:	ecbd 8b04 	vpop	{d8-d9}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4124:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4128:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
}
    412c:	bd10      	pop	{r4, pc}
    412e:	bf00      	nop
    4130:	42800000 	.word	0x42800000
    4134:	f3af 8000 	nop.w
    4138:	f3af 8000 	nop.w
    413c:	f3af 8000 	nop.w

00004140 <tMBSawPulse_place_step_dd_noBuffer>:
{
    4140:	b510      	push	{r4, lr}
    4142:	ed2d 8b04 	vpush	{d8-d9}
    4146:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 41b0 <tMBSawPulse_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    414a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    _tMBSawPulse* c = *osc;
    414e:	6804      	ldr	r4, [r0, #0]
{
    4150:	eef0 8a40 	vmov.f32	s17, s0
    4154:	ee20 8a88 	vmul.f32	s16, s1, s16
    4158:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    415c:	eee0 7a08 	vfma.f32	s15, s0, s16
    4160:	eeb0 0a67 	vmov.f32	s0, s15
    4164:	f000 fee0 	bl	4f28 <__lrintf_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4168:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
	r -= (float)i;
    416c:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4170:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4174:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4176:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    417a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    417e:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4184:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	r -= (float)i;
    4188:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
    418c:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4190:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	c->BLEPindices[c->mostRecentBLEP] = i;
    4194:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4198:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    419c:	ed81 9a3d 	vstr	s18, [r1, #244]	; 0xf4
}
    41a0:	ecbd 8b04 	vpop	{d8-d9}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    41a4:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    41a8:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
}
    41ac:	bd10      	pop	{r4, pc}
    41ae:	bf00      	nop
    41b0:	42800000 	.word	0x42800000
    41b4:	f3af 8000 	nop.w
    41b8:	f3af 8000 	nop.w
    41bc:	f3af 8000 	nop.w

000041c0 <tMBSawPulse_tick>:
{
    41c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    _tMBSawPulse* c = *osc;
    41c4:	6804      	ldr	r4, [r0, #0]
{
    41c6:	ed2d 8b0e 	vpush	{d8-d14}
    sync = c->sync;
    41ca:	ed94 8a04 	vldr	s16, [r4, #16]
    float sawShape = 1.0f - c->shape;
    41ce:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    float shape = c->shape;
    41d2:	ed94 ba11 	vldr	s22, [r4, #68]	; 0x44
{
    41d6:	b082      	sub	sp, #8
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    41d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    41dc:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    float sawShape = 1.0f - c->shape;
    41e0:	ee79 cacb 	vsub.f32	s25, s19, s22
    p = c->_p;  /* phase [0, 1) */
    41e4:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    41e8:	eefd bae5 	vcvt.s32.f32	s23, s11
    w = c->_w;  /* phase increment */
    41ec:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    41f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
    41f4:	ed94 da0a 	vldr	s26, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
    41f8:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
    41fc:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
    4200:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    4202:	f340 80f2 	ble.w	43ea <tMBSawPulse_tick+0x22a>
    4206:	f8d4 8018 	ldr.w	r8, [r4, #24]
    420a:	f1b8 0f00 	cmp.w	r8, #0
    420e:	dd5f      	ble.n	42d0 <tMBSawPulse_tick+0x110>
    4210:	edd4 6a05 	vldr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
    4214:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    4218:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
    421c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    4220:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
    4224:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
    4228:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    422c:	ee37 7a87 	vadd.f32	s14, s15, s14
    4230:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    4234:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    4238:	ee1b 3a90 	vmov	r3, s23
		if (sw > 0)
    423c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
    4240:	2b00      	cmp	r3, #0
    4242:	f040 80e9 	bne.w	4418 <tMBSawPulse_tick+0x258>
		if (sw > 0)
    4246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    424a:	f340 8249 	ble.w	46e0 <tMBSawPulse_tick+0x520>
			if (p >= b) {
    424e:	eeb4 8acd 	vcmpe.f32	s16, s26
    4252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4256:	f280 81fe 	bge.w	4656 <tMBSawPulse_tick+0x496>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    425a:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    425e:	eddf 5acb 	vldr	s11, [pc, #812]	; 458c <tMBSawPulse_tick+0x3cc>
			if (p >= 1.0f) {
    4262:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    4266:	eeb4 8ae8 	vcmpe.f32	s16, s17
    426a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    426e:	f2c0 80e3 	blt.w	4438 <tMBSawPulse_tick+0x278>
				p -= 1.0f;
    4272:	eddf 7ac8 	vldr	s15, [pc, #800]	; 4594 <tMBSawPulse_tick+0x3d4>
    4276:	ee38 8a68 	vsub.f32	s16, s16, s17
	i = lrintf(r - 0.5f);
    427a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    427e:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
    4282:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
    4286:	eea9 0a08 	vfma.f32	s0, s18, s16
    428a:	f000 fe4d 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    428e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4292:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4296:	1c7a      	adds	r2, r7, #1
	r -= (float)i;
    4298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    429c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    42a0:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    42a2:	f002 073f 	and.w	r7, r2, #63	; 0x3f
}
    42a6:	eddf 5ab9 	vldr	s11, [pc, #740]	; 458c <tMBSawPulse_tick+0x3cc>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    42aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
    42ae:	eed9 7a08 	vfnms.f32	s15, s18, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
    42b2:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    42b6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	c->BLEPindices[c->mostRecentBLEP] = i;
    42ba:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    42be:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    42c2:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    42c6:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    42ca:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
}
    42ce:	e0b3      	b.n	4438 <tMBSawPulse_tick+0x278>
    sw = w * c->syncdir;
    42d0:	ed94 9a05 	vldr	s18, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
    42d4:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    42d8:	ee67 7a89 	vmul.f32	s15, s15, s18
    float inv_sw = c->_inv_w * c->syncdir;
    42dc:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
    42e0:	eefd 8ae7 	vcvt.s32.f32	s17, s15
    42e4:	ee37 7a27 	vadd.f32	s14, s14, s15
    42e8:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    42ec:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0)
    42f0:	f040 8523 	bne.w	4d3a <tMBSawPulse_tick+0xb7a>
        if (sw > 0) p = eof_offset;
    42f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
        float eof_offset = sync * sw;
    42f8:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (sw > 0) p = eof_offset;
    42fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
    4300:	ee38 cac8 	vsub.f32	s24, s17, s16
        if (sw > 0) p = eof_offset;
    4304:	f340 8131 	ble.w	456a <tMBSawPulse_tick+0x3aa>
		 if (!k)
    4308:	ee1b 3a90 	vmov	r3, s23
    430c:	2b00      	cmp	r3, #0
    430e:	f040 81fc 	bne.w	470a <tMBSawPulse_tick+0x54a>
				 if (p_at_reset >= b)
    4312:	eeb4 dacc 	vcmpe.f32	s26, s24
    4316:	eddf 7a9f 	vldr	s15, [pc, #636]	; 4594 <tMBSawPulse_tick+0x3d4>
    431a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    431e:	f240 83a6 	bls.w	4a6e <tMBSawPulse_tick+0x8ae>
    4322:	ee29 9a27 	vmul.f32	s18, s18, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4326:	f8b4 506a 	ldrh.w	r5, [r4, #106]	; 0x6a
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    432a:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
				 if (p_at_reset >= 1.0f)
    432e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    4332:	eeb4 cae8 	vcmpe.f32	s24, s17
    4336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    433a:	db25      	blt.n	4388 <tMBSawPulse_tick+0x1c8>
					 p_at_reset -= 1.0f;
    433c:	ee3c ca68 	vsub.f32	s24, s24, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4340:	3501      	adds	r5, #1
	i = lrintf(r - 0.5f);
    4342:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
    4346:	f04f 0800 	mov.w	r8, #0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    434a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
					 x = 0.5f;
    434e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    4352:	ee78 9a0c 	vadd.f32	s19, s16, s24
	i = lrintf(r - 0.5f);
    4356:	eea9 0a89 	vfma.f32	s0, s19, s18
    435a:	f000 fde5 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    435e:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
    4362:	eb04 0345 	add.w	r3, r4, r5, lsl #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4366:	1c7a      	adds	r2, r7, #1
	r -= (float)i;
    4368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    436c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4370:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
    4374:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4378:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	r -= (float)i;
    437c:	eed9 7a89 	vfnms.f32	s15, s19, s18
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4380:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4384:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
	i = lrintf(r - 0.5f);
    4388:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    438c:	3501      	adds	r5, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
    438e:	ee2c ca8c 	vmul.f32	s24, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4392:	f005 053f 	and.w	r5, r5, #63	; 0x3f
	i = lrintf(r - 0.5f);
    4396:	eea8 0a09 	vfma.f32	s0, s16, s18
    439a:	f000 fdc5 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    439e:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
    43a2:	eb04 0345 	add.w	r3, r4, r5, lsl #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    43a6:	1c7a      	adds	r2, r7, #1
	r -= (float)i;
    43a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
    43ac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    43b0:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    43b4:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
    43b8:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    43bc:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	r -= (float)i;
    43c0:	eed8 7a09 	vfnms.f32	s15, s16, s18
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    43c4:	ed83 ca3d 	vstr	s24, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    43c8:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    43cc:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
            if (k) {
    43d0:	f1b8 0f00 	cmp.w	r8, #0
    43d4:	f040 82ca 	bne.w	496c <tMBSawPulse_tick+0x7ac>
			if (p >= b) {
    43d8:	eeb4 dac8 	vcmpe.f32	s26, s16
    43dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    43e0:	f240 82a7 	bls.w	4932 <tMBSawPulse_tick+0x772>
    43e4:	eddf 5a69 	vldr	s11, [pc, #420]	; 458c <tMBSawPulse_tick+0x3cc>
    43e8:	e026      	b.n	4438 <tMBSawPulse_tick+0x278>
    sw = w * c->syncdir;
    43ea:	ed94 9a05 	vldr	s18, [r4, #20]
    else if (!k)
    43ee:	ee1b 3a90 	vmov	r3, s23
    float inv_sw = c->_inv_w * c->syncdir;
    43f2:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    43f6:	ee67 7a89 	vmul.f32	s15, s15, s18
    float inv_sw = c->_inv_w * c->syncdir;
    43fa:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
    43fe:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    4402:	ee37 7a87 	vadd.f32	s14, s15, s14
		if (sw > 0)
    4406:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
    440a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    440e:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    4412:	2b00      	cmp	r3, #0
    4414:	f43f af17 	beq.w	4246 <tMBSawPulse_tick+0x86>
		if (sw > 0)
    4418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    441c:	f340 814e 	ble.w	46bc <tMBSawPulse_tick+0x4fc>
			if (p >= 1.0f) {
    4420:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    4424:	eeb4 8ae8 	vcmpe.f32	s16, s17
    4428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    442c:	f280 80b4 	bge.w	4598 <tMBSawPulse_tick+0x3d8>
    c->_k = k;
    4430:	eef8 5aeb 	vcvt.f32.s32	s11, s23
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    4434:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    4438:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    443c:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
    443e:	ee2a 7a8b 	vmul.f32	s14, s21, s22
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    4442:	b2fa      	uxtb	r2, r7
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    4444:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    4448:	ee76 6ac8 	vsub.f32	s13, s13, s16
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    444c:	f88d 2005 	strb.w	r2, [sp, #5]
    c->_f[currentSamp] += (x * shape);//pulse
    4450:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4454:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c->_f[currentSamp] += (x * shape);//pulse
    4458:	eea6 7aac 	vfma.f32	s14, s13, s25
    445c:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4460:	2a00      	cmp	r2, #0
    4462:	f000 814d 	beq.w	4700 <tMBSawPulse_tick+0x540>
    4466:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    446a:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    446e:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4472:	2000      	movs	r0, #0
    4474:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
    4478:	4d43      	ldr	r5, [pc, #268]	; (4588 <tMBSawPulse_tick+0x3c8>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    447a:	ebae 0300 	sub.w	r3, lr, r0
    447e:	b29b      	uxth	r3, r3
    4480:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
    4484:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    448c:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4490:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    4494:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    4498:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    449c:	b289      	uxth	r1, r1
    449e:	f8bd 9006 	ldrh.w	r9, [sp, #6]
    44a2:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    44a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    44a8:	fa1f f888 	uxth.w	r8, r8
    44ac:	fa1f f989 	uxth.w	r9, r9
    44b0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    44b4:	eb04 0949 	add.w	r9, r4, r9, lsl #1
    44b8:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
    44bc:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
    44c0:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    44c4:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    44c6:	ed98 6a3c 	vldr	s12, [r8, #240]	; 0xf0
    44ca:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
    44ce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    44d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    44d6:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
    44da:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    44de:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    44e0:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    44e4:	edd9 6a01 	vldr	s13, [r9, #4]
    44e8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    44ec:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    44f0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    44f4:	eee6 7a26 	vfma.f32	s15, s12, s13
    44f8:	edd1 6a3d 	vldr	s13, [r1, #244]	; 0xf4
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    44fc:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    4500:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
    4504:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    4506:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    450a:	d328      	bcc.n	455e <tMBSawPulse_tick+0x39e>
			c->numBLEPs--;
    450c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4510:	3001      	adds	r0, #1
    4512:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
    4516:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    4518:	4290      	cmp	r0, r2
			c->numBLEPs--;
    451a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    451e:	dbac      	blt.n	447a <tMBSawPulse_tick+0x2ba>
    4520:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
    4524:	ee37 7a4a 	vsub.f32	s14, s14, s20
    j = (j+1) & 7;
    4528:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
    452a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    c->_p = p;
    452e:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z); // LP filtering
    4532:	eef0 7a4a 	vmov.f32	s15, s20
    j = (j+1) & 7;
    4536:	f006 0607 	and.w	r6, r6, #7
    c->_x = x;
    453a:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    c->_k = k;
    453e:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    z += 0.5f * (c->_f[j] - z); // LP filtering
    4542:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_j = j;
    4546:	63a6      	str	r6, [r4, #56]	; 0x38
    return -c->out;
    4548:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
    454c:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
    4550:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
    4554:	b002      	add	sp, #8
    4556:	ecbd 8b0e 	vpop	{d8-d14}
    455a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    455e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4562:	3001      	adds	r0, #1
    4564:	4283      	cmp	r3, r0
    4566:	dc88      	bgt.n	447a <tMBSawPulse_tick+0x2ba>
    4568:	e7da      	b.n	4520 <tMBSawPulse_tick+0x360>
        else if (sw < 0) p = 1.0f - eof_offset;
    456a:	f100 8110 	bmi.w	478e <tMBSawPulse_tick+0x5ce>
		 if (!k)
    456e:	ee1b 3a90 	vmov	r3, s23
    4572:	2b00      	cmp	r3, #0
    4574:	f040 826f 	bne.w	4a56 <tMBSawPulse_tick+0x896>
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    4578:	eeb0 8a68 	vmov.f32	s16, s17
    457c:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    4580:	eddf 5a02 	vldr	s11, [pc, #8]	; 458c <tMBSawPulse_tick+0x3cc>
    4584:	e758      	b.n	4438 <tMBSawPulse_tick+0x278>
    4586:	bf00      	nop
    4588:	2401ec8c 	.word	0x2401ec8c
	...
    4594:	42800000 	.word	0x42800000
	i = lrintf(r - 0.5f);
    4598:	eefe 9a00 	vmov.f32	s19, #224	; 0xbf000000 -0.5
    459c:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 4594 <tMBSawPulse_tick+0x3d4>
				p -= 1.0f;
    45a0:	ee38 8a68 	vsub.f32	s16, s16, s17
	r = MINBLEP_PHASES * phase * inv_w;
    45a4:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
    45a8:	eeb0 0a69 	vmov.f32	s0, s19
    45ac:	eea9 0a08 	vfma.f32	s0, s18, s16
    45b0:	f000 fcba 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    45b4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    45b8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
			if (!k && p >= b) {
    45bc:	eeb4 dac8 	vcmpe.f32	s26, s16
	r -= (float)i;
    45c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    45c4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    45c8:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    45ca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    45ce:	3201      	adds	r2, #1
			if (!k && p >= b) {
    45d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    45d4:	f003 053f 	and.w	r5, r3, #63	; 0x3f
	r -= (float)i;
    45d8:	eed9 7a08 	vfnms.f32	s15, s18, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    45dc:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
    45e0:	eb04 0345 	add.w	r3, r4, r5, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    45e4:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
	c->BLEPindices[c->mostRecentBLEP] = i;
    45e8:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    45ec:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    45f0:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    45f4:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    45f8:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
			if (!k && p >= b) {
    45fc:	f200 8302 	bhi.w	4c04 <tMBSawPulse_tick+0xa44>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    4600:	ee38 da4d 	vsub.f32	s26, s16, s26
	i = lrintf(r - 0.5f);
    4604:	eeb0 0a69 	vmov.f32	s0, s19
				x = -0.5f;
    4608:	eef0 aa69 	vmov.f32	s21, s19
	i = lrintf(r - 0.5f);
    460c:	eead 0a09 	vfma.f32	s0, s26, s18
    4610:	f000 fc8a 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    4614:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4618:	1c6b      	adds	r3, r5, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    461a:	1c7a      	adds	r2, r7, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    461c:	eef1 7a4b 	vneg.f32	s15, s22
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4620:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    4624:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
    462c:	eef0 5a68 	vmov.f32	s11, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4630:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4634:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	r -= (float)i;
    4638:	ee9d 7a09 	vfnms.f32	s14, s26, s18
	c->BLEPindices[c->mostRecentBLEP] = i;
    463c:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    4640:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4644:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4648:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    464c:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4650:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
}
    4654:	e6f0      	b.n	4438 <tMBSawPulse_tick+0x278>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    4656:	ed5f 8a31 	vldr	s17, [pc, #-196]	; 4594 <tMBSawPulse_tick+0x3d4>
    465a:	ee38 da4d 	vsub.f32	s26, s16, s26
	i = lrintf(r - 0.5f);
    465e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    4662:	ee69 8a28 	vmul.f32	s17, s18, s17
				x = -0.5f;
    4666:	eef0 aa40 	vmov.f32	s21, s0
	i = lrintf(r - 0.5f);
    466a:	eead 0a28 	vfma.f32	s0, s26, s17
    466e:	f000 fc5b 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    4672:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4676:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    467a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    467e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4682:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4686:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    4688:	eef1 7a4b 	vneg.f32	s15, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    468c:	3201      	adds	r2, #1
}
    468e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
    4696:	ee9d 7a28 	vfnms.f32	s14, s26, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    469a:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
    469e:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    46a2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	c->BLEPindices[c->mostRecentBLEP] = i;
    46a6:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    46aa:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    46ae:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    46b2:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    46b6:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
}
    46ba:	e5d2      	b.n	4262 <tMBSawPulse_tick+0xa2>
		else if (sw < 0)
    46bc:	f57f aeb8 	bpl.w	4430 <tMBSawPulse_tick+0x270>
			if (p < b) {
    46c0:	eeb4 8acd 	vcmpe.f32	s16, s26
    46c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    46c8:	d430      	bmi.n	472c <tMBSawPulse_tick+0x56c>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    46ca:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
			if (p < 0.0f) {
    46ce:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    46d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    46d6:	f100 8299 	bmi.w	4c0c <tMBSawPulse_tick+0xa4c>
    c->_k = k;
    46da:	eef8 5aeb 	vcvt.f32.s32	s11, s23
    46de:	e6ab      	b.n	4438 <tMBSawPulse_tick+0x278>
			if (p < 0.0f) {
    46e0:	eeb5 8a40 	vcmp.f32	s16, #0.0
    46e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    46e8:	d505      	bpl.n	46f6 <tMBSawPulse_tick+0x536>
    46ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    46ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    46f2:	f100 8231 	bmi.w	4b58 <tMBSawPulse_tick+0x998>
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    46f6:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    46fa:	ed5f 5a5c 	vldr	s11, [pc, #-368]	; 458c <tMBSawPulse_tick+0x3cc>
    46fe:	e69b      	b.n	4438 <tMBSawPulse_tick+0x278>
    z += 0.5f * (c->_f[j] - z); // LP filtering
    4700:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    4704:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    4708:	e70c      	b.n	4524 <tMBSawPulse_tick+0x364>
				 if (p_at_reset >= 1.0f)
    470a:	eeb4 cae9 	vcmpe.f32	s24, s19
    470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4712:	f280 8142 	bge.w	499a <tMBSawPulse_tick+0x7da>
    4716:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 4594 <tMBSawPulse_tick+0x3d4>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    471a:	ee1b 8a90 	vmov	r8, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    471e:	f8b4 506a 	ldrh.w	r5, [r4, #106]	; 0x6a
    4722:	ee29 9a27 	vmul.f32	s18, s18, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4726:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    472a:	e62d      	b.n	4388 <tMBSawPulse_tick+0x1c8>
	r = MINBLEP_PHASES * phase * inv_w;
    472c:	ed5f 8a67 	vldr	s17, [pc, #-412]	; 4594 <tMBSawPulse_tick+0x3d4>
    4730:	ee38 da4d 	vsub.f32	s26, s16, s26
	i = lrintf(r - 0.5f);
    4734:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 0;
    4738:	ed5f ba6b 	vldr	s23, [pc, #-428]	; 4590 <tMBSawPulse_tick+0x3d0>
    473c:	ee69 8a28 	vmul.f32	s17, s18, s17
				x = 0.5f;
    4740:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
    4744:	eea8 0a8d 	vfma.f32	s0, s17, s26
    4748:	f000 fbee 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    474c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4750:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4754:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    4758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    475c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4760:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4762:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
    4768:	eed8 7a8d 	vfnms.f32	s15, s17, s26
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    476c:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
    4770:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4774:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	c->BLEPindices[c->mostRecentBLEP] = i;
    4778:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    477c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4780:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4784:	ed82 ba3d 	vstr	s22, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4788:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
}
    478c:	e79f      	b.n	46ce <tMBSawPulse_tick+0x50e>
		 if (!k)
    478e:	ee1b 3a90 	vmov	r3, s23
        else if (sw < 0) p = 1.0f - eof_offset;
    4792:	ee79 dac8 	vsub.f32	s27, s19, s16
		 if (!k)
    4796:	2b00      	cmp	r3, #0
    4798:	f040 819a 	bne.w	4ad0 <tMBSawPulse_tick+0x910>
				 if (p_at_reset < 0.0f)
    479c:	eeb5 ca40 	vcmp.f32	s24, #0.0
			 else if (sw < 0)
    47a0:	f04f 0801 	mov.w	r8, #1
				 if (p_at_reset < 0.0f)
    47a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    47a8:	f140 80ba 	bpl.w	4920 <tMBSawPulse_tick+0x760>
	i = lrintf(r - 0.5f);
    47ac:	eebe ea00 	vmov.f32	s28, #224	; 0xbf000000 -0.5
    47b0:	ed5f 7a88 	vldr	s15, [pc, #-544]	; 4594 <tMBSawPulse_tick+0x3d4>
					 p_at_reset += 1.0f;
    47b4:	ee3c ca29 	vadd.f32	s24, s24, s19
	r = MINBLEP_PHASES * phase * inv_w;
    47b8:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
    47bc:	eeb0 0a4e 	vmov.f32	s0, s28
    47c0:	eea9 0a28 	vfma.f32	s0, s18, s17
    47c4:	f000 fbb0 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    47c8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    47cc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
				 if (k && p_at_reset < b)
    47d0:	eeb4 dacc 	vcmpe.f32	s26, s24
	r -= (float)i;
    47d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    47d8:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    47dc:	4443      	add	r3, r8
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    47de:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    47e2:	4442      	add	r2, r8
				 if (k && p_at_reset < b)
    47e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    47e8:	f003 053f 	and.w	r5, r3, #63	; 0x3f
	r -= (float)i;
    47ec:	eed9 7a28 	vfnms.f32	s15, s18, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    47f0:	f002 073f 	and.w	r7, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    47f4:	4ad4      	ldr	r2, [pc, #848]	; (4b48 <tMBSawPulse_tick+0x988>)
	c->BLEPindices[c->mostRecentBLEP] = i;
    47f6:	eb04 0345 	add.w	r3, r4, r5, lsl #1
    47fa:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    47fe:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    4802:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4806:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    480a:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
				 if (k && p_at_reset < b)
    480e:	f340 828f 	ble.w	4d30 <tMBSawPulse_tick+0xb70>
	r = MINBLEP_PHASES * phase * inv_w;
    4812:	ee38 8a4d 	vsub.f32	s16, s16, s26
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4816:	4445      	add	r5, r8
	i = lrintf(r - 0.5f);
    4818:	eeb0 0a4e 	vmov.f32	s0, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    481c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
					 x = 0.5f;
    4820:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    4824:	ee38 8a0c 	vadd.f32	s16, s16, s24
	i = lrintf(r - 0.5f);
    4828:	eea9 0a08 	vfma.f32	s0, s18, s16
    482c:	f000 fb7c 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    4830:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
    4834:	eb04 0345 	add.w	r3, r4, r5, lsl #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4838:	eb07 0208 	add.w	r2, r7, r8
	r -= (float)i;
    483c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4840:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4844:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
    4848:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    484c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	r -= (float)i;
    4850:	eed9 7a08 	vfnms.f32	s15, s18, s16
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4854:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4858:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
				x = 0.5f;
    485c:	eeb0 8a6d 	vmov.f32	s16, s27
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    4860:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4864:	3501      	adds	r5, #1
	i = lrintf(r - 0.5f);
    4866:	eefe 9a00 	vmov.f32	s19, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    486a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    486e:	ee7d 8ae7 	vsub.f32	s17, s27, s15
	i = lrintf(r - 0.5f);
    4872:	eeb0 0a69 	vmov.f32	s0, s19
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    4876:	ee7b 7a67 	vsub.f32	s15, s22, s15
	i = lrintf(r - 0.5f);
    487a:	eea8 0a89 	vfma.f32	s0, s17, s18
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    487e:	ee27 ca8c 	vmul.f32	s24, s15, s24
	i = lrintf(r - 0.5f);
    4882:	f000 fb51 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    4886:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
    488a:	eb04 0345 	add.w	r3, r4, r5, lsl #1
    488e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4892:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
	r -= (float)i;
    4896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    489a:	1c7a      	adds	r2, r7, #1
	c->BLEPindices[c->mostRecentBLEP] = i;
    489c:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    48a0:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    48a4:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	r -= (float)i;
    48a8:	eed8 7a89 	vfnms.f32	s15, s17, s18
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    48ac:	ed83 ca3d 	vstr	s24, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    48b0:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
			if (!k) {
    48b4:	ee1b 3a90 	vmov	r3, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    48b8:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
			if (!k) {
    48bc:	2b00      	cmp	r3, #0
    48be:	f000 81d8 	beq.w	4c72 <tMBSawPulse_tick+0xab2>
			if (p < b) {
    48c2:	eeb4 daed 	vcmpe.f32	s26, s27
    48c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    48ca:	f77f af06 	ble.w	46da <tMBSawPulse_tick+0x51a>
	r = MINBLEP_PHASES * phase * inv_w;
    48ce:	ee3d dacd 	vsub.f32	s26, s27, s26
	i = lrintf(r - 0.5f);
    48d2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    48d6:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
    48da:	eead 0a09 	vfma.f32	s0, s26, s18
    48de:	f000 fb23 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    48e2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    48e6:	1c6b      	adds	r3, r5, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    48e8:	1c7a      	adds	r2, r7, #1
	r -= (float)i;
    48ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    48ee:	eddf 5a97 	vldr	s11, [pc, #604]	; 4b4c <tMBSawPulse_tick+0x98c>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    48f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    48f6:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    48fa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    48fe:	eedd 7a09 	vfnms.f32	s15, s26, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4902:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	c->BLEPindices[c->mostRecentBLEP] = i;
    4906:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    490a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    490e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4912:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4916:	ed82 ba3d 	vstr	s22, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    491a:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
}
    491e:	e58b      	b.n	4438 <tMBSawPulse_tick+0x278>
		else if (sw < 0)
    4920:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    4924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4928:	f100 81be 	bmi.w	4ca8 <tMBSawPulse_tick+0xae8>
        else if (sw < 0) p = 1.0f - eof_offset;
    492c:	eef0 8a6d 	vmov.f32	s17, s27
    4930:	e622      	b.n	4578 <tMBSawPulse_tick+0x3b8>
	i = lrintf(r - 0.5f);
    4932:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    4936:	ee38 da4d 	vsub.f32	s26, s16, s26
	i = lrintf(r - 0.5f);
    493a:	eeb0 0a6a 	vmov.f32	s0, s21
    493e:	eead 0a09 	vfma.f32	s0, s26, s18
    4942:	f000 faf1 	bl	4f28 <__lrintf_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4946:	1c6b      	adds	r3, r5, #1
	r -= (float)i;
    4948:	ee07 0a10 	vmov	s14, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    494c:	1c7a      	adds	r2, r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    494e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    4952:	eef1 7a4b 	vneg.f32	s15, s22
	r -= (float)i;
    4956:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    495a:	f002 073f 	and.w	r7, r2, #63	; 0x3f
}
    495e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4962:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4966:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    496a:	e665      	b.n	4638 <tMBSawPulse_tick+0x478>
    496c:	3501      	adds	r5, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    496e:	1c7a      	adds	r2, r7, #1
				x = 0.5f;
    4970:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4974:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4978:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
    497c:	eb04 0345 	add.w	r3, r4, r5, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4980:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
	c->BLEPindices[c->mostRecentBLEP] = i;
    4984:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4988:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    498c:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4990:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4994:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
}
    4998:	e51e      	b.n	43d8 <tMBSawPulse_tick+0x218>
					 p_at_reset -= 1.0f;
    499a:	ee3c ca69 	vsub.f32	s24, s24, s19
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    499e:	eddf 7a6d 	vldr	s15, [pc, #436]	; 4b54 <tMBSawPulse_tick+0x994>
	i = lrintf(r - 0.5f);
    49a2:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
    49a6:	ee29 9a27 	vmul.f32	s18, s18, s15
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    49aa:	ee78 8a0c 	vadd.f32	s17, s16, s24
	i = lrintf(r - 0.5f);
    49ae:	eeb0 0a6b 	vmov.f32	s0, s23
    49b2:	eea8 0a89 	vfma.f32	s0, s17, s18
    49b6:	f000 fab7 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    49ba:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    49be:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
				 if (!k && p_at_reset >= b)
    49c2:	eeb4 dacc 	vcmpe.f32	s26, s24
	r -= (float)i;
    49c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    49ca:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    49ce:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    49d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    49d4:	3201      	adds	r2, #1
				 if (!k && p_at_reset >= b)
    49d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    49da:	f003 053f 	and.w	r5, r3, #63	; 0x3f
	r -= (float)i;
    49de:	eed8 7a89 	vfnms.f32	s15, s17, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    49e2:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
    49e6:	eb04 0345 	add.w	r3, r4, r5, lsl #1
    49ea:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    49ee:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    49f2:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    49f6:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    49fa:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
				 if (!k && p_at_reset >= b)
    49fe:	f200 818d 	bhi.w	4d1c <tMBSawPulse_tick+0xb5c>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    4a02:	ee78 8a4d 	vsub.f32	s17, s16, s26
					 k = 1;
    4a06:	f04f 0801 	mov.w	r8, #1
	i = lrintf(r - 0.5f);
    4a0a:	eeb0 0a6b 	vmov.f32	s0, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4a0e:	4445      	add	r5, r8
					 x = -0.5f;
    4a10:	eef0 aa6b 	vmov.f32	s21, s23
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    4a14:	ee78 8a8c 	vadd.f32	s17, s17, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4a18:	f005 053f 	and.w	r5, r5, #63	; 0x3f
	i = lrintf(r - 0.5f);
    4a1c:	eea8 0a89 	vfma.f32	s0, s17, s18
    4a20:	f000 fa82 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    4a24:	ee07 0a10 	vmov	s14, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
    4a28:	eb04 0345 	add.w	r3, r4, r5, lsl #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4a2c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    4a30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4a34:	eb07 0208 	add.w	r2, r7, r8
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    4a38:	eef1 7a4b 	vneg.f32	s15, s22
	c->BLEPindices[c->mostRecentBLEP] = i;
    4a3c:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4a40:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4a44:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	r -= (float)i;
    4a48:	ee98 7a89 	vfnms.f32	s14, s17, s18
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4a4c:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4a50:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
}
    4a54:	e498      	b.n	4388 <tMBSawPulse_tick+0x1c8>
			 else if (sw < 0)
    4a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    4a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a5e:	d435      	bmi.n	4acc <tMBSawPulse_tick+0x90c>
    c->_k = k;
    4a60:	eef8 5aeb 	vcvt.f32.s32	s11, s23
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    4a64:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    p += sw - (int)sw;
    4a68:	eeb0 8a68 	vmov.f32	s16, s17
    4a6c:	e4e4      	b.n	4438 <tMBSawPulse_tick+0x278>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    4a6e:	ee29 9a27 	vmul.f32	s18, s18, s15
					 k = 1;
    4a72:	f04f 0801 	mov.w	r8, #1
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    4a76:	ee78 8acd 	vsub.f32	s17, s17, s26
	i = lrintf(r - 0.5f);
    4a7a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = -0.5f;
    4a7e:	eef0 aa40 	vmov.f32	s21, s0
	i = lrintf(r - 0.5f);
    4a82:	eea8 0a89 	vfma.f32	s0, s17, s18
    4a86:	f000 fa4f 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    4a8a:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4a8e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4a92:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    4a96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4a9a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4a9e:	4443      	add	r3, r8
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    4aa0:	eef1 7a4b 	vneg.f32	s15, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4aa4:	4442      	add	r2, r8
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4aa6:	f003 053f 	and.w	r5, r3, #63	; 0x3f
	r -= (float)i;
    4aaa:	ee98 7a89 	vfnms.f32	s14, s17, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4aae:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
    4ab2:	eb04 0345 	add.w	r3, r4, r5, lsl #1
    4ab6:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4aba:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    4abe:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4ac2:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4ac6:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
}
    4aca:	e430      	b.n	432e <tMBSawPulse_tick+0x16e>
    p += sw - (int)sw;
    4acc:	eef0 da68 	vmov.f32	s27, s17
				 if (p_at_reset < b)
    4ad0:	eeb4 dacc 	vcmpe.f32	s26, s24
    4ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ad8:	f300 80f1 	bgt.w	4cbe <tMBSawPulse_tick+0xafe>
    4adc:	eddf 7a1d 	vldr	s15, [pc, #116]	; 4b54 <tMBSawPulse_tick+0x994>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4ae0:	f8b4 506a 	ldrh.w	r5, [r4, #106]	; 0x6a
    4ae4:	ee29 9a27 	vmul.f32	s18, s18, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4ae8:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
				 if (p_at_reset < 0.0f)
    4aec:	eeb5 cac0 	vcmpe.f32	s24, #0.0
    4af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4af4:	f57f aeb2 	bpl.w	485c <tMBSawPulse_tick+0x69c>
	i = lrintf(r - 0.5f);
    4af8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4afc:	3501      	adds	r5, #1
					 p_at_reset += 1.0f;
    4afe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
					 k = 1;
    4b02:	eddf ba13 	vldr	s23, [pc, #76]	; 4b50 <tMBSawPulse_tick+0x990>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4b06:	f005 053f 	and.w	r5, r5, #63	; 0x3f
	i = lrintf(r - 0.5f);
    4b0a:	eeb0 0a6a 	vmov.f32	s0, s21
					 p_at_reset += 1.0f;
    4b0e:	ee3c ca27 	vadd.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
    4b12:	eea8 0a89 	vfma.f32	s0, s17, s18
    4b16:	f000 fa07 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    4b1a:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4b1e:	1c7a      	adds	r2, r7, #1
	c->BLEPindices[c->mostRecentBLEP] = i;
    4b20:	eb04 0345 	add.w	r3, r4, r5, lsl #1
	r -= (float)i;
    4b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4b28:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4b2c:	f002 073f 	and.w	r7, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4b30:	4a05      	ldr	r2, [pc, #20]	; (4b48 <tMBSawPulse_tick+0x988>)
	c->BLEPindices[c->mostRecentBLEP] = i;
    4b32:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4b36:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	r -= (float)i;
    4b3a:	eed8 7a89 	vfnms.f32	s15, s17, s18
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4b3e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4b42:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
}
    4b46:	e689      	b.n	485c <tMBSawPulse_tick+0x69c>
    4b48:	bf800000 	.word	0xbf800000
    4b4c:	00000000 	.word	0x00000000
    4b50:	00000001 	.word	0x00000001
    4b54:	42800000 	.word	0x42800000
	i = lrintf(r - 0.5f);
    4b58:	eefe 9a00 	vmov.f32	s19, #224	; 0xbf000000 -0.5
    4b5c:	ed5f 8a03 	vldr	s17, [pc, #-12]	; 4b54 <tMBSawPulse_tick+0x994>
	r = MINBLEP_PHASES * phase * inv_w;
    4b60:	ee68 aa09 	vmul.f32	s21, s16, s18
				p += 1.0f;
    4b64:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
    4b68:	eeb0 0a69 	vmov.f32	s0, s19
				p += 1.0f;
    4b6c:	ee38 8a2b 	vadd.f32	s16, s16, s23
	i = lrintf(r - 0.5f);
    4b70:	eeaa 0aa8 	vfma.f32	s0, s21, s17
    4b74:	f000 f9d8 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    4b78:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4b7c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
			if (k && p < b) {
    4b80:	eeb4 dac8 	vcmpe.f32	s26, s16
	r -= (float)i;
    4b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4b88:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4b8c:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4b8e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4b92:	3201      	adds	r2, #1
			if (k && p < b) {
    4b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4b98:	f003 053f 	and.w	r5, r3, #63	; 0x3f
	r -= (float)i;
    4b9c:	eeda 7aa8 	vfnms.f32	s15, s21, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4ba0:	f002 073f 	and.w	r7, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4ba4:	4a67      	ldr	r2, [pc, #412]	; (4d44 <tMBSawPulse_tick+0xb84>)
	c->BLEPindices[c->mostRecentBLEP] = i;
    4ba6:	eb04 0345 	add.w	r3, r4, r5, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4baa:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
	c->BLEPindices[c->mostRecentBLEP] = i;
    4bae:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4bb2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    4bb6:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4bba:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4bbe:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
			if (k && p < b) {
    4bc2:	f340 80af 	ble.w	4d24 <tMBSawPulse_tick+0xb64>
	r = MINBLEP_PHASES * phase * inv_w;
    4bc6:	ee38 da4d 	vsub.f32	s26, s16, s26
    4bca:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
    4bce:	eeb0 0a69 	vmov.f32	s0, s19
				x = 0.5f;
    4bd2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
    4bd6:	eea8 0a8d 	vfma.f32	s0, s17, s26
    4bda:	f000 f9a5 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    4bde:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4be2:	1c6b      	adds	r3, r5, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4be4:	1c7a      	adds	r2, r7, #1
	r -= (float)i;
    4be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    4bea:	eddf 5a57 	vldr	s11, [pc, #348]	; 4d48 <tMBSawPulse_tick+0xb88>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4bf2:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4bf6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    4bfa:	eed8 7a8d 	vfnms.f32	s15, s17, s26
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4bfe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    4c02:	e680      	b.n	4906 <tMBSawPulse_tick+0x746>
				x = 0.5f;
    4c04:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    4c08:	f7ff bbec 	b.w	43e4 <tMBSawPulse_tick+0x224>
	i = lrintf(r - 0.5f);
    4c0c:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    4c10:	eddf 8a4e 	vldr	s17, [pc, #312]	; 4d4c <tMBSawPulse_tick+0xb8c>
	r = MINBLEP_PHASES * phase * inv_w;
    4c14:	ee28 9a09 	vmul.f32	s18, s16, s18
				p += 1.0f;
    4c18:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
    4c1c:	eeb0 0a6a 	vmov.f32	s0, s21
				p += 1.0f;
    4c20:	ee38 8a29 	vadd.f32	s16, s16, s19
	i = lrintf(r - 0.5f);
    4c24:	eea9 0a28 	vfma.f32	s0, s18, s17
    4c28:	f000 f97e 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    4c2c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4c30:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4c34:	1c7a      	adds	r2, r7, #1
	r -= (float)i;
    4c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4c3a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4c3e:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4c40:	f002 073f 	and.w	r7, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4c44:	4a3f      	ldr	r2, [pc, #252]	; (4d44 <tMBSawPulse_tick+0xb84>)
}
    4c46:	eef0 5a69 	vmov.f32	s11, s19
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
    4c4e:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
    4c52:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4c56:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
	c->BLEPindices[c->mostRecentBLEP] = i;
    4c5a:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4c5e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    4c62:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4c66:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4c6a:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
}
    4c6e:	f7ff bbe3 	b.w	4438 <tMBSawPulse_tick+0x278>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4c72:	1c6b      	adds	r3, r5, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4c74:	1c7a      	adds	r2, r7, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
    4c76:	eeb1 7a4b 	vneg.f32	s14, s22
				k = 1;
    4c7a:	eddf ba35 	vldr	s23, [pc, #212]	; 4d50 <tMBSawPulse_tick+0xb90>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4c7e:	f003 053f 	and.w	r5, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4c82:	f002 073f 	and.w	r7, r2, #63	; 0x3f
				x = -0.5f;
    4c86:	eef0 aa69 	vmov.f32	s21, s19
	c->BLEPindices[c->mostRecentBLEP] = i;
    4c8a:	eb04 0345 	add.w	r3, r4, r5, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4c8e:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
	c->BLEPindices[c->mostRecentBLEP] = i;
    4c92:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4c96:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    4c9a:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4c9e:	ed83 7a3d 	vstr	s14, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4ca2:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
}
    4ca6:	e60c      	b.n	48c2 <tMBSawPulse_tick+0x702>
    4ca8:	eddf 7a28 	vldr	s15, [pc, #160]	; 4d4c <tMBSawPulse_tick+0xb8c>
        else if (sw < 0) p = 1.0f - eof_offset;
    4cac:	eeb0 8a6d 	vmov.f32	s16, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4cb0:	f8b4 506a 	ldrh.w	r5, [r4, #106]	; 0x6a
    4cb4:	ee29 9a27 	vmul.f32	s18, s18, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4cb8:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
    4cbc:	e5d0      	b.n	4860 <tMBSawPulse_tick+0x6a0>
	r = MINBLEP_PHASES * phase * inv_w;
    4cbe:	eddf 7a23 	vldr	s15, [pc, #140]	; 4d4c <tMBSawPulse_tick+0xb8c>
    4cc2:	ee38 8acd 	vsub.f32	s16, s17, s26
	i = lrintf(r - 0.5f);
    4cc6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
    4cca:	ee0b 8a90 	vmov	s23, r8
    4cce:	ee29 9a27 	vmul.f32	s18, s18, s15
					 x = 0.5f;
    4cd2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
    4cd6:	eea9 0a08 	vfma.f32	s0, s18, s16
    4cda:	f000 f925 	bl	4f28 <__lrintf_veneer>
	r -= (float)i;
    4cde:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4ce2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    4ce6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
    4cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4cee:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4cf2:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4cf4:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    4cf6:	f003 053f 	and.w	r5, r3, #63	; 0x3f
	r -= (float)i;
    4cfa:	eed9 7a08 	vfnms.f32	s15, s18, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4cfe:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
    4d02:	eb04 0345 	add.w	r3, r4, r5, lsl #1
    4d06:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    4d0a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    4d0e:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    4d12:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    4d16:	f8a4 7068 	strh.w	r7, [r4, #104]	; 0x68
}
    4d1a:	e6e7      	b.n	4aec <tMBSawPulse_tick+0x92c>
					 x = 0.5f;
    4d1c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    4d20:	f7ff bb32 	b.w	4388 <tMBSawPulse_tick+0x1c8>
    4d24:	eef0 5a6b 	vmov.f32	s11, s23
				x = -0.5f;
    4d28:	eef0 aa69 	vmov.f32	s21, s19
    4d2c:	f7ff bb84 	b.w	4438 <tMBSawPulse_tick+0x278>
					 x = -0.5f;
    4d30:	eef0 aa4e 	vmov.f32	s21, s28
					 k = 1;
    4d34:	ee0b 8a90 	vmov	s23, r8
    4d38:	e590      	b.n	485c <tMBSawPulse_tick+0x69c>
    p += sw - (int)sw;
    4d3a:	eeb0 8a68 	vmov.f32	s16, s17
    4d3e:	f7ff ba7b 	b.w	4238 <tMBSawPulse_tick+0x78>
    4d42:	bf00      	nop
    4d44:	bf800000 	.word	0xbf800000
    4d48:	00000000 	.word	0x00000000
    4d4c:	42800000 	.word	0x42800000
    4d50:	00000001 	.word	0x00000001
    4d54:	f3af 8000 	nop.w
    4d58:	f3af 8000 	nop.w
    4d5c:	f3af 8000 	nop.w

00004d60 <tMBSawPulse_setFreq>:
    _tMBSawPulse* c = *osc;
    4d60:	6803      	ldr	r3, [r0, #0]
    c->_inv_w = 1.0f / c->_w;
    4d62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    4d66:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    c->freq = f;
    4d6a:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    4d6e:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
    4d72:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    4d76:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
    4d7a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
    4d7e:	4770      	bx	lr

00004d80 <tMBSawPulse_sync>:
    _tMBSawPulse* c = *osc;
    4d80:	6803      	ldr	r3, [r0, #0]
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    4d82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
    4d86:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
    4d8a:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
    4d8e:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
    4d92:	eef1 7a67 	vneg.f32	s15, s15
    4d96:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    4d9a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    4d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4da2:	eef4 6ac7 	vcmpe.f32	s13, s14
    4da6:	bfcc      	ite	gt
    4da8:	2201      	movgt	r2, #1
    4daa:	2200      	movle	r2, #0
    4dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4db0:	f002 0201 	and.w	r2, r2, #1
    4db4:	bf88      	it	hi
    4db6:	2200      	movhi	r2, #0
    4db8:	b122      	cbz	r2, 4dc4 <tMBSawPulse_sync+0x44>
    4dba:	eeb5 0a40 	vcmp.f32	s0, #0.0
    4dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dc2:	da04      	bge.n	4dce <tMBSawPulse_sync+0x4e>
    else c->sync = 0.f;
    4dc4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 4ddc <tMBSawPulse_sync+0x5c>
    4dc8:	ed83 7a04 	vstr	s14, [r3, #16]
}
    4dcc:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
    4dce:	ee37 7a66 	vsub.f32	s14, s14, s13
    4dd2:	ee27 7a06 	vmul.f32	s14, s14, s12
    4dd6:	ed83 7a04 	vstr	s14, [r3, #16]
}
    4dda:	4770      	bx	lr
    4ddc:	00000000 	.word	0x00000000

00004de0 <__tVZFilter_setFreqFast_veneer>:
    4de0:	f85f f000 	ldr.w	pc, [pc]	; 4de4 <__tVZFilter_setFreqFast_veneer+0x4>
    4de4:	2400e321 	.word	0x2400e321

00004de8 <__tADSRT_tick_veneer>:
    4de8:	f85f f000 	ldr.w	pc, [pc]	; 4dec <__tADSRT_tick_veneer+0x4>
    4dec:	2400dbf1 	.word	0x2400dbf1

00004df0 <__arm_sin_f32_veneer>:
    4df0:	f85f f000 	ldr.w	pc, [pc]	; 4df4 <__arm_sin_f32_veneer+0x4>
    4df4:	24012a15 	.word	0x24012a15

00004df8 <__powf_veneer>:
    4df8:	f85f f000 	ldr.w	pc, [pc]	; 4dfc <__powf_veneer+0x4>
    4dfc:	24012f29 	.word	0x24012f29

00004e00 <__tMBSaw_setFreq_veneer>:
    4e00:	f85f f000 	ldr.w	pc, [pc]	; 4e04 <__tMBSaw_setFreq_veneer+0x4>
    4e04:	2401251d 	.word	0x2401251d

00004e08 <__tMBPulse_setFreq_veneer>:
    4e08:	f85f f000 	ldr.w	pc, [pc]	; 4e0c <__tMBPulse_setFreq_veneer+0x4>
    4e0c:	24010011 	.word	0x24010011

00004e10 <__tLinearDelay_setDelay_veneer>:
    4e10:	f85f f000 	ldr.w	pc, [pc]	; 4e14 <__tLinearDelay_setDelay_veneer+0x4>
    4e14:	2400d8a5 	.word	0x2400d8a5

00004e18 <__fastdbtoa_veneer>:
    4e18:	f85f f000 	ldr.w	pc, [pc]	; 4e1c <__fastdbtoa_veneer+0x4>
    4e1c:	2400f02d 	.word	0x2400f02d

00004e20 <__tCrusher_setOperation_veneer>:
    4e20:	f85f f000 	ldr.w	pc, [pc]	; 4e24 <__tCrusher_setOperation_veneer+0x4>
    4e24:	2400d9a9 	.word	0x2400d9a9

00004e28 <__tSVF_tick_veneer>:
    4e28:	f85f f000 	ldr.w	pc, [pc]	; 4e2c <__tSVF_tick_veneer+0x4>
    4e2c:	2400dec5 	.word	0x2400dec5

00004e30 <__tMBSineTri_setShape_veneer>:
    4e30:	f85f f000 	ldr.w	pc, [pc]	; 4e34 <__tMBSineTri_setShape_veneer+0x4>
    4e34:	2401209d 	.word	0x2401209d

00004e38 <__tMBSineTri_sync_veneer>:
    4e38:	f85f f000 	ldr.w	pc, [pc]	; 4e3c <__tMBSineTri_sync_veneer+0x4>
    4e3c:	2401203d 	.word	0x2401203d

00004e40 <__tADSRT_setDecay_veneer>:
    4e40:	f85f f000 	ldr.w	pc, [pc]	; 4e44 <__tADSRT_setDecay_veneer+0x4>
    4e44:	2400db2d 	.word	0x2400db2d

00004e48 <__tSimplePoly_noteOff_veneer>:
    4e48:	f85f f000 	ldr.w	pc, [pc]	; 4e4c <__tSimplePoly_noteOff_veneer+0x4>
    4e4c:	2400f44d 	.word	0x2400f44d

00004e50 <__tADSRT_setSustain_veneer>:
    4e50:	f85f f000 	ldr.w	pc, [pc]	; 4e54 <__tADSRT_setSustain_veneer+0x4>
    4e54:	2400db4d 	.word	0x2400db4d

00004e58 <__tCrusher_setQuality_veneer>:
    4e58:	f85f f000 	ldr.w	pc, [pc]	; 4e5c <__tCrusher_setQuality_veneer+0x4>
    4e5c:	2400d9bd 	.word	0x2400d9bd

00004e60 <__tDiodeFilter_tick_veneer>:
    4e60:	f85f f000 	ldr.w	pc, [pc]	; 4e64 <__tDiodeFilter_tick_veneer+0x4>
    4e64:	2400e675 	.word	0x2400e675

00004e68 <__tMBTriangle_sync_veneer>:
    4e68:	f85f f000 	ldr.w	pc, [pc]	; 4e6c <__tMBTriangle_sync_veneer+0x4>
    4e6c:	24011005 	.word	0x24011005

00004e70 <__tMBSineTri_setFreq_veneer>:
    4e70:	f85f f000 	ldr.w	pc, [pc]	; 4e74 <__tMBSineTri_setFreq_veneer+0x4>
    4e74:	2401201d 	.word	0x2401201d

00004e78 <__tSimplePoly_noteOn_veneer>:
    4e78:	f85f f000 	ldr.w	pc, [pc]	; 4e7c <__tSimplePoly_noteOn_veneer+0x4>
    4e7c:	2400f245 	.word	0x2400f245

00004e80 <__tVZFilter_tickEfficient_veneer>:
    4e80:	f85f f000 	ldr.w	pc, [pc]	; 4e84 <__tVZFilter_tickEfficient_veneer+0x4>
    4e84:	2400dff9 	.word	0x2400dff9

00004e88 <__tADSRT_on_veneer>:
    4e88:	f85f f000 	ldr.w	pc, [pc]	; 4e8c <__tADSRT_on_veneer+0x4>
    4e8c:	2400dbbd 	.word	0x2400dbbd

00004e90 <__tADSRT_setAttack_veneer>:
    4e90:	f85f f000 	ldr.w	pc, [pc]	; 4e94 <__tADSRT_setAttack_veneer+0x4>
    4e94:	2400db0d 	.word	0x2400db0d

00004e98 <__tMBTriangle_setFreq_veneer>:
    4e98:	f85f f000 	ldr.w	pc, [pc]	; 4e9c <__tMBTriangle_setFreq_veneer+0x4>
    4e9c:	24010fc1 	.word	0x24010fc1

00004ea0 <__tCrusher_setRound_veneer>:
    4ea0:	f85f f000 	ldr.w	pc, [pc]	; 4ea4 <__tCrusher_setRound_veneer+0x4>
    4ea4:	2400da09 	.word	0x2400da09

00004ea8 <__tExpSmooth_setDest_veneer>:
    4ea8:	f85f f000 	ldr.w	pc, [pc]	; 4eac <__tExpSmooth_setDest_veneer+0x4>
    4eac:	2400de9d 	.word	0x2400de9d

00004eb0 <__tLadderFilter_setFreqFast_veneer>:
    4eb0:	f85f f000 	ldr.w	pc, [pc]	; 4eb4 <__tLadderFilter_setFreqFast_veneer+0x4>
    4eb4:	2400ecd5 	.word	0x2400ecd5

00004eb8 <__tExpSmooth_tick_veneer>:
    4eb8:	f85f f000 	ldr.w	pc, [pc]	; 4ebc <__tExpSmooth_tick_veneer+0x4>
    4ebc:	2400dea5 	.word	0x2400dea5

00004ec0 <__mtof_veneer>:
    4ec0:	f85f f000 	ldr.w	pc, [pc]	; 4ec4 <__mtof_veneer+0x4>
    4ec4:	2400ef81 	.word	0x2400ef81

00004ec8 <__fasterexpf_veneer>:
    4ec8:	f85f f000 	ldr.w	pc, [pc]	; 4ecc <__fasterexpf_veneer+0x4>
    4ecc:	2400edb9 	.word	0x2400edb9

00004ed0 <__tADSRT_setRelease_veneer>:
    4ed0:	f85f f000 	ldr.w	pc, [pc]	; 4ed4 <__tADSRT_setRelease_veneer+0x4>
    4ed4:	2400db79 	.word	0x2400db79

00004ed8 <__LEAF_shaper_veneer>:
    4ed8:	f85f f000 	ldr.w	pc, [pc]	; 4edc <__LEAF_shaper_veneer+0x4>
    4edc:	2400ee19 	.word	0x2400ee19

00004ee0 <__tMBSawPulse_setShape_veneer>:
    4ee0:	f85f f000 	ldr.w	pc, [pc]	; 4ee4 <__tMBSawPulse_setShape_veneer+0x4>
    4ee4:	2401259d 	.word	0x2401259d

00004ee8 <__tDiodeFilter_setFreqFast_veneer>:
    4ee8:	f85f f000 	ldr.w	pc, [pc]	; 4eec <__tDiodeFilter_setFreqFast_veneer+0x4>
    4eec:	2400ea21 	.word	0x2400ea21

00004ef0 <__tCrusher_tick_veneer>:
    4ef0:	f85f f000 	ldr.w	pc, [pc]	; 4ef4 <__tCrusher_tick_veneer+0x4>
    4ef4:	2400d929 	.word	0x2400d929

00004ef8 <__tLinearDelay_tick_veneer>:
    4ef8:	f85f f000 	ldr.w	pc, [pc]	; 4efc <__tLinearDelay_tick_veneer+0x4>
    4efc:	2400d831 	.word	0x2400d831

00004f00 <__tDiodeFilter_setQ_veneer>:
    4f00:	f85f f000 	ldr.w	pc, [pc]	; 4f04 <__tDiodeFilter_setQ_veneer+0x4>
    4f04:	2400ea61 	.word	0x2400ea61

00004f08 <__tSVF_setQ_veneer>:
    4f08:	f85f f000 	ldr.w	pc, [pc]	; 4f0c <__tSVF_setQ_veneer+0x4>
    4f0c:	2400df9d 	.word	0x2400df9d

00004f10 <__tMBSineTri_tick_veneer>:
    4f10:	f85f f000 	ldr.w	pc, [pc]	; 4f14 <__tMBSineTri_tick_veneer+0x4>
    4f14:	24011065 	.word	0x24011065

00004f18 <__tCycle_tick_veneer>:
    4f18:	f85f f000 	ldr.w	pc, [pc]	; 4f1c <__tCycle_tick_veneer+0x4>
    4f1c:	2400f501 	.word	0x2400f501

00004f20 <__tMBPulse_sync_veneer>:
    4f20:	f85f f000 	ldr.w	pc, [pc]	; 4f24 <__tMBPulse_sync_veneer+0x4>
    4f24:	2401004d 	.word	0x2401004d

00004f28 <__lrintf_veneer>:
    4f28:	f85f f000 	ldr.w	pc, [pc]	; 4f2c <__lrintf_veneer+0x4>
    4f2c:	24012e79 	.word	0x24012e79

00004f30 <__tCompressor_tick_veneer>:
    4f30:	f85f f000 	ldr.w	pc, [pc]	; 4f34 <__tCompressor_tick_veneer+0x4>
    4f34:	2400da3d 	.word	0x2400da3d

00004f38 <__tMBSaw_sync_veneer>:
    4f38:	f85f f000 	ldr.w	pc, [pc]	; 4f3c <__tMBSaw_sync_veneer+0x4>
    4f3c:	2401253d 	.word	0x2401253d

00004f40 <__fasterdbtoa_veneer>:
    4f40:	f85f f000 	ldr.w	pc, [pc]	; 4f44 <__fasterdbtoa_veneer+0x4>
    4f44:	2400f03d 	.word	0x2400f03d

00004f48 <__tHighpass_tick_veneer>:
    4f48:	f85f f000 	ldr.w	pc, [pc]	; 4f4c <__tHighpass_tick_veneer+0x4>
    4f4c:	2400dfd9 	.word	0x2400dfd9

00004f50 <__tVZFilter_setResonance_veneer>:
    4f50:	f85f f000 	ldr.w	pc, [pc]	; 4f54 <__tVZFilter_setResonance_veneer+0x4>
    4f54:	2400e63d 	.word	0x2400e63d

00004f58 <__memset_veneer>:
    4f58:	f85f f000 	ldr.w	pc, [pc]	; 4f5c <__memset_veneer+0x4>
    4f5c:	24012b45 	.word	0x24012b45

00004f60 <__tMBTriangle_setWidth_veneer>:
    4f60:	f85f f000 	ldr.w	pc, [pc]	; 4f64 <__tMBTriangle_setWidth_veneer+0x4>
    4f64:	24010fe1 	.word	0x24010fe1

00004f68 <__tanhf_veneer>:
    4f68:	f85f f000 	ldr.w	pc, [pc]	; 4f6c <__tanhf_veneer+0x4>
    4f6c:	24013241 	.word	0x24013241

00004f70 <__tMBPulse_tick_veneer>:
    4f70:	f85f f000 	ldr.w	pc, [pc]	; 4f74 <__tMBPulse_tick_veneer+0x4>
    4f74:	2400f589 	.word	0x2400f589

00004f78 <__tADSRT_setLeakFactor_veneer>:
    4f78:	f85f f000 	ldr.w	pc, [pc]	; 4f7c <__tADSRT_setLeakFactor_veneer+0x4>
    4f7c:	2400db99 	.word	0x2400db99

00004f80 <__tLadderFilter_setQ_veneer>:
    4f80:	f85f f000 	ldr.w	pc, [pc]	; 4f84 <__tLadderFilter_setQ_veneer+0x4>
    4f84:	2400ed1d 	.word	0x2400ed1d

00004f88 <__tCrusher_setSamplingRatio_veneer>:
    4f88:	f85f f000 	ldr.w	pc, [pc]	; 4f8c <__tCrusher_setSamplingRatio_veneer+0x4>
    4f8c:	2400da11 	.word	0x2400da11

00004f90 <__tCycle_setFreq_veneer>:
    4f90:	f85f f000 	ldr.w	pc, [pc]	; 4f94 <__tCycle_setFreq_veneer+0x4>
    4f94:	2400f54d 	.word	0x2400f54d

00004f98 <__tVZFilter_setFreq_veneer>:
    4f98:	f85f f000 	ldr.w	pc, [pc]	; 4f9c <__tVZFilter_setFreq_veneer+0x4>
    4f9c:	2400e2f1 	.word	0x2400e2f1

00004fa0 <__tLadderFilter_tick_veneer>:
    4fa0:	f85f f000 	ldr.w	pc, [pc]	; 4fa4 <__tLadderFilter_tick_veneer+0x4>
    4fa4:	2400ea89 	.word	0x2400ea89

00004fa8 <__tSVF_setFreqFast_veneer>:
    4fa8:	f85f f000 	ldr.w	pc, [pc]	; 4fac <__tSVF_setFreqFast_veneer+0x4>
    4fac:	2400df31 	.word	0x2400df31

00004fb0 <__tADSRT_off_veneer>:
    4fb0:	f85f f000 	ldr.w	pc, [pc]	; 4fb4 <__tADSRT_off_veneer+0x4>
    4fb4:	2400dbe1 	.word	0x2400dbe1

00004fb8 <__tMBTriangle_tick_veneer>:
    4fb8:	f85f f000 	ldr.w	pc, [pc]	; 4fbc <__tMBTriangle_tick_veneer+0x4>
    4fbc:	240100ad 	.word	0x240100ad

00004fc0 <__tVZFilter_setGain_veneer>:
    4fc0:	f85f f000 	ldr.w	pc, [pc]	; 4fc4 <__tVZFilter_setGain_veneer+0x4>
    4fc4:	2400e605 	.word	0x2400e605

00004fc8 <__tMBSaw_tick_veneer>:
    4fc8:	f85f f000 	ldr.w	pc, [pc]	; 4fcc <__tMBSaw_tick_veneer+0x4>
    4fcc:	240120a5 	.word	0x240120a5

00004fd0 <__tMBPulse_setWidth_veneer>:
    4fd0:	f85f f000 	ldr.w	pc, [pc]	; 4fd4 <__tMBPulse_setWidth_veneer+0x4>
    4fd4:	24010031 	.word	0x24010031
