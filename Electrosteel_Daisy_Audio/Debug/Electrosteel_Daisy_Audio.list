
Electrosteel_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  24000000  24000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0002c9d0  24000298  24000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  2402cc68  2402cc68  0005a528  2**0
                  CONTENTS
  3 .exidx        00000000  2402cc68  2402cc68  0005a528  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  2402cc68  2402cc68  0005a528  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  2402cc68  2402cc68  0003cc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  2402cc6c  2402cc6c  0003cc6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sram1_bss    0003f7a0  24040000  24040000  00060000  2**5
                  ALLOC
  8 .sram2_dma_bss 00000880  30000000  30000000  00060000  2**5
                  ALLOC
  9 .sram2_bss    00033180  30002000  30002000  00062000  2**5
                  ALLOC
 10 .sram3_bss    00000080  38000000  38000000  00060000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 12 .data         000007b8  20000000  2402cc70  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0001d544  200007b8  2402d428  000607b8  2**3
                  ALLOC
 14 .itcmram      0000a128  00000400  2402d428  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .sdram_bss    03e00000  c0000000  c0000000  00060000  2**5
                  ALLOC
 16 .qspiflash_text 00000000  90040000  90040000  0005a556  2**0
                  CONTENTS
 17 .qspiflash_data 00000000  90040000  90040000  0005a556  2**0
                  CONTENTS
 18 .qspiflash_bss 00000000  90040000  90040000  0005a556  2**0
                  CONTENTS
 19 .heap         00000000  2001dcfc  2001dcfc  0005a556  2**0
                  CONTENTS
 20 .reserved_for_stack 00000000  2001dcfc  2001dcfc  0005a556  2**0
                  CONTENTS
 21 .comment      000000b8  00000000  00000000  0005a556  2**0
                  CONTENTS, READONLY
 22 .debug_info   00089628  00000000  00000000  0005a60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_abbrev 0000ac29  00000000  00000000  000e3c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0005333d  00000000  00000000  000ee85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00003ca0  00000000  00000000  00141b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_rnglists 000091d0  00000000  00000000  0014583c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macro  00042dab  00000000  00000000  0014ea0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line   00076755  00000000  00000000  001917b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_str    00173e5f  00000000  00000000  00207f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_frame  0000d710  00000000  00000000  0037bd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_loc    00001c3a  00000000  00000000  0038947c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_ranges 00000050  00000000  00000000  0038b0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000298 <__do_global_dtors_aux>:
24000298:	b510      	push	{r4, lr}
2400029a:	4c05      	ldr	r4, [pc, #20]	; (240002b0 <__do_global_dtors_aux+0x18>)
2400029c:	7823      	ldrb	r3, [r4, #0]
2400029e:	b933      	cbnz	r3, 240002ae <__do_global_dtors_aux+0x16>
240002a0:	4b04      	ldr	r3, [pc, #16]	; (240002b4 <__do_global_dtors_aux+0x1c>)
240002a2:	b113      	cbz	r3, 240002aa <__do_global_dtors_aux+0x12>
240002a4:	4804      	ldr	r0, [pc, #16]	; (240002b8 <__do_global_dtors_aux+0x20>)
240002a6:	f3af 8000 	nop.w
240002aa:	2301      	movs	r3, #1
240002ac:	7023      	strb	r3, [r4, #0]
240002ae:	bd10      	pop	{r4, pc}
240002b0:	200007b8 	.word	0x200007b8
240002b4:	00000000 	.word	0x00000000
240002b8:	0000a528 	.word	0x0000a528

240002bc <frame_dummy>:
240002bc:	b508      	push	{r3, lr}
240002be:	4b03      	ldr	r3, [pc, #12]	; (240002cc <frame_dummy+0x10>)
240002c0:	b11b      	cbz	r3, 240002ca <frame_dummy+0xe>
240002c2:	4903      	ldr	r1, [pc, #12]	; (240002d0 <frame_dummy+0x14>)
240002c4:	4803      	ldr	r0, [pc, #12]	; (240002d4 <frame_dummy+0x18>)
240002c6:	f3af 8000 	nop.w
240002ca:	bd08      	pop	{r3, pc}
240002cc:	00000000 	.word	0x00000000
240002d0:	200007bc 	.word	0x200007bc
240002d4:	0000a528 	.word	0x0000a528

240002d8 <strlen>:
240002d8:	4603      	mov	r3, r0
240002da:	f813 2b01 	ldrb.w	r2, [r3], #1
240002de:	2a00      	cmp	r2, #0
240002e0:	d1fb      	bne.n	240002da <strlen+0x2>
240002e2:	1a18      	subs	r0, r3, r0
240002e4:	3801      	subs	r0, #1
240002e6:	4770      	bx	lr

240002e8 <__aeabi_drsub>:
240002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
240002ec:	e002      	b.n	240002f4 <__adddf3>
240002ee:	bf00      	nop

240002f0 <__aeabi_dsub>:
240002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

240002f4 <__adddf3>:
240002f4:	b530      	push	{r4, r5, lr}
240002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
240002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
240002fe:	ea94 0f05 	teq	r4, r5
24000302:	bf08      	it	eq
24000304:	ea90 0f02 	teqeq	r0, r2
24000308:	bf1f      	itttt	ne
2400030a:	ea54 0c00 	orrsne.w	ip, r4, r0
2400030e:	ea55 0c02 	orrsne.w	ip, r5, r2
24000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
24000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
2400031a:	f000 80e2 	beq.w	240004e2 <__adddf3+0x1ee>
2400031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
24000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
24000326:	bfb8      	it	lt
24000328:	426d      	neglt	r5, r5
2400032a:	dd0c      	ble.n	24000346 <__adddf3+0x52>
2400032c:	442c      	add	r4, r5
2400032e:	ea80 0202 	eor.w	r2, r0, r2
24000332:	ea81 0303 	eor.w	r3, r1, r3
24000336:	ea82 0000 	eor.w	r0, r2, r0
2400033a:	ea83 0101 	eor.w	r1, r3, r1
2400033e:	ea80 0202 	eor.w	r2, r0, r2
24000342:	ea81 0303 	eor.w	r3, r1, r3
24000346:	2d36      	cmp	r5, #54	; 0x36
24000348:	bf88      	it	hi
2400034a:	bd30      	pophi	{r4, r5, pc}
2400034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
24000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
24000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
24000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
2400035c:	d002      	beq.n	24000364 <__adddf3+0x70>
2400035e:	4240      	negs	r0, r0
24000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
24000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
24000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
2400036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
24000370:	d002      	beq.n	24000378 <__adddf3+0x84>
24000372:	4252      	negs	r2, r2
24000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
24000378:	ea94 0f05 	teq	r4, r5
2400037c:	f000 80a7 	beq.w	240004ce <__adddf3+0x1da>
24000380:	f1a4 0401 	sub.w	r4, r4, #1
24000384:	f1d5 0e20 	rsbs	lr, r5, #32
24000388:	db0d      	blt.n	240003a6 <__adddf3+0xb2>
2400038a:	fa02 fc0e 	lsl.w	ip, r2, lr
2400038e:	fa22 f205 	lsr.w	r2, r2, r5
24000392:	1880      	adds	r0, r0, r2
24000394:	f141 0100 	adc.w	r1, r1, #0
24000398:	fa03 f20e 	lsl.w	r2, r3, lr
2400039c:	1880      	adds	r0, r0, r2
2400039e:	fa43 f305 	asr.w	r3, r3, r5
240003a2:	4159      	adcs	r1, r3
240003a4:	e00e      	b.n	240003c4 <__adddf3+0xd0>
240003a6:	f1a5 0520 	sub.w	r5, r5, #32
240003aa:	f10e 0e20 	add.w	lr, lr, #32
240003ae:	2a01      	cmp	r2, #1
240003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
240003b4:	bf28      	it	cs
240003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
240003ba:	fa43 f305 	asr.w	r3, r3, r5
240003be:	18c0      	adds	r0, r0, r3
240003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
240003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240003c8:	d507      	bpl.n	240003da <__adddf3+0xe6>
240003ca:	f04f 0e00 	mov.w	lr, #0
240003ce:	f1dc 0c00 	rsbs	ip, ip, #0
240003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
240003d6:	eb6e 0101 	sbc.w	r1, lr, r1
240003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
240003de:	d31b      	bcc.n	24000418 <__adddf3+0x124>
240003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
240003e4:	d30c      	bcc.n	24000400 <__adddf3+0x10c>
240003e6:	0849      	lsrs	r1, r1, #1
240003e8:	ea5f 0030 	movs.w	r0, r0, rrx
240003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
240003f0:	f104 0401 	add.w	r4, r4, #1
240003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
240003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
240003fc:	f080 809a 	bcs.w	24000534 <__adddf3+0x240>
24000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
24000404:	bf08      	it	eq
24000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
2400040a:	f150 0000 	adcs.w	r0, r0, #0
2400040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
24000412:	ea41 0105 	orr.w	r1, r1, r5
24000416:	bd30      	pop	{r4, r5, pc}
24000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
2400041c:	4140      	adcs	r0, r0
2400041e:	eb41 0101 	adc.w	r1, r1, r1
24000422:	3c01      	subs	r4, #1
24000424:	bf28      	it	cs
24000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
2400042a:	d2e9      	bcs.n	24000400 <__adddf3+0x10c>
2400042c:	f091 0f00 	teq	r1, #0
24000430:	bf04      	itt	eq
24000432:	4601      	moveq	r1, r0
24000434:	2000      	moveq	r0, #0
24000436:	fab1 f381 	clz	r3, r1
2400043a:	bf08      	it	eq
2400043c:	3320      	addeq	r3, #32
2400043e:	f1a3 030b 	sub.w	r3, r3, #11
24000442:	f1b3 0220 	subs.w	r2, r3, #32
24000446:	da0c      	bge.n	24000462 <__adddf3+0x16e>
24000448:	320c      	adds	r2, #12
2400044a:	dd08      	ble.n	2400045e <__adddf3+0x16a>
2400044c:	f102 0c14 	add.w	ip, r2, #20
24000450:	f1c2 020c 	rsb	r2, r2, #12
24000454:	fa01 f00c 	lsl.w	r0, r1, ip
24000458:	fa21 f102 	lsr.w	r1, r1, r2
2400045c:	e00c      	b.n	24000478 <__adddf3+0x184>
2400045e:	f102 0214 	add.w	r2, r2, #20
24000462:	bfd8      	it	le
24000464:	f1c2 0c20 	rsble	ip, r2, #32
24000468:	fa01 f102 	lsl.w	r1, r1, r2
2400046c:	fa20 fc0c 	lsr.w	ip, r0, ip
24000470:	bfdc      	itt	le
24000472:	ea41 010c 	orrle.w	r1, r1, ip
24000476:	4090      	lslle	r0, r2
24000478:	1ae4      	subs	r4, r4, r3
2400047a:	bfa2      	ittt	ge
2400047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
24000480:	4329      	orrge	r1, r5
24000482:	bd30      	popge	{r4, r5, pc}
24000484:	ea6f 0404 	mvn.w	r4, r4
24000488:	3c1f      	subs	r4, #31
2400048a:	da1c      	bge.n	240004c6 <__adddf3+0x1d2>
2400048c:	340c      	adds	r4, #12
2400048e:	dc0e      	bgt.n	240004ae <__adddf3+0x1ba>
24000490:	f104 0414 	add.w	r4, r4, #20
24000494:	f1c4 0220 	rsb	r2, r4, #32
24000498:	fa20 f004 	lsr.w	r0, r0, r4
2400049c:	fa01 f302 	lsl.w	r3, r1, r2
240004a0:	ea40 0003 	orr.w	r0, r0, r3
240004a4:	fa21 f304 	lsr.w	r3, r1, r4
240004a8:	ea45 0103 	orr.w	r1, r5, r3
240004ac:	bd30      	pop	{r4, r5, pc}
240004ae:	f1c4 040c 	rsb	r4, r4, #12
240004b2:	f1c4 0220 	rsb	r2, r4, #32
240004b6:	fa20 f002 	lsr.w	r0, r0, r2
240004ba:	fa01 f304 	lsl.w	r3, r1, r4
240004be:	ea40 0003 	orr.w	r0, r0, r3
240004c2:	4629      	mov	r1, r5
240004c4:	bd30      	pop	{r4, r5, pc}
240004c6:	fa21 f004 	lsr.w	r0, r1, r4
240004ca:	4629      	mov	r1, r5
240004cc:	bd30      	pop	{r4, r5, pc}
240004ce:	f094 0f00 	teq	r4, #0
240004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
240004d6:	bf06      	itte	eq
240004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
240004dc:	3401      	addeq	r4, #1
240004de:	3d01      	subne	r5, #1
240004e0:	e74e      	b.n	24000380 <__adddf3+0x8c>
240004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
240004e6:	bf18      	it	ne
240004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
240004ec:	d029      	beq.n	24000542 <__adddf3+0x24e>
240004ee:	ea94 0f05 	teq	r4, r5
240004f2:	bf08      	it	eq
240004f4:	ea90 0f02 	teqeq	r0, r2
240004f8:	d005      	beq.n	24000506 <__adddf3+0x212>
240004fa:	ea54 0c00 	orrs.w	ip, r4, r0
240004fe:	bf04      	itt	eq
24000500:	4619      	moveq	r1, r3
24000502:	4610      	moveq	r0, r2
24000504:	bd30      	pop	{r4, r5, pc}
24000506:	ea91 0f03 	teq	r1, r3
2400050a:	bf1e      	ittt	ne
2400050c:	2100      	movne	r1, #0
2400050e:	2000      	movne	r0, #0
24000510:	bd30      	popne	{r4, r5, pc}
24000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
24000516:	d105      	bne.n	24000524 <__adddf3+0x230>
24000518:	0040      	lsls	r0, r0, #1
2400051a:	4149      	adcs	r1, r1
2400051c:	bf28      	it	cs
2400051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
24000522:	bd30      	pop	{r4, r5, pc}
24000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
24000528:	bf3c      	itt	cc
2400052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
2400052e:	bd30      	popcc	{r4, r5, pc}
24000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
24000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
24000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
2400053c:	f04f 0000 	mov.w	r0, #0
24000540:	bd30      	pop	{r4, r5, pc}
24000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
24000546:	bf1a      	itte	ne
24000548:	4619      	movne	r1, r3
2400054a:	4610      	movne	r0, r2
2400054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
24000550:	bf1c      	itt	ne
24000552:	460b      	movne	r3, r1
24000554:	4602      	movne	r2, r0
24000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
2400055a:	bf06      	itte	eq
2400055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
24000560:	ea91 0f03 	teqeq	r1, r3
24000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
24000568:	bd30      	pop	{r4, r5, pc}
2400056a:	bf00      	nop

2400056c <__aeabi_ui2d>:
2400056c:	f090 0f00 	teq	r0, #0
24000570:	bf04      	itt	eq
24000572:	2100      	moveq	r1, #0
24000574:	4770      	bxeq	lr
24000576:	b530      	push	{r4, r5, lr}
24000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000580:	f04f 0500 	mov.w	r5, #0
24000584:	f04f 0100 	mov.w	r1, #0
24000588:	e750      	b.n	2400042c <__adddf3+0x138>
2400058a:	bf00      	nop

2400058c <__aeabi_i2d>:
2400058c:	f090 0f00 	teq	r0, #0
24000590:	bf04      	itt	eq
24000592:	2100      	moveq	r1, #0
24000594:	4770      	bxeq	lr
24000596:	b530      	push	{r4, r5, lr}
24000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
240005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
240005a4:	bf48      	it	mi
240005a6:	4240      	negmi	r0, r0
240005a8:	f04f 0100 	mov.w	r1, #0
240005ac:	e73e      	b.n	2400042c <__adddf3+0x138>
240005ae:	bf00      	nop

240005b0 <__aeabi_f2d>:
240005b0:	0042      	lsls	r2, r0, #1
240005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
240005b6:	ea4f 0131 	mov.w	r1, r1, rrx
240005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
240005be:	bf1f      	itttt	ne
240005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
240005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
240005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
240005cc:	4770      	bxne	lr
240005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
240005d2:	bf08      	it	eq
240005d4:	4770      	bxeq	lr
240005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
240005da:	bf04      	itt	eq
240005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
240005e0:	4770      	bxeq	lr
240005e2:	b530      	push	{r4, r5, lr}
240005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
240005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
240005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
240005f0:	e71c      	b.n	2400042c <__adddf3+0x138>
240005f2:	bf00      	nop

240005f4 <__aeabi_ul2d>:
240005f4:	ea50 0201 	orrs.w	r2, r0, r1
240005f8:	bf08      	it	eq
240005fa:	4770      	bxeq	lr
240005fc:	b530      	push	{r4, r5, lr}
240005fe:	f04f 0500 	mov.w	r5, #0
24000602:	e00a      	b.n	2400061a <__aeabi_l2d+0x16>

24000604 <__aeabi_l2d>:
24000604:	ea50 0201 	orrs.w	r2, r0, r1
24000608:	bf08      	it	eq
2400060a:	4770      	bxeq	lr
2400060c:	b530      	push	{r4, r5, lr}
2400060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
24000612:	d502      	bpl.n	2400061a <__aeabi_l2d+0x16>
24000614:	4240      	negs	r0, r0
24000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2400061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
2400061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
24000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
24000626:	f43f aed8 	beq.w	240003da <__adddf3+0xe6>
2400062a:	f04f 0203 	mov.w	r2, #3
2400062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
24000632:	bf18      	it	ne
24000634:	3203      	addne	r2, #3
24000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2400063a:	bf18      	it	ne
2400063c:	3203      	addne	r2, #3
2400063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
24000642:	f1c2 0320 	rsb	r3, r2, #32
24000646:	fa00 fc03 	lsl.w	ip, r0, r3
2400064a:	fa20 f002 	lsr.w	r0, r0, r2
2400064e:	fa01 fe03 	lsl.w	lr, r1, r3
24000652:	ea40 000e 	orr.w	r0, r0, lr
24000656:	fa21 f102 	lsr.w	r1, r1, r2
2400065a:	4414      	add	r4, r2
2400065c:	e6bd      	b.n	240003da <__adddf3+0xe6>
2400065e:	bf00      	nop

24000660 <audioInit>:
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
}


void audioInit()
{
24000660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000664:	4ceb      	ldr	r4, [pc, #940]	; (24000a14 <audioInit+0x3b4>)
24000666:	f64e 2260 	movw	r2, #60000	; 0xea60
2400066a:	ed9f 0aeb 	vldr	s0, [pc, #940]	; 24000a18 <audioInit+0x3b8>
2400066e:	4620      	mov	r0, r4
24000670:	49ea      	ldr	r1, [pc, #936]	; (24000a1c <audioInit+0x3bc>)
24000672:	4beb      	ldr	r3, [pc, #940]	; (24000a20 <audioInit+0x3c0>)
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);

	leaf.clearOnAllocation = 1;
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
24000674:	4deb      	ldr	r5, [pc, #940]	; (24000a24 <audioInit+0x3c4>)
{
24000676:	ed2d 8b10 	vpush	{d8-d15}
2400067a:	b089      	sub	sp, #36	; 0x24
	}
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
2400067c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000680:	f013 fed2 	bl	24014428 <LEAF_init>
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
24000684:	4623      	mov	r3, r4
24000686:	4ae8      	ldr	r2, [pc, #928]	; (24000a28 <audioInit+0x3c8>)
24000688:	49e8      	ldr	r1, [pc, #928]	; (24000a2c <audioInit+0x3cc>)
2400068a:	48e9      	ldr	r0, [pc, #932]	; (24000a30 <audioInit+0x3d0>)
2400068c:	f012 f956 	bl	2401293c <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
24000690:	4623      	mov	r3, r4
24000692:	f04f 7270 	mov.w	r2, #62914560	; 0x3c00000
24000696:	49e7      	ldr	r1, [pc, #924]	; (24000a34 <audioInit+0x3d4>)
24000698:	48e7      	ldr	r0, [pc, #924]	; (24000a38 <audioInit+0x3d8>)
2400069a:	f012 f94f 	bl	2401293c <tMempool_init>
	leaf.clearOnAllocation = 1;
2400069e:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
240006a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240006a4:	eddf 1ae5 	vldr	s3, [pc, #916]	; 24000a3c <audioInit+0x3dc>
240006a8:	eddf 0ae5 	vldr	s1, [pc, #916]	; 24000a40 <audioInit+0x3e0>
240006ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240006b0:	ed9f 0ae4 	vldr	s0, [pc, #912]	; 24000a44 <audioInit+0x3e4>
240006b4:	48e4      	ldr	r0, [pc, #912]	; (24000a48 <audioInit+0x3e8>)
	leaf.clearOnAllocation = 1;
240006b6:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
240006b8:	f011 fdb6 	bl	24012228 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240006bc:	48e3      	ldr	r0, [pc, #908]	; (24000a4c <audioInit+0x3ec>)
		previousStringInputs[i]	= 0;
240006be:	2200      	movs	r2, #0
240006c0:	4be3      	ldr	r3, [pc, #908]	; (24000a50 <audioInit+0x3f0>)
	tCycle_init(&testSine, &leaf);
240006c2:	4621      	mov	r1, r4
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240006c4:	6005      	str	r5, [r0, #0]
	invNumOvertones = 1.0f / NUM_OVERTONES;
240006c6:	4ce3      	ldr	r4, [pc, #908]	; (24000a54 <audioInit+0x3f4>)
240006c8:	48e3      	ldr	r0, [pc, #908]	; (24000a58 <audioInit+0x3f8>)
		previousStringInputs[i]	= 0;
240006ca:	801a      	strh	r2, [r3, #0]
	invNumOvertones = 1.0f / NUM_OVERTONES;
240006cc:	6004      	str	r4, [r0, #0]
		previousStringInputs[i]	= 0;
240006ce:	805a      	strh	r2, [r3, #2]
	tCycle_init(&testSine, &leaf);
240006d0:	48e2      	ldr	r0, [pc, #904]	; (24000a5c <audioInit+0x3fc>)
		previousStringInputs[i]	= 0;
240006d2:	809a      	strh	r2, [r3, #4]
240006d4:	80da      	strh	r2, [r3, #6]
240006d6:	811a      	strh	r2, [r3, #8]
240006d8:	815a      	strh	r2, [r3, #10]
240006da:	819a      	strh	r2, [r3, #12]
240006dc:	81da      	strh	r2, [r3, #14]
240006de:	821a      	strh	r2, [r3, #16]
240006e0:	825a      	strh	r2, [r3, #18]
240006e2:	829a      	strh	r2, [r3, #20]
240006e4:	82da      	strh	r2, [r3, #22]
	tCycle_init(&testSine, &leaf);
240006e6:	f012 f949 	bl	2401297c <tCycle_init>
	tCycle_setFreq(&testSine, 440.0f);
240006ea:	ed9f 0add 	vldr	s0, [pc, #884]	; 24000a60 <audioInit+0x400>
240006ee:	48db      	ldr	r0, [pc, #876]	; (24000a5c <audioInit+0x3fc>)
240006f0:	f012 f986 	bl	24012a00 <tCycle_setFreq>
		totalGain[0] += partials[i];
240006f4:	4cdb      	ldr	r4, [pc, #876]	; (24000a64 <audioInit+0x404>)
240006f6:	4adc      	ldr	r2, [pc, #880]	; (24000a68 <audioInit+0x408>)
		totalGain[1] += partialsHigh[i];
240006f8:	49dc      	ldr	r1, [pc, #880]	; (24000a6c <audioInit+0x40c>)
		totalGain[0] += partials[i];
240006fa:	ed92 0a00 	vldr	s0, [r2]
240006fe:	edd4 6a00 	vldr	s13, [r4]
		totalGain[1] += partialsHigh[i];
24000702:	ed94 7a01 	vldr	s14, [r4, #4]
24000706:	ed91 1a00 	vldr	s2, [r1]
		totalGain[0] += partials[i];
2400070a:	ee76 6a80 	vadd.f32	s13, s13, s0
2400070e:	ed92 2a01 	vldr	s4, [r2, #4]
		totalGain[1] += partialsHigh[i];
24000712:	ee37 7a01 	vadd.f32	s14, s14, s2
24000716:	edd1 2a01 	vldr	s5, [r1, #4]
		totalGain[0] += partials[i];
2400071a:	ee76 6a82 	vadd.f32	s13, s13, s4
2400071e:	ed92 4a02 	vldr	s8, [r2, #8]
		totalGain[1] += partialsHigh[i];
24000722:	ed91 1a02 	vldr	s2, [r1, #8]
24000726:	ee37 7a22 	vadd.f32	s14, s14, s5
		totalGain[0] += partials[i];
2400072a:	edd2 3a03 	vldr	s7, [r2, #12]
2400072e:	ee76 6a84 	vadd.f32	s13, s13, s8
		totalGain[1] += partialsHigh[i];
24000732:	ed91 0a03 	vldr	s0, [r1, #12]
		totalGain[0] += partials[i];
24000736:	ed92 3a04 	vldr	s6, [r2, #16]
		totalGain[1] += partialsHigh[i];
2400073a:	ee37 7a01 	vadd.f32	s14, s14, s2
2400073e:	ed91 4a04 	vldr	s8, [r1, #16]
		totalGain[0] += partials[i];
24000742:	ee76 6aa3 	vadd.f32	s13, s13, s7
24000746:	edd2 1a05 	vldr	s3, [r2, #20]
		totalGain[1] += partialsHigh[i];
2400074a:	edd1 2a05 	vldr	s5, [r1, #20]
2400074e:	ee37 7a00 	vadd.f32	s14, s14, s0
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000752:	4bc7      	ldr	r3, [pc, #796]	; (24000a70 <audioInit+0x410>)
		totalGain[0] += partials[i];
24000754:	ee76 6a83 	vadd.f32	s13, s13, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000758:	48c6      	ldr	r0, [pc, #792]	; (24000a74 <audioInit+0x414>)
		totalGain[0] += partials[i];
2400075a:	ed92 5a06 	vldr	s10, [r2, #24]
		totalGain[1] += partialsHigh[i];
2400075e:	ee37 7a04 	vadd.f32	s14, s14, s8
24000762:	ed91 2a06 	vldr	s4, [r1, #24]
		totalGain[0] += partials[i];
24000766:	ee76 6aa1 	vadd.f32	s13, s13, s3
2400076a:	edd2 0a07 	vldr	s1, [r2, #28]
		totalGain[1] += partialsHigh[i];
2400076e:	ed91 1a07 	vldr	s2, [r1, #28]
24000772:	ee37 7a22 	vadd.f32	s14, s14, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000776:	edd0 2a00 	vldr	s5, [r0]
		totalGain[0] += partials[i];
2400077a:	ee76 6a85 	vadd.f32	s13, s13, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400077e:	ed93 5a00 	vldr	s10, [r3]
24000782:	edd3 1a01 	vldr	s3, [r3, #4]
		totalGain[1] += partialsHigh[i];
24000786:	ee37 7a02 	vadd.f32	s14, s14, s4
		totalGain[0] += partials[i];
2400078a:	edd2 4a08 	vldr	s9, [r2, #32]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400078e:	ee72 2a85 	vadd.f32	s5, s5, s10
		totalGain[1] += partialsHigh[i];
24000792:	edd1 3a08 	vldr	s7, [r1, #32]
		totalGain[0] += partials[i];
24000796:	ee76 6aa0 	vadd.f32	s13, s13, s1
				totalGain_s[j][k] += stringPartialGains[j][k][i];
2400079a:	ed93 5a02 	vldr	s10, [r3, #8]
		totalGain[1] += partialsHigh[i];
2400079e:	ee37 7a01 	vadd.f32	s14, s14, s2
		totalGain[0] += partials[i];
240007a2:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007a6:	ee72 2aa1 	vadd.f32	s5, s5, s3
		totalGain[1] += partialsHigh[i];
240007aa:	ed91 0a09 	vldr	s0, [r1, #36]	; 0x24
		totalGain[0] += partials[i];
240007ae:	ee76 6aa4 	vadd.f32	s13, s13, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007b2:	ed93 2a03 	vldr	s4, [r3, #12]
		totalGain[1] += partialsHigh[i];
240007b6:	ee37 7a23 	vadd.f32	s14, s14, s7
		totalGain[0] += partials[i];
240007ba:	edd2 5a0a 	vldr	s11, [r2, #40]	; 0x28
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007be:	ee72 2a85 	vadd.f32	s5, s5, s10
		totalGain[1] += partialsHigh[i];
240007c2:	ed91 3a0a 	vldr	s6, [r1, #40]	; 0x28
		totalGain[0] += partials[i];
240007c6:	ee76 6a86 	vadd.f32	s13, s13, s12
240007ca:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
		totalGain[1] += partialsHigh[i];
240007ce:	ee37 7a00 	vadd.f32	s14, s14, s0
240007d2:	ed91 4a0b 	vldr	s8, [r1, #44]	; 0x2c
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007d6:	ee72 2a82 	vadd.f32	s5, s5, s4
240007da:	edd3 0a04 	vldr	s1, [r3, #16]
		totalGain[0] += partials[i];
240007de:	ee76 6aa5 	vadd.f32	s13, s13, s11
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007e2:	ed93 1a05 	vldr	s2, [r3, #20]
		totalGain[1] += partialsHigh[i];
240007e6:	ee37 7a03 	vadd.f32	s14, s14, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007ea:	edd3 5a0c 	vldr	s11, [r3, #48]	; 0x30
240007ee:	ed90 3a01 	vldr	s6, [r0, #4]
240007f2:	ee72 2aa0 	vadd.f32	s5, s5, s1
240007f6:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
		totalGain[0] += partials[i];
240007fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240007fe:	ee33 3a25 	vadd.f32	s6, s6, s11
24000802:	ed93 8a06 	vldr	s16, [r3, #24]
24000806:	ee72 2a81 	vadd.f32	s5, s5, s2
2400080a:	edd3 5a0e 	vldr	s11, [r3, #56]	; 0x38
2400080e:	edd3 1a07 	vldr	s3, [r3, #28]
		totalGain[1] += partialsHigh[i];
24000812:	ee37 7a04 	vadd.f32	s14, s14, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000816:	ee33 3a02 	vadd.f32	s6, s6, s4
2400081a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
2400081e:	ee72 2a88 	vadd.f32	s5, s5, s16
24000822:	edd3 3a08 	vldr	s7, [r3, #32]
24000826:	edd3 0a10 	vldr	s1, [r3, #64]	; 0x40
2400082a:	ee33 3a25 	vadd.f32	s6, s6, s11
2400082e:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
24000832:	ee72 2aa1 	vadd.f32	s5, s5, s3
24000836:	ed93 1a11 	vldr	s2, [r3, #68]	; 0x44
2400083a:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
2400083e:	ee33 3a27 	vadd.f32	s6, s6, s15
24000842:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
24000846:	ee72 2aa3 	vadd.f32	s5, s5, s7
2400084a:	edd0 3a02 	vldr	s7, [r0, #8]
2400084e:	ed93 2a13 	vldr	s4, [r3, #76]	; 0x4c
24000852:	ee33 3a20 	vadd.f32	s6, s6, s1
24000856:	edd3 0a18 	vldr	s1, [r3, #96]	; 0x60
2400085a:	ee72 2aa4 	vadd.f32	s5, s5, s9
2400085e:	edd3 4a19 	vldr	s9, [r3, #100]	; 0x64
24000862:	ee73 3aa0 	vadd.f32	s7, s7, s1
24000866:	edd3 0a1c 	vldr	s1, [r3, #112]	; 0x70
2400086a:	ee33 3a01 	vadd.f32	s6, s6, s2
2400086e:	ed93 1a1a 	vldr	s2, [r3, #104]	; 0x68
24000872:	ee72 2a85 	vadd.f32	s5, s5, s10
24000876:	ed93 5a1d 	vldr	s10, [r3, #116]	; 0x74
2400087a:	ee73 3aa4 	vadd.f32	s7, s7, s9
2400087e:	edd3 4a1b 	vldr	s9, [r3, #108]	; 0x6c
24000882:	ee33 3a00 	vadd.f32	s6, s6, s0
24000886:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
2400088a:	ed93 4a14 	vldr	s8, [r3, #80]	; 0x50
2400088e:	ee73 3a81 	vadd.f32	s7, s7, s2
24000892:	edd3 5a15 	vldr	s11, [r3, #84]	; 0x54
24000896:	ee33 3a02 	vadd.f32	s6, s6, s4
2400089a:	edd3 1a16 	vldr	s3, [r3, #88]	; 0x58
2400089e:	ee72 2a86 	vadd.f32	s5, s5, s12
240008a2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
240008a6:	ee73 3aa4 	vadd.f32	s7, s7, s9
240008aa:	ed93 1a1e 	vldr	s2, [r3, #120]	; 0x78
240008ae:	ed93 0a1f 	vldr	s0, [r3, #124]	; 0x7c
240008b2:	ee33 3a04 	vadd.f32	s6, s6, s8
240008b6:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
240008ba:	ee8a aaa2 	vdiv.f32	s20, s21, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240008be:	ed93 2a21 	vldr	s4, [r3, #132]	; 0x84
240008c2:	edd3 4a22 	vldr	s9, [r3, #136]	; 0x88
240008c6:	ee73 3aa0 	vadd.f32	s7, s7, s1
240008ca:	edd3 0a23 	vldr	s1, [r3, #140]	; 0x8c
240008ce:	ed90 4a03 	vldr	s8, [r0, #12]
240008d2:	ee33 3a25 	vadd.f32	s6, s6, s11
240008d6:	edd3 5a25 	vldr	s11, [r3, #148]	; 0x94
240008da:	ee73 3a85 	vadd.f32	s7, s7, s10
240008de:	ed93 5a24 	vldr	s10, [r3, #144]	; 0x90
240008e2:	ee33 3a21 	vadd.f32	s6, s6, s3
240008e6:	edd3 1a27 	vldr	s3, [r3, #156]	; 0x9c
240008ea:	ee34 4a05 	vadd.f32	s8, s8, s10
240008ee:	ed93 5a26 	vldr	s10, [r3, #152]	; 0x98
240008f2:	ee73 3a81 	vadd.f32	s7, s7, s2
240008f6:	ed93 1a28 	vldr	s2, [r3, #160]	; 0xa0
240008fa:	ee33 3a27 	vadd.f32	s6, s6, s15
240008fe:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
24000902:	ee34 4a25 	vadd.f32	s8, s8, s11
24000906:	edd3 5a29 	vldr	s11, [r3, #164]	; 0xa4
2400090a:	ee73 3a80 	vadd.f32	s7, s7, s0
2400090e:	ed93 0a2d 	vldr	s0, [r3, #180]	; 0xb4
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000912:	eeca 9a83 	vdiv.f32	s19, s21, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000916:	ee34 4a05 	vadd.f32	s8, s8, s10
2400091a:	ed93 5a2c 	vldr	s10, [r3, #176]	; 0xb0
2400091e:	ee73 3a86 	vadd.f32	s7, s7, s12
24000922:	ed93 6a2a 	vldr	s12, [r3, #168]	; 0xa8
24000926:	ee34 4a21 	vadd.f32	s8, s8, s3
2400092a:	edd3 1a2e 	vldr	s3, [r3, #184]	; 0xb8
2400092e:	ee73 3a82 	vadd.f32	s7, s7, s4
24000932:	ed93 2a2f 	vldr	s4, [r3, #188]	; 0xbc
24000936:	ee34 4a01 	vadd.f32	s8, s8, s2
2400093a:	ed93 1a30 	vldr	s2, [r3, #192]	; 0xc0
2400093e:	ee73 3aa4 	vadd.f32	s7, s7, s9
24000942:	edd0 4a04 	vldr	s9, [r0, #16]
24000946:	ee74 4a81 	vadd.f32	s9, s9, s2
2400094a:	ed93 1a32 	vldr	s2, [r3, #200]	; 0xc8
2400094e:	ee34 4a25 	vadd.f32	s8, s8, s11
24000952:	edd3 5a31 	vldr	s11, [r3, #196]	; 0xc4
24000956:	ee73 3aa0 	vadd.f32	s7, s7, s1
2400095a:	edd3 0a34 	vldr	s1, [r3, #208]	; 0xd0
2400095e:	ee74 4aa5 	vadd.f32	s9, s9, s11
24000962:	edd3 5a35 	vldr	s11, [r3, #212]	; 0xd4
24000966:	ee34 4a06 	vadd.f32	s8, s8, s12
2400096a:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
2400096e:	ee8a 9aa3 	vdiv.f32	s18, s21, s7
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000972:	ee74 4a81 	vadd.f32	s9, s9, s2
24000976:	ed93 1a38 	vldr	s2, [r3, #224]	; 0xe0
2400097a:	ee34 4a27 	vadd.f32	s8, s8, s15
2400097e:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
24000982:	ee74 4a86 	vadd.f32	s9, s9, s12
24000986:	ed93 6a39 	vldr	s12, [r3, #228]	; 0xe4
2400098a:	ee34 4a05 	vadd.f32	s8, s8, s10
2400098e:	ed93 5a37 	vldr	s10, [r3, #220]	; 0xdc
24000992:	ee74 4aa0 	vadd.f32	s9, s9, s1
24000996:	edd3 0a3c 	vldr	s1, [r3, #240]	; 0xf0
2400099a:	ee34 4a00 	vadd.f32	s8, s8, s0
2400099e:	ed93 0a3a 	vldr	s0, [r3, #232]	; 0xe8
240009a2:	ee74 4aa5 	vadd.f32	s9, s9, s11
240009a6:	edd0 5a05 	vldr	s11, [r0, #20]
240009aa:	ee34 4a21 	vadd.f32	s8, s8, s3
240009ae:	edd3 1a3b 	vldr	s3, [r3, #236]	; 0xec
240009b2:	ee75 5aa0 	vadd.f32	s11, s11, s1
240009b6:	ee74 4aa7 	vadd.f32	s9, s9, s15
240009ba:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
240009be:	ee34 4a02 	vadd.f32	s8, s8, s4
240009c2:	ed93 2a3e 	vldr	s4, [r3, #248]	; 0xf8
240009c6:	ee75 5aa7 	vadd.f32	s11, s11, s15
240009ca:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
240009ce:	ee74 4a85 	vadd.f32	s9, s9, s10
240009d2:	edd3 0a40 	vldr	s1, [r3, #256]	; 0x100
240009d6:	ed93 5a41 	vldr	s10, [r3, #260]	; 0x104
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
240009da:	eeca 8a84 	vdiv.f32	s17, s21, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
240009de:	ee74 4a81 	vadd.f32	s9, s9, s2
240009e2:	ed93 1a44 	vldr	s2, [r3, #272]	; 0x110
240009e6:	ee75 5a82 	vadd.f32	s11, s11, s4
240009ea:	ed93 2a43 	vldr	s4, [r3, #268]	; 0x10c
240009ee:	ee74 4a86 	vadd.f32	s9, s9, s12
240009f2:	ed93 6a45 	vldr	s12, [r3, #276]	; 0x114
240009f6:	ee75 5aa7 	vadd.f32	s11, s11, s15
240009fa:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
240009fe:	ee74 4a80 	vadd.f32	s9, s9, s0
24000a02:	ed93 0a46 	vldr	s0, [r3, #280]	; 0x118
24000a06:	ee75 5aa0 	vadd.f32	s11, s11, s1
24000a0a:	edd3 0a47 	vldr	s1, [r3, #284]	; 0x11c
24000a0e:	ee74 4aa1 	vadd.f32	s9, s9, s3
24000a12:	e031      	b.n	24000a78 <audioInit+0x418>
24000a14:	200052f4 	.word	0x200052f4
24000a18:	473b8000 	.word	0x473b8000
24000a1c:	20005c78 	.word	0x20005c78
24000a20:	00005561 	.word	0x00005561
24000a24:	457ff000 	.word	0x457ff000
24000a28:	0003f7a0 	.word	0x0003f7a0
24000a2c:	24040000 	.word	0x24040000
24000a30:	20005534 	.word	0x20005534
24000a34:	c0000000 	.word	0xc0000000
24000a38:	200052f0 	.word	0x200052f0
24000a3c:	ba51b717 	.word	0xba51b717
24000a40:	00000000 	.word	0x00000000
24000a44:	3a83126f 	.word	0x3a83126f
24000a48:	2000106c 	.word	0x2000106c
24000a4c:	2000506c 	.word	0x2000506c
24000a50:	20005754 	.word	0x20005754
24000a54:	3daaaaab 	.word	0x3daaaaab
24000a58:	20005280 	.word	0x20005280
24000a5c:	2001487c 	.word	0x2001487c
24000a60:	43dc0000 	.word	0x43dc0000
24000a64:	200148b0 	.word	0x200148b0
24000a68:	200000c0 	.word	0x200000c0
24000a6c:	20000108 	.word	0x20000108
24000a70:	2000038c 	.word	0x2000038c
24000a74:	200148b8 	.word	0x200148b8
24000a78:	edd3 1a48 	vldr	s3, [r3, #288]	; 0x120
24000a7c:	ee75 5a85 	vadd.f32	s11, s11, s10
24000a80:	ed90 5a06 	vldr	s10, [r0, #24]
24000a84:	ee35 5a21 	vadd.f32	s10, s10, s3
24000a88:	edd3 1a4a 	vldr	s3, [r3, #296]	; 0x128
24000a8c:	ee75 5aa7 	vadd.f32	s11, s11, s15
24000a90:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000a94:	ee8a 8aa4 	vdiv.f32	s16, s21, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000a98:	ee35 5a27 	vadd.f32	s10, s10, s15
24000a9c:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
24000aa0:	ee75 5a82 	vadd.f32	s11, s11, s4
24000aa4:	ed93 2a4c 	vldr	s4, [r3, #304]	; 0x130
24000aa8:	ee35 5a21 	vadd.f32	s10, s10, s3
24000aac:	edd3 1a50 	vldr	s3, [r3, #320]	; 0x140
24000ab0:	ee75 5a81 	vadd.f32	s11, s11, s2
24000ab4:	ed93 1a4f 	vldr	s2, [r3, #316]	; 0x13c
24000ab8:	ee35 5a27 	vadd.f32	s10, s10, s15
24000abc:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
24000ac0:	ee75 5a86 	vadd.f32	s11, s11, s12
24000ac4:	ed93 6a4d 	vldr	s12, [r3, #308]	; 0x134
24000ac8:	ee35 5a02 	vadd.f32	s10, s10, s4
24000acc:	ed93 2a52 	vldr	s4, [r3, #328]	; 0x148
24000ad0:	ee75 5a80 	vadd.f32	s11, s11, s0
24000ad4:	ed93 0a51 	vldr	s0, [r3, #324]	; 0x144
24000ad8:	ee35 5a06 	vadd.f32	s10, s10, s12
24000adc:	ed90 6a07 	vldr	s12, [r0, #28]
24000ae0:	ee75 5aa0 	vadd.f32	s11, s11, s1
24000ae4:	edd3 0a53 	vldr	s1, [r3, #332]	; 0x14c
24000ae8:	ee35 5a27 	vadd.f32	s10, s10, s15
24000aec:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
24000af0:	ee36 6a27 	vadd.f32	s12, s12, s15
24000af4:	edd3 7a55 	vldr	s15, [r3, #340]	; 0x154
24000af8:	ee35 5a01 	vadd.f32	s10, s10, s2
24000afc:	ed93 1a57 	vldr	s2, [r3, #348]	; 0x15c
24000b00:	ee36 6a27 	vadd.f32	s12, s12, s15
24000b04:	edd3 7a56 	vldr	s15, [r3, #344]	; 0x158
24000b08:	ee35 5a21 	vadd.f32	s10, s10, s3
24000b0c:	edd3 1a59 	vldr	s3, [r3, #356]	; 0x164
24000b10:	ee36 6a27 	vadd.f32	s12, s12, s15
24000b14:	edd3 7a58 	vldr	s15, [r3, #352]	; 0x160
24000b18:	ee35 5a00 	vadd.f32	s10, s10, s0
24000b1c:	ed93 0a5d 	vldr	s0, [r3, #372]	; 0x174
24000b20:	ee36 6a01 	vadd.f32	s12, s12, s2
24000b24:	ed93 1a5c 	vldr	s2, [r3, #368]	; 0x170
24000b28:	ee35 5a02 	vadd.f32	s10, s10, s4
24000b2c:	ed93 2a5a 	vldr	s4, [r3, #360]	; 0x168
24000b30:	ee36 6a27 	vadd.f32	s12, s12, s15
24000b34:	edd3 7a5b 	vldr	s15, [r3, #364]	; 0x16c
24000b38:	ee35 5a20 	vadd.f32	s10, s10, s1
24000b3c:	edd3 0a5e 	vldr	s1, [r3, #376]	; 0x178
24000b40:	ed93 ba6b 	vldr	s22, [r3, #428]	; 0x1ac
24000b44:	ee36 6a21 	vadd.f32	s12, s12, s3
24000b48:	edd3 1a5f 	vldr	s3, [r3, #380]	; 0x17c
24000b4c:	edc0 2a00 	vstr	s5, [r0]
24000b50:	edc4 6a00 	vstr	s13, [r4]
24000b54:	ee36 6a02 	vadd.f32	s12, s12, s4
24000b58:	ed93 2a60 	vldr	s4, [r3, #384]	; 0x180
24000b5c:	ed84 7a01 	vstr	s14, [r4, #4]
24000b60:	ed80 3a01 	vstr	s6, [r0, #4]
24000b64:	ee36 6a27 	vadd.f32	s12, s12, s15
24000b68:	edd0 7a08 	vldr	s15, [r0, #32]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000b6c:	4ce6      	ldr	r4, [pc, #920]	; (24000f08 <audioInit+0x8a8>)
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000b6e:	ee77 7a82 	vadd.f32	s15, s15, s4
24000b72:	ed93 2a61 	vldr	s4, [r3, #388]	; 0x184
24000b76:	ee36 6a01 	vadd.f32	s12, s12, s2
24000b7a:	ed93 1a63 	vldr	s2, [r3, #396]	; 0x18c
24000b7e:	edc0 3a02 	vstr	s7, [r0, #8]
24000b82:	ee77 7a82 	vadd.f32	s15, s15, s4
24000b86:	ed93 2a62 	vldr	s4, [r3, #392]	; 0x188
24000b8a:	ee36 6a00 	vadd.f32	s12, s12, s0
24000b8e:	ed93 0a65 	vldr	s0, [r3, #404]	; 0x194
24000b92:	ed80 4a03 	vstr	s8, [r0, #12]
24000b96:	ee77 7a82 	vadd.f32	s15, s15, s4
24000b9a:	ed93 2a64 	vldr	s4, [r3, #400]	; 0x190
24000b9e:	ee36 6a20 	vadd.f32	s12, s12, s1
24000ba2:	edd3 0a67 	vldr	s1, [r3, #412]	; 0x19c
24000ba6:	edc0 4a04 	vstr	s9, [r0, #16]
24000baa:	ee77 7a81 	vadd.f32	s15, s15, s2
24000bae:	ed93 1a68 	vldr	s2, [r3, #416]	; 0x1a0
24000bb2:	ee36 6a21 	vadd.f32	s12, s12, s3
24000bb6:	edd3 1a69 	vldr	s3, [r3, #420]	; 0x1a4
24000bba:	edc0 5a05 	vstr	s11, [r0, #20]
24000bbe:	ee77 7a82 	vadd.f32	s15, s15, s4
24000bc2:	ed93 2a66 	vldr	s4, [r3, #408]	; 0x198
24000bc6:	ed80 5a06 	vstr	s10, [r0, #24]
24000bca:	ed80 6a07 	vstr	s12, [r0, #28]
24000bce:	ee77 7a80 	vadd.f32	s15, s15, s0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000bd2:	ed84 aa00 	vstr	s20, [r4]
24000bd6:	ee8a 0aa5 	vdiv.f32	s0, s21, s11
24000bda:	edc4 9a01 	vstr	s19, [r4, #4]
24000bde:	ed84 9a02 	vstr	s18, [r4, #8]
24000be2:	edc4 8a03 	vstr	s17, [r4, #12]
24000be6:	ed84 8a04 	vstr	s16, [r4, #16]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000bea:	ee77 7a82 	vadd.f32	s15, s15, s4
24000bee:	ed93 2a6a 	vldr	s4, [r3, #424]	; 0x1a8
24000bf2:	ee77 7aa0 	vadd.f32	s15, s15, s1
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000bf6:	eeca 0a85 	vdiv.f32	s1, s21, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000bfa:	ee77 7a81 	vadd.f32	s15, s15, s2
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000bfe:	ee8a 1a86 	vdiv.f32	s2, s21, s12
24000c02:	ed84 0a05 	vstr	s0, [r4, #20]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000c06:	ee77 7aa1 	vadd.f32	s15, s15, s3
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
24000c0a:	eeca 1aa6 	vdiv.f32	s3, s21, s13
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000c0e:	ee77 7a82 	vadd.f32	s15, s15, s4
	gainNormalizers[1] = 1.0f / totalGain[1];
24000c12:	ee8a 2a87 	vdiv.f32	s4, s21, s14
				totalGain_s[j][k] += stringPartialGains[j][k][i];
24000c16:	ee77 7a8b 	vadd.f32	s15, s15, s22
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000c1a:	eeca 2aa7 	vdiv.f32	s5, s21, s15
24000c1e:	edc0 7a08 	vstr	s15, [r0, #32]
	gainNormalizers[0] = 1.0f / totalGain[0];
24000c22:	48ba      	ldr	r0, [pc, #744]	; (24000f0c <audioInit+0x8ac>)
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000c24:	edc4 0a06 	vstr	s1, [r4, #24]
	gainNormalizers[0] = 1.0f / totalGain[0];
24000c28:	edc0 1a00 	vstr	s3, [r0]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000c2c:	ed84 1a07 	vstr	s2, [r4, #28]
	gainNormalizers[1] = 1.0f / totalGain[1];
24000c30:	ed80 2a01 	vstr	s4, [r0, #4]
24000c34:	f102 0030 	add.w	r0, r2, #48	; 0x30
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
24000c38:	edc4 2a08 	vstr	s5, [r4, #32]
		for (int j = 0; j < 3; j++)

		{
			for (int k = 0; k < 3; k++)
			{
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c3c:	edd3 7a00 	vldr	s15, [r3]
		partials[i] = partials[i] * gainNormalizers[0];
24000c40:	ed92 3a00 	vldr	s6, [r2]
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c44:	ee6a 7a27 	vmul.f32	s15, s20, s15
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000c48:	edd1 3a00 	vldr	s7, [r1]
		partials[i] = partials[i] * gainNormalizers[0];
24000c4c:	ee21 3a83 	vmul.f32	s6, s3, s6
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000c50:	ee62 3a23 	vmul.f32	s7, s4, s7
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c54:	ece3 7a01 	vstmia	r3!, {s15}
24000c58:	ed93 4a0b 	vldr	s8, [r3, #44]	; 0x2c
24000c5c:	edd3 4a17 	vldr	s9, [r3, #92]	; 0x5c
24000c60:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
24000c64:	ee24 4a29 	vmul.f32	s8, s8, s19
24000c68:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
24000c6c:	ee64 4a89 	vmul.f32	s9, s9, s18
24000c70:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
24000c74:	ee25 5a28 	vmul.f32	s10, s10, s17
24000c78:	edd3 6a47 	vldr	s13, [r3, #284]	; 0x11c
24000c7c:	ee65 5a88 	vmul.f32	s11, s11, s16
24000c80:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
24000c84:	ee26 6a00 	vmul.f32	s12, s12, s0
24000c88:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
24000c8c:	ee66 6aa0 	vmul.f32	s13, s13, s1
24000c90:	ee27 7a01 	vmul.f32	s14, s14, s2
		partials[i] = partials[i] * gainNormalizers[0];
24000c94:	eca2 3a01 	vstmia	r2!, {s6}
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000c98:	ee67 7aa2 	vmul.f32	s15, s15, s5
	for (int i = 0; i < NUM_OVERTONES; i++)
24000c9c:	4282      	cmp	r2, r0
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
24000c9e:	ece1 3a01 	vstmia	r1!, {s7}
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
24000ca2:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
24000ca6:	edc3 4a17 	vstr	s9, [r3, #92]	; 0x5c
24000caa:	ed83 5a23 	vstr	s10, [r3, #140]	; 0x8c
24000cae:	edc3 5a2f 	vstr	s11, [r3, #188]	; 0xbc
24000cb2:	ed83 6a3b 	vstr	s12, [r3, #236]	; 0xec
24000cb6:	edc3 6a47 	vstr	s13, [r3, #284]	; 0x11c
24000cba:	ed83 7a53 	vstr	s14, [r3, #332]	; 0x14c
24000cbe:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	for (int i = 0; i < NUM_OVERTONES; i++)
24000cc2:	d1bb      	bne.n	24000c3c <audioInit+0x5dc>
		  for (int j = 0; j < 3; j++)
		  {

			  for (int k = 0; k < 2; k++)
			  {
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000cc4:	4b92      	ldr	r3, [pc, #584]	; (24000f10 <audioInit+0x8b0>)
24000cc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24000cca:	4c92      	ldr	r4, [pc, #584]	; (24000f14 <audioInit+0x8b4>)
24000ccc:	ed93 8a01 	vldr	s16, [r3, #4]
24000cd0:	ed93 0a04 	vldr	s0, [r3, #16]
24000cd4:	f104 0830 	add.w	r8, r4, #48	; 0x30
24000cd8:	edd3 0a07 	vldr	s1, [r3, #28]
24000cdc:	edd3 9a00 	vldr	s19, [r3]
24000ce0:	ed93 6a02 	vldr	s12, [r3, #8]
24000ce4:	ed93 9a03 	vldr	s18, [r3, #12]
24000ce8:	ee78 4a69 	vsub.f32	s9, s16, s19
24000cec:	edd3 6a05 	vldr	s13, [r3, #20]
24000cf0:	ee36 6a48 	vsub.f32	s12, s12, s16
24000cf4:	edd3 8a06 	vldr	s17, [r3, #24]
24000cf8:	ee30 5a49 	vsub.f32	s10, s0, s18
24000cfc:	ed93 7a08 	vldr	s14, [r3, #32]
24000d00:	ee76 6ac0 	vsub.f32	s13, s13, s0
24000d04:	ee70 5ae8 	vsub.f32	s11, s1, s17
24000d08:	f8df c27c 	ldr.w	ip, [pc, #636]	; 24000f88 <audioInit+0x928>
24000d0c:	ee37 7a60 	vsub.f32	s14, s14, s1
24000d10:	4f81      	ldr	r7, [pc, #516]	; (24000f18 <audioInit+0x8b8>)
24000d12:	eec7 daa4 	vdiv.f32	s27, s15, s9
24000d16:	4e81      	ldr	r6, [pc, #516]	; (24000f1c <audioInit+0x8bc>)
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d18:	eddf aa81 	vldr	s21, [pc, #516]	; 24000f20 <audioInit+0x8c0>
		  decayAf1[i] = decayAfParts[i] * 123.0f;
24000d1c:	ed9f aa81 	vldr	s20, [pc, #516]	; 24000f24 <audioInit+0x8c4>
24000d20:	4b81      	ldr	r3, [pc, #516]	; (24000f28 <audioInit+0x8c8>)
24000d22:	4882      	ldr	r0, [pc, #520]	; (24000f2c <audioInit+0x8cc>)
24000d24:	ee87 da86 	vdiv.f32	s26, s15, s12
24000d28:	4981      	ldr	r1, [pc, #516]	; (24000f30 <audioInit+0x8d0>)
24000d2a:	4a82      	ldr	r2, [pc, #520]	; (24000f34 <audioInit+0x8d4>)
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000d2c:	4d82      	ldr	r5, [pc, #520]	; (24000f38 <audioInit+0x8d8>)
24000d2e:	eec7 ca85 	vdiv.f32	s25, s15, s10
24000d32:	ee87 caa6 	vdiv.f32	s24, s15, s13
24000d36:	eec7 baa5 	vdiv.f32	s23, s15, s11
24000d3a:	ee87 ba87 	vdiv.f32	s22, s15, s14
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d3e:	edd3 4a0c 	vldr	s9, [r3, #48]	; 0x30
24000d42:	3304      	adds	r3, #4
24000d44:	ed53 2a01 	vldr	s5, [r3, #-4]
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d48:	ecb5 2a01 	vldmia	r5!, {s4}
24000d4c:	ecb4 6a01 	vldmia	r4!, {s12}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d50:	ee87 4aa4 	vdiv.f32	s8, s15, s9
24000d54:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
24000d58:	ed93 5a2f 	vldr	s10, [r3, #188]	; 0xbc
	for (int i = 0; i < NUM_OVERTONES; i++)
24000d5c:	4544      	cmp	r4, r8
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d5e:	edd3 3a23 	vldr	s7, [r3, #140]	; 0x8c
24000d62:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
24000d66:	edd3 1a53 	vldr	s3, [r3, #332]	; 0x14c
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d6a:	eec7 ea82 	vdiv.f32	s29, s15, s4
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d6e:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
24000d72:	ed93 3a5f 	vldr	s6, [r3, #380]	; 0x17c
24000d76:	ee87 2aa2 	vdiv.f32	s4, s15, s5
24000d7a:	eec7 4a85 	vdiv.f32	s9, s15, s10
24000d7e:	eec7 faa3 	vdiv.f32	s31, s15, s7
24000d82:	ee87 5aa1 	vdiv.f32	s10, s15, s3
24000d86:	eec7 3aa5 	vdiv.f32	s7, s15, s11
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000d8a:	eec7 5a86 	vdiv.f32	s11, s15, s12
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000d8e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
24000d92:	eec7 6a87 	vdiv.f32	s13, s15, s14
24000d96:	ee87 7a83 	vdiv.f32	s14, s15, s6
24000d9a:	ee74 1a42 	vsub.f32	s3, s8, s4
24000d9e:	ee35 3a63 	vsub.f32	s6, s10, s7
24000da2:	ee74 2aef 	vsub.f32	s5, s9, s31
24000da6:	ee61 1aad 	vmul.f32	s3, s3, s27
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000daa:	ee75 5aee 	vsub.f32	s11, s11, s29
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dae:	ee36 6a44 	vsub.f32	s12, s12, s8

				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000db2:	ee29 1aa1 	vmul.f32	s2, s19, s3
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000db6:	ece0 1a01 	vstmia	r0!, {s3}
24000dba:	ee76 6ae4 	vsub.f32	s13, s13, s9
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000dbe:	ee65 5aaa 	vmul.f32	s11, s11, s21
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dc2:	ee26 6a0d 	vmul.f32	s12, s12, s26
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000dc6:	eca1 1a01 	vstmia	r1!, {s2}

				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000dca:	ee32 2a41 	vsub.f32	s4, s4, s2
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dce:	ee37 7a45 	vsub.f32	s14, s14, s10
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
24000dd2:	ecec 5a01 	vstmia	ip!, {s11}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dd6:	ee62 2aac 	vmul.f32	s5, s5, s25
24000dda:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
24000dde:	ee66 6a8c 	vmul.f32	s13, s13, s24
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000de2:	eca2 2a01 	vstmia	r2!, {s4}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000de6:	ee27 7a0b 	vmul.f32	s14, s14, s22
24000dea:	ee23 3a2b 	vmul.f32	s6, s6, s23
24000dee:	edc0 2a17 	vstr	s5, [r0, #92]	; 0x5c
		  decayAf1[i] = decayAfParts[i] * 123.0f;
24000df2:	ee25 fa8a 	vmul.f32	s30, s11, s20
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000df6:	edc0 6a23 	vstr	s13, [r0, #140]	; 0x8c
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000dfa:	ee28 ea06 	vmul.f32	s28, s16, s12
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000dfe:	ed80 7a3b 	vstr	s14, [r0, #236]	; 0xec
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e02:	ee29 1a22 	vmul.f32	s2, s18, s5
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
24000e06:	ed80 3a2f 	vstr	s6, [r0, #188]	; 0xbc
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e0a:	ee60 1a26 	vmul.f32	s3, s0, s13
		  decayAf1[i] = decayAfParts[i] * 123.0f;
24000e0e:	eca7 fa01 	vstmia	r7!, {s30}
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e12:	ee28 2a83 	vmul.f32	s4, s17, s6
24000e16:	ed81 ea0b 	vstr	s28, [r1, #44]	; 0x2c
24000e1a:	ee20 6a87 	vmul.f32	s12, s1, s14
24000e1e:	ed81 1a17 	vstr	s2, [r1, #92]	; 0x5c
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
24000e22:	ee7e eacf 	vsub.f32	s29, s29, s30
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e26:	edc1 1a23 	vstr	s3, [r1, #140]	; 0x8c
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000e2a:	ee34 4a4e 	vsub.f32	s8, s8, s28
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e2e:	ed81 2a2f 	vstr	s4, [r1, #188]	; 0xbc
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000e32:	ee7f 5ac1 	vsub.f32	s11, s31, s2
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
24000e36:	ed81 6a3b 	vstr	s12, [r1, #236]	; 0xec
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000e3a:	ee74 4ae1 	vsub.f32	s9, s9, s3
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
24000e3e:	ece6 ea01 	vstmia	r6!, {s29}
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
24000e42:	ee73 3ac2 	vsub.f32	s7, s7, s4
24000e46:	ed82 4a0b 	vstr	s8, [r2, #44]	; 0x2c
24000e4a:	ee35 5a46 	vsub.f32	s10, s10, s12
24000e4e:	edc2 5a17 	vstr	s11, [r2, #92]	; 0x5c
24000e52:	edc2 4a23 	vstr	s9, [r2, #140]	; 0x8c
24000e56:	edc2 3a2f 	vstr	s7, [r2, #188]	; 0xbc
24000e5a:	ed82 5a3b 	vstr	s10, [r2, #236]	; 0xec
	for (int i = 0; i < NUM_OVERTONES; i++)
24000e5e:	f47f af6e 	bne.w	24000d3e <audioInit+0x6de>
24000e62:	4c36      	ldr	r4, [pc, #216]	; (24000f3c <audioInit+0x8dc>)

	}

	for (int i = 0; i < 256; i++)
	{
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
24000e64:	eddf 8a36 	vldr	s17, [pc, #216]	; 24000f40 <audioInit+0x8e0>
24000e68:	ed9f 8a36 	vldr	s16, [pc, #216]	; 24000f44 <audioInit+0x8e4>
24000e6c:	f504 6580 	add.w	r5, r4, #1024	; 0x400
24000e70:	f02b fee6 	bl	2402cc40 <__randomNumber_veneer>
24000e74:	eef0 7a48 	vmov.f32	s15, s16
24000e78:	eee0 7a28 	vfma.f32	s15, s0, s17
24000e7c:	ece4 7a01 	vstmia	r4!, {s15}
	for (int i = 0; i < 256; i++)
24000e80:	42ac      	cmp	r4, r5
24000e82:	d1f5      	bne.n	24000e70 <audioInit+0x810>
	}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
24000e84:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24000e88:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 24000f48 <audioInit+0x8e8>
24000e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24000e90:	482e      	ldr	r0, [pc, #184]	; (24000f4c <audioInit+0x8ec>)
24000e92:	f011 fa33 	bl	240122fc <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 30.0f);
24000e96:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
24000e9a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 24000f50 <audioInit+0x8f0>
24000e9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
24000ea2:	482c      	ldr	r0, [pc, #176]	; (24000f54 <audioInit+0x8f4>)
24000ea4:	f011 fa4e 	bl	24012344 <LEAF_generate_dbtoa>

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
24000ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24000eac:	eddf 0a2a 	vldr	s1, [pc, #168]	; 24000f58 <audioInit+0x8f8>
24000eb0:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 24000f5c <audioInit+0x8fc>
24000eb4:	482a      	ldr	r0, [pc, #168]	; (24000f60 <audioInit+0x900>)
24000eb6:	f011 fa6f 	bl	24012398 <LEAF_generate_mtof>





	if (numStrings == 6)
24000eba:	4b2a      	ldr	r3, [pc, #168]	; (24000f64 <audioInit+0x904>)
24000ebc:	781b      	ldrb	r3, [r3, #0]
24000ebe:	2b06      	cmp	r3, #6
24000ec0:	f000 8423 	beq.w	2400170a <audioInit+0x10aa>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
24000ec4:	2b0a      	cmp	r3, #10
24000ec6:	f000 8403 	beq.w	240016d0 <audioInit+0x1070>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000eca:	4a27      	ldr	r2, [pc, #156]	; (24000f68 <audioInit+0x908>)
24000ecc:	2302      	movs	r3, #2
24000ece:	4927      	ldr	r1, [pc, #156]	; (24000f6c <audioInit+0x90c>)
24000ed0:	7812      	ldrb	r2, [r2, #0]
24000ed2:	0052      	lsls	r2, r2, #1
24000ed4:	600a      	str	r2, [r1, #0]
			numStringsThisBoard = 1;
24000ed6:	4a26      	ldr	r2, [pc, #152]	; (24000f70 <audioInit+0x910>)
24000ed8:	f04f 0900 	mov.w	r9, #0
24000edc:	4925      	ldr	r1, [pc, #148]	; (24000f74 <audioInit+0x914>)
24000ede:	7013      	strb	r3, [r2, #0]
24000ee0:	4b15      	ldr	r3, [pc, #84]	; (24000f38 <audioInit+0x8d8>)
24000ee2:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 24000f8c <audioInit+0x92c>
	{

		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000ee6:	ed9f 9a24 	vldr	s18, [pc, #144]	; 24000f78 <audioInit+0x918>
24000eea:	f103 0830 	add.w	r8, r3, #48	; 0x30
24000eee:	eddf 8a23 	vldr	s17, [pc, #140]	; 24000f7c <audioInit+0x91c>
24000ef2:	ed9f 8a23 	vldr	s16, [pc, #140]	; 24000f80 <audioInit+0x920>
24000ef6:	9103      	str	r1, [sp, #12]
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
24000ef8:	9e03      	ldr	r6, [sp, #12]
24000efa:	465c      	mov	r4, fp
24000efc:	4d0e      	ldr	r5, [pc, #56]	; (24000f38 <audioInit+0x8d8>)
			tCycle_init(&additive[i][j], &leaf);
24000efe:	f8df a090 	ldr.w	sl, [pc, #144]	; 24000f90 <audioInit+0x930>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000f02:	4f20      	ldr	r7, [pc, #128]	; (24000f84 <audioInit+0x924>)
24000f04:	e046      	b.n	24000f94 <audioInit+0x934>
24000f06:	bf00      	nop
24000f08:	200051a8 	.word	0x200051a8
24000f0c:	200051a0 	.word	0x200051a0
24000f10:	20000368 	.word	0x20000368
24000f14:	20000078 	.word	0x20000078
24000f18:	20000f94 	.word	0x20000f94
24000f1c:	20001024 	.word	0x20001024
24000f20:	3b84a9fa 	.word	0x3b84a9fa
24000f24:	42f60000 	.word	0x42f60000
24000f28:	200001b8 	.word	0x200001b8
24000f2c:	20000c0c 	.word	0x20000c0c
24000f30:	20000aec 	.word	0x20000aec
24000f34:	20000d2c 	.word	0x20000d2c
24000f38:	20000030 	.word	0x20000030
24000f3c:	20005784 	.word	0x20005784
24000f40:	3ecccccd 	.word	0x3ecccccd
24000f44:	3f4ccccd 	.word	0x3f4ccccd
24000f48:	3727c5ac 	.word	0x3727c5ac
24000f4c:	3000a000 	.word	0x3000a000
24000f50:	c2b40000 	.word	0xc2b40000
24000f54:	30002000 	.word	0x30002000
24000f58:	4323d666 	.word	0x4323d666
24000f5c:	c323d666 	.word	0xc323d666
24000f60:	30012000 	.word	0x30012000
24000f64:	20000014 	.word	0x20000014
24000f68:	20014b05 	.word	0x20014b05
24000f6c:	2000513c 	.word	0x2000513c
24000f70:	20000015 	.word	0x20000015
24000f74:	200009d4 	.word	0x200009d4
24000f78:	447a0000 	.word	0x447a0000
24000f7c:	43160000 	.word	0x43160000
24000f80:	00000000 	.word	0x00000000
24000f84:	2000106c 	.word	0x2000106c
24000f88:	20000fdc 	.word	0x20000fdc
24000f8c:	20000944 	.word	0x20000944
24000f90:	200052f4 	.word	0x200052f4
			tCycle_init(&additive[i][j], &leaf);
24000f94:	4620      	mov	r0, r4
24000f96:	4651      	mov	r1, sl
24000f98:	f011 fcf0 	bl	2401297c <tCycle_init>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24000f9c:	ecf5 0a01 	vldmia	r5!, {s1}
24000fa0:	4630      	mov	r0, r6
24000fa2:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24000fa6:	ee60 0a89 	vmul.f32	s1, s1, s18
24000faa:	4653      	mov	r3, sl
24000fac:	eef0 1a68 	vmov.f32	s3, s17
24000fb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000fb4:	eeb0 1a48 	vmov.f32	s2, s16
24000fb8:	4639      	mov	r1, r7
24000fba:	f00f fa11 	bl	240103e0 <tADSRT_init>
		for (int j = 0; j < NUM_OVERTONES; j++)
24000fbe:	4545      	cmp	r5, r8
24000fc0:	f104 0404 	add.w	r4, r4, #4
24000fc4:	f106 0604 	add.w	r6, r6, #4
24000fc8:	d1e4      	bne.n	24000f94 <audioInit+0x934>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
24000fca:	9b03      	ldr	r3, [sp, #12]
24000fcc:	f109 0912 	add.w	r9, r9, #18
24000fd0:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
24000fd4:	3348      	adds	r3, #72	; 0x48
24000fd6:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
24000fda:	9303      	str	r3, [sp, #12]
24000fdc:	d18c      	bne.n	24000ef8 <audioInit+0x898>


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000fde:	4edc      	ldr	r6, [pc, #880]	; (24001350 <audioInit+0xcf0>)
24000fe0:	eddf 8adc 	vldr	s17, [pc, #880]	; 24001354 <audioInit+0xcf4>
24000fe4:	ed9f 8adc 	vldr	s16, [pc, #880]	; 24001358 <audioInit+0xcf8>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
24000fe8:	4631      	mov	r1, r6
24000fea:	4cdc      	ldr	r4, [pc, #880]	; (2400135c <audioInit+0xcfc>)
24000fec:	eef0 0a68 	vmov.f32	s1, s17
24000ff0:	eeb0 0a48 	vmov.f32	s0, s16
24000ff4:	48da      	ldr	r0, [pc, #872]	; (24001360 <audioInit+0xd00>)
24000ff6:	f104 0530 	add.w	r5, r4, #48	; 0x30
24000ffa:	f00f fa55 	bl	240104a8 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000ffe:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
24001000:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24001002:	eef0 0a68 	vmov.f32	s1, s17
24001006:	4631      	mov	r1, r6
24001008:	eeb0 0a48 	vmov.f32	s0, s16
2400100c:	f00f fa4c 	bl	240104a8 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
24001010:	42a5      	cmp	r5, r4
24001012:	d1f4      	bne.n	24000ffe <audioInit+0x99e>
24001014:	4cd3      	ldr	r4, [pc, #844]	; (24001364 <audioInit+0xd04>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24001016:	4ece      	ldr	r6, [pc, #824]	; (24001350 <audioInit+0xcf0>)
24001018:	eddf 8ace 	vldr	s17, [pc, #824]	; 24001354 <audioInit+0xcf4>
2400101c:	f104 0528 	add.w	r5, r4, #40	; 0x28
24001020:	ed9f 8acd 	vldr	s16, [pc, #820]	; 24001358 <audioInit+0xcf8>
24001024:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
24001026:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24001028:	eef0 0a68 	vmov.f32	s1, s17
2400102c:	4631      	mov	r1, r6
2400102e:	eeb0 0a48 	vmov.f32	s0, s16
24001032:	f00f fa39 	bl	240104a8 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
24001036:	42a5      	cmp	r5, r4
24001038:	d1f4      	bne.n	24001024 <audioInit+0x9c4>

			tPBSineTriangle_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);

			freqMult[i][v] = 1.0f;
2400103a:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
2400103e:	4bca      	ldr	r3, [pc, #808]	; (24001368 <audioInit+0xd08>)
	tExpSmooth_init(&barNoiseSmoother,0.0f, 0.002f, &leaf);
24001040:	2600      	movs	r6, #0
24001042:	f8df b420 	ldr.w	fp, [pc, #1056]	; 24001464 <audioInit+0xe04>
			tPBSaw_init(&saw[i][v], &leaf);
24001046:	4cc2      	ldr	r4, [pc, #776]	; (24001350 <audioInit+0xcf0>)
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
24001048:	eddf bac8 	vldr	s23, [pc, #800]	; 2400136c <audioInit+0xd0c>
			midiAdd[i][v] = 0.0f;
2400104c:	ed9f 8ac2 	vldr	s16, [pc, #776]	; 24001358 <audioInit+0xcf8>

		}
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
24001050:	eddf cac7 	vldr	s25, [pc, #796]	; 24001370 <audioInit+0xd10>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
		}
		//noise
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
24001054:	ed9f aac7 	vldr	s20, [pc, #796]	; 24001374 <audioInit+0xd14>
	tExpSmooth_init(&barNoiseSmoother,0.0f, 0.002f, &leaf);
24001058:	49bd      	ldr	r1, [pc, #756]	; (24001350 <audioInit+0xcf0>)
2400105a:	eddf 0ac7 	vldr	s1, [pc, #796]	; 24001378 <audioInit+0xd18>
2400105e:	ed9f 0abe 	vldr	s0, [pc, #760]	; 24001358 <audioInit+0xcf8>
24001062:	48c6      	ldr	r0, [pc, #792]	; (2400137c <audioInit+0xd1c>)
24001064:	9304      	str	r3, [sp, #16]
24001066:	f00f fa1f 	bl	240104a8 <tExpSmooth_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
2400106a:	9605      	str	r6, [sp, #20]
		for(int i = 0; i < NUM_OSC; i++)
2400106c:	4bc4      	ldr	r3, [pc, #784]	; (24001380 <audioInit+0xd20>)
			numStringsThisBoard = 1;
2400106e:	4635      	mov	r5, r6
24001070:	f106 0818 	add.w	r8, r6, #24
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
24001074:	eddf 8ac3 	vldr	s17, [pc, #780]	; 24001384 <audioInit+0xd24>
24001078:	eb03 0906 	add.w	r9, r3, r6
2400107c:	4bc2      	ldr	r3, [pc, #776]	; (24001388 <audioInit+0xd28>)
2400107e:	199f      	adds	r7, r3, r6
			tPBSaw_init(&saw[i][v], &leaf);
24001080:	4648      	mov	r0, r9
24001082:	4621      	mov	r1, r4
24001084:	f011 fd92 	bl	24012bac <tPBSaw_init>
			tPBPulse_init(&pulse[i][v], &leaf);
24001088:	4638      	mov	r0, r7
2400108a:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
2400108c:	f109 0908 	add.w	r9, r9, #8
			tPBPulse_init(&pulse[i][v], &leaf);
24001090:	f011 fd4a 	bl	24012b28 <tPBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
24001094:	4bbd      	ldr	r3, [pc, #756]	; (2400138c <audioInit+0xd2c>)
24001096:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
24001098:	3708      	adds	r7, #8
			tCycle_init(&sine[i][v],  &leaf);
2400109a:	1958      	adds	r0, r3, r5
2400109c:	f011 fc6e 	bl	2401297c <tCycle_init>
			tPBTriangle_init(&tri[i][v],  &leaf);
240010a0:	4bbb      	ldr	r3, [pc, #748]	; (24001390 <audioInit+0xd30>)
240010a2:	4621      	mov	r1, r4
240010a4:	1958      	adds	r0, r3, r5
240010a6:	f011 fcc9 	bl	24012a3c <tPBTriangle_init>
			tPBSawSquare_init(&sawPaired[i][v], &leaf);
240010aa:	4bba      	ldr	r3, [pc, #744]	; (24001394 <audioInit+0xd34>)
240010ac:	4621      	mov	r1, r4
240010ae:	1958      	adds	r0, r3, r5
240010b0:	f011 fd98 	bl	24012be4 <tPBSawSquare_init>
			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
240010b4:	4bb8      	ldr	r3, [pc, #736]	; (24001398 <audioInit+0xd38>)
240010b6:	4621      	mov	r1, r4
240010b8:	1958      	adds	r0, r3, r5
240010ba:	f011 fcf5 	bl	24012aa8 <tPBSineTriangle_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
240010be:	4bb7      	ldr	r3, [pc, #732]	; (2400139c <audioInit+0xd3c>)
240010c0:	eef0 0a68 	vmov.f32	s1, s17
240010c4:	4621      	mov	r1, r4
240010c6:	1958      	adds	r0, r3, r5
240010c8:	eeb0 0a6b 	vmov.f32	s0, s23
240010cc:	f00f f9ec 	bl	240104a8 <tExpSmooth_init>
			freqMult[i][v] = 1.0f;
240010d0:	4bb3      	ldr	r3, [pc, #716]	; (240013a0 <audioInit+0xd40>)
240010d2:	442b      	add	r3, r5
240010d4:	ed83 ca00 	vstr	s24, [r3]
			midiAdd[i][v] = 0.0f;
240010d8:	4bb2      	ldr	r3, [pc, #712]	; (240013a4 <audioInit+0xd44>)
240010da:	442b      	add	r3, r5
		for(int i = 0; i < NUM_OSC; i++)
240010dc:	3508      	adds	r5, #8
240010de:	45a8      	cmp	r8, r5
			midiAdd[i][v] = 0.0f;
240010e0:	ed83 8a00 	vstr	s16, [r3]
		for(int i = 0; i < NUM_OSC; i++)
240010e4:	d1cc      	bne.n	24001080 <audioInit+0xa20>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
240010e6:	4bb0      	ldr	r3, [pc, #704]	; (240013a8 <audioInit+0xd48>)
240010e8:	eef0 2a6c 	vmov.f32	s5, s25
240010ec:	ed9f 2aa0 	vldr	s4, [pc, #640]	; 24001370 <audioInit+0xd10>
240010f0:	eef0 1a48 	vmov.f32	s3, s16
240010f4:	1998      	adds	r0, r3, r6
240010f6:	ed9f 1aad 	vldr	s2, [pc, #692]	; 240013ac <audioInit+0xd4c>
240010fa:	eddf 0aad 	vldr	s1, [pc, #692]	; 240013b0 <audioInit+0xd50>
240010fe:	2200      	movs	r2, #0
24001100:	4bac      	ldr	r3, [pc, #688]	; (240013b4 <audioInit+0xd54>)
24001102:	2104      	movs	r1, #4
24001104:	ed9f 0aac 	vldr	s0, [pc, #688]	; 240013b8 <audioInit+0xd58>
		whichStringModelLoaded = String1Loaded;
24001108:	2500      	movs	r5, #0
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
2400110a:	9003      	str	r0, [sp, #12]
2400110c:	f012 f954 	bl	240133b8 <tSimpleLivingString3_initToPool>
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
24001110:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 240013bc <audioInit+0xd5c>
24001114:	f106 0710 	add.w	r7, r6, #16
24001118:	9803      	ldr	r0, [sp, #12]
2400111a:	f012 fb37 	bl	2401378c <tSimpleLivingString3_setTargetLev>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
2400111e:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 240013c0 <audioInit+0xd60>
24001122:	9803      	ldr	r0, [sp, #12]
24001124:	f012 fb36 	bl	24013794 <tSimpleLivingString3_setLevSmoothFactor>
		tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
24001128:	eeb0 0a48 	vmov.f32	s0, s16
2400112c:	9803      	ldr	r0, [sp, #12]
2400112e:	f012 fb35 	bl	2401379c <tSimpleLivingString3_setLevStrength>
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
24001132:	9803      	ldr	r0, [sp, #12]
24001134:	2101      	movs	r1, #1
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001136:	ed9f 9acd 	vldr	s18, [pc, #820]	; 2400146c <audioInit+0xe0c>
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
2400113a:	f012 fb33 	bl	240137a4 <tSimpleLivingString3_setLevMode>
		whichStringModelLoaded = String1Loaded;
2400113e:	4ba1      	ldr	r3, [pc, #644]	; (240013c4 <audioInit+0xd64>)
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24001140:	4aa1      	ldr	r2, [pc, #644]	; (240013c8 <audioInit+0xd68>)
24001142:	eeb0 1a48 	vmov.f32	s2, s16
24001146:	eddf 1aa1 	vldr	s3, [pc, #644]	; 240013cc <audioInit+0xd6c>
2400114a:	1990      	adds	r0, r2, r6
		whichStringModelLoaded = String1Loaded;
2400114c:	701d      	strb	r5, [r3, #0]
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
2400114e:	eddf 0aa0 	vldr	s1, [pc, #640]	; 240013d0 <audioInit+0xd70>
24001152:	4623      	mov	r3, r4
24001154:	ed9f 0a80 	vldr	s0, [pc, #512]	; 24001358 <audioInit+0xcf8>
24001158:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400115c:	499d      	ldr	r1, [pc, #628]	; (240013d4 <audioInit+0xd74>)
2400115e:	f00f f93f 	bl	240103e0 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
24001162:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
24001166:	4622      	mov	r2, r4
24001168:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 240013d8 <audioInit+0xd78>
2400116c:	2103      	movs	r1, #3
2400116e:	489b      	ldr	r0, [pc, #620]	; (240013dc <audioInit+0xd7c>)
24001170:	f00f fe90 	bl	24010e94 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
24001174:	4622      	mov	r2, r4
24001176:	2101      	movs	r1, #1
24001178:	eddf 0a99 	vldr	s1, [pc, #612]	; 240013e0 <audioInit+0xd80>
2400117c:	ed9f 0a99 	vldr	s0, [pc, #612]	; 240013e4 <audioInit+0xd84>
24001180:	4899      	ldr	r0, [pc, #612]	; (240013e8 <audioInit+0xd88>)
24001182:	f00f fe87 	bl	24010e94 <tVZFilter_init>
		tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
24001186:	4898      	ldr	r0, [pc, #608]	; (240013e8 <audioInit+0xd88>)
24001188:	ed9f 0a98 	vldr	s0, [pc, #608]	; 240013ec <audioInit+0xd8c>
2400118c:	f00f fe86 	bl	24010e9c <tVZFilter_setFreq>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
24001190:	4629      	mov	r1, r5
24001192:	4622      	mov	r2, r4
24001194:	4896      	ldr	r0, [pc, #600]	; (240013f0 <audioInit+0xd90>)
24001196:	4635      	mov	r5, r6
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001198:	eddf 8ab5 	vldr	s17, [pc, #724]	; 24001470 <audioInit+0xe10>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
2400119c:	f011 fd48 	bl	24012c30 <tNoise_init>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
240011a0:	4b94      	ldr	r3, [pc, #592]	; (240013f4 <audioInit+0xd94>)
240011a2:	eef0 0a49 	vmov.f32	s1, s18
240011a6:	eeb0 0a68 	vmov.f32	s0, s17
240011aa:	2101      	movs	r1, #1
240011ac:	1958      	adds	r0, r3, r5
240011ae:	4622      	mov	r2, r4
240011b0:	f00f faf8 	bl	240107a4 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
240011b4:	4b90      	ldr	r3, [pc, #576]	; (240013f8 <audioInit+0xd98>)
240011b6:	eef0 0a49 	vmov.f32	s1, s18
240011ba:	4622      	mov	r2, r4
240011bc:	1958      	adds	r0, r3, r5
240011be:	eeb0 0a68 	vmov.f32	s0, s17
240011c2:	2100      	movs	r1, #0
240011c4:	f00f faee 	bl	240107a4 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
240011c8:	4b8c      	ldr	r3, [pc, #560]	; (240013fc <audioInit+0xd9c>)
240011ca:	4622      	mov	r2, r4
240011cc:	eef0 0a49 	vmov.f32	s1, s18
240011d0:	1958      	adds	r0, r3, r5
240011d2:	eeb0 0a68 	vmov.f32	s0, s17
240011d6:	2102      	movs	r1, #2
240011d8:	f00f fae4 	bl	240107a4 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
240011dc:	4b88      	ldr	r3, [pc, #544]	; (24001400 <audioInit+0xda0>)
240011de:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
240011e2:	4621      	mov	r1, r4
240011e4:	1958      	adds	r0, r3, r5
240011e6:	eeb0 0a68 	vmov.f32	s0, s17
240011ea:	f010 f947 	bl	2401147c <tDiodeFilter_init>
			tVZFilter_init(&VZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
240011ee:	4b85      	ldr	r3, [pc, #532]	; (24001404 <audioInit+0xda4>)
240011f0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240011f4:	4622      	mov	r2, r4
240011f6:	1958      	adds	r0, r3, r5
240011f8:	eeb0 0a68 	vmov.f32	s0, s17
240011fc:	2105      	movs	r1, #5
240011fe:	f00f fe49 	bl	24010e94 <tVZFilter_init>
			tVZFilter_init(&VZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
24001202:	4b81      	ldr	r3, [pc, #516]	; (24001408 <audioInit+0xda8>)
24001204:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001208:	4622      	mov	r2, r4
2400120a:	1958      	adds	r0, r3, r5
2400120c:	eeb0 0a68 	vmov.f32	s0, s17
24001210:	2106      	movs	r1, #6
24001212:	f00f fe3f 	bl	24010e94 <tVZFilter_init>
			tVZFilter_init(&VZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
24001216:	4b7d      	ldr	r3, [pc, #500]	; (2400140c <audioInit+0xdac>)
24001218:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
2400121c:	4622      	mov	r2, r4
2400121e:	1958      	adds	r0, r3, r5
24001220:	eeb0 0a68 	vmov.f32	s0, s17
24001224:	2107      	movs	r1, #7
24001226:	f00f fe35 	bl	24010e94 <tVZFilter_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
2400122a:	4b79      	ldr	r3, [pc, #484]	; (24001410 <audioInit+0xdb0>)
2400122c:	4622      	mov	r2, r4
2400122e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001232:	1958      	adds	r0, r3, r5
24001234:	eeb0 0a68 	vmov.f32	s0, s17
24001238:	2104      	movs	r1, #4
2400123a:	f00f fe2b 	bl	24010e94 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
2400123e:	4b75      	ldr	r3, [pc, #468]	; (24001414 <audioInit+0xdb4>)
24001240:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001244:	4621      	mov	r1, r4
24001246:	1958      	adds	r0, r3, r5
24001248:	eeb0 0a68 	vmov.f32	s0, s17
2400124c:	f010 fd3e 	bl	24011ccc <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
24001250:	4b71      	ldr	r3, [pc, #452]	; (24001418 <audioInit+0xdb8>)
24001252:	eef0 0a6c 	vmov.f32	s1, s25
24001256:	4621      	mov	r1, r4
24001258:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
2400125a:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
2400125c:	eeb0 0a6b 	vmov.f32	s0, s23
24001260:	f00f f922 	bl	240104a8 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
24001264:	42bd      	cmp	r5, r7
24001266:	d19b      	bne.n	240011a0 <audioInit+0xb40>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24001268:	4b6c      	ldr	r3, [pc, #432]	; (2400141c <audioInit+0xdbc>)
2400126a:	2500      	movs	r5, #0
2400126c:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
24001270:	4b6b      	ldr	r3, [pc, #428]	; (24001420 <audioInit+0xdc0>)
24001272:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24001274:	eb08 0005 	add.w	r0, r8, r5
24001278:	4621      	mov	r1, r4
2400127a:	f011 fd3b 	bl	24012cf4 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
2400127e:	1978      	adds	r0, r7, r5
24001280:	4621      	mov	r1, r4
24001282:	f011 fd7d 	bl	24012d80 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
24001286:	4b67      	ldr	r3, [pc, #412]	; (24001424 <audioInit+0xdc4>)
24001288:	4621      	mov	r1, r4
2400128a:	1998      	adds	r0, r3, r6
2400128c:	4428      	add	r0, r5
2400128e:	f011 fb75 	bl	2401297c <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
24001292:	4b65      	ldr	r3, [pc, #404]	; (24001428 <audioInit+0xdc8>)
24001294:	4621      	mov	r1, r4
24001296:	1998      	adds	r0, r3, r6
24001298:	4428      	add	r0, r5
2400129a:	f011 ff63 	bl	24013164 <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
2400129e:	4b63      	ldr	r3, [pc, #396]	; (2400142c <audioInit+0xdcc>)
240012a0:	4621      	mov	r1, r4
240012a2:	1998      	adds	r0, r3, r6
240012a4:	4428      	add	r0, r5
240012a6:	f011 ffb9 	bl	2401321c <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
240012aa:	4b61      	ldr	r3, [pc, #388]	; (24001430 <audioInit+0xdd0>)
240012ac:	4621      	mov	r1, r4
240012ae:	1998      	adds	r0, r3, r6
240012b0:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
240012b2:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
240012b4:	f011 fe92 	bl	24012fdc <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
240012b8:	2d20      	cmp	r5, #32
240012ba:	d1db      	bne.n	24001274 <audioInit+0xc14>
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
240012bc:	4b5d      	ldr	r3, [pc, #372]	; (24001434 <audioInit+0xdd4>)
240012be:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
240012c2:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 24001438 <audioInit+0xdd8>
240012c6:	2106      	movs	r1, #6
240012c8:	1998      	adds	r0, r3, r6
240012ca:	4622      	mov	r2, r4
240012cc:	f00f fde2 	bl	24010e94 <tVZFilter_init>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
240012d0:	4b5a      	ldr	r3, [pc, #360]	; (2400143c <audioInit+0xddc>)
240012d2:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
240012d6:	4622      	mov	r2, r4
240012d8:	1998      	adds	r0, r3, r6
240012da:	ed9f 0a59 	vldr	s0, [pc, #356]	; 24001440 <audioInit+0xde0>
240012de:	2107      	movs	r1, #7


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240012e0:	ed9f 9a58 	vldr	s18, [pc, #352]	; 24001444 <audioInit+0xde4>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
240012e4:	f00f fdd6 	bl	24010e94 <tVZFilter_init>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
240012e8:	4b57      	ldr	r3, [pc, #348]	; (24001448 <audioInit+0xde8>)
240012ea:	9f04      	ldr	r7, [sp, #16]
240012ec:	eeb0 0a4a 	vmov.f32	s0, s20
240012f0:	4622      	mov	r2, r4
240012f2:	eddf 0a56 	vldr	s1, [pc, #344]	; 2400144c <audioInit+0xdec>
240012f6:	2105      	movs	r1, #5
240012f8:	1998      	adds	r0, r3, r6
240012fa:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
240012fe:	eddf 8a54 	vldr	s17, [pc, #336]	; 24001450 <audioInit+0xdf0>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
24001302:	f00f fdc7 	bl	24010e94 <tVZFilter_init>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24001306:	4628      	mov	r0, r5
24001308:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
2400130c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
24001310:	4623      	mov	r3, r4
24001312:	eef0 0a4a 	vmov.f32	s1, s20
24001316:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400131a:	eeb0 0a49 	vmov.f32	s0, s18
2400131e:	492d      	ldr	r1, [pc, #180]	; (240013d4 <audioInit+0xd74>)
24001320:	f00f f85e 	bl	240103e0 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
24001324:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
24001326:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
24001328:	eeb0 0a68 	vmov.f32	s0, s17
2400132c:	f02b fc6c 	bl	2402cc08 <__tADSRT_setLeakFactor_veneer>
		for (int i = 0; i < NUM_ENV; i++)
24001330:	42af      	cmp	r7, r5
24001332:	d1e8      	bne.n	24001306 <audioInit+0xca6>
24001334:	4b47      	ldr	r3, [pc, #284]	; (24001454 <audioInit+0xdf4>)
24001336:	4635      	mov	r5, r6
		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
24001338:	ed9f ba47 	vldr	s22, [pc, #284]	; 24001458 <audioInit+0xdf8>
2400133c:	eb03 0806 	add.w	r8, r3, r6
24001340:	4b46      	ldr	r3, [pc, #280]	; (2400145c <audioInit+0xdfc>)
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
24001342:	eddf 9a47 	vldr	s19, [pc, #284]	; 24001460 <audioInit+0xe00>
24001346:	199f      	adds	r7, r3, r6
24001348:	f106 0320 	add.w	r3, r6, #32
2400134c:	e092      	b.n	24001474 <audioInit+0xe14>
2400134e:	bf00      	nop
24001350:	200052f4 	.word	0x200052f4
24001354:	3a03126f 	.word	0x3a03126f
24001358:	00000000 	.word	0x00000000
2400135c:	200052c0 	.word	0x200052c0
24001360:	2001490c 	.word	0x2001490c
24001364:	20005708 	.word	0x20005708
24001368:	200050fc 	.word	0x200050fc
2400136c:	42800000 	.word	0x42800000
24001370:	3c23d70a 	.word	0x3c23d70a
24001374:	447a0000 	.word	0x447a0000
24001378:	3b03126f 	.word	0x3b03126f
2400137c:	20000a88 	.word	0x20000a88
24001380:	20005b8c 	.word	0x20005b8c
24001384:	3ca3d70a 	.word	0x3ca3d70a
24001388:	2000576c 	.word	0x2000576c
2400138c:	20005c48 	.word	0x20005c48
24001390:	200148e4 	.word	0x200148e4
24001394:	20005ba4 	.word	0x20005ba4
24001398:	20005c60 	.word	0x20005c60
2400139c:	20005730 	.word	0x20005730
240013a0:	20005148 	.word	0x20005148
240013a4:	20005538 	.word	0x20005538
240013a8:	20005418 	.word	0x20005418
240013ac:	3f7fff58 	.word	0x3f7fff58
240013b0:	4684d000 	.word	0x4684d000
240013b4:	20005534 	.word	0x20005534
240013b8:	435c0000 	.word	0x435c0000
240013bc:	3d40c0f0 	.word	0x3d40c0f0
240013c0:	3cf753bf 	.word	0x3cf753bf
240013c4:	20014931 	.word	0x20014931
240013c8:	200050fc 	.word	0x200050fc
240013cc:	43480000 	.word	0x43480000
240013d0:	42480000 	.word	0x42480000
240013d4:	2000106c 	.word	0x2000106c
240013d8:	44bb8000 	.word	0x44bb8000
240013dc:	200055a0 	.word	0x200055a0
240013e0:	3f666666 	.word	0x3f666666
240013e4:	44480000 	.word	0x44480000
240013e8:	200055a4 	.word	0x200055a4
240013ec:	45504000 	.word	0x45504000
240013f0:	20005590 	.word	0x20005590
240013f4:	20005420 	.word	0x20005420
240013f8:	200051cc 	.word	0x200051cc
240013fc:	20000a70 	.word	0x20000a70
24001400:	200050b0 	.word	0x200050b0
24001404:	20000934 	.word	0x20000934
24001408:	20000924 	.word	0x20000924
2400140c:	20000914 	.word	0x20000914
24001410:	20000904 	.word	0x20000904
24001414:	200008f4 	.word	0x200008f4
24001418:	20005104 	.word	0x20005104
2400141c:	20005368 	.word	0x20005368
24001420:	20005348 	.word	0x20005348
24001424:	200053b8 	.word	0x200053b8
24001428:	200053f8 	.word	0x200053f8
2400142c:	200053d8 	.word	0x200053d8
24001430:	20005388 	.word	0x20005388
24001434:	200055bc 	.word	0x200055bc
24001438:	42a00000 	.word	0x42a00000
2400143c:	200055c4 	.word	0x200055c4
24001440:	463b8000 	.word	0x463b8000
24001444:	3dcccccd 	.word	0x3dcccccd
24001448:	20005598 	.word	0x20005598
2400144c:	3ff33333 	.word	0x3ff33333
24001450:	3f7fffac 	.word	0x3f7fffac
24001454:	20000a8c 	.word	0x20000a8c
24001458:	42000000 	.word	0x42000000
2400145c:	20000e4c 	.word	0x20000e4c
24001460:	47bb8000 	.word	0x47bb8000
24001464:	20005534 	.word	0x20005534
24001468:	457a0000 	.word	0x457a0000
2400146c:	3f333333 	.word	0x3f333333
24001470:	44fa0000 	.word	0x44fa0000
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
			tCompressor_init(&comp[i][v], &leaf);
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
24001474:	ed5f aa04 	vldr	s21, [pc, #-16]	; 24001468 <audioInit+0xe08>
			tCycle_init(&mod2[i][v], &leaf);
			tCycle_setFreq(&mod1[i][v], 0.2f);
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001478:	ed1f 9a04 	vldr	s18, [pc, #-16]	; 2400146c <audioInit+0xe0c>
2400147c:	ed5f 8a04 	vldr	s17, [pc, #-16]	; 24001470 <audioInit+0xe10>
24001480:	e9cd b606 	strd	fp, r6, [sp, #24]
24001484:	461e      	mov	r6, r3
			tCrusher_init(&bc[i][v],&leaf);
24001486:	4640      	mov	r0, r8
24001488:	4621      	mov	r1, r4
2400148a:	f00e fdb7 	bl	2400fffc <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
2400148e:	4638      	mov	r0, r7
24001490:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24001494:	4621      	mov	r1, r4
24001496:	f00f fa89 	bl	240109ac <tHighpass_init>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
2400149a:	4ba4      	ldr	r3, [pc, #656]	; (2400172c <audioInit+0x10cc>)
2400149c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
240014a0:	4621      	mov	r1, r4
240014a2:	eb03 0b05 	add.w	fp, r3, r5
240014a6:	4ba2      	ldr	r3, [pc, #648]	; (24001730 <audioInit+0x10d0>)
		for (int i = 0; i < NUM_EFFECT; i++)
240014a8:	f108 0808 	add.w	r8, r8, #8
240014ac:	3708      	adds	r7, #8
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
240014ae:	1958      	adds	r0, r3, r5
240014b0:	f00f fa7c 	bl	240109ac <tHighpass_init>
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
240014b4:	4b9f      	ldr	r3, [pc, #636]	; (24001734 <audioInit+0x10d4>)
240014b6:	eef0 0a4b 	vmov.f32	s1, s22
240014ba:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 24001738 <audioInit+0x10d8>
240014be:	eb03 0a05 	add.w	sl, r3, r5
240014c2:	4b9e      	ldr	r3, [pc, #632]	; (2400173c <audioInit+0x10dc>)
240014c4:	4622      	mov	r2, r4
240014c6:	2106      	movs	r1, #6
240014c8:	eb03 0905 	add.w	r9, r3, r5
240014cc:	4658      	mov	r0, fp
240014ce:	f00f fce1 	bl	24010e94 <tVZFilter_init>
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
240014d2:	4650      	mov	r0, sl
240014d4:	eef0 0a4b 	vmov.f32	s1, s22
240014d8:	ed9f 0a99 	vldr	s0, [pc, #612]	; 24001740 <audioInit+0x10e0>
240014dc:	4622      	mov	r2, r4
240014de:	2107      	movs	r1, #7
240014e0:	f00f fcd8 	bl	24010e94 <tVZFilter_init>
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
240014e4:	eddf 0a97 	vldr	s1, [pc, #604]	; 24001744 <audioInit+0x10e4>
240014e8:	4622      	mov	r2, r4
240014ea:	2105      	movs	r1, #5
240014ec:	4648      	mov	r0, r9
240014ee:	eeb0 0a4a 	vmov.f32	s0, s20
240014f2:	f00f fccf 	bl	24010e94 <tVZFilter_init>
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
240014f6:	eeb0 0a69 	vmov.f32	s0, s19
240014fa:	4658      	mov	r0, fp
240014fc:	f00f fe7c 	bl	240111f8 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
24001500:	4650      	mov	r0, sl
24001502:	eeb0 0a69 	vmov.f32	s0, s19
24001506:	f00f fe77 	bl	240111f8 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
2400150a:	eeb0 0a69 	vmov.f32	s0, s19
2400150e:	4648      	mov	r0, r9
24001510:	f00f fe72 	bl	240111f8 <tVZFilter_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
24001514:	4b8c      	ldr	r3, [pc, #560]	; (24001748 <audioInit+0x10e8>)
24001516:	4621      	mov	r1, r4
24001518:	1958      	adds	r0, r3, r5
2400151a:	4b8c      	ldr	r3, [pc, #560]	; (2400174c <audioInit+0x10ec>)
2400151c:	9003      	str	r0, [sp, #12]
2400151e:	eb03 0905 	add.w	r9, r3, r5
24001522:	f00e fe27 	bl	24010174 <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
24001526:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400152a:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
2400152e:	ed9f 1a88 	vldr	s2, [pc, #544]	; 24001750 <audioInit+0x10f0>
24001532:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
24001536:	ed9f 0a87 	vldr	s0, [pc, #540]	; 24001754 <audioInit+0x10f4>
2400153a:	9803      	ldr	r0, [sp, #12]
2400153c:	4a86      	ldr	r2, [pc, #536]	; (24001758 <audioInit+0x10f8>)
2400153e:	4987      	ldr	r1, [pc, #540]	; (2400175c <audioInit+0x10fc>)
24001540:	9300      	str	r3, [sp, #0]
24001542:	f00e febf 	bl	240102c4 <tCompressor_setTables>
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
24001546:	4b86      	ldr	r3, [pc, #536]	; (24001760 <audioInit+0x1100>)
24001548:	eeb0 0a6a 	vmov.f32	s0, s21
2400154c:	4a85      	ldr	r2, [pc, #532]	; (24001764 <audioInit+0x1104>)
2400154e:	1958      	adds	r0, r3, r5
24001550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24001554:	f00e fae6 	bl	2400fb24 <tLinearDelay_initToPool>
			tLinearDelay_initToPool(&delay2[i][v], 4000.0f, 4096, &largePool);
24001558:	4b83      	ldr	r3, [pc, #524]	; (24001768 <audioInit+0x1108>)
2400155a:	4a82      	ldr	r2, [pc, #520]	; (24001764 <audioInit+0x1104>)
2400155c:	eeb0 0a6a 	vmov.f32	s0, s21
24001560:	1958      	adds	r0, r3, r5
24001562:	4b82      	ldr	r3, [pc, #520]	; (2400176c <audioInit+0x110c>)
24001564:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24001568:	eb03 0a05 	add.w	sl, r3, r5
2400156c:	f00e fada 	bl	2400fb24 <tLinearDelay_initToPool>
			tCycle_init(&mod1[i][v], &leaf);
24001570:	4621      	mov	r1, r4
24001572:	4648      	mov	r0, r9
24001574:	f011 fa02 	bl	2401297c <tCycle_init>
			tCycle_init(&mod2[i][v], &leaf);
24001578:	4621      	mov	r1, r4
2400157a:	4650      	mov	r0, sl
2400157c:	f011 f9fe 	bl	2401297c <tCycle_init>
			tCycle_setFreq(&mod1[i][v], 0.2f);
24001580:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 24001770 <audioInit+0x1110>
24001584:	4648      	mov	r0, r9
24001586:	f011 fa3b 	bl	24012a00 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
2400158a:	4650      	mov	r0, sl
2400158c:	ed9f 0a79 	vldr	s0, [pc, #484]	; 24001774 <audioInit+0x1114>
24001590:	f011 fa36 	bl	24012a00 <tCycle_setFreq>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24001594:	4b78      	ldr	r3, [pc, #480]	; (24001778 <audioInit+0x1118>)
24001596:	eef0 0a49 	vmov.f32	s1, s18
2400159a:	4622      	mov	r2, r4
2400159c:	1958      	adds	r0, r3, r5
2400159e:	eeb0 0a68 	vmov.f32	s0, s17
240015a2:	2101      	movs	r1, #1
240015a4:	f00f f8fe 	bl	240107a4 <tSVF_init>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
240015a8:	4b74      	ldr	r3, [pc, #464]	; (2400177c <audioInit+0x111c>)
240015aa:	eef0 0a49 	vmov.f32	s1, s18
240015ae:	4622      	mov	r2, r4
240015b0:	1958      	adds	r0, r3, r5
240015b2:	eeb0 0a68 	vmov.f32	s0, s17
240015b6:	2100      	movs	r1, #0
240015b8:	f00f f8f4 	bl	240107a4 <tSVF_init>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
240015bc:	4b70      	ldr	r3, [pc, #448]	; (24001780 <audioInit+0x1120>)
240015be:	4622      	mov	r2, r4
240015c0:	eef0 0a49 	vmov.f32	s1, s18
240015c4:	1958      	adds	r0, r3, r5
240015c6:	eeb0 0a68 	vmov.f32	s0, s17
240015ca:	2102      	movs	r1, #2
240015cc:	f00f f8ea 	bl	240107a4 <tSVF_init>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
240015d0:	4b6c      	ldr	r3, [pc, #432]	; (24001784 <audioInit+0x1124>)
240015d2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015d6:	4621      	mov	r1, r4
240015d8:	1958      	adds	r0, r3, r5
240015da:	eeb0 0a68 	vmov.f32	s0, s17
240015de:	f00f ff4d 	bl	2401147c <tDiodeFilter_init>
			tVZFilter_init(&FXVZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
240015e2:	4b69      	ldr	r3, [pc, #420]	; (24001788 <audioInit+0x1128>)
240015e4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015e8:	4622      	mov	r2, r4
240015ea:	1958      	adds	r0, r3, r5
240015ec:	eeb0 0a68 	vmov.f32	s0, s17
240015f0:	2105      	movs	r1, #5
240015f2:	f00f fc4f 	bl	24010e94 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
240015f6:	4b65      	ldr	r3, [pc, #404]	; (2400178c <audioInit+0x112c>)
240015f8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240015fc:	4622      	mov	r2, r4
240015fe:	1958      	adds	r0, r3, r5
24001600:	eeb0 0a68 	vmov.f32	s0, s17
24001604:	2106      	movs	r1, #6
24001606:	f00f fc45 	bl	24010e94 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
2400160a:	4b61      	ldr	r3, [pc, #388]	; (24001790 <audioInit+0x1130>)
2400160c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001610:	4622      	mov	r2, r4
24001612:	1958      	adds	r0, r3, r5
24001614:	eeb0 0a68 	vmov.f32	s0, s17
24001618:	2107      	movs	r1, #7
2400161a:	f00f fc3b 	bl	24010e94 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
2400161e:	4b5d      	ldr	r3, [pc, #372]	; (24001794 <audioInit+0x1134>)
24001620:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001624:	4622      	mov	r2, r4
24001626:	1958      	adds	r0, r3, r5
24001628:	eeb0 0a68 	vmov.f32	s0, s17
2400162c:	2104      	movs	r1, #4
2400162e:	f00f fc31 	bl	24010e94 <tVZFilter_init>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
24001632:	4b59      	ldr	r3, [pc, #356]	; (24001798 <audioInit+0x1138>)
24001634:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24001638:	4621      	mov	r1, r4
2400163a:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_EFFECT; i++)
2400163c:	3508      	adds	r5, #8
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
2400163e:	eeb0 0a68 	vmov.f32	s0, s17
24001642:	f010 fb43 	bl	24011ccc <tLadderFilter_init>
		for (int i = 0; i < NUM_EFFECT; i++)
24001646:	42ae      	cmp	r6, r5
24001648:	f47f af1d 	bne.w	24001486 <audioInit+0xe26>
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
2400164c:	eddf 8a53 	vldr	s17, [pc, #332]	; 2400179c <audioInit+0x113c>
24001650:	e9dd b606 	ldrd	fp, r6, [sp, #24]
24001654:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
24001658:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
2400165a:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
2400165c:	eef0 0a68 	vmov.f32	s1, s17
24001660:	4621      	mov	r1, r4
24001662:	eeb0 0a48 	vmov.f32	s0, s16
24001666:	f00e ff1f 	bl	240104a8 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
2400166a:	455d      	cmp	r5, fp
2400166c:	d1f4      	bne.n	24001658 <audioInit+0xff8>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
2400166e:	9b04      	ldr	r3, [sp, #16]
24001670:	eb06 0746 	add.w	r7, r6, r6, lsl #1
		}


		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
24001674:	4a4a      	ldr	r2, [pc, #296]	; (240017a0 <audioInit+0x1140>)
24001676:	2501      	movs	r5, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001678:	3304      	adds	r3, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
2400167a:	484a      	ldr	r0, [pc, #296]	; (240017a4 <audioInit+0x1144>)
2400167c:	2102      	movs	r1, #2
2400167e:	9501      	str	r5, [sp, #4]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001680:	9304      	str	r3, [sp, #16]
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
24001682:	4438      	add	r0, r7
24001684:	9b05      	ldr	r3, [sp, #20]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24001686:	f10b 0b04 	add.w	fp, fp, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
2400168a:	eb02 1383 	add.w	r3, r2, r3, lsl #6
2400168e:	2220      	movs	r2, #32
24001690:	9300      	str	r3, [sp, #0]
24001692:	4b45      	ldr	r3, [pc, #276]	; (240017a8 <audioInit+0x1148>)
24001694:	f012 fefc 	bl	24014490 <arm_fir_interpolate_init_f32>
		arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);
24001698:	4a44      	ldr	r2, [pc, #272]	; (240017ac <audioInit+0x114c>)
2400169a:	eb06 1346 	add.w	r3, r6, r6, lsl #5
2400169e:	2120      	movs	r1, #32
240016a0:	19d0      	adds	r0, r2, r7
240016a2:	4a43      	ldr	r2, [pc, #268]	; (240017b0 <audioInit+0x1150>)
240016a4:	4413      	add	r3, r2
240016a6:	2202      	movs	r2, #2
240016a8:	9300      	str	r3, [sp, #0]
240016aa:	9201      	str	r2, [sp, #4]
240016ac:	4b3e      	ldr	r3, [pc, #248]	; (240017a8 <audioInit+0x1148>)
240016ae:	f013 f92b 	bl	24014908 <arm_fir_decimate_init_f32>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
240016b2:	4940      	ldr	r1, [pc, #256]	; (240017b4 <audioInit+0x1154>)
240016b4:	4622      	mov	r2, r4
240016b6:	eddf 0a40 	vldr	s1, [pc, #256]	; 240017b8 <audioInit+0x1158>
240016ba:	1988      	adds	r0, r1, r6
240016bc:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 240017bc <audioInit+0x115c>
240016c0:	4629      	mov	r1, r5
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
240016c2:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
240016c4:	f00f f86e 	bl	240107a4 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
240016c8:	9b05      	ldr	r3, [sp, #20]
240016ca:	b96b      	cbnz	r3, 240016e8 <audioInit+0x1088>
240016cc:	9505      	str	r5, [sp, #20]
240016ce:	e4cd      	b.n	2400106c <audioInit+0xa0c>
		if (boardNumber == 0)
240016d0:	4b3b      	ldr	r3, [pc, #236]	; (240017c0 <audioInit+0x1160>)
240016d2:	781b      	ldrb	r3, [r3, #0]
240016d4:	b303      	cbz	r3, 24001718 <audioInit+0x10b8>
		else if (boardNumber == 1)
240016d6:	2b01      	cmp	r3, #1
240016d8:	d023      	beq.n	24001722 <audioInit+0x10c2>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
240016da:	1e5a      	subs	r2, r3, #1
240016dc:	4939      	ldr	r1, [pc, #228]	; (240017c4 <audioInit+0x1164>)
240016de:	2302      	movs	r3, #2
240016e0:	0052      	lsls	r2, r2, #1
240016e2:	600a      	str	r2, [r1, #0]
			numStringsThisBoard = 2;
240016e4:	f7ff bbf7 	b.w	24000ed6 <audioInit+0x876>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
240016e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
240016ec:	2100      	movs	r1, #0
240016ee:	4836      	ldr	r0, [pc, #216]	; (240017c8 <audioInit+0x1168>)
240016f0:	f013 fb84 	bl	24014dfc <memset>
	}

	audioFrameFunction = audioFrameSynth;
240016f4:	4b35      	ldr	r3, [pc, #212]	; (240017cc <audioInit+0x116c>)
240016f6:	4a36      	ldr	r2, [pc, #216]	; (240017d0 <audioInit+0x1170>)
	HAL_Delay(1);
240016f8:	9805      	ldr	r0, [sp, #20]
	audioFrameFunction = audioFrameSynth;
240016fa:	601a      	str	r2, [r3, #0]

}
240016fc:	b009      	add	sp, #36	; 0x24
240016fe:	ecbd 8b10 	vpop	{d8-d15}
24001702:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
24001706:	f003 b869 	b.w	240047dc <HAL_Delay>
		firstString = boardNumber;
2400170a:	492d      	ldr	r1, [pc, #180]	; (240017c0 <audioInit+0x1160>)
2400170c:	2301      	movs	r3, #1
2400170e:	4a2d      	ldr	r2, [pc, #180]	; (240017c4 <audioInit+0x1164>)
24001710:	7809      	ldrb	r1, [r1, #0]
24001712:	6011      	str	r1, [r2, #0]
		numStringsThisBoard = 1;
24001714:	f7ff bbdf 	b.w	24000ed6 <audioInit+0x876>
			firstString = 0;
24001718:	4a2a      	ldr	r2, [pc, #168]	; (240017c4 <audioInit+0x1164>)
2400171a:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 1;
2400171c:	2301      	movs	r3, #1
2400171e:	f7ff bbda 	b.w	24000ed6 <audioInit+0x876>
			firstString = 1;
24001722:	4a28      	ldr	r2, [pc, #160]	; (240017c4 <audioInit+0x1164>)
24001724:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 1;
24001726:	f7ff bbd6 	b.w	24000ed6 <audioInit+0x876>
2400172a:	bf00      	nop
2400172c:	20005c08 	.word	0x20005c08
24001730:	20000e6c 	.word	0x20000e6c
24001734:	20005c28 	.word	0x20005c28
24001738:	42a00000 	.word	0x42a00000
2400173c:	20000aac 	.word	0x20000aac
24001740:	463b8000 	.word	0x463b8000
24001744:	3ff33333 	.word	0x3ff33333
24001748:	20000acc 	.word	0x20000acc
2400174c:	20005550 	.word	0x20005550
24001750:	c2b40000 	.word	0xc2b40000
24001754:	3727c5ac 	.word	0x3727c5ac
24001758:	30002000 	.word	0x30002000
2400175c:	3000a000 	.word	0x3000a000
24001760:	20005070 	.word	0x20005070
24001764:	200052f0 	.word	0x200052f0
24001768:	20005090 	.word	0x20005090
2400176c:	20005570 	.word	0x20005570
24001770:	3e4ccccd 	.word	0x3e4ccccd
24001774:	3e638e39 	.word	0x3e638e39
24001778:	200008d4 	.word	0x200008d4
2400177c:	200008b4 	.word	0x200008b4
24001780:	20000874 	.word	0x20000874
24001784:	20000894 	.word	0x20000894
24001788:	20000854 	.word	0x20000854
2400178c:	20000834 	.word	0x20000834
24001790:	20000814 	.word	0x20000814
24001794:	200007f4 	.word	0x200007f4
24001798:	200007d4 	.word	0x200007d4
2400179c:	3d4ccccd 	.word	0x3d4ccccd
240017a0:	200051dc 	.word	0x200051dc
240017a4:	200055ec 	.word	0x200055ec
240017a8:	2401b940 	.word	0x2401b940
240017ac:	200055d4 	.word	0x200055d4
240017b0:	20000e8c 	.word	0x20000e8c
240017b4:	2000512c 	.word	0x2000512c
240017b8:	3e99999a 	.word	0x3e99999a
240017bc:	46947000 	.word	0x46947000
240017c0:	20014b05 	.word	0x20014b05
240017c4:	2000513c 	.word	0x2000513c
240017c8:	30000000 	.word	0x30000000
240017cc:	20000a6c 	.word	0x20000a6c
240017d0:	00004c61 	.word	0x00004c61

240017d4 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
240017d4:	b570      	push	{r4, r5, r6, lr}
240017d6:	4605      	mov	r5, r0
	HAL_Delay(1);
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
240017d8:	4e0b      	ldr	r6, [pc, #44]	; (24001808 <audioStart+0x34>)
	HAL_Delay(1);
240017da:	2001      	movs	r0, #1
{
240017dc:	460c      	mov	r4, r1
	HAL_Delay(1);
240017de:	f002 fffd 	bl	240047dc <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
240017e2:	f44f 7280 	mov.w	r2, #256	; 0x100
240017e6:	4631      	mov	r1, r6
240017e8:	4628      	mov	r0, r5
240017ea:	f008 f8dd 	bl	240099a8 <HAL_SAI_Transmit_DMA>
240017ee:	4b07      	ldr	r3, [pc, #28]	; (2400180c <audioStart+0x38>)
240017f0:	4605      	mov	r5, r0
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
240017f2:	f44f 7280 	mov.w	r2, #256	; 0x100
240017f6:	f506 6180 	add.w	r1, r6, #1024	; 0x400
240017fa:	4620      	mov	r0, r4
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
240017fc:	701d      	strb	r5, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
240017fe:	f008 f96f 	bl	24009ae0 <HAL_SAI_Receive_DMA>
24001802:	4b03      	ldr	r3, [pc, #12]	; (24001810 <audioStart+0x3c>)
24001804:	7018      	strb	r0, [r3, #0]
}
24001806:	bd70      	pop	{r4, r5, r6, pc}
24001808:	30000000 	.word	0x30000000
2400180c:	200148dc 	.word	0x200148dc
24001810:	20005b85 	.word	0x20005b85

24001814 <MX_BDMA_Init>:
  */
void MX_BDMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
24001814:	4b10      	ldr	r3, [pc, #64]	; (24001858 <MX_BDMA_Init+0x44>)

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
24001816:	2200      	movs	r2, #0
24001818:	2109      	movs	r1, #9
2400181a:	2081      	movs	r0, #129	; 0x81
{
2400181c:	b510      	push	{r4, lr}
  __HAL_RCC_BDMA_CLK_ENABLE();
2400181e:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
{
24001822:	b082      	sub	sp, #8
  __HAL_RCC_BDMA_CLK_ENABLE();
24001824:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
24001828:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
2400182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24001834:	9301      	str	r3, [sp, #4]
24001836:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
24001838:	f002 fffa 	bl	24004830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
2400183c:	2081      	movs	r0, #129	; 0x81
2400183e:	f003 f835 	bl	240048ac <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 10, 0);
24001842:	2082      	movs	r0, #130	; 0x82
24001844:	2200      	movs	r2, #0
24001846:	210a      	movs	r1, #10
24001848:	f002 fff2 	bl	24004830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
2400184c:	2082      	movs	r0, #130	; 0x82

}
2400184e:	b002      	add	sp, #8
24001850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
24001854:	f003 b82a 	b.w	240048ac <HAL_NVIC_EnableIRQ>
24001858:	58024400 	.word	0x58024400

2400185c <codec_init>:
    CODEC_RATE_44K_44K = 0x08 << 2,
};


void codec_init(I2C_HandleTypeDef* i2c)
{
2400185c:	b570      	push	{r4, r5, r6, lr}

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
    uint8_t byte_2  = data & 0xff;
    uint8_t buff[2] = {byte_1, byte_2};
2400185e:	231e      	movs	r3, #30
{
24001860:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001862:	25fa      	movs	r5, #250	; 0xfa
24001864:	2134      	movs	r1, #52	; 0x34
24001866:	aa03      	add	r2, sp, #12
    uint8_t buff[2] = {byte_1, byte_2};
24001868:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400186c:	9500      	str	r5, [sp, #0]
2400186e:	2302      	movs	r3, #2
{
24001870:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001872:	f004 feed 	bl	24006650 <HAL_I2C_Master_Transmit>
                                              2, 250);

    HAL_Delay(10);
24001876:	200a      	movs	r0, #10
    uint8_t buff[2] = {byte_1, byte_2};
24001878:	260a      	movs	r6, #10
    HAL_Delay(10);
2400187a:	f002 ffaf 	bl	240047dc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400187e:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001882:	2302      	movs	r3, #2
24001884:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001886:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400188a:	4620      	mov	r0, r4
2400188c:	aa03      	add	r2, sp, #12
2400188e:	9500      	str	r5, [sp, #0]
24001890:	f004 fede 	bl	24006650 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001894:	200a      	movs	r0, #10
24001896:	f002 ffa1 	bl	240047dc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400189a:	f241 7202 	movw	r2, #5890	; 0x1702
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400189e:	2302      	movs	r3, #2
240018a0:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240018a2:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018a6:	4620      	mov	r0, r4
240018a8:	aa03      	add	r2, sp, #12
240018aa:	9500      	str	r5, [sp, #0]
240018ac:	f004 fed0 	bl	24006650 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240018b0:	200a      	movs	r0, #10
240018b2:	f002 ff93 	bl	240047dc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240018b6:	2204      	movs	r2, #4
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018b8:	2302      	movs	r3, #2
240018ba:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240018bc:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018c0:	4620      	mov	r0, r4
240018c2:	aa03      	add	r2, sp, #12
240018c4:	9500      	str	r5, [sp, #0]
240018c6:	f004 fec3 	bl	24006650 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240018ca:	200a      	movs	r0, #10
240018cc:	f002 ff86 	bl	240047dc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240018d0:	2206      	movs	r2, #6
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018d2:	2302      	movs	r3, #2
240018d4:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240018d6:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018da:	4620      	mov	r0, r4
240018dc:	aa03      	add	r2, sp, #12
240018de:	9500      	str	r5, [sp, #0]
240018e0:	f004 feb6 	bl	24006650 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240018e4:	200a      	movs	r0, #10
240018e6:	f002 ff79 	bl	240047dc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
240018ea:	f241 2208 	movw	r2, #4616	; 0x1208
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018ee:	2302      	movs	r3, #2
240018f0:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
240018f2:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
240018f6:	4620      	mov	r0, r4
240018f8:	aa03      	add	r2, sp, #12
240018fa:	9500      	str	r5, [sp, #0]
240018fc:	f004 fea8 	bl	24006650 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001900:	4630      	mov	r0, r6
24001902:	f002 ff6b 	bl	240047dc <HAL_Delay>
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001906:	aa03      	add	r2, sp, #12
24001908:	2302      	movs	r3, #2
2400190a:	2134      	movs	r1, #52	; 0x34
2400190c:	4620      	mov	r0, r4
2400190e:	9500      	str	r5, [sp, #0]
    uint8_t buff[2] = {byte_1, byte_2};
24001910:	f8ad 600c 	strh.w	r6, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001914:	f004 fe9c 	bl	24006650 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001918:	4630      	mov	r0, r6
2400191a:	f002 ff5f 	bl	240047dc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400191e:	f246 230c 	movw	r3, #25100	; 0x620c
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001922:	aa03      	add	r2, sp, #12
24001924:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001926:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400192a:	4620      	mov	r0, r4
2400192c:	2302      	movs	r3, #2
2400192e:	9500      	str	r5, [sp, #0]
24001930:	f004 fe8e 	bl	24006650 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001934:	4630      	mov	r0, r6
24001936:	f002 ff51 	bl	240047dc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400193a:	f640 130e 	movw	r3, #2318	; 0x90e
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400193e:	aa03      	add	r2, sp, #12
24001940:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001942:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001946:	4620      	mov	r0, r4
24001948:	2302      	movs	r3, #2
2400194a:	9500      	str	r5, [sp, #0]
2400194c:	f004 fe80 	bl	24006650 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001950:	4630      	mov	r0, r6
24001952:	f002 ff43 	bl	240047dc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001956:	2310      	movs	r3, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001958:	aa03      	add	r2, sp, #12
2400195a:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
2400195c:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001960:	4620      	mov	r0, r4
24001962:	2302      	movs	r3, #2
24001964:	9500      	str	r5, [sp, #0]
24001966:	f004 fe73 	bl	24006650 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
2400196a:	4630      	mov	r0, r6
2400196c:	f002 ff36 	bl	240047dc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24001970:	2312      	movs	r3, #18
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001972:	aa03      	add	r2, sp, #12
24001974:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24001976:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400197a:	4620      	mov	r0, r4
2400197c:	2302      	movs	r3, #2
2400197e:	9500      	str	r5, [sp, #0]
24001980:	f004 fe66 	bl	24006650 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24001984:	4630      	mov	r0, r6
24001986:	f002 ff29 	bl	240047dc <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
2400198a:	f44f 7189 	mov.w	r1, #274	; 0x112
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
2400198e:	aa03      	add	r2, sp, #12
24001990:	2302      	movs	r3, #2
    uint8_t buff[2] = {byte_1, byte_2};
24001992:	f8ad 100c 	strh.w	r1, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24001996:	4620      	mov	r0, r4
24001998:	2134      	movs	r1, #52	; 0x34
2400199a:	9500      	str	r5, [sp, #0]
2400199c:	f004 fe58 	bl	24006650 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
240019a0:	4630      	mov	r0, r6
240019a2:	f002 ff1b 	bl	240047dc <HAL_Delay>
}
240019a6:	b004      	add	sp, #16
240019a8:	bd70      	pop	{r4, r5, r6, pc}
240019aa:	bf00      	nop

240019ac <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
240019ac:	4b24      	ldr	r3, [pc, #144]	; (24001a40 <MX_DMA_Init+0x94>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
240019ae:	2200      	movs	r2, #0
240019b0:	2102      	movs	r1, #2
240019b2:	200b      	movs	r0, #11
{
240019b4:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
240019b6:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
240019ba:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
240019bc:	f044 0401 	orr.w	r4, r4, #1
240019c0:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
240019c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
240019c8:	f003 0301 	and.w	r3, r3, #1
240019cc:	9301      	str	r3, [sp, #4]
240019ce:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
240019d0:	f002 ff2e 	bl	24004830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
240019d4:	200b      	movs	r0, #11
240019d6:	f002 ff69 	bl	240048ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
240019da:	2200      	movs	r2, #0
240019dc:	2105      	movs	r1, #5
240019de:	200c      	movs	r0, #12
240019e0:	f002 ff26 	bl	24004830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
240019e4:	200c      	movs	r0, #12
240019e6:	f002 ff61 	bl	240048ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
240019ea:	2200      	movs	r2, #0
240019ec:	2106      	movs	r1, #6
240019ee:	200d      	movs	r0, #13
240019f0:	f002 ff1e 	bl	24004830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
240019f4:	200d      	movs	r0, #13
240019f6:	f002 ff59 	bl	240048ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
240019fa:	2200      	movs	r2, #0
240019fc:	2104      	movs	r1, #4
240019fe:	200e      	movs	r0, #14
24001a00:	f002 ff16 	bl	24004830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
24001a04:	200e      	movs	r0, #14
24001a06:	f002 ff51 	bl	240048ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
24001a0a:	2200      	movs	r2, #0
24001a0c:	2103      	movs	r1, #3
24001a0e:	200f      	movs	r0, #15
24001a10:	f002 ff0e 	bl	24004830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
24001a14:	200f      	movs	r0, #15
24001a16:	f002 ff49 	bl	240048ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
24001a1a:	2200      	movs	r2, #0
24001a1c:	2101      	movs	r1, #1
24001a1e:	2011      	movs	r0, #17
24001a20:	f002 ff06 	bl	24004830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
24001a24:	2011      	movs	r0, #17
24001a26:	f002 ff41 	bl	240048ac <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 8, 0);
24001a2a:	2066      	movs	r0, #102	; 0x66
24001a2c:	2200      	movs	r2, #0
24001a2e:	2108      	movs	r1, #8
24001a30:	f002 fefe 	bl	24004830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24001a34:	2066      	movs	r0, #102	; 0x66

}
24001a36:	b002      	add	sp, #8
24001a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24001a3c:	f002 bf36 	b.w	240048ac <HAL_NVIC_EnableIRQ>
24001a40:	58024400 	.word	0x58024400

24001a44 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
24001a44:	b530      	push	{r4, r5, lr}

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24001a46:	4818      	ldr	r0, [pc, #96]	; (24001aa8 <MX_FMC_Init+0x64>)
{
24001a48:	b089      	sub	sp, #36	; 0x24
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24001a4a:	2308      	movs	r3, #8
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
24001a4c:	2202      	movs	r2, #2
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
24001a4e:	2100      	movs	r1, #0
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24001a50:	4d16      	ldr	r5, [pc, #88]	; (24001aac <MX_FMC_Init+0x68>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24001a52:	60c3      	str	r3, [r0, #12]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
24001a54:	f44f 6400 	mov.w	r4, #2048	; 0x800
  SdramTiming.LoadToActiveDelay = 2;
24001a58:	9200      	str	r2, [sp, #0]
  SdramTiming.ExitSelfRefreshDelay = 8;
  SdramTiming.SelfRefreshTime = 5;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
24001a5a:	9206      	str	r2, [sp, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24001a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 8;
24001a60:	9301      	str	r3, [sp, #4]
  SdramTiming.SelfRefreshTime = 5;
24001a62:	2305      	movs	r3, #5
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24001a64:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
24001a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  SdramTiming.SelfRefreshTime = 5;
24001a6a:	9302      	str	r3, [sp, #8]
  SdramTiming.RowCycleDelay = 6;
24001a6c:	2306      	movs	r3, #6
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
24001a6e:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.WriteRecoveryTime = 3;
24001a70:	2203      	movs	r2, #3
  SdramTiming.RowCycleDelay = 6;
24001a72:	9303      	str	r3, [sp, #12]
  SdramTiming.WriteRecoveryTime = 3;
24001a74:	2302      	movs	r3, #2
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
24001a76:	6041      	str	r1, [r0, #4]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
24001a78:	61c1      	str	r1, [r0, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24001a7a:	4669      	mov	r1, sp
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24001a7c:	6005      	str	r5, [r0, #0]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
24001a7e:	6204      	str	r4, [r0, #32]
  SdramTiming.WriteRecoveryTime = 3;
24001a80:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24001a84:	2201      	movs	r2, #1
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24001a86:	2320      	movs	r3, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24001a88:	6082      	str	r2, [r0, #8]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
24001a8a:	2240      	movs	r2, #64	; 0x40
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24001a8c:	6103      	str	r3, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
24001a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
24001a92:	e9c0 2305 	strd	r2, r3, [r0, #20]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24001a96:	f008 ffd7 	bl	2400aa48 <HAL_SDRAM_Init>
24001a9a:	b908      	cbnz	r0, 24001aa0 <MX_FMC_Init+0x5c>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
24001a9c:	b009      	add	sp, #36	; 0x24
24001a9e:	bd30      	pop	{r4, r5, pc}
    Error_Handler( );
24001aa0:	f002 f986 	bl	24003db0 <Error_Handler>
}
24001aa4:	b009      	add	sp, #36	; 0x24
24001aa6:	bd30      	pop	{r4, r5, pc}
24001aa8:	20014938 	.word	0x20014938
24001aac:	52004140 	.word	0x52004140

24001ab0 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
24001ab0:	4b2e      	ldr	r3, [pc, #184]	; (24001b6c <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001ab2:	2200      	movs	r2, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
24001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
24001ab6:	b089      	sub	sp, #36	; 0x24
  if (FMC_Initialized) {
24001ab8:	681c      	ldr	r4, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001aba:	9204      	str	r2, [sp, #16]
  if (FMC_Initialized) {
24001abc:	2c00      	cmp	r4, #0
24001abe:	d153      	bne.n	24001b68 <HAL_SDRAM_MspInit+0xb8>
  __HAL_RCC_FMC_CLK_ENABLE();
24001ac0:	4a2b      	ldr	r2, [pc, #172]	; (24001b70 <HAL_SDRAM_MspInit+0xc0>)
  FMC_Initialized = 1;
24001ac2:	2101      	movs	r1, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001ac4:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001ac6:	250c      	movs	r5, #12
  FMC_Initialized = 1;
24001ac8:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24001aca:	2702      	movs	r7, #2
  __HAL_RCC_FMC_CLK_ENABLE();
24001acc:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24001ad0:	4828      	ldr	r0, [pc, #160]	; (24001b74 <HAL_SDRAM_MspInit+0xc4>)
  __HAL_RCC_FMC_CLK_ENABLE();
24001ad2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24001ad6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
24001ada:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24001ade:	f64f 7283 	movw	r2, #65411	; 0xff83
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001ae2:	9605      	str	r6, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
24001ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001ae8:	9506      	str	r5, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
24001aea:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24001aec:	2302      	movs	r3, #2
  __HAL_RCC_FMC_CLK_ENABLE();
24001aee:	9901      	ldr	r1, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24001af0:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24001af2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24001af6:	f004 fb2d 	bl	24006154 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24001afa:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001afe:	a902      	add	r1, sp, #8
24001b00:	481d      	ldr	r0, [pc, #116]	; (24001b78 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24001b02:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001b04:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24001b06:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001b08:	e9cd 4604 	strd	r4, r6, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001b0c:	f004 fb22 	bl	24006154 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24001b10:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001b14:	a902      	add	r1, sp, #8
24001b16:	4819      	ldr	r0, [pc, #100]	; (24001b7c <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24001b18:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001b1a:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001b1e:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001b22:	f004 fb17 	bl	24006154 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24001b26:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001b2a:	a902      	add	r1, sp, #8
24001b2c:	4814      	ldr	r0, [pc, #80]	; (24001b80 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24001b2e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001b30:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001b34:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001b38:	f004 fb0c 	bl	24006154 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24001b3c:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001b40:	a902      	add	r1, sp, #8
24001b42:	4810      	ldr	r0, [pc, #64]	; (24001b84 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24001b44:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001b46:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001b4a:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001b4e:	f004 fb01 	bl	24006154 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24001b52:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001b56:	a902      	add	r1, sp, #8
24001b58:	480b      	ldr	r0, [pc, #44]	; (24001b88 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24001b5a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24001b5c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24001b5e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24001b60:	e9cd 4604 	strd	r4, r6, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001b64:	f004 faf6 	bl	24006154 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
24001b68:	b009      	add	sp, #36	; 0x24
24001b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
24001b6c:	20014934 	.word	0x20014934
24001b70:	58024400 	.word	0x58024400
24001b74:	58021000 	.word	0x58021000
24001b78:	58021800 	.word	0x58021800
24001b7c:	58020c00 	.word	0x58020c00
24001b80:	58022000 	.word	0x58022000
24001b84:	58021c00 	.word	0x58021c00
24001b88:	58021400 	.word	0x58021400

24001b8c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
24001b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24001b90:	4bad      	ldr	r3, [pc, #692]	; (24001e48 <MX_GPIO_Init+0x2bc>)
{
24001b92:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001b94:	2400      	movs	r4, #0
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001b96:	4ead      	ldr	r6, [pc, #692]	; (24001e4c <MX_GPIO_Init+0x2c0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24001b98:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 24001e60 <MX_GPIO_Init+0x2d4>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001b9c:	2182      	movs	r1, #130	; 0x82
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001b9e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001ba0:	4630      	mov	r0, r6

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24001ba2:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 24001e64 <MX_GPIO_Init+0x2d8>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB7 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24001ba6:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
24001ba8:	4fa9      	ldr	r7, [pc, #676]	; (24001e50 <MX_GPIO_Init+0x2c4>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24001baa:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 24001e68 <MX_GPIO_Init+0x2dc>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001bae:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
24001bb2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
24001bb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bba:	f042 0210 	orr.w	r2, r2, #16
24001bbe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001bc2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bc6:	f002 0210 	and.w	r2, r2, #16
24001bca:	9201      	str	r2, [sp, #4]
24001bcc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24001bce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bd2:	f042 0202 	orr.w	r2, r2, #2
24001bd6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001bda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bde:	f002 0202 	and.w	r2, r2, #2
24001be2:	9202      	str	r2, [sp, #8]
24001be4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
24001be6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24001bee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001bf2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001bf6:	f002 0240 	and.w	r2, r2, #64	; 0x40
24001bfa:	9203      	str	r2, [sp, #12]
24001bfc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24001bfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001c02:	f042 0208 	orr.w	r2, r2, #8
24001c06:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001c0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001c0e:	f002 0208 	and.w	r2, r2, #8
24001c12:	9204      	str	r2, [sp, #16]
24001c14:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24001c16:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001c1a:	f042 0204 	orr.w	r2, r2, #4
24001c1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001c22:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001c26:	f002 0204 	and.w	r2, r2, #4
24001c2a:	9205      	str	r2, [sp, #20]
24001c2c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24001c2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001c32:	f042 0201 	orr.w	r2, r2, #1
24001c36:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001c3a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001c3e:	f002 0201 	and.w	r2, r2, #1
24001c42:	9206      	str	r2, [sp, #24]
24001c44:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
24001c46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24001c4e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001c52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001c56:	f402 7280 	and.w	r2, r2, #256	; 0x100
24001c5a:	9207      	str	r2, [sp, #28]
24001c5c:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
24001c5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001c62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
24001c66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24001c6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001c6e:	f002 0280 	and.w	r2, r2, #128	; 0x80
24001c72:	9208      	str	r2, [sp, #32]
24001c74:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
24001c76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001c7a:	f042 0220 	orr.w	r2, r2, #32
24001c7e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001c82:	4622      	mov	r2, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
24001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24001c88:	f003 0320 	and.w	r3, r3, #32
24001c8c:	9309      	str	r3, [sp, #36]	; 0x24
24001c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001c90:	f004 fbb0 	bl	240063f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24001c94:	4622      	mov	r2, r4
24001c96:	4640      	mov	r0, r8
24001c98:	f44f 7100 	mov.w	r1, #512	; 0x200
24001c9c:	f004 fbaa 	bl	240063f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24001ca0:	4622      	mov	r2, r4
24001ca2:	4650      	mov	r0, sl
24001ca4:	2193      	movs	r1, #147	; 0x93
24001ca6:	f004 fba5 	bl	240063f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
24001caa:	4622      	mov	r2, r4
24001cac:	4638      	mov	r0, r7
24001cae:	2109      	movs	r1, #9
24001cb0:	f004 fba0 	bl	240063f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24001cb4:	4622      	mov	r2, r4
24001cb6:	4648      	mov	r0, r9
24001cb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
24001cbc:	f004 fb9a 	bl	240063f4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001cc0:	f247 02c0 	movw	r2, #28864	; 0x70c0
24001cc4:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001cc6:	a90a      	add	r1, sp, #40	; 0x28
24001cc8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001cca:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001ccc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001cd0:	f004 fa40 	bl	24006154 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24001cd4:	f243 02f8 	movw	r2, #12536	; 0x30f8
24001cd8:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001cda:	a90a      	add	r1, sp, #40	; 0x28
24001cdc:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001cde:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24001ce0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001ce4:	f004 fa36 	bl	24006154 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24001ce8:	f44f 421f 	mov.w	r2, #40704	; 0x9f00
24001cec:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001cee:	a90a      	add	r1, sp, #40	; 0x28
24001cf0:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001cf2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24001cf4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001cf8:	f004 fa2c 	bl	24006154 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
24001cfc:	2382      	movs	r3, #130	; 0x82
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001cfe:	a90a      	add	r1, sp, #40	; 0x28
24001d00:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
24001d02:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001d04:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d06:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001d0a:	f004 fa23 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
24001d0e:	2240      	movs	r2, #64	; 0x40
24001d10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001d14:	a90a      	add	r1, sp, #40	; 0x28
24001d16:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001d18:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6;
24001d1a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001d1e:	f004 fa19 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
24001d22:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001d26:	a90a      	add	r1, sp, #40	; 0x28
24001d28:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_9;
24001d2a:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001d2c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d2e:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001d32:	f004 fa0f 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
24001d36:	f24e 026c 	movw	r2, #57452	; 0xe06c
24001d3a:	2303      	movs	r3, #3
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001d3c:	a90a      	add	r1, sp, #40	; 0x28
24001d3e:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d40:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
24001d42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001d46:	f004 fa05 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
24001d4a:	f44f 6210 	mov.w	r2, #2304	; 0x900
24001d4e:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001d50:	a90a      	add	r1, sp, #40	; 0x28
24001d52:	4840      	ldr	r0, [pc, #256]	; (24001e54 <MX_GPIO_Init+0x2c8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d54:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
24001d56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24001d5a:	f004 f9fb 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
24001d5e:	2393      	movs	r3, #147	; 0x93
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001d60:	4650      	mov	r0, sl
24001d62:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
24001d64:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001d66:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d68:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001d6c:	f004 f9f2 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24001d70:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
24001d74:	2303      	movs	r3, #3
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001d76:	a90a      	add	r1, sp, #40	; 0x28
24001d78:	4837      	ldr	r0, [pc, #220]	; (24001e58 <MX_GPIO_Init+0x2cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d7a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24001d7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001d80:	f004 f9e8 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24001d84:	2208      	movs	r2, #8
24001d86:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001d8a:	4640      	mov	r0, r8
24001d8c:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001d8e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24001d90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001d94:	f004 f9de 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
24001d98:	f242 4205 	movw	r2, #9221	; 0x2405
24001d9c:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001d9e:	a90a      	add	r1, sp, #40	; 0x28
24001da0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001da2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
24001da4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001da8:	f004 f9d4 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24001dac:	22c0      	movs	r2, #192	; 0xc0
24001dae:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001db0:	a90a      	add	r1, sp, #40	; 0x28
24001db2:	482a      	ldr	r0, [pc, #168]	; (24001e5c <MX_GPIO_Init+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001db4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24001db6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001dba:	f004 f9cb 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24001dbe:	2202      	movs	r2, #2
24001dc0:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001dc2:	a90a      	add	r1, sp, #40	; 0x28
24001dc4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001dc6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24001dc8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001dcc:	f004 f9c2 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
24001dd0:	2309      	movs	r3, #9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001dd2:	a90a      	add	r1, sp, #40	; 0x28
24001dd4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
24001dd6:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001dd8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001dda:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001dde:	f004 f9b9 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
24001de2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001de6:	4648      	mov	r0, r9
24001de8:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11;
24001dea:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001dec:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001dee:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001df2:	f004 f9af 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24001df6:	2204      	movs	r2, #4
24001df8:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001dfa:	4638      	mov	r0, r7
24001dfc:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001dfe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24001e00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001e04:	f004 f9a6 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24001e08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001e0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001e10:	a90a      	add	r1, sp, #40	; 0x28
24001e12:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001e14:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_12;
24001e16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001e1a:	f004 f99b 	bl	24006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24001e1e:	2300      	movs	r3, #0
24001e20:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001e24:	4630      	mov	r0, r6
24001e26:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001e28:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
24001e2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001e2e:	f004 f991 	bl	24006154 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
24001e32:	4622      	mov	r2, r4
24001e34:	4621      	mov	r1, r4
24001e36:	2017      	movs	r0, #23
24001e38:	f002 fcfa 	bl	24004830 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
24001e3c:	2017      	movs	r0, #23
24001e3e:	f002 fd35 	bl	240048ac <HAL_NVIC_EnableIRQ>

}
24001e42:	b010      	add	sp, #64	; 0x40
24001e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24001e48:	58024400 	.word	0x58024400
24001e4c:	58020400 	.word	0x58020400
24001e50:	58020000 	.word	0x58020000
24001e54:	58022000 	.word	0x58022000
24001e58:	58021400 	.word	0x58021400
24001e5c:	58021c00 	.word	0x58021c00
24001e60:	58021800 	.word	0x58021800
24001e64:	58020800 	.word	0x58020800
24001e68:	58020c00 	.word	0x58020c00

24001e6c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
24001e6c:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
24001e6e:	481c      	ldr	r0, [pc, #112]	; (24001ee0 <MX_I2C1_Init+0x74>)
  hi2c1.Init.Timing = 0x0050174F;
  hi2c1.Init.OwnAddress1 = 68;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24001e70:	2300      	movs	r3, #0
  hi2c1.Init.Timing = 0x0050174F;
24001e72:	4a1c      	ldr	r2, [pc, #112]	; (24001ee4 <MX_I2C1_Init+0x78>)
  hi2c1.Init.OwnAddress1 = 68;
24001e74:	2144      	movs	r1, #68	; 0x44
  hi2c1.Instance = I2C1;
24001e76:	4c1c      	ldr	r4, [pc, #112]	; (24001ee8 <MX_I2C1_Init+0x7c>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24001e78:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 68;
24001e7a:	6081      	str	r1, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
24001e7c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24001e7e:	6203      	str	r3, [r0, #32]
  hi2c1.Init.Timing = 0x0050174F;
24001e80:	e9c0 4200 	strd	r4, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001e84:	2201      	movs	r2, #1
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24001e86:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001e8a:	60c2      	str	r2, [r0, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
24001e8c:	f004 fb82 	bl	24006594 <HAL_I2C_Init>
24001e90:	b970      	cbnz	r0, 24001eb0 <MX_I2C1_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001e92:	2100      	movs	r1, #0
24001e94:	4812      	ldr	r0, [pc, #72]	; (24001ee0 <MX_I2C1_Init+0x74>)
24001e96:	f005 f923 	bl	240070e0 <HAL_I2CEx_ConfigAnalogFilter>
24001e9a:	b988      	cbnz	r0, 24001ec0 <MX_I2C1_Init+0x54>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24001e9c:	2100      	movs	r1, #0
24001e9e:	4810      	ldr	r0, [pc, #64]	; (24001ee0 <MX_I2C1_Init+0x74>)
24001ea0:	f005 f952 	bl	24007148 <HAL_I2CEx_ConfigDigitalFilter>
24001ea4:	b9a0      	cbnz	r0, 24001ed0 <MX_I2C1_Init+0x64>
    Error_Handler();
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
24001ea6:	2001      	movs	r0, #1
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
24001ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
24001eac:	f005 b978 	b.w	240071a0 <HAL_I2CEx_EnableFastModePlus>
    Error_Handler();
24001eb0:	f001 ff7e 	bl	24003db0 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001eb4:	2100      	movs	r1, #0
24001eb6:	480a      	ldr	r0, [pc, #40]	; (24001ee0 <MX_I2C1_Init+0x74>)
24001eb8:	f005 f912 	bl	240070e0 <HAL_I2CEx_ConfigAnalogFilter>
24001ebc:	2800      	cmp	r0, #0
24001ebe:	d0ed      	beq.n	24001e9c <MX_I2C1_Init+0x30>
    Error_Handler();
24001ec0:	f001 ff76 	bl	24003db0 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24001ec4:	2100      	movs	r1, #0
24001ec6:	4806      	ldr	r0, [pc, #24]	; (24001ee0 <MX_I2C1_Init+0x74>)
24001ec8:	f005 f93e 	bl	24007148 <HAL_I2CEx_ConfigDigitalFilter>
24001ecc:	2800      	cmp	r0, #0
24001ece:	d0ea      	beq.n	24001ea6 <MX_I2C1_Init+0x3a>
    Error_Handler();
24001ed0:	f001 ff6e 	bl	24003db0 <Error_Handler>
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
24001ed4:	2001      	movs	r0, #1
}
24001ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
24001eda:	f005 b961 	b.w	240071a0 <HAL_I2CEx_EnableFastModePlus>
24001ede:	bf00      	nop
24001ee0:	20014a5c 	.word	0x20014a5c
24001ee4:	0050174f 	.word	0x0050174f
24001ee8:	40005400 	.word	0x40005400

24001eec <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
24001eec:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
24001eee:	4817      	ldr	r0, [pc, #92]	; (24001f4c <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001ef0:	2300      	movs	r3, #0
24001ef2:	4917      	ldr	r1, [pc, #92]	; (24001f50 <MX_I2C2_Init+0x64>)
24001ef4:	2401      	movs	r4, #1
24001ef6:	4a17      	ldr	r2, [pc, #92]	; (24001f54 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24001ef8:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001efa:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
24001efe:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24001f02:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
24001f06:	f004 fb45 	bl	24006594 <HAL_I2C_Init>
24001f0a:	b950      	cbnz	r0, 24001f22 <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001f0c:	2100      	movs	r1, #0
24001f0e:	480f      	ldr	r0, [pc, #60]	; (24001f4c <MX_I2C2_Init+0x60>)
24001f10:	f005 f8e6 	bl	240070e0 <HAL_I2CEx_ConfigAnalogFilter>
24001f14:	b968      	cbnz	r0, 24001f32 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24001f16:	2100      	movs	r1, #0
24001f18:	480c      	ldr	r0, [pc, #48]	; (24001f4c <MX_I2C2_Init+0x60>)
24001f1a:	f005 f915 	bl	24007148 <HAL_I2CEx_ConfigDigitalFilter>
24001f1e:	b980      	cbnz	r0, 24001f42 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
24001f20:	bd10      	pop	{r4, pc}
    Error_Handler();
24001f22:	f001 ff45 	bl	24003db0 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001f26:	2100      	movs	r1, #0
24001f28:	4808      	ldr	r0, [pc, #32]	; (24001f4c <MX_I2C2_Init+0x60>)
24001f2a:	f005 f8d9 	bl	240070e0 <HAL_I2CEx_ConfigAnalogFilter>
24001f2e:	2800      	cmp	r0, #0
24001f30:	d0f1      	beq.n	24001f16 <MX_I2C2_Init+0x2a>
    Error_Handler();
24001f32:	f001 ff3d 	bl	24003db0 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
24001f36:	2100      	movs	r1, #0
24001f38:	4804      	ldr	r0, [pc, #16]	; (24001f4c <MX_I2C2_Init+0x60>)
24001f3a:	f005 f905 	bl	24007148 <HAL_I2CEx_ConfigDigitalFilter>
24001f3e:	2800      	cmp	r0, #0
24001f40:	d0ee      	beq.n	24001f20 <MX_I2C2_Init+0x34>
}
24001f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24001f46:	f001 bf33 	b.w	24003db0 <Error_Handler>
24001f4a:	bf00      	nop
24001f4c:	20014ab0 	.word	0x20014ab0
24001f50:	40005800 	.word	0x40005800
24001f54:	00b03fdb 	.word	0x00b03fdb

24001f58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
24001f58:	b5f0      	push	{r4, r5, r6, r7, lr}
24001f5a:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001f5c:	2100      	movs	r1, #0
{
24001f5e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001f60:	22c0      	movs	r2, #192	; 0xc0
24001f62:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24001f64:	910a      	str	r1, [sp, #40]	; 0x28
24001f66:	e9cd 1106 	strd	r1, r1, [sp, #24]
24001f6a:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001f6e:	f012 ff45 	bl	24014dfc <memset>
  if(i2cHandle->Instance==I2C1)
24001f72:	6823      	ldr	r3, [r4, #0]
24001f74:	4a79      	ldr	r2, [pc, #484]	; (2400215c <HAL_I2C_MspInit+0x204>)
24001f76:	4293      	cmp	r3, r2
24001f78:	d005      	beq.n	24001f86 <HAL_I2C_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
24001f7a:	4a79      	ldr	r2, [pc, #484]	; (24002160 <HAL_I2C_MspInit+0x208>)
24001f7c:	4293      	cmp	r3, r2
24001f7e:	f000 8087 	beq.w	24002090 <HAL_I2C_MspInit+0x138>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
24001f82:	b03d      	add	sp, #244	; 0xf4
24001f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24001f86:	2208      	movs	r2, #8
24001f88:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001f8a:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24001f8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001f90:	f006 f80c 	bl	24007fac <HAL_RCCEx_PeriphCLKConfig>
24001f94:	2800      	cmp	r0, #0
24001f96:	f040 80db 	bne.w	24002150 <HAL_I2C_MspInit+0x1f8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001f9a:	4d72      	ldr	r5, [pc, #456]	; (24002164 <HAL_I2C_MspInit+0x20c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001f9c:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24001fa0:	2704      	movs	r7, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001fa2:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001fa4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001fa8:	4e6f      	ldr	r6, [pc, #444]	; (24002168 <HAL_I2C_MspInit+0x210>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001faa:	f043 0302 	orr.w	r3, r3, #2
24001fae:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
24001fb2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24001fb6:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001fb8:	f003 0302 	and.w	r3, r3, #2
24001fbc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001fbe:	2312      	movs	r3, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001fc0:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001fc2:	486a      	ldr	r0, [pc, #424]	; (2400216c <HAL_I2C_MspInit+0x214>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001fc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
24001fc8:	2200      	movs	r2, #0
24001fca:	2302      	movs	r3, #2
24001fcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001fd0:	f004 f8c0 	bl	24006154 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
24001fd4:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001fd8:	2201      	movs	r2, #1
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24001fda:	6277      	str	r7, [r6, #36]	; 0x24
    __HAL_RCC_I2C1_CLK_ENABLE();
24001fdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
24001fe0:	4630      	mov	r0, r6
    __HAL_RCC_I2C1_CLK_ENABLE();
24001fe2:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
24001fe6:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24001fea:	62b2      	str	r2, [r6, #40]	; 0x28
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001fec:	4a60      	ldr	r2, [pc, #384]	; (24002170 <HAL_I2C_MspInit+0x218>)
    __HAL_RCC_I2C1_CLK_ENABLE();
24001fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001ff2:	6032      	str	r2, [r6, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
24001ff4:	2221      	movs	r2, #33	; 0x21
    __HAL_RCC_I2C1_CLK_ENABLE();
24001ff6:	9302      	str	r3, [sp, #8]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
24001ff8:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
24001ffa:	6072      	str	r2, [r6, #4]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
24001ffc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_I2C1_CLK_ENABLE();
24002000:	9902      	ldr	r1, [sp, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
24002002:	6132      	str	r2, [r6, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24002004:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
24002008:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
2400200c:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24002010:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24002014:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24002018:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
2400201c:	f002 fd9a 	bl	24004b54 <HAL_DMA_Init>
24002020:	2800      	cmp	r0, #0
24002022:	f040 8092 	bne.w	2400214a <HAL_I2C_MspInit+0x1f2>
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24002026:	4d53      	ldr	r5, [pc, #332]	; (24002174 <HAL_I2C_MspInit+0x21c>)
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
24002028:	2222      	movs	r2, #34	; 0x22
    hdma_i2c1_tx.Instance = DMA1_Stream4;
2400202a:	4953      	ldr	r1, [pc, #332]	; (24002178 <HAL_I2C_MspInit+0x220>)
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
2400202c:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
2400202e:	606a      	str	r2, [r5, #4]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
24002030:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Instance = DMA1_Stream4;
24002034:	6029      	str	r1, [r5, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24002036:	2140      	movs	r1, #64	; 0x40
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
24002038:	612a      	str	r2, [r5, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400203a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
2400203e:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
24002040:	4628      	mov	r0, r5
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24002042:	616b      	str	r3, [r5, #20]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24002044:	60a9      	str	r1, [r5, #8]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
24002046:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
2400204a:	61ab      	str	r3, [r5, #24]
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
2400204c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
2400204e:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24002050:	2301      	movs	r3, #1
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24002052:	622a      	str	r2, [r5, #32]
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24002054:	2204      	movs	r2, #4
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
24002056:	63e6      	str	r6, [r4, #60]	; 0x3c
24002058:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
2400205a:	61e9      	str	r1, [r5, #28]
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400205c:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
24002060:	f002 fd78 	bl	24004b54 <HAL_DMA_Init>
24002064:	2800      	cmp	r0, #0
24002066:	d16d      	bne.n	24002144 <HAL_I2C_MspInit+0x1ec>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24002068:	2200      	movs	r2, #0
2400206a:	2101      	movs	r1, #1
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
2400206c:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
2400206e:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
24002070:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24002072:	f002 fbdd 	bl	24004830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
24002076:	201f      	movs	r0, #31
24002078:	f002 fc18 	bl	240048ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
2400207c:	2200      	movs	r2, #0
2400207e:	2101      	movs	r1, #1
24002080:	2020      	movs	r0, #32
24002082:	f002 fbd5 	bl	24004830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
24002086:	2020      	movs	r0, #32
24002088:	f002 fc10 	bl	240048ac <HAL_NVIC_EnableIRQ>
}
2400208c:	b03d      	add	sp, #244	; 0xf4
2400208e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
24002090:	2208      	movs	r2, #8
24002092:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24002094:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
24002096:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400209a:	f005 ff87 	bl	24007fac <HAL_RCCEx_PeriphCLKConfig>
2400209e:	2800      	cmp	r0, #0
240020a0:	d159      	bne.n	24002156 <HAL_I2C_MspInit+0x1fe>
    __HAL_RCC_GPIOH_CLK_ENABLE();
240020a2:	4c30      	ldr	r4, [pc, #192]	; (24002164 <HAL_I2C_MspInit+0x20c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240020a4:	2010      	movs	r0, #16
240020a6:	2112      	movs	r1, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
240020a8:	2504      	movs	r5, #4
    __HAL_RCC_GPIOH_CLK_ENABLE();
240020aa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240020ae:	2600      	movs	r6, #0
240020b0:	2703      	movs	r7, #3
    __HAL_RCC_GPIOH_CLK_ENABLE();
240020b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240020b6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
240020ba:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
240020be:	f003 0380 	and.w	r3, r3, #128	; 0x80
240020c2:	9303      	str	r3, [sp, #12]
240020c4:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
240020c6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
240020ca:	f043 0302 	orr.w	r3, r3, #2
240020ce:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
240020d2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
240020d6:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
240020d8:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240020dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
240020e0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240020e2:	a906      	add	r1, sp, #24
240020e4:	4825      	ldr	r0, [pc, #148]	; (2400217c <HAL_I2C_MspInit+0x224>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
240020e6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
240020e8:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
240020ec:	f004 f832 	bl	24006154 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
240020f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
240020f4:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240020f6:	a906      	add	r1, sp, #24
240020f8:	481c      	ldr	r0, [pc, #112]	; (2400216c <HAL_I2C_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
240020fa:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11;
240020fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
24002100:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24002104:	f004 f826 	bl	24006154 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
24002108:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
2400210c:	2200      	movs	r2, #0
2400210e:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
24002110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
24002114:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
24002116:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
2400211a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
2400211e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24002122:	9305      	str	r3, [sp, #20]
24002124:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
24002126:	f002 fb83 	bl	24004830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
2400212a:	2021      	movs	r0, #33	; 0x21
2400212c:	f002 fbbe 	bl	240048ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
24002130:	2200      	movs	r2, #0
24002132:	2101      	movs	r1, #1
24002134:	2022      	movs	r0, #34	; 0x22
24002136:	f002 fb7b 	bl	24004830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
2400213a:	2022      	movs	r0, #34	; 0x22
2400213c:	f002 fbb6 	bl	240048ac <HAL_NVIC_EnableIRQ>
}
24002140:	b03d      	add	sp, #244	; 0xf4
24002142:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
24002144:	f001 fe34 	bl	24003db0 <Error_Handler>
24002148:	e78e      	b.n	24002068 <HAL_I2C_MspInit+0x110>
      Error_Handler();
2400214a:	f001 fe31 	bl	24003db0 <Error_Handler>
2400214e:	e76a      	b.n	24002026 <HAL_I2C_MspInit+0xce>
      Error_Handler();
24002150:	f001 fe2e 	bl	24003db0 <Error_Handler>
24002154:	e721      	b.n	24001f9a <HAL_I2C_MspInit+0x42>
      Error_Handler();
24002156:	f001 fe2b 	bl	24003db0 <Error_Handler>
2400215a:	e7a2      	b.n	240020a2 <HAL_I2C_MspInit+0x14a>
2400215c:	40005400 	.word	0x40005400
24002160:	40005800 	.word	0x40005800
24002164:	58024400 	.word	0x58024400
24002168:	2001496c 	.word	0x2001496c
2400216c:	58020400 	.word	0x58020400
24002170:	40020058 	.word	0x40020058
24002174:	200149e4 	.word	0x200149e4
24002178:	40020070 	.word	0x40020070
2400217c:	58021c00 	.word	0x58021c00

24002180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
24002180:	b530      	push	{r4, r5, lr}
24002182:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
24002184:	224c      	movs	r2, #76	; 0x4c
24002186:	2100      	movs	r1, #0
24002188:	a80c      	add	r0, sp, #48	; 0x30
2400218a:	f012 fe37 	bl	24014dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2400218e:	2220      	movs	r2, #32
24002190:	2100      	movs	r1, #0
24002192:	a804      	add	r0, sp, #16
24002194:	f012 fe32 	bl	24014dfc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24002198:	2002      	movs	r0, #2
2400219a:	f005 f819 	bl	240071d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2400219e:	4b35      	ldr	r3, [pc, #212]	; (24002274 <SystemClock_Config+0xf4>)
240021a0:	2100      	movs	r1, #0
240021a2:	4a35      	ldr	r2, [pc, #212]	; (24002278 <SystemClock_Config+0xf8>)
240021a4:	9101      	str	r1, [sp, #4]
240021a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
240021a8:	f021 0101 	bic.w	r1, r1, #1
240021ac:	62d9      	str	r1, [r3, #44]	; 0x2c
240021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240021b0:	f003 0301 	and.w	r3, r3, #1
240021b4:	9301      	str	r3, [sp, #4]
240021b6:	6993      	ldr	r3, [r2, #24]
240021b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
240021bc:	6193      	str	r3, [r2, #24]
240021be:	6993      	ldr	r3, [r2, #24]
240021c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
240021c4:	9301      	str	r3, [sp, #4]
240021c6:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240021c8:	6993      	ldr	r3, [r2, #24]
240021ca:	0499      	lsls	r1, r3, #18
240021cc:	d5fc      	bpl.n	240021c8 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
240021ce:	4b2b      	ldr	r3, [pc, #172]	; (2400227c <SystemClock_Config+0xfc>)
240021d0:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
240021d4:	f041 0102 	orr.w	r1, r1, #2
240021d8:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240021dc:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
240021de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240021e2:	f003 0302 	and.w	r3, r3, #2
240021e6:	9302      	str	r3, [sp, #8]
240021e8:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
240021ea:	9103      	str	r1, [sp, #12]
240021ec:	6991      	ldr	r1, [r2, #24]
240021ee:	4b21      	ldr	r3, [pc, #132]	; (24002274 <SystemClock_Config+0xf4>)
240021f0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
240021f4:	6191      	str	r1, [r2, #24]
240021f6:	6992      	ldr	r2, [r2, #24]
240021f8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
240021fc:	9203      	str	r2, [sp, #12]
240021fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24002200:	4a1d      	ldr	r2, [pc, #116]	; (24002278 <SystemClock_Config+0xf8>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24002202:	f041 0101 	orr.w	r1, r1, #1
24002206:	62d9      	str	r1, [r3, #44]	; 0x2c
24002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400220a:	f003 0301 	and.w	r3, r3, #1
2400220e:	9303      	str	r3, [sp, #12]
24002210:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24002212:	6993      	ldr	r3, [r2, #24]
24002214:	049b      	lsls	r3, r3, #18
24002216:	d5fc      	bpl.n	24002212 <SystemClock_Config+0x92>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
24002218:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
2400221a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 6;
  RCC_OscInitStruct.PLL.PLLR = 8;
2400221c:	2508      	movs	r5, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
2400221e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLP = 2;
24002222:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
24002224:	2021      	movs	r0, #33	; 0x21
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24002226:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
24002228:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
2400222a:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 60;
2400222c:	223c      	movs	r2, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2400222e:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 6;
24002232:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLN = 60;
24002234:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
24002236:	e9cd 351a 	strd	r3, r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
2400223a:	230c      	movs	r3, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
2400223c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24002240:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
24002242:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
24002244:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24002248:	f005 f86c 	bl	24007324 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2400224c:	213f      	movs	r1, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
2400224e:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24002250:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24002254:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24002256:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24002258:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
2400225a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2400225c:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
2400225e:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
24002260:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24002262:	e9cd 5307 	strd	r5, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24002266:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
2400226a:	f005 fbef 	bl	24007a4c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
2400226e:	b021      	add	sp, #132	; 0x84
24002270:	bd30      	pop	{r4, r5, pc}
24002272:	bf00      	nop
24002274:	58000400 	.word	0x58000400
24002278:	58024800 	.word	0x58024800
2400227c:	58024400 	.word	0x58024400

24002280 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
24002280:	b510      	push	{r4, lr}
24002282:	b0b0      	sub	sp, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24002284:	22a0      	movs	r2, #160	; 0xa0
24002286:	2100      	movs	r1, #0
  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
  PeriphClkInitStruct.PLL2.PLL2N = 37;
24002288:	2425      	movs	r4, #37	; 0x25
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400228a:	a808      	add	r0, sp, #32
2400228c:	f012 fdb6 	bl	24014dfc <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24002290:	2101      	movs	r1, #1
  PeriphClkInitStruct.PLL2.PLL2P = 8;
24002292:	2208      	movs	r2, #8
  PeriphClkInitStruct.PLL2.PLL2R = 3;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
  PeriphClkInitStruct.PLL3.PLL3N = 12;
24002294:	200c      	movs	r0, #12
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24002296:	9102      	str	r1, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
24002298:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL3.PLL3M = 1;
2400229a:	910a      	str	r1, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 4;
2400229c:	2104      	movs	r1, #4
  PeriphClkInitStruct.PLL2.PLL2N = 37;
2400229e:	9403      	str	r4, [sp, #12]
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
  PeriphClkInitStruct.PLL3.PLL3R = 16;
240022a0:	2410      	movs	r4, #16
  PeriphClkInitStruct.PLL3.PLL3N = 12;
240022a2:	900b      	str	r0, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
240022a4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
240022a8:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
240022aa:	9204      	str	r2, [sp, #16]
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
240022ac:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
240022ae:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 240022e8 <PeriphCommonClock_Config+0x68>
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
240022b2:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
240022b6:	f640 1138 	movw	r1, #2360	; 0x938
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
240022ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
240022be:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
240022c2:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 240022f0 <PeriphCommonClock_Config+0x70>
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
240022c6:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
240022ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
240022ce:	9214      	str	r2, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
240022d0:	e9cd 400e 	strd	r4, r0, [sp, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240022d4:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
240022d6:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2R = 3;
240022d8:	ed8d 7b06 	vstr	d7, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240022dc:	f005 fe66 	bl	24007fac <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
240022e0:	b030      	add	sp, #192	; 0xc0
240022e2:	bd10      	pop	{r4, pc}
240022e4:	f3af 8000 	nop.w
240022e8:	01010100 	.word	0x01010100
240022ec:	00000000 	.word	0x00000000
240022f0:	00000003 	.word	0x00000003
240022f4:	000000c0 	.word	0x000000c0

240022f8 <BSP_SD_IsDetected>:
}



uint8_t BSP_SD_IsDetected(void)
{
240022f8:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
240022fa:	2301      	movs	r3, #1
240022fc:	f88d 3007 	strb.w	r3, [sp, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  //{
  //  status = SD_NOT_PRESENT;
  //}

  return status;
24002300:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
24002304:	b002      	add	sp, #8
24002306:	4770      	bx	lr

24002308 <getPresetNamesFromSDCard>:

void getPresetNamesFromSDCard(void)
{
24002308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
2400230c:	2301      	movs	r3, #1
{
2400230e:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
24002310:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
24002314:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
24002318:	b93b      	cbnz	r3, 2400232a <getPresetNamesFromSDCard+0x22>
2400231a:	f8df a078 	ldr.w	sl, [pc, #120]	; 24002394 <getPresetNamesFromSDCard+0x8c>
			}

		}

	}
	diskBusy = 0;
2400231e:	2300      	movs	r3, #0
24002320:	f88a 3000 	strb.w	r3, [sl]
	return;
}
24002324:	b009      	add	sp, #36	; 0x24
24002326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400232a:	4b14      	ldr	r3, [pc, #80]	; (2400237c <getPresetNamesFromSDCard+0x74>)
2400232c:	075a      	lsls	r2, r3, #29
2400232e:	f040 82ed 	bne.w	2400290c <getPresetNamesFromSDCard+0x604>
			audioOutBuffer[i] = 0;
24002332:	2000      	movs	r0, #0
24002334:	2100      	movs	r1, #0
24002336:	f503 6280 	add.w	r2, r3, #1024	; 0x400
2400233a:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
2400233e:	429a      	cmp	r2, r3
24002340:	d1fb      	bne.n	2400233a <getPresetNamesFromSDCard+0x32>
		loadFailed = 0;
24002342:	2400      	movs	r4, #0
24002344:	4b0e      	ldr	r3, [pc, #56]	; (24002380 <getPresetNamesFromSDCard+0x78>)
		diskBusy = 1;
24002346:	2501      	movs	r5, #1
24002348:	f8df a048 	ldr.w	sl, [pc, #72]	; 24002394 <getPresetNamesFromSDCard+0x8c>
		disk_initialize(0);
2400234c:	4620      	mov	r0, r4
		loadFailed = 0;
2400234e:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
24002350:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
24002354:	f00a fbe0 	bl	2400cb18 <disk_initialize>
	    disk_status(0);
24002358:	4620      	mov	r0, r4
2400235a:	f00a fbd3 	bl	2400cb04 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
2400235e:	462a      	mov	r2, r5
24002360:	4908      	ldr	r1, [pc, #32]	; (24002384 <getPresetNamesFromSDCard+0x7c>)
24002362:	4809      	ldr	r0, [pc, #36]	; (24002388 <getPresetNamesFromSDCard+0x80>)
24002364:	f00c fdac 	bl	2400eec0 <f_mount>
24002368:	2800      	cmp	r0, #0
2400236a:	d1d8      	bne.n	2400231e <getPresetNamesFromSDCard+0x16>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
2400236c:	4605      	mov	r5, r0
2400236e:	4e07      	ldr	r6, [pc, #28]	; (2400238c <getPresetNamesFromSDCard+0x84>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24002370:	f8df 9010 	ldr.w	r9, [pc, #16]	; 24002384 <getPresetNamesFromSDCard+0x7c>
24002374:	f8df 8020 	ldr.w	r8, [pc, #32]	; 24002398 <getPresetNamesFromSDCard+0x90>
24002378:	4f05      	ldr	r7, [pc, #20]	; (24002390 <getPresetNamesFromSDCard+0x88>)
2400237a:	e027      	b.n	240023cc <getPresetNamesFromSDCard+0xc4>
2400237c:	30000000 	.word	0x30000000
24002380:	20018d0c 	.word	0x20018d0c
24002384:	2001d988 	.word	0x2001d988
24002388:	2001d528 	.word	0x2001d528
2400238c:	24017384 	.word	0x24017384
24002390:	20014b20 	.word	0x20014b20
24002394:	20014b58 	.word	0x20014b58
24002398:	20016bc0 	.word	0x20016bc0
					strcat(charBuf, "*.ebp");
2400239c:	aa02      	add	r2, sp, #8
2400239e:	6830      	ldr	r0, [r6, #0]
240023a0:	88b1      	ldrh	r1, [r6, #4]
240023a2:	f10d 0c08 	add.w	ip, sp, #8
240023a6:	18d4      	adds	r4, r2, r3
					strcpy(finalString, charBuf);
240023a8:	1d9a      	adds	r2, r3, #6
					strcat(charBuf, "*.ebp");
240023aa:	f84c 0003 	str.w	r0, [ip, r3]
					strcpy(finalString, charBuf);
240023ae:	a805      	add	r0, sp, #20
					strcat(charBuf, "*.ebp");
240023b0:	80a1      	strh	r1, [r4, #4]
					strcpy(finalString, charBuf);
240023b2:	4661      	mov	r1, ip
240023b4:	f012 fd54 	bl	24014e60 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240023b8:	ab05      	add	r3, sp, #20
240023ba:	464a      	mov	r2, r9
240023bc:	4641      	mov	r1, r8
240023be:	4638      	mov	r0, r7
240023c0:	f00d fa96 	bl	2400f8f0 <f_findfirst>
				if(res == FR_OK)
240023c4:	b358      	cbz	r0, 2400241e <getPresetNamesFromSDCard+0x116>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
240023c6:	3501      	adds	r5, #1
240023c8:	2d40      	cmp	r5, #64	; 0x40
240023ca:	d0a8      	beq.n	2400231e <getPresetNamesFromSDCard+0x16>
				itoa(i, charBuf, 10);
240023cc:	220a      	movs	r2, #10
240023ce:	a902      	add	r1, sp, #8
240023d0:	4628      	mov	r0, r5
240023d2:	f012 fccf 	bl	24014d74 <itoa>
				int len = ((strlen(charBuf)));
240023d6:	a802      	add	r0, sp, #8
240023d8:	f7fd ff7e 	bl	240002d8 <strlen>
				if (len == 1)
240023dc:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
240023de:	4603      	mov	r3, r0
				if (len == 1)
240023e0:	d1dc      	bne.n	2400239c <getPresetNamesFromSDCard+0x94>
					finalString[2] = charBuf[1];
240023e2:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
240023e6:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
240023e8:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, "*.ebp");
240023ec:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
240023ee:	f88d 1016 	strb.w	r1, [sp, #22]
					strcat(finalString, "*.ebp");
240023f2:	ac05      	add	r4, sp, #20
					finalString[1] = charBuf[0];
240023f4:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
240023f8:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
240023fc:	f7fd ff6c 	bl	240002d8 <strlen>
24002400:	a905      	add	r1, sp, #20
24002402:	4603      	mov	r3, r0
24002404:	88b2      	ldrh	r2, [r6, #4]
24002406:	4419      	add	r1, r3
24002408:	6830      	ldr	r0, [r6, #0]
2400240a:	50e0      	str	r0, [r4, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
2400240c:	ab05      	add	r3, sp, #20
					strcat(finalString, "*.ebp");
2400240e:	808a      	strh	r2, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24002410:	4638      	mov	r0, r7
24002412:	464a      	mov	r2, r9
24002414:	4641      	mov	r1, r8
24002416:	f00d fa6b 	bl	2400f8f0 <f_findfirst>
				if(res == FR_OK)
2400241a:	2800      	cmp	r0, #0
2400241c:	d1d3      	bne.n	240023c6 <getPresetNamesFromSDCard+0xbe>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
2400241e:	f8df b354 	ldr.w	fp, [pc, #852]	; 24002774 <getPresetNamesFromSDCard+0x46c>
24002422:	2211      	movs	r2, #17
24002424:	49d0      	ldr	r1, [pc, #832]	; (24002768 <getPresetNamesFromSDCard+0x460>)
24002426:	4658      	mov	r0, fp
24002428:	f00c fd96 	bl	2400ef58 <f_open>
2400242c:	2800      	cmp	r0, #0
2400242e:	d1ca      	bne.n	240023c6 <getPresetNamesFromSDCard+0xbe>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24002430:	4cce      	ldr	r4, [pc, #824]	; (2400276c <getPresetNamesFromSDCard+0x464>)
24002432:	ab01      	add	r3, sp, #4
24002434:	f8db 200c 	ldr.w	r2, [fp, #12]
24002438:	4658      	mov	r0, fp
2400243a:	4621      	mov	r1, r4
2400243c:	f00c feee 	bl	2400f21c <f_read>
						f_close(&SDFile);
24002440:	4658      	mov	r0, fp
24002442:	f00d f955 	bl	2400f6f0 <f_close>
						if (buffer[bufferIndex] == 17)
24002446:	7820      	ldrb	r0, [r4, #0]
							presetNamesArray[i][j] = buffer[bufferIndex];
24002448:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
2400244c:	49c8      	ldr	r1, [pc, #800]	; (24002770 <getPresetNamesFromSDCard+0x468>)
						if (buffer[bufferIndex] == 17)
2400244e:	f1a0 0011 	sub.w	r0, r0, #17
								macroNamesArray[i][j][k] = buffer[bufferIndex];
24002452:	f8df c324 	ldr.w	ip, [pc, #804]	; 24002778 <getPresetNamesFromSDCard+0x470>
						if (buffer[bufferIndex] == 17)
24002456:	fab0 f080 	clz	r0, r0
2400245a:	0940      	lsrs	r0, r0, #5
2400245c:	0083      	lsls	r3, r0, #2
							presetNamesArray[i][j] = buffer[bufferIndex];
2400245e:	f814 0020 	ldrb.w	r0, [r4, r0, lsl #2]
24002462:	f801 0012 	strb.w	r0, [r1, r2, lsl #1]
24002466:	1c58      	adds	r0, r3, #1
24002468:	eb01 0142 	add.w	r1, r1, r2, lsl #1
2400246c:	5c20      	ldrb	r0, [r4, r0]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
2400246e:	ebc5 1205 	rsb	r2, r5, r5, lsl #4
							presetNamesArray[i][j] = buffer[bufferIndex];
24002472:	7048      	strb	r0, [r1, #1]
24002474:	1c98      	adds	r0, r3, #2
24002476:	5c20      	ldrb	r0, [r4, r0]
24002478:	7088      	strb	r0, [r1, #2]
2400247a:	1cd8      	adds	r0, r3, #3
2400247c:	5c20      	ldrb	r0, [r4, r0]
2400247e:	70c8      	strb	r0, [r1, #3]
24002480:	1d18      	adds	r0, r3, #4
24002482:	5c20      	ldrb	r0, [r4, r0]
24002484:	7108      	strb	r0, [r1, #4]
24002486:	1d58      	adds	r0, r3, #5
24002488:	5c20      	ldrb	r0, [r4, r0]
2400248a:	7148      	strb	r0, [r1, #5]
2400248c:	1d98      	adds	r0, r3, #6
2400248e:	5c20      	ldrb	r0, [r4, r0]
24002490:	7188      	strb	r0, [r1, #6]
24002492:	1dd8      	adds	r0, r3, #7
24002494:	5c20      	ldrb	r0, [r4, r0]
24002496:	71c8      	strb	r0, [r1, #7]
24002498:	f103 0008 	add.w	r0, r3, #8
2400249c:	5c20      	ldrb	r0, [r4, r0]
2400249e:	7208      	strb	r0, [r1, #8]
240024a0:	f103 0009 	add.w	r0, r3, #9
240024a4:	5c20      	ldrb	r0, [r4, r0]
240024a6:	7248      	strb	r0, [r1, #9]
240024a8:	f103 000a 	add.w	r0, r3, #10
240024ac:	5c20      	ldrb	r0, [r4, r0]
240024ae:	7288      	strb	r0, [r1, #10]
240024b0:	f103 000b 	add.w	r0, r3, #11
240024b4:	5c20      	ldrb	r0, [r4, r0]
240024b6:	72c8      	strb	r0, [r1, #11]
240024b8:	f103 000c 	add.w	r0, r3, #12
240024bc:	5c20      	ldrb	r0, [r4, r0]
240024be:	7308      	strb	r0, [r1, #12]
240024c0:	f103 000d 	add.w	r0, r3, #13
240024c4:	5c20      	ldrb	r0, [r4, r0]
240024c6:	7348      	strb	r0, [r1, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
240024c8:	f103 010e 	add.w	r1, r3, #14
240024cc:	5c61      	ldrb	r1, [r4, r1]
240024ce:	f80c 1032 	strb.w	r1, [ip, r2, lsl #3]
240024d2:	f103 010f 	add.w	r1, r3, #15
240024d6:	eb0c 02c2 	add.w	r2, ip, r2, lsl #3
240024da:	5c61      	ldrb	r1, [r4, r1]
240024dc:	7051      	strb	r1, [r2, #1]
240024de:	f103 0110 	add.w	r1, r3, #16
240024e2:	5c61      	ldrb	r1, [r4, r1]
240024e4:	7091      	strb	r1, [r2, #2]
240024e6:	f103 0111 	add.w	r1, r3, #17
240024ea:	5c61      	ldrb	r1, [r4, r1]
240024ec:	70d1      	strb	r1, [r2, #3]
240024ee:	f103 0112 	add.w	r1, r3, #18
240024f2:	5c61      	ldrb	r1, [r4, r1]
240024f4:	7111      	strb	r1, [r2, #4]
240024f6:	f103 0113 	add.w	r1, r3, #19
240024fa:	5c61      	ldrb	r1, [r4, r1]
240024fc:	7151      	strb	r1, [r2, #5]
240024fe:	f103 0114 	add.w	r1, r3, #20
24002502:	5c61      	ldrb	r1, [r4, r1]
24002504:	7191      	strb	r1, [r2, #6]
24002506:	f103 0115 	add.w	r1, r3, #21
2400250a:	5c61      	ldrb	r1, [r4, r1]
2400250c:	71d1      	strb	r1, [r2, #7]
2400250e:	f103 0116 	add.w	r1, r3, #22
24002512:	5c61      	ldrb	r1, [r4, r1]
24002514:	7211      	strb	r1, [r2, #8]
24002516:	f103 0117 	add.w	r1, r3, #23
2400251a:	5c61      	ldrb	r1, [r4, r1]
2400251c:	7291      	strb	r1, [r2, #10]
2400251e:	f103 0118 	add.w	r1, r3, #24
24002522:	5c61      	ldrb	r1, [r4, r1]
24002524:	72d1      	strb	r1, [r2, #11]
24002526:	f103 0119 	add.w	r1, r3, #25
2400252a:	5c61      	ldrb	r1, [r4, r1]
2400252c:	7311      	strb	r1, [r2, #12]
2400252e:	f103 011a 	add.w	r1, r3, #26
24002532:	5c61      	ldrb	r1, [r4, r1]
24002534:	7351      	strb	r1, [r2, #13]
24002536:	f103 011b 	add.w	r1, r3, #27
2400253a:	5c61      	ldrb	r1, [r4, r1]
2400253c:	7391      	strb	r1, [r2, #14]
2400253e:	f103 011c 	add.w	r1, r3, #28
24002542:	5c61      	ldrb	r1, [r4, r1]
24002544:	73d1      	strb	r1, [r2, #15]
24002546:	f103 011d 	add.w	r1, r3, #29
2400254a:	5c61      	ldrb	r1, [r4, r1]
2400254c:	7411      	strb	r1, [r2, #16]
2400254e:	f103 011e 	add.w	r1, r3, #30
24002552:	5c61      	ldrb	r1, [r4, r1]
24002554:	7451      	strb	r1, [r2, #17]
24002556:	f103 011f 	add.w	r1, r3, #31
2400255a:	5c61      	ldrb	r1, [r4, r1]
2400255c:	7491      	strb	r1, [r2, #18]
2400255e:	f103 0120 	add.w	r1, r3, #32
24002562:	5c61      	ldrb	r1, [r4, r1]
24002564:	7511      	strb	r1, [r2, #20]
24002566:	f103 0121 	add.w	r1, r3, #33	; 0x21
2400256a:	5c61      	ldrb	r1, [r4, r1]
2400256c:	7551      	strb	r1, [r2, #21]
2400256e:	f103 0122 	add.w	r1, r3, #34	; 0x22
24002572:	5c61      	ldrb	r1, [r4, r1]
24002574:	7591      	strb	r1, [r2, #22]
24002576:	f103 0123 	add.w	r1, r3, #35	; 0x23
2400257a:	5c61      	ldrb	r1, [r4, r1]
2400257c:	75d1      	strb	r1, [r2, #23]
2400257e:	f103 0124 	add.w	r1, r3, #36	; 0x24
24002582:	5c61      	ldrb	r1, [r4, r1]
24002584:	7611      	strb	r1, [r2, #24]
24002586:	f103 0125 	add.w	r1, r3, #37	; 0x25
2400258a:	5c61      	ldrb	r1, [r4, r1]
2400258c:	7651      	strb	r1, [r2, #25]
2400258e:	f103 0126 	add.w	r1, r3, #38	; 0x26
24002592:	5c61      	ldrb	r1, [r4, r1]
24002594:	7691      	strb	r1, [r2, #26]
24002596:	f103 0127 	add.w	r1, r3, #39	; 0x27
2400259a:	5c61      	ldrb	r1, [r4, r1]
2400259c:	76d1      	strb	r1, [r2, #27]
2400259e:	f103 0128 	add.w	r1, r3, #40	; 0x28
240025a2:	5c61      	ldrb	r1, [r4, r1]
240025a4:	7711      	strb	r1, [r2, #28]
240025a6:	f103 0129 	add.w	r1, r3, #41	; 0x29
240025aa:	5c61      	ldrb	r1, [r4, r1]
240025ac:	7791      	strb	r1, [r2, #30]
240025ae:	f103 012a 	add.w	r1, r3, #42	; 0x2a
240025b2:	5c61      	ldrb	r1, [r4, r1]
240025b4:	77d1      	strb	r1, [r2, #31]
240025b6:	f103 012b 	add.w	r1, r3, #43	; 0x2b
240025ba:	5c61      	ldrb	r1, [r4, r1]
240025bc:	f882 1020 	strb.w	r1, [r2, #32]
240025c0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
240025c4:	5c61      	ldrb	r1, [r4, r1]
240025c6:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
240025ca:	f103 012d 	add.w	r1, r3, #45	; 0x2d
240025ce:	5c61      	ldrb	r1, [r4, r1]
240025d0:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
240025d4:	f103 012e 	add.w	r1, r3, #46	; 0x2e
240025d8:	5c61      	ldrb	r1, [r4, r1]
240025da:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
240025de:	f103 012f 	add.w	r1, r3, #47	; 0x2f
240025e2:	5c61      	ldrb	r1, [r4, r1]
240025e4:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
240025e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
240025ec:	5c61      	ldrb	r1, [r4, r1]
240025ee:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
240025f2:	f103 0131 	add.w	r1, r3, #49	; 0x31
240025f6:	5c61      	ldrb	r1, [r4, r1]
240025f8:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
240025fc:	f103 0132 	add.w	r1, r3, #50	; 0x32
24002600:	5c61      	ldrb	r1, [r4, r1]
24002602:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
24002606:	f103 0133 	add.w	r1, r3, #51	; 0x33
2400260a:	5c61      	ldrb	r1, [r4, r1]
2400260c:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
24002610:	f103 0134 	add.w	r1, r3, #52	; 0x34
24002614:	5c61      	ldrb	r1, [r4, r1]
24002616:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
2400261a:	f103 0135 	add.w	r1, r3, #53	; 0x35
2400261e:	5c61      	ldrb	r1, [r4, r1]
24002620:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
24002624:	f103 0136 	add.w	r1, r3, #54	; 0x36
24002628:	5c61      	ldrb	r1, [r4, r1]
2400262a:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
2400262e:	f103 0137 	add.w	r1, r3, #55	; 0x37
24002632:	5c61      	ldrb	r1, [r4, r1]
24002634:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
24002638:	f103 0138 	add.w	r1, r3, #56	; 0x38
2400263c:	5c61      	ldrb	r1, [r4, r1]
2400263e:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
24002642:	f103 0139 	add.w	r1, r3, #57	; 0x39
24002646:	5c61      	ldrb	r1, [r4, r1]
24002648:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
2400264c:	f103 013a 	add.w	r1, r3, #58	; 0x3a
24002650:	5c61      	ldrb	r1, [r4, r1]
24002652:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
24002656:	f103 013b 	add.w	r1, r3, #59	; 0x3b
2400265a:	5c61      	ldrb	r1, [r4, r1]
2400265c:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
24002660:	f103 013c 	add.w	r1, r3, #60	; 0x3c
24002664:	5c61      	ldrb	r1, [r4, r1]
24002666:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
2400266a:	f103 013d 	add.w	r1, r3, #61	; 0x3d
2400266e:	5c61      	ldrb	r1, [r4, r1]
24002670:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
24002674:	f103 013e 	add.w	r1, r3, #62	; 0x3e
24002678:	5c61      	ldrb	r1, [r4, r1]
2400267a:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
2400267e:	f103 013f 	add.w	r1, r3, #63	; 0x3f
24002682:	5c61      	ldrb	r1, [r4, r1]
24002684:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
24002688:	f103 0140 	add.w	r1, r3, #64	; 0x40
2400268c:	5c61      	ldrb	r1, [r4, r1]
2400268e:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
24002692:	f103 0141 	add.w	r1, r3, #65	; 0x41
24002696:	5c61      	ldrb	r1, [r4, r1]
24002698:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
2400269c:	f103 0142 	add.w	r1, r3, #66	; 0x42
240026a0:	5c61      	ldrb	r1, [r4, r1]
240026a2:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
240026a6:	f103 0143 	add.w	r1, r3, #67	; 0x43
240026aa:	5c61      	ldrb	r1, [r4, r1]
240026ac:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
240026b0:	f103 0144 	add.w	r1, r3, #68	; 0x44
240026b4:	5c61      	ldrb	r1, [r4, r1]
240026b6:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
240026ba:	f103 0145 	add.w	r1, r3, #69	; 0x45
240026be:	5c61      	ldrb	r1, [r4, r1]
240026c0:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
240026c4:	f103 0146 	add.w	r1, r3, #70	; 0x46
240026c8:	5c61      	ldrb	r1, [r4, r1]
240026ca:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
240026ce:	f103 0147 	add.w	r1, r3, #71	; 0x47
240026d2:	5c61      	ldrb	r1, [r4, r1]
240026d4:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
240026d8:	f103 0148 	add.w	r1, r3, #72	; 0x48
240026dc:	5c61      	ldrb	r1, [r4, r1]
240026de:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
240026e2:	f103 0149 	add.w	r1, r3, #73	; 0x49
240026e6:	5c61      	ldrb	r1, [r4, r1]
240026e8:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
240026ec:	f103 014a 	add.w	r1, r3, #74	; 0x4a
240026f0:	5c61      	ldrb	r1, [r4, r1]
240026f2:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
240026f6:	f103 014b 	add.w	r1, r3, #75	; 0x4b
240026fa:	5c61      	ldrb	r1, [r4, r1]
240026fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
24002700:	f103 014c 	add.w	r1, r3, #76	; 0x4c
24002704:	5c61      	ldrb	r1, [r4, r1]
24002706:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
2400270a:	f103 014d 	add.w	r1, r3, #77	; 0x4d
2400270e:	5c61      	ldrb	r1, [r4, r1]
24002710:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
24002714:	f103 014e 	add.w	r1, r3, #78	; 0x4e
24002718:	5c61      	ldrb	r1, [r4, r1]
2400271a:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
2400271e:	f103 014f 	add.w	r1, r3, #79	; 0x4f
24002722:	5c61      	ldrb	r1, [r4, r1]
24002724:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
24002728:	f103 0150 	add.w	r1, r3, #80	; 0x50
2400272c:	5c61      	ldrb	r1, [r4, r1]
2400272e:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
24002732:	f103 0151 	add.w	r1, r3, #81	; 0x51
24002736:	5c61      	ldrb	r1, [r4, r1]
24002738:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
2400273c:	f103 0152 	add.w	r1, r3, #82	; 0x52
24002740:	5c61      	ldrb	r1, [r4, r1]
24002742:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
24002746:	f103 0153 	add.w	r1, r3, #83	; 0x53
2400274a:	5c61      	ldrb	r1, [r4, r1]
2400274c:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
24002750:	f103 0154 	add.w	r1, r3, #84	; 0x54
24002754:	5c61      	ldrb	r1, [r4, r1]
24002756:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
2400275a:	f103 0155 	add.w	r1, r3, #85	; 0x55
2400275e:	5c61      	ldrb	r1, [r4, r1]
24002760:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
24002764:	e00a      	b.n	2400277c <getPresetNamesFromSDCard+0x474>
24002766:	bf00      	nop
24002768:	20016bd6 	.word	0x20016bd6
2400276c:	30032380 	.word	0x30032380
24002770:	30032000 	.word	0x30032000
24002774:	2001d75c 	.word	0x2001d75c
24002778:	30033380 	.word	0x30033380
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
2400277c:	f103 0156 	add.w	r1, r3, #86	; 0x56
24002780:	5c61      	ldrb	r1, [r4, r1]
24002782:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
24002786:	f103 0157 	add.w	r1, r3, #87	; 0x57
2400278a:	5c61      	ldrb	r1, [r4, r1]
2400278c:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
24002790:	f103 0158 	add.w	r1, r3, #88	; 0x58
24002794:	5c61      	ldrb	r1, [r4, r1]
24002796:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
2400279a:	f103 0159 	add.w	r1, r3, #89	; 0x59
2400279e:	5c61      	ldrb	r1, [r4, r1]
240027a0:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
240027a4:	f103 015a 	add.w	r1, r3, #90	; 0x5a
240027a8:	5c61      	ldrb	r1, [r4, r1]
240027aa:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
240027ae:	f103 015b 	add.w	r1, r3, #91	; 0x5b
240027b2:	5c61      	ldrb	r1, [r4, r1]
240027b4:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
240027b8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
240027bc:	5c61      	ldrb	r1, [r4, r1]
240027be:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
240027c2:	f103 015d 	add.w	r1, r3, #93	; 0x5d
240027c6:	5c61      	ldrb	r1, [r4, r1]
240027c8:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
240027cc:	f103 015e 	add.w	r1, r3, #94	; 0x5e
240027d0:	5c61      	ldrb	r1, [r4, r1]
240027d2:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
240027d6:	f103 015f 	add.w	r1, r3, #95	; 0x5f
240027da:	5c61      	ldrb	r1, [r4, r1]
240027dc:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
240027e0:	f103 0160 	add.w	r1, r3, #96	; 0x60
240027e4:	5c61      	ldrb	r1, [r4, r1]
240027e6:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
240027ea:	f103 0161 	add.w	r1, r3, #97	; 0x61
240027ee:	5c61      	ldrb	r1, [r4, r1]
240027f0:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
240027f4:	f103 0162 	add.w	r1, r3, #98	; 0x62
240027f8:	5c61      	ldrb	r1, [r4, r1]
240027fa:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
240027fe:	f103 0163 	add.w	r1, r3, #99	; 0x63
24002802:	5c61      	ldrb	r1, [r4, r1]
24002804:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
24002808:	f103 0164 	add.w	r1, r3, #100	; 0x64
2400280c:	5c61      	ldrb	r1, [r4, r1]
2400280e:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
24002812:	f103 0165 	add.w	r1, r3, #101	; 0x65
24002816:	5c61      	ldrb	r1, [r4, r1]
24002818:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
2400281c:	f103 0166 	add.w	r1, r3, #102	; 0x66
24002820:	5c61      	ldrb	r1, [r4, r1]
24002822:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
24002826:	f103 0167 	add.w	r1, r3, #103	; 0x67
2400282a:	5c61      	ldrb	r1, [r4, r1]
2400282c:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
24002830:	f103 0168 	add.w	r1, r3, #104	; 0x68
24002834:	5c61      	ldrb	r1, [r4, r1]
24002836:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
2400283a:	f103 0169 	add.w	r1, r3, #105	; 0x69
2400283e:	5c61      	ldrb	r1, [r4, r1]
24002840:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
24002844:	f103 016a 	add.w	r1, r3, #106	; 0x6a
24002848:	5c61      	ldrb	r1, [r4, r1]
2400284a:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
2400284e:	f103 016b 	add.w	r1, r3, #107	; 0x6b
24002852:	5c61      	ldrb	r1, [r4, r1]
24002854:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
24002858:	f103 016c 	add.w	r1, r3, #108	; 0x6c
2400285c:	5c61      	ldrb	r1, [r4, r1]
2400285e:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
24002862:	f103 016d 	add.w	r1, r3, #109	; 0x6d
24002866:	5c61      	ldrb	r1, [r4, r1]
24002868:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
2400286c:	f103 016e 	add.w	r1, r3, #110	; 0x6e
24002870:	5c61      	ldrb	r1, [r4, r1]
24002872:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
24002876:	f103 016f 	add.w	r1, r3, #111	; 0x6f
2400287a:	5c61      	ldrb	r1, [r4, r1]
2400287c:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
24002880:	f103 0170 	add.w	r1, r3, #112	; 0x70
24002884:	5c61      	ldrb	r1, [r4, r1]
24002886:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
2400288a:	f103 0171 	add.w	r1, r3, #113	; 0x71
2400288e:	5c61      	ldrb	r1, [r4, r1]
24002890:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
24002894:	f103 0172 	add.w	r1, r3, #114	; 0x72
24002898:	5c61      	ldrb	r1, [r4, r1]
2400289a:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
2400289e:	f103 0173 	add.w	r1, r3, #115	; 0x73
240028a2:	5c61      	ldrb	r1, [r4, r1]
240028a4:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
240028a8:	f103 0174 	add.w	r1, r3, #116	; 0x74
240028ac:	5c61      	ldrb	r1, [r4, r1]
240028ae:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
240028b2:	f103 0175 	add.w	r1, r3, #117	; 0x75
240028b6:	5c61      	ldrb	r1, [r4, r1]
240028b8:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
240028bc:	f103 0176 	add.w	r1, r3, #118	; 0x76
240028c0:	5c61      	ldrb	r1, [r4, r1]
240028c2:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
240028c6:	f103 0177 	add.w	r1, r3, #119	; 0x77
240028ca:	5c61      	ldrb	r1, [r4, r1]
240028cc:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
240028d0:	f103 0178 	add.w	r1, r3, #120	; 0x78
240028d4:	5c61      	ldrb	r1, [r4, r1]
240028d6:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
240028da:	f103 0179 	add.w	r1, r3, #121	; 0x79
240028de:	5c61      	ldrb	r1, [r4, r1]
240028e0:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
240028e4:	f103 017a 	add.w	r1, r3, #122	; 0x7a
240028e8:	5c61      	ldrb	r1, [r4, r1]
240028ea:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
240028ee:	f103 017b 	add.w	r1, r3, #123	; 0x7b
240028f2:	5c61      	ldrb	r1, [r4, r1]
240028f4:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
240028f8:	f103 017c 	add.w	r1, r3, #124	; 0x7c
240028fc:	337d      	adds	r3, #125	; 0x7d
240028fe:	5c61      	ldrb	r1, [r4, r1]
24002900:	5ce3      	ldrb	r3, [r4, r3]
24002902:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
24002906:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
						for (int j = 0; j < 4; j++)
2400290a:	e55c      	b.n	240023c6 <getPresetNamesFromSDCard+0xbe>
			audioOutBuffer[i] = 0;
2400290c:	2200      	movs	r2, #0
2400290e:	f503 6180 	add.w	r1, r3, #1024	; 0x400
			audioOutBuffer[i + 1] = 0;
24002912:	e9c3 2200 	strd	r2, r2, [r3]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24002916:	3308      	adds	r3, #8
24002918:	4299      	cmp	r1, r3
2400291a:	d1fa      	bne.n	24002912 <getPresetNamesFromSDCard+0x60a>
2400291c:	e511      	b.n	24002342 <getPresetNamesFromSDCard+0x3a>
2400291e:	bf00      	nop

24002920 <SDRAM_init>:
#define SDRAM_MODEREG_WRITEBURST_MODE_PROG_BURST ((0 << 9))

#define SDRAM_MODEREG_OPERATING_MODE_STANDARD ((0 << 13)|(0 << 14))

void SDRAM_init()
{
24002920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002924:	4c21      	ldr	r4, [pc, #132]	; (240029ac <SDRAM_init+0x8c>)
{
24002926:	b086      	sub	sp, #24
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24002928:	2501      	movs	r5, #1
	        __IO uint32_t tmpmrd = 0;
2400292a:	2600      	movs	r6, #0
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
2400292c:	2710      	movs	r7, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400292e:	a902      	add	r1, sp, #8
24002930:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002934:	4620      	mov	r0, r4
	        /* Step 4: Insert 100 us delay */
	        HAL_Delay(1);


	        /* Step 5: Configure a PALL (precharge all) command */
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
24002936:	f04f 0802 	mov.w	r8, #2
	        __IO uint32_t tmpmrd = 0;
2400293a:	9601      	str	r6, [sp, #4]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
2400293c:	e9cd 5702 	strd	r5, r7, [sp, #8]
	        Command.ModeRegisterDefinition = 0;
24002940:	e9cd 5604 	strd	r5, r6, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002944:	f008 f8aa 	bl	2400aa9c <HAL_SDRAM_SendCommand>
	        HAL_Delay(1);
24002948:	4628      	mov	r0, r5
2400294a:	f001 ff47 	bl	240047dc <HAL_Delay>
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400294e:	a902      	add	r1, sp, #8
24002950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002954:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
24002956:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
24002958:	f8cd 8008 	str.w	r8, [sp, #8]
	        Command.AutoRefreshNumber      = 1;
2400295c:	e9cd 7503 	strd	r7, r5, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002960:	f008 f89c 	bl	2400aa9c <HAL_SDRAM_SendCommand>

	        /* Step 6 : Configure a Auto-Refresh command */
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24002964:	2303      	movs	r3, #3
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 2;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002966:	a902      	add	r1, sp, #8
24002968:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400296c:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
2400296e:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24002970:	9302      	str	r3, [sp, #8]
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
	                 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
	                 | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE | SDRAM_MODEREG_OPERATING_MODE_STANDARD;
	        // // Used in example, but can't find reference except for "Test Mode"

	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24002972:	2604      	movs	r6, #4
	        Command.AutoRefreshNumber      = 2;
24002974:	e9cd 7803 	strd	r7, r8, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002978:	f008 f890 	bl	2400aa9c <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
2400297c:	f240 2322 	movw	r3, #546	; 0x222
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24002980:	2710      	movs	r7, #16
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = tmpmrd;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002982:	a902      	add	r1, sp, #8
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
24002984:	9301      	str	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002986:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
2400298a:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
2400298c:	4620      	mov	r0, r4
	        Command.AutoRefreshNumber      = 1;
2400298e:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = tmpmrd;
24002990:	9305      	str	r3, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24002992:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24002996:	f008 f881 	bl	2400aa9c <HAL_SDRAM_SendCommand>

	        //HAL_SDRAM_ProgramRefreshRate(hsdram, 0x56A - 20);
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
2400299a:	f240 21fa 	movw	r1, #762	; 0x2fa
2400299e:	4620      	mov	r0, r4
240029a0:	f008 f89c 	bl	2400aadc <HAL_SDRAM_ProgramRefreshRate>
	        //8192 is 2^numberofrows (which is 13 in the case of the sdram)

}
240029a4:	b006      	add	sp, #24
240029a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
240029aa:	bf00      	nop
240029ac:	20014938 	.word	0x20014938

240029b0 <setEffectsFunctions>:
	;
}

void setEffectsFunctions(FXType effectType, int i)
{
	effectsActive[i] = 1;
240029b0:	4ba4      	ldr	r3, [pc, #656]	; (24002c44 <setEffectsFunctions+0x294>)
240029b2:	2201      	movs	r2, #1
{
240029b4:	b410      	push	{r4}
	effectsActive[i] = 1;
240029b6:	545a      	strb	r2, [r3, r1]
	switch (effectType)
240029b8:	2813      	cmp	r0, #19
240029ba:	d829      	bhi.n	24002a10 <setEffectsFunctions+0x60>
240029bc:	e8df f010 	tbh	[pc, r0, lsl #1]
240029c0:	01d301e2 	.word	0x01d301e2
240029c4:	013c01c4 	.word	0x013c01c4
240029c8:	01260136 	.word	0x01260136
240029cc:	00140111 	.word	0x00140111
240029d0:	00f10101 	.word	0x00f10101
240029d4:	00c700da 	.word	0x00c700da
240029d8:	00a100b4 	.word	0x00a100b4
240029dc:	007a008e 	.word	0x007a008e
240029e0:	00520066 	.word	0x00520066
240029e4:	002b003e 	.word	0x002b003e
			  effectSetters[i].setParam3 = &compressorParam3;
			  effectSetters[i].setParam4 = &compressorParam4;
			  effectSetters[i].setParam5 = &compressorParam5;
			  break;
		  case Chorus:
			  effectTick[i] = &chorusTick;
240029e8:	4b97      	ldr	r3, [pc, #604]	; (24002c48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &chorusParam1;
240029ea:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &chorusTick;
240029ee:	4c97      	ldr	r4, [pc, #604]	; (24002c4c <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &chorusParam1;
240029f0:	4a97      	ldr	r2, [pc, #604]	; (24002c50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &chorusTick;
240029f2:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
240029f6:	4997      	ldr	r1, [pc, #604]	; (24002c54 <setEffectsFunctions+0x2a4>)
240029f8:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &chorusParam2;
240029fc:	4c96      	ldr	r4, [pc, #600]	; (24002c58 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &chorusParam1;
240029fe:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &chorusParam3;
24002a02:	4896      	ldr	r0, [pc, #600]	; (24002c5c <setEffectsFunctions+0x2ac>)
			  effectSetters[i].setParam4 = &chorusParam4;
24002a04:	4996      	ldr	r1, [pc, #600]	; (24002c60 <setEffectsFunctions+0x2b0>)
			  effectSetters[i].setParam5 = &blankFunction;
24002a06:	4a97      	ldr	r2, [pc, #604]	; (24002c64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam3 = &param3Hard;
24002a08:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
24002a0c:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
			  break;
		  default:
			  break;
	}
}
24002a10:	f85d 4b04 	ldr.w	r4, [sp], #4
24002a14:	4770      	bx	lr
			  effectTick[i] = &FXLadderLowpassTick;
24002a16:	4b8c      	ldr	r3, [pc, #560]	; (24002c48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002a18:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXLadderLowpassTick;
24002a1c:	4a92      	ldr	r2, [pc, #584]	; (24002c68 <setEffectsFunctions+0x2b8>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002a1e:	488c      	ldr	r0, [pc, #560]	; (24002c50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXLadderLowpassTick;
24002a20:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002a24:	4991      	ldr	r1, [pc, #580]	; (24002c6c <setEffectsFunctions+0x2bc>)
24002a26:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;;
24002a2a:	4a8e      	ldr	r2, [pc, #568]	; (24002c64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24002a2c:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24002a30:	498f      	ldr	r1, [pc, #572]	; (24002c70 <setEffectsFunctions+0x2c0>)
			  effectSetters[i].setParam2 = &blankFunction;;
24002a32:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24002a34:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
24002a36:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
24002a3a:	e7e9      	b.n	24002a10 <setEffectsFunctions+0x60>
			  effectTick[i] = FXVZbandrejectTick;
24002a3c:	4b82      	ldr	r3, [pc, #520]	; (24002c48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002a3e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZbandrejectTick;
24002a42:	4a8c      	ldr	r2, [pc, #560]	; (24002c74 <setEffectsFunctions+0x2c4>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002a44:	4882      	ldr	r0, [pc, #520]	; (24002c50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = FXVZbandrejectTick;
24002a46:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002a4a:	498b      	ldr	r1, [pc, #556]	; (24002c78 <setEffectsFunctions+0x2c8>)
24002a4c:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
24002a50:	4a84      	ldr	r2, [pc, #528]	; (24002c64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24002a52:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
24002a56:	4889      	ldr	r0, [pc, #548]	; (24002c7c <setEffectsFunctions+0x2cc>)
			  effectSetters[i].setParam3 = &FXNotchParam3;;
24002a58:	4989      	ldr	r1, [pc, #548]	; (24002c80 <setEffectsFunctions+0x2d0>)
			  effectSetters[i].setParam4 = &blankFunction;;
24002a5a:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
24002a5c:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
24002a5e:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002a62:	e7d5      	b.n	24002a10 <setEffectsFunctions+0x60>
			  effectTick[i] = FXVZhighshelfTick;
24002a64:	4b78      	ldr	r3, [pc, #480]	; (24002c48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002a66:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZhighshelfTick;
24002a6a:	4a86      	ldr	r2, [pc, #536]	; (24002c84 <setEffectsFunctions+0x2d4>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002a6c:	4878      	ldr	r0, [pc, #480]	; (24002c50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = FXVZhighshelfTick;
24002a6e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002a72:	4985      	ldr	r1, [pc, #532]	; (24002c88 <setEffectsFunctions+0x2d8>)
24002a74:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
24002a78:	4a7a      	ldr	r2, [pc, #488]	; (24002c64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24002a7a:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
24002a7e:	4883      	ldr	r0, [pc, #524]	; (24002c8c <setEffectsFunctions+0x2dc>)
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
24002a80:	4983      	ldr	r1, [pc, #524]	; (24002c90 <setEffectsFunctions+0x2e0>)
			  effectSetters[i].setParam4 = &blankFunction;;
24002a82:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
24002a84:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
24002a86:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002a8a:	e7c1      	b.n	24002a10 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXVZlowshelfTick;
24002a8c:	4b6e      	ldr	r3, [pc, #440]	; (24002c48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002a8e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZlowshelfTick;
24002a92:	4a80      	ldr	r2, [pc, #512]	; (24002c94 <setEffectsFunctions+0x2e4>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002a94:	486e      	ldr	r0, [pc, #440]	; (24002c50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXVZlowshelfTick;
24002a96:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002a9a:	497f      	ldr	r1, [pc, #508]	; (24002c98 <setEffectsFunctions+0x2e8>)
24002a9c:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24002aa0:	4a70      	ldr	r2, [pc, #448]	; (24002c64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24002aa2:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
24002aa6:	487d      	ldr	r0, [pc, #500]	; (24002c9c <setEffectsFunctions+0x2ec>)
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
24002aa8:	497d      	ldr	r1, [pc, #500]	; (24002ca0 <setEffectsFunctions+0x2f0>)
			  effectSetters[i].setParam4 = &blankFunction;
24002aaa:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002aac:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
24002aae:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002ab2:	e7ad      	b.n	24002a10 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXVZpeakTick;
24002ab4:	4b64      	ldr	r3, [pc, #400]	; (24002c48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
24002ab6:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZpeakTick;
24002aba:	4a7a      	ldr	r2, [pc, #488]	; (24002ca4 <setEffectsFunctions+0x2f4>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
24002abc:	4864      	ldr	r0, [pc, #400]	; (24002c50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXVZpeakTick;
24002abe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
24002ac2:	4979      	ldr	r1, [pc, #484]	; (24002ca8 <setEffectsFunctions+0x2f8>)
24002ac4:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24002ac8:	4a66      	ldr	r2, [pc, #408]	; (24002c64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
24002aca:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
24002ace:	4877      	ldr	r0, [pc, #476]	; (24002cac <setEffectsFunctions+0x2fc>)
			  effectSetters[i].setParam3 = &FXPeakParam3;
24002ad0:	4977      	ldr	r1, [pc, #476]	; (24002cb0 <setEffectsFunctions+0x300>)
			  effectSetters[i].setParam4 = &blankFunction;
24002ad2:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002ad4:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXPeakParam3;
24002ad6:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
24002ada:	e799      	b.n	24002a10 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXdiodeLowpassTick;
24002adc:	4b5a      	ldr	r3, [pc, #360]	; (24002c48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24002ade:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXdiodeLowpassTick;
24002ae2:	4a74      	ldr	r2, [pc, #464]	; (24002cb4 <setEffectsFunctions+0x304>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24002ae4:	485a      	ldr	r0, [pc, #360]	; (24002c50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXdiodeLowpassTick;
24002ae6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24002aea:	4973      	ldr	r1, [pc, #460]	; (24002cb8 <setEffectsFunctions+0x308>)
24002aec:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24002af0:	4a5c      	ldr	r2, [pc, #368]	; (24002c64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24002af2:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
24002af6:	4971      	ldr	r1, [pc, #452]	; (24002cbc <setEffectsFunctions+0x30c>)
			  effectSetters[i].setParam2 = &blankFunction;
24002af8:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
24002afa:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
24002afc:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002b00:	e786      	b.n	24002a10 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXbandpassTick;
24002b02:	4b51      	ldr	r3, [pc, #324]	; (24002c48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24002b04:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXbandpassTick;
24002b08:	4a6d      	ldr	r2, [pc, #436]	; (24002cc0 <setEffectsFunctions+0x310>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24002b0a:	4851      	ldr	r0, [pc, #324]	; (24002c50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXbandpassTick;
24002b0c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24002b10:	496c      	ldr	r1, [pc, #432]	; (24002cc4 <setEffectsFunctions+0x314>)
24002b12:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24002b16:	4a53      	ldr	r2, [pc, #332]	; (24002c64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24002b18:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
24002b1c:	496a      	ldr	r1, [pc, #424]	; (24002cc8 <setEffectsFunctions+0x318>)
			  effectSetters[i].setParam2 = &blankFunction;
24002b1e:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
24002b20:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
24002b22:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002b26:	e773      	b.n	24002a10 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXhighpassTick;
24002b28:	4b47      	ldr	r3, [pc, #284]	; (24002c48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002b2a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXhighpassTick;
24002b2e:	4a67      	ldr	r2, [pc, #412]	; (24002ccc <setEffectsFunctions+0x31c>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002b30:	4847      	ldr	r0, [pc, #284]	; (24002c50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXhighpassTick;
24002b32:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002b36:	4966      	ldr	r1, [pc, #408]	; (24002cd0 <setEffectsFunctions+0x320>)
24002b38:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24002b3c:	4a49      	ldr	r2, [pc, #292]	; (24002c64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24002b3e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24002b42:	4964      	ldr	r1, [pc, #400]	; (24002cd4 <setEffectsFunctions+0x324>)
			  effectSetters[i].setParam2 = &blankFunction;
24002b44:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24002b46:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
24002b48:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002b4c:	e760      	b.n	24002a10 <setEffectsFunctions+0x60>
			  effectTick[i] = &FXlowpassTick;
24002b4e:	4b3e      	ldr	r3, [pc, #248]	; (24002c48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002b50:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXlowpassTick;
24002b54:	4a60      	ldr	r2, [pc, #384]	; (24002cd8 <setEffectsFunctions+0x328>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002b56:	483e      	ldr	r0, [pc, #248]	; (24002c50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &FXlowpassTick;
24002b58:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002b5c:	495f      	ldr	r1, [pc, #380]	; (24002cdc <setEffectsFunctions+0x32c>)
24002b5e:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24002b62:	4a40      	ldr	r2, [pc, #256]	; (24002c64 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24002b64:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
24002b68:	495d      	ldr	r1, [pc, #372]	; (24002ce0 <setEffectsFunctions+0x330>)
			  effectSetters[i].setParam2 = &blankFunction;
24002b6a:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
24002b6c:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
24002b6e:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
24002b72:	e74d      	b.n	24002a10 <setEffectsFunctions+0x60>
			  effectTick[i] = &wavefolderTick;
24002b74:	4b34      	ldr	r3, [pc, #208]	; (24002c48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002b76:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &wavefolderTick;
24002b7a:	4c5a      	ldr	r4, [pc, #360]	; (24002ce4 <setEffectsFunctions+0x334>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002b7c:	4a34      	ldr	r2, [pc, #208]	; (24002c50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &wavefolderTick;
24002b7e:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002b82:	4959      	ldr	r1, [pc, #356]	; (24002ce8 <setEffectsFunctions+0x338>)
24002b84:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
24002b88:	4c58      	ldr	r4, [pc, #352]	; (24002cec <setEffectsFunctions+0x33c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24002b8a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &wavefolderParam3;
24002b8e:	4858      	ldr	r0, [pc, #352]	; (24002cf0 <setEffectsFunctions+0x340>)
			  effectSetters[i].setParam4 = &param4Linear;
24002b90:	4958      	ldr	r1, [pc, #352]	; (24002cf4 <setEffectsFunctions+0x344>)
			  effectSetters[i].setParam5 = &param5Linear;
24002b92:	4a59      	ldr	r2, [pc, #356]	; (24002cf8 <setEffectsFunctions+0x348>)
			  effectSetters[i].setParam3 = &tiltParam3;
24002b94:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5Linear;
24002b98:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
24002b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
24002ba0:	4770      	bx	lr
			  effectTick[i] = &tiltFilterTick;
24002ba2:	4b29      	ldr	r3, [pc, #164]	; (24002c48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &tiltParam1;
24002ba4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &tiltFilterTick;
24002ba8:	4c54      	ldr	r4, [pc, #336]	; (24002cfc <setEffectsFunctions+0x34c>)
			  effectSetters[i].setParam1 = &tiltParam1;
24002baa:	4a29      	ldr	r2, [pc, #164]	; (24002c50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &tiltFilterTick;
24002bac:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
24002bb0:	4953      	ldr	r1, [pc, #332]	; (24002d00 <setEffectsFunctions+0x350>)
24002bb2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &tiltParam2;
24002bb6:	4c53      	ldr	r4, [pc, #332]	; (24002d04 <setEffectsFunctions+0x354>)
			  effectSetters[i].setParam1 = &tiltParam1;
24002bb8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &tiltParam3;
24002bbc:	4852      	ldr	r0, [pc, #328]	; (24002d08 <setEffectsFunctions+0x358>)
			  effectSetters[i].setParam4 = &tiltParam4;
24002bbe:	4953      	ldr	r1, [pc, #332]	; (24002d0c <setEffectsFunctions+0x35c>)
24002bc0:	e7e7      	b.n	24002b92 <setEffectsFunctions+0x1e2>
			  effectTick[i] = &bcTick;
24002bc2:	4b21      	ldr	r3, [pc, #132]	; (24002c48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002bc4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &bcTick;
24002bc8:	4c51      	ldr	r4, [pc, #324]	; (24002d10 <setEffectsFunctions+0x360>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002bca:	4a21      	ldr	r2, [pc, #132]	; (24002c50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &bcTick;
24002bcc:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002bd0:	4950      	ldr	r1, [pc, #320]	; (24002d14 <setEffectsFunctions+0x364>)
24002bd2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &param2Linear;
24002bd6:	4c50      	ldr	r4, [pc, #320]	; (24002d18 <setEffectsFunctions+0x368>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002bd8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3BC;
24002bdc:	484f      	ldr	r0, [pc, #316]	; (24002d1c <setEffectsFunctions+0x36c>)
			  effectSetters[i].setParam4 = &param4Linear;
24002bde:	4945      	ldr	r1, [pc, #276]	; (24002cf4 <setEffectsFunctions+0x344>)
24002be0:	e7d7      	b.n	24002b92 <setEffectsFunctions+0x1e2>
			  effectTick[i] = &compressorTick;
24002be2:	4b19      	ldr	r3, [pc, #100]	; (24002c48 <setEffectsFunctions+0x298>)
			  effectSetters[i].setParam1 = &compressorParam1;
24002be4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &compressorTick;
24002be8:	4c4d      	ldr	r4, [pc, #308]	; (24002d20 <setEffectsFunctions+0x370>)
			  effectSetters[i].setParam1 = &compressorParam1;
24002bea:	4a19      	ldr	r2, [pc, #100]	; (24002c50 <setEffectsFunctions+0x2a0>)
			  effectTick[i] = &compressorTick;
24002bec:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
24002bf0:	494c      	ldr	r1, [pc, #304]	; (24002d24 <setEffectsFunctions+0x374>)
24002bf2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &compressorParam2;
24002bf6:	4c4c      	ldr	r4, [pc, #304]	; (24002d28 <setEffectsFunctions+0x378>)
			  effectSetters[i].setParam1 = &compressorParam1;
24002bf8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &compressorParam3;
24002bfc:	484b      	ldr	r0, [pc, #300]	; (24002d2c <setEffectsFunctions+0x37c>)
			  effectSetters[i].setParam4 = &compressorParam4;
24002bfe:	494c      	ldr	r1, [pc, #304]	; (24002d30 <setEffectsFunctions+0x380>)
			  effectSetters[i].setParam5 = &compressorParam5;
24002c00:	4a4c      	ldr	r2, [pc, #304]	; (24002d34 <setEffectsFunctions+0x384>)
			  effectSetters[i].setParam3 = &compressorParam3;
24002c02:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &compressorParam5;
24002c06:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
24002c0a:	e701      	b.n	24002a10 <setEffectsFunctions+0x60>
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c0c:	4a10      	ldr	r2, [pc, #64]	; (24002c50 <setEffectsFunctions+0x2a0>)
24002c0e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &shaperTick;
24002c12:	4b0d      	ldr	r3, [pc, #52]	; (24002c48 <setEffectsFunctions+0x298>)
24002c14:	4c48      	ldr	r4, [pc, #288]	; (24002d38 <setEffectsFunctions+0x388>)
			  effectTick[i] = &tanhTick;
24002c16:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c1a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
24002c1e:	493d      	ldr	r1, [pc, #244]	; (24002d14 <setEffectsFunctions+0x364>)
			  effectSetters[i].setParam2 = &offsetParam2;
24002c20:	4c32      	ldr	r4, [pc, #200]	; (24002cec <setEffectsFunctions+0x33c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c22:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3Linear;
24002c26:	4845      	ldr	r0, [pc, #276]	; (24002d3c <setEffectsFunctions+0x38c>)
			  effectSetters[i].setParam4 = &param4Linear;
24002c28:	4932      	ldr	r1, [pc, #200]	; (24002cf4 <setEffectsFunctions+0x344>)
24002c2a:	e6ec      	b.n	24002a06 <setEffectsFunctions+0x56>
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c2c:	4a08      	ldr	r2, [pc, #32]	; (24002c50 <setEffectsFunctions+0x2a0>)
24002c2e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &tanhTick;
24002c32:	4b05      	ldr	r3, [pc, #20]	; (24002c48 <setEffectsFunctions+0x298>)
24002c34:	4c42      	ldr	r4, [pc, #264]	; (24002d40 <setEffectsFunctions+0x390>)
24002c36:	e7ee      	b.n	24002c16 <setEffectsFunctions+0x266>
			  effectSetters[i].setParam1 = &clipperGainSet;
24002c38:	4a05      	ldr	r2, [pc, #20]	; (24002c50 <setEffectsFunctions+0x2a0>)
24002c3a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &satTick;
24002c3e:	4b02      	ldr	r3, [pc, #8]	; (24002c48 <setEffectsFunctions+0x298>)
24002c40:	4c40      	ldr	r4, [pc, #256]	; (24002d44 <setEffectsFunctions+0x394>)
24002c42:	e7e8      	b.n	24002c16 <setEffectsFunctions+0x266>
24002c44:	20014bac 	.word	0x20014bac
24002c48:	200050c8 	.word	0x200050c8
24002c4c:	000039a1 	.word	0x000039a1
24002c50:	20014b5c 	.word	0x20014b5c
24002c54:	000038c1 	.word	0x000038c1
24002c58:	00003901 	.word	0x00003901
24002c5c:	00003921 	.word	0x00003921
24002c60:	00003961 	.word	0x00003961
24002c64:	00005321 	.word	0x00005321
24002c68:	00003ec1 	.word	0x00003ec1
24002c6c:	000041e1 	.word	0x000041e1
24002c70:	00004441 	.word	0x00004441
24002c74:	00003ea1 	.word	0x00003ea1
24002c78:	00004181 	.word	0x00004181
24002c7c:	00004301 	.word	0x00004301
24002c80:	00004421 	.word	0x00004421
24002c84:	00003e81 	.word	0x00003e81
24002c88:	00004121 	.word	0x00004121
24002c8c:	000042c1 	.word	0x000042c1
24002c90:	00004401 	.word	0x00004401
24002c94:	00003e61 	.word	0x00003e61
24002c98:	000040c1 	.word	0x000040c1
24002c9c:	00004281 	.word	0x00004281
24002ca0:	000043e1 	.word	0x000043e1
24002ca4:	00003e41 	.word	0x00003e41
24002ca8:	00004061 	.word	0x00004061
24002cac:	00004241 	.word	0x00004241
24002cb0:	000043c1 	.word	0x000043c1
24002cb4:	00003e21 	.word	0x00003e21
24002cb8:	00004001 	.word	0x00004001
24002cbc:	000043a1 	.word	0x000043a1
24002cc0:	00003e01 	.word	0x00003e01
24002cc4:	00003fa1 	.word	0x00003fa1
24002cc8:	00004381 	.word	0x00004381
24002ccc:	00003de1 	.word	0x00003de1
24002cd0:	00003f41 	.word	0x00003f41
24002cd4:	00004361 	.word	0x00004361
24002cd8:	00003dc1 	.word	0x00003dc1
24002cdc:	00003ee1 	.word	0x00003ee1
24002ce0:	00004341 	.word	0x00004341
24002ce4:	000037a1 	.word	0x000037a1
24002ce8:	00003261 	.word	0x00003261
24002cec:	00003521 	.word	0x00003521
24002cf0:	000032a1 	.word	0x000032a1
24002cf4:	00003661 	.word	0x00003661
24002cf8:	00003681 	.word	0x00003681
24002cfc:	00003b01 	.word	0x00003b01
24002d00:	000032e1 	.word	0x000032e1
24002d04:	00003341 	.word	0x00003341
24002d08:	000033a1 	.word	0x000033a1
24002d0c:	000033e1 	.word	0x000033e1
24002d10:	00003d61 	.word	0x00003d61
24002d14:	00003221 	.word	0x00003221
24002d18:	00003541 	.word	0x00003541
24002d1c:	000036c1 	.word	0x000036c1
24002d20:	00003da1 	.word	0x00003da1
24002d24:	00003421 	.word	0x00003421
24002d28:	00003441 	.word	0x00003441
24002d2c:	00003481 	.word	0x00003481
24002d30:	000034a1 	.word	0x000034a1
24002d34:	000034e1 	.word	0x000034e1
24002d38:	00003a81 	.word	0x00003a81
24002d3c:	00003561 	.word	0x00003561
24002d40:	00003b41 	.word	0x00003b41
24002d44:	00003ce1 	.word	0x00003ce1
			  effectTick[i] = &hardClipTick;
24002d48:	4b18      	ldr	r3, [pc, #96]	; (24002dac <setEffectsFunctions+0x3fc>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002d4a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &hardClipTick;
24002d4e:	4c18      	ldr	r4, [pc, #96]	; (24002db0 <setEffectsFunctions+0x400>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002d50:	4a18      	ldr	r2, [pc, #96]	; (24002db4 <setEffectsFunctions+0x404>)
			  effectTick[i] = &hardClipTick;
24002d52:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002d56:	4918      	ldr	r1, [pc, #96]	; (24002db8 <setEffectsFunctions+0x408>)
24002d58:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
24002d5c:	4c17      	ldr	r4, [pc, #92]	; (24002dbc <setEffectsFunctions+0x40c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002d5e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3Hard;
24002d62:	4817      	ldr	r0, [pc, #92]	; (24002dc0 <setEffectsFunctions+0x410>)
24002d64:	e760      	b.n	24002c28 <setEffectsFunctions+0x278>
			  effectTick[i] = &softClipTick;
24002d66:	4b11      	ldr	r3, [pc, #68]	; (24002dac <setEffectsFunctions+0x3fc>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002d68:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &softClipTick;
24002d6c:	4c15      	ldr	r4, [pc, #84]	; (24002dc4 <setEffectsFunctions+0x414>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002d6e:	4a11      	ldr	r2, [pc, #68]	; (24002db4 <setEffectsFunctions+0x404>)
			  effectTick[i] = &softClipTick;
24002d70:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002d74:	4910      	ldr	r1, [pc, #64]	; (24002db8 <setEffectsFunctions+0x408>)
24002d76:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
24002d7a:	4c10      	ldr	r4, [pc, #64]	; (24002dbc <setEffectsFunctions+0x40c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002d7c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3Soft;
24002d80:	4811      	ldr	r0, [pc, #68]	; (24002dc8 <setEffectsFunctions+0x418>)
24002d82:	e751      	b.n	24002c28 <setEffectsFunctions+0x278>
			  effectSetters[i].setParam1 = &blankFunction;
24002d84:	4811      	ldr	r0, [pc, #68]	; (24002dcc <setEffectsFunctions+0x41c>)
24002d86:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
24002d8a:	4a0a      	ldr	r2, [pc, #40]	; (24002db4 <setEffectsFunctions+0x404>)
			  effectTick[i] = &blankTick;
24002d8c:	4c07      	ldr	r4, [pc, #28]	; (24002dac <setEffectsFunctions+0x3fc>)
			  effectSetters[i].setParam1 = &blankFunction;
24002d8e:	f842 002c 	str.w	r0, [r2, ip, lsl #2]
24002d92:	eb02 028c 	add.w	r2, r2, ip, lsl #2
			  effectSetters[i].setParam3 = &blankFunction;
24002d96:	e9c2 0001 	strd	r0, r0, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
24002d9a:	e9c2 0003 	strd	r0, r0, [r2, #12]
			  effectsActive[i] = 0;
24002d9e:	2200      	movs	r2, #0
24002da0:	545a      	strb	r2, [r3, r1]
			  effectTick[i] = &blankTick;
24002da2:	4b0b      	ldr	r3, [pc, #44]	; (24002dd0 <setEffectsFunctions+0x420>)
24002da4:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
			  break;
24002da8:	e632      	b.n	24002a10 <setEffectsFunctions+0x60>
24002daa:	bf00      	nop
24002dac:	200050c8 	.word	0x200050c8
24002db0:	00003c41 	.word	0x00003c41
24002db4:	20014b5c 	.word	0x20014b5c
24002db8:	00003221 	.word	0x00003221
24002dbc:	00003521 	.word	0x00003521
24002dc0:	000035e1 	.word	0x000035e1
24002dc4:	00003ba1 	.word	0x00003ba1
24002dc8:	00003581 	.word	0x00003581
24002dcc:	00005321 	.word	0x00005321
24002dd0:	00003ae1 	.word	0x00003ae1

24002dd4 <setFilterTypes>:
		  default:
			  break;
	}
}
void setFilterTypes(int filterType, int i)
{
24002dd4:	b410      	push	{r4}
	switch (filterType)
24002dd6:	2808      	cmp	r0, #8
24002dd8:	d812      	bhi.n	24002e00 <setFilterTypes+0x2c>
24002dda:	e8df f000 	tbb	[pc, r0]
24002dde:	3223      	.short	0x3223
24002de0:	6e5f5041 	.word	0x6e5f5041
24002de4:	057d      	.short	0x057d
24002de6:	14          	.byte	0x14
24002de7:	00          	.byte	0x00
				  filterSetters[i].setQ = &VZhighshelfSetQ;
				  filterSetters[i].setGain = &VZhighshelfSetGain;
				  break;
			  case 7:
				  filterTick[i] = &VZbandrejectTick;
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24002de8:	4b43      	ldr	r3, [pc, #268]	; (24002ef8 <setFilterTypes+0x124>)
				  filterTick[i] = &VZbandrejectTick;
24002dea:	4a44      	ldr	r2, [pc, #272]	; (24002efc <setFilterTypes+0x128>)
24002dec:	4844      	ldr	r0, [pc, #272]	; (24002f00 <setFilterTypes+0x12c>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24002dee:	4c45      	ldr	r4, [pc, #276]	; (24002f04 <setFilterTypes+0x130>)
				  filterTick[i] = &VZbandrejectTick;
24002df0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
24002df4:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002df8:	4843      	ldr	r0, [pc, #268]	; (24002f08 <setFilterTypes+0x134>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24002dfa:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
24002dfe:	6050      	str	r0, [r2, #4]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
				  break;
			  default:
				  break;
		}
}
24002e00:	f85d 4b04 	ldr.w	r4, [sp], #4
24002e04:	4770      	bx	lr
				  filterSetters[i].setQ = &LadderLowpassSetQ;
24002e06:	4b3c      	ldr	r3, [pc, #240]	; (24002ef8 <setFilterTypes+0x124>)
				  filterTick[i] = &LadderLowpassTick;
24002e08:	4a3c      	ldr	r2, [pc, #240]	; (24002efc <setFilterTypes+0x128>)
24002e0a:	4840      	ldr	r0, [pc, #256]	; (24002f0c <setFilterTypes+0x138>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
24002e0c:	4c40      	ldr	r4, [pc, #256]	; (24002f10 <setFilterTypes+0x13c>)
				  filterTick[i] = &LadderLowpassTick;
24002e0e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
24002e12:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002e16:	483f      	ldr	r0, [pc, #252]	; (24002f14 <setFilterTypes+0x140>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
24002e18:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
24002e1c:	6050      	str	r0, [r2, #4]
}
24002e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
24002e22:	4770      	bx	lr
				  filterSetters[i].setQ = &lowpassSetQ;
24002e24:	4b34      	ldr	r3, [pc, #208]	; (24002ef8 <setFilterTypes+0x124>)
				  filterTick[i] = &lowpassTick;
24002e26:	4a35      	ldr	r2, [pc, #212]	; (24002efc <setFilterTypes+0x128>)
24002e28:	483b      	ldr	r0, [pc, #236]	; (24002f18 <setFilterTypes+0x144>)
				  filterSetters[i].setQ = &lowpassSetQ;
24002e2a:	4c3c      	ldr	r4, [pc, #240]	; (24002f1c <setFilterTypes+0x148>)
				  filterTick[i] = &lowpassTick;
24002e2c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &lowpassSetGain;
24002e30:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002e34:	483a      	ldr	r0, [pc, #232]	; (24002f20 <setFilterTypes+0x14c>)
				  filterSetters[i].setQ = &lowpassSetQ;
24002e36:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
24002e3a:	6050      	str	r0, [r2, #4]
}
24002e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
24002e40:	4770      	bx	lr
				  filterSetters[i].setQ = &highpassSetQ;
24002e42:	4b2d      	ldr	r3, [pc, #180]	; (24002ef8 <setFilterTypes+0x124>)
				  filterTick[i] = &highpassTick;
24002e44:	4a2d      	ldr	r2, [pc, #180]	; (24002efc <setFilterTypes+0x128>)
24002e46:	4837      	ldr	r0, [pc, #220]	; (24002f24 <setFilterTypes+0x150>)
				  filterSetters[i].setQ = &highpassSetQ;
24002e48:	4c37      	ldr	r4, [pc, #220]	; (24002f28 <setFilterTypes+0x154>)
				  filterTick[i] = &highpassTick;
24002e4a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &highpassSetGain;
24002e4e:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002e52:	4836      	ldr	r0, [pc, #216]	; (24002f2c <setFilterTypes+0x158>)
				  filterSetters[i].setQ = &highpassSetQ;
24002e54:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
24002e58:	6050      	str	r0, [r2, #4]
}
24002e5a:	f85d 4b04 	ldr.w	r4, [sp], #4
24002e5e:	4770      	bx	lr
				  filterSetters[i].setQ = &bandpassSetQ;
24002e60:	4b25      	ldr	r3, [pc, #148]	; (24002ef8 <setFilterTypes+0x124>)
				  filterTick[i] = &bandpassTick;
24002e62:	4a26      	ldr	r2, [pc, #152]	; (24002efc <setFilterTypes+0x128>)
24002e64:	4832      	ldr	r0, [pc, #200]	; (24002f30 <setFilterTypes+0x15c>)
				  filterSetters[i].setQ = &bandpassSetQ;
24002e66:	4c33      	ldr	r4, [pc, #204]	; (24002f34 <setFilterTypes+0x160>)
				  filterTick[i] = &bandpassTick;
24002e68:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &bandpassSetGain;
24002e6c:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002e70:	4831      	ldr	r0, [pc, #196]	; (24002f38 <setFilterTypes+0x164>)
				  filterSetters[i].setQ = &bandpassSetQ;
24002e72:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
24002e76:	6050      	str	r0, [r2, #4]
}
24002e78:	f85d 4b04 	ldr.w	r4, [sp], #4
24002e7c:	4770      	bx	lr
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24002e7e:	4b1e      	ldr	r3, [pc, #120]	; (24002ef8 <setFilterTypes+0x124>)
				  filterTick[i] = &diodeLowpassTick;
24002e80:	4a1e      	ldr	r2, [pc, #120]	; (24002efc <setFilterTypes+0x128>)
24002e82:	482e      	ldr	r0, [pc, #184]	; (24002f3c <setFilterTypes+0x168>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24002e84:	4c2e      	ldr	r4, [pc, #184]	; (24002f40 <setFilterTypes+0x16c>)
				  filterTick[i] = &diodeLowpassTick;
24002e86:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
24002e8a:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002e8e:	482d      	ldr	r0, [pc, #180]	; (24002f44 <setFilterTypes+0x170>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
24002e90:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
24002e94:	6050      	str	r0, [r2, #4]
}
24002e96:	f85d 4b04 	ldr.w	r4, [sp], #4
24002e9a:	4770      	bx	lr
				  filterSetters[i].setQ = &VZpeakSetQ;
24002e9c:	4b16      	ldr	r3, [pc, #88]	; (24002ef8 <setFilterTypes+0x124>)
				  filterTick[i] = &VZpeakTick;
24002e9e:	4a17      	ldr	r2, [pc, #92]	; (24002efc <setFilterTypes+0x128>)
24002ea0:	4829      	ldr	r0, [pc, #164]	; (24002f48 <setFilterTypes+0x174>)
				  filterSetters[i].setQ = &VZpeakSetQ;
24002ea2:	4c2a      	ldr	r4, [pc, #168]	; (24002f4c <setFilterTypes+0x178>)
				  filterTick[i] = &VZpeakTick;
24002ea4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZpeakSetGain;
24002ea8:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002eac:	4828      	ldr	r0, [pc, #160]	; (24002f50 <setFilterTypes+0x17c>)
				  filterSetters[i].setQ = &VZpeakSetQ;
24002eae:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
24002eb2:	6050      	str	r0, [r2, #4]
}
24002eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
24002eb8:	4770      	bx	lr
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002eba:	4b0f      	ldr	r3, [pc, #60]	; (24002ef8 <setFilterTypes+0x124>)
				  filterTick[i] = &VZlowshelfTick;
24002ebc:	4a0f      	ldr	r2, [pc, #60]	; (24002efc <setFilterTypes+0x128>)
24002ebe:	4825      	ldr	r0, [pc, #148]	; (24002f54 <setFilterTypes+0x180>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002ec0:	4c25      	ldr	r4, [pc, #148]	; (24002f58 <setFilterTypes+0x184>)
				  filterTick[i] = &VZlowshelfTick;
24002ec2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
24002ec6:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002eca:	4824      	ldr	r0, [pc, #144]	; (24002f5c <setFilterTypes+0x188>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002ecc:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
24002ed0:	6050      	str	r0, [r2, #4]
}
24002ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
24002ed6:	4770      	bx	lr
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002ed8:	4b07      	ldr	r3, [pc, #28]	; (24002ef8 <setFilterTypes+0x124>)
				  filterTick[i] = &VZhighshelfTick;
24002eda:	4a08      	ldr	r2, [pc, #32]	; (24002efc <setFilterTypes+0x128>)
24002edc:	4820      	ldr	r0, [pc, #128]	; (24002f60 <setFilterTypes+0x18c>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002ede:	4c21      	ldr	r4, [pc, #132]	; (24002f64 <setFilterTypes+0x190>)
				  filterTick[i] = &VZhighshelfTick;
24002ee0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
24002ee4:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002ee8:	481f      	ldr	r0, [pc, #124]	; (24002f68 <setFilterTypes+0x194>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002eea:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
24002eee:	6050      	str	r0, [r2, #4]
}
24002ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
24002ef4:	4770      	bx	lr
24002ef6:	bf00      	nop
24002ef8:	20016bb0 	.word	0x20016bb0
24002efc:	20005124 	.word	0x20005124
24002f00:	00002661 	.word	0x00002661
24002f04:	000028e1 	.word	0x000028e1
24002f08:	00002ae1 	.word	0x00002ae1
24002f0c:	000026c1 	.word	0x000026c1
24002f10:	00002901 	.word	0x00002901
24002f14:	00002b21 	.word	0x00002b21
24002f18:	00002421 	.word	0x00002421
24002f1c:	00002801 	.word	0x00002801
24002f20:	00002921 	.word	0x00002921
24002f24:	00002481 	.word	0x00002481
24002f28:	00002821 	.word	0x00002821
24002f2c:	00002961 	.word	0x00002961
24002f30:	000024e1 	.word	0x000024e1
24002f34:	00002841 	.word	0x00002841
24002f38:	000029a1 	.word	0x000029a1
24002f3c:	00002541 	.word	0x00002541
24002f40:	00002861 	.word	0x00002861
24002f44:	000029e1 	.word	0x000029e1
24002f48:	000025a1 	.word	0x000025a1
24002f4c:	00002881 	.word	0x00002881
24002f50:	00002a21 	.word	0x00002a21
24002f54:	000025e1 	.word	0x000025e1
24002f58:	000028a1 	.word	0x000028a1
24002f5c:	00002a61 	.word	0x00002a61
24002f60:	00002621 	.word	0x00002621
24002f64:	000028c1 	.word	0x000028c1
24002f68:	00002aa1 	.word	0x00002aa1

24002f6c <setLFOShapes>:

void setLFOShapes(int LFOShape, int i)
{
24002f6c:	b410      	push	{r4}
	switch(LFOShape)
24002f6e:	2805      	cmp	r0, #5
24002f70:	d814      	bhi.n	24002f9c <setLFOShapes+0x30>
24002f72:	e8df f000 	tbb	[pc, r0]
24002f76:	3c29      	.short	0x3c29
24002f78:	1603624f 	.word	0x1603624f
			lfoSetters[i].setRate = &lfoTriSetRate;
			lfoSetters[i].setShape = &lfoTriSetShape;
			lfoSetters[i].setPhase = &lfoTriSetPhase;
			break;
		case SawLFOShapeSet:
			lfoShapeTick[i] = &lfoSawTick;
24002f7c:	4b38      	ldr	r3, [pc, #224]	; (24003060 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f7e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawTick;
24002f82:	4c38      	ldr	r4, [pc, #224]	; (24003064 <setLFOShapes+0xf8>)
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f84:	4a38      	ldr	r2, [pc, #224]	; (24003068 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawTick;
24002f86:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f8a:	4c38      	ldr	r4, [pc, #224]	; (2400306c <setLFOShapes+0x100>)
24002f8c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSetShape;
24002f90:	4937      	ldr	r1, [pc, #220]	; (24003070 <setLFOShapes+0x104>)
			lfoSetters[i].setRate = &lfoSawSetRate;
24002f92:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
24002f96:	4a37      	ldr	r2, [pc, #220]	; (24003074 <setLFOShapes+0x108>)
24002f98:	e9c3 1201 	strd	r1, r2, [r3, #4]
			lfoSetters[i].setRate = &lfoPulseSetRate;
			lfoSetters[i].setShape = &lfoPulseSetShape;
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
			break;
	}
}
24002f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
24002fa0:	4770      	bx	lr
			lfoShapeTick[i] = &lfoPulseTick;
24002fa2:	4b2f      	ldr	r3, [pc, #188]	; (24003060 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002fa4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoPulseTick;
24002fa8:	4c33      	ldr	r4, [pc, #204]	; (24003078 <setLFOShapes+0x10c>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002faa:	4a2f      	ldr	r2, [pc, #188]	; (24003068 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoPulseTick;
24002fac:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002fb0:	4c32      	ldr	r4, [pc, #200]	; (2400307c <setLFOShapes+0x110>)
24002fb2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoPulseSetShape;
24002fb6:	4932      	ldr	r1, [pc, #200]	; (24003080 <setLFOShapes+0x114>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002fb8:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
24002fbc:	4a31      	ldr	r2, [pc, #196]	; (24003084 <setLFOShapes+0x118>)
24002fbe:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
24002fc6:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTriTick;
24002fc8:	4b25      	ldr	r3, [pc, #148]	; (24003060 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002fca:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTriTick;
24002fce:	4c2e      	ldr	r4, [pc, #184]	; (24003088 <setLFOShapes+0x11c>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002fd0:	4a25      	ldr	r2, [pc, #148]	; (24003068 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTriTick;
24002fd2:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002fd6:	4c2d      	ldr	r4, [pc, #180]	; (2400308c <setLFOShapes+0x120>)
24002fd8:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineTriSetShape;
24002fdc:	492c      	ldr	r1, [pc, #176]	; (24003090 <setLFOShapes+0x124>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002fde:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
24002fe2:	4a2c      	ldr	r2, [pc, #176]	; (24003094 <setLFOShapes+0x128>)
24002fe4:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
24002fec:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
24002fee:	4b1c      	ldr	r3, [pc, #112]	; (24003060 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002ff0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawSquareTick;
24002ff4:	4c28      	ldr	r4, [pc, #160]	; (24003098 <setLFOShapes+0x12c>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002ff6:	4a1c      	ldr	r2, [pc, #112]	; (24003068 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawSquareTick;
24002ff8:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002ffc:	4c27      	ldr	r4, [pc, #156]	; (2400309c <setLFOShapes+0x130>)
24002ffe:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
24003002:	4927      	ldr	r1, [pc, #156]	; (240030a0 <setLFOShapes+0x134>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24003004:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
24003008:	4a26      	ldr	r2, [pc, #152]	; (240030a4 <setLFOShapes+0x138>)
2400300a:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
2400300e:	f85d 4b04 	ldr.w	r4, [sp], #4
24003012:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTick;
24003014:	4b12      	ldr	r3, [pc, #72]	; (24003060 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineSetRate;
24003016:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTick;
2400301a:	4c23      	ldr	r4, [pc, #140]	; (240030a8 <setLFOShapes+0x13c>)
			lfoSetters[i].setRate = &lfoSineSetRate;
2400301c:	4a12      	ldr	r2, [pc, #72]	; (24003068 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTick;
2400301e:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
24003022:	4c22      	ldr	r4, [pc, #136]	; (240030ac <setLFOShapes+0x140>)
24003024:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineSetShape;
24003028:	4921      	ldr	r1, [pc, #132]	; (240030b0 <setLFOShapes+0x144>)
			lfoSetters[i].setRate = &lfoSineSetRate;
2400302a:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
2400302e:	4a21      	ldr	r2, [pc, #132]	; (240030b4 <setLFOShapes+0x148>)
24003030:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24003034:	f85d 4b04 	ldr.w	r4, [sp], #4
24003038:	4770      	bx	lr
			lfoShapeTick[i] = &lfoTriTick;
2400303a:	4b09      	ldr	r3, [pc, #36]	; (24003060 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoTriSetRate;
2400303c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoTriTick;
24003040:	4c1d      	ldr	r4, [pc, #116]	; (240030b8 <setLFOShapes+0x14c>)
			lfoSetters[i].setRate = &lfoTriSetRate;
24003042:	4a09      	ldr	r2, [pc, #36]	; (24003068 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoTriTick;
24003044:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
24003048:	4c1c      	ldr	r4, [pc, #112]	; (240030bc <setLFOShapes+0x150>)
2400304a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoTriSetShape;
2400304e:	491c      	ldr	r1, [pc, #112]	; (240030c0 <setLFOShapes+0x154>)
			lfoSetters[i].setRate = &lfoTriSetRate;
24003050:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
24003054:	4a1b      	ldr	r2, [pc, #108]	; (240030c4 <setLFOShapes+0x158>)
24003056:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
2400305a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400305e:	4770      	bx	lr
24003060:	200053a8 	.word	0x200053a8
24003064:	00002f81 	.word	0x00002f81
24003068:	20018cdc 	.word	0x20018cdc
2400306c:	00003061 	.word	0x00003061
24003070:	000031e1 	.word	0x000031e1
24003074:	00003121 	.word	0x00003121
24003078:	00002fc1 	.word	0x00002fc1
2400307c:	00003081 	.word	0x00003081
24003080:	00003201 	.word	0x00003201
24003084:	00003141 	.word	0x00003141
24003088:	00002f21 	.word	0x00002f21
2400308c:	00003001 	.word	0x00003001
24003090:	00003181 	.word	0x00003181
24003094:	000030c1 	.word	0x000030c1
24003098:	00002f01 	.word	0x00002f01
2400309c:	00002fe1 	.word	0x00002fe1
240030a0:	00003161 	.word	0x00003161
240030a4:	000030a1 	.word	0x000030a1
240030a8:	00002f41 	.word	0x00002f41
240030ac:	00003021 	.word	0x00003021
240030b0:	000031a1 	.word	0x000031a1
240030b4:	000030e1 	.word	0x000030e1
240030b8:	00002f61 	.word	0x00002f61
240030bc:	00003041 	.word	0x00003041
240030c0:	000031c1 	.word	0x000031c1
240030c4:	00003101 	.word	0x00003101

240030c8 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
240030c8:	4bcf      	ldr	r3, [pc, #828]	; (24003408 <main+0x340>)
{
240030ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240030ce:	ed2d 8b02 	vpush	{d8}
240030d2:	695a      	ldr	r2, [r3, #20]
240030d4:	b091      	sub	sp, #68	; 0x44
240030d6:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
240030da:	d111      	bne.n	24003100 <main+0x38>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
240030dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240030e0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
240030e4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
240030e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240030ec:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
240030f0:	695a      	ldr	r2, [r3, #20]
240030f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
240030f6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
240030f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240030fc:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
24003100:	48c1      	ldr	r0, [pc, #772]	; (24003408 <main+0x340>)
24003102:	6943      	ldr	r3, [r0, #20]
24003104:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
24003108:	d124      	bne.n	24003154 <main+0x8c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
2400310a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
2400310e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
24003112:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24003116:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
2400311a:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
2400311e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
24003122:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24003124:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24003128:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
2400312a:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
2400312e:	3b01      	subs	r3, #1
24003130:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24003132:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
24003136:	d1f8      	bne.n	2400312a <main+0x62>
    } while(sets-- != 0U);
24003138:	3c20      	subs	r4, #32
2400313a:	f114 0f20 	cmn.w	r4, #32
2400313e:	d1f1      	bne.n	24003124 <main+0x5c>
24003140:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
24003144:	6943      	ldr	r3, [r0, #20]
24003146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400314a:	6143      	str	r3, [r0, #20]
2400314c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24003150:	f3bf 8f6f 	isb	sy

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
24003154:	2400      	movs	r4, #0
  HAL_Init();
24003156:	f001 faff 	bl	24004758 <HAL_Init>
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
2400315a:	2501      	movs	r5, #1

  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
2400315c:	2704      	movs	r7, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
2400315e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
24003162:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  HAL_MPU_Disable();
24003166:	f001 fbc5 	bl	240048f4 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
2400316a:	f248 721f 	movw	r2, #34591	; 0x871f
2400316e:	f240 1301 	movw	r3, #257	; 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003172:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
24003174:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
24003178:	930e      	str	r3, [sp, #56]	; 0x38
2400317a:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400317e:	f001 fbd7 	bl	24004930 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x024000000;
24003182:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
24003186:	4ba1      	ldr	r3, [pc, #644]	; (2400340c <main+0x344>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003188:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
2400318a:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
2400318e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
24003192:	4b9f      	ldr	r3, [pc, #636]	; (24003410 <main+0x348>)
24003194:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003196:	f001 fbcb 	bl	24004930 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
2400319a:	2202      	movs	r2, #2
  MPU_InitStruct.BaseAddress = 0x24040000;
2400319c:	4b9d      	ldr	r3, [pc, #628]	; (24003414 <main+0x34c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400319e:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
240031a0:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
240031a4:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.BaseAddress = 0x24040000;
240031a8:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240031aa:	f001 fbc1 	bl	24004930 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
240031ae:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240031b0:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
240031b2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  MPU_InitStruct.BaseAddress = 0x30000000;
240031b6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
240031ba:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
240031bc:	2312      	movs	r3, #18
240031be:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240031c2:	f001 fbb5 	bl	24004930 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
240031c6:	230c      	movs	r3, #12
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240031c8:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
240031ca:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
240031ce:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
240031d2:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
240031d6:	f8ad 5039 	strh.w	r5, [sp, #57]	; 0x39
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
240031da:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240031de:	f001 fba7 	bl	24004930 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
  MPU_InitStruct.BaseAddress = 0x38000000;
240031e2:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
240031e6:	2205      	movs	r2, #5
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240031e8:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0x38000000;
240031ea:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
240031ec:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
240031ee:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
240031f2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240031f6:	f001 fb9b 	bl	24004930 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
  MPU_InitStruct.BaseAddress = 0x38800000;
240031fa:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
240031fe:	2206      	movs	r2, #6
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003200:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0x38800000;
24003202:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
24003204:	230b      	movs	r3, #11
  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
24003206:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
2400320a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400320e:	f001 fb8f 	bl	24004930 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
  MPU_InitStruct.BaseAddress = 0xc0000000;
24003212:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
24003216:	2207      	movs	r2, #7
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003218:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0xc0000000;
2400321a:	930c      	str	r3, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
2400321c:	2319      	movs	r3, #25
  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
2400321e:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
24003222:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003226:	f001 fb83 	bl	24004930 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
2400322a:	2208      	movs	r2, #8
  MPU_InitStruct.BaseAddress = 0x90040000;
2400322c:	4b7a      	ldr	r3, [pc, #488]	; (24003418 <main+0x350>)

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400322e:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
24003230:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
  MPU_InitStruct.BaseAddress = 0x90040000;
24003234:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24003236:	f001 fb7b 	bl	24004930 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
2400323a:	4638      	mov	r0, r7
2400323c:	f001 fb68 	bl	24004910 <HAL_MPU_Enable>
  __ASM volatile ("cpsie i" : : : "memory");
24003240:	b662      	cpsie	i
  SystemClock_Config();
24003242:	f7fe ff9d 	bl	24002180 <SystemClock_Config>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
24003246:	f8df 8244 	ldr.w	r8, [pc, #580]	; 2400348c <main+0x3c4>
  PeriphCommonClock_Config();
2400324a:	f7ff f819 	bl	24002280 <PeriphCommonClock_Config>
  MX_GPIO_Init();
2400324e:	f7fe fc9d 	bl	24001b8c <MX_GPIO_Init>
  MX_DMA_Init();
24003252:	f7fe fbab 	bl	240019ac <MX_DMA_Init>
  MX_BDMA_Init();
24003256:	f7fe fadd 	bl	24001814 <MX_BDMA_Init>
  MX_I2C2_Init();
2400325a:	f7fe fe47 	bl	24001eec <MX_I2C2_Init>
  MX_SAI1_Init();
2400325e:	f000 fde9 	bl	24003e34 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
24003262:	f000 fee9 	bl	24004038 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
24003266:	f000 ff4f 	bl	24004108 <MX_SPI1_Init>
  MX_I2C1_Init();
2400326a:	f7fe fdff 	bl	24001e6c <MX_I2C1_Init>
  MX_FMC_Init();
2400326e:	f7fe fbe9 	bl	24001a44 <MX_FMC_Init>
  MX_FATFS_Init();
24003272:	f009 fb67 	bl	2400c944 <MX_FATFS_Init>
  MX_SPI6_Init();
24003276:	f000 ff73 	bl	24004160 <MX_SPI6_Init>
  MX_RNG_Init();
2400327a:	f000 fd9b 	bl	24003db4 <MX_RNG_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
2400327e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24003282:	4866      	ldr	r0, [pc, #408]	; (2400341c <main+0x354>)
24003284:	f003 f8b0 	bl	240063e8 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
24003288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
2400328c:	4606      	mov	r6, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
2400328e:	4863      	ldr	r0, [pc, #396]	; (2400341c <main+0x354>)
24003290:	f003 f8aa 	bl	240063e8 <HAL_GPIO_ReadPin>
24003294:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
24003296:	4639      	mov	r1, r7
24003298:	4861      	ldr	r0, [pc, #388]	; (24003420 <main+0x358>)
2400329a:	f003 f8a5 	bl	240063e8 <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
2400329e:	00a3      	lsls	r3, r4, #2
240032a0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
240032a4:	4418      	add	r0, r3
240032a6:	b2c4      	uxtb	r4, r0
240032a8:	f888 4000 	strb.w	r4, [r8]
	if (boardNumber == 0)
240032ac:	2c00      	cmp	r4, #0
240032ae:	f000 853b 	beq.w	24003d28 <main+0xc60>
	HAL_Delay(500);
240032b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
240032b6:	f001 fa91 	bl	240047dc <HAL_Delay>
    if (boardNumber !=0)
240032ba:	f898 3000 	ldrb.w	r3, [r8]
240032be:	2b00      	cmp	r3, #0
240032c0:	f040 852a 	bne.w	24003d18 <main+0xc50>
   PWR->CR1 |= PWR_CR1_DBP;
240032c4:	4a57      	ldr	r2, [pc, #348]	; (24003424 <main+0x35c>)
240032c6:	6813      	ldr	r3, [r2, #0]
240032c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240032cc:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
240032ce:	6813      	ldr	r3, [r2, #0]
240032d0:	05d9      	lsls	r1, r3, #23
240032d2:	d5fc      	bpl.n	240032ce <main+0x206>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
240032d4:	4b54      	ldr	r3, [pc, #336]	; (24003428 <main+0x360>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
240032d6:	2200      	movs	r2, #0
240032d8:	2180      	movs	r1, #128	; 0x80
   __HAL_RCC_BKPRAM_CLK_ENABLE();
240032da:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
240032de:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
240032e2:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
240032e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
240032ea:	4850      	ldr	r0, [pc, #320]	; (2400342c <main+0x364>)
   __HAL_RCC_BKPRAM_CLK_ENABLE();
240032ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
240032f0:	9306      	str	r3, [sp, #24]
240032f2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
240032f4:	f003 f87e 	bl	240063f4 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
240032f8:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
240032fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
24003300:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24003304:	4940      	ldr	r1, [pc, #256]	; (24003408 <main+0x340>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
24003306:	4a4a      	ldr	r2, [pc, #296]	; (24003430 <main+0x368>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24003308:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
2400330c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24003310:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
24003314:	f8d2 3fb4 	ldr.w	r3, [r2, #4020]	; 0xfb4
24003318:	07db      	lsls	r3, r3, #31
2400331a:	d502      	bpl.n	24003322 <main+0x25a>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
2400331c:	4b45      	ldr	r3, [pc, #276]	; (24003434 <main+0x36c>)
2400331e:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
24003322:	4b43      	ldr	r3, [pc, #268]	; (24003430 <main+0x368>)
24003324:	2100      	movs	r1, #0
  DWT->CTRL = 0x40000001;
24003326:	4a44      	ldr	r2, [pc, #272]	; (24003438 <main+0x370>)
	  buffer[i] = 0;
24003328:	4c44      	ldr	r4, [pc, #272]	; (2400343c <main+0x374>)
  DWT->CYCCNT = 0;
2400332a:	6059      	str	r1, [r3, #4]
	  SPI_PLUCK_TX[i] = 0;
2400332c:	4844      	ldr	r0, [pc, #272]	; (24003440 <main+0x378>)
  DWT->CTRL = 0x40000001;
2400332e:	601a      	str	r2, [r3, #0]
	  SPI_PLUCK_TX[i] = 0;
24003330:	2240      	movs	r2, #64	; 0x40
24003332:	f011 fd63 	bl	24014dfc <memset>
	  buffer[i] = 0;
24003336:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400333a:	2100      	movs	r1, #0
2400333c:	4620      	mov	r0, r4
2400333e:	f011 fd5d 	bl	24014dfc <memset>
  buffer[15+112] = NUM_PARAMS;
24003342:	239c      	movs	r3, #156	; 0x9c
  buffer[NUM_PARAMS*2+16+112] = 0xef;
24003344:	f64e 72ef 	movw	r2, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24003348:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15+112] = NUM_PARAMS;
2400334c:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
  buffer[NUM_PARAMS*2+19+112] = 1;
24003350:	2301      	movs	r3, #1
  buffer[NUM_PARAMS*2+16+112] = 0xef;
24003352:	f8a4 21b8 	strh.w	r2, [r4, #440]	; 0x1b8
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24003356:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+19+112] = 1;
2400335a:	f884 31bb 	strb.w	r3, [r4, #443]	; 0x1bb
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
2400335e:	f64f 63fe 	movw	r3, #65278	; 0xfefe
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24003362:	ed9f 0a38 	vldr	s0, [pc, #224]	; 24003444 <main+0x37c>
24003366:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
2400336a:	f8a4 31c1 	strh.w	r3, [r4, #449]	; 0x1c1
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
2400336e:	2403      	movs	r4, #3
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
24003370:	4835      	ldr	r0, [pc, #212]	; (24003448 <main+0x380>)
24003372:	f00e ff81 	bl	24012278 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
24003376:	f44f 6100 	mov.w	r1, #2048	; 0x800
2400337a:	ed9f 1a34 	vldr	s2, [pc, #208]	; 2400344c <main+0x384>
2400337e:	eddf 0a34 	vldr	s1, [pc, #208]	; 24003450 <main+0x388>
24003382:	ed9f 0a34 	vldr	s0, [pc, #208]	; 24003454 <main+0x38c>
24003386:	4834      	ldr	r0, [pc, #208]	; (24003458 <main+0x390>)
24003388:	f00e ff76 	bl	24012278 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
2400338c:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
24003390:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
24003394:	f44f 6100 	mov.w	r1, #2048	; 0x800
24003398:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 24003454 <main+0x38c>
2400339c:	482f      	ldr	r0, [pc, #188]	; (2400345c <main+0x394>)
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
2400339e:	4d20      	ldr	r5, [pc, #128]	; (24003420 <main+0x358>)
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
240033a0:	f00e ff6a 	bl	24012278 <LEAF_generate_table_skew_non_sym>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
240033a4:	2201      	movs	r2, #1
240033a6:	4628      	mov	r0, r5
240033a8:	4611      	mov	r1, r2
240033aa:	f003 f823 	bl	240063f4 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
240033ae:	200a      	movs	r0, #10
240033b0:	f001 fa14 	bl	240047dc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
240033b4:	4628      	mov	r0, r5
240033b6:	2200      	movs	r2, #0
240033b8:	2101      	movs	r1, #1
240033ba:	f003 f81b 	bl	240063f4 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
240033be:	200a      	movs	r0, #10
240033c0:	f001 fa0c 	bl	240047dc <HAL_Delay>
  for (int i = 0; i < 3; i++)
240033c4:	3c01      	subs	r4, #1
240033c6:	d1ed      	bne.n	240033a4 <main+0x2dc>
  if (boardNumber == 0)
240033c8:	f898 3000 	ldrb.w	r3, [r8]
240033cc:	2b00      	cmp	r3, #0
240033ce:	f000 849f 	beq.w	24003d10 <main+0xc48>
	  diskBusy = 1;
240033d2:	2301      	movs	r3, #1
240033d4:	4a22      	ldr	r2, [pc, #136]	; (24003460 <main+0x398>)
  specialModeNames[0] = "PHYS STR1     ";
240033d6:	4d23      	ldr	r5, [pc, #140]	; (24003464 <main+0x39c>)
  specialModeMacroNames[2][11] = "         ";
240033d8:	243f      	movs	r4, #63	; 0x3f
	  diskBusy = 1;
240033da:	7013      	strb	r3, [r2, #0]
  SDRAM_init();
240033dc:	f7ff faa0 	bl	24002920 <SDRAM_init>
  codec_init(&hi2c2);
240033e0:	4821      	ldr	r0, [pc, #132]	; (24003468 <main+0x3a0>)
240033e2:	f7fe fa3b 	bl	2400185c <codec_init>
  audioInit();
240033e6:	4f21      	ldr	r7, [pc, #132]	; (2400346c <main+0x3a4>)
240033e8:	f7fd f93a 	bl	24000660 <audioInit>
  specialModeNames[0] = "PHYS STR1     ";
240033ec:	4b20      	ldr	r3, [pc, #128]	; (24003470 <main+0x3a8>)
  specialModeMacroNames[1][3] = "Decay     ";
240033ee:	4821      	ldr	r0, [pc, #132]	; (24003474 <main+0x3ac>)
  specialModeNames[0] = "PHYS STR1     ";
240033f0:	602b      	str	r3, [r5, #0]
  specialModeMacroNames[0][0] = "Feedback  ";
240033f2:	4b21      	ldr	r3, [pc, #132]	; (24003478 <main+0x3b0>)
  specialModeMacroNames[0][5] = "          ";
240033f4:	4a21      	ldr	r2, [pc, #132]	; (2400347c <main+0x3b4>)
  specialModeMacroNames[1][3] = "Decay     ";
240033f6:	63d8      	str	r0, [r3, #60]	; 0x3c
  specialModeMacroNames[2][3] = "Decay     ";
240033f8:	66d8      	str	r0, [r3, #108]	; 0x6c
  specialModeMacroNames[1][5] = "Noise1    ";
240033fa:	4821      	ldr	r0, [pc, #132]	; (24003480 <main+0x3b8>)
  specialModeMacroNames[0][10] = "         ";
240033fc:	4921      	ldr	r1, [pc, #132]	; (24003484 <main+0x3bc>)
  specialModeMacroNames[1][5] = "Noise1    ";
240033fe:	6458      	str	r0, [r3, #68]	; 0x44
  specialModeMacroNames[2][0] = "Noise1    ";
24003400:	6618      	str	r0, [r3, #96]	; 0x60
  specialModeMacroNames[1][6] = "Noise2    ";
24003402:	4821      	ldr	r0, [pc, #132]	; (24003488 <main+0x3c0>)
  specialModeMacroNames[0][9] = "          ";
24003404:	625a      	str	r2, [r3, #36]	; 0x24
24003406:	e043      	b.n	24003490 <main+0x3c8>
24003408:	e000ed00 	.word	0xe000ed00
2400340c:	03010011 	.word	0x03010011
24003410:	01010000 	.word	0x01010000
24003414:	24040000 	.word	0x24040000
24003418:	90040000 	.word	0x90040000
2400341c:	58020400 	.word	0x58020400
24003420:	58020000 	.word	0x58020000
24003424:	58024800 	.word	0x58024800
24003428:	58024400 	.word	0x58024400
2400342c:	58020800 	.word	0x58020800
24003430:	e0001000 	.word	0xe0001000
24003434:	c5acce55 	.word	0xc5acce55
24003438:	40000001 	.word	0x40000001
2400343c:	30032380 	.word	0x30032380
24003440:	38000000 	.word	0x38000000
24003444:	3c23d70a 	.word	0x3c23d70a
24003448:	2001aeb0 	.word	0x2001aeb0
2400344c:	457a0000 	.word	0x457a0000
24003450:	469c4000 	.word	0x469c4000
24003454:	00000000 	.word	0x00000000
24003458:	20014bb0 	.word	0x20014bb0
2400345c:	20016cdc 	.word	0x20016cdc
24003460:	20014b58 	.word	0x20014b58
24003464:	2001cf40 	.word	0x2001cf40
24003468:	20014ab0 	.word	0x20014ab0
2400346c:	30032000 	.word	0x30032000
24003470:	2401738c 	.word	0x2401738c
24003474:	24017424 	.word	0x24017424
24003478:	2001ceb0 	.word	0x2001ceb0
2400347c:	240173d8 	.word	0x240173d8
24003480:	2401743c 	.word	0x2401743c
24003484:	240173e4 	.word	0x240173e4
24003488:	24017448 	.word	0x24017448
2400348c:	20014b05 	.word	0x20014b05
  specialModeMacroNames[1][6] = "Noise2    ";
24003490:	6498      	str	r0, [r3, #72]	; 0x48
  specialModeMacroNames[2][1] = "Noise2    ";
24003492:	6658      	str	r0, [r3, #100]	; 0x64
  specialModeMacroNames[0][0] = "Feedback  ";
24003494:	4819      	ldr	r0, [pc, #100]	; (240034fc <main+0x434>)
24003496:	4e1a      	ldr	r6, [pc, #104]	; (24003500 <main+0x438>)
24003498:	6018      	str	r0, [r3, #0]
  specialModeMacroNames[0][1] = "SlideNois ";
2400349a:	481a      	ldr	r0, [pc, #104]	; (24003504 <main+0x43c>)
2400349c:	6058      	str	r0, [r3, #4]
  specialModeMacroNames[0][2] = "PluckWidt ";
2400349e:	481a      	ldr	r0, [pc, #104]	; (24003508 <main+0x440>)
240034a0:	6098      	str	r0, [r3, #8]
  specialModeMacroNames[0][3] = "PickNoise ";
240034a2:	481a      	ldr	r0, [pc, #104]	; (2400350c <main+0x444>)
240034a4:	60d8      	str	r0, [r3, #12]
  specialModeMacroNames[0][4] = "PickupSim";
240034a6:	481a      	ldr	r0, [pc, #104]	; (24003510 <main+0x448>)
240034a8:	6118      	str	r0, [r3, #16]
  specialModeNames[1] = "PHYS STR2     ";
240034aa:	481a      	ldr	r0, [pc, #104]	; (24003514 <main+0x44c>)
240034ac:	6068      	str	r0, [r5, #4]
  specialModeMacroNames[1][0] = "FBLev On  ";
240034ae:	481a      	ldr	r0, [pc, #104]	; (24003518 <main+0x450>)
240034b0:	6318      	str	r0, [r3, #48]	; 0x30
  specialModeMacroNames[1][1] = "TargetLev ";
240034b2:	481a      	ldr	r0, [pc, #104]	; (2400351c <main+0x454>)
240034b4:	6358      	str	r0, [r3, #52]	; 0x34
  specialModeMacroNames[1][2] = "PickPos   ";
240034b6:	481a      	ldr	r0, [pc, #104]	; (24003520 <main+0x458>)
240034b8:	6398      	str	r0, [r3, #56]	; 0x38
  specialModeMacroNames[1][4] = "Touch     ";
240034ba:	481a      	ldr	r0, [pc, #104]	; (24003524 <main+0x45c>)
240034bc:	6418      	str	r0, [r3, #64]	; 0x40
  specialModeMacroNames[1][7] = "LevSmooth ";
240034be:	481a      	ldr	r0, [pc, #104]	; (24003528 <main+0x460>)
240034c0:	64d8      	str	r0, [r3, #76]	; 0x4c
  specialModeNames[2] = "ADDITIVE      ";
240034c2:	481a      	ldr	r0, [pc, #104]	; (2400352c <main+0x464>)
240034c4:	60a8      	str	r0, [r5, #8]
  specialModeMacroNames[2][2] = "Tone      ";
240034c6:	481a      	ldr	r0, [pc, #104]	; (24003530 <main+0x468>)
240034c8:	6698      	str	r0, [r3, #104]	; 0x68
  specialModeMacroNames[2][4] = "Stretch   ";
240034ca:	481a      	ldr	r0, [pc, #104]	; (24003534 <main+0x46c>)
240034cc:	6718      	str	r0, [r3, #112]	; 0x70
  specialModeMacroNames[2][5] = "RandDecy  ";
240034ce:	481a      	ldr	r0, [pc, #104]	; (24003538 <main+0x470>)
  specialModeMacroNames[0][6] = "          ";
240034d0:	e9c3 2205 	strd	r2, r2, [r3, #20]
  specialModeMacroNames[0][8] = "          ";
240034d4:	e9c3 2207 	strd	r2, r2, [r3, #28]
  specialModeMacroNames[1][9] = "          ";
240034d8:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
  specialModeMacroNames[0][11] = "         ";
240034dc:	e9c3 110a 	strd	r1, r1, [r3, #40]	; 0x28
  specialModeMacroNames[1][11] = "         ";
240034e0:	e9c3 1116 	strd	r1, r1, [r3, #88]	; 0x58
  specialModeMacroNames[2][5] = "RandDecy  ";
240034e4:	6758      	str	r0, [r3, #116]	; 0x74
  specialModeMacroNames[2][11] = "         ";
240034e6:	2050      	movs	r0, #80	; 0x50
  specialModeMacroNames[2][9] = "          ";
240034e8:	e9c3 2220 	strd	r2, r2, [r3, #128]	; 0x80
  specialModeMacroNames[2][6] = "RandGain  ";
240034ec:	4a13      	ldr	r2, [pc, #76]	; (2400353c <main+0x474>)
240034ee:	679a      	str	r2, [r3, #120]	; 0x78
  specialModeMacroNames[2][7] = "NoiseVol  ";
240034f0:	4a13      	ldr	r2, [pc, #76]	; (24003540 <main+0x478>)
240034f2:	67da      	str	r2, [r3, #124]	; 0x7c
  for (int i = 0; i < 3; i++)
240034f4:	461a      	mov	r2, r3
  specialModeMacroNames[2][11] = "         ";
240034f6:	e9c3 1122 	strd	r1, r1, [r3, #136]	; 0x88
240034fa:	e023      	b.n	24003544 <main+0x47c>
240034fc:	2401739c 	.word	0x2401739c
24003500:	30033380 	.word	0x30033380
24003504:	240173a8 	.word	0x240173a8
24003508:	240173b4 	.word	0x240173b4
2400350c:	240173c0 	.word	0x240173c0
24003510:	240173cc 	.word	0x240173cc
24003514:	240173f0 	.word	0x240173f0
24003518:	24017400 	.word	0x24017400
2400351c:	2401740c 	.word	0x2401740c
24003520:	24017418 	.word	0x24017418
24003524:	24017430 	.word	0x24017430
24003528:	24017454 	.word	0x24017454
2400352c:	24017460 	.word	0x24017460
24003530:	24017470 	.word	0x24017470
24003534:	2401747c 	.word	0x2401747c
24003538:	24017488 	.word	0x24017488
2400353c:	24017494 	.word	0x24017494
24003540:	240174a0 	.word	0x240174a0
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24003544:	f855 1b04 	ldr.w	r1, [r5], #4
24003548:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
2400354c:	f8d2 c000 	ldr.w	ip, [r2]
  for (int i = 0; i < 3; i++)
24003550:	3230      	adds	r2, #48	; 0x30
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24003552:	f807 0013 	strb.w	r0, [r7, r3, lsl #1]
24003556:	eb07 0343 	add.w	r3, r7, r3, lsl #1
2400355a:	7848      	ldrb	r0, [r1, #1]
2400355c:	7058      	strb	r0, [r3, #1]
2400355e:	7888      	ldrb	r0, [r1, #2]
24003560:	7098      	strb	r0, [r3, #2]
24003562:	78c8      	ldrb	r0, [r1, #3]
24003564:	70d8      	strb	r0, [r3, #3]
24003566:	7908      	ldrb	r0, [r1, #4]
24003568:	7118      	strb	r0, [r3, #4]
2400356a:	7948      	ldrb	r0, [r1, #5]
2400356c:	7158      	strb	r0, [r3, #5]
2400356e:	7988      	ldrb	r0, [r1, #6]
24003570:	7198      	strb	r0, [r3, #6]
24003572:	79c8      	ldrb	r0, [r1, #7]
24003574:	71d8      	strb	r0, [r3, #7]
24003576:	7a08      	ldrb	r0, [r1, #8]
24003578:	7218      	strb	r0, [r3, #8]
2400357a:	7a48      	ldrb	r0, [r1, #9]
2400357c:	7258      	strb	r0, [r3, #9]
2400357e:	7a88      	ldrb	r0, [r1, #10]
24003580:	7298      	strb	r0, [r3, #10]
24003582:	7ac8      	ldrb	r0, [r1, #11]
24003584:	72d8      	strb	r0, [r3, #11]
24003586:	7b08      	ldrb	r0, [r1, #12]
24003588:	7318      	strb	r0, [r3, #12]
2400358a:	7b49      	ldrb	r1, [r1, #13]
2400358c:	7359      	strb	r1, [r3, #13]
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
2400358e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
24003592:	f89c 1000 	ldrb.w	r1, [ip]
  for (int i = 0; i < 3; i++)
24003596:	3c01      	subs	r4, #1
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24003598:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
2400359c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
240035a0:	f89c 1001 	ldrb.w	r1, [ip, #1]
  for (int i = 0; i < 3; i++)
240035a4:	2c3c      	cmp	r4, #60	; 0x3c
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
240035a6:	7059      	strb	r1, [r3, #1]
240035a8:	f89c 1002 	ldrb.w	r1, [ip, #2]
240035ac:	f852 0c2c 	ldr.w	r0, [r2, #-44]
240035b0:	7099      	strb	r1, [r3, #2]
240035b2:	f89c 1003 	ldrb.w	r1, [ip, #3]
240035b6:	70d9      	strb	r1, [r3, #3]
240035b8:	f89c 1004 	ldrb.w	r1, [ip, #4]
240035bc:	7119      	strb	r1, [r3, #4]
240035be:	f89c 1005 	ldrb.w	r1, [ip, #5]
240035c2:	7159      	strb	r1, [r3, #5]
240035c4:	f89c 1006 	ldrb.w	r1, [ip, #6]
240035c8:	7199      	strb	r1, [r3, #6]
240035ca:	f89c 1007 	ldrb.w	r1, [ip, #7]
240035ce:	71d9      	strb	r1, [r3, #7]
240035d0:	f89c 1008 	ldrb.w	r1, [ip, #8]
240035d4:	7219      	strb	r1, [r3, #8]
240035d6:	f89c 1009 	ldrb.w	r1, [ip, #9]
240035da:	7259      	strb	r1, [r3, #9]
240035dc:	7801      	ldrb	r1, [r0, #0]
240035de:	7299      	strb	r1, [r3, #10]
240035e0:	7841      	ldrb	r1, [r0, #1]
240035e2:	72d9      	strb	r1, [r3, #11]
240035e4:	7881      	ldrb	r1, [r0, #2]
240035e6:	7319      	strb	r1, [r3, #12]
240035e8:	78c1      	ldrb	r1, [r0, #3]
240035ea:	7359      	strb	r1, [r3, #13]
240035ec:	7901      	ldrb	r1, [r0, #4]
240035ee:	7399      	strb	r1, [r3, #14]
240035f0:	7941      	ldrb	r1, [r0, #5]
240035f2:	73d9      	strb	r1, [r3, #15]
240035f4:	7981      	ldrb	r1, [r0, #6]
240035f6:	7419      	strb	r1, [r3, #16]
240035f8:	79c1      	ldrb	r1, [r0, #7]
240035fa:	7459      	strb	r1, [r3, #17]
240035fc:	7a01      	ldrb	r1, [r0, #8]
240035fe:	7499      	strb	r1, [r3, #18]
24003600:	f852 1c28 	ldr.w	r1, [r2, #-40]
24003604:	7a40      	ldrb	r0, [r0, #9]
24003606:	74d8      	strb	r0, [r3, #19]
24003608:	7808      	ldrb	r0, [r1, #0]
2400360a:	7518      	strb	r0, [r3, #20]
2400360c:	7848      	ldrb	r0, [r1, #1]
2400360e:	7558      	strb	r0, [r3, #21]
24003610:	7888      	ldrb	r0, [r1, #2]
24003612:	7598      	strb	r0, [r3, #22]
24003614:	78c8      	ldrb	r0, [r1, #3]
24003616:	75d8      	strb	r0, [r3, #23]
24003618:	7908      	ldrb	r0, [r1, #4]
2400361a:	7618      	strb	r0, [r3, #24]
2400361c:	7948      	ldrb	r0, [r1, #5]
2400361e:	7658      	strb	r0, [r3, #25]
24003620:	7988      	ldrb	r0, [r1, #6]
24003622:	7698      	strb	r0, [r3, #26]
24003624:	79c8      	ldrb	r0, [r1, #7]
24003626:	76d8      	strb	r0, [r3, #27]
24003628:	7a08      	ldrb	r0, [r1, #8]
2400362a:	7718      	strb	r0, [r3, #28]
2400362c:	f852 0c24 	ldr.w	r0, [r2, #-36]
24003630:	7a49      	ldrb	r1, [r1, #9]
24003632:	7759      	strb	r1, [r3, #29]
24003634:	7801      	ldrb	r1, [r0, #0]
24003636:	7799      	strb	r1, [r3, #30]
24003638:	7841      	ldrb	r1, [r0, #1]
2400363a:	77d9      	strb	r1, [r3, #31]
2400363c:	7881      	ldrb	r1, [r0, #2]
2400363e:	f883 1020 	strb.w	r1, [r3, #32]
24003642:	78c1      	ldrb	r1, [r0, #3]
24003644:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
24003648:	7901      	ldrb	r1, [r0, #4]
2400364a:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
2400364e:	7941      	ldrb	r1, [r0, #5]
24003650:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
24003654:	7981      	ldrb	r1, [r0, #6]
24003656:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
2400365a:	79c1      	ldrb	r1, [r0, #7]
2400365c:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
24003660:	7a01      	ldrb	r1, [r0, #8]
24003662:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
24003666:	f852 1c20 	ldr.w	r1, [r2, #-32]
2400366a:	7a40      	ldrb	r0, [r0, #9]
2400366c:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
24003670:	7808      	ldrb	r0, [r1, #0]
24003672:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
24003676:	7848      	ldrb	r0, [r1, #1]
24003678:	f883 0029 	strb.w	r0, [r3, #41]	; 0x29
2400367c:	7888      	ldrb	r0, [r1, #2]
2400367e:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
24003682:	78c8      	ldrb	r0, [r1, #3]
24003684:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
24003688:	7908      	ldrb	r0, [r1, #4]
2400368a:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
2400368e:	7948      	ldrb	r0, [r1, #5]
24003690:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
24003694:	7988      	ldrb	r0, [r1, #6]
24003696:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
2400369a:	79c8      	ldrb	r0, [r1, #7]
2400369c:	f883 002f 	strb.w	r0, [r3, #47]	; 0x2f
240036a0:	7a08      	ldrb	r0, [r1, #8]
240036a2:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
240036a6:	7a48      	ldrb	r0, [r1, #9]
240036a8:	f852 1c1c 	ldr.w	r1, [r2, #-28]
240036ac:	f883 0031 	strb.w	r0, [r3, #49]	; 0x31
240036b0:	f891 c000 	ldrb.w	ip, [r1]
240036b4:	f852 0c18 	ldr.w	r0, [r2, #-24]
240036b8:	f883 c032 	strb.w	ip, [r3, #50]	; 0x32
240036bc:	f891 c001 	ldrb.w	ip, [r1, #1]
240036c0:	f883 c033 	strb.w	ip, [r3, #51]	; 0x33
240036c4:	f891 c002 	ldrb.w	ip, [r1, #2]
240036c8:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
240036cc:	f891 c003 	ldrb.w	ip, [r1, #3]
240036d0:	f883 c035 	strb.w	ip, [r3, #53]	; 0x35
240036d4:	f891 c004 	ldrb.w	ip, [r1, #4]
240036d8:	f883 c036 	strb.w	ip, [r3, #54]	; 0x36
240036dc:	f891 c005 	ldrb.w	ip, [r1, #5]
240036e0:	f883 c037 	strb.w	ip, [r3, #55]	; 0x37
240036e4:	f891 c006 	ldrb.w	ip, [r1, #6]
240036e8:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
240036ec:	f891 c007 	ldrb.w	ip, [r1, #7]
240036f0:	f883 c039 	strb.w	ip, [r3, #57]	; 0x39
240036f4:	f891 c008 	ldrb.w	ip, [r1, #8]
240036f8:	f883 c03a 	strb.w	ip, [r3, #58]	; 0x3a
240036fc:	7a49      	ldrb	r1, [r1, #9]
240036fe:	f883 103b 	strb.w	r1, [r3, #59]	; 0x3b
24003702:	7801      	ldrb	r1, [r0, #0]
24003704:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
24003708:	7841      	ldrb	r1, [r0, #1]
2400370a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
2400370e:	7881      	ldrb	r1, [r0, #2]
24003710:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
24003714:	78c1      	ldrb	r1, [r0, #3]
24003716:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
2400371a:	7901      	ldrb	r1, [r0, #4]
2400371c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
24003720:	7941      	ldrb	r1, [r0, #5]
24003722:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
24003726:	7981      	ldrb	r1, [r0, #6]
24003728:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
2400372c:	79c1      	ldrb	r1, [r0, #7]
2400372e:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
24003732:	7a01      	ldrb	r1, [r0, #8]
24003734:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
24003738:	f852 1c14 	ldr.w	r1, [r2, #-20]
2400373c:	7a40      	ldrb	r0, [r0, #9]
2400373e:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
24003742:	7808      	ldrb	r0, [r1, #0]
24003744:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
24003748:	7848      	ldrb	r0, [r1, #1]
2400374a:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
2400374e:	7888      	ldrb	r0, [r1, #2]
24003750:	f883 0048 	strb.w	r0, [r3, #72]	; 0x48
24003754:	78c8      	ldrb	r0, [r1, #3]
24003756:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
2400375a:	7908      	ldrb	r0, [r1, #4]
2400375c:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
24003760:	7948      	ldrb	r0, [r1, #5]
24003762:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
24003766:	7988      	ldrb	r0, [r1, #6]
24003768:	f883 004c 	strb.w	r0, [r3, #76]	; 0x4c
2400376c:	79c8      	ldrb	r0, [r1, #7]
2400376e:	f883 004d 	strb.w	r0, [r3, #77]	; 0x4d
24003772:	7a08      	ldrb	r0, [r1, #8]
24003774:	f883 004e 	strb.w	r0, [r3, #78]	; 0x4e
24003778:	7a49      	ldrb	r1, [r1, #9]
2400377a:	f883 104f 	strb.w	r1, [r3, #79]	; 0x4f
2400377e:	f852 0c10 	ldr.w	r0, [r2, #-16]
24003782:	7801      	ldrb	r1, [r0, #0]
24003784:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
24003788:	7841      	ldrb	r1, [r0, #1]
2400378a:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
2400378e:	7881      	ldrb	r1, [r0, #2]
24003790:	f883 1052 	strb.w	r1, [r3, #82]	; 0x52
24003794:	78c1      	ldrb	r1, [r0, #3]
24003796:	f883 1053 	strb.w	r1, [r3, #83]	; 0x53
2400379a:	7901      	ldrb	r1, [r0, #4]
2400379c:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
240037a0:	7941      	ldrb	r1, [r0, #5]
240037a2:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
240037a6:	7981      	ldrb	r1, [r0, #6]
240037a8:	f883 1056 	strb.w	r1, [r3, #86]	; 0x56
240037ac:	79c1      	ldrb	r1, [r0, #7]
240037ae:	f883 1057 	strb.w	r1, [r3, #87]	; 0x57
240037b2:	7a01      	ldrb	r1, [r0, #8]
240037b4:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
240037b8:	f852 1c0c 	ldr.w	r1, [r2, #-12]
240037bc:	7a40      	ldrb	r0, [r0, #9]
240037be:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
240037c2:	7808      	ldrb	r0, [r1, #0]
240037c4:	f883 005a 	strb.w	r0, [r3, #90]	; 0x5a
240037c8:	7848      	ldrb	r0, [r1, #1]
240037ca:	f883 005b 	strb.w	r0, [r3, #91]	; 0x5b
240037ce:	7888      	ldrb	r0, [r1, #2]
240037d0:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
240037d4:	78c8      	ldrb	r0, [r1, #3]
240037d6:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
240037da:	7908      	ldrb	r0, [r1, #4]
240037dc:	f883 005e 	strb.w	r0, [r3, #94]	; 0x5e
240037e0:	7948      	ldrb	r0, [r1, #5]
240037e2:	f883 005f 	strb.w	r0, [r3, #95]	; 0x5f
240037e6:	7988      	ldrb	r0, [r1, #6]
240037e8:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
240037ec:	79c8      	ldrb	r0, [r1, #7]
240037ee:	f883 0061 	strb.w	r0, [r3, #97]	; 0x61
240037f2:	7a08      	ldrb	r0, [r1, #8]
240037f4:	f883 0062 	strb.w	r0, [r3, #98]	; 0x62
240037f8:	f852 0c08 	ldr.w	r0, [r2, #-8]
240037fc:	7a49      	ldrb	r1, [r1, #9]
240037fe:	f883 1063 	strb.w	r1, [r3, #99]	; 0x63
24003802:	7801      	ldrb	r1, [r0, #0]
24003804:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
24003808:	7841      	ldrb	r1, [r0, #1]
2400380a:	f883 1065 	strb.w	r1, [r3, #101]	; 0x65
2400380e:	7881      	ldrb	r1, [r0, #2]
24003810:	f883 1066 	strb.w	r1, [r3, #102]	; 0x66
24003814:	78c1      	ldrb	r1, [r0, #3]
24003816:	f883 1067 	strb.w	r1, [r3, #103]	; 0x67
2400381a:	7901      	ldrb	r1, [r0, #4]
2400381c:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
24003820:	7941      	ldrb	r1, [r0, #5]
24003822:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
24003826:	7981      	ldrb	r1, [r0, #6]
24003828:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
2400382c:	79c1      	ldrb	r1, [r0, #7]
2400382e:	f883 106b 	strb.w	r1, [r3, #107]	; 0x6b
24003832:	7a01      	ldrb	r1, [r0, #8]
24003834:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
24003838:	f852 1c04 	ldr.w	r1, [r2, #-4]
2400383c:	7a40      	ldrb	r0, [r0, #9]
2400383e:	f883 006d 	strb.w	r0, [r3, #109]	; 0x6d
24003842:	7808      	ldrb	r0, [r1, #0]
24003844:	f883 006e 	strb.w	r0, [r3, #110]	; 0x6e
24003848:	7848      	ldrb	r0, [r1, #1]
2400384a:	f883 006f 	strb.w	r0, [r3, #111]	; 0x6f
2400384e:	7888      	ldrb	r0, [r1, #2]
24003850:	f883 0070 	strb.w	r0, [r3, #112]	; 0x70
24003854:	78c8      	ldrb	r0, [r1, #3]
24003856:	f883 0071 	strb.w	r0, [r3, #113]	; 0x71
2400385a:	7908      	ldrb	r0, [r1, #4]
2400385c:	f883 0072 	strb.w	r0, [r3, #114]	; 0x72
24003860:	7948      	ldrb	r0, [r1, #5]
24003862:	f883 0073 	strb.w	r0, [r3, #115]	; 0x73
24003866:	7988      	ldrb	r0, [r1, #6]
24003868:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
2400386c:	79c8      	ldrb	r0, [r1, #7]
2400386e:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
24003872:	7a08      	ldrb	r0, [r1, #8]
24003874:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
24003878:	7a49      	ldrb	r1, [r1, #9]
2400387a:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
  for (int i = 0; i < 3; i++)
2400387e:	d002      	beq.n	24003886 <main+0x7be>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24003880:	682b      	ldr	r3, [r5, #0]
24003882:	7818      	ldrb	r0, [r3, #0]
24003884:	e65e      	b.n	24003544 <main+0x47c>
  HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
24003886:	4a9e      	ldr	r2, [pc, #632]	; (24003b00 <main+0xa38>)
24003888:	2340      	movs	r3, #64	; 0x40
2400388a:	489e      	ldr	r0, [pc, #632]	; (24003b04 <main+0xa3c>)
2400388c:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
	  if (rand > TWO_TO_31)
24003890:	eddf 8a9d 	vldr	s17, [pc, #628]	; 24003b08 <main+0xa40>
  HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
24003894:	f007 fa6a 	bl	2400ad6c <HAL_SPI_TransmitReceive_DMA>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
24003898:	4a9c      	ldr	r2, [pc, #624]	; (24003b0c <main+0xa44>)
2400389a:	2340      	movs	r3, #64	; 0x40
2400389c:	489c      	ldr	r0, [pc, #624]	; (24003b10 <main+0xa48>)
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
2400389e:	ed9f 8a9d 	vldr	s16, [pc, #628]	; 24003b14 <main+0xa4c>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
240038a2:	18d1      	adds	r1, r2, r3
240038a4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 24003b70 <main+0xaa8>
240038a8:	f007 fa60 	bl	2400ad6c <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockB1, &hsai_BlockA1);
240038ac:	4b9a      	ldr	r3, [pc, #616]	; (24003b18 <main+0xa50>)
240038ae:	499b      	ldr	r1, [pc, #620]	; (24003b1c <main+0xa54>)
240038b0:	f003 0207 	and.w	r2, r3, #7
240038b4:	489a      	ldr	r0, [pc, #616]	; (24003b20 <main+0xa58>)
240038b6:	f503 6480 	add.w	r4, r3, #1024	; 0x400
240038ba:	4f9a      	ldr	r7, [pc, #616]	; (24003b24 <main+0xa5c>)
240038bc:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 24003b74 <main+0xaac>
240038c0:	4d99      	ldr	r5, [pc, #612]	; (24003b28 <main+0xa60>)
240038c2:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 24003b78 <main+0xab0>
240038c6:	9202      	str	r2, [sp, #8]
240038c8:	f7fd ff84 	bl	240017d4 <audioStart>
240038cc:	e02a      	b.n	24003924 <main+0x85c>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
240038ce:	883b      	ldrh	r3, [r7, #0]
240038d0:	b29b      	uxth	r3, r3
240038d2:	b913      	cbnz	r3, 240038da <main+0x812>
240038d4:	887a      	ldrh	r2, [r7, #2]
240038d6:	b292      	uxth	r2, r2
240038d8:	b102      	cbz	r2, 240038dc <main+0x814>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
240038da:	2201      	movs	r2, #1
240038dc:	2180      	movs	r1, #128	; 0x80
240038de:	4893      	ldr	r0, [pc, #588]	; (24003b2c <main+0xa64>)
240038e0:	f002 fd88 	bl	240063f4 <HAL_GPIO_WritePin>
	  if (brainFirmwareUpdateRequested)
240038e4:	f8da 3000 	ldr.w	r3, [sl]
240038e8:	2b00      	cmp	r3, #0
240038ea:	d13e      	bne.n	2400396a <main+0x8a2>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
240038ec:	a90b      	add	r1, sp, #44	; 0x2c
240038ee:	4890      	ldr	r0, [pc, #576]	; (24003b30 <main+0xa68>)
240038f0:	f005 fd92 	bl	24009418 <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
240038f4:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
240038f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
240038fc:	eef4 7ae8 	vcmpe.f32	s15, s17
24003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24003904:	dd03      	ble.n	2400390e <main+0x846>
		  myTestInt++;
24003906:	4a8b      	ldr	r2, [pc, #556]	; (24003b34 <main+0xa6c>)
24003908:	6813      	ldr	r3, [r2, #0]
2400390a:	3301      	adds	r3, #1
2400390c:	6013      	str	r3, [r2, #0]
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
2400390e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24003912:	782b      	ldrb	r3, [r5, #0]
24003914:	1c5a      	adds	r2, r3, #1
24003916:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
2400391a:	eea7 7a88 	vfma.f32	s14, s15, s16
2400391e:	702a      	strb	r2, [r5, #0]
24003920:	ed83 7a00 	vstr	s14, [r3]
	  if (boardNumber == 0)
24003924:	f898 3000 	ldrb.w	r3, [r8]
24003928:	b953      	cbnz	r3, 24003940 <main+0x878>
		  if (presetWaitingToLoad > 0)
2400392a:	4b83      	ldr	r3, [pc, #524]	; (24003b38 <main+0xa70>)
2400392c:	681e      	ldr	r6, [r3, #0]
2400392e:	2e00      	cmp	r6, #0
24003930:	d053      	beq.n	240039da <main+0x912>
			  if (!i2cSending)
24003932:	4b82      	ldr	r3, [pc, #520]	; (24003b3c <main+0xa74>)
24003934:	781b      	ldrb	r3, [r3, #0]
24003936:	f003 06ff 	and.w	r6, r3, #255	; 0xff
2400393a:	2b00      	cmp	r3, #0
2400393c:	f000 809e 	beq.w	24003a7c <main+0x9b4>
	  if (presetWaitingToParse > 0)
24003940:	f8d9 3000 	ldr.w	r3, [r9]
24003944:	2b00      	cmp	r3, #0
24003946:	d0c2      	beq.n	240038ce <main+0x806>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
24003948:	2201      	movs	r2, #1
2400394a:	2180      	movs	r1, #128	; 0x80
2400394c:	487c      	ldr	r0, [pc, #496]	; (24003b40 <main+0xa78>)
2400394e:	f002 fd51 	bl	240063f4 <HAL_GPIO_WritePin>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
24003952:	4b7c      	ldr	r3, [pc, #496]	; (24003b44 <main+0xa7c>)
24003954:	f8d9 0000 	ldr.w	r0, [r9]
24003958:	7819      	ldrb	r1, [r3, #0]
2400395a:	f029 f959 	bl	2402cc10 <__parsePreset_veneer>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
2400395e:	2200      	movs	r2, #0
24003960:	2180      	movs	r1, #128	; 0x80
24003962:	4877      	ldr	r0, [pc, #476]	; (24003b40 <main+0xa78>)
24003964:	f002 fd46 	bl	240063f4 <HAL_GPIO_WritePin>
24003968:	e7b1      	b.n	240038ce <main+0x806>
	if (boardNumber == 0)
2400396a:	f898 6000 	ldrb.w	r6, [r8]
2400396e:	2e00      	cmp	r6, #0
24003970:	d1bc      	bne.n	240038ec <main+0x824>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
24003972:	2201      	movs	r2, #1
24003974:	486d      	ldr	r0, [pc, #436]	; (24003b2c <main+0xa64>)
24003976:	4611      	mov	r1, r2
24003978:	f002 fd3c 	bl	240063f4 <HAL_GPIO_WritePin>
  __IO uint8_t status = SD_PRESENT;
2400397c:	2301      	movs	r3, #1
2400397e:	f88d 3017 	strb.w	r3, [sp, #23]
  return status;
24003982:	f89d 3017 	ldrb.w	r3, [sp, #23]
		if(BSP_SD_IsDetected())
24003986:	b1f3      	cbz	r3, 240039c6 <main+0x8fe>
24003988:	9b02      	ldr	r3, [sp, #8]
2400398a:	2b00      	cmp	r3, #0
2400398c:	f040 8194 	bne.w	24003cb8 <main+0xbf0>
24003990:	4b61      	ldr	r3, [pc, #388]	; (24003b18 <main+0xa50>)
				audioOutBuffer[i] = 0;
24003992:	2000      	movs	r0, #0
24003994:	2100      	movs	r1, #0
24003996:	e8e3 0102 	strd	r0, r1, [r3], #8
			for (uint_fast16_t i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
2400399a:	429c      	cmp	r4, r3
2400399c:	d1fb      	bne.n	24003996 <main+0x8ce>
			loadFailed = 0;
2400399e:	2600      	movs	r6, #0
240039a0:	4b69      	ldr	r3, [pc, #420]	; (24003b48 <main+0xa80>)
			diskBusy = 1;
240039a2:	2201      	movs	r2, #1
			loadFailed = 0;
240039a4:	701e      	strb	r6, [r3, #0]
			disk_initialize(0);
240039a6:	4630      	mov	r0, r6
			diskBusy = 1;
240039a8:	4b68      	ldr	r3, [pc, #416]	; (24003b4c <main+0xa84>)
240039aa:	701a      	strb	r2, [r3, #0]
			disk_initialize(0);
240039ac:	f009 f8b4 	bl	2400cb18 <disk_initialize>
			disk_status(0);
240039b0:	4630      	mov	r0, r6
240039b2:	f009 f8a7 	bl	2400cb04 <disk_status>
			if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
240039b6:	2201      	movs	r2, #1
240039b8:	4965      	ldr	r1, [pc, #404]	; (24003b50 <main+0xa88>)
240039ba:	4866      	ldr	r0, [pc, #408]	; (24003b54 <main+0xa8c>)
240039bc:	f00b fa80 	bl	2400eec0 <f_mount>
240039c0:	2800      	cmp	r0, #0
240039c2:	f000 80db 	beq.w	24003b7c <main+0xab4>
		brainFirmwareUpdateRequested = 0;
240039c6:	2200      	movs	r2, #0
		diskBusy = 0;
240039c8:	4b60      	ldr	r3, [pc, #384]	; (24003b4c <main+0xa84>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
240039ca:	2101      	movs	r1, #1
240039cc:	4857      	ldr	r0, [pc, #348]	; (24003b2c <main+0xa64>)
		brainFirmwareUpdateRequested = 0;
240039ce:	f8ca 2000 	str.w	r2, [sl]
		diskBusy = 0;
240039d2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
240039d4:	f002 fd0e 	bl	240063f4 <HAL_GPIO_WritePin>
240039d8:	e788      	b.n	240038ec <main+0x824>
		  else if (presetWaitingToWrite > 0)
240039da:	4b5f      	ldr	r3, [pc, #380]	; (24003b58 <main+0xa90>)
240039dc:	681b      	ldr	r3, [r3, #0]
240039de:	2b00      	cmp	r3, #0
240039e0:	d0ae      	beq.n	24003940 <main+0x878>
				  writePresetToSDCard(presetWaitingToWrite);
240039e2:	4b5d      	ldr	r3, [pc, #372]	; (24003b58 <main+0xa90>)
240039e4:	681b      	ldr	r3, [r3, #0]
240039e6:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
240039e8:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
240039ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
240039ee:	4631      	mov	r1, r6
240039f0:	4849      	ldr	r0, [pc, #292]	; (24003b18 <main+0xa50>)
240039f2:	f011 fa03 	bl	24014dfc <memset>
  __IO uint8_t status = SD_PRESENT;
240039f6:	2301      	movs	r3, #1
240039f8:	f88d 3016 	strb.w	r3, [sp, #22]
  return status;
240039fc:	f89d 3016 	ldrb.w	r3, [sp, #22]
	if(BSP_SD_IsDetected())
24003a00:	2b00      	cmp	r3, #0
24003a02:	d034      	beq.n	24003a6e <main+0x9a6>
24003a04:	9b02      	ldr	r3, [sp, #8]
24003a06:	2b00      	cmp	r3, #0
24003a08:	f040 815d 	bne.w	24003cc6 <main+0xbfe>
24003a0c:	4b42      	ldr	r3, [pc, #264]	; (24003b18 <main+0xa50>)
					audioOutBuffer[i] = 0;
24003a0e:	2000      	movs	r0, #0
24003a10:	2100      	movs	r1, #0
24003a12:	e8e3 0102 	strd	r0, r1, [r3], #8
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003a16:	42a3      	cmp	r3, r4
24003a18:	d1fb      	bne.n	24003a12 <main+0x94a>
				diskBusy = 1;
24003a1a:	2301      	movs	r3, #1
24003a1c:	4a4b      	ldr	r2, [pc, #300]	; (24003b4c <main+0xa84>)
24003a1e:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
24003a20:	4a4e      	ldr	r2, [pc, #312]	; (24003b5c <main+0xa94>)
24003a22:	7813      	ldrb	r3, [r2, #0]
24003a24:	2b63      	cmp	r3, #99	; 0x63
24003a26:	d901      	bls.n	24003a2c <main+0x964>
			        presetNumberToSave = 99;
24003a28:	2363      	movs	r3, #99	; 0x63
24003a2a:	7013      	strb	r3, [r2, #0]
				itoa(presetNumberToSave, charBuf, 10);
24003a2c:	4b4b      	ldr	r3, [pc, #300]	; (24003b5c <main+0xa94>)
24003a2e:	220a      	movs	r2, #10
24003a30:	a908      	add	r1, sp, #32
24003a32:	7818      	ldrb	r0, [r3, #0]
24003a34:	f011 f99e 	bl	24014d74 <itoa>
				int len = ((strlen(charBuf)));
24003a38:	a808      	add	r0, sp, #32
24003a3a:	f7fc fc4d 	bl	240002d8 <strlen>
				if (len == 1)
24003a3e:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
24003a40:	4602      	mov	r2, r0
				if (len == 1)
24003a42:	f000 80d0 	beq.w	24003be6 <main+0xb1e>
					strcat(charBuf, ".ebp");
24003a46:	4946      	ldr	r1, [pc, #280]	; (24003b60 <main+0xa98>)
24003a48:	ab08      	add	r3, sp, #32
24003a4a:	6808      	ldr	r0, [r1, #0]
24003a4c:	7909      	ldrb	r1, [r1, #4]
24003a4e:	5098      	str	r0, [r3, r2]
24003a50:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
24003a52:	a80b      	add	r0, sp, #44	; 0x2c
24003a54:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
24003a56:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
24003a58:	a908      	add	r1, sp, #32
24003a5a:	f011 fa01 	bl	24014e60 <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
24003a5e:	220a      	movs	r2, #10
24003a60:	a90b      	add	r1, sp, #44	; 0x2c
24003a62:	4840      	ldr	r0, [pc, #256]	; (24003b64 <main+0xa9c>)
24003a64:	f00b fa78 	bl	2400ef58 <f_open>
24003a68:	2800      	cmp	r0, #0
24003a6a:	f000 80d3 	beq.w	24003c14 <main+0xb4c>
	presetWaitingToWrite = 0;
24003a6e:	2300      	movs	r3, #0
24003a70:	4a39      	ldr	r2, [pc, #228]	; (24003b58 <main+0xa90>)
24003a72:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
24003a74:	4a35      	ldr	r2, [pc, #212]	; (24003b4c <main+0xa84>)
24003a76:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
24003a78:	b662      	cpsie	i
}
24003a7a:	e761      	b.n	24003940 <main+0x878>
				  checkForSDCardPreset(presetNumberToLoad);
24003a7c:	4b31      	ldr	r3, [pc, #196]	; (24003b44 <main+0xa7c>)
	prevVoice = numberToLoad;
24003a7e:	4a3a      	ldr	r2, [pc, #232]	; (24003b68 <main+0xaa0>)
				  checkForSDCardPreset(presetNumberToLoad);
24003a80:	781b      	ldrb	r3, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
24003a82:	482a      	ldr	r0, [pc, #168]	; (24003b2c <main+0xa64>)
				  checkForSDCardPreset(presetNumberToLoad);
24003a84:	b2db      	uxtb	r3, r3
	prevVoice = numberToLoad;
24003a86:	6013      	str	r3, [r2, #0]
	voice = numberToLoad;
24003a88:	4a38      	ldr	r2, [pc, #224]	; (24003b6c <main+0xaa4>)
24003a8a:	9303      	str	r3, [sp, #12]
24003a8c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
24003a8e:	2201      	movs	r2, #1
24003a90:	4611      	mov	r1, r2
24003a92:	f002 fcaf 	bl	240063f4 <HAL_GPIO_WritePin>
  __IO uint8_t status = SD_PRESENT;
24003a96:	2201      	movs	r2, #1
24003a98:	f88d 2015 	strb.w	r2, [sp, #21]
  return status;
24003a9c:	f89d 2015 	ldrb.w	r2, [sp, #21]
	if(BSP_SD_IsDetected())
24003aa0:	b31a      	cbz	r2, 24003aea <main+0xa22>
24003aa2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
24003aa6:	2a00      	cmp	r2, #0
24003aa8:	f040 8114 	bne.w	24003cd4 <main+0xc0c>
24003aac:	4a1a      	ldr	r2, [pc, #104]	; (24003b18 <main+0xa50>)
			audioOutBuffer[i] = 0;
24003aae:	2000      	movs	r0, #0
24003ab0:	2100      	movs	r1, #0
24003ab2:	e8e2 0102 	strd	r0, r1, [r2], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003ab6:	42a2      	cmp	r2, r4
24003ab8:	d1fb      	bne.n	24003ab2 <main+0x9ea>
		loadFailed = 0;
24003aba:	2600      	movs	r6, #0
24003abc:	9303      	str	r3, [sp, #12]
24003abe:	4b22      	ldr	r3, [pc, #136]	; (24003b48 <main+0xa80>)
		diskBusy = 1;
24003ac0:	2201      	movs	r2, #1
		disk_initialize(0);
24003ac2:	4630      	mov	r0, r6
		loadFailed = 0;
24003ac4:	701e      	strb	r6, [r3, #0]
		presetWaitingToLoad = 0;
24003ac6:	4b1c      	ldr	r3, [pc, #112]	; (24003b38 <main+0xa70>)
24003ac8:	601e      	str	r6, [r3, #0]
		diskBusy = 1;
24003aca:	4b20      	ldr	r3, [pc, #128]	; (24003b4c <main+0xa84>)
24003acc:	701a      	strb	r2, [r3, #0]
		disk_initialize(0);
24003ace:	f009 f823 	bl	2400cb18 <disk_initialize>
	    disk_status(0);
24003ad2:	4630      	mov	r0, r6
24003ad4:	f009 f816 	bl	2400cb04 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
24003ad8:	2201      	movs	r2, #1
24003ada:	491d      	ldr	r1, [pc, #116]	; (24003b50 <main+0xa88>)
24003adc:	481d      	ldr	r0, [pc, #116]	; (24003b54 <main+0xa8c>)
24003ade:	f00b f9ef 	bl	2400eec0 <f_mount>
24003ae2:	9b03      	ldr	r3, [sp, #12]
24003ae4:	2800      	cmp	r0, #0
24003ae6:	f000 809f 	beq.w	24003c28 <main+0xb60>
		loadFailed = 1;
24003aea:	2301      	movs	r3, #1
24003aec:	4a16      	ldr	r2, [pc, #88]	; (24003b48 <main+0xa80>)
24003aee:	7013      	strb	r3, [r2, #0]
	diskBusy = 0;
24003af0:	2200      	movs	r2, #0
24003af2:	4b16      	ldr	r3, [pc, #88]	; (24003b4c <main+0xa84>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24003af4:	2101      	movs	r1, #1
24003af6:	480d      	ldr	r0, [pc, #52]	; (24003b2c <main+0xa64>)
	diskBusy = 0;
24003af8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
24003afa:	f002 fc7b 	bl	240063f4 <HAL_GPIO_WritePin>
	return found;
24003afe:	e71f      	b.n	24003940 <main+0x878>
24003b00:	38000040 	.word	0x38000040
24003b04:	2001d488 	.word	0x2001d488
24003b08:	4f000000 	.word	0x4f000000
24003b0c:	30000800 	.word	0x30000800
24003b10:	2001d3e8 	.word	0x2001d3e8
24003b14:	3000000d 	.word	0x3000000d
24003b18:	30000000 	.word	0x30000000
24003b1c:	2001d058 	.word	0x2001d058
24003b20:	2001d0f0 	.word	0x2001d0f0
24003b24:	20014838 	.word	0x20014838
24003b28:	20014b1e 	.word	0x20014b1e
24003b2c:	58020800 	.word	0x58020800
24003b30:	2001cf50 	.word	0x2001cf50
24003b34:	20019954 	.word	0x20019954
24003b38:	2001aa94 	.word	0x2001aa94
24003b3c:	20016cda 	.word	0x20016cda
24003b40:	58020400 	.word	0x58020400
24003b44:	2001aa92 	.word	0x2001aa92
24003b48:	20018d0c 	.word	0x20018d0c
24003b4c:	20014b58 	.word	0x20014b58
24003b50:	2001d988 	.word	0x2001d988
24003b54:	2001d528 	.word	0x2001d528
24003b58:	2001aa9c 	.word	0x2001aa9c
24003b5c:	2001aa93 	.word	0x2001aa93
24003b60:	240174ac 	.word	0x240174ac
24003b64:	2001d75c 	.word	0x2001d75c
24003b68:	20000154 	.word	0x20000154
24003b6c:	200148fc 	.word	0x200148fc
24003b70:	2001aa98 	.word	0x2001aa98
24003b74:	20014b18 	.word	0x20014b18
24003b78:	2001aaac 	.word	0x2001aaac
				char finalString[10] = "brain.bin";
24003b7c:	4a73      	ldr	r2, [pc, #460]	; (24003d4c <main+0xc84>)
24003b7e:	ae0b      	add	r6, sp, #44	; 0x2c
24003b80:	ca07      	ldmia	r2, {r0, r1, r2}
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24003b82:	4633      	mov	r3, r6
				char finalString[10] = "brain.bin";
24003b84:	c603      	stmia	r6!, {r0, r1}
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24003b86:	4972      	ldr	r1, [pc, #456]	; (24003d50 <main+0xc88>)
				char finalString[10] = "brain.bin";
24003b88:	8032      	strh	r2, [r6, #0]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24003b8a:	4872      	ldr	r0, [pc, #456]	; (24003d54 <main+0xc8c>)
24003b8c:	4a72      	ldr	r2, [pc, #456]	; (24003d58 <main+0xc90>)
24003b8e:	f00b feaf 	bl	2400f8f0 <f_findfirst>
				if(res == FR_OK)
24003b92:	2800      	cmp	r0, #0
24003b94:	f47f af17 	bne.w	240039c6 <main+0x8fe>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24003b98:	2211      	movs	r2, #17
24003b9a:	4970      	ldr	r1, [pc, #448]	; (24003d5c <main+0xc94>)
24003b9c:	4870      	ldr	r0, [pc, #448]	; (24003d60 <main+0xc98>)
24003b9e:	f00b f9db 	bl	2400ef58 <f_open>
24003ba2:	2800      	cmp	r0, #0
24003ba4:	f47f af0f 	bne.w	240039c6 <main+0x8fe>
						brainFirmwareSize = f_size(&SDFile);
24003ba8:	4b6d      	ldr	r3, [pc, #436]	; (24003d60 <main+0xc98>)
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003baa:	496e      	ldr	r1, [pc, #440]	; (24003d64 <main+0xc9c>)
						brainFirmwareSize = f_size(&SDFile);
24003bac:	68da      	ldr	r2, [r3, #12]
24003bae:	4b6e      	ldr	r3, [pc, #440]	; (24003d68 <main+0xca0>)
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003bb0:	486b      	ldr	r0, [pc, #428]	; (24003d60 <main+0xc98>)
						brainFirmwareSize = f_size(&SDFile);
24003bb2:	601a      	str	r2, [r3, #0]
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003bb4:	ab08      	add	r3, sp, #32
24003bb6:	f00b fb31 	bl	2400f21c <f_read>
						f_close(&SDFile);
24003bba:	4869      	ldr	r0, [pc, #420]	; (24003d60 <main+0xc98>)
24003bbc:	f00b fd98 	bl	2400f6f0 <f_close>
						for (uint_fast16_t i = 0; i< 700; i++)
24003bc0:	4b6a      	ldr	r3, [pc, #424]	; (24003d6c <main+0xca4>)
24003bc2:	1c5a      	adds	r2, r3, #1
24003bc4:	f1c2 0001 	rsb	r0, r2, #1
24003bc8:	18c2      	adds	r2, r0, r3
							memoryTest[i] = brainFirmwareBuffer[i];
24003bca:	4e69      	ldr	r6, [pc, #420]	; (24003d70 <main+0xca8>)
24003bcc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
24003bd0:	54b1      	strb	r1, [r6, r2]
						for (uint_fast16_t i = 0; i< 700; i++)
24003bd2:	4a68      	ldr	r2, [pc, #416]	; (24003d74 <main+0xcac>)
24003bd4:	4293      	cmp	r3, r2
24003bd6:	d1f7      	bne.n	24003bc8 <main+0xb00>
						foundBrainFirmware = 1;
24003bd8:	2301      	movs	r3, #1
24003bda:	4a67      	ldr	r2, [pc, #412]	; (24003d78 <main+0xcb0>)
24003bdc:	7013      	strb	r3, [r2, #0]
						brainFirmwareBufferIndex = 0;
24003bde:	2300      	movs	r3, #0
24003be0:	4a66      	ldr	r2, [pc, #408]	; (24003d7c <main+0xcb4>)
24003be2:	6013      	str	r3, [r2, #0]
24003be4:	e6ef      	b.n	240039c6 <main+0x8fe>
					finalString[2] = charBuf[1];
24003be6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
					strcat(finalString, ".ebp");
24003bea:	a80b      	add	r0, sp, #44	; 0x2c
					finalString[2] = charBuf[1];
24003bec:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
					finalString[1] = charBuf[0];
24003bf0:	f89d 3020 	ldrb.w	r3, [sp, #32]
24003bf4:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
					finalString[0] = '0';
24003bf8:	2330      	movs	r3, #48	; 0x30
24003bfa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
					strcat(finalString, ".ebp");
24003bfe:	f7fc fb6b 	bl	240002d8 <strlen>
24003c02:	4a5f      	ldr	r2, [pc, #380]	; (24003d80 <main+0xcb8>)
24003c04:	4603      	mov	r3, r0
24003c06:	a90b      	add	r1, sp, #44	; 0x2c
24003c08:	6810      	ldr	r0, [r2, #0]
24003c0a:	7912      	ldrb	r2, [r2, #4]
24003c0c:	50c8      	str	r0, [r1, r3]
24003c0e:	440b      	add	r3, r1
24003c10:	711a      	strb	r2, [r3, #4]
24003c12:	e724      	b.n	24003a5e <main+0x996>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
24003c14:	9a03      	ldr	r2, [sp, #12]
24003c16:	ab07      	add	r3, sp, #28
24003c18:	495a      	ldr	r1, [pc, #360]	; (24003d84 <main+0xcbc>)
24003c1a:	4851      	ldr	r0, [pc, #324]	; (24003d60 <main+0xc98>)
24003c1c:	f00b fc24 	bl	2400f468 <f_write>
					f_close(&SDFile);
24003c20:	484f      	ldr	r0, [pc, #316]	; (24003d60 <main+0xc98>)
24003c22:	f00b fd65 	bl	2400f6f0 <f_close>
24003c26:	e722      	b.n	24003a6e <main+0x9a6>
			itoa(numberToLoad, charBuf, 10);
24003c28:	220a      	movs	r2, #10
24003c2a:	4618      	mov	r0, r3
24003c2c:	a908      	add	r1, sp, #32
24003c2e:	f011 f8a1 	bl	24014d74 <itoa>
			int len = ((strlen(charBuf)));
24003c32:	a808      	add	r0, sp, #32
24003c34:	f7fc fb50 	bl	240002d8 <strlen>
			if (len == 1)
24003c38:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
24003c3a:	4602      	mov	r2, r0
			if (len == 1)
24003c3c:	d051      	beq.n	24003ce2 <main+0xc1a>
				strcat(charBuf, "*.ebp");
24003c3e:	4952      	ldr	r1, [pc, #328]	; (24003d88 <main+0xcc0>)
24003c40:	ab08      	add	r3, sp, #32
24003c42:	6808      	ldr	r0, [r1, #0]
24003c44:	8889      	ldrh	r1, [r1, #4]
24003c46:	5098      	str	r0, [r3, r2]
24003c48:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
24003c4a:	a80b      	add	r0, sp, #44	; 0x2c
24003c4c:	3206      	adds	r2, #6
				strcat(charBuf, "*.ebp");
24003c4e:	8099      	strh	r1, [r3, #4]
				strcpy(finalString, charBuf);
24003c50:	a908      	add	r1, sp, #32
24003c52:	f011 f905 	bl	24014e60 <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
24003c56:	ab0b      	add	r3, sp, #44	; 0x2c
24003c58:	4a3f      	ldr	r2, [pc, #252]	; (24003d58 <main+0xc90>)
24003c5a:	493d      	ldr	r1, [pc, #244]	; (24003d50 <main+0xc88>)
24003c5c:	483d      	ldr	r0, [pc, #244]	; (24003d54 <main+0xc8c>)
24003c5e:	f00b fe47 	bl	2400f8f0 <f_findfirst>
			if(res == FR_OK)
24003c62:	2800      	cmp	r0, #0
24003c64:	f47f af41 	bne.w	24003aea <main+0xa22>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24003c68:	2211      	movs	r2, #17
24003c6a:	493c      	ldr	r1, [pc, #240]	; (24003d5c <main+0xc94>)
24003c6c:	483c      	ldr	r0, [pc, #240]	; (24003d60 <main+0xc98>)
24003c6e:	f00b f973 	bl	2400ef58 <f_open>
24003c72:	4606      	mov	r6, r0
24003c74:	2800      	cmp	r0, #0
24003c76:	f47f af38 	bne.w	24003aea <main+0xa22>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24003c7a:	4a39      	ldr	r2, [pc, #228]	; (24003d60 <main+0xc98>)
24003c7c:	ab07      	add	r3, sp, #28
24003c7e:	4941      	ldr	r1, [pc, #260]	; (24003d84 <main+0xcbc>)
24003c80:	68d2      	ldr	r2, [r2, #12]
24003c82:	4837      	ldr	r0, [pc, #220]	; (24003d60 <main+0xc98>)
24003c84:	f00b faca 	bl	2400f21c <f_read>
					presetWaitingToParse = bytesRead;
24003c88:	9b07      	ldr	r3, [sp, #28]
					f_close(&SDFile);
24003c8a:	4835      	ldr	r0, [pc, #212]	; (24003d60 <main+0xc98>)
					presetWaitingToParse = bytesRead;
24003c8c:	f8c9 3000 	str.w	r3, [r9]
					f_close(&SDFile);
24003c90:	f00b fd2e 	bl	2400f6f0 <f_close>
	  	  i2cSending = 1;
24003c94:	2301      	movs	r3, #1
24003c96:	4a3d      	ldr	r2, [pc, #244]	; (24003d8c <main+0xcc4>)
24003c98:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
24003c9a:	b672      	cpsid	i
	  	  HAL_I2C_Master_Transmit(&hi2c1, 34<<1, buffer, 4096, 10000);
24003c9c:	f242 7310 	movw	r3, #10000	; 0x2710
24003ca0:	4a38      	ldr	r2, [pc, #224]	; (24003d84 <main+0xcbc>)
24003ca2:	2144      	movs	r1, #68	; 0x44
24003ca4:	483a      	ldr	r0, [pc, #232]	; (24003d90 <main+0xcc8>)
24003ca6:	9300      	str	r3, [sp, #0]
24003ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
24003cac:	f002 fcd0 	bl	24006650 <HAL_I2C_Master_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
24003cb0:	b662      	cpsie	i
	  	i2cSending = 0;
24003cb2:	4a36      	ldr	r2, [pc, #216]	; (24003d8c <main+0xcc4>)
24003cb4:	7016      	strb	r6, [r2, #0]
24003cb6:	e71b      	b.n	24003af0 <main+0xa28>
24003cb8:	4b36      	ldr	r3, [pc, #216]	; (24003d94 <main+0xccc>)
				audioOutBuffer[i + 1] = 0;
24003cba:	e9c3 6600 	strd	r6, r6, [r3]
			for (uint_fast16_t i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003cbe:	3308      	adds	r3, #8
24003cc0:	429c      	cmp	r4, r3
24003cc2:	d1fa      	bne.n	24003cba <main+0xbf2>
24003cc4:	e66b      	b.n	2400399e <main+0x8d6>
24003cc6:	4b33      	ldr	r3, [pc, #204]	; (24003d94 <main+0xccc>)
					audioOutBuffer[i + 1] = 0;
24003cc8:	e9c3 6600 	strd	r6, r6, [r3]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003ccc:	3308      	adds	r3, #8
24003cce:	42a3      	cmp	r3, r4
24003cd0:	d1fa      	bne.n	24003cc8 <main+0xc00>
24003cd2:	e6a2      	b.n	24003a1a <main+0x952>
24003cd4:	4a2f      	ldr	r2, [pc, #188]	; (24003d94 <main+0xccc>)
			audioOutBuffer[i + 1] = 0;
24003cd6:	e9c2 6600 	strd	r6, r6, [r2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003cda:	3208      	adds	r2, #8
24003cdc:	42a2      	cmp	r2, r4
24003cde:	d1fa      	bne.n	24003cd6 <main+0xc0e>
24003ce0:	e6eb      	b.n	24003aba <main+0x9f2>
				finalString[2] = charBuf[1];
24003ce2:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
				strcat(finalString, "*.ebp");
24003ce6:	a80b      	add	r0, sp, #44	; 0x2c
				finalString[2] = charBuf[1];
24003ce8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
				finalString[1] = charBuf[0];
24003cec:	f89d 3020 	ldrb.w	r3, [sp, #32]
24003cf0:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
				finalString[0] = '0';
24003cf4:	2330      	movs	r3, #48	; 0x30
24003cf6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
				strcat(finalString, "*.ebp");
24003cfa:	f7fc faed 	bl	240002d8 <strlen>
24003cfe:	4a22      	ldr	r2, [pc, #136]	; (24003d88 <main+0xcc0>)
24003d00:	4603      	mov	r3, r0
24003d02:	a90b      	add	r1, sp, #44	; 0x2c
24003d04:	6810      	ldr	r0, [r2, #0]
24003d06:	8892      	ldrh	r2, [r2, #4]
24003d08:	50c8      	str	r0, [r1, r3]
24003d0a:	440b      	add	r3, r1
24003d0c:	809a      	strh	r2, [r3, #4]
24003d0e:	e7a2      	b.n	24003c56 <main+0xb8e>
	  getPresetNamesFromSDCard();
24003d10:	f7fe fafa 	bl	24002308 <getPresetNamesFromSDCard>
	  diskBusy = 1;
24003d14:	f7ff bb5d 	b.w	240033d2 <main+0x30a>
    	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
24003d18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003d1c:	4919      	ldr	r1, [pc, #100]	; (24003d84 <main+0xcbc>)
24003d1e:	481c      	ldr	r0, [pc, #112]	; (24003d90 <main+0xcc8>)
24003d20:	f002 fe62 	bl	240069e8 <HAL_I2C_Slave_Receive_IT>
24003d24:	f7ff bace 	b.w	240032c4 <main+0x1fc>
	  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24003d28:	950c      	str	r5, [sp, #48]	; 0x30
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
24003d2a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003d2e:	a90b      	add	r1, sp, #44	; 0x2c
24003d30:	4819      	ldr	r0, [pc, #100]	; (24003d98 <main+0xcd0>)
		GPIO_InitTypeDef GPIO_InitStruct = {0};
24003d32:	940f      	str	r4, [sp, #60]	; 0x3c
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
24003d34:	950b      	str	r5, [sp, #44]	; 0x2c
		GPIO_InitTypeDef GPIO_InitStruct = {0};
24003d36:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003d3a:	f002 fa0b 	bl	24006154 <HAL_GPIO_Init>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
24003d3e:	4622      	mov	r2, r4
24003d40:	4629      	mov	r1, r5
24003d42:	4815      	ldr	r0, [pc, #84]	; (24003d98 <main+0xcd0>)
24003d44:	f002 fb56 	bl	240063f4 <HAL_GPIO_WritePin>
24003d48:	f7ff bab3 	b.w	240032b2 <main+0x1ea>
24003d4c:	240174b4 	.word	0x240174b4
24003d50:	20016bc0 	.word	0x20016bc0
24003d54:	20014b20 	.word	0x20014b20
24003d58:	2001d988 	.word	0x2001d988
24003d5c:	20016bd6 	.word	0x20016bd6
24003d60:	2001d75c 	.word	0x2001d75c
24003d64:	c3c00000 	.word	0xc3c00000
24003d68:	20014b14 	.word	0x20014b14
24003d6c:	c3bfffff 	.word	0xc3bfffff
24003d70:	20019690 	.word	0x20019690
24003d74:	c3c002bb 	.word	0xc3c002bb
24003d78:	20016cd8 	.word	0x20016cd8
24003d7c:	20014b08 	.word	0x20014b08
24003d80:	240174ac 	.word	0x240174ac
24003d84:	30032380 	.word	0x30032380
24003d88:	24017384 	.word	0x24017384
24003d8c:	20016cda 	.word	0x20016cda
24003d90:	20014a5c 	.word	0x20014a5c
24003d94:	30000000 	.word	0x30000000
24003d98:	58020400 	.word	0x58020400

24003d9c <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == GPIO_PIN_6) {
24003d9c:	2840      	cmp	r0, #64	; 0x40
24003d9e:	d000      	beq.n	24003da2 <HAL_GPIO_EXTI_Callback+0x6>
}
24003da0:	4770      	bx	lr
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
24003da2:	4601      	mov	r1, r0
24003da4:	4801      	ldr	r0, [pc, #4]	; (24003dac <HAL_GPIO_EXTI_Callback+0x10>)
24003da6:	f002 bb1f 	b.w	240063e8 <HAL_GPIO_ReadPin>
24003daa:	bf00      	nop
24003dac:	58020400 	.word	0x58020400

24003db0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
24003db0:	4770      	bx	lr
24003db2:	bf00      	nop

24003db4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
24003db4:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
24003db6:	4806      	ldr	r0, [pc, #24]	; (24003dd0 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
24003db8:	2300      	movs	r3, #0
24003dba:	4a06      	ldr	r2, [pc, #24]	; (24003dd4 <MX_RNG_Init+0x20>)
24003dbc:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
24003dc0:	f005 fae8 	bl	24009394 <HAL_RNG_Init>
24003dc4:	b900      	cbnz	r0, 24003dc8 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
24003dc6:	bd08      	pop	{r3, pc}
24003dc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24003dcc:	f7ff bff0 	b.w	24003db0 <Error_Handler>
24003dd0:	2001cf50 	.word	0x2001cf50
24003dd4:	48021800 	.word	0x48021800

24003dd8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
24003dd8:	b510      	push	{r4, lr}
24003dda:	b0b2      	sub	sp, #200	; 0xc8
24003ddc:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24003dde:	22c0      	movs	r2, #192	; 0xc0
24003de0:	2100      	movs	r1, #0
24003de2:	a802      	add	r0, sp, #8
24003de4:	f011 f80a 	bl	24014dfc <memset>
  if(rngHandle->Instance==RNG)
24003de8:	4b10      	ldr	r3, [pc, #64]	; (24003e2c <HAL_RNG_MspInit+0x54>)
24003dea:	6822      	ldr	r2, [r4, #0]
24003dec:	429a      	cmp	r2, r3
24003dee:	d001      	beq.n	24003df4 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
24003df0:	b032      	add	sp, #200	; 0xc8
24003df2:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
24003df4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
24003df8:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003dfa:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
24003dfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24003e00:	f004 f8d4 	bl	24007fac <HAL_RCCEx_PeriphCLKConfig>
24003e04:	b970      	cbnz	r0, 24003e24 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
24003e06:	4b0a      	ldr	r3, [pc, #40]	; (24003e30 <HAL_RNG_MspInit+0x58>)
24003e08:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
24003e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24003e10:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
24003e14:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
24003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
24003e1c:	9301      	str	r3, [sp, #4]
24003e1e:	9b01      	ldr	r3, [sp, #4]
}
24003e20:	b032      	add	sp, #200	; 0xc8
24003e22:	bd10      	pop	{r4, pc}
      Error_Handler();
24003e24:	f7ff ffc4 	bl	24003db0 <Error_Handler>
24003e28:	e7ed      	b.n	24003e06 <HAL_RNG_MspInit+0x2e>
24003e2a:	bf00      	nop
24003e2c:	48021800 	.word	0x48021800
24003e30:	58024400 	.word	0x58024400

24003e34 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
24003e34:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
24003e36:	4817      	ldr	r0, [pc, #92]	; (24003e94 <MX_SAI1_Init+0x60>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24003e38:	2200      	movs	r2, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
24003e3a:	4c17      	ldr	r4, [pc, #92]	; (24003e98 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
24003e3c:	2101      	movs	r1, #1
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003e3e:	2302      	movs	r3, #2
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24003e40:	61c2      	str	r2, [r0, #28]
  hsai_BlockA1.Instance = SAI1_Block_A;
24003e42:	6004      	str	r4, [r0, #0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24003e44:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24003e48:	60c2      	str	r2, [r0, #12]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
24003e4a:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
24003e4c:	e9c0 1201 	strd	r1, r2, [r0, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
24003e50:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
24003e54:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003e58:	461a      	mov	r2, r3
24003e5a:	f005 fceb 	bl	24009834 <HAL_SAI_InitProtocol>
24003e5e:	b990      	cbnz	r0, 24003e86 <MX_SAI1_Init+0x52>
  {
    Error_Handler();
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
24003e60:	480e      	ldr	r0, [pc, #56]	; (24003e9c <MX_SAI1_Init+0x68>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24003e62:	2200      	movs	r2, #0
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
24003e64:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24003e66:	2101      	movs	r1, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
24003e68:	4c0d      	ldr	r4, [pc, #52]	; (24003ea0 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24003e6a:	6142      	str	r2, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24003e6c:	61c2      	str	r2, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
24003e6e:	60c2      	str	r2, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
24003e70:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockB1.Instance = SAI1_Block_B;
24003e72:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
24003e74:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003e78:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24003e7a:	e9c0 3101 	strd	r3, r1, [r0, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003e7e:	f005 fcd9 	bl	24009834 <HAL_SAI_InitProtocol>
24003e82:	b918      	cbnz	r0, 24003e8c <MX_SAI1_Init+0x58>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
24003e84:	bd10      	pop	{r4, pc}
    Error_Handler();
24003e86:	f7ff ff93 	bl	24003db0 <Error_Handler>
24003e8a:	e7e9      	b.n	24003e60 <MX_SAI1_Init+0x2c>
}
24003e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
24003e90:	f7ff bf8e 	b.w	24003db0 <Error_Handler>
24003e94:	2001d058 	.word	0x2001d058
24003e98:	40015804 	.word	0x40015804
24003e9c:	2001d0f0 	.word	0x2001d0f0
24003ea0:	40015824 	.word	0x40015824

24003ea4 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
24003ea4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
24003ea6:	4a5b      	ldr	r2, [pc, #364]	; (24004014 <HAL_SAI_MspInit+0x170>)
{
24003ea8:	b08c      	sub	sp, #48	; 0x30
    if(saiHandle->Instance==SAI1_Block_A)
24003eaa:	6803      	ldr	r3, [r0, #0]
{
24003eac:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
24003eae:	4293      	cmp	r3, r2
24003eb0:	d004      	beq.n	24003ebc <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
24003eb2:	4a59      	ldr	r2, [pc, #356]	; (24004018 <HAL_SAI_MspInit+0x174>)
24003eb4:	4293      	cmp	r3, r2
24003eb6:	d04d      	beq.n	24003f54 <HAL_SAI_MspInit+0xb0>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
24003eb8:	b00c      	add	sp, #48	; 0x30
24003eba:	bd70      	pop	{r4, r5, r6, pc}
    if (SAI1_client == 0)
24003ebc:	4b57      	ldr	r3, [pc, #348]	; (2400401c <HAL_SAI_MspInit+0x178>)
24003ebe:	681a      	ldr	r2, [r3, #0]
24003ec0:	2a00      	cmp	r2, #0
24003ec2:	f000 808f 	beq.w	24003fe4 <HAL_SAI_MspInit+0x140>
    SAI1_client ++;
24003ec6:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003ec8:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24003eca:	2102      	movs	r1, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24003ecc:	2074      	movs	r0, #116	; 0x74
    SAI1_client ++;
24003ece:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003ed0:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24003ed2:	9007      	str	r0, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003ed4:	910a      	str	r1, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003ed6:	4852      	ldr	r0, [pc, #328]	; (24004020 <HAL_SAI_MspInit+0x17c>)
    hdma_sai1_a.Instance = DMA1_Stream1;
24003ed8:	4d52      	ldr	r5, [pc, #328]	; (24004024 <HAL_SAI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003eda:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003edc:	e9cd 1608 	strd	r1, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003ee0:	a907      	add	r1, sp, #28
24003ee2:	f002 f937 	bl	24006154 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
24003ee6:	4a50      	ldr	r2, [pc, #320]	; (24004028 <HAL_SAI_MspInit+0x184>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24003ee8:	2357      	movs	r3, #87	; 0x57
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24003eea:	4628      	mov	r0, r5
    hdma_sai1_a.Instance = DMA1_Stream1;
24003eec:	602a      	str	r2, [r5, #0]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
24003eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24003ef2:	606b      	str	r3, [r5, #4]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
24003ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
24003ef8:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
24003efe:	616b      	str	r3, [r5, #20]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
24003f00:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
24003f04:	60ae      	str	r6, [r5, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
24003f06:	60ee      	str	r6, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
24003f08:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
24003f0a:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003f0c:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
24003f0e:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24003f12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
24003f16:	2304      	movs	r3, #4
24003f18:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24003f1c:	f000 fe1a 	bl	24004b54 <HAL_DMA_Init>
24003f20:	2800      	cmp	r0, #0
24003f22:	d173      	bne.n	2400400c <HAL_SAI_MspInit+0x168>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
24003f24:	2106      	movs	r1, #6
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
24003f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    pSyncConfig.SyncEnable = DISABLE;
24003f2a:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24003f2e:	483d      	ldr	r0, [pc, #244]	; (24004024 <HAL_SAI_MspInit+0x180>)
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
24003f30:	e9cd 1303 	strd	r1, r3, [sp, #12]
    pSyncConfig.RequestNumber = 1;
24003f34:	2301      	movs	r3, #1
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24003f36:	a903      	add	r1, sp, #12
    pSyncConfig.SyncEnable = DISABLE;
24003f38:	f8ad 2014 	strh.w	r2, [sp, #20]
    pSyncConfig.RequestNumber = 1;
24003f3c:	9306      	str	r3, [sp, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
24003f3e:	f002 f89f 	bl	24006080 <HAL_DMAEx_ConfigMuxSync>
24003f42:	2800      	cmp	r0, #0
24003f44:	d15f      	bne.n	24004006 <HAL_SAI_MspInit+0x162>
    if(saiHandle->Instance==SAI1_Block_B)
24003f46:	4a34      	ldr	r2, [pc, #208]	; (24004018 <HAL_SAI_MspInit+0x174>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
24003f48:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
24003f4a:	6823      	ldr	r3, [r4, #0]
24003f4c:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
24003f4e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
24003f52:	d1b1      	bne.n	24003eb8 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
24003f54:	4b31      	ldr	r3, [pc, #196]	; (2400401c <HAL_SAI_MspInit+0x178>)
24003f56:	681a      	ldr	r2, [r3, #0]
24003f58:	2a00      	cmp	r2, #0
24003f5a:	d035      	beq.n	24003fc8 <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
24003f5c:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003f5e:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24003f60:	2102      	movs	r1, #2
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24003f62:	2008      	movs	r0, #8
    SAI1_client ++;
24003f64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003f66:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24003f68:	9007      	str	r0, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003f6a:	910a      	str	r1, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003f6c:	482c      	ldr	r0, [pc, #176]	; (24004020 <HAL_SAI_MspInit+0x17c>)
    hdma_sai1_b.Instance = DMA1_Stream2;
24003f6e:	4d2f      	ldr	r5, [pc, #188]	; (2400402c <HAL_SAI_MspInit+0x188>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003f70:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003f72:	e9cd 1608 	strd	r1, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003f76:	a907      	add	r1, sp, #28
24003f78:	f002 f8ec 	bl	24006154 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
24003f7c:	4a2c      	ldr	r2, [pc, #176]	; (24004030 <HAL_SAI_MspInit+0x18c>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
24003f7e:	2358      	movs	r3, #88	; 0x58
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
24003f80:	4628      	mov	r0, r5
    hdma_sai1_b.Instance = DMA1_Stream2;
24003f82:	602a      	str	r2, [r5, #0]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24003f84:	2240      	movs	r2, #64	; 0x40
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
24003f86:	606b      	str	r3, [r5, #4]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
24003f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24003f8c:	60aa      	str	r2, [r5, #8]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003f8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
24003f92:	612b      	str	r3, [r5, #16]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
24003f98:	60ee      	str	r6, [r5, #12]
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
24003f9a:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
24003f9c:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003f9e:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003fa0:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24003fa4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24003fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
24003fac:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24003fb0:	2304      	movs	r3, #4
24003fb2:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
24003fb4:	f000 fdce 	bl	24004b54 <HAL_DMA_Init>
24003fb8:	bb10      	cbnz	r0, 24004000 <HAL_SAI_MspInit+0x15c>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
24003fba:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
24003fbe:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
24003fc0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
24003fc4:	b00c      	add	sp, #48	; 0x30
24003fc6:	bd70      	pop	{r4, r5, r6, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
24003fc8:	491a      	ldr	r1, [pc, #104]	; (24004034 <HAL_SAI_MspInit+0x190>)
24003fca:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
24003fce:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
24003fd2:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
24003fd6:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
24003fda:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
24003fde:	9102      	str	r1, [sp, #8]
24003fe0:	9902      	ldr	r1, [sp, #8]
24003fe2:	e7bb      	b.n	24003f5c <HAL_SAI_MspInit+0xb8>
       __HAL_RCC_SAI1_CLK_ENABLE();
24003fe4:	4913      	ldr	r1, [pc, #76]	; (24004034 <HAL_SAI_MspInit+0x190>)
24003fe6:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
24003fea:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
24003fee:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
24003ff2:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
24003ff6:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
24003ffa:	9101      	str	r1, [sp, #4]
24003ffc:	9901      	ldr	r1, [sp, #4]
24003ffe:	e762      	b.n	24003ec6 <HAL_SAI_MspInit+0x22>
      Error_Handler();
24004000:	f7ff fed6 	bl	24003db0 <Error_Handler>
24004004:	e7d9      	b.n	24003fba <HAL_SAI_MspInit+0x116>
      Error_Handler();
24004006:	f7ff fed3 	bl	24003db0 <Error_Handler>
2400400a:	e79c      	b.n	24003f46 <HAL_SAI_MspInit+0xa2>
      Error_Handler();
2400400c:	f7ff fed0 	bl	24003db0 <Error_Handler>
24004010:	e788      	b.n	24003f24 <HAL_SAI_MspInit+0x80>
24004012:	bf00      	nop
24004014:	40015804 	.word	0x40015804
24004018:	40015824 	.word	0x40015824
2400401c:	2001cf64 	.word	0x2001cf64
24004020:	58021000 	.word	0x58021000
24004024:	2001cf68 	.word	0x2001cf68
24004028:	40020028 	.word	0x40020028
2400402c:	2001cfe0 	.word	0x2001cfe0
24004030:	40020040 	.word	0x40020040
24004034:	58024400 	.word	0x58024400

24004038 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
24004038:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
2400403a:	4b07      	ldr	r3, [pc, #28]	; (24004058 <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
2400403c:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
2400403e:	4c07      	ldr	r4, [pc, #28]	; (2400405c <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
24004040:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
24004044:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
24004046:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
2400404a:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
2400404e:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
24004052:	f85d 4b04 	ldr.w	r4, [sp], #4
24004056:	4770      	bx	lr
24004058:	2001d188 	.word	0x2001d188
2400405c:	52007000 	.word	0x52007000

24004060 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
24004060:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
24004062:	4b25      	ldr	r3, [pc, #148]	; (240040f8 <HAL_SD_MspInit+0x98>)
{
24004064:	b08a      	sub	sp, #40	; 0x28
  if(sdHandle->Instance==SDMMC1)
24004066:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24004068:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
2400406a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400406c:	9408      	str	r4, [sp, #32]
2400406e:	e9cd 4404 	strd	r4, r4, [sp, #16]
24004072:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
24004076:	d001      	beq.n	2400407c <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
24004078:	b00a      	add	sp, #40	; 0x28
2400407a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
2400407c:	4b1f      	ldr	r3, [pc, #124]	; (240040fc <HAL_SD_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
2400407e:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24004080:	260c      	movs	r6, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24004082:	a904      	add	r1, sp, #16
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24004084:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24004088:	481d      	ldr	r0, [pc, #116]	; (24004100 <HAL_SD_MspInit+0xa0>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
2400408a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400408e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
24004092:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
24004096:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
2400409a:	9201      	str	r2, [sp, #4]
2400409c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
2400409e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240040a2:	f042 0204 	orr.w	r2, r2, #4
240040a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240040aa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240040ae:	f002 0204 	and.w	r2, r2, #4
240040b2:	9202      	str	r2, [sp, #8]
240040b4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
240040b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240040ba:	f042 0208 	orr.w	r2, r2, #8
240040be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
240040c2:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
240040c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240040ca:	f003 0308 	and.w	r3, r3, #8
240040ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
240040d0:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
240040d2:	e9cd 5607 	strd	r5, r6, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
240040d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
240040da:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240040dc:	f002 f83a 	bl	24006154 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
240040e0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240040e2:	a904      	add	r1, sp, #16
240040e4:	4807      	ldr	r0, [pc, #28]	; (24004104 <HAL_SD_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
240040e6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
240040e8:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
240040ec:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
240040f0:	f002 f830 	bl	24006154 <HAL_GPIO_Init>
}
240040f4:	b00a      	add	sp, #40	; 0x28
240040f6:	bd70      	pop	{r4, r5, r6, pc}
240040f8:	52007000 	.word	0x52007000
240040fc:	58024400 	.word	0x58024400
24004100:	58020800 	.word	0x58020800
24004104:	58020c00 	.word	0x58020c00

24004108 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
24004108:	4813      	ldr	r0, [pc, #76]	; (24004158 <MX_SPI1_Init+0x50>)
2400410a:	4a14      	ldr	r2, [pc, #80]	; (2400415c <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
2400410c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24004150 <MX_SPI1_Init+0x48>
{
24004110:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
24004112:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
24004114:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
24004116:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
24004118:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
2400411a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
2400411c:	ed80 7b08 	vstr	d7, [r0, #32]
24004120:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
24004124:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
24004128:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
2400412c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24004130:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
24004134:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24004138:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
2400413c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
24004140:	f006 fd48 	bl	2400abd4 <HAL_SPI_Init>
24004144:	b900      	cbnz	r0, 24004148 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
24004146:	bd08      	pop	{r3, pc}
24004148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
2400414c:	f7ff be30 	b.w	24003db0 <Error_Handler>
	...
24004158:	2001d3e8 	.word	0x2001d3e8
2400415c:	40013000 	.word	0x40013000

24004160 <MX_SPI6_Init>:
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
24004160:	4813      	ldr	r0, [pc, #76]	; (240041b0 <MX_SPI6_Init+0x50>)
24004162:	4a14      	ldr	r2, [pc, #80]	; (240041b4 <MX_SPI6_Init+0x54>)
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
24004164:	ed9f 7b10 	vldr	d7, [pc, #64]	; 240041a8 <MX_SPI6_Init+0x48>
{
24004168:	b508      	push	{r3, lr}
  hspi6.Init.Mode = SPI_MODE_SLAVE;
2400416a:	2300      	movs	r3, #0
  hspi6.Instance = SPI6;
2400416c:	6002      	str	r2, [r0, #0]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
2400416e:	2207      	movs	r2, #7
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
24004170:	6183      	str	r3, [r0, #24]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
24004172:	60c2      	str	r2, [r0, #12]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
24004174:	ed80 7b08 	vstr	d7, [r0, #32]
24004178:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
2400417c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
24004180:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi6.Init.CRCPolynomial = 0x0;
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24004184:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24004188:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
2400418c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24004190:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24004194:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
24004198:	f006 fd1c 	bl	2400abd4 <HAL_SPI_Init>
2400419c:	b900      	cbnz	r0, 240041a0 <MX_SPI6_Init+0x40>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
2400419e:	bd08      	pop	{r3, pc}
240041a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
240041a4:	f7ff be04 	b.w	24003db0 <Error_Handler>
	...
240041b0:	2001d488 	.word	0x2001d488
240041b4:	58001400 	.word	0x58001400

240041b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
240041b8:	b5f0      	push	{r4, r5, r6, r7, lr}
240041ba:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
240041bc:	2100      	movs	r1, #0
{
240041be:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240041c0:	22c0      	movs	r2, #192	; 0xc0
240041c2:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240041c4:	910a      	str	r1, [sp, #40]	; 0x28
240041c6:	e9cd 1106 	strd	r1, r1, [sp, #24]
240041ca:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240041ce:	f010 fe15 	bl	24014dfc <memset>
  if(spiHandle->Instance==SPI1)
240041d2:	6823      	ldr	r3, [r4, #0]
240041d4:	4a8f      	ldr	r2, [pc, #572]	; (24004414 <HAL_SPI_MspInit+0x25c>)
240041d6:	4293      	cmp	r3, r2
240041d8:	d005      	beq.n	240041e6 <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI6)
240041da:	4a8f      	ldr	r2, [pc, #572]	; (24004418 <HAL_SPI_MspInit+0x260>)
240041dc:	4293      	cmp	r3, r2
240041de:	f000 8097 	beq.w	24004310 <HAL_SPI_MspInit+0x158>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
240041e2:	b03d      	add	sp, #244	; 0xf4
240041e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
240041e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240041ea:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240041ec:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
240041ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240041f2:	f003 fedb 	bl	24007fac <HAL_RCCEx_PeriphCLKConfig>
240041f6:	2800      	cmp	r0, #0
240041f8:	f040 80ff 	bne.w	240043fa <HAL_SPI_MspInit+0x242>
    __HAL_RCC_SPI1_CLK_ENABLE();
240041fc:	4b87      	ldr	r3, [pc, #540]	; (2400441c <HAL_SPI_MspInit+0x264>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240041fe:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24004200:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004202:	2703      	movs	r7, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
24004204:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004208:	4885      	ldr	r0, [pc, #532]	; (24004420 <HAL_SPI_MspInit+0x268>)
    __HAL_RCC_SPI1_CLK_ENABLE();
2400420a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
2400420e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
24004212:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
24004216:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
2400421a:	9201      	str	r2, [sp, #4]
2400421c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400421e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004222:	f042 0202 	orr.w	r2, r2, #2
24004226:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
2400422a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400422e:	f002 0202 	and.w	r2, r2, #2
24004232:	9202      	str	r2, [sp, #8]
24004234:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004236:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400423a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400423e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004242:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
24004248:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
2400424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
2400424e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004250:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
24004252:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24004254:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24004256:	e9cd 2306 	strd	r2, r3, [sp, #24]
2400425a:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400425e:	f001 ff79 	bl	24006154 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
24004262:	f44f 6240 	mov.w	r2, #3072	; 0xc00
24004266:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24004268:	a906      	add	r1, sp, #24
2400426a:	486e      	ldr	r0, [pc, #440]	; (24004424 <HAL_SPI_MspInit+0x26c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
2400426c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
2400426e:	e9cd 2306 	strd	r2, r3, [sp, #24]
24004272:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24004276:	f001 ff6d 	bl	24006154 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream6;
2400427a:	4e6b      	ldr	r6, [pc, #428]	; (24004428 <HAL_SPI_MspInit+0x270>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
2400427c:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream6;
2400427e:	496b      	ldr	r1, [pc, #428]	; (2400442c <HAL_SPI_MspInit+0x274>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
24004280:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
24004282:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
24004284:	e886 000e 	stmia.w	r6, {r1, r2, r3}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
24004288:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
2400428c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
24004290:	e9c6 3103 	strd	r3, r1, [r6, #12]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24004294:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004298:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
2400429c:	61f2      	str	r2, [r6, #28]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2400429e:	2204      	movs	r2, #4
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
240042a0:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240042a4:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240042a6:	e9c6 1208 	strd	r1, r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240042aa:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
240042ac:	f000 fc52 	bl	24004b54 <HAL_DMA_Init>
240042b0:	2800      	cmp	r0, #0
240042b2:	f040 809f 	bne.w	240043f4 <HAL_SPI_MspInit+0x23c>
    hdma_spi1_tx.Instance = DMA1_Stream0;
240042b6:	4d5e      	ldr	r5, [pc, #376]	; (24004430 <HAL_SPI_MspInit+0x278>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
240042b8:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream0;
240042ba:	495e      	ldr	r1, [pc, #376]	; (24004434 <HAL_SPI_MspInit+0x27c>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240042bc:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
240042be:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
240042c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream0;
240042c4:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
240042c6:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
240042c8:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240042ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240042ce:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
240042d0:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
240042d2:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
240042d4:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
240042d6:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240042da:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
240042dc:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
240042de:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240042e0:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240042e2:	622a      	str	r2, [r5, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240042e4:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
240042e6:	67e6      	str	r6, [r4, #124]	; 0x7c
240042e8:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
240042ea:	61e9      	str	r1, [r5, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240042ec:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
240042f0:	f000 fc30 	bl	24004b54 <HAL_DMA_Init>
240042f4:	2800      	cmp	r0, #0
240042f6:	d17a      	bne.n	240043ee <HAL_SPI_MspInit+0x236>
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
240042f8:	2200      	movs	r2, #0
240042fa:	2101      	movs	r1, #1
240042fc:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
240042fe:	67a5      	str	r5, [r4, #120]	; 0x78
24004300:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
24004302:	f000 fa95 	bl	24004830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
24004306:	2023      	movs	r0, #35	; 0x23
24004308:	f000 fad0 	bl	240048ac <HAL_NVIC_EnableIRQ>
}
2400430c:	b03d      	add	sp, #244	; 0xf4
2400430e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
24004310:	f44f 4280 	mov.w	r2, #16384	; 0x4000
24004314:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24004316:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
24004318:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400431c:	f003 fe46 	bl	24007fac <HAL_RCCEx_PeriphCLKConfig>
24004320:	2800      	cmp	r0, #0
24004322:	d16d      	bne.n	24004400 <HAL_SPI_MspInit+0x248>
    __HAL_RCC_SPI6_CLK_ENABLE();
24004324:	4b3d      	ldr	r3, [pc, #244]	; (2400441c <HAL_SPI_MspInit+0x264>)
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
24004326:	2008      	movs	r0, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24004328:	a906      	add	r1, sp, #24
    hdma_spi6_rx.Instance = BDMA_Channel0;
2400432a:	4e43      	ldr	r6, [pc, #268]	; (24004438 <HAL_SPI_MspInit+0x280>)
    __HAL_RCC_SPI6_CLK_ENABLE();
2400432c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24004330:	f042 0220 	orr.w	r2, r2, #32
24004334:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24004338:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
2400433c:	f002 0220 	and.w	r2, r2, #32
24004340:	9204      	str	r2, [sp, #16]
24004342:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
24004344:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24004348:	f042 0201 	orr.w	r2, r2, #1
2400434c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
24004350:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
24004352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
24004356:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
24004358:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400435c:	4837      	ldr	r0, [pc, #220]	; (2400443c <HAL_SPI_MspInit+0x284>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
2400435e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
24004360:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
24004362:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
24004364:	e9cd 2306 	strd	r2, r3, [sp, #24]
24004368:	2200      	movs	r2, #0
2400436a:	2302      	movs	r3, #2
2400436c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24004370:	f001 fef0 	bl	24006154 <HAL_GPIO_Init>
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
24004374:	2300      	movs	r3, #0
    hdma_spi6_rx.Instance = BDMA_Channel0;
24004376:	4932      	ldr	r1, [pc, #200]	; (24004440 <HAL_SPI_MspInit+0x288>)
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
24004378:	220b      	movs	r2, #11
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
2400437a:	4630      	mov	r0, r6
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
2400437c:	e9c6 1200 	strd	r1, r2, [r6]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
24004380:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
24004384:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
24004388:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
2400438c:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004390:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
24004394:	6131      	str	r1, [r6, #16]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24004396:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
2400439a:	f000 fbdb 	bl	24004b54 <HAL_DMA_Init>
2400439e:	2800      	cmp	r0, #0
240043a0:	d134      	bne.n	2400440c <HAL_SPI_MspInit+0x254>
    hdma_spi6_tx.Instance = BDMA_Channel1;
240043a2:	4d28      	ldr	r5, [pc, #160]	; (24004444 <HAL_SPI_MspInit+0x28c>)
    hdma_spi6_tx.Init.Request = BDMA_REQUEST_SPI6_TX;
240043a4:	220c      	movs	r2, #12
    hdma_spi6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240043a6:	2300      	movs	r3, #0
    hdma_spi6_tx.Instance = BDMA_Channel1;
240043a8:	4927      	ldr	r1, [pc, #156]	; (24004448 <HAL_SPI_MspInit+0x290>)
    hdma_spi6_tx.Init.Request = BDMA_REQUEST_SPI6_TX;
240043aa:	606a      	str	r2, [r5, #4]
    hdma_spi6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
240043ac:	2240      	movs	r2, #64	; 0x40
    hdma_spi6_tx.Instance = BDMA_Channel1;
240043ae:	6029      	str	r1, [r5, #0]
    hdma_spi6_tx.Init.MemInc = DMA_MINC_ENABLE;
240043b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240043b4:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_spi6_tx) != HAL_OK)
240043b6:	4628      	mov	r0, r5
    hdma_spi6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
240043b8:	616b      	str	r3, [r5, #20]
    hdma_spi6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
240043ba:	60aa      	str	r2, [r5, #8]
    hdma_spi6_tx.Init.Mode = DMA_CIRCULAR;
240043bc:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240043c0:	61ab      	str	r3, [r5, #24]
    hdma_spi6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240043c2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
240043c6:	67e6      	str	r6, [r4, #124]	; 0x7c
240043c8:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi6_tx.Init.MemInc = DMA_MINC_ENABLE;
240043ca:	6129      	str	r1, [r5, #16]
    hdma_spi6_tx.Init.Mode = DMA_CIRCULAR;
240043cc:	61ea      	str	r2, [r5, #28]
    hdma_spi6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240043ce:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi6_tx) != HAL_OK)
240043d0:	f000 fbc0 	bl	24004b54 <HAL_DMA_Init>
240043d4:	b9b8      	cbnz	r0, 24004406 <HAL_SPI_MspInit+0x24e>
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
240043d6:	2200      	movs	r2, #0
240043d8:	2107      	movs	r1, #7
240043da:	2056      	movs	r0, #86	; 0x56
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi6_tx);
240043dc:	67a5      	str	r5, [r4, #120]	; 0x78
240043de:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
240043e0:	f000 fa26 	bl	24004830 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
240043e4:	2056      	movs	r0, #86	; 0x56
240043e6:	f000 fa61 	bl	240048ac <HAL_NVIC_EnableIRQ>
}
240043ea:	b03d      	add	sp, #244	; 0xf4
240043ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
240043ee:	f7ff fcdf 	bl	24003db0 <Error_Handler>
240043f2:	e781      	b.n	240042f8 <HAL_SPI_MspInit+0x140>
      Error_Handler();
240043f4:	f7ff fcdc 	bl	24003db0 <Error_Handler>
240043f8:	e75d      	b.n	240042b6 <HAL_SPI_MspInit+0xfe>
      Error_Handler();
240043fa:	f7ff fcd9 	bl	24003db0 <Error_Handler>
240043fe:	e6fd      	b.n	240041fc <HAL_SPI_MspInit+0x44>
      Error_Handler();
24004400:	f7ff fcd6 	bl	24003db0 <Error_Handler>
24004404:	e78e      	b.n	24004324 <HAL_SPI_MspInit+0x16c>
      Error_Handler();
24004406:	f7ff fcd3 	bl	24003db0 <Error_Handler>
2400440a:	e7e4      	b.n	240043d6 <HAL_SPI_MspInit+0x21e>
      Error_Handler();
2400440c:	f7ff fcd0 	bl	24003db0 <Error_Handler>
24004410:	e7c7      	b.n	240043a2 <HAL_SPI_MspInit+0x1ea>
24004412:	bf00      	nop
24004414:	40013000 	.word	0x40013000
24004418:	58001400 	.word	0x58001400
2400441c:	58024400 	.word	0x58024400
24004420:	58020400 	.word	0x58020400
24004424:	58021800 	.word	0x58021800
24004428:	2001d204 	.word	0x2001d204
2400442c:	400200a0 	.word	0x400200a0
24004430:	2001d27c 	.word	0x2001d27c
24004434:	40020010 	.word	0x40020010
24004438:	2001d2f4 	.word	0x2001d2f4
2400443c:	58020000 	.word	0x58020000
24004440:	58025408 	.word	0x58025408
24004444:	2001d36c 	.word	0x2001d36c
24004448:	5802541c 	.word	0x5802541c

2400444c <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
2400444c:	e7fe      	b.n	2400444c <Default_Handler>
2400444e:	bf00      	nop

24004450 <Reset_Handler>:
	asm ("ldr sp, =_estack");
24004450:	f8df d0c0 	ldr.w	sp, [pc, #192]	; 24004514 <Reset_Handler+0xc4>
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
24004454:	481f      	ldr	r0, [pc, #124]	; (240044d4 <Reset_Handler+0x84>)
24004456:	4a20      	ldr	r2, [pc, #128]	; (240044d8 <Reset_Handler+0x88>)
24004458:	4290      	cmp	r0, r2
2400445a:	d003      	beq.n	24004464 <Reset_Handler+0x14>
		*pDest = *pSource;
2400445c:	1a12      	subs	r2, r2, r0
2400445e:	491f      	ldr	r1, [pc, #124]	; (240044dc <Reset_Handler+0x8c>)
24004460:	f010 fcfe 	bl	24014e60 <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
24004464:	481e      	ldr	r0, [pc, #120]	; (240044e0 <Reset_Handler+0x90>)
24004466:	4a1f      	ldr	r2, [pc, #124]	; (240044e4 <Reset_Handler+0x94>)
24004468:	4290      	cmp	r0, r2
2400446a:	d003      	beq.n	24004474 <Reset_Handler+0x24>
		*pDest = 0;
2400446c:	1a12      	subs	r2, r2, r0
2400446e:	2100      	movs	r1, #0
24004470:	f010 fcc4 	bl	24014dfc <memset>
	for (pDest = &_ssram1_bss; pDest != &_esram1_bss; pDest++)
24004474:	481c      	ldr	r0, [pc, #112]	; (240044e8 <Reset_Handler+0x98>)
24004476:	4a1d      	ldr	r2, [pc, #116]	; (240044ec <Reset_Handler+0x9c>)
24004478:	4290      	cmp	r0, r2
2400447a:	d003      	beq.n	24004484 <Reset_Handler+0x34>
		*pDest = 0;
2400447c:	1a12      	subs	r2, r2, r0
2400447e:	2100      	movs	r1, #0
24004480:	f010 fcbc 	bl	24014dfc <memset>
	for (pDest = &_ssram2_dma_bss; pDest != &_esram2_dma_bss; pDest++)
24004484:	481a      	ldr	r0, [pc, #104]	; (240044f0 <Reset_Handler+0xa0>)
24004486:	4a1b      	ldr	r2, [pc, #108]	; (240044f4 <Reset_Handler+0xa4>)
24004488:	4290      	cmp	r0, r2
2400448a:	d003      	beq.n	24004494 <Reset_Handler+0x44>
		*pDest = 0;
2400448c:	1a12      	subs	r2, r2, r0
2400448e:	2100      	movs	r1, #0
24004490:	f010 fcb4 	bl	24014dfc <memset>
	for (pDest = &_ssram2_bss; pDest != &_esram2_bss; pDest++)
24004494:	4818      	ldr	r0, [pc, #96]	; (240044f8 <Reset_Handler+0xa8>)
24004496:	4a19      	ldr	r2, [pc, #100]	; (240044fc <Reset_Handler+0xac>)
24004498:	4290      	cmp	r0, r2
2400449a:	d003      	beq.n	240044a4 <Reset_Handler+0x54>
		*pDest = 0;
2400449c:	1a12      	subs	r2, r2, r0
2400449e:	2100      	movs	r1, #0
240044a0:	f010 fcac 	bl	24014dfc <memset>
	for (pDest = &_ssram3_bss; pDest != &_esram3_bss; pDest++)
240044a4:	4816      	ldr	r0, [pc, #88]	; (24004500 <Reset_Handler+0xb0>)
240044a6:	4a17      	ldr	r2, [pc, #92]	; (24004504 <Reset_Handler+0xb4>)
240044a8:	4290      	cmp	r0, r2
240044aa:	d003      	beq.n	240044b4 <Reset_Handler+0x64>
		*pDest = 0;
240044ac:	1a12      	subs	r2, r2, r0
240044ae:	2100      	movs	r1, #0
240044b0:	f010 fca4 	bl	24014dfc <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
240044b4:	4814      	ldr	r0, [pc, #80]	; (24004508 <Reset_Handler+0xb8>)
240044b6:	4a15      	ldr	r2, [pc, #84]	; (2400450c <Reset_Handler+0xbc>)
240044b8:	4290      	cmp	r0, r2
240044ba:	d003      	beq.n	240044c4 <Reset_Handler+0x74>
		*pDest = *pSource;
240044bc:	1a12      	subs	r2, r2, r0
240044be:	4914      	ldr	r1, [pc, #80]	; (24004510 <Reset_Handler+0xc0>)
240044c0:	f010 fcce 	bl	24014e60 <memcpy>
	SystemInit();
240044c4:	f000 f8aa 	bl	2400461c <SystemInit>
	__libc_init_array();
240044c8:	f010 fca6 	bl	24014e18 <__libc_init_array>
	(void)main();
240044cc:	f7fe fdfc 	bl	240030c8 <main>
	for (;;) ;
240044d0:	e7fe      	b.n	240044d0 <Reset_Handler+0x80>
240044d2:	bf00      	nop
240044d4:	20000000 	.word	0x20000000
240044d8:	200007b8 	.word	0x200007b8
240044dc:	2402cc70 	.word	0x2402cc70
240044e0:	200007b8 	.word	0x200007b8
240044e4:	2001dcfc 	.word	0x2001dcfc
240044e8:	24040000 	.word	0x24040000
240044ec:	2407f7a0 	.word	0x2407f7a0
240044f0:	30000000 	.word	0x30000000
240044f4:	30000880 	.word	0x30000880
240044f8:	30002000 	.word	0x30002000
240044fc:	30035180 	.word	0x30035180
24004500:	38000000 	.word	0x38000000
24004504:	38000080 	.word	0x38000080
24004508:	00000400 	.word	0x00000400
2400450c:	0000a528 	.word	0x0000a528
24004510:	2402d428 	.word	0x2402d428
24004514:	20020000 	.word	0x20020000

24004518 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24004518:	4b07      	ldr	r3, [pc, #28]	; (24004538 <HAL_MspInit+0x20>)
{
2400451a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400451c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24004520:	f042 0202 	orr.w	r2, r2, #2
24004524:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24004528:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400452c:	f003 0302 	and.w	r3, r3, #2
24004530:	9301      	str	r3, [sp, #4]
24004532:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24004534:	b002      	add	sp, #8
24004536:	4770      	bx	lr
24004538:	58024400 	.word	0x58024400

2400453c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
2400453c:	e7fe      	b.n	2400453c <NMI_Handler>
2400453e:	bf00      	nop

24004540 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24004540:	e7fe      	b.n	24004540 <HardFault_Handler>
24004542:	bf00      	nop

24004544 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
24004544:	e7fe      	b.n	24004544 <MemManage_Handler>
24004546:	bf00      	nop

24004548 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24004548:	e7fe      	b.n	24004548 <BusFault_Handler>
2400454a:	bf00      	nop

2400454c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
2400454c:	e7fe      	b.n	2400454c <UsageFault_Handler>
2400454e:	bf00      	nop

24004550 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24004550:	4770      	bx	lr
24004552:	bf00      	nop

24004554 <DebugMon_Handler>:
24004554:	4770      	bx	lr
24004556:	bf00      	nop

24004558 <PendSV_Handler>:
24004558:	4770      	bx	lr
2400455a:	bf00      	nop

2400455c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
2400455c:	f000 b92c 	b.w	240047b8 <HAL_IncTick>

24004560 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
24004560:	4801      	ldr	r0, [pc, #4]	; (24004568 <DMA1_Stream0_IRQHandler+0x8>)
24004562:	f001 b94d 	b.w	24005800 <HAL_DMA_IRQHandler>
24004566:	bf00      	nop
24004568:	2001d27c 	.word	0x2001d27c

2400456c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
2400456c:	4801      	ldr	r0, [pc, #4]	; (24004574 <DMA1_Stream1_IRQHandler+0x8>)
2400456e:	f001 b947 	b.w	24005800 <HAL_DMA_IRQHandler>
24004572:	bf00      	nop
24004574:	2001cf68 	.word	0x2001cf68

24004578 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
24004578:	4801      	ldr	r0, [pc, #4]	; (24004580 <DMA1_Stream2_IRQHandler+0x8>)
2400457a:	f001 b941 	b.w	24005800 <HAL_DMA_IRQHandler>
2400457e:	bf00      	nop
24004580:	2001cfe0 	.word	0x2001cfe0

24004584 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
24004584:	4801      	ldr	r0, [pc, #4]	; (2400458c <DMA1_Stream3_IRQHandler+0x8>)
24004586:	f001 b93b 	b.w	24005800 <HAL_DMA_IRQHandler>
2400458a:	bf00      	nop
2400458c:	2001496c 	.word	0x2001496c

24004590 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
24004590:	4801      	ldr	r0, [pc, #4]	; (24004598 <DMA1_Stream4_IRQHandler+0x8>)
24004592:	f001 b935 	b.w	24005800 <HAL_DMA_IRQHandler>
24004596:	bf00      	nop
24004598:	200149e4 	.word	0x200149e4

2400459c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
2400459c:	4801      	ldr	r0, [pc, #4]	; (240045a4 <DMA1_Stream6_IRQHandler+0x8>)
2400459e:	f001 b92f 	b.w	24005800 <HAL_DMA_IRQHandler>
240045a2:	bf00      	nop
240045a4:	2001d204 	.word	0x2001d204

240045a8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
240045a8:	2040      	movs	r0, #64	; 0x40
240045aa:	f001 bf27 	b.w	240063fc <HAL_GPIO_EXTI_IRQHandler>
240045ae:	bf00      	nop

240045b0 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
240045b0:	4801      	ldr	r0, [pc, #4]	; (240045b8 <I2C1_EV_IRQHandler+0x8>)
240045b2:	f002 ba4d 	b.w	24006a50 <HAL_I2C_EV_IRQHandler>
240045b6:	bf00      	nop
240045b8:	20014a5c 	.word	0x20014a5c

240045bc <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
240045bc:	4801      	ldr	r0, [pc, #4]	; (240045c4 <I2C1_ER_IRQHandler+0x8>)
240045be:	f002 bbbf 	b.w	24006d40 <HAL_I2C_ER_IRQHandler>
240045c2:	bf00      	nop
240045c4:	20014a5c 	.word	0x20014a5c

240045c8 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
240045c8:	4801      	ldr	r0, [pc, #4]	; (240045d0 <I2C2_EV_IRQHandler+0x8>)
240045ca:	f002 ba41 	b.w	24006a50 <HAL_I2C_EV_IRQHandler>
240045ce:	bf00      	nop
240045d0:	20014ab0 	.word	0x20014ab0

240045d4 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
240045d4:	4801      	ldr	r0, [pc, #4]	; (240045dc <I2C2_ER_IRQHandler+0x8>)
240045d6:	f002 bbb3 	b.w	24006d40 <HAL_I2C_ER_IRQHandler>
240045da:	bf00      	nop
240045dc:	20014ab0 	.word	0x20014ab0

240045e0 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
240045e0:	4801      	ldr	r0, [pc, #4]	; (240045e8 <SPI1_IRQHandler+0x8>)
240045e2:	f006 bd85 	b.w	2400b0f0 <HAL_SPI_IRQHandler>
240045e6:	bf00      	nop
240045e8:	2001d3e8 	.word	0x2001d3e8

240045ec <SPI6_IRQHandler>:
void SPI6_IRQHandler(void)
{
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
240045ec:	4801      	ldr	r0, [pc, #4]	; (240045f4 <SPI6_IRQHandler+0x8>)
240045ee:	f006 bd7f 	b.w	2400b0f0 <HAL_SPI_IRQHandler>
240045f2:	bf00      	nop
240045f4:	2001d488 	.word	0x2001d488

240045f8 <DMAMUX1_OVR_IRQHandler>:
{
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
240045f8:	4801      	ldr	r0, [pc, #4]	; (24004600 <DMAMUX1_OVR_IRQHandler+0x8>)
240045fa:	f001 bd7b 	b.w	240060f4 <HAL_DMAEx_MUX_IRQHandler>
240045fe:	bf00      	nop
24004600:	2001cf68 	.word	0x2001cf68

24004604 <BDMA_Channel0_IRQHandler>:
void BDMA_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
24004604:	4801      	ldr	r0, [pc, #4]	; (2400460c <BDMA_Channel0_IRQHandler+0x8>)
24004606:	f001 b8fb 	b.w	24005800 <HAL_DMA_IRQHandler>
2400460a:	bf00      	nop
2400460c:	2001d2f4 	.word	0x2001d2f4

24004610 <BDMA_Channel1_IRQHandler>:
void BDMA_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_tx);
24004610:	4801      	ldr	r0, [pc, #4]	; (24004618 <BDMA_Channel1_IRQHandler+0x8>)
24004612:	f001 b8f5 	b.w	24005800 <HAL_DMA_IRQHandler>
24004616:	bf00      	nop
24004618:	2001d36c 	.word	0x2001d36c

2400461c <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
2400461c:	4930      	ldr	r1, [pc, #192]	; (240046e0 <SystemInit+0xc4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
2400461e:	4a31      	ldr	r2, [pc, #196]	; (240046e4 <SystemInit+0xc8>)
{
24004620:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24004622:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
{
24004626:	b083      	sub	sp, #12
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24004628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
2400462c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24004630:	6813      	ldr	r3, [r2, #0]
24004632:	f003 030f 	and.w	r3, r3, #15
24004636:	2b06      	cmp	r3, #6
24004638:	d805      	bhi.n	24004646 <SystemInit+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
2400463a:	6813      	ldr	r3, [r2, #0]
2400463c:	f023 030f 	bic.w	r3, r3, #15
24004640:	f043 0307 	orr.w	r3, r3, #7
24004644:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24004646:	4b28      	ldr	r3, [pc, #160]	; (240046e8 <SystemInit+0xcc>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24004648:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
2400464a:	4a28      	ldr	r2, [pc, #160]	; (240046ec <SystemInit+0xd0>)
  RCC->CR |= RCC_CR_HSION;
2400464c:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
2400464e:	4825      	ldr	r0, [pc, #148]	; (240046e4 <SystemInit+0xc8>)
  RCC->CR |= RCC_CR_HSION;
24004650:	f041 0101 	orr.w	r1, r1, #1
24004654:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
24004656:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
24004658:	6819      	ldr	r1, [r3, #0]
2400465a:	400a      	ands	r2, r1
2400465c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
2400465e:	6803      	ldr	r3, [r0, #0]
24004660:	071b      	lsls	r3, r3, #28
24004662:	d505      	bpl.n	24004670 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24004664:	6803      	ldr	r3, [r0, #0]
24004666:	f023 030f 	bic.w	r3, r3, #15
2400466a:	f043 0307 	orr.w	r3, r3, #7
2400466e:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24004670:	4b1d      	ldr	r3, [pc, #116]	; (240046e8 <SystemInit+0xcc>)
24004672:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24004674:	491e      	ldr	r1, [pc, #120]	; (240046f0 <SystemInit+0xd4>)
  RCC->PLLCKSELR = 0x02020200;
24004676:	4c1f      	ldr	r4, [pc, #124]	; (240046f4 <SystemInit+0xd8>)
  RCC->PLLCFGR = 0x01FF0000;
24004678:	481f      	ldr	r0, [pc, #124]	; (240046f8 <SystemInit+0xdc>)
  RCC->D1CFGR = 0x00000000;
2400467a:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
2400467c:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
2400467e:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
24004680:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
24004682:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
24004684:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24004686:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24004688:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
2400468a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
2400468c:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
2400468e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24004690:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24004692:	4c1a      	ldr	r4, [pc, #104]	; (240046fc <SystemInit+0xe0>)
  RCC->CR &= 0xFFFBFFFFU;
24004694:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24004698:	4919      	ldr	r1, [pc, #100]	; (24004700 <SystemInit+0xe4>)
  RCC->CR &= 0xFFFBFFFFU;
2400469a:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
2400469c:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
2400469e:	6823      	ldr	r3, [r4, #0]
240046a0:	4019      	ands	r1, r3
240046a2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
240046a6:	d203      	bcs.n	240046b0 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
240046a8:	4b16      	ldr	r3, [pc, #88]	; (24004704 <SystemInit+0xe8>)
240046aa:	2201      	movs	r2, #1
240046ac:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
240046b0:	4b0d      	ldr	r3, [pc, #52]	; (240046e8 <SystemInit+0xcc>)
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
240046b2:	f243 04d2 	movw	r4, #12498	; 0x30d2
240046b6:	4814      	ldr	r0, [pc, #80]	; (24004708 <SystemInit+0xec>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
240046b8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
240046bc:	4908      	ldr	r1, [pc, #32]	; (240046e0 <SystemInit+0xc4>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
240046be:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
240046c2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  tmpreg = RCC->AHB2ENR;
240046c6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
240046ca:	9301      	str	r3, [sp, #4]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
240046cc:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  (void) tmpreg;
240046d0:	9a01      	ldr	r2, [sp, #4]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
240046d2:	6004      	str	r4, [r0, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
240046d4:	608b      	str	r3, [r1, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
240046d6:	b003      	add	sp, #12
240046d8:	f85d 4b04 	ldr.w	r4, [sp], #4
240046dc:	4770      	bx	lr
240046de:	bf00      	nop
240046e0:	e000ed00 	.word	0xe000ed00
240046e4:	52002000 	.word	0x52002000
240046e8:	58024400 	.word	0x58024400
240046ec:	eaf6ed7f 	.word	0xeaf6ed7f
240046f0:	01010280 	.word	0x01010280
240046f4:	02020200 	.word	0x02020200
240046f8:	01ff0000 	.word	0x01ff0000
240046fc:	5c001000 	.word	0x5c001000
24004700:	ffff0000 	.word	0xffff0000
24004704:	51008000 	.word	0x51008000
24004708:	52004000 	.word	0x52004000

2400470c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
2400470c:	4b0f      	ldr	r3, [pc, #60]	; (2400474c <HAL_InitTick+0x40>)
2400470e:	781b      	ldrb	r3, [r3, #0]
24004710:	b90b      	cbnz	r3, 24004716 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
24004712:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
24004714:	4770      	bx	lr
{
24004716:	b510      	push	{r4, lr}
24004718:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
2400471a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
2400471e:	4a0c      	ldr	r2, [pc, #48]	; (24004750 <HAL_InitTick+0x44>)
24004720:	fbb0 f3f3 	udiv	r3, r0, r3
24004724:	6810      	ldr	r0, [r2, #0]
24004726:	fbb0 f0f3 	udiv	r0, r0, r3
2400472a:	f000 f8cd 	bl	240048c8 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2400472e:	2c0f      	cmp	r4, #15
24004730:	d800      	bhi.n	24004734 <HAL_InitTick+0x28>
24004732:	b108      	cbz	r0, 24004738 <HAL_InitTick+0x2c>
    return HAL_ERROR;
24004734:	2001      	movs	r0, #1
}
24004736:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24004738:	2200      	movs	r2, #0
2400473a:	4621      	mov	r1, r4
2400473c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24004740:	f000 f876 	bl	24004830 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24004744:	4b03      	ldr	r3, [pc, #12]	; (24004754 <HAL_InitTick+0x48>)
24004746:	2000      	movs	r0, #0
24004748:	601c      	str	r4, [r3, #0]
}
2400474a:	bd10      	pop	{r4, pc}
2400474c:	20000750 	.word	0x20000750
24004750:	20000748 	.word	0x20000748
24004754:	20000754 	.word	0x20000754

24004758 <HAL_Init>:
{
24004758:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2400475a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400475c:	4c12      	ldr	r4, [pc, #72]	; (240047a8 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2400475e:	f000 f855 	bl	2400480c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004762:	f003 f8d1 	bl	24007908 <HAL_RCC_GetSysClockFreq>
24004766:	4b11      	ldr	r3, [pc, #68]	; (240047ac <HAL_Init+0x54>)
24004768:	4911      	ldr	r1, [pc, #68]	; (240047b0 <HAL_Init+0x58>)
2400476a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400476c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400476e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004772:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004776:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004778:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400477a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
2400477e:	490d      	ldr	r1, [pc, #52]	; (240047b4 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004780:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004784:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004786:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
2400478a:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
2400478c:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400478e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24004790:	f7ff ffbc 	bl	2400470c <HAL_InitTick>
24004794:	b110      	cbz	r0, 2400479c <HAL_Init+0x44>
    return HAL_ERROR;
24004796:	2401      	movs	r4, #1
}
24004798:	4620      	mov	r0, r4
2400479a:	bd10      	pop	{r4, pc}
2400479c:	4604      	mov	r4, r0
  HAL_MspInit();
2400479e:	f7ff febb 	bl	24004518 <HAL_MspInit>
}
240047a2:	4620      	mov	r0, r4
240047a4:	bd10      	pop	{r4, pc}
240047a6:	bf00      	nop
240047a8:	2000074c 	.word	0x2000074c
240047ac:	58024400 	.word	0x58024400
240047b0:	240174c0 	.word	0x240174c0
240047b4:	20000748 	.word	0x20000748

240047b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
240047b8:	4a03      	ldr	r2, [pc, #12]	; (240047c8 <HAL_IncTick+0x10>)
240047ba:	4b04      	ldr	r3, [pc, #16]	; (240047cc <HAL_IncTick+0x14>)
240047bc:	6811      	ldr	r1, [r2, #0]
240047be:	781b      	ldrb	r3, [r3, #0]
240047c0:	440b      	add	r3, r1
240047c2:	6013      	str	r3, [r2, #0]
}
240047c4:	4770      	bx	lr
240047c6:	bf00      	nop
240047c8:	2001d524 	.word	0x2001d524
240047cc:	20000750 	.word	0x20000750

240047d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
240047d0:	4b01      	ldr	r3, [pc, #4]	; (240047d8 <HAL_GetTick+0x8>)
240047d2:	6818      	ldr	r0, [r3, #0]
}
240047d4:	4770      	bx	lr
240047d6:	bf00      	nop
240047d8:	2001d524 	.word	0x2001d524

240047dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
240047dc:	b538      	push	{r3, r4, r5, lr}
240047de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
240047e0:	f7ff fff6 	bl	240047d0 <HAL_GetTick>
240047e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
240047e6:	1c63      	adds	r3, r4, #1
240047e8:	d002      	beq.n	240047f0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
240047ea:	4b04      	ldr	r3, [pc, #16]	; (240047fc <HAL_Delay+0x20>)
240047ec:	781b      	ldrb	r3, [r3, #0]
240047ee:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
240047f0:	f7ff ffee 	bl	240047d0 <HAL_GetTick>
240047f4:	1b43      	subs	r3, r0, r5
240047f6:	42a3      	cmp	r3, r4
240047f8:	d3fa      	bcc.n	240047f0 <HAL_Delay+0x14>
  {
  }
}
240047fa:	bd38      	pop	{r3, r4, r5, pc}
240047fc:	20000750 	.word	0x20000750

24004800 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
24004800:	4b01      	ldr	r3, [pc, #4]	; (24004808 <HAL_GetREVID+0x8>)
24004802:	6818      	ldr	r0, [r3, #0]
}
24004804:	0c00      	lsrs	r0, r0, #16
24004806:	4770      	bx	lr
24004808:	5c001000 	.word	0x5c001000

2400480c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
2400480c:	4906      	ldr	r1, [pc, #24]	; (24004828 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2400480e:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24004812:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
24004814:	4b05      	ldr	r3, [pc, #20]	; (2400482c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24004816:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24004818:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2400481c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24004820:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
24004822:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
24004824:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
24004826:	4770      	bx	lr
24004828:	e000ed00 	.word	0xe000ed00
2400482c:	05fa0000 	.word	0x05fa0000

24004830 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24004830:	4b1b      	ldr	r3, [pc, #108]	; (240048a0 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24004832:	b500      	push	{lr}
24004834:	68db      	ldr	r3, [r3, #12]
24004836:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2400483a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2400483e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24004842:	f1be 0f04 	cmp.w	lr, #4
24004846:	bf28      	it	cs
24004848:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2400484c:	f1bc 0f06 	cmp.w	ip, #6
24004850:	d91a      	bls.n	24004888 <HAL_NVIC_SetPriority+0x58>
24004852:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24004854:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
24004858:	fa0c fc03 	lsl.w	ip, ip, r3
2400485c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24004860:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
24004864:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24004866:	fa0c fc0e 	lsl.w	ip, ip, lr
2400486a:	ea21 010c 	bic.w	r1, r1, ip
2400486e:	fa01 f103 	lsl.w	r1, r1, r3
24004872:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
24004876:	db0a      	blt.n	2400488e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004878:	0109      	lsls	r1, r1, #4
2400487a:	4b0a      	ldr	r3, [pc, #40]	; (240048a4 <HAL_NVIC_SetPriority+0x74>)
2400487c:	b2c9      	uxtb	r1, r1
2400487e:	4403      	add	r3, r0
24004880:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
24004884:	f85d fb04 	ldr.w	pc, [sp], #4
24004888:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2400488a:	4613      	mov	r3, r2
2400488c:	e7e8      	b.n	24004860 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2400488e:	f000 000f 	and.w	r0, r0, #15
24004892:	0109      	lsls	r1, r1, #4
24004894:	4b04      	ldr	r3, [pc, #16]	; (240048a8 <HAL_NVIC_SetPriority+0x78>)
24004896:	b2c9      	uxtb	r1, r1
24004898:	4403      	add	r3, r0
2400489a:	7619      	strb	r1, [r3, #24]
2400489c:	f85d fb04 	ldr.w	pc, [sp], #4
240048a0:	e000ed00 	.word	0xe000ed00
240048a4:	e000e100 	.word	0xe000e100
240048a8:	e000ecfc 	.word	0xe000ecfc

240048ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
240048ac:	2800      	cmp	r0, #0
240048ae:	db07      	blt.n	240048c0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
240048b0:	2301      	movs	r3, #1
240048b2:	f000 011f 	and.w	r1, r0, #31
240048b6:	4a03      	ldr	r2, [pc, #12]	; (240048c4 <HAL_NVIC_EnableIRQ+0x18>)
240048b8:	0940      	lsrs	r0, r0, #5
240048ba:	408b      	lsls	r3, r1
240048bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
240048c0:	4770      	bx	lr
240048c2:	bf00      	nop
240048c4:	e000e100 	.word	0xe000e100

240048c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
240048c8:	1e43      	subs	r3, r0, #1
240048ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
240048ce:	d20c      	bcs.n	240048ea <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
240048d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
240048d4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
240048d6:	4906      	ldr	r1, [pc, #24]	; (240048f0 <HAL_SYSTICK_Config+0x28>)
240048d8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
240048dc:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
240048de:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
240048e0:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
240048e4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
240048e6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
240048e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
240048ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
240048ec:	4770      	bx	lr
240048ee:	bf00      	nop
240048f0:	e000ed00 	.word	0xe000ed00

240048f4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
240048f4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
240048f8:	4b04      	ldr	r3, [pc, #16]	; (2400490c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
240048fa:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
240048fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
240048fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24004902:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
24004904:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
24004908:	4770      	bx	lr
2400490a:	bf00      	nop
2400490c:	e000ed00 	.word	0xe000ed00

24004910 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24004910:	4b06      	ldr	r3, [pc, #24]	; (2400492c <HAL_MPU_Enable+0x1c>)
24004912:	f040 0001 	orr.w	r0, r0, #1
24004916:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
2400491a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400491c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24004920:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24004922:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24004926:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
2400492a:	4770      	bx	lr
2400492c:	e000ed00 	.word	0xe000ed00

24004930 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24004930:	7843      	ldrb	r3, [r0, #1]
24004932:	4a16      	ldr	r2, [pc, #88]	; (2400498c <HAL_MPU_ConfigRegion+0x5c>)
24004934:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
24004938:	7803      	ldrb	r3, [r0, #0]
2400493a:	b313      	cbz	r3, 24004982 <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
2400493c:	6843      	ldr	r3, [r0, #4]
2400493e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24004942:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24004944:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24004948:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
2400494a:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
2400494c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24004950:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004954:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24004956:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004958:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
2400495c:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004960:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24004964:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004966:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
2400496a:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
2400496e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
24004972:	7a01      	ldrb	r1, [r0, #8]
24004974:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
24004978:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
2400497c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
24004980:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
24004982:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
24004986:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
2400498a:	4770      	bx	lr
2400498c:	e000ed00 	.word	0xe000ed00

24004990 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004990:	4b33      	ldr	r3, [pc, #204]	; (24004a60 <DMA_CalcBaseAndBitshift+0xd0>)
{
24004992:	4601      	mov	r1, r0
24004994:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004996:	4e33      	ldr	r6, [pc, #204]	; (24004a64 <DMA_CalcBaseAndBitshift+0xd4>)
24004998:	6802      	ldr	r2, [r0, #0]
2400499a:	4d33      	ldr	r5, [pc, #204]	; (24004a68 <DMA_CalcBaseAndBitshift+0xd8>)
2400499c:	42b2      	cmp	r2, r6
2400499e:	bf18      	it	ne
240049a0:	429a      	cmpne	r2, r3
240049a2:	4c32      	ldr	r4, [pc, #200]	; (24004a6c <DMA_CalcBaseAndBitshift+0xdc>)
240049a4:	4832      	ldr	r0, [pc, #200]	; (24004a70 <DMA_CalcBaseAndBitshift+0xe0>)
240049a6:	bf0c      	ite	eq
240049a8:	2301      	moveq	r3, #1
240049aa:	2300      	movne	r3, #0
240049ac:	42aa      	cmp	r2, r5
240049ae:	bf08      	it	eq
240049b0:	f043 0301 	orreq.w	r3, r3, #1
240049b4:	42a2      	cmp	r2, r4
240049b6:	bf08      	it	eq
240049b8:	f043 0301 	orreq.w	r3, r3, #1
240049bc:	3430      	adds	r4, #48	; 0x30
240049be:	4282      	cmp	r2, r0
240049c0:	bf08      	it	eq
240049c2:	f043 0301 	orreq.w	r3, r3, #1
240049c6:	3030      	adds	r0, #48	; 0x30
240049c8:	42a2      	cmp	r2, r4
240049ca:	bf08      	it	eq
240049cc:	f043 0301 	orreq.w	r3, r3, #1
240049d0:	3430      	adds	r4, #48	; 0x30
240049d2:	4282      	cmp	r2, r0
240049d4:	bf08      	it	eq
240049d6:	f043 0301 	orreq.w	r3, r3, #1
240049da:	f500 705c 	add.w	r0, r0, #880	; 0x370
240049de:	42a2      	cmp	r2, r4
240049e0:	bf08      	it	eq
240049e2:	f043 0301 	orreq.w	r3, r3, #1
240049e6:	f504 745c 	add.w	r4, r4, #880	; 0x370
240049ea:	4282      	cmp	r2, r0
240049ec:	bf08      	it	eq
240049ee:	f043 0301 	orreq.w	r3, r3, #1
240049f2:	3030      	adds	r0, #48	; 0x30
240049f4:	42a2      	cmp	r2, r4
240049f6:	bf08      	it	eq
240049f8:	f043 0301 	orreq.w	r3, r3, #1
240049fc:	3430      	adds	r4, #48	; 0x30
240049fe:	4282      	cmp	r2, r0
24004a00:	bf08      	it	eq
24004a02:	f043 0301 	orreq.w	r3, r3, #1
24004a06:	3030      	adds	r0, #48	; 0x30
24004a08:	42a2      	cmp	r2, r4
24004a0a:	bf08      	it	eq
24004a0c:	f043 0301 	orreq.w	r3, r3, #1
24004a10:	3430      	adds	r4, #48	; 0x30
24004a12:	4282      	cmp	r2, r0
24004a14:	bf08      	it	eq
24004a16:	f043 0301 	orreq.w	r3, r3, #1
24004a1a:	3030      	adds	r0, #48	; 0x30
24004a1c:	42a2      	cmp	r2, r4
24004a1e:	bf08      	it	eq
24004a20:	f043 0301 	orreq.w	r3, r3, #1
24004a24:	4282      	cmp	r2, r0
24004a26:	bf08      	it	eq
24004a28:	f043 0301 	orreq.w	r3, r3, #1
24004a2c:	b913      	cbnz	r3, 24004a34 <DMA_CalcBaseAndBitshift+0xa4>
24004a2e:	4b11      	ldr	r3, [pc, #68]	; (24004a74 <DMA_CalcBaseAndBitshift+0xe4>)
24004a30:	429a      	cmp	r2, r3
24004a32:	d112      	bne.n	24004a5a <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004a34:	b2d3      	uxtb	r3, r2
24004a36:	4810      	ldr	r0, [pc, #64]	; (24004a78 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24004a38:	4c10      	ldr	r4, [pc, #64]	; (24004a7c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004a3a:	3b10      	subs	r3, #16
24004a3c:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
24004a40:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004a42:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24004a46:	5c20      	ldrb	r0, [r4, r0]
24004a48:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24004a4a:	480d      	ldr	r0, [pc, #52]	; (24004a80 <DMA_CalcBaseAndBitshift+0xf0>)
24004a4c:	ea00 0002 	and.w	r0, r0, r2
24004a50:	bf88      	it	hi
24004a52:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24004a54:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
24004a56:	bc70      	pop	{r4, r5, r6}
24004a58:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
24004a5a:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
24004a5e:	e7f9      	b.n	24004a54 <DMA_CalcBaseAndBitshift+0xc4>
24004a60:	40020010 	.word	0x40020010
24004a64:	40020028 	.word	0x40020028
24004a68:	40020040 	.word	0x40020040
24004a6c:	40020058 	.word	0x40020058
24004a70:	40020070 	.word	0x40020070
24004a74:	400204b8 	.word	0x400204b8
24004a78:	aaaaaaab 	.word	0xaaaaaaab
24004a7c:	240174d0 	.word	0x240174d0
24004a80:	fffffc00 	.word	0xfffffc00

24004a84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
24004a84:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24004a86:	4a27      	ldr	r2, [pc, #156]	; (24004b24 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
24004a88:	4927      	ldr	r1, [pc, #156]	; (24004b28 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
24004a8a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24004a8c:	4d27      	ldr	r5, [pc, #156]	; (24004b2c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
24004a8e:	4c28      	ldr	r4, [pc, #160]	; (24004b30 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
24004a90:	42ab      	cmp	r3, r5
24004a92:	bf18      	it	ne
24004a94:	4293      	cmpne	r3, r2
24004a96:	bf0c      	ite	eq
24004a98:	2201      	moveq	r2, #1
24004a9a:	2200      	movne	r2, #0
24004a9c:	428b      	cmp	r3, r1
24004a9e:	bf08      	it	eq
24004aa0:	f042 0201 	orreq.w	r2, r2, #1
24004aa4:	3128      	adds	r1, #40	; 0x28
24004aa6:	42a3      	cmp	r3, r4
24004aa8:	bf08      	it	eq
24004aaa:	f042 0201 	orreq.w	r2, r2, #1
24004aae:	3428      	adds	r4, #40	; 0x28
24004ab0:	428b      	cmp	r3, r1
24004ab2:	bf08      	it	eq
24004ab4:	f042 0201 	orreq.w	r2, r2, #1
24004ab8:	3128      	adds	r1, #40	; 0x28
24004aba:	42a3      	cmp	r3, r4
24004abc:	bf08      	it	eq
24004abe:	f042 0201 	orreq.w	r2, r2, #1
24004ac2:	428b      	cmp	r3, r1
24004ac4:	bf08      	it	eq
24004ac6:	f042 0201 	orreq.w	r2, r2, #1
24004aca:	b912      	cbnz	r2, 24004ad2 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
24004acc:	4a19      	ldr	r2, [pc, #100]	; (24004b34 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
24004ace:	4293      	cmp	r3, r2
24004ad0:	d113      	bne.n	24004afa <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24004ad2:	b2db      	uxtb	r3, r3
24004ad4:	4918      	ldr	r1, [pc, #96]	; (24004b38 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24004ad6:	4a19      	ldr	r2, [pc, #100]	; (24004b3c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24004ad8:	3b08      	subs	r3, #8
24004ada:	4c19      	ldr	r4, [pc, #100]	; (24004b40 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
24004adc:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004ae0:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24004ae2:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004ae6:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24004aea:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004aec:	fa01 f303 	lsl.w	r3, r1, r3
24004af0:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24004af2:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24004af6:	bc30      	pop	{r4, r5}
24004af8:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004afa:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004afc:	4a11      	ldr	r2, [pc, #68]	; (24004b44 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004afe:	4c12      	ldr	r4, [pc, #72]	; (24004b48 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
24004b00:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004b02:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004b04:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004b08:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004b0a:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004b0e:	d800      	bhi.n	24004b12 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
24004b10:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004b12:	4a0e      	ldr	r2, [pc, #56]	; (24004b4c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004b14:	f001 041f 	and.w	r4, r1, #31
24004b18:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004b1a:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004b1c:	40a3      	lsls	r3, r4
24004b1e:	4c0c      	ldr	r4, [pc, #48]	; (24004b50 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004b20:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004b22:	e7e5      	b.n	24004af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
24004b24:	58025408 	.word	0x58025408
24004b28:	58025430 	.word	0x58025430
24004b2c:	5802541c 	.word	0x5802541c
24004b30:	58025444 	.word	0x58025444
24004b34:	58025494 	.word	0x58025494
24004b38:	cccccccd 	.word	0xcccccccd
24004b3c:	16009600 	.word	0x16009600
24004b40:	58025880 	.word	0x58025880
24004b44:	bffdfbf0 	.word	0xbffdfbf0
24004b48:	aaaaaaab 	.word	0xaaaaaaab
24004b4c:	10008200 	.word	0x10008200
24004b50:	40020880 	.word	0x40020880

24004b54 <HAL_DMA_Init>:
{
24004b54:	b538      	push	{r3, r4, r5, lr}
24004b56:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24004b58:	f7ff fe3a 	bl	240047d0 <HAL_GetTick>
  if(hdma == NULL)
24004b5c:	2c00      	cmp	r4, #0
24004b5e:	f000 816a 	beq.w	24004e36 <HAL_DMA_Init+0x2e2>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004b62:	6822      	ldr	r2, [r4, #0]
24004b64:	4605      	mov	r5, r0
24004b66:	4ba3      	ldr	r3, [pc, #652]	; (24004df4 <HAL_DMA_Init+0x2a0>)
24004b68:	429a      	cmp	r2, r3
24004b6a:	d048      	beq.n	24004bfe <HAL_DMA_Init+0xaa>
24004b6c:	3318      	adds	r3, #24
24004b6e:	429a      	cmp	r2, r3
24004b70:	d045      	beq.n	24004bfe <HAL_DMA_Init+0xaa>
24004b72:	3330      	adds	r3, #48	; 0x30
24004b74:	49a0      	ldr	r1, [pc, #640]	; (24004df8 <HAL_DMA_Init+0x2a4>)
24004b76:	428a      	cmp	r2, r1
24004b78:	bf18      	it	ne
24004b7a:	429a      	cmpne	r2, r3
24004b7c:	f101 0130 	add.w	r1, r1, #48	; 0x30
24004b80:	bf0c      	ite	eq
24004b82:	2301      	moveq	r3, #1
24004b84:	2300      	movne	r3, #0
24004b86:	428a      	cmp	r2, r1
24004b88:	bf08      	it	eq
24004b8a:	f043 0301 	orreq.w	r3, r3, #1
24004b8e:	3118      	adds	r1, #24
24004b90:	428a      	cmp	r2, r1
24004b92:	bf08      	it	eq
24004b94:	f043 0301 	orreq.w	r3, r3, #1
24004b98:	3118      	adds	r1, #24
24004b9a:	428a      	cmp	r2, r1
24004b9c:	bf08      	it	eq
24004b9e:	f043 0301 	orreq.w	r3, r3, #1
24004ba2:	3118      	adds	r1, #24
24004ba4:	428a      	cmp	r2, r1
24004ba6:	bf08      	it	eq
24004ba8:	f043 0301 	orreq.w	r3, r3, #1
24004bac:	f501 7156 	add.w	r1, r1, #856	; 0x358
24004bb0:	428a      	cmp	r2, r1
24004bb2:	bf08      	it	eq
24004bb4:	f043 0301 	orreq.w	r3, r3, #1
24004bb8:	3118      	adds	r1, #24
24004bba:	428a      	cmp	r2, r1
24004bbc:	bf08      	it	eq
24004bbe:	f043 0301 	orreq.w	r3, r3, #1
24004bc2:	3118      	adds	r1, #24
24004bc4:	428a      	cmp	r2, r1
24004bc6:	bf08      	it	eq
24004bc8:	f043 0301 	orreq.w	r3, r3, #1
24004bcc:	3118      	adds	r1, #24
24004bce:	428a      	cmp	r2, r1
24004bd0:	bf08      	it	eq
24004bd2:	f043 0301 	orreq.w	r3, r3, #1
24004bd6:	3118      	adds	r1, #24
24004bd8:	428a      	cmp	r2, r1
24004bda:	bf08      	it	eq
24004bdc:	f043 0301 	orreq.w	r3, r3, #1
24004be0:	3118      	adds	r1, #24
24004be2:	428a      	cmp	r2, r1
24004be4:	bf08      	it	eq
24004be6:	f043 0301 	orreq.w	r3, r3, #1
24004bea:	3118      	adds	r1, #24
24004bec:	428a      	cmp	r2, r1
24004bee:	bf08      	it	eq
24004bf0:	f043 0301 	orreq.w	r3, r3, #1
24004bf4:	b91b      	cbnz	r3, 24004bfe <HAL_DMA_Init+0xaa>
24004bf6:	4b81      	ldr	r3, [pc, #516]	; (24004dfc <HAL_DMA_Init+0x2a8>)
24004bf8:	429a      	cmp	r2, r3
24004bfa:	f040 8184 	bne.w	24004f06 <HAL_DMA_Init+0x3b2>
    hdma->State = HAL_DMA_STATE_BUSY;
24004bfe:	2302      	movs	r3, #2
24004c00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
24004c04:	2300      	movs	r3, #0
24004c06:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
24004c0a:	6813      	ldr	r3, [r2, #0]
24004c0c:	f023 0301 	bic.w	r3, r3, #1
24004c10:	6013      	str	r3, [r2, #0]
24004c12:	e005      	b.n	24004c20 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24004c14:	f7ff fddc 	bl	240047d0 <HAL_GetTick>
24004c18:	1b43      	subs	r3, r0, r5
24004c1a:	2b05      	cmp	r3, #5
24004c1c:	f200 80fe 	bhi.w	24004e1c <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24004c20:	6823      	ldr	r3, [r4, #0]
24004c22:	681a      	ldr	r2, [r3, #0]
24004c24:	07d0      	lsls	r0, r2, #31
24004c26:	d4f5      	bmi.n	24004c14 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
24004c28:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004c2c:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
24004c2e:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24004c30:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004c32:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004c34:	430a      	orrs	r2, r1
24004c36:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004c38:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004c3a:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24004c3e:	69a1      	ldr	r1, [r4, #24]
24004c40:	ea42 0201 	orr.w	r2, r2, r1
24004c44:	69e1      	ldr	r1, [r4, #28]
24004c46:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
24004c4a:	6a21      	ldr	r1, [r4, #32]
24004c4c:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24004c50:	496b      	ldr	r1, [pc, #428]	; (24004e00 <HAL_DMA_Init+0x2ac>)
24004c52:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
24004c56:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004c5a:	d103      	bne.n	24004c64 <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24004c5c:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
24004c60:	4301      	orrs	r1, r0
24004c62:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24004c64:	4867      	ldr	r0, [pc, #412]	; (24004e04 <HAL_DMA_Init+0x2b0>)
24004c66:	4968      	ldr	r1, [pc, #416]	; (24004e08 <HAL_DMA_Init+0x2b4>)
24004c68:	6800      	ldr	r0, [r0, #0]
24004c6a:	4001      	ands	r1, r0
24004c6c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24004c70:	d30a      	bcc.n	24004c88 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24004c72:	6861      	ldr	r1, [r4, #4]
24004c74:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
24004c78:	281f      	cmp	r0, #31
24004c7a:	f240 80d6 	bls.w	24004e2a <HAL_DMA_Init+0x2d6>
24004c7e:	394f      	subs	r1, #79	; 0x4f
24004c80:	2903      	cmp	r1, #3
24004c82:	d801      	bhi.n	24004c88 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
24004c84:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24004c88:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24004c8a:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
24004c8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24004c8e:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004c90:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24004c92:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
24004c96:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004c9a:	d10e      	bne.n	24004cba <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24004c9c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
24004ca0:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24004ca2:	b150      	cbz	r0, 24004cba <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
24004ca4:	69a5      	ldr	r5, [r4, #24]
24004ca6:	2d00      	cmp	r5, #0
24004ca8:	f040 8107 	bne.w	24004eba <HAL_DMA_Init+0x366>
    switch (hdma->Init.FIFOThreshold)
24004cac:	2a01      	cmp	r2, #1
24004cae:	f000 8125 	beq.w	24004efc <HAL_DMA_Init+0x3a8>
24004cb2:	f032 0202 	bics.w	r2, r2, #2
24004cb6:	f000 8108 	beq.w	24004eca <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24004cba:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24004cbc:	4620      	mov	r0, r4
24004cbe:	f7ff fe67 	bl	24004990 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24004cc2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24004cc4:	233f      	movs	r3, #63	; 0x3f
24004cc6:	f002 021f 	and.w	r2, r2, #31
24004cca:	4093      	lsls	r3, r2
24004ccc:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004cce:	6822      	ldr	r2, [r4, #0]
24004cd0:	4b48      	ldr	r3, [pc, #288]	; (24004df4 <HAL_DMA_Init+0x2a0>)
24004cd2:	484e      	ldr	r0, [pc, #312]	; (24004e0c <HAL_DMA_Init+0x2b8>)
24004cd4:	4948      	ldr	r1, [pc, #288]	; (24004df8 <HAL_DMA_Init+0x2a4>)
24004cd6:	4282      	cmp	r2, r0
24004cd8:	bf18      	it	ne
24004cda:	429a      	cmpne	r2, r3
24004cdc:	f100 0030 	add.w	r0, r0, #48	; 0x30
24004ce0:	bf0c      	ite	eq
24004ce2:	2301      	moveq	r3, #1
24004ce4:	2300      	movne	r3, #0
24004ce6:	428a      	cmp	r2, r1
24004ce8:	bf08      	it	eq
24004cea:	f043 0301 	orreq.w	r3, r3, #1
24004cee:	3130      	adds	r1, #48	; 0x30
24004cf0:	4282      	cmp	r2, r0
24004cf2:	bf08      	it	eq
24004cf4:	f043 0301 	orreq.w	r3, r3, #1
24004cf8:	3030      	adds	r0, #48	; 0x30
24004cfa:	428a      	cmp	r2, r1
24004cfc:	bf08      	it	eq
24004cfe:	f043 0301 	orreq.w	r3, r3, #1
24004d02:	3130      	adds	r1, #48	; 0x30
24004d04:	4282      	cmp	r2, r0
24004d06:	bf08      	it	eq
24004d08:	f043 0301 	orreq.w	r3, r3, #1
24004d0c:	3030      	adds	r0, #48	; 0x30
24004d0e:	428a      	cmp	r2, r1
24004d10:	bf08      	it	eq
24004d12:	f043 0301 	orreq.w	r3, r3, #1
24004d16:	f501 715c 	add.w	r1, r1, #880	; 0x370
24004d1a:	4282      	cmp	r2, r0
24004d1c:	bf08      	it	eq
24004d1e:	f043 0301 	orreq.w	r3, r3, #1
24004d22:	f500 705c 	add.w	r0, r0, #880	; 0x370
24004d26:	428a      	cmp	r2, r1
24004d28:	bf08      	it	eq
24004d2a:	f043 0301 	orreq.w	r3, r3, #1
24004d2e:	3130      	adds	r1, #48	; 0x30
24004d30:	4282      	cmp	r2, r0
24004d32:	bf08      	it	eq
24004d34:	f043 0301 	orreq.w	r3, r3, #1
24004d38:	3030      	adds	r0, #48	; 0x30
24004d3a:	428a      	cmp	r2, r1
24004d3c:	bf08      	it	eq
24004d3e:	f043 0301 	orreq.w	r3, r3, #1
24004d42:	3130      	adds	r1, #48	; 0x30
24004d44:	4282      	cmp	r2, r0
24004d46:	bf08      	it	eq
24004d48:	f043 0301 	orreq.w	r3, r3, #1
24004d4c:	3030      	adds	r0, #48	; 0x30
24004d4e:	428a      	cmp	r2, r1
24004d50:	bf08      	it	eq
24004d52:	f043 0301 	orreq.w	r3, r3, #1
24004d56:	3130      	adds	r1, #48	; 0x30
24004d58:	4282      	cmp	r2, r0
24004d5a:	bf08      	it	eq
24004d5c:	f043 0301 	orreq.w	r3, r3, #1
24004d60:	3030      	adds	r0, #48	; 0x30
24004d62:	428a      	cmp	r2, r1
24004d64:	bf08      	it	eq
24004d66:	f043 0301 	orreq.w	r3, r3, #1
24004d6a:	4929      	ldr	r1, [pc, #164]	; (24004e10 <HAL_DMA_Init+0x2bc>)
24004d6c:	4282      	cmp	r2, r0
24004d6e:	bf08      	it	eq
24004d70:	f043 0301 	orreq.w	r3, r3, #1
24004d74:	4827      	ldr	r0, [pc, #156]	; (24004e14 <HAL_DMA_Init+0x2c0>)
24004d76:	428a      	cmp	r2, r1
24004d78:	bf08      	it	eq
24004d7a:	f043 0301 	orreq.w	r3, r3, #1
24004d7e:	3128      	adds	r1, #40	; 0x28
24004d80:	4282      	cmp	r2, r0
24004d82:	bf08      	it	eq
24004d84:	f043 0301 	orreq.w	r3, r3, #1
24004d88:	3028      	adds	r0, #40	; 0x28
24004d8a:	428a      	cmp	r2, r1
24004d8c:	bf08      	it	eq
24004d8e:	f043 0301 	orreq.w	r3, r3, #1
24004d92:	3128      	adds	r1, #40	; 0x28
24004d94:	4282      	cmp	r2, r0
24004d96:	bf08      	it	eq
24004d98:	f043 0301 	orreq.w	r3, r3, #1
24004d9c:	3028      	adds	r0, #40	; 0x28
24004d9e:	428a      	cmp	r2, r1
24004da0:	bf08      	it	eq
24004da2:	f043 0301 	orreq.w	r3, r3, #1
24004da6:	3128      	adds	r1, #40	; 0x28
24004da8:	4282      	cmp	r2, r0
24004daa:	bf08      	it	eq
24004dac:	f043 0301 	orreq.w	r3, r3, #1
24004db0:	428a      	cmp	r2, r1
24004db2:	bf08      	it	eq
24004db4:	f043 0301 	orreq.w	r3, r3, #1
24004db8:	b913      	cbnz	r3, 24004dc0 <HAL_DMA_Init+0x26c>
24004dba:	4b17      	ldr	r3, [pc, #92]	; (24004e18 <HAL_DMA_Init+0x2c4>)
24004dbc:	429a      	cmp	r2, r3
24004dbe:	d113      	bne.n	24004de8 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
24004dc0:	4620      	mov	r0, r4
24004dc2:	f7ff fe5f 	bl	24004a84 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24004dc6:	68a3      	ldr	r3, [r4, #8]
24004dc8:	2b80      	cmp	r3, #128	; 0x80
24004dca:	d036      	beq.n	24004e3a <HAL_DMA_Init+0x2e6>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24004dcc:	7922      	ldrb	r2, [r4, #4]
24004dce:	6e23      	ldr	r3, [r4, #96]	; 0x60
24004dd0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24004dd2:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
24004dd6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24004dd8:	6861      	ldr	r1, [r4, #4]
24004dda:	1e4b      	subs	r3, r1, #1
24004ddc:	2b07      	cmp	r3, #7
24004dde:	d930      	bls.n	24004e42 <HAL_DMA_Init+0x2ee>
      hdma->DMAmuxRequestGen = 0U;
24004de0:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
24004de2:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
24004de6:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004de8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
24004dea:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004dec:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
24004dee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004df2:	bd38      	pop	{r3, r4, r5, pc}
24004df4:	40020010 	.word	0x40020010
24004df8:	40020040 	.word	0x40020040
24004dfc:	400204b8 	.word	0x400204b8
24004e00:	fe10803f 	.word	0xfe10803f
24004e04:	5c001000 	.word	0x5c001000
24004e08:	ffff0000 	.word	0xffff0000
24004e0c:	40020028 	.word	0x40020028
24004e10:	58025408 	.word	0x58025408
24004e14:	5802541c 	.word	0x5802541c
24004e18:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24004e1c:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
24004e1e:	2303      	movs	r3, #3
        return HAL_ERROR;
24004e20:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24004e22:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
24004e24:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004e28:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24004e2a:	496b      	ldr	r1, [pc, #428]	; (24004fd8 <HAL_DMA_Init+0x484>)
24004e2c:	40c1      	lsrs	r1, r0
24004e2e:	07c9      	lsls	r1, r1, #31
24004e30:	f57f af2a 	bpl.w	24004c88 <HAL_DMA_Init+0x134>
24004e34:	e726      	b.n	24004c84 <HAL_DMA_Init+0x130>
    return HAL_ERROR;
24004e36:	2001      	movs	r0, #1
}
24004e38:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
24004e3a:	2300      	movs	r3, #0
24004e3c:	461a      	mov	r2, r3
24004e3e:	6063      	str	r3, [r4, #4]
24004e40:	e7c5      	b.n	24004dce <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24004e42:	6820      	ldr	r0, [r4, #0]
24004e44:	4a65      	ldr	r2, [pc, #404]	; (24004fdc <HAL_DMA_Init+0x488>)
24004e46:	4d66      	ldr	r5, [pc, #408]	; (24004fe0 <HAL_DMA_Init+0x48c>)
24004e48:	42a8      	cmp	r0, r5
24004e4a:	bf18      	it	ne
24004e4c:	4290      	cmpne	r0, r2
24004e4e:	f105 0514 	add.w	r5, r5, #20
24004e52:	bf0c      	ite	eq
24004e54:	2201      	moveq	r2, #1
24004e56:	2200      	movne	r2, #0
24004e58:	42a8      	cmp	r0, r5
24004e5a:	bf08      	it	eq
24004e5c:	f042 0201 	orreq.w	r2, r2, #1
24004e60:	3514      	adds	r5, #20
24004e62:	42a8      	cmp	r0, r5
24004e64:	bf08      	it	eq
24004e66:	f042 0201 	orreq.w	r2, r2, #1
24004e6a:	3514      	adds	r5, #20
24004e6c:	42a8      	cmp	r0, r5
24004e6e:	bf08      	it	eq
24004e70:	f042 0201 	orreq.w	r2, r2, #1
24004e74:	3514      	adds	r5, #20
24004e76:	42a8      	cmp	r0, r5
24004e78:	bf08      	it	eq
24004e7a:	f042 0201 	orreq.w	r2, r2, #1
24004e7e:	3514      	adds	r5, #20
24004e80:	42a8      	cmp	r0, r5
24004e82:	bf08      	it	eq
24004e84:	f042 0201 	orreq.w	r2, r2, #1
24004e88:	b93a      	cbnz	r2, 24004e9a <HAL_DMA_Init+0x346>
24004e8a:	4a56      	ldr	r2, [pc, #344]	; (24004fe4 <HAL_DMA_Init+0x490>)
24004e8c:	4290      	cmp	r0, r2
24004e8e:	d004      	beq.n	24004e9a <HAL_DMA_Init+0x346>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24004e90:	4a55      	ldr	r2, [pc, #340]	; (24004fe8 <HAL_DMA_Init+0x494>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24004e92:	4856      	ldr	r0, [pc, #344]	; (24004fec <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24004e94:	440a      	add	r2, r1
24004e96:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24004e98:	e003      	b.n	24004ea2 <HAL_DMA_Init+0x34e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24004e9a:	4a55      	ldr	r2, [pc, #340]	; (24004ff0 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24004e9c:	4855      	ldr	r0, [pc, #340]	; (24004ff4 <HAL_DMA_Init+0x4a0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24004e9e:	440a      	add	r2, r1
24004ea0:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24004ea2:	2101      	movs	r1, #1
24004ea4:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
24004ea8:	2100      	movs	r1, #0
24004eaa:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24004eae:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
24004eb0:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24004eb2:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
24004eb6:	605a      	str	r2, [r3, #4]
24004eb8:	e796      	b.n	24004de8 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24004eba:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
24004ebe:	d00e      	beq.n	24004ede <HAL_DMA_Init+0x38a>
    switch (hdma->Init.FIFOThreshold)
24004ec0:	2a02      	cmp	r2, #2
24004ec2:	d905      	bls.n	24004ed0 <HAL_DMA_Init+0x37c>
24004ec4:	2a03      	cmp	r2, #3
24004ec6:	f47f aef8 	bne.w	24004cba <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24004eca:	01c2      	lsls	r2, r0, #7
24004ecc:	f57f aef5 	bpl.w	24004cba <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
24004ed0:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004ed2:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
24004ed4:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004ed6:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
24004ed8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004edc:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
24004ede:	2a03      	cmp	r2, #3
24004ee0:	f63f aeeb 	bhi.w	24004cba <HAL_DMA_Init+0x166>
24004ee4:	a501      	add	r5, pc, #4	; (adr r5, 24004eec <HAL_DMA_Init+0x398>)
24004ee6:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
24004eea:	bf00      	nop
24004eec:	24004ed1 	.word	0x24004ed1
24004ef0:	24004ecb 	.word	0x24004ecb
24004ef4:	24004ed1 	.word	0x24004ed1
24004ef8:	24004efd 	.word	0x24004efd
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24004efc:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
24004f00:	f47f aedb 	bne.w	24004cba <HAL_DMA_Init+0x166>
24004f04:	e7e4      	b.n	24004ed0 <HAL_DMA_Init+0x37c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24004f06:	4b35      	ldr	r3, [pc, #212]	; (24004fdc <HAL_DMA_Init+0x488>)
24004f08:	4835      	ldr	r0, [pc, #212]	; (24004fe0 <HAL_DMA_Init+0x48c>)
24004f0a:	493b      	ldr	r1, [pc, #236]	; (24004ff8 <HAL_DMA_Init+0x4a4>)
24004f0c:	4282      	cmp	r2, r0
24004f0e:	bf18      	it	ne
24004f10:	429a      	cmpne	r2, r3
24004f12:	f100 0028 	add.w	r0, r0, #40	; 0x28
24004f16:	bf0c      	ite	eq
24004f18:	2301      	moveq	r3, #1
24004f1a:	2300      	movne	r3, #0
24004f1c:	428a      	cmp	r2, r1
24004f1e:	bf08      	it	eq
24004f20:	f043 0301 	orreq.w	r3, r3, #1
24004f24:	3128      	adds	r1, #40	; 0x28
24004f26:	4282      	cmp	r2, r0
24004f28:	bf08      	it	eq
24004f2a:	f043 0301 	orreq.w	r3, r3, #1
24004f2e:	3028      	adds	r0, #40	; 0x28
24004f30:	428a      	cmp	r2, r1
24004f32:	bf08      	it	eq
24004f34:	f043 0301 	orreq.w	r3, r3, #1
24004f38:	3128      	adds	r1, #40	; 0x28
24004f3a:	4282      	cmp	r2, r0
24004f3c:	bf08      	it	eq
24004f3e:	f043 0301 	orreq.w	r3, r3, #1
24004f42:	428a      	cmp	r2, r1
24004f44:	bf08      	it	eq
24004f46:	f043 0301 	orreq.w	r3, r3, #1
24004f4a:	b913      	cbnz	r3, 24004f52 <HAL_DMA_Init+0x3fe>
24004f4c:	4b25      	ldr	r3, [pc, #148]	; (24004fe4 <HAL_DMA_Init+0x490>)
24004f4e:	429a      	cmp	r2, r3
24004f50:	d13a      	bne.n	24004fc8 <HAL_DMA_Init+0x474>
    __HAL_UNLOCK(hdma);
24004f52:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24004f54:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24004f56:	4929      	ldr	r1, [pc, #164]	; (24004ffc <HAL_DMA_Init+0x4a8>)
    hdma->State = HAL_DMA_STATE_BUSY;
24004f58:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
24004f5c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
24004f60:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24004f62:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24004f64:	68a3      	ldr	r3, [r4, #8]
24004f66:	2b40      	cmp	r3, #64	; 0x40
24004f68:	d02c      	beq.n	24004fc4 <HAL_DMA_Init+0x470>
24004f6a:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
24004f6e:	fab3 f383 	clz	r3, r3
24004f72:	095b      	lsrs	r3, r3, #5
24004f74:	0398      	lsls	r0, r3, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
24004f76:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
24004f7a:	08db      	lsrs	r3, r3, #3
24004f7c:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
24004f80:	6965      	ldr	r5, [r4, #20]
24004f82:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
24004f86:	69a5      	ldr	r5, [r4, #24]
24004f88:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
24004f8c:	69e5      	ldr	r5, [r4, #28]
24004f8e:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
24004f92:	6a25      	ldr	r5, [r4, #32]
24004f94:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
24004f98:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24004f9a:	4919      	ldr	r1, [pc, #100]	; (24005000 <HAL_DMA_Init+0x4ac>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24004f9c:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24004f9e:	4b19      	ldr	r3, [pc, #100]	; (24005004 <HAL_DMA_Init+0x4b0>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
24004fa0:	6010      	str	r0, [r2, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24004fa2:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24004fa4:	6822      	ldr	r2, [r4, #0]
24004fa6:	4411      	add	r1, r2
24004fa8:	fba3 2301 	umull	r2, r3, r3, r1
24004fac:	091b      	lsrs	r3, r3, #4
24004fae:	009b      	lsls	r3, r3, #2
24004fb0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24004fb2:	f7ff fced 	bl	24004990 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24004fb6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24004fb8:	2301      	movs	r3, #1
24004fba:	f002 021f 	and.w	r2, r2, #31
24004fbe:	4093      	lsls	r3, r2
24004fc0:	6043      	str	r3, [r0, #4]
24004fc2:	e684      	b.n	24004cce <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24004fc4:	2010      	movs	r0, #16
24004fc6:	e7d6      	b.n	24004f76 <HAL_DMA_Init+0x422>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004fc8:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
24004fca:	2303      	movs	r3, #3
    return HAL_ERROR;
24004fcc:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004fce:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
24004fd0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004fd4:	bd38      	pop	{r3, r4, r5, pc}
24004fd6:	bf00      	nop
24004fd8:	c3c0003f 	.word	0xc3c0003f
24004fdc:	58025408 	.word	0x58025408
24004fe0:	5802541c 	.word	0x5802541c
24004fe4:	58025494 	.word	0x58025494
24004fe8:	1000823f 	.word	0x1000823f
24004fec:	40020940 	.word	0x40020940
24004ff0:	1600963f 	.word	0x1600963f
24004ff4:	58025940 	.word	0x58025940
24004ff8:	58025430 	.word	0x58025430
24004ffc:	fffe000f 	.word	0xfffe000f
24005000:	a7fdabf8 	.word	0xa7fdabf8
24005004:	cccccccd 	.word	0xcccccccd

24005008 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
24005008:	2800      	cmp	r0, #0
2400500a:	f000 8270 	beq.w	240054ee <HAL_DMA_Start_IT+0x4e6>
2400500e:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
24005010:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
24005014:	2801      	cmp	r0, #1
24005016:	f000 826c 	beq.w	240054f2 <HAL_DMA_Start_IT+0x4ea>
2400501a:	2001      	movs	r0, #1
{
2400501c:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
2400501e:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
24005022:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
24005026:	4284      	cmp	r4, r0
24005028:	d008      	beq.n	2400503c <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
2400502a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
2400502e:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
24005030:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24005034:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
24005038:	bc70      	pop	{r4, r5, r6}
2400503a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
2400503c:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
2400503e:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005042:	4ea2      	ldr	r6, [pc, #648]	; (240052cc <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
24005044:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24005048:	2000      	movs	r0, #0
2400504a:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
2400504e:	6820      	ldr	r0, [r4, #0]
24005050:	f020 0001 	bic.w	r0, r0, #1
24005054:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005056:	489e      	ldr	r0, [pc, #632]	; (240052d0 <HAL_DMA_Start_IT+0x2c8>)
24005058:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
2400505c:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005060:	42b4      	cmp	r4, r6
24005062:	bf18      	it	ne
24005064:	4284      	cmpne	r4, r0
24005066:	f106 0618 	add.w	r6, r6, #24
2400506a:	bf0c      	ite	eq
2400506c:	2001      	moveq	r0, #1
2400506e:	2000      	movne	r0, #0
24005070:	42b4      	cmp	r4, r6
24005072:	bf08      	it	eq
24005074:	f040 0001 	orreq.w	r0, r0, #1
24005078:	3618      	adds	r6, #24
2400507a:	42b4      	cmp	r4, r6
2400507c:	bf08      	it	eq
2400507e:	f040 0001 	orreq.w	r0, r0, #1
24005082:	3618      	adds	r6, #24
24005084:	42b4      	cmp	r4, r6
24005086:	bf08      	it	eq
24005088:	f040 0001 	orreq.w	r0, r0, #1
2400508c:	3618      	adds	r6, #24
2400508e:	42b4      	cmp	r4, r6
24005090:	bf08      	it	eq
24005092:	f040 0001 	orreq.w	r0, r0, #1
24005096:	3618      	adds	r6, #24
24005098:	42b4      	cmp	r4, r6
2400509a:	bf08      	it	eq
2400509c:	f040 0001 	orreq.w	r0, r0, #1
240050a0:	3618      	adds	r6, #24
240050a2:	42b4      	cmp	r4, r6
240050a4:	bf08      	it	eq
240050a6:	f040 0001 	orreq.w	r0, r0, #1
240050aa:	f506 7656 	add.w	r6, r6, #856	; 0x358
240050ae:	42b4      	cmp	r4, r6
240050b0:	bf08      	it	eq
240050b2:	f040 0001 	orreq.w	r0, r0, #1
240050b6:	3618      	adds	r6, #24
240050b8:	42b4      	cmp	r4, r6
240050ba:	bf08      	it	eq
240050bc:	f040 0001 	orreq.w	r0, r0, #1
240050c0:	3618      	adds	r6, #24
240050c2:	42b4      	cmp	r4, r6
240050c4:	bf08      	it	eq
240050c6:	f040 0001 	orreq.w	r0, r0, #1
240050ca:	3618      	adds	r6, #24
240050cc:	42b4      	cmp	r4, r6
240050ce:	bf08      	it	eq
240050d0:	f040 0001 	orreq.w	r0, r0, #1
240050d4:	3618      	adds	r6, #24
240050d6:	42b4      	cmp	r4, r6
240050d8:	bf08      	it	eq
240050da:	f040 0001 	orreq.w	r0, r0, #1
240050de:	3618      	adds	r6, #24
240050e0:	42b4      	cmp	r4, r6
240050e2:	bf08      	it	eq
240050e4:	f040 0001 	orreq.w	r0, r0, #1
240050e8:	3618      	adds	r6, #24
240050ea:	42b4      	cmp	r4, r6
240050ec:	bf08      	it	eq
240050ee:	f040 0001 	orreq.w	r0, r0, #1
240050f2:	3618      	adds	r6, #24
240050f4:	42b4      	cmp	r4, r6
240050f6:	bf08      	it	eq
240050f8:	f040 0001 	orreq.w	r0, r0, #1
240050fc:	4e75      	ldr	r6, [pc, #468]	; (240052d4 <HAL_DMA_Start_IT+0x2cc>)
240050fe:	42b4      	cmp	r4, r6
24005100:	bf08      	it	eq
24005102:	f040 0001 	orreq.w	r0, r0, #1
24005106:	3614      	adds	r6, #20
24005108:	42b4      	cmp	r4, r6
2400510a:	bf08      	it	eq
2400510c:	f040 0001 	orreq.w	r0, r0, #1
24005110:	3614      	adds	r6, #20
24005112:	42b4      	cmp	r4, r6
24005114:	bf08      	it	eq
24005116:	f040 0001 	orreq.w	r0, r0, #1
2400511a:	3614      	adds	r6, #20
2400511c:	42b4      	cmp	r4, r6
2400511e:	bf08      	it	eq
24005120:	f040 0001 	orreq.w	r0, r0, #1
24005124:	3614      	adds	r6, #20
24005126:	42b4      	cmp	r4, r6
24005128:	bf08      	it	eq
2400512a:	f040 0001 	orreq.w	r0, r0, #1
2400512e:	3614      	adds	r6, #20
24005130:	42b4      	cmp	r4, r6
24005132:	bf08      	it	eq
24005134:	f040 0001 	orreq.w	r0, r0, #1
24005138:	3614      	adds	r6, #20
2400513a:	42b4      	cmp	r4, r6
2400513c:	bf08      	it	eq
2400513e:	f040 0001 	orreq.w	r0, r0, #1
24005142:	b910      	cbnz	r0, 2400514a <HAL_DMA_Start_IT+0x142>
24005144:	4864      	ldr	r0, [pc, #400]	; (240052d8 <HAL_DMA_Start_IT+0x2d0>)
24005146:	4284      	cmp	r4, r0
24005148:	d10a      	bne.n	24005160 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400514a:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
2400514e:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
24005150:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
24005154:	b110      	cbz	r0, 2400515c <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005156:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
2400515a:	6044      	str	r4, [r0, #4]
2400515c:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005160:	485b      	ldr	r0, [pc, #364]	; (240052d0 <HAL_DMA_Start_IT+0x2c8>)
24005162:	4e5a      	ldr	r6, [pc, #360]	; (240052cc <HAL_DMA_Start_IT+0x2c4>)
24005164:	42b4      	cmp	r4, r6
24005166:	bf18      	it	ne
24005168:	4284      	cmpne	r4, r0
2400516a:	f106 0618 	add.w	r6, r6, #24
2400516e:	bf0c      	ite	eq
24005170:	2001      	moveq	r0, #1
24005172:	2000      	movne	r0, #0
24005174:	42b4      	cmp	r4, r6
24005176:	bf08      	it	eq
24005178:	f040 0001 	orreq.w	r0, r0, #1
2400517c:	3618      	adds	r6, #24
2400517e:	42b4      	cmp	r4, r6
24005180:	bf08      	it	eq
24005182:	f040 0001 	orreq.w	r0, r0, #1
24005186:	3618      	adds	r6, #24
24005188:	42b4      	cmp	r4, r6
2400518a:	bf08      	it	eq
2400518c:	f040 0001 	orreq.w	r0, r0, #1
24005190:	3618      	adds	r6, #24
24005192:	42b4      	cmp	r4, r6
24005194:	bf08      	it	eq
24005196:	f040 0001 	orreq.w	r0, r0, #1
2400519a:	3618      	adds	r6, #24
2400519c:	42b4      	cmp	r4, r6
2400519e:	bf08      	it	eq
240051a0:	f040 0001 	orreq.w	r0, r0, #1
240051a4:	3618      	adds	r6, #24
240051a6:	42b4      	cmp	r4, r6
240051a8:	bf08      	it	eq
240051aa:	f040 0001 	orreq.w	r0, r0, #1
240051ae:	f506 7656 	add.w	r6, r6, #856	; 0x358
240051b2:	42b4      	cmp	r4, r6
240051b4:	bf08      	it	eq
240051b6:	f040 0001 	orreq.w	r0, r0, #1
240051ba:	3618      	adds	r6, #24
240051bc:	42b4      	cmp	r4, r6
240051be:	bf08      	it	eq
240051c0:	f040 0001 	orreq.w	r0, r0, #1
240051c4:	3618      	adds	r6, #24
240051c6:	42b4      	cmp	r4, r6
240051c8:	bf08      	it	eq
240051ca:	f040 0001 	orreq.w	r0, r0, #1
240051ce:	3618      	adds	r6, #24
240051d0:	42b4      	cmp	r4, r6
240051d2:	bf08      	it	eq
240051d4:	f040 0001 	orreq.w	r0, r0, #1
240051d8:	3618      	adds	r6, #24
240051da:	42b4      	cmp	r4, r6
240051dc:	bf08      	it	eq
240051de:	f040 0001 	orreq.w	r0, r0, #1
240051e2:	3618      	adds	r6, #24
240051e4:	42b4      	cmp	r4, r6
240051e6:	bf08      	it	eq
240051e8:	f040 0001 	orreq.w	r0, r0, #1
240051ec:	3618      	adds	r6, #24
240051ee:	42b4      	cmp	r4, r6
240051f0:	bf08      	it	eq
240051f2:	f040 0001 	orreq.w	r0, r0, #1
240051f6:	b918      	cbnz	r0, 24005200 <HAL_DMA_Start_IT+0x1f8>
240051f8:	4838      	ldr	r0, [pc, #224]	; (240052dc <HAL_DMA_Start_IT+0x2d4>)
240051fa:	4284      	cmp	r4, r0
240051fc:	f040 817b 	bne.w	240054f6 <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005200:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
24005204:	f000 041f 	and.w	r4, r0, #31
24005208:	203f      	movs	r0, #63	; 0x3f
2400520a:	40a0      	lsls	r0, r4
2400520c:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
2400520e:	f8dc 4000 	ldr.w	r4, [ip]
24005212:	6820      	ldr	r0, [r4, #0]
24005214:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
24005218:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
2400521a:	f8dc 0000 	ldr.w	r0, [ip]
2400521e:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
24005220:	f8dc 3008 	ldr.w	r3, [ip, #8]
24005224:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
24005226:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2400522a:	f000 815b 	beq.w	240054e4 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
2400522e:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
24005230:	f8dc 3000 	ldr.w	r3, [ip]
24005234:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005236:	f8dc 4000 	ldr.w	r4, [ip]
2400523a:	4b25      	ldr	r3, [pc, #148]	; (240052d0 <HAL_DMA_Start_IT+0x2c8>)
2400523c:	4923      	ldr	r1, [pc, #140]	; (240052cc <HAL_DMA_Start_IT+0x2c4>)
2400523e:	4a28      	ldr	r2, [pc, #160]	; (240052e0 <HAL_DMA_Start_IT+0x2d8>)
24005240:	428c      	cmp	r4, r1
24005242:	bf18      	it	ne
24005244:	429c      	cmpne	r4, r3
24005246:	f101 0130 	add.w	r1, r1, #48	; 0x30
2400524a:	bf0c      	ite	eq
2400524c:	2301      	moveq	r3, #1
2400524e:	2300      	movne	r3, #0
24005250:	4294      	cmp	r4, r2
24005252:	bf08      	it	eq
24005254:	f043 0301 	orreq.w	r3, r3, #1
24005258:	3230      	adds	r2, #48	; 0x30
2400525a:	428c      	cmp	r4, r1
2400525c:	bf08      	it	eq
2400525e:	f043 0301 	orreq.w	r3, r3, #1
24005262:	3130      	adds	r1, #48	; 0x30
24005264:	4294      	cmp	r4, r2
24005266:	bf08      	it	eq
24005268:	f043 0301 	orreq.w	r3, r3, #1
2400526c:	3230      	adds	r2, #48	; 0x30
2400526e:	428c      	cmp	r4, r1
24005270:	bf08      	it	eq
24005272:	f043 0301 	orreq.w	r3, r3, #1
24005276:	3130      	adds	r1, #48	; 0x30
24005278:	4294      	cmp	r4, r2
2400527a:	bf08      	it	eq
2400527c:	f043 0301 	orreq.w	r3, r3, #1
24005280:	f502 725c 	add.w	r2, r2, #880	; 0x370
24005284:	428c      	cmp	r4, r1
24005286:	bf08      	it	eq
24005288:	f043 0301 	orreq.w	r3, r3, #1
2400528c:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005290:	4294      	cmp	r4, r2
24005292:	bf08      	it	eq
24005294:	f043 0301 	orreq.w	r3, r3, #1
24005298:	3230      	adds	r2, #48	; 0x30
2400529a:	428c      	cmp	r4, r1
2400529c:	bf08      	it	eq
2400529e:	f043 0301 	orreq.w	r3, r3, #1
240052a2:	3130      	adds	r1, #48	; 0x30
240052a4:	4294      	cmp	r4, r2
240052a6:	bf08      	it	eq
240052a8:	f043 0301 	orreq.w	r3, r3, #1
240052ac:	3230      	adds	r2, #48	; 0x30
240052ae:	428c      	cmp	r4, r1
240052b0:	bf08      	it	eq
240052b2:	f043 0301 	orreq.w	r3, r3, #1
240052b6:	3130      	adds	r1, #48	; 0x30
240052b8:	4294      	cmp	r4, r2
240052ba:	bf08      	it	eq
240052bc:	f043 0301 	orreq.w	r3, r3, #1
240052c0:	3230      	adds	r2, #48	; 0x30
240052c2:	428c      	cmp	r4, r1
240052c4:	bf08      	it	eq
240052c6:	f043 0301 	orreq.w	r3, r3, #1
240052ca:	e00b      	b.n	240052e4 <HAL_DMA_Start_IT+0x2dc>
240052cc:	40020028 	.word	0x40020028
240052d0:	40020010 	.word	0x40020010
240052d4:	58025408 	.word	0x58025408
240052d8:	58025494 	.word	0x58025494
240052dc:	400204b8 	.word	0x400204b8
240052e0:	40020040 	.word	0x40020040
240052e4:	4294      	cmp	r4, r2
240052e6:	bf08      	it	eq
240052e8:	f043 0301 	orreq.w	r3, r3, #1
240052ec:	b91b      	cbnz	r3, 240052f6 <HAL_DMA_Start_IT+0x2ee>
240052ee:	4b9b      	ldr	r3, [pc, #620]	; (2400555c <HAL_DMA_Start_IT+0x554>)
240052f0:	429c      	cmp	r4, r3
240052f2:	f040 8143 	bne.w	2400557c <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
240052f6:	6823      	ldr	r3, [r4, #0]
240052f8:	f023 031e 	bic.w	r3, r3, #30
240052fc:	f043 0316 	orr.w	r3, r3, #22
24005300:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
24005302:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
24005306:	b12b      	cbz	r3, 24005314 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
24005308:	f8dc 2000 	ldr.w	r2, [ip]
2400530c:	6813      	ldr	r3, [r2, #0]
2400530e:	f043 0308 	orr.w	r3, r3, #8
24005312:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005314:	f8dc 4000 	ldr.w	r4, [ip]
24005318:	4b91      	ldr	r3, [pc, #580]	; (24005560 <HAL_DMA_Start_IT+0x558>)
2400531a:	4992      	ldr	r1, [pc, #584]	; (24005564 <HAL_DMA_Start_IT+0x55c>)
2400531c:	4a92      	ldr	r2, [pc, #584]	; (24005568 <HAL_DMA_Start_IT+0x560>)
2400531e:	428c      	cmp	r4, r1
24005320:	bf18      	it	ne
24005322:	429c      	cmpne	r4, r3
24005324:	f101 0130 	add.w	r1, r1, #48	; 0x30
24005328:	bf0c      	ite	eq
2400532a:	2301      	moveq	r3, #1
2400532c:	2300      	movne	r3, #0
2400532e:	4294      	cmp	r4, r2
24005330:	bf08      	it	eq
24005332:	f043 0301 	orreq.w	r3, r3, #1
24005336:	3230      	adds	r2, #48	; 0x30
24005338:	428c      	cmp	r4, r1
2400533a:	bf08      	it	eq
2400533c:	f043 0301 	orreq.w	r3, r3, #1
24005340:	3130      	adds	r1, #48	; 0x30
24005342:	4294      	cmp	r4, r2
24005344:	bf08      	it	eq
24005346:	f043 0301 	orreq.w	r3, r3, #1
2400534a:	3230      	adds	r2, #48	; 0x30
2400534c:	428c      	cmp	r4, r1
2400534e:	bf08      	it	eq
24005350:	f043 0301 	orreq.w	r3, r3, #1
24005354:	3130      	adds	r1, #48	; 0x30
24005356:	4294      	cmp	r4, r2
24005358:	bf08      	it	eq
2400535a:	f043 0301 	orreq.w	r3, r3, #1
2400535e:	f502 725c 	add.w	r2, r2, #880	; 0x370
24005362:	428c      	cmp	r4, r1
24005364:	bf08      	it	eq
24005366:	f043 0301 	orreq.w	r3, r3, #1
2400536a:	f501 715c 	add.w	r1, r1, #880	; 0x370
2400536e:	4294      	cmp	r4, r2
24005370:	bf08      	it	eq
24005372:	f043 0301 	orreq.w	r3, r3, #1
24005376:	3230      	adds	r2, #48	; 0x30
24005378:	428c      	cmp	r4, r1
2400537a:	bf08      	it	eq
2400537c:	f043 0301 	orreq.w	r3, r3, #1
24005380:	3130      	adds	r1, #48	; 0x30
24005382:	4294      	cmp	r4, r2
24005384:	bf08      	it	eq
24005386:	f043 0301 	orreq.w	r3, r3, #1
2400538a:	3230      	adds	r2, #48	; 0x30
2400538c:	428c      	cmp	r4, r1
2400538e:	bf08      	it	eq
24005390:	f043 0301 	orreq.w	r3, r3, #1
24005394:	3130      	adds	r1, #48	; 0x30
24005396:	4294      	cmp	r4, r2
24005398:	bf08      	it	eq
2400539a:	f043 0301 	orreq.w	r3, r3, #1
2400539e:	3230      	adds	r2, #48	; 0x30
240053a0:	428c      	cmp	r4, r1
240053a2:	bf08      	it	eq
240053a4:	f043 0301 	orreq.w	r3, r3, #1
240053a8:	3130      	adds	r1, #48	; 0x30
240053aa:	4294      	cmp	r4, r2
240053ac:	bf08      	it	eq
240053ae:	f043 0301 	orreq.w	r3, r3, #1
240053b2:	4a6e      	ldr	r2, [pc, #440]	; (2400556c <HAL_DMA_Start_IT+0x564>)
240053b4:	428c      	cmp	r4, r1
240053b6:	bf08      	it	eq
240053b8:	f043 0301 	orreq.w	r3, r3, #1
240053bc:	496c      	ldr	r1, [pc, #432]	; (24005570 <HAL_DMA_Start_IT+0x568>)
240053be:	4294      	cmp	r4, r2
240053c0:	bf08      	it	eq
240053c2:	f043 0301 	orreq.w	r3, r3, #1
240053c6:	3228      	adds	r2, #40	; 0x28
240053c8:	428c      	cmp	r4, r1
240053ca:	bf08      	it	eq
240053cc:	f043 0301 	orreq.w	r3, r3, #1
240053d0:	3128      	adds	r1, #40	; 0x28
240053d2:	4294      	cmp	r4, r2
240053d4:	bf08      	it	eq
240053d6:	f043 0301 	orreq.w	r3, r3, #1
240053da:	3228      	adds	r2, #40	; 0x28
240053dc:	428c      	cmp	r4, r1
240053de:	bf08      	it	eq
240053e0:	f043 0301 	orreq.w	r3, r3, #1
240053e4:	3128      	adds	r1, #40	; 0x28
240053e6:	4294      	cmp	r4, r2
240053e8:	bf08      	it	eq
240053ea:	f043 0301 	orreq.w	r3, r3, #1
240053ee:	3228      	adds	r2, #40	; 0x28
240053f0:	428c      	cmp	r4, r1
240053f2:	bf08      	it	eq
240053f4:	f043 0301 	orreq.w	r3, r3, #1
240053f8:	4294      	cmp	r4, r2
240053fa:	bf08      	it	eq
240053fc:	f043 0301 	orreq.w	r3, r3, #1
24005400:	b913      	cbnz	r3, 24005408 <HAL_DMA_Start_IT+0x400>
24005402:	4b5c      	ldr	r3, [pc, #368]	; (24005574 <HAL_DMA_Start_IT+0x56c>)
24005404:	429c      	cmp	r4, r3
24005406:	d111      	bne.n	2400542c <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
24005408:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
2400540c:	681a      	ldr	r2, [r3, #0]
2400540e:	03d2      	lsls	r2, r2, #15
24005410:	d503      	bpl.n	2400541a <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
24005412:	681a      	ldr	r2, [r3, #0]
24005414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24005418:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
2400541a:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
2400541e:	b11b      	cbz	r3, 24005428 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
24005420:	681a      	ldr	r2, [r3, #0]
24005422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24005426:	601a      	str	r2, [r3, #0]
24005428:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
2400542c:	4b4c      	ldr	r3, [pc, #304]	; (24005560 <HAL_DMA_Start_IT+0x558>)
2400542e:	494d      	ldr	r1, [pc, #308]	; (24005564 <HAL_DMA_Start_IT+0x55c>)
24005430:	4a4d      	ldr	r2, [pc, #308]	; (24005568 <HAL_DMA_Start_IT+0x560>)
24005432:	428c      	cmp	r4, r1
24005434:	bf18      	it	ne
24005436:	429c      	cmpne	r4, r3
24005438:	484f      	ldr	r0, [pc, #316]	; (24005578 <HAL_DMA_Start_IT+0x570>)
2400543a:	f101 0160 	add.w	r1, r1, #96	; 0x60
2400543e:	bf0c      	ite	eq
24005440:	2301      	moveq	r3, #1
24005442:	2300      	movne	r3, #0
24005444:	4294      	cmp	r4, r2
24005446:	bf08      	it	eq
24005448:	f043 0301 	orreq.w	r3, r3, #1
2400544c:	3230      	adds	r2, #48	; 0x30
2400544e:	4284      	cmp	r4, r0
24005450:	bf08      	it	eq
24005452:	f043 0301 	orreq.w	r3, r3, #1
24005456:	3060      	adds	r0, #96	; 0x60
24005458:	4294      	cmp	r4, r2
2400545a:	bf08      	it	eq
2400545c:	f043 0301 	orreq.w	r3, r3, #1
24005460:	3230      	adds	r2, #48	; 0x30
24005462:	428c      	cmp	r4, r1
24005464:	bf08      	it	eq
24005466:	f043 0301 	orreq.w	r3, r3, #1
2400546a:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
2400546e:	4294      	cmp	r4, r2
24005470:	bf08      	it	eq
24005472:	f043 0301 	orreq.w	r3, r3, #1
24005476:	f502 725c 	add.w	r2, r2, #880	; 0x370
2400547a:	4284      	cmp	r4, r0
2400547c:	bf08      	it	eq
2400547e:	f043 0301 	orreq.w	r3, r3, #1
24005482:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
24005486:	4294      	cmp	r4, r2
24005488:	bf08      	it	eq
2400548a:	f043 0301 	orreq.w	r3, r3, #1
2400548e:	3230      	adds	r2, #48	; 0x30
24005490:	428c      	cmp	r4, r1
24005492:	bf08      	it	eq
24005494:	f043 0301 	orreq.w	r3, r3, #1
24005498:	3160      	adds	r1, #96	; 0x60
2400549a:	4294      	cmp	r4, r2
2400549c:	bf08      	it	eq
2400549e:	f043 0301 	orreq.w	r3, r3, #1
240054a2:	3230      	adds	r2, #48	; 0x30
240054a4:	4284      	cmp	r4, r0
240054a6:	bf08      	it	eq
240054a8:	f043 0301 	orreq.w	r3, r3, #1
240054ac:	4294      	cmp	r4, r2
240054ae:	bf08      	it	eq
240054b0:	f043 0301 	orreq.w	r3, r3, #1
240054b4:	3230      	adds	r2, #48	; 0x30
240054b6:	428c      	cmp	r4, r1
240054b8:	bf08      	it	eq
240054ba:	f043 0301 	orreq.w	r3, r3, #1
240054be:	4294      	cmp	r4, r2
240054c0:	bf08      	it	eq
240054c2:	f043 0301 	orreq.w	r3, r3, #1
240054c6:	b933      	cbnz	r3, 240054d6 <HAL_DMA_Start_IT+0x4ce>
240054c8:	3060      	adds	r0, #96	; 0x60
240054ca:	1a20      	subs	r0, r4, r0
240054cc:	fab0 f080 	clz	r0, r0
240054d0:	0940      	lsrs	r0, r0, #5
240054d2:	2800      	cmp	r0, #0
240054d4:	d03d      	beq.n	24005552 <HAL_DMA_Start_IT+0x54a>
240054d6:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
240054d8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
240054da:	f043 0301 	orr.w	r3, r3, #1
240054de:	6023      	str	r3, [r4, #0]
}
240054e0:	bc70      	pop	{r4, r5, r6}
240054e2:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
240054e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
240054e6:	f8dc 3000 	ldr.w	r3, [ip]
240054ea:	60d9      	str	r1, [r3, #12]
240054ec:	e6a3      	b.n	24005236 <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
240054ee:	2001      	movs	r0, #1
240054f0:	4770      	bx	lr
  __HAL_LOCK(hdma);
240054f2:	2002      	movs	r0, #2
}
240054f4:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
240054f6:	481d      	ldr	r0, [pc, #116]	; (2400556c <HAL_DMA_Start_IT+0x564>)
240054f8:	4e1d      	ldr	r6, [pc, #116]	; (24005570 <HAL_DMA_Start_IT+0x568>)
240054fa:	42b4      	cmp	r4, r6
240054fc:	bf18      	it	ne
240054fe:	4284      	cmpne	r4, r0
24005500:	f106 0614 	add.w	r6, r6, #20
24005504:	bf0c      	ite	eq
24005506:	2001      	moveq	r0, #1
24005508:	2000      	movne	r0, #0
2400550a:	42b4      	cmp	r4, r6
2400550c:	bf08      	it	eq
2400550e:	f040 0001 	orreq.w	r0, r0, #1
24005512:	3614      	adds	r6, #20
24005514:	42b4      	cmp	r4, r6
24005516:	bf08      	it	eq
24005518:	f040 0001 	orreq.w	r0, r0, #1
2400551c:	3614      	adds	r6, #20
2400551e:	42b4      	cmp	r4, r6
24005520:	bf08      	it	eq
24005522:	f040 0001 	orreq.w	r0, r0, #1
24005526:	3614      	adds	r6, #20
24005528:	42b4      	cmp	r4, r6
2400552a:	bf08      	it	eq
2400552c:	f040 0001 	orreq.w	r0, r0, #1
24005530:	3614      	adds	r6, #20
24005532:	42b4      	cmp	r4, r6
24005534:	bf08      	it	eq
24005536:	f040 0001 	orreq.w	r0, r0, #1
2400553a:	b910      	cbnz	r0, 24005542 <HAL_DMA_Start_IT+0x53a>
2400553c:	480d      	ldr	r0, [pc, #52]	; (24005574 <HAL_DMA_Start_IT+0x56c>)
2400553e:	4284      	cmp	r4, r0
24005540:	d11c      	bne.n	2400557c <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24005542:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
24005546:	f000 041f 	and.w	r4, r0, #31
2400554a:	2001      	movs	r0, #1
2400554c:	40a0      	lsls	r0, r4
2400554e:	6068      	str	r0, [r5, #4]
24005550:	e663      	b.n	2400521a <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
24005552:	6823      	ldr	r3, [r4, #0]
24005554:	f043 0301 	orr.w	r3, r3, #1
24005558:	6023      	str	r3, [r4, #0]
2400555a:	e56d      	b.n	24005038 <HAL_DMA_Start_IT+0x30>
2400555c:	400204b8 	.word	0x400204b8
24005560:	40020010 	.word	0x40020010
24005564:	40020028 	.word	0x40020028
24005568:	40020040 	.word	0x40020040
2400556c:	58025408 	.word	0x58025408
24005570:	5802541c 	.word	0x5802541c
24005574:	58025494 	.word	0x58025494
24005578:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
2400557c:	6823      	ldr	r3, [r4, #0]
2400557e:	f023 030e 	bic.w	r3, r3, #14
24005582:	f043 030a 	orr.w	r3, r3, #10
24005586:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
24005588:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
2400558c:	2b00      	cmp	r3, #0
2400558e:	f43f aec1 	beq.w	24005314 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
24005592:	f8dc 2000 	ldr.w	r2, [ip]
24005596:	6813      	ldr	r3, [r2, #0]
24005598:	f043 0304 	orr.w	r3, r3, #4
2400559c:	6013      	str	r3, [r2, #0]
2400559e:	e6b9      	b.n	24005314 <HAL_DMA_Start_IT+0x30c>

240055a0 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
240055a0:	2800      	cmp	r0, #0
240055a2:	d065      	beq.n	24005670 <HAL_DMA_Abort_IT+0xd0>
{
240055a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
240055a8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
240055ac:	4603      	mov	r3, r0
240055ae:	2a02      	cmp	r2, #2
240055b0:	d159      	bne.n	24005666 <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240055b2:	6801      	ldr	r1, [r0, #0]
240055b4:	4883      	ldr	r0, [pc, #524]	; (240057c4 <HAL_DMA_Abort_IT+0x224>)
240055b6:	4281      	cmp	r1, r0
240055b8:	d04b      	beq.n	24005652 <HAL_DMA_Abort_IT+0xb2>
240055ba:	4c83      	ldr	r4, [pc, #524]	; (240057c8 <HAL_DMA_Abort_IT+0x228>)
240055bc:	42a1      	cmp	r1, r4
240055be:	d048      	beq.n	24005652 <HAL_DMA_Abort_IT+0xb2>
240055c0:	f8df a228 	ldr.w	sl, [pc, #552]	; 240057ec <HAL_DMA_Abort_IT+0x24c>
240055c4:	f8df b214 	ldr.w	fp, [pc, #532]	; 240057dc <HAL_DMA_Abort_IT+0x23c>
240055c8:	f8df 9224 	ldr.w	r9, [pc, #548]	; 240057f0 <HAL_DMA_Abort_IT+0x250>
240055cc:	4559      	cmp	r1, fp
240055ce:	bf18      	it	ne
240055d0:	4551      	cmpne	r1, sl
240055d2:	f8df 8220 	ldr.w	r8, [pc, #544]	; 240057f4 <HAL_DMA_Abort_IT+0x254>
240055d6:	f8df e220 	ldr.w	lr, [pc, #544]	; 240057f8 <HAL_DMA_Abort_IT+0x258>
240055da:	bf0c      	ite	eq
240055dc:	2201      	moveq	r2, #1
240055de:	2200      	movne	r2, #0
240055e0:	f8df c218 	ldr.w	ip, [pc, #536]	; 240057fc <HAL_DMA_Abort_IT+0x25c>
240055e4:	4549      	cmp	r1, r9
240055e6:	bf08      	it	eq
240055e8:	f042 0201 	orreq.w	r2, r2, #1
240055ec:	4d77      	ldr	r5, [pc, #476]	; (240057cc <HAL_DMA_Abort_IT+0x22c>)
240055ee:	4f78      	ldr	r7, [pc, #480]	; (240057d0 <HAL_DMA_Abort_IT+0x230>)
240055f0:	4541      	cmp	r1, r8
240055f2:	bf08      	it	eq
240055f4:	f042 0201 	orreq.w	r2, r2, #1
240055f8:	4e76      	ldr	r6, [pc, #472]	; (240057d4 <HAL_DMA_Abort_IT+0x234>)
240055fa:	4571      	cmp	r1, lr
240055fc:	bf08      	it	eq
240055fe:	f042 0201 	orreq.w	r2, r2, #1
24005602:	4561      	cmp	r1, ip
24005604:	bf08      	it	eq
24005606:	f042 0201 	orreq.w	r2, r2, #1
2400560a:	42a9      	cmp	r1, r5
2400560c:	bf08      	it	eq
2400560e:	f042 0201 	orreq.w	r2, r2, #1
24005612:	3518      	adds	r5, #24
24005614:	42a9      	cmp	r1, r5
24005616:	bf08      	it	eq
24005618:	f042 0201 	orreq.w	r2, r2, #1
2400561c:	3518      	adds	r5, #24
2400561e:	42a9      	cmp	r1, r5
24005620:	bf08      	it	eq
24005622:	f042 0201 	orreq.w	r2, r2, #1
24005626:	3518      	adds	r5, #24
24005628:	42a9      	cmp	r1, r5
2400562a:	bf08      	it	eq
2400562c:	f042 0201 	orreq.w	r2, r2, #1
24005630:	3548      	adds	r5, #72	; 0x48
24005632:	42b9      	cmp	r1, r7
24005634:	bf08      	it	eq
24005636:	f042 0201 	orreq.w	r2, r2, #1
2400563a:	42b1      	cmp	r1, r6
2400563c:	bf08      	it	eq
2400563e:	f042 0201 	orreq.w	r2, r2, #1
24005642:	42a9      	cmp	r1, r5
24005644:	bf08      	it	eq
24005646:	f042 0201 	orreq.w	r2, r2, #1
2400564a:	b912      	cbnz	r2, 24005652 <HAL_DMA_Abort_IT+0xb2>
2400564c:	4a62      	ldr	r2, [pc, #392]	; (240057d8 <HAL_DMA_Abort_IT+0x238>)
2400564e:	4291      	cmp	r1, r2
24005650:	d110      	bne.n	24005674 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
24005652:	2204      	movs	r2, #4
  return HAL_OK;
24005654:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
24005656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
2400565a:	680b      	ldr	r3, [r1, #0]
2400565c:	f023 0301 	bic.w	r3, r3, #1
24005660:	600b      	str	r3, [r1, #0]
}
24005662:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24005666:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
24005668:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2400566a:	655a      	str	r2, [r3, #84]	; 0x54
}
2400566c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
24005670:	2001      	movs	r0, #1
}
24005672:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24005674:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005676:	4c54      	ldr	r4, [pc, #336]	; (240057c8 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24005678:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400567c:	4857      	ldr	r0, [pc, #348]	; (240057dc <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
2400567e:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
24005680:	6819      	ldr	r1, [r3, #0]
24005682:	680a      	ldr	r2, [r1, #0]
24005684:	f022 0201 	bic.w	r2, r2, #1
24005688:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400568a:	4a4e      	ldr	r2, [pc, #312]	; (240057c4 <HAL_DMA_Abort_IT+0x224>)
2400568c:	6819      	ldr	r1, [r3, #0]
2400568e:	42a1      	cmp	r1, r4
24005690:	bf18      	it	ne
24005692:	4291      	cmpne	r1, r2
24005694:	f104 0430 	add.w	r4, r4, #48	; 0x30
24005698:	bf0c      	ite	eq
2400569a:	2201      	moveq	r2, #1
2400569c:	2200      	movne	r2, #0
2400569e:	4281      	cmp	r1, r0
240056a0:	bf08      	it	eq
240056a2:	f042 0201 	orreq.w	r2, r2, #1
240056a6:	3030      	adds	r0, #48	; 0x30
240056a8:	42a1      	cmp	r1, r4
240056aa:	bf08      	it	eq
240056ac:	f042 0201 	orreq.w	r2, r2, #1
240056b0:	3430      	adds	r4, #48	; 0x30
240056b2:	4281      	cmp	r1, r0
240056b4:	bf08      	it	eq
240056b6:	f042 0201 	orreq.w	r2, r2, #1
240056ba:	3030      	adds	r0, #48	; 0x30
240056bc:	42a1      	cmp	r1, r4
240056be:	bf08      	it	eq
240056c0:	f042 0201 	orreq.w	r2, r2, #1
240056c4:	3430      	adds	r4, #48	; 0x30
240056c6:	4281      	cmp	r1, r0
240056c8:	bf08      	it	eq
240056ca:	f042 0201 	orreq.w	r2, r2, #1
240056ce:	f500 705c 	add.w	r0, r0, #880	; 0x370
240056d2:	42a1      	cmp	r1, r4
240056d4:	bf08      	it	eq
240056d6:	f042 0201 	orreq.w	r2, r2, #1
240056da:	f504 745c 	add.w	r4, r4, #880	; 0x370
240056de:	4281      	cmp	r1, r0
240056e0:	bf08      	it	eq
240056e2:	f042 0201 	orreq.w	r2, r2, #1
240056e6:	3030      	adds	r0, #48	; 0x30
240056e8:	42a1      	cmp	r1, r4
240056ea:	bf08      	it	eq
240056ec:	f042 0201 	orreq.w	r2, r2, #1
240056f0:	3430      	adds	r4, #48	; 0x30
240056f2:	4281      	cmp	r1, r0
240056f4:	bf08      	it	eq
240056f6:	f042 0201 	orreq.w	r2, r2, #1
240056fa:	3030      	adds	r0, #48	; 0x30
240056fc:	42a1      	cmp	r1, r4
240056fe:	bf08      	it	eq
24005700:	f042 0201 	orreq.w	r2, r2, #1
24005704:	3430      	adds	r4, #48	; 0x30
24005706:	4281      	cmp	r1, r0
24005708:	bf08      	it	eq
2400570a:	f042 0201 	orreq.w	r2, r2, #1
2400570e:	3030      	adds	r0, #48	; 0x30
24005710:	42a1      	cmp	r1, r4
24005712:	bf08      	it	eq
24005714:	f042 0201 	orreq.w	r2, r2, #1
24005718:	3430      	adds	r4, #48	; 0x30
2400571a:	4281      	cmp	r1, r0
2400571c:	bf08      	it	eq
2400571e:	f042 0201 	orreq.w	r2, r2, #1
24005722:	482f      	ldr	r0, [pc, #188]	; (240057e0 <HAL_DMA_Abort_IT+0x240>)
24005724:	42a1      	cmp	r1, r4
24005726:	bf08      	it	eq
24005728:	f042 0201 	orreq.w	r2, r2, #1
2400572c:	4c2d      	ldr	r4, [pc, #180]	; (240057e4 <HAL_DMA_Abort_IT+0x244>)
2400572e:	4281      	cmp	r1, r0
24005730:	bf08      	it	eq
24005732:	f042 0201 	orreq.w	r2, r2, #1
24005736:	3028      	adds	r0, #40	; 0x28
24005738:	42a1      	cmp	r1, r4
2400573a:	bf08      	it	eq
2400573c:	f042 0201 	orreq.w	r2, r2, #1
24005740:	3428      	adds	r4, #40	; 0x28
24005742:	4281      	cmp	r1, r0
24005744:	bf08      	it	eq
24005746:	f042 0201 	orreq.w	r2, r2, #1
2400574a:	3028      	adds	r0, #40	; 0x28
2400574c:	42a1      	cmp	r1, r4
2400574e:	bf08      	it	eq
24005750:	f042 0201 	orreq.w	r2, r2, #1
24005754:	3428      	adds	r4, #40	; 0x28
24005756:	4281      	cmp	r1, r0
24005758:	bf08      	it	eq
2400575a:	f042 0201 	orreq.w	r2, r2, #1
2400575e:	3028      	adds	r0, #40	; 0x28
24005760:	42a1      	cmp	r1, r4
24005762:	bf08      	it	eq
24005764:	f042 0201 	orreq.w	r2, r2, #1
24005768:	4281      	cmp	r1, r0
2400576a:	bf08      	it	eq
2400576c:	f042 0201 	orreq.w	r2, r2, #1
24005770:	b912      	cbnz	r2, 24005778 <HAL_DMA_Abort_IT+0x1d8>
24005772:	4a1d      	ldr	r2, [pc, #116]	; (240057e8 <HAL_DMA_Abort_IT+0x248>)
24005774:	4291      	cmp	r1, r2
24005776:	d117      	bne.n	240057a8 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24005778:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
2400577a:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
2400577c:	6801      	ldr	r1, [r0, #0]
2400577e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24005782:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24005784:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005788:	f001 011f 	and.w	r1, r1, #31
2400578c:	408a      	lsls	r2, r1
2400578e:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24005790:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
24005794:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
24005796:	6eda      	ldr	r2, [r3, #108]	; 0x6c
24005798:	b132      	cbz	r2, 240057a8 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
2400579a:	6811      	ldr	r1, [r2, #0]
2400579c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
240057a0:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240057a2:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
240057a6:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
240057a8:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
240057aa:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
240057ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
240057ae:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
240057b2:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
240057b6:	b11a      	cbz	r2, 240057c0 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
240057b8:	4618      	mov	r0, r3
240057ba:	4790      	blx	r2
  return HAL_OK;
240057bc:	4620      	mov	r0, r4
240057be:	e755      	b.n	2400566c <HAL_DMA_Abort_IT+0xcc>
240057c0:	4610      	mov	r0, r2
240057c2:	e753      	b.n	2400566c <HAL_DMA_Abort_IT+0xcc>
240057c4:	40020010 	.word	0x40020010
240057c8:	40020028 	.word	0x40020028
240057cc:	40020410 	.word	0x40020410
240057d0:	40020470 	.word	0x40020470
240057d4:	40020488 	.word	0x40020488
240057d8:	400204b8 	.word	0x400204b8
240057dc:	40020040 	.word	0x40020040
240057e0:	58025408 	.word	0x58025408
240057e4:	5802541c 	.word	0x5802541c
240057e8:	58025494 	.word	0x58025494
240057ec:	40020058 	.word	0x40020058
240057f0:	40020070 	.word	0x40020070
240057f4:	40020088 	.word	0x40020088
240057f8:	400200a0 	.word	0x400200a0
240057fc:	400200b8 	.word	0x400200b8

24005800 <HAL_DMA_IRQHandler>:
{
24005800:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
24005802:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
24005804:	4b9a      	ldr	r3, [pc, #616]	; (24005a70 <HAL_DMA_IRQHandler+0x270>)
{
24005806:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24005808:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
2400580a:	681f      	ldr	r7, [r3, #0]
{
2400580c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
2400580e:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24005810:	6803      	ldr	r3, [r0, #0]
24005812:	4a98      	ldr	r2, [pc, #608]	; (24005a74 <HAL_DMA_IRQHandler+0x274>)
  tmpisr_dma  = regs_dma->ISR;
24005814:	6835      	ldr	r5, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24005816:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
24005818:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
2400581a:	d048      	beq.n	240058ae <HAL_DMA_IRQHandler+0xae>
2400581c:	3218      	adds	r2, #24
2400581e:	4293      	cmp	r3, r2
24005820:	d045      	beq.n	240058ae <HAL_DMA_IRQHandler+0xae>
24005822:	3218      	adds	r2, #24
24005824:	4894      	ldr	r0, [pc, #592]	; (24005a78 <HAL_DMA_IRQHandler+0x278>)
24005826:	4283      	cmp	r3, r0
24005828:	bf18      	it	ne
2400582a:	4293      	cmpne	r3, r2
2400582c:	f100 0018 	add.w	r0, r0, #24
24005830:	bf0c      	ite	eq
24005832:	2201      	moveq	r2, #1
24005834:	2200      	movne	r2, #0
24005836:	4283      	cmp	r3, r0
24005838:	bf08      	it	eq
2400583a:	f042 0201 	orreq.w	r2, r2, #1
2400583e:	3018      	adds	r0, #24
24005840:	4283      	cmp	r3, r0
24005842:	bf08      	it	eq
24005844:	f042 0201 	orreq.w	r2, r2, #1
24005848:	3018      	adds	r0, #24
2400584a:	4283      	cmp	r3, r0
2400584c:	bf08      	it	eq
2400584e:	f042 0201 	orreq.w	r2, r2, #1
24005852:	3018      	adds	r0, #24
24005854:	4283      	cmp	r3, r0
24005856:	bf08      	it	eq
24005858:	f042 0201 	orreq.w	r2, r2, #1
2400585c:	f500 7056 	add.w	r0, r0, #856	; 0x358
24005860:	4283      	cmp	r3, r0
24005862:	bf08      	it	eq
24005864:	f042 0201 	orreq.w	r2, r2, #1
24005868:	3018      	adds	r0, #24
2400586a:	4283      	cmp	r3, r0
2400586c:	bf08      	it	eq
2400586e:	f042 0201 	orreq.w	r2, r2, #1
24005872:	3018      	adds	r0, #24
24005874:	4283      	cmp	r3, r0
24005876:	bf08      	it	eq
24005878:	f042 0201 	orreq.w	r2, r2, #1
2400587c:	3018      	adds	r0, #24
2400587e:	4283      	cmp	r3, r0
24005880:	bf08      	it	eq
24005882:	f042 0201 	orreq.w	r2, r2, #1
24005886:	3018      	adds	r0, #24
24005888:	4283      	cmp	r3, r0
2400588a:	bf08      	it	eq
2400588c:	f042 0201 	orreq.w	r2, r2, #1
24005890:	3018      	adds	r0, #24
24005892:	4283      	cmp	r3, r0
24005894:	bf08      	it	eq
24005896:	f042 0201 	orreq.w	r2, r2, #1
2400589a:	3018      	adds	r0, #24
2400589c:	4283      	cmp	r3, r0
2400589e:	bf08      	it	eq
240058a0:	f042 0201 	orreq.w	r2, r2, #1
240058a4:	b91a      	cbnz	r2, 240058ae <HAL_DMA_IRQHandler+0xae>
240058a6:	4a75      	ldr	r2, [pc, #468]	; (24005a7c <HAL_DMA_IRQHandler+0x27c>)
240058a8:	4293      	cmp	r3, r2
240058aa:	f040 8294 	bne.w	24005dd6 <HAL_DMA_IRQHandler+0x5d6>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240058ae:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
240058b2:	2208      	movs	r2, #8
240058b4:	f00e 011f 	and.w	r1, lr, #31
240058b8:	408a      	lsls	r2, r1
240058ba:	422a      	tst	r2, r5
240058bc:	f040 8193 	bne.w	24005be6 <HAL_DMA_IRQHandler+0x3e6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240058c0:	fa25 f201 	lsr.w	r2, r5, r1
240058c4:	07d2      	lsls	r2, r2, #31
240058c6:	d50e      	bpl.n	240058e6 <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
240058c8:	695a      	ldr	r2, [r3, #20]
240058ca:	0612      	lsls	r2, r2, #24
240058cc:	f140 824d 	bpl.w	24005d6a <HAL_DMA_IRQHandler+0x56a>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
240058d0:	2301      	movs	r3, #1
240058d2:	408b      	lsls	r3, r1
240058d4:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240058d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240058d8:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240058dc:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240058e0:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
240058e4:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240058e6:	f04f 0c04 	mov.w	ip, #4
240058ea:	fa0c fc01 	lsl.w	ip, ip, r1
240058ee:	ea1c 0f05 	tst.w	ip, r5
240058f2:	d05f      	beq.n	240059b4 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
240058f4:	6822      	ldr	r2, [r4, #0]
240058f6:	485f      	ldr	r0, [pc, #380]	; (24005a74 <HAL_DMA_IRQHandler+0x274>)
240058f8:	4b61      	ldr	r3, [pc, #388]	; (24005a80 <HAL_DMA_IRQHandler+0x280>)
240058fa:	429a      	cmp	r2, r3
240058fc:	bf18      	it	ne
240058fe:	4282      	cmpne	r2, r0
24005900:	f103 0318 	add.w	r3, r3, #24
24005904:	bf0c      	ite	eq
24005906:	2001      	moveq	r0, #1
24005908:	2000      	movne	r0, #0
2400590a:	429a      	cmp	r2, r3
2400590c:	bf08      	it	eq
2400590e:	f040 0001 	orreq.w	r0, r0, #1
24005912:	3318      	adds	r3, #24
24005914:	429a      	cmp	r2, r3
24005916:	bf08      	it	eq
24005918:	f040 0001 	orreq.w	r0, r0, #1
2400591c:	3318      	adds	r3, #24
2400591e:	429a      	cmp	r2, r3
24005920:	bf08      	it	eq
24005922:	f040 0001 	orreq.w	r0, r0, #1
24005926:	3318      	adds	r3, #24
24005928:	429a      	cmp	r2, r3
2400592a:	bf08      	it	eq
2400592c:	f040 0001 	orreq.w	r0, r0, #1
24005930:	3318      	adds	r3, #24
24005932:	429a      	cmp	r2, r3
24005934:	bf08      	it	eq
24005936:	f040 0001 	orreq.w	r0, r0, #1
2400593a:	3318      	adds	r3, #24
2400593c:	429a      	cmp	r2, r3
2400593e:	bf08      	it	eq
24005940:	f040 0001 	orreq.w	r0, r0, #1
24005944:	f503 7356 	add.w	r3, r3, #856	; 0x358
24005948:	429a      	cmp	r2, r3
2400594a:	bf08      	it	eq
2400594c:	f040 0001 	orreq.w	r0, r0, #1
24005950:	3318      	adds	r3, #24
24005952:	429a      	cmp	r2, r3
24005954:	bf08      	it	eq
24005956:	f040 0001 	orreq.w	r0, r0, #1
2400595a:	3318      	adds	r3, #24
2400595c:	429a      	cmp	r2, r3
2400595e:	bf08      	it	eq
24005960:	f040 0001 	orreq.w	r0, r0, #1
24005964:	3318      	adds	r3, #24
24005966:	429a      	cmp	r2, r3
24005968:	bf08      	it	eq
2400596a:	f040 0001 	orreq.w	r0, r0, #1
2400596e:	3318      	adds	r3, #24
24005970:	429a      	cmp	r2, r3
24005972:	bf08      	it	eq
24005974:	f040 0001 	orreq.w	r0, r0, #1
24005978:	3318      	adds	r3, #24
2400597a:	429a      	cmp	r2, r3
2400597c:	bf08      	it	eq
2400597e:	f040 0001 	orreq.w	r0, r0, #1
24005982:	3318      	adds	r3, #24
24005984:	429a      	cmp	r2, r3
24005986:	bf08      	it	eq
24005988:	f040 0001 	orreq.w	r0, r0, #1
2400598c:	4613      	mov	r3, r2
2400598e:	b918      	cbnz	r0, 24005998 <HAL_DMA_IRQHandler+0x198>
24005990:	483a      	ldr	r0, [pc, #232]	; (24005a7c <HAL_DMA_IRQHandler+0x27c>)
24005992:	4282      	cmp	r2, r0
24005994:	f040 825a 	bne.w	24005e4c <HAL_DMA_IRQHandler+0x64c>
24005998:	681a      	ldr	r2, [r3, #0]
2400599a:	0790      	lsls	r0, r2, #30
2400599c:	f140 81f1 	bpl.w	24005d82 <HAL_DMA_IRQHandler+0x582>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
240059a0:	f8c6 c008 	str.w	ip, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
240059a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240059a6:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
240059aa:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240059ae:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
240059b2:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240059b4:	f04f 0c10 	mov.w	ip, #16
240059b8:	fa0c fc01 	lsl.w	ip, ip, r1
240059bc:	ea1c 0f05 	tst.w	ip, r5
240059c0:	d075      	beq.n	24005aae <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
240059c2:	6822      	ldr	r2, [r4, #0]
240059c4:	482b      	ldr	r0, [pc, #172]	; (24005a74 <HAL_DMA_IRQHandler+0x274>)
240059c6:	4b2e      	ldr	r3, [pc, #184]	; (24005a80 <HAL_DMA_IRQHandler+0x280>)
240059c8:	429a      	cmp	r2, r3
240059ca:	bf18      	it	ne
240059cc:	4282      	cmpne	r2, r0
240059ce:	f103 0318 	add.w	r3, r3, #24
240059d2:	bf0c      	ite	eq
240059d4:	2001      	moveq	r0, #1
240059d6:	2000      	movne	r0, #0
240059d8:	429a      	cmp	r2, r3
240059da:	bf08      	it	eq
240059dc:	f040 0001 	orreq.w	r0, r0, #1
240059e0:	3318      	adds	r3, #24
240059e2:	429a      	cmp	r2, r3
240059e4:	bf08      	it	eq
240059e6:	f040 0001 	orreq.w	r0, r0, #1
240059ea:	3318      	adds	r3, #24
240059ec:	429a      	cmp	r2, r3
240059ee:	bf08      	it	eq
240059f0:	f040 0001 	orreq.w	r0, r0, #1
240059f4:	3318      	adds	r3, #24
240059f6:	429a      	cmp	r2, r3
240059f8:	bf08      	it	eq
240059fa:	f040 0001 	orreq.w	r0, r0, #1
240059fe:	3318      	adds	r3, #24
24005a00:	429a      	cmp	r2, r3
24005a02:	bf08      	it	eq
24005a04:	f040 0001 	orreq.w	r0, r0, #1
24005a08:	3318      	adds	r3, #24
24005a0a:	429a      	cmp	r2, r3
24005a0c:	bf08      	it	eq
24005a0e:	f040 0001 	orreq.w	r0, r0, #1
24005a12:	f503 7356 	add.w	r3, r3, #856	; 0x358
24005a16:	429a      	cmp	r2, r3
24005a18:	bf08      	it	eq
24005a1a:	f040 0001 	orreq.w	r0, r0, #1
24005a1e:	3318      	adds	r3, #24
24005a20:	429a      	cmp	r2, r3
24005a22:	bf08      	it	eq
24005a24:	f040 0001 	orreq.w	r0, r0, #1
24005a28:	3318      	adds	r3, #24
24005a2a:	429a      	cmp	r2, r3
24005a2c:	bf08      	it	eq
24005a2e:	f040 0001 	orreq.w	r0, r0, #1
24005a32:	3318      	adds	r3, #24
24005a34:	429a      	cmp	r2, r3
24005a36:	bf08      	it	eq
24005a38:	f040 0001 	orreq.w	r0, r0, #1
24005a3c:	3318      	adds	r3, #24
24005a3e:	429a      	cmp	r2, r3
24005a40:	bf08      	it	eq
24005a42:	f040 0001 	orreq.w	r0, r0, #1
24005a46:	3318      	adds	r3, #24
24005a48:	429a      	cmp	r2, r3
24005a4a:	bf08      	it	eq
24005a4c:	f040 0001 	orreq.w	r0, r0, #1
24005a50:	3318      	adds	r3, #24
24005a52:	429a      	cmp	r2, r3
24005a54:	bf08      	it	eq
24005a56:	f040 0001 	orreq.w	r0, r0, #1
24005a5a:	4613      	mov	r3, r2
24005a5c:	b918      	cbnz	r0, 24005a66 <HAL_DMA_IRQHandler+0x266>
24005a5e:	4807      	ldr	r0, [pc, #28]	; (24005a7c <HAL_DMA_IRQHandler+0x27c>)
24005a60:	4282      	cmp	r2, r0
24005a62:	f040 813c 	bne.w	24005cde <HAL_DMA_IRQHandler+0x4de>
24005a66:	681a      	ldr	r2, [r3, #0]
24005a68:	0712      	lsls	r2, r2, #28
24005a6a:	f140 8177 	bpl.w	24005d5c <HAL_DMA_IRQHandler+0x55c>
24005a6e:	e009      	b.n	24005a84 <HAL_DMA_IRQHandler+0x284>
24005a70:	20000748 	.word	0x20000748
24005a74:	40020010 	.word	0x40020010
24005a78:	40020058 	.word	0x40020058
24005a7c:	400204b8 	.word	0x400204b8
24005a80:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24005a84:	f8c6 c008 	str.w	ip, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24005a88:	6823      	ldr	r3, [r4, #0]
24005a8a:	681a      	ldr	r2, [r3, #0]
24005a8c:	0350      	lsls	r0, r2, #13
24005a8e:	f100 8181 	bmi.w	24005d94 <HAL_DMA_IRQHandler+0x594>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24005a92:	681a      	ldr	r2, [r3, #0]
24005a94:	05d2      	lsls	r2, r2, #23
24005a96:	d403      	bmi.n	24005aa0 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24005a98:	681a      	ldr	r2, [r3, #0]
24005a9a:	f022 0208 	bic.w	r2, r2, #8
24005a9e:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
24005aa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
24005aa2:	b10b      	cbz	r3, 24005aa8 <HAL_DMA_IRQHandler+0x2a8>
            hdma->XferHalfCpltCallback(hdma);
24005aa4:	4620      	mov	r0, r4
24005aa6:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005aa8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
24005aaa:	f001 011f 	and.w	r1, r1, #31
24005aae:	2320      	movs	r3, #32
24005ab0:	fa03 f101 	lsl.w	r1, r3, r1
24005ab4:	4229      	tst	r1, r5
24005ab6:	d066      	beq.n	24005b86 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24005ab8:	6823      	ldr	r3, [r4, #0]
24005aba:	4a92      	ldr	r2, [pc, #584]	; (24005d04 <HAL_DMA_IRQHandler+0x504>)
24005abc:	4892      	ldr	r0, [pc, #584]	; (24005d08 <HAL_DMA_IRQHandler+0x508>)
24005abe:	4283      	cmp	r3, r0
24005ac0:	bf18      	it	ne
24005ac2:	4293      	cmpne	r3, r2
24005ac4:	f100 0018 	add.w	r0, r0, #24
24005ac8:	bf0c      	ite	eq
24005aca:	2201      	moveq	r2, #1
24005acc:	2200      	movne	r2, #0
24005ace:	4283      	cmp	r3, r0
24005ad0:	bf08      	it	eq
24005ad2:	f042 0201 	orreq.w	r2, r2, #1
24005ad6:	3018      	adds	r0, #24
24005ad8:	4283      	cmp	r3, r0
24005ada:	bf08      	it	eq
24005adc:	f042 0201 	orreq.w	r2, r2, #1
24005ae0:	3018      	adds	r0, #24
24005ae2:	4283      	cmp	r3, r0
24005ae4:	bf08      	it	eq
24005ae6:	f042 0201 	orreq.w	r2, r2, #1
24005aea:	3018      	adds	r0, #24
24005aec:	4283      	cmp	r3, r0
24005aee:	bf08      	it	eq
24005af0:	f042 0201 	orreq.w	r2, r2, #1
24005af4:	3018      	adds	r0, #24
24005af6:	4283      	cmp	r3, r0
24005af8:	bf08      	it	eq
24005afa:	f042 0201 	orreq.w	r2, r2, #1
24005afe:	3018      	adds	r0, #24
24005b00:	4283      	cmp	r3, r0
24005b02:	bf08      	it	eq
24005b04:	f042 0201 	orreq.w	r2, r2, #1
24005b08:	f500 7056 	add.w	r0, r0, #856	; 0x358
24005b0c:	4283      	cmp	r3, r0
24005b0e:	bf08      	it	eq
24005b10:	f042 0201 	orreq.w	r2, r2, #1
24005b14:	3018      	adds	r0, #24
24005b16:	4283      	cmp	r3, r0
24005b18:	bf08      	it	eq
24005b1a:	f042 0201 	orreq.w	r2, r2, #1
24005b1e:	3018      	adds	r0, #24
24005b20:	4283      	cmp	r3, r0
24005b22:	bf08      	it	eq
24005b24:	f042 0201 	orreq.w	r2, r2, #1
24005b28:	3018      	adds	r0, #24
24005b2a:	4283      	cmp	r3, r0
24005b2c:	bf08      	it	eq
24005b2e:	f042 0201 	orreq.w	r2, r2, #1
24005b32:	3018      	adds	r0, #24
24005b34:	4283      	cmp	r3, r0
24005b36:	bf08      	it	eq
24005b38:	f042 0201 	orreq.w	r2, r2, #1
24005b3c:	3018      	adds	r0, #24
24005b3e:	4283      	cmp	r3, r0
24005b40:	bf08      	it	eq
24005b42:	f042 0201 	orreq.w	r2, r2, #1
24005b46:	3018      	adds	r0, #24
24005b48:	4283      	cmp	r3, r0
24005b4a:	bf08      	it	eq
24005b4c:	f042 0201 	orreq.w	r2, r2, #1
24005b50:	b91a      	cbnz	r2, 24005b5a <HAL_DMA_IRQHandler+0x35a>
24005b52:	4a6e      	ldr	r2, [pc, #440]	; (24005d0c <HAL_DMA_IRQHandler+0x50c>)
24005b54:	4293      	cmp	r3, r2
24005b56:	f040 80cf 	bne.w	24005cf8 <HAL_DMA_IRQHandler+0x4f8>
24005b5a:	681b      	ldr	r3, [r3, #0]
24005b5c:	06dd      	lsls	r5, r3, #27
24005b5e:	d512      	bpl.n	24005b86 <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24005b60:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
24005b62:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
24005b66:	2b04      	cmp	r3, #4
24005b68:	f000 80d4 	beq.w	24005d14 <HAL_DMA_IRQHandler+0x514>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24005b6c:	6823      	ldr	r3, [r4, #0]
24005b6e:	681a      	ldr	r2, [r3, #0]
24005b70:	0352      	lsls	r2, r2, #13
24005b72:	f140 8118 	bpl.w	24005da6 <HAL_DMA_IRQHandler+0x5a6>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24005b76:	681b      	ldr	r3, [r3, #0]
24005b78:	031e      	lsls	r6, r3, #12
24005b7a:	f140 8123 	bpl.w	24005dc4 <HAL_DMA_IRQHandler+0x5c4>
          if(hdma->XferCpltCallback != NULL)
24005b7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24005b80:	b10b      	cbz	r3, 24005b86 <HAL_DMA_IRQHandler+0x386>
            hdma->XferCpltCallback(hdma);
24005b82:	4620      	mov	r0, r4
24005b84:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
24005b86:	6d63      	ldr	r3, [r4, #84]	; 0x54
24005b88:	2b00      	cmp	r3, #0
24005b8a:	f000 80e5 	beq.w	24005d58 <HAL_DMA_IRQHandler+0x558>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24005b8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
24005b90:	07dd      	lsls	r5, r3, #31
24005b92:	d51f      	bpl.n	24005bd4 <HAL_DMA_IRQHandler+0x3d4>
        __HAL_DMA_DISABLE(hdma);
24005b94:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
24005b96:	2104      	movs	r1, #4
24005b98:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
24005b9c:	6813      	ldr	r3, [r2, #0]
24005b9e:	f023 0301 	bic.w	r3, r3, #1
24005ba2:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
24005ba4:	4a5a      	ldr	r2, [pc, #360]	; (24005d10 <HAL_DMA_IRQHandler+0x510>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24005ba6:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
24005ba8:	fba2 7207 	umull	r7, r2, r2, r7
24005bac:	0a92      	lsrs	r2, r2, #10
24005bae:	e002      	b.n	24005bb6 <HAL_DMA_IRQHandler+0x3b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24005bb0:	680b      	ldr	r3, [r1, #0]
24005bb2:	07d8      	lsls	r0, r3, #31
24005bb4:	d504      	bpl.n	24005bc0 <HAL_DMA_IRQHandler+0x3c0>
          if (++count > timeout)
24005bb6:	9b01      	ldr	r3, [sp, #4]
24005bb8:	3301      	adds	r3, #1
24005bba:	4293      	cmp	r3, r2
24005bbc:	9301      	str	r3, [sp, #4]
24005bbe:	d9f7      	bls.n	24005bb0 <HAL_DMA_IRQHandler+0x3b0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24005bc0:	680b      	ldr	r3, [r1, #0]
24005bc2:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
24005bc4:	bf4c      	ite	mi
24005bc6:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
24005bc8:	2301      	movpl	r3, #1
24005bca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
24005bce:	2300      	movs	r3, #0
24005bd0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
24005bd4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
24005bd6:	2b00      	cmp	r3, #0
24005bd8:	f000 80be 	beq.w	24005d58 <HAL_DMA_IRQHandler+0x558>
        hdma->XferErrorCallback(hdma);
24005bdc:	4620      	mov	r0, r4
}
24005bde:	b003      	add	sp, #12
24005be0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
24005be4:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
24005be6:	681a      	ldr	r2, [r3, #0]
24005be8:	0752      	lsls	r2, r2, #29
24005bea:	d511      	bpl.n	24005c10 <HAL_DMA_IRQHandler+0x410>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
24005bec:	681a      	ldr	r2, [r3, #0]
24005bee:	f022 0204 	bic.w	r2, r2, #4
24005bf2:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005bf4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24005bf6:	f003 021f 	and.w	r2, r3, #31
24005bfa:	2308      	movs	r3, #8
24005bfc:	4093      	lsls	r3, r2
24005bfe:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005c00:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005c02:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005c06:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005c0a:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
24005c0e:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005c10:	fa25 f301 	lsr.w	r3, r5, r1
24005c14:	07d8      	lsls	r0, r3, #31
24005c16:	f57f ae66 	bpl.w	240058e6 <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24005c1a:	6822      	ldr	r2, [r4, #0]
24005c1c:	4839      	ldr	r0, [pc, #228]	; (24005d04 <HAL_DMA_IRQHandler+0x504>)
24005c1e:	4b3a      	ldr	r3, [pc, #232]	; (24005d08 <HAL_DMA_IRQHandler+0x508>)
24005c20:	429a      	cmp	r2, r3
24005c22:	bf18      	it	ne
24005c24:	4282      	cmpne	r2, r0
24005c26:	f103 0318 	add.w	r3, r3, #24
24005c2a:	bf0c      	ite	eq
24005c2c:	2001      	moveq	r0, #1
24005c2e:	2000      	movne	r0, #0
24005c30:	429a      	cmp	r2, r3
24005c32:	bf08      	it	eq
24005c34:	f040 0001 	orreq.w	r0, r0, #1
24005c38:	3318      	adds	r3, #24
24005c3a:	429a      	cmp	r2, r3
24005c3c:	bf08      	it	eq
24005c3e:	f040 0001 	orreq.w	r0, r0, #1
24005c42:	3318      	adds	r3, #24
24005c44:	429a      	cmp	r2, r3
24005c46:	bf08      	it	eq
24005c48:	f040 0001 	orreq.w	r0, r0, #1
24005c4c:	3318      	adds	r3, #24
24005c4e:	429a      	cmp	r2, r3
24005c50:	bf08      	it	eq
24005c52:	f040 0001 	orreq.w	r0, r0, #1
24005c56:	3318      	adds	r3, #24
24005c58:	429a      	cmp	r2, r3
24005c5a:	bf08      	it	eq
24005c5c:	f040 0001 	orreq.w	r0, r0, #1
24005c60:	3318      	adds	r3, #24
24005c62:	429a      	cmp	r2, r3
24005c64:	bf08      	it	eq
24005c66:	f040 0001 	orreq.w	r0, r0, #1
24005c6a:	f503 7356 	add.w	r3, r3, #856	; 0x358
24005c6e:	429a      	cmp	r2, r3
24005c70:	bf08      	it	eq
24005c72:	f040 0001 	orreq.w	r0, r0, #1
24005c76:	3318      	adds	r3, #24
24005c78:	429a      	cmp	r2, r3
24005c7a:	bf08      	it	eq
24005c7c:	f040 0001 	orreq.w	r0, r0, #1
24005c80:	3318      	adds	r3, #24
24005c82:	429a      	cmp	r2, r3
24005c84:	bf08      	it	eq
24005c86:	f040 0001 	orreq.w	r0, r0, #1
24005c8a:	3318      	adds	r3, #24
24005c8c:	429a      	cmp	r2, r3
24005c8e:	bf08      	it	eq
24005c90:	f040 0001 	orreq.w	r0, r0, #1
24005c94:	3318      	adds	r3, #24
24005c96:	429a      	cmp	r2, r3
24005c98:	bf08      	it	eq
24005c9a:	f040 0001 	orreq.w	r0, r0, #1
24005c9e:	3318      	adds	r3, #24
24005ca0:	429a      	cmp	r2, r3
24005ca2:	bf08      	it	eq
24005ca4:	f040 0001 	orreq.w	r0, r0, #1
24005ca8:	3318      	adds	r3, #24
24005caa:	429a      	cmp	r2, r3
24005cac:	bf08      	it	eq
24005cae:	f040 0001 	orreq.w	r0, r0, #1
24005cb2:	4613      	mov	r3, r2
24005cb4:	2800      	cmp	r0, #0
24005cb6:	f47f ae07 	bne.w	240058c8 <HAL_DMA_IRQHandler+0xc8>
24005cba:	4814      	ldr	r0, [pc, #80]	; (24005d0c <HAL_DMA_IRQHandler+0x50c>)
24005cbc:	4282      	cmp	r2, r0
24005cbe:	f43f ae03 	beq.w	240058c8 <HAL_DMA_IRQHandler+0xc8>
24005cc2:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005cc4:	2304      	movs	r3, #4
24005cc6:	408b      	lsls	r3, r1
24005cc8:	422b      	tst	r3, r5
24005cca:	f040 80bf 	bne.w	24005e4c <HAL_DMA_IRQHandler+0x64c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005cce:	f04f 0c10 	mov.w	ip, #16
24005cd2:	fa0c fc01 	lsl.w	ip, ip, r1
24005cd6:	ea15 0f0c 	tst.w	r5, ip
24005cda:	f43f aee8 	beq.w	24005aae <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24005cde:	6813      	ldr	r3, [r2, #0]
24005ce0:	075b      	lsls	r3, r3, #29
24005ce2:	f53f aecf 	bmi.w	24005a84 <HAL_DMA_IRQHandler+0x284>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005ce6:	f00e 0e1f 	and.w	lr, lr, #31
24005cea:	2120      	movs	r1, #32
24005cec:	fa01 f10e 	lsl.w	r1, r1, lr
24005cf0:	420d      	tst	r5, r1
24005cf2:	f43f af48 	beq.w	24005b86 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24005cf6:	4613      	mov	r3, r2
24005cf8:	681b      	ldr	r3, [r3, #0]
24005cfa:	0798      	lsls	r0, r3, #30
24005cfc:	f57f af43 	bpl.w	24005b86 <HAL_DMA_IRQHandler+0x386>
24005d00:	e72e      	b.n	24005b60 <HAL_DMA_IRQHandler+0x360>
24005d02:	bf00      	nop
24005d04:	40020010 	.word	0x40020010
24005d08:	40020028 	.word	0x40020028
24005d0c:	400204b8 	.word	0x400204b8
24005d10:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
24005d14:	6822      	ldr	r2, [r4, #0]
24005d16:	6813      	ldr	r3, [r2, #0]
24005d18:	f023 0316 	bic.w	r3, r3, #22
24005d1c:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
24005d1e:	6822      	ldr	r2, [r4, #0]
24005d20:	6953      	ldr	r3, [r2, #20]
24005d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24005d26:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24005d28:	6c23      	ldr	r3, [r4, #64]	; 0x40
24005d2a:	2b00      	cmp	r3, #0
24005d2c:	d04f      	beq.n	24005dce <HAL_DMA_IRQHandler+0x5ce>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24005d2e:	6822      	ldr	r2, [r4, #0]
24005d30:	6813      	ldr	r3, [r2, #0]
24005d32:	f023 0308 	bic.w	r3, r3, #8
24005d36:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005d38:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24005d3a:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
24005d3c:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005d3e:	f002 021f 	and.w	r2, r2, #31
24005d42:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
24005d44:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005d46:	60b3      	str	r3, [r6, #8]
          if(hdma->XferAbortCallback != NULL)
24005d48:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
24005d4a:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24005d4e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
24005d52:	2b00      	cmp	r3, #0
24005d54:	f47f af42 	bne.w	24005bdc <HAL_DMA_IRQHandler+0x3dc>
}
24005d58:	b003      	add	sp, #12
24005d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005d5c:	2220      	movs	r2, #32
24005d5e:	fa02 f101 	lsl.w	r1, r2, r1
24005d62:	420d      	tst	r5, r1
24005d64:	f47f aef9 	bne.w	24005b5a <HAL_DMA_IRQHandler+0x35a>
24005d68:	e70d      	b.n	24005b86 <HAL_DMA_IRQHandler+0x386>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005d6a:	f04f 0c04 	mov.w	ip, #4
24005d6e:	fa0c fc01 	lsl.w	ip, ip, r1
24005d72:	ea15 0f0c 	tst.w	r5, ip
24005d76:	f43f ae1d 	beq.w	240059b4 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24005d7a:	681a      	ldr	r2, [r3, #0]
24005d7c:	0790      	lsls	r0, r2, #30
24005d7e:	f53f ae0f 	bmi.w	240059a0 <HAL_DMA_IRQHandler+0x1a0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005d82:	f04f 0c10 	mov.w	ip, #16
24005d86:	fa0c fc01 	lsl.w	ip, ip, r1
24005d8a:	ea15 0f0c 	tst.w	r5, ip
24005d8e:	f47f ae6a 	bne.w	24005a66 <HAL_DMA_IRQHandler+0x266>
24005d92:	e68c      	b.n	24005aae <HAL_DMA_IRQHandler+0x2ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24005d94:	681b      	ldr	r3, [r3, #0]
24005d96:	0319      	lsls	r1, r3, #12
24005d98:	f57f ae82 	bpl.w	24005aa0 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1HalfCpltCallback != NULL)
24005d9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24005d9e:	2b00      	cmp	r3, #0
24005da0:	f47f ae80 	bne.w	24005aa4 <HAL_DMA_IRQHandler+0x2a4>
24005da4:	e680      	b.n	24005aa8 <HAL_DMA_IRQHandler+0x2a8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24005da6:	681a      	ldr	r2, [r3, #0]
24005da8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
24005dac:	f47f aee7 	bne.w	24005b7e <HAL_DMA_IRQHandler+0x37e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24005db0:	6819      	ldr	r1, [r3, #0]
24005db2:	f021 0110 	bic.w	r1, r1, #16
24005db6:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
24005db8:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
24005dba:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
24005dbe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
24005dc2:	e6dc      	b.n	24005b7e <HAL_DMA_IRQHandler+0x37e>
            if(hdma->XferM1CpltCallback != NULL)
24005dc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
24005dc6:	2b00      	cmp	r3, #0
24005dc8:	f47f aedb 	bne.w	24005b82 <HAL_DMA_IRQHandler+0x382>
24005dcc:	e6db      	b.n	24005b86 <HAL_DMA_IRQHandler+0x386>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24005dce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24005dd0:	2b00      	cmp	r3, #0
24005dd2:	d1ac      	bne.n	24005d2e <HAL_DMA_IRQHandler+0x52e>
24005dd4:	e7b0      	b.n	24005d38 <HAL_DMA_IRQHandler+0x538>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
24005dd6:	4a9b      	ldr	r2, [pc, #620]	; (24006044 <HAL_DMA_IRQHandler+0x844>)
24005dd8:	489b      	ldr	r0, [pc, #620]	; (24006048 <HAL_DMA_IRQHandler+0x848>)
24005dda:	4283      	cmp	r3, r0
24005ddc:	bf18      	it	ne
24005dde:	4293      	cmpne	r3, r2
24005de0:	f100 0014 	add.w	r0, r0, #20
24005de4:	bf0c      	ite	eq
24005de6:	2201      	moveq	r2, #1
24005de8:	2200      	movne	r2, #0
24005dea:	4283      	cmp	r3, r0
24005dec:	bf08      	it	eq
24005dee:	f042 0201 	orreq.w	r2, r2, #1
24005df2:	3014      	adds	r0, #20
24005df4:	4283      	cmp	r3, r0
24005df6:	bf08      	it	eq
24005df8:	f042 0201 	orreq.w	r2, r2, #1
24005dfc:	3014      	adds	r0, #20
24005dfe:	4283      	cmp	r3, r0
24005e00:	bf08      	it	eq
24005e02:	f042 0201 	orreq.w	r2, r2, #1
24005e06:	3014      	adds	r0, #20
24005e08:	4283      	cmp	r3, r0
24005e0a:	bf08      	it	eq
24005e0c:	f042 0201 	orreq.w	r2, r2, #1
24005e10:	3014      	adds	r0, #20
24005e12:	4283      	cmp	r3, r0
24005e14:	bf08      	it	eq
24005e16:	f042 0201 	orreq.w	r2, r2, #1
24005e1a:	b912      	cbnz	r2, 24005e22 <HAL_DMA_IRQHandler+0x622>
24005e1c:	4a8b      	ldr	r2, [pc, #556]	; (2400604c <HAL_DMA_IRQHandler+0x84c>)
24005e1e:	4293      	cmp	r3, r2
24005e20:	d19a      	bne.n	24005d58 <HAL_DMA_IRQHandler+0x558>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24005e22:	6de0      	ldr	r0, [r4, #92]	; 0x5c
24005e24:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
24005e26:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
24005e28:	f000 001f 	and.w	r0, r0, #31
24005e2c:	4085      	lsls	r5, r0
24005e2e:	420d      	tst	r5, r1
24005e30:	d018      	beq.n	24005e64 <HAL_DMA_IRQHandler+0x664>
24005e32:	0757      	lsls	r7, r2, #29
24005e34:	d516      	bpl.n	24005e64 <HAL_DMA_IRQHandler+0x664>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005e36:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
24005e38:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005e3a:	d544      	bpl.n	24005ec6 <HAL_DMA_IRQHandler+0x6c6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24005e3c:	03d2      	lsls	r2, r2, #15
24005e3e:	f100 8099 	bmi.w	24005f74 <HAL_DMA_IRQHandler+0x774>
          if(hdma->XferM1HalfCpltCallback != NULL)
24005e42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24005e44:	2b00      	cmp	r3, #0
24005e46:	f47f aec9 	bne.w	24005bdc <HAL_DMA_IRQHandler+0x3dc>
24005e4a:	e785      	b.n	24005d58 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005e4c:	f00e 011f 	and.w	r1, lr, #31
24005e50:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24005e54:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005e56:	fa0c fc01 	lsl.w	ip, ip, r1
24005e5a:	ea15 0f0c 	tst.w	r5, ip
24005e5e:	f47f af3e 	bne.w	24005cde <HAL_DMA_IRQHandler+0x4de>
24005e62:	e624      	b.n	24005aae <HAL_DMA_IRQHandler+0x2ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24005e64:	2502      	movs	r5, #2
24005e66:	4085      	lsls	r5, r0
24005e68:	420d      	tst	r5, r1
24005e6a:	d00d      	beq.n	24005e88 <HAL_DMA_IRQHandler+0x688>
24005e6c:	0797      	lsls	r7, r2, #30
24005e6e:	d50b      	bpl.n	24005e88 <HAL_DMA_IRQHandler+0x688>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24005e70:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24005e72:	0416      	lsls	r6, r2, #16
24005e74:	f140 8083 	bpl.w	24005f7e <HAL_DMA_IRQHandler+0x77e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24005e78:	03d5      	lsls	r5, r2, #15
24005e7a:	f100 80dd 	bmi.w	24006038 <HAL_DMA_IRQHandler+0x838>
          if(hdma->XferM1CpltCallback != NULL)
24005e7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
24005e80:	2b00      	cmp	r3, #0
24005e82:	f47f aeab 	bne.w	24005bdc <HAL_DMA_IRQHandler+0x3dc>
24005e86:	e767      	b.n	24005d58 <HAL_DMA_IRQHandler+0x558>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
24005e88:	2508      	movs	r5, #8
24005e8a:	fa05 f000 	lsl.w	r0, r5, r0
24005e8e:	4208      	tst	r0, r1
24005e90:	f43f af62 	beq.w	24005d58 <HAL_DMA_IRQHandler+0x558>
24005e94:	0711      	lsls	r1, r2, #28
24005e96:	f57f af5f 	bpl.w	24005d58 <HAL_DMA_IRQHandler+0x558>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24005e9a:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24005e9c:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24005e9e:	f021 010e 	bic.w	r1, r1, #14
24005ea2:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
24005ea4:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24005ea6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
24005ea8:	f003 031f 	and.w	r3, r3, #31
24005eac:	fa02 f303 	lsl.w	r3, r2, r3
24005eb0:	6073      	str	r3, [r6, #4]
      if (hdma->XferErrorCallback != NULL)
24005eb2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
24005eb4:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
24005eb6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
24005eba:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
24005ebe:	2b00      	cmp	r3, #0
24005ec0:	f47f ae8c 	bne.w	24005bdc <HAL_DMA_IRQHandler+0x3dc>
24005ec4:	e748      	b.n	24005d58 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24005ec6:	0693      	lsls	r3, r2, #26
24005ec8:	d454      	bmi.n	24005f74 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24005eca:	6822      	ldr	r2, [r4, #0]
24005ecc:	4b60      	ldr	r3, [pc, #384]	; (24006050 <HAL_DMA_IRQHandler+0x850>)
24005ece:	4861      	ldr	r0, [pc, #388]	; (24006054 <HAL_DMA_IRQHandler+0x854>)
24005ed0:	4961      	ldr	r1, [pc, #388]	; (24006058 <HAL_DMA_IRQHandler+0x858>)
24005ed2:	4282      	cmp	r2, r0
24005ed4:	bf18      	it	ne
24005ed6:	429a      	cmpne	r2, r3
24005ed8:	f100 0030 	add.w	r0, r0, #48	; 0x30
24005edc:	bf0c      	ite	eq
24005ede:	2301      	moveq	r3, #1
24005ee0:	2300      	movne	r3, #0
24005ee2:	428a      	cmp	r2, r1
24005ee4:	bf08      	it	eq
24005ee6:	f043 0301 	orreq.w	r3, r3, #1
24005eea:	3130      	adds	r1, #48	; 0x30
24005eec:	4282      	cmp	r2, r0
24005eee:	bf08      	it	eq
24005ef0:	f043 0301 	orreq.w	r3, r3, #1
24005ef4:	3030      	adds	r0, #48	; 0x30
24005ef6:	428a      	cmp	r2, r1
24005ef8:	bf08      	it	eq
24005efa:	f043 0301 	orreq.w	r3, r3, #1
24005efe:	3130      	adds	r1, #48	; 0x30
24005f00:	4282      	cmp	r2, r0
24005f02:	bf08      	it	eq
24005f04:	f043 0301 	orreq.w	r3, r3, #1
24005f08:	3030      	adds	r0, #48	; 0x30
24005f0a:	428a      	cmp	r2, r1
24005f0c:	bf08      	it	eq
24005f0e:	f043 0301 	orreq.w	r3, r3, #1
24005f12:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005f16:	4282      	cmp	r2, r0
24005f18:	bf08      	it	eq
24005f1a:	f043 0301 	orreq.w	r3, r3, #1
24005f1e:	f500 705c 	add.w	r0, r0, #880	; 0x370
24005f22:	428a      	cmp	r2, r1
24005f24:	bf08      	it	eq
24005f26:	f043 0301 	orreq.w	r3, r3, #1
24005f2a:	3130      	adds	r1, #48	; 0x30
24005f2c:	4282      	cmp	r2, r0
24005f2e:	bf08      	it	eq
24005f30:	f043 0301 	orreq.w	r3, r3, #1
24005f34:	3030      	adds	r0, #48	; 0x30
24005f36:	428a      	cmp	r2, r1
24005f38:	bf08      	it	eq
24005f3a:	f043 0301 	orreq.w	r3, r3, #1
24005f3e:	3130      	adds	r1, #48	; 0x30
24005f40:	4282      	cmp	r2, r0
24005f42:	bf08      	it	eq
24005f44:	f043 0301 	orreq.w	r3, r3, #1
24005f48:	3030      	adds	r0, #48	; 0x30
24005f4a:	428a      	cmp	r2, r1
24005f4c:	bf08      	it	eq
24005f4e:	f043 0301 	orreq.w	r3, r3, #1
24005f52:	3130      	adds	r1, #48	; 0x30
24005f54:	4282      	cmp	r2, r0
24005f56:	bf08      	it	eq
24005f58:	f043 0301 	orreq.w	r3, r3, #1
24005f5c:	428a      	cmp	r2, r1
24005f5e:	bf08      	it	eq
24005f60:	f043 0301 	orreq.w	r3, r3, #1
24005f64:	b913      	cbnz	r3, 24005f6c <HAL_DMA_IRQHandler+0x76c>
24005f66:	4b3d      	ldr	r3, [pc, #244]	; (2400605c <HAL_DMA_IRQHandler+0x85c>)
24005f68:	429a      	cmp	r2, r3
24005f6a:	d179      	bne.n	24006060 <HAL_DMA_IRQHandler+0x860>
24005f6c:	6813      	ldr	r3, [r2, #0]
24005f6e:	f023 0308 	bic.w	r3, r3, #8
24005f72:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
24005f74:	6c23      	ldr	r3, [r4, #64]	; 0x40
24005f76:	2b00      	cmp	r3, #0
24005f78:	f47f ae30 	bne.w	24005bdc <HAL_DMA_IRQHandler+0x3dc>
24005f7c:	e6ec      	b.n	24005d58 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24005f7e:	0690      	lsls	r0, r2, #26
24005f80:	d45a      	bmi.n	24006038 <HAL_DMA_IRQHandler+0x838>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24005f82:	6822      	ldr	r2, [r4, #0]
24005f84:	4b32      	ldr	r3, [pc, #200]	; (24006050 <HAL_DMA_IRQHandler+0x850>)
24005f86:	4833      	ldr	r0, [pc, #204]	; (24006054 <HAL_DMA_IRQHandler+0x854>)
24005f88:	4933      	ldr	r1, [pc, #204]	; (24006058 <HAL_DMA_IRQHandler+0x858>)
24005f8a:	4282      	cmp	r2, r0
24005f8c:	bf18      	it	ne
24005f8e:	429a      	cmpne	r2, r3
24005f90:	f100 0030 	add.w	r0, r0, #48	; 0x30
24005f94:	bf0c      	ite	eq
24005f96:	2301      	moveq	r3, #1
24005f98:	2300      	movne	r3, #0
24005f9a:	428a      	cmp	r2, r1
24005f9c:	bf08      	it	eq
24005f9e:	f043 0301 	orreq.w	r3, r3, #1
24005fa2:	3130      	adds	r1, #48	; 0x30
24005fa4:	4282      	cmp	r2, r0
24005fa6:	bf08      	it	eq
24005fa8:	f043 0301 	orreq.w	r3, r3, #1
24005fac:	3030      	adds	r0, #48	; 0x30
24005fae:	428a      	cmp	r2, r1
24005fb0:	bf08      	it	eq
24005fb2:	f043 0301 	orreq.w	r3, r3, #1
24005fb6:	3130      	adds	r1, #48	; 0x30
24005fb8:	4282      	cmp	r2, r0
24005fba:	bf08      	it	eq
24005fbc:	f043 0301 	orreq.w	r3, r3, #1
24005fc0:	3030      	adds	r0, #48	; 0x30
24005fc2:	428a      	cmp	r2, r1
24005fc4:	bf08      	it	eq
24005fc6:	f043 0301 	orreq.w	r3, r3, #1
24005fca:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005fce:	4282      	cmp	r2, r0
24005fd0:	bf08      	it	eq
24005fd2:	f043 0301 	orreq.w	r3, r3, #1
24005fd6:	f500 705c 	add.w	r0, r0, #880	; 0x370
24005fda:	428a      	cmp	r2, r1
24005fdc:	bf08      	it	eq
24005fde:	f043 0301 	orreq.w	r3, r3, #1
24005fe2:	3130      	adds	r1, #48	; 0x30
24005fe4:	4282      	cmp	r2, r0
24005fe6:	bf08      	it	eq
24005fe8:	f043 0301 	orreq.w	r3, r3, #1
24005fec:	3030      	adds	r0, #48	; 0x30
24005fee:	428a      	cmp	r2, r1
24005ff0:	bf08      	it	eq
24005ff2:	f043 0301 	orreq.w	r3, r3, #1
24005ff6:	3130      	adds	r1, #48	; 0x30
24005ff8:	4282      	cmp	r2, r0
24005ffa:	bf08      	it	eq
24005ffc:	f043 0301 	orreq.w	r3, r3, #1
24006000:	3030      	adds	r0, #48	; 0x30
24006002:	428a      	cmp	r2, r1
24006004:	bf08      	it	eq
24006006:	f043 0301 	orreq.w	r3, r3, #1
2400600a:	3130      	adds	r1, #48	; 0x30
2400600c:	4282      	cmp	r2, r0
2400600e:	bf08      	it	eq
24006010:	f043 0301 	orreq.w	r3, r3, #1
24006014:	428a      	cmp	r2, r1
24006016:	bf08      	it	eq
24006018:	f043 0301 	orreq.w	r3, r3, #1
2400601c:	b913      	cbnz	r3, 24006024 <HAL_DMA_IRQHandler+0x824>
2400601e:	4b0f      	ldr	r3, [pc, #60]	; (2400605c <HAL_DMA_IRQHandler+0x85c>)
24006020:	429a      	cmp	r2, r3
24006022:	d122      	bne.n	2400606a <HAL_DMA_IRQHandler+0x86a>
24006024:	6813      	ldr	r3, [r2, #0]
24006026:	f023 0314 	bic.w	r3, r3, #20
2400602a:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
2400602c:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
2400602e:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
24006030:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24006034:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
24006038:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400603a:	2b00      	cmp	r3, #0
2400603c:	f47f adce 	bne.w	24005bdc <HAL_DMA_IRQHandler+0x3dc>
24006040:	e68a      	b.n	24005d58 <HAL_DMA_IRQHandler+0x558>
24006042:	bf00      	nop
24006044:	58025408 	.word	0x58025408
24006048:	5802541c 	.word	0x5802541c
2400604c:	58025494 	.word	0x58025494
24006050:	40020010 	.word	0x40020010
24006054:	40020028 	.word	0x40020028
24006058:	40020040 	.word	0x40020040
2400605c:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24006060:	6813      	ldr	r3, [r2, #0]
24006062:	f023 0304 	bic.w	r3, r3, #4
24006066:	6013      	str	r3, [r2, #0]
24006068:	e784      	b.n	24005f74 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
2400606a:	6813      	ldr	r3, [r2, #0]
2400606c:	f023 030a 	bic.w	r3, r3, #10
24006070:	6013      	str	r3, [r2, #0]
24006072:	e7db      	b.n	2400602c <HAL_DMA_IRQHandler+0x82c>

24006074 <HAL_DMA_GetState>:
  return hdma->State;
24006074:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
24006078:	4770      	bx	lr
2400607a:	bf00      	nop

2400607c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
2400607c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
2400607e:	4770      	bx	lr

24006080 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
24006080:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
24006082:	7a0a      	ldrb	r2, [r1, #8]
{
24006084:	4603      	mov	r3, r0
  if(pSyncConfig->SyncEnable == ENABLE)
24006086:	2a01      	cmp	r2, #1
24006088:	d02e      	beq.n	240060e8 <HAL_DMAEx_ConfigMuxSync+0x68>
  uint32_t syncPolarity = 0;
2400608a:	2400      	movs	r4, #0
  uint32_t syncSignalID = 0;
2400608c:	4625      	mov	r5, r4
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
2400608e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
24006092:	2a01      	cmp	r2, #1
24006094:	b2d0      	uxtb	r0, r2
24006096:	d122      	bne.n	240060de <HAL_DMAEx_ConfigMuxSync+0x5e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
24006098:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
2400609c:	2a01      	cmp	r2, #1
2400609e:	d026      	beq.n	240060ee <HAL_DMAEx_ConfigMuxSync+0x6e>
240060a0:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
240060a4:	f04f 0c00 	mov.w	ip, #0
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
240060a8:	6e18      	ldr	r0, [r3, #96]	; 0x60
240060aa:	6802      	ldr	r2, [r0, #0]
240060ac:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
240060b0:	6002      	str	r2, [r0, #0]
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
240060b2:	68ca      	ldr	r2, [r1, #12]
240060b4:	6e1e      	ldr	r6, [r3, #96]	; 0x60
240060b6:	1e50      	subs	r0, r2, #1
240060b8:	7a0a      	ldrb	r2, [r1, #8]
240060ba:	f891 e009 	ldrb.w	lr, [r1, #9]
240060be:	0412      	lsls	r2, r2, #16
240060c0:	6831      	ldr	r1, [r6, #0]
240060c2:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19

    return HAL_OK;
240060c6:	4660      	mov	r0, ip
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
240060c8:	b2c9      	uxtb	r1, r1
240060ca:	430a      	orrs	r2, r1
240060cc:	ea42 224e 	orr.w	r2, r2, lr, lsl #9
240060d0:	4322      	orrs	r2, r4
240060d2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
240060d6:	6032      	str	r2, [r6, #0]
    __HAL_UNLOCK(hdma);
240060d8:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;

    /* Return error status */
    return HAL_ERROR;
  }
}
240060dc:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240060de:	f44f 6200 	mov.w	r2, #2048	; 0x800
    return HAL_ERROR;
240060e2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240060e4:	655a      	str	r2, [r3, #84]	; 0x54
}
240060e6:	bd70      	pop	{r4, r5, r6, pc}
    syncPolarity = pSyncConfig->SyncPolarity;
240060e8:	e9d1 5400 	ldrd	r5, r4, [r1]
240060ec:	e7cf      	b.n	2400608e <HAL_DMAEx_ConfigMuxSync+0xe>
    __HAL_LOCK(hdma);
240060ee:	2002      	movs	r0, #2
}
240060f0:	bd70      	pop	{r4, r5, r6, pc}
240060f2:	bf00      	nop

240060f4 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
240060f4:	b510      	push	{r4, lr}
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
240060f6:	e9d0 2319 	ldrd	r2, r3, [r0, #100]	; 0x64
{
240060fa:	4604      	mov	r4, r0
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
240060fc:	6812      	ldr	r2, [r2, #0]
240060fe:	421a      	tst	r2, r3
24006100:	d00e      	beq.n	24006120 <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24006102:	6e02      	ldr	r2, [r0, #96]	; 0x60
24006104:	6813      	ldr	r3, [r2, #0]
24006106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400610a:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
2400610c:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
24006110:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24006112:	6d43      	ldr	r3, [r0, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
24006114:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
24006116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400611a:	6543      	str	r3, [r0, #84]	; 0x54
    if(hdma->XferErrorCallback != NULL)
2400611c:	b102      	cbz	r2, 24006120 <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
2400611e:	4790      	blx	r2
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
24006120:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
24006122:	b1ab      	cbz	r3, 24006150 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
24006124:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
24006128:	6809      	ldr	r1, [r1, #0]
2400612a:	4211      	tst	r1, r2
2400612c:	d010      	beq.n	24006150 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
2400612e:	681a      	ldr	r2, [r3, #0]
24006130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24006134:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24006136:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
2400613a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
2400613c:	6d63      	ldr	r3, [r4, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
2400613e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24006140:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
24006144:	6563      	str	r3, [r4, #84]	; 0x54
      if(hdma->XferErrorCallback != NULL)
24006146:	b11a      	cbz	r2, 24006150 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
24006148:	4620      	mov	r0, r4
      }
    }
  }
}
2400614a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hdma->XferErrorCallback(hdma);
2400614e:	4710      	bx	r2
}
24006150:	bd10      	pop	{r4, pc}
24006152:	bf00      	nop

24006154 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24006154:	680b      	ldr	r3, [r1, #0]
24006156:	2b00      	cmp	r3, #0
24006158:	f000 8119 	beq.w	2400638e <HAL_GPIO_Init+0x23a>
2400615c:	f04f 0c00 	mov.w	ip, #0
{
24006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
24006164:	4662      	mov	r2, ip
{
24006166:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006168:	4d94      	ldr	r5, [pc, #592]	; (240063bc <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
2400616a:	4f95      	ldr	r7, [pc, #596]	; (240063c0 <HAL_GPIO_Init+0x26c>)
2400616c:	f8df 8268 	ldr.w	r8, [pc, #616]	; 240063d8 <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24006170:	f04f 0901 	mov.w	r9, #1
24006174:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
24006178:	ea19 0e03 	ands.w	lr, r9, r3
2400617c:	f000 80c1 	beq.w	24006302 <HAL_GPIO_Init+0x1ae>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24006180:	684b      	ldr	r3, [r1, #4]
24006182:	f003 0303 	and.w	r3, r3, #3
24006186:	1e5c      	subs	r4, r3, #1
24006188:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400618a:	f04f 0403 	mov.w	r4, #3
2400618e:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24006192:	f240 80c0 	bls.w	24006316 <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24006196:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24006198:	2b03      	cmp	r3, #3
2400619a:	d026      	beq.n	240061ea <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
2400619c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
2400619e:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
240061a2:	688b      	ldr	r3, [r1, #8]
240061a4:	fa03 f30c 	lsl.w	r3, r3, ip
240061a8:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
240061ac:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
240061ae:	684b      	ldr	r3, [r1, #4]
240061b0:	f003 0303 	and.w	r3, r3, #3
240061b4:	2b02      	cmp	r3, #2
240061b6:	d118      	bne.n	240061ea <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3U];
240061b8:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
240061bc:	f002 0b07 	and.w	fp, r2, #7
240061c0:	230f      	movs	r3, #15
240061c2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
240061c6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
240061ca:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
240061ce:	fa03 f30b 	lsl.w	r3, r3, fp
240061d2:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
240061d6:	690b      	ldr	r3, [r1, #16]
240061d8:	fa03 f30b 	lsl.w	r3, r3, fp
240061dc:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
240061e0:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
240061e4:	684b      	ldr	r3, [r1, #4]
240061e6:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
240061ea:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
240061ee:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
240061f2:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
240061f6:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
240061f8:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
240061fa:	684b      	ldr	r3, [r1, #4]
240061fc:	f413 3f40 	tst.w	r3, #196608	; 0x30000
24006200:	d07e      	beq.n	24006300 <HAL_GPIO_Init+0x1ac>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006202:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
24006206:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
2400620a:	f002 0903 	and.w	r9, r2, #3
2400620e:	f04f 0a0f 	mov.w	sl, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006212:	f043 0302 	orr.w	r3, r3, #2
24006216:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
2400621a:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
2400621e:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006220:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
24006224:	f504 6480 	add.w	r4, r4, #1024	; 0x400
24006228:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
2400622c:	fa0a fa09 	lsl.w	sl, sl, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24006230:	f003 0302 	and.w	r3, r3, #2
24006234:	9301      	str	r3, [sp, #4]
24006236:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
24006238:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
2400623a:	ea23 030a 	bic.w	r3, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
2400623e:	d02b      	beq.n	24006298 <HAL_GPIO_Init+0x144>
24006240:	4540      	cmp	r0, r8
24006242:	f000 8088 	beq.w	24006356 <HAL_GPIO_Init+0x202>
24006246:	4e5f      	ldr	r6, [pc, #380]	; (240063c4 <HAL_GPIO_Init+0x270>)
24006248:	42b0      	cmp	r0, r6
2400624a:	f000 808b 	beq.w	24006364 <HAL_GPIO_Init+0x210>
2400624e:	4e5e      	ldr	r6, [pc, #376]	; (240063c8 <HAL_GPIO_Init+0x274>)
24006250:	42b0      	cmp	r0, r6
24006252:	d079      	beq.n	24006348 <HAL_GPIO_Init+0x1f4>
24006254:	4e5d      	ldr	r6, [pc, #372]	; (240063cc <HAL_GPIO_Init+0x278>)
24006256:	42b0      	cmp	r0, r6
24006258:	f000 8092 	beq.w	24006380 <HAL_GPIO_Init+0x22c>
2400625c:	4e5c      	ldr	r6, [pc, #368]	; (240063d0 <HAL_GPIO_Init+0x27c>)
2400625e:	42b0      	cmp	r0, r6
24006260:	f000 8096 	beq.w	24006390 <HAL_GPIO_Init+0x23c>
24006264:	4e5b      	ldr	r6, [pc, #364]	; (240063d4 <HAL_GPIO_Init+0x280>)
24006266:	42b0      	cmp	r0, r6
24006268:	f000 8083 	beq.w	24006372 <HAL_GPIO_Init+0x21e>
2400626c:	f8df a16c 	ldr.w	sl, [pc, #364]	; 240063dc <HAL_GPIO_Init+0x288>
24006270:	4550      	cmp	r0, sl
24006272:	f000 8094 	beq.w	2400639e <HAL_GPIO_Init+0x24a>
24006276:	f8df a168 	ldr.w	sl, [pc, #360]	; 240063e0 <HAL_GPIO_Init+0x28c>
2400627a:	4550      	cmp	r0, sl
2400627c:	f000 8096 	beq.w	240063ac <HAL_GPIO_Init+0x258>
24006280:	f8df a160 	ldr.w	sl, [pc, #352]	; 240063e4 <HAL_GPIO_Init+0x290>
24006284:	4550      	cmp	r0, sl
24006286:	bf0c      	ite	eq
24006288:	f04f 0a09 	moveq.w	sl, #9
2400628c:	f04f 0a0a 	movne.w	sl, #10
24006290:	fa0a f909 	lsl.w	r9, sl, r9
24006294:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
24006298:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
2400629a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
2400629e:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
240062a0:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
240062a4:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
240062a6:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
240062aa:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
240062ac:	bf54      	ite	pl
240062ae:	4023      	andpl	r3, r4
          temp |= iocurrent;
240062b0:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
240062b4:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
240062b8:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
240062ba:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
240062be:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
240062c2:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
240062c4:	bf54      	ite	pl
240062c6:	4023      	andpl	r3, r4
          temp |= iocurrent;
240062c8:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
240062cc:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
240062d0:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
240062d2:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
240062d6:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
240062da:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
240062dc:	bf54      	ite	pl
240062de:	4023      	andpl	r3, r4
          temp |= iocurrent;
240062e0:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
240062e4:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
240062e8:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
240062ea:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
240062ee:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
240062f0:	bf54      	ite	pl
240062f2:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
240062f4:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
240062f8:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
240062fc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24006300:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
24006302:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24006304:	f10c 0c02 	add.w	ip, ip, #2
24006308:	fa33 f402 	lsrs.w	r4, r3, r2
2400630c:	f47f af30 	bne.w	24006170 <HAL_GPIO_Init+0x1c>
  }
}
24006310:	b003      	add	sp, #12
24006312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
24006316:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24006318:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
2400631c:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400631e:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
24006320:	fa03 f30c 	lsl.w	r3, r3, ip
24006324:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
24006328:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
2400632a:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
2400632c:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24006330:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
24006334:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
24006338:	4093      	lsls	r3, r2
2400633a:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
2400633e:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24006340:	684b      	ldr	r3, [r1, #4]
24006342:	f003 0303 	and.w	r3, r3, #3
24006346:	e727      	b.n	24006198 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24006348:	f04f 0a03 	mov.w	sl, #3
2400634c:	fa0a f909 	lsl.w	r9, sl, r9
24006350:	ea43 0309 	orr.w	r3, r3, r9
24006354:	e7a0      	b.n	24006298 <HAL_GPIO_Init+0x144>
24006356:	f04f 0a01 	mov.w	sl, #1
2400635a:	fa0a f909 	lsl.w	r9, sl, r9
2400635e:	ea43 0309 	orr.w	r3, r3, r9
24006362:	e799      	b.n	24006298 <HAL_GPIO_Init+0x144>
24006364:	f04f 0a02 	mov.w	sl, #2
24006368:	fa0a f909 	lsl.w	r9, sl, r9
2400636c:	ea43 0309 	orr.w	r3, r3, r9
24006370:	e792      	b.n	24006298 <HAL_GPIO_Init+0x144>
24006372:	f04f 0a06 	mov.w	sl, #6
24006376:	fa0a f909 	lsl.w	r9, sl, r9
2400637a:	ea43 0309 	orr.w	r3, r3, r9
2400637e:	e78b      	b.n	24006298 <HAL_GPIO_Init+0x144>
24006380:	f04f 0a04 	mov.w	sl, #4
24006384:	fa0a f909 	lsl.w	r9, sl, r9
24006388:	ea43 0309 	orr.w	r3, r3, r9
2400638c:	e784      	b.n	24006298 <HAL_GPIO_Init+0x144>
2400638e:	4770      	bx	lr
24006390:	f04f 0a05 	mov.w	sl, #5
24006394:	fa0a f909 	lsl.w	r9, sl, r9
24006398:	ea43 0309 	orr.w	r3, r3, r9
2400639c:	e77c      	b.n	24006298 <HAL_GPIO_Init+0x144>
2400639e:	f04f 0a07 	mov.w	sl, #7
240063a2:	fa0a f909 	lsl.w	r9, sl, r9
240063a6:	ea43 0309 	orr.w	r3, r3, r9
240063aa:	e775      	b.n	24006298 <HAL_GPIO_Init+0x144>
240063ac:	f04f 0a08 	mov.w	sl, #8
240063b0:	fa0a f909 	lsl.w	r9, sl, r9
240063b4:	ea43 0309 	orr.w	r3, r3, r9
240063b8:	e76e      	b.n	24006298 <HAL_GPIO_Init+0x144>
240063ba:	bf00      	nop
240063bc:	58024400 	.word	0x58024400
240063c0:	58020000 	.word	0x58020000
240063c4:	58020800 	.word	0x58020800
240063c8:	58020c00 	.word	0x58020c00
240063cc:	58021000 	.word	0x58021000
240063d0:	58021400 	.word	0x58021400
240063d4:	58021800 	.word	0x58021800
240063d8:	58020400 	.word	0x58020400
240063dc:	58021c00 	.word	0x58021c00
240063e0:	58022000 	.word	0x58022000
240063e4:	58022400 	.word	0x58022400

240063e8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
240063e8:	6903      	ldr	r3, [r0, #16]
240063ea:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
240063ec:	bf14      	ite	ne
240063ee:	2001      	movne	r0, #1
240063f0:	2000      	moveq	r0, #0
240063f2:	4770      	bx	lr

240063f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
240063f4:	b902      	cbnz	r2, 240063f8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
240063f6:	0409      	lsls	r1, r1, #16
240063f8:	6181      	str	r1, [r0, #24]
  }
}
240063fa:	4770      	bx	lr

240063fc <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
240063fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24006400:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
24006404:	4201      	tst	r1, r0
24006406:	d100      	bne.n	2400640a <HAL_GPIO_EXTI_IRQHandler+0xe>
24006408:	4770      	bx	lr
{
2400640a:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
2400640c:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
24006410:	f7fd fcc4 	bl	24003d9c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
24006414:	bd08      	pop	{r3, pc}
24006416:	bf00      	nop

24006418 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
24006418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400641c:	6803      	ldr	r3, [r0, #0]
{
2400641e:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006420:	699a      	ldr	r2, [r3, #24]
24006422:	0694      	lsls	r4, r2, #26
24006424:	d46d      	bmi.n	24006502 <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
24006426:	4605      	mov	r5, r0
24006428:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400642a:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
2400642e:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
24006430:	f014 0410 	ands.w	r4, r4, #16
24006434:	d068      	beq.n	24006508 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
24006436:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006438:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
2400643c:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400643e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
24006440:	46b2      	mov	sl, r6
24006442:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006444:	699a      	ldr	r2, [r3, #24]
24006446:	d161      	bne.n	2400650c <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
24006448:	0690      	lsls	r0, r2, #26
2400644a:	f100 8085 	bmi.w	24006558 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
2400644e:	f1ba 0f00 	cmp.w	sl, #0
24006452:	d105      	bne.n	24006460 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
24006454:	699c      	ldr	r4, [r3, #24]
24006456:	06a1      	lsls	r1, r4, #26
24006458:	d5fc      	bpl.n	24006454 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400645a:	2220      	movs	r2, #32
2400645c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
2400645e:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
24006460:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
24006464:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
24006466:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24006468:	05d0      	lsls	r0, r2, #23
2400646a:	d535      	bpl.n	240064d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400646c:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006470:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
24006472:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006476:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006478:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2400647a:	d505      	bpl.n	24006488 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400647c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
24006480:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006484:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006486:	682b      	ldr	r3, [r5, #0]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006488:	0597      	lsls	r7, r2, #22
2400648a:	d505      	bpl.n	24006498 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400648c:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
24006490:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006494:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006496:	682b      	ldr	r3, [r5, #0]
24006498:	699a      	ldr	r2, [r3, #24]
2400649a:	0790      	lsls	r0, r2, #30
2400649c:	d502      	bpl.n	240064a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
2400649e:	2200      	movs	r2, #0
240064a0:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
240064a2:	682b      	ldr	r3, [r5, #0]
240064a4:	699a      	ldr	r2, [r3, #24]
240064a6:	07d1      	lsls	r1, r2, #31
240064a8:	d404      	bmi.n	240064b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
240064aa:	699a      	ldr	r2, [r3, #24]
240064ac:	f042 0201 	orr.w	r2, r2, #1
240064b0:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
240064b2:	682b      	ldr	r3, [r5, #0]
240064b4:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
240064b6:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
240064b8:	4835      	ldr	r0, [pc, #212]	; (24006590 <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
240064ba:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
240064bc:	4002      	ands	r2, r0
      return HAL_ERROR;
240064be:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
240064c0:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
240064c2:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
240064c4:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
240064c8:	4323      	orrs	r3, r4
240064ca:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
240064cc:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
240064d0:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
240064d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
240064d8:	0550      	lsls	r0, r2, #21
240064da:	d4cf      	bmi.n	2400647c <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
240064dc:	0596      	lsls	r6, r2, #22
240064de:	d4d5      	bmi.n	2400648c <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
240064e0:	2900      	cmp	r1, #0
240064e2:	d1d9      	bne.n	24006498 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240064e4:	f7fe f974 	bl	240047d0 <HAL_GetTick>
240064e8:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
240064ec:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240064ee:	42b8      	cmp	r0, r7
240064f0:	d800      	bhi.n	240064f4 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
240064f2:	b91f      	cbnz	r7, 240064fc <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
240064f4:	699a      	ldr	r2, [r3, #24]
240064f6:	f012 0220 	ands.w	r2, r2, #32
240064fa:	d032      	beq.n	24006562 <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240064fc:	699a      	ldr	r2, [r3, #24]
240064fe:	0692      	lsls	r2, r2, #26
24006500:	d595      	bpl.n	2400642e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
24006502:	2000      	movs	r0, #0
}
24006504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
24006508:	4621      	mov	r1, r4
2400650a:	e7ac      	b.n	24006466 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400650c:	0692      	lsls	r2, r2, #26
2400650e:	d423      	bmi.n	24006558 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
24006510:	f1ba 0f00 	cmp.w	sl, #0
24006514:	d1a4      	bne.n	24006460 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24006516:	f7fe f95b 	bl	240047d0 <HAL_GetTick>
2400651a:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
2400651c:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400651e:	4287      	cmp	r7, r0
24006520:	d301      	bcc.n	24006526 <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
24006522:	2f00      	cmp	r7, #0
24006524:	d18d      	bne.n	24006442 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24006526:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
24006528:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
2400652c:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
2400652e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24006530:	0409      	lsls	r1, r1, #16
24006532:	d503      	bpl.n	2400653c <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
24006534:	0441      	lsls	r1, r0, #17
24006536:	d401      	bmi.n	2400653c <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
24006538:	2a20      	cmp	r2, #32
2400653a:	d11f      	bne.n	2400657c <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400653c:	699a      	ldr	r2, [r3, #24]
2400653e:	0690      	lsls	r0, r2, #26
24006540:	f53f af7f 	bmi.w	24006442 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24006544:	f7fe f944 	bl	240047d0 <HAL_GetTick>
24006548:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400654a:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
2400654c:	2819      	cmp	r0, #25
2400654e:	d9f5      	bls.n	2400653c <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24006550:	2620      	movs	r6, #32
              status = HAL_ERROR;
24006552:	f04f 0a01 	mov.w	sl, #1
24006556:	e774      	b.n	24006442 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
24006558:	f1ba 0f00 	cmp.w	sl, #0
2400655c:	f43f af7d 	beq.w	2400645a <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
24006560:	e77e      	b.n	24006460 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006562:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006564:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
24006566:	2001      	movs	r0, #1
24006568:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400656c:	430b      	orrs	r3, r1
2400656e:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006570:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24006574:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
24006578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
2400657c:	685a      	ldr	r2, [r3, #4]
2400657e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24006582:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
24006584:	f7fe f924 	bl	240047d0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006588:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
2400658a:	4604      	mov	r4, r0
2400658c:	e7d6      	b.n	2400653c <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
2400658e:	bf00      	nop
24006590:	fe00e800 	.word	0xfe00e800

24006594 <HAL_I2C_Init>:
  if (hi2c == NULL)
24006594:	2800      	cmp	r0, #0
24006596:	d056      	beq.n	24006646 <HAL_I2C_Init+0xb2>
{
24006598:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
2400659a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
2400659e:	4604      	mov	r4, r0
240065a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
240065a4:	2b00      	cmp	r3, #0
240065a6:	d049      	beq.n	2400663c <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
240065a8:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
240065aa:	2324      	movs	r3, #36	; 0x24
240065ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
240065b0:	6813      	ldr	r3, [r2, #0]
240065b2:	f023 0301 	bic.w	r3, r3, #1
240065b6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
240065b8:	e9d4 2300 	ldrd	r2, r3, [r4]
240065bc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
240065c0:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
240065c2:	6822      	ldr	r2, [r4, #0]
240065c4:	6893      	ldr	r3, [r2, #8]
240065c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
240065ca:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
240065cc:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
240065ce:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
240065d0:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
240065d2:	68a3      	ldr	r3, [r4, #8]
240065d4:	bf0c      	ite	eq
240065d6:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
240065da:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
240065de:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
240065e0:	68e3      	ldr	r3, [r4, #12]
240065e2:	2b02      	cmp	r3, #2
240065e4:	d103      	bne.n	240065ee <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
240065e6:	6823      	ldr	r3, [r4, #0]
240065e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
240065ec:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
240065ee:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
240065f0:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
240065f4:	4b15      	ldr	r3, [pc, #84]	; (2400664c <HAL_I2C_Init+0xb8>)
240065f6:	6851      	ldr	r1, [r2, #4]
240065f8:	430b      	orrs	r3, r1
240065fa:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
240065fc:	6822      	ldr	r2, [r4, #0]
240065fe:	68d3      	ldr	r3, [r2, #12]
24006600:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24006604:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
24006606:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24006608:	6821      	ldr	r1, [r4, #0]
2400660a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
2400660e:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24006610:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24006612:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
24006616:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24006618:	6821      	ldr	r1, [r4, #0]
2400661a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
2400661e:	4303      	orrs	r3, r0
  return HAL_OK;
24006620:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24006622:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
24006624:	6821      	ldr	r1, [r4, #0]
24006626:	680b      	ldr	r3, [r1, #0]
24006628:	f043 0301 	orr.w	r3, r3, #1
2400662c:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
2400662e:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
24006630:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
24006634:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006636:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
2400663a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
2400663c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
24006640:	f7fb fc8a 	bl	24001f58 <HAL_I2C_MspInit>
24006644:	e7b0      	b.n	240065a8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
24006646:	2001      	movs	r0, #1
}
24006648:	4770      	bx	lr
2400664a:	bf00      	nop
2400664c:	02008000 	.word	0x02008000

24006650 <HAL_I2C_Master_Transmit>:
{
24006650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
24006654:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
24006656:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
2400665a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
2400665c:	2b20      	cmp	r3, #32
2400665e:	d12c      	bne.n	240066ba <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
24006660:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
24006664:	4683      	mov	fp, r0
24006666:	2b01      	cmp	r3, #1
24006668:	d027      	beq.n	240066ba <HAL_I2C_Master_Transmit+0x6a>
2400666a:	2301      	movs	r3, #1
2400666c:	468a      	mov	sl, r1
2400666e:	4616      	mov	r6, r2
24006670:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
24006674:	f7fe f8ac 	bl	240047d0 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24006678:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
2400667c:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
2400667e:	699a      	ldr	r2, [r3, #24]
24006680:	0417      	lsls	r7, r2, #16
24006682:	d51d      	bpl.n	240066c0 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006684:	f7fe f8a4 	bl	240047d0 <HAL_GetTick>
24006688:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
2400668c:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006690:	2819      	cmp	r0, #25
24006692:	d9f4      	bls.n	2400667e <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24006694:	699a      	ldr	r2, [r3, #24]
24006696:	0410      	lsls	r0, r2, #16
24006698:	d5f1      	bpl.n	2400667e <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
2400669a:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400669e:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
240066a0:	2200      	movs	r2, #0
      return HAL_ERROR;
240066a2:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240066a4:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
240066a6:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
240066aa:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
240066ae:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
240066b2:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
240066b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
240066ba:	2002      	movs	r0, #2
}
240066bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
240066c0:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240066c2:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
240066c4:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
240066c8:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
240066cc:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
240066ce:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
240066d2:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
240066d6:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
240066da:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
240066de:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
240066e2:	b292      	uxth	r2, r2
240066e4:	2aff      	cmp	r2, #255	; 0xff
240066e6:	d87e      	bhi.n	240067e6 <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
240066e8:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
240066ec:	49ad      	ldr	r1, [pc, #692]	; (240069a4 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
240066ee:	b292      	uxth	r2, r2
240066f0:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
240066f4:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
240066f6:	6858      	ldr	r0, [r3, #4]
240066f8:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
240066fa:	f3ca 0109 	ubfx	r1, sl, #0, #10
240066fe:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
24006702:	4301      	orrs	r1, r0
24006704:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
24006708:	49a7      	ldr	r1, [pc, #668]	; (240069a8 <HAL_I2C_Master_Transmit+0x358>)
2400670a:	4311      	orrs	r1, r2
2400670c:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
2400670e:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
24006712:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
24006716:	b29b      	uxth	r3, r3
24006718:	2b00      	cmp	r3, #0
2400671a:	f000 8107 	beq.w	2400692c <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
2400671e:	f8db 3000 	ldr.w	r3, [fp]
24006722:	699c      	ldr	r4, [r3, #24]
24006724:	f014 0402 	ands.w	r4, r4, #2
24006728:	f040 80c5 	bne.w	240068b6 <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
2400672c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
2400672e:	f012 0210 	ands.w	r2, r2, #16
24006732:	f000 808d 	beq.w	24006850 <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006736:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
24006738:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
2400673a:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400673c:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
2400673e:	f8db 3000 	ldr.w	r3, [fp]
24006742:	1c69      	adds	r1, r5, #1
24006744:	699a      	ldr	r2, [r3, #24]
24006746:	f040 8085 	bne.w	24006854 <HAL_I2C_Master_Transmit+0x204>
2400674a:	0690      	lsls	r0, r2, #26
2400674c:	f100 8106 	bmi.w	2400695c <HAL_I2C_Master_Transmit+0x30c>
24006750:	b937      	cbnz	r7, 24006760 <HAL_I2C_Master_Transmit+0x110>
24006752:	699a      	ldr	r2, [r3, #24]
24006754:	0691      	lsls	r1, r2, #26
24006756:	d5fc      	bpl.n	24006752 <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006758:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
2400675c:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
24006760:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
24006764:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
24006766:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24006768:	05ce      	lsls	r6, r1, #23
2400676a:	d54b      	bpl.n	24006804 <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400676c:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006770:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
24006772:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006776:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006778:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2400677c:	d506      	bpl.n	2400678c <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400677e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
24006782:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006786:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006788:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
2400678c:	0589      	lsls	r1, r1, #22
2400678e:	d506      	bpl.n	2400679e <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006790:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
24006794:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006798:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400679a:	f8db 3000 	ldr.w	r3, [fp]
2400679e:	6999      	ldr	r1, [r3, #24]
240067a0:	078e      	lsls	r6, r1, #30
240067a2:	d503      	bpl.n	240067ac <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
240067a4:	2100      	movs	r1, #0
240067a6:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
240067a8:	f8db 3000 	ldr.w	r3, [fp]
240067ac:	6999      	ldr	r1, [r3, #24]
240067ae:	07cd      	lsls	r5, r1, #31
240067b0:	d405      	bmi.n	240067be <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
240067b2:	6999      	ldr	r1, [r3, #24]
240067b4:	f041 0101 	orr.w	r1, r1, #1
240067b8:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
240067ba:	f8db 3000 	ldr.w	r3, [fp]
240067be:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
240067c0:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
240067c2:	487a      	ldr	r0, [pc, #488]	; (240069ac <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
240067c4:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
240067c6:	4001      	ands	r1, r0
        return HAL_ERROR;
240067c8:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
240067ca:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
240067cc:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
240067d0:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
240067d4:	4313      	orrs	r3, r2
240067d6:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
240067da:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
240067de:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
240067e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
240067e6:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
240067e8:	496e      	ldr	r1, [pc, #440]	; (240069a4 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
240067ea:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
240067ee:	685a      	ldr	r2, [r3, #4]
240067f0:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
240067f2:	f3ca 0109 	ubfx	r1, sl, #0, #10
240067f6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
240067fa:	4311      	orrs	r1, r2
240067fc:	4a6c      	ldr	r2, [pc, #432]	; (240069b0 <HAL_I2C_Master_Transmit+0x360>)
240067fe:	430a      	orrs	r2, r1
24006800:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
24006802:	e784      	b.n	2400670e <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006804:	054c      	lsls	r4, r1, #21
24006806:	d4ba      	bmi.n	2400677e <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006808:	058f      	lsls	r7, r1, #22
2400680a:	d4c1      	bmi.n	24006790 <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
2400680c:	2800      	cmp	r0, #0
2400680e:	d1c6      	bne.n	2400679e <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
24006810:	1c6c      	adds	r4, r5, #1
24006812:	d086      	beq.n	24006722 <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006814:	f7fd ffdc 	bl	240047d0 <HAL_GetTick>
24006818:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
2400681c:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006820:	4285      	cmp	r5, r0
24006822:	d302      	bcc.n	2400682a <HAL_I2C_Master_Transmit+0x1da>
24006824:	2d00      	cmp	r5, #0
24006826:	f47f af7c 	bne.w	24006722 <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
2400682a:	699a      	ldr	r2, [r3, #24]
2400682c:	f012 0202 	ands.w	r2, r2, #2
24006830:	f47f af77 	bne.w	24006722 <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006834:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006838:	2120      	movs	r1, #32
        return HAL_ERROR;
2400683a:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
2400683c:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006840:	430b      	orrs	r3, r1
24006842:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006846:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
2400684a:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
2400684e:	e735      	b.n	240066bc <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
24006850:	4610      	mov	r0, r2
24006852:	e788      	b.n	24006766 <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006854:	0692      	lsls	r2, r2, #26
24006856:	f100 8081 	bmi.w	2400695c <HAL_I2C_Master_Transmit+0x30c>
2400685a:	2f00      	cmp	r7, #0
2400685c:	d180      	bne.n	24006760 <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400685e:	f7fd ffb7 	bl	240047d0 <HAL_GetTick>
24006862:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24006864:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24006868:	4285      	cmp	r5, r0
2400686a:	d302      	bcc.n	24006872 <HAL_I2C_Master_Transmit+0x222>
2400686c:	2d00      	cmp	r5, #0
2400686e:	f47f af68 	bne.w	24006742 <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24006872:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
24006874:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24006878:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
2400687a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
2400687c:	0409      	lsls	r1, r1, #16
2400687e:	d50c      	bpl.n	2400689a <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
24006880:	0441      	lsls	r1, r0, #17
24006882:	d40a      	bmi.n	2400689a <HAL_I2C_Master_Transmit+0x24a>
24006884:	2a20      	cmp	r2, #32
24006886:	d008      	beq.n	2400689a <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24006888:	685a      	ldr	r2, [r3, #4]
2400688a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2400688e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
24006890:	f7fd ff9e 	bl	240047d0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006894:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
24006898:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
2400689a:	699a      	ldr	r2, [r3, #24]
2400689c:	0690      	lsls	r0, r2, #26
2400689e:	f53f af50 	bmi.w	24006742 <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
240068a2:	f7fd ff95 	bl	240047d0 <HAL_GetTick>
240068a6:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240068a8:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
240068ac:	2819      	cmp	r0, #25
240068ae:	d9f4      	bls.n	2400689a <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
240068b0:	2420      	movs	r4, #32
              status = HAL_ERROR;
240068b2:	2701      	movs	r7, #1
240068b4:	e745      	b.n	24006742 <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
240068b6:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
240068ba:	7812      	ldrb	r2, [r2, #0]
240068bc:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
240068be:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
240068c2:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
240068c6:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
240068c8:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
240068cc:	3b01      	subs	r3, #1
      hi2c->XferCount--;
240068ce:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
240068d0:	3101      	adds	r1, #1
      hi2c->XferSize--;
240068d2:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
240068d4:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240068d8:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
240068dc:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240068e0:	b292      	uxth	r2, r2
      hi2c->XferSize--;
240068e2:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
240068e6:	2b00      	cmp	r3, #0
240068e8:	f47f af13 	bne.w	24006712 <HAL_I2C_Master_Transmit+0xc2>
240068ec:	2a00      	cmp	r2, #0
240068ee:	f43f af10 	beq.w	24006712 <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
240068f2:	f8db 2000 	ldr.w	r2, [fp]
240068f6:	1c68      	adds	r0, r5, #1
240068f8:	d134      	bne.n	24006964 <HAL_I2C_Master_Transmit+0x314>
240068fa:	6993      	ldr	r3, [r2, #24]
240068fc:	0619      	lsls	r1, r3, #24
240068fe:	d5fc      	bpl.n	240068fa <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
24006900:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
24006904:	b29b      	uxth	r3, r3
24006906:	2bff      	cmp	r3, #255	; 0xff
24006908:	d958      	bls.n	240069bc <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400690a:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
2400690c:	4929      	ldr	r1, [pc, #164]	; (240069b4 <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
2400690e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24006912:	6853      	ldr	r3, [r2, #4]
24006914:	400b      	ands	r3, r1
24006916:	4928      	ldr	r1, [pc, #160]	; (240069b8 <HAL_I2C_Master_Transmit+0x368>)
24006918:	ea4a 0303 	orr.w	r3, sl, r3
2400691c:	4319      	orrs	r1, r3
2400691e:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
24006920:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
24006924:	b29b      	uxth	r3, r3
24006926:	2b00      	cmp	r3, #0
24006928:	f47f aef9 	bne.w	2400671e <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
2400692c:	4642      	mov	r2, r8
2400692e:	4629      	mov	r1, r5
24006930:	4658      	mov	r0, fp
24006932:	f7ff fd71 	bl	24006418 <I2C_WaitOnSTOPFlagUntilTimeout>
24006936:	2800      	cmp	r0, #0
24006938:	d151      	bne.n	240069de <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400693a:	f8db 3000 	ldr.w	r3, [fp]
2400693e:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
24006940:	4c1a      	ldr	r4, [pc, #104]	; (240069ac <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006942:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
24006944:	f8db 1000 	ldr.w	r1, [fp]
24006948:	684b      	ldr	r3, [r1, #4]
2400694a:	4023      	ands	r3, r4
2400694c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
2400694e:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24006952:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
24006956:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
2400695a:	e6af      	b.n	240066bc <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
2400695c:	2f00      	cmp	r7, #0
2400695e:	f43f aefb 	beq.w	24006758 <HAL_I2C_Master_Transmit+0x108>
24006962:	e6fd      	b.n	24006760 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24006964:	6993      	ldr	r3, [r2, #24]
24006966:	061b      	lsls	r3, r3, #24
24006968:	d4ca      	bmi.n	24006900 <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
2400696a:	f7fd ff31 	bl	240047d0 <HAL_GetTick>
2400696e:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24006972:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006976:	4285      	cmp	r5, r0
24006978:	d301      	bcc.n	2400697e <HAL_I2C_Master_Transmit+0x32e>
2400697a:	2d00      	cmp	r5, #0
2400697c:	d1bb      	bne.n	240068f6 <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
2400697e:	6993      	ldr	r3, [r2, #24]
24006980:	f013 0380 	ands.w	r3, r3, #128	; 0x80
24006984:	d1b7      	bne.n	240068f6 <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006986:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
2400698a:	2120      	movs	r1, #32
          return HAL_ERROR;
2400698c:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
2400698e:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006992:	430a      	orrs	r2, r1
24006994:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006998:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
2400699c:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
240069a0:	e68c      	b.n	240066bc <HAL_I2C_Master_Transmit+0x6c>
240069a2:	bf00      	nop
240069a4:	fc009800 	.word	0xfc009800
240069a8:	02002000 	.word	0x02002000
240069ac:	fe00e800 	.word	0xfe00e800
240069b0:	01ff2000 	.word	0x01ff2000
240069b4:	fc009c00 	.word	0xfc009c00
240069b8:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
240069bc:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
240069c0:	4808      	ldr	r0, [pc, #32]	; (240069e4 <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
240069c2:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
240069c4:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
240069c6:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
240069ca:	6853      	ldr	r3, [r2, #4]
240069cc:	4003      	ands	r3, r0
240069ce:	ea4a 0303 	orr.w	r3, sl, r3
240069d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
240069d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
240069da:	6053      	str	r3, [r2, #4]
}
240069dc:	e699      	b.n	24006712 <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
240069de:	2001      	movs	r0, #1
240069e0:	e66c      	b.n	240066bc <HAL_I2C_Master_Transmit+0x6c>
240069e2:	bf00      	nop
240069e4:	fc009c00 	.word	0xfc009c00

240069e8 <HAL_I2C_Slave_Receive_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
240069e8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
240069ec:	2b20      	cmp	r3, #32
240069ee:	d126      	bne.n	24006a3e <HAL_I2C_Slave_Receive_IT+0x56>
{
240069f0:	b4f0      	push	{r4, r5, r6, r7}
240069f2:	b2dc      	uxtb	r4, r3
    __HAL_LOCK(hi2c);
240069f4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
240069f8:	2b01      	cmp	r3, #1
240069fa:	d022      	beq.n	24006a42 <HAL_I2C_Slave_Receive_IT+0x5a>
240069fc:	2301      	movs	r3, #1
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
240069fe:	6805      	ldr	r5, [r0, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006a00:	4e11      	ldr	r6, [pc, #68]	; (24006a48 <HAL_I2C_Slave_Receive_IT+0x60>)
    __HAL_LOCK(hi2c);
24006a02:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
24006a06:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR     = I2C_Slave_ISR_IT;
24006a08:	4f10      	ldr	r7, [pc, #64]	; (24006a4c <HAL_I2C_Slave_Receive_IT+0x64>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
24006a0a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
24006a0e:	2300      	movs	r3, #0
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
24006a10:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
24006a14:	6443      	str	r3, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
24006a16:	686c      	ldr	r4, [r5, #4]
24006a18:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
24006a1c:	606c      	str	r4, [r5, #4]
    hi2c->XferCount   = Size;
24006a1e:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
24006a20:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
24006a22:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
24006a24:	6801      	ldr	r1, [r0, #0]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
24006a26:	6347      	str	r7, [r0, #52]	; 0x34
    hi2c->XferSize    = hi2c->XferCount;
24006a28:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006a2a:	62c6      	str	r6, [r0, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
24006a2c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
24006a30:	4618      	mov	r0, r3
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
24006a32:	680a      	ldr	r2, [r1, #0]
24006a34:	f042 02fc 	orr.w	r2, r2, #252	; 0xfc
24006a38:	600a      	str	r2, [r1, #0]
}
24006a3a:	bcf0      	pop	{r4, r5, r6, r7}
24006a3c:	4770      	bx	lr
    return HAL_BUSY;
24006a3e:	2002      	movs	r0, #2
}
24006a40:	4770      	bx	lr
    return HAL_BUSY;
24006a42:	2002      	movs	r0, #2
}
24006a44:	bcf0      	pop	{r4, r5, r6, r7}
24006a46:	4770      	bx	lr
24006a48:	ffff0000 	.word	0xffff0000
24006a4c:	24006f39 	.word	0x24006f39

24006a50 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24006a50:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
24006a52:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24006a54:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
24006a56:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
24006a58:	b103      	cbz	r3, 24006a5c <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
24006a5a:	4718      	bx	r3
}
24006a5c:	4770      	bx	lr
24006a5e:	bf00      	nop

24006a60 <HAL_I2C_SlaveTxCpltCallback>:
24006a60:	4770      	bx	lr
24006a62:	bf00      	nop

24006a64 <I2C_ITSlaveSeqCplt>:
{
24006a64:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24006a66:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006a68:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24006a6a:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006a6c:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24006a70:	0451      	lsls	r1, r2, #17
24006a72:	d526      	bpl.n	24006ac2 <I2C_ITSlaveSeqCplt+0x5e>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24006a74:	681a      	ldr	r2, [r3, #0]
24006a76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24006a7a:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
24006a7c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006a80:	2b29      	cmp	r3, #41	; 0x29
24006a82:	d028      	beq.n	24006ad6 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
24006a84:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006a88:	2b2a      	cmp	r3, #42	; 0x2a
24006a8a:	d000      	beq.n	24006a8e <I2C_ITSlaveSeqCplt+0x2a>
}
24006a8c:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006a8e:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24006a90:	2322      	movs	r3, #34	; 0x22
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006a92:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
24006a94:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006a98:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24006a9c:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006a9e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006aa2:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006aa4:	f002 0228 	and.w	r2, r2, #40	; 0x28
24006aa8:	2a28      	cmp	r2, #40	; 0x28
24006aaa:	bf0c      	ite	eq
24006aac:	f06f 0244 	mvneq.w	r2, #68	; 0x44
24006ab0:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006ab4:	4013      	ands	r3, r2
24006ab6:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
24006ab8:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24006abc:	f026 f8c4 	bl	2402cc48 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
24006ac0:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
24006ac2:	0412      	lsls	r2, r2, #16
24006ac4:	d5da      	bpl.n	24006a7c <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24006ac6:	681a      	ldr	r2, [r3, #0]
24006ac8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24006acc:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
24006ace:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006ad2:	2b29      	cmp	r3, #41	; 0x29
24006ad4:	d1d6      	bne.n	24006a84 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006ad6:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24006ad8:	2321      	movs	r3, #33	; 0x21
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006ada:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
24006adc:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006ae0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24006ae4:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006ae6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006aea:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006aec:	f002 0228 	and.w	r2, r2, #40	; 0x28
24006af0:	2a28      	cmp	r2, #40	; 0x28
24006af2:	bf0c      	ite	eq
24006af4:	f06f 0242 	mvneq.w	r2, #66	; 0x42
24006af8:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006afc:	4013      	ands	r3, r2
24006afe:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
24006b00:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24006b04:	f7ff ffac 	bl	24006a60 <HAL_I2C_SlaveTxCpltCallback>
}
24006b08:	bd08      	pop	{r3, pc}
24006b0a:	bf00      	nop

24006b0c <HAL_I2C_AddrCallback>:
}
24006b0c:	4770      	bx	lr
24006b0e:	bf00      	nop

24006b10 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24006b10:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
24006b12:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24006b14:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006b16:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
24006b18:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006b1a:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006b1c:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24006b1e:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
24006b20:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006b24:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
24006b28:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006b2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006b2e:	d10f      	bne.n	24006b50 <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24006b30:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24006b34:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24006b38:	f013 0306 	ands.w	r3, r3, #6
24006b3c:	d106      	bne.n	24006b4c <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
24006b3e:	6c85      	ldr	r5, [r0, #72]	; 0x48
24006b40:	3501      	adds	r5, #1
24006b42:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
24006b44:	6c85      	ldr	r5, [r0, #72]	; 0x48
24006b46:	2d02      	cmp	r5, #2
24006b48:	d00c      	beq.n	24006b64 <I2C_ITAddrCplt.part.0+0x54>
}
24006b4a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24006b4c:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006b50:	6823      	ldr	r3, [r4, #0]
24006b52:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
24006b56:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
24006b58:	2300      	movs	r3, #0
24006b5a:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24006b5e:	f7ff ffd5 	bl	24006b0c <HAL_I2C_AddrCallback>
}
24006b62:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24006b64:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
24006b66:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24006b68:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
24006b6a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24006b6e:	f7ff ffcd 	bl	24006b0c <HAL_I2C_AddrCallback>
}
24006b72:	bd70      	pop	{r4, r5, r6, pc}

24006b74 <HAL_I2C_ListenCpltCallback>:
24006b74:	4770      	bx	lr
24006b76:	bf00      	nop

24006b78 <HAL_I2C_AbortCpltCallback>:
24006b78:	4770      	bx	lr
24006b7a:	bf00      	nop

24006b7c <I2C_DMAAbort>:
{
24006b7c:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
24006b7e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
24006b80:	6b83      	ldr	r3, [r0, #56]	; 0x38
24006b82:	b10b      	cbz	r3, 24006b88 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
24006b84:	2200      	movs	r2, #0
24006b86:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
24006b88:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
24006b8a:	b10b      	cbz	r3, 24006b90 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
24006b8c:	2200      	movs	r2, #0
24006b8e:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006b90:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006b94:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24006b96:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006b9a:	d005      	beq.n	24006ba8 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
24006b9c:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24006b9e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24006ba2:	f026 f839 	bl	2402cc18 <__HAL_I2C_ErrorCallback_veneer>
}
24006ba6:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24006ba8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
24006baa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24006bae:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24006bb2:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24006bb4:	f7ff ffe0 	bl	24006b78 <HAL_I2C_AbortCpltCallback>
}
24006bb8:	bd08      	pop	{r3, pc}
24006bba:	bf00      	nop

24006bbc <I2C_ITError>:
{
24006bbc:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24006bbe:	4a5d      	ldr	r2, [pc, #372]	; (24006d34 <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24006bc0:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24006bc2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
24006bc6:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24006bc8:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24006bcc:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24006bce:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
24006bd0:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
24006bd2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24006bd4:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
24006bd6:	ea41 0102 	orr.w	r1, r1, r2
24006bda:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24006bdc:	d874      	bhi.n	24006cc8 <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006bde:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006be2:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006be6:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006bea:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006bec:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006bf0:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006bf2:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006bf4:	bf14      	ite	ne
24006bf6:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
24006bfa:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006bfe:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006c00:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006c04:	bf18      	it	ne
24006c06:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006c0a:	4013      	ands	r3, r2
24006c0c:	4a4a      	ldr	r2, [pc, #296]	; (24006d38 <I2C_ITError+0x17c>)
24006c0e:	6003      	str	r3, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006c10:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24006c14:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
24006c16:	6b23      	ldr	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
24006c18:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
24006c1a:	b118      	cbz	r0, 24006c24 <I2C_ITError+0x68>
24006c1c:	2b11      	cmp	r3, #17
24006c1e:	d01e      	beq.n	24006c5e <I2C_ITError+0xa2>
24006c20:	2b21      	cmp	r3, #33	; 0x21
24006c22:	d01c      	beq.n	24006c5e <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
24006c24:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24006c26:	b118      	cbz	r0, 24006c30 <I2C_ITError+0x74>
24006c28:	2b12      	cmp	r3, #18
24006c2a:	d030      	beq.n	24006c8e <I2C_ITError+0xd2>
24006c2c:	2b22      	cmp	r3, #34	; 0x22
24006c2e:	d02e      	beq.n	24006c8e <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006c30:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006c34:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
24006c36:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24006c3a:	d006      	beq.n	24006c4a <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
24006c3c:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
24006c3e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24006c40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24006c44:	f025 ffe8 	bl	2402cc18 <__HAL_I2C_ErrorCallback_veneer>
}
24006c48:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
24006c4a:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
24006c4c:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24006c4e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24006c52:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24006c56:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24006c58:	f7ff ff8e 	bl	24006b78 <HAL_I2C_AbortCpltCallback>
}
24006c5c:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
24006c5e:	6823      	ldr	r3, [r4, #0]
24006c60:	681a      	ldr	r2, [r3, #0]
24006c62:	0451      	lsls	r1, r2, #17
24006c64:	d45f      	bmi.n	24006d26 <I2C_ITError+0x16a>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
24006c66:	f7ff fa05 	bl	24006074 <HAL_DMA_GetState>
24006c6a:	2801      	cmp	r0, #1
24006c6c:	d0e0      	beq.n	24006c30 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24006c6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
24006c70:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24006c72:	4932      	ldr	r1, [pc, #200]	; (24006d3c <I2C_ITError+0x180>)
24006c74:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24006c76:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
24006c7a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24006c7c:	f7fe fc90 	bl	240055a0 <HAL_DMA_Abort_IT>
24006c80:	2800      	cmp	r0, #0
24006c82:	d0e1      	beq.n	24006c48 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24006c84:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
24006c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24006c8a:	6d03      	ldr	r3, [r0, #80]	; 0x50
24006c8c:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
24006c8e:	6823      	ldr	r3, [r4, #0]
24006c90:	681a      	ldr	r2, [r3, #0]
24006c92:	0412      	lsls	r2, r2, #16
24006c94:	d504      	bpl.n	24006ca0 <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24006c96:	681a      	ldr	r2, [r3, #0]
24006c98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24006c9c:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
24006c9e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24006ca0:	f7ff f9e8 	bl	24006074 <HAL_DMA_GetState>
24006ca4:	2801      	cmp	r0, #1
24006ca6:	d0c3      	beq.n	24006c30 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24006ca8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
24006caa:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24006cac:	4923      	ldr	r1, [pc, #140]	; (24006d3c <I2C_ITError+0x180>)
24006cae:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24006cb0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
24006cb4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24006cb6:	f7fe fc73 	bl	240055a0 <HAL_DMA_Abort_IT>
24006cba:	2800      	cmp	r0, #0
24006cbc:	d0c4      	beq.n	24006c48 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24006cbe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
24006cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24006cc4:	6d03      	ldr	r3, [r0, #80]	; 0x50
24006cc6:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006cc8:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006cca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006cce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006cd2:	6813      	ldr	r3, [r2, #0]
24006cd4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24006cd8:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006cda:	6803      	ldr	r3, [r0, #0]
24006cdc:	699a      	ldr	r2, [r3, #24]
24006cde:	0792      	lsls	r2, r2, #30
24006ce0:	d501      	bpl.n	24006ce6 <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
24006ce2:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24006ce4:	6803      	ldr	r3, [r0, #0]
24006ce6:	699a      	ldr	r2, [r3, #24]
24006ce8:	07d6      	lsls	r6, r2, #31
24006cea:	d403      	bmi.n	24006cf4 <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24006cec:	699a      	ldr	r2, [r3, #24]
24006cee:	f042 0201 	orr.w	r2, r2, #1
24006cf2:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
24006cf4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006cf8:	2b60      	cmp	r3, #96	; 0x60
24006cfa:	d012      	beq.n	24006d22 <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
24006cfc:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
24006cfe:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
24006d00:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
24006d04:	699a      	ldr	r2, [r3, #24]
24006d06:	0695      	lsls	r5, r2, #26
24006d08:	d50b      	bpl.n	24006d22 <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
24006d0a:	699a      	ldr	r2, [r3, #24]
24006d0c:	06d0      	lsls	r0, r2, #27
24006d0e:	d506      	bpl.n	24006d1e <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006d10:	2210      	movs	r2, #16
24006d12:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24006d14:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006d16:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24006d18:	f042 0204 	orr.w	r2, r2, #4
24006d1c:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006d1e:	2220      	movs	r2, #32
24006d20:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
24006d22:	2200      	movs	r2, #0
24006d24:	e776      	b.n	24006c14 <I2C_ITError+0x58>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24006d26:	681a      	ldr	r2, [r3, #0]
24006d28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24006d2c:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
24006d2e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24006d30:	e799      	b.n	24006c66 <I2C_ITError+0xaa>
24006d32:	bf00      	nop
24006d34:	ffff0000 	.word	0xffff0000
24006d38:	24006f39 	.word	0x24006f39
24006d3c:	24006b7d 	.word	0x24006b7d

24006d40 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24006d40:	6803      	ldr	r3, [r0, #0]
{
24006d42:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24006d44:	699a      	ldr	r2, [r3, #24]
24006d46:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
24006d48:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
24006d4a:	f412 7f80 	tst.w	r2, #256	; 0x100
24006d4e:	d032      	beq.n	24006db6 <HAL_I2C_ER_IRQHandler+0x76>
24006d50:	f011 0f80 	tst.w	r1, #128	; 0x80
24006d54:	d021      	beq.n	24006d9a <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24006d56:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006d58:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24006d5c:	f041 0101 	orr.w	r1, r1, #1
24006d60:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006d62:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24006d64:	0553      	lsls	r3, r2, #21
24006d66:	d507      	bpl.n	24006d78 <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006d68:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
24006d6a:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006d6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
24006d70:	f041 0108 	orr.w	r1, r1, #8
24006d74:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006d76:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
24006d78:	0592      	lsls	r2, r2, #22
24006d7a:	d507      	bpl.n	24006d8c <HAL_I2C_ER_IRQHandler+0x4c>
24006d7c:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24006d7e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006d80:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24006d84:	f043 0302 	orr.w	r3, r3, #2
24006d88:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006d8a:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
24006d8c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
24006d8e:	f011 0f0b 	tst.w	r1, #11
24006d92:	d10c      	bne.n	24006dae <HAL_I2C_ER_IRQHandler+0x6e>
}
24006d94:	f85d 4b04 	ldr.w	r4, [sp], #4
24006d98:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24006d9a:	0553      	lsls	r3, r2, #21
24006d9c:	d4f6      	bmi.n	24006d8c <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
24006d9e:	0593      	lsls	r3, r2, #22
24006da0:	d5f4      	bpl.n	24006d8c <HAL_I2C_ER_IRQHandler+0x4c>
24006da2:	060a      	lsls	r2, r1, #24
24006da4:	d4eb      	bmi.n	24006d7e <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
24006da6:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
24006da8:	f011 0f0b 	tst.w	r1, #11
24006dac:	d0f2      	beq.n	24006d94 <HAL_I2C_ER_IRQHandler+0x54>
}
24006dae:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
24006db2:	f7ff bf03 	b.w	24006bbc <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24006db6:	f412 6f80 	tst.w	r2, #1024	; 0x400
24006dba:	d0f0      	beq.n	24006d9e <HAL_I2C_ER_IRQHandler+0x5e>
24006dbc:	0609      	lsls	r1, r1, #24
24006dbe:	d5e5      	bpl.n	24006d8c <HAL_I2C_ER_IRQHandler+0x4c>
24006dc0:	e7d3      	b.n	24006d6a <HAL_I2C_ER_IRQHandler+0x2a>
24006dc2:	bf00      	nop

24006dc4 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24006dc4:	b570      	push	{r4, r5, r6, lr}
24006dc6:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24006dc8:	6802      	ldr	r2, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006dca:	2520      	movs	r5, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24006dcc:	6810      	ldr	r0, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24006dce:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006dd2:	61d5      	str	r5, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
24006dd4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
24006dd8:	2b21      	cmp	r3, #33	; 0x21
24006dda:	d16d      	bne.n	24006eb8 <I2C_ITSlaveCplt.constprop.0+0xf4>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006ddc:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006dde:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006de2:	682a      	ldr	r2, [r5, #0]
24006de4:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
24006de8:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24006dea:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
24006dec:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
24006dee:	4d50      	ldr	r5, [pc, #320]	; (24006f30 <I2C_ITSlaveCplt.constprop.0+0x16c>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
24006df0:	6853      	ldr	r3, [r2, #4]
24006df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
24006df6:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
24006df8:	6822      	ldr	r2, [r4, #0]
24006dfa:	6853      	ldr	r3, [r2, #4]
24006dfc:	402b      	ands	r3, r5
24006dfe:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006e00:	6823      	ldr	r3, [r4, #0]
24006e02:	699a      	ldr	r2, [r3, #24]
24006e04:	0792      	lsls	r2, r2, #30
24006e06:	d502      	bpl.n	24006e0e <I2C_ITSlaveCplt.constprop.0+0x4a>
    hi2c->Instance->TXDR = 0x00U;
24006e08:	2200      	movs	r2, #0
24006e0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24006e0c:	6823      	ldr	r3, [r4, #0]
24006e0e:	699a      	ldr	r2, [r3, #24]
24006e10:	07d6      	lsls	r6, r2, #31
24006e12:	d403      	bmi.n	24006e1c <I2C_ITSlaveCplt.constprop.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24006e14:	699a      	ldr	r2, [r3, #24]
24006e16:	f042 0201 	orr.w	r2, r2, #1
24006e1a:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24006e1c:	0445      	lsls	r5, r0, #17
24006e1e:	d556      	bpl.n	24006ece <I2C_ITSlaveCplt.constprop.0+0x10a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24006e20:	6822      	ldr	r2, [r4, #0]
24006e22:	6813      	ldr	r3, [r2, #0]
24006e24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24006e28:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
24006e2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24006e2c:	b11b      	cbz	r3, 24006e36 <I2C_ITSlaveCplt.constprop.0+0x72>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
24006e2e:	681a      	ldr	r2, [r3, #0]
24006e30:	6853      	ldr	r3, [r2, #4]
24006e32:	b29b      	uxth	r3, r3
24006e34:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
24006e36:	074b      	lsls	r3, r1, #29
24006e38:	d508      	bpl.n	24006e4c <I2C_ITSlaveCplt.constprop.0+0x88>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24006e3a:	6822      	ldr	r2, [r4, #0]
24006e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
24006e3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
24006e40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24006e42:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24006e44:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24006e46:	3301      	adds	r3, #1
24006e48:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24006e4a:	bb72      	cbnz	r2, 24006eaa <I2C_ITSlaveCplt.constprop.0+0xe6>
  if (hi2c->XferCount != 0U)
24006e4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006e4e:	b29b      	uxth	r3, r3
24006e50:	b11b      	cbz	r3, 24006e5a <I2C_ITSlaveCplt.constprop.0+0x96>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24006e52:	6c63      	ldr	r3, [r4, #68]	; 0x44
24006e54:	f043 0304 	orr.w	r3, r3, #4
24006e58:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006e5a:	2600      	movs	r6, #0
24006e5c:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24006e60:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
24006e62:	6366      	str	r6, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24006e64:	2d00      	cmp	r5, #0
24006e66:	d13d      	bne.n	24006ee4 <I2C_ITSlaveCplt.constprop.0+0x120>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
24006e68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24006e6a:	4e32      	ldr	r6, [pc, #200]	; (24006f34 <I2C_ITSlaveCplt.constprop.0+0x170>)
24006e6c:	42b3      	cmp	r3, r6
24006e6e:	d10e      	bne.n	24006e8e <I2C_ITSlaveCplt.constprop.0+0xca>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24006e70:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24006e74:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24006e76:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24006e7a:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
24006e7c:	f04f 0320 	mov.w	r3, #32
24006e80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24006e84:	6325      	str	r5, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24006e86:	d050      	beq.n	24006f2a <I2C_ITSlaveCplt.constprop.0+0x166>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24006e88:	f7ff fdea 	bl	24006a60 <HAL_I2C_SlaveTxCpltCallback>
}
24006e8c:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITSlaveSeqCplt(hi2c);
24006e8e:	4620      	mov	r0, r4
24006e90:	f7ff fde8 	bl	24006a64 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
24006e94:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006e96:	62e6      	str	r6, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
24006e98:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
24006e9a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24006e9e:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
24006ea2:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
24006ea4:	f7ff fe66 	bl	24006b74 <HAL_I2C_ListenCpltCallback>
}
24006ea8:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
24006eaa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24006eac:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24006eae:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24006eb0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006eb2:	b29b      	uxth	r3, r3
24006eb4:	8563      	strh	r3, [r4, #42]	; 0x2a
24006eb6:	e7c9      	b.n	24006e4c <I2C_ITSlaveCplt.constprop.0+0x88>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
24006eb8:	2b22      	cmp	r3, #34	; 0x22
24006eba:	d197      	bne.n	24006dec <I2C_ITSlaveCplt.constprop.0+0x28>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006ebc:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006ebe:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006ec2:	682a      	ldr	r2, [r5, #0]
24006ec4:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
24006ec8:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24006eca:	6323      	str	r3, [r4, #48]	; 0x30
24006ecc:	e78e      	b.n	24006dec <I2C_ITSlaveCplt.constprop.0+0x28>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
24006ece:	0402      	lsls	r2, r0, #16
24006ed0:	d5b1      	bpl.n	24006e36 <I2C_ITSlaveCplt.constprop.0+0x72>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24006ed2:	6822      	ldr	r2, [r4, #0]
24006ed4:	6813      	ldr	r3, [r2, #0]
24006ed6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24006eda:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
24006edc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24006ede:	2b00      	cmp	r3, #0
24006ee0:	d1a5      	bne.n	24006e2e <I2C_ITSlaveCplt.constprop.0+0x6a>
24006ee2:	e7a8      	b.n	24006e36 <I2C_ITSlaveCplt.constprop.0+0x72>
    I2C_ITError(hi2c, hi2c->ErrorCode);
24006ee4:	6c61      	ldr	r1, [r4, #68]	; 0x44
24006ee6:	4620      	mov	r0, r4
24006ee8:	f7ff fe68 	bl	24006bbc <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
24006eec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006ef0:	2b28      	cmp	r3, #40	; 0x28
24006ef2:	d1cb      	bne.n	24006e8c <I2C_ITSlaveCplt.constprop.0+0xc8>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006ef4:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
24006ef6:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006ef8:	490e      	ldr	r1, [pc, #56]	; (24006f34 <I2C_ITSlaveCplt.constprop.0+0x170>)
  HAL_I2C_ListenCpltCallback(hi2c);
24006efa:	4620      	mov	r0, r4
  hi2c->XferISR = NULL;
24006efc:	6366      	str	r6, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006efe:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006f00:	2110      	movs	r1, #16
  hi2c->PreviousState = I2C_STATE_NONE;
24006f02:	6326      	str	r6, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
24006f04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006f08:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006f0c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006f10:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006f14:	6813      	ldr	r3, [r2, #0]
24006f16:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
24006f1a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006f1c:	6823      	ldr	r3, [r4, #0]
24006f1e:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(hi2c);
24006f20:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
24006f24:	f7ff fe26 	bl	24006b74 <HAL_I2C_ListenCpltCallback>
}
24006f28:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24006f2a:	f025 fe8d 	bl	2402cc48 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
24006f2e:	bd70      	pop	{r4, r5, r6, pc}
24006f30:	fe00e800 	.word	0xfe00e800
24006f34:	ffff0000 	.word	0xffff0000

24006f38 <I2C_Slave_ISR_IT>:
{
24006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
24006f3a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
24006f3e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
24006f40:	2b01      	cmp	r3, #1
24006f42:	f000 8081 	beq.w	24007048 <I2C_Slave_ISR_IT+0x110>
24006f46:	4617      	mov	r7, r2
24006f48:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24006f4a:	068a      	lsls	r2, r1, #26
24006f4c:	4604      	mov	r4, r0
24006f4e:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
24006f50:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24006f54:	d501      	bpl.n	24006f5a <I2C_Slave_ISR_IT+0x22>
24006f56:	06bb      	lsls	r3, r7, #26
24006f58:	d462      	bmi.n	24007020 <I2C_Slave_ISR_IT+0xe8>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24006f5a:	06ea      	lsls	r2, r5, #27
24006f5c:	d51c      	bpl.n	24006f98 <I2C_Slave_ISR_IT+0x60>
24006f5e:	06fb      	lsls	r3, r7, #27
24006f60:	d51a      	bpl.n	24006f98 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount == 0U)
24006f62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006f64:	b29b      	uxth	r3, r3
24006f66:	2b00      	cmp	r3, #0
24006f68:	d15f      	bne.n	2400702a <I2C_Slave_ISR_IT+0xf2>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
24006f6a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
24006f6e:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
24006f72:	b2d2      	uxtb	r2, r2
24006f74:	d101      	bne.n	24006f7a <I2C_Slave_ISR_IT+0x42>
24006f76:	2a28      	cmp	r2, #40	; 0x28
24006f78:	d07f      	beq.n	2400707a <I2C_Slave_ISR_IT+0x142>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24006f7a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006f7e:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24006f80:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006f82:	6823      	ldr	r3, [r4, #0]
24006f84:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24006f86:	d102      	bne.n	24006f8e <I2C_Slave_ISR_IT+0x56>
24006f88:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
24006f8c:	d162      	bne.n	24007054 <I2C_Slave_ISR_IT+0x11c>
  __HAL_UNLOCK(hi2c);
24006f8e:	2300      	movs	r3, #0
  return HAL_OK;
24006f90:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
24006f92:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
24006f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24006f98:	076a      	lsls	r2, r5, #29
24006f9a:	d40d      	bmi.n	24006fb8 <I2C_Slave_ISR_IT+0x80>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
24006f9c:	0728      	lsls	r0, r5, #28
24006f9e:	d529      	bpl.n	24006ff4 <I2C_Slave_ISR_IT+0xbc>
24006fa0:	0739      	lsls	r1, r7, #28
24006fa2:	d527      	bpl.n	24006ff4 <I2C_Slave_ISR_IT+0xbc>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
24006fa4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
24006fa8:	f003 0328 	and.w	r3, r3, #40	; 0x28
24006fac:	2b28      	cmp	r3, #40	; 0x28
24006fae:	d060      	beq.n	24007072 <I2C_Slave_ISR_IT+0x13a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24006fb0:	6823      	ldr	r3, [r4, #0]
24006fb2:	2208      	movs	r2, #8
24006fb4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
24006fb6:	e7ea      	b.n	24006f8e <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
24006fb8:	077b      	lsls	r3, r7, #29
24006fba:	d5ef      	bpl.n	24006f9c <I2C_Slave_ISR_IT+0x64>
    if (hi2c->XferCount > 0U)
24006fbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006fbe:	b29b      	uxth	r3, r3
24006fc0:	b16b      	cbz	r3, 24006fde <I2C_Slave_ISR_IT+0xa6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24006fc2:	6822      	ldr	r2, [r4, #0]
24006fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
24006fc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
24006fc8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
24006fca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
24006fcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24006fce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006fd0:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
24006fd2:	3101      	adds	r1, #1
      hi2c->XferSize--;
24006fd4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24006fd6:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
24006fd8:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24006fda:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24006fdc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
24006fde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006fe0:	b29b      	uxth	r3, r3
24006fe2:	2b00      	cmp	r3, #0
24006fe4:	d1d3      	bne.n	24006f8e <I2C_Slave_ISR_IT+0x56>
24006fe6:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
24006fea:	d0d0      	beq.n	24006f8e <I2C_Slave_ISR_IT+0x56>
        I2C_ITSlaveSeqCplt(hi2c);
24006fec:	4620      	mov	r0, r4
24006fee:	f7ff fd39 	bl	24006a64 <I2C_ITSlaveSeqCplt>
24006ff2:	e7cc      	b.n	24006f8e <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
24006ff4:	07aa      	lsls	r2, r5, #30
24006ff6:	d5ca      	bpl.n	24006f8e <I2C_Slave_ISR_IT+0x56>
24006ff8:	07bb      	lsls	r3, r7, #30
24006ffa:	d5c8      	bpl.n	24006f8e <I2C_Slave_ISR_IT+0x56>
    if (hi2c->XferCount > 0U)
24006ffc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24006ffe:	b29b      	uxth	r3, r3
24007000:	b323      	cbz	r3, 2400704c <I2C_Slave_ISR_IT+0x114>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24007002:	6a62      	ldr	r2, [r4, #36]	; 0x24
24007004:	6823      	ldr	r3, [r4, #0]
24007006:	7812      	ldrb	r2, [r2, #0]
24007008:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
2400700a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
2400700c:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
2400700e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007010:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
24007012:	3101      	adds	r1, #1
      hi2c->XferSize--;
24007014:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24007016:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
24007018:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
2400701a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
2400701c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
2400701e:	e7b6      	b.n	24006f8e <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
24007020:	f7ff fed0 	bl	24006dc4 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
24007024:	06ea      	lsls	r2, r5, #27
24007026:	d5b7      	bpl.n	24006f98 <I2C_Slave_ISR_IT+0x60>
24007028:	e799      	b.n	24006f5e <I2C_Slave_ISR_IT+0x26>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400702a:	6823      	ldr	r3, [r4, #0]
2400702c:	2210      	movs	r2, #16
2400702e:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007030:	6c63      	ldr	r3, [r4, #68]	; 0x44
24007032:	f043 0304 	orr.w	r3, r3, #4
24007036:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
24007038:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
2400703c:	d1a7      	bne.n	24006f8e <I2C_Slave_ISR_IT+0x56>
        I2C_ITError(hi2c, hi2c->ErrorCode);
2400703e:	6c61      	ldr	r1, [r4, #68]	; 0x44
24007040:	4620      	mov	r0, r4
24007042:	f7ff fdbb 	bl	24006bbc <I2C_ITError>
24007046:	e7a2      	b.n	24006f8e <I2C_Slave_ISR_IT+0x56>
  __HAL_LOCK(hi2c);
24007048:	2002      	movs	r0, #2
}
2400704a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
2400704c:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24007050:	d19d      	bne.n	24006f8e <I2C_Slave_ISR_IT+0x56>
24007052:	e7cb      	b.n	24006fec <I2C_Slave_ISR_IT+0xb4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007054:	6823      	ldr	r3, [r4, #0]
24007056:	699a      	ldr	r2, [r3, #24]
24007058:	0790      	lsls	r0, r2, #30
2400705a:	d502      	bpl.n	24007062 <I2C_Slave_ISR_IT+0x12a>
    hi2c->Instance->TXDR = 0x00U;
2400705c:	2200      	movs	r2, #0
2400705e:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007060:	6823      	ldr	r3, [r4, #0]
24007062:	699a      	ldr	r2, [r3, #24]
24007064:	07d1      	lsls	r1, r2, #31
24007066:	d4c1      	bmi.n	24006fec <I2C_Slave_ISR_IT+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24007068:	699a      	ldr	r2, [r3, #24]
2400706a:	f042 0201 	orr.w	r2, r2, #1
2400706e:	619a      	str	r2, [r3, #24]
24007070:	e7bc      	b.n	24006fec <I2C_Slave_ISR_IT+0xb4>
24007072:	4620      	mov	r0, r4
24007074:	f7ff fd4c 	bl	24006b10 <I2C_ITAddrCplt.part.0>
24007078:	e789      	b.n	24006f8e <I2C_Slave_ISR_IT+0x56>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400707a:	4918      	ldr	r1, [pc, #96]	; (240070dc <I2C_Slave_ISR_IT+0x1a4>)
  hi2c->State = HAL_I2C_STATE_READY;
2400707c:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
2400707e:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
24007080:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24007082:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
24007084:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
24007086:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400708a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
2400708e:	d512      	bpl.n	240070b6 <I2C_Slave_ISR_IT+0x17e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24007090:	6822      	ldr	r2, [r4, #0]
24007092:	6a63      	ldr	r3, [r4, #36]	; 0x24
24007094:	6a52      	ldr	r2, [r2, #36]	; 0x24
24007096:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24007098:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
2400709a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
2400709c:	3301      	adds	r3, #1
2400709e:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
240070a0:	b14a      	cbz	r2, 240070b6 <I2C_Slave_ISR_IT+0x17e>
      hi2c->XferCount--;
240070a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
240070a4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
240070a6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
240070a8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
240070aa:	b29b      	uxth	r3, r3
240070ac:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
240070ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
240070b0:	f043 0304 	orr.w	r3, r3, #4
240070b4:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240070b6:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240070b8:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240070ba:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
240070be:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240070c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240070c4:	6813      	ldr	r3, [r2, #0]
240070c6:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
240070ca:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240070cc:	6823      	ldr	r3, [r4, #0]
240070ce:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
240070d0:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
240070d2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
240070d6:	f7ff fd4d 	bl	24006b74 <HAL_I2C_ListenCpltCallback>
}
240070da:	e758      	b.n	24006f8e <I2C_Slave_ISR_IT+0x56>
240070dc:	ffff0000 	.word	0xffff0000

240070e0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
240070e0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
240070e4:	2a20      	cmp	r2, #32
240070e6:	d129      	bne.n	2400713c <HAL_I2CEx_ConfigAnalogFilter+0x5c>
240070e8:	4603      	mov	r3, r0
{
240070ea:	b500      	push	{lr}
240070ec:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
240070f0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
240070f4:	2a01      	cmp	r2, #1
240070f6:	d023      	beq.n	24007140 <HAL_I2CEx_ConfigAnalogFilter+0x60>
240070f8:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
240070fa:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
240070fc:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
24007100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
24007104:	2224      	movs	r2, #36	; 0x24
24007106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
2400710a:	6802      	ldr	r2, [r0, #0]
2400710c:	f022 0201 	bic.w	r2, r2, #1
24007110:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
24007112:	6818      	ldr	r0, [r3, #0]
24007114:	6802      	ldr	r2, [r0, #0]
24007116:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
2400711a:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
2400711c:	6818      	ldr	r0, [r3, #0]
2400711e:	6802      	ldr	r2, [r0, #0]
24007120:	4311      	orrs	r1, r2
24007122:	6001      	str	r1, [r0, #0]

    return HAL_OK;
24007124:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
24007126:	6819      	ldr	r1, [r3, #0]
24007128:	680a      	ldr	r2, [r1, #0]
2400712a:	f042 0201 	orr.w	r2, r2, #1
2400712e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
24007130:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24007134:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
24007138:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
2400713c:	2002      	movs	r0, #2
}
2400713e:	4770      	bx	lr
    return HAL_BUSY;
24007140:	2002      	movs	r0, #2
}
24007142:	f85d fb04 	ldr.w	pc, [sp], #4
24007146:	bf00      	nop

24007148 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
24007148:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
2400714c:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
2400714e:	2a20      	cmp	r2, #32
24007150:	fa5f fc82 	uxtb.w	ip, r2
24007154:	d121      	bne.n	2400719a <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
24007156:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
2400715a:	2a01      	cmp	r2, #1
2400715c:	d01d      	beq.n	2400719a <HAL_I2CEx_ConfigDigitalFilter+0x52>
2400715e:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24007160:	6800      	ldr	r0, [r0, #0]
    __HAL_LOCK(hi2c);
24007162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
24007166:	2224      	movs	r2, #36	; 0x24
24007168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
2400716c:	6802      	ldr	r2, [r0, #0]
2400716e:	f022 0201 	bic.w	r2, r2, #1
24007172:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
24007174:	6818      	ldr	r0, [r3, #0]
24007176:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
24007178:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
2400717c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24007180:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
24007182:	6002      	str	r2, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
24007184:	6818      	ldr	r0, [r3, #0]
24007186:	6802      	ldr	r2, [r0, #0]
24007188:	f042 0201 	orr.w	r2, r2, #1
2400718c:	6002      	str	r2, [r0, #0]

    return HAL_OK;
2400718e:	4608      	mov	r0, r1
    hi2c->State = HAL_I2C_STATE_READY;
24007190:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24007194:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    return HAL_OK;
24007198:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
2400719a:	2002      	movs	r0, #2
  }
}
2400719c:	4770      	bx	lr
2400719e:	bf00      	nop

240071a0 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
240071a0:	4b09      	ldr	r3, [pc, #36]	; (240071c8 <HAL_I2CEx_EnableFastModePlus+0x28>)
{
240071a2:	b082      	sub	sp, #8

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
240071a4:	4909      	ldr	r1, [pc, #36]	; (240071cc <HAL_I2CEx_EnableFastModePlus+0x2c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
240071a6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
240071aa:	f042 0202 	orr.w	r2, r2, #2
240071ae:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
240071b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
240071b6:	f003 0302 	and.w	r3, r3, #2
240071ba:	9301      	str	r3, [sp, #4]
240071bc:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
240071be:	684b      	ldr	r3, [r1, #4]
240071c0:	4318      	orrs	r0, r3
240071c2:	6048      	str	r0, [r1, #4]
}
240071c4:	b002      	add	sp, #8
240071c6:	4770      	bx	lr
240071c8:	58024400 	.word	0x58024400
240071cc:	58000400 	.word	0x58000400

240071d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
240071d0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
240071d2:	4c10      	ldr	r4, [pc, #64]	; (24007214 <HAL_PWREx_ConfigSupply+0x44>)
240071d4:	68e3      	ldr	r3, [r4, #12]
240071d6:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
240071da:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
240071dc:	d105      	bne.n	240071ea <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
240071de:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
240071e2:	1a18      	subs	r0, r3, r0
240071e4:	bf18      	it	ne
240071e6:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
240071e8:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
240071ea:	f023 0307 	bic.w	r3, r3, #7
240071ee:	4303      	orrs	r3, r0
240071f0:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
240071f2:	f7fd faed 	bl	240047d0 <HAL_GetTick>
240071f6:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240071f8:	e005      	b.n	24007206 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
240071fa:	f7fd fae9 	bl	240047d0 <HAL_GetTick>
240071fe:	1b40      	subs	r0, r0, r5
24007200:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
24007204:	d804      	bhi.n	24007210 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24007206:	6863      	ldr	r3, [r4, #4]
24007208:	049b      	lsls	r3, r3, #18
2400720a:	d5f6      	bpl.n	240071fa <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
2400720c:	2000      	movs	r0, #0
}
2400720e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
24007210:	2001      	movs	r0, #1
}
24007212:	bd38      	pop	{r3, r4, r5, pc}
24007214:	58024800 	.word	0x58024800

24007218 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007218:	4b3c      	ldr	r3, [pc, #240]	; (2400730c <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
2400721a:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400721c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
2400721e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24007220:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
24007222:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007226:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24007228:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
2400722c:	d038      	beq.n	240072a0 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400722e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24007232:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007236:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400723a:	fb05 f101 	mul.w	r1, r5, r1
2400723e:	2a01      	cmp	r2, #1
24007240:	ee07 1a90 	vmov	s15, r1
24007244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
24007248:	d002      	beq.n	24007250 <HAL_RCC_GetSysClockFreq.part.0+0x38>
2400724a:	2a02      	cmp	r2, #2
2400724c:	d050      	beq.n	240072f0 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
2400724e:	b34a      	cbz	r2, 240072a4 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007250:	ee07 0a90 	vmov	s15, r0
24007254:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 24007310 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
24007258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400725e:	eec5 6a27 	vdiv.f32	s13, s10, s15
24007262:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 24007314 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
24007266:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400726a:	ee07 3a90 	vmov	s15, r3
2400726e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24007272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007276:	ee77 7aa5 	vadd.f32	s15, s15, s11
2400727a:	eee7 7a06 	vfma.f32	s15, s14, s12
2400727e:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24007282:	4b22      	ldr	r3, [pc, #136]	; (2400730c <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
24007284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24007286:	f3c3 2346 	ubfx	r3, r3, #9, #7
2400728a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
2400728c:	ee07 3a90 	vmov	s15, r3
24007290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24007294:	eec6 7a87 	vdiv.f32	s15, s13, s14
24007298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400729c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
240072a0:	bc30      	pop	{r4, r5}
240072a2:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240072a4:	681a      	ldr	r2, [r3, #0]
240072a6:	0692      	lsls	r2, r2, #26
240072a8:	d529      	bpl.n	240072fe <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240072aa:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240072ac:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240072b0:	4a19      	ldr	r2, [pc, #100]	; (24007318 <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240072b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240072b8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240072bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240072c0:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24007314 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
240072c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240072c8:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240072ca:	ee06 3a10 	vmov	s12, r3
240072ce:	ee05 2a90 	vmov	s11, r2
240072d2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
240072d6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
240072da:	ee36 6a26 	vadd.f32	s12, s12, s13
240072de:	eec5 6aa7 	vdiv.f32	s13, s11, s15
240072e2:	eef0 7a46 	vmov.f32	s15, s12
240072e6:	eee7 7a05 	vfma.f32	s15, s14, s10
240072ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
240072ee:	e7c8      	b.n	24007282 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240072f0:	ee07 0a90 	vmov	s15, r0
240072f4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 2400731c <HAL_RCC_GetSysClockFreq.part.0+0x104>
240072f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240072fc:	e7ae      	b.n	2400725c <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240072fe:	ee07 0a90 	vmov	s15, r0
24007302:	ed9f 5a07 	vldr	s10, [pc, #28]	; 24007320 <HAL_RCC_GetSysClockFreq.part.0+0x108>
24007306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400730a:	e7a7      	b.n	2400725c <HAL_RCC_GetSysClockFreq.part.0+0x44>
2400730c:	58024400 	.word	0x58024400
24007310:	4a742400 	.word	0x4a742400
24007314:	39000000 	.word	0x39000000
24007318:	03d09000 	.word	0x03d09000
2400731c:	4b742400 	.word	0x4b742400
24007320:	4c742400 	.word	0x4c742400

24007324 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
24007324:	2800      	cmp	r0, #0
24007326:	f000 81ef 	beq.w	24007708 <HAL_RCC_OscConfig+0x3e4>
{
2400732a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2400732c:	6803      	ldr	r3, [r0, #0]
2400732e:	4604      	mov	r4, r0
24007330:	07d9      	lsls	r1, r3, #31
24007332:	d52e      	bpl.n	24007392 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007334:	49a4      	ldr	r1, [pc, #656]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
24007336:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007338:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2400733a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
2400733e:	2a10      	cmp	r2, #16
24007340:	f000 8107 	beq.w	24007552 <HAL_RCC_OscConfig+0x22e>
24007344:	2a18      	cmp	r2, #24
24007346:	f000 80ff 	beq.w	24007548 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2400734a:	6863      	ldr	r3, [r4, #4]
2400734c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24007350:	f000 812a 	beq.w	240075a8 <HAL_RCC_OscConfig+0x284>
24007354:	2b00      	cmp	r3, #0
24007356:	f040 8188 	bne.w	2400766a <HAL_RCC_OscConfig+0x346>
2400735a:	4b9b      	ldr	r3, [pc, #620]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
2400735c:	681a      	ldr	r2, [r3, #0]
2400735e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24007362:	601a      	str	r2, [r3, #0]
24007364:	681a      	ldr	r2, [r3, #0]
24007366:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2400736a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
2400736c:	6863      	ldr	r3, [r4, #4]
2400736e:	2b00      	cmp	r3, #0
24007370:	f000 815c 	beq.w	2400762c <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
24007374:	f7fd fa2c 	bl	240047d0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007378:	4e93      	ldr	r6, [pc, #588]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
2400737a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400737c:	e005      	b.n	2400738a <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
2400737e:	f7fd fa27 	bl	240047d0 <HAL_GetTick>
24007382:	1b40      	subs	r0, r0, r5
24007384:	2864      	cmp	r0, #100	; 0x64
24007386:	f200 814f 	bhi.w	24007628 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400738a:	6833      	ldr	r3, [r6, #0]
2400738c:	039b      	lsls	r3, r3, #14
2400738e:	d5f6      	bpl.n	2400737e <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24007390:	6823      	ldr	r3, [r4, #0]
24007392:	079d      	lsls	r5, r3, #30
24007394:	f100 808a 	bmi.w	240074ac <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007398:	06d9      	lsls	r1, r3, #27
2400739a:	d533      	bpl.n	24007404 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2400739c:	4a8a      	ldr	r2, [pc, #552]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
2400739e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240073a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240073a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
240073a6:	2b08      	cmp	r3, #8
240073a8:	f000 80e3 	beq.w	24007572 <HAL_RCC_OscConfig+0x24e>
240073ac:	2b18      	cmp	r3, #24
240073ae:	f000 80db 	beq.w	24007568 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
240073b2:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
240073b4:	4d84      	ldr	r5, [pc, #528]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
240073b6:	2b00      	cmp	r3, #0
240073b8:	f000 8176 	beq.w	240076a8 <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
240073bc:	682b      	ldr	r3, [r5, #0]
240073be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240073c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240073c4:	f7fd fa04 	bl	240047d0 <HAL_GetTick>
240073c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240073ca:	e005      	b.n	240073d8 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
240073cc:	f7fd fa00 	bl	240047d0 <HAL_GetTick>
240073d0:	1b80      	subs	r0, r0, r6
240073d2:	2802      	cmp	r0, #2
240073d4:	f200 8128 	bhi.w	24007628 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
240073d8:	682b      	ldr	r3, [r5, #0]
240073da:	05db      	lsls	r3, r3, #23
240073dc:	d5f6      	bpl.n	240073cc <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240073de:	f7fd fa0f 	bl	24004800 <HAL_GetREVID>
240073e2:	f241 0303 	movw	r3, #4099	; 0x1003
240073e6:	4298      	cmp	r0, r3
240073e8:	f200 8266 	bhi.w	240078b8 <HAL_RCC_OscConfig+0x594>
240073ec:	6a22      	ldr	r2, [r4, #32]
240073ee:	686b      	ldr	r3, [r5, #4]
240073f0:	2a20      	cmp	r2, #32
240073f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
240073f6:	bf0c      	ite	eq
240073f8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
240073fc:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
24007400:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007402:	6823      	ldr	r3, [r4, #0]
24007404:	071d      	lsls	r5, r3, #28
24007406:	d516      	bpl.n	24007436 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
24007408:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
2400740a:	4d6f      	ldr	r5, [pc, #444]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
2400740c:	2b00      	cmp	r3, #0
2400740e:	f000 811b 	beq.w	24007648 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
24007412:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24007414:	f043 0301 	orr.w	r3, r3, #1
24007418:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
2400741a:	f7fd f9d9 	bl	240047d0 <HAL_GetTick>
2400741e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24007420:	e005      	b.n	2400742e <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24007422:	f7fd f9d5 	bl	240047d0 <HAL_GetTick>
24007426:	1b80      	subs	r0, r0, r6
24007428:	2802      	cmp	r0, #2
2400742a:	f200 80fd 	bhi.w	24007628 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2400742e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24007430:	0798      	lsls	r0, r3, #30
24007432:	d5f6      	bpl.n	24007422 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
24007434:	6823      	ldr	r3, [r4, #0]
24007436:	069a      	lsls	r2, r3, #26
24007438:	d516      	bpl.n	24007468 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
2400743a:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
2400743c:	4d62      	ldr	r5, [pc, #392]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
2400743e:	2b00      	cmp	r3, #0
24007440:	f000 8121 	beq.w	24007686 <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
24007444:	682b      	ldr	r3, [r5, #0]
24007446:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2400744a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
2400744c:	f7fd f9c0 	bl	240047d0 <HAL_GetTick>
24007450:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24007452:	e005      	b.n	24007460 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24007454:	f7fd f9bc 	bl	240047d0 <HAL_GetTick>
24007458:	1b80      	subs	r0, r0, r6
2400745a:	2802      	cmp	r0, #2
2400745c:	f200 80e4 	bhi.w	24007628 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24007460:	682b      	ldr	r3, [r5, #0]
24007462:	049f      	lsls	r7, r3, #18
24007464:	d5f6      	bpl.n	24007454 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
24007466:	6823      	ldr	r3, [r4, #0]
24007468:	0759      	lsls	r1, r3, #29
2400746a:	f100 80a3 	bmi.w	240075b4 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2400746e:	6a60      	ldr	r0, [r4, #36]	; 0x24
24007470:	b1d0      	cbz	r0, 240074a8 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
24007472:	4d55      	ldr	r5, [pc, #340]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
24007474:	692b      	ldr	r3, [r5, #16]
24007476:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400747a:	2b18      	cmp	r3, #24
2400747c:	f000 81b6 	beq.w	240077ec <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
24007480:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24007482:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
24007484:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24007488:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2400748a:	f000 8149 	beq.w	24007720 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
2400748e:	f7fd f99f 	bl	240047d0 <HAL_GetTick>
24007492:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007494:	e005      	b.n	240074a2 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24007496:	f7fd f99b 	bl	240047d0 <HAL_GetTick>
2400749a:	1b00      	subs	r0, r0, r4
2400749c:	2802      	cmp	r0, #2
2400749e:	f200 80c3 	bhi.w	24007628 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
240074a2:	682b      	ldr	r3, [r5, #0]
240074a4:	019b      	lsls	r3, r3, #6
240074a6:	d4f6      	bmi.n	24007496 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
240074a8:	2000      	movs	r0, #0
}
240074aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240074ac:	4a46      	ldr	r2, [pc, #280]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
240074ae:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240074b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
240074b2:	f013 0338 	ands.w	r3, r3, #56	; 0x38
240074b6:	d12d      	bne.n	24007514 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
240074b8:	4b43      	ldr	r3, [pc, #268]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
240074ba:	68e2      	ldr	r2, [r4, #12]
240074bc:	681b      	ldr	r3, [r3, #0]
240074be:	0759      	lsls	r1, r3, #29
240074c0:	d501      	bpl.n	240074c6 <HAL_RCC_OscConfig+0x1a2>
240074c2:	2a00      	cmp	r2, #0
240074c4:	d04e      	beq.n	24007564 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240074c6:	4d40      	ldr	r5, [pc, #256]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
240074c8:	682b      	ldr	r3, [r5, #0]
240074ca:	f023 0319 	bic.w	r3, r3, #25
240074ce:	4313      	orrs	r3, r2
240074d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240074d2:	f7fd f97d 	bl	240047d0 <HAL_GetTick>
240074d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240074d8:	e005      	b.n	240074e6 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240074da:	f7fd f979 	bl	240047d0 <HAL_GetTick>
240074de:	1b80      	subs	r0, r0, r6
240074e0:	2802      	cmp	r0, #2
240074e2:	f200 80a1 	bhi.w	24007628 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240074e6:	682b      	ldr	r3, [r5, #0]
240074e8:	075b      	lsls	r3, r3, #29
240074ea:	d5f6      	bpl.n	240074da <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240074ec:	f7fd f988 	bl	24004800 <HAL_GetREVID>
240074f0:	f241 0303 	movw	r3, #4099	; 0x1003
240074f4:	4298      	cmp	r0, r3
240074f6:	f200 80fe 	bhi.w	240076f6 <HAL_RCC_OscConfig+0x3d2>
240074fa:	6922      	ldr	r2, [r4, #16]
240074fc:	686b      	ldr	r3, [r5, #4]
240074fe:	2a40      	cmp	r2, #64	; 0x40
24007500:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24007504:	bf0c      	ite	eq
24007506:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
2400750a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
2400750e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007510:	6823      	ldr	r3, [r4, #0]
24007512:	e741      	b.n	24007398 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24007514:	2b18      	cmp	r3, #24
24007516:	f000 80ea 	beq.w	240076ee <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2400751a:	4d2b      	ldr	r5, [pc, #172]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
2400751c:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2400751e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
24007520:	2a00      	cmp	r2, #0
24007522:	f000 80d3 	beq.w	240076cc <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
24007526:	f023 0319 	bic.w	r3, r3, #25
2400752a:	4313      	orrs	r3, r2
2400752c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
2400752e:	f7fd f94f 	bl	240047d0 <HAL_GetTick>
24007532:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007534:	e004      	b.n	24007540 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24007536:	f7fd f94b 	bl	240047d0 <HAL_GetTick>
2400753a:	1b80      	subs	r0, r0, r6
2400753c:	2802      	cmp	r0, #2
2400753e:	d873      	bhi.n	24007628 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007540:	682b      	ldr	r3, [r5, #0]
24007542:	075f      	lsls	r7, r3, #29
24007544:	d5f7      	bpl.n	24007536 <HAL_RCC_OscConfig+0x212>
24007546:	e7d1      	b.n	240074ec <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24007548:	f001 0103 	and.w	r1, r1, #3
2400754c:	2902      	cmp	r1, #2
2400754e:	f47f aefc 	bne.w	2400734a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24007552:	4a1d      	ldr	r2, [pc, #116]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
24007554:	6812      	ldr	r2, [r2, #0]
24007556:	0392      	lsls	r2, r2, #14
24007558:	f57f af1b 	bpl.w	24007392 <HAL_RCC_OscConfig+0x6e>
2400755c:	6862      	ldr	r2, [r4, #4]
2400755e:	2a00      	cmp	r2, #0
24007560:	f47f af17 	bne.w	24007392 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
24007564:	2001      	movs	r0, #1
}
24007566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24007568:	f002 0203 	and.w	r2, r2, #3
2400756c:	2a01      	cmp	r2, #1
2400756e:	f47f af20 	bne.w	240073b2 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24007572:	4b15      	ldr	r3, [pc, #84]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
24007574:	681b      	ldr	r3, [r3, #0]
24007576:	05da      	lsls	r2, r3, #23
24007578:	d502      	bpl.n	24007580 <HAL_RCC_OscConfig+0x25c>
2400757a:	69e3      	ldr	r3, [r4, #28]
2400757c:	2b80      	cmp	r3, #128	; 0x80
2400757e:	d1f1      	bne.n	24007564 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007580:	f7fd f93e 	bl	24004800 <HAL_GetREVID>
24007584:	f241 0303 	movw	r3, #4099	; 0x1003
24007588:	4298      	cmp	r0, r3
2400758a:	f200 80bf 	bhi.w	2400770c <HAL_RCC_OscConfig+0x3e8>
2400758e:	6a22      	ldr	r2, [r4, #32]
24007590:	2a20      	cmp	r2, #32
24007592:	f000 81ad 	beq.w	240078f0 <HAL_RCC_OscConfig+0x5cc>
24007596:	490c      	ldr	r1, [pc, #48]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
24007598:	684b      	ldr	r3, [r1, #4]
2400759a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
2400759e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
240075a2:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240075a4:	6823      	ldr	r3, [r4, #0]
240075a6:	e72d      	b.n	24007404 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
240075a8:	4a07      	ldr	r2, [pc, #28]	; (240075c8 <HAL_RCC_OscConfig+0x2a4>)
240075aa:	6813      	ldr	r3, [r2, #0]
240075ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240075b0:	6013      	str	r3, [r2, #0]
240075b2:	e6db      	b.n	2400736c <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
240075b4:	4d05      	ldr	r5, [pc, #20]	; (240075cc <HAL_RCC_OscConfig+0x2a8>)
240075b6:	682b      	ldr	r3, [r5, #0]
240075b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240075bc:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
240075be:	f7fd f907 	bl	240047d0 <HAL_GetTick>
240075c2:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
240075c4:	e009      	b.n	240075da <HAL_RCC_OscConfig+0x2b6>
240075c6:	bf00      	nop
240075c8:	58024400 	.word	0x58024400
240075cc:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
240075d0:	f7fd f8fe 	bl	240047d0 <HAL_GetTick>
240075d4:	1b80      	subs	r0, r0, r6
240075d6:	2864      	cmp	r0, #100	; 0x64
240075d8:	d826      	bhi.n	24007628 <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
240075da:	682b      	ldr	r3, [r5, #0]
240075dc:	05da      	lsls	r2, r3, #23
240075de:	d5f7      	bpl.n	240075d0 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
240075e0:	68a3      	ldr	r3, [r4, #8]
240075e2:	2b01      	cmp	r3, #1
240075e4:	f000 8171 	beq.w	240078ca <HAL_RCC_OscConfig+0x5a6>
240075e8:	2b00      	cmp	r3, #0
240075ea:	f040 8174 	bne.w	240078d6 <HAL_RCC_OscConfig+0x5b2>
240075ee:	4baa      	ldr	r3, [pc, #680]	; (24007898 <HAL_RCC_OscConfig+0x574>)
240075f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240075f2:	f022 0201 	bic.w	r2, r2, #1
240075f6:	671a      	str	r2, [r3, #112]	; 0x70
240075f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240075fa:	f022 0204 	bic.w	r2, r2, #4
240075fe:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24007600:	68a3      	ldr	r3, [r4, #8]
24007602:	2b00      	cmp	r3, #0
24007604:	f000 8140 	beq.w	24007888 <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
24007608:	f7fd f8e2 	bl	240047d0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2400760c:	4ea2      	ldr	r6, [pc, #648]	; (24007898 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400760e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
24007612:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24007614:	e004      	b.n	24007620 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24007616:	f7fd f8db 	bl	240047d0 <HAL_GetTick>
2400761a:	1b40      	subs	r0, r0, r5
2400761c:	42b8      	cmp	r0, r7
2400761e:	d803      	bhi.n	24007628 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24007620:	6f33      	ldr	r3, [r6, #112]	; 0x70
24007622:	079b      	lsls	r3, r3, #30
24007624:	d5f7      	bpl.n	24007616 <HAL_RCC_OscConfig+0x2f2>
24007626:	e722      	b.n	2400746e <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
24007628:	2003      	movs	r0, #3
}
2400762a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
2400762c:	f7fd f8d0 	bl	240047d0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24007630:	4e99      	ldr	r6, [pc, #612]	; (24007898 <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
24007632:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24007634:	e004      	b.n	24007640 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24007636:	f7fd f8cb 	bl	240047d0 <HAL_GetTick>
2400763a:	1b40      	subs	r0, r0, r5
2400763c:	2864      	cmp	r0, #100	; 0x64
2400763e:	d8f3      	bhi.n	24007628 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24007640:	6833      	ldr	r3, [r6, #0]
24007642:	039f      	lsls	r7, r3, #14
24007644:	d4f7      	bmi.n	24007636 <HAL_RCC_OscConfig+0x312>
24007646:	e6a3      	b.n	24007390 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
24007648:	6f6b      	ldr	r3, [r5, #116]	; 0x74
2400764a:	f023 0301 	bic.w	r3, r3, #1
2400764e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24007650:	f7fd f8be 	bl	240047d0 <HAL_GetTick>
24007654:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24007656:	e004      	b.n	24007662 <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24007658:	f7fd f8ba 	bl	240047d0 <HAL_GetTick>
2400765c:	1b80      	subs	r0, r0, r6
2400765e:	2802      	cmp	r0, #2
24007660:	d8e2      	bhi.n	24007628 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24007662:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24007664:	0799      	lsls	r1, r3, #30
24007666:	d4f7      	bmi.n	24007658 <HAL_RCC_OscConfig+0x334>
24007668:	e6e4      	b.n	24007434 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2400766a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2400766e:	4b8a      	ldr	r3, [pc, #552]	; (24007898 <HAL_RCC_OscConfig+0x574>)
24007670:	681a      	ldr	r2, [r3, #0]
24007672:	f47f ae74 	bne.w	2400735e <HAL_RCC_OscConfig+0x3a>
24007676:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
2400767a:	601a      	str	r2, [r3, #0]
2400767c:	681a      	ldr	r2, [r3, #0]
2400767e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24007682:	601a      	str	r2, [r3, #0]
24007684:	e672      	b.n	2400736c <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
24007686:	682b      	ldr	r3, [r5, #0]
24007688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
2400768c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
2400768e:	f7fd f89f 	bl	240047d0 <HAL_GetTick>
24007692:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24007694:	e004      	b.n	240076a0 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24007696:	f7fd f89b 	bl	240047d0 <HAL_GetTick>
2400769a:	1b80      	subs	r0, r0, r6
2400769c:	2802      	cmp	r0, #2
2400769e:	d8c3      	bhi.n	24007628 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
240076a0:	682b      	ldr	r3, [r5, #0]
240076a2:	0498      	lsls	r0, r3, #18
240076a4:	d4f7      	bmi.n	24007696 <HAL_RCC_OscConfig+0x372>
240076a6:	e6de      	b.n	24007466 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
240076a8:	682b      	ldr	r3, [r5, #0]
240076aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
240076ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240076b0:	f7fd f88e 	bl	240047d0 <HAL_GetTick>
240076b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
240076b6:	e004      	b.n	240076c2 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
240076b8:	f7fd f88a 	bl	240047d0 <HAL_GetTick>
240076bc:	1b80      	subs	r0, r0, r6
240076be:	2802      	cmp	r0, #2
240076c0:	d8b2      	bhi.n	24007628 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
240076c2:	682b      	ldr	r3, [r5, #0]
240076c4:	05df      	lsls	r7, r3, #23
240076c6:	d4f7      	bmi.n	240076b8 <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240076c8:	6823      	ldr	r3, [r4, #0]
240076ca:	e69b      	b.n	24007404 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
240076cc:	f023 0301 	bic.w	r3, r3, #1
240076d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240076d2:	f7fd f87d 	bl	240047d0 <HAL_GetTick>
240076d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
240076d8:	e004      	b.n	240076e4 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240076da:	f7fd f879 	bl	240047d0 <HAL_GetTick>
240076de:	1b80      	subs	r0, r0, r6
240076e0:	2802      	cmp	r0, #2
240076e2:	d8a1      	bhi.n	24007628 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
240076e4:	682b      	ldr	r3, [r5, #0]
240076e6:	0758      	lsls	r0, r3, #29
240076e8:	d4f7      	bmi.n	240076da <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
240076ea:	6823      	ldr	r3, [r4, #0]
240076ec:	e654      	b.n	24007398 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
240076ee:	0790      	lsls	r0, r2, #30
240076f0:	f47f af13 	bne.w	2400751a <HAL_RCC_OscConfig+0x1f6>
240076f4:	e6e0      	b.n	240074b8 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240076f6:	686b      	ldr	r3, [r5, #4]
240076f8:	6922      	ldr	r2, [r4, #16]
240076fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
240076fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24007702:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007704:	6823      	ldr	r3, [r4, #0]
24007706:	e647      	b.n	24007398 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
24007708:	2001      	movs	r0, #1
}
2400770a:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2400770c:	4a62      	ldr	r2, [pc, #392]	; (24007898 <HAL_RCC_OscConfig+0x574>)
2400770e:	6a21      	ldr	r1, [r4, #32]
24007710:	68d3      	ldr	r3, [r2, #12]
24007712:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
24007716:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
2400771a:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2400771c:	6823      	ldr	r3, [r4, #0]
2400771e:	e671      	b.n	24007404 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
24007720:	f7fd f856 	bl	240047d0 <HAL_GetTick>
24007724:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007726:	e005      	b.n	24007734 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24007728:	f7fd f852 	bl	240047d0 <HAL_GetTick>
2400772c:	1b80      	subs	r0, r0, r6
2400772e:	2802      	cmp	r0, #2
24007730:	f63f af7a 	bhi.w	24007628 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007734:	682b      	ldr	r3, [r5, #0]
24007736:	0199      	lsls	r1, r3, #6
24007738:	d4f6      	bmi.n	24007728 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
2400773a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
2400773c:	4b57      	ldr	r3, [pc, #348]	; (2400789c <HAL_RCC_OscConfig+0x578>)
2400773e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
24007740:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24007742:	4957      	ldr	r1, [pc, #348]	; (240078a0 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007744:	4e54      	ldr	r6, [pc, #336]	; (24007898 <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24007746:	4313      	orrs	r3, r2
24007748:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
2400774a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
2400774e:	62ab      	str	r3, [r5, #40]	; 0x28
24007750:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
24007754:	3b01      	subs	r3, #1
24007756:	3a01      	subs	r2, #1
24007758:	025b      	lsls	r3, r3, #9
2400775a:	0412      	lsls	r2, r2, #16
2400775c:	b29b      	uxth	r3, r3
2400775e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24007762:	4313      	orrs	r3, r2
24007764:	6b22      	ldr	r2, [r4, #48]	; 0x30
24007766:	3a01      	subs	r2, #1
24007768:	f3c2 0208 	ubfx	r2, r2, #0, #9
2400776c:	4313      	orrs	r3, r2
2400776e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
24007770:	3a01      	subs	r2, #1
24007772:	0612      	lsls	r2, r2, #24
24007774:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24007778:	4313      	orrs	r3, r2
2400777a:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
2400777c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400777e:	f023 0301 	bic.w	r3, r3, #1
24007782:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24007784:	6b6a      	ldr	r2, [r5, #52]	; 0x34
24007786:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24007788:	4011      	ands	r1, r2
2400778a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
2400778e:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24007790:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007792:	6c22      	ldr	r2, [r4, #64]	; 0x40
24007794:	f023 030c 	bic.w	r3, r3, #12
24007798:	4313      	orrs	r3, r2
2400779a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
2400779c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
2400779e:	6c62      	ldr	r2, [r4, #68]	; 0x44
240077a0:	f023 0302 	bic.w	r3, r3, #2
240077a4:	4313      	orrs	r3, r2
240077a6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
240077a8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240077aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240077ae:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240077b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240077b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240077b6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
240077b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240077ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
240077be:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
240077c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
240077c2:	f043 0301 	orr.w	r3, r3, #1
240077c6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
240077c8:	682b      	ldr	r3, [r5, #0]
240077ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
240077ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240077d0:	f7fc fffe 	bl	240047d0 <HAL_GetTick>
240077d4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240077d6:	e005      	b.n	240077e4 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
240077d8:	f7fc fffa 	bl	240047d0 <HAL_GetTick>
240077dc:	1b00      	subs	r0, r0, r4
240077de:	2802      	cmp	r0, #2
240077e0:	f63f af22 	bhi.w	24007628 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
240077e4:	6833      	ldr	r3, [r6, #0]
240077e6:	019a      	lsls	r2, r3, #6
240077e8:	d5f6      	bpl.n	240077d8 <HAL_RCC_OscConfig+0x4b4>
240077ea:	e65d      	b.n	240074a8 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240077ec:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
240077ee:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
240077f0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240077f2:	f43f ae5a 	beq.w	240074aa <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
240077f6:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
240077fa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
240077fc:	428b      	cmp	r3, r1
240077fe:	f47f aeb1 	bne.w	24007564 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24007802:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24007806:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007808:	429a      	cmp	r2, r3
2400780a:	f47f aeab 	bne.w	24007564 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
2400780e:	6b23      	ldr	r3, [r4, #48]	; 0x30
24007810:	f3c6 0208 	ubfx	r2, r6, #0, #9
24007814:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24007816:	429a      	cmp	r2, r3
24007818:	f47f aea4 	bne.w	24007564 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
2400781c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400781e:	f3c6 2246 	ubfx	r2, r6, #9, #7
24007822:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24007824:	429a      	cmp	r2, r3
24007826:	f47f ae9d 	bne.w	24007564 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
2400782a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400782c:	f3c6 4206 	ubfx	r2, r6, #16, #7
24007830:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24007832:	429a      	cmp	r2, r3
24007834:	f47f ae96 	bne.w	24007564 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
24007838:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400783a:	f3c6 6606 	ubfx	r6, r6, #24, #7
2400783e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24007840:	429e      	cmp	r6, r3
24007842:	f47f ae8f 	bne.w	24007564 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
24007846:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
24007848:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
2400784a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
2400784e:	429a      	cmp	r2, r3
24007850:	f43f ae2a 	beq.w	240074a8 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
24007854:	4a10      	ldr	r2, [pc, #64]	; (24007898 <HAL_RCC_OscConfig+0x574>)
24007856:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007858:	f023 0301 	bic.w	r3, r3, #1
2400785c:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
2400785e:	f7fc ffb7 	bl	240047d0 <HAL_GetTick>
24007862:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
24007864:	f7fc ffb4 	bl	240047d0 <HAL_GetTick>
24007868:	42a8      	cmp	r0, r5
2400786a:	d0fb      	beq.n	24007864 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
2400786c:	4a0a      	ldr	r2, [pc, #40]	; (24007898 <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
2400786e:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24007870:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24007872:	4b0b      	ldr	r3, [pc, #44]	; (240078a0 <HAL_RCC_OscConfig+0x57c>)
24007874:	6b54      	ldr	r4, [r2, #52]	; 0x34
24007876:	4023      	ands	r3, r4
24007878:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
2400787c:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
2400787e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007880:	f043 0301 	orr.w	r3, r3, #1
24007884:	62d3      	str	r3, [r2, #44]	; 0x2c
}
24007886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
24007888:	f7fc ffa2 	bl	240047d0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
2400788c:	4e02      	ldr	r6, [pc, #8]	; (24007898 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2400788e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
24007892:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24007894:	e00c      	b.n	240078b0 <HAL_RCC_OscConfig+0x58c>
24007896:	bf00      	nop
24007898:	58024400 	.word	0x58024400
2400789c:	fffffc0c 	.word	0xfffffc0c
240078a0:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
240078a4:	f7fc ff94 	bl	240047d0 <HAL_GetTick>
240078a8:	1b40      	subs	r0, r0, r5
240078aa:	42b8      	cmp	r0, r7
240078ac:	f63f aebc 	bhi.w	24007628 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
240078b0:	6f33      	ldr	r3, [r6, #112]	; 0x70
240078b2:	0798      	lsls	r0, r3, #30
240078b4:	d4f6      	bmi.n	240078a4 <HAL_RCC_OscConfig+0x580>
240078b6:	e5da      	b.n	2400746e <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240078b8:	68eb      	ldr	r3, [r5, #12]
240078ba:	6a22      	ldr	r2, [r4, #32]
240078bc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
240078c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
240078c4:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240078c6:	6823      	ldr	r3, [r4, #0]
240078c8:	e59c      	b.n	24007404 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
240078ca:	4a0e      	ldr	r2, [pc, #56]	; (24007904 <HAL_RCC_OscConfig+0x5e0>)
240078cc:	6f13      	ldr	r3, [r2, #112]	; 0x70
240078ce:	f043 0301 	orr.w	r3, r3, #1
240078d2:	6713      	str	r3, [r2, #112]	; 0x70
240078d4:	e694      	b.n	24007600 <HAL_RCC_OscConfig+0x2dc>
240078d6:	2b05      	cmp	r3, #5
240078d8:	4b0a      	ldr	r3, [pc, #40]	; (24007904 <HAL_RCC_OscConfig+0x5e0>)
240078da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240078dc:	f47f ae89 	bne.w	240075f2 <HAL_RCC_OscConfig+0x2ce>
240078e0:	f042 0204 	orr.w	r2, r2, #4
240078e4:	671a      	str	r2, [r3, #112]	; 0x70
240078e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
240078e8:	f042 0201 	orr.w	r2, r2, #1
240078ec:	671a      	str	r2, [r3, #112]	; 0x70
240078ee:	e687      	b.n	24007600 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240078f0:	4a04      	ldr	r2, [pc, #16]	; (24007904 <HAL_RCC_OscConfig+0x5e0>)
240078f2:	6853      	ldr	r3, [r2, #4]
240078f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
240078f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
240078fc:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240078fe:	6823      	ldr	r3, [r4, #0]
24007900:	e580      	b.n	24007404 <HAL_RCC_OscConfig+0xe0>
24007902:	bf00      	nop
24007904:	58024400 	.word	0x58024400

24007908 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007908:	4a48      	ldr	r2, [pc, #288]	; (24007a2c <HAL_RCC_GetSysClockFreq+0x124>)
2400790a:	6913      	ldr	r3, [r2, #16]
2400790c:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007910:	2b10      	cmp	r3, #16
24007912:	d004      	beq.n	2400791e <HAL_RCC_GetSysClockFreq+0x16>
24007914:	2b18      	cmp	r3, #24
24007916:	d00d      	beq.n	24007934 <HAL_RCC_GetSysClockFreq+0x2c>
24007918:	b11b      	cbz	r3, 24007922 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
2400791a:	4845      	ldr	r0, [pc, #276]	; (24007a30 <HAL_RCC_GetSysClockFreq+0x128>)
2400791c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400791e:	4845      	ldr	r0, [pc, #276]	; (24007a34 <HAL_RCC_GetSysClockFreq+0x12c>)
24007920:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007922:	6813      	ldr	r3, [r2, #0]
24007924:	0699      	lsls	r1, r3, #26
24007926:	d54a      	bpl.n	240079be <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007928:	6813      	ldr	r3, [r2, #0]
2400792a:	4843      	ldr	r0, [pc, #268]	; (24007a38 <HAL_RCC_GetSysClockFreq+0x130>)
2400792c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24007930:	40d8      	lsrs	r0, r3
24007932:	4770      	bx	lr
{
24007934:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007936:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24007938:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
2400793a:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
2400793c:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007940:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24007942:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
24007946:	d038      	beq.n	240079ba <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007948:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
2400794c:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007950:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007954:	fb05 f101 	mul.w	r1, r5, r1
24007958:	2b01      	cmp	r3, #1
2400795a:	ee07 1a90 	vmov	s15, r1
2400795e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
24007962:	d002      	beq.n	2400796a <HAL_RCC_GetSysClockFreq+0x62>
24007964:	2b02      	cmp	r3, #2
24007966:	d02c      	beq.n	240079c2 <HAL_RCC_GetSysClockFreq+0xba>
24007968:	b393      	cbz	r3, 240079d0 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400796a:	ee07 0a90 	vmov	s15, r0
2400796e:	ed9f 5a33 	vldr	s10, [pc, #204]	; 24007a3c <HAL_RCC_GetSysClockFreq+0x134>
24007972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007976:	6b13      	ldr	r3, [r2, #48]	; 0x30
24007978:	eec5 6a27 	vdiv.f32	s13, s10, s15
2400797c:	ed9f 6a30 	vldr	s12, [pc, #192]	; 24007a40 <HAL_RCC_GetSysClockFreq+0x138>
24007980:	f3c3 0308 	ubfx	r3, r3, #0, #9
24007984:	ee07 3a90 	vmov	s15, r3
24007988:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2400798c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007990:	ee77 7aa5 	vadd.f32	s15, s15, s11
24007994:	eee7 7a06 	vfma.f32	s15, s14, s12
24007998:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
2400799c:	4b23      	ldr	r3, [pc, #140]	; (24007a2c <HAL_RCC_GetSysClockFreq+0x124>)
2400799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240079a0:	f3c3 2346 	ubfx	r3, r3, #9, #7
240079a4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
240079a6:	ee07 3a90 	vmov	s15, r3
240079aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
240079ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
240079b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240079b6:	ee17 0a90 	vmov	r0, s15
}
240079ba:	bc30      	pop	{r4, r5}
240079bc:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
240079be:	481e      	ldr	r0, [pc, #120]	; (24007a38 <HAL_RCC_GetSysClockFreq+0x130>)
}
240079c0:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240079c2:	ee07 0a90 	vmov	s15, r0
240079c6:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 24007a44 <HAL_RCC_GetSysClockFreq+0x13c>
240079ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240079ce:	e7d2      	b.n	24007976 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240079d0:	6813      	ldr	r3, [r2, #0]
240079d2:	069b      	lsls	r3, r3, #26
240079d4:	d522      	bpl.n	24007a1c <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240079d6:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240079d8:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240079dc:	4916      	ldr	r1, [pc, #88]	; (24007a38 <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240079de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240079e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240079e4:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240079e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240079ec:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24007a40 <HAL_RCC_GetSysClockFreq+0x138>
240079f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240079f4:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240079f6:	ee06 3a10 	vmov	s12, r3
240079fa:	ee05 1a90 	vmov	s11, r1
240079fe:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24007a02:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24007a06:	ee36 6a26 	vadd.f32	s12, s12, s13
24007a0a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24007a0e:	eef0 7a46 	vmov.f32	s15, s12
24007a12:	eee7 7a05 	vfma.f32	s15, s14, s10
24007a16:	ee66 6aa7 	vmul.f32	s13, s13, s15
24007a1a:	e7bf      	b.n	2400799c <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007a1c:	ee07 0a90 	vmov	s15, r0
24007a20:	ed9f 5a09 	vldr	s10, [pc, #36]	; 24007a48 <HAL_RCC_GetSysClockFreq+0x140>
24007a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007a28:	e7a5      	b.n	24007976 <HAL_RCC_GetSysClockFreq+0x6e>
24007a2a:	bf00      	nop
24007a2c:	58024400 	.word	0x58024400
24007a30:	003d0900 	.word	0x003d0900
24007a34:	00f42400 	.word	0x00f42400
24007a38:	03d09000 	.word	0x03d09000
24007a3c:	4a742400 	.word	0x4a742400
24007a40:	39000000 	.word	0x39000000
24007a44:	4b742400 	.word	0x4b742400
24007a48:	4c742400 	.word	0x4c742400

24007a4c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
24007a4c:	2800      	cmp	r0, #0
24007a4e:	f000 811a 	beq.w	24007c86 <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24007a52:	4a92      	ldr	r2, [pc, #584]	; (24007c9c <HAL_RCC_ClockConfig+0x250>)
{
24007a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24007a58:	6813      	ldr	r3, [r2, #0]
24007a5a:	4604      	mov	r4, r0
24007a5c:	460d      	mov	r5, r1
24007a5e:	f003 030f 	and.w	r3, r3, #15
24007a62:	428b      	cmp	r3, r1
24007a64:	d20c      	bcs.n	24007a80 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
24007a66:	6813      	ldr	r3, [r2, #0]
24007a68:	f023 030f 	bic.w	r3, r3, #15
24007a6c:	430b      	orrs	r3, r1
24007a6e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24007a70:	6813      	ldr	r3, [r2, #0]
24007a72:	f003 030f 	and.w	r3, r3, #15
24007a76:	428b      	cmp	r3, r1
24007a78:	d002      	beq.n	24007a80 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
24007a7a:	2001      	movs	r0, #1
}
24007a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24007a80:	6823      	ldr	r3, [r4, #0]
24007a82:	075f      	lsls	r7, r3, #29
24007a84:	d50c      	bpl.n	24007aa0 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24007a86:	4986      	ldr	r1, [pc, #536]	; (24007ca0 <HAL_RCC_ClockConfig+0x254>)
24007a88:	6920      	ldr	r0, [r4, #16]
24007a8a:	698a      	ldr	r2, [r1, #24]
24007a8c:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007a90:	4290      	cmp	r0, r2
24007a92:	d905      	bls.n	24007aa0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24007a94:	698b      	ldr	r3, [r1, #24]
24007a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007a9a:	4303      	orrs	r3, r0
24007a9c:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24007a9e:	6823      	ldr	r3, [r4, #0]
24007aa0:	071e      	lsls	r6, r3, #28
24007aa2:	d50c      	bpl.n	24007abe <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24007aa4:	497e      	ldr	r1, [pc, #504]	; (24007ca0 <HAL_RCC_ClockConfig+0x254>)
24007aa6:	6960      	ldr	r0, [r4, #20]
24007aa8:	69ca      	ldr	r2, [r1, #28]
24007aaa:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007aae:	4290      	cmp	r0, r2
24007ab0:	d905      	bls.n	24007abe <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24007ab2:	69cb      	ldr	r3, [r1, #28]
24007ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007ab8:	4303      	orrs	r3, r0
24007aba:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24007abc:	6823      	ldr	r3, [r4, #0]
24007abe:	06d8      	lsls	r0, r3, #27
24007ac0:	d50c      	bpl.n	24007adc <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24007ac2:	4977      	ldr	r1, [pc, #476]	; (24007ca0 <HAL_RCC_ClockConfig+0x254>)
24007ac4:	69a0      	ldr	r0, [r4, #24]
24007ac6:	69ca      	ldr	r2, [r1, #28]
24007ac8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24007acc:	4290      	cmp	r0, r2
24007ace:	d905      	bls.n	24007adc <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24007ad0:	69cb      	ldr	r3, [r1, #28]
24007ad2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
24007ad6:	4303      	orrs	r3, r0
24007ad8:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24007ada:	6823      	ldr	r3, [r4, #0]
24007adc:	0699      	lsls	r1, r3, #26
24007ade:	d50c      	bpl.n	24007afa <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24007ae0:	496f      	ldr	r1, [pc, #444]	; (24007ca0 <HAL_RCC_ClockConfig+0x254>)
24007ae2:	69e0      	ldr	r0, [r4, #28]
24007ae4:	6a0a      	ldr	r2, [r1, #32]
24007ae6:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007aea:	4290      	cmp	r0, r2
24007aec:	d905      	bls.n	24007afa <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24007aee:	6a0b      	ldr	r3, [r1, #32]
24007af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007af4:	4303      	orrs	r3, r0
24007af6:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007af8:	6823      	ldr	r3, [r4, #0]
24007afa:	079a      	lsls	r2, r3, #30
24007afc:	f140 8083 	bpl.w	24007c06 <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007b00:	4867      	ldr	r0, [pc, #412]	; (24007ca0 <HAL_RCC_ClockConfig+0x254>)
24007b02:	68e1      	ldr	r1, [r4, #12]
24007b04:	6982      	ldr	r2, [r0, #24]
24007b06:	f002 020f 	and.w	r2, r2, #15
24007b0a:	4291      	cmp	r1, r2
24007b0c:	f240 80a9 	bls.w	24007c62 <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24007b10:	6983      	ldr	r3, [r0, #24]
24007b12:	f023 030f 	bic.w	r3, r3, #15
24007b16:	430b      	orrs	r3, r1
24007b18:	6183      	str	r3, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24007b1a:	6823      	ldr	r3, [r4, #0]
24007b1c:	07df      	lsls	r7, r3, #31
24007b1e:	d474      	bmi.n	24007c0a <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007b20:	079f      	lsls	r7, r3, #30
24007b22:	d507      	bpl.n	24007b34 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007b24:	4a5e      	ldr	r2, [pc, #376]	; (24007ca0 <HAL_RCC_ClockConfig+0x254>)
24007b26:	68e1      	ldr	r1, [r4, #12]
24007b28:	6993      	ldr	r3, [r2, #24]
24007b2a:	f003 030f 	and.w	r3, r3, #15
24007b2e:	428b      	cmp	r3, r1
24007b30:	f200 80a0 	bhi.w	24007c74 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
24007b34:	4a59      	ldr	r2, [pc, #356]	; (24007c9c <HAL_RCC_ClockConfig+0x250>)
24007b36:	6813      	ldr	r3, [r2, #0]
24007b38:	f003 030f 	and.w	r3, r3, #15
24007b3c:	42ab      	cmp	r3, r5
24007b3e:	d909      	bls.n	24007b54 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
24007b40:	6813      	ldr	r3, [r2, #0]
24007b42:	f023 030f 	bic.w	r3, r3, #15
24007b46:	432b      	orrs	r3, r5
24007b48:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24007b4a:	6813      	ldr	r3, [r2, #0]
24007b4c:	f003 030f 	and.w	r3, r3, #15
24007b50:	42ab      	cmp	r3, r5
24007b52:	d192      	bne.n	24007a7a <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24007b54:	6823      	ldr	r3, [r4, #0]
24007b56:	075e      	lsls	r6, r3, #29
24007b58:	d50c      	bpl.n	24007b74 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24007b5a:	4951      	ldr	r1, [pc, #324]	; (24007ca0 <HAL_RCC_ClockConfig+0x254>)
24007b5c:	6920      	ldr	r0, [r4, #16]
24007b5e:	698a      	ldr	r2, [r1, #24]
24007b60:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007b64:	4290      	cmp	r0, r2
24007b66:	d205      	bcs.n	24007b74 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24007b68:	698b      	ldr	r3, [r1, #24]
24007b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007b6e:	4303      	orrs	r3, r0
24007b70:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24007b72:	6823      	ldr	r3, [r4, #0]
24007b74:	071d      	lsls	r5, r3, #28
24007b76:	d50c      	bpl.n	24007b92 <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24007b78:	4949      	ldr	r1, [pc, #292]	; (24007ca0 <HAL_RCC_ClockConfig+0x254>)
24007b7a:	6960      	ldr	r0, [r4, #20]
24007b7c:	69ca      	ldr	r2, [r1, #28]
24007b7e:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007b82:	4290      	cmp	r0, r2
24007b84:	d205      	bcs.n	24007b92 <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24007b86:	69cb      	ldr	r3, [r1, #28]
24007b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007b8c:	4303      	orrs	r3, r0
24007b8e:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24007b90:	6823      	ldr	r3, [r4, #0]
24007b92:	06d8      	lsls	r0, r3, #27
24007b94:	d50c      	bpl.n	24007bb0 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24007b96:	4942      	ldr	r1, [pc, #264]	; (24007ca0 <HAL_RCC_ClockConfig+0x254>)
24007b98:	69a0      	ldr	r0, [r4, #24]
24007b9a:	69ca      	ldr	r2, [r1, #28]
24007b9c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24007ba0:	4290      	cmp	r0, r2
24007ba2:	d205      	bcs.n	24007bb0 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24007ba4:	69cb      	ldr	r3, [r1, #28]
24007ba6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
24007baa:	4303      	orrs	r3, r0
24007bac:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24007bae:	6823      	ldr	r3, [r4, #0]
24007bb0:	0699      	lsls	r1, r3, #26
24007bb2:	d50b      	bpl.n	24007bcc <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24007bb4:	4a3a      	ldr	r2, [pc, #232]	; (24007ca0 <HAL_RCC_ClockConfig+0x254>)
24007bb6:	69e1      	ldr	r1, [r4, #28]
24007bb8:	6a13      	ldr	r3, [r2, #32]
24007bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
24007bbe:	4299      	cmp	r1, r3
24007bc0:	d204      	bcs.n	24007bcc <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24007bc2:	6a13      	ldr	r3, [r2, #32]
24007bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007bc8:	430b      	orrs	r3, r1
24007bca:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007bcc:	f7ff fe9c 	bl	24007908 <HAL_RCC_GetSysClockFreq>
24007bd0:	4a33      	ldr	r2, [pc, #204]	; (24007ca0 <HAL_RCC_ClockConfig+0x254>)
24007bd2:	4603      	mov	r3, r0
24007bd4:	4833      	ldr	r0, [pc, #204]	; (24007ca4 <HAL_RCC_ClockConfig+0x258>)
24007bd6:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007bd8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007bda:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
24007bde:	4d32      	ldr	r5, [pc, #200]	; (24007ca8 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007be0:	f002 020f 	and.w	r2, r2, #15
24007be4:	4c31      	ldr	r4, [pc, #196]	; (24007cac <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007be6:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007be8:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007bea:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
24007bee:	4830      	ldr	r0, [pc, #192]	; (24007cb0 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007bf0:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007bf4:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
24007bf6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
24007bf8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007bfa:	40d3      	lsrs	r3, r2
24007bfc:	6023      	str	r3, [r4, #0]
}
24007bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
24007c02:	f7fc bd83 	b.w	2400470c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24007c06:	07db      	lsls	r3, r3, #31
24007c08:	d594      	bpl.n	24007b34 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
24007c0a:	4a25      	ldr	r2, [pc, #148]	; (24007ca0 <HAL_RCC_ClockConfig+0x254>)
24007c0c:	68a1      	ldr	r1, [r4, #8]
24007c0e:	6993      	ldr	r3, [r2, #24]
24007c10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
24007c14:	430b      	orrs	r3, r1
24007c16:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24007c18:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007c1a:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24007c1c:	2902      	cmp	r1, #2
24007c1e:	d034      	beq.n	24007c8a <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
24007c20:	2903      	cmp	r1, #3
24007c22:	d02d      	beq.n	24007c80 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
24007c24:	2901      	cmp	r1, #1
24007c26:	d035      	beq.n	24007c94 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007c28:	075b      	lsls	r3, r3, #29
24007c2a:	f57f af26 	bpl.w	24007a7a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24007c2e:	4e1c      	ldr	r6, [pc, #112]	; (24007ca0 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24007c30:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24007c34:	6933      	ldr	r3, [r6, #16]
24007c36:	f023 0307 	bic.w	r3, r3, #7
24007c3a:	430b      	orrs	r3, r1
24007c3c:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
24007c3e:	f7fc fdc7 	bl	240047d0 <HAL_GetTick>
24007c42:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24007c44:	e004      	b.n	24007c50 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24007c46:	f7fc fdc3 	bl	240047d0 <HAL_GetTick>
24007c4a:	1bc0      	subs	r0, r0, r7
24007c4c:	4540      	cmp	r0, r8
24007c4e:	d81f      	bhi.n	24007c90 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24007c50:	6933      	ldr	r3, [r6, #16]
24007c52:	6862      	ldr	r2, [r4, #4]
24007c54:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007c58:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
24007c5c:	d1f3      	bne.n	24007c46 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007c5e:	6823      	ldr	r3, [r4, #0]
24007c60:	e75e      	b.n	24007b20 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24007c62:	07da      	lsls	r2, r3, #31
24007c64:	d4d1      	bmi.n	24007c0a <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007c66:	4a0e      	ldr	r2, [pc, #56]	; (24007ca0 <HAL_RCC_ClockConfig+0x254>)
24007c68:	6993      	ldr	r3, [r2, #24]
24007c6a:	f003 030f 	and.w	r3, r3, #15
24007c6e:	428b      	cmp	r3, r1
24007c70:	f67f af60 	bls.w	24007b34 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24007c74:	6993      	ldr	r3, [r2, #24]
24007c76:	f023 030f 	bic.w	r3, r3, #15
24007c7a:	430b      	orrs	r3, r1
24007c7c:	6193      	str	r3, [r2, #24]
24007c7e:	e759      	b.n	24007b34 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007c80:	0198      	lsls	r0, r3, #6
24007c82:	d4d4      	bmi.n	24007c2e <HAL_RCC_ClockConfig+0x1e2>
24007c84:	e6f9      	b.n	24007a7a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
24007c86:	2001      	movs	r0, #1
}
24007c88:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007c8a:	039e      	lsls	r6, r3, #14
24007c8c:	d4cf      	bmi.n	24007c2e <HAL_RCC_ClockConfig+0x1e2>
24007c8e:	e6f4      	b.n	24007a7a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
24007c90:	2003      	movs	r0, #3
24007c92:	e6f3      	b.n	24007a7c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24007c94:	05da      	lsls	r2, r3, #23
24007c96:	d4ca      	bmi.n	24007c2e <HAL_RCC_ClockConfig+0x1e2>
24007c98:	e6ef      	b.n	24007a7a <HAL_RCC_ClockConfig+0x2e>
24007c9a:	bf00      	nop
24007c9c:	52002000 	.word	0x52002000
24007ca0:	58024400 	.word	0x58024400
24007ca4:	240174c0 	.word	0x240174c0
24007ca8:	20000748 	.word	0x20000748
24007cac:	2000074c 	.word	0x2000074c
24007cb0:	20000754 	.word	0x20000754

24007cb4 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007cb4:	4a18      	ldr	r2, [pc, #96]	; (24007d18 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
24007cb6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007cb8:	6913      	ldr	r3, [r2, #16]
24007cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007cbe:	2b10      	cmp	r3, #16
24007cc0:	d01a      	beq.n	24007cf8 <HAL_RCC_GetHCLKFreq+0x44>
24007cc2:	2b18      	cmp	r3, #24
24007cc4:	d023      	beq.n	24007d0e <HAL_RCC_GetHCLKFreq+0x5a>
24007cc6:	b1cb      	cbz	r3, 24007cfc <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
24007cc8:	4814      	ldr	r0, [pc, #80]	; (24007d1c <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007cca:	4b13      	ldr	r3, [pc, #76]	; (24007d18 <HAL_RCC_GetHCLKFreq+0x64>)
24007ccc:	4914      	ldr	r1, [pc, #80]	; (24007d20 <HAL_RCC_GetHCLKFreq+0x6c>)
24007cce:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007cd0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007cd2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007cd6:	4c13      	ldr	r4, [pc, #76]	; (24007d24 <HAL_RCC_GetHCLKFreq+0x70>)
24007cd8:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24007cdc:	4d12      	ldr	r5, [pc, #72]	; (24007d28 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007cde:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007ce0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007ce2:	f002 021f 	and.w	r2, r2, #31
24007ce6:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007cea:	f003 001f 	and.w	r0, r3, #31
24007cee:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
24007cf2:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007cf4:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
24007cf6:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007cf8:	480c      	ldr	r0, [pc, #48]	; (24007d2c <HAL_RCC_GetHCLKFreq+0x78>)
24007cfa:	e7e6      	b.n	24007cca <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007cfc:	6813      	ldr	r3, [r2, #0]
24007cfe:	069b      	lsls	r3, r3, #26
24007d00:	d508      	bpl.n	24007d14 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007d02:	6813      	ldr	r3, [r2, #0]
24007d04:	480a      	ldr	r0, [pc, #40]	; (24007d30 <HAL_RCC_GetHCLKFreq+0x7c>)
24007d06:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24007d0a:	40d8      	lsrs	r0, r3
24007d0c:	e7dd      	b.n	24007cca <HAL_RCC_GetHCLKFreq+0x16>
24007d0e:	f7ff fa83 	bl	24007218 <HAL_RCC_GetSysClockFreq.part.0>
24007d12:	e7da      	b.n	24007cca <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
24007d14:	4806      	ldr	r0, [pc, #24]	; (24007d30 <HAL_RCC_GetHCLKFreq+0x7c>)
24007d16:	e7d8      	b.n	24007cca <HAL_RCC_GetHCLKFreq+0x16>
24007d18:	58024400 	.word	0x58024400
24007d1c:	003d0900 	.word	0x003d0900
24007d20:	240174c0 	.word	0x240174c0
24007d24:	2000074c 	.word	0x2000074c
24007d28:	20000748 	.word	0x20000748
24007d2c:	00f42400 	.word	0x00f42400
24007d30:	03d09000 	.word	0x03d09000

24007d34 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007d34:	4a1c      	ldr	r2, [pc, #112]	; (24007da8 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
24007d36:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007d38:	6913      	ldr	r3, [r2, #16]
24007d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007d3e:	2b10      	cmp	r3, #16
24007d40:	d021      	beq.n	24007d86 <HAL_RCC_GetPCLK1Freq+0x52>
24007d42:	2b18      	cmp	r3, #24
24007d44:	d02a      	beq.n	24007d9c <HAL_RCC_GetPCLK1Freq+0x68>
24007d46:	b303      	cbz	r3, 24007d8a <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
24007d48:	4818      	ldr	r0, [pc, #96]	; (24007dac <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007d4a:	4a17      	ldr	r2, [pc, #92]	; (24007da8 <HAL_RCC_GetPCLK1Freq+0x74>)
24007d4c:	4918      	ldr	r1, [pc, #96]	; (24007db0 <HAL_RCC_GetPCLK1Freq+0x7c>)
24007d4e:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007d50:	4c18      	ldr	r4, [pc, #96]	; (24007db4 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007d52:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
24007d56:	4d18      	ldr	r5, [pc, #96]	; (24007db8 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24007d58:	5ccb      	ldrb	r3, [r1, r3]
24007d5a:	f003 031f 	and.w	r3, r3, #31
24007d5e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007d60:	6993      	ldr	r3, [r2, #24]
24007d62:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
24007d66:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007d68:	5ccb      	ldrb	r3, [r1, r3]
24007d6a:	f003 031f 	and.w	r3, r3, #31
24007d6e:	fa20 f303 	lsr.w	r3, r0, r3
24007d72:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
24007d74:	69d2      	ldr	r2, [r2, #28]
24007d76:	f3c2 1202 	ubfx	r2, r2, #4, #3
24007d7a:	5c88      	ldrb	r0, [r1, r2]
24007d7c:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
24007d80:	fa23 f000 	lsr.w	r0, r3, r0
24007d84:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007d86:	480d      	ldr	r0, [pc, #52]	; (24007dbc <HAL_RCC_GetPCLK1Freq+0x88>)
24007d88:	e7df      	b.n	24007d4a <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007d8a:	6813      	ldr	r3, [r2, #0]
24007d8c:	069b      	lsls	r3, r3, #26
24007d8e:	d508      	bpl.n	24007da2 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007d90:	6813      	ldr	r3, [r2, #0]
24007d92:	480b      	ldr	r0, [pc, #44]	; (24007dc0 <HAL_RCC_GetPCLK1Freq+0x8c>)
24007d94:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24007d98:	40d8      	lsrs	r0, r3
24007d9a:	e7d6      	b.n	24007d4a <HAL_RCC_GetPCLK1Freq+0x16>
24007d9c:	f7ff fa3c 	bl	24007218 <HAL_RCC_GetSysClockFreq.part.0>
24007da0:	e7d3      	b.n	24007d4a <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
24007da2:	4807      	ldr	r0, [pc, #28]	; (24007dc0 <HAL_RCC_GetPCLK1Freq+0x8c>)
24007da4:	e7d1      	b.n	24007d4a <HAL_RCC_GetPCLK1Freq+0x16>
24007da6:	bf00      	nop
24007da8:	58024400 	.word	0x58024400
24007dac:	003d0900 	.word	0x003d0900
24007db0:	240174c0 	.word	0x240174c0
24007db4:	2000074c 	.word	0x2000074c
24007db8:	20000748 	.word	0x20000748
24007dbc:	00f42400 	.word	0x00f42400
24007dc0:	03d09000 	.word	0x03d09000

24007dc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
24007dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24007dc6:	4c3a      	ldr	r4, [pc, #232]	; (24007eb0 <RCCEx_PLL2_Config+0xec>)
24007dc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24007dca:	f003 0303 	and.w	r3, r3, #3
24007dce:	2b03      	cmp	r3, #3
24007dd0:	d067      	beq.n	24007ea2 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
24007dd2:	6823      	ldr	r3, [r4, #0]
24007dd4:	4606      	mov	r6, r0
24007dd6:	460f      	mov	r7, r1
24007dd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24007ddc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24007dde:	f7fc fcf7 	bl	240047d0 <HAL_GetTick>
24007de2:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24007de4:	e004      	b.n	24007df0 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24007de6:	f7fc fcf3 	bl	240047d0 <HAL_GetTick>
24007dea:	1b43      	subs	r3, r0, r5
24007dec:	2b02      	cmp	r3, #2
24007dee:	d856      	bhi.n	24007e9e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
24007df0:	6823      	ldr	r3, [r4, #0]
24007df2:	011a      	lsls	r2, r3, #4
24007df4:	d4f7      	bmi.n	24007de6 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
24007df6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24007df8:	6832      	ldr	r2, [r6, #0]
24007dfa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24007dfe:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
24007e02:	62a3      	str	r3, [r4, #40]	; 0x28
24007e04:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
24007e08:	3b01      	subs	r3, #1
24007e0a:	3a01      	subs	r2, #1
24007e0c:	025b      	lsls	r3, r3, #9
24007e0e:	0412      	lsls	r2, r2, #16
24007e10:	b29b      	uxth	r3, r3
24007e12:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24007e16:	4313      	orrs	r3, r2
24007e18:	6872      	ldr	r2, [r6, #4]
24007e1a:	3a01      	subs	r2, #1
24007e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
24007e20:	4313      	orrs	r3, r2
24007e22:	6932      	ldr	r2, [r6, #16]
24007e24:	3a01      	subs	r2, #1
24007e26:	0612      	lsls	r2, r2, #24
24007e28:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24007e2c:	4313      	orrs	r3, r2
24007e2e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
24007e30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007e32:	6972      	ldr	r2, [r6, #20]
24007e34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
24007e38:	4313      	orrs	r3, r2
24007e3a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24007e3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24007e3e:	69b3      	ldr	r3, [r6, #24]
24007e40:	f022 0220 	bic.w	r2, r2, #32
24007e44:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24007e46:	4b1b      	ldr	r3, [pc, #108]	; (24007eb4 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24007e48:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
24007e4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24007e4c:	f022 0210 	bic.w	r2, r2, #16
24007e50:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24007e52:	6be1      	ldr	r1, [r4, #60]	; 0x3c
24007e54:	69f2      	ldr	r2, [r6, #28]
24007e56:	400b      	ands	r3, r1
24007e58:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24007e5c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
24007e5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007e60:	f043 0310 	orr.w	r3, r3, #16
24007e64:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24007e66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24007e68:	b1ef      	cbz	r7, 24007ea6 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
24007e6a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
24007e6c:	bf0c      	ite	eq
24007e6e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24007e72:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
24007e76:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
24007e78:	4c0d      	ldr	r4, [pc, #52]	; (24007eb0 <RCCEx_PLL2_Config+0xec>)
24007e7a:	6823      	ldr	r3, [r4, #0]
24007e7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
24007e80:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24007e82:	f7fc fca5 	bl	240047d0 <HAL_GetTick>
24007e86:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24007e88:	e004      	b.n	24007e94 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
24007e8a:	f7fc fca1 	bl	240047d0 <HAL_GetTick>
24007e8e:	1b40      	subs	r0, r0, r5
24007e90:	2802      	cmp	r0, #2
24007e92:	d804      	bhi.n	24007e9e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24007e94:	6823      	ldr	r3, [r4, #0]
24007e96:	011b      	lsls	r3, r3, #4
24007e98:	d5f7      	bpl.n	24007e8a <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
24007e9a:	2000      	movs	r0, #0
}
24007e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
24007e9e:	2003      	movs	r0, #3
}
24007ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
24007ea2:	2001      	movs	r0, #1
}
24007ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
24007ea6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
24007eaa:	62e3      	str	r3, [r4, #44]	; 0x2c
24007eac:	e7e4      	b.n	24007e78 <RCCEx_PLL2_Config+0xb4>
24007eae:	bf00      	nop
24007eb0:	58024400 	.word	0x58024400
24007eb4:	ffff0007 	.word	0xffff0007

24007eb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
24007eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
24007eba:	4c3a      	ldr	r4, [pc, #232]	; (24007fa4 <RCCEx_PLL3_Config+0xec>)
24007ebc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24007ebe:	f003 0303 	and.w	r3, r3, #3
24007ec2:	2b03      	cmp	r3, #3
24007ec4:	d067      	beq.n	24007f96 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
24007ec6:	6823      	ldr	r3, [r4, #0]
24007ec8:	4606      	mov	r6, r0
24007eca:	460f      	mov	r7, r1
24007ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24007ed0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24007ed2:	f7fc fc7d 	bl	240047d0 <HAL_GetTick>
24007ed6:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24007ed8:	e004      	b.n	24007ee4 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24007eda:	f7fc fc79 	bl	240047d0 <HAL_GetTick>
24007ede:	1b43      	subs	r3, r0, r5
24007ee0:	2b02      	cmp	r3, #2
24007ee2:	d856      	bhi.n	24007f92 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
24007ee4:	6823      	ldr	r3, [r4, #0]
24007ee6:	009a      	lsls	r2, r3, #2
24007ee8:	d4f7      	bmi.n	24007eda <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
24007eea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24007eec:	6832      	ldr	r2, [r6, #0]
24007eee:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
24007ef2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
24007ef6:	62a3      	str	r3, [r4, #40]	; 0x28
24007ef8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
24007efc:	3b01      	subs	r3, #1
24007efe:	3a01      	subs	r2, #1
24007f00:	025b      	lsls	r3, r3, #9
24007f02:	0412      	lsls	r2, r2, #16
24007f04:	b29b      	uxth	r3, r3
24007f06:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24007f0a:	4313      	orrs	r3, r2
24007f0c:	6872      	ldr	r2, [r6, #4]
24007f0e:	3a01      	subs	r2, #1
24007f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
24007f14:	4313      	orrs	r3, r2
24007f16:	6932      	ldr	r2, [r6, #16]
24007f18:	3a01      	subs	r2, #1
24007f1a:	0612      	lsls	r2, r2, #24
24007f1c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24007f20:	4313      	orrs	r3, r2
24007f22:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
24007f24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007f26:	6972      	ldr	r2, [r6, #20]
24007f28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
24007f2c:	4313      	orrs	r3, r2
24007f2e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24007f30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24007f32:	69b3      	ldr	r3, [r6, #24]
24007f34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
24007f38:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24007f3a:	4b1b      	ldr	r3, [pc, #108]	; (24007fa8 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24007f3c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
24007f3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24007f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24007f44:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
24007f46:	6c61      	ldr	r1, [r4, #68]	; 0x44
24007f48:	69f2      	ldr	r2, [r6, #28]
24007f4a:	400b      	ands	r3, r1
24007f4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24007f50:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
24007f52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24007f58:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24007f5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24007f5c:	b1ef      	cbz	r7, 24007f9a <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
24007f5e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
24007f60:	bf0c      	ite	eq
24007f62:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
24007f66:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
24007f6a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
24007f6c:	4c0d      	ldr	r4, [pc, #52]	; (24007fa4 <RCCEx_PLL3_Config+0xec>)
24007f6e:	6823      	ldr	r3, [r4, #0]
24007f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24007f74:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24007f76:	f7fc fc2b 	bl	240047d0 <HAL_GetTick>
24007f7a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24007f7c:	e004      	b.n	24007f88 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24007f7e:	f7fc fc27 	bl	240047d0 <HAL_GetTick>
24007f82:	1b40      	subs	r0, r0, r5
24007f84:	2802      	cmp	r0, #2
24007f86:	d804      	bhi.n	24007f92 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24007f88:	6823      	ldr	r3, [r4, #0]
24007f8a:	009b      	lsls	r3, r3, #2
24007f8c:	d5f7      	bpl.n	24007f7e <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
24007f8e:	2000      	movs	r0, #0
}
24007f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
24007f92:	2003      	movs	r0, #3
}
24007f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
24007f96:	2001      	movs	r0, #1
}
24007f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
24007f9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24007f9e:	62e3      	str	r3, [r4, #44]	; 0x2c
24007fa0:	e7e4      	b.n	24007f6c <RCCEx_PLL3_Config+0xb4>
24007fa2:	bf00      	nop
24007fa4:	58024400 	.word	0x58024400
24007fa8:	ffff0007 	.word	0xffff0007

24007fac <HAL_RCCEx_PeriphCLKConfig>:
{
24007fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24007fb0:	e9d0 3200 	ldrd	r3, r2, [r0]
{
24007fb4:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24007fb6:	011d      	lsls	r5, r3, #4
24007fb8:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
24007fbc:	d521      	bpl.n	24008002 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
24007fbe:	6e81      	ldr	r1, [r0, #104]	; 0x68
24007fc0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24007fc4:	f000 8577 	beq.w	24008ab6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
24007fc8:	d80e      	bhi.n	24007fe8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
24007fca:	2900      	cmp	r1, #0
24007fcc:	f000 85d2 	beq.w	24008b74 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
24007fd0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24007fd4:	f040 85cb 	bne.w	24008b6e <HAL_RCCEx_PeriphCLKConfig+0xbc2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24007fd8:	2102      	movs	r1, #2
24007fda:	3008      	adds	r0, #8
24007fdc:	f7ff fef2 	bl	24007dc4 <RCCEx_PLL2_Config>
24007fe0:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24007fe2:	b966      	cbnz	r6, 24007ffe <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24007fe4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
24007fe6:	e003      	b.n	24007ff0 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
24007fe8:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
24007fec:	f040 85bf 	bne.w	24008b6e <HAL_RCCEx_PeriphCLKConfig+0xbc2>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24007ff0:	4aa3      	ldr	r2, [pc, #652]	; (24008280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24007ff2:	2600      	movs	r6, #0
24007ff4:	6d13      	ldr	r3, [r2, #80]	; 0x50
24007ff6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
24007ffa:	430b      	orrs	r3, r1
24007ffc:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
24007ffe:	e9d4 3200 	ldrd	r3, r2, [r4]
24008002:	05d8      	lsls	r0, r3, #23
24008004:	d50a      	bpl.n	2400801c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
24008006:	6da1      	ldr	r1, [r4, #88]	; 0x58
24008008:	2904      	cmp	r1, #4
2400800a:	d806      	bhi.n	2400801a <HAL_RCCEx_PeriphCLKConfig+0x6e>
2400800c:	e8df f011 	tbh	[pc, r1, lsl #1]
24008010:	0564055d 	.word	0x0564055d
24008014:	0310057b 	.word	0x0310057b
24008018:	0310      	.short	0x0310
2400801a:	2601      	movs	r6, #1
2400801c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
2400801e:	0599      	lsls	r1, r3, #22
24008020:	d517      	bpl.n	24008052 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
24008022:	6de1      	ldr	r1, [r4, #92]	; 0x5c
24008024:	2980      	cmp	r1, #128	; 0x80
24008026:	f000 8575 	beq.w	24008b14 <HAL_RCCEx_PeriphCLKConfig+0xb68>
2400802a:	f200 80e1 	bhi.w	240081f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
2400802e:	2900      	cmp	r1, #0
24008030:	f000 8446 	beq.w	240088c0 <HAL_RCCEx_PeriphCLKConfig+0x914>
24008034:	2940      	cmp	r1, #64	; 0x40
24008036:	f040 80e2 	bne.w	240081fe <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400803a:	2100      	movs	r1, #0
2400803c:	f104 0008 	add.w	r0, r4, #8
24008040:	f7ff fec0 	bl	24007dc4 <RCCEx_PLL2_Config>
24008044:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008046:	2d00      	cmp	r5, #0
24008048:	f000 83f6 	beq.w	24008838 <HAL_RCCEx_PeriphCLKConfig+0x88c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
2400804c:	462e      	mov	r6, r5
2400804e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008052:	055f      	lsls	r7, r3, #21
24008054:	d51a      	bpl.n	2400808c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
24008056:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
2400805a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
2400805e:	f000 8522 	beq.w	24008aa6 <HAL_RCCEx_PeriphCLKConfig+0xafa>
24008062:	f200 80cf 	bhi.w	24008204 <HAL_RCCEx_PeriphCLKConfig+0x258>
24008066:	2900      	cmp	r1, #0
24008068:	f000 8431 	beq.w	240088ce <HAL_RCCEx_PeriphCLKConfig+0x922>
2400806c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24008070:	f040 80d0 	bne.w	24008214 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008074:	2100      	movs	r1, #0
24008076:	f104 0008 	add.w	r0, r4, #8
2400807a:	f7ff fea3 	bl	24007dc4 <RCCEx_PLL2_Config>
2400807e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008080:	2d00      	cmp	r5, #0
24008082:	f000 83f8 	beq.w	24008876 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24008086:	462e      	mov	r6, r5
24008088:	e9d4 3200 	ldrd	r3, r2, [r4]
2400808c:	0518      	lsls	r0, r3, #20
2400808e:	d51a      	bpl.n	240080c6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
24008090:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24008094:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
24008098:	f000 852d 	beq.w	24008af6 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
2400809c:	f200 80bd 	bhi.w	2400821a <HAL_RCCEx_PeriphCLKConfig+0x26e>
240080a0:	2900      	cmp	r1, #0
240080a2:	f000 8406 	beq.w	240088b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
240080a6:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
240080aa:	f040 80be 	bne.w	2400822a <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240080ae:	2100      	movs	r1, #0
240080b0:	f104 0008 	add.w	r0, r4, #8
240080b4:	f7ff fe86 	bl	24007dc4 <RCCEx_PLL2_Config>
240080b8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240080ba:	2d00      	cmp	r5, #0
240080bc:	f000 83b1 	beq.w	24008822 <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
240080c0:	462e      	mov	r6, r5
240080c2:	e9d4 3200 	ldrd	r3, r2, [r4]
240080c6:	0199      	lsls	r1, r3, #6
240080c8:	d51a      	bpl.n	24008100 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
240080ca:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
240080cc:	2920      	cmp	r1, #32
240080ce:	f000 84b4 	beq.w	24008a3a <HAL_RCCEx_PeriphCLKConfig+0xa8e>
240080d2:	f200 80ad 	bhi.w	24008230 <HAL_RCCEx_PeriphCLKConfig+0x284>
240080d6:	b139      	cbz	r1, 240080e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
240080d8:	2910      	cmp	r1, #16
240080da:	f040 80ac 	bne.w	24008236 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240080de:	4a68      	ldr	r2, [pc, #416]	; (24008280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240080e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240080e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240080e6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240080e8:	2d00      	cmp	r5, #0
240080ea:	f040 8418 	bne.w	2400891e <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
240080ee:	4a64      	ldr	r2, [pc, #400]	; (24008280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240080f0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
240080f2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
240080f4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
240080f8:	430b      	orrs	r3, r1
240080fa:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
240080fc:	e9d4 3200 	ldrd	r3, r2, [r4]
24008100:	04df      	lsls	r7, r3, #19
24008102:	d519      	bpl.n	24008138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
24008104:	6e21      	ldr	r1, [r4, #96]	; 0x60
24008106:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
2400810a:	f000 84ec 	beq.w	24008ae6 <HAL_RCCEx_PeriphCLKConfig+0xb3a>
2400810e:	f200 8095 	bhi.w	2400823c <HAL_RCCEx_PeriphCLKConfig+0x290>
24008112:	2900      	cmp	r1, #0
24008114:	f000 83c7 	beq.w	240088a6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
24008118:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
2400811c:	f040 8096 	bne.w	2400824c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008120:	2100      	movs	r1, #0
24008122:	f104 0008 	add.w	r0, r4, #8
24008126:	f7ff fe4d 	bl	24007dc4 <RCCEx_PLL2_Config>
2400812a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400812c:	2d00      	cmp	r5, #0
2400812e:	f000 838d 	beq.w	2400884c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24008132:	462e      	mov	r6, r5
24008134:	e9d4 3200 	ldrd	r3, r2, [r4]
24008138:	0498      	lsls	r0, r3, #18
2400813a:	d51d      	bpl.n	24008178 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
2400813c:	6e61      	ldr	r1, [r4, #100]	; 0x64
2400813e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
24008142:	f000 8466 	beq.w	24008a12 <HAL_RCCEx_PeriphCLKConfig+0xa66>
24008146:	f200 8084 	bhi.w	24008252 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
2400814a:	b149      	cbz	r1, 24008160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
2400814c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24008150:	f040 8088 	bne.w	24008264 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008154:	2101      	movs	r1, #1
24008156:	f104 0008 	add.w	r0, r4, #8
2400815a:	f7ff fe33 	bl	24007dc4 <RCCEx_PLL2_Config>
2400815e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008160:	2d00      	cmp	r5, #0
24008162:	f040 83eb 	bne.w	2400893c <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
24008166:	4a46      	ldr	r2, [pc, #280]	; (24008280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
24008168:	6e61      	ldr	r1, [r4, #100]	; 0x64
2400816a:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400816c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
24008170:	430b      	orrs	r3, r1
24008172:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24008174:	e9d4 3200 	ldrd	r3, r2, [r4]
24008178:	0459      	lsls	r1, r3, #17
2400817a:	d51d      	bpl.n	240081b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
2400817c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
24008180:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008184:	f000 844f 	beq.w	24008a26 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
24008188:	d86f      	bhi.n	2400826a <HAL_RCCEx_PeriphCLKConfig+0x2be>
2400818a:	b141      	cbz	r1, 2400819e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
2400818c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24008190:	d173      	bne.n	2400827a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008192:	2101      	movs	r1, #1
24008194:	f104 0008 	add.w	r0, r4, #8
24008198:	f7ff fe14 	bl	24007dc4 <RCCEx_PLL2_Config>
2400819c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400819e:	2d00      	cmp	r5, #0
240081a0:	f040 83d4 	bne.w	2400894c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
240081a4:	4a36      	ldr	r2, [pc, #216]	; (24008280 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240081a6:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
240081aa:	6d93      	ldr	r3, [r2, #88]	; 0x58
240081ac:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
240081b0:	430b      	orrs	r3, r1
240081b2:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
240081b4:	e9d4 3200 	ldrd	r3, r2, [r4]
240081b8:	041f      	lsls	r7, r3, #16
240081ba:	d50d      	bpl.n	240081d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
240081bc:	6f21      	ldr	r1, [r4, #112]	; 0x70
240081be:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
240081c2:	f000 841d 	beq.w	24008a00 <HAL_RCCEx_PeriphCLKConfig+0xa54>
240081c6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
240081ca:	f000 8239 	beq.w	24008640 <HAL_RCCEx_PeriphCLKConfig+0x694>
240081ce:	2900      	cmp	r1, #0
240081d0:	f000 823c 	beq.w	2400864c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
240081d4:	2601      	movs	r6, #1
240081d6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
240081d8:	01d8      	lsls	r0, r3, #7
240081da:	d55e      	bpl.n	2400829a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->FmcClockSelection)
240081dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
240081de:	2903      	cmp	r1, #3
240081e0:	f200 84f3 	bhi.w	24008bca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
240081e4:	e8df f011 	tbh	[pc, r1, lsl #1]
240081e8:	004e0053 	.word	0x004e0053
240081ec:	0053043d 	.word	0x0053043d
    switch (PeriphClkInit->Sai23ClockSelection)
240081f0:	29c0      	cmp	r1, #192	; 0xc0
240081f2:	f43f af28 	beq.w	24008046 <HAL_RCCEx_PeriphCLKConfig+0x9a>
240081f6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
240081fa:	f43f af24 	beq.w	24008046 <HAL_RCCEx_PeriphCLKConfig+0x9a>
240081fe:	2601      	movs	r6, #1
24008200:	4635      	mov	r5, r6
24008202:	e726      	b.n	24008052 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
24008204:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
24008208:	f43f af3a 	beq.w	24008080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
2400820c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
24008210:	f43f af36 	beq.w	24008080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
24008214:	2601      	movs	r6, #1
24008216:	4635      	mov	r5, r6
24008218:	e738      	b.n	2400808c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
2400821a:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
2400821e:	f43f af4c 	beq.w	240080ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
24008222:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
24008226:	f43f af48 	beq.w	240080ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
2400822a:	2601      	movs	r6, #1
2400822c:	4635      	mov	r5, r6
2400822e:	e74a      	b.n	240080c6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
24008230:	2930      	cmp	r1, #48	; 0x30
24008232:	f43f af59 	beq.w	240080e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
24008236:	2601      	movs	r6, #1
24008238:	4635      	mov	r5, r6
2400823a:	e761      	b.n	24008100 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
2400823c:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
24008240:	f43f af74 	beq.w	2400812c <HAL_RCCEx_PeriphCLKConfig+0x180>
24008244:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
24008248:	f43f af70 	beq.w	2400812c <HAL_RCCEx_PeriphCLKConfig+0x180>
2400824c:	2601      	movs	r6, #1
2400824e:	4635      	mov	r5, r6
24008250:	e772      	b.n	24008138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
24008252:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
24008256:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
2400825a:	d081      	beq.n	24008160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
2400825c:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
24008260:	f43f af7e 	beq.w	24008160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
24008264:	2601      	movs	r6, #1
24008266:	4635      	mov	r5, r6
24008268:	e786      	b.n	24008178 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
2400826a:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
2400826e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24008272:	d094      	beq.n	2400819e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
24008274:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
24008278:	d091      	beq.n	2400819e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
2400827a:	2601      	movs	r6, #1
2400827c:	4635      	mov	r5, r6
2400827e:	e79b      	b.n	240081b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
24008280:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008284:	4a34      	ldr	r2, [pc, #208]	; (24008358 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
24008286:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400828c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
2400828e:	2d00      	cmp	r5, #0
24008290:	f000 834a 	beq.w	24008928 <HAL_RCCEx_PeriphCLKConfig+0x97c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24008294:	462e      	mov	r6, r5
24008296:	e9d4 3200 	ldrd	r3, r2, [r4]
2400829a:	0259      	lsls	r1, r3, #9
2400829c:	f100 826f 	bmi.w	2400877e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
240082a0:	07d8      	lsls	r0, r3, #31
240082a2:	d52f      	bpl.n	24008304 <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (PeriphClkInit->Usart16ClockSelection)
240082a4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
240082a6:	2928      	cmp	r1, #40	; 0x28
240082a8:	d82a      	bhi.n	24008300 <HAL_RCCEx_PeriphCLKConfig+0x354>
240082aa:	e8df f011 	tbh	[pc, r1, lsl #1]
240082ae:	020d      	.short	0x020d
240082b0:	00290029 	.word	0x00290029
240082b4:	00290029 	.word	0x00290029
240082b8:	00290029 	.word	0x00290029
240082bc:	02070029 	.word	0x02070029
240082c0:	00290029 	.word	0x00290029
240082c4:	00290029 	.word	0x00290029
240082c8:	00290029 	.word	0x00290029
240082cc:	04500029 	.word	0x04500029
240082d0:	00290029 	.word	0x00290029
240082d4:	00290029 	.word	0x00290029
240082d8:	00290029 	.word	0x00290029
240082dc:	020d0029 	.word	0x020d0029
240082e0:	00290029 	.word	0x00290029
240082e4:	00290029 	.word	0x00290029
240082e8:	00290029 	.word	0x00290029
240082ec:	020d0029 	.word	0x020d0029
240082f0:	00290029 	.word	0x00290029
240082f4:	00290029 	.word	0x00290029
240082f8:	00290029 	.word	0x00290029
240082fc:	020d0029 	.word	0x020d0029
24008300:	2601      	movs	r6, #1
24008302:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24008304:	0799      	lsls	r1, r3, #30
24008306:	d517      	bpl.n	24008338 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    switch (PeriphClkInit->Usart234578ClockSelection)
24008308:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400830a:	2905      	cmp	r1, #5
2400830c:	f200 8465 	bhi.w	24008bda <HAL_RCCEx_PeriphCLKConfig+0xc2e>
24008310:	e8df f011 	tbh	[pc, r1, lsl #1]
24008314:	0006000c 	.word	0x0006000c
24008318:	000c0412 	.word	0x000c0412
2400831c:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008320:	2101      	movs	r1, #1
24008322:	f104 0008 	add.w	r0, r4, #8
24008326:	f7ff fd4d 	bl	24007dc4 <RCCEx_PLL2_Config>
2400832a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400832c:	2d00      	cmp	r5, #0
2400832e:	f000 82dd 	beq.w	240088ec <HAL_RCCEx_PeriphCLKConfig+0x940>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24008332:	462e      	mov	r6, r5
24008334:	e9d4 3200 	ldrd	r3, r2, [r4]
24008338:	075f      	lsls	r7, r3, #29
2400833a:	d51b      	bpl.n	24008374 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
2400833c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
24008340:	2905      	cmp	r1, #5
24008342:	f200 8446 	bhi.w	24008bd2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
24008346:	e8df f011 	tbh	[pc, r1, lsl #1]
2400834a:	000f      	.short	0x000f
2400834c:	03ed0009 	.word	0x03ed0009
24008350:	000f000f 	.word	0x000f000f
24008354:	000f      	.short	0x000f
24008356:	bf00      	nop
24008358:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
2400835c:	2101      	movs	r1, #1
2400835e:	f104 0008 	add.w	r0, r4, #8
24008362:	f7ff fd2f 	bl	24007dc4 <RCCEx_PLL2_Config>
24008366:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008368:	2d00      	cmp	r5, #0
2400836a:	f000 82c9 	beq.w	24008900 <HAL_RCCEx_PeriphCLKConfig+0x954>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2400836e:	462e      	mov	r6, r5
24008370:	e9d4 3200 	ldrd	r3, r2, [r4]
24008374:	0698      	lsls	r0, r3, #26
24008376:	d51f      	bpl.n	240083b8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim1ClockSelection)
24008378:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
2400837c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008380:	f000 8365 	beq.w	24008a4e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
24008384:	f200 811c 	bhi.w	240085c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
24008388:	b149      	cbz	r1, 2400839e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
2400838a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
2400838e:	f040 8121 	bne.w	240085d4 <HAL_RCCEx_PeriphCLKConfig+0x628>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008392:	2100      	movs	r1, #0
24008394:	f104 0008 	add.w	r0, r4, #8
24008398:	f7ff fd14 	bl	24007dc4 <RCCEx_PLL2_Config>
2400839c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400839e:	2d00      	cmp	r5, #0
240083a0:	f040 82b9 	bne.w	24008916 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
240083a4:	4ab0      	ldr	r2, [pc, #704]	; (24008668 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
240083a6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
240083aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
240083ac:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
240083b0:	430b      	orrs	r3, r1
240083b2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
240083b4:	e9d4 3200 	ldrd	r3, r2, [r4]
240083b8:	0659      	lsls	r1, r3, #25
240083ba:	d51f      	bpl.n	240083fc <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim2ClockSelection)
240083bc:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
240083c0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
240083c4:	f000 8308 	beq.w	240089d8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
240083c8:	f200 8107 	bhi.w	240085da <HAL_RCCEx_PeriphCLKConfig+0x62e>
240083cc:	b149      	cbz	r1, 240083e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
240083ce:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
240083d2:	f040 810c 	bne.w	240085ee <HAL_RCCEx_PeriphCLKConfig+0x642>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240083d6:	2100      	movs	r1, #0
240083d8:	f104 0008 	add.w	r0, r4, #8
240083dc:	f7ff fcf2 	bl	24007dc4 <RCCEx_PLL2_Config>
240083e0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240083e2:	2d00      	cmp	r5, #0
240083e4:	f040 82b6 	bne.w	24008954 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
240083e8:	4a9f      	ldr	r2, [pc, #636]	; (24008668 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
240083ea:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
240083ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
240083f0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
240083f4:	430b      	orrs	r3, r1
240083f6:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
240083f8:	e9d4 3200 	ldrd	r3, r2, [r4]
240083fc:	061f      	lsls	r7, r3, #24
240083fe:	d51f      	bpl.n	24008440 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Lptim345ClockSelection)
24008400:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
24008404:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
24008408:	f000 82f0 	beq.w	240089ec <HAL_RCCEx_PeriphCLKConfig+0xa40>
2400840c:	f200 80f2 	bhi.w	240085f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
24008410:	b149      	cbz	r1, 24008426 <HAL_RCCEx_PeriphCLKConfig+0x47a>
24008412:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
24008416:	f040 80f7 	bne.w	24008608 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400841a:	2100      	movs	r1, #0
2400841c:	f104 0008 	add.w	r0, r4, #8
24008420:	f7ff fcd0 	bl	24007dc4 <RCCEx_PLL2_Config>
24008424:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008426:	2d00      	cmp	r5, #0
24008428:	f040 828c 	bne.w	24008944 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
2400842c:	4a8e      	ldr	r2, [pc, #568]	; (24008668 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
2400842e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
24008432:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008434:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
24008438:	430b      	orrs	r3, r1
2400843a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
2400843c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008440:	0718      	lsls	r0, r3, #28
24008442:	d50d      	bpl.n	24008460 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
24008444:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
24008448:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
2400844c:	f000 8313 	beq.w	24008a76 <HAL_RCCEx_PeriphCLKConfig+0xaca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24008450:	4985      	ldr	r1, [pc, #532]	; (24008668 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008452:	6d4b      	ldr	r3, [r1, #84]	; 0x54
24008454:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
24008458:	4313      	orrs	r3, r2
2400845a:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
2400845c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008460:	06d9      	lsls	r1, r3, #27
24008462:	d50d      	bpl.n	24008480 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
24008464:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
24008468:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
2400846c:	f000 830f 	beq.w	24008a8e <HAL_RCCEx_PeriphCLKConfig+0xae2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24008470:	497d      	ldr	r1, [pc, #500]	; (24008668 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008472:	6d8b      	ldr	r3, [r1, #88]	; 0x58
24008474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24008478:	4313      	orrs	r3, r2
2400847a:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
2400847c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008480:	031f      	lsls	r7, r3, #12
24008482:	d50e      	bpl.n	240084a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    switch (PeriphClkInit->AdcClockSelection)
24008484:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
24008488:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
2400848c:	f000 8102 	beq.w	24008694 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
24008490:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
24008494:	f000 8104 	beq.w	240086a0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
24008498:	2900      	cmp	r1, #0
2400849a:	f000 8292 	beq.w	240089c2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
2400849e:	2601      	movs	r6, #1
240084a0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
240084a2:	0358      	lsls	r0, r3, #13
240084a4:	d50f      	bpl.n	240084c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch (PeriphClkInit->UsbClockSelection)
240084a6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
240084aa:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
240084ae:	f000 80dd 	beq.w	2400866c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
240084b2:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
240084b6:	f000 80df 	beq.w	24008678 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
240084ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
240084be:	f000 8277 	beq.w	240089b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
240084c2:	2601      	movs	r6, #1
240084c4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
240084c6:	03d9      	lsls	r1, r3, #15
240084c8:	d509      	bpl.n	240084de <HAL_RCCEx_PeriphCLKConfig+0x532>
    switch (PeriphClkInit->SdmmcClockSelection)
240084ca:	6d21      	ldr	r1, [r4, #80]	; 0x50
240084cc:	2900      	cmp	r1, #0
240084ce:	f000 825a 	beq.w	24008986 <HAL_RCCEx_PeriphCLKConfig+0x9da>
240084d2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
240084d6:	f000 81da 	beq.w	2400888e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
240084da:	2601      	movs	r6, #1
240084dc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
240084de:	009f      	lsls	r7, r3, #2
240084e0:	f100 80ff 	bmi.w	240086e2 <HAL_RCCEx_PeriphCLKConfig+0x736>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
240084e4:	0398      	lsls	r0, r3, #14
240084e6:	d50e      	bpl.n	24008506 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->RngClockSelection)
240084e8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
240084ec:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
240084f0:	f000 8240 	beq.w	24008974 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
240084f4:	f240 808b 	bls.w	2400860e <HAL_RCCEx_PeriphCLKConfig+0x662>
240084f8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
240084fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
24008500:	f000 8088 	beq.w	24008614 <HAL_RCCEx_PeriphCLKConfig+0x668>
24008504:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24008506:	02d9      	lsls	r1, r3, #11
24008508:	d508      	bpl.n	2400851c <HAL_RCCEx_PeriphCLKConfig+0x570>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
2400850a:	4a57      	ldr	r2, [pc, #348]	; (24008668 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
2400850c:	6f61      	ldr	r1, [r4, #116]	; 0x74
2400850e:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24008514:	430b      	orrs	r3, r1
24008516:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
24008518:	e9d4 3200 	ldrd	r3, r2, [r4]
2400851c:	00df      	lsls	r7, r3, #3
2400851e:	d509      	bpl.n	24008534 <HAL_RCCEx_PeriphCLKConfig+0x588>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
24008520:	4a51      	ldr	r2, [pc, #324]	; (24008668 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008522:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
24008526:	6913      	ldr	r3, [r2, #16]
24008528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
2400852c:	430b      	orrs	r3, r1
2400852e:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
24008530:	e9d4 3200 	ldrd	r3, r2, [r4]
24008534:	029d      	lsls	r5, r3, #10
24008536:	d508      	bpl.n	2400854a <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
24008538:	4a4b      	ldr	r2, [pc, #300]	; (24008668 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
2400853a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
2400853c:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400853e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24008542:	430b      	orrs	r3, r1
24008544:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
24008546:	e9d4 3200 	ldrd	r3, r2, [r4]
2400854a:	0058      	lsls	r0, r3, #1
2400854c:	d50b      	bpl.n	24008566 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2400854e:	4b46      	ldr	r3, [pc, #280]	; (24008668 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008550:	691a      	ldr	r2, [r3, #16]
24008552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24008556:	611a      	str	r2, [r3, #16]
24008558:	691a      	ldr	r2, [r3, #16]
2400855a:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
2400855e:	430a      	orrs	r2, r1
24008560:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
24008562:	e9d4 3200 	ldrd	r3, r2, [r4]
24008566:	2b00      	cmp	r3, #0
24008568:	da08      	bge.n	2400857c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
2400856a:	4a3f      	ldr	r2, [pc, #252]	; (24008668 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
2400856c:	6d61      	ldr	r1, [r4, #84]	; 0x54
2400856e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008570:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
24008574:	430b      	orrs	r3, r1
24008576:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
24008578:	e9d4 3200 	ldrd	r3, r2, [r4]
2400857c:	0219      	lsls	r1, r3, #8
2400857e:	d508      	bpl.n	24008592 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
24008580:	4a39      	ldr	r2, [pc, #228]	; (24008668 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008582:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
24008586:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008588:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
2400858c:	430b      	orrs	r3, r1
2400858e:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
24008590:	6862      	ldr	r2, [r4, #4]
24008592:	07d3      	lsls	r3, r2, #31
24008594:	f100 80b1 	bmi.w	240086fa <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24008598:	0797      	lsls	r7, r2, #30
2400859a:	f100 80bb 	bmi.w	24008714 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
2400859e:	0755      	lsls	r5, r2, #29
240085a0:	f100 80c5 	bmi.w	2400872e <HAL_RCCEx_PeriphCLKConfig+0x782>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
240085a4:	0710      	lsls	r0, r2, #28
240085a6:	f100 80cf 	bmi.w	24008748 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
240085aa:	06d1      	lsls	r1, r2, #27
240085ac:	f100 80d9 	bmi.w	24008762 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
240085b0:	0692      	lsls	r2, r2, #26
240085b2:	f100 812a 	bmi.w	2400880a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    return HAL_OK;
240085b6:	1e30      	subs	r0, r6, #0
240085b8:	bf18      	it	ne
240085ba:	2001      	movne	r0, #1
}
240085bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
240085c0:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
240085c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
240085c8:	f43f aee9 	beq.w	2400839e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
240085cc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
240085d0:	f43f aee5 	beq.w	2400839e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
240085d4:	2601      	movs	r6, #1
240085d6:	4635      	mov	r5, r6
240085d8:	e6ee      	b.n	240083b8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim2ClockSelection)
240085da:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
240085de:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
240085e2:	f43f aefe 	beq.w	240083e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
240085e6:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
240085ea:	f43f aefa 	beq.w	240083e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
240085ee:	2601      	movs	r6, #1
240085f0:	4635      	mov	r5, r6
240085f2:	e703      	b.n	240083fc <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim345ClockSelection)
240085f4:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
240085f8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
240085fc:	f43f af13 	beq.w	24008426 <HAL_RCCEx_PeriphCLKConfig+0x47a>
24008600:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
24008604:	f43f af0f 	beq.w	24008426 <HAL_RCCEx_PeriphCLKConfig+0x47a>
24008608:	2601      	movs	r6, #1
2400860a:	4635      	mov	r5, r6
2400860c:	e718      	b.n	24008440 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->RngClockSelection)
2400860e:	2900      	cmp	r1, #0
24008610:	f47f af78 	bne.w	24008504 <HAL_RCCEx_PeriphCLKConfig+0x558>
    if (ret == HAL_OK)
24008614:	2d00      	cmp	r5, #0
24008616:	f040 81c7 	bne.w	240089a8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
2400861a:	4a13      	ldr	r2, [pc, #76]	; (24008668 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
2400861c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
24008620:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24008626:	430b      	orrs	r3, r1
24008628:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
2400862a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400862e:	e76a      	b.n	24008506 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->Sai1ClockSelection)
24008630:	4635      	mov	r5, r6
    if (ret == HAL_OK)
24008632:	2d00      	cmp	r5, #0
24008634:	f000 8114 	beq.w	24008860 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24008638:	462e      	mov	r6, r5
2400863a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400863e:	e4ee      	b.n	2400801e <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008640:	2101      	movs	r1, #1
24008642:	f104 0008 	add.w	r0, r4, #8
24008646:	f7ff fbbd 	bl	24007dc4 <RCCEx_PLL2_Config>
2400864a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400864c:	2d00      	cmp	r5, #0
2400864e:	f040 8149 	bne.w	240088e4 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
24008652:	4a05      	ldr	r2, [pc, #20]	; (24008668 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008654:	6f21      	ldr	r1, [r4, #112]	; 0x70
24008656:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008658:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
2400865c:	430b      	orrs	r3, r1
2400865e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24008660:	e9d4 3200 	ldrd	r3, r2, [r4]
24008664:	e5b8      	b.n	240081d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
24008666:	bf00      	nop
24008668:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
2400866c:	2101      	movs	r1, #1
2400866e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008672:	f7ff fc21 	bl	24007eb8 <RCCEx_PLL3_Config>
24008676:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008678:	2d00      	cmp	r5, #0
2400867a:	f040 8173 	bne.w	24008964 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
2400867e:	4abb      	ldr	r2, [pc, #748]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008680:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
24008684:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008686:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
2400868a:	430b      	orrs	r3, r1
2400868c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2400868e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008692:	e718      	b.n	240084c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008694:	2102      	movs	r1, #2
24008696:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400869a:	f7ff fc0d 	bl	24007eb8 <RCCEx_PLL3_Config>
2400869e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240086a0:	2d00      	cmp	r5, #0
240086a2:	f040 815b 	bne.w	2400895c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
240086a6:	4ab1      	ldr	r2, [pc, #708]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240086a8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
240086ac:	6d93      	ldr	r3, [r2, #88]	; 0x58
240086ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
240086b2:	430b      	orrs	r3, r1
240086b4:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
240086b6:	e9d4 3200 	ldrd	r3, r2, [r4]
240086ba:	e6f2      	b.n	240084a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240086bc:	2101      	movs	r1, #1
240086be:	f104 0008 	add.w	r0, r4, #8
240086c2:	f7ff fb7f 	bl	24007dc4 <RCCEx_PLL2_Config>
240086c6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240086c8:	2d00      	cmp	r5, #0
240086ca:	f040 8107 	bne.w	240088dc <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
240086ce:	4aa7      	ldr	r2, [pc, #668]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240086d0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
240086d2:	6d53      	ldr	r3, [r2, #84]	; 0x54
240086d4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
240086d8:	430b      	orrs	r3, r1
240086da:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
240086dc:	e9d4 3200 	ldrd	r3, r2, [r4]
240086e0:	e610      	b.n	24008304 <HAL_RCCEx_PeriphCLKConfig+0x358>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
240086e2:	2102      	movs	r1, #2
240086e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
240086e8:	f7ff fbe6 	bl	24007eb8 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
240086ec:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
240086f0:	2800      	cmp	r0, #0
240086f2:	f43f aef7 	beq.w	240084e4 <HAL_RCCEx_PeriphCLKConfig+0x538>
      status = HAL_ERROR;
240086f6:	2601      	movs	r6, #1
240086f8:	e6f4      	b.n	240084e4 <HAL_RCCEx_PeriphCLKConfig+0x538>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240086fa:	2100      	movs	r1, #0
240086fc:	f104 0008 	add.w	r0, r4, #8
24008700:	f7ff fb60 	bl	24007dc4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24008704:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24008706:	2800      	cmp	r0, #0
24008708:	f43f af46 	beq.w	24008598 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
2400870c:	0797      	lsls	r7, r2, #30
2400870e:	4606      	mov	r6, r0
24008710:	f57f af45 	bpl.w	2400859e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008714:	2101      	movs	r1, #1
24008716:	f104 0008 	add.w	r0, r4, #8
2400871a:	f7ff fb53 	bl	24007dc4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
2400871e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24008720:	2800      	cmp	r0, #0
24008722:	f43f af3c 	beq.w	2400859e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24008726:	0755      	lsls	r5, r2, #29
24008728:	4606      	mov	r6, r0
2400872a:	f57f af3b 	bpl.w	240085a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400872e:	2102      	movs	r1, #2
24008730:	f104 0008 	add.w	r0, r4, #8
24008734:	f7ff fb46 	bl	24007dc4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24008738:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
2400873a:	2800      	cmp	r0, #0
2400873c:	f43f af32 	beq.w	240085a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24008740:	4606      	mov	r6, r0
24008742:	0710      	lsls	r0, r2, #28
24008744:	f57f af31 	bpl.w	240085aa <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008748:	2100      	movs	r1, #0
2400874a:	f104 0028 	add.w	r0, r4, #40	; 0x28
2400874e:	f7ff fbb3 	bl	24007eb8 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24008752:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24008754:	2800      	cmp	r0, #0
24008756:	f43f af28 	beq.w	240085aa <HAL_RCCEx_PeriphCLKConfig+0x5fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
2400875a:	06d1      	lsls	r1, r2, #27
2400875c:	4606      	mov	r6, r0
2400875e:	f57f af27 	bpl.w	240085b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008762:	f104 0528 	add.w	r5, r4, #40	; 0x28
24008766:	2101      	movs	r1, #1
24008768:	4628      	mov	r0, r5
2400876a:	f7ff fba5 	bl	24007eb8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
2400876e:	2800      	cmp	r0, #0
24008770:	f000 8130 	beq.w	240089d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24008774:	6863      	ldr	r3, [r4, #4]
24008776:	069b      	lsls	r3, r3, #26
24008778:	d550      	bpl.n	2400881c <HAL_RCCEx_PeriphCLKConfig+0x870>
2400877a:	4606      	mov	r6, r0
2400877c:	e047      	b.n	2400880e <HAL_RCCEx_PeriphCLKConfig+0x862>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
2400877e:	4f7c      	ldr	r7, [pc, #496]	; (24008970 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
24008780:	683b      	ldr	r3, [r7, #0]
24008782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24008786:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
24008788:	f7fc f822 	bl	240047d0 <HAL_GetTick>
2400878c:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400878e:	e006      	b.n	2400879e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24008790:	f7fc f81e 	bl	240047d0 <HAL_GetTick>
24008794:	eba0 0008 	sub.w	r0, r0, r8
24008798:	2864      	cmp	r0, #100	; 0x64
2400879a:	f200 81e2 	bhi.w	24008b62 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
2400879e:	683b      	ldr	r3, [r7, #0]
240087a0:	05da      	lsls	r2, r3, #23
240087a2:	d5f5      	bpl.n	24008790 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    if (ret == HAL_OK)
240087a4:	2d00      	cmp	r5, #0
240087a6:	f040 820b 	bne.w	24008bc0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
240087aa:	4b70      	ldr	r3, [pc, #448]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240087ac:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
240087b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
240087b2:	4051      	eors	r1, r2
240087b4:	f411 7f40 	tst.w	r1, #768	; 0x300
240087b8:	d00d      	beq.n	240087d6 <HAL_RCCEx_PeriphCLKConfig+0x82a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
240087ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
240087bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
240087be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
240087c2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
240087c6:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
240087c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
240087ca:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
240087ce:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
240087d0:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
240087d2:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
240087d6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
240087da:	f000 81d3 	beq.w	24008b84 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
240087de:	f402 7340 	and.w	r3, r2, #768	; 0x300
240087e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
240087e6:	f000 81e1 	beq.w	24008bac <HAL_RCCEx_PeriphCLKConfig+0xc00>
240087ea:	4a60      	ldr	r2, [pc, #384]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240087ec:	6913      	ldr	r3, [r2, #16]
240087ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
240087f2:	6113      	str	r3, [r2, #16]
240087f4:	4a5d      	ldr	r2, [pc, #372]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240087f6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
240087fa:	6f11      	ldr	r1, [r2, #112]	; 0x70
240087fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
24008800:	430b      	orrs	r3, r1
24008802:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008804:	e9d4 3200 	ldrd	r3, r2, [r4]
24008808:	e54a      	b.n	240082a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400880a:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
2400880e:	2102      	movs	r1, #2
24008810:	4628      	mov	r0, r5
24008812:	f7ff fb51 	bl	24007eb8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24008816:	2800      	cmp	r0, #0
24008818:	f43f aecd 	beq.w	240085b6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  return HAL_ERROR;
2400881c:	2001      	movs	r0, #1
}
2400881e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
24008822:	4a52      	ldr	r2, [pc, #328]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008824:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24008828:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400882a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
2400882e:	430b      	orrs	r3, r1
24008830:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24008832:	e9d4 3200 	ldrd	r3, r2, [r4]
24008836:	e446      	b.n	240080c6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
24008838:	4a4c      	ldr	r2, [pc, #304]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
2400883a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400883c:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400883e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
24008842:	430b      	orrs	r3, r1
24008844:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
24008846:	e9d4 3200 	ldrd	r3, r2, [r4]
2400884a:	e402      	b.n	24008052 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
2400884c:	4a47      	ldr	r2, [pc, #284]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
2400884e:	6e21      	ldr	r1, [r4, #96]	; 0x60
24008850:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
24008856:	430b      	orrs	r3, r1
24008858:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
2400885a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400885e:	e46b      	b.n	24008138 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
24008860:	4a42      	ldr	r2, [pc, #264]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008862:	6da1      	ldr	r1, [r4, #88]	; 0x58
24008864:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008866:	f023 0307 	bic.w	r3, r3, #7
2400886a:	430b      	orrs	r3, r1
2400886c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
2400886e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008872:	f7ff bbd4 	b.w	2400801e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
24008876:	4a3d      	ldr	r2, [pc, #244]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008878:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
2400887c:	6d93      	ldr	r3, [r2, #88]	; 0x58
2400887e:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
24008882:	430b      	orrs	r3, r1
24008884:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24008886:	e9d4 3200 	ldrd	r3, r2, [r4]
2400888a:	f7ff bbff 	b.w	2400808c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400888e:	2102      	movs	r1, #2
24008890:	f104 0008 	add.w	r0, r4, #8
24008894:	f7ff fa96 	bl	24007dc4 <RCCEx_PLL2_Config>
24008898:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400889a:	2d00      	cmp	r5, #0
2400889c:	d07a      	beq.n	24008994 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
2400889e:	462e      	mov	r6, r5
240088a0:	e9d4 3200 	ldrd	r3, r2, [r4]
240088a4:	e61b      	b.n	240084de <HAL_RCCEx_PeriphCLKConfig+0x532>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240088a6:	4a31      	ldr	r2, [pc, #196]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240088a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240088aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240088ae:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240088b0:	e43c      	b.n	2400812c <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240088b2:	4a2e      	ldr	r2, [pc, #184]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240088b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240088b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240088ba:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240088bc:	f7ff bbfd 	b.w	240080ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240088c0:	4a2a      	ldr	r2, [pc, #168]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240088c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240088c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240088c8:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240088ca:	f7ff bbbc 	b.w	24008046 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240088ce:	4a27      	ldr	r2, [pc, #156]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240088d0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240088d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240088d6:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
240088d8:	f7ff bbd2 	b.w	24008080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
240088dc:	e9d4 3200 	ldrd	r3, r2, [r4]
240088e0:	462e      	mov	r6, r5
240088e2:	e50f      	b.n	24008304 <HAL_RCCEx_PeriphCLKConfig+0x358>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
240088e4:	e9d4 3200 	ldrd	r3, r2, [r4]
240088e8:	462e      	mov	r6, r5
240088ea:	e475      	b.n	240081d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
240088ec:	4a1f      	ldr	r2, [pc, #124]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
240088ee:	6fa1      	ldr	r1, [r4, #120]	; 0x78
240088f0:	6d53      	ldr	r3, [r2, #84]	; 0x54
240088f2:	f023 0307 	bic.w	r3, r3, #7
240088f6:	430b      	orrs	r3, r1
240088f8:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
240088fa:	e9d4 3200 	ldrd	r3, r2, [r4]
240088fe:	e51b      	b.n	24008338 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
24008900:	4a1a      	ldr	r2, [pc, #104]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008902:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
24008906:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008908:	f023 0307 	bic.w	r3, r3, #7
2400890c:	430b      	orrs	r3, r1
2400890e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24008910:	e9d4 3200 	ldrd	r3, r2, [r4]
24008914:	e52e      	b.n	24008374 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24008916:	e9d4 3200 	ldrd	r3, r2, [r4]
2400891a:	462e      	mov	r6, r5
2400891c:	e54c      	b.n	240083b8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2400891e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008922:	462e      	mov	r6, r5
24008924:	f7ff bbec 	b.w	24008100 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
24008928:	4a10      	ldr	r2, [pc, #64]	; (2400896c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
2400892a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400892c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
2400892e:	f023 0303 	bic.w	r3, r3, #3
24008932:	430b      	orrs	r3, r1
24008934:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24008936:	e9d4 3200 	ldrd	r3, r2, [r4]
2400893a:	e4ae      	b.n	2400829a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
2400893c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008940:	462e      	mov	r6, r5
24008942:	e419      	b.n	24008178 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24008944:	e9d4 3200 	ldrd	r3, r2, [r4]
24008948:	462e      	mov	r6, r5
2400894a:	e579      	b.n	24008440 <HAL_RCCEx_PeriphCLKConfig+0x494>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
2400894c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008950:	462e      	mov	r6, r5
24008952:	e431      	b.n	240081b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24008954:	e9d4 3200 	ldrd	r3, r2, [r4]
24008958:	462e      	mov	r6, r5
2400895a:	e54f      	b.n	240083fc <HAL_RCCEx_PeriphCLKConfig+0x450>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
2400895c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008960:	462e      	mov	r6, r5
24008962:	e59e      	b.n	240084a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24008964:	e9d4 3200 	ldrd	r3, r2, [r4]
24008968:	462e      	mov	r6, r5
2400896a:	e5ac      	b.n	240084c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
2400896c:	58024400 	.word	0x58024400
24008970:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008974:	4a9b      	ldr	r2, [pc, #620]	; (24008be4 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24008976:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400897c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
2400897e:	2d00      	cmp	r5, #0
24008980:	f43f ae4b 	beq.w	2400861a <HAL_RCCEx_PeriphCLKConfig+0x66e>
24008984:	e010      	b.n	240089a8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008986:	4a97      	ldr	r2, [pc, #604]	; (24008be4 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24008988:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400898a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400898e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008990:	2d00      	cmp	r5, #0
24008992:	d184      	bne.n	2400889e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
24008994:	4a93      	ldr	r2, [pc, #588]	; (24008be4 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24008996:	6d21      	ldr	r1, [r4, #80]	; 0x50
24008998:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
2400899a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2400899e:	430b      	orrs	r3, r1
240089a0:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
240089a2:	e9d4 3200 	ldrd	r3, r2, [r4]
240089a6:	e59a      	b.n	240084de <HAL_RCCEx_PeriphCLKConfig+0x532>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
240089a8:	e9d4 3200 	ldrd	r3, r2, [r4]
240089ac:	462e      	mov	r6, r5
240089ae:	e5aa      	b.n	24008506 <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240089b0:	4a8c      	ldr	r2, [pc, #560]	; (24008be4 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
240089b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240089b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240089b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240089ba:	2d00      	cmp	r5, #0
240089bc:	f43f ae5f 	beq.w	2400867e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
240089c0:	e7d0      	b.n	24008964 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240089c2:	f104 0008 	add.w	r0, r4, #8
240089c6:	f7ff f9fd 	bl	24007dc4 <RCCEx_PLL2_Config>
240089ca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240089cc:	2d00      	cmp	r5, #0
240089ce:	f43f ae6a 	beq.w	240086a6 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
240089d2:	e7c3      	b.n	2400895c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
240089d4:	6862      	ldr	r2, [r4, #4]
240089d6:	e5eb      	b.n	240085b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240089d8:	2102      	movs	r1, #2
240089da:	f104 0028 	add.w	r0, r4, #40	; 0x28
240089de:	f7ff fa6b 	bl	24007eb8 <RCCEx_PLL3_Config>
240089e2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240089e4:	2d00      	cmp	r5, #0
240089e6:	f43f acff 	beq.w	240083e8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
240089ea:	e7b3      	b.n	24008954 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
240089ec:	2102      	movs	r1, #2
240089ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
240089f2:	f7ff fa61 	bl	24007eb8 <RCCEx_PLL3_Config>
240089f6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240089f8:	2d00      	cmp	r5, #0
240089fa:	f43f ad17 	beq.w	2400842c <HAL_RCCEx_PeriphCLKConfig+0x480>
240089fe:	e7a1      	b.n	24008944 <HAL_RCCEx_PeriphCLKConfig+0x998>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008a00:	4a78      	ldr	r2, [pc, #480]	; (24008be4 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24008a02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008a08:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008a0a:	2d00      	cmp	r5, #0
24008a0c:	f43f ae21 	beq.w	24008652 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
24008a10:	e768      	b.n	240088e4 <HAL_RCCEx_PeriphCLKConfig+0x938>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008a12:	2101      	movs	r1, #1
24008a14:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a18:	f7ff fa4e 	bl	24007eb8 <RCCEx_PLL3_Config>
24008a1c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008a1e:	2d00      	cmp	r5, #0
24008a20:	f43f aba1 	beq.w	24008166 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
24008a24:	e78a      	b.n	2400893c <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008a26:	2101      	movs	r1, #1
24008a28:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a2c:	f7ff fa44 	bl	24007eb8 <RCCEx_PLL3_Config>
24008a30:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008a32:	2d00      	cmp	r5, #0
24008a34:	f43f abb6 	beq.w	240081a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
24008a38:	e788      	b.n	2400894c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008a3a:	2102      	movs	r1, #2
24008a3c:	f104 0008 	add.w	r0, r4, #8
24008a40:	f7ff f9c0 	bl	24007dc4 <RCCEx_PLL2_Config>
24008a44:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008a46:	2d00      	cmp	r5, #0
24008a48:	f43f ab51 	beq.w	240080ee <HAL_RCCEx_PeriphCLKConfig+0x142>
24008a4c:	e767      	b.n	2400891e <HAL_RCCEx_PeriphCLKConfig+0x972>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008a4e:	2102      	movs	r1, #2
24008a50:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a54:	f7ff fa30 	bl	24007eb8 <RCCEx_PLL3_Config>
24008a58:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008a5a:	2d00      	cmp	r5, #0
24008a5c:	f43f aca2 	beq.w	240083a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
24008a60:	e759      	b.n	24008916 <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008a62:	2102      	movs	r1, #2
24008a64:	f104 0008 	add.w	r0, r4, #8
24008a68:	f7ff f9ac 	bl	24007dc4 <RCCEx_PLL2_Config>
24008a6c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008a6e:	2d00      	cmp	r5, #0
24008a70:	f43f af5a 	beq.w	24008928 <HAL_RCCEx_PeriphCLKConfig+0x97c>
24008a74:	e40e      	b.n	24008294 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008a76:	2102      	movs	r1, #2
24008a78:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a7c:	f7ff fa1c 	bl	24007eb8 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24008a80:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008a84:	2800      	cmp	r0, #0
24008a86:	f43f ace3 	beq.w	24008450 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        status = HAL_ERROR;
24008a8a:	2601      	movs	r6, #1
24008a8c:	e4e0      	b.n	24008450 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008a8e:	2102      	movs	r1, #2
24008a90:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008a94:	f7ff fa10 	bl	24007eb8 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24008a98:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008a9c:	2800      	cmp	r0, #0
24008a9e:	f43f ace7 	beq.w	24008470 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        status = HAL_ERROR;
24008aa2:	2601      	movs	r6, #1
24008aa4:	e4e4      	b.n	24008470 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008aa6:	2100      	movs	r1, #0
24008aa8:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008aac:	f7ff fa04 	bl	24007eb8 <RCCEx_PLL3_Config>
24008ab0:	4605      	mov	r5, r0
        break;
24008ab2:	f7ff bae5 	b.w	24008080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008ab6:	2102      	movs	r1, #2
24008ab8:	3028      	adds	r0, #40	; 0x28
24008aba:	f7ff f9fd 	bl	24007eb8 <RCCEx_PLL3_Config>
24008abe:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24008ac0:	2e00      	cmp	r6, #0
24008ac2:	f43f aa8f 	beq.w	24007fe4 <HAL_RCCEx_PeriphCLKConfig+0x38>
24008ac6:	f7ff ba9a 	b.w	24007ffe <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008aca:	4a46      	ldr	r2, [pc, #280]	; (24008be4 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
        break;
24008acc:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008ace:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008ad4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008ad6:	e5ac      	b.n	24008632 <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008ad8:	2100      	movs	r1, #0
24008ada:	f104 0008 	add.w	r0, r4, #8
24008ade:	f7ff f971 	bl	24007dc4 <RCCEx_PLL2_Config>
24008ae2:	4605      	mov	r5, r0
        break;
24008ae4:	e5a5      	b.n	24008632 <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008ae6:	2100      	movs	r1, #0
24008ae8:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008aec:	f7ff f9e4 	bl	24007eb8 <RCCEx_PLL3_Config>
24008af0:	4605      	mov	r5, r0
        break;
24008af2:	f7ff bb1b 	b.w	2400812c <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008af6:	2100      	movs	r1, #0
24008af8:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008afc:	f7ff f9dc 	bl	24007eb8 <RCCEx_PLL3_Config>
24008b00:	4605      	mov	r5, r0
        break;
24008b02:	f7ff bada 	b.w	240080ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008b06:	2100      	movs	r1, #0
24008b08:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008b0c:	f7ff f9d4 	bl	24007eb8 <RCCEx_PLL3_Config>
24008b10:	4605      	mov	r5, r0
        break;
24008b12:	e58e      	b.n	24008632 <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008b14:	2100      	movs	r1, #0
24008b16:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008b1a:	f7ff f9cd 	bl	24007eb8 <RCCEx_PLL3_Config>
24008b1e:	4605      	mov	r5, r0
        break;
24008b20:	f7ff ba91 	b.w	24008046 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008b24:	2101      	movs	r1, #1
24008b26:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008b2a:	f7ff f9c5 	bl	24007eb8 <RCCEx_PLL3_Config>
24008b2e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008b30:	2d00      	cmp	r5, #0
24008b32:	f43f aee5 	beq.w	24008900 <HAL_RCCEx_PeriphCLKConfig+0x954>
24008b36:	e41a      	b.n	2400836e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008b38:	2101      	movs	r1, #1
24008b3a:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008b3e:	f7ff f9bb 	bl	24007eb8 <RCCEx_PLL3_Config>
24008b42:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008b44:	2d00      	cmp	r5, #0
24008b46:	f43f aed1 	beq.w	240088ec <HAL_RCCEx_PeriphCLKConfig+0x940>
24008b4a:	f7ff bbf2 	b.w	24008332 <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008b4e:	2101      	movs	r1, #1
24008b50:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008b54:	f7ff f9b0 	bl	24007eb8 <RCCEx_PLL3_Config>
24008b58:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008b5a:	2d00      	cmp	r5, #0
24008b5c:	f43f adb7 	beq.w	240086ce <HAL_RCCEx_PeriphCLKConfig+0x722>
24008b60:	e6bc      	b.n	240088dc <HAL_RCCEx_PeriphCLKConfig+0x930>
        status = ret;
24008b62:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008b64:	e9d4 3200 	ldrd	r3, r2, [r4]
24008b68:	4635      	mov	r5, r6
24008b6a:	f7ff bb99 	b.w	240082a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->SpdifrxClockSelection)
24008b6e:	2601      	movs	r6, #1
24008b70:	f7ff ba47 	b.w	24008002 <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008b74:	4a1b      	ldr	r2, [pc, #108]	; (24008be4 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24008b76:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008b7c:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24008b7e:	6e81      	ldr	r1, [r0, #104]	; 0x68
24008b80:	f7ff ba36 	b.w	24007ff0 <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
24008b84:	f7fb fe24 	bl	240047d0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008b88:	f8df 8058 	ldr.w	r8, [pc, #88]	; 24008be4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
        tickstart = HAL_GetTick();
24008b8c:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24008b8e:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008b92:	e004      	b.n	24008b9e <HAL_RCCEx_PeriphCLKConfig+0xbf2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24008b94:	f7fb fe1c 	bl	240047d0 <HAL_GetTick>
24008b98:	1bc0      	subs	r0, r0, r7
24008b9a:	4548      	cmp	r0, r9
24008b9c:	d8e1      	bhi.n	24008b62 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008b9e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
24008ba2:	079b      	lsls	r3, r3, #30
24008ba4:	d5f6      	bpl.n	24008b94 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24008ba6:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
24008baa:	e618      	b.n	240087de <HAL_RCCEx_PeriphCLKConfig+0x832>
24008bac:	490d      	ldr	r1, [pc, #52]	; (24008be4 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24008bae:	4b0e      	ldr	r3, [pc, #56]	; (24008be8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>)
24008bb0:	ea03 1312 	and.w	r3, r3, r2, lsr #4
24008bb4:	690a      	ldr	r2, [r1, #16]
24008bb6:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
24008bba:	4313      	orrs	r3, r2
24008bbc:	610b      	str	r3, [r1, #16]
24008bbe:	e619      	b.n	240087f4 <HAL_RCCEx_PeriphCLKConfig+0x848>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008bc0:	e9d4 3200 	ldrd	r3, r2, [r4]
24008bc4:	462e      	mov	r6, r5
24008bc6:	f7ff bb6b 	b.w	240082a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->FmcClockSelection)
24008bca:	2601      	movs	r6, #1
24008bcc:	4635      	mov	r5, r6
24008bce:	f7ff bb64 	b.w	2400829a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24008bd2:	2601      	movs	r6, #1
24008bd4:	4635      	mov	r5, r6
24008bd6:	f7ff bbcd 	b.w	24008374 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
24008bda:	2601      	movs	r6, #1
24008bdc:	4635      	mov	r5, r6
24008bde:	f7ff bbab 	b.w	24008338 <HAL_RCCEx_PeriphCLKConfig+0x38c>
24008be2:	bf00      	nop
24008be4:	58024400 	.word	0x58024400
24008be8:	00ffffcf 	.word	0x00ffffcf

24008bec <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008bec:	4a50      	ldr	r2, [pc, #320]	; (24008d30 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
24008bee:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008bf0:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
24008bf2:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24008bf4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
24008bf6:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
24008bfa:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008bfe:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
24008c00:	d05d      	beq.n	24008cbe <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008c02:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24008c06:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008c0a:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008c0e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24008c12:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
24008c14:	ee07 4a90 	vmov	s15, r4
24008c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24008c1c:	d003      	beq.n	24008c26 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
24008c1e:	2902      	cmp	r1, #2
24008c20:	d078      	beq.n	24008d14 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
24008c22:	2900      	cmp	r1, #0
24008c24:	d050      	beq.n	24008cc8 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008c26:	ee07 3a90 	vmov	s15, r3
24008c2a:	ed9f 5a42 	vldr	s10, [pc, #264]	; 24008d34 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
24008c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008c32:	6b93      	ldr	r3, [r2, #56]	; 0x38
24008c34:	eec5 6a27 	vdiv.f32	s13, s10, s15
24008c38:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 24008d38 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
24008c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008c40:	ee07 3a90 	vmov	s15, r3
24008c44:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24008c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008c4c:	ee77 7aa5 	vadd.f32	s15, s15, s11
24008c50:	eee7 7a06 	vfma.f32	s15, s14, s12
24008c54:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24008c58:	4a35      	ldr	r2, [pc, #212]	; (24008d30 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
24008c5a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008c5e:	6b93      	ldr	r3, [r2, #56]	; 0x38
24008c60:	f3c3 2346 	ubfx	r3, r3, #9, #7
24008c64:	ee07 3a90 	vmov	s15, r3
24008c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
24008c6c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24008c6e:	ee77 7a86 	vadd.f32	s15, s15, s12
24008c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008c76:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24008c7a:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
24008c7e:	6b93      	ldr	r3, [r2, #56]	; 0x38
24008c80:	f3c3 4306 	ubfx	r3, r3, #16, #7
24008c84:	ee07 3a90 	vmov	s15, r3
24008c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008c8c:	ee77 7a86 	vadd.f32	s15, s15, s12
24008c90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008c94:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24008c98:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
24008c9c:	6b93      	ldr	r3, [r2, #56]	; 0x38
24008c9e:	f3c3 6306 	ubfx	r3, r3, #24, #7
24008ca2:	ee07 3a10 	vmov	s14, r3
24008ca6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24008caa:	ee37 7a06 	vadd.f32	s14, s14, s12
24008cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008cb6:	ee17 3a90 	vmov	r3, s15
24008cba:	6083      	str	r3, [r0, #8]
}
24008cbc:	4770      	bx	lr
24008cbe:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
24008cc0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
24008cc4:	6083      	str	r3, [r0, #8]
}
24008cc6:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008cc8:	6811      	ldr	r1, [r2, #0]
24008cca:	0689      	lsls	r1, r1, #26
24008ccc:	d529      	bpl.n	24008d22 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008cce:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008cd0:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008cd4:	4919      	ldr	r1, [pc, #100]	; (24008d3c <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24008cda:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008cdc:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008ce4:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24008d38 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
24008ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008cec:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008cee:	ee06 3a10 	vmov	s12, r3
24008cf2:	ee05 1a90 	vmov	s11, r1
24008cf6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24008cfa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24008cfe:	ee36 6a26 	vadd.f32	s12, s12, s13
24008d02:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24008d06:	eef0 7a46 	vmov.f32	s15, s12
24008d0a:	eee7 7a05 	vfma.f32	s15, s14, s10
24008d0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
24008d12:	e7a1      	b.n	24008c58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008d14:	ee07 3a90 	vmov	s15, r3
24008d18:	ed9f 5a09 	vldr	s10, [pc, #36]	; 24008d40 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
24008d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008d20:	e787      	b.n	24008c32 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24008d22:	ee07 3a90 	vmov	s15, r3
24008d26:	ed9f 5a07 	vldr	s10, [pc, #28]	; 24008d44 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
24008d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008d2e:	e780      	b.n	24008c32 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
24008d30:	58024400 	.word	0x58024400
24008d34:	4a742400 	.word	0x4a742400
24008d38:	39000000 	.word	0x39000000
24008d3c:	03d09000 	.word	0x03d09000
24008d40:	4b742400 	.word	0x4b742400
24008d44:	4c742400 	.word	0x4c742400

24008d48 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008d48:	4a50      	ldr	r2, [pc, #320]	; (24008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
24008d4a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008d4c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24008d4e:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24008d50:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
24008d52:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24008d56:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24008d5a:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
24008d5c:	d05d      	beq.n	24008e1a <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24008d5e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24008d62:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008d66:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24008d6a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24008d6e:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24008d70:	ee07 4a90 	vmov	s15, r4
24008d74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24008d78:	d003      	beq.n	24008d82 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
24008d7a:	2902      	cmp	r1, #2
24008d7c:	d078      	beq.n	24008e70 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
24008d7e:	2900      	cmp	r1, #0
24008d80:	d050      	beq.n	24008e24 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008d82:	ee07 3a90 	vmov	s15, r3
24008d86:	ed9f 5a42 	vldr	s10, [pc, #264]	; 24008e90 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
24008d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008d8e:	6c13      	ldr	r3, [r2, #64]	; 0x40
24008d90:	eec5 6a27 	vdiv.f32	s13, s10, s15
24008d94:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 24008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
24008d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008d9c:	ee07 3a90 	vmov	s15, r3
24008da0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24008da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008da8:	ee77 7aa5 	vadd.f32	s15, s15, s11
24008dac:	eee7 7a06 	vfma.f32	s15, s14, s12
24008db0:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24008db4:	4a35      	ldr	r2, [pc, #212]	; (24008e8c <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
24008db6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008dba:	6c13      	ldr	r3, [r2, #64]	; 0x40
24008dbc:	f3c3 2346 	ubfx	r3, r3, #9, #7
24008dc0:	ee07 3a90 	vmov	s15, r3
24008dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
24008dc8:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24008dca:	ee77 7a86 	vadd.f32	s15, s15, s12
24008dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008dd2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24008dd6:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
24008dda:	6c13      	ldr	r3, [r2, #64]	; 0x40
24008ddc:	f3c3 4306 	ubfx	r3, r3, #16, #7
24008de0:	ee07 3a90 	vmov	s15, r3
24008de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008de8:	ee77 7a86 	vadd.f32	s15, s15, s12
24008dec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008df0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24008df4:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
24008df8:	6c13      	ldr	r3, [r2, #64]	; 0x40
24008dfa:	f3c3 6306 	ubfx	r3, r3, #24, #7
24008dfe:	ee07 3a10 	vmov	s14, r3
24008e02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24008e06:	ee37 7a06 	vadd.f32	s14, s14, s12
24008e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008e12:	ee17 3a90 	vmov	r3, s15
24008e16:	6083      	str	r3, [r0, #8]
}
24008e18:	4770      	bx	lr
24008e1a:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
24008e1c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
24008e20:	6083      	str	r3, [r0, #8]
}
24008e22:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008e24:	6811      	ldr	r1, [r2, #0]
24008e26:	0689      	lsls	r1, r1, #26
24008e28:	d529      	bpl.n	24008e7e <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008e2a:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008e2c:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008e30:	4919      	ldr	r1, [pc, #100]	; (24008e98 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24008e36:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008e38:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008e40:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24008e94 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
24008e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008e48:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008e4a:	ee06 3a10 	vmov	s12, r3
24008e4e:	ee05 1a90 	vmov	s11, r1
24008e52:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24008e56:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24008e5a:	ee36 6a26 	vadd.f32	s12, s12, s13
24008e5e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24008e62:	eef0 7a46 	vmov.f32	s15, s12
24008e66:	eee7 7a05 	vfma.f32	s15, s14, s10
24008e6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
24008e6e:	e7a1      	b.n	24008db4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008e70:	ee07 3a90 	vmov	s15, r3
24008e74:	ed9f 5a09 	vldr	s10, [pc, #36]	; 24008e9c <HAL_RCCEx_GetPLL3ClockFreq+0x154>
24008e78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008e7c:	e787      	b.n	24008d8e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24008e7e:	ee07 3a90 	vmov	s15, r3
24008e82:	ed9f 5a07 	vldr	s10, [pc, #28]	; 24008ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
24008e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008e8a:	e780      	b.n	24008d8e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
24008e8c:	58024400 	.word	0x58024400
24008e90:	4a742400 	.word	0x4a742400
24008e94:	39000000 	.word	0x39000000
24008e98:	03d09000 	.word	0x03d09000
24008e9c:	4b742400 	.word	0x4b742400
24008ea0:	4c742400 	.word	0x4c742400

24008ea4 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008ea4:	4a51      	ldr	r2, [pc, #324]	; (24008fec <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
24008ea6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008ea8:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
24008eaa:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24008eac:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
24008eae:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
24008eb2:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008eb6:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
24008eb8:	d05e      	beq.n	24008f78 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008eba:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24008ebe:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24008ec2:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008ec6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24008eca:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24008ecc:	ee07 4a90 	vmov	s15, r4
24008ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24008ed4:	f000 8082 	beq.w	24008fdc <HAL_RCCEx_GetPLL1ClockFreq+0x138>
24008ed8:	2902      	cmp	r1, #2
24008eda:	d078      	beq.n	24008fce <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
24008edc:	2900      	cmp	r1, #0
24008ede:	d050      	beq.n	24008f82 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008ee0:	ee07 3a90 	vmov	s15, r3
24008ee4:	ed9f 5a42 	vldr	s10, [pc, #264]	; 24008ff0 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
24008ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008eec:	6b13      	ldr	r3, [r2, #48]	; 0x30
24008eee:	eec5 6a27 	vdiv.f32	s13, s10, s15
24008ef2:	ed9f 6a40 	vldr	s12, [pc, #256]	; 24008ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
24008ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008efa:	ee07 3a90 	vmov	s15, r3
24008efe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24008f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008f06:	ee77 7aa5 	vadd.f32	s15, s15, s11
24008f0a:	eee7 7a06 	vfma.f32	s15, s14, s12
24008f0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24008f12:	4a36      	ldr	r2, [pc, #216]	; (24008fec <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
24008f14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24008f18:	6b13      	ldr	r3, [r2, #48]	; 0x30
24008f1a:	f3c3 2346 	ubfx	r3, r3, #9, #7
24008f1e:	ee07 3a90 	vmov	s15, r3
24008f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
24008f26:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
24008f28:	ee77 7a86 	vadd.f32	s15, s15, s12
24008f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008f30:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24008f34:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
24008f38:	6b13      	ldr	r3, [r2, #48]	; 0x30
24008f3a:	f3c3 4306 	ubfx	r3, r3, #16, #7
24008f3e:	ee07 3a90 	vmov	s15, r3
24008f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008f46:	ee77 7a86 	vadd.f32	s15, s15, s12
24008f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008f4e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24008f52:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
24008f56:	6b13      	ldr	r3, [r2, #48]	; 0x30
24008f58:	f3c3 6306 	ubfx	r3, r3, #24, #7
24008f5c:	ee07 3a10 	vmov	s14, r3
24008f60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24008f64:	ee37 7a06 	vadd.f32	s14, s14, s12
24008f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24008f70:	ee17 3a90 	vmov	r3, s15
24008f74:	6083      	str	r3, [r0, #8]
}
24008f76:	4770      	bx	lr
24008f78:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
24008f7a:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
24008f7e:	6083      	str	r3, [r0, #8]
}
24008f80:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008f82:	6811      	ldr	r1, [r2, #0]
24008f84:	0689      	lsls	r1, r1, #26
24008f86:	d5ab      	bpl.n	24008ee0 <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008f88:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008f8a:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008f8e:	491a      	ldr	r1, [pc, #104]	; (24008ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008f90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24008f94:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008f96:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008f9e:	ed9f 5a15 	vldr	s10, [pc, #84]	; 24008ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
24008fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008fa6:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008fa8:	ee06 3a10 	vmov	s12, r3
24008fac:	ee05 1a90 	vmov	s11, r1
24008fb0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24008fb4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24008fb8:	ee36 6a26 	vadd.f32	s12, s12, s13
24008fbc:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24008fc0:	eef0 7a46 	vmov.f32	s15, s12
24008fc4:	eee7 7a05 	vfma.f32	s15, s14, s10
24008fc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
24008fcc:	e7a1      	b.n	24008f12 <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008fce:	ee07 3a90 	vmov	s15, r3
24008fd2:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 24008ffc <HAL_RCCEx_GetPLL1ClockFreq+0x158>
24008fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008fda:	e787      	b.n	24008eec <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24008fdc:	ee07 3a90 	vmov	s15, r3
24008fe0:	ed9f 5a07 	vldr	s10, [pc, #28]	; 24009000 <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
24008fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24008fe8:	e780      	b.n	24008eec <HAL_RCCEx_GetPLL1ClockFreq+0x48>
24008fea:	bf00      	nop
24008fec:	58024400 	.word	0x58024400
24008ff0:	4c742400 	.word	0x4c742400
24008ff4:	39000000 	.word	0x39000000
24008ff8:	03d09000 	.word	0x03d09000
24008ffc:	4b742400 	.word	0x4b742400
24009000:	4a742400 	.word	0x4a742400

24009004 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
24009004:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
24009008:	430b      	orrs	r3, r1
{
2400900a:	b500      	push	{lr}
2400900c:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
2400900e:	f000 8083 	beq.w	24009118 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
24009012:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
24009016:	430b      	orrs	r3, r1
24009018:	d038      	beq.n	2400908c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
2400901a:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
2400901e:	430b      	orrs	r3, r1
24009020:	f000 80e6 	beq.w	240091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
24009024:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
24009028:	430b      	orrs	r3, r1
2400902a:	f000 8089 	beq.w	24009140 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
2400902e:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
24009032:	430b      	orrs	r3, r1
24009034:	d060      	beq.n	240090f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
24009036:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
2400903a:	430b      	orrs	r3, r1
2400903c:	f000 8112 	beq.w	24009264 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24009040:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
24009044:	430b      	orrs	r3, r1
24009046:	f000 80a3 	beq.w	24009190 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
2400904a:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
2400904e:	430b      	orrs	r3, r1
24009050:	f000 80fa 	beq.w	24009248 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24009054:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
24009058:	430b      	orrs	r3, r1
2400905a:	f000 8143 	beq.w	240092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
2400905e:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
24009062:	4308      	orrs	r0, r1
24009064:	d137      	bne.n	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
24009066:	4a9a      	ldr	r2, [pc, #616]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009068:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400906a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
2400906e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009072:	f000 8084 	beq.w	2400917e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400907a:	f000 8157 	beq.w	2400932c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
2400907e:	bb53      	cbnz	r3, 240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24009080:	6810      	ldr	r0, [r2, #0]
24009082:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
24009086:	d044      	beq.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
24009088:	4892      	ldr	r0, [pc, #584]	; (240092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
2400908a:	e042      	b.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
2400908c:	4a90      	ldr	r2, [pc, #576]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400908e:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009090:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
24009094:	2b80      	cmp	r3, #128	; 0x80
24009096:	f000 80a6 	beq.w	240091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
2400909a:	d920      	bls.n	240090de <HAL_RCCEx_GetPeriphCLKFreq+0xda>
2400909c:	2bc0      	cmp	r3, #192	; 0xc0
2400909e:	d037      	beq.n	24009110 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
240090a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240090a4:	d117      	bne.n	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240090a6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240090a8:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240090aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
240090ae:	0749      	lsls	r1, r1, #29
240090b0:	d502      	bpl.n	240090b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
240090b2:	2b00      	cmp	r3, #0
240090b4:	f000 80c2 	beq.w	2400923c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
240090b8:	4a85      	ldr	r2, [pc, #532]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240090ba:	6812      	ldr	r2, [r2, #0]
240090bc:	05d0      	lsls	r0, r2, #23
240090be:	d503      	bpl.n	240090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
240090c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240090c4:	f000 8102 	beq.w	240092cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
240090c8:	4a81      	ldr	r2, [pc, #516]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240090ca:	6812      	ldr	r2, [r2, #0]
240090cc:	0391      	lsls	r1, r2, #14
240090ce:	d502      	bpl.n	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
240090d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240090d4:	d0d8      	beq.n	24009088 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
240090d6:	2000      	movs	r0, #0
}
240090d8:	b005      	add	sp, #20
240090da:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
240090de:	2b00      	cmp	r3, #0
240090e0:	d04d      	beq.n	2400917e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
240090e2:	2b40      	cmp	r3, #64	; 0x40
240090e4:	d1f7      	bne.n	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240090e6:	6810      	ldr	r0, [r2, #0]
240090e8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
240090ec:	d011      	beq.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240090ee:	a801      	add	r0, sp, #4
240090f0:	f7ff fd7c 	bl	24008bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240090f4:	9801      	ldr	r0, [sp, #4]
240090f6:	e00c      	b.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
240090f8:	4a75      	ldr	r2, [pc, #468]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240090fa:	6d13      	ldr	r3, [r2, #80]	; 0x50
240090fc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
24009100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24009104:	d06f      	beq.n	240091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009106:	d938      	bls.n	2400917a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
24009108:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
2400910c:	f040 8088 	bne.w	24009220 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
24009110:	4871      	ldr	r0, [pc, #452]	; (240092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
24009112:	b005      	add	sp, #20
24009114:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
24009118:	4b6d      	ldr	r3, [pc, #436]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400911a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400911c:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
24009120:	2b04      	cmp	r3, #4
24009122:	d8d8      	bhi.n	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
24009124:	a201      	add	r2, pc, #4	; (adr r2, 2400912c <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
24009126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2400912a:	bf00      	nop
2400912c:	240091cf 	.word	0x240091cf
24009130:	240091ab 	.word	0x240091ab
24009134:	240091bb 	.word	0x240091bb
24009138:	24009111 	.word	0x24009111
2400913c:	240091b7 	.word	0x240091b7
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
24009140:	4a63      	ldr	r2, [pc, #396]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009142:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009144:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
24009148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2400914c:	d04b      	beq.n	240091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
2400914e:	d944      	bls.n	240091da <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
24009150:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24009154:	d0dc      	beq.n	24009110 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
24009156:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2400915a:	d1bc      	bne.n	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400915c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400915e:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009164:	0752      	lsls	r2, r2, #29
24009166:	d5a7      	bpl.n	240090b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
24009168:	2b00      	cmp	r3, #0
2400916a:	d1a5      	bne.n	240090b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400916c:	4b58      	ldr	r3, [pc, #352]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400916e:	485b      	ldr	r0, [pc, #364]	; (240092dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
24009170:	681b      	ldr	r3, [r3, #0]
24009172:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24009176:	40d8      	lsrs	r0, r3
24009178:	e7cb      	b.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
2400917a:	2b00      	cmp	r3, #0
2400917c:	d154      	bne.n	24009228 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
2400917e:	6810      	ldr	r0, [r2, #0]
24009180:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
24009184:	d0c5      	beq.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24009186:	a801      	add	r0, sp, #4
24009188:	f7ff fe8c 	bl	24008ea4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2400918c:	9802      	ldr	r0, [sp, #8]
2400918e:	e7c0      	b.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
24009190:	4a4f      	ldr	r2, [pc, #316]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009192:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
24009198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400919c:	f000 80d0 	beq.w	24009340 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
240091a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
240091a4:	d0da      	beq.n	2400915c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
240091a6:	2b00      	cmp	r3, #0
240091a8:	d195      	bne.n	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240091aa:	4b49      	ldr	r3, [pc, #292]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240091ac:	6818      	ldr	r0, [r3, #0]
240091ae:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
240091b2:	d0ae      	beq.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
240091b4:	e79b      	b.n	240090ee <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
240091b6:	4a46      	ldr	r2, [pc, #280]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240091b8:	e775      	b.n	240090a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240091ba:	4b45      	ldr	r3, [pc, #276]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240091bc:	6818      	ldr	r0, [r3, #0]
240091be:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
240091c2:	d0a6      	beq.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240091c4:	a801      	add	r0, sp, #4
240091c6:	f7ff fdbf 	bl	24008d48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
240091ca:	9801      	ldr	r0, [sp, #4]
240091cc:	e7a1      	b.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
240091ce:	4b40      	ldr	r3, [pc, #256]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240091d0:	6818      	ldr	r0, [r3, #0]
240091d2:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
240091d6:	d09c      	beq.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
240091d8:	e7d5      	b.n	24009186 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
240091da:	2b00      	cmp	r3, #0
240091dc:	d0cf      	beq.n	2400917e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
240091de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
240091e2:	d080      	beq.n	240090e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
240091e4:	e777      	b.n	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240091e6:	6810      	ldr	r0, [r2, #0]
240091e8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
240091ec:	d091      	beq.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
240091ee:	e7e9      	b.n	240091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
240091f0:	4a37      	ldr	r2, [pc, #220]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240091f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
240091f4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
240091f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
240091fc:	d0f3      	beq.n	240091e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
240091fe:	d806      	bhi.n	2400920e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
24009200:	2b00      	cmp	r3, #0
24009202:	d0bc      	beq.n	2400917e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
24009204:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24009208:	f43f af6d 	beq.w	240090e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
2400920c:	e763      	b.n	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
2400920e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
24009212:	f43f af7d 	beq.w	24009110 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
24009216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2400921a:	f43f af44 	beq.w	240090a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
2400921e:	e75a      	b.n	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
24009220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24009224:	d09a      	beq.n	2400915c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
24009226:	e756      	b.n	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
24009228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2400922c:	f43f af5b 	beq.w	240090e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
24009230:	e751      	b.n	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24009232:	6810      	ldr	r0, [r2, #0]
24009234:	f010 0004 	ands.w	r0, r0, #4
24009238:	f43f af6b 	beq.w	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400923c:	6813      	ldr	r3, [r2, #0]
2400923e:	4827      	ldr	r0, [pc, #156]	; (240092dc <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
24009240:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24009244:	40d8      	lsrs	r0, r3
24009246:	e764      	b.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
24009248:	4b21      	ldr	r3, [pc, #132]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400924a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
2400924c:	03d2      	lsls	r2, r2, #15
2400924e:	d5bf      	bpl.n	240091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009250:	6818      	ldr	r0, [r3, #0]
24009252:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009256:	f43f af5c 	beq.w	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2400925a:	a801      	add	r0, sp, #4
2400925c:	f7ff fcc6 	bl	24008bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
24009260:	9803      	ldr	r0, [sp, #12]
24009262:	e756      	b.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
24009264:	4a1a      	ldr	r2, [pc, #104]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009266:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009268:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
2400926c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24009270:	d0df      	beq.n	24009232 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
24009272:	d810      	bhi.n	24009296 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
24009274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24009278:	d058      	beq.n	2400932c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
2400927a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2400927e:	d118      	bne.n	240092b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009280:	4b13      	ldr	r3, [pc, #76]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009282:	6818      	ldr	r0, [r3, #0]
24009284:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009288:	f43f af43 	beq.w	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400928c:	a801      	add	r0, sp, #4
2400928e:	f7ff fd5b 	bl	24008d48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24009292:	9802      	ldr	r0, [sp, #8]
24009294:	e73d      	b.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
24009296:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2400929a:	d012      	beq.n	240092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
2400929c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
240092a0:	f47f af19 	bne.w	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
240092a4:	4b0a      	ldr	r3, [pc, #40]	; (240092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240092a6:	6818      	ldr	r0, [r3, #0]
240092a8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
240092ac:	f43f af31 	beq.w	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
240092b0:	e6ea      	b.n	24009088 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
240092b2:	2b00      	cmp	r3, #0
240092b4:	f47f af0f 	bne.w	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
240092b8:	b005      	add	sp, #20
240092ba:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
240092be:	f7fe bd39 	b.w	24007d34 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
240092c2:	6810      	ldr	r0, [r2, #0]
240092c4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
240092c8:	f43f af23 	beq.w	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
240092cc:	4804      	ldr	r0, [pc, #16]	; (240092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
240092ce:	e720      	b.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
240092d0:	58024400 	.word	0x58024400
240092d4:	00f42400 	.word	0x00f42400
240092d8:	00bb8000 	.word	0x00bb8000
240092dc:	03d09000 	.word	0x03d09000
240092e0:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
240092e4:	4b28      	ldr	r3, [pc, #160]	; (24009388 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
240092e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240092e8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
240092ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
240092f0:	d037      	beq.n	24009362 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
240092f2:	d814      	bhi.n	2400931e <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
240092f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240092f8:	d03f      	beq.n	2400937a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
240092fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240092fe:	d0bf      	beq.n	24009280 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
24009300:	2b00      	cmp	r3, #0
24009302:	f47f aee8 	bne.w	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
24009306:	f7fe fcd5 	bl	24007cb4 <HAL_RCC_GetHCLKFreq>
2400930a:	4b1f      	ldr	r3, [pc, #124]	; (24009388 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400930c:	4a1f      	ldr	r2, [pc, #124]	; (2400938c <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
2400930e:	6a1b      	ldr	r3, [r3, #32]
24009310:	f3c3 1302 	ubfx	r3, r3, #4, #3
24009314:	5cd3      	ldrb	r3, [r2, r3]
24009316:	f003 031f 	and.w	r3, r3, #31
2400931a:	40d8      	lsrs	r0, r3
        break;
2400931c:	e6f9      	b.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
2400931e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24009322:	d017      	beq.n	24009354 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
24009324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24009328:	d0bc      	beq.n	240092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
2400932a:	e6d4      	b.n	240090d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400932c:	6810      	ldr	r0, [r2, #0]
2400932e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009332:	f43f aeee 	beq.w	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009336:	a801      	add	r0, sp, #4
24009338:	f7ff fc58 	bl	24008bec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
2400933c:	9802      	ldr	r0, [sp, #8]
2400933e:	e6e8      	b.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009340:	6810      	ldr	r0, [r2, #0]
24009342:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009346:	f43f aee4 	beq.w	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400934a:	a801      	add	r0, sp, #4
2400934c:	f7ff fcfc 	bl	24008d48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
24009350:	9803      	ldr	r0, [sp, #12]
24009352:	e6de      	b.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24009354:	4b0c      	ldr	r3, [pc, #48]	; (24009388 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009356:	6818      	ldr	r0, [r3, #0]
24009358:	f410 7080 	ands.w	r0, r0, #256	; 0x100
2400935c:	f43f aed9 	beq.w	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009360:	e7b4      	b.n	240092cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24009362:	4b09      	ldr	r3, [pc, #36]	; (24009388 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009364:	6818      	ldr	r0, [r3, #0]
24009366:	f010 0004 	ands.w	r0, r0, #4
2400936a:	f43f aed2 	beq.w	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400936e:	681b      	ldr	r3, [r3, #0]
24009370:	4807      	ldr	r0, [pc, #28]	; (24009390 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
24009372:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24009376:	40d8      	lsrs	r0, r3
24009378:	e6cb      	b.n	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400937a:	4b03      	ldr	r3, [pc, #12]	; (24009388 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400937c:	6818      	ldr	r0, [r3, #0]
2400937e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009382:	f43f aec6 	beq.w	24009112 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009386:	e7d6      	b.n	24009336 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
24009388:	58024400 	.word	0x58024400
2400938c:	240174c0 	.word	0x240174c0
24009390:	03d09000 	.word	0x03d09000

24009394 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
24009394:	2800      	cmp	r0, #0
24009396:	d03c      	beq.n	24009412 <HAL_RNG_Init+0x7e>
{
24009398:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
2400939a:	7a43      	ldrb	r3, [r0, #9]
2400939c:	4604      	mov	r4, r0
2400939e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
240093a2:	2b00      	cmp	r3, #0
240093a4:	d031      	beq.n	2400940a <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
240093a6:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
240093a8:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
240093aa:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
240093ac:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
240093ae:	6813      	ldr	r3, [r2, #0]
240093b0:	f023 0320 	bic.w	r3, r3, #32
240093b4:	430b      	orrs	r3, r1
240093b6:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
240093b8:	6822      	ldr	r2, [r4, #0]
240093ba:	6813      	ldr	r3, [r2, #0]
240093bc:	f043 0304 	orr.w	r3, r3, #4
240093c0:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
240093c2:	6823      	ldr	r3, [r4, #0]
240093c4:	685b      	ldr	r3, [r3, #4]
240093c6:	0658      	lsls	r0, r3, #25
240093c8:	d503      	bpl.n	240093d2 <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
240093ca:	2304      	movs	r3, #4
    return HAL_ERROR;
240093cc:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
240093ce:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
240093d0:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
240093d2:	f7fb f9fd 	bl	240047d0 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
240093d6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
240093d8:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
240093da:	685b      	ldr	r3, [r3, #4]
240093dc:	0759      	lsls	r1, r3, #29
240093de:	d50e      	bpl.n	240093fe <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
240093e0:	f7fb f9f6 	bl	240047d0 <HAL_GetTick>
240093e4:	1b43      	subs	r3, r0, r5
240093e6:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
240093e8:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
240093ea:	d9f6      	bls.n	240093da <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
240093ec:	685a      	ldr	r2, [r3, #4]
240093ee:	0752      	lsls	r2, r2, #29
240093f0:	d5f3      	bpl.n	240093da <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
240093f2:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
240093f4:	2302      	movs	r3, #2
        return HAL_ERROR;
240093f6:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
240093f8:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
240093fa:	60e3      	str	r3, [r4, #12]
}
240093fc:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
240093fe:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
24009400:	2201      	movs	r2, #1
  return HAL_OK;
24009402:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
24009404:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
24009406:	60e3      	str	r3, [r4, #12]
}
24009408:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
2400940a:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
2400940c:	f7fa fce4 	bl	24003dd8 <HAL_RNG_MspInit>
24009410:	e7c9      	b.n	240093a6 <HAL_RNG_Init+0x12>
    return HAL_ERROR;
24009412:	2001      	movs	r0, #1
}
24009414:	4770      	bx	lr
24009416:	bf00      	nop

24009418 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
24009418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
2400941a:	7a03      	ldrb	r3, [r0, #8]
2400941c:	2b01      	cmp	r3, #1
2400941e:	d027      	beq.n	24009470 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
24009420:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
24009422:	2201      	movs	r2, #1
24009424:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
24009426:	4293      	cmp	r3, r2
24009428:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
2400942a:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
2400942c:	d006      	beq.n	2400943c <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
2400942e:	2304      	movs	r3, #4
    status = HAL_ERROR;
24009430:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
24009432:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
24009434:	2300      	movs	r3, #0
24009436:	7223      	strb	r3, [r4, #8]

  return status;
}
24009438:	4630      	mov	r0, r6
2400943a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
2400943c:	2302      	movs	r3, #2
2400943e:	460d      	mov	r5, r1
24009440:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
24009442:	f7fb f9c5 	bl	240047d0 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24009446:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
24009448:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400944a:	685a      	ldr	r2, [r3, #4]
2400944c:	07d2      	lsls	r2, r2, #31
2400944e:	d412      	bmi.n	24009476 <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009450:	f7fb f9be 	bl	240047d0 <HAL_GetTick>
24009454:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24009456:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009458:	2802      	cmp	r0, #2
2400945a:	d9f6      	bls.n	2400944a <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400945c:	685a      	ldr	r2, [r3, #4]
2400945e:	f012 0201 	ands.w	r2, r2, #1
24009462:	d1f2      	bne.n	2400944a <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
24009464:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24009466:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
24009468:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
2400946a:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400946c:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
2400946e:	e7e3      	b.n	24009438 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
24009470:	2602      	movs	r6, #2
}
24009472:	4630      	mov	r0, r6
24009474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
24009476:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
24009478:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
2400947a:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
2400947c:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
2400947e:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
24009480:	7262      	strb	r2, [r4, #9]
24009482:	e7d7      	b.n	24009434 <HAL_RNG_GenerateRandomNumber+0x1c>

24009484 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
24009484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24009486:	4ba3      	ldr	r3, [pc, #652]	; (24009714 <HAL_SAI_Init.part.0+0x290>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
24009488:	4605      	mov	r5, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2400948a:	6802      	ldr	r2, [r0, #0]
2400948c:	429a      	cmp	r2, r3
2400948e:	d01c      	beq.n	240094ca <HAL_SAI_Init.part.0+0x46>
24009490:	3320      	adds	r3, #32
24009492:	429a      	cmp	r2, r3
24009494:	d019      	beq.n	240094ca <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24009496:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
2400949a:	429a      	cmp	r2, r3
2400949c:	d04d      	beq.n	2400953a <HAL_SAI_Init.part.0+0xb6>
2400949e:	3320      	adds	r3, #32
240094a0:	429a      	cmp	r2, r3
240094a2:	d04a      	beq.n	2400953a <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
240094a4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
240094a8:	429a      	cmp	r2, r3
240094aa:	f000 812f 	beq.w	2400970c <HAL_SAI_Init.part.0+0x288>
240094ae:	3320      	adds	r3, #32
240094b0:	429a      	cmp	r2, r3
240094b2:	f000 812b 	beq.w	2400970c <HAL_SAI_Init.part.0+0x288>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
240094b6:	4b98      	ldr	r3, [pc, #608]	; (24009718 <HAL_SAI_Init.part.0+0x294>)
240094b8:	429a      	cmp	r2, r3
240094ba:	f000 8129 	beq.w	24009710 <HAL_SAI_Init.part.0+0x28c>
240094be:	3320      	adds	r3, #32
240094c0:	429a      	cmp	r2, r3
240094c2:	f000 8125 	beq.w	24009710 <HAL_SAI_Init.part.0+0x28c>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
240094c6:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
240094c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
240094ca:	4c94      	ldr	r4, [pc, #592]	; (2400971c <HAL_SAI_Init.part.0+0x298>)
  if (hsai->State == HAL_SAI_STATE_RESET)
240094cc:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
240094d0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
240094d4:	2b00      	cmp	r3, #0
240094d6:	d037      	beq.n	24009548 <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
240094d8:	4b91      	ldr	r3, [pc, #580]	; (24009720 <HAL_SAI_Init.part.0+0x29c>)
240094da:	4992      	ldr	r1, [pc, #584]	; (24009724 <HAL_SAI_Init.part.0+0x2a0>)
240094dc:	681b      	ldr	r3, [r3, #0]
240094de:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
240094e2:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
240094e4:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
240094e6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
240094ea:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
240094ec:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
240094ee:	2b00      	cmp	r3, #0
240094f0:	d031      	beq.n	24009556 <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
240094f2:	682a      	ldr	r2, [r5, #0]
    count--;
240094f4:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
240094f6:	6812      	ldr	r2, [r2, #0]
240094f8:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
240094fc:	d1f7      	bne.n	240094ee <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
240094fe:	68eb      	ldr	r3, [r5, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
24009500:	2102      	movs	r1, #2
  switch (hsai->Init.SynchroExt)
24009502:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
24009504:	f885 1091 	strb.w	r1, [r5, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
24009508:	f000 8150 	beq.w	240097ac <HAL_SAI_Init.part.0+0x328>
2400950c:	428b      	cmp	r3, r1
2400950e:	bf19      	ittee	ne
24009510:	460e      	movne	r6, r1
24009512:	2003      	movne	r0, #3
24009514:	2023      	moveq	r0, #35	; 0x23
24009516:	2622      	moveq	r6, #34	; 0x22
24009518:	bf15      	itete	ne
2400951a:	2701      	movne	r7, #1
2400951c:	2721      	moveq	r7, #33	; 0x21
2400951e:	2100      	movne	r1, #0
24009520:	2120      	moveq	r1, #32
  switch (hsai->Init.Synchro)
24009522:	68ab      	ldr	r3, [r5, #8]
24009524:	3b01      	subs	r3, #1
24009526:	2b04      	cmp	r3, #4
24009528:	f200 8180 	bhi.w	2400982c <HAL_SAI_Init.part.0+0x3a8>
2400952c:	e8df f013 	tbh	[pc, r3, lsl #1]
24009530:	001c00e3 	.word	0x001c00e3
24009534:	001b00ea 	.word	0x001b00ea
24009538:	00e6      	.short	0x00e6
  if (hsai->State == HAL_SAI_STATE_RESET)
2400953a:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
    SaiBaseAddress = SAI2;
2400953e:	4c7a      	ldr	r4, [pc, #488]	; (24009728 <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
24009540:	f003 01ff 	and.w	r1, r3, #255	; 0xff
24009544:	2b00      	cmp	r3, #0
24009546:	d1c7      	bne.n	240094d8 <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
24009548:	4628      	mov	r0, r5
    hsai->Lock = HAL_UNLOCKED;
2400954a:	f885 1090 	strb.w	r1, [r5, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
2400954e:	f7fa fca9 	bl	24003ea4 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
24009552:	682a      	ldr	r2, [r5, #0]
24009554:	e7c0      	b.n	240094d8 <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009556:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    return HAL_ERROR;
2400955a:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400955c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24009560:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
24009564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
24009566:	4631      	mov	r1, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
24009568:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
2400956c:	6021      	str	r1, [r4, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
2400956e:	6a2b      	ldr	r3, [r5, #32]
24009570:	2b00      	cmp	r3, #0
24009572:	d046      	beq.n	24009602 <HAL_SAI_Init.part.0+0x17e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24009574:	682b      	ldr	r3, [r5, #0]
24009576:	4967      	ldr	r1, [pc, #412]	; (24009714 <HAL_SAI_Init.part.0+0x290>)
24009578:	428b      	cmp	r3, r1
2400957a:	f000 812b 	beq.w	240097d4 <HAL_SAI_Init.part.0+0x350>
2400957e:	3120      	adds	r1, #32
24009580:	428b      	cmp	r3, r1
24009582:	f000 8127 	beq.w	240097d4 <HAL_SAI_Init.part.0+0x350>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24009586:	4969      	ldr	r1, [pc, #420]	; (2400972c <HAL_SAI_Init.part.0+0x2a8>)
24009588:	428b      	cmp	r3, r1
2400958a:	f000 8133 	beq.w	240097f4 <HAL_SAI_Init.part.0+0x370>
2400958e:	3120      	adds	r1, #32
24009590:	428b      	cmp	r3, r1
24009592:	f000 812f 	beq.w	240097f4 <HAL_SAI_Init.part.0+0x370>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24009596:	4966      	ldr	r1, [pc, #408]	; (24009730 <HAL_SAI_Init.part.0+0x2ac>)
24009598:	428b      	cmp	r3, r1
2400959a:	f000 8123 	beq.w	240097e4 <HAL_SAI_Init.part.0+0x360>
2400959e:	3120      	adds	r1, #32
240095a0:	428b      	cmp	r3, r1
240095a2:	f000 811f 	beq.w	240097e4 <HAL_SAI_Init.part.0+0x360>
    if (hsai->Instance == SAI4_Block_A)
240095a6:	495c      	ldr	r1, [pc, #368]	; (24009718 <HAL_SAI_Init.part.0+0x294>)
240095a8:	428b      	cmp	r3, r1
240095aa:	f000 8135 	beq.w	24009818 <HAL_SAI_Init.part.0+0x394>
    if (hsai->Instance == SAI4_Block_B)
240095ae:	4961      	ldr	r1, [pc, #388]	; (24009734 <HAL_SAI_Init.part.0+0x2b0>)
240095b0:	428b      	cmp	r3, r1
240095b2:	f000 812a 	beq.w	2400980a <HAL_SAI_Init.part.0+0x386>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
240095b6:	69ab      	ldr	r3, [r5, #24]
240095b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
240095bc:	f000 80fb 	beq.w	240097b6 <HAL_SAI_Init.part.0+0x332>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
240095c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
240095c2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
240095c6:	6a29      	ldr	r1, [r5, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
240095c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
240095cc:	ea4f 0342 	mov.w	r3, r2, lsl #1
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
240095d0:	bf0c      	ite	eq
240095d2:	2202      	moveq	r2, #2
240095d4:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
240095d6:	fb01 f202 	mul.w	r2, r1, r2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
240095da:	6c69      	ldr	r1, [r5, #68]	; 0x44
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
240095dc:	0212      	lsls	r2, r2, #8
240095de:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
240095e2:	4a55      	ldr	r2, [pc, #340]	; (24009738 <HAL_SAI_Init.part.0+0x2b4>)
240095e4:	fba2 0203 	umull	r0, r2, r2, r3
240095e8:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
240095ea:	eb02 0082 	add.w	r0, r2, r2, lsl #2
240095ee:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
240095f2:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
240095f4:	bf08      	it	eq
240095f6:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
240095f8:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
240095fa:	626a      	str	r2, [r5, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
240095fc:	d101      	bne.n	24009602 <HAL_SAI_Init.part.0+0x17e>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
240095fe:	0852      	lsrs	r2, r2, #1
24009600:	626a      	str	r2, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009602:	686b      	ldr	r3, [r5, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
24009604:	6d2f      	ldr	r7, [r5, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009606:	f033 0302 	bics.w	r3, r3, #2
2400960a:	f040 80c8 	bne.w	2400979e <HAL_SAI_Init.part.0+0x31a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
2400960e:	3f01      	subs	r7, #1
24009610:	bf18      	it	ne
24009612:	2701      	movne	r7, #1
24009614:	027f      	lsls	r7, r7, #9
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24009616:	f7fb f8f3 	bl	24004800 <HAL_GetREVID>
2400961a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
2400961e:	682a      	ldr	r2, [r5, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24009620:	f0c0 80a9 	bcc.w	24009776 <HAL_SAI_Init.part.0+0x2f2>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
24009624:	6811      	ldr	r1, [r2, #0]
24009626:	4b45      	ldr	r3, [pc, #276]	; (2400973c <HAL_SAI_Init.part.0+0x2b8>)
24009628:	400b      	ands	r3, r1
2400962a:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400962c:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400962e:	e9d5 2300 	ldrd	r2, r3, [r5]
24009632:	430b      	orrs	r3, r1
24009634:	6ca9      	ldr	r1, [r5, #72]	; 0x48
24009636:	430b      	orrs	r3, r1
24009638:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
2400963a:	430b      	orrs	r3, r1
2400963c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
2400963e:	430b      	orrs	r3, r1
24009640:	6969      	ldr	r1, [r5, #20]
24009642:	430b      	orrs	r3, r1
24009644:	69a9      	ldr	r1, [r5, #24]
24009646:	430b      	orrs	r3, r1
24009648:	6aa9      	ldr	r1, [r5, #40]	; 0x28
2400964a:	430b      	orrs	r3, r1
2400964c:	6929      	ldr	r1, [r5, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400964e:	430b      	orrs	r3, r1
24009650:	6811      	ldr	r1, [r2, #0]
24009652:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
24009654:	6a69      	ldr	r1, [r5, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009656:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
2400965a:	4333      	orrs	r3, r6
2400965c:	433b      	orrs	r3, r7
2400965e:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
24009660:	682a      	ldr	r2, [r5, #0]
24009662:	4b37      	ldr	r3, [pc, #220]	; (24009740 <HAL_SAI_Init.part.0+0x2bc>)
24009664:	6851      	ldr	r1, [r2, #4]
24009666:	400b      	ands	r3, r1
24009668:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
2400966a:	6b29      	ldr	r1, [r5, #48]	; 0x30
2400966c:	69eb      	ldr	r3, [r5, #28]
2400966e:	682a      	ldr	r2, [r5, #0]
24009670:	430b      	orrs	r3, r1
24009672:	6b69      	ldr	r1, [r5, #52]	; 0x34
24009674:	430b      	orrs	r3, r1
24009676:	6851      	ldr	r1, [r2, #4]
24009678:	430b      	orrs	r3, r1
2400967a:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
2400967c:	682a      	ldr	r2, [r5, #0]
2400967e:	4b31      	ldr	r3, [pc, #196]	; (24009744 <HAL_SAI_Init.part.0+0x2c0>)
24009680:	6891      	ldr	r1, [r2, #8]
24009682:	400b      	ands	r3, r1
24009684:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24009686:	6dea      	ldr	r2, [r5, #92]	; 0x5c
24009688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
2400968a:	6829      	ldr	r1, [r5, #0]
2400968c:	4313      	orrs	r3, r2
2400968e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
24009690:	6888      	ldr	r0, [r1, #8]
24009692:	4313      	orrs	r3, r2
24009694:	6d6a      	ldr	r2, [r5, #84]	; 0x54
24009696:	4303      	orrs	r3, r0
24009698:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
2400969a:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
2400969e:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
240096a0:	6daa      	ldr	r2, [r5, #88]	; 0x58
240096a2:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
240096a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
240096a8:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
240096aa:	682a      	ldr	r2, [r5, #0]
240096ac:	68d3      	ldr	r3, [r2, #12]
240096ae:	4003      	ands	r3, r0
240096b0:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
240096b2:	6829      	ldr	r1, [r5, #0]
240096b4:	e9d5 301a 	ldrd	r3, r0, [r5, #104]	; 0x68
240096b8:	68ca      	ldr	r2, [r1, #12]
240096ba:	4303      	orrs	r3, r0
240096bc:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
240096be:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
240096c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
240096c4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
240096c6:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
240096c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
240096cc:	4a11      	ldr	r2, [pc, #68]	; (24009714 <HAL_SAI_Init.part.0+0x290>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
240096ce:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
240096d0:	682b      	ldr	r3, [r5, #0]
240096d2:	4293      	cmp	r3, r2
240096d4:	d03c      	beq.n	24009750 <HAL_SAI_Init.part.0+0x2cc>
240096d6:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
240096da:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
240096de:	4293      	cmp	r3, r2
240096e0:	d036      	beq.n	24009750 <HAL_SAI_Init.part.0+0x2cc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
240096e2:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
240096e4:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
240096e6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return HAL_OK;
240096ea:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
240096ec:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
  __HAL_UNLOCK(hsai);
240096f0:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
240096f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
240096f6:	f44f 6680 	mov.w	r6, #1024	; 0x400
240096fa:	e737      	b.n	2400956c <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
240096fc:	4601      	mov	r1, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
240096fe:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
24009702:	e733      	b.n	2400956c <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
24009704:	4639      	mov	r1, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
24009706:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
2400970a:	e72f      	b.n	2400956c <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
2400970c:	4c0e      	ldr	r4, [pc, #56]	; (24009748 <HAL_SAI_Init.part.0+0x2c4>)
2400970e:	e6dd      	b.n	240094cc <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
24009710:	4c0e      	ldr	r4, [pc, #56]	; (2400974c <HAL_SAI_Init.part.0+0x2c8>)
24009712:	e6db      	b.n	240094cc <HAL_SAI_Init.part.0+0x48>
24009714:	40015804 	.word	0x40015804
24009718:	58005404 	.word	0x58005404
2400971c:	40015800 	.word	0x40015800
24009720:	20000748 	.word	0x20000748
24009724:	95cbec1b 	.word	0x95cbec1b
24009728:	40015c00 	.word	0x40015c00
2400972c:	40015c04 	.word	0x40015c04
24009730:	40016004 	.word	0x40016004
24009734:	58005424 	.word	0x58005424
24009738:	cccccccd 	.word	0xcccccccd
2400973c:	f005c010 	.word	0xf005c010
24009740:	ffff1ff0 	.word	0xffff1ff0
24009744:	fff88000 	.word	0xfff88000
24009748:	40016000 	.word	0x40016000
2400974c:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
24009750:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009752:	f023 0301 	bic.w	r3, r3, #1
24009756:	6463      	str	r3, [r4, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
24009758:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
2400975c:	2b01      	cmp	r3, #1
2400975e:	d1c0      	bne.n	240096e2 <HAL_SAI_Init.part.0+0x25e>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
24009760:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
24009764:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
24009766:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
2400976a:	6463      	str	r3, [r4, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
2400976c:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400976e:	f043 0301 	orr.w	r3, r3, #1
24009772:	6463      	str	r3, [r4, #68]	; 0x44
24009774:	e7b5      	b.n	240096e2 <HAL_SAI_Init.part.0+0x25e>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
24009776:	6811      	ldr	r1, [r2, #0]
24009778:	4b2d      	ldr	r3, [pc, #180]	; (24009830 <HAL_SAI_Init.part.0+0x3ac>)
2400977a:	400b      	ands	r3, r1
2400977c:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
2400977e:	6c69      	ldr	r1, [r5, #68]	; 0x44
24009780:	e9d5 2300 	ldrd	r2, r3, [r5]
24009784:	430b      	orrs	r3, r1
24009786:	6ca9      	ldr	r1, [r5, #72]	; 0x48
24009788:	430b      	orrs	r3, r1
2400978a:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
2400978c:	430b      	orrs	r3, r1
2400978e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
24009790:	430b      	orrs	r3, r1
24009792:	6969      	ldr	r1, [r5, #20]
24009794:	430b      	orrs	r3, r1
24009796:	69a9      	ldr	r1, [r5, #24]
24009798:	430b      	orrs	r3, r1
2400979a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
2400979c:	e757      	b.n	2400964e <HAL_SAI_Init.part.0+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
2400979e:	f1a7 0701 	sub.w	r7, r7, #1
240097a2:	fab7 f787 	clz	r7, r7
240097a6:	097f      	lsrs	r7, r7, #5
240097a8:	027f      	lsls	r7, r7, #9
240097aa:	e734      	b.n	24009616 <HAL_SAI_Init.part.0+0x192>
  switch (hsai->Init.SynchroExt)
240097ac:	2013      	movs	r0, #19
240097ae:	2612      	movs	r6, #18
240097b0:	2711      	movs	r7, #17
240097b2:	2110      	movs	r1, #16
240097b4:	e6b5      	b.n	24009522 <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
240097b6:	6c69      	ldr	r1, [r5, #68]	; 0x44
240097b8:	2904      	cmp	r1, #4
240097ba:	d035      	beq.n	24009828 <HAL_SAI_Init.part.0+0x3a4>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
240097bc:	2908      	cmp	r1, #8
240097be:	d021      	beq.n	24009804 <HAL_SAI_Init.part.0+0x380>
        tmpframelength = hsai->FrameInit.FrameLength;
240097c0:	6d68      	ldr	r0, [r5, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
240097c2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
240097c6:	0053      	lsls	r3, r2, #1
240097c8:	6a2a      	ldr	r2, [r5, #32]
240097ca:	fb00 f202 	mul.w	r2, r0, r2
240097ce:	fbb3 f3f2 	udiv	r3, r3, r2
240097d2:	e706      	b.n	240095e2 <HAL_SAI_Init.part.0+0x15e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
240097d4:	f44f 7080 	mov.w	r0, #256	; 0x100
240097d8:	2100      	movs	r1, #0
240097da:	f7ff fc13 	bl	24009004 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
240097de:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
240097e0:	4602      	mov	r2, r0
240097e2:	e6d0      	b.n	24009586 <HAL_SAI_Init.part.0+0x102>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
240097e4:	f44f 7000 	mov.w	r0, #512	; 0x200
240097e8:	2100      	movs	r1, #0
240097ea:	f7ff fc0b 	bl	24009004 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
240097ee:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
240097f0:	4602      	mov	r2, r0
240097f2:	e6d8      	b.n	240095a6 <HAL_SAI_Init.part.0+0x122>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
240097f4:	f44f 7000 	mov.w	r0, #512	; 0x200
240097f8:	2100      	movs	r1, #0
240097fa:	f7ff fc03 	bl	24009004 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
240097fe:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
24009800:	4602      	mov	r2, r0
24009802:	e6c8      	b.n	24009596 <HAL_SAI_Init.part.0+0x112>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
24009804:	f44f 7080 	mov.w	r0, #256	; 0x100
24009808:	e7db      	b.n	240097c2 <HAL_SAI_Init.part.0+0x33e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
2400980a:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400980e:	2100      	movs	r1, #0
24009810:	f7ff fbf8 	bl	24009004 <HAL_RCCEx_GetPeriphCLKFreq>
24009814:	4602      	mov	r2, r0
24009816:	e6ce      	b.n	240095b6 <HAL_SAI_Init.part.0+0x132>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
24009818:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400981c:	2100      	movs	r1, #0
2400981e:	f7ff fbf1 	bl	24009004 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
24009822:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
24009824:	4602      	mov	r2, r0
24009826:	e6c2      	b.n	240095ae <HAL_SAI_Init.part.0+0x12a>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
24009828:	2040      	movs	r0, #64	; 0x40
2400982a:	e7ca      	b.n	240097c2 <HAL_SAI_Init.part.0+0x33e>
      syncen_bits = 0;
2400982c:	2600      	movs	r6, #0
2400982e:	e69d      	b.n	2400956c <HAL_SAI_Init.part.0+0xe8>
24009830:	f805c010 	.word	0xf805c010

24009834 <HAL_SAI_InitProtocol>:
  switch (protocol)
24009834:	2902      	cmp	r1, #2
{
24009836:	b538      	push	{r3, r4, r5, lr}
24009838:	4604      	mov	r4, r0
  switch (protocol)
2400983a:	d935      	bls.n	240098a8 <HAL_SAI_InitProtocol+0x74>
2400983c:	1ec8      	subs	r0, r1, #3
2400983e:	2801      	cmp	r0, #1
24009840:	d830      	bhi.n	240098a4 <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24009842:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
24009844:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24009846:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
24009848:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
2400984a:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
2400984c:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
2400984e:	f64f 70ff 	movw	r0, #65535	; 0xffff
24009852:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009854:	6860      	ldr	r0, [r4, #4]
24009856:	f030 0002 	bics.w	r0, r0, #2
2400985a:	bf0c      	ite	eq
2400985c:	2501      	moveq	r5, #1
2400985e:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
24009860:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
24009862:	f44f 3100 	mov.w	r1, #131072	; 0x20000
24009866:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
24009868:	bf0c      	ite	eq
2400986a:	2001      	moveq	r0, #1
2400986c:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
2400986e:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
24009870:	f44f 2180 	mov.w	r1, #262144	; 0x40000
24009874:	65a0      	str	r0, [r4, #88]	; 0x58
24009876:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
24009878:	2a03      	cmp	r2, #3
2400987a:	d813      	bhi.n	240098a4 <HAL_SAI_InitProtocol+0x70>
2400987c:	e8df f002 	tbb	[pc, r2]
24009880:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
24009884:	6823      	ldr	r3, [r4, #0]
24009886:	4a47      	ldr	r2, [pc, #284]	; (240099a4 <HAL_SAI_InitProtocol+0x170>)
24009888:	4293      	cmp	r3, r2
2400988a:	d005      	beq.n	24009898 <HAL_SAI_InitProtocol+0x64>
2400988c:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
24009890:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
24009894:	4293      	cmp	r3, r2
24009896:	d105      	bne.n	240098a4 <HAL_SAI_InitProtocol+0x70>
24009898:	6863      	ldr	r3, [r4, #4]
2400989a:	2b01      	cmp	r3, #1
2400989c:	d102      	bne.n	240098a4 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
2400989e:	6c63      	ldr	r3, [r4, #68]	; 0x44
240098a0:	2b00      	cmp	r3, #0
240098a2:	d037      	beq.n	24009914 <HAL_SAI_InitProtocol+0xe0>
}
240098a4:	2001      	movs	r0, #1
240098a6:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
240098a8:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
240098aa:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
240098ac:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
240098ae:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
240098b0:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
240098b2:	6860      	ldr	r0, [r4, #4]
240098b4:	f030 0002 	bics.w	r0, r0, #2
240098b8:	bf14      	ite	ne
240098ba:	2001      	movne	r0, #1
240098bc:	2000      	moveq	r0, #0
240098be:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
240098c0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
240098c4:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
240098c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
240098ca:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
240098cc:	f013 0001 	ands.w	r0, r3, #1
240098d0:	d1e8      	bne.n	240098a4 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
240098d2:	b949      	cbnz	r1, 240098e8 <HAL_SAI_InitProtocol+0xb4>
240098d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
240098d8:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
240098dc:	2a03      	cmp	r2, #3
240098de:	d8e1      	bhi.n	240098a4 <HAL_SAI_InitProtocol+0x70>
240098e0:	e8df f002 	tbb	[pc, r2]
240098e4:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
240098e8:	6660      	str	r0, [r4, #100]	; 0x64
240098ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
240098ee:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
240098f0:	2a03      	cmp	r2, #3
240098f2:	d8d7      	bhi.n	240098a4 <HAL_SAI_InitProtocol+0x70>
240098f4:	e8df f002 	tbb	[pc, r2]
240098f8:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
240098fc:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
240098fe:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24009900:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009902:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
24009904:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24009906:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24009908:	f7fa ff7a 	bl	24004800 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
2400990c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
24009910:	2b01      	cmp	r3, #1
24009912:	d0b7      	beq.n	24009884 <HAL_SAI_InitProtocol+0x50>
24009914:	4620      	mov	r0, r4
}
24009916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2400991a:	f7ff bdb3 	b.w	24009484 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400991e:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009920:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009922:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009924:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009926:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
24009928:	e7ee      	b.n	24009908 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400992a:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
2400992c:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
2400992e:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
24009930:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009932:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009934:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
24009936:	e7e7      	b.n	24009908 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
24009938:	21e0      	movs	r1, #224	; 0xe0
2400993a:	e7f7      	b.n	2400992c <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
2400993c:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
2400993e:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009940:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009942:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
24009944:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009946:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009948:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400994a:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
2400994e:	e7db      	b.n	24009908 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009950:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
24009952:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009954:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009956:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009958:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
2400995c:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400995e:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009962:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009964:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009966:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009968:	d1ce      	bne.n	24009908 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
2400996a:	2308      	movs	r3, #8
2400996c:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
2400996e:	e7cb      	b.n	24009908 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009970:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009972:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009974:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009976:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
2400997a:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
2400997c:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009980:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009982:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009986:	d1bf      	bne.n	24009908 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
24009988:	2310      	movs	r3, #16
2400998a:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
2400998c:	e7bc      	b.n	24009908 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
2400998e:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009990:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24009992:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
24009994:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009996:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
24009998:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
2400999a:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
2400999c:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
240099a0:	e7b2      	b.n	24009908 <HAL_SAI_InitProtocol+0xd4>
240099a2:	bf00      	nop
240099a4:	40015804 	.word	0x40015804

240099a8 <HAL_SAI_Transmit_DMA>:
{
240099a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
240099ac:	4615      	mov	r5, r2
240099ae:	f04f 0800 	mov.w	r8, #0
240099b2:	460f      	mov	r7, r1
240099b4:	4604      	mov	r4, r0
240099b6:	f365 080f 	bfi	r8, r5, #0, #16
  uint32_t tickstart = HAL_GetTick();
240099ba:	f7fa ff09 	bl	240047d0 <HAL_GetTick>
240099be:	f365 481f 	bfi	r8, r5, #16, #16
  if ((pData == NULL) || (Size == 0U))
240099c2:	2f00      	cmp	r7, #0
240099c4:	d066      	beq.n	24009a94 <HAL_SAI_Transmit_DMA+0xec>
240099c6:	fab5 f985 	clz	r9, r5
240099ca:	ea4f 1959 	mov.w	r9, r9, lsr #5
240099ce:	2d00      	cmp	r5, #0
240099d0:	d060      	beq.n	24009a94 <HAL_SAI_Transmit_DMA+0xec>
  if (hsai->State == HAL_SAI_STATE_READY)
240099d2:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
240099d6:	2b01      	cmp	r3, #1
240099d8:	fa5f fa83 	uxtb.w	sl, r3
240099dc:	d155      	bne.n	24009a8a <HAL_SAI_Transmit_DMA+0xe2>
    __HAL_LOCK(hsai);
240099de:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
240099e2:	2b01      	cmp	r3, #1
240099e4:	d051      	beq.n	24009a8a <HAL_SAI_Transmit_DMA+0xe2>
    hsai->State = HAL_SAI_STATE_BUSY_TX;
240099e6:	2312      	movs	r3, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
240099e8:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
240099ec:	4a39      	ldr	r2, [pc, #228]	; (24009ad4 <HAL_SAI_Transmit_DMA+0x12c>)
240099ee:	4606      	mov	r6, r0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
240099f0:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
240099f4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    __HAL_LOCK(hsai);
240099f8:	f884 a090 	strb.w	sl, [r4, #144]	; 0x90
    hsai->XferSize = Size;
240099fc:	e9c4 781e 	strd	r7, r8, [r4, #120]	; 0x78
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
24009a00:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
24009a02:	4a35      	ldr	r2, [pc, #212]	; (24009ad8 <HAL_SAI_Transmit_DMA+0x130>)
24009a04:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24009a08:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
24009a0a:	4a34      	ldr	r2, [pc, #208]	; (24009adc <HAL_SAI_Transmit_DMA+0x134>)
24009a0c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24009a10:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
24009a12:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24009a16:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
24009a1a:	6822      	ldr	r2, [r4, #0]
24009a1c:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
24009a20:	321c      	adds	r2, #28
24009a22:	6fa1      	ldr	r1, [r4, #120]	; 0x78
24009a24:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
24009a28:	f7fb faee 	bl	24005008 <HAL_DMA_Start_IT>
24009a2c:	2800      	cmp	r0, #0
24009a2e:	d13f      	bne.n	24009ab0 <HAL_SAI_Transmit_DMA+0x108>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009a30:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009a32:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009a34:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009a36:	d032      	beq.n	24009a9e <HAL_SAI_Transmit_DMA+0xf6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009a38:	2205      	movs	r2, #5
24009a3a:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009a3c:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
24009a3e:	2b01      	cmp	r3, #1
24009a40:	bf98      	it	ls
24009a42:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009a44:	6821      	ldr	r1, [r4, #0]
24009a46:	690b      	ldr	r3, [r1, #16]
24009a48:	4313      	orrs	r3, r2
24009a4a:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
24009a4c:	6822      	ldr	r2, [r4, #0]
24009a4e:	6813      	ldr	r3, [r2, #0]
24009a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009a54:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
24009a56:	e005      	b.n	24009a64 <HAL_SAI_Transmit_DMA+0xbc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
24009a58:	f7fa feba 	bl	240047d0 <HAL_GetTick>
24009a5c:	1b83      	subs	r3, r0, r6
24009a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24009a62:	d82a      	bhi.n	24009aba <HAL_SAI_Transmit_DMA+0x112>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
24009a64:	6822      	ldr	r2, [r4, #0]
24009a66:	6955      	ldr	r5, [r2, #20]
24009a68:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
24009a6c:	d0f4      	beq.n	24009a58 <HAL_SAI_Transmit_DMA+0xb0>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
24009a6e:	6813      	ldr	r3, [r2, #0]
24009a70:	03db      	lsls	r3, r3, #15
24009a72:	d403      	bmi.n	24009a7c <HAL_SAI_Transmit_DMA+0xd4>
      __HAL_SAI_ENABLE(hsai);
24009a74:	6813      	ldr	r3, [r2, #0]
24009a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24009a7a:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
24009a7c:	2300      	movs	r3, #0
    return HAL_OK;
24009a7e:	469a      	mov	sl, r3
    __HAL_UNLOCK(hsai);
24009a80:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
24009a84:	4650      	mov	r0, sl
24009a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
24009a8a:	f04f 0a02 	mov.w	sl, #2
}
24009a8e:	4650      	mov	r0, sl
24009a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return  HAL_ERROR;
24009a94:	f04f 0a01 	mov.w	sl, #1
}
24009a98:	4650      	mov	r0, sl
24009a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009a9e:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009aa2:	2a01      	cmp	r2, #1
24009aa4:	bf0b      	itete	eq
24009aa6:	2215      	moveq	r2, #21
24009aa8:	2205      	movne	r2, #5
24009aaa:	2171      	moveq	r1, #113	; 0x71
24009aac:	2161      	movne	r1, #97	; 0x61
24009aae:	e7c5      	b.n	24009a3c <HAL_SAI_Transmit_DMA+0x94>
}
24009ab0:	4650      	mov	r0, sl
      __HAL_UNLOCK(hsai);
24009ab2:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
}
24009ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009aba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
24009abe:	f04f 0a03 	mov.w	sl, #3
        __HAL_UNLOCK(hsai);
24009ac2:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
24009aca:	4650      	mov	r0, sl
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009acc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
24009ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24009ad4:	24009c2d 	.word	0x24009c2d
24009ad8:	24009bc9 	.word	0x24009bc9
24009adc:	24009cb1 	.word	0x24009cb1

24009ae0 <HAL_SAI_Receive_DMA>:
{
24009ae0:	2300      	movs	r3, #0
24009ae2:	f362 030f 	bfi	r3, r2, #0, #16
24009ae6:	b570      	push	{r4, r5, r6, lr}
24009ae8:	f362 431f 	bfi	r3, r2, #16, #16
  if ((pData == NULL) || (Size == 0U))
24009aec:	2900      	cmp	r1, #0
24009aee:	d054      	beq.n	24009b9a <HAL_SAI_Receive_DMA+0xba>
24009af0:	fab2 f582 	clz	r5, r2
24009af4:	096d      	lsrs	r5, r5, #5
24009af6:	2a00      	cmp	r2, #0
24009af8:	d04f      	beq.n	24009b9a <HAL_SAI_Receive_DMA+0xba>
  if (hsai->State == HAL_SAI_STATE_READY)
24009afa:	f890 2091 	ldrb.w	r2, [r0, #145]	; 0x91
24009afe:	4604      	mov	r4, r0
24009b00:	2a01      	cmp	r2, #1
24009b02:	b2d6      	uxtb	r6, r2
24009b04:	d146      	bne.n	24009b94 <HAL_SAI_Receive_DMA+0xb4>
    __HAL_LOCK(hsai);
24009b06:	f890 2090 	ldrb.w	r2, [r0, #144]	; 0x90
24009b0a:	2a01      	cmp	r2, #1
24009b0c:	d042      	beq.n	24009b94 <HAL_SAI_Receive_DMA+0xb4>
    hsai->pBuffPtr = pData;
24009b0e:	6781      	str	r1, [r0, #120]	; 0x78
    hsai->State = HAL_SAI_STATE_BUSY_RX;
24009b10:	2122      	movs	r1, #34	; 0x22
    hsai->XferSize = Size;
24009b12:	67c3      	str	r3, [r0, #124]	; 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
24009b14:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
24009b18:	4b28      	ldr	r3, [pc, #160]	; (24009bbc <HAL_SAI_Receive_DMA+0xdc>)
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009b1a:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
    __HAL_LOCK(hsai);
24009b1e:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
24009b22:	f880 1091 	strb.w	r1, [r0, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
24009b26:	6413      	str	r3, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
24009b28:	4a25      	ldr	r2, [pc, #148]	; (24009bc0 <HAL_SAI_Receive_DMA+0xe0>)
24009b2a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24009b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
24009b30:	4a24      	ldr	r2, [pc, #144]	; (24009bc4 <HAL_SAI_Receive_DMA+0xe4>)
24009b32:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24009b36:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
24009b38:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24009b3c:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
24009b3e:	6801      	ldr	r1, [r0, #0]
24009b40:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
24009b44:	6f82      	ldr	r2, [r0, #120]	; 0x78
24009b46:	311c      	adds	r1, #28
24009b48:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
24009b4c:	f7fb fa5c 	bl	24005008 <HAL_DMA_Start_IT>
24009b50:	bb30      	cbnz	r0, 24009ba0 <HAL_SAI_Receive_DMA+0xc0>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009b52:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009b54:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009b56:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009b58:	d026      	beq.n	24009ba8 <HAL_SAI_Receive_DMA+0xc8>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009b5a:	2205      	movs	r2, #5
24009b5c:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009b5e:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009b60:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
24009b62:	2b01      	cmp	r3, #1
24009b64:	bf98      	it	ls
24009b66:	4602      	movls	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009b68:	690b      	ldr	r3, [r1, #16]
24009b6a:	4313      	orrs	r3, r2
24009b6c:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
24009b6e:	6822      	ldr	r2, [r4, #0]
24009b70:	6813      	ldr	r3, [r2, #0]
24009b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009b76:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
24009b78:	6823      	ldr	r3, [r4, #0]
24009b7a:	681a      	ldr	r2, [r3, #0]
24009b7c:	03d2      	lsls	r2, r2, #15
24009b7e:	d403      	bmi.n	24009b88 <HAL_SAI_Receive_DMA+0xa8>
      __HAL_SAI_ENABLE(hsai);
24009b80:	681a      	ldr	r2, [r3, #0]
24009b82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24009b86:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
24009b88:	2300      	movs	r3, #0
    return HAL_OK;
24009b8a:	461e      	mov	r6, r3
    __HAL_UNLOCK(hsai);
24009b8c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
24009b90:	4630      	mov	r0, r6
24009b92:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
24009b94:	2602      	movs	r6, #2
}
24009b96:	4630      	mov	r0, r6
24009b98:	bd70      	pop	{r4, r5, r6, pc}
    return  HAL_ERROR;
24009b9a:	2601      	movs	r6, #1
}
24009b9c:	4630      	mov	r0, r6
24009b9e:	bd70      	pop	{r4, r5, r6, pc}
24009ba0:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
24009ba2:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
}
24009ba6:	bd70      	pop	{r4, r5, r6, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009ba8:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009bac:	2a01      	cmp	r2, #1
24009bae:	bf0b      	itete	eq
24009bb0:	2215      	moveq	r2, #21
24009bb2:	2205      	movne	r2, #5
24009bb4:	2071      	moveq	r0, #113	; 0x71
24009bb6:	2061      	movne	r0, #97	; 0x61
24009bb8:	e7d1      	b.n	24009b5e <HAL_SAI_Receive_DMA+0x7e>
24009bba:	bf00      	nop
24009bbc:	24009ca5 	.word	0x24009ca5
24009bc0:	24009c3d 	.word	0x24009c3d
24009bc4:	24009cb1 	.word	0x24009cb1

24009bc8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
24009bc8:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
24009bca:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24009bcc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
24009bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009bd2:	d01b      	beq.n	24009c0c <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009bd4:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
24009bd6:	2300      	movs	r3, #0
24009bd8:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009bdc:	6813      	ldr	r3, [r2, #0]
24009bde:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
24009be2:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009be4:	6c43      	ldr	r3, [r0, #68]	; 0x44
24009be6:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009be8:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009bea:	d012      	beq.n	24009c12 <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009bec:	f06f 0c61 	mvn.w	ip, #97	; 0x61
24009bf0:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009bf4:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009bf6:	3b02      	subs	r3, #2
24009bf8:	2b01      	cmp	r3, #1
24009bfa:	bf98      	it	ls
24009bfc:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009bfe:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
24009c00:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009c04:	4013      	ands	r3, r2
24009c06:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
24009c08:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
24009c0c:	f023 f808 	bl	2402cc20 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
24009c10:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009c12:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009c16:	2a01      	cmp	r2, #1
24009c18:	bf0b      	itete	eq
24009c1a:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
24009c1e:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
24009c22:	f06f 0215 	mvneq.w	r2, #21
24009c26:	f06f 0205 	mvnne.w	r2, #5
24009c2a:	e7e3      	b.n	24009bf4 <SAI_DMATxCplt+0x2c>

24009c2c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
24009c2c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
24009c2e:	6b80      	ldr	r0, [r0, #56]	; 0x38
24009c30:	f022 fffe 	bl	2402cc30 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
24009c34:	bd08      	pop	{r3, pc}
24009c36:	bf00      	nop

24009c38 <HAL_SAI_RxCpltCallback>:
24009c38:	4770      	bx	lr
24009c3a:	bf00      	nop

24009c3c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
24009c3c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
24009c3e:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24009c40:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
24009c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009c46:	d01b      	beq.n	24009c80 <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009c48:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
24009c4a:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
24009c4c:	6813      	ldr	r3, [r2, #0]
24009c4e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
24009c52:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009c54:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
24009c56:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009c5a:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009c5c:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009c5e:	d012      	beq.n	24009c86 <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009c60:	f06f 0c61 	mvn.w	ip, #97	; 0x61
24009c64:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009c68:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009c6a:	3b02      	subs	r3, #2
24009c6c:	2b01      	cmp	r3, #1
24009c6e:	bf98      	it	ls
24009c70:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009c72:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
24009c74:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009c78:	4013      	ands	r3, r2
24009c7a:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
24009c7c:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
24009c80:	f7ff ffda 	bl	24009c38 <HAL_SAI_RxCpltCallback>
#endif
}
24009c84:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009c86:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009c8a:	2a01      	cmp	r2, #1
24009c8c:	bf0b      	itete	eq
24009c8e:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
24009c92:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
24009c96:	f06f 0215 	mvneq.w	r2, #21
24009c9a:	f06f 0205 	mvnne.w	r2, #5
24009c9e:	e7e3      	b.n	24009c68 <SAI_DMARxCplt+0x2c>

24009ca0 <HAL_SAI_RxHalfCpltCallback>:
24009ca0:	4770      	bx	lr
24009ca2:	bf00      	nop

24009ca4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
24009ca4:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
24009ca6:	6b80      	ldr	r0, [r0, #56]	; 0x38
24009ca8:	f7ff fffa 	bl	24009ca0 <HAL_SAI_RxHalfCpltCallback>
#endif
}
24009cac:	bd08      	pop	{r3, pc}
24009cae:	bf00      	nop

24009cb0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
24009cb0:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
24009cb2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
24009cb4:	f7fc f9e2 	bl	2400607c <HAL_DMA_GetError>
24009cb8:	2802      	cmp	r0, #2
24009cba:	d025      	beq.n	24009d08 <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24009cbc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
24009cc0:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24009cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009cc6:	4814      	ldr	r0, [pc, #80]	; (24009d18 <SAI_DMAError+0x68>)
24009cc8:	4a14      	ldr	r2, [pc, #80]	; (24009d1c <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
24009cca:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
24009cce:	680b      	ldr	r3, [r1, #0]
24009cd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
24009cd4:	600b      	str	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009cd6:	6803      	ldr	r3, [r0, #0]
  __HAL_SAI_DISABLE(hsai);
24009cd8:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009cda:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
24009cde:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009ce0:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
24009ce2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
24009ce6:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
24009ce8:	600a      	str	r2, [r1, #0]
    if (count == 0U)
24009cea:	b173      	cbz	r3, 24009d0a <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009cec:	6822      	ldr	r2, [r4, #0]
    count--;
24009cee:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
24009cf0:	6812      	ldr	r2, [r2, #0]
24009cf2:	03d2      	lsls	r2, r2, #15
24009cf4:	d4f9      	bmi.n	24009cea <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
24009cf6:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
24009cf8:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
24009cfa:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
24009cfc:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
24009d00:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
24009d04:	f022 ff90 	bl	2402cc28 <__HAL_SAI_ErrorCallback_veneer>
#endif
  }
}
24009d08:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009d0a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
24009d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24009d12:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
24009d16:	e7ee      	b.n	24009cf6 <SAI_DMAError+0x46>
24009d18:	20000748 	.word	0x20000748
24009d1c:	95cbec1b 	.word	0x95cbec1b

24009d20 <HAL_SD_GetCardStatus.part.0>:
  * @param  hsd: Pointer to SD handle
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
24009d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24009d24:	4604      	mov	r4, r0
24009d26:	b096      	sub	sp, #88	; 0x58
24009d28:	460d      	mov	r5, r1
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
24009d2a:	f7fa fd51 	bl	240047d0 <HAL_GetTick>
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
24009d2e:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
24009d30:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
24009d32:	6820      	ldr	r0, [r4, #0]
24009d34:	f001 fbf0 	bl	2400b518 <SDMMC_GetResponse>
24009d38:	0181      	lsls	r1, r0, #6
24009d3a:	d45a      	bmi.n	24009df2 <HAL_SD_GetCardStatus.part.0+0xd2>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
24009d3c:	2140      	movs	r1, #64	; 0x40
24009d3e:	6820      	ldr	r0, [r4, #0]
24009d40:	f001 fc04 	bl	2400b54c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
24009d44:	b1e8      	cbz	r0, 24009d82 <HAL_SD_GetCardStatus.part.0+0x62>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
  if (errorstate != HAL_SD_ERROR_NONE)
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
24009d46:	6b63      	ldr	r3, [r4, #52]	; 0x34
24009d48:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009d4a:	6823      	ldr	r3, [r4, #0]
24009d4c:	4955      	ldr	r1, [pc, #340]	; (24009ea4 <HAL_SD_GetCardStatus.part.0+0x184>)
    hsd->State = HAL_SD_STATE_READY;
24009d4e:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009d50:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
24009d52:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
24009d54:	6b63      	ldr	r3, [r4, #52]	; 0x34
24009d56:	4303      	orrs	r3, r0
24009d58:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
24009d5a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
24009d5e:	f44f 7100 	mov.w	r1, #512	; 0x200
24009d62:	6820      	ldr	r0, [r4, #0]
24009d64:	f001 fbf2 	bl	2400b54c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
24009d68:	b138      	cbz	r0, 24009d7a <HAL_SD_GetCardStatus.part.0+0x5a>
    hsd->State = HAL_SD_STATE_READY;
24009d6a:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009d6c:	6822      	ldr	r2, [r4, #0]
24009d6e:	494d      	ldr	r1, [pc, #308]	; (24009ea4 <HAL_SD_GetCardStatus.part.0+0x184>)
    status = HAL_ERROR;
24009d70:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009d72:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
24009d74:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
24009d76:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
24009d7a:	4630      	mov	r0, r6
24009d7c:	b016      	add	sp, #88	; 0x58
24009d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
24009d82:	6c61      	ldr	r1, [r4, #68]	; 0x44
24009d84:	6820      	ldr	r0, [r4, #0]
24009d86:	0409      	lsls	r1, r1, #16
24009d88:	f002 f968 	bl	2400c05c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
24009d8c:	2800      	cmp	r0, #0
24009d8e:	d1da      	bne.n	24009d46 <HAL_SD_GetCardStatus.part.0+0x26>
  config.DataLength    = 64U;
24009d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
24009d94:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24009d96:	4669      	mov	r1, sp
24009d98:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
24009d9a:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
24009d9e:	2260      	movs	r2, #96	; 0x60
24009da0:	2302      	movs	r3, #2
24009da2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
24009da6:	2200      	movs	r2, #0
24009da8:	2301      	movs	r3, #1
24009daa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24009dae:	f001 fbb7 	bl	2400b520 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
24009db2:	6820      	ldr	r0, [r4, #0]
24009db4:	f002 fd1e 	bl	2400c7f4 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
24009db8:	2800      	cmp	r0, #0
24009dba:	d1c4      	bne.n	24009d46 <HAL_SD_GetCardStatus.part.0+0x26>
  uint32_t *pData = pSDstatus;
24009dbc:	ae06      	add	r6, sp, #24
24009dbe:	e004      	b.n	24009dca <HAL_SD_GetCardStatus.part.0+0xaa>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
        pData++;
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
24009dc0:	f7fa fd06 	bl	240047d0 <HAL_GetTick>
24009dc4:	1bc0      	subs	r0, r0, r7
24009dc6:	3001      	adds	r0, #1
24009dc8:	d017      	beq.n	24009dfa <HAL_SD_GetCardStatus.part.0+0xda>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24009dca:	6823      	ldr	r3, [r4, #0]
24009dcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24009dce:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
24009dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
24009dd4:	d114      	bne.n	24009e00 <HAL_SD_GetCardStatus.part.0+0xe0>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
24009dd6:	0412      	lsls	r2, r2, #16
24009dd8:	d5f2      	bpl.n	24009dc0 <HAL_SD_GetCardStatus.part.0+0xa0>
24009dda:	f106 0820 	add.w	r8, r6, #32
24009dde:	e000      	b.n	24009de2 <HAL_SD_GetCardStatus.part.0+0xc2>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
24009de0:	6823      	ldr	r3, [r4, #0]
24009de2:	4618      	mov	r0, r3
24009de4:	f001 fb82 	bl	2400b4ec <SDMMC_ReadFIFO>
24009de8:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
24009dec:	4546      	cmp	r6, r8
24009dee:	d1f7      	bne.n	24009de0 <HAL_SD_GetCardStatus.part.0+0xc0>
24009df0:	e7e6      	b.n	24009dc0 <HAL_SD_GetCardStatus.part.0+0xa0>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
24009df2:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
24009df4:	f44f 6000 	mov.w	r0, #2048	; 0x800
24009df8:	e7a8      	b.n	24009d4c <HAL_SD_GetCardStatus.part.0+0x2c>
    {
      return HAL_SD_ERROR_TIMEOUT;
24009dfa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
24009dfe:	e7a4      	b.n	24009d4a <HAL_SD_GetCardStatus.part.0+0x2a>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
24009e00:	0710      	lsls	r0, r2, #28
24009e02:	d449      	bmi.n	24009e98 <HAL_SD_GetCardStatus.part.0+0x178>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
24009e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24009e06:	0791      	lsls	r1, r2, #30
24009e08:	d448      	bmi.n	24009e9c <HAL_SD_GetCardStatus.part.0+0x17c>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
24009e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24009e0c:	0692      	lsls	r2, r2, #26
24009e0e:	d50a      	bpl.n	24009e26 <HAL_SD_GetCardStatus.part.0+0x106>
24009e10:	e046      	b.n	24009ea0 <HAL_SD_GetCardStatus.part.0+0x180>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
24009e12:	f001 fb6b 	bl	2400b4ec <SDMMC_ReadFIFO>
24009e16:	f846 0b04 	str.w	r0, [r6], #4
    pData++;

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
24009e1a:	f7fa fcd9 	bl	240047d0 <HAL_GetTick>
24009e1e:	1bc0      	subs	r0, r0, r7
24009e20:	3001      	adds	r0, #1
24009e22:	d0ea      	beq.n	24009dfa <HAL_SD_GetCardStatus.part.0+0xda>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
24009e24:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
24009e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
24009e28:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
24009e2a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
24009e2e:	d1f0      	bne.n	24009e12 <HAL_SD_GetCardStatus.part.0+0xf2>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24009e30:	491d      	ldr	r1, [pc, #116]	; (24009ea8 <HAL_SD_GetCardStatus.part.0+0x188>)
  HAL_StatusTypeDef status = HAL_OK;
24009e32:	4616      	mov	r6, r2
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24009e34:	6399      	str	r1, [r3, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
24009e36:	9b06      	ldr	r3, [sp, #24]
24009e38:	f3c3 1281 	ubfx	r2, r3, #6, #2
24009e3c:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
24009e3e:	f3c3 1240 	ubfx	r2, r3, #5, #1
24009e42:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
24009e44:	0a1a      	lsrs	r2, r3, #8
24009e46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
24009e4a:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
24009e4e:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
24009e52:	b292      	uxth	r2, r2
24009e54:	ba09      	rev	r1, r1
24009e56:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
24009e58:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
24009e5a:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
24009e5c:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
24009e5e:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
24009e62:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
24009e66:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
24009e68:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
24009e6c:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
24009e6e:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
24009e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
24009e72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
24009e76:	b2d0      	uxtb	r0, r2
24009e78:	4303      	orrs	r3, r0
24009e7a:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
24009e7c:	f3c2 2385 	ubfx	r3, r2, #10, #6
24009e80:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
24009e82:	f3c2 2301 	ubfx	r3, r2, #8, #2
24009e86:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
24009e88:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
24009e8c:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
24009e90:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
24009e92:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
24009e94:	74a9      	strb	r1, [r5, #18]
24009e96:	e762      	b.n	24009d5e <HAL_SD_GetCardStatus.part.0+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
24009e98:	2008      	movs	r0, #8
24009e9a:	e757      	b.n	24009d4c <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
24009e9c:	2002      	movs	r0, #2
24009e9e:	e755      	b.n	24009d4c <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
24009ea0:	2020      	movs	r0, #32
24009ea2:	e753      	b.n	24009d4c <HAL_SD_GetCardStatus.part.0+0x2c>
24009ea4:	1fe00fff 	.word	0x1fe00fff
24009ea8:	18000f3a 	.word	0x18000f3a

24009eac <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
24009eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24009eb0:	4605      	mov	r5, r0
24009eb2:	b086      	sub	sp, #24
24009eb4:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
24009eb6:	f7fa fc8b 	bl	240047d0 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
24009eba:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
24009ebc:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
24009ebe:	6828      	ldr	r0, [r5, #0]
24009ec0:	f001 fb44 	bl	2400b54c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
24009ec4:	4604      	mov	r4, r0
24009ec6:	b118      	cbz	r0, 24009ed0 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
24009ec8:	4620      	mov	r0, r4
24009eca:	b006      	add	sp, #24
24009ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
24009ed0:	6c69      	ldr	r1, [r5, #68]	; 0x44
24009ed2:	6828      	ldr	r0, [r5, #0]
24009ed4:	0409      	lsls	r1, r1, #16
24009ed6:	f002 f8c1 	bl	2400c05c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
24009eda:	4604      	mov	r4, r0
24009edc:	2800      	cmp	r0, #0
24009ede:	d1f3      	bne.n	24009ec8 <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
24009ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
24009ee4:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24009ee6:	4669      	mov	r1, sp
24009ee8:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
24009eea:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
24009eee:	2230      	movs	r2, #48	; 0x30
24009ef0:	2302      	movs	r3, #2
24009ef2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
24009ef6:	2200      	movs	r2, #0
24009ef8:	2301      	movs	r3, #1
24009efa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
24009efe:	f001 fb0f 	bl	2400b520 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
24009f02:	6828      	ldr	r0, [r5, #0]
24009f04:	f002 fa42 	bl	2400c38c <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
24009f08:	4604      	mov	r4, r0
24009f0a:	2800      	cmp	r0, #0
24009f0c:	d1dc      	bne.n	24009ec8 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
24009f0e:	4682      	mov	sl, r0
24009f10:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
24009f12:	f240 582a 	movw	r8, #1322	; 0x52a
24009f16:	e004      	b.n	24009f22 <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
24009f18:	f7fa fc5a 	bl	240047d0 <HAL_GetTick>
24009f1c:	1b83      	subs	r3, r0, r6
24009f1e:	3301      	adds	r3, #1
24009f20:	d024      	beq.n	24009f6c <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
24009f22:	6828      	ldr	r0, [r5, #0]
24009f24:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009f26:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
24009f2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
24009f2c:	d10c      	bne.n	24009f48 <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
24009f2e:	0319      	lsls	r1, r3, #12
24009f30:	d4f2      	bmi.n	24009f18 <SD_FindSCR.constprop.0+0x6c>
24009f32:	2c00      	cmp	r4, #0
24009f34:	d1f0      	bne.n	24009f18 <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
24009f36:	f001 fad9 	bl	2400b4ec <SDMMC_ReadFIFO>
24009f3a:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
24009f3c:	6828      	ldr	r0, [r5, #0]
      index++;
24009f3e:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
24009f40:	f001 fad4 	bl	2400b4ec <SDMMC_ReadFIFO>
24009f44:	4682      	mov	sl, r0
      index++;
24009f46:	e7e7      	b.n	24009f18 <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
24009f48:	071a      	lsls	r2, r3, #28
24009f4a:	d416      	bmi.n	24009f7a <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
24009f4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
24009f4e:	079b      	lsls	r3, r3, #30
24009f50:	d40f      	bmi.n	24009f72 <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
24009f52:	6b44      	ldr	r4, [r0, #52]	; 0x34
24009f54:	f014 0420 	ands.w	r4, r4, #32
24009f58:	d113      	bne.n	24009f82 <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
24009f5a:	fa9a f28a 	rev.w	r2, sl
24009f5e:	fa99 f389 	rev.w	r3, r9
24009f62:	490a      	ldr	r1, [pc, #40]	; (24009f8c <SD_FindSCR.constprop.0+0xe0>)
24009f64:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
24009f66:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
24009f6a:	e7ad      	b.n	24009ec8 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
24009f6c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
24009f70:	e7aa      	b.n	24009ec8 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
24009f72:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
24009f74:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
24009f76:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
24009f78:	e7a6      	b.n	24009ec8 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
24009f7a:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
24009f7c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
24009f7e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
24009f80:	e7a2      	b.n	24009ec8 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
24009f82:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
24009f84:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
24009f86:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
24009f88:	e79e      	b.n	24009ec8 <SD_FindSCR.constprop.0+0x1c>
24009f8a:	bf00      	nop
24009f8c:	18000f3a 	.word	0x18000f3a

24009f90 <HAL_SD_ReadBlocks>:
{
24009f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24009f94:	460d      	mov	r5, r1
24009f96:	b087      	sub	sp, #28
24009f98:	4604      	mov	r4, r0
24009f9a:	4692      	mov	sl, r2
24009f9c:	461f      	mov	r7, r3
24009f9e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
24009fa2:	f7fa fc15 	bl	240047d0 <HAL_GetTick>
  if (NULL == pData)
24009fa6:	2d00      	cmp	r5, #0
24009fa8:	d069      	beq.n	2400a07e <HAL_SD_ReadBlocks+0xee>
  if (hsd->State == HAL_SD_STATE_READY)
24009faa:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
24009fae:	2b01      	cmp	r3, #1
24009fb0:	fa5f f983 	uxtb.w	r9, r3
24009fb4:	d152      	bne.n	2400a05c <HAL_SD_ReadBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24009fb6:	eb0a 0307 	add.w	r3, sl, r7
24009fba:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
24009fbc:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24009fbe:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
24009fc0:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
24009fc2:	d866      	bhi.n	2400a092 <HAL_SD_ReadBlocks+0x102>
    hsd->State = HAL_SD_STATE_BUSY;
24009fc4:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
24009fc6:	f04f 0b02 	mov.w	fp, #2
24009fca:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
24009fcc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
24009fd0:	6823      	ldr	r3, [r4, #0]
24009fd2:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
24009fd4:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
24009fd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
24009fd8:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
24009fda:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
24009fdc:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
24009fe0:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
24009fe8:	bf18      	it	ne
24009fea:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
24009fee:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
24009ff0:	027b      	lsls	r3, r7, #9
24009ff2:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
24009ff4:	2390      	movs	r3, #144	; 0x90
24009ff6:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
24009ffa:	f001 fa91 	bl	2400b520 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
24009ffe:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400a000:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a002:	68d3      	ldr	r3, [r2, #12]
2400a004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a008:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400a00a:	d931      	bls.n	2400a070 <HAL_SD_ReadBlocks+0xe0>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400a00c:	4651      	mov	r1, sl
2400a00e:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
2400a010:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400a014:	f001 fbf6 	bl	2400b804 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a018:	2800      	cmp	r0, #0
2400a01a:	d142      	bne.n	2400a0a2 <HAL_SD_ReadBlocks+0x112>
    dataremaining = config.DataLength;
2400a01c:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400a020:	e004      	b.n	2400a02c <HAL_SD_ReadBlocks+0x9c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a022:	f7fa fbd5 	bl	240047d0 <HAL_GetTick>
2400a026:	1b80      	subs	r0, r0, r6
2400a028:	4540      	cmp	r0, r8
2400a02a:	d267      	bcs.n	2400a0fc <HAL_SD_ReadBlocks+0x16c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400a02c:	6820      	ldr	r0, [r4, #0]
2400a02e:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a030:	f413 7f95 	tst.w	r3, #298	; 0x12a
2400a034:	d141      	bne.n	2400a0ba <HAL_SD_ReadBlocks+0x12a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
2400a036:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a038:	041a      	lsls	r2, r3, #16
2400a03a:	d5f2      	bpl.n	2400a022 <HAL_SD_ReadBlocks+0x92>
2400a03c:	f1bb 0f1f 	cmp.w	fp, #31
2400a040:	d9ef      	bls.n	2400a022 <HAL_SD_ReadBlocks+0x92>
2400a042:	f105 0a20 	add.w	sl, r5, #32
2400a046:	e000      	b.n	2400a04a <HAL_SD_ReadBlocks+0xba>
          data = SDMMC_ReadFIFO(hsd->Instance);
2400a048:	6820      	ldr	r0, [r4, #0]
2400a04a:	f001 fa4f 	bl	2400b4ec <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
2400a04e:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
2400a052:	45aa      	cmp	sl, r5
2400a054:	d1f8      	bne.n	2400a048 <HAL_SD_ReadBlocks+0xb8>
        dataremaining -= 32U;
2400a056:	f1ab 0b20 	sub.w	fp, fp, #32
2400a05a:	e7e2      	b.n	2400a022 <HAL_SD_ReadBlocks+0x92>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a05c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a05e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400a066:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a068:	4648      	mov	r0, r9
2400a06a:	b007      	add	sp, #28
2400a06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400a070:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400a072:	4651      	mov	r1, sl
2400a074:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400a076:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400a078:	f001 fb16 	bl	2400b6a8 <SDMMC_CmdReadSingleBlock>
2400a07c:	e7cc      	b.n	2400a018 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a07e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a080:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a084:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400a088:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a08a:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a08c:	b007      	add	sp, #28
2400a08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a092:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400a094:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a096:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400a09a:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a09c:	b007      	add	sp, #28
2400a09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a0a2:	6823      	ldr	r3, [r4, #0]
2400a0a4:	4a30      	ldr	r2, [pc, #192]	; (2400a168 <HAL_SD_ReadBlocks+0x1d8>)
2400a0a6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400a0a8:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400a0aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a0ac:	4303      	orrs	r3, r0
2400a0ae:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
2400a0b0:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
2400a0b2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400a0b6:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400a0b8:	e7d6      	b.n	2400a068 <HAL_SD_ReadBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400a0ba:	68c3      	ldr	r3, [r0, #12]
2400a0bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400a0c0:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400a0c2:	6820      	ldr	r0, [r4, #0]
2400a0c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a0c6:	05db      	lsls	r3, r3, #23
2400a0c8:	d501      	bpl.n	2400a0ce <HAL_SD_ReadBlocks+0x13e>
2400a0ca:	2f01      	cmp	r7, #1
2400a0cc:	d825      	bhi.n	2400a11a <HAL_SD_ReadBlocks+0x18a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a0ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a0d0:	f013 0308 	ands.w	r3, r3, #8
2400a0d4:	d135      	bne.n	2400a142 <HAL_SD_ReadBlocks+0x1b2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a0d6:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400a0d8:	f012 0202 	ands.w	r2, r2, #2
2400a0dc:	d126      	bne.n	2400a12c <HAL_SD_ReadBlocks+0x19c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400a0de:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a0e0:	f013 0320 	ands.w	r3, r3, #32
2400a0e4:	d039      	beq.n	2400a15a <HAL_SD_ReadBlocks+0x1ca>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a0e6:	4b20      	ldr	r3, [pc, #128]	; (2400a168 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400a0e8:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a0ea:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
2400a0ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a0ee:	f043 0320 	orr.w	r3, r3, #32
2400a0f2:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a0f4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a0f8:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a0fa:	e7b5      	b.n	2400a068 <HAL_SD_ReadBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a0fc:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
2400a0fe:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a100:	4819      	ldr	r0, [pc, #100]	; (2400a168 <HAL_SD_ReadBlocks+0x1d8>)
        hsd->Context = SD_CONTEXT_NONE;
2400a102:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
2400a104:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a108:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
2400a10a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a10c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400a110:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400a112:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400a116:	62e2      	str	r2, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
2400a118:	e7a6      	b.n	2400a068 <HAL_SD_ReadBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400a11a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a11c:	2b03      	cmp	r3, #3
2400a11e:	d0d6      	beq.n	2400a0ce <HAL_SD_ReadBlocks+0x13e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400a120:	f001 fd7a 	bl	2400bc18 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400a124:	2800      	cmp	r0, #0
2400a126:	d1bc      	bne.n	2400a0a2 <HAL_SD_ReadBlocks+0x112>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a128:	6820      	ldr	r0, [r4, #0]
2400a12a:	e7d0      	b.n	2400a0ce <HAL_SD_ReadBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a12c:	4a0e      	ldr	r2, [pc, #56]	; (2400a168 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400a12e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a130:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400a132:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a134:	f042 0202 	orr.w	r2, r2, #2
2400a138:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a13a:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a13e:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a140:	e792      	b.n	2400a068 <HAL_SD_ReadBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a142:	4b09      	ldr	r3, [pc, #36]	; (2400a168 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400a144:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a146:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400a148:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a14a:	f043 0308 	orr.w	r3, r3, #8
2400a14e:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400a150:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400a152:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a156:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a158:	e786      	b.n	2400a068 <HAL_SD_ReadBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a15a:	4904      	ldr	r1, [pc, #16]	; (2400a16c <HAL_SD_ReadBlocks+0x1dc>)
    hsd->State = HAL_SD_STATE_READY;
2400a15c:	2201      	movs	r2, #1
    return HAL_OK;
2400a15e:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a160:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400a162:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400a166:	e77f      	b.n	2400a068 <HAL_SD_ReadBlocks+0xd8>
2400a168:	1fe00fff 	.word	0x1fe00fff
2400a16c:	18000f3a 	.word	0x18000f3a

2400a170 <HAL_SD_WriteBlocks>:
{
2400a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400a174:	460d      	mov	r5, r1
2400a176:	b089      	sub	sp, #36	; 0x24
2400a178:	4604      	mov	r4, r0
2400a17a:	4692      	mov	sl, r2
2400a17c:	461f      	mov	r7, r3
2400a17e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
2400a182:	f7fa fb25 	bl	240047d0 <HAL_GetTick>
  if (NULL == pData)
2400a186:	2d00      	cmp	r5, #0
2400a188:	d068      	beq.n	2400a25c <HAL_SD_WriteBlocks+0xec>
  if (hsd->State == HAL_SD_STATE_READY)
2400a18a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400a18e:	2b01      	cmp	r3, #1
2400a190:	fa5f f983 	uxtb.w	r9, r3
2400a194:	d152      	bne.n	2400a23c <HAL_SD_WriteBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a196:	eb0a 0307 	add.w	r3, sl, r7
2400a19a:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a19c:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a19e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a1a0:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a1a2:	d865      	bhi.n	2400a270 <HAL_SD_WriteBlocks+0x100>
    hsd->State = HAL_SD_STATE_BUSY;
2400a1a4:	2303      	movs	r3, #3
2400a1a6:	4606      	mov	r6, r0
2400a1a8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400a1ac:	6823      	ldr	r3, [r4, #0]
2400a1ae:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a1b0:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a1b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a1b4:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a1b6:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
2400a1b8:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400a1bc:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400a1c0:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a1c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400a1c6:	bf18      	it	ne
2400a1c8:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a1cc:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400a1ce:	027b      	lsls	r3, r7, #9
2400a1d0:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
2400a1d2:	2390      	movs	r3, #144	; 0x90
2400a1d4:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a1d6:	f001 f9a3 	bl	2400b520 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a1da:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400a1dc:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a1de:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a1e0:	68d3      	ldr	r3, [r2, #12]
2400a1e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a1e6:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400a1e8:	d932      	bls.n	2400a250 <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400a1ea:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a1ec:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400a1ee:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a1f0:	f001 fc64 	bl	2400babc <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a1f4:	2800      	cmp	r0, #0
2400a1f6:	d143      	bne.n	2400a280 <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
2400a1f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400a1fc:	e004      	b.n	2400a208 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a1fe:	f7fa fae7 	bl	240047d0 <HAL_GetTick>
2400a202:	1b80      	subs	r0, r0, r6
2400a204:	4540      	cmp	r0, r8
2400a206:	d268      	bcs.n	2400a2da <HAL_SD_WriteBlocks+0x16a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400a208:	6820      	ldr	r0, [r4, #0]
2400a20a:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a20c:	f413 7f8d 	tst.w	r3, #282	; 0x11a
2400a210:	d142      	bne.n	2400a298 <HAL_SD_WriteBlocks+0x128>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
2400a212:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a214:	045a      	lsls	r2, r3, #17
2400a216:	d5f2      	bpl.n	2400a1fe <HAL_SD_WriteBlocks+0x8e>
2400a218:	f1bb 0f1f 	cmp.w	fp, #31
2400a21c:	d9ef      	bls.n	2400a1fe <HAL_SD_WriteBlocks+0x8e>
2400a21e:	f105 0a20 	add.w	sl, r5, #32
2400a222:	e000      	b.n	2400a226 <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a224:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
2400a226:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a22a:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
2400a22c:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a22e:	f001 f961 	bl	2400b4f4 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
2400a232:	4555      	cmp	r5, sl
2400a234:	d1f6      	bne.n	2400a224 <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
2400a236:	f1ab 0b20 	sub.w	fp, fp, #32
2400a23a:	e7e0      	b.n	2400a1fe <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a23c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a23e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a242:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400a246:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a248:	4648      	mov	r0, r9
2400a24a:	b009      	add	sp, #36	; 0x24
2400a24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400a250:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400a252:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400a254:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400a256:	f001 fb83 	bl	2400b960 <SDMMC_CmdWriteSingleBlock>
2400a25a:	e7cb      	b.n	2400a1f4 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a25c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a25e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a262:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400a266:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a268:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a26a:	b009      	add	sp, #36	; 0x24
2400a26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a270:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400a272:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400a278:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a27a:	b009      	add	sp, #36	; 0x24
2400a27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a280:	6823      	ldr	r3, [r4, #0]
2400a282:	4a30      	ldr	r2, [pc, #192]	; (2400a344 <HAL_SD_WriteBlocks+0x1d4>)
2400a284:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400a286:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400a288:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a28a:	4303      	orrs	r3, r0
2400a28c:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
2400a28e:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
2400a290:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400a294:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400a296:	e7d7      	b.n	2400a248 <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400a298:	68c3      	ldr	r3, [r0, #12]
2400a29a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400a29e:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400a2a0:	6820      	ldr	r0, [r4, #0]
2400a2a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a2a4:	05db      	lsls	r3, r3, #23
2400a2a6:	d501      	bpl.n	2400a2ac <HAL_SD_WriteBlocks+0x13c>
2400a2a8:	2f01      	cmp	r7, #1
2400a2aa:	d823      	bhi.n	2400a2f4 <HAL_SD_WriteBlocks+0x184>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a2ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a2ae:	f013 0308 	ands.w	r3, r3, #8
2400a2b2:	d133      	bne.n	2400a31c <HAL_SD_WriteBlocks+0x1ac>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a2b4:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400a2b6:	f012 0202 	ands.w	r2, r2, #2
2400a2ba:	d124      	bne.n	2400a306 <HAL_SD_WriteBlocks+0x196>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
2400a2bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a2be:	f013 0310 	ands.w	r3, r3, #16
2400a2c2:	d037      	beq.n	2400a334 <HAL_SD_WriteBlocks+0x1c4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a2c4:	4b1f      	ldr	r3, [pc, #124]	; (2400a344 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
2400a2c6:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a2c8:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
2400a2ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a2cc:	f043 0310 	orr.w	r3, r3, #16
2400a2d0:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a2d2:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a2d6:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a2d8:	e7b6      	b.n	2400a248 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a2da:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
2400a2dc:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a2de:	4819      	ldr	r0, [pc, #100]	; (2400a344 <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
2400a2e0:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
2400a2e2:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a2e6:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
2400a2e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
2400a2ea:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400a2ec:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400a2f0:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
2400a2f2:	e7a9      	b.n	2400a248 <HAL_SD_WriteBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400a2f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a2f6:	2b03      	cmp	r3, #3
2400a2f8:	d0d8      	beq.n	2400a2ac <HAL_SD_WriteBlocks+0x13c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400a2fa:	f001 fc8d 	bl	2400bc18 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400a2fe:	2800      	cmp	r0, #0
2400a300:	d1be      	bne.n	2400a280 <HAL_SD_WriteBlocks+0x110>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a302:	6820      	ldr	r0, [r4, #0]
2400a304:	e7d2      	b.n	2400a2ac <HAL_SD_WriteBlocks+0x13c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a306:	4a0f      	ldr	r2, [pc, #60]	; (2400a344 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
2400a308:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a30a:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400a30c:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a30e:	f042 0202 	orr.w	r2, r2, #2
2400a312:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a314:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a318:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a31a:	e795      	b.n	2400a248 <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a31c:	4b09      	ldr	r3, [pc, #36]	; (2400a344 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
2400a31e:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a320:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400a322:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a324:	f043 0308 	orr.w	r3, r3, #8
2400a328:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400a32a:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400a32c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a330:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a332:	e789      	b.n	2400a248 <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a334:	4904      	ldr	r1, [pc, #16]	; (2400a348 <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
2400a336:	2201      	movs	r2, #1
    return HAL_OK;
2400a338:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a33a:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400a33c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400a340:	e782      	b.n	2400a248 <HAL_SD_WriteBlocks+0xd8>
2400a342:	bf00      	nop
2400a344:	1fe00fff 	.word	0x1fe00fff
2400a348:	18000f3a 	.word	0x18000f3a

2400a34c <HAL_SD_GetCardCSD>:
{
2400a34c:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400a34e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400a350:	f04f 0c00 	mov.w	ip, #0
{
2400a354:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400a356:	0f92      	lsrs	r2, r2, #30
2400a358:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
2400a35a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
2400a35c:	f3c2 6283 	ubfx	r2, r2, #26, #4
2400a360:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
2400a362:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
2400a366:	f002 0203 	and.w	r2, r2, #3
2400a36a:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
2400a36c:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
2400a370:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
2400a372:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
2400a376:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
2400a378:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
2400a37c:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
2400a37e:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a380:	0d12      	lsrs	r2, r2, #20
2400a382:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
2400a384:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
2400a388:	f002 020f 	and.w	r2, r2, #15
2400a38c:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
2400a38e:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a390:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400a394:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
2400a396:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a398:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400a39c:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
2400a39e:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a3a0:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400a3a4:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
2400a3a6:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a3a8:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400a3ac:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400a3ae:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
2400a3b2:	6b82      	ldr	r2, [r0, #56]	; 0x38
2400a3b4:	2a00      	cmp	r2, #0
2400a3b6:	f040 808a 	bne.w	2400a4ce <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
2400a3ba:	6e04      	ldr	r4, [r0, #96]	; 0x60
2400a3bc:	f640 72fc 	movw	r2, #4092	; 0xffc
2400a3c0:	6e40      	ldr	r0, [r0, #100]	; 0x64
2400a3c2:	ea02 0284 	and.w	r2, r2, r4, lsl #2
2400a3c6:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
2400a3ca:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
2400a3cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a3ce:	f3c2 62c2 	ubfx	r2, r2, #27, #3
2400a3d2:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
2400a3d4:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
2400a3d8:	f002 0207 	and.w	r2, r2, #7
2400a3dc:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
2400a3de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a3e0:	f3c2 5242 	ubfx	r2, r2, #21, #3
2400a3e4:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
2400a3e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a3e8:	f3c2 4282 	ubfx	r2, r2, #18, #3
2400a3ec:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
2400a3ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a3f0:	f3c2 32c2 	ubfx	r2, r2, #15, #3
2400a3f4:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
2400a3f6:	690a      	ldr	r2, [r1, #16]
2400a3f8:	3201      	adds	r2, #1
2400a3fa:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400a3fc:	7e08      	ldrb	r0, [r1, #24]
2400a3fe:	f000 0007 	and.w	r0, r0, #7
2400a402:	3002      	adds	r0, #2
2400a404:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a406:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400a408:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a40a:	f891 c008 	ldrb.w	ip, [r1, #8]
2400a40e:	f00c 0c0f 	and.w	ip, ip, #15
2400a412:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400a416:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a41a:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400a41c:	fb02 f20c 	mul.w	r2, r2, ip
2400a420:	651a      	str	r2, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400a422:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.LogBlockSize = 512U;
2400a424:	f44f 7400 	mov.w	r4, #512	; 0x200
  pCSD->Reserved3 = 0;
2400a428:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
2400a42a:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400a42e:	f3c2 3280 	ubfx	r2, r2, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
2400a432:	655c      	str	r4, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400a434:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
2400a436:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a438:	f3c2 12c6 	ubfx	r2, r2, #7, #7
2400a43c:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
2400a43e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a440:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400a444:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
2400a446:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a448:	0fd2      	lsrs	r2, r2, #31
2400a44a:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
2400a44c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a44e:	f3c2 7241 	ubfx	r2, r2, #29, #2
2400a452:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
2400a454:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a456:	f3c2 6282 	ubfx	r2, r2, #26, #3
2400a45a:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
2400a45c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a45e:	f3c2 5283 	ubfx	r2, r2, #22, #4
2400a462:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
2400a464:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a466:	f3c2 5240 	ubfx	r2, r2, #21, #1
2400a46a:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
2400a46e:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
2400a472:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
2400a476:	ea02 020c 	and.w	r2, r2, ip
2400a47a:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
2400a47e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a480:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400a484:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
2400a488:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a48a:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400a48e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
2400a492:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a494:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400a498:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
2400a49c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a49e:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400a4a2:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
2400a4a6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a4a8:	f3c2 2281 	ubfx	r2, r2, #10, #2
2400a4ac:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
2400a4b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a4b2:	f3c2 2201 	ubfx	r2, r2, #8, #2
2400a4b6:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
2400a4ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400a4bc:	f3c3 0346 	ubfx	r3, r3, #1, #7
2400a4c0:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
2400a4c4:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
2400a4c8:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a4cc:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
2400a4ce:	2a01      	cmp	r2, #1
2400a4d0:	d110      	bne.n	2400a4f4 <HAL_SD_GetCardCSD+0x1a8>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400a4d2:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a4d4:	f8b0 4066 	ldrh.w	r4, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
2400a4d8:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400a4dc:	0412      	lsls	r2, r2, #16
2400a4de:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
2400a4e2:	4322      	orrs	r2, r4
2400a4e4:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400a4e6:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
2400a4e8:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400a4ea:	3201      	adds	r2, #1
2400a4ec:	0292      	lsls	r2, r2, #10
2400a4ee:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
2400a4f0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400a4f2:	e796      	b.n	2400a422 <HAL_SD_GetCardCSD+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a4f4:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
2400a4f6:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a4f8:	4805      	ldr	r0, [pc, #20]	; (2400a510 <HAL_SD_GetCardCSD+0x1c4>)
2400a4fa:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
2400a4fc:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a4fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400a500:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
2400a504:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a506:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
2400a50a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a50e:	4770      	bx	lr
2400a510:	1fe00fff 	.word	0x1fe00fff

2400a514 <HAL_SD_InitCard>:
{
2400a514:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a516:	2200      	movs	r2, #0
{
2400a518:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a51a:	2300      	movs	r3, #0
{
2400a51c:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400a51e:	2100      	movs	r1, #0
2400a520:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a524:	e9cd 2304 	strd	r2, r3, [sp, #16]
2400a528:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400a52c:	f7fe fd6a 	bl	24009004 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
2400a530:	b940      	cbnz	r0, 2400a544 <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
2400a532:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400a534:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
2400a538:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400a53c:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a53e:	4630      	mov	r0, r6
2400a540:	b015      	add	sp, #84	; 0x54
2400a542:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400a544:	0a06      	lsrs	r6, r0, #8
2400a546:	4b8e      	ldr	r3, [pc, #568]	; (2400a780 <HAL_SD_InitCard+0x26c>)
  (void)SDMMC_Init(hsd->Instance, Init);
2400a548:	aa07      	add	r2, sp, #28
2400a54a:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400a54c:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
2400a550:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400a552:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
2400a554:	9608      	str	r6, [sp, #32]
2400a556:	e892 0003 	ldmia.w	r2, {r0, r1}
2400a55a:	e88d 0003 	stmia.w	sp, {r0, r1}
2400a55e:	cb0e      	ldmia	r3, {r1, r2, r3}
2400a560:	6820      	ldr	r0, [r4, #0]
2400a562:	f000 ffa7 	bl	2400b4b4 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
2400a566:	6820      	ldr	r0, [r4, #0]
2400a568:	f000 ffca 	bl	2400b500 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
2400a56c:	4b85      	ldr	r3, [pc, #532]	; (2400a784 <HAL_SD_InitCard+0x270>)
2400a56e:	429d      	cmp	r5, r3
2400a570:	d902      	bls.n	2400a578 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
2400a572:	0076      	lsls	r6, r6, #1
2400a574:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
2400a578:	4883      	ldr	r0, [pc, #524]	; (2400a788 <HAL_SD_InitCard+0x274>)
2400a57a:	fbb0 f0f5 	udiv	r0, r0, r5
2400a57e:	3001      	adds	r0, #1
2400a580:	f7fa f92c 	bl	240047dc <HAL_Delay>
  __IO uint32_t count = 0U;
2400a584:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400a586:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
2400a588:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400a58a:	f001 fcfb 	bl	2400bf84 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a58e:	4605      	mov	r5, r0
2400a590:	b140      	cbz	r0, 2400a5a4 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
2400a592:	2601      	movs	r6, #1
2400a594:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
2400a598:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400a59a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a59c:	432b      	orrs	r3, r5
2400a59e:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a5a0:	b015      	add	sp, #84	; 0x54
2400a5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
2400a5a4:	6820      	ldr	r0, [r4, #0]
2400a5a6:	f001 fd19 	bl	2400bfdc <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
2400a5aa:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
2400a5ae:	f000 80ce 	beq.w	2400a74e <HAL_SD_InitCard+0x23a>
    hsd->SdCard.CardVersion = CARD_V2_X;
2400a5b2:	2301      	movs	r3, #1
2400a5b4:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400a5b6:	2100      	movs	r1, #0
2400a5b8:	6820      	ldr	r0, [r4, #0]
2400a5ba:	f001 fd4f 	bl	2400c05c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a5be:	bb08      	cbnz	r0, 2400a604 <HAL_SD_InitCard+0xf0>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400a5c0:	9b03      	ldr	r3, [sp, #12]
2400a5c2:	f64f 76fe 	movw	r6, #65534	; 0xfffe
2400a5c6:	42b3      	cmp	r3, r6
2400a5c8:	f200 80d3 	bhi.w	2400a772 <HAL_SD_InitCard+0x25e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400a5cc:	4f6f      	ldr	r7, [pc, #444]	; (2400a78c <HAL_SD_InitCard+0x278>)
2400a5ce:	e010      	b.n	2400a5f2 <HAL_SD_InitCard+0xde>
2400a5d0:	6820      	ldr	r0, [r4, #0]
2400a5d2:	f001 fdf1 	bl	2400c1b8 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a5d6:	4601      	mov	r1, r0
2400a5d8:	b9a0      	cbnz	r0, 2400a604 <HAL_SD_InitCard+0xf0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a5da:	6820      	ldr	r0, [r4, #0]
2400a5dc:	f000 ff9c 	bl	2400b518 <SDMMC_GetResponse>
    count++;
2400a5e0:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400a5e2:	2800      	cmp	r0, #0
    count++;
2400a5e4:	f103 0301 	add.w	r3, r3, #1
2400a5e8:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400a5ea:	9b03      	ldr	r3, [sp, #12]
2400a5ec:	db0d      	blt.n	2400a60a <HAL_SD_InitCard+0xf6>
2400a5ee:	42b3      	cmp	r3, r6
2400a5f0:	d80b      	bhi.n	2400a60a <HAL_SD_InitCard+0xf6>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400a5f2:	2100      	movs	r1, #0
2400a5f4:	6820      	ldr	r0, [r4, #0]
2400a5f6:	f001 fd31 	bl	2400c05c <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400a5fa:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
2400a5fc:	2800      	cmp	r0, #0
2400a5fe:	d0e7      	beq.n	2400a5d0 <HAL_SD_InitCard+0xbc>
2400a600:	4605      	mov	r5, r0
2400a602:	e7c6      	b.n	2400a592 <HAL_SD_InitCard+0x7e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a604:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
2400a608:	e7c3      	b.n	2400a592 <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400a60a:	9a03      	ldr	r2, [sp, #12]
2400a60c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
2400a610:	429a      	cmp	r2, r3
2400a612:	f200 80b2 	bhi.w	2400a77a <HAL_SD_InitCard+0x266>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400a616:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  hsd->SdCard.CardType = CARD_SDSC;
2400a61a:	f04f 0300 	mov.w	r3, #0
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400a61e:	bf18      	it	ne
2400a620:	2501      	movne	r5, #1
  hsd->SdCard.CardType = CARD_SDSC;
2400a622:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
2400a624:	2300      	movs	r3, #0
2400a626:	63a5      	str	r5, [r4, #56]	; 0x38
2400a628:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
2400a62c:	f7fa f8d0 	bl	240047d0 <HAL_GetTick>
2400a630:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
2400a632:	6820      	ldr	r0, [r4, #0]
2400a634:	f000 ff6c 	bl	2400b510 <SDMMC_GetPowerState>
2400a638:	b350      	cbz	r0, 2400a690 <HAL_SD_InitCard+0x17c>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a63a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a63c:	2b03      	cmp	r3, #3
2400a63e:	d132      	bne.n	2400a6a6 <HAL_SD_InitCard+0x192>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400a640:	2104      	movs	r1, #4
2400a642:	6820      	ldr	r0, [r4, #0]
2400a644:	f000 ff68 	bl	2400b518 <SDMMC_GetResponse>
2400a648:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400a64a:	a909      	add	r1, sp, #36	; 0x24
2400a64c:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400a64e:	0d1b      	lsrs	r3, r3, #20
2400a650:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400a652:	f7ff fe7b 	bl	2400a34c <HAL_SD_GetCardCSD>
2400a656:	4606      	mov	r6, r0
2400a658:	2800      	cmp	r0, #0
2400a65a:	f040 8084 	bne.w	2400a766 <HAL_SD_InitCard+0x252>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
2400a65e:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a660:	6820      	ldr	r0, [r4, #0]
2400a662:	0409      	lsls	r1, r1, #16
2400a664:	f001 fbe0 	bl	2400be28 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a668:	b9a0      	cbnz	r0, 2400a694 <HAL_SD_InitCard+0x180>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400a66a:	f44f 7100 	mov.w	r1, #512	; 0x200
2400a66e:	6820      	ldr	r0, [r4, #0]
2400a670:	f000 ff6c 	bl	2400b54c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a674:	2800      	cmp	r0, #0
2400a676:	f43f af62 	beq.w	2400a53e <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a67a:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
2400a67c:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a67e:	4944      	ldr	r1, [pc, #272]	; (2400a790 <HAL_SD_InitCard+0x27c>)
    return HAL_ERROR;
2400a680:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a682:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400a684:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a686:	4310      	orrs	r0, r2
2400a688:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a68a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
2400a68e:	e756      	b.n	2400a53e <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400a690:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
2400a694:	2601      	movs	r6, #1
2400a696:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
2400a69a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a69c:	4303      	orrs	r3, r0
}
2400a69e:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400a6a0:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a6a2:	b015      	add	sp, #84	; 0x54
2400a6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
2400a6a6:	6820      	ldr	r0, [r4, #0]
2400a6a8:	f001 ff18 	bl	2400c4dc <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a6ac:	2800      	cmp	r0, #0
2400a6ae:	d1f1      	bne.n	2400a694 <HAL_SD_InitCard+0x180>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a6b0:	4601      	mov	r1, r0
2400a6b2:	6820      	ldr	r0, [r4, #0]
2400a6b4:	f000 ff30 	bl	2400b518 <SDMMC_GetResponse>
2400a6b8:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a6ba:	2104      	movs	r1, #4
2400a6bc:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a6be:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a6c0:	f000 ff2a 	bl	2400b518 <SDMMC_GetResponse>
2400a6c4:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a6c6:	2108      	movs	r1, #8
2400a6c8:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a6ca:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a6cc:	f000 ff24 	bl	2400b518 <SDMMC_GetResponse>
2400a6d0:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a6d2:	210c      	movs	r1, #12
2400a6d4:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a6d6:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a6d8:	f000 ff1e 	bl	2400b518 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a6dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a6de:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a6e0:	2b03      	cmp	r3, #3
2400a6e2:	d0ad      	beq.n	2400a640 <HAL_SD_InitCard+0x12c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400a6e4:	f241 3687 	movw	r6, #4999	; 0x1387
2400a6e8:	e009      	b.n	2400a6fe <HAL_SD_InitCard+0x1ea>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400a6ea:	6820      	ldr	r0, [r4, #0]
2400a6ec:	f001 ff74 	bl	2400c5d8 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
2400a6f0:	2800      	cmp	r0, #0
2400a6f2:	d1cf      	bne.n	2400a694 <HAL_SD_InitCard+0x180>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400a6f4:	f7fa f86c 	bl	240047d0 <HAL_GetTick>
2400a6f8:	1b43      	subs	r3, r0, r5
2400a6fa:	42b3      	cmp	r3, r6
2400a6fc:	d836      	bhi.n	2400a76c <HAL_SD_InitCard+0x258>
    while (sd_rca == 0U)
2400a6fe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400a702:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
2400a706:	2b00      	cmp	r3, #0
2400a708:	d0ef      	beq.n	2400a6ea <HAL_SD_InitCard+0x1d6>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a70a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2400a70c:	2a03      	cmp	r2, #3
2400a70e:	d097      	beq.n	2400a640 <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a710:	0419      	lsls	r1, r3, #16
2400a712:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
2400a714:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a716:	f001 ff1f 	bl	2400c558 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a71a:	2800      	cmp	r0, #0
2400a71c:	d1ba      	bne.n	2400a694 <HAL_SD_InitCard+0x180>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a71e:	4601      	mov	r1, r0
2400a720:	6820      	ldr	r0, [r4, #0]
2400a722:	f000 fef9 	bl	2400b518 <SDMMC_GetResponse>
2400a726:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a728:	2104      	movs	r1, #4
2400a72a:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a72c:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a72e:	f000 fef3 	bl	2400b518 <SDMMC_GetResponse>
2400a732:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a734:	2108      	movs	r1, #8
2400a736:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400a738:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a73a:	f000 feed 	bl	2400b518 <SDMMC_GetResponse>
2400a73e:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a740:	210c      	movs	r1, #12
2400a742:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400a744:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400a746:	f000 fee7 	bl	2400b518 <SDMMC_GetResponse>
2400a74a:	66a0      	str	r0, [r4, #104]	; 0x68
2400a74c:	e778      	b.n	2400a640 <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400a74e:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
2400a750:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400a752:	f001 fc17 	bl	2400bf84 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a756:	2800      	cmp	r0, #0
2400a758:	f47f af52 	bne.w	2400a600 <HAL_SD_InitCard+0xec>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
2400a75c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400a75e:	2b01      	cmp	r3, #1
2400a760:	f47f af2e 	bne.w	2400a5c0 <HAL_SD_InitCard+0xac>
2400a764:	e727      	b.n	2400a5b6 <HAL_SD_InitCard+0xa2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a766:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
2400a76a:	e793      	b.n	2400a694 <HAL_SD_InitCard+0x180>
        return HAL_SD_ERROR_TIMEOUT;
2400a76c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
2400a770:	e790      	b.n	2400a694 <HAL_SD_InitCard+0x180>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400a772:	9b03      	ldr	r3, [sp, #12]
2400a774:	42b3      	cmp	r3, r6
2400a776:	f67f af55 	bls.w	2400a624 <HAL_SD_InitCard+0x110>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
2400a77a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
2400a77e:	e708      	b.n	2400a592 <HAL_SD_InitCard+0x7e>
2400a780:	014f8b59 	.word	0x014f8b59
2400a784:	000c34ff 	.word	0x000c34ff
2400a788:	00012110 	.word	0x00012110
2400a78c:	c1100000 	.word	0xc1100000
2400a790:	1fe00fff 	.word	0x1fe00fff

2400a794 <HAL_SD_GetCardInfo>:
{
2400a794:	4603      	mov	r3, r0
}
2400a796:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400a798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400a79a:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
2400a79c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2400a79e:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
2400a7a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2400a7a2:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
2400a7a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400a7a6:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
2400a7a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2400a7aa:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
2400a7ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2400a7ae:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
2400a7b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400a7b2:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
2400a7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400a7b6:	61cb      	str	r3, [r1, #28]
}
2400a7b8:	4770      	bx	lr
2400a7ba:	bf00      	nop

2400a7bc <HAL_SD_ConfigWideBusOperation>:
{
2400a7bc:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
2400a7be:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a7c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
2400a7c2:	b089      	sub	sp, #36	; 0x24
2400a7c4:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a7c6:	4293      	cmp	r3, r2
{
2400a7c8:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
2400a7ca:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
2400a7ce:	d040      	beq.n	2400a852 <HAL_SD_ConfigWideBusOperation+0x96>
    if (WideMode == SDMMC_BUS_WIDE_8B)
2400a7d0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
2400a7d4:	d03d      	beq.n	2400a852 <HAL_SD_ConfigWideBusOperation+0x96>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
2400a7d6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400a7da:	d07d      	beq.n	2400a8d8 <HAL_SD_ConfigWideBusOperation+0x11c>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
2400a7dc:	2900      	cmp	r1, #0
2400a7de:	d05c      	beq.n	2400a89a <HAL_SD_ConfigWideBusOperation+0xde>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a7e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a7e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400a7e6:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400a7e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a7ea:	2b00      	cmp	r3, #0
2400a7ec:	d138      	bne.n	2400a860 <HAL_SD_ConfigWideBusOperation+0xa4>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400a7ee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400a7f2:	2100      	movs	r1, #0
2400a7f4:	f7fe fc06 	bl	24009004 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
2400a7f8:	2800      	cmp	r0, #0
2400a7fa:	d048      	beq.n	2400a88e <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400a7fc:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a7fe:	4b50      	ldr	r3, [pc, #320]	; (2400a940 <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400a800:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
2400a802:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400a804:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a806:	fba3 5300 	umull	r5, r3, r3, r0
2400a80a:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400a80c:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a80e:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400a812:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a814:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400a818:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400a81a:	d20e      	bcs.n	2400a83a <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
2400a81c:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400a81e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
2400a822:	d00a      	beq.n	2400a83a <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
2400a824:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
2400a828:	d078      	beq.n	2400a91c <HAL_SD_ConfigWideBusOperation+0x160>
        if (hsd->Init.ClockDiv == 0U)
2400a82a:	b112      	cbz	r2, 2400a832 <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
2400a82c:	0053      	lsls	r3, r2, #1
2400a82e:	fbb0 f0f3 	udiv	r0, r0, r3
2400a832:	4b44      	ldr	r3, [pc, #272]	; (2400a944 <HAL_SD_ConfigWideBusOperation+0x188>)
2400a834:	4298      	cmp	r0, r3
2400a836:	bf88      	it	hi
2400a838:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
2400a83a:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
2400a83c:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
2400a83e:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
2400a840:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
2400a842:	c903      	ldmia	r1, {r0, r1}
2400a844:	e88d 0003 	stmia.w	sp, {r0, r1}
2400a848:	cb0e      	ldmia	r3, {r1, r2, r3}
2400a84a:	6820      	ldr	r0, [r4, #0]
2400a84c:	f000 fe32 	bl	2400b4b4 <SDMMC_Init>
2400a850:	e00a      	b.n	2400a868 <HAL_SD_ConfigWideBusOperation+0xac>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a852:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2400a858:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400a85a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a85c:	2b00      	cmp	r3, #0
2400a85e:	d0c6      	beq.n	2400a7ee <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a860:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400a862:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a864:	4a38      	ldr	r2, [pc, #224]	; (2400a948 <HAL_SD_ConfigWideBusOperation+0x18c>)
2400a866:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400a868:	f44f 7100 	mov.w	r1, #512	; 0x200
2400a86c:	6820      	ldr	r0, [r4, #0]
2400a86e:	f000 fe6d 	bl	2400b54c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a872:	b130      	cbz	r0, 2400a882 <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a874:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400a876:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a878:	4a33      	ldr	r2, [pc, #204]	; (2400a948 <HAL_SD_ConfigWideBusOperation+0x18c>)
2400a87a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400a87c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a87e:	4303      	orrs	r3, r0
2400a880:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
2400a882:	2301      	movs	r3, #1
}
2400a884:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
2400a886:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400a88a:	b009      	add	sp, #36	; 0x24
2400a88c:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400a88e:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400a890:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400a892:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400a896:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400a898:	e7e6      	b.n	2400a868 <HAL_SD_ConfigWideBusOperation+0xac>
  uint32_t scr[2U] = {0UL, 0UL};
2400a89a:	2200      	movs	r2, #0
2400a89c:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a89e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400a8a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a8a4:	f000 fe38 	bl	2400b518 <SDMMC_GetResponse>
2400a8a8:	0182      	lsls	r2, r0, #6
2400a8aa:	d434      	bmi.n	2400a916 <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
2400a8ac:	a902      	add	r1, sp, #8
2400a8ae:	4620      	mov	r0, r4
2400a8b0:	f7ff fafc 	bl	24009eac <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a8b4:	b960      	cbnz	r0, 2400a8d0 <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400a8b6:	9b03      	ldr	r3, [sp, #12]
2400a8b8:	03db      	lsls	r3, r3, #15
2400a8ba:	d535      	bpl.n	2400a928 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a8bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a8be:	6820      	ldr	r0, [r4, #0]
2400a8c0:	0409      	lsls	r1, r1, #16
2400a8c2:	f001 fbcb 	bl	2400c05c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a8c6:	b918      	cbnz	r0, 2400a8d0 <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
2400a8c8:	4601      	mov	r1, r0
2400a8ca:	6820      	ldr	r0, [r4, #0]
2400a8cc:	f001 fcb0 	bl	2400c230 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
2400a8d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a8d2:	4303      	orrs	r3, r0
2400a8d4:	6363      	str	r3, [r4, #52]	; 0x34
2400a8d6:	e7c0      	b.n	2400a85a <HAL_SD_ConfigWideBusOperation+0x9e>
  uint32_t scr[2U] = {0UL, 0UL};
2400a8d8:	2200      	movs	r2, #0
2400a8da:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a8dc:	2100      	movs	r1, #0
2400a8de:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400a8e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a8e4:	f000 fe18 	bl	2400b518 <SDMMC_GetResponse>
2400a8e8:	0180      	lsls	r0, r0, #6
2400a8ea:	d414      	bmi.n	2400a916 <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
2400a8ec:	a902      	add	r1, sp, #8
2400a8ee:	4620      	mov	r0, r4
2400a8f0:	f7ff fadc 	bl	24009eac <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a8f4:	2800      	cmp	r0, #0
2400a8f6:	d1eb      	bne.n	2400a8d0 <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400a8f8:	9b03      	ldr	r3, [sp, #12]
2400a8fa:	0359      	lsls	r1, r3, #13
2400a8fc:	d514      	bpl.n	2400a928 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a8fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a900:	6820      	ldr	r0, [r4, #0]
2400a902:	0409      	lsls	r1, r1, #16
2400a904:	f001 fbaa 	bl	2400c05c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a908:	2800      	cmp	r0, #0
2400a90a:	d1e1      	bne.n	2400a8d0 <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
2400a90c:	2102      	movs	r1, #2
2400a90e:	6820      	ldr	r0, [r4, #0]
2400a910:	f001 fc8e 	bl	2400c230 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a914:	e7dc      	b.n	2400a8d0 <HAL_SD_ConfigWideBusOperation+0x114>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400a916:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400a91a:	e7d9      	b.n	2400a8d0 <HAL_SD_ConfigWideBusOperation+0x114>
        if (hsd->Init.ClockDiv == 0U)
2400a91c:	b93a      	cbnz	r2, 2400a92e <HAL_SD_ConfigWideBusOperation+0x172>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
2400a91e:	490b      	ldr	r1, [pc, #44]	; (2400a94c <HAL_SD_ConfigWideBusOperation+0x190>)
2400a920:	4288      	cmp	r0, r1
2400a922:	d98a      	bls.n	2400a83a <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
2400a924:	0e5a      	lsrs	r2, r3, #25
2400a926:	e788      	b.n	2400a83a <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400a928:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
2400a92c:	e7d0      	b.n	2400a8d0 <HAL_SD_ConfigWideBusOperation+0x114>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
2400a92e:	0051      	lsls	r1, r2, #1
2400a930:	fbb0 f1f1 	udiv	r1, r0, r1
2400a934:	4805      	ldr	r0, [pc, #20]	; (2400a94c <HAL_SD_ConfigWideBusOperation+0x190>)
2400a936:	4281      	cmp	r1, r0
2400a938:	f67f af7f 	bls.w	2400a83a <HAL_SD_ConfigWideBusOperation+0x7e>
2400a93c:	e7f2      	b.n	2400a924 <HAL_SD_ConfigWideBusOperation+0x168>
2400a93e:	bf00      	nop
2400a940:	55e63b89 	.word	0x55e63b89
2400a944:	017d7840 	.word	0x017d7840
2400a948:	1fe00fff 	.word	0x1fe00fff
2400a94c:	02faf080 	.word	0x02faf080

2400a950 <HAL_SD_Init>:
{
2400a950:	b5f0      	push	{r4, r5, r6, r7, lr}
2400a952:	b087      	sub	sp, #28
  if (hsd == NULL)
2400a954:	2800      	cmp	r0, #0
2400a956:	d045      	beq.n	2400a9e4 <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_RESET)
2400a958:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
2400a95c:	4604      	mov	r4, r0
2400a95e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400a962:	2b00      	cmp	r3, #0
2400a964:	d042      	beq.n	2400a9ec <HAL_SD_Init+0x9c>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400a966:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400a968:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400a96a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400a96e:	f7ff fdd1 	bl	2400a514 <HAL_SD_InitCard>
2400a972:	2800      	cmp	r0, #0
2400a974:	d136      	bne.n	2400a9e4 <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_BUSY)
2400a976:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400a97a:	2b03      	cmp	r3, #3
2400a97c:	d032      	beq.n	2400a9e4 <HAL_SD_Init+0x94>
2400a97e:	a901      	add	r1, sp, #4
2400a980:	4620      	mov	r0, r4
2400a982:	f7ff f9cd 	bl	24009d20 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
2400a986:	bb68      	cbnz	r0, 2400a9e4 <HAL_SD_Init+0x94>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400a988:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
2400a98a:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400a98e:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
2400a990:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
2400a994:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
2400a996:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400a998:	d02c      	beq.n	2400a9f4 <HAL_SD_Init+0xa4>
2400a99a:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400a99c:	68e1      	ldr	r1, [r4, #12]
2400a99e:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
2400a9a0:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400a9a2:	f7ff ff0b 	bl	2400a7bc <HAL_SD_ConfigWideBusOperation>
2400a9a6:	4606      	mov	r6, r0
2400a9a8:	b9e0      	cbnz	r0, 2400a9e4 <HAL_SD_Init+0x94>
  tickstart = HAL_GetTick();
2400a9aa:	f7f9 ff11 	bl	240047d0 <HAL_GetTick>
2400a9ae:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400a9b0:	e00c      	b.n	2400a9cc <HAL_SD_Init+0x7c>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400a9b2:	6820      	ldr	r0, [r4, #0]
2400a9b4:	4629      	mov	r1, r5
2400a9b6:	f000 fdaf 	bl	2400b518 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400a9ba:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400a9be:	2804      	cmp	r0, #4
2400a9c0:	d01f      	beq.n	2400aa02 <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400a9c2:	f7f9 ff05 	bl	240047d0 <HAL_GetTick>
2400a9c6:	1bc3      	subs	r3, r0, r7
2400a9c8:	3301      	adds	r3, #1
2400a9ca:	d020      	beq.n	2400aa0e <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a9cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a9ce:	6820      	ldr	r0, [r4, #0]
2400a9d0:	0409      	lsls	r1, r1, #16
2400a9d2:	f001 fe61 	bl	2400c698 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a9d6:	4605      	mov	r5, r0
2400a9d8:	2800      	cmp	r0, #0
2400a9da:	d0ea      	beq.n	2400a9b2 <HAL_SD_Init+0x62>
    hsd->ErrorCode |= errorstate;
2400a9dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a9de:	4303      	orrs	r3, r0
2400a9e0:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
2400a9e2:	e7ee      	b.n	2400a9c2 <HAL_SD_Init+0x72>
    return HAL_ERROR;
2400a9e4:	2601      	movs	r6, #1
}
2400a9e6:	4630      	mov	r0, r6
2400a9e8:	b007      	add	sp, #28
2400a9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
2400a9ec:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
2400a9ee:	f7f9 fb37 	bl	24004060 <HAL_SD_MspInit>
2400a9f2:	e7b8      	b.n	2400a966 <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400a9f4:	4313      	orrs	r3, r2
2400a9f6:	bf0c      	ite	eq
2400a9f8:	f44f 7380 	moveq.w	r3, #256	; 0x100
2400a9fc:	f44f 7300 	movne.w	r3, #512	; 0x200
2400aa00:	e7cc      	b.n	2400a99c <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
2400aa02:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400aa04:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
2400aa06:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
2400aa08:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
2400aa0c:	e7eb      	b.n	2400a9e6 <HAL_SD_Init+0x96>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400aa0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
2400aa12:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
2400aa14:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400aa16:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400aa18:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
2400aa1c:	e7e3      	b.n	2400a9e6 <HAL_SD_Init+0x96>
2400aa1e:	bf00      	nop

2400aa20 <HAL_SD_GetCardState>:
{
2400aa20:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400aa22:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
2400aa24:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400aa26:	6800      	ldr	r0, [r0, #0]
2400aa28:	0409      	lsls	r1, r1, #16
2400aa2a:	f001 fe35 	bl	2400c698 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400aa2e:	4601      	mov	r1, r0
2400aa30:	b120      	cbz	r0, 2400aa3c <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
2400aa32:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400aa34:	2000      	movs	r0, #0
2400aa36:	430b      	orrs	r3, r1
2400aa38:	6363      	str	r3, [r4, #52]	; 0x34
}
2400aa3a:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400aa3c:	6820      	ldr	r0, [r4, #0]
2400aa3e:	f000 fd6b 	bl	2400b518 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400aa42:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
2400aa46:	bd10      	pop	{r4, pc}

2400aa48 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
2400aa48:	b318      	cbz	r0, 2400aa92 <HAL_SDRAM_Init+0x4a>
{
2400aa4a:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
2400aa4c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
2400aa50:	4604      	mov	r4, r0
2400aa52:	460d      	mov	r5, r1
2400aa54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400aa58:	b1b3      	cbz	r3, 2400aa88 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400aa5a:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aa5c:	2302      	movs	r3, #2
2400aa5e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400aa62:	f851 0b04 	ldr.w	r0, [r1], #4
2400aa66:	f000 fc73 	bl	2400b350 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
2400aa6a:	6862      	ldr	r2, [r4, #4]
2400aa6c:	4629      	mov	r1, r5
2400aa6e:	6820      	ldr	r0, [r4, #0]
2400aa70:	f000 fcac 	bl	2400b3cc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
2400aa74:	4a08      	ldr	r2, [pc, #32]	; (2400aa98 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
2400aa76:	2101      	movs	r1, #1

  return HAL_OK;
2400aa78:	2000      	movs	r0, #0
  __FMC_ENABLE();
2400aa7a:	6813      	ldr	r3, [r2, #0]
2400aa7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400aa80:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
2400aa82:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
2400aa86:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
2400aa88:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
2400aa8c:	f7f7 f810 	bl	24001ab0 <HAL_SDRAM_MspInit>
2400aa90:	e7e3      	b.n	2400aa5a <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
2400aa92:	2001      	movs	r0, #1
}
2400aa94:	4770      	bx	lr
2400aa96:	bf00      	nop
2400aa98:	52004000 	.word	0x52004000

2400aa9c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
2400aa9c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400aa9e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400aaa2:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
2400aaa4:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400aaa6:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
2400aaa8:	d004      	beq.n	2400aab4 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
2400aaaa:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
2400aaae:	2e01      	cmp	r6, #1
2400aab0:	d001      	beq.n	2400aab6 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
2400aab2:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400aab4:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aab6:	2302      	movs	r3, #2
2400aab8:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400aaba:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aabc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400aac0:	f000 fcd2 	bl	2400b468 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
2400aac4:	682b      	ldr	r3, [r5, #0]
2400aac6:	2b02      	cmp	r3, #2
2400aac8:	d003      	beq.n	2400aad2 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
2400aaca:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
2400aacc:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
2400aad0:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400aad2:	2305      	movs	r3, #5
  return HAL_OK;
2400aad4:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400aad6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
2400aada:	bd70      	pop	{r4, r5, r6, pc}

2400aadc <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
2400aadc:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400aade:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400aae2:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400aae4:	2b02      	cmp	r3, #2
2400aae6:	b2d8      	uxtb	r0, r3
2400aae8:	d005      	beq.n	2400aaf6 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
2400aaea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400aaee:	2b01      	cmp	r3, #1
2400aaf0:	b2dd      	uxtb	r5, r3
2400aaf2:	d001      	beq.n	2400aaf8 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
2400aaf4:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400aaf6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aaf8:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400aafa:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400aafc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400ab00:	f000 fcca 	bl	2400b498 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
2400ab04:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
2400ab06:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
2400ab0a:	bd38      	pop	{r3, r4, r5, pc}

2400ab0c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
2400ab0c:	6802      	ldr	r2, [r0, #0]
{
2400ab0e:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
2400ab10:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400ab12:	6991      	ldr	r1, [r2, #24]
2400ab14:	f041 0108 	orr.w	r1, r1, #8
2400ab18:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400ab1a:	6801      	ldr	r1, [r0, #0]
2400ab1c:	698a      	ldr	r2, [r1, #24]
2400ab1e:	f042 0210 	orr.w	r2, r2, #16
2400ab22:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2400ab24:	6801      	ldr	r1, [r0, #0]
2400ab26:	680a      	ldr	r2, [r1, #0]
2400ab28:	f022 0201 	bic.w	r2, r2, #1
2400ab2c:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400ab2e:	6801      	ldr	r1, [r0, #0]
2400ab30:	4a27      	ldr	r2, [pc, #156]	; (2400abd0 <SPI_CloseTransfer+0xc4>)
2400ab32:	690c      	ldr	r4, [r1, #16]
2400ab34:	4022      	ands	r2, r4
2400ab36:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400ab38:	6801      	ldr	r1, [r0, #0]
2400ab3a:	688a      	ldr	r2, [r1, #8]
2400ab3c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400ab40:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400ab42:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400ab46:	2a04      	cmp	r2, #4
2400ab48:	d001      	beq.n	2400ab4e <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400ab4a:	069c      	lsls	r4, r3, #26
2400ab4c:	d433      	bmi.n	2400abb6 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400ab4e:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400ab52:	2a03      	cmp	r2, #3
2400ab54:	d001      	beq.n	2400ab5a <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400ab56:	0659      	lsls	r1, r3, #25
2400ab58:	d421      	bmi.n	2400ab9e <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400ab5a:	059a      	lsls	r2, r3, #22
2400ab5c:	d50a      	bpl.n	2400ab74 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400ab5e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400ab62:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400ab64:	f042 0201 	orr.w	r2, r2, #1
2400ab68:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400ab6c:	698a      	ldr	r2, [r1, #24]
2400ab6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400ab72:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400ab74:	05db      	lsls	r3, r3, #23
2400ab76:	d50a      	bpl.n	2400ab8e <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400ab78:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400ab7c:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400ab7e:	f043 0308 	orr.w	r3, r3, #8
2400ab82:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400ab86:	6993      	ldr	r3, [r2, #24]
2400ab88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400ab8c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
2400ab8e:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
2400ab90:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
2400ab94:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400ab98:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
2400ab9c:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400ab9e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400aba2:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400aba4:	f042 0204 	orr.w	r2, r2, #4
2400aba8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400abac:	698a      	ldr	r2, [r1, #24]
2400abae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400abb2:	618a      	str	r2, [r1, #24]
2400abb4:	e7d1      	b.n	2400ab5a <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400abb6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400abba:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400abbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400abc0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400abc4:	698a      	ldr	r2, [r1, #24]
2400abc6:	f042 0220 	orr.w	r2, r2, #32
2400abca:	618a      	str	r2, [r1, #24]
2400abcc:	e7bf      	b.n	2400ab4e <SPI_CloseTransfer+0x42>
2400abce:	bf00      	nop
2400abd0:	fffffc90 	.word	0xfffffc90

2400abd4 <HAL_SPI_Init>:
  if (hspi == NULL)
2400abd4:	2800      	cmp	r0, #0
2400abd6:	f000 80be 	beq.w	2400ad56 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400abda:	4a62      	ldr	r2, [pc, #392]	; (2400ad64 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400abdc:	2100      	movs	r1, #0
{
2400abde:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400abe0:	6803      	ldr	r3, [r0, #0]
2400abe2:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400abe4:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400abe6:	4293      	cmp	r3, r2
2400abe8:	d015      	beq.n	2400ac16 <HAL_SPI_Init+0x42>
2400abea:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
2400abee:	4293      	cmp	r3, r2
2400abf0:	d011      	beq.n	2400ac16 <HAL_SPI_Init+0x42>
2400abf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
2400abf6:	4293      	cmp	r3, r2
2400abf8:	68c2      	ldr	r2, [r0, #12]
2400abfa:	f000 80a5 	beq.w	2400ad48 <HAL_SPI_Init+0x174>
2400abfe:	2a0f      	cmp	r2, #15
2400ac00:	d807      	bhi.n	2400ac12 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ac02:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
2400ac04:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ac06:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400ac08:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
2400ac0a:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400ac0e:	2a08      	cmp	r2, #8
2400ac10:	d914      	bls.n	2400ac3c <HAL_SPI_Init+0x68>
    return HAL_ERROR;
2400ac12:	2001      	movs	r0, #1
}
2400ac14:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
2400ac16:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ac18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400ac1a:	3208      	adds	r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400ac1c:	4851      	ldr	r0, [pc, #324]	; (2400ad64 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ac1e:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400ac20:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
2400ac22:	fb01 2202 	mla	r2, r1, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400ac26:	4950      	ldr	r1, [pc, #320]	; (2400ad68 <HAL_SPI_Init+0x194>)
2400ac28:	428b      	cmp	r3, r1
2400ac2a:	bf18      	it	ne
2400ac2c:	4283      	cmpne	r3, r0
2400ac2e:	d003      	beq.n	2400ac38 <HAL_SPI_Init+0x64>
2400ac30:	f501 6180 	add.w	r1, r1, #1024	; 0x400
2400ac34:	428b      	cmp	r3, r1
2400ac36:	d101      	bne.n	2400ac3c <HAL_SPI_Init+0x68>
2400ac38:	2a10      	cmp	r2, #16
2400ac3a:	d8ea      	bhi.n	2400ac12 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
2400ac3c:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400ac40:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2400ac44:	2a00      	cmp	r2, #0
2400ac46:	d078      	beq.n	2400ad3a <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
2400ac48:	2202      	movs	r2, #2
2400ac4a:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
2400ac4e:	681a      	ldr	r2, [r3, #0]
2400ac50:	f022 0201 	bic.w	r2, r2, #1
2400ac54:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400ac56:	69a1      	ldr	r1, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400ac58:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400ac5a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
2400ac5e:	6861      	ldr	r1, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400ac60:	689a      	ldr	r2, [r3, #8]
2400ac62:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400ac66:	d058      	beq.n	2400ad1a <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2400ac68:	0249      	lsls	r1, r1, #9
2400ac6a:	d502      	bpl.n	2400ac72 <HAL_SPI_Init+0x9e>
2400ac6c:	68e1      	ldr	r1, [r4, #12]
2400ac6e:	2906      	cmp	r1, #6
2400ac70:	d84c      	bhi.n	2400ad0c <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400ac72:	6819      	ldr	r1, [r3, #0]
2400ac74:	f421 7180 	bic.w	r1, r1, #256	; 0x100
2400ac78:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400ac7a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
2400ac7c:	69e3      	ldr	r3, [r4, #28]
2400ac7e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400ac80:	432b      	orrs	r3, r5
2400ac82:	6821      	ldr	r1, [r4, #0]
2400ac84:	4303      	orrs	r3, r0
2400ac86:	68e0      	ldr	r0, [r4, #12]
2400ac88:	4303      	orrs	r3, r0
2400ac8a:	4313      	orrs	r3, r2
2400ac8c:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400ac8e:	6a65      	ldr	r5, [r4, #36]	; 0x24
2400ac90:	69a0      	ldr	r0, [r4, #24]
2400ac92:	6822      	ldr	r2, [r4, #0]
2400ac94:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
2400ac98:	432b      	orrs	r3, r5
2400ac9a:	430b      	orrs	r3, r1
2400ac9c:	6921      	ldr	r1, [r4, #16]
2400ac9e:	4303      	orrs	r3, r0
2400aca0:	6960      	ldr	r0, [r4, #20]
2400aca2:	430b      	orrs	r3, r1
2400aca4:	6a21      	ldr	r1, [r4, #32]
2400aca6:	4303      	orrs	r3, r0
2400aca8:	6860      	ldr	r0, [r4, #4]
2400acaa:	430b      	orrs	r3, r1
2400acac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400acae:	4303      	orrs	r3, r0
2400acb0:	68a0      	ldr	r0, [r4, #8]
2400acb2:	430b      	orrs	r3, r1
2400acb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400acb6:	4303      	orrs	r3, r0
2400acb8:	430b      	orrs	r3, r1
2400acba:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400acbc:	430b      	orrs	r3, r1
2400acbe:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
2400acc0:	6863      	ldr	r3, [r4, #4]
2400acc2:	b96b      	cbnz	r3, 2400ace0 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2400acc4:	6822      	ldr	r2, [r4, #0]
2400acc6:	6893      	ldr	r3, [r2, #8]
2400acc8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
2400accc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400acd0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
2400acd2:	6822      	ldr	r2, [r4, #0]
2400acd4:	6893      	ldr	r3, [r2, #8]
2400acd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
2400acda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400acde:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2400ace0:	6822      	ldr	r2, [r4, #0]
2400ace2:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400ace4:	f023 0301 	bic.w	r3, r3, #1
2400ace8:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
2400acea:	6863      	ldr	r3, [r4, #4]
2400acec:	025b      	lsls	r3, r3, #9
2400acee:	d506      	bpl.n	2400acfe <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
2400acf0:	6822      	ldr	r2, [r4, #0]
2400acf2:	6d61      	ldr	r1, [r4, #84]	; 0x54
2400acf4:	68d3      	ldr	r3, [r2, #12]
2400acf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400acfa:	430b      	orrs	r3, r1
2400acfc:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400acfe:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
2400ad00:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400ad02:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
2400ad06:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400ad0a:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
2400ad0c:	6819      	ldr	r1, [r3, #0]
2400ad0e:	6d20      	ldr	r0, [r4, #80]	; 0x50
2400ad10:	f421 7180 	bic.w	r1, r1, #256	; 0x100
2400ad14:	4301      	orrs	r1, r0
2400ad16:	6019      	str	r1, [r3, #0]
2400ad18:	e7af      	b.n	2400ac7a <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400ad1a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
2400ad1e:	d01c      	beq.n	2400ad5a <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2400ad20:	2900      	cmp	r1, #0
2400ad22:	d1a1      	bne.n	2400ac68 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2400ad24:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2400ad26:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
2400ad2a:	d1a2      	bne.n	2400ac72 <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
2400ad2c:	6819      	ldr	r1, [r3, #0]
2400ad2e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
2400ad32:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400ad34:	e9d4 3100 	ldrd	r3, r1, [r4]
2400ad38:	e796      	b.n	2400ac68 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
2400ad3a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
2400ad3c:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
2400ad40:	f7f9 fa3a 	bl	240041b8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
2400ad44:	6823      	ldr	r3, [r4, #0]
2400ad46:	e77f      	b.n	2400ac48 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ad48:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400ad4a:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400ad4c:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400ad4e:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
2400ad50:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400ad54:	e770      	b.n	2400ac38 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
2400ad56:	2001      	movs	r0, #1
}
2400ad58:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400ad5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2400ad5c:	2900      	cmp	r1, #0
2400ad5e:	d0e5      	beq.n	2400ad2c <HAL_SPI_Init+0x158>
2400ad60:	e784      	b.n	2400ac6c <HAL_SPI_Init+0x98>
2400ad62:	bf00      	nop
2400ad64:	40013000 	.word	0x40013000
2400ad68:	40003800 	.word	0x40003800

2400ad6c <HAL_SPI_TransmitReceive_DMA>:
{
2400ad6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400ad70:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
2400ad72:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400ad76:	2b01      	cmp	r3, #1
2400ad78:	f000 809a 	beq.w	2400aeb0 <HAL_SPI_TransmitReceive_DMA+0x144>
2400ad7c:	2301      	movs	r3, #1
2400ad7e:	4604      	mov	r4, r0
2400ad80:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400ad84:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400ad88:	2b01      	cmp	r3, #1
2400ad8a:	b2de      	uxtb	r6, r3
2400ad8c:	d158      	bne.n	2400ae40 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
2400ad8e:	2d00      	cmp	r5, #0
2400ad90:	bf18      	it	ne
2400ad92:	2a00      	cmpne	r2, #0
2400ad94:	d04e      	beq.n	2400ae34 <HAL_SPI_TransmitReceive_DMA+0xc8>
2400ad96:	fab1 f381 	clz	r3, r1
2400ad9a:	095b      	lsrs	r3, r3, #5
2400ad9c:	2900      	cmp	r1, #0
2400ad9e:	d049      	beq.n	2400ae34 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
2400ada0:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400ada2:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2400ada4:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
2400ada6:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400ada8:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
2400adac:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400adb0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
2400adb4:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
2400adb8:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
2400adbc:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
2400adc0:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
2400adc4:	68d3      	ldr	r3, [r2, #12]
2400adc6:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400adca:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400adcc:	6802      	ldr	r2, [r0, #0]
2400adce:	6893      	ldr	r3, [r2, #8]
2400add0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400add4:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400add6:	68c3      	ldr	r3, [r0, #12]
2400add8:	2b0f      	cmp	r3, #15
2400adda:	d938      	bls.n	2400ae4e <HAL_SPI_TransmitReceive_DMA+0xe2>
2400addc:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400adde:	699a      	ldr	r2, [r3, #24]
2400ade0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400ade4:	d126      	bne.n	2400ae34 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400ade6:	4a6c      	ldr	r2, [pc, #432]	; (2400af98 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
2400ade8:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400adec:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 2400afa4 <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400adf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
2400adf2:	4a6a      	ldr	r2, [pc, #424]	; (2400af9c <HAL_SPI_TransmitReceive_DMA+0x230>)
2400adf4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400adf6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400adf8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400adfa:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400adfe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400ae00:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
2400ae04:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400ae08:	6821      	ldr	r1, [r4, #0]
2400ae0a:	b29b      	uxth	r3, r3
2400ae0c:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400ae0e:	3130      	adds	r1, #48	; 0x30
2400ae10:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400ae12:	f7fa f8f9 	bl	24005008 <HAL_DMA_Start_IT>
2400ae16:	4607      	mov	r7, r0
2400ae18:	2800      	cmp	r0, #0
2400ae1a:	d04d      	beq.n	2400aeb8 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400ae1c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400ae20:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400ae22:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400ae26:	f043 0310 	orr.w	r3, r3, #16
2400ae2a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400ae2e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400ae32:	e002      	b.n	2400ae3a <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
2400ae34:	2300      	movs	r3, #0
2400ae36:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400ae3a:	4630      	mov	r0, r6
2400ae3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
2400ae40:	2300      	movs	r3, #0
    return errorcode;
2400ae42:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400ae44:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400ae48:	4630      	mov	r0, r6
2400ae4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400ae4e:	2b07      	cmp	r3, #7
2400ae50:	d87f      	bhi.n	2400af52 <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400ae52:	6f82      	ldr	r2, [r0, #120]	; 0x78
2400ae54:	6993      	ldr	r3, [r2, #24]
2400ae56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400ae5a:	d107      	bne.n	2400ae6c <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400ae5c:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
2400ae60:	b29b      	uxth	r3, r3
2400ae62:	3301      	adds	r3, #1
2400ae64:	085b      	lsrs	r3, r3, #1
2400ae66:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400ae6a:	6993      	ldr	r3, [r2, #24]
2400ae6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400ae70:	d106      	bne.n	2400ae80 <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
2400ae72:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
2400ae76:	b29b      	uxth	r3, r3
2400ae78:	3303      	adds	r3, #3
2400ae7a:	089b      	lsrs	r3, r3, #2
2400ae7c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400ae80:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400ae82:	699a      	ldr	r2, [r3, #24]
2400ae84:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400ae88:	d107      	bne.n	2400ae9a <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400ae8a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400ae8e:	b292      	uxth	r2, r2
2400ae90:	3201      	adds	r2, #1
2400ae92:	0852      	lsrs	r2, r2, #1
2400ae94:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400ae98:	699a      	ldr	r2, [r3, #24]
2400ae9a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400ae9e:	d1a2      	bne.n	2400ade6 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400aea0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400aea4:	b292      	uxth	r2, r2
2400aea6:	3203      	adds	r2, #3
2400aea8:	0892      	lsrs	r2, r2, #2
2400aeaa:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400aeae:	e79a      	b.n	2400ade6 <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
2400aeb0:	2602      	movs	r6, #2
}
2400aeb2:	4630      	mov	r0, r6
2400aeb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400aeb8:	6822      	ldr	r2, [r4, #0]
2400aeba:	6893      	ldr	r3, [r2, #8]
2400aebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400aec0:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
2400aec2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400aec4:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
2400aec6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400aec8:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
2400aeca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400aecc:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
2400aece:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400aed0:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
2400aed4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
2400aed8:	6822      	ldr	r2, [r4, #0]
2400aeda:	b29b      	uxth	r3, r3
2400aedc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400aede:	3220      	adds	r2, #32
2400aee0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400aee2:	f7fa f891 	bl	24005008 <HAL_DMA_Start_IT>
2400aee6:	bb40      	cbnz	r0, 2400af3a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400aee8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400aeea:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400aeec:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400aeee:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400aef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400aef4:	4b2a      	ldr	r3, [pc, #168]	; (2400afa0 <HAL_SPI_TransmitReceive_DMA+0x234>)
2400aef6:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400aefa:	bf18      	it	ne
2400aefc:	432b      	orrne	r3, r5
2400aefe:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
2400af00:	6822      	ldr	r2, [r4, #0]
2400af02:	6893      	ldr	r3, [r2, #8]
2400af04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2400af08:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
2400af0a:	6822      	ldr	r2, [r4, #0]
2400af0c:	6913      	ldr	r3, [r2, #16]
2400af0e:	f443 7358 	orr.w	r3, r3, #864	; 0x360
2400af12:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400af14:	6822      	ldr	r2, [r4, #0]
2400af16:	6813      	ldr	r3, [r2, #0]
2400af18:	f043 0301 	orr.w	r3, r3, #1
2400af1c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400af1e:	6863      	ldr	r3, [r4, #4]
2400af20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400af24:	d104      	bne.n	2400af30 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400af26:	6822      	ldr	r2, [r4, #0]
2400af28:	6813      	ldr	r3, [r2, #0]
2400af2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400af2e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
2400af30:	2300      	movs	r3, #0
  return errorcode;
2400af32:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400af34:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
2400af38:	e77f      	b.n	2400ae3a <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400af3a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400af3e:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400af40:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400af44:	f043 0310 	orr.w	r3, r3, #16
2400af48:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400af4c:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400af50:	e773      	b.n	2400ae3a <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400af52:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400af54:	699a      	ldr	r2, [r3, #24]
2400af56:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400af5a:	d003      	beq.n	2400af64 <HAL_SPI_TransmitReceive_DMA+0x1f8>
2400af5c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400af60:	f47f af68 	bne.w	2400ae34 <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400af64:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400af66:	6989      	ldr	r1, [r1, #24]
2400af68:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400af6c:	d107      	bne.n	2400af7e <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400af6e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
2400af72:	b292      	uxth	r2, r2
2400af74:	3201      	adds	r2, #1
2400af76:	0852      	lsrs	r2, r2, #1
2400af78:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400af7c:	699a      	ldr	r2, [r3, #24]
2400af7e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400af82:	f47f af30 	bne.w	2400ade6 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400af86:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400af8a:	b292      	uxth	r2, r2
2400af8c:	3201      	adds	r2, #1
2400af8e:	0852      	lsrs	r2, r2, #1
2400af90:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400af94:	e727      	b.n	2400ade6 <HAL_SPI_TransmitReceive_DMA+0x7a>
2400af96:	bf00      	nop
2400af98:	2400afd9 	.word	0x2400afd9
2400af9c:	2400afb1 	.word	0x2400afb1
2400afa0:	ffff0000 	.word	0xffff0000
2400afa4:	2400afe9 	.word	0x2400afe9

2400afa8 <HAL_SPI_TxCpltCallback>:
2400afa8:	4770      	bx	lr
2400afaa:	bf00      	nop

2400afac <HAL_SPI_RxCpltCallback>:
2400afac:	4770      	bx	lr
2400afae:	bf00      	nop

2400afb0 <SPI_DMATransmitReceiveCplt>:
{
2400afb0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400afb2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400afb4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400afb8:	2b07      	cmp	r3, #7
2400afba:	d009      	beq.n	2400afd0 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400afbc:	6f83      	ldr	r3, [r0, #120]	; 0x78
2400afbe:	69db      	ldr	r3, [r3, #28]
2400afc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400afc4:	d005      	beq.n	2400afd2 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400afc6:	6802      	ldr	r2, [r0, #0]
2400afc8:	6913      	ldr	r3, [r2, #16]
2400afca:	f043 0308 	orr.w	r3, r3, #8
2400afce:	6113      	str	r3, [r2, #16]
}
2400afd0:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
2400afd2:	f021 fe41 	bl	2402cc58 <__HAL_SPI_TxRxCpltCallback_veneer>
}
2400afd6:	bd08      	pop	{r3, pc}

2400afd8 <SPI_DMAHalfTransmitReceiveCplt>:
{
2400afd8:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2400afda:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400afdc:	f021 fe40 	bl	2402cc60 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
2400afe0:	bd08      	pop	{r3, pc}
2400afe2:	bf00      	nop

2400afe4 <HAL_SPI_ErrorCallback>:
2400afe4:	4770      	bx	lr
2400afe6:	bf00      	nop

2400afe8 <SPI_DMAError>:
{
2400afe8:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400afea:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400afec:	f7fb f846 	bl	2400607c <HAL_DMA_GetError>
2400aff0:	2802      	cmp	r0, #2
2400aff2:	d100      	bne.n	2400aff6 <SPI_DMAError+0xe>
}
2400aff4:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
2400aff6:	6822      	ldr	r2, [r4, #0]
2400aff8:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400affa:	6991      	ldr	r1, [r2, #24]
2400affc:	f041 0108 	orr.w	r1, r1, #8
2400b000:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400b002:	6821      	ldr	r1, [r4, #0]
2400b004:	698a      	ldr	r2, [r1, #24]
2400b006:	f042 0210 	orr.w	r2, r2, #16
2400b00a:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
2400b00c:	6821      	ldr	r1, [r4, #0]
2400b00e:	680a      	ldr	r2, [r1, #0]
2400b010:	f022 0201 	bic.w	r2, r2, #1
2400b014:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400b016:	6821      	ldr	r1, [r4, #0]
2400b018:	4a2c      	ldr	r2, [pc, #176]	; (2400b0cc <SPI_DMAError+0xe4>)
2400b01a:	6908      	ldr	r0, [r1, #16]
2400b01c:	4002      	ands	r2, r0
2400b01e:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b020:	6821      	ldr	r1, [r4, #0]
2400b022:	688a      	ldr	r2, [r1, #8]
2400b024:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400b028:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400b02a:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400b02e:	2a04      	cmp	r2, #4
2400b030:	d001      	beq.n	2400b036 <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400b032:	0698      	lsls	r0, r3, #26
2400b034:	d43d      	bmi.n	2400b0b2 <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400b036:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400b03a:	2a03      	cmp	r2, #3
2400b03c:	d001      	beq.n	2400b042 <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400b03e:	0659      	lsls	r1, r3, #25
2400b040:	d42b      	bmi.n	2400b09a <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400b042:	059a      	lsls	r2, r3, #22
2400b044:	d50a      	bpl.n	2400b05c <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b046:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b04a:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b04c:	f042 0201 	orr.w	r2, r2, #1
2400b050:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b054:	698a      	ldr	r2, [r1, #24]
2400b056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400b05a:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400b05c:	05db      	lsls	r3, r3, #23
2400b05e:	d50a      	bpl.n	2400b076 <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b060:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b064:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b066:	f043 0308 	orr.w	r3, r3, #8
2400b06a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b06e:	6993      	ldr	r3, [r2, #24]
2400b070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400b074:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
2400b076:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
2400b078:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
2400b07a:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
2400b07c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400b080:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b084:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b088:	f043 0310 	orr.w	r3, r3, #16
2400b08c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b090:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
2400b094:	f7ff ffa6 	bl	2400afe4 <HAL_SPI_ErrorCallback>
}
2400b098:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b09a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b09e:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b0a0:	f042 0204 	orr.w	r2, r2, #4
2400b0a4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b0a8:	698a      	ldr	r2, [r1, #24]
2400b0aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400b0ae:	618a      	str	r2, [r1, #24]
2400b0b0:	e7c7      	b.n	2400b042 <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b0b2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b0b6:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b0b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400b0bc:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b0c0:	698a      	ldr	r2, [r1, #24]
2400b0c2:	f042 0220 	orr.w	r2, r2, #32
2400b0c6:	618a      	str	r2, [r1, #24]
2400b0c8:	e7b5      	b.n	2400b036 <SPI_DMAError+0x4e>
2400b0ca:	bf00      	nop
2400b0cc:	fffffc90 	.word	0xfffffc90

2400b0d0 <SPI_DMAAbortOnError>:
{
2400b0d0:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
2400b0d2:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b0d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
2400b0d6:	2300      	movs	r3, #0
2400b0d8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400b0dc:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
2400b0e0:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
2400b0e4:	f7ff ff7e 	bl	2400afe4 <HAL_SPI_ErrorCallback>
}
2400b0e8:	bd08      	pop	{r3, pc}
2400b0ea:	bf00      	nop

2400b0ec <HAL_SPI_SuspendCallback>:
2400b0ec:	4770      	bx	lr
2400b0ee:	bf00      	nop

2400b0f0 <HAL_SPI_IRQHandler>:
{
2400b0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
2400b0f4:	6805      	ldr	r5, [r0, #0]
{
2400b0f6:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
2400b0f8:	692a      	ldr	r2, [r5, #16]
  uint32_t itflag   = hspi->Instance->SR;
2400b0fa:	696b      	ldr	r3, [r5, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
2400b0fc:	f8d5 8008 	ldr.w	r8, [r5, #8]
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400b100:	0519      	lsls	r1, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
2400b102:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  uint32_t trigger  = itsource & itflag;
2400b106:	ea02 0703 	and.w	r7, r2, r3
  HAL_SPI_StateTypeDef State = hspi->State;
2400b10a:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400b10c:	d502      	bpl.n	2400b114 <HAL_SPI_IRQHandler+0x24>
2400b10e:	0713      	lsls	r3, r2, #28
2400b110:	f100 80fd 	bmi.w	2400b30e <HAL_SPI_IRQHandler+0x21e>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
2400b114:	f007 0364 	and.w	r3, r7, #100	; 0x64
2400b118:	2b04      	cmp	r3, #4
2400b11a:	d076      	beq.n	2400b20a <HAL_SPI_IRQHandler+0x11a>
  uint32_t handled  = 0UL;
2400b11c:	2200      	movs	r2, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
2400b11e:	f007 0345 	and.w	r3, r7, #69	; 0x45
2400b122:	2b01      	cmp	r3, #1
2400b124:	d045      	beq.n	2400b1b2 <HAL_SPI_IRQHandler+0xc2>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400b126:	f007 0326 	and.w	r3, r7, #38	; 0x26
2400b12a:	2b02      	cmp	r3, #2
2400b12c:	d048      	beq.n	2400b1c0 <HAL_SPI_IRQHandler+0xd0>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400b12e:	0579      	lsls	r1, r7, #21
2400b130:	f100 80e4 	bmi.w	2400b2fc <HAL_SPI_IRQHandler+0x20c>
  if (handled != 0UL)
2400b134:	2a00      	cmp	r2, #0
2400b136:	d150      	bne.n	2400b1da <HAL_SPI_IRQHandler+0xea>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
2400b138:	073b      	lsls	r3, r7, #28
2400b13a:	d56e      	bpl.n	2400b21a <HAL_SPI_IRQHandler+0x12a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400b13c:	6822      	ldr	r2, [r4, #0]
2400b13e:	6993      	ldr	r3, [r2, #24]
2400b140:	f043 0308 	orr.w	r3, r3, #8
2400b144:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400b146:	6822      	ldr	r2, [r4, #0]
2400b148:	6993      	ldr	r3, [r2, #24]
2400b14a:	f043 0310 	orr.w	r3, r3, #16
2400b14e:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400b150:	6822      	ldr	r2, [r4, #0]
2400b152:	6993      	ldr	r3, [r2, #24]
2400b154:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b158:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400b15a:	6822      	ldr	r2, [r4, #0]
2400b15c:	6913      	ldr	r3, [r2, #16]
2400b15e:	f023 0308 	bic.w	r3, r3, #8
2400b162:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b164:	6823      	ldr	r3, [r4, #0]
2400b166:	689b      	ldr	r3, [r3, #8]
2400b168:	f413 4f40 	tst.w	r3, #49152	; 0xc000
2400b16c:	d137      	bne.n	2400b1de <HAL_SPI_IRQHandler+0xee>
      while (hspi->RxXferCount != 0UL)
2400b16e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400b172:	b29b      	uxth	r3, r3
2400b174:	2b00      	cmp	r3, #0
2400b176:	d032      	beq.n	2400b1de <HAL_SPI_IRQHandler+0xee>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
2400b178:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b17a:	e00f      	b.n	2400b19c <HAL_SPI_IRQHandler+0xac>
2400b17c:	6823      	ldr	r3, [r4, #0]
2400b17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400b180:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400b182:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b184:	3204      	adds	r2, #4
        hspi->RxXferCount--;
2400b186:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400b18a:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
2400b18c:	3b01      	subs	r3, #1
2400b18e:	b29b      	uxth	r3, r3
2400b190:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
2400b194:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400b198:	b29b      	uxth	r3, r3
2400b19a:	b303      	cbz	r3, 2400b1de <HAL_SPI_IRQHandler+0xee>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2400b19c:	68e3      	ldr	r3, [r4, #12]
2400b19e:	2b0f      	cmp	r3, #15
2400b1a0:	d8ec      	bhi.n	2400b17c <HAL_SPI_IRQHandler+0x8c>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2400b1a2:	2b07      	cmp	r3, #7
2400b1a4:	f240 80c3 	bls.w	2400b32e <HAL_SPI_IRQHandler+0x23e>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
2400b1a8:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
2400b1aa:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
2400b1ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b1ae:	3202      	adds	r2, #2
2400b1b0:	e7e9      	b.n	2400b186 <HAL_SPI_IRQHandler+0x96>
    hspi->RxISR(hspi);
2400b1b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400b1b4:	4620      	mov	r0, r4
2400b1b6:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400b1b8:	f007 0326 	and.w	r3, r7, #38	; 0x26
2400b1bc:	2b02      	cmp	r3, #2
2400b1be:	d102      	bne.n	2400b1c6 <HAL_SPI_IRQHandler+0xd6>
    hspi->TxISR(hspi);
2400b1c0:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400b1c2:	4620      	mov	r0, r4
2400b1c4:	4798      	blx	r3
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400b1c6:	0578      	lsls	r0, r7, #21
2400b1c8:	d507      	bpl.n	2400b1da <HAL_SPI_IRQHandler+0xea>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b1ca:	6822      	ldr	r2, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400b1cc:	2300      	movs	r3, #0
2400b1ce:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b1d2:	6993      	ldr	r3, [r2, #24]
2400b1d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400b1d8:	6193      	str	r3, [r2, #24]
}
2400b1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
2400b1de:	4620      	mov	r0, r4
2400b1e0:	f7ff fc94 	bl	2400ab0c <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
2400b1e4:	2301      	movs	r3, #1
2400b1e6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400b1ea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b1ee:	2b00      	cmp	r3, #0
2400b1f0:	f040 8099 	bne.w	2400b326 <HAL_SPI_IRQHandler+0x236>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
2400b1f4:	2e05      	cmp	r6, #5
2400b1f6:	f000 80a1 	beq.w	2400b33c <HAL_SPI_IRQHandler+0x24c>
    else if (State == HAL_SPI_STATE_BUSY_RX)
2400b1fa:	2e04      	cmp	r6, #4
2400b1fc:	f000 80a1 	beq.w	2400b342 <HAL_SPI_IRQHandler+0x252>
    else if (State == HAL_SPI_STATE_BUSY_TX)
2400b200:	2e03      	cmp	r6, #3
2400b202:	d1ea      	bne.n	2400b1da <HAL_SPI_IRQHandler+0xea>
      HAL_SPI_TxCpltCallback(hspi);
2400b204:	f7ff fed0 	bl	2400afa8 <HAL_SPI_TxCpltCallback>
2400b208:	e7e7      	b.n	2400b1da <HAL_SPI_IRQHandler+0xea>
    hspi->TxISR(hspi);
2400b20a:	4620      	mov	r0, r4
2400b20c:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400b20e:	4798      	blx	r3
    hspi->RxISR(hspi);
2400b210:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400b212:	4620      	mov	r0, r4
2400b214:	4798      	blx	r3
    handled = 1UL;
2400b216:	2201      	movs	r2, #1
2400b218:	e781      	b.n	2400b11e <HAL_SPI_IRQHandler+0x2e>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
2400b21a:	f417 7f58 	tst.w	r7, #864	; 0x360
2400b21e:	d0dc      	beq.n	2400b1da <HAL_SPI_IRQHandler+0xea>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
2400b220:	0678      	lsls	r0, r7, #25
2400b222:	d50a      	bpl.n	2400b23a <HAL_SPI_IRQHandler+0x14a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b224:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b228:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b22a:	f043 0304 	orr.w	r3, r3, #4
2400b22e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b232:	6993      	ldr	r3, [r2, #24]
2400b234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b238:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
2400b23a:	05b9      	lsls	r1, r7, #22
2400b23c:	d50a      	bpl.n	2400b254 <HAL_SPI_IRQHandler+0x164>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b23e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b242:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b244:	f043 0301 	orr.w	r3, r3, #1
2400b248:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b24c:	6993      	ldr	r3, [r2, #24]
2400b24e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400b252:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
2400b254:	05fa      	lsls	r2, r7, #23
2400b256:	d50a      	bpl.n	2400b26e <HAL_SPI_IRQHandler+0x17e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b258:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b25c:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b25e:	f043 0308 	orr.w	r3, r3, #8
2400b262:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b266:	6993      	ldr	r3, [r2, #24]
2400b268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400b26c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
2400b26e:	06bb      	lsls	r3, r7, #26
2400b270:	d50a      	bpl.n	2400b288 <HAL_SPI_IRQHandler+0x198>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b272:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b276:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400b27c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b280:	6993      	ldr	r3, [r2, #24]
2400b282:	f043 0320 	orr.w	r3, r3, #32
2400b286:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400b288:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b28c:	2b00      	cmp	r3, #0
2400b28e:	d0a4      	beq.n	2400b1da <HAL_SPI_IRQHandler+0xea>
      __HAL_SPI_DISABLE(hspi);
2400b290:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b292:	f408 4840 	and.w	r8, r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400b296:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b298:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400b29c:	f023 0301 	bic.w	r3, r3, #1
2400b2a0:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
2400b2a2:	6822      	ldr	r2, [r4, #0]
2400b2a4:	4b28      	ldr	r3, [pc, #160]	; (2400b348 <HAL_SPI_IRQHandler+0x258>)
2400b2a6:	6911      	ldr	r1, [r2, #16]
2400b2a8:	ea03 0301 	and.w	r3, r3, r1
2400b2ac:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b2ae:	d136      	bne.n	2400b31e <HAL_SPI_IRQHandler+0x22e>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b2b0:	6822      	ldr	r2, [r4, #0]
2400b2b2:	6893      	ldr	r3, [r2, #8]
2400b2b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400b2b8:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
2400b2ba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b2bc:	b15b      	cbz	r3, 2400b2d6 <HAL_SPI_IRQHandler+0x1e6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
2400b2be:	4a23      	ldr	r2, [pc, #140]	; (2400b34c <HAL_SPI_IRQHandler+0x25c>)
2400b2c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2400b2c2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400b2c4:	f7fa f96c 	bl	240055a0 <HAL_DMA_Abort_IT>
2400b2c8:	b128      	cbz	r0, 2400b2d6 <HAL_SPI_IRQHandler+0x1e6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400b2ca:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b2d2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
2400b2d6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b2d8:	2b00      	cmp	r3, #0
2400b2da:	f43f af7e 	beq.w	2400b1da <HAL_SPI_IRQHandler+0xea>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2400b2de:	4a1b      	ldr	r2, [pc, #108]	; (2400b34c <HAL_SPI_IRQHandler+0x25c>)
2400b2e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
2400b2e2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400b2e4:	f7fa f95c 	bl	240055a0 <HAL_DMA_Abort_IT>
2400b2e8:	2800      	cmp	r0, #0
2400b2ea:	f43f af76 	beq.w	2400b1da <HAL_SPI_IRQHandler+0xea>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400b2ee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b2f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400b2fa:	e76e      	b.n	2400b1da <HAL_SPI_IRQHandler+0xea>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b2fc:	6821      	ldr	r1, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400b2fe:	2300      	movs	r3, #0
2400b300:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b304:	698b      	ldr	r3, [r1, #24]
2400b306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400b30a:	618b      	str	r3, [r1, #24]
2400b30c:	e712      	b.n	2400b134 <HAL_SPI_IRQHandler+0x44>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400b30e:	69ab      	ldr	r3, [r5, #24]
2400b310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b314:	61ab      	str	r3, [r5, #24]
    HAL_SPI_SuspendCallback(hspi);
2400b316:	f7ff fee9 	bl	2400b0ec <HAL_SPI_SuspendCallback>
}
2400b31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
2400b31e:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
2400b320:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
2400b322:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
2400b326:	f7ff fe5d 	bl	2400afe4 <HAL_SPI_ErrorCallback>
}
2400b32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
2400b32e:	6823      	ldr	r3, [r4, #0]
2400b330:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
2400b334:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
2400b336:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b338:	3201      	adds	r2, #1
2400b33a:	e724      	b.n	2400b186 <HAL_SPI_IRQHandler+0x96>
      HAL_SPI_TxRxCpltCallback(hspi);
2400b33c:	f021 fc8c 	bl	2402cc58 <__HAL_SPI_TxRxCpltCallback_veneer>
2400b340:	e74b      	b.n	2400b1da <HAL_SPI_IRQHandler+0xea>
      HAL_SPI_RxCpltCallback(hspi);
2400b342:	f7ff fe33 	bl	2400afac <HAL_SPI_RxCpltCallback>
2400b346:	e748      	b.n	2400b1da <HAL_SPI_IRQHandler+0xea>
2400b348:	fffffc94 	.word	0xfffffc94
2400b34c:	2400b0d1 	.word	0x2400b0d1

2400b350 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400b350:	680b      	ldr	r3, [r1, #0]
{
2400b352:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400b354:	b9d3      	cbnz	r3, 2400b38c <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400b356:	6804      	ldr	r4, [r0, #0]
2400b358:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
2400b35c:	684a      	ldr	r2, [r1, #4]
2400b35e:	4023      	ands	r3, r4
2400b360:	4313      	orrs	r3, r2
2400b362:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400b366:	4323      	orrs	r3, r4
2400b368:	4313      	orrs	r3, r2
2400b36a:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
2400b36e:	4323      	orrs	r3, r4
2400b370:	4313      	orrs	r3, r2
2400b372:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
2400b376:	4323      	orrs	r3, r4
2400b378:	4313      	orrs	r3, r2
2400b37a:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
2400b37e:	4323      	orrs	r3, r4
2400b380:	4313      	orrs	r3, r2
2400b382:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
2400b384:	2000      	movs	r0, #0
2400b386:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b38a:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400b38c:	6802      	ldr	r2, [r0, #0]
2400b38e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
2400b392:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
2400b396:	4322      	orrs	r2, r4
2400b398:	6a4c      	ldr	r4, [r1, #36]	; 0x24
2400b39a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400b39c:	4b0a      	ldr	r3, [pc, #40]	; (2400b3c8 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400b39e:	4322      	orrs	r2, r4
2400b3a0:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400b3a2:	6842      	ldr	r2, [r0, #4]
2400b3a4:	4013      	ands	r3, r2
2400b3a6:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
2400b3aa:	4323      	orrs	r3, r4
2400b3ac:	4313      	orrs	r3, r2
2400b3ae:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
2400b3b2:	4323      	orrs	r3, r4
2400b3b4:	4313      	orrs	r3, r2
2400b3b6:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
2400b3ba:	4323      	orrs	r3, r4
2400b3bc:	4313      	orrs	r3, r2
2400b3be:	6043      	str	r3, [r0, #4]
}
2400b3c0:	2000      	movs	r0, #0
2400b3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b3c6:	4770      	bx	lr
2400b3c8:	ffff8000 	.word	0xffff8000

2400b3cc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
2400b3cc:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
2400b3ce:	bb0a      	cbnz	r2, 2400b414 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400b3d0:	6883      	ldr	r3, [r0, #8]
2400b3d2:	e9d1 2400 	ldrd	r2, r4, [r1]
2400b3d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400b3da:	3c01      	subs	r4, #1
2400b3dc:	3a01      	subs	r2, #1
2400b3de:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400b3e2:	4313      	orrs	r3, r2
2400b3e4:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400b3e8:	3c01      	subs	r4, #1
2400b3ea:	3a01      	subs	r2, #1
2400b3ec:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
2400b3f0:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
2400b3f4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
2400b3f8:	698a      	ldr	r2, [r1, #24]
2400b3fa:	3d01      	subs	r5, #1
2400b3fc:	1e61      	subs	r1, r4, #1
2400b3fe:	3a01      	subs	r2, #1
2400b400:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
2400b404:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
2400b408:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400b40c:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
2400b40e:	2000      	movs	r0, #0
2400b410:	bc30      	pop	{r4, r5}
2400b412:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400b414:	6885      	ldr	r5, [r0, #8]
2400b416:	68ca      	ldr	r2, [r1, #12]
2400b418:	4b12      	ldr	r3, [pc, #72]	; (2400b464 <FMC_SDRAM_Timing_Init+0x98>)
2400b41a:	1e54      	subs	r4, r2, #1
2400b41c:	694a      	ldr	r2, [r1, #20]
2400b41e:	402b      	ands	r3, r5
2400b420:	3a01      	subs	r2, #1
2400b422:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
2400b426:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
2400b42a:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
2400b42c:	68c3      	ldr	r3, [r0, #12]
2400b42e:	688d      	ldr	r5, [r1, #8]
2400b430:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400b434:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2400b438:	e9d1 2400 	ldrd	r2, r4, [r1]
2400b43c:	3c01      	subs	r4, #1
2400b43e:	3a01      	subs	r2, #1
2400b440:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400b444:	690c      	ldr	r4, [r1, #16]
2400b446:	4313      	orrs	r3, r2
2400b448:	698a      	ldr	r2, [r1, #24]
2400b44a:	1e61      	subs	r1, r4, #1
2400b44c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
2400b450:	3a01      	subs	r2, #1
2400b452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2400b456:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400b45a:	60c3      	str	r3, [r0, #12]
}
2400b45c:	2000      	movs	r0, #0
2400b45e:	bc30      	pop	{r4, r5}
2400b460:	4770      	bx	lr
2400b462:	bf00      	nop
2400b464:	ff0f0fff 	.word	0xff0f0fff

2400b468 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
2400b468:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400b46a:	e9d1 3400 	ldrd	r3, r4, [r1]
{
2400b46e:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400b470:	6900      	ldr	r0, [r0, #16]
2400b472:	4323      	orrs	r3, r4
2400b474:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
2400b478:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
2400b47c:	4c05      	ldr	r4, [pc, #20]	; (2400b494 <FMC_SDRAM_SendCommand+0x2c>)
2400b47e:	3901      	subs	r1, #1
2400b480:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
2400b482:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400b484:	4323      	orrs	r3, r4
2400b486:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
2400b48a:	6113      	str	r3, [r2, #16]
}
2400b48c:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b490:	4770      	bx	lr
2400b492:	bf00      	nop
2400b494:	ffc00000 	.word	0xffc00000

2400b498 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
2400b498:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400b49a:	4b05      	ldr	r3, [pc, #20]	; (2400b4b0 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
2400b49c:	2000      	movs	r0, #0
{
2400b49e:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400b4a0:	6954      	ldr	r4, [r2, #20]
2400b4a2:	4023      	ands	r3, r4
2400b4a4:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
2400b4a8:	6151      	str	r1, [r2, #20]
}
2400b4aa:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b4ae:	4770      	bx	lr
2400b4b0:	ffffc001 	.word	0xffffc001

2400b4b4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
2400b4b4:	b084      	sub	sp, #16
2400b4b6:	b410      	push	{r4}
2400b4b8:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
2400b4bc:	4614      	mov	r4, r2
{
2400b4be:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
2400b4c2:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
2400b4c4:	9904      	ldr	r1, [sp, #16]
{
2400b4c6:	4602      	mov	r2, r0
             Init.BusWide             | \
2400b4c8:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
2400b4ca:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400b4cc:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
2400b4ce:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
2400b4d0:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
2400b4d2:	4303      	orrs	r3, r0

  return HAL_OK;
}
2400b4d4:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
2400b4d6:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400b4d8:	4903      	ldr	r1, [pc, #12]	; (2400b4e8 <SDMMC_Init+0x34>)
2400b4da:	4021      	ands	r1, r4
2400b4dc:	430b      	orrs	r3, r1
2400b4de:	6053      	str	r3, [r2, #4]
}
2400b4e0:	f85d 4b04 	ldr.w	r4, [sp], #4
2400b4e4:	b004      	add	sp, #16
2400b4e6:	4770      	bx	lr
2400b4e8:	ffc02c00 	.word	0xffc02c00

2400b4ec <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
2400b4ec:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
2400b4f0:	4770      	bx	lr
2400b4f2:	bf00      	nop

2400b4f4 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
2400b4f4:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
2400b4f6:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
2400b4f8:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
2400b4fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
2400b4fe:	4770      	bx	lr

2400b500 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
2400b500:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
2400b502:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
2400b504:	681a      	ldr	r2, [r3, #0]
2400b506:	f042 0203 	orr.w	r2, r2, #3
2400b50a:	601a      	str	r2, [r3, #0]
}
2400b50c:	4770      	bx	lr
2400b50e:	bf00      	nop

2400b510 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
2400b510:	6800      	ldr	r0, [r0, #0]
}
2400b512:	f000 0003 	and.w	r0, r0, #3
2400b516:	4770      	bx	lr

2400b518 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
2400b518:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
2400b51a:	5840      	ldr	r0, [r0, r1]
}
2400b51c:	4770      	bx	lr
2400b51e:	bf00      	nop

2400b520 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
2400b520:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
2400b522:	680b      	ldr	r3, [r1, #0]
{
2400b524:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
2400b526:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
2400b528:	684b      	ldr	r3, [r1, #4]
2400b52a:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
2400b52c:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400b52e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
2400b530:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
2400b534:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
2400b536:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400b538:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
2400b53c:	2000      	movs	r0, #0
                       Data->TransferDir   | \
2400b53e:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
2400b540:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400b542:	430b      	orrs	r3, r1
2400b544:	62d3      	str	r3, [r2, #44]	; 0x2c
}
2400b546:	bc30      	pop	{r4, r5}
2400b548:	4770      	bx	lr
2400b54a:	bf00      	nop

2400b54c <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b54c:	4a50      	ldr	r2, [pc, #320]	; (2400b690 <SDMMC_CmdBlockLength+0x144>)
{
2400b54e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b550:	4b50      	ldr	r3, [pc, #320]	; (2400b694 <SDMMC_CmdBlockLength+0x148>)
2400b552:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400b554:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b558:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b55c:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400b560:	484d      	ldr	r0, [pc, #308]	; (2400b698 <SDMMC_CmdBlockLength+0x14c>)
2400b562:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b566:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b568:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b56a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b56e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b570:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b574:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
2400b578:	1e53      	subs	r3, r2, #1
2400b57a:	b14a      	cbz	r2, 2400b590 <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400b57c:	4947      	ldr	r1, [pc, #284]	; (2400b69c <SDMMC_CmdBlockLength+0x150>)
    sta_reg = SDMMCx->STA;
2400b57e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400b582:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400b584:	420a      	tst	r2, r1
2400b586:	d001      	beq.n	2400b58c <SDMMC_CmdBlockLength+0x40>
2400b588:	0492      	lsls	r2, r2, #18
2400b58a:	d504      	bpl.n	2400b596 <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
2400b58c:	1c58      	adds	r0, r3, #1
2400b58e:	d1f6      	bne.n	2400b57e <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400b590:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400b594:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400b596:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400b59a:	0758      	lsls	r0, r3, #29
2400b59c:	d445      	bmi.n	2400b62a <SDMMC_CmdBlockLength+0xde>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400b59e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400b5a2:	f010 0001 	ands.w	r0, r0, #1
2400b5a6:	d137      	bne.n	2400b618 <SDMMC_CmdBlockLength+0xcc>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400b5a8:	4b3d      	ldr	r3, [pc, #244]	; (2400b6a0 <SDMMC_CmdBlockLength+0x154>)
2400b5aa:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400b5ae:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400b5b2:	b2db      	uxtb	r3, r3
2400b5b4:	2b10      	cmp	r3, #16
2400b5b6:	d136      	bne.n	2400b626 <SDMMC_CmdBlockLength+0xda>
  return (*(__IO uint32_t *) tmp);
2400b5b8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400b5bc:	4839      	ldr	r0, [pc, #228]	; (2400b6a4 <SDMMC_CmdBlockLength+0x158>)
2400b5be:	4018      	ands	r0, r3
2400b5c0:	2800      	cmp	r0, #0
2400b5c2:	d02f      	beq.n	2400b624 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400b5c4:	2b00      	cmp	r3, #0
2400b5c6:	db35      	blt.n	2400b634 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400b5c8:	0059      	lsls	r1, r3, #1
2400b5ca:	d436      	bmi.n	2400b63a <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400b5cc:	009a      	lsls	r2, r3, #2
2400b5ce:	d436      	bmi.n	2400b63e <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400b5d0:	00d9      	lsls	r1, r3, #3
2400b5d2:	d436      	bmi.n	2400b642 <SDMMC_CmdBlockLength+0xf6>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400b5d4:	011a      	lsls	r2, r3, #4
2400b5d6:	d437      	bmi.n	2400b648 <SDMMC_CmdBlockLength+0xfc>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400b5d8:	0159      	lsls	r1, r3, #5
2400b5da:	d438      	bmi.n	2400b64e <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400b5dc:	01da      	lsls	r2, r3, #7
2400b5de:	d439      	bmi.n	2400b654 <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400b5e0:	0219      	lsls	r1, r3, #8
2400b5e2:	d43a      	bmi.n	2400b65a <SDMMC_CmdBlockLength+0x10e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400b5e4:	025a      	lsls	r2, r3, #9
2400b5e6:	d43b      	bmi.n	2400b660 <SDMMC_CmdBlockLength+0x114>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400b5e8:	0299      	lsls	r1, r3, #10
2400b5ea:	d445      	bmi.n	2400b678 <SDMMC_CmdBlockLength+0x12c>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400b5ec:	02da      	lsls	r2, r3, #11
2400b5ee:	d440      	bmi.n	2400b672 <SDMMC_CmdBlockLength+0x126>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400b5f0:	0359      	lsls	r1, r3, #13
2400b5f2:	d43b      	bmi.n	2400b66c <SDMMC_CmdBlockLength+0x120>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400b5f4:	039a      	lsls	r2, r3, #14
2400b5f6:	d436      	bmi.n	2400b666 <SDMMC_CmdBlockLength+0x11a>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400b5f8:	03d9      	lsls	r1, r3, #15
2400b5fa:	d446      	bmi.n	2400b68a <SDMMC_CmdBlockLength+0x13e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400b5fc:	041a      	lsls	r2, r3, #16
2400b5fe:	d441      	bmi.n	2400b684 <SDMMC_CmdBlockLength+0x138>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400b600:	0459      	lsls	r1, r3, #17
2400b602:	d43c      	bmi.n	2400b67e <SDMMC_CmdBlockLength+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400b604:	049a      	lsls	r2, r3, #18
2400b606:	d40b      	bmi.n	2400b620 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400b608:	f013 0f08 	tst.w	r3, #8
2400b60c:	bf14      	ite	ne
2400b60e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400b612:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400b616:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400b618:	2301      	movs	r3, #1
2400b61a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b61e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400b620:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400b624:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b626:	2001      	movs	r0, #1
2400b628:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b62a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b62c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b62e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b632:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400b634:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400b638:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400b63a:	2040      	movs	r0, #64	; 0x40
2400b63c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400b63e:	2080      	movs	r0, #128	; 0x80
2400b640:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400b642:	f44f 7080 	mov.w	r0, #256	; 0x100
2400b646:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400b648:	f44f 7000 	mov.w	r0, #512	; 0x200
2400b64c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400b64e:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400b652:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400b654:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400b658:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400b65a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400b65e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400b660:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400b664:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400b666:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400b66a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400b66c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400b670:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400b672:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400b676:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400b678:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400b67c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400b67e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400b682:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400b684:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400b688:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400b68a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400b68e:	4770      	bx	lr
2400b690:	20000748 	.word	0x20000748
2400b694:	10624dd3 	.word	0x10624dd3
2400b698:	fffee0c0 	.word	0xfffee0c0
2400b69c:	00200045 	.word	0x00200045
2400b6a0:	002000c5 	.word	0x002000c5
2400b6a4:	fdffe008 	.word	0xfdffe008

2400b6a8 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b6a8:	4a50      	ldr	r2, [pc, #320]	; (2400b7ec <SDMMC_CmdReadSingleBlock+0x144>)
{
2400b6aa:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b6ac:	4b50      	ldr	r3, [pc, #320]	; (2400b7f0 <SDMMC_CmdReadSingleBlock+0x148>)
2400b6ae:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400b6b0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b6b4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b6b8:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400b6bc:	484d      	ldr	r0, [pc, #308]	; (2400b7f4 <SDMMC_CmdReadSingleBlock+0x14c>)
2400b6be:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b6c2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b6c4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b6c6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b6ca:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b6cc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b6d0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400b6d4:	1e53      	subs	r3, r2, #1
2400b6d6:	b14a      	cbz	r2, 2400b6ec <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400b6d8:	4947      	ldr	r1, [pc, #284]	; (2400b7f8 <SDMMC_CmdReadSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400b6da:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400b6de:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400b6e0:	420a      	tst	r2, r1
2400b6e2:	d001      	beq.n	2400b6e8 <SDMMC_CmdReadSingleBlock+0x40>
2400b6e4:	0492      	lsls	r2, r2, #18
2400b6e6:	d504      	bpl.n	2400b6f2 <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
2400b6e8:	1c58      	adds	r0, r3, #1
2400b6ea:	d1f6      	bne.n	2400b6da <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400b6ec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400b6f0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400b6f2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400b6f6:	0758      	lsls	r0, r3, #29
2400b6f8:	d445      	bmi.n	2400b786 <SDMMC_CmdReadSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400b6fa:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400b6fe:	f010 0001 	ands.w	r0, r0, #1
2400b702:	d137      	bne.n	2400b774 <SDMMC_CmdReadSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400b704:	4b3d      	ldr	r3, [pc, #244]	; (2400b7fc <SDMMC_CmdReadSingleBlock+0x154>)
2400b706:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400b70a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400b70e:	b2db      	uxtb	r3, r3
2400b710:	2b11      	cmp	r3, #17
2400b712:	d136      	bne.n	2400b782 <SDMMC_CmdReadSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400b714:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400b718:	4839      	ldr	r0, [pc, #228]	; (2400b800 <SDMMC_CmdReadSingleBlock+0x158>)
2400b71a:	4018      	ands	r0, r3
2400b71c:	2800      	cmp	r0, #0
2400b71e:	d02f      	beq.n	2400b780 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400b720:	2b00      	cmp	r3, #0
2400b722:	db35      	blt.n	2400b790 <SDMMC_CmdReadSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400b724:	0059      	lsls	r1, r3, #1
2400b726:	d436      	bmi.n	2400b796 <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400b728:	009a      	lsls	r2, r3, #2
2400b72a:	d436      	bmi.n	2400b79a <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400b72c:	00d9      	lsls	r1, r3, #3
2400b72e:	d436      	bmi.n	2400b79e <SDMMC_CmdReadSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400b730:	011a      	lsls	r2, r3, #4
2400b732:	d437      	bmi.n	2400b7a4 <SDMMC_CmdReadSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400b734:	0159      	lsls	r1, r3, #5
2400b736:	d438      	bmi.n	2400b7aa <SDMMC_CmdReadSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400b738:	01da      	lsls	r2, r3, #7
2400b73a:	d439      	bmi.n	2400b7b0 <SDMMC_CmdReadSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400b73c:	0219      	lsls	r1, r3, #8
2400b73e:	d43a      	bmi.n	2400b7b6 <SDMMC_CmdReadSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400b740:	025a      	lsls	r2, r3, #9
2400b742:	d43b      	bmi.n	2400b7bc <SDMMC_CmdReadSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400b744:	0299      	lsls	r1, r3, #10
2400b746:	d445      	bmi.n	2400b7d4 <SDMMC_CmdReadSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400b748:	02da      	lsls	r2, r3, #11
2400b74a:	d440      	bmi.n	2400b7ce <SDMMC_CmdReadSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400b74c:	0359      	lsls	r1, r3, #13
2400b74e:	d43b      	bmi.n	2400b7c8 <SDMMC_CmdReadSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400b750:	039a      	lsls	r2, r3, #14
2400b752:	d436      	bmi.n	2400b7c2 <SDMMC_CmdReadSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400b754:	03d9      	lsls	r1, r3, #15
2400b756:	d446      	bmi.n	2400b7e6 <SDMMC_CmdReadSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400b758:	041a      	lsls	r2, r3, #16
2400b75a:	d441      	bmi.n	2400b7e0 <SDMMC_CmdReadSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400b75c:	0459      	lsls	r1, r3, #17
2400b75e:	d43c      	bmi.n	2400b7da <SDMMC_CmdReadSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400b760:	049a      	lsls	r2, r3, #18
2400b762:	d40b      	bmi.n	2400b77c <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400b764:	f013 0f08 	tst.w	r3, #8
2400b768:	bf14      	ite	ne
2400b76a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400b76e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400b772:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400b774:	2301      	movs	r3, #1
2400b776:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b77a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400b77c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400b780:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b782:	2001      	movs	r0, #1
2400b784:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b786:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b788:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b78a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b78e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400b790:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400b794:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400b796:	2040      	movs	r0, #64	; 0x40
2400b798:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400b79a:	2080      	movs	r0, #128	; 0x80
2400b79c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400b79e:	f44f 7080 	mov.w	r0, #256	; 0x100
2400b7a2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400b7a4:	f44f 7000 	mov.w	r0, #512	; 0x200
2400b7a8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400b7aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400b7ae:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400b7b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400b7b4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400b7b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400b7ba:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400b7bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400b7c0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400b7c2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400b7c6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400b7c8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400b7cc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400b7ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400b7d2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400b7d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400b7d8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400b7da:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400b7de:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400b7e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400b7e4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400b7e6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400b7ea:	4770      	bx	lr
2400b7ec:	20000748 	.word	0x20000748
2400b7f0:	10624dd3 	.word	0x10624dd3
2400b7f4:	fffee0c0 	.word	0xfffee0c0
2400b7f8:	00200045 	.word	0x00200045
2400b7fc:	002000c5 	.word	0x002000c5
2400b800:	fdffe008 	.word	0xfdffe008

2400b804 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b804:	4a50      	ldr	r2, [pc, #320]	; (2400b948 <SDMMC_CmdReadMultiBlock+0x144>)
{
2400b806:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b808:	4b50      	ldr	r3, [pc, #320]	; (2400b94c <SDMMC_CmdReadMultiBlock+0x148>)
2400b80a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400b80c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b810:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b814:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400b818:	484d      	ldr	r0, [pc, #308]	; (2400b950 <SDMMC_CmdReadMultiBlock+0x14c>)
2400b81a:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b81e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b820:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b822:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b826:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b828:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b82c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400b830:	1e53      	subs	r3, r2, #1
2400b832:	b14a      	cbz	r2, 2400b848 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400b834:	4947      	ldr	r1, [pc, #284]	; (2400b954 <SDMMC_CmdReadMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400b836:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400b83a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400b83c:	420a      	tst	r2, r1
2400b83e:	d001      	beq.n	2400b844 <SDMMC_CmdReadMultiBlock+0x40>
2400b840:	0492      	lsls	r2, r2, #18
2400b842:	d504      	bpl.n	2400b84e <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
2400b844:	1c58      	adds	r0, r3, #1
2400b846:	d1f6      	bne.n	2400b836 <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400b848:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400b84c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400b84e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400b852:	0758      	lsls	r0, r3, #29
2400b854:	d445      	bmi.n	2400b8e2 <SDMMC_CmdReadMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400b856:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400b85a:	f010 0001 	ands.w	r0, r0, #1
2400b85e:	d137      	bne.n	2400b8d0 <SDMMC_CmdReadMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400b860:	4b3d      	ldr	r3, [pc, #244]	; (2400b958 <SDMMC_CmdReadMultiBlock+0x154>)
2400b862:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400b866:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400b86a:	b2db      	uxtb	r3, r3
2400b86c:	2b12      	cmp	r3, #18
2400b86e:	d136      	bne.n	2400b8de <SDMMC_CmdReadMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400b870:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400b874:	4839      	ldr	r0, [pc, #228]	; (2400b95c <SDMMC_CmdReadMultiBlock+0x158>)
2400b876:	4018      	ands	r0, r3
2400b878:	2800      	cmp	r0, #0
2400b87a:	d02f      	beq.n	2400b8dc <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400b87c:	2b00      	cmp	r3, #0
2400b87e:	db35      	blt.n	2400b8ec <SDMMC_CmdReadMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400b880:	0059      	lsls	r1, r3, #1
2400b882:	d436      	bmi.n	2400b8f2 <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400b884:	009a      	lsls	r2, r3, #2
2400b886:	d436      	bmi.n	2400b8f6 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400b888:	00d9      	lsls	r1, r3, #3
2400b88a:	d436      	bmi.n	2400b8fa <SDMMC_CmdReadMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400b88c:	011a      	lsls	r2, r3, #4
2400b88e:	d437      	bmi.n	2400b900 <SDMMC_CmdReadMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400b890:	0159      	lsls	r1, r3, #5
2400b892:	d438      	bmi.n	2400b906 <SDMMC_CmdReadMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400b894:	01da      	lsls	r2, r3, #7
2400b896:	d439      	bmi.n	2400b90c <SDMMC_CmdReadMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400b898:	0219      	lsls	r1, r3, #8
2400b89a:	d43a      	bmi.n	2400b912 <SDMMC_CmdReadMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400b89c:	025a      	lsls	r2, r3, #9
2400b89e:	d43b      	bmi.n	2400b918 <SDMMC_CmdReadMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400b8a0:	0299      	lsls	r1, r3, #10
2400b8a2:	d445      	bmi.n	2400b930 <SDMMC_CmdReadMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400b8a4:	02da      	lsls	r2, r3, #11
2400b8a6:	d440      	bmi.n	2400b92a <SDMMC_CmdReadMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400b8a8:	0359      	lsls	r1, r3, #13
2400b8aa:	d43b      	bmi.n	2400b924 <SDMMC_CmdReadMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400b8ac:	039a      	lsls	r2, r3, #14
2400b8ae:	d436      	bmi.n	2400b91e <SDMMC_CmdReadMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400b8b0:	03d9      	lsls	r1, r3, #15
2400b8b2:	d446      	bmi.n	2400b942 <SDMMC_CmdReadMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400b8b4:	041a      	lsls	r2, r3, #16
2400b8b6:	d441      	bmi.n	2400b93c <SDMMC_CmdReadMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400b8b8:	0459      	lsls	r1, r3, #17
2400b8ba:	d43c      	bmi.n	2400b936 <SDMMC_CmdReadMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400b8bc:	049a      	lsls	r2, r3, #18
2400b8be:	d40b      	bmi.n	2400b8d8 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400b8c0:	f013 0f08 	tst.w	r3, #8
2400b8c4:	bf14      	ite	ne
2400b8c6:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400b8ca:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400b8ce:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400b8d0:	2301      	movs	r3, #1
2400b8d2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b8d6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400b8d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400b8dc:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400b8de:	2001      	movs	r0, #1
2400b8e0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b8e2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b8e4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400b8e6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400b8ea:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400b8ec:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400b8f0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400b8f2:	2040      	movs	r0, #64	; 0x40
2400b8f4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400b8f6:	2080      	movs	r0, #128	; 0x80
2400b8f8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400b8fa:	f44f 7080 	mov.w	r0, #256	; 0x100
2400b8fe:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400b900:	f44f 7000 	mov.w	r0, #512	; 0x200
2400b904:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400b906:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400b90a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400b90c:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400b910:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400b912:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400b916:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400b918:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400b91c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400b91e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400b922:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400b924:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400b928:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400b92a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400b92e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400b930:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400b934:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400b936:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400b93a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400b93c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400b940:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400b942:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400b946:	4770      	bx	lr
2400b948:	20000748 	.word	0x20000748
2400b94c:	10624dd3 	.word	0x10624dd3
2400b950:	fffee0c0 	.word	0xfffee0c0
2400b954:	00200045 	.word	0x00200045
2400b958:	002000c5 	.word	0x002000c5
2400b95c:	fdffe008 	.word	0xfdffe008

2400b960 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b960:	4a50      	ldr	r2, [pc, #320]	; (2400baa4 <SDMMC_CmdWriteSingleBlock+0x144>)
{
2400b962:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b964:	4b50      	ldr	r3, [pc, #320]	; (2400baa8 <SDMMC_CmdWriteSingleBlock+0x148>)
2400b966:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400b968:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b96c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b970:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400b974:	484d      	ldr	r0, [pc, #308]	; (2400baac <SDMMC_CmdWriteSingleBlock+0x14c>)
2400b976:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b97a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b97c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b97e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b982:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400b984:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400b988:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400b98c:	1e53      	subs	r3, r2, #1
2400b98e:	b14a      	cbz	r2, 2400b9a4 <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400b990:	4947      	ldr	r1, [pc, #284]	; (2400bab0 <SDMMC_CmdWriteSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400b992:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400b996:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400b998:	420a      	tst	r2, r1
2400b99a:	d001      	beq.n	2400b9a0 <SDMMC_CmdWriteSingleBlock+0x40>
2400b99c:	0492      	lsls	r2, r2, #18
2400b99e:	d504      	bpl.n	2400b9aa <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
2400b9a0:	1c58      	adds	r0, r3, #1
2400b9a2:	d1f6      	bne.n	2400b992 <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400b9a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400b9a8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400b9aa:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400b9ae:	0758      	lsls	r0, r3, #29
2400b9b0:	d445      	bmi.n	2400ba3e <SDMMC_CmdWriteSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400b9b2:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400b9b6:	f010 0001 	ands.w	r0, r0, #1
2400b9ba:	d137      	bne.n	2400ba2c <SDMMC_CmdWriteSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400b9bc:	4b3d      	ldr	r3, [pc, #244]	; (2400bab4 <SDMMC_CmdWriteSingleBlock+0x154>)
2400b9be:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400b9c2:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400b9c6:	b2db      	uxtb	r3, r3
2400b9c8:	2b18      	cmp	r3, #24
2400b9ca:	d136      	bne.n	2400ba3a <SDMMC_CmdWriteSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400b9cc:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400b9d0:	4839      	ldr	r0, [pc, #228]	; (2400bab8 <SDMMC_CmdWriteSingleBlock+0x158>)
2400b9d2:	4018      	ands	r0, r3
2400b9d4:	2800      	cmp	r0, #0
2400b9d6:	d02f      	beq.n	2400ba38 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400b9d8:	2b00      	cmp	r3, #0
2400b9da:	db35      	blt.n	2400ba48 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400b9dc:	0059      	lsls	r1, r3, #1
2400b9de:	d436      	bmi.n	2400ba4e <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400b9e0:	009a      	lsls	r2, r3, #2
2400b9e2:	d436      	bmi.n	2400ba52 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400b9e4:	00d9      	lsls	r1, r3, #3
2400b9e6:	d436      	bmi.n	2400ba56 <SDMMC_CmdWriteSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400b9e8:	011a      	lsls	r2, r3, #4
2400b9ea:	d437      	bmi.n	2400ba5c <SDMMC_CmdWriteSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400b9ec:	0159      	lsls	r1, r3, #5
2400b9ee:	d438      	bmi.n	2400ba62 <SDMMC_CmdWriteSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400b9f0:	01da      	lsls	r2, r3, #7
2400b9f2:	d439      	bmi.n	2400ba68 <SDMMC_CmdWriteSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400b9f4:	0219      	lsls	r1, r3, #8
2400b9f6:	d43a      	bmi.n	2400ba6e <SDMMC_CmdWriteSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400b9f8:	025a      	lsls	r2, r3, #9
2400b9fa:	d43b      	bmi.n	2400ba74 <SDMMC_CmdWriteSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400b9fc:	0299      	lsls	r1, r3, #10
2400b9fe:	d445      	bmi.n	2400ba8c <SDMMC_CmdWriteSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400ba00:	02da      	lsls	r2, r3, #11
2400ba02:	d440      	bmi.n	2400ba86 <SDMMC_CmdWriteSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400ba04:	0359      	lsls	r1, r3, #13
2400ba06:	d43b      	bmi.n	2400ba80 <SDMMC_CmdWriteSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400ba08:	039a      	lsls	r2, r3, #14
2400ba0a:	d436      	bmi.n	2400ba7a <SDMMC_CmdWriteSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400ba0c:	03d9      	lsls	r1, r3, #15
2400ba0e:	d446      	bmi.n	2400ba9e <SDMMC_CmdWriteSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400ba10:	041a      	lsls	r2, r3, #16
2400ba12:	d441      	bmi.n	2400ba98 <SDMMC_CmdWriteSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400ba14:	0459      	lsls	r1, r3, #17
2400ba16:	d43c      	bmi.n	2400ba92 <SDMMC_CmdWriteSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400ba18:	049a      	lsls	r2, r3, #18
2400ba1a:	d40b      	bmi.n	2400ba34 <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400ba1c:	f013 0f08 	tst.w	r3, #8
2400ba20:	bf14      	ite	ne
2400ba22:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400ba26:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400ba2a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400ba2c:	2301      	movs	r3, #1
2400ba2e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ba32:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400ba34:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400ba38:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400ba3a:	2001      	movs	r0, #1
2400ba3c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ba3e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400ba40:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ba42:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400ba46:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400ba48:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400ba4c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400ba4e:	2040      	movs	r0, #64	; 0x40
2400ba50:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400ba52:	2080      	movs	r0, #128	; 0x80
2400ba54:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400ba56:	f44f 7080 	mov.w	r0, #256	; 0x100
2400ba5a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400ba5c:	f44f 7000 	mov.w	r0, #512	; 0x200
2400ba60:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400ba62:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400ba66:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400ba68:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400ba6c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400ba6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400ba72:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400ba74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400ba78:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400ba7a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400ba7e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400ba80:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400ba84:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400ba86:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400ba8a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400ba8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400ba90:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400ba92:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400ba96:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400ba98:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400ba9c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400ba9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400baa2:	4770      	bx	lr
2400baa4:	20000748 	.word	0x20000748
2400baa8:	10624dd3 	.word	0x10624dd3
2400baac:	fffee0c0 	.word	0xfffee0c0
2400bab0:	00200045 	.word	0x00200045
2400bab4:	002000c5 	.word	0x002000c5
2400bab8:	fdffe008 	.word	0xfdffe008

2400babc <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400babc:	4a50      	ldr	r2, [pc, #320]	; (2400bc00 <SDMMC_CmdWriteMultiBlock+0x144>)
{
2400babe:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bac0:	4b50      	ldr	r3, [pc, #320]	; (2400bc04 <SDMMC_CmdWriteMultiBlock+0x148>)
2400bac2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400bac4:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bac8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bacc:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400bad0:	484d      	ldr	r0, [pc, #308]	; (2400bc08 <SDMMC_CmdWriteMultiBlock+0x14c>)
2400bad2:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bad6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bad8:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bada:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bade:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bae0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bae4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400bae8:	1e53      	subs	r3, r2, #1
2400baea:	b14a      	cbz	r2, 2400bb00 <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400baec:	4947      	ldr	r1, [pc, #284]	; (2400bc0c <SDMMC_CmdWriteMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400baee:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400baf2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400baf4:	420a      	tst	r2, r1
2400baf6:	d001      	beq.n	2400bafc <SDMMC_CmdWriteMultiBlock+0x40>
2400baf8:	0492      	lsls	r2, r2, #18
2400bafa:	d504      	bpl.n	2400bb06 <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
2400bafc:	1c58      	adds	r0, r3, #1
2400bafe:	d1f6      	bne.n	2400baee <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400bb00:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400bb04:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bb06:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400bb0a:	0758      	lsls	r0, r3, #29
2400bb0c:	d445      	bmi.n	2400bb9a <SDMMC_CmdWriteMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bb0e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400bb12:	f010 0001 	ands.w	r0, r0, #1
2400bb16:	d137      	bne.n	2400bb88 <SDMMC_CmdWriteMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bb18:	4b3d      	ldr	r3, [pc, #244]	; (2400bc10 <SDMMC_CmdWriteMultiBlock+0x154>)
2400bb1a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400bb1e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400bb22:	b2db      	uxtb	r3, r3
2400bb24:	2b19      	cmp	r3, #25
2400bb26:	d136      	bne.n	2400bb96 <SDMMC_CmdWriteMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400bb28:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400bb2c:	4839      	ldr	r0, [pc, #228]	; (2400bc14 <SDMMC_CmdWriteMultiBlock+0x158>)
2400bb2e:	4018      	ands	r0, r3
2400bb30:	2800      	cmp	r0, #0
2400bb32:	d02f      	beq.n	2400bb94 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bb34:	2b00      	cmp	r3, #0
2400bb36:	db35      	blt.n	2400bba4 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bb38:	0059      	lsls	r1, r3, #1
2400bb3a:	d436      	bmi.n	2400bbaa <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400bb3c:	009a      	lsls	r2, r3, #2
2400bb3e:	d436      	bmi.n	2400bbae <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400bb40:	00d9      	lsls	r1, r3, #3
2400bb42:	d436      	bmi.n	2400bbb2 <SDMMC_CmdWriteMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400bb44:	011a      	lsls	r2, r3, #4
2400bb46:	d437      	bmi.n	2400bbb8 <SDMMC_CmdWriteMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400bb48:	0159      	lsls	r1, r3, #5
2400bb4a:	d438      	bmi.n	2400bbbe <SDMMC_CmdWriteMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400bb4c:	01da      	lsls	r2, r3, #7
2400bb4e:	d439      	bmi.n	2400bbc4 <SDMMC_CmdWriteMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bb50:	0219      	lsls	r1, r3, #8
2400bb52:	d43a      	bmi.n	2400bbca <SDMMC_CmdWriteMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bb54:	025a      	lsls	r2, r3, #9
2400bb56:	d43b      	bmi.n	2400bbd0 <SDMMC_CmdWriteMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bb58:	0299      	lsls	r1, r3, #10
2400bb5a:	d445      	bmi.n	2400bbe8 <SDMMC_CmdWriteMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400bb5c:	02da      	lsls	r2, r3, #11
2400bb5e:	d440      	bmi.n	2400bbe2 <SDMMC_CmdWriteMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400bb60:	0359      	lsls	r1, r3, #13
2400bb62:	d43b      	bmi.n	2400bbdc <SDMMC_CmdWriteMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400bb64:	039a      	lsls	r2, r3, #14
2400bb66:	d436      	bmi.n	2400bbd6 <SDMMC_CmdWriteMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400bb68:	03d9      	lsls	r1, r3, #15
2400bb6a:	d446      	bmi.n	2400bbfa <SDMMC_CmdWriteMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400bb6c:	041a      	lsls	r2, r3, #16
2400bb6e:	d441      	bmi.n	2400bbf4 <SDMMC_CmdWriteMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400bb70:	0459      	lsls	r1, r3, #17
2400bb72:	d43c      	bmi.n	2400bbee <SDMMC_CmdWriteMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400bb74:	049a      	lsls	r2, r3, #18
2400bb76:	d40b      	bmi.n	2400bb90 <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400bb78:	f013 0f08 	tst.w	r3, #8
2400bb7c:	bf14      	ite	ne
2400bb7e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400bb82:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400bb86:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400bb88:	2301      	movs	r3, #1
2400bb8a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bb8e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400bb90:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400bb94:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bb96:	2001      	movs	r0, #1
2400bb98:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bb9a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bb9c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bb9e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bba2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400bba4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400bba8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400bbaa:	2040      	movs	r0, #64	; 0x40
2400bbac:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400bbae:	2080      	movs	r0, #128	; 0x80
2400bbb0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400bbb2:	f44f 7080 	mov.w	r0, #256	; 0x100
2400bbb6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400bbb8:	f44f 7000 	mov.w	r0, #512	; 0x200
2400bbbc:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400bbbe:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400bbc2:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bbc4:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400bbc8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bbca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400bbce:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bbd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400bbd4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bbd6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400bbda:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400bbdc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400bbe0:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400bbe2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400bbe6:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400bbe8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400bbec:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400bbee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400bbf2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bbf4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400bbf8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400bbfa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400bbfe:	4770      	bx	lr
2400bc00:	20000748 	.word	0x20000748
2400bc04:	10624dd3 	.word	0x10624dd3
2400bc08:	fffee0c0 	.word	0xfffee0c0
2400bc0c:	00200045 	.word	0x00200045
2400bc10:	002000c5 	.word	0x002000c5
2400bc14:	fdffe008 	.word	0xfdffe008

2400bc18 <SDMMC_CmdStopTransfer>:
{
2400bc18:	b430      	push	{r4, r5}
2400bc1a:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc1c:	4b7b      	ldr	r3, [pc, #492]	; (2400be0c <SDMMC_CmdStopTransfer+0x1f4>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400bc1e:	68c0      	ldr	r0, [r0, #12]
  SDMMCx->ARG = Command->Argument;
2400bc20:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc22:	4c7b      	ldr	r4, [pc, #492]	; (2400be10 <SDMMC_CmdStopTransfer+0x1f8>)
2400bc24:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400bc26:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc2a:	4b7a      	ldr	r3, [pc, #488]	; (2400be14 <SDMMC_CmdStopTransfer+0x1fc>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400bc2c:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc2e:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400bc32:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc34:	4c78      	ldr	r4, [pc, #480]	; (2400be18 <SDMMC_CmdStopTransfer+0x200>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400bc36:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc3a:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400bc3c:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc3e:	f241 100c 	movw	r0, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
2400bc42:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bc44:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bc48:	68cc      	ldr	r4, [r1, #12]
2400bc4a:	4023      	ands	r3, r4
2400bc4c:	4318      	orrs	r0, r3
2400bc4e:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
2400bc50:	b14a      	cbz	r2, 2400bc66 <SDMMC_CmdStopTransfer+0x4e>
2400bc52:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400bc54:	4871      	ldr	r0, [pc, #452]	; (2400be1c <SDMMC_CmdStopTransfer+0x204>)
    sta_reg = SDMMCx->STA;
2400bc56:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400bc58:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400bc5a:	4202      	tst	r2, r0
2400bc5c:	d001      	beq.n	2400bc62 <SDMMC_CmdStopTransfer+0x4a>
2400bc5e:	0492      	lsls	r2, r2, #18
2400bc60:	d509      	bpl.n	2400bc76 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
2400bc62:	1c5c      	adds	r4, r3, #1
2400bc64:	d1f7      	bne.n	2400bc56 <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bc66:	68cb      	ldr	r3, [r1, #12]
2400bc68:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400bc6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bc70:	60cb      	str	r3, [r1, #12]
}
2400bc72:	bc30      	pop	{r4, r5}
2400bc74:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bc76:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400bc78:	075b      	lsls	r3, r3, #29
2400bc7a:	d452      	bmi.n	2400bd22 <SDMMC_CmdStopTransfer+0x10a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bc7c:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400bc7e:	f010 0001 	ands.w	r0, r0, #1
2400bc82:	d13b      	bne.n	2400bcfc <SDMMC_CmdStopTransfer+0xe4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bc84:	4b66      	ldr	r3, [pc, #408]	; (2400be20 <SDMMC_CmdStopTransfer+0x208>)
2400bc86:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400bc88:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400bc8a:	b2db      	uxtb	r3, r3
2400bc8c:	2b0c      	cmp	r3, #12
2400bc8e:	d142      	bne.n	2400bd16 <SDMMC_CmdStopTransfer+0xfe>
  return (*(__IO uint32_t *) tmp);
2400bc90:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400bc92:	4a64      	ldr	r2, [pc, #400]	; (2400be24 <SDMMC_CmdStopTransfer+0x20c>)
2400bc94:	401a      	ands	r2, r3
2400bc96:	2a00      	cmp	r2, #0
2400bc98:	d037      	beq.n	2400bd0a <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bc9a:	2b00      	cmp	r3, #0
2400bc9c:	db35      	blt.n	2400bd0a <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bc9e:	005d      	lsls	r5, r3, #1
2400bca0:	d446      	bmi.n	2400bd30 <SDMMC_CmdStopTransfer+0x118>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400bca2:	009c      	lsls	r4, r3, #2
2400bca4:	d44a      	bmi.n	2400bd3c <SDMMC_CmdStopTransfer+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400bca6:	00d8      	lsls	r0, r3, #3
2400bca8:	d44e      	bmi.n	2400bd48 <SDMMC_CmdStopTransfer+0x130>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400bcaa:	011a      	lsls	r2, r3, #4
2400bcac:	d453      	bmi.n	2400bd56 <SDMMC_CmdStopTransfer+0x13e>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400bcae:	015d      	lsls	r5, r3, #5
2400bcb0:	d458      	bmi.n	2400bd64 <SDMMC_CmdStopTransfer+0x14c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400bcb2:	01dc      	lsls	r4, r3, #7
2400bcb4:	d464      	bmi.n	2400bd80 <SDMMC_CmdStopTransfer+0x168>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bcb6:	0218      	lsls	r0, r3, #8
2400bcb8:	d45b      	bmi.n	2400bd72 <SDMMC_CmdStopTransfer+0x15a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bcba:	025a      	lsls	r2, r3, #9
2400bcbc:	d46e      	bmi.n	2400bd9c <SDMMC_CmdStopTransfer+0x184>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bcbe:	029d      	lsls	r5, r3, #10
2400bcc0:	d465      	bmi.n	2400bd8e <SDMMC_CmdStopTransfer+0x176>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400bcc2:	02dc      	lsls	r4, r3, #11
2400bcc4:	d47f      	bmi.n	2400bdc6 <SDMMC_CmdStopTransfer+0x1ae>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400bcc6:	0358      	lsls	r0, r3, #13
2400bcc8:	d476      	bmi.n	2400bdb8 <SDMMC_CmdStopTransfer+0x1a0>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400bcca:	039a      	lsls	r2, r3, #14
2400bccc:	d46d      	bmi.n	2400bdaa <SDMMC_CmdStopTransfer+0x192>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400bcce:	03dd      	lsls	r5, r3, #15
2400bcd0:	f100 8095 	bmi.w	2400bdfe <SDMMC_CmdStopTransfer+0x1e6>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400bcd4:	041c      	lsls	r4, r3, #16
2400bcd6:	f100 8084 	bmi.w	2400bde2 <SDMMC_CmdStopTransfer+0x1ca>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400bcda:	0458      	lsls	r0, r3, #17
2400bcdc:	d47a      	bmi.n	2400bdd4 <SDMMC_CmdStopTransfer+0x1bc>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400bcde:	049a      	lsls	r2, r3, #18
2400bce0:	f100 8086 	bmi.w	2400bdf0 <SDMMC_CmdStopTransfer+0x1d8>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
2400bce4:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bce8:	68cb      	ldr	r3, [r1, #12]
2400bcea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
2400bcee:	bf14      	ite	ne
2400bcf0:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400bcf4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bcf8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bcfa:	e7ba      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400bcfc:	2301      	movs	r3, #1
2400bcfe:	638b      	str	r3, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd00:	68cb      	ldr	r3, [r1, #12]
2400bd02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bd06:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bd08:	e7b3      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd0a:	68cb      	ldr	r3, [r1, #12]
2400bd0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bd10:	60cb      	str	r3, [r1, #12]
}
2400bd12:	bc30      	pop	{r4, r5}
2400bd14:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd16:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bd18:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bd1e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bd20:	e7a7      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bd22:	2004      	movs	r0, #4
2400bd24:	6388      	str	r0, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd26:	68cb      	ldr	r3, [r1, #12]
2400bd28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bd2c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bd2e:	e7a0      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd30:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400bd32:	2040      	movs	r0, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bd38:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bd3a:	e79a      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd3c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400bd3e:	2080      	movs	r0, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bd44:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bd46:	e794      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd48:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400bd4a:	f44f 7080 	mov.w	r0, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bd52:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bd54:	e78d      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd56:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400bd58:	f44f 7000 	mov.w	r0, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bd60:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bd62:	e786      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd64:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400bd66:	f44f 6080 	mov.w	r0, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bd6e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bd70:	e77f      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd72:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bd74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bd7c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bd7e:	e778      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd80:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bd82:	f44f 6000 	mov.w	r0, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bd8a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bd8c:	e771      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd8e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400bd90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bd98:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bd9a:	e76a      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bd9c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bd9e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bda2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bda6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bda8:	e763      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bdaa:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bdac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bdb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bdb4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bdb6:	e75c      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bdb8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400bdba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bdbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bdc2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bdc4:	e755      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bdc6:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
2400bdc8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bdcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bdd0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bdd2:	e74e      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bdd4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400bdd6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bdda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bdde:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bde0:	e747      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bde2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bde4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bde8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bdec:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bdee:	e740      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bdf0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
2400bdf2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bdf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400bdfa:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400bdfc:	e739      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400bdfe:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400be00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400be04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400be08:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400be0a:	e732      	b.n	2400bc72 <SDMMC_CmdStopTransfer+0x5a>
2400be0c:	20000748 	.word	0x20000748
2400be10:	10624dd3 	.word	0x10624dd3
2400be14:	fffee0c0 	.word	0xfffee0c0
2400be18:	05f5e100 	.word	0x05f5e100
2400be1c:	00200045 	.word	0x00200045
2400be20:	002000c5 	.word	0x002000c5
2400be24:	fdffe008 	.word	0xfdffe008

2400be28 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400be28:	4a50      	ldr	r2, [pc, #320]	; (2400bf6c <SDMMC_CmdSelDesel+0x144>)
{
2400be2a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400be2c:	4b50      	ldr	r3, [pc, #320]	; (2400bf70 <SDMMC_CmdSelDesel+0x148>)
2400be2e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400be30:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400be34:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400be38:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400be3c:	484d      	ldr	r0, [pc, #308]	; (2400bf74 <SDMMC_CmdSelDesel+0x14c>)
2400be3e:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400be42:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400be44:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400be46:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400be4a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400be4c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400be50:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400be54:	1e53      	subs	r3, r2, #1
2400be56:	b14a      	cbz	r2, 2400be6c <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400be58:	4947      	ldr	r1, [pc, #284]	; (2400bf78 <SDMMC_CmdSelDesel+0x150>)
    sta_reg = SDMMCx->STA;
2400be5a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400be5e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400be60:	420a      	tst	r2, r1
2400be62:	d001      	beq.n	2400be68 <SDMMC_CmdSelDesel+0x40>
2400be64:	0492      	lsls	r2, r2, #18
2400be66:	d504      	bpl.n	2400be72 <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
2400be68:	1c58      	adds	r0, r3, #1
2400be6a:	d1f6      	bne.n	2400be5a <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400be6c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400be70:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400be72:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400be76:	0758      	lsls	r0, r3, #29
2400be78:	d445      	bmi.n	2400bf06 <SDMMC_CmdSelDesel+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400be7a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400be7e:	f010 0001 	ands.w	r0, r0, #1
2400be82:	d137      	bne.n	2400bef4 <SDMMC_CmdSelDesel+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400be84:	4b3d      	ldr	r3, [pc, #244]	; (2400bf7c <SDMMC_CmdSelDesel+0x154>)
2400be86:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400be8a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400be8e:	b2db      	uxtb	r3, r3
2400be90:	2b07      	cmp	r3, #7
2400be92:	d136      	bne.n	2400bf02 <SDMMC_CmdSelDesel+0xda>
  return (*(__IO uint32_t *) tmp);
2400be94:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400be98:	4839      	ldr	r0, [pc, #228]	; (2400bf80 <SDMMC_CmdSelDesel+0x158>)
2400be9a:	4018      	ands	r0, r3
2400be9c:	2800      	cmp	r0, #0
2400be9e:	d02f      	beq.n	2400bf00 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bea0:	2b00      	cmp	r3, #0
2400bea2:	db35      	blt.n	2400bf10 <SDMMC_CmdSelDesel+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bea4:	0059      	lsls	r1, r3, #1
2400bea6:	d436      	bmi.n	2400bf16 <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400bea8:	009a      	lsls	r2, r3, #2
2400beaa:	d436      	bmi.n	2400bf1a <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400beac:	00d9      	lsls	r1, r3, #3
2400beae:	d436      	bmi.n	2400bf1e <SDMMC_CmdSelDesel+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400beb0:	011a      	lsls	r2, r3, #4
2400beb2:	d437      	bmi.n	2400bf24 <SDMMC_CmdSelDesel+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400beb4:	0159      	lsls	r1, r3, #5
2400beb6:	d438      	bmi.n	2400bf2a <SDMMC_CmdSelDesel+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400beb8:	01da      	lsls	r2, r3, #7
2400beba:	d439      	bmi.n	2400bf30 <SDMMC_CmdSelDesel+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bebc:	0219      	lsls	r1, r3, #8
2400bebe:	d43a      	bmi.n	2400bf36 <SDMMC_CmdSelDesel+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bec0:	025a      	lsls	r2, r3, #9
2400bec2:	d43b      	bmi.n	2400bf3c <SDMMC_CmdSelDesel+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bec4:	0299      	lsls	r1, r3, #10
2400bec6:	d445      	bmi.n	2400bf54 <SDMMC_CmdSelDesel+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400bec8:	02da      	lsls	r2, r3, #11
2400beca:	d440      	bmi.n	2400bf4e <SDMMC_CmdSelDesel+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400becc:	0359      	lsls	r1, r3, #13
2400bece:	d43b      	bmi.n	2400bf48 <SDMMC_CmdSelDesel+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400bed0:	039a      	lsls	r2, r3, #14
2400bed2:	d436      	bmi.n	2400bf42 <SDMMC_CmdSelDesel+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400bed4:	03d9      	lsls	r1, r3, #15
2400bed6:	d446      	bmi.n	2400bf66 <SDMMC_CmdSelDesel+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400bed8:	041a      	lsls	r2, r3, #16
2400beda:	d441      	bmi.n	2400bf60 <SDMMC_CmdSelDesel+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400bedc:	0459      	lsls	r1, r3, #17
2400bede:	d43c      	bmi.n	2400bf5a <SDMMC_CmdSelDesel+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400bee0:	049a      	lsls	r2, r3, #18
2400bee2:	d40b      	bmi.n	2400befc <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400bee4:	f013 0f08 	tst.w	r3, #8
2400bee8:	bf14      	ite	ne
2400beea:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400beee:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400bef2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400bef4:	2301      	movs	r3, #1
2400bef6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400befa:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400befc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400bf00:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bf02:	2001      	movs	r0, #1
2400bf04:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bf06:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bf08:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bf0a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bf0e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400bf10:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400bf14:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400bf16:	2040      	movs	r0, #64	; 0x40
2400bf18:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400bf1a:	2080      	movs	r0, #128	; 0x80
2400bf1c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400bf1e:	f44f 7080 	mov.w	r0, #256	; 0x100
2400bf22:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400bf24:	f44f 7000 	mov.w	r0, #512	; 0x200
2400bf28:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400bf2a:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400bf2e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bf30:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400bf34:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bf36:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400bf3a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bf3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400bf40:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bf42:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400bf46:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400bf48:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400bf4c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400bf4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400bf52:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400bf54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400bf58:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400bf5a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400bf5e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bf60:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400bf64:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400bf66:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400bf6a:	4770      	bx	lr
2400bf6c:	20000748 	.word	0x20000748
2400bf70:	10624dd3 	.word	0x10624dd3
2400bf74:	fffee0c0 	.word	0xfffee0c0
2400bf78:	00200045 	.word	0x00200045
2400bf7c:	002000c5 	.word	0x002000c5
2400bf80:	fdffe008 	.word	0xfdffe008

2400bf84 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400bf84:	4b11      	ldr	r3, [pc, #68]	; (2400bfcc <SDMMC_CmdGoIdleState+0x48>)
{
2400bf86:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bf88:	4a11      	ldr	r2, [pc, #68]	; (2400bfd0 <SDMMC_CmdGoIdleState+0x4c>)
{
2400bf8a:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400bf8c:	4c11      	ldr	r4, [pc, #68]	; (2400bfd4 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
2400bf8e:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400bf90:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
2400bf92:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400bf94:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bf98:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400bf9a:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bf9e:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400bfa0:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bfa2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400bfa6:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bfaa:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400bfac:	e002      	b.n	2400bfb4 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
2400bfae:	6b4a      	ldr	r2, [r1, #52]	; 0x34
2400bfb0:	0612      	lsls	r2, r2, #24
2400bfb2:	d405      	bmi.n	2400bfc0 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
2400bfb4:	3b01      	subs	r3, #1
2400bfb6:	d2fa      	bcs.n	2400bfae <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
2400bfb8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400bfbc:	bc30      	pop	{r4, r5}
2400bfbe:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bfc0:	4b05      	ldr	r3, [pc, #20]	; (2400bfd8 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
2400bfc2:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bfc4:	638b      	str	r3, [r1, #56]	; 0x38
}
2400bfc6:	bc30      	pop	{r4, r5}
2400bfc8:	4770      	bx	lr
2400bfca:	bf00      	nop
2400bfcc:	20000748 	.word	0x20000748
2400bfd0:	fffee0c0 	.word	0xfffee0c0
2400bfd4:	10624dd3 	.word	0x10624dd3
2400bfd8:	002000c5 	.word	0x002000c5

2400bfdc <SDMMC_CmdOperCond>:
{
2400bfdc:	b410      	push	{r4}
2400bfde:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400bfe0:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400bfe4:	4a1a      	ldr	r2, [pc, #104]	; (2400c050 <SDMMC_CmdOperCond+0x74>)
2400bfe6:	4b1b      	ldr	r3, [pc, #108]	; (2400c054 <SDMMC_CmdOperCond+0x78>)
  SDMMCx->ARG = Command->Argument;
2400bfe8:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400bfea:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bfec:	68cc      	ldr	r4, [r1, #12]
2400bfee:	481a      	ldr	r0, [pc, #104]	; (2400c058 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400bff0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bff4:	f241 1308 	movw	r3, #4360	; 0x1108
2400bff8:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400bffa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bffc:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400bffe:	f241 3088 	movw	r0, #5000	; 0x1388
2400c002:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c006:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400c008:	b14a      	cbz	r2, 2400c01e <SDMMC_CmdOperCond+0x42>
2400c00a:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400c00c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400c00e:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c010:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c014:	d001      	beq.n	2400c01a <SDMMC_CmdOperCond+0x3e>
2400c016:	0490      	lsls	r0, r2, #18
2400c018:	d506      	bpl.n	2400c028 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
2400c01a:	1c5c      	adds	r4, r3, #1
2400c01c:	d1f6      	bne.n	2400c00c <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400c01e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c022:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c026:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c028:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c02a:	075a      	lsls	r2, r3, #29
2400c02c:	d40c      	bmi.n	2400c048 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c02e:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400c030:	f010 0001 	ands.w	r0, r0, #1
2400c034:	d105      	bne.n	2400c042 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
2400c036:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c038:	065b      	lsls	r3, r3, #25
2400c03a:	d5f2      	bpl.n	2400c022 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
2400c03c:	2340      	movs	r3, #64	; 0x40
2400c03e:	638b      	str	r3, [r1, #56]	; 0x38
2400c040:	e7ef      	b.n	2400c022 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c042:	2301      	movs	r3, #1
2400c044:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c046:	e7ec      	b.n	2400c022 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c048:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c04a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c04c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c04e:	e7e8      	b.n	2400c022 <SDMMC_CmdOperCond+0x46>
2400c050:	20000748 	.word	0x20000748
2400c054:	10624dd3 	.word	0x10624dd3
2400c058:	fffee0c0 	.word	0xfffee0c0

2400c05c <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c05c:	4a50      	ldr	r2, [pc, #320]	; (2400c1a0 <SDMMC_CmdAppCommand+0x144>)
{
2400c05e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c060:	4b50      	ldr	r3, [pc, #320]	; (2400c1a4 <SDMMC_CmdAppCommand+0x148>)
2400c062:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c064:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c068:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c06c:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c070:	484d      	ldr	r0, [pc, #308]	; (2400c1a8 <SDMMC_CmdAppCommand+0x14c>)
2400c072:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c076:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c078:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c07a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c07e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c080:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c084:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c088:	1e53      	subs	r3, r2, #1
2400c08a:	b14a      	cbz	r2, 2400c0a0 <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c08c:	4947      	ldr	r1, [pc, #284]	; (2400c1ac <SDMMC_CmdAppCommand+0x150>)
    sta_reg = SDMMCx->STA;
2400c08e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c092:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c094:	420a      	tst	r2, r1
2400c096:	d001      	beq.n	2400c09c <SDMMC_CmdAppCommand+0x40>
2400c098:	0492      	lsls	r2, r2, #18
2400c09a:	d504      	bpl.n	2400c0a6 <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
2400c09c:	1c58      	adds	r0, r3, #1
2400c09e:	d1f6      	bne.n	2400c08e <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c0a0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c0a4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c0a6:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c0aa:	0758      	lsls	r0, r3, #29
2400c0ac:	d445      	bmi.n	2400c13a <SDMMC_CmdAppCommand+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c0ae:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c0b2:	f010 0001 	ands.w	r0, r0, #1
2400c0b6:	d137      	bne.n	2400c128 <SDMMC_CmdAppCommand+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c0b8:	4b3d      	ldr	r3, [pc, #244]	; (2400c1b0 <SDMMC_CmdAppCommand+0x154>)
2400c0ba:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c0be:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c0c2:	b2db      	uxtb	r3, r3
2400c0c4:	2b37      	cmp	r3, #55	; 0x37
2400c0c6:	d136      	bne.n	2400c136 <SDMMC_CmdAppCommand+0xda>
  return (*(__IO uint32_t *) tmp);
2400c0c8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c0cc:	4839      	ldr	r0, [pc, #228]	; (2400c1b4 <SDMMC_CmdAppCommand+0x158>)
2400c0ce:	4018      	ands	r0, r3
2400c0d0:	2800      	cmp	r0, #0
2400c0d2:	d02f      	beq.n	2400c134 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c0d4:	2b00      	cmp	r3, #0
2400c0d6:	db35      	blt.n	2400c144 <SDMMC_CmdAppCommand+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c0d8:	0059      	lsls	r1, r3, #1
2400c0da:	d436      	bmi.n	2400c14a <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c0dc:	009a      	lsls	r2, r3, #2
2400c0de:	d436      	bmi.n	2400c14e <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c0e0:	00d9      	lsls	r1, r3, #3
2400c0e2:	d436      	bmi.n	2400c152 <SDMMC_CmdAppCommand+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c0e4:	011a      	lsls	r2, r3, #4
2400c0e6:	d437      	bmi.n	2400c158 <SDMMC_CmdAppCommand+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c0e8:	0159      	lsls	r1, r3, #5
2400c0ea:	d438      	bmi.n	2400c15e <SDMMC_CmdAppCommand+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c0ec:	01da      	lsls	r2, r3, #7
2400c0ee:	d439      	bmi.n	2400c164 <SDMMC_CmdAppCommand+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c0f0:	0219      	lsls	r1, r3, #8
2400c0f2:	d43a      	bmi.n	2400c16a <SDMMC_CmdAppCommand+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c0f4:	025a      	lsls	r2, r3, #9
2400c0f6:	d43b      	bmi.n	2400c170 <SDMMC_CmdAppCommand+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c0f8:	0299      	lsls	r1, r3, #10
2400c0fa:	d445      	bmi.n	2400c188 <SDMMC_CmdAppCommand+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c0fc:	02da      	lsls	r2, r3, #11
2400c0fe:	d440      	bmi.n	2400c182 <SDMMC_CmdAppCommand+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c100:	0359      	lsls	r1, r3, #13
2400c102:	d43b      	bmi.n	2400c17c <SDMMC_CmdAppCommand+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c104:	039a      	lsls	r2, r3, #14
2400c106:	d436      	bmi.n	2400c176 <SDMMC_CmdAppCommand+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c108:	03d9      	lsls	r1, r3, #15
2400c10a:	d446      	bmi.n	2400c19a <SDMMC_CmdAppCommand+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c10c:	041a      	lsls	r2, r3, #16
2400c10e:	d441      	bmi.n	2400c194 <SDMMC_CmdAppCommand+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c110:	0459      	lsls	r1, r3, #17
2400c112:	d43c      	bmi.n	2400c18e <SDMMC_CmdAppCommand+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c114:	049a      	lsls	r2, r3, #18
2400c116:	d40b      	bmi.n	2400c130 <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c118:	f013 0f08 	tst.w	r3, #8
2400c11c:	bf14      	ite	ne
2400c11e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c122:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c126:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c128:	2301      	movs	r3, #1
2400c12a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c12e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c130:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c134:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c136:	2001      	movs	r0, #1
2400c138:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c13a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c13c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c13e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c142:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c144:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c148:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c14a:	2040      	movs	r0, #64	; 0x40
2400c14c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c14e:	2080      	movs	r0, #128	; 0x80
2400c150:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c152:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c156:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c158:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c15c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c15e:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c162:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c164:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c168:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c16a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c16e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c170:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c174:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c176:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c17a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c17c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c180:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c182:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c186:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c188:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c18c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c18e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c192:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c194:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c198:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c19a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c19e:	4770      	bx	lr
2400c1a0:	20000748 	.word	0x20000748
2400c1a4:	10624dd3 	.word	0x10624dd3
2400c1a8:	fffee0c0 	.word	0xfffee0c0
2400c1ac:	00200045 	.word	0x00200045
2400c1b0:	002000c5 	.word	0x002000c5
2400c1b4:	fdffe008 	.word	0xfdffe008

2400c1b8 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c1b8:	4a19      	ldr	r2, [pc, #100]	; (2400c220 <SDMMC_CmdAppOperCommand+0x68>)
{
2400c1ba:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c1bc:	4b19      	ldr	r3, [pc, #100]	; (2400c224 <SDMMC_CmdAppOperCommand+0x6c>)
2400c1be:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c1c0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c1c4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c1c8:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c1cc:	4816      	ldr	r0, [pc, #88]	; (2400c228 <SDMMC_CmdAppOperCommand+0x70>)
2400c1ce:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c1d2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c1d4:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c1d6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c1da:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c1dc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c1e0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c1e4:	1e53      	subs	r3, r2, #1
2400c1e6:	b14a      	cbz	r2, 2400c1fc <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
2400c1e8:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c1ec:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c1ee:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c1f2:	d001      	beq.n	2400c1f8 <SDMMC_CmdAppOperCommand+0x40>
2400c1f4:	0492      	lsls	r2, r2, #18
2400c1f6:	d504      	bpl.n	2400c202 <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
2400c1f8:	1c59      	adds	r1, r3, #1
2400c1fa:	d1f5      	bne.n	2400c1e8 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400c1fc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c200:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c202:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c206:	f010 0004 	ands.w	r0, r0, #4
2400c20a:	d103      	bne.n	2400c214 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c20c:	4b07      	ldr	r3, [pc, #28]	; (2400c22c <SDMMC_CmdAppOperCommand+0x74>)
2400c20e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400c212:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c214:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c216:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c218:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c21c:	4770      	bx	lr
2400c21e:	bf00      	nop
2400c220:	20000748 	.word	0x20000748
2400c224:	10624dd3 	.word	0x10624dd3
2400c228:	fffee0c0 	.word	0xfffee0c0
2400c22c:	002000c5 	.word	0x002000c5

2400c230 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c230:	4a50      	ldr	r2, [pc, #320]	; (2400c374 <SDMMC_CmdBusWidth+0x144>)
{
2400c232:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c234:	4b50      	ldr	r3, [pc, #320]	; (2400c378 <SDMMC_CmdBusWidth+0x148>)
2400c236:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c238:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c23c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c240:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c244:	484d      	ldr	r0, [pc, #308]	; (2400c37c <SDMMC_CmdBusWidth+0x14c>)
2400c246:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c24a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c24c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c24e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c252:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c254:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c258:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c25c:	1e53      	subs	r3, r2, #1
2400c25e:	b14a      	cbz	r2, 2400c274 <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c260:	4947      	ldr	r1, [pc, #284]	; (2400c380 <SDMMC_CmdBusWidth+0x150>)
    sta_reg = SDMMCx->STA;
2400c262:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c266:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c268:	420a      	tst	r2, r1
2400c26a:	d001      	beq.n	2400c270 <SDMMC_CmdBusWidth+0x40>
2400c26c:	0492      	lsls	r2, r2, #18
2400c26e:	d504      	bpl.n	2400c27a <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
2400c270:	1c58      	adds	r0, r3, #1
2400c272:	d1f6      	bne.n	2400c262 <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c274:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c278:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c27a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c27e:	0758      	lsls	r0, r3, #29
2400c280:	d445      	bmi.n	2400c30e <SDMMC_CmdBusWidth+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c282:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c286:	f010 0001 	ands.w	r0, r0, #1
2400c28a:	d137      	bne.n	2400c2fc <SDMMC_CmdBusWidth+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c28c:	4b3d      	ldr	r3, [pc, #244]	; (2400c384 <SDMMC_CmdBusWidth+0x154>)
2400c28e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c292:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c296:	b2db      	uxtb	r3, r3
2400c298:	2b06      	cmp	r3, #6
2400c29a:	d136      	bne.n	2400c30a <SDMMC_CmdBusWidth+0xda>
  return (*(__IO uint32_t *) tmp);
2400c29c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c2a0:	4839      	ldr	r0, [pc, #228]	; (2400c388 <SDMMC_CmdBusWidth+0x158>)
2400c2a2:	4018      	ands	r0, r3
2400c2a4:	2800      	cmp	r0, #0
2400c2a6:	d02f      	beq.n	2400c308 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c2a8:	2b00      	cmp	r3, #0
2400c2aa:	db35      	blt.n	2400c318 <SDMMC_CmdBusWidth+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c2ac:	0059      	lsls	r1, r3, #1
2400c2ae:	d436      	bmi.n	2400c31e <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c2b0:	009a      	lsls	r2, r3, #2
2400c2b2:	d436      	bmi.n	2400c322 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c2b4:	00d9      	lsls	r1, r3, #3
2400c2b6:	d436      	bmi.n	2400c326 <SDMMC_CmdBusWidth+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c2b8:	011a      	lsls	r2, r3, #4
2400c2ba:	d437      	bmi.n	2400c32c <SDMMC_CmdBusWidth+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c2bc:	0159      	lsls	r1, r3, #5
2400c2be:	d438      	bmi.n	2400c332 <SDMMC_CmdBusWidth+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c2c0:	01da      	lsls	r2, r3, #7
2400c2c2:	d439      	bmi.n	2400c338 <SDMMC_CmdBusWidth+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c2c4:	0219      	lsls	r1, r3, #8
2400c2c6:	d43a      	bmi.n	2400c33e <SDMMC_CmdBusWidth+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c2c8:	025a      	lsls	r2, r3, #9
2400c2ca:	d43b      	bmi.n	2400c344 <SDMMC_CmdBusWidth+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c2cc:	0299      	lsls	r1, r3, #10
2400c2ce:	d445      	bmi.n	2400c35c <SDMMC_CmdBusWidth+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c2d0:	02da      	lsls	r2, r3, #11
2400c2d2:	d440      	bmi.n	2400c356 <SDMMC_CmdBusWidth+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c2d4:	0359      	lsls	r1, r3, #13
2400c2d6:	d43b      	bmi.n	2400c350 <SDMMC_CmdBusWidth+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c2d8:	039a      	lsls	r2, r3, #14
2400c2da:	d436      	bmi.n	2400c34a <SDMMC_CmdBusWidth+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c2dc:	03d9      	lsls	r1, r3, #15
2400c2de:	d446      	bmi.n	2400c36e <SDMMC_CmdBusWidth+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c2e0:	041a      	lsls	r2, r3, #16
2400c2e2:	d441      	bmi.n	2400c368 <SDMMC_CmdBusWidth+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c2e4:	0459      	lsls	r1, r3, #17
2400c2e6:	d43c      	bmi.n	2400c362 <SDMMC_CmdBusWidth+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c2e8:	049a      	lsls	r2, r3, #18
2400c2ea:	d40b      	bmi.n	2400c304 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c2ec:	f013 0f08 	tst.w	r3, #8
2400c2f0:	bf14      	ite	ne
2400c2f2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c2f6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c2fa:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c2fc:	2301      	movs	r3, #1
2400c2fe:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c302:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c304:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c308:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c30a:	2001      	movs	r0, #1
2400c30c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c30e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c310:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c312:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c316:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c318:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c31c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c31e:	2040      	movs	r0, #64	; 0x40
2400c320:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c322:	2080      	movs	r0, #128	; 0x80
2400c324:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c326:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c32a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c32c:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c330:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c332:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c336:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c338:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c33c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c33e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c342:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c344:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c348:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c34a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c34e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c350:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c354:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c356:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c35a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c35c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c360:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c362:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c366:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c368:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c36c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c36e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c372:	4770      	bx	lr
2400c374:	20000748 	.word	0x20000748
2400c378:	10624dd3 	.word	0x10624dd3
2400c37c:	fffee0c0 	.word	0xfffee0c0
2400c380:	00200045 	.word	0x00200045
2400c384:	002000c5 	.word	0x002000c5
2400c388:	fdffe008 	.word	0xfdffe008

2400c38c <SDMMC_CmdSendSCR>:
{
2400c38c:	b410      	push	{r4}
2400c38e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400c390:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c392:	4a4c      	ldr	r2, [pc, #304]	; (2400c4c4 <SDMMC_CmdSendSCR+0x138>)
2400c394:	4b4c      	ldr	r3, [pc, #304]	; (2400c4c8 <SDMMC_CmdSendSCR+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400c396:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c398:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c39a:	68cc      	ldr	r4, [r1, #12]
2400c39c:	484b      	ldr	r0, [pc, #300]	; (2400c4cc <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c39e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3a2:	f241 1333 	movw	r3, #4403	; 0x1133
2400c3a6:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3a8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3aa:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c3ac:	f241 3088 	movw	r0, #5000	; 0x1388
2400c3b0:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c3b4:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400c3b6:	b14a      	cbz	r2, 2400c3cc <SDMMC_CmdSendSCR+0x40>
2400c3b8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c3ba:	4845      	ldr	r0, [pc, #276]	; (2400c4d0 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
2400c3bc:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400c3be:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c3c0:	4202      	tst	r2, r0
2400c3c2:	d001      	beq.n	2400c3c8 <SDMMC_CmdSendSCR+0x3c>
2400c3c4:	0494      	lsls	r4, r2, #18
2400c3c6:	d506      	bpl.n	2400c3d6 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
2400c3c8:	1c5a      	adds	r2, r3, #1
2400c3ca:	d1f7      	bne.n	2400c3bc <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400c3cc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c3d0:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c3d4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c3d6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c3d8:	0758      	lsls	r0, r3, #29
2400c3da:	d43d      	bmi.n	2400c458 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c3dc:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400c3de:	f010 0001 	ands.w	r0, r0, #1
2400c3e2:	d134      	bne.n	2400c44e <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c3e4:	4b3b      	ldr	r3, [pc, #236]	; (2400c4d4 <SDMMC_CmdSendSCR+0x148>)
2400c3e6:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c3e8:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c3ea:	b2db      	uxtb	r3, r3
2400c3ec:	2b33      	cmp	r3, #51	; 0x33
2400c3ee:	d131      	bne.n	2400c454 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
2400c3f0:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c3f2:	4839      	ldr	r0, [pc, #228]	; (2400c4d8 <SDMMC_CmdSendSCR+0x14c>)
2400c3f4:	4018      	ands	r0, r3
2400c3f6:	2800      	cmp	r0, #0
2400c3f8:	d0ea      	beq.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c3fa:	2b00      	cmp	r3, #0
2400c3fc:	db30      	blt.n	2400c460 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c3fe:	005a      	lsls	r2, r3, #1
2400c400:	d431      	bmi.n	2400c466 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c402:	009c      	lsls	r4, r3, #2
2400c404:	d431      	bmi.n	2400c46a <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c406:	00d9      	lsls	r1, r3, #3
2400c408:	d431      	bmi.n	2400c46e <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c40a:	011a      	lsls	r2, r3, #4
2400c40c:	d432      	bmi.n	2400c474 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c40e:	015c      	lsls	r4, r3, #5
2400c410:	d433      	bmi.n	2400c47a <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c412:	01d9      	lsls	r1, r3, #7
2400c414:	d434      	bmi.n	2400c480 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c416:	021a      	lsls	r2, r3, #8
2400c418:	d435      	bmi.n	2400c486 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c41a:	025c      	lsls	r4, r3, #9
2400c41c:	d436      	bmi.n	2400c48c <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c41e:	0299      	lsls	r1, r3, #10
2400c420:	d440      	bmi.n	2400c4a4 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c422:	02da      	lsls	r2, r3, #11
2400c424:	d43b      	bmi.n	2400c49e <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c426:	035c      	lsls	r4, r3, #13
2400c428:	d436      	bmi.n	2400c498 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c42a:	0399      	lsls	r1, r3, #14
2400c42c:	d431      	bmi.n	2400c492 <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c42e:	03da      	lsls	r2, r3, #15
2400c430:	d444      	bmi.n	2400c4bc <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c432:	041c      	lsls	r4, r3, #16
2400c434:	d43f      	bmi.n	2400c4b6 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c436:	0459      	lsls	r1, r3, #17
2400c438:	d43a      	bmi.n	2400c4b0 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c43a:	049a      	lsls	r2, r3, #18
2400c43c:	d435      	bmi.n	2400c4aa <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c43e:	f013 0f08 	tst.w	r3, #8
2400c442:	bf14      	ite	ne
2400c444:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c448:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c44c:	e7c0      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c44e:	2301      	movs	r3, #1
2400c450:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c452:	e7bd      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c454:	2001      	movs	r0, #1
2400c456:	e7bb      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c458:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c45a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c45c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c45e:	e7b7      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c460:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c464:	e7b4      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c466:	2040      	movs	r0, #64	; 0x40
2400c468:	e7b2      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c46a:	2080      	movs	r0, #128	; 0x80
2400c46c:	e7b0      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c46e:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c472:	e7ad      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c474:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c478:	e7aa      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c47a:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c47e:	e7a7      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c480:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c484:	e7a4      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c486:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c48a:	e7a1      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c48c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c490:	e79e      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c492:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c496:	e79b      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c498:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c49c:	e798      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
2400c49e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c4a2:	e795      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c4a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c4a8:	e792      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
2400c4aa:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400c4ae:	e78f      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c4b0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c4b4:	e78c      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c4b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c4ba:	e789      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c4bc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c4c0:	e786      	b.n	2400c3d0 <SDMMC_CmdSendSCR+0x44>
2400c4c2:	bf00      	nop
2400c4c4:	20000748 	.word	0x20000748
2400c4c8:	10624dd3 	.word	0x10624dd3
2400c4cc:	fffee0c0 	.word	0xfffee0c0
2400c4d0:	00200045 	.word	0x00200045
2400c4d4:	002000c5 	.word	0x002000c5
2400c4d8:	fdffe008 	.word	0xfdffe008

2400c4dc <SDMMC_CmdSendCID>:
{
2400c4dc:	b410      	push	{r4}
2400c4de:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400c4e0:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c4e2:	4a19      	ldr	r2, [pc, #100]	; (2400c548 <SDMMC_CmdSendCID+0x6c>)
2400c4e4:	4b19      	ldr	r3, [pc, #100]	; (2400c54c <SDMMC_CmdSendCID+0x70>)
  SDMMCx->ARG = Command->Argument;
2400c4e6:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c4e8:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c4ea:	68cc      	ldr	r4, [r1, #12]
2400c4ec:	4818      	ldr	r0, [pc, #96]	; (2400c550 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c4ee:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c4f2:	f241 3302 	movw	r3, #4866	; 0x1302
2400c4f6:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c4f8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c4fa:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c4fc:	f241 3088 	movw	r0, #5000	; 0x1388
2400c500:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c504:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400c506:	b14a      	cbz	r2, 2400c51c <SDMMC_CmdSendCID+0x40>
2400c508:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400c50a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400c50c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c50e:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c512:	d001      	beq.n	2400c518 <SDMMC_CmdSendCID+0x3c>
2400c514:	0492      	lsls	r2, r2, #18
2400c516:	d506      	bpl.n	2400c526 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
2400c518:	1c58      	adds	r0, r3, #1
2400c51a:	d1f6      	bne.n	2400c50a <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400c51c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c520:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c524:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c526:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c528:	075b      	lsls	r3, r3, #29
2400c52a:	d409      	bmi.n	2400c540 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c52c:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400c52e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c532:	bf14      	ite	ne
2400c534:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c536:	4b07      	ldreq	r3, [pc, #28]	; (2400c554 <SDMMC_CmdSendCID+0x78>)
2400c538:	638b      	str	r3, [r1, #56]	; 0x38
}
2400c53a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c53e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c540:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c542:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c544:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c546:	e7eb      	b.n	2400c520 <SDMMC_CmdSendCID+0x44>
2400c548:	20000748 	.word	0x20000748
2400c54c:	10624dd3 	.word	0x10624dd3
2400c550:	fffee0c0 	.word	0xfffee0c0
2400c554:	002000c5 	.word	0x002000c5

2400c558 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c558:	4a1b      	ldr	r2, [pc, #108]	; (2400c5c8 <SDMMC_CmdSendCSD+0x70>)
{
2400c55a:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c55c:	4b1b      	ldr	r3, [pc, #108]	; (2400c5cc <SDMMC_CmdSendCSD+0x74>)
2400c55e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c560:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c564:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c568:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c56c:	4818      	ldr	r0, [pc, #96]	; (2400c5d0 <SDMMC_CmdSendCSD+0x78>)
2400c56e:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c572:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c574:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c576:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c57a:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c57c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c580:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c584:	1e53      	subs	r3, r2, #1
2400c586:	b14a      	cbz	r2, 2400c59c <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
2400c588:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c58c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c58e:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c592:	d001      	beq.n	2400c598 <SDMMC_CmdSendCSD+0x40>
2400c594:	0492      	lsls	r2, r2, #18
2400c596:	d504      	bpl.n	2400c5a2 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
2400c598:	1c59      	adds	r1, r3, #1
2400c59a:	d1f5      	bne.n	2400c588 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400c59c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c5a0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c5a2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c5a6:	075b      	lsls	r3, r3, #29
2400c5a8:	d409      	bmi.n	2400c5be <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c5aa:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c5ae:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c5b2:	bf14      	ite	ne
2400c5b4:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c5b6:	4b07      	ldreq	r3, [pc, #28]	; (2400c5d4 <SDMMC_CmdSendCSD+0x7c>)
2400c5b8:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400c5bc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c5be:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c5c0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c5c2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c5c6:	4770      	bx	lr
2400c5c8:	20000748 	.word	0x20000748
2400c5cc:	10624dd3 	.word	0x10624dd3
2400c5d0:	fffee0c0 	.word	0xfffee0c0
2400c5d4:	002000c5 	.word	0x002000c5

2400c5d8 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
2400c5d8:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c5da:	4a2b      	ldr	r2, [pc, #172]	; (2400c688 <SDMMC_CmdSetRelAdd+0xb0>)
{
2400c5dc:	4684      	mov	ip, r0
2400c5de:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400c5e0:	6083      	str	r3, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c5e2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c5e4:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c5e6:	4829      	ldr	r0, [pc, #164]	; (2400c68c <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c5e8:	4c29      	ldr	r4, [pc, #164]	; (2400c690 <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c5ea:	fba0 0202 	umull	r0, r2, r0, r2
2400c5ee:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c5f2:	401c      	ands	r4, r3
2400c5f4:	f241 1303 	movw	r3, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c5f8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c5fa:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c5fc:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c600:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c604:	b152      	cbz	r2, 2400c61c <SDMMC_CmdSetRelAdd+0x44>
2400c606:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400c608:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c60c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c60e:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c612:	d001      	beq.n	2400c618 <SDMMC_CmdSetRelAdd+0x40>
2400c614:	0494      	lsls	r4, r2, #18
2400c616:	d506      	bpl.n	2400c626 <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
2400c618:	1c5a      	adds	r2, r3, #1
2400c61a:	d1f5      	bne.n	2400c608 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400c61c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c620:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c624:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c626:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c62a:	0758      	lsls	r0, r3, #29
2400c62c:	d421      	bmi.n	2400c672 <SDMMC_CmdSetRelAdd+0x9a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c62e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c632:	f010 0001 	ands.w	r0, r0, #1
2400c636:	d116      	bne.n	2400c666 <SDMMC_CmdSetRelAdd+0x8e>
  return (uint8_t)(SDMMCx->RESPCMD);
2400c638:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c63c:	b2db      	uxtb	r3, r3
2400c63e:	2b03      	cmp	r3, #3
2400c640:	d115      	bne.n	2400c66e <SDMMC_CmdSetRelAdd+0x96>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c642:	4b14      	ldr	r3, [pc, #80]	; (2400c694 <SDMMC_CmdSetRelAdd+0xbc>)
2400c644:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
2400c648:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
2400c64c:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
2400c650:	d017      	beq.n	2400c682 <SDMMC_CmdSetRelAdd+0xaa>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
2400c652:	045a      	lsls	r2, r3, #17
2400c654:	d412      	bmi.n	2400c67c <SDMMC_CmdSetRelAdd+0xa4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c656:	f413 4f00 	tst.w	r3, #32768	; 0x8000
2400c65a:	bf14      	ite	ne
2400c65c:	f44f 5080 	movne.w	r0, #4096	; 0x1000
2400c660:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c664:	e7dc      	b.n	2400c620 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c666:	2301      	movs	r3, #1
2400c668:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c66c:	e7d8      	b.n	2400c620 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c66e:	2001      	movs	r0, #1
2400c670:	e7d6      	b.n	2400c620 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c672:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c674:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c676:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c67a:	e7d1      	b.n	2400c620 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c67c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c680:	e7ce      	b.n	2400c620 <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
2400c682:	0c1b      	lsrs	r3, r3, #16
2400c684:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
2400c686:	e7cb      	b.n	2400c620 <SDMMC_CmdSetRelAdd+0x48>
2400c688:	20000748 	.word	0x20000748
2400c68c:	10624dd3 	.word	0x10624dd3
2400c690:	fffee0c0 	.word	0xfffee0c0
2400c694:	002000c5 	.word	0x002000c5

2400c698 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c698:	4a50      	ldr	r2, [pc, #320]	; (2400c7dc <SDMMC_CmdSendStatus+0x144>)
{
2400c69a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c69c:	4b50      	ldr	r3, [pc, #320]	; (2400c7e0 <SDMMC_CmdSendStatus+0x148>)
2400c69e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c6a0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c6a4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6a8:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c6ac:	484d      	ldr	r0, [pc, #308]	; (2400c7e4 <SDMMC_CmdSendStatus+0x14c>)
2400c6ae:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c6b2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6b4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c6b6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6ba:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c6bc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6c0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c6c4:	1e53      	subs	r3, r2, #1
2400c6c6:	b14a      	cbz	r2, 2400c6dc <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c6c8:	4947      	ldr	r1, [pc, #284]	; (2400c7e8 <SDMMC_CmdSendStatus+0x150>)
    sta_reg = SDMMCx->STA;
2400c6ca:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c6ce:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c6d0:	420a      	tst	r2, r1
2400c6d2:	d001      	beq.n	2400c6d8 <SDMMC_CmdSendStatus+0x40>
2400c6d4:	0492      	lsls	r2, r2, #18
2400c6d6:	d504      	bpl.n	2400c6e2 <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
2400c6d8:	1c58      	adds	r0, r3, #1
2400c6da:	d1f6      	bne.n	2400c6ca <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c6dc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c6e0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c6e2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c6e6:	0758      	lsls	r0, r3, #29
2400c6e8:	d445      	bmi.n	2400c776 <SDMMC_CmdSendStatus+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c6ea:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c6ee:	f010 0001 	ands.w	r0, r0, #1
2400c6f2:	d137      	bne.n	2400c764 <SDMMC_CmdSendStatus+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c6f4:	4b3d      	ldr	r3, [pc, #244]	; (2400c7ec <SDMMC_CmdSendStatus+0x154>)
2400c6f6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c6fa:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c6fe:	b2db      	uxtb	r3, r3
2400c700:	2b0d      	cmp	r3, #13
2400c702:	d136      	bne.n	2400c772 <SDMMC_CmdSendStatus+0xda>
  return (*(__IO uint32_t *) tmp);
2400c704:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c708:	4839      	ldr	r0, [pc, #228]	; (2400c7f0 <SDMMC_CmdSendStatus+0x158>)
2400c70a:	4018      	ands	r0, r3
2400c70c:	2800      	cmp	r0, #0
2400c70e:	d02f      	beq.n	2400c770 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c710:	2b00      	cmp	r3, #0
2400c712:	db35      	blt.n	2400c780 <SDMMC_CmdSendStatus+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c714:	0059      	lsls	r1, r3, #1
2400c716:	d436      	bmi.n	2400c786 <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c718:	009a      	lsls	r2, r3, #2
2400c71a:	d436      	bmi.n	2400c78a <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c71c:	00d9      	lsls	r1, r3, #3
2400c71e:	d436      	bmi.n	2400c78e <SDMMC_CmdSendStatus+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c720:	011a      	lsls	r2, r3, #4
2400c722:	d437      	bmi.n	2400c794 <SDMMC_CmdSendStatus+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c724:	0159      	lsls	r1, r3, #5
2400c726:	d438      	bmi.n	2400c79a <SDMMC_CmdSendStatus+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c728:	01da      	lsls	r2, r3, #7
2400c72a:	d439      	bmi.n	2400c7a0 <SDMMC_CmdSendStatus+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c72c:	0219      	lsls	r1, r3, #8
2400c72e:	d43a      	bmi.n	2400c7a6 <SDMMC_CmdSendStatus+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c730:	025a      	lsls	r2, r3, #9
2400c732:	d43b      	bmi.n	2400c7ac <SDMMC_CmdSendStatus+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c734:	0299      	lsls	r1, r3, #10
2400c736:	d445      	bmi.n	2400c7c4 <SDMMC_CmdSendStatus+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c738:	02da      	lsls	r2, r3, #11
2400c73a:	d440      	bmi.n	2400c7be <SDMMC_CmdSendStatus+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c73c:	0359      	lsls	r1, r3, #13
2400c73e:	d43b      	bmi.n	2400c7b8 <SDMMC_CmdSendStatus+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c740:	039a      	lsls	r2, r3, #14
2400c742:	d436      	bmi.n	2400c7b2 <SDMMC_CmdSendStatus+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c744:	03d9      	lsls	r1, r3, #15
2400c746:	d446      	bmi.n	2400c7d6 <SDMMC_CmdSendStatus+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c748:	041a      	lsls	r2, r3, #16
2400c74a:	d441      	bmi.n	2400c7d0 <SDMMC_CmdSendStatus+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c74c:	0459      	lsls	r1, r3, #17
2400c74e:	d43c      	bmi.n	2400c7ca <SDMMC_CmdSendStatus+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c750:	049a      	lsls	r2, r3, #18
2400c752:	d40b      	bmi.n	2400c76c <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c754:	f013 0f08 	tst.w	r3, #8
2400c758:	bf14      	ite	ne
2400c75a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c75e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c762:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c764:	2301      	movs	r3, #1
2400c766:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c76a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c76c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c770:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c772:	2001      	movs	r0, #1
2400c774:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c776:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c778:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c77a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c77e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c780:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c784:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c786:	2040      	movs	r0, #64	; 0x40
2400c788:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c78a:	2080      	movs	r0, #128	; 0x80
2400c78c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c78e:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c792:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c794:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c798:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c79a:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c79e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c7a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c7a4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c7a6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c7aa:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c7ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c7b0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c7b2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c7b6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c7b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c7bc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c7be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c7c2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c7c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c7c8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c7ca:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c7ce:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c7d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c7d4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c7d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c7da:	4770      	bx	lr
2400c7dc:	20000748 	.word	0x20000748
2400c7e0:	10624dd3 	.word	0x10624dd3
2400c7e4:	fffee0c0 	.word	0xfffee0c0
2400c7e8:	00200045 	.word	0x00200045
2400c7ec:	002000c5 	.word	0x002000c5
2400c7f0:	fdffe008 	.word	0xfdffe008

2400c7f4 <SDMMC_CmdStatusRegister>:
{
2400c7f4:	b410      	push	{r4}
2400c7f6:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400c7f8:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c7fa:	4a4c      	ldr	r2, [pc, #304]	; (2400c92c <SDMMC_CmdStatusRegister+0x138>)
2400c7fc:	4b4c      	ldr	r3, [pc, #304]	; (2400c930 <SDMMC_CmdStatusRegister+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400c7fe:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c800:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c802:	68cc      	ldr	r4, [r1, #12]
2400c804:	484b      	ldr	r0, [pc, #300]	; (2400c934 <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c806:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c80a:	f241 130d 	movw	r3, #4365	; 0x110d
2400c80e:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c810:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c812:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c814:	f241 3088 	movw	r0, #5000	; 0x1388
2400c818:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c81c:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400c81e:	b14a      	cbz	r2, 2400c834 <SDMMC_CmdStatusRegister+0x40>
2400c820:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c822:	4845      	ldr	r0, [pc, #276]	; (2400c938 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
2400c824:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400c826:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c828:	4202      	tst	r2, r0
2400c82a:	d001      	beq.n	2400c830 <SDMMC_CmdStatusRegister+0x3c>
2400c82c:	0494      	lsls	r4, r2, #18
2400c82e:	d506      	bpl.n	2400c83e <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
2400c830:	1c5a      	adds	r2, r3, #1
2400c832:	d1f7      	bne.n	2400c824 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400c834:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c838:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c83c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c83e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c840:	0758      	lsls	r0, r3, #29
2400c842:	d43d      	bmi.n	2400c8c0 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c844:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400c846:	f010 0001 	ands.w	r0, r0, #1
2400c84a:	d134      	bne.n	2400c8b6 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c84c:	4b3b      	ldr	r3, [pc, #236]	; (2400c93c <SDMMC_CmdStatusRegister+0x148>)
2400c84e:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c850:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c852:	b2db      	uxtb	r3, r3
2400c854:	2b0d      	cmp	r3, #13
2400c856:	d131      	bne.n	2400c8bc <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
2400c858:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c85a:	4839      	ldr	r0, [pc, #228]	; (2400c940 <SDMMC_CmdStatusRegister+0x14c>)
2400c85c:	4018      	ands	r0, r3
2400c85e:	2800      	cmp	r0, #0
2400c860:	d0ea      	beq.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c862:	2b00      	cmp	r3, #0
2400c864:	db30      	blt.n	2400c8c8 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c866:	005a      	lsls	r2, r3, #1
2400c868:	d431      	bmi.n	2400c8ce <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c86a:	009c      	lsls	r4, r3, #2
2400c86c:	d431      	bmi.n	2400c8d2 <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c86e:	00d9      	lsls	r1, r3, #3
2400c870:	d431      	bmi.n	2400c8d6 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c872:	011a      	lsls	r2, r3, #4
2400c874:	d432      	bmi.n	2400c8dc <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c876:	015c      	lsls	r4, r3, #5
2400c878:	d433      	bmi.n	2400c8e2 <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c87a:	01d9      	lsls	r1, r3, #7
2400c87c:	d434      	bmi.n	2400c8e8 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c87e:	021a      	lsls	r2, r3, #8
2400c880:	d435      	bmi.n	2400c8ee <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c882:	025c      	lsls	r4, r3, #9
2400c884:	d436      	bmi.n	2400c8f4 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c886:	0299      	lsls	r1, r3, #10
2400c888:	d440      	bmi.n	2400c90c <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c88a:	02da      	lsls	r2, r3, #11
2400c88c:	d43b      	bmi.n	2400c906 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c88e:	035c      	lsls	r4, r3, #13
2400c890:	d436      	bmi.n	2400c900 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c892:	0399      	lsls	r1, r3, #14
2400c894:	d431      	bmi.n	2400c8fa <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c896:	03da      	lsls	r2, r3, #15
2400c898:	d444      	bmi.n	2400c924 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c89a:	041c      	lsls	r4, r3, #16
2400c89c:	d43f      	bmi.n	2400c91e <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c89e:	0459      	lsls	r1, r3, #17
2400c8a0:	d43a      	bmi.n	2400c918 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c8a2:	049a      	lsls	r2, r3, #18
2400c8a4:	d435      	bmi.n	2400c912 <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c8a6:	f013 0f08 	tst.w	r3, #8
2400c8aa:	bf14      	ite	ne
2400c8ac:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c8b0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c8b4:	e7c0      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c8b6:	2301      	movs	r3, #1
2400c8b8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c8ba:	e7bd      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c8bc:	2001      	movs	r0, #1
2400c8be:	e7bb      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c8c0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c8c2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c8c4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c8c6:	e7b7      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c8c8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c8cc:	e7b4      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c8ce:	2040      	movs	r0, #64	; 0x40
2400c8d0:	e7b2      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c8d2:	2080      	movs	r0, #128	; 0x80
2400c8d4:	e7b0      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c8d6:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c8da:	e7ad      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c8dc:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c8e0:	e7aa      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c8e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c8e6:	e7a7      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c8e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c8ec:	e7a4      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c8ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c8f2:	e7a1      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c8f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c8f8:	e79e      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c8fa:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c8fe:	e79b      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c900:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c904:	e798      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
2400c906:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c90a:	e795      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c90c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c910:	e792      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
2400c912:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400c916:	e78f      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c918:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c91c:	e78c      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c91e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c922:	e789      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c924:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c928:	e786      	b.n	2400c838 <SDMMC_CmdStatusRegister+0x44>
2400c92a:	bf00      	nop
2400c92c:	20000748 	.word	0x20000748
2400c930:	10624dd3 	.word	0x10624dd3
2400c934:	fffee0c0 	.word	0xfffee0c0
2400c938:	00200045 	.word	0x00200045
2400c93c:	002000c5 	.word	0x002000c5
2400c940:	fdffe008 	.word	0xfdffe008

2400c944 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
2400c944:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
2400c946:	4903      	ldr	r1, [pc, #12]	; (2400c954 <MX_FATFS_Init+0x10>)
2400c948:	4803      	ldr	r0, [pc, #12]	; (2400c958 <MX_FATFS_Init+0x14>)
2400c94a:	f003 f81b 	bl	2400f984 <FATFS_LinkDriver>
2400c94e:	4b03      	ldr	r3, [pc, #12]	; (2400c95c <MX_FATFS_Init+0x18>)
2400c950:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
2400c952:	bd08      	pop	{r3, pc}
2400c954:	2001d988 	.word	0x2001d988
2400c958:	240174d8 	.word	0x240174d8
2400c95c:	2001d98c 	.word	0x2001d98c

2400c960 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
2400c960:	2000      	movs	r0, #0
2400c962:	4770      	bx	lr

2400c964 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400c964:	b510      	push	{r4, lr}
2400c966:	4694      	mov	ip, r2
2400c968:	b082      	sub	sp, #8
2400c96a:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
2400c96c:	460a      	mov	r2, r1
2400c96e:	4663      	mov	r3, ip
2400c970:	4601      	mov	r1, r0
2400c972:	9400      	str	r4, [sp, #0]
2400c974:	4803      	ldr	r0, [pc, #12]	; (2400c984 <BSP_SD_ReadBlocks+0x20>)
2400c976:	f7fd fb0b 	bl	24009f90 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400c97a:	3800      	subs	r0, #0
2400c97c:	bf18      	it	ne
2400c97e:	2001      	movne	r0, #1
2400c980:	b002      	add	sp, #8
2400c982:	bd10      	pop	{r4, pc}
2400c984:	2001d188 	.word	0x2001d188

2400c988 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400c988:	b510      	push	{r4, lr}
2400c98a:	4694      	mov	ip, r2
2400c98c:	b082      	sub	sp, #8
2400c98e:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
2400c990:	460a      	mov	r2, r1
2400c992:	4663      	mov	r3, ip
2400c994:	4601      	mov	r1, r0
2400c996:	9400      	str	r4, [sp, #0]
2400c998:	4803      	ldr	r0, [pc, #12]	; (2400c9a8 <BSP_SD_WriteBlocks+0x20>)
2400c99a:	f7fd fbe9 	bl	2400a170 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400c99e:	3800      	subs	r0, #0
2400c9a0:	bf18      	it	ne
2400c9a2:	2001      	movne	r0, #1
2400c9a4:	b002      	add	sp, #8
2400c9a6:	bd10      	pop	{r4, pc}
2400c9a8:	2001d188 	.word	0x2001d188

2400c9ac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
2400c9ac:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
2400c9ae:	4803      	ldr	r0, [pc, #12]	; (2400c9bc <BSP_SD_GetCardState+0x10>)
2400c9b0:	f7fe f836 	bl	2400aa20 <HAL_SD_GetCardState>
}
2400c9b4:	3804      	subs	r0, #4
2400c9b6:	bf18      	it	ne
2400c9b8:	2001      	movne	r0, #1
2400c9ba:	bd08      	pop	{r3, pc}
2400c9bc:	2001d188 	.word	0x2001d188

2400c9c0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
2400c9c0:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
2400c9c2:	4801      	ldr	r0, [pc, #4]	; (2400c9c8 <BSP_SD_GetCardInfo+0x8>)
2400c9c4:	f7fd bee6 	b.w	2400a794 <HAL_SD_GetCardInfo>
2400c9c8:	2001d188 	.word	0x2001d188

2400c9cc <BSP_SD_Init>:
{
2400c9cc:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
2400c9ce:	f7f5 fc93 	bl	240022f8 <BSP_SD_IsDetected>
2400c9d2:	2801      	cmp	r0, #1
2400c9d4:	d001      	beq.n	2400c9da <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
2400c9d6:	2002      	movs	r0, #2
}
2400c9d8:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
2400c9da:	4807      	ldr	r0, [pc, #28]	; (2400c9f8 <BSP_SD_Init+0x2c>)
2400c9dc:	f7fd ffb8 	bl	2400a950 <HAL_SD_Init>
  if (sd_state == MSD_OK)
2400c9e0:	2800      	cmp	r0, #0
2400c9e2:	d1f9      	bne.n	2400c9d8 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
2400c9e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2400c9e8:	4803      	ldr	r0, [pc, #12]	; (2400c9f8 <BSP_SD_Init+0x2c>)
2400c9ea:	f7fd fee7 	bl	2400a7bc <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
2400c9ee:	3800      	subs	r0, #0
2400c9f0:	bf18      	it	ne
2400c9f2:	2001      	movne	r0, #1
}
2400c9f4:	bd08      	pop	{r3, pc}
2400c9f6:	bf00      	nop
2400c9f8:	2001d188 	.word	0x2001d188

2400c9fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
2400c9fc:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
2400c9fe:	4c0a      	ldr	r4, [pc, #40]	; (2400ca28 <SD_initialize+0x2c>)
2400ca00:	2501      	movs	r5, #1
2400ca02:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
2400ca04:	f7ff ffe2 	bl	2400c9cc <BSP_SD_Init>
2400ca08:	b108      	cbz	r0, 2400ca0e <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
2400ca0a:	7820      	ldrb	r0, [r4, #0]
}
2400ca0c:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
2400ca0e:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400ca10:	f7ff ffcc 	bl	2400c9ac <BSP_SD_GetCardState>
2400ca14:	b918      	cbnz	r0, 2400ca1e <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
2400ca16:	7823      	ldrb	r3, [r4, #0]
2400ca18:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400ca1c:	7023      	strb	r3, [r4, #0]
  return Stat;
2400ca1e:	7823      	ldrb	r3, [r4, #0]
2400ca20:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
2400ca22:	7023      	strb	r3, [r4, #0]
  return Stat;
2400ca24:	7820      	ldrb	r0, [r4, #0]
}
2400ca26:	bd38      	pop	{r3, r4, r5, pc}
2400ca28:	20000758 	.word	0x20000758

2400ca2c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
2400ca2c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
2400ca2e:	2301      	movs	r3, #1
2400ca30:	4c05      	ldr	r4, [pc, #20]	; (2400ca48 <SD_status+0x1c>)
2400ca32:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400ca34:	f7ff ffba 	bl	2400c9ac <BSP_SD_GetCardState>
2400ca38:	b918      	cbnz	r0, 2400ca42 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
2400ca3a:	7823      	ldrb	r3, [r4, #0]
2400ca3c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400ca40:	7023      	strb	r3, [r4, #0]
  return Stat;
2400ca42:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
2400ca44:	bd10      	pop	{r4, pc}
2400ca46:	bf00      	nop
2400ca48:	20000758 	.word	0x20000758

2400ca4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
2400ca4c:	b508      	push	{r3, lr}
2400ca4e:	4608      	mov	r0, r1
2400ca50:	4611      	mov	r1, r2
2400ca52:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
2400ca54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400ca58:	f7ff ff84 	bl	2400c964 <BSP_SD_ReadBlocks>
2400ca5c:	b108      	cbz	r0, 2400ca62 <SD_read+0x16>
  DRESULT res = RES_ERROR;
2400ca5e:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
2400ca60:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400ca62:	f7ff ffa3 	bl	2400c9ac <BSP_SD_GetCardState>
2400ca66:	2800      	cmp	r0, #0
2400ca68:	d0fa      	beq.n	2400ca60 <SD_read+0x14>
2400ca6a:	f7ff ff9f 	bl	2400c9ac <BSP_SD_GetCardState>
2400ca6e:	2800      	cmp	r0, #0
2400ca70:	d1f7      	bne.n	2400ca62 <SD_read+0x16>
2400ca72:	e7f5      	b.n	2400ca60 <SD_read+0x14>

2400ca74 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400ca74:	4b18      	ldr	r3, [pc, #96]	; (2400cad8 <SD_ioctl+0x64>)
{
2400ca76:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400ca78:	7818      	ldrb	r0, [r3, #0]
{
2400ca7a:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400ca7c:	f010 0401 	ands.w	r4, r0, #1
2400ca80:	d106      	bne.n	2400ca90 <SD_ioctl+0x1c>
2400ca82:	4615      	mov	r5, r2

  switch (cmd)
2400ca84:	2903      	cmp	r1, #3
2400ca86:	d824      	bhi.n	2400cad2 <SD_ioctl+0x5e>
2400ca88:	e8df f001 	tbb	[pc, r1]
2400ca8c:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400ca90:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
2400ca92:	4620      	mov	r0, r4
2400ca94:	b00b      	add	sp, #44	; 0x2c
2400ca96:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
2400ca98:	460c      	mov	r4, r1
}
2400ca9a:	4620      	mov	r0, r4
2400ca9c:	b00b      	add	sp, #44	; 0x2c
2400ca9e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400caa0:	a801      	add	r0, sp, #4
2400caa2:	f7ff ff8d 	bl	2400c9c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400caa6:	9b07      	ldr	r3, [sp, #28]
}
2400caa8:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400caaa:	602b      	str	r3, [r5, #0]
}
2400caac:	b00b      	add	sp, #44	; 0x2c
2400caae:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400cab0:	a801      	add	r0, sp, #4
2400cab2:	f7ff ff85 	bl	2400c9c0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
2400cab6:	9b08      	ldr	r3, [sp, #32]
}
2400cab8:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
2400caba:	802b      	strh	r3, [r5, #0]
}
2400cabc:	b00b      	add	sp, #44	; 0x2c
2400cabe:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400cac0:	a801      	add	r0, sp, #4
2400cac2:	f7ff ff7d 	bl	2400c9c0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400cac6:	9b08      	ldr	r3, [sp, #32]
}
2400cac8:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400caca:	0a5b      	lsrs	r3, r3, #9
2400cacc:	602b      	str	r3, [r5, #0]
}
2400cace:	b00b      	add	sp, #44	; 0x2c
2400cad0:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
2400cad2:	2404      	movs	r4, #4
2400cad4:	e7dd      	b.n	2400ca92 <SD_ioctl+0x1e>
2400cad6:	bf00      	nop
2400cad8:	20000758 	.word	0x20000758

2400cadc <SD_write>:
{
2400cadc:	b508      	push	{r3, lr}
2400cade:	4608      	mov	r0, r1
2400cae0:	4611      	mov	r1, r2
2400cae2:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
2400cae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400cae8:	f7ff ff4e 	bl	2400c988 <BSP_SD_WriteBlocks>
2400caec:	b108      	cbz	r0, 2400caf2 <SD_write+0x16>
  DRESULT res = RES_ERROR;
2400caee:	2001      	movs	r0, #1
}
2400caf0:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400caf2:	f7ff ff5b 	bl	2400c9ac <BSP_SD_GetCardState>
2400caf6:	2800      	cmp	r0, #0
2400caf8:	d0fa      	beq.n	2400caf0 <SD_write+0x14>
2400cafa:	f7ff ff57 	bl	2400c9ac <BSP_SD_GetCardState>
2400cafe:	2800      	cmp	r0, #0
2400cb00:	d1f7      	bne.n	2400caf2 <SD_write+0x16>
2400cb02:	e7f5      	b.n	2400caf0 <SD_write+0x14>

2400cb04 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
2400cb04:	4b03      	ldr	r3, [pc, #12]	; (2400cb14 <disk_status+0x10>)
2400cb06:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400cb0a:	4418      	add	r0, r3
2400cb0c:	6853      	ldr	r3, [r2, #4]
2400cb0e:	7a00      	ldrb	r0, [r0, #8]
2400cb10:	685b      	ldr	r3, [r3, #4]
2400cb12:	4718      	bx	r3
2400cb14:	2001dbb8 	.word	0x2001dbb8

2400cb18 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
2400cb18:	4b07      	ldr	r3, [pc, #28]	; (2400cb38 <disk_initialize+0x20>)
2400cb1a:	5c1a      	ldrb	r2, [r3, r0]
2400cb1c:	b952      	cbnz	r2, 2400cb34 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400cb1e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400cb22:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
2400cb24:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400cb28:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
2400cb2a:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400cb2e:	7a08      	ldrb	r0, [r1, #8]
2400cb30:	6813      	ldr	r3, [r2, #0]
2400cb32:	4718      	bx	r3
  }
  return stat;
}
2400cb34:	2000      	movs	r0, #0
2400cb36:	4770      	bx	lr
2400cb38:	2001dbb8 	.word	0x2001dbb8

2400cb3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
2400cb3c:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400cb3e:	4c06      	ldr	r4, [pc, #24]	; (2400cb58 <disk_read+0x1c>)
2400cb40:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
2400cb44:	4420      	add	r0, r4
2400cb46:	f8dc 4004 	ldr.w	r4, [ip, #4]
2400cb4a:	7a00      	ldrb	r0, [r0, #8]
2400cb4c:	68a4      	ldr	r4, [r4, #8]
2400cb4e:	46a4      	mov	ip, r4
  return res;
}
2400cb50:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400cb54:	4760      	bx	ip
2400cb56:	bf00      	nop
2400cb58:	2001dbb8 	.word	0x2001dbb8

2400cb5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
2400cb5c:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400cb5e:	4c06      	ldr	r4, [pc, #24]	; (2400cb78 <disk_write+0x1c>)
2400cb60:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
2400cb64:	4420      	add	r0, r4
2400cb66:	f8dc 4004 	ldr.w	r4, [ip, #4]
2400cb6a:	7a00      	ldrb	r0, [r0, #8]
2400cb6c:	68e4      	ldr	r4, [r4, #12]
2400cb6e:	46a4      	mov	ip, r4
  return res;
}
2400cb70:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400cb74:	4760      	bx	ip
2400cb76:	bf00      	nop
2400cb78:	2001dbb8 	.word	0x2001dbb8

2400cb7c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
2400cb7c:	4b04      	ldr	r3, [pc, #16]	; (2400cb90 <disk_ioctl+0x14>)
2400cb7e:	eb03 0c00 	add.w	ip, r3, r0
2400cb82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400cb86:	6843      	ldr	r3, [r0, #4]
2400cb88:	f89c 0008 	ldrb.w	r0, [ip, #8]
2400cb8c:	691b      	ldr	r3, [r3, #16]
2400cb8e:	4718      	bx	r3
2400cb90:	2001dbb8 	.word	0x2001dbb8

2400cb94 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
2400cb94:	4b2a      	ldr	r3, [pc, #168]	; (2400cc40 <inc_lock+0xac>)
{
2400cb96:	4684      	mov	ip, r0
2400cb98:	b470      	push	{r4, r5, r6}
		if (Files[i].fs == dp->obj.fs &&
2400cb9a:	681a      	ldr	r2, [r3, #0]
2400cb9c:	6804      	ldr	r4, [r0, #0]
2400cb9e:	4294      	cmp	r4, r2
2400cba0:	d01c      	beq.n	2400cbdc <inc_lock+0x48>
2400cba2:	6918      	ldr	r0, [r3, #16]
2400cba4:	42a0      	cmp	r0, r4
2400cba6:	d005      	beq.n	2400cbb4 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400cba8:	b372      	cbz	r2, 2400cc08 <inc_lock+0x74>
2400cbaa:	2800      	cmp	r0, #0
2400cbac:	d044      	beq.n	2400cc38 <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
2400cbae:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
2400cbb0:	bc70      	pop	{r4, r5, r6}
2400cbb2:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
2400cbb4:	695d      	ldr	r5, [r3, #20]
2400cbb6:	f8dc 6008 	ldr.w	r6, [ip, #8]
2400cbba:	42b5      	cmp	r5, r6
2400cbbc:	d1f4      	bne.n	2400cba8 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
2400cbbe:	f8dc 5014 	ldr.w	r5, [ip, #20]
2400cbc2:	699e      	ldr	r6, [r3, #24]
2400cbc4:	42ae      	cmp	r6, r5
2400cbc6:	d1ef      	bne.n	2400cba8 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400cbc8:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400cbca:	b999      	cbnz	r1, 2400cbf4 <inc_lock+0x60>
2400cbcc:	eb03 1402 	add.w	r4, r3, r2, lsl #4
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400cbd0:	1c50      	adds	r0, r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400cbd2:	0111      	lsls	r1, r2, #4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400cbd4:	89a2      	ldrh	r2, [r4, #12]
2400cbd6:	3201      	adds	r2, #1
2400cbd8:	b292      	uxth	r2, r2
2400cbda:	e029      	b.n	2400cc30 <inc_lock+0x9c>
		if (Files[i].fs == dp->obj.fs &&
2400cbdc:	6880      	ldr	r0, [r0, #8]
2400cbde:	685d      	ldr	r5, [r3, #4]
2400cbe0:	4285      	cmp	r5, r0
2400cbe2:	d1de      	bne.n	2400cba2 <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
2400cbe4:	f8dc 5014 	ldr.w	r5, [ip, #20]
2400cbe8:	6898      	ldr	r0, [r3, #8]
2400cbea:	4285      	cmp	r5, r0
2400cbec:	d1d9      	bne.n	2400cba2 <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400cbee:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400cbf0:	2900      	cmp	r1, #0
2400cbf2:	d0eb      	beq.n	2400cbcc <inc_lock+0x38>
2400cbf4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
2400cbf8:	0111      	lsls	r1, r2, #4
2400cbfa:	8980      	ldrh	r0, [r0, #12]
2400cbfc:	2800      	cmp	r0, #0
2400cbfe:	d1d6      	bne.n	2400cbae <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400cc00:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400cc02:	f44f 7280 	mov.w	r2, #256	; 0x100
2400cc06:	e013      	b.n	2400cc30 <inc_lock+0x9c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400cc08:	2001      	movs	r0, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400cc0a:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
2400cc0c:	ea4f 1102 	mov.w	r1, r2, lsl #4
2400cc10:	eb03 1202 	add.w	r2, r3, r2, lsl #4
2400cc14:	505c      	str	r4, [r3, r1]
		Files[i].clu = dp->obj.sclust;
2400cc16:	f8dc 4014 	ldr.w	r4, [ip, #20]
2400cc1a:	f8dc 5008 	ldr.w	r5, [ip, #8]
2400cc1e:	e9c2 5401 	strd	r5, r4, [r2, #4]
		Files[i].ctr = 0;
2400cc22:	f04f 0400 	mov.w	r4, #0
2400cc26:	8194      	strh	r4, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400cc28:	bf14      	ite	ne
2400cc2a:	f44f 7280 	movne.w	r2, #256	; 0x100
2400cc2e:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400cc30:	440b      	add	r3, r1
2400cc32:	819a      	strh	r2, [r3, #12]
}
2400cc34:	bc70      	pop	{r4, r5, r6}
2400cc36:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400cc38:	2002      	movs	r0, #2
2400cc3a:	2201      	movs	r2, #1
2400cc3c:	e7e5      	b.n	2400cc0a <inc_lock+0x76>
2400cc3e:	bf00      	nop
2400cc40:	2001d994 	.word	0x2001d994

2400cc44 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
2400cc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400cc48:	440a      	add	r2, r1
2400cc4a:	460d      	mov	r5, r1
2400cc4c:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400cc4e:	4f37      	ldr	r7, [pc, #220]	; (2400cd2c <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
2400cc50:	42aa      	cmp	r2, r5
2400cc52:	d012      	beq.n	2400cc7a <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cc54:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cc58:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400cc5c:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cc60:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cc64:	2919      	cmp	r1, #25
2400cc66:	d9f3      	bls.n	2400cc50 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400cc68:	2c7f      	cmp	r4, #127	; 0x7f
2400cc6a:	bf88      	it	hi
2400cc6c:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2400cc70:	2c00      	cmp	r4, #0
2400cc72:	d1ed      	bne.n	2400cc50 <pattern_matching+0xc>
2400cc74:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
2400cc76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
2400cc7a:	1e1f      	subs	r7, r3, #0
2400cc7c:	f896 8000 	ldrb.w	r8, [r6]
2400cc80:	bf18      	it	ne
2400cc82:	2701      	movne	r7, #1
2400cc84:	f1b8 0f00 	cmp.w	r8, #0
2400cc88:	d100      	bne.n	2400cc8c <pattern_matching+0x48>
2400cc8a:	bb8f      	cbnz	r7, 2400ccf0 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400cc8c:	4c27      	ldr	r4, [pc, #156]	; (2400cd2c <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400cc8e:	4630      	mov	r0, r6
{
2400cc90:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400cc92:	46a9      	mov	r9, r5
2400cc94:	e010      	b.n	2400ccb8 <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cc96:	3a20      	subs	r2, #32
2400cc98:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cc9a:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cc9e:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cca2:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400cca4:	f1bc 0f19 	cmp.w	ip, #25
2400cca8:	d815      	bhi.n	2400ccd6 <pattern_matching+0x92>
2400ccaa:	3b20      	subs	r3, #32
2400ccac:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400ccae:	4293      	cmp	r3, r2
2400ccb0:	d118      	bne.n	2400cce4 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400ccb2:	b1eb      	cbz	r3, 2400ccf0 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400ccb4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400ccb8:	2b3f      	cmp	r3, #63	; 0x3f
2400ccba:	d01c      	beq.n	2400ccf6 <pattern_matching+0xb2>
2400ccbc:	2b2a      	cmp	r3, #42	; 0x2a
2400ccbe:	d01a      	beq.n	2400ccf6 <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400ccc0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400ccc4:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400ccc6:	2919      	cmp	r1, #25
2400ccc8:	d9e5      	bls.n	2400cc96 <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400ccca:	2a7f      	cmp	r2, #127	; 0x7f
2400cccc:	d9e5      	bls.n	2400cc9a <pattern_matching+0x56>
2400ccce:	4423      	add	r3, r4
2400ccd0:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400ccd4:	e7e1      	b.n	2400cc9a <pattern_matching+0x56>
2400ccd6:	2b7f      	cmp	r3, #127	; 0x7f
2400ccd8:	d9e9      	bls.n	2400ccae <pattern_matching+0x6a>
2400ccda:	4421      	add	r1, r4
2400ccdc:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
2400cce0:	4293      	cmp	r3, r2
2400cce2:	d0e6      	beq.n	2400ccb2 <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400cce4:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2400cce6:	2b00      	cmp	r3, #0
2400cce8:	d0c4      	beq.n	2400cc74 <pattern_matching+0x30>
2400ccea:	2f00      	cmp	r7, #0
2400ccec:	d1cf      	bne.n	2400cc8e <pattern_matching+0x4a>
2400ccee:	e7c1      	b.n	2400cc74 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
2400ccf0:	2001      	movs	r0, #1
}
2400ccf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400ccf6:	4601      	mov	r1, r0
				nm = nx = 0;
2400ccf8:	2300      	movs	r3, #0
2400ccfa:	f811 cb01 	ldrb.w	ip, [r1], #1
2400ccfe:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400cd00:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400cd04:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
2400cd06:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400cd0a:	bf0c      	ite	eq
2400cd0c:	3201      	addeq	r2, #1
2400cd0e:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400cd10:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
2400cd14:	d0f4      	beq.n	2400cd00 <pattern_matching+0xbc>
2400cd16:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400cd1a:	d0f1      	beq.n	2400cd00 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400cd1c:	4649      	mov	r1, r9
2400cd1e:	f7ff ff91 	bl	2400cc44 <pattern_matching>
2400cd22:	2800      	cmp	r0, #0
2400cd24:	d1e4      	bne.n	2400ccf0 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
2400cd26:	f899 3000 	ldrb.w	r3, [r9]
2400cd2a:	e7db      	b.n	2400cce4 <pattern_matching+0xa0>
2400cd2c:	24017500 	.word	0x24017500

2400cd30 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
2400cd30:	2300      	movs	r3, #0
{
2400cd32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
2400cd36:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
2400cd3a:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
2400cd3c:	69c2      	ldr	r2, [r0, #28]
2400cd3e:	2a00      	cmp	r2, #0
2400cd40:	d063      	beq.n	2400ce0a <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2400cd42:	6b02      	ldr	r2, [r0, #48]	; 0x30
2400cd44:	4604      	mov	r4, r0
2400cd46:	460d      	mov	r5, r1
2400cd48:	3201      	adds	r2, #1
2400cd4a:	d01f      	beq.n	2400cd8c <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400cd4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
2400cd50:	8818      	ldrh	r0, [r3, #0]
2400cd52:	2800      	cmp	r0, #0
2400cd54:	d063      	beq.n	2400ce1e <get_fileinfo+0xee>
2400cd56:	f101 0715 	add.w	r7, r1, #21
2400cd5a:	2601      	movs	r6, #1
2400cd5c:	e000      	b.n	2400cd60 <get_fileinfo+0x30>
2400cd5e:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
2400cd60:	2100      	movs	r1, #0
2400cd62:	f002 fe35 	bl	2400f9d0 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400cd66:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2400cd68:	2800      	cmp	r0, #0
2400cd6a:	d058      	beq.n	2400ce1e <get_fileinfo+0xee>
2400cd6c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
2400cd70:	d055      	beq.n	2400ce1e <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
2400cd72:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400cd76:	f8d8 200c 	ldr.w	r2, [r8, #12]
2400cd7a:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
2400cd7e:	2800      	cmp	r0, #0
2400cd80:	d1ed      	bne.n	2400cd5e <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
2400cd82:	442e      	add	r6, r5
2400cd84:	2300      	movs	r3, #0
2400cd86:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400cd88:	7da8      	ldrb	r0, [r5, #22]
2400cd8a:	e000      	b.n	2400cd8e <get_fileinfo+0x5e>
2400cd8c:	4618      	mov	r0, r3
	i = j = 0;
2400cd8e:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
2400cd92:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
2400cd94:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
2400cd96:	6a21      	ldr	r1, [r4, #32]
2400cd98:	5c8b      	ldrb	r3, [r1, r2]
2400cd9a:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
2400cd9c:	2b20      	cmp	r3, #32
2400cd9e:	d01b      	beq.n	2400cdd8 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2400cda0:	2b05      	cmp	r3, #5
2400cda2:	bf08      	it	eq
2400cda4:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
2400cda6:	2a09      	cmp	r2, #9
2400cda8:	d031      	beq.n	2400ce0e <get_fileinfo+0xde>
		fno->altname[j] = c;
2400cdaa:	eb05 010c 	add.w	r1, r5, ip
2400cdae:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
2400cdb0:	b980      	cbnz	r0, 2400cdd4 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2400cdb2:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
2400cdb6:	2e19      	cmp	r6, #25
2400cdb8:	d80b      	bhi.n	2400cdd2 <get_fileinfo+0xa2>
2400cdba:	6a26      	ldr	r6, [r4, #32]
2400cdbc:	2a08      	cmp	r2, #8
2400cdbe:	f896 e00c 	ldrb.w	lr, [r6, #12]
2400cdc2:	bf8c      	ite	hi
2400cdc4:	2610      	movhi	r6, #16
2400cdc6:	2608      	movls	r6, #8
2400cdc8:	ea1e 0f06 	tst.w	lr, r6
2400cdcc:	d001      	beq.n	2400cdd2 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
2400cdce:	3320      	adds	r3, #32
2400cdd0:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
2400cdd2:	758b      	strb	r3, [r1, #22]
		j++;
2400cdd4:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
2400cdd8:	2a0b      	cmp	r2, #11
2400cdda:	d1dc      	bne.n	2400cd96 <get_fileinfo+0x66>
		fno->fname[j] = 0;
2400cddc:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
2400cde0:	b928      	cbnz	r0, 2400cdee <get_fileinfo+0xbe>
		fno->fname[j] = 0;
2400cde2:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
2400cde4:	6a23      	ldr	r3, [r4, #32]
2400cde6:	7b1b      	ldrb	r3, [r3, #12]
2400cde8:	2b00      	cmp	r3, #0
2400cdea:	bf08      	it	eq
2400cdec:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
2400cdee:	2300      	movs	r3, #0
2400cdf0:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
2400cdf2:	6a23      	ldr	r3, [r4, #32]
2400cdf4:	7adb      	ldrb	r3, [r3, #11]
2400cdf6:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
2400cdf8:	6a23      	ldr	r3, [r4, #32]
2400cdfa:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
2400cdfc:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
2400cdfe:	6a23      	ldr	r3, [r4, #32]
2400ce00:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
2400ce04:	0c1a      	lsrs	r2, r3, #16
2400ce06:	80eb      	strh	r3, [r5, #6]
2400ce08:	80aa      	strh	r2, [r5, #4]
}
2400ce0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
2400ce0e:	eb05 010c 	add.w	r1, r5, ip
2400ce12:	b900      	cbnz	r0, 2400ce16 <get_fileinfo+0xe6>
2400ce14:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
2400ce16:	f10c 0c01 	add.w	ip, ip, #1
2400ce1a:	724f      	strb	r7, [r1, #9]
2400ce1c:	e7c5      	b.n	2400cdaa <get_fileinfo+0x7a>
			i = j = 0;
2400ce1e:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
2400ce20:	2300      	movs	r3, #0
2400ce22:	442e      	add	r6, r5
2400ce24:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400ce26:	7da8      	ldrb	r0, [r5, #22]
2400ce28:	e7b1      	b.n	2400cd8e <get_fileinfo+0x5e>
2400ce2a:	bf00      	nop

2400ce2c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
2400ce2c:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400ce2e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
2400ce32:	2300      	movs	r3, #0
{
2400ce34:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ce36:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400ce38:	70c3      	strb	r3, [r0, #3]
2400ce3a:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ce3c:	d00c      	beq.n	2400ce58 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400ce3e:	460d      	mov	r5, r1
2400ce40:	460a      	mov	r2, r1
2400ce42:	2301      	movs	r3, #1
2400ce44:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400ce48:	7840      	ldrb	r0, [r0, #1]
2400ce4a:	f7ff fe77 	bl	2400cb3c <disk_read>
2400ce4e:	b110      	cbz	r0, 2400ce56 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2400ce50:	2004      	movs	r0, #4
			fs->winsect = sector;
2400ce52:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
2400ce54:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
2400ce56:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400ce58:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400ce5c:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
2400ce60:	429a      	cmp	r2, r3
2400ce62:	d11a      	bne.n	2400ce9a <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
2400ce64:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
2400ce68:	2be9      	cmp	r3, #233	; 0xe9
2400ce6a:	d007      	beq.n	2400ce7c <check_fs+0x50>
2400ce6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ce6e:	4a0d      	ldr	r2, [pc, #52]	; (2400cea4 <check_fs+0x78>)
2400ce70:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
2400ce74:	4293      	cmp	r3, r2
2400ce76:	d001      	beq.n	2400ce7c <check_fs+0x50>
	return 2;
2400ce78:	2002      	movs	r0, #2
}
2400ce7a:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
2400ce7c:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400ce80:	4a09      	ldr	r2, [pc, #36]	; (2400cea8 <check_fs+0x7c>)
2400ce82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2400ce86:	4293      	cmp	r3, r2
2400ce88:	d009      	beq.n	2400ce9e <check_fs+0x72>
	rv = rv << 8 | ptr[0];
2400ce8a:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400ce8e:	4b07      	ldr	r3, [pc, #28]	; (2400ceac <check_fs+0x80>)
2400ce90:	1ac0      	subs	r0, r0, r3
2400ce92:	bf18      	it	ne
2400ce94:	2001      	movne	r0, #1
2400ce96:	0040      	lsls	r0, r0, #1
}
2400ce98:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400ce9a:	2003      	movs	r0, #3
}
2400ce9c:	bd70      	pop	{r4, r5, r6, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400ce9e:	2000      	movs	r0, #0
}
2400cea0:	bd70      	pop	{r4, r5, r6, pc}
2400cea2:	bf00      	nop
2400cea4:	009000eb 	.word	0x009000eb
2400cea8:	00544146 	.word	0x00544146
2400ceac:	33544146 	.word	0x33544146

2400ceb0 <move_window>:
{
2400ceb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ceb2:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
2400ceb4:	b083      	sub	sp, #12
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ceb6:	428e      	cmp	r6, r1
2400ceb8:	d024      	beq.n	2400cf04 <move_window+0x54>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ceba:	78c3      	ldrb	r3, [r0, #3]
2400cebc:	460d      	mov	r5, r1
2400cebe:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400cec0:	f100 0134 	add.w	r1, r0, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400cec4:	b963      	cbnz	r3, 2400cee0 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400cec6:	2301      	movs	r3, #1
2400cec8:	462a      	mov	r2, r5
2400ceca:	7860      	ldrb	r0, [r4, #1]
2400cecc:	f7ff fe36 	bl	2400cb3c <disk_read>
2400ced0:	b910      	cbnz	r0, 2400ced8 <move_window+0x28>
			fs->winsect = sector;
2400ced2:	6325      	str	r5, [r4, #48]	; 0x30
}
2400ced4:	b003      	add	sp, #12
2400ced6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
2400ced8:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
2400ceda:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
2400cede:	e7f8      	b.n	2400ced2 <move_window+0x22>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400cee0:	2301      	movs	r3, #1
2400cee2:	4632      	mov	r2, r6
2400cee4:	7840      	ldrb	r0, [r0, #1]
2400cee6:	9101      	str	r1, [sp, #4]
2400cee8:	f7ff fe38 	bl	2400cb5c <disk_write>
2400ceec:	b9d0      	cbnz	r0, 2400cf24 <move_window+0x74>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400ceee:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400cef0:	69e3      	ldr	r3, [r4, #28]
2400cef2:	1ab2      	subs	r2, r6, r2
2400cef4:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
2400cef6:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400cef8:	429a      	cmp	r2, r3
2400cefa:	d2e4      	bcs.n	2400cec6 <move_window+0x16>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400cefc:	78a7      	ldrb	r7, [r4, #2]
2400cefe:	2f01      	cmp	r7, #1
2400cf00:	d804      	bhi.n	2400cf0c <move_window+0x5c>
2400cf02:	e7e0      	b.n	2400cec6 <move_window+0x16>
	FRESULT res = FR_OK;
2400cf04:	2000      	movs	r0, #0
}
2400cf06:	b003      	add	sp, #12
2400cf08:	bdf0      	pop	{r4, r5, r6, r7, pc}
					wsect += fs->fsize;
2400cf0a:	69e3      	ldr	r3, [r4, #28]
2400cf0c:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400cf0e:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400cf10:	2301      	movs	r3, #1
2400cf12:	7860      	ldrb	r0, [r4, #1]
2400cf14:	4632      	mov	r2, r6
2400cf16:	9101      	str	r1, [sp, #4]
2400cf18:	f7ff fe20 	bl	2400cb5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400cf1c:	2f01      	cmp	r7, #1
2400cf1e:	9901      	ldr	r1, [sp, #4]
2400cf20:	d1f3      	bne.n	2400cf0a <move_window+0x5a>
2400cf22:	e7d0      	b.n	2400cec6 <move_window+0x16>
			res = FR_DISK_ERR;
2400cf24:	2001      	movs	r0, #1
}
2400cf26:	b003      	add	sp, #12
2400cf28:	bdf0      	pop	{r4, r5, r6, r7, pc}
2400cf2a:	bf00      	nop

2400cf2c <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
2400cf2c:	2300      	movs	r3, #0
{
2400cf2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
2400cf32:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
2400cf34:	6804      	ldr	r4, [r0, #0]
2400cf36:	b18c      	cbz	r4, 2400cf5c <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400cf38:	7825      	ldrb	r5, [r4, #0]
2400cf3a:	2d1f      	cmp	r5, #31
2400cf3c:	d912      	bls.n	2400cf64 <find_volume+0x38>
2400cf3e:	2d3a      	cmp	r5, #58	; 0x3a
2400cf40:	d010      	beq.n	2400cf64 <find_volume+0x38>
2400cf42:	46a4      	mov	ip, r4
2400cf44:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
2400cf48:	2b1f      	cmp	r3, #31
2400cf4a:	d90d      	bls.n	2400cf68 <find_volume+0x3c>
2400cf4c:	2b3a      	cmp	r3, #58	; 0x3a
2400cf4e:	d1f9      	bne.n	2400cf44 <find_volume+0x18>
			i = *tp++ - '0';
2400cf50:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400cf52:	45a4      	cmp	ip, r4
2400cf54:	d102      	bne.n	2400cf5c <find_volume+0x30>
2400cf56:	2d30      	cmp	r5, #48	; 0x30
2400cf58:	f000 80da 	beq.w	2400d110 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
2400cf5c:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
2400cf5e:	4620      	mov	r0, r4
2400cf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400cf64:	462b      	mov	r3, r5
2400cf66:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400cf68:	2b3a      	cmp	r3, #58	; 0x3a
2400cf6a:	d0f1      	beq.n	2400cf50 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
2400cf6c:	4ba3      	ldr	r3, [pc, #652]	; (2400d1fc <find_volume+0x2d0>)
2400cf6e:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400cf70:	2d00      	cmp	r5, #0
2400cf72:	f000 80c9 	beq.w	2400d108 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
2400cf76:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
2400cf78:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
2400cf7c:	782b      	ldrb	r3, [r5, #0]
2400cf7e:	b17b      	cbz	r3, 2400cfa0 <find_volume+0x74>
		stat = disk_status(fs->drv);
2400cf80:	7868      	ldrb	r0, [r5, #1]
2400cf82:	f7ff fdbf 	bl	2400cb04 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2400cf86:	07c1      	lsls	r1, r0, #31
2400cf88:	d40a      	bmi.n	2400cfa0 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
2400cf8a:	2c00      	cmp	r4, #0
2400cf8c:	f000 80ab 	beq.w	2400d0e6 <find_volume+0x1ba>
2400cf90:	f010 0404 	ands.w	r4, r0, #4
2400cf94:	f000 80a7 	beq.w	2400d0e6 <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
2400cf98:	240a      	movs	r4, #10
}
2400cf9a:	4620      	mov	r0, r4
2400cf9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
2400cfa0:	2000      	movs	r0, #0
2400cfa2:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2400cfa4:	f7ff fdb8 	bl	2400cb18 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
2400cfa8:	07c2      	lsls	r2, r0, #31
2400cfaa:	f100 809f 	bmi.w	2400d0ec <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
2400cfae:	b10c      	cbz	r4, 2400cfb4 <find_volume+0x88>
2400cfb0:	0743      	lsls	r3, r0, #29
2400cfb2:	d4f1      	bmi.n	2400cf98 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
2400cfb4:	2100      	movs	r1, #0
2400cfb6:	4628      	mov	r0, r5
2400cfb8:	f7ff ff38 	bl	2400ce2c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
2400cfbc:	2802      	cmp	r0, #2
2400cfbe:	d077      	beq.n	2400d0b0 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400cfc0:	2804      	cmp	r0, #4
2400cfc2:	f000 809f 	beq.w	2400d104 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400cfc6:	2801      	cmp	r0, #1
2400cfc8:	f200 808c 	bhi.w	2400d0e4 <find_volume+0x1b8>
	bsect = 0;
2400cfcc:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
2400cfce:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
2400cfd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2400cfd6:	f040 8085 	bne.w	2400d0e4 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
2400cfda:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
2400cfde:	b902      	cbnz	r2, 2400cfe2 <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
2400cfe0:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400cfe2:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
2400cfe6:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400cfe8:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400cfea:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400cfec:	2901      	cmp	r1, #1
2400cfee:	d879      	bhi.n	2400d0e4 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
2400cff0:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
2400cff4:	b288      	uxth	r0, r1
2400cff6:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2400cff8:	2800      	cmp	r0, #0
2400cffa:	d073      	beq.n	2400d0e4 <find_volume+0x1b8>
2400cffc:	1e48      	subs	r0, r1, #1
2400cffe:	4208      	tst	r0, r1
2400d000:	d170      	bne.n	2400d0e4 <find_volume+0x1b8>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400d002:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400d006:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400d00a:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400d00e:	d169      	bne.n	2400d0e4 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
2400d010:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
2400d014:	b900      	cbnz	r0, 2400d018 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
2400d016:	6d68      	ldr	r0, [r5, #84]	; 0x54
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
2400d018:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
2400d01c:	2f00      	cmp	r7, #0
2400d01e:	d061      	beq.n	2400d0e4 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
2400d020:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
2400d024:	eb07 161c 	add.w	r6, r7, ip, lsr #4
2400d028:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
2400d02a:	42b0      	cmp	r0, r6
2400d02c:	d35a      	bcc.n	2400d0e4 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400d02e:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400d032:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400d034:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400d038:	d354      	bcc.n	2400d0e4 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
2400d03a:	f64f 71f5 	movw	r1, #65525	; 0xfff5
2400d03e:	4288      	cmp	r0, r1
2400d040:	f200 8084 	bhi.w	2400d14c <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
2400d044:	f640 71f5 	movw	r1, #4085	; 0xff5
2400d048:	4288      	cmp	r0, r1
2400d04a:	f200 80a3 	bhi.w	2400d194 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d04e:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d050:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d052:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400d054:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d056:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400d058:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d05a:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400d05c:	f1bc 0f00 	cmp.w	ip, #0
2400d060:	d040      	beq.n	2400d0e4 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d062:	eb00 0140 	add.w	r1, r0, r0, lsl #1
2400d066:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d06a:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d06c:	eb00 0151 	add.w	r1, r0, r1, lsr #1
2400d070:	2001      	movs	r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d072:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d076:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d078:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
2400d07c:	d332      	bcc.n	2400d0e4 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d07e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400d082:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d084:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
2400d088:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
2400d08a:	495d      	ldr	r1, [pc, #372]	; (2400d200 <find_volume+0x2d4>)
	fs->fs_type = fmt;		/* FAT sub-type */
2400d08c:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400d08e:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400d090:	485c      	ldr	r0, [pc, #368]	; (2400d204 <find_volume+0x2d8>)
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d092:	4a5d      	ldr	r2, [pc, #372]	; (2400d208 <find_volume+0x2dc>)
	fs->id = ++Fsid;		/* File system mount ID */
2400d094:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400d096:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d098:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400d09a:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d09c:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
2400d09e:	800b      	strh	r3, [r1, #0]
2400d0a0:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d0a2:	f000 8085 	beq.w	2400d1b0 <find_volume+0x284>
2400d0a6:	6913      	ldr	r3, [r2, #16]
2400d0a8:	429d      	cmp	r5, r3
2400d0aa:	d06f      	beq.n	2400d18c <find_volume+0x260>
	return FR_OK;
2400d0ac:	2400      	movs	r4, #0
2400d0ae:	e01a      	b.n	2400d0e6 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d0b0:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
2400d0b4:	b10e      	cbz	r6, 2400d0ba <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
2400d0b6:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d0ba:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
2400d0be:	b10c      	cbz	r4, 2400d0c4 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
2400d0c0:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d0c4:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
2400d0c8:	b303      	cbz	r3, 2400d10c <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
2400d0ca:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d0ce:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
2400d0d2:	b10f      	cbz	r7, 2400d0d8 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
2400d0d4:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d0d8:	b9f6      	cbnz	r6, 2400d118 <find_volume+0x1ec>
2400d0da:	bb2c      	cbnz	r4, 2400d128 <find_volume+0x1fc>
2400d0dc:	f1b8 0f00 	cmp.w	r8, #0
2400d0e0:	d12c      	bne.n	2400d13c <find_volume+0x210>
2400d0e2:	b93f      	cbnz	r7, 2400d0f4 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400d0e4:	240d      	movs	r4, #13
}
2400d0e6:	4620      	mov	r0, r4
2400d0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2400d0ec:	2403      	movs	r4, #3
}
2400d0ee:	4620      	mov	r0, r4
2400d0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d0f4:	4639      	mov	r1, r7
2400d0f6:	4628      	mov	r0, r5
2400d0f8:	f7ff fe98 	bl	2400ce2c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d0fc:	2801      	cmp	r0, #1
2400d0fe:	d95a      	bls.n	2400d1b6 <find_volume+0x28a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400d100:	2804      	cmp	r0, #4
2400d102:	d1ef      	bne.n	2400d0e4 <find_volume+0x1b8>
2400d104:	2401      	movs	r4, #1
2400d106:	e7ee      	b.n	2400d0e6 <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400d108:	240c      	movs	r4, #12
2400d10a:	e7ec      	b.n	2400d0e6 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d10c:	4698      	mov	r8, r3
2400d10e:	e7de      	b.n	2400d0ce <find_volume+0x1a2>
					*path = ++tt;
2400d110:	f10c 0301 	add.w	r3, ip, #1
2400d114:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
2400d116:	e729      	b.n	2400cf6c <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d118:	4631      	mov	r1, r6
2400d11a:	4628      	mov	r0, r5
2400d11c:	f7ff fe86 	bl	2400ce2c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d120:	2801      	cmp	r0, #1
2400d122:	d8da      	bhi.n	2400d0da <find_volume+0x1ae>
2400d124:	4634      	mov	r4, r6
2400d126:	e752      	b.n	2400cfce <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d128:	4621      	mov	r1, r4
2400d12a:	4628      	mov	r0, r5
2400d12c:	f7ff fe7e 	bl	2400ce2c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d130:	2801      	cmp	r0, #1
2400d132:	f67f af4c 	bls.w	2400cfce <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d136:	f1b8 0f00 	cmp.w	r8, #0
2400d13a:	d0d2      	beq.n	2400d0e2 <find_volume+0x1b6>
2400d13c:	4641      	mov	r1, r8
2400d13e:	4628      	mov	r0, r5
2400d140:	f7ff fe74 	bl	2400ce2c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d144:	2801      	cmp	r0, #1
2400d146:	d8cc      	bhi.n	2400d0e2 <find_volume+0x1b6>
2400d148:	4644      	mov	r4, r8
2400d14a:	e740      	b.n	2400cfce <find_volume+0xa2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400d14c:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d150:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d152:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d154:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400d156:	ea5c 0303 	orrs.w	r3, ip, r3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d15a:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d15c:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
2400d15e:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
2400d160:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400d162:	d1bf      	bne.n	2400d0e4 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
2400d164:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
2400d166:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d168:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
2400d16c:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d16e:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
2400d172:	d3b7      	bcc.n	2400d0e4 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d174:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400d17c:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d17e:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
2400d180:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d182:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d186:	d018      	beq.n	2400d1ba <find_volume+0x28e>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400d188:	2003      	movs	r0, #3
2400d18a:	e77e      	b.n	2400d08a <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d18c:	2300      	movs	r3, #0
	return FR_OK;
2400d18e:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d190:	6113      	str	r3, [r2, #16]
2400d192:	e7a8      	b.n	2400d0e6 <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d194:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d196:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d198:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400d19a:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d19c:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400d19e:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d1a0:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400d1a2:	f1bc 0f00 	cmp.w	ip, #0
2400d1a6:	d09d      	beq.n	2400d0e4 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d1a8:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d1aa:	0049      	lsls	r1, r1, #1
2400d1ac:	2002      	movs	r0, #2
2400d1ae:	e760      	b.n	2400d072 <find_volume+0x146>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d1b0:	2300      	movs	r3, #0
2400d1b2:	6013      	str	r3, [r2, #0]
2400d1b4:	e777      	b.n	2400d0a6 <find_volume+0x17a>
2400d1b6:	463c      	mov	r4, r7
2400d1b8:	e709      	b.n	2400cfce <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
2400d1ba:	1c61      	adds	r1, r4, #1
2400d1bc:	4628      	mov	r0, r5
2400d1be:	f7ff fe77 	bl	2400ceb0 <move_window>
2400d1c2:	2800      	cmp	r0, #0
2400d1c4:	d1e0      	bne.n	2400d188 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400d1c6:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400d1ca:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
2400d1ce:	7128      	strb	r0, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400d1d0:	429a      	cmp	r2, r3
2400d1d2:	d1d9      	bne.n	2400d188 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
2400d1d4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
2400d1d6:	4b0d      	ldr	r3, [pc, #52]	; (2400d20c <find_volume+0x2e0>)
2400d1d8:	429a      	cmp	r2, r3
2400d1da:	d1d5      	bne.n	2400d188 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400d1dc:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
2400d1e0:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400d1e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
2400d1e8:	3320      	adds	r3, #32
2400d1ea:	429a      	cmp	r2, r3
2400d1ec:	d1cc      	bne.n	2400d188 <find_volume+0x25c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400d1ee:	2003      	movs	r0, #3
2400d1f0:	e9d5 3287 	ldrd	r3, r2, [r5, #540]	; 0x21c
2400d1f4:	e9c5 2304 	strd	r2, r3, [r5, #16]
2400d1f8:	e747      	b.n	2400d08a <find_volume+0x15e>
2400d1fa:	bf00      	nop
2400d1fc:	2001d990 	.word	0x2001d990
2400d200:	2001d9b4 	.word	0x2001d9b4
2400d204:	2001d9b8 	.word	0x2001d9b8
2400d208:	2001d994 	.word	0x2001d994
2400d20c:	41615252 	.word	0x41615252

2400d210 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400d210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
2400d214:	7806      	ldrb	r6, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400d216:	4604      	mov	r4, r0
2400d218:	460d      	mov	r5, r1
2400d21a:	4690      	mov	r8, r2
		switch (fs->fs_type) {
2400d21c:	2e02      	cmp	r6, #2
2400d21e:	d007      	beq.n	2400d230 <put_fat.part.0+0x20>
2400d220:	2e03      	cmp	r6, #3
2400d222:	d041      	beq.n	2400d2a8 <put_fat.part.0+0x98>
2400d224:	2e01      	cmp	r6, #1
2400d226:	d01b      	beq.n	2400d260 <put_fat.part.0+0x50>
2400d228:	2702      	movs	r7, #2
}
2400d22a:	4638      	mov	r0, r7
2400d22c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400d230:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400d232:	eb01 2115 	add.w	r1, r1, r5, lsr #8
2400d236:	f7ff fe3b 	bl	2400ceb0 <move_window>
			if (res != FR_OK) break;
2400d23a:	4607      	mov	r7, r0
2400d23c:	2800      	cmp	r0, #0
2400d23e:	d1f4      	bne.n	2400d22a <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d240:	006d      	lsls	r5, r5, #1
2400d242:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
2400d246:	f3c8 2207 	ubfx	r2, r8, #8, #8
			fs->wflag = 1;
2400d24a:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d24c:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
}
2400d250:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val; val >>= 8;
2400d252:	f803 8005 	strb.w	r8, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d256:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
2400d258:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
2400d25a:	70e1      	strb	r1, [r4, #3]
}
2400d25c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d260:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400d262:	eb05 0955 	add.w	r9, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d266:	eb01 2159 	add.w	r1, r1, r9, lsr #9
2400d26a:	f7ff fe21 	bl	2400ceb0 <move_window>
			if (res != FR_OK) break;
2400d26e:	4607      	mov	r7, r0
2400d270:	2800      	cmp	r0, #0
2400d272:	d1da      	bne.n	2400d22a <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d274:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
2400d276:	f109 0b01 	add.w	fp, r9, #1
2400d27a:	f104 0a34 	add.w	sl, r4, #52	; 0x34
2400d27e:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d282:	d52a      	bpl.n	2400d2da <put_fat.part.0+0xca>
2400d284:	f81a 3009 	ldrb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d288:	4620      	mov	r0, r4
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d28a:	f003 030f 	and.w	r3, r3, #15
2400d28e:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
2400d292:	f80a 3009 	strb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d296:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400d298:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d29a:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400d29e:	f7ff fe07 	bl	2400ceb0 <move_window>
			if (res != FR_OK) break;
2400d2a2:	b3a0      	cbz	r0, 2400d30e <put_fat.part.0+0xfe>
2400d2a4:	4607      	mov	r7, r0
	return res;
2400d2a6:	e7c0      	b.n	2400d22a <put_fat.part.0+0x1a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400d2a8:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400d2aa:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
2400d2ae:	f7ff fdff 	bl	2400ceb0 <move_window>
			if (res != FR_OK) break;
2400d2b2:	4607      	mov	r7, r0
2400d2b4:	2800      	cmp	r0, #0
2400d2b6:	d1b8      	bne.n	2400d22a <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400d2b8:	00ad      	lsls	r5, r5, #2
2400d2ba:	f104 0134 	add.w	r1, r4, #52	; 0x34
2400d2be:	f028 4270 	bic.w	r2, r8, #4026531840	; 0xf0000000
			fs->wflag = 1;
2400d2c2:	2001      	movs	r0, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400d2c4:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400d2c8:	594b      	ldr	r3, [r1, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400d2ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400d2ce:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
2400d2d0:	514b      	str	r3, [r1, r5]
			fs->wflag = 1;
2400d2d2:	70e0      	strb	r0, [r4, #3]
}
2400d2d4:	4638      	mov	r0, r7
2400d2d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d2da:	f80a 8009 	strb.w	r8, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d2de:	4620      	mov	r0, r4
2400d2e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400d2e2:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d2e4:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400d2e8:	f7ff fde2 	bl	2400ceb0 <move_window>
			if (res != FR_OK) break;
2400d2ec:	2800      	cmp	r0, #0
2400d2ee:	d1d9      	bne.n	2400d2a4 <put_fat.part.0+0x94>
			p = fs->win + bc % SS(fs);
2400d2f0:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d2f4:	f3c8 2203 	ubfx	r2, r8, #8, #4
2400d2f8:	f81a 300b 	ldrb.w	r3, [sl, fp]
			p = fs->win + bc % SS(fs);
2400d2fc:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d2fe:	f023 030f 	bic.w	r3, r3, #15
2400d302:	4313      	orrs	r3, r2
			fs->wflag = 1;
2400d304:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d306:	f88a 3000 	strb.w	r3, [sl]
			fs->wflag = 1;
2400d30a:	70e2      	strb	r2, [r4, #3]
			break;
2400d30c:	e78d      	b.n	2400d22a <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400d30e:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d312:	f3c8 1307 	ubfx	r3, r8, #4, #8
			p = fs->win + bc % SS(fs);
2400d316:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d318:	e7f4      	b.n	2400d304 <put_fat.part.0+0xf4>
2400d31a:	bf00      	nop

2400d31c <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400d31c:	2901      	cmp	r1, #1
2400d31e:	d90e      	bls.n	2400d33e <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
2400d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400d322:	6983      	ldr	r3, [r0, #24]
2400d324:	460c      	mov	r4, r1
2400d326:	4605      	mov	r5, r0
2400d328:	4299      	cmp	r1, r3
2400d32a:	d206      	bcs.n	2400d33a <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
2400d32c:	7803      	ldrb	r3, [r0, #0]
2400d32e:	2b02      	cmp	r3, #2
2400d330:	d021      	beq.n	2400d376 <get_fat.isra.0+0x5a>
2400d332:	2b03      	cmp	r3, #3
2400d334:	d010      	beq.n	2400d358 <get_fat.isra.0+0x3c>
2400d336:	2b01      	cmp	r3, #1
2400d338:	d003      	beq.n	2400d342 <get_fat.isra.0+0x26>
2400d33a:	2001      	movs	r0, #1
}
2400d33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
2400d33e:	2001      	movs	r0, #1
}
2400d340:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d342:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400d344:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d348:	eb01 2157 	add.w	r1, r1, r7, lsr #9
2400d34c:	f7ff fdb0 	bl	2400ceb0 <move_window>
2400d350:	b1f0      	cbz	r0, 2400d390 <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
2400d352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
2400d356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400d358:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400d35a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400d35e:	f7ff fda7 	bl	2400ceb0 <move_window>
2400d362:	2800      	cmp	r0, #0
2400d364:	d1f5      	bne.n	2400d352 <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400d366:	00a4      	lsls	r4, r4, #2
2400d368:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400d36c:	4425      	add	r5, r4
2400d36e:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400d370:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
2400d374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400d376:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400d378:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400d37c:	f7ff fd98 	bl	2400ceb0 <move_window>
2400d380:	2800      	cmp	r0, #0
2400d382:	d1e6      	bne.n	2400d352 <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400d384:	0063      	lsls	r3, r4, #1
2400d386:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400d38a:	442b      	add	r3, r5
2400d38c:	8e98      	ldrh	r0, [r3, #52]	; 0x34
}
2400d38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
2400d390:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d394:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400d396:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d398:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
2400d39a:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d39c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400d3a0:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d3a4:	f7ff fd84 	bl	2400ceb0 <move_window>
2400d3a8:	2800      	cmp	r0, #0
2400d3aa:	d1d2      	bne.n	2400d352 <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
2400d3ac:	f3c7 0708 	ubfx	r7, r7, #0, #9
2400d3b0:	442f      	add	r7, r5
2400d3b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400d3b6:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400d3ba:	07e3      	lsls	r3, r4, #31
2400d3bc:	bf4c      	ite	mi
2400d3be:	0900      	lsrmi	r0, r0, #4
2400d3c0:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
2400d3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400d3c6:	bf00      	nop

2400d3c8 <dir_read.constprop.0>:
FRESULT dir_read (
2400d3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
2400d3cc:	69c6      	ldr	r6, [r0, #28]
FRESULT dir_read (
2400d3ce:	b083      	sub	sp, #12
2400d3d0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400d3d2:	f8d0 8000 	ldr.w	r8, [r0]
	while (dp->sect) {
2400d3d6:	2e00      	cmp	r6, #0
2400d3d8:	d061      	beq.n	2400d49e <dir_read.constprop.0+0xd6>
	BYTE ord = 0xFF, sum = 0xFF;
2400d3da:	f04f 0bff 	mov.w	fp, #255	; 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400d3de:	f108 0a34 	add.w	sl, r8, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
2400d3e2:	46d9      	mov	r9, fp
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d3e4:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400d3e8:	42b5      	cmp	r5, r6
2400d3ea:	d018      	beq.n	2400d41e <dir_read.constprop.0+0x56>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400d3ec:	f898 3003 	ldrb.w	r3, [r8, #3]
2400d3f0:	2b00      	cmp	r3, #0
2400d3f2:	f040 80c8 	bne.w	2400d586 <dir_read.constprop.0+0x1be>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400d3f6:	2301      	movs	r3, #1
2400d3f8:	4632      	mov	r2, r6
2400d3fa:	4651      	mov	r1, sl
2400d3fc:	f898 0001 	ldrb.w	r0, [r8, #1]
2400d400:	f7ff fb9c 	bl	2400cb3c <disk_read>
2400d404:	b148      	cbz	r0, 2400d41a <dir_read.constprop.0+0x52>
			fs->winsect = sector;
2400d406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400d40a:	2001      	movs	r0, #1
			fs->winsect = sector;
2400d40c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400d410:	2300      	movs	r3, #0
2400d412:	61e3      	str	r3, [r4, #28]
}
2400d414:	b003      	add	sp, #12
2400d416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400d41a:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
2400d41e:	6a21      	ldr	r1, [r4, #32]
2400d420:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
2400d422:	2a00      	cmp	r2, #0
2400d424:	d03b      	beq.n	2400d49e <dir_read.constprop.0+0xd6>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400d426:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400d428:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400d42a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400d42e:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400d430:	d005      	beq.n	2400d43e <dir_read.constprop.0+0x76>
2400d432:	2a2e      	cmp	r2, #46	; 0x2e
2400d434:	d003      	beq.n	2400d43e <dir_read.constprop.0+0x76>
2400d436:	f023 0020 	bic.w	r0, r3, #32
2400d43a:	2808      	cmp	r0, #8
2400d43c:	d136      	bne.n	2400d4ac <dir_read.constprop.0+0xe4>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d43e:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400d442:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
2400d444:	6827      	ldr	r7, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400d446:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400d448:	69e6      	ldr	r6, [r4, #28]
2400d44a:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400d44e:	d226      	bcs.n	2400d49e <dir_read.constprop.0+0xd6>
2400d450:	b32e      	cbz	r6, 2400d49e <dir_read.constprop.0+0xd6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400d452:	f3c5 0308 	ubfx	r3, r5, #0, #9
2400d456:	bb23      	cbnz	r3, 2400d4a2 <dir_read.constprop.0+0xda>
		dp->sect++;				/* Next sector */
2400d458:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400d45a:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400d45c:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400d45e:	b961      	cbnz	r1, 2400d47a <dir_read.constprop.0+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400d460:	893b      	ldrh	r3, [r7, #8]
2400d462:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400d466:	d91a      	bls.n	2400d49e <dir_read.constprop.0+0xd6>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d468:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400d46a:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d46c:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400d46e:	2e00      	cmp	r6, #0
2400d470:	d1b8      	bne.n	2400d3e4 <dir_read.constprop.0+0x1c>
		res = move_window(fs, dp->sect);
2400d472:	2000      	movs	r0, #0
}
2400d474:	b003      	add	sp, #12
2400d476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400d47a:	897b      	ldrh	r3, [r7, #10]
2400d47c:	3b01      	subs	r3, #1
2400d47e:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
2400d482:	d1f1      	bne.n	2400d468 <dir_read.constprop.0+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400d484:	4638      	mov	r0, r7
2400d486:	9301      	str	r3, [sp, #4]
2400d488:	f7ff ff48 	bl	2400d31c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400d48c:	2801      	cmp	r0, #1
2400d48e:	f240 80b2 	bls.w	2400d5f6 <dir_read.constprop.0+0x22e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400d492:	1c43      	adds	r3, r0, #1
2400d494:	d07f      	beq.n	2400d596 <dir_read.constprop.0+0x1ce>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400d496:	69ba      	ldr	r2, [r7, #24]
2400d498:	4290      	cmp	r0, r2
2400d49a:	f0c0 809f 	bcc.w	2400d5dc <dir_read.constprop.0+0x214>
	FRESULT res = FR_NO_FILE;
2400d49e:	2004      	movs	r0, #4
2400d4a0:	e7b6      	b.n	2400d410 <dir_read.constprop.0+0x48>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d4a2:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400d4a4:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d4a6:	441f      	add	r7, r3
2400d4a8:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400d4aa:	e79b      	b.n	2400d3e4 <dir_read.constprop.0+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
2400d4ac:	2b0f      	cmp	r3, #15
2400d4ae:	f040 80a9 	bne.w	2400d604 <dir_read.constprop.0+0x23c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2400d4b2:	0650      	lsls	r0, r2, #25
2400d4b4:	d571      	bpl.n	2400d59a <dir_read.constprop.0+0x1d2>
						dp->blk_ofs = dp->dptr;
2400d4b6:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;
2400d4b8:	f002 09bf 	and.w	r9, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400d4bc:	f891 b00d 	ldrb.w	fp, [r1, #13]
						dp->blk_ofs = dp->dptr;
2400d4c0:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d4c2:	7b4b      	ldrb	r3, [r1, #13]
2400d4c4:	455b      	cmp	r3, fp
2400d4c6:	d1ba      	bne.n	2400d43e <dir_read.constprop.0+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
2400d4c8:	8b4b      	ldrh	r3, [r1, #26]
2400d4ca:	2b00      	cmp	r3, #0
2400d4cc:	d1b7      	bne.n	2400d43e <dir_read.constprop.0+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
2400d4ce:	780b      	ldrb	r3, [r1, #0]
2400d4d0:	f8b1 0001 	ldrh.w	r0, [r1, #1]
2400d4d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400d4d8:	3b01      	subs	r3, #1
2400d4da:	eb03 0243 	add.w	r2, r3, r3, lsl #1
2400d4de:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d4e2:	2bfe      	cmp	r3, #254	; 0xfe
2400d4e4:	d8ab      	bhi.n	2400d43e <dir_read.constprop.0+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d4e6:	f8d8 500c 	ldr.w	r5, [r8, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d4ea:	1c5a      	adds	r2, r3, #1
2400d4ec:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
2400d4f0:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
2400d4f4:	2800      	cmp	r0, #0
2400d4f6:	f040 808e 	bne.w	2400d616 <dir_read.constprop.0+0x24e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d4fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d4fe:	429e      	cmp	r6, r3
2400d500:	d19d      	bne.n	2400d43e <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400d502:	f8b1 c005 	ldrh.w	ip, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d506:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d50a:	459c      	cmp	ip, r3
2400d50c:	d197      	bne.n	2400d43e <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400d50e:	f8b1 7007 	ldrh.w	r7, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d512:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d516:	429f      	cmp	r7, r3
2400d518:	d191      	bne.n	2400d43e <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400d51a:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d51e:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d522:	429e      	cmp	r6, r3
2400d524:	d18b      	bne.n	2400d43e <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400d526:	89cf      	ldrh	r7, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d528:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d52c:	429f      	cmp	r7, r3
2400d52e:	d186      	bne.n	2400d43e <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400d530:	f8b1 c010 	ldrh.w	ip, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d534:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d538:	459c      	cmp	ip, r3
2400d53a:	d180      	bne.n	2400d43e <dir_read.constprop.0+0x76>
	rv = rv << 8 | ptr[0];
2400d53c:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d53e:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d542:	429e      	cmp	r6, r3
2400d544:	f47f af7b 	bne.w	2400d43e <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400d548:	8a8f      	ldrh	r7, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d54a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d54e:	429f      	cmp	r7, r3
2400d550:	f47f af75 	bne.w	2400d43e <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400d554:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d556:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d55a:	429e      	cmp	r6, r3
2400d55c:	f47f af6f 	bne.w	2400d43e <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400d560:	8b0f      	ldrh	r7, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d562:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d566:	429f      	cmp	r7, r3
2400d568:	f47f af69 	bne.w	2400d43e <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400d56c:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d56e:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d572:	429e      	cmp	r6, r3
2400d574:	f47f af63 	bne.w	2400d43e <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400d578:	8bcf      	ldrh	r7, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400d57a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400d57e:	429f      	cmp	r7, r3
2400d580:	f000 80bd 	beq.w	2400d6fe <dir_read.constprop.0+0x336>
2400d584:	e75b      	b.n	2400d43e <dir_read.constprop.0+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400d586:	2301      	movs	r3, #1
2400d588:	462a      	mov	r2, r5
2400d58a:	4651      	mov	r1, sl
2400d58c:	f898 0001 	ldrb.w	r0, [r8, #1]
2400d590:	f7ff fae4 	bl	2400cb5c <disk_write>
2400d594:	b128      	cbz	r0, 2400d5a2 <dir_read.constprop.0+0x1da>
	FRESULT res = FR_NO_FILE;
2400d596:	2001      	movs	r0, #1
2400d598:	e73a      	b.n	2400d410 <dir_read.constprop.0+0x48>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d59a:	454a      	cmp	r2, r9
2400d59c:	f47f af4f 	bne.w	2400d43e <dir_read.constprop.0+0x76>
2400d5a0:	e78f      	b.n	2400d4c2 <dir_read.constprop.0+0xfa>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d5a2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400d5a6:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d5aa:	1aea      	subs	r2, r5, r3
2400d5ac:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400d5b0:	429a      	cmp	r2, r3
2400d5b2:	f4bf af20 	bcs.w	2400d3f6 <dir_read.constprop.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d5b6:	f898 7002 	ldrb.w	r7, [r8, #2]
2400d5ba:	2f01      	cmp	r7, #1
2400d5bc:	d802      	bhi.n	2400d5c4 <dir_read.constprop.0+0x1fc>
2400d5be:	e71a      	b.n	2400d3f6 <dir_read.constprop.0+0x2e>
					wsect += fs->fsize;
2400d5c0:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400d5c4:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d5c6:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400d5c8:	2301      	movs	r3, #1
2400d5ca:	4651      	mov	r1, sl
2400d5cc:	462a      	mov	r2, r5
2400d5ce:	f898 0001 	ldrb.w	r0, [r8, #1]
2400d5d2:	f7ff fac3 	bl	2400cb5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d5d6:	2f01      	cmp	r7, #1
2400d5d8:	d1f2      	bne.n	2400d5c0 <dir_read.constprop.0+0x1f8>
2400d5da:	e70c      	b.n	2400d3f6 <dir_read.constprop.0+0x2e>
				dp->clust = clst;		/* Initialize data for new cluster */
2400d5dc:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400d5de:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400d5e0:	69ba      	ldr	r2, [r7, #24]
2400d5e2:	9b01      	ldr	r3, [sp, #4]
2400d5e4:	3a02      	subs	r2, #2
2400d5e6:	4290      	cmp	r0, r2
2400d5e8:	d207      	bcs.n	2400d5fa <dir_read.constprop.0+0x232>
	return clst * fs->csize + fs->database;
2400d5ea:	897b      	ldrh	r3, [r7, #10]
2400d5ec:	6afe      	ldr	r6, [r7, #44]	; 0x2c
2400d5ee:	fb00 6603 	mla	r6, r0, r3, r6
				dp->sect = clust2sect(fs, clst);
2400d5f2:	61e6      	str	r6, [r4, #28]
2400d5f4:	e738      	b.n	2400d468 <dir_read.constprop.0+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400d5f6:	2002      	movs	r0, #2
2400d5f8:	e70a      	b.n	2400d410 <dir_read.constprop.0+0x48>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d5fa:	3734      	adds	r7, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
2400d5fc:	61e3      	str	r3, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
2400d5fe:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400d600:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400d602:	e736      	b.n	2400d472 <dir_read.constprop.0+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400d604:	f1b9 0f00 	cmp.w	r9, #0
2400d608:	f000 8086 	beq.w	2400d718 <dir_read.constprop.0+0x350>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400d60c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400d610:	2000      	movs	r0, #0
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400d612:	6323      	str	r3, [r4, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400d614:	e6fe      	b.n	2400d414 <dir_read.constprop.0+0x4c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d616:	2aff      	cmp	r2, #255	; 0xff
2400d618:	f000 80c8 	beq.w	2400d7ac <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d61c:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
2400d620:	0050      	lsls	r0, r2, #1
2400d622:	f8b1 c005 	ldrh.w	ip, [r1, #5]
2400d626:	1c9a      	adds	r2, r3, #2
		if (wc) {
2400d628:	2e00      	cmp	r6, #0
2400d62a:	f43f af6c 	beq.w	2400d506 <dir_read.constprop.0+0x13e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d62e:	2aff      	cmp	r2, #255	; 0xff
2400d630:	f000 80bc 	beq.w	2400d7ac <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d634:	4428      	add	r0, r5
2400d636:	1cda      	adds	r2, r3, #3
2400d638:	f8a0 c002 	strh.w	ip, [r0, #2]
2400d63c:	f8b1 7007 	ldrh.w	r7, [r1, #7]
		if (wc) {
2400d640:	f1bc 0f00 	cmp.w	ip, #0
2400d644:	f43f af65 	beq.w	2400d512 <dir_read.constprop.0+0x14a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d648:	2aff      	cmp	r2, #255	; 0xff
2400d64a:	f000 80af 	beq.w	2400d7ac <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d64e:	8087      	strh	r7, [r0, #4]
2400d650:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
2400d652:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
2400d656:	2f00      	cmp	r7, #0
2400d658:	f43f af61 	beq.w	2400d51e <dir_read.constprop.0+0x156>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d65c:	2aff      	cmp	r2, #255	; 0xff
2400d65e:	f000 80a5 	beq.w	2400d7ac <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d662:	80c6      	strh	r6, [r0, #6]
2400d664:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
2400d666:	89cf      	ldrh	r7, [r1, #14]
		if (wc) {
2400d668:	2e00      	cmp	r6, #0
2400d66a:	f43f af5d 	beq.w	2400d528 <dir_read.constprop.0+0x160>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d66e:	2aff      	cmp	r2, #255	; 0xff
2400d670:	f000 809c 	beq.w	2400d7ac <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d674:	8107      	strh	r7, [r0, #8]
2400d676:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
2400d678:	f8b1 c010 	ldrh.w	ip, [r1, #16]
		if (wc) {
2400d67c:	2f00      	cmp	r7, #0
2400d67e:	f43f af59 	beq.w	2400d534 <dir_read.constprop.0+0x16c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d682:	2aff      	cmp	r2, #255	; 0xff
2400d684:	f000 8092 	beq.w	2400d7ac <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d688:	f8a0 c00a 	strh.w	ip, [r0, #10]
2400d68c:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
2400d68e:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
2400d690:	f1bc 0f00 	cmp.w	ip, #0
2400d694:	f43f af53 	beq.w	2400d53e <dir_read.constprop.0+0x176>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d698:	2aff      	cmp	r2, #255	; 0xff
2400d69a:	f000 8087 	beq.w	2400d7ac <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d69e:	8186      	strh	r6, [r0, #12]
2400d6a0:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
2400d6a4:	8a8f      	ldrh	r7, [r1, #20]
		if (wc) {
2400d6a6:	2e00      	cmp	r6, #0
2400d6a8:	f43f af4f 	beq.w	2400d54a <dir_read.constprop.0+0x182>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d6ac:	2aff      	cmp	r2, #255	; 0xff
2400d6ae:	d07d      	beq.n	2400d7ac <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d6b0:	81c7      	strh	r7, [r0, #14]
2400d6b2:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
2400d6b6:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
2400d6b8:	2f00      	cmp	r7, #0
2400d6ba:	f43f af4c 	beq.w	2400d556 <dir_read.constprop.0+0x18e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d6be:	2aff      	cmp	r2, #255	; 0xff
2400d6c0:	d074      	beq.n	2400d7ac <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d6c2:	8206      	strh	r6, [r0, #16]
2400d6c4:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
2400d6c8:	8b0f      	ldrh	r7, [r1, #24]
		if (wc) {
2400d6ca:	2e00      	cmp	r6, #0
2400d6cc:	f43f af49 	beq.w	2400d562 <dir_read.constprop.0+0x19a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d6d0:	2aff      	cmp	r2, #255	; 0xff
2400d6d2:	d06b      	beq.n	2400d7ac <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d6d4:	8247      	strh	r7, [r0, #18]
2400d6d6:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
2400d6da:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
2400d6dc:	2f00      	cmp	r7, #0
2400d6de:	f43f af46 	beq.w	2400d56e <dir_read.constprop.0+0x1a6>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d6e2:	2aff      	cmp	r2, #255	; 0xff
2400d6e4:	d062      	beq.n	2400d7ac <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d6e6:	8286      	strh	r6, [r0, #20]
2400d6e8:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
2400d6ec:	8bcf      	ldrh	r7, [r1, #30]
		if (wc) {
2400d6ee:	2e00      	cmp	r6, #0
2400d6f0:	f43f af43 	beq.w	2400d57a <dir_read.constprop.0+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400d6f4:	2aff      	cmp	r2, #255	; 0xff
2400d6f6:	d059      	beq.n	2400d7ac <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400d6f8:	f103 020d 	add.w	r2, r3, #13
2400d6fc:	82c7      	strh	r7, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
2400d6fe:	780b      	ldrb	r3, [r1, #0]
2400d700:	0659      	lsls	r1, r3, #25
2400d702:	d504      	bpl.n	2400d70e <dir_read.constprop.0+0x346>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
2400d704:	2aff      	cmp	r2, #255	; 0xff
2400d706:	d051      	beq.n	2400d7ac <dir_read.constprop.0+0x3e4>
		lfnbuf[i] = 0;
2400d708:	2300      	movs	r3, #0
2400d70a:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d70e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
2400d712:	fa5f f989 	uxtb.w	r9, r9
2400d716:	e694      	b.n	2400d442 <dir_read.constprop.0+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400d718:	780b      	ldrb	r3, [r1, #0]
2400d71a:	01da      	lsls	r2, r3, #7
2400d71c:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
2400d720:	784b      	ldrb	r3, [r1, #1]
2400d722:	441a      	add	r2, r3
2400d724:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d728:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d72c:	788a      	ldrb	r2, [r1, #2]
2400d72e:	fa52 f383 	uxtab	r3, r2, r3
2400d732:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400d736:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400d73a:	78cb      	ldrb	r3, [r1, #3]
2400d73c:	fa53 f282 	uxtab	r2, r3, r2
2400d740:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d744:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d748:	790a      	ldrb	r2, [r1, #4]
2400d74a:	fa52 f383 	uxtab	r3, r2, r3
2400d74e:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400d752:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400d756:	794b      	ldrb	r3, [r1, #5]
2400d758:	fa53 f282 	uxtab	r2, r3, r2
2400d75c:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d760:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d764:	798a      	ldrb	r2, [r1, #6]
2400d766:	fa52 f383 	uxtab	r3, r2, r3
2400d76a:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400d76e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400d772:	79cb      	ldrb	r3, [r1, #7]
2400d774:	fa53 f282 	uxtab	r2, r3, r2
2400d778:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d77c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d780:	7a0a      	ldrb	r2, [r1, #8]
2400d782:	fa52 f383 	uxtab	r3, r2, r3
2400d786:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400d78a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400d78e:	7a4b      	ldrb	r3, [r1, #9]
2400d790:	7a89      	ldrb	r1, [r1, #10]
2400d792:	fa53 f282 	uxtab	r2, r3, r2
2400d796:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400d79a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400d79e:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400d7a2:	b2db      	uxtb	r3, r3
2400d7a4:	455b      	cmp	r3, fp
2400d7a6:	f47f af31 	bne.w	2400d60c <dir_read.constprop.0+0x244>
2400d7aa:	e662      	b.n	2400d472 <dir_read.constprop.0+0xaa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400d7ac:	4691      	mov	r9, r2
2400d7ae:	e648      	b.n	2400d442 <dir_read.constprop.0+0x7a>

2400d7b0 <sync_fs>:
{
2400d7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400d7b2:	78c3      	ldrb	r3, [r0, #3]
{
2400d7b4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400d7b6:	b95b      	cbnz	r3, 2400d7d0 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400d7b8:	7823      	ldrb	r3, [r4, #0]
2400d7ba:	2b03      	cmp	r3, #3
2400d7bc:	d029      	beq.n	2400d812 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
2400d7be:	2200      	movs	r2, #0
2400d7c0:	7860      	ldrb	r0, [r4, #1]
2400d7c2:	4611      	mov	r1, r2
2400d7c4:	f7ff f9da 	bl	2400cb7c <disk_ioctl>
			res = FR_DISK_ERR;
2400d7c8:	3800      	subs	r0, #0
2400d7ca:	bf18      	it	ne
2400d7cc:	2001      	movne	r0, #1
}
2400d7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
2400d7d0:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400d7d2:	f100 0734 	add.w	r7, r0, #52	; 0x34
2400d7d6:	2301      	movs	r3, #1
2400d7d8:	7840      	ldrb	r0, [r0, #1]
2400d7da:	462a      	mov	r2, r5
2400d7dc:	4639      	mov	r1, r7
2400d7de:	f7ff f9bd 	bl	2400cb5c <disk_write>
2400d7e2:	2800      	cmp	r0, #0
2400d7e4:	d13e      	bne.n	2400d864 <sync_fs+0xb4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d7e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400d7e8:	69e3      	ldr	r3, [r4, #28]
2400d7ea:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
2400d7ec:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d7ee:	429a      	cmp	r2, r3
2400d7f0:	d2e2      	bcs.n	2400d7b8 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d7f2:	78a6      	ldrb	r6, [r4, #2]
2400d7f4:	2e01      	cmp	r6, #1
2400d7f6:	d801      	bhi.n	2400d7fc <sync_fs+0x4c>
2400d7f8:	e7de      	b.n	2400d7b8 <sync_fs+0x8>
					wsect += fs->fsize;
2400d7fa:	69e3      	ldr	r3, [r4, #28]
2400d7fc:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d7fe:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400d800:	2301      	movs	r3, #1
2400d802:	4639      	mov	r1, r7
2400d804:	462a      	mov	r2, r5
2400d806:	7860      	ldrb	r0, [r4, #1]
2400d808:	f7ff f9a8 	bl	2400cb5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d80c:	2e01      	cmp	r6, #1
2400d80e:	d1f4      	bne.n	2400d7fa <sync_fs+0x4a>
2400d810:	e7d2      	b.n	2400d7b8 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400d812:	7925      	ldrb	r5, [r4, #4]
2400d814:	2d01      	cmp	r5, #1
2400d816:	d1d2      	bne.n	2400d7be <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
2400d818:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400d81c:	f44f 7200 	mov.w	r2, #512	; 0x200
2400d820:	2100      	movs	r1, #0
2400d822:	4630      	mov	r0, r6
2400d824:	f007 faea 	bl	24014dfc <memset>
	*ptr++ = (BYTE)val; val >>= 8;
2400d828:	480f      	ldr	r0, [pc, #60]	; (2400d868 <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
2400d82a:	f64a 2355 	movw	r3, #43605	; 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
2400d82e:	6360      	str	r0, [r4, #52]	; 0x34
2400d830:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
2400d834:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400d838:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400d83a:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
2400d83e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
2400d842:	3020      	adds	r0, #32
2400d844:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
			fs->winsect = fs->volbase + 1;
2400d848:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
2400d84a:	f8c4 1220 	str.w	r1, [r4, #544]	; 0x220
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400d84e:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
2400d850:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400d852:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400d856:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
2400d858:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400d85a:	f7ff f97f 	bl	2400cb5c <disk_write>
			fs->fsi_flag = 0;
2400d85e:	2300      	movs	r3, #0
2400d860:	7123      	strb	r3, [r4, #4]
2400d862:	e7ac      	b.n	2400d7be <sync_fs+0xe>
			res = FR_DISK_ERR;
2400d864:	2001      	movs	r0, #1
}
2400d866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400d868:	41615252 	.word	0x41615252

2400d86c <create_chain>:
{
2400d86c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400d870:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
2400d872:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
2400d874:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
2400d878:	2900      	cmp	r1, #0
2400d87a:	f040 80a7 	bne.w	2400d9cc <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
2400d87e:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400d882:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400d886:	b9c6      	cbnz	r6, 2400d8ba <create_chain+0x4e>
2400d888:	2601      	movs	r6, #1
2400d88a:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
2400d88c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400d88e:	429c      	cmp	r4, r3
2400d890:	d317      	bcc.n	2400d8c2 <create_chain+0x56>
				if (ncl > scl) return 0;	/* No free cluster */
2400d892:	2e01      	cmp	r6, #1
2400d894:	f000 8096 	beq.w	2400d9c4 <create_chain+0x158>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
2400d898:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
2400d89c:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400d89e:	69ab      	ldr	r3, [r5, #24]
2400d8a0:	42a3      	cmp	r3, r4
2400d8a2:	d906      	bls.n	2400d8b2 <create_chain+0x46>
		switch (fs->fs_type) {
2400d8a4:	782b      	ldrb	r3, [r5, #0]
2400d8a6:	2b02      	cmp	r3, #2
2400d8a8:	d07e      	beq.n	2400d9a8 <create_chain+0x13c>
2400d8aa:	2b03      	cmp	r3, #3
2400d8ac:	d064      	beq.n	2400d978 <create_chain+0x10c>
2400d8ae:	2b01      	cmp	r3, #1
2400d8b0:	d00c      	beq.n	2400d8cc <create_chain+0x60>
2400d8b2:	2401      	movs	r4, #1
}
2400d8b4:	4620      	mov	r0, r4
2400d8b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400d8ba:	42b3      	cmp	r3, r6
2400d8bc:	bf98      	it	ls
2400d8be:	2601      	movls	r6, #1
2400d8c0:	e7e3      	b.n	2400d88a <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400d8c2:	2c01      	cmp	r4, #1
2400d8c4:	f8d9 5000 	ldr.w	r5, [r9]
2400d8c8:	d9f3      	bls.n	2400d8b2 <create_chain+0x46>
2400d8ca:	e7e8      	b.n	2400d89e <create_chain+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d8cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400d8ce:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d8d2:	4628      	mov	r0, r5
2400d8d4:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400d8d8:	f7ff faea 	bl	2400ceb0 <move_window>
2400d8dc:	2800      	cmp	r0, #0
2400d8de:	d146      	bne.n	2400d96e <create_chain+0x102>
			wc = fs->win[bc++ % SS(fs)];
2400d8e0:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d8e4:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400d8e6:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d8ea:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
2400d8ec:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d8ee:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400d8f2:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d8f6:	f7ff fadb 	bl	2400ceb0 <move_window>
2400d8fa:	bbc0      	cbnz	r0, 2400d96e <create_chain+0x102>
			wc |= fs->win[bc % SS(fs)] << 8;
2400d8fc:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400d900:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400d902:	44ab      	add	fp, r5
2400d904:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
2400d908:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400d90c:	bf4c      	ite	mi
2400d90e:	091b      	lsrmi	r3, r3, #4
2400d910:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
2400d914:	2b00      	cmp	r3, #0
2400d916:	d140      	bne.n	2400d99a <create_chain+0x12e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400d918:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400d91c:	42a3      	cmp	r3, r4
2400d91e:	d9c8      	bls.n	2400d8b2 <create_chain+0x46>
2400d920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400d924:	4621      	mov	r1, r4
2400d926:	4640      	mov	r0, r8
2400d928:	f7ff fc72 	bl	2400d210 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
2400d92c:	b958      	cbnz	r0, 2400d946 <create_chain+0xda>
2400d92e:	b157      	cbz	r7, 2400d946 <create_chain+0xda>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400d930:	2f01      	cmp	r7, #1
2400d932:	d0be      	beq.n	2400d8b2 <create_chain+0x46>
2400d934:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400d938:	429f      	cmp	r7, r3
2400d93a:	d2ba      	bcs.n	2400d8b2 <create_chain+0x46>
2400d93c:	4622      	mov	r2, r4
2400d93e:	4639      	mov	r1, r7
2400d940:	4640      	mov	r0, r8
2400d942:	f7ff fc65 	bl	2400d210 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
2400d946:	b980      	cbnz	r0, 2400d96a <create_chain+0xfe>
		fs->last_clst = ncl;
2400d948:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
2400d94c:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
2400d950:	3b02      	subs	r3, #2
2400d952:	429a      	cmp	r2, r3
2400d954:	d802      	bhi.n	2400d95c <create_chain+0xf0>
2400d956:	3a01      	subs	r2, #1
2400d958:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
2400d95c:	f898 3004 	ldrb.w	r3, [r8, #4]
2400d960:	f043 0301 	orr.w	r3, r3, #1
2400d964:	f888 3004 	strb.w	r3, [r8, #4]
2400d968:	e7a4      	b.n	2400d8b4 <create_chain+0x48>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
2400d96a:	2801      	cmp	r0, #1
2400d96c:	d1a1      	bne.n	2400d8b2 <create_chain+0x46>
2400d96e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
2400d972:	4620      	mov	r0, r4
2400d974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400d978:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400d97a:	4628      	mov	r0, r5
2400d97c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400d980:	f7ff fa96 	bl	2400ceb0 <move_window>
2400d984:	2800      	cmp	r0, #0
2400d986:	d1f2      	bne.n	2400d96e <create_chain+0x102>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400d988:	00a3      	lsls	r3, r4, #2
2400d98a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400d98e:	441d      	add	r5, r3
2400d990:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400d992:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
2400d996:	2b00      	cmp	r3, #0
2400d998:	d0be      	beq.n	2400d918 <create_chain+0xac>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
2400d99a:	2b01      	cmp	r3, #1
2400d99c:	d089      	beq.n	2400d8b2 <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
2400d99e:	42a6      	cmp	r6, r4
2400d9a0:	d010      	beq.n	2400d9c4 <create_chain+0x158>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400d9a2:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400d9a6:	e771      	b.n	2400d88c <create_chain+0x20>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400d9a8:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400d9aa:	4628      	mov	r0, r5
2400d9ac:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400d9b0:	f7ff fa7e 	bl	2400ceb0 <move_window>
2400d9b4:	2800      	cmp	r0, #0
2400d9b6:	d1da      	bne.n	2400d96e <create_chain+0x102>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400d9b8:	0063      	lsls	r3, r4, #1
2400d9ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400d9be:	442b      	add	r3, r5
2400d9c0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
			break;
2400d9c2:	e7a7      	b.n	2400d914 <create_chain+0xa8>
				if (ncl > scl) return 0;	/* No free cluster */
2400d9c4:	2400      	movs	r4, #0
}
2400d9c6:	4620      	mov	r0, r4
2400d9c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400d9cc:	4640      	mov	r0, r8
2400d9ce:	f7ff fca5 	bl	2400d31c <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
2400d9d2:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400d9d4:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
2400d9d6:	f67f af6c 	bls.w	2400d8b2 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
2400d9da:	1c41      	adds	r1, r0, #1
2400d9dc:	d0c7      	beq.n	2400d96e <create_chain+0x102>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
2400d9de:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400d9e2:	4283      	cmp	r3, r0
2400d9e4:	f63f af66 	bhi.w	2400d8b4 <create_chain+0x48>
2400d9e8:	463e      	mov	r6, r7
2400d9ea:	e74e      	b.n	2400d88a <create_chain+0x1e>

2400d9ec <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400d9ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
2400d9f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
2400d9f4:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400d9f8:	d24e      	bcs.n	2400da98 <dir_sdi+0xac>
2400d9fa:	06ca      	lsls	r2, r1, #27
2400d9fc:	460c      	mov	r4, r1
2400d9fe:	d14b      	bne.n	2400da98 <dir_sdi+0xac>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
2400da00:	6885      	ldr	r5, [r0, #8]
2400da02:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
2400da04:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400da06:	2d00      	cmp	r5, #0
2400da08:	d049      	beq.n	2400da9e <dir_sdi+0xb2>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400da0a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
2400da0e:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400da12:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
2400da16:	f0c0 8084 	bcc.w	2400db22 <dir_sdi+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400da1a:	2d01      	cmp	r5, #1
2400da1c:	d03c      	beq.n	2400da98 <dir_sdi+0xac>
2400da1e:	4647      	mov	r7, r8
2400da20:	e037      	b.n	2400da92 <dir_sdi+0xa6>
		switch (fs->fs_type) {
2400da22:	783b      	ldrb	r3, [r7, #0]
2400da24:	2b02      	cmp	r3, #2
2400da26:	d06e      	beq.n	2400db06 <dir_sdi+0x11a>
2400da28:	2b03      	cmp	r3, #3
2400da2a:	d05c      	beq.n	2400dae6 <dir_sdi+0xfa>
2400da2c:	2b01      	cmp	r3, #1
2400da2e:	d133      	bne.n	2400da98 <dir_sdi+0xac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400da30:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400da32:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400da36:	4638      	mov	r0, r7
2400da38:	eb01 215a 	add.w	r1, r1, sl, lsr #9
2400da3c:	f7ff fa38 	bl	2400ceb0 <move_window>
2400da40:	2800      	cmp	r0, #0
2400da42:	d14d      	bne.n	2400dae0 <dir_sdi+0xf4>
			wc = fs->win[bc++ % SS(fs)];
2400da44:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400da48:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400da4a:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400da4e:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
2400da50:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400da52:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400da56:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400da5a:	f7ff fa29 	bl	2400ceb0 <move_window>
2400da5e:	2800      	cmp	r0, #0
2400da60:	d13e      	bne.n	2400dae0 <dir_sdi+0xf4>
			wc |= fs->win[bc % SS(fs)] << 8;
2400da62:	f3ca 0a08 	ubfx	sl, sl, #0, #9
2400da66:	44ba      	add	sl, r7
2400da68:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
2400da6c:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400da70:	07eb      	lsls	r3, r5, #31
2400da72:	bf4c      	ite	mi
2400da74:	ea4f 151b 	movmi.w	r5, fp, lsr #4
2400da78:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
2400da7c:	2d01      	cmp	r5, #1
2400da7e:	d90b      	bls.n	2400da98 <dir_sdi+0xac>
2400da80:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400da84:	42ab      	cmp	r3, r5
2400da86:	d907      	bls.n	2400da98 <dir_sdi+0xac>
			ofs -= csz;
2400da88:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
2400da8c:	45a1      	cmp	r9, r4
2400da8e:	d84a      	bhi.n	2400db26 <dir_sdi+0x13a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
2400da90:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400da92:	69bb      	ldr	r3, [r7, #24]
2400da94:	42ab      	cmp	r3, r5
2400da96:	d8c4      	bhi.n	2400da22 <dir_sdi+0x36>
		switch (fs->fs_type) {
2400da98:	2002      	movs	r0, #2
}
2400da9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400da9e:	f898 3000 	ldrb.w	r3, [r8]
2400daa2:	2b02      	cmp	r3, #2
2400daa4:	d816      	bhi.n	2400dad4 <dir_sdi+0xe8>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
2400daa6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
2400daaa:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
2400daae:	d9f3      	bls.n	2400da98 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
2400dab0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
2400dab4:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400dab8:	2b00      	cmp	r3, #0
2400daba:	d0ed      	beq.n	2400da98 <dir_sdi+0xac>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400dabc:	f108 0834 	add.w	r8, r8, #52	; 0x34
2400dac0:	f3c4 0108 	ubfx	r1, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
2400dac4:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	return FR_OK;
2400dac8:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400daca:	4441      	add	r1, r8
2400dacc:	e9c6 3107 	strd	r3, r1, [r6, #28]
}
2400dad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
2400dad4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
2400dad8:	2b00      	cmp	r3, #0
2400dada:	d0e4      	beq.n	2400daa6 <dir_sdi+0xba>
2400dadc:	461d      	mov	r5, r3
2400dade:	e794      	b.n	2400da0a <dir_sdi+0x1e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400dae0:	2001      	movs	r0, #1
}
2400dae2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400dae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400dae8:	4638      	mov	r0, r7
2400daea:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
2400daee:	f7ff f9df 	bl	2400ceb0 <move_window>
2400daf2:	2800      	cmp	r0, #0
2400daf4:	d1f4      	bne.n	2400dae0 <dir_sdi+0xf4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400daf6:	00ab      	lsls	r3, r5, #2
2400daf8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400dafc:	443b      	add	r3, r7
2400dafe:	6b5d      	ldr	r5, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400db00:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
2400db04:	e7ba      	b.n	2400da7c <dir_sdi+0x90>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400db06:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400db08:	4638      	mov	r0, r7
2400db0a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
2400db0e:	f7ff f9cf 	bl	2400ceb0 <move_window>
2400db12:	2800      	cmp	r0, #0
2400db14:	d1e4      	bne.n	2400dae0 <dir_sdi+0xf4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400db16:	006b      	lsls	r3, r5, #1
2400db18:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400db1c:	443b      	add	r3, r7
2400db1e:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
			break;
2400db20:	e7ac      	b.n	2400da7c <dir_sdi+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400db22:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400db26:	3b02      	subs	r3, #2
	clst -= 2;
2400db28:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400db2a:	429a      	cmp	r2, r3
2400db2c:	d206      	bcs.n	2400db3c <dir_sdi+0x150>
	return clst * fs->csize + fs->database;
2400db2e:	f8b8 100a 	ldrh.w	r1, [r8, #10]
2400db32:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
2400db36:	fb02 3301 	mla	r3, r2, r1, r3
2400db3a:	e7bb      	b.n	2400dab4 <dir_sdi+0xc8>
		dp->sect = fs->dirbase;
2400db3c:	2300      	movs	r3, #0
2400db3e:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400db42:	e7a9      	b.n	2400da98 <dir_sdi+0xac>

2400db44 <dir_find>:
{
2400db44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400db48:	2100      	movs	r1, #0
{
2400db4a:	b085      	sub	sp, #20
2400db4c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400db4e:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400db52:	f7ff ff4b 	bl	2400d9ec <dir_sdi>
	if (res != FR_OK) return res;
2400db56:	4607      	mov	r7, r0
2400db58:	b9e8      	cbnz	r0, 2400db96 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400db5a:	f04f 09ff 	mov.w	r9, #255	; 0xff
2400db5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400db62:	69e6      	ldr	r6, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400db64:	464f      	mov	r7, r9
2400db66:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400db68:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400db6c:	42b5      	cmp	r5, r6
2400db6e:	d018      	beq.n	2400dba2 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400db70:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400db74:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400db78:	2b00      	cmp	r3, #0
2400db7a:	f040 8085 	bne.w	2400dc88 <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400db7e:	2301      	movs	r3, #1
2400db80:	4632      	mov	r2, r6
2400db82:	f898 0001 	ldrb.w	r0, [r8, #1]
2400db86:	f7fe ffd9 	bl	2400cb3c <disk_read>
2400db8a:	b140      	cbz	r0, 2400db9e <dir_find+0x5a>
			fs->winsect = sector;
2400db8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400db90:	2701      	movs	r7, #1
			fs->winsect = sector;
2400db92:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
2400db96:	4638      	mov	r0, r7
2400db98:	b005      	add	sp, #20
2400db9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400db9e:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
2400dba2:	6a25      	ldr	r5, [r4, #32]
2400dba4:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400dba6:	b346      	cbz	r6, 2400dbfa <dir_find+0xb6>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400dba8:	7aeb      	ldrb	r3, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400dbaa:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400dbac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2400dbb0:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400dbb2:	d004      	beq.n	2400dbbe <dir_find+0x7a>
2400dbb4:	071b      	lsls	r3, r3, #28
2400dbb6:	d525      	bpl.n	2400dc04 <dir_find+0xc0>
2400dbb8:	2a0f      	cmp	r2, #15
2400dbba:	f000 8093 	beq.w	2400dce4 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400dbbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400dbc2:	27ff      	movs	r7, #255	; 0xff
2400dbc4:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400dbc6:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
2400dbc8:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400dbca:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400dbcc:	69e6      	ldr	r6, [r4, #28]
2400dbce:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400dbd2:	d212      	bcs.n	2400dbfa <dir_find+0xb6>
2400dbd4:	b18e      	cbz	r6, 2400dbfa <dir_find+0xb6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400dbd6:	f3c5 0208 	ubfx	r2, r5, #0, #9
2400dbda:	b94a      	cbnz	r2, 2400dbf0 <dir_find+0xac>
		dp->sect++;				/* Next sector */
2400dbdc:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400dbde:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400dbe0:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400dbe2:	2900      	cmp	r1, #0
2400dbe4:	d15c      	bne.n	2400dca0 <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400dbe6:	8919      	ldrh	r1, [r3, #8]
2400dbe8:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
2400dbec:	f240 813a 	bls.w	2400de64 <dir_find+0x320>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400dbf0:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400dbf2:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400dbf4:	4413      	add	r3, r2
2400dbf6:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
2400dbf8:	e7b6      	b.n	2400db68 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400dbfa:	2704      	movs	r7, #4
}
2400dbfc:	4638      	mov	r0, r7
2400dbfe:	b005      	add	sp, #20
2400dc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
2400dc04:	2a0f      	cmp	r2, #15
2400dc06:	d06d      	beq.n	2400dce4 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400dc08:	2f00      	cmp	r7, #0
2400dc0a:	f000 80d9 	beq.w	2400ddc0 <dir_find+0x27c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400dc0e:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
2400dc12:	f017 0701 	ands.w	r7, r7, #1
2400dc16:	d1d2      	bne.n	2400dbbe <dir_find+0x7a>
	} while (--cnt && r == 0);
2400dc18:	782a      	ldrb	r2, [r5, #0]
2400dc1a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
2400dc1e:	429a      	cmp	r2, r3
2400dc20:	d1cd      	bne.n	2400dbbe <dir_find+0x7a>
2400dc22:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400dc26:	786b      	ldrb	r3, [r5, #1]
2400dc28:	429a      	cmp	r2, r3
2400dc2a:	d1c8      	bne.n	2400dbbe <dir_find+0x7a>
2400dc2c:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400dc30:	78ab      	ldrb	r3, [r5, #2]
2400dc32:	429a      	cmp	r2, r3
2400dc34:	d1c3      	bne.n	2400dbbe <dir_find+0x7a>
2400dc36:	78ea      	ldrb	r2, [r5, #3]
2400dc38:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
2400dc3c:	429a      	cmp	r2, r3
2400dc3e:	d1be      	bne.n	2400dbbe <dir_find+0x7a>
2400dc40:	792a      	ldrb	r2, [r5, #4]
2400dc42:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
2400dc46:	429a      	cmp	r2, r3
2400dc48:	d1b9      	bne.n	2400dbbe <dir_find+0x7a>
2400dc4a:	796a      	ldrb	r2, [r5, #5]
2400dc4c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
2400dc50:	429a      	cmp	r2, r3
2400dc52:	d1b4      	bne.n	2400dbbe <dir_find+0x7a>
2400dc54:	79aa      	ldrb	r2, [r5, #6]
2400dc56:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400dc5a:	429a      	cmp	r2, r3
2400dc5c:	d1af      	bne.n	2400dbbe <dir_find+0x7a>
2400dc5e:	79ea      	ldrb	r2, [r5, #7]
2400dc60:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
2400dc64:	429a      	cmp	r2, r3
2400dc66:	d1aa      	bne.n	2400dbbe <dir_find+0x7a>
2400dc68:	7a2a      	ldrb	r2, [r5, #8]
2400dc6a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400dc6e:	429a      	cmp	r2, r3
2400dc70:	d1a5      	bne.n	2400dbbe <dir_find+0x7a>
2400dc72:	7a6a      	ldrb	r2, [r5, #9]
2400dc74:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
2400dc78:	429a      	cmp	r2, r3
2400dc7a:	d1a0      	bne.n	2400dbbe <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400dc7c:	7aaa      	ldrb	r2, [r5, #10]
2400dc7e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
2400dc82:	429a      	cmp	r2, r3
2400dc84:	d19b      	bne.n	2400dbbe <dir_find+0x7a>
2400dc86:	e786      	b.n	2400db96 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400dc88:	2301      	movs	r3, #1
2400dc8a:	462a      	mov	r2, r5
2400dc8c:	f898 0001 	ldrb.w	r0, [r8, #1]
2400dc90:	9100      	str	r1, [sp, #0]
2400dc92:	f7fe ff63 	bl	2400cb5c <disk_write>
2400dc96:	9900      	ldr	r1, [sp, #0]
2400dc98:	2800      	cmp	r0, #0
2400dc9a:	d06e      	beq.n	2400dd7a <dir_find+0x236>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400dc9c:	2701      	movs	r7, #1
2400dc9e:	e77a      	b.n	2400db96 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400dca0:	8958      	ldrh	r0, [r3, #10]
2400dca2:	3801      	subs	r0, #1
2400dca4:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
2400dca8:	d1a2      	bne.n	2400dbf0 <dir_find+0xac>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400dcaa:	4618      	mov	r0, r3
2400dcac:	9201      	str	r2, [sp, #4]
2400dcae:	9300      	str	r3, [sp, #0]
2400dcb0:	f7ff fb34 	bl	2400d31c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400dcb4:	2801      	cmp	r0, #1
2400dcb6:	f240 80d9 	bls.w	2400de6c <dir_find+0x328>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400dcba:	1c43      	adds	r3, r0, #1
2400dcbc:	d0ee      	beq.n	2400dc9c <dir_find+0x158>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400dcbe:	9b00      	ldr	r3, [sp, #0]
2400dcc0:	6999      	ldr	r1, [r3, #24]
2400dcc2:	4288      	cmp	r0, r1
2400dcc4:	f080 80ce 	bcs.w	2400de64 <dir_find+0x320>
				dp->clust = clst;		/* Initialize data for new cluster */
2400dcc8:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400dcca:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400dccc:	6999      	ldr	r1, [r3, #24]
2400dcce:	9a01      	ldr	r2, [sp, #4]
2400dcd0:	3902      	subs	r1, #2
2400dcd2:	4288      	cmp	r0, r1
2400dcd4:	f080 80cc 	bcs.w	2400de70 <dir_find+0x32c>
	return clst * fs->csize + fs->database;
2400dcd8:	8959      	ldrh	r1, [r3, #10]
2400dcda:	6ade      	ldr	r6, [r3, #44]	; 0x2c
2400dcdc:	fb00 6601 	mla	r6, r0, r1, r6
				dp->sect = clust2sect(fs, clst);
2400dce0:	61e6      	str	r6, [r4, #28]
2400dce2:	e785      	b.n	2400dbf0 <dir_find+0xac>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2400dce4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400dce8:	0658      	lsls	r0, r3, #25
2400dcea:	f53f af6c 	bmi.w	2400dbc6 <dir_find+0x82>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
2400dcee:	0671      	lsls	r1, r6, #25
2400dcf0:	f140 80b3 	bpl.w	2400de5a <dir_find+0x316>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400dcf4:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2400dcf6:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400dcfa:	f895 900d 	ldrb.w	r9, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400dcfe:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400dd00:	7b6b      	ldrb	r3, [r5, #13]
2400dd02:	454b      	cmp	r3, r9
2400dd04:	f040 80ac 	bne.w	2400de60 <dir_find+0x31c>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
2400dd08:	8b6b      	ldrh	r3, [r5, #26]
2400dd0a:	2b00      	cmp	r3, #0
2400dd0c:	f040 80a8 	bne.w	2400de60 <dir_find+0x31c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400dd10:	782f      	ldrb	r7, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400dd12:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400dd14:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400dd18:	f007 073f 	and.w	r7, r7, #63	; 0x3f
2400dd1c:	f8df a178 	ldr.w	sl, [pc, #376]	; 2400de98 <dir_find+0x354>
2400dd20:	9602      	str	r6, [sp, #8]
2400dd22:	462e      	mov	r6, r5
2400dd24:	3f01      	subs	r7, #1
2400dd26:	f10a 0b0d 	add.w	fp, sl, #13
2400dd2a:	4615      	mov	r5, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400dd2c:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400dd2e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
2400dd32:	f8cd 8000 	str.w	r8, [sp]
2400dd36:	9401      	str	r4, [sp, #4]
2400dd38:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400dd3c:	e010      	b.n	2400dd60 <dir_find+0x21c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
2400dd3e:	2ffe      	cmp	r7, #254	; 0xfe
2400dd40:	4620      	mov	r0, r4
2400dd42:	d816      	bhi.n	2400dd72 <dir_find+0x22e>
2400dd44:	f001 fe62 	bl	2400fa0c <ff_wtoupper>
2400dd48:	4680      	mov	r8, r0
2400dd4a:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
2400dd4e:	3701      	adds	r7, #1
2400dd50:	f001 fe5c 	bl	2400fa0c <ff_wtoupper>
2400dd54:	4580      	cmp	r8, r0
2400dd56:	4621      	mov	r1, r4
2400dd58:	d10b      	bne.n	2400dd72 <dir_find+0x22e>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400dd5a:	45d3      	cmp	fp, sl
2400dd5c:	f000 808a 	beq.w	2400de74 <dir_find+0x330>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
2400dd60:	f81a 3b01 	ldrb.w	r3, [sl], #1
2400dd64:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
2400dd66:	2900      	cmp	r1, #0
2400dd68:	d1e9      	bne.n	2400dd3e <dir_find+0x1fa>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dd6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400dd6e:	429c      	cmp	r4, r3
2400dd70:	d0f3      	beq.n	2400dd5a <dir_find+0x216>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400dd72:	e9dd 8400 	ldrd	r8, r4, [sp]
2400dd76:	27ff      	movs	r7, #255	; 0xff
2400dd78:	e725      	b.n	2400dbc6 <dir_find+0x82>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400dd7a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400dd7e:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400dd82:	1aea      	subs	r2, r5, r3
2400dd84:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400dd88:	429a      	cmp	r2, r3
2400dd8a:	f4bf aef8 	bcs.w	2400db7e <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400dd8e:	f898 a002 	ldrb.w	sl, [r8, #2]
2400dd92:	f1ba 0f01 	cmp.w	sl, #1
2400dd96:	f67f aef2 	bls.w	2400db7e <dir_find+0x3a>
2400dd9a:	468b      	mov	fp, r1
2400dd9c:	e001      	b.n	2400dda2 <dir_find+0x25e>
					wsect += fs->fsize;
2400dd9e:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400dda2:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400dda4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400dda8:	2301      	movs	r3, #1
2400ddaa:	4659      	mov	r1, fp
2400ddac:	462a      	mov	r2, r5
2400ddae:	f898 0001 	ldrb.w	r0, [r8, #1]
2400ddb2:	f7fe fed3 	bl	2400cb5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ddb6:	f1ba 0f01 	cmp.w	sl, #1
2400ddba:	d1f0      	bne.n	2400dd9e <dir_find+0x25a>
2400ddbc:	4659      	mov	r1, fp
2400ddbe:	e6de      	b.n	2400db7e <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400ddc0:	782a      	ldrb	r2, [r5, #0]
2400ddc2:	7869      	ldrb	r1, [r5, #1]
2400ddc4:	01d0      	lsls	r0, r2, #7
2400ddc6:	78ae      	ldrb	r6, [r5, #2]
2400ddc8:	78eb      	ldrb	r3, [r5, #3]
2400ddca:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
2400ddce:	792a      	ldrb	r2, [r5, #4]
2400ddd0:	f895 a005 	ldrb.w	sl, [r5, #5]
2400ddd4:	4408      	add	r0, r1
2400ddd6:	f895 e006 	ldrb.w	lr, [r5, #6]
2400ddda:	f895 c007 	ldrb.w	ip, [r5, #7]
2400ddde:	f3c0 0146 	ubfx	r1, r0, #1, #7
2400dde2:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
2400dde6:	7a68      	ldrb	r0, [r5, #9]
2400dde8:	fa56 f181 	uxtab	r1, r6, r1
2400ddec:	7a2e      	ldrb	r6, [r5, #8]
2400ddee:	f3c1 0b46 	ubfx	fp, r1, #1, #7
2400ddf2:	ea4b 1bc1 	orr.w	fp, fp, r1, lsl #7
2400ddf6:	7aa9      	ldrb	r1, [r5, #10]
2400ddf8:	fa53 fb8b 	uxtab	fp, r3, fp
2400ddfc:	f3cb 0346 	ubfx	r3, fp, #1, #7
2400de00:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
2400de04:	fa52 f383 	uxtab	r3, r2, r3
2400de08:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400de0c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400de10:	fa5a f282 	uxtab	r2, sl, r2
2400de14:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400de18:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400de1c:	fa5e f383 	uxtab	r3, lr, r3
2400de20:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400de24:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400de28:	fa5c f282 	uxtab	r2, ip, r2
2400de2c:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400de30:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400de34:	fa56 f383 	uxtab	r3, r6, r3
2400de38:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400de3c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400de40:	fa50 f282 	uxtab	r2, r0, r2
2400de44:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400de48:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400de4c:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400de50:	b2db      	uxtb	r3, r3
2400de52:	4599      	cmp	r9, r3
2400de54:	f47f aedb 	bne.w	2400dc0e <dir_find+0xca>
2400de58:	e69d      	b.n	2400db96 <dir_find+0x52>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400de5a:	42b7      	cmp	r7, r6
2400de5c:	f43f af50 	beq.w	2400dd00 <dir_find+0x1bc>
2400de60:	27ff      	movs	r7, #255	; 0xff
2400de62:	e6b0      	b.n	2400dbc6 <dir_find+0x82>
				dp->sect = 0; return FR_NO_FILE;
2400de64:	2300      	movs	r3, #0
2400de66:	2704      	movs	r7, #4
2400de68:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
2400de6a:	e694      	b.n	2400db96 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400de6c:	2702      	movs	r7, #2
2400de6e:	e692      	b.n	2400db96 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400de70:	4616      	mov	r6, r2
2400de72:	e735      	b.n	2400dce0 <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400de74:	4635      	mov	r5, r6
2400de76:	f8dd 8000 	ldr.w	r8, [sp]
2400de7a:	782b      	ldrb	r3, [r5, #0]
2400de7c:	065a      	lsls	r2, r3, #25
2400de7e:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
2400de82:	d500      	bpl.n	2400de86 <dir_find+0x342>
2400de84:	b911      	cbnz	r1, 2400de8c <dir_find+0x348>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400de86:	3e01      	subs	r6, #1
2400de88:	b2f7      	uxtb	r7, r6
2400de8a:	e69c      	b.n	2400dbc6 <dir_find+0x82>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400de8c:	9b03      	ldr	r3, [sp, #12]
2400de8e:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
2400de92:	2b00      	cmp	r3, #0
2400de94:	d0f7      	beq.n	2400de86 <dir_find+0x342>
2400de96:	e7e3      	b.n	2400de60 <dir_find+0x31c>
2400de98:	24017580 	.word	0x24017580

2400de9c <follow_path>:
{
2400de9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400dea0:	780b      	ldrb	r3, [r1, #0]
{
2400dea2:	b083      	sub	sp, #12
2400dea4:	4688      	mov	r8, r1
2400dea6:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400dea8:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
2400deaa:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400deae:	d103      	bne.n	2400deb8 <follow_path+0x1c>
2400deb0:	f818 3f01 	ldrb.w	r3, [r8, #1]!
2400deb4:	2b2f      	cmp	r3, #47	; 0x2f
2400deb6:	d0fb      	beq.n	2400deb0 <follow_path+0x14>
2400deb8:	2b5c      	cmp	r3, #92	; 0x5c
2400deba:	d0f9      	beq.n	2400deb0 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
2400debc:	2100      	movs	r1, #0
2400debe:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2400dec0:	f898 3000 	ldrb.w	r3, [r8]
2400dec4:	2b1f      	cmp	r3, #31
2400dec6:	f240 8147 	bls.w	2400e158 <follow_path+0x2bc>
2400deca:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
2400decc:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400dece:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
2400ded0:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
2400ded2:	d929      	bls.n	2400df28 <follow_path+0x8c>
2400ded4:	f1a5 0902 	sub.w	r9, r5, #2
2400ded8:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
2400deda:	2401      	movs	r4, #1
2400dedc:	e008      	b.n	2400def0 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
2400dede:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
2400dee2:	1c63      	adds	r3, r4, #1
2400dee4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
2400dee8:	281f      	cmp	r0, #31
2400deea:	f240 80f6 	bls.w	2400e0da <follow_path+0x23e>
		w = p[si++];					/* Get a character */
2400deee:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2400def0:	282f      	cmp	r0, #47	; 0x2f
2400def2:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
2400def6:	d01d      	beq.n	2400df34 <follow_path+0x98>
2400def8:	285c      	cmp	r0, #92	; 0x5c
2400defa:	d01b      	beq.n	2400df34 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2400defc:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
2400df00:	d00e      	beq.n	2400df20 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2400df02:	2101      	movs	r1, #1
2400df04:	f001 fd64 	bl	2400f9d0 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2400df08:	b150      	cbz	r0, 2400df20 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
2400df0a:	287f      	cmp	r0, #127	; 0x7f
2400df0c:	d8e7      	bhi.n	2400dede <follow_path+0x42>
	while (*str && *str != chr) str++;
2400df0e:	2322      	movs	r3, #34	; 0x22
2400df10:	4aa5      	ldr	r2, [pc, #660]	; (2400e1a8 <follow_path+0x30c>)
2400df12:	e003      	b.n	2400df1c <follow_path+0x80>
2400df14:	f812 3f01 	ldrb.w	r3, [r2, #1]!
2400df18:	2b00      	cmp	r3, #0
2400df1a:	d0e0      	beq.n	2400dede <follow_path+0x42>
2400df1c:	4298      	cmp	r0, r3
2400df1e:	d1f9      	bne.n	2400df14 <follow_path+0x78>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400df20:	2006      	movs	r0, #6
}
2400df22:	b003      	add	sp, #12
2400df24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
2400df28:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400df2a:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
2400df2c:	802b      	strh	r3, [r5, #0]
}
2400df2e:	b003      	add	sp, #12
2400df30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400df34:	f818 3004 	ldrb.w	r3, [r8, r4]
2400df38:	eb08 0204 	add.w	r2, r8, r4
2400df3c:	2b2f      	cmp	r3, #47	; 0x2f
2400df3e:	d002      	beq.n	2400df46 <follow_path+0xaa>
2400df40:	2b5c      	cmp	r3, #92	; 0x5c
2400df42:	f040 811e 	bne.w	2400e182 <follow_path+0x2e6>
2400df46:	1c63      	adds	r3, r4, #1
2400df48:	4443      	add	r3, r8
2400df4a:	4698      	mov	r8, r3
2400df4c:	f813 2b01 	ldrb.w	r2, [r3], #1
2400df50:	2a2f      	cmp	r2, #47	; 0x2f
2400df52:	d0fa      	beq.n	2400df4a <follow_path+0xae>
2400df54:	2a5c      	cmp	r2, #92	; 0x5c
2400df56:	d0f8      	beq.n	2400df4a <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400df58:	f1ba 0f00 	cmp.w	sl, #0
2400df5c:	d0e4      	beq.n	2400df28 <follow_path+0x8c>
2400df5e:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400df60:	2400      	movs	r4, #0
2400df62:	eb05 024a 	add.w	r2, r5, sl, lsl #1
2400df66:	e002      	b.n	2400df6e <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400df68:	f1ba 0a01 	subs.w	sl, sl, #1
2400df6c:	d0dc      	beq.n	2400df28 <follow_path+0x8c>
		w = lfn[di - 1];
2400df6e:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
2400df72:	2b20      	cmp	r3, #32
2400df74:	d0f8      	beq.n	2400df68 <follow_path+0xcc>
2400df76:	2b2e      	cmp	r3, #46	; 0x2e
2400df78:	d0f6      	beq.n	2400df68 <follow_path+0xcc>
		*d++ = (BYTE)val;
2400df7a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
2400df7e:	2100      	movs	r1, #0
		*d++ = (BYTE)val;
2400df80:	f242 0220 	movw	r2, #8224	; 0x2020
	lfn[di] = 0;						/* LFN is created */
2400df84:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
2400df88:	627b      	str	r3, [r7, #36]	; 0x24
2400df8a:	62bb      	str	r3, [r7, #40]	; 0x28
2400df8c:	2320      	movs	r3, #32
2400df8e:	85ba      	strh	r2, [r7, #44]	; 0x2c
2400df90:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400df94:	8828      	ldrh	r0, [r5, #0]
2400df96:	282e      	cmp	r0, #46	; 0x2e
2400df98:	d002      	beq.n	2400dfa0 <follow_path+0x104>
2400df9a:	4298      	cmp	r0, r3
2400df9c:	f040 80e5 	bne.w	2400e16a <follow_path+0x2ce>
2400dfa0:	462a      	mov	r2, r5
2400dfa2:	2300      	movs	r3, #0
2400dfa4:	f832 0f02 	ldrh.w	r0, [r2, #2]!
2400dfa8:	461c      	mov	r4, r3
2400dfaa:	3301      	adds	r3, #1
2400dfac:	2820      	cmp	r0, #32
2400dfae:	d0f9      	beq.n	2400dfa4 <follow_path+0x108>
2400dfb0:	282e      	cmp	r0, #46	; 0x2e
2400dfb2:	d0f7      	beq.n	2400dfa4 <follow_path+0x108>
		w = lfn[si++];					/* Get an LFN character */
2400dfb4:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2400dfb6:	eb05 034a 	add.w	r3, r5, sl, lsl #1
2400dfba:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
2400dfbe:	2a2e      	cmp	r2, #46	; 0x2e
2400dfc0:	d002      	beq.n	2400dfc8 <follow_path+0x12c>
2400dfc2:	f1ba 0a01 	subs.w	sl, sl, #1
2400dfc6:	d1f8      	bne.n	2400dfba <follow_path+0x11e>
		if (!w) break;					/* Break on end of the LFN */
2400dfc8:	b3b0      	cbz	r0, 2400e038 <follow_path+0x19c>
2400dfca:	2208      	movs	r2, #8
2400dfcc:	4641      	mov	r1, r8
2400dfce:	2300      	movs	r3, #0
2400dfd0:	46b8      	mov	r8, r7
2400dfd2:	462f      	mov	r7, r5
2400dfd4:	4615      	mov	r5, r2
2400dfd6:	4699      	mov	r9, r3
2400dfd8:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2400dfda:	2820      	cmp	r0, #32
2400dfdc:	d003      	beq.n	2400dfe6 <follow_path+0x14a>
2400dfde:	282e      	cmp	r0, #46	; 0x2e
2400dfe0:	d14d      	bne.n	2400e07e <follow_path+0x1e2>
2400dfe2:	45a2      	cmp	sl, r4
2400dfe4:	d04b      	beq.n	2400e07e <follow_path+0x1e2>
			cf |= NS_LOSS | NS_LFN; continue;
2400dfe6:	f046 0603 	orr.w	r6, r6, #3
2400dfea:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
2400dfec:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
2400dff0:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
2400dff2:	2800      	cmp	r0, #0
2400dff4:	d1f1      	bne.n	2400dfda <follow_path+0x13e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400dff6:	4647      	mov	r7, r8
2400dff8:	4690      	mov	r8, r2
2400dffa:	462a      	mov	r2, r5
2400dffc:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
2400e000:	29e5      	cmp	r1, #229	; 0xe5
2400e002:	d102      	bne.n	2400e00a <follow_path+0x16e>
2400e004:	2105      	movs	r1, #5
2400e006:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400e00a:	2a08      	cmp	r2, #8
2400e00c:	f000 8093 	beq.w	2400e136 <follow_path+0x29a>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e010:	f003 020c 	and.w	r2, r3, #12
2400e014:	2a0c      	cmp	r2, #12
2400e016:	d065      	beq.n	2400e0e4 <follow_path+0x248>
2400e018:	f003 0303 	and.w	r3, r3, #3
2400e01c:	2b03      	cmp	r3, #3
2400e01e:	d061      	beq.n	2400e0e4 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400e020:	07b1      	lsls	r1, r6, #30
2400e022:	d409      	bmi.n	2400e038 <follow_path+0x19c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2400e024:	2b01      	cmp	r3, #1
2400e026:	d102      	bne.n	2400e02e <follow_path+0x192>
2400e028:	f046 0610 	orr.w	r6, r6, #16
2400e02c:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2400e02e:	2a04      	cmp	r2, #4
2400e030:	d102      	bne.n	2400e038 <follow_path+0x19c>
2400e032:	f046 0608 	orr.w	r6, r6, #8
2400e036:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
2400e038:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400e03a:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400e03e:	f7ff fd81 	bl	2400db44 <dir_find>
			ns = dp->fn[NSFLAG];
2400e042:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400e046:	2800      	cmp	r0, #0
2400e048:	d158      	bne.n	2400e0fc <follow_path+0x260>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2400e04a:	075a      	lsls	r2, r3, #29
2400e04c:	f53f af69 	bmi.w	2400df22 <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
2400e050:	79bb      	ldrb	r3, [r7, #6]
2400e052:	06db      	lsls	r3, r3, #27
2400e054:	f140 8097 	bpl.w	2400e186 <follow_path+0x2ea>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e058:	697a      	ldr	r2, [r7, #20]
2400e05a:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
2400e05e:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e062:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
2400e066:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e068:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
2400e06a:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400e06c:	d102      	bne.n	2400e074 <follow_path+0x1d8>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400e06e:	8a9b      	ldrh	r3, [r3, #20]
2400e070:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e074:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400e076:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
2400e078:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
2400e07c:	e726      	b.n	2400decc <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
2400e07e:	454d      	cmp	r5, r9
2400e080:	d91c      	bls.n	2400e0bc <follow_path+0x220>
2400e082:	ebaa 0104 	sub.w	r1, sl, r4
2400e086:	fab1 f181 	clz	r1, r1
2400e08a:	0949      	lsrs	r1, r1, #5
2400e08c:	b9b1      	cbnz	r1, 2400e0bc <follow_path+0x220>
		if (w >= 0x80) {				/* Non ASCII character */
2400e08e:	287f      	cmp	r0, #127	; 0x7f
2400e090:	d83c      	bhi.n	2400e10c <follow_path+0x270>
	while (*str && *str != chr) str++;
2400e092:	212b      	movs	r1, #43	; 0x2b
2400e094:	f8df c118 	ldr.w	ip, [pc, #280]	; 2400e1b0 <follow_path+0x314>
2400e098:	e003      	b.n	2400e0a2 <follow_path+0x206>
2400e09a:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
2400e09e:	2900      	cmp	r1, #0
2400e0a0:	d052      	beq.n	2400e148 <follow_path+0x2ac>
2400e0a2:	4281      	cmp	r1, r0
2400e0a4:	d1f9      	bne.n	2400e09a <follow_path+0x1fe>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400e0a6:	f046 0603 	orr.w	r6, r6, #3
2400e0aa:	205f      	movs	r0, #95	; 0x5f
2400e0ac:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
2400e0ae:	eb08 0109 	add.w	r1, r8, r9
2400e0b2:	f109 0901 	add.w	r9, r9, #1
2400e0b6:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
2400e0ba:	e797      	b.n	2400dfec <follow_path+0x150>
			if (ni == 11) {				/* Long extension */
2400e0bc:	2d0b      	cmp	r5, #11
2400e0be:	d064      	beq.n	2400e18a <follow_path+0x2ee>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2400e0c0:	45a2      	cmp	sl, r4
2400e0c2:	d003      	beq.n	2400e0cc <follow_path+0x230>
2400e0c4:	f046 0603 	orr.w	r6, r6, #3
2400e0c8:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
2400e0ca:	d394      	bcc.n	2400dff6 <follow_path+0x15a>
			b <<= 2; continue;
2400e0cc:	009b      	lsls	r3, r3, #2
2400e0ce:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
2400e0d0:	250b      	movs	r5, #11
2400e0d2:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
2400e0d6:	b2db      	uxtb	r3, r3
2400e0d8:	e788      	b.n	2400dfec <follow_path+0x150>
	*path = &p[si];						/* Return pointer to the next segment */
2400e0da:	46a2      	mov	sl, r4
2400e0dc:	4498      	add	r8, r3
2400e0de:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400e0e0:	2404      	movs	r4, #4
2400e0e2:	e73e      	b.n	2400df62 <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e0e4:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
2400e0e8:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e0ea:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400e0ec:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400e0f0:	f7ff fd28 	bl	2400db44 <dir_find>
			ns = dp->fn[NSFLAG];
2400e0f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400e0f8:	2800      	cmp	r0, #0
2400e0fa:	d0a6      	beq.n	2400e04a <follow_path+0x1ae>
				if (res == FR_NO_FILE) {	/* Object is not found */
2400e0fc:	2804      	cmp	r0, #4
2400e0fe:	f47f af10 	bne.w	2400df22 <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400e102:	f013 0f04 	tst.w	r3, #4
2400e106:	bf08      	it	eq
2400e108:	2005      	moveq	r0, #5
2400e10a:	e70a      	b.n	2400df22 <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2400e10c:	e9cd 3200 	strd	r3, r2, [sp]
2400e110:	f001 fc5e 	bl	2400f9d0 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e114:	e9dd 3200 	ldrd	r3, r2, [sp]
2400e118:	b918      	cbnz	r0, 2400e122 <follow_path+0x286>
			cf |= NS_LFN;				/* Force create LFN entry */
2400e11a:	f046 0602 	orr.w	r6, r6, #2
2400e11e:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400e120:	e7c1      	b.n	2400e0a6 <follow_path+0x20a>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e122:	4922      	ldr	r1, [pc, #136]	; (2400e1ac <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
2400e124:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e128:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
2400e12a:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e12c:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400e130:	2800      	cmp	r0, #0
2400e132:	d0b8      	beq.n	2400e0a6 <follow_path+0x20a>
2400e134:	e7ad      	b.n	2400e092 <follow_path+0x1f6>
	if (ni == 8) b <<= 2;
2400e136:	009a      	lsls	r2, r3, #2
2400e138:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e13c:	2a0c      	cmp	r2, #12
2400e13e:	d0d1      	beq.n	2400e0e4 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400e140:	07b0      	lsls	r0, r6, #30
2400e142:	f57f af74 	bpl.w	2400e02e <follow_path+0x192>
2400e146:	e777      	b.n	2400e038 <follow_path+0x19c>
				if (IsUpper(w)) {		/* ASCII large capital */
2400e148:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
2400e14c:	2919      	cmp	r1, #25
2400e14e:	d80f      	bhi.n	2400e170 <follow_path+0x2d4>
					b |= 2;
2400e150:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
2400e154:	b2c0      	uxtb	r0, r0
2400e156:	e7aa      	b.n	2400e0ae <follow_path+0x212>
		dp->fn[NSFLAG] = NS_NONAME;
2400e158:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
2400e15a:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
2400e15c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
2400e160:	b003      	add	sp, #12
2400e162:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
2400e166:	f7ff bc41 	b.w	2400d9ec <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400e16a:	4626      	mov	r6, r4
2400e16c:	2401      	movs	r4, #1
2400e16e:	e722      	b.n	2400dfb6 <follow_path+0x11a>
					if (IsLower(w)) {	/* ASCII small capital */
2400e170:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
2400e174:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
2400e176:	bf9c      	itt	ls
2400e178:	3820      	subls	r0, #32
2400e17a:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
2400e17e:	b2c0      	uxtb	r0, r0
2400e180:	e795      	b.n	2400e0ae <follow_path+0x212>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400e182:	4690      	mov	r8, r2
2400e184:	e6e8      	b.n	2400df58 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400e186:	2005      	movs	r0, #5
2400e188:	e6cb      	b.n	2400df22 <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
2400e18a:	4647      	mov	r7, r8
2400e18c:	4690      	mov	r8, r2
2400e18e:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400e192:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
2400e196:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400e198:	2ae5      	cmp	r2, #229	; 0xe5
2400e19a:	f47f af39 	bne.w	2400e010 <follow_path+0x174>
2400e19e:	2205      	movs	r2, #5
2400e1a0:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400e1a4:	e734      	b.n	2400e010 <follow_path+0x174>
2400e1a6:	bf00      	nop
2400e1a8:	240174ec 	.word	0x240174ec
2400e1ac:	24017500 	.word	0x24017500
2400e1b0:	240174f8 	.word	0x240174f8

2400e1b4 <dir_next>:
{
2400e1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e1b8:	69c3      	ldr	r3, [r0, #28]
{
2400e1ba:	b085      	sub	sp, #20
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e1bc:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e1be:	2b00      	cmp	r3, #0
2400e1c0:	d03d      	beq.n	2400e23e <dir_next+0x8a>
2400e1c2:	3520      	adds	r5, #32
2400e1c4:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400e1c8:	d239      	bcs.n	2400e23e <dir_next+0x8a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e1ca:	f3c5 0808 	ubfx	r8, r5, #0, #9
2400e1ce:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400e1d0:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e1d2:	f1b8 0f00 	cmp.w	r8, #0
2400e1d6:	d008      	beq.n	2400e1ea <dir_next+0x36>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e1d8:	f107 0634 	add.w	r6, r7, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e1dc:	4446      	add	r6, r8
	return FR_OK;
2400e1de:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
2400e1e0:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e1e2:	6226      	str	r6, [r4, #32]
}
2400e1e4:	b005      	add	sp, #20
2400e1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;				/* Next sector */
2400e1ea:	460e      	mov	r6, r1
2400e1ec:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
2400e1ee:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
2400e1f0:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
2400e1f2:	b341      	cbz	r1, 2400e246 <dir_next+0x92>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400e1f4:	897b      	ldrh	r3, [r7, #10]
2400e1f6:	3b01      	subs	r3, #1
2400e1f8:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
2400e1fc:	9300      	str	r3, [sp, #0]
2400e1fe:	d1eb      	bne.n	2400e1d8 <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400e200:	4638      	mov	r0, r7
2400e202:	f7ff f88b 	bl	2400d31c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e206:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400e208:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e20a:	d924      	bls.n	2400e256 <dir_next+0xa2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400e20c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400e210:	d023      	beq.n	2400e25a <dir_next+0xa6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400e212:	69bb      	ldr	r3, [r7, #24]
2400e214:	4283      	cmp	r3, r0
2400e216:	d922      	bls.n	2400e25e <dir_next+0xaa>
	clst -= 2;
2400e218:	1e83      	subs	r3, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e21a:	f107 0634 	add.w	r6, r7, #52	; 0x34
2400e21e:	4619      	mov	r1, r3
	clst -= 2;
2400e220:	9301      	str	r3, [sp, #4]
				dp->clust = clst;		/* Initialize data for new cluster */
2400e222:	f8c4 9018 	str.w	r9, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e226:	69bb      	ldr	r3, [r7, #24]
2400e228:	3b02      	subs	r3, #2
2400e22a:	428b      	cmp	r3, r1
2400e22c:	d904      	bls.n	2400e238 <dir_next+0x84>
	return clst * fs->csize + fs->database;
2400e22e:	897a      	ldrh	r2, [r7, #10]
2400e230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2400e232:	fb01 3302 	mla	r3, r1, r2, r3
2400e236:	9300      	str	r3, [sp, #0]
				dp->sect = clust2sect(fs, clst);
2400e238:	9b00      	ldr	r3, [sp, #0]
2400e23a:	61e3      	str	r3, [r4, #28]
2400e23c:	e7ce      	b.n	2400e1dc <dir_next+0x28>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e23e:	2004      	movs	r0, #4
}
2400e240:	b005      	add	sp, #20
2400e242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400e246:	893b      	ldrh	r3, [r7, #8]
2400e248:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400e24c:	d8c4      	bhi.n	2400e1d8 <dir_next+0x24>
				dp->sect = 0; return FR_NO_FILE;
2400e24e:	2300      	movs	r3, #0
2400e250:	2004      	movs	r0, #4
2400e252:	61e3      	str	r3, [r4, #28]
2400e254:	e7c6      	b.n	2400e1e4 <dir_next+0x30>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e256:	2002      	movs	r0, #2
2400e258:	e7c4      	b.n	2400e1e4 <dir_next+0x30>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400e25a:	2001      	movs	r0, #1
2400e25c:	e7c2      	b.n	2400e1e4 <dir_next+0x30>
					if (!stretch) {								/* If no stretch, report EOT */
2400e25e:	2e00      	cmp	r6, #0
2400e260:	d0f5      	beq.n	2400e24e <dir_next+0x9a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
2400e262:	69a1      	ldr	r1, [r4, #24]
2400e264:	4620      	mov	r0, r4
2400e266:	f7ff fb01 	bl	2400d86c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400e26a:	4681      	mov	r9, r0
2400e26c:	2800      	cmp	r0, #0
2400e26e:	d05a      	beq.n	2400e326 <dir_next+0x172>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
2400e270:	2801      	cmp	r0, #1
2400e272:	d0f0      	beq.n	2400e256 <dir_next+0xa2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400e274:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400e278:	d0ef      	beq.n	2400e25a <dir_next+0xa6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e27a:	78fb      	ldrb	r3, [r7, #3]
2400e27c:	2b00      	cmp	r3, #0
2400e27e:	d154      	bne.n	2400e32a <dir_next+0x176>
2400e280:	f107 0b34 	add.w	fp, r7, #52	; 0x34
		*d++ = (BYTE)val;
2400e284:	f44f 7200 	mov.w	r2, #512	; 0x200
2400e288:	2100      	movs	r1, #0
2400e28a:	4658      	mov	r0, fp
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
2400e28c:	465e      	mov	r6, fp
		*d++ = (BYTE)val;
2400e28e:	f006 fdb5 	bl	24014dfc <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e292:	69bb      	ldr	r3, [r7, #24]
	clst -= 2;
2400e294:	f1a9 0202 	sub.w	r2, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e298:	3b02      	subs	r3, #2
	clst -= 2;
2400e29a:	9201      	str	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e29c:	429a      	cmp	r2, r3
2400e29e:	d267      	bcs.n	2400e370 <dir_next+0x1bc>
	return clst * fs->csize + fs->database;
2400e2a0:	4611      	mov	r1, r2
2400e2a2:	897b      	ldrh	r3, [r7, #10]
2400e2a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2400e2a6:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400e2aa:	633a      	str	r2, [r7, #48]	; 0x30
2400e2ac:	2b00      	cmp	r3, #0
2400e2ae:	d036      	beq.n	2400e31e <dir_next+0x16a>
2400e2b0:	2300      	movs	r3, #0
						fs->wflag = 1;
2400e2b2:	e9cd 6402 	strd	r6, r4, [sp, #8]
2400e2b6:	465e      	mov	r6, fp
2400e2b8:	461c      	mov	r4, r3
2400e2ba:	46ab      	mov	fp, r5
2400e2bc:	4615      	mov	r5, r2
2400e2be:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e2c2:	462a      	mov	r2, r5
2400e2c4:	4631      	mov	r1, r6
2400e2c6:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
2400e2c8:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e2ca:	2301      	movs	r3, #1
2400e2cc:	f7fe fc46 	bl	2400cb5c <disk_write>
2400e2d0:	2800      	cmp	r0, #0
2400e2d2:	d1c2      	bne.n	2400e25a <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
2400e2d6:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e2d8:	1aea      	subs	r2, r5, r3
2400e2da:	69fb      	ldr	r3, [r7, #28]
2400e2dc:	429a      	cmp	r2, r3
2400e2de:	d212      	bcs.n	2400e306 <dir_next+0x152>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e2e0:	f897 a002 	ldrb.w	sl, [r7, #2]
2400e2e4:	f1ba 0f01 	cmp.w	sl, #1
2400e2e8:	d801      	bhi.n	2400e2ee <dir_next+0x13a>
2400e2ea:	e00c      	b.n	2400e306 <dir_next+0x152>
					wsect += fs->fsize;
2400e2ec:	69fb      	ldr	r3, [r7, #28]
2400e2ee:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e2f0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400e2f4:	2301      	movs	r3, #1
2400e2f6:	4631      	mov	r1, r6
2400e2f8:	462a      	mov	r2, r5
2400e2fa:	7878      	ldrb	r0, [r7, #1]
2400e2fc:	f7fe fc2e 	bl	2400cb5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e300:	f1ba 0f01 	cmp.w	sl, #1
2400e304:	d1f2      	bne.n	2400e2ec <dir_next+0x138>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400e306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2400e308:	3401      	adds	r4, #1
2400e30a:	1c5d      	adds	r5, r3, #1
2400e30c:	897b      	ldrh	r3, [r7, #10]
2400e30e:	42a3      	cmp	r3, r4
2400e310:	633d      	str	r5, [r7, #48]	; 0x30
2400e312:	d8d4      	bhi.n	2400e2be <dir_next+0x10a>
2400e314:	462a      	mov	r2, r5
2400e316:	4623      	mov	r3, r4
2400e318:	465d      	mov	r5, fp
2400e31a:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					fs->winsect -= n;							/* Restore window offset */
2400e31e:	1ad2      	subs	r2, r2, r3
2400e320:	9901      	ldr	r1, [sp, #4]
2400e322:	633a      	str	r2, [r7, #48]	; 0x30
2400e324:	e77d      	b.n	2400e222 <dir_next+0x6e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400e326:	2007      	movs	r0, #7
2400e328:	e75c      	b.n	2400e1e4 <dir_next+0x30>
		wsect = fs->winsect;	/* Current sector number */
2400e32a:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e32e:	f107 0b34 	add.w	fp, r7, #52	; 0x34
2400e332:	2301      	movs	r3, #1
2400e334:	7878      	ldrb	r0, [r7, #1]
2400e336:	4652      	mov	r2, sl
2400e338:	4659      	mov	r1, fp
2400e33a:	f7fe fc0f 	bl	2400cb5c <disk_write>
2400e33e:	2800      	cmp	r0, #0
2400e340:	d18b      	bne.n	2400e25a <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
2400e344:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e346:	ebaa 0203 	sub.w	r2, sl, r3
2400e34a:	69fb      	ldr	r3, [r7, #28]
2400e34c:	429a      	cmp	r2, r3
2400e34e:	d299      	bcs.n	2400e284 <dir_next+0xd0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e350:	78be      	ldrb	r6, [r7, #2]
2400e352:	2e01      	cmp	r6, #1
2400e354:	d801      	bhi.n	2400e35a <dir_next+0x1a6>
2400e356:	e795      	b.n	2400e284 <dir_next+0xd0>
2400e358:	69fb      	ldr	r3, [r7, #28]
					wsect += fs->fsize;
2400e35a:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e35c:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400e35e:	2301      	movs	r3, #1
2400e360:	4659      	mov	r1, fp
2400e362:	4652      	mov	r2, sl
2400e364:	7878      	ldrb	r0, [r7, #1]
2400e366:	f7fe fbf9 	bl	2400cb5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e36a:	2e01      	cmp	r6, #1
2400e36c:	d1f4      	bne.n	2400e358 <dir_next+0x1a4>
2400e36e:	e789      	b.n	2400e284 <dir_next+0xd0>
	return clst * fs->csize + fs->database;
2400e370:	897b      	ldrh	r3, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e372:	2200      	movs	r2, #0
2400e374:	e799      	b.n	2400e2aa <dir_next+0xf6>
2400e376:	bf00      	nop

2400e378 <dir_register>:
{
2400e378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400e37c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
2400e380:	b08d      	sub	sp, #52	; 0x34
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400e382:	f013 01a0 	ands.w	r1, r3, #160	; 0xa0
2400e386:	9304      	str	r3, [sp, #16]
2400e388:	f040 8312 	bne.w	2400e9b0 <dir_register+0x638>
	FATFS *fs = dp->obj.fs;
2400e38c:	6803      	ldr	r3, [r0, #0]
2400e38e:	4604      	mov	r4, r0
2400e390:	9303      	str	r3, [sp, #12]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400e392:	68db      	ldr	r3, [r3, #12]
2400e394:	881a      	ldrh	r2, [r3, #0]
2400e396:	2a00      	cmp	r2, #0
2400e398:	f000 8473 	beq.w	2400ec82 <dir_register+0x90a>
2400e39c:	4689      	mov	r9, r1
2400e39e:	f833 2f02 	ldrh.w	r2, [r3, #2]!
2400e3a2:	f109 0901 	add.w	r9, r9, #1
2400e3a6:	2a00      	cmp	r2, #0
2400e3a8:	d1f9      	bne.n	2400e39e <dir_register+0x26>
	mem_cpy(sn, dp->fn, 12);
2400e3aa:	f104 0624 	add.w	r6, r4, #36	; 0x24
			*d++ = *s++;
2400e3ae:	ab0c      	add	r3, sp, #48	; 0x30
2400e3b0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
2400e3b4:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2400e3b8:	9b04      	ldr	r3, [sp, #16]
2400e3ba:	07dd      	lsls	r5, r3, #31
2400e3bc:	f140 8153 	bpl.w	2400e666 <dir_register+0x2ee>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400e3c0:	2340      	movs	r3, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e3c2:	f8cd 9014 	str.w	r9, [sp, #20]
			*d++ = *s++;
2400e3c6:	f89d a02e 	ldrb.w	sl, [sp, #46]	; 0x2e
		for (n = 1; n < 100; n++) {
2400e3ca:	2701      	movs	r7, #1
			*d++ = *s++;
2400e3cc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e3d0:	f04f 0b20 	mov.w	fp, #32
				if (sr & 0x10000) sr ^= 0x11021;
2400e3d4:	4db1      	ldr	r5, [pc, #708]	; (2400e69c <dir_register+0x324>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e3d6:	f8dd 900c 	ldr.w	r9, [sp, #12]
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400e3da:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			*d++ = *s++;
2400e3de:	9002      	str	r0, [sp, #8]
2400e3e0:	9101      	str	r1, [sp, #4]
2400e3e2:	9b02      	ldr	r3, [sp, #8]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400e3e4:	2f05      	cmp	r7, #5
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2400e3e6:	f8d9 100c 	ldr.w	r1, [r9, #12]
			*d++ = *s++;
2400e3ea:	6263      	str	r3, [r4, #36]	; 0x24
2400e3ec:	9b01      	ldr	r3, [sp, #4]
2400e3ee:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
2400e3f2:	62a3      	str	r3, [r4, #40]	; 0x28
2400e3f4:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400e3f8:	f240 814e 	bls.w	2400e698 <dir_register+0x320>
		while (*lfn) {	/* Create a CRC */
2400e3fc:	880a      	ldrh	r2, [r1, #0]
2400e3fe:	2a00      	cmp	r2, #0
2400e400:	f000 814a 	beq.w	2400e698 <dir_register+0x320>
				sr = (sr << 1) + (wc & 1);
2400e404:	468c      	mov	ip, r1
2400e406:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
2400e40a:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
2400e40c:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e410:	e009      	b.n	2400e426 <dir_register+0xae>
				sr = (sr << 1) + (wc & 1);
2400e412:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e416:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
2400e41a:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
2400e41e:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e422:	bf18      	it	ne
2400e424:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
2400e426:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
2400e42a:	0893      	lsrs	r3, r2, #2
2400e42c:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
2400e42e:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e432:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
2400e434:	f003 0301 	and.w	r3, r3, #1
2400e438:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e43c:	bf48      	it	mi
2400e43e:	ea8e 0e05 	eormi.w	lr, lr, r5
				wc >>= 1;
2400e442:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
2400e444:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e448:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
2400e44c:	f001 0101 	and.w	r1, r1, #1
				wc >>= 1;
2400e450:	ea4f 3ed2 	mov.w	lr, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
2400e454:	bf18      	it	ne
2400e456:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
2400e458:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e45c:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400e45e:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
2400e462:	bf48      	it	mi
2400e464:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400e466:	f003 0301 	and.w	r3, r3, #1
2400e46a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e46e:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400e470:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
2400e474:	bf48      	it	mi
2400e476:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400e478:	f000 0001 	and.w	r0, r0, #1
2400e47c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e480:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400e482:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
2400e486:	bf48      	it	mi
2400e488:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400e48a:	f001 0101 	and.w	r1, r1, #1
2400e48e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e492:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400e494:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
2400e498:	bf48      	it	mi
2400e49a:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400e49c:	f003 0301 	and.w	r3, r3, #1
2400e4a0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e4a4:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400e4a6:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
2400e4aa:	bf48      	it	mi
2400e4ac:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400e4ae:	f000 0001 	and.w	r0, r0, #1
2400e4b2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e4b6:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400e4b8:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
2400e4bc:	bf48      	it	mi
2400e4be:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400e4c0:	f001 0101 	and.w	r1, r1, #1
2400e4c4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e4c8:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400e4ca:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
2400e4ce:	bf48      	it	mi
2400e4d0:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400e4d2:	f003 0301 	and.w	r3, r3, #1
2400e4d6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e4da:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400e4dc:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
2400e4e0:	bf48      	it	mi
2400e4e2:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400e4e4:	f000 0001 	and.w	r0, r0, #1
2400e4e8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e4ec:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400e4ee:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
2400e4f2:	bf48      	it	mi
2400e4f4:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400e4f6:	f001 0101 	and.w	r1, r1, #1
2400e4fa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e4fe:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400e500:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
2400e504:	bf48      	it	mi
2400e506:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400e508:	f003 0301 	and.w	r3, r3, #1
2400e50c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e510:	0400      	lsls	r0, r0, #16
2400e512:	bf48      	it	mi
2400e514:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400e516:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e51a:	040a      	lsls	r2, r1, #16
		while (*lfn) {	/* Create a CRC */
2400e51c:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
2400e520:	bf48      	it	mi
2400e522:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400e524:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400e528:	041b      	lsls	r3, r3, #16
2400e52a:	bf48      	it	mi
2400e52c:	ea8e 0e05 	eormi.w	lr, lr, r5
		while (*lfn) {	/* Create a CRC */
2400e530:	2a00      	cmp	r2, #0
2400e532:	f47f af6e 	bne.w	2400e412 <dir_register+0x9a>
		c = (BYTE)((seq % 16) + '0');
2400e536:	f00e 010f 	and.w	r1, lr, #15
2400e53a:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400e53e:	2a39      	cmp	r2, #57	; 0x39
2400e540:	bf88      	it	hi
2400e542:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400e546:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
2400e54a:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
2400e54e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	} while (seq);
2400e552:	f240 8191 	bls.w	2400e878 <dir_register+0x500>
		c = (BYTE)((seq % 16) + '0');
2400e556:	f001 000f 	and.w	r0, r1, #15
2400e55a:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400e55e:	2a39      	cmp	r2, #57	; 0x39
2400e560:	bf88      	it	hi
2400e562:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400e566:	290f      	cmp	r1, #15
		seq /= 16;
2400e568:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
2400e56c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	} while (seq);
2400e570:	f240 8188 	bls.w	2400e884 <dir_register+0x50c>
		c = (BYTE)((seq % 16) + '0');
2400e574:	f000 010f 	and.w	r1, r0, #15
2400e578:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400e57c:	2a39      	cmp	r2, #57	; 0x39
2400e57e:	bf88      	it	hi
2400e580:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400e584:	280f      	cmp	r0, #15
		seq /= 16;
2400e586:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
2400e58a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	} while (seq);
2400e58e:	f240 8188 	bls.w	2400e8a2 <dir_register+0x52a>
		c = (BYTE)((seq % 16) + '0');
2400e592:	f001 000f 	and.w	r0, r1, #15
2400e596:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400e59a:	2a39      	cmp	r2, #57	; 0x39
2400e59c:	bf88      	it	hi
2400e59e:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400e5a2:	290f      	cmp	r1, #15
		seq /= 16;
2400e5a4:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
2400e5a8:	f88d 2020 	strb.w	r2, [sp, #32]
	} while (seq);
2400e5ac:	f240 817f 	bls.w	2400e8ae <dir_register+0x536>
		c = (BYTE)((seq % 16) + '0');
2400e5b0:	f000 010f 	and.w	r1, r0, #15
2400e5b4:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400e5b8:	2a39      	cmp	r2, #57	; 0x39
2400e5ba:	bf88      	it	hi
2400e5bc:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400e5c0:	280f      	cmp	r0, #15
		seq /= 16;
2400e5c2:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
2400e5c6:	f88d 201f 	strb.w	r2, [sp, #31]
	} while (seq);
2400e5ca:	f240 8176 	bls.w	2400e8ba <dir_register+0x542>
		c = (BYTE)((seq % 16) + '0');
2400e5ce:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
2400e5d2:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
2400e5d6:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400e5da:	2a39      	cmp	r2, #57	; 0x39
2400e5dc:	bf88      	it	hi
2400e5de:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400e5e2:	290f      	cmp	r1, #15
		ns[i--] = c;
2400e5e4:	f88d 201e 	strb.w	r2, [sp, #30]
	} while (seq);
2400e5e8:	f240 816d 	bls.w	2400e8c6 <dir_register+0x54e>
		c = (BYTE)((seq % 16) + '0');
2400e5ec:	f00e 010f 	and.w	r1, lr, #15
2400e5f0:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400e5f4:	2a39      	cmp	r2, #57	; 0x39
2400e5f6:	bf88      	it	hi
2400e5f8:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400e5fc:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
2400e600:	f88d 201d 	strb.w	r2, [sp, #29]
	} while (seq);
2400e604:	f240 8144 	bls.w	2400e890 <dir_register+0x518>
		ns[i--] = c;
2400e608:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
2400e60c:	f104 0123 	add.w	r1, r4, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400e610:	2200      	movs	r2, #0
2400e612:	e002      	b.n	2400e61a <dir_register+0x2a2>
2400e614:	3201      	adds	r2, #1
2400e616:	4562      	cmp	r2, ip
2400e618:	d003      	beq.n	2400e622 <dir_register+0x2aa>
2400e61a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
2400e61e:	2b20      	cmp	r3, #32
2400e620:	d1f8      	bne.n	2400e614 <dir_register+0x29c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e622:	f1bc 0f07 	cmp.w	ip, #7
2400e626:	d93d      	bls.n	2400e6a4 <dir_register+0x32c>
2400e628:	1c50      	adds	r0, r2, #1
2400e62a:	f806 b002 	strb.w	fp, [r6, r2]
	} while (j < 8);
2400e62e:	2807      	cmp	r0, #7
2400e630:	d809      	bhi.n	2400e646 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e632:	1c42      	adds	r2, r0, #1
2400e634:	2120      	movs	r1, #32
2400e636:	2a08      	cmp	r2, #8
2400e638:	f1c0 0208 	rsb	r2, r0, #8
2400e63c:	4430      	add	r0, r6
2400e63e:	bf88      	it	hi
2400e640:	2201      	movhi	r2, #1
2400e642:	f006 fbdb 	bl	24014dfc <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400e646:	4620      	mov	r0, r4
2400e648:	f7ff fa7c 	bl	2400db44 <dir_find>
2400e64c:	4601      	mov	r1, r0
			if (res != FR_OK) break;
2400e64e:	2800      	cmp	r0, #0
2400e650:	f040 80a6 	bne.w	2400e7a0 <dir_register+0x428>
		for (n = 1; n < 100; n++) {
2400e654:	3701      	adds	r7, #1
2400e656:	2f64      	cmp	r7, #100	; 0x64
2400e658:	f47f aec3 	bne.w	2400e3e2 <dir_register+0x6a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2400e65c:	2107      	movs	r1, #7
}
2400e65e:	4608      	mov	r0, r1
2400e660:	b00d      	add	sp, #52	; 0x34
2400e662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400e666:	f013 0802 	ands.w	r8, r3, #2
2400e66a:	9d03      	ldr	r5, [sp, #12]
2400e66c:	f000 80a5 	beq.w	2400e7ba <dir_register+0x442>
2400e670:	4a0b      	ldr	r2, [pc, #44]	; (2400e6a0 <dir_register+0x328>)
2400e672:	f109 030c 	add.w	r3, r9, #12
	res = dir_sdi(dp, 0);
2400e676:	2100      	movs	r1, #0
2400e678:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400e67a:	fba2 2303 	umull	r2, r3, r2, r3
2400e67e:	ea4f 0893 	mov.w	r8, r3, lsr #2
	res = dir_sdi(dp, 0);
2400e682:	f7ff f9b3 	bl	2400d9ec <dir_sdi>
	if (res == FR_OK) {
2400e686:	4601      	mov	r1, r0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400e688:	f108 0b01 	add.w	fp, r8, #1
	if (res == FR_OK) {
2400e68c:	2800      	cmp	r0, #0
2400e68e:	f000 809e 	beq.w	2400e7ce <dir_register+0x456>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400e692:	2904      	cmp	r1, #4
2400e694:	d0e2      	beq.n	2400e65c <dir_register+0x2e4>
2400e696:	e7e2      	b.n	2400e65e <dir_register+0x2e6>
2400e698:	46be      	mov	lr, r7
2400e69a:	e74c      	b.n	2400e536 <dir_register+0x1be>
2400e69c:	00011021 	.word	0x00011021
2400e6a0:	4ec4ec4f 	.word	0x4ec4ec4f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e6a4:	f10c 0330 	add.w	r3, ip, #48	; 0x30
2400e6a8:	f10c 0c01 	add.w	ip, ip, #1
2400e6ac:	eb0d 0103 	add.w	r1, sp, r3
2400e6b0:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400e6b4:	54b1      	strb	r1, [r6, r2]
2400e6b6:	3201      	adds	r2, #1
	} while (j < 8);
2400e6b8:	2a07      	cmp	r2, #7
2400e6ba:	d8c4      	bhi.n	2400e646 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e6bc:	f1bc 0f08 	cmp.w	ip, #8
2400e6c0:	f000 80a3 	beq.w	2400e80a <dir_register+0x492>
2400e6c4:	f10c 0330 	add.w	r3, ip, #48	; 0x30
	} while (j < 8);
2400e6c8:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e6ca:	f102 0001 	add.w	r0, r2, #1
2400e6ce:	eb0d 0103 	add.w	r1, sp, r3
2400e6d2:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400e6d6:	54b1      	strb	r1, [r6, r2]
2400e6d8:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
2400e6dc:	d0b3      	beq.n	2400e646 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e6de:	2908      	cmp	r1, #8
2400e6e0:	f000 809b 	beq.w	2400e81a <dir_register+0x4a2>
2400e6e4:	f10c 0331 	add.w	r3, ip, #49	; 0x31
	} while (j < 8);
2400e6e8:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e6ea:	eb0d 0103 	add.w	r1, sp, r3
2400e6ee:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400e6f2:	5431      	strb	r1, [r6, r0]
2400e6f4:	f10c 0102 	add.w	r1, ip, #2
2400e6f8:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400e6fc:	d0a3      	beq.n	2400e646 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e6fe:	2908      	cmp	r1, #8
2400e700:	f000 8093 	beq.w	2400e82a <dir_register+0x4b2>
2400e704:	f10c 0332 	add.w	r3, ip, #50	; 0x32
	} while (j < 8);
2400e708:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e70a:	eb0d 0103 	add.w	r1, sp, r3
2400e70e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400e712:	5431      	strb	r1, [r6, r0]
2400e714:	f10c 0103 	add.w	r1, ip, #3
2400e718:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400e71c:	d093      	beq.n	2400e646 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e71e:	2908      	cmp	r1, #8
2400e720:	f000 808b 	beq.w	2400e83a <dir_register+0x4c2>
2400e724:	f10c 0333 	add.w	r3, ip, #51	; 0x33
	} while (j < 8);
2400e728:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e72a:	eb0d 0103 	add.w	r1, sp, r3
2400e72e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400e732:	5431      	strb	r1, [r6, r0]
2400e734:	f10c 0104 	add.w	r1, ip, #4
2400e738:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400e73c:	d083      	beq.n	2400e646 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e73e:	2908      	cmp	r1, #8
2400e740:	f000 8083 	beq.w	2400e84a <dir_register+0x4d2>
2400e744:	f10c 0334 	add.w	r3, ip, #52	; 0x34
	} while (j < 8);
2400e748:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e74a:	eb0d 0103 	add.w	r1, sp, r3
2400e74e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400e752:	5431      	strb	r1, [r6, r0]
2400e754:	f10c 0105 	add.w	r1, ip, #5
2400e758:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400e75c:	f43f af73 	beq.w	2400e646 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e760:	2908      	cmp	r1, #8
2400e762:	d07a      	beq.n	2400e85a <dir_register+0x4e2>
2400e764:	f10c 0335 	add.w	r3, ip, #53	; 0x35
	} while (j < 8);
2400e768:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e76a:	eb0d 0103 	add.w	r1, sp, r3
2400e76e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400e772:	5431      	strb	r1, [r6, r0]
2400e774:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
2400e778:	f43f af65 	beq.w	2400e646 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e77c:	f1bc 0f01 	cmp.w	ip, #1
2400e780:	d173      	bne.n	2400e86a <dir_register+0x4f2>
2400e782:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
	} while (j < 8);
2400e786:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e788:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
2400e78a:	f47f af5c 	bne.w	2400e646 <dir_register+0x2ce>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400e78e:	4620      	mov	r0, r4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e790:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400e794:	f7ff f9d6 	bl	2400db44 <dir_find>
2400e798:	4601      	mov	r1, r0
			if (res != FR_OK) break;
2400e79a:	2800      	cmp	r0, #0
2400e79c:	f43f af5a 	beq.w	2400e654 <dir_register+0x2dc>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2400e7a0:	2804      	cmp	r0, #4
2400e7a2:	f8dd 9014 	ldr.w	r9, [sp, #20]
2400e7a6:	f47f af5a 	bne.w	2400e65e <dir_register+0x2e6>
		dp->fn[NSFLAG] = sn[NSFLAG];
2400e7aa:	9b04      	ldr	r3, [sp, #16]
	FATFS *fs = dp->obj.fs;
2400e7ac:	6825      	ldr	r5, [r4, #0]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400e7ae:	f013 0802 	ands.w	r8, r3, #2
		dp->fn[NSFLAG] = sn[NSFLAG];
2400e7b2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400e7b6:	f47f af5b 	bne.w	2400e670 <dir_register+0x2f8>
	res = dir_sdi(dp, 0);
2400e7ba:	2100      	movs	r1, #0
2400e7bc:	4620      	mov	r0, r4
2400e7be:	f7ff f915 	bl	2400d9ec <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400e7c2:	f04f 0b01 	mov.w	fp, #1
	if (res == FR_OK) {
2400e7c6:	4601      	mov	r1, r0
2400e7c8:	2800      	cmp	r0, #0
2400e7ca:	f47f af62 	bne.w	2400e692 <dir_register+0x31a>
		n = 0;
2400e7ce:	4607      	mov	r7, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e7d0:	f105 0a34 	add.w	sl, r5, #52	; 0x34
2400e7d4:	f8cd 8004 	str.w	r8, [sp, #4]
			res = move_window(fs, dp->sect);
2400e7d8:	69e6      	ldr	r6, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e7da:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
2400e7de:	4546      	cmp	r6, r8
2400e7e0:	d078      	beq.n	2400e8d4 <dir_register+0x55c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e7e2:	78eb      	ldrb	r3, [r5, #3]
2400e7e4:	2b00      	cmp	r3, #0
2400e7e6:	f040 80bb 	bne.w	2400e960 <dir_register+0x5e8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400e7ea:	2301      	movs	r3, #1
2400e7ec:	4632      	mov	r2, r6
2400e7ee:	4651      	mov	r1, sl
2400e7f0:	7868      	ldrb	r0, [r5, #1]
2400e7f2:	f7fe f9a3 	bl	2400cb3c <disk_read>
2400e7f6:	2800      	cmp	r0, #0
2400e7f8:	d06b      	beq.n	2400e8d2 <dir_register+0x55a>
				res = FR_DISK_ERR;
2400e7fa:	2101      	movs	r1, #1
			fs->winsect = sector;
2400e7fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
2400e800:	4608      	mov	r0, r1
			fs->winsect = sector;
2400e802:	632b      	str	r3, [r5, #48]	; 0x30
}
2400e804:	b00d      	add	sp, #52	; 0x34
2400e806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
2400e80a:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e80c:	f102 0001 	add.w	r0, r2, #1
2400e810:	f806 b002 	strb.w	fp, [r6, r2]
	} while (j < 8);
2400e814:	f47f af0d 	bne.w	2400e632 <dir_register+0x2ba>
2400e818:	e715      	b.n	2400e646 <dir_register+0x2ce>
2400e81a:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e81c:	f806 b000 	strb.w	fp, [r6, r0]
2400e820:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400e824:	f47f af05 	bne.w	2400e632 <dir_register+0x2ba>
2400e828:	e70d      	b.n	2400e646 <dir_register+0x2ce>
2400e82a:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e82c:	f806 b000 	strb.w	fp, [r6, r0]
2400e830:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400e834:	f47f aefd 	bne.w	2400e632 <dir_register+0x2ba>
2400e838:	e705      	b.n	2400e646 <dir_register+0x2ce>
2400e83a:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e83c:	f806 b000 	strb.w	fp, [r6, r0]
2400e840:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400e844:	f47f aef5 	bne.w	2400e632 <dir_register+0x2ba>
2400e848:	e6fd      	b.n	2400e646 <dir_register+0x2ce>
2400e84a:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e84c:	f806 b000 	strb.w	fp, [r6, r0]
2400e850:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400e854:	f47f aeed 	bne.w	2400e632 <dir_register+0x2ba>
2400e858:	e6f5      	b.n	2400e646 <dir_register+0x2ce>
2400e85a:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e85c:	f806 b000 	strb.w	fp, [r6, r0]
2400e860:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
2400e864:	f47f aee5 	bne.w	2400e632 <dir_register+0x2ba>
2400e868:	e6ed      	b.n	2400e646 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e86a:	f806 b001 	strb.w	fp, [r6, r1]
	} while (j < 8);
2400e86e:	2a00      	cmp	r2, #0
2400e870:	f47f aee9 	bne.w	2400e646 <dir_register+0x2ce>
2400e874:	2007      	movs	r0, #7
2400e876:	e6dc      	b.n	2400e632 <dir_register+0x2ba>
	ns[i] = '~';
2400e878:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400e87a:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
2400e87e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400e882:	e6c3      	b.n	2400e60c <dir_register+0x294>
	ns[i] = '~';
2400e884:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400e886:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
2400e88a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400e88e:	e6bd      	b.n	2400e60c <dir_register+0x294>
	ns[i] = '~';
2400e890:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e892:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400e896:	f88d 201c 	strb.w	r2, [sp, #28]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400e89a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
2400e89e:	4662      	mov	r2, ip
2400e8a0:	e710      	b.n	2400e6c4 <dir_register+0x34c>
	ns[i] = '~';
2400e8a2:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400e8a4:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
2400e8a8:	f88d 2020 	strb.w	r2, [sp, #32]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400e8ac:	e6ae      	b.n	2400e60c <dir_register+0x294>
	ns[i] = '~';
2400e8ae:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400e8b0:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
2400e8b4:	f88d 201f 	strb.w	r2, [sp, #31]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400e8b8:	e6a8      	b.n	2400e60c <dir_register+0x294>
	ns[i] = '~';
2400e8ba:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400e8bc:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
2400e8c0:	f88d 201e 	strb.w	r2, [sp, #30]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400e8c4:	e6a2      	b.n	2400e60c <dir_register+0x294>
	ns[i] = '~';
2400e8c6:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400e8c8:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400e8cc:	f88d 201d 	strb.w	r2, [sp, #29]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400e8d0:	e69c      	b.n	2400e60c <dir_register+0x294>
			fs->winsect = sector;
2400e8d2:	632e      	str	r6, [r5, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400e8d4:	6a23      	ldr	r3, [r4, #32]
2400e8d6:	781b      	ldrb	r3, [r3, #0]
2400e8d8:	2be5      	cmp	r3, #229	; 0xe5
2400e8da:	d00d      	beq.n	2400e8f8 <dir_register+0x580>
2400e8dc:	fab3 f283 	clz	r2, r3
2400e8e0:	0952      	lsrs	r2, r2, #5
2400e8e2:	b14b      	cbz	r3, 2400e8f8 <dir_register+0x580>
				n = 0;					/* Not a blank entry. Restart to search */
2400e8e4:	4617      	mov	r7, r2
			res = dir_next(dp, 1);
2400e8e6:	2101      	movs	r1, #1
2400e8e8:	4620      	mov	r0, r4
2400e8ea:	f7ff fc63 	bl	2400e1b4 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
2400e8ee:	2800      	cmp	r0, #0
2400e8f0:	f43f af72 	beq.w	2400e7d8 <dir_register+0x460>
2400e8f4:	4601      	mov	r1, r0
2400e8f6:	e6cc      	b.n	2400e692 <dir_register+0x31a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
2400e8f8:	3701      	adds	r7, #1
2400e8fa:	45bb      	cmp	fp, r7
2400e8fc:	d1f3      	bne.n	2400e8e6 <dir_register+0x56e>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2400e8fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
2400e902:	f1b8 0f00 	cmp.w	r8, #0
2400e906:	d155      	bne.n	2400e9b4 <dir_register+0x63c>
		res = move_window(fs, dp->sect);
2400e908:	69e1      	ldr	r1, [r4, #28]
2400e90a:	9803      	ldr	r0, [sp, #12]
2400e90c:	f7fe fad0 	bl	2400ceb0 <move_window>
		if (res == FR_OK) {
2400e910:	4601      	mov	r1, r0
2400e912:	2800      	cmp	r0, #0
2400e914:	f47f aea3 	bne.w	2400e65e <dir_register+0x2e6>
		*d++ = (BYTE)val;
2400e918:	2220      	movs	r2, #32
2400e91a:	9001      	str	r0, [sp, #4]
2400e91c:	6a20      	ldr	r0, [r4, #32]
2400e91e:	f006 fa6d 	bl	24014dfc <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2400e922:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400e924:	f104 0225 	add.w	r2, r4, #37	; 0x25
2400e928:	9901      	ldr	r1, [sp, #4]
2400e92a:	1a9a      	subs	r2, r3, r2
2400e92c:	2a02      	cmp	r2, #2
2400e92e:	f240 81ab 	bls.w	2400ec88 <dir_register+0x910>
			*d++ = *s++;
2400e932:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400e934:	601a      	str	r2, [r3, #0]
2400e936:	6aa2      	ldr	r2, [r4, #40]	; 0x28
2400e938:	605a      	str	r2, [r3, #4]
2400e93a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
2400e93e:	721a      	strb	r2, [r3, #8]
2400e940:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
2400e944:	725a      	strb	r2, [r3, #9]
2400e946:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
2400e94a:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
2400e94c:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2400e94e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400e952:	6a20      	ldr	r0, [r4, #32]
2400e954:	f003 0318 	and.w	r3, r3, #24
2400e958:	7303      	strb	r3, [r0, #12]
			fs->wflag = 1;
2400e95a:	9b03      	ldr	r3, [sp, #12]
2400e95c:	70da      	strb	r2, [r3, #3]
2400e95e:	e67e      	b.n	2400e65e <dir_register+0x2e6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e960:	2301      	movs	r3, #1
2400e962:	4642      	mov	r2, r8
2400e964:	4651      	mov	r1, sl
2400e966:	7868      	ldrb	r0, [r5, #1]
2400e968:	f7fe f8f8 	bl	2400cb5c <disk_write>
2400e96c:	b9d8      	cbnz	r0, 2400e9a6 <dir_register+0x62e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e96e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
			fs->wflag = 0;
2400e970:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e972:	eba8 0103 	sub.w	r1, r8, r3
2400e976:	69eb      	ldr	r3, [r5, #28]
2400e978:	4299      	cmp	r1, r3
2400e97a:	f4bf af36 	bcs.w	2400e7ea <dir_register+0x472>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e97e:	f895 9002 	ldrb.w	r9, [r5, #2]
2400e982:	f1b9 0f01 	cmp.w	r9, #1
2400e986:	d801      	bhi.n	2400e98c <dir_register+0x614>
2400e988:	e72f      	b.n	2400e7ea <dir_register+0x472>
					wsect += fs->fsize;
2400e98a:	69eb      	ldr	r3, [r5, #28]
2400e98c:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e98e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400e992:	2301      	movs	r3, #1
2400e994:	4651      	mov	r1, sl
2400e996:	4642      	mov	r2, r8
2400e998:	7868      	ldrb	r0, [r5, #1]
2400e99a:	f7fe f8df 	bl	2400cb5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e99e:	f1b9 0f01 	cmp.w	r9, #1
2400e9a2:	d1f2      	bne.n	2400e98a <dir_register+0x612>
2400e9a4:	e721      	b.n	2400e7ea <dir_register+0x472>
2400e9a6:	2101      	movs	r1, #1
}
2400e9a8:	4608      	mov	r0, r1
2400e9aa:	b00d      	add	sp, #52	; 0x34
2400e9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400e9b0:	2106      	movs	r1, #6
2400e9b2:	e654      	b.n	2400e65e <dir_register+0x2e6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2400e9b4:	6961      	ldr	r1, [r4, #20]
2400e9b6:	4620      	mov	r0, r4
2400e9b8:	eba1 1148 	sub.w	r1, r1, r8, lsl #5
2400e9bc:	f7ff f816 	bl	2400d9ec <dir_sdi>
		if (res == FR_OK) {
2400e9c0:	4601      	mov	r1, r0
2400e9c2:	2800      	cmp	r0, #0
2400e9c4:	f47f ae4b 	bne.w	2400e65e <dir_register+0x2e6>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400e9c8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400e9cc:	260f      	movs	r6, #15
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400e9ce:	f64f 77fd 	movw	r7, #65533	; 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
2400e9d2:	f64f 79ff 	movw	r9, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400e9d6:	01d3      	lsls	r3, r2, #7
	*ptr++ = (BYTE)val; val >>= 8;
2400e9d8:	f8dd a00c 	ldr.w	sl, [sp, #12]
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400e9dc:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
2400e9e0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400e9e4:	4413      	add	r3, r2
2400e9e6:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e9ea:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e9ee:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
2400e9f2:	fa53 f282 	uxtab	r2, r3, r2
2400e9f6:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e9fa:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e9fe:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
2400ea02:	fa52 f383 	uxtab	r3, r2, r3
2400ea06:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400ea0a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400ea0e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
2400ea12:	fa53 f282 	uxtab	r2, r3, r2
2400ea16:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400ea1a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400ea1e:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
2400ea22:	fa52 f383 	uxtab	r3, r2, r3
2400ea26:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400ea2a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400ea2e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400ea32:	fa53 f282 	uxtab	r2, r3, r2
2400ea36:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400ea3a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400ea3e:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
2400ea42:	fa52 f383 	uxtab	r3, r2, r3
2400ea46:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400ea4a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400ea4e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400ea52:	fa53 f282 	uxtab	r2, r3, r2
2400ea56:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400ea5a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400ea5e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
2400ea62:	fa52 f383 	uxtab	r3, r2, r3
2400ea66:	f3c3 0546 	ubfx	r5, r3, #1, #7
2400ea6a:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
2400ea6e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
2400ea72:	fa53 f585 	uxtab	r5, r3, r5
2400ea76:	b2ed      	uxtb	r5, r5
	} while (--n);
2400ea78:	e02a      	b.n	2400ead0 <dir_register+0x758>
	*ptr++ = (BYTE)val; val >>= 8;
2400ea7a:	f8a3 9003 	strh.w	r9, [r3, #3]
2400ea7e:	f8a3 9005 	strh.w	r9, [r3, #5]
2400ea82:	f8a3 9007 	strh.w	r9, [r3, #7]
2400ea86:	f8a3 9009 	strh.w	r9, [r3, #9]
2400ea8a:	f8a3 900e 	strh.w	r9, [r3, #14]
2400ea8e:	f8a3 9010 	strh.w	r9, [r3, #16]
2400ea92:	f8a3 9012 	strh.w	r9, [r3, #18]
2400ea96:	f8a3 9014 	strh.w	r9, [r3, #20]
2400ea9a:	f8a3 9016 	strh.w	r9, [r3, #22]
2400ea9e:	f8a3 9018 	strh.w	r9, [r3, #24]
2400eaa2:	f8a3 901c 	strh.w	r9, [r3, #28]
2400eaa6:	f8a3 901e 	strh.w	r9, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400eaaa:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
2400eaae:	f883 c000 	strb.w	ip, [r3]
				fs->wflag = 1;
2400eab2:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
2400eab4:	2100      	movs	r1, #0
2400eab6:	4620      	mov	r0, r4
				fs->wflag = 1;
2400eab8:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
2400eabc:	f7ff fb7a 	bl	2400e1b4 <dir_next>
			} while (res == FR_OK && --nent);
2400eac0:	4601      	mov	r1, r0
2400eac2:	2800      	cmp	r0, #0
2400eac4:	f47f adcb 	bne.w	2400e65e <dir_register+0x2e6>
2400eac8:	f1b8 0801 	subs.w	r8, r8, #1
2400eacc:	f43f af1c 	beq.w	2400e908 <dir_register+0x590>
				res = move_window(fs, dp->sect);
2400ead0:	69e1      	ldr	r1, [r4, #28]
2400ead2:	4650      	mov	r0, sl
2400ead4:	f7fe f9ec 	bl	2400ceb0 <move_window>
2400ead8:	4601      	mov	r1, r0
				if (res != FR_OK) break;
2400eada:	2800      	cmp	r0, #0
2400eadc:	f47f adbf 	bne.w	2400e65e <dir_register+0x2e6>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400eae0:	fa5f fc88 	uxtb.w	ip, r8
2400eae4:	6a23      	ldr	r3, [r4, #32]
2400eae6:	f8da 100c 	ldr.w	r1, [sl, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400eaea:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400eaee:	8358      	strh	r0, [r3, #26]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
2400eaf0:	735d      	strb	r5, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400eaf2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400eaf6:	f8a3 600b 	strh.w	r6, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400eafa:	eb02 0280 	add.w	r2, r2, r0, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eafe:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
2400eb02:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400eb06:	7058      	strb	r0, [r3, #1]
2400eb08:	0a00      	lsrs	r0, r0, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eb0a:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
2400eb0e:	7098      	strb	r0, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eb10:	0050      	lsls	r0, r2, #1
2400eb12:	45be      	cmp	lr, r7
2400eb14:	d8b1      	bhi.n	2400ea7a <dir_register+0x702>
2400eb16:	3201      	adds	r2, #1
2400eb18:	f831 e012 	ldrh.w	lr, [r1, r2, lsl #1]
2400eb1c:	0052      	lsls	r2, r2, #1
2400eb1e:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400eb22:	f883 e003 	strb.w	lr, [r3, #3]
2400eb26:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eb2a:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400eb2e:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eb32:	45bb      	cmp	fp, r7
2400eb34:	d8a3      	bhi.n	2400ea7e <dir_register+0x706>
2400eb36:	440a      	add	r2, r1
2400eb38:	f8b2 e002 	ldrh.w	lr, [r2, #2]
2400eb3c:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400eb40:	f883 e005 	strb.w	lr, [r3, #5]
2400eb44:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eb48:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400eb4c:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eb50:	45bb      	cmp	fp, r7
2400eb52:	d896      	bhi.n	2400ea82 <dir_register+0x70a>
2400eb54:	f8b2 e004 	ldrh.w	lr, [r2, #4]
2400eb58:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400eb5c:	f883 e007 	strb.w	lr, [r3, #7]
2400eb60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eb64:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400eb68:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eb6c:	45bb      	cmp	fp, r7
2400eb6e:	d88a      	bhi.n	2400ea86 <dir_register+0x70e>
2400eb70:	f8b2 e006 	ldrh.w	lr, [r2, #6]
2400eb74:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400eb78:	f883 e009 	strb.w	lr, [r3, #9]
2400eb7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eb80:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400eb84:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eb88:	45bb      	cmp	fp, r7
2400eb8a:	f63f af7e 	bhi.w	2400ea8a <dir_register+0x712>
2400eb8e:	f8b2 e008 	ldrh.w	lr, [r2, #8]
2400eb92:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400eb96:	f883 e00e 	strb.w	lr, [r3, #14]
2400eb9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eb9e:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400eba2:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400eba6:	45bb      	cmp	fp, r7
2400eba8:	f63f af71 	bhi.w	2400ea8e <dir_register+0x716>
2400ebac:	f8b2 e00a 	ldrh.w	lr, [r2, #10]
2400ebb0:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400ebb4:	f883 e010 	strb.w	lr, [r3, #16]
2400ebb8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ebbc:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400ebc0:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ebc4:	45bb      	cmp	fp, r7
2400ebc6:	f63f af64 	bhi.w	2400ea92 <dir_register+0x71a>
2400ebca:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
2400ebce:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400ebd2:	f883 e012 	strb.w	lr, [r3, #18]
2400ebd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ebda:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400ebde:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ebe2:	45bb      	cmp	fp, r7
2400ebe4:	f63f af57 	bhi.w	2400ea96 <dir_register+0x71e>
2400ebe8:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
2400ebec:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400ebf0:	f883 e014 	strb.w	lr, [r3, #20]
2400ebf4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ebf8:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400ebfc:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ec00:	45bb      	cmp	fp, r7
2400ec02:	f63f af4a 	bhi.w	2400ea9a <dir_register+0x722>
2400ec06:	f8b2 e010 	ldrh.w	lr, [r2, #16]
2400ec0a:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400ec0e:	f883 e016 	strb.w	lr, [r3, #22]
2400ec12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ec16:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400ec1a:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ec1e:	45bb      	cmp	fp, r7
2400ec20:	f63f af3d 	bhi.w	2400ea9e <dir_register+0x726>
2400ec24:	f8b2 e012 	ldrh.w	lr, [r2, #18]
2400ec28:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400ec2c:	f883 e018 	strb.w	lr, [r3, #24]
2400ec30:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ec34:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400ec38:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ec3c:	45bb      	cmp	fp, r7
2400ec3e:	f63f af30 	bhi.w	2400eaa2 <dir_register+0x72a>
2400ec42:	f8b2 e014 	ldrh.w	lr, [r2, #20]
2400ec46:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400ec4a:	f883 e01c 	strb.w	lr, [r3, #28]
2400ec4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ec52:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400ec56:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400ec5a:	45bb      	cmp	fp, r7
2400ec5c:	f63f af23 	bhi.w	2400eaa6 <dir_register+0x72e>
2400ec60:	8ad2      	ldrh	r2, [r2, #22]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400ec62:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400ec66:	779a      	strb	r2, [r3, #30]
2400ec68:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
2400ec6a:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400ec6c:	fa1f f28e 	uxth.w	r2, lr
2400ec70:	42ba      	cmp	r2, r7
2400ec72:	f63f af1a 	bhi.w	2400eaaa <dir_register+0x732>
2400ec76:	180a      	adds	r2, r1, r0
2400ec78:	8b52      	ldrh	r2, [r2, #26]
2400ec7a:	2a00      	cmp	r2, #0
2400ec7c:	f47f af17 	bne.w	2400eaae <dir_register+0x736>
2400ec80:	e713      	b.n	2400eaaa <dir_register+0x732>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400ec82:	4691      	mov	r9, r2
2400ec84:	f7ff bb91 	b.w	2400e3aa <dir_register+0x32>
			*d++ = *s++;
2400ec88:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
2400ec8c:	701a      	strb	r2, [r3, #0]
2400ec8e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400ec92:	705a      	strb	r2, [r3, #1]
2400ec94:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400ec98:	709a      	strb	r2, [r3, #2]
2400ec9a:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
2400ec9e:	70da      	strb	r2, [r3, #3]
2400eca0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
2400eca4:	711a      	strb	r2, [r3, #4]
2400eca6:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
2400ecaa:	715a      	strb	r2, [r3, #5]
2400ecac:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
2400ecb0:	719a      	strb	r2, [r3, #6]
2400ecb2:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
2400ecb6:	71da      	strb	r2, [r3, #7]
2400ecb8:	e63f      	b.n	2400e93a <dir_register+0x5c2>
2400ecba:	bf00      	nop

2400ecbc <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400ecbc:	2901      	cmp	r1, #1
{
2400ecbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400ecc2:	460c      	mov	r4, r1
2400ecc4:	b083      	sub	sp, #12
	FATFS *fs = obj->fs;
2400ecc6:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400ecc8:	d914      	bls.n	2400ecf4 <remove_chain+0x38>
2400ecca:	69ab      	ldr	r3, [r5, #24]
2400eccc:	428b      	cmp	r3, r1
2400ecce:	d911      	bls.n	2400ecf4 <remove_chain+0x38>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
2400ecd0:	4606      	mov	r6, r0
2400ecd2:	4611      	mov	r1, r2
2400ecd4:	b992      	cbnz	r2, 2400ecfc <remove_chain+0x40>
2400ecd6:	462f      	mov	r7, r5
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400ecd8:	f105 0934 	add.w	r9, r5, #52	; 0x34
			fs->wflag = 1;
2400ecdc:	f04f 0801 	mov.w	r8, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400ece0:	429c      	cmp	r4, r3
2400ece2:	d207      	bcs.n	2400ecf4 <remove_chain+0x38>
		switch (fs->fs_type) {
2400ece4:	783b      	ldrb	r3, [r7, #0]
2400ece6:	2b02      	cmp	r3, #2
2400ece8:	f000 80a3 	beq.w	2400ee32 <remove_chain+0x176>
2400ecec:	2b03      	cmp	r3, #3
2400ecee:	d022      	beq.n	2400ed36 <remove_chain+0x7a>
2400ecf0:	2b01      	cmp	r3, #1
2400ecf2:	d011      	beq.n	2400ed18 <remove_chain+0x5c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400ecf4:	2002      	movs	r0, #2
}
2400ecf6:	b003      	add	sp, #12
2400ecf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400ecfc:	4293      	cmp	r3, r2
2400ecfe:	d9f9      	bls.n	2400ecf4 <remove_chain+0x38>
2400ed00:	2a01      	cmp	r2, #1
2400ed02:	d0f7      	beq.n	2400ecf4 <remove_chain+0x38>
2400ed04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400ed08:	4628      	mov	r0, r5
2400ed0a:	f7fe fa81 	bl	2400d210 <put_fat.part.0>
		if (res != FR_OK) return res;
2400ed0e:	2800      	cmp	r0, #0
2400ed10:	d1f1      	bne.n	2400ecf6 <remove_chain+0x3a>
2400ed12:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400ed14:	69bb      	ldr	r3, [r7, #24]
2400ed16:	e7df      	b.n	2400ecd8 <remove_chain+0x1c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400ed18:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400ed1a:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400ed1e:	4638      	mov	r0, r7
2400ed20:	eb01 215a 	add.w	r1, r1, sl, lsr #9
2400ed24:	f7fe f8c4 	bl	2400ceb0 <move_window>
2400ed28:	2800      	cmp	r0, #0
2400ed2a:	f000 80a9 	beq.w	2400ee80 <remove_chain+0x1c4>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
2400ed2e:	2001      	movs	r0, #1
}
2400ed30:	b003      	add	sp, #12
2400ed32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400ed36:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400ed38:	4638      	mov	r0, r7
2400ed3a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400ed3e:	f7fe f8b7 	bl	2400ceb0 <move_window>
2400ed42:	2800      	cmp	r0, #0
2400ed44:	d1f3      	bne.n	2400ed2e <remove_chain+0x72>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400ed46:	00a3      	lsls	r3, r4, #2
2400ed48:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400ed4c:	443b      	add	r3, r7
2400ed4e:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400ed52:	f02a 4a70 	bic.w	sl, sl, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
2400ed56:	f1ba 0f00 	cmp.w	sl, #0
2400ed5a:	f000 80af 	beq.w	2400eebc <remove_chain+0x200>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400ed5e:	f1ba 0f01 	cmp.w	sl, #1
2400ed62:	d0c7      	beq.n	2400ecf4 <remove_chain+0x38>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400ed64:	69ab      	ldr	r3, [r5, #24]
2400ed66:	42a3      	cmp	r3, r4
2400ed68:	d9c4      	bls.n	2400ecf4 <remove_chain+0x38>
		switch (fs->fs_type) {
2400ed6a:	782f      	ldrb	r7, [r5, #0]
2400ed6c:	2f02      	cmp	r7, #2
2400ed6e:	d029      	beq.n	2400edc4 <remove_chain+0x108>
2400ed70:	2f03      	cmp	r7, #3
2400ed72:	d047      	beq.n	2400ee04 <remove_chain+0x148>
2400ed74:	2f01      	cmp	r7, #1
2400ed76:	d1bd      	bne.n	2400ecf4 <remove_chain+0x38>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400ed78:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400ed7a:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400ed7e:	4628      	mov	r0, r5
2400ed80:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400ed84:	f7fe f894 	bl	2400ceb0 <move_window>
			if (res != FR_OK) break;
2400ed88:	2800      	cmp	r0, #0
2400ed8a:	d1b4      	bne.n	2400ecf6 <remove_chain+0x3a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400ed8c:	07e2      	lsls	r2, r4, #31
			p = fs->win + bc++ % SS(fs);
2400ed8e:	f10b 0301 	add.w	r3, fp, #1
2400ed92:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400ed96:	d55c      	bpl.n	2400ee52 <remove_chain+0x196>
2400ed98:	f819 200b 	ldrb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400ed9c:	4628      	mov	r0, r5
2400ed9e:	9301      	str	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400eda0:	f002 020f 	and.w	r2, r2, #15
2400eda4:	f809 200b 	strb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400eda8:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
2400edaa:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400edac:	eb01 2153 	add.w	r1, r1, r3, lsr #9
2400edb0:	f7fe f87e 	bl	2400ceb0 <move_window>
			if (res != FR_OK) break;
2400edb4:	9b01      	ldr	r3, [sp, #4]
2400edb6:	2800      	cmp	r0, #0
2400edb8:	d19d      	bne.n	2400ecf6 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
2400edba:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400edbe:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400edc0:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
2400edc2:	e00c      	b.n	2400edde <remove_chain+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400edc4:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400edc6:	4628      	mov	r0, r5
2400edc8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400edcc:	f7fe f870 	bl	2400ceb0 <move_window>
			if (res != FR_OK) break;
2400edd0:	2800      	cmp	r0, #0
2400edd2:	d190      	bne.n	2400ecf6 <remove_chain+0x3a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400edd4:	0064      	lsls	r4, r4, #1
2400edd6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
2400edda:	442c      	add	r4, r5
2400eddc:	86a0      	strh	r0, [r4, #52]	; 0x34
			fs->wflag = 1;
2400edde:	f885 8003 	strb.w	r8, [r5, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
2400ede2:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
2400ede6:	1e91      	subs	r1, r2, #2
2400ede8:	428b      	cmp	r3, r1
2400edea:	d205      	bcs.n	2400edf8 <remove_chain+0x13c>
			fs->free_clst++;
2400edec:	3301      	adds	r3, #1
2400edee:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
2400edf0:	792b      	ldrb	r3, [r5, #4]
2400edf2:	f043 0301 	orr.w	r3, r3, #1
2400edf6:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
2400edf8:	4552      	cmp	r2, sl
2400edfa:	d95f      	bls.n	2400eebc <remove_chain+0x200>
		nxt = get_fat(obj, clst);			/* Get cluster status */
2400edfc:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400edfe:	4654      	mov	r4, sl
2400ee00:	69bb      	ldr	r3, [r7, #24]
2400ee02:	e76d      	b.n	2400ece0 <remove_chain+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400ee04:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400ee06:	4628      	mov	r0, r5
2400ee08:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400ee0c:	f7fe f850 	bl	2400ceb0 <move_window>
			if (res != FR_OK) break;
2400ee10:	2800      	cmp	r0, #0
2400ee12:	f47f af70 	bne.w	2400ecf6 <remove_chain+0x3a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400ee16:	00a4      	lsls	r4, r4, #2
2400ee18:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400ee1c:	f859 2004 	ldr.w	r2, [r9, r4]
	*ptr++ = (BYTE)val; val >>= 8;
2400ee20:	f829 0004 	strh.w	r0, [r9, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400ee24:	444c      	add	r4, r9
	*ptr++ = (BYTE)val; val >>= 8;
2400ee26:	0e13      	lsrs	r3, r2, #24
2400ee28:	70a0      	strb	r0, [r4, #2]
2400ee2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
2400ee2e:	70e3      	strb	r3, [r4, #3]
			if (res != FR_OK) return res;
2400ee30:	e7d5      	b.n	2400edde <remove_chain+0x122>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400ee32:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400ee34:	4638      	mov	r0, r7
2400ee36:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400ee3a:	f7fe f839 	bl	2400ceb0 <move_window>
2400ee3e:	2800      	cmp	r0, #0
2400ee40:	f47f af75 	bne.w	2400ed2e <remove_chain+0x72>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400ee44:	0063      	lsls	r3, r4, #1
2400ee46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400ee4a:	443b      	add	r3, r7
2400ee4c:	f8b3 a034 	ldrh.w	sl, [r3, #52]	; 0x34
			break;
2400ee50:	e781      	b.n	2400ed56 <remove_chain+0x9a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400ee52:	f809 000b 	strb.w	r0, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400ee56:	4628      	mov	r0, r5
2400ee58:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
2400ee5a:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400ee5c:	eb01 2153 	add.w	r1, r1, r3, lsr #9
2400ee60:	9301      	str	r3, [sp, #4]
2400ee62:	f7fe f825 	bl	2400ceb0 <move_window>
			if (res != FR_OK) break;
2400ee66:	2800      	cmp	r0, #0
2400ee68:	f47f af45 	bne.w	2400ecf6 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
2400ee6c:	9b01      	ldr	r3, [sp, #4]
2400ee6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400ee72:	f819 0003 	ldrb.w	r0, [r9, r3]
			p = fs->win + bc % SS(fs);
2400ee76:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400ee78:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
2400ee7c:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
2400ee7e:	e7ae      	b.n	2400edde <remove_chain+0x122>
			wc = fs->win[bc++ % SS(fs)];
2400ee80:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400ee84:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400ee86:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400ee8a:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
2400ee8c:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400ee8e:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400ee92:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400ee96:	f7fe f80b 	bl	2400ceb0 <move_window>
2400ee9a:	2800      	cmp	r0, #0
2400ee9c:	f47f af47 	bne.w	2400ed2e <remove_chain+0x72>
			wc |= fs->win[bc % SS(fs)] << 8;
2400eea0:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400eea4:	07e1      	lsls	r1, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400eea6:	44ba      	add	sl, r7
2400eea8:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
2400eeac:	ea4b 2a03 	orr.w	sl, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400eeb0:	bf4c      	ite	mi
2400eeb2:	ea4f 1a1a 	movmi.w	sl, sl, lsr #4
2400eeb6:	f3ca 0a0b 	ubfxpl	sl, sl, #0, #12
2400eeba:	e74c      	b.n	2400ed56 <remove_chain+0x9a>
	return FR_OK;
2400eebc:	2000      	movs	r0, #0
2400eebe:	e71a      	b.n	2400ecf6 <remove_chain+0x3a>

2400eec0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
2400eec0:	b510      	push	{r4, lr}
2400eec2:	b082      	sub	sp, #8
2400eec4:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
2400eec8:	b1a1      	cbz	r1, 2400eef4 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400eeca:	f891 c000 	ldrb.w	ip, [r1]
2400eece:	f1bc 0f1f 	cmp.w	ip, #31
2400eed2:	d912      	bls.n	2400eefa <f_mount+0x3a>
2400eed4:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
2400eed8:	d00f      	beq.n	2400eefa <f_mount+0x3a>
2400eeda:	4608      	mov	r0, r1
2400eedc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400eee0:	2b1f      	cmp	r3, #31
2400eee2:	d90c      	bls.n	2400eefe <f_mount+0x3e>
2400eee4:	2b3a      	cmp	r3, #58	; 0x3a
2400eee6:	d1f9      	bne.n	2400eedc <f_mount+0x1c>
			i = *tp++ - '0';
2400eee8:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400eeea:	4288      	cmp	r0, r1
2400eeec:	d102      	bne.n	2400eef4 <f_mount+0x34>
2400eeee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
2400eef2:	d006      	beq.n	2400ef02 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
2400eef4:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
2400eef6:	b002      	add	sp, #8
2400eef8:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400eefa:	4663      	mov	r3, ip
2400eefc:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400eefe:	2b3a      	cmp	r3, #58	; 0x3a
2400ef00:	d0f2      	beq.n	2400eee8 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
2400ef02:	4913      	ldr	r1, [pc, #76]	; (2400ef50 <f_mount+0x90>)
2400ef04:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
2400ef06:	b143      	cbz	r3, 2400ef1a <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400ef08:	4812      	ldr	r0, [pc, #72]	; (2400ef54 <f_mount+0x94>)
2400ef0a:	6804      	ldr	r4, [r0, #0]
2400ef0c:	42a3      	cmp	r3, r4
2400ef0e:	d019      	beq.n	2400ef44 <f_mount+0x84>
2400ef10:	6904      	ldr	r4, [r0, #16]
2400ef12:	429c      	cmp	r4, r3
2400ef14:	d013      	beq.n	2400ef3e <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
2400ef16:	2000      	movs	r0, #0
2400ef18:	7018      	strb	r0, [r3, #0]
	if (fs) {
2400ef1a:	9b01      	ldr	r3, [sp, #4]
2400ef1c:	b15b      	cbz	r3, 2400ef36 <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
2400ef1e:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400ef20:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
2400ef22:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
2400ef24:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400ef26:	d1e6      	bne.n	2400eef6 <f_mount+0x36>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
2400ef28:	4602      	mov	r2, r0
2400ef2a:	a901      	add	r1, sp, #4
2400ef2c:	4668      	mov	r0, sp
2400ef2e:	f7fd fffd 	bl	2400cf2c <find_volume>
}
2400ef32:	b002      	add	sp, #8
2400ef34:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400ef36:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
2400ef38:	600b      	str	r3, [r1, #0]
}
2400ef3a:	b002      	add	sp, #8
2400ef3c:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
2400ef3e:	2400      	movs	r4, #0
2400ef40:	6104      	str	r4, [r0, #16]
2400ef42:	e7e8      	b.n	2400ef16 <f_mount+0x56>
2400ef44:	2400      	movs	r4, #0
2400ef46:	6004      	str	r4, [r0, #0]
2400ef48:	6904      	ldr	r4, [r0, #16]
2400ef4a:	429c      	cmp	r4, r3
2400ef4c:	d1e3      	bne.n	2400ef16 <f_mount+0x56>
2400ef4e:	e7f6      	b.n	2400ef3e <f_mount+0x7e>
2400ef50:	2001d990 	.word	0x2001d990
2400ef54:	2001d994 	.word	0x2001d994

2400ef58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
2400ef58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400ef5c:	b092      	sub	sp, #72	; 0x48
2400ef5e:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
2400ef60:	2800      	cmp	r0, #0
2400ef62:	f000 8096 	beq.w	2400f092 <f_open+0x13a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
2400ef66:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
2400ef6a:	4616      	mov	r6, r2
2400ef6c:	4604      	mov	r4, r0
2400ef6e:	a903      	add	r1, sp, #12
2400ef70:	a801      	add	r0, sp, #4
2400ef72:	463a      	mov	r2, r7
2400ef74:	f7fd ffda 	bl	2400cf2c <find_volume>
	if (res == FR_OK) {
2400ef78:	4605      	mov	r5, r0
2400ef7a:	b128      	cbz	r0, 2400ef88 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
2400ef7c:	2300      	movs	r3, #0
2400ef7e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
2400ef80:	4628      	mov	r0, r5
2400ef82:	b012      	add	sp, #72	; 0x48
2400ef84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
2400ef88:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
2400ef8c:	a804      	add	r0, sp, #16
2400ef8e:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
2400ef90:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
2400ef94:	f7fe ff82 	bl	2400de9c <follow_path>
		if (res == FR_OK) {
2400ef98:	b9f0      	cbnz	r0, 2400efd8 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
2400ef9a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
2400ef9e:	2b00      	cmp	r3, #0
2400efa0:	db7e      	blt.n	2400f0a0 <f_open+0x148>
		if (Files[i].fs) {	/* Existing entry */
2400efa2:	4b9d      	ldr	r3, [pc, #628]	; (2400f218 <f_open+0x2c0>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400efa4:	f027 0001 	bic.w	r0, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400efa8:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
2400efaa:	f8d3 9000 	ldr.w	r9, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400efae:	4601      	mov	r1, r0
				Files[i].clu == dp->obj.sclust &&
2400efb0:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
2400efb4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
2400efb8:	f1b9 0f00 	cmp.w	r9, #0
2400efbc:	f000 80d8 	beq.w	2400f170 <f_open+0x218>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400efc0:	4591      	cmp	r9, r2
2400efc2:	d06f      	beq.n	2400f0a4 <f_open+0x14c>
		if (Files[i].fs) {	/* Existing entry */
2400efc4:	f8d3 9010 	ldr.w	r9, [r3, #16]
2400efc8:	f1b9 0f00 	cmp.w	r9, #0
2400efcc:	d071      	beq.n	2400f0b2 <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400efce:	454a      	cmp	r2, r9
2400efd0:	f000 80e7 	beq.w	2400f1a2 <f_open+0x24a>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
2400efd4:	2512      	movs	r5, #18
2400efd6:	e7d1      	b.n	2400ef7c <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400efd8:	f016 0f1c 	tst.w	r6, #28
2400efdc:	d05e      	beq.n	2400f09c <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
2400efde:	2804      	cmp	r0, #4
2400efe0:	d15c      	bne.n	2400f09c <f_open+0x144>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400efe2:	4b8d      	ldr	r3, [pc, #564]	; (2400f218 <f_open+0x2c0>)
2400efe4:	681a      	ldr	r2, [r3, #0]
2400efe6:	b112      	cbz	r2, 2400efee <f_open+0x96>
2400efe8:	691b      	ldr	r3, [r3, #16]
2400efea:	2b00      	cmp	r3, #0
2400efec:	d1f2      	bne.n	2400efd4 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400efee:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
2400eff0:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400eff4:	f7ff f9c0 	bl	2400e378 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400eff8:	2800      	cmp	r0, #0
2400effa:	d14f      	bne.n	2400f09c <f_open+0x144>
				dw = GET_FATTIME();
2400effc:	f7fd fcb0 	bl	2400c960 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
2400f000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400f002:	0a02      	lsrs	r2, r0, #8
2400f004:	f8c3 000e 	str.w	r0, [r3, #14]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
2400f008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400f00a:	75da      	strb	r2, [r3, #23]
2400f00c:	0c02      	lsrs	r2, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400f00e:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
2400f010:	0e00      	lsrs	r0, r0, #24
2400f012:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400f014:	2220      	movs	r2, #32
	*ptr++ = (BYTE)val;
2400f016:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400f018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400f01a:	72da      	strb	r2, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
2400f01c:	f898 2000 	ldrb.w	r2, [r8]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
2400f020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2400f022:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
2400f024:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f026:	d102      	bne.n	2400f02e <f_open+0xd6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400f028:	8a9a      	ldrh	r2, [r3, #20]
2400f02a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
2400f02e:	2200      	movs	r2, #0
2400f030:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f032:	f898 1000 	ldrb.w	r1, [r8]
2400f036:	2903      	cmp	r1, #3
2400f038:	d100      	bne.n	2400f03c <f_open+0xe4>
	*ptr++ = (BYTE)val; val >>= 8;
2400f03a:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
2400f03c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400f03e:	2200      	movs	r2, #0
2400f040:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
2400f042:	2301      	movs	r3, #1
2400f044:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
2400f048:	b186      	cbz	r6, 2400f06c <f_open+0x114>
						dw = fs->winsect;
2400f04a:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
2400f04e:	4631      	mov	r1, r6
2400f050:	a804      	add	r0, sp, #16
						dw = fs->winsect;
2400f052:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
2400f054:	f7ff fe32 	bl	2400ecbc <remove_chain>
						if (res == FR_OK) {
2400f058:	9b00      	ldr	r3, [sp, #0]
2400f05a:	b9f8      	cbnz	r0, 2400f09c <f_open+0x144>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400f05c:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
2400f05e:	4619      	mov	r1, r3
2400f060:	4640      	mov	r0, r8
2400f062:	f7fd ff25 	bl	2400ceb0 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400f066:	f8c8 6010 	str.w	r6, [r8, #16]
		if (res == FR_OK) {
2400f06a:	b9b8      	cbnz	r0, 2400f09c <f_open+0x144>
				mode |= FA_MODIFIED;
2400f06c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f070:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f074:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f078:	3900      	subs	r1, #0
2400f07a:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f07c:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f07e:	bf18      	it	ne
2400f080:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
2400f082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400f084:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f086:	f7fd fd85 	bl	2400cb94 <inc_lock>
2400f08a:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
2400f08c:	b9e8      	cbnz	r0, 2400f0ca <f_open+0x172>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400f08e:	2502      	movs	r5, #2
2400f090:	e774      	b.n	2400ef7c <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
2400f092:	2509      	movs	r5, #9
}
2400f094:	4628      	mov	r0, r5
2400f096:	b012      	add	sp, #72	; 0x48
2400f098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2400f09c:	4605      	mov	r5, r0
2400f09e:	e76d      	b.n	2400ef7c <f_open+0x24>
				res = FR_INVALID_NAME;
2400f0a0:	2506      	movs	r5, #6
2400f0a2:	e76b      	b.n	2400ef7c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f0a4:	685a      	ldr	r2, [r3, #4]
2400f0a6:	4562      	cmp	r2, ip
2400f0a8:	f000 8084 	beq.w	2400f1b4 <f_open+0x25c>
		if (Files[i].fs) {	/* Existing entry */
2400f0ac:	691a      	ldr	r2, [r3, #16]
2400f0ae:	2a00      	cmp	r2, #0
2400f0b0:	d18d      	bne.n	2400efce <f_open+0x76>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400f0b2:	f016 0f1c 	tst.w	r6, #28
2400f0b6:	d048      	beq.n	2400f14a <f_open+0x1f2>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2400f0b8:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400f0bc:	f013 0f11 	tst.w	r3, #17
2400f0c0:	d154      	bne.n	2400f16c <f_open+0x214>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
2400f0c2:	0773      	lsls	r3, r6, #29
2400f0c4:	d54f      	bpl.n	2400f166 <f_open+0x20e>
2400f0c6:	2508      	movs	r5, #8
2400f0c8:	e758      	b.n	2400ef7c <f_open+0x24>
	if (fs->fs_type == FS_FAT32) {
2400f0ca:	f898 2000 	ldrb.w	r2, [r8]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400f0ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2400f0d0:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
2400f0d2:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f0d4:	d102      	bne.n	2400f0dc <f_open+0x184>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400f0d6:	8a9a      	ldrh	r2, [r3, #20]
2400f0d8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400f0dc:	60a6      	str	r6, [r4, #8]
			fp->err = 0;			/* Clear error flag */
2400f0de:	2100      	movs	r1, #0
	rv = rv << 8 | ptr[0];
2400f0e0:	f8d3 901c 	ldr.w	r9, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
2400f0e4:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
2400f0e8:	f8c4 8000 	str.w	r8, [r4]
		*d++ = (BYTE)val;
2400f0ec:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
2400f0f0:	f8c4 900c 	str.w	r9, [r4, #12]
		*d++ = (BYTE)val;
2400f0f4:	4650      	mov	r0, sl
			fp->obj.id = fs->id;
2400f0f6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
			fp->flag = mode;		/* Set file access mode */
2400f0fa:	7527      	strb	r7, [r4, #20]
			fp->obj.id = fs->id;
2400f0fc:	80a3      	strh	r3, [r4, #4]
			fp->err = 0;			/* Clear error flag */
2400f0fe:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
2400f100:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
2400f102:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
2400f104:	f005 fe7a 	bl	24014dfc <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
2400f108:	06bf      	lsls	r7, r7, #26
2400f10a:	f57f af39 	bpl.w	2400ef80 <f_open+0x28>
2400f10e:	f1b9 0f00 	cmp.w	r9, #0
2400f112:	f43f af35 	beq.w	2400ef80 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
2400f116:	f8c4 9018 	str.w	r9, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400f11a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f11e:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400f122:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f126:	d804      	bhi.n	2400f132 <f_open+0x1da>
2400f128:	e04a      	b.n	2400f1c0 <f_open+0x268>
2400f12a:	1c70      	adds	r0, r6, #1
2400f12c:	d06c      	beq.n	2400f208 <f_open+0x2b0>
2400f12e:	454f      	cmp	r7, r9
2400f130:	d26a      	bcs.n	2400f208 <f_open+0x2b0>
					clst = get_fat(&fp->obj, clst);
2400f132:	4631      	mov	r1, r6
2400f134:	6820      	ldr	r0, [r4, #0]
2400f136:	f7fe f8f1 	bl	2400d31c <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
2400f13a:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f13c:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
2400f140:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
2400f142:	d8f2      	bhi.n	2400f12a <f_open+0x1d2>
2400f144:	2502      	movs	r5, #2
				fp->clust = clst;
2400f146:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f148:	e718      	b.n	2400ef7c <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
2400f14a:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400f14e:	06da      	lsls	r2, r3, #27
2400f150:	d425      	bmi.n	2400f19e <f_open+0x246>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
2400f152:	07b2      	lsls	r2, r6, #30
2400f154:	d501      	bpl.n	2400f15a <f_open+0x202>
2400f156:	07db      	lsls	r3, r3, #31
2400f158:	d408      	bmi.n	2400f16c <f_open+0x214>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2400f15a:	f006 0608 	and.w	r6, r6, #8
2400f15e:	2e00      	cmp	r6, #0
2400f160:	d184      	bne.n	2400f06c <f_open+0x114>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f162:	4601      	mov	r1, r0
2400f164:	e786      	b.n	2400f074 <f_open+0x11c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400f166:	0730      	lsls	r0, r6, #28
2400f168:	d584      	bpl.n	2400f074 <f_open+0x11c>
2400f16a:	e747      	b.n	2400effc <f_open+0xa4>
						res = FR_DENIED;
2400f16c:	2507      	movs	r5, #7
2400f16e:	e705      	b.n	2400ef7c <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
2400f170:	f8d3 9010 	ldr.w	r9, [r3, #16]
2400f174:	f1b9 0f00 	cmp.w	r9, #0
2400f178:	d09b      	beq.n	2400f0b2 <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f17a:	4591      	cmp	r9, r2
2400f17c:	d199      	bne.n	2400f0b2 <f_open+0x15a>
2400f17e:	695a      	ldr	r2, [r3, #20]
2400f180:	4562      	cmp	r2, ip
2400f182:	d196      	bne.n	2400f0b2 <f_open+0x15a>
				Files[i].clu == dp->obj.sclust &&
2400f184:	699a      	ldr	r2, [r3, #24]
2400f186:	4572      	cmp	r2, lr
2400f188:	d193      	bne.n	2400f0b2 <f_open+0x15a>
	for (i = be = 0; i < _FS_LOCK; i++) {
2400f18a:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
2400f18c:	b928      	cbnz	r0, 2400f19a <f_open+0x242>
2400f18e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
2400f192:	899b      	ldrh	r3, [r3, #12]
2400f194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400f198:	d18b      	bne.n	2400f0b2 <f_open+0x15a>
2400f19a:	2510      	movs	r5, #16
2400f19c:	e6ee      	b.n	2400ef7c <f_open+0x24>
					res = FR_NO_FILE;
2400f19e:	2504      	movs	r5, #4
2400f1a0:	e6ec      	b.n	2400ef7c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f1a2:	695a      	ldr	r2, [r3, #20]
2400f1a4:	4562      	cmp	r2, ip
2400f1a6:	f47f af15 	bne.w	2400efd4 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
2400f1aa:	699a      	ldr	r2, [r3, #24]
2400f1ac:	4572      	cmp	r2, lr
2400f1ae:	f47f af11 	bne.w	2400efd4 <f_open+0x7c>
2400f1b2:	e7ea      	b.n	2400f18a <f_open+0x232>
2400f1b4:	689a      	ldr	r2, [r3, #8]
2400f1b6:	4572      	cmp	r2, lr
2400f1b8:	f47f af78 	bne.w	2400f0ac <f_open+0x154>
	for (i = be = 0; i < _FS_LOCK; i++) {
2400f1bc:	462a      	mov	r2, r5
2400f1be:	e7e5      	b.n	2400f18c <f_open+0x234>
				fp->clust = clst;
2400f1c0:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f1c2:	f3c9 0308 	ubfx	r3, r9, #0, #9
2400f1c6:	2b00      	cmp	r3, #0
2400f1c8:	f43f aeda 	beq.w	2400ef80 <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f1cc:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
2400f1d0:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f1d2:	3b02      	subs	r3, #2
2400f1d4:	429e      	cmp	r6, r3
2400f1d6:	f4bf af5a 	bcs.w	2400f08e <f_open+0x136>
	return clst * fs->csize + fs->database;
2400f1da:	f8b8 200a 	ldrh.w	r2, [r8, #10]
2400f1de:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
2400f1e2:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
2400f1e6:	2a00      	cmp	r2, #0
2400f1e8:	f43f af51 	beq.w	2400f08e <f_open+0x136>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400f1ec:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400f1f0:	4651      	mov	r1, sl
2400f1f2:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400f1f4:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400f1f6:	f898 0001 	ldrb.w	r0, [r8, #1]
2400f1fa:	f7fd fc9f 	bl	2400cb3c <disk_read>
2400f1fe:	2800      	cmp	r0, #0
2400f200:	f43f aebe 	beq.w	2400ef80 <f_open+0x28>
2400f204:	2501      	movs	r5, #1
2400f206:	e6b9      	b.n	2400ef7c <f_open+0x24>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400f208:	1c71      	adds	r1, r6, #1
				fp->clust = clst;
2400f20a:	61e6      	str	r6, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
2400f20c:	bf0c      	ite	eq
2400f20e:	2301      	moveq	r3, #1
2400f210:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f212:	d1d6      	bne.n	2400f1c2 <f_open+0x26a>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400f214:	461d      	mov	r5, r3
2400f216:	e6b1      	b.n	2400ef7c <f_open+0x24>
2400f218:	2001d994 	.word	0x2001d994

2400f21c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
2400f21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400f220:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
2400f222:	2300      	movs	r3, #0
{
2400f224:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
2400f226:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f228:	b150      	cbz	r0, 2400f240 <f_read+0x24>
2400f22a:	6803      	ldr	r3, [r0, #0]
2400f22c:	4604      	mov	r4, r0
2400f22e:	b13b      	cbz	r3, 2400f240 <f_read+0x24>
2400f230:	4691      	mov	r9, r2
2400f232:	781a      	ldrb	r2, [r3, #0]
2400f234:	b122      	cbz	r2, 2400f240 <f_read+0x24>
2400f236:	460d      	mov	r5, r1
2400f238:	88da      	ldrh	r2, [r3, #6]
2400f23a:	8881      	ldrh	r1, [r0, #4]
2400f23c:	4291      	cmp	r1, r2
2400f23e:	d005      	beq.n	2400f24c <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2400f240:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
2400f244:	4640      	mov	r0, r8
2400f246:	b005      	add	sp, #20
2400f248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f24c:	7858      	ldrb	r0, [r3, #1]
2400f24e:	f7fd fc59 	bl	2400cb04 <disk_status>
2400f252:	07c2      	lsls	r2, r0, #31
2400f254:	d4f4      	bmi.n	2400f240 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400f256:	f894 8015 	ldrb.w	r8, [r4, #21]
2400f25a:	f1b8 0f00 	cmp.w	r8, #0
2400f25e:	d1f1      	bne.n	2400f244 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400f260:	7d23      	ldrb	r3, [r4, #20]
2400f262:	f013 0301 	ands.w	r3, r3, #1
2400f266:	9300      	str	r3, [sp, #0]
2400f268:	f000 80cb 	beq.w	2400f402 <f_read+0x1e6>
	remain = fp->obj.objsize - fp->fptr;
2400f26c:	69a3      	ldr	r3, [r4, #24]
2400f26e:	68e7      	ldr	r7, [r4, #12]
2400f270:	1aff      	subs	r7, r7, r3
2400f272:	454f      	cmp	r7, r9
2400f274:	bf28      	it	cs
2400f276:	464f      	movcs	r7, r9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f278:	f8d4 9000 	ldr.w	r9, [r4]
	for ( ;  btr;								/* Repeat until all data read */
2400f27c:	2f00      	cmp	r7, #0
2400f27e:	d0e1      	beq.n	2400f244 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f280:	f104 022d 	add.w	r2, r4, #45	; 0x2d
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f284:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
2400f288:	e9cd 2801 	strd	r2, r8, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f28c:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f290:	2a00      	cmp	r2, #0
2400f292:	d140      	bne.n	2400f316 <f_read+0xfa>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
2400f294:	f8b9 200a 	ldrh.w	r2, [r9, #10]
2400f298:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
2400f29a:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
2400f29e:	d06e      	beq.n	2400f37e <f_read+0x162>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
2400f2a0:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f2a2:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
2400f2a6:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f2a8:	3b02      	subs	r3, #2
2400f2aa:	4298      	cmp	r0, r3
2400f2ac:	d274      	bcs.n	2400f398 <f_read+0x17c>
	return clst * fs->csize + fs->database;
2400f2ae:	f8b9 100a 	ldrh.w	r1, [r9, #10]
2400f2b2:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
2400f2b6:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
2400f2ba:	2b00      	cmp	r3, #0
2400f2bc:	d06c      	beq.n	2400f398 <f_read+0x17c>
			if (cc) {							/* Read maximum contiguous sectors directly */
2400f2be:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
2400f2c2:	eb02 0b03 	add.w	fp, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
2400f2c6:	d36e      	bcc.n	2400f3a6 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400f2c8:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
2400f2cc:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400f2d0:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f2d2:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
2400f2d6:	bf88      	it	hi
2400f2d8:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f2dc:	465a      	mov	r2, fp
2400f2de:	4629      	mov	r1, r5
2400f2e0:	4643      	mov	r3, r8
2400f2e2:	f7fd fc2b 	bl	2400cb3c <disk_read>
2400f2e6:	2800      	cmp	r0, #0
2400f2e8:	d172      	bne.n	2400f3d0 <f_read+0x1b4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400f2ea:	f994 2014 	ldrsb.w	r2, [r4, #20]
2400f2ee:	2a00      	cmp	r2, #0
2400f2f0:	f2c0 8097 	blt.w	2400f422 <f_read+0x206>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
2400f2f4:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400f2f8:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
2400f2fa:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400f2fc:	440d      	add	r5, r1
2400f2fe:	440b      	add	r3, r1
2400f300:	61a3      	str	r3, [r4, #24]
2400f302:	6833      	ldr	r3, [r6, #0]
2400f304:	440b      	add	r3, r1
2400f306:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
2400f308:	f000 80a1 	beq.w	2400f44e <f_read+0x232>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400f30c:	69a3      	ldr	r3, [r4, #24]
2400f30e:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f312:	2a00      	cmp	r2, #0
2400f314:	d0be      	beq.n	2400f294 <f_read+0x78>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
2400f316:	1c50      	adds	r0, r2, #1
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f318:	f5c2 7100 	rsb	r1, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
2400f31c:	eb0a 0302 	add.w	r3, sl, r2
2400f320:	4450      	add	r0, sl
2400f322:	42b9      	cmp	r1, r7
2400f324:	eba5 0000 	sub.w	r0, r5, r0
2400f328:	bf28      	it	cs
2400f32a:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f32c:	2802      	cmp	r0, #2
2400f32e:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
2400f332:	d95c      	bls.n	2400f3ee <f_read+0x1d2>
2400f334:	f1bb 0f05 	cmp.w	fp, #5
2400f338:	d959      	bls.n	2400f3ee <f_read+0x1d2>
2400f33a:	f021 0e03 	bic.w	lr, r1, #3
2400f33e:	461a      	mov	r2, r3
2400f340:	4628      	mov	r0, r5
2400f342:	449e      	add	lr, r3
			*d++ = *s++;
2400f344:	f852 cb04 	ldr.w	ip, [r2], #4
2400f348:	4572      	cmp	r2, lr
2400f34a:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
2400f34e:	d1f9      	bne.n	2400f344 <f_read+0x128>
2400f350:	f021 0203 	bic.w	r2, r1, #3
2400f354:	4291      	cmp	r1, r2
2400f356:	eb05 0002 	add.w	r0, r5, r2
2400f35a:	eb03 0c02 	add.w	ip, r3, r2
2400f35e:	d0cb      	beq.n	2400f2f8 <f_read+0xdc>
			*d++ = *s++;
2400f360:	5c9b      	ldrb	r3, [r3, r2]
		} while (--cnt);
2400f362:	ebbb 0b02 	subs.w	fp, fp, r2
			*d++ = *s++;
2400f366:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
2400f368:	d0c6      	beq.n	2400f2f8 <f_read+0xdc>
			*d++ = *s++;
2400f36a:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
2400f36e:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
2400f372:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
2400f374:	d0c0      	beq.n	2400f2f8 <f_read+0xdc>
			*d++ = *s++;
2400f376:	f89c 3002 	ldrb.w	r3, [ip, #2]
2400f37a:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
2400f37c:	e7bc      	b.n	2400f2f8 <f_read+0xdc>
				if (fp->fptr == 0) {			/* On the top of the file? */
2400f37e:	bb7b      	cbnz	r3, 2400f3e0 <f_read+0x1c4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
2400f380:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400f382:	2801      	cmp	r0, #1
2400f384:	d908      	bls.n	2400f398 <f_read+0x17c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f386:	1c43      	adds	r3, r0, #1
2400f388:	d022      	beq.n	2400f3d0 <f_read+0x1b4>
				fp->clust = clst;				/* Update current cluster */
2400f38a:	61e0      	str	r0, [r4, #28]
	clst -= 2;
2400f38c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f38e:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400f392:	3b02      	subs	r3, #2
2400f394:	4298      	cmp	r0, r3
2400f396:	d38a      	bcc.n	2400f2ae <f_read+0x92>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400f398:	2302      	movs	r3, #2
2400f39a:	4698      	mov	r8, r3
2400f39c:	7563      	strb	r3, [r4, #21]
}
2400f39e:	4640      	mov	r0, r8
2400f3a0:	b005      	add	sp, #20
2400f3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
2400f3a6:	6a22      	ldr	r2, [r4, #32]
2400f3a8:	455a      	cmp	r2, fp
2400f3aa:	d00b      	beq.n	2400f3c4 <f_read+0x1a8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
2400f3ac:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400f3b0:	2b00      	cmp	r3, #0
2400f3b2:	db29      	blt.n	2400f408 <f_read+0x1ec>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
2400f3b4:	2301      	movs	r3, #1
2400f3b6:	465a      	mov	r2, fp
2400f3b8:	4651      	mov	r1, sl
2400f3ba:	f899 0001 	ldrb.w	r0, [r9, #1]
2400f3be:	f7fd fbbd 	bl	2400cb3c <disk_read>
2400f3c2:	b928      	cbnz	r0, 2400f3d0 <f_read+0x1b4>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f3c4:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
2400f3c6:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f3ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f3ce:	e7a2      	b.n	2400f316 <f_read+0xfa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f3d0:	f8dd 8000 	ldr.w	r8, [sp]
2400f3d4:	2301      	movs	r3, #1
}
2400f3d6:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f3d8:	7563      	strb	r3, [r4, #21]
}
2400f3da:	b005      	add	sp, #20
2400f3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
2400f3e0:	69e1      	ldr	r1, [r4, #28]
2400f3e2:	6820      	ldr	r0, [r4, #0]
2400f3e4:	9203      	str	r2, [sp, #12]
2400f3e6:	f7fd ff99 	bl	2400d31c <get_fat.isra.0>
2400f3ea:	9a03      	ldr	r2, [sp, #12]
2400f3ec:	e7c9      	b.n	2400f382 <f_read+0x166>
2400f3ee:	1e6a      	subs	r2, r5, #1
2400f3f0:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
2400f3f4:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
2400f3f8:	4563      	cmp	r3, ip
			*d++ = *s++;
2400f3fa:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2400f3fe:	d1f9      	bne.n	2400f3f4 <f_read+0x1d8>
2400f400:	e77a      	b.n	2400f2f8 <f_read+0xdc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400f402:	f04f 0807 	mov.w	r8, #7
2400f406:	e71d      	b.n	2400f244 <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f408:	2301      	movs	r3, #1
2400f40a:	4651      	mov	r1, sl
2400f40c:	f899 0001 	ldrb.w	r0, [r9, #1]
2400f410:	f7fd fba4 	bl	2400cb5c <disk_write>
2400f414:	2800      	cmp	r0, #0
2400f416:	d1db      	bne.n	2400f3d0 <f_read+0x1b4>
					fp->flag &= (BYTE)~FA_DIRTY;
2400f418:	7d23      	ldrb	r3, [r4, #20]
2400f41a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400f41e:	7523      	strb	r3, [r4, #20]
2400f420:	e7c8      	b.n	2400f3b4 <f_read+0x198>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400f422:	6a22      	ldr	r2, [r4, #32]
2400f424:	eba2 020b 	sub.w	r2, r2, fp
2400f428:	4542      	cmp	r2, r8
2400f42a:	f4bf af63 	bcs.w	2400f2f4 <f_read+0xd8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
2400f42e:	eb05 2242 	add.w	r2, r5, r2, lsl #9
2400f432:	9b01      	ldr	r3, [sp, #4]
2400f434:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f436:	1ad0      	subs	r0, r2, r3
2400f438:	2802      	cmp	r0, #2
2400f43a:	d90b      	bls.n	2400f454 <f_read+0x238>
2400f43c:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
2400f440:	f851 3b04 	ldr.w	r3, [r1], #4
2400f444:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
2400f448:	4562      	cmp	r2, ip
2400f44a:	d1f9      	bne.n	2400f440 <f_read+0x224>
2400f44c:	e752      	b.n	2400f2f4 <f_read+0xd8>
2400f44e:	f8dd 8008 	ldr.w	r8, [sp, #8]
2400f452:	e6f7      	b.n	2400f244 <f_read+0x28>
2400f454:	3a01      	subs	r2, #1
2400f456:	f504 7c0b 	add.w	ip, r4, #556	; 0x22c
			*d++ = *s++;
2400f45a:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
2400f45e:	458c      	cmp	ip, r1
			*d++ = *s++;
2400f460:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
2400f464:	d1f9      	bne.n	2400f45a <f_read+0x23e>
2400f466:	e745      	b.n	2400f2f4 <f_read+0xd8>

2400f468 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
2400f468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400f46c:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
2400f46e:	2300      	movs	r3, #0
{
2400f470:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
2400f472:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f474:	b150      	cbz	r0, 2400f48c <f_write+0x24>
2400f476:	6803      	ldr	r3, [r0, #0]
2400f478:	4604      	mov	r4, r0
2400f47a:	b13b      	cbz	r3, 2400f48c <f_write+0x24>
2400f47c:	4616      	mov	r6, r2
2400f47e:	781a      	ldrb	r2, [r3, #0]
2400f480:	b122      	cbz	r2, 2400f48c <f_write+0x24>
2400f482:	460d      	mov	r5, r1
2400f484:	88da      	ldrh	r2, [r3, #6]
2400f486:	8881      	ldrh	r1, [r0, #4]
2400f488:	4291      	cmp	r1, r2
2400f48a:	d005      	beq.n	2400f498 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2400f48c:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
2400f490:	4640      	mov	r0, r8
2400f492:	b005      	add	sp, #20
2400f494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f498:	7858      	ldrb	r0, [r3, #1]
2400f49a:	f7fd fb33 	bl	2400cb04 <disk_status>
2400f49e:	07c0      	lsls	r0, r0, #31
2400f4a0:	d4f4      	bmi.n	2400f48c <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400f4a2:	f894 8015 	ldrb.w	r8, [r4, #21]
2400f4a6:	f1b8 0f00 	cmp.w	r8, #0
2400f4aa:	d1f1      	bne.n	2400f490 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2400f4ac:	7d22      	ldrb	r2, [r4, #20]
2400f4ae:	0791      	lsls	r1, r2, #30
2400f4b0:	f140 80e6 	bpl.w	2400f680 <f_write+0x218>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
2400f4b4:	69a3      	ldr	r3, [r4, #24]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f4b6:	f8d4 9000 	ldr.w	r9, [r4]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
2400f4ba:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2400f4bc:	bf28      	it	cs
2400f4be:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
2400f4c0:	2e00      	cmp	r6, #0
2400f4c2:	f000 80cf 	beq.w	2400f664 <f_write+0x1fc>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400f4c6:	f504 720b 	add.w	r2, r4, #556	; 0x22c
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f4ca:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
2400f4ce:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400f4d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f4d4:	2a00      	cmp	r2, #0
2400f4d6:	d15e      	bne.n	2400f596 <f_write+0x12e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
2400f4d8:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
2400f4dc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
2400f4e0:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
2400f4e4:	d110      	bne.n	2400f508 <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
2400f4e6:	2b00      	cmp	r3, #0
2400f4e8:	f040 80b4 	bne.w	2400f654 <f_write+0x1ec>
					clst = fp->obj.sclust;	/* Follow from the origin */
2400f4ec:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
2400f4ee:	2800      	cmp	r0, #0
2400f4f0:	f000 80c9 	beq.w	2400f686 <f_write+0x21e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2400f4f4:	2801      	cmp	r0, #1
2400f4f6:	f000 8087 	beq.w	2400f608 <f_write+0x1a0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f4fa:	1c43      	adds	r3, r0, #1
2400f4fc:	f000 80a3 	beq.w	2400f646 <f_write+0x1de>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
2400f500:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
2400f502:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
2400f504:	b903      	cbnz	r3, 2400f508 <f_write+0xa0>
2400f506:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
2400f508:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400f50c:	2b00      	cmp	r3, #0
2400f50e:	f2c0 808d 	blt.w	2400f62c <f_write+0x1c4>
	clst -= 2;
2400f512:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f514:	f8d9 2018 	ldr.w	r2, [r9, #24]
	clst -= 2;
2400f518:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f51a:	3a02      	subs	r2, #2
2400f51c:	4293      	cmp	r3, r2
2400f51e:	d273      	bcs.n	2400f608 <f_write+0x1a0>
	return clst * fs->csize + fs->database;
2400f520:	f8b9 100a 	ldrh.w	r1, [r9, #10]
2400f524:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
2400f528:	fb01 2203 	mla	r2, r1, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
2400f52c:	2a00      	cmp	r2, #0
2400f52e:	d06b      	beq.n	2400f608 <f_write+0x1a0>
			if (cc) {						/* Write maximum contiguous sectors directly */
2400f530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
2400f534:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
2400f536:	d36e      	bcc.n	2400f616 <f_write+0x1ae>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400f538:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
2400f53c:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400f53e:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f540:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
2400f544:	bf88      	it	hi
2400f546:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f54a:	4629      	mov	r1, r5
2400f54c:	e9cd 2302 	strd	r2, r3, [sp, #8]
2400f550:	f7fd fb04 	bl	2400cb5c <disk_write>
2400f554:	2800      	cmp	r0, #0
2400f556:	d176      	bne.n	2400f646 <f_write+0x1de>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
2400f558:	6a21      	ldr	r1, [r4, #32]
2400f55a:	9a02      	ldr	r2, [sp, #8]
2400f55c:	9b03      	ldr	r3, [sp, #12]
2400f55e:	1a8a      	subs	r2, r1, r2
2400f560:	429a      	cmp	r2, r3
2400f562:	f0c0 80a4 	bcc.w	2400f6ae <f_write+0x246>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
2400f566:	eb05 2243 	add.w	r2, r5, r3, lsl #9
2400f56a:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2400f56e:	69a3      	ldr	r3, [r4, #24]
2400f570:	4615      	mov	r5, r2
2400f572:	68e2      	ldr	r2, [r4, #12]
2400f574:	4463      	add	r3, ip
2400f576:	429a      	cmp	r2, r3
2400f578:	61a3      	str	r3, [r4, #24]
2400f57a:	bf38      	it	cc
2400f57c:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
2400f57e:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2400f582:	60e2      	str	r2, [r4, #12]
2400f584:	683b      	ldr	r3, [r7, #0]
2400f586:	4463      	add	r3, ip
2400f588:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
2400f58a:	d06a      	beq.n	2400f662 <f_write+0x1fa>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400f58c:	69a3      	ldr	r3, [r4, #24]
2400f58e:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f592:	2a00      	cmp	r2, #0
2400f594:	d0a0      	beq.n	2400f4d8 <f_write+0x70>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f596:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
2400f59a:	eb0a 0302 	add.w	r3, sl, r2
2400f59e:	1c6a      	adds	r2, r5, #1
2400f5a0:	45b4      	cmp	ip, r6
2400f5a2:	eba3 0202 	sub.w	r2, r3, r2
2400f5a6:	bf28      	it	cs
2400f5a8:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f5aa:	2a02      	cmp	r2, #2
2400f5ac:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
2400f5b0:	d95c      	bls.n	2400f66c <f_write+0x204>
2400f5b2:	f1bb 0f05 	cmp.w	fp, #5
2400f5b6:	d959      	bls.n	2400f66c <f_write+0x204>
2400f5b8:	f02c 0e03 	bic.w	lr, ip, #3
2400f5bc:	461a      	mov	r2, r3
2400f5be:	4629      	mov	r1, r5
2400f5c0:	449e      	add	lr, r3
			*d++ = *s++;
2400f5c2:	f851 0b04 	ldr.w	r0, [r1], #4
2400f5c6:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
2400f5ca:	4596      	cmp	lr, r2
2400f5cc:	d1f9      	bne.n	2400f5c2 <f_write+0x15a>
2400f5ce:	f02c 0103 	bic.w	r1, ip, #3
2400f5d2:	458c      	cmp	ip, r1
2400f5d4:	eb03 0001 	add.w	r0, r3, r1
2400f5d8:	eb05 0201 	add.w	r2, r5, r1
2400f5dc:	d00f      	beq.n	2400f5fe <f_write+0x196>
			*d++ = *s++;
2400f5de:	f815 e001 	ldrb.w	lr, [r5, r1]
		} while (--cnt);
2400f5e2:	ebbb 0b01 	subs.w	fp, fp, r1
			*d++ = *s++;
2400f5e6:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
2400f5ea:	d006      	beq.n	2400f5fa <f_write+0x192>
			*d++ = *s++;
2400f5ec:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
2400f5ee:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
2400f5f2:	7043      	strb	r3, [r0, #1]
2400f5f4:	bf1c      	itt	ne
2400f5f6:	7893      	ldrbne	r3, [r2, #2]
2400f5f8:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
2400f5fa:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
2400f5fe:	7d23      	ldrb	r3, [r4, #20]
2400f600:	f063 037f 	orn	r3, r3, #127	; 0x7f
2400f604:	7523      	strb	r3, [r4, #20]
2400f606:	e7b2      	b.n	2400f56e <f_write+0x106>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2400f608:	2302      	movs	r3, #2
2400f60a:	4698      	mov	r8, r3
2400f60c:	7563      	strb	r3, [r4, #21]
}
2400f60e:	4640      	mov	r0, r8
2400f610:	b005      	add	sp, #20
2400f612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2400f616:	6a23      	ldr	r3, [r4, #32]
2400f618:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
2400f61a:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2400f61c:	d002      	beq.n	2400f624 <f_write+0x1bc>
2400f61e:	68e1      	ldr	r1, [r4, #12]
2400f620:	428b      	cmp	r3, r1
2400f622:	d338      	bcc.n	2400f696 <f_write+0x22e>
			fp->sect = sect;
2400f624:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f626:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400f62a:	e7b4      	b.n	2400f596 <f_write+0x12e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400f62c:	2301      	movs	r3, #1
2400f62e:	6a22      	ldr	r2, [r4, #32]
2400f630:	4651      	mov	r1, sl
2400f632:	f899 0001 	ldrb.w	r0, [r9, #1]
2400f636:	f7fd fa91 	bl	2400cb5c <disk_write>
2400f63a:	b920      	cbnz	r0, 2400f646 <f_write+0x1de>
				fp->flag &= (BYTE)~FA_DIRTY;
2400f63c:	7d23      	ldrb	r3, [r4, #20]
2400f63e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400f642:	7523      	strb	r3, [r4, #20]
2400f644:	e765      	b.n	2400f512 <f_write+0xaa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400f646:	2301      	movs	r3, #1
2400f648:	4698      	mov	r8, r3
2400f64a:	7563      	strb	r3, [r4, #21]
}
2400f64c:	4640      	mov	r0, r8
2400f64e:	b005      	add	sp, #20
2400f650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
2400f654:	69e1      	ldr	r1, [r4, #28]
2400f656:	4620      	mov	r0, r4
2400f658:	f7fe f908 	bl	2400d86c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2400f65c:	2800      	cmp	r0, #0
2400f65e:	f47f af49 	bne.w	2400f4f4 <f_write+0x8c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
2400f662:	7d22      	ldrb	r2, [r4, #20]
2400f664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400f668:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
2400f66a:	e711      	b.n	2400f490 <f_write+0x28>
2400f66c:	3b01      	subs	r3, #1
2400f66e:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
2400f672:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
2400f676:	4295      	cmp	r5, r2
			*d++ = *s++;
2400f678:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
2400f67c:	d1f9      	bne.n	2400f672 <f_write+0x20a>
2400f67e:	e7be      	b.n	2400f5fe <f_write+0x196>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2400f680:	f04f 0807 	mov.w	r8, #7
2400f684:	e704      	b.n	2400f490 <f_write+0x28>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
2400f686:	4659      	mov	r1, fp
2400f688:	4620      	mov	r0, r4
2400f68a:	f7fe f8ef 	bl	2400d86c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2400f68e:	2800      	cmp	r0, #0
2400f690:	f47f af30 	bne.w	2400f4f4 <f_write+0x8c>
2400f694:	e7e5      	b.n	2400f662 <f_write+0x1fa>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
2400f696:	2301      	movs	r3, #1
2400f698:	4651      	mov	r1, sl
2400f69a:	f899 0001 	ldrb.w	r0, [r9, #1]
2400f69e:	9202      	str	r2, [sp, #8]
2400f6a0:	f7fd fa4c 	bl	2400cb3c <disk_read>
				fp->fptr < fp->obj.objsize &&
2400f6a4:	2800      	cmp	r0, #0
2400f6a6:	d1ce      	bne.n	2400f646 <f_write+0x1de>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400f6a8:	69a3      	ldr	r3, [r4, #24]
2400f6aa:	9a02      	ldr	r2, [sp, #8]
2400f6ac:	e7ba      	b.n	2400f624 <f_write+0x1bc>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
2400f6ae:	eb05 2042 	add.w	r0, r5, r2, lsl #9
2400f6b2:	1c42      	adds	r2, r0, #1
2400f6b4:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f6b6:	ebaa 0202 	sub.w	r2, sl, r2
2400f6ba:	2a02      	cmp	r2, #2
2400f6bc:	d90d      	bls.n	2400f6da <f_write+0x272>
2400f6be:	4652      	mov	r2, sl
2400f6c0:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
2400f6c4:	f851 0b04 	ldr.w	r0, [r1], #4
2400f6c8:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
2400f6cc:	4562      	cmp	r2, ip
2400f6ce:	d1f9      	bne.n	2400f6c4 <f_write+0x25c>
					fp->flag &= (BYTE)~FA_DIRTY;
2400f6d0:	7d22      	ldrb	r2, [r4, #20]
2400f6d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400f6d6:	7522      	strb	r2, [r4, #20]
2400f6d8:	e745      	b.n	2400f566 <f_write+0xfe>
2400f6da:	f104 022b 	add.w	r2, r4, #43	; 0x2b
2400f6de:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
2400f6e2:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
2400f6e6:	458c      	cmp	ip, r1
			*d++ = *s++;
2400f6e8:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2400f6ec:	d1f9      	bne.n	2400f6e2 <f_write+0x27a>
2400f6ee:	e7ef      	b.n	2400f6d0 <f_write+0x268>

2400f6f0 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f6f0:	b158      	cbz	r0, 2400f70a <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
2400f6f2:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f6f4:	6803      	ldr	r3, [r0, #0]
2400f6f6:	4604      	mov	r4, r0
2400f6f8:	b12b      	cbz	r3, 2400f706 <f_close+0x16>
2400f6fa:	781a      	ldrb	r2, [r3, #0]
2400f6fc:	b11a      	cbz	r2, 2400f706 <f_close+0x16>
2400f6fe:	8881      	ldrh	r1, [r0, #4]
2400f700:	88da      	ldrh	r2, [r3, #6]
2400f702:	4291      	cmp	r1, r2
2400f704:	d003      	beq.n	2400f70e <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
2400f706:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
2400f708:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
2400f70a:	2009      	movs	r0, #9
}
2400f70c:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f70e:	7858      	ldrb	r0, [r3, #1]
2400f710:	f7fd f9f8 	bl	2400cb04 <disk_status>
2400f714:	07c1      	lsls	r1, r0, #31
2400f716:	d4f6      	bmi.n	2400f706 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2400f718:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400f71a:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2400f71c:	065a      	lsls	r2, r3, #25
2400f71e:	d52e      	bpl.n	2400f77e <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
2400f720:	061b      	lsls	r3, r3, #24
2400f722:	d451      	bmi.n	2400f7c8 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
2400f724:	f7fd f91c 	bl	2400c960 <get_fattime>
				res = move_window(fs, fp->dir_sect);
2400f728:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
2400f72a:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
2400f72c:	4628      	mov	r0, r5
2400f72e:	f7fd fbbf 	bl	2400ceb0 <move_window>
				if (res == FR_OK) {
2400f732:	2800      	cmp	r0, #0
2400f734:	d1e8      	bne.n	2400f708 <f_close+0x18>
					dir = fp->dir_ptr;
2400f736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
2400f738:	7ada      	ldrb	r2, [r3, #11]
2400f73a:	f042 0220 	orr.w	r2, r2, #32
2400f73e:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
2400f740:	68a2      	ldr	r2, [r4, #8]
2400f742:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
2400f744:	f3c2 2007 	ubfx	r0, r2, #8, #8
2400f748:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
2400f74a:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
2400f74c:	7809      	ldrb	r1, [r1, #0]
2400f74e:	2903      	cmp	r1, #3
2400f750:	d103      	bne.n	2400f75a <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
2400f752:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400f754:	751a      	strb	r2, [r3, #20]
2400f756:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
2400f758:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
2400f75a:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400f75c:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
2400f75e:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
2400f762:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400f764:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
2400f766:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
2400f768:	2301      	movs	r3, #1
2400f76a:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
2400f76c:	f7fe f820 	bl	2400d7b0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
2400f770:	7d23      	ldrb	r3, [r4, #20]
2400f772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400f776:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
2400f778:	2800      	cmp	r0, #0
2400f77a:	d1c5      	bne.n	2400f708 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f77c:	6825      	ldr	r5, [r4, #0]
2400f77e:	2d00      	cmp	r5, #0
2400f780:	d0c1      	beq.n	2400f706 <f_close+0x16>
2400f782:	782b      	ldrb	r3, [r5, #0]
2400f784:	2b00      	cmp	r3, #0
2400f786:	d0be      	beq.n	2400f706 <f_close+0x16>
2400f788:	88a2      	ldrh	r2, [r4, #4]
2400f78a:	88eb      	ldrh	r3, [r5, #6]
2400f78c:	429a      	cmp	r2, r3
2400f78e:	d1ba      	bne.n	2400f706 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f790:	7868      	ldrb	r0, [r5, #1]
2400f792:	f7fd f9b7 	bl	2400cb04 <disk_status>
2400f796:	f010 0001 	ands.w	r0, r0, #1
2400f79a:	d1b4      	bne.n	2400f706 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
2400f79c:	6923      	ldr	r3, [r4, #16]
2400f79e:	3b01      	subs	r3, #1
2400f7a0:	2b01      	cmp	r3, #1
2400f7a2:	d81e      	bhi.n	2400f7e2 <f_close+0xf2>
		n = Files[i].ctr;
2400f7a4:	4912      	ldr	r1, [pc, #72]	; (2400f7f0 <f_close+0x100>)
2400f7a6:	011d      	lsls	r5, r3, #4
2400f7a8:	eb01 1303 	add.w	r3, r1, r3, lsl #4
2400f7ac:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
2400f7ae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
2400f7b2:	d01a      	beq.n	2400f7ea <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
2400f7b4:	b11a      	cbz	r2, 2400f7be <f_close+0xce>
2400f7b6:	3a01      	subs	r2, #1
2400f7b8:	b292      	uxth	r2, r2
		Files[i].ctr = n;
2400f7ba:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2400f7bc:	b90a      	cbnz	r2, 2400f7c2 <f_close+0xd2>
2400f7be:	2300      	movs	r3, #0
2400f7c0:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
2400f7c2:	2300      	movs	r3, #0
2400f7c4:	6023      	str	r3, [r4, #0]
}
2400f7c6:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2400f7c8:	2301      	movs	r3, #1
2400f7ca:	6a22      	ldr	r2, [r4, #32]
2400f7cc:	f104 012c 	add.w	r1, r4, #44	; 0x2c
2400f7d0:	7868      	ldrb	r0, [r5, #1]
2400f7d2:	f7fd f9c3 	bl	2400cb5c <disk_write>
2400f7d6:	b930      	cbnz	r0, 2400f7e6 <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
2400f7d8:	7d23      	ldrb	r3, [r4, #20]
2400f7da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400f7de:	7523      	strb	r3, [r4, #20]
2400f7e0:	e7a0      	b.n	2400f724 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
2400f7e2:	2002      	movs	r0, #2
}
2400f7e4:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2400f7e6:	2001      	movs	r0, #1
}
2400f7e8:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
2400f7ea:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2400f7ec:	e7e7      	b.n	2400f7be <f_close+0xce>
2400f7ee:	bf00      	nop
2400f7f0:	2001d994 	.word	0x2001d994

2400f7f4 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
2400f7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f7f8:	b150      	cbz	r0, 2400f810 <f_findnext+0x1c>
2400f7fa:	4605      	mov	r5, r0
2400f7fc:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400f7fe:	4c3b      	ldr	r4, [pc, #236]	; (2400f8ec <f_findnext+0xf8>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f800:	682b      	ldr	r3, [r5, #0]
2400f802:	b12b      	cbz	r3, 2400f810 <f_findnext+0x1c>
2400f804:	781a      	ldrb	r2, [r3, #0]
2400f806:	b11a      	cbz	r2, 2400f810 <f_findnext+0x1c>
2400f808:	88a9      	ldrh	r1, [r5, #4]
2400f80a:	88da      	ldrh	r2, [r3, #6]
2400f80c:	4291      	cmp	r1, r2
2400f80e:	d003      	beq.n	2400f818 <f_findnext+0x24>
	FRESULT res = FR_INVALID_OBJECT;
2400f810:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
2400f812:	4638      	mov	r0, r7
2400f814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f818:	7858      	ldrb	r0, [r3, #1]
2400f81a:	f7fd f973 	bl	2400cb04 <disk_status>
2400f81e:	07c3      	lsls	r3, r0, #31
2400f820:	d4f6      	bmi.n	2400f810 <f_findnext+0x1c>
		if (!fno) {
2400f822:	2e00      	cmp	r6, #0
2400f824:	d059      	beq.n	2400f8da <f_findnext+0xe6>
			res = dir_read(dp, 0);			/* Read an item */
2400f826:	4628      	mov	r0, r5
2400f828:	f7fd fdce 	bl	2400d3c8 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
2400f82c:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
2400f830:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
2400f832:	d1ee      	bne.n	2400f812 <f_findnext+0x1e>
				get_fileinfo(dp, fno);		/* Get the object information */
2400f834:	4631      	mov	r1, r6
2400f836:	4628      	mov	r0, r5
2400f838:	f7fd fa7a 	bl	2400cd30 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
2400f83c:	4641      	mov	r1, r8
2400f83e:	4628      	mov	r0, r5
2400f840:	f7fe fcb8 	bl	2400e1b4 <dir_next>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
2400f844:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
2400f848:	d14d      	bne.n	2400f8e6 <f_findnext+0xf2>
2400f84a:	7db3      	ldrb	r3, [r6, #22]
2400f84c:	2b00      	cmp	r3, #0
2400f84e:	d0e0      	beq.n	2400f812 <f_findnext+0x1e>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
2400f850:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
2400f854:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
2400f858:	e00f      	b.n	2400f87a <f_findnext+0x86>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400f85a:	3a20      	subs	r2, #32
2400f85c:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400f85e:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400f862:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400f866:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400f868:	f1be 0f19 	cmp.w	lr, #25
2400f86c:	d817      	bhi.n	2400f89e <f_findnext+0xaa>
2400f86e:	3b20      	subs	r3, #32
2400f870:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400f872:	4293      	cmp	r3, r2
2400f874:	d1c4      	bne.n	2400f800 <f_findnext+0xc>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400f876:	2b00      	cmp	r3, #0
2400f878:	d0cb      	beq.n	2400f812 <f_findnext+0x1e>
2400f87a:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400f87c:	f81c 3b01 	ldrb.w	r3, [ip], #1
2400f880:	2b3f      	cmp	r3, #63	; 0x3f
2400f882:	d012      	beq.n	2400f8aa <f_findnext+0xb6>
2400f884:	2b2a      	cmp	r3, #42	; 0x2a
2400f886:	d010      	beq.n	2400f8aa <f_findnext+0xb6>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400f888:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400f88c:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400f88e:	2819      	cmp	r0, #25
2400f890:	d9e3      	bls.n	2400f85a <f_findnext+0x66>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400f892:	2a7f      	cmp	r2, #127	; 0x7f
2400f894:	d9e3      	bls.n	2400f85e <f_findnext+0x6a>
2400f896:	4423      	add	r3, r4
2400f898:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400f89c:	e7df      	b.n	2400f85e <f_findnext+0x6a>
2400f89e:	2b7f      	cmp	r3, #127	; 0x7f
2400f8a0:	d9e7      	bls.n	2400f872 <f_findnext+0x7e>
2400f8a2:	4420      	add	r0, r4
2400f8a4:	f810 3c80 	ldrb.w	r3, [r0, #-128]
2400f8a8:	e7e3      	b.n	2400f872 <f_findnext+0x7e>
2400f8aa:	4694      	mov	ip, r2
				nm = nx = 0;
2400f8ac:	2300      	movs	r3, #0
2400f8ae:	f81c eb01 	ldrb.w	lr, [ip], #1
2400f8b2:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400f8b4:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
2400f8b8:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
2400f8ba:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400f8be:	bf0c      	ite	eq
2400f8c0:	3201      	addeq	r2, #1
2400f8c2:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400f8c4:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
2400f8c8:	d0f4      	beq.n	2400f8b4 <f_findnext+0xc0>
2400f8ca:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
2400f8ce:	d0f1      	beq.n	2400f8b4 <f_findnext+0xc0>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400f8d0:	f7fd f9b8 	bl	2400cc44 <pattern_matching>
2400f8d4:	2800      	cmp	r0, #0
2400f8d6:	d093      	beq.n	2400f800 <f_findnext+0xc>
2400f8d8:	e79b      	b.n	2400f812 <f_findnext+0x1e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
2400f8da:	4631      	mov	r1, r6
2400f8dc:	4628      	mov	r0, r5
}
2400f8de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
2400f8e2:	f7fe b883 	b.w	2400d9ec <dir_sdi>
2400f8e6:	4607      	mov	r7, r0
2400f8e8:	e793      	b.n	2400f812 <f_findnext+0x1e>
2400f8ea:	bf00      	nop
2400f8ec:	24017500 	.word	0x24017500

2400f8f0 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
2400f8f0:	b570      	push	{r4, r5, r6, lr}
2400f8f2:	b082      	sub	sp, #8
2400f8f4:	4615      	mov	r5, r2
2400f8f6:	4604      	mov	r4, r0
2400f8f8:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
2400f8fa:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
2400f8fc:	2200      	movs	r2, #0
2400f8fe:	a901      	add	r1, sp, #4
2400f900:	4668      	mov	r0, sp
2400f902:	9500      	str	r5, [sp, #0]
2400f904:	f7fd fb12 	bl	2400cf2c <find_volume>
	if (res == FR_OK) {
2400f908:	b118      	cbz	r0, 2400f912 <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400f90a:	2300      	movs	r3, #0
2400f90c:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
2400f90e:	b002      	add	sp, #8
2400f910:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
2400f912:	e9dd 1500 	ldrd	r1, r5, [sp]
2400f916:	4620      	mov	r0, r4
		obj->fs = fs;
2400f918:	6025      	str	r5, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
2400f91a:	f7fe fabf 	bl	2400de9c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
2400f91e:	bb00      	cbnz	r0, 2400f962 <f_findfirst+0x72>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
2400f920:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
2400f924:	2b00      	cmp	r3, #0
2400f926:	db0b      	blt.n	2400f940 <f_findfirst+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
2400f928:	79a3      	ldrb	r3, [r4, #6]
2400f92a:	06db      	lsls	r3, r3, #27
2400f92c:	d51f      	bpl.n	2400f96e <f_findfirst+0x7e>
	if (fs->fs_type == FS_FAT32) {
2400f92e:	7829      	ldrb	r1, [r5, #0]
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400f930:	6a22      	ldr	r2, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
2400f932:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
2400f934:	8b53      	ldrh	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
2400f936:	d102      	bne.n	2400f93e <f_findfirst+0x4e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400f938:	8a92      	ldrh	r2, [r2, #20]
2400f93a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
2400f93e:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
2400f940:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
2400f942:	2100      	movs	r1, #0
2400f944:	4620      	mov	r0, r4
				obj->id = fs->id;
2400f946:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
2400f948:	f7fe f850 	bl	2400d9ec <dir_sdi>
				if (res == FR_OK) {
2400f94c:	b948      	cbnz	r0, 2400f962 <f_findfirst+0x72>
					if (obj->sclust) {
2400f94e:	68a3      	ldr	r3, [r4, #8]
2400f950:	b97b      	cbnz	r3, 2400f972 <f_findfirst+0x82>
						obj->lockid = 0;	/* Root directory need not to be locked */
2400f952:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
2400f954:	4631      	mov	r1, r6
2400f956:	4620      	mov	r0, r4
}
2400f958:	b002      	add	sp, #8
2400f95a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
2400f95e:	f7ff bf49 	b.w	2400f7f4 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
2400f962:	2804      	cmp	r0, #4
2400f964:	d1d1      	bne.n	2400f90a <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400f966:	2300      	movs	r3, #0
	res = f_opendir(dp, path);		/* Open the target directory */
2400f968:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2400f96a:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
2400f96c:	e7cf      	b.n	2400f90e <f_findfirst+0x1e>
					res = FR_NO_PATH;
2400f96e:	2005      	movs	r0, #5
2400f970:	e7cb      	b.n	2400f90a <f_findfirst+0x1a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
2400f972:	4601      	mov	r1, r0
2400f974:	4620      	mov	r0, r4
2400f976:	f7fd f90d 	bl	2400cb94 <inc_lock>
2400f97a:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
2400f97c:	2800      	cmp	r0, #0
2400f97e:	d1e9      	bne.n	2400f954 <f_findfirst+0x64>
2400f980:	2012      	movs	r0, #18
2400f982:	e7c2      	b.n	2400f90a <f_findfirst+0x1a>

2400f984 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
2400f984:	4b11      	ldr	r3, [pc, #68]	; (2400f9cc <FATFS_LinkDriver+0x48>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
2400f986:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
2400f988:	7a5c      	ldrb	r4, [r3, #9]
2400f98a:	b9cc      	cbnz	r4, 2400f9c0 <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
2400f98c:	f004 02ff 	and.w	r2, r4, #255	; 0xff
2400f990:	7a5c      	ldrb	r4, [r3, #9]
2400f992:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
2400f994:	7a5c      	ldrb	r4, [r3, #9]
2400f996:	eb03 0484 	add.w	r4, r3, r4, lsl #2
2400f99a:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
2400f99c:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
2400f99e:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
2400f9a0:	441c      	add	r4, r3
2400f9a2:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
2400f9a4:	1c44      	adds	r4, r0, #1
    path[0] = DiskNum + '0';
2400f9a6:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
2400f9a8:	b2e4      	uxtb	r4, r4
2400f9aa:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
2400f9ac:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
2400f9ae:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
2400f9b0:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
2400f9b2:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
2400f9b4:	4610      	mov	r0, r2
2400f9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[3] = 0;
2400f9ba:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
2400f9bc:	708b      	strb	r3, [r1, #2]
}
2400f9be:	4770      	bx	lr
  uint8_t ret = 1;
2400f9c0:	2201      	movs	r2, #1
}
2400f9c2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400f9c6:	4610      	mov	r0, r2
2400f9c8:	4770      	bx	lr
2400f9ca:	bf00      	nop
2400f9cc:	2001dbb8 	.word	0x2001dbb8

2400f9d0 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
2400f9d0:	287f      	cmp	r0, #127	; 0x7f
2400f9d2:	d913      	bls.n	2400f9fc <ff_convert+0x2c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
2400f9d4:	b979      	cbnz	r1, 2400f9f6 <ff_convert+0x26>
2400f9d6:	4b0c      	ldr	r3, [pc, #48]	; (2400fa08 <ff_convert+0x38>)
2400f9d8:	e001      	b.n	2400f9de <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
2400f9da:	2980      	cmp	r1, #128	; 0x80
2400f9dc:	d00d      	beq.n	2400f9fa <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
2400f9de:	f833 2b02 	ldrh.w	r2, [r3], #2
2400f9e2:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
2400f9e6:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
2400f9e8:	4282      	cmp	r2, r0
2400f9ea:	d1f6      	bne.n	2400f9da <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
2400f9ec:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
2400f9f0:	fa1f f08c 	uxth.w	r0, ip
2400f9f4:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
2400f9f6:	28ff      	cmp	r0, #255	; 0xff
2400f9f8:	d901      	bls.n	2400f9fe <ff_convert+0x2e>
2400f9fa:	2000      	movs	r0, #0
		}
	}

	return c;
}
2400f9fc:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
2400f9fe:	4b02      	ldr	r3, [pc, #8]	; (2400fa08 <ff_convert+0x38>)
2400fa00:	3880      	subs	r0, #128	; 0x80
2400fa02:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
2400fa06:	4770      	bx	lr
2400fa08:	24017590 	.word	0x24017590

2400fa0c <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
2400fa0c:	4b23      	ldr	r3, [pc, #140]	; (2400fa9c <ff_wtoupper+0x90>)
2400fa0e:	4a24      	ldr	r2, [pc, #144]	; (2400faa0 <ff_wtoupper+0x94>)
2400fa10:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
2400fa14:	bf28      	it	cs
2400fa16:	4613      	movcs	r3, r2
{
2400fa18:	b510      	push	{r4, lr}
2400fa1a:	3304      	adds	r3, #4
2400fa1c:	e00a      	b.n	2400fa34 <ff_wtoupper+0x28>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
2400fa1e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
2400fa22:	fa5f fc82 	uxtb.w	ip, r2
2400fa26:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
2400fa28:	eb0c 0e01 	add.w	lr, ip, r1
2400fa2c:	4570      	cmp	r0, lr
2400fa2e:	db09      	blt.n	2400fa44 <ff_wtoupper+0x38>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
2400fa30:	3304      	adds	r3, #4
2400fa32:	b182      	cbz	r2, 2400fa56 <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
2400fa34:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
2400fa38:	461c      	mov	r4, r3
2400fa3a:	1e4a      	subs	r2, r1, #1
2400fa3c:	b292      	uxth	r2, r2
2400fa3e:	4290      	cmp	r0, r2
2400fa40:	d8ed      	bhi.n	2400fa1e <ff_wtoupper+0x12>
	}

	return chr;
}
2400fa42:	bd10      	pop	{r4, pc}
			switch (cmd) {
2400fa44:	2a08      	cmp	r2, #8
2400fa46:	d8fc      	bhi.n	2400fa42 <ff_wtoupper+0x36>
2400fa48:	e8df f002 	tbb	[pc, r2]
2400fa4c:	1916100c 	.word	0x1916100c
2400fa50:	25221f1c 	.word	0x25221f1c
2400fa54:	08          	.byte	0x08
2400fa55:	00          	.byte	0x00
		if (!cmd) p += nc;
2400fa56:	eb04 034c 	add.w	r3, r4, ip, lsl #1
2400fa5a:	e7de      	b.n	2400fa1a <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
2400fa5c:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
2400fa60:	b280      	uxth	r0, r0
}
2400fa62:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
2400fa64:	1a41      	subs	r1, r0, r1
2400fa66:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
2400fa6a:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
2400fa6c:	1a43      	subs	r3, r0, r1
2400fa6e:	f003 0301 	and.w	r3, r3, #1
2400fa72:	1ac3      	subs	r3, r0, r3
2400fa74:	b298      	uxth	r0, r3
}
2400fa76:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
2400fa78:	3810      	subs	r0, #16
2400fa7a:	b280      	uxth	r0, r0
}
2400fa7c:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
2400fa7e:	3820      	subs	r0, #32
2400fa80:	b280      	uxth	r0, r0
}
2400fa82:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
2400fa84:	3830      	subs	r0, #48	; 0x30
2400fa86:	b280      	uxth	r0, r0
}
2400fa88:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
2400fa8a:	381a      	subs	r0, #26
2400fa8c:	b280      	uxth	r0, r0
}
2400fa8e:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
2400fa90:	3008      	adds	r0, #8
2400fa92:	b280      	uxth	r0, r0
}
2400fa94:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
2400fa96:	3850      	subs	r0, #80	; 0x50
2400fa98:	b280      	uxth	r0, r0
}
2400fa9a:	bd10      	pop	{r4, pc}
2400fa9c:	24017690 	.word	0x24017690
2400faa0:	24017884 	.word	0x24017884

2400faa4 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
2400faa4:	b538      	push	{r3, r4, r5, lr}
2400faa6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2400faaa:	680d      	ldr	r5, [r1, #0]
{
2400faac:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
2400faae:	2010      	movs	r0, #16
{
2400fab0:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
2400fab4:	4629      	mov	r1, r5
2400fab6:	f002 fe1b 	bl	240126f0 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
2400faba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
2400fabe:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
2400fac0:	6020      	str	r0, [r4, #0]
    p->mempool = m;
2400fac2:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
2400fac4:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
2400fac8:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
2400faca:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
2400face:	edc0 7a02 	vstr	s15, [r0, #8]
}
2400fad2:	ecbd 8b02 	vpop	{d8}
2400fad6:	bd38      	pop	{r3, r4, r5, pc}

2400fad8 <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
    _tPowerFollower* p = *pf;
2400fad8:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
2400fada:	6801      	ldr	r1, [r0, #0]
2400fadc:	f002 beca 	b.w	24012874 <mpool_free>

2400fae0 <tPowerFollower_setFactor>:
}

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
2400fae0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2400fae4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 2400fb00 <tPowerFollower_setFactor+0x20>
2400fae8:	6803      	ldr	r3, [r0, #0]
    
    if (factor<0) factor=0;
    if (factor>1) factor=1;
2400faea:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
2400faee:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
2400faf2:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
2400faf6:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
2400fafa:	edc3 7a02 	vstr	s15, [r3, #8]
}
2400fafe:	4770      	bx	lr
2400fb00:	00000000 	.word	0x00000000

2400fb04 <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
2400fb04:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
2400fb06:	ee60 7a00 	vmul.f32	s15, s0, s0
2400fb0a:	edd3 6a03 	vldr	s13, [r3, #12]
2400fb0e:	ed93 0a02 	vldr	s0, [r3, #8]
2400fb12:	ed93 7a01 	vldr	s14, [r3, #4]
2400fb16:	ee20 0a26 	vmul.f32	s0, s0, s13
2400fb1a:	eea7 0a27 	vfma.f32	s0, s14, s15
2400fb1e:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
2400fb22:	4770      	bx	lr

2400fb24 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
2400fb24:	b570      	push	{r4, r5, r6, lr}
2400fb26:	460d      	mov	r5, r1
2400fb28:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2400fb2a:	202c      	movs	r0, #44	; 0x2c
{
2400fb2c:	ed2d 8b02 	vpush	{d8}
2400fb30:	b082      	sub	sp, #8
    _tMempool* m = *mp;
2400fb32:	6811      	ldr	r1, [r2, #0]
{
2400fb34:	eeb0 8a40 	vmov.f32	s16, s0
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
2400fb38:	eddf 8a30 	vldr	s17, [pc, #192]	; 2400fbfc <tLinearDelay_initToPool+0xd8>
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2400fb3c:	9101      	str	r1, [sp, #4]
2400fb3e:	f002 fdd7 	bl	240126f0 <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
2400fb42:	ee07 5a90 	vmov	s15, r5
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2400fb46:	4604      	mov	r4, r0
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2400fb48:	9901      	ldr	r1, [sp, #4]
    if (delay > maxDelay)   d->delay = maxDelay;
2400fb4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2400fb4e:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
2400fb50:	fec8 7a28 	vmaxnm.f32	s15, s16, s17
    d->mempool = m;
2400fb54:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
2400fb56:	61c5      	str	r5, [r0, #28]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2400fb58:	00a8      	lsls	r0, r5, #2
    if (delay > maxDelay)   d->delay = maxDelay;
2400fb5a:	fec7 7ac7 	vminnm.f32	s15, s15, s14
2400fb5e:	edc4 7a08 	vstr	s15, [r4, #32]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2400fb62:	f002 fdc5 	bl	240126f0 <mpool_alloc>

    d->gain = 1.0f;
2400fb66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
2400fb6a:	2300      	movs	r3, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2400fb6c:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
2400fb6e:	6062      	str	r2, [r4, #4]

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400fb70:	eeb0 0a68 	vmov.f32	s0, s17
    d->lastIn = 0.0f;
2400fb74:	edc4 8a04 	vstr	s17, [r4, #16]
    d->lastOut = 0.0f;
2400fb78:	edc4 8a03 	vstr	s17, [r4, #12]
    d->inPoint = 0;
2400fb7c:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
2400fb7e:	61a3      	str	r3, [r4, #24]
    _tLinearDelay* d = *dl;
2400fb80:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400fb82:	edd4 0a08 	vldr	s1, [r4, #32]
2400fb86:	edd5 7a07 	vldr	s15, [r5, #28]
2400fb8a:	eeb8 1a67 	vcvt.f32.u32	s2, s15
2400fb8e:	f01d f85f 	bl	2402cc50 <__LEAF_clip_veneer>

    Lfloat outPointer = d->inPoint - d->delay;
2400fb92:	edd5 7a05 	vldr	s15, [r5, #20]

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
2400fb96:	69ea      	ldr	r2, [r5, #28]
    Lfloat outPointer = d->inPoint - d->delay;
2400fb98:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400fb9c:	ed85 0a08 	vstr	s0, [r5, #32]
    Lfloat outPointer = d->inPoint - d->delay;
2400fba0:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
2400fba4:	eef4 7ae8 	vcmpe.f32	s15, s17
2400fba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fbac:	d50a      	bpl.n	2400fbc4 <tLinearDelay_initToPool+0xa0>
        outPointer += d->maxDelay; // modulo maximum length
2400fbae:	ee07 2a10 	vmov	s14, r2
2400fbb2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400fbb6:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
2400fbba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400fbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fbc2:	d4f8      	bmi.n	2400fbb6 <tLinearDelay_initToPool+0x92>

    d->outPoint = (uint32_t) outPointer;   // integer part
2400fbc4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
2400fbc8:	ee17 3a10 	vmov	r3, s14

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
2400fbcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
2400fbd0:	ee06 3a90 	vmov	s13, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400fbd4:	4293      	cmp	r3, r2
2400fbd6:	bf08      	it	eq
2400fbd8:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
2400fbda:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
2400fbde:	eef8 6a66 	vcvt.f32.u32	s13, s13
2400fbe2:	61ab      	str	r3, [r5, #24]
2400fbe4:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
2400fbe8:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
2400fbec:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
2400fbf0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
}
2400fbf4:	b002      	add	sp, #8
2400fbf6:	ecbd 8b02 	vpop	{d8}
2400fbfa:	bd70      	pop	{r4, r5, r6, pc}
2400fbfc:	00000000 	.word	0x00000000

2400fc00 <tLinearDelay_free>:
{
2400fc00:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
2400fc02:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
2400fc04:	6821      	ldr	r1, [r4, #0]
2400fc06:	68a0      	ldr	r0, [r4, #8]
2400fc08:	f002 fe34 	bl	24012874 <mpool_free>
    mpool_free((char*)d, d->mempool);
2400fc0c:	6821      	ldr	r1, [r4, #0]
2400fc0e:	4620      	mov	r0, r4
}
2400fc10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
2400fc14:	f002 be2e 	b.w	24012874 <mpool_free>

2400fc18 <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
2400fc18:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2400fc1a:	69cb      	ldr	r3, [r1, #28]
2400fc1c:	b14b      	cbz	r3, 2400fc32 <tLinearDelay_clear+0x1a>
2400fc1e:	2300      	movs	r3, #0
        d->buff[i] = 0;
2400fc20:	2000      	movs	r0, #0
2400fc22:	688a      	ldr	r2, [r1, #8]
2400fc24:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
2400fc28:	3301      	adds	r3, #1
        d->buff[i] = 0;
2400fc2a:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2400fc2c:	69ca      	ldr	r2, [r1, #28]
2400fc2e:	429a      	cmp	r2, r3
2400fc30:	d8f7      	bhi.n	2400fc22 <tLinearDelay_clear+0xa>
}
2400fc32:	4770      	bx	lr

2400fc34 <tLinearDelay_tick>:
{
2400fc34:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
2400fc36:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
2400fc38:	edd3 7a01 	vldr	s15, [r3, #4]
2400fc3c:	6959      	ldr	r1, [r3, #20]
2400fc3e:	689a      	ldr	r2, [r3, #8]
2400fc40:	ee27 0a80 	vmul.f32	s0, s15, s0
2400fc44:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2400fc48:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400fc4c:	69dc      	ldr	r4, [r3, #28]
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fc4e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    uint32_t idx = (uint32_t) d->outPoint;
2400fc52:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400fc56:	3201      	adds	r2, #1
    if ((idx + 1) < d->maxDelay)
2400fc58:	1c48      	adds	r0, r1, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400fc5a:	42a2      	cmp	r2, r4
2400fc5c:	bf08      	it	eq
2400fc5e:	2200      	moveq	r2, #0
    if ((idx + 1) < d->maxDelay)
2400fc60:	4284      	cmp	r4, r0
2400fc62:	615a      	str	r2, [r3, #20]
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fc64:	689a      	ldr	r2, [r3, #8]
2400fc66:	eb02 0181 	add.w	r1, r2, r1, lsl #2
2400fc6a:	ed91 0a00 	vldr	s0, [r1]
2400fc6e:	ee20 0a27 	vmul.f32	s0, s0, s15
2400fc72:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
2400fc76:	d90b      	bls.n	2400fc90 <tLinearDelay_tick+0x5c>
        d->lastOut += d->buff[idx+1] * d->alpha;
2400fc78:	ed91 7a01 	vldr	s14, [r1, #4]
2400fc7c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400fc80:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
2400fc82:	eea7 0a27 	vfma.f32	s0, s14, s15
2400fc86:	ed83 0a03 	vstr	s0, [r3, #12]
}
2400fc8a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400fc8e:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
2400fc90:	ed92 7a00 	vldr	s14, [r2]
2400fc94:	2000      	movs	r0, #0
2400fc96:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400fc9a:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
2400fc9c:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
2400fca0:	ed83 0a03 	vstr	s0, [r3, #12]
}
2400fca4:	f85d 4b04 	ldr.w	r4, [sp], #4
2400fca8:	4770      	bx	lr
2400fcaa:	bf00      	nop

2400fcac <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
2400fcac:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
2400fcae:	edd3 7a01 	vldr	s15, [r3, #4]
2400fcb2:	6959      	ldr	r1, [r3, #20]
2400fcb4:	689a      	ldr	r2, [r3, #8]
2400fcb6:	ee27 0a80 	vmul.f32	s0, s15, s0
2400fcba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2400fcbe:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2400fcc2:	695a      	ldr	r2, [r3, #20]
2400fcc4:	69d9      	ldr	r1, [r3, #28]
2400fcc6:	3201      	adds	r2, #1
2400fcc8:	428a      	cmp	r2, r1
2400fcca:	bf08      	it	eq
2400fccc:	2200      	moveq	r2, #0
2400fcce:	615a      	str	r2, [r3, #20]
}
2400fcd0:	4770      	bx	lr
2400fcd2:	bf00      	nop

2400fcd4 <tLinearDelay_tickOut>:
{
2400fcd4:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
2400fcd6:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
2400fcd8:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fcda:	6899      	ldr	r1, [r3, #8]
2400fcdc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
2400fce0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
2400fce4:	69dc      	ldr	r4, [r3, #28]
2400fce6:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fce8:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
2400fcec:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
2400fcee:	ee20 0a27 	vmul.f32	s0, s0, s15
2400fcf2:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
2400fcf6:	d20b      	bcs.n	2400fd10 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
2400fcf8:	ed90 7a01 	vldr	s14, [r0, #4]
2400fcfc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400fd00:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
2400fd02:	eea7 0a27 	vfma.f32	s0, s14, s15
2400fd06:	ed83 0a03 	vstr	s0, [r3, #12]
}
2400fd0a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400fd0e:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
2400fd10:	ed91 7a00 	vldr	s14, [r1]
2400fd14:	2200      	movs	r2, #0
2400fd16:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2400fd1a:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
2400fd1c:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
2400fd20:	ed83 0a03 	vstr	s0, [r3, #12]
}
2400fd24:	f85d 4b04 	ldr.w	r4, [sp], #4
2400fd28:	4770      	bx	lr
2400fd2a:	bf00      	nop

2400fd2c <tLinearDelay_setDelay>:
{
2400fd2c:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
2400fd2e:	6804      	ldr	r4, [r0, #0]
{
2400fd30:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400fd34:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 2400fda8 <tLinearDelay_setDelay+0x7c>
2400fd38:	edd4 7a07 	vldr	s15, [r4, #28]
2400fd3c:	eeb8 1a67 	vcvt.f32.u32	s2, s15
2400fd40:	f01c ff86 	bl	2402cc50 <__LEAF_clip_veneer>
    Lfloat outPointer = d->inPoint - d->delay;
2400fd44:	edd4 7a05 	vldr	s15, [r4, #20]
        outPointer += d->maxDelay; // modulo maximum length
2400fd48:	69e2      	ldr	r2, [r4, #28]
    Lfloat outPointer = d->inPoint - d->delay;
2400fd4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
2400fd4e:	ed84 0a08 	vstr	s0, [r4, #32]
    Lfloat outPointer = d->inPoint - d->delay;
2400fd52:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
2400fd56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400fd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fd5e:	d50a      	bpl.n	2400fd76 <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
2400fd60:	ee07 2a10 	vmov	s14, r2
2400fd64:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400fd68:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
2400fd6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400fd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fd74:	d4f8      	bmi.n	2400fd68 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
2400fd76:	eebc 7ae7 	vcvt.u32.f32	s14, s15
2400fd7a:	ee17 3a10 	vmov	r3, s14
    d->omAlpha = 1.0f - d->alpha;
2400fd7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
2400fd82:	ee06 3a90 	vmov	s13, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
2400fd86:	4293      	cmp	r3, r2
2400fd88:	bf08      	it	eq
2400fd8a:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
2400fd8c:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
2400fd90:	eef8 6a66 	vcvt.f32.u32	s13, s13
2400fd94:	61a3      	str	r3, [r4, #24]
2400fd96:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
2400fd9a:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
2400fd9e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
2400fda2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
}
2400fda6:	bd10      	pop	{r4, pc}
2400fda8:	00000000 	.word	0x00000000

2400fdac <tLinearDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tLinearDelay_addTo (tLinearDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tLinearDelay* d = *dl;
2400fdac:	6802      	ldr	r2, [r0, #0]

    int32_t tap = d->inPoint - tapDelay - 1;
2400fdae:	6953      	ldr	r3, [r2, #20]
2400fdb0:	1a59      	subs	r1, r3, r1

    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
2400fdb2:	3901      	subs	r1, #1
2400fdb4:	d502      	bpl.n	2400fdbc <tLinearDelay_addTo+0x10>
2400fdb6:	69d3      	ldr	r3, [r2, #28]
2400fdb8:	18c9      	adds	r1, r1, r3
2400fdba:	d4fd      	bmi.n	2400fdb8 <tLinearDelay_addTo+0xc>
    
    return (d->buff[tap] += value);
2400fdbc:	6893      	ldr	r3, [r2, #8]
2400fdbe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
2400fdc2:	edd3 7a00 	vldr	s15, [r3]
2400fdc6:	ee30 0a27 	vadd.f32	s0, s0, s15
2400fdca:	ed83 0a00 	vstr	s0, [r3]
}
2400fdce:	4770      	bx	lr

2400fdd0 <tHermiteDelay_initToPool>:
{
    tHermiteDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tHermiteDelay_initToPool  (tHermiteDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
2400fdd0:	b570      	push	{r4, r5, r6, lr}
2400fdd2:	460d      	mov	r5, r1
2400fdd4:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
2400fdd6:	2030      	movs	r0, #48	; 0x30
{
2400fdd8:	ed2d 8b02 	vpush	{d8}
2400fddc:	b082      	sub	sp, #8
    _tMempool* m = *mp;
2400fdde:	6811      	ldr	r1, [r2, #0]
{
2400fde0:	eeb0 8a40 	vmov.f32	s16, s0
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
2400fde4:	9101      	str	r1, [sp, #4]
2400fde6:	f002 fc83 	bl	240126f0 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
2400fdea:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
2400fdee:	9901      	ldr	r1, [sp, #4]
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
2400fdf0:	6030      	str	r0, [r6, #0]
2400fdf2:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
2400fdf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
2400fdf8:	eddf 7a30 	vldr	s15, [pc, #192]	; 2400febc <tHermiteDelay_initToPool+0xec>
    d->mempool = m;
2400fdfc:	6001      	str	r1, [r0, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
2400fdfe:	fec8 7a27 	vmaxnm.f32	s15, s16, s15
    d->maxDelay = maxDelay;
2400fe02:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
2400fe04:	fec7 7ac7 	vminnm.f32	s15, s15, s14
2400fe08:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
2400fe0c:	2d00      	cmp	r5, #0
2400fe0e:	d14f      	bne.n	2400feb0 <tHermiteDelay_initToPool+0xe0>
2400fe10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
    else
    {
        //make the delay size into a power of 2
        maxDelay--;
        maxDelay |= maxDelay >> 1;
2400fe14:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
2400fe18:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
2400fe1c:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
2400fe20:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
2400fe24:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
2400fe28:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
2400fe2a:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
2400fe2c:	60a2      	str	r2, [r4, #8]
    }
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2400fe2e:	00a8      	lsls	r0, r5, #2
2400fe30:	f002 fc5e 	bl	240126f0 <mpool_alloc>

    d->gain = 1.0f;

    d->lastIn = 0.0f;
2400fe34:	2300      	movs	r3, #0
    d->gain = 1.0f;
2400fe36:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2400fe3a:	6060      	str	r0, [r4, #4]
    d->lastIn = 0.0f;
2400fe3c:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
2400fe3e:	60e3      	str	r3, [r4, #12]

    d->inPoint = 0;
2400fe40:	2300      	movs	r3, #0
    d->gain = 1.0f;
2400fe42:	6222      	str	r2, [r4, #32]
    d->outPoint = 0;

    tHermiteDelay_setDelay(dl, d->delay);
2400fe44:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    d->outPoint = 0;
2400fe48:	e9c4 3305 	strd	r3, r3, [r4, #20]
    return d->lastOut;
}

void tHermiteDelay_setDelay (tHermiteDelay* const dl, Lfloat delay)
{
    _tHermiteDelay* d = *dl;
2400fe4c:	6833      	ldr	r3, [r6, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    Lfloat outPointer = d->inPoint - d->delay;
2400fe4e:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
2400fe52:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    Lfloat outPointer = d->inPoint - d->delay;
2400fe56:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400fe5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while ( outPointer < 0 )
2400fe5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400fe62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fe66:	d50a      	bpl.n	2400fe7e <tHermiteDelay_initToPool+0xae>
        outPointer += d->maxDelay; // modulo maximum length
2400fe68:	ed93 7a07 	vldr	s14, [r3, #28]
2400fe6c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400fe70:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
2400fe74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400fe78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400fe7c:	d4f8      	bmi.n	2400fe70 <tHermiteDelay_initToPool+0xa0>
    
    d->outPoint = (uint32_t) outPointer;   // integer part
2400fe7e:	eebc 6ae7 	vcvt.u32.f32	s12, s15
    
    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
    
    d->outPoint &= d->bufferMask;
2400fe82:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
2400fe84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
2400fe88:	eef8 6a46 	vcvt.f32.u32	s13, s12
    d->outPoint &= d->bufferMask;
2400fe8c:	ee16 1a10 	vmov	r1, s12
    d->omAlpha = 1.0f - d->alpha;
2400fe90:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->outPoint &= d->bufferMask;
2400fe94:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
2400fe96:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
2400fe9a:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->outPoint &= d->bufferMask;
2400fe9e:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
2400fea0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
2400fea4:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
2400fea8:	b002      	add	sp, #8
2400feaa:	ecbd 8b02 	vpop	{d8}
2400feae:	bd70      	pop	{r4, r5, r6, pc}
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
2400feb0:	1e6b      	subs	r3, r5, #1
2400feb2:	422b      	tst	r3, r5
2400feb4:	461a      	mov	r2, r3
2400feb6:	d1ad      	bne.n	2400fe14 <tHermiteDelay_initToPool+0x44>
2400feb8:	e7b8      	b.n	2400fe2c <tHermiteDelay_initToPool+0x5c>
2400feba:	bf00      	nop
2400febc:	00000000 	.word	0x00000000

2400fec0 <tHermiteDelay_free>:
{
2400fec0:	b510      	push	{r4, lr}
    _tHermiteDelay* d = *dl;
2400fec2:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
2400fec4:	e9d4 1000 	ldrd	r1, r0, [r4]
2400fec8:	f002 fcd4 	bl	24012874 <mpool_free>
    mpool_free((char*)d, d->mempool);
2400fecc:	6821      	ldr	r1, [r4, #0]
2400fece:	4620      	mov	r0, r4
}
2400fed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
2400fed4:	f002 bcce 	b.w	24012874 <mpool_free>

2400fed8 <tHermiteDelay_clear>:
    _tHermiteDelay* d = *dl;
2400fed8:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2400feda:	69cb      	ldr	r3, [r1, #28]
2400fedc:	b14b      	cbz	r3, 2400fef2 <tHermiteDelay_clear+0x1a>
2400fede:	2300      	movs	r3, #0
        d->buff[i] = 0;
2400fee0:	2000      	movs	r0, #0
2400fee2:	684a      	ldr	r2, [r1, #4]
2400fee4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
2400fee8:	3301      	adds	r3, #1
        d->buff[i] = 0;
2400feea:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2400feec:	69ca      	ldr	r2, [r1, #28]
2400feee:	429a      	cmp	r2, r3
2400fef0:	d8f7      	bhi.n	2400fee2 <tHermiteDelay_clear+0xa>
}
2400fef2:	4770      	bx	lr

2400fef4 <tHermiteDelay_tickIn>:
    _tHermiteDelay* d = *dl;
2400fef4:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input;
2400fef6:	6959      	ldr	r1, [r3, #20]
2400fef8:	685a      	ldr	r2, [r3, #4]
2400fefa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2400fefe:	ed82 0a00 	vstr	s0, [r2]
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
2400ff02:	695a      	ldr	r2, [r3, #20]
2400ff04:	6899      	ldr	r1, [r3, #8]
2400ff06:	3201      	adds	r2, #1
2400ff08:	400a      	ands	r2, r1
2400ff0a:	615a      	str	r2, [r3, #20]
}
2400ff0c:	4770      	bx	lr
2400ff0e:	bf00      	nop

2400ff10 <tHermiteDelay_tickOut>:
{
2400ff10:	b510      	push	{r4, lr}
    _tHermiteDelay* d = *dl;
2400ff12:	6804      	ldr	r4, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
2400ff14:	69a1      	ldr	r1, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
2400ff16:	ed94 2a0a 	vldr	s4, [r4, #40]	; 0x28
                                                d->buff[(idx + 2) & d->bufferMask],
2400ff1a:	1c8b      	adds	r3, r1, #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
2400ff1c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
                                                d->buff[(idx + 2) & d->bufferMask],
2400ff20:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
2400ff22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2400ff26:	edd3 1a00 	vldr	s3, [r3]
2400ff2a:	69e3      	ldr	r3, [r4, #28]
2400ff2c:	440b      	add	r3, r1
2400ff2e:	3b01      	subs	r3, #1
2400ff30:	4003      	ands	r3, r0
2400ff32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2400ff36:	ed93 0a00 	vldr	s0, [r3]
                                                d->buff[(idx + 1) & d->bufferMask],
2400ff3a:	1c4b      	adds	r3, r1, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
2400ff3c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
                                                d->buff[(idx + 1) & d->bufferMask],
2400ff40:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
2400ff42:	edd1 0a00 	vldr	s1, [r1]
2400ff46:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2400ff4a:	ed92 1a00 	vldr	s2, [r2]
2400ff4e:	f002 fadd 	bl	2401250c <LEAF_interpolate_hermite_x>
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
2400ff52:	69a3      	ldr	r3, [r4, #24]
2400ff54:	68a2      	ldr	r2, [r4, #8]
2400ff56:	3301      	adds	r3, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
2400ff58:	ed84 0a03 	vstr	s0, [r4, #12]
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
2400ff5c:	4013      	ands	r3, r2
2400ff5e:	61a3      	str	r3, [r4, #24]
}
2400ff60:	bd10      	pop	{r4, pc}
2400ff62:	bf00      	nop

2400ff64 <tHermiteDelay_setDelay>:
    _tHermiteDelay* d = *dl;
2400ff64:	6803      	ldr	r3, [r0, #0]
    Lfloat outPointer = d->inPoint - d->delay;
2400ff66:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
2400ff6a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    Lfloat outPointer = d->inPoint - d->delay;
2400ff6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400ff72:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
2400ff76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400ff7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400ff7e:	d50a      	bpl.n	2400ff96 <tHermiteDelay_setDelay+0x32>
        outPointer += d->maxDelay; // modulo maximum length
2400ff80:	ed93 7a07 	vldr	s14, [r3, #28]
2400ff84:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400ff88:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
2400ff8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2400ff90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400ff94:	d4f8      	bmi.n	2400ff88 <tHermiteDelay_setDelay+0x24>
    d->outPoint = (uint32_t) outPointer;   // integer part
2400ff96:	eebc 6ae7 	vcvt.u32.f32	s12, s15
    d->outPoint &= d->bufferMask;
2400ff9a:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
2400ff9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
2400ffa0:	eef8 6a46 	vcvt.f32.u32	s13, s12
    d->outPoint &= d->bufferMask;
2400ffa4:	ee16 1a10 	vmov	r1, s12
    d->omAlpha = 1.0f - d->alpha;
2400ffa8:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->outPoint &= d->bufferMask;
2400ffac:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
2400ffae:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
2400ffb2:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->outPoint &= d->bufferMask;
2400ffb6:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
2400ffb8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
2400ffbc:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
2400ffc0:	4770      	bx	lr
2400ffc2:	bf00      	nop

2400ffc4 <tHermiteDelay_tapOut>:

Lfloat tHermiteDelay_tapOut (tHermiteDelay* const dl, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
2400ffc4:	6802      	ldr	r2, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
2400ffc6:	6953      	ldr	r3, [r2, #20]
2400ffc8:	1a5b      	subs	r3, r3, r1
    
    return d->buff[tap];
2400ffca:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
2400ffce:	3b01      	subs	r3, #1
2400ffd0:	4003      	ands	r3, r0
    return d->buff[tap];
2400ffd2:	eb02 0283 	add.w	r2, r2, r3, lsl #2

}
2400ffd6:	ed92 0a00 	vldr	s0, [r2]
2400ffda:	4770      	bx	lr

2400ffdc <tHermiteDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tHermiteDelay_addTo (tHermiteDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
2400ffdc:	6802      	ldr	r2, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
2400ffde:	6953      	ldr	r3, [r2, #20]
2400ffe0:	1a5b      	subs	r3, r3, r1
    
    return (d->buff[tap] += value);
2400ffe2:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
2400ffe6:	3b01      	subs	r3, #1
2400ffe8:	4003      	ands	r3, r0
    return (d->buff[tap] += value);
2400ffea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2400ffee:	edd3 7a00 	vldr	s15, [r3]
2400fff2:	ee30 0a27 	vadd.f32	s0, s0, s15
2400fff6:	ed83 0a00 	vstr	s0, [r3]
}
2400fffa:	4770      	bx	lr

2400fffc <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
2400fffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
2400fffe:	698f      	ldr	r7, [r1, #24]
{
24010000:	4606      	mov	r6, r0
24010002:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
24010004:	2020      	movs	r0, #32
24010006:	4639      	mov	r1, r7
24010008:	f002 fb72 	bl	240126f0 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
2401000c:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
24010010:	4a10      	ldr	r2, [pc, #64]	; (24010054 <tCrusher_init+0x58>)
    c->op = 4;
24010012:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
24010014:	6030      	str	r0, [r6, #0]
24010016:	4604      	mov	r4, r0
    c->op = 4;
24010018:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
2401001a:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
2401001c:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
2401001e:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
24010020:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24010022:	2010      	movs	r0, #16
    _tMempool* m = *mp;
24010024:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24010026:	4629      	mov	r1, r5
24010028:	f002 fb62 	bl	240126f0 <mpool_alloc>
    s->invRatio = 1.0f;
2401002c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
24010030:	2200      	movs	r2, #0
    s->count = 0;
24010032:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24010034:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24010036:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24010058 <tCrusher_init+0x5c>
    s->mempool = m;
2401003a:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
2401003c:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
2401003e:	6082      	str	r2, [r0, #8]
    s->count = 0;
24010040:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24010042:	eddf 7a06 	vldr	s15, [pc, #24]	; 2401005c <tCrusher_init+0x60>
24010046:	edd4 6a03 	vldr	s13, [r4, #12]
2401004a:	eee6 7a87 	vfma.f32	s15, s13, s14
2401004e:	edc4 7a06 	vstr	s15, [r4, #24]
}
24010052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24010054:	3951b717 	.word	0x3951b717
24010058:	3912ccf6 	.word	0x3912ccf6
2401005c:	3e99999a 	.word	0x3e99999a

24010060 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
24010060:	eddf 7a1e 	vldr	s15, [pc, #120]	; 240100dc <tCrusher_tick+0x7c>
24010064:	ee20 0a27 	vmul.f32	s0, s0, s15
{
24010068:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
2401006a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
2401006e:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
24010070:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
24010074:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
24010078:	6960      	ldr	r0, [r4, #20]
2401007a:	05c0      	lsls	r0, r0, #23
2401007c:	ee20 0a27 	vmul.f32	s0, s0, s15
24010080:	f002 f88e 	bl	240121a0 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
24010084:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
24010088:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
2401008c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24010090:	f01c fdde 	bl	2402cc50 <__LEAF_clip_veneer>
    
    sample = LEAF_round(sample, c->rnd);
24010094:	edd4 0a04 	vldr	s1, [r4, #16]
24010098:	f002 f870 	bl	2401217c <LEAF_round>
    _tSampleReducer* s = *sr;
2401009c:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
2401009e:	68da      	ldr	r2, [r3, #12]
240100a0:	edd3 7a01 	vldr	s15, [r3, #4]
240100a4:	ee07 2a10 	vmov	s14, r2
240100a8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240100ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
240100b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240100b4:	dc08      	bgt.n	240100c8 <tCrusher_tick+0x68>
    s->count++;
240100b6:	3201      	adds	r2, #1
    return s->hold;
240100b8:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
240100bc:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
240100be:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
240100c2:	ee20 0a27 	vmul.f32	s0, s0, s15
240100c6:	bd10      	pop	{r4, pc}
        s->hold = input;
240100c8:	2201      	movs	r2, #1
240100ca:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
240100ce:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
240100d0:	edd4 7a06 	vldr	s15, [r4, #24]
}
240100d4:	ee20 0a27 	vmul.f32	s0, s0, s15
240100d8:	bd10      	pop	{r4, pc}
240100da:	bf00      	nop
240100dc:	459c4000 	.word	0x459c4000

240100e0 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
240100e0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
240100e4:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
240100e6:	ee20 0a27 	vmul.f32	s0, s0, s15
240100ea:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240100ee:	ed83 0a05 	vstr	s0, [r3, #20]
}
240100f2:	4770      	bx	lr

240100f4 <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
240100f4:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
240100f8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 2401012c <tCrusher_setQuality+0x38>
240100fc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
24010100:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
24010102:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
24010104:	f01c fda4 	bl	2402cc50 <__LEAF_clip_veneer>
    
    c->div = 0.01f + val * SCALAR;
24010108:	ed9f 6a09 	vldr	s12, [pc, #36]	; 24010130 <tCrusher_setQuality+0x3c>
2401010c:	eddf 7a09 	vldr	s15, [pc, #36]	; 24010134 <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24010110:	eddf 6a09 	vldr	s13, [pc, #36]	; 24010138 <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
24010114:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24010118:	ed9f 7a08 	vldr	s14, [pc, #32]	; 2401013c <tCrusher_setQuality+0x48>
2401011c:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
24010120:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24010124:	ed84 7a06 	vstr	s14, [r4, #24]
}
24010128:	bd10      	pop	{r4, pc}
2401012a:	bf00      	nop
2401012c:	00000000 	.word	0x00000000
24010130:	459c4000 	.word	0x459c4000
24010134:	3c23d70a 	.word	0x3c23d70a
24010138:	3912ccf6 	.word	0x3912ccf6
2401013c:	3e99999a 	.word	0x3e99999a

24010140 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
24010140:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
24010142:	ed83 0a04 	vstr	s0, [r3, #16]
}
24010146:	4770      	bx	lr

24010148 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
24010148:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
    _tCrusher* c = *cr;
2401014c:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
2401014e:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
24010152:	eeb4 0a67 	vcmp.f32	s0, s15
24010156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401015a:	d809      	bhi.n	24010170 <tCrusher_setSamplingRatio+0x28>
2401015c:	eeb5 0a40 	vcmp.f32	s0, #0.0
24010160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010164:	db04      	blt.n	24010170 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
24010166:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
2401016a:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
2401016c:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
24010170:	4770      	bx	lr
24010172:	bf00      	nop

24010174 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
24010174:	b570      	push	{r4, r5, r6, lr}
24010176:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
2401017a:	698d      	ldr	r5, [r1, #24]
{
2401017c:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
2401017e:	206c      	movs	r0, #108	; 0x6c
24010180:	4629      	mov	r1, r5
24010182:	f002 fab5 	bl	240126f0 <mpool_alloc>
24010186:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24010188:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
2401018a:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
2401018e:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
24010190:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
24010192:	ed93 8a00 	vldr	s16, [r3]
24010196:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
2401019a:	ee80 0a08 	vdiv.f32	s0, s0, s16
2401019e:	f004 fe93 	bl	24014ec8 <expf>
240101a2:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
240101a6:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
240101aa:	ee87 0a88 	vdiv.f32	s0, s15, s16
240101ae:	f004 fe8b 	bl	24014ec8 <expf>
    c->x_T[0] = 0.0f;
    c->x_T[1] = 0.0f;
    c->y_T[0] = 0.0f;
    c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
240101b2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f;
240101b6:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
240101b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
240101bc:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
240101be:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f;
240101c0:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
240101c2:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
240101c4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[1] = 0.0f;
240101c8:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f;
240101ca:	62e3      	str	r3, [r4, #44]	; 0x2c
    c->y_G[1] = 0.0f;
240101cc:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f;
240101ce:	6363      	str	r3, [r4, #52]	; 0x34
    c->x_T[1] = 0.0f;
240101d0:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f;
240101d2:	63e3      	str	r3, [r4, #60]	; 0x3c
    c->y_T[1] = 0.0f;
240101d4:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
240101d6:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
240101d8:	4905      	ldr	r1, [pc, #20]	; (240101f0 <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
240101da:	4b06      	ldr	r3, [pc, #24]	; (240101f4 <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
240101dc:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
240101e0:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
240101e2:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
240101e4:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
240101e6:	6223      	str	r3, [r4, #32]
}
240101e8:	ecbd 8b02 	vpop	{d8}
240101ec:	bd70      	pop	{r4, r5, r6, pc}
240101ee:	bf00      	nop
240101f0:	40400000 	.word	0x40400000
240101f4:	3e2aaaab 	.word	0x3e2aaaab

240101f8 <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat tCompressor_tick(tCompressor* const comp, Lfloat in)
{
240101f8:	b510      	push	{r4, lr}
240101fa:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
240101fe:	6804      	ldr	r4, [r0, #0]
{
24010200:	eeb0 8a40 	vmov.f32	s16, s0
    
    Lfloat slope, overshoot;
    
    Lfloat in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
24010204:	f001 ff38 	bl	24012078 <fastabsf>
24010208:	f002 fa00 	bl	2401260c <fasteratodb>
2401020c:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 240102bc <tCompressor_tick+0xc4>
24010210:	eef0 0a40 	vmov.f32	s1, s0
24010214:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 240102c0 <tCompressor_tick+0xc8>
24010218:	f01c fd1a 	bl	2402cc50 <__LEAF_clip_veneer>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
2401021c:	edd4 7a03 	vldr	s15, [r4, #12]
    

    if (overshoot <= -(c->W))
24010220:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
24010224:	ee70 7a67 	vsub.f32	s15, s0, s15
    c->y_T[1] = c->y_T[0];
24010228:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
2401022c:	eeb1 7a46 	vneg.f32	s14, s12
    c->y_T[1] = c->y_T[0];
24010230:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
24010234:	eeb4 7ae7 	vcmpe.f32	s14, s15
24010238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401023c:	da16      	bge.n	2401026c <tCompressor_tick+0x74>
    {
        out_db = in_db;
        c->isActive = 0;
    }
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
2401023e:	eeb4 6ae7 	vcmpe.f32	s12, s15
    slope = 1.0f - c->invR; // feed-forward topology;
24010242:	edd4 5a07 	vldr	s11, [r4, #28]
24010246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
2401024a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
2401024e:	ee37 7a65 	vsub.f32	s14, s14, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
24010252:	dd2f      	ble.n	240102b4 <tCompressor_tick+0xbc>
    {
        Lfloat squareit = (overshoot + c->W);
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
24010254:	edd4 5a08 	vldr	s11, [r4, #32]
        Lfloat squareit = (overshoot + c->W);
24010258:	ee36 6a27 	vadd.f32	s12, s12, s15
    {
2401025c:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
2401025e:	ee27 7a25 	vmul.f32	s14, s14, s11
24010262:	ee27 7a06 	vmul.f32	s14, s14, s12
24010266:	ee27 7a06 	vmul.f32	s14, s14, s12
    {
2401026a:	e002      	b.n	24010272 <tCompressor_tick+0x7a>
2401026c:	2300      	movs	r3, #0
2401026e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 240102bc <tCompressor_tick+0xc4>
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
24010272:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
24010276:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
2401027a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        c->isActive = 0;
2401027e:	6463      	str	r3, [r4, #68]	; 0x44
    c->x_T[0] = out_db - in_db;
24010280:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
24010284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
24010288:	bf4c      	ite	mi
2401028a:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
2401028e:	ed94 6a02 	vldrpl	s12, [r4, #8]
24010292:	ee77 7ac6 	vsub.f32	s15, s15, s12
24010296:	ee67 7a87 	vmul.f32	s15, s15, s14
2401029a:	eee6 7a86 	vfma.f32	s15, s13, s12
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
2401029e:	ee30 0a67 	vsub.f32	s0, s0, s15
240102a2:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
240102a6:	f002 f9e7 	bl	24012678 <fasterdbtoa>
    return attenuation * in;
}
240102aa:	ee28 0a00 	vmul.f32	s0, s16, s0
240102ae:	ecbd 8b02 	vpop	{d8}
240102b2:	bd10      	pop	{r4, pc}
        out_db = in_db + slope * overshoot;
240102b4:	ee27 7a27 	vmul.f32	s14, s14, s15
240102b8:	2301      	movs	r3, #1
240102ba:	e7da      	b.n	24010272 <tCompressor_tick+0x7a>
240102bc:	00000000 	.word	0x00000000
240102c0:	c2b40000 	.word	0xc2b40000

240102c4 <tCompressor_setTables>:
{
    _tCompressor* c = *comp;
	c->atodbTable = atodb;
	c->dbtoaTable = dbtoa;

	c->atodbTableSizeMinus1 = atodbTableSize-1;
240102c4:	3b01      	subs	r3, #1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240102c6:	ee70 0ac0 	vsub.f32	s1, s1, s0
    _tCompressor* c = *comp;
240102ca:	6800      	ldr	r0, [r0, #0]
	c->atodbOffset = atodbMinIn * c->atodbScalar;


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
240102cc:	ee71 1ac1 	vsub.f32	s3, s3, s2
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240102d0:	ee07 3a90 	vmov	s15, r3
	c->atodbTableSizeMinus1 = atodbTableSize-1;
240102d4:	6643      	str	r3, [r0, #100]	; 0x64
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240102d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
{
240102da:	9b00      	ldr	r3, [sp, #0]
	c->atodbTable = atodb;
240102dc:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
240102de:	3b01      	subs	r3, #1
	c->dbtoaTable = dbtoa;
240102e0:	6502      	str	r2, [r0, #80]	; 0x50
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240102e2:	eec7 7a20 	vdiv.f32	s15, s14, s1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
240102e6:	6683      	str	r3, [r0, #104]	; 0x68
	c->atodbOffset = atodbMinIn * c->atodbScalar;
240102e8:	ee27 0a80 	vmul.f32	s0, s15, s0
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
240102ec:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
240102f0:	ee07 3a90 	vmov	s15, r3
240102f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	c->atodbOffset = atodbMinIn * c->atodbScalar;
240102f8:	ed80 0a17 	vstr	s0, [r0, #92]	; 0x5c
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
240102fc:	eec7 7a21 	vdiv.f32	s15, s14, s3
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
24010300:	ee27 1a81 	vmul.f32	s2, s15, s2
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24010304:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
24010308:	ed80 1a18 	vstr	s2, [r0, #96]	; 0x60

}
2401030c:	4770      	bx	lr
2401030e:	bf00      	nop

24010310 <tFeedbackLeveler_initToPool>:
{
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
24010310:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
24010312:	6817      	ldr	r7, [r2, #0]
{
24010314:	4614      	mov	r4, r2
24010316:	4606      	mov	r6, r0
24010318:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
2401031a:	2018      	movs	r0, #24
2401031c:	4639      	mov	r1, r7
{
2401031e:	ed2d 8b02 	vpush	{d8}
24010322:	eef0 8a40 	vmov.f32	s17, s0
24010326:	b083      	sub	sp, #12
24010328:	eeb0 8a41 	vmov.f32	s16, s2
2401032c:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24010330:	f002 f9de 	bl	240126f0 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24010334:	4621      	mov	r1, r4
    p->curr=0.0f;
24010336:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24010338:	4604      	mov	r4, r0
2401033a:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
2401033c:	ed9d 0a01 	vldr	s0, [sp, #4]
24010340:	3014      	adds	r0, #20
    p->mempool = m;
24010342:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
24010346:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
2401034a:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
2401034c:	f7ff fbaa 	bl	2400faa4 <tPowerFollower_initToPool>
    p->mode=mode;
24010350:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
24010352:	ed84 8a02 	vstr	s16, [r4, #8]
}
24010356:	b003      	add	sp, #12
24010358:	ecbd 8b02 	vpop	{d8}
2401035c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401035e:	bf00      	nop

24010360 <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
24010360:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
24010362:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
24010364:	f104 0014 	add.w	r0, r4, #20
24010368:	f7ff fbb6 	bl	2400fad8 <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
2401036c:	6821      	ldr	r1, [r4, #0]
2401036e:	4620      	mov	r0, r4
}
24010370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
24010374:	f002 ba7e 	b.w	24012874 <mpool_free>

24010378 <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
24010378:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
2401037a:	ed83 0a02 	vstr	s0, [r3, #8]
}
2401037e:	4770      	bx	lr

24010380 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
24010380:	6800      	ldr	r0, [r0, #0]
24010382:	3014      	adds	r0, #20
24010384:	f7ff bbac 	b.w	2400fae0 <tPowerFollower_setFactor>

24010388 <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
24010388:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
2401038a:	60d9      	str	r1, [r3, #12]
}
2401038c:	4770      	bx	lr
2401038e:	bf00      	nop

24010390 <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
24010390:	b510      	push	{r4, lr}
24010392:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
24010396:	6804      	ldr	r4, [r0, #0]
{
24010398:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
2401039c:	f104 0014 	add.w	r0, r4, #20
240103a0:	f7ff fbb0 	bl	2400fb04 <tPowerFollower_tick>
240103a4:	edd4 7a01 	vldr	s15, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
240103a8:	68e3      	ldr	r3, [r4, #12]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
240103aa:	ee30 7a67 	vsub.f32	s14, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
240103ae:	b91b      	cbnz	r3, 240103b8 <tFeedbackLeveler_tick+0x28>
240103b0:	eddf 7a08 	vldr	s15, [pc, #32]	; 240103d4 <tFeedbackLeveler_tick+0x44>
240103b4:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
240103b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240103bc:	edd4 6a02 	vldr	s13, [r4, #8]
240103c0:	eee6 7ac7 	vfms.f32	s15, s13, s14
240103c4:	ee27 0a88 	vmul.f32	s0, s15, s16
240103c8:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
240103cc:	ecbd 8b02 	vpop	{d8}
240103d0:	bd10      	pop	{r4, pc}
240103d2:	bf00      	nop
240103d4:	00000000 	.word	0x00000000

240103d8 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
240103d8:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
240103da:	ed83 0a01 	vstr	s0, [r3, #4]
}
240103de:	4770      	bx	lr

240103e0 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, LEAF* const leaf)
{
240103e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240103e2:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
240103e6:	699e      	ldr	r6, [r3, #24]
{
240103e8:	4614      	mov	r4, r2
240103ea:	4607      	mov	r7, r0
240103ec:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
240103ee:	206c      	movs	r0, #108	; 0x6c
240103f0:	4631      	mov	r1, r6
{
240103f2:	eef0 9a40 	vmov.f32	s19, s0
240103f6:	eeb0 9a60 	vmov.f32	s18, s1
240103fa:	eef0 8a61 	vmov.f32	s17, s3
240103fe:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
24010402:	f002 f975 	bl	240126f0 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24010406:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
2401040a:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
2401040c:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
2401040e:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24010410:	eef8 5a67 	vcvt.f32.u32	s11, s15
24010414:	eddf 7a22 	vldr	s15, [pc, #136]	; 240104a0 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
24010418:	6873      	ldr	r3, [r6, #4]

    adsr->next = 0.0f;

    adsr->whichStage = env_idle;

    adsr->sustain = sustain;
2401041a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
2401041e:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24010420:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24010424:	ee65 5aa7 	vmul.f32	s11, s11, s15
    adsr->exp_buff = expBuffer;
24010428:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
2401042a:	6084      	str	r4, [r0, #8]
    adsr->sustain = sustain;
2401042c:	fe88 8a46 	vminnm.f32	s16, s16, s12
    adsr->sampleRate = leaf->sampleRate;
24010430:	ed93 5a00 	vldr	s10, [r3]
    adsr->whichStage = env_idle;
24010434:	2200      	movs	r2, #0
24010436:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 240104a4 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
2401043a:	eec5 7a85 	vdiv.f32	s15, s11, s10
    adsr->sampleRate = leaf->sampleRate;
2401043e:	ed80 5a04 	vstr	s10, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24010442:	fe89 0a87 	vmaxnm.f32	s0, s19, s14
24010446:	fec9 0a07 	vmaxnm.f32	s1, s18, s14
2401044a:	fec8 1a87 	vmaxnm.f32	s3, s17, s14

    adsr->baseLeakFactor = 1.0f;
2401044e:	ed80 6a18 	vstr	s12, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
24010452:	ed80 6a19 	vstr	s12, [r0, #100]	; 0x64
    adsr->sustain = sustain;
24010456:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    adsr->next = 0.0f;
2401045a:	ed80 7a06 	vstr	s14, [r0, #24]
    adsr->whichStage = env_idle;
2401045e:	63c2      	str	r2, [r0, #60]	; 0x3c
    adsr->attack = attack;
24010460:	ed80 0a08 	vstr	s0, [r0, #32]
    adsr->decay = decay;
24010464:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
    adsr->sustain = sustain;
24010468:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    adsr->release = release;
2401046c:	edc0 1a0a 	vstr	s3, [r0, #40]	; 0x28
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24010470:	ee87 5a80 	vdiv.f32	s10, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24010474:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24010478:	eec7 5aa0 	vdiv.f32	s11, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
2401047c:	ee87 6aa1 	vdiv.f32	s12, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24010480:	ee27 7aa6 	vmul.f32	s14, s15, s13
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24010484:	ed80 5a0b 	vstr	s10, [r0, #44]	; 0x2c
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24010488:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
2401048c:	edc0 5a0c 	vstr	s11, [r0, #48]	; 0x30
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24010490:	ed80 6a0d 	vstr	s12, [r0, #52]	; 0x34
    adsr->invSampleRate = leaf->invSampleRate;
24010494:	685b      	ldr	r3, [r3, #4]
24010496:	6683      	str	r3, [r0, #104]	; 0x68
}
24010498:	ecbd 8b04 	vpop	{d8-d9}
2401049c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2401049e:	bf00      	nop
240104a0:	4479ffff 	.word	0x4479ffff
240104a4:	00000000 	.word	0x00000000

240104a8 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240104a8:	b538      	push	{r3, r4, r5, lr}
240104aa:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
    _tMempool* m = *mp;
240104ae:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240104b0:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
240104b2:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240104b4:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
240104b8:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240104ba:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
240104be:	f002 f917 	bl	240126f0 <mpool_alloc>
240104c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240104c6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 240104fc <tExpSmooth_init+0x54>
240104ca:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
240104cc:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
240104d0:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
240104d4:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
240104d8:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
240104da:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
240104de:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
240104e2:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
240104e6:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
240104ea:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
240104ee:	6863      	ldr	r3, [r4, #4]
240104f0:	685b      	ldr	r3, [r3, #4]
240104f2:	6183      	str	r3, [r0, #24]
}
240104f4:	ecbd 8b02 	vpop	{d8}
240104f8:	bd38      	pop	{r3, r4, r5, pc}
240104fa:	bf00      	nop
240104fc:	00000000 	.word	0x00000000

24010500 <tExpSmooth_initToPool>:
{
24010500:	b538      	push	{r3, r4, r5, lr}
24010502:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24010506:	680c      	ldr	r4, [r1, #0]
{
24010508:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
2401050a:	201c      	movs	r0, #28
{
2401050c:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010510:	4621      	mov	r1, r4
{
24010512:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24010516:	f002 f8eb 	bl	240126f0 <mpool_alloc>
2401051a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401051e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24010554 <tExpSmooth_initToPool+0x54>
24010522:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
24010524:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
24010528:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
2401052c:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
24010530:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
24010532:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
24010536:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
2401053a:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
2401053e:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
24010542:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
24010546:	6863      	ldr	r3, [r4, #4]
24010548:	685b      	ldr	r3, [r3, #4]
2401054a:	6183      	str	r3, [r0, #24]
}
2401054c:	ecbd 8b02 	vpop	{d8}
24010550:	bd38      	pop	{r3, r4, r5, pc}
24010552:	bf00      	nop
24010554:	00000000 	.word	0x00000000

24010558 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
24010558:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
2401055a:	6801      	ldr	r1, [r0, #0]
2401055c:	f002 b98a 	b.w	24012874 <mpool_free>

24010560 <tExpSmooth_setValAndDest>:
    smooth->curr=val;
}

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
24010560:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
24010562:	ed83 0a04 	vstr	s0, [r3, #16]
    smooth->dest=val;
24010566:	ed83 0a05 	vstr	s0, [r3, #20]
}
2401056a:	4770      	bx	lr

2401056c <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, Lfloat freq, tMempool* const mp)
{
2401056c:	b538      	push	{r3, r4, r5, lr}
2401056e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24010572:	680d      	ldr	r5, [r1, #0]
{
24010574:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
24010576:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
2401057a:	2028      	movs	r0, #40	; 0x28
2401057c:	4629      	mov	r1, r5
{
2401057e:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24010582:	f002 f8b5 	bl	240126f0 <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
24010586:	ed9f 0a12 	vldr	s0, [pc, #72]	; 240105d0 <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
2401058a:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
2401058c:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
24010590:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
24010592:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
24010594:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
24010598:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
2401059c:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
240105a0:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240105a4:	68db      	ldr	r3, [r3, #12]
240105a6:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
240105a8:	6824      	ldr	r4, [r4, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
240105aa:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
240105ae:	ed84 8a01 	vstr	s16, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
240105b2:	ee68 0a27 	vmul.f32	s1, s16, s15
240105b6:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
240105ba:	f01c fb49 	bl	2402cc50 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
240105be:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
240105c2:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
240105c6:	edc4 8a04 	vstr	s17, [r4, #16]
}
240105ca:	ecbd 8b02 	vpop	{d8}
240105ce:	bd38      	pop	{r3, r4, r5, pc}
240105d0:	00000000 	.word	0x00000000

240105d4 <tOnePole_free>:
    _tOnePole* f = *ft;
240105d4:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
240105d6:	6801      	ldr	r1, [r0, #0]
240105d8:	f002 b94c 	b.w	24012874 <mpool_free>

240105dc <tOnePole_setFreq>:
{
240105dc:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
240105de:	6804      	ldr	r4, [r0, #0]
{
240105e0:	eef0 0a40 	vmov.f32	s1, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
240105e4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240105e8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24010614 <tOnePole_setFreq+0x38>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
240105ec:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
240105f0:	edc4 0a01 	vstr	s1, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
240105f4:	ee60 0aa7 	vmul.f32	s1, s1, s15
240105f8:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
240105fc:	f01c fb28 	bl	2402cc50 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24010600:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010604:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24010608:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401060c:	edc4 7a04 	vstr	s15, [r4, #16]
}
24010610:	bd10      	pop	{r4, pc}
24010612:	bf00      	nop
24010614:	00000000 	.word	0x00000000

24010618 <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
24010618:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
2401061a:	ed93 6a08 	vldr	s12, [r3, #32]
    Lfloat in = input * f->gain;
2401061e:	ed93 7a02 	vldr	s14, [r3, #8]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24010622:	edd3 7a04 	vldr	s15, [r3, #16]
    Lfloat in = input * f->gain;
24010626:	ee20 7a07 	vmul.f32	s14, s0, s14
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
2401062a:	edd3 6a05 	vldr	s13, [r3, #20]
2401062e:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
24010632:	ed83 7a07 	vstr	s14, [r3, #28]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24010636:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
2401063a:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
2401063e:	4770      	bx	lr

24010640 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24010640:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 2401067c <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010644:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24010648:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
2401064c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24010680 <tOnePole_setSampleRate+0x40>
{
24010650:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
24010652:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24010654:	edd4 0a01 	vldr	s1, [r4, #4]
24010658:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
2401065c:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24010660:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24010664:	f01c faf4 	bl	2402cc50 <__LEAF_clip_veneer>
    f->a1 = 1.0f - f->b0;
24010668:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
2401066c:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24010670:	ee77 7ac0 	vsub.f32	s15, s15, s0
24010674:	edc4 7a04 	vstr	s15, [r4, #16]
}
24010678:	bd10      	pop	{r4, pc}
2401067a:	bf00      	nop
2401067c:	40c90fdb 	.word	0x40c90fdb
24010680:	00000000 	.word	0x00000000

24010684 <tTwoZero_initToPool>:
{
    tTwoZero_initToPool(ft, &leaf->mempool);
}

void    tTwoZero_initToPool     (tTwoZero* const ft, tMempool* const mp)
{
24010684:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24010686:	680c      	ldr	r4, [r1, #0]
{
24010688:	4605      	mov	r5, r0
    _tTwoZero* f = *ft = (_tTwoZero*) mpool_alloc(sizeof(_tTwoZero), m);
2401068a:	2028      	movs	r0, #40	; 0x28
2401068c:	4621      	mov	r1, r4
2401068e:	f002 f82f 	bl	240126f0 <mpool_alloc>
24010692:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24010694:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->gain = 1.0f;
    f->lastIn[0] = 0.0f;
24010696:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010698:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
2401069a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
2401069e:	68d2      	ldr	r2, [r2, #12]
    f->gain = 1.0f;
240106a0:	6041      	str	r1, [r0, #4]
    f->lastIn[0] = 0.0f;
240106a2:	61c3      	str	r3, [r0, #28]
    f->lastIn[1] = 0.0f;
240106a4:	6203      	str	r3, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240106a6:	6242      	str	r2, [r0, #36]	; 0x24
}
240106a8:	bd38      	pop	{r3, r4, r5, pc}
240106aa:	bf00      	nop

240106ac <tTwoZero_free>:

void    tTwoZero_free   (tTwoZero* const ft)
{
    _tTwoZero* f = *ft;
240106ac:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
240106ae:	6801      	ldr	r1, [r0, #0]
240106b0:	f002 b8e0 	b.w	24012874 <mpool_free>

240106b4 <tTwoZero_tick>:
}

Lfloat   tTwoZero_tick(tTwoZero* const ft, Lfloat input)
{
    _tTwoZero* f = *ft;
240106b4:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
240106b6:	ed93 7a07 	vldr	s14, [r3, #28]
240106ba:	edd3 7a03 	vldr	s15, [r3, #12]
240106be:	ed93 6a08 	vldr	s12, [r3, #32]
240106c2:	ee67 7a27 	vmul.f32	s15, s14, s15
240106c6:	edd3 5a04 	vldr	s11, [r3, #16]
    Lfloat in = input * f->gain;
240106ca:	ed93 5a01 	vldr	s10, [r3, #4]
    Lfloat out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
240106ce:	edd3 6a02 	vldr	s13, [r3, #8]
240106d2:	eee5 7a86 	vfma.f32	s15, s11, s12
    
    f->lastIn[1] = f->lastIn[0];
240106d6:	ed83 7a08 	vstr	s14, [r3, #32]
    Lfloat in = input * f->gain;
240106da:	ee20 0a05 	vmul.f32	s0, s0, s10
    f->lastIn[0] = in;
240106de:	ed83 0a07 	vstr	s0, [r3, #28]
    
    return out;
}
240106e2:	eee6 7a80 	vfma.f32	s15, s13, s0
240106e6:	eeb0 0a67 	vmov.f32	s0, s15
240106ea:	4770      	bx	lr

240106ec <tTwoZero_setCoefficients>:
    f->b1 = b1;
}

void    tTwoZero_setCoefficients(tTwoZero* const ft, Lfloat b0, Lfloat b1, Lfloat b2)
{
    _tTwoZero* f = *ft;
240106ec:	6803      	ldr	r3, [r0, #0]
    f->b0 = b0;
240106ee:	ed83 0a02 	vstr	s0, [r3, #8]
    f->b1 = b1;
240106f2:	edc3 0a03 	vstr	s1, [r3, #12]
    f->b2 = b2;
240106f6:	ed83 1a04 	vstr	s2, [r3, #16]
}
240106fa:	4770      	bx	lr

240106fc <tBiQuad_initToPool>:
{
    tBiQuad_initToPool(ft, &leaf->mempool);
}

void    tBiQuad_initToPool     (tBiQuad* const ft, tMempool* const mp)
{
240106fc:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
240106fe:	680c      	ldr	r4, [r1, #0]
{
24010700:	4605      	mov	r5, r0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
24010702:	2044      	movs	r0, #68	; 0x44
24010704:	4621      	mov	r1, r4
24010706:	f001 fff3 	bl	240126f0 <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
    
    f->b0 = 0.0f;
2401070a:	2300      	movs	r3, #0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
2401070c:	6028      	str	r0, [r5, #0]
    f->gain = 1.0f;
2401070e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->mempool = m;
24010712:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
24010714:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
24010716:	6041      	str	r1, [r0, #4]
    f->b0 = 0.0f;
24010718:	6143      	str	r3, [r0, #20]
    f->a0 = 0.0f;
2401071a:	6083      	str	r3, [r0, #8]
    
    f->lastIn[0] = 0.0f;
2401071c:	6203      	str	r3, [r0, #32]
    f->lastIn[1] = 0.0f;
2401071e:	6243      	str	r3, [r0, #36]	; 0x24
    f->lastOut[0] = 0.0f;
24010720:	6283      	str	r3, [r0, #40]	; 0x28
    f->lastOut[1] = 0.0f;
24010722:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010724:	68d3      	ldr	r3, [r2, #12]
24010726:	6403      	str	r3, [r0, #64]	; 0x40
}
24010728:	bd38      	pop	{r3, r4, r5, pc}
2401072a:	bf00      	nop

2401072c <tBiQuad_free>:

void    tBiQuad_free   (tBiQuad* const ft)
{
    _tBiQuad* f = *ft;
2401072c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
2401072e:	6801      	ldr	r1, [r0, #0]
24010730:	f002 b8a0 	b.w	24012874 <mpool_free>

24010734 <tBiQuad_setSampleRate>:
void    tBiQuad_setSampleRate(tBiQuad* const ft, Lfloat sr)
{
    _tBiQuad* f = *ft;
    
    f->sampleRate = sr;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
24010734:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 240107a0 <tBiQuad_setSampleRate+0x6c>
24010738:	eec7 7a00 	vdiv.f32	s15, s14, s0
{
2401073c:	b510      	push	{r4, lr}
    _tBiQuad* f = *ft;
2401073e:	6804      	ldr	r4, [r0, #0]
{
24010740:	ed2d 8b02 	vpush	{d8}
    
    f->a2 = f->radius * f->radius;
24010744:	ed94 8a0d 	vldr	s16, [r4, #52]	; 0x34
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24010748:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
    f->a2 = f->radius * f->radius;
2401074c:	ee68 8a08 	vmul.f32	s17, s16, s16
    f->sampleRate = sr;
24010750:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
24010754:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24010758:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->a2 = f->radius * f->radius;
2401075c:	edc4 8a04 	vstr	s17, [r4, #16]
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
24010760:	f004 ff4e 	bl	24015600 <cosf>
24010764:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
    
    if (f->normalize)
24010768:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
2401076a:	ee28 8a27 	vmul.f32	s16, s16, s15
2401076e:	ee28 8a00 	vmul.f32	s16, s16, s0
24010772:	ed84 8a03 	vstr	s16, [r4, #12]
    if (f->normalize)
24010776:	b17b      	cbz	r3, 24010798 <tBiQuad_setSampleRate+0x64>
    {
        f->b0 = 0.5f - 0.5f * f->a2;
24010778:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        f->b1 = 0.0f;
2401077c:	2300      	movs	r3, #0
        f->b0 = 0.5f - 0.5f * f->a2;
2401077e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        f->b1 = 0.0f;
24010782:	61a3      	str	r3, [r4, #24]
        f->b0 = 0.5f - 0.5f * f->a2;
24010784:	ee77 7ae8 	vsub.f32	s15, s15, s17
24010788:	ee67 7a87 	vmul.f32	s15, s15, s14
        f->b2 = -f->b0;
2401078c:	eeb1 7a67 	vneg.f32	s14, s15
        f->b0 = 0.5f - 0.5f * f->a2;
24010790:	edc4 7a05 	vstr	s15, [r4, #20]
        f->b2 = -f->b0;
24010794:	ed84 7a07 	vstr	s14, [r4, #28]
    }
}
24010798:	ecbd 8b02 	vpop	{d8}
2401079c:	bd10      	pop	{r4, pc}
2401079e:	bf00      	nop
240107a0:	40c90fdb 	.word	0x40c90fdb

240107a4 <tSVF_init>:

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as Lfloating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, LEAF* const leaf)
{
240107a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240107a6:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
    _tMempool* m = *mp;
240107aa:	6995      	ldr	r5, [r2, #24]
{
240107ac:	4606      	mov	r6, r0
240107ae:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
240107b0:	2044      	movs	r0, #68	; 0x44
240107b2:	4629      	mov	r1, r5
{
240107b4:	eef0 8a40 	vmov.f32	s17, s0
240107b8:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
240107bc:	f001 ff98 	bl	240126f0 <mpool_alloc>
240107c0:	6030      	str	r0, [r6, #0]
240107c2:	4604      	mov	r4, r0
    svf->mempool = m;
240107c4:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
240107c6:	686b      	ldr	r3, [r5, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
240107c8:	2500      	movs	r5, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
240107ca:	ed9f 0a31 	vldr	s0, [pc, #196]	; 24010890 <tSVF_init+0xec>
    svf->sampleRate = leaf->sampleRate;
240107ce:	681a      	ldr	r2, [r3, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
240107d0:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
240107d4:	63c2      	str	r2, [r0, #60]	; 0x3c
    svf->invSampleRate = leaf->invSampleRate;
240107d6:	edd3 7a01 	vldr	s15, [r3, #4]
    svf->type = type;
240107da:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
240107dc:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
240107e0:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    svf->ic1eq = 0;
240107e4:	6105      	str	r5, [r0, #16]
    svf->ic2eq = 0;
240107e6:	6145      	str	r5, [r0, #20]
    svf->Q = Q;
240107e8:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
240107ec:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
240107f0:	f005 f830 	bl	24015854 <tanf>
    svf->k = 1.0f/Q;
240107f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
240107f8:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
240107fc:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
240107fe:	62e5      	str	r5, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
24010800:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
24010804:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->cB = 0.0f;
24010808:	6325      	str	r5, [r4, #48]	; 0x30
    svf->cBK = 0.0f;
2401080a:	63a5      	str	r5, [r4, #56]	; 0x38
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401080c:	eef0 6a67 	vmov.f32	s13, s15
24010810:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
24010814:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24010818:	eee0 6a06 	vfma.f32	s13, s0, s12
2401081c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
24010820:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24010824:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a3 = svf->g*svf->a2;
24010828:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
2401082c:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
24010830:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
24010834:	d00d      	beq.n	24010852 <tSVF_init+0xae>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
24010836:	2f04      	cmp	r7, #4
24010838:	d80b      	bhi.n	24010852 <tSVF_init+0xae>
2401083a:	e8df f007 	tbb	[pc, r7]
2401083e:	0a18      	.short	0x0a18
24010840:	0321      	.short	0x0321
24010842:	0d          	.byte	0x0d
24010843:	00          	.byte	0x00
        svf->cL = -1.0f;
    }
    
    else if (type == SVFTypeNotch)
    {
        svf->cH = 1.0f;
24010844:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
24010848:	4a12      	ldr	r2, [pc, #72]	; (24010894 <tSVF_init+0xf0>)
        svf->cL = 0.0f;
2401084a:	2300      	movs	r3, #0
        svf->cH = 1.0f;
2401084c:	62e1      	str	r1, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
2401084e:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = 0.0f;
24010850:	6363      	str	r3, [r4, #52]	; 0x34
}
24010852:	ecbd 8b02 	vpop	{d8}
24010856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    else if (type == SVFTypePeak)
    {
        svf->cH = 1.0f;
24010858:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
2401085c:	4a0d      	ldr	r2, [pc, #52]	; (24010894 <tSVF_init+0xf0>)
        svf->cL = -2.0f;
2401085e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
24010862:	62e1      	str	r1, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
24010864:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
24010866:	6363      	str	r3, [r4, #52]	; 0x34
}
24010868:	ecbd 8b02 	vpop	{d8}
2401086c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cBK = -1.0f;
2401086e:	4b09      	ldr	r3, [pc, #36]	; (24010894 <tSVF_init+0xf0>)
        svf->cH = 1.0f;
24010870:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
24010874:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cH = 1.0f;
24010876:	62e2      	str	r2, [r4, #44]	; 0x2c
        svf->cL = -1.0f;
24010878:	6363      	str	r3, [r4, #52]	; 0x34
}
2401087a:	ecbd 8b02 	vpop	{d8}
2401087e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cB = 1.0f;
24010880:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
24010884:	2200      	movs	r2, #0
        svf->cB = 1.0f;
24010886:	6323      	str	r3, [r4, #48]	; 0x30
        svf->cL = 0.0f;
24010888:	6362      	str	r2, [r4, #52]	; 0x34
}
2401088a:	ecbd 8b02 	vpop	{d8}
2401088e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24010890:	40490fdb 	.word	0x40490fdb
24010894:	bf800000 	.word	0xbf800000

24010898 <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
24010898:	6803      	ldr	r3, [r0, #0]
#endif
    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
2401089a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
2401089e:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
240108a2:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
240108a6:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
240108aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
240108ae:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
240108b2:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
240108b6:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
240108ba:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
240108be:	edd3 2a08 	vldr	s5, [r3, #32]
240108c2:	ee67 7a84 	vmul.f32	s15, s15, s8
240108c6:	ed93 2a07 	vldr	s4, [r3, #28]
240108ca:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
240108ce:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
240108d2:	eea2 5a23 	vfma.f32	s10, s4, s7
240108d6:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
240108da:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
240108de:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
240108e2:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
240108e6:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
240108ea:	eed5 6aa4 	vfnms.f32	s13, s11, s9
240108ee:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
240108f2:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
240108f6:	edc3 6a05 	vstr	s13, [r3, #20]
}
240108fa:	eea3 7a80 	vfma.f32	s14, s7, s0
240108fe:	eeb0 0a47 	vmov.f32	s0, s14
24010902:	4770      	bx	lr

24010904 <tSVF_setFreqFast>:
}

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
	_tSVF* svf = *vf;
    int intVer = (int)cutoff;
24010904:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010908:	4a18      	ldr	r2, [pc, #96]	; (2401096c <tSVF_setFreqFast+0x68>)
2401090a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSVF* svf = *vf;
2401090e:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
24010910:	ee17 1a10 	vmov	r1, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24010914:	ed93 7a07 	vldr	s14, [r3, #28]
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010918:	ee77 6ac0 	vsub.f32	s13, s15, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401091c:	ee06 1a10 	vmov	s12, r1
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010920:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24010924:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010928:	edd0 5a01 	vldr	s11, [r0, #4]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401092c:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010930:	ee76 6a86 	vadd.f32	s13, s13, s12
24010934:	ed90 6a00 	vldr	s12, [r0]
24010938:	ee20 0a25 	vmul.f32	s0, s0, s11
2401093c:	eea6 0a26 	vfma.f32	s0, s12, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24010940:	eef0 6a67 	vmov.f32	s13, s15
24010944:	ee30 7a07 	vadd.f32	s14, s0, s14
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010948:	ed83 0a06 	vstr	s0, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401094c:	eee0 6a07 	vfma.f32	s13, s0, s14
24010950:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g * svf->a1;
24010954:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24010958:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g * svf->a2;
2401095c:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
24010960:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
24010964:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
24010968:	4770      	bx	lr
2401096a:	bf00      	nop
2401096c:	24017940 	.word	0x24017940

24010970 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
24010970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
24010974:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24010976:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
2401097a:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
2401097e:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24010982:	eeb0 6a47 	vmov.f32	s12, s14
24010986:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
2401098a:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401098e:	eea7 6aa5 	vfma.f32	s12, s15, s11
24010992:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
24010996:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401099a:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
2401099e:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
240109a2:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
240109a6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
240109aa:	4770      	bx	lr

240109ac <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, Lfloat freq, LEAF* const leaf)
{
240109ac:	b538      	push	{r3, r4, r5, lr}
240109ae:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
    _tMempool* m = *mp;
240109b2:	698c      	ldr	r4, [r1, #24]
{
240109b4:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240109b6:	2018      	movs	r0, #24
{
240109b8:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240109bc:	4621      	mov	r1, r4
240109be:	f001 fefb 	bl	240127b8 <mpool_calloc>
240109c2:	6028      	str	r0, [r5, #0]
    f->mempool = m;
240109c4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240109c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240109ca:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
240109cc:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240109ce:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
240109d2:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240109d4:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
240109d8:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
240109da:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
240109de:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240109e2:	edc0 7a03 	vstr	s15, [r0, #12]
}
240109e6:	ecbd 8b02 	vpop	{d8}
240109ea:	bd38      	pop	{r3, r4, r5, pc}

240109ec <tHighpass_initToPool>:
{
240109ec:	b538      	push	{r3, r4, r5, lr}
240109ee:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
240109f2:	680c      	ldr	r4, [r1, #0]
{
240109f4:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240109f6:	2018      	movs	r0, #24
{
240109f8:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240109fc:	4621      	mov	r1, r4
240109fe:	f001 fedb 	bl	240127b8 <mpool_calloc>
24010a02:	6028      	str	r0, [r5, #0]
    f->mempool = m;
24010a04:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24010a06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010a0a:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
24010a0c:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010a0e:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
24010a12:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24010a14:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
24010a18:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
24010a1a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24010a1e:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24010a22:	edc0 7a03 	vstr	s15, [r0, #12]
}
24010a26:	ecbd 8b02 	vpop	{d8}
24010a2a:	bd38      	pop	{r3, r4, r5, pc}

24010a2c <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
    _tHighpass* f = *ft;
24010a2c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
24010a2e:	6801      	ldr	r1, [r0, #0]
24010a30:	f001 bf20 	b.w	24012874 <mpool_free>

24010a34 <tHighpass_setFreq>:
}

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
24010a34:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24010a36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24010a3a:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
24010a3e:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
24010a42:	eee7 7a40 	vfms.f32	s15, s14, s0
24010a46:	edc3 7a03 	vstr	s15, [r3, #12]
}
24010a4a:	4770      	bx	lr

24010a4c <tHighpass_tick>:
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
    _tHighpass* f = *ft;
24010a4c:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
24010a4e:	edd3 7a01 	vldr	s15, [r3, #4]
24010a52:	ed93 7a02 	vldr	s14, [r3, #8]
24010a56:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
24010a5a:	ed83 0a01 	vstr	s0, [r3, #4]
24010a5e:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
24010a62:	ee30 0a27 	vadd.f32	s0, s0, s15
24010a66:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
24010a6a:	4770      	bx	lr

24010a6c <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
24010a6c:	eddf 6a07 	vldr	s13, [pc, #28]	; 24010a8c <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
24010a70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
24010a74:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
24010a76:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
24010a7a:	edd3 6a04 	vldr	s13, [r3, #16]
24010a7e:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
24010a82:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
24010a86:	edc3 7a03 	vstr	s15, [r3, #12]
}
24010a8a:	4770      	bx	lr
24010a8c:	40c90fdb 	.word	0x40c90fdb

24010a90 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
24010a90:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
24010a92:	edd3 6a03 	vldr	s13, [r3, #12]
24010a96:	ed93 7a02 	vldr	s14, [r3, #8]
24010a9a:	ee70 7a66 	vsub.f32	s15, s0, s13
24010a9e:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
24010aa2:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
24010aa6:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
24010aaa:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
24010aae:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
24010ab2:	edd3 4a08 	vldr	s9, [r3, #32]
24010ab6:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
24010aba:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
24010abe:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
24010ac2:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
24010ac6:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24010aca:	eeb0 5a47 	vmov.f32	s10, s14
24010ace:	eea4 0a87 	vfma.f32	s0, s9, s14
24010ad2:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
24010ad6:	eef0 7a66 	vmov.f32	s15, s13
}
24010ada:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
24010ade:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24010ae2:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
24010ae6:	edc3 7a03 	vstr	s15, [r3, #12]
}
24010aea:	4770      	bx	lr

24010aec <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
24010aec:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
24010aee:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24010af0:	eddf 7a98 	vldr	s15, [pc, #608]	; 24010d54 <tVZFilter_calcCoeffs+0x268>
{
24010af4:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24010af8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
24010afc:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
24010b00:	ee68 8a87 	vmul.f32	s17, s17, s14
24010b04:	ee68 8aa7 	vmul.f32	s17, s17, s15
24010b08:	eeb0 0a68 	vmov.f32	s0, s17
24010b0c:	f004 fea2 	bl	24015854 <tanf>
    
    switch( f->type )
24010b10:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24010b12:	eeb0 8a40 	vmov.f32	s16, s0
24010b16:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
24010b1a:	2b0a      	cmp	r3, #10
24010b1c:	f200 8117 	bhi.w	24010d4e <tVZFilter_calcCoeffs+0x262>
24010b20:	e8df f013 	tbh	[pc, r3, lsl #1]
24010b24:	002f0026 	.word	0x002f0026
24010b28:	00410038 	.word	0x00410038
24010b2c:	0056004d 	.word	0x0056004d
24010b30:	00a1008b 	.word	0x00a1008b
24010b34:	010a00b7 	.word	0x010a00b7
24010b38:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24010b3a:	edd4 7a05 	vldr	s15, [r4, #20]
24010b3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24010b42:	eeb1 7a67 	vneg.f32	s14, s15
24010b46:	61e3      	str	r3, [r4, #28]
24010b48:	6263      	str	r3, [r4, #36]	; 0x24
24010b4a:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24010b4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24010b52:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24010b56:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
24010b5a:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24010b5e:	eee7 6a88 	vfma.f32	s13, s15, s16
24010b62:	eec7 7a26 	vdiv.f32	s15, s14, s13
24010b66:	edc4 7a06 	vstr	s15, [r4, #24]
}
24010b6a:	ecbd 8b02 	vpop	{d8}
24010b6e:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24010b70:	2300      	movs	r3, #0
24010b72:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24010b76:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24010b7a:	61e3      	str	r3, [r4, #28]
24010b7c:	6223      	str	r3, [r4, #32]
24010b7e:	6262      	str	r2, [r4, #36]	; 0x24
            break;
24010b80:	e7e5      	b.n	24010b4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24010b82:	2300      	movs	r3, #0
24010b84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24010b88:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24010b8c:	6223      	str	r3, [r4, #32]
24010b8e:	6263      	str	r3, [r4, #36]	; 0x24
24010b90:	61e2      	str	r2, [r4, #28]
            break;
24010b92:	e7dc      	b.n	24010b4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24010b94:	2300      	movs	r3, #0
24010b96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24010b9a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24010b9e:	61e3      	str	r3, [r4, #28]
24010ba0:	6263      	str	r3, [r4, #36]	; 0x24
24010ba2:	6222      	str	r2, [r4, #32]
            break;
24010ba4:	e7d3      	b.n	24010b4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24010ba6:	edd4 7a05 	vldr	s15, [r4, #20]
24010baa:	2300      	movs	r3, #0
24010bac:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
24010bb0:	61e3      	str	r3, [r4, #28]
24010bb2:	ee27 7a27 	vmul.f32	s14, s14, s15
24010bb6:	6263      	str	r3, [r4, #36]	; 0x24
24010bb8:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
24010bbc:	e7c7      	b.n	24010b4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24010bbe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24010bc2:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24010bc4:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24010bc8:	6222      	str	r2, [r4, #32]
24010bca:	61e3      	str	r3, [r4, #28]
24010bcc:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24010bce:	e7be      	b.n	24010b4e <tVZFilter_calcCoeffs+0x62>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24010bd0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24010bd4:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24010bd8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24010bdc:	ee60 0aa7 	vmul.f32	s1, s1, s15
24010be0:	f004 fb86 	bl	240152f0 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24010be4:	ee28 0a80 	vmul.f32	s0, s17, s0
24010be8:	f004 fe34 	bl	24015854 <tanf>
            Lfloat r  = f->g/wl;
24010bec:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24010bf0:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
24010bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24010bf8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
24010bfc:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24010c00:	ed84 7a07 	vstr	s14, [r4, #28]
24010c04:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24010c08:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24010c0c:	eea7 7aa7 	vfma.f32	s14, s15, s15
24010c10:	eef0 6a47 	vmov.f32	s13, s14
24010c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24010c18:	ee77 7a45 	vsub.f32	s15, s14, s10
24010c1c:	ee67 7aa5 	vmul.f32	s15, s15, s11
24010c20:	ee87 7a86 	vdiv.f32	s14, s15, s12
24010c24:	eef1 7ac7 	vsqrt.f32	s15, s14
24010c28:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24010c2c:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24010c30:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24010c34:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
24010c38:	e789      	b.n	24010b4e <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
24010c3a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24010c3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24010c42:	edd4 7a05 	vldr	s15, [r4, #20]
24010c46:	eef1 6ac7 	vsqrt.f32	s13, s14
24010c4a:	ed84 7a07 	vstr	s14, [r4, #28]
24010c4e:	6263      	str	r3, [r4, #36]	; 0x24
24010c50:	ee27 6a27 	vmul.f32	s12, s14, s15
24010c54:	ed84 6a08 	vstr	s12, [r4, #32]
24010c58:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24010c5c:	ee80 8a07 	vdiv.f32	s16, s0, s14
24010c60:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24010c64:	e773      	b.n	24010b4e <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
24010c66:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24010c6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24010c6e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24010c72:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24010c76:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
24010c7a:	61e3      	str	r3, [r4, #28]
24010c7c:	ee27 6a27 	vmul.f32	s12, s14, s15
24010c80:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24010c84:	eeb1 7ae6 	vsqrt.f32	s14, s13
24010c88:	ee20 8a07 	vmul.f32	s16, s0, s14
24010c8c:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24010c90:	e75d      	b.n	24010b4e <tVZFilter_calcCoeffs+0x62>
            Lfloat x  = (2.0f*f->m-1.0f);
24010c92:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24010c96:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
24010c9a:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24010c9e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 24010d58 <tVZFilter_calcCoeffs+0x26c>
24010ca2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
24010ca6:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24010caa:	eeb0 0a48 	vmov.f32	s0, s16
24010cae:	eea7 0a67 	vfms.f32	s0, s14, s15
24010cb2:	f001 fcfb 	bl	240126ac <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24010cb6:	eddf 0a28 	vldr	s1, [pc, #160]	; 24010d58 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24010cba:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24010cbe:	eeb0 0a68 	vmov.f32	s0, s17
24010cc2:	f001 fcf7 	bl	240126b4 <minimum>
            f->cB = 1.0f-x*x;
24010cc6:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24010cca:	edd4 7a05 	vldr	s15, [r4, #20]
24010cce:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24010cd2:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24010cd6:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24010cda:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24010cde:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24010ce2:	ee76 5a06 	vadd.f32	s11, s12, s12
24010ce6:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24010cea:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24010cee:	eee6 7a06 	vfma.f32	s15, s12, s12
24010cf2:	eee0 7a00 	vfma.f32	s15, s0, s0
24010cf6:	eee0 7a65 	vfms.f32	s15, s0, s11
24010cfa:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24010cfe:	f001 f999 	bl	24012034 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24010d02:	edd4 5a07 	vldr	s11, [r4, #28]
24010d06:	ed94 6a08 	vldr	s12, [r4, #32]
24010d0a:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24010d0e:	edd4 7a05 	vldr	s15, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24010d12:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
24010d16:	ed94 8a04 	vldr	s16, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24010d1a:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
24010d1e:	ee65 5a80 	vmul.f32	s11, s11, s0
24010d22:	ee26 6a00 	vmul.f32	s12, s12, s0
24010d26:	ee66 6a80 	vmul.f32	s13, s13, s0
24010d2a:	edc4 5a07 	vstr	s11, [r4, #28]
24010d2e:	ed84 6a08 	vstr	s12, [r4, #32]
24010d32:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
24010d36:	e70a      	b.n	24010b4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
24010d38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24010d3c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
24010d40:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24010d42:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
24010d46:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
24010d4a:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24010d4c:	e6ff      	b.n	24010b4e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24010d4e:	edd4 7a05 	vldr	s15, [r4, #20]
24010d52:	e6fc      	b.n	24010b4e <tVZFilter_calcCoeffs+0x62>
24010d54:	40490fdb 	.word	0x40490fdb
24010d58:	00000000 	.word	0x00000000

24010d5c <tVZFilter_initToPool>:
{
24010d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
24010d5e:	6817      	ldr	r7, [r2, #0]
{
24010d60:	4605      	mov	r5, r0
24010d62:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
24010d64:	204c      	movs	r0, #76	; 0x4c
24010d66:	4639      	mov	r1, r7
{
24010d68:	ed2d 8b04 	vpush	{d8-d9}
24010d6c:	b083      	sub	sp, #12
24010d6e:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24010d72:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
24010d76:	ed9f 8a42 	vldr	s16, [pc, #264]	; 24010e80 <tVZFilter_initToPool+0x124>
{
24010d7a:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
24010d7e:	f001 fcb7 	bl	240126f0 <mpool_alloc>
24010d82:	6028      	str	r0, [r5, #0]
24010d84:	4604      	mov	r4, r0
    f->mempool = m;
24010d86:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24010d88:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
24010d8c:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24010d8e:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
24010d92:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24010d96:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 24010e84 <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
24010d9a:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24010d9e:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
24010da2:	685b      	ldr	r3, [r3, #4]
24010da4:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24010da6:	f01b ff53 	bl	2402cc50 <__LEAF_clip_veneer>
    f->invG = 1.414213562373095f;
24010daa:	ed9f 7a37 	vldr	s14, [pc, #220]	; 24010e88 <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
24010dae:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24010db2:	ee20 6a09 	vmul.f32	s12, s0, s18
24010db6:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
24010dba:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = INV_SQRT2;
24010dbe:	4b33      	ldr	r3, [pc, #204]	; (24010e8c <tVZFilter_initToPool+0x130>)
    f->invG = 1.414213562373095f;
24010dc0:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = INV_SQRT2;
24010dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
24010dc6:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
24010dca:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24010dce:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24010dd2:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
24010dd6:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
24010dd8:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
24010ddc:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
24010de0:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
24010de4:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
24010de8:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24010dec:	f004 fd32 	bl	24015854 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
24010df0:	ed9f 1a27 	vldr	s2, [pc, #156]	; 24010e90 <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24010df4:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
24010df8:	eef0 0a68 	vmov.f32	s1, s17
24010dfc:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
24010e00:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
24010e02:	f01b ff25 	bl	2402cc50 <__LEAF_clip_veneer>
24010e06:	eef0 0a40 	vmov.f32	s1, s0
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24010e0a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24010e0e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
24010e12:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
24010e16:	682c      	ldr	r4, [r5, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24010e18:	ee60 0aa7 	vmul.f32	s1, s1, s15
24010e1c:	f004 fa68 	bl	240152f0 <powf>
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24010e20:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
24010e24:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
24010e28:	ee67 7a87 	vmul.f32	s15, s15, s14
24010e2c:	ee67 7a89 	vmul.f32	s15, s15, s18
24010e30:	ee27 0a80 	vmul.f32	s0, s15, s0
24010e34:	f004 fd0e 	bl	24015854 <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
24010e38:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
24010e3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24010e40:	4628      	mov	r0, r5
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
24010e42:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
24010e46:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
24010e4a:	ee27 7a07 	vmul.f32	s14, s14, s14
24010e4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
24010e52:	ee67 7aa7 	vmul.f32	s15, s15, s15
24010e56:	ee67 7aa6 	vmul.f32	s15, s15, s13
24010e5a:	eec7 6a87 	vdiv.f32	s13, s15, s14
24010e5e:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
24010e62:	ee77 7aa7 	vadd.f32	s15, s15, s15
24010e66:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
24010e6a:	f7ff fe3f 	bl	24010aec <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
24010e6e:	4628      	mov	r0, r5
}
24010e70:	b003      	add	sp, #12
24010e72:	ecbd 8b04 	vpop	{d8-d9}
24010e76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
24010e7a:	f7ff be37 	b.w	24010aec <tVZFilter_calcCoeffs>
24010e7e:	bf00      	nop
24010e80:	00000000 	.word	0x00000000
24010e84:	40490fdb 	.word	0x40490fdb
24010e88:	3fb504f3 	.word	0x3fb504f3
24010e8c:	3f3504f3 	.word	0x3f3504f3
24010e90:	42c80000 	.word	0x42c80000

24010e94 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
24010e94:	3218      	adds	r2, #24
24010e96:	f7ff bf61 	b.w	24010d5c <tVZFilter_initToPool>
24010e9a:	bf00      	nop

24010e9c <tVZFilter_setFreq>:
{
24010e9c:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
24010e9e:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24010ea0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
24010ea4:	4604      	mov	r4, r0
24010ea6:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24010eaa:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
24010eae:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24010ec8 <tVZFilter_setFreq+0x2c>
24010eb2:	ee21 1a27 	vmul.f32	s2, s2, s15
24010eb6:	f01b fecb 	bl	2402cc50 <__LEAF_clip_veneer>
    tVZFilter_calcCoeffs(vf);
24010eba:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24010ebc:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
24010ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24010ec4:	f7ff be12 	b.w	24010aec <tVZFilter_calcCoeffs>
24010ec8:	00000000 	.word	0x00000000

24010ecc <tVZFilter_setFreqFast>:
    int intVer = (int)cutoff;
24010ecc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010ed0:	4baa      	ldr	r3, [pc, #680]	; (2401117c <tVZFilter_setFreqFast+0x2b0>)
24010ed2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intVer = (int)cutoff;
24010ed6:	ee17 2a10 	vmov	r2, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010eda:	ee37 7ac0 	vsub.f32	s14, s15, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24010ede:	ee07 2a90 	vmov	s15, r2
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010ee2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24010ee6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010eea:	ed91 6a01 	vldr	s12, [r1, #4]
{
24010eee:	b510      	push	{r4, lr}
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24010ef0:	ee70 7a66 	vsub.f32	s15, s0, s13
	 _tVZFilter* f = *vf;
24010ef4:	6804      	ldr	r4, [r0, #0]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010ef6:	ee37 7a26 	vadd.f32	s14, s14, s13
24010efa:	edd1 6a00 	vldr	s13, [r1]
24010efe:	ee67 7a86 	vmul.f32	s15, s15, s12
{
24010f02:	ed2d 8b02 	vpush	{d8}
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010f06:	eee6 7a87 	vfma.f32	s15, s13, s14
    switch( f->type )
24010f0a:	7922      	ldrb	r2, [r4, #4]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24010f0c:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
24010f10:	2a0a      	cmp	r2, #10
24010f12:	f200 812f 	bhi.w	24011174 <tVZFilter_setFreqFast+0x2a8>
24010f16:	e8df f012 	tbh	[pc, r2, lsl #1]
24010f1a:	0026      	.short	0x0026
24010f1c:	0038002f 	.word	0x0038002f
24010f20:	004d0041 	.word	0x004d0041
24010f24:	009b0056 	.word	0x009b0056
24010f28:	00cf00b5 	.word	0x00cf00b5
24010f2c:	000b0122 	.word	0x000b0122
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24010f30:	ed94 7a05 	vldr	s14, [r4, #20]
24010f34:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24010f38:	eef1 6a47 	vneg.f32	s13, s14
24010f3c:	61e3      	str	r3, [r4, #28]
24010f3e:	6263      	str	r3, [r4, #36]	; 0x24
24010f40:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
24010f44:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24010f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24010f4c:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24010f50:	eef0 6a47 	vmov.f32	s13, s14
24010f54:	eee0 6a27 	vfma.f32	s13, s0, s15
24010f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
24010f5c:	edc4 7a06 	vstr	s15, [r4, #24]
}
24010f60:	ecbd 8b02 	vpop	{d8}
24010f64:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24010f66:	2300      	movs	r3, #0
24010f68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24010f6c:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24010f70:	61e3      	str	r3, [r4, #28]
24010f72:	6223      	str	r3, [r4, #32]
24010f74:	6262      	str	r2, [r4, #36]	; 0x24
            break;
24010f76:	e7e5      	b.n	24010f44 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24010f78:	2300      	movs	r3, #0
24010f7a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24010f7e:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24010f82:	6223      	str	r3, [r4, #32]
24010f84:	6263      	str	r3, [r4, #36]	; 0x24
24010f86:	61e2      	str	r2, [r4, #28]
            break;
24010f88:	e7dc      	b.n	24010f44 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24010f8a:	2300      	movs	r3, #0
24010f8c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24010f90:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24010f94:	61e3      	str	r3, [r4, #28]
24010f96:	6263      	str	r3, [r4, #36]	; 0x24
24010f98:	6222      	str	r2, [r4, #32]
            break;
24010f9a:	e7d3      	b.n	24010f44 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24010f9c:	ed94 7a05 	vldr	s14, [r4, #20]
24010fa0:	2300      	movs	r3, #0
24010fa2:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24010fa6:	61e3      	str	r3, [r4, #28]
24010fa8:	ee66 6a87 	vmul.f32	s13, s13, s14
24010fac:	6263      	str	r3, [r4, #36]	; 0x24
24010fae:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24010fb2:	e7c7      	b.n	24010f44 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24010fb4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24010fb8:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24010fba:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24010fbe:	6222      	str	r2, [r4, #32]
24010fc0:	61e3      	str	r3, [r4, #28]
24010fc2:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24010fc4:	e7be      	b.n	24010f44 <tVZFilter_setFreqFast+0x78>
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24010fc6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24010fca:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24010fce:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24010fd2:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24010fd6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24010fda:	ee60 0aa7 	vmul.f32	s1, s1, s15
24010fde:	f001 f86d 	bl	240120bc <fastPowf>
            Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24010fe2:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
24010fe6:	eddf 7a66 	vldr	s15, [pc, #408]	; 24011180 <tVZFilter_setFreqFast+0x2b4>
24010fea:	ee28 8a07 	vmul.f32	s16, s16, s14
24010fee:	ee28 8a27 	vmul.f32	s16, s16, s15
24010ff2:	ee28 0a00 	vmul.f32	s0, s16, s0
24010ff6:	f001 f809 	bl	2401200c <fastertanf>
            Lfloat r  = f->g/wl;
24010ffa:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24010ffe:	eeb0 5a68 	vmov.f32	s10, s17
24011002:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            Lfloat r  = f->g/wl;
24011006:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401100a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
2401100e:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24011012:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011016:	eea7 5aa7 	vfma.f32	s10, s15, s15
2401101a:	ee85 7a27 	vdiv.f32	s14, s10, s15
2401101e:	ee77 7a65 	vsub.f32	s15, s14, s11
24011022:	ee67 7a86 	vmul.f32	s15, s15, s12
24011026:	ee87 0aa6 	vdiv.f32	s0, s15, s13
2401102a:	f001 f803 	bl	24012034 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401102e:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
24011032:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011036:	edc4 8a07 	vstr	s17, [r4, #28]
2401103a:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401103e:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011042:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24011046:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401104a:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
2401104e:	e779      	b.n	24010f44 <tVZFilter_setFreqFast+0x78>
            Lfloat A = fastsqrtf(f->G);
24011050:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
24011054:	f000 ffee 	bl	24012034 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011058:	f000 ffec 	bl	24012034 <fastsqrtf>
2401105c:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24011060:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24011064:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011068:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
2401106c:	ed94 7a05 	vldr	s14, [r4, #20]
24011070:	edc4 6a07 	vstr	s13, [r4, #28]
24011074:	6263      	str	r3, [r4, #36]	; 0x24
24011076:	ee66 6a87 	vmul.f32	s13, s13, s14
2401107a:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
2401107e:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
24011082:	e75f      	b.n	24010f44 <tVZFilter_setFreqFast+0x78>
            Lfloat A = fastsqrtf(f->G);
24011084:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
24011088:	f000 ffd4 	bl	24012034 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
2401108c:	f000 ffd2 	bl	24012034 <fastsqrtf>
24011090:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011094:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24011098:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2401109c:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240110a0:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240110a4:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
240110a8:	ee67 6a26 	vmul.f32	s13, s14, s13
240110ac:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240110ae:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240110b2:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
240110b6:	e745      	b.n	24010f44 <tVZFilter_setFreqFast+0x78>
            Lfloat x  = (2.0f*f->m-1.0f);
240110b8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
240110bc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
240110c0:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240110c4:	eddf 0a2f 	vldr	s1, [pc, #188]	; 24011184 <tVZFilter_setFreqFast+0x2b8>
240110c8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
240110cc:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240110d0:	eeb0 0a48 	vmov.f32	s0, s16
240110d4:	eea7 0a67 	vfms.f32	s0, s14, s15
240110d8:	f001 fae8 	bl	240126ac <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240110dc:	eddf 0a29 	vldr	s1, [pc, #164]	; 24011184 <tVZFilter_setFreqFast+0x2b8>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240110e0:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240110e4:	eeb0 0a68 	vmov.f32	s0, s17
240110e8:	f001 fae4 	bl	240126b4 <minimum>
            f->cB = 1.0f-x*x;
240110ec:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240110f0:	edd4 7a05 	vldr	s15, [r4, #20]
240110f4:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
240110f8:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240110fc:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24011100:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24011104:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011108:	ee76 5a06 	vadd.f32	s11, s12, s12
2401110c:	ee38 8a08 	vadd.f32	s16, s16, s16
24011110:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24011114:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011118:	eee6 7a06 	vfma.f32	s15, s12, s12
2401111c:	eee0 7a00 	vfma.f32	s15, s0, s0
24011120:	eee0 7a65 	vfms.f32	s15, s0, s11
24011124:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24011128:	f000 ff84 	bl	24012034 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
2401112c:	edd4 5a07 	vldr	s11, [r4, #28]
24011130:	ed94 6a08 	vldr	s12, [r4, #32]
24011134:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24011138:	ed94 7a05 	vldr	s14, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401113c:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
24011140:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
24011144:	ee65 5a80 	vmul.f32	s11, s11, s0
24011148:	ee26 6a00 	vmul.f32	s12, s12, s0
2401114c:	ee66 6a80 	vmul.f32	s13, s13, s0
24011150:	edc4 5a07 	vstr	s11, [r4, #28]
24011154:	ed84 6a08 	vstr	s12, [r4, #32]
24011158:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
2401115c:	e6f2      	b.n	24010f44 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f;
2401115e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24011162:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
24011166:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24011168:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
2401116c:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
24011170:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24011172:	e6e7      	b.n	24010f44 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011174:	ed94 7a05 	vldr	s14, [r4, #20]
24011178:	e6e4      	b.n	24010f44 <tVZFilter_setFreqFast+0x78>
2401117a:	bf00      	nop
2401117c:	24017940 	.word	0x24017940
24011180:	40490fdb 	.word	0x40490fdb
24011184:	00000000 	.word	0x00000000

24011188 <tVZFilter_setGain>:
{
24011188:	b538      	push	{r3, r4, r5, lr}
2401118a:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
2401118e:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 240111b8 <tVZFilter_setGain+0x30>
24011192:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 240111bc <tVZFilter_setGain+0x34>
{
24011196:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
24011198:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
2401119a:	f01b fd59 	bl	2402cc50 <__LEAF_clip_veneer>
    f->invG = 1.0f/f->G;
2401119e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
240111a2:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
240111a4:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
240111a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
240111ac:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
240111b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
240111b4:	f7ff bc9a 	b.w	24010aec <tVZFilter_calcCoeffs>
240111b8:	457a0000 	.word	0x457a0000
240111bc:	358637bd 	.word	0x358637bd

240111c0 <tVZFilter_setResonance>:
{
240111c0:	b538      	push	{r3, r4, r5, lr}
240111c2:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
240111c6:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 240111f0 <tVZFilter_setResonance+0x30>
240111ca:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 240111f4 <tVZFilter_setResonance+0x34>
{
240111ce:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
240111d0:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
240111d2:	f01b fd3d 	bl	2402cc50 <__LEAF_clip_veneer>
    f->R2 = 1.0f / f->Q;
240111d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
240111da:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
240111dc:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
240111e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
240111e4:	edc5 7a05 	vstr	s15, [r5, #20]
}
240111e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
240111ec:	f7ff bc7e 	b.w	24010aec <tVZFilter_calcCoeffs>
240111f0:	42c80000 	.word	0x42c80000
240111f4:	3c23d70a 	.word	0x3c23d70a

240111f8 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, Lfloat sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
240111f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tVZFilter* f = *vf;
240111fc:	6803      	ldr	r3, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240111fe:	eddf 7a9d 	vldr	s15, [pc, #628]	; 24011474 <tVZFilter_setSampleRate+0x27c>
    f->invSampleRate = 1.0f/f->sampleRate;
24011202:	ee86 7a80 	vdiv.f32	s14, s13, s0
{
24011206:	b510      	push	{r4, lr}
24011208:	ed2d 8b02 	vpush	{d8}
    f->sampleRate = sr;
2401120c:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->invSampleRate = 1.0f/f->sampleRate;
24011210:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    _tVZFilter* f = *vf;
24011214:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011216:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
2401121a:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
2401121e:	ee68 8a87 	vmul.f32	s17, s17, s14
24011222:	ee68 8aa7 	vmul.f32	s17, s17, s15
24011226:	eeb0 0a68 	vmov.f32	s0, s17
2401122a:	f004 fb13 	bl	24015854 <tanf>
    switch( f->type )
2401122e:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24011230:	eeb0 8a40 	vmov.f32	s16, s0
24011234:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
24011238:	2b0a      	cmp	r3, #10
2401123a:	f200 8117 	bhi.w	2401146c <tVZFilter_setSampleRate+0x274>
2401123e:	e8df f013 	tbh	[pc, r3, lsl #1]
24011242:	0026      	.short	0x0026
24011244:	0038002f 	.word	0x0038002f
24011248:	004d0041 	.word	0x004d0041
2401124c:	008b0056 	.word	0x008b0056
24011250:	00b700a1 	.word	0x00b700a1
24011254:	000b010a 	.word	0x000b010a
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24011258:	edd4 7a05 	vldr	s15, [r4, #20]
2401125c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24011260:	eeb1 7a67 	vneg.f32	s14, s15
24011264:	61e3      	str	r3, [r4, #28]
24011266:	6263      	str	r3, [r4, #36]	; 0x24
24011268:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
24011270:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24011274:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
24011278:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401127c:	eee7 6a88 	vfma.f32	s13, s15, s16
24011280:	eec7 7a26 	vdiv.f32	s15, s14, s13
24011284:	edc4 7a06 	vstr	s15, [r4, #24]
    tVZFilter_calcCoeffs(vf);
}
24011288:	ecbd 8b02 	vpop	{d8}
2401128c:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
2401128e:	2300      	movs	r3, #0
24011290:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24011294:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
24011298:	61e3      	str	r3, [r4, #28]
2401129a:	6223      	str	r3, [r4, #32]
2401129c:	6262      	str	r2, [r4, #36]	; 0x24
            break;
2401129e:	e7e5      	b.n	2401126c <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240112a0:	2300      	movs	r3, #0
240112a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240112a6:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240112aa:	6223      	str	r3, [r4, #32]
240112ac:	6263      	str	r3, [r4, #36]	; 0x24
240112ae:	61e2      	str	r2, [r4, #28]
            break;
240112b0:	e7dc      	b.n	2401126c <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240112b2:	2300      	movs	r3, #0
240112b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240112b8:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240112bc:	61e3      	str	r3, [r4, #28]
240112be:	6263      	str	r3, [r4, #36]	; 0x24
240112c0:	6222      	str	r2, [r4, #32]
            break;
240112c2:	e7d3      	b.n	2401126c <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240112c4:	edd4 7a05 	vldr	s15, [r4, #20]
240112c8:	2300      	movs	r3, #0
240112ca:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
240112ce:	61e3      	str	r3, [r4, #28]
240112d0:	ee27 7a27 	vmul.f32	s14, s14, s15
240112d4:	6263      	str	r3, [r4, #36]	; 0x24
240112d6:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
240112da:	e7c7      	b.n	2401126c <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
240112dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240112e0:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240112e2:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
240112e6:	6222      	str	r2, [r4, #32]
240112e8:	61e3      	str	r3, [r4, #28]
240112ea:	6263      	str	r3, [r4, #36]	; 0x24
            break;
240112ec:	e7be      	b.n	2401126c <tVZFilter_setSampleRate+0x74>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240112ee:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
240112f2:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
240112f6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
240112fa:	ee60 0aa7 	vmul.f32	s1, s1, s15
240112fe:	f003 fff7 	bl	240152f0 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24011302:	ee28 0a80 	vmul.f32	s0, s17, s0
24011306:	f004 faa5 	bl	24015854 <tanf>
            Lfloat r  = f->g/wl;
2401130a:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401130e:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
24011312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24011316:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
2401131a:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401131e:	ed84 7a07 	vstr	s14, [r4, #28]
24011322:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24011326:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401132a:	eea7 7aa7 	vfma.f32	s14, s15, s15
2401132e:	eef0 6a47 	vmov.f32	s13, s14
24011332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24011336:	ee77 7a45 	vsub.f32	s15, s14, s10
2401133a:	ee67 7aa5 	vmul.f32	s15, s15, s11
2401133e:	ee87 7a86 	vdiv.f32	s14, s15, s12
24011342:	eef1 7ac7 	vsqrt.f32	s15, s14
24011346:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401134a:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401134e:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24011352:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
24011356:	e789      	b.n	2401126c <tVZFilter_setSampleRate+0x74>
            Lfloat A = sqrtf(f->G);
24011358:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
2401135c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
24011360:	edd4 7a05 	vldr	s15, [r4, #20]
24011364:	eef1 6ac7 	vsqrt.f32	s13, s14
24011368:	ed84 7a07 	vstr	s14, [r4, #28]
2401136c:	6263      	str	r3, [r4, #36]	; 0x24
2401136e:	ee27 6a27 	vmul.f32	s12, s14, s15
24011372:	ed84 6a08 	vstr	s12, [r4, #32]
24011376:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
2401137a:	ee80 8a07 	vdiv.f32	s16, s0, s14
2401137e:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
24011382:	e773      	b.n	2401126c <tVZFilter_setSampleRate+0x74>
            Lfloat A = sqrtf(f->G);
24011384:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011388:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2401138c:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24011390:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24011394:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
24011398:	61e3      	str	r3, [r4, #28]
2401139a:	ee27 6a27 	vmul.f32	s12, s14, s15
2401139e:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240113a2:	eeb1 7ae6 	vsqrt.f32	s14, s13
240113a6:	ee20 8a07 	vmul.f32	s16, s0, s14
240113aa:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
240113ae:	e75d      	b.n	2401126c <tVZFilter_setSampleRate+0x74>
            Lfloat x  = (2.0f*f->m-1.0f);
240113b0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
240113b4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
240113b8:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240113bc:	eddf 0a2e 	vldr	s1, [pc, #184]	; 24011478 <tVZFilter_setSampleRate+0x280>
240113c0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
240113c4:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240113c8:	eeb0 0a48 	vmov.f32	s0, s16
240113cc:	eea7 0a67 	vfms.f32	s0, s14, s15
240113d0:	f001 f96c 	bl	240126ac <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240113d4:	eddf 0a28 	vldr	s1, [pc, #160]	; 24011478 <tVZFilter_setSampleRate+0x280>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240113d8:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240113dc:	eeb0 0a68 	vmov.f32	s0, s17
240113e0:	f001 f968 	bl	240126b4 <minimum>
            f->cB = 1.0f-x*x;
240113e4:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240113e8:	edd4 7a05 	vldr	s15, [r4, #20]
240113ec:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
240113f0:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
240113f4:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
240113f8:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240113fc:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011400:	ee76 5a06 	vadd.f32	s11, s12, s12
24011404:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24011408:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401140c:	eee6 7a06 	vfma.f32	s15, s12, s12
24011410:	eee0 7a00 	vfma.f32	s15, s0, s0
24011414:	eee0 7a65 	vfms.f32	s15, s0, s11
24011418:	ee86 0aa7 	vdiv.f32	s0, s13, s15
2401141c:	f000 fe0a 	bl	24012034 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24011420:	edd4 5a07 	vldr	s11, [r4, #28]
24011424:	ed94 6a08 	vldr	s12, [r4, #32]
24011428:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
2401142c:	edd4 7a05 	vldr	s15, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011430:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
24011434:	ed94 8a04 	vldr	s16, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24011438:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
2401143c:	ee65 5a80 	vmul.f32	s11, s11, s0
24011440:	ee26 6a00 	vmul.f32	s12, s12, s0
24011444:	ee66 6a80 	vmul.f32	s13, s13, s0
24011448:	edc4 5a07 	vstr	s11, [r4, #28]
2401144c:	ed84 6a08 	vstr	s12, [r4, #32]
24011450:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
24011454:	e70a      	b.n	2401126c <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f;
24011456:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
2401145a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
2401145e:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24011460:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
24011464:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
24011468:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2401146a:	e6ff      	b.n	2401126c <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
2401146c:	edd4 7a05 	vldr	s15, [r4, #20]
24011470:	e6fc      	b.n	2401126c <tVZFilter_setSampleRate+0x74>
24011472:	bf00      	nop
24011474:	40490fdb 	.word	0x40490fdb
24011478:	00000000 	.word	0x00000000

2401147c <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
2401147c:	b570      	push	{r4, r5, r6, lr}
2401147e:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
24011482:	698d      	ldr	r5, [r1, #24]
{
24011484:	eeb0 8a40 	vmov.f32	s16, s0
24011488:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
2401148a:	2040      	movs	r0, #64	; 0x40
2401148c:	4629      	mov	r1, r5
{
2401148e:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
24011492:	f001 f92d 	bl	240126f0 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24011496:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24011510 <tDiodeFilter_init+0x94>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
2401149a:	6030      	str	r0, [r6, #0]
2401149c:	4604      	mov	r4, r0
    f->mempool = m;
2401149e:	6005      	str	r5, [r0, #0]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
240114a0:	ee68 7a27 	vmul.f32	s15, s16, s15
    f->invSampleRate = leaf->invSampleRate;
240114a4:	686b      	ldr	r3, [r5, #4]
240114a6:	ed93 7a01 	vldr	s14, [r3, #4]
    f->cutoff = cutoff;
240114aa:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
240114ae:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->invSampleRate = leaf->invSampleRate;
240114b2:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
240114b6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
240114ba:	f004 fa61 	bl	24015980 <tan>
    f->r = (7.f * resonance + 0.5f);
240114be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240114c2:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
240114c6:	4913      	ldr	r1, [pc, #76]	; (24011514 <tDiodeFilter_init+0x98>)
    f->zi = 0.0f; //previous input value
    f->gamma = f->Vt*f->n;
240114c8:	4b13      	ldr	r3, [pc, #76]	; (24011518 <tDiodeFilter_init+0x9c>)
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
240114ca:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->r = (7.f * resonance + 0.5f);
240114ce:	eeb0 7a67 	vmov.f32	s14, s15
    f->zi = 0.0f; //previous input value
240114d2:	2000      	movs	r0, #0
    f->n = 1.836f;
240114d4:	6161      	str	r1, [r4, #20]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
240114d6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->s0 = 0.01f;
240114da:	4910      	ldr	r1, [pc, #64]	; (2401151c <tDiodeFilter_init+0xa0>)
    f->r = (7.f * resonance + 0.5f);
240114dc:	eea8 7aa6 	vfma.f32	s14, s17, s13
    f->gamma = f->Vt*f->n;
240114e0:	61a3      	str	r3, [r4, #24]
    f->s1 = 0.02f;
240114e2:	4b0f      	ldr	r3, [pc, #60]	; (24011520 <tDiodeFilter_init+0xa4>)
    f->zi = 0.0f; //previous input value
240114e4:	61e0      	str	r0, [r4, #28]
    f->s0 = 0.01f;
240114e6:	62e1      	str	r1, [r4, #44]	; 0x2c
    f->g0inv = 1.f/(2.f*f->Vt);
240114e8:	6222      	str	r2, [r4, #32]
    f->s1 = 0.02f;
240114ea:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
240114ec:	480d      	ldr	r0, [pc, #52]	; (24011524 <tDiodeFilter_init+0xa8>)
    f->g1inv = 1.f/(2.f*f->gamma);
240114ee:	490e      	ldr	r1, [pc, #56]	; (24011528 <tDiodeFilter_init+0xac>)
    f->g2inv = 1.f/(6.f*f->gamma);
240114f0:	4a0e      	ldr	r2, [pc, #56]	; (2401152c <tDiodeFilter_init+0xb0>)
    f->s3 = 0.04f;
240114f2:	4b0f      	ldr	r3, [pc, #60]	; (24011530 <tDiodeFilter_init+0xb4>)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
240114f4:	ed84 0a02 	vstr	s0, [r4, #8]
    f->Vt = 0.5f;
240114f8:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
240114fc:	ed84 7a03 	vstr	s14, [r4, #12]
    f->s2 = 0.03f;
24011500:	6360      	str	r0, [r4, #52]	; 0x34
    f->g1inv = 1.f/(2.f*f->gamma);
24011502:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
24011504:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s3 = 0.04f;
24011506:	63a3      	str	r3, [r4, #56]	; 0x38
}
24011508:	ecbd 8b02 	vpop	{d8}
2401150c:	bd70      	pop	{r4, r5, r6, pc}
2401150e:	bf00      	nop
24011510:	40490fdb 	.word	0x40490fdb
24011514:	3feb020c 	.word	0x3feb020c
24011518:	3f6b020c 	.word	0x3f6b020c
2401151c:	3c23d70a 	.word	0x3c23d70a
24011520:	3ca3d70a 	.word	0x3ca3d70a
24011524:	3cf5c28f 	.word	0x3cf5c28f
24011528:	3f0b6efd 	.word	0x3f0b6efd
2401152c:	3e39e952 	.word	0x3e39e952
24011530:	3d23d70a 	.word	0x3d23d70a

24011534 <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
Lfloat   tDiodeFilter_tick               (tDiodeFilter* const vf, Lfloat in)
{
    _tDiodeFilter* f = *vf;
24011534:	6803      	ldr	r3, [r0, #0]
{
24011536:	eeb0 4a40 	vmov.f32	s8, s0
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401153a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401153e:	eddf 6add 	vldr	s13, [pc, #884]	; 240118b4 <tDiodeFilter_tick+0x380>
24011542:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
    if (testVal!= 0.0f)
24011546:	eddf 5adc 	vldr	s11, [pc, #880]	; 240118b8 <tDiodeFilter_tick+0x384>
{
2401154a:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401154e:	ed93 0a03 	vldr	s0, [r3, #12]
24011552:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
24011556:	ed93 6a07 	vldr	s12, [r3, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401155a:	ee67 7a40 	vnmul.f32	s15, s14, s0
2401155e:	ed93 5a08 	vldr	s10, [r3, #32]
    Lfloat ih = 0.5f * (in + f->zi);
24011562:	ee34 6a06 	vadd.f32	s12, s8, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011566:	edd3 1a02 	vldr	s3, [r3, #8]
2401156a:	eee6 7a23 	vfma.f32	s15, s12, s7
2401156e:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat a = x*x;
24011572:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011576:	eee7 6aa4 	vfma.f32	s13, s15, s9
2401157a:	ee67 6aa6 	vmul.f32	s13, s15, s13
    if (testVal!= 0.0f)
2401157e:	eef4 6a65 	vcmp.f32	s13, s11
24011582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011586:	f000 8187 	beq.w	24011898 <tDiodeFilter_tick+0x364>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401158a:	ed9f 6acc 	vldr	s12, [pc, #816]	; 240118bc <tDiodeFilter_tick+0x388>
2401158e:	ee76 5a86 	vadd.f32	s11, s13, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24011592:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011596:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401159a:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401159e:	ee21 5a85 	vmul.f32	s10, s3, s10
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
240115a2:	ed93 2a09 	vldr	s4, [r3, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
    
    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240115a6:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
240115aa:	ee73 6ac3 	vsub.f32	s13, s7, s6
    return ((a + 105.0f)*a + 945.0f) / output;
240115ae:	ed9f 1ac3 	vldr	s2, [pc, #780]	; 240118bc <tDiodeFilter_tick+0x388>
240115b2:	eddf 4ac3 	vldr	s9, [pc, #780]	; 240118c0 <tDiodeFilter_tick+0x38c>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240115b6:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
240115ba:	eeb0 8a41 	vmov.f32	s16, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240115be:	ed9f 6abd 	vldr	s12, [pc, #756]	; 240118b4 <tDiodeFilter_tick+0x380>
    return ((a + 105.0f)*a + 945.0f) / output;
240115c2:	ee77 4aa4 	vadd.f32	s9, s15, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
240115c6:	ee66 6a82 	vmul.f32	s13, s13, s4
    return ((a + 105.0f)*a + 945.0f) / output;
240115ca:	eea7 8aa4 	vfma.f32	s16, s15, s9
    if (testVal!= 0.0f)
240115ce:	eddf 4aba 	vldr	s9, [pc, #744]	; 240118b8 <tDiodeFilter_tick+0x384>
    Lfloat a = x*x;
240115d2:	ee66 6aa6 	vmul.f32	s13, s13, s13
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240115d6:	eef0 7a46 	vmov.f32	s15, s12
240115da:	ed9f 6ab6 	vldr	s12, [pc, #728]	; 240118b4 <tDiodeFilter_tick+0x380>
240115de:	eee6 7aa0 	vfma.f32	s15, s13, s1
    return ((a + 105.0f)*a + 945.0f) / output;
240115e2:	eddf 0ab6 	vldr	s1, [pc, #728]	; 240118bc <tDiodeFilter_tick+0x388>
240115e6:	eec8 2a25 	vdiv.f32	s5, s16, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240115ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
240115ee:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
240115f2:	eef0 8a60 	vmov.f32	s17, s1
    if (testVal!= 0.0f)
240115f6:	eef4 7a64 	vcmp.f32	s15, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240115fa:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
    if (testVal!= 0.0f)
240115fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011602:	bf18      	it	ne
24011604:	ee77 5a81 	vaddne.f32	s11, s15, s2
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24011608:	ee74 7ae3 	vsub.f32	s15, s9, s7
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401160c:	ee62 2a85 	vmul.f32	s5, s5, s10
    return ((a + 105.0f)*a + 945.0f) / output;
24011610:	ed9f 5aab 	vldr	s10, [pc, #684]	; 240118c0 <tDiodeFilter_tick+0x38c>
    Lfloat output = 1.0f;
24011614:	bf08      	it	eq
24011616:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2401161a:	ee67 7a82 	vmul.f32	s15, s15, s4
    return ((a + 105.0f)*a + 945.0f) / output;
2401161e:	ee36 5a85 	vadd.f32	s10, s13, s10
24011622:	ee21 1a82 	vmul.f32	s2, s3, s4
    Lfloat a = x*x;
24011626:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
2401162a:	eee6 8a85 	vfma.f32	s17, s13, s10
2401162e:	ed9f 5aa4 	vldr	s10, [pc, #656]	; 240118c0 <tDiodeFilter_tick+0x38c>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011632:	eea7 6a88 	vfma.f32	s12, s15, s16
    return ((a + 105.0f)*a + 945.0f) / output;
24011636:	ee37 5a85 	vadd.f32	s10, s15, s10
2401163a:	eec8 6aa5 	vdiv.f32	s13, s17, s11
    if (testVal!= 0.0f)
2401163e:	eddf 5a9e 	vldr	s11, [pc, #632]	; 240118b8 <tDiodeFilter_tick+0x384>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011642:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
24011646:	eeb4 6a65 	vcmp.f32	s12, s11
2401164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401164e:	bf18      	it	ne
24011650:	ee76 5a20 	vaddne.f32	s11, s12, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24011654:	eddf 0a99 	vldr	s1, [pc, #612]	; 240118bc <tDiodeFilter_tick+0x388>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24011658:	ee37 6a64 	vsub.f32	s12, s14, s9
    return ((a + 105.0f)*a + 945.0f) / output;
2401165c:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat output = 1.0f;
24011660:	bf08      	it	eq
24011662:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24011666:	ee26 6a02 	vmul.f32	s12, s12, s4
    return ((a + 105.0f)*a + 945.0f) / output;
2401166a:	eea7 8a85 	vfma.f32	s16, s15, s10
    if (testVal!= 0.0f)
2401166e:	ed9f 5a92 	vldr	s10, [pc, #584]	; 240118b8 <tDiodeFilter_tick+0x384>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011672:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
    Lfloat a = x*x;
24011676:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401167a:	ee66 6a81 	vmul.f32	s13, s13, s2
    return ((a + 105.0f)*a + 945.0f) / output;
2401167e:	eec8 7a25 	vdiv.f32	s15, s16, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011682:	eddf 5a8c 	vldr	s11, [pc, #560]	; 240118b4 <tDiodeFilter_tick+0x380>
24011686:	eee6 5a02 	vfma.f32	s11, s12, s4
    return ((a + 105.0f)*a + 945.0f) / output;
2401168a:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 240118bc <tDiodeFilter_tick+0x388>
2401168e:	eeb0 8a42 	vmov.f32	s16, s4
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011692:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
24011696:	eef4 5a45 	vcmp.f32	s11, s10
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2401169a:	ee67 7a81 	vmul.f32	s15, s15, s2
    if (testVal!= 0.0f)
2401169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240116a2:	bf18      	it	ne
240116a4:	ee35 5aa0 	vaddne.f32	s10, s11, s1
    return ((a + 105.0f)*a + 945.0f) / output;
240116a8:	eddf 5a85 	vldr	s11, [pc, #532]	; 240118c0 <tDiodeFilter_tick+0x38c>
    Lfloat output = 1.0f;
240116ac:	bf08      	it	eq
240116ae:	eeb7 5a00 	vmoveq.f32	s10, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240116b2:	edd3 0a0a 	vldr	s1, [r3, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
240116b6:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240116ba:	ee61 1aa0 	vmul.f32	s3, s3, s1
    return ((a + 105.0f)*a + 945.0f) / output;
240116be:	eea6 8a25 	vfma.f32	s16, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240116c2:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 240118b4 <tDiodeFilter_tick+0x380>
    return ((a + 105.0f)*a + 945.0f) / output;
240116c6:	eec8 5a05 	vdiv.f32	s11, s16, s10
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240116ca:	ee27 5a20 	vmul.f32	s10, s14, s1
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240116ce:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
240116d2:	ee77 0a23 	vadd.f32	s1, s14, s7
    Lfloat a = x*x;
240116d6:	ee25 5a05 	vmul.f32	s10, s10, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240116da:	eea5 6a08 	vfma.f32	s12, s10, s16
    return ((a + 105.0f)*a + 945.0f) / output;
240116de:	ed9f 8a77 	vldr	s16, [pc, #476]	; 240118bc <tDiodeFilter_tick+0x388>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
240116e2:	ee65 5a81 	vmul.f32	s11, s11, s2
    if (testVal!= 0.0f)
240116e6:	ed9f 1a74 	vldr	s2, [pc, #464]	; 240118b8 <tDiodeFilter_tick+0x384>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240116ea:	ee26 6a05 	vmul.f32	s12, s12, s10
    if (testVal!= 0.0f)
240116ee:	eeb4 6a41 	vcmp.f32	s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
240116f2:	ed9f 1a73 	vldr	s2, [pc, #460]	; 240118c0 <tDiodeFilter_tick+0x38c>
240116f6:	ee35 1a01 	vadd.f32	s2, s10, s2
    if (testVal!= 0.0f)
240116fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
240116fe:	eea5 8a01 	vfma.f32	s16, s10, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011702:	bf14      	ite	ne
24011704:	ee36 2a02 	vaddne.f32	s4, s12, s4
    Lfloat output = 1.0f;
24011708:	eeb7 2a00 	vmoveq.f32	s4, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401170c:	ee37 6a24 	vadd.f32	s12, s14, s9
24011710:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
24011714:	ee88 5a02 	vdiv.f32	s10, s16, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011718:	ee33 2a24 	vadd.f32	s4, s6, s9
2401171c:	ee34 8aa0 	vadd.f32	s16, s9, s1
24011720:	ee32 2a20 	vadd.f32	s4, s4, s1
24011724:	eef0 0a48 	vmov.f32	s1, s16
24011728:	eea4 2a22 	vfma.f32	s4, s8, s5
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
2401172c:	ee25 5a21 	vmul.f32	s10, s10, s3
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011730:	eee2 0a26 	vfma.f32	s1, s4, s13
24011734:	ee36 2a06 	vadd.f32	s4, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011738:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
2401173c:	ee75 8a09 	vadd.f32	s17, s10, s18
24011740:	eea6 6a82 	vfma.f32	s12, s13, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011744:	ee27 2a26 	vmul.f32	s4, s14, s13
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011748:	ee35 8a29 	vadd.f32	s16, s10, s19
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401174c:	eea0 6aa7 	vfma.f32	s12, s1, s15
24011750:	eef0 0a47 	vmov.f32	s1, s14
24011754:	eee2 0a01 	vfma.f32	s1, s4, s2
24011758:	ee22 2a09 	vmul.f32	s4, s4, s18
2401175c:	eea7 2a01 	vfma.f32	s4, s14, s2
24011760:	eee2 0a27 	vfma.f32	s1, s4, s15
24011764:	eeb0 2a60 	vmov.f32	s4, s1
24011768:	eef0 0a61 	vmov.f32	s1, s3
2401176c:	eea6 2a25 	vfma.f32	s4, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011770:	eee0 0a22 	vfma.f32	s1, s0, s5
24011774:	eeb0 6a61 	vmov.f32	s12, s3
24011778:	eea5 6a01 	vfma.f32	s12, s10, s2
2401177c:	ee75 1a20 	vadd.f32	s3, s10, s1
24011780:	eef0 0a41 	vmov.f32	s1, s2
24011784:	eee1 8aa6 	vfma.f32	s17, s3, s13
24011788:	ee75 1a01 	vadd.f32	s3, s10, s2
2401178c:	eee5 0a01 	vfma.f32	s1, s10, s2
24011790:	eee6 1a26 	vfma.f32	s3, s12, s13
24011794:	eeb0 6a45 	vmov.f32	s12, s10
24011798:	eee8 1aa7 	vfma.f32	s3, s17, s15
2401179c:	ee68 8a26 	vmul.f32	s17, s16, s13
240117a0:	eea8 6a81 	vfma.f32	s12, s17, s2
240117a4:	eee8 0a89 	vfma.f32	s1, s17, s18
240117a8:	eea0 6aa7 	vfma.f32	s12, s1, s15
240117ac:	eea1 6aa5 	vfma.f32	s12, s3, s11
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
240117b0:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
240117b4:	eeb4 6a61 	vcmp.f32	s12, s3
240117b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
240117bc:	eef5 6a40 	vcmp.f32	s13, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240117c0:	bf14      	ite	ne
240117c2:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
240117c6:	ed9f 6a3f 	vldreq	s12, [pc, #252]	; 240118c4 <tDiodeFilter_tick+0x390>
    if (t1 == 0.0f)
240117ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
240117ce:	ee82 1a06 	vdiv.f32	s2, s4, s12
    if (t1 == 0.0f)
240117d2:	d069      	beq.n	240118a8 <tDiodeFilter_tick+0x374>
240117d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240117d8:	ee76 0aa0 	vadd.f32	s1, s13, s1
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
240117dc:	eef5 7a40 	vcmp.f32	s15, #0.0
240117e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240117e4:	d05b      	beq.n	2401189e <tDiodeFilter_tick+0x36a>
240117e6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
240117ea:	ee37 2a82 	vadd.f32	s4, s15, s4
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
240117ee:	eef5 5a40 	vcmp.f32	s11, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
240117f2:	ed83 4a07 	vstr	s8, [r3, #28]
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
240117f6:	eeb0 9a47 	vmov.f32	s18, s14
240117fa:	eef0 8a64 	vmov.f32	s17, s9
    if (t3 == 0.0f)
240117fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24011802:	ee77 0aa0 	vadd.f32	s1, s15, s1
    Lfloat xx = (in - f->r*y3);
24011806:	ee20 0a01 	vmul.f32	s0, s0, s2
        t3 = 0.000001f;
2401180a:	bf08      	it	eq
2401180c:	eddf 5a2d 	vldreq	s11, [pc, #180]	; 240118c4 <tDiodeFilter_tick+0x390>
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24011810:	ee38 8a25 	vadd.f32	s16, s16, s11
24011814:	eee5 8a81 	vfma.f32	s17, s11, s2
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24011818:	ee35 2a82 	vadd.f32	s4, s11, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
2401181c:	ee98 9a01 	vfnms.f32	s18, s16, s2
24011820:	eeb0 8a63 	vmov.f32	s16, s7
    Lfloat xx = (in - f->r*y3);
24011824:	ee74 1a40 	vsub.f32	s3, s8, s0
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24011828:	ee89 6a25 	vdiv.f32	s12, s18, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
2401182c:	eed2 8a06 	vfnms.f32	s17, s4, s12
24011830:	eea7 8a86 	vfma.f32	s16, s15, s12
24011834:	ee88 2aa7 	vdiv.f32	s4, s17, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24011838:	ee90 8a82 	vfnms.f32	s16, s1, s4
2401183c:	ee88 4a26 	vdiv.f32	s8, s16, s13
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011840:	ee32 4a44 	vsub.f32	s8, s4, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011844:	ee36 2a42 	vsub.f32	s4, s12, s4
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011848:	ee31 6a46 	vsub.f32	s12, s2, s12
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
2401184c:	ee64 6a26 	vmul.f32	s13, s8, s13
24011850:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011854:	ee26 6a25 	vmul.f32	s12, s12, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011858:	eef0 0a66 	vmov.f32	s1, s13
2401185c:	eed2 6a27 	vfnms.f32	s13, s4, s15
24011860:	eef0 5a46 	vmov.f32	s11, s12
24011864:	eee2 0aa1 	vfma.f32	s1, s5, s3
24011868:	eea5 6a01 	vfma.f32	s12, s10, s2
2401186c:	eee2 5a67 	vfms.f32	s11, s4, s15
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011870:	eee6 3a84 	vfma.f32	s7, s13, s8
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011874:	eea0 3a84 	vfma.f32	s6, s1, s8
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24011878:	eea6 7a44 	vfms.f32	s14, s12, s8
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401187c:	eee5 4a84 	vfma.f32	s9, s11, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011880:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011884:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24011888:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
2401188c:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    return tanhf(y3*f->r);
}
24011890:	ecbd 8b04 	vpop	{d8-d9}
    return tanhf(y3*f->r);
24011894:	f004 b80a 	b.w	240158ac <tanhf>
    Lfloat output = 1.0f;
24011898:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2401189c:	e679      	b.n	24011592 <tDiodeFilter_tick+0x5e>
2401189e:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 240118c8 <tDiodeFilter_tick+0x394>
        t2 = 0.000001f;
240118a2:	eddf 7a08 	vldr	s15, [pc, #32]	; 240118c4 <tDiodeFilter_tick+0x390>
240118a6:	e7a2      	b.n	240117ee <tDiodeFilter_tick+0x2ba>
240118a8:	eddf 0a07 	vldr	s1, [pc, #28]	; 240118c8 <tDiodeFilter_tick+0x394>
        t1 = 0.000001f;
240118ac:	eddf 6a05 	vldr	s13, [pc, #20]	; 240118c4 <tDiodeFilter_tick+0x390>
240118b0:	e794      	b.n	240117dc <tDiodeFilter_tick+0x2a8>
240118b2:	bf00      	nop
240118b4:	43d20000 	.word	0x43d20000
240118b8:	c46c4000 	.word	0xc46c4000
240118bc:	446c4000 	.word	0x446c4000
240118c0:	42d20000 	.word	0x42d20000
240118c4:	358637bd 	.word	0x358637bd
240118c8:	3f800008 	.word	0x3f800008

240118cc <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
    _tDiodeFilter* f = *vf;
240118cc:	6803      	ldr	r3, [r0, #0]
{
240118ce:	eeb0 4a40 	vmov.f32	s8, s0
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240118d2:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240118d6:	eddf 6add 	vldr	s13, [pc, #884]	; 24011c4c <tDiodeFilter_tickEfficient+0x380>
240118da:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
    if (testVal!= 0.0f)
240118de:	eddf 5adc 	vldr	s11, [pc, #880]	; 24011c50 <tDiodeFilter_tickEfficient+0x384>
{
240118e2:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240118e6:	ed93 0a03 	vldr	s0, [r3, #12]
240118ea:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
240118ee:	ed93 6a07 	vldr	s12, [r3, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240118f2:	ee67 7a40 	vnmul.f32	s15, s14, s0
240118f6:	ed93 5a08 	vldr	s10, [r3, #32]
    Lfloat ih = 0.5f * (in + f->zi);
240118fa:	ee34 6a06 	vadd.f32	s12, s8, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240118fe:	edd3 1a02 	vldr	s3, [r3, #8]
24011902:	eee6 7a23 	vfma.f32	s15, s12, s7
24011906:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat a = x*x;
2401190a:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401190e:	eee7 6aa4 	vfma.f32	s13, s15, s9
24011912:	ee67 6aa6 	vmul.f32	s13, s15, s13
    if (testVal!= 0.0f)
24011916:	eef4 6a65 	vcmp.f32	s13, s11
2401191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401191e:	f000 8187 	beq.w	24011c30 <tDiodeFilter_tickEfficient+0x364>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011922:	ed9f 6acc 	vldr	s12, [pc, #816]	; 24011c54 <tDiodeFilter_tickEfficient+0x388>
24011926:	ee76 5a86 	vadd.f32	s11, s13, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401192a:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401192e:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24011932:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24011936:	ee21 5a85 	vmul.f32	s10, s3, s10
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401193a:	ed93 2a09 	vldr	s4, [r3, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401193e:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24011942:	ee73 6ac3 	vsub.f32	s13, s7, s6
    return ((a + 105.0f)*a + 945.0f) / output;
24011946:	ed9f 1ac3 	vldr	s2, [pc, #780]	; 24011c54 <tDiodeFilter_tickEfficient+0x388>
2401194a:	eddf 4ac3 	vldr	s9, [pc, #780]	; 24011c58 <tDiodeFilter_tickEfficient+0x38c>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
2401194e:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24011952:	eeb0 8a41 	vmov.f32	s16, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011956:	ed9f 6abd 	vldr	s12, [pc, #756]	; 24011c4c <tDiodeFilter_tickEfficient+0x380>
    return ((a + 105.0f)*a + 945.0f) / output;
2401195a:	ee77 4aa4 	vadd.f32	s9, s15, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401195e:	ee66 6a82 	vmul.f32	s13, s13, s4
    return ((a + 105.0f)*a + 945.0f) / output;
24011962:	eea7 8aa4 	vfma.f32	s16, s15, s9
    if (testVal!= 0.0f)
24011966:	eddf 4aba 	vldr	s9, [pc, #744]	; 24011c50 <tDiodeFilter_tickEfficient+0x384>
    Lfloat a = x*x;
2401196a:	ee66 6aa6 	vmul.f32	s13, s13, s13
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401196e:	eef0 7a46 	vmov.f32	s15, s12
24011972:	ed9f 6ab6 	vldr	s12, [pc, #728]	; 24011c4c <tDiodeFilter_tickEfficient+0x380>
24011976:	eee6 7aa0 	vfma.f32	s15, s13, s1
    return ((a + 105.0f)*a + 945.0f) / output;
2401197a:	eddf 0ab6 	vldr	s1, [pc, #728]	; 24011c54 <tDiodeFilter_tickEfficient+0x388>
2401197e:	eec8 2a25 	vdiv.f32	s5, s16, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011982:	ee66 7aa7 	vmul.f32	s15, s13, s15
24011986:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
2401198a:	eef0 8a60 	vmov.f32	s17, s1
    if (testVal!= 0.0f)
2401198e:	eef4 7a64 	vcmp.f32	s15, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24011992:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
    if (testVal!= 0.0f)
24011996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401199a:	bf18      	it	ne
2401199c:	ee77 5a81 	vaddne.f32	s11, s15, s2
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240119a0:	ee74 7ae3 	vsub.f32	s15, s9, s7
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240119a4:	ee62 2a85 	vmul.f32	s5, s5, s10
    return ((a + 105.0f)*a + 945.0f) / output;
240119a8:	ed9f 5aab 	vldr	s10, [pc, #684]	; 24011c58 <tDiodeFilter_tickEfficient+0x38c>
    Lfloat output = 1.0f;
240119ac:	bf08      	it	eq
240119ae:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240119b2:	ee67 7a82 	vmul.f32	s15, s15, s4
    return ((a + 105.0f)*a + 945.0f) / output;
240119b6:	ee36 5a85 	vadd.f32	s10, s13, s10
240119ba:	ee21 1a82 	vmul.f32	s2, s3, s4
    Lfloat a = x*x;
240119be:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
240119c2:	eee6 8a85 	vfma.f32	s17, s13, s10
240119c6:	ed9f 5aa4 	vldr	s10, [pc, #656]	; 24011c58 <tDiodeFilter_tickEfficient+0x38c>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240119ca:	eea7 6a88 	vfma.f32	s12, s15, s16
    return ((a + 105.0f)*a + 945.0f) / output;
240119ce:	ee37 5a85 	vadd.f32	s10, s15, s10
240119d2:	eec8 6aa5 	vdiv.f32	s13, s17, s11
    if (testVal!= 0.0f)
240119d6:	eddf 5a9e 	vldr	s11, [pc, #632]	; 24011c50 <tDiodeFilter_tickEfficient+0x384>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240119da:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
240119de:	eeb4 6a65 	vcmp.f32	s12, s11
240119e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240119e6:	bf18      	it	ne
240119e8:	ee76 5a20 	vaddne.f32	s11, s12, s1
    return ((a + 105.0f)*a + 945.0f) / output;
240119ec:	eddf 0a99 	vldr	s1, [pc, #612]	; 24011c54 <tDiodeFilter_tickEfficient+0x388>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
240119f0:	ee37 6a64 	vsub.f32	s12, s14, s9
    return ((a + 105.0f)*a + 945.0f) / output;
240119f4:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat output = 1.0f;
240119f8:	bf08      	it	eq
240119fa:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
240119fe:	ee26 6a02 	vmul.f32	s12, s12, s4
    return ((a + 105.0f)*a + 945.0f) / output;
24011a02:	eea7 8a85 	vfma.f32	s16, s15, s10
    if (testVal!= 0.0f)
24011a06:	ed9f 5a92 	vldr	s10, [pc, #584]	; 24011c50 <tDiodeFilter_tickEfficient+0x384>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011a0a:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
    Lfloat a = x*x;
24011a0e:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24011a12:	ee66 6a81 	vmul.f32	s13, s13, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24011a16:	eec8 7a25 	vdiv.f32	s15, s16, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011a1a:	eddf 5a8c 	vldr	s11, [pc, #560]	; 24011c4c <tDiodeFilter_tickEfficient+0x380>
24011a1e:	eee6 5a02 	vfma.f32	s11, s12, s4
    return ((a + 105.0f)*a + 945.0f) / output;
24011a22:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 24011c54 <tDiodeFilter_tickEfficient+0x388>
24011a26:	eeb0 8a42 	vmov.f32	s16, s4
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011a2a:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
24011a2e:	eef4 5a45 	vcmp.f32	s11, s10
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24011a32:	ee67 7a81 	vmul.f32	s15, s15, s2
    if (testVal!= 0.0f)
24011a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011a3a:	bf18      	it	ne
24011a3c:	ee35 5aa0 	vaddne.f32	s10, s11, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24011a40:	eddf 5a85 	vldr	s11, [pc, #532]	; 24011c58 <tDiodeFilter_tickEfficient+0x38c>
    Lfloat output = 1.0f;
24011a44:	bf08      	it	eq
24011a46:	eeb7 5a00 	vmoveq.f32	s10, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24011a4a:	edd3 0a0a 	vldr	s1, [r3, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
24011a4e:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24011a52:	ee61 1aa0 	vmul.f32	s3, s3, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24011a56:	eea6 8a25 	vfma.f32	s16, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011a5a:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 24011c4c <tDiodeFilter_tickEfficient+0x380>
    return ((a + 105.0f)*a + 945.0f) / output;
24011a5e:	eec8 5a05 	vdiv.f32	s11, s16, s10
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24011a62:	ee27 5a20 	vmul.f32	s10, s14, s1
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011a66:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
24011a6a:	ee77 0a23 	vadd.f32	s1, s14, s7
    Lfloat a = x*x;
24011a6e:	ee25 5a05 	vmul.f32	s10, s10, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011a72:	eea5 6a08 	vfma.f32	s12, s10, s16
    return ((a + 105.0f)*a + 945.0f) / output;
24011a76:	ed9f 8a77 	vldr	s16, [pc, #476]	; 24011c54 <tDiodeFilter_tickEfficient+0x388>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24011a7a:	ee65 5a81 	vmul.f32	s11, s11, s2
    if (testVal!= 0.0f)
24011a7e:	ed9f 1a74 	vldr	s2, [pc, #464]	; 24011c50 <tDiodeFilter_tickEfficient+0x384>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011a82:	ee26 6a05 	vmul.f32	s12, s12, s10
    if (testVal!= 0.0f)
24011a86:	eeb4 6a41 	vcmp.f32	s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24011a8a:	ed9f 1a73 	vldr	s2, [pc, #460]	; 24011c58 <tDiodeFilter_tickEfficient+0x38c>
24011a8e:	ee35 1a01 	vadd.f32	s2, s10, s2
    if (testVal!= 0.0f)
24011a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
24011a96:	eea5 8a01 	vfma.f32	s16, s10, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24011a9a:	bf14      	ite	ne
24011a9c:	ee36 2a02 	vaddne.f32	s4, s12, s4
    Lfloat output = 1.0f;
24011aa0:	eeb7 2a00 	vmoveq.f32	s4, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011aa4:	ee37 6a24 	vadd.f32	s12, s14, s9
24011aa8:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
24011aac:	ee88 5a02 	vdiv.f32	s10, s16, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011ab0:	ee33 2a24 	vadd.f32	s4, s6, s9
24011ab4:	ee34 8aa0 	vadd.f32	s16, s9, s1
24011ab8:	ee32 2a20 	vadd.f32	s4, s4, s1
24011abc:	eef0 0a48 	vmov.f32	s1, s16
24011ac0:	eea4 2a22 	vfma.f32	s4, s8, s5
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24011ac4:	ee25 5a21 	vmul.f32	s10, s10, s3
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011ac8:	eee2 0a26 	vfma.f32	s1, s4, s13
24011acc:	ee36 2a06 	vadd.f32	s4, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011ad0:	eef1 1a00 	vmov.f32	s3, #16	; 0x40800000  4.0
24011ad4:	ee75 8a09 	vadd.f32	s17, s10, s18
24011ad8:	eea6 6a82 	vfma.f32	s12, s13, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011adc:	ee27 2a26 	vmul.f32	s4, s14, s13
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011ae0:	ee35 8a29 	vadd.f32	s16, s10, s19
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24011ae4:	eea0 6aa7 	vfma.f32	s12, s1, s15
24011ae8:	eef0 0a47 	vmov.f32	s1, s14
24011aec:	eee2 0a01 	vfma.f32	s1, s4, s2
24011af0:	ee22 2a09 	vmul.f32	s4, s4, s18
24011af4:	eea7 2a01 	vfma.f32	s4, s14, s2
24011af8:	eee2 0a27 	vfma.f32	s1, s4, s15
24011afc:	eeb0 2a60 	vmov.f32	s4, s1
24011b00:	eef0 0a61 	vmov.f32	s1, s3
24011b04:	eea6 2a25 	vfma.f32	s4, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011b08:	eee0 0a22 	vfma.f32	s1, s0, s5
24011b0c:	eeb0 6a61 	vmov.f32	s12, s3
24011b10:	eea5 6a01 	vfma.f32	s12, s10, s2
24011b14:	ee75 1a20 	vadd.f32	s3, s10, s1
24011b18:	eef0 0a41 	vmov.f32	s1, s2
24011b1c:	eee1 8aa6 	vfma.f32	s17, s3, s13
24011b20:	ee75 1a01 	vadd.f32	s3, s10, s2
24011b24:	eee5 0a01 	vfma.f32	s1, s10, s2
24011b28:	eee6 1a26 	vfma.f32	s3, s12, s13
24011b2c:	eeb0 6a45 	vmov.f32	s12, s10
24011b30:	eee8 1aa7 	vfma.f32	s3, s17, s15
24011b34:	ee68 8a26 	vmul.f32	s17, s16, s13
24011b38:	eea8 6a81 	vfma.f32	s12, s17, s2
24011b3c:	eee8 0a89 	vfma.f32	s1, s17, s18
24011b40:	eea0 6aa7 	vfma.f32	s12, s1, s15
24011b44:	eea1 6aa5 	vfma.f32	s12, s3, s11
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
24011b48:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
24011b4c:	eeb4 6a61 	vcmp.f32	s12, s3
24011b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
24011b54:	eef5 6a40 	vcmp.f32	s13, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24011b58:	bf14      	ite	ne
24011b5a:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
24011b5e:	ed9f 6a3f 	vldreq	s12, [pc, #252]	; 24011c5c <tDiodeFilter_tickEfficient+0x390>
    if (t1 == 0.0f)
24011b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
24011b66:	ee82 1a06 	vdiv.f32	s2, s4, s12
    if (t1 == 0.0f)
24011b6a:	d069      	beq.n	24011c40 <tDiodeFilter_tickEfficient+0x374>
24011b6c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24011b70:	ee76 0aa0 	vadd.f32	s1, s13, s1
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
24011b74:	eef5 7a40 	vcmp.f32	s15, #0.0
24011b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011b7c:	d05b      	beq.n	24011c36 <tDiodeFilter_tickEfficient+0x36a>
24011b7e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
24011b82:	ee37 2a82 	vadd.f32	s4, s15, s4
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
24011b86:	eef5 5a40 	vcmp.f32	s11, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));

    f->zi = in;
24011b8a:	ed83 4a07 	vstr	s8, [r3, #28]
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24011b8e:	eeb0 9a47 	vmov.f32	s18, s14
24011b92:	eef0 8a64 	vmov.f32	s17, s9
    if (t3 == 0.0f)
24011b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24011b9a:	ee77 0aa0 	vadd.f32	s1, s15, s1
    Lfloat xx = (in - f->r*y3);
24011b9e:	ee20 0a01 	vmul.f32	s0, s0, s2
        t3 = 0.000001f;
24011ba2:	bf08      	it	eq
24011ba4:	eddf 5a2d 	vldreq	s11, [pc, #180]	; 24011c5c <tDiodeFilter_tickEfficient+0x390>
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24011ba8:	ee38 8a25 	vadd.f32	s16, s16, s11
24011bac:	eee5 8a81 	vfma.f32	s17, s11, s2
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24011bb0:	ee35 2a82 	vadd.f32	s4, s11, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24011bb4:	ee98 9a01 	vfnms.f32	s18, s16, s2
24011bb8:	eeb0 8a63 	vmov.f32	s16, s7
    Lfloat xx = (in - f->r*y3);
24011bbc:	ee74 1a40 	vsub.f32	s3, s8, s0
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24011bc0:	ee89 6a25 	vdiv.f32	s12, s18, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24011bc4:	eed2 8a06 	vfnms.f32	s17, s4, s12
24011bc8:	eea7 8a86 	vfma.f32	s16, s15, s12
24011bcc:	ee88 2aa7 	vdiv.f32	s4, s17, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24011bd0:	ee90 8a82 	vfnms.f32	s16, s1, s4
24011bd4:	ee88 4a26 	vdiv.f32	s8, s16, s13
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011bd8:	ee32 4a44 	vsub.f32	s8, s4, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011bdc:	ee36 2a42 	vsub.f32	s4, s12, s4
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011be0:	ee31 6a46 	vsub.f32	s12, s2, s12
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011be4:	ee64 6a26 	vmul.f32	s13, s8, s13
24011be8:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011bec:	ee26 6a25 	vmul.f32	s12, s12, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011bf0:	eef0 0a66 	vmov.f32	s1, s13
24011bf4:	eed2 6a27 	vfnms.f32	s13, s4, s15
24011bf8:	eef0 5a46 	vmov.f32	s11, s12
24011bfc:	eee2 0aa1 	vfma.f32	s1, s5, s3
24011c00:	eea5 6a01 	vfma.f32	s12, s10, s2
24011c04:	eee2 5a67 	vfms.f32	s11, s4, s15
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011c08:	eee6 3a84 	vfma.f32	s7, s13, s8
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011c0c:	eea0 3a84 	vfma.f32	s6, s1, s8
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24011c10:	eea6 7a44 	vfms.f32	s14, s12, s8
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011c14:	eee5 4a84 	vfma.f32	s9, s11, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24011c18:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24011c1c:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24011c20:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24011c24:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    return fast_tanh5(y3*f->r);
}
24011c28:	ecbd 8b04 	vpop	{d8-d9}
    return fast_tanh5(y3*f->r);
24011c2c:	f000 bae2 	b.w	240121f4 <fast_tanh5>
    Lfloat output = 1.0f;
24011c30:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24011c34:	e679      	b.n	2401192a <tDiodeFilter_tickEfficient+0x5e>
24011c36:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 24011c60 <tDiodeFilter_tickEfficient+0x394>
        t2 = 0.000001f;
24011c3a:	eddf 7a08 	vldr	s15, [pc, #32]	; 24011c5c <tDiodeFilter_tickEfficient+0x390>
24011c3e:	e7a2      	b.n	24011b86 <tDiodeFilter_tickEfficient+0x2ba>
24011c40:	eddf 0a07 	vldr	s1, [pc, #28]	; 24011c60 <tDiodeFilter_tickEfficient+0x394>
        t1 = 0.000001f;
24011c44:	eddf 6a05 	vldr	s13, [pc, #20]	; 24011c5c <tDiodeFilter_tickEfficient+0x390>
24011c48:	e794      	b.n	24011b74 <tDiodeFilter_tickEfficient+0x2a8>
24011c4a:	bf00      	nop
24011c4c:	43d20000 	.word	0x43d20000
24011c50:	c46c4000 	.word	0xc46c4000
24011c54:	446c4000 	.word	0x446c4000
24011c58:	42d20000 	.word	0x42d20000
24011c5c:	358637bd 	.word	0x358637bd
24011c60:	3f800008 	.word	0x3f800008

24011c64 <tDiodeFilter_setFreqFast>:
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
    int intVer = (int)cutoff;
24011c64:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011c68:	4b0d      	ldr	r3, [pc, #52]	; (24011ca0 <tDiodeFilter_setFreqFast+0x3c>)
24011c6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tDiodeFilter* f = *vf;
24011c6e:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
24011c70:	ee17 2a10 	vmov	r2, s14
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24011c74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011c78:	ee77 7ac0 	vsub.f32	s15, s15, s0
24011c7c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24011c80:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011c84:	edd0 6a01 	vldr	s13, [r0, #4]
24011c88:	ee77 7a87 	vadd.f32	s15, s15, s14
24011c8c:	ed90 7a00 	vldr	s14, [r0]
24011c90:	ee20 0a26 	vmul.f32	s0, s0, s13
24011c94:	eea7 0a27 	vfma.f32	s0, s14, s15
24011c98:	ed81 0a02 	vstr	s0, [r1, #8]
}
24011c9c:	4770      	bx	lr
24011c9e:	bf00      	nop
24011ca0:	24017940 	.word	0x24017940

24011ca4 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
24011ca4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24011ca8:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
24011cac:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
24011cb0:	eef0 0a67 	vmov.f32	s1, s15
{
24011cb4:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
24011cb6:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
24011cb8:	eee0 0a07 	vfma.f32	s1, s0, s14
24011cbc:	eeb0 0a67 	vmov.f32	s0, s15
24011cc0:	f01a ffc6 	bl	2402cc50 <__LEAF_clip_veneer>
24011cc4:	ed84 0a03 	vstr	s0, [r4, #12]
}
24011cc8:	bd10      	pop	{r4, pc}
24011cca:	bf00      	nop

24011ccc <tLadderFilter_init>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}


void    tLadderFilter_init           (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
24011ccc:	b570      	push	{r4, r5, r6, lr}
24011cce:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
24011cd2:	698d      	ldr	r5, [r1, #24]
{
24011cd4:	eef0 8a40 	vmov.f32	s17, s0
24011cd8:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24011cda:	2038      	movs	r0, #56	; 0x38
24011cdc:	4629      	mov	r1, r5
{
24011cde:	eeb0 8a60 	vmov.f32	s16, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24011ce2:	f000 fd05 	bl	240126f0 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->oversampling = 1;
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24011ce6:	eddf 7a18 	vldr	s15, [pc, #96]	; 24011d48 <tLadderFilter_init+0x7c>
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24011cea:	6030      	str	r0, [r6, #0]
    f->oversampling = 1;
24011cec:	2301      	movs	r3, #1
    f->mempool = m;
24011cee:	6005      	str	r5, [r0, #0]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24011cf0:	ee68 7aa7 	vmul.f32	s15, s17, s15
    f->invSampleRate = leaf->invSampleRate;
24011cf4:	686a      	ldr	r2, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24011cf6:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
24011cf8:	ed92 7a01 	vldr	s14, [r2, #4]
    f->cutoff = cutoff;
24011cfc:	edc0 8a01 	vstr	s17, [r0, #4]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24011d00:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->oversampling = 1;
24011d04:	60c3      	str	r3, [r0, #12]
    f->invSampleRate = leaf->invSampleRate;
24011d06:	ed80 7a02 	vstr	s14, [r0, #8]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24011d0a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24011d0e:	f003 fe37 	bl	24015980 <tan>
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
24011d12:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24011d16:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
24011d1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
24011d1e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
24011d22:	490a      	ldr	r1, [pc, #40]	; (24011d4c <tLadderFilter_init+0x80>)
    f->fb = (resonance * 8.0f);
24011d24:	ee28 8a07 	vmul.f32	s16, s16, s14
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
24011d28:	4b09      	ldr	r3, [pc, #36]	; (24011d50 <tLadderFilter_init+0x84>)
    f->c2 = 2.0f * f->c;
24011d2a:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24011d2e:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a = 2.0f;
24011d32:	61e0      	str	r0, [r4, #28]
    f->s = 0.1f;
24011d34:	6221      	str	r1, [r4, #32]
    f->d = 1.0f;
24011d36:	6262      	str	r2, [r4, #36]	; 0x24
    f->c2 = 2.0f * f->c;
24011d38:	edc4 7a06 	vstr	s15, [r4, #24]
    f->fb = (resonance * 8.0f);
24011d3c:	ed84 8a05 	vstr	s16, [r4, #20]
    f->b[0] = 0.04f;
24011d40:	62a3      	str	r3, [r4, #40]	; 0x28
}
24011d42:	ecbd 8b02 	vpop	{d8}
24011d46:	bd70      	pop	{r4, r5, r6, pc}
24011d48:	40490fdb 	.word	0x40490fdb
24011d4c:	3dcccccd 	.word	0x3dcccccd
24011d50:	3d23d70a 	.word	0x3d23d70a

24011d54 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
    _tLadderFilter* f = *vf;
24011d54:	6802      	ldr	r2, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
24011d56:	eddf 7a90 	vldr	s15, [pc, #576]	; 24011f98 <tLadderFilter_tick+0x244>
{
24011d5a:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
24011d5e:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
24011d60:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
24011d64:	2900      	cmp	r1, #0
24011d66:	f340 8112 	ble.w	24011f8e <tLadderFilter_tick+0x23a>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24011d6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24011d6e:	ed92 5a04 	vldr	s10, [r2, #16]
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24011d72:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24011d76:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
        
        Lfloat f3 = f->c       * t2*g3;
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
24011d7a:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24011d7e:	ed92 7a08 	vldr	s14, [r2, #32]
24011d82:	ee72 2a27 	vadd.f32	s5, s4, s15
24011d86:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        Lfloat estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
24011d8a:	ee65 aa00 	vmul.f32	s21, s10, s0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24011d8e:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
24011d92:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
24011d96:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
24011d9a:	ee25 9a28 	vmul.f32	s18, s10, s17
24011d9e:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24011da2:	ee62 2a87 	vmul.f32	s5, s5, s14
24011da6:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24011daa:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
24011dae:	2300      	movs	r3, #0
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
24011db0:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24011db4:	ed9f 8a79 	vldr	s16, [pc, #484]	; 24011f9c <tLadderFilter_tick+0x248>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24011db8:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
24011dbc:	3301      	adds	r3, #1
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
24011dbe:	ee31 6a23 	vadd.f32	s12, s2, s7
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
24011dc2:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
24011dc6:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24011dc8:	ee65 5aa5 	vmul.f32	s11, s11, s11
24011dcc:	ee26 6a06 	vmul.f32	s12, s12, s12
24011dd0:	ee66 6aa6 	vmul.f32	s13, s13, s13
24011dd4:	ee22 baa5 	vmul.f32	s22, s5, s11
24011dd8:	ee26 ca22 	vmul.f32	s24, s12, s5
24011ddc:	ee72 5a25 	vadd.f32	s11, s4, s11
24011de0:	ee32 6a06 	vadd.f32	s12, s4, s12
24011de4:	ee66 baa2 	vmul.f32	s23, s13, s5
24011de8:	eecb ea25 	vdiv.f32	s29, s22, s11
24011dec:	eecc 5a06 	vdiv.f32	s11, s24, s12
24011df0:	ee72 6a26 	vadd.f32	s13, s4, s13
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
24011df4:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24011df8:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
24011dfc:	ee27 7a07 	vmul.f32	s14, s14, s14
24011e00:	ee77 eaee 	vsub.f32	s29, s15, s29
24011e04:	ee77 6ae5 	vsub.f32	s13, s15, s11
24011e08:	ee22 ba87 	vmul.f32	s22, s5, s14
24011e0c:	ee32 7a07 	vadd.f32	s14, s4, s14
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24011e10:	ee65 5a2e 	vmul.f32	s11, s10, s29
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
24011e14:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24011e18:	eecb ca07 	vdiv.f32	s25, s22, s14
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
24011e1c:	ee7e da27 	vadd.f32	s27, s28, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24011e20:	ee37 7ac6 	vsub.f32	s14, s15, s12
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24011e24:	ee35 6aa7 	vadd.f32	s12, s11, s15
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
24011e28:	ee25 da07 	vmul.f32	s26, s10, s14
        Lfloat z0 = f->c*t0 / (1.0f + f->c*t0);
24011e2c:	eec5 ba86 	vdiv.f32	s23, s11, s12
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
24011e30:	eece 5a2d 	vdiv.f32	s11, s28, s27
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
24011e34:	ee3d ca27 	vadd.f32	s24, s26, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24011e38:	ee77 caec 	vsub.f32	s25, s15, s25
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24011e3c:	ee87 fa86 	vdiv.f32	s30, s15, s12
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
24011e40:	ee8d ea0c 	vdiv.f32	s28, s26, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
24011e44:	ee25 ba2c 	vmul.f32	s22, s10, s25
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24011e48:	ee6b baa5 	vmul.f32	s23, s23, s11
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
24011e4c:	ee87 6aad 	vdiv.f32	s12, s15, s27
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
24011e50:	ee7b 5a27 	vadd.f32	s11, s22, s15
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24011e54:	ee6b baa0 	vmul.f32	s23, s23, s1
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
24011e58:	eec7 da8c 	vdiv.f32	s27, s15, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
24011e5c:	ee87 caa5 	vdiv.f32	s24, s15, s11
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24011e60:	ee6b ba8e 	vmul.f32	s23, s23, s28
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
24011e64:	ee8b ea25 	vdiv.f32	s28, s22, s11
        Lfloat estimate =
24011e68:	ee73 5a2a 	vadd.f32	s11, s6, s21
24011e6c:	ee27 ba26 	vmul.f32	s22, s14, s13
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24011e70:	ee66 6a26 	vmul.f32	s13, s12, s13
24011e74:	ee65 5a89 	vmul.f32	s11, s11, s18
24011e78:	ee2b ba06 	vmul.f32	s22, s22, s12
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
24011e7c:	ee2f 6a2e 	vmul.f32	s12, s30, s29
24011e80:	ee65 5aae 	vmul.f32	s11, s11, s29
24011e84:	ee60 ea8c 	vmul.f32	s29, s1, s24
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24011e88:	ee2c ca2c 	vmul.f32	s24, s24, s25
24011e8c:	ee65 5a8f 	vmul.f32	s11, s11, s30
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24011e90:	eef0 ca67 	vmov.f32	s25, s15
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24011e94:	ee2d 7a87 	vmul.f32	s14, s27, s14
24011e98:	eee3 5aa8 	vfma.f32	s11, s7, s17
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24011e9c:	eeeb ca8e 	vfma.f32	s25, s23, s28
24011ea0:	ee6b 5a25 	vmul.f32	s11, s22, s11
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
24011ea4:	eec9 baac 	vdiv.f32	s23, s19, s25
24011ea8:	eeed 5a04 	vfma.f32	s11, s26, s8
24011eac:	eef0 ca64 	vmov.f32	s25, s9
    Lfloat  x1 = smoothABS (x-a, 0.01f);
24011eb0:	eeb0 ba67 	vmov.f32	s22, s15
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24011eb4:	eeb0 da48 	vmov.f32	s26, s16
24011eb8:	eeed caa5 	vfma.f32	s25, s27, s11
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24011ebc:	eef0 5a4a 	vmov.f32	s11, s20
    Lfloat  x1 = smoothABS (x-a, 0.01f);
24011ec0:	eeac baae 	vfma.f32	s22, s25, s29
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24011ec4:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24011ec8:	eef0 ca48 	vmov.f32	s25, s16
24011ecc:	eeab da0b 	vfma.f32	s26, s22, s22
24011ed0:	eee5 caa5 	vfma.f32	s25, s11, s11
24011ed4:	eef1 5acd 	vsqrt.f32	s11, s26
24011ed8:	eeb1 baec 	vsqrt.f32	s22, s25
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
24011edc:	ee3b ba65 	vsub.f32	s22, s22, s11
24011ee0:	eef0 5a40 	vmov.f32	s11, s0
24011ee4:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
24011ee8:	eeb0 ba43 	vmov.f32	s22, s6
24011eec:	eea5 ba25 	vfma.f32	s22, s10, s11
24011ef0:	ee26 6a0b 	vmul.f32	s12, s12, s22
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24011ef4:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
24011ef8:	ee75 5ac6 	vsub.f32	s11, s11, s12
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24011efc:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
24011f00:	eea1 3aa5 	vfma.f32	s6, s3, s11
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24011f04:	eef0 5a44 	vmov.f32	s11, s8
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24011f08:	ee66 6a8b 	vmul.f32	s13, s13, s22
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24011f0c:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
24011f10:	ee36 6a66 	vsub.f32	s12, s12, s13
24011f14:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24011f18:	eeb0 6a64 	vmov.f32	s12, s9
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24011f1c:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24011f20:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
24011f24:	ee76 6ac7 	vsub.f32	s13, s13, s14
24011f28:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
24011f2c:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
24011f30:	ee37 7a4c 	vsub.f32	s14, s14, s24
24011f34:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
24011f38:	f47f af3e 	bne.w	24011db8 <tLadderFilter_tick+0x64>
24011f3c:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
24011f40:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
24011f44:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
24011f48:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24011f4c:	eddf 7a13 	vldr	s15, [pc, #76]	; 24011f9c <tLadderFilter_tick+0x248>
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24011f50:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24011f54:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24011f58:	eeb0 5a67 	vmov.f32	s10, s15
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24011f5c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24011f60:	eea0 5aa0 	vfma.f32	s10, s1, s1
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24011f64:	ee70 0ac6 	vsub.f32	s1, s1, s12
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24011f68:	eee0 7aa0 	vfma.f32	s15, s1, s1
24011f6c:	eeb0 7a67 	vmov.f32	s14, s15
24011f70:	eef1 7ac5 	vsqrt.f32	s15, s10
24011f74:	eeb1 5ac7 	vsqrt.f32	s10, s14
    x = x - x2;
24011f78:	ee77 7a86 	vadd.f32	s15, s15, s12
24011f7c:	ee77 7ac5 	vsub.f32	s15, s15, s10
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24011f80:	eea7 0aa5 	vfma.f32	s0, s15, s11
    return y3 * compensation;
}
24011f84:	ee20 0a0c 	vmul.f32	s0, s0, s24
24011f88:	ecbd 8b10 	vpop	{d8-d15}
24011f8c:	4770      	bx	lr
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24011f8e:	edd2 0a05 	vldr	s1, [r2, #20]
    Lfloat y3 = 0.0f;
24011f92:	ed9f ca03 	vldr	s24, [pc, #12]	; 24011fa0 <tLadderFilter_tick+0x24c>
24011f96:	e7d9      	b.n	24011f4c <tLadderFilter_tick+0x1f8>
24011f98:	3c75c28f 	.word	0x3c75c28f
24011f9c:	3c23d70a 	.word	0x3c23d70a
24011fa0:	00000000 	.word	0x00000000

24011fa4 <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
    int intVer = (int)cutoff;
24011fa4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011fa8:	4b0f      	ldr	r3, [pc, #60]	; (24011fe8 <tLadderFilter_setFreqFast+0x44>)
24011faa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tLadderFilter* f = *vf;
24011fae:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
24011fb0:	ee17 2a10 	vmov	r2, s14
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24011fb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011fb8:	ee77 7ac0 	vsub.f32	s15, s15, s0
24011fbc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24011fc0:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011fc4:	edd0 6a01 	vldr	s13, [r0, #4]
24011fc8:	ee77 7a87 	vadd.f32	s15, s15, s14
24011fcc:	ed90 7a00 	vldr	s14, [r0]
24011fd0:	ee20 0a26 	vmul.f32	s0, s0, s13
24011fd4:	eea7 0a27 	vfma.f32	s0, s14, s15
    f->c2 = 2.0f * f->c;
24011fd8:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - LfloatVer)) + (__leaf_table_filtertan[intVer+1] * LfloatVer);
24011fdc:	ed81 0a04 	vstr	s0, [r1, #16]
    f->c2 = 2.0f * f->c;
24011fe0:	edc1 7a06 	vstr	s15, [r1, #24]
}
24011fe4:	4770      	bx	lr
24011fe6:	bf00      	nop
24011fe8:	24017940 	.word	0x24017940

24011fec <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
24011fec:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
24011fee:	6804      	ldr	r4, [r0, #0]
{
24011ff0:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
24011ff4:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
24011ff8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24012008 <tLadderFilter_setQ+0x1c>
24011ffc:	f01a fe28 	bl	2402cc50 <__LEAF_clip_veneer>
24012000:	ed84 0a05 	vstr	s0, [r4, #20]
}
24012004:	bd10      	pop	{r4, pc}
24012006:	bf00      	nop
24012008:	3e4ccccd 	.word	0x3e4ccccd

2401200c <fastertanf>:
    return fResult;
}

Lfloat fastertanf(Lfloat fAngle)
{
    Lfloat fASqr = fAngle*fAngle;
2401200c:	ee60 6a00 	vmul.f32	s13, s0, s0
    Lfloat fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
24012010:	ed9f 6a06 	vldr	s12, [pc, #24]	; 2401202c <fastertanf+0x20>
24012014:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24012030 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
24012018:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
2401201c:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
24012020:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
24012024:	ee20 0a27 	vmul.f32	s0, s0, s15
24012028:	4770      	bx	lr
2401202a:	bf00      	nop
2401202c:	3e502de0 	.word	0x3e502de0
24012030:	3ea295ea 	.word	0x3ea295ea

24012034 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
Lfloat fastsqrtf(Lfloat x)
{
	union { Lfloat f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
24012034:	ee10 2a10 	vmov	r2, s0
24012038:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
2401203c:	4b0d      	ldr	r3, [pc, #52]	; (24012074 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
2401203e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
24012042:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
24012046:	ee60 7a27 	vmul.f32	s15, s0, s15
2401204a:	ee00 3a10 	vmov	s0, r3
2401204e:	ee67 7a80 	vmul.f32	s15, s15, s0
24012052:	eea0 7a67 	vfms.f32	s14, s0, s15
24012056:	ee60 7a07 	vmul.f32	s15, s0, s14
2401205a:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
2401205e:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
24012062:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
24012066:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
2401206a:	336e      	adds	r3, #110	; 0x6e
}
2401206c:	ee00 3a10 	vmov	s0, r3
24012070:	4770      	bx	lr
24012072:	bf00      	nop
24012074:	5f3759df 	.word	0x5f3759df

24012078 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
24012078:	ee10 3a10 	vmov	r3, s0
2401207c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24012080:	ee00 3a10 	vmov	s0, r3
}
24012084:	4770      	bx	lr
24012086:	bf00      	nop

24012088 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline Lfloat fasterexpf(Lfloat x) {
    x = 1.0f + (x * 0.00390625f);
24012088:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401208c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 240120b8 <fasterexpf+0x30>
24012090:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
24012094:	ee27 0aa7 	vmul.f32	s0, s15, s15
24012098:	ee20 0a00 	vmul.f32	s0, s0, s0
2401209c:	ee20 0a00 	vmul.f32	s0, s0, s0
240120a0:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
240120a4:	ee20 0a00 	vmul.f32	s0, s0, s0
240120a8:	ee20 0a00 	vmul.f32	s0, s0, s0
240120ac:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
240120b0:	ee20 0a00 	vmul.f32	s0, s0, s0
240120b4:	4770      	bx	lr
240120b6:	bf00      	nop
240120b8:	3b800000 	.word	0x3b800000

240120bc <fastPowf>:
    { 
        Lfloat d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
240120bc:	ee10 3a10 	vmov	r3, s0
240120c0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 240120e4 <fastPowf+0x28>
240120c4:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
240120c8:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
240120cc:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
240120d0:	330b      	adds	r3, #11
240120d2:	ee07 3a90 	vmov	s15, r3
240120d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240120da:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
240120de:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
240120e2:	4770      	bx	lr
240120e4:	4e7de250 	.word	0x4e7de250

240120e8 <LEAF_shaper>:
#else
Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
240120e8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24012164 <LEAF_shaper+0x7c>
240120ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
240120f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240120f4:	d406      	bmi.n	24012104 <LEAF_shaper+0x1c>
    {
        return min;
    }
    else if (val > max)
240120f6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 24012168 <LEAF_shaper+0x80>
240120fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
240120fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012102:	dd02      	ble.n	2401210a <LEAF_shaper+0x22>
24012104:	ed9f 0a19 	vldr	s0, [pc, #100]	; 2401216c <LEAF_shaper+0x84>
}
24012108:	4770      	bx	lr
    Lfloat fx = input * 2.0f;    // prescale
2401210a:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401210e:	eddf 4a18 	vldr	s9, [pc, #96]	; 24012170 <LEAF_shaper+0x88>
24012112:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
24012116:	eddf 3a17 	vldr	s7, [pc, #92]	; 24012174 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
2401211a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    xc2 = xc*xc;
2401211e:	ee20 6a00 	vmul.f32	s12, s0, s0
    c = 0.5f*fx*(3.0f - (xc2));
24012122:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24012126:	eeb6 5a08 	vmov.f32	s10, #104	; 0x3f400000  0.750
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401212a:	ee26 4a06 	vmul.f32	s8, s12, s12
2401212e:	ee66 6ac6 	vnmul.f32	s13, s13, s12
    c = 0.5f*fx*(3.0f - (xc2));
24012132:	ee37 7a46 	vsub.f32	s14, s14, s12
24012136:	ee60 7a27 	vmul.f32	s15, s0, s15
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401213a:	eee4 6a24 	vfma.f32	s13, s8, s9
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2401213e:	ee70 0a85 	vadd.f32	s1, s1, s10
24012142:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 24012178 <LEAF_shaper+0x90>
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24012146:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    c = 0.5f*fx*(3.0f - (xc2));
2401214a:	ee67 7a27 	vmul.f32	s15, s14, s15
2401214e:	ee20 0aa3 	vmul.f32	s0, s1, s7
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24012152:	eee6 7a05 	vfma.f32	s15, s12, s10
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24012156:	ee36 7aa5 	vadd.f32	s14, s13, s11
2401215a:	ee20 0a07 	vmul.f32	s0, s0, s14
    shaperOut *= 0.5f;    // post_scale
2401215e:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return max;
    }
    else
    {
        return val;
24012162:	4770      	bx	lr
24012164:	bfb504f3 	.word	0xbfb504f3
24012168:	3fb504f3 	.word	0x3fb504f3
2401216c:	00000000 	.word	0x00000000
24012170:	3c800000 	.word	0x3c800000
24012174:	3f272f05 	.word	0x3f272f05
24012178:	3d4ccccd 	.word	0x3d4ccccd

2401217c <LEAF_round>:
    rnd = fabsf(rnd);
2401217c:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
24012180:	eddf 7a06 	vldr	s15, [pc, #24]	; 2401219c <LEAF_round+0x20>
24012184:	eef4 0ae7 	vcmpe.f32	s1, s15
24012188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401218c:	d905      	bls.n	2401219a <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
2401218e:	eec0 7a20 	vdiv.f32	s15, s0, s1
24012192:	fef8 7a67 	vrinta.f32	s15, s15
24012196:	ee27 0aa0 	vmul.f32	s0, s15, s1
}
2401219a:	4770      	bx	lr
2401219c:	33d6bf95 	.word	0x33d6bf95

240121a0 <LEAF_bitwise_xor>:
    return unholy.f;
240121a0:	ee10 3a10 	vmov	r3, s0
240121a4:	4043      	eors	r3, r0
240121a6:	ee00 3a10 	vmov	s0, r3
}
240121aa:	4770      	bx	lr

240121ac <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
Lfloat LEAF_tanh(Lfloat x)
{
    
    if( x < -3.0f )
240121ac:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
240121b0:	eeb4 0ae7 	vcmpe.f32	s0, s15
240121b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240121b8:	d418      	bmi.n	240121ec <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
240121ba:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
240121be:	eeb4 0ae7 	vcmpe.f32	s0, s15
240121c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240121c6:	dd02      	ble.n	240121ce <LEAF_tanh+0x22>
        return 1.0f;
240121c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
240121cc:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
240121ce:	ee60 6a00 	vmul.f32	s13, s0, s0
240121d2:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
240121d6:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
240121da:	ee36 7aa7 	vadd.f32	s14, s13, s15
240121de:	eee6 7a86 	vfma.f32	s15, s13, s12
240121e2:	ee27 7a00 	vmul.f32	s14, s14, s0
240121e6:	ee87 0a27 	vdiv.f32	s0, s14, s15
240121ea:	4770      	bx	lr
        return -1.0f;
240121ec:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240121f0:	4770      	bx	lr
240121f2:	bf00      	nop

240121f4 <fast_tanh5>:
}

//from raphx on this post : https://www.kvraudio.com/forum/viewtopic.php?t=332930&start=30
Lfloat fast_tanh5(Lfloat x)
{
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
240121f4:	ee60 7a00 	vmul.f32	s15, s0, s0
240121f8:	ed9f 6a09 	vldr	s12, [pc, #36]	; 24012220 <fast_tanh5+0x2c>
240121fc:	eddf 6a09 	vldr	s13, [pc, #36]	; 24012224 <fast_tanh5+0x30>
	return a / sqrtf(1.0f + a * a);
24012200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24012204:	eee7 6a86 	vfma.f32	s13, s15, s12
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
24012208:	ee67 7a80 	vmul.f32	s15, s15, s0
2401220c:	eea7 0aa6 	vfma.f32	s0, s15, s13
	return a / sqrtf(1.0f + a * a);
24012210:	eea0 7a00 	vfma.f32	s14, s0, s0
24012214:	eef1 7ac7 	vsqrt.f32	s15, s14
}
24012218:	ee80 0a27 	vdiv.f32	s0, s0, s15
2401221c:	4770      	bx	lr
2401221e:	bf00      	nop
24012220:	3c217586 	.word	0x3c217586
24012224:	3e28d927 	.word	0x3e28d927

24012228 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
24012228:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
2401222a:	1e4b      	subs	r3, r1, #1
2401222c:	ee31 1a60 	vsub.f32	s2, s2, s1
    Lfloat x = start;
    for (int i = 0; i < size; i++)
24012230:	2900      	cmp	r1, #0
    Lfloat increment = (end - start) / (Lfloat)(size-1);
24012232:	ee07 3a90 	vmov	s15, r3
24012236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
2401223a:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
2401223e:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
24012242:	dd16      	ble.n	24012272 <LEAF_generate_exp+0x4a>
24012244:	4604      	mov	r4, r0
24012246:	eb00 0581 	add.w	r5, r0, r1, lsl #2
2401224a:	eeb0 8a60 	vmov.f32	s16, s1
2401224e:	eef0 8a40 	vmov.f32	s17, s0
24012252:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
24012256:	eef0 0a48 	vmov.f32	s1, s16
2401225a:	eeb0 0a68 	vmov.f32	s0, s17
2401225e:	f003 f847 	bl	240152f0 <powf>
24012262:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
24012266:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
2401226a:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
2401226e:	42a5      	cmp	r5, r4
24012270:	d1f1      	bne.n	24012256 <LEAF_generate_exp+0x2e>
    }
}
24012272:	ecbd 8b04 	vpop	{d8-d9}
24012276:	bd38      	pop	{r3, r4, r5, pc}

24012278 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
24012278:	b538      	push	{r3, r4, r5, lr}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
2401227a:	ee31 1a40 	vsub.f32	s2, s2, s0
{
2401227e:	460d      	mov	r5, r1
24012280:	4604      	mov	r4, r0
24012282:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
24012286:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
2401228a:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
2401228e:	ee81 0a29 	vdiv.f32	s0, s2, s19
24012292:	f002 fe8d 	bl	24014fb0 <logf>
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24012296:	1e6b      	subs	r3, r5, #1
    Lfloat x = 0.0000000001f;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
24012298:	2d00      	cmp	r5, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
2401229a:	ee07 3a90 	vmov	s15, r3
2401229e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240122a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240122a6:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
240122aa:	dd1e      	ble.n	240122ea <LEAF_generate_table_skew_non_sym+0x72>
240122ac:	eddf 7a10 	vldr	s15, [pc, #64]	; 240122f0 <LEAF_generate_table_skew_non_sym+0x78>
240122b0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    Lfloat x = 0.0000000001f;
240122b4:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 240122f4 <LEAF_generate_table_skew_non_sym+0x7c>
240122b8:	eeb0 9a40 	vmov.f32	s18, s0
    for (int i = 0; i < size; i++)
240122bc:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 240122f8 <LEAF_generate_table_skew_non_sym+0x80>
240122c0:	ee29 9a27 	vmul.f32	s18, s18, s15
240122c4:	e001      	b.n	240122ca <LEAF_generate_table_skew_non_sym+0x52>
    {
        proportion = expf (logf(x) / skew);
240122c6:	f002 fe73 	bl	24014fb0 <logf>
240122ca:	ee29 0a00 	vmul.f32	s0, s18, s0
240122ce:	f002 fdfb 	bl	24014ec8 <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
240122d2:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
240122d6:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
240122da:	eee9 7a80 	vfma.f32	s15, s19, s0
        proportion = expf (logf(x) / skew);
240122de:	eeb0 0a48 	vmov.f32	s0, s16
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
240122e2:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
240122e6:	42a5      	cmp	r5, r4
240122e8:	d1ed      	bne.n	240122c6 <LEAF_generate_table_skew_non_sym+0x4e>
    }
}
240122ea:	ecbd 8b06 	vpop	{d8-d10}
240122ee:	bd38      	pop	{r3, r4, r5, pc}
240122f0:	bfb8aa3b 	.word	0xbfb8aa3b
240122f4:	2edbe6ff 	.word	0x2edbe6ff
240122f8:	c1b834f1 	.word	0xc1b834f1

240122fc <LEAF_generate_atodb>:


void LEAF_generate_atodb(Lfloat* buffer, int size, Lfloat min, Lfloat max)
{
240122fc:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
240122fe:	1e4b      	subs	r3, r1, #1
24012300:	ee70 0ac0 	vsub.f32	s1, s1, s0
    Lfloat x = min;
    for (int i = 0; i < size; i++)
24012304:	2900      	cmp	r1, #0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24012306:	ee07 3a90 	vmov	s15, r3
2401230a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
2401230e:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24012312:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
24012316:	dd12      	ble.n	2401233e <LEAF_generate_atodb+0x42>
24012318:	4604      	mov	r4, r0
2401231a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
2401231e:	eeb0 8a40 	vmov.f32	s16, s0
}


Lfloat atodb(Lfloat a)
{
    return 20.0f*log10f(a);
24012322:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
24012326:	eeb0 0a48 	vmov.f32	s0, s16
2401232a:	f003 fa57 	bl	240157dc <log10f>
2401232e:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
24012332:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
24012336:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
2401233a:	42a5      	cmp	r5, r4
2401233c:	d1f3      	bne.n	24012326 <LEAF_generate_atodb+0x2a>
}
2401233e:	ecbd 8b04 	vpop	{d8-d9}
24012342:	bd38      	pop	{r3, r4, r5, pc}

24012344 <LEAF_generate_dbtoa>:
{
24012344:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
24012346:	1e4b      	subs	r3, r1, #1
24012348:	ee70 0ac0 	vsub.f32	s1, s1, s0
    for (int i = 0; i < size; i++)
2401234c:	2900      	cmp	r1, #0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
2401234e:	ee07 3a90 	vmov	s15, r3
24012352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24012356:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
2401235a:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
2401235e:	dd14      	ble.n	2401238a <LEAF_generate_dbtoa+0x46>
24012360:	4604      	mov	r4, r0
	return 20.0f*log10f_fast(a);
}

Lfloat dbtoa(Lfloat db)
{
    return powf(10.0f, db * 0.05f);
24012362:	eddf 9a0b 	vldr	s19, [pc, #44]	; 24012390 <LEAF_generate_dbtoa+0x4c>
24012366:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 24012394 <LEAF_generate_dbtoa+0x50>
2401236a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
2401236e:	eeb0 8a40 	vmov.f32	s16, s0
24012372:	ee28 0a29 	vmul.f32	s0, s16, s19
        x += increment;
24012376:	ee38 8a28 	vadd.f32	s16, s16, s17
    return powf(10.0f, db * 0.05f);
2401237a:	ee20 0a09 	vmul.f32	s0, s0, s18
2401237e:	f002 fda3 	bl	24014ec8 <expf>
        buffer[i] = dbtoa(x);
24012382:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
24012386:	42a5      	cmp	r5, r4
24012388:	d1f3      	bne.n	24012372 <LEAF_generate_dbtoa+0x2e>
}
2401238a:	ecbd 8b04 	vpop	{d8-d9}
2401238e:	bd38      	pop	{r3, r4, r5, pc}
24012390:	3d4ccccd 	.word	0x3d4ccccd
24012394:	40135d8e 	.word	0x40135d8e

24012398 <LEAF_generate_mtof>:
{
24012398:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
2401239a:	1e4b      	subs	r3, r1, #1
2401239c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (int i = 0; i < size; i++)
240123a0:	2900      	cmp	r1, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
240123a2:	ee07 3a90 	vmov	s15, r3
240123a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
240123aa:	ed2d 8b0a 	vpush	{d8-d12}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
240123ae:	eec7 aa27 	vdiv.f32	s21, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
240123b2:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
240123b6:	dd29      	ble.n	2401240c <LEAF_generate_mtof+0x74>
    Lfloat x = 0.0f;
240123b8:	ed9f 9a19 	vldr	s18, [pc, #100]	; 24012420 <LEAF_generate_mtof+0x88>
240123bc:	eef0 9a40 	vmov.f32	s19, s0
240123c0:	4604      	mov	r4, r0
    if (f <= -1500.0f) return(0);
240123c2:	eddf 8a18 	vldr	s17, [pc, #96]	; 24012424 <LEAF_generate_mtof+0x8c>
240123c6:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
240123ca:	ed9f 8a17 	vldr	s16, [pc, #92]	; 24012428 <LEAF_generate_mtof+0x90>
240123ce:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
240123d2:	ed9f ca16 	vldr	s24, [pc, #88]	; 2401242c <LEAF_generate_mtof+0x94>
240123d6:	eddf ba16 	vldr	s23, [pc, #88]	; 24012430 <LEAF_generate_mtof+0x98>
        Lfloat midiVal = (x * scalar) + startMIDI;
240123da:	eeb0 0a69 	vmov.f32	s0, s19
240123de:	eeaa 0a09 	vfma.f32	s0, s20, s18
Lfloat mtof(Lfloat f)
240123e2:	e006      	b.n	240123f2 <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
240123e4:	eeb4 0ac8 	vcmpe.f32	s0, s16
240123e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240123ec:	dd11      	ble.n	24012412 <LEAF_generate_mtof+0x7a>
240123ee:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
240123f2:	eeb4 0ae8 	vcmpe.f32	s0, s17
240123f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240123fa:	d8f3      	bhi.n	240123e4 <LEAF_generate_mtof+0x4c>
240123fc:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
24012400:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24012404:	42ac      	cmp	r4, r5
        x += increment;
24012406:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
2401240a:	d1e6      	bne.n	240123da <LEAF_generate_mtof+0x42>
}
2401240c:	ecbd 8b0a 	vpop	{d8-d12}
24012410:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
24012412:	ee20 0a0c 	vmul.f32	s0, s0, s24
24012416:	f002 fd57 	bl	24014ec8 <expf>
2401241a:	ee60 7a2b 	vmul.f32	s15, s0, s23
2401241e:	e7ef      	b.n	24012400 <LEAF_generate_mtof+0x68>
24012420:	00000000 	.word	0x00000000
24012424:	c4bb8000 	.word	0xc4bb8000
24012428:	44bb6000 	.word	0x44bb6000
2401242c:	3d6c9820 	.word	0x3d6c9820
24012430:	4102d013 	.word	0x4102d013

24012434 <LEAF_poly_blep>:
    if (t < dt) {
24012434:	eeb4 0ae0 	vcmpe.f32	s0, s1
24012438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401243c:	d418      	bmi.n	24012470 <LEAF_poly_blep+0x3c>
    else if (t > 1.0f - dt) {
2401243e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24012442:	ee77 7a60 	vsub.f32	s15, s14, s1
24012446:	eef4 7ac0 	vcmpe.f32	s15, s0
2401244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401244e:	d50c      	bpl.n	2401246a <LEAF_poly_blep+0x36>
        t = (t - 1.0f) / dt;
24012450:	ee70 7a47 	vsub.f32	s15, s0, s14
        return t*t + t+t + 1.0f;
24012454:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
        t = (t - 1.0f) / dt;
24012458:	ee87 6aa0 	vdiv.f32	s12, s15, s1
        return t*t + t+t + 1.0f;
2401245c:	ee76 7a26 	vadd.f32	s15, s12, s13
24012460:	eea7 7a86 	vfma.f32	s14, s15, s12
24012464:	eeb0 0a47 	vmov.f32	s0, s14
24012468:	4770      	bx	lr
    else return 0.0f;
2401246a:	ed9f 0a07 	vldr	s0, [pc, #28]	; 24012488 <LEAF_poly_blep+0x54>
}
2401246e:	4770      	bx	lr
        t /= dt;
24012470:	ee80 7a20 	vdiv.f32	s14, s0, s1
        return t+t - t*t - 1.0f;
24012474:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24012478:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401247c:	ee77 7ac7 	vsub.f32	s15, s15, s14
24012480:	eea7 0a87 	vfma.f32	s0, s15, s14
24012484:	4770      	bx	lr
24012486:	bf00      	nop
24012488:	00000000 	.word	0x00000000

2401248c <LEAF_poly_blamp>:
    if ((0 <= t) && (t < (2.0f * dt)))
2401248c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24012490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012494:	db2c      	blt.n	240124f0 <LEAF_poly_blamp+0x64>
24012496:	ee70 7aa0 	vadd.f32	s15, s1, s1
2401249a:	eef4 7ac0 	vcmpe.f32	s15, s0
2401249e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240124a2:	dd25      	ble.n	240124f0 <LEAF_poly_blamp+0x64>
        Lfloat x = (t / dt);
240124a4:	eec0 6a20 	vdiv.f32	s13, s0, s1
        Lfloat u = 2.0f - x;
240124a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
        if (t < dt)
240124ac:	eeb4 0ae0 	vcmpe.f32	s0, s1
240124b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        Lfloat u = 2.0f - x;
240124b4:	ee37 7a66 	vsub.f32	s14, s14, s13
        Lfloat u2 = u * u;
240124b8:	ee67 7a07 	vmul.f32	s15, s14, s14
        u *= u2 * u2;
240124bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
240124c0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (t < dt)
240124c4:	d517      	bpl.n	240124f6 <LEAF_poly_blamp+0x6a>
        	Lfloat v = 1.0f - x;
240124c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    return y * dt / 0.066666666666667f; // divide by 15
240124ca:	eddf 5a0e 	vldr	s11, [pc, #56]	; 24012504 <LEAF_poly_blamp+0x78>
240124ce:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
240124d2:	ee60 0aa5 	vmul.f32	s1, s1, s11
        	Lfloat v = 1.0f - x;
240124d6:	ee37 7a66 	vsub.f32	s14, s14, s13
        	Lfloat v2 = v * v;
240124da:	ee67 6a07 	vmul.f32	s13, s14, s14
            y += 4.0f * v;
240124de:	ee27 7a06 	vmul.f32	s14, s14, s12
240124e2:	ee27 7a26 	vmul.f32	s14, s14, s13
240124e6:	eed6 7a87 	vfnms.f32	s15, s13, s14
    return y * dt / 0.066666666666667f; // divide by 15
240124ea:	ee20 0aa7 	vmul.f32	s0, s1, s15
240124ee:	4770      	bx	lr
240124f0:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24012508 <LEAF_poly_blamp+0x7c>
}
240124f4:	4770      	bx	lr
    return y * dt / 0.066666666666667f; // divide by 15
240124f6:	ed9f 7a03 	vldr	s14, [pc, #12]	; 24012504 <LEAF_poly_blamp+0x78>
240124fa:	ee60 0a87 	vmul.f32	s1, s1, s14
240124fe:	ee27 0ae0 	vnmul.f32	s0, s15, s1
24012502:	4770      	bx	lr
24012504:	416fffff 	.word	0x416fffff
24012508:	00000000 	.word	0x00000000

2401250c <LEAF_interpolate_hermite_x>:
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
2401250c:	ee71 1ac0 	vsub.f32	s3, s3, s0
    Lfloat c1 = 0.5f * (yy2 - yy0);
24012510:	ee31 6a40 	vsub.f32	s12, s2, s0
24012514:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24012518:	ee71 1aa0 	vadd.f32	s3, s3, s1
2401251c:	eef0 5a60 	vmov.f32	s11, s1
24012520:	ee30 7ac1 	vsub.f32	s14, s1, s2
24012524:	ee31 1ac1 	vsub.f32	s2, s3, s2
24012528:	eed6 5a26 	vfnms.f32	s11, s12, s13
2401252c:	eea1 7a26 	vfma.f32	s14, s2, s13
    Lfloat c2 = y0my1 + c1 - c3;
24012530:	ee70 7a25 	vadd.f32	s15, s0, s11
24012534:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
24012538:	eee7 7a02 	vfma.f32	s15, s14, s4
2401253c:	ee67 7a82 	vmul.f32	s15, s15, s4
24012540:	eee6 7a26 	vfma.f32	s15, s12, s13
}
24012544:	eee7 0a82 	vfma.f32	s1, s15, s4
24012548:	eeb0 0a60 	vmov.f32	s0, s1
2401254c:	4770      	bx	lr
2401254e:	bf00      	nop

24012550 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
24012550:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012554:	ed9f 7a07 	vldr	s14, [pc, #28]	; 24012574 <LEAF_interpolation_linear+0x24>
24012558:	fe81 1a67 	vminnm.f32	s2, s2, s15
2401255c:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    Lfloat omAlpha = 1.0f - alpha;
24012560:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
24012564:	ee61 0a20 	vmul.f32	s1, s2, s1
}
24012568:	eee7 0a80 	vfma.f32	s1, s15, s0
2401256c:	eeb0 0a60 	vmov.f32	s0, s1
24012570:	4770      	bx	lr
24012572:	bf00      	nop
24012574:	00000000 	.word	0x00000000

24012578 <mtof>:
    if (f <= -1500.0f) return(0);
24012578:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 240125b8 <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
2401257c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 240125bc <mtof+0x44>
24012580:	e006      	b.n	24012590 <mtof+0x18>
24012582:	eeb4 0ae7 	vcmpe.f32	s0, s15
24012586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401258a:	dd09      	ble.n	240125a0 <mtof+0x28>
2401258c:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
24012590:	eeb4 0ac7 	vcmpe.f32	s0, s14
24012594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012598:	d8f3      	bhi.n	24012582 <mtof+0xa>
2401259a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 240125c0 <mtof+0x48>
}
2401259e:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
240125a0:	eddf 7a08 	vldr	s15, [pc, #32]	; 240125c4 <mtof+0x4c>
{
240125a4:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
240125a6:	ee20 0a27 	vmul.f32	s0, s0, s15
240125aa:	f002 fc8d 	bl	24014ec8 <expf>
240125ae:	eddf 7a06 	vldr	s15, [pc, #24]	; 240125c8 <mtof+0x50>
240125b2:	ee20 0a27 	vmul.f32	s0, s0, s15
}
240125b6:	bd08      	pop	{r3, pc}
240125b8:	c4bb8000 	.word	0xc4bb8000
240125bc:	44bb6000 	.word	0x44bb6000
240125c0:	00000000 	.word	0x00000000
240125c4:	3d6c9820 	.word	0x3d6c9820
240125c8:	4102d013 	.word	0x4102d013

240125cc <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
240125cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240125d0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24012604 <faster_mtof+0x38>
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
240125d4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24012608 <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
240125d8:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
240125dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
240125e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
240125e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
240125e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
240125ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
240125f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
240125f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
240125f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
240125fc:	ee27 0a87 	vmul.f32	s0, s15, s14
24012600:	4770      	bx	lr
24012602:	bf00      	nop
24012604:	396c9820 	.word	0x396c9820
24012608:	4102d013 	.word	0x4102d013

2401260c <fasteratodb>:
{
2401260c:	b500      	push	{lr}
2401260e:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
24012610:	eeb0 0ac0 	vabs.f32	s0, s0
24012614:	a801      	add	r0, sp, #4
24012616:	f002 fc31 	bl	24014e7c <frexpf>
    Y += -4.11852516267426f;
2401261a:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 24012654 <fasteratodb+0x48>
2401261e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 24012658 <fasteratodb+0x4c>
    Y += 6.02197014179219f;
24012622:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 2401265c <fasteratodb+0x50>
    Y += -4.11852516267426f;
24012626:	eee0 7a06 	vfma.f32	s15, s0, s12
    Y += E;
2401262a:	eddf 5a0d 	vldr	s11, [pc, #52]	; 24012660 <fasteratodb+0x54>
	return 20.0f*log10f_fast(a);
2401262e:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 24012664 <fasteratodb+0x58>
    Y += -4.11852516267426f;
24012632:	eef0 6a67 	vmov.f32	s13, s15
    Y += E;
24012636:	eddd 7a01 	vldr	s15, [sp, #4]
2401263a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    Y += 6.02197014179219f;
2401263e:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
24012642:	ee77 7ae5 	vsub.f32	s15, s15, s11
24012646:	eee0 7a07 	vfma.f32	s15, s0, s14
}
2401264a:	ee27 0a86 	vmul.f32	s0, s15, s12
2401264e:	b003      	add	sp, #12
24012650:	f85d fb04 	ldr.w	pc, [sp], #4
24012654:	3f9da1a8 	.word	0x3f9da1a8
24012658:	c083caf5 	.word	0xc083caf5
2401265c:	40c0b3fb 	.word	0x40c0b3fb
24012660:	404892e0 	.word	0x404892e0
24012664:	40c0a8c2 	.word	0x40c0a8c2

24012668 <fastdbtoa>:


Lfloat fastdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
24012668:	eddf 7a02 	vldr	s15, [pc, #8]	; 24012674 <fastdbtoa+0xc>
2401266c:	ee20 0a27 	vmul.f32	s0, s0, s15
24012670:	f002 bc2a 	b.w	24014ec8 <expf>
24012674:	3debc8e3 	.word	0x3debc8e3

24012678 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
24012678:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401267c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 240126a8 <fasterdbtoa+0x30>
24012680:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
24012684:	ee27 0aa7 	vmul.f32	s0, s15, s15
24012688:	ee20 0a00 	vmul.f32	s0, s0, s0
2401268c:	ee20 0a00 	vmul.f32	s0, s0, s0
24012690:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
24012694:	ee20 0a00 	vmul.f32	s0, s0, s0
24012698:	ee20 0a00 	vmul.f32	s0, s0, s0
2401269c:	ee20 0a00 	vmul.f32	s0, s0, s0

Lfloat fasterdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
240126a0:	ee20 0a00 	vmul.f32	s0, s0, s0
240126a4:	4770      	bx	lr
240126a6:	bf00      	nop
240126a8:	39ebc8e3 	.word	0x39ebc8e3

240126ac <maximum>:


Lfloat maximum (Lfloat num1, Lfloat num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
240126ac:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
240126b0:	4770      	bx	lr
240126b2:	bf00      	nop

240126b4 <minimum>:

Lfloat minimum (Lfloat num1, Lfloat num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
240126b4:	fe80 0ac0 	vminnm.f32	s0, s1, s0
240126b8:	4770      	bx	lr
240126ba:	bf00      	nop

240126bc <leaf_pool_init>:
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
}


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
240126bc:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
240126be:	6a03      	ldr	r3, [r0, #32]
240126c0:	2510      	movs	r5, #16
    pool->usize  = 0;
240126c2:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
240126c4:	635d      	str	r5, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
240126c6:	6a03      	ldr	r3, [r0, #32]
    pool->usize  = 0;
240126c8:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    if (size < pool->leaf->header_size)
240126cc:	6b5d      	ldr	r5, [r3, #52]	; 0x34
240126ce:	42aa      	cmp	r2, r5
240126d0:	bf38      	it	cc
240126d2:	462a      	movcc	r2, r5
    pool->msize  = size;
240126d4:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240126d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240126d8:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
240126da:	440b      	add	r3, r1
240126dc:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
240126de:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
240126e2:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
240126e4:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
240126e8:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
240126ea:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
240126ec:	6183      	str	r3, [r0, #24]
}
240126ee:	4770      	bx	lr

240126f0 <mpool_alloc>:
{
240126f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
240126f2:	684a      	ldr	r2, [r1, #4]
{
240126f4:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
240126f6:	6c93      	ldr	r3, [r2, #72]	; 0x48
240126f8:	3301      	adds	r3, #1
240126fa:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
240126fc:	694b      	ldr	r3, [r1, #20]
240126fe:	2b00      	cmp	r3, #0
24012700:	d04a      	beq.n	24012798 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24012702:	1dc4      	adds	r4, r0, #7
24012704:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24012708:	e002      	b.n	24012710 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
2401270a:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
2401270c:	2b00      	cmp	r3, #0
2401270e:	d043      	beq.n	24012798 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
24012710:	68da      	ldr	r2, [r3, #12]
24012712:	42a2      	cmp	r2, r4
24012714:	d3f9      	bcc.n	2401270a <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
24012716:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24012718:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
2401271a:	f8dc 1004 	ldr.w	r1, [ip, #4]
2401271e:	6b49      	ldr	r1, [r1, #52]	; 0x34
24012720:	4281      	cmp	r1, r0
24012722:	d246      	bcs.n	240127b2 <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24012724:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24012728:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
2401272a:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
2401272c:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
2401272e:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24012730:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
24012732:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
24012736:	4429      	add	r1, r5
24012738:	5111      	str	r1, [r2, r4]
    node->size = size;
2401273a:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
2401273c:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24012740:	f8dc 2014 	ldr.w	r2, [ip, #20]
24012744:	429a      	cmp	r2, r3
        pool->head = new_node;
24012746:	bf08      	it	eq
24012748:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
2401274c:	685a      	ldr	r2, [r3, #4]
2401274e:	b10a      	cbz	r2, 24012754 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
24012750:	6899      	ldr	r1, [r3, #8]
24012752:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
24012754:	689a      	ldr	r2, [r3, #8]
24012756:	b10a      	cbz	r2, 2401275c <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
24012758:	6859      	ldr	r1, [r3, #4]
2401275a:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
2401275c:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
2401275e:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
24012760:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24012764:	f8dc 1004 	ldr.w	r1, [ip, #4]
24012768:	f8dc 200c 	ldr.w	r2, [ip, #12]
2401276c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
2401276e:	4422      	add	r2, r4
24012770:	4402      	add	r2, r0
24012772:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
24012776:	694a      	ldr	r2, [r1, #20]
24012778:	42aa      	cmp	r2, r5
2401277a:	dd0b      	ble.n	24012794 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
2401277c:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
2401277e:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24012780:	b14a      	cbz	r2, 24012796 <mpool_alloc+0xa6>
24012782:	1e41      	subs	r1, r0, #1
24012784:	460a      	mov	r2, r1
24012786:	f801 5f01 	strb.w	r5, [r1, #1]!
2401278a:	68dc      	ldr	r4, [r3, #12]
2401278c:	3202      	adds	r2, #2
2401278e:	1a12      	subs	r2, r2, r0
24012790:	42a2      	cmp	r2, r4
24012792:	d3f7      	bcc.n	24012784 <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
24012794:	6818      	ldr	r0, [r3, #0]
}
24012796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
24012798:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
2401279c:	1a9b      	subs	r3, r3, r2
2401279e:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
240127a0:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
240127a4:	bf8c      	ite	hi
240127a6:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
240127a8:	2100      	movls	r1, #0
240127aa:	f001 fe67 	bl	2401447c <LEAF_internalErrorCallback>
        return NULL;
240127ae:	2000      	movs	r0, #0
}
240127b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
240127b2:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
240127b4:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
240127b6:	e7c3      	b.n	24012740 <mpool_alloc+0x50>

240127b8 <mpool_calloc>:
{
240127b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
240127ba:	684a      	ldr	r2, [r1, #4]
{
240127bc:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
240127be:	6c93      	ldr	r3, [r2, #72]	; 0x48
240127c0:	3301      	adds	r3, #1
240127c2:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
240127c4:	694b      	ldr	r3, [r1, #20]
240127c6:	2b00      	cmp	r3, #0
240127c8:	d044      	beq.n	24012854 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
240127ca:	1dc4      	adds	r4, r0, #7
240127cc:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
240127d0:	e002      	b.n	240127d8 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
240127d2:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
240127d4:	2b00      	cmp	r3, #0
240127d6:	d03d      	beq.n	24012854 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
240127d8:	68da      	ldr	r2, [r3, #12]
240127da:	42a2      	cmp	r2, r4
240127dc:	d3f9      	bcc.n	240127d2 <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
240127de:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
240127e0:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
240127e2:	f8dc 1004 	ldr.w	r1, [ip, #4]
240127e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
240127e8:	4281      	cmp	r1, r0
240127ea:	d240      	bcs.n	2401286e <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
240127ec:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
240127f0:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
240127f2:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
240127f4:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
240127f6:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
240127f8:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
240127fa:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
240127fe:	4429      	add	r1, r5
24012800:	5111      	str	r1, [r2, r4]
    node->size = size;
24012802:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
24012804:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24012808:	f8dc 2014 	ldr.w	r2, [ip, #20]
2401280c:	429a      	cmp	r2, r3
        pool->head = new_node;
2401280e:	bf08      	it	eq
24012810:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
24012814:	685a      	ldr	r2, [r3, #4]
24012816:	b10a      	cbz	r2, 2401281c <mpool_calloc+0x64>
        node->next->prev = node->prev;
24012818:	6899      	ldr	r1, [r3, #8]
2401281a:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
2401281c:	689a      	ldr	r2, [r3, #8]
2401281e:	b10a      	cbz	r2, 24012824 <mpool_calloc+0x6c>
        node->prev->next = node->next;
24012820:	6859      	ldr	r1, [r3, #4]
24012822:	6051      	str	r1, [r2, #4]
    node->next = NULL;
24012824:	2200      	movs	r2, #0
    node->prev = NULL;
24012826:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
2401282a:	f8dc 1004 	ldr.w	r1, [ip, #4]
2401282e:	f8dc 000c 	ldr.w	r0, [ip, #12]
24012832:	6b49      	ldr	r1, [r1, #52]	; 0x34
24012834:	4401      	add	r1, r0
24012836:	68d8      	ldr	r0, [r3, #12]
24012838:	4401      	add	r1, r0
2401283a:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
2401283e:	68d9      	ldr	r1, [r3, #12]
24012840:	b131      	cbz	r1, 24012850 <mpool_calloc+0x98>
24012842:	4610      	mov	r0, r2
24012844:	6819      	ldr	r1, [r3, #0]
24012846:	5488      	strb	r0, [r1, r2]
24012848:	3201      	adds	r2, #1
2401284a:	68d9      	ldr	r1, [r3, #12]
2401284c:	4291      	cmp	r1, r2
2401284e:	d8f9      	bhi.n	24012844 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
24012850:	6818      	ldr	r0, [r3, #0]
}
24012852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
24012854:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
24012858:	1a9b      	subs	r3, r3, r2
2401285a:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
2401285c:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24012860:	bf8c      	ite	hi
24012862:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24012864:	2100      	movls	r1, #0
24012866:	f001 fe09 	bl	2401447c <LEAF_internalErrorCallback>
        return NULL;
2401286a:	2000      	movs	r0, #0
}
2401286c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
2401286e:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
24012870:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
24012872:	e7c9      	b.n	24012808 <mpool_calloc+0x50>

24012874 <mpool_free>:
{
24012874:	b470      	push	{r4, r5, r6}
    pool->leaf->freeCount++;
24012876:	684a      	ldr	r2, [r1, #4]
24012878:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
2401287a:	3301      	adds	r3, #1
2401287c:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
2401287e:	684e      	ldr	r6, [r1, #4]
    pool->usize -= pool->leaf->header_size + freed_node->size;
24012880:	68cb      	ldr	r3, [r1, #12]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
24012882:	6b72      	ldr	r2, [r6, #52]	; 0x34
24012884:	1a84      	subs	r4, r0, r2
    pool->usize -= pool->leaf->header_size + freed_node->size;
24012886:	1a9b      	subs	r3, r3, r2
24012888:	68e2      	ldr	r2, [r4, #12]
2401288a:	1a9a      	subs	r2, r3, r2
    mpool_node_t* other_node = pool->head;
2401288c:	694b      	ldr	r3, [r1, #20]
    pool->usize -= pool->leaf->header_size + freed_node->size;
2401288e:	60ca      	str	r2, [r1, #12]
    while (other_node != NULL)
24012890:	2b00      	cmp	r3, #0
24012892:	d051      	beq.n	24012938 <mpool_free+0xc4>
        if ((long) other_node < (long) pool->mpool ||
24012894:	688a      	ldr	r2, [r1, #8]
    node->next = NULL;
24012896:	2000      	movs	r0, #0
        if ((long) other_node < (long) pool->mpool ||
24012898:	429a      	cmp	r2, r3
2401289a:	dc17      	bgt.n	240128cc <mpool_free+0x58>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
2401289c:	690d      	ldr	r5, [r1, #16]
2401289e:	442a      	add	r2, r5
        if ((long) other_node < (long) pool->mpool ||
240128a0:	429a      	cmp	r2, r3
240128a2:	d913      	bls.n	240128cc <mpool_free+0x58>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
240128a4:	6b72      	ldr	r2, [r6, #52]	; 0x34
240128a6:	68e6      	ldr	r6, [r4, #12]
        next_node = other_node->next;
240128a8:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
240128aa:	eb02 0c06 	add.w	ip, r2, r6
240128ae:	eb0c 0604 	add.w	r6, ip, r4
240128b2:	42b3      	cmp	r3, r6
240128b4:	d029      	beq.n	2401290a <mpool_free+0x96>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
240128b6:	68de      	ldr	r6, [r3, #12]
240128b8:	441a      	add	r2, r3
240128ba:	4432      	add	r2, r6
240128bc:	4294      	cmp	r4, r2
240128be:	d00a      	beq.n	240128d6 <mpool_free+0x62>
    while (other_node != NULL)
240128c0:	b1e5      	cbz	r5, 240128fc <mpool_free+0x88>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
240128c2:	462b      	mov	r3, r5
        if ((long) other_node < (long) pool->mpool ||
240128c4:	688a      	ldr	r2, [r1, #8]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
240128c6:	684e      	ldr	r6, [r1, #4]
        if ((long) other_node < (long) pool->mpool ||
240128c8:	429a      	cmp	r2, r3
240128ca:	dde7      	ble.n	2401289c <mpool_free+0x28>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
240128cc:	4630      	mov	r0, r6
240128ce:	2102      	movs	r1, #2
}
240128d0:	bc70      	pop	{r4, r5, r6}
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
240128d2:	f001 bdd3 	b.w	2401447c <LEAF_internalErrorCallback>
            other_node->size += pool->leaf->header_size + freed_node->size;
240128d6:	4466      	add	r6, ip
240128d8:	60de      	str	r6, [r3, #12]
            if (other_node != pool->head)
240128da:	694a      	ldr	r2, [r1, #20]
240128dc:	429a      	cmp	r2, r3
240128de:	d028      	beq.n	24012932 <mpool_free+0xbe>
    if (node->next != NULL)
240128e0:	b10d      	cbz	r5, 240128e6 <mpool_free+0x72>
        node->next->prev = node->prev;
240128e2:	689a      	ldr	r2, [r3, #8]
240128e4:	60aa      	str	r2, [r5, #8]
    if (node->prev != NULL)
240128e6:	689a      	ldr	r2, [r3, #8]
240128e8:	b10a      	cbz	r2, 240128ee <mpool_free+0x7a>
        node->prev->next = node->next;
240128ea:	685c      	ldr	r4, [r3, #4]
240128ec:	6054      	str	r4, [r2, #4]
    node->next = NULL;
240128ee:	461c      	mov	r4, r3
    node->prev = NULL;
240128f0:	e9c3 0001 	strd	r0, r0, [r3, #4]
                other_node->next = pool->head;
240128f4:	694a      	ldr	r2, [r1, #20]
240128f6:	605a      	str	r2, [r3, #4]
    while (other_node != NULL)
240128f8:	2d00      	cmp	r5, #0
240128fa:	d1e2      	bne.n	240128c2 <mpool_free+0x4e>
    freed_node->next = pool->head;
240128fc:	694b      	ldr	r3, [r1, #20]
240128fe:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
24012900:	b103      	cbz	r3, 24012904 <mpool_free+0x90>
24012902:	609c      	str	r4, [r3, #8]
    pool->head = freed_node;
24012904:	614c      	str	r4, [r1, #20]
}
24012906:	bc70      	pop	{r4, r5, r6}
24012908:	4770      	bx	lr
            freed_node->size += pool->leaf->header_size + other_node->size;
2401290a:	68da      	ldr	r2, [r3, #12]
2401290c:	4462      	add	r2, ip
2401290e:	60e2      	str	r2, [r4, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
24012910:	694a      	ldr	r2, [r1, #20]
24012912:	429a      	cmp	r2, r3
24012914:	d00a      	beq.n	2401292c <mpool_free+0xb8>
    if (node->next != NULL)
24012916:	685a      	ldr	r2, [r3, #4]
24012918:	b10a      	cbz	r2, 2401291e <mpool_free+0xaa>
        node->next->prev = node->prev;
2401291a:	689e      	ldr	r6, [r3, #8]
2401291c:	6096      	str	r6, [r2, #8]
    if (node->prev != NULL)
2401291e:	689a      	ldr	r2, [r3, #8]
24012920:	b10a      	cbz	r2, 24012926 <mpool_free+0xb2>
        node->prev->next = node->next;
24012922:	685e      	ldr	r6, [r3, #4]
24012924:	6056      	str	r6, [r2, #4]
    node->prev = NULL;
24012926:	e9c3 0001 	strd	r0, r0, [r3, #4]
}
2401292a:	e7c9      	b.n	240128c0 <mpool_free+0x4c>
            if (other_node == pool->head) pool->head = pool->head->next;
2401292c:	685a      	ldr	r2, [r3, #4]
2401292e:	614a      	str	r2, [r1, #20]
24012930:	e7f1      	b.n	24012916 <mpool_free+0xa2>
                pool->head = pool->head->next;
24012932:	461c      	mov	r4, r3
24012934:	614d      	str	r5, [r1, #20]
                freed_node = other_node;
24012936:	e7c3      	b.n	240128c0 <mpool_free+0x4c>
    freed_node->next = pool->head;
24012938:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
2401293a:	e7e3      	b.n	24012904 <mpool_free+0x90>

2401293c <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
2401293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
2401293e:	699f      	ldr	r7, [r3, #24]
{
24012940:	4606      	mov	r6, r0
24012942:	460c      	mov	r4, r1
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24012944:	2018      	movs	r0, #24
24012946:	4639      	mov	r1, r7
{
24012948:	4615      	mov	r5, r2
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
2401294a:	f7ff fed1 	bl	240126f0 <mpool_alloc>
2401294e:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
24012950:	687b      	ldr	r3, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24012952:	2210      	movs	r2, #16
    pool->usize  = 0;
24012954:	2100      	movs	r1, #0
    m->leaf = mm->leaf;
24012956:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24012958:	635a      	str	r2, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
2401295a:	6843      	ldr	r3, [r0, #4]
    pool->usize  = 0;
2401295c:	e9c0 4102 	strd	r4, r1, [r0, #8]
    if (size < pool->leaf->header_size)
24012960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24012962:	42aa      	cmp	r2, r5
24012964:	bf38      	it	cc
24012966:	462a      	movcc	r2, r5
    pool->msize  = size;
24012968:	6102      	str	r2, [r0, #16]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
2401296a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2401296c:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
2401296e:	4423      	add	r3, r4
    node->prev = prev;
24012970:	e9c4 1101 	strd	r1, r1, [r4, #4]
    node->pool = block_location + header_size;
24012974:	6023      	str	r3, [r4, #0]
    node->size = size;
24012976:	60e2      	str	r2, [r4, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24012978:	6144      	str	r4, [r0, #20]
}
2401297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

2401297c <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
2401297c:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
2401297e:	698c      	ldr	r4, [r1, #24]
{
24012980:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24012982:	2018      	movs	r0, #24
24012984:	4621      	mov	r1, r4
24012986:	f7ff feb3 	bl	240126f0 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
2401298a:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
2401298c:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
2401298e:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
24012992:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24012994:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24012996:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240129b0 <tCycle_init+0x34>
    c->phase    =  0;
2401299a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
2401299e:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
240129a2:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240129a4:	ee67 7a87 	vmul.f32	s15, s15, s14
240129a8:	edc0 7a04 	vstr	s15, [r0, #16]
}
240129ac:	bd38      	pop	{r3, r4, r5, pc}
240129ae:	bf00      	nop
240129b0:	4f800000 	.word	0x4f800000

240129b4 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
240129b4:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
240129b6:	4910      	ldr	r1, [pc, #64]	; (240129f8 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240129b8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 240129fc <tCycle_tick+0x48>
    c->phase += c->inc;
240129bc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
240129c0:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
240129c2:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
240129c4:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
240129c6:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
240129ca:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
240129cc:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
240129d0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
240129d4:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240129d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
240129da:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
240129de:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
240129e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240129e4:	ee67 7a87 	vmul.f32	s15, s15, s14
240129e8:	ed91 7a00 	vldr	s14, [r1]
240129ec:	ee37 7a40 	vsub.f32	s14, s14, s0
}
240129f0:	eea7 0a27 	vfma.f32	s0, s14, s15
240129f4:	4770      	bx	lr
240129f6:	bf00      	nop
240129f8:	2401b9c0 	.word	0x2401b9c0
240129fc:	35000004 	.word	0x35000004

24012a00 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
24012a00:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24012a02:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
24012a06:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24012a0a:	ee20 0a27 	vmul.f32	s0, s0, s15
24012a0e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24012a12:	ed83 0a02 	vstr	s0, [r3, #8]
}
24012a16:	4770      	bx	lr

24012a18 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
24012a18:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
24012a1c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24012a38 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
24012a20:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24012a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24012a26:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24012a2a:	ee20 0a07 	vmul.f32	s0, s0, s14
24012a2e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24012a32:	ed83 0a01 	vstr	s0, [r3, #4]
}
24012a36:	4770      	bx	lr
24012a38:	4f800000 	.word	0x4f800000

24012a3c <tPBTriangle_init>:

//==============================================================================

/* tTri: Anti-aliased Triangle waveform. */
void    tPBTriangle_init          (tPBTriangle* const osc, LEAF* const leaf)
{
24012a3c:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24012a3e:	698c      	ldr	r4, [r1, #24]
{
24012a40:	4605      	mov	r5, r0
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
24012a42:	2020      	movs	r0, #32
24012a44:	4621      	mov	r1, r4
24012a46:	f7ff fe53 	bl	240126f0 <mpool_alloc>
24012a4a:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24012a4c:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;

    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
    c->skew     =  0.5f;
24012a4e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
24012a52:	6861      	ldr	r1, [r4, #4]
    c->inc      =  0.0f;
24012a54:	2300      	movs	r3, #0
    c->phase    =  0.25f;
24012a56:	f04f 5c7a 	mov.w	ip, #1048576000	; 0x3e800000
    c->invSampleRate = leaf->invSampleRate;
24012a5a:	6849      	ldr	r1, [r1, #4]
    c->phase    =  0.25f;
24012a5c:	f8c0 c004 	str.w	ip, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
24012a60:	61c1      	str	r1, [r0, #28]
    c->inc      =  0.0f;
24012a62:	6083      	str	r3, [r0, #8]
    c->skew     =  0.5f;
24012a64:	6102      	str	r2, [r0, #16]
    c->oneMinusSkew     =  0.5f;
24012a66:	6142      	str	r2, [r0, #20]
    c->lastOut  =  0.0f;
24012a68:	6183      	str	r3, [r0, #24]
}
24012a6a:	bd38      	pop	{r3, r4, r5, pc}

24012a6c <tPBTriangle_setSkew>:
    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
}

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat mySkew)
{
24012a6c:	eef0 0a40 	vmov.f32	s1, s0
    _tPBTriangle* c = *osc;

    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
24012a70:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 24012aa0 <tPBTriangle_setSkew+0x34>
24012a74:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24012aa4 <tPBTriangle_setSkew+0x38>
{
24012a78:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
24012a7a:	6804      	ldr	r4, [r0, #0]
    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
24012a7c:	f01a f8e8 	bl	2402cc50 <__LEAF_clip_veneer>
    c->skew = (mySkew + 1.0f) * 0.5f;
24012a80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012a84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24012a88:	ee30 0a27 	vadd.f32	s0, s0, s15
24012a8c:	ee20 0a07 	vmul.f32	s0, s0, s14
    c->oneMinusSkew = 1.0f - c->skew;
24012a90:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->skew = (mySkew + 1.0f) * 0.5f;
24012a94:	ed84 0a04 	vstr	s0, [r4, #16]
    c->oneMinusSkew = 1.0f - c->skew;
24012a98:	edc4 7a05 	vstr	s15, [r4, #20]
}
24012a9c:	bd10      	pop	{r4, pc}
24012a9e:	bf00      	nop
24012aa0:	3f7d70a4 	.word	0x3f7d70a4
24012aa4:	3c23d70a 	.word	0x3c23d70a

24012aa8 <tPBSineTriangle_init>:

//==============================================================================

/* tPBSineTriangle: Anti-aliased Triangle waveform with sine wave, crossfaded between them with shape param. */
void    tPBSineTriangle_init          (tPBSineTriangle* const osc, LEAF* const leaf)
{
24012aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24012aaa:	698e      	ldr	r6, [r1, #24]
{
24012aac:	4607      	mov	r7, r0
24012aae:	460d      	mov	r5, r1
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
24012ab0:	2028      	movs	r0, #40	; 0x28
24012ab2:	4631      	mov	r1, r6
24012ab4:	f7ff fe1c 	bl	240126f0 <mpool_alloc>
24012ab8:	6038      	str	r0, [r7, #0]
    c->mempool = m;
24012aba:	6006      	str	r6, [r0, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
24012abc:	4604      	mov	r4, r0
    _tMempool* m = *mp;
24012abe:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24012ac0:	2018      	movs	r0, #24
    LEAF* leaf = c->mempool->leaf;
24012ac2:	6876      	ldr	r6, [r6, #4]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24012ac4:	4629      	mov	r1, r5
24012ac6:	f7ff fe13 	bl	240126f0 <mpool_alloc>
    c->inc      =  0;
24012aca:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24012acc:	61e0      	str	r0, [r4, #28]
    c->mask = SINE_TABLE_SIZE - 1;
24012ace:	f240 71ff 	movw	r1, #2047	; 0x7ff
    c->mempool = m;
24012ad2:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24012ad4:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24012ad6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24012b0c <tPBSineTriangle_init+0x64>
    c->phase    =  0;
24012ada:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24012ade:	edd2 7a01 	vldr	s15, [r2, #4]
    tCycle_initToPool(&c->sine, mp);
    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
24012ae2:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->mask = SINE_TABLE_SIZE - 1;
24012ae6:	6141      	str	r1, [r0, #20]
    c->inc      =  0.0f;
24012ae8:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24012aea:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->shape     =  0.0f;
    c->skew 	 = 0.5f;
24012aee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24012af2:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
24012af6:	6870      	ldr	r0, [r6, #4]
    c->phase    =  0.25f;
24012af8:	6062      	str	r2, [r4, #4]
    c->oneMinusShape = 1.0f;
24012afa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->inc      =  0.0f;
24012afe:	60a3      	str	r3, [r4, #8]
    c->invSampleRate = leaf->invSampleRate;
24012b00:	61a0      	str	r0, [r4, #24]
    c->shape     =  0.0f;
24012b02:	6123      	str	r3, [r4, #16]
    c->lastOut  =  0.0f;
24012b04:	6163      	str	r3, [r4, #20]
    c->skew 	 = 0.5f;
24012b06:	6261      	str	r1, [r4, #36]	; 0x24
    c->oneMinusShape = 1.0f;
24012b08:	6222      	str	r2, [r4, #32]
}
24012b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24012b0c:	4f800000 	.word	0x4f800000

24012b10 <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
    c->oneMinusShape = 1.0f - shape;
24012b10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSineTriangle* c = *osc;
24012b14:	6803      	ldr	r3, [r0, #0]
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
24012b16:	eeb1 7a40 	vneg.f32	s14, s0
    c->oneMinusShape = 1.0f - shape;
24012b1a:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
24012b1e:	ed83 7a04 	vstr	s14, [r3, #16]
    c->oneMinusShape = 1.0f - shape;
24012b22:	edc3 7a08 	vstr	s15, [r3, #32]
}
24012b26:	4770      	bx	lr

24012b28 <tPBPulse_init>:
}
//==============================================================================

/* tPulse: Anti-aliased pulse waveform. */
void    tPBPulse_init        (tPBPulse* const osc, LEAF* const leaf)
{
24012b28:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24012b2a:	698c      	ldr	r4, [r1, #24]
{
24012b2c:	4605      	mov	r5, r0
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
24012b2e:	2020      	movs	r0, #32
24012b30:	4621      	mov	r1, r4
24012b32:	f7ff fddd 	bl	240126f0 <mpool_alloc>
24012b36:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24012b38:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
24012b3a:	2200      	movs	r2, #0
    c->invSampleRate = leaf->invSampleRate;
24012b3c:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->width     =  (0.5f * TWO_TO_32);
24012b3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24012b42:	eddf 7a08 	vldr	s15, [pc, #32]	; 24012b64 <tPBPulse_init+0x3c>
    c->invSampleRate = leaf->invSampleRate;
24012b46:	ed91 7a01 	vldr	s14, [r1, #4]
    c->oneMinusWidth =  c->width;
    c->freq = 0.0f;
24012b4a:	2100      	movs	r1, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24012b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
24012b50:	ed80 7a06 	vstr	s14, [r0, #24]
    c->freq = 0.0f;
24012b54:	60c1      	str	r1, [r0, #12]
    c->phase    =  0;
24012b56:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->oneMinusWidth =  c->width;
24012b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24012b5e:	edc0 7a07 	vstr	s15, [r0, #28]
}
24012b62:	bd38      	pop	{r3, r4, r5, pc}
24012b64:	4f800000 	.word	0x4f800000

24012b68 <tPBPulse_setWidth>:
    }
    if (width > 0.95f)
    {
        width = 0.95f;
    }
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24012b68:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012b6c:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 24012ba0 <tPBPulse_setWidth+0x38>
24012b70:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24012ba4 <tPBPulse_setWidth+0x3c>
24012b74:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
24012b78:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 24012ba8 <tPBPulse_setWidth+0x40>
24012b7c:	fe80 0a66 	vminnm.f32	s0, s0, s13
24012b80:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->width = width * TWO_TO_32;
24012b84:	ee20 0a07 	vmul.f32	s0, s0, s14
    _tPBPulse* c = *osc;
24012b88:	6803      	ldr	r3, [r0, #0]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24012b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->width = width * TWO_TO_32;
24012b8e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24012b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c->width = width * TWO_TO_32;
24012b96:	ed83 0a04 	vstr	s0, [r3, #16]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24012b9a:	edc3 7a05 	vstr	s15, [r3, #20]
}
24012b9e:	4770      	bx	lr
24012ba0:	3d4ccccd 	.word	0x3d4ccccd
24012ba4:	3f733333 	.word	0x3f733333
24012ba8:	4f800000 	.word	0x4f800000

24012bac <tPBSaw_init>:

//==============================================================================

/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSaw_init          (tPBSaw* const osc, LEAF* const leaf)
{
24012bac:	b538      	push	{r3, r4, r5, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24012bae:	698c      	ldr	r4, [r1, #24]
{
24012bb0:	4605      	mov	r5, r0
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
24012bb2:	2020      	movs	r0, #32
24012bb4:	4621      	mov	r1, r4
24012bb6:	f7ff fd9b 	bl	240126f0 <mpool_alloc>
24012bba:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24012bbc:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
24012bbe:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
24012bc0:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
24012bc2:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24012bc4:	eddf 7a06 	vldr	s15, [pc, #24]	; 24012be0 <tPBSaw_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
24012bc8:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
24012bcc:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24012bce:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
24012bd2:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
24012bd6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24012bda:	edc0 7a05 	vstr	s15, [r0, #20]
}
24012bde:	bd38      	pop	{r3, r4, r5, pc}
24012be0:	4f800000 	.word	0x4f800000

24012be4 <tPBSawSquare_init>:
//========================================================================


/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSawSquare_init          (tPBSawSquare* const osc, LEAF* const leaf)
{
24012be4:	b538      	push	{r3, r4, r5, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24012be6:	698c      	ldr	r4, [r1, #24]
{
24012be8:	4605      	mov	r5, r0
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
24012bea:	2028      	movs	r0, #40	; 0x28
24012bec:	4621      	mov	r1, r4
24012bee:	f7ff fd7f 	bl	240126f0 <mpool_alloc>
24012bf2:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24012bf4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
24012bf6:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
24012bf8:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
24012bfa:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24012bfc:	eddf 7a06 	vldr	s15, [pc, #24]	; 24012c18 <tPBSawSquare_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
24012c00:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
24012c04:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24012c06:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
24012c0a:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
24012c0e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24012c12:	edc0 7a05 	vstr	s15, [r0, #20]
}
24012c16:	bd38      	pop	{r3, r4, r5, pc}
24012c18:	4f800000 	.word	0x4f800000

24012c1c <tPBSawSquare_setShape>:
void    tPBSawSquare_setShape      (tPBSawSquare* const osc, Lfloat inputShape)
{
    _tPBSawSquare* c = *osc;
    
    c->shape  = inputShape;
    c->oneMinusShape = 1.0f - inputShape;
24012c1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSawSquare* c = *osc;
24012c20:	6803      	ldr	r3, [r0, #0]
    c->shape  = inputShape;
24012c22:	ed83 0a08 	vstr	s0, [r3, #32]
    c->oneMinusShape = 1.0f - inputShape;
24012c26:	ee77 7ac0 	vsub.f32	s15, s15, s0
24012c2a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
24012c2e:	4770      	bx	lr

24012c30 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
24012c30:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
24012c32:	6995      	ldr	r5, [r2, #24]
{
24012c34:	4606      	mov	r6, r0
24012c36:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
24012c38:	2018      	movs	r0, #24
24012c3a:	4629      	mov	r1, r5
24012c3c:	f7ff fd58 	bl	240126f0 <mpool_alloc>
24012c40:	6030      	str	r0, [r6, #0]
    n->mempool = m;
24012c42:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
24012c44:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
24012c46:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
24012c48:	691b      	ldr	r3, [r3, #16]
24012c4a:	6143      	str	r3, [r0, #20]
}
24012c4c:	bd70      	pop	{r4, r5, r6, pc}
24012c4e:	bf00      	nop

24012c50 <tNoise_tick>:
    
    mpool_free((char*)n, n->mempool);
}

Lfloat   tNoise_tick(tNoise* const ns)
{
24012c50:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
24012c52:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
24012c54:	6963      	ldr	r3, [r4, #20]
24012c56:	4798      	blx	r3
    
    if (n->type == PinkNoise)
24012c58:	7923      	ldrb	r3, [r4, #4]
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
24012c5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24012c5e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
24012c62:	2b01      	cmp	r3, #1
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
24012c64:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
24012c68:	d131      	bne.n	24012cce <tNoise_tick+0x7e>
    {
        Lfloat tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24012c6a:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 24012cd4 <tNoise_tick+0x84>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24012c6e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 24012cd8 <tNoise_tick+0x88>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24012c72:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24012c76:	ed94 5a03 	vldr	s10, [r4, #12]
24012c7a:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24012c7e:	edd4 3a02 	vldr	s7, [r4, #8]
24012c82:	eddf 4a16 	vldr	s9, [pc, #88]	; 24012cdc <tNoise_tick+0x8c>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24012c86:	eddf 5a16 	vldr	s11, [pc, #88]	; 24012ce0 <tNoise_tick+0x90>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24012c8a:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24012c8e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 24012ce4 <tNoise_tick+0x94>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24012c92:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24012c96:	ed94 4a04 	vldr	s8, [r4, #16]
24012c9a:	ee27 7a87 	vmul.f32	s14, s15, s14
24012c9e:	eddf 5a12 	vldr	s11, [pc, #72]	; 24012ce8 <tNoise_tick+0x98>
24012ca2:	eddf 4a12 	vldr	s9, [pc, #72]	; 24012cec <tNoise_tick+0x9c>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
24012ca6:	ed9f 5a12 	vldr	s10, [pc, #72]	; 24012cf0 <tNoise_tick+0xa0>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24012caa:	eea4 7a25 	vfma.f32	s14, s8, s11
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24012cae:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24012cb2:	ee76 5a26 	vadd.f32	s11, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24012cb6:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24012cba:	eef0 6a65 	vmov.f32	s13, s11
24012cbe:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24012cc2:	eee7 6aa4 	vfma.f32	s13, s15, s9
24012cc6:	ee37 7a26 	vadd.f32	s14, s14, s13
        return (tmp * 0.05f);
24012cca:	ee67 7a05 	vmul.f32	s15, s14, s10
    }
    else // WhiteNoise
    {
        return rand;
    }
}
24012cce:	eeb0 0a67 	vmov.f32	s0, s15
24012cd2:	bd10      	pop	{r4, pc}
24012cd4:	3dcad8a1 	.word	0x3dcad8a1
24012cd8:	3e97d0ff 	.word	0x3e97d0ff
24012cdc:	3f7f65fe 	.word	0x3f7f65fe
24012ce0:	3f76872b 	.word	0x3f76872b
24012ce4:	3f86be97 	.word	0x3f86be97
24012ce8:	3f11eb85 	.word	0x3f11eb85
24012cec:	3e3d3c36 	.word	0x3e3d3c36
24012cf0:	3d4ccccd 	.word	0x3d4ccccd

24012cf4 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
24012cf4:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24012cf6:	698c      	ldr	r4, [r1, #24]
{
24012cf8:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24012cfa:	201c      	movs	r0, #28
24012cfc:	4621      	mov	r1, r4
24012cfe:	f7ff fcf7 	bl	240126f0 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
24012d02:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24012d04:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24012d06:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24012d08:	6862      	ldr	r2, [r4, #4]
    c->inc  = 0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24012d0a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24012d20 <tIntPhasor_init+0x2c>
    c->inc  = 0;
24012d0e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24012d12:	edd2 7a01 	vldr	s15, [r2, #4]
24012d16:	ee67 7a87 	vmul.f32	s15, s15, s14
24012d1a:	edc0 7a06 	vstr	s15, [r0, #24]
}
24012d1e:	bd38      	pop	{r3, r4, r5, pc}
24012d20:	4f800000 	.word	0x4f800000

24012d24 <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
24012d24:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
24012d26:	eddf 7a06 	vldr	s15, [pc, #24]	; 24012d40 <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
24012d2a:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
24012d2e:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
24012d30:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
24012d34:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24012d36:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
24012d3a:	ee20 0a27 	vmul.f32	s0, s0, s15
24012d3e:	4770      	bx	lr
24012d40:	2f80000d 	.word	0x2f80000d

24012d44 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
24012d44:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24012d46:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24012d4a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24012d4e:	ee20 0a27 	vmul.f32	s0, s0, s15
24012d52:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24012d56:	ed83 0a02 	vstr	s0, [r3, #8]
}
24012d5a:	4770      	bx	lr

24012d5c <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
24012d5c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
24012d60:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24012d7c <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
24012d64:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24012d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24012d6a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24012d6e:	ee20 0a07 	vmul.f32	s0, s0, s14
24012d72:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24012d76:	ed83 0a01 	vstr	s0, [r3, #4]
}
24012d7a:	4770      	bx	lr
24012d7c:	4f800000 	.word	0x4f800000

24012d80 <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
24012d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24012d82:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24012d86:	698f      	ldr	r7, [r1, #24]
{
24012d88:	4606      	mov	r6, r0
24012d8a:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24012d8c:	2010      	movs	r0, #16
24012d8e:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24012d90:	ed9f 8a22 	vldr	s16, [pc, #136]	; 24012e1c <tSquareLFO_init+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24012d94:	f7ff fcac 	bl	240126f0 <mpool_alloc>
24012d98:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24012d9a:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24012d9c:	4604      	mov	r4, r0
    _tMempool* m = *mp;
24012d9e:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24012da0:	201c      	movs	r0, #28
24012da2:	4639      	mov	r1, r7
24012da4:	f7ff fca4 	bl	240126f0 <mpool_alloc>
24012da8:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24012daa:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24012dac:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
24012dae:	2700      	movs	r7, #0
    c->inc  = 0;
24012db0:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24012db4:	edd2 7a01 	vldr	s15, [r2, #4]
24012db8:	ee67 7a88 	vmul.f32	s15, s15, s16
24012dbc:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24012dc0:	201c      	movs	r0, #28
    _tMempool* m = *mp;
24012dc2:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24012dc4:	4629      	mov	r1, r5
24012dc6:	f7ff fc93 	bl	240126f0 <mpool_alloc>
24012dca:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24012dcc:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
24012dce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
24012dd2:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012dd4:	eddf 6a12 	vldr	s13, [pc, #72]	; 24012e20 <tSquareLFO_init+0xa0>
    c->inc  = 0;
24012dd8:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24012ddc:	ed92 7a01 	vldr	s14, [r2, #4]
24012de0:	ee27 7a08 	vmul.f32	s14, s14, s16
24012de4:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
24012de8:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012dea:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24012dec:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012df0:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
24012df4:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012df6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24012dfa:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
24012dfe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24012e02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24012e06:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24012e0a:	ee67 7a88 	vmul.f32	s15, s15, s16
24012e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24012e12:	edc3 7a01 	vstr	s15, [r3, #4]
}
24012e16:	ecbd 8b02 	vpop	{d8}
24012e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24012e1c:	4f800000 	.word	0x4f800000
24012e20:	2f80000d 	.word	0x2f80000d

24012e24 <tSquareLFO_initToPool>:
{
24012e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24012e26:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24012e2a:	680f      	ldr	r7, [r1, #0]
{
24012e2c:	4606      	mov	r6, r0
24012e2e:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24012e30:	2010      	movs	r0, #16
24012e32:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24012e34:	ed9f 8a22 	vldr	s16, [pc, #136]	; 24012ec0 <tSquareLFO_initToPool+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24012e38:	f7ff fc5a 	bl	240126f0 <mpool_alloc>
24012e3c:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24012e3e:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24012e40:	4604      	mov	r4, r0
    _tMempool* m = *mp;
24012e42:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24012e44:	201c      	movs	r0, #28
24012e46:	4639      	mov	r1, r7
24012e48:	f7ff fc52 	bl	240126f0 <mpool_alloc>
24012e4c:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24012e4e:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24012e50:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
24012e52:	2700      	movs	r7, #0
    c->inc  = 0;
24012e54:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24012e58:	edd2 7a01 	vldr	s15, [r2, #4]
24012e5c:	ee67 7a88 	vmul.f32	s15, s15, s16
24012e60:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24012e64:	201c      	movs	r0, #28
    _tMempool* m = *mp;
24012e66:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24012e68:	4629      	mov	r1, r5
24012e6a:	f7ff fc41 	bl	240126f0 <mpool_alloc>
24012e6e:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24012e70:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
24012e72:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
24012e76:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012e78:	eddf 6a12 	vldr	s13, [pc, #72]	; 24012ec4 <tSquareLFO_initToPool+0xa0>
    c->inc  = 0;
24012e7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24012e80:	ed92 7a01 	vldr	s14, [r2, #4]
24012e84:	ee27 7a08 	vmul.f32	s14, s14, s16
24012e88:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
24012e8c:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012e8e:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24012e90:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012e94:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
24012e98:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012e9a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24012e9e:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
24012ea2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24012ea6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24012eaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24012eae:	ee67 7a88 	vmul.f32	s15, s15, s16
24012eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24012eb6:	edc3 7a01 	vstr	s15, [r3, #4]
}
24012eba:	ecbd 8b02 	vpop	{d8}
24012ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24012ec0:	4f800000 	.word	0x4f800000
24012ec4:	2f80000d 	.word	0x2f80000d

24012ec8 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
24012ec8:	6802      	ldr	r2, [r0, #0]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24012eca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
24012ece:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24012f0c <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
24012ed2:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
24012ed4:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24012ed8:	4403      	add	r3, r0
24012eda:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24012edc:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
24012ee0:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
24012ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
24012ee6:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24012eea:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
24012eec:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
24012ef0:	604b      	str	r3, [r1, #4]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24012ef2:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24012ef6:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24012efa:	ee30 0a66 	vsub.f32	s0, s0, s13
24012efe:	ee77 7ac6 	vsub.f32	s15, s15, s12
24012f02:	eea7 0a87 	vfma.f32	s0, s15, s14
}
24012f06:	ee30 0a00 	vadd.f32	s0, s0, s0
24012f0a:	4770      	bx	lr
24012f0c:	2f80000d 	.word	0x2f80000d

24012f10 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
24012f10:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
24012f12:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24012f14:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24012f18:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24012f1c:	ee60 7a27 	vmul.f32	s15, s0, s15
24012f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24012f24:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24012f28:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24012f2a:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24012f2e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24012f32:	ee20 0a27 	vmul.f32	s0, s0, s15
24012f36:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24012f3a:	ed83 0a02 	vstr	s0, [r3, #8]
}
24012f3e:	4770      	bx	lr

24012f40 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
24012f40:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012f42:	eddf 6a0d 	vldr	s13, [pc, #52]	; 24012f78 <tSquareLFO_setPulseWidth+0x38>
24012f46:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24012f48:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012f4c:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
24012f50:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24012f7c <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
24012f58:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012f5a:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
24012f5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
24012f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24012f66:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24012f6a:	ee20 0a07 	vmul.f32	s0, s0, s14
24012f6e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24012f72:	ed83 0a01 	vstr	s0, [r3, #4]
}
24012f76:	4770      	bx	lr
24012f78:	2f80000d 	.word	0x2f80000d
24012f7c:	4f800000 	.word	0x4f800000

24012f80 <tSquareLFO_setPhase>:
    int i = phase;
24012f80:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
24012f84:	eddf 6a13 	vldr	s13, [pc, #76]	; 24012fd4 <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
    _tSquareLFO *c = *cy;
24012f88:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012f8a:	ed9f 6a13 	vldr	s12, [pc, #76]	; 24012fd8 <tSquareLFO_setPhase+0x58>
    phase -= i;
24012f8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tIntPhasor* c = *cy;
24012f92:	689a      	ldr	r2, [r3, #8]
    phase -= i;
24012f94:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24012f98:	ee20 0a26 	vmul.f32	s0, s0, s13
24012f9c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24012fa0:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012fa4:	689a      	ldr	r2, [r3, #8]
24012fa6:	edd3 7a01 	vldr	s15, [r3, #4]
24012faa:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
24012fae:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24012fb0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24012fb4:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
24012fb8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24012fbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24012fc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24012fc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
24012fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24012fcc:	edc3 7a01 	vstr	s15, [r3, #4]
}
24012fd0:	4770      	bx	lr
24012fd2:	bf00      	nop
24012fd4:	4f800000 	.word	0x4f800000
24012fd8:	2f80000d 	.word	0x2f80000d

24012fdc <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
24012fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24012fde:	460c      	mov	r4, r1
{
24012fe0:	4606      	mov	r6, r0
24012fe2:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24012fe4:	2010      	movs	r0, #16
    _tMempool* m = *mp;
24012fe6:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24012fea:	4639      	mov	r1, r7
24012fec:	f7ff fb80 	bl	240126f0 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
24012ff0:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24012ff2:	6030      	str	r0, [r6, #0]
24012ff4:	4604      	mov	r4, r0
    c->mempool = m;
24012ff6:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
24012ffa:	f7ff ff13 	bl	24012e24 <tSquareLFO_initToPool>
    _tMempool* m = *mp;
24012ffe:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24013000:	201c      	movs	r0, #28
24013002:	4629      	mov	r1, r5
24013004:	f7ff fb74 	bl	240126f0 <mpool_alloc>
    c->phase    =  0;
24013008:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
2401300a:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
2401300c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
2401300e:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013010:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24013028 <tSawSquareLFO_init+0x4c>
    c->inc  = 0;
24013014:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013018:	edd2 7a01 	vldr	s15, [r2, #4]
2401301c:	ee67 7a87 	vmul.f32	s15, s15, s14
24013020:	edc0 7a06 	vstr	s15, [r0, #24]
}
24013024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24013026:	bf00      	nop
24013028:	4f800000 	.word	0x4f800000

2401302c <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
2401302c:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
2401302e:	6802      	ldr	r2, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24013030:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
24013034:	eddf 5a1d 	vldr	s11, [pc, #116]	; 240130ac <tSawSquareLFO_tick+0x80>
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24013038:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
2401303c:	6891      	ldr	r1, [r2, #8]
    Lfloat b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
2401303e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
24013042:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24013046:	4403      	add	r3, r0
24013048:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
2401304a:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
2401304e:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
24013050:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
24013054:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
24013056:	6843      	ldr	r3, [r0, #4]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24013058:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
2401305c:	6884      	ldr	r4, [r0, #8]
2401305e:	4423      	add	r3, r4
24013060:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
24013062:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
24013066:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
24013068:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
2401306c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
24013070:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
24013072:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
24013076:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
24013078:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
2401307c:	eef8 4a66 	vcvt.f32.u32	s9, s13
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24013080:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
24013084:	ee37 7a40 	vsub.f32	s14, s14, s0
}
24013088:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401308c:	ee76 6ac5 	vsub.f32	s13, s13, s10
24013090:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
24013094:	ee30 0a00 	vadd.f32	s0, s0, s0
24013098:	ee37 7a07 	vadd.f32	s14, s14, s14
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
2401309c:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
240130a0:	ee20 0a26 	vmul.f32	s0, s0, s13
}
240130a4:	eea6 0a07 	vfma.f32	s0, s12, s14
240130a8:	4770      	bx	lr
240130aa:	bf00      	nop
240130ac:	2f80000d 	.word	0x2f80000d

240130b0 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
    _tSawSquareLFO* c = *cy;
240130b0:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
240130b2:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
240130b4:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240130b6:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
240130ba:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240130be:	ee60 7a27 	vmul.f32	s15, s0, s15
240130c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240130c6:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
240130ca:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240130cc:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
240130d0:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240130d4:	ee60 7a27 	vmul.f32	s15, s0, s15
240130d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240130dc:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
240130e0:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240130e2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
240130e6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240130ea:	ee20 0a27 	vmul.f32	s0, s0, s15
240130ee:	eebc 0ac0 	vcvt.u32.f32	s0, s0
240130f2:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
240130f6:	4770      	bx	lr

240130f8 <tSawSquareLFO_setPhase>:
    int i = phase;
240130f8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
240130fc:	eddf 6a15 	vldr	s13, [pc, #84]	; 24013154 <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
    _tSawSquareLFO* c = *cy;
24013100:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013102:	ed9f 6a15 	vldr	s12, [pc, #84]	; 24013158 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
24013106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tSquareLFO *c = *cy;
2401310a:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
2401310c:	6890      	ldr	r0, [r2, #8]
    phase -= i;
2401310e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24013112:	ee20 0a26 	vmul.f32	s0, s0, s13
24013116:	eefc 7ac0 	vcvt.u32.f32	s15, s0
2401311a:	edc0 7a01 	vstr	s15, [r0, #4]
2401311e:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24013122:	6890      	ldr	r0, [r2, #8]
24013124:	edd2 7a01 	vldr	s15, [r2, #4]
24013128:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
2401312c:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
2401312e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24013132:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
24013136:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
2401313a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401313e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24013142:	ee67 7aa6 	vmul.f32	s15, s15, s13
24013146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401314a:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
2401314e:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
24013150:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
24013152:	4770      	bx	lr
24013154:	4f800000 	.word	0x4f800000
24013158:	2f80000d 	.word	0x2f80000d

2401315c <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
2401315c:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
2401315e:	ed83 0a01 	vstr	s0, [r3, #4]
}
24013162:	4770      	bx	lr

24013164 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
24013164:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24013166:	698d      	ldr	r5, [r1, #24]
{
24013168:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
2401316a:	2018      	movs	r0, #24
2401316c:	4629      	mov	r1, r5
2401316e:	f7ff fabf 	bl	240126f0 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
24013172:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24013174:	6020      	str	r0, [r4, #0]
    c->mempool = m;
24013176:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24013178:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
2401317a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 240131b0 <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
2401317e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 240131b4 <tTriLFO_init+0x50>
    c->phase    =  0;
24013182:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
24013186:	edd2 6a01 	vldr	s13, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
2401318a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    c->invSampleRate = leaf->invSampleRate;
2401318e:	edc0 6a04 	vstr	s13, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24013192:	edc0 7a05 	vstr	s15, [r0, #20]
    _tTriLFO* c = *cy;
24013196:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013198:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
2401319c:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240131a0:	ee67 7a87 	vmul.f32	s15, s15, s14
240131a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240131a8:	edc3 7a02 	vstr	s15, [r3, #8]
}
240131ac:	bd38      	pop	{r3, r4, r5, pc}
240131ae:	bf00      	nop
240131b0:	4f800000 	.word	0x4f800000
240131b4:	435c0000 	.word	0x435c0000

240131b8 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
240131b8:	6801      	ldr	r1, [r0, #0]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240131ba:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
240131be:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 240131e8 <tTriLFO_tick+0x30>
    c->phase += c->inc;
240131c2:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
240131c6:	4413      	add	r3, r2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
240131c8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    c->phase += c->inc;
240131cc:	604b      	str	r3, [r1, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
240131ce:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
240131d2:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240131d6:	ee07 3a90 	vmov	s15, r3
240131da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240131de:	eea7 0a87 	vfma.f32	s0, s15, s14
}
240131e2:	ee30 0a00 	vadd.f32	s0, s0, s0
240131e6:	4770      	bx	lr
240131e8:	2ffffff6 	.word	0x2ffffff6

240131ec <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
240131ec:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240131ee:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
240131f2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240131f6:	ee20 0a27 	vmul.f32	s0, s0, s15
240131fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240131fe:	ed83 0a02 	vstr	s0, [r3, #8]
}
24013202:	4770      	bx	lr

24013204 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
24013204:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
24013208:	6803      	ldr	r3, [r0, #0]
    phase -= i;
2401320a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401320e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
24013212:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
24013216:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401321a:	4770      	bx	lr

2401321c <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
2401321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401321e:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24013222:	698f      	ldr	r7, [r1, #24]
{
24013224:	4606      	mov	r6, r0
24013226:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24013228:	2010      	movs	r0, #16
2401322a:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
2401322c:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 240132a8 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24013230:	f7ff fa5e 	bl	240126f0 <mpool_alloc>
24013234:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24013236:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24013238:	6034      	str	r4, [r6, #0]
    c->mempool = m;
2401323a:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
2401323c:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
2401323e:	4631      	mov	r1, r6
24013240:	f7ff fa56 	bl	240126f0 <mpool_alloc>
24013244:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24013246:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24013248:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
2401324a:	2600      	movs	r6, #0
    c->freq  = freq;
2401324c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 240132ac <tSineTriLFO_init+0x90>
    c->phase    =  0;
24013250:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
24013254:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24013258:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
2401325c:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24013260:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24013264:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
24013266:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013268:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
2401326c:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013270:	ee67 7a87 	vmul.f32	s15, s15, s14
24013274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24013278:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
2401327c:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
2401327e:	4629      	mov	r1, r5
24013280:	f7ff fa36 	bl	240126f0 <mpool_alloc>
24013284:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24013286:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
24013288:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
2401328c:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
2401328e:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013292:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24013296:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24013298:	ee67 7a88 	vmul.f32	s15, s15, s16
2401329c:	edc0 7a04 	vstr	s15, [r0, #16]
}
240132a0:	ecbd 8b02 	vpop	{d8}
240132a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240132a6:	bf00      	nop
240132a8:	4f800000 	.word	0x4f800000
240132ac:	435c0000 	.word	0x435c0000

240132b0 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
240132b0:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
240132b2:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
    Lfloat b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
240132b4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
240132b8:	4a21      	ldr	r2, [pc, #132]	; (24013340 <tSineTriLFO_tick+0x90>)
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240132ba:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
240132be:	68e0      	ldr	r0, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240132c0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 24013344 <tSineTriLFO_tick+0x94>
    idx = (idx + 1) & c->mask;
240132c4:	6945      	ldr	r5, [r0, #20]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
240132c6:	eddf 4a20 	vldr	s9, [pc, #128]	; 24013348 <tSineTriLFO_tick+0x98>
    c->phase += c->inc;
240132ca:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
240132ce:	440b      	add	r3, r1
240132d0:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
240132d2:	0d59      	lsrs	r1, r3, #21
    _tTriLFO* c = *cy;
240132d4:	68a0      	ldr	r0, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
240132d6:	f3c3 0314 	ubfx	r3, r3, #0, #21
240132da:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
240132de:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240132e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
240132e6:	4433      	add	r3, r6
240132e8:	6043      	str	r3, [r0, #4]
    idx = (idx + 1) & c->mask;
240132ea:	1c48      	adds	r0, r1, #1
    samp0 = __leaf_table_sinewave[idx];
240132ec:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
240132f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    idx = (idx + 1) & c->mask;
240132f4:	4028      	ands	r0, r5
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240132f6:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp0 = __leaf_table_sinewave[idx];
240132fa:	edd1 6a00 	vldr	s13, [r1]
    samp1 = __leaf_table_sinewave[idx];
240132fe:	eb02 0180 	add.w	r1, r2, r0, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
24013302:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24013306:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
2401330a:	ed91 5a00 	vldr	s10, [r1]
    return  (1.0f - c->shape) * a + c->shape * b;
2401330e:	ee37 0a07 	vadd.f32	s0, s14, s14
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
24013312:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
24013316:	ee36 6a47 	vsub.f32	s12, s12, s14
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
2401331a:	ee35 5a66 	vsub.f32	s10, s10, s13
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
2401331e:	ee07 2a10 	vmov	s14, r2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24013322:	eee7 6a85 	vfma.f32	s13, s15, s10
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24013326:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401332a:	eef0 7a65 	vmov.f32	s15, s11
}
2401332e:	bc70      	pop	{r4, r5, r6}
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24013330:	eee7 7a24 	vfma.f32	s15, s14, s9
    return  (1.0f - c->shape) * a + c->shape * b;
24013334:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24013338:	eea6 0a26 	vfma.f32	s0, s12, s13
2401333c:	4770      	bx	lr
2401333e:	bf00      	nop
24013340:	2401b9c0 	.word	0x2401b9c0
24013344:	35000004 	.word	0x35000004
24013348:	2ffffff6 	.word	0x2ffffff6

2401334c <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
    _tSineTriLFO* c = *cy;
2401334c:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
2401334e:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013350:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24013354:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013358:	ee60 7a27 	vmul.f32	s15, s0, s15
2401335c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24013360:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
24013364:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24013366:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
2401336a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401336e:	ee20 0a27 	vmul.f32	s0, s0, s15
24013372:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24013376:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
2401337a:	4770      	bx	lr

2401337c <tSineTriLFO_setPhase>:
    int i = phase;
2401337c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
24013380:	ed9f 7a09 	vldr	s14, [pc, #36]	; 240133a8 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
    _tSineTriLFO* c = *cy;
24013384:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24013386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
2401338a:	689a      	ldr	r2, [r3, #8]
    phase -= i;
2401338c:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
24013390:	ee20 0a07 	vmul.f32	s0, s0, s14
24013394:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
24013398:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
2401339c:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
240133a0:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
240133a2:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
240133a6:	4770      	bx	lr
240133a8:	4f800000 	.word	0x4f800000

240133ac <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
240133ac:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
240133ae:	ed83 0a01 	vstr	s0, [r3, #4]

 }
240133b2:	4770      	bx	lr
240133b4:	0000      	movs	r0, r0
	...

240133b8 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, Lfloat freq, Lfloat dampFreq,
                                         Lfloat decay, Lfloat targetLev, Lfloat levSmoothFactor,
                                         Lfloat levStrength, int levMode, tMempool* const mp)
{
240133b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240133bc:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
240133c0:	f8d3 9000 	ldr.w	r9, [r3]
{
240133c4:	b083      	sub	sp, #12
240133c6:	460e      	mov	r6, r1
240133c8:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
240133ca:	4649      	mov	r1, r9
240133cc:	206c      	movs	r0, #108	; 0x6c
{
240133ce:	461d      	mov	r5, r3
240133d0:	eeb0 8a40 	vmov.f32	s16, s0
240133d4:	eeb0 9a41 	vmov.f32	s18, s2
240133d8:	4617      	mov	r7, r2
240133da:	eef0 9a61 	vmov.f32	s19, s3
240133de:	eeb0 aa42 	vmov.f32	s20, s4
240133e2:	eeb0 ba62 	vmov.f32	s22, s5
240133e6:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
240133ea:	f7ff f981 	bl	240126f0 <mpool_alloc>
240133ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
240133f2:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
240133f6:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
240133fa:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    p->mempool = m;
240133fe:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
24013402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24013406:	ee87 ca08 	vdiv.f32	s24, s14, s16
    LEAF* leaf = p->mempool->leaf;
2401340a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
2401340e:	65c6      	str	r6, [r0, #92]	; 0x5c
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24013410:	4604      	mov	r4, r0
    p->sampleRate = leaf->sampleRate * oversampling;
24013412:	ed93 7a00 	vldr	s14, [r3]
    p->maxLength = 2400 * oversampling;
24013416:	f44f 6316 	mov.w	r3, #2400	; 0x960
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
2401341a:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
2401341e:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->maxLength = 2400 * oversampling;
24013422:	fb03 f606 	mul.w	r6, r3, r6
    p->curr=0.0f;
24013426:	2300      	movs	r3, #0
    p->sampleRate = leaf->sampleRate * oversampling;
24013428:	ee67 7a87 	vmul.f32	s15, s15, s14
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
2401342c:	eddf 0a84 	vldr	s1, [pc, #528]	; 24013640 <tSimpleLivingString3_initToPool+0x288>
    p->curr=0.0f;
24013430:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24013432:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
24013434:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
24013436:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
2401343a:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
2401343e:	4650      	mov	r0, sl
24013440:	ee2c 0a2a 	vmul.f32	s0, s24, s21
24013444:	ee20 0a27 	vmul.f32	s0, s0, s15
24013448:	f7fd f85a 	bl	24010500 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
2401344c:	ed94 0a02 	vldr	s0, [r4, #8]
24013450:	462a      	mov	r2, r5
24013452:	6b21      	ldr	r1, [r4, #48]	; 0x30
24013454:	4658      	mov	r0, fp
24013456:	f7fc fb65 	bl	2400fb24 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
2401345a:	ed94 0a02 	vldr	s0, [r4, #8]
2401345e:	462a      	mov	r2, r5
24013460:	6b21      	ldr	r1, [r4, #48]	; 0x30
24013462:	4648      	mov	r0, r9
24013464:	f7fc fb5e 	bl	2400fb24 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
    _tSimpleLivingString3* p = *pl;
24013468:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    Lfloat waveLength = (p->sampleRate/freq);
2401346c:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    p->freq = freq;
24013470:	ed86 8a01 	vstr	s16, [r6, #4]
    Lfloat waveLength = (p->sampleRate/freq);
24013474:	ee2c 7a07 	vmul.f32	s14, s24, s14
    if (waveLength<4.8) waveLength=4.8f;
24013478:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 24013630 <tSimpleLivingString3_initToPool+0x278>
2401347c:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
24013480:	eeb4 5bc6 	vcmpe.f64	d5, d6
24013484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013488:	f100 80cb 	bmi.w	24013622 <tSimpleLivingString3_initToPool+0x26a>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
2401348c:	6b33      	ldr	r3, [r6, #48]	; 0x30
2401348e:	005b      	lsls	r3, r3, #1
24013490:	ee07 3a90 	vmov	s15, r3
24013494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
24013498:	fec7 7ac7 	vminnm.f32	s15, s15, s14
2401349c:	ee27 0aaa 	vmul.f32	s0, s15, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240134a0:	f106 0058 	add.w	r0, r6, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
240134a4:	ed86 0a02 	vstr	s0, [r6, #8]
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240134a8:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240134ac:	f019 fbc4 	bl	2402cc38 <__tExpSmooth_setDest_veneer>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240134b0:	ed96 7a05 	vldr	s14, [r6, #20]
    p->rippleDelay = 0.5f;
240134b4:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240134b8:	eddf 7a62 	vldr	s15, [pc, #392]	; 24013644 <tSimpleLivingString3_initToPool+0x28c>
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
240134bc:	f104 0840 	add.w	r8, r4, #64	; 0x40
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240134c0:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240134c4:	ed96 6a01 	vldr	s12, [r6, #4]
240134c8:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240134cc:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240134d0:	ed9f 0b59 	vldr	d0, [pc, #356]	; 24013638 <tSimpleLivingString3_initToPool+0x280>
240134d4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
240134d8:	ee27 7b06 	vmul.f64	d7, d7, d6
240134dc:	ee80 0b07 	vdiv.f64	d0, d0, d7
240134e0:	f001 fdce 	bl	24015080 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
240134e4:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240134e6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
240134ea:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
240134ee:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
240134f2:	ed94 0a02 	vldr	s0, [r4, #8]
240134f6:	f7fc fc19 	bl	2400fd2c <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
240134fa:	ed94 0a02 	vldr	s0, [r4, #8]
240134fe:	4648      	mov	r0, r9
24013500:	f7fc fc14 	bl	2400fd2c <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
24013504:	4658      	mov	r0, fp
24013506:	f7fc fb87 	bl	2400fc18 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
2401350a:	4648      	mov	r0, r9
2401350c:	f7fc fb84 	bl	2400fc18 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24013510:	f104 033c 	add.w	r3, r4, #60	; 0x3c
24013514:	4629      	mov	r1, r5
24013516:	eeb0 0a68 	vmov.f32	s0, s17
2401351a:	4618      	mov	r0, r3
    p->dampFreq = dampFreq;
2401351c:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24013520:	9301      	str	r3, [sp, #4]
24013522:	f7fd f823 	bl	2401056c <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
24013526:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
2401352a:	9801      	ldr	r0, [sp, #4]
2401352c:	f7fd f888 	bl	24010640 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24013530:	eeb0 0a68 	vmov.f32	s0, s17
24013534:	9801      	ldr	r0, [sp, #4]
24013536:	f7fd f851 	bl	240105dc <tOnePole_setFreq>
    p->rippleGain = 0.0f;
2401353a:	2300      	movs	r3, #0
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
2401353c:	4629      	mov	r1, r5
2401353e:	4640      	mov	r0, r8
    p->rippleGain = 0.0f;
24013540:	6663      	str	r3, [r4, #100]	; 0x64
    p->rippleDelay = 0.5f;
24013542:	edc4 aa1a 	vstr	s21, [r4, #104]	; 0x68
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
24013546:	f8cd 8004 	str.w	r8, [sp, #4]
2401354a:	f7fd f8d7 	bl	240106fc <tBiQuad_initToPool>
    tBiQuad_setSampleRate(&p->bridgeFilter2, p->sampleRate);
2401354e:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
24013552:	9801      	ldr	r0, [sp, #4]
24013554:	f7fd f8ee 	bl	24010734 <tBiQuad_setSampleRate>
    tHighpass_initToPool(&p->DCblocker,13, mp);
24013558:	4629      	mov	r1, r5
2401355a:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
2401355e:	4630      	mov	r0, r6
24013560:	9601      	str	r6, [sp, #4]
24013562:	f7fd fa43 	bl	240109ec <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
24013566:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
2401356a:	9801      	ldr	r0, [sp, #4]
2401356c:	f7fd fa7e 	bl	24010a6c <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
24013570:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
24013574:	9801      	ldr	r0, [sp, #4]
24013576:	f7fd fa5d 	bl	24010a34 <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
2401357a:	eeb0 1a4b 	vmov.f32	s2, s22
2401357e:	eef0 0a4a 	vmov.f32	s1, s20
24013582:	462a      	mov	r2, r5
24013584:	eeb0 0a69 	vmov.f32	s0, s19
24013588:	f104 0054 	add.w	r0, r4, #84	; 0x54
2401358c:	4639      	mov	r1, r7
    p->userDecay = decay;
2401358e:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
24013592:	f7fc febd 	bl	24010310 <tFeedbackLeveler_initToPool>
    Lfloat waveLength = (p->sampleRate/freq);
24013596:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
    p->levMode=levMode;
2401359a:	6227      	str	r7, [r4, #32]
    Lfloat waveLength = (p->sampleRate/freq);
2401359c:	ee2c ca26 	vmul.f32	s24, s24, s13
    p->changeGainCompensator = 1.0f;
240135a0:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
240135a4:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
240135a8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 24013630 <tSimpleLivingString3_initToPool+0x278>
240135ac:	eeb7 6acc 	vcvt.f64.f32	d6, s24
240135b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
240135b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240135b8:	d436      	bmi.n	24013628 <tSimpleLivingString3_initToPool+0x270>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
240135ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
240135bc:	005b      	lsls	r3, r3, #1
240135be:	ee00 3a10 	vmov	s0, r3
240135c2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
240135c6:	fe80 0a4c 	vminnm.f32	s0, s0, s24
240135ca:	ee20 0a2a 	vmul.f32	s0, s0, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240135ce:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
240135d0:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240135d4:	f019 fb30 	bl	2402cc38 <__tExpSmooth_setDest_veneer>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240135d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240135dc:	ed94 7a05 	vldr	s14, [r4, #20]
240135e0:	eddf 7a18 	vldr	s15, [pc, #96]	; 24013644 <tSimpleLivingString3_initToPool+0x28c>
240135e4:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240135e8:	ed94 6a01 	vldr	s12, [r4, #4]
240135ec:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240135f0:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240135f4:	ed9f 0b10 	vldr	d0, [pc, #64]	; 24013638 <tSimpleLivingString3_initToPool+0x280>
240135f8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
240135fc:	ee27 7b06 	vmul.f64	d7, d7, d6
24013600:	ee80 0b07 	vdiv.f64	d0, d0, d7
24013604:	f001 fd3c 	bl	24015080 <exp>
    p->pickupPoint = 0.9f;
24013608:	4a0f      	ldr	r2, [pc, #60]	; (24013648 <tSimpleLivingString3_initToPool+0x290>)
    p->prevDelayLength = p->waveLengthInSamples;
2401360a:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
2401360c:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
2401360e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
24013612:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24013614:	ed84 0a04 	vstr	s0, [r4, #16]
}
24013618:	b003      	add	sp, #12
2401361a:	ecbd 8b0a 	vpop	{d8-d12}
2401361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24013622:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2401364c <tSimpleLivingString3_initToPool+0x294>
24013626:	e73b      	b.n	240134a0 <tSimpleLivingString3_initToPool+0xe8>
24013628:	ed9f 0a08 	vldr	s0, [pc, #32]	; 2401364c <tSimpleLivingString3_initToPool+0x294>
2401362c:	e7cf      	b.n	240135ce <tSimpleLivingString3_initToPool+0x216>
2401362e:	bf00      	nop
24013630:	33333333 	.word	0x33333333
24013634:	40133333 	.word	0x40133333
24013638:	0a3d70a4 	.word	0x0a3d70a4
2401363c:	c01ba3d7 	.word	0xc01ba3d7
24013640:	3c23d70a 	.word	0x3c23d70a
24013644:	3d8d78c4 	.word	0x3d8d78c4
24013648:	3f666666 	.word	0x3f666666
2401364c:	4019999a 	.word	0x4019999a

24013650 <tSimpleLivingString3_free>:
{
24013650:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24013652:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_free(&p->wlSmooth);
24013654:	f104 0058 	add.w	r0, r4, #88	; 0x58
24013658:	f7fc ff7e 	bl	24010558 <tExpSmooth_free>
    tLinearDelay_free(&p->delayLineU);
2401365c:	f104 0034 	add.w	r0, r4, #52	; 0x34
24013660:	f7fc face 	bl	2400fc00 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineL);
24013664:	f104 0038 	add.w	r0, r4, #56	; 0x38
24013668:	f7fc faca 	bl	2400fc00 <tLinearDelay_free>
    tOnePole_free(&p->bridgeFilter);
2401366c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24013670:	f7fc ffb0 	bl	240105d4 <tOnePole_free>
    tBiQuad_free(&p->bridgeFilter2);
24013674:	f104 0040 	add.w	r0, r4, #64	; 0x40
24013678:	f7fd f858 	bl	2401072c <tBiQuad_free>
    tHighpass_free(&p->DCblocker);
2401367c:	f104 0050 	add.w	r0, r4, #80	; 0x50
24013680:	f7fd f9d4 	bl	24010a2c <tHighpass_free>
    tFeedbackLeveler_free(&p->fbLev);
24013684:	f104 0054 	add.w	r0, r4, #84	; 0x54
24013688:	f7fc fe6a 	bl	24010360 <tFeedbackLeveler_free>
    mpool_free((char*)p, p->mempool);
2401368c:	6821      	ldr	r1, [r4, #0]
2401368e:	4620      	mov	r0, r4
}
24013690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
24013694:	f7ff b8ee 	b.w	24012874 <mpool_free>

24013698 <tSimpleLivingString3_setFreq>:
{
24013698:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
2401369a:	6804      	ldr	r4, [r0, #0]
    Lfloat waveLength = (p->sampleRate/freq);
2401369c:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
240136a0:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
240136a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
240136a8:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 24013720 <tSimpleLivingString3_setFreq+0x88>
240136ac:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
240136b0:	eeb4 5bc6 	vcmpe.f64	d5, d6
240136b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240136b8:	d42e      	bmi.n	24013718 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
240136ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
240136bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
240136c0:	005b      	lsls	r3, r3, #1
240136c2:	ee00 3a10 	vmov	s0, r3
240136c6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
240136ca:	fe80 0a67 	vminnm.f32	s0, s0, s15
240136ce:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240136d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
240136d6:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240136da:	f019 faad 	bl	2402cc38 <__tExpSmooth_setDest_veneer>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240136de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240136e2:	ed94 7a05 	vldr	s14, [r4, #20]
240136e6:	eddf 7a12 	vldr	s15, [pc, #72]	; 24013730 <tSimpleLivingString3_setFreq+0x98>
240136ea:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240136ee:	ed94 6a01 	vldr	s12, [r4, #4]
240136f2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240136f6:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
240136fa:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 24013728 <tSimpleLivingString3_setFreq+0x90>
240136fe:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24013702:	ee27 7b06 	vmul.f64	d7, d7, d6
24013706:	ee80 0b07 	vdiv.f64	d0, d0, d7
2401370a:	f001 fcb9 	bl	24015080 <exp>
2401370e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24013712:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
24013716:	bd10      	pop	{r4, pc}
24013718:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24013734 <tSimpleLivingString3_setFreq+0x9c>
2401371c:	e7d9      	b.n	240136d2 <tSimpleLivingString3_setFreq+0x3a>
2401371e:	bf00      	nop
24013720:	33333333 	.word	0x33333333
24013724:	40133333 	.word	0x40133333
24013728:	0a3d70a4 	.word	0x0a3d70a4
2401372c:	c01ba3d7 	.word	0xc01ba3d7
24013730:	3d8d78c4 	.word	0x3d8d78c4
24013734:	4019999a 	.word	0x4019999a

24013738 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24013738:	6800      	ldr	r0, [r0, #0]
2401373a:	303c      	adds	r0, #60	; 0x3c
2401373c:	f7fc bf4e 	b.w	240105dc <tOnePole_setFreq>

24013740 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24013740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24013744:	eddf 7a10 	vldr	s15, [pc, #64]	; 24013788 <tSimpleLivingString3_setDecay+0x48>
{
24013748:	b510      	push	{r4, lr}
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
2401374a:	ee30 7a07 	vadd.f32	s14, s0, s14
    _tSimpleLivingString3* p = *pl;
2401374e:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24013750:	ed94 6a01 	vldr	s12, [r4, #4]
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24013754:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->userDecay = decay;
24013758:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
2401375c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
24013760:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24013764:	ed9f 5b06 	vldr	d5, [pc, #24]	; 24013780 <tSimpleLivingString3_setDecay+0x40>
24013768:	ee27 7b06 	vmul.f64	d7, d7, d6
2401376c:	ee85 0b07 	vdiv.f64	d0, d5, d7
24013770:	f001 fc86 	bl	24015080 <exp>
24013774:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24013778:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
2401377c:	bd10      	pop	{r4, pc}
2401377e:	bf00      	nop
24013780:	52bd3c36 	.word	0x52bd3c36
24013784:	c01ba196 	.word	0xc01ba196
24013788:	3d8d78c4 	.word	0x3d8d78c4

2401378c <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
2401378c:	6800      	ldr	r0, [r0, #0]
2401378e:	3054      	adds	r0, #84	; 0x54
24013790:	f7fc be22 	b.w	240103d8 <tFeedbackLeveler_setTargetLevel>

24013794 <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
24013794:	6800      	ldr	r0, [r0, #0]
24013796:	3054      	adds	r0, #84	; 0x54
24013798:	f7fc bdf2 	b.w	24010380 <tFeedbackLeveler_setFactor>

2401379c <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
2401379c:	6800      	ldr	r0, [r0, #0]
2401379e:	3054      	adds	r0, #84	; 0x54
240137a0:	f7fc bdea 	b.w	24010378 <tFeedbackLeveler_setStrength>

240137a4 <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
240137a4:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
240137a6:	6805      	ldr	r5, [r0, #0]
{
240137a8:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
240137aa:	f105 0054 	add.w	r0, r5, #84	; 0x54
240137ae:	f7fc fdeb 	bl	24010388 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
240137b2:	622c      	str	r4, [r5, #32]
}
240137b4:	bd38      	pop	{r3, r4, r5, pc}
240137b6:	bf00      	nop

240137b8 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
240137b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tSimpleLivingString3* p = *pl;
240137bc:	6801      	ldr	r1, [r0, #0]
{
240137be:	b082      	sub	sp, #8
    int length = p->waveLengthInSamples;
240137c0:	edd1 7a02 	vldr	s15, [r1, #8]
240137c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240137c8:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
240137cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240137d0:	ee67 0aa0 	vmul.f32	s1, s15, s1
240137d4:	eefd 7ae0 	vcvt.s32.f32	s15, s1
240137d8:	ee17 3a90 	vmov	r3, s15
    if (pluckPoint < 1)
240137dc:	2b00      	cmp	r3, #0
240137de:	f340 8081 	ble.w	240138e4 <tSimpleLivingString3_pluck+0x12c>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
240137e2:	4298      	cmp	r0, r3
240137e4:	dc0f      	bgt.n	24013806 <tSimpleLivingString3_pluck+0x4e>
    {
    	pluckPoint = length-1;
240137e6:	1e47      	subs	r7, r0, #1
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
240137e8:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
240137ea:	463b      	mov	r3, r7
    for (int i = 0; i < length; i++)
240137ec:	dd77      	ble.n	240138de <tSimpleLivingString3_pluck+0x126>
    {
        Lfloat val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
240137ee:	ee07 7a90 	vmov	s15, r7
240137f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240137f6:	2f00      	cmp	r7, #0
240137f8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
240137fc:	ee86 7a86 	vdiv.f32	s14, s13, s12
24013800:	da0f      	bge.n	24013822 <tSimpleLivingString3_pluck+0x6a>
24013802:	2300      	movs	r3, #0
24013804:	e02b      	b.n	2401385e <tSimpleLivingString3_pluck+0xa6>
    int remainder = length-pluckPoint;
24013806:	1ac2      	subs	r2, r0, r3
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013808:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
2401380c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24013810:	1e47      	subs	r7, r0, #1
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013812:	ee07 2a90 	vmov	s15, r2
24013816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401381a:	ee85 7a86 	vdiv.f32	s14, s11, s12
2401381e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24013822:	429f      	cmp	r7, r3
24013824:	bfa8      	it	ge
24013826:	461f      	movge	r7, r3
    for (int i = 0; i < length; i++)
24013828:	2300      	movs	r3, #0
2401382a:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
2401382e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013830:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013834:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
2401383c:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
2401383e:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
24013840:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013842:	fbb2 f6f5 	udiv	r6, r2, r5
24013846:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
2401384a:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
2401384e:	42bb      	cmp	r3, r7
        p->delayLineU->buff[bufWritePoint] = val;
24013850:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24013854:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24013858:	dde9      	ble.n	2401382e <tSimpleLivingString3_pluck+0x76>
2401385a:	4298      	cmp	r0, r3
2401385c:	dd1d      	ble.n	2401389a <tSimpleLivingString3_pluck+0xe2>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
2401385e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24013862:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013866:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013868:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2401386c:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013870:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24013874:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
24013878:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
2401387a:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
2401387c:	3301      	adds	r3, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
2401387e:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
24013882:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24013884:	fbb2 f6f5 	udiv	r6, r2, r5
24013888:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
2401388c:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
24013890:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24013894:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24013898:	dce3      	bgt.n	24013862 <tSimpleLivingString3_pluck+0xaa>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
2401389a:	f04f 0c00 	mov.w	ip, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
2401389e:	eba0 020c 	sub.w	r2, r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
240138a2:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
240138a6:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
240138a8:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
240138aa:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
240138ac:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
240138ae:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
240138b0:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
240138b2:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
240138b4:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
240138b6:	4463      	add	r3, ip
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
240138b8:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
240138ba:	f10c 0c01 	add.w	ip, ip, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
240138be:	fbb2 f8f7 	udiv	r8, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
240138c2:	fbb3 fef6 	udiv	lr, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
240138c6:	fb07 2218 	mls	r2, r7, r8, r2
    for (int i = 0; i < length; i++)
240138ca:	4560      	cmp	r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
240138cc:	fb06 331e 	mls	r3, r6, lr, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
240138d0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
240138d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
240138d8:	6812      	ldr	r2, [r2, #0]
240138da:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
240138dc:	d1df      	bne.n	2401389e <tSimpleLivingString3_pluck+0xe6>
    }
}
240138de:	b002      	add	sp, #8
240138e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (int i = 0; i < length; i++)
240138e4:	2800      	cmp	r0, #0
240138e6:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
240138ea:	ddf8      	ble.n	240138de <tSimpleLivingString3_pluck+0x126>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240138ec:	ee07 7a10 	vmov	s14, r7
240138f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
240138f4:	2301      	movs	r3, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240138f6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
240138fa:	eeb0 7a67 	vmov.f32	s14, s15
240138fe:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24013902:	eeb0 6a67 	vmov.f32	s12, s15
24013906:	e78c      	b.n	24013822 <tSimpleLivingString3_pluck+0x6a>

24013908 <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
24013908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2401390c:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
24013910:	6804      	ldr	r4, [r0, #0]
{
24013912:	eef0 8a40 	vmov.f32	s17, s0

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
24013916:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
2401391a:	f104 0534 	add.w	r5, r4, #52	; 0x34
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
2401391e:	f019 f96f 	bl	2402cc00 <__tExpSmooth_tick_veneer>
24013922:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
24013926:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
2401392a:	4628      	mov	r0, r5
2401392c:	f7fc f9fe 	bl	2400fd2c <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
24013930:	eeb0 0a48 	vmov.f32	s0, s16
24013934:	4638      	mov	r0, r7
24013936:	f7fc f9f9 	bl	2400fd2c <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
2401393a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
2401393c:	2b00      	cmp	r3, #0
2401393e:	dd56      	ble.n	240139ee <tSimpleLivingString3_tick+0xe6>
    {
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay - p->rippleGain));
24013940:	f104 0a50 	add.w	sl, r4, #80	; 0x50
24013944:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24013948:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
2401394c:	2600      	movs	r6, #0
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay - p->rippleGain));
2401394e:	4628      	mov	r0, r5
    for (int i = 0; i < p->oversampling; i++)
24013950:	3601      	adds	r6, #1
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay - p->rippleGain));
24013952:	f7fc f9bf 	bl	2400fcd4 <tLinearDelay_tickOut>
24013956:	4648      	mov	r0, r9
24013958:	f7fc fe5e 	bl	24010618 <tOnePole_tick>
2401395c:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
24013960:	edd4 7a04 	vldr	s15, [r4, #16]
24013964:	4650      	mov	r0, sl
24013966:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401396a:	ee27 0a80 	vmul.f32	s0, s15, s0
2401396e:	f7fd f86d 	bl	24010a4c <tHighpass_tick>
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24013972:	4640      	mov	r0, r8
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay - p->rippleGain));
24013974:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24013978:	f7fc fd0a 	bl	24010390 <tFeedbackLeveler_tick>
2401397c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24013980:	eef0 0a40 	vmov.f32	s1, s0
24013984:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24013988:	f019 f962 	bl	2402cc50 <__LEAF_clip_veneer>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
2401398c:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
2401398e:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
24013992:	f7fc f99f 	bl	2400fcd4 <tLinearDelay_tickOut>
24013996:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2401399a:	eef0 0a40 	vmov.f32	s1, s0
2401399e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240139a2:	f019 f955 	bl	2402cc50 <__LEAF_clip_veneer>
240139a6:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
240139aa:	4628      	mov	r0, r5
240139ac:	ee38 0ac0 	vsub.f32	s0, s17, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
240139b0:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
240139b4:	f7fc f97a 	bl	2400fcac <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
240139b8:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
240139bc:	4638      	mov	r0, r7
240139be:	eeb1 0a40 	vneg.f32	s0, s0
240139c2:	f7fc f973 	bl	2400fcac <tLinearDelay_tickIn>
		tLinearDelay_addTo (&p->delayLineU, p->Lout * p->rippleGain, p->rippleDelay*wl);
240139c6:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
240139ca:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
240139ce:	4628      	mov	r0, r5
240139d0:	ee68 7a27 	vmul.f32	s15, s16, s15
240139d4:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
240139d8:	ee26 0a80 	vmul.f32	s0, s13, s0
240139dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240139e0:	ee17 1a90 	vmov	r1, s15
240139e4:	f7fc f9e2 	bl	2400fdac <tLinearDelay_addTo>
    for (int i = 0; i < p->oversampling; i++)
240139e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
240139ea:	42b3      	cmp	r3, r6
240139ec:	dcaf      	bgt.n	2401394e <tSimpleLivingString3_tick+0x46>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
240139ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    Lfloat point = wl * p->pickupPoint;
240139f2:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    Lfloat LfloatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
240139f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
240139f8:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    Lfloat point = wl * p->pickupPoint;
240139fc:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24013a00:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
24013a02:	ee77 6ae6 	vsub.f32	s13, s15, s13
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24013a06:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
24013a08:	feb8 6a65 	vrinta.f32	s12, s11
24013a0c:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
24013a10:	ee66 6a88 	vmul.f32	s13, s13, s16
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24013a14:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
24013a18:	feb8 7a66 	vrinta.f32	s14, s13
24013a1c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24013a20:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24013a24:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24013a28:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24013a2c:	ee17 0a10 	vmov	r0, s14
    Lfloat LfloatPart = point - whichPoint;
24013a30:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24013a34:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24013a36:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24013a38:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24013a3c:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24013a3e:	fb07 2216 	mls	r2, r7, r6, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24013a42:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24013a46:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
24013a48:	69c8      	ldr	r0, [r1, #28]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24013a4a:	6889      	ldr	r1, [r1, #8]
    Lfloat LfloatPart = point - whichPoint;
24013a4c:	ee75 5ac6 	vsub.f32	s11, s11, s12
    LfloatPart = reversePoint - whichPoint;
24013a50:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
24013a54:	fb93 f6f0 	sdiv	r6, r3, r0
24013a58:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24013a5c:	1c56      	adds	r6, r2, #1
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24013a5e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24013a62:	ee30 0a06 	vadd.f32	s0, s0, s12
    LfloatPart = reversePoint - whichPoint;
24013a66:	ee76 6ac6 	vsub.f32	s13, s13, s12
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24013a6a:	ed92 7a00 	vldr	s14, [r2]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24013a6e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24013a72:	3301      	adds	r3, #1
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24013a74:	ed92 6a00 	vldr	s12, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24013a78:	fb96 f2f7 	sdiv	r2, r6, r7
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24013a7c:	ee20 0a06 	vmul.f32	s0, s0, s12
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
24013a80:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
24013a84:	68a2      	ldr	r2, [r4, #8]
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24013a86:	eb05 0586 	add.w	r5, r5, r6, lsl #2
24013a8a:	eea7 0a27 	vfma.f32	s0, s14, s15
24013a8e:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
24013a92:	fb93 f5f0 	sdiv	r5, r3, r0
24013a96:	eea7 0aa5 	vfma.f32	s0, s15, s11
24013a9a:	fb00 3315 	mls	r3, r0, r5, r3
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24013a9e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24013aa2:	edd1 7a00 	vldr	s15, [r1]
    p->prevDelayLength = p->waveLengthInSamples;
24013aa6:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24013aa8:	eea7 0aa6 	vfma.f32	s0, s15, s13
24013aac:	ee20 0a24 	vmul.f32	s0, s0, s9
24013ab0:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
24013ab4:	ecbd 8b02 	vpop	{d8}
24013ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

24013abc <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
24013abc:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
24013abe:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
24013ac2:	4770      	bx	lr

24013ac4 <tLivingString2_initToPool>:
}

void    tLivingString2_initToPool    (tLivingString2* const pl, Lfloat freq, Lfloat pickPos, Lfloat prepPos, Lfloat pickupPos, Lfloat prepIndex,
                                     Lfloat brightness, Lfloat decay, Lfloat targetLev, Lfloat levSmoothFactor,
                                     Lfloat levStrength, int levMode, tMempool* const mp)
{
24013ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24013ac8:	ed2d 8b0c 	vpush	{d8-d13}
    _tMempool* m = *mp;
24013acc:	f8d2 8000 	ldr.w	r8, [r2]
{
24013ad0:	4606      	mov	r6, r0
24013ad2:	b083      	sub	sp, #12
24013ad4:	460f      	mov	r7, r1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
24013ad6:	2070      	movs	r0, #112	; 0x70
24013ad8:	4641      	mov	r1, r8
{
24013ada:	eef0 ca61 	vmov.f32	s25, s3
24013ade:	4615      	mov	r5, r2
24013ae0:	eeb0 8a42 	vmov.f32	s16, s4
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;

    p->sampleRate = leaf->sampleRate;
    p->curr=0.0f;
24013ae4:	ed9f da99 	vldr	s26, [pc, #612]	; 24013d4c <tLivingString2_initToPool+0x288>
{
24013ae8:	eef0 9a62 	vmov.f32	s19, s5
24013aec:	eef0 aa63 	vmov.f32	s21, s7
24013af0:	eeb0 ba43 	vmov.f32	s22, s6
24013af4:	eef0 8a41 	vmov.f32	s17, s2
24013af8:	eef0 ba44 	vmov.f32	s23, s8
24013afc:	eeb0 ca64 	vmov.f32	s24, s9
24013b00:	eeb0 aa40 	vmov.f32	s20, s0
24013b04:	eeb0 9a60 	vmov.f32	s18, s1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
24013b08:	f7fe fdf2 	bl	240126f0 <mpool_alloc>
24013b0c:	6030      	str	r0, [r6, #0]
24013b0e:	4604      	mov	r4, r0
    p->mempool = m;
24013b10:	f8c0 8000 	str.w	r8, [r0]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24013b14:	4629      	mov	r1, r5
    p->sampleRate = leaf->sampleRate;
24013b16:	f8d8 3004 	ldr.w	r3, [r8, #4]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24013b1a:	305c      	adds	r0, #92	; 0x5c
24013b1c:	eddf 0a8c 	vldr	s1, [pc, #560]	; 24013d50 <tLivingString2_initToPool+0x28c>
    
    if (freq<20.f) freq=20.f;
    else if (freq>10000.f) freq=10000.f;
    freq = freq*2;
    p->freq = freq;
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24013b20:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
    p->sampleRate = leaf->sampleRate;
24013b24:	edd3 7a00 	vldr	s15, [r3]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
24013b28:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
    p->curr=0.0f;
24013b2c:	ed00 da0d 	vstr	s26, [r0, #-52]	; 0xffffffcc
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
24013b30:	f104 0a30 	add.w	sl, r4, #48	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24013b34:	ee87 0a8a 	vdiv.f32	s0, s15, s20
    p->sampleRate = leaf->sampleRate;
24013b38:	edc0 7a04 	vstr	s15, [r0, #16]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24013b3c:	f7fc fce0 	bl	24010500 <tExpSmooth_initToPool>
    freq = freq*2;
24013b40:	eddf 7a84 	vldr	s15, [pc, #528]	; 24013d54 <tLivingString2_initToPool+0x290>
    _tLivingString2* p = *pl;
24013b44:	6830      	ldr	r0, [r6, #0]
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
24013b46:	f104 0934 	add.w	r9, r4, #52	; 0x34
    freq = freq*2;
24013b4a:	feca 7a67 	vminnm.f32	s15, s20, s15
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
24013b4e:	f104 0838 	add.w	r8, r4, #56	; 0x38
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013b52:	305c      	adds	r0, #92	; 0x5c
    freq = freq*2;
24013b54:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
24013b58:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
24013b5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24013b60:	ed90 7a04 	vldr	s14, [r0, #16]
24013b64:	ee87 0a27 	vdiv.f32	s0, s14, s15
    p->freq = freq;
24013b68:	ed40 7a16 	vstr	s15, [r0, #-88]	; 0xffffffa8
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24013b6c:	ee30 0a6d 	vsub.f32	s0, s0, s27
24013b70:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013b74:	f019 f860 	bl	2402cc38 <__tExpSmooth_setDest_veneer>
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
24013b78:	eddf 0a77 	vldr	s1, [pc, #476]	; 24013d58 <tLivingString2_initToPool+0x294>
24013b7c:	eeb0 0a49 	vmov.f32	s0, s18
24013b80:	f104 0060 	add.w	r0, r4, #96	; 0x60
24013b84:	4629      	mov	r1, r5
    p->freq = freq;
24013b86:	ed84 aa01 	vstr	s20, [r4, #4]
    p->prepPos = prepPos;
24013b8a:	edc4 8a04 	vstr	s17, [r4, #16]
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
24013b8e:	edcd 0a00 	vstr	s1, [sp]
24013b92:	f7fc fcb5 	bl	24010500 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->prpSmooth, prepPos, 0.01f, mp); // smoother for prep position
24013b96:	eeb0 0a68 	vmov.f32	s0, s17
24013b9a:	4629      	mov	r1, r5
24013b9c:	eddd 0a00 	vldr	s1, [sp]
24013ba0:	f104 0064 	add.w	r0, r4, #100	; 0x64
24013ba4:	f7fc fcac 	bl	24010500 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->puSmooth, pickupPos, 0.01f, mp); // smoother for pickup position
24013ba8:	eddd 0a00 	vldr	s1, [sp]
24013bac:	4629      	mov	r1, r5
24013bae:	eeb0 0a6c 	vmov.f32	s0, s25
24013bb2:	f104 0068 	add.w	r0, r4, #104	; 0x68
24013bb6:	f7fc fca3 	bl	24010500 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tLivingString2_setPickPos(tLivingString2* const pl, Lfloat pickPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
24013bba:	6830      	ldr	r0, [r6, #0]
    if (pickPos<0.f) pickPos=0.f;
24013bbc:	fe89 0a6d 	vminnm.f32	s0, s18, s27
24013bc0:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (pickPos>1.f) pickPos=1.f;
    p->pickPos = pickPos;
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
24013bc4:	3060      	adds	r0, #96	; 0x60
    p->pickPos = pickPos;
24013bc6:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
24013bca:	f019 f835 	bl	2402cc38 <__tExpSmooth_setDest_veneer>
}

void     tLivingString2_setPrepPos(tLivingString2* const pl, Lfloat prepPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
24013bce:	6830      	ldr	r0, [r6, #0]
    if (prepPos<0.f) prepPos=0.f;
24013bd0:	fe88 0aed 	vminnm.f32	s0, s17, s27
24013bd4:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (prepPos>1.f) prepPos=1.f;
    p->prepPos = prepPos;
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
24013bd8:	3064      	adds	r0, #100	; 0x64
    p->prepPos = prepPos;
24013bda:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
24013bde:	f019 f82b 	bl	2402cc38 <__tExpSmooth_setDest_veneer>
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
24013be2:	ed94 0a02 	vldr	s0, [r4, #8]
24013be6:	462a      	mov	r2, r5
24013be8:	4658      	mov	r0, fp
24013bea:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->prepIndex = prepIndex;
24013bee:	ed84 8a06 	vstr	s16, [r4, #24]
    p->pickupPos = pickupPos;
24013bf2:	edc4 ca05 	vstr	s25, [r4, #20]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
24013bf6:	f7fc f8eb 	bl	2400fdd0 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
24013bfa:	ed94 0a02 	vldr	s0, [r4, #8]
24013bfe:	462a      	mov	r2, r5
24013c00:	4650      	mov	r0, sl
24013c02:	f44f 6116 	mov.w	r1, #2400	; 0x960
24013c06:	f7fc f8e3 	bl	2400fdd0 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
24013c0a:	ed94 0a02 	vldr	s0, [r4, #8]
24013c0e:	462a      	mov	r2, r5
24013c10:	4648      	mov	r0, r9
24013c12:	f44f 6116 	mov.w	r1, #2400	; 0x960
24013c16:	f7fc f8db 	bl	2400fdd0 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
24013c1a:	462a      	mov	r2, r5
24013c1c:	ed94 0a02 	vldr	s0, [r4, #8]
24013c20:	f44f 6116 	mov.w	r1, #2400	; 0x960
24013c24:	4640      	mov	r0, r8
24013c26:	f7fc f8d3 	bl	2400fdd0 <tHermiteDelay_initToPool>
    tHermiteDelay_clear(&p->delLF);
24013c2a:	4658      	mov	r0, fp
24013c2c:	f7fc f954 	bl	2400fed8 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUF);
24013c30:	4650      	mov	r0, sl
24013c32:	f7fc f951 	bl	2400fed8 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUB);
24013c36:	4648      	mov	r0, r9
24013c38:	f7fc f94e 	bl	2400fed8 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delLB);
24013c3c:	4640      	mov	r0, r8
24013c3e:	f7fc f94b 	bl	2400fed8 <tHermiteDelay_clear>
    tTwoZero_initToPool(&p->bridgeFilter, mp);
24013c42:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24013c46:	4629      	mov	r1, r5
    p->brightness = brightness;
24013c48:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    tTwoZero_initToPool(&p->bridgeFilter, mp);
24013c4c:	f7fc fd1a 	bl	24010684 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->nutFilter, mp);
24013c50:	4629      	mov	r1, r5
24013c52:	f104 0040 	add.w	r0, r4, #64	; 0x40
24013c56:	f7fc fd15 	bl	24010684 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterU, mp);
24013c5a:	4629      	mov	r1, r5
24013c5c:	f104 0044 	add.w	r0, r4, #68	; 0x44
24013c60:	f7fc fd10 	bl	24010684 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterL, mp);
24013c64:	4629      	mov	r1, r5
24013c66:	f104 0048 	add.w	r0, r4, #72	; 0x48
24013c6a:	f7fc fd0b 	bl	24010684 <tTwoZero_initToPool>
}

void     tLivingString2_setBrightness(tLivingString2* const pl, Lfloat brightness)
{
    _tLivingString2* p = *pl;
    Lfloat h0=(1.0 + brightness) * 0.5f;
24013c6e:	eeb7 5ae9 	vcvt.f64.f32	d5, s19
24013c72:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    _tLivingString2* p = *pl;
24013c76:	6836      	ldr	r6, [r6, #0]
    Lfloat h0=(1.0 + brightness) * 0.5f;
24013c78:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    Lfloat h1=(1.0 - brightness) * 0.25f;
24013c7c:	eeb5 4b00 	vmov.f64	d4, #80	; 0x3e800000  0.250

    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
24013c80:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    Lfloat h0=(1.0 + brightness) * 0.5f;
24013c84:	ee05 6b06 	vmla.f64	d6, d5, d6
    Lfloat h1=(1.0 - brightness) * 0.25f;
24013c88:	ee37 7b45 	vsub.f64	d7, d7, d5
24013c8c:	ee27 7b04 	vmul.f64	d7, d7, d4
    Lfloat h0=(1.0 + brightness) * 0.5f;
24013c90:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    Lfloat h1=(1.0 - brightness) * 0.25f;
24013c94:	eeb7 1bc7 	vcvt.f32.f64	s2, d7
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
24013c98:	edcd 0a00 	vstr	s1, [sp]
24013c9c:	eeb0 0a41 	vmov.f32	s0, s2
24013ca0:	ed8d 1a01 	vstr	s2, [sp, #4]
24013ca4:	f7fc fd22 	bl	240106ec <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
24013ca8:	ed9d 1a01 	vldr	s2, [sp, #4]
24013cac:	eddd 0a00 	vldr	s1, [sp]
24013cb0:	f106 0040 	add.w	r0, r6, #64	; 0x40
24013cb4:	eeb0 0a41 	vmov.f32	s0, s2
24013cb8:	ed8d 1a00 	vstr	s2, [sp]
24013cbc:	edcd 0a01 	vstr	s1, [sp, #4]
24013cc0:	f7fc fd14 	bl	240106ec <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
24013cc4:	ed9d 1a00 	vldr	s2, [sp]
24013cc8:	f106 0044 	add.w	r0, r6, #68	; 0x44
24013ccc:	eddd 0a01 	vldr	s1, [sp, #4]
24013cd0:	eeb0 0a41 	vmov.f32	s0, s2
24013cd4:	f7fc fd0a 	bl	240106ec <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
24013cd8:	ed9d 1a00 	vldr	s2, [sp]
24013cdc:	eddd 0a01 	vldr	s1, [sp, #4]
24013ce0:	f106 0048 	add.w	r0, r6, #72	; 0x48
24013ce4:	eeb0 0a41 	vmov.f32	s0, s2
24013ce8:	f7fc fd00 	bl	240106ec <tTwoZero_setCoefficients>
    tHighpass_initToPool(&p->DCblockerU,8, mp);
24013cec:	4629      	mov	r1, r5
24013cee:	f104 0050 	add.w	r0, r4, #80	; 0x50
24013cf2:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
24013cf6:	f7fc fe79 	bl	240109ec <tHighpass_initToPool>
    tHighpass_initToPool(&p->DCblockerL,8, mp);
24013cfa:	4629      	mov	r1, r5
24013cfc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
24013d00:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
24013d04:	f7fc fe72 	bl	240109ec <tHighpass_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
24013d08:	eeb0 1a4c 	vmov.f32	s2, s24
24013d0c:	eef0 0a6b 	vmov.f32	s1, s23
24013d10:	f104 0054 	add.w	r0, r4, #84	; 0x54
24013d14:	eeb0 0a6a 	vmov.f32	s0, s21
24013d18:	462a      	mov	r2, r5
24013d1a:	4639      	mov	r1, r7
    p->decay=decay;
24013d1c:	ed84 ba07 	vstr	s22, [r4, #28]
    p->prepIndex = prepIndex;
24013d20:	ed84 8a06 	vstr	s16, [r4, #24]
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
24013d24:	f7fc faf4 	bl	24010310 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevL, targetLev, levSmoothFactor, levStrength, levMode, mp);
24013d28:	eeb0 1a4c 	vmov.f32	s2, s24
24013d2c:	eef0 0a6b 	vmov.f32	s1, s23
24013d30:	462a      	mov	r2, r5
24013d32:	eeb0 0a6a 	vmov.f32	s0, s21
24013d36:	4639      	mov	r1, r7
24013d38:	f104 0058 	add.w	r0, r4, #88	; 0x58
24013d3c:	f7fc fae8 	bl	24010310 <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
24013d40:	6227      	str	r7, [r4, #32]
}
24013d42:	b003      	add	sp, #12
24013d44:	ecbd 8b0c 	vpop	{d8-d13}
24013d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24013d4c:	00000000 	.word	0x00000000
24013d50:	3dcccccd 	.word	0x3dcccccd
24013d54:	461c4000 	.word	0x461c4000
24013d58:	3c23d70a 	.word	0x3c23d70a

24013d5c <tLivingString2_free>:
{
24013d5c:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
24013d5e:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_free(&p->wlSmooth);
24013d60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
24013d64:	f7fc fbf8 	bl	24010558 <tExpSmooth_free>
    tExpSmooth_free(&p->ppSmooth);
24013d68:	f104 0060 	add.w	r0, r4, #96	; 0x60
24013d6c:	f7fc fbf4 	bl	24010558 <tExpSmooth_free>
    tExpSmooth_free(&p->prpSmooth);
24013d70:	f104 0064 	add.w	r0, r4, #100	; 0x64
24013d74:	f7fc fbf0 	bl	24010558 <tExpSmooth_free>
    tExpSmooth_free(&p->puSmooth);
24013d78:	f104 0068 	add.w	r0, r4, #104	; 0x68
24013d7c:	f7fc fbec 	bl	24010558 <tExpSmooth_free>
    tHermiteDelay_free(&p->delLF);
24013d80:	f104 002c 	add.w	r0, r4, #44	; 0x2c
24013d84:	f7fc f89c 	bl	2400fec0 <tHermiteDelay_free>
    tHermiteDelay_free(&p->delUF);
24013d88:	f104 0030 	add.w	r0, r4, #48	; 0x30
24013d8c:	f7fc f898 	bl	2400fec0 <tHermiteDelay_free>
    tHermiteDelay_free(&p->delUB);
24013d90:	f104 0034 	add.w	r0, r4, #52	; 0x34
24013d94:	f7fc f894 	bl	2400fec0 <tHermiteDelay_free>
    tHermiteDelay_free(&p->delLB);
24013d98:	f104 0038 	add.w	r0, r4, #56	; 0x38
24013d9c:	f7fc f890 	bl	2400fec0 <tHermiteDelay_free>
    tTwoZero_free(&p->bridgeFilter);
24013da0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24013da4:	f7fc fc82 	bl	240106ac <tTwoZero_free>
    tTwoZero_free(&p->nutFilter);
24013da8:	f104 0040 	add.w	r0, r4, #64	; 0x40
24013dac:	f7fc fc7e 	bl	240106ac <tTwoZero_free>
    tTwoZero_free(&p->prepFilterU);
24013db0:	f104 0044 	add.w	r0, r4, #68	; 0x44
24013db4:	f7fc fc7a 	bl	240106ac <tTwoZero_free>
    tTwoZero_free(&p->prepFilterL);
24013db8:	f104 0048 	add.w	r0, r4, #72	; 0x48
24013dbc:	f7fc fc76 	bl	240106ac <tTwoZero_free>
    tHighpass_free(&p->DCblockerU);
24013dc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
24013dc4:	f7fc fe32 	bl	24010a2c <tHighpass_free>
    tHighpass_free(&p->DCblockerL);
24013dc8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
24013dcc:	f7fc fe2e 	bl	24010a2c <tHighpass_free>
    tFeedbackLeveler_free(&p->fbLevU);
24013dd0:	f104 0054 	add.w	r0, r4, #84	; 0x54
24013dd4:	f7fc fac4 	bl	24010360 <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&p->fbLevL);
24013dd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
24013ddc:	f7fc fac0 	bl	24010360 <tFeedbackLeveler_free>
    mpool_free((char*)p, p->mempool);
24013de0:	6821      	ldr	r1, [r4, #0]
24013de2:	4620      	mov	r0, r4
}
24013de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
24013de8:	f7fe bd44 	b.w	24012874 <mpool_free>

24013dec <tLivingString2_setFreq>:
    _tLivingString2* p = *pl;
24013dec:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
24013df0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24013e24 <tLivingString2_setFreq+0x38>
24013df4:	6803      	ldr	r3, [r0, #0]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24013df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24013dfa:	fe80 0a66 	vminnm.f32	s0, s0, s13
24013dfe:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    freq = freq*2;
24013e02:	ee30 0a00 	vadd.f32	s0, s0, s0
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24013e06:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013e0a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24013e0e:	eec6 7a80 	vdiv.f32	s15, s13, s0
    p->freq = freq;
24013e12:	ed83 0a01 	vstr	s0, [r3, #4]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
24013e16:	ee37 0ac7 	vsub.f32	s0, s15, s14
24013e1a:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24013e1e:	f018 bf0b 	b.w	2402cc38 <__tExpSmooth_setDest_veneer>
24013e22:	bf00      	nop
24013e24:	461c4000 	.word	0x461c4000

24013e28 <tLivingString2_setPickPos>:
    _tLivingString2* p = *pl;
24013e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24013e2c:	6803      	ldr	r3, [r0, #0]
    if (pickPos<0.f) pickPos=0.f;
24013e2e:	eddf 7a06 	vldr	s15, [pc, #24]	; 24013e48 <tLivingString2_setPickPos+0x20>
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
24013e32:	f103 0060 	add.w	r0, r3, #96	; 0x60
24013e36:	fe80 0a47 	vminnm.f32	s0, s0, s14
24013e3a:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickPos = pickPos;
24013e3e:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
24013e42:	f018 bef9 	b.w	2402cc38 <__tExpSmooth_setDest_veneer>
24013e46:	bf00      	nop
24013e48:	00000000 	.word	0x00000000

24013e4c <tLivingString2_setPrepPos>:
    _tLivingString2* p = *pl;
24013e4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24013e50:	6803      	ldr	r3, [r0, #0]
    if (prepPos<0.f) prepPos=0.f;
24013e52:	eddf 7a06 	vldr	s15, [pc, #24]	; 24013e6c <tLivingString2_setPrepPos+0x20>
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
24013e56:	f103 0064 	add.w	r0, r3, #100	; 0x64
24013e5a:	fe80 0a47 	vminnm.f32	s0, s0, s14
24013e5e:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->prepPos = prepPos;
24013e62:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
24013e66:	f018 bee7 	b.w	2402cc38 <__tExpSmooth_setDest_veneer>
24013e6a:	bf00      	nop
24013e6c:	00000000 	.word	0x00000000

24013e70 <tLivingString2_setPickupPos>:
    _tLivingString2* p = *pl;
24013e70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24013e74:	6803      	ldr	r3, [r0, #0]
    if (pickupPos<0.f) pickupPos=0.f;
24013e76:	eddf 7a06 	vldr	s15, [pc, #24]	; 24013e90 <tLivingString2_setPickupPos+0x20>
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
24013e7a:	f103 0068 	add.w	r0, r3, #104	; 0x68
24013e7e:	fe80 0a47 	vminnm.f32	s0, s0, s14
24013e82:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickupPos = pickupPos;
24013e86:	ed83 0a05 	vstr	s0, [r3, #20]
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
24013e8a:	f018 bed5 	b.w	2402cc38 <__tExpSmooth_setDest_veneer>
24013e8e:	bf00      	nop
24013e90:	00000000 	.word	0x00000000

24013e94 <tLivingString2_setPrepIndex>:
    p->prepIndex = prepIndex;
24013e94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24013e98:	eddf 7a04 	vldr	s15, [pc, #16]	; 24013eac <tLivingString2_setPrepIndex+0x18>
    _tLivingString2* p = *pl;
24013e9c:	6803      	ldr	r3, [r0, #0]
    p->prepIndex = prepIndex;
24013e9e:	fe80 0a47 	vminnm.f32	s0, s0, s14
24013ea2:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
24013ea6:	ed83 0a06 	vstr	s0, [r3, #24]
}
24013eaa:	4770      	bx	lr
24013eac:	00000000 	.word	0x00000000

24013eb0 <tLivingString2_setBrightness>:
    Lfloat h0=(1.0 + brightness) * 0.5f;
24013eb0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24013eb4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
24013eb8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    Lfloat h1=(1.0 - brightness) * 0.25f;
24013ebc:	eeb5 1b00 	vmov.f64	d1, #80	; 0x3e800000  0.250
    Lfloat h0=(1.0 + brightness) * 0.5f;
24013ec0:	ee00 6b06 	vmla.f64	d6, d0, d6
    Lfloat h1=(1.0 - brightness) * 0.25f;
24013ec4:	ee37 7b40 	vsub.f64	d7, d7, d0
{
24013ec8:	b510      	push	{r4, lr}
    Lfloat h1=(1.0 - brightness) * 0.25f;
24013eca:	ee27 1b01 	vmul.f64	d1, d7, d1
    _tLivingString2* p = *pl;
24013ece:	6804      	ldr	r4, [r0, #0]
{
24013ed0:	b082      	sub	sp, #8
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
24013ed2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    Lfloat h0=(1.0 + brightness) * 0.5f;
24013ed6:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    Lfloat h1=(1.0 - brightness) * 0.25f;
24013eda:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
24013ede:	edcd 0a00 	vstr	s1, [sp]
24013ee2:	eeb0 0a41 	vmov.f32	s0, s2
24013ee6:	ed8d 1a01 	vstr	s2, [sp, #4]
24013eea:	f7fc fbff 	bl	240106ec <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
24013eee:	ed9d 1a01 	vldr	s2, [sp, #4]
24013ef2:	eddd 0a00 	vldr	s1, [sp]
24013ef6:	f104 0040 	add.w	r0, r4, #64	; 0x40
24013efa:	eeb0 0a41 	vmov.f32	s0, s2
24013efe:	ed8d 1a00 	vstr	s2, [sp]
24013f02:	edcd 0a01 	vstr	s1, [sp, #4]
24013f06:	f7fc fbf1 	bl	240106ec <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
24013f0a:	ed9d 1a00 	vldr	s2, [sp]
24013f0e:	f104 0044 	add.w	r0, r4, #68	; 0x44
24013f12:	eddd 0a01 	vldr	s1, [sp, #4]
24013f16:	eeb0 0a41 	vmov.f32	s0, s2
24013f1a:	f7fc fbe7 	bl	240106ec <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
24013f1e:	ed9d 1a00 	vldr	s2, [sp]
24013f22:	eddd 0a01 	vldr	s1, [sp, #4]
24013f26:	f104 0048 	add.w	r0, r4, #72	; 0x48
24013f2a:	eeb0 0a41 	vmov.f32	s0, s2
}
24013f2e:	b002      	add	sp, #8
24013f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
24013f34:	f7fc bbda 	b.w	240106ec <tTwoZero_setCoefficients>

24013f38 <tLivingString2_setDecay>:

void     tLivingString2_setDecay(tLivingString2* const pl, Lfloat decay)
{
24013f38:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
24013f3a:	6804      	ldr	r4, [r0, #0]
{
24013f3c:	eef0 0a40 	vmov.f32	s1, s0
    p->decay=powf(0.001f,1.0f/(p->freq*decay));
24013f40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24013f44:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24013f60 <tLivingString2_setDecay+0x28>
24013f48:	ed94 7a01 	vldr	s14, [r4, #4]
24013f4c:	ee60 0a87 	vmul.f32	s1, s1, s14
24013f50:	eec7 0aa0 	vdiv.f32	s1, s15, s1
24013f54:	f001 f9cc 	bl	240152f0 <powf>
24013f58:	ed84 0a07 	vstr	s0, [r4, #28]
}
24013f5c:	bd10      	pop	{r4, pc}
24013f5e:	bf00      	nop
24013f60:	3a83126f 	.word	0x3a83126f

24013f64 <tLivingString2_setTargetLev>:

void     tLivingString2_setTargetLev(tLivingString2* const pl, Lfloat targetLev)
{
24013f64:	b510      	push	{r4, lr}
24013f66:	ed2d 8b02 	vpush	{d8}
24013f6a:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
24013f6e:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLevU, targetLev);
24013f70:	f104 0054 	add.w	r0, r4, #84	; 0x54
24013f74:	f7fc fa30 	bl	240103d8 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
24013f78:	eeb0 0a48 	vmov.f32	s0, s16
24013f7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
24013f80:	ecbd 8b02 	vpop	{d8}
24013f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
24013f88:	f7fc ba26 	b.w	240103d8 <tFeedbackLeveler_setTargetLevel>

24013f8c <tLivingString2_setLevSmoothFactor>:

void     tLivingString2_setLevSmoothFactor(tLivingString2* const pl, Lfloat levSmoothFactor)
{
24013f8c:	b510      	push	{r4, lr}
24013f8e:	ed2d 8b02 	vpush	{d8}
24013f92:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
24013f96:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setFactor(&p->fbLevU, levSmoothFactor);
24013f98:	f104 0054 	add.w	r0, r4, #84	; 0x54
24013f9c:	f7fc f9f0 	bl	24010380 <tFeedbackLeveler_setFactor>
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
24013fa0:	eeb0 0a48 	vmov.f32	s0, s16
24013fa4:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
24013fa8:	ecbd 8b02 	vpop	{d8}
24013fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
24013fb0:	f7fc b9e6 	b.w	24010380 <tFeedbackLeveler_setFactor>

24013fb4 <tLivingString2_setLevStrength>:

void     tLivingString2_setLevStrength(tLivingString2* const pl, Lfloat levStrength)
{
24013fb4:	b510      	push	{r4, lr}
24013fb6:	ed2d 8b02 	vpush	{d8}
24013fba:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
24013fbe:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setStrength(&p->fbLevU, levStrength);
24013fc0:	f104 0054 	add.w	r0, r4, #84	; 0x54
24013fc4:	f7fc f9d8 	bl	24010378 <tFeedbackLeveler_setStrength>
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
24013fc8:	eeb0 0a48 	vmov.f32	s0, s16
24013fcc:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
24013fd0:	ecbd 8b02 	vpop	{d8}
24013fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
24013fd8:	f7fc b9ce 	b.w	24010378 <tFeedbackLeveler_setStrength>

24013fdc <tLivingString2_setLevMode>:

void     tLivingString2_setLevMode(tLivingString2* const pl, int levMode)
{
24013fdc:	b538      	push	{r3, r4, r5, lr}
    _tLivingString2* p = *pl;
24013fde:	6805      	ldr	r5, [r0, #0]
{
24013fe0:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
24013fe2:	f105 0054 	add.w	r0, r5, #84	; 0x54
24013fe6:	f7fc f9cf 	bl	24010388 <tFeedbackLeveler_setMode>
    tFeedbackLeveler_setMode(&p->fbLevL, levMode);
24013fea:	4621      	mov	r1, r4
24013fec:	f105 0058 	add.w	r0, r5, #88	; 0x58
24013ff0:	f7fc f9ca 	bl	24010388 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
24013ff4:	622c      	str	r4, [r5, #32]
}
24013ff6:	bd38      	pop	{r3, r4, r5, pc}

24013ff8 <tLivingString2_tick>:

Lfloat   tLivingString2_tick(tLivingString2* const pl, Lfloat input)
{
24013ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tLivingString2* p = *pl;

    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
24013ffc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
24014000:	ed2d 8b0a 	vpush	{d8-d12}
    _tLivingString2* p = *pl;
24014004:	6804      	ldr	r4, [r0, #0]
    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
24014006:	ee60 aa27 	vmul.f32	s21, s0, s15
    //Lfloat pickupPos=tExpSmooth_tick(&p->puSmooth);

    //need to determine which delay line to put it into (should be half amplitude into forward and backward lines for the correct portion of string)
    Lfloat prepP=tExpSmooth_tick(&p->prpSmooth);
    Lfloat lowLen=prepP*wLen;
    Lfloat upLen=(1.0f-prepP)*wLen;
2401400a:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
    Lfloat wLen=tExpSmooth_tick(&p->wlSmooth);
2401400e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
24014012:	f018 fdf5 	bl	2402cc00 <__tExpSmooth_tick_veneer>
    Lfloat pickP=tExpSmooth_tick(&p->ppSmooth);
24014016:	f104 0060 	add.w	r0, r4, #96	; 0x60
    Lfloat wLen=tExpSmooth_tick(&p->wlSmooth);
2401401a:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat pickP=tExpSmooth_tick(&p->ppSmooth);
2401401e:	f018 fdef 	bl	2402cc00 <__tExpSmooth_tick_veneer>
24014022:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat prepP=tExpSmooth_tick(&p->prpSmooth);
24014026:	f104 0064 	add.w	r0, r4, #100	; 0x64
2401402a:	f018 fde9 	bl	2402cc00 <__tExpSmooth_tick_veneer>
    Lfloat upLen=(1.0f-prepP)*wLen;
2401402e:	ee7c 9a40 	vsub.f32	s19, s24, s0
    Lfloat prepP=tExpSmooth_tick(&p->prpSmooth);
24014032:	eeb0 aa40 	vmov.f32	s20, s0
    uint32_t pickPInt;

    if (pickP > prepP)
24014036:	eeb4 8ac0 	vcmpe.f32	s16, s0
    Lfloat lowLen=prepP*wLen;
2401403a:	ee28 9a80 	vmul.f32	s18, s17, s0
    Lfloat upLen=(1.0f-prepP)*wLen;
2401403e:	ee69 9aa8 	vmul.f32	s19, s19, s17
    if (pickP > prepP)
24014042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014046:	f340 8170 	ble.w	2401432a <tLivingString2_tick+0x332>
    {
        Lfloat fullPickPoint =  ((pickP*wLen) - lowLen);
2401404a:	eeb0 7a49 	vmov.f32	s14, s18
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        Lfloat pickPLfloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
2401404e:	f104 0930 	add.w	r9, r4, #48	; 0x30
24014052:	ee39 ba0c 	vadd.f32	s22, s18, s24
        tHermiteDelay_addTo(&p->delUF, input * pickPLfloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPLfloat), (uint32_t) (upLen - pickPInt));
24014056:	f104 0834 	add.w	r8, r4, #52	; 0x34
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
2401405a:	4648      	mov	r0, r9
    {
         Lfloat fullPickPoint =  pickP * wLen;
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        Lfloat pickPLfloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
2401405c:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        Lfloat fullPickPoint =  ((pickP*wLen) - lowLen);
24014060:	ee98 7a88 	vfnms.f32	s14, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * pickPLfloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPLfloat), (uint32_t) (lowLen - pickPInt));
24014064:	f104 0638 	add.w	r6, r4, #56	; 0x38
24014068:	eea8 bac8 	vfms.f32	s22, s17, s16
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
2401406c:	eefc cac7 	vcvt.u32.f32	s25, s14
        Lfloat pickPLfloat = fullPickPoint - pickPInt;
24014070:	eef8 7a6c 	vcvt.f32.u32	s15, s25
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
24014074:	ee1c 1a90 	vmov	r1, s25
24014078:	ee37 ba8b 	vadd.f32	s22, s15, s22
        Lfloat pickPLfloat = fullPickPoint - pickPInt;
2401407c:	ee77 ba67 	vsub.f32	s23, s14, s15
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPLfloat), (uint32_t) (upLen - pickPInt));
24014080:	ee39 8ae7 	vsub.f32	s16, s19, s15
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
24014084:	ee2b ba2a 	vmul.f32	s22, s22, s21
        tHermiteDelay_addTo(&p->delUF, input * pickPLfloat, pickPInt + 1);
24014088:	ee6a aaab 	vmul.f32	s21, s21, s23
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
2401408c:	eeb0 0a4b 	vmov.f32	s0, s22
24014090:	f7fb ffa4 	bl	2400ffdc <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUF, input * pickPLfloat, pickPInt + 1);
24014094:	ee1c 1a90 	vmov	r1, s25
24014098:	4648      	mov	r0, r9
2401409a:	eeb0 0a6a 	vmov.f32	s0, s21
2401409e:	3101      	adds	r1, #1
240140a0:	f7fb ff9c 	bl	2400ffdc <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPLfloat), (uint32_t) (upLen - pickPInt));
240140a4:	eefc 7ac8 	vcvt.u32.f32	s15, s16
240140a8:	4640      	mov	r0, r8
240140aa:	eeb0 0a4b 	vmov.f32	s0, s22
240140ae:	ee17 1a90 	vmov	r1, s15
240140b2:	f7fb ff93 	bl	2400ffdc <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * pickPLfloat, (uint32_t) (upLen - pickPInt - 1));
240140b6:	ee78 7a4c 	vsub.f32	s15, s16, s24
240140ba:	eeb0 0a6a 	vmov.f32	s0, s21
240140be:	4640      	mov	r0, r8
240140c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240140c4:	ee17 1a90 	vmov	r1, s15
240140c8:	f7fb ff88 	bl	2400ffdc <tHermiteDelay_addTo>

        tHermiteDelay_addTo(&p->delLF, input, pickPInt);
        tHermiteDelay_addTo(&p->delLB, input, (uint32_t) (lowLen - pickPInt));
    }
*/
    Lfloat fromLF=tHermiteDelay_tickOut(&p->delLF);
240140cc:	4638      	mov	r0, r7
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);

    // into upper half of string, from bridge, going backwards
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
240140ce:	f104 0554 	add.w	r5, r4, #84	; 0x54
    Lfloat fromLF=tHermiteDelay_tickOut(&p->delLF);
240140d2:	f7fb ff1d 	bl	2400ff10 <tHermiteDelay_tickOut>
    Lfloat fromUF=tHermiteDelay_tickOut(&p->delUF);
240140d6:	4648      	mov	r0, r9
    Lfloat fromLF=tHermiteDelay_tickOut(&p->delLF);
240140d8:	eef0 aa40 	vmov.f32	s21, s0
    Lfloat fromUF=tHermiteDelay_tickOut(&p->delUF);
240140dc:	f7fb ff18 	bl	2400ff10 <tHermiteDelay_tickOut>
    Lfloat fromUB=tHermiteDelay_tickOut(&p->delUB);
240140e0:	4640      	mov	r0, r8
    Lfloat fromUF=tHermiteDelay_tickOut(&p->delUF);
240140e2:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat fromUB=tHermiteDelay_tickOut(&p->delUB);
240140e6:	f7fb ff13 	bl	2400ff10 <tHermiteDelay_tickOut>
240140ea:	eeb0 ba40 	vmov.f32	s22, s0
    Lfloat fromLB=tHermiteDelay_tickOut(&p->delLB);
240140ee:	4630      	mov	r0, r6
240140f0:	f7fb ff0e 	bl	2400ff10 <tHermiteDelay_tickOut>
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
240140f4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    Lfloat fromLB=tHermiteDelay_tickOut(&p->delLB);
240140f8:	eef0 0a40 	vmov.f32	s1, s0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
240140fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014100:	f018 fda6 	bl	2402cc50 <__LEAF_clip_veneer>
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
24014104:	eef0 0a4b 	vmov.f32	s1, s22
24014108:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
2401410c:	eeb0 ca40 	vmov.f32	s24, s0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
24014110:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014114:	f018 fd9c 	bl	2402cc50 <__LEAF_clip_veneer>
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
24014118:	eef0 0a48 	vmov.f32	s1, s16
2401411c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
24014120:	eef0 ba40 	vmov.f32	s23, s0
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
24014124:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014128:	f018 fd92 	bl	2402cc50 <__LEAF_clip_veneer>
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
2401412c:	eef0 0a6a 	vmov.f32	s1, s21
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
24014130:	eeb0 8a40 	vmov.f32	s16, s0
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
24014134:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24014138:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401413c:	f018 fd88 	bl	2402cc50 <__LEAF_clip_veneer>
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24014140:	6a23      	ldr	r3, [r4, #32]
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
24014142:	eeb0 ba40 	vmov.f32	s22, s0
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24014146:	2b00      	cmp	r3, #0
24014148:	f040 80ec 	bne.w	24014324 <tLivingString2_tick+0x32c>
2401414c:	edd4 ca07 	vldr	s25, [r4, #28]
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
    // into lower half of string, from prepPoint, going backwards
    Lfloat fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
    Lfloat intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
24014150:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24014154:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24014158:	eeb0 0a48 	vmov.f32	s0, s16
2401415c:	f7fc faaa 	bl	240106b4 <tTwoZero_tick>
24014160:	f104 0050 	add.w	r0, r4, #80	; 0x50
24014164:	f7fc fc72 	bl	24010a4c <tHighpass_tick>
24014168:	4628      	mov	r0, r5
2401416a:	ee20 0a2c 	vmul.f32	s0, s0, s25
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
    tHermiteDelay_tickIn(&p->delLB, intoLower);
    // into lower half of string, from nut
    Lfloat fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
2401416e:	f104 0558 	add.w	r5, r4, #88	; 0x58
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24014172:	f7fc f90d 	bl	24010390 <tFeedbackLeveler_tick>
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
24014176:	eeb0 1a6a 	vmov.f32	s2, s21
2401417a:	eef1 0a40 	vneg.f32	s1, s0
2401417e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014182:	f018 fd65 	bl	2402cc50 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
24014186:	4640      	mov	r0, r8
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
24014188:	eeb0 8a40 	vmov.f32	s16, s0
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
2401418c:	f7fb feb2 	bl	2400fef4 <tHermiteDelay_tickIn>
    Lfloat fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
24014190:	f104 0048 	add.w	r0, r4, #72	; 0x48
24014194:	eeb0 0a4b 	vmov.f32	s0, s22
24014198:	f7fc fa8c 	bl	240106b4 <tTwoZero_tick>
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
2401419c:	eeb0 1a6a 	vmov.f32	s2, s21
240141a0:	eef1 0a40 	vneg.f32	s1, s0
240141a4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240141a8:	f018 fd52 	bl	2402cc50 <__LEAF_clip_veneer>
    Lfloat intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
240141ac:	edd4 7a06 	vldr	s15, [r4, #24]
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
240141b0:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
240141b4:	ee7a 0ae7 	vsub.f32	s1, s21, s15
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
240141b8:	eeb0 1a6a 	vmov.f32	s2, s21
240141bc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    Lfloat intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
240141c0:	ee60 0aab 	vmul.f32	s1, s1, s23
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
240141c4:	eee7 0a87 	vfma.f32	s1, s15, s14
240141c8:	f018 fd42 	bl	2402cc50 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delLB, intoLower);
240141cc:	4630      	mov	r0, r6
240141ce:	f7fb fe91 	bl	2400fef4 <tHermiteDelay_tickIn>
    Lfloat fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
240141d2:	6a23      	ldr	r3, [r4, #32]
240141d4:	b90b      	cbnz	r3, 240141da <tLivingString2_tick+0x1e2>
240141d6:	edd4 aa07 	vldr	s21, [r4, #28]
240141da:	eeb0 0a4c 	vmov.f32	s0, s24
240141de:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
    tHermiteDelay_tickIn(&p->delLF, fromNut);
    // into upper half of string, from prepPoint, going forwards/upwards
    Lfloat fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
    Lfloat intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
240141e2:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
    Lfloat fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
240141e6:	f7fc fa65 	bl	240106b4 <tTwoZero_tick>
240141ea:	f104 004c 	add.w	r0, r4, #76	; 0x4c
240141ee:	f7fc fc2d 	bl	24010a4c <tHighpass_tick>
240141f2:	4628      	mov	r0, r5
240141f4:	ee20 0a2a 	vmul.f32	s0, s0, s21
240141f8:	f7fc f8ca 	bl	24010390 <tFeedbackLeveler_tick>
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
240141fc:	eeb0 1a4c 	vmov.f32	s2, s24
24014200:	eef1 0a40 	vneg.f32	s1, s0
24014204:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014208:	f018 fd22 	bl	2402cc50 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delLF, fromNut);
2401420c:	4638      	mov	r0, r7
2401420e:	f7fb fe71 	bl	2400fef4 <tHermiteDelay_tickIn>
    Lfloat fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
24014212:	f104 0044 	add.w	r0, r4, #68	; 0x44
24014216:	eeb0 0a6b 	vmov.f32	s0, s23
2401421a:	f7fc fa4b 	bl	240106b4 <tTwoZero_tick>
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
2401421e:	eeb0 1a4c 	vmov.f32	s2, s24
24014222:	eef1 0a40 	vneg.f32	s1, s0
24014226:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401422a:	f018 fd11 	bl	2402cc50 <__LEAF_clip_veneer>
    Lfloat intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
2401422e:	edd4 7a06 	vldr	s15, [r4, #24]
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
24014232:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
24014236:	ee7c 0a67 	vsub.f32	s1, s24, s15
    //intoUpper = tanhf(intoUpper);
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
2401423a:	eeb0 1a4c 	vmov.f32	s2, s24
2401423e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    Lfloat intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
24014242:	ee60 0a8b 	vmul.f32	s1, s1, s22
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
24014246:	eee7 0a87 	vfma.f32	s1, s15, s14
2401424a:	f018 fd01 	bl	2402cc50 <__LEAF_clip_veneer>
    tHermiteDelay_tickIn(&p->delUF, intoUpper);
2401424e:	4648      	mov	r0, r9
24014250:	f7fb fe50 	bl	2400fef4 <tHermiteDelay_tickIn>
    // update all delay lengths

    tHermiteDelay_setDelay(&p->delLF, lowLen);
24014254:	eeb0 0a49 	vmov.f32	s0, s18
24014258:	4638      	mov	r0, r7
2401425a:	f7fb fe83 	bl	2400ff64 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delLB, lowLen);
2401425e:	eeb0 0a49 	vmov.f32	s0, s18
24014262:	4630      	mov	r0, r6
24014264:	f7fb fe7e 	bl	2400ff64 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUF, upLen);
24014268:	eeb0 0a69 	vmov.f32	s0, s19
2401426c:	4648      	mov	r0, r9
2401426e:	f7fb fe79 	bl	2400ff64 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUB, upLen);
24014272:	eeb0 0a69 	vmov.f32	s0, s19
24014276:	4640      	mov	r0, r8
24014278:	f7fb fe74 	bl	2400ff64 <tHermiteDelay_setDelay>
    
    uint32_t PUPInt;
    Lfloat pickupOut = 0.0f;
    Lfloat pupos = tExpSmooth_tick(&p->puSmooth);
2401427c:	f104 0068 	add.w	r0, r4, #104	; 0x68
24014280:	f018 fcbe 	bl	2402cc00 <__tExpSmooth_tick_veneer>
    if (pupos < 0.9999f)
24014284:	eddf 7a66 	vldr	s15, [pc, #408]	; 24014420 <tLivingString2_tick+0x428>
    Lfloat pupos = tExpSmooth_tick(&p->puSmooth);
24014288:	eef0 aa40 	vmov.f32	s21, s0
    if (pupos < 0.9999f)
2401428c:	eeb4 0ae7 	vcmpe.f32	s0, s15
24014290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014294:	d53e      	bpl.n	24014314 <tLivingString2_tick+0x31c>
    {
        if (pupos > prepP)
24014296:	eeb4 aac0 	vcmpe.f32	s20, s0
2401429a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401429e:	f140 8082 	bpl.w	240143a6 <tLivingString2_tick+0x3ae>
        {
            Lfloat fullPUPoint =  ((pupos*wLen) - lowLen);
240142a2:	eef0 7a49 	vmov.f32	s15, s18
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
            Lfloat PUPLfloat = fullPUPoint - PUPInt;

            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPLfloat);
240142a6:	4648      	mov	r0, r9
240142a8:	ee39 9a0c 	vadd.f32	s18, s18, s24
            Lfloat fullPUPoint =  ((pupos*wLen) - lowLen);
240142ac:	eed8 7a80 	vfnms.f32	s15, s17, s0
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
240142b0:	eea8 9aea 	vfms.f32	s18, s17, s21
240142b4:	eebc aae7 	vcvt.u32.f32	s20, s15
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
240142b8:	eeb8 8a4a 	vcvt.f32.u32	s16, s20
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPLfloat);
240142bc:	ee1a 1a10 	vmov	r1, s20
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
240142c0:	ee37 bac8 	vsub.f32	s22, s15, s16
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPLfloat);
240142c4:	f7fb fe7e 	bl	2400ffc4 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPLfloat;
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
240142c8:	ee79 9ac8 	vsub.f32	s19, s19, s16
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPLfloat;
240142cc:	ee1a 1a10 	vmov	r1, s20
240142d0:	4648      	mov	r0, r9
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPLfloat);
240142d2:	eeb0 aa40 	vmov.f32	s20, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPLfloat;
240142d6:	3101      	adds	r1, #1
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPLfloat);
240142d8:	ee38 9a09 	vadd.f32	s18, s16, s18
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPLfloat;
240142dc:	f7fb fe72 	bl	2400ffc4 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
240142e0:	eefc 7ae9 	vcvt.u32.f32	s15, s19
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPLfloat;
240142e4:	ee79 9acc 	vsub.f32	s19, s19, s24
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
240142e8:	4640      	mov	r0, r8
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPLfloat;
240142ea:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPLfloat);
240142ee:	ee17 1a90 	vmov	r1, s15
240142f2:	f7fb fe67 	bl	2400ffc4 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPLfloat;
240142f6:	eefc 7ae9 	vcvt.u32.f32	s15, s19
240142fa:	4640      	mov	r0, r8
240142fc:	ee3a aa00 	vadd.f32	s20, s20, s0
24014300:	ee17 1a90 	vmov	r1, s15
24014304:	f7fb fe5e 	bl	2400ffc4 <tHermiteDelay_tapOut>
24014308:	ee38 8a00 	vadd.f32	s16, s16, s0
2401430c:	ee28 8a0b 	vmul.f32	s16, s16, s22
24014310:	eea9 8a0a 	vfma.f32	s16, s18, s20

    //p->curr = fromBridge;
    //p->curr += fromNut;

    return p->curr;
}
24014314:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = pickupOut;
24014318:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
2401431c:	ecbd 8b0a 	vpop	{d8-d12}
24014320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    Lfloat fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
24014324:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
24014328:	e712      	b.n	24014150 <tLivingString2_tick+0x158>
         Lfloat fullPickPoint =  pickP * wLen;
2401432a:	ee28 8a88 	vmul.f32	s16, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
2401432e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPLfloat), (uint32_t) (lowLen - pickPInt));
24014332:	f104 0638 	add.w	r6, r4, #56	; 0x38
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPLfloat), pickPInt);
24014336:	f104 0930 	add.w	r9, r4, #48	; 0x30
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
2401433a:	4638      	mov	r0, r7
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPLfloat), (uint32_t) (upLen - pickPInt));
2401433c:	f104 0834 	add.w	r8, r4, #52	; 0x34
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
24014340:	eefc cac8 	vcvt.u32.f32	s25, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
24014344:	ee7c ba48 	vsub.f32	s23, s24, s16
        Lfloat pickPLfloat = fullPickPoint - pickPInt;
24014348:	eef8 7a6c 	vcvt.f32.u32	s15, s25
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
2401434c:	ee1c 1a90 	vmov	r1, s25
24014350:	ee7b baa7 	vadd.f32	s23, s23, s15
        Lfloat pickPLfloat = fullPickPoint - pickPInt;
24014354:	ee38 8a67 	vsub.f32	s16, s16, s15
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPLfloat), (uint32_t) (lowLen - pickPInt));
24014358:	ee39 ba67 	vsub.f32	s22, s18, s15
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
2401435c:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delLF, input * pickPLfloat, pickPInt + 1);
24014360:	ee6a aa88 	vmul.f32	s21, s21, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPLfloat), pickPInt);
24014364:	eeb0 0a6b 	vmov.f32	s0, s23
24014368:	f7fb fe38 	bl	2400ffdc <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLF, input * pickPLfloat, pickPInt + 1);
2401436c:	ee1c 1a90 	vmov	r1, s25
24014370:	4638      	mov	r0, r7
24014372:	eeb0 0a6a 	vmov.f32	s0, s21
24014376:	3101      	adds	r1, #1
24014378:	f7fb fe30 	bl	2400ffdc <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPLfloat), (uint32_t) (lowLen - pickPInt));
2401437c:	eefc 7acb 	vcvt.u32.f32	s15, s22
24014380:	4630      	mov	r0, r6
24014382:	eeb0 0a6b 	vmov.f32	s0, s23
24014386:	ee17 1a90 	vmov	r1, s15
2401438a:	f7fb fe27 	bl	2400ffdc <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * pickPLfloat, (uint32_t) (lowLen - pickPInt - 1));
2401438e:	ee7b 7a4c 	vsub.f32	s15, s22, s24
24014392:	eeb0 0a6a 	vmov.f32	s0, s21
24014396:	4630      	mov	r0, r6
24014398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401439c:	ee17 1a90 	vmov	r1, s15
240143a0:	f7fb fe1c 	bl	2400ffdc <tHermiteDelay_addTo>
240143a4:	e692      	b.n	240140cc <tLivingString2_tick+0xd4>
             Lfloat fullPUPoint =  pupos * wLen;
240143a6:	ee68 8a80 	vmul.f32	s17, s17, s0
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
240143aa:	4638      	mov	r0, r7
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
240143ac:	eefc 9ae8 	vcvt.u32.f32	s19, s17
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
240143b0:	ee3c aa68 	vsub.f32	s20, s24, s17
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
240143b4:	eeb8 8a69 	vcvt.f32.u32	s16, s19
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
240143b8:	ee19 1a90 	vmov	r1, s19
240143bc:	f7fb fe02 	bl	2400ffc4 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
240143c0:	ee19 1a90 	vmov	r1, s19
240143c4:	4638      	mov	r0, r7
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
240143c6:	eef0 9a40 	vmov.f32	s19, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
240143ca:	ee39 9a48 	vsub.f32	s18, s18, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
240143ce:	3101      	adds	r1, #1
240143d0:	f7fb fdf8 	bl	2400ffc4 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
240143d4:	4630      	mov	r0, r6
            Lfloat PUPLfloat = fullPUPoint - PUPInt;
240143d6:	ee78 8ac8 	vsub.f32	s17, s17, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
240143da:	eefc 7ac9 	vcvt.u32.f32	s15, s18
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
240143de:	ee39 9a4c 	vsub.f32	s18, s18, s24
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPLfloat);
240143e2:	ee3a aa08 	vadd.f32	s20, s20, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
240143e6:	ee17 1a90 	vmov	r1, s15
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPLfloat;
240143ea:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPLfloat);
240143ee:	f7fb fde9 	bl	2400ffc4 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
240143f2:	eefc 7ac9 	vcvt.u32.f32	s15, s18
240143f6:	4630      	mov	r0, r6
240143f8:	ee79 9a80 	vadd.f32	s19, s19, s0
240143fc:	ee17 1a90 	vmov	r1, s15
24014400:	f7fb fde0 	bl	2400ffc4 <tHermiteDelay_tapOut>
24014404:	ee38 8a00 	vadd.f32	s16, s16, s0
24014408:	ee28 8a28 	vmul.f32	s16, s16, s17
2401440c:	eeaa 8a29 	vfma.f32	s16, s20, s19
}
24014410:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = pickupOut;
24014414:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
24014418:	ecbd 8b0a 	vpop	{d8-d12}
2401441c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
24014420:	3f7ff972 	.word	0x3f7ff972

24014424 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
24014424:	4770      	bx	lr
24014426:	bf00      	nop

24014428 <LEAF_init>:
{
24014428:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
2401442a:	6200      	str	r0, [r0, #32]
{
2401442c:	4604      	mov	r4, r0
2401442e:	461d      	mov	r5, r3
24014430:	ed2d 8b02 	vpush	{d8}
24014434:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
24014438:	f7fe f940 	bl	240126bc <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
2401443c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24014440:	eddf 7a0c 	vldr	s15, [pc, #48]	; 24014474 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
24014444:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
24014446:	4b0c      	ldr	r3, [pc, #48]	; (24014478 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
24014448:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
2401444c:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
24014450:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
24014452:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
24014454:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
24014458:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
2401445c:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24014460:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
24014464:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24014468:	edc4 7a03 	vstr	s15, [r4, #12]
}
2401446c:	ecbd 8b02 	vpop	{d8}
24014470:	bd38      	pop	{r3, r4, r5, pc}
24014472:	bf00      	nop
24014474:	40c90fdb 	.word	0x40c90fdb
24014478:	24014425 	.word	0x24014425

2401447c <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
2401447c:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
2401447e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
24014482:	2401      	movs	r4, #1
24014484:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
24014486:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
2401448a:	6b83      	ldr	r3, [r0, #56]	; 0x38
2401448c:	4718      	bx	r3
2401448e:	bf00      	nop

24014490 <arm_fir_interpolate_init_f32>:
24014490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24014492:	fbb2 f6f1 	udiv	r6, r2, r1
24014496:	fb01 2416 	mls	r4, r1, r6, r2
2401449a:	9f06      	ldr	r7, [sp, #24]
2401449c:	b984      	cbnz	r4, 240144c0 <arm_fir_interpolate_init_f32+0x30>
2401449e:	6043      	str	r3, [r0, #4]
240144a0:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
240144a4:	9b07      	ldr	r3, [sp, #28]
240144a6:	4605      	mov	r5, r0
240144a8:	7001      	strb	r1, [r0, #0]
240144aa:	4621      	mov	r1, r4
240144ac:	441a      	add	r2, r3
240144ae:	8046      	strh	r6, [r0, #2]
240144b0:	4638      	mov	r0, r7
240144b2:	4432      	add	r2, r6
240144b4:	0092      	lsls	r2, r2, #2
240144b6:	f000 fca1 	bl	24014dfc <memset>
240144ba:	60af      	str	r7, [r5, #8]
240144bc:	4620      	mov	r0, r4
240144be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240144c0:	f06f 0001 	mvn.w	r0, #1
240144c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240144c6:	bf00      	nop

240144c8 <arm_fir_interpolate_f32>:
240144c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240144cc:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
240144d0:	b08f      	sub	sp, #60	; 0x3c
240144d2:	8845      	ldrh	r5, [r0, #2]
240144d4:	9202      	str	r2, [sp, #8]
240144d6:	442c      	add	r4, r5
240144d8:	6882      	ldr	r2, [r0, #8]
240144da:	930d      	str	r3, [sp, #52]	; 0x34
240144dc:	089b      	lsrs	r3, r3, #2
240144de:	eb02 0784 	add.w	r7, r2, r4, lsl #2
240144e2:	9107      	str	r1, [sp, #28]
240144e4:	950b      	str	r5, [sp, #44]	; 0x2c
240144e6:	4616      	mov	r6, r2
240144e8:	9209      	str	r2, [sp, #36]	; 0x24
240144ea:	f8d0 b004 	ldr.w	fp, [r0, #4]
240144ee:	970a      	str	r7, [sp, #40]	; 0x28
240144f0:	930c      	str	r3, [sp, #48]	; 0x30
240144f2:	f000 811b 	beq.w	2401472c <arm_fir_interpolate_f32+0x264>
240144f6:	462a      	mov	r2, r5
240144f8:	468e      	mov	lr, r1
240144fa:	4619      	mov	r1, r3
240144fc:	4635      	mov	r5, r6
240144fe:	4613      	mov	r3, r2
24014500:	ea4f 0892 	mov.w	r8, r2, lsr #2
24014504:	f106 0c1c 	add.w	ip, r6, #28
24014508:	f10e 0210 	add.w	r2, lr, #16
2401450c:	ea4f 1608 	mov.w	r6, r8, lsl #4
24014510:	f003 0903 	and.w	r9, r3, #3
24014514:	f107 0310 	add.w	r3, r7, #16
24014518:	f8cd b020 	str.w	fp, [sp, #32]
2401451c:	4693      	mov	fp, r2
2401451e:	e9cd 3103 	strd	r3, r1, [sp, #12]
24014522:	f106 030c 	add.w	r3, r6, #12
24014526:	4466      	add	r6, ip
24014528:	18eb      	adds	r3, r5, r3
2401452a:	9301      	str	r3, [sp, #4]
2401452c:	f85b 3c10 	ldr.w	r3, [fp, #-16]
24014530:	9a03      	ldr	r2, [sp, #12]
24014532:	f842 3c10 	str.w	r3, [r2, #-16]
24014536:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
2401453a:	f842 3c0c 	str.w	r3, [r2, #-12]
2401453e:	f85b 3c08 	ldr.w	r3, [fp, #-8]
24014542:	f842 3c08 	str.w	r3, [r2, #-8]
24014546:	f85b 3c04 	ldr.w	r3, [fp, #-4]
2401454a:	f842 3c04 	str.w	r3, [r2, #-4]
2401454e:	f890 a000 	ldrb.w	sl, [r0]
24014552:	4653      	mov	r3, sl
24014554:	f1ba 0f00 	cmp.w	sl, #0
24014558:	f000 80c5 	beq.w	240146e6 <arm_fir_interpolate_f32+0x21e>
2401455c:	f1ac 0310 	sub.w	r3, ip, #16
24014560:	f8cd b018 	str.w	fp, [sp, #24]
24014564:	4655      	mov	r5, sl
24014566:	9f02      	ldr	r7, [sp, #8]
24014568:	f04f 0e01 	mov.w	lr, #1
2401456c:	f8dd b020 	ldr.w	fp, [sp, #32]
24014570:	9305      	str	r3, [sp, #20]
24014572:	eba5 040e 	sub.w	r4, r5, lr
24014576:	ed1c 2a07 	vldr	s4, [ip, #-28]	; 0xffffffe4
2401457a:	ed1c 3a06 	vldr	s6, [ip, #-24]	; 0xffffffe8
2401457e:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
24014582:	ed5c 2a05 	vldr	s5, [ip, #-20]	; 0xffffffec
24014586:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 24014868 <arm_fir_interpolate_f32+0x3a0>
2401458a:	f1b8 0f00 	cmp.w	r8, #0
2401458e:	f000 8163 	beq.w	24014858 <arm_fir_interpolate_f32+0x390>
24014592:	eef0 5a47 	vmov.f32	s11, s14
24014596:	00a9      	lsls	r1, r5, #2
24014598:	eef0 4a47 	vmov.f32	s9, s14
2401459c:	4662      	mov	r2, ip
2401459e:	eef0 6a47 	vmov.f32	s13, s14
240145a2:	4623      	mov	r3, r4
240145a4:	ed52 1a04 	vldr	s3, [r2, #-16]
240145a8:	3210      	adds	r2, #16
240145aa:	edd3 7a00 	vldr	s15, [r3]
240145ae:	440b      	add	r3, r1
240145b0:	ee27 6a82 	vmul.f32	s12, s15, s4
240145b4:	edd3 3a00 	vldr	s7, [r3]
240145b8:	ee27 4a83 	vmul.f32	s8, s15, s6
240145bc:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
240145c0:	ee27 5aa2 	vmul.f32	s10, s15, s5
240145c4:	440b      	add	r3, r1
240145c6:	ee61 7aa7 	vmul.f32	s15, s3, s15
240145ca:	ee76 6a26 	vadd.f32	s13, s12, s13
240145ce:	ed93 6a00 	vldr	s12, [r3]
240145d2:	ee63 0a83 	vmul.f32	s1, s7, s6
240145d6:	ed12 3a06 	vldr	s6, [r2, #-24]	; 0xffffffe8
240145da:	ee75 5a25 	vadd.f32	s11, s10, s11
240145de:	440b      	add	r3, r1
240145e0:	ee21 1aa3 	vmul.f32	s2, s3, s7
240145e4:	ee74 4a24 	vadd.f32	s9, s8, s9
240145e8:	ed93 5a00 	vldr	s10, [r3]
240145ec:	ee23 4aa2 	vmul.f32	s8, s7, s5
240145f0:	440b      	add	r3, r1
240145f2:	ee37 7a87 	vadd.f32	s14, s15, s14
240145f6:	ee63 3a82 	vmul.f32	s7, s7, s4
240145fa:	ee74 4a24 	vadd.f32	s9, s8, s9
240145fe:	ee70 0aa6 	vadd.f32	s1, s1, s13
24014602:	ee21 4a86 	vmul.f32	s8, s3, s12
24014606:	ee66 6a22 	vmul.f32	s13, s12, s5
2401460a:	ed52 2a05 	vldr	s5, [r2, #-20]	; 0xffffffec
2401460e:	ee31 1a25 	vadd.f32	s2, s2, s11
24014612:	4296      	cmp	r6, r2
24014614:	ee73 7a87 	vadd.f32	s15, s7, s14
24014618:	ee62 5a06 	vmul.f32	s11, s4, s12
2401461c:	ee26 7a03 	vmul.f32	s14, s12, s6
24014620:	ee61 1a85 	vmul.f32	s3, s3, s10
24014624:	ee34 4a24 	vadd.f32	s8, s8, s9
24014628:	ee35 6a81 	vadd.f32	s12, s11, s2
2401462c:	ee62 4a05 	vmul.f32	s9, s4, s10
24014630:	ee63 5a05 	vmul.f32	s11, s6, s10
24014634:	ee76 6aa0 	vadd.f32	s13, s13, s1
24014638:	ee37 7a27 	vadd.f32	s14, s14, s15
2401463c:	ee25 5a22 	vmul.f32	s10, s10, s5
24014640:	ee71 6aa6 	vadd.f32	s13, s3, s13
24014644:	ee74 4a84 	vadd.f32	s9, s9, s8
24014648:	ee75 5a86 	vadd.f32	s11, s11, s12
2401464c:	ee35 7a07 	vadd.f32	s14, s10, s14
24014650:	d1a8      	bne.n	240145a4 <arm_fir_interpolate_f32+0xdc>
24014652:	fb08 f305 	mul.w	r3, r8, r5
24014656:	9a01      	ldr	r2, [sp, #4]
24014658:	eb04 1403 	add.w	r4, r4, r3, lsl #4
2401465c:	f1b9 0f00 	cmp.w	r9, #0
24014660:	d01e      	beq.n	240146a0 <arm_fir_interpolate_f32+0x1d8>
24014662:	00ad      	lsls	r5, r5, #2
24014664:	464b      	mov	r3, r9
24014666:	ed94 6a00 	vldr	s12, [r4]
2401466a:	3b01      	subs	r3, #1
2401466c:	ecf2 7a01 	vldmia	r2!, {s15}
24014670:	442c      	add	r4, r5
24014672:	ee66 3a02 	vmul.f32	s7, s12, s4
24014676:	ee26 4a03 	vmul.f32	s8, s12, s6
2401467a:	ee26 5a22 	vmul.f32	s10, s12, s5
2401467e:	eeb0 2a43 	vmov.f32	s4, s6
24014682:	eeb0 3a62 	vmov.f32	s6, s5
24014686:	eef0 2a67 	vmov.f32	s5, s15
2401468a:	ee67 7a86 	vmul.f32	s15, s15, s12
2401468e:	ee76 6aa3 	vadd.f32	s13, s13, s7
24014692:	ee74 4a84 	vadd.f32	s9, s9, s8
24014696:	ee75 5a85 	vadd.f32	s11, s11, s10
2401469a:	ee37 7a27 	vadd.f32	s14, s14, s15
2401469e:	d1e2      	bne.n	24014666 <arm_fir_interpolate_f32+0x19e>
240146a0:	edc7 6a00 	vstr	s13, [r7]
240146a4:	45f2      	cmp	sl, lr
240146a6:	7803      	ldrb	r3, [r0, #0]
240146a8:	f10e 0201 	add.w	r2, lr, #1
240146ac:	eb07 0383 	add.w	r3, r7, r3, lsl #2
240146b0:	edc3 4a00 	vstr	s9, [r3]
240146b4:	7803      	ldrb	r3, [r0, #0]
240146b6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
240146ba:	edc3 5a00 	vstr	s11, [r3]
240146be:	7803      	ldrb	r3, [r0, #0]
240146c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
240146c4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
240146c8:	f107 0704 	add.w	r7, r7, #4
240146cc:	ed83 7a00 	vstr	s14, [r3]
240146d0:	d002      	beq.n	240146d8 <arm_fir_interpolate_f32+0x210>
240146d2:	4696      	mov	lr, r2
240146d4:	7805      	ldrb	r5, [r0, #0]
240146d6:	e74c      	b.n	24014572 <arm_fir_interpolate_f32+0xaa>
240146d8:	9b02      	ldr	r3, [sp, #8]
240146da:	f8dd b018 	ldr.w	fp, [sp, #24]
240146de:	eb03 038a 	add.w	r3, r3, sl, lsl #2
240146e2:	9302      	str	r3, [sp, #8]
240146e4:	7803      	ldrb	r3, [r0, #0]
240146e6:	9a03      	ldr	r2, [sp, #12]
240146e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
240146ec:	f10b 0b10 	add.w	fp, fp, #16
240146f0:	f10c 0c10 	add.w	ip, ip, #16
240146f4:	3210      	adds	r2, #16
240146f6:	3610      	adds	r6, #16
240146f8:	9203      	str	r2, [sp, #12]
240146fa:	9a01      	ldr	r2, [sp, #4]
240146fc:	3210      	adds	r2, #16
240146fe:	9201      	str	r2, [sp, #4]
24014700:	9a02      	ldr	r2, [sp, #8]
24014702:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24014706:	9302      	str	r3, [sp, #8]
24014708:	9b04      	ldr	r3, [sp, #16]
2401470a:	3b01      	subs	r3, #1
2401470c:	9304      	str	r3, [sp, #16]
2401470e:	f47f af0d 	bne.w	2401452c <arm_fir_interpolate_f32+0x64>
24014712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
24014714:	9a07      	ldr	r2, [sp, #28]
24014716:	011b      	lsls	r3, r3, #4
24014718:	f8dd b020 	ldr.w	fp, [sp, #32]
2401471c:	441a      	add	r2, r3
2401471e:	9207      	str	r2, [sp, #28]
24014720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
24014722:	441a      	add	r2, r3
24014724:	920a      	str	r2, [sp, #40]	; 0x28
24014726:	9a09      	ldr	r2, [sp, #36]	; 0x24
24014728:	441a      	add	r2, r3
2401472a:	9209      	str	r2, [sp, #36]	; 0x24
2401472c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
2401472e:	f013 0303 	ands.w	r3, r3, #3
24014732:	f000 80b1 	beq.w	24014898 <arm_fir_interpolate_f32+0x3d0>
24014736:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
24014738:	009d      	lsls	r5, r3, #2
2401473a:	990a      	ldr	r1, [sp, #40]	; 0x28
2401473c:	0894      	lsrs	r4, r2, #2
2401473e:	f002 0a03 	and.w	sl, r2, #3
24014742:	9a09      	ldr	r2, [sp, #36]	; 0x24
24014744:	0123      	lsls	r3, r4, #4
24014746:	9106      	str	r1, [sp, #24]
24014748:	f102 0110 	add.w	r1, r2, #16
2401474c:	46a1      	mov	r9, r4
2401474e:	f103 0e10 	add.w	lr, r3, #16
24014752:	18d3      	adds	r3, r2, r3
24014754:	9101      	str	r1, [sp, #4]
24014756:	9907      	ldr	r1, [sp, #28]
24014758:	4496      	add	lr, r2
2401475a:	950c      	str	r5, [sp, #48]	; 0x30
2401475c:	4429      	add	r1, r5
2401475e:	9303      	str	r3, [sp, #12]
24014760:	f8cd b014 	str.w	fp, [sp, #20]
24014764:	910a      	str	r1, [sp, #40]	; 0x28
24014766:	9004      	str	r0, [sp, #16]
24014768:	9a07      	ldr	r2, [sp, #28]
2401476a:	f852 3b04 	ldr.w	r3, [r2], #4
2401476e:	9207      	str	r2, [sp, #28]
24014770:	9a01      	ldr	r2, [sp, #4]
24014772:	3a10      	subs	r2, #16
24014774:	9208      	str	r2, [sp, #32]
24014776:	9a06      	ldr	r2, [sp, #24]
24014778:	f842 3b04 	str.w	r3, [r2], #4
2401477c:	9b04      	ldr	r3, [sp, #16]
2401477e:	9206      	str	r2, [sp, #24]
24014780:	f893 b000 	ldrb.w	fp, [r3]
24014784:	f1bb 0f00 	cmp.w	fp, #0
24014788:	d074      	beq.n	24014874 <arm_fir_interpolate_f32+0x3ac>
2401478a:	465f      	mov	r7, fp
2401478c:	f04f 0c01 	mov.w	ip, #1
24014790:	9b05      	ldr	r3, [sp, #20]
24014792:	eba7 000c 	sub.w	r0, r7, ip
24014796:	f8dd 8008 	ldr.w	r8, [sp, #8]
2401479a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2401479e:	f1b9 0f00 	cmp.w	r9, #0
240147a2:	d055      	beq.n	24014850 <arm_fir_interpolate_f32+0x388>
240147a4:	b23a      	sxth	r2, r7
240147a6:	9b01      	ldr	r3, [sp, #4]
240147a8:	4601      	mov	r1, r0
240147aa:	eddf 7a2f 	vldr	s15, [pc, #188]	; 24014868 <arm_fir_interpolate_f32+0x3a0>
240147ae:	0094      	lsls	r4, r2, #2
240147b0:	0115      	lsls	r5, r2, #4
240147b2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
240147b6:	ed13 7a04 	vldr	s14, [r3, #-16]
240147ba:	190e      	adds	r6, r1, r4
240147bc:	edd1 6a00 	vldr	s13, [r1]
240147c0:	3310      	adds	r3, #16
240147c2:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
240147c6:	4429      	add	r1, r5
240147c8:	ee27 7a26 	vmul.f32	s14, s14, s13
240147cc:	ed96 6a00 	vldr	s12, [r6]
240147d0:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
240147d4:	1916      	adds	r6, r2, r4
240147d6:	ee26 6a25 	vmul.f32	s12, s12, s11
240147da:	ed92 5a00 	vldr	s10, [r2]
240147de:	ee77 7a27 	vadd.f32	s15, s14, s15
240147e2:	edd6 5a00 	vldr	s11, [r6]
240147e6:	ee26 7a85 	vmul.f32	s14, s13, s10
240147ea:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
240147ee:	459e      	cmp	lr, r3
240147f0:	442a      	add	r2, r5
240147f2:	ee76 7a27 	vadd.f32	s15, s12, s15
240147f6:	ee65 6aa6 	vmul.f32	s13, s11, s13
240147fa:	ee77 7a27 	vadd.f32	s15, s14, s15
240147fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
24014802:	d1d8      	bne.n	240147b6 <arm_fir_interpolate_f32+0x2ee>
24014804:	fb09 f404 	mul.w	r4, r9, r4
24014808:	9a03      	ldr	r2, [sp, #12]
2401480a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
2401480e:	f1ba 0f00 	cmp.w	sl, #0
24014812:	d00c      	beq.n	2401482e <arm_fir_interpolate_f32+0x366>
24014814:	00bf      	lsls	r7, r7, #2
24014816:	4653      	mov	r3, sl
24014818:	edd0 6a00 	vldr	s13, [r0]
2401481c:	3b01      	subs	r3, #1
2401481e:	ecb2 7a01 	vldmia	r2!, {s14}
24014822:	4438      	add	r0, r7
24014824:	ee27 7a26 	vmul.f32	s14, s14, s13
24014828:	ee77 7a87 	vadd.f32	s15, s15, s14
2401482c:	d1f4      	bne.n	24014818 <arm_fir_interpolate_f32+0x350>
2401482e:	45e3      	cmp	fp, ip
24014830:	ece8 7a01 	vstmia	r8!, {s15}
24014834:	f10c 0301 	add.w	r3, ip, #1
24014838:	d018      	beq.n	2401486c <arm_fir_interpolate_f32+0x3a4>
2401483a:	469c      	mov	ip, r3
2401483c:	9b04      	ldr	r3, [sp, #16]
2401483e:	781f      	ldrb	r7, [r3, #0]
24014840:	9b05      	ldr	r3, [sp, #20]
24014842:	eba7 000c 	sub.w	r0, r7, ip
24014846:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2401484a:	f1b9 0f00 	cmp.w	r9, #0
2401484e:	d1a9      	bne.n	240147a4 <arm_fir_interpolate_f32+0x2dc>
24014850:	9a08      	ldr	r2, [sp, #32]
24014852:	eddf 7a05 	vldr	s15, [pc, #20]	; 24014868 <arm_fir_interpolate_f32+0x3a0>
24014856:	e7da      	b.n	2401480e <arm_fir_interpolate_f32+0x346>
24014858:	9a05      	ldr	r2, [sp, #20]
2401485a:	eef0 5a47 	vmov.f32	s11, s14
2401485e:	eef0 4a47 	vmov.f32	s9, s14
24014862:	eef0 6a47 	vmov.f32	s13, s14
24014866:	e6f9      	b.n	2401465c <arm_fir_interpolate_f32+0x194>
24014868:	00000000 	.word	0x00000000
2401486c:	9b02      	ldr	r3, [sp, #8]
2401486e:	eb03 038b 	add.w	r3, r3, fp, lsl #2
24014872:	9302      	str	r3, [sp, #8]
24014874:	9b03      	ldr	r3, [sp, #12]
24014876:	f10e 0e04 	add.w	lr, lr, #4
2401487a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
2401487c:	3304      	adds	r3, #4
2401487e:	9303      	str	r3, [sp, #12]
24014880:	9b01      	ldr	r3, [sp, #4]
24014882:	3304      	adds	r3, #4
24014884:	9301      	str	r3, [sp, #4]
24014886:	9b07      	ldr	r3, [sp, #28]
24014888:	4293      	cmp	r3, r2
2401488a:	f47f af6d 	bne.w	24014768 <arm_fir_interpolate_f32+0x2a0>
2401488e:	9b09      	ldr	r3, [sp, #36]	; 0x24
24014890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
24014892:	9804      	ldr	r0, [sp, #16]
24014894:	4413      	add	r3, r2
24014896:	9309      	str	r3, [sp, #36]	; 0x24
24014898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
2401489a:	6885      	ldr	r5, [r0, #8]
2401489c:	1e5c      	subs	r4, r3, #1
2401489e:	08a6      	lsrs	r6, r4, #2
240148a0:	d020      	beq.n	240148e4 <arm_fir_interpolate_f32+0x41c>
240148a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
240148a4:	4631      	mov	r1, r6
240148a6:	f103 0210 	add.w	r2, r3, #16
240148aa:	f105 0310 	add.w	r3, r5, #16
240148ae:	f852 0c10 	ldr.w	r0, [r2, #-16]
240148b2:	3901      	subs	r1, #1
240148b4:	f102 0210 	add.w	r2, r2, #16
240148b8:	f103 0310 	add.w	r3, r3, #16
240148bc:	f843 0c20 	str.w	r0, [r3, #-32]
240148c0:	f852 0c1c 	ldr.w	r0, [r2, #-28]
240148c4:	f843 0c1c 	str.w	r0, [r3, #-28]
240148c8:	f852 0c18 	ldr.w	r0, [r2, #-24]
240148cc:	f843 0c18 	str.w	r0, [r3, #-24]
240148d0:	f852 0c14 	ldr.w	r0, [r2, #-20]
240148d4:	f843 0c14 	str.w	r0, [r3, #-20]
240148d8:	d1e9      	bne.n	240148ae <arm_fir_interpolate_f32+0x3e6>
240148da:	0133      	lsls	r3, r6, #4
240148dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
240148de:	441d      	add	r5, r3
240148e0:	441a      	add	r2, r3
240148e2:	9209      	str	r2, [sp, #36]	; 0x24
240148e4:	f014 0403 	ands.w	r4, r4, #3
240148e8:	d00a      	beq.n	24014900 <arm_fir_interpolate_f32+0x438>
240148ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
240148ec:	3c01      	subs	r4, #1
240148ee:	6813      	ldr	r3, [r2, #0]
240148f0:	602b      	str	r3, [r5, #0]
240148f2:	d005      	beq.n	24014900 <arm_fir_interpolate_f32+0x438>
240148f4:	6853      	ldr	r3, [r2, #4]
240148f6:	2c01      	cmp	r4, #1
240148f8:	606b      	str	r3, [r5, #4]
240148fa:	d001      	beq.n	24014900 <arm_fir_interpolate_f32+0x438>
240148fc:	6893      	ldr	r3, [r2, #8]
240148fe:	60ab      	str	r3, [r5, #8]
24014900:	b00f      	add	sp, #60	; 0x3c
24014902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24014906:	bf00      	nop

24014908 <arm_fir_decimate_init_f32>:
24014908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2401490c:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
24014910:	fbbc f4f2 	udiv	r4, ip, r2
24014914:	fb02 c414 	mls	r4, r2, r4, ip
24014918:	b99c      	cbnz	r4, 24014942 <arm_fir_decimate_init_f32+0x3a>
2401491a:	460f      	mov	r7, r1
2401491c:	4616      	mov	r6, r2
2401491e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
24014922:	4605      	mov	r5, r0
24014924:	443a      	add	r2, r7
24014926:	8069      	strh	r1, [r5, #2]
24014928:	6043      	str	r3, [r0, #4]
2401492a:	4621      	mov	r1, r4
2401492c:	4462      	add	r2, ip
2401492e:	4640      	mov	r0, r8
24014930:	0092      	lsls	r2, r2, #2
24014932:	f000 fa63 	bl	24014dfc <memset>
24014936:	4620      	mov	r0, r4
24014938:	f8c5 8008 	str.w	r8, [r5, #8]
2401493c:	702e      	strb	r6, [r5, #0]
2401493e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24014942:	f06f 0001 	mvn.w	r0, #1
24014946:	e7fa      	b.n	2401493e <arm_fir_decimate_init_f32+0x36>

24014948 <arm_fir_decimate_f32>:
24014948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401494c:	4605      	mov	r5, r0
2401494e:	b08d      	sub	sp, #52	; 0x34
24014950:	4694      	mov	ip, r2
24014952:	782c      	ldrb	r4, [r5, #0]
24014954:	886f      	ldrh	r7, [r5, #2]
24014956:	9001      	str	r0, [sp, #4]
24014958:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
2401495c:	68ae      	ldr	r6, [r5, #8]
2401495e:	4438      	add	r0, r7
24014960:	686d      	ldr	r5, [r5, #4]
24014962:	9207      	str	r2, [sp, #28]
24014964:	970a      	str	r7, [sp, #40]	; 0x28
24014966:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
2401496a:	9508      	str	r5, [sp, #32]
2401496c:	fbb3 f3f4 	udiv	r3, r3, r4
24014970:	930b      	str	r3, [sp, #44]	; 0x2c
24014972:	089b      	lsrs	r3, r3, #2
24014974:	9309      	str	r3, [sp, #36]	; 0x24
24014976:	f000 80ef 	beq.w	24014b58 <arm_fir_decimate_f32+0x210>
2401497a:	08ba      	lsrs	r2, r7, #2
2401497c:	462b      	mov	r3, r5
2401497e:	3510      	adds	r5, #16
24014980:	f007 0703 	and.w	r7, r7, #3
24014984:	9205      	str	r2, [sp, #20]
24014986:	0112      	lsls	r2, r2, #4
24014988:	9809      	ldr	r0, [sp, #36]	; 0x24
2401498a:	f10c 0910 	add.w	r9, ip, #16
2401498e:	4413      	add	r3, r2
24014990:	9100      	str	r1, [sp, #0]
24014992:	eb05 0e02 	add.w	lr, r5, r2
24014996:	4611      	mov	r1, r2
24014998:	9503      	str	r5, [sp, #12]
2401499a:	9704      	str	r7, [sp, #16]
2401499c:	9002      	str	r0, [sp, #8]
2401499e:	9306      	str	r3, [sp, #24]
240149a0:	00a4      	lsls	r4, r4, #2
240149a2:	4658      	mov	r0, fp
240149a4:	9a00      	ldr	r2, [sp, #0]
240149a6:	4623      	mov	r3, r4
240149a8:	f852 5b04 	ldr.w	r5, [r2], #4
240149ac:	3b01      	subs	r3, #1
240149ae:	f840 5b04 	str.w	r5, [r0], #4
240149b2:	d1f9      	bne.n	240149a8 <arm_fir_decimate_f32+0x60>
240149b4:	9b01      	ldr	r3, [sp, #4]
240149b6:	00a4      	lsls	r4, r4, #2
240149b8:	eddf 0abe 	vldr	s1, [pc, #760]	; 24014cb4 <arm_fir_decimate_f32+0x36c>
240149bc:	f893 8000 	ldrb.w	r8, [r3]
240149c0:	44a3      	add	fp, r4
240149c2:	9b00      	ldr	r3, [sp, #0]
240149c4:	ea4f 0888 	mov.w	r8, r8, lsl #2
240149c8:	4423      	add	r3, r4
240149ca:	eb06 0708 	add.w	r7, r6, r8
240149ce:	9300      	str	r3, [sp, #0]
240149d0:	eb07 0c08 	add.w	ip, r7, r8
240149d4:	9b05      	ldr	r3, [sp, #20]
240149d6:	eb0c 0a08 	add.w	sl, ip, r8
240149da:	2b00      	cmp	r3, #0
240149dc:	f000 815c 	beq.w	24014c98 <arm_fir_decimate_f32+0x350>
240149e0:	eef0 4a60 	vmov.f32	s9, s1
240149e4:	9b03      	ldr	r3, [sp, #12]
240149e6:	eef0 7a60 	vmov.f32	s15, s1
240149ea:	f106 0510 	add.w	r5, r6, #16
240149ee:	eeb0 7a60 	vmov.f32	s14, s1
240149f2:	f107 0410 	add.w	r4, r7, #16
240149f6:	f10c 0010 	add.w	r0, ip, #16
240149fa:	f10a 0210 	add.w	r2, sl, #16
240149fe:	ed53 5a04 	vldr	s11, [r3, #-16]
24014a02:	3310      	adds	r3, #16
24014a04:	ed12 5a04 	vldr	s10, [r2, #-16]
24014a08:	3510      	adds	r5, #16
24014a0a:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
24014a0e:	3410      	adds	r4, #16
24014a10:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
24014a14:	3010      	adds	r0, #16
24014a16:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
24014a1a:	ee65 6aa6 	vmul.f32	s13, s11, s13
24014a1e:	ee25 1a81 	vmul.f32	s2, s11, s2
24014a22:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
24014a26:	ee65 3aa3 	vmul.f32	s7, s11, s7
24014a2a:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
24014a2e:	ee65 5a85 	vmul.f32	s11, s11, s10
24014a32:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
24014a36:	ed12 5a03 	vldr	s10, [r2, #-12]
24014a3a:	ee36 7a87 	vadd.f32	s14, s13, s14
24014a3e:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
24014a42:	ee73 1aa4 	vadd.f32	s3, s7, s9
24014a46:	ee26 2a02 	vmul.f32	s4, s12, s4
24014a4a:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
24014a4e:	ee31 1a27 	vadd.f32	s2, s2, s15
24014a52:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
24014a56:	ee66 7a22 	vmul.f32	s15, s12, s5
24014a5a:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
24014a5e:	ee26 3a03 	vmul.f32	s6, s12, s6
24014a62:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
24014a66:	ee75 5aa0 	vadd.f32	s11, s11, s1
24014a6a:	ed52 0a02 	vldr	s1, [r2, #-8]
24014a6e:	ee26 6a05 	vmul.f32	s12, s12, s10
24014a72:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
24014a76:	ee72 2a07 	vadd.f32	s5, s4, s14
24014a7a:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
24014a7e:	ee77 7a81 	vadd.f32	s15, s15, s2
24014a82:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
24014a86:	ee33 3a21 	vadd.f32	s6, s6, s3
24014a8a:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
24014a8e:	ee66 3aa3 	vmul.f32	s7, s13, s7
24014a92:	ed52 1a01 	vldr	s3, [r2, #-4]
24014a96:	ee26 4a84 	vmul.f32	s8, s13, s8
24014a9a:	459e      	cmp	lr, r3
24014a9c:	ee66 4aa4 	vmul.f32	s9, s13, s9
24014aa0:	f102 0210 	add.w	r2, r2, #16
24014aa4:	ee66 6aa0 	vmul.f32	s13, s13, s1
24014aa8:	ee36 6a25 	vadd.f32	s12, s12, s11
24014aac:	ee25 7a07 	vmul.f32	s14, s10, s14
24014ab0:	ee34 4a27 	vadd.f32	s8, s8, s15
24014ab4:	ee74 4a83 	vadd.f32	s9, s9, s6
24014ab8:	ee65 7a01 	vmul.f32	s15, s10, s2
24014abc:	ee25 3a02 	vmul.f32	s6, s10, s4
24014ac0:	ee73 3aa2 	vadd.f32	s7, s7, s5
24014ac4:	ee76 6a86 	vadd.f32	s13, s13, s12
24014ac8:	ee25 5a21 	vmul.f32	s10, s10, s3
24014acc:	ee37 7a23 	vadd.f32	s14, s14, s7
24014ad0:	ee77 7a84 	vadd.f32	s15, s15, s8
24014ad4:	ee73 4a24 	vadd.f32	s9, s6, s9
24014ad8:	ee75 0a26 	vadd.f32	s1, s10, s13
24014adc:	d18f      	bne.n	240149fe <arm_fir_decimate_f32+0xb6>
24014ade:	440e      	add	r6, r1
24014ae0:	440f      	add	r7, r1
24014ae2:	448c      	add	ip, r1
24014ae4:	eb0a 0001 	add.w	r0, sl, r1
24014ae8:	9a06      	ldr	r2, [sp, #24]
24014aea:	9b04      	ldr	r3, [sp, #16]
24014aec:	b1db      	cbz	r3, 24014b26 <arm_fir_decimate_f32+0x1de>
24014aee:	ecb2 5a01 	vldmia	r2!, {s10}
24014af2:	3b01      	subs	r3, #1
24014af4:	ecf6 2a01 	vldmia	r6!, {s5}
24014af8:	ecf7 3a01 	vldmia	r7!, {s7}
24014afc:	ecbc 4a01 	vldmia	ip!, {s8}
24014b00:	ee65 2a22 	vmul.f32	s5, s10, s5
24014b04:	ecf0 6a01 	vldmia	r0!, {s13}
24014b08:	ee65 3a23 	vmul.f32	s7, s10, s7
24014b0c:	ee25 4a04 	vmul.f32	s8, s10, s8
24014b10:	ee25 5a26 	vmul.f32	s10, s10, s13
24014b14:	ee37 7a22 	vadd.f32	s14, s14, s5
24014b18:	ee77 7aa3 	vadd.f32	s15, s15, s7
24014b1c:	ee74 4a84 	vadd.f32	s9, s9, s8
24014b20:	ee70 0a85 	vadd.f32	s1, s1, s10
24014b24:	d1e3      	bne.n	24014aee <arm_fir_decimate_f32+0x1a6>
24014b26:	9b02      	ldr	r3, [sp, #8]
24014b28:	eb0a 0608 	add.w	r6, sl, r8
24014b2c:	ed09 7a04 	vstr	s14, [r9, #-16]
24014b30:	f109 0910 	add.w	r9, r9, #16
24014b34:	3b01      	subs	r3, #1
24014b36:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
24014b3a:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
24014b3e:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
24014b42:	9302      	str	r3, [sp, #8]
24014b44:	d002      	beq.n	24014b4c <arm_fir_decimate_f32+0x204>
24014b46:	9b01      	ldr	r3, [sp, #4]
24014b48:	781c      	ldrb	r4, [r3, #0]
24014b4a:	e729      	b.n	240149a0 <arm_fir_decimate_f32+0x58>
24014b4c:	9b07      	ldr	r3, [sp, #28]
24014b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
24014b50:	9900      	ldr	r1, [sp, #0]
24014b52:	eb03 1302 	add.w	r3, r3, r2, lsl #4
24014b56:	9307      	str	r3, [sp, #28]
24014b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
24014b5a:	f013 0803 	ands.w	r8, r3, #3
24014b5e:	d067      	beq.n	24014c30 <arm_fir_decimate_f32+0x2e8>
24014b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
24014b62:	9808      	ldr	r0, [sp, #32]
24014b64:	ea4f 0e93 	mov.w	lr, r3, lsr #2
24014b68:	9d07      	ldr	r5, [sp, #28]
24014b6a:	4602      	mov	r2, r0
24014b6c:	f003 0703 	and.w	r7, r3, #3
24014b70:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
24014b74:	f8cd e000 	str.w	lr, [sp]
24014b78:	3210      	adds	r2, #16
24014b7a:	eb05 0888 	add.w	r8, r5, r8, lsl #2
24014b7e:	eb00 090c 	add.w	r9, r0, ip
24014b82:	f8dd e004 	ldr.w	lr, [sp, #4]
24014b86:	eb02 040c 	add.w	r4, r2, ip
24014b8a:	46aa      	mov	sl, r5
24014b8c:	9203      	str	r2, [sp, #12]
24014b8e:	f89e 5000 	ldrb.w	r5, [lr]
24014b92:	4658      	mov	r0, fp
24014b94:	460a      	mov	r2, r1
24014b96:	462b      	mov	r3, r5
24014b98:	ecf2 7a01 	vldmia	r2!, {s15}
24014b9c:	3b01      	subs	r3, #1
24014b9e:	ece0 7a01 	vstmia	r0!, {s15}
24014ba2:	d1f9      	bne.n	24014b98 <arm_fir_decimate_f32+0x250>
24014ba4:	00ad      	lsls	r5, r5, #2
24014ba6:	9b00      	ldr	r3, [sp, #0]
24014ba8:	4429      	add	r1, r5
24014baa:	44ab      	add	fp, r5
24014bac:	2b00      	cmp	r3, #0
24014bae:	d07c      	beq.n	24014caa <arm_fir_decimate_f32+0x362>
24014bb0:	9b03      	ldr	r3, [sp, #12]
24014bb2:	f106 0210 	add.w	r2, r6, #16
24014bb6:	eddf 7a3f 	vldr	s15, [pc, #252]	; 24014cb4 <arm_fir_decimate_f32+0x36c>
24014bba:	ed13 7a04 	vldr	s14, [r3, #-16]
24014bbe:	3310      	adds	r3, #16
24014bc0:	ed52 6a04 	vldr	s13, [r2, #-16]
24014bc4:	3210      	adds	r2, #16
24014bc6:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
24014bca:	ee27 7a26 	vmul.f32	s14, s14, s13
24014bce:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
24014bd2:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
24014bd6:	ee26 6a25 	vmul.f32	s12, s12, s11
24014bda:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
24014bde:	ee77 7a27 	vadd.f32	s15, s14, s15
24014be2:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
24014be6:	ee26 7a85 	vmul.f32	s14, s13, s10
24014bea:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
24014bee:	429c      	cmp	r4, r3
24014bf0:	ee76 7a27 	vadd.f32	s15, s12, s15
24014bf4:	ee65 6aa6 	vmul.f32	s13, s11, s13
24014bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
24014bfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
24014c00:	d1db      	bne.n	24014bba <arm_fir_decimate_f32+0x272>
24014c02:	eb06 000c 	add.w	r0, r6, ip
24014c06:	464a      	mov	r2, r9
24014c08:	b157      	cbz	r7, 24014c20 <arm_fir_decimate_f32+0x2d8>
24014c0a:	463b      	mov	r3, r7
24014c0c:	ecb2 7a01 	vldmia	r2!, {s14}
24014c10:	3b01      	subs	r3, #1
24014c12:	ecf0 6a01 	vldmia	r0!, {s13}
24014c16:	ee27 7a26 	vmul.f32	s14, s14, s13
24014c1a:	ee77 7a87 	vadd.f32	s15, s15, s14
24014c1e:	d1f5      	bne.n	24014c0c <arm_fir_decimate_f32+0x2c4>
24014c20:	f89e 3000 	ldrb.w	r3, [lr]
24014c24:	ecea 7a01 	vstmia	sl!, {s15}
24014c28:	45c2      	cmp	sl, r8
24014c2a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
24014c2e:	d1ae      	bne.n	24014b8e <arm_fir_decimate_f32+0x246>
24014c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
24014c32:	1e5c      	subs	r4, r3, #1
24014c34:	9b01      	ldr	r3, [sp, #4]
24014c36:	08a5      	lsrs	r5, r4, #2
24014c38:	689f      	ldr	r7, [r3, #8]
24014c3a:	d01d      	beq.n	24014c78 <arm_fir_decimate_f32+0x330>
24014c3c:	f106 0210 	add.w	r2, r6, #16
24014c40:	f107 0310 	add.w	r3, r7, #16
24014c44:	4629      	mov	r1, r5
24014c46:	f852 0c10 	ldr.w	r0, [r2, #-16]
24014c4a:	3901      	subs	r1, #1
24014c4c:	f102 0210 	add.w	r2, r2, #16
24014c50:	f103 0310 	add.w	r3, r3, #16
24014c54:	f843 0c20 	str.w	r0, [r3, #-32]
24014c58:	f852 0c1c 	ldr.w	r0, [r2, #-28]
24014c5c:	f843 0c1c 	str.w	r0, [r3, #-28]
24014c60:	f852 0c18 	ldr.w	r0, [r2, #-24]
24014c64:	f843 0c18 	str.w	r0, [r3, #-24]
24014c68:	f852 0c14 	ldr.w	r0, [r2, #-20]
24014c6c:	f843 0c14 	str.w	r0, [r3, #-20]
24014c70:	d1e9      	bne.n	24014c46 <arm_fir_decimate_f32+0x2fe>
24014c72:	012d      	lsls	r5, r5, #4
24014c74:	442e      	add	r6, r5
24014c76:	442f      	add	r7, r5
24014c78:	f014 0403 	ands.w	r4, r4, #3
24014c7c:	d009      	beq.n	24014c92 <arm_fir_decimate_f32+0x34a>
24014c7e:	6833      	ldr	r3, [r6, #0]
24014c80:	3c01      	subs	r4, #1
24014c82:	603b      	str	r3, [r7, #0]
24014c84:	d005      	beq.n	24014c92 <arm_fir_decimate_f32+0x34a>
24014c86:	6873      	ldr	r3, [r6, #4]
24014c88:	2c01      	cmp	r4, #1
24014c8a:	607b      	str	r3, [r7, #4]
24014c8c:	d001      	beq.n	24014c92 <arm_fir_decimate_f32+0x34a>
24014c8e:	68b3      	ldr	r3, [r6, #8]
24014c90:	60bb      	str	r3, [r7, #8]
24014c92:	b00d      	add	sp, #52	; 0x34
24014c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24014c98:	4650      	mov	r0, sl
24014c9a:	9a08      	ldr	r2, [sp, #32]
24014c9c:	eef0 4a60 	vmov.f32	s9, s1
24014ca0:	eef0 7a60 	vmov.f32	s15, s1
24014ca4:	eeb0 7a60 	vmov.f32	s14, s1
24014ca8:	e71f      	b.n	24014aea <arm_fir_decimate_f32+0x1a2>
24014caa:	9a08      	ldr	r2, [sp, #32]
24014cac:	4630      	mov	r0, r6
24014cae:	eddf 7a01 	vldr	s15, [pc, #4]	; 24014cb4 <arm_fir_decimate_f32+0x36c>
24014cb2:	e7a9      	b.n	24014c08 <arm_fir_decimate_f32+0x2c0>
24014cb4:	00000000 	.word	0x00000000

24014cb8 <arm_sin_f32>:
24014cb8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 24014d38 <arm_sin_f32+0x80>
24014cbc:	ee20 0a27 	vmul.f32	s0, s0, s15
24014cc0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24014cc4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
24014cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014ccc:	d504      	bpl.n	24014cd8 <arm_sin_f32+0x20>
24014cce:	ee17 3a90 	vmov	r3, s15
24014cd2:	3b01      	subs	r3, #1
24014cd4:	ee07 3a90 	vmov	s15, r3
24014cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24014cdc:	eddf 6a17 	vldr	s13, [pc, #92]	; 24014d3c <arm_sin_f32+0x84>
24014ce0:	ee70 7a67 	vsub.f32	s15, s0, s15
24014ce4:	ee67 7aa6 	vmul.f32	s15, s15, s13
24014ce8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
24014cec:	ee17 3a10 	vmov	r3, s14
24014cf0:	b29b      	uxth	r3, r3
24014cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24014cf6:	d21a      	bcs.n	24014d2e <arm_sin_f32+0x76>
24014cf8:	ee07 3a10 	vmov	s14, r3
24014cfc:	1c59      	adds	r1, r3, #1
24014cfe:	eeb8 0a47 	vcvt.f32.u32	s0, s14
24014d02:	ee77 7ac0 	vsub.f32	s15, s15, s0
24014d06:	4a0e      	ldr	r2, [pc, #56]	; (24014d40 <arm_sin_f32+0x88>)
24014d08:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24014d0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24014d10:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24014d14:	ee30 0a67 	vsub.f32	s0, s0, s15
24014d18:	edd3 6a00 	vldr	s13, [r3]
24014d1c:	ed92 7a00 	vldr	s14, [r2]
24014d20:	ee20 0a26 	vmul.f32	s0, s0, s13
24014d24:	ee67 7a87 	vmul.f32	s15, s15, s14
24014d28:	ee30 0a27 	vadd.f32	s0, s0, s15
24014d2c:	4770      	bx	lr
24014d2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
24014d32:	2101      	movs	r1, #1
24014d34:	2300      	movs	r3, #0
24014d36:	e7e6      	b.n	24014d06 <arm_sin_f32+0x4e>
24014d38:	3e22f983 	.word	0x3e22f983
24014d3c:	44000000 	.word	0x44000000
24014d40:	2402b0cc 	.word	0x2402b0cc

24014d44 <__itoa>:
24014d44:	1e93      	subs	r3, r2, #2
24014d46:	2b22      	cmp	r3, #34	; 0x22
24014d48:	b510      	push	{r4, lr}
24014d4a:	460c      	mov	r4, r1
24014d4c:	d904      	bls.n	24014d58 <__itoa+0x14>
24014d4e:	2300      	movs	r3, #0
24014d50:	700b      	strb	r3, [r1, #0]
24014d52:	461c      	mov	r4, r3
24014d54:	4620      	mov	r0, r4
24014d56:	bd10      	pop	{r4, pc}
24014d58:	2a0a      	cmp	r2, #10
24014d5a:	d109      	bne.n	24014d70 <__itoa+0x2c>
24014d5c:	2800      	cmp	r0, #0
24014d5e:	da07      	bge.n	24014d70 <__itoa+0x2c>
24014d60:	232d      	movs	r3, #45	; 0x2d
24014d62:	700b      	strb	r3, [r1, #0]
24014d64:	4240      	negs	r0, r0
24014d66:	2101      	movs	r1, #1
24014d68:	4421      	add	r1, r4
24014d6a:	f000 f805 	bl	24014d78 <__utoa>
24014d6e:	e7f1      	b.n	24014d54 <__itoa+0x10>
24014d70:	2100      	movs	r1, #0
24014d72:	e7f9      	b.n	24014d68 <__itoa+0x24>

24014d74 <itoa>:
24014d74:	f7ff bfe6 	b.w	24014d44 <__itoa>

24014d78 <__utoa>:
24014d78:	b5f0      	push	{r4, r5, r6, r7, lr}
24014d7a:	4c1f      	ldr	r4, [pc, #124]	; (24014df8 <__utoa+0x80>)
24014d7c:	b08b      	sub	sp, #44	; 0x2c
24014d7e:	4605      	mov	r5, r0
24014d80:	460b      	mov	r3, r1
24014d82:	466e      	mov	r6, sp
24014d84:	f104 0c20 	add.w	ip, r4, #32
24014d88:	6820      	ldr	r0, [r4, #0]
24014d8a:	6861      	ldr	r1, [r4, #4]
24014d8c:	4637      	mov	r7, r6
24014d8e:	c703      	stmia	r7!, {r0, r1}
24014d90:	3408      	adds	r4, #8
24014d92:	4564      	cmp	r4, ip
24014d94:	463e      	mov	r6, r7
24014d96:	d1f7      	bne.n	24014d88 <__utoa+0x10>
24014d98:	7921      	ldrb	r1, [r4, #4]
24014d9a:	7139      	strb	r1, [r7, #4]
24014d9c:	1e91      	subs	r1, r2, #2
24014d9e:	6820      	ldr	r0, [r4, #0]
24014da0:	6038      	str	r0, [r7, #0]
24014da2:	2922      	cmp	r1, #34	; 0x22
24014da4:	f04f 0100 	mov.w	r1, #0
24014da8:	d904      	bls.n	24014db4 <__utoa+0x3c>
24014daa:	7019      	strb	r1, [r3, #0]
24014dac:	460b      	mov	r3, r1
24014dae:	4618      	mov	r0, r3
24014db0:	b00b      	add	sp, #44	; 0x2c
24014db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
24014db4:	1e58      	subs	r0, r3, #1
24014db6:	4684      	mov	ip, r0
24014db8:	fbb5 f7f2 	udiv	r7, r5, r2
24014dbc:	fb02 5617 	mls	r6, r2, r7, r5
24014dc0:	3628      	adds	r6, #40	; 0x28
24014dc2:	446e      	add	r6, sp
24014dc4:	460c      	mov	r4, r1
24014dc6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
24014dca:	f80c 6f01 	strb.w	r6, [ip, #1]!
24014dce:	462e      	mov	r6, r5
24014dd0:	42b2      	cmp	r2, r6
24014dd2:	f101 0101 	add.w	r1, r1, #1
24014dd6:	463d      	mov	r5, r7
24014dd8:	d9ee      	bls.n	24014db8 <__utoa+0x40>
24014dda:	2200      	movs	r2, #0
24014ddc:	545a      	strb	r2, [r3, r1]
24014dde:	1919      	adds	r1, r3, r4
24014de0:	1aa5      	subs	r5, r4, r2
24014de2:	42aa      	cmp	r2, r5
24014de4:	dae3      	bge.n	24014dae <__utoa+0x36>
24014de6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
24014dea:	780e      	ldrb	r6, [r1, #0]
24014dec:	7006      	strb	r6, [r0, #0]
24014dee:	3201      	adds	r2, #1
24014df0:	f801 5901 	strb.w	r5, [r1], #-1
24014df4:	e7f4      	b.n	24014de0 <__utoa+0x68>
24014df6:	bf00      	nop
24014df8:	2402b8d0 	.word	0x2402b8d0

24014dfc <memset>:
24014dfc:	4402      	add	r2, r0
24014dfe:	4603      	mov	r3, r0
24014e00:	4293      	cmp	r3, r2
24014e02:	d100      	bne.n	24014e06 <memset+0xa>
24014e04:	4770      	bx	lr
24014e06:	f803 1b01 	strb.w	r1, [r3], #1
24014e0a:	e7f9      	b.n	24014e00 <memset+0x4>

24014e0c <__errno>:
24014e0c:	4b01      	ldr	r3, [pc, #4]	; (24014e14 <__errno+0x8>)
24014e0e:	6818      	ldr	r0, [r3, #0]
24014e10:	4770      	bx	lr
24014e12:	bf00      	nop
24014e14:	200007a8 	.word	0x200007a8

24014e18 <__libc_init_array>:
24014e18:	b570      	push	{r4, r5, r6, lr}
24014e1a:	4d0d      	ldr	r5, [pc, #52]	; (24014e50 <__libc_init_array+0x38>)
24014e1c:	4c0d      	ldr	r4, [pc, #52]	; (24014e54 <__libc_init_array+0x3c>)
24014e1e:	1b64      	subs	r4, r4, r5
24014e20:	10a4      	asrs	r4, r4, #2
24014e22:	2600      	movs	r6, #0
24014e24:	42a6      	cmp	r6, r4
24014e26:	d109      	bne.n	24014e3c <__libc_init_array+0x24>
24014e28:	4d0b      	ldr	r5, [pc, #44]	; (24014e58 <__libc_init_array+0x40>)
24014e2a:	4c0c      	ldr	r4, [pc, #48]	; (24014e5c <__libc_init_array+0x44>)
24014e2c:	f017 fedc 	bl	2402cbe8 <_init>
24014e30:	1b64      	subs	r4, r4, r5
24014e32:	10a4      	asrs	r4, r4, #2
24014e34:	2600      	movs	r6, #0
24014e36:	42a6      	cmp	r6, r4
24014e38:	d105      	bne.n	24014e46 <__libc_init_array+0x2e>
24014e3a:	bd70      	pop	{r4, r5, r6, pc}
24014e3c:	f855 3b04 	ldr.w	r3, [r5], #4
24014e40:	4798      	blx	r3
24014e42:	3601      	adds	r6, #1
24014e44:	e7ee      	b.n	24014e24 <__libc_init_array+0xc>
24014e46:	f855 3b04 	ldr.w	r3, [r5], #4
24014e4a:	4798      	blx	r3
24014e4c:	3601      	adds	r6, #1
24014e4e:	e7f2      	b.n	24014e36 <__libc_init_array+0x1e>
24014e50:	2402cc68 	.word	0x2402cc68
24014e54:	2402cc68 	.word	0x2402cc68
24014e58:	2402cc68 	.word	0x2402cc68
24014e5c:	2402cc6c 	.word	0x2402cc6c

24014e60 <memcpy>:
24014e60:	440a      	add	r2, r1
24014e62:	4291      	cmp	r1, r2
24014e64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
24014e68:	d100      	bne.n	24014e6c <memcpy+0xc>
24014e6a:	4770      	bx	lr
24014e6c:	b510      	push	{r4, lr}
24014e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
24014e72:	f803 4f01 	strb.w	r4, [r3, #1]!
24014e76:	4291      	cmp	r1, r2
24014e78:	d1f9      	bne.n	24014e6e <memcpy+0xe>
24014e7a:	bd10      	pop	{r4, pc}

24014e7c <frexpf>:
24014e7c:	ee10 3a10 	vmov	r3, s0
24014e80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24014e84:	2100      	movs	r1, #0
24014e86:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24014e8a:	6001      	str	r1, [r0, #0]
24014e8c:	da19      	bge.n	24014ec2 <frexpf+0x46>
24014e8e:	b1c2      	cbz	r2, 24014ec2 <frexpf+0x46>
24014e90:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
24014e94:	d10a      	bne.n	24014eac <frexpf+0x30>
24014e96:	eddf 7a0b 	vldr	s15, [pc, #44]	; 24014ec4 <frexpf+0x48>
24014e9a:	ee60 7a27 	vmul.f32	s15, s0, s15
24014e9e:	f06f 0118 	mvn.w	r1, #24
24014ea2:	ee17 3a90 	vmov	r3, s15
24014ea6:	6001      	str	r1, [r0, #0]
24014ea8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24014eac:	6801      	ldr	r1, [r0, #0]
24014eae:	15d2      	asrs	r2, r2, #23
24014eb0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24014eb4:	3a7e      	subs	r2, #126	; 0x7e
24014eb6:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
24014eba:	4411      	add	r1, r2
24014ebc:	ee00 3a10 	vmov	s0, r3
24014ec0:	6001      	str	r1, [r0, #0]
24014ec2:	4770      	bx	lr
24014ec4:	4c000000 	.word	0x4c000000

24014ec8 <expf>:
24014ec8:	ee10 2a10 	vmov	r2, s0
24014ecc:	f240 412a 	movw	r1, #1066	; 0x42a
24014ed0:	f3c2 530a 	ubfx	r3, r2, #20, #11
24014ed4:	428b      	cmp	r3, r1
24014ed6:	b430      	push	{r4, r5}
24014ed8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
24014edc:	d92a      	bls.n	24014f34 <expf+0x6c>
24014ede:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
24014ee2:	d058      	beq.n	24014f96 <expf+0xce>
24014ee4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
24014ee8:	d303      	bcc.n	24014ef2 <expf+0x2a>
24014eea:	ee30 0a00 	vadd.f32	s0, s0, s0
24014eee:	bc30      	pop	{r4, r5}
24014ef0:	4770      	bx	lr
24014ef2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 24014f9c <expf+0xd4>
24014ef6:	eeb4 0ae7 	vcmpe.f32	s0, s15
24014efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014efe:	dd03      	ble.n	24014f08 <expf+0x40>
24014f00:	bc30      	pop	{r4, r5}
24014f02:	2000      	movs	r0, #0
24014f04:	f000 bc42 	b.w	2401578c <__math_oflowf>
24014f08:	eddf 7a25 	vldr	s15, [pc, #148]	; 24014fa0 <expf+0xd8>
24014f0c:	eeb4 0ae7 	vcmpe.f32	s0, s15
24014f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014f14:	d503      	bpl.n	24014f1e <expf+0x56>
24014f16:	bc30      	pop	{r4, r5}
24014f18:	2000      	movs	r0, #0
24014f1a:	f000 bc2b 	b.w	24015774 <__math_uflowf>
24014f1e:	eddf 7a21 	vldr	s15, [pc, #132]	; 24014fa4 <expf+0xdc>
24014f22:	eeb4 0ae7 	vcmpe.f32	s0, s15
24014f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014f2a:	d503      	bpl.n	24014f34 <expf+0x6c>
24014f2c:	bc30      	pop	{r4, r5}
24014f2e:	2000      	movs	r0, #0
24014f30:	f000 bc26 	b.w	24015780 <__math_may_uflowf>
24014f34:	4b1c      	ldr	r3, [pc, #112]	; (24014fa8 <expf+0xe0>)
24014f36:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24014f3a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
24014f3e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
24014f42:	eeb0 7b44 	vmov.f64	d7, d4
24014f46:	eea5 7b06 	vfma.f64	d7, d5, d6
24014f4a:	ee17 0a10 	vmov	r0, s14
24014f4e:	ee37 7b44 	vsub.f64	d7, d7, d4
24014f52:	f000 021f 	and.w	r2, r0, #31
24014f56:	ee95 7b06 	vfnms.f64	d7, d5, d6
24014f5a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
24014f5e:	ee27 4b07 	vmul.f64	d4, d7, d7
24014f62:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
24014f66:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
24014f6a:	eea5 6b07 	vfma.f64	d6, d5, d7
24014f6e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
24014f72:	684d      	ldr	r5, [r1, #4]
24014f74:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
24014f78:	2100      	movs	r1, #0
24014f7a:	190a      	adds	r2, r1, r4
24014f7c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
24014f80:	eea5 0b07 	vfma.f64	d0, d5, d7
24014f84:	ec43 2b17 	vmov	d7, r2, r3
24014f88:	eea6 0b04 	vfma.f64	d0, d6, d4
24014f8c:	ee20 0b07 	vmul.f64	d0, d0, d7
24014f90:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24014f94:	e7ab      	b.n	24014eee <expf+0x26>
24014f96:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24014fac <expf+0xe4>
24014f9a:	e7a8      	b.n	24014eee <expf+0x26>
24014f9c:	42b17217 	.word	0x42b17217
24014fa0:	c2cff1b4 	.word	0xc2cff1b4
24014fa4:	c2ce8ecf 	.word	0xc2ce8ecf
24014fa8:	2402b8f8 	.word	0x2402b8f8
24014fac:	00000000 	.word	0x00000000

24014fb0 <logf>:
24014fb0:	ee10 3a10 	vmov	r3, s0
24014fb4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24014fb8:	b410      	push	{r4}
24014fba:	d055      	beq.n	24015068 <logf+0xb8>
24014fbc:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
24014fc0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
24014fc4:	d31a      	bcc.n	24014ffc <logf+0x4c>
24014fc6:	005a      	lsls	r2, r3, #1
24014fc8:	d104      	bne.n	24014fd4 <logf+0x24>
24014fca:	f85d 4b04 	ldr.w	r4, [sp], #4
24014fce:	2001      	movs	r0, #1
24014fd0:	f000 bbe2 	b.w	24015798 <__math_divzerof>
24014fd4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24014fd8:	d043      	beq.n	24015062 <logf+0xb2>
24014fda:	2b00      	cmp	r3, #0
24014fdc:	db02      	blt.n	24014fe4 <logf+0x34>
24014fde:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
24014fe2:	d303      	bcc.n	24014fec <logf+0x3c>
24014fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
24014fe8:	f000 bbe8 	b.w	240157bc <__math_invalidf>
24014fec:	eddf 7a20 	vldr	s15, [pc, #128]	; 24015070 <logf+0xc0>
24014ff0:	ee20 0a27 	vmul.f32	s0, s0, s15
24014ff4:	ee10 3a10 	vmov	r3, s0
24014ff8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
24014ffc:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
24015000:	491c      	ldr	r1, [pc, #112]	; (24015074 <logf+0xc4>)
24015002:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
24015006:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
2401500a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
2401500e:	0dd4      	lsrs	r4, r2, #23
24015010:	eb01 1000 	add.w	r0, r1, r0, lsl #4
24015014:	05e4      	lsls	r4, r4, #23
24015016:	ed90 6b00 	vldr	d6, [r0]
2401501a:	1b1b      	subs	r3, r3, r4
2401501c:	ee07 3a90 	vmov	s15, r3
24015020:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
24015024:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24015028:	15d2      	asrs	r2, r2, #23
2401502a:	eea6 0b07 	vfma.f64	d0, d6, d7
2401502e:	ed90 6b02 	vldr	d6, [r0, #8]
24015032:	ee20 4b00 	vmul.f64	d4, d0, d0
24015036:	ee07 2a90 	vmov	s15, r2
2401503a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401503e:	eea7 6b05 	vfma.f64	d6, d7, d5
24015042:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
24015046:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
2401504a:	eea5 7b00 	vfma.f64	d7, d5, d0
2401504e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
24015052:	ee30 0b06 	vadd.f64	d0, d0, d6
24015056:	eea5 7b04 	vfma.f64	d7, d5, d4
2401505a:	eea4 0b07 	vfma.f64	d0, d4, d7
2401505e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24015062:	f85d 4b04 	ldr.w	r4, [sp], #4
24015066:	4770      	bx	lr
24015068:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24015078 <logf+0xc8>
2401506c:	e7f9      	b.n	24015062 <logf+0xb2>
2401506e:	bf00      	nop
24015070:	4b000000 	.word	0x4b000000
24015074:	2402ba40 	.word	0x2402ba40
	...

24015080 <exp>:
24015080:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
24015082:	ee10 3a90 	vmov	r3, s1
24015086:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
2401508a:	f3c3 540a 	ubfx	r4, r3, #20, #11
2401508e:	18a2      	adds	r2, r4, r2
24015090:	2a3e      	cmp	r2, #62	; 0x3e
24015092:	ee10 1a10 	vmov	r1, s0
24015096:	d922      	bls.n	240150de <exp+0x5e>
24015098:	2a00      	cmp	r2, #0
2401509a:	da06      	bge.n	240150aa <exp+0x2a>
2401509c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
240150a0:	ee30 0b07 	vadd.f64	d0, d0, d7
240150a4:	b004      	add	sp, #16
240150a6:	bcf0      	pop	{r4, r5, r6, r7}
240150a8:	4770      	bx	lr
240150aa:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
240150ae:	f04f 0000 	mov.w	r0, #0
240150b2:	d913      	bls.n	240150dc <exp+0x5c>
240150b4:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
240150b8:	bf08      	it	eq
240150ba:	4281      	cmpeq	r1, r0
240150bc:	f000 80a0 	beq.w	24015200 <exp+0x180>
240150c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
240150c4:	4294      	cmp	r4, r2
240150c6:	d0e9      	beq.n	2401509c <exp+0x1c>
240150c8:	4283      	cmp	r3, r0
240150ca:	da03      	bge.n	240150d4 <exp+0x54>
240150cc:	b004      	add	sp, #16
240150ce:	bcf0      	pop	{r4, r5, r6, r7}
240150d0:	f000 b8c6 	b.w	24015260 <__math_uflow>
240150d4:	b004      	add	sp, #16
240150d6:	bcf0      	pop	{r4, r5, r6, r7}
240150d8:	f000 b8ca 	b.w	24015270 <__math_oflow>
240150dc:	4604      	mov	r4, r0
240150de:	4950      	ldr	r1, [pc, #320]	; (24015220 <exp+0x1a0>)
240150e0:	ed91 6b02 	vldr	d6, [r1, #8]
240150e4:	ed91 5b00 	vldr	d5, [r1]
240150e8:	eeb0 7b46 	vmov.f64	d7, d6
240150ec:	eea5 7b00 	vfma.f64	d7, d5, d0
240150f0:	ee17 5a10 	vmov	r5, s14
240150f4:	ee37 7b46 	vsub.f64	d7, d7, d6
240150f8:	ed91 6b04 	vldr	d6, [r1, #16]
240150fc:	f005 037f 	and.w	r3, r5, #127	; 0x7f
24015100:	eea6 0b07 	vfma.f64	d0, d6, d7
24015104:	ed91 6b06 	vldr	d6, [r1, #24]
24015108:	18d8      	adds	r0, r3, r3
2401510a:	f100 030f 	add.w	r3, r0, #15
2401510e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
24015112:	eea6 0b07 	vfma.f64	d0, d6, d7
24015116:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
2401511a:	ee20 7b00 	vmul.f64	d7, d0, d0
2401511e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
24015122:	ed91 4b08 	vldr	d4, [r1, #32]
24015126:	ee30 6b06 	vadd.f64	d6, d0, d6
2401512a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
2401512e:	eea3 4b00 	vfma.f64	d4, d3, d0
24015132:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
24015136:	eea4 6b07 	vfma.f64	d6, d4, d7
2401513a:	ee27 7b07 	vmul.f64	d7, d7, d7
2401513e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
24015142:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
24015146:	f8d2 c004 	ldr.w	ip, [r2, #4]
2401514a:	eea3 4b00 	vfma.f64	d4, d3, d0
2401514e:	2600      	movs	r6, #0
24015150:	19f2      	adds	r2, r6, r7
24015152:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
24015156:	eea7 6b04 	vfma.f64	d6, d7, d4
2401515a:	2c00      	cmp	r4, #0
2401515c:	d14b      	bne.n	240151f6 <exp+0x176>
2401515e:	42b5      	cmp	r5, r6
24015160:	db10      	blt.n	24015184 <exp+0x104>
24015162:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
24015166:	ed9f 7b28 	vldr	d7, [pc, #160]	; 24015208 <exp+0x188>
2401516a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
2401516e:	4610      	mov	r0, r2
24015170:	ec41 0b10 	vmov	d0, r0, r1
24015174:	eea6 0b00 	vfma.f64	d0, d6, d0
24015178:	ee20 0b07 	vmul.f64	d0, d0, d7
2401517c:	b004      	add	sp, #16
2401517e:	bcf0      	pop	{r4, r5, r6, r7}
24015180:	f000 b88a 	b.w	24015298 <__math_check_oflow>
24015184:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
24015188:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
2401518c:	4610      	mov	r0, r2
2401518e:	ec41 0b17 	vmov	d7, r0, r1
24015192:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
24015196:	ee26 6b07 	vmul.f64	d6, d6, d7
2401519a:	ee37 5b06 	vadd.f64	d5, d7, d6
2401519e:	eeb4 5bc4 	vcmpe.f64	d5, d4
240151a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240151a6:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 24015210 <exp+0x190>
240151aa:	d51e      	bpl.n	240151ea <exp+0x16a>
240151ac:	ee35 3b04 	vadd.f64	d3, d5, d4
240151b0:	ee37 7b45 	vsub.f64	d7, d7, d5
240151b4:	ee37 7b06 	vadd.f64	d7, d7, d6
240151b8:	ee34 6b43 	vsub.f64	d6, d4, d3
240151bc:	ee36 6b05 	vadd.f64	d6, d6, d5
240151c0:	ee36 6b07 	vadd.f64	d6, d6, d7
240151c4:	ee36 6b03 	vadd.f64	d6, d6, d3
240151c8:	ee36 5b44 	vsub.f64	d5, d6, d4
240151cc:	eeb5 5b40 	vcmp.f64	d5, #0.0
240151d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240151d4:	d101      	bne.n	240151da <exp+0x15a>
240151d6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 24015218 <exp+0x198>
240151da:	ed8d 0b00 	vstr	d0, [sp]
240151de:	ed9d 7b00 	vldr	d7, [sp]
240151e2:	ee27 7b00 	vmul.f64	d7, d7, d0
240151e6:	ed8d 7b02 	vstr	d7, [sp, #8]
240151ea:	ee25 0b00 	vmul.f64	d0, d5, d0
240151ee:	b004      	add	sp, #16
240151f0:	bcf0      	pop	{r4, r5, r6, r7}
240151f2:	f000 b845 	b.w	24015280 <__math_check_uflow>
240151f6:	ec43 2b10 	vmov	d0, r2, r3
240151fa:	eea6 0b00 	vfma.f64	d0, d6, d0
240151fe:	e751      	b.n	240150a4 <exp+0x24>
24015200:	ed9f 0b05 	vldr	d0, [pc, #20]	; 24015218 <exp+0x198>
24015204:	e74e      	b.n	240150a4 <exp+0x24>
24015206:	bf00      	nop
24015208:	00000000 	.word	0x00000000
2401520c:	7f000000 	.word	0x7f000000
24015210:	00000000 	.word	0x00000000
24015214:	00100000 	.word	0x00100000
	...
24015220:	2402bb60 	.word	0x2402bb60

24015224 <with_errno>:
24015224:	b513      	push	{r0, r1, r4, lr}
24015226:	4604      	mov	r4, r0
24015228:	ed8d 0b00 	vstr	d0, [sp]
2401522c:	f7ff fdee 	bl	24014e0c <__errno>
24015230:	ed9d 0b00 	vldr	d0, [sp]
24015234:	6004      	str	r4, [r0, #0]
24015236:	b002      	add	sp, #8
24015238:	bd10      	pop	{r4, pc}

2401523a <xflow>:
2401523a:	b082      	sub	sp, #8
2401523c:	b158      	cbz	r0, 24015256 <xflow+0x1c>
2401523e:	eeb1 7b40 	vneg.f64	d7, d0
24015242:	ed8d 7b00 	vstr	d7, [sp]
24015246:	ed9d 7b00 	vldr	d7, [sp]
2401524a:	2022      	movs	r0, #34	; 0x22
2401524c:	ee20 0b07 	vmul.f64	d0, d0, d7
24015250:	b002      	add	sp, #8
24015252:	f7ff bfe7 	b.w	24015224 <with_errno>
24015256:	eeb0 7b40 	vmov.f64	d7, d0
2401525a:	e7f2      	b.n	24015242 <xflow+0x8>
2401525c:	0000      	movs	r0, r0
	...

24015260 <__math_uflow>:
24015260:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24015268 <__math_uflow+0x8>
24015264:	f7ff bfe9 	b.w	2401523a <xflow>
24015268:	00000000 	.word	0x00000000
2401526c:	10000000 	.word	0x10000000

24015270 <__math_oflow>:
24015270:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24015278 <__math_oflow+0x8>
24015274:	f7ff bfe1 	b.w	2401523a <xflow>
24015278:	00000000 	.word	0x00000000
2401527c:	70000000 	.word	0x70000000

24015280 <__math_check_uflow>:
24015280:	eeb5 0b40 	vcmp.f64	d0, #0.0
24015284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015288:	d102      	bne.n	24015290 <__math_check_uflow+0x10>
2401528a:	2022      	movs	r0, #34	; 0x22
2401528c:	f7ff bfca 	b.w	24015224 <with_errno>
24015290:	4770      	bx	lr
24015292:	0000      	movs	r0, r0
24015294:	0000      	movs	r0, r0
	...

24015298 <__math_check_oflow>:
24015298:	ed9f 6b07 	vldr	d6, [pc, #28]	; 240152b8 <__math_check_oflow+0x20>
2401529c:	eeb0 7bc0 	vabs.f64	d7, d0
240152a0:	eeb4 7b46 	vcmp.f64	d7, d6
240152a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240152a8:	dd02      	ble.n	240152b0 <__math_check_oflow+0x18>
240152aa:	2022      	movs	r0, #34	; 0x22
240152ac:	f7ff bfba 	b.w	24015224 <with_errno>
240152b0:	4770      	bx	lr
240152b2:	bf00      	nop
240152b4:	f3af 8000 	nop.w
240152b8:	ffffffff 	.word	0xffffffff
240152bc:	7fefffff 	.word	0x7fefffff

240152c0 <checkint>:
240152c0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
240152c4:	2b7e      	cmp	r3, #126	; 0x7e
240152c6:	dd10      	ble.n	240152ea <checkint+0x2a>
240152c8:	2b96      	cmp	r3, #150	; 0x96
240152ca:	dc0c      	bgt.n	240152e6 <checkint+0x26>
240152cc:	2201      	movs	r2, #1
240152ce:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
240152d2:	fa02 f303 	lsl.w	r3, r2, r3
240152d6:	1e5a      	subs	r2, r3, #1
240152d8:	4202      	tst	r2, r0
240152da:	d106      	bne.n	240152ea <checkint+0x2a>
240152dc:	4203      	tst	r3, r0
240152de:	bf0c      	ite	eq
240152e0:	2002      	moveq	r0, #2
240152e2:	2001      	movne	r0, #1
240152e4:	4770      	bx	lr
240152e6:	2002      	movs	r0, #2
240152e8:	4770      	bx	lr
240152ea:	2000      	movs	r0, #0
240152ec:	4770      	bx	lr
	...

240152f0 <powf>:
240152f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
240152f2:	ee10 1a10 	vmov	r1, s0
240152f6:	ee10 4a90 	vmov	r4, s1
240152fa:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
240152fe:	0062      	lsls	r2, r4, #1
24015300:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24015304:	eef0 7a40 	vmov.f32	s15, s0
24015308:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
2401530c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
24015310:	d252      	bcs.n	240153b8 <powf+0xc8>
24015312:	4298      	cmp	r0, r3
24015314:	d252      	bcs.n	240153bc <powf+0xcc>
24015316:	2000      	movs	r0, #0
24015318:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
2401531c:	4a9e      	ldr	r2, [pc, #632]	; (24015598 <powf+0x2a8>)
2401531e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
24015322:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
24015326:	f3c3 44c3 	ubfx	r4, r3, #19, #4
2401532a:	0ddb      	lsrs	r3, r3, #23
2401532c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
24015330:	05db      	lsls	r3, r3, #23
24015332:	ed94 5b00 	vldr	d5, [r4]
24015336:	1ac9      	subs	r1, r1, r3
24015338:	ee07 1a90 	vmov	s15, r1
2401533c:	15db      	asrs	r3, r3, #23
2401533e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24015342:	eea5 6b07 	vfma.f64	d6, d5, d7
24015346:	ed94 5b02 	vldr	d5, [r4, #8]
2401534a:	ee26 2b06 	vmul.f64	d2, d6, d6
2401534e:	ee22 1b02 	vmul.f64	d1, d2, d2
24015352:	ee07 3a90 	vmov	s15, r3
24015356:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
2401535a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401535e:	ee37 7b05 	vadd.f64	d7, d7, d5
24015362:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
24015366:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
2401536a:	eea6 3b05 	vfma.f64	d3, d6, d5
2401536e:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
24015372:	eea6 5b04 	vfma.f64	d5, d6, d4
24015376:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
2401537a:	eea6 7b04 	vfma.f64	d7, d6, d4
2401537e:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
24015382:	eea2 7b05 	vfma.f64	d7, d2, d5
24015386:	eea3 7b01 	vfma.f64	d7, d3, d1
2401538a:	ee26 6b07 	vmul.f64	d6, d6, d7
2401538e:	ee16 3a90 	vmov	r3, s13
24015392:	f3c3 32cf 	ubfx	r2, r3, #15, #16
24015396:	f248 03bf 	movw	r3, #32959	; 0x80bf
2401539a:	429a      	cmp	r2, r3
2401539c:	f0c0 80b0 	bcc.w	24015500 <powf+0x210>
240153a0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 24015578 <powf+0x288>
240153a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
240153a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240153ac:	dd78      	ble.n	240154a0 <powf+0x1b0>
240153ae:	b003      	add	sp, #12
240153b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
240153b4:	f000 b9ea 	b.w	2401578c <__math_oflowf>
240153b8:	4298      	cmp	r0, r3
240153ba:	d32d      	bcc.n	24015418 <powf+0x128>
240153bc:	b952      	cbnz	r2, 240153d4 <powf+0xe4>
240153be:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
240153c2:	0049      	lsls	r1, r1, #1
240153c4:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
240153c8:	f240 80c8 	bls.w	2401555c <powf+0x26c>
240153cc:	ee37 0aa0 	vadd.f32	s0, s15, s1
240153d0:	b003      	add	sp, #12
240153d2:	bd30      	pop	{r4, r5, pc}
240153d4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
240153d8:	d105      	bne.n	240153e6 <powf+0xf6>
240153da:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
240153de:	0064      	lsls	r4, r4, #1
240153e0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
240153e4:	e7f0      	b.n	240153c8 <powf+0xd8>
240153e6:	0049      	lsls	r1, r1, #1
240153e8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
240153ec:	d8ee      	bhi.n	240153cc <powf+0xdc>
240153ee:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
240153f2:	d1eb      	bne.n	240153cc <powf+0xdc>
240153f4:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
240153f8:	f000 80b0 	beq.w	2401555c <powf+0x26c>
240153fc:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
24015400:	ea6f 0404 	mvn.w	r4, r4
24015404:	bf34      	ite	cc
24015406:	2100      	movcc	r1, #0
24015408:	2101      	movcs	r1, #1
2401540a:	0fe4      	lsrs	r4, r4, #31
2401540c:	42a1      	cmp	r1, r4
2401540e:	f040 80a8 	bne.w	24015562 <powf+0x272>
24015412:	ee20 0aa0 	vmul.f32	s0, s1, s1
24015416:	e7db      	b.n	240153d0 <powf+0xe0>
24015418:	004d      	lsls	r5, r1, #1
2401541a:	1e6a      	subs	r2, r5, #1
2401541c:	429a      	cmp	r2, r3
2401541e:	d31c      	bcc.n	2401545a <powf+0x16a>
24015420:	2900      	cmp	r1, #0
24015422:	ee20 0a00 	vmul.f32	s0, s0, s0
24015426:	da0f      	bge.n	24015448 <powf+0x158>
24015428:	ee10 0a90 	vmov	r0, s1
2401542c:	f7ff ff48 	bl	240152c0 <checkint>
24015430:	2801      	cmp	r0, #1
24015432:	d109      	bne.n	24015448 <powf+0x158>
24015434:	eeb1 0a40 	vneg.f32	s0, s0
24015438:	b945      	cbnz	r5, 2401544c <powf+0x15c>
2401543a:	2c00      	cmp	r4, #0
2401543c:	dac8      	bge.n	240153d0 <powf+0xe0>
2401543e:	b003      	add	sp, #12
24015440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24015444:	f000 b9a8 	b.w	24015798 <__math_divzerof>
24015448:	2000      	movs	r0, #0
2401544a:	e7f5      	b.n	24015438 <powf+0x148>
2401544c:	2c00      	cmp	r4, #0
2401544e:	dabf      	bge.n	240153d0 <powf+0xe0>
24015450:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24015454:	ee87 0a80 	vdiv.f32	s0, s15, s0
24015458:	e7ba      	b.n	240153d0 <powf+0xe0>
2401545a:	2900      	cmp	r1, #0
2401545c:	da1e      	bge.n	2401549c <powf+0x1ac>
2401545e:	ee10 0a90 	vmov	r0, s1
24015462:	f7ff ff2d 	bl	240152c0 <checkint>
24015466:	b920      	cbnz	r0, 24015472 <powf+0x182>
24015468:	b003      	add	sp, #12
2401546a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401546e:	f000 b9a5 	b.w	240157bc <__math_invalidf>
24015472:	1e43      	subs	r3, r0, #1
24015474:	4258      	negs	r0, r3
24015476:	4158      	adcs	r0, r3
24015478:	0400      	lsls	r0, r0, #16
2401547a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2401547e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
24015482:	f4bf af49 	bcs.w	24015318 <powf+0x28>
24015486:	ed9f 7a45 	vldr	s14, [pc, #276]	; 2401559c <powf+0x2ac>
2401548a:	ee27 0a87 	vmul.f32	s0, s15, s14
2401548e:	ee10 3a10 	vmov	r3, s0
24015492:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24015496:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
2401549a:	e73d      	b.n	24015318 <powf+0x28>
2401549c:	2000      	movs	r0, #0
2401549e:	e7ee      	b.n	2401547e <powf+0x18e>
240154a0:	ed9f 7b37 	vldr	d7, [pc, #220]	; 24015580 <powf+0x290>
240154a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
240154a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240154ac:	dd10      	ble.n	240154d0 <powf+0x1e0>
240154ae:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
240154b2:	2800      	cmp	r0, #0
240154b4:	d158      	bne.n	24015568 <powf+0x278>
240154b6:	9300      	str	r3, [sp, #0]
240154b8:	eddd 7a00 	vldr	s15, [sp]
240154bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240154c0:	ee77 7a87 	vadd.f32	s15, s15, s14
240154c4:	eef4 7a47 	vcmp.f32	s15, s14
240154c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240154cc:	f47f af6f 	bne.w	240153ae <powf+0xbe>
240154d0:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 24015588 <powf+0x298>
240154d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
240154d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240154dc:	d804      	bhi.n	240154e8 <powf+0x1f8>
240154de:	b003      	add	sp, #12
240154e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
240154e4:	f000 b946 	b.w	24015774 <__math_uflowf>
240154e8:	ed9f 7b29 	vldr	d7, [pc, #164]	; 24015590 <powf+0x2a0>
240154ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
240154f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240154f4:	d504      	bpl.n	24015500 <powf+0x210>
240154f6:	b003      	add	sp, #12
240154f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
240154fc:	f000 b940 	b.w	24015780 <__math_may_uflowf>
24015500:	4b27      	ldr	r3, [pc, #156]	; (240155a0 <powf+0x2b0>)
24015502:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24015506:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
2401550a:	ee36 7b05 	vadd.f64	d7, d6, d5
2401550e:	ee17 2a10 	vmov	r2, s14
24015512:	ee37 7b45 	vsub.f64	d7, d7, d5
24015516:	f002 011f 	and.w	r1, r2, #31
2401551a:	ee36 7b47 	vsub.f64	d7, d6, d7
2401551e:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
24015522:	ee27 4b07 	vmul.f64	d4, d7, d7
24015526:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
2401552a:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
2401552e:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
24015532:	eea7 6b05 	vfma.f64	d6, d7, d5
24015536:	686d      	ldr	r5, [r5, #4]
24015538:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
2401553c:	1882      	adds	r2, r0, r2
2401553e:	2300      	movs	r3, #0
24015540:	1918      	adds	r0, r3, r4
24015542:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
24015546:	eea7 0b05 	vfma.f64	d0, d7, d5
2401554a:	ec41 0b17 	vmov	d7, r0, r1
2401554e:	eea6 0b04 	vfma.f64	d0, d6, d4
24015552:	ee20 0b07 	vmul.f64	d0, d0, d7
24015556:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401555a:	e739      	b.n	240153d0 <powf+0xe0>
2401555c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24015560:	e736      	b.n	240153d0 <powf+0xe0>
24015562:	ed9f 0a10 	vldr	s0, [pc, #64]	; 240155a4 <powf+0x2b4>
24015566:	e733      	b.n	240153d0 <powf+0xe0>
24015568:	9301      	str	r3, [sp, #4]
2401556a:	eddd 7a01 	vldr	s15, [sp, #4]
2401556e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24015572:	ee77 7a67 	vsub.f32	s15, s14, s15
24015576:	e7a5      	b.n	240154c4 <powf+0x1d4>
24015578:	ffd1d571 	.word	0xffd1d571
2401557c:	405fffff 	.word	0x405fffff
24015580:	ffa3aae2 	.word	0xffa3aae2
24015584:	405fffff 	.word	0x405fffff
24015588:	00000000 	.word	0x00000000
2401558c:	c062c000 	.word	0xc062c000
24015590:	00000000 	.word	0x00000000
24015594:	c062a000 	.word	0xc062a000
24015598:	2402ca38 	.word	0x2402ca38
2401559c:	4b000000 	.word	0x4b000000
240155a0:	2402b8f8 	.word	0x2402b8f8
240155a4:	00000000 	.word	0x00000000

240155a8 <sinf_poly>:
240155a8:	07cb      	lsls	r3, r1, #31
240155aa:	d412      	bmi.n	240155d2 <sinf_poly+0x2a>
240155ac:	ee21 5b00 	vmul.f64	d5, d1, d0
240155b0:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
240155b4:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
240155b8:	eea6 7b01 	vfma.f64	d7, d6, d1
240155bc:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
240155c0:	ee21 1b05 	vmul.f64	d1, d1, d5
240155c4:	eea6 0b05 	vfma.f64	d0, d6, d5
240155c8:	eea7 0b01 	vfma.f64	d0, d7, d1
240155cc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
240155d0:	4770      	bx	lr
240155d2:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
240155d6:	ee21 5b01 	vmul.f64	d5, d1, d1
240155da:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
240155de:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
240155e2:	eea1 7b06 	vfma.f64	d7, d1, d6
240155e6:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
240155ea:	eea1 0b06 	vfma.f64	d0, d1, d6
240155ee:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
240155f2:	ee21 1b05 	vmul.f64	d1, d1, d5
240155f6:	eea5 0b06 	vfma.f64	d0, d5, d6
240155fa:	e7e5      	b.n	240155c8 <sinf_poly+0x20>
240155fc:	0000      	movs	r0, r0
	...

24015600 <cosf>:
24015600:	b538      	push	{r3, r4, r5, lr}
24015602:	ee10 4a10 	vmov	r4, s0
24015606:	f3c4 530a 	ubfx	r3, r4, #20, #11
2401560a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
2401560e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
24015612:	d21f      	bcs.n	24015654 <cosf+0x54>
24015614:	ee27 7b07 	vmul.f64	d7, d7, d7
24015618:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
2401561c:	f0c0 8086 	bcc.w	2401572c <cosf+0x12c>
24015620:	ee27 4b07 	vmul.f64	d4, d7, d7
24015624:	4b46      	ldr	r3, [pc, #280]	; (24015740 <cosf+0x140>)
24015626:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
2401562a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
2401562e:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
24015632:	eea7 6b05 	vfma.f64	d6, d7, d5
24015636:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
2401563a:	eea7 0b05 	vfma.f64	d0, d7, d5
2401563e:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
24015642:	ee27 7b04 	vmul.f64	d7, d7, d4
24015646:	eea4 0b05 	vfma.f64	d0, d4, d5
2401564a:	eea6 0b07 	vfma.f64	d0, d6, d7
2401564e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24015652:	bd38      	pop	{r3, r4, r5, pc}
24015654:	f240 422e 	movw	r2, #1070	; 0x42e
24015658:	4293      	cmp	r3, r2
2401565a:	d829      	bhi.n	240156b0 <cosf+0xb0>
2401565c:	4b38      	ldr	r3, [pc, #224]	; (24015740 <cosf+0x140>)
2401565e:	ed93 6b08 	vldr	d6, [r3, #32]
24015662:	ee27 6b06 	vmul.f64	d6, d7, d6
24015666:	eefd 6bc6 	vcvt.s32.f64	s13, d6
2401566a:	f103 0070 	add.w	r0, r3, #112	; 0x70
2401566e:	ee16 1a90 	vmov	r1, s13
24015672:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
24015676:	1609      	asrs	r1, r1, #24
24015678:	ee06 1a90 	vmov	s13, r1
2401567c:	f001 0203 	and.w	r2, r1, #3
24015680:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
24015684:	eeb8 5be6 	vcvt.f64.s32	d5, s13
24015688:	ed92 0b00 	vldr	d0, [r2]
2401568c:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
24015690:	f011 0f02 	tst.w	r1, #2
24015694:	bf08      	it	eq
24015696:	4618      	moveq	r0, r3
24015698:	f081 0101 	eor.w	r1, r1, #1
2401569c:	eea5 7b46 	vfms.f64	d7, d5, d6
240156a0:	ee27 1b07 	vmul.f64	d1, d7, d7
240156a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
240156a8:	ee27 0b00 	vmul.f64	d0, d7, d0
240156ac:	f7ff bf7c 	b.w	240155a8 <sinf_poly>
240156b0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
240156b4:	d236      	bcs.n	24015724 <cosf+0x124>
240156b6:	4a23      	ldr	r2, [pc, #140]	; (24015744 <cosf+0x144>)
240156b8:	f3c4 6183 	ubfx	r1, r4, #26, #4
240156bc:	eb02 0581 	add.w	r5, r2, r1, lsl #2
240156c0:	f3c4 0316 	ubfx	r3, r4, #0, #23
240156c4:	f3c4 50c2 	ubfx	r0, r4, #23, #3
240156c8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
240156cc:	6a2a      	ldr	r2, [r5, #32]
240156ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
240156d2:	4083      	lsls	r3, r0
240156d4:	fba3 2002 	umull	r2, r0, r3, r2
240156d8:	692a      	ldr	r2, [r5, #16]
240156da:	4359      	muls	r1, r3
240156dc:	fbe3 0102 	umlal	r0, r1, r3, r2
240156e0:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
240156e4:	0f9d      	lsrs	r5, r3, #30
240156e6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
240156ea:	1ac9      	subs	r1, r1, r3
240156ec:	f7ea ff8a 	bl	24000604 <__aeabi_l2d>
240156f0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
240156f4:	4b12      	ldr	r3, [pc, #72]	; (24015740 <cosf+0x140>)
240156f6:	ed9f 0b10 	vldr	d0, [pc, #64]	; 24015738 <cosf+0x138>
240156fa:	ec41 0b17 	vmov	d7, r0, r1
240156fe:	f004 0203 	and.w	r2, r4, #3
24015702:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
24015706:	f014 0f02 	tst.w	r4, #2
2401570a:	ee27 0b00 	vmul.f64	d0, d7, d0
2401570e:	f103 0070 	add.w	r0, r3, #112	; 0x70
24015712:	ed92 7b00 	vldr	d7, [r2]
24015716:	ee20 1b00 	vmul.f64	d1, d0, d0
2401571a:	f085 0101 	eor.w	r1, r5, #1
2401571e:	bf08      	it	eq
24015720:	4618      	moveq	r0, r3
24015722:	e7bf      	b.n	240156a4 <cosf+0xa4>
24015724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
24015728:	f000 b848 	b.w	240157bc <__math_invalidf>
2401572c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24015730:	e78f      	b.n	24015652 <cosf+0x52>
24015732:	bf00      	nop
24015734:	f3af 8000 	nop.w
24015738:	54442d18 	.word	0x54442d18
2401573c:	3c1921fb 	.word	0x3c1921fb
24015740:	2402c430 	.word	0x2402c430
24015744:	2402c3d0 	.word	0x2402c3d0

24015748 <with_errnof>:
24015748:	b513      	push	{r0, r1, r4, lr}
2401574a:	4604      	mov	r4, r0
2401574c:	ed8d 0a01 	vstr	s0, [sp, #4]
24015750:	f7ff fb5c 	bl	24014e0c <__errno>
24015754:	ed9d 0a01 	vldr	s0, [sp, #4]
24015758:	6004      	str	r4, [r0, #0]
2401575a:	b002      	add	sp, #8
2401575c:	bd10      	pop	{r4, pc}

2401575e <xflowf>:
2401575e:	b130      	cbz	r0, 2401576e <xflowf+0x10>
24015760:	eef1 7a40 	vneg.f32	s15, s0
24015764:	ee27 0a80 	vmul.f32	s0, s15, s0
24015768:	2022      	movs	r0, #34	; 0x22
2401576a:	f7ff bfed 	b.w	24015748 <with_errnof>
2401576e:	eef0 7a40 	vmov.f32	s15, s0
24015772:	e7f7      	b.n	24015764 <xflowf+0x6>

24015774 <__math_uflowf>:
24015774:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401577c <__math_uflowf+0x8>
24015778:	f7ff bff1 	b.w	2401575e <xflowf>
2401577c:	10000000 	.word	0x10000000

24015780 <__math_may_uflowf>:
24015780:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24015788 <__math_may_uflowf+0x8>
24015784:	f7ff bfeb 	b.w	2401575e <xflowf>
24015788:	1a200000 	.word	0x1a200000

2401578c <__math_oflowf>:
2401578c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24015794 <__math_oflowf+0x8>
24015790:	f7ff bfe5 	b.w	2401575e <xflowf>
24015794:	70000000 	.word	0x70000000

24015798 <__math_divzerof>:
24015798:	ed9f 0a07 	vldr	s0, [pc, #28]	; 240157b8 <__math_divzerof+0x20>
2401579c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
240157a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240157a4:	2800      	cmp	r0, #0
240157a6:	f04f 0022 	mov.w	r0, #34	; 0x22
240157aa:	fe47 7a27 	vseleq.f32	s15, s14, s15
240157ae:	ee87 0a80 	vdiv.f32	s0, s15, s0
240157b2:	f7ff bfc9 	b.w	24015748 <with_errnof>
240157b6:	bf00      	nop
240157b8:	00000000 	.word	0x00000000

240157bc <__math_invalidf>:
240157bc:	eef0 7a40 	vmov.f32	s15, s0
240157c0:	ee30 7a40 	vsub.f32	s14, s0, s0
240157c4:	eef4 7a67 	vcmp.f32	s15, s15
240157c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240157cc:	ee87 0a07 	vdiv.f32	s0, s14, s14
240157d0:	d602      	bvs.n	240157d8 <__math_invalidf+0x1c>
240157d2:	2021      	movs	r0, #33	; 0x21
240157d4:	f7ff bfb8 	b.w	24015748 <with_errnof>
240157d8:	4770      	bx	lr
	...

240157dc <log10f>:
240157dc:	b508      	push	{r3, lr}
240157de:	ed2d 8b02 	vpush	{d8}
240157e2:	eeb0 8a40 	vmov.f32	s16, s0
240157e6:	f000 f9df 	bl	24015ba8 <__ieee754_log10f>
240157ea:	eeb4 8a48 	vcmp.f32	s16, s16
240157ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240157f2:	d60f      	bvs.n	24015814 <log10f+0x38>
240157f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
240157f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240157fc:	d80a      	bhi.n	24015814 <log10f+0x38>
240157fe:	eeb5 8a40 	vcmp.f32	s16, #0.0
24015802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015806:	d108      	bne.n	2401581a <log10f+0x3e>
24015808:	f7ff fb00 	bl	24014e0c <__errno>
2401580c:	2322      	movs	r3, #34	; 0x22
2401580e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 24015830 <log10f+0x54>
24015812:	6003      	str	r3, [r0, #0]
24015814:	ecbd 8b02 	vpop	{d8}
24015818:	bd08      	pop	{r3, pc}
2401581a:	f7ff faf7 	bl	24014e0c <__errno>
2401581e:	ecbd 8b02 	vpop	{d8}
24015822:	2321      	movs	r3, #33	; 0x21
24015824:	6003      	str	r3, [r0, #0]
24015826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2401582a:	4802      	ldr	r0, [pc, #8]	; (24015834 <log10f+0x58>)
2401582c:	f000 b80c 	b.w	24015848 <nanf>
24015830:	ff800000 	.word	0xff800000
24015834:	2402b8f4 	.word	0x2402b8f4

24015838 <fabsf>:
24015838:	ee10 3a10 	vmov	r3, s0
2401583c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24015840:	ee00 3a10 	vmov	s0, r3
24015844:	4770      	bx	lr
	...

24015848 <nanf>:
24015848:	ed9f 0a01 	vldr	s0, [pc, #4]	; 24015850 <nanf+0x8>
2401584c:	4770      	bx	lr
2401584e:	bf00      	nop
24015850:	7fc00000 	.word	0x7fc00000

24015854 <tanf>:
24015854:	ee10 3a10 	vmov	r3, s0
24015858:	b507      	push	{r0, r1, r2, lr}
2401585a:	4a12      	ldr	r2, [pc, #72]	; (240158a4 <tanf+0x50>)
2401585c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24015860:	4293      	cmp	r3, r2
24015862:	dc07      	bgt.n	24015874 <tanf+0x20>
24015864:	eddf 0a10 	vldr	s1, [pc, #64]	; 240158a8 <tanf+0x54>
24015868:	2001      	movs	r0, #1
2401586a:	b003      	add	sp, #12
2401586c:	f85d eb04 	ldr.w	lr, [sp], #4
24015870:	f000 b8ba 	b.w	240159e8 <__kernel_tanf>
24015874:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24015878:	db04      	blt.n	24015884 <tanf+0x30>
2401587a:	ee30 0a40 	vsub.f32	s0, s0, s0
2401587e:	b003      	add	sp, #12
24015880:	f85d fb04 	ldr.w	pc, [sp], #4
24015884:	4668      	mov	r0, sp
24015886:	f000 fa27 	bl	24015cd8 <__ieee754_rem_pio2f>
2401588a:	0040      	lsls	r0, r0, #1
2401588c:	f000 0002 	and.w	r0, r0, #2
24015890:	eddd 0a01 	vldr	s1, [sp, #4]
24015894:	ed9d 0a00 	vldr	s0, [sp]
24015898:	f1c0 0001 	rsb	r0, r0, #1
2401589c:	f000 f8a4 	bl	240159e8 <__kernel_tanf>
240158a0:	e7ed      	b.n	2401587e <tanf+0x2a>
240158a2:	bf00      	nop
240158a4:	3f490fda 	.word	0x3f490fda
240158a8:	00000000 	.word	0x00000000

240158ac <tanhf>:
240158ac:	b538      	push	{r3, r4, r5, lr}
240158ae:	ee10 5a10 	vmov	r5, s0
240158b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
240158b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
240158ba:	ed2d 8b02 	vpush	{d8}
240158be:	db0f      	blt.n	240158e0 <tanhf+0x34>
240158c0:	4b2a      	ldr	r3, [pc, #168]	; (2401596c <tanhf+0xc0>)
240158c2:	ed93 6a00 	vldr	s12, [r3]
240158c6:	edd3 6a00 	vldr	s13, [r3]
240158ca:	eec6 7a00 	vdiv.f32	s15, s12, s0
240158ce:	2d00      	cmp	r5, #0
240158d0:	bfac      	ite	ge
240158d2:	ee37 0aa6 	vaddge.f32	s0, s15, s13
240158d6:	ee37 0ae6 	vsublt.f32	s0, s15, s13
240158da:	ecbd 8b02 	vpop	{d8}
240158de:	bd38      	pop	{r3, r4, r5, pc}
240158e0:	4a23      	ldr	r2, [pc, #140]	; (24015970 <tanhf+0xc4>)
240158e2:	4293      	cmp	r3, r2
240158e4:	dc39      	bgt.n	2401595a <tanhf+0xae>
240158e6:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
240158ea:	da07      	bge.n	240158fc <tanhf+0x50>
240158ec:	4b1f      	ldr	r3, [pc, #124]	; (2401596c <tanhf+0xc0>)
240158ee:	edd3 7a00 	vldr	s15, [r3]
240158f2:	ee77 7a80 	vadd.f32	s15, s15, s0
240158f6:	ee27 0a80 	vmul.f32	s0, s15, s0
240158fa:	e7ee      	b.n	240158da <tanhf+0x2e>
240158fc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24015900:	4c1c      	ldr	r4, [pc, #112]	; (24015974 <tanhf+0xc8>)
24015902:	db19      	blt.n	24015938 <tanhf+0x8c>
24015904:	f7ff ff98 	bl	24015838 <fabsf>
24015908:	edd4 7a00 	vldr	s15, [r4]
2401590c:	ee20 0a27 	vmul.f32	s0, s0, s15
24015910:	f001 f802 	bl	24016918 <expm1f>
24015914:	4b15      	ldr	r3, [pc, #84]	; (2401596c <tanhf+0xc0>)
24015916:	edd3 7a00 	vldr	s15, [r3]
2401591a:	edd4 6a00 	vldr	s13, [r4]
2401591e:	ed94 7a00 	vldr	s14, [r4]
24015922:	ee37 0a00 	vadd.f32	s0, s14, s0
24015926:	ee86 7a80 	vdiv.f32	s14, s13, s0
2401592a:	ee37 0ac7 	vsub.f32	s0, s15, s14
2401592e:	2d00      	cmp	r5, #0
24015930:	bfb8      	it	lt
24015932:	eeb1 0a40 	vneglt.f32	s0, s0
24015936:	e7d0      	b.n	240158da <tanhf+0x2e>
24015938:	ed94 8a00 	vldr	s16, [r4]
2401593c:	f7ff ff7c 	bl	24015838 <fabsf>
24015940:	ee28 0a40 	vnmul.f32	s0, s16, s0
24015944:	f000 ffe8 	bl	24016918 <expm1f>
24015948:	edd4 7a00 	vldr	s15, [r4]
2401594c:	ee77 7a80 	vadd.f32	s15, s15, s0
24015950:	eeb1 7a40 	vneg.f32	s14, s0
24015954:	ee87 0a27 	vdiv.f32	s0, s14, s15
24015958:	e7e9      	b.n	2401592e <tanhf+0x82>
2401595a:	4b04      	ldr	r3, [pc, #16]	; (2401596c <tanhf+0xc0>)
2401595c:	ed93 0a00 	vldr	s0, [r3]
24015960:	4b05      	ldr	r3, [pc, #20]	; (24015978 <tanhf+0xcc>)
24015962:	edd3 7a00 	vldr	s15, [r3]
24015966:	ee30 0a67 	vsub.f32	s0, s0, s15
2401596a:	e7e0      	b.n	2401592e <tanhf+0x82>
2401596c:	200007ac 	.word	0x200007ac
24015970:	41afffff 	.word	0x41afffff
24015974:	200007b4 	.word	0x200007b4
24015978:	200007b0 	.word	0x200007b0
2401597c:	00000000 	.word	0x00000000

24015980 <tan>:
24015980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
24015982:	eeb0 7b40 	vmov.f64	d7, d0
24015986:	ee17 3a90 	vmov	r3, s15
2401598a:	4a15      	ldr	r2, [pc, #84]	; (240159e0 <tan+0x60>)
2401598c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24015990:	4293      	cmp	r3, r2
24015992:	dc07      	bgt.n	240159a4 <tan+0x24>
24015994:	ed9f 1b10 	vldr	d1, [pc, #64]	; 240159d8 <tan+0x58>
24015998:	2001      	movs	r0, #1
2401599a:	b005      	add	sp, #20
2401599c:	f85d eb04 	ldr.w	lr, [sp], #4
240159a0:	f000 be9e 	b.w	240166e0 <__kernel_tan>
240159a4:	4a0f      	ldr	r2, [pc, #60]	; (240159e4 <tan+0x64>)
240159a6:	4293      	cmp	r3, r2
240159a8:	dd04      	ble.n	240159b4 <tan+0x34>
240159aa:	ee30 0b40 	vsub.f64	d0, d0, d0
240159ae:	b005      	add	sp, #20
240159b0:	f85d fb04 	ldr.w	pc, [sp], #4
240159b4:	4668      	mov	r0, sp
240159b6:	f000 fabb 	bl	24015f30 <__ieee754_rem_pio2>
240159ba:	0040      	lsls	r0, r0, #1
240159bc:	f000 0002 	and.w	r0, r0, #2
240159c0:	ed9d 1b02 	vldr	d1, [sp, #8]
240159c4:	ed9d 0b00 	vldr	d0, [sp]
240159c8:	f1c0 0001 	rsb	r0, r0, #1
240159cc:	f000 fe88 	bl	240166e0 <__kernel_tan>
240159d0:	e7ed      	b.n	240159ae <tan+0x2e>
240159d2:	bf00      	nop
240159d4:	f3af 8000 	nop.w
	...
240159e0:	3fe921fb 	.word	0x3fe921fb
240159e4:	7fefffff 	.word	0x7fefffff

240159e8 <__kernel_tanf>:
240159e8:	b508      	push	{r3, lr}
240159ea:	ee10 3a10 	vmov	r3, s0
240159ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
240159f2:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
240159f6:	eef0 7a40 	vmov.f32	s15, s0
240159fa:	da17      	bge.n	24015a2c <__kernel_tanf+0x44>
240159fc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
24015a00:	ee17 1a10 	vmov	r1, s14
24015a04:	bb41      	cbnz	r1, 24015a58 <__kernel_tanf+0x70>
24015a06:	1c43      	adds	r3, r0, #1
24015a08:	4313      	orrs	r3, r2
24015a0a:	d108      	bne.n	24015a1e <__kernel_tanf+0x36>
24015a0c:	f7ff ff14 	bl	24015838 <fabsf>
24015a10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24015a14:	eec7 7a00 	vdiv.f32	s15, s14, s0
24015a18:	eeb0 0a67 	vmov.f32	s0, s15
24015a1c:	bd08      	pop	{r3, pc}
24015a1e:	2801      	cmp	r0, #1
24015a20:	d0fa      	beq.n	24015a18 <__kernel_tanf+0x30>
24015a22:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24015a26:	eec7 7a00 	vdiv.f32	s15, s14, s0
24015a2a:	e7f5      	b.n	24015a18 <__kernel_tanf+0x30>
24015a2c:	494c      	ldr	r1, [pc, #304]	; (24015b60 <__kernel_tanf+0x178>)
24015a2e:	428a      	cmp	r2, r1
24015a30:	db12      	blt.n	24015a58 <__kernel_tanf+0x70>
24015a32:	2b00      	cmp	r3, #0
24015a34:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 24015b64 <__kernel_tanf+0x17c>
24015a38:	bfb8      	it	lt
24015a3a:	eef1 7a40 	vneglt.f32	s15, s0
24015a3e:	ee37 7a67 	vsub.f32	s14, s14, s15
24015a42:	eddf 7a49 	vldr	s15, [pc, #292]	; 24015b68 <__kernel_tanf+0x180>
24015a46:	bfb8      	it	lt
24015a48:	eef1 0a60 	vneglt.f32	s1, s1
24015a4c:	ee77 7ae0 	vsub.f32	s15, s15, s1
24015a50:	eddf 0a46 	vldr	s1, [pc, #280]	; 24015b6c <__kernel_tanf+0x184>
24015a54:	ee77 7a87 	vadd.f32	s15, s15, s14
24015a58:	ee67 6aa7 	vmul.f32	s13, s15, s15
24015a5c:	eddf 5a44 	vldr	s11, [pc, #272]	; 24015b70 <__kernel_tanf+0x188>
24015a60:	ed9f 6a44 	vldr	s12, [pc, #272]	; 24015b74 <__kernel_tanf+0x18c>
24015a64:	ed9f 5a44 	vldr	s10, [pc, #272]	; 24015b78 <__kernel_tanf+0x190>
24015a68:	493d      	ldr	r1, [pc, #244]	; (24015b60 <__kernel_tanf+0x178>)
24015a6a:	ee26 7aa6 	vmul.f32	s14, s13, s13
24015a6e:	428a      	cmp	r2, r1
24015a70:	eea7 6a25 	vfma.f32	s12, s14, s11
24015a74:	eddf 5a41 	vldr	s11, [pc, #260]	; 24015b7c <__kernel_tanf+0x194>
24015a78:	eee6 5a07 	vfma.f32	s11, s12, s14
24015a7c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 24015b80 <__kernel_tanf+0x198>
24015a80:	eea5 6a87 	vfma.f32	s12, s11, s14
24015a84:	eddf 5a3f 	vldr	s11, [pc, #252]	; 24015b84 <__kernel_tanf+0x19c>
24015a88:	eee6 5a07 	vfma.f32	s11, s12, s14
24015a8c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 24015b88 <__kernel_tanf+0x1a0>
24015a90:	eea5 6a87 	vfma.f32	s12, s11, s14
24015a94:	eddf 5a3d 	vldr	s11, [pc, #244]	; 24015b8c <__kernel_tanf+0x1a4>
24015a98:	eee7 5a05 	vfma.f32	s11, s14, s10
24015a9c:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 24015b90 <__kernel_tanf+0x1a8>
24015aa0:	eea5 5a87 	vfma.f32	s10, s11, s14
24015aa4:	eddf 5a3b 	vldr	s11, [pc, #236]	; 24015b94 <__kernel_tanf+0x1ac>
24015aa8:	eee5 5a07 	vfma.f32	s11, s10, s14
24015aac:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 24015b98 <__kernel_tanf+0x1b0>
24015ab0:	eea5 5a87 	vfma.f32	s10, s11, s14
24015ab4:	eddf 5a39 	vldr	s11, [pc, #228]	; 24015b9c <__kernel_tanf+0x1b4>
24015ab8:	eee5 5a07 	vfma.f32	s11, s10, s14
24015abc:	eeb0 7a46 	vmov.f32	s14, s12
24015ac0:	eea5 7aa6 	vfma.f32	s14, s11, s13
24015ac4:	ee27 5aa6 	vmul.f32	s10, s15, s13
24015ac8:	eeb0 6a60 	vmov.f32	s12, s1
24015acc:	eea7 6a05 	vfma.f32	s12, s14, s10
24015ad0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 24015ba0 <__kernel_tanf+0x1b8>
24015ad4:	eee6 0a26 	vfma.f32	s1, s12, s13
24015ad8:	eee5 0a07 	vfma.f32	s1, s10, s14
24015adc:	ee77 6aa0 	vadd.f32	s13, s15, s1
24015ae0:	db1d      	blt.n	24015b1e <__kernel_tanf+0x136>
24015ae2:	ee07 0a10 	vmov	s14, r0
24015ae6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24015aea:	ee66 5aa6 	vmul.f32	s11, s13, s13
24015aee:	ee76 6a87 	vadd.f32	s13, s13, s14
24015af2:	179b      	asrs	r3, r3, #30
24015af4:	ee85 6aa6 	vdiv.f32	s12, s11, s13
24015af8:	f003 0302 	and.w	r3, r3, #2
24015afc:	f1c3 0301 	rsb	r3, r3, #1
24015b00:	ee76 6a60 	vsub.f32	s13, s12, s1
24015b04:	ee77 7ae6 	vsub.f32	s15, s15, s13
24015b08:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
24015b0c:	eea7 7ae6 	vfms.f32	s14, s15, s13
24015b10:	ee07 3a90 	vmov	s15, r3
24015b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015b18:	ee67 7a87 	vmul.f32	s15, s15, s14
24015b1c:	e77c      	b.n	24015a18 <__kernel_tanf+0x30>
24015b1e:	2801      	cmp	r0, #1
24015b20:	d01b      	beq.n	24015b5a <__kernel_tanf+0x172>
24015b22:	4b20      	ldr	r3, [pc, #128]	; (24015ba4 <__kernel_tanf+0x1bc>)
24015b24:	ee16 2a90 	vmov	r2, s13
24015b28:	401a      	ands	r2, r3
24015b2a:	ee05 2a90 	vmov	s11, r2
24015b2e:	ee75 7ae7 	vsub.f32	s15, s11, s15
24015b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24015b36:	ee70 0ae7 	vsub.f32	s1, s1, s15
24015b3a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24015b3e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
24015b42:	ee16 2a10 	vmov	r2, s12
24015b46:	4013      	ands	r3, r2
24015b48:	ee07 3a90 	vmov	s15, r3
24015b4c:	eea5 7aa7 	vfma.f32	s14, s11, s15
24015b50:	eea0 7aa7 	vfma.f32	s14, s1, s15
24015b54:	eee7 7a06 	vfma.f32	s15, s14, s12
24015b58:	e75e      	b.n	24015a18 <__kernel_tanf+0x30>
24015b5a:	eef0 7a66 	vmov.f32	s15, s13
24015b5e:	e75b      	b.n	24015a18 <__kernel_tanf+0x30>
24015b60:	3f2ca140 	.word	0x3f2ca140
24015b64:	3f490fda 	.word	0x3f490fda
24015b68:	33222168 	.word	0x33222168
24015b6c:	00000000 	.word	0x00000000
24015b70:	b79bae5f 	.word	0xb79bae5f
24015b74:	38a3f445 	.word	0x38a3f445
24015b78:	37d95384 	.word	0x37d95384
24015b7c:	3a1a26c8 	.word	0x3a1a26c8
24015b80:	3b6b6916 	.word	0x3b6b6916
24015b84:	3cb327a4 	.word	0x3cb327a4
24015b88:	3e088889 	.word	0x3e088889
24015b8c:	3895c07a 	.word	0x3895c07a
24015b90:	398137b9 	.word	0x398137b9
24015b94:	3abede48 	.word	0x3abede48
24015b98:	3c11371f 	.word	0x3c11371f
24015b9c:	3d5d0dd1 	.word	0x3d5d0dd1
24015ba0:	3eaaaaab 	.word	0x3eaaaaab
24015ba4:	fffff000 	.word	0xfffff000

24015ba8 <__ieee754_log10f>:
24015ba8:	b508      	push	{r3, lr}
24015baa:	ee10 2a10 	vmov	r2, s0
24015bae:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
24015bb2:	ed2d 8b02 	vpush	{d8}
24015bb6:	d108      	bne.n	24015bca <__ieee754_log10f+0x22>
24015bb8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 24015c40 <__ieee754_log10f+0x98>
24015bbc:	eddf 7a21 	vldr	s15, [pc, #132]	; 24015c44 <__ieee754_log10f+0x9c>
24015bc0:	ee87 0a27 	vdiv.f32	s0, s14, s15
24015bc4:	ecbd 8b02 	vpop	{d8}
24015bc8:	bd08      	pop	{r3, pc}
24015bca:	2a00      	cmp	r2, #0
24015bcc:	da02      	bge.n	24015bd4 <__ieee754_log10f+0x2c>
24015bce:	ee30 7a40 	vsub.f32	s14, s0, s0
24015bd2:	e7f3      	b.n	24015bbc <__ieee754_log10f+0x14>
24015bd4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24015bd8:	db02      	blt.n	24015be0 <__ieee754_log10f+0x38>
24015bda:	ee30 0a00 	vadd.f32	s0, s0, s0
24015bde:	e7f1      	b.n	24015bc4 <__ieee754_log10f+0x1c>
24015be0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
24015be4:	bfbf      	itttt	lt
24015be6:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 24015c48 <__ieee754_log10f+0xa0>
24015bea:	ee60 7a27 	vmullt.f32	s15, s0, s15
24015bee:	f06f 0118 	mvnlt.w	r1, #24
24015bf2:	ee17 2a90 	vmovlt	r2, s15
24015bf6:	ea4f 53e2 	mov.w	r3, r2, asr #23
24015bfa:	bfa8      	it	ge
24015bfc:	2100      	movge	r1, #0
24015bfe:	3b7f      	subs	r3, #127	; 0x7f
24015c00:	440b      	add	r3, r1
24015c02:	0fd9      	lsrs	r1, r3, #31
24015c04:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
24015c08:	ee07 3a90 	vmov	s15, r3
24015c0c:	f3c2 0216 	ubfx	r2, r2, #0, #23
24015c10:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
24015c14:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
24015c18:	ee00 3a10 	vmov	s0, r3
24015c1c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
24015c20:	f7ff f9c6 	bl	24014fb0 <logf>
24015c24:	eddf 7a09 	vldr	s15, [pc, #36]	; 24015c4c <__ieee754_log10f+0xa4>
24015c28:	ee20 0a27 	vmul.f32	s0, s0, s15
24015c2c:	eddf 7a08 	vldr	s15, [pc, #32]	; 24015c50 <__ieee754_log10f+0xa8>
24015c30:	eea8 0a27 	vfma.f32	s0, s16, s15
24015c34:	eddf 7a07 	vldr	s15, [pc, #28]	; 24015c54 <__ieee754_log10f+0xac>
24015c38:	eea8 0a27 	vfma.f32	s0, s16, s15
24015c3c:	e7c2      	b.n	24015bc4 <__ieee754_log10f+0x1c>
24015c3e:	bf00      	nop
24015c40:	cc000000 	.word	0xcc000000
24015c44:	00000000 	.word	0x00000000
24015c48:	4c000000 	.word	0x4c000000
24015c4c:	3ede5bd9 	.word	0x3ede5bd9
24015c50:	355427db 	.word	0x355427db
24015c54:	3e9a2080 	.word	0x3e9a2080

24015c58 <lrintf>:
24015c58:	ee10 3a10 	vmov	r3, s0
24015c5c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24015c60:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
24015c64:	281e      	cmp	r0, #30
24015c66:	b082      	sub	sp, #8
24015c68:	dc2f      	bgt.n	24015cca <lrintf+0x72>
24015c6a:	1c41      	adds	r1, r0, #1
24015c6c:	da02      	bge.n	24015c74 <lrintf+0x1c>
24015c6e:	2000      	movs	r0, #0
24015c70:	b002      	add	sp, #8
24015c72:	4770      	bx	lr
24015c74:	2816      	cmp	r0, #22
24015c76:	ea4f 71d3 	mov.w	r1, r3, lsr #31
24015c7a:	dd0a      	ble.n	24015c92 <lrintf+0x3a>
24015c7c:	f3c3 0316 	ubfx	r3, r3, #0, #23
24015c80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
24015c84:	3a96      	subs	r2, #150	; 0x96
24015c86:	fa03 f002 	lsl.w	r0, r3, r2
24015c8a:	2900      	cmp	r1, #0
24015c8c:	d0f0      	beq.n	24015c70 <lrintf+0x18>
24015c8e:	4240      	negs	r0, r0
24015c90:	e7ee      	b.n	24015c70 <lrintf+0x18>
24015c92:	4b10      	ldr	r3, [pc, #64]	; (24015cd4 <lrintf+0x7c>)
24015c94:	eb03 0381 	add.w	r3, r3, r1, lsl #2
24015c98:	ed93 7a00 	vldr	s14, [r3]
24015c9c:	ee37 0a00 	vadd.f32	s0, s14, s0
24015ca0:	ed8d 0a01 	vstr	s0, [sp, #4]
24015ca4:	eddd 7a01 	vldr	s15, [sp, #4]
24015ca8:	ee77 7ac7 	vsub.f32	s15, s15, s14
24015cac:	ee17 3a90 	vmov	r3, s15
24015cb0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
24015cb4:	d0db      	beq.n	24015c6e <lrintf+0x16>
24015cb6:	f3c3 0016 	ubfx	r0, r3, #0, #23
24015cba:	f3c3 53c7 	ubfx	r3, r3, #23, #8
24015cbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
24015cc2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
24015cc6:	40d8      	lsrs	r0, r3
24015cc8:	e7df      	b.n	24015c8a <lrintf+0x32>
24015cca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
24015cce:	ee17 0a90 	vmov	r0, s15
24015cd2:	e7cd      	b.n	24015c70 <lrintf+0x18>
24015cd4:	2402c510 	.word	0x2402c510

24015cd8 <__ieee754_rem_pio2f>:
24015cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
24015cda:	ee10 6a10 	vmov	r6, s0
24015cde:	4b86      	ldr	r3, [pc, #536]	; (24015ef8 <__ieee754_rem_pio2f+0x220>)
24015ce0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
24015ce4:	429d      	cmp	r5, r3
24015ce6:	b087      	sub	sp, #28
24015ce8:	4604      	mov	r4, r0
24015cea:	dc05      	bgt.n	24015cf8 <__ieee754_rem_pio2f+0x20>
24015cec:	2300      	movs	r3, #0
24015cee:	ed80 0a00 	vstr	s0, [r0]
24015cf2:	6043      	str	r3, [r0, #4]
24015cf4:	2000      	movs	r0, #0
24015cf6:	e020      	b.n	24015d3a <__ieee754_rem_pio2f+0x62>
24015cf8:	4b80      	ldr	r3, [pc, #512]	; (24015efc <__ieee754_rem_pio2f+0x224>)
24015cfa:	429d      	cmp	r5, r3
24015cfc:	dc38      	bgt.n	24015d70 <__ieee754_rem_pio2f+0x98>
24015cfe:	2e00      	cmp	r6, #0
24015d00:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 24015f00 <__ieee754_rem_pio2f+0x228>
24015d04:	4b7f      	ldr	r3, [pc, #508]	; (24015f04 <__ieee754_rem_pio2f+0x22c>)
24015d06:	f025 050f 	bic.w	r5, r5, #15
24015d0a:	dd18      	ble.n	24015d3e <__ieee754_rem_pio2f+0x66>
24015d0c:	429d      	cmp	r5, r3
24015d0e:	ee70 7a47 	vsub.f32	s15, s0, s14
24015d12:	bf09      	itett	eq
24015d14:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 24015f08 <__ieee754_rem_pio2f+0x230>
24015d18:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 24015f0c <__ieee754_rem_pio2f+0x234>
24015d1c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
24015d20:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 24015f10 <__ieee754_rem_pio2f+0x238>
24015d24:	ee77 6ac7 	vsub.f32	s13, s15, s14
24015d28:	ee77 7ae6 	vsub.f32	s15, s15, s13
24015d2c:	edc0 6a00 	vstr	s13, [r0]
24015d30:	ee77 7ac7 	vsub.f32	s15, s15, s14
24015d34:	edc0 7a01 	vstr	s15, [r0, #4]
24015d38:	2001      	movs	r0, #1
24015d3a:	b007      	add	sp, #28
24015d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
24015d3e:	429d      	cmp	r5, r3
24015d40:	ee70 7a07 	vadd.f32	s15, s0, s14
24015d44:	bf09      	itett	eq
24015d46:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 24015f08 <__ieee754_rem_pio2f+0x230>
24015d4a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 24015f0c <__ieee754_rem_pio2f+0x234>
24015d4e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
24015d52:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 24015f10 <__ieee754_rem_pio2f+0x238>
24015d56:	ee77 6a87 	vadd.f32	s13, s15, s14
24015d5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
24015d5e:	edc0 6a00 	vstr	s13, [r0]
24015d62:	ee77 7a87 	vadd.f32	s15, s15, s14
24015d66:	edc0 7a01 	vstr	s15, [r0, #4]
24015d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24015d6e:	e7e4      	b.n	24015d3a <__ieee754_rem_pio2f+0x62>
24015d70:	4b68      	ldr	r3, [pc, #416]	; (24015f14 <__ieee754_rem_pio2f+0x23c>)
24015d72:	429d      	cmp	r5, r3
24015d74:	dc71      	bgt.n	24015e5a <__ieee754_rem_pio2f+0x182>
24015d76:	f7ff fd5f 	bl	24015838 <fabsf>
24015d7a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 24015f18 <__ieee754_rem_pio2f+0x240>
24015d7e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24015d82:	eee0 7a07 	vfma.f32	s15, s0, s14
24015d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24015d8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24015d8e:	ee17 0a90 	vmov	r0, s15
24015d92:	eddf 7a5b 	vldr	s15, [pc, #364]	; 24015f00 <__ieee754_rem_pio2f+0x228>
24015d96:	eea7 0a67 	vfms.f32	s0, s14, s15
24015d9a:	281f      	cmp	r0, #31
24015d9c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 24015f0c <__ieee754_rem_pio2f+0x234>
24015da0:	ee67 7a27 	vmul.f32	s15, s14, s15
24015da4:	eeb1 6a47 	vneg.f32	s12, s14
24015da8:	ee70 6a67 	vsub.f32	s13, s0, s15
24015dac:	ee16 2a90 	vmov	r2, s13
24015db0:	dc1c      	bgt.n	24015dec <__ieee754_rem_pio2f+0x114>
24015db2:	495a      	ldr	r1, [pc, #360]	; (24015f1c <__ieee754_rem_pio2f+0x244>)
24015db4:	1e47      	subs	r7, r0, #1
24015db6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
24015dba:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
24015dbe:	428b      	cmp	r3, r1
24015dc0:	d014      	beq.n	24015dec <__ieee754_rem_pio2f+0x114>
24015dc2:	6022      	str	r2, [r4, #0]
24015dc4:	ed94 7a00 	vldr	s14, [r4]
24015dc8:	ee30 0a47 	vsub.f32	s0, s0, s14
24015dcc:	2e00      	cmp	r6, #0
24015dce:	ee30 0a67 	vsub.f32	s0, s0, s15
24015dd2:	ed84 0a01 	vstr	s0, [r4, #4]
24015dd6:	dab0      	bge.n	24015d3a <__ieee754_rem_pio2f+0x62>
24015dd8:	eeb1 7a47 	vneg.f32	s14, s14
24015ddc:	eeb1 0a40 	vneg.f32	s0, s0
24015de0:	ed84 7a00 	vstr	s14, [r4]
24015de4:	ed84 0a01 	vstr	s0, [r4, #4]
24015de8:	4240      	negs	r0, r0
24015dea:	e7a6      	b.n	24015d3a <__ieee754_rem_pio2f+0x62>
24015dec:	f3c2 51c7 	ubfx	r1, r2, #23, #8
24015df0:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
24015df4:	2908      	cmp	r1, #8
24015df6:	ea4f 53e5 	mov.w	r3, r5, asr #23
24015dfa:	dde2      	ble.n	24015dc2 <__ieee754_rem_pio2f+0xea>
24015dfc:	eddf 5a42 	vldr	s11, [pc, #264]	; 24015f08 <__ieee754_rem_pio2f+0x230>
24015e00:	eef0 6a40 	vmov.f32	s13, s0
24015e04:	eee6 6a25 	vfma.f32	s13, s12, s11
24015e08:	ee70 7a66 	vsub.f32	s15, s0, s13
24015e0c:	eee6 7a25 	vfma.f32	s15, s12, s11
24015e10:	eddf 5a3f 	vldr	s11, [pc, #252]	; 24015f10 <__ieee754_rem_pio2f+0x238>
24015e14:	eed7 7a25 	vfnms.f32	s15, s14, s11
24015e18:	ee76 5ae7 	vsub.f32	s11, s13, s15
24015e1c:	ee15 2a90 	vmov	r2, s11
24015e20:	f3c2 51c7 	ubfx	r1, r2, #23, #8
24015e24:	1a5b      	subs	r3, r3, r1
24015e26:	2b19      	cmp	r3, #25
24015e28:	dc04      	bgt.n	24015e34 <__ieee754_rem_pio2f+0x15c>
24015e2a:	edc4 5a00 	vstr	s11, [r4]
24015e2e:	eeb0 0a66 	vmov.f32	s0, s13
24015e32:	e7c7      	b.n	24015dc4 <__ieee754_rem_pio2f+0xec>
24015e34:	eddf 5a3a 	vldr	s11, [pc, #232]	; 24015f20 <__ieee754_rem_pio2f+0x248>
24015e38:	eeb0 0a66 	vmov.f32	s0, s13
24015e3c:	eea6 0a25 	vfma.f32	s0, s12, s11
24015e40:	ee76 7ac0 	vsub.f32	s15, s13, s0
24015e44:	eddf 6a37 	vldr	s13, [pc, #220]	; 24015f24 <__ieee754_rem_pio2f+0x24c>
24015e48:	eee6 7a25 	vfma.f32	s15, s12, s11
24015e4c:	eed7 7a26 	vfnms.f32	s15, s14, s13
24015e50:	ee30 7a67 	vsub.f32	s14, s0, s15
24015e54:	ed84 7a00 	vstr	s14, [r4]
24015e58:	e7b4      	b.n	24015dc4 <__ieee754_rem_pio2f+0xec>
24015e5a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
24015e5e:	db06      	blt.n	24015e6e <__ieee754_rem_pio2f+0x196>
24015e60:	ee70 7a40 	vsub.f32	s15, s0, s0
24015e64:	edc0 7a01 	vstr	s15, [r0, #4]
24015e68:	edc0 7a00 	vstr	s15, [r0]
24015e6c:	e742      	b.n	24015cf4 <__ieee754_rem_pio2f+0x1c>
24015e6e:	15ea      	asrs	r2, r5, #23
24015e70:	3a86      	subs	r2, #134	; 0x86
24015e72:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
24015e76:	ee07 3a90 	vmov	s15, r3
24015e7a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
24015e7e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 24015f28 <__ieee754_rem_pio2f+0x250>
24015e82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24015e86:	ee77 7ac7 	vsub.f32	s15, s15, s14
24015e8a:	ed8d 7a03 	vstr	s14, [sp, #12]
24015e8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
24015e92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
24015e96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24015e9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
24015e9e:	ed8d 7a04 	vstr	s14, [sp, #16]
24015ea2:	ee67 7aa6 	vmul.f32	s15, s15, s13
24015ea6:	eef5 7a40 	vcmp.f32	s15, #0.0
24015eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015eae:	edcd 7a05 	vstr	s15, [sp, #20]
24015eb2:	d11e      	bne.n	24015ef2 <__ieee754_rem_pio2f+0x21a>
24015eb4:	eeb5 7a40 	vcmp.f32	s14, #0.0
24015eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015ebc:	bf14      	ite	ne
24015ebe:	2302      	movne	r3, #2
24015ec0:	2301      	moveq	r3, #1
24015ec2:	491a      	ldr	r1, [pc, #104]	; (24015f2c <__ieee754_rem_pio2f+0x254>)
24015ec4:	9101      	str	r1, [sp, #4]
24015ec6:	2102      	movs	r1, #2
24015ec8:	9100      	str	r1, [sp, #0]
24015eca:	a803      	add	r0, sp, #12
24015ecc:	4621      	mov	r1, r4
24015ece:	f000 fec9 	bl	24016c64 <__kernel_rem_pio2f>
24015ed2:	2e00      	cmp	r6, #0
24015ed4:	f6bf af31 	bge.w	24015d3a <__ieee754_rem_pio2f+0x62>
24015ed8:	edd4 7a00 	vldr	s15, [r4]
24015edc:	eef1 7a67 	vneg.f32	s15, s15
24015ee0:	edc4 7a00 	vstr	s15, [r4]
24015ee4:	edd4 7a01 	vldr	s15, [r4, #4]
24015ee8:	eef1 7a67 	vneg.f32	s15, s15
24015eec:	edc4 7a01 	vstr	s15, [r4, #4]
24015ef0:	e77a      	b.n	24015de8 <__ieee754_rem_pio2f+0x110>
24015ef2:	2303      	movs	r3, #3
24015ef4:	e7e5      	b.n	24015ec2 <__ieee754_rem_pio2f+0x1ea>
24015ef6:	bf00      	nop
24015ef8:	3f490fd8 	.word	0x3f490fd8
24015efc:	4016cbe3 	.word	0x4016cbe3
24015f00:	3fc90f80 	.word	0x3fc90f80
24015f04:	3fc90fd0 	.word	0x3fc90fd0
24015f08:	37354400 	.word	0x37354400
24015f0c:	37354443 	.word	0x37354443
24015f10:	2e85a308 	.word	0x2e85a308
24015f14:	43490f80 	.word	0x43490f80
24015f18:	3f22f984 	.word	0x3f22f984
24015f1c:	2402c518 	.word	0x2402c518
24015f20:	2e85a300 	.word	0x2e85a300
24015f24:	248d3132 	.word	0x248d3132
24015f28:	43800000 	.word	0x43800000
24015f2c:	2402c598 	.word	0x2402c598

24015f30 <__ieee754_rem_pio2>:
24015f30:	b570      	push	{r4, r5, r6, lr}
24015f32:	eeb0 7b40 	vmov.f64	d7, d0
24015f36:	ee17 5a90 	vmov	r5, s15
24015f3a:	4b99      	ldr	r3, [pc, #612]	; (240161a0 <__ieee754_rem_pio2+0x270>)
24015f3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
24015f40:	429e      	cmp	r6, r3
24015f42:	b088      	sub	sp, #32
24015f44:	4604      	mov	r4, r0
24015f46:	dc07      	bgt.n	24015f58 <__ieee754_rem_pio2+0x28>
24015f48:	2200      	movs	r2, #0
24015f4a:	2300      	movs	r3, #0
24015f4c:	ed84 0b00 	vstr	d0, [r4]
24015f50:	e9c0 2302 	strd	r2, r3, [r0, #8]
24015f54:	2000      	movs	r0, #0
24015f56:	e01b      	b.n	24015f90 <__ieee754_rem_pio2+0x60>
24015f58:	4b92      	ldr	r3, [pc, #584]	; (240161a4 <__ieee754_rem_pio2+0x274>)
24015f5a:	429e      	cmp	r6, r3
24015f5c:	dc3b      	bgt.n	24015fd6 <__ieee754_rem_pio2+0xa6>
24015f5e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
24015f62:	2d00      	cmp	r5, #0
24015f64:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 24016160 <__ieee754_rem_pio2+0x230>
24015f68:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
24015f6c:	dd19      	ble.n	24015fa2 <__ieee754_rem_pio2+0x72>
24015f6e:	ee30 7b46 	vsub.f64	d7, d0, d6
24015f72:	429e      	cmp	r6, r3
24015f74:	d00e      	beq.n	24015f94 <__ieee754_rem_pio2+0x64>
24015f76:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 24016168 <__ieee754_rem_pio2+0x238>
24015f7a:	ee37 5b46 	vsub.f64	d5, d7, d6
24015f7e:	ee37 7b45 	vsub.f64	d7, d7, d5
24015f82:	ed84 5b00 	vstr	d5, [r4]
24015f86:	ee37 7b46 	vsub.f64	d7, d7, d6
24015f8a:	ed84 7b02 	vstr	d7, [r4, #8]
24015f8e:	2001      	movs	r0, #1
24015f90:	b008      	add	sp, #32
24015f92:	bd70      	pop	{r4, r5, r6, pc}
24015f94:	ed9f 6b76 	vldr	d6, [pc, #472]	; 24016170 <__ieee754_rem_pio2+0x240>
24015f98:	ee37 7b46 	vsub.f64	d7, d7, d6
24015f9c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 24016178 <__ieee754_rem_pio2+0x248>
24015fa0:	e7eb      	b.n	24015f7a <__ieee754_rem_pio2+0x4a>
24015fa2:	429e      	cmp	r6, r3
24015fa4:	ee30 7b06 	vadd.f64	d7, d0, d6
24015fa8:	d00e      	beq.n	24015fc8 <__ieee754_rem_pio2+0x98>
24015faa:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 24016168 <__ieee754_rem_pio2+0x238>
24015fae:	ee37 5b06 	vadd.f64	d5, d7, d6
24015fb2:	ee37 7b45 	vsub.f64	d7, d7, d5
24015fb6:	ed84 5b00 	vstr	d5, [r4]
24015fba:	ee37 7b06 	vadd.f64	d7, d7, d6
24015fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
24015fc2:	ed84 7b02 	vstr	d7, [r4, #8]
24015fc6:	e7e3      	b.n	24015f90 <__ieee754_rem_pio2+0x60>
24015fc8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 24016170 <__ieee754_rem_pio2+0x240>
24015fcc:	ee37 7b06 	vadd.f64	d7, d7, d6
24015fd0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 24016178 <__ieee754_rem_pio2+0x248>
24015fd4:	e7eb      	b.n	24015fae <__ieee754_rem_pio2+0x7e>
24015fd6:	4b74      	ldr	r3, [pc, #464]	; (240161a8 <__ieee754_rem_pio2+0x278>)
24015fd8:	429e      	cmp	r6, r3
24015fda:	dc70      	bgt.n	240160be <__ieee754_rem_pio2+0x18e>
24015fdc:	f000 fdb8 	bl	24016b50 <fabs>
24015fe0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
24015fe4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 24016180 <__ieee754_rem_pio2+0x250>
24015fe8:	eea0 7b06 	vfma.f64	d7, d0, d6
24015fec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
24015ff0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
24015ff4:	ee17 0a90 	vmov	r0, s15
24015ff8:	eeb1 4b45 	vneg.f64	d4, d5
24015ffc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 24016160 <__ieee754_rem_pio2+0x230>
24016000:	eea5 0b47 	vfms.f64	d0, d5, d7
24016004:	ed9f 7b58 	vldr	d7, [pc, #352]	; 24016168 <__ieee754_rem_pio2+0x238>
24016008:	281f      	cmp	r0, #31
2401600a:	ee25 7b07 	vmul.f64	d7, d5, d7
2401600e:	ee30 6b47 	vsub.f64	d6, d0, d7
24016012:	dc08      	bgt.n	24016026 <__ieee754_rem_pio2+0xf6>
24016014:	4b65      	ldr	r3, [pc, #404]	; (240161ac <__ieee754_rem_pio2+0x27c>)
24016016:	1e42      	subs	r2, r0, #1
24016018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2401601c:	42b3      	cmp	r3, r6
2401601e:	d002      	beq.n	24016026 <__ieee754_rem_pio2+0xf6>
24016020:	ed84 6b00 	vstr	d6, [r4]
24016024:	e024      	b.n	24016070 <__ieee754_rem_pio2+0x140>
24016026:	ee16 3a90 	vmov	r3, s13
2401602a:	f3c3 530a 	ubfx	r3, r3, #20, #11
2401602e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
24016032:	2b10      	cmp	r3, #16
24016034:	ea4f 5226 	mov.w	r2, r6, asr #20
24016038:	ddf2      	ble.n	24016020 <__ieee754_rem_pio2+0xf0>
2401603a:	eeb0 6b40 	vmov.f64	d6, d0
2401603e:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 24016170 <__ieee754_rem_pio2+0x240>
24016042:	eea4 6b03 	vfma.f64	d6, d4, d3
24016046:	ee30 7b46 	vsub.f64	d7, d0, d6
2401604a:	eea4 7b03 	vfma.f64	d7, d4, d3
2401604e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 24016178 <__ieee754_rem_pio2+0x248>
24016052:	ee95 7b03 	vfnms.f64	d7, d5, d3
24016056:	ee36 3b47 	vsub.f64	d3, d6, d7
2401605a:	ee13 3a90 	vmov	r3, s7
2401605e:	f3c3 530a 	ubfx	r3, r3, #20, #11
24016062:	1ad3      	subs	r3, r2, r3
24016064:	2b31      	cmp	r3, #49	; 0x31
24016066:	dc17      	bgt.n	24016098 <__ieee754_rem_pio2+0x168>
24016068:	eeb0 0b46 	vmov.f64	d0, d6
2401606c:	ed84 3b00 	vstr	d3, [r4]
24016070:	ed94 6b00 	vldr	d6, [r4]
24016074:	2d00      	cmp	r5, #0
24016076:	ee30 0b46 	vsub.f64	d0, d0, d6
2401607a:	ee30 0b47 	vsub.f64	d0, d0, d7
2401607e:	ed84 0b02 	vstr	d0, [r4, #8]
24016082:	da85      	bge.n	24015f90 <__ieee754_rem_pio2+0x60>
24016084:	eeb1 6b46 	vneg.f64	d6, d6
24016088:	eeb1 0b40 	vneg.f64	d0, d0
2401608c:	ed84 6b00 	vstr	d6, [r4]
24016090:	ed84 0b02 	vstr	d0, [r4, #8]
24016094:	4240      	negs	r0, r0
24016096:	e77b      	b.n	24015f90 <__ieee754_rem_pio2+0x60>
24016098:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 24016188 <__ieee754_rem_pio2+0x258>
2401609c:	eeb0 0b46 	vmov.f64	d0, d6
240160a0:	eea4 0b07 	vfma.f64	d0, d4, d7
240160a4:	ee36 6b40 	vsub.f64	d6, d6, d0
240160a8:	eea4 6b07 	vfma.f64	d6, d4, d7
240160ac:	ed9f 4b38 	vldr	d4, [pc, #224]	; 24016190 <__ieee754_rem_pio2+0x260>
240160b0:	eeb0 7b46 	vmov.f64	d7, d6
240160b4:	ee95 7b04 	vfnms.f64	d7, d5, d4
240160b8:	ee30 6b47 	vsub.f64	d6, d0, d7
240160bc:	e7b0      	b.n	24016020 <__ieee754_rem_pio2+0xf0>
240160be:	4b3c      	ldr	r3, [pc, #240]	; (240161b0 <__ieee754_rem_pio2+0x280>)
240160c0:	429e      	cmp	r6, r3
240160c2:	dd06      	ble.n	240160d2 <__ieee754_rem_pio2+0x1a2>
240160c4:	ee30 7b40 	vsub.f64	d7, d0, d0
240160c8:	ed80 7b02 	vstr	d7, [r0, #8]
240160cc:	ed80 7b00 	vstr	d7, [r0]
240160d0:	e740      	b.n	24015f54 <__ieee754_rem_pio2+0x24>
240160d2:	1532      	asrs	r2, r6, #20
240160d4:	ee10 0a10 	vmov	r0, s0
240160d8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
240160dc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
240160e0:	ec41 0b17 	vmov	d7, r0, r1
240160e4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
240160e8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 24016198 <__ieee754_rem_pio2+0x268>
240160ec:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
240160f0:	ee37 7b46 	vsub.f64	d7, d7, d6
240160f4:	ed8d 6b02 	vstr	d6, [sp, #8]
240160f8:	ee27 7b05 	vmul.f64	d7, d7, d5
240160fc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
24016100:	a808      	add	r0, sp, #32
24016102:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
24016106:	ee37 7b46 	vsub.f64	d7, d7, d6
2401610a:	ed8d 6b04 	vstr	d6, [sp, #16]
2401610e:	ee27 7b05 	vmul.f64	d7, d7, d5
24016112:	ed8d 7b06 	vstr	d7, [sp, #24]
24016116:	2103      	movs	r1, #3
24016118:	ed30 7b02 	vldmdb	r0!, {d7}
2401611c:	eeb5 7b40 	vcmp.f64	d7, #0.0
24016120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016124:	460b      	mov	r3, r1
24016126:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
2401612a:	d0f5      	beq.n	24016118 <__ieee754_rem_pio2+0x1e8>
2401612c:	4921      	ldr	r1, [pc, #132]	; (240161b4 <__ieee754_rem_pio2+0x284>)
2401612e:	9101      	str	r1, [sp, #4]
24016130:	2102      	movs	r1, #2
24016132:	9100      	str	r1, [sp, #0]
24016134:	a802      	add	r0, sp, #8
24016136:	4621      	mov	r1, r4
24016138:	f000 f83e 	bl	240161b8 <__kernel_rem_pio2>
2401613c:	2d00      	cmp	r5, #0
2401613e:	f6bf af27 	bge.w	24015f90 <__ieee754_rem_pio2+0x60>
24016142:	ed94 7b00 	vldr	d7, [r4]
24016146:	eeb1 7b47 	vneg.f64	d7, d7
2401614a:	ed84 7b00 	vstr	d7, [r4]
2401614e:	ed94 7b02 	vldr	d7, [r4, #8]
24016152:	eeb1 7b47 	vneg.f64	d7, d7
24016156:	ed84 7b02 	vstr	d7, [r4, #8]
2401615a:	e79b      	b.n	24016094 <__ieee754_rem_pio2+0x164>
2401615c:	f3af 8000 	nop.w
24016160:	54400000 	.word	0x54400000
24016164:	3ff921fb 	.word	0x3ff921fb
24016168:	1a626331 	.word	0x1a626331
2401616c:	3dd0b461 	.word	0x3dd0b461
24016170:	1a600000 	.word	0x1a600000
24016174:	3dd0b461 	.word	0x3dd0b461
24016178:	2e037073 	.word	0x2e037073
2401617c:	3ba3198a 	.word	0x3ba3198a
24016180:	6dc9c883 	.word	0x6dc9c883
24016184:	3fe45f30 	.word	0x3fe45f30
24016188:	2e000000 	.word	0x2e000000
2401618c:	3ba3198a 	.word	0x3ba3198a
24016190:	252049c1 	.word	0x252049c1
24016194:	397b839a 	.word	0x397b839a
24016198:	00000000 	.word	0x00000000
2401619c:	41700000 	.word	0x41700000
240161a0:	3fe921fb 	.word	0x3fe921fb
240161a4:	4002d97b 	.word	0x4002d97b
240161a8:	413921fb 	.word	0x413921fb
240161ac:	2402c8b0 	.word	0x2402c8b0
240161b0:	7fefffff 	.word	0x7fefffff
240161b4:	2402c930 	.word	0x2402c930

240161b8 <__kernel_rem_pio2>:
240161b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240161bc:	ed2d 8b06 	vpush	{d8-d10}
240161c0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
240161c4:	460f      	mov	r7, r1
240161c6:	9002      	str	r0, [sp, #8]
240161c8:	49c3      	ldr	r1, [pc, #780]	; (240164d8 <__kernel_rem_pio2+0x320>)
240161ca:	98a2      	ldr	r0, [sp, #648]	; 0x288
240161cc:	9301      	str	r3, [sp, #4]
240161ce:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
240161d2:	9901      	ldr	r1, [sp, #4]
240161d4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
240161d6:	f112 0f14 	cmn.w	r2, #20
240161da:	bfa8      	it	ge
240161dc:	1ed0      	subge	r0, r2, #3
240161de:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
240161e2:	bfaa      	itet	ge
240161e4:	2418      	movge	r4, #24
240161e6:	2000      	movlt	r0, #0
240161e8:	fb90 f0f4 	sdivge	r0, r0, r4
240161ec:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 240164c0 <__kernel_rem_pio2+0x308>
240161f0:	f06f 0417 	mvn.w	r4, #23
240161f4:	fb00 4404 	mla	r4, r0, r4, r4
240161f8:	eba0 060a 	sub.w	r6, r0, sl
240161fc:	4414      	add	r4, r2
240161fe:	eb09 0c0a 	add.w	ip, r9, sl
24016202:	ad1a      	add	r5, sp, #104	; 0x68
24016204:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
24016208:	2200      	movs	r2, #0
2401620a:	4562      	cmp	r2, ip
2401620c:	dd10      	ble.n	24016230 <__kernel_rem_pio2+0x78>
2401620e:	9a01      	ldr	r2, [sp, #4]
24016210:	a91a      	add	r1, sp, #104	; 0x68
24016212:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
24016216:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
2401621a:	f04f 0c00 	mov.w	ip, #0
2401621e:	45cc      	cmp	ip, r9
24016220:	dc26      	bgt.n	24016270 <__kernel_rem_pio2+0xb8>
24016222:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 240164c0 <__kernel_rem_pio2+0x308>
24016226:	f8dd e008 	ldr.w	lr, [sp, #8]
2401622a:	4616      	mov	r6, r2
2401622c:	2500      	movs	r5, #0
2401622e:	e015      	b.n	2401625c <__kernel_rem_pio2+0xa4>
24016230:	42d6      	cmn	r6, r2
24016232:	d409      	bmi.n	24016248 <__kernel_rem_pio2+0x90>
24016234:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
24016238:	ee07 1a90 	vmov	s15, r1
2401623c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24016240:	eca5 7b02 	vstmia	r5!, {d7}
24016244:	3201      	adds	r2, #1
24016246:	e7e0      	b.n	2401620a <__kernel_rem_pio2+0x52>
24016248:	eeb0 7b46 	vmov.f64	d7, d6
2401624c:	e7f8      	b.n	24016240 <__kernel_rem_pio2+0x88>
2401624e:	ecbe 5b02 	vldmia	lr!, {d5}
24016252:	ed96 6b00 	vldr	d6, [r6]
24016256:	3501      	adds	r5, #1
24016258:	eea5 7b06 	vfma.f64	d7, d5, d6
2401625c:	4555      	cmp	r5, sl
2401625e:	f1a6 0608 	sub.w	r6, r6, #8
24016262:	ddf4      	ble.n	2401624e <__kernel_rem_pio2+0x96>
24016264:	eca8 7b02 	vstmia	r8!, {d7}
24016268:	f10c 0c01 	add.w	ip, ip, #1
2401626c:	3208      	adds	r2, #8
2401626e:	e7d6      	b.n	2401621e <__kernel_rem_pio2+0x66>
24016270:	aa06      	add	r2, sp, #24
24016272:	ed9f 9b95 	vldr	d9, [pc, #596]	; 240164c8 <__kernel_rem_pio2+0x310>
24016276:	ed9f ab96 	vldr	d10, [pc, #600]	; 240164d0 <__kernel_rem_pio2+0x318>
2401627a:	eb02 0289 	add.w	r2, r2, r9, lsl #2
2401627e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
24016282:	9204      	str	r2, [sp, #16]
24016284:	9303      	str	r3, [sp, #12]
24016286:	464d      	mov	r5, r9
24016288:	00eb      	lsls	r3, r5, #3
2401628a:	9305      	str	r3, [sp, #20]
2401628c:	ab92      	add	r3, sp, #584	; 0x248
2401628e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
24016292:	f10d 0b18 	add.w	fp, sp, #24
24016296:	ab6a      	add	r3, sp, #424	; 0x1a8
24016298:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
2401629c:	465e      	mov	r6, fp
2401629e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
240162a2:	4628      	mov	r0, r5
240162a4:	2800      	cmp	r0, #0
240162a6:	f1a2 0208 	sub.w	r2, r2, #8
240162aa:	dc48      	bgt.n	2401633e <__kernel_rem_pio2+0x186>
240162ac:	4620      	mov	r0, r4
240162ae:	f000 fc5b 	bl	24016b68 <scalbn>
240162b2:	eeb0 8b40 	vmov.f64	d8, d0
240162b6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
240162ba:	ee28 0b00 	vmul.f64	d0, d8, d0
240162be:	f000 ff43 	bl	24017148 <floor>
240162c2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
240162c6:	eea0 8b47 	vfms.f64	d8, d0, d7
240162ca:	eefd 7bc8 	vcvt.s32.f64	s15, d8
240162ce:	2c00      	cmp	r4, #0
240162d0:	ee17 8a90 	vmov	r8, s15
240162d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
240162d8:	ee38 8b47 	vsub.f64	d8, d8, d7
240162dc:	dd41      	ble.n	24016362 <__kernel_rem_pio2+0x1aa>
240162de:	1e68      	subs	r0, r5, #1
240162e0:	ab06      	add	r3, sp, #24
240162e2:	f1c4 0c18 	rsb	ip, r4, #24
240162e6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
240162ea:	fa46 f20c 	asr.w	r2, r6, ip
240162ee:	4490      	add	r8, r2
240162f0:	fa02 f20c 	lsl.w	r2, r2, ip
240162f4:	1ab6      	subs	r6, r6, r2
240162f6:	f1c4 0217 	rsb	r2, r4, #23
240162fa:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
240162fe:	4116      	asrs	r6, r2
24016300:	2e00      	cmp	r6, #0
24016302:	dd3d      	ble.n	24016380 <__kernel_rem_pio2+0x1c8>
24016304:	f04f 0c00 	mov.w	ip, #0
24016308:	f108 0801 	add.w	r8, r8, #1
2401630c:	4660      	mov	r0, ip
2401630e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
24016312:	4565      	cmp	r5, ip
24016314:	dc6a      	bgt.n	240163ec <__kernel_rem_pio2+0x234>
24016316:	2c00      	cmp	r4, #0
24016318:	dd04      	ble.n	24016324 <__kernel_rem_pio2+0x16c>
2401631a:	2c01      	cmp	r4, #1
2401631c:	d07b      	beq.n	24016416 <__kernel_rem_pio2+0x25e>
2401631e:	2c02      	cmp	r4, #2
24016320:	f000 8083 	beq.w	2401642a <__kernel_rem_pio2+0x272>
24016324:	2e02      	cmp	r6, #2
24016326:	d12b      	bne.n	24016380 <__kernel_rem_pio2+0x1c8>
24016328:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401632c:	ee30 8b48 	vsub.f64	d8, d0, d8
24016330:	b330      	cbz	r0, 24016380 <__kernel_rem_pio2+0x1c8>
24016332:	4620      	mov	r0, r4
24016334:	f000 fc18 	bl	24016b68 <scalbn>
24016338:	ee38 8b40 	vsub.f64	d8, d8, d0
2401633c:	e020      	b.n	24016380 <__kernel_rem_pio2+0x1c8>
2401633e:	ee20 7b09 	vmul.f64	d7, d0, d9
24016342:	eebd 7bc7 	vcvt.s32.f64	s14, d7
24016346:	3801      	subs	r0, #1
24016348:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
2401634c:	eea7 0b4a 	vfms.f64	d0, d7, d10
24016350:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24016354:	eca6 0a01 	vstmia	r6!, {s0}
24016358:	ed92 0b00 	vldr	d0, [r2]
2401635c:	ee37 0b00 	vadd.f64	d0, d7, d0
24016360:	e7a0      	b.n	240162a4 <__kernel_rem_pio2+0xec>
24016362:	d105      	bne.n	24016370 <__kernel_rem_pio2+0x1b8>
24016364:	1e6a      	subs	r2, r5, #1
24016366:	ab06      	add	r3, sp, #24
24016368:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
2401636c:	15f6      	asrs	r6, r6, #23
2401636e:	e7c7      	b.n	24016300 <__kernel_rem_pio2+0x148>
24016370:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
24016374:	eeb4 8bc7 	vcmpe.f64	d8, d7
24016378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401637c:	da34      	bge.n	240163e8 <__kernel_rem_pio2+0x230>
2401637e:	2600      	movs	r6, #0
24016380:	eeb5 8b40 	vcmp.f64	d8, #0.0
24016384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016388:	f040 80aa 	bne.w	240164e0 <__kernel_rem_pio2+0x328>
2401638c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
24016390:	4658      	mov	r0, fp
24016392:	2200      	movs	r2, #0
24016394:	4548      	cmp	r0, r9
24016396:	da50      	bge.n	2401643a <__kernel_rem_pio2+0x282>
24016398:	2a00      	cmp	r2, #0
2401639a:	d06b      	beq.n	24016474 <__kernel_rem_pio2+0x2bc>
2401639c:	ab06      	add	r3, sp, #24
2401639e:	3c18      	subs	r4, #24
240163a0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
240163a4:	2b00      	cmp	r3, #0
240163a6:	f000 8087 	beq.w	240164b8 <__kernel_rem_pio2+0x300>
240163aa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
240163ae:	4620      	mov	r0, r4
240163b0:	f000 fbda 	bl	24016b68 <scalbn>
240163b4:	ed9f 6b44 	vldr	d6, [pc, #272]	; 240164c8 <__kernel_rem_pio2+0x310>
240163b8:	f10b 0201 	add.w	r2, fp, #1
240163bc:	a96a      	add	r1, sp, #424	; 0x1a8
240163be:	00d3      	lsls	r3, r2, #3
240163c0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
240163c4:	465a      	mov	r2, fp
240163c6:	2a00      	cmp	r2, #0
240163c8:	f280 80b8 	bge.w	2401653c <__kernel_rem_pio2+0x384>
240163cc:	465a      	mov	r2, fp
240163ce:	2a00      	cmp	r2, #0
240163d0:	f2c0 80d6 	blt.w	24016580 <__kernel_rem_pio2+0x3c8>
240163d4:	a96a      	add	r1, sp, #424	; 0x1a8
240163d6:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
240163da:	ed9f 7b39 	vldr	d7, [pc, #228]	; 240164c0 <__kernel_rem_pio2+0x308>
240163de:	4d3f      	ldr	r5, [pc, #252]	; (240164dc <__kernel_rem_pio2+0x324>)
240163e0:	2000      	movs	r0, #0
240163e2:	ebab 0102 	sub.w	r1, fp, r2
240163e6:	e0c0      	b.n	2401656a <__kernel_rem_pio2+0x3b2>
240163e8:	2602      	movs	r6, #2
240163ea:	e78b      	b.n	24016304 <__kernel_rem_pio2+0x14c>
240163ec:	f8db 2000 	ldr.w	r2, [fp]
240163f0:	b958      	cbnz	r0, 2401640a <__kernel_rem_pio2+0x252>
240163f2:	b122      	cbz	r2, 240163fe <__kernel_rem_pio2+0x246>
240163f4:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
240163f8:	f8cb 2000 	str.w	r2, [fp]
240163fc:	2201      	movs	r2, #1
240163fe:	f10c 0c01 	add.w	ip, ip, #1
24016402:	f10b 0b04 	add.w	fp, fp, #4
24016406:	4610      	mov	r0, r2
24016408:	e783      	b.n	24016312 <__kernel_rem_pio2+0x15a>
2401640a:	ebae 0202 	sub.w	r2, lr, r2
2401640e:	f8cb 2000 	str.w	r2, [fp]
24016412:	4602      	mov	r2, r0
24016414:	e7f3      	b.n	240163fe <__kernel_rem_pio2+0x246>
24016416:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2401641a:	ab06      	add	r3, sp, #24
2401641c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
24016420:	f3c2 0216 	ubfx	r2, r2, #0, #23
24016424:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
24016428:	e77c      	b.n	24016324 <__kernel_rem_pio2+0x16c>
2401642a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2401642e:	ab06      	add	r3, sp, #24
24016430:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
24016434:	f3c2 0215 	ubfx	r2, r2, #0, #22
24016438:	e7f4      	b.n	24016424 <__kernel_rem_pio2+0x26c>
2401643a:	ab06      	add	r3, sp, #24
2401643c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
24016440:	3801      	subs	r0, #1
24016442:	431a      	orrs	r2, r3
24016444:	e7a6      	b.n	24016394 <__kernel_rem_pio2+0x1dc>
24016446:	3201      	adds	r2, #1
24016448:	f850 6d04 	ldr.w	r6, [r0, #-4]!
2401644c:	2e00      	cmp	r6, #0
2401644e:	d0fa      	beq.n	24016446 <__kernel_rem_pio2+0x28e>
24016450:	9b05      	ldr	r3, [sp, #20]
24016452:	f503 7312 	add.w	r3, r3, #584	; 0x248
24016456:	eb0d 0003 	add.w	r0, sp, r3
2401645a:	9b01      	ldr	r3, [sp, #4]
2401645c:	18ee      	adds	r6, r5, r3
2401645e:	ab1a      	add	r3, sp, #104	; 0x68
24016460:	f105 0c01 	add.w	ip, r5, #1
24016464:	3898      	subs	r0, #152	; 0x98
24016466:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
2401646a:	442a      	add	r2, r5
2401646c:	4562      	cmp	r2, ip
2401646e:	da04      	bge.n	2401647a <__kernel_rem_pio2+0x2c2>
24016470:	4615      	mov	r5, r2
24016472:	e709      	b.n	24016288 <__kernel_rem_pio2+0xd0>
24016474:	9804      	ldr	r0, [sp, #16]
24016476:	2201      	movs	r2, #1
24016478:	e7e6      	b.n	24016448 <__kernel_rem_pio2+0x290>
2401647a:	9b03      	ldr	r3, [sp, #12]
2401647c:	f8dd e008 	ldr.w	lr, [sp, #8]
24016480:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
24016484:	9305      	str	r3, [sp, #20]
24016486:	ee07 3a90 	vmov	s15, r3
2401648a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401648e:	2500      	movs	r5, #0
24016490:	eca6 7b02 	vstmia	r6!, {d7}
24016494:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 240164c0 <__kernel_rem_pio2+0x308>
24016498:	46b0      	mov	r8, r6
2401649a:	4555      	cmp	r5, sl
2401649c:	dd04      	ble.n	240164a8 <__kernel_rem_pio2+0x2f0>
2401649e:	eca0 7b02 	vstmia	r0!, {d7}
240164a2:	f10c 0c01 	add.w	ip, ip, #1
240164a6:	e7e1      	b.n	2401646c <__kernel_rem_pio2+0x2b4>
240164a8:	ecbe 5b02 	vldmia	lr!, {d5}
240164ac:	ed38 6b02 	vldmdb	r8!, {d6}
240164b0:	3501      	adds	r5, #1
240164b2:	eea5 7b06 	vfma.f64	d7, d5, d6
240164b6:	e7f0      	b.n	2401649a <__kernel_rem_pio2+0x2e2>
240164b8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
240164bc:	e76e      	b.n	2401639c <__kernel_rem_pio2+0x1e4>
240164be:	bf00      	nop
	...
240164cc:	3e700000 	.word	0x3e700000
240164d0:	00000000 	.word	0x00000000
240164d4:	41700000 	.word	0x41700000
240164d8:	2402cba0 	.word	0x2402cba0
240164dc:	2402cb60 	.word	0x2402cb60
240164e0:	4260      	negs	r0, r4
240164e2:	eeb0 0b48 	vmov.f64	d0, d8
240164e6:	f000 fb3f 	bl	24016b68 <scalbn>
240164ea:	ed9f 6b77 	vldr	d6, [pc, #476]	; 240166c8 <__kernel_rem_pio2+0x510>
240164ee:	eeb4 0bc6 	vcmpe.f64	d0, d6
240164f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240164f6:	db18      	blt.n	2401652a <__kernel_rem_pio2+0x372>
240164f8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 240166d0 <__kernel_rem_pio2+0x518>
240164fc:	ee20 7b07 	vmul.f64	d7, d0, d7
24016500:	eebd 7bc7 	vcvt.s32.f64	s14, d7
24016504:	aa06      	add	r2, sp, #24
24016506:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
2401650a:	eea5 0b46 	vfms.f64	d0, d5, d6
2401650e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
24016512:	f105 0b01 	add.w	fp, r5, #1
24016516:	ee10 3a10 	vmov	r3, s0
2401651a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
2401651e:	ee17 3a10 	vmov	r3, s14
24016522:	3418      	adds	r4, #24
24016524:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
24016528:	e73f      	b.n	240163aa <__kernel_rem_pio2+0x1f2>
2401652a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401652e:	aa06      	add	r2, sp, #24
24016530:	ee10 3a10 	vmov	r3, s0
24016534:	46ab      	mov	fp, r5
24016536:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
2401653a:	e736      	b.n	240163aa <__kernel_rem_pio2+0x1f2>
2401653c:	a806      	add	r0, sp, #24
2401653e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
24016542:	9001      	str	r0, [sp, #4]
24016544:	ee07 0a90 	vmov	s15, r0
24016548:	3a01      	subs	r2, #1
2401654a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401654e:	ee27 7b00 	vmul.f64	d7, d7, d0
24016552:	ee20 0b06 	vmul.f64	d0, d0, d6
24016556:	ed21 7b02 	vstmdb	r1!, {d7}
2401655a:	e734      	b.n	240163c6 <__kernel_rem_pio2+0x20e>
2401655c:	ecb5 5b02 	vldmia	r5!, {d5}
24016560:	ecb4 6b02 	vldmia	r4!, {d6}
24016564:	3001      	adds	r0, #1
24016566:	eea5 7b06 	vfma.f64	d7, d5, d6
2401656a:	4548      	cmp	r0, r9
2401656c:	dc01      	bgt.n	24016572 <__kernel_rem_pio2+0x3ba>
2401656e:	4288      	cmp	r0, r1
24016570:	ddf4      	ble.n	2401655c <__kernel_rem_pio2+0x3a4>
24016572:	a842      	add	r0, sp, #264	; 0x108
24016574:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
24016578:	ed81 7b00 	vstr	d7, [r1]
2401657c:	3a01      	subs	r2, #1
2401657e:	e726      	b.n	240163ce <__kernel_rem_pio2+0x216>
24016580:	9aa2      	ldr	r2, [sp, #648]	; 0x288
24016582:	2a02      	cmp	r2, #2
24016584:	dc0a      	bgt.n	2401659c <__kernel_rem_pio2+0x3e4>
24016586:	2a00      	cmp	r2, #0
24016588:	dc2e      	bgt.n	240165e8 <__kernel_rem_pio2+0x430>
2401658a:	d047      	beq.n	2401661c <__kernel_rem_pio2+0x464>
2401658c:	f008 0007 	and.w	r0, r8, #7
24016590:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
24016594:	ecbd 8b06 	vpop	{d8-d10}
24016598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2401659c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
2401659e:	2a03      	cmp	r2, #3
240165a0:	d1f4      	bne.n	2401658c <__kernel_rem_pio2+0x3d4>
240165a2:	a942      	add	r1, sp, #264	; 0x108
240165a4:	f1a3 0208 	sub.w	r2, r3, #8
240165a8:	440a      	add	r2, r1
240165aa:	4611      	mov	r1, r2
240165ac:	4658      	mov	r0, fp
240165ae:	2800      	cmp	r0, #0
240165b0:	f1a1 0108 	sub.w	r1, r1, #8
240165b4:	dc55      	bgt.n	24016662 <__kernel_rem_pio2+0x4aa>
240165b6:	4659      	mov	r1, fp
240165b8:	2901      	cmp	r1, #1
240165ba:	f1a2 0208 	sub.w	r2, r2, #8
240165be:	dc60      	bgt.n	24016682 <__kernel_rem_pio2+0x4ca>
240165c0:	ed9f 7b45 	vldr	d7, [pc, #276]	; 240166d8 <__kernel_rem_pio2+0x520>
240165c4:	aa42      	add	r2, sp, #264	; 0x108
240165c6:	4413      	add	r3, r2
240165c8:	f1bb 0f01 	cmp.w	fp, #1
240165cc:	dc69      	bgt.n	240166a2 <__kernel_rem_pio2+0x4ea>
240165ce:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
240165d2:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
240165d6:	2e00      	cmp	r6, #0
240165d8:	d16a      	bne.n	240166b0 <__kernel_rem_pio2+0x4f8>
240165da:	ed87 5b00 	vstr	d5, [r7]
240165de:	ed87 6b02 	vstr	d6, [r7, #8]
240165e2:	ed87 7b04 	vstr	d7, [r7, #16]
240165e6:	e7d1      	b.n	2401658c <__kernel_rem_pio2+0x3d4>
240165e8:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 240166d8 <__kernel_rem_pio2+0x520>
240165ec:	aa42      	add	r2, sp, #264	; 0x108
240165ee:	4413      	add	r3, r2
240165f0:	465a      	mov	r2, fp
240165f2:	2a00      	cmp	r2, #0
240165f4:	da26      	bge.n	24016644 <__kernel_rem_pio2+0x48c>
240165f6:	b35e      	cbz	r6, 24016650 <__kernel_rem_pio2+0x498>
240165f8:	eeb1 7b46 	vneg.f64	d7, d6
240165fc:	ed87 7b00 	vstr	d7, [r7]
24016600:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
24016604:	aa44      	add	r2, sp, #272	; 0x110
24016606:	2301      	movs	r3, #1
24016608:	ee37 7b46 	vsub.f64	d7, d7, d6
2401660c:	459b      	cmp	fp, r3
2401660e:	da22      	bge.n	24016656 <__kernel_rem_pio2+0x49e>
24016610:	b10e      	cbz	r6, 24016616 <__kernel_rem_pio2+0x45e>
24016612:	eeb1 7b47 	vneg.f64	d7, d7
24016616:	ed87 7b02 	vstr	d7, [r7, #8]
2401661a:	e7b7      	b.n	2401658c <__kernel_rem_pio2+0x3d4>
2401661c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 240166d8 <__kernel_rem_pio2+0x520>
24016620:	aa42      	add	r2, sp, #264	; 0x108
24016622:	4413      	add	r3, r2
24016624:	f1bb 0f00 	cmp.w	fp, #0
24016628:	da05      	bge.n	24016636 <__kernel_rem_pio2+0x47e>
2401662a:	b10e      	cbz	r6, 24016630 <__kernel_rem_pio2+0x478>
2401662c:	eeb1 7b47 	vneg.f64	d7, d7
24016630:	ed87 7b00 	vstr	d7, [r7]
24016634:	e7aa      	b.n	2401658c <__kernel_rem_pio2+0x3d4>
24016636:	ed33 6b02 	vldmdb	r3!, {d6}
2401663a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401663e:	ee37 7b06 	vadd.f64	d7, d7, d6
24016642:	e7ef      	b.n	24016624 <__kernel_rem_pio2+0x46c>
24016644:	ed33 7b02 	vldmdb	r3!, {d7}
24016648:	3a01      	subs	r2, #1
2401664a:	ee36 6b07 	vadd.f64	d6, d6, d7
2401664e:	e7d0      	b.n	240165f2 <__kernel_rem_pio2+0x43a>
24016650:	eeb0 7b46 	vmov.f64	d7, d6
24016654:	e7d2      	b.n	240165fc <__kernel_rem_pio2+0x444>
24016656:	ecb2 6b02 	vldmia	r2!, {d6}
2401665a:	3301      	adds	r3, #1
2401665c:	ee37 7b06 	vadd.f64	d7, d7, d6
24016660:	e7d4      	b.n	2401660c <__kernel_rem_pio2+0x454>
24016662:	ed91 7b00 	vldr	d7, [r1]
24016666:	ed91 5b02 	vldr	d5, [r1, #8]
2401666a:	3801      	subs	r0, #1
2401666c:	ee37 6b05 	vadd.f64	d6, d7, d5
24016670:	ee37 7b46 	vsub.f64	d7, d7, d6
24016674:	ed81 6b00 	vstr	d6, [r1]
24016678:	ee37 7b05 	vadd.f64	d7, d7, d5
2401667c:	ed81 7b02 	vstr	d7, [r1, #8]
24016680:	e795      	b.n	240165ae <__kernel_rem_pio2+0x3f6>
24016682:	ed92 7b00 	vldr	d7, [r2]
24016686:	ed92 5b02 	vldr	d5, [r2, #8]
2401668a:	3901      	subs	r1, #1
2401668c:	ee37 6b05 	vadd.f64	d6, d7, d5
24016690:	ee37 7b46 	vsub.f64	d7, d7, d6
24016694:	ed82 6b00 	vstr	d6, [r2]
24016698:	ee37 7b05 	vadd.f64	d7, d7, d5
2401669c:	ed82 7b02 	vstr	d7, [r2, #8]
240166a0:	e78a      	b.n	240165b8 <__kernel_rem_pio2+0x400>
240166a2:	ed33 6b02 	vldmdb	r3!, {d6}
240166a6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
240166aa:	ee37 7b06 	vadd.f64	d7, d7, d6
240166ae:	e78b      	b.n	240165c8 <__kernel_rem_pio2+0x410>
240166b0:	eeb1 5b45 	vneg.f64	d5, d5
240166b4:	eeb1 6b46 	vneg.f64	d6, d6
240166b8:	ed87 5b00 	vstr	d5, [r7]
240166bc:	eeb1 7b47 	vneg.f64	d7, d7
240166c0:	ed87 6b02 	vstr	d6, [r7, #8]
240166c4:	e78d      	b.n	240165e2 <__kernel_rem_pio2+0x42a>
240166c6:	bf00      	nop
240166c8:	00000000 	.word	0x00000000
240166cc:	41700000 	.word	0x41700000
240166d0:	00000000 	.word	0x00000000
240166d4:	3e700000 	.word	0x3e700000
	...

240166e0 <__kernel_tan>:
240166e0:	eeb0 7b40 	vmov.f64	d7, d0
240166e4:	ee17 3a90 	vmov	r3, s15
240166e8:	4989      	ldr	r1, [pc, #548]	; (24016910 <__kernel_tan+0x230>)
240166ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
240166ee:	428a      	cmp	r2, r1
240166f0:	b510      	push	{r4, lr}
240166f2:	dc33      	bgt.n	2401675c <__kernel_tan+0x7c>
240166f4:	eefd 6bc0 	vcvt.s32.f64	s13, d0
240166f8:	ee16 1a90 	vmov	r1, s13
240166fc:	2900      	cmp	r1, #0
240166fe:	d143      	bne.n	24016788 <__kernel_tan+0xa8>
24016700:	ee10 4a10 	vmov	r4, s0
24016704:	1c43      	adds	r3, r0, #1
24016706:	4323      	orrs	r3, r4
24016708:	4313      	orrs	r3, r2
2401670a:	d108      	bne.n	2401671e <__kernel_tan+0x3e>
2401670c:	f000 fa20 	bl	24016b50 <fabs>
24016710:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
24016714:	ee86 7b00 	vdiv.f64	d7, d6, d0
24016718:	eeb0 0b47 	vmov.f64	d0, d7
2401671c:	bd10      	pop	{r4, pc}
2401671e:	2801      	cmp	r0, #1
24016720:	d0fa      	beq.n	24016718 <__kernel_tan+0x38>
24016722:	ee30 6b01 	vadd.f64	d6, d0, d1
24016726:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401672a:	ec53 2b16 	vmov	r2, r3, d6
2401672e:	ee87 3b06 	vdiv.f64	d3, d7, d6
24016732:	460a      	mov	r2, r1
24016734:	ec43 2b15 	vmov	d5, r2, r3
24016738:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401673c:	ec53 2b13 	vmov	r2, r3, d3
24016740:	ee35 4b40 	vsub.f64	d4, d5, d0
24016744:	460a      	mov	r2, r1
24016746:	ec43 2b17 	vmov	d7, r2, r3
2401674a:	ee31 4b44 	vsub.f64	d4, d1, d4
2401674e:	eea5 6b07 	vfma.f64	d6, d5, d7
24016752:	eea4 6b07 	vfma.f64	d6, d4, d7
24016756:	eea6 7b03 	vfma.f64	d7, d6, d3
2401675a:	e7dd      	b.n	24016718 <__kernel_tan+0x38>
2401675c:	496d      	ldr	r1, [pc, #436]	; (24016914 <__kernel_tan+0x234>)
2401675e:	428a      	cmp	r2, r1
24016760:	dd12      	ble.n	24016788 <__kernel_tan+0xa8>
24016762:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 24016890 <__kernel_tan+0x1b0>
24016766:	2b00      	cmp	r3, #0
24016768:	bfb8      	it	lt
2401676a:	eeb1 7b40 	vneglt.f64	d7, d0
2401676e:	ee36 6b47 	vsub.f64	d6, d6, d7
24016772:	ed9f 7b49 	vldr	d7, [pc, #292]	; 24016898 <__kernel_tan+0x1b8>
24016776:	bfb8      	it	lt
24016778:	eeb1 1b41 	vneglt.f64	d1, d1
2401677c:	ee37 7b41 	vsub.f64	d7, d7, d1
24016780:	ed9f 1b47 	vldr	d1, [pc, #284]	; 240168a0 <__kernel_tan+0x1c0>
24016784:	ee37 7b06 	vadd.f64	d7, d7, d6
24016788:	ee27 5b07 	vmul.f64	d5, d7, d7
2401678c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 240168a8 <__kernel_tan+0x1c8>
24016790:	ee25 6b05 	vmul.f64	d6, d5, d5
24016794:	ed9f 4b46 	vldr	d4, [pc, #280]	; 240168b0 <__kernel_tan+0x1d0>
24016798:	eea6 4b03 	vfma.f64	d4, d6, d3
2401679c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 240168b8 <__kernel_tan+0x1d8>
240167a0:	eea4 3b06 	vfma.f64	d3, d4, d6
240167a4:	ed9f 4b46 	vldr	d4, [pc, #280]	; 240168c0 <__kernel_tan+0x1e0>
240167a8:	eea3 4b06 	vfma.f64	d4, d3, d6
240167ac:	ed9f 3b46 	vldr	d3, [pc, #280]	; 240168c8 <__kernel_tan+0x1e8>
240167b0:	eea4 3b06 	vfma.f64	d3, d4, d6
240167b4:	ed9f 4b46 	vldr	d4, [pc, #280]	; 240168d0 <__kernel_tan+0x1f0>
240167b8:	ed9f 2b47 	vldr	d2, [pc, #284]	; 240168d8 <__kernel_tan+0x1f8>
240167bc:	eea3 4b06 	vfma.f64	d4, d3, d6
240167c0:	ed9f 3b47 	vldr	d3, [pc, #284]	; 240168e0 <__kernel_tan+0x200>
240167c4:	eea6 3b02 	vfma.f64	d3, d6, d2
240167c8:	ed9f 2b47 	vldr	d2, [pc, #284]	; 240168e8 <__kernel_tan+0x208>
240167cc:	eea3 2b06 	vfma.f64	d2, d3, d6
240167d0:	ed9f 3b47 	vldr	d3, [pc, #284]	; 240168f0 <__kernel_tan+0x210>
240167d4:	eea2 3b06 	vfma.f64	d3, d2, d6
240167d8:	ed9f 2b47 	vldr	d2, [pc, #284]	; 240168f8 <__kernel_tan+0x218>
240167dc:	eea3 2b06 	vfma.f64	d2, d3, d6
240167e0:	ed9f 3b47 	vldr	d3, [pc, #284]	; 24016900 <__kernel_tan+0x220>
240167e4:	494b      	ldr	r1, [pc, #300]	; (24016914 <__kernel_tan+0x234>)
240167e6:	eea2 3b06 	vfma.f64	d3, d2, d6
240167ea:	ee27 2b05 	vmul.f64	d2, d7, d5
240167ee:	eeb0 6b44 	vmov.f64	d6, d4
240167f2:	eeb0 4b41 	vmov.f64	d4, d1
240167f6:	eea3 6b05 	vfma.f64	d6, d3, d5
240167fa:	eea6 4b02 	vfma.f64	d4, d6, d2
240167fe:	ed9f 6b42 	vldr	d6, [pc, #264]	; 24016908 <__kernel_tan+0x228>
24016802:	eea4 1b05 	vfma.f64	d1, d4, d5
24016806:	428a      	cmp	r2, r1
24016808:	eea2 1b06 	vfma.f64	d1, d2, d6
2401680c:	ee37 5b01 	vadd.f64	d5, d7, d1
24016810:	dd1d      	ble.n	2401684e <__kernel_tan+0x16e>
24016812:	ee25 3b05 	vmul.f64	d3, d5, d5
24016816:	179b      	asrs	r3, r3, #30
24016818:	ee06 0a90 	vmov	s13, r0
2401681c:	f003 0302 	and.w	r3, r3, #2
24016820:	f1c3 0301 	rsb	r3, r3, #1
24016824:	eeb8 6be6 	vcvt.f64.s32	d6, s13
24016828:	ee35 5b06 	vadd.f64	d5, d5, d6
2401682c:	ee83 4b05 	vdiv.f64	d4, d3, d5
24016830:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
24016834:	ee34 4b41 	vsub.f64	d4, d4, d1
24016838:	ee37 7b44 	vsub.f64	d7, d7, d4
2401683c:	eea7 6b45 	vfms.f64	d6, d7, d5
24016840:	ee07 3a90 	vmov	s15, r3
24016844:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24016848:	ee27 7b06 	vmul.f64	d7, d7, d6
2401684c:	e764      	b.n	24016718 <__kernel_tan+0x38>
2401684e:	2801      	cmp	r0, #1
24016850:	d01a      	beq.n	24016888 <__kernel_tan+0x1a8>
24016852:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
24016856:	ec51 0b15 	vmov	r0, r1, d5
2401685a:	2000      	movs	r0, #0
2401685c:	ec41 0b13 	vmov	d3, r0, r1
24016860:	ee33 7b47 	vsub.f64	d7, d3, d7
24016864:	ee31 1b47 	vsub.f64	d1, d1, d7
24016868:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401686c:	ee87 4b05 	vdiv.f64	d4, d7, d5
24016870:	ec53 2b14 	vmov	r2, r3, d4
24016874:	4602      	mov	r2, r0
24016876:	ec43 2b17 	vmov	d7, r2, r3
2401687a:	eea3 6b07 	vfma.f64	d6, d3, d7
2401687e:	eea1 6b07 	vfma.f64	d6, d1, d7
24016882:	eea6 7b04 	vfma.f64	d7, d6, d4
24016886:	e747      	b.n	24016718 <__kernel_tan+0x38>
24016888:	eeb0 7b45 	vmov.f64	d7, d5
2401688c:	e744      	b.n	24016718 <__kernel_tan+0x38>
2401688e:	bf00      	nop
24016890:	54442d18 	.word	0x54442d18
24016894:	3fe921fb 	.word	0x3fe921fb
24016898:	33145c07 	.word	0x33145c07
2401689c:	3c81a626 	.word	0x3c81a626
	...
240168a8:	db605373 	.word	0xdb605373
240168ac:	bef375cb 	.word	0xbef375cb
240168b0:	a03792a6 	.word	0xa03792a6
240168b4:	3f147e88 	.word	0x3f147e88
240168b8:	f2f26501 	.word	0xf2f26501
240168bc:	3f4344d8 	.word	0x3f4344d8
240168c0:	c9560328 	.word	0xc9560328
240168c4:	3f6d6d22 	.word	0x3f6d6d22
240168c8:	8406d637 	.word	0x8406d637
240168cc:	3f9664f4 	.word	0x3f9664f4
240168d0:	1110fe7a 	.word	0x1110fe7a
240168d4:	3fc11111 	.word	0x3fc11111
240168d8:	74bf7ad4 	.word	0x74bf7ad4
240168dc:	3efb2a70 	.word	0x3efb2a70
240168e0:	32f0a7e9 	.word	0x32f0a7e9
240168e4:	3f12b80f 	.word	0x3f12b80f
240168e8:	1a8d1068 	.word	0x1a8d1068
240168ec:	3f3026f7 	.word	0x3f3026f7
240168f0:	fee08315 	.word	0xfee08315
240168f4:	3f57dbc8 	.word	0x3f57dbc8
240168f8:	e96e8493 	.word	0xe96e8493
240168fc:	3f8226e3 	.word	0x3f8226e3
24016900:	1bb341fe 	.word	0x1bb341fe
24016904:	3faba1ba 	.word	0x3faba1ba
24016908:	55555563 	.word	0x55555563
2401690c:	3fd55555 	.word	0x3fd55555
24016910:	3e2fffff 	.word	0x3e2fffff
24016914:	3fe59427 	.word	0x3fe59427

24016918 <expm1f>:
24016918:	ee10 2a10 	vmov	r2, s0
2401691c:	497d      	ldr	r1, [pc, #500]	; (24016b14 <expm1f+0x1fc>)
2401691e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
24016922:	428b      	cmp	r3, r1
24016924:	d920      	bls.n	24016968 <expm1f+0x50>
24016926:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401692a:	d902      	bls.n	24016932 <expm1f+0x1a>
2401692c:	ee30 0a00 	vadd.f32	s0, s0, s0
24016930:	4770      	bx	lr
24016932:	d105      	bne.n	24016940 <expm1f+0x28>
24016934:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24016938:	2a00      	cmp	r2, #0
2401693a:	fe20 0a27 	vselge.f32	s0, s0, s15
2401693e:	4770      	bx	lr
24016940:	2a00      	cmp	r2, #0
24016942:	db05      	blt.n	24016950 <expm1f+0x38>
24016944:	4974      	ldr	r1, [pc, #464]	; (24016b18 <expm1f+0x200>)
24016946:	428b      	cmp	r3, r1
24016948:	d95c      	bls.n	24016a04 <expm1f+0xec>
2401694a:	2000      	movs	r0, #0
2401694c:	f7fe bf1e 	b.w	2401578c <__math_oflowf>
24016950:	eddf 7a72 	vldr	s15, [pc, #456]	; 24016b1c <expm1f+0x204>
24016954:	ee70 7a27 	vadd.f32	s15, s0, s15
24016958:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2401695c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016960:	d550      	bpl.n	24016a04 <expm1f+0xec>
24016962:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24016966:	4770      	bx	lr
24016968:	496d      	ldr	r1, [pc, #436]	; (24016b20 <expm1f+0x208>)
2401696a:	428b      	cmp	r3, r1
2401696c:	d966      	bls.n	24016a3c <expm1f+0x124>
2401696e:	496d      	ldr	r1, [pc, #436]	; (24016b24 <expm1f+0x20c>)
24016970:	428b      	cmp	r3, r1
24016972:	d847      	bhi.n	24016a04 <expm1f+0xec>
24016974:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 24016b28 <expm1f+0x210>
24016978:	2a00      	cmp	r2, #0
2401697a:	bfa7      	ittee	ge
2401697c:	ee30 7a47 	vsubge.f32	s14, s0, s14
24016980:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 24016b2c <expm1f+0x214>
24016984:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 24016b30 <expm1f+0x218>
24016988:	ee30 7a07 	vaddlt.f32	s14, s0, s14
2401698c:	bfac      	ite	ge
2401698e:	2301      	movge	r3, #1
24016990:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
24016994:	ee37 0a66 	vsub.f32	s0, s14, s13
24016998:	ee77 7a40 	vsub.f32	s15, s14, s0
2401699c:	ee77 7ae6 	vsub.f32	s15, s15, s13
240169a0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
240169a4:	ee20 4a25 	vmul.f32	s8, s0, s11
240169a8:	ed9f 6a62 	vldr	s12, [pc, #392]	; 24016b34 <expm1f+0x21c>
240169ac:	eddf 6a62 	vldr	s13, [pc, #392]	; 24016b38 <expm1f+0x220>
240169b0:	ed9f 5a62 	vldr	s10, [pc, #392]	; 24016b3c <expm1f+0x224>
240169b4:	ee20 7a04 	vmul.f32	s14, s0, s8
240169b8:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
240169bc:	eee7 6a06 	vfma.f32	s13, s14, s12
240169c0:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 24016b40 <expm1f+0x228>
240169c4:	eea6 6a87 	vfma.f32	s12, s13, s14
240169c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 24016b44 <expm1f+0x22c>
240169cc:	eee6 6a07 	vfma.f32	s13, s12, s14
240169d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
240169d4:	eea6 5a87 	vfma.f32	s10, s13, s14
240169d8:	eef0 6a46 	vmov.f32	s13, s12
240169dc:	eee5 6a07 	vfma.f32	s13, s10, s14
240169e0:	eee4 4a66 	vfms.f32	s9, s8, s13
240169e4:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
240169e8:	eea0 4a64 	vfms.f32	s8, s0, s9
240169ec:	ee36 5ae4 	vsub.f32	s10, s13, s9
240169f0:	eec5 6a04 	vdiv.f32	s13, s10, s8
240169f4:	ee66 6a87 	vmul.f32	s13, s13, s14
240169f8:	bb73      	cbnz	r3, 24016a58 <expm1f+0x140>
240169fa:	ee90 7a26 	vfnms.f32	s14, s0, s13
240169fe:	ee30 0a47 	vsub.f32	s0, s0, s14
24016a02:	4770      	bx	lr
24016a04:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
24016a08:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24016a0c:	2a00      	cmp	r2, #0
24016a0e:	fe67 7a87 	vselge.f32	s15, s15, s14
24016a12:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 24016b48 <expm1f+0x230>
24016a16:	ee40 7a07 	vmla.f32	s15, s0, s14
24016a1a:	eeb0 7a40 	vmov.f32	s14, s0
24016a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24016a22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
24016a26:	ee17 3a90 	vmov	r3, s15
24016a2a:	eddf 7a3f 	vldr	s15, [pc, #252]	; 24016b28 <expm1f+0x210>
24016a2e:	eea6 7ae7 	vfms.f32	s14, s13, s15
24016a32:	eddf 7a3e 	vldr	s15, [pc, #248]	; 24016b2c <expm1f+0x214>
24016a36:	ee66 6aa7 	vmul.f32	s13, s13, s15
24016a3a:	e7ab      	b.n	24016994 <expm1f+0x7c>
24016a3c:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
24016a40:	d208      	bcs.n	24016a54 <expm1f+0x13c>
24016a42:	eddf 7a42 	vldr	s15, [pc, #264]	; 24016b4c <expm1f+0x234>
24016a46:	ee70 7a27 	vadd.f32	s15, s0, s15
24016a4a:	ee77 7ae7 	vsub.f32	s15, s15, s15
24016a4e:	ee30 0a67 	vsub.f32	s0, s0, s15
24016a52:	4770      	bx	lr
24016a54:	2300      	movs	r3, #0
24016a56:	e7a3      	b.n	240169a0 <expm1f+0x88>
24016a58:	ee76 6ae7 	vsub.f32	s13, s13, s15
24016a5c:	1c5a      	adds	r2, r3, #1
24016a5e:	eed6 7a80 	vfnms.f32	s15, s13, s0
24016a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
24016a66:	d106      	bne.n	24016a76 <expm1f+0x15e>
24016a68:	ee70 7a67 	vsub.f32	s15, s0, s15
24016a6c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24016a70:	eea7 0aa5 	vfma.f32	s0, s15, s11
24016a74:	4770      	bx	lr
24016a76:	2b01      	cmp	r3, #1
24016a78:	d118      	bne.n	24016aac <expm1f+0x194>
24016a7a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
24016a7e:	eeb4 0ac7 	vcmpe.f32	s0, s14
24016a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016a86:	bf5b      	ittet	pl
24016a88:	ee70 7a67 	vsubpl.f32	s15, s0, s15
24016a8c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
24016a90:	ee70 5a25 	vaddmi.f32	s11, s0, s11
24016a94:	eea7 6a87 	vfmapl.f32	s12, s15, s14
24016a98:	bf43      	ittte	mi
24016a9a:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
24016a9e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
24016aa2:	ee27 0a80 	vmulmi.f32	s0, s15, s0
24016aa6:	eeb0 0a46 	vmovpl.f32	s0, s12
24016aaa:	4770      	bx	lr
24016aac:	1c5a      	adds	r2, r3, #1
24016aae:	2a39      	cmp	r2, #57	; 0x39
24016ab0:	ea4f 51c3 	mov.w	r1, r3, lsl #23
24016ab4:	d90b      	bls.n	24016ace <expm1f+0x1b6>
24016ab6:	ee77 7ac0 	vsub.f32	s15, s15, s0
24016aba:	ee76 7a67 	vsub.f32	s15, s12, s15
24016abe:	ee17 3a90 	vmov	r3, s15
24016ac2:	4419      	add	r1, r3
24016ac4:	ee07 1a90 	vmov	s15, r1
24016ac8:	ee37 0ac6 	vsub.f32	s0, s15, s12
24016acc:	4770      	bx	lr
24016ace:	2b16      	cmp	r3, #22
24016ad0:	dc11      	bgt.n	24016af6 <expm1f+0x1de>
24016ad2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
24016ad6:	fa42 f303 	asr.w	r3, r2, r3
24016ada:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
24016ade:	ee07 3a10 	vmov	s14, r3
24016ae2:	ee77 7ac0 	vsub.f32	s15, s15, s0
24016ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
24016aea:	ee17 3a90 	vmov	r3, s15
24016aee:	440b      	add	r3, r1
24016af0:	ee00 3a10 	vmov	s0, r3
24016af4:	4770      	bx	lr
24016af6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
24016afa:	05db      	lsls	r3, r3, #23
24016afc:	ee07 3a10 	vmov	s14, r3
24016b00:	ee77 7a87 	vadd.f32	s15, s15, s14
24016b04:	ee70 7a67 	vsub.f32	s15, s0, s15
24016b08:	ee77 7a86 	vadd.f32	s15, s15, s12
24016b0c:	ee17 3a90 	vmov	r3, s15
24016b10:	e7ed      	b.n	24016aee <expm1f+0x1d6>
24016b12:	bf00      	nop
24016b14:	4195b843 	.word	0x4195b843
24016b18:	42b17217 	.word	0x42b17217
24016b1c:	0da24260 	.word	0x0da24260
24016b20:	3eb17218 	.word	0x3eb17218
24016b24:	3f851591 	.word	0x3f851591
24016b28:	3f317180 	.word	0x3f317180
24016b2c:	3717f7d1 	.word	0x3717f7d1
24016b30:	b717f7d1 	.word	0xb717f7d1
24016b34:	b457edbb 	.word	0xb457edbb
24016b38:	36867e54 	.word	0x36867e54
24016b3c:	bd088889 	.word	0xbd088889
24016b40:	b8a670cd 	.word	0xb8a670cd
24016b44:	3ad00d01 	.word	0x3ad00d01
24016b48:	3fb8aa3b 	.word	0x3fb8aa3b
24016b4c:	7149f2ca 	.word	0x7149f2ca

24016b50 <fabs>:
24016b50:	ec51 0b10 	vmov	r0, r1, d0
24016b54:	ee10 2a10 	vmov	r2, s0
24016b58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
24016b5c:	ec43 2b10 	vmov	d0, r2, r3
24016b60:	4770      	bx	lr
24016b62:	0000      	movs	r0, r0
24016b64:	0000      	movs	r0, r0
	...

24016b68 <scalbn>:
24016b68:	ee10 1a90 	vmov	r1, s1
24016b6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
24016b70:	b98b      	cbnz	r3, 24016b96 <scalbn+0x2e>
24016b72:	ee10 3a10 	vmov	r3, s0
24016b76:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
24016b7a:	4319      	orrs	r1, r3
24016b7c:	d00a      	beq.n	24016b94 <scalbn+0x2c>
24016b7e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 24016c30 <scalbn+0xc8>
24016b82:	4b37      	ldr	r3, [pc, #220]	; (24016c60 <scalbn+0xf8>)
24016b84:	ee20 0b07 	vmul.f64	d0, d0, d7
24016b88:	4298      	cmp	r0, r3
24016b8a:	da0b      	bge.n	24016ba4 <scalbn+0x3c>
24016b8c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 24016c38 <scalbn+0xd0>
24016b90:	ee20 0b07 	vmul.f64	d0, d0, d7
24016b94:	4770      	bx	lr
24016b96:	f240 72ff 	movw	r2, #2047	; 0x7ff
24016b9a:	4293      	cmp	r3, r2
24016b9c:	d107      	bne.n	24016bae <scalbn+0x46>
24016b9e:	ee30 0b00 	vadd.f64	d0, d0, d0
24016ba2:	4770      	bx	lr
24016ba4:	ee10 1a90 	vmov	r1, s1
24016ba8:	f3c1 530a 	ubfx	r3, r1, #20, #11
24016bac:	3b36      	subs	r3, #54	; 0x36
24016bae:	f24c 3250 	movw	r2, #50000	; 0xc350
24016bb2:	4290      	cmp	r0, r2
24016bb4:	dd0d      	ble.n	24016bd2 <scalbn+0x6a>
24016bb6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 24016c40 <scalbn+0xd8>
24016bba:	ee10 3a90 	vmov	r3, s1
24016bbe:	eeb0 6b47 	vmov.f64	d6, d7
24016bc2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 24016c48 <scalbn+0xe0>
24016bc6:	2b00      	cmp	r3, #0
24016bc8:	fe27 7b05 	vselge.f64	d7, d7, d5
24016bcc:	ee27 0b06 	vmul.f64	d0, d7, d6
24016bd0:	4770      	bx	lr
24016bd2:	4418      	add	r0, r3
24016bd4:	f240 73fe 	movw	r3, #2046	; 0x7fe
24016bd8:	4298      	cmp	r0, r3
24016bda:	dcec      	bgt.n	24016bb6 <scalbn+0x4e>
24016bdc:	2800      	cmp	r0, #0
24016bde:	dd0a      	ble.n	24016bf6 <scalbn+0x8e>
24016be0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
24016be4:	ec53 2b10 	vmov	r2, r3, d0
24016be8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
24016bec:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
24016bf0:	ec43 2b10 	vmov	d0, r2, r3
24016bf4:	4770      	bx	lr
24016bf6:	f110 0f35 	cmn.w	r0, #53	; 0x35
24016bfa:	da09      	bge.n	24016c10 <scalbn+0xa8>
24016bfc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 24016c38 <scalbn+0xd0>
24016c00:	ee10 3a90 	vmov	r3, s1
24016c04:	eeb0 6b47 	vmov.f64	d6, d7
24016c08:	ed9f 5b11 	vldr	d5, [pc, #68]	; 24016c50 <scalbn+0xe8>
24016c0c:	2b00      	cmp	r3, #0
24016c0e:	e7db      	b.n	24016bc8 <scalbn+0x60>
24016c10:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
24016c14:	ec53 2b10 	vmov	r2, r3, d0
24016c18:	3036      	adds	r0, #54	; 0x36
24016c1a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
24016c1e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
24016c22:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 24016c58 <scalbn+0xf0>
24016c26:	ec43 2b10 	vmov	d0, r2, r3
24016c2a:	e7b1      	b.n	24016b90 <scalbn+0x28>
24016c2c:	f3af 8000 	nop.w
24016c30:	00000000 	.word	0x00000000
24016c34:	43500000 	.word	0x43500000
24016c38:	c2f8f359 	.word	0xc2f8f359
24016c3c:	01a56e1f 	.word	0x01a56e1f
24016c40:	8800759c 	.word	0x8800759c
24016c44:	7e37e43c 	.word	0x7e37e43c
24016c48:	8800759c 	.word	0x8800759c
24016c4c:	fe37e43c 	.word	0xfe37e43c
24016c50:	c2f8f359 	.word	0xc2f8f359
24016c54:	81a56e1f 	.word	0x81a56e1f
24016c58:	00000000 	.word	0x00000000
24016c5c:	3c900000 	.word	0x3c900000
24016c60:	ffff3cb0 	.word	0xffff3cb0

24016c64 <__kernel_rem_pio2f>:
24016c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24016c68:	ed2d 8b04 	vpush	{d8-d9}
24016c6c:	b0d9      	sub	sp, #356	; 0x164
24016c6e:	4688      	mov	r8, r1
24016c70:	9002      	str	r0, [sp, #8]
24016c72:	49b8      	ldr	r1, [pc, #736]	; (24016f54 <__kernel_rem_pio2f+0x2f0>)
24016c74:	9866      	ldr	r0, [sp, #408]	; 0x198
24016c76:	9301      	str	r3, [sp, #4]
24016c78:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
24016c7c:	9901      	ldr	r1, [sp, #4]
24016c7e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
24016c80:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
24016c84:	1d11      	adds	r1, r2, #4
24016c86:	db25      	blt.n	24016cd4 <__kernel_rem_pio2f+0x70>
24016c88:	1ed0      	subs	r0, r2, #3
24016c8a:	bf48      	it	mi
24016c8c:	1d10      	addmi	r0, r2, #4
24016c8e:	10c0      	asrs	r0, r0, #3
24016c90:	1c45      	adds	r5, r0, #1
24016c92:	00e9      	lsls	r1, r5, #3
24016c94:	eba0 070b 	sub.w	r7, r0, fp
24016c98:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 24016f64 <__kernel_rem_pio2f+0x300>
24016c9c:	9103      	str	r1, [sp, #12]
24016c9e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
24016ca2:	eb0a 0c0b 	add.w	ip, sl, fp
24016ca6:	ae1c      	add	r6, sp, #112	; 0x70
24016ca8:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
24016cac:	2400      	movs	r4, #0
24016cae:	4564      	cmp	r4, ip
24016cb0:	dd12      	ble.n	24016cd8 <__kernel_rem_pio2f+0x74>
24016cb2:	9901      	ldr	r1, [sp, #4]
24016cb4:	ac1c      	add	r4, sp, #112	; 0x70
24016cb6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
24016cba:	f50d 7988 	add.w	r9, sp, #272	; 0x110
24016cbe:	f04f 0c00 	mov.w	ip, #0
24016cc2:	45d4      	cmp	ip, sl
24016cc4:	dc27      	bgt.n	24016d16 <__kernel_rem_pio2f+0xb2>
24016cc6:	f8dd e008 	ldr.w	lr, [sp, #8]
24016cca:	eddf 7aa6 	vldr	s15, [pc, #664]	; 24016f64 <__kernel_rem_pio2f+0x300>
24016cce:	4627      	mov	r7, r4
24016cd0:	2600      	movs	r6, #0
24016cd2:	e016      	b.n	24016d02 <__kernel_rem_pio2f+0x9e>
24016cd4:	2000      	movs	r0, #0
24016cd6:	e7db      	b.n	24016c90 <__kernel_rem_pio2f+0x2c>
24016cd8:	42e7      	cmn	r7, r4
24016cda:	bf5d      	ittte	pl
24016cdc:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
24016ce0:	ee07 1a90 	vmovpl	s15, r1
24016ce4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
24016ce8:	eef0 7a47 	vmovmi.f32	s15, s14
24016cec:	ece6 7a01 	vstmia	r6!, {s15}
24016cf0:	3401      	adds	r4, #1
24016cf2:	e7dc      	b.n	24016cae <__kernel_rem_pio2f+0x4a>
24016cf4:	ecfe 6a01 	vldmia	lr!, {s13}
24016cf8:	ed97 7a00 	vldr	s14, [r7]
24016cfc:	eee6 7a87 	vfma.f32	s15, s13, s14
24016d00:	3601      	adds	r6, #1
24016d02:	455e      	cmp	r6, fp
24016d04:	f1a7 0704 	sub.w	r7, r7, #4
24016d08:	ddf4      	ble.n	24016cf4 <__kernel_rem_pio2f+0x90>
24016d0a:	ece9 7a01 	vstmia	r9!, {s15}
24016d0e:	f10c 0c01 	add.w	ip, ip, #1
24016d12:	3404      	adds	r4, #4
24016d14:	e7d5      	b.n	24016cc2 <__kernel_rem_pio2f+0x5e>
24016d16:	a908      	add	r1, sp, #32
24016d18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
24016d1c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
24016d20:	eddf 8a8f 	vldr	s17, [pc, #572]	; 24016f60 <__kernel_rem_pio2f+0x2fc>
24016d24:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 24016f5c <__kernel_rem_pio2f+0x2f8>
24016d28:	9105      	str	r1, [sp, #20]
24016d2a:	9304      	str	r3, [sp, #16]
24016d2c:	4656      	mov	r6, sl
24016d2e:	00b3      	lsls	r3, r6, #2
24016d30:	9306      	str	r3, [sp, #24]
24016d32:	ab58      	add	r3, sp, #352	; 0x160
24016d34:	eb03 0086 	add.w	r0, r3, r6, lsl #2
24016d38:	ac08      	add	r4, sp, #32
24016d3a:	ab44      	add	r3, sp, #272	; 0x110
24016d3c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
24016d40:	46a4      	mov	ip, r4
24016d42:	eb03 0086 	add.w	r0, r3, r6, lsl #2
24016d46:	4637      	mov	r7, r6
24016d48:	2f00      	cmp	r7, #0
24016d4a:	f1a0 0004 	sub.w	r0, r0, #4
24016d4e:	dc4a      	bgt.n	24016de6 <__kernel_rem_pio2f+0x182>
24016d50:	4628      	mov	r0, r5
24016d52:	9207      	str	r2, [sp, #28]
24016d54:	f000 fab2 	bl	240172bc <scalbnf>
24016d58:	eeb0 8a40 	vmov.f32	s16, s0
24016d5c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
24016d60:	ee28 0a00 	vmul.f32	s0, s16, s0
24016d64:	f000 fa68 	bl	24017238 <floorf>
24016d68:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
24016d6c:	eea0 8a67 	vfms.f32	s16, s0, s15
24016d70:	2d00      	cmp	r5, #0
24016d72:	9a07      	ldr	r2, [sp, #28]
24016d74:	eefd 7ac8 	vcvt.s32.f32	s15, s16
24016d78:	ee17 9a90 	vmov	r9, s15
24016d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016d80:	ee38 8a67 	vsub.f32	s16, s16, s15
24016d84:	dd41      	ble.n	24016e0a <__kernel_rem_pio2f+0x1a6>
24016d86:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
24016d8a:	ab08      	add	r3, sp, #32
24016d8c:	f1c5 0e08 	rsb	lr, r5, #8
24016d90:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
24016d94:	fa47 f00e 	asr.w	r0, r7, lr
24016d98:	4481      	add	r9, r0
24016d9a:	fa00 f00e 	lsl.w	r0, r0, lr
24016d9e:	1a3f      	subs	r7, r7, r0
24016da0:	f1c5 0007 	rsb	r0, r5, #7
24016da4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
24016da8:	4107      	asrs	r7, r0
24016daa:	2f00      	cmp	r7, #0
24016dac:	dd3c      	ble.n	24016e28 <__kernel_rem_pio2f+0x1c4>
24016dae:	f04f 0e00 	mov.w	lr, #0
24016db2:	f109 0901 	add.w	r9, r9, #1
24016db6:	4671      	mov	r1, lr
24016db8:	4576      	cmp	r6, lr
24016dba:	dc67      	bgt.n	24016e8c <__kernel_rem_pio2f+0x228>
24016dbc:	2d00      	cmp	r5, #0
24016dbe:	dd03      	ble.n	24016dc8 <__kernel_rem_pio2f+0x164>
24016dc0:	2d01      	cmp	r5, #1
24016dc2:	d074      	beq.n	24016eae <__kernel_rem_pio2f+0x24a>
24016dc4:	2d02      	cmp	r5, #2
24016dc6:	d07b      	beq.n	24016ec0 <__kernel_rem_pio2f+0x25c>
24016dc8:	2f02      	cmp	r7, #2
24016dca:	d12d      	bne.n	24016e28 <__kernel_rem_pio2f+0x1c4>
24016dcc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24016dd0:	ee30 8a48 	vsub.f32	s16, s0, s16
24016dd4:	b341      	cbz	r1, 24016e28 <__kernel_rem_pio2f+0x1c4>
24016dd6:	4628      	mov	r0, r5
24016dd8:	9207      	str	r2, [sp, #28]
24016dda:	f000 fa6f 	bl	240172bc <scalbnf>
24016dde:	9a07      	ldr	r2, [sp, #28]
24016de0:	ee38 8a40 	vsub.f32	s16, s16, s0
24016de4:	e020      	b.n	24016e28 <__kernel_rem_pio2f+0x1c4>
24016de6:	ee60 7a28 	vmul.f32	s15, s0, s17
24016dea:	3f01      	subs	r7, #1
24016dec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24016df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016df4:	eea7 0ac9 	vfms.f32	s0, s15, s18
24016df8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24016dfc:	ecac 0a01 	vstmia	ip!, {s0}
24016e00:	ed90 0a00 	vldr	s0, [r0]
24016e04:	ee37 0a80 	vadd.f32	s0, s15, s0
24016e08:	e79e      	b.n	24016d48 <__kernel_rem_pio2f+0xe4>
24016e0a:	d105      	bne.n	24016e18 <__kernel_rem_pio2f+0x1b4>
24016e0c:	1e70      	subs	r0, r6, #1
24016e0e:	ab08      	add	r3, sp, #32
24016e10:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
24016e14:	11ff      	asrs	r7, r7, #7
24016e16:	e7c8      	b.n	24016daa <__kernel_rem_pio2f+0x146>
24016e18:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24016e1c:	eeb4 8ae7 	vcmpe.f32	s16, s15
24016e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016e24:	da30      	bge.n	24016e88 <__kernel_rem_pio2f+0x224>
24016e26:	2700      	movs	r7, #0
24016e28:	eeb5 8a40 	vcmp.f32	s16, #0.0
24016e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016e30:	f040 809a 	bne.w	24016f68 <__kernel_rem_pio2f+0x304>
24016e34:	1e74      	subs	r4, r6, #1
24016e36:	46a4      	mov	ip, r4
24016e38:	2100      	movs	r1, #0
24016e3a:	45d4      	cmp	ip, sl
24016e3c:	da47      	bge.n	24016ece <__kernel_rem_pio2f+0x26a>
24016e3e:	2900      	cmp	r1, #0
24016e40:	d063      	beq.n	24016f0a <__kernel_rem_pio2f+0x2a6>
24016e42:	ab08      	add	r3, sp, #32
24016e44:	3d08      	subs	r5, #8
24016e46:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
24016e4a:	2b00      	cmp	r3, #0
24016e4c:	d07f      	beq.n	24016f4e <__kernel_rem_pio2f+0x2ea>
24016e4e:	4628      	mov	r0, r5
24016e50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24016e54:	f000 fa32 	bl	240172bc <scalbnf>
24016e58:	1c63      	adds	r3, r4, #1
24016e5a:	aa44      	add	r2, sp, #272	; 0x110
24016e5c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 24016f60 <__kernel_rem_pio2f+0x2fc>
24016e60:	0099      	lsls	r1, r3, #2
24016e62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24016e66:	4623      	mov	r3, r4
24016e68:	2b00      	cmp	r3, #0
24016e6a:	f280 80ad 	bge.w	24016fc8 <__kernel_rem_pio2f+0x364>
24016e6e:	4623      	mov	r3, r4
24016e70:	2b00      	cmp	r3, #0
24016e72:	f2c0 80cb 	blt.w	2401700c <__kernel_rem_pio2f+0x3a8>
24016e76:	aa44      	add	r2, sp, #272	; 0x110
24016e78:	eb02 0583 	add.w	r5, r2, r3, lsl #2
24016e7c:	4e36      	ldr	r6, [pc, #216]	; (24016f58 <__kernel_rem_pio2f+0x2f4>)
24016e7e:	eddf 7a39 	vldr	s15, [pc, #228]	; 24016f64 <__kernel_rem_pio2f+0x300>
24016e82:	2000      	movs	r0, #0
24016e84:	1ae2      	subs	r2, r4, r3
24016e86:	e0b6      	b.n	24016ff6 <__kernel_rem_pio2f+0x392>
24016e88:	2702      	movs	r7, #2
24016e8a:	e790      	b.n	24016dae <__kernel_rem_pio2f+0x14a>
24016e8c:	6820      	ldr	r0, [r4, #0]
24016e8e:	b949      	cbnz	r1, 24016ea4 <__kernel_rem_pio2f+0x240>
24016e90:	b118      	cbz	r0, 24016e9a <__kernel_rem_pio2f+0x236>
24016e92:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
24016e96:	6020      	str	r0, [r4, #0]
24016e98:	2001      	movs	r0, #1
24016e9a:	f10e 0e01 	add.w	lr, lr, #1
24016e9e:	3404      	adds	r4, #4
24016ea0:	4601      	mov	r1, r0
24016ea2:	e789      	b.n	24016db8 <__kernel_rem_pio2f+0x154>
24016ea4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
24016ea8:	6020      	str	r0, [r4, #0]
24016eaa:	4608      	mov	r0, r1
24016eac:	e7f5      	b.n	24016e9a <__kernel_rem_pio2f+0x236>
24016eae:	1e74      	subs	r4, r6, #1
24016eb0:	ab08      	add	r3, sp, #32
24016eb2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
24016eb6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
24016eba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
24016ebe:	e783      	b.n	24016dc8 <__kernel_rem_pio2f+0x164>
24016ec0:	1e74      	subs	r4, r6, #1
24016ec2:	ab08      	add	r3, sp, #32
24016ec4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
24016ec8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
24016ecc:	e7f5      	b.n	24016eba <__kernel_rem_pio2f+0x256>
24016ece:	ab08      	add	r3, sp, #32
24016ed0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
24016ed4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
24016ed8:	4301      	orrs	r1, r0
24016eda:	e7ae      	b.n	24016e3a <__kernel_rem_pio2f+0x1d6>
24016edc:	3001      	adds	r0, #1
24016ede:	f854 7d04 	ldr.w	r7, [r4, #-4]!
24016ee2:	2f00      	cmp	r7, #0
24016ee4:	d0fa      	beq.n	24016edc <__kernel_rem_pio2f+0x278>
24016ee6:	9b06      	ldr	r3, [sp, #24]
24016ee8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
24016eec:	eb0d 0403 	add.w	r4, sp, r3
24016ef0:	9b01      	ldr	r3, [sp, #4]
24016ef2:	18f7      	adds	r7, r6, r3
24016ef4:	ab1c      	add	r3, sp, #112	; 0x70
24016ef6:	f106 0c01 	add.w	ip, r6, #1
24016efa:	3c4c      	subs	r4, #76	; 0x4c
24016efc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
24016f00:	4430      	add	r0, r6
24016f02:	4560      	cmp	r0, ip
24016f04:	da04      	bge.n	24016f10 <__kernel_rem_pio2f+0x2ac>
24016f06:	4606      	mov	r6, r0
24016f08:	e711      	b.n	24016d2e <__kernel_rem_pio2f+0xca>
24016f0a:	9c05      	ldr	r4, [sp, #20]
24016f0c:	2001      	movs	r0, #1
24016f0e:	e7e6      	b.n	24016ede <__kernel_rem_pio2f+0x27a>
24016f10:	9b04      	ldr	r3, [sp, #16]
24016f12:	f8dd e008 	ldr.w	lr, [sp, #8]
24016f16:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
24016f1a:	9306      	str	r3, [sp, #24]
24016f1c:	ee07 3a90 	vmov	s15, r3
24016f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016f24:	2600      	movs	r6, #0
24016f26:	ece7 7a01 	vstmia	r7!, {s15}
24016f2a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 24016f64 <__kernel_rem_pio2f+0x300>
24016f2e:	46b9      	mov	r9, r7
24016f30:	455e      	cmp	r6, fp
24016f32:	dd04      	ble.n	24016f3e <__kernel_rem_pio2f+0x2da>
24016f34:	ece4 7a01 	vstmia	r4!, {s15}
24016f38:	f10c 0c01 	add.w	ip, ip, #1
24016f3c:	e7e1      	b.n	24016f02 <__kernel_rem_pio2f+0x29e>
24016f3e:	ecfe 6a01 	vldmia	lr!, {s13}
24016f42:	ed39 7a01 	vldmdb	r9!, {s14}
24016f46:	3601      	adds	r6, #1
24016f48:	eee6 7a87 	vfma.f32	s15, s13, s14
24016f4c:	e7f0      	b.n	24016f30 <__kernel_rem_pio2f+0x2cc>
24016f4e:	3c01      	subs	r4, #1
24016f50:	e777      	b.n	24016e42 <__kernel_rem_pio2f+0x1de>
24016f52:	bf00      	nop
24016f54:	2402cbdc 	.word	0x2402cbdc
24016f58:	2402cbb0 	.word	0x2402cbb0
24016f5c:	43800000 	.word	0x43800000
24016f60:	3b800000 	.word	0x3b800000
24016f64:	00000000 	.word	0x00000000
24016f68:	9b03      	ldr	r3, [sp, #12]
24016f6a:	eeb0 0a48 	vmov.f32	s0, s16
24016f6e:	1a98      	subs	r0, r3, r2
24016f70:	f000 f9a4 	bl	240172bc <scalbnf>
24016f74:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 24016f5c <__kernel_rem_pio2f+0x2f8>
24016f78:	eeb4 0ac7 	vcmpe.f32	s0, s14
24016f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016f80:	db19      	blt.n	24016fb6 <__kernel_rem_pio2f+0x352>
24016f82:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 24016f60 <__kernel_rem_pio2f+0x2fc>
24016f86:	ee60 7a27 	vmul.f32	s15, s0, s15
24016f8a:	aa08      	add	r2, sp, #32
24016f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24016f90:	1c74      	adds	r4, r6, #1
24016f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016f96:	3508      	adds	r5, #8
24016f98:	eea7 0ac7 	vfms.f32	s0, s15, s14
24016f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24016fa0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24016fa4:	ee10 3a10 	vmov	r3, s0
24016fa8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
24016fac:	ee17 3a90 	vmov	r3, s15
24016fb0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
24016fb4:	e74b      	b.n	24016e4e <__kernel_rem_pio2f+0x1ea>
24016fb6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24016fba:	aa08      	add	r2, sp, #32
24016fbc:	ee10 3a10 	vmov	r3, s0
24016fc0:	4634      	mov	r4, r6
24016fc2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
24016fc6:	e742      	b.n	24016e4e <__kernel_rem_pio2f+0x1ea>
24016fc8:	a808      	add	r0, sp, #32
24016fca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
24016fce:	9001      	str	r0, [sp, #4]
24016fd0:	ee07 0a90 	vmov	s15, r0
24016fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016fd8:	3b01      	subs	r3, #1
24016fda:	ee67 7a80 	vmul.f32	s15, s15, s0
24016fde:	ee20 0a07 	vmul.f32	s0, s0, s14
24016fe2:	ed62 7a01 	vstmdb	r2!, {s15}
24016fe6:	e73f      	b.n	24016e68 <__kernel_rem_pio2f+0x204>
24016fe8:	ecf6 6a01 	vldmia	r6!, {s13}
24016fec:	ecb5 7a01 	vldmia	r5!, {s14}
24016ff0:	eee6 7a87 	vfma.f32	s15, s13, s14
24016ff4:	3001      	adds	r0, #1
24016ff6:	4550      	cmp	r0, sl
24016ff8:	dc01      	bgt.n	24016ffe <__kernel_rem_pio2f+0x39a>
24016ffa:	4290      	cmp	r0, r2
24016ffc:	ddf4      	ble.n	24016fe8 <__kernel_rem_pio2f+0x384>
24016ffe:	a858      	add	r0, sp, #352	; 0x160
24017000:	eb00 0282 	add.w	r2, r0, r2, lsl #2
24017004:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
24017008:	3b01      	subs	r3, #1
2401700a:	e731      	b.n	24016e70 <__kernel_rem_pio2f+0x20c>
2401700c:	9b66      	ldr	r3, [sp, #408]	; 0x198
2401700e:	2b02      	cmp	r3, #2
24017010:	dc09      	bgt.n	24017026 <__kernel_rem_pio2f+0x3c2>
24017012:	2b00      	cmp	r3, #0
24017014:	dc2b      	bgt.n	2401706e <__kernel_rem_pio2f+0x40a>
24017016:	d044      	beq.n	240170a2 <__kernel_rem_pio2f+0x43e>
24017018:	f009 0007 	and.w	r0, r9, #7
2401701c:	b059      	add	sp, #356	; 0x164
2401701e:	ecbd 8b04 	vpop	{d8-d9}
24017022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24017026:	9b66      	ldr	r3, [sp, #408]	; 0x198
24017028:	2b03      	cmp	r3, #3
2401702a:	d1f5      	bne.n	24017018 <__kernel_rem_pio2f+0x3b4>
2401702c:	aa30      	add	r2, sp, #192	; 0xc0
2401702e:	1f0b      	subs	r3, r1, #4
24017030:	4413      	add	r3, r2
24017032:	461a      	mov	r2, r3
24017034:	4620      	mov	r0, r4
24017036:	2800      	cmp	r0, #0
24017038:	f1a2 0204 	sub.w	r2, r2, #4
2401703c:	dc52      	bgt.n	240170e4 <__kernel_rem_pio2f+0x480>
2401703e:	4622      	mov	r2, r4
24017040:	2a01      	cmp	r2, #1
24017042:	f1a3 0304 	sub.w	r3, r3, #4
24017046:	dc5d      	bgt.n	24017104 <__kernel_rem_pio2f+0x4a0>
24017048:	ab30      	add	r3, sp, #192	; 0xc0
2401704a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 24016f64 <__kernel_rem_pio2f+0x300>
2401704e:	440b      	add	r3, r1
24017050:	2c01      	cmp	r4, #1
24017052:	dc67      	bgt.n	24017124 <__kernel_rem_pio2f+0x4c0>
24017054:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
24017058:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
2401705c:	2f00      	cmp	r7, #0
2401705e:	d167      	bne.n	24017130 <__kernel_rem_pio2f+0x4cc>
24017060:	edc8 6a00 	vstr	s13, [r8]
24017064:	ed88 7a01 	vstr	s14, [r8, #4]
24017068:	edc8 7a02 	vstr	s15, [r8, #8]
2401706c:	e7d4      	b.n	24017018 <__kernel_rem_pio2f+0x3b4>
2401706e:	ab30      	add	r3, sp, #192	; 0xc0
24017070:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 24016f64 <__kernel_rem_pio2f+0x300>
24017074:	440b      	add	r3, r1
24017076:	4622      	mov	r2, r4
24017078:	2a00      	cmp	r2, #0
2401707a:	da24      	bge.n	240170c6 <__kernel_rem_pio2f+0x462>
2401707c:	b34f      	cbz	r7, 240170d2 <__kernel_rem_pio2f+0x46e>
2401707e:	eef1 7a47 	vneg.f32	s15, s14
24017082:	edc8 7a00 	vstr	s15, [r8]
24017086:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
2401708a:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401708e:	aa31      	add	r2, sp, #196	; 0xc4
24017090:	2301      	movs	r3, #1
24017092:	429c      	cmp	r4, r3
24017094:	da20      	bge.n	240170d8 <__kernel_rem_pio2f+0x474>
24017096:	b10f      	cbz	r7, 2401709c <__kernel_rem_pio2f+0x438>
24017098:	eef1 7a67 	vneg.f32	s15, s15
2401709c:	edc8 7a01 	vstr	s15, [r8, #4]
240170a0:	e7ba      	b.n	24017018 <__kernel_rem_pio2f+0x3b4>
240170a2:	ab30      	add	r3, sp, #192	; 0xc0
240170a4:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 24016f64 <__kernel_rem_pio2f+0x300>
240170a8:	440b      	add	r3, r1
240170aa:	2c00      	cmp	r4, #0
240170ac:	da05      	bge.n	240170ba <__kernel_rem_pio2f+0x456>
240170ae:	b10f      	cbz	r7, 240170b4 <__kernel_rem_pio2f+0x450>
240170b0:	eef1 7a67 	vneg.f32	s15, s15
240170b4:	edc8 7a00 	vstr	s15, [r8]
240170b8:	e7ae      	b.n	24017018 <__kernel_rem_pio2f+0x3b4>
240170ba:	ed33 7a01 	vldmdb	r3!, {s14}
240170be:	3c01      	subs	r4, #1
240170c0:	ee77 7a87 	vadd.f32	s15, s15, s14
240170c4:	e7f1      	b.n	240170aa <__kernel_rem_pio2f+0x446>
240170c6:	ed73 7a01 	vldmdb	r3!, {s15}
240170ca:	3a01      	subs	r2, #1
240170cc:	ee37 7a27 	vadd.f32	s14, s14, s15
240170d0:	e7d2      	b.n	24017078 <__kernel_rem_pio2f+0x414>
240170d2:	eef0 7a47 	vmov.f32	s15, s14
240170d6:	e7d4      	b.n	24017082 <__kernel_rem_pio2f+0x41e>
240170d8:	ecb2 7a01 	vldmia	r2!, {s14}
240170dc:	3301      	adds	r3, #1
240170de:	ee77 7a87 	vadd.f32	s15, s15, s14
240170e2:	e7d6      	b.n	24017092 <__kernel_rem_pio2f+0x42e>
240170e4:	edd2 7a00 	vldr	s15, [r2]
240170e8:	edd2 6a01 	vldr	s13, [r2, #4]
240170ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
240170f0:	3801      	subs	r0, #1
240170f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
240170f6:	ed82 7a00 	vstr	s14, [r2]
240170fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
240170fe:	edc2 7a01 	vstr	s15, [r2, #4]
24017102:	e798      	b.n	24017036 <__kernel_rem_pio2f+0x3d2>
24017104:	edd3 7a00 	vldr	s15, [r3]
24017108:	edd3 6a01 	vldr	s13, [r3, #4]
2401710c:	ee37 7aa6 	vadd.f32	s14, s15, s13
24017110:	3a01      	subs	r2, #1
24017112:	ee77 7ac7 	vsub.f32	s15, s15, s14
24017116:	ed83 7a00 	vstr	s14, [r3]
2401711a:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401711e:	edc3 7a01 	vstr	s15, [r3, #4]
24017122:	e78d      	b.n	24017040 <__kernel_rem_pio2f+0x3dc>
24017124:	ed33 7a01 	vldmdb	r3!, {s14}
24017128:	3c01      	subs	r4, #1
2401712a:	ee77 7a87 	vadd.f32	s15, s15, s14
2401712e:	e78f      	b.n	24017050 <__kernel_rem_pio2f+0x3ec>
24017130:	eef1 6a66 	vneg.f32	s13, s13
24017134:	eeb1 7a47 	vneg.f32	s14, s14
24017138:	edc8 6a00 	vstr	s13, [r8]
2401713c:	ed88 7a01 	vstr	s14, [r8, #4]
24017140:	eef1 7a67 	vneg.f32	s15, s15
24017144:	e790      	b.n	24017068 <__kernel_rem_pio2f+0x404>
24017146:	bf00      	nop

24017148 <floor>:
24017148:	ee10 1a90 	vmov	r1, s1
2401714c:	f3c1 520a 	ubfx	r2, r1, #20, #11
24017150:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
24017154:	2b13      	cmp	r3, #19
24017156:	b530      	push	{r4, r5, lr}
24017158:	ee10 0a10 	vmov	r0, s0
2401715c:	ee10 5a10 	vmov	r5, s0
24017160:	dc31      	bgt.n	240171c6 <floor+0x7e>
24017162:	2b00      	cmp	r3, #0
24017164:	da15      	bge.n	24017192 <floor+0x4a>
24017166:	ed9f 7b30 	vldr	d7, [pc, #192]	; 24017228 <floor+0xe0>
2401716a:	ee30 0b07 	vadd.f64	d0, d0, d7
2401716e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
24017172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017176:	dd07      	ble.n	24017188 <floor+0x40>
24017178:	2900      	cmp	r1, #0
2401717a:	da4e      	bge.n	2401721a <floor+0xd2>
2401717c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
24017180:	4308      	orrs	r0, r1
24017182:	d04d      	beq.n	24017220 <floor+0xd8>
24017184:	492a      	ldr	r1, [pc, #168]	; (24017230 <floor+0xe8>)
24017186:	2000      	movs	r0, #0
24017188:	460b      	mov	r3, r1
2401718a:	4602      	mov	r2, r0
2401718c:	ec43 2b10 	vmov	d0, r2, r3
24017190:	e020      	b.n	240171d4 <floor+0x8c>
24017192:	4a28      	ldr	r2, [pc, #160]	; (24017234 <floor+0xec>)
24017194:	411a      	asrs	r2, r3
24017196:	ea01 0402 	and.w	r4, r1, r2
2401719a:	4304      	orrs	r4, r0
2401719c:	d01a      	beq.n	240171d4 <floor+0x8c>
2401719e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 24017228 <floor+0xe0>
240171a2:	ee30 0b07 	vadd.f64	d0, d0, d7
240171a6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
240171aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240171ae:	ddeb      	ble.n	24017188 <floor+0x40>
240171b0:	2900      	cmp	r1, #0
240171b2:	bfbe      	ittt	lt
240171b4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
240171b8:	fa40 f303 	asrlt.w	r3, r0, r3
240171bc:	18c9      	addlt	r1, r1, r3
240171be:	ea21 0102 	bic.w	r1, r1, r2
240171c2:	2000      	movs	r0, #0
240171c4:	e7e0      	b.n	24017188 <floor+0x40>
240171c6:	2b33      	cmp	r3, #51	; 0x33
240171c8:	dd05      	ble.n	240171d6 <floor+0x8e>
240171ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
240171ce:	d101      	bne.n	240171d4 <floor+0x8c>
240171d0:	ee30 0b00 	vadd.f64	d0, d0, d0
240171d4:	bd30      	pop	{r4, r5, pc}
240171d6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
240171da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
240171de:	40e2      	lsrs	r2, r4
240171e0:	4210      	tst	r0, r2
240171e2:	d0f7      	beq.n	240171d4 <floor+0x8c>
240171e4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24017228 <floor+0xe0>
240171e8:	ee30 0b07 	vadd.f64	d0, d0, d7
240171ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
240171f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240171f4:	ddc8      	ble.n	24017188 <floor+0x40>
240171f6:	2900      	cmp	r1, #0
240171f8:	da02      	bge.n	24017200 <floor+0xb8>
240171fa:	2b14      	cmp	r3, #20
240171fc:	d103      	bne.n	24017206 <floor+0xbe>
240171fe:	3101      	adds	r1, #1
24017200:	ea20 0002 	bic.w	r0, r0, r2
24017204:	e7c0      	b.n	24017188 <floor+0x40>
24017206:	2401      	movs	r4, #1
24017208:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
2401720c:	fa04 f303 	lsl.w	r3, r4, r3
24017210:	4418      	add	r0, r3
24017212:	4285      	cmp	r5, r0
24017214:	bf88      	it	hi
24017216:	1909      	addhi	r1, r1, r4
24017218:	e7f2      	b.n	24017200 <floor+0xb8>
2401721a:	2000      	movs	r0, #0
2401721c:	4601      	mov	r1, r0
2401721e:	e7b3      	b.n	24017188 <floor+0x40>
24017220:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
24017224:	e7b0      	b.n	24017188 <floor+0x40>
24017226:	bf00      	nop
24017228:	8800759c 	.word	0x8800759c
2401722c:	7e37e43c 	.word	0x7e37e43c
24017230:	bff00000 	.word	0xbff00000
24017234:	000fffff 	.word	0x000fffff

24017238 <floorf>:
24017238:	ee10 3a10 	vmov	r3, s0
2401723c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
24017240:	3a7f      	subs	r2, #127	; 0x7f
24017242:	2a16      	cmp	r2, #22
24017244:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
24017248:	dc2a      	bgt.n	240172a0 <floorf+0x68>
2401724a:	2a00      	cmp	r2, #0
2401724c:	da11      	bge.n	24017272 <floorf+0x3a>
2401724e:	eddf 7a18 	vldr	s15, [pc, #96]	; 240172b0 <floorf+0x78>
24017252:	ee30 0a27 	vadd.f32	s0, s0, s15
24017256:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401725a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401725e:	dd05      	ble.n	2401726c <floorf+0x34>
24017260:	2b00      	cmp	r3, #0
24017262:	da23      	bge.n	240172ac <floorf+0x74>
24017264:	4a13      	ldr	r2, [pc, #76]	; (240172b4 <floorf+0x7c>)
24017266:	2900      	cmp	r1, #0
24017268:	bf18      	it	ne
2401726a:	4613      	movne	r3, r2
2401726c:	ee00 3a10 	vmov	s0, r3
24017270:	4770      	bx	lr
24017272:	4911      	ldr	r1, [pc, #68]	; (240172b8 <floorf+0x80>)
24017274:	4111      	asrs	r1, r2
24017276:	420b      	tst	r3, r1
24017278:	d0fa      	beq.n	24017270 <floorf+0x38>
2401727a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 240172b0 <floorf+0x78>
2401727e:	ee30 0a27 	vadd.f32	s0, s0, s15
24017282:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24017286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401728a:	ddef      	ble.n	2401726c <floorf+0x34>
2401728c:	2b00      	cmp	r3, #0
2401728e:	bfbe      	ittt	lt
24017290:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
24017294:	fa40 f202 	asrlt.w	r2, r0, r2
24017298:	189b      	addlt	r3, r3, r2
2401729a:	ea23 0301 	bic.w	r3, r3, r1
2401729e:	e7e5      	b.n	2401726c <floorf+0x34>
240172a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
240172a4:	d3e4      	bcc.n	24017270 <floorf+0x38>
240172a6:	ee30 0a00 	vadd.f32	s0, s0, s0
240172aa:	4770      	bx	lr
240172ac:	2300      	movs	r3, #0
240172ae:	e7dd      	b.n	2401726c <floorf+0x34>
240172b0:	7149f2ca 	.word	0x7149f2ca
240172b4:	bf800000 	.word	0xbf800000
240172b8:	007fffff 	.word	0x007fffff

240172bc <scalbnf>:
240172bc:	ee10 3a10 	vmov	r3, s0
240172c0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
240172c4:	d02a      	beq.n	2401731c <scalbnf+0x60>
240172c6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
240172ca:	d302      	bcc.n	240172d2 <scalbnf+0x16>
240172cc:	ee30 0a00 	vadd.f32	s0, s0, s0
240172d0:	4770      	bx	lr
240172d2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
240172d6:	d122      	bne.n	2401731e <scalbnf+0x62>
240172d8:	4b23      	ldr	r3, [pc, #140]	; (24017368 <scalbnf+0xac>)
240172da:	eddf 7a24 	vldr	s15, [pc, #144]	; 2401736c <scalbnf+0xb0>
240172de:	4298      	cmp	r0, r3
240172e0:	ee20 0a27 	vmul.f32	s0, s0, s15
240172e4:	db16      	blt.n	24017314 <scalbnf+0x58>
240172e6:	ee10 3a10 	vmov	r3, s0
240172ea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
240172ee:	3a19      	subs	r2, #25
240172f0:	f24c 3150 	movw	r1, #50000	; 0xc350
240172f4:	4288      	cmp	r0, r1
240172f6:	dd14      	ble.n	24017322 <scalbnf+0x66>
240172f8:	eddf 7a1d 	vldr	s15, [pc, #116]	; 24017370 <scalbnf+0xb4>
240172fc:	eddf 6a1d 	vldr	s13, [pc, #116]	; 24017374 <scalbnf+0xb8>
24017300:	ee10 3a10 	vmov	r3, s0
24017304:	eeb0 7a67 	vmov.f32	s14, s15
24017308:	2b00      	cmp	r3, #0
2401730a:	fe67 7aa6 	vselge.f32	s15, s15, s13
2401730e:	ee27 0a87 	vmul.f32	s0, s15, s14
24017312:	4770      	bx	lr
24017314:	eddf 7a18 	vldr	s15, [pc, #96]	; 24017378 <scalbnf+0xbc>
24017318:	ee27 0a80 	vmul.f32	s0, s15, s0
2401731c:	4770      	bx	lr
2401731e:	0dd2      	lsrs	r2, r2, #23
24017320:	e7e6      	b.n	240172f0 <scalbnf+0x34>
24017322:	4410      	add	r0, r2
24017324:	28fe      	cmp	r0, #254	; 0xfe
24017326:	dce7      	bgt.n	240172f8 <scalbnf+0x3c>
24017328:	2800      	cmp	r0, #0
2401732a:	dd06      	ble.n	2401733a <scalbnf+0x7e>
2401732c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
24017330:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
24017334:	ee00 3a10 	vmov	s0, r3
24017338:	4770      	bx	lr
2401733a:	f110 0f16 	cmn.w	r0, #22
2401733e:	da09      	bge.n	24017354 <scalbnf+0x98>
24017340:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24017378 <scalbnf+0xbc>
24017344:	eddf 6a0d 	vldr	s13, [pc, #52]	; 2401737c <scalbnf+0xc0>
24017348:	ee10 3a10 	vmov	r3, s0
2401734c:	eeb0 7a67 	vmov.f32	s14, s15
24017350:	2b00      	cmp	r3, #0
24017352:	e7da      	b.n	2401730a <scalbnf+0x4e>
24017354:	3019      	adds	r0, #25
24017356:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
2401735a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
2401735e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 24017380 <scalbnf+0xc4>
24017362:	ee07 3a90 	vmov	s15, r3
24017366:	e7d7      	b.n	24017318 <scalbnf+0x5c>
24017368:	ffff3cb0 	.word	0xffff3cb0
2401736c:	4c000000 	.word	0x4c000000
24017370:	7149f2ca 	.word	0x7149f2ca
24017374:	f149f2ca 	.word	0xf149f2ca
24017378:	0da24260 	.word	0x0da24260
2401737c:	8da24260 	.word	0x8da24260
24017380:	33000000 	.word	0x33000000
24017384:	62652e2a 	.word	0x62652e2a
24017388:	00000070 	.word	0x00000070
2401738c:	53594850 	.word	0x53594850
24017390:	52545320 	.word	0x52545320
24017394:	20202031 	.word	0x20202031
24017398:	00002020 	.word	0x00002020
2401739c:	64656546 	.word	0x64656546
240173a0:	6b636162 	.word	0x6b636162
240173a4:	00002020 	.word	0x00002020
240173a8:	64696c53 	.word	0x64696c53
240173ac:	696f4e65 	.word	0x696f4e65
240173b0:	00002073 	.word	0x00002073
240173b4:	63756c50 	.word	0x63756c50
240173b8:	6469576b 	.word	0x6469576b
240173bc:	00002074 	.word	0x00002074
240173c0:	6b636950 	.word	0x6b636950
240173c4:	73696f4e 	.word	0x73696f4e
240173c8:	00002065 	.word	0x00002065
240173cc:	6b636950 	.word	0x6b636950
240173d0:	69537075 	.word	0x69537075
240173d4:	0000006d 	.word	0x0000006d
240173d8:	20202020 	.word	0x20202020
240173dc:	20202020 	.word	0x20202020
240173e0:	00002020 	.word	0x00002020
240173e4:	20202020 	.word	0x20202020
240173e8:	20202020 	.word	0x20202020
240173ec:	00000020 	.word	0x00000020
240173f0:	53594850 	.word	0x53594850
240173f4:	52545320 	.word	0x52545320
240173f8:	20202032 	.word	0x20202032
240173fc:	00002020 	.word	0x00002020
24017400:	654c4246 	.word	0x654c4246
24017404:	6e4f2076 	.word	0x6e4f2076
24017408:	00002020 	.word	0x00002020
2401740c:	67726154 	.word	0x67726154
24017410:	654c7465 	.word	0x654c7465
24017414:	00002076 	.word	0x00002076
24017418:	6b636950 	.word	0x6b636950
2401741c:	20736f50 	.word	0x20736f50
24017420:	00002020 	.word	0x00002020
24017424:	61636544 	.word	0x61636544
24017428:	20202079 	.word	0x20202079
2401742c:	00002020 	.word	0x00002020
24017430:	63756f54 	.word	0x63756f54
24017434:	20202068 	.word	0x20202068
24017438:	00002020 	.word	0x00002020
2401743c:	73696f4e 	.word	0x73696f4e
24017440:	20203165 	.word	0x20203165
24017444:	00002020 	.word	0x00002020
24017448:	73696f4e 	.word	0x73696f4e
2401744c:	20203265 	.word	0x20203265
24017450:	00002020 	.word	0x00002020
24017454:	5376654c 	.word	0x5376654c
24017458:	746f6f6d 	.word	0x746f6f6d
2401745c:	00002068 	.word	0x00002068
24017460:	49444441 	.word	0x49444441
24017464:	45564954 	.word	0x45564954
24017468:	20202020 	.word	0x20202020
2401746c:	00002020 	.word	0x00002020
24017470:	656e6f54 	.word	0x656e6f54
24017474:	20202020 	.word	0x20202020
24017478:	00002020 	.word	0x00002020
2401747c:	65727453 	.word	0x65727453
24017480:	20686374 	.word	0x20686374
24017484:	00002020 	.word	0x00002020
24017488:	646e6152 	.word	0x646e6152
2401748c:	79636544 	.word	0x79636544
24017490:	00002020 	.word	0x00002020
24017494:	646e6152 	.word	0x646e6152
24017498:	6e696147 	.word	0x6e696147
2401749c:	00002020 	.word	0x00002020
240174a0:	73696f4e 	.word	0x73696f4e
240174a4:	6c6f5665 	.word	0x6c6f5665
240174a8:	00002020 	.word	0x00002020
240174ac:	7062652e 	.word	0x7062652e
240174b0:	00000000 	.word	0x00000000
240174b4:	69617262 	.word	0x69617262
240174b8:	69622e6e 	.word	0x69622e6e
240174bc:	0000006e 	.word	0x0000006e

240174c0 <D1CorePrescTable>:
240174c0:	00000000 04030201 04030201 09080706     ................

240174d0 <flagBitshiftOffset.0>:
240174d0:	16100600 16100600                       ........

240174d8 <SD_Driver>:
240174d8:	2400c9fd 2400ca2d 2400ca4d 2400cadd     ...$-..$M..$...$
240174e8:	2400ca75 3c3a2a22 7f7c3f3e 00000000     u..$"*:<>?|.....
240174f8:	3d3b2c2b 00005d5b                       +,;=[]..

24017500 <ExCvt>:
24017500:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
24017510:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
24017520:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
24017530:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
24017540:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
24017550:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
24017560:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
24017570:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

24017580 <LfnOfs>:
24017580:	07050301 12100e09 1c181614 0000001e     ................

24017590 <Tbl>:
24017590:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
240175a0:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
240175b0:	00e600c9 00f400c6 00f200f6 00f900fb     ................
240175c0:	00d600ff 00f800dc 00d800a3 019200d7     ................
240175d0:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
240175e0:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
240175f0:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
24017600:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
24017610:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
24017620:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
24017630:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
24017640:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
24017650:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
24017660:	00da00de 00d900db 00dd00fd 00b400af     ................
24017670:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
24017680:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

24017690 <cvt1.1>:
24017690:	031a0061 031700e0 030700f8 000100ff     a...............
240176a0:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
240176b0:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
240176c0:	01840182 01860184 01870187 018a0189     ................
240176d0:	018b018b 018e018d 0190018f 01910191     ................
240176e0:	01940193 019601f6 01980197 023d0198     ..............=.
240176f0:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
24017700:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
24017710:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
24017720:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
24017730:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
24017740:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
24017750:	01ca01cb 011001cd 000101dd 01de018e     ................
24017760:	01f30112 01f10003 01f401f4 012801f8     ..............(.
24017770:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
24017780:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
24017790:	01810040 02550186 018a0189 018f0258     @.....U.....X...
240177a0:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
240177b0:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
240177c0:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
240177d0:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
240177e0:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
240177f0:	01a90282 02850284 02870286 024401ae     ..............D.
24017800:	01b201b1 028d0245 028f028e 02910290     ....E...........
24017810:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
24017820:	03880386 038a0389 031103b1 000203c2     ................
24017830:	03a303a3 030803c4 000303cc 038e038c     ................
24017840:	03d8038f 03f20118 03f9000a 03f403f3     ................
24017850:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
24017860:	04500320 04600710 048a0122 04c10136      .P...`."...6...
24017870:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
24017880:	00000000                                ....

24017884 <cvt2.0>:
24017884:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
24017894:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
240178a4:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
240178b4:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
240178c4:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
240178d4:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
240178e4:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
240178f4:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
24017904:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
24017914:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
24017924:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
24017934:	2d000164 ff410826 0000031a              d..-&.A.....

24017940 <__leaf_table_filtertan>:
24017940:	3ab0d0ee 3ab1140a 3ab178b3 3ab1bbcf     ...:...:.x.:...:
24017950:	3ab1feeb 3ab24207 3ab28523 3ab2e9cd     ...:.B.:#..:...:
24017960:	3ab32ce9 3ab37004 3ab3b320 3ab3f63c     .,.:.p.: ..:<..:
24017970:	3ab45ae6 3ab49e02 3ab4e11e 3ab5243a     .Z.:...:...::$.:
24017980:	3ab56755 3ab5cbff 3ab60f1b 3ab65237     Ug.:...:...:7R.:
24017990:	3ab69553 3ab6f9fd 3ab73d19 3ab78034     S..:...:.=.:4..:
240179a0:	3ab7c350 3ab827fa 3ab86b16 3ab8ae32     P..:.'.:.k.:2..:
240179b0:	3ab8f14e 3ab955f8 3ab99913 3ab9dc2f     N..:.U.:...:/..:
240179c0:	3aba1f4b 3aba83f5 3abac711 3abb0a2d     K..:...:...:-..:
240179d0:	3abb6ed6 3abbb1f2 3abbf50e 3abc59b8     .n.:...:...:.Y.:
240179e0:	3abc9cd4 3abcdff0 3abd449a 3abd87b5     ...:...:.D.:...:
240179f0:	3abdcad1 3abe0ded 3abe7297 3abeb5b3     ...:...:.r.:...:
24017a00:	3abf1a5d 3abf5d79 3abfa094 3ac0053e     ]..:y].:...:>..:
24017a10:	3ac0485a 3ac08b76 3ac0f020 3ac1333c     ZH.:v..: ..:<3.:
24017a20:	3ac17657 3ac1db01 3ac21e1d 3ac282c7     Wv.:...:...:...:
24017a30:	3ac2c5e3 3ac308ff 3ac36da8 3ac3b0c4     ...:...:.m.:...:
24017a40:	3ac3f3e0 3ac4588a 3ac49ba6 3ac50050     ...:.X.:...:P..:
24017a50:	3ac5436c 3ac5a815 3ac5eb31 3ac62e4d     lC.:...:1..:M..:
24017a60:	3ac692f7 3ac6d613 3ac73abd 3ac77dd8     ...:...:.:.:.}.:
24017a70:	3ac7e282 3ac8259e 3ac88a48 3ac8cd64     ...:.%.:H..:d..:
24017a80:	3ac91080 3ac97529 3ac9b845 3aca1cef     ...:)u.:E..:...:
24017a90:	3aca600b 3acac4b5 3acb07d1 3acb6c7a     .`.:...:...:zl.:
24017aa0:	3acbaf96 3acc1440 3acc575c 3accbc06     ...:@..:\W.:...:
24017ab0:	3accff22 3acd63cc 3acda6e7 3ace0b91     "..:.c.:...:...:
24017ac0:	3ace4ead 3aceb357 3acf1801 3acf5b1d     .N.:W..:...:.[.:
24017ad0:	3acfbfc6 3ad002e2 3ad0678c 3ad0aaa8     ...:...:.g.:...:
24017ae0:	3ad10f52 3ad1526e 3ad1b717 3ad21bc1     R..:nR.:...:...:
24017af0:	3ad25edd 3ad2c387 3ad306a3 3ad36b4c     .^.:...:...:Lk.:
24017b00:	3ad3ae68 3ad41312 3ad477bc 3ad4bad8     h..:...:.w.:...:
24017b10:	3ad51f82 3ad5629e 3ad5c747 3ad62bf1     ...:.b.:G..:.+.:
24017b20:	3ad66f0d 3ad6d3b7 3ad73861 3ad77b7c     .o.:...:a8.:|{.:
24017b30:	3ad7e026 3ad844d0 3ad887ec 3ad8ec96     &..:.D.:...:...:
24017b40:	3ad95140 3ad9945b 3ad9f905 3ada5daf     @Q.:[..:...:.].:
24017b50:	3adaa0cb 3adb0575 3adb6a1f 3adbad3a     ...:u..:.j.::..:
24017b60:	3adc11e4 3adc768e 3adcb9aa 3add1e54     ...:.v.:...:T..:
24017b70:	3add82fd 3adde7a7 3ade2ac3 3ade8f6d     ...:...:.*.:m..:
24017b80:	3adef417 3adf3733 3adf9bdc 3ae00086     ...:37.:...:...:
24017b90:	3ae06530 3ae0a84c 3ae10cf6 3ae1719f     0e.:L..:...:.q.:
24017ba0:	3ae1d649 3ae23af3 3ae27e0f 3ae2e2b9     I..:.:.:.~.:...:
24017bb0:	3ae34763 3ae3ac0c 3ae3ef28 3ae453d2     cG.:...:(..:.S.:
24017bc0:	3ae4b87c 3ae51d26 3ae581cf 3ae5c4eb     |..:&..:...:...:
24017bd0:	3ae62995 3ae68e3f 3ae6f2e9 3ae75793     .).:?..:...:.W.:
24017be0:	3ae7bc3c 3ae7ff58 3ae86402 3ae8c8ac     <..:X..:.d.:...:
24017bf0:	3ae92d56 3ae991ff 3ae9f6a9 3aea5b53     V-.:...:...:S[.:
24017c00:	3aeabffd 3aeb0319 3aeb67c3 3aebcc6c     ...:...:.g.:l..:
24017c10:	3aec3116 3aec95c0 3aecfa6a 3aed5f14     .1.:...:j..:._.:
24017c20:	3aedc3bd 3aee2867 3aee8d11 3aeed02d     ...:g(.:...:-..:
24017c30:	3aef34d7 3aef9980 3aeffe2a 3af062d4     .4.:...:*..:.b.:
24017c40:	3af0c77e 3af12c28 3af190d1 3af1f57b     ~..:(,.:...:{..:
24017c50:	3af25a25 3af2becf 3af32379 3af38822     %Z.:...:y#.:"..:
24017c60:	3af3eccc 3af45176 3af4b620 3af51aca     ...:vQ.: ..:...:
24017c70:	3af57f73 3af5e41d 3af648c7 3af6ad71     s..:...:.H.:q..:
24017c80:	3af7121b 3af776c5 3af7db6e 3af84018     ...:.v.:n..:.@.:
24017c90:	3af8a4c2 3af9096c 3af96e16 3af9d2bf     ...:l..:.n.:...:
24017ca0:	3afa3769 3afabda1 3afb224b 3afb86f4     i7.:...:K".:...:
24017cb0:	3afbeb9e 3afc5048 3afcb4f2 3afd199c     ...:HP.:...:...:
24017cc0:	3afd7e46 3afde2ef 3afe4799 3afecdd1     F~.:...:.G.:...:
24017cd0:	3aff327b 3aff9724 3afffbce 3b00303c     {2.:$..:...:<0.;
24017ce0:	3b006291 3b0094e6 3b00d802 3b010a57     .b.;...;...;W..;
24017cf0:	3b013cac 3b016f00 3b01a155 3b01d3aa     .<.;.o.;U..;...;
24017d00:	3b0216c6 3b02491b 3b027b70 3b02adc5     ...;.I.;p{.;...;
24017d10:	3b02e01a 3b032336 3b03558a 3b0387df     ...;6#.;.U.;...;
24017d20:	3b03ba34 3b03ec89 3b042fa5 3b0461fa     4..;...;./.;.a.;
24017d30:	3b04944f 3b04c6a4 3b0509c0 3b053c15     O..;...;...;.<.;
24017d40:	3b056e69 3b05b185 3b05e3da 3b06162f     in.;...;...;/..;
24017d50:	3b064884 3b068ba0 3b06bdf5 3b06f04a     .H.;...;...;J..;
24017d60:	3b073366 3b0765ba 3b07980f 3b07db2b     f3.;.e.;...;+..;
24017d70:	3b080d80 3b083fd5 3b0882f1 3b08b546     ...;.?.;...;F..;
24017d80:	3b08e79b 3b092ab7 3b095d0b 3b098f60     ...;.*.;.].;`..;
24017d90:	3b09d27c 3b0a04d1 3b0a47ed 3b0a7a42     |..;...;.G.;Bz.;
24017da0:	3b0aac97 3b0aefb3 3b0b2208 3b0b6523     ...;...;.".;#e.;
24017db0:	3b0b9778 3b0bc9cd 3b0c0ce9 3b0c3f3e     x..;...;...;>?.;
24017dc0:	3b0c825a 3b0cb4af 3b0cf7cb 3b0d2a20     Z..;...;...; *.;
24017dd0:	3b0d6d3b 3b0d9f90 3b0de2ac 3b0e1501     ;m.;...;...;...;
24017de0:	3b0e581d 3b0e8a72 3b0ecd8e 3b0effe3     .X.;r..;...;...;
24017df0:	3b0f42ff 3b0f7553 3b0fb86f 3b0feac4     .B.;Su.;o..;...;
24017e00:	3b102de0 3b106035 3b10a351 3b10d5a6     .-.;5`.;Q..;...;
24017e10:	3b1118c2 3b114b16 3b118e32 3b11d14e     ...;.K.;2..;N..;
24017e20:	3b1203a3 3b1246bf 3b127914 3b12bc30     ...;.F.;.y.;0..;
24017e30:	3b12ee85 3b1331a1 3b1374bc 3b13a711     ...;.1.;.t.;...;
24017e40:	3b13ea2d 3b142d49 3b145f9e 3b14a2ba     -..;I-.;._.;...;
24017e50:	3b14d50f 3b15182b 3b155b46 3b158d9b     ...;+..;F[.;...;
24017e60:	3b15d0b7 3b1613d3 3b1656ef 3b168944     ...;...;.V.;D..;
24017e70:	3b16cc60 3b170f7c 3b1741d1 3b1784ec     `..;|..;.A.;...;
24017e80:	3b17c808 3b17fa5d 3b183d79 3b188095     ...;]..;y=.;...;
24017e90:	3b18c3b1 3b18f606 3b193922 3b197c3d     ...;...;"9.;=|.;
24017ea0:	3b19bf59 3b19f1ae 3b1a34ca 3b1a77e6     Y..;...;.4.;.w.;
24017eb0:	3b1abb02 3b1afe1e 3b1b3073 3b1b738e     ...;...;s0.;.s.;
24017ec0:	3b1bb6aa 3b1bf9c6 3b1c3ce2 3b1c7ffe     ...;...;.<.;...;
24017ed0:	3b1cb253 3b1cf56f 3b1d388b 3b1d7ba6     S..;o..;.8.;.{.;
24017ee0:	3b1dbec2 3b1e01de 3b1e44fa 3b1e774f     ...;...;.D.;Ow.;
24017ef0:	3b1eba6b 3b1efd87 3b1f40a3 3b1f83be     k..;...;.@.;...;
24017f00:	3b1fc6da 3b2009f6 3b204d12 3b20902e     ...;.. ;.M ;.. ;
24017f10:	3b20d34a 3b211666 3b215981 3b219c9d     J. ;f.!;.Y!;..!;
24017f20:	3b21dfb9 3b2222d5 3b2265f1 3b229846     ..!;."";.e";F.";
24017f30:	3b22db62 3b231e7e 3b236199 3b23b57c     b.";~.#;.a#;|.#;
24017f40:	3b23f898 3b243bb4 3b247ed0 3b24c1ec     ..#;.;$;.~$;..$;
24017f50:	3b250508 3b254824 3b258b3f 3b25ce5b     ..%;$H%;?.%;[.%;
24017f60:	3b261177 3b265493 3b2697af 3b26dacb     w.&;.T&;..&;..&;
24017f70:	3b271de7 3b276102 3b27a41e 3b27f801     ..';.a';..';..';
24017f80:	3b283b1d 3b287e39 3b28c155 3b290471     .;(;9~(;U.(;q.);
24017f90:	3b29478d 3b298aa8 3b29de8b 3b2a21a7     .G);..);..);.!*;
24017fa0:	3b2a64c3 3b2aa7df 3b2aeafb 3b2b2e17     .d*;..*;..*;..+;
24017fb0:	3b2b81f9 3b2bc515 3b2c0831 3b2c4b4d     ..+;..+;1.,;MK,;
24017fc0:	3b2c9f30 3b2ce24c 3b2d2568 3b2d6883     0.,;L.,;h%-;.h-;
24017fd0:	3b2dbc66 3b2dff82 3b2e429e 3b2e85ba     f.-;..-;.B.;...;
24017fe0:	3b2ed99d 3b2f1cb9 3b2f5fd4 3b2fb3b7     ...;../;._/;../;
24017ff0:	3b2ff6d3 3b3039ef 3b308dd2 3b30d0ee     ../;.90;..0;..0;
24018000:	3b31140a 3b3167ec 3b31ab08 3b31ee24     ..1;.g1;..1;$.1;
24018010:	3b324207 3b328523 3b32c83f 3b331c22     .B2;#.2;?.2;".3;
24018020:	3b335f3d 3b33b320 3b33f63c 3b343958     =_3; .3;<.3;X94;
24018030:	3b348d3b 3b34d057 3b35243a 3b356755     ;.4;W.4;:$5;Ug5;
24018040:	3b35bb38 3b35fe54 3b365237 3b369553     8.5;T.5;7R6;S.6;
24018050:	3b36d86f 3b372c52 3b376f6d 3b37c350     o.6;R,7;mo7;P.7;
24018060:	3b38066c 3b385a4f 3b38ae32 3b38f14e     l.8;OZ8;2.8;N.8;
24018070:	3b394531 3b39884c 3b39dc2f 3b3a1f4b     1E9;L.9;/.9;K.:;
24018080:	3b3a732e 3b3ab64a 3b3b0a2d 3b3b5e0f     .s:;J.:;-.;;.^;;
24018090:	3b3ba12b 3b3bf50e 3b3c382a 3b3c8c0d     +.;;..;;*8<;..<;
240180a0:	3b3cdff0 3b3d230c 3b3d76ee 3b3dcad1     ..<;.#=;.v=;..=;
240180b0:	3b3e0ded 3b3e61d0 3b3eb5b3 3b3ef8cf     ..>;.a>;..>;..>;
240180c0:	3b3f4cb2 3b3fa094 3b3fe3b0 3b403793     .L?;..?;..?;.7@;
240180d0:	3b408b76 3b40df59 3b412275 3b417657     v.@;Y.@;u"A;WvA;
240180e0:	3b41ca3a 3b421e1d 3b426139 3b42b51c     :.A;..B;9aB;..B;
240180f0:	3b4308ff 3b435ce2 3b439ffd 3b43f3e0     ..C;.\C;..C;..C;
24018100:	3b4447c3 3b449ba6 3b44ef89 3b45436c     .GD;..D;..D;lCE;
24018110:	3b458687 3b45da6a 3b462e4d 3b468230     ..E;j.E;M.F;0.F;
24018120:	3b46d613 3b4729f6 3b477dd8 3b47c0f4     ..F;.)G;.}G;..G;
24018130:	3b4814d7 3b4868ba 3b48bc9d 3b491080     ..H;.hH;..H;..I;
24018140:	3b496463 3b49b845 3b4a0c28 3b4a600b     cdI;E.I;(.J;.`J;
24018150:	3b4ab3ee 3b4b07d1 3b4b5bb4 3b4baf96     ..J;..K;.[K;..K;
24018160:	3b4c0379 3b4c575c 3b4cab3f 3b4cff22     y.L;\WL;?.L;".L;
24018170:	3b4d5305 3b4da6e7 3b4dfaca 3b4e4ead     .SM;..M;..M;.NN;
24018180:	3b4ea290 3b4ef673 3b4f4a56 3b4f9e38     ..N;s.N;VJO;8.O;
24018190:	3b4ff21b 3b5056c5 3b50aaa8 3b50fe8b     ..O;.VP;..P;..P;
240181a0:	3b51526e 3b51a650 3b51fa33 3b524e16     nRQ;P.Q;3.Q;.NR;
240181b0:	3b52b2c0 3b5306a3 3b535a86 3b53ae68     ..R;..S;.ZS;h.S;
240181c0:	3b54024b 3b5466f5 3b54bad8 3b550ebb     K.T;.fT;..T;..U;
240181d0:	3b55629e 3b55b680 3b561b2a 3b566f0d     .bU;..U;*.V;.oV;
240181e0:	3b56c2f0 3b5716d3 3b577b7c 3b57cf5f     ..V;..W;|{W;_.W;
240181f0:	3b582342 3b5887ec 3b58dbcf 3b592fb2     B#X;..X;..X;./Y;
24018200:	3b59945b 3b59e83e 3b5a3c21 3b5aa0cb     [.Y;>.Y;!<Z;..Z;
24018210:	3b5af4ae 3b5b4891 3b5bad3a 3b5c011d     ..Z;.H[;:.[;..\;
24018220:	3b5c65c7 3b5cb9aa 3b5d0d8d 3b5d7236     .e\;..\;..];6r];
24018230:	3b5dc619 3b5e2ac3 3b5e7ea6 3b5ee350     ..];.*^;.~^;P.^;
24018240:	3b5f3733 3b5f9bdc 3b5fefbf 3b605469     37_;.._;.._;iT`;
24018250:	3b60a84c 3b610cf6 3b6160d9 3b61c582     L.`;..a;.`a;..a;
24018260:	3b621965 3b627e0f 3b62d1f2 3b63369c     e.b;.~b;..b;.6c;
24018270:	3b638a7e 3b63ef28 3b6453d2 3b64a7b5     ~.c;(.c;.Sd;..d;
24018280:	3b650c5f 3b656042 3b65c4eb 3b662995     _.e;B`e;..e;.)f;
24018290:	3b667d78 3b66e222 3b6746cc 3b679aae     x}f;".f;.Fg;..g;
240182a0:	3b67ff58 3b686402 3b68b7e5 3b691c8f     X.g;.dh;..h;..i;
240182b0:	3b698138 3b69e5e2 3b6a39c5 3b6a9e6f     8.i;..i;.9j;o.j;
240182c0:	3b6b0319 3b6b67c3 3b6bbba5 3b6c204f     ..k;.gk;..k;O l;
240182d0:	3b6c84f9 3b6ce9a3 3b6d4e4d 3b6da22f     ..l;..l;MNm;/.m;
240182e0:	3b6e06d9 3b6e6b83 3b6ed02d 3b6f34d7     ..n;.kn;-.n;.4o;
240182f0:	3b6f9980 3b6ffe2a 3b7062d4 3b70b6b7     ..o;*.o;.bp;..p;
24018300:	3b711b61 3b71800a 3b71e4b4 3b72495e     a.q;..q;..q;^Ir;
24018310:	3b72ae08 3b7312b2 3b73775c 3b73dc05     ..r;..s;\ws;..s;
24018320:	3b7440af 3b74a559 3b750a03 3b756ead     .@t;Y.t;..u;.nu;
24018330:	3b75d356 3b763800 3b769caa 3b770154     V.u;.8v;..v;T.w;
24018340:	3b7765fe 3b77caa7 3b782f51 3b7893fb     .ew;..w;Q/x;..x;
24018350:	3b79096c 3b796e16 3b79d2bf 3b7a3769     l.y;.ny;..y;i7z;
24018360:	3b7a9c13 3b7b00bd 3b7b6567 3b7bdad7     ..z;..{;ge{;..{;
24018370:	3b7c3f81 3b7ca42b 3b7d08d5 3b7d6d7f     .?|;+.|;..};.m};
24018380:	3b7de2ef 3b7e4799 3b7eac43 3b7f10ed     ..};.G~;C.~;...;
24018390:	3b7f865d 3b7feb07 3b8027d9 3b805a2d     ]..;...;.'.;-Z.;
240183a0:	3b8094e6 3b80c73b 3b80f990 3b813448     ...;;..;...;H4.;
240183b0:	3b81669d 3b8198f2 3b81d3aa 3b8205ff     .f.;...;...;...;
240183c0:	3b8240b8 3b82730c 3b82a561 3b82e01a     .@.;.s.;a..;...;
240183d0:	3b83126f 3b834d27 3b837f7c 3b83b1d1     o..;'M.;|..;...;
240183e0:	3b83ec89 3b841ede 3b845996 3b848beb     ...;...;.Y.;...;
240183f0:	3b84c6a4 3b84f8f9 3b8533b1 3b856e69     ...;...;.3.;in.;
24018400:	3b85a0be 3b85db77 3b860dcc 3b864884     ...;w..;...;.H.;
24018410:	3b867ad9 3b86b591 3b86f04a 3b87229f     .z.;...;J..;.".;
24018420:	3b875d57 3b87980f 3b87ca64 3b88051d     W].;...;d..;...;
24018430:	3b883fd5 3b88722a 3b88ace2 3b88e79b     .?.;*r.;...;...;
24018440:	3b8919f0 3b8954a8 3b898f60 3b89ca19     ...;.T.;`..;...;
24018450:	3b89fc6e 3b8a3726 3b8a71de 3b8aac97     n..;&7.;.q.;...;
24018460:	3b8adeec 3b8b19a4 3b8b545c 3b8b8f15     ...;...;\T.;...;
24018470:	3b8bc9cd 3b8c0486 3b8c3f3e 3b8c7193     ...;...;>?.;.q.;
24018480:	3b8cac4b 3b8ce704 3b8d21bc 3b8d5c74     K..;...;.!.;t\.;
24018490:	3b8d972d 3b8dd1e5 3b8e0c9e 3b8e4756     -..;...;...;VG.;
240184a0:	3b8e820e 3b8ebcc7 3b8ef77f 3b8f3238     ...;...;...;82.;
240184b0:	3b8f6cf0 3b8fa7a8 3b8fe261 3b901d19     .l.;...;a..;...;
240184c0:	3b9057d1 3b90928a 3b90cd42 3b91105e     .W.;...;B..;^..;
240184d0:	3b914b16 3b9185cf 3b91c087 3b91fb40     .K.;...;...;@..;
240184e0:	3b9235f8 3b9270b0 3b92b3cc 3b92ee85     .5.;.p.;...;...;
240184f0:	3b93293d 3b9363f5 3b93a711 3b93e1ca     =).;.c.;...;...;
24018500:	3b941c82 3b94573a 3b949a56 3b94d50f     ...;:W.;V..;...;
24018510:	3b950fc7 3b954a80 3b958d9b 3b95c854     ...;.J.;...;T..;
24018520:	3b960b70 3b964628 3b9680e0 3b96c3fc     p..;(F.;...;...;
24018530:	3b96feb5 3b97396d 3b977c89 3b97b741     ...;m9.;.|.;A..;
24018540:	3b97fa5d 3b983516 3b987831 3b98b2ea     ]..;.5.;1x.;...;
24018550:	3b98f606 3b9930be 3b9973da 3b99ae92     ...;.0.;.s.;...;
24018560:	3b99f1ae 3b9a2c67 3b9a6f82 3b9ab29e     ...;g,.;.o.;...;
24018570:	3b9aed57 3b9b3073 3b9b6b2b 3b9bae47     W..;s0.;+k.;G..;
24018580:	3b9bf163 3b9c2c1b 3b9c6f37 3b9cb253     c..;.,.;7o.;S..;
24018590:	3b9ced0b 3b9d3027 3b9d7343 3b9dadfb     ...;'0.;Cs.;...;
240185a0:	3b9df117 3b9e3433 3b9e774f 3b9eba6b     ...;34.;Ow.;k..;
240185b0:	3b9ef523 3b9f383f 3b9f7b5b 3b9fbe77     #..;?8.;[{.;w..;
240185c0:	3ba00193 3ba03c4b 3ba07f67 3ba0c283     ...;K<.;g..;...;
240185d0:	3ba1059f 3ba148bb 3ba18bd6 3ba1cef2     ...;.H.;...;...;
240185e0:	3ba2120e 3ba2552a 3ba29846 3ba2db62     ...;*U.;F..;b..;
240185f0:	3ba31e7e 3ba36199 3ba3a4b5 3ba3e7d1     ~..;.a.;...;...;
24018600:	3ba42aed 3ba46e09 3ba4b125 3ba4f441     .*.;.n.;%..;A..;
24018610:	3ba5375d 3ba57a78 3ba5bd94 3ba60914     ]7.;xz.;...;...;
24018620:	3ba64c30 3ba68f4b 3ba6d267 3ba71583     0L.;K..;g..;...;
24018630:	3ba7589f 3ba7a41e 3ba7e73a 3ba82a56     .X.;...;:..;V*.;
24018640:	3ba86d72 3ba8b8f1 3ba8fc0d 3ba93f29     rm.;...;...;)?.;
24018650:	3ba98aa8 3ba9cdc4 3baa10e0 3baa5c5f     ...;...;...;_\.;
24018660:	3baa9f7b 3baae297 3bab2e17 3bab7132     {..;...;...;2q.;
24018670:	3babbcb2 3babffce 3bac42ea 3bac8e69     ...;...;.B.;i..;
24018680:	3bacd185 3bad1d04 3bad6020 3badab9f     ...;...; `.;...;
24018690:	3badeebb 3bae3a3b 3bae7d56 3baec8d6     ...;;:.;V}.;...;
240186a0:	3baf1455 3baf5771 3bafa2f0 3bafe60c     U..;qW.;...;...;
240186b0:	3bb0318c 3bb07d0b 3bb0c027 3bb10ba6     .1.;.}.;'..;...;
240186c0:	3bb15726 3bb19a41 3bb1e5c1 3bb23140     &W.;A..;...;@1.;
240186d0:	3bb27cbf 3bb2bfdb 3bb30b5b 3bb356da     .|.;...;[..;.V.;
240186e0:	3bb3a259 3bb3edd9 3bb430f5 3bb47c74     Y..;...;.0.;t|.;
240186f0:	3bb4c7f3 3bb51373 3bb55ef2 3bb5aa71     ...;s..;.^.;q..;
24018700:	3bb5f5f1 3bb64170 3bb68cef 3bb6d86f     ...;pA.;...;o..;
24018710:	3bb723ee 3bb76f6d 3bb7baed 3bb8066c     .#.;mo.;...;l..;
24018720:	3bb851ec 3bb89d6b 3bb8e8ea 3bb9346a     .Q.;k..;...;j4.;
24018730:	3bb97fe9 3bb9cb68 3bba16e8 3bba6267     ...;h..;...;gb.;
24018740:	3bbaade6 3bbb01c9 3bbb4d49 3bbb98c8     ...;...;IM.;...;
24018750:	3bbbe447 3bbc2fc7 3bbc83a9 3bbccf29     G..;./.;...;)..;
24018760:	3bbd1aa8 3bbd6627 3bbdba0a 3bbe058a     ...;'f.;...;...;
24018770:	3bbe5109 3bbea4ec 3bbef06b 3bbf444e     .Q.;...;k..;ND.;
24018780:	3bbf8fcd 3bbfdb4d 3bc02f30 3bc07aaf     ...;M..;0/.;.z.;
24018790:	3bc0ce92 3bc11a11 3bc16df4 3bc1b973     ...;...;.m.;s..;
240187a0:	3bc20d56 3bc258d6 3bc2acb8 3bc2f838     V..;.X.;...;8..;
240187b0:	3bc34c1b 3bc3979a 3bc3eb7d 3bc43f60     .L.;...;}..;`?.;
240187c0:	3bc48adf 3bc4dec2 3bc532a5 3bc57e24     ...;...;.2.;$~.;
240187d0:	3bc5d207 3bc625ea 3bc67169 3bc6c54c     ...;.%.;iq.;L..;
240187e0:	3bc7192f 3bc76d11 3bc7b891 3bc80c74     /..;.m.;...;t..;
240187f0:	3bc86057 3bc8b439 3bc9081c 3bc95bff     W`.;9..;...;.[.;
24018800:	3bc9afe2 3bc9fb61 3bca4f44 3bcaa327     ...;a..;DO.;'..;
24018810:	3bcaf70a 3bcb4aed 3bcb9ecf 3bcbf2b2     ...;.J.;...;...;
24018820:	3bcc4695 3bcc9a78 3bccee5b 3bcd423e     .F.;x..;[..;>B.;
24018830:	3bcd9620 3bcdf267 3bce464a 3bce9a2c      ..;g..;JF.;,..;
24018840:	3bceee0f 3bcf41f2 3bcf95d5 3bcfe9b8     ...;.A.;...;...;
24018850:	3bd045fe 3bd099e1 3bd0edc4 3bd141a7     .E.;...;...;.A.;
24018860:	3bd19ded 3bd1f1d0 3bd245b3 3bd2a1f9     ...;...;.E.;...;
24018870:	3bd2f5dc 3bd349bf 3bd3a605 3bd3f9e8     ...;.I.;...;...;
24018880:	3bd44dcb 3bd4aa11 3bd4fdf4 3bd55a3a     .M.;...;...;:Z.;
24018890:	3bd5ae1d 3bd60a63 3bd65e46 3bd6ba8c     ...;c..;F^.;...;
240188a0:	3bd70e6f 3bd76ab6 3bd7be98 3bd81adf     o..;.j.;...;...;
240188b0:	3bd87725 3bd8cb08 3bd9274e 3bd98394     %w.;...;N'.;...;
240188c0:	3bd9d777 3bda33be 3bda9004 3bdae3e7     w..;.3.;...;...;
240188d0:	3bdb402d 3bdb9c73 3bdbf8ba 3bdc5500     -@.;s..;...;.U.;
240188e0:	3bdca8e3 3bdd0529 3bdd6170 3bddbdb6     ...;)..;pa.;...;
240188f0:	3bde19fc 3bde7642 3bded289 3bdf2ecf     ...;Bv.;...;...;
24018900:	3bdf8b15 3bdfdef8 3be03b3f 3be09785     ...;...;?;.;...;
24018910:	3be0fc2f 3be15875 3be1b4bb 3be21102     /..;uX.;...;...;
24018920:	3be26d48 3be2c98e 3be325d5 3be3821b     Hm.;...;.%.;...;
24018930:	3be3de61 3be4430b 3be49f51 3be4fb98     a..;.C.;Q..;...;
24018940:	3be557de 3be5bc88 3be618ce 3be67514     .W.;...;...;.u.;
24018950:	3be6d15b 3be73605 3be7924b 3be7ee91     [..;.6.;K..;...;
24018960:	3be8533b 3be8af81 3be9142b 3be97072     ;S.;...;+..;rp.;
24018970:	3be9d51b 3bea3162 3bea960b 3beaf252     ...;b1.;...;R..;
24018980:	3beb56fc 3bebb342 3bec17ec 3bec7432     .V.;B..;...;2t.;
24018990:	3becd8dc 3bed3d86 3bed99cc 3bedfe76     ...;.=.;...;v..;
240189a0:	3bee6320 3beebf66 3bef2410 3bef88b9      c.;f..;.$.;...;
240189b0:	3befed63 3bf049aa 3bf0ae53 3bf112fd     c..;.I.;S..;...;
240189c0:	3bf177a7 3bf1dc51 3bf23897 3bf29d41     .w.;Q..;.8.;A..;
240189d0:	3bf301eb 3bf36695 3bf3cb3e 3bf42fe8     ...;.f.;>..;./.;
240189e0:	3bf49492 3bf4f93c 3bf55de6 3bf5c28f     ...;<..;.].;...;
240189f0:	3bf62739 3bf68be3 3bf6f08d 3bf75d9a     9'.;...;...;.].;
24018a00:	3bf7c244 3bf826ee 3bf88b97 3bf8f041     D..;.&.;...;A..;
24018a10:	3bf95d4f 3bf9c1f8 3bfa26a2 3bfa8b4c     O].;...;.&.;L..;
24018a20:	3bfaf859 3bfb5d03 3bfbc1ad 3bfc2eba     Y..;.].;...;...;
24018a30:	3bfc9364 3bfcf80e 3bfd651b 3bfdc9c5     d..;...;.e.;...;
24018a40:	3bfe36d2 3bfe9b7c 3bff0889 3bff6d33     .6.;|..;...;3m.;
24018a50:	3bffda40 3c001f75 3c0055fc 3c008c82     @..;u..<.U.<...<
24018a60:	3c00bed7 3c00f55e 3c012be5 3c015e39     ...<^..<.+.<9^.<
24018a70:	3c0194c0 3c01cb47 3c01fd9c 3c023422     ...<G..<...<"4.<
24018a80:	3c026aa9 3c02a130 3c02d7b6 3c030a0b     .j.<0..<...<...<
24018a90:	3c034092 3c037718 3c03ad9f 3c03e426     .@.<.w.<...<&..<
24018aa0:	3c041aac 3c045133 3c0487ba 3c04be40     ...<3Q.<...<@..<
24018ab0:	3c04f4c7 3c052b4e 3c0561d4 3c05985b     ...<N+.<.a.<[..<
24018ac0:	3c05cee1 3c060568 3c064021 3c0676a7     ...<h..<!@.<.v.<
24018ad0:	3c06ad2e 3c06e3b4 3c071a3b 3c0754f3     ...<...<;..<.T.<
24018ae0:	3c078b7a 3c07c201 3c07fcb9 3c083340     z..<...<...<@3.<
24018af0:	3c0869c6 3c08a47f 3c08db05 3c0915be     .i.<...<...<...<
24018b00:	3c094c44 3c0986fd 3c09bd84 3c09f83c     DL.<...<...<<..<
24018b10:	3c0a2ec3 3c0a697b 3c0aa002 3c0adaba     ...<{i.<...<...<
24018b20:	3c0b1572 3c0b4bf9 3c0b86b1 3c0bc16a     r..<.K.<...<j..<
24018b30:	3c0bf7f0 3c0c32a9 3c0c6d61 3c0ca81a     ...<.2.<am.<...<
24018b40:	3c0ce2d2 3c0d1959 3c0d5411 3c0d8ec9     ...<Y..<.T.<...<
24018b50:	3c0dc982 3c0e043a 3c0e3ef3 3c0e79ab     ...<:..<.>.<.y.<
24018b60:	3c0eb463 3c0eef1c 3c0f29d4 3c0f648c     c..<...<.).<.d.<
24018b70:	3c0f9f45 3c0fd9fd 3c1014b6 3c104f6e     E..<...<...<nO.<
24018b80:	3c108e58 3c10c910 3c1103c9 3c113e81     X..<...<...<.>.<
24018b90:	3c11793a 3c11b824 3c11f2dc 3c122d95     :y.<$..<...<.-.<
24018ba0:	3c126c7f 3c12a737 3c12e621 3c1320da     .l.<7..<!..<. .<
24018bb0:	3c135b92 3c139a7c 3c13d534 3c14141f     .[.<|..<4..<...<
24018bc0:	3c144ed7 3c148dc1 3c14ccab 3c150764     .N.<...<...<d..<
24018bd0:	3c15464e 3c158538 3c15bff0 3c15feda     NF.<8..<...<...<
24018be0:	3c163dc5 3c16787d 3c16b767 3c16f651     .=.<}x.<g..<Q..<
24018bf0:	3c17353b 3c177425 3c17b310 3c17edc8     ;5.<%t.<...<...<
24018c00:	3c182cb2 3c186b9c 3c18aa86 3c18e970     .,.<.k.<...<p..<
24018c10:	3c19285b 3c196745 3c19a62f 3c19e519     [(.<Eg.</..<...<
24018c20:	3c1a2835 3c1a671f 3c1aa609 3c1ae4f3     5(.<.g.<...<...<
24018c30:	3c1b23dd 3c1b66f9 3c1ba5e3 3c1be4cd     .#.<.f.<...<...<
24018c40:	3c1c23b8 3c1c66d3 3c1ca5be 3c1ce4a8     .#.<.f.<...<...<
24018c50:	3c1d27c4 3c1d66ae 3c1da9ca 3c1de8b4     .'.<.f.<...<...<
24018c60:	3c1e2bd0 3c1e6aba 3c1eadd6 3c1eecc0     .+.<.j.<...<...<
24018c70:	3c1f2fdc 3c1f72f7 3c1fb1e2 3c1ff4fd     ./.<.r.<...<...<
24018c80:	3c203819 3c207703 3c20ba1f 3c20fd3b     .8 <.w <.. <;. <
24018c90:	3c214057 3c218373 3c21c25d 3c220579     W@!<s.!<].!<y."<
24018ca0:	3c224895 3c228bb1 3c22cecd 3c2311e8     .H"<.."<.."<..#<
24018cb0:	3c235504 3c239820 3c23db3c 3c241e58     .U#< .#<<.#<X.$<
24018cc0:	3c2465a5 3c24a8c1 3c24ebdd 3c252ef9     .e$<..$<..$<..%<
24018cd0:	3c257215 3c25b963 3c25fc7e 3c263f9a     .r%<c.%<~.%<.?&<
24018ce0:	3c2682b6 3c26ca04 3c270d20 3c27546d     ..&<..&< .'<mT'<
24018cf0:	3c279789 3c27daa5 3c2821f3 3c28650e     ..'<..'<.!(<.e(<
24018d00:	3c28ac5c 3c28f3aa 3c2936c6 3c297e13     \.(<..(<.6)<.~)<
24018d10:	3c29c12f 3c2a087d 3c2a4fca 3c2a92e6     /.)<}.*<.O*<..*<
24018d20:	3c2ada34 3c2b2181 3c2b68cf 3c2bb01d     4.*<.!+<.h+<..+<
24018d30:	3c2bf76a 3c2c3a86 3c2c81d4 3c2cc921     j.+<.:,<..,<!.,<
24018d40:	3c2d106f 3c2d57bc 3c2d9f0a 3c2de658     o.-<.W-<..-<X.-<
24018d50:	3c2e2da5 3c2e74f3 3c2ec072 3c2f07c0     .-.<.t.<r..<../<
24018d60:	3c2f4f0e 3c2f965b 3c2fdda9 3c302928     .O/<[./<../<()0<
24018d70:	3c307076 3c30b7c3 3c310343 3c314a90     vp0<..0<C.1<.J1<
24018d80:	3c3191de 3c31dd5d 3c3224ab 3c32702a     ..1<].1<.$2<*p2<
24018d90:	3c32b778 3c3302f7 3c334e77 3c3395c4     x.2<..3<wN3<..3<
24018da0:	3c33e143 3c342891 3c347410 3c34bf90     C.3<.(4<.t4<..4<
24018db0:	3c350b0f 3c35525d 3c359ddc 3c35e95b     ..5<]R5<..5<[.5<
24018dc0:	3c3634db 3c36805a 3c36cbda 3c371759     .46<Z.6<..6<Y.7<
24018dd0:	3c3762d8 3c37ae58 3c37f9d7 3c384556     .b7<X.7<..7<VE8<
24018de0:	3c3890d6 3c38dc55 3c3927d4 3c397354     ..8<U.8<.'9<Ts9<
24018df0:	3c39c305 3c3a0e84 3c3a5a04 3c3aa583     ..9<..:<.Z:<..:<
24018e00:	3c3af534 3c3b40b3 3c3b8c33 3c3bdbe4     4.:<.@;<3.;<..;<
24018e10:	3c3c2763 3c3c7714 3c3cc294 3c3d1245     c'<<.w<<..<<E.=<
24018e20:	3c3d5dc4 3c3dad75 3c3dfd26 3c3e48a6     .]=<u.=<&.=<.H><
24018e30:	3c3e9857 3c3ee808 3c3f3387 3c3f8338     W.><..><.3?<8.?<
24018e40:	3c3fd2e9 3c40229a 3c40724b 3c40c1fd     ..?<."@<Kr@<..@<
24018e50:	3c4111ae 3c41615f 3c41b110 3c4200c1     ..A<_aA<..A<..B<
24018e60:	3c425072 3c42a023 3c42efd4 3c433f85     rPB<#.B<..B<.?C<
24018e70:	3c438f36 3c43dee8 3c4432ca 3c44827b     6.C<..C<.2D<{.D<
24018e80:	3c44d22d 3c4521de 3c4575c0 3c45c572     -.D<.!E<.uE<r.E<
24018e90:	3c461954 3c466905 3c46bce8 3c470c99     T.F<.iF<..F<..G<
24018ea0:	3c47607c 3c47b02d 3c480410 3c4857f3     |`G<-.G<..H<.WH<
24018eb0:	3c48a7a4 3c48fb87 3c494f6a 3c499f1b     ..H<..H<jOI<..I<
24018ec0:	3c49f2fe 3c4a46e1 3c4a9ac3 3c4aeea6     ..I<.FJ<..J<..J<
24018ed0:	3c4b4289 3c4b966c 3c4bea4f 3c4c3e32     .BK<l.K<O.K<2>L<
24018ee0:	3c4c9214 3c4ce5f7 3c4d39da 3c4d8dbd     ..L<..L<.9M<..M<
24018ef0:	3c4de1a0 3c4e39b4 3c4e8d97 3c4ee17a     ..M<.9N<..N<z.N<
24018f00:	3c4f355d 3c4f8d71 3c4fe154 3c503969     ]5O<q.O<T.O<i9P<
24018f10:	3c508d4c 3c50e12f 3c513943 3c519158     L.P</.P<C9Q<X.Q<
24018f20:	3c51e53b 3c523d4f 3c529132 3c52e947     ;.Q<O=R<2.R<G.R<
24018f30:	3c53415b 3c539970 3c53ed52 3c544567     [AS<p.S<R.S<gET<
24018f40:	3c549d7c 3c54f590 3c554da5 3c55a5b9     |.T<..T<.MU<..U<
24018f50:	3c55fdce 3c5655e3 3c56adf7 3c57060c     ..U<.UV<..V<..W<
24018f60:	3c575e20 3c57b635 3c580e49 3c586a90      ^W<5.W<I.X<.jX<
24018f70:	3c58c2a4 3c591ab9 3c5972cd 3c59cf14     ..X<..Y<.rY<..Y<
24018f80:	3c5a2728 3c5a836f 3c5adb83 3c5b37ca     ('Z<o.Z<..Z<.7[<
24018f90:	3c5b8fde 3c5bec25 3c5c4439 3c5ca07f     ..[<%.[<9D\<..\<
24018fa0:	3c5cfcc6 3c5d54da 3c5db121 3c5e0d67     ..\<.T]<!.]<g.^<
24018fb0:	3c5e69ad 3c5ec1c2 3c5f1e08 3c5f7a4e     .i^<..^<.._<Nz_<
24018fc0:	3c5fd695 3c6032db 3c608f21 3c60eb68     .._<.2`<!.`<h.`<
24018fd0:	3c6147ae 3c61a3f4 3c62046c 3c6260b3     .Ga<..a<l.b<.`b<
24018fe0:	3c62bcf9 3c63193f 3c6379b7 3c63d5fe     ..b<?.c<.yc<..c<
24018ff0:	3c643244 3c6492bc 3c64ef03 3c654f7b     D2d<..d<..d<{Oe<
24019000:	3c65abc1 3c660c39 3c66687f 3c66c8f7     ..e<9.f<.hf<..f<
24019010:	3c67296f 3c6785b6 3c67e62e 3c6846a6     o)g<..g<..g<.Fh<
24019020:	3c68a71e 3c690364 3c6963dc 3c69c454     ..h<d.i<.ci<T.i<
24019030:	3c6a24cc 3c6a8544 3c6ae5bd 3c6b4635     .$j<D.j<..j<5Fk<
24019040:	3c6ba6ad 3c6c0b56 3c6c6bcf 3c6ccc47     ..k<V.l<.kl<G.l<
24019050:	3c6d2cbf 3c6d9168 3c6df1e1 3c6e5259     .,m<h.m<..m<YRn<
24019060:	3c6eb702 3c6f177a 3c6f7c24 3c6fdc9c     ..n<z.o<$|o<..o<
24019070:	3c704146 3c70a1be 3c710668 3c716b12     FAp<..p<h.q<.kq<
24019080:	3c71cb8a 3c723034 3c7294dd 3c72f987     ..q<40r<..r<..r<
24019090:	3c735e31 3c73bea9 3c742353 3c7487fd     1^s<..s<S#t<..t<
240190a0:	3c74eca7 3c755150 3c75b5fa 3c761ed6     ..t<PQu<..u<..v<
240190b0:	3c76837f 3c76e829 3c774cd3 3c77b5af     ..v<).v<.Lw<..w<
240190c0:	3c781a58 3c787f02 3c78e7de 3c794c88     X.x<..x<..x<.Ly<
240190d0:	3c79b563 3c7a1a0d 3c7a82e8 3c7ae792     c.y<..z<..z<..z<
240190e0:	3c7b506e 3c7bb949 3c7c1df3 3c7c86cf     nP{<I.{<..|<..|<
240190f0:	3c7cefaa 3c7d5886 3c7dc161 3c7e2a3d     ..|<.X}<a.}<=*~<
24019100:	3c7e9318 3c7efbf4 3c7f64d0 3c7fcdab     ..~<..~<.d.<...<
24019110:	3c801b43 3c804fb1 3c80841f 3c80b88d     C..<.O.<...<...<
24019120:	3c80ef13 3c812381 3c8157ef 3c818e75     ...<.#.<.W.<u..<
24019130:	3c81c2e3 3c81f96a 3c822dd8 3c82645e     ...<j..<.-.<^d.<
24019140:	3c8298cc 3c82cf53 3c8305d9 3c833c60     ...<S..<...<`<.<
24019150:	3c8370ce 3c83a754 3c83dddb 3c841462     .p.<T..<...<b..<
24019160:	3c844ae8 3c84816f 3c84b7f6 3c84ee7c     .J.<o..<...<|..<
24019170:	3c852503 3c855b8a 3c859210 3c85cab0     .%.<.[.<...<...<
24019180:	3c860136 3c8637bd 3c86705d 3c86a6e3     6..<.7.<]p.<...<
24019190:	3c86dd6a 3c871609 3c874c90 3c87852f     j..<...<.L.</..<
240191a0:	3c87bdcf 3c87f456 3c882cf5 3c886595     ...<V..<.,.<.e.<
240191b0:	3c889e34 3c88d4bb 3c890d5a 3c8945fa     4..<...<Z..<.E.<
240191c0:	3c897e99 3c89b739 3c89efd8 3c8a2878     .~.<9..<...<x(.<
240191d0:	3c8a6117 3c8a9bd0 3c8ad46f 3c8b0d0f     .a.<...<o..<...<
240191e0:	3c8b45ae 3c8b8067 3c8bb906 3c8bf3bf     .E.<g..<...<...<
240191f0:	3c8c2c5e 3c8c6717 3c8c9fb6 3c8cda6e     ^,.<.g.<...<n..<
24019200:	3c8d1527 3c8d4dc6 3c8d887f 3c8dc337     '..<.M.<...<7..<
24019210:	3c8dfdf0 3c8e38a8 3c8e7360 3c8eae19     ...<.8.<`s.<...<
24019220:	3c8ee8d1 3c8f2389 3c8f5e42 3c8f98fa     ...<.#.<B^.<...<
24019230:	3c8fd3b3 3c900e6b 3c904b3c 3c9085f5     ...<k..<<K.<...<
24019240:	3c90c0ad 3c90fd7e 3c913837 3c917508     ...<~..<78.<.u.<
24019250:	3c91afc0 3c91ec92 3c922963 3c92641b     ...<...<c).<.d.<
24019260:	3c92a0ec 3c92ddbe 3c931a8f 3c935760     ...<...<...<`W.<
24019270:	3c939431 3c93d103 3c940dd4 3c944aa5     1..<...<...<.J.<
24019280:	3c948777 3c94c448 3c950119 3c954003     w..<H..<...<.@.<
24019290:	3c957cd4 3c95b9a6 3c95f890 3c963561     .|.<...<...<a5.<
240192a0:	3c96744b 3c96b11c 3c96f007 3c972cd8     Kt.<...<...<.,.<
240192b0:	3c976bc2 3c97aaac 3c97e996 3c982880     .k.<...<...<.(.<
240192c0:	3c986552 3c98a43c 3c98e326 3c992210     Re.<<..<&..<.".<
240192d0:	3c996313 3c99a1fd 3c99e0e7 3c9a1fd1     .c.<...<...<...<
240192e0:	3c9a5ebb 3c9a9fbe 3c9adea9 3c9b1d93     .^.<...<...<...<
240192f0:	3c9b5e96 3c9b9d80 3c9bde83 3c9c1f86     .^.<...<...<...<
24019300:	3c9c5e70 3c9c9f73 3c9ce076 3c9d2179     p^.<s..<v..<y!.<
24019310:	3c9d6063 3c9da166 3c9de269 3c9e236c     c`.<f..<i..<l#.<
24019320:	3c9e646f 3c9ea78b 3c9ee88e 3c9f2991     od.<...<...<.).<
24019330:	3c9f6a94 3c9fadb0 3c9feeb3 3ca02fb6     .j.<...<...<./.<
24019340:	3ca072d2 3ca0b3d5 3ca0f6f1 3ca13a0c     .r.<...<...<.:.<
24019350:	3ca17b0f 3ca1be2b 3ca20147 3ca24463     .{.<+..<G..<cD.<
24019360:	3ca28566 3ca2c882 3ca30b9e 3ca34eba     f..<...<...<.N.<
24019370:	3ca391d5 3ca3d70a 3ca41a26 3ca45d42     ...<...<&..<B].<
24019380:	3ca4a05e 3ca4e593 3ca528ae 3ca56bca     ^..<...<.(.<.k.<
24019390:	3ca5b0ff 3ca5f41b 3ca63950 3ca67e84     ...<...<P9.<.~.<
240193a0:	3ca6c1a0 3ca706d5 3ca74c0a 3ca7913f     ...<...<.L.<?..<
240193b0:	3ca7d673 3ca81ba8 3ca860dd 3ca8a611     s..<...<.`.<...<
240193c0:	3ca8eb46 3ca9307b 3ca975b0 3ca9bcfd     F..<{0.<.u.<...<
240193d0:	3caa0232 3caa4767 3caa8eb4 3caad3e9     2..<gG.<...<...<
240193e0:	3cab1b37 3cab6284 3caba7b9 3cabef07     7..<.b.<...<...<
240193f0:	3cac3654 3cac7da2 3cacc4f0 3cad0a24     T6.<.}.<...<$..<
24019400:	3cad5172 3cad9ad8 3cade226 3cae2974     rQ.<...<&..<t).<
24019410:	3cae70c1 3caeb80f 3caf0175 3caf48c3     .p.<...<u..<.H.<
24019420:	3caf9011 3cafd977 3cb020c5 3cb06a2b     ...<w..<. .<+j.<
24019430:	3cb0b392 3cb0fadf 3cb14446 3cb18dac     ...<...<FD.<...<
24019440:	3cb1d713 3cb22079 3cb269e0 3cb2b346     ...<y .<.i.<F..<
24019450:	3cb2fcad 3cb34613 3cb38f7a 3cb3daf9     ...<.F.<z..<...<
24019460:	3cb4245f 3cb46dc6 3cb4b945 3cb502ac     _$.<.m.<E..<...<
24019470:	3cb54e2b 3cb599aa 3cb5e311 3cb62e90     +N.<...<...<...<
24019480:	3cb67a10 3cb6c58f 3cb7110e 3cb75a75     .z.<...<...<uZ.<
24019490:	3cb7a5f4 3cb7f38c 3cb83f0c 3cb88a8b     ...<...<.?.<...<
240194a0:	3cb8d60a 3cb9218a 3cb96f22 3cb9baa1     ...<.!.<"o.<...<
240194b0:	3cba083a 3cba53b9 3cbaa151 3cbaeee9     :..<.S.<Q..<...<
240194c0:	3cbb3a69 3cbb8801 3cbbd599 3cbc2331     i:.<...<...<1#.<
240194d0:	3cbc70ca 3cbcbe62 3cbd0bfa 3cbd5992     .p.<b..<...<.Y.<
240194e0:	3cbda72a 3cbdf6dc 3cbe4474 3cbe920c     *..<...<tD.<...<
240194f0:	3cbee1bd 3cbf2f55 3cbf7f06 3cbfcc9f     ...<U/.<...<...<
24019500:	3cc01c50 3cc06c01 3cc0bbb2 3cc1094a     P..<.l.<...<J..<
24019510:	3cc158fb 3cc1a8ac 3cc1f85d 3cc24a27     .X.<...<]..<'J.<
24019520:	3cc299d9 3cc2e98a 3cc3393b 3cc38b05     ...<...<;9.<...<
24019530:	3cc3dab6 3cc42c80 3cc47c31 3cc4cdfb     ...<.,.<1|.<...<
24019540:	3cc51dac 3cc56f76 3cc5c140 3cc6130a     ...<vo.<@..<...<
24019550:	3cc664d4 3cc6b69e 3cc70868 3cc75a32     .d.<...<h..<2Z.<
24019560:	3cc7abfc 3cc7fdc6 3cc84f90 3cc8a372     ...<...<.O.<r..<
24019570:	3cc8f53c 3cc9491f 3cc99ae9 3cc9eecc     <..<.I.<...<...<
24019580:	3cca42af 3cca9479 3ccae85c 3ccb3c3e     .B.<y..<\..<><.<
24019590:	3ccb9021 3ccbe404 3ccc37e7 3ccc8bca     !..<...<.7.<...<
240195a0:	3cccdfad 3ccd35a8 3ccd898b 3ccddd6e     ...<.5.<...<n..<
240195b0:	3cce336a 3cce874d 3ccedd48 3ccf312b     j3.<M..<H..<+1.<
240195c0:	3ccf8727 3ccfdd23 3cd0331e 3cd0891a     '..<#..<.3.<...<
240195d0:	3cd0df16 3cd13511 3cd18b0d 3cd1e109     ...<.5.<...<...<
240195e0:	3cd23704 3cd28f19 3cd2e515 3cd33b10     .7.<...<...<.;.<
240195f0:	3cd39325 3cd3e921 3cd44135 3cd4994a     %..<!..<5A.<J..<
24019600:	3cd4f15e 3cd5475a 3cd59f6f 3cd5f783     ^..<ZG.<o..<...<
24019610:	3cd64f98 3cd6a7ad 3cd701da 3cd759ef     .O.<...<...<.Y.<
24019620:	3cd7b203 3cd80c31 3cd86445 3cd8bc5a     ...<1..<Ed.<Z..<
24019630:	3cd91687 3cd970b5 3cd9c8c9 3cda22f7     ...<.p.<...<.".<
24019640:	3cda7d24 3cdad752 3cdb317f 3cdb8bac     $}.<R..<.1.<...<
24019650:	3cdbe5da 3cdc4007 3cdc9c4e 3cdcf67b     ...<.@.<N..<{..<
24019660:	3cdd52c1 3cddacef 3cde0935 3cde6363     .R.<...<5..<cc.<
24019670:	3cdebfa9 3cdf1bef 3cdf7836 3cdfd263     ...<...<6x.<c..<
24019680:	3ce02ea9 3ce08af0 3ce0e94f 3ce14595     ...<...<O..<.E.<
24019690:	3ce1a1dc 3ce1fe22 3ce25c81 3ce2b8c7     ...<"..<.\.<...<
240196a0:	3ce31727 3ce3736d 3ce3d1cc 3ce4302b     '..<ms.<...<+0.<
240196b0:	3ce48e8a 3ce4ecea 3ce54b49 3ce5a9a8     ...<...<IK.<...<
240196c0:	3ce60807 3ce66666 3ce6c4c6 3ce7253e     ...<ff.<...<>%.<
240196d0:	3ce7839d 3ce7e415 3ce84274 3ce8a2ec     ...<...<tB.<...<
240196e0:	3ce9014b 3ce961c3 3ce9c23b 3cea22b4     K..<.a.<;..<.".<
240196f0:	3cea832c 3ceae3a4 3ceb441c 3ceba6ad     ,..<...<.D.<...<
24019700:	3cec0725 3cec679d 3cecca2e 3ced2aa6     %..<.g.<...<.*.<
24019710:	3ced8d37 3cedefc8 3cee5040 3ceeb2d1     7..<...<@P.<...<
24019720:	3cef1562 3cef77f2 3cefda83 3cf03d14     b..<.w.<...<.=.<
24019730:	3cf09fa5 3cf1044f 3cf166e0 3cf1cb8a     ...<O..<.f.<...<
24019740:	3cf22e1b 3cf292c5 3cf2f556 3cf359ff     ...<...<V..<.Y.<
24019750:	3cf3bea9 3cf42353 3cf487fd 3cf4eca7     ...<S#.<...<...<
24019760:	3cf55150 3cf5b5fa 3cf61aa4 3cf68167     PQ.<...<...<g..<
24019770:	3cf6e610 3cf74cd3 3cf7b17d 3cf81840     ...<.L.<}..<@..<
24019780:	3cf87f02 3cf8e5c5 3cf94c88 3cf9b34a     ...<...<.L.<J..<
24019790:	3cfa1a0d 3cfa80d0 3cfae792 3cfb4e55     ...<...<...<UN.<
240197a0:	3cfbb731 3cfc1df3 3cfc86cf 3cfced91     1..<...<...<...<
240197b0:	3cfd566d 3cfdbf48 3cfe2824 3cfe9100     mV.<H..<$(.<...<
240197c0:	3cfef9db 3cff62b7 3cffcb92 3d001a37     ...<.b.<...<7..=
240197d0:	3d004fb1 3d00841f 3d00b999 3d00ee07     .O.=...=...=...=
240197e0:	3d012381 3d0158fb 3d018d69 3d01c2e3     .#.=.X.=i..=...=
240197f0:	3d01f85d 3d022dd8 3d02645e 3d0299d9     ]..=.-.=^d.=...=
24019800:	3d02cf53 3d0305d9 3d033b54 3d0371da     S..=...=T;.=.q.=
24019810:	3d03a754 3d03dddb 3d041462 3d044ae8     T..=...=b..=.J.=
24019820:	3d04816f 3d04b7f6 3d04ee7c 3d052503     o..=...=|..=.%.=
24019830:	3d055c96 3d05931d 3d05cab0 3d060136     .\.=...=...=6..=
24019840:	3d0638c9 3d06705d 3d06a7f0 3d06de76     .8.=]p.=...=v..=
24019850:	3d071609 3d074ea9 3d07863c 3d07bdcf     ...=.N.=<..=...=
24019860:	3d07f562 3d082e02 3d086595 3d089e34     b..=...=.e.=4..=
24019870:	3d08d6d4 3d090e67 3d094706 3d097fa6     ...=g..=.G.=...=
24019880:	3d09b845 3d09f0e5 3d0a2a91 3d0a6330     E..=...=.*.=0c.=
24019890:	3d0a9bd0 3d0ad57c 3d0b0f28 3d0b47c7     ...=|..=(..=.G.=
240198a0:	3d0b8173 3d0bbb1f 3d0bf4cb 3d0c2e77     s..=...=...=w..=
240198b0:	3d0c6823 3d0ca1cf 3d0cdb7b 3d0d1633     #h.=...={..=3..=
240198c0:	3d0d4fdf 3d0d8a98 3d0dc444 3d0dfefc     .O.=...=D..=...=
240198d0:	3d0e39b4 3d0e746d 3d0eaf25 3d0ee9dd     .9.=mt.=%..=...=
240198e0:	3d0f2496 3d0f5f4e 3d0f9b13 3d0fd5cb     .$.=N_.=...=...=
240198f0:	3d101190 3d104c49 3d10880e 3d10c3d2     ...=IL.=...=...=
24019900:	3d10ff97 3d113b5c 3d117721 3d11b2e6     ...=\;.=!w.=...=
24019910:	3d11eeaa 3d122b7c 3d126741 3d12a412     ...=|+.=Ag.=...=
24019920:	3d12dfd7 3d131ca8 3d135979 3d13964a     ...=...=yY.=J..=
24019930:	3d13d31c 3d140fed 3d144cbe 3d148a9c     ...=...=.L.=...=
24019940:	3d14c76d 3d15043e 3d15421c 3d157ffa     m..=>..=.B.=...=
24019950:	3d15bdd7 3d15faa9 3d163886 3d167664     ...=...=.8.=dv.=
24019960:	3d16b54e 3d16f32c 3d17310a 3d176ff4     N..=,..=.1.=.o.=
24019970:	3d17add1 3d17ecbb 3d182ba6 3d186983     ...=...=.+.=.i.=
24019980:	3d18a86d 3d18e758 3d192642 3d196638     m..=X..=B&.=8f.=
24019990:	3d19a522 3d19e40d 3d1a2403 3d1a62ed     "..=...=.$.=.b.=
240199a0:	3d1aa2e4 3d1ae2da 3d1b22d1 3d1b62c7     ...=...=.".=.b.=
240199b0:	3d1ba2be 3d1be2b5 3d1c22ab 3d1c63ae     ...=...=.".=.c.=
240199c0:	3d1ca3a5 3d1ce4a8 3d1d25ab 3d1d65a1     ...=...=.%.=.e.=
240199d0:	3d1da6a4 3d1de7a7 3d1e28aa 3d1e6aba     ...=...=.(.=.j.=
240199e0:	3d1eabbd 3d1eecc0 3d1f2ecf 3d1f6fd2     ...=...=...=.o.=
240199f0:	3d1fb1e2 3d1ff3f1 3d203600 3d207810     ...=...=.6 =.x =
24019a00:	3d20ba1f 3d20fc2f 3d213e3e 3d21815a     .. =/. =>>!=Z.!=
24019a10:	3d21c369 3d220685 3d2249a1 3d228bb1     i.!=.."=.I"=.."=
24019a20:	3d22cecd 3d2311e8 3d235504 3d23992d     .."=..#=.U#=-.#=
24019a30:	3d23dc48 3d241f64 3d24638d 3d24a7b5     H.#=d.$=.c$=..$=
24019a40:	3d24ead1 3d252ef9 3d257321 3d25b74a     ..$=..%=!s%=J.%=
24019a50:	3d25fb72 3d2640a7 3d2684cf 3d26c8f7     r.%=.@&=..&=..&=
24019a60:	3d270e2c 3d275361 3d279896 3d27dcbe     ,.'=aS'=..'=..'=
24019a70:	3d2821f3 3d286834 3d28ad69 3d28f29d     .!(=4h(=i.(=..(=
24019a80:	3d2938de 3d297e13 3d29c454 3d2a0a96     .8)=.~)=T.)=..*=
24019a90:	3d2a4fca 3d2a960b 3d2adc4d 3d2b239a     .O*=..*=M.*=.#+=
24019aa0:	3d2b69db 3d2bb01d 3d2bf76a 3d2c3eb8     .i+=..+=j.+=.>,=
24019ab0:	3d2c84f9 3d2ccc47 3d2d1394 3d2d5ae2     ..,=G.,=..-=.Z-=
24019ac0:	3d2da22f 3d2dea89 3d2e31d7 3d2e7925     /.-=..-=.1.=%y.=
24019ad0:	3d2ec17f 3d2f09d9 3d2f5233 3d2f9a8d     ...=../=3R/=../=
24019ae0:	3d2fe2e7 3d302b41 3d30739b 3d30bd01     ../=A+0=.s0=..0=
24019af0:	3d31055c 3d314ec2 3d31971c 3d31e083     \.1=.N1=..1=..1=
24019b00:	3d3229e9 3d327350 3d32bcb6 3d330729     .)2=Ps2=..2=).3=
24019b10:	3d33508f 3d339b02 3d33e469 3d342edc     .P3=..3=i.3=..4=
24019b20:	3d34794f 3d34c3c2 3d350e34 3d3558a7     Oy4=..4=4.5=.X5=
24019b30:	3d35a427 3d35ee9a 3d363a19 3d36848c     '.5=..5=.:6=..6=
24019b40:	3d36d00b 3d371b8b 3d37670a 3d37b289     ..6=..7=.g7=..7=
24019b50:	3d37fe09 3d384a94 3d389614 3d38e2a0     ..7=.J8=..8=..8=
24019b60:	3d392f2b 3d397aab 3d39c737 3d3a13c2     +/9=.z9=7.9=..:=
24019b70:	3d3a615b 3d3aade6 3d3afa72 3d3b480a     [a:=..:=r.:=.H;=
24019b80:	3d3b95a3 3d3be22e 3d3c2fc7 3d3c7d5f     ..;=..;=./<=_}<=
24019b90:	3d3ccaf7 3d3d199c 3d3d6734 3d3db5d9     ..<=..==4g==..==
24019ba0:	3d3e0371 3d3e5215 3d3ea0ba 3d3eef5f     q.>=.R>=..>=_.>=
24019bb0:	3d3f3e03 3d3f8ca8 3d3fdc59 3d402afe     .>?=..?=Y.?=.*@=
24019bc0:	3d407aaf 3d40c954 3d411905 3d4168b6     .z@=T.@=..A=.hA=
24019bd0:	3d41b867 3d420818 3d4258d6 3d42a887     g.A=..B=.XB=..B=
24019be0:	3d42f944 3d4348f5 3d4399b3 3d43ea70     D.B=.HC=..C=p.C=
24019bf0:	3d443b2e 3d448cf8 3d44ddb5 3d452e73     .;D=..D=..D=s.E=
24019c00:	3d45803d 3d45d207 3d4622c4 3d46748e     =.E=..E=."F=.tF=
24019c10:	3d46c658 3d47192f 3d476af9 3d47bcc3     X.F=/.G=.jG=..G=
24019c20:	3d480f99 3d48626f 3d48b546 3d49081c     ..H=obH=F.H=..I=
24019c30:	3d495af3 3d49adc9 3d4a009f 3d4a5482     .ZI=..I=..J=.TJ=
24019c40:	3d4aa759 3d4afb3b 3d4b4f1e 3d4ba301     Y.J=;.J=.OK=..K=
24019c50:	3d4bf6e4 3d4c4ac7 3d4c9fb6 3d4cf399     ..K=.JL=..L=..L=
24019c60:	3d4d4888 3d4d9d77 3d4df15a 3d4e464a     .HM=w.M=Z.M=JFN=
24019c70:	3d4e9c45 3d4ef135 3d4f4624 3d4f9c20     E.N=5.N=$FO= .O=
24019c80:	3d4ff21b 3d50470b 3d509d06 3d50f302     ..O=.GP=..P=..P=
24019c90:	3d514a0a 3d51a006 3d51f70e 3d524d0a     .JQ=..Q=..Q=.MR=
24019ca0:	3d52a412 3d52fb1a 3d535222 3d53a92a     ..R=..R="RS=*.S=
24019cb0:	3d540032 3d545847 3d54af4f 3d550764     2.T=GXT=O.T=d.U=
24019cc0:	3d555f78 3d55b78d 3d560fa1 3d5667b6     x_U=..U=..V=.gV=
24019cd0:	3d56bfcb 3d5718ec 3d57720d 3d57ca21     ..V=..W=.rW=!.W=
24019ce0:	3d582342 3d587c63 3d58d691 3d592fb2     B#X=c|X=..X=./Y=
24019cf0:	3d5988d3 3d59e300 3d5a3d2e 3d5a975b     ..Y=..Y=.=Z=[.Z=
24019d00:	3d5af188 3d5b4bb6 3d5ba5e3 3d5c011d     ..Z=.K[=..[=..\=
24019d10:	3d5c5b4b 3d5cb685 3d5d11be 3d5d6cf8     K[\=..\=..]=.l]=
24019d20:	3d5dc832 3d5e236c 3d5e7fb2 3d5edaec     2.]=l#^=..^=..^=
24019d30:	3d5f3733 3d5f9379 3d5fefbf 3d604c06     37_=y._=.._=.L`=
24019d40:	3d60a84c 3d61059f 3d6161e5 3d61bf38     L.`=..a=.aa=8.a=
24019d50:	3d621c8a 3d6279dd 3d62d730 3d633483     ..b=.yb=0.b=.4c=
24019d60:	3d6392e2 3d63f035 3d644e94 3d64acf3     ..c=5.c=.Nd=..d=
24019d70:	3d650b52 3d6569b1 3d65c811 3d66277c     R.e=.ie=..e=|'f=
24019d80:	3d6685db 3d66e547 3d6744b3 3d67a41e     ..f=G.f=.Dg=..g=
24019d90:	3d68038a 3d6862f6 3d68c36e 3d6923e6     ..h=.bh=n.h=.#i=
24019da0:	3d698351 3d69e3c9 3d6a4441 3d6aa5c6     Q.i=..i=ADj=..j=
24019db0:	3d6b063e 3d6b66b6 3d6bc83b 3d6c29bf     >.k=.fk=;.k=.)l=
24019dc0:	3d6c8b44 3d6cecc8 3d6d4e4d 3d6db0de     D.l=..l=MNm=..m=
24019dd0:	3d6e1262 3d6e74f3 3d6ed784 3d6f3a15     b.n=.tn=..n=.:o=
24019de0:	3d6f9ca6 3d6fff37 3d7062d4 3d70c671     ..o=7.o=.bp=q.p=
24019df0:	3d712902 3d718ca0 3d71f03d 3d7254e7     .)q=..q==.q=.Tr=
24019e00:	3d72b884 3d731d2e 3d7380cb 3d73e575     ..r=..s=..s=u.s=
24019e10:	3d744a1f 3d74aec9 3d75147f 3d757929     .Jt=..t=..u=)yu=
24019e20:	3d75dedf 3d764495 3d76aa4c 3d771002     ..u=.Dv=L.v=..w=
24019e30:	3d7775b8 3d77dc7b 3d784231 3d78a8f4     .uw={.w=1Bx=..x=
24019e40:	3d790fb6 3d797679 3d79dd3c 3d7a450b     ..y=yvy=<.y=.Ez=
24019e50:	3d7aabcd 3d7b139d 3d7b7b6c 3d7be33b     ..z=..{=l{{=;.{=
24019e60:	3d7c4b0a 3d7cb2d9 3d7d1bb5 3d7d8490     .K|=..|=..}=..}=
24019e70:	3d7dec5f 3d7e553b 3d7ebe16 3d7f27fe     _.}=;U~=..~=.'.=
24019e80:	3d7f90da 3d7ffac2 3d803255 3d806749     ...=...=U2.=Ig.=
24019e90:	3d809c3d 3d80d131 3d8106ab 3d813b9f     =..=1..=...=.;.=
24019ea0:	3d817119 3d81a693 3d81dc0e 3d821188     .q.=...=...=...=
24019eb0:	3d824788 3d827d89 3d82b303 3d82e903     .G.=.}.=...=...=
24019ec0:	3d831f04 3d83558a 3d838b8b 3d83c212     ...=.U.=...=...=
24019ed0:	3d83f898 3d842f1f 3d8465a5 3d849c2c     ...=./.=.e.=,..=
24019ee0:	3d84d2b3 3d8509c0 3d8540cc 3d8577d9     ...=...=.@.=.w.=
24019ef0:	3d85aee6 3d85e5f3 3d861d86 3d865519     ...=...=...=.U.=
24019f00:	3d868c26 3d86c3b9 3d86fbd2 3d873366     &..=...=...=f3.=
24019f10:	3d876af9 3d87a312 3d87db2b 3d881345     .j.=...=+..=E..=
24019f20:	3d884b5e 3d8883fd 3d88bc17 3d88f4b6     ^K.=...=...=...=
24019f30:	3d892d56 3d8965f5 3d899e95 3d89d7ba     V-.=.e.=...=...=
24019f40:	3d8a105a 3d8a4980 3d8a82a5 3d8abbcb     Z..=.I.=...=...=
24019f50:	3d8af577 3d8b2e9d 3d8b6849 3d8ba1f5     w..=...=Ih.=...=
24019f60:	3d8bdba1 3d8c154d 3d8c4ef9 3d8c892b     ...=M..=.N.=+..=
24019f70:	3d8cc35d 3d8cfd09 3d8d37c1 3d8d71f3     ]..=...=.7.=.q.=
24019f80:	3d8dac26 3d8de6de 3d8e2196 3d8e5c4f     &..=...=.!.=O\.=
24019f90:	3d8e9707 3d8ed1bf 3d8f0cfe 3d8f483d     ...=...=...==H.=
24019fa0:	3d8f837b 3d8fbeba 3d8ff9f8 3d9035bd     {..=...=...=.5.=
24019fb0:	3d9070fc 3d90acc1 3d90e886 3d91244a     .p.=...=...=J$.=
24019fc0:	3d916095 3d919c5a 3d91d8a5 3d9214f0     .`.=Z..=...=...=
24019fd0:	3d92513b 3d928e0d 3d92ca58 3d930729     ;Q.=...=X..=)..=
24019fe0:	3d9343fa 3d9380cb 3d93bd9d 3d93faf4     .C.=...=...=...=
24019ff0:	3d9437c5 3d94751d 3d94b274 3d94efcc     .7.=.u.=t..=...=
2401a000:	3d952daa 3d956b01 3d95a8df 3d95e6bc     .-.=.k.=...=...=
2401a010:	3d96249a 3d9662fe 3d96a0dc 3d96df40     .$.=.b.=...=@..=
2401a020:	3d971da3 3d975c07 3d979af2 3d97d955     ...=.\.=...=U..=
2401a030:	3d981840 3d98572a 3d989614 3d98d4fe     @..=*W.=...=...=
2401a040:	3d99146e 3d995358 3d9992c9 3d99d239     n..=XS.=...=9..=
2401a050:	3d9a1230 3d9a51a0 3d9a9197 3d9ad18d     0..=.Q.=...=...=
2401a060:	3d9b1184 3d9b517a 3d9b91f7 3d9bd1ee     ...=zQ.=...=...=
2401a070:	3d9c126a 3d9c52e7 3d9c93ea 3d9cd467     j..=.R.=...=g..=
2401a080:	3d9d156a 3d9d566d 3d9d9770 3d9dd873     j..=mV.=p..=s..=
2401a090:	3d9e19fc 3d9e5aff 3d9e9c88 3d9ede12     ...=.Z.=...=...=
2401a0a0:	3d9f2021 3d9f61aa 3d9fa3ba 3d9fe5c9     ! .=.a.=...=...=
2401a0b0:	3da027d9 3da069e8 3da0ac7e 3da0ef13     .'.=.i.=~..=...=
2401a0c0:	3da13123 3da1743f 3da1b6d4 3da1f9f0     #1.=?t.=...=...=
2401a0d0:	3da23c86 3da27fa2 3da2c344 3da30660     .<.=...=D..=`..=
2401a0e0:	3da34a02 3da38d1e 3da3d0c0 3da414e8     .J.=...=...=...=
2401a0f0:	3da4588a 3da49cb2 3da4e0db 3da52503     .X.=...=...=.%.=
2401a100:	3da5692b 3da5adda 3da5f202 3da636b1     +i.=...=...=.6.=
2401a110:	3da67b5f 3da6c094 3da70542 3da74a77     _{.=...=B..=wJ.=
2401a120:	3da78fac 3da7d4e1 3da81a9c 3da86057     ...=...=...=W`.=
2401a130:	3da8a58b 3da8eb46 3da93187 3da97742     ...=F..=.1.=Bw.=
2401a140:	3da9bd84 3daa03c5 3daa4a06 3daa90cd     ...=...=.J.=...=
2401a150:	3daad70e 3dab1dd6 3dab649d 3dabab65     ...=...=.d.=e..=
2401a160:	3dabf2b2 3dac3a00 3dac814d 3dacc89b     ...=.:.=M..=...=
2401a170:	3dad0fe9 3dad57bc 3dad9f90 3dade764     ...=.W.=...=d..=
2401a180:	3dae2f38 3dae770c 3daebf66 3daf07c0     8/.=.w.=f..=...=
2401a190:	3daf501a 3daf98fa 3dafe154 3db02a35     .P.=...=T..=5*.=
2401a1a0:	3db07315 3db0bbf5 3db1055c 3db14ec2     .s.=...=\..=.N.=
2401a1b0:	3db19829 3db1e18f 3db22af5 3db274e2     )..=...=.*.=.t.=
2401a1c0:	3db2becf 3db308bc 3db3532e 3db39d1b     ...=...=.S.=...=
2401a1d0:	3db3e78e 3db43201 3db47c74 3db4c76d     ...=.2.=t|.=m..=
2401a1e0:	3db51266 3db55d5f 3db5a858 3db5f352     f..=_].=X..=R..=
2401a1f0:	3db63ed1 3db68a50 3db6d5d0 3db7214f     .>.=P..=...=O!.=
2401a200:	3db76d55 3db7b95a 3db80560 3db85165     Um.=Z..=`..=eQ.=
2401a210:	3db89df1 3db8ea7d 3db93709 3db98394     ...=}..=.7.=...=
2401a220:	3db9d0a6 3dba1db8 3dba6aca 3dbab7dc     ...=...=.j.=...=
2401a230:	3dbb04ee 3dbb5287 3dbba01f 3dbbedb7     ...=.R.=...=...=
2401a240:	3dbc3bd6 3dbc896e 3dbcd78c 3dbd2631     .;.=n..=...=1&.=
2401a250:	3dbd744f 3dbdc2f4 3dbe1199 3dbe603d     Ot.=...=...==`.=
2401a260:	3dbeaee2 3dbefe0d 3dbf4d38 3dbf9c63     ...=...=8M.=c..=
2401a270:	3dbfeb8e 3dc03b3f 3dc08af0 3dc0daa1     ...=?;.=...=...=
2401a280:	3dc12ad8 3dc17a89 3dc1cac1 3dc21af8     .*.=.z.=...=...=
2401a290:	3dc26bb5 3dc2bbed 3dc30caa 3dc35d68     .k.=...=...=h].=
2401a2a0:	3dc3aeab 3dc3ffef 3dc450ad 3dc4a277     ...=...=.P.=w..=
2401a2b0:	3dc4f3ba 3dc54584 3dc5974e 3dc5e918     ...=.E.=N..=...=
2401a2c0:	3dc63ae2 3dc68d33 3dc6df83 3dc731d3     .:.=3..=...=.1.=
2401a2d0:	3dc784a9 3dc7d6f9 3dc829d0 3dc87d2c     ...=...=.).=,}.=
2401a2e0:	3dc8d003 3dc92360 3dc976bc 3dc9ca19     ...=`#.=.v.=...=
2401a2f0:	3dca1dfc 3dca71de 3dcac5c1 3dcb19a4     ...=.q.=...=...=
2401a300:	3dcb6e0d 3dcbc276 3dcc16df 3dcc6b48     .n.=v..=...=Hk.=
2401a310:	3dccc038 3dcd1527 3dcd6a16 3dcdbf05     8..='..=.j.=...=
2401a320:	3dce147b 3dce69f0 3dcebf66 3dcf1562     {..=.i.=f..=b..=
2401a330:	3dcf6b5d 3dcfc159 3dd01755 3dd06dd7     ]k.=Y..=U..=.m.=
2401a340:	3dd0c3d2 3dd11ada 3dd1715c 3dd1c865     ...=...=\q.=e..=
2401a350:	3dd21f6d 3dd27675 3dd2cd7d 3dd3250b     m..=uv.=}..=.%.=
2401a360:	3dd37c9a 3dd3d4ae 3dd42c3d 3dd48451     .|.=...==,.=Q..=
2401a370:	3dd4dc66 3dd53501 3dd58d15 3dd5e5b0     f..=.5.=...=...=
2401a380:	3dd63ed1 3dd6976c 3dd6f08d 3dd749ae     .>.=l..=...=.I.=
2401a390:	3dd7a2cf 3dd7fc76 3dd8561d 3dd8afc4     ...=v..=.V.=...=
2401a3a0:	3dd909f2 3dd9641f 3dd9be4d 3dda187a     ...=.d.=M..=z..=
2401a3b0:	3dda732e 3ddacde2 3ddb2895 3ddb8349     .s.=...=.(.=I..=
2401a3c0:	3ddbde83 3ddc39bd 3ddc94f7 3ddcf0b7     ...=.9.=...=...=
2401a3d0:	3ddd4c77 3ddda837 3dde047d 3dde603d     wL.=7..=}..==`.=
2401a3e0:	3ddebd0a 3ddf1950 3ddf761d 3ddfd263     ...=P..=.v.=c..=
2401a3f0:	3de02fb6 3de08c82 3de0e9d5 3de14728     ./.=...=...=(G.=
2401a400:	3de1a501 3de20254 3de2602d 3de2be8c     ...=T..=-`.=...=
2401a410:	3de31c65 3de37ac4 3de3d923 3de43809     e..=.z.=#..=.8.=
2401a420:	3de49668 3de4f5d3 3de554b9 3de5b424     h..=...=.T.=$..=
2401a430:	3de61390 3de672fc 3de6d267 3de73259     ...=.r.=g..=Y2.=
2401a440:	3de7924b 3de7f2c3 3de8533b 3de8b3b3     K..=...=;S.=...=
2401a450:	3de9142b 3de97529 3de9d628 3dea3726     +..=)u.=(..=&7.=
2401a460:	3dea98ab 3deafa2f 3deb5bb4 3debbd38     ...=/..=.[.=8..=
2401a470:	3dec1f43 3dec814d 3dece3de 3ded466f     C..=M..=...=oF.=
2401a480:	3deda900 3dee0b91 3dee6ea8 3deed1bf     ...=...=.n.=...=
2401a490:	3def34d7 3def9874 3deffc11 3df05faf     .4.=t..=...=._.=
2401a4a0:	3df0c3d2 3df12770 3df18c19 3df1f03d     ...=p'.=...==..=
2401a4b0:	3df254e7 3df2b991 3df31ec1 3df3836b     .T.=...=...=k..=
2401a4c0:	3df3e921 3df44e51 3df4b407 3df519bd     !..=QN.=...=...=
2401a4d0:	3df57f73 3df5e5b0 3df64bec 3df6b229     s..=...=.K.=)..=
2401a4e0:	3df718ec 3df77fae 3df7e671 3df84dba     ...=...=q..=.M.=
2401a4f0:	3df8b503 3df91c4c 3df9841b 3df9ebea     ...=L..=...=...=
2401a500:	3dfa53b9 3dfabc0e 3dfb2464 3dfb8cb9     .S.=...=d$.=...=
2401a510:	3dfbf594 3dfc5dea 3dfcc74c 3dfd3027     ...=.].=L..='0.=
2401a520:	3dfd9989 3dfe0371 3dfe6cd3 3dfed6bb     ...=q..=.l.=...=
2401a530:	3dff40a3 3dffab11 3e000abf 3e003ff7     .@.=...=...>.?.>
2401a540:	3e007571 3e00aaeb 3e00e065 3e011623     qu.>...>e..>#..>
2401a550:	3e014be0 3e01819d 3e01b79e 3e01ed9e     .K.>...>...>...>
2401a560:	3e02239e 3e0259e2 3e029025 3e02c669     .#.>.Y.>%..>i..>
2401a570:	3e02fcf0 3e033376 3e0369fd 3e03a0c7     ...>v3.>.i.>...>
2401a580:	3e03d790 3e040e5a 3e044567 3e047c74     ...>Z..>gE.>t|.>
2401a590:	3e04b3c4 3e04eb14 3e052264 3e0559b4     ...>...>d".>.Y.>
2401a5a0:	3e059147 3e05c91d 3e0600b0 3e063886     G..>...>...>.8.>
2401a5b0:	3e06705d 3e06a876 3e06e08f 3e0718a8     ]p.>v..>...>...>
2401a5c0:	3e075105 3e078961 3e07c201 3e07faa0     .Q.>a..>...>...>
2401a5d0:	3e083340 3e086bdf 3e08a4c2 3e08dda5     @3.>.k.>...>...>
2401a5e0:	3e0916ca 3e094ff0 3e098916 3e09c27f     ...>.O.>...>...>
2401a5f0:	3e09fbe7 3e0a3550 3e0a6efc 3e0aa8a8     ...>P5.>.n.>...>
2401a600:	3e0ae297 3e0b1c86 3e0b5675 3e0b90a8     ...>...>uV.>...>
2401a610:	3e0bcada 3e0c050c 3e0c3f81 3e0c79f6     ...>...>.?.>.y.>
2401a620:	3e0cb46c 3e0cef24 3e0d29dc 3e0d64d8     l..>$..>.).>.d.>
2401a630:	3e0d9fd3 3e0ddacf 3e0e160e 3e0e514c     ...>...>...>LQ.>
2401a640:	3e0e8cce 3e0ec850 3e0f03d1 3e0f3f96     ...>P..>...>.?.>
2401a650:	3e0f7b5b 3e0fb720 3e0ff328 3e102f30     [{.> ..>(..>0/.>
2401a660:	3e106b38 3e10a783 3e10e411 3e11205c     8k.>...>...>\ .>
2401a670:	3e115cea 3e1199bb 3e11d68c 3e12135e     .\.>...>...>^..>
2401a680:	3e125072 3e128d86 3e12ca9b 3e1307f2     rP.>...>...>...>
2401a690:	3e13454a 3e1382e4 3e13c03c 3e13fe19     JE.>...><..>...>
2401a6a0:	3e143bf7 3e1479d5 3e14b7b3 3e14f5d3     .;.>.y.>...>...>
2401a6b0:	3e153437 3e157258 3e15b0bc 3e15ef63     74.>Xr.>...>c..>
2401a6c0:	3e162e0a 3e166cb1 3e16ab9b 3e16ea85     ...>.l.>...>...>
2401a6d0:	3e1729b3 3e1768e0 3e17a80d 3e17e77d     .).>.h.>...>}..>
2401a6e0:	3e1826ee 3e1866a1 3e18a655 3e18e608     .&.>.f.>U..>...>
2401a6f0:	3e1925ff 3e1965f5 3e19a62f 3e19e668     .%.>.e.>/..>h..>
2401a700:	3e1a26a2 3e1a671f 3e1aa79c 3e1ae85c     .&.>.g.>...>\..>
2401a710:	3e1b291c 3e1b6a1f 3e1baade 3e1bec25     .).>.j.>...>%..>
2401a720:	3e1c2d6b 3e1c6eb1 3e1caff7 3e1cf180     k-.>.n.>...>...>
2401a730:	3e1d334c 3e1d7519 3e1db6e5 3e1df8f4     L3.>.u.>...>...>
2401a740:	3e1e3b04 3e1e7d13 3e1ebf66 3e1f01fc     .;.>.}.>f..>...>
2401a750:	3e1f4491 3e1f8727 3e1fca00 3e200cd8     .D.>'..>...>.. >
2401a760:	3e204fb1 3e2092cd 3e20d62c 3e21198b     .O >.. >,. >..!>
2401a770:	3e215cea 3e21a08c 3e21e42e 3e2227d0     .\!>..!>..!>.'">
2401a780:	3e226bb5 3e22afde 3e22f406 3e23382e     .k">..">..">.8#>
2401a790:	3e237c9a 3e23c105 3e2405b4 3e244a62     .|#>..#>..$>bJ$>
2401a7a0:	3e248f11 3e24d402 3e251937 3e255e6c     ..$>..$>7.%>l^%>
2401a7b0:	3e25a3a1 3e25e918 3e262e90 3e26744b     ..%>..%>..&>Kt&>
2401a7c0:	3e26ba06 3e270004 3e274602 3e278c00     ..&>..'>.F'>..'>
2401a7d0:	3e27d242 3e281883 3e285f07 3e28a5ce     B.'>..(>._(>..(>
2401a7e0:	3e28ec53 3e29335d 3e297a25 3e29c12f     S.(>]3)>%z)>/.)>
2401a7f0:	3e2a087d 3e2a4fca 3e2a975b 3e2adea9     }.*>.O*>[.*>..*>
2401a800:	3e2b267c 3e2b6e50 3e2bb624 3e2bfe3b     |&+>Pn+>$.+>;.+>
2401a810:	3e2c4652 3e2c8eac 3e2cd706 3e2d1fa3     RF,>..,>..,>..->
2401a820:	3e2d6840 3e2db121 3e2dfa01 3e2e4324     @h->!.->..->$C.>
2401a830:	3e2e8c48 3e2ed56b 3e2f1ed1 3e2f687b     H..>k..>../>{h/>
2401a840:	3e2fb225 3e2ffbce 3e3045bb 3e308feb     %./>../>.E0>..0>
2401a850:	3e30d9d7 3e31244a 3e316ebd 3e31b930     ..0>J$1>.n1>0.1>
2401a860:	3e3203e6 3e324e9c 3e329995 3e32e48f     ..2>.N2>..2>..2>
2401a870:	3e332fcb 3e337b07 3e33c686 3e341206     ./3>.{3>..3>..4>
2401a880:	3e345dc8 3e34a98b 3e34f590 3e354196     .]4>..4>..4>.A5>
2401a890:	3e358dde 3e35da27 3e3626b3 3e36733f     ..5>'.5>.&6>?s6>
2401a8a0:	3e36c00e 3e370cdd 3e3759ef 3e37a701     ..6>..7>.Y7>..7>
2401a8b0:	3e37f456 3e3841ab 3e388f43 3e38dcdb     V.7>.A8>C.8>..8>
2401a8c0:	3e392ab7 3e397892 3e39c6b0 3e3a14cf     .*9>.x9>..9>..:>
2401a8d0:	3e3a6330 3e3ab192 3e3b0037 3e3b4edb     0c:>..:>7.;>.N;>
2401a8e0:	3e3b9dc3 3e3becab 3e3c3bd6 3e3c8b44     ..;>..;>.;<>D.<>
2401a8f0:	3e3cdab2 3e3d2a20 3e3d79d1 3e3dc982     ..<> *=>.y=>..=>
2401a900:	3e3e1976 3e3e69ad 3e3eb9e5 3e3f0a5f     v.>>.i>>..>>_.?>
2401a910:	3e3f5ad9 3e3fab54 3e3ffc54 3e404d12     .Z?>T.?>T.?>.M@>
2401a920:	3e409e13 3e40ef56 3e41409a 3e419221     ..@>V.@>.@A>!.A>
2401a930:	3e41e3eb 3e4235b5 3e42877f 3e42d98c     ..A>.5B>..B>..B>
2401a940:	3e432b99 3e437de9 3e43d07d 3e442310     .+C>.}C>}.C>.#D>
2401a950:	3e4475e6 3e44c8bd 3e451bd6 3e456ef0     .uD>..D>..E>.nE>
2401a960:	3e45c24c 3e4615a9 3e466949 3e46bd2b     L.E>..F>IiF>+.F>
2401a970:	3e47110e 3e476534 3e47b95a 3e480dc3     ..G>4eG>Z.G>..H>
2401a980:	3e48622c 3e48b6d8 3e490b85 3e496074     ,bH>..H>..I>t`I>
2401a990:	3e49b5a6 3e4a0ad9 3e4a600b 3e4ab580     ..I>..J>.`J>..J>
2401a9a0:	3e4b0b39 3e4b6135 3e4bb731 3e4c0d2c     9.K>5aK>1.K>,.L>
2401a9b0:	3e4c636b 3e4cb9ed 3e4d106f 3e4d6734     kcL>..L>o.M>4gM>
2401a9c0:	3e4dbdf9 3e4e1501 3e4e6c09 3e4ec354     ..M>..N>.lN>T.N>
2401a9d0:	3e4f1ae3 3e4f7271 3e4fca43 3e502257     ..O>qrO>C.O>W"P>
2401a9e0:	3e507a6c 3e50d280 3e512ad8 3e518373     lzP>..P>.*Q>s.Q>
2401a9f0:	3e51dc0e 3e5234ec 3e528e0d 3e52e72e     ..Q>.4R>..R>..R>
2401aa00:	3e534092 3e5399f6 3e53f39d 3e544d44     .@S>..S>..S>DMT>
2401aa10:	3e54a72f 3e55015c 3e555b8a 3e55b5fa     /.T>\.U>.[U>..U>
2401aa20:	3e5610ae 3e566b61 3e56c615 3e57214f     ..V>akV>..V>O!W>
2401aa30:	3e577c89 3e57d7c3 3e583340 3e588f00     .|W>..W>@3X>..X>
2401aa40:	3e58eac0 3e5946c3 3e59a30a 3e59ff50     ..X>.FY>..Y>P.Y>
2401aa50:	3e5a5bd9 3e5ab863 3e5b152f 3e5b723f     .[Z>c.Z>/.[>?r[>
2401aa60:	3e5bcf4f 3e5c2ca1 3e5c8a37 3e5ce7cd     O.[>.,\>7.\>..\>
2401aa70:	3e5d45a6 3e5da37f 3e5e019b 3e5e5ffa     .E]>..]>..^>._^>
2401aa80:	3e5ebe59 3e5f1cfc 3e5f7be1 3e5fdac7     Y.^>.._>.{_>.._>
2401aa90:	3e6039ef 3e609918 3e60f883 3e615832     .9`>..`>..`>2Xa>
2401aaa0:	3e61b7e1 3e621816 3e627807 3e62d880     ..a>..b>.xb>..b>
2401aab0:	3e6338f8 3e639970 3e63fa6e 3e645b29     .8c>p.c>n.c>)[d>
2401aac0:	3e64bc6a 3e651dac 3e657f30 3e65e0f8     j.d>..e>0.e>..e>
2401aad0:	3e6642c0 3e66a4ca 3e670718 3e676966     .Bf>..f>..g>fig>
2401aae0:	3e67cbf7 3e682e88 3e68915c 3e68f473     ..g>..h>\.h>s.h>
2401aaf0:	3e6957cd 3e69bb28 3e6a1ec5 3e6a82a5     .Wi>(.i>..j>..j>
2401ab00:	3e6ae686 3e6b4aa9 3e6baecd 3e6c1377     ..j>.Jk>..k>w.l>
2401ab10:	3e6c7821 3e6cdcca 3e6d41fa 3e6da72a     !xl>..l>.Am>*.m>
2401ab20:	3e6e0c5b 3e6e7211 3e6ed7c7 3e6f3dc0     [.n>.rn>..n>.=o>
2401ab30:	3e6fa3ba 3e7009f6 3e707076 3e70d738     ..o>..p>vpp>8.p>
2401ab40:	3e713dfb 3e71a501 3e720c07 3e727393     .=q>..q>..r>.sr>
2401ab50:	3e72db1f 3e7342ee 3e73aabd 3e7412cf     ..r>.Bs>..s>..t>
2401ab60:	3e747b24 3e74e3bd 3e754c55 3e75b531     ${t>..t>ULu>1.u>
2401ab70:	3e761e4f 3e76876e 3e76f113 3e775a75     O.v>n.v>..v>uZw>
2401ab80:	3e77c45d 3e782e45 3e7898b3 3e7902de     ].w>E.x>..x>..y>
2401ab90:	3e796d8f 3e79d841 3e7a4335 3e7aae6d     .my>A.y>5Cz>m.z>
2401aba0:	3e7b19a4 3e7b8562 3e7bf120 3e7c5cdd     ..{>b.{> .{>.\|>
2401abb0:	3e7cc921 3e7d3565 3e7da1ec 3e7e0e73     !.|>e5}>..}>s.~>
2401abc0:	3e7e7b81 3e7ee88e 3e7f55de 3e7fc32f     .{~>..~>.U.>/..>
2401abd0:	3e801883 3e804f6e 3e80867b 3e80bda9     ...>nO.>{..>...>
2401abe0:	3e80f4d8 3e812c28 3e816399 3e819b2c     ...>(,.>.c.>,..>
2401abf0:	3e81d2e1 3e820a96 3e82426c 3e827a63     ...>...>lB.>cz.>
2401ac00:	3e82b25b 3e82ea96 3e8322d1 3e835b2d     [..>...>.".>-[.>
2401ac10:	3e83938a 3e83cc29 3e8404c9 3e843d8a     ...>)..>...>.=.>
2401ac20:	3e84766c 3e84af71 3e84e875 3e85219b     lv.>q..>u..>.!.>
2401ac30:	3e855ae2 3e85944b 3e85cdd5 3e86075f     .Z.>K..>...>_..>
2401ac40:	3e86410b 3e867ad9 3e86b4c8 3e86eed9     .A.>.z.>...>...>
2401ac50:	3e8728e9 3e87633d 3e879d91 3e87d7e4     .(.>=c.>...>...>
2401ac60:	3e88127b 3e884d34 3e8887ec 3e88c2c6     {..>4M.>...>...>
2401ac70:	3e88fdc1 3e8938de 3e89741d 3e89af5c     ...>.8.>.t.>\..>
2401ac80:	3e89eabc 3e8a263e 3e8a61e1 3e8a9da6     ...>>&.>.a.>...>
2401ac90:	3e8ad98c 3e8b1572 3e8b519c 3e8b8dc5     ...>r..>.Q.>...>
2401aca0:	3e8bca10 3e8c067d 3e8c42ea 3e8c7f99     ...>}..>.B.>...>
2401acb0:	3e8cbc49 3e8cf93c 3e8d362f 3e8d7343     I..><..>/6.>Cs.>
2401acc0:	3e8db057 3e8dedaf 3e8e2b28 3e8e68a1     W..>...>(+.>.h.>
2401acd0:	3e8ea63b 3e8ee419 3e8f21f7 3e8f5ff6     ;..>...>.!.>._.>
2401ace0:	3e8f9df5 3e8fdc38 3e901a9c 3e9058ff     ...>8..>...>.X.>
2401acf0:	3e909785 3e90d64d 3e911516 3e915400     ...>M..>...>.T.>
2401ad00:	3e91930c 3e91d218 3e921166 3e9250d7     ...>...>f..>.P.>
2401ad10:	3e929047 3e92cffa 3e930fae 3e934f83     G..>...>...>.O.>
2401ad20:	3e938f7a 3e93cf92 3e940fcb 3e945027     z..>...>...>'P.>
2401ad30:	3e9490a3 3e94d142 3e9511e0 3e9552c1     ...>B..>...>.R.>
2401ad40:	3e9593a3 3e95d4c7 3e9615ec 3e965732     ...>...>...>2W.>
2401ad50:	3e96989a 3e96da45 3e971bef 3e975dbc     ...>E..>...>.].>
2401ad60:	3e979fa9 3e97e1b9 3e9823c8 3e98661b     ...>...>.#.>.f.>
2401ad70:	3e98a88f 3e98eb25 3e992ddc 3e997093     ...>%..>.-.>.p.>
2401ad80:	3e99b38d 3e99f688 3e9a39c5 3e9a7d03     ...>...>.9.>.}.>
2401ad90:	3e9ac083 3e9b0404 3e9b47c7 3e9b8b8b     ...>...>.G.>...>
2401ada0:	3e9bcf92 3e9c1398 3e9c57c1 3e9c9c2c     ...>...>.W.>,..>
2401adb0:	3e9ce098 3e9d2546 3e9d69f5 3e9daec5     ...>F%.>.i.>...>
2401adc0:	3e9df3d8 3e9e38eb 3e9e7e20 3e9ec398     ...>.8.> ~.>...>
2401add0:	3e9f090f 3e9f4ea9 3e9f9485 3e9fda62     ...>.N.>...>b..>
2401ade0:	3ea02081 3ea066a1 3ea0ad04 3ea0f367     . .>.f.>...>g..>
2401adf0:	3ea13a0c 3ea180b2 3ea1c79b 3ea20ea6     .:.>...>...>...>
2401ae00:	3ea255b0 3ea29cfe 3ea2e46d 3ea32bfe     .U.>...>m..>.+.>
2401ae10:	3ea373b0 3ea3bb84 3ea40379 3ea44b90     .s.>...>y..>.K.>
2401ae20:	3ea493c9 3ea4dc23 3ea5249e 3ea56d3b     ...>#..>.$.>;m.>
2401ae30:	3ea5b61c 3ea5fefc 3ea6481f 3ea69143     ...>...>.H.>C..>
2401ae40:	3ea6daa9 3ea72431 3ea76ddb 3ea7b7a6     ...>1$.>.m.>...>
2401ae50:	3ea80193 3ea84ba1 3ea895d1 3ea8e044     ...>.K.>...>D..>
2401ae60:	3ea92ab7 3ea9756d 3ea9c023 3eaa0b1c     .*.>mu.>#..>...>
2401ae70:	3eaa5636 3eaaa173 3eaaecd0 3eab3871     6V.>s..>...>q8.>
2401ae80:	3eab8412 3eabcff6 3eac1bda 3eac6801     ...>...>...>.h.>
2401ae90:	3eacb44a 3ead00b4 3ead4d40 3ead9a0f     J..>...>@M.>...>
2401aea0:	3eade6de 3eae33f0 3eae8124 3eaece79     ...>.3.>$..>y..>
2401aeb0:	3eaf1bef 3eaf6988 3eafb763 3eb0053e     ...>.i.>c..>>..>
2401aec0:	3eb0535d 3eb0a19d 3eb0effe 3eb13ea3     ]S.>...>...>.>.>
2401aed0:	3eb18d47 3eb1dc2f 3eb22b39 3eb27a63     G..>/..>9+.>cz.>
2401aee0:	3eb2c9d1 3eb3193f 3eb368f1 3eb3b8c3     ...>?..>.h.>...>
2401aef0:	3eb408b7 3eb458ef 3eb4a926 3eb4f9a0     ...>.X.>&..>...>
2401af00:	3eb54a3c 3eb59afa 3eb5ebfb 3eb63d1d     <J.>...>...>.=.>
2401af10:	3eb68e61 3eb6dfc6 3eb7314d 3eb78317     a..>...>M1.>...>
2401af20:	3eb7d502 3eb8270f 3eb8795f 3eb8cbd1     ...>.'.>_y.>...>
2401af30:	3eb91e64 3eb97119 3eb9c411 3eba1709     d..>.q.>...>...>
2401af40:	3eba6a66 3ebabdc2 3ebb1162 3ebb6523     fj.>...>b..>#e.>
2401af50:	3ebbb906 3ebc0d0b 3ebc6152 3ebcb5bb     ...>...>Ra.>...>
2401af60:	3ebd0a67 3ebd5f35 3ebdb424 3ebe0935     g..>5_.>$..>5..>
2401af70:	3ebe5e89 3ebeb3ff 3ebf0996 3ebf5f70     .^.>...>...>p_.>
2401af80:	3ebfb56c 3ec00baa 3ec061e9 3ec0b86b     l..>...>.a.>k..>
2401af90:	3ec10f30 3ec16617 3ec1bd1f 3ec21449     0..>.f.>...>I..>
2401afa0:	3ec26bb5 3ec2c344 3ec31b15 3ec37308     .k.>D..>...>.s.>
2401afb0:	3ec3cb1d 3ec42374 3ec47bee 3ec4d4aa     ...>t#.>.{.>...>
2401afc0:	3ec52d88 3ec58687 3ec5dfca 3ec6392e     .-.>...>...>.9.>
2401afd0:	3ec692b4 3ec6ec7d 3ec74688 3ec7a0b6     ...>}..>.F.>...>
2401afe0:	3ec7fb05 3ec85597 3ec8b04b 3ec90b20     ...>.U.>K..> ..>
2401aff0:	3ec96638 3ec9c194 3eca1d11 3eca78af     8f.>...>...>.x.>
2401b000:	3ecad491 3ecb3094 3ecb8cda 3ecbe942     ...>.0.>...>B..>
2401b010:	3ecc45ed 3ecca2ba 3eccffa8 3ecd5cfb     .E.>...>...>.\.>
2401b020:	3ecdba4d 3ece17e3 3ece75bc 3eced3b7     M..>...>.u.>...>
2401b030:	3ecf31f4 3ecf9054 3ecfeef6 3ed04dba     .1.>T..>...>.M.>
2401b040:	3ed0acc1 3ed10be9 3ed16b55 3ed1cae2     ...>...>Uk.>...>
2401b050:	3ed22ab2 3ed28ac6 3ed2eafb 3ed34b51     .*.>...>...>QK.>
2401b060:	3ed3ac0c 3ed40cc8 3ed46de7 3ed4cf07     ...>...>.m.>...>
2401b070:	3ed5308c 3ed59232 3ed5f41b 3ed65626     .0.>2..>...>&V.>
2401b080:	3ed6b873 3ed71ae3 3ed77d95 3ed7e08b     s..>...>.}.>...>
2401b090:	3ed843a2 3ed8a6fc 3ed90a9a 3ed96e59     .C.>...>...>Yn.>
2401b0a0:	3ed9d25b 3eda36a0 3eda9b07 3edaffb0     [..>.6.>...>...>
2401b0b0:	3edb647c 3edbc98a 3edc2edc 3edc9470     |d.>...>...>p..>
2401b0c0:	3edcfa27 3edd6020 3eddc63b 3ede2c99     '..> `.>;..>.,.>
2401b0d0:	3ede933a 3edefa1e 3edf6146 3edfc88e     :..>...>Fa.>...>
2401b0e0:	3ee02ff9 3ee097c8 3ee0ffb9 3ee167ec     ./.>...>...>.g.>
2401b0f0:	3ee1d063 3ee2391d 3ee2a1f9 3ee30b18     c..>.9.>...>...>
2401b100:	3ee37479 3ee3de1e 3ee447e5 3ee4b1ee     yt.>...>.G.>...>
2401b110:	3ee51c3b 3ee586cb 3ee5f19d 3ee65c92     ;..>...>...>.\.>
2401b120:	3ee6c7c9 3ee73344 3ee79f02 3ee80b03     ...>D3.>...>...>
2401b130:	3ee87725 3ee8e3ac 3ee95055 3ee9bd40     %w.>...>UP.>@..>
2401b140:	3eea2a6f 3eea97e1 3eeb0575 3eeb736d     o*.>...>u..>ms.>
2401b150:	3eebe187 3eec4fe3 3eecbea5 3eed2d88     ...>.O.>...>.-.>
2401b160:	3eed9cae 3eee0c17 3eee7bc4 3eeeeb92     ...>...>.{.>...>
2401b170:	3eef5bc4 3eefcc3a 3ef03cd1 3ef0adcd     .[.>:..>.<.>...>
2401b180:	3ef11eeb 3ef1906d 3ef20210 3ef27419     ...>m..>...>.t.>
2401b190:	3ef2e643 3ef358d1 3ef3cb81 3ef43e75     C..>.X.>...>u>.>
2401b1a0:	3ef4b1cd 3ef52546 3ef59924 3ef60d24     ...>F%.>$..>$..>
2401b1b0:	3ef68188 3ef6f60e 3ef76af9 3ef7e026     ...>...>.j.>&..>
2401b1c0:	3ef85597 3ef8cb29 3ef94120 3ef9b75a     .U.>)..> A.>Z..>
2401b1d0:	3efa2dd8 3efaa4ba 3efb1bbd 3efb9303     .-.>...>...>...>
2401b1e0:	3efc0aaf 3efc829d 3efcfaad 3efd7321     ...>...>...>!s.>
2401b1f0:	3efdebd9 3efe64f5 3efede33 3eff57d6     ...>.d.>3..>.W.>
2401b200:	3effd1bb 3f0025f2 3f006328 3f00a07f     ...>.%.?(c.?...?
2401b210:	3f00de09 3f011bb5 3f015981 3f019770     ...?...?.Y.?p..?
2401b220:	3f01d580 3f0213c2 3f025226 3f0290bc     ...?...?&R.?...?
2401b230:	3f02cf64 3f030e3d 3f034d38 3f038c65     d..?=..?8M.?e..?
2401b240:	3f03cba3 3f040b13 3f044ab6 3f048a7a     ...?...?.J.?z..?
2401b250:	3f04ca60 3f050a67 3f054aa1 3f058afc     `..?g..?.J.?...?
2401b260:	3f05cb8a 3f060c28 3f064d0a 3f068dfc     ...?(..?.M.?...?
2401b270:	3f06cf31 3f071077 3f0751f0 3f07938a     1..?w..?.Q.?...?
2401b280:	3f07d556 3f081744 3f085964 3f089ba6     V..?D..?dY.?...?
2401b290:	3f08de1a 3f0920b0 3f096378 3f09a661     ...?. .?xc.?a..?
2401b2a0:	3f09e97d 3f0a2cba 3f0a702a 3f0ab3bc     }..?.,.?*p.?...?
2401b2b0:	3f0af77f 3f0b3b64 3f0b7f7c 3f0bc3c6     ...?d;.?|..?...?
2401b2c0:	3f0c0831 3f0c4ccf 3f0c918e 3f0cd680     1..?.L.?...?...?
2401b2d0:	3f0d1ba4 3f0d60e9 3f0da661 3f0debfb     ...?.`.?a..?...?
2401b2e0:	3f0e31d7 3f0e77d5 3f0ebdf5 3f0f0447     .1.?.w.?...?G..?
2401b2f0:	3f0f4adc 3f0f9182 3f0fd86b 3f101f75     .J.?...?k..?u..?
2401b300:	3f1066b2 3f10ae21 3f10f5b2 3f113d75     .f.?!..?...?u=.?
2401b310:	3f11857b 3f11cd92 3f1215ec 3f125e78     {..?...?...?x^.?
2401b320:	3f12a726 3f12f007 3f133919 3f13825e     &..?...?.9.?^..?
2401b330:	3f13cbd5 3f14157f 3f145f5b 3f14a958     ...?...?[_.?X..?
2401b340:	3f14f399 3f153dfb 3f158890 3f15d367     ...?.=.?...?g..?
2401b350:	3f161e60 3f16698c 3f16b4fa 3f17008a     `..?.i.?...?...?
2401b360:	3f174c4d 3f179852 3f17e47a 3f1830e4     ML.?R..?z..?.0.?
2401b370:	3f187d70 3f18ca3e 3f191740 3f196473     p}.?>..?@..?sd.?
2401b380:	3f19b1d9 3f19ff71 3f1a4d3c 3f1a9b39     ...?q..?<M.?9..?
2401b390:	3f1ae979 3f1b37eb 3f1b8690 3f1bd567     y..?.7.?...?g..?
2401b3a0:	3f1c2470 3f1c73bd 3f1cc33b 3f1d12ec     p$.?.s.?;..?...?
2401b3b0:	3f1d62e1 3f1db2f6 3f1e034f 3f1e53eb     .b.?...?O..?.S.?
2401b3c0:	3f1ea4ba 3f1ef5ba 3f1f46ed 3f1f9863     ...?...?.F.?c..?
2401b3d0:	3f1fea0c 3f203bf7 3f208e15 3f20e065     ...?.; ?.. ?e. ?
2401b3e0:	3f2132f8 3f2185be 3f21d8c7 3f222c13     .2!?..!?..!?.,"?
2401b3f0:	3f227f91 3f22d341 3f232735 3f237b5b     .."?A."?5'#?[{#?
2401b400:	3f23cfc4 3f242470 3f24794f 3f24ce70     ..#?p$$?Oy$?p.$?
2401b410:	3f2523d5 3f25796c 3f25cf35 3f262553     .#%?ly%?5.%?S%&?
2401b420:	3f267ba2 3f26d235 3f2728fa 3f278013     .{&?5.&?.('?..'?
2401b430:	3f27d75e 3f282eec 3f2886ad 3f28dec2     ^.'?..(?..(?..(?
2401b440:	3f293709 3f298f93 3f29e860 3f2a4170     .7)?..)?`.)?pA*?
2401b450:	3f2a9ac3 3f2af45a 3f2b4e23 3f2ba83f     ..*?Z.*?#N+??.+?
2401b460:	3f2c028e 3f2c5d31 3f2cb817 3f2d1330     ..,?1],?..,?0.-?
2401b470:	3f2d6e9c 3f2dca3a 3f2e262d 3f2e8262     .n-?:.-?-&.?b..?
2401b480:	3f2ededb 3f2f3b97 3f2f9896 3f2ff5d8     ...?.;/?../?../?
2401b490:	3f30536d 3f30b146 3f310f62 3f316dc2     mS0?F.0?b.1?.m1?
2401b4a0:	3f31cc64 3f322b5a 3f328a93 3f32ea21     d.1?Z+2?..2?!.2?
2401b4b0:	3f3349f1 3f33aa04 3f340a5b 3f346b05     .I3?..3?[.4?.k4?
2401b4c0:	3f34cc03 3f352d34 3f358ec9 3f35f091     ..4?4-5?..5?..5?
2401b4d0:	3f3652bd 3f36b52d 3f3717df 3f377ae5     .R6?-.6?..7?.z7?
2401b4e0:	3f37de40 3f3841dd 3f38a5ce 3f390a03     @.7?.A8?..8?..9?
2401b4f0:	3f396e8b 3f39d367 3f3a3897 3f3a9e0a     .n9?g.9?.8:?..:?
2401b500:	3f3b03d1 3f3b69ec 3f3bd05b 3f3c371e     ..;?.i;?[.;?.7<?
2401b510:	3f3c9e34 3f3d058e 3f3d6d3b 3f3dd54e     4.<?..=?;m=?N.=?
2401b520:	3f3e3da3 3f3ea64c 3f3f0f5a 3f3f78ab     .=>?L.>?Z.??.x??
2401b530:	3f3fe261 3f404c59 3f40b6b7 3f412168     a.??YL@?..@?h!A?
2401b540:	3f418c6d 3f41f7c6 3f426373 3f42cf85     m.A?..A?scB?..B?
2401b550:	3f433beb 3f43a8a4 3f4415c2 3f448334     .;C?..C?..D?4.D?
2401b560:	3f44f0fa 3f455f24 3f45cda3 3f463c86     ..D?$_E?..E?.<F?
2401b570:	3f46abbd 3f471b58 3f478b48 3f47fb9c     ..F?X.G?H.G?..G?
2401b580:	3f486c55 3f48dd61 3f494ed3 3f49c0a9     UlH?a.H?.NI?..I?
2401b590:	3f4a32d3 3f4aa561 3f4b1855 3f4b8bac     .2J?a.J?U.K?..K?
2401b5a0:	3f4bff58 3f4c7379 3f4ce7ef 3f4d5cc8     X.K?ysL?..L?.\M?
2401b5b0:	3f4dd218 3f4e47bb 3f4ebdc2 3f4f3440     ..M?.GN?..N?@4O?
2401b5c0:	3f4fab11 3f502257 3f509a02 3f511212     ..O?W"P?..P?..Q?
2401b5d0:	3f518a98 3f520371 3f527cbf 3f52f683     ..Q?q.R?.|R?..R?
2401b5e0:	3f5370ac 3f53eb3a 3f54662c 3f54e193     .pS?:.S?,fT?..T?
2401b5f0:	3f555d70 3f55d9b2 3f565669 3f56d395     p]U?..U?iVV?..V?
2401b600:	3f575126 3f57cf2d 3f584d98 3f58cc8a     &QW?-.W?.MX?..X?
2401b610:	3f594be0 3f59cbab 3f5a4bec 3f5acca3     .KY?..Y?.KZ?..Z?
2401b620:	3f5b4dcf 3f5bcf70 3f5c5187 3f5cd413     .M[?p.[?.Q\?..\?
2401b630:	3f5d5715 3f5dda9d 3f5e5e9a 3f5ee30d     .W]?..]?.^^?..^?
2401b640:	3f5f67f5 3f5fed63 3f607347 3f60f9a0     .g_?c._?Gs`?..`?
2401b650:	3f618080 3f6207e6 3f628fc1 3f631822     ..a?..b?..b?".c?
2401b660:	3f63a0f9 3f642a56 3f64b439 3f653ea3     ..c?V*d?9.d?.>e?
2401b670:	3f65c982 3f6654f8 3f66e0e3 3f676d55     ..e?.Tf?..f?Umg?
2401b680:	3f67fa5d 3f6887db 3f6915f0 3f69a48b     ].g?..h?..i?..i?
2401b690:	3f6a33ad 3f6ac354 3f6b5393 3f6be458     .3j?T.j?.Sk?X.k?
2401b6a0:	3f6c75a3 3f6d0785 3f6d99fe 3f6e2cfe     .ul?..m?..m?.,n?
2401b6b0:	3f6ec083 3f6f54b0 3f6fe964 3f707eae     ..n?.To?d.o?.~p?
2401b6c0:	3f711490 3f71ab08 3f724218 3f72d9be     ..q?..q?.Br?..r?
2401b6d0:	3f7371fc 3f740ad0 3f74a43c 3f753e4f     .qs?..t?<.t?O>u?
2401b6e0:	3f75d8f9 3f76743a 3f771023 3f77aca3     ..u?:tv?#.w?..w?
2401b6f0:	3f7849cb 3f78e78a 3f7985f0 3f7a24ff     .Ix?..x?..y?.$z?
2401b700:	3f7ac4b5 3f7b6513 3f7c0608 3f7ca7b5     ..z?.e{?..|?..|?
2401b710:	3f7d4a0a 3f7decf6 3f7e909b 3f7f34f8     .J}?..}?..~?.4.?
2401b720:	3f7fd9ec 3f803fd5 3f8092ff 3f80e686     ...?.?.?...?...?
2401b730:	3f813a69 3f818ea8 3f81e33b 3f82382a     i:.?...?;..?*8.?
2401b740:	3f828d76 3f82e31d 3f833922 3f838f82     v..?...?"9.?...?
2401b750:	3f83e647 3f843d68 3f8494e6 3f84ecc0     G..?h=.?...?...?
2401b760:	3f854507 3f859da1 3f85f6a9 3f86500d     .E.?...?...?.P.?
2401b770:	3f86a9d6 3f870404 3f875e96 3f87b98c     ...?...?.^.?...?
2401b780:	3f8814f0 3f8870b9 3f88cce6 3f892978     ...?.p.?...?x).?
2401b790:	3f898677 3f89e3e3 3f8a41b3 3f8a9ff9     w..?...?.A.?...?
2401b7a0:	3f8afea4 3f8b5dbc 3f8bbd40 3f8c1d3b     ...?.].?@..?;..?
2401b7b0:	3f8c7da2 3f8cde76 3f8d3fc0 3f8da177     .}.?v..?.?.?w..?
2401b7c0:	3f8e03a3 3f8e6645 3f8ec954 3f8f2ce0     ...?Ef.?T..?.,.?
2401b7d0:	3f8f90e2 3f8ff55a 3f905a47 3f90bfb1     ...?Z..?GZ.?...?
2401b7e0:	3f912592 3f918bf0 3f91f2cb 3f925a25     .%.?...?...?%Z.?
2401b7f0:	3f92c1f4 3f932a49 3f93931d 3f93fc6e     ...?I*.?...?n..?
2401b800:	3f946645 3f94d09a 3f953b75 3f95a6ce     Ef.?...?u;.?...?
2401b810:	3f9612b6 3f967f24 3f96ec18 3f975992     ...?$..?...?.Y.?
2401b820:	3f97c79b 3f98362a 3f98a548 3f9914f5     ...?*6.?H..?...?
2401b830:	3f99852f 3f99f5f9 3f9a6751 3f9ad938     /..?...?Qg.?8..?
2401b840:	3f9b4bbe 3f9bbecb 3f9c3276 3f9ca6b9     .K.?...?v2.?...?
2401b850:	3f9d1b8b 3f9d90fb 3f9e070c 3f9e7db3     ...?...?...?.}.?
2401b860:	3f9ef4f1 3f9f6cd7 3f9fe554 3fa05e78     ...?.l.?T..?x^.?
2401b870:	3fa0d83c 3fa152a8 3fa1cdb3 3fa24966     <..?.R.?...?fI.?
2401b880:	3fa2c5c1 3fa342cc 3fa3c07f 3fa43ed9     ...?.B.?...?.>.?
2401b890:	3fa4bde4 3fa53d9f 3fa5be0a 3fa63f25     ...?.=.?...?%?.?
2401b8a0:	3fa6c0f0 3fa7437c 3fa7c6b9 3fa84aae     ...?|C.?...?.J.?
2401b8b0:	3fa8cf5b 3fa954ca 3fa9daf0 3faa61d8     [..?.T.?...?.a.?
2401b8c0:	3faae98a 3fab71f3 3fabfb26 3fac851b     ...?.q.?&..?...?
2401b8d0:	3fad0fd8 3fad9b67 3fae27b7 3faeb4d9     ...?g..?.'.?...?
2401b8e0:	3faf42cc 3fafd191 3fb06128 3fb0f199     .B.?...?(a.?...?
2401b8f0:	3fb182dc 3fb214f9 3fb2a7f0 3fb33bc1     ...?...?...?.;.?
2401b900:	3fb3d07d 3fb46613 3fb4fc8b 3fb593ee     }..?.f.?...?...?
2401b910:	3fb62c34 3fb6c565 3fb75f89 3fb7fa98     4,.?e..?._.?...?
2401b920:	3fb89692 3fb93387 3fb9d170 3fba7054     ...?.3.?p..?Tp.?
2401b930:	3fbb102c 3fbbb107 3fbc52df 3fbcf5ba     ,..?...?.R.?...?

2401b940 <__leaf_table_fir2XLow>:
2401b940:	3a8bdc32 bb955900 bc88e6bf bcac918f     2..:.Y..........
2401b950:	bb7aead8 3c98db7f 3c45342d bca916b1     ..z....<-4E<....
2401b960:	bcdbbdfe 3c9254a3 3d49d119 bb8d3cda     .....T.<..I=.<..
2401b970:	bdaf8d57 bd1ccea3 3e3ca03d 3ecf9165     W.......=.<>e..>
2401b980:	3ecf9165 3e3ca03d bd1ccea3 bdaf8d57     e..>=.<>....W...
2401b990:	bb8d3cda 3d49d119 3c9254a3 bcdbbdfe     .<....I=.T.<....
2401b9a0:	bca916b1 3c45342d 3c98db7f bb7aead8     ....-4E<...<..z.
2401b9b0:	bcac918f bc88e6bf bb955900 3a8bdc32     .........Y..2..:

2401b9c0 <__leaf_table_sinewave>:
2401b9c0:	00000000 3b47e282 3bc8de2b 3c1691a7     ......G;+..;...<
2401b9d0:	3c49081c 3c7b00bd 3c96bb99 3cafb7e9     ..I<..{<...<...<
2401b9e0:	3cc9081c 3ce2046c 3cfb3fa7 3d0a1dfc     ...<l..<.?.<...=
2401b9f0:	3d16bb99 3d23443d 3d2fc265 3d3c6003     ...==D#=e./=.`<=
2401ba00:	3d48de2b 3d557bc8 3d62046c 3d6e8295     +.H=.{U=l.b=..n=
2401ba10:	3d7b2032 3d83cf2d 3d8a0e41 3d90624e     2 {=-..=A..=Nb.=
2401ba20:	3d96a162 3d9ce076 3da31f8a 3da96e59     b..=v..=...=Yn.=
2401ba30:	3dafad6d 3db5f1bf 3dbc30d3 3dc26fe7     m..=...=.0.=.o.=
2401ba40:	3dc8aefb 3dceee0f 3dd53261 3ddb7176     ...=...=a2.=vq.=
2401ba50:	3de1b08a 3de7ef9e 3dee2eb2 3df46dc6     ...=...=...=.m.=
2401ba60:	3dfab218 3e0070b9 3e039043 3e06afcd     ...=.p.>C..>...>
2401ba70:	3e09c77a 3e0ce704 3e10092d 3e1320da     z..>...>-..>. .>
2401ba80:	3e163886 3e195810 3e1c6fbd 3e1f8f47     .8.>.X.>.o.>G..>
2401ba90:	3e22a6f4 3e25c140 3e28d8ed 3e2bf099     ..">@.%>..(>..+>
2401baa0:	3e2f0846 3e3227d0 3e3537a0 3e384f4c     F./>.'2>.75>LO8>
2401bab0:	3e3b66f9 3e3e8145 3e4198f2 3e44a8c1     .f;>E.>>..A>..D>
2401bac0:	3e47c06e 3e4ad81b 3e4de7ea 3e50ff97     n.G>..J>..M>..P>
2401bad0:	3e540f67 3e571f36 3e5a36e3 3e5d46b2     g.T>6.W>.6Z>.F]>
2401bae0:	3e605921 3e6368f1 3e6678c0 3e698890     !Y`>.hc>.xf>..i>
2401baf0:	3e6c985f 3e6fa051 3e72b021 3e75bff0     _.l>Q.o>!.r>..u>
2401bb00:	3e78c7e3 3e7bd7b2 3e7edfa4 3e80f7ba     ..x>..{>..~>...>
2401bb10:	3e827bb3 3e83ffac 3e8583a5 3e87079e     .{.>...>...>...>
2401bb20:	3e888b97 3e8a0f91 3e8b938a 3e8d1394     ...>...>...>...>
2401bb30:	3e8e978d 3e901798 3e919b91 3e931b9b     ...>...>...>...>
2401bb40:	3e949ba6 3e961f9f 3e979fa9 3e991fb4     ...>...>...>...>
2401bb50:	3e9a9bd0 3e9c1bda 3e9d9be5 3e9f1bef     ...>...>...>...>
2401bb60:	3ea0980b 3ea21427 3ea39431 3ea5104d     ...>'..>1..>M..>
2401bb70:	3ea68c69 3ea80885 3ea984a1 3eaaff6d     i..>...>...>m..>
2401bb80:	3eac7b89 3eadf3b6 3eaf6fd2 3eb0e7ff     .{.>...>.o.>...>
2401bb90:	3eb2602d 3eb3d85a 3eb55476 3eb6cca3     -`.>Z..>vT.>...>
2401bba0:	3eb83f92 3eb9b7bf 3ebb2fec 3ebca42b     .?.>...>./.>+..>
2401bbb0:	3ebe1c58 3ebf9097 3ec10386 3ec277c4     X..>...>...>.w.>
2401bbc0:	3ec3ec03 3ec56042 3ec6d480 3ec84381     ...>B`.>...>.C.>
2401bbd0:	3ec9b7bf 3ecb280f 3ecc985f 3ece075f     ...>.(.>_..>_..>
2401bbe0:	3ecf77af 3ed0e7ff 3ed2584f 3ed3c361     .w.>...>OX.>a..>
2401bbf0:	3ed533b1 3ed6a012 3ed80c74 3ed97785     .3.>...>t..>.w.>
2401bc00:	3edae3e7 3edc5048 3eddbb5a 3edf23cd     ...>HP.>Z..>.#.>
2401bc10:	3ee0902e 3ee1f8a1 3ee35fc4 3ee4c836     ...>...>._.>6..>
2401bc20:	3ee62f5a 3ee797cc 3ee8fc50 3eea6373     Z/.>...>P..>sc.>
2401bc30:	3eebc7f7 3eed2c7c 3eee8fb0 3eeff434     ...>|,.>...>4..>
2401bc40:	3ef15769 3ef2bbed 3ef41c82 3ef57bc8     iW.>...>...>.{.>
2401bc50:	3ef6dc5d 3ef83ba3 3ef99c39 3efafb7f     ]..>.;.>9..>...>
2401bc60:	3efc5c14 3efdb76b 3eff1412 3f0037b5     .\.>k..>...>.7.?
2401bc70:	3f00e608 3f0193b4 3f024207 3f02edbb     ...?...?.B.?...?
2401bc80:	3f039a17 3f0447c3 3f04f228 3f059ddc     ...?.G.?(..?...?
2401bc90:	3f064a38 3f06f3f5 3f07a051 3f084a0e     8J.?...?Q..?.J.?
2401bca0:	3f08f3cb 3f099e30 3f0a47ed 3f0aefb3     ...?0..?.G.?...?
2401bcb0:	3f0b9820 3f0c41dd 3f0cea4b 3f0d9019      ..?.A.?K..?...?
2401bcc0:	3f0e37df 3f0ee04c 3f0f861a 3f102be9     .7.?L..?...?.+.?
2401bcd0:	3f10d1b7 3f11782d 3f121dfc 3f12c1d3     ...?-x.?...?...?
2401bce0:	3f136651 3f140a28 3f14ae00 3f1551d7     Qf.?(..?...?.Q.?
2401bcf0:	3f15f5ae 3f169835 3f173a15 3f17dbf5     ...?5..?.:.?...?
2401bd00:	3f187dd4 3f191fb4 3f19c044 3f1a602d     .}.?...?D..?-`.?
2401bd10:	3f1b020c 3f1b9ffd 3f1c3fe6 3f1cdfce     ...?...?.?.?...?
2401bd20:	3f1d7dbf 3f1e1bb0 3f1eba49 3f1f583a     .}.?...?I..?:X.?
2401bd30:	3f1ff62b 3f209225 3f212e1f 3f21ca19     +..?%. ?..!?..!?
2401bd40:	3f226613 3f23020c 3f239c0f 3f243611     .f"?..#?..#?.6$?
2401bd50:	3f24d014 3f256a16 3f260419 3f269c24     ..$?.j%?..&?$.&?
2401bd60:	3f27342f 3f27cc3a 3f286445 3f28fc50     /4'?:.'?Ed(?P.(?
2401bd70:	3f2991bc 3f2a27d0 3f2abde4 3f2b53f8     ..)?.'*?..*?.S+?
2401bd80:	3f2bea0c 3f2c7e28 3f2d1245 3f2da5b9     ..+?(~,?E.-?..-?
2401bd90:	3f2e39d6 3f2ecdf2 3f2f6018 3f2ff23d     .9.?...?.`/?=./?
2401bda0:	3f3083ba 3f3115df 3f31a60d 3f32363b     ..0?..1?..1?;62?
2401bdb0:	3f32c7b9 3f3355ef 3f33e61d 3f347454     ..2?.U3?..3?Tt4?
2401bdc0:	3f3503da 3f359210 3f361e4f 3f36abde     ..5?..5?O.6?..6?
2401bdd0:	3f37381d 3f37c3b5 3f384ff4 3f38dc33     .87?..7?.O8?3.8?
2401bde0:	3f3965d4 3f39f01c 3f3a79bc 3f3b0404     .e9?..9?.y:?..;?
2401bdf0:	3f3b8e4c 3f3c15f4 3f3c9e45 3f3d25ee     L.;?..<?E.<?.%=?
2401be00:	3f3dae3e 3f3e33f0 3f3eba49 3f3f3ffb     >.=?.3>?I.>?.???
2401be10:	3f3fc5ac 3f404a0e 3f40cfc0 3f415422     ..??.J@?..@?"TA?
2401be20:	3f41d5e5 3f425a47 3f42dc0a 3f435dcc     ..A?GZB?..B?.]C?
2401be30:	3f43e037 3f4461fa 3f44e1c6 3f456239     7.C?.aD?..D?9bE?
2401be40:	3f45e204 3f4661d0 3f46e04c 3f475e20     ..E?.aF?L.F? ^G?
2401be50:	3f47dbf5 3f4859c9 3f48d64d 3f495422     ..G?.YH?M.H?"TI?
2401be60:	3f49cfff 3f4a49e4 3f4ac5c1 3f4b404f     ..I?.IJ?..J?O@K?
2401be70:	3f4bba34 3f4c341a 3f4cac08 3f4d25ee     4.K?.4L?..L?.%M?
2401be80:	3f4d9ddc 3f4e13d3 3f4e8bc1 3f4f01b8     ..M?..N?..N?..O?
2401be90:	3f4f77af 3f4fee4e 3f50624e 3f50d845     .wO?N.O?NbP?E.P?
2401bea0:	3f514c44 3f51be4d 3f52324d 3f52a3ad     DLQ?M.Q?M2R?..R?
2401beb0:	3f5315b5 3f5387be 3f53f7cf 3f5469d7     ..S?..S?..S?.iT?
2401bec0:	3f54d9e8 3f554802 3f55b813 3f56262d     ..T?.HU?..U?-&V?
2401bed0:	3f569446 3f5701b8 3f576ddb 3f57d9fd     F.V?..W?.mW?..W?
2401bee0:	3f584620 3f58b242 3f591bc5 3f5985f0      FX?B.X?..Y?..Y?
2401bef0:	3f59f01c 3f5a5a47 3f5ac1d3 3f5b2a06     ..Y?GZZ?..Z?.*[?
2401bf00:	3f5b923a 3f5bf9c6 3f5c6003 3f5cc63f     :.[?..[?.`\??.\?
2401bf10:	3f5d2bd4 3f5d9019 3f5df3b6 3f5e57fb     .+]?..]?..]?.W^?
2401bf20:	3f5ebc41 3f5f1de7 3f5f822c 3f5fe3d2     A.^?.._?,._?.._?
2401bf30:	3f604428 3f60a3d7 3f610625 3f6163dc     (D`?..`?%.a?.ca?
2401bf40:	3f61c433 3f6221ea 3f628049 3f62de01     3.a?.!b?I.b?..b?
2401bf50:	3f6339c1 3f639629 3f63f1e9 3f644e51     .9c?).c?..c?QNd?
2401bf60:	3f64a81a 3f6501e2 3f655c53 3f65b61c     ..d?..e?S\e?..e?
2401bf70:	3f660ded 3f6665bf 3f66bc41 3f671412     ..f?.ef?A.f?..g?
2401bf80:	3f6769ec 3f67bfc6 3f681451 3f686a2b     .ig?..g?Q.h?+jh?
2401bf90:	3f68be0e 3f690ff9 3f6963dc 3f69b5c8     ..h?..i?.ci?..i?
2401bfa0:	3f6a07b3 3f6a584f 3f6aaa3b 3f6afa2f     ..j?OXj?;.j?/.j?
2401bfb0:	3f6b4a23 3f6b9820 3f6be61d 3f6c341a     #Jk? .k?..k?.4l?
2401bfc0:	3f6c8217 3f6cce1c 3f6d1a22 3f6d6627     ..l?..l?".m?'fm?
2401bfd0:	3f6db036 3f6dfc3b 3f6e4452 3f6e8db9     6.m?;.m?RDn?..n?
2401bfe0:	3f6ed5d0 3f6f1de7 3f6f65fe 3f6fae14     ..n?..o?.eo?..o?
2401bff0:	3f6ff434 3f703a54 3f707dd4 3f70c3f4     4.o?T:p?.}p?..p?
2401c000:	3f71081c 3f714a4d 3f718dce 3f71cfff     ..q?MJq?..q?..q?
2401c010:	3f721230 3f7251c2 3f7293f3 3f72d235     0.r?.Qr?..r?5.r?
2401c020:	3f7311c7 3f735200 3f739043 3f73cbe6     ..s?.Rs?C.s?..s?
2401c030:	3f740a28 3f7445cc 3f748217 3f74bdba     (.t?.Et?..t?..t?
2401c040:	3f74f80e 3f7531ba 3f756c0d 3f75a3c2     ..t?.1u?.lu?..u?
2401c050:	3f75dc1e 3f7613d3 3f764c30 3f7681ed     ..u?..v?0Lv?..v?
2401c060:	3f76b852 3f76ee0f 3f7721d5 3f775643     R.v?..v?.!w?CVw?
2401c070:	3f778a09 3f77bbd8 3f77f045 3f78201d     ..w?..w?E.w?. x?
2401c080:	3f7851ec 3f7881c3 3f78b242 3f78e219     .Qx?..x?B.x?..x?
2401c090:	3f790ff9 3f793dd9 3f796bba 3f799a41     ..y?.=y?.ky?A.y?
2401c0a0:	3f79c62a 3f79f213 3f7a1c04 3f7a47ed     *.y?..y?..z?.Gz?
2401c0b0:	3f7a71de 3f7a99d9 3f7ac3ca 3f7aebc4     .qz?..z?..z?..z?
2401c0c0:	3f7b11c7 3f7b39c1 3f7b5fc4 3f7b85c6     ..{?.9{?._{?..{?
2401c0d0:	3f7ba9d2 3f7bcfd5 3f7bf3e0 3f7c15f4     ..{?..{?..{?..|?
2401c0e0:	3f7c3a00 3f7c5c14 3f7c7c31 3f7c9e45     .:|?.\|?1||?E.|?
2401c0f0:	3f7cbdba 3f7cddd7 3f7cfbfc 3f7d1a22     ..|?..|?..|?".}?
2401c100:	3f7d3847 3f7d55c5 3f7d71f3 3f7d8e22     G8}?.U}?.q}?".}?
2401c110:	3f7daa50 3f7dc3df 3f7dde16 3f7df84d     P.}?..}?..}?M.}?
2401c120:	3f7e11dc 3f7e2a1b 3f7e41b3 3f7e57fb     ..~?.*~?.A~?.W~?
2401c130:	3f7e6e44 3f7e83e4 3f7e9a2c 3f7eadd6     Dn~?..~?,.~?..~?
2401c140:	3f7ec227 3f7ed5d0 3f7ee829 3f7ef9db     '.~?..~?).~?..~?
2401c150:	3f7f0c35 3f7f1de7 3f7f2e49 3f7f3e03     5..?...?I..?.>.?
2401c160:	3f7f4bc7 3f7f5a32 3f7f67f5 3f7f75b8     .K.?2Z.?.g.?.u.?
2401c170:	3f7f822c 3f7f8df8 3f7f99c4 3f7fa440     ,..?...?...?@..?
2401c180:	3f7fb00c 3f7fb7e9 3f7fc1be 3f7fca43     ...?...?...?C..?
2401c190:	3f7fd220 3f7fd806 3f7fdfe3 3f7fe5c9      ..?...?...?...?
2401c1a0:	3f7fe9b8 3f7fee4e 3f7ff23d 3f7ff62b     ...?N..?=..?+..?
2401c1b0:	3f7ffa1a 3f7ffc11 3f7ffc11 3f7ffe09     ...?...?...?...?
2401c1c0:	3f7ffe09 3f7ffe09 3f7ffc11 3f7ffc11     ...?...?...?...?
2401c1d0:	3f7ffa1a 3f7ff62b 3f7ff23d 3f7fee4e     ...?+..?=..?N..?
2401c1e0:	3f7fe9b8 3f7fe5c9 3f7fdfe3 3f7fd806     ...?...?...?...?
2401c1f0:	3f7fd220 3f7fca43 3f7fc1be 3f7fb7e9      ..?C..?...?...?
2401c200:	3f7fb00c 3f7fa440 3f7f99c4 3f7f8df8     ...?@..?...?...?
2401c210:	3f7f822c 3f7f75b8 3f7f67f5 3f7f5a32     ,..?.u.?.g.?2Z.?
2401c220:	3f7f4bc7 3f7f3e03 3f7f2e49 3f7f1de7     .K.?.>.?I..?...?
2401c230:	3f7f0c35 3f7ef9db 3f7ee829 3f7ed5d0     5..?..~?).~?..~?
2401c240:	3f7ec227 3f7eadd6 3f7e9a2c 3f7e83e4     '.~?..~?,.~?..~?
2401c250:	3f7e6e44 3f7e57fb 3f7e41b3 3f7e2a1b     Dn~?.W~?.A~?.*~?
2401c260:	3f7e11dc 3f7df84d 3f7dde16 3f7dc3df     ..~?M.}?..}?..}?
2401c270:	3f7daa50 3f7d8e22 3f7d71f3 3f7d55c5     P.}?".}?.q}?.U}?
2401c280:	3f7d3847 3f7d1a22 3f7cfbfc 3f7cddd7     G8}?".}?..|?..|?
2401c290:	3f7cbdba 3f7c9e45 3f7c7c31 3f7c5c14     ..|?E.|?1||?.\|?
2401c2a0:	3f7c3a00 3f7c15f4 3f7bf3e0 3f7bcfd5     .:|?..|?..{?..{?
2401c2b0:	3f7ba9d2 3f7b85c6 3f7b5fc4 3f7b39c1     ..{?..{?._{?.9{?
2401c2c0:	3f7b11c7 3f7aebc4 3f7ac3ca 3f7a99d9     ..{?..z?..z?..z?
2401c2d0:	3f7a71de 3f7a47ed 3f7a1c04 3f79f213     .qz?.Gz?..z?..y?
2401c2e0:	3f79c62a 3f799a41 3f796bba 3f793dd9     *.y?A.y?.ky?.=y?
2401c2f0:	3f790ff9 3f78e219 3f78b242 3f7881c3     ..y?..x?B.x?..x?
2401c300:	3f7851ec 3f78201d 3f77f045 3f77bbd8     .Qx?. x?E.w?..w?
2401c310:	3f778a09 3f775643 3f7721d5 3f76ee0f     ..w?CVw?.!w?..v?
2401c320:	3f76b852 3f7681ed 3f764c30 3f7613d3     R.v?..v?0Lv?..v?
2401c330:	3f75dc1e 3f75a3c2 3f756c0d 3f7531ba     ..u?..u?.lu?.1u?
2401c340:	3f74f80e 3f74bdba 3f748217 3f7445cc     ..t?..t?..t?.Et?
2401c350:	3f740a28 3f73cbe6 3f739043 3f735200     (.t?..s?C.s?.Rs?
2401c360:	3f7311c7 3f72d235 3f7293f3 3f7251c2     ..s?5.r?..r?.Qr?
2401c370:	3f721230 3f71cfff 3f718dce 3f714a4d     0.r?..q?..q?MJq?
2401c380:	3f71081c 3f70c3f4 3f707dd4 3f703a54     ..q?..p?.}p?T:p?
2401c390:	3f6ff434 3f6fae14 3f6f65fe 3f6f1de7     4.o?..o?.eo?..o?
2401c3a0:	3f6ed5d0 3f6e8db9 3f6e4452 3f6dfc3b     ..n?..n?RDn?;.m?
2401c3b0:	3f6db036 3f6d6627 3f6d1a22 3f6cce1c     6.m?'fm?".m?..l?
2401c3c0:	3f6c8217 3f6c341a 3f6be61d 3f6b9820     ..l?.4l?..k? .k?
2401c3d0:	3f6b4a23 3f6afa2f 3f6aaa3b 3f6a584f     #Jk?/.j?;.j?OXj?
2401c3e0:	3f6a07b3 3f69b5c8 3f6963dc 3f690ff9     ..j?..i?.ci?..i?
2401c3f0:	3f68be0e 3f686a2b 3f681451 3f67bfc6     ..h?+jh?Q.h?..g?
2401c400:	3f6769ec 3f671412 3f66bc41 3f6665bf     .ig?..g?A.f?.ef?
2401c410:	3f660ded 3f65b61c 3f655c53 3f6501e2     ..f?..e?S\e?..e?
2401c420:	3f64a81a 3f644e51 3f63f1e9 3f639629     ..d?QNd?..c?).c?
2401c430:	3f6339c1 3f62de01 3f628049 3f6221ea     .9c?..b?I.b?.!b?
2401c440:	3f61c433 3f6163dc 3f610625 3f60a3d7     3.a?.ca?%.a?..`?
2401c450:	3f604428 3f5fe3d2 3f5f822c 3f5f1de7     (D`?.._?,._?.._?
2401c460:	3f5ebc41 3f5e57fb 3f5df3b6 3f5d9019     A.^?.W^?..]?..]?
2401c470:	3f5d2bd4 3f5cc63f 3f5c6003 3f5bf9c6     .+]??.\?.`\?..[?
2401c480:	3f5b923a 3f5b2a06 3f5ac1d3 3f5a5a47     :.[?.*[?..Z?GZZ?
2401c490:	3f59f01c 3f5985f0 3f591bc5 3f58b242     ..Y?..Y?..Y?B.X?
2401c4a0:	3f584620 3f57d9fd 3f576ddb 3f5701b8      FX?..W?.mW?..W?
2401c4b0:	3f569446 3f56262d 3f55b813 3f554802     F.V?-&V?..U?.HU?
2401c4c0:	3f54d9e8 3f5469d7 3f53f7cf 3f5387be     ..T?.iT?..S?..S?
2401c4d0:	3f5315b5 3f52a3ad 3f52324d 3f51be4d     ..S?..R?M2R?M.Q?
2401c4e0:	3f514c44 3f50d845 3f50624e 3f4fee4e     DLQ?E.P?NbP?N.O?
2401c4f0:	3f4f77af 3f4f01b8 3f4e8bc1 3f4e13d3     .wO?..O?..N?..N?
2401c500:	3f4d9ddc 3f4d25ee 3f4cac08 3f4c341a     ..M?.%M?..L?.4L?
2401c510:	3f4bba34 3f4b404f 3f4ac5c1 3f4a49e4     4.K?O@K?..J?.IJ?
2401c520:	3f49cfff 3f495422 3f48d64d 3f4859c9     ..I?"TI?M.H?.YH?
2401c530:	3f47dbf5 3f475e20 3f46e04c 3f4661d0     ..G? ^G?L.F?.aF?
2401c540:	3f45e204 3f456239 3f44e1c6 3f4461fa     ..E?9bE?..D?.aD?
2401c550:	3f43e037 3f435dcc 3f42dc0a 3f425a47     7.C?.]C?..B?GZB?
2401c560:	3f41d5e5 3f415422 3f40cfc0 3f404a0e     ..A?"TA?..@?.J@?
2401c570:	3f3fc5ac 3f3f3ffb 3f3eba49 3f3e33f0     ..??.???I.>?.3>?
2401c580:	3f3dae3e 3f3d25ee 3f3c9e45 3f3c15f4     >.=?.%=?E.<?..<?
2401c590:	3f3b8e4c 3f3b0404 3f3a79bc 3f39f01c     L.;?..;?.y:?..9?
2401c5a0:	3f3965d4 3f38dc33 3f384ff4 3f37c3b5     .e9?3.8?.O8?..7?
2401c5b0:	3f37381d 3f36abde 3f361e4f 3f359210     .87?..6?O.6?..5?
2401c5c0:	3f3503da 3f347454 3f33e61d 3f3355ef     ..5?Tt4?..3?.U3?
2401c5d0:	3f32c7b9 3f32363b 3f31a60d 3f3115df     ..2?;62?..1?..1?
2401c5e0:	3f3083ba 3f2ff23d 3f2f6018 3f2ecdf2     ..0?=./?.`/?...?
2401c5f0:	3f2e39d6 3f2da5b9 3f2d1245 3f2c7e28     .9.?..-?E.-?(~,?
2401c600:	3f2bea0c 3f2b53f8 3f2abde4 3f2a27d0     ..+?.S+?..*?.'*?
2401c610:	3f2991bc 3f28fc50 3f286445 3f27cc3a     ..)?P.(?Ed(?:.'?
2401c620:	3f27342f 3f269c24 3f260419 3f256a16     /4'?$.&?..&?.j%?
2401c630:	3f24d014 3f243611 3f239c0f 3f23020c     ..$?.6$?..#?..#?
2401c640:	3f226613 3f21ca19 3f212e1f 3f209225     .f"?..!?..!?%. ?
2401c650:	3f1ff62b 3f1f583a 3f1eba49 3f1e1bb0     +..?:X.?I..?...?
2401c660:	3f1d7dbf 3f1cdfce 3f1c3fe6 3f1b9ffd     .}.?...?.?.?...?
2401c670:	3f1b020c 3f1a602d 3f19c044 3f191fb4     ...?-`.?D..?...?
2401c680:	3f187dd4 3f17dbf5 3f173a15 3f169835     .}.?...?.:.?5..?
2401c690:	3f15f5ae 3f1551d7 3f14ae00 3f140a28     ...?.Q.?...?(..?
2401c6a0:	3f136651 3f12c1d3 3f121dfc 3f11782d     Qf.?...?...?-x.?
2401c6b0:	3f10d1b7 3f102be9 3f0f861a 3f0ee04c     ...?.+.?...?L..?
2401c6c0:	3f0e37df 3f0d9019 3f0cea4b 3f0c41dd     .7.?...?K..?.A.?
2401c6d0:	3f0b9820 3f0aefb3 3f0a47ed 3f099e30      ..?...?.G.?0..?
2401c6e0:	3f08f3cb 3f084a0e 3f07a051 3f06f3f5     ...?.J.?Q..?...?
2401c6f0:	3f064a38 3f059ddc 3f04f228 3f0447c3     8J.?...?(..?.G.?
2401c700:	3f039a17 3f02edbb 3f024207 3f0193b4     ...?...?.B.?...?
2401c710:	3f00e608 3f0037b5 3eff1412 3efdb76b     ...?.7.?...>k..>
2401c720:	3efc5c14 3efafb7f 3ef99c39 3ef83ba3     .\.>...>9..>.;.>
2401c730:	3ef6dc5d 3ef57bc8 3ef41c82 3ef2bbed     ]..>.{.>...>...>
2401c740:	3ef15769 3eeff434 3eee8fb0 3eed2c7c     iW.>4..>...>|,.>
2401c750:	3eebc7f7 3eea6373 3ee8fc50 3ee797cc     ...>sc.>P..>...>
2401c760:	3ee62f5a 3ee4c836 3ee35fc4 3ee1f8a1     Z/.>6..>._.>...>
2401c770:	3ee0902e 3edf23cd 3eddbb5a 3edc5048     ...>.#.>Z..>HP.>
2401c780:	3edae3e7 3ed97785 3ed80c74 3ed6a012     ...>.w.>t..>...>
2401c790:	3ed533b1 3ed3c361 3ed2584f 3ed0e7ff     .3.>a..>OX.>...>
2401c7a0:	3ecf77af 3ece075f 3ecc985f 3ecb280f     .w.>_..>_..>.(.>
2401c7b0:	3ec9b7bf 3ec84381 3ec6d480 3ec56042     ...>.C.>...>B`.>
2401c7c0:	3ec3ec03 3ec277c4 3ec10386 3ebf9097     ...>.w.>...>...>
2401c7d0:	3ebe1c58 3ebca42b 3ebb2fec 3eb9b7bf     X..>+..>./.>...>
2401c7e0:	3eb83f92 3eb6cca3 3eb55476 3eb3d85a     .?.>...>vT.>Z..>
2401c7f0:	3eb2602d 3eb0e7ff 3eaf6fd2 3eadf3b6     -`.>...>.o.>...>
2401c800:	3eac7b89 3eaaff6d 3ea984a1 3ea80885     .{.>m..>...>...>
2401c810:	3ea68c69 3ea5104d 3ea39431 3ea21427     i..>M..>1..>'..>
2401c820:	3ea0980b 3e9f1bef 3e9d9be5 3e9c1bda     ...>...>...>...>
2401c830:	3e9a9bd0 3e991fb4 3e979fa9 3e961f9f     ...>...>...>...>
2401c840:	3e949ba6 3e931b9b 3e919b91 3e901798     ...>...>...>...>
2401c850:	3e8e978d 3e8d1394 3e8b938a 3e8a0f91     ...>...>...>...>
2401c860:	3e888b97 3e87079e 3e8583a5 3e83ffac     ...>...>...>...>
2401c870:	3e827bb3 3e80f7ba 3e7edfa4 3e7bd7b2     .{.>...>..~>..{>
2401c880:	3e78c7e3 3e75bff0 3e72b021 3e6fa051     ..x>..u>!.r>Q.o>
2401c890:	3e6c985f 3e698890 3e6678c0 3e6368f1     _.l>..i>.xf>.hc>
2401c8a0:	3e605921 3e5d46b2 3e5a36e3 3e571f36     !Y`>.F]>.6Z>6.W>
2401c8b0:	3e540f67 3e50ff97 3e4de7ea 3e4ad81b     g.T>..P>..M>..J>
2401c8c0:	3e47c06e 3e44a8c1 3e4198f2 3e3e8145     n.G>..D>..A>E.>>
2401c8d0:	3e3b66f9 3e384f4c 3e3537a0 3e3227d0     .f;>LO8>.75>.'2>
2401c8e0:	3e2f0846 3e2bf099 3e28d8ed 3e25c140     F./>..+>..(>@.%>
2401c8f0:	3e22a6f4 3e1f8f47 3e1c6fbd 3e195810     ..">G..>.o.>.X.>
2401c900:	3e163886 3e1320da 3e10092d 3e0ce704     .8.>. .>-..>...>
2401c910:	3e09c77a 3e06afcd 3e039043 3e0070b9     z..>...>C..>.p.>
2401c920:	3dfab218 3df46dc6 3dee2eb2 3de7ef9e     ...=.m.=...=...=
2401c930:	3de1b08a 3ddb7176 3dd53261 3dceee0f     ...=vq.=a2.=...=
2401c940:	3dc8aefb 3dc26fe7 3dbc30d3 3db5f1bf     ...=.o.=.0.=...=
2401c950:	3dafad6d 3da96e59 3da31f8a 3d9ce076     m..=Yn.=...=v..=
2401c960:	3d96a162 3d90624e 3d8a0e41 3d83cf2d     b..=Nb.=A..=-..=
2401c970:	3d7b2032 3d6e8295 3d62046c 3d557bc8     2 {=..n=l.b=.{U=
2401c980:	3d48de2b 3d3c6003 3d2fc265 3d23443d     +.H=.`<=e./==D#=
2401c990:	3d16bb99 3d0a1dfc 3cfb3fa7 3ce2046c     ...=...=.?.<l..<
2401c9a0:	3cc9081c 3cafb7e9 3c96bb99 3c7b00bd     ...<...<...<..{<
2401c9b0:	3c49081c 3c1691a7 3bc8de2b 3b47e282     ..I<...<+..;..G;
2401c9c0:	00000000 bb49d9d3 bbc9d9d3 bc170f7c     ......I.....|...
2401c9d0:	bc4985f0 bc7b7e91 bc96fa83 bcaff6d3     ..I..~{.........
2401c9e0:	bcc94706 bce24357 bcfb7e91 bd0a3d71     .G..WC...~..q=..
2401c9f0:	bd16db0e bd2363b2 bd2fe1da bd3c7f78     .....c#.../.x.<.
2401ca00:	bd48fda0 bd559b3d bd6223e2 bd6ea20a     ..H.=.U..#b...n.
2401ca10:	bd7b3fa7 bd83dee8 bd8a1dfc bd907208     .?{..........r..
2401ca20:	bd96b11c bd9cf030 bda32f45 bda97e13     ....0...E/...~..
2401ca30:	bdafc265 bdb60179 bdbc408e bdc27fa2     e...y....@......
2401ca40:	bdc8beb6 bdcefdca bdd5421c bddb8130     .........B..0...
2401ca50:	bde1c044 bde7ff58 bdee3e6c bdf47d80     D...X...l>...}..
2401ca60:	bdfac1d3 be007896 be039820 be06b7aa     .....x.. .......
2401ca70:	be09cf57 be0ceee1 be10110a be1328b7     W............(..
2401ca80:	be164064 be195fee be1c779a be1f9724     d@..._...w..$...
2401ca90:	be22aed1 be25c91d be28e0ca be2bf877     .."...%...(.w.+.
2401caa0:	be2f1023 be322fad be353f7d be38572a     #./../2.}?5.*W8.
2401cab0:	be3b6ed6 be3e8922 be41a0cf be44b09f     .n;.".>...A...D.
2401cac0:	be47c84b be4adff8 be4defc8 be510774     K.G...J...M.t.Q.
2401cad0:	be541744 be572713 be5a3ec0 be5d512f     D.T..'W..>Z./Q].
2401cae0:	be6060fe be6370ce be66809d be69906d     .``..pc...f.m.i.
2401caf0:	be6ca03c be6fa82f be72b7fe be75c7ce     <.l./.o...r...u.
2401cb00:	be78cfc0 be7bdf8f be7ee782 be80fba9     ..x...{...~.....
2401cb10:	be827fa2 be84039b be858794 be870b8d     ................
2401cb20:	be888f86 be8a137f be8b9778 be8d1783     ........x.......
2401cb30:	be8e9b7c be901b86 be919f80 be931f8a     |...............
2401cb40:	be949f95 be96238e be97a398 be9923a3     .....#.......#..
2401cb50:	be9a9fbe be9c1fc9 be9d9fd3 be9f1fde     ................
2401cb60:	bea09bfa bea21816 bea39820 bea5143c     ........ ...<...
2401cb70:	bea69058 bea80c74 bea98890 beab035c     X...t.......\...
2401cb80:	beac7f78 beadf7a5 beaf73c1 beb0ebee     x........s......
2401cb90:	beb2641b beb3dc48 beb55864 beb6d091     .d..H...dX......
2401cba0:	beb84381 beb9bbae bebb33db bebca81a     .C.......3......
2401cbb0:	bebe2047 bebf9485 bec10774 bec27bb3     G ......t....{..
2401cbc0:	bec3eff2 bec56430 bec6d86f bec8476f     ....0d..o...oG..
2401cbd0:	bec9bbae becb2bfe becc9c4e bece0c9e     .....+..N.......
2401cbe0:	becf7b9e bed0ebee bed25c3e bed3c89f     .{......>\......
2401cbf0:	bed537a0 bed6a401 bed81062 bed97b74     .7......b...t{..
2401cc00:	bedae7d5 bedc5437 beddc098 bedf27bb     ....7T.......'..
2401cc10:	bee0941d bee1fc8f bee363b2 bee4cc25     .........c..%...
2401cc20:	bee63498 bee79bbb bee9003f beea6762     .4......?...bg..
2401cc30:	beebcbe6 beed306a beee939f beeff823     ....j0......#...
2401cc40:	bef15ca7 bef2bfdb bef42071 bef57fb7     .\......q ......
2401cc50:	bef6e04c bef83f92 bef9a027 befaff6d     L....?..'...m...
2401cc60:	befc6003 befdbb5a beff1801 bf003a54     .`..Z.......T:..
2401cc70:	bf00e7ff bf019653 bf0243fe bf02efb3     ....S....C......
2401cc80:	bf039c0f bf0449ba bf04f41f bf059fd3     .....I..........
2401cc90:	bf064c30 bf06f5ed bf07a249 bf084c06     0L......I....L..
2401cca0:	bf08f5c3 bf09a027 bf0a49e4 bf0af252     ....'....I..R...
2401ccb0:	bf0b9a17 bf0c43d4 bf0cec42 bf0d9210     .....C..B.......
2401ccc0:	bf0e39d6 bf0ee243 bf0f8812 bf102de0     .9..C........-..
2401ccd0:	bf10d3ae bf117a25 bf121ff3 bf12c3ca     ....%z..........
2401cce0:	bf136849 bf140c20 bf14aff7 bf1553ce     Ih.. ........S..
2401ccf0:	bf15f84d bf169a2c bf173c0c bf17ddec     M...,....<......
2401cd00:	bf187fcc bf192253 bf19c23b bf1a6224     ....S"..;...$b..
2401cd10:	bf1b0404 bf1ba1f5 bf1c41dd bf1ce1c6     .........A......
2401cd20:	bf1d7fb7 bf1e1e4f bf1ebc41 bf1f5a32     ....O...A...2Z..
2401cd30:	bf1ff823 bf20941d bf213016 bf21cc10     #..... ..0!...!.
2401cd40:	bf22680a bf230404 bf239e06 bf243809     .h"...#...#..8$.
2401cd50:	bf24d20b bf256c0d bf260610 bf269e1b     ..$..l%...&...&.
2401cd60:	bf273626 bf27ce31 bf28663c bf28fe48     &6'.1.'.<f(.H.(.
2401cd70:	bf2993b4 bf2a29c7 bf2abfdb bf2b55ef     ..)..)*...*..U+.
2401cd80:	bf2bec03 bf2c801f bf2d143c bf2da7b1     ..+...,.<.-...-.
2401cd90:	bf2e3bcd bf2ecfea bf2f620f bf2ff434     .;.......b/.4./.
2401cda0:	bf3085b2 bf3117d7 bf31a805 bf323832     ..0...1...1.282.
2401cdb0:	bf32c9b0 bf3357e6 bf33e814 bf34764b     ..2..W3...3.Kv4.
2401cdc0:	bf3505d1 bf359408 bf362047 bf36add6     ..5...5.G 6...6.
2401cdd0:	bf373a15 bf37c5ac bf3851ec bf38de2b     .:7...7..Q8.+.8.
2401cde0:	bf3967cb bf39f213 bf3a7bb3 bf3b05fb     .g9...9..{:...;.
2401cdf0:	bf3b9043 bf3c17ec bf3ca03c bf3d27e5     C.;...<.<.<..'=.
2401ce00:	bf3db036 bf3e35e7 bf3ebc41 bf3f41f2     6.=..5>.A.>..A?.
2401ce10:	bf3fc84b bf404c06 bf40d1b7 bf415619     K.?..L@...@..VA.
2401ce20:	bf41d7dc bf425c3e bf42de01 bf435fc4     ..A.>\B...B.._C.
2401ce30:	bf43e22e bf4463f1 bf44e3bd bf456430     ..C..cD...D.0dE.
2401ce40:	bf45e3fc bf4663c7 bf46e243 bf476018     ..E..cF.C.F..`G.
2401ce50:	bf47ddec bf485bc0 bf48d845 bf495619     ..G..[H.E.H..VI.
2401ce60:	bf49d1f6 bf4a4bdc bf4ac7b9 bf4b4246     ..I..KJ...J.FBK.
2401ce70:	bf4bbc2c bf4c3611 bf4cae00 bf4d27e5     ,.K..6L...L..'M.
2401ce80:	bf4d9fd3 bf4e15ca bf4e8db9 bf4f03b0     ..M...N...N...O.
2401ce90:	bf4f7a4e bf4ff045 bf506445 bf50da3c     NzO.E.O.EdP.<.P.
2401cea0:	bf514e3c bf51c044 bf523444 bf52a64c     <NQ.D.Q.D4R.L.R.
2401ceb0:	bf5317ad bf5389b5 bf53f9c6 bf546bcf     ..S...S...S..kT.
2401cec0:	bf54dbe0 bf5549f9 bf55ba0a bf562824     ..T..IU...U.$(V.
2401ced0:	bf56963e bf5703b0 bf576fd2 bf57dbf5     >.V...W..oW...W.
2401cee0:	bf584817 bf58b439 bf591dbd bf5987e8     .HX.9.X...Y...Y.
2401cef0:	bf59f213 bf5a5c3e bf5ac3ca bf5b2bfe     ..Y.>\Z...Z..+[.
2401cf00:	bf5b9431 bf5bfbbd bf5c61fa bf5cc836     1.[...[..a\.6.\.
2401cf10:	bf5d2dcb bf5d9210 bf5df5ae bf5e59f3     .-]...]...]..Y^.
2401cf20:	bf5ebe38 bf5f1fde bf5f8423 bf5fe5c9     8.^..._.#._..._.
2401cf30:	bf604620 bf60a5ce bf61081c bf6165d4      F`...`...a..ea.
2401cf40:	bf61c62a bf6223e2 bf628241 bf62dff8     *.a..#b.A.b...b.
2401cf50:	bf633bb8 bf639820 bf63f3e0 bf645048     .;c. .c...c.HPd.
2401cf60:	bf64aa11 bf6503da bf655e4a bf65b813     ..d...e.J^e...e.
2401cf70:	bf660fe4 bf6667b6 bf66be38 bf671609     ..f..gf.8.f...g.
2401cf80:	bf676be3 bf67c1be bf681648 bf686c22     .kg...g.H.h."lh.
2401cf90:	bf68c005 bf6911f1 bf6965d4 bf69b7bf     ..h...i..ei...i.
2401cfa0:	bf6a0a52 bf6a5a47 bf6aac32 bf6afc26     R.j.GZj.2.j.&.j.
2401cfb0:	bf6b4c1b bf6b9a17 bf6be814 bf6c3611     .Lk...k...k..6l.
2401cfc0:	bf6c840e bf6cd014 bf6d1c19 bf6d681f     ..l...l...m..hm.
2401cfd0:	bf6db22d bf6dfe33 bf6e464a bf6e8fb0     -.m.3.m.JFn...n.
2401cfe0:	bf6ed7c7 bf6f1fde bf6f67f5 bf6fb00c     ..n...o..go...o.
2401cff0:	bf6ff62b bf703c4b bf707fcc bf70c5eb     +.o.K<p...p...p.
2401d000:	bf710a13 bf714c44 bf718fc5 bf71d1f6     ..q.DLq...q...q.
2401d010:	bf721427 bf7253b9 bf7295ea bf72d42c     '.r..Sr...r.,.r.
2401d020:	bf7313be bf7353f8 bf73923a bf73cddd     ..s..Ss.:.s...s.
2401d030:	bf740c20 bf7447c3 bf74840e bf74bfb1      .t..Gt...t...t.
2401d040:	bf74fa05 bf7533b1 bf756e05 bf75a5b9     ..t..3u..nu...u.
2401d050:	bf75de16 bf7615ca bf764e27 bf7683e4     ..u...v.'Nv...v.
2401d060:	bf76ba49 bf76f007 bf7723cd bf77583a     I.v...v..#w.:Xw.
2401d070:	bf778c00 bf77bdcf bf77f23d bf782214     ..w...w.=.w.."x.
2401d080:	bf7853e3 bf7883ba bf78b439 bf78e411     .Sx...x.9.x...x.
2401d090:	bf7911f1 bf793fd1 bf796db1 bf799c39     ..y..?y..my.9.y.
2401d0a0:	bf79c821 bf79f40a bf7a1dfc bf7a49e4     !.y...y...z..Iz.
2401d0b0:	bf7a73d6 bf7a9bd0 bf7ac5c1 bf7aedbb     .sz...z...z...z.
2401d0c0:	bf7b13be bf7b3bb8 bf7b61bb bf7b87be     ..{..;{..a{...{.
2401d0d0:	bf7babc9 bf7bd1cc bf7bf5d8 bf7c17ec     ..{...{...{...|.
2401d0e0:	bf7c3bf7 bf7c5e0b bf7c7e28 bf7ca03c     .;|..^|.(~|.<.|.
2401d0f0:	bf7cbfb1 bf7cdfce bf7cfdf4 bf7d1c19     ..|...|...|...}.
2401d100:	bf7d3a3f bf7d57bc bf7d73eb bf7d9019     ?:}..W}..s}...}.
2401d110:	bf7dac47 bf7dc5d6 bf7de00d bf7dfa44     G.}...}...}.D.}.
2401d120:	bf7e13d3 bf7e2c13 bf7e4452 bf7e59f3     ..~..,~.RD~..Y~.
2401d130:	bf7e703b bf7e85db bf7e9c24 bf7eafcd     ;p~...~.$.~...~.
2401d140:	bf7ec41e bf7ed7c7 bf7eea21 bf7efbd2     ..~...~.!.~...~.
2401d150:	bf7f0e2c bf7f1fde bf7f3040 bf7f3ffb     ,.......@0...?..
2401d160:	bf7f4dbe bf7f5c29 bf7f69ec bf7f77af     .M..)\...i...w..
2401d170:	bf7f8423 bf7f8fef bf7f9bbb bf7fa637     #...........7...
2401d180:	bf7fb203 bf7fb9e0 bf7fc3b5 bf7fcc3a     ............:...
2401d190:	bf7fd417 bf7fd9fd bf7fe1da bf7fe7c0     ................
2401d1a0:	bf7febaf bf7ff045 bf7ff434 bf7ff823     ....E...4...#...
2401d1b0:	bf7ffc11 bf7ffe09 bf7ffe09 bf800000     ................
2401d1c0:	bf800000 bf800000 bf7ffe09 bf7ffe09     ................
2401d1d0:	bf7ffc11 bf7ff823 bf7ff434 bf7ff045     ....#...4...E...
2401d1e0:	bf7febaf bf7fe7c0 bf7fe1da bf7fd9fd     ................
2401d1f0:	bf7fd417 bf7fcc3a bf7fc3b5 bf7fb9e0     ....:...........
2401d200:	bf7fb203 bf7fa637 bf7f9bbb bf7f8fef     ....7...........
2401d210:	bf7f8423 bf7f77af bf7f69ec bf7f5c29     #....w...i..)\..
2401d220:	bf7f4dbe bf7f3ffb bf7f3040 bf7f1fde     .M...?..@0......
2401d230:	bf7f0e2c bf7efbd2 bf7eea21 bf7ed7c7     ,.....~.!.~...~.
2401d240:	bf7ec41e bf7eafcd bf7e9c24 bf7e85db     ..~...~.$.~...~.
2401d250:	bf7e703b bf7e59f3 bf7e4452 bf7e2c13     ;p~..Y~.RD~..,~.
2401d260:	bf7e13d3 bf7dfa44 bf7de00d bf7dc5d6     ..~.D.}...}...}.
2401d270:	bf7dac47 bf7d9019 bf7d73eb bf7d57bc     G.}...}..s}..W}.
2401d280:	bf7d3a3f bf7d1c19 bf7cfdf4 bf7cdfce     ?:}...}...|...|.
2401d290:	bf7cbfb1 bf7ca03c bf7c7e28 bf7c5e0b     ..|.<.|.(~|..^|.
2401d2a0:	bf7c3bf7 bf7c17ec bf7bf5d8 bf7bd1cc     .;|...|...{...{.
2401d2b0:	bf7babc9 bf7b87be bf7b61bb bf7b3bb8     ..{...{..a{..;{.
2401d2c0:	bf7b13be bf7aedbb bf7ac5c1 bf7a9bd0     ..{...z...z...z.
2401d2d0:	bf7a73d6 bf7a49e4 bf7a1dfc bf79f40a     .sz..Iz...z...y.
2401d2e0:	bf79c821 bf799c39 bf796db1 bf793fd1     !.y.9.y..my..?y.
2401d2f0:	bf7911f1 bf78e411 bf78b439 bf7883ba     ..y...x.9.x...x.
2401d300:	bf7853e3 bf782214 bf77f23d bf77bdcf     .Sx.."x.=.w...w.
2401d310:	bf778c00 bf77583a bf7723cd bf76f007     ..w.:Xw..#w...v.
2401d320:	bf76ba49 bf7683e4 bf764e27 bf7615ca     I.v...v.'Nv...v.
2401d330:	bf75de16 bf75a5b9 bf756e05 bf7533b1     ..u...u..nu..3u.
2401d340:	bf74fa05 bf74bfb1 bf74840e bf7447c3     ..t...t...t..Gt.
2401d350:	bf740c20 bf73cddd bf73923a bf7353f8      .t...s.:.s..Ss.
2401d360:	bf7313be bf72d42c bf7295ea bf7253b9     ..s.,.r...r..Sr.
2401d370:	bf721427 bf71d1f6 bf718fc5 bf714c44     '.r...q...q.DLq.
2401d380:	bf710a13 bf70c5eb bf707fcc bf703c4b     ..q...p...p.K<p.
2401d390:	bf6ff62b bf6fb00c bf6f67f5 bf6f1fde     +.o...o..go...o.
2401d3a0:	bf6ed7c7 bf6e8fb0 bf6e464a bf6dfe33     ..n...n.JFn.3.m.
2401d3b0:	bf6db22d bf6d681f bf6d1c19 bf6cd014     -.m..hm...m...l.
2401d3c0:	bf6c840e bf6c3611 bf6be814 bf6b9a17     ..l..6l...k...k.
2401d3d0:	bf6b4c1b bf6afc26 bf6aac32 bf6a5a47     .Lk.&.j.2.j.GZj.
2401d3e0:	bf6a0a52 bf69b7bf bf6965d4 bf6911f1     R.j...i..ei...i.
2401d3f0:	bf68c005 bf686c22 bf681648 bf67c1be     ..h."lh.H.h...g.
2401d400:	bf676be3 bf671609 bf66be38 bf6667b6     .kg...g.8.f..gf.
2401d410:	bf660fe4 bf65b813 bf655e4a bf6503da     ..f...e.J^e...e.
2401d420:	bf64aa11 bf645048 bf63f3e0 bf639820     ..d.HPd...c. .c.
2401d430:	bf633bb8 bf62dff8 bf628241 bf6223e2     .;c...b.A.b..#b.
2401d440:	bf61c62a bf6165d4 bf61081c bf60a5ce     *.a..ea...a...`.
2401d450:	bf604620 bf5fe5c9 bf5f8423 bf5f1fde      F`..._.#._..._.
2401d460:	bf5ebe38 bf5e59f3 bf5df5ae bf5d9210     8.^..Y^...]...].
2401d470:	bf5d2dcb bf5cc836 bf5c61fa bf5bfbbd     .-].6.\..a\...[.
2401d480:	bf5b9431 bf5b2bfe bf5ac3ca bf5a5c3e     1.[..+[...Z.>\Z.
2401d490:	bf59f213 bf5987e8 bf591dbd bf58b439     ..Y...Y...Y.9.X.
2401d4a0:	bf584817 bf57dbf5 bf576fd2 bf5703b0     .HX...W..oW...W.
2401d4b0:	bf56963e bf562824 bf55ba0a bf5549f9     >.V.$(V...U..IU.
2401d4c0:	bf54dbe0 bf546bcf bf53f9c6 bf5389b5     ..T..kT...S...S.
2401d4d0:	bf5317ad bf52a64c bf523444 bf51c044     ..S.L.R.D4R.D.Q.
2401d4e0:	bf514e3c bf50da3c bf506445 bf4ff045     <NQ.<.P.EdP.E.O.
2401d4f0:	bf4f7a4e bf4f03b0 bf4e8db9 bf4e15ca     NzO...O...N...N.
2401d500:	bf4d9fd3 bf4d27e5 bf4cae00 bf4c3611     ..M..'M...L..6L.
2401d510:	bf4bbc2c bf4b4246 bf4ac7b9 bf4a4bdc     ,.K.FBK...J..KJ.
2401d520:	bf49d1f6 bf495619 bf48d845 bf485bc0     ..I..VI.E.H..[H.
2401d530:	bf47ddec bf476018 bf46e243 bf4663c7     ..G..`G.C.F..cF.
2401d540:	bf45e3fc bf456430 bf44e3bd bf4463f1     ..E.0dE...D..cD.
2401d550:	bf43e22e bf435fc4 bf42de01 bf425c3e     ..C.._C...B.>\B.
2401d560:	bf41d7dc bf415619 bf40d1b7 bf404c06     ..A..VA...@..L@.
2401d570:	bf3fc84b bf3f41f2 bf3ebc41 bf3e35e7     K.?..A?.A.>..5>.
2401d580:	bf3db036 bf3d27e5 bf3ca03c bf3c17ec     6.=..'=.<.<...<.
2401d590:	bf3b9043 bf3b05fb bf3a7bb3 bf39f213     C.;...;..{:...9.
2401d5a0:	bf3967cb bf38de2b bf3851ec bf37c5ac     .g9.+.8..Q8...7.
2401d5b0:	bf373a15 bf36add6 bf362047 bf359408     .:7...6.G 6...5.
2401d5c0:	bf3505d1 bf34764b bf33e814 bf3357e6     ..5.Kv4...3..W3.
2401d5d0:	bf32c9b0 bf323832 bf31a805 bf3117d7     ..2.282...1...1.
2401d5e0:	bf3085b2 bf2ff434 bf2f620f bf2ecfea     ..0.4./..b/.....
2401d5f0:	bf2e3bcd bf2da7b1 bf2d143c bf2c801f     .;....-.<.-...,.
2401d600:	bf2bec03 bf2b55ef bf2abfdb bf2a29c7     ..+..U+...*..)*.
2401d610:	bf2993b4 bf28fe48 bf28663c bf27ce31     ..).H.(.<f(.1.'.
2401d620:	bf273626 bf269e1b bf260610 bf256c0d     &6'...&...&..l%.
2401d630:	bf24d20b bf243809 bf239e06 bf230404     ..$..8$...#...#.
2401d640:	bf22680a bf21cc10 bf213016 bf20941d     .h"...!..0!... .
2401d650:	bf1ff823 bf1f5a32 bf1ebc41 bf1e1e4f     #...2Z..A...O...
2401d660:	bf1d7fb7 bf1ce1c6 bf1c41dd bf1ba1f5     .........A......
2401d670:	bf1b0404 bf1a6224 bf19c23b bf192253     ....$b..;...S"..
2401d680:	bf187fcc bf17ddec bf173c0c bf169a2c     .........<..,...
2401d690:	bf15f84d bf1553ce bf14aff7 bf140c20     M....S...... ...
2401d6a0:	bf136849 bf12c3ca bf121ff3 bf117a25     Ih..........%z..
2401d6b0:	bf10d3ae bf102de0 bf0f8812 bf0ee243     .....-......C...
2401d6c0:	bf0e39d6 bf0d9210 bf0cec42 bf0c43d4     .9......B....C..
2401d6d0:	bf0b9a17 bf0af252 bf0a49e4 bf09a027     ....R....I..'...
2401d6e0:	bf08f5c3 bf084c06 bf07a249 bf06f5ed     .....L..I.......
2401d6f0:	bf064c30 bf059fd3 bf04f41f bf0449ba     0L...........I..
2401d700:	bf039c0f bf02efb3 bf0243fe bf019653     .........C..S...
2401d710:	bf00e7ff bf003a54 beff1801 befdbb5a     ....T:......Z...
2401d720:	befc6003 befaff6d bef9a027 bef83f92     .`..m...'....?..
2401d730:	bef6e04c bef57fb7 bef42071 bef2bfdb     L.......q ......
2401d740:	bef15ca7 beeff823 beee939f beed306a     .\..#.......j0..
2401d750:	beebcbe6 beea6762 bee9003f bee79bbb     ....bg..?.......
2401d760:	bee63498 bee4cc25 bee363b2 bee1fc8f     .4..%....c......
2401d770:	bee0941d bedf27bb beddc098 bedc5437     .....'......7T..
2401d780:	bedae7d5 bed97b74 bed81062 bed6a401     ....t{..b.......
2401d790:	bed537a0 bed3c89f bed25c3e bed0ebee     .7......>\......
2401d7a0:	becf7b9e bece0c9e becc9c4e becb2bfe     .{......N....+..
2401d7b0:	bec9bbae bec8476f bec6d86f bec56430     ....oG..o...0d..
2401d7c0:	bec3eff2 bec27bb3 bec10774 bebf9485     .....{..t.......
2401d7d0:	bebe2047 bebca81a bebb33db beb9bbae     G .......3......
2401d7e0:	beb84381 beb6d091 beb55864 beb3dc48     .C......dX..H...
2401d7f0:	beb2641b beb0ebee beaf73c1 beadf7a5     .d.......s......
2401d800:	beac7f78 beab035c bea98890 bea80c74     x...\.......t...
2401d810:	bea69058 bea5143c bea39820 bea21816     X...<... .......
2401d820:	bea09bfa be9f1fde be9d9fd3 be9c1fc9     ................
2401d830:	be9a9fbe be9923a3 be97a398 be96238e     .....#.......#..
2401d840:	be949f95 be931f8a be919f80 be901b86     ................
2401d850:	be8e9b7c be8d1783 be8b9778 be8a137f     |.......x.......
2401d860:	be888f86 be870b8d be858794 be84039b     ................
2401d870:	be827fa2 be80fba9 be7ee782 be7bdf8f     ..........~...{.
2401d880:	be78cfc0 be75c7ce be72b7fe be6fa82f     ..x...u...r./.o.
2401d890:	be6ca03c be69906d be66809d be6370ce     <.l.m.i...f..pc.
2401d8a0:	be6060fe be5d512f be5a3ec0 be572713     .``./Q]..>Z..'W.
2401d8b0:	be541744 be510774 be4defc8 be4adff8     D.T.t.Q...M...J.
2401d8c0:	be47c84b be44b09f be41a0cf be3e8922     K.G...D...A.".>.
2401d8d0:	be3b6ed6 be38572a be353f7d be322fad     .n;.*W8.}?5../2.
2401d8e0:	be2f1023 be2bf877 be28e0ca be25c91d     #./.w.+...(...%.
2401d8f0:	be22aed1 be1f9724 be1c779a be195fee     ..".$....w..._..
2401d900:	be164064 be1328b7 be10110a be0ceee1     d@...(..........
2401d910:	be09cf57 be06b7aa be039820 be007896     W....... ....x..
2401d920:	bdfac1d3 bdf47d80 bdee3e6c bde7ff58     .....}..l>..X...
2401d930:	bde1c044 bddb8130 bdd5421c bdcefdca     D...0....B......
2401d940:	bdc8beb6 bdc27fa2 bdbc408e bdb60179     .........@..y...
2401d950:	bdafc265 bda97e13 bda32f45 bd9cf030     e....~..E/..0...
2401d960:	bd96b11c bd907208 bd8a1dfc bd83dee8     .....r..........
2401d970:	bd7b3fa7 bd6ea20a bd6223e2 bd559b3d     .?{...n..#b.=.U.
2401d980:	bd48fda0 bd3c7f78 bd2fe1da bd2363b2     ..H.x.<.../..c#.
2401d990:	bd16db0e bd0a3d71 bcfb7e91 bce24357     ....q=...~..WC..
2401d9a0:	bcc94706 bcaff6d3 bc96fa83 bc7b7e91     .G...........~{.
2401d9b0:	bc4985f0 bc170f7c bbc9d9d3 bb49d9d3     ..I.|.........I.

2401d9c0 <slope_dd_table>:
	...
2401da5c:	2cab8ce3 2d68347f 2deb01ac 2e544fe2     ...,.4h-...-.OT.
2401da6c:	2eb4d9a2 2f1478c0 2f6d355b 2fb9305e     .....x./[5m/^0./
2401da7c:	300d9bec 30546b62 309c713f 30e28342     ...0bkT0?q.0B..0
2401da8c:	31215d25 316277dc 319cb3d0 31d609f3     %]!1.wb1...1...1
2401da9c:	321068d1 3240ab9c 327e5e66 32a64673     .h.2..@2f^~2sF.2
2401daac:	32d7679c 330a5764 3330496c 335ef8ba     .g.2dW.3lI03..^3
2401dabc:	338c0709 33aeb9ae 33d8adc2 340592c9     ...3...3...3...4
2401dacc:	3423c86b 3447c905 347281d6 34927fa8     k.#4..G4..r4...4
2401dadc:	34b03812 34d3147a 34fbd406 3515a661     .8.4z..4...4a..5
2401daec:	353136ea 355120e8 3575f8a9 3590316c     .615. Q5..u5l1.5
2401dafc:	35a88b00 35c46df5 35e449d3 36044cb4     ...5.m.5.I.5.L.6
2401db0c:	3618f201 36305f16 364ae57f 3668de86     ...6._06..J6..h6
2401db1c:	368555ed 36985c1c 36adbc07 36c5b517     .U.6.\.6...6...6
2401db2c:	36e08c51 36fe8cae 371003cc 3722aaa7     Q..6...6...7.."7
2401db3c:	37376ab0 374e7796 37680929 37822de0     .j77.wN7).h7.-.7
2401db4c:	3791d827 37a3266e 37b63e57 37cb4867     '..7n&.7W>.7gH.7
2401db5c:	37e2701a 37fbe415 380beb2e 381b3e47     .p.7...7...8G>.8
2401db6c:	382c07fc 383e66f3 38527bee 386869e2     ..,8.f>8.{R8.ih8
2401db7c:	38802b0b 388d3423 389b6562 38aad54a     .+.8#4.8be.8J..8
2401db8c:	38bb9bce 38cdd25a 38e193ee 38f6fd38     ...8Z..8...88..8
2401db9c:	3907164c 3913a123 3921301d 392fd553     L..9#..9.0!9S./9
2401dbac:	393fa3cd 3950afad 39630e43 3976d600     ..?9..P9C.c9..v9
2401dbbc:	39860f46 39918074 399dcbac 39aafec7     F..9t..9...9...9
2401dbcc:	39b92855 39c857a7 39d89cd5 39ea08cb     U(.9.W.9...9...9
2401dbdc:	39fcad41 3a084e6f 3a12f592 3a1e5647     A..9oN.:...:GV.:
2401dbec:	3a2a7b43 3a376fc2 3a453f7f 3a53f6c4     C{*:.o7:.?E:..S:
2401dbfc:	3a63a266 3a744fcf 3a830681 3a8c744b     f.c:.Ot:...:Kt.:
2401dc0c:	3a9678ed 3aa11c4d 3aac66c8 3ab860eb     .x.:M..:.f.:.`.:
2401dc1c:	3ac513c6 3ad288a3 3ae0c93f 3aefdfc4     ...:...:?..:...:
2401dc2c:	3affd6a9 3b085c70 3b1148db 3b1ab683     ...:p\.;.H.;...;
2401dc3c:	3b24ab75 3b2f2e12 3b3a44e0 3b45f6af     u.$;../;.D:;..E;
2401dc4c:	3b524a8c 3b5f47b9 3b6cf5c4 3b7b5c7a     .JR;.G_;..l;z\{;
2401dc5c:	3b8541f6 3b8d3a34 3b959b48 3b9e699e     .A.;4:.;H..;.i.;
2401dc6c:	3ba7a9d0 3bb16098 3bbb92d5 3bc6458e     ...;.`.;...;.E.;
2401dc7c:	3bd17df1 3bdd4153 3be99532 3bf67f36     .}.;SA.;2..;6..;
2401dc8c:	3c020297 3c09168a 3c107e87 3c183db6     ...<...<.~.<.=.<
2401dc9c:	3c205754 3c28ceb6 3c31a742 3c3ae482     TW <..(<B.1<..:<
2401dcac:	3c448a08 3c4e9b84 3c591cbc 3c64118d     ..D<..N<..Y<..d<
2401dcbc:	3c6f7de7 3c7b65dd 3c83e6ca 3c8a5ca0     .}o<.e{<...<.\.<
2401dccc:	3c91169e 3c9816f8 3c9f5ff2 3ca6f3da     ...<...<._.<...<
2401dcdc:	3caed50a 3cb705eb 3cbf88ec 3cc8608c     ...<...<...<.`.<
2401dcec:	3cd18f5a 3cdb17e9 3ce4fcdf 3cef40eb     Z..<...<...<.@.<
2401dcfc:	3cf9e6c1 3d027898 3d083185 3d0e1f93     ...<.x.=.1.=...=
2401dd0c:	3d14443a 3d1aa0f3 3d213740 3d2808a3     :D.=...=@7!=..(=
2401dd1c:	3d2f16a6 3d3662de 3d3deede 3d45bc3f     ../=.b6=..==?.E=
2401dd2c:	3d4dcca4 3d5621b0 3d5ebd0a 3d67a063     ..M=.!V=..^=c.g=
2401dd3c:	3d70cd6d 3d7a45dc 3d8205b5 3d870fee     m.p=.Ez=...=...=
2401dd4c:	3d8c4276 3d919e34 3d97240a 3d9cd4e1     vB.=4..=.$.=...=
2401dd5c:	3da2b19e 3da8bb2d 3daef277 3db55868     ...=-..=w..=hX.=
2401dd6c:	3dbbedee 3dc2b3f6 3dc9ab70 3dd0d548     ...=...=p..=H..=
2401dd7c:	3dd83276 3ddfc3dd 3de78a7b 3def8734     v2.=...={..=4..=
2401dd8c:	3df7bb08 3e00136d 3e0465d4 3e08d526     ...=m..>.e.>&..>
2401dd9c:	3e0d61e8 3e120c86 3e16d57f 3e1bbd4c     .a.>...>...>L..>
2401ddac:	3e20c452 3e25eb16 3e2b3205 3e309997     R. >..%>.2+>..0>
2401ddbc:	3e362237 3e3bcc5f 3e319872 3e2786ea     7"6>_.;>r.1>..'>
2401ddcc:	3e1d9833 3e13ccb6 3e0a24e1 3e00a116     3..>...>.$.>...>
2401dddc:	3dee8386 3ddc0e97 3dc9e41b 3db804df     ...=...=...=...=
2401ddec:	3da6719c 3d952b10 3d8431ec 3d670dc3     .q.=.+.=.1.=..g=
2401ddfc:	3d465539 3d263b89 3d06c1eb 3ccfd33c     9UF=.;&=...=<..<
2401de0c:	3c936791 3c30861a 3b733efc bb513f96     .g.<..0<.>s;.?Q.
2401de1c:	bc22d4f0 bc875dd8 bcbc005c bcef5060     .."..]..\...`P..
2401de2c:	bd10a636 bd28f986 bd40a183 bd579d99     6.....(...@...W.
2401de3c:	bd6ded43 bd81c805 bd8c42c9 bd9666c0     C.m......B...f..
2401de4c:	bda033cd bda9a9d4 bdb2c8c6 bdbb909f     .3..............
2401de5c:	bdc4015e bdcc1b10 bdd3ddce bddb499d     ^............I..
2401de6c:	bde25ed0 bde91d73 bdef85ca bdf59818     .^..s...........
2401de7c:	bdfb54ad be005df4 be02e70c be0545dc     .T...].......E..
2401de8c:	be077a98 be09857e be0b66de be0d1ef5     .z..~....f......
2401de9c:	be0eae12 be10148d be1152be be1268fb     .........R...h..
2401deac:	be1357b1 be141f3c be14c00f be153a96     .W..<........:..
2401debc:	be158f49 be15bea1 be15c91d be15af3d     I...........=...
2401decc:	be15718f be15109e be148cff be13e73e     .q..........>...
2401dedc:	be131ffc be1237d5 be112f6f be10076b     .....7..o/..k...
2401deec:	be0ec079 be0d5b46 be0bd889 be0a38f5     y...F[.......8..
2401defc:	be087d41 be06a635 be04b487 be02a8ff     A}..5...........
2401df0c:	be008469 bdfc8f17 bdf7e671 bdf3107e     i.......q...~...
2401df1c:	bdee0eec bde8e34e bde38f6c bdde14f4     ....N...l.......
2401df2c:	bdd875ad bdd2b339 bdcccf6c bdc6cc11     .u..9...l.......
2401df3c:	bdc0aadf bdba6da6 bdb41633 bdada656     .....m..3...V...
2401df4c:	bda71fdb bda08496 bd99d658 bd9316f5     ........X.......
2401df5c:	bd8c483d bd856c05 bd7d0841 bd6f24b9     =H...l..A.}..$o.
2401df6c:	bd613118 bd5330fd bd4527fb bd3719aa     .1a..0S..'E...7.
2401df7c:	bd290997 bd1afb4c bd0cf249 bcfde417     ..).L...I.......
2401df8c:	bce1fc09 bcc63335 bcaa905d bc8f1a24     ....53..]...$...
2401df9c:	bc67ae45 bc319ba4 bbf8124f bb8e06b8     E.g...1.O.......
2401dfac:	ba94b4b6 3b04c42c 3ba88f58 3c06a1ae     ....,..;X..;...<
2401dfbc:	3c3833b9 3c68f2a8 3c8c69db 3ca3e62e     .38<..h<.i.<...<
2401dfcc:	3cbae930 3cd16de7 3ce76f86 3cfce965     0..<.m.<.o.<e..<
2401dfdc:	3d08eb87 3d131a16 3d1cfe50 3d26963a     ...=...=P..=:.&=
2401dfec:	3d2fdfea 3d38d996 3d418188 3d49d622     ../=..8=..A=".I=
2401dffc:	3d51d5e1 3d597f55 3d60d12c 3d67ca2c     ..Q=U.Y=,.`=,.g=
2401e00c:	3d6e692f 3d74ad36 3d7a954d 3d801052     /in=6.t=M.z=R..=
2401e01c:	3d82a73f 3d850f21 3d8747b2 3d8950c1     ?..=!..=.G.=.P.=
2401e02c:	3d8b2a24 3d8cd3bf 3d8e4d88 3d8f977c     $*.=...=.M.=|..=
2401e03c:	3d90b1a9 3d919c2a 3d925724 3d92e2cd     ...=*..=$W.=...=
2401e04c:	3d933f65 3d936d3a 3d936ca7 3d933e12     e?.=:m.=.l.=.>.=
2401e05c:	3d92e1ed 3d9258b9 3d91a301 3d90c15d     ...=.X.=...=]..=
2401e06c:	3d8fb46e 3d8e7ce3 3d8d1b75 3d8b90eb     n..=.|.=u..=...=
2401e07c:	3d89de10 3d8803c1 3d8602df 3d83dc59     ...=...=...=Y..=
2401e08c:	3d819125 3d7e4487 3d79217f 3d73bb51     %..=.D~=.!y=Q.s=
2401e09c:	3d6e1435 3d682e70 3d620c4f 3d5bb03d     5.n=p.h=O.b==.[=
2401e0ac:	3d551ca2 3d4e5401 3d4758dd 3d402dcd     ..U=.TN=.XG=.-@=
2401e0bc:	3d38d571 3d315270 3d29a77e 3d21d750     q.8=pR1=~.)=P.!=
2401e0cc:	3d19e4ae 3d11d258 3d09a31f 3d0159d7     ...=X..=...=.Y.=
2401e0dc:	3cf1f2a6 3ce108d9 3ccffbfc 3cbed1c8     ...<...<...<...<
2401e0ec:	3cad8ffb 3c9c3c46 3c8adc67 3c72ec11     ...<F<.<g..<..r<
2401e0fc:	3c501daf 3c2d58f4 3c0aa90b 3bd03236     ..P<.X-<...<62.;
2401e10c:	3b8b6844 3b0e141d 38cb48bd bb00327c     Dh.;...;.H.8|2..
2401e11c:	bb82b41e bbc48edb bc02ca95 bc22d996     ..............".
2401e12c:	bc426aa9 bc61744f bc7fed2b bc8ee61c     .jB.Ota.+.......
2401e13c:	bc9d8445 bcabccc8 bcb9bb83 bcc74c65     E...........eL..
2401e14c:	bcd47b92 bce1454f bceda601 bcf99a35     .{..OE......5...
2401e15c:	bd028f57 bd081822 bd0d6605 bd127797     W..."....f...w..
2401e16c:	bd174b8e bd1be0b1 bd2035de bd244a07     .K.......5 ..J$.
2401e17c:	bd281c39 bd2bab9a bd2ef75f bd31fee0     9.(...+._.....1.
2401e18c:	bd34c186 bd373ed1 bd397659 bd3b67d5     ..4..>7.Yv9..g;.
2401e19c:	bd3d130e bd3e77e5 bd3f9653 bd406e6d     ..=..w>.S.?.mn@.
2401e1ac:	bd410058 bd414c5b bd4152ce bd41141f     X.A.[LA..RA...A.
2401e1bc:	bd4090d7 bd3fc994 bd3ebf0b bd3d7203     ..@...?...>..r=.
2401e1cc:	bd3be366 bd3a1423 bd380548 bd35b7f3     f.;.#.:.H.8...5.
2401e1dc:	bd332d59 bd3066c5 bd2d658e bd2a2b27     Y-3..f0..e-.'+*.
2401e1ec:	bd26b90a bd2310cc bd1f3410 bd1b2484     ..&...#..4...$..
2401e1fc:	bd16e3f2 bd127424 bd0dd6fe bd090e6c     ....$t......l...
2401e20c:	bd041c6a bcfe05fa bcf38868 bce8c465     j.......h...e...
2401e21c:	bcddbe2c bcd27a2b bcc6fcc4 bcbb4a84     ,...+z.......J..
2401e22c:	bcaf67e7 bca35991 bc97241e bc8acc37     .g...Y...$..7...
2401e23c:	bc7cad1a bc638fa7 bc4a4990 bc30e439     ..|...c..IJ.9.0.
2401e24c:	bc176927 bbfbc383 bbc8aee6 bb95a735     'i..........5...
2401e25c:	bb457e2d bac02426 389a269e 3ad20ea2     -~E.&$...&.8...:
2401e26c:	3b4c6c55 3b976e69 3bc81ae8 3bf82a7a     UlL;in.;...;z*.;
2401e27c:	3c13c61c 3c2b17c6 3c42022e 3c587d5a     ...<..+<..B<Z}X<
2401e28c:	3c6e8193 3c8203a6 3c8c83a7 3c96bd36     ..n<...<...<6..<
2401e29c:	3ca0acee 3caa4f7f 3cb3a1b8 3cbca09a     ...<.O.<...<...<
2401e2ac:	3cc54935 3ccd98bf 3cd58c9f 3cdd2255     5I.<...<...<U".<
2401e2bc:	3ce45788 3ceb2a0a 3cf197d8 3cf79f03     .W.<.*.<...<...<
2401e2cc:	3cfd3de4 3d01396e 3d039e45 3d05ccdb     .=.<n9.=E..=...=
2401e2dc:	3d07c4a5 3d09852f 3d0b0e19 3d0c5f1c     ...=/..=...=._.=
2401e2ec:	3d0d7800 3d0e58ab 3d0f010f 3d0f713d     .x.=.X.=...==q.=
2401e2fc:	3d0fa94e 3d0fa97e 3d0f7219 3d0f0379     N..=~..=.r.=y..=
2401e30c:	3d0e5e14 3d0d8275 3d0c7135 3d0b2b07     .^.=u..=5q.=.+.=
2401e31c:	3d09b0ab 3d0802f9 3d0622dc 3d04114d     ...=...=.".=M..=
2401e32c:	3d01cf58 3cfebc3e 3cf97d9a 3cf3e54a     X..=>..<.}.<J..<
2401e33c:	3cedf5ed 3ce7b236 3ce11d0b 3cda3962     ...<6..<...<b9.<
2401e34c:	3cd30a49 3ccb92eb 3cc3d689 3cbbd889     I..<...<...<...<
2401e35c:	3cb39c55 3cab2573 3ca27774 3c99960e     U..<s%.<tw.<...<
2401e36c:	3c9084ee 3c8747e8 3c7bc589 3c68b2dc     ...<.G.<..{<..h<
2401e37c:	3c555f98 3c41d39f 3c2e16df 3c1a315e     ._U<..A<...<^1.<
2401e38c:	3c062b1f 3be41854 3bbbb916 3b934890     .+.<T..;...;.H.;
2401e39c:	3b55ad9c 3b04e786 3a517a74 b9de6c9f     ..U;...;tzQ:.l..
2401e3ac:	bad6fb9c bb3a9320 bb84777e bbab3999     .... .:.~w...9..
2401e3bc:	bbd18107 bbf73f2d bc0e32dc bc20734c     ....-?...2..Ls .
2401e3cc:	bc325a10 bc43e05f bc54ffcc bc65b201     .Z2._.C...T...e.
2401e3dc:	bc75f0bd bc82db17 bc8a7e43 bc91df26     ..u.....C~..&...
2401e3ec:	bc98fb19 bc9fcf94 bca65a37 bcac98b5     ........7Z......
2401e3fc:	bcb288e9 bcb828cb bcbd767e bcc2703d     .....(..~v..=p..
2401e40c:	bcc7146c bccb6193 bccf5654 bcd2f18f     l....a..TV......
2401e41c:	bcd63226 bcd91743 bcdba01a bcddcc19     &2..C...........
2401e42c:	bcdf9ac5 bce10bce bce21f0f bce2d486     ................
2401e43c:	bce32c50 bce326bc bce2c430 bce20543     P,...&..0...C...
2401e44c:	bce0eaac bcdf7546 bcdda613 bcdb7e30     ....Fu......0~..
2401e45c:	bcd8fee5 bcd6299d bcd2ffdd bccf8350     .....)......P...
2401e46c:	bccbb5c1 bcc79911 bcc32f55 bcbe7aa5     ........U/...z..
2401e47c:	bcb97d4a bcb4399e bcaeb20f bca8e938     J}...9......8...
2401e48c:	bca2e1bc bc9c9e5c bc9621eb bc8f6f54     ....\....!..To..
2401e49c:	bc88898c bc8173ae bc74619c bc65883a     .....s...at.:.e.
2401e4ac:	bc5661b6 bc46f4a6 bc3747a0 bc276179     .aV...F..G7.ya'.
2401e4bc:	bc1748f1 bc0704e7 bbed3888 bbcc2bef     .H.......8...+..
2401e4cc:	bbaaf1ed bb899876 bb505af2 bb0d7dc2     ....v....ZP..}..
2401e4dc:	ba956a35 b901c962 3a68c173 3af82d12     5j..b...s.h:.-.:
2401e4ec:	3b3d7b02 3b7e4323 3b9f2a54 3bbecad4     .{=;#C~;T*.;...;
2401e4fc:	3bddf65a 3bfca067 3c0d5e5e 3c1c1fb3     Z..;g..;^^.<...<
2401e50c:	3c2a8e5e 3c38a4ac 3c465d1c 3c53b25a     ^.*<..8<.]F<Z.S<
2401e51c:	3c609f32 3c6d1ebc 3c792c1c 3c826164     2.`<..m<.,y<da.<
2401e52c:	3c87ef32 3c8d3d65 3c924a0a 3c97133d     2..<e=.<.J.<=..<
2401e53c:	3c9b974b 3c9fd491 3ca3c999 3ca774f9     K..<...<...<.t.<
2401e54c:	3caad57c 3cadea03 3cb0b189 3cb32b3b     |..<...<...<;+.<
2401e55c:	3cb55659 3cb7324c 3cb8be9e 3cb9faf9     YV.<L2.<...<...<
2401e56c:	3cbae727 3cbb8313 3cbbced8 3cbbcaa1     '..<...<...<...<
2401e57c:	3cbb76be 3cbad3ab 3cb9e1f9 3cb8a25e     .v.<...<...<^..<
2401e58c:	3cb715b1 3cb53ce9 3cb3191d 3cb0ab79     ...<.<.<...<y..<
2401e59c:	3cadf556 3caaf821 3ca7b566 3ca42ed4     V..<!..<f..<...<
2401e5ac:	3ca06622 3c9c5d39 3c981606 3c9392a4     "f.<9].<...<...<
2401e5bc:	3c8ed535 3c89dff8 3c84b53c 3c7eaee7     5..<...<<..<..~<
2401e5cc:	3c739229 3c681964 3c5c49cd 3c5028c2     ).s<d.h<.I\<.(P<
2401e5dc:	3c43bbd7 3c37088b 3c2a14a7 3c1ce5df     ..C<..7<..*<...<
2401e5ec:	3c0f821f 3c01ef52 3be866e9 3bcca920     ...<R..<.f.; ..;
2401e5fc:	3bb0b170 3b948c0b 3b708a68 3b37d24c     p..;...;h.p;L.7;
2401e60c:	3afe1092 3a8c8999 395a0339 ba2b3541     ...:...:9.Z9A5+.
2401e61c:	bac5d765 bb1aa322 bb51dc09 bb843f93     e...".....Q..?..
2401e62c:	bb9f3abf bbb9d440 bbd400fe bbedb61a     .:..@...........
2401e63c:	bc03747a bc0fc796 bc1bcf51 bc2786c2     zt......Q.....'.
2401e64c:	bc32e92c bc3df1f3 bc489ca7 bc52e4ff     ,.2...=...H...R.
2401e65c:	bc5cc6eb bc663e8e bc6f482d bc77e04c     ..\..>f.-Ho.L.w.
2401e66c:	bc8001c8 bc83d77b bc876fc6 bc8ac952     ....{....o..R...
2401e67c:	bc8de2f2 bc90bb7f bc9351fc bc95a58e     .........Q......
2401e68c:	bc97b569 bc9980eb bc9b0788 bc9c48e1     i............H..
2401e69c:	bc9d449f bc9dfa9d bc9e6aca bc9e9537     .D.......j..7...
2401e6ac:	bc9e7a0e bc9e19a1 bc9d745a bc9c8abb     .z......Zt......
2401e6bc:	bc9b5d6e bc99ed37 bc983aef bc964795     n]..7....:...G..
2401e6cc:	bc941439 bc91a214 bc8ef26c bc8c06a4     9.......l.......
2401e6dc:	bc88e03e bc8580ce bc81ea05 bc7c3b4f     >...........O;|.
2401e6ec:	bc743b1b bc6bd749 bc6313ec bc59f529     .;t.I.k...c.).Y.
2401e6fc:	bc507f54 bc46b6de bc3ca06f bc3240a5     T.P...F.o.<..@2.
2401e70c:	bc279c5c bc1cb878 bc1199fe bc064604     \.'.x........F..
2401e71c:	bbf58369 bbde2497 bbc67a25 bbae8ec1     i....$..%z......
2401e72c:	bb966d28 bb7c4058 bb4b654c bb1a5ee6     (m..X@|.LeK..^..
2401e73c:	bad285db ba609c3b b8e41eb9 3a26e759     ....;.`.....Y.&:
2401e74c:	3ab4a7df 3b0a981f 3b3a7167 3b69cb06     ...:...;gq:;..i;
2401e75c:	3b8c4843 3ba356e1 3bba0776 3bd05052     CH.;.V.;v..;RP.;
2401e76c:	3be627f5 3bfb8518 3c082f5c 3c125608     .'.;...;\/.<.V.<
2401e77c:	3c1c324e 3c25c00e 3c2efb60 3c37e06c     N2.<..%<`..<l.7<
2401e78c:	3c406b8b 3c489941 3c50664a 3c57cf80     .k@<A.H<JfP<..W<
2401e79c:	3c5ed1e8 3c656ac9 3c6b9793 3c7155e3     ..^<.je<..k<.Uq<
2401e7ac:	3c76a396 3c7b7e9c 3c7fe548 3c81eafc     ..v<.~{<H..<...<
2401e7bc:	3c83a7b5 3c85282e 3c866bfa 3c8772c0     ...<.(.<.k.<.r.<
2401e7cc:	3c883c3a 3c88c840 3c8916d0 3c8927fd     :<.<@..<...<.'.<
2401e7dc:	3c88fbed 3c8892ec 3c87ed5f 3c870bc3     ...<...<_..<...<
2401e7ec:	3c85eeb2 3c8496d8 3c830508 3c813a22     ...<...<...<":.<
2401e7fc:	3c7e6e50 3c79fa62 3c751aca 3c6fd20a     Pn~<b.y<..u<..o<
2401e80c:	3c6a22f4 3c641056 3c5d9d4a 3c56cceb     ."j<V.d<J.]<..V<
2401e81c:	3c4fa2b5 3c48220d 3c404eaf 3c382c57     ..O<."H<.N@<W,8<
2401e82c:	3c2fbeea 3c270a70 3c1e1317 3c14dd0d     ../<p.'<...<...<
2401e83c:	3c0b6cae 3c01c667 3befdd71 3bdbd470     .l.<g..<q..;p..;
2401e84c:	3bc77b12 3bb2dabc 3b9dfcef 3b88eb3a     .{.;...;...;:..;
2401e85c:	3b675e85 3b3ca567 3b11be88 3acd7aa5     .^g;g.<;...;.z.:
2401e86c:	3a6ed4cd 3985cc53 b9d112eb ba8996b1     ..n:S..9........
2401e87c:	bade5cb1 bb193890 bb42d751 bb6bf83a     .\...8..Q.B.:.k.
2401e88c:	bb8a4498 bb9e3c34 bbb1da2f bbc51601     .D..4<../.......
2401e89c:	bbd7e750 bbea45f5 bbfc2a0a bc06c5ef     P....E...*......
2401e8ac:	bc0f3204 bc1755b0 bc1f2d82 bc26b62d     .2...U...-..-.&.
2401e8bc:	bc2dec8d bc34cda8 bc3b56a3 bc4184d0     ..-...4..V;...A.
2401e8cc:	bc4755b5 bc4cc6f8 bc51d677 bc568238     .UG...L.w.Q.8.V.
2401e8dc:	bc5ac86e bc5ea780 bc621df8 bc652ab2     n.Z...^...b..*e.
2401e8ec:	bc67cc82 bc6a02a8 bc6bcc77 bc6d2979     ..g...j.w.k.y)m.
2401e8fc:	bc6e1958 bc6e9c20 bc6eb1cf bc6e5ac7     X.n. .n...n..Zn.
2401e90c:	bc6d977d bc6c68b4 bc6acf37 bc68cc27     }.m..hl.7.j.'.h.
2401e91c:	bc6660bd bc638e70 bc6056cd bc5cbba3     .`f.p.c..V`...\.
2401e92c:	bc58bee9 bc5462b9 bc4fa96b bc4a955a     ..X..bT.k.O.Z.J.
2401e93c:	bc45292a bc3f679f bc395393 bc32f017     *)E..g?..S9...2.
2401e94c:	bc2c4050 bc254778 bc1e090c bc168888     P@,.xG%.........
2401e95c:	bc0ec98b bc06cfd1 bbfd3e55 bbec7701     ........U>...w..
2401e96c:	bbdb519e bbc9d647 bbb80d3c bba5feda     .Q..G...<.......
2401e97c:	bb93b393 bb8133f0 bb5d1124 bb37743a     .....3..$.].:t7.
2401e98c:	bb11a288 bad75b01 ba8b4d2e b9fcf9c6     .....[...M......
2401e99c:	38cae747 3a30add5 3aa39890 3aee514e     G..8..0:...:NQ.:
2401e9ac:	3b1c2fb2 3b40d0c4 3b64fb60 3b844fb3     ./.;..@;`.d;.O.;
2401e9bc:	3b95d672 3ba70a27 3bb7e335 3bc85a2a     r..;'..;5..;*Z.;
2401e9cc:	3bd867c9 3be8050f 3bf72b29 3c02e9c5     .g.;...;)+.;...<
2401e9dc:	3c09fbec 3c10c901 3c174e1e 3c1d887c     ...<...<.N.<|..<
2401e9ec:	3c23757d 3c2912a9 3c2e5da1 3c335440     }u#<..)<.].<@T3<
2401e9fc:	3c37f483 3c3c3c87 3c402aa8 3c43bd4f     ..7<.<<<.*@<O.C<
2401ea0c:	3c46f32f 3c49cb05 3c4c43db 3c4e5cda     /.F<..I<.CL<.\N<
2401ea1c:	3c50154c 3c516cba 3c5262d9 3c52f774     L.P<.lQ<.bR<t.R<
2401ea2c:	3c532a95 3c52fc7c 3c526d80 3c517e42     .*S<|.R<.mR<B~Q<
2401ea3c:	3c502f63 3c4e81ce 3c4c769b 3c4a0f0d     c/P<..N<.vL<..J<
2401ea4c:	3c474c70 3c44305c 3c40bc89 3c3cf2d0     pLG<\0D<..@<..<<
2401ea5c:	3c38d534 3c3465d8 3c2fa702 3c2a9b34     4.8<.e4<../<4.*<
2401ea6c:	3c2544f3 3c1fa6e9 3c19c3ed 3c139ee9     .D%<...<...<...<
2401ea7c:	3c0d3ae8 3c069b0d 3bff852f 3bf169b4     .:.<...</..;.i.;
2401ea8c:	3be2ea82 3bd40e97 3bc4dd1d 3bb55d56     ...;...;...;V].;
2401ea9c:	3ba596aa 3b95909e 3b8552c5 3b69c9a6     ...;...;.R.;..i;
2401eaac:	3b489d05 3b272f40 3b059000 3ac79dec     ..H;@/';...;...:
2401eabc:	3a83f7b6 3a00999a b7d0dec1 ba0d33e0     ...:...:.....3..
2401eacc:	ba899790 bacc1d9d bb0706d2 bb27a4c6     ..............'.
2401eadc:	bb47d9d1 bb679760 bb836789 bb92b96b     ..G.`.g..g..k...
2401eaec:	bba1ba76 bbb063f4 bbbeaf5b bbcc9653     v....c..[...S...
2401eafc:	bbda12b7 bbe71e95 bbf3b437 bbffce21     ........7...!...
2401eb0c:	bc05b38b bc0b3d09 bc10812f bc157dbe     .....=../....}..
2401eb1c:	bc1a309e bc1e97d6 bc22b197 bc267c36     .0........".6|&.
2401eb2c:	bc29f628 bc2d1e11 bc2ff2ac bc327304     (.)...-.../..s2.
2401eb3c:	bc349e17 bc367324 bc37f1a9 bc39191c     ..4.$s6...7...9.
2401eb4c:	bc39e945 bc3a6206 bc3a835f bc3a4d99     E.9..b:._.:..M:.
2401eb5c:	bc39c0f7 bc38de02 bc37a573 bc361815     ..9...8.s.7...6.
2401eb6c:	bc3436df bc3202f2 bc2f7d91 bc2ca834     .64...2..}/.4.,.
2401eb7c:	bc29845e bc2613c6 bc22583a bc1e53b9     ^.)...&.:X"..S..
2401eb8c:	bc1a0859 bc15784d bc10a5ed bc0b93a9     Y...Mx..........
2401eb9c:	bc064412 bc00b9cf bbf5ef48 bbea00d2     .D......H.......
2401ebac:	bbddae22 bbd0fd46 bbc3f472 bbb699fd     "...F...r.......
2401ebbc:	bba8f462 bb9b0a3d bb8ce240 bb7d066a     b...=...@...j.}.
2401ebcc:	bb5fe803 bb42772b bb24c1e3 bb06d644     .._.+wB...$.D...
2401ebdc:	bad184e5 ba952947 ba316bfc b9623b7d     ....G)...k1.};b.
2401ebec:	39801899 3a382d4c 3a97ce24 3ad310f0     ...9L-8:$..:...:
2401ebfc:	3b06e1cf 3b23e596 3b408676 3b5cb755     ...;..#;v.@;U.\;
2401ec0c:	3b786b4c 3b89cae3 3b971538 3ba40ea6     Lkx;...;8..;...;
2401ec1c:	3bb0b150 3bbcf791 3bc8dbeb 3bd45917     P..;...;...;.Y.;
2401ec2c:	3bdf6a00 3bea09c5 3bf433c4 3bfde38c     .j.;...;.3.;...;
2401ec3c:	3c038a7a 3c07e204 3c0bf68b 3c0fc659     z..<...<...<Y..<
2401ec4c:	3c134fd8 3c169192 3c198a36 3c1c3898     .O.<...<6..<.8.<
2401ec5c:	3c1e9bac 3c20b28c 3c227c76 3c23f8ce     ...<.. <v|"<..#<
2401ec6c:	3c252716 3c260706 3c269865 3c26db36     .'%<..&<e.&<6.&<
2401ec7c:	3c26cf82 3c267595 3c25cdda 3c24d8c8     ..&<.u&<..%<..$<
2401ec8c:	3c23971e 3c2209a5 3c203153 3c1e0f3c     ..#<.."<S1 <<..<
2401ec9c:	3c1ba49a 3c18f2c4 3c15fb37 3c12bf8c     ...<...<7..<...<
2401ecac:	3c0f417a 3c0b82d9 3c07859b 3c034bd2     zA.<...<...<.K.<
2401ecbc:	3bfdaf4b 3bf456bb 3bea92aa 3be06804     K..;.V.;...;.h.;
2401eccc:	3bd5dbdf 3bcaf37b 3bbfb445 3bb423c3     ...;{..;E..;.#.;
2401ecdc:	3ba847ac 3b9c25ca 3b8fc40e 3b832878     .G.;.%.;...;x(.;
2401ecec:	3b6cb257 3b52b8a8 3b38706c 3b1de641     W.l;..R;lp8;A..;
2401ecfc:	3b0326de 3ad07e10 3a9a7718 3a48a4fa     .&.;.~.:.w.:..H:
2401ed0c:	39b8a790 b87d2477 b9f73496 ba66d1a6     ...9w$}..4....f.
2401ed1c:	baa8a319 badd631d bb08c826 bb22893e     .....c..&...>.".
2401ed2c:	bb3be8e9 bb54db75 bb6d556a bb82a5cb     ..;.u.T.jUm.....
2401ed3c:	bb8e5984 bb99c08c bba4d5ba bbaf940f     .Y..............
2401ed4c:	bbb9f6b8 bbc3f912 bbcd96a6 bbd6cb35     ............5...
2401ed5c:	bbdf92b3 bbe7e94f bbefcb66 bbf73597     ....O...f....5..
2401ed6c:	bbfe24b8 bc024aef bc05432f bc07f9e2     .$...J../C......
2401ed7c:	bc0a6df2 bc0c9e66 bc0e8a69 bc103144     .m..f...i...D1..
2401ed8c:	bc119261 bc12ad50 bc1381be bc140f7a     a...P.......z...
2401ed9c:	bc145678 bc1456c9 bc1410a3 bc13845b     xV...V......[...
2401edac:	bc12b269 bc119b64 bc104003 bc0ea11f     i...d....@......
2401edbc:	bc0cbfae bc0a9cc6 bc08399d bc059782     .........9......
2401edcc:	bc02b7e6 bbff38a3 bbf88cda bbf16ff1     .....8.......o..
2401eddc:	bbe9e59b bbe1f1be bbd9986f bbd0ddef     ........o.......
2401edec:	bbc7c6ad bbbe573e bbb49461 bbaa82ef     ....>W..a.......
2401edfc:	bba027f3 bb95888a bb8aa9f4 bb7f2314     .'...........#..
2401ee0c:	bb688974 bb519219 bb3a482a bb22b6fe     t.h...Q.*H:...".
2401ee1c:	bb0ae9f6 bae5d927 bab594bc ba851dd9     ....'...........
2401ee2c:	ba291742 b98fd528 38c8e127 39f39dc5     B.).(...'..8...9
2401ee3c:	3a59ffea 3a9cc0eb 3acc13ea 3afae2b5     ..Y:...:...:...:
2401ee4c:	3b148bb5 3b2b4e44 3b41ae72 3b57a1e8     ...;DN+;r.A;..W;
2401ee5c:	3b6d1e80 3b810d2c 3b8b45ed 3b9534d5     ..m;,..;.E.;.4.;
2401ee6c:	3b9ed563 3ba8233d 3bb11a30 3bb9b63a     c..;=#.;0..;:..;
2401ee7c:	3bc1f384 3bc9ce6b 3bd14376 3bd84f68     ...;k..;vC.;hO.;
2401ee8c:	3bdeef33 3be51ffe 3beadf2b 3bf02a50     3..;...;+..;P*.;
2401ee9c:	3bf4ff3f 3bf95c04 3bfd3ee1 3c00532d     ?..;.\.;.>.;-S.<
2401eeac:	3c01c895 3c02ff27 3c03f67a 3c04ae4a     ...<'..<z..<J..<
2401eebc:	3c05266f 3c055edd 3c0557ac 3c05110c     o&.<.^.<.W.<...<
2401eecc:	3c048b50 3c03c6e6 3c02c45b 3c018459     P..<...<[..<Y..<
2401eedc:	3c0007a5 3bfc9e4a 3bf8b7aa 3bf45da2     ...<J..;...;.].;
2401eeec:	3bef929b 3bea5934 3be4b43b 3bdea6b8     ...;4Y.;;..;...;
2401eefc:	3bd833da 3bd15f01 3bca2bb7 3bc29db9     .3.;._.;.+.;...;
2401ef0c:	3bbab8e1 3bb2813a 3ba9faec 3ba12a47     ...;:..;...;G*.;
2401ef1c:	3b9813b5 3b8ebbc5 3b852720 3b76b50b     ...;...; '.;..v;
2401ef2c:	3b62b5a0 3b4e59d5 3b39abb3 3b24b552     ..b;.YN;..9;R.$;
2401ef3c:	3b0f80f4 3af431da 3ac90f39 3a9daee3     ...;.1.:9..:...:
2401ef4c:	3a644b87 3a0d11a8 395767d6 b904c749     .Kd:...:.gW9I...
2401ef5c:	b9efd05f ba4e1fe5 ba91d804 babc3819     _.....N......8..
2401ef6c:	bae61c32 bb07b853 bb1c1107 bb300ebc     2...S.........0.
2401ef7c:	bb43a81c bb56d415 bb6989cb bb7bc09e     ..C...V...i...{.
2401ef8c:	bb86b81e bb8f4845 bb978ce2 bb9f8238     ....EH......8...
2401ef9c:	bba724b2 bbae70e6 bbb56396 bbbbf9b2     .$...p...c......
2401efac:	bbc23055 bbc804d1 bbcd74a2 bbd27d77     U0.......t..w}..
2401efbc:	bbd71d35 bbdb51f6 bbdf1a04 bbe273e2     5....Q.......s..
2401efcc:	bbe55e47 bbe7d821 bbe9e097 bbeb7701     G^..!........w..
2401efdc:	bbec9af6 bbed4c3e bbed8adb bbed5706     ....>L.......W..
2401efec:	bbecb12c bbeb99f7 bbea123e bbe81b16     ,.......>.......
2401effc:	bbe5b5c3 bbe2e3bd bbdfa6b3 bbdc0083     ................
2401f00c:	bbd7f33c bbd38120 bbceac9d bbc9784f     <... .......Ox..
2401f01c:	bbc3e6fe bbbdfb9b bbb7b946 bbb12341     ........F...A#..
2401f02c:	bbaa3cf3 bba309ee bb9b8ddd bb93cc93     .<..............
2401f03c:	bb8bc9fa bb838a23 bb762260 bb64c6bf     ....#...`"v...d.
2401f04c:	bb530a0b bb40f50e bb2e90c8 bb1be643     ..S...@.....C...
2401f05c:	bb08feb5 baebc6b8 bac53b2a ba9e6d8b     ........*;...m..
2401f06c:	ba6ee152 ba20aeea b9a4d33c b786e4a2     R.n... .<.......
2401f07c:	399385e4 3a175f4f 3a6478df 3a98757a     ...9O_.:.xd:zu.:
2401f08c:	3abe489d 3ae3a3ee 3b043aeb 3b165684     .H.:...:.:.;.V.;
2401f09c:	3b281c3e 3b3983d6 3b4a8527 3b5b1859     >.(;..9;'.J;Y.[;
2401f0ac:	3b6b35bf 3b7ad5f5 3b84f8e7 3b8c4137     .5k;..z;...;7A.;
2401f0bc:	3b93409c 3b99f3f0 3ba0582f 3ba66a87     .@.;...;/X.;.j.;
2401f0cc:	3bac2845 3bb18ee8 3bb69c16 3bbb4da5     E(.;...;...;.M.;
2401f0dc:	3bbfa198 3bc39622 3bc729a4 3bca5aaa     ...;"..;.).;.Z.;
2401f0ec:	3bcd27fc 3bcf9088 3bd19373 3bd33011     .'.;...;s..;.0.;
2401f0fc:	3bd465ed 3bd534bd 3bd59c6c 3bd59d18     .e.;.4.;l..;...;
2401f10c:	3bd53710 3bd46ad1 3bd3390f 3bd1a2aa     .7.;.j.;.9.;...;
2401f11c:	3bcfa8b3 3bcd4c68 3bca8f3d 3bc772c8     ...;hL.;=..;.r.;
2401f12c:	3bc3f8d8 3bc02360 3bbbf47e 3bb76e7f     ...;`#.;~..;.n.;
2401f13c:	3bb293d1 3bad670e 3ba7eaf6 3ba2226a     ...;.g.;...;j".;
2401f14c:	3b9c106f 3b95b82c 3b8f1ce9 3b884208     o..;,..;...;.B.;
2401f15c:	3b812b07 3b73b70b 3b64ae67 3b5543ba     .+.;..s;g.d;.CU;
2401f16c:	3b457ebf 3b356755 3b250589 3b14617b     .~E;Ug5;..%;{a.;
2401f17c:	3b038369 3ae4e742 3ac27516 3a9fc137     i..;B..:.u.:7..:
2401f18c:	3a79b929 3a33b063 39db1457 391da1e7     ).y:c.3:W..9...9
2401f19c:	b8f49665 b9c88be8 ba298f84 ba6e4e4e     e.........).NNn.
2401f1ac:	ba9930c7 babad463 badc020e bafcaa1b     .0..c...........
2401f1bc:	bb0e5e93 bb1e160d bb2d7428 bb3c71b2     .^......(t-..q<.
2401f1cc:	bb4b07bb bb592f87 bb66e28d bb741a88     ..K../Y...f...t.
2401f1dc:	bb8068bb bb8680cb bb8c52b4 bb91dbda     .h.......R......
2401f1ec:	bb9719cb bb9c0a35 bba0aaf2 bba4fa04     ....5...........
2401f1fc:	bba8f593 bbac9bf3 bbafeba0 bbb2e346     ............F...
2401f20c:	bbb581b9 bbb7c5fb bbb9af37 bbbb3cc8     ........7....<..
2401f21c:	bbbc6e36 bbbd4335 bbbdbba4 bbbdd794     6n..5C..........
2401f22c:	bbbd973c bbbcfb08 bbbc0387 bbbab17b     <...........{...
2401f23c:	bbb905ce bbb70194 bbb4a60f bbb1f4a5     ................
2401f24c:	bbaeeee9 bbab9696 bba7ed89 bba3f5c7     ................
2401f25c:	bb9fb17a bb9b22f3 bb964ca0 bb91310f     z...."...L...1..
2401f26c:	bb8bd2f4 bb86351d bb805a72 bb748bfb     .....5..rZ....t.
2401f27c:	bb67f5bb bb5af896 bb4d9b29 bb3fe43e     ..g...Z.).M.>.?.
2401f28c:	bb31dabf bb2385bd bb14ec69 bb06160d     ..1...#.i.......
2401f29c:	baee1412 bacf9fb2 bab0de04 ba91de31     ............1...
2401f2ac:	ba655efd ba26c255 b9d00a03 b9251651     .^e.U.&.....Q.%.
2401f2bc:	38aaebf2 39a78bc9 3a11d582 3a4f6e79     ...8...9...:ynO:
2401f2cc:	3a86399e 3aa46355 3ac22608 3adf7387     .9.:Uc.:.&.:.s.:
2401f2dc:	3afc3df6 3b0c3be3 3b1a09db 3b27826e     .=.:.;.;...;n.';
2401f2ec:	3b349f51 3b415a71 3b4dadeb 3b599412     Q.4;qZA;..M;..Y;
2401f2fc:	3b65077d 3b7002ee 3b7a816f 3b823f28     }.e;..p;o.z;(?.;
2401f30c:	3b86fa8e 3b8b70cf 3b8f9ffb 3b93863e     ...;.p.;...;>..;
2401f31c:	3b9721f2 3b9a718c 3b9d73ae 3ba02723     .!.;.q.;.s.;#'.;
2401f32c:	3ba28ad6 3ba49ddc 3ba65f76 3ba7cf0b     ...;...;v_.;...;
2401f33c:	3ba8ec26 3ba9b681 3baa2dfc 3baa529e     &..;...;.-.;.R.;
2401f34c:	3baa2497 3ba9a43e 3ba8d217 3ba7aec8     .$.;>..;...;...;
2401f35c:	3ba63b1d 3ba4780f 3ba266b7 3ba00856     .;.;.x.;.f.;V..;
2401f36c:	3b9d5e4f 3b9a6a2d 3b972d97 3b93aa5f     O^.;-j.;.-.;_..;
2401f37c:	3b8fe272 3b8bd7dc 3b878ccd 3b83038d     r..;...;...;...;
2401f38c:	3b7c7d0b 3b72806e 3b68167b 3b5d449d     .}|;n.r;{.h;.D];
2401f39c:	3b52106e 3b467fac 3b3a984a 3b2e6054     n.R;..F;J.:;T`.;
2401f3ac:	3b21ddff 3b15179d 3b0813a0 3af5b11d     ..!;...;...;...:
2401f3bc:	3adada12 3abfaf72 3aa43eca 3a8895aa     ...:r..:.>.:...:
2401f3cc:	3a598376 3a21a14e 39d3409b 39466f4a     v.Y:N.!:.@.9JoF9
2401f3dc:	b7ca1a98 b97829fa b9eaec59 ba2c791f     .....)x.Y....y,.
2401f3ec:	ba62f8de ba8c6d9d baa7034b bac130b7     ..b..m..K....0..
2401f3fc:	badae981 baf4217a bb066661 bb126fe7     ....z!..af...o..
2401f40c:	bb1e27a6 bb298835 bb348c46 bb3f2ec8     .'..5.).F.4...?.
2401f41c:	bb496adc bb533bdf bb5c9d54 bb658b0a     .jI..;S.T.\...e.
2401f42c:	bb6e00fe bb75fb7c bb7d76fd bb823823     ..n.|.u..v}.#8..
2401f43c:	bb85722e bb886842 bb8b1923 bb8d83bd     .r..Bh..#.......
2401f44c:	bb8fa71d bb91826d bb931503 bb945e5a     ....m.......Z^..
2401f45c:	bb955e07 bb9613cf bb967f91 bb96a15b     .^..........[...
2401f46c:	bb967956 bb9607d2 bb954d44 bb944a42     Vy......DM..BJ..
2401f47c:	bb92ff88 bb916df1 bb8f967c bb8d7a4b     .....m..|...Kz..
2401f48c:	bb8b1a9b bb8878cf bb859662 bb8274f8     .....x..b....t..
2401f49c:	bb7e2c96 bb76f85e bb6f513a bb673b3c     .,~.^.v.:Qo.<;g.
2401f4ac:	bb5ebaba bb55d42e bb4c8c4b bb42e7e5     ..^...U.K.L...B.
2401f4bc:	bb38ec00 bb2e9dc9 bb24028b bb191fb2     ..8.......$.....
2401f4cc:	bb0dfad1 bb029989 baee0342 bad671df     ........B....q..
2401f4dc:	babe8ac0 baa659d8 ba8deb32 ba6a9608     .....Y..2.....j.
2401f4ec:	ba390ae4 ba074d78 b9aaec78 b90e768e     ..9.xM..x....v..
2401f4fc:	38623f05 397ed902 39e20272 3a21ecfa     .?b8..~9r..9..!:
2401f50c:	3a5261e7 3a81245a 3a98c533 3ab00835     .aR:Z$.:3..:5..:
2401f51c:	3ac6e252 3add48b5 3af330cb 3b04481f     R..:.H.:.0.:.H.;
2401f52c:	3b0eae88 3b18c6cb 3b228c36 3b2bfa44     ...;...;6.";D.+;
2401f53c:	3b350cab 3b3dbf3e 3b460e0e 3b4df563     ..5;>.=;..F;c.M;
2401f54c:	3b5571b3 3b5c7fae 3b631c3c 3b694481     .qU;..\;<.c;.Di;
2401f55c:	3b6ef5e0 3b742de9 3b78ea80 3b7d29b3     ..n;.-t;..x;.)};
2401f56c:	3b8074f0 3b8214c9 3b8373d3 3b849197     .t.;...;.s.;...;
2401f57c:	3b856dc2 3b86081e 3b866097 3b86773b     .m.;...;.`.;;w.;
2401f58c:	3b864c35 3b85dfd1 3b85327e 3b8444c7     5L.;...;~2.;.D.;
2401f59c:	3b831757 3b81aaf4 3b80008c 3b7c3240     W..;...;...;@2|;
2401f5ac:	3b77eba8 3b732fd2 3b6e016a 3b686363     ..w;./s;j.n;cch;
2401f5bc:	3b6258d9 3b5be51d 3b550bb1 3b4dd04b     .Xb;..[;..U;K.M;
2401f5cc:	3b4636ca 3b3e4332 3b35f9b7 3b2d5eb7     .6F;2C>;..5;.^-;
2401f5dc:	3b2476a9 3b1b462d 3b11d1fe 3b081f04     .v$;-F.;...;...;
2401f5ec:	3afc6450 3ae82109 3ad37e6d 3abe86ec     Pd.:.!.:m~.:...:
2401f5fc:	3aa94519 3a93c39f 3a7c1a7e 3a505997     .E.:...:~.|:.YP:
2401f60c:	3a245a40 39f0648f 3997eee3 38fdfbf4     @Z$:.d.9...9...8
2401f61c:	b845fe3b b96144a2 b9c7fdd9 ba0f53fe     ;.E..Da......S..
2401f62c:	ba3a3b69 ba64a083 ba873775 ba9bc95b     i;:...d.u7..[...
2401f63c:	baaffc18 bac3c61c bad71e12 bae9fad2     ................
2401f64c:	bafc5392 bb070fe1 bb0fab91 bb17f8df     .S..............
2401f65c:	bb1ff3f7 bb27993f bb2ee53d bb35d4ac     ....?.'.=.....5.
2401f66c:	bb3c6470 bb4291a9 bb4859a5 bb4db9e1     pd<...B..YH...M.
2401f67c:	bb52b015 bb573a30 bb5b5657 bb5f02e7     ..R.0:W.WV[..._.
2401f68c:	bb623e6c bb6507b9 bb675dd0 bb693ff5     l>b...e..]g..?i.
2401f69c:	bb6aad9a bb6ba679 bb6c2a76 bb6c39be     ..j.y.k.v*l..9l.
2401f6ac:	bb6bd4a9 bb6afbd5 bb69b00c bb67f25c     ..k...j...i.\.g.
2401f6bc:	bb65c3ff bb63266b bb601b4d bb5ca482     ..e.k&c.M.`...\.
2401f6cc:	bb58c41e bb547c66 bb4fcfcc bb4ac0f7     ..X.f|T...O...J.
2401f6dc:	bb4552b9 bb3f8811 bb39642d bb32ea5a     .RE...?.-d9.Z.2.
2401f6ec:	bb2c1e1a bb250304 bb1d9ce3 bb15ef9a     ..,...%.........
2401f6fc:	bb0dff2d bb05cfbd bafacb15 bae989e1     -...............
2401f70c:	bad7e4a5 bac5e47b bab3927a baa0f7ff     ....{...z.......
2401f71c:	ba8e1e66 ba761e63 ba4fa7d3 ba28ec5b     f...c.v...O.[.(.
2401f72c:	ba01ff44 b9b5e7bd b94f75e7 b84cf593     D........uO...L.
2401f73c:	38d11aa8 3981cf02 39ced488 3a0d98e5     ...8...9...9...:
2401f74c:	3a3360e6 3a58b00f 3a7d746f 3a90ce33     .`3:..X:ot}:3..:
2401f75c:	3aa28b63 3ab3e951 3ac4dfd5 3ad566e0     c..:Q..:...:.f.:
2401f76c:	3ae576bd 3af507ee 3b0209a3 3b0948e1     .v.:...:...;.H.;
2401f77c:	3b103e67 3b16e704 3b1d3fbd 3b2345b3     g>.;...;.?.;.E#;
2401f78c:	3b28f63f 3b2e4edd 3b334d41 3b37ef3d     ?.(;.N.;AM3;=.7;
2401f79c:	3b3c32e1 3b40166c 3b439841 3b46b709     .2<;l.@;A.C;..F;
2401f7ac:	3b49718e 3b4bc6d3 3b4db60e 3b4f3ea4     .qI;..K;..M;.>O;
2401f7bc:	3b506037 3b511a8f 3b516db5 3b5159d4     7`P;..Q;.mQ;.YQ;
2401f7cc:	3b50df5a 3b4ffedb 3b4eb929 3b4d0f39     Z.P;..O;).N;9.M;
2401f7dc:	3b4b023a 3b48938b 3b45c4b5 3b42976e     :.K;..H;..E;n.B;
2401f7ec:	3b3f0da5 3b3b2966 3b36ecef 3b325aa8     ..?;f);;..6;.Z2;
2401f7fc:	3b2d751d 3b283f06 3b22bb3d 3b1cecbe     .u-;.?(;=.";...;
2401f80c:	3b16d6b1 3b107c4b 3b09e0f7 3b03082e     ...;K|.;...;...;
2401f81c:	3af7eb09 3ae95964 3ada62f4 3acb0f77     ...:dY.:.b.:w..:
2401f82c:	3abb66d1 3aab7107 3a9b3641 3a8abebe     .f.:.q.:A6.:...:
2401f83c:	3a7425aa 3a5275cf 3a307ede 3a0e51d8     .%t:.uR:.~0:.Q.:
2401f84c:	39d7ff8e 39933374 391cc2dc 379ab728     ...9t3.9...9(..7
2401f85c:	b8eb32e1 b97dcb0b b9c27dbb ba02ba3d     .2....}..}..=...
2401f86c:	ba23d4aa ba447e29 ba64a707 ba821ff1     ..#.)~D...d.....
2401f87c:	ba919cd4 baa0c2d0 baaf8abf babdedae     ................
2401f88c:	bacbe4e8 bad969e1 bae6765b baf3045e     .....i..[v..^...
2401f89c:	baff0e2c bb054723 bb0abfc4 bb0fee86     ,...#G..........
2401f8ac:	bb14d126 bb196579 bb1da989 bb219b86     &...ye........!.
2401f8bc:	bb2539d0 bb2882df bb2b7571 bb2e105a     .9%...(.qu+.Z...
2401f8cc:	bb3052aa bb323b8d bb33ca6e bb34fed8     .R0..;2.n.3...4.
2401f8dc:	bb35d88c bb365773 bb367b9f bb364554     ..5.sW6..{6.TE6.
2401f8ec:	bb35b507 bb34cb4e bb3388f7 bb31eef2     ..5.N.4...3...1.
2401f8fc:	bb2ffe5c bb2db879 bb2b1ebd bb2832be     \./.y.-...+..2(.
2401f90c:	bb24f63b bb216b1b bb1d9368 bb197151     ;.$..k!.h...Qq..
2401f91c:	bb150723 bb105759 bb0b647c bb063143     #...YW..|d..C1..
2401f92c:	bb00c080 baf62a2d baea641e bade3508     ....-*...d...5..
2401f93c:	bad1a35c bac4b5b0 bab772b7 baa9e154     \........r..T...
2401f94c:	ba9c088a ba8def75 ba7f3a79 ba623274     ....u...y:..t2b.
2401f95c:	ba44d58b ba273294 ba095878 b9d6ac5d     ..D..2'.xX..]...
2401f96c:	b99a7567 b93c5407 b887a067 385194ab     gu...T<.g.....Q8
2401f97c:	392c10eb 39917c36 39cc70c8 3a0364bf     ..,96|.9.p.9.d.:
2401f98c:	3a20350d 3a3c9b61 3a588a19 3a73f3d3     .5 :a.<:..X:..s:
2401f99c:	3a8765c3 3a948236 3aa14919 3aadb461     .e.:6..:.I.:a..:
2401f9ac:	3ab9be52 3ac56149 3ad097ef 3adb5d1a     R..:Ia.:...:.].:
2401f9bc:	3ae5abe3 3aef7fa2 3af8d3f8 3b00d25f     ...:...:...:_..;
2401f9cc:	3b04f70b 3b08d635 3b0c6e34 3b0fbd89     ...;5..;4n.;...;
2401f9dc:	3b12c2d0 3b157cdd 3b17ea94 3b1a0b15     ...;.|.;...;...;
2401f9ec:	3b1bdd97 3b1d617f 3b1e965d 3b1f7be4     ...;.a.;]..;.{.;
2401f9fc:	3b2011ee 3b20587b 3b204fbd 3b1ff7fe     .. ;{X ;.O ;...;
2401fa0c:	3b1f51bb 3b1e5d8e 3b1d1c46 3b1b8ec1     .Q.;.].;F..;...;
2401fa1c:	3b19b612 3b179374 3b152830 3b1275ce     ...;t..;0(.;.u.;
2401fa2c:	3b0f7de2 3b0c4225 3b08c479 3b0506d9     .}.;%B.;y..;...;
2401fa3c:	3b010b5d 3af9a86f 3af0c77e 3ae778b1     ]..;o..:~..:.x.:
2401fa4c:	3addc119 3ad3a5eb 3ac92c84 3abe5a7f     ...:...:.,.:.Z.:
2401fa5c:	3ab33580 3aa7c36d 3a9c0a2f 3a900fe1     .5.:m..:/..:...:
2401fa6c:	3a83daaf 3a6ee1d1 3a55b1c2 3a3c3208     ...:..n:..U:.2<:
2401fa7c:	3a226f96 3a087770 39dcad54 39a834bd     .o":pw.:T..9.4.9
2401fa8c:	39673ea9 38fc1d03 37a86981 b8a722e2     .>g9...8.i.7."..
2401fa9c:	b93b99ec b9916ca1 b9c48e8c b9f719d9     ..;..l..........
2401faac:	ba147b0a ba2d0598 ba4520d2 ba5cc131     .{....-.. E.1.\.
2401fabc:	ba73db7c ba853262 ba902936 ba9acd18     |.s.b2..6)......
2401facc:	baa51918 baaf0874 bab89693 bac1bf1f     ....t...........
2401fadc:	baca7df9 bad2cf2c badaaf0e bae21a22     .}..,......."...
2401faec:	bae90d30 baef8545 baf57f9e bafaf9cb     0...E...........
2401fafc:	bafff19b bb023286 bb042938 bb05dc34     .....2..8)..4...
2401fb0c:	bb074ae2 bb0874d5 bb0959b9 bb09f964     .J...t...Y..d...
2401fb1c:	bb0a53d2 bb0a6914 bb0a396e bb09c537     .S...i..n9..7...
2401fb2c:	bb090cf3 bb081142 bb06d2e5 bb0552bb     ....B........R..
2401fb3c:	bb0391c5 bb019129 bafea447 baf9ac29     ....)...G...)...
2401fb4c:	baf43ce4 baee59a9 bae805d2 bae14507     .<...Y.......E..
2401fb5c:	bada1b03 bad28bc2 baca9b78 bac24e6f     ........x...oN..
2401fb6c:	bab9a926 bab0b03f baa76898 ba9dd705     &...?....h......
2401fb7c:	ba9400a0 ba89ea94 ba7f3436 ba6a2933     ........64..3)j.
2401fb8c:	ba54befa ba3f0092 ba28f91e ba12b3dd     ..T...?...(.....
2401fb9c:	b9f87839 b9cb3a78 b99dc541 b9605ecc     9x..x:..A....^`.
2401fbac:	b9051f62 b827e69e 384394ae 390b503a     b.....'...C8:P.9
2401fbbc:	39651b07 399f0cc9 39cb1042 39f68288     ..e9...9B..9...9
2401fbcc:	3a10a74d 3a25aff0 3a3a5115 3a4e80ec     M..:..%:.Q::..N:
2401fbdc:	3a6235dd 3a75669d 3a840519 3a8d0bed     .5b:.fu:...:...:
2401fbec:	3a95c3a1 3a9e2830 3aa635c5 3aade8ba     ...:0(.:.5.:...:
2401fbfc:	3ab53d8f 3abc3116 3ac2c02f 3ac8e808     .=.:.1.:/..:...:
2401fc0c:	3acea5f3 3ad3f78e 3ad8daa2 3add4d34     ...:...:...:4M.:
2401fc1c:	3ae14d7c 3ae4da01 3ae7f16b 3aea92b9     |M.:...:k..:...:
2401fc2c:	3aecbd0b 3aee6fcf 3aefaaae 3af06d80     ...:.o.:...:.m.:
2401fc3c:	3af0b86d 3af08bc4 3aefe81f 3aeece4c     m..:...:...:L..:
2401fc4c:	3aed3f4d 3aeb3c68 3ae8c721 3ae5e11b     M?.:h<.:!..:...:
2401fc5c:	3ae28c41 3adecab7 3ada9ec8 3ad60af5     A..:...:...:...:
2401fc6c:	3ad11201 3acbb6bc 3ac5fc4e 3abfe5e7     ...:...:N..:...:
2401fc7c:	3ab976f3 3ab2b301 3aab9dd3 3aa43b33     .v.:...:...:3;.:
2401fc8c:	3a9c8f3a 3a949ded 3a8c6ba2 3a83fc9c     :..:...:.k.:...:
2401fc9c:	3a76aac0 3a64f4e0 3a52e0da 3a407811     ..v:..d:..R:.x@:
2401fcac:	3a2dc40d 3a1ace6c 3a07a0e4 39e88a7a     ..-:l..:...:z..9
2401fcbc:	39c18a9c 399a55e0 39660015 391739a1     ...9.U.9..f9.9.9
2401fccc:	3890ff75 b6c0ce57 b8a8640d b921dc73     u..8W....d..s.!.
2401fcdc:	b96edf95 b99d8ae6 b9c32cfe b9e843d3     ..n......,...C..
2401fcec:	ba065ec5 ba18444c ba29c9f4 ba3ae76d     .^..LD....).m.:.
2401fcfc:	ba4b949f ba5bc9b4 ba6b7f1b ba7aad8d     ..K...[...k...z.
2401fd0c:	ba84a708 ba8bacf2 ba926559 ba98cd41     ........Ye..A...
2401fd1c:	ba9ee1be baa4a03b baaa0623 baaf112e     ....;...#.......
2401fd2c:	bab3bf3d bab80e69 babbfce0 babf8920     =...i....... ...
2401fd3c:	bac2b1d2 bac575c9 bac7d415 bac9cbf8     .....u..........
2401fd4c:	bacb5cf1 bacc8692 bacd48c9 bacda3a6     .\.......H......
2401fd5c:	bacd9767 bacd2483 bacc4ba6 bacb0db0     g....$...K......
2401fd6c:	bac96bab bac766dc bac500a6 bac23aab     .k...f.......:..
2401fd7c:	babf16bd babb96cd bab7bd01 bab38bab     ................
2401fd8c:	baaf053c baaa2c64 baa503db ba9f8e8c     <...d,..........
2401fd9c:	ba99cf8e ba93ca08 ba8d8155 ba86f8d8     ........U.......
2401fdac:	ba803418 ba726d83 ba64091a ba554299     .4...mr...d..BU.
2401fdbc:	ba4621d0 ba36aeac ba26f143 ba16f1c3     .!F...6.C.&.....
2401fdcc:	ba06b86f b9ec9b4b b9cb7398 b9aa0ab7     o...K....s......
2401fddc:	b988719a b94d727a b909e540 b88cbaa6     .q..zrM.@.......
2401fdec:	b63f1c5a 388037d9 3902ca92 3944eeb4     Z.?..7.8...9..D9
2401fdfc:	398333e8 39a38afe 39c36ce8 39e2ca3a     .3.9...9.l.9:..9
2401fe0c:	3a00c9ed 3a0fdd8a 3a1e98c3 3a2cf4a3     ...:...:...:..,:
2401fe1c:	3a3aea64 3a487383 3a5589b5 3a6226f0     d.::.sH:..U:.&b:
2401fe2c:	3a6e4573 3a79dfba 3a827848 3a87b984     sEn:..y:Hx.:...:
2401fe3c:	3a8cb143 3a915d4f 3a95bbbf 3a99caa8     C..:O].:...:...:
2401fe4c:	3a9d8867 3aa0f377 3aa40a83 3aa6cc54     g..:w..:...:T..:
2401fe5c:	3aa937f2 3aab4c8e 3aad0974 3aae6e2c     .7.:.L.:t..:,n.:
2401fe6c:	3aaf7a70 3ab02e17 3ab08928 3ab08be8     pz.:...:(..:...:
2401fe7c:	3ab036ae 3aaf8a0b 3aae86bc 3aad2da0     .6.:...:...:.-.:
2401fe8c:	3aab7fcb 3aa97e72 3aa72afd 3aa486dd     ...:r~.:.*.:...:
2401fe9c:	3aa193db 3a9e53b5 3a9ac876 3a96f42b     ...:.S.:v..:+..:
2401feac:	3a92d914 3a8e799a 3a89d831 3a84f776     ...:.y.:1..:v..:
2401febc:	3a7fb445 3a750620 3a69ea52 3a5e66e8     E..: .u:R.i:.f^:
2401fecc:	3a52821c 3a464252 3a39ae10 3a2ccc04     ..R:RBF:..9:..,:
2401fedc:	3a1fa2fa 3a1239d7 3a04979e 39ed86bd     ...:.9.:...:...9
2401feec:	39d18885 39b542ef 3998c478 3978373c     ...9.B.9x..9<7x9
2401fefc:	393eade3 390509e2 3896d060 378f2d25     ..>9...9`..8%-.7
2401ff0c:	b81d8479 b8c09f6c b918ca0d b950b460     y...l.......`.P.
2401ff1c:	b983f9b4 b99f361d b9ba0243 b9d4513a     .....6..C...:Q..
2401ff2c:	b9ee166e ba03a2cc ba0fe966 ba1bd93f     n.......f...?...
2401ff3c:	ba276cc3 ba329e92 ba3d6986 ba47c8af     .l'...2..i=...G.
2401ff4c:	ba51b75a ba5b3114 ba6431a8 ba6cb520     Z.Q..1[..1d. .l.
2401ff5c:	ba74b7cf ba7c3649 ba8196b4 ba84cd26     ..t.I6|.....&...
2401ff6c:	ba87bd34 ba8a65b9 ba8cc5b2 ba8edc49     4....e......I...
2401ff7c:	ba90a8c0 ba922a8f ba93614f ba944cb1     .....*..Oa...L..
2401ff8c:	ba94ecae ba95413d ba954a91 ba950909     ....=A...J......
2401ff9c:	ba947d14 ba93a756 ba928894 ba9121af     .}..V........!..
2401ffac:	ba8f73b7 ba8d7fd2 ba8b474f ba88cba7     .s......OG......
2401ffbc:	ba860e5e ba831122 ba7fab90 ba78bc68     ^...".......h.x.
2401ffcc:	ba7158db ba698524 ba6145bc ba589f43     .Xq.$.i..Ea.C.X.
2401ffdc:	ba4f968d ba463099 ba3c728e ba3261b9     ..O..0F..r<..a2.
2401ffec:	ba28038a ba1d5d92 ba127580 ba07511d     ..(..]...u...Q..
2401fffc:	b9f7ec8b b9e0d5e4 b9c96a4e b9b1b5ee     ........Nj......
2402000c:	b999c507 b981a3df b952bd9f b922046b     ..........R.k.".
2402001c:	b8e2698d b880ceac b77b4913 38032cd3     .i.......I{..,.8
2402002c:	38a1ffc1 3900d197 393028d6 395eee66     ...8...9.(09f.^9
2402003c:	398685bb 399d34dd 39b379a7 39c94968     ...9.4.9.y.9hI.9
2402004c:	39de99bc 39f3608e 3a03ca07 3a0d9569     ...9.`.9...:i..:
2402005c:	3a170de1 3a202f0f 3a28f4cc 3a315b1b     ...:./ :..(:.[1:
2402006c:	3a395e3e 3a40faa2 3a482cf7 3a4ef21f     >^9:..@:.,H:..N:
2402007c:	3a554737 3a5b299d 3a6096e7 3a658ceb     7GU:.)[:..`:..e:
2402008c:	3a6a09bc 3a6e0bb0 3a719159 3a749989     ..j:..n:Y.q:..t:
2402009c:	3a772356 3a792e15 3a7ab95b 3a7bc4fc     V#w:..y:[.z:..{:
240200ac:	3a7c5113 3a7c5df4 3a7bec34 3a7afcaa     .Q|:.]|:4.{:..z:
240200bc:	3a79906b 3a77a8c5 3a754748 3a726dba     k.y:..w:HGu:.mr:
240200cc:	3a6f1e21 3a6b5ab7 3a6725f0 3a628276     !.o:.Zk:.%g:v.b:
240200dc:	3a5d7327 3a57fb13 3a521d7c 3a4bddd5     's]:..W:|.R:..K:
240200ec:	3a453fb7 3a3e46ef 3a36f770 3a2f554d     .?E:.F>:p.6:MU/:
240200fc:	3a2764ca 3a1f2a3f 3a16aa32 3a0de93e     .d':?*.:2..:>..:
2402010c:	3a04ec18 39f76f25 39e4a125 39d17821     ...:%o.9%..9!x.9
2402011c:	39bdfe32 39aa3d84 39964063 39821123     2..9.=.9c@.9#..9
2402012c:	395b7452 39328bcb 39097d87 38c0bcb4     Rt[9..29.}.9...8
2402013c:	385d0c26 376403d4 b7d4ac5c b88653fe     &.]8..d7\....S..
2402014c:	b8d6d20d b9133ed6 b93a97d9 b96160fb     .....>....:..`a.
2402015c:	b983c3ae b9967c50 b9a8d169 b9baba46     ....P|..i...F...
2402016c:	b9cc2e69 b9dd259a b9ed97f9 b9fd7dde     i....%.......}..
2402017c:	ba066803 ba0dc3b9 ba14cec2 ba1b85f7     .h..............
2402018c:	ba21e663 ba27ed41 ba2d97fb ba32e42a     c.!.A.'...-.*.2.
2402019c:	ba37cf9f ba3c585d ba407c9a ba443ac0     ..7.]X<..|@..:D.
240201ac:	ba479171 ba4a7f83 ba4d0404 ba4f1e39     q.G...J...M.9.O.
240201bc:	ba50cd99 ba5211d8 ba52eada ba5358c0     ..P...R...R..XS.
240201cc:	ba535bda ba52f4b1 ba522404 ba50eac6     .[S...R..$R...P.
240201dc:	ba4f4a19 ba4d4357 ba4ad80c ba4809ef     .JO.WCM...J...H.
240201ec:	ba44daef ba414d20 ba3d62cb ba391e60     ..D. MA..b=.`.9.
240201fc:	ba34827b ba2f91e3 ba2a4f84 ba24be6d     {.4.../..O*.m.$.
2402020c:	ba1ee1d3 ba18bd11 ba12539b ba0ba908     .........S......
2402021c:	ba04c10b b9fb3eda b9ec9027 b9dd7df5     .....>..'....}..
2402022c:	b9ce105c b9be4f9d b9ae4418 b99df645     \....O...D..E...
2402023c:	b98d6ebc b9796c2e b957aa0f b935a890     .n...ly...W...5.
2402024c:	b9137931 b8e25ad7 b89dad63 b832198c     1y...Z..c.....2.
2402025c:	b724dca7 37be0f9f 38665f77 38b64657     ..$....7w_f8WF.8
2402026c:	38f8a6a3 391d180f 393d6160 395d1f9e     ...8...9`a=9..]9
2402027c:	397c4388 398d5f0f 399c4077 39aabef5     .C|9._.9w@.9...9
2402028c:	39b8d3b5 39c6782d 39d3a60c 39e0574c     ...9-x.9...9LW.9
2402029c:	39ec8627 39f82d28 3a01a391 3a06e79c     '..9(-.9...:...:
240202ac:	3a0be06d 3a108be3 3a14e810 3a18f328     m..:...:...:(..:
240202bc:	3a1cab8c 3a200fcb 3a231ea0 3a25d6f2     ...:.. :..#:..%:
240202cc:	3a2837d7 3a2a4090 3a2bf08d 3a2d476c     .7(:.@*:..+:lG-:
240202dc:	3a2e44f7 3a2ee929 3a2f3428 3a2f2645     .D.:)..:(4/:E&/:
240202ec:	3a2ebfff 3a2e0205 3a2ced2b 3a2b8275     ...:...:+.,:u.+:
240202fc:	3a29c30d 3a27b04b 3a254bab 3a2296d3     ..):K.':.K%:..":
2402030c:	3a1f9390 3a1c43d1 3a18a9ac 3a14c75b     ...:.C.:...:[..:
2402031c:	3a109f34 3a0c33b5 3a078773 3a029d27     4..:.3.:s..:'..:
2402032c:	39faef43 39f0339c 39e50d64 39d982d4     C..9.3.9d..9...9
2402033c:	39cd9a4a 39c15a4e 39b4c98c 39a7eed3     J..9NZ.9...9...9
2402034c:	399ad10c 398d7734 397fd0c0 39645779     ...94w.9...9yWd9
2402035c:	394890f0 392c8ba5 39105624 38e7fdf3     ..H9..,9$V.9...8
2402036c:	38af295f 386c970f 37f60540 361cec30     _).8..l8@..70..6
2402037c:	b7cd9758 b856946d b8a2a9ff b8d969d6     X...m.V......i..
2402038c:	b907b76a b9224f50 b93c6fb4 b9560bf9     j...PO"..o<...V.
2402039c:	b96f17e0 b983c3bc b98fa79e b99b3205     ..o..........2..
240203ac:	b9a65d8e b9b12512 b9bb83ab b9c574a3     .]...%.......t..
240203bc:	b9cef38d b9d7fc33 b9e08aa6 b9e89b36     ....3.......6...
240203cc:	b9f02a7f b9f73564 b9fdb901 ba01d965     .*..d5......e...
240203dc:	ba04903e ba07000a ba0927f1 ba0b073f     >........'..?...
240203ec:	ba0c9d67 ba0dea02 ba0eecce ba0fa5af     g...............
240203fc:	ba1014b0 ba1039ff ba1015f2 ba0fa903     .....9..........
2402040c:	ba0ef3ce ba0df718 ba0cb3c3 ba0b2ad9     .............*..
2402041c:	ba095d82 ba074d0c ba04fadf ba026888     .]...M.......h..
2402042c:	b9ff2f5e b9f9143a b9f28364 b9eb80df     ^/..:...d.......
2402043c:	b9e410d9 b9dc37b3 b9d3fa07 b9cb5c8c     .....7.......\..
2402044c:	b9c26430 b9b91603 b9af7739 b9a58d2b     0d......9w..+...
2402045c:	b99b5d4a b990ed30 b9864281 b976c601     J]..0....B....v.
2402046c:	b960a8ff b94a39c4 b933842d b91c942e     ..`..9J.-.3.....
2402047c:	b90575cb b8dc69fe b8adbbb9 b87df171     .u...i......q.}.
2402048c:	b82071d6 b786505f 36cde2b2 37ec1a00     .q ._P.....6...7
2402049c:	38519ba8 38961d60 38c2dec2 38eefbfc     ..Q8`..8...8...8
240204ac:	390d2fc3 39227a21 393752de 394baffd     ./.9!z"9.R79..K9
240204bc:	395f87cf 3972d0fb 3982c13e 398bc9d1     .._9..r9>..9...9
240204cc:	39947e12 399cda0a 39a4d9f6 39ac7a47     .~.9...9...9Gz.9
240204dc:	39b3b7a6 39ba8ef0 39c0fd3d 39c6ffdb     ...9...9=..9...9
240204ec:	39cc9456 39d1b879 39d66a46 39daa7f9     V..9y..9Fj.9...9
240204fc:	39de7016 39e1c159 39e49abe 39e6fb7c     .p.9Y..9...9|..9
2402050c:	39e8e30c 39ea5127 39eb45c0 39ebc10e     ...9'Q.9.E.9...9
2402051c:	39ebc37f 39eb4dc6 39ea60c9 39e8fdb3     ...9.M.9.`.9...9
2402052c:	39e725e3 39e4daf0 39e21eaf 39def331     .%.9...9...91..9
2402053c:	39db5aac 39d7579c 39d2eca7 39ce1ca7     .Z.9.W.9...9...9
2402054c:	39c8ea9f 39c359cb 39bd6d8d 39b7296b     ...9.Y.9.m.9k).9
2402055c:	39b0911f 39a9a87b 39a27383 399af651     ...9{..9.s.9Q..9
2402056c:	39933525 398b3456 3982f854 39750b61     %5.9V4.9T..9a.u9
2402057c:	3963c216 39521e2c 39402930 392decb8     ..c9,.R90)@9..-9
2402058c:	391b7290 3908c477 38ebd89c 38c5e7cf     .r.9w..9...8...8
2402059c:	389fca60 38732806 3826b0ca 37b4ac65     `..8.(s8..&8e..7
240205ac:	3663f186 b775b801 b8088b05 b852f262     ..c6..u.....b.R.
240205bc:	b88e3f90 b8b28670 b8d63bff b8f94ed7     .?..p....;...N..
240205cc:	b90dd6ff b91ea46f b92f07b4 b93ef913     ....o...../...>.
240205dc:	b94e7102 b95d6856 b96bd821 b979b9c2     .qN.Vh].!.k...y.
240205ec:	b983837f b989dcf1 b98fe664 b9959d3e     ........d...>...
240205fc:	b99aff0b b9a00988 b9a4baa5 b9a9107e     ............~...
2402060c:	b9ad0965 b9b0a3d8 b9b3de8f b9b6b86f     e...........o...
2402061c:	b9b93096 b9bb4651 b9bcf921 b9be48ba     .0..QF..!....H..
2402062c:	b9bf3508 b9bfbe22 b9bfe459 b9bfa82d     .5.."...Y...-...
2402063c:	b9bf0a4f b9be0ba2 b9bcad3b b9baf05d     O.......;...]...
2402064c:	b9b8d676 b9b6612b b9b39242 b9b06bb7     v...+a..B....k..
2402065c:	b9acefa3 b9a92058 b9a50044 b9a091fa     ....X ..D.......
2402066c:	b99bd83c b996d5e4 b9918dee b98c037a     <...........z...
2402067c:	b98639c4 b9803420 b973ec0c b96705f1     .9.. 4....s...g.
2402068c:	b959bd29 b94c1923 b93e2163 b92fdd91     ).Y.#.L.c!>.../.
2402069c:	b921556d b91290dc b90397c4 b8e8e444     mU!.........D...
240206ac:	b8ca5015 b8ab8303 b88c8d39 b85afda9     .P......9.....Z.
240206bc:	b81ccfdb b7bd6210 b70303e5 36e70675     .....b......u..6
240206cc:	37b42a48 3816bd46 3852bae2 3886f819     H*.7F..8..R8...8
240206dc:	38a42002 38c0c6e2 38dcdec3 38f85a22     . .8...8...8"Z.8
240206ec:	390995df 3916a369 39234f90 392f9464     ...9i..9.O#9d./9
240206fc:	393b6c2e 3946d189 3951bf40 395c3070     .l;9..F9@.Q9p0\9
2402070c:	39662082 396f8b0f 39786c1e 39805ff6     . f9..o9.lx9._.9
2402071c:	39844182 3987d924 398b257b 398e253f     .A.9$..9{%.9?%.9
2402072c:	3990d761 39933af1 39954f32 39971389     a..9.:.92O.9...9
2402073c:	39988789 3999aaec 399a7d9a 399affa5     ...9...9.}.9...9
2402074c:	399b3144 399b12d7 399aa4ea 3999e831     D1.9...9...91..9
2402075c:	3998dd84 399785e7 3995e280 3993f49e     ...9...9...9...9
2402076c:	3991bdab 398f3f43 398c7b1a 39897304     ...9C?.9.{.9.s.9
2402077c:	39862900 39829f20 397daf35 3975a984     .).9 ..95.}9..u9
2402078c:	396d3202 39644db3 395b01e3 395153ee     .2m9.Md9..[9.SQ9
2402079c:	39474972 393ce820 393235d7 3927389c     rIG9 .<9.529.8'9
240207ac:	391bf687 391075d1 3904bcca 38f1a39c     ...9.u.9...9...8
240207bc:	38d9769d 38c0ff92 38a84b88 388f6798     .v.8...8.K.8.g.8
240207cc:	386cc1b8 383a88dd 38083ec4 37abfada     ..l8..:8.>.8...7
240207dc:	370f7ab7 b6603dc7 b77e436f b7e15e9e     .z.7.=`.oC~..^..
240207ec:	b8214693 b8513e75 b8803f97 b89778c3     .F!.u>Q..?...x..
240207fc:	b8ae3f6a b8c4887e b8da4948 b8ef7769     j?..~...HI..iw..
2402080c:	b9020471 b90bf9fc b91597c1 b91ed950     q...........P...
2402081c:	b927ba74 b930372b b9384bbc b93ff49a     t.'.+70..K8...?.
2402082c:	b9472e78 b94df655 b9544959 b95a24fd     x.G.U.M.YIT..$Z.
2402083c:	b95f86fa b9646d45 b968d61f b96cc000     .._.Emd...h...l.
2402084c:	b97029ae b973122f b97578d2 b9775d22     .)p./.s..xu."]w.
2402085c:	b978bef5 b9799e60 b979fbc4 b979d7b7     ..x.`.y...y...y.
2402086c:	b979331c b9780f14 b9766cfd b9744e74     .3y...x..lv.tNt.
2402087c:	b971b55a b96ea3c7 b96b1c09 b96720bb     Z.q...n...k.. g.
2402088c:	b962b49b b95ddaa2 b9589604 b952ea21     ..b...]...X.!.R.
2402089c:	b94cda84 b9466aff b93f9f66 b9387be4     ..L..jF.f.?..{8.
240208ac:	b93104a1 b9293e0c b9212ca0 b918d501     ..1..>)..,!.....
240208bc:	b9103bf1 b907664b b8fcb1e2 b8ea31fc     .;..Kf.......1..
240208cc:	b8d756fb b8c42b3d b8b0b920 b89d0b25     .V..=+.. ...%...
240208dc:	b8892bda b86a4ba0 b8420746 b8199fcd     .+...Kj.F.B.....
240208ec:	b7e254a2 b79177aa b701a4cb 35f71cbf     .T...w.........5
240208fc:	373e5809 37ae33ea 37fc61b0 3824c729     .X>7.3.7.a.7).$8
2402090c:	384ac9be 387025da 388a649b 389c5103     ..J8.%p8.d.8.Q.8
2402091c:	38adcf82 38bed7bb 38cf619d 38df655e     ...8...8.a.8^e.8
2402092c:	38eedb9c 38fdbd31 390601ad 390cd3d2     ...81..8...9...9
2402093c:	39135207 3919797a 391f4782 3924b9ae     .R.9zy.9.G.9..$9
2402094c:	3929cdc4 392e81ba 3932d3bc 3936c227     ..)9...9..29'.69
2402095c:	393a4b9d 393d6ee1 39402b03 39427f35     .K:9.n=9.+@95.B9
2402096c:	39446aed 3945edda 394707d7 3947b909     .jD9..E9..G9..G9
2402097c:	394801ad 3947e252 39475bac 39466eac     ..H9R.G9.[G9.nF9
2402098c:	39451c71 3943664e 39414dcf 393ed49f     q.E9NfC9.MA9..>9
2402099c:	393bfca7 3938c7fe 393538de 393151c0     ..;9..89.859.Q19
240209ac:	392d152a 392885df 3923a6c0 391e7ae1     *.-9..(9..#9.z.9
240209bc:	39190560 39134992 390d4ad8 39070ccc     `..9.I.9.J.9...9
240209cc:	39009305 38f3c28c 38e5f6be 38d7ca83     ...9...8...8...8
240209dc:	38c945c0 38ba7096 38ab5339 389bf5f8     .E.8.p.89S.8...8
240209ec:	388c6133 38793ab2 385965d2 383954c1     3a.8.:y8.eY8.T98
240209fc:	3819188b 37f18460 37b0c53c 37602add     ...8`..7<..7.*`7
24020a0c:	36be59c1 b604b4d9 b720a1cf b78f781d     .Y.6...... ..x..
24020a1c:	b7cdec68 b805c73e b8241fdc b841f115     h...>.....$...A.
24020a2c:	b85f2c4a b87bc342 b88bd41c b89966ea     J,_.B.{......f..
24020a3c:	b8a6939d b8b35404 b8bfa233 b8cb7885     .....T..3....x..
24020a4c:	b8d6d191 b8e1a855 b8ebf7f7 b8f5bbf5     ....U...........
24020a5c:	b8fef02d b903c868 b907cd21 b90b84ae     -...h...!.......
24020a6c:	b90eeda2 b91206b3 b914cece b9174509     .............E..
24020a7c:	b919689e b91b3903 b91cb5c9 b91ddebb     .h...9..........
24020a8c:	b91eb3c3 b91f3503 b91f62c1 b91f3d78     .....5...b..x=..
24020a9c:	b91ec5b8 b91dfc50 b91ce22f b91b7878     ....P.../...xx..
24020aac:	b919c05e b917bb4f b9156ad8 b912d0ab     ^...O....j......
24020abc:	b90fee9b b90cc6ab b9095ae6 b905ad8c     .........Z......
24020acc:	b901c0fb b8fb2f2d b8f267ff b8e931af     ....-/...g...1..
24020adc:	b8df91d2 b8d58e0c b8cb2c3a b8c0726a     ........:,..jr..
24020aec:	b8b566c4 b8aa0f8f b89e7335 b8929832     .f......5s..2...
24020afc:	b886851d b874813e b85ba2db b8427c95     ....>.t...[..|B.
24020b0c:	b8291bfe b80f8eaf b7ebc488 b7b848a7     ..)..........H..
24020b1c:	b784c4bd b722a76f b67081f4 36275a21     ....o."...p.!Z'6
24020b2c:	370f0973 377344d0 37ab2b04 37dc05ba     s..7.Ds7.+.7...7
24020b3c:	38060d1f 381da863 3834c91b 384b6407     ...8c..8..48.dK8
24020b4c:	38616e40 3876dd41 3885d372 388fe0b3     @na8A.v8r..8...8
24020b5c:	389991be 38a2e21f 38abcda0 38b45045     ...8...8...8EP.8
24020b6c:	38bc6652 38c40c44 38cb3ee0 38d1fb2b     Rf.8D..8.>.8+..8
24020b7c:	38d83e5f 38de0618 38e35015 38e81a75     _>.8...8.P.8u..8
24020b8c:	38ec638d 38f029f9 38f36ca6 38f62ab7     .c.8.).8.l.8.*.8
24020b9c:	38f863b0 38fa1741 38fb4575 38fbee77     .c.8A..8uE.8w..8
24020bac:	38fc12f9 38fbb3ad 38fad1b5 38f96e5a     ...8...8...8Zn.8
24020bbc:	38f78b39 38f52a40 38f24d5e 38eef6fe     9..8@*.8^M.8...8
24020bcc:	38eb29a5 38e6e82c 38e23579 38dd14d3     .).8,..8y5.8...8
24020bdc:	38d789a9 38d19790 38cb4251 38c48dec     ...8...8QB.8...8
24020bec:	38bd7e82 38b61862 38ae5fff 38a659ed     .~.8b..8._.8.Y.8
24020bfc:	389e0ae6 389577bf 388ca569 388398ec     ...8.w.8i..8...8
24020c0c:	3874aed3 3861cc24 384e9452 383b11fb     ..t8$.a8R.N8..;8
24020c1c:	38274fd4 381358a0 37fe6e57 37d5ec8c     .O'8.X.8Wn.7...7
24020c2c:	37ad4181 378482ba 37378b5f 36cc7eb9     .A.7...7_.77.~.6
24020c3c:	35aa5cd1 b66c9886 b70aeca4 b759df59     .\.5..l.....Y.Y.
24020c4c:	b793eb2e b7ba5553 b7e01af3 b80294b8     ....SU..........
24020c5c:	b814b74f b8266c72 b837ab98 b8486c8a     O...rl&...7..lH.
24020c6c:	b858a75f b868547e b8776cad b882f483     _.X.~Th..lw.....
24020c7c:	b889e182 b8907a40 b896bbdc b89ca3a9     ....@z..........
24020c8c:	b8a22f2a b8a75c1c b8ac286a b8b0923c     */...\..j(..<...
24020c9c:	b8b497ee b8b83815 b8bb717b b8be4324     .....8..{q..$C..
24020cac:	b8c0ac4d b8c2ac68 b8c44322 b8c5705e     M...h..."C..^p..
24020cbc:	b8c63438 b8c68f02 b8c68146 b8c60bc1     84......F.......
24020ccc:	b8c52f69 b8c3ed65 b8c24712 b8c03dfd     i/..e....G...=..
24020cdc:	b8bdd3e7 b8bb0abc b8b7e49b b8b463d1     .............c..
24020cec:	b8b08ad0 b8ac5c3c b8a7dadd b8a309a1     ....<\..........
24020cfc:	b89deb9c b8988406 b892d638 b88ce5a8     ........8.......
24020d0c:	b886b5e9 b8804aac b8734f6e b865a1d7     .....J..nOs...e.
24020d1c:	b8579471 b8492f4b b83a7a90 b82b7e83     q.W.K/I..z:..~+.
24020d2c:	b81c4382 b80cd1fe b7fa64dd b7dadac1     .C.......d......
24020d3c:	b7bb16b4 b79b29d0 b7764a40 b736334d     .....)..@Jv.M36.
24020d4c:	b6ec60fb b6598d4e 351130b4 369023c4     .`..N.Y..0.5.#.6
24020d5c:	370678eb 3744286a 3780809d 379e7272     .x.7j(D7...7rr.7
24020d6c:	37bbdad6 37d8ab3a 37f4d599 38082622     ...7:..7...7"&.8
24020d7c:	38158109 38227525 382efc61 383b10eb     ...8%u"8a..8..;8
24020d8c:	3846ad32 3851cbf4 385c683b 38667d58     2.F8..Q8;h\8X}f8
24020d9c:	387006f5 38790106 3880b3ea 38849bfc     ..p8..y8...8...8
24020dac:	38883736 388b8439 388e81d8 38912f0c     67.89..8...8./.8
24020dbc:	38938b00 38959507 38974ca1 3898b17c     ...8...8.L.8|..8
24020dcc:	3899c373 389a828a 389aeef0 389b0905     s..8...8...8...8
24020ddc:	389ad14e 389a487b 38996f6a 3898471b     N..8{H.8jo.8.G.8
24020dec:	3896d0bc 38950d9d 3892ff38 3890a72d     ...8...88..8-..8
24020dfc:	388e073a 388b2146 3887f754 38848b8d     :..8F!.8T..8...8
24020e0c:	3880e036 3879ef60 3871a8f5 3868f25d     6..8`.y8..q8].h8
24020e1c:	385fd0fb 38564a62 384c6452 384224ad     .._8bJV8RdL8.$B8
24020e2c:	38379181 382cb0fb 38218960 38162116     ..78..,8`.!8.!.8
24020e3c:	380a7e9a 37fd50eb 37e54a8c 37ccf772     .~.8.P.7.J.7r..7
24020e4c:	37b464f3 379ba081 3782b787 37536ee5     .d.7...7...7.nS7
24020e5c:	37215b2d 36de9d0e 36758d3a 353b3a04     -[!7...6:.u6.:;5
24020e6c:	b6169ad7 b6ad2480 b706f5f4 b736b943     .....$......C.6.
24020e7c:	b765c40d b789ff6a b7a0a95c b7b6d4aa     ..e.j...\.......
24020e8c:	b7cc7693 b7e1849b b7f5f4bc b804dea3     .v..............
24020e9c:	b80e6a7f b8179987 b820678c b828d09b     .j.......g ...(.
24020eac:	b830d0fc b8386531 b83f8a05 b8463c7c     ..0.1e8...?.|<F.
24020ebc:	b84c79e1 b8523fbc b8578be2 b85c5c60     .yL..?R...W.`\\.
24020ecc:	b860af94 b864841b b867d8d7 b86aacf3     ..`...d...g...j.
24020edc:	b86cffe1 b86ed150 b870213e b870efe8     ..l.P.n.>!p...p.
24020eec:	b8713dd1 b8710bbd b8705ab9 b86f2c0b     .=q...q..Zp..,o.
24020efc:	b86d813b b86b5c17 b868bea2 b865ab1e     ;.m..\k...h...e.
24020f0c:	b862240c b85e2c1b b859c63c b854f591     .$b..,^.<.Y...T.
24020f1c:	b84fbd6c b84a2151 b84424f5 b83dcc39     l.O.Q!J..$D.9.=.
24020f2c:	b8371b25 b83015ea b828c0e0 b821207b     %.7...0...(.{ !.
24020f3c:	b8193956 b8111022 b808a9b5 b8000af2     V9.."...........
24020f4c:	b7ee71aa b7dc70d8 b7ca1da5 b7b7826b     .q...p......k...
24020f5c:	b7a4a984 b7919d70 b77cd14b b7562b3c     ....p...K.|.<+V.
24020f6c:	b72f5da9 b7087d7e b6c33eea b66b60b5     .]/.~}...>...`k.
24020f7c:	b5a1e08f 35910587 3660a8ca 36bb99c2     .......5..`6...6
24020f8c:	3702f580 3727913d 374b8dae 376ed8ea     ...7=.'7..K7..n7
24020f9c:	3788b0bb 37998b3d 37a9f3c8 37b9e280     ...7=..7...7...7
24020fac:	37c94fce 37d8347e 37e689a4 37f448ae     .O.7~4.7...7.H.7
24020fbc:	3800b5b9 3806f60c 380ce29a 381278d6     ...8...8...8.x.8
24020fcc:	3817b672 381c994a 38211f70 3825472f     r..8J..8p.!8/G%8
24020fdc:	38290f03 382c759f 382f79f2 38321b15     ..)8.u,8.y/8..28
24020fec:	38345863 38363169 3837a5ed 3838b5e5     cX48i168..78..88
24020ffc:	38396180 3839a924 38398d67 38390f1c     .a98$.98g.98..98
2402100c:	38382f3c 3836eefb 38354fbe 38335317     </88..68.O58.S38
2402101c:	3830fac9 382e48be 382b3f19 3827e01c     ..08.H.8.?+8..'8
2402102c:	38242e38 38202c03 381bdc3a 381741c0     8.$8., 8:..8.A.8
2402103c:	38125f98 380d38e6 3807d0ee 38022b0d     ._.8.8.8...8.+.8
2402104c:	37f89585 37ec6739 37dfd289 37d2def3     ...79g.7...7...7
2402105c:	37c59417 37b7f9b6 37aa17ab 379bf5e9     ...7...7...7...7
2402106c:	378d9c72 377e26b3 3760c591 374325af     r..7.&~7..`7.%C7
2402107c:	37255760 37076aeb 36d2e106 3696f08a     `W%7.j.7...6...6
2402108c:	363648bc 357ce15d b55c460e b62c5724     .H66].|5.F\.$W,.
2402109c:	b6902ded b6c9720b b700ed60 b71ca5cb     .-...r..`.......
240210ac:	b737d463 b7526bb2 b76c5e97 b782d045     c.7..kR..^l.E...
240210bc:	b78f12a5 b79af09a b7a66495 b7b1693d     .........d..=i..
240210cc:	b7bbf986 b7c610b0 b7cfaa3f b7d8c208     ........?.......
240210dc:	b7e15429 b7e95d0a b7f0d97a b7f7c67b     )T...]..z...{...
240210ec:	b7fe2175 b801f411 b8048c43 b806d885     u!......C.......
240210fc:	b808d82b b80a8abf b80befed b80d078a     +...............
2402110c:	b80dd19e b80e4e52 b80e7dfc b80e611a     ....RN...}...a..
2402111c:	b80df850 b80d4471 b80c466a b80aff5d     P...qD..jF..]...
2402112c:	b8097083 b8079b41 b8058121 b80323c9     .p..A...!....#..
2402113c:	b8008502 b7fb4d6a b7f515d4 b7ee6792     ....jM.......g..
2402114c:	b7e74717 b7dfb927 b7d7c2a2 b7cf689e     .G..'........h..
2402115c:	b7c6b05a b7bd9f44 b7b43ae7 b7aa88f8     Z...D....:......
2402116c:	b7a08f4a b79653b9 b78bdc54 b7812f35     J....S..T...5/..
2402117c:	b76ca4f1 b75698ab b740462c b729b9f3     ..l...V.,F@...).
2402118c:	b713008d b6f84d2e b6ca7135 b69c8626     .....M..5q..&...
2402119c:	b65d49b1 b601cbcb b51b0d35 354e7ebb     .I].....5....~N5
240211ac:	360d2dce 3665b888 369e891b 36c98718     .-.6..e6...6...6
240211bc:	36f3c072 370e8ffa 3722c887 37367fed     r..6...7.."7..67
240211cc:	3749ac83 375c450e 376e40bf 377f971f     ..I7.E\7.@n7...7
240211dc:	37882008 379019fd 3797b5dd 379ef044     . .7...7...7D..7
240211ec:	37a5c619 37ac346d 37b2389f 37b7d03e     ...7m4.7.8.7>..7
240211fc:	37bcf92e 37c1b17c 37c5f77f 37c9c9d4     ...7|..7...7...7
2402120c:	37cd2750 37d00f12 37d28076 37d47b18     P'.7...7v..7.{.7
2402121c:	37d5fed8 37d70bd7 37d7a271 37d7c341     ...7...7q..7A..7
2402122c:	37d76f34 37d6a751 37d56cfd 37d3c1ca     4o.7Q..7.l.7...7
2402123c:	37d1a77b 37cf201f 37cc2de7 37c8d351     {..7. .7.-.7Q..7
2402124c:	37c512fc 37c0efc2 37bc6ca6 37b78cda     ...7...7.l.7...7
2402125c:	37b253c4 37acc4f3 37a6e40f 37a0b4ef     .S.7...7...7...7
2402126c:	379a3b97 37937c17 378c7aa4 37853b9a     .;.7.|.7.z.7.;.7
2402127c:	377b86c0 376c2cf1 375c72f8 374c6211     ..{7.,l7.r\7.bL7
2402128c:	373c03ae 372b6143 371a847b 370976e1     ..<7Ca+7{..7.v.7
2402129c:	36f0843b 36cddfb1 36ab1367 36883294     ;..6...6g..6.2.6
240212ac:	364aa0a4 3604ff27 357e98f1 b3a8a189     ..J6'..6..~5....
240212bc:	b5933c4a b60d4115 b6500a9c b688ec18     J<...A....P.....
240212cc:	b6a94407 b6c8fcb4 b6e80625 b7032873     .D......%...s(..
240212dc:	b711e704 b7203797 b72e134b b73b7374     .....7 .K...ts;.
240212ec:	b74851e9 b754a8a5 b7607208 b76ba8d4     .QH...T..r`...k.
240212fc:	b7764825 b78025b1 b784d730 b78936ab     %Hv..%..0....6..
2402130c:	b78d4261 b790f8db b79458b9 b79760de     aB.......X...`..
2402131c:	b79a105d b79c6670 b79e6293 b7a00469     ]...pf...b..i...
2402132c:	b7a14bcb b7a238c5 b7a2cb98 b7a304a7     .K...8..........
2402133c:	b7a2e497 b7a26c33 b7a19c74 b7a07682     ....3l..t....v..
2402134c:	b79efbb6 b79d2d8d b79b0db9 b7989e0d     .....-..........
2402135c:	b795e07d b792d73b b78f8486 b78beac8     }...;...........
2402136c:	b7880c99 b783ec9e b77f1b57 b775e53b     ........W...;.u.
2402137c:	b76c3d0c b76228fa b757af75 b74cd6f9     .=l..(b.u.W...L.
2402138c:	b741a65c b7362466 b72a5817 b71e4884     \.A.f$6..X*..H..
2402139c:	b711fcd9 b7057c51 b6f19c6d b6d7f3ba     ....Q|..m.......
240213ac:	b6be0d43 b6a3f7bb b689c1d2 b65ef46c     C...........l.^.
240213bc:	b62a5ee1 b5ebbfe2 b5832877 b4598081     .^*.....w(....Y.
240213cc:	3517e325 35b20597 360b6b1c 363d1760     %..5...5.k.6`.=6
240213dc:	366dedde 368eeac8 36a65b0f 36bd3bfc     ..m6...6.[.6.;.6
240213ec:	36d38230 36e922b6 36fe1310 37092499     0..6.".6...6.$.7
240213fc:	3712ddc6 371c308b 372518a0 372d9203     ...7.0.7..%7..-7
2402140c:	373598fc 373d2a1a 37444224 374ade46     ..57.*=7$BD7F.J7
2402141c:	3750fbe0 375698a0 375bb28e 376047f0     ..P7..V7..[7.G`7
2402142c:	3764575d 3767dfc1 376ae04c 376d5879     ]Wd7..g7L.j7yXm7
2402143c:	376f481d 3770af42 37718e4b 3771e5f5     .Ho7B.p7K.q7..q7
2402144c:	3771b72f 3771032e 376fcb7f 376e11f9     /.q7..q7..o7..n7
2402145c:	376bd897 376921b5 3765efe7 376245f7     ..k7.!i7..e7.Eb7
2402146c:	375e26fe 3759963f 37549735 374f2d9b     .&^7?.Y75.T7.-O7
2402147c:	37495d5b 37432a8a 373c997d 3735ae8b     []I7.*C7}.<7..57
2402148c:	372e6e63 3726ddc5 371f018c 3716debf     cn.7..&7...7...7
2402149c:	370e7a7a 3705d9f5 36fa0501 36e7f2f6     zz.7...7...6...6
240214ac:	36d588b0 36c2d125 36afd768 369ca697     ...6%..6h..6...6
240214bc:	368949d0 366b9875 364471e0 361d360b     .I.6u.k6.qD6.6.6
240214cc:	35ebf5d4 359dacb0 351f7782 329367e6     ...5...5.w.5.g.2
240214dc:	b514e783 b5965f2c b5e14c42 b61589bb     ....,_..BL......
240214ec:	b639c723 b65d4ba2 b6800284 b690f0e0     #.9..K].........
240214fc:	b6a1686e b6b16108 b6c0d2e4 b6cfb693     nh...a..........
2402150c:	b6de0503 b6ebb789 b6f8c7df b7029813     ................
2402151c:	b7087574 b70df990 b713221d b717ed03     tu......."......
2402152c:	b71c586c b72062b4 b7240a74 b7274e81     lX...b .t.$..N'.
2402153c:	b72a2dea b72ca7f0 b72ebc16 b7306a24     .-*...,.....$j0.
2402154c:	b731b204 b73293ef b7331051 b73327b9     ..1...2.Q.3..'3.
2402155c:	b732db04 b7322b4f b73119ce b72fa802     ..2.O+2...1.../.
2402156c:	b72dd798 b72baa5d b729226d b72641fd     ..-.].+.m")..A&.
2402157c:	b7230b71 b71f815e b71ba680 b7177dba     q.#.^........}..
2402158c:	b7130a15 b70e4ebc b7094efc b7040e42     .....N...N..B...
2402159c:	b6fd2031 b6f1b045 b6e5d437 b6d993b0     1 ..E...7.......
240215ac:	b6ccf67b b6c00489 b6b2c5e6 b6a542bc     {............B..
240215bc:	b6978342 b6898fc5 b676e138 b65a5c45     B.......8.v.E\Z.
240215cc:	b63da166 b620c150 b603cca5 b5cda7d9     f.=.P. .........
240215dc:	b593cf1c b5345efb b483a42f 343f256f     .....^4./...o%?4
240215ec:	3520355b 35879a89 35be4690 35f401c4     [5 5...5.F.5...5
240215fc:	361457f2 362e1acd 36473c3b 365faf7a     .W.6...6;<G6z._6
2402160c:	36776849 36872d76 36923e19 369ce0bf     Ihw6v-.6.>.6...6
2402161c:	36a71060 36b0c847 36ba0405 36c2bf89     `..6G..6...6...6
2402162c:	36caf705 36d2a70b 36d9cc7a 36e06489     ...6...6z..6.d.6
2402163c:	36e66ccd 36ebe325 36f0c5d5 36f51370     .l.6%..6...6p..6
2402164c:	36f8cae7 36fbeb81 36fe74dc 37003377     ...6...6.t.6w3.7
2402165c:	3700e101 3701435d 37015b06 370128a1     ...7]C.7.[.7.(.7
2402166c:	3700acfb 36ffd215 36fdbbd7 36fb19bf     ...7...6...6...6
2402167c:	36f7ee9f 36f43d91 36f009eb 36eb5754     ...6.=.6...6TW.6
2402168c:	36e629a7 36e08503 36da6dc5 36d3e874     .).6...6.m.6t..6
2402169c:	36ccf9dc 36c5a6ef 36bdf4d0 36b5e8d2     ...6...6...6...6
240216ac:	36ad8862 36a4d923 369be0c8 3692a528     b..6#..6...6(..6
240216bc:	36892c34 367ef7db 366b34d9 36571ba6     4,.6..~6.4k6..W6
240216cc:	3642b8a5 362e183d 361946df 360450fb     ..B6=..6.F.6.P.6
240216dc:	35de85f0 35b45258 358a1fb6 35400c96     ...5XR.5...5..@5
240216ec:	34d87880 33c7edc1 b46601ae b50b1078     .x.4...3..f.x...
240216fc:	b55b85ab b5955a2d b5bc38f7 b5e24a85     ..[.-Z...8...J..
2402170c:	b603bd71 b615db5f b62775bc b63883a3     q..._....u'...8.
2402171c:	b648fc97 b658d87d b6680fae b6769aef     ..H.}.X...h...v.
2402172c:	b68239c5 b688c995 b68efa01 b694c861     .9..........a...
2402173c:	b69a324c b69f3597 b6a3d05a b6a800eb     L2...5..Z.......
2402174c:	b6abc5e7 b6af1e2a b6b208cf b6b4853b     ....*.......;...
2402175c:	b6b6930c b6b83225 b6b962af b6ba2508     ....%2...b...%..
2402176c:	b6ba79d9 b6ba6201 b6b9de9f b6b8f10c     .y...b..........
2402177c:	b6b79ae5 b6b5ddf2 b6b3bc3e b6b13806     ........>....8..
2402178c:	b6ae53b7 b6ab11fa b6a775a0 b6a381a9     .S.......u......
2402179c:	b69f3947 b69a9fcd b695b8be b69087ba     G9..............
240217ac:	b68b108c b6855714 b67ebeb7 b6725af8     .....W....~..Zr.
240217bc:	b6658b5d b658587f b64acb17 b63cebff     ].e..XX...J...<.
240217cc:	b62ec431 b6205cb9 b611beb1 b602f337     1....\ .....7...
240217dc:	b5e806f3 b5c9f137 b5abb779 b58d6bee     ....7...y....k..
240217ec:	b55e4113 b521ce5b b4cb45e1 b4278657     .A^.[.!..E..W.'.
240217fc:	338a9c67 3497b5e9 350593d8 353e5e3d     g..3...4...5=^>5
2402180c:	35761b07 35965600 35b0f9ff 35caeb6c     ..v5.V.5...5l..5
2402181c:	35e41cbf 35fc8103 360a05f5 361558db     ...5...5...6.X.6
2402182c:	362033ae 362a9137 36346c98 363dc156     .3 67.*6.l46V.=6
2402183c:	36468b47 364ec6a1 36566ffd 365d844b     G.F6..N6.oV6K.]6
2402184c:	366400e6 3669e381 366f2a34 3673d380     ..d6..i64*o6..s6
2402185c:	3677de3a 367b49a0 367e155b 368020b3     :.w6.I{6[.~6. .6
2402186c:	3680e70d 36815e20 36818676 368160cc     ...6 ^.6v..6.`.6
2402187c:	3680ee09 36802f42 367e4b6c 367ba59b     ...6B/.6lK~6..{6
2402188c:	36787034 3674aea5 367064ae 366b964f     4px6..t6.dp6O.k6
2402189c:	366647d4 36607dca 365a3cf8 36538a67     .Gf6.}`6.<Z6g.S6
240218ac:	364c6b4f 3644e527 363cfd89 3634ba48     OkL6'.D6..<6H.46
240218bc:	362c215a 362338d4 361a06ed 36109202     Z!,6.8#6...6...6
240218cc:	3606e07f 35f9f1ce 35e5c38b 35d14378     ...6...5...5xC.5
240218dc:	35bc7eda 35a78304 35925d43 357a35a8     .~.5...5C].5.5z5
240218ec:	354f91e8 3524e96f 34f4ac59 349fe37e     ..O5o.$5Y..4~..4
240218fc:	34175591 b2798518 b434a16b b4abb349     .U.4..y.k.4.I...
2402190c:	b4fbc58d b5252d34 b54ba313 b5712f46     ....4-%...K.F/q.
2402191c:	b58adeb7 b59c9d13 b5adc94c b5be5a90     ........L....Z..
2402192c:	b5ce4872 b5dd8af9 b5ec1abb b5f9f0c6     rH..............
2402193c:	b603835b b609ab4d b60f6d93 b614c7c1     [...M....m......
2402194c:	b619b7b6 b61e3ba0 b62251e5 b625f93c     .....;...Q".<.%.
2402195c:	b62930ab b62bf76f b62e4d1a b630317d     .0).o.+..M..}10.
2402196c:	b631a4b6 b632a72a b6333978 b6335c8d     ..1.*.2.x93..\3.
2402197c:	b633118f b63259f6 b6313765 b62fabc7     ..3..Y2.e71.../.
2402198c:	b62db949 b62b6242 b628a953 b6259143     I.-.Bb+.S.(.C.%.
2402199c:	b6221d15 b61e4ffb b61a2d5c b615b8bc     .."..O..\-......
240219ac:	b610f5d3 b60be886 b60694c9 b600fec9     ................
240219bc:	b5f6557e b5ea3a01 b5ddb412 b5d0ccb9     ~U...:..........
240219cc:	b5c38d24 b5b5fea3 b5a82a96 b59a1a7a     $........*..z...
240219dc:	b58bd7dc b57ad85d b55dc20a b5407fb5     ....].z...]...@.
240219ec:	b5232441 b505c26d b4d0d987 b4966b27     A$#.m.......'k..
240219fc:	b438bb90 b38b5357 333067f7 341c4ba4     ..8.WS...g03.K.4
24021a0c:	348554a2 34bb795e 34f074fc 351214c5     .T.4^y.4.t.4...5
24021a1c:	352b3d1a 3543a5b7 355b416e 357203be     .=+5..C5nA[5..r5
24021a2c:	3583f06b 358e66ca 35985fd2 35a1d6a1     k..5.f.5._.5...5
24021a3c:	35aac6d1 35b32c54 35bb037c 35c24907     ...5T,.5|..5.I.5
24021a4c:	35c8fa11 35cf1432 35d49553 35d97bcc     ...52..5S..5.{.5
24021a5c:	35ddc66b 35e1745b 35e48522 35e6f8bf     k..5[t.5"..5...5
24021a6c:	35e8cf94 35ea0a62 35eaaa4b 35eab0db     ...5b..5K..5...5
24021a7c:	35ea1fed 35e8f9c5 35e74101 35e4f88c     ...5...5.A.5...5
24021a8c:	35e223b1 35dec605 35dae368 35d68016     .#.5...5h..5...5
24021a9c:	35d1a07c 35cc4958 35c67fa6 35c0488d     |..5XI.5...5.H.5
24021aac:	35b9a98d 35b2a83f 35ab4a6a 35a39610     ...5?..5jJ.5...5
24021abc:	359b9158 35934279 358aafd1 3581dfe2     X..5yB.5...5...5
24021acc:	3571b26b 355f44ce 354c843e 35397e18     k.q5.D_5>.L5.~95
24021adc:	35263fc0 3512d690 34fe9fb9 34d771b7     .?&5...5...4.q.4
24021aec:	34b03d55 34891c82 34445186 33edece0     U=.4...4.QD4...3
24021afc:	3329641f b3055a25 b3d7d2a0 b43531ad     .d)3%Z.......15.
24021b0c:	b47d0361 b4a199e2 b4c3ccde b4e506f6     a.}.............
24021b1c:	b5029aaf b512231e b5211453 b52f665f     .....#..S.!._f/.
24021b2c:	b53d11d4 b54a0fca b55659e6 b561ea5a     ..=...J..YV.Z.a.
24021b3c:	b56cbbe6 b576c9df b5800814 b584459d     ..l...v......E..
24021b4c:	b5881c13 b58b8a46 b58e8f55 b5912aa2     ....F...U....*..
24021b5c:	b5935bde b5952308 b5968055 b5977452     .[...#..U...Rt..
24021b6c:	b597ffc9 b59823dd b597e1ca b5973b37     .....#......7;..
24021b7c:	b59631f5 b594c81d b592fff4 b590dc05     .1..............
24021b8c:	b58e5f0f b58b8bfe b58865fb b584f05d     ._.......e..]...
24021b9c:	b5812e96 b57a489e b571aaab b5688b2d     .....Hz...q.-.h.
24021bac:	b55ef23d b554e831 b54a7590 b53fa307     =.^.1.T..uJ...?.
24021bbc:	b534796e b52901b9 b51d44f3 b5114c39     ny4...)..D..9L..
24021bcc:	b50520b4 b4f1971a b4d8abd9 b4bf91e3     . ..............
24021bdc:	b4a65b5b b48d1a37 b467c062 b4357d91     [[..7...b.g..}5.
24021bec:	b4038e51 b3a428a0 b304c193 326fd6b5     Q....(........o2
24021bfc:	33795845 33d97706 341a10c6 34463a10     EXy3.w.3...4.:F4
24021c0c:	34711ccc 348d4fd1 34a1554d 34b4938d     ..q4.O.4MU.4...4
24021c1c:	34c6fffa 34d890b7 34e93cad 34f8fb80     ...4...4.<.4...4
24021c2c:	3503e2d2 350aca29 351130cb 35171422     ...5)..5.0.5"..5
24021c3c:	351c7203 352148a9 352596b7 35295b39     .r.5.H!5..%59[)5
24021c4c:	352c959d 352f45c2 35316bdf 35330896     ..,5.E/5.k15..35
24021c5c:	35341ce8 3534aa39 3534b241 35343720     ..459.45A.45 745
24021c6c:	35333b41 3531c16d 352fccbc 352d6092     A;35m.15../5.`-5
24021c7c:	352a80a2 352730e3 35237594 351f532b     ..*5.0'5.u#5+S.5
24021c8c:	351ace61 3515ec21 3510b18b 350b23ec     a..5!..5...5.#.5
24021c9c:	350548bb 34fe4b24 34f18058 34e43cc3     .H.5$K.4X..4.<.4
24021cac:	34d68c38 34c87abb 34ba145e 34ab654e     8..4.z.4^..4Ne.4
24021cbc:	349c79b2 348d5dc0 347c3b28 345d8a7d     .y.4.].4(;|4}.]4
24021ccc:	343ec15a 341ff757 340143ac 33c57a35     Z.>4W..4.C.45z.3
24021cdc:	3388f3f6 331a402e 32114718 b29f22aa     ...3.@.3.G.2."..
24021cec:	b3411a0b b397fe24 b3cdf79a b4012b58     ..A.$.......X+..
24021cfc:	b41a7d45 b432e1f9 b44a4af1 b460aa9a     E}....2..JJ...`.
24021d0c:	b475f455 b4850e56 b48e8c92 b4977034     U.u.V.......4p..
24021d1c:	b49fb511 b4a75799 b4ae54bd b4b4aa09     .....W...T......
24021d2c:	b4ba558e b4bf55ec b4c3aa54 b4c7527e     .U...U..T...~R..
24021d3c:	b4ca4eab b4cc9fa6 b4ce46ba b4cf45b7     .N.......F...E..
24021d4c:	b4cf9eee b4cf5523 b4ce6b96 b4cce5f3     ....#U...k......
24021d5c:	b4cac85b b4c8174e b4c4d7bb b4c10ee2     [...N...........
24021d6c:	b4bcc262 b4b7f82a b4b2b672 b4ad03c0     b...*...r.......
24021d7c:	b4a6e6d1 b4a0669c b4998a4e b492593a     .....f..N...:Y..
24021d8c:	b48adad7 b48316c6 b476295b b465b89e     ........[)v...e.
24021d9c:	b454eaea b443cfdd b43276f6 b420efc6     ..T...C..v2... .
24021dac:	b40f499b b3fb275f b3d7b9e3 b3b4682b     .I.._'......+h..
24021dbc:	b3914efe b35d14ca b3186b4b b2a9ac8f     .N....].Kk......
24021dcc:	b19444ff 32393335 32daf688 332ad657     .D..5392...2W.*3
24021ddc:	336633fd 338fb652 33ab2dac 33c56ee4     .3f3R..3.-.3.n.3
24021dec:	33de6a36 33f61138 34062b7b 341097f7     6j.38..3{+.4...4
24021dfc:	341a490b 34233a6b 342b6893 3432d0a1     .I.4k:#4.h+4..24
24021e0c:	34397092 343f46ff 3444534f 3448959d     .p94.F?4OSD4..H4
24021e1c:	344c0ea6 344ebfe8 3450ab86 3451d449     ..L4..N4..P4I.Q4
24021e2c:	34523d97 3451eb7c 3450e28e 344f27eb     .=R4|.Q4..P4.'O4
24021e3c:	344cc152 3449b4dc 3446093f 3441c57c     R.L4..I4?.F4|.A4
24021e4c:	343cf11c 343793e7 3431b60e 342b6007     ..<4..74..14.`+4
24021e5c:	34249a90 341d6e99 3415e542 340e07d5     ..$4.n.4B..4...4
24021e6c:	3405dfb9 33faecc5 33e9aab6 33d80c4b     ...4...3...3K..3
24021e7c:	33c6247d 33b40620 33a1c3d7 338f7004     }$.3 ..3...3.p.3
24021e8c:	337a395c 3355b6fc 33317b49 330da79c     \9z3..U3I{13...3
24021e9c:	32d4b870 328f7037 321763d1 309b60fd     p..27p.2.c.2.`.0
24021eac:	b1d9373f b2684eb1 b2afa77a b2e8a27f     ?7...Nh.z.......
24021ebc:	b30f7821 b3293619 b3417abc b3583779     !x...6)..zA.y7X.
24021ecc:	b36d5fa5 b380743e b3896492 b3917d59     ._m.>t...d..Y}..
24021edc:	b398bc0f b39f1f1e b3a4a5e6 b3a950ac     .............P..
24021eec:	b3ad209c b3b017c2 b3b23903 b3b38812     . .......9......
24021efc:	b3b40972 b3b3c262 b3b2b8d8 b3b0f37a     r...b.......z...
24021f0c:	b3ae798e b3ab52f0 b3a7880c b3a321c8     .y...R.......!..
24021f1c:	b39e2980 b398a8f4 b392aa40 b38c37ca     .)......@....7..
24021f2c:	b3855c39 b37c44c0 b36d2a7b b35d7fc8     9\...D|.{*m...].
24021f3c:	b34d5ad7 b33cd1e0 b32bfaeb b31aebd3     .ZM...<...+.....
24021f4c:	b309ba1b b2f0f5bf b2ce8572 b2ac4b4e     ........r...NK..
24021f5c:	b28a6e18 b25225eb b210bb10 b1a1be60     .n...%R.....`...
24021f6c:	b0969102 3124c101 31c5e07f 321a3ab0     ......$1...1.:.2
24021f7c:	324ee0c0 32805c39 3297ce32 32adb60e     ..N29\.22..2...2
24021f8c:	32c20610 32d4b2df 32e5b3aa 32f501fe     ...2...2...2...2
24021f9c:	33014cf9 33073cf0 330c514c 33108b97     .L.3.<.3LQ.3...3
24021fac:	3313ee75 33167d94 33183db8 33193495     u..3.}.3.=.3.4.3
24021fbc:	331968c9 3318e1d5 3317a805 3315c463     .h.3...3...3c..3
24021fcc:	331340a8 3310271b 330c8297 33085e68     .@.3.'.3...3h^.3
24021fdc:	3303c63d 32fd8c16 32f2d41a 32e77d31     =..3...2...21}.2
24021fec:	32dba046 32cf563e 32c2b7d0 32b5dd6a     F..2>V.2...2j..2
24021ffc:	32a8df0f 329bd443 328ed3b0 3281f34f     ...2C..2...2O..2
2402200c:	326a903f 3251cc32 3239bffd 32228ee0     ?.j22.Q2..92.."2
2402201c:	320c5960 31ee7a7f 31c6aa9f 31a17301     `Y.2.z.1...1.s.1
2402202c:	317dfa42 313ed8c1 3105bb42 30a59e03     B.}1..>1B..1...0
2402203c:	3018d301 287ffffa 00000000 00000000     ...0...(........
	...

240220c4 <step_dd_table>:
	...
240221f8:	2fab8ce1 2fab8ce1 2f729e86 30126e14     .../.../..r/.n.0
24022208:	2fb6c188 306dced6 300d6d57 30bd9e15     .../..m0Wm.0...0
24022218:	305a5159 31156364 30a598ce 31682fc6     YQZ0dc.1...0./h1
24022228:	30f5854b 31b17936 3131bb06 32052b5d     K..06y.1..11]+.2
24022238:	317b8e5c 32440ef2 31ae5dca 328d9eec     \.{1..D2.].1...2
24022248:	31ed3d32 32c8ee3c 321eb3c7 330c240e     2=.1<..2...2.$.3
24022258:	32512804 33406e0f 3287f987 33823569     .(Q2.n@3...2i5.3
24022268:	32aea874 33addf87 32dde428 33e5588c     t..2...3(..2.X.3
24022278:	330b8c5d 34158f63 332def60 34410b3a     ]..3c..4`.-3:.A4
24022288:	3356ff82 3476cb18 3383dda7 349c5cf5     ..V3..v4...3.\.4
24022298:	33a09ed4 34c484aa 33c25ffe 34f51ca9     ...3...4._.3...4
240222a8:	33e9ce56 3517c81f 340bd463 353abd3a     V..3...5c..4:.:5
240222b8:	342660a2 35645563 3444ff1b 358aca95     .`&4cUd5..D4...5
240222c8:	34682dde 35a7d053 34883b5b 35c9df24     .-h4S..5[;.4$..5
240222d8:	349f37f1 35f1ad24 34b95e74 3610025e     .7.4$..5t^.4^..6
240222e8:	34d707b6 362ae356 34f89409 3649f5d6     ...4V.*6...4..I6
240222f8:	350f35e2 366dc350 35247fce 368b71a1     .5.5P.m6..$5.q.6
24022308:	353c64a2 36a2fe35 355725f2 36bde2f5     .d<55..6.%W5...6
24022318:	35750a4e 36dc843e 358b2ec6 36ff4ff0     N.u5>..6...5.O.6
24022328:	359db882 37135f08 35b24dfc 3729a8c5     ...5._.7.M.5..)7
24022338:	35c91dde 3742cc86 35e25a15 375f17c5     ...5..B7.Z.5.._7
24022348:	35fe37e3 377edec8 360e780e 37913e64     .7.5..~7.x.6d>.7
24022358:	361f5faa 37a52a58 3631f2f3 37bb68b8     ._.6X*.7..16.h.7
24022368:	3646542f 37d4333e 365ca7b4 37efc836     /TF6>3.7..\66..7
24022378:	36751413 3807355b 3687e116 3818317f     ..u6[5.8...6.1.8
24022388:	36966ea0 382aff51 36a6498b 383fc883     .n.6Q.*8.I.6..?8
24022398:	36b789fd 3856b9c3 36ca4981 387002f4     ...6..V8.I.6..p8
240223a8:	36dea2fb 3885eba9 36f4b2c7 389536d5     ...6...8...6.6.8
240223b8:	37064b5f 38a60041 37133723 38b86725     _K.7A..8#7.7%g.8
240223c8:	37212d2e 38cc8ccb 37303ed9 38e294a9     .-!7...8.>07...8
240223d8:	37407e44 38faa473 3751fe84 390a7220     D~@7s..8..Q7 r.9
240223e8:	3764d393 3918bf58 37791250 3928507b     ..d7X..9P.y7{P(9
240223f8:	3787684b 39393d8a 3793129b 394b9fdb     Kh.7.=99...7..K9
24022408:	379f9408 395f925c 37acf8fc 39753178     ...7\._9...7x1u9
24022418:	37bb4e74 39864da5 37caa1f9 3992f7c4     tN.7.M.9...7...9
24022428:	37db018f 39a0a7de 37ec7be8 39af6f9a     ...7...9.{.7.o.9
24022438:	37ff2031 39bf619e 38097f23 39d09184     1 .7.a.9#..8...9
24022448:	38141343 39e313ea 381f5501 39f6fe8c     C..8...9.U.8...9
24022458:	382b4d2c 3a063418 383804f1 3a11b467     ,M+8.4.:..88g..:
24022468:	384585c4 3a1e0cc4 3853d974 3a2b4a5b     ..E8...:t.S8[J+:
24022478:	38630a24 3a397afe 38732248 3a48ad21     $.c8.z9:H"s8!.H:
24022488:	38821658 3a58efed 388b1a44 3a6a5336     X..8..X:D..86Sj:
24022498:	3894a2a8 3a7ce78a 389eb571 3a885f1b     ...8..|:q..8._.:
240224a8:	38a958bb 3a92f4a9 38b492cb 3a9e3dd4     .X.8...:...8.=.:
240224b8:	38c06a1c 3aaa4473 38cce54f 3ab712c9     .j.8sD.:O..8...:
240224c8:	38da0b38 3ac4b381 38e7e2d6 3ad331b0     8..8...:...8.1.:
240224d8:	38f6735a 3ae298de 3902e216 3af2f522     Zs.8...:...9"..:
240224e8:	390aee62 3b022977 39136275 3b0b5f9e     b..9w).;ub.9._.;
240224f8:	391c4240 3b1523c2 392591cc 3b1f7ce2     @B.9.#.;..%9.|.;
24022508:	392f553a 3b2a7233 393990c1 3b360b3f     :U/93r*;..99?.6;
24022518:	394448b4 3b424fcb 394f8172 3b4f47e2     .HD9.OB;r.O9.GO;
24022528:	395b3f70 3b5cfbd9 39678746 3b6b744f     p?[9..\;F.g9Otk;
24022538:	39745d84 3b7aba28 3980e378 3b856b4b     .]t9(.z;x..9Kk.;
24022548:	3987e426 3b8de98d 398f3339 3b96dcc0     &..9...;93.9...;
24022558:	3996d32a 3ba049f3 399ec678 3baa365b     *..9.I.;x..9[6.;
24022568:	39a70fac 3bb4a756 39afb154 3bbfa26b     ...9V..;T..9k..;
24022578:	39b8ae0c 3bcb2d4c 39c20873 3bd74dd2     ...9L-.;s..9.M.;
24022588:	39cbc32b 3be40a04 39d5e0e7 3bf16813     +..9...;...9.h.;
24022598:	39e06451 3bff6e59 39eb5023 3c0711ae     Qd.9Yn.;#P.9...<
240225a8:	39f6a718 3c0ec6e6 3a0135fb 3c16da46     ...9...<.5.:F..<
240225b8:	3a0750bb 3c1f4f52 3a0da532 3c2829a0     .P.:RO.<2..:.)(<
240225c8:	3a1434c3 3c316cf5 3a1b00d4 3c3b1d02     .4.:.l1<...:..;<
240225d8:	3a220ac8 3c453dad 3a295406 3c4fd2e7     ..":.=E<.T):..O<
240225e8:	3a30ddef 3c5ae0cc 3a38a9ea 3c666b64     ..0:..Z<..8:dkf<
240225f8:	3a40b958 3c727700 3a490d99 3c7f07d3     X.@:.wr<..I:...<
24022608:	3a51a80c 3c86112c 3a5a8a0b 3c8ce57c     ..Q:,..<..Z:|..<
24022618:	3a63b4f1 3c940322 3a6d2a11 3c9b6c72     ..c:"..<.*m:rl.<
24022628:	3a76eabf 3ca323cc 3a807c22 3cab2b8d     ..v:.#.<"|.:.+.<
24022638:	3a85a9f9 3cb3862a 3a8aff78 3cbc3621     ...:*..<x..:!6.<
24022648:	3a907d4c 3cc53df8 3a962408 3ccea037     L}.:.=.<.$.:7..<
24022658:	3a9bf43d 3cd85f7d 3aa1ee8e 3ce27e65     =..:}_.<...:e~.<
24022668:	3aa8137c 3cecff9d 3aae639a 3cf7e5d5     |..:...<.c.:...<
24022678:	3ab4df68 3d0199e6 3abb8766 3d077621     h..:...=f..:!v.=
24022688:	3ac25c17 3d0d8902 3ac95de0 3d13d3f2     .\.:...=.].:...=
24022698:	3ad08d43 3d1a585b 3ad7ea9e 3d2117b0     C..:[X.=...:..!=
240226a8:	3adf7659 3d281362 3ae730c9 3d2f4cea     Yv.:b.(=.0.:.L/=
240226b8:	3aef1a43 3d36c5bd 3af7331f 3d3e7f54     C..:..6=.3.:T.>=
240226c8:	3aff7b98 3d467b31 3b03f9f5 3d4ebad1     .{.:1{F=...;..N=
240226d8:	3b084e25 3d573fb2 3b0cba74 3d600b5b     %N.;.?W=t..;[.`=
240226e8:	3b113ef1 3d691f49 3b15dbac 3d727d05     .>.;I.i=...;.}r=
240226f8:	3b1a90a9 3d7c260e 3b1f5dee 3d830df7     ...;.&|=.].;...=
24022708:	3b244370 3d883012 3b294131 3d8d7a1c     pC$;.0.=1A);.z.=
24022718:	3b2e571e 3d92ecd4 3b338528 3d9888fe     .W.;...=(.3;...=
24022728:	3b38cb34 3d9e4f58 3b3e2924 3da440a0     4.8;XO.=$)>;.@.=
24022738:	3b439ed1 3daa5d97 3b492c10 3db0a6f8     ..C;.].=.,I;...=
24022748:	3b4ed0b7 3db71d7e 3b548c85 3dbdc1e2     ..N;~..=..T;...=
24022758:	3b5a5f43 3dc494dc 3b6048a6 3dcb9721     C_Z;...=.H`;!..=
24022768:	3b66486b 3dd2c966 3b6c5e38 3dda2c59     kHf;f..=8^l;Y,.=
24022778:	3b7289b5 3de1c0a2 3b78ca86 3de986fd     ..r;...=..x;...=
24022788:	3b7f203e 3df17ffd 3b82c537 3df9ac51     > .;...=7..;Q..=
24022798:	3b860453 3e010646 3b894d31 3e0550b6     S..;F..>1M.;.P.>
240227a8:	3b8c9f8f 3e09b5ad 3b8ffb28 3e0e3589     ...;...>(..;.5.>
240227b8:	3b935fb0 3e12d087 3b96ccdc 3e1786ea     ._.;...>...;...>
240227c8:	3b9a4256 3e1c5903 3b9dbfcd 3e214700     VB.;.Y.>...;.G!>
240227d8:	3ba144e5 3e265124 3ba4d13f 3e2b77ac     .D.;$Q&>?..;.w+>
240227e8:	3ba8647c 3e30bad4 3babfe36 3e361ac5     |d.;..0>6..;..6>
240227f8:	3baf9e04 3e3b97b5 3bb3437b 3e4131d1     ...;..;>{C.;.1A>
24022808:	3bb6ee27 3e46e943 3bba9d95 3e4cbe2c     '..;C.F>...;,.L>
24022818:	3bbe514e 3e52b0bb 3bc208d3 3e58c0fe     NQ.;..R>...;..X>
24022828:	3bc5c3a6 3e5eef1c 3bc98142 3e653b2a     ...;..^>B..;*;e>
24022838:	3bcd4122 3e6ba52e 3bd102ba 3e722d44     "A.;..k>...;D-r>
24022848:	3bd4c57b 3e78d372 3bd888d4 3e7f97b8     {..;r.x>...;...>
24022858:	3bdc4c31 3e833d0b 3be00ef6 3e86bd4a     1L.;.=.>...;J..>
24022868:	3be3d08a 3e8a4c8a 3be7904c 3e8deacd     ...;.L.>L..;...>
24022878:	3beb4d9b 3e919804 3bef07d1 3e955422     .M.;...>...;"T.>
24022888:	3bf2be48 3e991f1a 3bf67050 3e9cf8da     H..;...>Pp.;...>
24022898:	3bfa1d41 3ea0e150 3bfdc469 3ea4d863     A..;P..>i..;c..>
240228a8:	3c00b289 3ea8ddf8 3c027f46 3eacf1f2     ...<...>F..<...>
240228b8:	3c04480e 3eb11432 3c060c85 bf255db5     .H.<2..>...<.]%.
240228c8:	3c07cc4d bf233e85 3c098709 bf211867     M..<.>#....<g.!.
240228d8:	3c0b3c56 bf1eeb77 3c0cebd8 bf1cb7c7     V<.<w......<....
240228e8:	3c0e952b bf1a7d73 3c1037f0 bf183c93     +..<s}...7.<.<..
240228f8:	3c11d3c3 bf15f544 3c136843 bf13a7a3     ...<D...Ch.<....
24022908:	3c14f50d bf1153ce 3c1679be bf0ef9e7     ...<.S...y.<....
24022918:	3c17f5f4 bf0c9a10 3c196949 bf0a346a     ...<....Ii.<j4..
24022928:	3c1ad35d bf07c91d 3c1c33cc bf05584e     ]..<.....3.<NX..
24022938:	3c1d8a33 bf02e225 3c1ed630 bf0066cd     3..<%...0..<.f..
24022948:	3c201761 befbccde 3c214d65 bef6c274     a. <....eM!<t...
24022958:	3c2277db bef1aeb4 3c239663 beec9200     .w"<....c.#<....
24022968:	3c24a8a1 bee76cba 3c25ae30 bee23f4a     ..$<.l..0.%<J?..
24022978:	3c26a6b3 bedd0a13 3c2791d5 bed7cd86     ..&<......'<....
24022988:	3c286f40 bed28a0d 3c293e93 becd4017     @o(<.....>)<.@..
24022998:	3c29ff6d bec7f01d 3c2ab18f bec29a8e     m.)<......*<....
240229a8:	3c2b548d bebd3fec 3c2be826 beb7e0a9     .T+<.?..&.+<....
240229b8:	3c2c6c04 beb27d49 3c2cdfd2 bead164b     .l,<I}....,<K...
240229c8:	3c2d435a bea7ac31 3c2d9631 bea23f7f     ZC-<1...1.-<.?..
240229d8:	3c2dd82a be9cd0bf 3c2e08fd be976076     *.-<.......<v`..
240229e8:	3c2e285c be91ef31 3c2e3614 be8c7d80     \(.<1....6.<.}..
240229f8:	3c2e31e2 be870bf2 3c2e1b92 be819b15     .1.<.......<....
24022a08:	3c2df2e2 be7856fb 3c2db7b4 be6d7b85     ..-<.Vx...-<.{m.
24022a18:	3c2d69bb be62a4e9 3c2d08e2 be57d45a     .i-<..b...-<Z.W.
24022a28:	3c2c94f4 be4d0b08 3c2c0ddb be424a2e     ..,<..M...,<.JB.
24022a38:	3c2b7361 be3792f3 3c2ac571 be2ce69f     as+<..7.q.*<..,.
24022a48:	3c2a03ea be224661 3c292ec3 be17b374     ..*<aF"...)<t...
24022a58:	3c2845da be0d2f14 3c274930 be02ba82     .E(<./..0I'<....
24022a68:	3c2638af bdf0adf5 3c251457 bddc0b64     .8&<....W.%<d...
24022a78:	3c23dc28 bdc78fe2 3c229016 bdb33ddf     (.#<......"<.=..
24022a88:	3c213035 bd9f17d8 3c1fbc8f bd8b2046     50!<.......<F ..
24022a98:	3c1e3530 bd6eb341 3c1c9a2d bd478cb4     05.<A.n.-..<..G.
24022aa8:	3c1aeba0 bd20d1cd 3c1929a4 bcf50ec5     ...<.. ..).<....
24022ab8:	3c17545d bca96498 3c156bef bc3d5d43     ]T.<.d...k.<C]=.
24022ac8:	3c137087 bb27b2f3 3c116254 3bceeb31     .p.<..'.Tb.<1..;
24022ad8:	3c0f418b 3c76b721 3c0d0e64 3cc1e2c4     .A.<!.v<d..<...<
24022ae8:	3c0ac91e 3d03a3a9 3c0871fb 3d25c029     ...<...=.q.<).%=
24022af8:	3c060941 3d474277 3c038f3e 3d682647     A..<wBG=>..<G&h=
24022b08:	3c010441 3d8433ac 3bfcd13b 3d9400bf     A..<.3.=;..;...=
24022b18:	3bf77963 3da37855 3bf201ae 3db29871     cy.;Ux.=...;q..=
24022b28:	3bec6ae4 3dc15f1f 3be6b5d7 3dcfca78     .j.;._.=...;x..=
24022b38:	3be0e358 3dddd8b6 3bdaf44b 3deb87f3     X..;...=K..;...=
24022b48:	3bd4e996 3df8d691 3bcec429 3e02e169     ...;...=)..;i..>
24022b58:	3bc884ff 3e092593 3bc22d19 3e0f36fd     ...;.%.>.-.;.6.>
24022b68:	3bbbbd7d 3e1514e4 3bb5373e 3e1abea0     }..;...>>7.;...>
24022b78:	3bae9b72 3e20337c 3ba7eb3b 3e2572d8     r..;|3 >;..;.r%>
24022b88:	3ba127bf 3e2a7c11 3b9a5228 3e2f4ea2     .'.;.|*>(R.;.N/>
24022b98:	3b936baf 3e33ea05 3b8c758b 3e384dac     .k.;..3>.u.;.M8>
24022ba8:	3b8570fd 3e3c7934 3b7cbe93 3e406c30     .p.;4y<>..|;0l@>
24022bb8:	3b6e8381 3e44263c 3b603365 3e47a70e     ..n;<&D>e3`;..G>
24022bc8:	3b51d0e5 3e4aee4f 3b435eba 3e4dfbc9     ..Q;O.J>.^C;..M>
24022bd8:	3b34df9f 3e50cf47 3b265663 3e5368a0     ..4;G.P>cV&;.hS>
24022be8:	3b17c5cd 3e55c7b9 3b0930b4 3e57ec7f     ...;..U>.0.;..W>
24022bf8:	3af533e3 3e59d6e4 3ad808c9 3e5b86f4     .3.:..Y>...:..[>
24022c08:	3abae5e7 3e5cfcbf 3a9dd114 3e5e3865     ...:..\>...:e8^>
24022c18:	3a80d01a 3e5f3a01 3a47d1c2 3e6001d6     ...:.:_>..G:..`>
24022c28:	3a0e4288 3e60901a 39a9fc92 3e60e516     .B.:..`>...9..`>
24022c38:	38e08650 3e61012a b8e3d1a1 3e60e4ab     P..8*.a>......`>
24022c48:	b9a92df1 3e609013 ba0c39ce 3e6003db     .-....`>.9....`>
24022c58:	ba435715 3e5f4088 ba79e332 3e5e46a1     .WC..@_>2.y..F^>
24022c68:	ba97e951 3e5d16ce bab28d06 3e5bb1b6     Q.....]>......[>
24022c78:	baccd6f8 3e5a1808 bae6c1a7 3e584a87     ......Z>.....JX>
24022c88:	bb0023b8 3e5649f5 bb0cb172 3e541730     .#...IV>r...0.T>
24022c98:	bb19074d 3e51b315 bb2522a0 3e4f1e88     M.....Q>."%...O>
24022ca8:	bb3100d0 3e4c5a81 bb3c9f47 3e496807     ..1..ZL>G.<..hI>
24022cb8:	bb47fb82 3e464819 bb531304 3e42fbcf     ..G..HF>..S...B>
24022cc8:	bb5de36d 3e3f843e bb686a5a 3e3be293     m.].>.?>Zjh...;>
24022cd8:	bb72a586 3e381803 bb7c92b8 3e3425b6     ..r...8>..|..%4>
24022ce8:	bb8317e0 3e300cf3 bb87bd46 3e2bcf0b     ......0>F.....+>
24022cf8:	bb8c388c 3e276d47 bb9088b9 3e22e903     .8..Gm'>......">
24022d08:	bb94acde 3e1e439d bb98a419 3e197e78     .....C.>....x~.>
24022d18:	bb9c6d8e 3e149b0c bba0086d 3e0f9ac9     .m.....>m......>
24022d28:	bba373f8 3e0a7f29 bba6af71 3e0549af     .s..)..>q....I.>
24022d38:	bba9ba30 3dfff7b7 bbac9392 3df52e80     0......=.......=
24022d48:	bbaf3b03 3dea3ad2 bbb1affe 3ddf1fd0     .;...:.=.......=
24022d58:	bbb3f206 3dd3e0b0 bbb600ab 3dc880a6     .......=.......=
24022d68:	bbb7db91 3dbd02ed bbb9825e 3db16ac8     .......=^....j.=
24022d78:	bbbaf4cf 3da5bb7a bbbc32ab 3d99f850     ....z..=.2..P..=
24022d88:	bbbd3bc9 3d8e2493 bbbe1006 3d824393     .;...$.=.....C.=
24022d98:	bbbeaf55 3d6cb13c bbbf19b5 3d54ce06     U...<.l=......T=
24022da8:	bbbf4f31 3d3ce41f bbbf4fe6 3d24fa23     1O....<=.O..#.$=
24022db8:	bbbf1bf9 3d0d16a4 bbbeb3a0 3cea805c     .......=....\..<
24022dc8:	bbbe1723 3cbafa98 bbbd46d5 3c8ba8e0     #......<.F.....<
24022dd8:	bbbc4312 3c393038 bbbb0c4e 3bb7541f     .C..809<N....T.;
24022de8:	bbb9a302 b893b8a1 bbb807bb bbba569e     .............V..
24022df8:	bbb63b10 bc3848d2 bbb43da6 bc8933d6     .;...H8..=...3..
24022e08:	bbb21031 bcb5b7e3 bbafb373 bce1a4bb     1.......s.......
24022e18:	bbad2837 bd067766 bbaa6f5b bd1bc550     7(..fw..[o..P...
24022e28:	bba789c5 bd30b689 bba47867 bd454597     ......0.gx...EE.
24022e38:	bba13c46 bd596d1f bb9dd66a bd6d27ec     F<...mY.j....'m.
24022e48:	bb9a47ec bd803875 bb9691f3 bd89a194     .G..u8..........
24022e58:	bb92b5a9 bd92ccef bb8eb44a bd9bb834     ........J...4...
24022e68:	bb8a8f18 bda46125 bb864764 bdacc59b     ....%a..dG......
24022e78:	bb81de85 bdb4e383 bb7aabba bdbcb8e2     ..........z.....
24022e88:	bb715dae bdc443cf bb67d5ca bdcb827d     .]q..C....g.}...
24022e98:	bb5e1704 bdd27335 bb542467 bdd91453     ..^.5s..g$T.S...
24022ea8:	bb4a0104 bddf6464 bb3fafff bde561e2     ..J.dd....?..a..
24022eb8:	bb353488 bdeb0b8a bb2a91e0 bdf0601a     .45.......*..`..
24022ec8:	bb1fcb48 bdf55e6c bb14e413 bdfa058d     H...l^..........
24022ed8:	bb09df9b bdfe548c bafd8288 be012549     .....T......I%..
24022ee8:	bae718f6 be02f380 bad0894d be049492     ........M.......
24022ef8:	bab9da82 be060844 baa3137c be074e6c     ....D...|...lN..
24022f08:	ba8c3b40 be0866e4 ba6ab183 be095190     @;...f....j..Q..
24022f18:	ba3ce5f1 be0a0e77 ba0f21c8 be0a9d98     ..<.w....!......
24022f28:	b9c2e5ec be0aff0f b94f9d7f be0b32f7     ..........O..2..
24022f38:	b7d19bcc be0b3985 391a3b27 be0b12f5     .....9..';.9....
24022f48:	39a6bbd4 be0abf98 39ffa5de be0a3fc6     ...9.......9.?..
24022f58:	3a2be069 be0993e3 3a577906 be08bc67     i.+:.....yW:g...
24022f68:	3a8147d0 be07b9da 3a968b9d be068cc0     .G.:.......:....
24022f78:	3aab818a be0535bc 3ac02346 be03b576     ...:.5..F#.:v...
24022f88:	3ad46aa6 be020ca1 3ae8519f be003c01     .j.:.....Q.:.<..
24022f98:	3afbd238 bdfc88b2 3b077351 bdf84d19     8..:....Qs.;.M..
24022fa8:	3b10c49e bdf3c6f2 3b19da42 bdeef820     ...;....B..; ...
24022fb8:	3b22b18a bde9e295 3b2b47e0 bde4885b     ..";.....G+;[...
24022fc8:	3b339ac0 bddeeb8b 3b3ba7bb bdd90e4c     ..3;......;;L...
24022fd8:	3b436c7c bdd2f2df 3b4ae6c8 bdcc9bad     |lC;......J;....
24022fe8:	3b521475 bdc60b08 3b58f37b bdbf436d     u.R;....{.X;mC..
24022ff8:	3b5f81e4 bdb8475e 3b65bddb bdb1196f     .._;^G....e;o...
24023008:	3b6ba5a2 bda9bc41 3b7137a1 bda23285     ..k;A....7q;.2..
24023018:	3b767249 bd9a7ef3 3b7b543d bd92a451     Irv;.~..=T{;Q...
24023028:	3b7fdc2e bd8aa56f 3b82047d bd828527     ...;o...}..;'...
24023038:	3b83ecc3 bd748cb7 3b85a677 bd63d7e6     ...;..t.w..;..c.
24023048:	3b873131 bd52f1c2 3b888c99 bd41e02f     11.;..R....;/.A.
24023058:	3b89b863 bd30a923 3b8ab45b bd1f5296     c..;#.0.[..;.R..
24023068:	3b8b8056 bd0de28c 3b8c1c3d bcf8be07     V..;....=..;....
24023078:	3b8c8806 bcd59c09 3b8cc3b7 bcb26b1c     ...;.......;.k..
24023088:	3b8ccf6b bc8f3740 3b8cab45 bc5818db     k..;@7..E..;..X.
24023098:	3b8c5781 bc11ed1d 3b8bd461 bb9805d9     .W.;....a..;....
240230a8:	3b8b223f b9ce39b3 3b8a4180 3b7abbc8     ?".;.9...A.;..z;
240230b8:	3b893299 3c03483f 3b87f612 3c47434b     .2.;?H.<...;KCG<
240230c8:	3b868c7b 3c8544c3 3b84f67b 3ca68260     {..;.D.<{..;`..<
240230d8:	3b8334c0 3cc74f90 3b81480e 3ce7a195     .4.;.O.<.H.;...<
240230e8:	3b7e6264 3d03b6f1 3b79e211 3d135512     db~;...=..y;.U.=
240230f8:	3b7510f5 3d22a620 3b6ff0ff 3d31a531     ..u; ."=..o;1.1=
24023108:	3b6a843a 3d404d75 3b64ccc9 3d4e9a42     :.j;uM@=..d;B.N=
24023118:	3b5ecce6 3d5c870f 3b5886dd 3d6a0f7e     ..^;..\=..X;~.j=
24023128:	3b51fd1f 3d772f4f 3b4b3229 3d81f139     ..Q;O/w=)2K;9..=
24023138:	3b44288a 3d88127e 3b3ce2f5 3d8df996     .(D;~..=..<;...=
24023148:	3b356419 3d93a4b5 3b2daecf 3d99122c     .d5;...=..-;,..=
24023158:	3b25c5f3 3d9e405c 3b1dac70 3da32dbf     ..%;\@.=p..;.-.=
24023168:	3b15654f 3da7d8ea 3b0cf399 3dac4087     Oe.;...=...;.@.=
24023178:	3b045a69 3db0635a 3af739c4 3db44041     iZ.;Zc.=.9.:A@.=
24023188:	3ae57c7a 3db7d633 3ad38364 3dbb2441     z|.:3..=d..:A$.=
24023198:	3ac15517 3dbe2995 3aaef814 3dc0e576     .U.:.).=...:v..=
240231a8:	3a9c7313 3dc35741 3a89ccc8 3dc57e74     .s.:AW.=...:t~.=
240231b8:	3a6e17ae 3dc75aa4 3a486e18 3dc8eb80     ..n:.Z.=.nH:...=
240231c8:	3a22aa49 3dca30d5 39f9b387 3dcb2a89     I.":.0.=...9.*.=
240231d8:	39ae140f 3dcbd89d 3945223e 3dcc3b2e     ...9...=>"E9.;.=
240231e8:	383a2c72 3dcc5272 b8cecfc1 3dcc1ebf     r,:8rR.=.......=
240231f8:	b97c81a6 3dcba07e b9c846c5 3dcad837     ..|.~..=.F..7..=
24023208:	ba08d5d9 3dc9c68c ba2d2ae8 3dc86c35     .......=.*-.5l.=
24023218:	ba5115d2 3dc6ca0a ba748a09 3dc4e0f7     ..Q....=..t....=
24023228:	ba8bbd97 3dc2b200 ba9cee85 3dc03e45     .......=....E>.=
24023238:	baadd1e8 3dbd86fe babe61e1 3dba8d76     .......=.a..v..=
24023248:	bace98b2 3db75314 bade70d3 3db3d951     .....S.=.p..Q..=
24023258:	baede4d3 3db021bd bafcef6e 3dac2e00     .....!.=n......=
24023268:	bb05c5c1 3da7ffd1 bb0cda14 3da39900     .......=.......=
24023278:	bb13b24f 3d9efb6e bb1a4c20 3d9a290d     O...n..= L...).=
24023288:	bb20a55a 3d9523e2 bb26bbdf 3d8fee03     Z. ..#.=..&....=
24023298:	bb2c8db0 3d8a8996 bb3218ec 3d84f8cf     ..,....=..2....=
240232a8:	bb375bbf 3d7e7be1 bb3c5485 3d72b699     .[7..{~=.T<...r=
240232b8:	bb41019f 3d66a680 bb45619a 3d5a5066     ..A...f=.aE.fPZ=
240232c8:	bb497322 3d4db934 bb4d34f8 3d40e5e4     "sI.4.M=.4M...@=
240232d8:	bb50a5fa 3d33db84 bb53c531 3d269f31     ..P...3=1.S.1.&=
240232e8:	bb5691b6 3d193614 bb590ac9 3d0ba568     ..V..6.=..Y.h..=
240232f8:	bb5b2fc9 3cfbe4d8 bb5d0036 3ce044d4     ./[....<6.]..D.<
24023308:	bb5e7ba9 3cc4755b bb5fa1e7 3ca8811e     .{^.[u.<.._....<
24023318:	bb6072c3 3c8c72ca bb60ee3e 3c60aa04     .r`..r.<>.`...`<
24023328:	bb611471 3c2864e4 bb60e59e 3be056fa     q.a..d(<..`..V.;
24023338:	bb60621e 3b604bd6 bb5f8a6e 37416576     .b`..K`;n._.veA7
24023348:	bb5e5f28 bb5d9dc0 bb5ce102 bbdd3f61     (_^...]...\.a?..
24023358:	bb5b10d5 bc2563e8 bb58ef9b bc5b9fce     ..[..c%...X...[.
24023368:	bb567e63 bc889fb1 bb53be61 bca3177c     c~V.....a.S.|...
24023378:	bb50b0e1 bcbd2d9d bb4d5754 bcd6d884     ..P..-..TWM.....
24023388:	bb49b339 bcf00eec bb45c633 bd0463da     9.I.....3.E..c..
24023398:	bb419202 bd107cfb bb3d1875 bd1c4e82     ..A..|..u.=..N..
240233a8:	bb385b84 bd27d43a bb335d32 bd330a0e     .[8.:.'.2]3...3.
240233b8:	bb2e1f9a bd3dec07 bb28a4f6 bd487656     ......=...(.VvH.
240233c8:	bb22ef91 bd52a54f bb1d01c8 bd5c756c     ..".O.R.....lu\.
240233d8:	bb16de13 bd65e34c bb1086f6 bd6eebbb     ....L.e.......n.
240233e8:	bb09ff0c bd778bad bb034902 bd7fc03c     ......w..I..<...
240233f8:	baf8cf1a bd83c35a baeabaec bd876e46     ....Z.......Fn..
24023408:	badc5b2d bd8adfb2 bacdb5a2 bd8e1689     -[..............
24023418:	babed024 bd9111ca baafb0b2 bd93d08d     $...............
24023428:	baa05d47 bd965201 ba90dbf5 bd989571     G]...R......q...
24023438:	ba8132e9 bd9a9a3d ba62d097 bd9c5fde     .2..=.....b.._..
24023448:	ba4304ab bd9de5e8 ba230e8a bd9f2c05     ..C.......#..,..
24023458:	ba02fab7 bda031fa b9c5ab77 bda0f7a6     .....1..w.......
24023468:	b9855836 bda17cfd b90a2968 bda1c213     6X...|..h)......
24023478:	b71f3a7b bda1c70d 38eb7e6a bda18c2c     {:......j~.8,...
24023488:	3974bdf6 bda111ce 39b96bdc bda05862     ..t9.....k.9bX..
24023498:	39f7ee0c bd9f6074 3a1ae6cd bd9e2aa7     ...9t`.....:.*..
240234a8:	3a397978 bd9cb7b4 3a57a360 bd9b086c     xy9:....`.W:l...
240234b8:	3a755914 bd991dba 3a8947ac bd96f89c     .Yu:.....G.:....
240234c8:	3a979d8d bd949a26 3aa5a8cf bd920383     ...:&......:....
240234d8:	3ab36435 bd8f35f2 3ac0ca94 bd8c32c8     5d.:.5.....:.2..
240234e8:	3acdd6ec bd88fb6c 3ada8479 bd85915a     ...:l...y..:Z...
240234f8:	3ae6ce78 bd81f620 3af2b07b bd7c56bb     x..: ...{..:.V|.
24023508:	3afe261c bd74658b 3b04959a bd6c1c30     .&.:.et....;0.l.
24023518:	3b09dde5 bd637e52 3b0eea0b bd5a8fb3     ...;R~c....;..Z.
24023528:	3b13b83b bd51542e 3b1846c9 bd47cfc3     ;..;.TQ..F.;..G.
24023538:	3b1c9417 bd3e0681 3b209ead bd33fc97     ...;..>... ;..3.
24023548:	3b246520 bd29b645 3b27e634 bd1f37e1      e$;E.).4.';.7..
24023558:	3b2b20b7 bd1485d4 3b2e139c bd09a49c     . +;.......;....
24023568:	3b30bdf4 bcfd3179 3b331eef bce6cd9a     ..0;y1....3;....
24023578:	3b3535d3 bcd026df 3b37020f bcb9469e     .55;.&....7;.F..
24023588:	3b388321 bca2363b 3b39b8b3 bc8aff22     !.8;;6....9;"...
24023598:	3b3aa286 bc6755a5 3b3b4080 bc388583     ..:;.Ug..@;;..8.
240235a8:	3b3b929b bc09a0de 3b3b98f7 bbb57540     ..;;......;;@u..
240235b8:	3b3b53d4 bb2f96ad 3b3ac387 3932cd6d     .S;;../...:;m.29
240235c8:	3b39e888 3b45155e 3b38c36f 3bbeec67     ..9;^.E;o.8;g..;
240235d8:	3b3754f0 3c0d4b6f 3b359dd8 3c3ab2e4     .T7;oK.<..5;..:<
240235e8:	3b339f14 3c679aae 3b3159ae 3c89f88c     ..3;..g<.Y1;...<
240235f8:	3b2ececa 3c9fd263 3b2bffa7 3cb55257     ...;c..<..+;WR.<
24023608:	3b28eda0 3cca700b 3b259a25 3cdf2351     ..(;.p.<%.%;Q#.<
24023618:	3b2206c8 3cf3642b 3b1e3530 3d039569     ..";+d.<05.;i..=
24023628:	3b1a2715 3d0d37d9 3b15de52 3d1695be     .'.;.7.=R..;...=
24023638:	3b115cd2 3d1fab8c 3b0ca494 3d2875d5     .\.;...=...;.u(=
24023648:	3b07b7af 3d30f14f 3b029850 3d391ad4     ...;O.0=P..;..9=
24023658:	3afa915f 3d40ef61 3aef9648 3d486c12     _..:a.@=H..:.lH=
24023668:	3ae4440d 3d4f8e33 3ad89f94 3d565331     .D.:3.O=...:1SV=
24023678:	3accade5 3d5cb89d 3ac0740a 3d62bc40     ...:..\=.t.:@.b=
24023688:	3ab3f746 3d685bfa 3aa73ce8 3d6d95e0     F..:.[h=.<.:..m=
24023698:	3a9a4a44 3d726832 3a8d24db 3d76d158     DJ.:2hr=.$.:X.v=
240236a8:	3a7fa456 3d7acfea 3a64afa7 3d7e62a9     V..:..z=..d:.b~=
240236b8:	3a4976e3 3d80c443 3a2e0563 3d82204d     .vI:C..=c..:M .=
240236c8:	3a126693 3d83451b 39ed4bc7 3d843266     .f.:.E.=.K.9f2.=
240236d8:	39b59d99 3d84e804 397bb331 3d8565de     ...9...=1.{9.e.=
240236e8:	390c2d6b 3d85abf4 37e6bcaf 3d85ba60     k-.9...=...7`..=
240236f8:	b8a4416c 3d85914f b9408e33 3d853109     lA..O..=3.@..1.=
24023708:	b99721f4 3d8499e7 b9cd8aa3 3d83cc5c     .!.....=....\..=
24023718:	ba01b593 3d82c8f1 ba1c56dc 3d819043     .......=.V..C..=
24023728:	ba369e73 3d802306 ba5081cb 3d7d0405     s.6..#.=..P...}=
24023738:	ba69f687 3d795c2a ba81793f 3d755061     ..i.*\y=?y..aPu=
24023748:	ba8db5e1 3d70e2b1 ba99ac53 3d6c154f     ......p=S...O.l=
24023758:	baa557cf 3d66ea90 bab0b3ce 3d6164f2     .W....f=.....da=
24023768:	babbbbd0 3d5b8715 bac66b8a 3d5553b7     ......[=.k...SU=
24023778:	bad0bed2 3d4ecdc1 badab1b4 3d47f834     ......N=....4.G=
24023788:	bae4405c 3d40d631 baed6719 3d396af8     \@..1.@=.g...j9=
24023798:	baf62275 3d31b9e4 bafe6f29 3d29c66b     u"....1=)o..k.)=
240237a8:	bb03250a 3d21941a bb06d825 3d192698     .%....!=%....&.=
240237b8:	bb0a4f8f 3d1081a0 bb0d8a06 3d07a8ff     .O.....=.......=
240237c8:	bb10865c 3cfd4134 bb13438c 3cead8c1     \...4A.<.C.....<
240237d8:	bb15c09c 3cd820ae bb17fcb6 3cc52117     ..... .<.....!.<
240237e8:	bb19f722 3cb1e230 bb1baf40 3c9e6c4c     "...0..<@...Ll.<
240237f8:	bb1d248f 3c8ac7ba bb1e56a0 3c6df9c3     .$.....<.V....m<
24023808:	bb1f452e 3c462879 bb1ff00a 3c1e2c7a     .E..y(F<....z,.<
24023818:	bb20571f 3bec2d65 bb207a78 3b9bf029     .W .e-.;xz .)..;
24023828:	bb205a42 3b178610 bb1ff6b4 b9070a1c     BZ ....;........
24023838:	bb1f5034 bb27c0d7 bb1e673c bba3140a     4P....'.<g......
24023848:	bb1d3c62 bbf1b23b bb1bd056 bc1fcd33     b<..;...V...3...
24023858:	bb1a23e5 bc465630 bb1837f0 bc6c642c     .#..0VF..7..,dl.
24023868:	bb160d80 bc88f3c5 bb13a5ad bc9b687c     ............|h..
24023878:	bb1101a7 bcad88af bb0e22ba bcbf4d07     ........."...M..
24023888:	bb0b0a4e bcd0ae4e bb07b9d9 bce1a58c     N...N...........
24023898:	bb0432ef bcf22be7 bb007738 bd011d69     .2...+..8w..i...
240238a8:	baf910df bd08e5f0 baf0d0c9 bd106c74     ............tl..
240238b8:	bae83203 bd17ae04 badf3870 bd1ea7c9     .2......p8......
240238c8:	bad5e821 bd25570a bacc4557 bd2bb934     !....W%.WE..4.+.
240238d8:	bac25456 bd31cbd8 bab8199e bd378ca4     VT....1.......7.
240238e8:	baad99b4 bd3cf973 baa2d945 bd42103b     ....s.<.E...;.B.
240238f8:	ba97dd1b bd46cf24 ba8ca9fb bd4b3474     ....$.F.....t4K.
24023908:	ba8144db bd4f3e9c ba6b6572 bd52ec31     .D...>O.rek.1.R.
24023918:	ba53f140 bd563bf7 ba3c3755 bd592cd5     @.S..;V.U7<..,Y.
24023928:	ba2441fe bd5bbddc ba0c1b9a bd5dee4a     .A$...[.....J.].
24023938:	b9e79d27 bd5fbd85 b9b6cac8 bd612b1b     '....._......+a.
24023948:	b985d509 bd6236c4 b929a1cc bd62e065     .....6b...).e.b.
24023958:	b88f4d1f bd63280b 37d0eed1 bd630def     .M...(c....7..c.
24023968:	38f703d3 bd62926c 395c5c54 bd61b610     ...8l.b.T\\9..a.
24023978:	399e4214 bd60798d 39cde871 bd5eddbc     .B.9.y`.q..9..^.
24023988:	39fd0d35 bd5ce3a1 3a15ce4e bd5a8c69     5..9..\.N..:i.Z.
24023998:	3a2cc198 bd57d960 3a4356e5 bd54cc05     ..,:`.W..VC:..T.
240239a8:	3a5984d6 bd5165f1 3a6f4237 bd4da8e8     ..Y:.eQ.7Bo:..M.
240239b8:	3a824307 bd4996d2 3a8ca3ce bd4531b3     .C.:..I....:.1E.
240239c8:	3a96bf30 bd407bb9 3aa0910d bd3b7732     0..:.{@....:2w;.
240239d8:	3aaa155f bd362685 3ab34853 bd308c42     _..:.&6.SH.:B.0.
240239e8:	3abc2636 bd2aab12 3ac4ab6b bd2485b6     6&.:..*.k..:..$.
240239f8:	3accd49e bd1e1f12 3ad49e86 bd177a1d     ...:.......:.z..
24023a08:	3adc061d bd1099ec 3ae30870 bd0981a9     ...:....p..:....
24023a18:	3ae9a2cf bd023493 3aefd2b6 bcf56bf8     ...:.4.....:.k..
24023a28:	3af595c4 bce6129e 3afae9c9 bcd66400     ...:.......:.d..
24023a38:	3affccdd bcc66732 3b021e9c bcb6235d     ...:2g.....;]#..
24023a48:	3b041c9a bca59fcd 3b05dfc2 bc94e3d2     ...;.......;....
24023a58:	3b07677d bc83f6e5 3b08b347 bc65c0ef     }g.;....G..;..e.
24023a68:	3b09c2c8 bc435042 3b0a95b0 bc20aad7     ...;BPC....;.. .
24023a78:	3b0b2bd4 bbfbbfc3 3b0b8522 bbb5fd32     .+.;...."..;2...
24023a88:	3b0ba19f bb6058c1 3b0b8171 baa9aea9     ...;.X`.q..;....
24023a98:	3b0b24cc 3a5935ee 3b0a8c0f 3b40d98b     .$.;.5Y:...;..@;
24023aa8:	3b09b7a0 3ba54895 3b08a80d 3be99c9c     ...;.H.;...;...;
24023ab8:	3b075dfa 3c16a5cd 3b05da1b 3c381c51     .].;...<...;Q.8<
24023ac8:	3b041d4a 3c5923a8 3b022871 3c79adc1     J..;.#Y<q(.;..y<
24023ad8:	3afff928 3c8cd672 3afb3596 3c9c89ce     (..:r..<.5.:...<
24023ae8:	3af60897 3cabea59 3af074b6 3cbaf1a3     ...:Y..<.t.:...<
24023af8:	3aea7ca5 3cc9996c 3ae42356 3cd7dba4     .|.:l..<V#.:...<
24023b08:	3add6bc5 3ce5b25c 3ad65935 3cf317f0     .k.:\..<5Y.:...<
24023b18:	3aceeef7 3d000370 3ac73089 3d063cf6     ...:p..=.0.:.<.=
24023b28:	3abf2182 3d0c3601 3ab6c5ad 3d11ec2e     .!.:.6.=...:...=
24023b38:	3aae20dd 3d175d34 3aa53718 3d1c86ef     . .:4].=.7.:...=
24023b48:	3a9c0c6e 3d216751 3a92a51a 3d25fc79     n..:Qg!=...:y.%=
24023b58:	3a890555 3d2a44a5 3a7e630f 3d2e3e31     U..:.D*=.c~:1>.=
24023b68:	3a6a5c42 3d31e7a1 3a55ff4d 3d353fa0     B\j:..1=M.U:.?5=
24023b78:	3a415555 3d3844f6 3a2c679d 3d3af694     UUA:.D8=.g,:..:=
24023b88:	3a173f82 3d3d5390 3a01e66f 3d3f5b2a     .?.:.S==o..:*[?=
24023b98:	39d8cbc8 3d410cc3 39ad8ed2 3d4267df     ...9..A=...9.gB=
24023ba8:	39822915 3d436c31 392d5b78 3d44198d     .).91lC=x[-9..D=
24023bb8:	38acbf89 3d446fec b4f581df 3d446f73     ...8.oD=....soD=
24023bc8:	b8ae1c2f 3d441863 b92d3477 3d436b2f     /...c.D=w4-./kC=
24023bd8:	b981642c 3d426868 b9abd247 3d4110c4     ,d..hhB=G.....A=
24023be8:	b9d5d234 3d3f651d b9ff51c7 3d3d667b     4....e?=.Q..{f==
24023bf8:	ba141f93 3d3b15fe ba28445e 3d3874ec     ......;=^D(..t8=
24023c08:	ba3c0ea3 3d3584b2 ba4f75f3 3d3246da     ..<...5=.uO..F2=
24023c18:	ba627208 3d2ebd12 ba74fad8 3d2ae925     .rb....=..t.%.*=
24023c28:	ba838448 3d26cd03 ba8c49c7 3d226ab6     H.....&=.I...j"=
24023c38:	ba94ca41 3d1dc464 ba9d021e 3d18dc52     A...d..=....R..=
24023c48:	baa4ee03 3d13b4e1 baac8a9e 3d0e508e     .......=.....P.=
24023c58:	bab3d4d9 3d08b1e5 babac9a6 3d02db9a     .......=.......=
24023c68:	bac16645 3cf9a0cb bac7a7fd 3ced264e     Ef.....<....N&.<
24023c78:	bacd8c54 3ce04d88 bad310f0 3cd31c78     T....M.<....x..<
24023c88:	bad833ab 3cc5993c badcf281 3cb7ca16     .3..<..<.......<
24023c98:	bae14ba4 3ca9b55b bae53d6d 3c9b6185     .K..[..<m=...a.<
24023ca8:	bae8c675 3c8cd520 baebe574 3c7c2d8e     u... ..<t....-|<
24023cb8:	baee9948 3c5e5a69 baf0e121 3c403e3e     H...iZ^<!...>>@<
24023cc8:	baf2bc39 3c21e6ba baf42a11 3c036178     9.....!<.*..xa.<
24023cd8:	baf52a64 3bc9785a baf5bcfd 3b8c091a     d*..Zx.;.......;
24023ce8:	baf5e1ef 3b1d213d baf59986 3a0951e4     ....=!.;.....Q.:
24023cf8:	baf4e421 bab03b2d baf3c26b bb51fed0     !...-;..k.....Q.
24023d08:	baf2352b bba58cb3 baf03d6a bbe19c0d     +5......j=......
24023d18:	baeddc4d bc0e8990 baeb132b bc2bebf7     M.......+.....+.
24023d28:	bae7e398 bc48e867 bae44f42 bc657255     ....g.H.BO..Ure.
24023d38:	bae05809 bc80bea7 badbfff1 bc8e7ea9     .X...........~..
24023d48:	bad74941 bc9bf33b bad2364c bca9169f     AI..;...L6......
24023d58:	baccc994 bcb5e33c bac705ca bcc25397     ....<........S..
24023d68:	bac0edbe bcce6274 baba8465 bcda0ab8     ....tb..e.......
24023d78:	bab3cccc bce54788 baacca34 bcf0142a     .....G..4...*...
24023d88:	baa57ff1 bcfa6c27 ba9df176 bd02259f     ....'l..v....%..
24023d98:	ba96225b bd06d6b4 ba8e163f bd0b4764     ["......?...dG..
24023da8:	ba85d0e5 bd0f75ec ba7aac6c bd13609d     .....u..l.z..`..
24023db8:	ba69542d bd1705ee ba57a11c bd1a6472     -Ti.......W.rd..
24023dc8:	ba459b61 bd1d7ae0 ba334b48 bd20480c     a.E..z..HK3..H .
24023dd8:	ba20b936 bd22caf3 ba0deda9 bd2502a9     6. ...".......%.
24023de8:	b9f5e265 bd26ee6f b9cf98eb bd288da0     e...o.&.......(.
24023df8:	b9a91044 bd29dfc0 b98259db bd2ae475     D.....)..Y..u.*.
24023e08:	b9370e4f bd2b9b82 b8d2a697 bd2c04d6     O.7...+.......,.
24023e18:	b7dd2c5c bd2c207a 384760a9 bd2beea3     \,..z ,..`G8..+.
24023e28:	38fe066c bd2b6fa0 394bb940 bd2aa3e5     l..8.o+.@.K9..*.
24023e38:	398bec11 bd298c0d 39b19f1a bd2828d1     ...9..)....9.((.
24023e48:	39d6e50b bd267b07 39fbad7a bd2483ab     ...9.{&.z..9..$.
24023e58:	3a0ff41d bd2243da 3a21c2b6 bd1fbccf     ...:.C"...!:....
24023e68:	3a333ac1 bd1cefe5 3a4454a0 bd19de93     .:3:.....TD:....
24023e78:	3a5508e7 bd168a6e 3a65505f bd12f52d     ..U:n..._Pe:-...
24023e88:	3a752400 bd0f209d 3a823e80 bd0b0eaa     .$u:. ...>.:....
24023e98:	3a89aa63 bd06c155 3a90d287 bd023ac3     c..:U......:.:..
24023ea8:	3a97b3e6 bcfafa47 3a9e4b8e bcf1158c     ...:G....K.:....
24023eb8:	3aa496c5 bce6cc22 3aaa92e6 bcdc22f1     ...:"......:."..
24023ec8:	3ab03d75 bcd11f1c 3ab59421 bcc5c5d8     u=.:....!..:....
24023ed8:	3aba94c4 bcba1c8c 3abf3d53 bcae28b8     ...:....S=.:.(..
24023ee8:	3ac38bf5 bca1eff5 3ac77ef4 bc957807     ...:.....~.:.x..
24023ef8:	3acb14d6 bc88c6b9 3ace4c29 bc77c3f1     ...:....)L.:..w.
24023f08:	3ad123d2 bc5d9f78 3ad39abf bc432c1a     .#.:x.]....:.,C.
24023f18:	3ad5b018 bc287616 3ad7633a bc0d89b4     ...:.v(.:c.:....
24023f28:	3ad8b39c bbe4e681 3ad9a0f1 bbae7e45     ...:.......:E~..
24023f38:	3ada2b15 bb6fe6ff 3ada5213 bb02bdf5     .+.:..o..R.:....
24023f48:	3ada1614 b9ad9762 3ad97780 3aae11a9     ...:b....w.:...:
24023f58:	3ad876e9 3b434449 3ad714fa 3b976763     .v.:IDC;...:cg.;
24023f68:	3ad552ad 3bccbc0e 3ad33104 3c00c428     .R.:...;.1.:(..<
24023f78:	3ad0b133 3c1ada4e 3acdd4b5 3c3494e8     3..:N..<...:..4<
24023f88:	3aca9d03 3c4de881 3ac70bd4 3c66ca04     ...:..M<...:..f<
24023f98:	3ac32311 3c7f2e5e 3abee4b5 3c8b857a     .#.:^..<...:z..<
24023fa8:	3aba52e6 3c972aa9 3ab56ffe 3ca281aa     .R.:.*.<.o.:...<
24023fb8:	3ab03e5d 3cad858f 3aaac0a2 3cb8319a     ]>.:...<...:.1.<
24023fc8:	3aa4f985 3cc28134 3a9eebc7 3ccc6ff0     ...:4..<...:.o.<
24023fd8:	3a989a63 3cd5f997 3a920867 3cdf1a1c     c..:...<g..:...<
24023fe8:	3a8b3904 3ce7cdaa 3a842f71 3cf010a4     .9.:...<q/.:...<
24023ff8:	3a79de21 3cf7df95 3a6af6a2 3cff3748     !.y:...<..j:H7.<
24024008:	3a5baf7a 3d030a64 3a4c0fdb 3d063aa2     z.[:d..=..L:.:.=
24024018:	3a3c1f20 3d092b1f 3a2be4c0 3d0bdab2      .<:.+.=..+:...=
24024028:	3a1b6854 3d0e4852 3a0ab189 3d10731a     Th.:RH.=...:.s.=
24024038:	39f39048 3d125a3b 39d167f5 3d13fd0a     H..9;Z.=.g.9...=
24024048:	39aef9e8 3d155afe 398c55fb 3d1673aa     ...9.Z.=.U.9.s.=
24024058:	3953183f 3d1746c1 390d5890 3d17d41a     ?.S9.F.=.X.9...=
24024068:	388f199d 3d181ba8 35ea6c11 3d181d7b     ...8...=.l.5{..=
24024078:	b8875f32 3d17d9cc b908e0f2 3d1750ea     2_.....=.....P.=
24024088:	b94d9fe6 3d16834c b988e6b1 3d15717f     ..M.L..=.....q.=
24024098:	b9aaa55c 3d141c34 b9cbfcc3 3d128439     \...4..=....9..=
240240a8:	b9ecde00 3d10aa7d ba069d2e 3d0e9009     ....}..=.......=
240240b8:	ba1681b7 3d0c3601 ba26158d 3d099dab     .....6.=..&....=
240240c8:	ba3551cb 3d06c864 ba442fb6 3d03b7a5     .Q5.d..=./D....=
240240d8:	ba52a8c7 3d006d03 ba60b6a5 3cf9d452     ..R..m.=..`.R..<
240240e8:	ba6e532f 3cf261b7 ba7b787b 3cea85f6     /Sn..a.<{x{....<
240240f8:	ba841068 3ce244ef ba8a236b 3cd9a2b4     h....D.<k#.....<
24024108:	ba8ff29e 3cd0a38c ba957b8e 3cc74bd4     .......<.{...K.<
24024118:	ba9abbe1 3cbda014 ba9fb161 3cb3a4fe     .......<a......<
24024128:	baa45a09 3ca95f5f baa8b3d8 3c9ed421     .Z..__.<....!..<
24024138:	baacbd15 3c940850 bab0741e 3c89010b     ....P..<.t.....<
24024148:	bab3d777 3c7b872a bab6e5ca 3c64aa6f     w...*.{<....o.d<
24024158:	bab99df1 3c4d76b6 babbfeda 3c35f6dd     .....vM<......5<
24024168:	babe07c1 3c1e35e1 babfb7e6 3c063ee5     .....5.<.....>.<
24024178:	bac10ec2 3bdc3a19 bac20bf6 3babb719     .....:.;.......;
24024188:	bac2af56 3b76168c bac2f8c1 3b149a2b     V.....v;....+..;
24024198:	bac2e86a 3a4c97d5 bac27e84 ba38653c     j.....L:.~..<e8.
240241a8:	bac1bb90 bb0ef718 bac0a019 bb6f4724     ............$Go.
240241b8:	babf2ce2 bba76ecb babd62d5 bbd6c77e     .,...n...b..~...
240241c8:	babb42fb bc02cc1e bab8ce8b bc19e5f0     .B..............
240241d8:	bab606eb bc30a6d1 bab2ed8f bc470481     ......0.......G.
240241e8:	baaf8423 bc5cf503 baabcc6e bc726e92     #.....\.n....nr.
240241f8:	baa7c85b bc83b3cf baa379fe bc8deb70     [........y..p...
24024208:	ba9ee385 bc97d9a6 ba9a0739 bca17a18     ........9....z..
24024218:	ba94e783 bcaac891 ba8f8702 bcb3c102     ................
24024228:	ba89e84c bcbc5f87 ba840e20 bcc4a069     L...._.. ...i...
24024238:	ba7bf6d5 bccc8021 ba6f6623 bcd3fb4f     ..{.!...#fo.O...
24024248:	ba627046 bcdb0ed5 ba551b80 bce1b7b0     Fpb.......U.....
24024258:	ba476e36 bce7f31e ba396ef4 bcedbe9a     6nG......n9.....
24024268:	ba2b2468 bcf317ba ba1c955e bcf7fc66     h$+.....^...f...
24024278:	ba0dc8bc bcfc6aaa b9fd8b06 bd00306c     .....j......l0..
24024288:	b9df2589 bd01eeb8 b9c06f51 bd036f96     .%......Qo...o..
24024298:	b9a176ba bd04b284 b9824a49 bd05b717     .v......IJ......
240242a8:	b945f104 bd067d0a b9071fef bd070429     ..E..}......)...
240242b8:	b8907ceb bd074c68 b7169b72 bd0755d0     .|..hL..r....U..
240242c8:	3855053b bd072090 38e74b7e bd06aceb     ;.U8. ..~K.8....
240242d8:	3931a6fb bd05fb42 396f2892 bd050c19     ..19B....(o9....
240242e8:	39960735 bd03e00c 39b41e65 bd0277cf     5..9....e..9.w..
240242f8:	39d1cc2d bd00d436 39ef0319 bcfdec5f     -..96......9_...
24024308:	3a05dafb bcf9bd8c 3a13ebec bcf51e2a     ...:.......:*...
24024318:	3a21ae0e bcf010ba 3a2f1b3a bcea97df     ..!:....:./:....
24024328:	3a3c2d72 bce4b673 3a48dee8 bcde6f7c     r-<:s.....H:|o..
24024338:	3a5529fd bcd7c62a 3a610947 bcd0bde3     .)U:*...G.a:....
24024348:	3a6c778d bcc95a27 3a776fd4 bcc19ea6     .wl:'Z...ow:....
24024358:	3a80f6ac bcb98f3d 3a85f5c5 bcb12fde     ...:=......:./..
24024368:	3a8ab319 bca884ae 3a8f2c9d bc9f91e6     ...:.....,.:....
24024378:	3a936067 bc965bdd 3a974cb8 bc8ce714     g`.:.[...L.:....
24024388:	3a9aeff5 bc833813 3a9e489a bc72a711     ...:.8...H.:..r.
24024398:	3aa15550 bc5e7c6d 3aa414e1 bc49f9d4     PU.:m|^....:..I.
240243a8:	3aa6863c bc35290c 3aa8a86f bc2013f9     <..:.)5.o..:.. .
240243b8:	3aaa7abd bc0ac4a3 3aabfc7b bbea8a26     .z.:....{..:&...
240243c8:	3aad2d30 bbbf3eda 3aae0c87 bb93bbb6     0-.:.>.....:....
240243d8:	3aae9a5d bb502a42 3aaed68f baf17df6     ]..:B*P....:.}..
240243e8:	3aaec149 ba05794f 3aae5acf 3a573c54     I..:Oy...Z.:T<W:
240243f8:	3aada389 3b0ca0da 3aac9bf7 3b62eed6     ...:...;...:..b;
24024408:	3aab44d7 3b9c48a1 3aa99efe 3bc6b060     .D.:.H.;...:`..;
24024418:	3aa7ab5e 3bf09b37 3aa56b23 3c0cfb00     ^..:7..;#k.:...<
24024428:	3aa2df82 3c2156f1 3aa009e5 3c355831     ...:.V!<...:1X5<
24024438:	3a9cebd6 3c48f5a8 3a9986e9 3c5c2687     ...:..H<...:.&\<
24024448:	3a95dcee 3c6ee220 3a91efce 3c80900e     ...: .n<...:...<
24024458:	3a8dc185 3c896c25 3a895438 3c92016a     ...:%l.<8T.:j..<
24024468:	3a84aa16 3c9a4c0c 3a7f8b09 3ca24864     ...:.L.<...:dH.<
24024478:	3a7551d6 3ca9f2f3 3a6aada9 3cb14862     .Qu:...<..j:bH.<
24024488:	3a5fa3c1 3cb8457c 3a543988 3cbee74c     .._:|E.<.9T:L..<
24024498:	3a487496 3cc52aed 3a3c5aa3 3ccb0dc5     .tH:.*.<.Z<:...<
240244a8:	3a2ff194 3cd08d51 3a233f63 3cd5a74c     ../:Q..<c?#:L..<
240244b8:	3a164a34 3cda599e 3a09183f 3cdea25d     4J.:.Y.<?..:]..<
240244c8:	39f75faf 3ce27fdd 39dc2ec6 3ce5f09a     ._.9...<...9...<
240244d8:	39c0aab8 3ce8f344 39a4e09a 3ceb86c7     ...9D..<...9...<
240244e8:	3988dd97 3cedaa3d 39595dd0 3cef5cfa     ...9=..<.]Y9.\.<
240244f8:	3920c3a3 3cf09e7e 38d00eaa 3cf16e8d     .. 9~..<...8.n.<
24024508:	383d0dc6 3cf1cd17 b716d77e 3cf1ba3d     ..=8...<~...=..<
24024518:	b883e1ec 3cf13659 b8f45976 3cf041fd     ....Y6.<vY...A.<
24024528:	b93206b4 3ceeddf4 b9696509 3ced0b26     ..2....<.ei.&..<
24024538:	b9901712 3ceacaca b9ab2466 3ce81e37     .......<f$..7..<
24024548:	b9c5ce1b 3ce50700 b9e007f6 3ce186e3     .......<.......<
24024558:	b9f9c606 3cdd9fc9 ba097e47 3cd953d9     .......<G~...S.<
24024568:	ba15d011 3cd4a559 ba21d2d0 3ccf96c1     ....Y..<..!....<
24024578:	ba2d811a 3cca2ab6 ba38d5b2 3cc46408     ..-..*.<..8..d.<
24024588:	ba43cb88 3cbe45ab ba4e5dba 3cb7d2c0     ..C..E.<.]N....<
24024598:	ba58879b 3cb10e80 ba6244b0 3ca9fc5e     ..X....<.Db.^..<
240245a8:	ba6b90b2 3ca29fd8 ba746795 3c9afc9b     ..k....<.gt....<
240245b8:	ba7cc585 3c93166d ba825376 3c8af135     ..|.m..<vS..5..<
240245c8:	ba860433 3c8290f4 ba897376 3c73f378     3......<vs..x.s<
240245d8:	ba8c9fbf 3c625f86 ba8f87c8 3c506e8d     ....._b<.....nP<
240245e8:	ba922a6d 3c3e293b ba94868a 3c2b986a     m*..;)><....j.+<
240245f8:	ba969b49 3c18c500 ba9867da 3c05b805     I......<.g.....<
24024608:	ba99eb9b 3be4f522 ba9b25fa 3bbe2ba4     ...."..;.%...+.;
24024618:	ba9c16aa 3b9725f9 ba9cbd5d 3b5fed44     .....%.;]...D._;
24024628:	ba9d1a02 3b116043 ba9d2c99 3a8593ed     ....C`.;.,.....:
24024638:	ba9cf54c b93b0b0f ba9c7473 bab3d5d2     L.....;.st......
24024648:	ba9baa74 bb27c023 ba9a97e0 bb750c13     t...#.'.......u.
24024658:	ba993d6d bba0d565 ba979be8 bbc6bc5f     m=..e......._...
24024668:	ba95b454 bbec2976 ba9387c3 bc0885b2     T...v)..........
24024678:	ba911761 bc1aa89f ba8e6487 bc2c7534     a........d..4u,.
24024688:	ba8b70ae bc3de345 ba883d59 bc4eeaf5     .p..E.=.Y=....N.
24024698:	ba84cc3e bc5f8475 ba811f29 bc6fa859     >...u._.)...Y.o.
240246a8:	ba7a6ff0 bc7f4f61 ba723154 bc87393a     .oz.aO..T1r.:9..
240246b8:	ba6986b1 bc8e856f ba607463 bc958914     ..i.o...ct`.....
240246c8:	ba56fef6 bc9c4109 ba4d2b23 bca2aa64     ..V..A..#+M.d...
240246d8:	ba42fdca bca8c251 ba387bf5 bcae8630     ..B.Q....{8.0...
240246e8:	ba2daacf bcb3f388 ba228faa bcb90804     ..-.......".....
240246f8:	ba172ff0 bcbdc182 ba0b912f bcc21e0d     ./....../.......
24024708:	b9ff7216 bcc61bd3 b9e75a7c bcc9b942     .r......|Z..B...
24024718:	b9cee737 bcccf4db b9b6240b bccfcd6d     7........$..m...
24024728:	b99d1cd7 bcd241e1 b983dd99 bcd45156     .....A......VQ..
24024738:	b954e4bf bcd5fb1f b921ce84 bcd73ebb     ..T.......!..>..
24024748:	b8dd217f bcd81be0 b86d0f0a bcd89263     .!........m.c...
24024758:	b6fff827 bcd8a263 382c8c6b bcd84c1c     '...c...k.,8.L..
24024768:	38bc1991 bcd79004 3910a569 bcd66ebc     ...8....i..9.n..
24024778:	3942d560 bcd4e910 39748537 bcd30008     `.B9....7.t9....
24024788:	3992ceec bcd0b4c9 39ab0444 bcce08b7     ...9....D..9....
24024798:	39c2d76e bccafd5a 39da3d72 bcc79464     n..9Z...r=.9d...
240247a8:	39f12b8a bcc3cfb9 3a03cb9e bcbfb15b     .+.9.......:[...
240247b8:	3a0ebb24 bcbb3b80 3a195f5b bcb67085     $..:.;..[_.:.p..
240247c8:	3a23b375 bcb152e9 3a2db2c5 bcabe556     u.#:.R....-:V...
240247d8:	3a3758ce bca62a8c 3a40a13f bca02585     .X7:.*..?.@:.%..
240247e8:	3a4987f4 bc99d945 3a5208fc bc9348fd     ..I:E.....R:.H..
240247f8:	3a5a209c bc8c77f8 3a61cb44 bc85699c     . Z:.w..D.a:.i..
24024808:	3a6905a4 bc7c42dc 3a6fcc9d bc6d4614     ..i:.B|...o:.Fm.
24024818:	3a761d4b bc5de442 3a7bf502 bc4e24f1     K.v:B.]...{:.$N.
24024828:	3a80a8aa bc3e0fdb 3a831809 bc2dacd7     ...:..>....:..-.
24024838:	3a85479f bc1d03e8 3a87368d bc0c1d17     .G.:.....6.:....
24024848:	3a88e41d bbf60128 3a8a4fa5 bbd36d3d     ...:(....O.:=m..
24024858:	3a8b78bc bbb08f0e 3a8c5eeb bb8d7753     .x.:.....^.:Sw..
24024868:	3a8d0207 bb546da2 3a8d61e4 bb0dbcb0     ...:.mT..a.:....
24024878:	3a8d7e8c ba8dfad5 3a8d5818 b6a2baaf     .~.:.....X.:....
24024888:	3a8ceed5 3a8c4c18 3a8c4311 3b0c4799     ...:.L.:.C.:.G.;
24024898:	3a8b555e 3b51f248 3a8a2656 3b8b82b7     ^U.:H.Q;V&.:...;
240248a8:	3a88b6a6 3badb063 3a87073d 3bcf7232     ...:c..;=..:2r.;
240248b8:	3a85190d 3bf0b876 3a82ed2b 3c08b9e1     ...:v..;+..:...<
240248c8:	3a8084c9 3c18ca7a 3a7bc26a 3c28869c     ...:z..<j.{:..(<
240248d8:	3a7607b2 3c37e717 3a6fdc73 3c46e4e1     ..v:..7<s.o:..F<
240248e8:	3a6943e7 3c557924 3a62417b 3c639d3e     .Ci:$yU<{Ab:>.c<
240248f8:	3a5ad8cc 3c714ac6 3a530da3 3c7e7b9c     ..Z:.Jq<..S:.{~<
24024908:	3a4ae3f9 3c8594f0 3a425fef 3c8ba7ef     ..J:...<._B:...<
24024918:	3a3985cf 3c91741c 3a305a06 3c96f6ed     ..9:.t.<.Z0:...<
24024928:	3a26e129 3c9c2df9 3a1d1feb 3ca116f7     ).&:.-.<...:...<
24024938:	3a131b22 3ca5afcd 3a08d7bc 3ca9f68e     "..:...<...:...<
24024948:	39fcb58d 3cade962 39e752c4 3cb186b0     ...9b..<.R.9...<
24024958:	39d19194 3cb4ccf6 39bb7c8e 3cb7bae7     ...9...<.|.9...<
24024968:	39a51e6d 3cba4f62 398e8204 3cbc8968     m..9bO.<...9h..<
24024978:	396f6475 3cbe6830 3941740f 3cbfeb17     udo90h.<.tA9...<
24024988:	391348f4 3cc111ae 38c9f262 3cc1db9d     .H.9...<b..8...<
24024998:	385a6b94 3cc248d5 37044237 3cc2595c     .kZ8.H.<7B.7\Y.<
240249a8:	b817d443 3cc20d71 b8a7f5a7 3cc1657b     C...q..<....{e.<
240249b8:	b901b766 3cc06210 b92f1542 3cbf03e1     f....b.<B./....<
240249c8:	b95bff0c 3cbd4be6 b9842fdf 3cbb3b25     ..[..K.<./..%;.<
240249d8:	b99a1151 3cb8d2e0 b9af99a7 3cb6147a     Q......<....z..<
240249e8:	b9c4bee5 3cb3017f b9d9773b 3caf9b9f     .......<;w.....<
240249f8:	b9edb91c 3cabe4bb ba00bd9d 3ca7ded1     .......<.......<
24024a08:	ba0a5a41 3ca38bfc ba13ae1a 3c9eee8d     AZ.....<.......<
24024a18:	ba1cb4e7 3c9a08e5 ba256a93 3c94dd92     .......<.j%....<
24024a28:	ba2dcb31 3c8f6f39 ba35d301 3c89c09e     1.-.9o.<..5....<
24024a38:	ba3d7e6d 3c83d4ac ba44ca0f 3c7b5cb8     m~=....<..D..\{<
24024a48:	ba4bb2b0 3c6ea189 ba52354c 3c617e35     ..K...n<L5R.5~a<
24024a58:	ba584f0f 3c53f947 ba5dfd5d 3c461975     .OX.G.S<].].u.F<
24024a68:	ba633dca 3c37e595 ba680e23 3c2964b3     .=c...7<#.h..d)<
24024a78:	ba6c6c6d 3c1a9deb ba7056e0 3c0b987d     mll....<.Vp.}..<
24024a88:	ba73cbf1 3bf8b77d ba76ca4e 3bd9de34     ..s.}..;N.v.4..;
24024a98:	ba7950da 3bbab417 ba7b5eb9 3b9b4841     .Py....;.^{.AH.;
24024aa8:	ba7cf340 3b7753b4 ba7e0e06 3b37d02f     @.|..Sw;..~./.7;
24024ab8:	ba7eaedc 3af048f5 ba7ed5c6 3a61bc21     ..~..H.:..~.!.a:
24024ac8:	ba7e8309 b8e63746 ba7db724 ba8d3f07     ..~.F7..$.}..?..
24024ad8:	ba7c72cc bb05bc35 ba7ab6f0 bb4469f4     .r|.5.....z..iD.
24024ae8:	ba7884b7 bb814590 ba75dd83 bba00141     ..x..E....u.A...
24024af8:	ba72c2e9 bbbe599e ba6f36b4 bbdc4073     ..r..Y...6o.s@..
24024b08:	ba6b3ae8 bbf9a7d1 ba66d1b9 bc0b4104     .:k.......f..A..
24024b18:	ba61fd91 bc1960dd ba5cc106 bc272ceb     ..a..`....\..,'.
24024b28:	ba571ee4 bc349ed9 ba511a23 bc41b07a     ..W...4.#.Q.z.A.
24024b38:	ba4ab5e9 bc4e5bd9 ba43f585 bc5a9b37     ..J..[N...C.7.Z.
24024b48:	ba3cdc72 bc666900 ba356e55 bc71bfe1     r.<..if.Un5...q.
24024b58:	ba2daef3 bc7c9ad0 ba25a23b bc837a79     ..-...|.;.%.yz..
24024b68:	ba1d4c3d bc8864de ba14b127 bc8d0a65     =L...d..'...e...
24024b78:	ba0bd547 bc91690e ba02bd06 bc957ef8     G....i.......~..
24024b88:	b9f2d9d0 bc994a5f b9dfd314 bc9cc9aa     ...._J..........
24024b98:	b9cc6f32 bc9ffb68 b9b8b7b9 bca2de47     2o..h.......G...
24024ba8:	b9a4b649 bca5711e b99074b0 bca7b2f2     I....q...t......
24024bb8:	b977f98d bca9a2e7 b94eb0fa bcab4045     ..w.......N.E@..
24024bc8:	b92523a2 bcac8a8d b8f6cb3d bcad8158     .#%.....=...X...
24024bd8:	b8a31610 bcae2470 b81e9fd5 bcae73c1     ....p$.......s..
24024be8:	360be183 bcae6f5f 382f9db6 bcae1790     ...6_o..../8....
24024bf8:	38aad7c0 bcad6cbb 38fd524d bcac6f6a     ...8.l..MR.8jo..
24024c08:	39278baa bcab204f 3950002c bca98052     ..'9O ..,.P9R...
24024c18:	3977f390 bca79068 398fa989 bca551c4     ..w9h......9.Q..
24024c28:	39a30621 bca2c5ad 39b60688 bc9fed91     !..9.......9....
24024c38:	39c8a1e0 bc9ccb07 39dacf8e bc995fcd     ...9.......9._..
24024c48:	39ec8726 bc95adac 39fdc085 bc91b6ac     &..9.......9....
24024c58:	3a0739df bc8d7cdb 3a0f4c9b bc890278     .9.:.|...L.:x...
24024c68:	3a1714c9 bc8449d1 3a1e8ee2 bc7eaab6     ...:.I.....:..~.
24024c78:	3a25b78c bc744f3d 3a2c8b90 bc698681     ..%:=Ot...,:..i.
24024c88:	3a3307e6 bc5e5601 3a3929af bc52c367     ..3:.V^..)9:g.R.
24024c98:	3a3eee3d bc46d485 3a44530d bc3a8f53     =.>:..F..SD:S.:.
24024ca8:	3a4955cc bc2df9f9 3a4df45c bc211ab4     .UI:..-.\.M:..!.
24024cb8:	3a522ccb bc13f7e8 3a55fd5e bc069812     .,R:....^.U:....
24024cc8:	3a596487 bbf20393 3a5c60f4 bbd67775     .dY:.....`\:uw..
24024cd8:	3a5ef180 bbba9944 3a61153c bb9e769d     ..^:D...<.a:.v..
24024ce8:	3a62cb71 bb821d2f 3a64139b bb4b3577     q.b:/.....d:w5K.
24024cf8:	3a64ed68 bb11fa1c 3a6558c3 bab147d8     h.d:.....Xe:.G..
24024d08:	3a6555c4 b9fa73d6 3a64e4be 39cf55a6     .Ue:.s....d:.U.9
24024d18:	3a640632 3aa5d886 3a62bade 3b0b9afa     2.d:...:..b:...;
24024d28:	3a6103ac 3b43dbe2 3a5ee1bc 3b7b9454     ..a:..C;..^:T.{;
24024d38:	3a5c5660 3b9954f5 3a596320 3bb4815a     `V\:.T.; cY:Z..;
24024d48:	3a5609ad 3bcf428f 3a524bef 3be98c0d     ..V:.B.;.KR:...;
24024d58:	3a4e2bf8 3c01a8c6 3a49ac09 3c0e4386     .+N:...<..I:.C.<
24024d68:	3a44ce92 3c1a906f 3a3f962c 3c2689d8     ..D:o..<,.?:..&<
24024d78:	3a3a0599 3c322a29 3a341fc5 3c3d6c27     ..::)*2<..4:'l=<
24024d88:	3a2de7c6 3c484aa7 3a2760cf 3c52c0ad     ..-:.JH<.`':..R<
24024d98:	3a208e3f 3c5cc99a 3a197392 3c6660d2     ?. :..\<.s.:.`f<
24024da8:	3a121468 3c6f8219 3a0a747c 3c78295c     h..:..o<|t.:\)x<
24024db8:	3a0297a6 3c80296b 39f503b7 3c83fd7b     ...:k).<...9{..<
24024dc8:	39e46e51 3c878f36 39d3775a 3c8add13     Qn.96..<Zw.9...<
24024dd8:	39c22748 3c8de5ac 39b086ab 3c90a7c8     H'.9...<...9...<
24024de8:	399e9e34 3c932241 398c76b7 3c95541a     4..9A".<.v.9.T.<
24024df8:	3974323e 3c973c82 394f1ccf 3c98dabd     >2t9.<.<..O9...<
24024e08:	3929bf38 3c9a2e3a 39042b9e 3c9b3692     8.)9:..<.+.9.6.<
24024e18:	38bce897 3c9bf37c 3862addf 3c9c64d0     ...8|..<..b8.d.<
24024e28:	37971b02 3c9c8a95 b7968e6f 3c9c64f6     ...7...<o....d.<
24024e38:	b86187e4 3c9bf42d b8bb7651 3c9b38bb     ..a.-..<Qv...8.<
24024e48:	b902cb8a 3c9a3322 b9278177 3c98e41d     ...."3.<w.'....<
24024e58:	b94bcb88 3c974c88 b96f9897 3c956d55     ..K..L.<..o.Um.<
24024e68:	b9896bdd 3c9347a6 b99abc30 3c90dcb7     .k...G.<0......<
24024e78:	b9abb527 3c8e2de0 b9bc4ed9 3c8b3ca4     '....-.<.N...<.<
24024e88:	b9cc8184 3c880aa1 b9dc45b0 3c849988     .......<.E.....<
24024e98:	b9eb940d 3c80eb37 b9fa6595 3c7a0347     ....7..<.e..G.z<
24024ea8:	ba0459be 3c71bda8 ba0b3b9e 3c6909ef     .Y....q<.;....i<
24024eb8:	ba11d54e 3c5fec9a ba1823d5 3c566a5a     N....._<.#..ZjV<
24024ec8:	ba1e245b 3c4c8819 ba23d439 3c424ad3     [$....L<9.#..JB<
24024ed8:	ba2930e8 3c37b7c8 ba2e3811 3c2cd449     .0)...7<.8..I.,<
24024ee8:	ba32e788 3c21a5cd ba373d47 3c1631f8     ..2...!<G=7..1.<
24024ef8:	ba3b3779 3c0a7e81 ba3ed476 3bfd2273     y7;..~.<v.>.s".;
24024f08:	ba4212c4 3be4e01a ba44f119 3bcc41f8     ..B....;..D..A.;
24024f18:	ba476e56 3bb3542d ba498992 3b9a22fb     VnG.-T.;..I..".;
24024f28:	ba4b420d 3b80bab9 ba4c973e 3b4e4fa2     .BK....;>.L..ON;
24024f38:	ba4d88c6 3b1aed70 ba4e167b 3acecfa0     ..M.p..;{.N....:
24024f48:	ba4e4060 3a4f5ee5 ba4e06ab 36ac1d59     `@N..^O:..N.Y..6
24024f58:	ba4d69bf ba4c1185 ba4c6a34 bacc3ddc     .iM...L.4jL..=..
24024f68:	ba4b08ca bb18e122 ba494674 bb4b32c0     ..K."...tFI..2K.
24024f78:	ba472453 bb7cfbd4 ba44a3b3 bb971260     S$G...|...D.`...
24024f88:	ba41c611 bbaf4b23 ba3e8d12 bbc71cc4     ..A.#K....>.....
24024f98:	ba3afa88 bbde7c15 ba37106e bbf55e24     ..:..|..n.7.$^..
24024fa8:	ba32d0e7 bc05dc20 ba2e3e40 bc10c003     ..2. ...@>......
24024fb8:	ba295ae9 bc1b55b2 ba24297d bc25984b     .Z)..U..})$.K.%.
24024fc8:	ba1eacb7 bc2f831b ba18e772 bc39118f     ....../.r.....9.
24024fd8:	ba12dcae bc423f55 ba0c8f8b bc4b0852     ....U?B.....R.K.
24024fe8:	ba060346 bc536888 b9fe7666 bc5b5c3c     F....hS.fv..<\[.
24024ff8:	b9f07591 bc62dfe9 b9e20b21 bc69f03e     .u....b.!...>.i.
24025008:	b9d33e5d bc708a2c b9c416b1 bc76aae2     ]>..,.p.......v.
24025018:	b9b49bb6 bc7c4fc7 b9a4d528 bc80bb36     .....O|.(...6...
24025028:	b994cad8 bc830e62 b98484bd bc852076     ....b.......v ..
24025038:	b96815c2 bc86f0a0 b946cabf bc887e34     ..h.......F.4~..
24025048:	b92538c9 bc89c8a6 b903705c bc8acf87     .8%.....\p......
24025058:	b8c303d0 bc8b928b b87df7e8 bc8c1186     ..........}.....
24025068:	b7eba892 bc8c4c74 36910a8d bc8c4360     ....tL.....6`C..
24025078:	3819a74c bc8bf68e 38903e32 bc8b6650     L..8....2>.8Pf..
24025088:	38d32ff9 bc8a9321 390ac474 bc897d98     ./.8!...t..9.}..
24025098:	392b94af bc882670 394bf90f bc868e7a     ..+9p&....K9z...
240250a8:	396be238 bc84b6b9 3985a08b bc82a033     8.k9.......93...
240250b8:	3995036e bc804c26 39a41291 bc7b77bb     n..9&L.....9.w{.
240250c8:	39b2c6e4 bc75e184 39c1198f bc6fd8b6     ...9..u....9..o.
240250d8:	39cf03e9 bc696097 39dc7f82 bc627c97     ...9.`i....9.|b.
240250e8:	39e9862c bc5b3068 39f611e9 bc537fda     ,..9h0[....9..S.
240250f8:	3a010e83 bc4b6ef4 3a06d104 bc4301dd     ...:.nK....:..C.
24025108:	3a0c4de3 bc3a3d08 3a1182a9 bc3124db     .M.:.=:....:.$1.
24025118:	3a166d08 bc27be0a 3a1b0ad5 bc1e0d5a     .m.:..'....:Z...
24025128:	3a1f5a0d bc1417b9 3a2358d4 bc09e22c     .Z.:.....X#:,...
24025138:	3a270577 bbfee3a9 3a2a5e6b bbe997dd     w.':....k^*:....
24025148:	3a2d6250 bbd3eb92 3a300ff0 bbbde994     Pb-:......0:....
24025158:	3a32663f bba79ccc 3a34645c bb911040     ?f2:....\d4:@...
24025168:	3a360992 bb749e1e 3a375558 bb46c8c5     ..6:..t.XU7:..F.
24025178:	3a38474e bb18b6f5 3a38df44 bad4fe41     NG8:....D.8:A...
24025188:	3a391d35 ba70df54 3a390143 b95f784b     5.9:T.p.C.9:Kx_.
24025198:	3a388bc1 3a00adae 3a37bd2c 3a9c356f     ..8:...:,.7:o5.:
240251a8:	3a36962a 3af78080 3a35178b 3b290622     *.6:...:..5:".);
240251b8:	3a33424e 3b55d6b7 3a311793 3b810e4e     NB3:..U;..1:N..;
240251c8:	3a2e98ac 3b96e163 3a2bc70b 3bac5a44     ...:c..;..+:DZ.;
240251d8:	3a28a44d 3bc16ecf 3a253235 3bd61515     M.(:.n.;52%:...;
240251e8:	3a2172aa 3bea436b 3a1d67ba 3bfdf062     .r!:kC.;.g.:b..;
240251f8:	3a19138f 3c08896a 3a14787f 3c11d0f2     ...:j..<.x.:...<
24025208:	3a0f98f8 3c1aca81 3a0a778c 3c2371fa     ...:...<.w.:.q#<
24025218:	3a0516ea 3c2bc368 39fef3bf 3c33bb03     ...:h.+<...9..3<
24025228:	39f346a3 3c3b5541 39e72c84 3c428e9b     .F.9AU;<.,.9..B<
24025238:	39daab92 3c4963f7 39cdca2d 3c4fd250     ...9.cI<-..9P.O<
24025248:	39c08ee2 3c55d6c1 39b3005d 3c5b6ec6     ...9..U<]..9.n[<
24025258:	39a52572 3c6097f0 39970515 3c65501c     r%.9..`<...9.Pe<
24025268:	3988a659 3c699550 397420d2 3c6d65d4     Y..9P.i<. t9.em<
24025278:	395694fb 3c70c027 3938b7dc 3c73a305     ..V9'.p<..89..s<
24025288:	391a982a 3c760d63 38f8897c 3c77fe74     *..9c.v<|..8t.w<
24025298:	38bb98f5 3c7975ad 387cf913 3c7a72a2     ...8.uy<..|8.rz<
240252a8:	3802a420 3c7af549 3606e8d8 3c7afdb8      ..8I.z<...6..z<
240252b8:	b7e2d8b4 3c7a8c4e b86ab1a7 3c79a197     ....N.z<..j...y<
240252c8:	b8b19371 3c783e75 b8ed4911 3c7663df     q...u>x<.I...cv<
240252d8:	b9142e8c 3c741322 b931599e 3c714dc0     ....".t<.Y1..Mq<
240252e8:	b94e17e3 3c6e155c b96a5bba 3c6a6bef     ..N.\.n<.[j..kj<
240252f8:	b9830bdb 3c665391 b9909f66 3c61ce92     .....Sf<f.....a<
24025308:	b99de219 3c5cdf8a b9aacdc6 3c578913     ......\<......W<
24025318:	b9b75c65 3c51ce34 b9c38820 3c4bb1f0     e\..4.Q< .....K<
24025328:	b9cf4b5b 3c453798 b9daa0ac 3c3e6291     [K...7E<.....b><
24025338:	b9e582e6 3c373678 b9efed14 3c2fb712     ....x67<....../<
24025348:	b9f9da81 3c27e83c ba01a35e 3c1fce0a     ....<.'<^......<
24025358:	ba0616c8 3c176c9d ba0a4588 3c0ec845     .....l.<.E..E..<
24025368:	ba0e2dca 3c05e569 ba11cddd 3bf99115     .-..i..<.......;
24025378:	ba152435 3be6ec8f ba182f6c 3bd3e6a1     5$.....;l/.....;
24025388:	ba1aee3f 3bc088d8 ba1d5f94 3bacdce7     ?......;._.....;
24025398:	ba1f8276 3b98ec98 ba215619 3b84c1d5     v......;.V!....;
240253a8:	ba22d9d3 3b60cd35 ba240d28 3b37c9e8     ..".5.`;(.$...7;
240253b8:	ba24efbe 3b0e8dfc ba258167 3aca5b3f     ..$....;g.%.?[.:
240253c8:	ba25c218 3a6ef46c ba25b1f3 399284f1     ..%.l.n:..%....9
240253d8:	ba25513d b9b81d85 ba24a063 ba805793     =Q%.....c.$..W..
240253e8:	ba239ff8 bad22791 ba2250b9 bb11a7f7     ..#..'...P".....
240253f8:	ba20b383 bb39d4d6 ba1ec95e bb61872f     .. ...9.^.../.a.
24025408:	ba1c9374 bb845606 ba1a1313 bb979869     t....V......i...
24025418:	ba1749ac bbaa819e ba1438d2 bbbd08b9     .I.......8......
24025428:	ba10e23e bbcf24ff ba0d47c2 bbe0cdf8     >....$...G......
24025438:	ba096b58 bbf1fb63 ba054f14 bc0152a3     Xk..c....O...R..
24025448:	ba00f525 bc0961f5 b9f8bfb9 bc1127f3     %....a.......'..
24025458:	b9ef2348 bc18a10d b9e519fe bc1fc9dd     H#..............
24025468:	b9daa913 bc269f26 b9cfd5ef bc2d1dd0     ....&.&.......-.
24025478:	b9c4a621 bc334303 b9b91f6c bc390c05     !....C3.l.....9.
24025488:	b9ad47af bc3e763d b9a124eb bc437f66     .G..=v>..$..f.C.
24025498:	b994bd46 bc482553 b9881708 bc4c660a     F...S%H......fL.
240254a8:	b976710b bc503fc9 b95c5062 bc53b10d     .qv..?P.bP\...S.
240254b8:	b941d92e bc56b873 b9271888 bc5954d0     ..A.s.V...'..TY.
240254c8:	b90c1bba bc5b8542 b8e1e046 bc5d4906     ....B.[.F....I].
240254d8:	b8ab4641 bc5e9f93 b8690879 bc5f889c     AF....^.y.i..._.
240254e8:	b7f6d43f bc600401 b65e6f89 bc6011ee     ?.....`..o^...`.
240254f8:	37be9748 bc5fb2a3 384bf8b3 bc5ee6ab     H..7.._...K8..^.
24025508:	389bf5cd bc5daebd 38d17822 bc5c0bcf     ...8..]."x.8..\.
24025518:	390334cb bc59fefa 391d5868 bc578994     .4.9..Y.hX.9..W.
24025528:	39371a6a bc54ad2b 39506e87 bc516b6d     j.79+.T..nP9mkQ.
24025538:	396948be bc4dc652 3980ceaa bc49bfdd     .Hi9R.M....9..I.
24025548:	398cb063 bc455a52 399843f8 bc409836     c..9RZE..C.96.@.
24025558:	39a38407 bc3b7c17 39ae6b4c bc3608bb     ...9.|;.Lk.9..6.
24025568:	39b8f4c1 bc30411b 39c31b84 bc2a283d     ...9.A0....9=(*.
24025578:	39ccdaf6 bc23c163 39d62ea4 bc1d0fee     ...9c.#....9....
24025588:	39df1251 bc16175b 39e78207 bc0edb4a     Q..9[......9J...
24025598:	39ef79fd bc075f7b 39f6f6ac bbff4f8c     .y.9{_.....9.O..
240255a8:	39fdf4d3 bbef703d 3a0238b6 bbdf2928     ...9=p...8.:()..
240255b8:	3a0534d9 bbce828b 3a07ed90 bbbd84d9     .4.:.......:....
240255c8:	3a0a61be bbac38a3 3a0c9066 bb9aa695     .a.:.8..f..:....
240255d8:	3a0e78ad bb88d780 3a1019df bb6da887     .x.:.......:..m.
240255e8:	3a117366 bb494bb0 3a1284d6 bb24aa77     fs.:.KI....:w.$.
240255f8:	3a134dde baffae07 3a13ce59 bab5c6d4     .M.:....Y..:....
24025608:	3a140640 ba57876e 3a13f5b3 b9872377     @..:n.W....:w#..
24025618:	3a139cf3 39a0166b 3a12fc64 3a630799     ...:k..9d..:..c:
24025628:	3a12148e 3aba8e17 3a10e61c 3b018091     ...:...:...:...;
24025638:	3a0f71db 3b255d07 3a0db8b7 3b48cb35     .q.:.]%;...:5.H;
24025648:	3a0bbbc0 3b6bba27 3a097c23 3b870c97     ...:'.k;#|.:...;
24025658:	3a06fb31 3b97ebff 3a043a56 3ba87349     1..:...;V:.:Is.;
24025668:	3a013b1f 3bb89aad 39fbfe65 3bc85a93     .;.:...;e..9.Z.;
24025678:	39f510b2 3bd7ab9d 39edb0e2 3be686ac     ...9...;...9...;
24025688:	39e5e2f2 3bf4e4dc 39ddab00 3c015fc6     ...9...;...9._.<
24025698:	39d50d71 3c080831 39cc0eca 3c0e68a8     q..91..<...9.h.<
240256a8:	39c2b3ba 3c147e45 39b90124 3c1a464e     ...9E~.<$..9NF.<
240256b8:	39aefc0d 3c1fbe2f 39a4a99d 3c24e37a     ...9/..<...9z.$<
240256c8:	399a0f1a 3c29b3f9 398f31f6 3c2e2d85     ...9..)<.1.9.-.<
240256d8:	398417b0 3c324e46 39718bda 3c36146f     ...9FN2<..q9o.6<
240256e8:	395a84c5 3c397e87 394325b1 3c3c8b16     ..Z9.~9<.%C9..<<
240256f8:	392b7a53 3c3f3906 39138e81 3c41873f     Sz+9.9?<...9?.A<
24025708:	38f6dc4f 3c4374f5 38c64a7e 3c450187     O..8.tC<~J.8..E<
24025718:	38957f89 3c462c8a 3849270c 3c46f5b3     ...8.,F<.'I8..F<
24025728:	37ce7a03 3c475cec 35ae1e2b 3c47625f     .z.7.\G<+..5_bG<
24025738:	b7b81ac2 3c47064f b83d0e7c 3c464945     ....O.G<|.=.EIF<
24025748:	b88eb1a3 3c452be4 b8be6e93 3c43af01     .....+E<.n....C<
24025758:	b8eda704 3c41d3b5 b90e2221 3c3f9b2b     ......A<!"..+.?<
24025768:	b9251802 3c3d06d1 b93baa29 3c3a181f     ..%...=<).;...:<
24025778:	b951cde2 3c36d0ed b96778a5 3c333308     ..Q...6<.xg..33<
24025788:	b97ca039 3c2f408a b9889d57 3c2afba1     9.|..@/<W.....*<
24025798:	b9929f36 3c2666a7 b99c5107 3c21841d     6....f&<.Q....!<
240257a8:	b9a5ae52 3c1c56aa b9aeb2c2 3c16e114     R....V.<.......<
240257b8:	b9b75a35 3c112643 b9bfa0be 3c0b293c     5Z..C&.<....<).<
240257c8:	b9c78299 3c04ed28 b9cefc3c 3bfcea8c     ....(..<<......;
240257d8:	b9d60a55 3bef89e6 b9dca9c9 3be1bf4b     U......;....K..;
240257e8:	b9e2d7b0 3bd391d0 b9e89163 3bc508ba     .......;c......;
240257f8:	b9edd46c 3bb62b71 b9f29ea3 3ba70188     l...q+.;.......;
24025808:	b9f6ee0a 3b9792a8 b9fac0eb 3b87e698     .......;.......;
24025818:	b9fe15ce 3b700a76 ba0075ba 3b4fed0a     ....v.p;.u....O;
24025828:	ba01a074 3b2f84ed ba028ab4 3b0ee242     t...../;....B..;
24025838:	ba033440 3adc2a63 ba039cf7 3a9a5be1     @4..c*.:.....[.:
24025848:	ba03c4dc 3a30f2ea ba03ac12 39351b5e     ......0:....^.59
24025858:	ba0352da b9ac1801 ba02b991 ba58c591     .R............X.
24025868:	ba01e0bd baad5324 ba00c8f9 baedb7a0     ....$S..........
24025878:	b9fee607 bb16b894 b9fbbf6c bb36307e     ........l...~06.
24025888:	b9f82015 bb553483 b9f40a2e bb73b5c9     . ...4U.......s.
24025898:	b9ef8018 bb88d2e7 b9ea846c bb977b2d     ........l...-{..
240258a8:	b9e519fb bba5cccc b9df43c6 bbb3c109     .........C......
240258b8:	b9d9050a bbc15159 b9d26129 bbce776b     ....YQ..)a..kw..
240258c8:	b9cb5bba bbdb2d27 b9c3f87e bbe76cb0     .[..'-..~....l..
240258d8:	b9bc3b66 bbf33066 b9b4288a bbfe72ef     f;..f0...(...r..
240258e8:	b9abc421 bc049799 b9a31292 bc09b02d     !...........-...
240258f8:	b99a1860 bc0e80f0 b990da2f bc1307c1     `......./.......
24025908:	b9875cc3 bc1742a7 b97b49f1 bc1b2fcf     .\...B...I{../..
24025918:	b9676f84 bc1ecd8d b953345a bc221a5e     .og.....Z4S.^.".
24025928:	b93ea2b1 bc2514ed b929c4f6 bc27bbfc     ..>...%...)...'.
24025938:	b914a592 bc2a0e92 b8fe9e5b bc2c0bcd     ......*.[.....,.
24025948:	b8d398d3 bc2db301 b8a84fe9 bc2f03a4     ......-..O..../.
24025958:	b879b24d bc2ffd53 b8229404 bc309fe6     M.y.S./..."...0.
24025968:	b796dfd3 bc30eb5a 3638f2e5 bc30dfc7     ....Z.0...86..0.
24025978:	37c47d5e bc307d8c 38387444 bc2fc515     ^}.7.}0.Dt88../.
24025988:	38870301 bc2eb70d 38b16534 bc2d5441     ...8....4e.8AT-.
24025998:	38db4c45 bc2b9da8 390251fe bc299463     EL.8..+..Q.9c.).
240259a8:	3916ac45 bc2739b6 392aab3a bc248f0b     E..9.9'.:.*9..$.
240259b8:	393e455c bc2195f1 3951715a bc1e502c     \E>9..!.ZqQ9,P..
240259c8:	39642629 bc1abf93 39765af3 bc16e628     )&d9.....Zv9(...
240259d8:	398403a2 bc12c60b 398c9169 bc0e617f     ...9....i..9.a..
240259e8:	3994d2d8 bc09bae9 399cc426 bc04d4c7     ...9....&..9....
240259f8:	39a461a9 bbff6374 39aba7eb bbf4a8f6     .a.9tc.....9....
24025a08:	39b293a9 bbe97fba 39b921be bbddeda0     ...9.....!.9....
24025a18:	39bf4f4c bbd1f8aa 39c51992 bbc5a712     LO.9.......9....
24025a28:	39ca7e11 bbb8ff30 39cf7a77 bbac078a     .~.90...wz.9....
24025a38:	39d40cab bb9ec6bd 39d832c3 bb914392     ...9.....2.9.C..
24025a48:	39dbeb13 bb8384e1 39df3427 bb6b233e     ...9....'4.9>#k.
24025a58:	39e20cbd bb4ee1a5 39e473ce bb32532d     ...9..N..s.9-S2.
24025a68:	39e6688f bb158617 39e7ea68 baf11194     .h.9....h..9....
24025a78:	39e8f8fd bab6d355 39e99430 ba78dc9b     ...9U...0..9..x.
24025a88:	39e9bc10 ba03fe93 39e970f1 b87461b2     ...9.....p.9.at.
24025a98:	39e8b358 39ca2722 39e78407 3a58d593     X..9"'.9...9..X:
24025aa8:	39e5e3ec 3aa5e3c4 39e3d43f 3aded8d8     ...9...:?..9...:
24025ab8:	39e1565d 3b0b9738 39de6bdf 3b2764b3     ]V.98..;.k.9.d';
24025ac8:	39db1692 3b42c783 39d75875 3b5db292     ...9..B;uX.9..];
24025ad8:	39d333b5 3b781909 39ceaabc 3b88f731     .3.9..x;...91..;
24025ae8:	39c9c015 3b959332 39c47683 3ba1da99     ...92..;.v.9...;
24025af8:	39bed0ee 3badc7a8 39b8d26f 3bb954cf     ...9...;o..9.T.;
24025b08:	39b27e44 3bc47cb4 39abd7d9 3bcf3a32     D~.9.|.;...92:.;
24025b18:	39a4e2b2 3bd9885d 399da285 3be36286     ...9]..;...9.b.;
24025b28:	39961b24 3becc437 398e5081 3bf5a940     $..97..;.P.9@..;
24025b38:	398646aa 3bfe0dab 397c039e 3c02f6e3     .F.9...;..|9...<
24025b48:	396b0c5c 3c06a315 3959b054 3c0a09d6     \.k9...<T.Y9...<
24025b58:	3947f863 3c0d29b8 3935ed94 3c10016f     c.G9.).<..59o..<
24025b68:	3923990f 3c128fd3 39110416 3c14d3e3     ..#9...<...9...<
24025b78:	38fc701e 3c16ccc4 38d67cd9 3c1879bd     .p.8...<.|.8.y.<
24025b88:	38b0414f 3c19da3f 3889d09a 3c1aede0     OA.8?..<...8...<
24025b98:	38467ba7 3c1bb45d 37f2706d 3c1c2d95     .{F8]..<mp.7.-.<
24025ba8:	372ff41d 3c1c5991 b7043f81 3c1c3882     ../7.Y.<.?...8.<
24025bb8:	b7db916b 3c1bcab9 b83a07f6 3c1b10b1     k......<..:....<
24025bc8:	b882d43e 3c1a0b09 b8a842c8 3c18ba83     >......<.B.....<
24025bd8:	b8cd3d7d 3c172008 b8f1b289 3c153ca3     }=... .<.....<.<
24025be8:	b90ac836 3c131182 b91c6300 3c109ff6     6......<.c.....<
24025bf8:	b92da13c 3c0de971 b93e7ab9 3c0aef87     <.-.q..<.z>....<
24025c08:	b94ee78d 3c07b3e8 b95edff5 3c043868     ..N....<..^.h8.<
24025c18:	b96e5c7b 3c007ef6 b97d55e6 3bf9133e     {\n..~.<.U}.>..;
24025c28:	b985e2a5 3bf0b514 b98cd202 3be7e7f3     .......;.......;
24025c38:	b99375dd 3bdeb096 b999cb33 3bd513e1     .u.....;3......;
24025c48:	b99fcf2d 3bcb16ee b9a57f13 3bc0befe     -......;.......;
24025c58:	b9aad86b 3bb61177 b9afd8d7 3bab13ea     k...w..;.......;
24025c68:	b9b47e2f 3b9fcc07 b9b8c67a 3b943f9f     /~.....;z....?.;
24025c78:	b9bcafed 3b8874a1 b9c038ee 3b78e225     .....t.;.8..%.x;
24025c88:	b9c36010 3b607622 b9c62424 3b47b19f     .`.."v`;$$....G;
24025c98:	b9c8841b 3b2ea11b b9ca7f28 3b155135     .......;(...5Q.;
24025ca8:	b9cc14a4 3af79d41 b9cd4425 3ac44c3a     ....A..:%D..:L.:
24025cb8:	b9ce0d72 3a90c8dd b9ce707c 3a3a5978     r......:|p..xY::
24025cc8:	b9ce6d6d 39a64580 b9ce04a8 b89efc92     mm...E.9........
24025cd8:	b9cd36b3 b9f4f5d6 b9cc044e ba607d12     .6......N....}`.
24025ce8:	b9ca6e6e baa2da24 b9c87630 bad4f7ad     nn..$...0v......
24025cf8:	b9c61ce5 bb033f76 b9c36409 bb1babf6     ....v?...d......
24025d08:	b9c04d4e bb33b5a0 b9bcda8a bb4b50f2     NM....3......PK.
24025d18:	b9b90dc5 bb6272ab b9b4e92f bb790fd0     .....rb./.....y.
24025d28:	b9b06f1c bb878ed9 b9aba214 bb9248fa     .o...........H..
24025d38:	b9a684bb bb9cb146 b9a119e3 bba6c2e5     ....F...........
24025d48:	b99b647f bbb0792d b995679c bbb9cfa7     .d..-y...g......
24025d58:	b98f2672 bbc2c20d b988a456 bbcb4c53     r&......V...SL..
24025d68:	b981e4b6 bbd36a9f b975d643 bbdb1950     .....j..C.u.P...
24025d78:	b9677671 bbe25503 b958b17a bbe91a90     qvg..U..z.X.....
24025d88:	b9498efc bbef6707 b93a16c9 bbf537bf     ..I..g....:..7..
24025d98:	b92a50d1 bbfa8a44 b91a4523 bbff5c6e     .P*.D...#E..n\..
24025da8:	b909fbe8 bc01d626 b8f2fab9 bc03bc1c     ....&...........
24025db8:	b8d1a3cc bc055f63 b8b003b6 bc06bf6a     ....c_......j...
24025dc8:	b88e2b5d bc07dbc2 b8585756 bc08b419     ]+......VWX.....
24025dd8:	b8142b1a bc094844 b79fe7b8 bc099838     .+..DH......8...
24025de8:	b63d3593 bc09a40b 37605373 bc096bf7     .5=.....sS`7.k..
24025df8:	37f746db bc08f053 383eb747 bc08319c     .F.7S...G.>8.1..
24025e08:	388097dc bc07306c 38a1763a bc05ed80     ...8l0..:v.8....
24025e18:	38c1e6d6 bc0469b2 38e1da0b bc02a5fe     ...8.i.....8....
24025e28:	3900a041 bc00a37c 3910059c bbfcc6cc     A..9|......9....
24025e38:	391f15bd bbf7ce1e 392dc987 bbf25fd3     ...9......-9._..
24025e48:	393c19fe bbec7f02 394a007b bbe62efe     ..<9....{.J9....
24025e58:	39577671 bbdf734b 3964759e bbd84f9e     qvW9Ks...ud9.O..
24025e68:	3970f80d bbd0c7dd 397cf7f9 bbc8e01d     ..p9......|9....
24025e78:	398437f7 bbc09c9e 3989ad5c bbb801c9     .7.9....\..9....
24025e88:	398ed9ba bbaf142c 3993bac5 bba5d882     ...9,......9....
24025e98:	39984e58 bb9c539c 399c9276 bb928a73     XN.9.S..v..9s...
24025ea8:	39a0854f bb88821e 39a42535 bb7c7f98     O..9....5%.9..|.
24025eb8:	39a770a9 bb679181 39aa6658 bb5244b5     .p.9..g.Xf.9.DR.
24025ec8:	39ad0520 bb3ca413 39af4bfb bb26ba94      ..9..<..K.9..&.
24025ed8:	39b13a1d bb10934f 39b2cee7 baf472ea     .:.9O......9.r..
24025ee8:	39b409dc bac7706c 39b4eab6 ba9a35c3     ...9lp.....9.5..
24025ef8:	39b5715c ba59b2d5 39b59dd7 b9fdc7cf     \q.9..Y....9....
24025f08:	39b5706c b910aece 39b4e97a 39592427     lp.9....z..9'$Y9
24025f18:	39b4099e 3a104dda 39b2d19a 3a69b6a5     ...9.M.:...9..i:
24025f28:	39b14251 3aa12be8 39af5cdd 3acd0320     QB.9.+.:.\.9 ..:
24025f38:	39ad2281 3af84bbd 39aa94a3 3b117874     .".9.K.:...9tx.;
24025f48:	39a7b4d4 3b266f11 39a484c9 3b3affa8     ...9.o&;...9..:;
24025f58:	39a10662 3b4f2075 399d3ba4 3b62c7e9     b..9u O;.;.9..b;
24025f68:	399926b4 3b75ecc1 3994c9dd 3b8442fd     .&.9..u;...9.B.;
24025f78:	39902787 3b8d4576 398b4241 3b95f99a     .'.9vE.;AB.9...;
24025f88:	39861cb2 3b9e5b66 3980b9a6 3ba666ff     ...9f[.;...9.f.;
24025f98:	397637f9 3bae18c0 396a8d71 3bb56d2a     .7v9...;q.j9*m.;
24025fa8:	395e79d8 3bbc60fa 3952038b 3bc2f116     .y^9.`.;..R9...;
24025fb8:	39453116 3bc91aa0 39380929 3bcedae9     .1E9...;).89...;
24025fc8:	392a9295 3bd42f7e 391cd448 3bd91620     ..*9~/.;H..9 ..;
24025fd8:	390ed557 3bdd8cca 39009ced 3be191b1     W..9...;...9...;
24025fe8:	38e46492 3be52343 38c73983 3be8402a     .d.8C#.;.9.8*@.;
24025ff8:	38a9c766 3beae748 388c1d15 3bed17bb     f..8H..;...8...;
24026008:	385c92ea 3beed0e1 3820b6e6 3bf0124e     ..\8...;.. 8N..;
24026018:	37c987e6 3bf0dbd8 37235f6e 3bf12d86     ...7...;n_#7.-.;
24026028:	b6977dd8 3bf107a8 b79ceaae 3bf06abd     .}.....;.....j.;
24026038:	b8099bb8 3bef5784 b84445ec 3bedcef9     .....W.;.ED....;
24026048:	b87e5754 3bebd24c b89bd9e1 3be962e3     TW~.L..;.....b.;
24026058:	b8b81fb7 3be68265 b8d3ef88 3be332a6     ....e..;.....2.;
24026068:	b8ef3c08 3bdf75b6 b904fc16 3bdb4dd5     .<...u.;.....M.;
24026078:	b9120b95 3bd6bd78 b91ec65d 3bd1c746     ....x..;]...F..;
24026088:	b92b2662 3bcc6e13 b93725e7 3bc6b4e3     b&+..n.;.%7....;
24026098:	b942bf48 3bc09eea b94ded35 3bba2f80     H.B....;5.M../.;
240260a8:	b958aa78 3bb36a2c b962f22f 3bac5299     x.X.,j.;/.b..R.;
240260b8:	b96cbfb5 3ba4ec9c b9760ea2 3b9d3c28     ..l....;..v.(<.;
240260c8:	b97edac8 3b954550 b9839027 3b8d0c4f     ..~.PE.;'...O..;
240260d8:	b9876dcb 3b849573 b98b04aa 3b77ca4d     .m..s..;....M.w;
240260e8:	b98e533e 3b65ffe8 b9915826 3b53d4e1     >S....e;&X....S;
240260f8:	b9941229 3b41529f b9968038 3b2e8297     )....RA;8......;
24026108:	b998a162 3b1b6e6c b99a74e4 3b081fce     b...ln.;.t.....;
24026118:	b99bfa23 3ae94111 b99d30a3 3ac1f4e9     #....A.:.0.....:
24026128:	b99e1818 3a9a6edf b99eb05d 3a658598     .....n.:].....e:
24026138:	b99ef96b 3a1608e1 b99ef372 398d1e53     k......:r...S..9
24026148:	b99e9eb7 b80c032d b99dfbb8 b9af7c20     ....-....... |..
24026158:	b99d0b0e ba264395 b99bcd78 ba742a51     .....C&.x...Q*t.
24026168:	b99a43e0 baa0a620 b9986f4f bac6c1f1     .C.. ...Oo......
24026178:	b99650f9 baec5633 b993ea31 bb08a85f     .P..3V..1..._...
24026188:	b9913c6b bb1acfee b98e493e bb2c9914     k<......>I....,.
24026198:	b98b126c bb3dfb63 b98799c4 bb4eee99     l...c.=.......N.
240261a8:	b983e146 bb5f6ac1 b97fd609 bb6f6825     F....j_.....%ho.
240261b8:	b9777264 bb7edf48 b96e9c3c bb86e487     drw.H.~.<.n.....
240261c8:	b965585d bb8e0f49 b95babce bb94eca8     ]Xe.I.....[.....
240261d8:	b9519bc4 bb9b7985 b9472d9c bba1b2f4     ..Q..y...-G.....
240261e8:	b93c66d8 bba79629 b9314d30 bbad2093     .f<.)...0M1.. ..
240261f8:	b925e66f bbb24fc7 b91a388c bbb7218a     o.%..O...8...!..
24026208:	b90e4997 bbbb93d7 b9021fbd bbbfa4d5     .I..............
24026218:	b8eb827f bbc352e0 b8d268f5 bbc69c83     .....R...h......
24026228:	b8b8ff97 bbc98081 b89f5363 bbcbfdd0     ........cS......
24026238:	b8857152 bbce1394 b856cceb bbcfc12f     Rq........V./...
24026248:	b8227fc1 bbd1062d b7dc2aaf bbd1e258     ..".-....*..X...
24026258:	b7669f4f bbd255a9 b5aa280a bbd2604a     O.f..U...(..J`..
24026268:	373b51e9 bbd202a1 37c55f4e bbd13d43     .Q;7....N_.7C=..
24026278:	381626c9 bbd010f6 384920b9 bbce7eb3     .&.8..... I8.~..
24026288:	387b8498 bbcc87ab 38969cfb bbca2d37     ..{8.......87-..
24026298:	38af1464 bbc770e5 38c71cc2 bbc45472     d..8.p.....8rT..
240262a8:	38deaa97 bbc0d9c7 38f5b290 bbbd02fe     ...8.......8....
240262b8:	390614f3 bbb8d255 391102ef bbb44a3f     ...9U......9?J..
240262c8:	391b9e1a bbaf6d4d 3925e18d bbaa3e42     ...9Mm....%9B>..
240262d8:	392fc877 bba4bffe 39394e51 bb9ef58a     w./9....QN99....
240262e8:	39426eba bb98e215 394b2588 bb9288e8     .nB9.....%K9....
240262f8:	39536ed8 bb8bed72 395b46f4 bb85133a     .nS9r....F[9:...
24026308:	3962aa61 bb7bfbcf 396995eb bb6d626f     a.b9..{...i9obm.
24026318:	39700698 bb5e6207 3975f9ab bb4f026d     ..p9.b^...u9m.O.
24026328:	397b6cad bb3f4b9f 39802eb4 bb2f45cb     .l{9.K?....9.E/.
24026338:	398264f1 bb1ef92e 39845838 bb0e6e24     .d.9....8X.9$n..
24026348:	398607d3 bafb5a54 3987732d bad97d8a     ...9TZ..-s.9.}..
24026358:	398899d3 bab7571a 39897b7c ba94f839     ...9.W..|{.99...
24026368:	398a17fc ba64e471 398a6f44 ba1faccd     ...9q.d.Do.9....
24026378:	398a8174 b9b4d82a 398a4ebe b8aa25a7     t..9*....N.9.%..
24026388:	3989d78c 393e9c40 39891c53 39e86a77     ...9@.>9S..9wj.9
24026398:	39881dba 3a384418 3986dc81 3a7bb259     ...9.D8:...9Y.{:
240263a8:	3985598a 3a9f2f8e 398395d5 3ac01503     .Y.9./.:...9...:
240263b8:	39819287 3ae079a8 397ea1b6 3b0026f1     ...9.y.:..~9.&.;
240263c8:	3979a46a 3b0fc136 39743011 3b1f0438     j.y96..;.0t98..;
240263d8:	396e47e4 3b2de8b5 3967ef3d 3b3c67a9     .Gn9..-;=.g9.g<;
240263e8:	396129bc 3b4a7a44 3959fb32 3b5819f7     .)a9DzJ;2.Y9..X;
240263f8:	39526789 3b65406e 394a72f8 3b71e7a0     .gR9n@e;.rJ9..q;
24026408:	394221d8 3b7e09be 3939789f 3b84d0a4     .!B9..~;.x99...;
24026418:	39307bff 3b8a5484 392730bf 3b8f8e0a     .{09.T.;.0'9...;
24026428:	391d9bcf 3b947ae8 3913c23c 3b9918fa     ...9.z.;<..9...;
24026438:	3909a933 3b9d6642 38feabf0 3ba160f2     3..9Bf.;...8.`.;
24026448:	38e99be0 3ba50763 38d42d1c 3ba85816     ...8c..;.-.8.X.;
24026458:	38be6a9e 3bab51c2 38a85f9b 3badf341     .j.8.Q.;._.8A..;
24026468:	38921750 3bb03b9d 38773a2d 3bb22a12     P..8.;.;-:w8.*.;
24026478:	3849f89f 3bb3be04 381c80cc 3bb4f705     ..I8...;...8...;
24026488:	37ddd31d 3bb5d4d7 37829374 3bb6576a     ...7...;t..7jW.;
24026498:	369dc062 3bb67edc b6cda6bb 3bb64b72     b..6.~.;....rK.;
240264a8:	b78dccef 3bb5bda5 b7e78d1f 3bb4d618     .......;.......;
240264b8:	b8203f1d 3bb39599 b84c3a5c 3bb1fd24     .? ....;\:L.$..;
240264c8:	b877a2eb 3bb00dde b89131e0 3badc917     ..w....;.1.....;
240264d8:	b8a6341d 3bab3047 b8bace15 3ba8450e     .4..G0.;.....E.;
240264e8:	b8cef5f0 3ba50937 b8e2a215 3ba17eaf     ....7..;.....~.;
240264f8:	b8f5c945 3b9da78a b9043134 3b9985ff     E......;41.....;
24026508:	b90d326b 3b951c6e b915e412 3b906d4b     k2..n..;....Km.;
24026518:	b91e422f 3b8b7b3a b92648e6 3b8648f4     /B..:{.;.H&..H.;
24026528:	b92df495 3b80d94f b93541c8 3b765e81     ..-.O..;.A5..^v;
24026538:	b93c2d36 3b6a9baf b942b3d2 3b5e7070     6-<...j;..B.pp^;
24026548:	b948d2c2 3b51e344 b94e8765 3b44facf     ..H.D.Q;e.N...D;
24026558:	b953cf58 3b37bdd8 b958a859 3b2a3352     X.S...7;Y.X.R3*;
24026568:	b95d1081 3b1c624c b9610602 3b0e51ec     ..].Lb.;..a..Q.;
24026578:	b9648763 3b000976 b967935a 3ae3207f     c.d.v..;Z.g.. .:
24026588:	b96a28dc 3ac5db63 b96c4712 3aa85280     .(j.c..:.Gl..R.:
24026598:	b96ded6d 3a8a94d5 b96f1b9b 3a5962bd     m.m....:..o..bY:
240265a8:	b96fd17f 3a1d6e5d b9700f3d 39c2d51b     ..o.]n.:=.p....9
240265b8:	b96fd526 3915d510 b96f23e0 b8b29d97     &.o....9.#o.....
240265c8:	b96dfc38 b9a3a580 b96c5f3b ba0cea91     8.m.....;_l.....
240265d8:	b96a4e3a ba477e1f b967caad ba80b864     :Nj..~G...g.d...
240265e8:	b964d648 ba9d532f b96172fe bab9818e     H.d./S...ra.....
240265f8:	b95da2f6 bad535ec b9596886 baf062ff     ..]..5...hY..b..
24026608:	b954c633 bb057de1 b94fbec1 bb1279cd     3.T..}....O..y..
24026618:	b94a5510 bb1f1f1d b9448c44 bb2b67e3     .UJ.....D.D..g+.
24026628:	b93e679c bb374e5c b937ea8f bb42cd04     .g>.\N7...7...B.
24026638:	b93118ae bb4dde92 b929f5bd bb587dec     ..1...M...)..}X.
24026648:	b922859e bb62a646 b91acc59 bb6c530b     ..".F.b.Y....Sl.
24026658:	b912ce10 bb757fec b90a8f10 bb7e28dd     ......u......(~.
24026668:	b90213b7 bb83250c b8f2c0f5 bb86f010     .....%..........
24026678:	b8e0f3e3 bb8a73e0 b8cec98a bb8daf06     .....s..........
24026688:	b8bc4b4f bb90a034 b8a982cc bb93463f     OK..4.......?F..
24026698:	b89679ae bb95a025 b88339b7 bb97ad0c     .y..%....9......
240266a8:	b85f997a bb996c40 b8387945 bb9add33     z._.@l..Ey8.3...
240266b8:	b811269c bb9bff7f b7d36aaa bb9cd2ea     .&.......j......
240266c8:	b7847283 bb9d575c b6d6310c bb9d8ce8     .r..\W...1......
240266d8:	3649061c bb9d73c8 374edb0f bb9d0c5a     ..I6.s....N7Z...
240266e8:	37b53358 bb9c5728 380125fb bb9b54db     X3.7(W...%.8.T..
240266f8:	382748c9 bb9a0648 384cef7d bb986c6a     .H'8H...}.L8jl..
24026708:	387207cf bb96885a 388b3fe8 bb945b5b     ..r8Z....?.8[[..
24026718:	389d22f8 bb91e6ce 38aea48b bb8f2c3c     .".8.......8<,..
24026728:	38bfbc47 bb8c2d4d 38d06215 bb88ebc4     G..8M-...b.8....
24026738:	38e08e19 bb85698c 38f038cb bb81a8a8     ...8.i...8.8....
24026748:	38ff5ada bb7b5678 3906f6a6 bb72e70e     .Z.8xV{....9..r.
24026758:	390df4b6 bb6a07c2 3914a472 bb60bd7c     ...9..j.r..9|.`.
24026768:	391b02d7 bb570d4f 39210d07 bb4cfc7f     ...9O.W...!9..L.
24026778:	3926c061 bb429078 392c1a64 bb37ced3     a.&9x.B.d.,9..7.
24026788:	393118bc bb2cbd45 3935b957 bb2161b1     ..19E.,.W.59.a!.
24026798:	3939fa47 bb15c20d 393dd9cc bb09e470     G.99......=9p...
240267a8:	39415666 bafb9e13 39446ebd bae31039     fVA9.....nD99...
240267b8:	394721b8 baca2c00 39496e5f bab0fe3a     .!G9.,.._nI9:...
240267c8:	394b53f8 ba9793b9 394cd210 ba7bf2ed     .SK9......L9..{.
240267d8:	394de845 ba4878da 394e9689 ba14d33a     E.M9.xH...N9:...
240267e8:	394edceb b9c237fe 394ebbb7 b935b444     ..N9.7....N9D.5.
240267f8:	394e3375 37c3f9a4 394d44d8 3965c409     u3N9...7.DM9..e9
24026808:	394bf0bd 39d8da63 394a3843 3a1efb42     ..K9c..9C8J9B..:
24026818:	39481cae 3a51026d 39459f77 3a813525     ..H9m.Q:w.E9%5.:
24026828:	3942c243 3a998d6b 393f86f2 3ab17e4e     C.B9k..:..?9N~.:
24026838:	393bef80 3ac8fc3b 3937fe21 3adffbff     ..;9;..:!.79...:
24026848:	3933b524 3af672a7 392f171c 3b062ac5     $.39.r.:../9.*.;
24026858:	392a26a5 3b10cd2d 3924e69e 3b1b1b98     .&*9-..;..$9...;
24026868:	391f59fa 3b25113a 391983c8 3b2ea976     .Y.9:.%;...9v..;
24026878:	39136750 3b37dfeb 390d07e6 3b40b067     Pg.9..7;...9g.@;
24026888:	39066906 3b4916fa 38ff1c85 3b510fdb     .i.9..I;...8..Q;
24026898:	38f0f693 3b58978f 38e267c7 3b5faacf     ...8..X;.g.8.._;
240268a8:	38d377dd 3b66468f 38c42eb3 3b6c6804     .w.8.Ff;...8.hl;
240268b8:	38b49457 3b720ca7 38a4b0ea 3b77322f     W..8..r;...8/2w;
240268c8:	38948cb1 3b7bd694 38843007 3b7ff815     ...8..{;.0.8...;
240268d8:	386746ac 3b81ca97 3845de39 3b835654     .Fg8...;9.E8TV.;
240268e8:	382437c3 3b849ec3 38026464 3b85a38c     .7$8...;dd.8...;
240268f8:	37c0ea74 3b866475 3779ed7c 3b86e16c     t..7ud.;|.y7l..;
24026908:	36e43ee9 3b871a7c b5aa8a46 3b870fd4     .>.6|..;F......;
24026918:	b71c215f 3b86c1c4 b7910702 3b8630bc     _!.....;.....0.;
24026928:	b7d36a94 3b855d51 b80a8d68 3b844837     .j..Q].;h...7H.;
24026938:	b82afbcb 3b82f23f b84af0ad 3b815c5f     ..*.?..;..J._\.;
24026948:	b86a5c95 3b7f0f48 b884982f 3b7aea86     .\j.H..;/.....z;
24026958:	b893aea0 3b764d13 b8a26a6e 3b7139bf     .....Mv;nj...9q;
24026968:	b8b0c49c 3b6bb39c b8beb664 3b65bde8     ......k;d.....e;
24026978:	b8cc3940 3b5f5c1c b8d946e3 3b5891e7     @9...\_;.F....X;
24026988:	b8e5d952 3b51631b b8f1eabe 3b49d3c5     R....cQ;......I;
24026998:	b8fd75ae 3b41e817 b9043a76 3b39a46f     .u....A;v:..o.9;
240269a8:	b90971cb 3b310d54 b90e5e87 3b28276b     .q..T.1;.^..k'(;
240269b8:	b912fe8b 3b1ef785 b9174fd4 3b158284     .......;.O.....;
240269c8:	b91b5094 3b0bcd7e b91eff23 3b01dd8c     .P..~..;#......;
240269d8:	b9225a06 3aef6fd4 b9255fe5 3adac3db     .Z"..o.:._%....:
240269e8:	b9280fa0 3ac5c1e3 b92a6840 3ab074db     ..(....:@h*..t.:
240269f8:	b92c68fd 3a9ae7bc b92e112c 3a852599     .h,....:,....%.:
24026a08:	b92f6065 3a5e7312 b9305663 3a325d7a     e`/..s^:cV0.z]2:
24026a18:	b930f305 3a0620b8 b931366d 39b3a637     ..0.. .:m61.7..9
24026a28:	b93120d8 39362b96 b930b2b4 36af1bf9     . 1..+69..0....6
24026a38:	b92feca0 b92a73be b92ecf55 b9aca189     ../..s*.U.......
24026a48:	b92d5bd1 ba01a7b9 b92b9327 ba2c8c83     .[-.....'.+...,.
24026a58:	b92976a2 ba56ea2b b92707ad ba80560b     .v).+.V...'..V..
24026a68:	b92447dd ba94df06 b92138eb baa90627     .G$......8!.'...
24026a78:	b91ddcb7 babcc1bd b91a354d bad00863     ........M5..c...
24026a88:	b91644d0 bae2d101 b9120d99 baf512b4     .D..............
24026a98:	b90d9209 bb03627a b908d4ae bb0befc5     ....zb..........
24026aa8:	b903d830 bb142d45 b8fd3ec2 bb1c173c     0...E-...>..<...
24026ab8:	b8f25a33 bb23aa0f b8e708b5 bb2ae253     3Z....#.....S.*.
24026ac8:	b8db5075 bb31bcda b8cf37b6 bb383697     uP....1..7...68.
24026ad8:	b8c2c506 bb3e4cbe b8b5ff03 bb43fcb8     .....L>.......C.
24026ae8:	b8a8ec75 bb49441b b89b9442 bb4e20bd     u....DI.B.... N.
24026af8:	b88dfd6a bb5290a8 b8802f04 bb56921d     j.....R../....V.
24026b08:	b864607b bb5a23a2 b84810a3 bb5d43e4     {`d..#Z...H..C].
24026b18:	b82b7d13 bb5ff1d8 b80eb46f bb622ca8     .}+..._.o....,b.
24026b28:	b7e38ac0 bb63f3c1 b7a97d38 bb6546b9     ......c.8}...Fe.
24026b38:	b75ebb20 bb662575 b6d52447 bb669006      .^.u%f.G$....f.
24026b48:	35146659 bb6686bf 36f92967 bb660a2d     Yf.5..f.g).6-.f.
24026b58:	376f1f86 bb651b0d 37b05722 bb63ba5c     ..o7..e."W.7\.c.
24026b68:	37e8848e bb61e954 380ffe3e bb5fa95e     ...7T.a.>..8^._.
24026b78:	382b51f6 bb5cfc16 3846302e bb59e354     .Q+8..\..0F8T.Y.
24026b88:	38608bf3 bb566124 387a589f bb5277c3     ..`8$aV..Xz8.wR.
24026b98:	3889c4f2 bb4e2999 389609e7 bb49794a     ...8.)N....8JyI.
24026ba8:	38a1f567 bb44699e 38ad81dc bb3efd8e     g..8.iD....8..>.
24026bb8:	38b8a9e8 bb393841 38c36864 bb331cfd     ...8A89.dh.8..3.
24026bc8:	38cdb867 bb2caf3a 38d79542 bb25f290     g..8:.,.B..8..%.
24026bd8:	38e0fa7e bb1eeabc 38e9e408 bb179b9b     ~..8.......8....
24026be8:	38f24dcc bb10092f 38fa344c bb08378b     .M.8/...L4.8.7..
24026bf8:	3900ca05 bb002aeb 39043503 baefcf39     ...9.*...5.99...
24026c08:	390759b4 badee3fc 390a36d4 bacd9d24     .Y.9.....6.9$...
24026c18:	390ccb42 babc03c1 390f160f baaa20fb     B..9.......9. ..
24026c28:	3911165e ba97fe30 3912cb91 ba85a4bd     ^..90......9....
24026c38:	39143520 ba663c2f 391552af ba40e785      5.9/<f..R.9..@.
24026c48:	391623fc ba1b5e85 3916a905 b9eb6886     .#.9.^.....9.h..
24026c58:	3916e1d9 b99ff79d 3916ceaf b929208c     ...9.......9. ).
24026c68:	39166ff4 b79584aa 3915c62b 39031593     .o.9....+..9...9
24026c78:	3914d1ff 398bf3c9 39139447 39d5bdec     ...9...9G..9...9
24026c88:	39120df2 3a0f6271 3910401a 3a337278     ...9qb.:.@.9xr3:
24026c98:	390e2c02 3a56fd78 390bd2fb 3a79f237     .,.9x.V:...97.y:
24026ca8:	39093694 3a8e1ff1 39065861 3a9eeaf8     .6.9...:aX.9...:
24026cb8:	39033a22 3aaf523e 38ffbb62 3abf4df8     ":.9>R.:b..8.M.:
24026cc8:	38f88a21 3aced692 38f0e497 3adde4de     !..8...:...8...:
24026cd8:	38e8cf39 3aec71d0 38e04e88 3afa76ba     9..8.q.:.N.8.v.:
24026ce8:	38d7674d 3b03f696 38ce1e7f 3b0a678d     Mg.8...;...8.g.;
24026cf8:	38c4793f 3b108b57 38ba7cce 3b165f3d     ?y.8W..;.|.8=_.;
24026d08:	38b02e9b 3b1be0b1 38a59434 3b210d52     ...8...;4..8R.!;
24026d18:	389ab348 3b25e2ed 388f91a3 3b2a5f7a     H..8..%;...8z_*;
24026d28:	3884352a 3b2e8125 387147b2 3b324641     *5.8%..;.Gq8AF2;
24026d38:	3859c780 3b35ad61 3841f602 3b38b539     ..Y8a.5;..A89.8;
24026d48:	3829df90 3b3b5cb8 38119099 3b3da2f9     ..)8.\;;...8..=;
24026d58:	37f22b36 3b3f8750 37c0f639 3b41093d     6+.7P.?;9..7=.A;
24026d68:	378f9b3f 3b422873 373c66a3 3b42e4d7     ?..7s(B;.f<7..B;
24026d78:	36b35d48 3b433e88 b50bfe40 3b4335c6     H].6.>C;@....5C;
24026d88:	b6d56795 3b42cb12 b74bfc5c 3b41ff18     .g....B;\.K...A;
24026d98:	b79634b7 3b40d2ae b7c5e5c2 3b3f46e3     .4....@;.....F?;
24026da8:	b7f4f9ee 3b3d5ced b811ad23 3b3b1638     .....\=;#...8.;;
24026db8:	b8287826 3b387459 b83ed300 3b35790d     &x(.Yt8;..>..y5;
24026dc8:	b854b2f6 3b322643 b86a0d99 3b2e7e0b     ..T.C&2;..j..~.;
24026dd8:	b87ed8cd 3b2a82a9 b8898561 3b26367e     ..~...*;a...~6&;
24026de8:	b8934d03 3b219c14 b89cbec3 3b1cb61d     .M....!;.......;
24026df8:	b8a5d646 3b17876c b8ae8f67 3b1212f0     F...l..;g......;
24026e08:	b8b6e630 3b0c5bbf b8bed6e7 3b066509     0....[.;.....e.;
24026e18:	b8c65e06 3b003219 b8cd7843 3af38caa     .^...2.;Cx.....:
24026e28:	b8d42288 3ae64a80 b8da5a08 3ad8a4e1     ."...J.:.Z.....:
24026e38:	b8e01c3a 3acaa31e b8e566a5 3abc4cb3     :......:.f...L.:
24026e48:	b8ea373f 3aada93d b8ee8c35 3a9ec07e     ?7..=..:5...~..:
24026e58:	b8f263ea 3a8f9a3c b8f5bcfa 3a803e70     .c..<..:....p>.:
24026e68:	b8f8965f 3a616a14 b8faef3c 3a420c2d     _....ja:<...-.B:
24026e78:	b8fcc70a 3a22734c b8fe1d66 3a02af9f     ....Ls":f......:
24026e88:	b8fef245 39c5a2a9 b8ff45ea 3985d12f     E......9.E../..9
24026e98:	b8ff18b6 390c160a b8fe6b5b 374e058e     .......9[k....N7
24026ea8:	b8fd3ed0 b8e37e25 b8fb9453 b96f893c     .>..%~..S...<.o.
24026eb8:	b8f96d47 b9b61ff0 b8f6cb58 b9f3d2c6     Gm......X.......
24026ec8:	b8f3b082 ba185f73 b8f01ecf ba36634d     ....s_......Mc6.
24026ed8:	b8ec18a9 ba53e662 b8e7a0b2 ba70da78     ....b.S.....x.p.
24026ee8:	b8e2b999 ba8698d8 b8dd667b ba946f41     ........{f..Ao..
24026ef8:	b8d7aa76 baa1e9e4 b8d188f7 baaf0273     v...........s...
24026f08:	b8cb0594 babbb2c9 b8c4240a bac7f510     .........$......
24026f18:	b8bce845 bad3c395 b8b55659 badf18f7     E.......YV......
24026f28:	b8ad7281 bae9f01e b8a5411c baf44435     .r.......A..5D..
24026f38:	b89cc6ac bafe109a b89407ce bb03a88e     ................
24026f48:	b88b0942 bb0800d5 b881cfdf bb0c0f54     B...........T...
24026f58:	b870c125 bb0fd25b b85d80c2 bb13485c     %.p.[.....].\H..
24026f68:	b849e8c8 bb167000 b8360380 bb194810     ..I..p....6..H..
24026f78:	b821db55 bb1bcf7b b80d7ac0 bb1e0568     U.!.{....z..h...
24026f88:	b7f1d8a4 bb1fe918 b7c87547 bb217a01     ........Gu...z!.
24026f98:	b79ee097 bb22b7c4 b76a5f94 bb23a224     ......".._j.$.#.
24026fa8:	b716f02d bb243912 b6873a1d bb247cae     -....9$..:...|$.
24026fb8:	3576fdc9 bb246d3f 36c41a09 bb240b33     ..v5?m$....63.$.
24026fc8:	37341148 bb235721 3782aa00 bb2251cf     H.47!W#....7.Q".
24026fd8:	37aad68f bb20fc20 37d27a9f bb1f572b     ...7 . ..z.7+W..
24026fe8:	37f982d1 bb1d6425 380fee21 bb1b246f     ...7%d..!..8o$..
24026ff8:	3822ba33 bb189983 38351c9d bb15c513     3."8......58....
24027008:	38470c9c bb12a8e0 385881b2 bb0f46da     ..G8......X8.F..
24027018:	386973a5 bb0ba10d 3879da8e bb07b9a2     .si8......y8....
24027028:	3884d76b bb0392e5 388c7499 bafe5e84     k..8.....t.8.^..
24027038:	3893c15a baf52268 389aba66 baeb76c2     Z..8h"..f..8.v..
24027048:	38a15c9d bae160fb 38a7a516 bad6e6ac     .\.8.`.....8....
24027058:	38ad9114 bacc0d9b 38b31e0e bac0dbb9     ...8.......8....
24027068:	38b849ac bab55721 38bd11ce baa985fe     .I.8!W.....8....
24027078:	38c17488 ba9d6ebb 38c57023 ba9117b7     .t.8.n..#p.8....
24027088:	38c9031b ba848786 38cc2c28 ba6f8982     ...8....(,.8..o.
24027098:	38ceea38 ba55ac3a 38d13c6d ba3b84ad     8..8:.U.m<.8..;.
240270a8:	38d32220 ba212069 38d49af4 ba068d0a      ".8i !....8....
240270b8:	38d5a6a3 b9d7b06c 38d6453a b9a21f1d     ...8l...:E.8....
240270c8:	38d676f1 b95902c9 38d63c28 b8dbc95c     .v.8..Y.(<.8\...
240270d8:	38d595ac b6467698 38d48431 38ce5082     ...8.vF.1..8.P.8
240270e8:	38d308f2 3950acb9 38d1250a 399c9f9d     ...8..P9.%.8...9
240270f8:	38ceda10 39d05624 38cc29a8 3a01b046     ...8$V.9.).8F..:
24027108:	38c915ae 3a1ad2fc 38c5a030 3a338702     ...8...:0..8..3:
24027118:	38c1cb69 3a4bc06f 38bd99c2 3a6373a8     i..8o.K:...8.sc:
24027128:	38b90dd2 3a7a9562 38b42a58 3a888d58     ...8b.z:X*.8X..:
24027138:	38aef23d 3a937c7d 38a96890 3a9e1304     =..8}|.:.h.8...:
24027148:	38a39084 3aa84c0f 389d6d76 3ab222e4     ...8.L.:vm.8.".:
24027158:	389702de 3abb9314 38905456 3ac49853     ...8...:VT.8S..:
24027168:	38896597 3acd2eae 38823a76 3ad55257     .e.8...:v:.8WR.:
24027178:	3875adbd 3adcffc2 38667dae 3ae433b5     ..u8...:.}f8.3.:
24027188:	3856ecf2 3aeaeb1b 384703e9 3af1233b     ..V8...:..G8;#.:
24027198:	3836cb0e 3af6d991 38264afc 3afc0be6     ..68...:.J&8...:
240271a8:	38158c6a 3b005c28 3804981d 3b026e85     j..8(\.;...8.n.;
240271b8:	37e6ede8 3b043c61 37c463a4 3b05c52b     ...7a<.;.c.7+..;
240271c8:	37a1a33d 3b070872 377d7d2d 3b0805ef     =..7r..;-}}7...;
240271d8:	37378f11 3b08bd7e 36e33f51 3b092f1c     ..77~..;Q?.6./.;
240271e8:	362f49a1 3b095aee b5cdac62 3b09413a     .I/6.Z.;b...:A.;
240271f8:	b6bdaabc 3b08e263 b7236a98 3b083efa     ....c..;.j#..>.;
24027208:	b7675339 3b0757a7 b79536dc 3b062d38     9Sg..W.;.6..8-.;
24027218:	b7b64c99 3b04c09e b7d6daa9 3b0312eb     .L.....;.......;
24027228:	b7f6d14e 3b012548 b80b1088 3afdf209     N...H%.;.......:
24027238:	b81a5d7b 3af91f21 b8294833 3af3d4e0     {]..!..:3H)....:
24027248:	b837c9a9 3aee168d b845db08 3ae7e7b9     ..7....:..E....:
24027258:	b85375c5 3ae14c0b b8609395 3ada4770     .uS..L.:..`.pG.:
24027268:	b86d2e7b 3ad2ddf8 b87940bd 3acb13f6     {.m....:.@y....:
24027278:	b8826278 3ac2edc8 b887dafc 3aba7018     xb.....:.....p.:
24027288:	b88d0787 3ab19fa0 b891e5dd 3aa88147     .......:....G..:
24027298:	b89673eb 3a9f1a04 b89aafd0 3a956f0a     .s.....:.....o.:
240272a8:	b89e97ce 3a8b858d b8a22a5c 3a8162e7     .......:\*...b.:
240272b8:	b8a56619 3a6e190b b8a849d4 3a590fcf     .f....n:.I....Y:
240272c8:	b8aad48b 3a43b53e b8ad0568 3a2e1491     ....>.C:h......:
240272d8:	b8aedbc7 3a183919 b8b0572f 3a022e32     .....9.:/W..2..:
240272e8:	b8b17759 39d7fe90 b8b23c2c 39ab6f85     Yw.....9,<...o.9
240272f8:	b8b2a5b9 397d8c2d b8b2b449 3924320a     ....-.}9I....2$9
24027308:	b8b26849 3895fbc4 b8b1c259 b75e34a7     Ih.....8Y....4^.
24027318:	b8b0c344 b8cc89d7 b8af6c00 b93dfaec     D........l....=.
24027328:	b8adbdb2 b98a6ce4 b8abb9a7 b9b55b4b     .....l......K[..
24027338:	b8a96156 b9dfb3a2 b8a6b660 ba04b09d     Va......`.......
24027348:	b8a3ba8e ba1927ee b8a06fcd ba2d35e8     .....'...o...5-.
24027358:	b89cd833 ba40d0ef b898f5f8 ba53efae     3.....@.......S.
24027368:	b894cb79 ba66891d b8905b33 ba789483     y.....f.3[....x.
24027378:	b88ba7c4 ba8504c0 b886b3e5 ba8d6ffc     .............o..
24027388:	b8818274 ba958823 b8782cc7 ba9d498e     t...#....,x..I..
24027398:	b86ce587 baa4b0b5 b8613573 baabba61     ..l.....s5a.a...
240273a8:	b8552307 bab2637b b848b4eb bab8a921     .#U.{c....H.!...
240273b8:	b83bf1e3 babe88b4 b82ee0df bac3ffb8     ..;.............
240273c8:	b82188ec bac90c01 b813f129 bacdab89     ..!.....).......
240273d8:	b80620d9 bad1dc92 b7f03e8f bad59d89     . .......>......
240273e8:	b7d3e7ac bad8ed28 b7b74bd9 badbca5a     ....(....K..Z...
240273f8:	b79a79ff bade3442 b77b0209 bae02a44     .y..B4....{.D*..
24027408:	b740dfb8 bae1ac02 b706aace bae2b959     ..@.........Y...
24027418:	b69901e5 bae3525b b593fd27 bae37756     ....[R..'...Vw..
24027428:	361cef66 bae328e2 36c12925 bae267b6     f..6.(..%).6.g..
24027438:	37196de8 bae134db 3751aba0 badf9187     .m.7.4....Q7....
24027448:	378498ff badd7f22 379ff2e3 badaff59     ...7"......7Y...
24027458:	37bad61c bad813fe 37d535ab bad4bf23     ...7.....5.7#...
24027468:	37ef04d5 bad10312 38041ba0 bacce235     ...7.......85...
24027478:	38106078 bac85f32 381c4b2a bac37cdc     x`.82_..*K.8.|..
24027488:	3827d61f babe3e25 3832fbfd bab8a647     ..'8%>....28G...
24027498:	383db7a4 bab2b88b 3848042c baac7866     ..=8....,.H8fx..
240274a8:	3851dcf1 baa5e981 385b3d8f ba9f0f94     ..Q8.....=[8....
240274b8:	386421e4 ba97ee85 386c8615 ba908a5a     .!d8......l8Z...
240274c8:	3874668d ba88e722 387bbffb ba810921     .ft8".....{8!...
240274d8:	388147ad ba71e94d 388468fa ba615c2f     .G.8M.q..h.8/\a.
240274e8:	388742ac ba5073d9 3889d3b0 ba3f3963     .B.8.sP....8c9?.
240274f8:	388c1b1e ba2db5ff 388e1830 ba1bf2fa     ...8..-.0..8....
24027508:	388fca49 ba09f9af 389130f4 b9efa723     I..8.....0.8#...
24027518:	38924be1 b9cb142a 38931ae8 b9a64d6f     .K.8*......8oM..
24027528:	38939e07 b98165ee 3893d564 b938e12c     ...8.e..d..8,.8.
24027538:	3893c14b b8de010c 3893622f b8153db8     K..8..../b.8.=..
24027548:	3892b8a6 38103394 3891c56d 38d9df32     ...8.3.8m..82..8
24027558:	38908965 3935344e 388f0595 397cb718     e..8N459...8..|9
24027568:	388d3b24 39a1aa55 388b2b5c 39c4752b     $;.8U..9\+.8+u.9
24027578:	3888d7aa 39e6ab17 3886419d 3a041dbf     ...8...9.A.8...:
24027588:	38836adf 3a148b1b 3880553c 3a2495c3     .j.8...:<U.8..$:
24027598:	387a053f 3a343617 3872ea1a 3a4364b8     ?.z8.64:..r8.dC:
240275a8:	386b5d4a 3a521a8c 38636348 3a6050c1     J]k8..R:Hcc8.P`:
240275b8:	385b00b8 3a6e00cd 38523a77 3a7b2474     ..[8..n:w:R8t${:
240275c8:	38491581 3a83dae3 383f9706 3a89d79e     ..I8...:..?8...:
240275d8:	3835c457 3a8f85c4 382ba2e9 3a94e2d9     W.58...:..+8...:
240275e8:	38213859 3a99ec9d 38168a55 3a9ea0ea     Y8!8...:U..8...:
240275f8:	380b9eb2 3aa2fde0 38007b52 3aa701c0     ...8...:R{.8...:
24027608:	37ea4c66 3aaaaaed 37d34ac1 3aadf818     fL.7...:.J.7...:
24027618:	37bbfde7 3ab0e815 37a47227 3ab379d9     ...7...:'r.7.y.:
24027628:	378cb3da 3ab5aca8 37699ebb 3ab77fe7     ...7...:..i7...:
24027638:	3739a239 3ab8f32f 37098add 3aba0643     9.97/..:...7C..:
24027648:	36b2e2c1 3abab924 3625b930 3abb0c05     ...6$..:0.%6...:
24027658:	b4ccc03c 3abaff34 b657cd95 3aba934b     <...4..:..W.K..:
24027668:	b6ca43ff 3ab9c906 b713da43 3ab8a158     .C.....:C...X..:
24027678:	b7420505 3ab71d49 b76f8b6a 3ab53e32     ..B.I..:j.o.2>.:
24027688:	b78e2b9e 3ab30584 b7a42944 3ab074e4     .+.....:D)...t.:
24027698:	b7b9b40c 3aad8e10 b7cec191 3aaa530b     .......:.....S.:
240276a8:	b7e347c6 3aa6c5ec b7f73cf0 3aa2e8f9     .G.....:.<.....:
240276b8:	b8054bd6 3a9ebe9d b80ea779 3a9a495c     .K.....:y...\I.:
240276c8:	b817ad0d 3a958bf6 b820586e 3a908936     .......:nX .6..:
240276d8:	b828a5b0 3a8b4405 b830911b 3a85bf7b     ..(..D.:..0.{..:
240276e8:	b838172f 3a7ffd84 b83f349d 3a740a3b     /.8....:.4?.;.t:
240276f8:	b845e65f 3a67abd6 b84c299b 3a5ae93b     _.E...g:.)L.;.Z:
24027708:	b851fbbf 3a4dc980 b8575a70 3a4053d7     ..Q...M:pZW..S@:
24027718:	b85c4393 3a328f9e b860b54a 3a24844a     .C\...2:J.`.J.$:
24027728:	b864adfc 3a16396b b8682c4b 3a07b6a6     ..d.k9.:K,h....:
24027738:	b86b2f1c 39f20766 b86db596 39d450b4     ./k.f..9..m..P.9
24027748:	b86fbf1d 39b658d2 b8714b56 39982f68     ..o..X.9VKq.h/.9
24027758:	b8725a2d 3973c844 b872ebc4 39370d50     -Zr.D.s9..r.P.79
24027768:	b8730088 38f49a5e b872991c 38769ba1     ..s.^..8..r...v8
24027778:	b871b666 359ca77c b870598a b86b7450     f.q.|..5.Yp.Ptk.
24027788:	b86e83e8 b8ecfc22 b86c371c b9318bd7     ..n."....7l...1.
24027798:	b86974fc b96be911 b8663f9b b992bc7f     .ti...k..?f.....
240277a8:	b862993c b9af0fa6 b85e8463 b9cae032     <.b.....c.^.2...
240277b8:	b85a03c2 b9e620a8 b8551a3f ba0061f8     ..Z.. ..?.U..a..
240277c8:	b84fcaf4 ba0d5ea8 b84a192a ba1a003b     ..O..^..*.J.;...
240277d8:	b844085a ba2640c0 b83d9c1f ba321a82     Z.D..@&...=...2.
240277e8:	b836d84b ba3d8808 b82fc0cf ba488415     K.6...=.../...H.
240277f8:	b82859c6 ba5309b0 b820a767 ba5d1427     .Y(...S.g. .'.].
24027808:	b818ae12 ba669f08 b8107240 ba6fa62c     ......f.@r..,.o.
24027818:	b807f888 ba7825b5 b7fe8b2e ba800d07     .....%x.........
24027828:	b7ecbc65 ba83bffa b7da8e6e ba872a34     e.......n...4*..
24027838:	b7c80b21 ba8a4a60 b7b53c6d ba8d1f52     !...`J..m<..R...
24027848:	b7a22c61 ba8fa7fe b78ee51e ba91e398     a,..............
24027858:	b776e19a ba93d159 b74fb35a ba9570c0     ..v.Y...Z.O..p..
24027868:	b72853ec ba96c167 b700d7bd ba97c31a     .S(.g...........
24027878:	b6b2a657 ba9875be b6476a08 ba98d96f     W....u...jG.o...
24027888:	b5281e8c ba98ee79 35e5154e ba98b532     ..(.y...N..52...
24027898:	3686fee8 ba982e35 36d401ec ba975a2d     ...65......6-Z..
240278a8:	371013f9 ba963a0b 3735a59c ba94cec0     ...7.:....57....
240278b8:	375aa35f ba931978 377efb16 ba911b82     _.Z7x.....~7....
240278c8:	37914d93 ba8ed647 37a2b92b ba8c4b64     .M.7G...+..7dK..
240278d8:	37b3b7ed ba897c85 37c441cc ba866b7b     ...7.|...A.7{k..
240278e8:	37d44ef1 ba831a40 37e3d7de ba7f15c7     .N.7@......7....
240278f8:	37f2d55b ba777f1c 3800a03d ba6f7518     [..7..w.=..8.uo.
24027908:	3807895b ba66fc83 380e22ec ba5e1a54     [..8..f..".8T.^.
24027918:	381469fd ba54d3b5 381a5bd3 ba4b2df7     .i.8..T..[.8.-K.
24027928:	381ff5da ba412e9a 382535b4 ba36db3f     ...8..A..5%8?.6.
24027938:	382a1934 ba2c39aa 382e9e60 ba214fc5     4.*8.9,.`..8.O!.
24027948:	3832c36d ba16238e 383686c6 ba0abb22     m.28.#....68"...
24027958:	3839e713 b9fe3962 383ce320 b9e69cfc     ..98b9.. .<8....
24027968:	383f79fd b9ceadbe 3841aae9 b9b6785f     .y?8......A8_x..
24027978:	38437559 b99e09b5 3844d8f5 b9856e96     YuC8......D8.n..
24027988:	3845d5a2 b95967c5 38466b71 b927ccec     ..E8.gY.qkF8..'.
24027998:	38469aad b8ec4c78 384663d4 b8891a93     ..F8xL...cF8....
240279a8:	3845c799 b798db1a 3844c6de 37f0b2a1     ..E8......D8...7
240279b8:	384362bd 389dde07 38419c7e 38feac43     .bC8...8~.A8C..8
240279c8:	383f7599 392f338a 383cefb6 395e6f74     .u?8.3/9..<8to^9
240279d8:	383a0cad 39867951 3836ce86 399d5321     ..:8Qy.9..68!S.9
240279e8:	3833376c 39b3ba0d 382f49bb 39c9a347     l738...9.I/8G..9
240279f8:	382b07f8 39df0447 382674cc 39f3d2de     ..+8G..9.t&8...9
24027a08:	3821930c 3a0402a1 381c65aa 3a0dc8fa     ..!8...:.e.8...:
24027a18:	3816efc2 3a1737f7 38113489 3a204b3f     ...8.7.:.4.8?K :
24027a28:	380b3759 3a28feb5 3804fba6 3a314e70     Y7.8..(:...8pN1:
24027a38:	37fd0a02 3a3936bf 37efae24 3a40b430     ...7.69:$..70.@:
24027a48:	37e1eb31 3a47c38a 37d3c8db 3a4e61d1     1..7..G:...7.aN:
24027a58:	37c54ee6 3a548c48 37b68550 3a5a4072     .N.7H.T:P..7r@Z:
24027a68:	37a7741d 3a5f7c14 3798237e 3a643d2f     .t.7.|_:~#.7/=d:
24027a78:	37889baf 3a68820d 3771c9f4 3a6c4935     ...7..h:..q75Il:
24027a88:	37520f65 3a6f9173 3732188a 3a7259d4     e.R7s.o:..27.Yr:
24027a98:	3711f623 3a74a1ad 36e371dc 3a766891     #..7..t:.q.6.hv:
24027aa8:	36a2e355 3a77ae57 3644c3fa 3a78731b     U..6W.w:..D6.sx:
24027ab8:	35883baf 3a78b73a b56fa87f 3a787b50     .;.5:.x:..o.P{x:
24027ac8:	b63b1304 3a77c03b b69c8e5e 3a76871f     ..;.;.w:^.....v:
24027ad8:	b6dae40f 3a74d156 b70c35c8 3a72a080     ....V.t:.5....r:
24027ae8:	b72a8337 3a6ff673 b7484b6d 3a6cd545     7.*.s.o:mKH.E.l:
24027af8:	b7657fe3 3a693f46 b7810932 3a6536fc     ..e.F?i:2....6e:
24027b08:	b78efa9d 3a60bf27 b79c8d8b 3a5bdaba     ....'.`:......[:
24027b18:	b7a9bb8a 3a568cde b7b67e66 3a50d8ec     ......V:f~....P:
24027b28:	b7c2d032 3a4ac269 b7ceab41 3a444d10     2...i.J:A....MD:
24027b38:	b7da0a26 3a3d7cbe b7e4e7c8 3a365581     &....|=:.....U6:
24027b48:	b7ef3f49 3a2edb86 b7f90c26 3a271325     I?.....:&...%.':
24027b58:	b8012512 3a1f00d4 b8057aa7 3a16a929     .%.....:.z..)..:
24027b68:	b8098508 3a0e10da b80d4293 3a053caf     .......:.B...<.:
24027b78:	b810b1cc 39f86327 b813d161 39e5e8f8     ....'c.9a......9
24027b88:	b816a035 39d314f5 b8191d4a 39bff149     5......9J...I..9
24027b98:	b81b47d5 39ac8851 b81d1f32 3998e46a     .G..Q..92...j..9
24027ba8:	b81ea2ef 3985100b b81fd2c0 39622b68     .......9....h+b9
24027bb8:	b820ae86 3939ffc7 b8213652 3911b232     .. ...99R6!.2..9
24027bc8:	b8216a58 38d2af2e b8214afd 388209b6     Xj!....8.J!....8
24027bd8:	b820d8d1 37c67531 b820148a b77367c6     .. .1u.7.. ..gs.
24027be8:	b81eff0a b85bd8fc b81d9958 b8bcb92a     ......[.X...*...
24027bf8:	b81be4a7 b90555be b819e252 b92bce51     .....U..R...Q.+.
24027c08:	b81793d4 b951b348 b814fad1 b976f1f9     ....H.Q.......v.
24027c18:	b8121912 b98dbc20 b80ef07d b99f9a2f     .... ...}.../...
24027c28:	b80b8325 b9b10a93 b807d32f b9c204fa     %......./.......
24027c38:	b803e2ee b9d28158 b7ff698d b9e277f0     ....X....i...w..
24027c48:	b7f6967c b9f1e159 b7ed51ec ba005b3b     |...Y....Q..;[..
24027c58:	b7e3a152 ba077847 b7d98a4f ba0e4499     R...Gx..O....D..
24027c68:	b7cf12ad ba14bd2e b7c44072 ba1adf31     ........r@..1...
24027c78:	b7b919b5 ba20a7ff b7ada4b2 ba261525     ...... .....%.&.
24027c88:	b7a1e7d5 ba2b2464 b795e98d ba2fd3b0     ....d$+......./.
24027c98:	b789b074 ba342133 b77a8657 ba380b4d     t...3!4.W.z.M.8.
24027ca8:	b76150f0 ba3b9091 b747ce24 ba3eafc9     .Pa...;.$.G...>.
24027cb8:	b72e0ba6 ba4167f8 b714171d ba43b855     .....gA.....U.C.
24027cc8:	b6f3fc6a ba45a04c b6bf9d3e ba471f88     j...L.E.>.....G.
24027cd8:	b68b2c06 ba4835df b62d87d8 ba48e367     .,...5H...-.g.H.
24027ce8:	b589ffb9 ba492867 350c298f ba49055e     ....g(I..).5^.I.
24027cf8:	360a61f0 ba487afb 3670d283 ba478a29     .a.6.zH...p6).G.
24027d08:	36ab144e ba463400 36dd18ce ba4479ce     N..6.4F....6.yD.
24027d18:	37072ef7 ba425d12 371f65b2 ba3fdf7b     ...7.]B..e.7{.?.
24027d28:	373724b9 ba3d02e8 374e6086 ba39c967     .$77..=..`N7g.9.
24027d38:	37650de6 ba36352f 377b21f3 ba3248a7     ..e7/56..!{7.H2.
24027d48:	37884918 ba2e065e 3792aa4e ba29710d     .I.7^...N..7.q).
24027d58:	379cafb5 ba248b8e 37a654bc ba1f58e8     ...7..$..T.7.X..
24027d68:	37af94f0 ba19dc41 37b86c2c ba1418df     ...7A...,l.7....
24027d78:	37c0d67c ba0e122c 37c8d034 ba07cbab     |..7,...4..7....
24027d88:	37d055da ba0148fc 37d76446 b9f51bb3     .U.7.H..Fd.7....
24027d98:	37ddf886 b9e73c2a 37e40ff6 b9d8fb29     ...7*<.....7)...
24027da8:	37e9a829 b9ca60a9 37eebeff b9bb74b7     )..7.`.....7.t..
24027db8:	37f352a4 b9ac3f8f 37f76187 b99cc976     .R.7.?...a.7v...
24027dc8:	37faea54 b98d1acf 37fdec08 b97a7821     T..7.......7!xz.
24027dd8:	380032f6 b95a6b60 38012bc5 b93a2073     .2.8`kZ..+.8s :.
24027de8:	3801e054 b919a858 380250b8 b8f22860     T..8X....P.8`(..
24027df8:	38027d1b b8b0e9cd 380265ce b85f6dcc     .}.8.....e.8.m_.
24027e08:	38020b4a b7bac4fe 38016e26 37102e93     J..8....&n.8...7
24027e18:	38008f17 38249abb 37feddf2 389204db     ...8..$8...7...8
24027e28:	37fc1d8c 38d10c3e 37f8df34 3907a205     ...7>..84..7...9
24027e38:	37f5254f 392646b2 37f0f295 394464ff     O%.7.F&9...7.dD9
24027e48:	37ec49e9 3961ee42 37e72e70 397ed40b     .I.7B.a9p..7..~9
24027e58:	37e1a37d 398d843d 37dbac9b 399b3f09     }..7=..9...7.?.9
24027e68:	37d54d8c 39a893df 37ce8a3a 39b57c83     .M.7...9:..7.|.9
24027e78:	37c766c8 39c1f2f0 37bfe778 39cdf168     .f.7...9x..7h..9
24027e88:	37b810bb 39d97274 37afe725 39e470e8     ...7tr.9%..7.p.9
24027e98:	37a76f79 39eee7dd 379eae93 39f8d2c8     yo.7...9...7...9
24027ea8:	3795a962 3a0116ae 378c650a 3a0579d7     b..7...:.e.7.y.:
24027eb8:	3782e6b0 3a09910c 3772673c 3a0d5aaa     ...7...:<gr7.Z.:
24027ec8:	375ea258 3a10d533 374a897d 3a13ff58     X.^73..:}.J7X..:
24027ed8:	3736279f 3a16d7f7 372187ba 3a195e16     .'67...:..!7.^.:
24027ee8:	370cb4e1 3a1b90e9 36ef7455 3a1d6fd2     ...7...:Ut.6.o.:
24027ef8:	36c54569 3a1efa5d 369af32f 3a203043     iE.6]..:/..6C0 :
24027f08:	36612798 3a21116b 360c7a8d 3a219de5     .'a6k.!:.z.6..!:
24027f18:	35602c11 3a21d5f0 b4dfdd41 3a21b9f4     .,`5..!:A.....!:
24027f28:	b5dedd25 3a214a87 b6422367 3a208863     %....J!:g#B.c. :
24027f38:	b689f83b 3a1f7473 b6b25663 3a1e0fc6     ;...st.:cV.....:
24027f48:	b6da1818 3a1c5b96 b70094da 3a1a5942     .....[.:....BY.:
24027f58:	b713bc08 3a180a53 b7267840 3a157071     ....S..:@x&.qp.:
24027f68:	b738c07b 3a128d6f b74a8be5 3a0f633f     {.8.o..:..J.?c.:
24027f78:	b75bd21f 3a0bf3f7 b76c8b00 3a0841cb     ..[....:..l..A.:
24027f88:	b77caeb8 3a044f11 b7861ae6 3a001e39     ..|..O.:....9..:
24027f98:	b78d8c99 39f763a8 b794a91b 39ee1917     .....c.9.......9
24027fa8:	b79b6d44 39e46243 b7a1d612 39da44e1     Dm..Cb.9.....D.9
24027fb8:	b7a7e0d1 39cfc6d2 b7ad8aed 39c4ee23     .......9....#..9
24027fc8:	b7b2d20f 39b9c105 b7b7b417 39ae45c2     .......9.....E.9
24027fd8:	b7bc2f20 39a282d0 b7c04173 39967ebb      /.....9sA...~.9
24027fe8:	b7c3e99f 398a4021 b7c7266c 397b9b70     ....!@.9l&..p.{9
24027ff8:	b7c9f6cb 39625c96 b7cc59f8 3948d156     .....\b9.Y..V.H9
24028008:	b7ce4f62 392f076f b7cfd6b8 39150c99     bO..o./9.......9
24028018:	b7d0efd9 38f5dd30 b7d19ae5 38c1767e     ....0..8....~v.8
24028028:	b7d1d82f 388d0072 b7d1a846 38312cc1     /...r..8F....,18
24028038:	b7d10bf5 37914d8d b7d0043a b6fadab6     .....M.7:.......
24028048:	b7ce9242 b806a47a b7ccb783 b86d0039     B...z.......9.m.
24028058:	b7ca758a b8a91d80 b7c7ce3a b8db110d     .u......:.......
24028068:	b7c4c387 b90620fa b7c157a7 b91e4bee     ..... ...W...K..
24028078:	b7bd8d03 b935fd8d b7b96623 b94d2a53     ......5.#f..S*M.
24028088:	b7b4e5c7 b963c707 b7b00ecf b979c8e5     ......c.......y.
24028098:	b7aae452 b98792b8 b7a5697a b991e94e     R.......zi..N...
240280a8:	b79fa1ab b99be36a b799905a b9a57c6e     ....j...Z...n|..
240280b8:	b7933927 b9aeb001 b78c9fcb b9b779fe     '9...........y..
240280c8:	b785c81d b9bfd67f b77d6c2b b9c7c1e1     ........+l}.....
240280d8:	b76edb68 b9cf38bd b75fe645 b9d637ed     h.n..8..E._..7..
240280e8:	b7509523 b9dcbc97 b740f08e b9e2c41b     #.P.......@.....
240280f8:	b7310127 b9e84c25 b720cfaf b9ed52a2     '.1.%L.... ..R..
24028108:	b71064fe b9f1d5cb b6ff93f1 b9f5d41a     .d..............
24028118:	b6de0f1d b9f94c57 b6bc4d6a b9fc3d8b     ....WL..jM...=..
24028128:	b69a60c9 b9fea711 b670b640 ba00443d     .`......@.p.=D..
24028138:	b62c9c95 ba00f0db b5d13020 ba015972     ..,..... 0..rY..
24028148:	b5132fa9 ba017e3e 34f52788 ba015f9a     ./..>~...'.4._..
24028158:	35c33007 ba00fe01 3623eb46 ba005a17     .0.5....F.#6.Z..
24028168:	36657d3a b9fee932 36931681 b9fc9cd7     :}e62......6....
24028178:	36b2ed2f b9f9d123 36d232ea b9f68858     /..6#....2.6X...
24028188:	36f0d858 b9f2c4f8 37076745 b9ee89bd     X..6....Eg.7....
24028198:	37160383 b9e9d9a1 372439e4 b9e4b7d0     ...7.....9$7....
240281a8:	373203aa b9df27b2 373f5a56 b9d92ce0     ..27.'..VZ?7.,..
240281b8:	374c37b7 b9d2cb23 375895d6 b9cc0674     .7L7#.....X7t...
240281c8:	37646f1d b9c4e2fc 376fbe2e b9bd650a     .od7......o7.e..
240281d8:	377a7e0d b9b5911a 37825501 b9ad6bca     .~z7.....U.7.k..
240281e8:	37871ee5 b9a4f9dd 378b9a9e b99c4033     ...7.......73@..
240281f8:	378fc663 b99343cd 3793a089 b98a09c2     c..7.C.....7....
24028208:	3797278d b9809749 379a5a26 b96de34f     .'.7I...&Z.7O.m.
24028218:	379d3732 b95a3c6d 379fbdbd b94644b0     27.7m<Z....7.DF.
24028228:	37a1ed01 b9320714 37a3c471 b91d8e85     ...7..2.q..7....
24028238:	37a5439e b908e613 37a66a57 b8e8318b     .C.7....Wj.7.1..
24028248:	37a7388a b8be636a 37a7ae6a b89477ce     .8.7jc..j..7.w..
24028258:	37a7cc3f b855097c 37a79290 b8014034     ?..7|.U....74@..
24028268:	37a70204 b736fcc7 37a61b7c 37153a30     ...7..6.|..70:.7
24028278:	37a4dff4 37ef7d0c 37a350a1 384966d7     ...7.}.7.P.7.fI8
24028288:	37a16edd 388d0f22 379f3c28 38b4de2b     .n.7"..8(<.7+..8
24028298:	379cba2b 38dc0cbd 3799eab8 390143b4     +..7...8...7.C.9
240282a8:	3796cfc8 39141daa 37936b6d 39268b18     ...7...9mk.7..&9
240282b8:	378fbff2 39388315 378bcfa9 3949fd0b     ...7..89...7..I9
240282c8:	37879d14 395af0ae 37832ad4 396b560b     ...7..Z9.*.7.Vk9
240282d8:	377cf742 397b257c 377324a4 39852be5     B.|7|%{9.$s7.+.9
240282e8:	3768e3a5 398c72ff 375e3a52 399364d5     ..h7.r.9R:^7.d.9
240282f8:	37532ef2 3999fe4c 3747c7ea 39a03c89     ..S7L..9..G7.<.9
24028308:	373c0bb6 39a61ce7 3730010b 39ab9cf0     ..<7...9..07...9
24028318:	3723aeae 39b0ba65 37171b89 39b57341     ..#7e..9...7As.9
24028328:	370a4e91 39b9c5b7 36fa9dae 39bdb02d     .N.7...9...6-..9
24028338:	36e046eb 39c13149 36c5a728 39c447e5     .F.6I1.9(..6.G.9
24028348:	36aaccc0 39c6f317 368fc61e 39c93230     ...6...9...602.9
24028358:	36694340 39cb04b7 3632db4a 39cc6a6f     @Ci6...9J.26oj.9
24028368:	35f8e1ea 39cd6350 358c414f 39cdef92     ...5Pc.9OA.5...9
24028378:	348034a4 39ce0f9f b5170581 39cdc41c     .4.4...9.......9
24028388:	b5b63755 39cd0de5 b60fed26 39cbee0a     U7.....9&......9
24028398:	b6441b1e 39ca65d4 b6778b67 39c876bd     ..D..e.9g.w..v.9
240283a8:	b695122d 39c62273 b6ade67a 39c36ada     -...s".9z....j.9
240283b8:	b6c6366b 39c05201 b6ddf629 39bcda27     k6...R.9)...'..9
240283c8:	b6f51a3c 39b905bf b705cbc7 39b4d75f     <......9...._..9
240283d8:	b710b1bc 39b051d3 b71b39df 39ab7804     .....Q.9.9...x.9
240283e8:	b7255f4a 39a64d0b b72f1d53 39a0d41f     J_%..M.9S./....9
240283f8:	b7386f9b 399b10a3 b74151e1 39950613     .o8....9.QA....9
24028408:	b749c050 398eb811 b751b738 39882a58     P.I....98.Q.X*.9
24028418:	b759333f 398160bc b7603138 3974be64     ?3Y..`.981`.d.t9
24028428:	b766ae57 39665383 b76ca814 395788fd     W.f..Sf9..l...W9
24028438:	b7721c28 39486740 b777089a 3938f6b3     (.r.@gH9..w...89
24028448:	b77b6bb1 39293ffb b77f440e 39194bb5     .k{..?)9.D...K.9
24028458:	b781484f 390922b0 b782a843 38f19b4a     OH...".9C...J..8
24028468:	b783c1a0 38d0aae2 b7849450 38af85ce     .......8P......8
24028478:	b785205a 388e3db7 b78565e3 3859c87d     Z ...=.8.e..}.Y8
24028488:	b7856543 381715db b7851ef4 37a90cc2     Ce.....8.......7
24028498:	b784938a 3691e4e6 b783c3c0 b73e9511     .......6......>.
240284a8:	b782b07c b7e1fb05 b7815ac2 b831aae3     |........Z....1.
240284b8:	b77f8751 b8718cb7 b77bd8f5 b898417a     Q.....q...{.zA..
240284c8:	b777ad2f b8b73720 b773070d b8d597fb     /.w. 7....s.....
240284d8:	b76de9bb b8f3553d b76858bf b9083028     ..m.=U...Xh.(0..
240284e8:	b76257bf b91655a5 b75bea8f b924144c     .Wb..U....[.L.$.
240284f8:	b7551559 b93165a4 b74ddc5e b93e4366     Y.U..e1.^.M.fC>.
24028508:	b74643fe b94aa7a9 b73e50dd b9568cb6     .CF...J..P>...V.
24028518:	b73607c0 b961ed2f b72d6d8d b96cc40e     ..6./.a..m-...l.
24028528:	b724874f b9770c7e b71b5a31 b9806110     O.$.~.w.1Z...a..
24028538:	b711eb76 b984f06c b7084080 b9893272     v...l....@..r2..
24028548:	b6fcbd89 b98d2566 b6e8979b b990c7c5     ....f%..........
24028558:	b6d41a6b b9941830 b6bf514a b9971575     k...0...JQ..u...
24028568:	b6aa479b b999be92 b69508d5 b99c12b6     .G..............
24028578:	b67f40da b99e1139 b65433d0 b99fb99e     .@..9....3T.....
24028588:	b6290179 b9a10ba2 b5fb817a b9a20725     y.).....z...%...
24028598:	b5a510bd b9a2ac34 b51dbbd5 b9a2fb12     ....4...........
240285a8:	335d4690 b9a2f429 353836bf b9a2980f     .F]3)....685....
240285b8:	35b089f3 b9a1e782 36020577 b9a0e37a     ...5....w..6z...
240285c8:	362b3a0f b99f8d05 3653ce1b b99de566     .:+6......S6f...
240285d8:	367bad5f b99bee0f 36916213 b999a885     _.{6.....b.6....
240285e8:	36a47fa8 b9971688 36b7261d b99439ee     ...6.....&.6.9..
240285f8:	36c94c7a b99114bb 36daea13 b98da914     zL.6.......6....
24028608:	36ebf693 b989f938 36fc6a02 b9860791     ...68....j.6....
24028618:	37061e63 b981d69e 370db3cf b97ad201     c..7.......7..z.
24028628:	3714f1df b97182e3 371bd557 b967c58d     ...7..q.W..7..g.
24028638:	37225b37 b95d9fd9 372880b8 b95317d1     7["7..]...(7..S.
24028648:	372e4339 b948339a 3733a069 b93cf992     9C.7.3H.i.37..<.
24028658:	37389617 b9317031 373d2274 b9259e0a     ..871p1.t"=7..%.
24028668:	374143b4 b91989d3 3744f876 b90d3a48     .CA7....v.D7H:..
24028678:	37483f87 b900b651 374b17d3 b8e809a7     .?H7Q.....K7....
24028688:	374d80b6 b8ce5990 374f7996 b8b46a5e     ..M7.Y...yO7^j..
24028698:	37510230 b89a4a18 37521a85 b88006c8     0.Q7.J....R7....
240286a8:	3752c2ab b84b5ce6 3752fb1b b8169e1d     ..R7.\K...R7....
240286b8:	3752c479 b7c3d9fd 37521fa1 b7359458     y.R7......R7X.5.
240286c8:	37510d9d 35dbca10 374f8fbf 376b0903     ..Q7...5..O7..k7
240286d8:	374da78a 37dc5846 374b56b4 382101d0     ..M7FX.7.VK7..!8
240286e8:	37489f38 3853299e 3745831b 38824532     8.H7.)S8..E72E.8
240286f8:	374204c3 389a85cb 373e26a5 38b24a9f     ..B7...8.&>7.J.8
24028708:	3739eb69 38c9880d 373555fb 38e032c7     i.97...8.U57.2.8
24028718:	37306953 38f63ff9 372b28a8 3905d283     Si07.?.8.(+7...9
24028728:	37259743 39102bf8 371fb8a6 391a2787     C.%7.+.9...7.'.9
24028738:	37199068 3923c08c 3713224a 392cf2b2     h..7..#9J".7..,9
24028748:	370c7223 3935b9d3 370583ec 393e120f     #r.7..59...7..>9
24028758:	36fcb76b 3945f7c8 36edfb4e 394d67a9     k..6..E9N..6.gM9
24028768:	36dedbfe 39545e87 36cf621e 395ad998     ...6.^T9.b.6..Z9
24028778:	36bf966a 3960d648 36af81c4 3966525c     j..6H.`9...6\Rf9
24028788:	369f2d21 396b4bc3 368ea185 396fc0cd     !-.6.Kk9...6..o9
24028798:	367bd00f 3973b00d 365a1388 3977185c     ..{6..s9..Z6\.w9
240287a8:	36381fb8 3979f8dd 361606da 397c50f4     ..86..y9...6.P|9
240287b8:	35e7b64f 397e2061 35a35d70 397f671f     O..5a ~9p].5.g.9
240287c8:	353e4e41 398012b5 3459b80f 39802ded     AN>5...9..Y4.-.9
240287d8:	b4a13e75 3980059f b55693cf 397f34a7     u>.....9..V..4.9
240287e8:	b5ad958d 397dd97c b5ef10d8 397bfb59     ....|.}9....Y.{9
240287f8:	b617cd5d 39799c26 b637896a 3976be01     ]...&.y9j.7...v9
24028808:	b656acce 3973634e b6752831 396f8ea8     ..V.Ncs91(u...o9
24028818:	b6897653 396b42f5 b697f5e2 3966834b     Sv...Bk9....K.f9
24028828:	b6a60bca 396152ea b6b3b15e 395bb563     .....Ra9^...c.[9
24028838:	b6c0e031 3955ae5e b6cd921d 394f41cc     1...^.U9.....AO9
24028848:	b6d9c153 394873c2 b6e56846 3941487e     S....sH9Fh..~HA9
24028858:	b6f081c8 3939c474 b6fb08f1 3931ec28     ....t.99....(.19
24028868:	b7027c9f 3929c45f b7072739 392151f0     .|.._.)99'...Q!9
24028878:	b70b825c 391899ca b70f8c46 390fa107     \......9F......9
24028888:	b7134367 39066ccf b716a659 38fa04c9     gC...l.9Y......8
24028898:	b719b3ea 38e6ce4b b71c6b12 38d340f1     ....K..8.k...@.8
240288a8:	b71ecafc 38bf6790 b720d300 38ab4d30     .....g.8.. .0M.8
240288b8:	b72282a8 3896fcda b723d9ab 388281a6     .."....8..#....8
240288c8:	b724d7f2 385bcd50 b7257d93 38326de9     ..$.P.[8.}%..m28
240288d8:	b725cad3 3808fb35 b725c026 37bf1659     ..%.5..8&.%.Y..7
240288e8:	b7255e2b 3758ce88 b724a5b5 3650a33c     +^%...X7..$.<.P6
240288f8:	b72397b9 b6deddd2 b7223560 b788d225     ..#.....`5".%...
24028908:	b7207ffa b7d91222 b71e7901 b8142752     .. ."....y..R'..
24028918:	b71c2216 b83b2fd7 b7197d06 b8618f19     .".../;..}....a.
24028928:	b7168bbf b8839904 b7135056 b896030f     ........VP......
24028938:	b70fcd04 b8a7fcb0 b70c0424 b8b97d34     ........$...4}..
24028948:	b707f82f b8ca7c39 b703abc3 b8daf1b3     /...9|..........
24028958:	b6fe432a b8ead5e4 b6f4b8f4 b8fa2174     *C..........t!..
24028968:	b6eabec1 b90466ad b6e05a9b b90b6984     .....f...Z...i..
24028978:	b6d592bc b912161b b6ca6d8a b9186986     .........m...i..
24028988:	b6bef18e b91e6115 b6b32577 b923fa42     .....a..w%..B.#.
24028998:	b6a7100a b92932bf b69ab832 b92e0880     .....2).2.......
240289a8:	b68e24ec b93279a6 b6815d44 b9368493     .$...y2.D]....6.
240289b8:	b668d0b6 b93a27d4 b64e9ab8 b93d6243     ..h..':...N.Cb=.
240289c8:	b63426f2 b94032da b61983d4 b94298ec     .&4..2@.......B.
240289d8:	b5fd7f7a b94493eb b5c7d232 b9462390     z.....D.2....#F.
240289e8:	b5921c6c b94747c8 b538f556 b94800bc     l....GG.V.8...H.
240289f8:	b49c2483 b9484ed3 33e1c3fe b9483295     .$...NH....3.2H.
24028a08:	3505b3c5 b947ace0 356e2931 b946beb8     ...5..G.1)n5..F.
24028a18:	35aab1af b945695a 35dd96e6 b943ae2a     ...5ZiE....5*.C.
24028a28:	3607d54f b9418ed3 362069eb b93f0d2f     O..6..A..i 6/.?.
24028a38:	36387d0f b93c2b3a 365002ee b938eb2f     .}86:+<...P6/.8.
24028a48:	3666f009 b9354f6b 367d395a b9315a87     ..f6kO5.Z9}6.Z1.
24028a58:	36896a1a b92d0f34 3693db30 b928705f     .j.64.-.0..6_p(.
24028a68:	369deb0f b9238102 36a79512 b91e445c     ...6..#....6\D..
24028a78:	36b0d4d4 b918bdb4 36b9a62b b912f081     ...6....+..6....
24028a88:	36c20533 b90ce05b 36c9ee4e b90690ea     3..6[...N..6....
24028a98:	36d15e1e b90005f5 36d8518c b8f286d0     .^.6.....Q.6....
24028aa8:	36dec5c9 b8e49a79 36e4b854 b8d64ef2     ...6y...T..6.N..
24028ab8:	36ea26ed b8c7ac83 36ef0fa2 b8b8bb88     .&.6.......6....
24028ac8:	36f370cb b8a9847c 36f7490d b89a0feb     .p.6|....I.6....
24028ad8:	36fa9753 b88a6675 36fd5ad8 b8752190     S..6uf...Z.6.!u.
24028ae8:	36ff931e b8552f2c 37009ffb b835072e     ...6,/U....7..5.
24028af8:	370130bd b814bafe 37017c06 b7e8b7fc     .0.7.....|.7....
24028b08:	3701822c b7a7f6e5 370143aa b74eaa18     ,..7.....C.7..N.
24028b18:	3700c11c b69bd202 36fff68a 3648490b     ...7.......6.IH6
24028b28:	36fde60b 37310546 36fb52ca 37975755     ...6F.17.R.6UW.7
24028b38:	36f83f0f 37d5671b 36f4ad68 3809493c     .?.6.g.7h..6<I.8
24028b48:	36f0a09f 38275d4e 36ec1bb8 3844e0c7     ...6N]'8...6..D8
24028b58:	36e721f6 3861c505 36e1b6d1 387dfbde     .!.6..a8...6..}8
24028b68:	36dbddf5 388cbbcf 36d59b4b 389a1583     ...6...8K..6...8
24028b78:	36cef2e0 38a704b2 36c7e8fc 38b38341     ...6...8...6A..8
24028b88:	36c0820b 38bf8b62 36b8c2a7 38cb178c     ...6b..8...6...8
24028b98:	36b0af8c 38d6227e 36a84d9e 38e0a762     ...6~".8.M.6b..8
24028ba8:	369fa1e2 38eaa17e 3696b179 38f40c95     ...6~..8y..6...8
24028bb8:	368d81a0 38fce4ac 368417b0 39029316     ...6...8...6...9
24028bc8:	3674f21c 390666e0 36615676 3909ec3a     ..t6.f.9vVa6:..9
24028bd8:	364d6786 390d21d4 3639307c 3910069a     .gM6.!.9|096...9
24028be8:	3624bc98 39129988 3610172c 3914d9e4     ..$6...9,..6...9
24028bf8:	35f69716 3916c716 35ccca17 391860aa     ...5...9...5.`.9
24028c08:	35a2ddf6 3919a662 3571d26a 391a9838     ...5b..9j.q58..9
24028c18:	351e046a 391b3638 3494fc93 391b80bd     j..586.9...4...9
24028c28:	b30940e5 391b7826 b4b60e83 391b1d1f     .@..&x.9.......9
24028c38:	b52cb096 391a7070 b57d6613 39197308     ..,.pp.9.f}..s.9
24028c48:	b5a67f41 3918260a b5cda8cf 39168ab7     A....&.9.......9
24028c58:	b5f41c04 3914a27c b60ce2da 39126ef5     ....|..9.....n.9
24028c68:	b61f49ac 390ff1cd b6313971 390d2cea     .I.....9q91..,.9
24028c78:	b642a975 390a2244 b6539165 3906d3ff     u.B.D".9e.S....9
24028c88:	b663e935 39034456 b673a93c 38feeb66     5.c.VD.9<.s.f..8
24028c98:	b6816519 38f6d510 b688a295 38ee4aec     .e.....8.....J.8
24028ca8:	b68f89d3 38e5524c b69617c4 38dbf0d2     ....LR.8.......8
24028cb8:	b69c498e 38d22c3d b6a21c91 38c80a6e     .I..=,.8....n..8
24028cc8:	b6a78e61 38bd9189 b6ac9ccc 38b2c7bc     a......8.......8
24028cd8:	b6b145d6 38a7b35e b6b587c1 389c5ae2     .E..^..8.....Z.8
24028ce8:	b6b96109 3890c4d1 b6bcd05f 3884f7cc     .a.....8_......8
24028cf8:	b6bfd4b5 3871f500 b6c26d37 3859a75a     ......q87m..Z.Y8
24028d08:	b6c4994b 38411431 b6c6588e 3828491f     K...1.A8.X...I(8
24028d18:	b6c7aadf 380f53c1 b6c89055 37ec8371     .....S.8U...q..7
24028d28:	b6c9093c 37ba411e b6c91621 3787fb97     <....A.7!......7
24028d38:	b6c8b7c7 372b9b4a b6c7ef24 368f4775     ....J.+7$...uG.6
24028d48:	b6c6bd6b b5ddd7d6 b6c52403 b6fc99fb     k........$......
24028d58:	b6c32489 b75fdf45 b6c0c0cb b7a01fd5     .$..E._.........
24028d68:	b6bdfac9 b7cf9e85 b6bad4b9 b7fe53b6     .............S..
24028d78:	b6b750f8 b81613fa b6b3721a b82c823d     .P.......r..=.,.
24028d88:	b6af3ad6 b8426996 b6aaae16 b857bf59     .:...iB.....Y.W.
24028d98:	b6a5cee3 b86c7936 b6a0a077 b88046a2     ....6yl.w....F..
24028da8:	b69b2624 b889f904 b695636b b8934f3b     $&......kc..;O..
24028db8:	b68f5be5 b89c44f9 b689134b b8a4d62f     .[...D..K.../...
24028dc8:	b6828d71 b8acff06 b6779c99 b8b4bbeb     q.........w.....
24028dd8:	b669b3ba b8bc0988 b65b6880 b8c2e4cd     ..i......h[.....
24028de8:	b64cc34e b8c94ae6 b63dcc9b b8cf394b     N.L..J....=.K9..
24028df8:	b62e8d03 b8d4adb1 b61f0d33 b8d9a621     ........3...!...
24028e08:	b60f55ef b8de20c7 b5fee00b b8e21c4b     .U... ......K...
24028e18:	b5dec8aa b8e59772 b5be776c b8e89152     ....r...lw..R...
24028e28:	b59dfe04 b8eb0945 b57adc3a b8ecfefa     ....E...:.z.....
24028e38:	b539b2ac b8ee7262 b4f1448b b8ef63a7     ..9.br...D...c..
24028e48:	b45f36aa b8efd345 330a8e23 b8efc1ee     .6_.E...#..3....
24028e58:	34913f22 b8ef30b4 3507f513 b8ee20c8     "?.4.0.....5. ..
24028e68:	354688b3 b8ec93b6 35821d2e b8ea8b44     ..F5.......5D...
24028e78:	35a07558 b8e80970 35be3d87 b8e5107a     Xu.5p....=.5z...
24028e88:	35db66de b8e1a2db 35f7e2dd b8ddc34f     .f.5.......5O...
24028e98:	3609d1d1 b8d974bc 36174dc9 b8d4ba4e     ...6.t...M.6N...
24028ea8:	36245ee9 b8cf975b 3630fef1 b8ca0f64     .^$6[.....06d...
24028eb8:	363d27f8 b8c42623 3648d457 b8bddf81     .'=6#&..W.H6....
24028ec8:	3653feba b8b73f8b 365ea21d b8b04a7a     ..S6.?....^6zJ..
24028ed8:	3668b9cb b8a904ac 36724167 b8a172a0     ..h6....gAr6.r..
24028ee8:	367b34df b89998f9 3681c841 b8917c75     .4{6....A..6u|..
24028ef8:	3685a87c b88921ee 3689399c b8808e54     |..6.!...9.6T...
24028f08:	368c7a52 b86f8d5e 368f6977 b85da02f     Rz.6^.o.wi.6/.].
24028f18:	36920610 b84b5f6c 36944f57 b838d581     ...6l_K.WO.6..8.
24028f28:	369644af b8260cec 3697e5aa b8131036     .D.6..&....66...
24028f38:	3699320b b7ffd3eb 369a29be b7d94979     .2.6.....).6yI..
24028f48:	369acce2 b7b29640 369b1bbf b78bcf51     ...6@......6Q...
24028f58:	369b16cc b74a1340 369abeac b6f967d3     ...6@.J....6.g..
24028f68:	369a142c b63ea74e 36991848 35e71284     ,..6N.>.H..6...5
24028f78:	3697cc1e 36d190bf 369630fc 3733e0e1     ...6...6.0.6..37
24028f88:	36944859 377e0507 369213cd 37a3877a     YH.6..~7...6z..7
24028f98:	368f9518 37c76cc0 368cce22 37eaa048     ...6.l.7"..6H..7
24028fa8:	3689c0f0 38068842 36866faf 38175637     ...6B..8.o.67V.8
24028fb8:	3682dcab 3827b1cc 367e149a 38379315     ...6..'8..~6..78
24028fc8:	3675f637 3846f279 366d6378 3855c8b2     7.u6y.F8xcm6..U8
24028fd8:	366461dc 38640ed0 365af707 3871be40     .ad6..d8..Z6@.q8
24028fe8:	365128e0 387ed0cd 3646fd63 3885a052     .(Q6..~8c.F6R..8
24028ff8:	363c7ac3 388b8427 3631a74a 38911163     .z<6'..8J.16c..8
24029008:	36268971 389645ae 361b27b8 389b1eeb     q.&6.E.8.'.6...8
24029018:	360f88cd 389f9b32 3603b35f 38a3b8cc     ...62..8_..6...8
24029028:	35ef5c81 38a77640 35d7007d 38aad240     .\.5@v.8}..5@..8
24029038:	35be6079 38adcbc2 35a58a3c 38b061ec     y`.5...8<..5.a.8
24029048:	358c8b8f 38b2941b 3566e46f 38b461e3     ...5...8o.f5.a.8
24029058:	353497e3 38b5cb13 35024cc9 38b6cfac     ..45...8.L.5...8
24029068:	34a03c7c 38b76fe9 33f138b2 38b7ac36     |<.4.o.8.8.36..8
24029078:	b39bf124 38b7853b b4896e96 38b6fbcc     $...;..8.n.....8
24029088:	b4ead545 38b610f7 b5257ee6 38b4c5f9     E......8.~%....8
24029098:	b554db59 38b31c43 b581b3ea 38b11573     Y.T.C..8....s..8
240290a8:	b5988668 38aeb359 b5aed9ab 38abf7f2     h...Y..8.......8
240290b8:	b5c4a2a2 38a8e567 b5d9d69c 38a57e0d     ....g..8.....~.8
240290c8:	b5ee6b4d 38a1c460 b6012b5e 389dbb06     Mk..`..8^+.....8
240290d8:	b60ac7bb 389964c7 b6140639 3894c496     .....d.89......8
240290e8:	b61ce295 388fdd81 b62558be 388ab2bb     .......8.X%....8
240290f8:	b62d64ef 38854794 b6350396 387f3eef     .d-..G.8..5..>.8
24029108:	b63c3170 38737bd7 b642eb76 38674d20     p1<..{s8v.B. Mg8
24029118:	b6492ee1 385aba33 b64ef93e 384dca9e     ..I.3.Z8>.N...M8
24029128:	b654484f 38408618 b6591a2a 3832f476     OHT...@8*.Y.v.28
24029138:	b65d6d2b 38251da4 b6613fec 381709a6     +m]...%8.?a....8
24029148:	b6649159 3808c08f b66760a6 37f4950b     Y.d....8.`g....7
24029158:	b669ad44 37d75f60 b66b76fd 37b9f080     D.i.`_.7.vk....7
24029168:	b66cbdd6 379c58c7 b66d821a 377d5106     ..l..X.7..m..Q}7
24029178:	b66dc461 3741dfe9 b66d8589 37067e8a     a.m...A7..m..~.7
24029188:	b66cc6ab 369699c0 b66b892f 3583549e     ..l....6/.k..T.5
24029198:	b669ceb7 b6282467 b6679928 b6c7dec7     ..i.g$(.(.g.....
240291a8:	b664eaa1 b71d2a0c b661c58c b7559b70     ..d..*....a.p.U.
240291b8:	b65e2c80 b7869349 b65a2253 b7a1d793     .,^.I...S"Z.....
240291c8:	b655aa1c b7bc8cd7 b650c717 b7d6a5ba     ..U.......P.....
240291d8:	b64b7cbf b7f0154e b645cec4 b8046795     .|K.N.....E..g..
240291e8:	b63fc0f8 b81063a3 b639575d b81bf919     ..?..c..]W9.....
240291f8:	b632962d b827227c b62b81b7 b831da98     -.2.|"'...+...1.
24029208:	b6241e7d b83c1c7e b61c7118 b845e392     }.$.~.<..q....E.
24029218:	b6147e46 b84f2b75 b60c4ae1 b857f023     F~..u+O..J..#.W.
24029228:	b603dbe2 b8602de1 b5f66c95 b867e145     .....-`..l..E.g.
24029238:	b5e4be7a b86f073a b5d2b7d4 b8759cf8     z...:.o.......u.
24029248:	b5c0631d b87ba012 b5adcae1 b8808734     .c....{.....4...
24029258:	b59af9c8 b882f31b b587fa78 b8851305     ........x.......
24029268:	b569af3f b886e663 b54337e0 b8886cd4     ?.i.c....7C..l..
24029278:	b51ca420 b889a61c b4ec1262 b88a922e      .......b.......
24029288:	b49ef847 b88b3126 b424474d b88b834a     G...&1..MG$.J...
24029298:	b237b948 b88b8907 340c2130 b88b42f7     H.7.....0!.4.B..
240292a8:	34911f6d b88ab1d8 34db4752 b889d691     m..4....RG.4....
240292b8:	351230d9 b888b230 3536246b b88745e6     .0.50...k$65.E..
240292c8:	35596bfe b885930e 357bf5ad b8839b23     .kY5......{5#...
240292d8:	358ed813 b8815fc3 359f4554 b87dc55a     ...5._..TE.5Z.}.
240292e8:	35af3a7e b8784b88 35beafcf b8725608     ~:.5.Kx....5.Vr.
240292f8:	35cd9de2 b86be91a 35dbfd92 b865092d     ...5..k....5-.e.
24029308:	35e9c834 b85dbaec 35f6f765 b856032f     4..5..].e..5/.V.
24029318:	3601c29a b84de707 3607b5f9 b8456ba7     ...6..M....6.kE.
24029328:	360d5347 b83c9670 36129811 b8336cf0     GS.6p.<....6.l3.
24029338:	36178233 b829f4cd 361c0faf b82033d4     3..6..)....6.3 .
24029348:	36203ec3 b8162fe7 36240de4 b80bef09     .> 6./....$6....
24029358:	36277bbb b801774c 362a872e b7ed9db0     .{'6Lw....*6....
24029368:	362d2f5a b7d7f7c8 362f7391 b7c20956     Z/-6.....s/6V...
24029378:	3631535d b7abdee9 3632ce82 b7958518     ]S16......26....
24029388:	3633e4fe b77e10f7 36349703 b750eb36     ..36..~...466.P.
24029398:	3634e4f5 b723b1f5 3634cf72 b6ecfc31     ..46..#.r.461...
240293a8:	36345758 b692d085 36337da4 b5e446cd     XW46.....}36.F..
240293b8:	36324397 35804068 3630aaa4 3670cad5     .C26h@.5..06..p6
240293c8:	362eb45f 36cfbf9a 362c629e 3712f874     _..6...6.b,6t..7
240293d8:	3629b760 373d6651 3626b4ca 3767137d     `.)6Qf=7..&6}.g7
240293e8:	36235d37 3787f568 361fb328 379bebcb     7]#6h..7(..6...7
240293f8:	361bb945 37af62f2 36177258 37c2513c     E..6.b.7Xr.6<Q.7
24029408:	3612e15b 37d4ad69 360e0962 37e66e95     [..6i..7b..6.n.7
24029418:	3608eda7 37f78c49 3603917f 3803ff3c     ...6I..7...6<..8
24029428:	35fbf0b3 380bdec4 35f04b94 38136121     ...5...8.K.5!a.8
24029438:	35e43aea 381a82f7 35d7c631 3821412a     .:.5...81..5*A!8
24029448:	35caf4fa 382798d0 35bdcf21 382d8749     ...5..'8!..5I.-8
24029458:	35b05c75 38330a2c 35a2a507 38381f55     u\.5,.38...5U.88
24029468:	3594b0da 383cc4db 35868824 3840f91c     ...5..<8$..5..@8
24029478:	35706619 3844bab6 355373a1 38480885     .fp5..D8.sS5..H8
24029488:	35364960 384ae1aa 3518f7cb 384d4589     `I65..J8...5.EM8
24029498:	34f71ea4 384f33c5 34bc40a0 3850ac47     ...4.3O8.@.4G.P8
240294a8:	34817604 3851af33 340dbe00 38523cf2     .v.43.Q8...4.<R8
240294b8:	32c9b669 38525628 b3b4d594 3851fbbc     i..2(VR8......Q8
240294c8:	b44ce8f5 38512ed5 b49f0382 384ff0cd     ..L...Q8......O8
240294d8:	b4d6c4c0 384e4343 b506cd93 384c280d     ....CCN8.....(L8
240294e8:	b521b52f 3849a13a b53c0b73 3846b10a     /.!.:.I8s.<...F8
240294f8:	b555c304 384359ff b56ecefc 383f9ec4     ..U..YC8..n...?8
24029508:	b5839177 383b8238 b58f5970 3837076b     w...8.;8pY..k.78
24029518:	b59ab9c5 3832319f b5a5acf1 382d0437     .....128....7.-8
24029528:	b5b02dcc 382782c7 b5ba377e 3821b10c     .-....'8~7....!8
24029538:	b5c3c575 381b92e1 b5ccd366 38152c46     u......8f...F,.8
24029548:	b5d55d55 380e815b b5dd5f9d 3807965e     U]..[..8._..^..8
24029558:	b5e4d6e8 38006fa6 b5ebc03a 37f2234a     .....o.8:...J#.7
24029568:	b5f218e5 37e301be b5f7de92 37d383d0     .......7.......7
24029578:	b5fd0f42 37c3b2dc b600d4a0 37b3984b     B......7....K..7
24029588:	b602d5a2 37a33d95 b6048a28 3792ac52     .....=.7(...R..7
24029598:	b605f1de 3781ee13 b6070c99 376218ff     .......7......b7
240295a8:	b607da61 37402270 b6085b62 371e0b93     a...p"@7b[.....7
240295b8:	b6088fef 36f7cf2f b6087892 36b392e6     ..../..6.x.....6
240295c8:	b60815ec 365f0fe0 b60768da 35af4e14     ......_6.h...N.5
240295d8:	b606724e b53b2d11 b605336e b633feb2     Nr...-;.n3....3.
240295e8:	b603ad7f b69bd616 b601e1eb b6dcc70e     ................
240295f8:	b5ffa495 b70e581a b5fb0086 b72db827     .....X......'.-.
24029608:	b5f5db6a b74c7397 b5f03918 b76a7ab8     j....sL..9...zj.
24029618:	b5ea1db1 b783df37 b5e38dac b7921815     ....7...........
24029628:	b5dc8d89 b79fe0ea b5d52221 b7ad330d     ........!"...3..
24029638:	b5cd5067 b7ba0814 b5c51d9b b7c659f0     gP...........Y..
24029648:	b5bc8f09 b7d222e0 b5b3aa38 b7dd5d84     ....."..8....]..
24029658:	b5aa74c4 b7e804cd b5a0f482 b7f21415     .t..............
24029668:	b5972f4a b7fb870d b58d2b20 b8022cde     J/...... +...,..
24029678:	b582ee1c b8064450 b570fccb b80a0843     ....PD....p.C...
24029688:	b55bc46a b80d7753 b5463fa1 b8109054     j.[.Sw...?F.T...
24029698:	b5307b07 b813523f b51a8343 b815bc4b     .{0.?R..C...K...
240296a8:	b50464fa b817cde0 b4dc599f b8198692     .d.......Y......
240296b8:	b4afceb2 b81ae630 b483423e b81becb5     ....0...>B......
240296c8:	b42d9a1f b81c9a4f b3aa1f18 b81cef5f     ..-.O......._...
240296d8:	313aacff b81cec73 33b44982 b81c924f     ..:1s....I.3O...
240296e8:	34306f86 b81be1df 3482ce70 b81adc41     .o04....p..4A...
240296f8:	34acbfd1 b81982c2 34d5f5d9 b817d6d7     ...4.......4....
24029708:	34fe5b12 b815da22 3512ed55 b8138e6b     .[.4"...U..5k...
24029718:	3526303c b810f5ab 3538ec86 b80e11fa     <0&5......85....
24029728:	354b18d5 b80ae595 355cac37 b80772e4     ..K5....7.\5.r..
24029738:	356d9e19 b803bc6d 357de65c b7ff89a8     ..m5m...\.}5....
24029748:	3586bea2 b7f71dbc 358e2dd2 b7ee3adc     ...5.....-.5.:..
24029758:	35953d59 b7e4e708 359bea06 b7db2868     Y=.5.......5h(..
24029768:	35a230ed b7d10558 35a80f71 b7c6845f     .0.5X...q..5_...
24029778:	35ad8323 b7bbac31 35b289ce b7b08391     #..51......5....
24029788:	35b72198 b7a51179 35bb48d3 b7995ceb     .!.5y....H.5.\..
24029798:	35befe1d b78d6d07 35c24055 b7814905     ...5.m..U@.5.I..
240297a8:	35c50ea0 b769f035 35c76867 b7510322     ...55.i.gh.5".Q.
240297b8:	35c94d40 b737d97f 35cabd24 b71e81da     @M.5..7.$..5....
240297c8:	35cbb83e b7050ad2 35cc3ef7 b6d705e6     >..5.....>.5....
240297d8:	35cc5200 b6a3f166 35cbf246 b661e9a9     .R.5f...F..5..a.
240297e8:	35cb20f5 b5f8b25d 35c9df7c b4bb4b81     . .5]...|..5.K..
240297f8:	35c82f72 35995c92 35c612cc 362fb7af     r/.5.\.5...5../6
24029808:	35c38b90 3688bebb 35c09c1d 36b8e5c1     ...5...6...5...6
24029818:	35bd46ed 36e8377c 35b98ec9 370b4d98     .F.5|7.6...5.M.7
24029828:	35b5769b 3721fc6c 35b10185 37381ca1     .v.5l.!7...5..87
24029838:	35ac32c1 374da2f1 35a70dd9 376284ac     .2.5..M7...5..b7
24029848:	35a19660 3776b778 359bd027 378518c0     `..5x.v7'..5...7
24029858:	3595bf0f 378e74b2 358f672e 37976b22     ...5.t.7.g.5"k.7
24029868:	3588ccaf 379ff7ef 3581f3df 37a8172c     ...5...7...5,..7
24029878:	3575c23c 37afc53c 356731d3 37b6fecc     <.u5<..7.1g5...7
24029888:	35583fa2 37bdc0ca 3548f4f1 37c40870     .?X5...7..H5p..7
24029898:	35395b23 37c9d34c 35297bb3 37cf1f27     #[95L..7.{)5'..7
240298a8:	35196030 37d3ea29 3509123c 37d832bb     0`.5)..7<..5.2.7
240298b8:	34f136f0 37dbf798 34d00b1f 37df37c4     .6.4...7...4.7.7
240298c8:	34aeb450 37e1f294 348d45c1 37e427ab     P..4...7.E.4.'.7
240298d8:	3457a51b 37e5d6f8 3414db5e 37e700ad     ..W4...7^..4...7
240298e8:	33a4a7d6 37e7a552 32819eb6 37e7c5ba     ...3R..7...2...7
240298f8:	b3458119 37e762fd b3e488e7 37e67e73     ..E..b.7....s~.7
24029908:	b4325566 37e519c7 b471709b 37e336e4     fU2....7.pq..6.7
24029918:	b497ba33 37e0d7fe b4b61ffb 37ddff80     3......7.......7
24029928:	b4d3d9be 37dab015 b4f0d817 37d6ecb9     .......7.......7
24029938:	b5068614 37d2b888 b51433d5 37ce16e8     .......7.3.....7
24029948:	b5216e79 37c90b74 b52e2f77 37c399f9     yn!.t..7w/.....7
24029958:	b53a709c 37bdc675 b5462c0b 37b79514     .p:.u..7.,F....7
24029968:	b5515c3e 37b10a31 b55bfc0b 37aa2a4f     >\Q.1..7..[.O*.7
24029978:	b56606a4 37a2fa1b b56f779d 379b7e5c     ..f....7.wo.\~.7
24029988:	b5784aeb 3793bc06 b5803e70 378bb81f     .Jx....7p>.....7
24029998:	b584051d 378377d1 b587780a 37760097     .....w.7.x....v7
240299a8:	b58a95fa 3764addd b58d5de9 3753021b     ......d7.]....S7
240299b8:	b58fcef3 37410843 b591e879 372ecb34     ....C.A7y...4..7
240299c8:	b593aa12 371c55ef b5951380 3709b380     .....U.7.......7
240299d8:	b59624a9 36edddd3 b596ddca 36c82660     .$.....6....`&.6
240299e8:	b5973f33 36a25693 b5974970 3679086f     3?...V.6pI..o.y6
240299f8:	b596fd43 362d89d2 b5965b88 35c4b812     C.....-6.[.....5
24029a08:	b5956572 34bd4a87 b5941c36 b5499332     re...J.46...2.I.
24029a18:	b592815f b5f74af5 b590967a b643f0b8     _....J..z.....C.
24029a28:	b58e5d57 b6858fb2 b58bd7f6 b6a885af     W]..............
24029a38:	b589086f b6cac7cb b585f0ff b6ec440a     o............D..
24029a48:	b5829411 b7067488 b57de85f b716530e     .....t.._.}..S..
24029a58:	b5762807 b725b58e b56decaf b734945d     .(v...%...m.].4.
24029a68:	b5653c23 b742e818 b55c1c6b b750a9e2     #<e...B.k.\...P.
24029a78:	b55293bc b75dd31d b548a87f b76a5da5     ..R...]...H..]j.
24029a88:	b53e6143 b77643b8 b533c4c3 b780c002     Ca>..Cv...3.....
24029a98:	b528d9d6 b78606d2 b51da777 b78af40f     ..(.....w.......
24029aa8:	b51234b7 b78f85b5 b50688c0 b793b9fb     .4..............
24029ab8:	b4f5559a b7978f51 b4dd4441 b79b0462     .U..Q...AD..b...
24029ac8:	b4c4ec1d b79e180f b4ac5bcd b7a0c982     .........[......
24029ad8:	b493a202 b7a31805 b4759aaa b7a5033d     ..........u.=...
24029ae8:	b443d8b7 b7a68af0 b4121b14 b7a7af25     ..C.........%...
24029af8:	b3c0fcd4 b7a87024 b33c7c60 b7a8ce5f     ....$p..`|<._...
24029b08:	30f37563 b7a8ca92 3349e05b b7a865a4     cu.0....[.I3.e..
24029b18:	33c4f2ca b7a7a0b1 3411d05d b7a67d11     ...3....]..4.}..
24029b28:	3440631d b7a4fc47 346e1880 b7a32019     .c@4G.....n4. ..
24029b38:	348d6c01 b7a0ea68 34a344f9 b79e5d56     .l.4h....D.4V]..
24029b48:	34b88bb1 b79b7b23 34cd352b b798464e     ...4#{..+5.4NF..
24029b58:	34e136d5 b794c175 34f48690 b790ef5d     .6.4u......4]...
24029b68:	35038d65 b78cd2ed 350c7533 b7886f46     e..5....3u.5Fo..
24029b78:	3514f667 b783c792 351d0d01 b77dbe55     g..5.......5U.}.
24029b88:	3524b541 b77372fb 352bebb3 b768b445     A.$5.rs...+5E.h.
24029b98:	3532ad2b b75d8974 3538f6cb b751fa02     +.25t.]...85..Q.
24029ba8:	353ec5fe b7460da9 3544187e b739cc1a     ..>5..F.~.D5..9.
24029bb8:	3548ec52 b72d3d5c 354d3fce b720695c     R.H5\=-..?M5\i .
24029bc8:	35511198 b7135843 355460a1 b7061239     ..Q5CX...`T59...
24029bd8:	35572c2c b6f13eed 355973c6 b6d61073     ,,W5.>...sY5s...
24029be8:	355b374d b6baa98a 355c76ec b69f1aab     M7[5.....v\5....
24029bf8:	355d331e b6837448 355d6ca3 b64f8d67     .3]5Ht...l]5g.O.
24029c08:	355d2489 b6184448 355c5c2b b5c25a7b     .$]5HD..+\\5{Z..
24029c18:	355b1526 b5299fca 35595161 343ec65b     &.[5..).aQY5[.>4
24029c28:	35571307 3583624f 35545c85 35ed9091     ..W5Ob.5.\T5...5
24029c38:	3551308d 362b146b 354d9209 365e78ef     .0Q5k.+6..M5.x^6
24029c48:	35498427 36886cfb 35450a48 36a10e45     '.I5.l.6H.E5E..6
24029c58:	3540280c 36b91347 353ae142 36d06f70     .(@5G..6B.:5po.6
24029c68:	353539ef 36e716ac 352f3648 36fcfd76     .955...6H6/5v..6
24029c78:	3528daab 37090c66 35222ba4 37132f20     ..(5f..7.+"5 /.7
24029c88:	351b2de6 371ce1ff 3513e643 37262062     .-.5...7C..5b &7
24029c98:	350c59b1 372ee601 35048d44 37372ed1     .Y.5...7D..5..77
24029ca8:	34f90c56 373ef735 34e8934c 37463bca     V..45.>7L..4.;F7
24029cb8:	34d7ba1e 374cf9a2 34c68b9e 37532e00     ...4..L7...4..S7
24029cc8:	34b512b2 3758d690 34a35a58 375df164     ...4..X7XZ.4d.]7
24029cd8:	34916d9a 37627cd0 347eaf0f 37667789     .m.4.|b7..~4.wf7
24029ce8:	345a465d 3769e0a9 3435b736 376cb77f     ]FZ4..i76.54..l7
24029cf8:	3411177b 376efbe0 33d8fa10 3770add7     {..4..n7...3..p7
24029d08:	338ffae2 3771cdd1 330eb822 37725c7f     ...3..q7"..3.\r7
24029d18:	afb84db9 37725b14 b31031b8 3771cae6     .M...[r7.1....q7
24029d28:	b38e9d04 3770adab b3d41d0c 376f0569     ......p7....i.o7
24029d38:	b40c391a 376cd488 b42dbb62 376a1d9b     .9....l7b.-...j7
24029d48:	b44e8313 3766e38e b46e7e74 37632999     ..N...f7t~n..)c7
24029d58:	b486ce3f 375ef322 b495e65f 375a43ef     ?...".^7_....CZ7
24029d68:	b4a47fc3 37551ff5 b4b292ee 374f8b5e     ......U7....^.O7
24029d78:	b4c018c5 37498a95 b4cd0a90 37432240     ......I7....@"C7
24029d88:	b4d96202 373c572d b4e51933 37352e62     .b..-W<73...b.57
24029d98:	b4f02aaf 372dad12 b4fa916a 3725d886     .*....-7j.....%7
24029da8:	b5022468 371db640 b506a65d 37154bda     h$..@..7]....K.7
24029db8:	b50accbf 370c9f0e b50e95f2 3703b5af     .......7.......7
24029dc8:	b5120091 36f52b4b b5150b7b 36e289dc     ....K+.6{......6
24029dd8:	b517b5c4 36cf9324 b519fec1 36bc534d     ....$..6....MS.6
24029de8:	b51be601 36a8d68d b51d6b4b 36952923     .......6Kk..#).6
24029df8:	b51e8ea6 3681574e b51f5052 365ada87     ....NW.6RP....Z6
24029e08:	b51fb0ca 3632ee53 b51fb0c2 360b0224     ....S.26....$..6
24029e18:	b51f5124 35c65bb5 b51e9313 356e2459     $Q...[.5....Y$n5
24029e28:	b51d77e9 34a158df b51c0132 b496a985     .w...X.42.......
24029e38:	b51a30b3 b5658574 b518085d b5bec6e6     .0..t.e.].......
24029e48:	b5158a54 b604c60b b512b8eb b6297445     T...........Et).
24029e58:	b50f96a0 b64d59eb b50c261f b6706376     .....YM..&..vcp.
24029e68:	b5086a3a b6893f01 b50465ec b699cbbe     :j...?...e......
24029e78:	b5001c54 b6a9cf4a b4f72164 b6b9415f     T...J...d!.._A..
24029e88:	b4ed8cd2 b6c81a2e b4e381f1 b6d6524d     ............MR..
24029e98:	b4d907f5 b6e3e2ca b4ce264a b6f0c530     ........J&..0...
24029ea8:	b4c2e483 b6fcf379 b4b74a63 b704340f     ....y...cJ...4..
24029eb8:	b4ab5fc7 b7098f0d b49f2caf b70e8873     ._.......,..s...
24029ec8:	b492b93a b7131e3d b4860d8f b7174ea9     :...=........N..
24029ed8:	b47263d9 b71b1838 b4585d31 b71e79ad     .cr.8...1]X..y..
24029ee8:	b43e17b3 b721720c b423a3ff b724009c     ..>..r!...#...$.
24029ef8:	b4091295 b72624e6 b3dce7c9 b727deb6     .....$&.......'.
24029f08:	b3a7b09e b7292e1b b3653fd7 b72a1354     ......)..?e.T.*.
24029f18:	b2f756b3 b72a8f06 b19715d4 b72aa1e1     .V....*.......*.
24029f28:	32a9b83c b72a4d0e 333b547f b72991b5     <..2.M*..T;3..).
24029f38:	33902587 b728716e 33c1c2f6 b726ede4     .%.3nq(....3..&.
24029f48:	33f26667 b7250916 3410fa4a b722c52d     gf.3..%.J..4-.".
24029f58:	34282997 b7202487 343eb45a b71d29b5     .)(4.$ .Z.>4.)..
24029f68:	34548e72 b719d77c 3469ac39 b71630cb     r.T4|...9.i4.0..
24029f78:	347e029a b71238c1 3488c38b b70df2a4     ..~4.8.....4....
24029f88:	349217e0 b70961e5 349af9ae b7048a17     ...4.a.....4....
24029f98:	34a364a0 b6fedde5 34ab54ba b6f42899     .d.4.....T.4.(..
24029fa8:	34b2c655 b6e8fc34 34b9b619 b6dd60d3     U..44......4.`..
24029fb8:	34c02112 b6d15ec1 34c604a0 b6c4fe77     .!.4.^.....4w...
24029fc8:	34cb5e77 b6b84891 34d02cb2 b6ab45c4     w^.4.H...,.4.E..
24029fd8:	34d46dbc b69dfee9 34d82060 b6907ce3     .m.4....` .4.|..
24029fe8:	34db43c2 b682c8a7 34ddd766 b669d661     .C.4....f..4a.i.
24029ff8:	34dfdb23 b64ddafe 34e14f2c b631b119     #..4..M.,O.4..1.
2402a008:	34e23413 b6156a95 34e28ab7 b5f2327e     .4.4.j.....4~2..
2402a018:	34e25459 b5b99d63 34e19280 b58138c7     YT.4c......4.8..
2402a028:	34e04711 b5124e03 34de7442 b40c4f88     .G.4.N..Bt.4.O..
2402a038:	34dc1c92 3495f4d1 34d942cf 35379bd0     ...4...4.B.4..75
2402a048:	34d5ea15 3591486d 34d215c2 35c5cddf     ...4mH.5...4...5
2402a058:	34cdc977 35f9403c 34c90925 3615c142     w..4<@.5%..4B..6
2402a068:	34c3d8e8 362e3c5f 34be3d26 36460406     ...4_<.6&=.4..F6
2402a078:	34b83a7b 365d0b54 34b1d5b4 3673460a     {:.4T.]6...4.Fs6
2402a088:	34ab13d4 36845443 34a3fa0c 368e93e3     ...4CT.6...4...6
2402a098:	349c8dae 36985cbf 3494d443 36a1aa03     ...4.\.6C..4...6
2402a0a8:	348cd368 36aa7739 348490de 36b2c046     h..49w.6...4F..6
2402a0b8:	3478250e 36ba816f 3466bca7 36c1b755     .%x4o..6..f4U..6
2402a0c8:	3454f490 36c85efa 3442d8ff 36ce75c2     ..T4.^.6..B4.u.6
2402a0d8:	34307634 36d3f971 341dd874 36d8e837     4v04q..6t..47..6
2402a0e8:	340b0c24 36dd4098 33f03b26 36e10184     $..4.@.6&;.3...6
2402a0f8:	33ca321e 36e42a4d 33a4159f 36e6baa2     .2.3M*.6...3...6
2402a108:	337bfbe3 36e8b29b 33300638 36ea12a7     ..{3...68.03...6
2402a118:	32c8f356 36eadb9b 31cc2779 36eb0ea4     V..2...6y'.1...6
2402a128:	b242a876 36eaad51 b2f3cd1e 36e9b982     v.B.Q..6.......6
2402a138:	b3420483 36e83579 b3846ca0 36e623c7     ..B.y5.6.l...#.6
2402a148:	b3a71da5 36e38751 b3c9013a 36e0634c     ....Q..6:...Lc.6
2402a158:	b3ea03fe 36dcbb3c b40509ad 36d892ef     ....<..6.......6
2402a168:	b4148eb5 36d3ee79 b423889f 36ced233     ....y..6..#.3..6
2402a178:	b431ef56 36c942b8 b43fbb37 36c344e0     V.1..B.67.?..D.6
2402a188:	b44ce51c 36bcddb6 b459665d 36b61284     ..L....6]fY....6
2402a198:	b46538be 36aee8be b470568e 36a76608     .8e....6.Vp..f.6
2402a1a8:	b47abaa1 369f9035 b4823026 36976d33     ..z.5..6&0..3m.6
2402a1b8:	b486a1b1 368f0317 b48ab027 36865814     .......6'....X.6
2402a1c8:	b48e59fe 367ae4eb b4919ded 3668b12b     .Y....z6....+.h6
2402a1d8:	b4947af1 365621cd b496f054 364343c4     .z...!V6T....CC6
2402a1e8:	b498fd9f 3630240e b49aa299 361ccfbd     .....$06.......6
2402a1f8:	b49bdf57 360953d2 b49cb42d 35eb7a95     W....S.6-....z.5
2402a208:	b49d21b4 35c4322c b49d28c4 359ce7fa     .!..,2.5.(.....5
2402a218:	b49cca71 356b6aba b49c0813 351d66b0     q....jk5.....f.5
2402a228:	b49ae343 349fea1a b4995dd1 3251894d     C......4.]..M.Q2
2402a238:	b49779c5 b490ed7b b4953961 b513136e     .y..{...a9..n...
2402a248:	b4929f21 b55c62fe b48fadb0 b5921ce8     !....b\.........
2402a258:	b48c67ee b5b536e7 b488d0e7 b5d76b24     .g...6......$k..
2402a268:	b484ebda b5f8a618 b480bc28 b60c6a8f     ........(....j..
2402a278:	b4788ac2 b61bf33c b46f1675 b62ae4a4     ..x.<...u.o...*.
2402a288:	b465230e b63936d3 b45ab877 b646e25d     .#e..69.w.Z.].F.
2402a298:	b44fded3 b653e048 b4449e7d b6602a31     ..O.H.S.}.D.1*`.
2402a2a8:	b438fff4 b66bba2e b42d0bee b6768af1     ..8...k...-...v.
2402a2b8:	b420cb29 b6804bd0 b414469b b684ee06     ). ..K...F......
2402a2c8:	b4078733 b6892a3e b3f52c23 b68cfef1     3...>*..#,......
2402a2d8:	b3daf875 b6906ad2 b3c08595 b6936ce9     u....j.......l..
2402a2e8:	b3a5e5b5 b6960480 b38b2ae9 b698312b     .........*..+1..
2402a2f8:	b360ce54 b699f2c6 b32b5891 b69b4978     T.`......X+.xI..
2402a308:	b2ec2f71 b69c35a6 b2825cfe b69cb805     q/...5...\......
2402a318:	b14bf031 b69cd182 321c5536 b69c8359     1.K.....6U.2Y...
2402a328:	32b45b87 b69bcefc 330c6a85 b69ab627     .[.2.....j.3'...
2402a338:	333daca5 b6993ace 336dd626 b6975f21     ..=3.:..&.m3!_..
2402a348:	338e6511 b695258e 33a53666 b69290b5     .e.3.%..f6.3....
2402a358:	33bb51c1 b68fa36c 33d0aa73 b68c60c4     .Q.3l...s..3.`..
2402a368:	33e5346d b688cbf2 33f8e450 b684e861     m4.3....P..3a...
2402a378:	3405d7b9 b680b9a3 340ec5e9 b67886e6     ...4.......4..x.
2402a388:	3417381a b66f1363 341f2a0f b66520c3     .8.4c.o..*.4. e.
2402a398:	342697f1 b65ab746 342d7e40 b64fdf62     ..&4F.Z.@~-4b.O.
2402a3a8:	3433d9f1 b644a1c1 3439a857 b639073c     ..34..D.W.94<.9.
2402a3b8:	343ee726 b62d18cb 3443947d b620df84     &.>4..-.}.C4.. .
2402a3c8:	3447aeef b6146493 344b356a b607b13b     ..G4.d..j5K4;...
2402a3d8:	344e2744 b5f59d91 3450843f b5db8d0b     D'N4....?.P4....
2402a3e8:	34524c7d b5c1437b 34538092 b5a6d367     }LR4{C....S4g...
2402a3f8:	34542160 b58c4f39 34543038 b5639268     `!T49O..80T4h.c.
2402a408:	3453aed5 b52ea6b3 34529f3a b4f3fdc9     ..S4....:.R4....
2402a418:	345103d8 b48b7bdd 344edf76 b3903090     ..Q4.{..v.N4.0..
2402a428:	344c3522 34041cd7 34490852 34a69298     "5L4...4R.I4...4
2402a438:	34455cc2 3504a07b 34413677 3534ee18     .\E4{..5w6A4..45
2402a448:	343c99c8 3564148b 34378b4d 3588fbb0     ..<4..d5M.74...5
2402a458:	34320fdb 359f3daa 342c2c90 35b4c337     ..24.=.5.,,47..5
2402a468:	3425e6ba 35c98012 341f43df 35dd688c     ..%4...5.C.4.h.5
2402a478:	341849b7 35f071ca 3410fe2a 360148c7     .I.4.q.5*..4.H.6
2402a488:	34096738 3609df37 34018b1d 3611f7eb     8g.47..6...4...6
2402a498:	33f2e02c 36198eed 33e23934 3620a0b4     ,..3...649.3.. 6
2402a4a8:	33d12e31 36272a29 33bfcc42 362d2887     1..3)*'6B..3.(-6
2402a4b8:	33ae2098 3632998f 339c386c 36377b53     . .3..26l8.3S{76
2402a4c8:	338a20fe 363bcc5a 336fcf17 363f8b97     . .3Z.;6..o3..?6
2402a4d8:	334b327d 3642b85f 33268658 36455278     }2K3_.B6X.&3xRE6
2402a4e8:	3301e48d 36475a0a 32bacd6f 3648cfa6     ...3.ZG6o..2..H6
2402a4f8:	3264980e 3649b43f 31a9d96d 364a092a     ..d2?.I6m..1*.J6
2402a508:	b1641906 3649d025 b244e251 36490b43     ..d.%.I6Q.D.C.I6
2402a518:	b2a725c3 3647bcf6 b2ea744b 3645e80d     .%....G6Kt....E6
2402a528:	b31618d7 36438fab b3361a34 3640b742     ......C64.6.B.@6
2402a538:	b3552a58 363d629b b3733644 363995be     X*U..b=6D6s...96
2402a548:	b38815f4 3635550e b395fd18 3630a529     .....U56....).06
2402a558:	b3a34888 362b8ae4 b3aff0c2 36260b5c     .H....+6....\.&6
2402a568:	b3bbeed3 36202be6 b3c73c54 3619f205     .....+ 6T<.....6
2402a578:	b3d1d370 36136368 b3dbaeec 360c85f1     p...hc.6.......6
2402a588:	b3e4ca1b 36055fa2 b3ed20eb 35fbed32     ....._.6. ..2..5
2402a598:	b3f4afe4 35eca236 b3fb742c 35dceaed     ....6..5,t.....5
2402a5a8:	b400b5c8 35ccd43a b4034a2c 35bc6af5     ....:..5,J...j.5
2402a5b8:	b40576b8 35abbc1c b4073b40 359ad4b5     .v.....5@;.....5
2402a5c8:	b40897d3 3589c1bc b4098cc4 35712042     .......5....B q5
2402a5d8:	b40a1acc 354e998f b40a42d2 352c08db     ......N5.B....,5
2402a5e8:	b40a0619 35098755 b4096617 34ce5ba1     ....U..5.f...[.4
2402a5f8:	b408648f 348a295a b407038f 340d4f24     .d..Z).4....$O.4
2402a608:	b4054553 32009cdd b4032c68 b3f6453a     SE.....2h,..:E..
2402a618:	b400bb7f b47bde1c b3fbeb40 b4bce9de     ......{.@.......
2402a628:	b3f5bbca b4fa58cd b3eeef5f b51b0a52     .....X.._...R...
2402a638:	b3e78d25 b537fbf7 b3df9c89 b553ef88     %.....7.......S.
2402a648:	b3d72565 b56ed435 b3ce2fab b5844d15     e%..5.n../...M..
2402a658:	b3c4c3c9 b5909954 b3baea4e b59c47f7     ....T...N....G..
2402a668:	b3b0ac08 b5a752b5 b3a611f4 b5b1b3d9     .....R..........
2402a678:	b39b2535 b5bb662b b38fef13 b5c46518     5%..+f.......e..
2402a688:	b38478ef b5ccacad b371987a b5d4396a     .x......z.q.j9..
2402a698:	b359e4f6 b5db0896 b341ea5e b5e117e5     ..Y.....^.A.....
2402a6a8:	b329bbb3 b5e665c1 b3116be1 b5eaf124     ..)..e...k..$...
2402a6b8:	b2f21b6d b5eeb992 b2c167a0 b5f1bf2e     m........g......
2402a6c8:	b290e11a b5f402b1 b2415803 b5f58569     .........XA.i...
2402a6d8:	b1c3af36 b5f64917 af6196a5 b5f65022     6....I....a."P..
2402a6e8:	31b2b052 b5f59d6e 32348246 b5f43469     R..1n...F.42i4..
2402a6f8:	3286dc45 b5f218ff 32b25edf b5ef4f7b     E..2.....^.2{O..
2402a708:	32dcab8b b5ebdcd1 3302d31d b5e7c638     ...2.......38...
2402a718:	33169a1f b5e31165 33299e25 b5ddc475     ...3e...%.)3u...
2402a728:	333bd34b b5d7e5df 334d2e74 b5d17c68     K.;3....t.M3h|..
2402a738:	335da54c b5ca8f3c 336d2e55 b5c325ca     L.]3<...U.m3.%..
2402a748:	337bc0eb b5bb47c2 3384aaa2 b5b2fd1e     ..{3.G.....3....
2402a758:	338af23c b5aa4df9 3390b43c b5a142b6     <..3.M..<..3.B..
2402a768:	3395ee15 b597e3d1 339a9da6 b58e39f3     ...3.......3.9..
2402a778:	339ec147 b5844de3 33a257bf b57450cc     G..3.M...W.3.Pt.
2402a788:	33a5604d b55fa4c2 33a7da9c b54aa970     M`.3.._....3p.J.
2402a798:	33a9c6d1 b5357096 33ab2579 b5200be6     ...3.p5.y%.3.. .
2402a7a8:	33abf795 b50a8cf4 33ac3e91 b4ea0a42     ...3.....>.3B...
2402a7b8:	33abfc43 b4bf0b33 33ab32e5 b4943e78     C..33....2.3x>..
2402a7c8:	33a9e51d b4538a62 33a815e9 b3fefee3     ...3b.S....3....
2402a7d8:	33a5c8ad b3326c60 33a30122 331395e4     ...3`l2."..3...3
2402a7e8:	339fc359 33e98e4a 339c13b4 3442d0ff     Y..3J..3...3..B4
2402a7f8:	3397f6e3 3487663a 339371df 34ac42b1     ...3:f.4.q.3.B.4
2402a808:	338e89e3 34cfe529 3389446b 34f23645     ...3)..4kD.3E6.4
2402a818:	3383a72c 35099008 337b701b 35194709     ,..3...5.p{3.G.5
2402a828:	336efa53 352836af 3361f982 35365646     S.n3.6(5..a3FV65
2402a838:	33547a72 35439dec 33468a28 35500690     rzT3..C5(.F3..P5
2402a848:	333835db 355b89ee 33298aea 3566229c     .583..[5..)3."f5
2402a858:	331a96c1 356fcc08 330b66ea 35788277     ...3..o5.f.3w.x5
2402a868:	32f811c5 35802183 32d91449 358385d3     ...2.!.5I..2...5
2402a878:	32b9f02b 35866d94 329abff4 3588d892     +..2.m.5...2...5
2402a888:	32773bac 358ac70b 32394743 358c399d     .;w2...5CG92.9.5
2402a898:	31f7aa6f 358d3147 317c5c59 358daf72     o..1G1.5Y\|1r..5
2402a8a8:	2f4f46d1 358db5f1 b15e2794 358d46db     .FO/...5.'^..F.5
2402a8b8:	b1e2214e 358c64bc b2292ba2 358b1265     N!...d.5.+).e..5
2402a8c8:	b25fb11e 358952ff b28a3ca9 35872a0b     .._..R.5.<...*.5
2402a8d8:	b2a3af3f 35849b4f b2bc1e80 3581aad4     ?...O..5.......5
2402a8e8:	b2d379c7 357cb9db b2e9b187 35756c4f     .y....|5....Olu5
2402a8f8:	b2feb776 356d7693 b3093f39 3564e2a0     v....vm59?....d5
2402a908:	b3127d5d 355bbaca b31b10db 355209bc     ]}....[5......R5
2402a918:	b322f51c 3547da6a b32a2627 353d3808     ..".j.G5'&*..8=5
2402a928:	b330a0b9 35322dfb b3366231 3526c7d8     ..0..-251b6...&5
2402a938:	b33b689b 351b1150 b33fb2b9 350f1624     .h;.P..5..?.$..5
2402a948:	b3433fe9 3502e225 b3461038 34ed0245     .?C.%..58.F.E..4
2402a958:	b3482460 34d3fdb5 b3497db5 34bacdfe     `$H....4.}I....4
2402a968:	b34a1e34 34a18a3a b34a0875 3488492b     4.J.:..4u.J.+I.4
2402a978:	b3493fa7 345e426f b347c793 342c5084     .?I.oB^4..G..P,4
2402a988:	b345a489 33f5cecf b342db6f 33946113     ..E....3o.B..a.3
2402a998:	b33f71a4 32d2a105 b33b6d07 b2a43909     .q?....2.m;..9..
2402a9a8:	b336d3f5 b384783d b331ad2e b3dd4ecf     ..6.=x....1..N..
2402a9b8:	b32bffe1 b419a763 b325d398 b4431c49     ..+.c.....%.I.C.
2402a9c8:	b31f303c b46ae855 b3181dfa b48877e9     <0..U.j......w..
2402a9d8:	b310a54f b49a8c94 b308ceee b4aba673     O...........s...
2402a9e8:	b300a3bf b4bbbae9 b2f059b4 b4cac086     .........Y......
2402a9f8:	b2dee6f0 b4d8aef4 b2cd01cd b4e57f12     ................
2402aa08:	b2babd18 b4f12ae2 b2a82b99 b4fbad9c     .....*...+......
2402aa18:	b2956033 b50281d1 b2826daf b506953d     3`.......m..=...
2402aa28:	b25ecd57 b50a1072 b238bb45 b50cf360     W.^.r...E.8.`...
2402aa38:	b212c97f b50f3e85 b1da3766 b510f2f5     .....>..f7......
2402aa48:	b18fa971 b5121248 b10c5a09 b5129ea2     q...H....Z......
2402aa58:	2e7e00ff b5129aa9 31112416 b5120985     ..~......$.1....
2402aa68:	318d580c b510eed6 31d0139e b50f4ead     .X.1.......1.N..
2402aa78:	3208469e b50d2d93 32274837 b50a9072     .F.2.-..7H'2r...
2402aa88:	3244f5fa b5077c9a 326138fb b503f7b6     ..D2.|...8a2....
2402aa98:	327bfc0a b50007c6 328a95e0 b4f7662e     ..{2.......2.f..
2402aaa8:	32965b49 b4ee007a 32a1467c b4e3ec12     I[.2z...|F.2....
2402aab8:	32ab509e b4d93708 32b473d9 b4cdefcc     .P.2.7...s.2....
2402aac8:	32bcab53 b4c22516 32c3f33d b4b5e5e2     S..2.%..=..2....
2402aad8:	32ca48c7 b4a94156 32cfaa17 b49c46b5     .H.2VA.....2.F..
2402aae8:	32d41669 b48f054c 32d78dea b4818c6f     i..2L......2o...
2402aaf8:	32da11ca b467d6a6 32dba430 b44c6221     ...2..g.0..2!bL.
2402ab08:	32dc4831 b430d91b 32dc01d8 b41558e1     1H.2..0....2.X..
2402ab18:	32dad613 b3f3fc3b 32d8ca9e b3bdc98e     ...2;......2....
2402ab28:	32d5e624 b3885005 32d23008 b3278806     $..2.P...0.2..'.
2402ab38:	32cdb06d b2815f9f 32c8703b 320e212f     m..2._..;p.2/!.2
2402ab48:	32c278eb 3304c4c3 32bbd4ae 3362af1a     .x.2...3...2..b3
2402ab58:	32b48e32 339e7b18 32acb0a8 33c9a742     2..2.{.3...2B..3
2402ab68:	32a447bf 33f2b932 329b5f89 340cc889     .G.22..3._.2...4
2402ab78:	32920468 341f091a 3288431b 3430117d     h..2...4.C.2}.04
2402ab88:	327c5119 343fd68a 326783c4 344e4ecb     .Q|2..?4..g2.NN4
2402ab98:	325238c9 345b7256 323c8ac2 34673b03     .8R2Vr[4..<2.;g4
2402aba8:	3226948c 3471a449 321070c7 347aab59     ..&2I.q4.p.2Y.z4
2402abb8:	31f473bc 3481277c 31c813b2 348447ca     .s.1|'.4...1.G.4
2402abc8:	319bf49d 3486b79d 3160912c 348878bc     ...1...4,.`1.x.4
2402abd8:	310a80ce 34898dbe 30585a4f 3489f9ec     ...1...4OZX0...4
2402abe8:	afe29461 3489c148 b0d8c6c3 3488e880     a...H..4.......4
2402abf8:	b139c8ef 348774ef b1821a5f 34856c85     ..9..t.4_....l.4
2402ac08:	b1a5aea3 3482d5ca b1c77f03 347f6f9d     .......4.....o.4
2402ac18:	b1e76bf7 34783441 b202ac67 3470097a     .k..A4x4g...z.p4
2402ac28:	b21095e0 3467001b b21d6703 345d29a6     ......g4.g...)]4
2402ac38:	b22915fd 3452984c b2339a8b 34475e9d     ..).L.R4..3..^G4
2402ac48:	b23cee11 343b8fc1 b2450b7b 342f3f0b     ..<...;4{.E..?/4
2402ac58:	b24bef5d 34228014 b25197fe 34156691     ].K..."4..Q..f.4
2402ac68:	b2560526 3408063f b2593849 33f4e570     &.V.?..4I8Y.p..3
2402ac78:	b25b346f 33d97ee2 b25bfe16 33bdff27     o4[..~.3..[.'..3
2402ac88:	b25b9b4e 33a28bbd b25a1392 3387494b     N.[....3..Z.KI.3
2402ac98:	b2576fc4 3358b6a4 b253ba19 3323c81e     .oW...X3..S...#3
2402aca8:	b24efe15 32e01131 b249484e 3276da14     ..N.1..2NHI...v2
2402acb8:	b242a69d 3150cde0 b23b27a9 b206f432     ..B...P1.';.2...
2402acc8:	b232db3a b29ce7b6 b229d1cb b2f1d09e     :.2.......).....
2402acd8:	b2201c9f b320ef76 b215cd92 b34662d9     .. .v. ......bF.
2402ace8:	b20af70e b369209d b1ff57c5 b38485cb     ..... i..W......
2402acf8:	b1e7fe67 b39305b1 b1d008bd b3a0063d     g...........=...
2402ad08:	b1b79db9 b3ab8019 b19ee464 b3b56e5f     ........d..._n..
2402ad18:	b18603a1 b3bdce99 b15a4420 b3c4a0ba     ........ DZ.....
2402ad28:	b128cb83 b3c9e716 b0efcf8f b3cda654     ..(.........T...
2402ad38:	b08fc1cc b3cfe55b afc7dfdc b3d0ad3b     ....[.......;...
2402ad48:	2fa425c7 b3d00915 3080c457 b3ce0604     .%./....W..0....
2402ad58:	30d4c1f0 b3cab2fc 311249e5 b3c620ad     ...0.....I.1. ..
2402ad68:	3137e9ea b3c0615e 315b1284 b3b988c9     ..71^a....[1....
2402ad78:	317b9a1d b3b1abf8 318cae13 b3a8e118     ..{1.......1....
2402ad88:	319a1c99 b39f3f4f 31a60ba3 b394de94     ...1O?.....1....
2402ad98:	31b070fc b389d784 31b94528 b37c8664     .p.1....(E.1d.|.
2402ada8:	31c08384 b36475f3 31c62a43 b34bb0ab     ...1.ud.C*.1..K.
2402adb8:	31ca3a60 b332695f 31ccb79b b318d26a     `:.1_i2....1j...
2402adc8:	31cda876 b2fe3abb 31cd160f b2caf534     v..1.:.....14...
2402add8:	31cb0c1b b298322f 31c798c7 b24c97fc     ...1/2.....1..L.
2402ade8:	31c2cc8d b1d66366 31bcba22 b04d4a25     ...1fc.."..1%JM.
2402adf8:	31b5763a 319bccf6 31ad1770 32247233     :v.1...1p..13r$2
2402ae08:	31a3b601 32764d36 31996bae 32a18188     ...16Mv2.k.1...2
2402ae18:	318e5377 32c51664 31828967 32e5b8be     wS.1d..2g..1...2
2402ae28:	316c54ac 3301a1a8 3152a770 330ecc1f     .Tl1...3p.R1...3
2402ae38:	313846a5 331a508a 311d6e02 33242769     .F81.P.3.n.1i'$3
2402ae48:	31025900 332c4cfa 30ce849a 3332c120     .Y.1.L,3...0 .23
2402ae58:	3098c6c6 33378755 3047d005 333aa696     ...0U.73..G0..:3
2402ae68:	2fc14e57 333c2933 ad4818fa 333c1cb2     WN./3)<3..H...<3
2402ae78:	afc58b58 333a9199 b03d94a4 33379b47     X.....:3..=.G.73
2402ae88:	b0897393 33334faa b0b11316 332dc713     .s...O33......-3
2402ae98:	b0d5650d 33271be9 b0f62dca 331f6a7c     .e....'3.-..|j.3
2402aea8:	b1099d4d 3316d0a6 b11631c8 330d6d8b     M......3.1...m.3
2402aeb8:	b120c66f 33036123 b1295337 32f197e2     o. .#a.37S)....2
2402aec8:	b12fd540 32db9d38 b1344f15 32c51355     @./.8..2.O4.U..2
2402aed8:	b136c8f2 32ae3a38 b137507a 32975026     ..6.8:.2zP7.&P.2
2402aee8:	b135f844 3280911c b132d831 32546c2d     D.5....21.2.-lT2
2402aef8:	b12e0cc0 3228e8ff b127b6c5 31fdf69d     ......(2..'....1
2402af08:	b11ffb3a 31adf901 b1170288 3144ef7a     :......1....z.D1
2402af18:	b10cf83e 305fdce4 b1020a6a b0942665     >....._0j...e&..
2402af28:	b0ecd1f2 b1407c2c b0d48a4f b19560a7     ....,|@.O....`..
2402af38:	b0bba187 b1c44909 b0a27b00 b1ece7cb     .....I...{......
2402af48:	b0897889 b207a2f7 b061f10f b215c208     .x........a.....
2402af58:	b032a9bc b220eca3 b005c24c b22948c8     ..2... .L....H).
2402af68:	afb7a529 b22f05ef af558159 b2325bf2     )...../.Y.U..[2.
2402af78:	ae96e200 b23389be 2e360020 b232d3c0     ......3. .6...2.
2402af88:	2f145295 b2308274 2f68731a b22ce09e     .R./t.0..sh/..,.
2402af98:	2f94e105 b228399c 2fac4a82 b222d748     .../.9(..J./H.".
2402afa8:	2fbadd03 b21d0060 2fc139eb b216f690     .../`....9./....
2402afb8:	2fc03b77 b210f4b5 2fb8f017 b20b2d34     w;./......./4-..
2402afc8:	2fac949c b205c88e 2f9c8bdf b200e430     .../......./0...
2402afd8:	2f8a540f b1f9231e 2f6ef27b b1f1ab8a     .T./.#..{.n/....
2402afe8:	2f4b0acd b1eb5333 2f2bd8e1 b1e5f46d     ..K/3S....+/m...
2402aff8:	2f13eb9e b1e1550f 2f0542b6 b1dd2afb     .../.U...B./.*..
2402b008:	2f0111ed b1d9226b 2f0779db b1d4e69b     .../k"...y./....
2402b018:	2f173b32 b1d02cc2 2f2d3ef1 b1cac2cb     2;./.,...>-/....
2402b028:	2f44e786 b1c49b90 2f5c3202 b1bdb9fe     ..D/.....2\/....
2402b038:	2f72e932 b1b622b5 2f848411 b1adda74     2.r/."...../t...
2402b048:	2f8f40e5 b1a4e667 2f99a50f b19b4c14     .@./g....../.L..
2402b058:	2fa3aa9b b191116c 2fad4bcb b1863caf     .../l....K./.<..
2402b068:	2fb6832f b175a8f8 2fbf4b70 b15dbf8a     /../..u.pK./..].
2402b078:	2fc79fa7 b144cb96 2fcf7b17 b12adc31     .../..D..{./1.*.
2402b088:	2fd6d953 b1100106 2fddb655 b0e89479     S../....U../y...
2402b098:	2fe40e42 b0af90e7 2fe9ddba b06a32f2     B../......./.2j.
2402b0a8:	2fef219d afe54447 2fe54447 00000000     .!./GD..GD./....
	...

2402b0cc <sinTable_f32>:
2402b0cc:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
2402b0dc:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
2402b0ec:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
2402b0fc:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
2402b10c:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
2402b11c:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
2402b12c:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
2402b13c:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
2402b14c:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
2402b15c:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
2402b16c:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
2402b17c:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
2402b18c:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
2402b19c:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
2402b1ac:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
2402b1bc:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
2402b1cc:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
2402b1dc:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
2402b1ec:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
2402b1fc:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
2402b20c:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
2402b21c:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
2402b22c:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
2402b23c:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
2402b24c:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
2402b25c:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
2402b26c:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
2402b27c:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
2402b28c:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
2402b29c:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
2402b2ac:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
2402b2bc:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
2402b2cc:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
2402b2dc:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
2402b2ec:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
2402b2fc:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
2402b30c:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
2402b31c:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
2402b32c:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
2402b33c:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
2402b34c:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
2402b35c:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
2402b36c:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
2402b37c:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
2402b38c:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
2402b39c:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
2402b3ac:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
2402b3bc:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
2402b3cc:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
2402b3dc:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
2402b3ec:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
2402b3fc:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
2402b40c:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
2402b41c:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
2402b42c:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
2402b43c:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
2402b44c:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
2402b45c:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
2402b46c:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
2402b47c:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
2402b48c:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
2402b49c:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
2402b4ac:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
2402b4bc:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
2402b4cc:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
2402b4dc:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
2402b4ec:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
2402b4fc:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
2402b50c:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
2402b51c:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
2402b52c:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
2402b53c:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
2402b54c:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
2402b55c:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
2402b56c:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
2402b57c:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
2402b58c:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
2402b59c:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
2402b5ac:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
2402b5bc:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
2402b5cc:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
2402b5dc:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
2402b5ec:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
2402b5fc:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
2402b60c:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
2402b61c:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
2402b62c:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
2402b63c:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
2402b64c:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
2402b65c:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
2402b66c:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
2402b67c:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
2402b68c:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
2402b69c:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
2402b6ac:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
2402b6bc:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
2402b6cc:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
2402b6dc:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
2402b6ec:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
2402b6fc:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
2402b70c:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
2402b71c:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
2402b72c:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
2402b73c:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
2402b74c:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
2402b75c:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
2402b76c:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
2402b77c:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
2402b78c:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
2402b79c:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
2402b7ac:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
2402b7bc:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
2402b7cc:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
2402b7dc:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
2402b7ec:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
2402b7fc:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
2402b80c:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
2402b81c:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
2402b82c:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
2402b83c:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
2402b84c:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
2402b85c:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
2402b86c:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
2402b87c:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
2402b88c:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
2402b89c:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
2402b8ac:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
2402b8bc:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
2402b8cc:	80000000 33323130 37363534 62613938     ....0123456789ab
2402b8dc:	66656463 6a696867 6e6d6c6b 7271706f     cdefghijklmnopqr
2402b8ec:	76757473 7a797877 00000000              stuvwxyz....

2402b8f8 <__exp2f_data>:
2402b8f8:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
2402b908:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
2402b918:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
2402b928:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
2402b938:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
2402b948:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
2402b958:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
2402b968:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
2402b978:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
2402b988:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
2402b998:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
2402b9a8:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
2402b9b8:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
2402b9c8:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
2402b9d8:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
2402b9e8:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
2402b9f8:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
2402ba08:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
2402ba18:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
2402ba28:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
2402ba38:	ff0c52d6 3f962e42                       .R..B..?

2402ba40 <__logf_data>:
2402ba40:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
2402ba50:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
2402ba60:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
2402ba70:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
2402ba80:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
2402ba90:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
2402baa0:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
2402bab0:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
2402bac0:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
2402bad0:	00000000 3ff00000 00000000 00000000     .......?........
2402bae0:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
2402baf0:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
2402bb00:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
2402bb10:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
2402bb20:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
2402bb30:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
2402bb40:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
2402bb50:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

2402bb60 <__exp_data>:
2402bb60:	652b82fe 40671547 00000000 43380000     ..+eG.g@......8C
2402bb70:	fefa0000 bf762e42 bc9e3b3a bd0cf79a     ....B.v.:;......
2402bb80:	fffffdbd 3fdfffff 5555543c 3fc55555     .......?<TUUUU.?
2402bb90:	cf172b91 3fa55555 67a4d017 3f811111     .+..UU.?...g...?
2402bba0:	00000000 42c80000 fefa39ef 3fe62e42     .......B.9..B..?
2402bbb0:	ff82c424 3fcebfbd d70cf4b5 3fac6b08     $......?.....k.?
2402bbc0:	d24650cc 3f83b2ab 9b4e3a84 3f55d7e0     .PF....?.:N...U?
	...
2402bbdc:	3ff00000 1a88bf6e 3c9b3b4f a9fb3335     ...?n...O;.<53..
2402bbec:	3feff63d 9cd8dc5d bc716013 3e778061     =..?]....`q.a.w>
2402bbfc:	3fefec9a 108766d1 bc905e7a e86e7f85     ...?.f..z^....n.
2402bc0c:	3fefe315 3567f613 3c8cd252 d3158574     ...?..g5R..<t...
2402bc1c:	3fefd9b0 23f98efa bc8bce80 29ddf6de     ...?...#.......)
2402bc2c:	3fefd06b 61e6c861 3c60f74e 18759bc8     k..?a..aN.`<..u.
2402bc3c:	3fefc745 5b33d399 3c90a3e4 cac6f383     E..?..3[...<....
2402bc4c:	3fefbe3e 5d837b6d 3c979aa6 6cf9890f     >..?m{.]...<...l
2402bc5c:	3fefb558 92fdeffc 3c8eb51a 2b7247f7     X..?.......<.Gr+
2402bc6c:	3fefac92 702f9cd1 3c3ebe3d 32d3d1a2     ...?../p=.><...2
2402bc7c:	3fefa3ec 89906e0b bc6a0334 affed31b     ...?.n..4.j.....
2402bc8c:	3fef9b66 2a2fbd0e bc955652 d0125b51     f..?../*RV..Q[..
2402bc9c:	3fef9301 8c4eea55 bc5080ef c06c31cc     ...?U.N...P..1l.
2402bcac:	3fef8abd b9d5f416 bc91c923 aea92de0     ...?....#....-..
2402bcbc:	3fef829a e95c55af 3c80d3e3 c8a58e51     ...?.U\....<Q...
2402bccc:	3fef7a98 eaa59348 bc801b15 3c7d517b     .z.?H.......{Q}<
2402bcdc:	3fef72b8 55de323d bc8f1ff0 388c8dea     .r.?=2.U.......8
2402bcec:	3fef6af9 3f1353bf 3c8b898c eb6fcb75     .j.?.S.?...<u.o.
2402bcfc:	3fef635b 7611eb26 bc96d99c 84045cd4     [c.?&..v.....\..
2402bd0c:	3fef5be0 3e3a2f60 3c9aecf7 3168b9aa     .[.?`/:>...<..h1
2402bd1c:	3fef5487 cb86389d bc8fe782 22fcd91d     .T.?.8........."
2402bd2c:	3fef4d50 44a6c38d 3c8a6f41 88628cd6     PM.?...DAo.<..b.
2402bd3c:	3fef463b b0e4047d 3c807a05 917ddc96     ;F.?}....z.<..}.
2402bd4c:	3fef3f49 e3a8a894 3c968efd 6e756238     I?.?.......<8bun
2402bd5c:	3fef387a f274487d 3c875e18 4fb2a63f     z8.?}Ht..^.<?..O
2402bd6c:	3fef31ce 981fe7f2 3c80472b 65e27cdd     .1.?....+G.<.|.e
2402bd7c:	3fef2b45 3f71085e bc96b87b e1f56381     E+.?^.q?{....c..
2402bd8c:	3fef24df 6d09ab31 3c82f7e1 f51fdee1     .$.?1..m...<....
2402bd9c:	3fef1e9d 1a6fbffa bc3d219b d0dad990     ...?..o..!=.....
2402bdac:	3fef187f 720c0ab4 3c8b3782 a6e4030b     ...?...r.7.<....
2402bdbc:	3fef1285 89cecb8f 3c6e1492 a93e2f56     ...?......n<V/>.
2402bdcc:	3fef0caf 4db0abb6 3c834d75 0a31b715     ...?...MuM.<..1.
2402bddc:	3fef06fe e2ac744c 3c864201 fc4cd831     ...?Lt...B.<1.L.
2402bdec:	3fef0170 5dd3f84a 3c8fdd39 b26416ff     p..?J..]9..<..d.
2402bdfc:	3feefc08 3b8e5b04 bc86a380 5f929ff1     ...?.[.;......._
2402be0c:	3feef6c5 cc4b5068 bc924aed 373aa9cb     ...?hPK..J....:7
2402be1c:	3feef1a7 1b512d8e bc9907f8 6d05d866     ...?.-Q.....f..m
2402be2c:	3feeecae 3e9436d2 bc71d1e8 34e59ff7     ...?.6.>..q....4
2402be3c:	3feee7db b3ce1b15 bc991919 c313a8e5     ...?............
2402be4c:	3feee32d a72a4c6d 3c859f48 4c123422     -..?mL*.H..<"4.L
2402be5c:	3feedea6 7a28698a bc931260 04ac801c     ...?.i(z`.......
2402be6c:	3feeda45 4817895b bc58a78f 21f72e2a     E..?[..H..X.*..!
2402be7c:	3feed60a 67499a1b bc7c2c9b d950a897     ...?..Ig.,|...P.
2402be8c:	3feed1f5 60c2ac11 3c4363ed 6061892d     ...?...`.cC<-.a`
2402be9c:	3feece08 3b0664ef 3c966609 ed1d0057     ...?.d.;.f.<W...
2402beac:	3feeca41 daa10379 3c6ecce1 b5c13cd0     A..?y.....n<.<..
2402bebc:	3feec6a2 3f0f1230 3c93ff8e f0d7d3de     ...?0..?...<....
2402becc:	3feec32a bb7aafb0 3c7690ce d5362a27     *..?..z...v<'*6.
2402bedc:	3feebfda eb54e077 3c931dbd 99fddd0d     ...?w.T....<....
2402beec:	3feebcb2 0071a38e bc8f9434 769d2ca7     ...?..q.4....,.v
2402befc:	3feeb9b2 dc93a349 bc87decc a2cf6642     ...?I.......Bf..
2402bf0c:	3feeb6da bd0f385f bc78dec6 569d4f82     ...?_8....x..O.V
2402bf1c:	3feeb42b ec7b5cf6 bc861246 ca5d920f     +..?.\{.F.....].
2402bf2c:	3feeb1a4 18fdd78e 3c933505 36b527da     ...?.....5.<.'.6
2402bf3c:	3feeaf47 2f8a9b05 3c7b98b7 d497c7fd     G..?.../..{<....
2402bf4c:	3feead12 e21c5409 3c9063e1 dd485429     ...?.T...c.<)TH.
2402bf5c:	3feeab07 5019c6ea 3c34c785 8a5946b7     ...?...P..4<.FY.
2402bf6c:	3feea926 2b64c035 3c9432e6 15ad2148     &..?5.d+.2.<H!..
2402bf7c:	3feea76f 6199769f bc8ce44a b976dc09     o..?.v.aJ.....v.
2402bf8c:	3feea5e1 3bef4da8 bc8c33c5 b03a5585     ...?.M.;.3...U:.
2402bf9c:	3feea47e 892be9ae bc845378 34ccc320     ~..?..+.xS.. ..4
2402bfac:	3feea346 78565858 bc93cedd 82552225     F..?XXVx....%"U.
2402bfbc:	3feea238 807e1964 3c5710aa d44ca973     8..?d.~...W<s.L.
2402bfcc:	3feea155 bf5e2228 bc93b3ef 667f3bcd     U..?("^......;.f
2402bfdc:	3feea09e 8734b982 bc6a12ad 750bdabf     ...?..4...j....u
2402bfec:	3feea012 b86da9ee bc6367ef 3c651a2f     ...?..m..gc./.e<
2402bffc:	3fee9fb2 54e08851 bc80dc3d f9519484     ...?Q..T=.....Q.
2402c00c:	3fee9f7d 7e5a3ecf bc781f64 e8ec5f74     }..?.>Z~d.x.t_..
2402c01c:	3fee9f75 c08b7db0 bc86ee4a 48a58174     u..?.}..J...t..H
2402c02c:	3fee9f9a 1e55e68a bc861932 564267c9     ...?..U.2....gBV
2402c03c:	3fee9feb 5e09d4d3 3c909ccb 4fde5d3f     ...?...^...<?].O
2402c04c:	3feea069 b94da51d bc7b32dc 73eb0187     i..?..M..2{....s
2402c05c:	3feea114 5467c06b 3c94ecfd 0130c132     ...?k.gT...<2.0.
2402c06c:	3feea1ed abd66c55 3c65ebe1 36cf4e62     ...?Ul....e<bN.6
2402c07c:	3feea2f3 2fb3cf42 bc88a1c5 543e1a12     ...?B../......>T
2402c08c:	3feea427 f13b3734 bc9369b6 994cce13     '..?47;..i....L.
2402c09c:	3feea589 3a19ff1e bc805e84 4623c7ad     ...?...:.^....#F
2402c0ac:	3feea71a d872576e bc94d450 9b4492ed     ...?nWr.P.....D.
2402c0bc:	3feea8d9 5b0e8a00 3c90ad67 d98a6699     ...?...[g..<.f..
2402c0cc:	3feeaac7 c1f0eab4 3c8db72f 422aa0db     ...?..../..<..*B
2402c0dc:	3feeace5 9cc5e7ff bc65b660 16b5448c     ...?....`.e..D..
2402c0ec:	3feeaf32 59f35f44 3c7bf683 99157736     2..?D_.Y..{<6w..
2402c0fc:	3feeb1ae a71e3d83 bc93091f 0b91ffc6     ...?.=..........
2402c10c:	3feeb45b 8b6c1e29 bc5da9b8 b0cdc5e5     [..?).l...].....
2402c11c:	3feeb737 7c90b959 bc6c23f9 cbc8520f     7..?Y..|.#l..R..
2402c12c:	3feeba44 22f4f9aa bc924343 9fde4e50     D..?..."CC..PN..
2402c13c:	3feebd82 d7668e4b bc85ca6c 70ca07ba     ...?K.f.l......p
2402c14c:	3feec0f1 2b91ce27 3c71affc 82a3f090     ...?'..+..q<....
2402c15c:	3feec491 e10a73bb 3c6dd235 19e32323     ...?.s..5.m<##..
2402c16c:	3feec863 22622263 bc87c504 7b5de565     c..?c"b"....e.]{
2402c17c:	3feecc66 e3e231d5 3c8b1c86 ec4a2d33     f..?.1.....<3-J.
2402c18c:	3feed09b d3bcbb15 bc91bbd1 b23e255d     ...?........]%>.
2402c19c:	3feed503 9cee31d2 3c90cc31 1330b358     ...?.1..1..<X.0.
2402c1ac:	3feed99e 6e735ab3 3c846984 5579fdbf     ...?.Zsn.i.<..yU
2402c1bc:	3feede6b 978e9db4 bc82dfcd bfd3f37a     k..?........z...
2402c1cc:	3feee36b 92cb3387 3c8c1a77 995ad3ad     k..?.3..w..<..Z.
2402c1dc:	3feee89f 4ad1d9fa bc907b8f 298db666     ...?...J.{..f..)
2402c1ec:	3feeee07 56dcaeba bc55c3d9 b84f15fb     ...?...V..U...O.
2402c1fc:	3feef3a2 3da6f640 bc90a40e 8de5593a     ...?@..=....:Y..
2402c20c:	3feef972 38ad9334 bc68d6f4 f2fb5e47     r..?4..8..h.G^..
2402c21c:	3feeff76 6b588a35 bc91eee2 30a1064a     v..?5.Xk....J..0
2402c22c:	3fef05b0 0a5fddcd 3c74ffd7 904bc1d2     ...?.._...t<..K.
2402c23c:	3fef0c1e fa9298ac bc91bdfb 5bd71e09     ...?...........[
2402c24c:	3fef12c2 30af0cb3 3c736eae dd85529c     ...?...0.ns<.R..
2402c25c:	3fef199b 5c9ffd94 3c8ee332 5fffd07a     ...?...\2..<z.._
2402c26c:	3fef20ab d10959ac 3c84e08f 2e57d14b     . .?.Y.....<K.W.
2402c27c:	3fef27f1 384e1a67 3c63cdaf 9406e7b5     .'.?g.N8..c<....
2402c28c:	3fef2f6d 6c921968 3c676b2c dcef9069     m/.?h..l,kg<i...
2402c29c:	3fef3720 83ccb5d2 bc808a18 555dc3fa      7.?..........]U
2402c2ac:	3fef3f0b 3ffffa6f bc8fad5d 4a07897c     .?.?o..?]...|..J
2402c2bc:	3fef472d 3875a949 bc900dae 080d89f2     -G.?I.u8........
2402c2cc:	3fef4f87 a63d07a7 3c74a385 dcfba487     .O.?..=...t<....
2402c2dc:	3fef5818 2040220f bc82919e 16c98398     .X.?."@ ........
2402c2ec:	3fef60e3 d5c192ac 3c8e5a50 03db3285     .`.?....PZ.<.2..
2402c2fc:	3fef69e6 ac016b4b 3c843a59 f301b460     .i.?Kk..Y:.<`...
2402c30c:	3fef7321 07b43e1f bc82d521 337b9b5f     !s.?.>..!..._.{3
2402c31c:	3fef7c97 3b470dc9 bc892ab9 14f5a129     .|.?..G;.*..)...
2402c32c:	3fef8646 603a88d3 3c74b604 e78b3ff6     F..?..:`..t<.?..
2402c33c:	3fef902e 519d7271 3c83c5ec fbc74c83     ...?qr.Q...<.L..
2402c34c:	3fef9a51 8fd391f0 bc8ff712 a2a490da     Q..?............
2402c35c:	3fefa4af e223747d bc8dae98 2d8e67f1     ...?}t#......g.-
2402c36c:	3fefaf48 41aa2008 3c8ec3bc ee615a27     H..?. .A...<'Za.
2402c37c:	3fefba1b c3a9eb32 3c842b94 376bba97     ...?2....+.<..k7
2402c38c:	3fefc52b 31d185ee 3c8a64a9 5b6e4540     +..?...1.d.<@En[
2402c39c:	3fefd076 e43be3ed bc8e37ba ad9cbe14     v..?..;..7......
2402c3ac:	3fefdbfd 4d91cd9d 3c77893b 819e90d8     ...?...M;.w<....
2402c3bc:	3fefe7c1 4160cc89 3c5305c1 2b8f71f1     ...?..`A..S<.q.+
2402c3cc:	3feff3c2                                ...?

2402c3d0 <__inv_pio4>:
2402c3d0:	000000a2 0000a2f9 00a2f983 a2f9836e     ............n...
2402c3e0:	f9836e4e 836e4e44 6e4e4415 4e441529     Nn..DNn..DNn).DN
2402c3f0:	441529fc 1529fc27 29fc2757 fc2757d1     .).D'.).W'.).W'.
2402c400:	2757d1f5 57d1f534 d1f534dd f534ddc0     ..W'4..W.4....4.
2402c410:	34ddc0db ddc0db62 c0db6295 db629599     ...4b....b....b.
2402c420:	6295993c 95993c43 993c4390 3c439041     <..bC<...C<.A.C<

2402c430 <__sincosf_table>:
2402c430:	00000000 3ff00000 00000000 bff00000     .......?........
2402c440:	00000000 bff00000 00000000 3ff00000     ...............?
2402c450:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
2402c460:	00000000 3ff00000 fd0c621c bfdfffff     .......?.b......
2402c470:	e1068f19 3fa55553 e89a359d bf56c087     ....SU.?.5....V.
2402c480:	027bf8c3 3ef99343 5995a603 bfc55554     ..{.C..>...YTU..
2402c490:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).
2402c4a0:	00000000 3ff00000 00000000 bff00000     .......?........
2402c4b0:	00000000 bff00000 00000000 3ff00000     ...............?
2402c4c0:	6dc9c883 41645f30 54442d18 3ff921fb     ...m0_dA.-DT.!.?
2402c4d0:	00000000 bff00000 fd0c621c 3fdfffff     .........b.....?
2402c4e0:	e1068f19 bfa55553 e89a359d 3f56c087     ....SU...5....V?
2402c4f0:	027bf8c3 bef99343 5995a603 bfc55554     ..{.C......YTU..
2402c500:	05230bc4 3f811076 3774cf24 bf2994eb     ..#.v..?$.t7..).

2402c510 <TWO23>:
2402c510:	4b000000 cb000000                       ...K....

2402c518 <npio2_hw>:
2402c518:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
2402c528:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
2402c538:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
2402c548:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
2402c558:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
2402c568:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
2402c578:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
2402c588:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

2402c598 <two_over_pi>:
2402c598:	000000a2 000000f9 00000083 0000006e     ............n...
2402c5a8:	0000004e 00000044 00000015 00000029     N...D.......)...
2402c5b8:	000000fc 00000027 00000057 000000d1     ....'...W.......
2402c5c8:	000000f5 00000034 000000dd 000000c0     ....4...........
2402c5d8:	000000db 00000062 00000095 00000099     ....b...........
2402c5e8:	0000003c 00000043 00000090 00000041     <...C.......A...
2402c5f8:	000000fe 00000051 00000063 000000ab     ....Q...c.......
2402c608:	000000de 000000bb 000000c5 00000061     ............a...
2402c618:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
2402c628:	00000042 0000004d 000000d2 000000e0     B...M...........
2402c638:	00000006 00000049 0000002e 000000ea     ....I...........
2402c648:	00000009 000000d1 00000092 0000001c     ................
2402c658:	000000fe 0000001d 000000eb 0000001c     ................
2402c668:	000000b1 00000029 000000a7 0000003e     ....).......>...
2402c678:	000000e8 00000082 00000035 000000f5     ........5.......
2402c688:	0000002e 000000bb 00000044 00000084     ........D.......
2402c698:	000000e9 0000009c 00000070 00000026     ........p...&...
2402c6a8:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
2402c6b8:	00000039 00000091 000000d6 00000039     9...........9...
2402c6c8:	00000083 00000053 00000039 000000f4     ....S...9.......
2402c6d8:	0000009c 00000084 0000005f 0000008b     ........_.......
2402c6e8:	000000bd 000000f9 00000028 0000003b     ........(...;...
2402c6f8:	0000001f 000000f8 00000097 000000ff     ................
2402c708:	000000de 00000005 00000098 0000000f     ................
2402c718:	000000ef 0000002f 00000011 0000008b     ..../...........
2402c728:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
2402c738:	0000006d 00000036 0000007e 000000cf     m...6...~.......
2402c748:	00000027 000000cb 00000009 000000b7     '...............
2402c758:	0000004f 00000046 0000003f 00000066     O...F...?...f...
2402c768:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
2402c778:	00000075 00000027 000000ba 000000c7     u...'...........
2402c788:	000000eb 000000e5 000000f1 0000007b     ............{...
2402c798:	0000003d 00000007 00000039 000000f7     =.......9.......
2402c7a8:	0000008a 00000052 00000092 000000ea     ....R...........
2402c7b8:	0000006b 000000fb 0000005f 000000b1     k......._.......
2402c7c8:	0000001f 0000008d 0000005d 00000008     ........].......
2402c7d8:	00000056 00000003 00000030 00000046     V.......0...F...
2402c7e8:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
2402c7f8:	000000f0 000000cf 000000bc 00000020     ............ ...
2402c808:	0000009a 000000f4 00000036 0000001d     ........6.......
2402c818:	000000a9 000000e3 00000091 00000061     ............a...
2402c828:	0000005e 000000e6 0000001b 00000008     ^...............
2402c838:	00000065 00000099 00000085 0000005f     e..........._...
2402c848:	00000014 000000a0 00000068 00000040     ........h...@...
2402c858:	0000008d 000000ff 000000d8 00000080     ................
2402c868:	0000004d 00000073 00000027 00000031     M...s...'...1...
2402c878:	00000006 00000006 00000015 00000056     ............V...
2402c888:	000000ca 00000073 000000a8 000000c9     ....s...........
2402c898:	00000060 000000e2 0000007b 000000c0     `.......{.......
2402c8a8:	0000008c 0000006b                       ....k...

2402c8b0 <npio2_hw>:
2402c8b0:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
2402c8c0:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
2402c8d0:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
2402c8e0:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
2402c8f0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
2402c900:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
2402c910:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
2402c920:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

2402c930 <two_over_pi>:
2402c930:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
2402c940:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
2402c950:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
2402c960:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
2402c970:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
2402c980:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
2402c990:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
2402c9a0:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
2402c9b0:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
2402c9c0:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
2402c9d0:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
2402c9e0:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
2402c9f0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
2402ca00:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
2402ca10:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
2402ca20:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
2402ca30:	0060e27b 00c08c6b                       {.`.k...

2402ca38 <__powf_log2_data>:
2402ca38:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
2402ca48:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
2402ca58:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
2402ca68:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
2402ca78:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
2402ca88:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
2402ca98:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
2402caa8:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
2402cab8:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
2402cac8:	00000000 3ff00000 00000000 00000000     .......?........
2402cad8:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
2402cae8:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
2402caf8:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
2402cb08:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
2402cb18:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
2402cb28:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
2402cb38:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
2402cb48:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
2402cb58:	652ab82b 3ff71547                       +.*eG..?

2402cb60 <PIo2>:
2402cb60:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
2402cb70:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
2402cb80:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
2402cb90:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

2402cba0 <init_jk>:
2402cba0:	00000002 00000003 00000004 00000006     ................

2402cbb0 <PIo2>:
2402cbb0:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
2402cbc0:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
2402cbd0:	1fc40000 1bc60000 17440000              ..........D.

2402cbdc <init_jk>:
2402cbdc:	00000004 00000007 00000009              ............

2402cbe8 <_init>:
2402cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2402cbea:	bf00      	nop
2402cbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
2402cbee:	bc08      	pop	{r3}
2402cbf0:	469e      	mov	lr, r3
2402cbf2:	4770      	bx	lr

2402cbf4 <_fini>:
2402cbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2402cbf6:	bf00      	nop
2402cbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
2402cbfa:	bc08      	pop	{r3}
2402cbfc:	469e      	mov	lr, r3
2402cbfe:	4770      	bx	lr

2402cc00 <__tExpSmooth_tick_veneer>:
2402cc00:	f85f f000 	ldr.w	pc, [pc]	; 2402cc04 <__tExpSmooth_tick_veneer+0x4>
2402cc04:	000083e1 	.word	0x000083e1

2402cc08 <__tADSRT_setLeakFactor_veneer>:
2402cc08:	f85f f000 	ldr.w	pc, [pc]	; 2402cc0c <__tADSRT_setLeakFactor_veneer+0x4>
2402cc0c:	00008501 	.word	0x00008501

2402cc10 <__parsePreset_veneer>:
2402cc10:	f85f f000 	ldr.w	pc, [pc]	; 2402cc14 <__parsePreset_veneer+0x4>
2402cc14:	000055c1 	.word	0x000055c1

2402cc18 <__HAL_I2C_ErrorCallback_veneer>:
2402cc18:	f85f f000 	ldr.w	pc, [pc]	; 2402cc1c <__HAL_I2C_ErrorCallback_veneer+0x4>
2402cc1c:	00007e61 	.word	0x00007e61

2402cc20 <__HAL_SAI_TxCpltCallback_veneer>:
2402cc20:	f85f f000 	ldr.w	pc, [pc]	; 2402cc24 <__HAL_SAI_TxCpltCallback_veneer+0x4>
2402cc24:	00004f81 	.word	0x00004f81

2402cc28 <__HAL_SAI_ErrorCallback_veneer>:
2402cc28:	f85f f000 	ldr.w	pc, [pc]	; 2402cc2c <__HAL_SAI_ErrorCallback_veneer+0x4>
2402cc2c:	00005241 	.word	0x00005241

2402cc30 <__HAL_SAI_TxHalfCpltCallback_veneer>:
2402cc30:	f85f f000 	ldr.w	pc, [pc]	; 2402cc34 <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
2402cc34:	000050e1 	.word	0x000050e1

2402cc38 <__tExpSmooth_setDest_veneer>:
2402cc38:	f85f f000 	ldr.w	pc, [pc]	; 2402cc3c <__tExpSmooth_setDest_veneer+0x4>
2402cc3c:	00008401 	.word	0x00008401

2402cc40 <__randomNumber_veneer>:
2402cc40:	f85f f000 	ldr.w	pc, [pc]	; 2402cc44 <__randomNumber_veneer+0x4>
2402cc44:	00005561 	.word	0x00005561

2402cc48 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
2402cc48:	f85f f000 	ldr.w	pc, [pc]	; 2402cc4c <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
2402cc4c:	00007e21 	.word	0x00007e21

2402cc50 <__LEAF_clip_veneer>:
2402cc50:	f85f f000 	ldr.w	pc, [pc]	; 2402cc54 <__LEAF_clip_veneer+0x4>
2402cc54:	00008be1 	.word	0x00008be1

2402cc58 <__HAL_SPI_TxRxCpltCallback_veneer>:
2402cc58:	f85f f000 	ldr.w	pc, [pc]	; 2402cc5c <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
2402cc5c:	00007ea1 	.word	0x00007ea1

2402cc60 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
2402cc60:	f85f f000 	ldr.w	pc, [pc]	; 2402cc64 <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
2402cc64:	00008141 	.word	0x00008141

Disassembly of section .itcmram:

00000400 <map>:
}
     400:	ee70 7a60 	vsub.f32	s15, s0, s1
     404:	ee31 1a60 	vsub.f32	s2, s2, s1
     408:	ee32 2a61 	vsub.f32	s4, s4, s3
     40c:	ee87 7a81 	vdiv.f32	s14, s15, s2
    __HAL_DMA_ENABLE(hdma);
     410:	eee2 1a07 	vfma.f32	s3, s4, s14
     414:	eeb0 0a61 	vmov.f32	s0, s3
     418:	4770      	bx	lr
     41a:	bf00      	nop
     41c:	f3af 8000 	nop.w

00000420 <pickupNonLinearity>:
     420:	ee70 7a00 	vadd.f32	s15, s0, s0
     424:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 460 <pickupNonLinearity+0x40>
     428:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 464 <pickupNonLinearity+0x44>
     42c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 468 <pickupNonLinearity+0x48>
     430:	ee67 5aa7 	vmul.f32	s11, s15, s15
     434:	eddf 4a0d 	vldr	s9, [pc, #52]	; 46c <pickupNonLinearity+0x4c>
     438:	eea7 6a85 	vfma.f32	s12, s15, s10
     43c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 470 <pickupNonLinearity+0x50>
     440:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 474 <pickupNonLinearity+0x54>
     444:	ee25 5aa7 	vmul.f32	s10, s11, s15
     448:	ee25 7a07 	vmul.f32	s14, s10, s14
     44c:	eee5 6a06 	vfma.f32	s13, s10, s12
     450:	eea5 7aa4 	vfma.f32	s14, s11, s9
     454:	eea7 7aa6 	vfma.f32	s14, s15, s13
     458:	ee27 0a00 	vmul.f32	s0, s14, s0
     45c:	4770      	bx	lr
     45e:	bf00      	nop
     460:	3a59d777 	.word	0x3a59d777
     464:	39f9096c 	.word	0x39f9096c
     468:	3b0a47ed 	.word	0x3b0a47ed
     46c:	3bdd2f1b 	.word	0x3bdd2f1b
     470:	3d99999a 	.word	0x3d99999a
     474:	408bbced 	.word	0x408bbced
     478:	f3af 8000 	nop.w
     47c:	f3af 8000 	nop.w

00000480 <mtofTableLookup>:
     480:	eef0 0a40 	vmov.f32	s1, s0
     484:	ed9f 1a16 	vldr	s2, [pc, #88]	; 4e0 <mtofTableLookup+0x60>
     488:	ed9f 0a16 	vldr	s0, [pc, #88]	; 4e4 <mtofTableLookup+0x64>
     48c:	b508      	push	{r3, lr}
     48e:	f008 fba7 	bl	8be0 <LEAF_clip>
     492:	eddf 6a15 	vldr	s13, [pc, #84]	; 4e8 <mtofTableLookup+0x68>
     496:	eddf 7a15 	vldr	s15, [pc, #84]	; 4ec <mtofTableLookup+0x6c>
     49a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     49e:	4a14      	ldr	r2, [pc, #80]	; (4f0 <mtofTableLookup+0x70>)
     4a0:	eee0 7a26 	vfma.f32	s15, s0, s13
     4a4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
     4a8:	ee37 7a67 	vsub.f32	s14, s14, s15
     4ac:	ee16 3a90 	vmov	r3, s13
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
     4b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    return HAL_ERROR;
     4b4:	1c59      	adds	r1, r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
     4b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4ba:	ee37 0ae6 	vsub.f32	s0, s15, s13
     4be:	f3c1 010e 	ubfx	r1, r1, #0, #15
     4c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
}
     4c6:	ee37 7a26 	vadd.f32	s14, s14, s13
    __HAL_DMA_ENABLE(hdma);
     4ca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
     4ce:	edd3 7a00 	vldr	s15, [r3]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
     4d2:	edd2 6a00 	vldr	s13, [r2]
     4d6:	ee20 0a26 	vmul.f32	s0, s0, s13
     4da:	eea7 0a27 	vfma.f32	s0, s14, s15
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
     4de:	bd08      	pop	{r3, pc}
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     4e0:	43230000 	.word	0x43230000
     4e4:	c3230000 	.word	0xc3230000
     4e8:	42c80000 	.word	0x42c80000
     4ec:	46800000 	.word	0x46800000
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
     4f0:	30012000 	.word	0x30012000
     4f4:	f3af 8000 	nop.w
     4f8:	f3af 8000 	nop.w
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4fc:	f3af 8000 	nop.w

00000500 <updateStateFromSPIMessage>:
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
     500:	4a3a      	ldr	r2, [pc, #232]	; (5ec <updateStateFromSPIMessage+0xec>)
     502:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
     506:	1813      	adds	r3, r2, r0
     508:	b4f0      	push	{r4, r5, r6, r7}
     50a:	7e19      	ldrb	r1, [r3, #24]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     50c:	7e5e      	ldrb	r6, [r3, #25]
     50e:	f001 030f 	and.w	r3, r1, #15
     512:	4c37      	ldr	r4, [pc, #220]	; (5f0 <updateStateFromSPIMessage+0xf0>)
     514:	4d37      	ldr	r5, [pc, #220]	; (5f4 <updateStateFromSPIMessage+0xf4>)
     516:	3b05      	subs	r3, #5
     518:	4f37      	ldr	r7, [pc, #220]	; (5f8 <updateStateFromSPIMessage+0xf8>)
     51a:	ee07 3a90 	vmov	s15, r3
     51e:	f3c1 1380 	ubfx	r3, r1, #6, #1
     522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     526:	7023      	strb	r3, [r4, #0]
     528:	602e      	str	r6, [r5, #0]
     52a:	f3c1 1540 	ubfx	r5, r1, #5, #1
     52e:	7823      	ldrb	r3, [r4, #0]
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     530:	f3c1 1100 	ubfx	r1, r1, #4, #1
     534:	4c31      	ldr	r4, [pc, #196]	; (5fc <updateStateFromSPIMessage+0xfc>)
     536:	ee67 7a87 	vmul.f32	s15, s15, s14
     53a:	6025      	str	r5, [r4, #0]
     53c:	4c30      	ldr	r4, [pc, #192]	; (600 <updateStateFromSPIMessage+0x100>)
     53e:	edc7 7a00 	vstr	s15, [r7]
     542:	6021      	str	r1, [r4, #0]
     544:	b14b      	cbz	r3, 55a <updateStateFromSPIMessage+0x5a>
     546:	4b2f      	ldr	r3, [pc, #188]	; (604 <updateStateFromSPIMessage+0x104>)
     548:	781b      	ldrb	r3, [r3, #0]
     54a:	b133      	cbz	r3, 55a <updateStateFromSPIMessage+0x5a>
     54c:	492e      	ldr	r1, [pc, #184]	; (608 <updateStateFromSPIMessage+0x108>)
     54e:	2b01      	cmp	r3, #1
     550:	edc1 7a00 	vstr	s15, [r1]
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     554:	bf18      	it	ne
     556:	edc1 7a01 	vstrne	s15, [r1, #4]
     55a:	4410      	add	r0, r2
     55c:	4c2b      	ldr	r4, [pc, #172]	; (60c <updateStateFromSPIMessage+0x10c>)
     55e:	4a2c      	ldr	r2, [pc, #176]	; (610 <updateStateFromSPIMessage+0x110>)
     560:	7e81      	ldrb	r1, [r0, #26]
     562:	7ec3      	ldrb	r3, [r0, #27]
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
     564:	eddf 7a2b 	vldr	s15, [pc, #172]	; 614 <updateStateFromSPIMessage+0x114>
     568:	eb03 2301 	add.w	r3, r3, r1, lsl #8
     56c:	7f01      	ldrb	r1, [r0, #28]
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
     56e:	7f40      	ldrb	r0, [r0, #29]
        __HAL_UNLOCK(hdma);
     570:	b29b      	uxth	r3, r3
     572:	4d29      	ldr	r5, [pc, #164]	; (618 <updateStateFromSPIMessage+0x118>)
        hdma->State = HAL_DMA_STATE_READY;
     574:	eb00 2001 	add.w	r0, r0, r1, lsl #8
        return HAL_ERROR;
     578:	4928      	ldr	r1, [pc, #160]	; (61c <updateStateFromSPIMessage+0x11c>)
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
     57a:	8023      	strh	r3, [r4, #0]
     57c:	8823      	ldrh	r3, [r4, #0]
     57e:	b29b      	uxth	r3, r3
     580:	ee00 3a10 	vmov	s0, r3
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
     584:	7813      	ldrb	r3, [r2, #0]
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
     586:	b2db      	uxtb	r3, r3
     588:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
     58c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
     590:	7813      	ldrb	r3, [r2, #0]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
     592:	ee20 0a27 	vmul.f32	s0, s0, s15
     596:	4822      	ldr	r0, [pc, #136]	; (620 <updateStateFromSPIMessage+0x120>)
     598:	b2db      	uxtb	r3, r3
     59a:	ed85 0a00 	vstr	s0, [r5]
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     59e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
     5a2:	7813      	ldrb	r3, [r2, #0]
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
     5a4:	b2db      	uxtb	r3, r3
     5a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
     5aa:	429c      	cmp	r4, r3
     5ac:	d01a      	beq.n	5e4 <updateStateFromSPIMessage+0xe4>
     5ae:	7814      	ldrb	r4, [r2, #0]
     5b0:	7813      	ldrb	r3, [r2, #0]
     5b2:	b2e2      	uxtb	r2, r4
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
     5b4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 624 <updateStateFromSPIMessage+0x124>
     5b8:	b2db      	uxtb	r3, r3
     5ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
     5be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  return status;
     5c2:	ed91 7a00 	vldr	s14, [r1]
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c6:	edd1 7a01 	vldr	s15, [r1, #4]
     5ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14

static inline void sub_collector_save(_sub_collector* collector, _auto_correlation_info info)
{
    collector->_fundamental = info;
    collector->_fundamental._harmonic = 1;
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     5ce:	4b16      	ldr	r3, [pc, #88]	; (628 <updateStateFromSPIMessage+0x128>)
     5d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
	if (i < 0) return;
     5d4:	ee27 7a26 	vmul.f32	s14, s14, s13
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
     5d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (i < 0) return;
     5dc:	ed83 7a00 	vstr	s14, [r3]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     5e0:	edc3 7a01 	vstr	s15, [r3, #4]
	pb->buf[i++] = (BYTE)c;
     5e4:	4811      	ldr	r0, [pc, #68]	; (62c <updateStateFromSPIMessage+0x12c>)
     5e6:	bcf0      	pop	{r4, r5, r6, r7}
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     5e8:	f007 bf0a 	b.w	8400 <tExpSmooth_setDest>
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
     5ec:	30000800 	.word	0x30000800
	pb->idx = i;
     5f0:	200055d0 	.word	0x200055d0
	pb->nchr++;
     5f4:	200148fc 	.word	0x200148fc
     5f8:	200055cc 	.word	0x200055cc
				while (j++ < w) putc_bfd(&pb, ' ');
     5fc:	200050c0 	.word	0x200050c0
			}
			while (*p) putc_bfd(&pb, *p++);
     600:	200050c4 	.word	0x200050c4
				while (j++ < w) putc_bfd(&pb, ' ');
     604:	20000015 	.word	0x20000015
     608:	20014858 	.word	0x20014858
     60c:	20014908 	.word	0x20014908
			while (j++ < w) putc_bfd(&pb, ' ');
     610:	20014930 	.word	0x20014930
			while (*p) putc_bfd(&pb, *p++);
     614:	39800801 	.word	0x39800801
     618:	20014904 	.word	0x20014904
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     61c:	20014860 	.word	0x20014860
     620:	20014868 	.word	0x20014868
     624:	3b000000 	.word	0x3b000000
		switch (d) {				/* Type is... */
     628:	20000a80 	.word	0x20000a80
     62c:	2001490c 	.word	0x2001490c
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     630:	f3af 8000 	nop.w
     634:	f3af 8000 	nop.w
     638:	f3af 8000 	nop.w
	if (i < 0) return;
     63c:	f3af 8000 	nop.w

00000640 <switchStringModel>:
	pb->buf[i++] = (BYTE)c;
     640:	2801      	cmp	r0, #1
     642:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     646:	ed2d 8b06 	vpush	{d8-d10}
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     64a:	f000 8082 	beq.w	752 <switchStringModel+0x112>
	pb->buf[i++] = (BYTE)c;
     64e:	2802      	cmp	r0, #2
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     650:	d00e      	beq.n	670 <switchStringModel+0x30>
	pb->nchr++;
     652:	4b74      	ldr	r3, [pc, #464]	; (824 <switchStringModel+0x1e4>)
     654:	2100      	movs	r1, #0
	pb->idx = i;
     656:	4a74      	ldr	r2, [pc, #464]	; (828 <switchStringModel+0x1e8>)
	pb->nchr++;
     658:	2401      	movs	r4, #1
     65a:	681b      	ldr	r3, [r3, #0]
     65c:	7011      	strb	r1, [r2, #0]
     65e:	4873      	ldr	r0, [pc, #460]	; (82c <switchStringModel+0x1ec>)
     660:	b2db      	uxtb	r3, r3
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     662:	4a73      	ldr	r2, [pc, #460]	; (830 <switchStringModel+0x1f0>)
     664:	6004      	str	r4, [r0, #0]
     666:	7013      	strb	r3, [r2, #0]
     668:	ecbd 8b06 	vpop	{d8-d10}
     66c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		i = (bw == (UINT)i) ? 0 : -1;
     670:	4f70      	ldr	r7, [pc, #448]	; (834 <switchStringModel+0x1f4>)
     672:	783b      	ldrb	r3, [r7, #0]
     674:	2b01      	cmp	r3, #1
     676:	d054      	beq.n	722 <switchStringModel+0xe2>
     678:	4d6f      	ldr	r5, [pc, #444]	; (838 <switchStringModel+0x1f8>)
     67a:	782b      	ldrb	r3, [r5, #0]
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
     67c:	2b00      	cmp	r3, #0
     67e:	d050      	beq.n	722 <switchStringModel+0xe2>
     680:	4e6e      	ldr	r6, [pc, #440]	; (83c <switchStringModel+0x1fc>)
     682:	2400      	movs	r4, #0
	if (i < 0) return;
     684:	4630      	mov	r0, r6
     686:	3401      	adds	r4, #1
     688:	f009 feee 	bl	a468 <__tSimpleLivingString3_free_veneer>
	pb->buf[i++] = (BYTE)c;
     68c:	782b      	ldrb	r3, [r5, #0]
     68e:	3604      	adds	r6, #4
     690:	42a3      	cmp	r3, r4
     692:	dcf7      	bgt.n	684 <switchStringModel+0x44>
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     694:	2b00      	cmp	r3, #0
	pb->buf[i++] = (BYTE)c;
     696:	d044      	beq.n	722 <switchStringModel+0xe2>
     698:	4c69      	ldr	r4, [pc, #420]	; (840 <switchStringModel+0x200>)
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     69a:	2600      	movs	r6, #0
	pb->nchr++;
     69c:	eddf aa69 	vldr	s21, [pc, #420]	; 844 <switchStringModel+0x204>
	pb->idx = i;
     6a0:	ed9f 8a69 	vldr	s16, [pc, #420]	; 848 <switchStringModel+0x208>
	pb->nchr++;
     6a4:	ed9f aa69 	vldr	s20, [pc, #420]	; 84c <switchStringModel+0x20c>
	return EOF;
     6a8:	eddf 9a69 	vldr	s19, [pc, #420]	; 850 <switchStringModel+0x210>
	}

	va_end(arp);

	return putc_flush(&pb);
}
     6ac:	ed9f 9a69 	vldr	s18, [pc, #420]	; 854 <switchStringModel+0x214>
     6b0:	eddf 8a69 	vldr	s17, [pc, #420]	; 858 <switchStringModel+0x218>
     6b4:	eef0 4a6a 	vmov.f32	s9, s21
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     6b8:	ed9f 4a62 	vldr	s8, [pc, #392]	; 844 <switchStringModel+0x204>
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
     6bc:	eef0 3a48 	vmov.f32	s7, s16
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6c0:	eddf 2a62 	vldr	s5, [pc, #392]	; 84c <switchStringModel+0x20c>
     6c4:	eeb0 3a4a 	vmov.f32	s6, s20
     6c8:	ed9f 2a5f 	vldr	s4, [pc, #380]	; 848 <switchStringModel+0x208>
		i = (bw == (UINT)i) ? 0 : -1;
     6cc:	eef0 1a69 	vmov.f32	s3, s19
     6d0:	4a62      	ldr	r2, [pc, #392]	; (85c <switchStringModel+0x21c>)
     6d2:	eeb0 1a49 	vmov.f32	s2, s18
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6d6:	2101      	movs	r1, #1
     6d8:	eef0 0a68 	vmov.f32	s1, s17
     6dc:	4620      	mov	r0, r4
     6de:	ed9f 0a60 	vldr	s0, [pc, #384]	; 860 <switchStringModel+0x220>
		i = (bw == (UINT)i) ? 0 : -1;
     6e2:	3601      	adds	r6, #1
     6e4:	f009 fe50 	bl	a388 <__tLivingString2_initToPool_veneer>
     6e8:	4620      	mov	r0, r4
     6ea:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 864 <switchStringModel+0x224>
				while (j++ < w) putc_bfd(&pb, ' ');
     6ee:	f009 fe43 	bl	a378 <__tLivingString2_setBrightness_veneer>
     6f2:	4620      	mov	r0, r4
     6f4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
     6f8:	f009 fda6 	bl	a248 <__tLivingString2_setPickPos_veneer>
     6fc:	4620      	mov	r0, r4
            if (p < b) {
     6fe:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 868 <switchStringModel+0x228>
            if (p < 0.0f) {
     702:	f009 fe15 	bl	a330 <__tLivingString2_setPrepPos_veneer>
     706:	4620      	mov	r0, r4
     708:	eeb0 0a48 	vmov.f32	s0, s16
                p += 1.0f;
     70c:	f009 fe7c 	bl	a408 <__tLivingString2_setPrepIndex_veneer>
	i = lrintf(r - 0.5f);
     710:	4620      	mov	r0, r4
     712:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	r = MINBLEP_PHASES * phase * inv_w;
     716:	3404      	adds	r4, #4
	_tMBSineTri* c = *osc;
     718:	f009 fe1e 	bl	a358 <__tLivingString2_setPickupPos_veneer>
	i = lrintf(r - 0.5f);
     71c:	782b      	ldrb	r3, [r5, #0]
                p += 1.0f;
     71e:	42b3      	cmp	r3, r6
     720:	dcc8      	bgt.n	6b4 <switchStringModel+0x74>
                x = 0.5f - (p - b) * invB1;
     722:	4e52      	ldr	r6, [pc, #328]	; (86c <switchStringModel+0x22c>)
     724:	2400      	movs	r4, #0
	i = lrintf(r - 0.5f);
     726:	4d52      	ldr	r5, [pc, #328]	; (870 <switchStringModel+0x230>)
     728:	f04f 0901 	mov.w	r9, #1
                x = 0.5f - (p - b) * invB1;
     72c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8a4 <switchStringModel+0x264>
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
     730:	4628      	mov	r0, r5
                x = 0.5f - (p - b) * invB1;
     732:	ecb6 0a01 	vldmia	r6!, {s0}
	i = lrintf(r - 0.5f);
     736:	f009 fec3 	bl	a4c0 <__tExpSmooth_setValAndDest_veneer>
	r -= (Lfloat)i;
     73a:	f808 9004 	strb.w	r9, [r8, r4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     73e:	3401      	adds	r4, #1
     740:	3504      	adds	r5, #4
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     742:	2c0c      	cmp	r4, #12
     744:	d1f4      	bne.n	730 <switchStringModel+0xf0>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     746:	4b4b      	ldr	r3, [pc, #300]	; (874 <switchStringModel+0x234>)
     748:	4a4b      	ldr	r2, [pc, #300]	; (878 <switchStringModel+0x238>)
	r -= (Lfloat)i;
     74a:	f887 9000 	strb.w	r9, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     74e:	601a      	str	r2, [r3, #0]
     750:	e77f      	b.n	652 <switchStringModel+0x12>
     752:	4f38      	ldr	r7, [pc, #224]	; (834 <switchStringModel+0x1f4>)
	r -= (Lfloat)i;
     754:	783b      	ldrb	r3, [r7, #0]
     756:	2b00      	cmp	r3, #0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     758:	d046      	beq.n	7e8 <switchStringModel+0x1a8>
     75a:	4d37      	ldr	r5, [pc, #220]	; (838 <switchStringModel+0x1f8>)
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     75c:	782b      	ldrb	r3, [r5, #0]
     75e:	2b00      	cmp	r3, #0
	c->BLEPindices[c->mostRecentBLEP] = i;
     760:	d042      	beq.n	7e8 <switchStringModel+0x1a8>
     762:	4e37      	ldr	r6, [pc, #220]	; (840 <switchStringModel+0x200>)
     764:	2400      	movs	r4, #0
     766:	4630      	mov	r0, r6
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     768:	3401      	adds	r4, #1
     76a:	f009 fec5 	bl	a4f8 <__tLivingString2_free_veneer>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     76e:	782b      	ldrb	r3, [r5, #0]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     770:	3604      	adds	r6, #4
     772:	42a3      	cmp	r3, r4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     774:	dcf7      	bgt.n	766 <switchStringModel+0x126>
     776:	b3bb      	cbz	r3, 7e8 <switchStringModel+0x1a8>
     778:	4c30      	ldr	r4, [pc, #192]	; (83c <switchStringModel+0x1fc>)
            x = 0.5f - (p_at_reset - b) * invB1;
     77a:	2600      	movs	r6, #0
     77c:	eddf aa3f 	vldr	s21, [pc, #252]	; 87c <switchStringModel+0x23c>
                if (p_at_reset >= 1.0f) {
     780:	ed9f 8a31 	vldr	s16, [pc, #196]	; 848 <switchStringModel+0x208>
            x = 0.5f - (p_at_reset - b) * invB1;
     784:	ed9f aa3e 	vldr	s20, [pc, #248]	; 880 <switchStringModel+0x240>
     788:	eddf 9a3e 	vldr	s19, [pc, #248]	; 884 <switchStringModel+0x244>
                if (p_at_reset >= 1.0f) {
     78c:	ed9f 9a3e 	vldr	s18, [pc, #248]	; 888 <switchStringModel+0x248>
            x = 0.5f - (p_at_reset - b) * invB1;
     790:	eddf 8a3e 	vldr	s17, [pc, #248]	; 88c <switchStringModel+0x24c>
                if (p_at_reset >= 1.0f) {
     794:	4b31      	ldr	r3, [pc, #196]	; (85c <switchStringModel+0x21c>)
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     796:	eef0 2a6a 	vmov.f32	s5, s21
     79a:	eef0 1a48 	vmov.f32	s3, s16
     79e:	ed9f 2a37 	vldr	s4, [pc, #220]	; 87c <switchStringModel+0x23c>
     7a2:	eeb0 1a4a 	vmov.f32	s2, s20
	i = lrintf(r - 0.5f);
     7a6:	2200      	movs	r2, #0
     7a8:	eef0 0a69 	vmov.f32	s1, s19
     7ac:	2104      	movs	r1, #4
     7ae:	4620      	mov	r0, r4
     7b0:	eeb0 0a49 	vmov.f32	s0, s18
	r -= (Lfloat)i;
     7b4:	f009 fe1c 	bl	a3f0 <__tSimpleLivingString3_initToPool_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     7b8:	4620      	mov	r0, r4
	c->BLEPindices[c->mostRecentBLEP] = i;
     7ba:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (Lfloat)i;
     7be:	3601      	adds	r6, #1
     7c0:	f009 fd3a 	bl	a238 <__tSimpleLivingString3_setTargetLev_veneer>
     7c4:	4620      	mov	r0, r4
     7c6:	ed9f 0a32 	vldr	s0, [pc, #200]	; 890 <switchStringModel+0x250>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     7ca:	f009 fd51 	bl	a270 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
     7ce:	4620      	mov	r0, r4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     7d0:	eeb0 0a48 	vmov.f32	s0, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
     7d4:	f009 fdd4 	bl	a380 <__tSimpleLivingString3_setLevStrength_veneer>
     7d8:	4620      	mov	r0, r4
     7da:	2101      	movs	r1, #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     7dc:	3404      	adds	r4, #4
     7de:	f009 fd17 	bl	a210 <__tSimpleLivingString3_setLevMode_veneer>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     7e2:	782b      	ldrb	r3, [r5, #0]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     7e4:	42b3      	cmp	r3, r6
     7e6:	dcd5      	bgt.n	794 <switchStringModel+0x154>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     7e8:	4e2a      	ldr	r6, [pc, #168]	; (894 <switchStringModel+0x254>)
     7ea:	2400      	movs	r4, #0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     7ec:	4d20      	ldr	r5, [pc, #128]	; (870 <switchStringModel+0x230>)
     7ee:	f04f 0901 	mov.w	r9, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     7f2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8a4 <switchStringModel+0x264>
     7f6:	4628      	mov	r0, r5
     7f8:	ecb6 0a01 	vldmia	r6!, {s0}
     7fc:	f009 fe60 	bl	a4c0 <__tExpSmooth_setValAndDest_veneer>
     800:	f808 9004 	strb.w	r9, [r8, r4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     804:	3401      	adds	r4, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     806:	3504      	adds	r5, #4
     808:	2c0c      	cmp	r4, #12
            if (p >= b) {
     80a:	d1f4      	bne.n	7f6 <switchStringModel+0x1b6>
     80c:	ed9f 0a22 	vldr	s0, [pc, #136]	; 898 <switchStringModel+0x258>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     810:	4822      	ldr	r0, [pc, #136]	; (89c <switchStringModel+0x25c>)
     812:	f009 fd6d 	bl	a2f0 <__tVZFilter_setFreq_veneer>
            if (p >= b) {
     816:	2100      	movs	r1, #0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     818:	4b16      	ldr	r3, [pc, #88]	; (874 <switchStringModel+0x234>)
     81a:	4a21      	ldr	r2, [pc, #132]	; (8a0 <switchStringModel+0x260>)
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     81c:	7039      	strb	r1, [r7, #0]
     81e:	601a      	str	r2, [r3, #0]
	c->BLEPindices[c->mostRecentBLEP] = i;
     820:	e717      	b.n	652 <switchStringModel+0x12>
     822:	bf00      	nop
     824:	200148fc 	.word	0x200148fc
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     828:	20014b58 	.word	0x20014b58
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     82c:	20005748 	.word	0x20005748
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     830:	20000740 	.word	0x20000740
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     834:	20014931 	.word	0x20014931
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     838:	20000015 	.word	0x20000015
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     83c:	20005418 	.word	0x20005418
     840:	20014870 	.word	0x20014870
     844:	3d4ccccd 	.word	0x3d4ccccd
     848:	00000000 	.word	0x00000000
            if (p >= b) {
     84c:	3f7ff972 	.word	0x3f7ff972
            x = -0.5f + p * invB;
     850:	3f666666 	.word	0x3f666666
     854:	3e99999a 	.word	0x3e99999a
     858:	3f19999a 	.word	0x3f19999a
                p -= 1.0f;
     85c:	20005534 	.word	0x20005534
     860:	42c80000 	.word	0x42c80000
                x = -0.5f + p * invB;
     864:	3f7d70a4 	.word	0x3f7d70a4
	_tMBSineTri* c = *osc;
     868:	3ecccccd 	.word	0x3ecccccd
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
     86c:	20000188 	.word	0x20000188
                x = -0.5f + p * invB;
     870:	200052c0 	.word	0x200052c0
	i = lrintf(r - 0.5f);
     874:	20000a6c 	.word	0x20000a6c
     878:	000010a1 	.word	0x000010a1
	r -= (Lfloat)i;
     87c:	3c23d70a 	.word	0x3c23d70a
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     880:	3f7fff58 	.word	0x3f7fff58
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     884:	4684d000 	.word	0x4684d000
	r -= (Lfloat)i;
     888:	435c0000 	.word	0x435c0000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     88c:	3d40c0f0 	.word	0x3d40c0f0
	scale *= w;
     890:	3cf753bf 	.word	0x3cf753bf
                x = -0.5f + p * invB;
     894:	20000158 	.word	0x20000158
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     898:	45504000 	.word	0x45504000
	r -= (Lfloat)i;
     89c:	200055a4 	.word	0x200055a4
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     8a0:	00000ba1 	.word	0x00000ba1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     8a4:	20005284 	.word	0x20005284
	c->BLEPindices[c->mostRecentBLEP] = i;
     8a8:	f3af 8000 	nop.w
     8ac:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     8b0:	f3af 8000 	nop.w
     8b4:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     8b8:	f3af 8000 	nop.w
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     8bc:	f3af 8000 	nop.w

000008c0 <audioTickString1>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8c4:	4b95      	ldr	r3, [pc, #596]	; (b1c <audioTickString1+0x25c>)
     8c6:	4c96      	ldr	r4, [pc, #600]	; (b20 <audioTickString1+0x260>)
     8c8:	4896      	ldr	r0, [pc, #600]	; (b24 <audioTickString1+0x264>)
     8ca:	f8df 82b8 	ldr.w	r8, [pc, #696]	; b84 <audioTickString1+0x2c4>
}
     8ce:	4625      	mov	r5, r4
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
     8d0:	f104 0930 	add.w	r9, r4, #48	; 0x30
	_tMBSineTri* c = *osc;
     8d4:	ed2d 8b0a 	vpush	{d8-d12}
	i = lrintf(r - 0.5f);
     8d8:	b085      	sub	sp, #20
                x = 0.5f - (p - b) * invB1;
     8da:	781b      	ldrb	r3, [r3, #0]
     8dc:	af00      	add	r7, sp, #0
     8de:	009b      	lsls	r3, r3, #2
     8e0:	3307      	adds	r3, #7
	i = lrintf(r - 0.5f);
     8e2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
     8e6:	ebad 0d03 	sub.w	sp, sp, r3
                x = 0.5f - (p - b) * invB1;
     8ea:	f007 fd79 	bl	83e0 <tExpSmooth_tick>
	i = lrintf(r - 0.5f);
     8ee:	eeb0 9a40 	vmov.f32	s18, s0
	r -= (Lfloat)i;
     8f2:	466e      	mov	r6, sp
     8f4:	4640      	mov	r0, r8
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     8f6:	f108 0804 	add.w	r8, r8, #4
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     8fa:	f007 fd71 	bl	83e0 <tExpSmooth_tick>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     8fe:	eca5 0a01 	vstmia	r5!, {s0}
	r -= (Lfloat)i;
     902:	454d      	cmp	r5, r9
     904:	d1f6      	bne.n	8f4 <audioTickString1+0x34>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     906:	4b85      	ldr	r3, [pc, #532]	; (b1c <audioTickString1+0x25c>)
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     908:	4a87      	ldr	r2, [pc, #540]	; (b28 <audioTickString1+0x268>)
     90a:	6a61      	ldr	r1, [r4, #36]	; 0x24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     90c:	781b      	ldrb	r3, [r3, #0]
     90e:	ed9f 8a87 	vldr	s16, [pc, #540]	; b2c <audioTickString1+0x26c>
	r -= (Lfloat)i;
     912:	6011      	str	r1, [r2, #0]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     914:	2b00      	cmp	r3, #0
     916:	f000 80c9 	beq.w	aac <audioTickString1+0x1ec>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     91a:	4b85      	ldr	r3, [pc, #532]	; (b30 <audioTickString1+0x270>)
	c->BLEPindices[c->mostRecentBLEP] = i;
     91c:	eef0 8a48 	vmov.f32	s17, s16
     920:	4d84      	ldr	r5, [pc, #528]	; (b34 <audioTickString1+0x274>)
     922:	f04f 0b00 	mov.w	fp, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     926:	60fb      	str	r3, [r7, #12]
     928:	eddf aa83 	vldr	s21, [pc, #524]	; b38 <audioTickString1+0x278>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     92c:	4b83      	ldr	r3, [pc, #524]	; (b3c <audioTickString1+0x27c>)
     92e:	ed9f aa84 	vldr	s20, [pc, #528]	; b40 <audioTickString1+0x280>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     932:	ed9f ba84 	vldr	s22, [pc, #528]	; b44 <audioTickString1+0x284>
            x = -0.5f + p_at_reset * invB;
     936:	f8df a250 	ldr.w	sl, [pc, #592]	; b88 <audioTickString1+0x2c8>
    sinPhase += inc_amount;
     93a:	f8df 9250 	ldr.w	r9, [pc, #592]	; b8c <audioTickString1+0x2cc>
    p += inc_amount;
     93e:	eddf 9a82 	vldr	s19, [pc, #520]	; b48 <audioTickString1+0x288>
            x = -0.5f + p_at_reset * invB;
     942:	f8df 824c 	ldr.w	r8, [pc, #588]	; b90 <audioTickString1+0x2d0>
            else if (sw < 0)
     946:	60bb      	str	r3, [r7, #8]
     948:	4b80      	ldr	r3, [pc, #512]	; (b4c <audioTickString1+0x28c>)
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     94a:	eeb0 0a68 	vmov.f32	s0, s17
     94e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
     952:	68fb      	ldr	r3, [r7, #12]
     954:	edd1 7a00 	vldr	s15, [r1]
     958:	ecb3 7a01 	vldmia	r3!, {s14}
                    p_at_reset -= 1.0f;
     95c:	ee77 7a87 	vadd.f32	s15, s15, s14
                    x = -0.5f + p_at_reset * invB;
     960:	60fb      	str	r3, [r7, #12]
                    p_at_reset -= 1.0f;
     962:	eef5 7ac0 	vcmpe.f32	s15, #0.0
	i = lrintf(r - 0.5f);
     966:	ece6 7a01 	vstmia	r6!, {s15}
                    x = -0.5f + p_at_reset * invB;
     96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     96e:	f100 80d2 	bmi.w	b16 <audioTickString1+0x256>
                    x = -0.5f + p_at_reset * invB;
     972:	fe87 0aea 	vminnm.f32	s0, s15, s21
	i = lrintf(r - 0.5f);
     976:	ed46 7a01 	vstr	s15, [r6, #-4]
     97a:	ed06 0a01 	vstr	s0, [r6, #-4]
	r -= (Lfloat)i;
     97e:	f009 fce3 	bl	a348 <__mtof_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     982:	68bb      	ldr	r3, [r7, #8]
     984:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     988:	eeb0 ca4a 	vmov.f32	s24, s20
	r -= (Lfloat)i;
     98c:	f813 1b01 	ldrb.w	r1, [r3], #1
	i = lrintf(r - 0.5f);
     990:	eef0 ba40 	vmov.f32	s23, s0
	r -= (Lfloat)i;
     994:	60bb      	str	r3, [r7, #8]
     996:	b129      	cbz	r1, 9a4 <audioTickString1+0xe4>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     998:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
	i = lrintf(r - 0.5f);
     99c:	eee7 7a0b 	vfma.f32	s15, s14, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     9a0:	eeb0 ca67 	vmov.f32	s24, s15
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     9a4:	4628      	mov	r0, r5
     9a6:	ed94 0a08 	vldr	s0, [r4, #32]
	c->BLEPindices[c->mostRecentBLEP] = i;
     9aa:	f009 fd95 	bl	a4d8 <__tSimpleLivingString3_setPickupPoint_veneer>
     9ae:	4628      	mov	r0, r5
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     9b0:	eeb0 0a4c 	vmov.f32	s0, s24
     9b4:	f10b 0b01 	add.w	fp, fp, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     9b8:	f009 fcb2 	bl	a320 <__tSimpleLivingString3_setDecay_veneer>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     9bc:	4628      	mov	r0, r5
     9be:	eeb0 0a69 	vmov.f32	s0, s19
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     9c2:	f009 fc1d 	bl	a200 <__tSimpleLivingString3_setDampFreq_veneer>
     9c6:	eddf 7a62 	vldr	s15, [pc, #392]	; b50 <audioTickString1+0x290>
     9ca:	ed94 0a00 	vldr	s0, [r4]
	i = lrintf(r - 0.5f);
     9ce:	4628      	mov	r0, r5
     9d0:	ee20 0a27 	vmul.f32	s0, s0, s15
	r -= (Lfloat)i;
     9d4:	f009 fcd4 	bl	a380 <__tSimpleLivingString3_setLevStrength_veneer>
	c->BLEPindices[c->mostRecentBLEP] = i;
     9d8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; b54 <audioTickString1+0x294>
     9dc:	edd4 7a05 	vldr	s15, [r4, #20]
	r -= (Lfloat)i;
     9e0:	4629      	mov	r1, r5
     9e2:	f8d4 c018 	ldr.w	ip, [r4, #24]
     9e6:	eeb0 0a6b 	vmov.f32	s0, s23
                x = -0.5f + p * invB;
     9ea:	ee67 7a87 	vmul.f32	s15, s15, s14
     9ee:	f855 0b04 	ldr.w	r0, [r5], #4
     9f2:	6079      	str	r1, [r7, #4]
	_tMBSineTri* c = *osc;
     9f4:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
     9f8:	edc0 7a19 	vstr	s15, [r0, #100]	; 0x64
                x = -0.5f + p * invB;
     9fc:	4608      	mov	r0, r1
	i = lrintf(r - 0.5f);
     9fe:	f009 fcef 	bl	a3e0 <__tSimpleLivingString3_setFreq_veneer>
     a02:	ed9a 0a00 	vldr	s0, [sl]
	r -= (Lfloat)i;
     a06:	edd9 7a00 	vldr	s15, [r9]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
	scale *= w;
     a0e:	4640      	mov	r0, r8
     a10:	ee70 7a67 	vsub.f32	s15, s0, s15
	r -= (Lfloat)i;
     a14:	eeb0 0ae7 	vabs.f32	s0, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     a18:	eeb4 0a47 	vcmp.f32	s0, s14
                x = -0.5f + p * invB;
     a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	scale *= w;
     a20:	fe38 0a80 	vselgt.f32	s0, s17, s0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a24:	f007 fcec 	bl	8400 <tExpSmooth_setDest>
	r -= (Lfloat)i;
     a28:	4640      	mov	r0, r8
     a2a:	f007 fcd9 	bl	83e0 <tExpSmooth_tick>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     a2e:	f8da 0000 	ldr.w	r0, [sl]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     a32:	eef0 ba40 	vmov.f32	s23, s0
	c->BLEPindices[c->mostRecentBLEP] = i;
     a36:	f8c9 0000 	str.w	r0, [r9]
     a3a:	4847      	ldr	r0, [pc, #284]	; (b58 <audioTickString1+0x298>)
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     a3c:	f009 fcf8 	bl	a430 <__tNoise_tick_veneer>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     a40:	4846      	ldr	r0, [pc, #280]	; (b5c <audioTickString1+0x29c>)
     a42:	f009 fc65 	bl	a310 <__tVZFilter_tickEfficient_veneer>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     a46:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     a4a:	edd4 7a01 	vldr	s15, [r4, #4]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     a4e:	6879      	ldr	r1, [r7, #4]
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     a50:	ee67 7a87 	vmul.f32	s15, s15, s14
     a54:	4608      	mov	r0, r1
     a56:	ee67 7aab 	vmul.f32	s15, s15, s23
     a5a:	ee27 0a80 	vmul.f32	s0, s15, s0
                k = 0;
     a5e:	f009 fc1f 	bl	a2a0 <__tSimpleLivingString3_tick_veneer>
        	p = (1.0f - eof_offset) + 0.25f;
     a62:	ee30 7a00 	vadd.f32	s14, s0, s0
        	sinPhase = (1.0f - eof_offset);
     a66:	eddf 7a3e 	vldr	s15, [pc, #248]	; b60 <audioTickString1+0x2a0>
        	p = (1.0f - eof_offset) + 0.25f;
     a6a:	eddf 3a3e 	vldr	s7, [pc, #248]	; b64 <audioTickString1+0x2a4>
        if (!k) {
     a6e:	ee67 5a07 	vmul.f32	s11, s14, s14
     a72:	eddf 4a3d 	vldr	s9, [pc, #244]	; b68 <audioTickString1+0x2a8>
                if (p_at_reset < 0.0f) {
     a76:	ed9f 4a3d 	vldr	s8, [pc, #244]	; b6c <audioTickString1+0x2ac>
     a7a:	ed9f 6a3d 	vldr	s12, [pc, #244]	; b70 <audioTickString1+0x2b0>
     a7e:	ee67 6a25 	vmul.f32	s13, s14, s11
            x = -0.5f + p_at_reset * invB;
     a82:	4b26      	ldr	r3, [pc, #152]	; (b1c <audioTickString1+0x25c>)
     a84:	ed9f 5a3b 	vldr	s10, [pc, #236]	; b74 <audioTickString1+0x2b4>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     a88:	7819      	ldrb	r1, [r3, #0]
     a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
     a8e:	ee67 6a26 	vmul.f32	s13, s14, s13
            x = -0.5f + p_at_reset * invB;
     a92:	4559      	cmp	r1, fp
     a94:	eee5 7aa3 	vfma.f32	s15, s11, s7
	r = MINBLEP_PHASES * phase * inv_w;
     a98:	eea6 6a84 	vfma.f32	s12, s13, s8
	i = lrintf(r - 0.5f);
     a9c:	eee6 7aa4 	vfma.f32	s15, s13, s9
     aa0:	eee6 7a07 	vfma.f32	s15, s12, s14
     aa4:	eea7 8a85 	vfma.f32	s16, s15, s10
     aa8:	f73f af4e 	bgt.w	948 <audioTickString1+0x88>
	r -= (Lfloat)i;
     aac:	eddf 0a32 	vldr	s1, [pc, #200]	; b78 <audioTickString1+0x2b8>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ab0:	ed9f 1a21 	vldr	s2, [pc, #132]	; b38 <audioTickString1+0x278>
	c->BLEPindices[c->mostRecentBLEP] = i;
     ab4:	ee69 0a20 	vmul.f32	s1, s18, s1
	r -= (Lfloat)i;
     ab8:	ed9f 0a1c 	vldr	s0, [pc, #112]	; b2c <audioTickString1+0x26c>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     abc:	f008 f890 	bl	8be0 <LEAF_clip>
	r -= (Lfloat)i;
     ac0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ac4:	492d      	ldr	r1, [pc, #180]	; (b7c <audioTickString1+0x2bc>)
     ac6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     aca:	4a2d      	ldr	r2, [pc, #180]	; (b80 <audioTickString1+0x2c0>)
     acc:	3714      	adds	r7, #20
	c->BLEPindices[c->mostRecentBLEP] = i;
     ace:	ee17 3a10 	vmov	r3, s14
     ad2:	edd1 6a00 	vldr	s13, [r1]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     ad6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ada:	1c59      	adds	r1, r3, #1
     adc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     ae0:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ae4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ae8:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     aec:	ee28 8a26 	vmul.f32	s16, s16, s13
     af0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
     af4:	ee77 7a87 	vadd.f32	s15, s15, s14
     af8:	ed93 7a00 	vldr	s14, [r3]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     afc:	edd2 6a00 	vldr	s13, [r2]
	scale *= w;
     b00:	ee20 0a26 	vmul.f32	s0, s0, s13
            if (p < b) {
     b04:	eea7 0a27 	vfma.f32	s0, s14, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b08:	ee28 0a00 	vmul.f32	s0, s16, s0
     b0c:	46bd      	mov	sp, r7
            if (p < b) {
     b0e:	ecbd 8b0a 	vpop	{d8-d12}
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b16:	ed46 8a01 	vstr	s17, [r6, #-4]
	c->BLEPindices[c->mostRecentBLEP] = i;
     b1a:	e72e      	b.n	97a <audioTickString1+0xba>
     b1c:	20000015 	.word	0x20000015
     b20:	20005290 	.word	0x20005290
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b24:	2001490c 	.word	0x2001490c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     b28:	20000150 	.word	0x20000150
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     b2c:	00000000 	.word	0x00000000
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     b30:	20014858 	.word	0x20014858
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     b34:	20005418 	.word	0x20005418
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     b38:	42fe0000 	.word	0x42fe0000
     b3c:	20005430 	.word	0x20005430
     b40:	3dcccccd 	.word	0x3dcccccd
     b44:	44480000 	.word	0x44480000
            if (p < b) {
     b48:	46768933 	.word	0x46768933
            x = 0.5f - (p - b) * invB1;
     b4c:	20014850 	.word	0x20014850
     b50:	3d108950 	.word	0x3d108950
     b54:	3cf5c28f 	.word	0x3cf5c28f
     b58:	20005590 	.word	0x20005590
     b5c:	200055a4 	.word	0x200055a4
     b60:	3b0a47ed 	.word	0x3b0a47ed
     b64:	3bdd2f1b 	.word	0x3bdd2f1b
     b68:	39f9096c 	.word	0x39f9096c
                    p_at_reset -= 1.0f;
     b6c:	3a59d777 	.word	0x3a59d777
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     b70:	3d99999a 	.word	0x3d99999a
	i = lrintf(r - 0.5f);
     b74:	408bbced 	.word	0x408bbced
     b78:	42a00000 	.word	0x42a00000
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     b7c:	2000000c 	.word	0x2000000c
	i = lrintf(r - 0.5f);
     b80:	2000053c 	.word	0x2000053c
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     b84:	200052c0 	.word	0x200052c0
	i = lrintf(r - 0.5f);
     b88:	20000a80 	.word	0x20000a80
     b8c:	2000574c 	.word	0x2000574c
	r -= (Lfloat)i;
     b90:	20000a88 	.word	0x20000a88
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     b94:	f3af 8000 	nop.w
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     b98:	f3af 8000 	nop.w
	r -= (Lfloat)i;
     b9c:	f3af 8000 	nop.w

00000ba0 <audioFrameString1>:
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	scale *= w;
     ba4:	2201      	movs	r2, #1
                if (!k && p_at_reset >= b) {
     ba6:	4606      	mov	r6, r0
     ba8:	2108      	movs	r1, #8
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     baa:	485d      	ldr	r0, [pc, #372]	; (d20 <audioFrameString1+0x180>)
     bac:	ed2d 8b04 	vpush	{d8-d9}
	r -= (Lfloat)i;
     bb0:	f009 fc32 	bl	a418 <__HAL_GPIO_WritePin_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     bb4:	4a5b      	ldr	r2, [pc, #364]	; (d24 <audioFrameString1+0x184>)
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     bb6:	4b5c      	ldr	r3, [pc, #368]	; (d28 <audioFrameString1+0x188>)
     bb8:	6857      	ldr	r7, [r2, #4]
	c->BLEPindices[c->mostRecentBLEP] = i;
     bba:	781a      	ldrb	r2, [r3, #0]
     bbc:	b16a      	cbz	r2, bda <audioFrameString1+0x3a>
                if (!k && p_at_reset >= b) {
     bbe:	4a5b      	ldr	r2, [pc, #364]	; (d2c <audioFrameString1+0x18c>)
     bc0:	7811      	ldrb	r1, [r2, #0]
	c->BLEPindices[c->mostRecentBLEP] = i;
     bc2:	b141      	cbz	r1, bd6 <audioFrameString1+0x36>
     bc4:	2200      	movs	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     bc6:	485a      	ldr	r0, [pc, #360]	; (d30 <audioFrameString1+0x190>)
     bc8:	4d5a      	ldr	r5, [pc, #360]	; (d34 <audioFrameString1+0x194>)
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     bca:	2901      	cmp	r1, #1
     bcc:	7002      	strb	r2, [r0, #0]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     bce:	802a      	strh	r2, [r5, #0]
     bd0:	d001      	beq.n	bd6 <audioFrameString1+0x36>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     bd2:	7042      	strb	r2, [r0, #1]
     bd4:	806a      	strh	r2, [r5, #2]
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     bd6:	2200      	movs	r2, #0
     bd8:	701a      	strb	r2, [r3, #0]
     bda:	4a57      	ldr	r2, [pc, #348]	; (d38 <audioFrameString1+0x198>)
     bdc:	6813      	ldr	r3, [r2, #0]
     bde:	b38b      	cbz	r3, c44 <audioFrameString1+0xa4>
     be0:	f8df a148 	ldr.w	sl, [pc, #328]	; d2c <audioFrameString1+0x18c>
     be4:	f89a 1000 	ldrb.w	r1, [sl]
                if (!k && p_at_reset >= b) {
     be8:	b351      	cbz	r1, c40 <audioFrameString1+0xa0>
                    x = 0.5f - (p_at_reset - b) * invB1;
     bea:	ed9f 9a54 	vldr	s18, [pc, #336]	; d3c <audioFrameString1+0x19c>
	_tMBSineTri* c = *osc;
     bee:	2400      	movs	r4, #0
	i = lrintf(r - 0.5f);
     bf0:	eddf 8a53 	vldr	s17, [pc, #332]	; d40 <audioFrameString1+0x1a0>
                    x = 0.5f - (p_at_reset - b) * invB1;
     bf4:	f8df 8138 	ldr.w	r8, [pc, #312]	; d30 <audioFrameString1+0x190>
     bf8:	4d4e      	ldr	r5, [pc, #312]	; (d34 <audioFrameString1+0x194>)
     bfa:	f8df 9178 	ldr.w	r9, [pc, #376]	; d74 <audioFrameString1+0x1d4>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     bfe:	f8df b178 	ldr.w	fp, [pc, #376]	; d78 <audioFrameString1+0x1d8>
                    x = 0.5f - (p_at_reset - b) * invB1;
     c02:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     c06:	b29b      	uxth	r3, r3
	i = lrintf(r - 0.5f);
     c08:	b923      	cbnz	r3, c14 <audioFrameString1+0x74>
     c0a:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
     c0e:	b29b      	uxth	r3, r3
	r -= (Lfloat)i;
     c10:	2b00      	cmp	r3, #0
     c12:	d14c      	bne.n	cae <audioFrameString1+0x10e>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c14:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     c18:	b29b      	uxth	r3, r3
     c1a:	b13b      	cbz	r3, c2c <audioFrameString1+0x8c>
	r -= (Lfloat)i;
     c1c:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c20:	b29b      	uxth	r3, r3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     c22:	b91b      	cbnz	r3, c2c <audioFrameString1+0x8c>
     c24:	f89a 1000 	ldrb.w	r1, [sl]
                    x = 0.5f - (p_at_reset - b) * invB1;
     c28:	f888 3000 	strb.w	r3, [r8]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c2c:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
	r -= (Lfloat)i;
     c30:	f108 0801 	add.w	r8, r8, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c34:	b29b      	uxth	r3, r3
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     c36:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	c->BLEPindices[c->mostRecentBLEP] = i;
     c3a:	3401      	adds	r4, #1
     c3c:	42a1      	cmp	r1, r4
     c3e:	dce0      	bgt.n	c02 <audioFrameString1+0x62>
     c40:	2300      	movs	r3, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     c42:	6013      	str	r3, [r2, #0]
     c44:	4d3f      	ldr	r5, [pc, #252]	; (d44 <audioFrameString1+0x1a4>)
     c46:	2400      	movs	r4, #0
     c48:	ed9f 8a3f 	vldr	s16, [pc, #252]	; d48 <audioFrameString1+0x1a8>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     c4c:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     c50:	f7ff fe36 	bl	8c0 <audioTickString1>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     c54:	ee20 0a08 	vmul.f32	s0, s0, s16
     c58:	eebd 0ac0 	vcvt.s32.f32	s0, s0
     c5c:	ee10 3a10 	vmov	r3, s0
        if (sw > 0)
     c60:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
     c64:	3402      	adds	r4, #2
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     c66:	2c80      	cmp	r4, #128	; 0x80
     c68:	d1f2      	bne.n	c50 <audioFrameString1+0xb0>
     c6a:	4c38      	ldr	r4, [pc, #224]	; (d4c <audioFrameString1+0x1ac>)
     c6c:	6823      	ldr	r3, [r4, #0]
	i = lrintf(r - 0.5f);
     c6e:	b9d3      	cbnz	r3, ca6 <audioFrameString1+0x106>
     c70:	2200      	movs	r2, #0
     c72:	2108      	movs	r1, #8
     c74:	482a      	ldr	r0, [pc, #168]	; (d20 <audioFrameString1+0x180>)
     c76:	6022      	str	r2, [r4, #0]
     c78:	f009 fbce 	bl	a418 <__HAL_GPIO_WritePin_veneer>
     c7c:	4b29      	ldr	r3, [pc, #164]	; (d24 <audioFrameString1+0x184>)
     c7e:	4834      	ldr	r0, [pc, #208]	; (d50 <audioFrameString1+0x1b0>)
     c80:	685b      	ldr	r3, [r3, #4]
     c82:	ed90 7a00 	vldr	s14, [r0]
	r -= (Lfloat)i;
     c86:	1bdb      	subs	r3, r3, r7
     c88:	4932      	ldr	r1, [pc, #200]	; (d54 <audioFrameString1+0x1b4>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c8a:	4a33      	ldr	r2, [pc, #204]	; (d58 <audioFrameString1+0x1b8>)
     c8c:	ee07 3a90 	vmov	s15, r3
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     c90:	600b      	str	r3, [r1, #0]
                if (p_at_reset >= 1.0f) {
     c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
	r -= (Lfloat)i;
     c96:	ee67 7a87 	vmul.f32	s15, s15, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     c9a:	edc2 7a00 	vstr	s15, [r2]
     c9e:	ecbd 8b04 	vpop	{d8-d9}
                if (p_at_reset >= 1.0f) {
     ca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	r -= (Lfloat)i;
     ca6:	6820      	ldr	r0, [r4, #0]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ca8:	f7ff fcca 	bl	640 <switchStringModel>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     cac:	e7e0      	b.n	c70 <audioFrameString1+0xd0>
     cae:	492b      	ldr	r1, [pc, #172]	; (d5c <audioFrameString1+0x1bc>)
	c->BLEPindices[c->mostRecentBLEP] = i;
     cb0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     cb4:	4b2a      	ldr	r3, [pc, #168]	; (d60 <audioFrameString1+0x1c0>)
     cb6:	eeb0 0a49 	vmov.f32	s0, s18
     cba:	7808      	ldrb	r0, [r1, #0]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     cbc:	ed93 7a02 	vldr	s14, [r3, #8]
     cc0:	4b28      	ldr	r3, [pc, #160]	; (d64 <audioFrameString1+0x1c4>)
     cc2:	ee71 7a47 	vsub.f32	s15, s2, s14
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     cc6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     cca:	edd3 6a00 	vldr	s13, [r3]
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     cce:	4b26      	ldr	r3, [pc, #152]	; (d68 <audioFrameString1+0x1c8>)
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     cd0:	eee6 7a87 	vfma.f32	s15, s13, s14
     cd4:	edd3 0a00 	vldr	s1, [r3]
     cd8:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
     cdc:	b29b      	uxth	r3, r3
     cde:	ee08 3a10 	vmov	s16, r3
                    x = 0.5f - (p_at_reset - b) * invB1;
     ce2:	4b22      	ldr	r3, [pc, #136]	; (d6c <audioFrameString1+0x1cc>)
     ce4:	ee60 0aa7 	vmul.f32	s1, s1, s15
     ce8:	6818      	ldr	r0, [r3, #0]
     cea:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
     cee:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
     cf2:	6018      	str	r0, [r3, #0]
     cf4:	f007 ff74 	bl	8be0 <LEAF_clip>
            x = 0.5f - (p_at_reset - b) * invB1;
     cf8:	481d      	ldr	r0, [pc, #116]	; (d70 <audioFrameString1+0x1d0>)
     cfa:	00a3      	lsls	r3, r4, #2
                if (p_at_reset < b) {
     cfc:	eef0 0a40 	vmov.f32	s1, s0
            x = 0.5f - (p_at_reset - b) * invB1;
     d00:	ee28 0a28 	vmul.f32	s0, s16, s17
                if (p_at_reset < b) {
     d04:	4418      	add	r0, r3
     d06:	f009 fb63 	bl	a3d0 <__tSimpleLivingString3_pluck_veneer>
            x = 0.5f - (p_at_reset - b) * invB1;
     d0a:	4914      	ldr	r1, [pc, #80]	; (d5c <audioFrameString1+0x1bc>)
                if (p_at_reset < b) {
     d0c:	4a0a      	ldr	r2, [pc, #40]	; (d38 <audioFrameString1+0x198>)
     d0e:	780b      	ldrb	r3, [r1, #0]
                if (p_at_reset < 0.0f) {
     d10:	3301      	adds	r3, #1
     d12:	700b      	strb	r3, [r1, #0]
     d14:	2301      	movs	r3, #1
     d16:	f89a 1000 	ldrb.w	r1, [sl]
     d1a:	f888 3000 	strb.w	r3, [r8]
        else if (sw < 0)
     d1e:	e785      	b.n	c2c <audioFrameString1+0x8c>
     d20:	58020000 	.word	0x58020000
	i = lrintf(r - 0.5f);
     d24:	e0001000 	.word	0xe0001000
     d28:	20005b86 	.word	0x20005b86
     d2c:	20000015 	.word	0x20000015
     d30:	20005430 	.word	0x20005430
     d34:	20005754 	.word	0x20005754
	r -= (Lfloat)i;
     d38:	20005594 	.word	0x20005594
	c->BLEPindices[c->mostRecentBLEP] = i;
     d3c:	00000000 	.word	0x00000000
	r -= (Lfloat)i;
     d40:	37800080 	.word	0x37800080
     d44:	30000000 	.word	0x30000000
     d48:	4b000000 	.word	0x4b000000
                x = -0.5f + p * invB;
     d4c:	20014878 	.word	0x20014878
                p -= 1.0f;
     d50:	20000004 	.word	0x20000004
     d54:	20014888 	.word	0x20014888
                x = -0.5f + p * invB;
     d58:	20005144 	.word	0x20005144
	_tMBSineTri* c = *osc;
     d5c:	20014b1e 	.word	0x20014b1e
     d60:	20005290 	.word	0x20005290
}
     d64:	20005784 	.word	0x20005784
	i = lrintf(r - 0.5f);
     d68:	20000150 	.word	0x20000150
                x = -0.5f + p * invB;
     d6c:	200055cc 	.word	0x200055cc
	i = lrintf(r - 0.5f);
     d70:	20005418 	.word	0x20005418
     d74:	20014838 	.word	0x20014838
	r -= (Lfloat)i;
     d78:	20014858 	.word	0x20014858
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     d7c:	f3af 8000 	nop.w

00000d80 <audioTickString2>:
	scale *= w;
     d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	r -= (Lfloat)i;
     d84:	4ba9      	ldr	r3, [pc, #676]	; (102c <audioTickString2+0x2ac>)
     d86:	4daa      	ldr	r5, [pc, #680]	; (1030 <audioTickString2+0x2b0>)
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     d88:	48aa      	ldr	r0, [pc, #680]	; (1034 <audioTickString2+0x2b4>)
     d8a:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 1088 <audioTickString2+0x308>
	scale *= w;
     d8e:	462c      	mov	r4, r5
     d90:	f105 0930 	add.w	r9, r5, #48	; 0x30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     d94:	ed2d 8b0a 	vpush	{d8-d12}
	r -= (Lfloat)i;
     d98:	b083      	sub	sp, #12
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     d9a:	781b      	ldrb	r3, [r3, #0]
     d9c:	af00      	add	r7, sp, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     d9e:	009b      	lsls	r3, r3, #2
     da0:	3307      	adds	r3, #7
	c->BLEPindices[c->mostRecentBLEP] = i;
     da2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
     da6:	ebad 0d03 	sub.w	sp, sp, r3
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     daa:	f007 fb19 	bl	83e0 <tExpSmooth_tick>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     dae:	eeb0 9a40 	vmov.f32	s18, s0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     db2:	466e      	mov	r6, sp
     db4:	4640      	mov	r0, r8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     db6:	f108 0804 	add.w	r8, r8, #4
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     dba:	f007 fb11 	bl	83e0 <tExpSmooth_tick>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     dbe:	eca4 0a01 	vstmia	r4!, {s0}
     dc2:	454c      	cmp	r4, r9
     dc4:	d1f6      	bne.n	db4 <audioTickString2+0x34>
     dc6:	4b99      	ldr	r3, [pc, #612]	; (102c <audioTickString2+0x2ac>)
     dc8:	eddf 8a9b 	vldr	s17, [pc, #620]	; 1038 <audioTickString2+0x2b8>
}
     dcc:	781b      	ldrb	r3, [r3, #0]
     dce:	2b00      	cmp	r3, #0
     dd0:	f000 80d5 	beq.w	f7e <audioTickString2+0x1fe>
     dd4:	eeb0 aa68 	vmov.f32	s20, s17
	i = lrintf(r - 0.5f);
     dd8:	4b98      	ldr	r3, [pc, #608]	; (103c <audioTickString2+0x2bc>)
     dda:	4c99      	ldr	r4, [pc, #612]	; (1040 <audioTickString2+0x2c0>)
     ddc:	f04f 0b00 	mov.w	fp, #0
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     de0:	eddf aa98 	vldr	s21, [pc, #608]	; 1044 <audioTickString2+0x2c4>
     de4:	f8df a2a4 	ldr.w	sl, [pc, #676]	; 108c <audioTickString2+0x30c>
	i = lrintf(r - 0.5f);
     de8:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 1090 <audioTickString2+0x310>
     dec:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 1094 <audioTickString2+0x314>
                    p_at_reset += 1.0f;
     df0:	eddf 9a95 	vldr	s19, [pc, #596]	; 1048 <audioTickString2+0x2c8>
	i = lrintf(r - 0.5f);
     df4:	607b      	str	r3, [r7, #4]
     df6:	687b      	ldr	r3, [r7, #4]
     df8:	ecf3 7a01 	vldmia	r3!, {s15}
	r -= (Lfloat)i;
     dfc:	607b      	str	r3, [r7, #4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     dfe:	4b93      	ldr	r3, [pc, #588]	; (104c <audioTickString2+0x2cc>)
     e00:	eb03 038b 	add.w	r3, r3, fp, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     e04:	edd3 0a00 	vldr	s1, [r3]
	r -= (Lfloat)i;
     e08:	ea4f 038b 	mov.w	r3, fp, lsl #2
                if (k && p_at_reset < b) {
     e0c:	ee70 0aa7 	vadd.f32	s1, s1, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e10:	eef5 0ac0 	vcmpe.f32	s1, #0.0
	r -= (Lfloat)i;
     e14:	ece6 0a01 	vstmia	r6!, {s1}
	scale *= w;
     e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e1c:	f100 8101 	bmi.w	1022 <audioTickString2+0x2a2>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e20:	ed46 0a01 	vstr	s1, [r6, #-4]
	c->BLEPindices[c->mostRecentBLEP] = i;
     e24:	fe80 8aea 	vminnm.f32	s16, s1, s21
                if (k && p_at_reset < b) {
     e28:	4650      	mov	r0, sl
     e2a:	603b      	str	r3, [r7, #0]
	c->BLEPindices[c->mostRecentBLEP] = i;
     e2c:	ed06 8a01 	vstr	s16, [r6, #-4]
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e30:	f009 fafe 	bl	a430 <__tNoise_tick_veneer>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     e34:	4648      	mov	r0, r9
     e36:	eddf ca86 	vldr	s25, [pc, #536]	; 1050 <audioTickString2+0x2d0>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e3a:	f009 fa69 	bl	a310 <__tVZFilter_tickEfficient_veneer>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     e3e:	4650      	mov	r0, sl
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     e40:	eeb0 ba40 	vmov.f32	s22, s0
     e44:	f009 faf4 	bl	a430 <__tNoise_tick_veneer>
     e48:	4640      	mov	r0, r8
     e4a:	ed9f ca82 	vldr	s24, [pc, #520]	; 1054 <audioTickString2+0x2d4>
     e4e:	f009 fa5f 	bl	a310 <__tVZFilter_tickEfficient_veneer>
                if (k && p_at_reset < b) {
     e52:	4a81      	ldr	r2, [pc, #516]	; (1058 <audioTickString2+0x2d8>)
                    x = -0.5f + p_at_reset * invB;
     e54:	683b      	ldr	r3, [r7, #0]
     e56:	ee3b ba00 	vadd.f32	s22, s22, s0
     e5a:	18d0      	adds	r0, r2, r3
     e5c:	f007 fbb0 	bl	85c0 <tADSRT_tick>
	i = lrintf(r - 0.5f);
     e60:	4620      	mov	r0, r4
                    x = -0.5f + p_at_reset * invB;
     e62:	eef0 ba40 	vmov.f32	s23, s0
	r = MINBLEP_PHASES * phase * inv_w;
     e66:	eeb0 0a69 	vmov.f32	s0, s19
	i = lrintf(r - 0.5f);
     e6a:	f009 fa75 	bl	a358 <__tLivingString2_setPickupPos_veneer>
     e6e:	ed95 0a05 	vldr	s0, [r5, #20]
	r -= (Lfloat)i;
     e72:	ee20 0a2c 	vmul.f32	s0, s0, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e76:	f009 fa2f 	bl	a2d8 <__faster_mtof_veneer>
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     e7a:	4648      	mov	r0, r9
     e7c:	f009 fa38 	bl	a2f0 <__tVZFilter_setFreq_veneer>
	r -= (Lfloat)i;
     e80:	ed95 0a06 	vldr	s0, [r5, #24]
     e84:	ee20 0a2c 	vmul.f32	s0, s0, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     e88:	f009 fa26 	bl	a2d8 <__faster_mtof_veneer>
     e8c:	4640      	mov	r0, r8
     e8e:	f009 fa2f 	bl	a2f0 <__tVZFilter_setFreq_veneer>
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e92:	ed95 0a07 	vldr	s0, [r5, #28]
	c->BLEPindices[c->mostRecentBLEP] = i;
     e96:	4b71      	ldr	r3, [pc, #452]	; (105c <audioTickString2+0x2dc>)
     e98:	4620      	mov	r0, r4
     e9a:	ee20 0a0c 	vmul.f32	s0, s0, s24
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     e9e:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
     ea2:	f009 faf9 	bl	a498 <__tLivingString2_setLevSmoothFactor_veneer>
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ea6:	ed95 0a08 	vldr	s0, [r5, #32]
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     eaa:	4620      	mov	r0, r4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     eac:	f10b 0b01 	add.w	fp, fp, #1
     eb0:	ee20 0a0c 	vmul.f32	s0, s0, s24
     eb4:	f009 fac4 	bl	a440 <__tLivingString2_setLevStrength_veneer>
     eb8:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
        else if (sw < 0)
     ebc:	4620      	mov	r0, r4
     ebe:	f009 fa5b 	bl	a378 <__tLivingString2_setBrightness_veneer>
	i = lrintf(r - 0.5f);
     ec2:	ed95 0a02 	vldr	s0, [r5, #8]
     ec6:	4620      	mov	r0, r4
     ec8:	f009 f9be 	bl	a248 <__tLivingString2_setPickPos_veneer>
     ecc:	eeb0 0a4c 	vmov.f32	s0, s24
     ed0:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
     ed4:	4620      	mov	r0, r4
     ed6:	eddf 7a62 	vldr	s15, [pc, #392]	; 1060 <audioTickString2+0x2e0>
     eda:	eea7 0a27 	vfma.f32	s0, s14, s15
	r -= (Lfloat)i;
     ede:	f009 fa27 	bl	a330 <__tLivingString2_setPrepPos_veneer>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ee2:	eef0 0a48 	vmov.f32	s1, s16
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     ee6:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 1064 <audioTickString2+0x2e4>
	r -= (Lfloat)i;
     eea:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 1068 <audioTickString2+0x2e8>
                if (p_at_reset < 0.0f) {
     eee:	f007 fe77 	bl	8be0 <LEAF_clip>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     ef2:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 106c <audioTickString2+0x2ec>
	r -= (Lfloat)i;
     ef6:	eddf 7a5e 	vldr	s15, [pc, #376]	; 1070 <audioTickString2+0x2f0>
	scale *= w;
     efa:	4620      	mov	r0, r4
     efc:	4a5d      	ldr	r2, [pc, #372]	; (1074 <audioTickString2+0x2f4>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     efe:	eee0 7a07 	vfma.f32	s15, s0, s14
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	c->BLEPindices[c->mostRecentBLEP] = i;
     f06:	eefd 6ae7 	vcvt.s32.f32	s13, s15
                if (p_at_reset < 0.0f) {
     f0a:	ee37 7a67 	vsub.f32	s14, s14, s15
	scale *= w;
     f0e:	ee16 3a90 	vmov	r3, s13
	c->BLEPindices[c->mostRecentBLEP] = i;
     f12:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     f16:	1c59      	adds	r1, r3, #1
     f18:	f3c3 030e 	ubfx	r3, r3, #0, #15
     f1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     f20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     f24:	f3c1 010e 	ubfx	r1, r1, #0, #15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     f28:	ee37 7a26 	vadd.f32	s14, s14, s13
     f2c:	edd3 6a00 	vldr	s13, [r3]
     f30:	eb02 0381 	add.w	r3, r2, r1, lsl #2
     f34:	ed93 6a00 	vldr	s12, [r3]
                    x = -0.5f + p_at_reset * invB;
     f38:	ee27 0a86 	vmul.f32	s0, s15, s12
        else if (sw < 0)
     f3c:	eea6 0a87 	vfma.f32	s0, s13, s14
     f40:	f009 fa9e 	bl	a480 <__tLivingString2_setFreq_veneer>
     f44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
     f48:	ed95 7a04 	vldr	s14, [r5, #16]
                    x = -0.5f + p_at_reset * invB;
     f4c:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
	i = lrintf(r - 0.5f);
     f50:	eeb4 7ae7 	vcmpe.f32	s14, s15
     f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (Lfloat)i;
     f58:	dd52      	ble.n	1000 <audioTickString2+0x280>
	c->BLEPindices[c->mostRecentBLEP] = i;
     f5a:	4620      	mov	r0, r4
     f5c:	ee2b 0a80 	vmul.f32	s0, s23, s0
     f60:	f009 fa52 	bl	a408 <__tLivingString2_setPrepIndex_veneer>
	r -= (Lfloat)i;
     f64:	4620      	mov	r0, r4
                    x = -0.5f + p_at_reset * invB;
     f66:	ee2b 0a2b 	vmul.f32	s0, s22, s23
	r -= (Lfloat)i;
     f6a:	3404      	adds	r4, #4
     f6c:	f009 f954 	bl	a218 <__tLivingString2_tick_veneer>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     f70:	4b2e      	ldr	r3, [pc, #184]	; (102c <audioTickString2+0x2ac>)
     f72:	ee78 8a80 	vadd.f32	s17, s17, s0
     f76:	781b      	ldrb	r3, [r3, #0]
     f78:	459b      	cmp	fp, r3
     f7a:	f6ff af3c 	blt.w	df6 <audioTickString2+0x76>
     f7e:	eddf 0a3e 	vldr	s1, [pc, #248]	; 1078 <audioTickString2+0x2f8>
                    x = 0.5f - (p_at_reset - b) * invB1;
     f82:	ed9f 1a30 	vldr	s2, [pc, #192]	; 1044 <audioTickString2+0x2c4>
	i = lrintf(r - 0.5f);
     f86:	ee69 0a20 	vmul.f32	s1, s18, s1
                    x = 0.5f - (p_at_reset - b) * invB1;
     f8a:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 1038 <audioTickString2+0x2b8>
     f8e:	f007 fe27 	bl	8be0 <LEAF_clip>
	i = lrintf(r - 0.5f);
     f92:	eef0 7a40 	vmov.f32	s15, s0
                    x = 0.5f - (p_at_reset - b) * invB1;
     f96:	4939      	ldr	r1, [pc, #228]	; (107c <audioTickString2+0x2fc>)
     f98:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
     f9c:	4a38      	ldr	r2, [pc, #224]	; (1080 <audioTickString2+0x300>)
     f9e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
     fa2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
                    x = 0.5f - (p_at_reset - b) * invB1;
     fa6:	edd1 0a00 	vldr	s1, [r1]
	i = lrintf(r - 0.5f);
     faa:	ed9f 6a36 	vldr	s12, [pc, #216]	; 1084 <audioTickString2+0x304>
	r -= (Lfloat)i;
     fae:	ee17 3a10 	vmov	r3, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     fb2:	ee31 7a67 	vsub.f32	s14, s2, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
     fb6:	ee60 0a86 	vmul.f32	s1, s1, s12
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     fba:	1c59      	adds	r1, r3, #1
	r -= (Lfloat)i;
     fbc:	ee06 3a90 	vmov	s13, r3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     fc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     fc4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
     fc8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	i = lrintf(r - 0.5f);
     fcc:	ee60 0aa8 	vmul.f32	s1, s1, s17
	r -= (Lfloat)i;
     fd0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
     fd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     fd8:	ed92 6a00 	vldr	s12, [r2]
	c->BLEPindices[c->mostRecentBLEP] = i;
     fdc:	ee37 7a26 	vadd.f32	s14, s14, s13
	i = lrintf(r - 0.5f);
     fe0:	edd3 6a00 	vldr	s13, [r3]
	c->BLEPindices[c->mostRecentBLEP] = i;
     fe4:	ee67 7a86 	vmul.f32	s15, s15, s12
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
     fe8:	eee6 7a87 	vfma.f32	s15, s13, s14
     fec:	ee60 0aa7 	vmul.f32	s1, s1, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
     ff0:	f007 fdf6 	bl	8be0 <LEAF_clip>
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
     ff4:	370c      	adds	r7, #12
    c->numBLEPs = (c->numBLEPs + 1) & 63;
     ff6:	46bd      	mov	sp, r7
     ff8:	ecbd 8b0a 	vpop	{d8-d12}
     ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1000:	4620      	mov	r0, r4
    1002:	f009 fa01 	bl	a408 <__tLivingString2_setPrepIndex_veneer>
	i = lrintf(r - 0.5f);
    1006:	4620      	mov	r0, r4
	r -= (Lfloat)i;
    1008:	ee2b 0a2b 	vmul.f32	s0, s22, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
    100c:	3404      	adds	r4, #4
    100e:	f009 f903 	bl	a218 <__tLivingString2_tick_veneer>
    1012:	4b06      	ldr	r3, [pc, #24]	; (102c <audioTickString2+0x2ac>)
	r -= (Lfloat)i;
    1014:	ee78 8a80 	vadd.f32	s17, s17, s0
    1018:	781b      	ldrb	r3, [r3, #0]
    101a:	455b      	cmp	r3, fp
    101c:	f73f aeeb 	bgt.w	df6 <audioTickString2+0x76>
    1020:	e7ad      	b.n	f7e <audioTickString2+0x1fe>
    1022:	eeb0 8a4a 	vmov.f32	s16, s20
    sinPhase += inc_amount;
    1026:	ed06 aa01 	vstr	s20, [r6, #-4]
    p += inc_amount;
    102a:	e6fd      	b.n	e28 <audioTickString2+0xa8>
    102c:	20000015 	.word	0x20000015
                x = 0.5f - (p - b) * invB1;
    1030:	20005290 	.word	0x20005290
                k = 1;
    1034:	2001490c 	.word	0x2001490c
                x = 0.5f - (p - b) * invB1;
    1038:	00000000 	.word	0x00000000
    103c:	20014858 	.word	0x20014858
    1040:	20014870 	.word	0x20014870
    1044:	42fe0000 	.word	0x42fe0000
                    x = 0.5f - (p_at_reset - b)  * invB1;
    1048:	3f7ff972 	.word	0x3f7ff972
	i = lrintf(r - 0.5f);
    104c:	20014850 	.word	0x20014850
    1050:	43000000 	.word	0x43000000
                    x = 0.5f - (p_at_reset - b)  * invB1;
    1054:	3dcccccd 	.word	0x3dcccccd
	i = lrintf(r - 0.5f);
    1058:	200050fc 	.word	0x200050fc
    105c:	20014838 	.word	0x20014838

		if (note[i] < 0.0f)
		{
			note[i] = 0.0f;
		}
		if (note[i] > 127.0f)
    1060:	3f4ccccd 	.word	0x3f4ccccd
    1064:	43230000 	.word	0x43230000
    1068:	c3230000 	.word	0xc3230000
    106c:	42c80000 	.word	0x42c80000
    1070:	46800000 	.word	0x46800000
    1074:	30012000 	.word	0x30012000
    1078:	42a00000 	.word	0x42a00000
    107c:	2000000c 	.word	0x2000000c
    1080:	2000053c 	.word	0x2000053c
    1084:	3f7ae148 	.word	0x3f7ae148
    1088:	200052c0 	.word	0x200052c0
    108c:	20005590 	.word	0x20005590
    1090:	200055a0 	.word	0x200055a0
    1094:	200055a4 	.word	0x200055a4
    1098:	f3af 8000 	nop.w
    109c:	f3af 8000 	nop.w

000010a0 <audioFrameString2>:
{
    10a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10a4:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    10a6:	2201      	movs	r2, #1
    10a8:	2108      	movs	r1, #8
    10aa:	48ad      	ldr	r0, [pc, #692]	; (1360 <audioFrameString2+0x2c0>)
	if (resetStringInputs)
    10ac:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 13a8 <audioFrameString2+0x308>
{
    10b0:	ed2d 8b06 	vpush	{d8-d10}
    10b4:	b085      	sub	sp, #20
    10b6:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    10b8:	f009 f9ae 	bl	a418 <__HAL_GPIO_WritePin_veneer>
	uint32_t tempCountFrame = DWT->CYCCNT;
    10bc:	4ba9      	ldr	r3, [pc, #676]	; (1364 <audioFrameString2+0x2c4>)
    10be:	685b      	ldr	r3, [r3, #4]
    10c0:	9301      	str	r3, [sp, #4]
	if (resetStringInputs)
    10c2:	f899 3000 	ldrb.w	r3, [r9]
    10c6:	b34b      	cbz	r3, 111c <audioFrameString2+0x7c>
		for (int i = 0; i < numStringsThisBoard; i++)
    10c8:	4ea7      	ldr	r6, [pc, #668]	; (1368 <audioFrameString2+0x2c8>)
    10ca:	7833      	ldrb	r3, [r6, #0]
    10cc:	b31b      	cbz	r3, 1116 <audioFrameString2+0x76>
    10ce:	f04f 0a00 	mov.w	sl, #0
    10d2:	4ca6      	ldr	r4, [pc, #664]	; (136c <audioFrameString2+0x2cc>)
    10d4:	4fa6      	ldr	r7, [pc, #664]	; (1370 <audioFrameString2+0x2d0>)
    10d6:	4da7      	ldr	r5, [pc, #668]	; (1374 <audioFrameString2+0x2d4>)
			tLivingString2_setLevMode(&strings[i], 0);
    10d8:	46d0      	mov	r8, sl
			tLivingString2_setTargetLev(&strings[i], 0.0f);
    10da:	eddf 8aa7 	vldr	s17, [pc, #668]	; 1378 <audioFrameString2+0x2d8>
			tLivingString2_setDecay(&strings[i], 0.2f);
    10de:	ed9f 8aa7 	vldr	s16, [pc, #668]	; 137c <audioFrameString2+0x2dc>
			tLivingString2_setTargetLev(&strings[i], 0.0f);
    10e2:	eeb0 0a68 	vmov.f32	s0, s17
    10e6:	4620      	mov	r0, r4
    10e8:	f009 f90a 	bl	a300 <__tLivingString2_setTargetLev_veneer>
			tLivingString2_setLevMode(&strings[i], 0);
    10ec:	2100      	movs	r1, #0
    10ee:	4620      	mov	r0, r4
    10f0:	f009 f8f6 	bl	a2e0 <__tLivingString2_setLevMode_veneer>
			tLivingString2_setDecay(&strings[i], 0.2f);
    10f4:	4620      	mov	r0, r4
    10f6:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < numStringsThisBoard; i++)
    10fa:	3404      	adds	r4, #4
			tLivingString2_setDecay(&strings[i], 0.2f);
    10fc:	f009 f8c0 	bl	a280 <__tLivingString2_setDecay_veneer>
			tADSRT_off(&fenvelopes[i]);
    1100:	4638      	mov	r0, r7
    1102:	f007 fa3d 	bl	8580 <tADSRT_off>
		for (int i = 0; i < numStringsThisBoard; i++)
    1106:	7833      	ldrb	r3, [r6, #0]
			previousStringInputs[i] = 0;
    1108:	f825 801a 	strh.w	r8, [r5, sl, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    110c:	f10a 0a01 	add.w	sl, sl, #1
    1110:	3704      	adds	r7, #4
    1112:	4553      	cmp	r3, sl
    1114:	dce5      	bgt.n	10e2 <audioFrameString2+0x42>
		resetStringInputs = 0;
    1116:	2300      	movs	r3, #0
    1118:	f889 3000 	strb.w	r3, [r9]
	if (newPluck)
    111c:	f8df 928c 	ldr.w	r9, [pc, #652]	; 13ac <audioFrameString2+0x30c>
    1120:	f8d9 3000 	ldr.w	r3, [r9]
    1124:	2b00      	cmp	r3, #0
    1126:	d035      	beq.n	1194 <audioFrameString2+0xf4>
		for (int i = 0; i < numStringsThisBoard; i++)
    1128:	4e8f      	ldr	r6, [pc, #572]	; (1368 <audioFrameString2+0x2c8>)
    112a:	7832      	ldrb	r2, [r6, #0]
    112c:	b37a      	cbz	r2, 118e <audioFrameString2+0xee>
				tLivingString2_setTargetLev(&strings[i], 0.0f);
    112e:	ed9f aa92 	vldr	s20, [pc, #584]	; 1378 <audioFrameString2+0x2d8>
		for (int i = 0; i < numStringsThisBoard; i++)
    1132:	2400      	movs	r4, #0
				tLivingString2_setDecay(&strings[i], 0.2f);
    1134:	eddf 8a91 	vldr	s17, [pc, #580]	; 137c <audioFrameString2+0x2dc>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1138:	eddf 9a91 	vldr	s19, [pc, #580]	; 1380 <audioFrameString2+0x2e0>
				tLivingString2_setDecay(&strings[i], knobScaled[3] * 500.0f);
    113c:	ed9f 9a91 	vldr	s18, [pc, #580]	; 1384 <audioFrameString2+0x2e4>
    1140:	4f8a      	ldr	r7, [pc, #552]	; (136c <audioFrameString2+0x2cc>)
    1142:	f8df 822c 	ldr.w	r8, [pc, #556]	; 1370 <audioFrameString2+0x2d0>
    1146:	f8df a268 	ldr.w	sl, [pc, #616]	; 13b0 <audioFrameString2+0x310>
    114a:	4d8a      	ldr	r5, [pc, #552]	; (1374 <audioFrameString2+0x2d4>)
    114c:	f8df b264 	ldr.w	fp, [pc, #612]	; 13b4 <audioFrameString2+0x314>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    1150:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    1154:	b29b      	uxth	r3, r3
    1156:	b923      	cbnz	r3, 1162 <audioFrameString2+0xc2>
    1158:	f83b 3014 	ldrh.w	r3, [fp, r4, lsl #1]
    115c:	b29b      	uxth	r3, r3
    115e:	2b00      	cmp	r3, #0
    1160:	d164      	bne.n	122c <audioFrameString2+0x18c>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    1162:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    1166:	b29b      	uxth	r3, r3
    1168:	b123      	cbz	r3, 1174 <audioFrameString2+0xd4>
    116a:	f83b 1014 	ldrh.w	r1, [fp, r4, lsl #1]
    116e:	b289      	uxth	r1, r1
    1170:	2900      	cmp	r1, #0
    1172:	d047      	beq.n	1204 <audioFrameString2+0x164>
			previousStringInputs[i] = stringInputs[i];
    1174:	f83b 3014 	ldrh.w	r3, [fp, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    1178:	3704      	adds	r7, #4
    117a:	f108 0804 	add.w	r8, r8, #4
    117e:	f10a 0a04 	add.w	sl, sl, #4
			previousStringInputs[i] = stringInputs[i];
    1182:	b29b      	uxth	r3, r3
    1184:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    1188:	3401      	adds	r4, #1
    118a:	42a2      	cmp	r2, r4
    118c:	dce0      	bgt.n	1150 <audioFrameString2+0xb0>
		newPluck = 0;
    118e:	2300      	movs	r3, #0
    1190:	f8c9 3000 	str.w	r3, [r9]
    1194:	4d7c      	ldr	r5, [pc, #496]	; (1388 <audioFrameString2+0x2e8>)
				float value = 0.0f;
    1196:	2400      	movs	r4, #0
    1198:	9b02      	ldr	r3, [sp, #8]
		current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    119a:	ed9f 8a7c 	vldr	s16, [pc, #496]	; 138c <audioFrameString2+0x2ec>
    119e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    11a2:	f7ff fded 	bl	d80 <audioTickString2>
    11a6:	ee20 0a08 	vmul.f32	s0, s0, s16
    11aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    11ae:	ee10 3a10 	vmov	r3, s0
    11b2:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    11b6:	3402      	adds	r4, #2
    11b8:	2c80      	cmp	r4, #128	; 0x80
    11ba:	d1f2      	bne.n	11a2 <audioFrameString2+0x102>
	if (switchStrings)
    11bc:	4c74      	ldr	r4, [pc, #464]	; (1390 <audioFrameString2+0x2f0>)
    11be:	6823      	ldr	r3, [r4, #0]
    11c0:	b9e3      	cbnz	r3, 11fc <audioFrameString2+0x15c>
	switchStrings = 0;
    11c2:	2200      	movs	r2, #0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    11c4:	4873      	ldr	r0, [pc, #460]	; (1394 <audioFrameString2+0x2f4>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    11c6:	4b67      	ldr	r3, [pc, #412]	; (1364 <audioFrameString2+0x2c4>)
	switchStrings = 0;
    11c8:	6022      	str	r2, [r4, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    11ca:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    11ce:	685b      	ldr	r3, [r3, #4]
    11d0:	9801      	ldr	r0, [sp, #4]
    11d2:	4971      	ldr	r1, [pc, #452]	; (1398 <audioFrameString2+0x2f8>)
    11d4:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    11d6:	4c71      	ldr	r4, [pc, #452]	; (139c <audioFrameString2+0x2fc>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    11d8:	4861      	ldr	r0, [pc, #388]	; (1360 <audioFrameString2+0x2c0>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    11da:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    11de:	600b      	str	r3, [r1, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    11e0:	2108      	movs	r1, #8
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    11e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    11e6:	ee67 7a87 	vmul.f32	s15, s15, s14
    11ea:	edc4 7a00 	vstr	s15, [r4]
}
    11ee:	b005      	add	sp, #20
    11f0:	ecbd 8b06 	vpop	{d8-d10}
    11f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    11f8:	f009 b90e 	b.w	a418 <__HAL_GPIO_WritePin_veneer>
		switchStringModel(switchStrings);
    11fc:	6820      	ldr	r0, [r4, #0]
    11fe:	f7ff fa1f 	bl	640 <switchStringModel>
    1202:	e7de      	b.n	11c2 <audioFrameString2+0x122>
				tLivingString2_setTargetLev(&strings[i], 0.0f);
    1204:	eeb0 0a4a 	vmov.f32	s0, s20
    1208:	4638      	mov	r0, r7
    120a:	9103      	str	r1, [sp, #12]
    120c:	f009 f878 	bl	a300 <__tLivingString2_setTargetLev_veneer>
				tLivingString2_setLevMode(&strings[i], 0);
    1210:	9903      	ldr	r1, [sp, #12]
    1212:	4638      	mov	r0, r7
    1214:	f009 f864 	bl	a2e0 <__tLivingString2_setLevMode_veneer>
				tLivingString2_setDecay(&strings[i], 0.2f);
    1218:	eeb0 0a68 	vmov.f32	s0, s17
    121c:	4638      	mov	r0, r7
    121e:	f009 f82f 	bl	a280 <__tLivingString2_setDecay_veneer>
				tADSRT_off(&fenvelopes[i]);
    1222:	4640      	mov	r0, r8
    1224:	f007 f9ac 	bl	8580 <tADSRT_off>
		for (int i = 0; i < numStringsThisBoard; i++)
    1228:	7832      	ldrb	r2, [r6, #0]
    122a:	e7a3      	b.n	1174 <audioFrameString2+0xd4>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    122c:	f83b 3014 	ldrh.w	r3, [fp, r4, lsl #1]
				tADSRT_on(&fenvelopes[i], amplitz);
    1230:	4640      	mov	r0, r8
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1232:	b29b      	uxth	r3, r3
    1234:	ee07 3a90 	vmov	s15, r3
				stringOctave[i] = octave;
    1238:	4b59      	ldr	r3, [pc, #356]	; (13a0 <audioFrameString2+0x300>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
    123a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
				stringOctave[i] = octave;
    123e:	681b      	ldr	r3, [r3, #0]
    1240:	f8ca 3000 	str.w	r3, [sl]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1244:	ee27 8a29 	vmul.f32	s16, s14, s19
				tADSRT_on(&fenvelopes[i], amplitz);
    1248:	eeb0 0a48 	vmov.f32	s0, s16
    124c:	f007 f978 	bl	8540 <tADSRT_on>
				tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
    1250:	4b54      	ldr	r3, [pc, #336]	; (13a4 <audioFrameString2+0x304>)
    1252:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1256:	4638      	mov	r0, r7
    1258:	ed93 7a00 	vldr	s14, [r3]
    125c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1264:	bfcc      	ite	gt
    1266:	2101      	movgt	r1, #1
    1268:	2100      	movle	r1, #0
    126a:	f009 f839 	bl	a2e0 <__tLivingString2_setLevMode_veneer>
				tLivingString2_setTargetLev(&strings[i], knobScaled[1]);
    126e:	4b4d      	ldr	r3, [pc, #308]	; (13a4 <audioFrameString2+0x304>)
    1270:	4638      	mov	r0, r7
    1272:	ed93 0a01 	vldr	s0, [r3, #4]
    1276:	f009 f843 	bl	a300 <__tLivingString2_setTargetLev_veneer>
				int delayLength = (int)strings[i]->waveLengthInSamples;
    127a:	683a      	ldr	r2, [r7, #0]
				int beforeLength = (delayLength * knobScaled[2]);
    127c:	4b49      	ldr	r3, [pc, #292]	; (13a4 <audioFrameString2+0x304>)
				int afterLength = (delayLength * (1.0f - knobScaled[2]));
    127e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
				int delayLength = (int)strings[i]->waveLengthInSamples;
    1282:	ed92 6a02 	vldr	s12, [r2, #8]
				float pluckAmp = amplitz * 2.0f; //was 4
    1286:	ee38 7a08 	vadd.f32	s14, s16, s16
				int beforeLength = (delayLength * knobScaled[2]);
    128a:	edd3 6a02 	vldr	s13, [r3, #8]
				int delayLength = (int)strings[i]->waveLengthInSamples;
    128e:	eebd 6ac6 	vcvt.s32.f32	s12, s12
				int afterLength = (delayLength * (1.0f - knobScaled[2]));
    1292:	ee77 7ae6 	vsub.f32	s15, s15, s13
				int delayLength = (int)strings[i]->waveLengthInSamples;
    1296:	ee16 ca10 	vmov	ip, s12
				int beforeLength = (delayLength * knobScaled[2]);
    129a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    129e:	ee66 6a26 	vmul.f32	s13, s12, s13
				int afterLength = (delayLength * (1.0f - knobScaled[2]));
    12a2:	ee67 7a86 	vmul.f32	s15, s15, s12
				int beforeLength = (delayLength * knobScaled[2]);
    12a6:	eefd 6ae6 	vcvt.s32.f32	s13, s13
				int afterLength = (delayLength * (1.0f - knobScaled[2]));
    12aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				int beforeLength = (delayLength * knobScaled[2]);
    12ae:	ee16 0a90 	vmov	r0, s13
				if (beforeLength > 0)
    12b2:	2800      	cmp	r0, #0
    12b4:	dd45      	ble.n	1342 <audioFrameString2+0x2a2>
					beforePickIncrement = pluckAmp / beforeLength;
    12b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    12ba:	eec7 5a26 	vdiv.f32	s11, s14, s13
				if (afterLength > 0)
    12be:	ee17 3a90 	vmov	r3, s15
    12c2:	2b00      	cmp	r3, #0
    12c4:	dd03      	ble.n	12ce <audioFrameString2+0x22e>
					afterPickIncrement = pluckAmp / afterLength;
    12c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    12ca:	ee87 7a27 	vdiv.f32	s14, s14, s15
				for (int j = 0; j < delayLength; j++)
    12ce:	f1bc 0f00 	cmp.w	ip, #0
    12d2:	dd3a      	ble.n	134a <audioFrameString2+0x2aa>
				float value = 0.0f;
    12d4:	eddf 7a28 	vldr	s15, [pc, #160]	; 1378 <audioFrameString2+0x2d8>
				for (int j = 0; j < delayLength; j++)
    12d8:	2300      	movs	r3, #0
						strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
    12da:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
				for (int j = 0; j < delayLength; j++)
    12de:	46a6      	mov	lr, r4
    12e0:	e01c      	b.n	131c <audioFrameString2+0x27c>
						strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
    12e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
						value += beforePickIncrement;
    12e4:	ee77 7aa5 	vadd.f32	s15, s15, s11
						strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
    12e8:	698a      	ldr	r2, [r1, #24]
    12ea:	688c      	ldr	r4, [r1, #8]
    12ec:	ee67 6a86 	vmul.f32	s13, s15, s12
    12f0:	441a      	add	r2, r3
    12f2:	6849      	ldr	r1, [r1, #4]
    12f4:	4022      	ands	r2, r4
    12f6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    12fa:	edc2 6a00 	vstr	s13, [r2]
						strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
    12fe:	683a      	ldr	r2, [r7, #0]
    1300:	6b91      	ldr	r1, [r2, #56]	; 0x38
						strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    1302:	698a      	ldr	r2, [r1, #24]
    1304:	688c      	ldr	r4, [r1, #8]
    1306:	441a      	add	r2, r3
    1308:	6849      	ldr	r1, [r1, #4]
				for (int j = 0; j < delayLength; j++)
    130a:	3301      	adds	r3, #1
						strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    130c:	4022      	ands	r2, r4
				for (int j = 0; j < delayLength; j++)
    130e:	459c      	cmp	ip, r3
						strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    1310:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1314:	edc2 6a00 	vstr	s13, [r2]
				for (int j = 0; j < delayLength; j++)
    1318:	d016      	beq.n	1348 <audioFrameString2+0x2a8>
						strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
    131a:	683a      	ldr	r2, [r7, #0]
					if (j < beforeLength)
    131c:	4298      	cmp	r0, r3
    131e:	dce0      	bgt.n	12e2 <audioFrameString2+0x242>
						strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
    1320:	6b11      	ldr	r1, [r2, #48]	; 0x30
						value -= afterPickIncrement;
    1322:	ee77 7ac7 	vsub.f32	s15, s15, s14
						strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
    1326:	698a      	ldr	r2, [r1, #24]
    1328:	688c      	ldr	r4, [r1, #8]
    132a:	ee67 6a86 	vmul.f32	s13, s15, s12
    132e:	441a      	add	r2, r3
    1330:	6849      	ldr	r1, [r1, #4]
    1332:	4022      	ands	r2, r4
    1334:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    1338:	edc2 6a00 	vstr	s13, [r2]
						strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
    133c:	683a      	ldr	r2, [r7, #0]
    133e:	6b51      	ldr	r1, [r2, #52]	; 0x34
    1340:	e7df      	b.n	1302 <audioFrameString2+0x262>
					beforePickIncrement = pluckAmp;
    1342:	eef0 5a47 	vmov.f32	s11, s14
    1346:	e7ba      	b.n	12be <audioFrameString2+0x21e>
    1348:	4674      	mov	r4, lr
				tLivingString2_setDecay(&strings[i], knobScaled[3] * 500.0f);
    134a:	4b16      	ldr	r3, [pc, #88]	; (13a4 <audioFrameString2+0x304>)
    134c:	4638      	mov	r0, r7
    134e:	ed93 0a03 	vldr	s0, [r3, #12]
    1352:	ee20 0a09 	vmul.f32	s0, s0, s18
    1356:	f008 ff93 	bl	a280 <__tLivingString2_setDecay_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    135a:	7832      	ldrb	r2, [r6, #0]
			{
    135c:	e70a      	b.n	1174 <audioFrameString2+0xd4>
    135e:	bf00      	nop
    1360:	58020000 	.word	0x58020000
    1364:	e0001000 	.word	0xe0001000
    1368:	20000015 	.word	0x20000015
    136c:	20014870 	.word	0x20014870
    1370:	200050fc 	.word	0x200050fc
    1374:	20005754 	.word	0x20005754
    1378:	00000000 	.word	0x00000000
    137c:	3e4ccccd 	.word	0x3e4ccccd
    1380:	37800080 	.word	0x37800080
    1384:	43fa0000 	.word	0x43fa0000
    1388:	30000000 	.word	0x30000000
    138c:	4b000000 	.word	0x4b000000
    1390:	20014878 	.word	0x20014878
    1394:	20000004 	.word	0x20000004
    1398:	20014888 	.word	0x20014888
    139c:	20005144 	.word	0x20005144
    13a0:	200055cc 	.word	0x200055cc
    13a4:	20005290 	.word	0x20005290
    13a8:	20005b86 	.word	0x20005b86
    13ac:	20005594 	.word	0x20005594
    13b0:	20014858 	.word	0x20014858
    13b4:	20014838 	.word	0x20014838
    13b8:	f3af 8000 	nop.w
    13bc:	f3af 8000 	nop.w

000013c0 <audioTickAdditive>:
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
}


float __ATTR_ITCMRAM audioTickAdditive(void)
{
    13c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    13c4:	4d6b      	ldr	r5, [pc, #428]	; (1574 <audioTickAdditive+0x1b4>)
    13c6:	4e6c      	ldr	r6, [pc, #432]	; (1578 <audioTickAdditive+0x1b8>)
    13c8:	462c      	mov	r4, r5
    13ca:	f105 0730 	add.w	r7, r5, #48	; 0x30
    13ce:	ed2d 8b08 	vpush	{d8-d11}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    13d2:	4630      	mov	r0, r6
	for (int i = 0; i < 12; i++)
    13d4:	3604      	adds	r6, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    13d6:	f007 f803 	bl	83e0 <tExpSmooth_tick>
    13da:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    13de:	42bc      	cmp	r4, r7
    13e0:	d1f7      	bne.n	13d2 <audioTickAdditive+0x12>
	}

	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    13e2:	4866      	ldr	r0, [pc, #408]	; (157c <audioTickAdditive+0x1bc>)
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
		for (int j = 0; j < NUM_OVERTONES; j++)
		{

			float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    13e4:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    13e8:	f009 f822 	bl	a430 <__tNoise_tick_veneer>
    13ec:	4864      	ldr	r0, [pc, #400]	; (1580 <audioTickAdditive+0x1c0>)
    13ee:	f008 ff8f 	bl	a310 <__tVZFilter_tickEfficient_veneer>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    13f2:	4862      	ldr	r0, [pc, #392]	; (157c <audioTickAdditive+0x1bc>)
	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
    13f4:	eef0 aa40 	vmov.f32	s21, s0
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    13f8:	f009 f81a 	bl	a430 <__tNoise_tick_veneer>
    13fc:	4861      	ldr	r0, [pc, #388]	; (1584 <audioTickAdditive+0x1c4>)
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
    13fe:	2700      	movs	r7, #0
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    1400:	f008 ff86 	bl	a310 <__tVZFilter_tickEfficient_veneer>
	tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[0] * 128.0f));
    1404:	ed9f 8a60 	vldr	s16, [pc, #384]	; 1588 <audioTickAdditive+0x1c8>
    1408:	edd5 7a00 	vldr	s15, [r5]
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    140c:	ee7a aa80 	vadd.f32	s21, s21, s0
	tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[0] * 128.0f));
    1410:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 15bc <audioTickAdditive+0x1fc>
    1414:	ee27 0a88 	vmul.f32	s0, s15, s16
    1418:	4e5c      	ldr	r6, [pc, #368]	; (158c <audioTickAdditive+0x1cc>)
    141a:	f008 ff5d 	bl	a2d8 <__faster_mtof_veneer>
    141e:	4858      	ldr	r0, [pc, #352]	; (1580 <audioTickAdditive+0x1c0>)
    1420:	f008 ff66 	bl	a2f0 <__tVZFilter_setFreq_veneer>
	tVZFilter_setFreq(&noiseFilt2,faster_mtof(knobScaled[1] * 128.0f));
    1424:	ed95 0a01 	vldr	s0, [r5, #4]
    1428:	f8df 8194 	ldr.w	r8, [pc, #404]	; 15c0 <audioTickAdditive+0x200>
    142c:	ee20 0a08 	vmul.f32	s0, s0, s16
	float tempSamp = 0.0f;
    1430:	ed9f aa57 	vldr	s20, [pc, #348]	; 1590 <audioTickAdditive+0x1d0>
	tVZFilter_setFreq(&noiseFilt2,faster_mtof(knobScaled[1] * 128.0f));
    1434:	f008 ff50 	bl	a2d8 <__faster_mtof_veneer>
    1438:	4852      	ldr	r0, [pc, #328]	; (1584 <audioTickAdditive+0x1c4>)
    143a:	f008 ff59 	bl	a2f0 <__tVZFilter_setFreq_veneer>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    143e:	4855      	ldr	r0, [pc, #340]	; (1594 <audioTickAdditive+0x1d4>)
    1440:	f006 ffce 	bl	83e0 <tExpSmooth_tick>
    1444:	eeb0 ba40 	vmov.f32	s22, s0
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    1448:	ed9f 9a53 	vldr	s18, [pc, #332]	; 1598 <audioTickAdditive+0x1d8>
			//float tempFreq = 0.0f;
			if (tempFreq < 18000.0f)
    144c:	eddf 8a53 	vldr	s17, [pc, #332]	; 159c <audioTickAdditive+0x1dc>
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
    1450:	4b53      	ldr	r3, [pc, #332]	; (15a0 <audioTickAdditive+0x1e0>)
    1452:	00bc      	lsls	r4, r7, #2
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1454:	46c3      	mov	fp, r8
		for (int j = 0; j < NUM_OVERTONES; j++)
    1456:	f04f 0a00 	mov.w	sl, #0
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
    145a:	eb03 0087 	add.w	r0, r3, r7, lsl #2
    145e:	f007 f8af 	bl	85c0 <tADSRT_tick>
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1462:	4b50      	ldr	r3, [pc, #320]	; (15a4 <audioTickAdditive+0x1e4>)
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
    1464:	edd5 7a07 	vldr	s15, [r5, #28]
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
    1468:	eeb0 7a40 	vmov.f32	s14, s0
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    146c:	441c      	add	r4, r3
    146e:	ecf9 6a01 	vldmia	r9!, {s13}
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
    1472:	ee6a 7aa7 	vmul.f32	s15, s21, s15
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1476:	ed94 0a00 	vldr	s0, [r4]
    147a:	eb07 04c7 	add.w	r4, r7, r7, lsl #3
    147e:	ee30 0a26 	vadd.f32	s0, s0, s13
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
    1482:	eea7 aa27 	vfma.f32	s20, s14, s15
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1486:	f008 ff5f 	bl	a348 <__mtof_veneer>
    148a:	4b47      	ldr	r3, [pc, #284]	; (15a8 <audioTickAdditive+0x1e8>)
    148c:	eca6 0a01 	vstmia	r6!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
    1490:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    1494:	e004      	b.n	14a0 <audioTickAdditive+0xe0>
    1496:	f1ba 0f0c 	cmp.w	sl, #12
    149a:	f104 0404 	add.w	r4, r4, #4
    149e:	d030      	beq.n	1502 <audioTickAdditive+0x142>
			float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
    14a0:	4658      	mov	r0, fp
		for (int j = 0; j < NUM_OVERTONES; j++)
    14a2:	f10b 0b04 	add.w	fp, fp, #4
			float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
    14a6:	f007 f9fb 	bl	88a0 <tADSRT_tickNoInterp>
    14aa:	ee06 aa90 	vmov	s13, sl
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    14ae:	ed95 7a04 	vldr	s14, [r5, #16]
    14b2:	f10a 0a01 	add.w	sl, sl, #1
    14b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    14ba:	ed56 5a01 	vldr	s11, [r6, #-4]
    14be:	ee27 7a09 	vmul.f32	s14, s14, s18
    14c2:	ee07 aa90 	vmov	s15, sl
    14c6:	eeb0 6a69 	vmov.f32	s12, s19
    14ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
    14ce:	eeb0 8a40 	vmov.f32	s16, s0
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
    14d2:	eea6 6a87 	vfma.f32	s12, s13, s14
    14d6:	ee67 7aa5 	vmul.f32	s15, s15, s11
    14da:	ee27 0a86 	vmul.f32	s0, s15, s12
			if (tempFreq < 18000.0f)
    14de:	eeb4 0ae8 	vcmpe.f32	s0, s17
    14e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    14e6:	d5d6      	bpl.n	1496 <audioTickAdditive+0xd6>
			{
				tCycle_setFreq(&additive[i][j], tempFreq);
    14e8:	4620      	mov	r0, r4
    14ea:	f008 ff51 	bl	a390 <__tCycle_setFreq_veneer>
				//float upRamp = (j * invNumOvertones);
				//float downRamp = 1.0f - (j * invNumOvertones);

				//float freqWeight = (upRamp * knobScaled[0]) + (downRamp * (1.0f - knobScaled[0]));
				tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
    14ee:	4620      	mov	r0, r4
    14f0:	f008 ff3e 	bl	a370 <__tCycle_tick_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
    14f4:	f1ba 0f0c 	cmp.w	sl, #12
				tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
    14f8:	eea0 aa08 	vfma.f32	s20, s0, s16
		for (int j = 0; j < NUM_OVERTONES; j++)
    14fc:	f104 0404 	add.w	r4, r4, #4
    1500:	d1ce      	bne.n	14a0 <audioTickAdditive+0xe0>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
    1502:	f108 0848 	add.w	r8, r8, #72	; 0x48
    1506:	b397      	cbz	r7, 156e <audioTickAdditive+0x1ae>


	}

	//float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    1508:	eddf 0a28 	vldr	s1, [pc, #160]	; 15ac <audioTickAdditive+0x1ec>
    150c:	ed9f 1a28 	vldr	s2, [pc, #160]	; 15b0 <audioTickAdditive+0x1f0>
    1510:	ee6b 0a20 	vmul.f32	s1, s22, s1
    1514:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 1590 <audioTickAdditive+0x1d0>
    1518:	f007 fb62 	bl	8be0 <LEAF_clip>
	int volIdxInt = (int) volIdx;
    151c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
    1520:	4924      	ldr	r1, [pc, #144]	; (15b4 <audioTickAdditive+0x1f4>)
	float omAlpha = 1.0f - alpha;
    1522:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    1526:	4a24      	ldr	r2, [pc, #144]	; (15b8 <audioTickAdditive+0x1f8>)
	int volIdxInt = (int) volIdx;
    1528:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
    152c:	edd1 6a00 	vldr	s13, [r1]
    1530:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    1534:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    1536:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float omAlpha = 1.0f - alpha;
    153a:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    153e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    1542:	ee30 0a47 	vsub.f32	s0, s0, s14
    1546:	ee2a aa26 	vmul.f32	s20, s20, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    154a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    154e:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    1552:	ed93 7a00 	vldr	s14, [r3]
    1556:	edd2 6a00 	vldr	s13, [r2]
    155a:	ee20 0a26 	vmul.f32	s0, s0, s13
    155e:	eea7 0a27 	vfma.f32	s0, s14, s15
	return tempSamp;
}
    1562:	ee2a 0a00 	vmul.f32	s0, s20, s0
    1566:	ecbd 8b08 	vpop	{d8-d11}
    156a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    156e:	2701      	movs	r7, #1
    1570:	e76e      	b.n	1450 <audioTickAdditive+0x90>
    1572:	bf00      	nop
    1574:	20005290 	.word	0x20005290
    1578:	200052c0 	.word	0x200052c0
    157c:	20005590 	.word	0x20005590
    1580:	200055a0 	.word	0x200055a0
    1584:	200055a4 	.word	0x200055a4
    1588:	43000000 	.word	0x43000000
    158c:	20014808 	.word	0x20014808
    1590:	00000000 	.word	0x00000000
    1594:	2001490c 	.word	0x2001490c
    1598:	3b449ba6 	.word	0x3b449ba6
    159c:	468ca000 	.word	0x468ca000
    15a0:	200050fc 	.word	0x200050fc
    15a4:	20014850 	.word	0x20014850
    15a8:	20000944 	.word	0x20000944
    15ac:	42a00000 	.word	0x42a00000
    15b0:	42fe0000 	.word	0x42fe0000
    15b4:	2000000c 	.word	0x2000000c
    15b8:	2000053c 	.word	0x2000053c
    15bc:	20014858 	.word	0x20014858
    15c0:	200009d4 	.word	0x200009d4
    15c4:	f3af 8000 	nop.w
    15c8:	f3af 8000 	nop.w
    15cc:	f3af 8000 	nop.w
    15d0:	f3af 8000 	nop.w
    15d4:	f3af 8000 	nop.w
    15d8:	f3af 8000 	nop.w
    15dc:	f3af 8000 	nop.w

000015e0 <audioFrameAdditive>:
{
    15e0:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    15e2:	2201      	movs	r2, #1
    15e4:	2108      	movs	r1, #8
    15e6:	48a6      	ldr	r0, [pc, #664]	; (1880 <audioFrameAdditive+0x2a0>)
{
    15e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15ec:	ed2d 8b10 	vpush	{d8-d15}
    15f0:	b08d      	sub	sp, #52	; 0x34
    15f2:	9306      	str	r3, [sp, #24]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    15f4:	f008 ff10 	bl	a418 <__HAL_GPIO_WritePin_veneer>
	uint32_t tempCountFrame = DWT->CYCCNT;
    15f8:	4ba2      	ldr	r3, [pc, #648]	; (1884 <audioFrameAdditive+0x2a4>)
    15fa:	685b      	ldr	r3, [r3, #4]
    15fc:	9305      	str	r3, [sp, #20]
	if (newPluck)
    15fe:	4ba2      	ldr	r3, [pc, #648]	; (1888 <audioFrameAdditive+0x2a8>)
    1600:	681b      	ldr	r3, [r3, #0]
    1602:	2b00      	cmp	r3, #0
    1604:	d045      	beq.n	1692 <audioFrameAdditive+0xb2>
		for (int i = 0; i < numStringsThisBoard; i++)
    1606:	4ba1      	ldr	r3, [pc, #644]	; (188c <audioFrameAdditive+0x2ac>)
    1608:	781a      	ldrb	r2, [r3, #0]
    160a:	2a00      	cmp	r2, #0
    160c:	d03e      	beq.n	168c <audioFrameAdditive+0xac>
    160e:	4ba0      	ldr	r3, [pc, #640]	; (1890 <audioFrameAdditive+0x2b0>)
    1610:	f04f 0900 	mov.w	r9, #0
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    1614:	eddf ca9f 	vldr	s25, [pc, #636]	; 1894 <audioFrameAdditive+0x2b4>
    1618:	9302      	str	r3, [sp, #8]
    161a:	4b9f      	ldr	r3, [pc, #636]	; (1898 <audioFrameAdditive+0x2b8>)
    161c:	ed9f aa9f 	vldr	s20, [pc, #636]	; 189c <audioFrameAdditive+0x2bc>
    1620:	9301      	str	r3, [sp, #4]
    1622:	4b9f      	ldr	r3, [pc, #636]	; (18a0 <audioFrameAdditive+0x2c0>)
					height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1624:	eddf fa9f 	vldr	s31, [pc, #636]	; 18a4 <audioFrameAdditive+0x2c4>
    1628:	9304      	str	r3, [sp, #16]
    162a:	ed9f fa9f 	vldr	s30, [pc, #636]	; 18a8 <audioFrameAdditive+0x2c8>
    162e:	4b9f      	ldr	r3, [pc, #636]	; (18ac <audioFrameAdditive+0x2cc>)
    1630:	9303      	str	r3, [sp, #12]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    1632:	4b9f      	ldr	r3, [pc, #636]	; (18b0 <audioFrameAdditive+0x2d0>)
    1634:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
    1638:	b29b      	uxth	r3, r3
    163a:	b92b      	cbnz	r3, 1648 <audioFrameAdditive+0x68>
    163c:	4b9d      	ldr	r3, [pc, #628]	; (18b4 <audioFrameAdditive+0x2d4>)
    163e:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
    1642:	b29b      	uxth	r3, r3
    1644:	2b00      	cmp	r3, #0
    1646:	d16c      	bne.n	1722 <audioFrameAdditive+0x142>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    1648:	4b99      	ldr	r3, [pc, #612]	; (18b0 <audioFrameAdditive+0x2d0>)
    164a:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
    164e:	b29b      	uxth	r3, r3
    1650:	b12b      	cbz	r3, 165e <audioFrameAdditive+0x7e>
    1652:	4b98      	ldr	r3, [pc, #608]	; (18b4 <audioFrameAdditive+0x2d4>)
    1654:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
    1658:	b29b      	uxth	r3, r3
    165a:	2b00      	cmp	r3, #0
    165c:	d051      	beq.n	1702 <audioFrameAdditive+0x122>
		for (int i = 0; i < numStringsThisBoard; i++)
    165e:	9b02      	ldr	r3, [sp, #8]
			previousStringInputs[i] = stringInputs[i];
    1660:	4993      	ldr	r1, [pc, #588]	; (18b0 <audioFrameAdditive+0x2d0>)
		for (int i = 0; i < numStringsThisBoard; i++)
    1662:	3304      	adds	r3, #4
    1664:	9302      	str	r3, [sp, #8]
    1666:	9b01      	ldr	r3, [sp, #4]
    1668:	3348      	adds	r3, #72	; 0x48
    166a:	9301      	str	r3, [sp, #4]
    166c:	9b04      	ldr	r3, [sp, #16]
    166e:	3304      	adds	r3, #4
    1670:	9304      	str	r3, [sp, #16]
    1672:	9b03      	ldr	r3, [sp, #12]
    1674:	3304      	adds	r3, #4
    1676:	9303      	str	r3, [sp, #12]
			previousStringInputs[i] = stringInputs[i];
    1678:	4b8e      	ldr	r3, [pc, #568]	; (18b4 <audioFrameAdditive+0x2d4>)
    167a:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
    167e:	b29b      	uxth	r3, r3
    1680:	f821 3019 	strh.w	r3, [r1, r9, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    1684:	f109 0901 	add.w	r9, r9, #1
    1688:	454a      	cmp	r2, r9
    168a:	dcd2      	bgt.n	1632 <audioFrameAdditive+0x52>
		newPluck = 0;
    168c:	2300      	movs	r3, #0
    168e:	4a7e      	ldr	r2, [pc, #504]	; (1888 <audioFrameAdditive+0x2a8>)
    1690:	6013      	str	r3, [r2, #0]
    1692:	4d89      	ldr	r5, [pc, #548]	; (18b8 <audioFrameAdditive+0x2d8>)
    1694:	2400      	movs	r4, #0
    1696:	9b06      	ldr	r3, [sp, #24]
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
    1698:	ed9f 8a88 	vldr	s16, [pc, #544]	; 18bc <audioFrameAdditive+0x2dc>
    169c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    16a0:	f7ff fe8e 	bl	13c0 <audioTickAdditive>
    16a4:	ee20 0a08 	vmul.f32	s0, s0, s16
    16a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    16ac:	ee10 3a10 	vmov	r3, s0
    16b0:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    16b4:	3402      	adds	r4, #2
    16b6:	2c80      	cmp	r4, #128	; 0x80
    16b8:	d1f2      	bne.n	16a0 <audioFrameAdditive+0xc0>
	if (switchStrings)
    16ba:	4c81      	ldr	r4, [pc, #516]	; (18c0 <audioFrameAdditive+0x2e0>)
    16bc:	6823      	ldr	r3, [r4, #0]
    16be:	b9e3      	cbnz	r3, 16fa <audioFrameAdditive+0x11a>
	switchStrings = 0;
    16c0:	2200      	movs	r2, #0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    16c2:	4880      	ldr	r0, [pc, #512]	; (18c4 <audioFrameAdditive+0x2e4>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    16c4:	4b6f      	ldr	r3, [pc, #444]	; (1884 <audioFrameAdditive+0x2a4>)
	switchStrings = 0;
    16c6:	6022      	str	r2, [r4, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    16c8:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    16cc:	685b      	ldr	r3, [r3, #4]
    16ce:	9805      	ldr	r0, [sp, #20]
    16d0:	497d      	ldr	r1, [pc, #500]	; (18c8 <audioFrameAdditive+0x2e8>)
    16d2:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    16d4:	4c7d      	ldr	r4, [pc, #500]	; (18cc <audioFrameAdditive+0x2ec>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    16d6:	486a      	ldr	r0, [pc, #424]	; (1880 <audioFrameAdditive+0x2a0>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    16d8:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    16dc:	600b      	str	r3, [r1, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    16de:	2108      	movs	r1, #8
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    16e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    16e4:	ee67 7a87 	vmul.f32	s15, s15, s14
    16e8:	edc4 7a00 	vstr	s15, [r4]
}
    16ec:	b00d      	add	sp, #52	; 0x34
    16ee:	ecbd 8b10 	vpop	{d8-d15}
    16f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    16f6:	f008 be8f 	b.w	a418 <__HAL_GPIO_WritePin_veneer>
		switchStringModel(switchStrings);
    16fa:	6820      	ldr	r0, [r4, #0]
    16fc:	f7fe ffa0 	bl	640 <switchStringModel>
    1700:	e7de      	b.n	16c0 <audioFrameAdditive+0xe0>
    1702:	9b01      	ldr	r3, [sp, #4]
    1704:	461c      	mov	r4, r3
    1706:	f103 0530 	add.w	r5, r3, #48	; 0x30
					tADSRT_off(&additiveEnv[i][j]);
    170a:	4620      	mov	r0, r4
				for (int j = 0; j < NUM_OVERTONES; j++)
    170c:	3404      	adds	r4, #4
					tADSRT_off(&additiveEnv[i][j]);
    170e:	f006 ff37 	bl	8580 <tADSRT_off>
				for (int j = 0; j < NUM_OVERTONES; j++)
    1712:	42a5      	cmp	r5, r4
    1714:	d1f9      	bne.n	170a <audioFrameAdditive+0x12a>
				tADSRT_off(&fenvelopes[i]);
    1716:	9802      	ldr	r0, [sp, #8]
    1718:	f006 ff32 	bl	8580 <tADSRT_off>
		for (int i = 0; i < numStringsThisBoard; i++)
    171c:	4b5b      	ldr	r3, [pc, #364]	; (188c <audioFrameAdditive+0x2ac>)
    171e:	781a      	ldrb	r2, [r3, #0]
    1720:	e79d      	b.n	165e <audioFrameAdditive+0x7e>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1722:	4b64      	ldr	r3, [pc, #400]	; (18b4 <audioFrameAdditive+0x2d4>)
    1724:	eddf 7a6a 	vldr	s15, [pc, #424]	; 18d0 <audioFrameAdditive+0x2f0>
    1728:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
				stringOctave[i] = octave;
    172c:	9c04      	ldr	r4, [sp, #16]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    172e:	b29b      	uxth	r3, r3
				tADSRT_on(&fenvelopes[i], amplitz);
    1730:	9802      	ldr	r0, [sp, #8]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    1732:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 18f4 <audioFrameAdditive+0x314>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1736:	ee0c 3a10 	vmov	s24, r3
				stringOctave[i] = octave;
    173a:	4b66      	ldr	r3, [pc, #408]	; (18d4 <audioFrameAdditive+0x2f4>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
    173c:	eeb8 cacc 	vcvt.f32.s32	s24, s24
				stringOctave[i] = octave;
    1740:	681b      	ldr	r3, [r3, #0]
    1742:	6023      	str	r3, [r4, #0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1744:	ee2c ca27 	vmul.f32	s24, s24, s15
				tADSRT_on(&fenvelopes[i], amplitz);
    1748:	eeb0 0a4c 	vmov.f32	s0, s24
    174c:	f006 fef8 	bl	8540 <tADSRT_on>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1750:	4b61      	ldr	r3, [pc, #388]	; (18d8 <audioFrameAdditive+0x2f8>)
    1752:	edd4 7a00 	vldr	s15, [r4]
    1756:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    175a:	ed93 0a00 	vldr	s0, [r3]
    175e:	ee30 0a27 	vadd.f32	s0, s0, s15
    1762:	f008 fdf1 	bl	a348 <__mtof_veneer>
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    1766:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
    176a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    176e:	9b03      	ldr	r3, [sp, #12]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    1770:	eddb 6a02 	vldr	s13, [fp, #8]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1774:	ed83 0a00 	vstr	s0, [r3]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    1778:	eee6 7a87 	vfma.f32	s15, s13, s14
				int thisString = i + firstString;
    177c:	4b57      	ldr	r3, [pc, #348]	; (18dc <audioFrameAdditive+0x2fc>)
    177e:	681b      	ldr	r3, [r3, #0]
    1780:	444b      	add	r3, r9
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    1782:	ee60 9a27 	vmul.f32	s19, s0, s15
				if (thisString < 6)
    1786:	2b05      	cmp	r3, #5
					stringFade = (float)thisString * 0.2f;
    1788:	ee07 3a90 	vmov	s15, r3
				int thisString = i + firstString;
    178c:	9308      	str	r3, [sp, #32]
					stringFade = (float)thisString * 0.2f;
    178e:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
				if (thisString < 6)
    1792:	f340 8182 	ble.w	1a9a <audioFrameAdditive+0x4ba>
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    1796:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
					height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    179a:	4e51      	ldr	r6, [pc, #324]	; (18e0 <audioFrameAdditive+0x300>)
    179c:	eeb0 1a6f 	vmov.f32	s2, s31
    17a0:	ed96 7a03 	vldr	s14, [r6, #12]
    17a4:	eeb0 0a4f 	vmov.f32	s0, s30
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    17a8:	ee39 9a67 	vsub.f32	s18, s18, s15
    17ac:	eddf 7a4d 	vldr	s15, [pc, #308]	; 18e4 <audioFrameAdditive+0x304>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    17b0:	ee79 6ac7 	vsub.f32	s13, s19, s14
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    17b4:	ee29 9a27 	vmul.f32	s18, s18, s15
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    17b8:	edd6 7a05 	vldr	s15, [r6, #20]
    17bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    17c0:	eec6 0aa7 	vdiv.f32	s1, s13, s15
					height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    17c4:	ee70 0aa0 	vadd.f32	s1, s1, s1
    17c8:	f007 fa0a 	bl	8be0 <LEAF_clip>
    17cc:	eeb0 ba40 	vmov.f32	s22, s0
					height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    17d0:	ed96 7a00 	vldr	s14, [r6]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    17d4:	edd6 7a02 	vldr	s15, [r6, #8]
    17d8:	ee79 6ac7 	vsub.f32	s13, s19, s14
    17dc:	4d42      	ldr	r5, [pc, #264]	; (18e8 <audioFrameAdditive+0x308>)
    17de:	ee77 7ac7 	vsub.f32	s15, s15, s14
    17e2:	4c42      	ldr	r4, [pc, #264]	; (18ec <audioFrameAdditive+0x30c>)
					height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    17e4:	eeb0 1a6f 	vmov.f32	s2, s31
    17e8:	eeb0 0a4f 	vmov.f32	s0, s30
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    17ec:	eec6 0aa7 	vdiv.f32	s1, s13, s15
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    17f0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    17f4:	ee38 eacb 	vsub.f32	s28, s17, s22
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    17f8:	ee78 aac9 	vsub.f32	s21, s17, s18
					height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    17fc:	ee70 0aa0 	vadd.f32	s1, s1, s1
    1800:	f007 f9ee 	bl	8be0 <LEAF_clip>
				int height2Int = floor(height2);
    1804:	eeb7 7acb 	vcvt.f64.f32	d7, s22
				int height1Int = floor(height1);
    1808:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
    180c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1810:	ee78 eac0 	vsub.f32	s29, s17, s0
    1814:	9607      	str	r6, [sp, #28]
				int height2Int = floor(height2);
    1816:	febb 7b47 	vrintm.f64	d7, d7
    181a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
				int height1Int = floor(height1);
    181e:	febb 6b46 	vrintm.f64	d6, d6
    1822:	eebd 6bc6 	vcvt.s32.f64	s12, d6
					height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1826:	eef0 ba40 	vmov.f32	s23, s0
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    182a:	9f01      	ldr	r7, [sp, #4]
    182c:	ee17 3a10 	vmov	r3, s14
				float height2Float = height2 - height2Int;
    1830:	eef8 7ac7 	vcvt.f32.s32	s15, s14
				float height1Float = height1 - height1Int;
    1834:	ee16 2a10 	vmov	r2, s12
    1838:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
    183c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1840:	eb02 0842 	add.w	r8, r2, r2, lsl #1
    1844:	4a2a      	ldr	r2, [pc, #168]	; (18f0 <audioFrameAdditive+0x310>)
    1846:	011b      	lsls	r3, r3, #4
				float height2Float = height2 - height2Int;
    1848:	ee7b da67 	vsub.f32	s27, s22, s15
    184c:	eb02 1a08 	add.w	sl, r2, r8, lsl #4
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1850:	ee7e 7a27 	vadd.f32	s15, s28, s15
    1854:	f103 0190 	add.w	r1, r3, #144	; 0x90
    1858:	f503 73a8 	add.w	r3, r3, #336	; 0x150
    185c:	4650      	mov	r0, sl
    185e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 18f8 <audioFrameAdditive+0x318>
    1862:	1851      	adds	r1, r2, r1
    1864:	18d3      	adds	r3, r2, r3
    1866:	4646      	mov	r6, r8
				float height1Float = height1 - height1Int;
    1868:	ee30 da47 	vsub.f32	s26, s0, s14
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    186c:	ee7e ea87 	vadd.f32	s29, s29, s14
    1870:	f10a 0ac0 	add.w	sl, sl, #192	; 0xc0
    1874:	4689      	mov	r9, r1
    1876:	4680      	mov	r8, r0
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1878:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    187c:	9300      	str	r3, [sp, #0]
    187e:	e0c5      	b.n	1a0c <audioFrameAdditive+0x42c>
    1880:	58020000 	.word	0x58020000
    1884:	e0001000 	.word	0xe0001000
    1888:	20005594 	.word	0x20005594
    188c:	20000015 	.word	0x20000015
    1890:	200050fc 	.word	0x200050fc
    1894:	44fa0000 	.word	0x44fa0000
    1898:	200009d4 	.word	0x200009d4
    189c:	3dcccccd 	.word	0x3dcccccd
    18a0:	20014858 	.word	0x20014858
    18a4:	3ffeb852 	.word	0x3ffeb852
    18a8:	00000000 	.word	0x00000000
    18ac:	20014808 	.word	0x20014808
    18b0:	20005754 	.word	0x20005754
    18b4:	20014838 	.word	0x20014838
    18b8:	30000000 	.word	0x30000000
    18bc:	4b000000 	.word	0x4b000000
    18c0:	20014878 	.word	0x20014878
    18c4:	20000004 	.word	0x20000004
    18c8:	20014888 	.word	0x20014888
    18cc:	20005144 	.word	0x20005144
    18d0:	37800080 	.word	0x37800080
    18d4:	200055cc 	.word	0x200055cc
    18d8:	20014850 	.word	0x20014850
    18dc:	2000513c 	.word	0x2000513c
    18e0:	20000368 	.word	0x20000368
    18e4:	3e4ccccd 	.word	0x3e4ccccd
    18e8:	20000c0c 	.word	0x20000c0c
    18ec:	20014b1e 	.word	0x20014b1e
    18f0:	2000038c 	.word	0x2000038c
    18f4:	20005290 	.word	0x20005290
    18f8:	20000d2c 	.word	0x20000d2c
    18fc:	ed93 8a00 	vldr	s16, [r3]
						if (height2 < 1.0f)
    1900:	eeb4 bae8 	vcmpe.f32	s22, s17
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1904:	ed99 7a24 	vldr	s14, [r9, #144]	; 0x90
    1908:	ee2d 8a88 	vmul.f32	s16, s27, s16
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    190c:	edda 7a00 	vldr	s15, [sl]
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1910:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
						if (height2 < 1.0f)
    1914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1918:	ee6d 7a27 	vmul.f32	s15, s26, s15
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    191c:	9b07      	ldr	r3, [sp, #28]
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    191e:	eea7 8a26 	vfma.f32	s16, s14, s13
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1922:	ed98 7a24 	vldr	s14, [r8, #144]	; 0x90
    1926:	eee7 7a2e 	vfma.f32	s15, s14, s29
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    192a:	ee28 8a2a 	vmul.f32	s16, s16, s21
    192e:	eea9 8a27 	vfma.f32	s16, s18, s15
						if (height2 < 1.0f)
    1932:	f100 80e5 	bmi.w	1b00 <audioFrameAdditive+0x520>
							d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
    1936:	eef0 0a69 	vmov.f32	s1, s19
    193a:	ed93 1a08 	vldr	s2, [r3, #32]
    193e:	ed93 0a07 	vldr	s0, [r3, #28]
    1942:	ed95 ea3c 	vldr	s28, [r5, #240]	; 0xf0
    1946:	f007 f94b 	bl	8be0 <LEAF_clip>
    194a:	ed96 7a3c 	vldr	s14, [r6, #240]	; 0xf0
    194e:	eeae 7a00 	vfma.f32	s14, s28, s0
    1952:	ee88 ea87 	vdiv.f32	s28, s17, s14
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    1956:	9b07      	ldr	r3, [sp, #28]
						if (height1 < 1.0f)
    1958:	eef4 bae8 	vcmpe.f32	s23, s17
    195c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1960:	f100 80b9 	bmi.w	1ad6 <audioFrameAdditive+0x4f6>
							d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    1964:	edd5 6a24 	vldr	s13, [r5, #144]	; 0x90
    1968:	eef0 0a69 	vmov.f32	s1, s19
    196c:	ed93 1a05 	vldr	s2, [r3, #20]
    1970:	ed93 0a04 	vldr	s0, [r3, #16]
    1974:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
    1978:	f007 f932 	bl	8be0 <LEAF_clip>
    197c:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
    1980:	ed96 7a24 	vldr	s14, [r6, #144]	; 0x90
    1984:	eea6 7a80 	vfma.f32	s14, s13, s0
    1988:	eec8 6a87 	vdiv.f32	s13, s17, s14
				for (int j = 0; j < NUM_OVERTONES; j++)
    198c:	9b00      	ldr	r3, [sp, #0]
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    198e:	4638      	mov	r0, r7
    1990:	4a79      	ldr	r2, [pc, #484]	; (1b78 <audioFrameAdditive+0x598>)
				for (int j = 0; j < NUM_OVERTONES; j++)
    1992:	3504      	adds	r5, #4
    1994:	3304      	adds	r3, #4
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    1996:	ed9b 0a05 	vldr	s0, [fp, #20]
				for (int j = 0; j < NUM_OVERTONES; j++)
    199a:	3604      	adds	r6, #4
    199c:	f108 0804 	add.w	r8, r8, #4
    19a0:	9300      	str	r3, [sp, #0]
						thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    19a2:	ee6e 7a2a 	vmul.f32	s15, s28, s21
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    19a6:	7823      	ldrb	r3, [r4, #0]
    19a8:	ee20 0a0a 	vmul.f32	s0, s0, s20
				for (int j = 0; j < NUM_OVERTONES; j++)
    19ac:	f10a 0a04 	add.w	sl, sl, #4
    19b0:	f109 0904 	add.w	r9, r9, #4
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    19b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    19b8:	eee6 7a89 	vfma.f32	s15, s13, s18
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    19bc:	ed93 7a00 	vldr	s14, [r3]
    19c0:	ee20 0a07 	vmul.f32	s0, s0, s14
    19c4:	ed9b 7a03 	vldr	s14, [fp, #12]
    19c8:	ee27 7a2c 	vmul.f32	s14, s14, s25
    19cc:	eea7 0a87 	vfma.f32	s0, s15, s14
    19d0:	f006 fd46 	bl	8460 <tADSRT_setDecay>
					currentRandom++;
    19d4:	7823      	ldrb	r3, [r4, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    19d6:	4a68      	ldr	r2, [pc, #416]	; (1b78 <audioFrameAdditive+0x598>)
    19d8:	4638      	mov	r0, r7
					currentRandom++;
    19da:	3301      	adds	r3, #1
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    19dc:	eddb 7a06 	vldr	s15, [fp, #24]
				for (int j = 0; j < NUM_OVERTONES; j++)
    19e0:	3704      	adds	r7, #4
					currentRandom++;
    19e2:	b2db      	uxtb	r3, r3
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    19e4:	ee67 7a8a 	vmul.f32	s15, s15, s20
					currentRandom++;
    19e8:	7023      	strb	r3, [r4, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    19ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    19ee:	ed93 7a00 	vldr	s14, [r3]
    19f2:	eea7 8a27 	vfma.f32	s16, s14, s15
    19f6:	ee28 0a0c 	vmul.f32	s0, s16, s24
    19fa:	f006 fda1 	bl	8540 <tADSRT_on>
					currentRandom++;
    19fe:	7823      	ldrb	r3, [r4, #0]
    1a00:	3301      	adds	r3, #1
    1a02:	7023      	strb	r3, [r4, #0]
				for (int j = 0; j < NUM_OVERTONES; j++)
    1a04:	4b5d      	ldr	r3, [pc, #372]	; (1b7c <audioFrameAdditive+0x59c>)
    1a06:	42ab      	cmp	r3, r5
    1a08:	f000 80b1 	beq.w	1b6e <audioFrameAdditive+0x58e>
					if (thisString < 6)
    1a0c:	9b08      	ldr	r3, [sp, #32]
    1a0e:	2b05      	cmp	r3, #5
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1a10:	9b00      	ldr	r3, [sp, #0]
					if (thisString < 6)
    1a12:	f77f af73 	ble.w	18fc <audioFrameAdditive+0x31c>
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1a16:	edd3 7a00 	vldr	s15, [r3]
						if (height2 < 1.0f)
    1a1a:	eeb4 bae8 	vcmpe.f32	s22, s17
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1a1e:	ed99 8a00 	vldr	s16, [r9]
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1a22:	ed9a 7a00 	vldr	s14, [sl]
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1a26:	eea7 8aad 	vfma.f32	s16, s15, s27
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1a2a:	edd8 7a00 	vldr	s15, [r8]
						if (height2 < 1.0f)
    1a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    1a32:	9b07      	ldr	r3, [sp, #28]
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1a34:	eee7 7a0d 	vfma.f32	s15, s14, s26
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    1a38:	ee28 8a2a 	vmul.f32	s16, s16, s21
    1a3c:	eea9 8a27 	vfma.f32	s16, s18, s15
						if (height2 < 1.0f)
    1a40:	f100 8084 	bmi.w	1b4c <audioFrameAdditive+0x56c>
							d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    1a44:	eef0 0a69 	vmov.f32	s1, s19
    1a48:	ed93 1a05 	vldr	s2, [r3, #20]
    1a4c:	ed93 0a04 	vldr	s0, [r3, #16]
    1a50:	ed95 ea24 	vldr	s28, [r5, #144]	; 0x90
    1a54:	f007 f8c4 	bl	8be0 <LEAF_clip>
    1a58:	ed96 7a24 	vldr	s14, [r6, #144]	; 0x90
    1a5c:	eeae 7a00 	vfma.f32	s14, s28, s0
    1a60:	ee88 ea87 	vdiv.f32	s28, s17, s14
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    1a64:	9b07      	ldr	r3, [sp, #28]
						if (height1 < 1.0f)
    1a66:	eef4 bae8 	vcmpe.f32	s23, s17
    1a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1a6e:	d458      	bmi.n	1b22 <audioFrameAdditive+0x542>
							d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    1a70:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
    1a74:	eef0 0a69 	vmov.f32	s1, s19
    1a78:	ed93 1a02 	vldr	s2, [r3, #8]
    1a7c:	ed93 0a01 	vldr	s0, [r3, #4]
    1a80:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
    1a84:	f007 f8ac 	bl	8be0 <LEAF_clip>
    1a88:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
    1a8c:	ed96 7a0c 	vldr	s14, [r6, #48]	; 0x30
    1a90:	eea6 7a80 	vfma.f32	s14, s13, s0
    1a94:	eec8 6a87 	vdiv.f32	s13, s17, s14
    1a98:	e778      	b.n	198c <audioFrameAdditive+0x3ac>
					height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1a9a:	4e39      	ldr	r6, [pc, #228]	; (1b80 <audioFrameAdditive+0x5a0>)
    1a9c:	eeb0 1a6f 	vmov.f32	s2, s31
					stringFade = (float)thisString * 0.2f;
    1aa0:	eddf 7a38 	vldr	s15, [pc, #224]	; 1b84 <audioFrameAdditive+0x5a4>
					height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1aa4:	eeb0 0a4f 	vmov.f32	s0, s30
    1aa8:	ed96 7a06 	vldr	s14, [r6, #24]
					stringFade = (float)thisString * 0.2f;
    1aac:	ee29 9a27 	vmul.f32	s18, s18, s15
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    1ab0:	edd6 7a08 	vldr	s15, [r6, #32]
    1ab4:	ee79 6ac7 	vsub.f32	s13, s19, s14
    1ab8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    1abc:	eec6 0aa7 	vdiv.f32	s1, s13, s15
					height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1ac0:	ee70 0aa0 	vadd.f32	s1, s1, s1
    1ac4:	f007 f88c 	bl	8be0 <LEAF_clip>
					height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1ac8:	ed96 7a03 	vldr	s14, [r6, #12]
					height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1acc:	eeb0 ba40 	vmov.f32	s22, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
    1ad0:	edd6 7a05 	vldr	s15, [r6, #20]
    1ad4:	e680      	b.n	17d8 <audioFrameAdditive+0x1f8>
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    1ad6:	edd5 6a18 	vldr	s13, [r5, #96]	; 0x60
    1ada:	eef0 0a69 	vmov.f32	s1, s19
    1ade:	ed93 1a04 	vldr	s2, [r3, #16]
    1ae2:	ed93 0a03 	vldr	s0, [r3, #12]
    1ae6:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
    1aea:	f007 f879 	bl	8be0 <LEAF_clip>
    1aee:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
    1af2:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    1af6:	eea6 7a80 	vfma.f32	s14, s13, s0
    1afa:	eec8 6a87 	vdiv.f32	s13, s17, s14
    1afe:	e745      	b.n	198c <audioFrameAdditive+0x3ac>
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    1b00:	eef0 0a69 	vmov.f32	s1, s19
    1b04:	ed93 1a07 	vldr	s2, [r3, #28]
    1b08:	ed93 0a06 	vldr	s0, [r3, #24]
    1b0c:	ed95 ea30 	vldr	s28, [r5, #192]	; 0xc0
    1b10:	f007 f866 	bl	8be0 <LEAF_clip>
    1b14:	ed96 7a30 	vldr	s14, [r6, #192]	; 0xc0
    1b18:	eeae 7a00 	vfma.f32	s14, s28, s0
    1b1c:	ee88 ea87 	vdiv.f32	s28, s17, s14
    1b20:	e719      	b.n	1956 <audioFrameAdditive+0x376>
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    1b22:	edd5 6a00 	vldr	s13, [r5]
    1b26:	eef0 0a69 	vmov.f32	s1, s19
    1b2a:	ed93 1a01 	vldr	s2, [r3, #4]
    1b2e:	ed93 0a00 	vldr	s0, [r3]
    1b32:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
    1b36:	f007 f853 	bl	8be0 <LEAF_clip>
    1b3a:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
    1b3e:	ed96 7a00 	vldr	s14, [r6]
    1b42:	eea6 7a80 	vfma.f32	s14, s13, s0
    1b46:	eec8 6a87 	vdiv.f32	s13, s17, s14
    1b4a:	e71f      	b.n	198c <audioFrameAdditive+0x3ac>
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    1b4c:	eef0 0a69 	vmov.f32	s1, s19
    1b50:	ed93 1a04 	vldr	s2, [r3, #16]
    1b54:	ed93 0a03 	vldr	s0, [r3, #12]
    1b58:	ed95 ea18 	vldr	s28, [r5, #96]	; 0x60
    1b5c:	f007 f840 	bl	8be0 <LEAF_clip>
    1b60:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    1b64:	eeae 7a00 	vfma.f32	s14, s28, s0
    1b68:	ee88 ea87 	vdiv.f32	s28, s17, s14
    1b6c:	e77a      	b.n	1a64 <audioFrameAdditive+0x484>
		for (int i = 0; i < numStringsThisBoard; i++)
    1b6e:	4b06      	ldr	r3, [pc, #24]	; (1b88 <audioFrameAdditive+0x5a8>)
    1b70:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
    1b74:	781a      	ldrb	r2, [r3, #0]
    1b76:	e572      	b.n	165e <audioFrameAdditive+0x7e>
    1b78:	20005784 	.word	0x20005784
    1b7c:	20000c3c 	.word	0x20000c3c
    1b80:	20000368 	.word	0x20000368
    1b84:	3e4ccccd 	.word	0x3e4ccccd
    1b88:	20000015 	.word	0x20000015
    1b8c:	f3af 8000 	nop.w
    1b90:	f3af 8000 	nop.w
    1b94:	f3af 8000 	nop.w
    1b98:	f3af 8000 	nop.w
    1b9c:	f3af 8000 	nop.w

00001ba0 <oscillator_tick>:



void __ATTR_ITCMRAM oscillator_tick(float note, int string)
{
    1ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < NUM_OSC; i++)
	{
		oscOuts[0][i][string] = 0.0f;
    1ba4:	0082      	lsls	r2, r0, #2
    1ba6:	4cbc      	ldr	r4, [pc, #752]	; (1e98 <oscillator_tick+0x2f8>)
    1ba8:	1c85      	adds	r5, r0, #2
    1baa:	f04f 0b00 	mov.w	fp, #0
		oscOuts[1][i][string] = 0.0f;
    1bae:	f100 0108 	add.w	r1, r0, #8
		oscOuts[0][i][string] = 0.0f;
    1bb2:	1d07      	adds	r7, r0, #4
    1bb4:	eb04 0a80 	add.w	sl, r4, r0, lsl #2
		oscOuts[1][i][string] = 0.0f;
    1bb8:	1d86      	adds	r6, r0, #6
{
    1bba:	4603      	mov	r3, r0
		oscOuts[1][i][string] = 0.0f;
    1bbc:	300a      	adds	r0, #10
	}
	for (int osc = 0; osc < oscToTick; osc++)
    1bbe:	f8df 9310 	ldr.w	r9, [pc, #784]	; 1ed0 <oscillator_tick+0x330>
		oscOuts[1][i][string] = 0.0f;
    1bc2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
{
    1bc6:	ed2d 8b06 	vpush	{d8-d10}
    1bca:	b089      	sub	sp, #36	; 0x24
		oscOuts[0][i][string] = 0.0f;
    1bcc:	f8ca b000 	str.w	fp, [sl]
		oscOuts[1][i][string] = 0.0f;
    1bd0:	f8c6 b000 	str.w	fp, [r6]
		oscOuts[0][i][string] = 0.0f;
    1bd4:	9201      	str	r2, [sp, #4]
    1bd6:	eb04 0285 	add.w	r2, r4, r5, lsl #2
		oscOuts[1][i][string] = 0.0f;
    1bda:	9102      	str	r1, [sp, #8]
		oscOuts[0][i][string] = 0.0f;
    1bdc:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    1be0:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    1be4:	9003      	str	r0, [sp, #12]
    1be6:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[0][i][string] = 0.0f;
    1bea:	eb04 0287 	add.w	r2, r4, r7, lsl #2
    1bee:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    1bf2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    1bf6:	f8c2 b000 	str.w	fp, [r2]
	for (int osc = 0; osc < oscToTick; osc++)
    1bfa:	f899 2000 	ldrb.w	r2, [r9]
    1bfe:	b1a2      	cbz	r2, 1c2a <oscillator_tick+0x8a>
	{
		if (oscOn[osc])
    1c00:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 1ed4 <oscillator_tick+0x334>
    1c04:	eef0 8a40 	vmov.f32	s17, s0
    1c08:	f898 0000 	ldrb.w	r0, [r8]
    1c0c:	b990      	cbnz	r0, 1c34 <oscillator_tick+0x94>
	for (int osc = 0; osc < oscToTick; osc++)
    1c0e:	2a01      	cmp	r2, #1
    1c10:	d90b      	bls.n	1c2a <oscillator_tick+0x8a>
		if (oscOn[osc])
    1c12:	f898 1001 	ldrb.w	r1, [r8, #1]
    1c16:	2900      	cmp	r1, #0
    1c18:	f040 8097 	bne.w	1d4a <oscillator_tick+0x1aa>
	for (int osc = 0; osc < oscToTick; osc++)
    1c1c:	2a02      	cmp	r2, #2
    1c1e:	d904      	bls.n	1c2a <oscillator_tick+0x8a>
		if (oscOn[osc])
    1c20:	f898 2002 	ldrb.w	r2, [r8, #2]
    1c24:	2a00      	cmp	r2, #0
    1c26:	f040 8157 	bne.w	1ed8 <oscillator_tick+0x338>

			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
		}
	}
}
    1c2a:	b009      	add	sp, #36	; 0x24
    1c2c:	ecbd 8b06 	vpop	{d8-d10}
    1c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float freqOffset= oscParams[OscFreq].realVal[string];
    1c34:	00a9      	lsls	r1, r5, #2
    1c36:	4a99      	ldr	r2, [pc, #612]	; (1e9c <oscillator_tick+0x2fc>)
    1c38:	9305      	str	r3, [sp, #20]
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1c3a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
			float freqOffset= oscParams[OscFreq].realVal[string];
    1c3e:	440a      	add	r2, r1
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1c40:	9b01      	ldr	r3, [sp, #4]
    1c42:	4897      	ldr	r0, [pc, #604]	; (1ea0 <oscillator_tick+0x300>)
			float freqToSmooth = (note + (fine*0.01f));
    1c44:	ed92 7ab6 	vldr	s14, [r2, #728]	; 0x2d8
    1c48:	eddf 7a96 	vldr	s15, [pc, #600]	; 1ea4 <oscillator_tick+0x304>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1c4c:	4418      	add	r0, r3
			float filterSend = oscParams[OscFilterSend].realVal[string];
    1c4e:	ed92 9afc 	vldr	s18, [r2, #1008]	; 0x3f0
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1c52:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    1c56:	ed92 aabd 	vldr	s20, [r2, #756]	; 0x2f4
			float amp = oscParams[OscAmp].realVal[string];
    1c5a:	edd2 9acb 	vldr	s19, [r2, #812]	; 0x32c
			float shape = oscParams[OscShape].realVal[string];
    1c5e:	edd2 aac4 	vldr	s21, [r2, #784]	; 0x310
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1c62:	9004      	str	r0, [sp, #16]
    1c64:	f006 fbcc 	bl	8400 <tExpSmooth_setDest>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    1c68:	9804      	ldr	r0, [sp, #16]
    1c6a:	f006 fbb9 	bl	83e0 <tExpSmooth_tick>
    1c6e:	9b01      	ldr	r3, [sp, #4]
    1c70:	4a8d      	ldr	r2, [pc, #564]	; (1ea8 <oscillator_tick+0x308>)
    1c72:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1c76:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 1eac <oscillator_tick+0x30c>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    1c7a:	441a      	add	r2, r3
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1c7c:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 1eb0 <oscillator_tick+0x310>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    1c80:	edd2 7a00 	vldr	s15, [r2]
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1c84:	ee70 0aa7 	vadd.f32	s1, s1, s15
    1c88:	f006 ffaa 	bl	8be0 <LEAF_clip>
    1c8c:	ed9f 7a89 	vldr	s14, [pc, #548]	; 1eb4 <oscillator_tick+0x314>
    1c90:	eddf 7a89 	vldr	s15, [pc, #548]	; 1eb8 <oscillator_tick+0x318>
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1c94:	eef0 0a6a 	vmov.f32	s1, s21
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1c98:	4888      	ldr	r0, [pc, #544]	; (1ebc <oscillator_tick+0x31c>)
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1c9a:	eee0 7a07 	vfma.f32	s15, s0, s14
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    1c9e:	9b01      	ldr	r3, [sp, #4]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1ca0:	eeb0 0a4a 	vmov.f32	s0, s20
			float sample = 0.0f;
    1ca4:	f8cd b01c 	str.w	fp, [sp, #28]
	int tempIndexI = (int)tempIndexF;
    1ca8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1cac:	ee38 7a67 	vsub.f32	s14, s16, s15
	int tempIndexI = (int)tempIndexF;
    1cb0:	ee16 1a90 	vmov	r1, s13
	tempIndexF = tempIndexF -tempIndexI;
    1cb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1cb8:	1c4a      	adds	r2, r1, #1
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1cba:	f3c1 010e 	ubfx	r1, r1, #0, #15
	tempIndexF = tempIndexF -tempIndexI;
    1cbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1cc2:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1cc6:	ee37 7a26 	vadd.f32	s14, s14, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1cca:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1cce:	eb00 0081 	add.w	r0, r0, r1, lsl #2
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1cd2:	497b      	ldr	r1, [pc, #492]	; (1ec0 <oscillator_tick+0x320>)
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1cd4:	ed92 6a00 	vldr	s12, [r2]
    1cd8:	edd0 6a00 	vldr	s13, [r0]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1cdc:	a807      	add	r0, sp, #28
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1cde:	ee67 7a86 	vmul.f32	s15, s15, s12
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    1ce2:	4a78      	ldr	r2, [pc, #480]	; (1ec4 <oscillator_tick+0x324>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1ce4:	f8d1 b000 	ldr.w	fp, [r1]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    1ce8:	441a      	add	r2, r3
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1cea:	9b05      	ldr	r3, [sp, #20]
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1cec:	eee6 7a87 	vfma.f32	s15, s13, s14
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    1cf0:	ed92 7a00 	vldr	s14, [r2]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1cf4:	2200      	movs	r2, #0
    1cf6:	9304      	str	r3, [sp, #16]
    1cf8:	4611      	mov	r1, r2
    1cfa:	eea7 0a87 	vfma.f32	s0, s15, s14
    1cfe:	47d8      	blx	fp
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1d00:	4a66      	ldr	r2, [pc, #408]	; (1e9c <oscillator_tick+0x2fc>)
    1d02:	9b04      	ldr	r3, [sp, #16]
			sample *= amp;
    1d04:	eddd 7a07 	vldr	s15, [sp, #28]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1d08:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			sourceValues[osc][string] = sample;
    1d0c:	9901      	ldr	r1, [sp, #4]
			sample *= amp;
    1d0e:	ee29 7aa7 	vmul.f32	s14, s19, s15
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1d12:	ed92 6aaa 	vldr	s12, [r2, #680]	; 0x2a8
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    1d16:	ee78 7a49 	vsub.f32	s15, s16, s18
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    1d1a:	4a6b      	ldr	r2, [pc, #428]	; (1ec8 <oscillator_tick+0x328>)
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1d1c:	ee29 9a06 	vmul.f32	s18, s18, s12
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    1d20:	edd2 6a00 	vldr	s13, [r2]
			sourceValues[osc][string] = sample;
    1d24:	4a69      	ldr	r2, [pc, #420]	; (1ecc <oscillator_tick+0x32c>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    1d26:	ee67 6a26 	vmul.f32	s13, s14, s13
			sourceValues[osc][string] = sample;
    1d2a:	440a      	add	r2, r1
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    1d2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
			sourceValues[osc][string] = sample;
    1d30:	ed82 7a00 	vstr	s14, [r2]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1d34:	ee29 9a26 	vmul.f32	s18, s18, s13
	for (int osc = 0; osc < oscToTick; osc++)
    1d38:	f899 2000 	ldrb.w	r2, [r9]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    1d3c:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1d40:	ed8a 9a00 	vstr	s18, [sl]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    1d44:	edc6 7a00 	vstr	s15, [r6]
    1d48:	e761      	b.n	1c0e <oscillator_tick+0x6e>
			float freqOffset= oscParams[OscFreq].realVal[string];
    1d4a:	4e54      	ldr	r6, [pc, #336]	; (1e9c <oscillator_tick+0x2fc>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1d4c:	eeb0 0a68 	vmov.f32	s0, s17
    1d50:	4853      	ldr	r0, [pc, #332]	; (1ea0 <oscillator_tick+0x300>)
			float freqOffset= oscParams[OscFreq].realVal[string];
    1d52:	ea4f 0a85 	mov.w	sl, r5, lsl #2
			float fine = oscParams[OscFine].realVal[string];
    1d56:	f206 4244 	addw	r2, r6, #1092	; 0x444
			float freqToSmooth = (note + (fine*0.01f));
    1d5a:	eddf 7a52 	vldr	s15, [pc, #328]	; 1ea4 <oscillator_tick+0x304>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1d5e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    1d62:	9304      	str	r3, [sp, #16]
			float fine = oscParams[OscFine].realVal[string];
    1d64:	eb02 0285 	add.w	r2, r2, r5, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1d68:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1d6c:	9001      	str	r0, [sp, #4]
			float freqToSmooth = (note + (fine*0.01f));
    1d6e:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    1d72:	f506 628c 	add.w	r2, r6, #1120	; 0x460
    1d76:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1d7a:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    1d7e:	ed92 aa00 	vldr	s20, [r2]
			float shape = oscParams[OscShape].realVal[string];
    1d82:	f206 427c 	addw	r2, r6, #1148	; 0x47c
    1d86:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    1d8a:	edd2 aa00 	vldr	s21, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    1d8e:	f506 6293 	add.w	r2, r6, #1176	; 0x498
    1d92:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    1d96:	edd2 9a00 	vldr	s19, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    1d9a:	f206 525c 	addw	r2, r6, #1372	; 0x55c
    1d9e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    1da2:	ed92 9a00 	vldr	s18, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1da6:	f006 fb2b 	bl	8400 <tExpSmooth_setDest>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    1daa:	9801      	ldr	r0, [sp, #4]
    1dac:	f006 fb18 	bl	83e0 <tExpSmooth_tick>
    1db0:	4a3d      	ldr	r2, [pc, #244]	; (1ea8 <oscillator_tick+0x308>)
    1db2:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1db6:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 1eac <oscillator_tick+0x30c>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    1dba:	4452      	add	r2, sl
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1dbc:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 1eb0 <oscillator_tick+0x310>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    1dc0:	edd2 7a00 	vldr	s15, [r2]
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1dc4:	ee70 0aa7 	vadd.f32	s1, s1, s15
    1dc8:	f006 ff0a 	bl	8be0 <LEAF_clip>
    1dcc:	ed9f 7a39 	vldr	s14, [pc, #228]	; 1eb4 <oscillator_tick+0x314>
    1dd0:	eddf 7a39 	vldr	s15, [pc, #228]	; 1eb8 <oscillator_tick+0x318>
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1dd4:	eef0 0a6a 	vmov.f32	s1, s21
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1dd8:	4838      	ldr	r0, [pc, #224]	; (1ebc <oscillator_tick+0x31c>)
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1dda:	eee0 7a07 	vfma.f32	s15, s0, s14
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1dde:	9b04      	ldr	r3, [sp, #16]
    1de0:	eeb0 0a4a 	vmov.f32	s0, s20
    1de4:	9301      	str	r3, [sp, #4]
	int tempIndexI = (int)tempIndexF;
    1de6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1dea:	ee38 7a67 	vsub.f32	s14, s16, s15
	int tempIndexI = (int)tempIndexF;
    1dee:	ee16 1a90 	vmov	r1, s13
	tempIndexF = tempIndexF -tempIndexI;
    1df2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1df6:	1c4a      	adds	r2, r1, #1
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1df8:	f3c1 010e 	ubfx	r1, r1, #0, #15
	tempIndexF = tempIndexF -tempIndexI;
    1dfc:	ee77 7ae6 	vsub.f32	s15, s15, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1e00:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1e04:	ee37 7a26 	vadd.f32	s14, s14, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1e08:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1e0c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1e10:	2101      	movs	r1, #1
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1e12:	ed92 6a00 	vldr	s12, [r2]
    1e16:	edd0 6a00 	vldr	s13, [r0]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1e1a:	a807      	add	r0, sp, #28
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1e1c:	ee67 7a86 	vmul.f32	s15, s15, s12
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    1e20:	4a28      	ldr	r2, [pc, #160]	; (1ec4 <oscillator_tick+0x324>)
    1e22:	4452      	add	r2, sl
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1e24:	eee6 7a87 	vfma.f32	s15, s13, s14
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    1e28:	ed92 7a00 	vldr	s14, [r2]
			float sample = 0.0f;
    1e2c:	2200      	movs	r2, #0
    1e2e:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1e30:	4a23      	ldr	r2, [pc, #140]	; (1ec0 <oscillator_tick+0x320>)
    1e32:	eea7 0a87 	vfma.f32	s0, s15, s14
    1e36:	f8d2 b004 	ldr.w	fp, [r2, #4]
    1e3a:	2200      	movs	r2, #0
    1e3c:	47d8      	blx	fp
			sample *= amp;
    1e3e:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    1e42:	9b02      	ldr	r3, [sp, #8]
    1e44:	ee78 7a49 	vsub.f32	s15, s16, s18
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    1e48:	481f      	ldr	r0, [pc, #124]	; (1ec8 <oscillator_tick+0x328>)
			sample *= amp;
    1e4a:	ee29 7a87 	vmul.f32	s14, s19, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    1e4e:	eb04 0183 	add.w	r1, r4, r3, lsl #2
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1e52:	9b01      	ldr	r3, [sp, #4]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    1e54:	edd0 6a00 	vldr	s13, [r0]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1e58:	f203 1005 	addw	r0, r3, #261	; 0x105
	for (int osc = 0; osc < oscToTick; osc++)
    1e5c:	f899 2000 	ldrb.w	r2, [r9]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    1e60:	ee67 6a26 	vmul.f32	s13, s14, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1e64:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	for (int osc = 0; osc < oscToTick; osc++)
    1e68:	2a02      	cmp	r2, #2
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    1e6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1e6e:	ed96 6a00 	vldr	s12, [r6]
    1e72:	ee29 9a06 	vmul.f32	s18, s18, s12
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    1e76:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1e7a:	ee29 9a26 	vmul.f32	s18, s18, s13
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    1e7e:	edc1 7a00 	vstr	s15, [r1]
			sourceValues[osc][string] = sample;
    1e82:	4912      	ldr	r1, [pc, #72]	; (1ecc <oscillator_tick+0x32c>)
    1e84:	4451      	add	r1, sl
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1e86:	44a2      	add	sl, r4
			sourceValues[osc][string] = sample;
    1e88:	ed81 7a00 	vstr	s14, [r1]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1e8c:	ed8a 9a00 	vstr	s18, [sl]
	for (int osc = 0; osc < oscToTick; osc++)
    1e90:	f63f aec6 	bhi.w	1c20 <oscillator_tick+0x80>
    1e94:	e6c9      	b.n	1c2a <oscillator_tick+0x8a>
    1e96:	bf00      	nop
    1e98:	20005608 	.word	0x20005608
    1e9c:	20019968 	.word	0x20019968
    1ea0:	20005730 	.word	0x20005730
    1ea4:	3c23d70a 	.word	0x3c23d70a
    1ea8:	20005538 	.word	0x20005538
    1eac:	43230000 	.word	0x43230000
    1eb0:	c3230000 	.word	0xc3230000
    1eb4:	42c80000 	.word	0x42c80000
    1eb8:	46800000 	.word	0x46800000
    1ebc:	30012000 	.word	0x30012000
    1ec0:	20005bfc 	.word	0x20005bfc
    1ec4:	20005148 	.word	0x20005148
    1ec8:	20000018 	.word	0x20000018
    1ecc:	200146d8 	.word	0x200146d8
    1ed0:	2000002c 	.word	0x2000002c
    1ed4:	20005604 	.word	0x20005604
			float freqOffset= oscParams[OscFreq].realVal[string];
    1ed8:	4e51      	ldr	r6, [pc, #324]	; (2020 <oscillator_tick+0x480>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1eda:	eeb0 0a68 	vmov.f32	s0, s17
    1ede:	4851      	ldr	r0, [pc, #324]	; (2024 <oscillator_tick+0x484>)
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1ee0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
			float fine = oscParams[OscFine].realVal[string];
    1ee4:	f506 62b6 	add.w	r2, r6, #1456	; 0x5b0
			float freqToSmooth = (note + (fine*0.01f));
    1ee8:	eddf 7a4f 	vldr	s15, [pc, #316]	; 2028 <oscillator_tick+0x488>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1eec:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    1ef0:	9302      	str	r3, [sp, #8]
			float fine = oscParams[OscFine].realVal[string];
    1ef2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1ef6:	9001      	str	r0, [sp, #4]
    1ef8:	00bf      	lsls	r7, r7, #2
			float freqToSmooth = (note + (fine*0.01f));
    1efa:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    1efe:	f206 52cc 	addw	r2, r6, #1484	; 0x5cc
    1f02:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1f06:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    1f0a:	edd2 9a00 	vldr	s19, [r2]
			float shape = oscParams[OscShape].realVal[string];
    1f0e:	f506 62bd 	add.w	r2, r6, #1512	; 0x5e8
    1f12:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    1f16:	ed92 aa00 	vldr	s20, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    1f1a:	f206 6204 	addw	r2, r6, #1540	; 0x604
    1f1e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    1f22:	edd2 8a00 	vldr	s17, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    1f26:	f506 62d9 	add.w	r2, r6, #1736	; 0x6c8
    1f2a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    1f2e:	ed92 9a00 	vldr	s18, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    1f32:	f006 fa65 	bl	8400 <tExpSmooth_setDest>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    1f36:	9801      	ldr	r0, [sp, #4]
    1f38:	f006 fa52 	bl	83e0 <tExpSmooth_tick>
    1f3c:	4a3b      	ldr	r2, [pc, #236]	; (202c <oscillator_tick+0x48c>)
    1f3e:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1f42:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 2030 <oscillator_tick+0x490>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    1f46:	443a      	add	r2, r7
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1f48:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 2034 <oscillator_tick+0x494>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    1f4c:	edd2 7a00 	vldr	s15, [r2]
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1f50:	ee70 0aa7 	vadd.f32	s1, s1, s15
    1f54:	f006 fe44 	bl	8be0 <LEAF_clip>
    1f58:	ed9f 7a37 	vldr	s14, [pc, #220]	; 2038 <oscillator_tick+0x498>
    1f5c:	eddf 7a37 	vldr	s15, [pc, #220]	; 203c <oscillator_tick+0x49c>
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1f60:	eef0 0a4a 	vmov.f32	s1, s20
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1f64:	4836      	ldr	r0, [pc, #216]	; (2040 <oscillator_tick+0x4a0>)
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
    1f66:	eee0 7a07 	vfma.f32	s15, s0, s14
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1f6a:	9b02      	ldr	r3, [sp, #8]
    1f6c:	eeb0 0a69 	vmov.f32	s0, s19
    1f70:	9301      	str	r3, [sp, #4]
	int tempIndexI = (int)tempIndexF;
    1f72:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1f76:	ee38 7a67 	vsub.f32	s14, s16, s15
	int tempIndexI = (int)tempIndexF;
    1f7a:	ee16 1a90 	vmov	r1, s13
	tempIndexF = tempIndexF -tempIndexI;
    1f7e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1f82:	1c4a      	adds	r2, r1, #1
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1f84:	f3c1 010e 	ubfx	r1, r1, #0, #15
	tempIndexF = tempIndexF -tempIndexI;
    1f88:	ee77 7ae6 	vsub.f32	s15, s15, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1f8c:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1f90:	ee37 7a26 	vadd.f32	s14, s14, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
    1f94:	eb00 0282 	add.w	r2, r0, r2, lsl #2
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
    1f98:	eb00 0081 	add.w	r0, r0, r1, lsl #2
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1f9c:	2102      	movs	r1, #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1f9e:	ed92 6a00 	vldr	s12, [r2]
    1fa2:	edd0 6a00 	vldr	s13, [r0]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1fa6:	a807      	add	r0, sp, #28
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1fa8:	ee67 7a86 	vmul.f32	s15, s15, s12
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    1fac:	4a25      	ldr	r2, [pc, #148]	; (2044 <oscillator_tick+0x4a4>)
    1fae:	443a      	add	r2, r7
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
    1fb0:	eee6 7a87 	vfma.f32	s15, s13, s14
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    1fb4:	ed92 7a00 	vldr	s14, [r2]
			float sample = 0.0f;
    1fb8:	2200      	movs	r2, #0
    1fba:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    1fbc:	4a22      	ldr	r2, [pc, #136]	; (2048 <oscillator_tick+0x4a8>)
    1fbe:	eea7 0a27 	vfma.f32	s0, s14, s15
    1fc2:	6895      	ldr	r5, [r2, #8]
    1fc4:	2200      	movs	r2, #0
    1fc6:	47a8      	blx	r5
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1fc8:	9b01      	ldr	r3, [sp, #4]
			sample *= amp;
    1fca:	eddd 7a07 	vldr	s15, [sp, #28]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1fce:	19e2      	adds	r2, r4, r7
    1fd0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    1fd4:	491d      	ldr	r1, [pc, #116]	; (204c <oscillator_tick+0x4ac>)
			sample *= amp;
    1fd6:	ee28 7aa7 	vmul.f32	s14, s17, s15
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    1fda:	9803      	ldr	r0, [sp, #12]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1fdc:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			sourceValues[osc][string] = sample;
    1fe0:	4b1b      	ldr	r3, [pc, #108]	; (2050 <oscillator_tick+0x4b0>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    1fe2:	ed91 6a00 	vldr	s12, [r1]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    1fe6:	ee78 7a49 	vsub.f32	s15, s16, s18
			sourceValues[osc][string] = sample;
    1fea:	443b      	add	r3, r7
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1fec:	edd6 6a00 	vldr	s13, [r6]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    1ff0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
			sourceValues[osc][string] = sample;
    1ff4:	ed83 7a00 	vstr	s14, [r3]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    1ff8:	ee27 7a06 	vmul.f32	s14, s14, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    1ffc:	ee26 9a89 	vmul.f32	s18, s13, s18
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    2000:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    2004:	ee29 9a07 	vmul.f32	s18, s18, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    2008:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    200c:	ed82 9a00 	vstr	s18, [r2]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    2010:	edc4 7a00 	vstr	s15, [r4]
}
    2014:	b009      	add	sp, #36	; 0x24
    2016:	ecbd 8b06 	vpop	{d8-d10}
    201a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    201e:	bf00      	nop
    2020:	20019968 	.word	0x20019968
    2024:	20005730 	.word	0x20005730
    2028:	3c23d70a 	.word	0x3c23d70a
    202c:	20005538 	.word	0x20005538
    2030:	43230000 	.word	0x43230000
    2034:	c3230000 	.word	0xc3230000
    2038:	42c80000 	.word	0x42c80000
    203c:	46800000 	.word	0x46800000
    2040:	30012000 	.word	0x30012000
    2044:	20005148 	.word	0x20005148
    2048:	20005bfc 	.word	0x20005bfc
    204c:	20000018 	.word	0x20000018
    2050:	200146d8 	.word	0x200146d8
    2054:	f3af 8000 	nop.w
    2058:	f3af 8000 	nop.w
    205c:	f3af 8000 	nop.w

00002060 <sawSquareTick>:


void __ATTR_ITCMRAM  sawSquareTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    2060:	b538      	push	{r3, r4, r5, lr}
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    2062:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    2066:	4c0e      	ldr	r4, [pc, #56]	; (20a0 <sawSquareTick+0x40>)
{
    2068:	4605      	mov	r5, r0
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    206a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    206e:	ed2d 8b02 	vpush	{d8}
    2072:	eeb0 8a60 	vmov.f32	s16, s1
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    2076:	4620      	mov	r0, r4
    2078:	f007 f822 	bl	90c0 <tPBSawSquare_setFreq>
	tPBSawSquare_setShape(&sawPaired[v][string], shape);
    207c:	4620      	mov	r0, r4
    207e:	eeb0 0a48 	vmov.f32	s0, s16
    2082:	f008 f8dd 	bl	a240 <__tPBSawSquare_setShape_veneer>
    //if (sync)
    {
    	//tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);

    }
    *sample += tPBSawSquare_tick(&sawPaired[v][string]);
    2086:	4620      	mov	r0, r4
    2088:	f006 ffca 	bl	9020 <tPBSawSquare_tick>
    208c:	edd5 7a00 	vldr	s15, [r5]
    2090:	ee37 0a80 	vadd.f32	s0, s15, s0
    2094:	ed85 0a00 	vstr	s0, [r5]
}
    2098:	ecbd 8b02 	vpop	{d8}
    209c:	bd38      	pop	{r3, r4, r5, pc}
    209e:	bf00      	nop
    20a0:	20005ba4 	.word	0x20005ba4
    20a4:	f3af 8000 	nop.w
    20a8:	f3af 8000 	nop.w
    20ac:	f3af 8000 	nop.w
    20b0:	f3af 8000 	nop.w
    20b4:	f3af 8000 	nop.w
    20b8:	f3af 8000 	nop.w
    20bc:	f3af 8000 	nop.w

000020c0 <sineTriTick>:

void __ATTR_ITCMRAM  sineTriTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    20c0:	b538      	push	{r3, r4, r5, lr}
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    20c2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    20c6:	4c0e      	ldr	r4, [pc, #56]	; (2100 <sineTriTick+0x40>)
{
    20c8:	4605      	mov	r5, r0
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    20ca:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    20ce:	ed2d 8b02 	vpush	{d8}
    20d2:	eeb0 8a60 	vmov.f32	s16, s1
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    20d6:	4620      	mov	r0, r4
    20d8:	f006 fe42 	bl	8d60 <tPBSineTriangle_setFreq>
    tPBSineTriangle_setShape(&sinePaired[v][string],shape);
    20dc:	4620      	mov	r0, r4
    20de:	eeb0 0a48 	vmov.f32	s0, s16
    20e2:	f008 f941 	bl	a368 <__tPBSineTriangle_setShape_veneer>
   // if (sync)
   // {
   // 	tPBSineTriangle_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
   // }
    *sample += tPBSineTriangle_tick(&sinePaired[v][string]);
    20e6:	4620      	mov	r0, r4
    20e8:	f006 fd8a 	bl	8c00 <tPBSineTriangle_tick>
    20ec:	edd5 7a00 	vldr	s15, [r5]
    20f0:	ee37 0a80 	vadd.f32	s0, s15, s0
    20f4:	ed85 0a00 	vstr	s0, [r5]
}
    20f8:	ecbd 8b02 	vpop	{d8}
    20fc:	bd38      	pop	{r3, r4, r5, pc}
    20fe:	bf00      	nop
    2100:	20005c60 	.word	0x20005c60
    2104:	f3af 8000 	nop.w
    2108:	f3af 8000 	nop.w
    210c:	f3af 8000 	nop.w
    2110:	f3af 8000 	nop.w
    2114:	f3af 8000 	nop.w
    2118:	f3af 8000 	nop.w
    211c:	f3af 8000 	nop.w

00002120 <sawTick>:

void __ATTR_ITCMRAM  sawTick(float* sample, int v, float freq, float shape, int sync, int string)
{
	tPBSaw_setFreq(&saw[v][string], freq);
    2120:	4a0a      	ldr	r2, [pc, #40]	; (214c <sawTick+0x2c>)
    2122:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    2126:	b510      	push	{r4, lr}
    2128:	4604      	mov	r4, r0
    212a:	b082      	sub	sp, #8
	tPBSaw_setFreq(&saw[v][string], freq);
    212c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    2130:	9001      	str	r0, [sp, #4]
    2132:	f006 ff65 	bl	9000 <tPBSaw_setFreq>
    //if (sync)
	//{
	//	tPBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	//}
    *sample += tPBSaw_tick(&saw[v][string]);
    2136:	9801      	ldr	r0, [sp, #4]
    2138:	f006 ff32 	bl	8fa0 <tPBSaw_tick>
    213c:	edd4 7a00 	vldr	s15, [r4]
    2140:	ee37 0a80 	vadd.f32	s0, s15, s0
    2144:	ed84 0a00 	vstr	s0, [r4]
}
    2148:	b002      	add	sp, #8
    214a:	bd10      	pop	{r4, pc}
    214c:	20005b8c 	.word	0x20005b8c
    2150:	f3af 8000 	nop.w
    2154:	f3af 8000 	nop.w
    2158:	f3af 8000 	nop.w
    215c:	f3af 8000 	nop.w

00002160 <pulseTick>:

void __ATTR_ITCMRAM  pulseTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    2160:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_setFreq(&pulse[v][string], freq);
    2162:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    2166:	4c0e      	ldr	r4, [pc, #56]	; (21a0 <pulseTick+0x40>)
{
    2168:	4605      	mov	r5, r0
    tPBPulse_setFreq(&pulse[v][string], freq);
    216a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    216e:	ed2d 8b02 	vpush	{d8}
    2172:	eeb0 8a60 	vmov.f32	s16, s1
    tPBPulse_setFreq(&pulse[v][string], freq);
    2176:	4620      	mov	r0, r4
    2178:	f006 ff02 	bl	8f80 <tPBPulse_setFreq>
    tPBPulse_setWidth(&pulse[v][string], shape);
    217c:	4620      	mov	r0, r4
    217e:	eeb0 0a48 	vmov.f32	s0, s16
    2182:	f008 f9b1 	bl	a4e8 <__tPBPulse_setWidth_veneer>
    //if (sync)
	//{
	//	tPBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	//}
    *sample += tPBPulse_tick(&pulse[v][string]);
    2186:	4620      	mov	r0, r4
    2188:	f006 feba 	bl	8f00 <tPBPulse_tick>
    218c:	edd5 7a00 	vldr	s15, [r5]
    2190:	ee37 0a80 	vadd.f32	s0, s15, s0
    2194:	ed85 0a00 	vstr	s0, [r5]
}
    2198:	ecbd 8b02 	vpop	{d8}
    219c:	bd38      	pop	{r3, r4, r5, pc}
    219e:	bf00      	nop
    21a0:	2000576c 	.word	0x2000576c
    21a4:	f3af 8000 	nop.w
    21a8:	f3af 8000 	nop.w
    21ac:	f3af 8000 	nop.w
    21b0:	f3af 8000 	nop.w
    21b4:	f3af 8000 	nop.w
    21b8:	f3af 8000 	nop.w
    21bc:	f3af 8000 	nop.w

000021c0 <sineTick>:

void __ATTR_ITCMRAM  sineTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    tCycle_setFreq(&sine[v][string], freq);
    21c0:	4a0a      	ldr	r2, [pc, #40]	; (21ec <sineTick+0x2c>)
    21c2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    21c6:	b510      	push	{r4, lr}
    21c8:	4604      	mov	r4, r0
    21ca:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
    21cc:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    21d0:	9001      	str	r0, [sp, #4]
    21d2:	f008 f8dd 	bl	a390 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
    21d6:	9801      	ldr	r0, [sp, #4]
    21d8:	f008 f8ca 	bl	a370 <__tCycle_tick_veneer>
    21dc:	edd4 7a00 	vldr	s15, [r4]
    21e0:	ee37 0a80 	vadd.f32	s0, s15, s0
    21e4:	ed84 0a00 	vstr	s0, [r4]
}
    21e8:	b002      	add	sp, #8
    21ea:	bd10      	pop	{r4, pc}
    21ec:	20005c48 	.word	0x20005c48
    21f0:	f3af 8000 	nop.w
    21f4:	f3af 8000 	nop.w
    21f8:	f3af 8000 	nop.w
    21fc:	f3af 8000 	nop.w

00002200 <triTick>:

void __ATTR_ITCMRAM  triTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    2200:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_setFreq(&tri[v][string], freq);
    2202:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    2206:	4c0e      	ldr	r4, [pc, #56]	; (2240 <triTick+0x40>)
{
    2208:	4605      	mov	r5, r0
    tPBTriangle_setFreq(&tri[v][string], freq);
    220a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    220e:	ed2d 8b02 	vpush	{d8}
    2212:	eeb0 8a60 	vmov.f32	s16, s1
    tPBTriangle_setFreq(&tri[v][string], freq);
    2216:	4620      	mov	r0, r4
    2218:	f006 fe62 	bl	8ee0 <tPBTriangle_setFreq>
    tPBTriangle_setSkew(&tri[v][string], shape);
    221c:	4620      	mov	r0, r4
    221e:	eeb0 0a48 	vmov.f32	s0, s16
    2222:	f007 fffd 	bl	a220 <__tPBTriangle_setSkew_veneer>
    //if (sync)
	//{
	//	tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	//}
    *sample += tPBTriangle_tick(&tri[v][string]);
    2226:	4620      	mov	r0, r4
    2228:	f006 fdba 	bl	8da0 <tPBTriangle_tick>
    222c:	edd5 7a00 	vldr	s15, [r5]
    2230:	ee37 0a80 	vadd.f32	s0, s15, s0
    2234:	ed85 0a00 	vstr	s0, [r5]
}
    2238:	ecbd 8b02 	vpop	{d8}
    223c:	bd38      	pop	{r3, r4, r5, pc}
    223e:	bf00      	nop
    2240:	200148e4 	.word	0x200148e4
    2244:	f3af 8000 	nop.w
    2248:	f3af 8000 	nop.w
    224c:	f3af 8000 	nop.w
    2250:	f3af 8000 	nop.w
    2254:	f3af 8000 	nop.w
    2258:	f3af 8000 	nop.w
    225c:	f3af 8000 	nop.w

00002260 <userTick>:
void __ATTR_ITCMRAM  userTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    //tWaveOscS_setFreq(&wave[v], freq);
    //tWaveOscS_setIndex(&wave[v], shape);
    //*sample += tWaveOscS_tick(&wave[v]);
}
    2260:	4770      	bx	lr
    2262:	bf00      	nop
    2264:	f3af 8000 	nop.w
    2268:	f3af 8000 	nop.w
    226c:	f3af 8000 	nop.w
    2270:	f3af 8000 	nop.w
    2274:	f3af 8000 	nop.w
    2278:	f3af 8000 	nop.w
    227c:	f3af 8000 	nop.w

00002280 <filter_tick>:



float __ATTR_ITCMRAM filter_tick(float* samples, float note, int string)
{
    2280:	b570      	push	{r4, r5, r6, lr}
	float cutoff[2];
	uint8_t enabledFilt[2] = {0,0};
	for (int f = 0; f < NUM_FILT; f++)
	{
		param* filtParams = &params[FILTER_PARAMS_OFFSET + f * FilterParamsNum];
		float enabled = filtParams[FilterEnabled].realVal[string];
    2282:	f201 239b 	addw	r3, r1, #667	; 0x29b
    2286:	4e5f      	ldr	r6, [pc, #380]	; (2404 <filter_tick+0x184>)
		enabledFilt[f] = (enabled > 0.5f);
		if (!enabledFilt[f]) continue;
    2288:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
    228c:	460c      	mov	r4, r1
		float enabled = filtParams[FilterEnabled].realVal[string];
    228e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
{
    2292:	4605      	mov	r5, r0
    2294:	ed2d 8b06 	vpush	{d8-d10}
		float enabled = filtParams[FilterEnabled].realVal[string];
    2298:	ed93 9a00 	vldr	s18, [r3]
{
    229c:	eeb0 8a40 	vmov.f32	s16, s0
		if (!enabledFilt[f]) continue;
    22a0:	eeb4 9ae7 	vcmpe.f32	s18, s15
    22a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    22a8:	d91e      	bls.n	22e8 <filter_tick+0x68>

		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    22aa:	1c8b      	adds	r3, r1, #2
    22ac:	f506 622f 	add.w	r2, r6, #2800	; 0xaf0
			note = 0.0f; //is this necessary?
		}

		cutoff[f] = MIDIcutoff + (note  * keyFollow);

		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
    22b0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
    22b4:	eddf 7a54 	vldr	s15, [pc, #336]	; 2408 <filter_tick+0x188>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    22b8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
    22bc:	ed9f 1a53 	vldr	s2, [pc, #332]	; 240c <filter_tick+0x18c>
    22c0:	ed9f 0a53 	vldr	s0, [pc, #332]	; 2410 <filter_tick+0x190>
    22c4:	ed92 7a00 	vldr	s14, [r2]
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    22c8:	f606 229c 	addw	r2, r6, #2716	; 0xa9c
    22cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
    22d0:	edd3 0a00 	vldr	s1, [r3]
    22d4:	ee70 0ae6 	vsub.f32	s1, s1, s13
    22d8:	eee8 0a07 	vfma.f32	s1, s16, s14
    22dc:	ee60 0aa7 	vmul.f32	s1, s1, s15
    22e0:	f006 fc7e 	bl	8be0 <LEAF_clip>
    22e4:	eef0 aa40 	vmov.f32	s21, s0
		float enabled = filtParams[FilterEnabled].realVal[string];
    22e8:	f204 23c5 	addw	r3, r4, #709	; 0x2c5
		if (!enabledFilt[f]) continue;
    22ec:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    22f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    22f4:	edd3 9a00 	vldr	s19, [r3]
		if (!enabledFilt[f]) continue;
    22f8:	eef4 9ae8 	vcmpe.f32	s19, s17
    22fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2300:	d963      	bls.n	23ca <filter_tick+0x14a>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    2302:	4b44      	ldr	r3, [pc, #272]	; (2414 <filter_tick+0x194>)
    2304:	1ca2      	adds	r2, r4, #2
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
    2306:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
    230a:	eddf 7a3f 	vldr	s15, [pc, #252]	; 2408 <filter_tick+0x188>
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    230e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
    2312:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 240c <filter_tick+0x18c>
    2316:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 2410 <filter_tick+0x190>
    231a:	ed51 0a15 	vldr	s1, [r1, #-84]	; 0xffffffac
    231e:	ed91 7a00 	vldr	s14, [r1]
    2322:	ee70 0ae6 	vsub.f32	s1, s1, s13
    2326:	eee8 0a07 	vfma.f32	s1, s16, s14
    232a:	ee60 0aa7 	vmul.f32	s1, s1, s15
    232e:	f006 fc57 	bl	8be0 <LEAF_clip>
		//cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
	}

	float  sp = params[FilterSeriesParallelMix].realVal[string];

	if (enabledFilt[0])
    2332:	eeb4 9ae8 	vcmpe.f32	s18, s17
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    2336:	f204 23ef 	addw	r3, r4, #751	; 0x2ef
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
    233a:	eeb0 aa40 	vmov.f32	s20, s0
	if (enabledFilt[0])
    233e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    2342:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    2346:	ed93 8a00 	vldr	s16, [r3]
	if (enabledFilt[0])
    234a:	dd21      	ble.n	2390 <filter_tick+0x110>
	{
		filterTick[0](&samples[0], 0, cutoff[0], string);
    234c:	4e32      	ldr	r6, [pc, #200]	; (2418 <filter_tick+0x198>)
    234e:	eeb0 0a6a 	vmov.f32	s0, s21
    2352:	4622      	mov	r2, r4
    2354:	2100      	movs	r1, #0
    2356:	6833      	ldr	r3, [r6, #0]
    2358:	4628      	mov	r0, r5
    235a:	4798      	blx	r3
	}
	float sendToFilter2 = samples[0] * (1.0f - sp);
    235c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
	//compute what gets sent to the second filter
	if (enabledFilt[1])
    2360:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	samples[1] += sendToFilter2;
    2364:	edd5 7a01 	vldr	s15, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    2368:	ed95 7a00 	vldr	s14, [r5]
    236c:	ee76 6ac8 	vsub.f32	s13, s13, s16
	if (enabledFilt[1])
    2370:	eef4 9ac6 	vcmpe.f32	s19, s12
	samples[1] += sendToFilter2;
    2374:	eee7 7a26 	vfma.f32	s15, s14, s13
	if (enabledFilt[1])
    2378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	samples[1] += sendToFilter2;
    237c:	eeb0 0a67 	vmov.f32	s0, s15
    2380:	edc5 7a01 	vstr	s15, [r5, #4]
	if (enabledFilt[1])
    2384:	dc11      	bgt.n	23aa <filter_tick+0x12a>
	{
		filterTick[1](&samples[1], 1, cutoff[1], string);
	}
	return samples[1] + (samples[0] * sp);
    2386:	eea7 0a08 	vfma.f32	s0, s14, s16
}
    238a:	ecbd 8b06 	vpop	{d8-d10}
    238e:	bd70      	pop	{r4, r5, r6, pc}
	float sendToFilter2 = samples[0] * (1.0f - sp);
    2390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    2394:	edd5 7a01 	vldr	s15, [r5, #4]
    2398:	edd5 6a00 	vldr	s13, [r5]
    239c:	4e1e      	ldr	r6, [pc, #120]	; (2418 <filter_tick+0x198>)
	float sendToFilter2 = samples[0] * (1.0f - sp);
    239e:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    23a2:	eee6 7a87 	vfma.f32	s15, s13, s14
    23a6:	edc5 7a01 	vstr	s15, [r5, #4]
		filterTick[1](&samples[1], 1, cutoff[1], string);
    23aa:	eeb0 0a4a 	vmov.f32	s0, s20
    23ae:	6873      	ldr	r3, [r6, #4]
    23b0:	4622      	mov	r2, r4
    23b2:	2101      	movs	r1, #1
    23b4:	1d28      	adds	r0, r5, #4
    23b6:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
    23b8:	ed95 0a01 	vldr	s0, [r5, #4]
    23bc:	ed95 7a00 	vldr	s14, [r5]
    23c0:	eea7 0a08 	vfma.f32	s0, s14, s16
}
    23c4:	ecbd 8b06 	vpop	{d8-d10}
    23c8:	bd70      	pop	{r4, r5, r6, pc}
	if (enabledFilt[0])
    23ca:	eeb4 9ae8 	vcmpe.f32	s18, s17
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    23ce:	f204 23ef 	addw	r3, r4, #751	; 0x2ef
    23d2:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	if (enabledFilt[0])
    23d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    23da:	ed96 8a00 	vldr	s16, [r6]
	if (enabledFilt[0])
    23de:	dcb5      	bgt.n	234c <filter_tick+0xcc>
	float sendToFilter2 = samples[0] * (1.0f - sp);
    23e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    23e4:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    23e8:	ed95 7a00 	vldr	s14, [r5]
    23ec:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
    23f0:	eea7 0a87 	vfma.f32	s0, s15, s14
    23f4:	ed85 0a01 	vstr	s0, [r5, #4]
	return samples[1] + (samples[0] * sp);
    23f8:	eea7 0a08 	vfma.f32	s0, s14, s16
}
    23fc:	ecbd 8b06 	vpop	{d8-d10}
    2400:	bd70      	pop	{r4, r5, r6, pc}
    2402:	bf00      	nop
    2404:	20019968 	.word	0x20019968
    2408:	420fb824 	.word	0x420fb824
    240c:	457ff000 	.word	0x457ff000
    2410:	00000000 	.word	0x00000000
    2414:	2001a500 	.word	0x2001a500
    2418:	20005124 	.word	0x20005124
    241c:	f3af 8000 	nop.w

00002420 <lowpassTick>:


void __ATTR_ITCMRAM  lowpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    2420:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    2424:	4b0d      	ldr	r3, [pc, #52]	; (245c <lowpassTick+0x3c>)
{
    2426:	b530      	push	{r4, r5, lr}
    2428:	4605      	mov	r5, r0
    242a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    242c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    2430:	0094      	lsls	r4, r2, #2
    2432:	9001      	str	r0, [sp, #4]
    2434:	f007 ffe4 	bl	a400 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    2438:	ed95 0a00 	vldr	s0, [r5]
    243c:	9801      	ldr	r0, [sp, #4]
    243e:	f007 ff63 	bl	a308 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    2442:	4b07      	ldr	r3, [pc, #28]	; (2460 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    2444:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    2448:	4423      	add	r3, r4
    244a:	edd3 7a00 	vldr	s15, [r3]
    244e:	ee67 7a80 	vmul.f32	s15, s15, s0
    2452:	edc5 7a00 	vstr	s15, [r5]
}
    2456:	b003      	add	sp, #12
    2458:	bd30      	pop	{r4, r5, pc}
    245a:	bf00      	nop
    245c:	20005420 	.word	0x20005420
    2460:	20005114 	.word	0x20005114
    2464:	f3af 8000 	nop.w
    2468:	f3af 8000 	nop.w
    246c:	f3af 8000 	nop.w
    2470:	f3af 8000 	nop.w
    2474:	f3af 8000 	nop.w
    2478:	f3af 8000 	nop.w
    247c:	f3af 8000 	nop.w

00002480 <highpassTick>:

void __ATTR_ITCMRAM  highpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    2480:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    2484:	4b0d      	ldr	r3, [pc, #52]	; (24bc <highpassTick+0x3c>)
{
    2486:	b530      	push	{r4, r5, lr}
    2488:	4605      	mov	r5, r0
    248a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    248c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    2490:	0094      	lsls	r4, r2, #2
    2492:	9001      	str	r0, [sp, #4]
    2494:	f007 ffb4 	bl	a400 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
    2498:	ed95 0a00 	vldr	s0, [r5]
    249c:	9801      	ldr	r0, [sp, #4]
    249e:	f007 ff33 	bl	a308 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    24a2:	4b07      	ldr	r3, [pc, #28]	; (24c0 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
    24a4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    24a8:	4423      	add	r3, r4
    24aa:	edd3 7a00 	vldr	s15, [r3]
    24ae:	ee67 7a80 	vmul.f32	s15, s15, s0
    24b2:	edc5 7a00 	vstr	s15, [r5]
}
    24b6:	b003      	add	sp, #12
    24b8:	bd30      	pop	{r4, r5, pc}
    24ba:	bf00      	nop
    24bc:	200051cc 	.word	0x200051cc
    24c0:	20005114 	.word	0x20005114
    24c4:	f3af 8000 	nop.w
    24c8:	f3af 8000 	nop.w
    24cc:	f3af 8000 	nop.w
    24d0:	f3af 8000 	nop.w
    24d4:	f3af 8000 	nop.w
    24d8:	f3af 8000 	nop.w
    24dc:	f3af 8000 	nop.w

000024e0 <bandpassTick>:

void __ATTR_ITCMRAM  bandpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    24e0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    24e4:	4b0d      	ldr	r3, [pc, #52]	; (251c <bandpassTick+0x3c>)
{
    24e6:	b530      	push	{r4, r5, lr}
    24e8:	4605      	mov	r5, r0
    24ea:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    24ec:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    24f0:	0094      	lsls	r4, r2, #2
    24f2:	9001      	str	r0, [sp, #4]
    24f4:	f007 ff84 	bl	a400 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    24f8:	ed95 0a00 	vldr	s0, [r5]
    24fc:	9801      	ldr	r0, [sp, #4]
    24fe:	f007 ff03 	bl	a308 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    2502:	4b07      	ldr	r3, [pc, #28]	; (2520 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    2504:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    2508:	4423      	add	r3, r4
    250a:	edd3 7a00 	vldr	s15, [r3]
    250e:	ee67 7a80 	vmul.f32	s15, s15, s0
    2512:	edc5 7a00 	vstr	s15, [r5]
}
    2516:	b003      	add	sp, #12
    2518:	bd30      	pop	{r4, r5, pc}
    251a:	bf00      	nop
    251c:	20000a70 	.word	0x20000a70
    2520:	20005114 	.word	0x20005114
    2524:	f3af 8000 	nop.w
    2528:	f3af 8000 	nop.w
    252c:	f3af 8000 	nop.w
    2530:	f3af 8000 	nop.w
    2534:	f3af 8000 	nop.w
    2538:	f3af 8000 	nop.w
    253c:	f3af 8000 	nop.w

00002540 <diodeLowpassTick>:

void __ATTR_ITCMRAM  diodeLowpassTick(float* sample, int v, float cutoff, int string)
{
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    2540:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    2544:	4b0d      	ldr	r3, [pc, #52]	; (257c <diodeLowpassTick+0x3c>)
{
    2546:	b530      	push	{r4, r5, lr}
    2548:	4605      	mov	r5, r0
    254a:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    254c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    2550:	0094      	lsls	r4, r2, #2
    2552:	9001      	str	r0, [sp, #4]
    2554:	f007 fea0 	bl	a298 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    2558:	ed95 0a00 	vldr	s0, [r5]
    255c:	9801      	ldr	r0, [sp, #4]
    255e:	f007 ffb7 	bl	a4d0 <__tDiodeFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    2562:	4b07      	ldr	r3, [pc, #28]	; (2580 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    2564:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    2568:	4423      	add	r3, r4
    256a:	edd3 7a00 	vldr	s15, [r3]
    256e:	ee67 7a80 	vmul.f32	s15, s15, s0
    2572:	edc5 7a00 	vstr	s15, [r5]
}
    2576:	b003      	add	sp, #12
    2578:	bd30      	pop	{r4, r5, pc}
    257a:	bf00      	nop
    257c:	200050b0 	.word	0x200050b0
    2580:	20005114 	.word	0x20005114
    2584:	f3af 8000 	nop.w
    2588:	f3af 8000 	nop.w
    258c:	f3af 8000 	nop.w
    2590:	f3af 8000 	nop.w
    2594:	f3af 8000 	nop.w
    2598:	f3af 8000 	nop.w
    259c:	f3af 8000 	nop.w

000025a0 <VZpeakTick>:

void __ATTR_ITCMRAM  VZpeakTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
    25a0:	4b09      	ldr	r3, [pc, #36]	; (25c8 <VZpeakTick+0x28>)
    25a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    25a6:	b510      	push	{r4, lr}
    25a8:	4604      	mov	r4, r0
    25aa:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
    25ac:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    25b0:	9001      	str	r0, [sp, #4]
    25b2:	f007 ff75 	bl	a4a0 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterPeak[v][string], *sample);
    25b6:	9801      	ldr	r0, [sp, #4]
    25b8:	ed94 0a00 	vldr	s0, [r4]
    25bc:	f007 fea8 	bl	a310 <__tVZFilter_tickEfficient_veneer>
    25c0:	ed84 0a00 	vstr	s0, [r4]
}
    25c4:	b002      	add	sp, #8
    25c6:	bd10      	pop	{r4, pc}
    25c8:	20000934 	.word	0x20000934
    25cc:	f3af 8000 	nop.w
    25d0:	f3af 8000 	nop.w
    25d4:	f3af 8000 	nop.w
    25d8:	f3af 8000 	nop.w
    25dc:	f3af 8000 	nop.w

000025e0 <VZlowshelfTick>:

void __ATTR_ITCMRAM  VZlowshelfTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
    25e0:	4b09      	ldr	r3, [pc, #36]	; (2608 <VZlowshelfTick+0x28>)
    25e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    25e6:	b510      	push	{r4, lr}
    25e8:	4604      	mov	r4, r0
    25ea:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
    25ec:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    25f0:	9001      	str	r0, [sp, #4]
    25f2:	f007 ff55 	bl	a4a0 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterLS[v][string], *sample);
    25f6:	9801      	ldr	r0, [sp, #4]
    25f8:	ed94 0a00 	vldr	s0, [r4]
    25fc:	f007 fe88 	bl	a310 <__tVZFilter_tickEfficient_veneer>
    2600:	ed84 0a00 	vstr	s0, [r4]
}
    2604:	b002      	add	sp, #8
    2606:	bd10      	pop	{r4, pc}
    2608:	20000924 	.word	0x20000924
    260c:	f3af 8000 	nop.w
    2610:	f3af 8000 	nop.w
    2614:	f3af 8000 	nop.w
    2618:	f3af 8000 	nop.w
    261c:	f3af 8000 	nop.w

00002620 <VZhighshelfTick>:
void __ATTR_ITCMRAM  VZhighshelfTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
    2620:	4b09      	ldr	r3, [pc, #36]	; (2648 <VZhighshelfTick+0x28>)
    2622:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    2626:	b510      	push	{r4, lr}
    2628:	4604      	mov	r4, r0
    262a:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
    262c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    2630:	9001      	str	r0, [sp, #4]
    2632:	f007 ff35 	bl	a4a0 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterHS[v][string], *sample);
    2636:	9801      	ldr	r0, [sp, #4]
    2638:	ed94 0a00 	vldr	s0, [r4]
    263c:	f007 fe68 	bl	a310 <__tVZFilter_tickEfficient_veneer>
    2640:	ed84 0a00 	vstr	s0, [r4]
}
    2644:	b002      	add	sp, #8
    2646:	bd10      	pop	{r4, pc}
    2648:	20000914 	.word	0x20000914
    264c:	f3af 8000 	nop.w
    2650:	f3af 8000 	nop.w
    2654:	f3af 8000 	nop.w
    2658:	f3af 8000 	nop.w
    265c:	f3af 8000 	nop.w

00002660 <VZbandrejectTick>:
void __ATTR_ITCMRAM  VZbandrejectTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    2660:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    2664:	4b0d      	ldr	r3, [pc, #52]	; (269c <VZbandrejectTick+0x3c>)
{
    2666:	b530      	push	{r4, r5, lr}
    2668:	4605      	mov	r5, r0
    266a:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    266c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    2670:	0094      	lsls	r4, r2, #2
    2672:	9001      	str	r0, [sp, #4]
    2674:	f007 ff14 	bl	a4a0 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    2678:	ed95 0a00 	vldr	s0, [r5]
    267c:	9801      	ldr	r0, [sp, #4]
    267e:	f007 fe47 	bl	a310 <__tVZFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    2682:	4b07      	ldr	r3, [pc, #28]	; (26a0 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    2684:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    2688:	4423      	add	r3, r4
    268a:	edd3 7a00 	vldr	s15, [r3]
    268e:	ee67 7a80 	vmul.f32	s15, s15, s0
    2692:	edc5 7a00 	vstr	s15, [r5]
}
    2696:	b003      	add	sp, #12
    2698:	bd30      	pop	{r4, r5, pc}
    269a:	bf00      	nop
    269c:	20000904 	.word	0x20000904
    26a0:	20005114 	.word	0x20005114
    26a4:	f3af 8000 	nop.w
    26a8:	f3af 8000 	nop.w
    26ac:	f3af 8000 	nop.w
    26b0:	f3af 8000 	nop.w
    26b4:	f3af 8000 	nop.w
    26b8:	f3af 8000 	nop.w
    26bc:	f3af 8000 	nop.w

000026c0 <LadderLowpassTick>:

void __ATTR_ITCMRAM  LadderLowpassTick(float* sample, int v, float cutoff, int string)
{
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    26c0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    26c4:	4b0d      	ldr	r3, [pc, #52]	; (26fc <LadderLowpassTick+0x3c>)
{
    26c6:	b530      	push	{r4, r5, lr}
    26c8:	4605      	mov	r5, r0
    26ca:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    26cc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    26d0:	0094      	lsls	r4, r2, #2
    26d2:	9001      	str	r0, [sp, #4]
    26d4:	f007 fe34 	bl	a340 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    26d8:	ed95 0a00 	vldr	s0, [r5]
    26dc:	9801      	ldr	r0, [sp, #4]
    26de:	f007 feb3 	bl	a448 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v][string];
    26e2:	4b07      	ldr	r3, [pc, #28]	; (2700 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    26e4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    26e8:	4423      	add	r3, r4
    26ea:	edd3 7a00 	vldr	s15, [r3]
    26ee:	ee67 7a80 	vmul.f32	s15, s15, s0
    26f2:	edc5 7a00 	vstr	s15, [r5]
}
    26f6:	b003      	add	sp, #12
    26f8:	bd30      	pop	{r4, r5, pc}
    26fa:	bf00      	nop
    26fc:	200008f4 	.word	0x200008f4
    2700:	20005114 	.word	0x20005114
    2704:	f3af 8000 	nop.w
    2708:	f3af 8000 	nop.w
    270c:	f3af 8000 	nop.w
    2710:	f3af 8000 	nop.w
    2714:	f3af 8000 	nop.w
    2718:	f3af 8000 	nop.w
    271c:	f3af 8000 	nop.w

00002720 <setFreqMultPitch>:
float midiAdd[NUM_OSC][NUM_STRINGS_PER_BOARD];

void __ATTR_ITCMRAM setFreqMultPitch(float pitch, int osc, int string)
{
	pitch *= 24.0f;
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    2720:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    2724:	4a12      	ldr	r2, [pc, #72]	; (2770 <setFreqMultPitch+0x50>)
    2726:	0043      	lsls	r3, r0, #1
	pitch *= 24.0f;
    2728:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    272c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    2730:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2734:	3020      	adds	r0, #32
	pitch *= 24.0f;
    2736:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    273a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    273e:	4408      	add	r0, r1
    2740:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    2744:	ed92 7a02 	vldr	s14, [r2, #8]
    2748:	eeb4 7ae7 	vcmpe.f32	s14, s15
    274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2750:	dd01      	ble.n	2756 <setFreqMultPitch+0x36>
	{
		pitch = roundf(pitch);
    2752:	feb8 0a40 	vrinta.f32	s0, s0
	}
	midiAdd[osc][string] = pitch;
    2756:	4419      	add	r1, r3
    2758:	4a06      	ldr	r2, [pc, #24]	; (2774 <setFreqMultPitch+0x54>)
	freqMult[osc][string] = 1.0f;
    275a:	4b07      	ldr	r3, [pc, #28]	; (2778 <setFreqMultPitch+0x58>)
    275c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
	midiAdd[osc][string] = pitch;
    2760:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	freqMult[osc][string] = 1.0f;
    2764:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	midiAdd[osc][string] = pitch;
    2768:	ed82 0a00 	vstr	s0, [r2]
	freqMult[osc][string] = 1.0f;
    276c:	6018      	str	r0, [r3, #0]
}
    276e:	4770      	bx	lr
    2770:	20019968 	.word	0x20019968
    2774:	20005538 	.word	0x20005538
    2778:	20005148 	.word	0x20005148
    277c:	f3af 8000 	nop.w

00002780 <setFreqMultHarm>:

void __ATTR_ITCMRAM setFreqMultHarm(float harm, int osc, int string)
{
	harm *= 15.0f;
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    2780:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    2784:	4a1a      	ldr	r2, [pc, #104]	; (27f0 <setFreqMultHarm+0x70>)
    2786:	0043      	lsls	r3, r0, #1
	harm *= 15.0f;
    2788:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    278c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    2790:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2794:	3020      	adds	r0, #32
	harm *= 15.0f;
    2796:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    279a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    279e:	4408      	add	r0, r1
    27a0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    27a4:	ed92 7a02 	vldr	s14, [r2, #8]
    27a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    27ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    27b0:	dd01      	ble.n	27b6 <setFreqMultHarm+0x36>
	{
		harm = roundf(harm);
    27b2:	feb8 0a40 	vrinta.f32	s0, s0
	}

	if (harm >= 0)
    27b6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
	{
		freqMult[osc][string] = (harm + 1);
    27ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
    27be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    27c2:	db0d      	blt.n	27e0 <setFreqMultHarm+0x60>
		freqMult[osc][string] = (harm + 1);
    27c4:	ee30 0a27 	vadd.f32	s0, s0, s15
    27c8:	4419      	add	r1, r3
    27ca:	4a0a      	ldr	r2, [pc, #40]	; (27f4 <setFreqMultHarm+0x74>)
	}
	else
	{
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
	}
	midiAdd[osc][string] = 0.0f;
    27cc:	4b0a      	ldr	r3, [pc, #40]	; (27f8 <setFreqMultHarm+0x78>)
    27ce:	2000      	movs	r0, #0
    27d0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    27d4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    27d8:	ed82 0a00 	vstr	s0, [r2]
    27dc:	6018      	str	r0, [r3, #0]
}
    27de:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    27e0:	ee30 0a67 	vsub.f32	s0, s0, s15
    27e4:	eeb0 7ac0 	vabs.f32	s14, s0
    27e8:	ee87 0a87 	vdiv.f32	s0, s15, s14
    27ec:	e7ec      	b.n	27c8 <setFreqMultHarm+0x48>
    27ee:	bf00      	nop
    27f0:	20019968 	.word	0x20019968
    27f4:	20005148 	.word	0x20005148
    27f8:	20005538 	.word	0x20005538
    27fc:	f3af 8000 	nop.w

00002800 <lowpassSetQ>:



void __ATTR_ITCMRAM  lowpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&lowpass[v][string], q);
    2800:	4b03      	ldr	r3, [pc, #12]	; (2810 <lowpassSetQ+0x10>)
    2802:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2806:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    280a:	f007 be4d 	b.w	a4a8 <__tSVF_setQ_veneer>
    280e:	bf00      	nop
    2810:	20005420 	.word	0x20005420
    2814:	f3af 8000 	nop.w
    2818:	f3af 8000 	nop.w
    281c:	f3af 8000 	nop.w

00002820 <highpassSetQ>:
}

void __ATTR_ITCMRAM  highpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&highpass[v][string], q);
    2820:	4b03      	ldr	r3, [pc, #12]	; (2830 <highpassSetQ+0x10>)
    2822:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2826:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    282a:	f007 be3d 	b.w	a4a8 <__tSVF_setQ_veneer>
    282e:	bf00      	nop
    2830:	200051cc 	.word	0x200051cc
    2834:	f3af 8000 	nop.w
    2838:	f3af 8000 	nop.w
    283c:	f3af 8000 	nop.w

00002840 <bandpassSetQ>:
}

void __ATTR_ITCMRAM  bandpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&bandpass[v][string], q);
    2840:	4b03      	ldr	r3, [pc, #12]	; (2850 <bandpassSetQ+0x10>)
    2842:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2846:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    284a:	f007 be2d 	b.w	a4a8 <__tSVF_setQ_veneer>
    284e:	bf00      	nop
    2850:	20000a70 	.word	0x20000a70
    2854:	f3af 8000 	nop.w
    2858:	f3af 8000 	nop.w
    285c:	f3af 8000 	nop.w

00002860 <diodeLowpassSetQ>:
}

void __ATTR_ITCMRAM  diodeLowpassSetQ(float q, int v, int string)
{
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    2860:	4b03      	ldr	r3, [pc, #12]	; (2870 <diodeLowpassSetQ+0x10>)
    2862:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2866:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    286a:	f007 bda5 	b.w	a3b8 <__tDiodeFilter_setQ_veneer>
    286e:	bf00      	nop
    2870:	200050b0 	.word	0x200050b0
    2874:	f3af 8000 	nop.w
    2878:	f3af 8000 	nop.w
    287c:	f3af 8000 	nop.w

00002880 <VZpeakSetQ>:
}

void __ATTR_ITCMRAM  VZpeakSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterPeak[v][string], q);
    2880:	4b03      	ldr	r3, [pc, #12]	; (2890 <VZpeakSetQ+0x10>)
    2882:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2886:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    288a:	f007 bd55 	b.w	a338 <__tVZFilter_setResonance_veneer>
    288e:	bf00      	nop
    2890:	20000934 	.word	0x20000934
    2894:	f3af 8000 	nop.w
    2898:	f3af 8000 	nop.w
    289c:	f3af 8000 	nop.w

000028a0 <VZlowshelfSetQ>:
}

void __ATTR_ITCMRAM  VZlowshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterLS[v][string], q);
    28a0:	4b03      	ldr	r3, [pc, #12]	; (28b0 <VZlowshelfSetQ+0x10>)
    28a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    28a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    28aa:	f007 bd45 	b.w	a338 <__tVZFilter_setResonance_veneer>
    28ae:	bf00      	nop
    28b0:	20000924 	.word	0x20000924
    28b4:	f3af 8000 	nop.w
    28b8:	f3af 8000 	nop.w
    28bc:	f3af 8000 	nop.w

000028c0 <VZhighshelfSetQ>:
}

void __ATTR_ITCMRAM  VZhighshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterHS[v][string], q);
    28c0:	4b03      	ldr	r3, [pc, #12]	; (28d0 <VZhighshelfSetQ+0x10>)
    28c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    28c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    28ca:	f007 bd35 	b.w	a338 <__tVZFilter_setResonance_veneer>
    28ce:	bf00      	nop
    28d0:	20000914 	.word	0x20000914
    28d4:	f3af 8000 	nop.w
    28d8:	f3af 8000 	nop.w
    28dc:	f3af 8000 	nop.w

000028e0 <VZbandrejectSetQ>:
}

void __ATTR_ITCMRAM  VZbandrejectSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    28e0:	4b03      	ldr	r3, [pc, #12]	; (28f0 <VZbandrejectSetQ+0x10>)
    28e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    28e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    28ea:	f007 bd25 	b.w	a338 <__tVZFilter_setResonance_veneer>
    28ee:	bf00      	nop
    28f0:	20000904 	.word	0x20000904
    28f4:	f3af 8000 	nop.w
    28f8:	f3af 8000 	nop.w
    28fc:	f3af 8000 	nop.w

00002900 <LadderLowpassSetQ>:
}

void __ATTR_ITCMRAM  LadderLowpassSetQ(float q, int v, int string)
{
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    2900:	4b03      	ldr	r3, [pc, #12]	; (2910 <LadderLowpassSetQ+0x10>)
    2902:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2906:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    290a:	f007 bdc1 	b.w	a490 <__tLadderFilter_setQ_veneer>
    290e:	bf00      	nop
    2910:	200008f4 	.word	0x200008f4
    2914:	f3af 8000 	nop.w
    2918:	f3af 8000 	nop.w
    291c:	f3af 8000 	nop.w

00002920 <lowpassSetGain>:
}

void __ATTR_ITCMRAM  lowpassSetGain(float gain, int v, int string)
{
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    2920:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    2924:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    2928:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    292a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    292e:	4605      	mov	r5, r0
    2930:	460c      	mov	r4, r1
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
    2932:	eeb0 0a67 	vmov.f32	s0, s15
    2936:	f007 fc97 	bl	a268 <__fasterdbtoa_veneer>
    293a:	4b04      	ldr	r3, [pc, #16]	; (294c <lowpassSetGain+0x2c>)
    293c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    2940:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2944:	ed83 0a00 	vstr	s0, [r3]
}
    2948:	bd38      	pop	{r3, r4, r5, pc}
    294a:	bf00      	nop
    294c:	20005114 	.word	0x20005114
    2950:	f3af 8000 	nop.w
    2954:	f3af 8000 	nop.w
    2958:	f3af 8000 	nop.w
    295c:	f3af 8000 	nop.w

00002960 <highpassSetGain>:
    2960:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    2964:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    2968:	b538      	push	{r3, r4, r5, lr}
    296a:	eee0 7a07 	vfma.f32	s15, s0, s14
    296e:	4605      	mov	r5, r0
    2970:	460c      	mov	r4, r1
    2972:	eeb0 0a67 	vmov.f32	s0, s15
    2976:	f007 fc77 	bl	a268 <__fasterdbtoa_veneer>
    297a:	4b04      	ldr	r3, [pc, #16]	; (298c <highpassSetGain+0x2c>)
    297c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    2980:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2984:	ed83 0a00 	vstr	s0, [r3]
    2988:	bd38      	pop	{r3, r4, r5, pc}
    298a:	bf00      	nop
    298c:	20005114 	.word	0x20005114
    2990:	f3af 8000 	nop.w
    2994:	f3af 8000 	nop.w
    2998:	f3af 8000 	nop.w
    299c:	f3af 8000 	nop.w

000029a0 <bandpassSetGain>:
    29a0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    29a4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    29a8:	b538      	push	{r3, r4, r5, lr}
    29aa:	eee0 7a07 	vfma.f32	s15, s0, s14
    29ae:	4605      	mov	r5, r0
    29b0:	460c      	mov	r4, r1
    29b2:	eeb0 0a67 	vmov.f32	s0, s15
    29b6:	f007 fc57 	bl	a268 <__fasterdbtoa_veneer>
    29ba:	4b04      	ldr	r3, [pc, #16]	; (29cc <bandpassSetGain+0x2c>)
    29bc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    29c0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    29c4:	ed83 0a00 	vstr	s0, [r3]
    29c8:	bd38      	pop	{r3, r4, r5, pc}
    29ca:	bf00      	nop
    29cc:	20005114 	.word	0x20005114
    29d0:	f3af 8000 	nop.w
    29d4:	f3af 8000 	nop.w
    29d8:	f3af 8000 	nop.w
    29dc:	f3af 8000 	nop.w

000029e0 <diodeLowpassSetGain>:
    29e0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    29e4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    29e8:	b538      	push	{r3, r4, r5, lr}
    29ea:	eee0 7a07 	vfma.f32	s15, s0, s14
    29ee:	4605      	mov	r5, r0
    29f0:	460c      	mov	r4, r1
    29f2:	eeb0 0a67 	vmov.f32	s0, s15
    29f6:	f007 fc37 	bl	a268 <__fasterdbtoa_veneer>
    29fa:	4b04      	ldr	r3, [pc, #16]	; (2a0c <diodeLowpassSetGain+0x2c>)
    29fc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    2a00:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2a04:	ed83 0a00 	vstr	s0, [r3]
    2a08:	bd38      	pop	{r3, r4, r5, pc}
    2a0a:	bf00      	nop
    2a0c:	20005114 	.word	0x20005114
    2a10:	f3af 8000 	nop.w
    2a14:	f3af 8000 	nop.w
    2a18:	f3af 8000 	nop.w
    2a1c:	f3af 8000 	nop.w

00002a20 <VZpeakSetGain>:
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
}

void __ATTR_ITCMRAM  VZpeakSetGain(float gain, int v, int string)
{
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    2a20:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    2a24:	ed9f 7a09 	vldr	s14, [pc, #36]	; 2a4c <VZpeakSetGain+0x2c>
{
    2a28:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    2a2a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    2a2e:	4605      	mov	r5, r0
    2a30:	460c      	mov	r4, r1
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    2a32:	eeb0 0a67 	vmov.f32	s0, s15
    2a36:	f007 fc17 	bl	a268 <__fasterdbtoa_veneer>
    2a3a:	4b05      	ldr	r3, [pc, #20]	; (2a50 <VZpeakSetGain+0x30>)
    2a3c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    2a40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    2a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    2a48:	f007 bc1e 	b.w	a288 <__tVZFilter_setGain_veneer>
    2a4c:	42480000 	.word	0x42480000
    2a50:	20000934 	.word	0x20000934
    2a54:	f3af 8000 	nop.w
    2a58:	f3af 8000 	nop.w
    2a5c:	f3af 8000 	nop.w

00002a60 <VZlowshelfSetGain>:

void __ATTR_ITCMRAM  VZlowshelfSetGain(float gain, int v, int string)
{
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    2a60:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    2a64:	ed9f 7a09 	vldr	s14, [pc, #36]	; 2a8c <VZlowshelfSetGain+0x2c>
{
    2a68:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    2a6a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    2a6e:	4605      	mov	r5, r0
    2a70:	460c      	mov	r4, r1
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    2a72:	eeb0 0a67 	vmov.f32	s0, s15
    2a76:	f007 fbf7 	bl	a268 <__fasterdbtoa_veneer>
    2a7a:	4b05      	ldr	r3, [pc, #20]	; (2a90 <VZlowshelfSetGain+0x30>)
    2a7c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    2a80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    2a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
    2a88:	f007 bbfe 	b.w	a288 <__tVZFilter_setGain_veneer>
    2a8c:	42480000 	.word	0x42480000
    2a90:	20000924 	.word	0x20000924
    2a94:	f3af 8000 	nop.w
    2a98:	f3af 8000 	nop.w
    2a9c:	f3af 8000 	nop.w

00002aa0 <VZhighshelfSetGain>:
    2aa0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    2aa4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 2acc <VZhighshelfSetGain+0x2c>
    2aa8:	b538      	push	{r3, r4, r5, lr}
    2aaa:	eee0 7a07 	vfma.f32	s15, s0, s14
    2aae:	4605      	mov	r5, r0
    2ab0:	460c      	mov	r4, r1
    2ab2:	eeb0 0a67 	vmov.f32	s0, s15
    2ab6:	f007 fbd7 	bl	a268 <__fasterdbtoa_veneer>
    2aba:	4b05      	ldr	r3, [pc, #20]	; (2ad0 <VZhighshelfSetGain+0x30>)
    2abc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    2ac0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2ac8:	f007 bbde 	b.w	a288 <__tVZFilter_setGain_veneer>
    2acc:	42480000 	.word	0x42480000
    2ad0:	20000924 	.word	0x20000924
    2ad4:	f3af 8000 	nop.w
    2ad8:	f3af 8000 	nop.w
    2adc:	f3af 8000 	nop.w

00002ae0 <VZbandrejectSetGain>:
    2ae0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    2ae4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    2ae8:	b538      	push	{r3, r4, r5, lr}
    2aea:	eee0 7a07 	vfma.f32	s15, s0, s14
    2aee:	4605      	mov	r5, r0
    2af0:	460c      	mov	r4, r1
    2af2:	eeb0 0a67 	vmov.f32	s0, s15
    2af6:	f007 fbb7 	bl	a268 <__fasterdbtoa_veneer>
    2afa:	4b04      	ldr	r3, [pc, #16]	; (2b0c <VZbandrejectSetGain+0x2c>)
    2afc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    2b00:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2b04:	ed83 0a00 	vstr	s0, [r3]
    2b08:	bd38      	pop	{r3, r4, r5, pc}
    2b0a:	bf00      	nop
    2b0c:	20005114 	.word	0x20005114
    2b10:	f3af 8000 	nop.w
    2b14:	f3af 8000 	nop.w
    2b18:	f3af 8000 	nop.w
    2b1c:	f3af 8000 	nop.w

00002b20 <LadderLowpassSetGain>:
    2b20:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    2b24:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    2b28:	b538      	push	{r3, r4, r5, lr}
    2b2a:	eee0 7a07 	vfma.f32	s15, s0, s14
    2b2e:	4605      	mov	r5, r0
    2b30:	460c      	mov	r4, r1
    2b32:	eeb0 0a67 	vmov.f32	s0, s15
    2b36:	f007 fb97 	bl	a268 <__fasterdbtoa_veneer>
    2b3a:	4b04      	ldr	r3, [pc, #16]	; (2b4c <LadderLowpassSetGain+0x2c>)
    2b3c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    2b40:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2b44:	ed83 0a00 	vstr	s0, [r3]
    2b48:	bd38      	pop	{r3, r4, r5, pc}
    2b4a:	bf00      	nop
    2b4c:	20005114 	.word	0x20005114
    2b50:	f3af 8000 	nop.w
    2b54:	f3af 8000 	nop.w
    2b58:	f3af 8000 	nop.w
    2b5c:	f3af 8000 	nop.w

00002b60 <envelope_tick>:
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
}


void __ATTR_ITCMRAM envelope_tick(int string)
{
    2b60:	b538      	push	{r3, r4, r5, lr}
	for (int v = 0; v < NUM_ENV; v++)
	{
		if (envOn[v])
    2b62:	4d1d      	ldr	r5, [pc, #116]	; (2bd8 <envelope_tick+0x78>)
{
    2b64:	4604      	mov	r4, r0
		if (envOn[v])
    2b66:	782b      	ldrb	r3, [r5, #0]
    2b68:	bb53      	cbnz	r3, 2bc0 <envelope_tick+0x60>
    2b6a:	786b      	ldrb	r3, [r5, #1]
    2b6c:	b9e3      	cbnz	r3, 2ba8 <envelope_tick+0x48>
    2b6e:	78ab      	ldrb	r3, [r5, #2]
    2b70:	b973      	cbnz	r3, 2b90 <envelope_tick+0x30>
    2b72:	78eb      	ldrb	r3, [r5, #3]
    2b74:	b903      	cbnz	r3, 2b78 <envelope_tick+0x18>
		{
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
		}
	}
}
    2b76:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    2b78:	4b18      	ldr	r3, [pc, #96]	; (2bdc <envelope_tick+0x7c>)
    2b7a:	1da0      	adds	r0, r4, #6
    2b7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2b80:	f005 fe8e 	bl	88a0 <tADSRT_tickNoInterp>
    2b84:	4b16      	ldr	r3, [pc, #88]	; (2be0 <envelope_tick+0x80>)
    2b86:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2b8a:	ed83 0a2e 	vstr	s0, [r3, #184]	; 0xb8
}
    2b8e:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    2b90:	4b12      	ldr	r3, [pc, #72]	; (2bdc <envelope_tick+0x7c>)
    2b92:	1d20      	adds	r0, r4, #4
    2b94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2b98:	f005 fe82 	bl	88a0 <tADSRT_tickNoInterp>
    2b9c:	4b10      	ldr	r3, [pc, #64]	; (2be0 <envelope_tick+0x80>)
    2b9e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2ba2:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
    2ba6:	e7e4      	b.n	2b72 <envelope_tick+0x12>
    2ba8:	4b0c      	ldr	r3, [pc, #48]	; (2bdc <envelope_tick+0x7c>)
    2baa:	1ca0      	adds	r0, r4, #2
    2bac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2bb0:	f005 fe76 	bl	88a0 <tADSRT_tickNoInterp>
    2bb4:	4b0a      	ldr	r3, [pc, #40]	; (2be0 <envelope_tick+0x80>)
    2bb6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2bba:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
    2bbe:	e7d6      	b.n	2b6e <envelope_tick+0xe>
    2bc0:	4806      	ldr	r0, [pc, #24]	; (2bdc <envelope_tick+0x7c>)
    2bc2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    2bc6:	f005 fe6b 	bl	88a0 <tADSRT_tickNoInterp>
    2bca:	4b05      	ldr	r3, [pc, #20]	; (2be0 <envelope_tick+0x80>)
    2bcc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2bd0:	ed83 0a28 	vstr	s0, [r3, #160]	; 0xa0
    2bd4:	e7c9      	b.n	2b6a <envelope_tick+0xa>
    2bd6:	bf00      	nop
    2bd8:	200050d8 	.word	0x200050d8
    2bdc:	200050dc 	.word	0x200050dc
    2be0:	200146d8 	.word	0x200146d8
    2be4:	f3af 8000 	nop.w
    2be8:	f3af 8000 	nop.w
    2bec:	f3af 8000 	nop.w
    2bf0:	f3af 8000 	nop.w
    2bf4:	f3af 8000 	nop.w
    2bf8:	f3af 8000 	nop.w
    2bfc:	f3af 8000 	nop.w

00002c00 <lfo_tick>:


void __ATTR_ITCMRAM lfo_tick(int string)
{
    2c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c04:	f8df 804c 	ldr.w	r8, [pc, #76]	; 2c54 <lfo_tick+0x54>
    2c08:	b082      	sub	sp, #8
    2c0a:	4d10      	ldr	r5, [pc, #64]	; (2c4c <lfo_tick+0x4c>)
    2c0c:	4607      	mov	r7, r0
    2c0e:	4e10      	ldr	r6, [pc, #64]	; (2c50 <lfo_tick+0x50>)
    2c10:	f108 0904 	add.w	r9, r8, #4
    2c14:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    2c18:	4644      	mov	r4, r8
	for (int i = 0; i < NUM_LFOS; i++)
	{
		if (lfoOn[i])
		{
			float sample = 0.0f;
    2c1a:	f04f 0a00 	mov.w	sl, #0
    2c1e:	eba4 0108 	sub.w	r1, r4, r8
		if (lfoOn[i])
    2c22:	f814 3b01 	ldrb.w	r3, [r4], #1
			lfoShapeTick[i](&sample,i, string);
    2c26:	463a      	mov	r2, r7
    2c28:	a801      	add	r0, sp, #4
		if (lfoOn[i])
    2c2a:	b133      	cbz	r3, 2c3a <lfo_tick+0x3a>
			lfoShapeTick[i](&sample,i, string);
    2c2c:	6833      	ldr	r3, [r6, #0]
			float sample = 0.0f;
    2c2e:	f8cd a004 	str.w	sl, [sp, #4]
			lfoShapeTick[i](&sample,i, string);
    2c32:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    2c34:	9b01      	ldr	r3, [sp, #4]
    2c36:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    2c3a:	454c      	cmp	r4, r9
    2c3c:	f106 0604 	add.w	r6, r6, #4
    2c40:	f105 0508 	add.w	r5, r5, #8
    2c44:	d1eb      	bne.n	2c1e <lfo_tick+0x1e>
		}
	}
}
    2c46:	b002      	add	sp, #8
    2c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c4c:	200146d8 	.word	0x200146d8
    2c50:	200053a8 	.word	0x200053a8
    2c54:	20005344 	.word	0x20005344
    2c58:	f3af 8000 	nop.w
    2c5c:	f3af 8000 	nop.w

00002c60 <setEnvelopeAttack>:


void  __ATTR_ITCMRAM  setEnvelopeAttack(float a, int v, int string)
{
	a = a + 0.001f;
    2c60:	eddf 7a05 	vldr	s15, [pc, #20]	; 2c78 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
    2c64:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2c68:	4b04      	ldr	r3, [pc, #16]	; (2c7c <setEnvelopeAttack+0x1c>)
    2c6a:	ee30 0a27 	vadd.f32	s0, s0, s15
    2c6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2c72:	f005 bbd5 	b.w	8420 <tADSRT_setAttack>
    2c76:	bf00      	nop
    2c78:	3a83126f 	.word	0x3a83126f
    2c7c:	200050dc 	.word	0x200050dc

00002c80 <setEnvelopeDecay>:
}

void  __ATTR_ITCMRAM  setEnvelopeDecay(float d, int v, int string)
{
	d = d + 0.001f;
    2c80:	eddf 7a05 	vldr	s15, [pc, #20]	; 2c98 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
    2c84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2c88:	4b04      	ldr	r3, [pc, #16]	; (2c9c <setEnvelopeDecay+0x1c>)
    2c8a:	ee30 0a27 	vadd.f32	s0, s0, s15
    2c8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2c92:	f005 bbe5 	b.w	8460 <tADSRT_setDecay>
    2c96:	bf00      	nop
    2c98:	3a83126f 	.word	0x3a83126f
    2c9c:	200050dc 	.word	0x200050dc

00002ca0 <setEnvelopeSustain>:
}

void  __ATTR_ITCMRAM  setEnvelopeSustain(float s, int v, int string)
{
	tADSRT_setSustain(&envs[v][string], s);
    2ca0:	4b03      	ldr	r3, [pc, #12]	; (2cb0 <setEnvelopeSustain+0x10>)
    2ca2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2ca6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2caa:	f005 bbf9 	b.w	84a0 <tADSRT_setSustain>
    2cae:	bf00      	nop
    2cb0:	200050dc 	.word	0x200050dc
    2cb4:	f3af 8000 	nop.w
    2cb8:	f3af 8000 	nop.w
    2cbc:	f3af 8000 	nop.w

00002cc0 <setEnvelopeRelease>:
}

void  __ATTR_ITCMRAM  setEnvelopeRelease(float r, int v, int string)
{
	r = r + 0.001f;
    2cc0:	eddf 7a05 	vldr	s15, [pc, #20]	; 2cd8 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
    2cc4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2cc8:	4b04      	ldr	r3, [pc, #16]	; (2cdc <setEnvelopeRelease+0x1c>)
    2cca:	ee30 0a27 	vadd.f32	s0, s0, s15
    2cce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2cd2:	f005 bbf5 	b.w	84c0 <tADSRT_setRelease>
    2cd6:	bf00      	nop
    2cd8:	3a83126f 	.word	0x3a83126f
    2cdc:	200050dc 	.word	0x200050dc

00002ce0 <setEnvelopeLeak>:
}

void  __ATTR_ITCMRAM  setEnvelopeLeak(float leak, int v, int string)
{
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    2ce0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    2ce4:	eddf 6a08 	vldr	s13, [pc, #32]	; 2d08 <setEnvelopeLeak+0x28>
    2ce8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 2d0c <setEnvelopeLeak+0x2c>
    2cec:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2cf0:	4b07      	ldr	r3, [pc, #28]	; (2d10 <setEnvelopeLeak+0x30>)
    2cf2:	ee77 7ac0 	vsub.f32	s15, s15, s0
    2cf6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2cfa:	eea7 7aa6 	vfma.f32	s14, s15, s13
    2cfe:	eeb0 0a47 	vmov.f32	s0, s14
    2d02:	f005 bbfd 	b.w	8500 <tADSRT_setLeakFactor>
    2d06:	bf00      	nop
    2d08:	3851b717 	.word	0x3851b717
    2d0c:	3f7ffcb9 	.word	0x3f7ffcb9
    2d10:	200050dc 	.word	0x200050dc
    2d14:	f3af 8000 	nop.w
    2d18:	f3af 8000 	nop.w
    2d1c:	f3af 8000 	nop.w

00002d20 <setAmp>:
}

void  __ATTR_ITCMRAM  setAmp(float amp, int v, int string)
{
	amplitude[string] = amp;
    2d20:	4b02      	ldr	r3, [pc, #8]	; (2d2c <setAmp+0xc>)
    2d22:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2d26:	ed81 0a00 	vstr	s0, [r1]
}
    2d2a:	4770      	bx	lr
    2d2c:	20000a64 	.word	0x20000a64
    2d30:	f3af 8000 	nop.w
    2d34:	f3af 8000 	nop.w
    2d38:	f3af 8000 	nop.w
    2d3c:	f3af 8000 	nop.w

00002d40 <setMaster>:

void  __ATTR_ITCMRAM  setMaster(float amp,  int v, int string)
{
	finalMaster[string] = amp;
    2d40:	4b02      	ldr	r3, [pc, #8]	; (2d4c <setMaster+0xc>)
    2d42:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2d46:	ed81 0a00 	vstr	s0, [r1]
}
    2d4a:	4770      	bx	lr
    2d4c:	20005134 	.word	0x20005134
    2d50:	f3af 8000 	nop.w
    2d54:	f3af 8000 	nop.w
    2d58:	f3af 8000 	nop.w
    2d5c:	f3af 8000 	nop.w

00002d60 <setTranspose>:

void  __ATTR_ITCMRAM  setTranspose(float in, int v, int string)
{
	transpose = in;
    2d60:	4b01      	ldr	r3, [pc, #4]	; (2d68 <setTranspose+0x8>)
    2d62:	ed83 0a00 	vstr	s0, [r3]
}
    2d66:	4770      	bx	lr
    2d68:	200148e0 	.word	0x200148e0
    2d6c:	f3af 8000 	nop.w
    2d70:	f3af 8000 	nop.w
    2d74:	f3af 8000 	nop.w
    2d78:	f3af 8000 	nop.w
    2d7c:	f3af 8000 	nop.w

00002d80 <setPitchBendRange>:

void  __ATTR_ITCMRAM  setPitchBendRange(float in, int v, int string)
{
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    2d80:	eddf 7a03 	vldr	s15, [pc, #12]	; 2d90 <setPitchBendRange+0x10>
    2d84:	4b03      	ldr	r3, [pc, #12]	; (2d94 <setPitchBendRange+0x14>)
    2d86:	ee20 0a27 	vmul.f32	s0, s0, s15
    2d8a:	ed83 0a00 	vstr	s0, [r3]
}
    2d8e:	4770      	bx	lr
    2d90:	39000200 	.word	0x39000200
    2d94:	20000000 	.word	0x20000000
    2d98:	f3af 8000 	nop.w
    2d9c:	f3af 8000 	nop.w

00002da0 <setFinalLowpass>:

void  __ATTR_ITCMRAM  setFinalLowpass(float in, int v, int string)
{
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    2da0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    2da4:	eddf 7a0b 	vldr	s15, [pc, #44]	; 2dd4 <setFinalLowpass+0x34>
{
    2da8:	eef0 0a40 	vmov.f32	s1, s0
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    2dac:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 2dd8 <setFinalLowpass+0x38>
    2db0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2ddc <setFinalLowpass+0x3c>
    2db4:	ee70 0ac7 	vsub.f32	s1, s1, s14
{
    2db8:	b510      	push	{r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    2dba:	ee60 0aa7 	vmul.f32	s1, s1, s15
{
    2dbe:	460c      	mov	r4, r1
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    2dc0:	f005 ff0e 	bl	8be0 <LEAF_clip>
    2dc4:	4806      	ldr	r0, [pc, #24]	; (2de0 <setFinalLowpass+0x40>)
    2dc6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    2dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
    2dce:	f007 bb17 	b.w	a400 <__tSVF_setFreqFast_veneer>
    2dd2:	bf00      	nop
    2dd4:	420fb824 	.word	0x420fb824
    2dd8:	457ff000 	.word	0x457ff000
    2ddc:	00000000 	.word	0x00000000
    2de0:	2000512c 	.word	0x2000512c
    2de4:	f3af 8000 	nop.w
    2de8:	f3af 8000 	nop.w
    2dec:	f3af 8000 	nop.w
    2df0:	f3af 8000 	nop.w
    2df4:	f3af 8000 	nop.w
    2df8:	f3af 8000 	nop.w
    2dfc:	f3af 8000 	nop.w

00002e00 <tickMappings>:


void __ATTR_ITCMRAM tickMappings(void)
{
    2e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	interruptChecker = 0;
	for (int i = 0; i < numMappings; i++)
    2e04:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2eec <tickMappings+0xec>
	interruptChecker = 0;
    2e08:	2700      	movs	r7, #0
    2e0a:	4b35      	ldr	r3, [pc, #212]	; (2ee0 <tickMappings+0xe0>)
	for (int i = 0; i < numMappings; i++)
    2e0c:	f89a 2000 	ldrb.w	r2, [sl]
	interruptChecker = 0;
    2e10:	701f      	strb	r7, [r3, #0]
	for (int i = 0; i < numMappings; i++)
    2e12:	2a00      	cmp	r2, #0
    2e14:	d062      	beq.n	2edc <tickMappings+0xdc>
    2e16:	4c33      	ldr	r4, [pc, #204]	; (2ee4 <tickMappings+0xe4>)
	{
		if (mappings[i].destNumber != 255)
		{
			for (int v = 0; v < numStringsThisBoard; v++)
    2e18:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 2ef0 <tickMappings+0xf0>
    2e1c:	e003      	b.n	2e26 <tickMappings+0x26>
	for (int i = 0; i < numMappings; i++)
    2e1e:	3701      	adds	r7, #1
    2e20:	344c      	adds	r4, #76	; 0x4c
    2e22:	42ba      	cmp	r2, r7
    2e24:	dd5a      	ble.n	2edc <tickMappings+0xdc>
		if (mappings[i].destNumber != 255)
    2e26:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    2e2a:	2bff      	cmp	r3, #255	; 0xff
    2e2c:	d0f7      	beq.n	2e1e <tickMappings+0x1e>
			for (int v = 0; v < numStringsThisBoard; v++)
    2e2e:	f899 3000 	ldrb.w	r3, [r9]
    2e32:	2b00      	cmp	r3, #0
    2e34:	d0f3      	beq.n	2e1e <tickMappings+0x1e>
    2e36:	4626      	mov	r6, r4
    2e38:	2500      	movs	r5, #0
			{
				float unsmoothedValue = 0.0f;
				//float smoothedValue = 0.0f;
				for (int j = 0; j < 3; j++)
				{
					if (mappings[i].hookActive[j])
    2e3a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				float unsmoothedValue = 0.0f;
    2e3e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 2ee8 <tickMappings+0xe8>
					if (mappings[i].hookActive[j])
    2e42:	b15b      	cbz	r3, 2e5c <tickMappings+0x5c>
					{
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2e44:	6832      	ldr	r2, [r6, #0]
    2e46:	69f3      	ldr	r3, [r6, #28]
    2e48:	edd2 7a00 	vldr	s15, [r2]
    2e4c:	edd3 6a00 	vldr	s13, [r3]
    2e50:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
    2e54:	ee67 7aa6 	vmul.f32	s15, s15, s13
    2e58:	ee67 7a87 	vmul.f32	s15, s15, s14
					if (mappings[i].hookActive[j])
    2e5c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    2e60:	b15b      	cbz	r3, 2e7a <tickMappings+0x7a>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2e62:	68b2      	ldr	r2, [r6, #8]
    2e64:	6a73      	ldr	r3, [r6, #36]	; 0x24
						//{
						//	smoothedValue += sum;
						//}
						//else
						//{
							unsmoothedValue += sum;
    2e66:	ed92 7a00 	vldr	s14, [r2]
    2e6a:	ed93 6a00 	vldr	s12, [r3]
    2e6e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    2e72:	ee27 7a06 	vmul.f32	s14, s14, s12
    2e76:	eee7 7a26 	vfma.f32	s15, s14, s13
					if (mappings[i].hookActive[j])
    2e7a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    2e7e:	b15b      	cbz	r3, 2e98 <tickMappings+0x98>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2e80:	6932      	ldr	r2, [r6, #16]
    2e82:	6af3      	ldr	r3, [r6, #44]	; 0x2c
							unsmoothedValue += sum;
    2e84:	ed92 7a00 	vldr	s14, [r2]
    2e88:	ed93 6a00 	vldr	s12, [r3]
    2e8c:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    2e90:	ee27 7a06 	vmul.f32	s14, s14, s12
    2e94:	eee7 7a26 	vfma.f32	s15, s14, s13
				//smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
				//float finalVal = unsmoothedValue + smoothedValue;

				//now scale the value with the correct scaling function
				//mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(unsmoothedValue + mappings[i].dest->zeroToOneVal[v]);
    2e98:	f854 3c04 	ldr.w	r3, [r4, #-4]
			for (int v = 0; v < numStringsThisBoard; v++)
    2e9c:	3604      	adds	r6, #4
    2e9e:	eb03 0885 	add.w	r8, r3, r5, lsl #2
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(unsmoothedValue + mappings[i].dest->zeroToOneVal[v]);
    2ea2:	691b      	ldr	r3, [r3, #16]
    2ea4:	ed98 0a00 	vldr	s0, [r8]
    2ea8:	ee37 0a80 	vadd.f32	s0, s15, s0
    2eac:	4798      	blx	r3
    2eae:	ed88 0a02 	vstr	s0, [r8, #8]
				//and pop that value where it belongs by setting the actual parameter
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2eb2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2eb6:	4629      	mov	r1, r5
    2eb8:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
    2ebc:	695a      	ldr	r2, [r3, #20]
    2ebe:	7e18      	ldrb	r0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    2ec0:	3501      	adds	r5, #1
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2ec2:	ed9c 0a02 	vldr	s0, [ip, #8]
    2ec6:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    2ec8:	f899 3000 	ldrb.w	r3, [r9]
    2ecc:	42ab      	cmp	r3, r5
    2ece:	dcb4      	bgt.n	2e3a <tickMappings+0x3a>
	for (int i = 0; i < numMappings; i++)
    2ed0:	f89a 2000 	ldrb.w	r2, [sl]
    2ed4:	3701      	adds	r7, #1
    2ed6:	344c      	adds	r4, #76	; 0x4c
    2ed8:	42ba      	cmp	r2, r7
    2eda:	dca4      	bgt.n	2e26 <tickMappings+0x26>
			}
		}
	}


}
    2edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ee0:	20016cdb 	.word	0x20016cdb
    2ee4:	20018d18 	.word	0x20018d18
    2ee8:	00000000 	.word	0x00000000
    2eec:	20019958 	.word	0x20019958
    2ef0:	20000015 	.word	0x20000015
    2ef4:	f3af 8000 	nop.w
    2ef8:	f3af 8000 	nop.w
    2efc:	f3af 8000 	nop.w

00002f00 <lfoSawSquareTick>:



void __ATTR_ITCMRAM lfoSawSquareTick(float* sample, int v, int string)
{
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    2f00:	4b05      	ldr	r3, [pc, #20]	; (2f18 <lfoSawSquareTick+0x18>)
    2f02:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    2f06:	b510      	push	{r4, lr}
    2f08:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    2f0a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    2f0e:	f007 f9eb 	bl	a2e8 <__tSawSquareLFO_tick_veneer>
    2f12:	ed84 0a00 	vstr	s0, [r4]
}
    2f16:	bd10      	pop	{r4, pc}
    2f18:	20005388 	.word	0x20005388
    2f1c:	f3af 8000 	nop.w

00002f20 <lfoSineTriTick>:

void __ATTR_ITCMRAM lfoSineTriTick(float* sample, int v, int string)
{
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    2f20:	4b05      	ldr	r3, [pc, #20]	; (2f38 <lfoSineTriTick+0x18>)
    2f22:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    2f26:	b510      	push	{r4, lr}
    2f28:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    2f2a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    2f2e:	f007 f9c7 	bl	a2c0 <__tSineTriLFO_tick_veneer>
    2f32:	ed84 0a00 	vstr	s0, [r4]
}
    2f36:	bd10      	pop	{r4, pc}
    2f38:	200053d8 	.word	0x200053d8
    2f3c:	f3af 8000 	nop.w

00002f40 <lfoSineTick>:

void __ATTR_ITCMRAM lfoSineTick(float* sample, int v, int string)
{
    *sample = tCycle_tick(&lfoSine[v][string]);
    2f40:	4b05      	ldr	r3, [pc, #20]	; (2f58 <lfoSineTick+0x18>)
    2f42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    2f46:	b510      	push	{r4, lr}
    2f48:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    2f4a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    2f4e:	f007 fa0f 	bl	a370 <__tCycle_tick_veneer>
    2f52:	ed84 0a00 	vstr	s0, [r4]
}
    2f56:	bd10      	pop	{r4, pc}
    2f58:	200053b8 	.word	0x200053b8
    2f5c:	f3af 8000 	nop.w

00002f60 <lfoTriTick>:

void __ATTR_ITCMRAM lfoTriTick(float* sample, int v, int string)
{
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    2f60:	4b05      	ldr	r3, [pc, #20]	; (2f78 <lfoTriTick+0x18>)
    2f62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    2f66:	b510      	push	{r4, lr}
    2f68:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    2f6a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    2f6e:	f007 fabf 	bl	a4f0 <__tTriLFO_tick_veneer>
    2f72:	ed84 0a00 	vstr	s0, [r4]
}
    2f76:	bd10      	pop	{r4, pc}
    2f78:	200053f8 	.word	0x200053f8
    2f7c:	f3af 8000 	nop.w

00002f80 <lfoSawTick>:
void __ATTR_ITCMRAM lfoSawTick(float* sample, int v, int string)
{
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    2f80:	4b08      	ldr	r3, [pc, #32]	; (2fa4 <lfoSawTick+0x24>)
    2f82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    2f86:	b510      	push	{r4, lr}
    2f88:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    2f8a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    2f8e:	f007 fa7b 	bl	a488 <__tIntPhasor_tick_veneer>
    2f92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    2f96:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    2f9a:	eee0 7a07 	vfma.f32	s15, s0, s14
    2f9e:	edc4 7a00 	vstr	s15, [r4]
}
    2fa2:	bd10      	pop	{r4, pc}
    2fa4:	20005368 	.word	0x20005368
    2fa8:	f3af 8000 	nop.w
    2fac:	f3af 8000 	nop.w
    2fb0:	f3af 8000 	nop.w
    2fb4:	f3af 8000 	nop.w
    2fb8:	f3af 8000 	nop.w
    2fbc:	f3af 8000 	nop.w

00002fc0 <lfoPulseTick>:

void __ATTR_ITCMRAM lfoPulseTick(float* sample, int v, int string)
{
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    2fc0:	4b05      	ldr	r3, [pc, #20]	; (2fd8 <lfoPulseTick+0x18>)
    2fc2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    2fc6:	b510      	push	{r4, lr}
    2fc8:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    2fca:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    2fce:	f007 f9fb 	bl	a3c8 <__tSquareLFO_tick_veneer>
    2fd2:	ed84 0a00 	vstr	s0, [r4]
}
    2fd6:	bd10      	pop	{r4, pc}
    2fd8:	20005348 	.word	0x20005348
    2fdc:	f3af 8000 	nop.w

00002fe0 <lfoSawSquareSetRate>:

void __ATTR_ITCMRAM lfoSawSquareSetRate(float r, int v, int string)
{
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    2fe0:	4b03      	ldr	r3, [pc, #12]	; (2ff0 <lfoSawSquareSetRate+0x10>)
    2fe2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2fe6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2fea:	f007 ba41 	b.w	a470 <__tSawSquareLFO_setFreq_veneer>
    2fee:	bf00      	nop
    2ff0:	20005388 	.word	0x20005388
    2ff4:	f3af 8000 	nop.w
    2ff8:	f3af 8000 	nop.w
    2ffc:	f3af 8000 	nop.w

00003000 <lfoSineTriSetRate>:
}

void __ATTR_ITCMRAM lfoSineTriSetRate(float r, int v, int string)
{
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    3000:	4b03      	ldr	r3, [pc, #12]	; (3010 <lfoSineTriSetRate+0x10>)
    3002:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3006:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    300a:	f007 b985 	b.w	a318 <__tSineTriLFO_setFreq_veneer>
    300e:	bf00      	nop
    3010:	200053d8 	.word	0x200053d8
    3014:	f3af 8000 	nop.w
    3018:	f3af 8000 	nop.w
    301c:	f3af 8000 	nop.w

00003020 <lfoSineSetRate>:
}
void __ATTR_ITCMRAM lfoSineSetRate(float r, int v, int string)
{
	tCycle_setFreq(&lfoSine[v][string], r);
    3020:	4b03      	ldr	r3, [pc, #12]	; (3030 <lfoSineSetRate+0x10>)
    3022:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3026:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    302a:	f007 b9b1 	b.w	a390 <__tCycle_setFreq_veneer>
    302e:	bf00      	nop
    3030:	200053b8 	.word	0x200053b8
    3034:	f3af 8000 	nop.w
    3038:	f3af 8000 	nop.w
    303c:	f3af 8000 	nop.w

00003040 <lfoTriSetRate>:
}
void __ATTR_ITCMRAM lfoTriSetRate(float r, int v, int string)
{
	tTriLFO_setFreq(&lfoTri[v][string], r);
    3040:	4b03      	ldr	r3, [pc, #12]	; (3050 <lfoTriSetRate+0x10>)
    3042:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3046:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    304a:	f007 b9ad 	b.w	a3a8 <__tTriLFO_setFreq_veneer>
    304e:	bf00      	nop
    3050:	200053f8 	.word	0x200053f8
    3054:	f3af 8000 	nop.w
    3058:	f3af 8000 	nop.w
    305c:	f3af 8000 	nop.w

00003060 <lfoSawSetRate>:
}
void __ATTR_ITCMRAM lfoSawSetRate(float r, int v, int string)
{
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    3060:	4b03      	ldr	r3, [pc, #12]	; (3070 <lfoSawSetRate+0x10>)
    3062:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3066:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    306a:	f007 b95d 	b.w	a328 <__tIntPhasor_setFreq_veneer>
    306e:	bf00      	nop
    3070:	20005368 	.word	0x20005368
    3074:	f3af 8000 	nop.w
    3078:	f3af 8000 	nop.w
    307c:	f3af 8000 	nop.w

00003080 <lfoPulseSetRate>:
}
void __ATTR_ITCMRAM lfoPulseSetRate(float r, int v, int string)
{
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    3080:	4b03      	ldr	r3, [pc, #12]	; (3090 <lfoPulseSetRate+0x10>)
    3082:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3086:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    308a:	f007 ba45 	b.w	a518 <__tSquareLFO_setFreq_veneer>
    308e:	bf00      	nop
    3090:	20005348 	.word	0x20005348
    3094:	f3af 8000 	nop.w
    3098:	f3af 8000 	nop.w
    309c:	f3af 8000 	nop.w

000030a0 <lfoSawSquareSetPhase>:
}


void __ATTR_ITCMRAM lfoSawSquareSetPhase(float p, int v, int string)
{
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    30a0:	4b03      	ldr	r3, [pc, #12]	; (30b0 <lfoSawSquareSetPhase+0x10>)
    30a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    30a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    30aa:	f007 b8d5 	b.w	a258 <__tSawSquareLFO_setPhase_veneer>
    30ae:	bf00      	nop
    30b0:	20005388 	.word	0x20005388
    30b4:	f3af 8000 	nop.w
    30b8:	f3af 8000 	nop.w
    30bc:	f3af 8000 	nop.w

000030c0 <lfoSineTriSetPhase>:
}
void __ATTR_ITCMRAM lfoSineTriSetPhase(float p, int v, int string)
{
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    30c0:	4b03      	ldr	r3, [pc, #12]	; (30d0 <lfoSineTriSetPhase+0x10>)
    30c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    30c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    30ca:	f007 b965 	b.w	a398 <__tSineTriLFO_setPhase_veneer>
    30ce:	bf00      	nop
    30d0:	200053d8 	.word	0x200053d8
    30d4:	f3af 8000 	nop.w
    30d8:	f3af 8000 	nop.w
    30dc:	f3af 8000 	nop.w

000030e0 <lfoSineSetPhase>:
}
void __ATTR_ITCMRAM lfoSineSetPhase(float p, int v, int string)
{
	tCycle_setPhase(&lfoSine[v][string],p);
    30e0:	4b03      	ldr	r3, [pc, #12]	; (30f0 <lfoSineSetPhase+0x10>)
    30e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    30e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    30ea:	f007 b9a5 	b.w	a438 <__tCycle_setPhase_veneer>
    30ee:	bf00      	nop
    30f0:	200053b8 	.word	0x200053b8
    30f4:	f3af 8000 	nop.w
    30f8:	f3af 8000 	nop.w
    30fc:	f3af 8000 	nop.w

00003100 <lfoTriSetPhase>:
}
void __ATTR_ITCMRAM lfoTriSetPhase(float p, int v, int string)
{
	tTriLFO_setPhase(&lfoTri[v][string],p);
    3100:	4b03      	ldr	r3, [pc, #12]	; (3110 <lfoTriSetPhase+0x10>)
    3102:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3106:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    310a:	f007 b891 	b.w	a230 <__tTriLFO_setPhase_veneer>
    310e:	bf00      	nop
    3110:	200053f8 	.word	0x200053f8
    3114:	f3af 8000 	nop.w
    3118:	f3af 8000 	nop.w
    311c:	f3af 8000 	nop.w

00003120 <lfoSawSetPhase>:
}
void __ATTR_ITCMRAM lfoSawSetPhase(float p, int v, int string)
{
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    3120:	4b03      	ldr	r3, [pc, #12]	; (3130 <lfoSawSetPhase+0x10>)
    3122:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3126:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    312a:	f007 b941 	b.w	a3b0 <__tIntPhasor_setPhase_veneer>
    312e:	bf00      	nop
    3130:	20005368 	.word	0x20005368
    3134:	f3af 8000 	nop.w
    3138:	f3af 8000 	nop.w
    313c:	f3af 8000 	nop.w

00003140 <lfoPulseSetPhase>:
}
void __ATTR_ITCMRAM lfoPulseSetPhase(float p, int v, int string)
{
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    3140:	4b03      	ldr	r3, [pc, #12]	; (3150 <lfoPulseSetPhase+0x10>)
    3142:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3146:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    314a:	f007 b939 	b.w	a3c0 <__tSquareLFO_setPhase_veneer>
    314e:	bf00      	nop
    3150:	20005348 	.word	0x20005348
    3154:	f3af 8000 	nop.w
    3158:	f3af 8000 	nop.w
    315c:	f3af 8000 	nop.w

00003160 <lfoSawSquareSetShape>:
}


void __ATTR_ITCMRAM lfoSawSquareSetShape(float s, int v, int string)
{
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    3160:	4b03      	ldr	r3, [pc, #12]	; (3170 <lfoSawSquareSetShape+0x10>)
    3162:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3166:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    316a:	f007 b93d 	b.w	a3e8 <__tSawSquareLFO_setShape_veneer>
    316e:	bf00      	nop
    3170:	20005388 	.word	0x20005388
    3174:	f3af 8000 	nop.w
    3178:	f3af 8000 	nop.w
    317c:	f3af 8000 	nop.w

00003180 <lfoSineTriSetShape>:
}
void __ATTR_ITCMRAM lfoSineTriSetShape(float s, int v, int string)
{
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    3180:	4b03      	ldr	r3, [pc, #12]	; (3190 <lfoSineTriSetShape+0x10>)
    3182:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3186:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    318a:	f007 b9c1 	b.w	a510 <__tSineTriLFO_setShape_veneer>
    318e:	bf00      	nop
    3190:	200053d8 	.word	0x200053d8
    3194:	f3af 8000 	nop.w
    3198:	f3af 8000 	nop.w
    319c:	f3af 8000 	nop.w

000031a0 <lfoSineSetShape>:
}
void __ATTR_ITCMRAM lfoSineSetShape(float s, int v, int string)
{
	//none
}
    31a0:	4770      	bx	lr
    31a2:	bf00      	nop
    31a4:	f3af 8000 	nop.w
    31a8:	f3af 8000 	nop.w
    31ac:	f3af 8000 	nop.w
    31b0:	f3af 8000 	nop.w
    31b4:	f3af 8000 	nop.w
    31b8:	f3af 8000 	nop.w
    31bc:	f3af 8000 	nop.w

000031c0 <lfoTriSetShape>:
    31c0:	4770      	bx	lr
    31c2:	bf00      	nop
    31c4:	f3af 8000 	nop.w
    31c8:	f3af 8000 	nop.w
    31cc:	f3af 8000 	nop.w
    31d0:	f3af 8000 	nop.w
    31d4:	f3af 8000 	nop.w
    31d8:	f3af 8000 	nop.w
    31dc:	f3af 8000 	nop.w

000031e0 <lfoSawSetShape>:
    31e0:	4770      	bx	lr
    31e2:	bf00      	nop
    31e4:	f3af 8000 	nop.w
    31e8:	f3af 8000 	nop.w
    31ec:	f3af 8000 	nop.w
    31f0:	f3af 8000 	nop.w
    31f4:	f3af 8000 	nop.w
    31f8:	f3af 8000 	nop.w
    31fc:	f3af 8000 	nop.w

00003200 <lfoPulseSetShape>:
{
	//none
}
void __ATTR_ITCMRAM lfoPulseSetShape(float s, int v, int string)
{
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    3200:	4b03      	ldr	r3, [pc, #12]	; (3210 <lfoPulseSetShape+0x10>)
    3202:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    320a:	f007 b969 	b.w	a4e0 <__tSquareLFO_setPulseWidth_veneer>
    320e:	bf00      	nop
    3210:	20005348 	.word	0x20005348
    3214:	f3af 8000 	nop.w
    3218:	f3af 8000 	nop.w
    321c:	f3af 8000 	nop.w

00003220 <clipperGainSet>:



void __ATTR_ITCMRAM  clipperGainSet(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 24.0f);
    3220:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    3224:	b538      	push	{r3, r4, r5, lr}
    3226:	4605      	mov	r5, r0
    3228:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 24.0f);
    322a:	ee20 0a27 	vmul.f32	s0, s0, s15
    322e:	f007 f81b 	bl	a268 <__fasterdbtoa_veneer>
    3232:	4b04      	ldr	r3, [pc, #16]	; (3244 <clipperGainSet+0x24>)
    3234:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    3238:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    323c:	ed83 0a00 	vstr	s0, [r3]
}
    3240:	bd38      	pop	{r3, r4, r5, pc}
    3242:	bf00      	nop
    3244:	20005640 	.word	0x20005640
    3248:	f3af 8000 	nop.w
    324c:	f3af 8000 	nop.w
    3250:	f3af 8000 	nop.w
    3254:	f3af 8000 	nop.w
    3258:	f3af 8000 	nop.w
    325c:	f3af 8000 	nop.w

00003260 <wavefolderParam1>:
void __ATTR_ITCMRAM  wavefolderParam1(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 12.0f);
    3260:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    3264:	b538      	push	{r3, r4, r5, lr}
    3266:	4605      	mov	r5, r0
    3268:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 12.0f);
    326a:	ee20 0a27 	vmul.f32	s0, s0, s15
    326e:	f006 fffb 	bl	a268 <__fasterdbtoa_veneer>
    3272:	4b04      	ldr	r3, [pc, #16]	; (3284 <wavefolderParam1+0x24>)
    3274:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    3278:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    327c:	ed83 0a00 	vstr	s0, [r3]
}
    3280:	bd38      	pop	{r3, r4, r5, pc}
    3282:	bf00      	nop
    3284:	20005640 	.word	0x20005640
    3288:	f3af 8000 	nop.w
    328c:	f3af 8000 	nop.w
    3290:	f3af 8000 	nop.w
    3294:	f3af 8000 	nop.w
    3298:	f3af 8000 	nop.w
    329c:	f3af 8000 	nop.w

000032a0 <wavefolderParam3>:
void __ATTR_ITCMRAM  wavefolderParam3(float value, int v, int string)
{
	//value = (value * 0.99f) + 0.00f; //avoid zero
	invCurFB[v][string] = (1.0f / (1.0f + value));
    32a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    32a4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    32a8:	4b07      	ldr	r3, [pc, #28]	; (32c8 <wavefolderParam3+0x28>)
	param3[v][string] = value;
    32aa:	4a08      	ldr	r2, [pc, #32]	; (32cc <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
    32ac:	ee70 6a27 	vadd.f32	s13, s0, s15
    32b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    32b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    32b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    32bc:	ed82 0a00 	vstr	s0, [r2]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    32c0:	ed83 7a00 	vstr	s14, [r3]
}
    32c4:	4770      	bx	lr
    32c6:	bf00      	nop
    32c8:	20005260 	.word	0x20005260
    32cc:	20005680 	.word	0x20005680
    32d0:	f3af 8000 	nop.w
    32d4:	f3af 8000 	nop.w
    32d8:	f3af 8000 	nop.w
    32dc:	f3af 8000 	nop.w

000032e0 <tiltParam1>:

void __ATTR_ITCMRAM  tiltParam1(float value, int v, int string)
{
    32e0:	b510      	push	{r4, lr}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    32e2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    32e6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    32ea:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    32ee:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
    32f2:	0084      	lsls	r4, r0, #2
{
    32f4:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    32f8:	eee0 7a68 	vfms.f32	s15, s0, s17
    32fc:	eeb0 0a67 	vmov.f32	s0, s15
    3300:	f006 ffb2 	bl	a268 <__fasterdbtoa_veneer>
    3304:	4808      	ldr	r0, [pc, #32]	; (3328 <tiltParam1+0x48>)
    3306:	4420      	add	r0, r4
    3308:	f006 ffbe 	bl	a288 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    330c:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    3310:	eea8 0a28 	vfma.f32	s0, s16, s17
    3314:	f006 ffa8 	bl	a268 <__fasterdbtoa_veneer>
    3318:	4804      	ldr	r0, [pc, #16]	; (332c <tiltParam1+0x4c>)
}
    331a:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    331e:	4420      	add	r0, r4
}
    3320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
    3324:	f006 bfb0 	b.w	a288 <__tVZFilter_setGain_veneer>
    3328:	20005c08 	.word	0x20005c08
    332c:	20005c28 	.word	0x20005c28
    3330:	f3af 8000 	nop.w
    3334:	f3af 8000 	nop.w
    3338:	f3af 8000 	nop.w
    333c:	f3af 8000 	nop.w

00003340 <tiltParam2>:

void __ATTR_ITCMRAM  tiltParam2(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3340:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    3344:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 3378 <tiltParam2+0x38>
    3348:	eddf 7a0c 	vldr	s15, [pc, #48]	; 337c <tiltParam2+0x3c>
    334c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 3380 <tiltParam2+0x40>
    3350:	eee0 0a07 	vfma.f32	s1, s0, s14
    3354:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 3384 <tiltParam2+0x44>
{
    3358:	b538      	push	{r3, r4, r5, lr}
    335a:	4605      	mov	r5, r0
    335c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    335e:	ee60 0aa7 	vmul.f32	s1, s1, s15
    3362:	f005 fc3d 	bl	8be0 <LEAF_clip>
	tVZFilter_setFreqFast(&bell1[v][string], value);
    3366:	4b08      	ldr	r3, [pc, #32]	; (3388 <tiltParam2+0x48>)
    3368:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    336c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    3370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&bell1[v][string], value);
    3374:	f007 b894 	b.w	a4a0 <__tVZFilter_setFreqFast_veneer>
    3378:	429a0000 	.word	0x429a0000
    337c:	420fb824 	.word	0x420fb824
    3380:	457ff000 	.word	0x457ff000
    3384:	00000000 	.word	0x00000000
    3388:	20000aac 	.word	0x20000aac
    338c:	f3af 8000 	nop.w
    3390:	f3af 8000 	nop.w
    3394:	f3af 8000 	nop.w
    3398:	f3af 8000 	nop.w
    339c:	f3af 8000 	nop.w

000033a0 <tiltParam3>:
void __ATTR_ITCMRAM  tiltParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    33a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    33a4:	4b06      	ldr	r3, [pc, #24]	; (33c0 <tiltParam3+0x20>)
    33a6:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    33aa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    33ae:	ee30 0a07 	vadd.f32	s0, s0, s14
    33b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    33b6:	ee20 0a27 	vmul.f32	s0, s0, s15
    33ba:	f006 bfbd 	b.w	a338 <__tVZFilter_setResonance_veneer>
    33be:	bf00      	nop
    33c0:	20000aac 	.word	0x20000aac
    33c4:	f3af 8000 	nop.w
    33c8:	f3af 8000 	nop.w
    33cc:	f3af 8000 	nop.w
    33d0:	f3af 8000 	nop.w
    33d4:	f3af 8000 	nop.w
    33d8:	f3af 8000 	nop.w
    33dc:	f3af 8000 	nop.w

000033e0 <tiltParam4>:
}
void __ATTR_ITCMRAM  tiltParam4(float value, int v, int string)
{
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    33e0:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    33e4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 340c <tiltParam4+0x2c>
{
    33e8:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    33ea:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    33ee:	4605      	mov	r5, r0
    33f0:	460c      	mov	r4, r1
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    33f2:	eeb0 0a67 	vmov.f32	s0, s15
    33f6:	f007 f833 	bl	a460 <__fastdbtoa_veneer>
    33fa:	4b05      	ldr	r3, [pc, #20]	; (3410 <tiltParam4+0x30>)
    33fc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    3400:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    3404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
    3408:	f006 bf3e 	b.w	a288 <__tVZFilter_setGain_veneer>
    340c:	42080000 	.word	0x42080000
    3410:	20000aac 	.word	0x20000aac
    3414:	f3af 8000 	nop.w
    3418:	f3af 8000 	nop.w
    341c:	f3af 8000 	nop.w

00003420 <compressorParam1>:

void __ATTR_ITCMRAM  compressorParam1(float value, int v, int string)
{
	comp[v][string]->T = value*-24.0f;
    3420:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    3424:	4b04      	ldr	r3, [pc, #16]	; (3438 <compressorParam1+0x18>)
    3426:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    342a:	ee20 0a27 	vmul.f32	s0, s0, s15
    342e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    3432:	ed83 0a03 	vstr	s0, [r3, #12]
}
    3436:	4770      	bx	lr
    3438:	20000acc 	.word	0x20000acc
    343c:	f3af 8000 	nop.w

00003440 <compressorParam2>:
void __ATTR_ITCMRAM  compressorParam2(float value, int v, int string)
{
	comp[v][string]->R = ((value*10.0f)+1.0f);
    3440:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    3444:	4b0a      	ldr	r3, [pc, #40]	; (3470 <compressorParam2+0x30>)
    3446:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    344a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    344e:	eeb0 7a67 	vmov.f32	s14, s15
    3452:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    3456:	eea0 7a26 	vfma.f32	s14, s0, s13
    345a:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    345e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    3462:	edd3 6a04 	vldr	s13, [r3, #16]
    3466:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    346a:	ed83 7a07 	vstr	s14, [r3, #28]
}
    346e:	4770      	bx	lr
    3470:	20000acc 	.word	0x20000acc
    3474:	f3af 8000 	nop.w
    3478:	f3af 8000 	nop.w
    347c:	f3af 8000 	nop.w

00003480 <compressorParam3>:

void __ATTR_ITCMRAM  compressorParam3(float value, int v, int string)
{
	comp[v][string]->M = value * 18.0f;
    3480:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    3484:	4b04      	ldr	r3, [pc, #16]	; (3498 <compressorParam3+0x18>)
    3486:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    348a:	ee20 0a27 	vmul.f32	s0, s0, s15
    348e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    3492:	ed83 0a06 	vstr	s0, [r3, #24]
}
    3496:	4770      	bx	lr
    3498:	20000acc 	.word	0x20000acc
    349c:	f3af 8000 	nop.w

000034a0 <compressorParam4>:

void __ATTR_ITCMRAM  compressorParam4(float value, int v, int string)
{
	value = (value +  0.001f);
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    34a0:	4b0b      	ldr	r3, [pc, #44]	; (34d0 <compressorParam4+0x30>)
    34a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
    34a6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 34d4 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    34aa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    34ae:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    34b0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    34b4:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    34b8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    34bc:	ee20 0a07 	vmul.f32	s0, s0, s14
    34c0:	ee87 0a80 	vdiv.f32	s0, s15, s0
    34c4:	f006 feb0 	bl	a228 <__fasterexpf_veneer>
    34c8:	ed84 0a01 	vstr	s0, [r4, #4]
}
    34cc:	bd10      	pop	{r4, pc}
    34ce:	bf00      	nop
    34d0:	20000acc 	.word	0x20000acc
    34d4:	3a83126f 	.word	0x3a83126f
    34d8:	f3af 8000 	nop.w
    34dc:	f3af 8000 	nop.w

000034e0 <compressorParam5>:

void __ATTR_ITCMRAM  compressorParam5(float value, int v, int string)
{
	value = (value + 0.001f);
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    34e0:	4b0b      	ldr	r3, [pc, #44]	; (3510 <compressorParam5+0x30>)
    34e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
    34e6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 3514 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    34ea:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    34ee:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    34f0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    34f4:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    34f8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    34fc:	ee20 0a07 	vmul.f32	s0, s0, s14
    3500:	ee87 0a80 	vdiv.f32	s0, s15, s0
    3504:	f006 fe90 	bl	a228 <__fasterexpf_veneer>
    3508:	ed84 0a02 	vstr	s0, [r4, #8]
}
    350c:	bd10      	pop	{r4, pc}
    350e:	bf00      	nop
    3510:	20000acc 	.word	0x20000acc
    3514:	3a83126f 	.word	0x3a83126f
    3518:	f3af 8000 	nop.w
    351c:	f3af 8000 	nop.w

00003520 <offsetParam2>:

void __ATTR_ITCMRAM  offsetParam2(float value, int v, int string)
{
	param2[v][string] = (value * 2.0f) - 1.0f;
    3520:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    3524:	4b05      	ldr	r3, [pc, #20]	; (353c <offsetParam2+0x1c>)
    3526:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    352a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    352e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3532:	eee0 7a07 	vfma.f32	s15, s0, s14
    3536:	edc3 7a00 	vstr	s15, [r3]
}
    353a:	4770      	bx	lr
    353c:	20005660 	.word	0x20005660

00003540 <param2Linear>:
void __ATTR_ITCMRAM param2Linear(float value, int v, int string)
{
	param2[v][string] = value;
    3540:	4b03      	ldr	r3, [pc, #12]	; (3550 <param2Linear+0x10>)
    3542:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3546:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    354a:	ed83 0a00 	vstr	s0, [r3]
}
    354e:	4770      	bx	lr
    3550:	20005660 	.word	0x20005660
    3554:	f3af 8000 	nop.w
    3558:	f3af 8000 	nop.w
    355c:	f3af 8000 	nop.w

00003560 <param3Linear>:
void __ATTR_ITCMRAM param3Linear(float value, int v, int string)
{
	param3[v][string] = value;
    3560:	4b03      	ldr	r3, [pc, #12]	; (3570 <param3Linear+0x10>)
    3562:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3566:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    356a:	ed83 0a00 	vstr	s0, [r3]
}
    356e:	4770      	bx	lr
    3570:	20005680 	.word	0x20005680
    3574:	f3af 8000 	nop.w
    3578:	f3af 8000 	nop.w
    357c:	f3af 8000 	nop.w

00003580 <param3Soft>:
void __ATTR_ITCMRAM param3Soft(float value, int v, int string)
{
	param3[v][string] = (value * .99f) + 0.01f;
    3580:	eddf 6a10 	vldr	s13, [pc, #64]	; 35c4 <param3Soft+0x44>
    3584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3588:	eddf 7a0f 	vldr	s15, [pc, #60]	; 35c8 <param3Soft+0x48>
    358c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3590:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 35cc <param3Soft+0x4c>
    3594:	eee0 7a26 	vfma.f32	s15, s0, s13
    3598:	4a0d      	ldr	r2, [pc, #52]	; (35d0 <param3Soft+0x50>)
    359a:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    359e:	4b0d      	ldr	r3, [pc, #52]	; (35d4 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
    35a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    35a4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    35a8:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    35ac:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    35b0:	eee5 6a86 	vfma.f32	s13, s11, s12
    35b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    35b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
    35bc:	edc3 6a00 	vstr	s13, [r3]
}
    35c0:	4770      	bx	lr
    35c2:	bf00      	nop
    35c4:	3f7d70a4 	.word	0x3f7d70a4
    35c8:	3c23d70a 	.word	0x3c23d70a
    35cc:	3eaaaaaa 	.word	0x3eaaaaaa
    35d0:	20005680 	.word	0x20005680
    35d4:	20005bdc 	.word	0x20005bdc
    35d8:	f3af 8000 	nop.w
    35dc:	f3af 8000 	nop.w

000035e0 <param3Hard>:

void __ATTR_ITCMRAM param3Hard(float value, int v, int string)
{
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    35e0:	eddf 6a17 	vldr	s13, [pc, #92]	; 3640 <param3Hard+0x60>
    35e4:	eddf 7a17 	vldr	s15, [pc, #92]	; 3644 <param3Hard+0x64>
    35e8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 3648 <param3Hard+0x68>
    35ec:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    35f0:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    35f2:	4b16      	ldr	r3, [pc, #88]	; (364c <param3Hard+0x6c>)
    35f4:	0045      	lsls	r5, r0, #1
    35f6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    35fa:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    35fc:	ee27 0a87 	vmul.f32	s0, s15, s14
    3600:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3604:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
    3608:	f006 fef6 	bl	a3f8 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    360c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    3610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3614:	d00a      	beq.n	362c <param3Hard+0x4c>
	{
		tempDiv = 0.001f;
	}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    3616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    361a:	4b0d      	ldr	r3, [pc, #52]	; (3650 <param3Hard+0x70>)
    361c:	4425      	add	r5, r4
    361e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    3622:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3626:	edc3 7a00 	vstr	s15, [r3]
}
    362a:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    362c:	4b08      	ldr	r3, [pc, #32]	; (3650 <param3Hard+0x70>)
    362e:	4425      	add	r5, r4
    3630:	eddf 7a08 	vldr	s15, [pc, #32]	; 3654 <param3Hard+0x74>
    3634:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3638:	edc3 7a00 	vstr	s15, [r3]
}
    363c:	bd38      	pop	{r3, r4, r5, pc}
    363e:	bf00      	nop
    3640:	3f7d70a4 	.word	0x3f7d70a4
    3644:	3c23d70a 	.word	0x3c23d70a
    3648:	3fc90fdb 	.word	0x3fc90fdb
    364c:	20005680 	.word	0x20005680
    3650:	20005bbc 	.word	0x20005bbc
    3654:	4479ffff 	.word	0x4479ffff
    3658:	f3af 8000 	nop.w
    365c:	f3af 8000 	nop.w

00003660 <param4Linear>:
void __ATTR_ITCMRAM param4Linear(float value, int v, int string)
{
	param4[v][string] = value;
    3660:	4b03      	ldr	r3, [pc, #12]	; (3670 <param4Linear+0x10>)
    3662:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3666:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    366a:	ed83 0a00 	vstr	s0, [r3]
}
    366e:	4770      	bx	lr
    3670:	200056a0 	.word	0x200056a0
    3674:	f3af 8000 	nop.w
    3678:	f3af 8000 	nop.w
    367c:	f3af 8000 	nop.w

00003680 <param5Linear>:

void __ATTR_ITCMRAM param5Linear(float value, int v, int string)
{
	param5[v][string] = value;
    3680:	4b03      	ldr	r3, [pc, #12]	; (3690 <param5Linear+0x10>)
    3682:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3686:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    368a:	ed83 0a00 	vstr	s0, [r3]
}
    368e:	4770      	bx	lr
    3690:	200056c0 	.word	0x200056c0
    3694:	f3af 8000 	nop.w
    3698:	f3af 8000 	nop.w
    369c:	f3af 8000 	nop.w

000036a0 <param2BC>:
void __ATTR_ITCMRAM param2BC(float value, int v, int string)
{
	tCrusher_setQuality (&bc[v][string],value);
    36a0:	4b03      	ldr	r3, [pc, #12]	; (36b0 <param2BC+0x10>)
    36a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    36a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    36aa:	f006 be51 	b.w	a350 <__tCrusher_setQuality_veneer>
    36ae:	bf00      	nop
    36b0:	20000a8c 	.word	0x20000a8c
    36b4:	f3af 8000 	nop.w
    36b8:	f3af 8000 	nop.w
    36bc:	f3af 8000 	nop.w

000036c0 <param3BC>:
}
void __ATTR_ITCMRAM param3BC(float value, int v, int string)
{
	value = (value * inv_oversample) + 0.01f;
    36c0:	4a07      	ldr	r2, [pc, #28]	; (36e0 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
    36c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
    36c6:	eddf 7a07 	vldr	s15, [pc, #28]	; 36e4 <param3BC+0x24>
    36ca:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
    36ce:	4b06      	ldr	r3, [pc, #24]	; (36e8 <param3BC+0x28>)
    36d0:	eee7 7a00 	vfma.f32	s15, s14, s0
    36d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    36d8:	eeb0 0a67 	vmov.f32	s0, s15
    36dc:	f006 bde8 	b.w	a2b0 <__tCrusher_setSamplingRatio_veneer>
    36e0:	20000008 	.word	0x20000008
    36e4:	3c23d70a 	.word	0x3c23d70a
    36e8:	20000a8c 	.word	0x20000a8c
    36ec:	f3af 8000 	nop.w
    36f0:	f3af 8000 	nop.w
    36f4:	f3af 8000 	nop.w
    36f8:	f3af 8000 	nop.w
    36fc:	f3af 8000 	nop.w

00003700 <param4BC>:
}
void __ATTR_ITCMRAM param4BC(float value, int v, int string)
{
	tCrusher_setRound(&bc[v][string], value);
    3700:	4b03      	ldr	r3, [pc, #12]	; (3710 <param4BC+0x10>)
    3702:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3706:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    370a:	f006 bea5 	b.w	a458 <__tCrusher_setRound_veneer>
    370e:	bf00      	nop
    3710:	20000a8c 	.word	0x20000a8c
    3714:	f3af 8000 	nop.w
    3718:	f3af 8000 	nop.w
    371c:	f3af 8000 	nop.w

00003720 <param5BC>:
}
void __ATTR_ITCMRAM param5BC(float value, int v, int string)
{
	tCrusher_setOperation(&bc[v][string], value);
    3720:	4b03      	ldr	r3, [pc, #12]	; (3730 <param5BC+0x10>)
    3722:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3726:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    372a:	f006 be7d 	b.w	a428 <__tCrusher_setOperation_veneer>
    372e:	bf00      	nop
    3730:	20000a8c 	.word	0x20000a8c
    3734:	f3af 8000 	nop.w
    3738:	f3af 8000 	nop.w
    373c:	f3af 8000 	nop.w

00003740 <fxMixSet>:



void __ATTR_ITCMRAM fxMixSet(float value, int v, int string)
{
	fxMix[v][string] = value;
    3740:	4b03      	ldr	r3, [pc, #12]	; (3750 <fxMixSet+0x10>)
    3742:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3746:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    374a:	ed83 0a00 	vstr	s0, [r3]
}
    374e:	4770      	bx	lr
    3750:	20005160 	.word	0x20005160
    3754:	f3af 8000 	nop.w
    3758:	f3af 8000 	nop.w
    375c:	f3af 8000 	nop.w

00003760 <fxPostGainSet>:

void __ATTR_ITCMRAM fxPostGainSet(float value, int v, int string)
{
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    3760:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    3764:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    3768:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    376a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    376e:	4605      	mov	r5, r0
    3770:	460c      	mov	r4, r1
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
    3772:	eeb0 0a67 	vmov.f32	s0, s15
    3776:	f006 fd77 	bl	a268 <__fasterdbtoa_veneer>
    377a:	4b04      	ldr	r3, [pc, #16]	; (378c <fxPostGainSet+0x2c>)
    377c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    3780:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3784:	ed83 0a00 	vstr	s0, [r3]
}
    3788:	bd38      	pop	{r3, r4, r5, pc}
    378a:	bf00      	nop
    378c:	20005180 	.word	0x20005180
    3790:	f3af 8000 	nop.w
    3794:	f3af 8000 	nop.w
    3798:	f3af 8000 	nop.w
    379c:	f3af 8000 	nop.w

000037a0 <wavefolderTick>:


//got the idea from https://ccrma.stanford.edu/~jatin/ComplexNonlinearities/Wavefolder.html  -JS
//much more efficient than the lockhart, and can be further optimized with lookups
float __ATTR_ITCMRAM wavefolderTick(float sample, int v, int string)
{
    37a0:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    37a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    ffSample *= 1.499999f;
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);

    //softclip approx for tanh saturation in original code
    float fbSample = wfState[v][string];
    37a6:	4d36      	ldr	r5, [pc, #216]	; (3880 <wavefolderTick+0xe0>)
    37a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    37ac:	4b35      	ldr	r3, [pc, #212]	; (3884 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
    37ae:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    37b2:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    37b6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    37ba:	4a33      	ldr	r2, [pc, #204]	; (3888 <wavefolderTick+0xe8>)
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    37bc:	eddf 3a33 	vldr	s7, [pc, #204]	; 388c <wavefolderTick+0xec>
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    37c0:	0084      	lsls	r4, r0, #2
    37c2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    {
    	fbSample = 1.0f;
    }
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    fbSample *= 1.499999f;
    float fb = curFB * fbSample;
    37c6:	ed9f 3a32 	vldr	s6, [pc, #200]	; 3890 <wavefolderTick+0xf0>
{
    37ca:	ed2d 8b02 	vpush	{d8}
    37ce:	ed95 6a00 	vldr	s12, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    37d2:	edd3 7a00 	vldr	s15, [r3]
    37d6:	fe86 6a66 	vminnm.f32	s12, s12, s13
    37da:	fe86 6a24 	vmaxnm.f32	s12, s12, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    37de:	ee26 7a06 	vmul.f32	s14, s12, s12
    float curFB = param3[v][string];
    37e2:	4b2c      	ldr	r3, [pc, #176]	; (3894 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    37e4:	ee30 0a27 	vadd.f32	s0, s0, s15
    37e8:	edd2 5a00 	vldr	s11, [r2]
    float curFB = param3[v][string];
    37ec:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
    37f0:	4a29      	ldr	r2, [pc, #164]	; (3898 <wavefolderTick+0xf8>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    37f2:	ee67 7a23 	vmul.f32	s15, s14, s7
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    37f6:	ee20 7a25 	vmul.f32	s14, s0, s11
    float fb = curFB * fbSample;
    37fa:	ed93 4a00 	vldr	s8, [r3]
    float curFF = param4[v][string];
    37fe:	eb02 0280 	add.w	r2, r2, r0, lsl #2

    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    3802:	4b26      	ldr	r3, [pc, #152]	; (389c <wavefolderTick+0xfc>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    3804:	ee76 7ae7 	vsub.f32	s15, s13, s15
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    3808:	ed9f 0a25 	vldr	s0, [pc, #148]	; 38a0 <wavefolderTick+0x100>
    380c:	fec7 5a66 	vminnm.f32	s11, s14, s13
    float fb = curFB * fbSample;
    3810:	ee24 4a03 	vmul.f32	s8, s8, s6
    3814:	fec5 5aa4 	vmaxnm.f32	s11, s11, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    3818:	ee65 4aa5 	vmul.f32	s9, s11, s11
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    381c:	ee67 7a86 	vmul.f32	s15, s15, s12
    float curFF = param4[v][string];
    3820:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    3824:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3828:	ee27 0a00 	vmul.f32	s0, s14, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    382c:	ee76 2ac5 	vsub.f32	s5, s13, s10
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    3830:	ee24 6aa3 	vmul.f32	s12, s9, s7
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    3834:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
    3838:	ee67 7a84 	vmul.f32	s15, s15, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    383c:	ee25 5a03 	vmul.f32	s10, s10, s6
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    3840:	ee76 6ac6 	vsub.f32	s13, s13, s12
    3844:	eee2 7a87 	vfma.f32	s15, s5, s14
    3848:	ee66 6aa5 	vmul.f32	s13, s13, s11
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    384c:	eee6 7a85 	vfma.f32	s15, s13, s10
    3850:	eeb0 8a67 	vmov.f32	s16, s15
    3854:	f006 fdd0 	bl	a3f8 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    3858:	4b12      	ldr	r3, [pc, #72]	; (38a4 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    385a:	4813      	ldr	r0, [pc, #76]	; (38a8 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    385c:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    3860:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    3862:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
    3864:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    3868:	eee8 7ac0 	vfms.f32	s15, s17, s0
    386c:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    3870:	ee27 0a87 	vmul.f32	s0, s15, s14
    return sample;
}
    3874:	ecbd 8b02 	vpop	{d8}
    3878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    387c:	f006 bdfc 	b.w	a478 <__tHighpass_tick_veneer>
    3880:	20014910 	.word	0x20014910
    3884:	20005660 	.word	0x20005660
    3888:	20005640 	.word	0x20005640
    388c:	3eaaaaaa 	.word	0x3eaaaaaa
    3890:	3fbffff8 	.word	0x3fbffff8
    3894:	20005680 	.word	0x20005680
    3898:	200056a0 	.word	0x200056a0
    389c:	200056c0 	.word	0x200056c0
    38a0:	40c90fdb 	.word	0x40c90fdb
    38a4:	20005260 	.word	0x20005260
    38a8:	20000e4c 	.word	0x20000e4c
    38ac:	f3af 8000 	nop.w
    38b0:	f3af 8000 	nop.w
    38b4:	f3af 8000 	nop.w
    38b8:	f3af 8000 	nop.w
    38bc:	f3af 8000 	nop.w

000038c0 <chorusParam1>:

void __ATTR_ITCMRAM chorusParam1(float value, int v, int string)
{
	param1[v][string] = value * 5780.0f + 10.0f;
    38c0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    38c4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 38dc <chorusParam1+0x1c>
    38c8:	4b05      	ldr	r3, [pc, #20]	; (38e0 <chorusParam1+0x20>)
    38ca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    38ce:	eee0 7a07 	vfma.f32	s15, s0, s14
    38d2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    38d6:	edc3 7a00 	vstr	s15, [r3]
}
    38da:	4770      	bx	lr
    38dc:	45b4a000 	.word	0x45b4a000
    38e0:	20005640 	.word	0x20005640
    38e4:	f3af 8000 	nop.w
    38e8:	f3af 8000 	nop.w
    38ec:	f3af 8000 	nop.w
    38f0:	f3af 8000 	nop.w
    38f4:	f3af 8000 	nop.w
    38f8:	f3af 8000 	nop.w
    38fc:	f3af 8000 	nop.w

00003900 <chorusParam2>:
void __ATTR_ITCMRAM chorusParam2(float value, int v, int string)
{
	param2[v][string] = value * 0.1f;
    3900:	eddf 7a05 	vldr	s15, [pc, #20]	; 3918 <chorusParam2+0x18>
    3904:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3908:	4b04      	ldr	r3, [pc, #16]	; (391c <chorusParam2+0x1c>)
    390a:	ee20 0a27 	vmul.f32	s0, s0, s15
    390e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3912:	ed83 0a00 	vstr	s0, [r3]
}
    3916:	4770      	bx	lr
    3918:	3dcccccd 	.word	0x3dcccccd
    391c:	20005660 	.word	0x20005660

00003920 <chorusParam3>:

void __ATTR_ITCMRAM chorusParam3(float value, int v, int string)
{
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    3920:	ed9f 7a07 	vldr	s14, [pc, #28]	; 3940 <chorusParam3+0x20>
    3924:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3928:	eddf 7a06 	vldr	s15, [pc, #24]	; 3944 <chorusParam3+0x24>
    392c:	4b06      	ldr	r3, [pc, #24]	; (3948 <chorusParam3+0x28>)
    392e:	eee0 7a07 	vfma.f32	s15, s0, s14
    3932:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3936:	eeb0 0a67 	vmov.f32	s0, s15
    393a:	f006 bd29 	b.w	a390 <__tCycle_setFreq_veneer>
    393e:	bf00      	nop
    3940:	3ecccccd 	.word	0x3ecccccd
    3944:	3c23d70a 	.word	0x3c23d70a
    3948:	20005550 	.word	0x20005550
    394c:	f3af 8000 	nop.w
    3950:	f3af 8000 	nop.w
    3954:	f3af 8000 	nop.w
    3958:	f3af 8000 	nop.w
    395c:	f3af 8000 	nop.w

00003960 <chorusParam4>:
}

void __ATTR_ITCMRAM chorusParam4(float value, int v, int string)
{
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    3960:	ed9f 7a07 	vldr	s14, [pc, #28]	; 3980 <chorusParam4+0x20>
    3964:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3968:	eddf 7a06 	vldr	s15, [pc, #24]	; 3984 <chorusParam4+0x24>
    396c:	4b06      	ldr	r3, [pc, #24]	; (3988 <chorusParam4+0x28>)
    396e:	eee0 7a07 	vfma.f32	s15, s0, s14
    3972:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3976:	eeb0 0a67 	vmov.f32	s0, s15
    397a:	f006 bd09 	b.w	a390 <__tCycle_setFreq_veneer>
    397e:	bf00      	nop
    3980:	3ee38e37 	.word	0x3ee38e37
    3984:	3c343958 	.word	0x3c343958
    3988:	20005570 	.word	0x20005570
    398c:	f3af 8000 	nop.w
    3990:	f3af 8000 	nop.w
    3994:	f3af 8000 	nop.w
    3998:	f3af 8000 	nop.w
    399c:	f3af 8000 	nop.w

000039a0 <chorusTick>:
}


float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    39a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    39a6:	4f2b      	ldr	r7, [pc, #172]	; (3a54 <chorusTick+0xb4>)
    39a8:	4d2b      	ldr	r5, [pc, #172]	; (3a58 <chorusTick+0xb8>)
    39aa:	482c      	ldr	r0, [pc, #176]	; (3a5c <chorusTick+0xbc>)
    39ac:	eb07 0781 	add.w	r7, r7, r1, lsl #2
    39b0:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    39b4:	4e2a      	ldr	r6, [pc, #168]	; (3a60 <chorusTick+0xc0>)
    39b6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    39ba:	008c      	lsls	r4, r1, #2
    39bc:	eb06 0681 	add.w	r6, r6, r1, lsl #2
{
    39c0:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    39c4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    39c8:	edd5 9a00 	vldr	s19, [r5]
{
    39cc:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    39d0:	ed97 9a00 	vldr	s18, [r7]
    39d4:	f006 fccc 	bl	a370 <__tCycle_tick_veneer>
    39d8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 3a64 <chorusTick+0xc4>
    39dc:	eef0 7a48 	vmov.f32	s15, s16
    39e0:	4630      	mov	r0, r6
    39e2:	ee29 9a07 	vmul.f32	s18, s18, s14
    39e6:	eee9 7a80 	vfma.f32	s15, s19, s0
    39ea:	ee29 0a27 	vmul.f32	s0, s18, s15
    39ee:	f006 fcb7 	bl	a360 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    39f2:	481d      	ldr	r0, [pc, #116]	; (3a68 <chorusTick+0xc8>)
    39f4:	edd5 9a00 	vldr	s19, [r5]
    39f8:	4420      	add	r0, r4
    39fa:	ed97 9a00 	vldr	s18, [r7]
    39fe:	f006 fcb7 	bl	a370 <__tCycle_tick_veneer>
    3a02:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3a06:	eea9 8ac0 	vfms.f32	s16, s19, s0
    3a0a:	4d18      	ldr	r5, [pc, #96]	; (3a6c <chorusTick+0xcc>)
    3a0c:	ee29 0a27 	vmul.f32	s0, s18, s15
    3a10:	4425      	add	r5, r4
    3a12:	4628      	mov	r0, r5
    3a14:	ee20 0a08 	vmul.f32	s0, s0, s16
    3a18:	f006 fca2 	bl	a360 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    3a1c:	eeb0 0a68 	vmov.f32	s0, s17
    3a20:	4630      	mov	r0, r6
    3a22:	f006 fd45 	bl	a4b0 <__tLinearDelay_tick_veneer>
    3a26:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    3a2a:	4628      	mov	r0, r5
    3a2c:	eeb0 0a68 	vmov.f32	s0, s17
    3a30:	f006 fd3e 	bl	a4b0 <__tLinearDelay_tick_veneer>
    3a34:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    3a38:	ee38 0a00 	vadd.f32	s0, s16, s0
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    3a3c:	480c      	ldr	r0, [pc, #48]	; (3a70 <chorusTick+0xd0>)
    3a3e:	4420      	add	r0, r4
    3a40:	eea8 0ae7 	vfms.f32	s0, s17, s15
    3a44:	f006 fd18 	bl	a478 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    3a48:	eeb1 0a40 	vneg.f32	s0, s0
    3a4c:	ecbd 8b04 	vpop	{d8-d9}
    3a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a52:	bf00      	nop
    3a54:	20005640 	.word	0x20005640
    3a58:	20005660 	.word	0x20005660
    3a5c:	20005550 	.word	0x20005550
    3a60:	20005070 	.word	0x20005070
    3a64:	3f34fdf4 	.word	0x3f34fdf4
    3a68:	20005570 	.word	0x20005570
    3a6c:	20005090 	.word	0x20005090
    3a70:	20000e4c 	.word	0x20000e4c
    3a74:	f3af 8000 	nop.w
    3a78:	f3af 8000 	nop.w
    3a7c:	f3af 8000 	nop.w

00003a80 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    3a80:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3a84:	4a0e      	ldr	r2, [pc, #56]	; (3ac0 <shaperTick+0x40>)
    sample = sample * param1[v][string];
    3a86:	4b0f      	ldr	r3, [pc, #60]	; (3ac4 <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    3a88:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
    3a8c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    3a90:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    3a92:	edd2 7a00 	vldr	s15, [r2]
    3a96:	008c      	lsls	r4, r1, #2
    3a98:	ee30 0a27 	vadd.f32	s0, s0, s15
    3a9c:	edd3 7a00 	vldr	s15, [r3]
    3aa0:	4b09      	ldr	r3, [pc, #36]	; (3ac8 <shaperTick+0x48>)
    3aa2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3aa6:	ee20 0a27 	vmul.f32	s0, s0, s15
    3aaa:	edd3 0a00 	vldr	s1, [r3]
    3aae:	f006 fbab 	bl	a208 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    3ab2:	4806      	ldr	r0, [pc, #24]	; (3acc <shaperTick+0x4c>)
    3ab4:	4420      	add	r0, r4
    return temp;
}
    3ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    3aba:	f006 bcdd 	b.w	a478 <__tHighpass_tick_veneer>
    3abe:	bf00      	nop
    3ac0:	20005660 	.word	0x20005660
    3ac4:	20005640 	.word	0x20005640
    3ac8:	20005680 	.word	0x20005680
    3acc:	20000e4c 	.word	0x20000e4c
    3ad0:	f3af 8000 	nop.w
    3ad4:	f3af 8000 	nop.w
    3ad8:	f3af 8000 	nop.w
    3adc:	f3af 8000 	nop.w

00003ae0 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    3ae0:	4770      	bx	lr
    3ae2:	bf00      	nop
    3ae4:	f3af 8000 	nop.w
    3ae8:	f3af 8000 	nop.w
    3aec:	f3af 8000 	nop.w
    3af0:	f3af 8000 	nop.w
    3af4:	f3af 8000 	nop.w
    3af8:	f3af 8000 	nop.w
    3afc:	f3af 8000 	nop.w

00003b00 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
    3b00:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3b04:	4b08      	ldr	r3, [pc, #32]	; (3b28 <tiltFilterTick+0x28>)
{
    3b06:	b510      	push	{r4, lr}
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
    3b08:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    3b0c:	008c      	lsls	r4, r1, #2
    3b0e:	f006 fbff 	bl	a310 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&shelf2[v][string], sample);
    3b12:	4806      	ldr	r0, [pc, #24]	; (3b2c <tiltFilterTick+0x2c>)
    3b14:	4420      	add	r0, r4
    3b16:	f006 fbfb 	bl	a310 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
    3b1a:	4805      	ldr	r0, [pc, #20]	; (3b30 <tiltFilterTick+0x30>)
    3b1c:	4420      	add	r0, r4
    return sample;
}
    3b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
    3b22:	f006 bbf5 	b.w	a310 <__tVZFilter_tickEfficient_veneer>
    3b26:	bf00      	nop
    3b28:	20005c08 	.word	0x20005c08
    3b2c:	20005c28 	.word	0x20005c28
    3b30:	20000aac 	.word	0x20000aac
    3b34:	f3af 8000 	nop.w
    3b38:	f3af 8000 	nop.w
    3b3c:	f3af 8000 	nop.w

00003b40 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
    3b40:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
    3b44:	4a10      	ldr	r2, [pc, #64]	; (3b88 <tanhTick+0x48>)
    3b46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
    3b4a:	4b10      	ldr	r3, [pc, #64]	; (3b8c <tanhTick+0x4c>)
    float temp = tanhf(sample + (param2[v][string]*gain));
    3b4c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    float gain = param1[v][string];
    3b50:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    3b54:	b510      	push	{r4, lr}
    3b56:	edd2 6a00 	vldr	s13, [r2]
    float gain = param1[v][string];
    3b5a:	008c      	lsls	r4, r1, #2
    3b5c:	edd3 7a00 	vldr	s15, [r3]
    float temp = tanhf(sample + (param2[v][string]*gain));
    3b60:	eea6 0a87 	vfma.f32	s0, s13, s14
    3b64:	ee27 0a80 	vmul.f32	s0, s15, s0
    3b68:	f006 fcce 	bl	a508 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    3b6c:	4808      	ldr	r0, [pc, #32]	; (3b90 <tanhTick+0x50>)
    3b6e:	4420      	add	r0, r4
    3b70:	f006 fc82 	bl	a478 <__tHighpass_tick_veneer>
    temp *= param4[v][string];
    3b74:	4b07      	ldr	r3, [pc, #28]	; (3b94 <tanhTick+0x54>)
    3b76:	4423      	add	r3, r4
    3b78:	edd3 7a00 	vldr	s15, [r3]
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    3b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    3b80:	ee20 0a27 	vmul.f32	s0, s0, s15
    3b84:	f006 bcc0 	b.w	a508 <__tanhf_veneer>
    3b88:	20005660 	.word	0x20005660
    3b8c:	20005640 	.word	0x20005640
    3b90:	20000e4c 	.word	0x20000e4c
    3b94:	200056a0 	.word	0x200056a0
    3b98:	f3af 8000 	nop.w
    3b9c:	f3af 8000 	nop.w

00003ba0 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    3ba0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    sample = sample + param2[v][string];
    3ba4:	4a19      	ldr	r2, [pc, #100]	; (3c0c <softClipTick+0x6c>)
    float shape = param3[v][string];
    3ba6:	4b1a      	ldr	r3, [pc, #104]	; (3c10 <softClipTick+0x70>)
    sample = sample + param2[v][string];
    3ba8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    3bac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
    3bb0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 3c14 <softClipTick+0x74>
    float shape = param3[v][string];
    3bb4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3bb8:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
        sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    3bbc:	4816      	ldr	r0, [pc, #88]	; (3c18 <softClipTick+0x78>)
{
    3bbe:	b410      	push	{r4}
    sample = sample * param1[v][string];
    3bc0:	4c16      	ldr	r4, [pc, #88]	; (3c1c <softClipTick+0x7c>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    3bc2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample + param2[v][string];
    3bc6:	edd2 7a00 	vldr	s15, [r2]
    sample = sample * param1[v][string];
    3bca:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    float shape = param3[v][string];
    3bce:	edd3 6a00 	vldr	s13, [r3]
        sample = sample * shapeDividerS[v][string];
    3bd2:	4b13      	ldr	r3, [pc, #76]	; (3c20 <softClipTick+0x80>)
    sample = sample + param2[v][string];
    3bd4:	ed94 5a00 	vldr	s10, [r4]
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
    3bd8:	ee26 7a87 	vmul.f32	s14, s13, s14
        sample = sample * shapeDividerS[v][string];
    3bdc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return sample;
}
    3be0:	f85d 4b04 	ldr.w	r4, [sp], #4
    sample = sample + param2[v][string];
    3be4:	eee5 7a00 	vfma.f32	s15, s10, s0
        sample = sample * shapeDividerS[v][string];
    3be8:	ed93 0a00 	vldr	s0, [r3]
    3bec:	fec7 7ae5 	vminnm.f32	s15, s15, s11
    3bf0:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
    3bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
    3bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
    3bfc:	ee76 6ac7 	vsub.f32	s13, s13, s14
    3c00:	ee66 6aa7 	vmul.f32	s13, s13, s15
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    3c04:	ee26 0a80 	vmul.f32	s0, s13, s0
    3c08:	f006 bc36 	b.w	a478 <__tHighpass_tick_veneer>
    3c0c:	20005660 	.word	0x20005660
    3c10:	20005680 	.word	0x20005680
    3c14:	3eaaaaaa 	.word	0x3eaaaaaa
    3c18:	20000e4c 	.word	0x20000e4c
    3c1c:	20005640 	.word	0x20005640
    3c20:	20005bdc 	.word	0x20005bdc
    3c24:	f3af 8000 	nop.w
    3c28:	f3af 8000 	nop.w
    3c2c:	f3af 8000 	nop.w
    3c30:	f3af 8000 	nop.w
    3c34:	f3af 8000 	nop.w
    3c38:	f3af 8000 	nop.w
    3c3c:	f3af 8000 	nop.w

00003c40 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    3c40:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3c44:	4a1a      	ldr	r2, [pc, #104]	; (3cb0 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
    3c46:	4b1b      	ldr	r3, [pc, #108]	; (3cb4 <hardClipTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    3c48:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    3c4c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    3c50:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    3c54:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    3c58:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    3c5a:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    3c5e:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    3c60:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    3c64:	4e14      	ldr	r6, [pc, #80]	; (3cb8 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
    3c66:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    3c6a:	4d14      	ldr	r5, [pc, #80]	; (3cbc <hardClipTick+0x7c>)
    3c6c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    3c70:	4425      	add	r5, r4
    3c72:	ed96 7a00 	vldr	s14, [r6]
    3c76:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    3c7a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    3c7e:	ee27 0a87 	vmul.f32	s0, s15, s14
    3c82:	f006 fbb9 	bl	a3f8 <__arm_sin_f32_veneer>
    3c86:	ed96 7a00 	vldr	s14, [r6]
    3c8a:	edd5 7a00 	vldr	s15, [r5]
    3c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
    3c92:	ee27 0a80 	vmul.f32	s0, s15, s0
    3c96:	f006 fbaf 	bl	a3f8 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    3c9a:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    3c9e:	4808      	ldr	r0, [pc, #32]	; (3cc0 <hardClipTick+0x80>)
    3ca0:	ee20 0a27 	vmul.f32	s0, s0, s15
    3ca4:	4420      	add	r0, r4
    return sample;
}
    3ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    3caa:	f006 bbe5 	b.w	a478 <__tHighpass_tick_veneer>
    3cae:	bf00      	nop
    3cb0:	20005640 	.word	0x20005640
    3cb4:	20005660 	.word	0x20005660
    3cb8:	20005680 	.word	0x20005680
    3cbc:	20005bbc 	.word	0x20005bbc
    3cc0:	20000e4c 	.word	0x20000e4c
    3cc4:	f3af 8000 	nop.w
    3cc8:	f3af 8000 	nop.w
    3ccc:	f3af 8000 	nop.w
    3cd0:	f3af 8000 	nop.w
    3cd4:	f3af 8000 	nop.w
    3cd8:	f3af 8000 	nop.w
    3cdc:	f3af 8000 	nop.w

00003ce0 <satTick>:


float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
    3ce0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    3ce4:	4b17      	ldr	r3, [pc, #92]	; (3d44 <satTick+0x64>)
    sample = sample * param1[v][string];
    3ce6:	4a18      	ldr	r2, [pc, #96]	; (3d48 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    3ce8:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    3cec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    3cf0:	4816      	ldr	r0, [pc, #88]	; (3d4c <satTick+0x6c>)
    sample = sample * param1[v][string];
    3cf2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    3cf6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
    3cfa:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    3cfc:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
    3d00:	008c      	lsls	r4, r1, #2
    3d02:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    3d06:	eeb0 6a47 	vmov.f32	s12, s14
    3d0a:	ee27 7a87 	vmul.f32	s14, s15, s14
    3d0e:	eea7 6a80 	vfma.f32	s12, s15, s0
    3d12:	eea7 7a80 	vfma.f32	s14, s15, s0
    3d16:	eeb0 6ac6 	vabs.f32	s12, s12
    3d1a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    3d1e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    3d22:	ee36 6b05 	vadd.f64	d6, d6, d5
    3d26:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    3d2a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    3d2e:	f006 fba3 	bl	a478 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    3d32:	4807      	ldr	r0, [pc, #28]	; (3d50 <satTick+0x70>)
    3d34:	4420      	add	r0, r4
    3d36:	f006 fb9f 	bl	a478 <__tHighpass_tick_veneer>
    temp = LEAF_tanh(temp);
    return temp;
}
    3d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
    3d3e:	f006 ba9b 	b.w	a278 <__LEAF_tanh_veneer>
    3d42:	bf00      	nop
    3d44:	20005660 	.word	0x20005660
    3d48:	20005640 	.word	0x20005640
    3d4c:	20000e4c 	.word	0x20000e4c
    3d50:	20000e6c 	.word	0x20000e6c
    3d54:	f3af 8000 	nop.w
    3d58:	f3af 8000 	nop.w
    3d5c:	f3af 8000 	nop.w

00003d60 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    3d60:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3d64:	4b05      	ldr	r3, [pc, #20]	; (3d7c <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
    3d66:	4806      	ldr	r0, [pc, #24]	; (3d80 <bcTick+0x20>)
    sample = sample * param1[v][string];
    3d68:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    3d6c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    3d70:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    3d74:	ee20 0a27 	vmul.f32	s0, s0, s15
    3d78:	f006 bbc2 	b.w	a500 <__tCrusher_tick_veneer>
    3d7c:	20005640 	.word	0x20005640
    3d80:	20000a8c 	.word	0x20000a8c
    3d84:	f3af 8000 	nop.w
    3d88:	f3af 8000 	nop.w
    3d8c:	f3af 8000 	nop.w
    3d90:	f3af 8000 	nop.w
    3d94:	f3af 8000 	nop.w
    3d98:	f3af 8000 	nop.w
    3d9c:	f3af 8000 	nop.w

00003da0 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
    3da0:	4b03      	ldr	r3, [pc, #12]	; (3db0 <compressorTick+0x10>)
    3da2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3da6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3daa:	f006 ba7d 	b.w	a2a8 <__tCompressor_tick_veneer>
    3dae:	bf00      	nop
    3db0:	20000acc 	.word	0x20000acc
    3db4:	f3af 8000 	nop.w
    3db8:	f3af 8000 	nop.w
    3dbc:	f3af 8000 	nop.w

00003dc0 <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
    3dc0:	4b03      	ldr	r3, [pc, #12]	; (3dd0 <FXlowpassTick+0x10>)
    3dc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3dc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3dca:	f006 ba9d 	b.w	a308 <__tSVF_tick_veneer>
    3dce:	bf00      	nop
    3dd0:	200008d4 	.word	0x200008d4
    3dd4:	f3af 8000 	nop.w
    3dd8:	f3af 8000 	nop.w
    3ddc:	f3af 8000 	nop.w

00003de0 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
    3de0:	4b03      	ldr	r3, [pc, #12]	; (3df0 <FXhighpassTick+0x10>)
    3de2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3de6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3dea:	f006 ba8d 	b.w	a308 <__tSVF_tick_veneer>
    3dee:	bf00      	nop
    3df0:	200008b4 	.word	0x200008b4
    3df4:	f3af 8000 	nop.w
    3df8:	f3af 8000 	nop.w
    3dfc:	f3af 8000 	nop.w

00003e00 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
    3e00:	4b03      	ldr	r3, [pc, #12]	; (3e10 <FXbandpassTick+0x10>)
    3e02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3e06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3e0a:	f006 ba7d 	b.w	a308 <__tSVF_tick_veneer>
    3e0e:	bf00      	nop
    3e10:	20000874 	.word	0x20000874
    3e14:	f3af 8000 	nop.w
    3e18:	f3af 8000 	nop.w
    3e1c:	f3af 8000 	nop.w

00003e20 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    3e20:	4b03      	ldr	r3, [pc, #12]	; (3e30 <FXdiodeLowpassTick+0x10>)
    3e22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3e26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3e2a:	f006 ba4d 	b.w	a2c8 <__tDiodeFilter_tick_veneer>
    3e2e:	bf00      	nop
    3e30:	20000894 	.word	0x20000894
    3e34:	f3af 8000 	nop.w
    3e38:	f3af 8000 	nop.w
    3e3c:	f3af 8000 	nop.w

00003e40 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v][string], sample);
    3e40:	4b03      	ldr	r3, [pc, #12]	; (3e50 <FXVZpeakTick+0x10>)
    3e42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3e46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3e4a:	f006 ba61 	b.w	a310 <__tVZFilter_tickEfficient_veneer>
    3e4e:	bf00      	nop
    3e50:	20000854 	.word	0x20000854
    3e54:	f3af 8000 	nop.w
    3e58:	f3af 8000 	nop.w
    3e5c:	f3af 8000 	nop.w

00003e60 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterLS[v][string], sample);
    3e60:	4b03      	ldr	r3, [pc, #12]	; (3e70 <FXVZlowshelfTick+0x10>)
    3e62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3e66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3e6a:	f006 ba51 	b.w	a310 <__tVZFilter_tickEfficient_veneer>
    3e6e:	bf00      	nop
    3e70:	20000834 	.word	0x20000834
    3e74:	f3af 8000 	nop.w
    3e78:	f3af 8000 	nop.w
    3e7c:	f3af 8000 	nop.w

00003e80 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterHS[v][string], sample);
    3e80:	4b03      	ldr	r3, [pc, #12]	; (3e90 <FXVZhighshelfTick+0x10>)
    3e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3e8a:	f006 ba41 	b.w	a310 <__tVZFilter_tickEfficient_veneer>
    3e8e:	bf00      	nop
    3e90:	20000814 	.word	0x20000814
    3e94:	f3af 8000 	nop.w
    3e98:	f3af 8000 	nop.w
    3e9c:	f3af 8000 	nop.w

00003ea0 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    3ea0:	4b03      	ldr	r3, [pc, #12]	; (3eb0 <FXVZbandrejectTick+0x10>)
    3ea2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3ea6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3eaa:	f006 ba31 	b.w	a310 <__tVZFilter_tickEfficient_veneer>
    3eae:	bf00      	nop
    3eb0:	200007f4 	.word	0x200007f4
    3eb4:	f3af 8000 	nop.w
    3eb8:	f3af 8000 	nop.w
    3ebc:	f3af 8000 	nop.w

00003ec0 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    3ec0:	4b03      	ldr	r3, [pc, #12]	; (3ed0 <FXLadderLowpassTick+0x10>)
    3ec2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    3ec6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3eca:	f006 babd 	b.w	a448 <__tLadderFilter_tick_veneer>
    3ece:	bf00      	nop
    3ed0:	200007d4 	.word	0x200007d4
    3ed4:	f3af 8000 	nop.w
    3ed8:	f3af 8000 	nop.w
    3edc:	f3af 8000 	nop.w

00003ee0 <FXLowpassParam1>:
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3ee0:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    3ee4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 3f18 <FXLowpassParam1+0x38>
    3ee8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 3f1c <FXLowpassParam1+0x3c>
    3eec:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 3f20 <FXLowpassParam1+0x40>
    3ef0:	eee0 0a07 	vfma.f32	s1, s0, s14
    3ef4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 3f24 <FXLowpassParam1+0x44>
{
    3ef8:	b538      	push	{r3, r4, r5, lr}
    3efa:	4605      	mov	r5, r0
    3efc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3efe:	ee60 0aa7 	vmul.f32	s1, s1, s15
    3f02:	f004 fe6d 	bl	8be0 <LEAF_clip>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    3f06:	4b08      	ldr	r3, [pc, #32]	; (3f28 <FXLowpassParam1+0x48>)
    3f08:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    3f0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    3f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    3f14:	f006 ba74 	b.w	a400 <__tSVF_setFreqFast_veneer>
    3f18:	429a0000 	.word	0x429a0000
    3f1c:	420fb824 	.word	0x420fb824
    3f20:	457ff000 	.word	0x457ff000
    3f24:	00000000 	.word	0x00000000
    3f28:	200008d4 	.word	0x200008d4
    3f2c:	f3af 8000 	nop.w
    3f30:	f3af 8000 	nop.w
    3f34:	f3af 8000 	nop.w
    3f38:	f3af 8000 	nop.w
    3f3c:	f3af 8000 	nop.w

00003f40 <FXHighpassParam1>:
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3f40:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    3f44:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 3f78 <FXHighpassParam1+0x38>
    3f48:	eddf 7a0c 	vldr	s15, [pc, #48]	; 3f7c <FXHighpassParam1+0x3c>
    3f4c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 3f80 <FXHighpassParam1+0x40>
    3f50:	eee0 0a07 	vfma.f32	s1, s0, s14
    3f54:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 3f84 <FXHighpassParam1+0x44>
{
    3f58:	b538      	push	{r3, r4, r5, lr}
    3f5a:	4605      	mov	r5, r0
    3f5c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3f5e:	ee60 0aa7 	vmul.f32	s1, s1, s15
    3f62:	f004 fe3d 	bl	8be0 <LEAF_clip>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    3f66:	4b08      	ldr	r3, [pc, #32]	; (3f88 <FXHighpassParam1+0x48>)
    3f68:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    3f6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    3f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    3f74:	f006 ba44 	b.w	a400 <__tSVF_setFreqFast_veneer>
    3f78:	429a0000 	.word	0x429a0000
    3f7c:	420fb824 	.word	0x420fb824
    3f80:	457ff000 	.word	0x457ff000
    3f84:	00000000 	.word	0x00000000
    3f88:	200008b4 	.word	0x200008b4
    3f8c:	f3af 8000 	nop.w
    3f90:	f3af 8000 	nop.w
    3f94:	f3af 8000 	nop.w
    3f98:	f3af 8000 	nop.w
    3f9c:	f3af 8000 	nop.w

00003fa0 <FXBandpassParam1>:

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3fa0:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    3fa4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 3fd8 <FXBandpassParam1+0x38>
    3fa8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 3fdc <FXBandpassParam1+0x3c>
    3fac:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 3fe0 <FXBandpassParam1+0x40>
    3fb0:	eee0 0a07 	vfma.f32	s1, s0, s14
    3fb4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 3fe4 <FXBandpassParam1+0x44>
{
    3fb8:	b538      	push	{r3, r4, r5, lr}
    3fba:	4605      	mov	r5, r0
    3fbc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    3fbe:	ee60 0aa7 	vmul.f32	s1, s1, s15
    3fc2:	f004 fe0d 	bl	8be0 <LEAF_clip>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    3fc6:	4b08      	ldr	r3, [pc, #32]	; (3fe8 <FXBandpassParam1+0x48>)
    3fc8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    3fcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    3fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    3fd4:	f006 ba14 	b.w	a400 <__tSVF_setFreqFast_veneer>
    3fd8:	429a0000 	.word	0x429a0000
    3fdc:	420fb824 	.word	0x420fb824
    3fe0:	457ff000 	.word	0x457ff000
    3fe4:	00000000 	.word	0x00000000
    3fe8:	20000874 	.word	0x20000874
    3fec:	f3af 8000 	nop.w
    3ff0:	f3af 8000 	nop.w
    3ff4:	f3af 8000 	nop.w
    3ff8:	f3af 8000 	nop.w
    3ffc:	f3af 8000 	nop.w

00004000 <FXDiodeParam1>:

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    4000:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    4004:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 4038 <FXDiodeParam1+0x38>
    4008:	eddf 7a0c 	vldr	s15, [pc, #48]	; 403c <FXDiodeParam1+0x3c>
    400c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 4040 <FXDiodeParam1+0x40>
    4010:	eee0 0a07 	vfma.f32	s1, s0, s14
    4014:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 4044 <FXDiodeParam1+0x44>
{
    4018:	b538      	push	{r3, r4, r5, lr}
    401a:	4605      	mov	r5, r0
    401c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    401e:	ee60 0aa7 	vmul.f32	s1, s1, s15
    4022:	f004 fddd 	bl	8be0 <LEAF_clip>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    4026:	4b08      	ldr	r3, [pc, #32]	; (4048 <FXDiodeParam1+0x48>)
    4028:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    402c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    4030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    4034:	f006 b930 	b.w	a298 <__tDiodeFilter_setFreqFast_veneer>
    4038:	429a0000 	.word	0x429a0000
    403c:	420fb824 	.word	0x420fb824
    4040:	457ff000 	.word	0x457ff000
    4044:	00000000 	.word	0x00000000
    4048:	20000894 	.word	0x20000894
    404c:	f3af 8000 	nop.w
    4050:	f3af 8000 	nop.w
    4054:	f3af 8000 	nop.w
    4058:	f3af 8000 	nop.w
    405c:	f3af 8000 	nop.w

00004060 <FXPeakParam1>:
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    4060:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    4064:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 4098 <FXPeakParam1+0x38>
    4068:	eddf 7a0c 	vldr	s15, [pc, #48]	; 409c <FXPeakParam1+0x3c>
    406c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 40a0 <FXPeakParam1+0x40>
    4070:	eee0 0a07 	vfma.f32	s1, s0, s14
    4074:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 40a4 <FXPeakParam1+0x44>
{
    4078:	b538      	push	{r3, r4, r5, lr}
    407a:	4605      	mov	r5, r0
    407c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    407e:	ee60 0aa7 	vmul.f32	s1, s1, s15
    4082:	f004 fdad 	bl	8be0 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
    4086:	4b08      	ldr	r3, [pc, #32]	; (40a8 <FXPeakParam1+0x48>)
    4088:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    408c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    4090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
    4094:	f006 ba04 	b.w	a4a0 <__tVZFilter_setFreqFast_veneer>
    4098:	429a0000 	.word	0x429a0000
    409c:	420fb824 	.word	0x420fb824
    40a0:	457ff000 	.word	0x457ff000
    40a4:	00000000 	.word	0x00000000
    40a8:	20000854 	.word	0x20000854
    40ac:	f3af 8000 	nop.w
    40b0:	f3af 8000 	nop.w
    40b4:	f3af 8000 	nop.w
    40b8:	f3af 8000 	nop.w
    40bc:	f3af 8000 	nop.w

000040c0 <FXLowShelfParam1>:
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    40c0:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    40c4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 40f8 <FXLowShelfParam1+0x38>
    40c8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 40fc <FXLowShelfParam1+0x3c>
    40cc:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 4100 <FXLowShelfParam1+0x40>
    40d0:	eee0 0a07 	vfma.f32	s1, s0, s14
    40d4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 4104 <FXLowShelfParam1+0x44>
{
    40d8:	b538      	push	{r3, r4, r5, lr}
    40da:	4605      	mov	r5, r0
    40dc:	460c      	mov	r4, r1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    40de:	ee60 0aa7 	vmul.f32	s1, s1, s15
    40e2:	f004 fd7d 	bl	8be0 <LEAF_clip>
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
    40e6:	4b08      	ldr	r3, [pc, #32]	; (4108 <FXLowShelfParam1+0x48>)
    40e8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    40ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    40f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
    40f4:	f006 b9d4 	b.w	a4a0 <__tVZFilter_setFreqFast_veneer>
    40f8:	429a0000 	.word	0x429a0000
    40fc:	420fb824 	.word	0x420fb824
    4100:	457ff000 	.word	0x457ff000
    4104:	00000000 	.word	0x00000000
    4108:	20000834 	.word	0x20000834
    410c:	f3af 8000 	nop.w
    4110:	f3af 8000 	nop.w
    4114:	f3af 8000 	nop.w
    4118:	f3af 8000 	nop.w
    411c:	f3af 8000 	nop.w

00004120 <FXHighShelfParam1>:
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    4120:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    4124:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 4158 <FXHighShelfParam1+0x38>
    4128:	eddf 7a0c 	vldr	s15, [pc, #48]	; 415c <FXHighShelfParam1+0x3c>
    412c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 4160 <FXHighShelfParam1+0x40>
    4130:	eee0 0a07 	vfma.f32	s1, s0, s14
    4134:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 4164 <FXHighShelfParam1+0x44>
{
    4138:	b538      	push	{r3, r4, r5, lr}
    413a:	4605      	mov	r5, r0
    413c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    413e:	ee60 0aa7 	vmul.f32	s1, s1, s15
    4142:	f004 fd4d 	bl	8be0 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
    4146:	4b08      	ldr	r3, [pc, #32]	; (4168 <FXHighShelfParam1+0x48>)
    4148:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    414c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    4150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
    4154:	f006 b9a4 	b.w	a4a0 <__tVZFilter_setFreqFast_veneer>
    4158:	429a0000 	.word	0x429a0000
    415c:	420fb824 	.word	0x420fb824
    4160:	457ff000 	.word	0x457ff000
    4164:	00000000 	.word	0x00000000
    4168:	20000814 	.word	0x20000814
    416c:	f3af 8000 	nop.w
    4170:	f3af 8000 	nop.w
    4174:	f3af 8000 	nop.w
    4178:	f3af 8000 	nop.w
    417c:	f3af 8000 	nop.w

00004180 <FXNotchParam1>:
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    4180:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    4184:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 41b8 <FXNotchParam1+0x38>
    4188:	eddf 7a0c 	vldr	s15, [pc, #48]	; 41bc <FXNotchParam1+0x3c>
    418c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 41c0 <FXNotchParam1+0x40>
    4190:	eee0 0a07 	vfma.f32	s1, s0, s14
    4194:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 41c4 <FXNotchParam1+0x44>
{
    4198:	b538      	push	{r3, r4, r5, lr}
    419a:	4605      	mov	r5, r0
    419c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    419e:	ee60 0aa7 	vmul.f32	s1, s1, s15
    41a2:	f004 fd1d 	bl	8be0 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    41a6:	4b08      	ldr	r3, [pc, #32]	; (41c8 <FXNotchParam1+0x48>)
    41a8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    41ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    41b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    41b4:	f006 b974 	b.w	a4a0 <__tVZFilter_setFreqFast_veneer>
    41b8:	429a0000 	.word	0x429a0000
    41bc:	420fb824 	.word	0x420fb824
    41c0:	457ff000 	.word	0x457ff000
    41c4:	00000000 	.word	0x00000000
    41c8:	200007f4 	.word	0x200007f4
    41cc:	f3af 8000 	nop.w
    41d0:	f3af 8000 	nop.w
    41d4:	f3af 8000 	nop.w
    41d8:	f3af 8000 	nop.w
    41dc:	f3af 8000 	nop.w

000041e0 <FXLadderParam1>:
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    41e0:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    41e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 4218 <FXLadderParam1+0x38>
    41e8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 421c <FXLadderParam1+0x3c>
    41ec:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 4220 <FXLadderParam1+0x40>
    41f0:	eee0 0a07 	vfma.f32	s1, s0, s14
    41f4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 4224 <FXLadderParam1+0x44>
{
    41f8:	b538      	push	{r3, r4, r5, lr}
    41fa:	4605      	mov	r5, r0
    41fc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    41fe:	ee60 0aa7 	vmul.f32	s1, s1, s15
    4202:	f004 fced 	bl	8be0 <LEAF_clip>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    4206:	4b08      	ldr	r3, [pc, #32]	; (4228 <FXLadderParam1+0x48>)
    4208:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    420c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    4210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    4214:	f006 b894 	b.w	a340 <__tLadderFilter_setFreqFast_veneer>
    4218:	429a0000 	.word	0x429a0000
    421c:	420fb824 	.word	0x420fb824
    4220:	457ff000 	.word	0x457ff000
    4224:	00000000 	.word	0x00000000
    4228:	200007d4 	.word	0x200007d4
    422c:	f3af 8000 	nop.w
    4230:	f3af 8000 	nop.w
    4234:	f3af 8000 	nop.w
    4238:	f3af 8000 	nop.w
    423c:	f3af 8000 	nop.w

00004240 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
    4240:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    4244:	ed9f 7a09 	vldr	s14, [pc, #36]	; 426c <FXPeakParam2+0x2c>
{
    4248:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
    424a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    424e:	4605      	mov	r5, r0
    4250:	460c      	mov	r4, r1
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
    4252:	eeb0 0a67 	vmov.f32	s0, s15
    4256:	f006 f807 	bl	a268 <__fasterdbtoa_veneer>
    425a:	4b05      	ldr	r3, [pc, #20]	; (4270 <FXPeakParam2+0x30>)
    425c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    4260:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    4264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
    4268:	f006 b80e 	b.w	a288 <__tVZFilter_setGain_veneer>
    426c:	42480000 	.word	0x42480000
    4270:	20000854 	.word	0x20000854
    4274:	f3af 8000 	nop.w
    4278:	f3af 8000 	nop.w
    427c:	f3af 8000 	nop.w

00004280 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    4280:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    4284:	ed9f 7a09 	vldr	s14, [pc, #36]	; 42ac <FXLowShelfParam2+0x2c>
{
    4288:	b538      	push	{r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    428a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    428e:	4605      	mov	r5, r0
    4290:	460c      	mov	r4, r1
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    4292:	eeb0 0a67 	vmov.f32	s0, s15
    4296:	f005 ffe7 	bl	a268 <__fasterdbtoa_veneer>
    429a:	4b05      	ldr	r3, [pc, #20]	; (42b0 <FXLowShelfParam2+0x30>)
    429c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    42a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    42a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    42a8:	f005 bfee 	b.w	a288 <__tVZFilter_setGain_veneer>
    42ac:	42480000 	.word	0x42480000
    42b0:	20000834 	.word	0x20000834
    42b4:	f3af 8000 	nop.w
    42b8:	f3af 8000 	nop.w
    42bc:	f3af 8000 	nop.w

000042c0 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    42c0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    42c4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 42ec <FXHighShelfParam2+0x2c>
{
    42c8:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    42ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    42ce:	4605      	mov	r5, r0
    42d0:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    42d2:	eeb0 0a67 	vmov.f32	s0, s15
    42d6:	f005 ffc7 	bl	a268 <__fasterdbtoa_veneer>
    42da:	4b05      	ldr	r3, [pc, #20]	; (42f0 <FXHighShelfParam2+0x30>)
    42dc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    42e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    42e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
    42e8:	f005 bfce 	b.w	a288 <__tVZFilter_setGain_veneer>
    42ec:	42480000 	.word	0x42480000
    42f0:	20000814 	.word	0x20000814
    42f4:	f3af 8000 	nop.w
    42f8:	f3af 8000 	nop.w
    42fc:	f3af 8000 	nop.w

00004300 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
    4300:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    4304:	ed9f 7a09 	vldr	s14, [pc, #36]	; 432c <FXNotchParam2+0x2c>
{
    4308:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
    430a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    430e:	4605      	mov	r5, r0
    4310:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
    4312:	eeb0 0a67 	vmov.f32	s0, s15
    4316:	f005 ffa7 	bl	a268 <__fasterdbtoa_veneer>
    431a:	4b05      	ldr	r3, [pc, #20]	; (4330 <FXNotchParam2+0x30>)
    431c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    4320:	eb03 0080 	add.w	r0, r3, r0, lsl #2

}
    4324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
    4328:	f005 bfae 	b.w	a288 <__tVZFilter_setGain_veneer>
    432c:	42480000 	.word	0x42480000
    4330:	200007f4 	.word	0x200007f4
    4334:	f3af 8000 	nop.w
    4338:	f3af 8000 	nop.w
    433c:	f3af 8000 	nop.w

00004340 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
    4340:	4b03      	ldr	r3, [pc, #12]	; (4350 <FXLowpassParam3+0x10>)
    4342:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4346:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    434a:	f006 b8ad 	b.w	a4a8 <__tSVF_setQ_veneer>
    434e:	bf00      	nop
    4350:	200008d4 	.word	0x200008d4
    4354:	f3af 8000 	nop.w
    4358:	f3af 8000 	nop.w
    435c:	f3af 8000 	nop.w

00004360 <FXHighpassParam3>:
}

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
    4360:	4b03      	ldr	r3, [pc, #12]	; (4370 <FXHighpassParam3+0x10>)
    4362:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4366:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    436a:	f006 b89d 	b.w	a4a8 <__tSVF_setQ_veneer>
    436e:	bf00      	nop
    4370:	200008b4 	.word	0x200008b4
    4374:	f3af 8000 	nop.w
    4378:	f3af 8000 	nop.w
    437c:	f3af 8000 	nop.w

00004380 <FXBandpassParam3>:
}

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
    4380:	4b03      	ldr	r3, [pc, #12]	; (4390 <FXBandpassParam3+0x10>)
    4382:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4386:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    438a:	f006 b88d 	b.w	a4a8 <__tSVF_setQ_veneer>
    438e:	bf00      	nop
    4390:	20000874 	.word	0x20000874
    4394:	f3af 8000 	nop.w
    4398:	f3af 8000 	nop.w
    439c:	f3af 8000 	nop.w

000043a0 <FXDiodeParam3>:
}

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
    43a0:	4b03      	ldr	r3, [pc, #12]	; (43b0 <FXDiodeParam3+0x10>)
    43a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    43a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    43aa:	f006 b805 	b.w	a3b8 <__tDiodeFilter_setQ_veneer>
    43ae:	bf00      	nop
    43b0:	20000894 	.word	0x20000894
    43b4:	f3af 8000 	nop.w
    43b8:	f3af 8000 	nop.w
    43bc:	f3af 8000 	nop.w

000043c0 <FXPeakParam3>:
}


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterPeak[v][string], value);
    43c0:	4b03      	ldr	r3, [pc, #12]	; (43d0 <FXPeakParam3+0x10>)
    43c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    43c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    43ca:	f005 bfb5 	b.w	a338 <__tVZFilter_setResonance_veneer>
    43ce:	bf00      	nop
    43d0:	20000854 	.word	0x20000854
    43d4:	f3af 8000 	nop.w
    43d8:	f3af 8000 	nop.w
    43dc:	f3af 8000 	nop.w

000043e0 <FXLowShelfParam3>:
}


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterLS[v][string], value);
    43e0:	4b03      	ldr	r3, [pc, #12]	; (43f0 <FXLowShelfParam3+0x10>)
    43e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    43e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    43ea:	f005 bfa5 	b.w	a338 <__tVZFilter_setResonance_veneer>
    43ee:	bf00      	nop
    43f0:	20000834 	.word	0x20000834
    43f4:	f3af 8000 	nop.w
    43f8:	f3af 8000 	nop.w
    43fc:	f3af 8000 	nop.w

00004400 <FXHighShelfParam3>:
}


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterHS[v][string], value);
    4400:	4b03      	ldr	r3, [pc, #12]	; (4410 <FXHighShelfParam3+0x10>)
    4402:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4406:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    440a:	f005 bf95 	b.w	a338 <__tVZFilter_setResonance_veneer>
    440e:	bf00      	nop
    4410:	20000814 	.word	0x20000814
    4414:	f3af 8000 	nop.w
    4418:	f3af 8000 	nop.w
    441c:	f3af 8000 	nop.w

00004420 <FXNotchParam3>:
}


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
    4420:	4b03      	ldr	r3, [pc, #12]	; (4430 <FXNotchParam3+0x10>)
    4422:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4426:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    442a:	f005 bf85 	b.w	a338 <__tVZFilter_setResonance_veneer>
    442e:	bf00      	nop
    4430:	200007f4 	.word	0x200007f4
    4434:	f3af 8000 	nop.w
    4438:	f3af 8000 	nop.w
    443c:	f3af 8000 	nop.w

00004440 <FXLadderParam3>:
}


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
    4440:	4b03      	ldr	r3, [pc, #12]	; (4450 <FXLadderParam3+0x10>)
    4442:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    4446:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    444a:	f006 b821 	b.w	a490 <__tLadderFilter_setQ_veneer>
    444e:	bf00      	nop
    4450:	200007d4 	.word	0x200007d4
    4454:	f3af 8000 	nop.w
    4458:	f3af 8000 	nop.w
    445c:	f3af 8000 	nop.w

00004460 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    4460:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseShelf1[string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    4462:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    4466:	008c      	lsls	r4, r1, #2
{
    4468:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&noiseShelf1[string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    446c:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    4470:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&noiseShelf1[string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    4474:	eee0 7a68 	vfms.f32	s15, s0, s17
    4478:	eeb0 0a67 	vmov.f32	s0, s15
    447c:	f005 fef4 	bl	a268 <__fasterdbtoa_veneer>
    4480:	4808      	ldr	r0, [pc, #32]	; (44a4 <noiseSetTilt+0x44>)
    4482:	4420      	add	r0, r4
    4484:	f005 ff00 	bl	a288 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&noiseShelf2[string], fasterdbtoa((value * 30.0f) - 15.0f));
    4488:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    448c:	eea8 0a28 	vfma.f32	s0, s16, s17
    4490:	f005 feea 	bl	a268 <__fasterdbtoa_veneer>
    4494:	4804      	ldr	r0, [pc, #16]	; (44a8 <noiseSetTilt+0x48>)
}
    4496:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&noiseShelf2[string], fasterdbtoa((value * 30.0f) - 15.0f));
    449a:	4420      	add	r0, r4
}
    449c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseShelf2[string], fasterdbtoa((value * 30.0f) - 15.0f));
    44a0:	f005 bef2 	b.w	a288 <__tVZFilter_setGain_veneer>
    44a4:	200055bc 	.word	0x200055bc
    44a8:	200055c4 	.word	0x200055c4
    44ac:	f3af 8000 	nop.w
    44b0:	f3af 8000 	nop.w
    44b4:	f3af 8000 	nop.w
    44b8:	f3af 8000 	nop.w
    44bc:	f3af 8000 	nop.w

000044c0 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilter_setGain(&noiseBell1[string], fasterdbtoa((value* 34.0f) - 17.0f));
    44c0:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    44c4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 44e8 <noiseSetGain+0x28>
{
    44c8:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fasterdbtoa((value* 34.0f) - 17.0f));
    44ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    44ce:	460c      	mov	r4, r1
	tVZFilter_setGain(&noiseBell1[string], fasterdbtoa((value* 34.0f) - 17.0f));
    44d0:	eeb0 0a67 	vmov.f32	s0, s15
    44d4:	f005 fec8 	bl	a268 <__fasterdbtoa_veneer>
    44d8:	4804      	ldr	r0, [pc, #16]	; (44ec <noiseSetGain+0x2c>)
    44da:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    44de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fasterdbtoa((value* 34.0f) - 17.0f));
    44e2:	f005 bed1 	b.w	a288 <__tVZFilter_setGain_veneer>
    44e6:	bf00      	nop
    44e8:	42080000 	.word	0x42080000
    44ec:	20005598 	.word	0x20005598
    44f0:	f3af 8000 	nop.w
    44f4:	f3af 8000 	nop.w
    44f8:	f3af 8000 	nop.w
    44fc:	f3af 8000 	nop.w

00004500 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    4500:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    4504:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 4534 <noiseSetFreq+0x34>
    4508:	eddf 7a0b 	vldr	s15, [pc, #44]	; 4538 <noiseSetFreq+0x38>
    450c:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 453c <noiseSetFreq+0x3c>
    4510:	eee0 0a07 	vfma.f32	s1, s0, s14
    4514:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 4540 <noiseSetFreq+0x40>
{
    4518:	b510      	push	{r4, lr}
    451a:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    451c:	ee60 0aa7 	vmul.f32	s1, s1, s15
    4520:	f004 fb5e 	bl	8be0 <LEAF_clip>
	tVZFilter_setFreqFast(&noiseBell1[string], value);
    4524:	4807      	ldr	r0, [pc, #28]	; (4544 <noiseSetFreq+0x44>)
    4526:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    452a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&noiseBell1[string], value);
    452e:	f005 bfb7 	b.w	a4a0 <__tVZFilter_setFreqFast_veneer>
    4532:	bf00      	nop
    4534:	429a0000 	.word	0x429a0000
    4538:	420fb824 	.word	0x420fb824
    453c:	457ff000 	.word	0x457ff000
    4540:	00000000 	.word	0x00000000
    4544:	20005598 	.word	0x20005598
    4548:	f3af 8000 	nop.w
    454c:	f3af 8000 	nop.w
    4550:	f3af 8000 	nop.w
    4554:	f3af 8000 	nop.w
    4558:	f3af 8000 	nop.w
    455c:	f3af 8000 	nop.w

00004560 <noise_tick>:


void __ATTR_ITCMRAM noise_tick(int string)
{
    4560:	b538      	push	{r3, r4, r5, lr}
	float enabled = params[Noise].realVal[string];
    4562:	4b25      	ldr	r3, [pc, #148]	; (45f8 <noise_tick+0x98>)
{
    4564:	4604      	mov	r4, r0
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
    4566:	4d25      	ldr	r5, [pc, #148]	; (45fc <noise_tick+0x9c>)
	float enabled = params[Noise].realVal[string];
    4568:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	float sample = random_values[randomValPointer++];
    456c:	4924      	ldr	r1, [pc, #144]	; (4600 <noise_tick+0xa0>)
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    456e:	4825      	ldr	r0, [pc, #148]	; (4604 <noise_tick+0xa4>)
	float filterSend = params[NoiseFilterSend].realVal[string];
    4570:	4613      	mov	r3, r2
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    4572:	eb00 0084 	add.w	r0, r0, r4, lsl #2
{
    4576:	ed2d 8b04 	vpush	{d8-d9}
	float enabled = params[Noise].realVal[string];
    457a:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float amp = params[NoiseAmp].realVal[string];
    457e:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	float sample = random_values[randomValPointer++];
    4582:	782a      	ldrb	r2, [r5, #0]
	float filterSend = params[NoiseFilterSend].realVal[string];
    4584:	ed93 8aa3 	vldr	s16, [r3, #652]	; 0x28c
	float sample = random_values[randomValPointer++];
    4588:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    458c:	3201      	adds	r2, #1
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    458e:	ed91 0a00 	vldr	s0, [r1]
	float sample = random_values[randomValPointer++];
    4592:	702a      	strb	r2, [r5, #0]
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
    4594:	f005 febc 	bl	a310 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseShelf2[string], sample);
    4598:	00a5      	lsls	r5, r4, #2
    459a:	481b      	ldr	r0, [pc, #108]	; (4608 <noise_tick+0xa8>)
    459c:	4428      	add	r0, r5
    459e:	f005 feb7 	bl	a310 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseBell1[string], sample);
    45a2:	481a      	ldr	r0, [pc, #104]	; (460c <noise_tick+0xac>)
    45a4:	4428      	add	r0, r5
    45a6:	f005 feb3 	bl	a310 <__tVZFilter_tickEfficient_veneer>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
    45aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    45ae:	ed9f 6a18 	vldr	s12, [pc, #96]	; 4610 <noise_tick+0xb0>
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
    45b2:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
    45b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	noiseOuts[0][string] = sample * filterSend *  enabled;
    45ba:	4b16      	ldr	r3, [pc, #88]	; (4614 <noise_tick+0xb4>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    45bc:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    45c0:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
    45c4:	ee28 0a80 	vmul.f32	s0, s17, s0
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    45c8:	4a13      	ldr	r2, [pc, #76]	; (4618 <noise_tick+0xb8>)
	noiseOuts[0][string] = sample * filterSend *  enabled;
    45ca:	441d      	add	r5, r3
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    45cc:	ee28 8a09 	vmul.f32	s16, s16, s18
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    45d0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	float normSample = (sample + 1.f) * 0.5f;
    45d4:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
    45d8:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    45dc:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    45e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
    45e4:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    45e8:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    45ec:	edc2 7a06 	vstr	s15, [r2, #24]
}
    45f0:	ecbd 8b04 	vpop	{d8-d9}
    45f4:	bd38      	pop	{r3, r4, r5, pc}
    45f6:	bf00      	nop
    45f8:	20019968 	.word	0x20019968
    45fc:	20005b84 	.word	0x20005b84
    4600:	2001aaac 	.word	0x2001aaac
    4604:	200055bc 	.word	0x200055bc
    4608:	200055c4 	.word	0x200055c4
    460c:	20005598 	.word	0x20005598
    4610:	00000000 	.word	0x00000000
    4614:	200055ac 	.word	0x200055ac
    4618:	200146d8 	.word	0x200146d8
    461c:	f3af 8000 	nop.w

00004620 <audioTickSynth>:
{
    4620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountTick = DWT->CYCCNT;
    4624:	4cbe      	ldr	r4, [pc, #760]	; (4920 <audioTickSynth+0x300>)
    4626:	4dbf      	ldr	r5, [pc, #764]	; (4924 <audioTickSynth+0x304>)
    4628:	4ebf      	ldr	r6, [pc, #764]	; (4928 <audioTickSynth+0x308>)
    462a:	f8df a384 	ldr.w	sl, [pc, #900]	; 49b0 <audioTickSynth+0x390>
    462e:	f105 0930 	add.w	r9, r5, #48	; 0x30
    4632:	f8df b380 	ldr.w	fp, [pc, #896]	; 49b4 <audioTickSynth+0x394>
{
    4636:	ed2d 8b06 	vpush	{d8-d10}
    463a:	b091      	sub	sp, #68	; 0x44
    463c:	af00      	add	r7, sp, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    463e:	6863      	ldr	r3, [r4, #4]
    4640:	60bb      	str	r3, [r7, #8]
	uint32_t tempCountMap = DWT->CYCCNT;
    4642:	f8d4 8004 	ldr.w	r8, [r4, #4]
	tickMappings();
    4646:	f7fe fbdb 	bl	2e00 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    464a:	6863      	ldr	r3, [r4, #4]
    464c:	4ab7      	ldr	r2, [pc, #732]	; (492c <audioTickSynth+0x30c>)
    464e:	eba3 0308 	sub.w	r3, r3, r8
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    4652:	48b7      	ldr	r0, [pc, #732]	; (4930 <audioTickSynth+0x310>)
	timeMap = DWT->CYCCNT - tempCountMap;
    4654:	6013      	str	r3, [r2, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    4656:	f8d4 8004 	ldr.w	r8, [r4, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    465a:	f003 fec1 	bl	83e0 <tExpSmooth_tick>
    465e:	eef0 8a40 	vmov.f32	s17, s0
    4662:	4634      	mov	r4, r6
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    4664:	4650      	mov	r0, sl
    4666:	f003 febb 	bl	83e0 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
    466a:	f89b 3000 	ldrb.w	r3, [fp]
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    466e:	eca5 0a01 	vstmia	r5!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    4672:	b12b      	cbz	r3, 4680 <audioTickSynth+0x60>
    4674:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    4676:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
    467a:	d001      	beq.n	4680 <audioTickSynth+0x60>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    467c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
    4680:	454d      	cmp	r5, r9
    4682:	f10a 0a04 	add.w	sl, sl, #4
    4686:	f104 0408 	add.w	r4, r4, #8
    468a:	d1eb      	bne.n	4664 <audioTickSynth+0x44>
    468c:	4ca9      	ldr	r4, [pc, #676]	; (4934 <audioTickSynth+0x314>)
    468e:	4daa      	ldr	r5, [pc, #680]	; (4938 <audioTickSynth+0x318>)
    4690:	f104 0928 	add.w	r9, r4, #40	; 0x28
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    4694:	4628      	mov	r0, r5
    4696:	f003 fea3 	bl	83e0 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
    469a:	f89b 3000 	ldrb.w	r3, [fp]
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    469e:	eca4 0a01 	vstmia	r4!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    46a2:	b12b      	cbz	r3, 46b0 <audioTickSynth+0x90>
    46a4:	2b01      	cmp	r3, #1
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    46a6:	ed86 0a38 	vstr	s0, [r6, #224]	; 0xe0
		for (int v = 0; v < numStringsThisBoard; v++)
    46aa:	d001      	beq.n	46b0 <audioTickSynth+0x90>
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    46ac:	ed86 0a39 	vstr	s0, [r6, #228]	; 0xe4
	for (int i = 0; i < 10; i++)
    46b0:	454c      	cmp	r4, r9
    46b2:	f105 0504 	add.w	r5, r5, #4
    46b6:	f106 0608 	add.w	r6, r6, #8
    46ba:	d1eb      	bne.n	4694 <audioTickSynth+0x74>
	float note[numStringsThisBoard];
    46bc:	009a      	lsls	r2, r3, #2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    46be:	f8df 9260 	ldr.w	r9, [pc, #608]	; 4920 <audioTickSynth+0x300>
	float masterSample = 0.0f;
    46c2:	ed9f 9a9e 	vldr	s18, [pc, #632]	; 493c <audioTickSynth+0x31c>
	float note[numStringsThisBoard];
    46c6:	3207      	adds	r2, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    46c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
	float note[numStringsThisBoard];
    46cc:	f402 62ff 	and.w	r2, r2, #2040	; 0x7f8
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    46d0:	eba1 0108 	sub.w	r1, r1, r8
	float note[numStringsThisBoard];
    46d4:	ebad 0d02 	sub.w	sp, sp, r2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    46d8:	4a99      	ldr	r2, [pc, #612]	; (4940 <audioTickSynth+0x320>)
    46da:	6011      	str	r1, [r2, #0]
	float note[numStringsThisBoard];
    46dc:	4668      	mov	r0, sp
	uint32_t tempPerStringTick = DWT->CYCCNT;
    46de:	f8d9 2004 	ldr.w	r2, [r9, #4]
    46e2:	607a      	str	r2, [r7, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    46e4:	2b00      	cmp	r3, #0
    46e6:	f000 8197 	beq.w	4a18 <audioTickSynth+0x3f8>
    46ea:	4a96      	ldr	r2, [pc, #600]	; (4944 <audioTickSynth+0x324>)
		float sample = 0.0f;
    46ec:	eef0 9a49 	vmov.f32	s19, s18
    46f0:	4b95      	ldr	r3, [pc, #596]	; (4948 <audioTickSynth+0x328>)
    46f2:	61fa      	str	r2, [r7, #28]
    46f4:	4a95      	ldr	r2, [pc, #596]	; (494c <audioTickSynth+0x32c>)
    46f6:	627b      	str	r3, [r7, #36]	; 0x24
	for (int v = 0; v < numStringsThisBoard; v++)
    46f8:	2300      	movs	r3, #0
    46fa:	617a      	str	r2, [r7, #20]
    46fc:	4a94      	ldr	r2, [pc, #592]	; (4950 <audioTickSynth+0x330>)
    46fe:	469a      	mov	sl, r3
    4700:	ed9f aa94 	vldr	s20, [pc, #592]	; 4954 <audioTickSynth+0x334>
    4704:	623a      	str	r2, [r7, #32]
    4706:	4a94      	ldr	r2, [pc, #592]	; (4958 <audioTickSynth+0x338>)
    4708:	62b8      	str	r0, [r7, #40]	; 0x28
    470a:	62fb      	str	r3, [r7, #44]	; 0x2c
    470c:	61ba      	str	r2, [r7, #24]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    470e:	4b93      	ldr	r3, [pc, #588]	; (495c <audioTickSynth+0x33c>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    4710:	6af9      	ldr	r1, [r7, #44]	; 0x2c
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    4712:	ed93 7a00 	vldr	s14, [r3]
    4716:	4b92      	ldr	r3, [pc, #584]	; (4960 <audioTickSynth+0x340>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    4718:	4a92      	ldr	r2, [pc, #584]	; (4964 <audioTickSynth+0x344>)
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    471a:	edd3 6a00 	vldr	s13, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    471e:	4b92      	ldr	r3, [pc, #584]	; (4968 <audioTickSynth+0x348>)
    4720:	440a      	add	r2, r1
		float sample = 0.0f;
    4722:	edc7 9a0d 	vstr	s19, [r7, #52]	; 0x34
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    4726:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    472a:	ed92 6a00 	vldr	s12, [r2]
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    472e:	f8d9 2004 	ldr.w	r2, [r9, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    4732:	edd3 7a00 	vldr	s15, [r3]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    4736:	6a79      	ldr	r1, [r7, #36]	; 0x24
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    4738:	ee77 7a86 	vadd.f32	s15, s15, s12
    473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    473e:	460d      	mov	r5, r1
    4740:	3104      	adds	r1, #4
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    4742:	ee37 7ac7 	vsub.f32	s14, s15, s14
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    4746:	ece3 7a01 	vstmia	r3!, {s15}
		if (note[v] < 0.0f)
    474a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    474e:	62bb      	str	r3, [r7, #40]	; 0x28
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    4750:	ee27 7a26 	vmul.f32	s14, s14, s13
		if (note[v] < 0.0f)
    4754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    4758:	ed01 7a01 	vstr	s14, [r1, #-4]
    475c:	6279      	str	r1, [r7, #36]	; 0x24
		if (note[v] < 0.0f)
    475e:	f100 81b3 	bmi.w	4ac8 <audioTickSynth+0x4a8>
    4762:	ed43 7a01 	vstr	s15, [r3, #-4]
		if (note[v] > 127.0f)
    4766:	fe87 8aca 	vminnm.f32	s16, s15, s20
    476a:	ed03 8a01 	vstr	s16, [r3, #-4]
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    476e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4772:	1a9b      	subs	r3, r3, r2
    4774:	4a7d      	ldr	r2, [pc, #500]	; (496c <audioTickSynth+0x34c>)
    4776:	6013      	str	r3, [r2, #0]
		if (envOn[v])
    4778:	4b7d      	ldr	r3, [pc, #500]	; (4970 <audioTickSynth+0x350>)
		uint32_t tempCountEnv = DWT->CYCCNT;
    477a:	f8d9 4004 	ldr.w	r4, [r9, #4]
		if (envOn[v])
    477e:	781b      	ldrb	r3, [r3, #0]
    4780:	2b00      	cmp	r3, #0
    4782:	f040 81c5 	bne.w	4b10 <audioTickSynth+0x4f0>
    4786:	4b7a      	ldr	r3, [pc, #488]	; (4970 <audioTickSynth+0x350>)
    4788:	785b      	ldrb	r3, [r3, #1]
    478a:	2b00      	cmp	r3, #0
    478c:	f040 81b7 	bne.w	4afe <audioTickSynth+0x4de>
    4790:	4b77      	ldr	r3, [pc, #476]	; (4970 <audioTickSynth+0x350>)
    4792:	789b      	ldrb	r3, [r3, #2]
    4794:	2b00      	cmp	r3, #0
    4796:	f040 81a9 	bne.w	4aec <audioTickSynth+0x4cc>
    479a:	4b75      	ldr	r3, [pc, #468]	; (4970 <audioTickSynth+0x350>)
    479c:	78db      	ldrb	r3, [r3, #3]
    479e:	2b00      	cmp	r3, #0
    47a0:	f040 819b 	bne.w	4ada <audioTickSynth+0x4ba>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    47a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
    47a8:	3d88      	subs	r5, #136	; 0x88
    47aa:	4a72      	ldr	r2, [pc, #456]	; (4974 <audioTickSynth+0x354>)
    47ac:	1b1b      	subs	r3, r3, r4
    47ae:	f8df 8208 	ldr.w	r8, [pc, #520]	; 49b8 <audioTickSynth+0x398>
		uint32_t tempCountLFO = DWT->CYCCNT;
    47b2:	4c71      	ldr	r4, [pc, #452]	; (4978 <audioTickSynth+0x358>)
		timeEnv = DWT->CYCCNT - tempCountEnv;
    47b4:	6013      	str	r3, [r2, #0]
		uint32_t tempCountLFO = DWT->CYCCNT;
    47b6:	f8d9 6004 	ldr.w	r6, [r9, #4]
			float sample = 0.0f;
    47ba:	4b6f      	ldr	r3, [pc, #444]	; (4978 <audioTickSynth+0x358>)
			lfoShapeTick[i](&sample,i, string);
    47bc:	4652      	mov	r2, sl
    47be:	f107 0038 	add.w	r0, r7, #56	; 0x38
    47c2:	1ae1      	subs	r1, r4, r3
		if (lfoOn[i])
    47c4:	f814 3b01 	ldrb.w	r3, [r4], #1
    47c8:	b13b      	cbz	r3, 47da <audioTickSynth+0x1ba>
			lfoShapeTick[i](&sample,i, string);
    47ca:	f8d8 3000 	ldr.w	r3, [r8]
			float sample = 0.0f;
    47ce:	edc7 9a0e 	vstr	s19, [r7, #56]	; 0x38
			lfoShapeTick[i](&sample,i, string);
    47d2:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    47d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    47d6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    47da:	4b68      	ldr	r3, [pc, #416]	; (497c <audioTickSynth+0x35c>)
    47dc:	f108 0804 	add.w	r8, r8, #4
    47e0:	3508      	adds	r5, #8
    47e2:	429c      	cmp	r4, r3
    47e4:	d1e9      	bne.n	47ba <audioTickSynth+0x19a>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    47e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
		oscillator_tick(note[v], v);
    47ea:	eeb0 0a48 	vmov.f32	s0, s16
		timeLFO = DWT->CYCCNT - tempCountLFO;
    47ee:	4a64      	ldr	r2, [pc, #400]	; (4980 <audioTickSynth+0x360>)
		oscillator_tick(note[v], v);
    47f0:	4650      	mov	r0, sl
		timeLFO = DWT->CYCCNT - tempCountLFO;
    47f2:	1b9b      	subs	r3, r3, r6
    47f4:	6013      	str	r3, [r2, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    47f6:	f8d9 4004 	ldr.w	r4, [r9, #4]
		oscillator_tick(note[v], v);
    47fa:	f7fd f9d1 	bl	1ba0 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    47fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4802:	4a60      	ldr	r2, [pc, #384]	; (4984 <audioTickSynth+0x364>)
    4804:	1b1b      	subs	r3, r3, r4
    4806:	6013      	str	r3, [r2, #0]
		if (noiseOn)
    4808:	4b5f      	ldr	r3, [pc, #380]	; (4988 <audioTickSynth+0x368>)
		uint32_t tempCountNoise = DWT->CYCCNT;
    480a:	f8d9 4004 	ldr.w	r4, [r9, #4]
		if (noiseOn)
    480e:	781b      	ldrb	r3, [r3, #0]
    4810:	2b00      	cmp	r3, #0
    4812:	f040 815e 	bne.w	4ad2 <audioTickSynth+0x4b2>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    4816:	f8d9 3004 	ldr.w	r3, [r9, #4]
    481a:	4a5c      	ldr	r2, [pc, #368]	; (498c <audioTickSynth+0x36c>)
    481c:	1b1b      	subs	r3, r3, r4
    481e:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < oscToTick; i++)
    4820:	4b5b      	ldr	r3, [pc, #364]	; (4990 <audioTickSynth+0x370>)
    4822:	781b      	ldrb	r3, [r3, #0]
    4824:	2b00      	cmp	r3, #0
    4826:	f000 81c3 	beq.w	4bb0 <audioTickSynth+0x590>
			filterSamps[0] += oscOuts[0][i][v];
    482a:	69ba      	ldr	r2, [r7, #24]
		for (int i = 0; i < oscToTick; i++)
    482c:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
    482e:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
    4832:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
    4836:	d011      	beq.n	485c <audioTickSynth+0x23c>
			filterSamps[0] += oscOuts[0][i][v];
    4838:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
    483c:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
    483e:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
    4842:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    4846:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
    484a:	d007      	beq.n	485c <audioTickSynth+0x23c>
			filterSamps[0] += oscOuts[0][i][v];
    484c:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
    4850:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
    4854:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    4858:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
    485c:	697b      	ldr	r3, [r7, #20]
		sample = filter_tick(&filterSamps[0], note[v], v);
    485e:	eeb0 0a48 	vmov.f32	s0, s16
    4862:	4651      	mov	r1, sl
    4864:	f107 0038 	add.w	r0, r7, #56	; 0x38
		filterSamps[0] += noiseOuts[0][v];
    4868:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
    486c:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
    4870:	ee76 6a86 	vadd.f32	s13, s13, s12
    4874:	617b      	str	r3, [r7, #20]
		filterSamps[1] += noiseOuts[1][v];
    4876:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
    487a:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
		filterSamps[1] += noiseOuts[1][v];
    487e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		uint32_t tempCountFilt = DWT->CYCCNT;
    4882:	f8d9 4004 	ldr.w	r4, [r9, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    4886:	f7fd fcfb 	bl	2280 <filter_tick>
    488a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    488e:	eeb0 8a40 	vmov.f32	s16, s0
		timeFilt = DWT->CYCCNT - tempCountFilt;
    4892:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4896:	4a3f      	ldr	r2, [pc, #252]	; (4994 <audioTickSynth+0x374>)
    4898:	1b1b      	subs	r3, r3, r4
    489a:	6013      	str	r3, [r2, #0]
		if (fxPre)
    489c:	4b3e      	ldr	r3, [pc, #248]	; (4998 <audioTickSynth+0x378>)
    489e:	781b      	ldrb	r3, [r3, #0]
    48a0:	b133      	cbz	r3, 48b0 <audioTickSynth+0x290>
			sample *= amplitude[v];
    48a2:	69fb      	ldr	r3, [r7, #28]
    48a4:	edd3 7a00 	vldr	s15, [r3]
    48a8:	ee20 8a27 	vmul.f32	s16, s0, s15
    48ac:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
		if (overSampled)
    48b0:	4b3a      	ldr	r3, [pc, #232]	; (499c <audioTickSynth+0x37c>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    48b2:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
		if (overSampled)
    48b6:	781c      	ldrb	r4, [r3, #0]
		uint32_t tempCountOS = DWT->CYCCNT;
    48b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    48bc:	613b      	str	r3, [r7, #16]
		if (overSampled)
    48be:	2c00      	cmp	r4, #0
    48c0:	f040 812d 	bne.w	4b1e <audioTickSynth+0x4fe>
    48c4:	4a36      	ldr	r2, [pc, #216]	; (49a0 <audioTickSynth+0x380>)
    48c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    48c8:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 49bc <audioTickSynth+0x39c>
    48cc:	18d6      	adds	r6, r2, r3
    48ce:	4a35      	ldr	r2, [pc, #212]	; (49a4 <audioTickSynth+0x384>)
    48d0:	18d5      	adds	r5, r2, r3
				if (effectsActive[i])
    48d2:	f818 3b01 	ldrb.w	r3, [r8], #1
					sample = effectTick[i](sample, i, v); //run the effect
    48d6:	eeb0 0a48 	vmov.f32	s0, s16
    48da:	4620      	mov	r0, r4
    48dc:	4651      	mov	r1, sl
				if (effectsActive[i])
    48de:	b18b      	cbz	r3, 4904 <audioTickSynth+0x2e4>
					sample = effectTick[i](sample, i, v); //run the effect
    48e0:	4b31      	ldr	r3, [pc, #196]	; (49a8 <audioTickSynth+0x388>)
    48e2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    48e6:	4798      	blx	r3
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    48e8:	edd6 7a00 	vldr	s15, [r6]
					sample *= fxPostGain[i][v];
    48ec:	ed95 7a00 	vldr	s14, [r5]
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    48f0:	ee7a 6ae7 	vsub.f32	s13, s21, s15
    48f4:	ee60 7a27 	vmul.f32	s15, s0, s15
    48f8:	eee6 7a88 	vfma.f32	s15, s13, s16
					sample *= fxPostGain[i][v];
    48fc:	ee27 8a87 	vmul.f32	s16, s15, s14
    4900:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
			for (int i = 0; i < NUM_EFFECT; i++)
    4904:	3401      	adds	r4, #1
    4906:	3608      	adds	r6, #8
    4908:	3508      	adds	r5, #8
    490a:	2c04      	cmp	r4, #4
    490c:	d1e1      	bne.n	48d2 <audioTickSynth+0x2b2>
		timeOS = DWT->CYCCNT - tempCountOS;
    490e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4912:	693a      	ldr	r2, [r7, #16]
    4914:	1a9b      	subs	r3, r3, r2
    4916:	4a25      	ldr	r2, [pc, #148]	; (49ac <audioTickSynth+0x38c>)
    4918:	6013      	str	r3, [r2, #0]
		if (!fxPre)
    491a:	4b1f      	ldr	r3, [pc, #124]	; (4998 <audioTickSynth+0x378>)
    491c:	781b      	ldrb	r3, [r3, #0]
    491e:	e04f      	b.n	49c0 <audioTickSynth+0x3a0>
    4920:	e0001000 	.word	0xe0001000
    4924:	20005290 	.word	0x20005290
    4928:	200146d8 	.word	0x200146d8
    492c:	20014894 	.word	0x20014894
    4930:	2001490c 	.word	0x2001490c
    4934:	200056e0 	.word	0x200056e0
    4938:	20005708 	.word	0x20005708
    493c:	00000000 	.word	0x00000000
    4940:	200148a8 	.word	0x200148a8
    4944:	20000a64 	.word	0x20000a64
    4948:	20014760 	.word	0x20014760
    494c:	200055ac 	.word	0x200055ac
    4950:	200050dc 	.word	0x200050dc
    4954:	42fe0000 	.word	0x42fe0000
    4958:	20005608 	.word	0x20005608
    495c:	20019950 	.word	0x20019950
    4960:	2001994c 	.word	0x2001994c
    4964:	20014858 	.word	0x20014858
    4968:	20014850 	.word	0x20014850
    496c:	2001488c 	.word	0x2001488c
    4970:	200050d8 	.word	0x200050d8
    4974:	20014880 	.word	0x20014880
    4978:	20005344 	.word	0x20005344
    497c:	20005348 	.word	0x20005348
    4980:	20014890 	.word	0x20014890
    4984:	200148a0 	.word	0x200148a0
    4988:	200055a8 	.word	0x200055a8
    498c:	20014898 	.word	0x20014898
    4990:	2000002c 	.word	0x2000002c
    4994:	20014884 	.word	0x20014884
    4998:	20016cd9 	.word	0x20016cd9
    499c:	2000002d 	.word	0x2000002d
    49a0:	20005160 	.word	0x20005160
    49a4:	20005180 	.word	0x20005180
    49a8:	200050c8 	.word	0x200050c8
    49ac:	2001489c 	.word	0x2001489c
    49b0:	200052c0 	.word	0x200052c0
    49b4:	20000015 	.word	0x20000015
    49b8:	200053a8 	.word	0x200053a8
    49bc:	20014bac 	.word	0x20014bac
    49c0:	b933      	cbnz	r3, 49d0 <audioTickSynth+0x3b0>
			sample *= amplitude[v];
    49c2:	69fb      	ldr	r3, [r7, #28]
    49c4:	edd3 7a00 	vldr	s15, [r3]
    49c8:	ee28 8a27 	vmul.f32	s16, s16, s15
    49cc:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
	for (int v = 0; v < numStringsThisBoard; v++)
    49d0:	69fb      	ldr	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    49d2:	eeb0 0a48 	vmov.f32	s0, s16
    49d6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	for (int v = 0; v < numStringsThisBoard; v++)
    49d8:	f10a 0a01 	add.w	sl, sl, #1
    49dc:	3304      	adds	r3, #4
    49de:	61fb      	str	r3, [r7, #28]
    49e0:	6a3b      	ldr	r3, [r7, #32]
    49e2:	3304      	adds	r3, #4
    49e4:	623b      	str	r3, [r7, #32]
    49e6:	69bb      	ldr	r3, [r7, #24]
    49e8:	3304      	adds	r3, #4
    49ea:	61bb      	str	r3, [r7, #24]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    49ec:	4b7f      	ldr	r3, [pc, #508]	; (4bec <audioTickSynth+0x5cc>)
    49ee:	1918      	adds	r0, r3, r4
    49f0:	f005 fc8a 	bl	a308 <__tSVF_tick_veneer>
		masterSample += sample * finalMaster[v];
    49f4:	4b7e      	ldr	r3, [pc, #504]	; (4bf0 <audioTickSynth+0x5d0>)
    49f6:	ed93 7a00 	vldr	s14, [r3]
    49fa:	4b7e      	ldr	r3, [pc, #504]	; (4bf4 <audioTickSynth+0x5d4>)
    49fc:	4423      	add	r3, r4
    49fe:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
    4a02:	1d23      	adds	r3, r4, #4
    4a04:	62fb      	str	r3, [r7, #44]	; 0x2c
		masterSample += sample * finalMaster[v];
    4a06:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int v = 0; v < numStringsThisBoard; v++)
    4a0a:	f89b 3000 	ldrb.w	r3, [fp]
    4a0e:	4553      	cmp	r3, sl
		masterSample += sample * finalMaster[v];
    4a10:	eea0 9a27 	vfma.f32	s18, s0, s15
	for (int v = 0; v < numStringsThisBoard; v++)
    4a14:	f73f ae7b 	bgt.w	470e <audioTickSynth+0xee>
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    4a18:	ed9f 0a77 	vldr	s0, [pc, #476]	; 4bf8 <audioTickSynth+0x5d8>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    4a1c:	4b77      	ldr	r3, [pc, #476]	; (4bfc <audioTickSynth+0x5dc>)
    4a1e:	6879      	ldr	r1, [r7, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    4a20:	eef0 0a40 	vmov.f32	s1, s0
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    4a24:	685b      	ldr	r3, [r3, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    4a26:	eddf 7a76 	vldr	s15, [pc, #472]	; 4c00 <audioTickSynth+0x5e0>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    4a2a:	1a5b      	subs	r3, r3, r1
    4a2c:	4a75      	ldr	r2, [pc, #468]	; (4c04 <audioTickSynth+0x5e4>)
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    4a2e:	eee8 0aa7 	vfma.f32	s1, s17, s15
    4a32:	ed9f 1a75 	vldr	s2, [pc, #468]	; 4c08 <audioTickSynth+0x5e8>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    4a36:	6013      	str	r3, [r2, #0]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    4a38:	f004 f8d2 	bl	8be0 <LEAF_clip>
	int volIdxInt = (int) volIdx;
    4a3c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	if (pedalControlsMaster)
    4a40:	4a72      	ldr	r2, [pc, #456]	; (4c0c <audioTickSynth+0x5ec>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    4a42:	4b73      	ldr	r3, [pc, #460]	; (4c10 <audioTickSynth+0x5f0>)
	if (pedalControlsMaster)
    4a44:	7810      	ldrb	r0, [r2, #0]
	int volIdxInt = (int) volIdx;
    4a46:	ee17 2a90 	vmov	r2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    4a4a:	1c51      	adds	r1, r2, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    4a4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    4a50:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    4a54:	ed94 6a00 	vldr	s12, [r4]
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    4a58:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4a5c:	edd3 6a00 	vldr	s13, [r3]
	if (pedalControlsMaster)
    4a60:	b178      	cbz	r0, 4a82 <audioTickSynth+0x462>
	float omAlpha = 1.0f - alpha;
    4a62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float alpha = volIdx-volIdxInt;
    4a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float omAlpha = 1.0f - alpha;
    4a6a:	ee37 7a40 	vsub.f32	s14, s14, s0
	float alpha = volIdx-volIdxInt;
    4a6e:	ee30 0a67 	vsub.f32	s0, s0, s15
	float omAlpha = 1.0f - alpha;
    4a72:	ee77 7a27 	vadd.f32	s15, s14, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    4a76:	ee67 7a86 	vmul.f32	s15, s15, s12
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    4a7a:	eee6 7a80 	vfma.f32	s15, s13, s0
		masterSample *= outVol;
    4a7e:	ee29 9a27 	vmul.f32	s18, s18, s15
	if (masterSample  > .999999f)
    4a82:	eddf 7a64 	vldr	s15, [pc, #400]	; 4c14 <audioTickSynth+0x5f4>
    4a86:	eeb4 9ae7 	vcmpe.f32	s18, s15
    4a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4a8e:	f340 8094 	ble.w	4bba <audioTickSynth+0x59a>
		masterSample  = .999999f;
    4a92:	eeb0 9a67 	vmov.f32	s18, s15
		sampleClippedCountdown = 65535;
    4a96:	4b60      	ldr	r3, [pc, #384]	; (4c18 <audioTickSynth+0x5f8>)
    4a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4a9c:	801a      	strh	r2, [r3, #0]
	return masterSample * audioMasterLevel * 0.98f;
    4a9e:	495f      	ldr	r1, [pc, #380]	; (4c1c <audioTickSynth+0x5fc>)
	timeTick = DWT->CYCCNT - tempCountTick;
    4aa0:	4b56      	ldr	r3, [pc, #344]	; (4bfc <audioTickSynth+0x5dc>)
	return masterSample * audioMasterLevel * 0.98f;
    4aa2:	eddf 7a5f 	vldr	s15, [pc, #380]	; 4c20 <audioTickSynth+0x600>
	timeTick = DWT->CYCCNT - tempCountTick;
    4aa6:	685b      	ldr	r3, [r3, #4]
	return masterSample * audioMasterLevel * 0.98f;
    4aa8:	ed91 0a00 	vldr	s0, [r1]
	timeTick = DWT->CYCCNT - tempCountTick;
    4aac:	68b9      	ldr	r1, [r7, #8]
}
    4aae:	3744      	adds	r7, #68	; 0x44
	return masterSample * audioMasterLevel * 0.98f;
    4ab0:	ee20 0a27 	vmul.f32	s0, s0, s15
	timeTick = DWT->CYCCNT - tempCountTick;
    4ab4:	4a5b      	ldr	r2, [pc, #364]	; (4c24 <audioTickSynth+0x604>)
    4ab6:	1a5b      	subs	r3, r3, r1
	return masterSample * audioMasterLevel * 0.98f;
    4ab8:	ee20 0a09 	vmul.f32	s0, s0, s18
	timeTick = DWT->CYCCNT - tempCountTick;
    4abc:	6013      	str	r3, [r2, #0]
}
    4abe:	46bd      	mov	sp, r7
    4ac0:	ecbd 8b06 	vpop	{d8-d10}
    4ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			note[v] = 0.0f;
    4ac8:	eeb0 8a69 	vmov.f32	s16, s19
    4acc:	ed43 9a01 	vstr	s19, [r3, #-4]
		if (note[v] > 127.0f)
    4ad0:	e64b      	b.n	476a <audioTickSynth+0x14a>
			noise_tick(v);
    4ad2:	4650      	mov	r0, sl
    4ad4:	f7ff fd44 	bl	4560 <noise_tick>
    4ad8:	e69d      	b.n	4816 <audioTickSynth+0x1f6>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    4ada:	6a3b      	ldr	r3, [r7, #32]
    4adc:	f103 0018 	add.w	r0, r3, #24
    4ae0:	f003 fede 	bl	88a0 <tADSRT_tickNoInterp>
    4ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ae6:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    4aea:	e65b      	b.n	47a4 <audioTickSynth+0x184>
    4aec:	6a3b      	ldr	r3, [r7, #32]
    4aee:	f103 0010 	add.w	r0, r3, #16
    4af2:	f003 fed5 	bl	88a0 <tADSRT_tickNoInterp>
    4af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4af8:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    4afc:	e64d      	b.n	479a <audioTickSynth+0x17a>
    4afe:	6a3b      	ldr	r3, [r7, #32]
    4b00:	f103 0008 	add.w	r0, r3, #8
    4b04:	f003 fecc 	bl	88a0 <tADSRT_tickNoInterp>
    4b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b0a:	ed83 0a07 	vstr	s0, [r3, #28]
    4b0e:	e63f      	b.n	4790 <audioTickSynth+0x170>
    4b10:	6a38      	ldr	r0, [r7, #32]
    4b12:	f003 fec5 	bl	88a0 <tADSRT_tickNoInterp>
    4b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b18:	ed83 0a05 	vstr	s0, [r3, #20]
    4b1c:	e633      	b.n	4786 <audioTickSynth+0x166>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    4b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4b20:	f107 0134 	add.w	r1, r7, #52	; 0x34
    4b24:	4840      	ldr	r0, [pc, #256]	; (4c28 <audioTickSynth+0x608>)
			for (int i = 0; i < 4; i++)
    4b26:	2400      	movs	r4, #0
    4b28:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    4b2c:	f8df 8120 	ldr.w	r8, [pc, #288]	; 4c50 <audioTickSynth+0x630>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    4b30:	4410      	add	r0, r2
    4b32:	603a      	str	r2, [r7, #0]
    4b34:	4a3d      	ldr	r2, [pc, #244]	; (4c2c <audioTickSynth+0x60c>)
    4b36:	18d6      	adds	r6, r2, r3
    4b38:	4a3d      	ldr	r2, [pc, #244]	; (4c30 <audioTickSynth+0x610>)
    4b3a:	18d5      	adds	r5, r2, r3
    4b3c:	2301      	movs	r3, #1
    4b3e:	4a3d      	ldr	r2, [pc, #244]	; (4c34 <audioTickSynth+0x614>)
    4b40:	f005 fb8e 	bl	a260 <__arm_fir_interpolate_f32_veneer>
    4b44:	4651      	mov	r1, sl
    4b46:	46aa      	mov	sl, r5
				if (effectsActive[i])
    4b48:	f818 3b01 	ldrb.w	r3, [r8], #1
    4b4c:	b993      	cbnz	r3, 4b74 <audioTickSynth+0x554>
			for (int i = 0; i < 4; i++)
    4b4e:	3401      	adds	r4, #1
    4b50:	3608      	adds	r6, #8
    4b52:	f10a 0a08 	add.w	sl, sl, #8
    4b56:	2c04      	cmp	r4, #4
    4b58:	d1f6      	bne.n	4b48 <audioTickSynth+0x528>
			arm_fir_decimate_f32(&osD[v], (float*)&oversamplerArray, &sample, 2);
    4b5a:	683b      	ldr	r3, [r7, #0]
    4b5c:	468a      	mov	sl, r1
    4b5e:	4836      	ldr	r0, [pc, #216]	; (4c38 <audioTickSynth+0x618>)
    4b60:	f107 0234 	add.w	r2, r7, #52	; 0x34
    4b64:	4933      	ldr	r1, [pc, #204]	; (4c34 <audioTickSynth+0x614>)
    4b66:	4418      	add	r0, r3
    4b68:	2302      	movs	r3, #2
    4b6a:	f005 fbb1 	bl	a2d0 <__arm_fir_decimate_f32_veneer>
			sample *= amplitude[v];
    4b6e:	ed97 8a0d 	vldr	s16, [r7, #52]	; 0x34
    4b72:	e6cc      	b.n	490e <audioTickSynth+0x2ee>
    4b74:	4d2f      	ldr	r5, [pc, #188]	; (4c34 <audioTickSynth+0x614>)
						float dry = oversamplerArray[j]; //store the dry value to mix later
    4b76:	ed95 8a00 	vldr	s16, [r5]
						oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
    4b7a:	4620      	mov	r0, r4
    4b7c:	4b2f      	ldr	r3, [pc, #188]	; (4c3c <audioTickSynth+0x61c>)
    4b7e:	eeb0 0a48 	vmov.f32	s0, s16
    4b82:	60f9      	str	r1, [r7, #12]
    4b84:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    4b88:	4798      	blx	r3
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    4b8a:	edd6 7a00 	vldr	s15, [r6]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    4b8e:	ed9a 7a00 	vldr	s14, [sl]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    4b92:	ee20 0a27 	vmul.f32	s0, s0, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    4b96:	4b2a      	ldr	r3, [pc, #168]	; (4c40 <audioTickSynth+0x620>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    4b98:	ee7a 7ae7 	vsub.f32	s15, s21, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    4b9c:	68f9      	ldr	r1, [r7, #12]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    4b9e:	eea7 0a88 	vfma.f32	s0, s15, s16
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    4ba2:	ee67 7a00 	vmul.f32	s15, s14, s0
    4ba6:	ece5 7a01 	vstmia	r5!, {s15}
					for (int j = 0; j < OVERSAMPLE; j++)
    4baa:	429d      	cmp	r5, r3
    4bac:	d1e3      	bne.n	4b76 <audioTickSynth+0x556>
    4bae:	e7ce      	b.n	4b4e <audioTickSynth+0x52e>
		for (int i = 0; i < oscToTick; i++)
    4bb0:	eddf 7a24 	vldr	s15, [pc, #144]	; 4c44 <audioTickSynth+0x624>
    4bb4:	eeb0 6a67 	vmov.f32	s12, s15
    4bb8:	e650      	b.n	485c <audioTickSynth+0x23c>
	else if (masterSample < -.999999f)
    4bba:	eddf 7a23 	vldr	s15, [pc, #140]	; 4c48 <audioTickSynth+0x628>
    4bbe:	eeb4 9ae7 	vcmpe.f32	s18, s15
    4bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4bc6:	d506      	bpl.n	4bd6 <audioTickSynth+0x5b6>
		sampleClippedCountdown = 65535;
    4bc8:	4b13      	ldr	r3, [pc, #76]	; (4c18 <audioTickSynth+0x5f8>)
    4bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
		masterSample = -.9999999f;
    4bce:	ed9f 9a1f 	vldr	s18, [pc, #124]	; 4c4c <audioTickSynth+0x62c>
		sampleClippedCountdown = 65535;
    4bd2:	801a      	strh	r2, [r3, #0]
    4bd4:	e763      	b.n	4a9e <audioTickSynth+0x47e>
		if (sampleClippedCountdown > 0)
    4bd6:	4a10      	ldr	r2, [pc, #64]	; (4c18 <audioTickSynth+0x5f8>)
    4bd8:	8813      	ldrh	r3, [r2, #0]
    4bda:	b29b      	uxth	r3, r3
    4bdc:	2b00      	cmp	r3, #0
    4bde:	f43f af5e 	beq.w	4a9e <audioTickSynth+0x47e>
			sampleClippedCountdown--;
    4be2:	8813      	ldrh	r3, [r2, #0]
    4be4:	3b01      	subs	r3, #1
    4be6:	b29b      	uxth	r3, r3
    4be8:	8013      	strh	r3, [r2, #0]
    4bea:	e758      	b.n	4a9e <audioTickSynth+0x47e>
    4bec:	2000512c 	.word	0x2000512c
    4bf0:	20000010 	.word	0x20000010
    4bf4:	20005134 	.word	0x20005134
    4bf8:	423c0000 	.word	0x423c0000
    4bfc:	e0001000 	.word	0xe0001000
    4c00:	42a00000 	.word	0x42a00000
    4c04:	200148a4 	.word	0x200148a4
    4c08:	42fe0000 	.word	0x42fe0000
    4c0c:	2001aa78 	.word	0x2001aa78
    4c10:	2000053c 	.word	0x2000053c
    4c14:	3f7fffef 	.word	0x3f7fffef
    4c18:	20005b88 	.word	0x20005b88
    4c1c:	2000073c 	.word	0x2000073c
    4c20:	3f7ae148 	.word	0x3f7ae148
    4c24:	200148ac 	.word	0x200148ac
    4c28:	200055ec 	.word	0x200055ec
    4c2c:	20005160 	.word	0x20005160
    4c30:	20005180 	.word	0x20005180
    4c34:	20005638 	.word	0x20005638
    4c38:	200055d4 	.word	0x200055d4
    4c3c:	200050c8 	.word	0x200050c8
    4c40:	20005640 	.word	0x20005640
    4c44:	00000000 	.word	0x00000000
    4c48:	bf7fffef 	.word	0xbf7fffef
    4c4c:	bf7ffffe 	.word	0xbf7ffffe
    4c50:	20014bac 	.word	0x20014bac
    4c54:	f3af 8000 	nop.w
    4c58:	f3af 8000 	nop.w
    4c5c:	f3af 8000 	nop.w

00004c60 <audioFrameSynth>:
{
    4c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c64:	4603      	mov	r3, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    4c66:	2201      	movs	r2, #1
    4c68:	2108      	movs	r1, #8
    4c6a:	48a4      	ldr	r0, [pc, #656]	; (4efc <audioFrameSynth+0x29c>)
	if (resetStringInputs)
    4c6c:	f8df 92f8 	ldr.w	r9, [pc, #760]	; 4f68 <audioFrameSynth+0x308>
{
    4c70:	ed2d 8b04 	vpush	{d8-d9}
    4c74:	b087      	sub	sp, #28
    4c76:	9302      	str	r3, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
    4c78:	f005 fbce 	bl	a418 <__HAL_GPIO_WritePin_veneer>
	uint32_t tempCountFrame = DWT->CYCCNT;
    4c7c:	4ba0      	ldr	r3, [pc, #640]	; (4f00 <audioFrameSynth+0x2a0>)
    4c7e:	685b      	ldr	r3, [r3, #4]
    4c80:	9301      	str	r3, [sp, #4]
	if (resetStringInputs)
    4c82:	f899 3000 	ldrb.w	r3, [r9]
    4c86:	b1cb      	cbz	r3, 4cbc <audioFrameSynth+0x5c>
		for (int i = 0; i < numStringsThisBoard; i++)
    4c88:	4e9e      	ldr	r6, [pc, #632]	; (4f04 <audioFrameSynth+0x2a4>)
    4c8a:	7833      	ldrb	r3, [r6, #0]
    4c8c:	b19b      	cbz	r3, 4cb6 <audioFrameSynth+0x56>
    4c8e:	2500      	movs	r5, #0
    4c90:	4f9d      	ldr	r7, [pc, #628]	; (4f08 <audioFrameSynth+0x2a8>)
    4c92:	4c9e      	ldr	r4, [pc, #632]	; (4f0c <audioFrameSynth+0x2ac>)
				previousStringInputs[i] = 0;
    4c94:	46a8      	mov	r8, r5
    4c96:	f1a7 0a20 	sub.w	sl, r7, #32
				tADSRT_clear(&envs[v][i]);
    4c9a:	4650      	mov	r0, sl
			for (int v = 0; v < NUM_ENV; v++)
    4c9c:	f10a 0a08 	add.w	sl, sl, #8
				tADSRT_clear(&envs[v][i]);
    4ca0:	f003 fc7e 	bl	85a0 <tADSRT_clear>
				previousStringInputs[i] = 0;
    4ca4:	f824 8015 	strh.w	r8, [r4, r5, lsl #1]
			for (int v = 0; v < NUM_ENV; v++)
    4ca8:	45ba      	cmp	sl, r7
    4caa:	d1f6      	bne.n	4c9a <audioFrameSynth+0x3a>
		for (int i = 0; i < numStringsThisBoard; i++)
    4cac:	3501      	adds	r5, #1
    4cae:	7833      	ldrb	r3, [r6, #0]
    4cb0:	3704      	adds	r7, #4
    4cb2:	42ab      	cmp	r3, r5
    4cb4:	dcef      	bgt.n	4c96 <audioFrameSynth+0x36>
		resetStringInputs = 0;
    4cb6:	2300      	movs	r3, #0
    4cb8:	f889 3000 	strb.w	r3, [r9]
	if (newPluck)
    4cbc:	4b94      	ldr	r3, [pc, #592]	; (4f10 <audioFrameSynth+0x2b0>)
    4cbe:	681b      	ldr	r3, [r3, #0]
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d036      	beq.n	4d32 <audioFrameSynth+0xd2>
		for (int i = 0; i < numStringsThisBoard; i++)
    4cc4:	4e8f      	ldr	r6, [pc, #572]	; (4f04 <audioFrameSynth+0x2a4>)
    4cc6:	7833      	ldrb	r3, [r6, #0]
    4cc8:	b383      	cbz	r3, 4d2c <audioFrameSynth+0xcc>
    4cca:	4a92      	ldr	r2, [pc, #584]	; (4f14 <audioFrameSynth+0x2b4>)
    4ccc:	2500      	movs	r5, #0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4cce:	eddf 8a92 	vldr	s17, [pc, #584]	; 4f18 <audioFrameSynth+0x2b8>
    4cd2:	f8df 9298 	ldr.w	r9, [pc, #664]	; 4f6c <audioFrameSynth+0x30c>
    4cd6:	4692      	mov	sl, r2
    4cd8:	4f90      	ldr	r7, [pc, #576]	; (4f1c <audioFrameSynth+0x2bc>)
    4cda:	f8df 8294 	ldr.w	r8, [pc, #660]	; 4f70 <audioFrameSynth+0x310>
    4cde:	4c8b      	ldr	r4, [pc, #556]	; (4f0c <audioFrameSynth+0x2ac>)
    4ce0:	9603      	str	r6, [sp, #12]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    4ce2:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    4ce6:	b292      	uxth	r2, r2
    4ce8:	b92a      	cbnz	r2, 4cf6 <audioFrameSynth+0x96>
    4cea:	4a8d      	ldr	r2, [pc, #564]	; (4f20 <audioFrameSynth+0x2c0>)
    4cec:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    4cf0:	b292      	uxth	r2, r2
    4cf2:	2a00      	cmp	r2, #0
    4cf4:	d16f      	bne.n	4dd6 <audioFrameSynth+0x176>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    4cf6:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    4cfa:	b292      	uxth	r2, r2
    4cfc:	b132      	cbz	r2, 4d0c <audioFrameSynth+0xac>
    4cfe:	4a88      	ldr	r2, [pc, #544]	; (4f20 <audioFrameSynth+0x2c0>)
    4d00:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    4d04:	b292      	uxth	r2, r2
    4d06:	2a00      	cmp	r2, #0
    4d08:	f000 80d5 	beq.w	4eb6 <audioFrameSynth+0x256>
			previousStringInputs[i] = stringInputs[i];
    4d0c:	4a84      	ldr	r2, [pc, #528]	; (4f20 <audioFrameSynth+0x2c0>)
		for (int i = 0; i < numStringsThisBoard; i++)
    4d0e:	f109 0904 	add.w	r9, r9, #4
    4d12:	3704      	adds	r7, #4
    4d14:	f108 0804 	add.w	r8, r8, #4
			previousStringInputs[i] = stringInputs[i];
    4d18:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    4d1c:	f10a 0a04 	add.w	sl, sl, #4
			previousStringInputs[i] = stringInputs[i];
    4d20:	b292      	uxth	r2, r2
    4d22:	f824 2015 	strh.w	r2, [r4, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    4d26:	3501      	adds	r5, #1
    4d28:	42ab      	cmp	r3, r5
    4d2a:	dcda      	bgt.n	4ce2 <audioFrameSynth+0x82>
		newPluck = 0;
    4d2c:	2300      	movs	r3, #0
    4d2e:	4a78      	ldr	r2, [pc, #480]	; (4f10 <audioFrameSynth+0x2b0>)
    4d30:	6013      	str	r3, [r2, #0]
    4d32:	4d7c      	ldr	r5, [pc, #496]	; (4f24 <audioFrameSynth+0x2c4>)
				for (int v = 0; v < NUM_ENV; v++)
    4d34:	2400      	movs	r4, #0
    4d36:	9b02      	ldr	r3, [sp, #8]
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    4d38:	ed9f 8a7b 	vldr	s16, [pc, #492]	; 4f28 <audioFrameSynth+0x2c8>
    4d3c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4d40:	f7ff fc6e 	bl	4620 <audioTickSynth>
    4d44:	ee20 0a08 	vmul.f32	s0, s0, s16
    4d48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    4d4c:	ee10 3a10 	vmov	r3, s0
    4d50:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    4d54:	3402      	adds	r4, #2
    4d56:	2c80      	cmp	r4, #128	; 0x80
    4d58:	d1f2      	bne.n	4d40 <audioFrameSynth+0xe0>
	if (switchStrings)
    4d5a:	4c74      	ldr	r4, [pc, #464]	; (4f2c <audioFrameSynth+0x2cc>)
    4d5c:	6823      	ldr	r3, [r4, #0]
    4d5e:	2b00      	cmp	r3, #0
    4d60:	d133      	bne.n	4dca <audioFrameSynth+0x16a>
	switchStrings = 0;
    4d62:	2200      	movs	r2, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    4d64:	4b66      	ldr	r3, [pc, #408]	; (4f00 <audioFrameSynth+0x2a0>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4d66:	4972      	ldr	r1, [pc, #456]	; (4f30 <audioFrameSynth+0x2d0>)
	switchStrings = 0;
    4d68:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    4d6a:	9c01      	ldr	r4, [sp, #4]
    4d6c:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4d6e:	edd1 6a00 	vldr	s13, [r1]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    4d72:	1b1b      	subs	r3, r3, r4
	if (frameLoadPercentage > .99f)
    4d74:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 4f34 <audioFrameSynth+0x2d4>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    4d78:	486f      	ldr	r0, [pc, #444]	; (4f38 <audioFrameSynth+0x2d8>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4d7a:	ee07 3a90 	vmov	s15, r3
    4d7e:	496f      	ldr	r1, [pc, #444]	; (4f3c <audioFrameSynth+0x2dc>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    4d80:	6003      	str	r3, [r0, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
    4d86:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (frameLoadPercentage > .99f)
    4d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4d8e:	edc1 7a00 	vstr	s15, [r1]
	if (frameLoadPercentage > .99f)
    4d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d96:	dd0e      	ble.n	4db6 <audioFrameSynth+0x156>
		frameLoadOverCount++;
    4d98:	4969      	ldr	r1, [pc, #420]	; (4f40 <audioFrameSynth+0x2e0>)
    4d9a:	680b      	ldr	r3, [r1, #0]
    4d9c:	3301      	adds	r3, #1
		if (frameLoadOverCount > 3)
    4d9e:	2b03      	cmp	r3, #3
		frameLoadOverCount++;
    4da0:	600b      	str	r3, [r1, #0]
		if (frameLoadOverCount > 3)
    4da2:	d908      	bls.n	4db6 <audioFrameSynth+0x156>
			if (overSampled == 1)
    4da4:	4b67      	ldr	r3, [pc, #412]	; (4f44 <audioFrameSynth+0x2e4>)
    4da6:	7819      	ldrb	r1, [r3, #0]
    4da8:	2901      	cmp	r1, #1
    4daa:	d012      	beq.n	4dd2 <audioFrameSynth+0x172>
			else if (oscToTick > 0)
    4dac:	4a66      	ldr	r2, [pc, #408]	; (4f48 <audioFrameSynth+0x2e8>)
    4dae:	7813      	ldrb	r3, [r2, #0]
    4db0:	b10b      	cbz	r3, 4db6 <audioFrameSynth+0x156>
				oscToTick--;
    4db2:	3b01      	subs	r3, #1
    4db4:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    4db6:	2200      	movs	r2, #0
    4db8:	2108      	movs	r1, #8
    4dba:	4850      	ldr	r0, [pc, #320]	; (4efc <audioFrameSynth+0x29c>)
}
    4dbc:	b007      	add	sp, #28
    4dbe:	ecbd 8b04 	vpop	{d8-d9}
    4dc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
    4dc6:	f005 bb27 	b.w	a418 <__HAL_GPIO_WritePin_veneer>
		switchStringModel(switchStrings);
    4dca:	6820      	ldr	r0, [r4, #0]
    4dcc:	f7fb fc38 	bl	640 <switchStringModel>
    4dd0:	e7c7      	b.n	4d62 <audioFrameSynth+0x102>
				overSampled = 0;
    4dd2:	701a      	strb	r2, [r3, #0]
    4dd4:	e7ef      	b.n	4db6 <audioFrameSynth+0x156>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4dd6:	4b52      	ldr	r3, [pc, #328]	; (4f20 <audioFrameSynth+0x2c0>)
    4dd8:	f5a8 7213 	sub.w	r2, r8, #588	; 0x24c
    4ddc:	4e5b      	ldr	r6, [pc, #364]	; (4f4c <audioFrameSynth+0x2ec>)
						if (useVelocity == 0) envVel = 1.f;
    4dde:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4de2:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    4de6:	f106 0b04 	add.w	fp, r6, #4
						voiceSounding = 1;
    4dea:	9504      	str	r5, [sp, #16]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4dec:	b29b      	uxth	r3, r3
						voiceSounding = 1;
    4dee:	4635      	mov	r5, r6
    4df0:	9405      	str	r4, [sp, #20]
    4df2:	463e      	mov	r6, r7
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4df4:	ee08 3a10 	vmov	s16, r3
				stringOctave[i] = octave;
    4df8:	4b55      	ldr	r3, [pc, #340]	; (4f50 <audioFrameSynth+0x2f0>)
						voiceSounding = 1;
    4dfa:	4614      	mov	r4, r2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4dfc:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				stringOctave[i] = octave;
    4e00:	681b      	ldr	r3, [r3, #0]
    4e02:	f8ca 3000 	str.w	r3, [sl]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4e06:	ee28 8a28 	vmul.f32	s16, s16, s17
					if (envOn[v])
    4e0a:	f815 1b01 	ldrb.w	r1, [r5], #1
						tADSRT_on(&envs[v][i], envVel);
    4e0e:	4630      	mov	r0, r6
					if (envOn[v])
    4e10:	b161      	cbz	r1, 4e2c <audioFrameSynth+0x1cc>
						if (useVelocity == 0) envVel = 1.f;
    4e12:	edd4 7a00 	vldr	s15, [r4]
    4e16:	eef5 7a40 	vcmp.f32	s15, #0.0
    4e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						tADSRT_on(&envs[v][i], envVel);
    4e1e:	fe09 0a08 	vseleq.f32	s0, s18, s16
    4e22:	f003 fb8d 	bl	8540 <tADSRT_on>
						voiceSounding = 1;
    4e26:	2101      	movs	r1, #1
    4e28:	4b4a      	ldr	r3, [pc, #296]	; (4f54 <audioFrameSynth+0x2f4>)
    4e2a:	7019      	strb	r1, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    4e2c:	45ab      	cmp	fp, r5
    4e2e:	f106 0608 	add.w	r6, r6, #8
    4e32:	f104 04a8 	add.w	r4, r4, #168	; 0xa8
    4e36:	d1e8      	bne.n	4e0a <audioFrameSynth+0x1aa>
						if (noteOnSync > 0.5f)
    4e38:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				for (int v = 0; v < NUM_ENV; v++)
    4e3c:	46c3      	mov	fp, r8
    4e3e:	4e46      	ldr	r6, [pc, #280]	; (4f58 <audioFrameSynth+0x2f8>)
						if (noteOnSync > 0.5f)
    4e40:	e9dd 5404 	ldrd	r5, r4, [sp, #16]
    4e44:	ebc5 7285 	rsb	r2, r5, r5, lsl #30
				for (int v = 0; v < NUM_ENV; v++)
    4e48:	4629      	mov	r1, r5
    4e4a:	4625      	mov	r5, r4
    4e4c:	0092      	lsls	r2, r2, #2
    4e4e:	320c      	adds	r2, #12
    4e50:	4614      	mov	r4, r2
						if (noteOnSync > 0.5f)
    4e52:	4b41      	ldr	r3, [pc, #260]	; (4f58 <audioFrameSynth+0x2f8>)
    4e54:	1af0      	subs	r0, r6, r3
					if (lfoOn[v])
    4e56:	f816 3b01 	ldrb.w	r3, [r6], #1
    4e5a:	b16b      	cbz	r3, 4e78 <audioFrameSynth+0x218>
						if (noteOnSync > 0.5f)
    4e5c:	eddb 7a0e 	vldr	s15, [fp, #56]	; 0x38
    4e60:	eef4 7ac9 	vcmpe.f32	s15, s18
    4e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e68:	dd06      	ble.n	4e78 <audioFrameSynth+0x218>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    4e6a:	ed9b 0a00 	vldr	s0, [fp]
    4e6e:	f85b 3004 	ldr.w	r3, [fp, r4]
    4e72:	9104      	str	r1, [sp, #16]
    4e74:	4798      	blx	r3
    4e76:	9904      	ldr	r1, [sp, #16]
				for (int v = 0; v < NUM_LFOS; v++)
    4e78:	4b38      	ldr	r3, [pc, #224]	; (4f5c <audioFrameSynth+0x2fc>)
    4e7a:	f10b 0b8c 	add.w	fp, fp, #140	; 0x8c
    4e7e:	42b3      	cmp	r3, r6
    4e80:	d1e7      	bne.n	4e52 <audioFrameSynth+0x1f2>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    4e82:	4837      	ldr	r0, [pc, #220]	; (4f60 <audioFrameSynth+0x300>)
    4e84:	462c      	mov	r4, r5
    4e86:	460d      	mov	r5, r1
    4e88:	4936      	ldr	r1, [pc, #216]	; (4f64 <audioFrameSynth+0x304>)
    4e8a:	7802      	ldrb	r2, [r0, #0]
    4e8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    4e90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
		for (int i = 0; i < numStringsThisBoard; i++)
    4e94:	9b03      	ldr	r3, [sp, #12]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    4e96:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    4e9a:	3201      	adds	r2, #1
		for (int i = 0; i < numStringsThisBoard; i++)
    4e9c:	781b      	ldrb	r3, [r3, #0]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    4e9e:	edd1 7a00 	vldr	s15, [r1]
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    4ea2:	ed89 8a00 	vstr	s16, [r9]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    4ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
    4eaa:	7002      	strb	r2, [r0, #0]
    4eac:	ee67 7a87 	vmul.f32	s15, s15, s14
    4eb0:	edc9 7a02 	vstr	s15, [r9, #8]
			{
    4eb4:	e72a      	b.n	4d0c <audioFrameSynth+0xac>
					if (envOn[v])
    4eb6:	4b25      	ldr	r3, [pc, #148]	; (4f4c <audioFrameSynth+0x2ec>)
    4eb8:	781b      	ldrb	r3, [r3, #0]
    4eba:	b95b      	cbnz	r3, 4ed4 <audioFrameSynth+0x274>
    4ebc:	4b23      	ldr	r3, [pc, #140]	; (4f4c <audioFrameSynth+0x2ec>)
    4ebe:	785b      	ldrb	r3, [r3, #1]
    4ec0:	b9b3      	cbnz	r3, 4ef0 <audioFrameSynth+0x290>
    4ec2:	4b22      	ldr	r3, [pc, #136]	; (4f4c <audioFrameSynth+0x2ec>)
    4ec4:	789b      	ldrb	r3, [r3, #2]
    4ec6:	b973      	cbnz	r3, 4ee6 <audioFrameSynth+0x286>
    4ec8:	4b20      	ldr	r3, [pc, #128]	; (4f4c <audioFrameSynth+0x2ec>)
    4eca:	78db      	ldrb	r3, [r3, #3]
    4ecc:	b933      	cbnz	r3, 4edc <audioFrameSynth+0x27c>
		for (int i = 0; i < numStringsThisBoard; i++)
    4ece:	9b03      	ldr	r3, [sp, #12]
    4ed0:	781b      	ldrb	r3, [r3, #0]
    4ed2:	e71b      	b.n	4d0c <audioFrameSynth+0xac>
						tADSRT_off(&envs[v][i]);
    4ed4:	4638      	mov	r0, r7
    4ed6:	f003 fb53 	bl	8580 <tADSRT_off>
    4eda:	e7ef      	b.n	4ebc <audioFrameSynth+0x25c>
    4edc:	f107 0018 	add.w	r0, r7, #24
    4ee0:	f003 fb4e 	bl	8580 <tADSRT_off>
    4ee4:	e7f3      	b.n	4ece <audioFrameSynth+0x26e>
    4ee6:	f107 0010 	add.w	r0, r7, #16
    4eea:	f003 fb49 	bl	8580 <tADSRT_off>
    4eee:	e7eb      	b.n	4ec8 <audioFrameSynth+0x268>
    4ef0:	f107 0008 	add.w	r0, r7, #8
    4ef4:	f003 fb44 	bl	8580 <tADSRT_off>
    4ef8:	e7e3      	b.n	4ec2 <audioFrameSynth+0x262>
    4efa:	bf00      	nop
    4efc:	58020000 	.word	0x58020000
    4f00:	e0001000 	.word	0xe0001000
    4f04:	20000015 	.word	0x20000015
    4f08:	200050fc 	.word	0x200050fc
    4f0c:	20005754 	.word	0x20005754
    4f10:	20005594 	.word	0x20005594
    4f14:	20014858 	.word	0x20014858
    4f18:	37800080 	.word	0x37800080
    4f1c:	200050dc 	.word	0x200050dc
    4f20:	20014838 	.word	0x20014838
    4f24:	30000000 	.word	0x30000000
    4f28:	4b000000 	.word	0x4b000000
    4f2c:	20014878 	.word	0x20014878
    4f30:	20000004 	.word	0x20000004
    4f34:	3f7d70a4 	.word	0x3f7d70a4
    4f38:	20014888 	.word	0x20014888
    4f3c:	20005144 	.word	0x20005144
    4f40:	20005140 	.word	0x20005140
    4f44:	2000002d 	.word	0x2000002d
    4f48:	2000002c 	.word	0x2000002c
    4f4c:	200050d8 	.word	0x200050d8
    4f50:	200055cc 	.word	0x200055cc
    4f54:	20014900 	.word	0x20014900
    4f58:	20005344 	.word	0x20005344
    4f5c:	20005348 	.word	0x20005348
    4f60:	20005b84 	.word	0x20005b84
    4f64:	2001aaac 	.word	0x2001aaac
    4f68:	20005b86 	.word	0x20005b86
    4f6c:	20014768 	.word	0x20014768
    4f70:	2001a818 	.word	0x2001a818
    4f74:	f3af 8000 	nop.w
    4f78:	f3af 8000 	nop.w
    4f7c:	f3af 8000 	nop.w

00004f80 <HAL_SAI_TxCpltCallback>:




void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
    4f80:	b538      	push	{r3, r4, r5, lr}
	if ((!diskBusy)&& (presetReady))
    4f82:	4c41      	ldr	r4, [pc, #260]	; (5088 <HAL_SAI_TxCpltCallback+0x108>)
    4f84:	7823      	ldrb	r3, [r4, #0]
    4f86:	b91b      	cbnz	r3, 4f90 <HAL_SAI_TxCpltCallback+0x10>
    4f88:	4b40      	ldr	r3, [pc, #256]	; (508c <HAL_SAI_TxCpltCallback+0x10c>)
    4f8a:	681b      	ldr	r3, [r3, #0]
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d156      	bne.n	503e <HAL_SAI_TxCpltCallback+0xbe>
	}
	else
	{
		for (int i = 0; i < HALF_BUFFER_SIZE; i++)
		{
			audioOutBuffer[HALF_BUFFER_SIZE+i] = 0;
    4f90:	f44f 7200 	mov.w	r2, #512	; 0x200
    4f94:	2100      	movs	r1, #0
    4f96:	483e      	ldr	r0, [pc, #248]	; (5090 <HAL_SAI_TxCpltCallback+0x110>)
    4f98:	f005 fac2 	bl	a520 <__memset_veneer>
		}
	}
	if (voice != prevVoice)
    4f9c:	4b3d      	ldr	r3, [pc, #244]	; (5094 <HAL_SAI_TxCpltCallback+0x114>)
    4f9e:	4a3e      	ldr	r2, [pc, #248]	; (5098 <HAL_SAI_TxCpltCallback+0x118>)
    4fa0:	6818      	ldr	r0, [r3, #0]
    4fa2:	6811      	ldr	r1, [r2, #0]
    4fa4:	4288      	cmp	r0, r1
    4fa6:	d01d      	beq.n	4fe4 <HAL_SAI_TxCpltCallback+0x64>
	{
		if (voice == 63)
    4fa8:	6819      	ldr	r1, [r3, #0]
    4faa:	293f      	cmp	r1, #63	; 0x3f
    4fac:	d04c      	beq.n	5048 <HAL_SAI_TxCpltCallback+0xc8>

			switchStrings = 1;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 62)
    4fae:	6819      	ldr	r1, [r3, #0]
    4fb0:	293e      	cmp	r1, #62	; 0x3e
    4fb2:	d060      	beq.n	5076 <HAL_SAI_TxCpltCallback+0xf6>

			switchStrings = 2;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 61)
    4fb4:	6819      	ldr	r1, [r3, #0]
    4fb6:	293d      	cmp	r1, #61	; 0x3d
    4fb8:	d04e      	beq.n	5058 <HAL_SAI_TxCpltCallback+0xd8>
			resetStringInputs = 1;
		}
		else
		{
			audioFrameFunction = audioFrameSynth;
			presetWaitingToLoad = 1;
    4fba:	4938      	ldr	r1, [pc, #224]	; (509c <HAL_SAI_TxCpltCallback+0x11c>)
    4fbc:	2001      	movs	r0, #1
			presetNumberToLoad = voice;
    4fbe:	4d38      	ldr	r5, [pc, #224]	; (50a0 <HAL_SAI_TxCpltCallback+0x120>)
			presetWaitingToLoad = 1;
    4fc0:	6008      	str	r0, [r1, #0]
			presetNumberToLoad = voice;
    4fc2:	6819      	ldr	r1, [r3, #0]
			audioFrameFunction = audioFrameSynth;
    4fc4:	4c37      	ldr	r4, [pc, #220]	; (50a4 <HAL_SAI_TxCpltCallback+0x124>)
			presetNumberToLoad = voice;
    4fc6:	b2c9      	uxtb	r1, r1
    4fc8:	7029      	strb	r1, [r5, #0]
			audioFrameFunction = audioFrameSynth;
    4fca:	4d37      	ldr	r5, [pc, #220]	; (50a8 <HAL_SAI_TxCpltCallback+0x128>)
			presetReady = 0;
    4fcc:	492f      	ldr	r1, [pc, #188]	; (508c <HAL_SAI_TxCpltCallback+0x10c>)
			audioFrameFunction = audioFrameSynth;
    4fce:	6025      	str	r5, [r4, #0]
			presetReady = 0;
    4fd0:	2400      	movs	r4, #0
    4fd2:	600c      	str	r4, [r1, #0]
			if (prevVoice > 60)
    4fd4:	6811      	ldr	r1, [r2, #0]
    4fd6:	293c      	cmp	r1, #60	; 0x3c
    4fd8:	dd01      	ble.n	4fde <HAL_SAI_TxCpltCallback+0x5e>
			{
				resetStringInputs = 1;
    4fda:	4934      	ldr	r1, [pc, #208]	; (50ac <HAL_SAI_TxCpltCallback+0x12c>)
    4fdc:	7008      	strb	r0, [r1, #0]
			}
			frameLoadOverCount = 0;
    4fde:	4934      	ldr	r1, [pc, #208]	; (50b0 <HAL_SAI_TxCpltCallback+0x130>)
    4fe0:	2000      	movs	r0, #0
    4fe2:	6008      	str	r0, [r1, #0]
		}
	}
	prevVoice = voice;
    4fe4:	6819      	ldr	r1, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    4fe6:	4b33      	ldr	r3, [pc, #204]	; (50b4 <HAL_SAI_TxCpltCallback+0x134>)
	prevVoice = voice;
    4fe8:	6011      	str	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    4fea:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4fee:	4a32      	ldr	r2, [pc, #200]	; (50b8 <HAL_SAI_TxCpltCallback+0x138>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4ff0:	f103 0420 	add.w	r4, r3, #32
    4ff4:	f103 0140 	add.w	r1, r3, #64	; 0x40
    4ff8:	f103 0060 	add.w	r0, r3, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4ffc:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    5000:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5004:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5008:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    500c:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5010:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5014:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5018:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    501c:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
    5020:	f503 7380 	add.w	r3, r3, #256	; 0x100
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5024:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
    5028:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
    502c:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
    5030:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    5034:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5038:	f3bf 8f6f 	isb	sy
}
    503c:	bd38      	pop	{r3, r4, r5, pc}
		audioFrameFunction(HALF_BUFFER_SIZE);
    503e:	4b19      	ldr	r3, [pc, #100]	; (50a4 <HAL_SAI_TxCpltCallback+0x124>)
    5040:	2080      	movs	r0, #128	; 0x80
    5042:	681b      	ldr	r3, [r3, #0]
    5044:	4798      	blx	r3
    5046:	e7a9      	b.n	4f9c <HAL_SAI_TxCpltCallback+0x1c>
			switchStrings = 1;
    5048:	2101      	movs	r1, #1
    504a:	481c      	ldr	r0, [pc, #112]	; (50bc <HAL_SAI_TxCpltCallback+0x13c>)
    504c:	6001      	str	r1, [r0, #0]
			diskBusy = 0;
    504e:	2000      	movs	r0, #0
    5050:	7020      	strb	r0, [r4, #0]
			resetStringInputs = 1;
    5052:	4816      	ldr	r0, [pc, #88]	; (50ac <HAL_SAI_TxCpltCallback+0x12c>)
    5054:	7001      	strb	r1, [r0, #0]
    5056:	e7c5      	b.n	4fe4 <HAL_SAI_TxCpltCallback+0x64>
			audioFrameFunction = audioFrameAdditive;
    5058:	4912      	ldr	r1, [pc, #72]	; (50a4 <HAL_SAI_TxCpltCallback+0x124>)
    505a:	4819      	ldr	r0, [pc, #100]	; (50c0 <HAL_SAI_TxCpltCallback+0x140>)
    505c:	6008      	str	r0, [r1, #0]
			currentActivePreset = voice;
    505e:	6819      	ldr	r1, [r3, #0]
    5060:	4818      	ldr	r0, [pc, #96]	; (50c4 <HAL_SAI_TxCpltCallback+0x144>)
    5062:	b2c9      	uxtb	r1, r1
    5064:	7001      	strb	r1, [r0, #0]
			diskBusy = 0;
    5066:	2000      	movs	r0, #0
			presetReady = 1;
    5068:	2101      	movs	r1, #1
			diskBusy = 0;
    506a:	7020      	strb	r0, [r4, #0]
			presetReady = 1;
    506c:	4c07      	ldr	r4, [pc, #28]	; (508c <HAL_SAI_TxCpltCallback+0x10c>)
			resetStringInputs = 1;
    506e:	480f      	ldr	r0, [pc, #60]	; (50ac <HAL_SAI_TxCpltCallback+0x12c>)
			presetReady = 1;
    5070:	6021      	str	r1, [r4, #0]
			resetStringInputs = 1;
    5072:	7001      	strb	r1, [r0, #0]
    5074:	e7b6      	b.n	4fe4 <HAL_SAI_TxCpltCallback+0x64>
			switchStrings = 2;
    5076:	4911      	ldr	r1, [pc, #68]	; (50bc <HAL_SAI_TxCpltCallback+0x13c>)
    5078:	2002      	movs	r0, #2
    507a:	6008      	str	r0, [r1, #0]
			diskBusy = 0;
    507c:	2000      	movs	r0, #0
			resetStringInputs = 1;
    507e:	490b      	ldr	r1, [pc, #44]	; (50ac <HAL_SAI_TxCpltCallback+0x12c>)
			diskBusy = 0;
    5080:	7020      	strb	r0, [r4, #0]
			resetStringInputs = 1;
    5082:	2001      	movs	r0, #1
    5084:	7008      	strb	r0, [r1, #0]
    5086:	e7ad      	b.n	4fe4 <HAL_SAI_TxCpltCallback+0x64>
    5088:	20014b58 	.word	0x20014b58
    508c:	20005748 	.word	0x20005748
    5090:	30000200 	.word	0x30000200
    5094:	200148fc 	.word	0x200148fc
    5098:	20000154 	.word	0x20000154
    509c:	2001aa94 	.word	0x2001aa94
    50a0:	2001aa92 	.word	0x2001aa92
    50a4:	20000a6c 	.word	0x20000a6c
    50a8:	00004c61 	.word	0x00004c61
    50ac:	20005b86 	.word	0x20005b86
    50b0:	20005140 	.word	0x20005140
    50b4:	30000000 	.word	0x30000000
    50b8:	e000ed00 	.word	0xe000ed00
    50bc:	20014878 	.word	0x20014878
    50c0:	000015e1 	.word	0x000015e1
    50c4:	20000740 	.word	0x20000740
    50c8:	f3af 8000 	nop.w
    50cc:	f3af 8000 	nop.w
    50d0:	f3af 8000 	nop.w
    50d4:	f3af 8000 	nop.w
    50d8:	f3af 8000 	nop.w
    50dc:	f3af 8000 	nop.w

000050e0 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
    50e0:	b538      	push	{r3, r4, r5, lr}
	if ((!diskBusy)&& (presetReady))
    50e2:	4c41      	ldr	r4, [pc, #260]	; (51e8 <HAL_SAI_TxHalfCpltCallback+0x108>)
    50e4:	7820      	ldrb	r0, [r4, #0]
    50e6:	b918      	cbnz	r0, 50f0 <HAL_SAI_TxHalfCpltCallback+0x10>
    50e8:	4b40      	ldr	r3, [pc, #256]	; (51ec <HAL_SAI_TxHalfCpltCallback+0x10c>)
    50ea:	681b      	ldr	r3, [r3, #0]
    50ec:	2b00      	cmp	r3, #0
    50ee:	d156      	bne.n	519e <HAL_SAI_TxHalfCpltCallback+0xbe>
	}
	else
	{
		for (int i = 0; i < HALF_BUFFER_SIZE; i++)
		{
			audioOutBuffer[i] = 0;
    50f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    50f4:	2100      	movs	r1, #0
    50f6:	483e      	ldr	r0, [pc, #248]	; (51f0 <HAL_SAI_TxHalfCpltCallback+0x110>)
    50f8:	f005 fa12 	bl	a520 <__memset_veneer>
		}
	}
	if (voice != prevVoice)
    50fc:	4b3d      	ldr	r3, [pc, #244]	; (51f4 <HAL_SAI_TxHalfCpltCallback+0x114>)
    50fe:	4a3e      	ldr	r2, [pc, #248]	; (51f8 <HAL_SAI_TxHalfCpltCallback+0x118>)
    5100:	6818      	ldr	r0, [r3, #0]
    5102:	6811      	ldr	r1, [r2, #0]
    5104:	4288      	cmp	r0, r1
    5106:	d01d      	beq.n	5144 <HAL_SAI_TxHalfCpltCallback+0x64>
	{
		if (voice == 63)
    5108:	6819      	ldr	r1, [r3, #0]
    510a:	293f      	cmp	r1, #63	; 0x3f
    510c:	d04b      	beq.n	51a6 <HAL_SAI_TxHalfCpltCallback+0xc6>

			switchStrings = 1;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 62)
    510e:	6819      	ldr	r1, [r3, #0]
    5110:	293e      	cmp	r1, #62	; 0x3e
    5112:	d05f      	beq.n	51d4 <HAL_SAI_TxHalfCpltCallback+0xf4>

			switchStrings = 2;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 61)
    5114:	6819      	ldr	r1, [r3, #0]
    5116:	293d      	cmp	r1, #61	; 0x3d
    5118:	d04d      	beq.n	51b6 <HAL_SAI_TxHalfCpltCallback+0xd6>
			resetStringInputs = 1;
		}
		else
		{
			audioFrameFunction = audioFrameSynth;
			presetWaitingToLoad = 1;
    511a:	4938      	ldr	r1, [pc, #224]	; (51fc <HAL_SAI_TxHalfCpltCallback+0x11c>)
    511c:	2001      	movs	r0, #1
			presetNumberToLoad = voice;
    511e:	4d38      	ldr	r5, [pc, #224]	; (5200 <HAL_SAI_TxHalfCpltCallback+0x120>)
			presetWaitingToLoad = 1;
    5120:	6008      	str	r0, [r1, #0]
			presetNumberToLoad = voice;
    5122:	6819      	ldr	r1, [r3, #0]
			audioFrameFunction = audioFrameSynth;
    5124:	4c37      	ldr	r4, [pc, #220]	; (5204 <HAL_SAI_TxHalfCpltCallback+0x124>)
			presetNumberToLoad = voice;
    5126:	b2c9      	uxtb	r1, r1
    5128:	7029      	strb	r1, [r5, #0]
			audioFrameFunction = audioFrameSynth;
    512a:	4d37      	ldr	r5, [pc, #220]	; (5208 <HAL_SAI_TxHalfCpltCallback+0x128>)
			presetReady = 0;
    512c:	492f      	ldr	r1, [pc, #188]	; (51ec <HAL_SAI_TxHalfCpltCallback+0x10c>)
			audioFrameFunction = audioFrameSynth;
    512e:	6025      	str	r5, [r4, #0]
			presetReady = 0;
    5130:	2400      	movs	r4, #0
    5132:	600c      	str	r4, [r1, #0]
			if (prevVoice > 60)
    5134:	6811      	ldr	r1, [r2, #0]
    5136:	293c      	cmp	r1, #60	; 0x3c
    5138:	dd01      	ble.n	513e <HAL_SAI_TxHalfCpltCallback+0x5e>
			{
				resetStringInputs = 1;
    513a:	4934      	ldr	r1, [pc, #208]	; (520c <HAL_SAI_TxHalfCpltCallback+0x12c>)
    513c:	7008      	strb	r0, [r1, #0]
			}
			frameLoadOverCount = 0;
    513e:	4934      	ldr	r1, [pc, #208]	; (5210 <HAL_SAI_TxHalfCpltCallback+0x130>)
    5140:	2000      	movs	r0, #0
    5142:	6008      	str	r0, [r1, #0]
		}
	}
	prevVoice = voice;
    5144:	6819      	ldr	r1, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    5146:	4b2a      	ldr	r3, [pc, #168]	; (51f0 <HAL_SAI_TxHalfCpltCallback+0x110>)
	prevVoice = voice;
    5148:	6011      	str	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    514a:	f3bf 8f4f 	dsb	sy
    514e:	4a31      	ldr	r2, [pc, #196]	; (5214 <HAL_SAI_TxHalfCpltCallback+0x134>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5150:	f103 0420 	add.w	r4, r3, #32
    5154:	f103 0140 	add.w	r1, r3, #64	; 0x40
    5158:	f103 0060 	add.w	r0, r3, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    515c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    5160:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5164:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5168:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    516c:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5170:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    5174:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5178:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    517c:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
    5180:	f503 7380 	add.w	r3, r3, #256	; 0x100
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5184:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
    5188:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
    518c:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
    5190:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    5194:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5198:	f3bf 8f6f 	isb	sy
}
    519c:	bd38      	pop	{r3, r4, r5, pc}
		audioFrameFunction(0);
    519e:	4b19      	ldr	r3, [pc, #100]	; (5204 <HAL_SAI_TxHalfCpltCallback+0x124>)
    51a0:	681b      	ldr	r3, [r3, #0]
    51a2:	4798      	blx	r3
    51a4:	e7aa      	b.n	50fc <HAL_SAI_TxHalfCpltCallback+0x1c>
			switchStrings = 1;
    51a6:	2101      	movs	r1, #1
    51a8:	481b      	ldr	r0, [pc, #108]	; (5218 <HAL_SAI_TxHalfCpltCallback+0x138>)
    51aa:	6001      	str	r1, [r0, #0]
			diskBusy = 0;
    51ac:	2000      	movs	r0, #0
    51ae:	7020      	strb	r0, [r4, #0]
			resetStringInputs = 1;
    51b0:	4816      	ldr	r0, [pc, #88]	; (520c <HAL_SAI_TxHalfCpltCallback+0x12c>)
    51b2:	7001      	strb	r1, [r0, #0]
    51b4:	e7c6      	b.n	5144 <HAL_SAI_TxHalfCpltCallback+0x64>
			audioFrameFunction = audioFrameAdditive;
    51b6:	4913      	ldr	r1, [pc, #76]	; (5204 <HAL_SAI_TxHalfCpltCallback+0x124>)
    51b8:	4818      	ldr	r0, [pc, #96]	; (521c <HAL_SAI_TxHalfCpltCallback+0x13c>)
    51ba:	6008      	str	r0, [r1, #0]
			currentActivePreset = voice;
    51bc:	6819      	ldr	r1, [r3, #0]
    51be:	4818      	ldr	r0, [pc, #96]	; (5220 <HAL_SAI_TxHalfCpltCallback+0x140>)
    51c0:	b2c9      	uxtb	r1, r1
    51c2:	7001      	strb	r1, [r0, #0]
			diskBusy = 0;
    51c4:	2000      	movs	r0, #0
			presetReady = 1;
    51c6:	2101      	movs	r1, #1
			diskBusy = 0;
    51c8:	7020      	strb	r0, [r4, #0]
			presetReady = 1;
    51ca:	4c08      	ldr	r4, [pc, #32]	; (51ec <HAL_SAI_TxHalfCpltCallback+0x10c>)
			resetStringInputs = 1;
    51cc:	480f      	ldr	r0, [pc, #60]	; (520c <HAL_SAI_TxHalfCpltCallback+0x12c>)
			presetReady = 1;
    51ce:	6021      	str	r1, [r4, #0]
			resetStringInputs = 1;
    51d0:	7001      	strb	r1, [r0, #0]
    51d2:	e7b7      	b.n	5144 <HAL_SAI_TxHalfCpltCallback+0x64>
			switchStrings = 2;
    51d4:	4910      	ldr	r1, [pc, #64]	; (5218 <HAL_SAI_TxHalfCpltCallback+0x138>)
    51d6:	2002      	movs	r0, #2
    51d8:	6008      	str	r0, [r1, #0]
			diskBusy = 0;
    51da:	2000      	movs	r0, #0
			resetStringInputs = 1;
    51dc:	490b      	ldr	r1, [pc, #44]	; (520c <HAL_SAI_TxHalfCpltCallback+0x12c>)
			diskBusy = 0;
    51de:	7020      	strb	r0, [r4, #0]
			resetStringInputs = 1;
    51e0:	2001      	movs	r0, #1
    51e2:	7008      	strb	r0, [r1, #0]
    51e4:	e7ae      	b.n	5144 <HAL_SAI_TxHalfCpltCallback+0x64>
    51e6:	bf00      	nop
    51e8:	20014b58 	.word	0x20014b58
    51ec:	20005748 	.word	0x20005748
    51f0:	30000000 	.word	0x30000000
    51f4:	200148fc 	.word	0x200148fc
    51f8:	20000154 	.word	0x20000154
    51fc:	2001aa94 	.word	0x2001aa94
    5200:	2001aa92 	.word	0x2001aa92
    5204:	20000a6c 	.word	0x20000a6c
    5208:	00004c61 	.word	0x00004c61
    520c:	20005b86 	.word	0x20005b86
    5210:	20005140 	.word	0x20005140
    5214:	e000ed00 	.word	0xe000ed00
    5218:	20014878 	.word	0x20014878
    521c:	000015e1 	.word	0x000015e1
    5220:	20000740 	.word	0x20000740
    5224:	f3af 8000 	nop.w
    5228:	f3af 8000 	nop.w
    522c:	f3af 8000 	nop.w
    5230:	f3af 8000 	nop.w
    5234:	f3af 8000 	nop.w
    5238:	f3af 8000 	nop.w
    523c:	f3af 8000 	nop.w

00005240 <HAL_SAI_ErrorCallback>:

void __ATTR_ITCMRAM HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
    5240:	4770      	bx	lr
    5242:	bf00      	nop
	...

00005260 <scaleDefault>:
}
    5260:	4770      	bx	lr
    5262:	bf00      	nop
    5264:	f3af 8000 	nop.w
    5268:	f3af 8000 	nop.w
    526c:	f3af 8000 	nop.w
    5270:	f3af 8000 	nop.w
    5274:	f3af 8000 	nop.w
    5278:	f3af 8000 	nop.w
    527c:	f3af 8000 	nop.w

00005280 <scaleOscPitch>:
	return ((input * 2.0f) - 1.0f);
    5280:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    5284:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
    5288:	eee0 7a07 	vfma.f32	s15, s0, s14
    528c:	eeb0 0a67 	vmov.f32	s0, s15
    5290:	4770      	bx	lr
    5292:	bf00      	nop
    5294:	f3af 8000 	nop.w
    5298:	f3af 8000 	nop.w
    529c:	f3af 8000 	nop.w

000052a0 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    52a0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 52b4 <scaleOscFine+0x14>
    52a4:	eddf 7a04 	vldr	s15, [pc, #16]	; 52b8 <scaleOscFine+0x18>
}
    52a8:	eee0 7a07 	vfma.f32	s15, s0, s14
    52ac:	eeb0 0a67 	vmov.f32	s0, s15
    52b0:	4770      	bx	lr
    52b2:	bf00      	nop
    52b4:	43480000 	.word	0x43480000
    52b8:	c2c80000 	.word	0xc2c80000
    52bc:	f3af 8000 	nop.w

000052c0 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    52c0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 52d4 <scaleOscFreq+0x14>
    52c4:	eddf 7a04 	vldr	s15, [pc, #16]	; 52d8 <scaleOscFreq+0x18>
}
    52c8:	eee0 7a07 	vfma.f32	s15, s0, s14
    52cc:	eeb0 0a67 	vmov.f32	s0, s15
    52d0:	4770      	bx	lr
    52d2:	bf00      	nop
    52d4:	457a0000 	.word	0x457a0000
    52d8:	c4fa0000 	.word	0xc4fa0000
    52dc:	f3af 8000 	nop.w

000052e0 <scaleFilterCutoff>:
	return (input * 127.0f);
    52e0:	eddf 7a02 	vldr	s15, [pc, #8]	; 52ec <scaleFilterCutoff+0xc>
}
    52e4:	ee20 0a27 	vmul.f32	s0, s0, s15
    52e8:	4770      	bx	lr
    52ea:	bf00      	nop
    52ec:	42fe0000 	.word	0x42fe0000
    52f0:	f3af 8000 	nop.w
    52f4:	f3af 8000 	nop.w
    52f8:	f3af 8000 	nop.w
    52fc:	f3af 8000 	nop.w

00005300 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    5300:	ed9f 7a04 	vldr	s14, [pc, #16]	; 5314 <scaleFinalLowpass+0x14>
    5304:	eddf 7a04 	vldr	s15, [pc, #16]	; 5318 <scaleFinalLowpass+0x18>
}
    5308:	eee0 7a07 	vfma.f32	s15, s0, s14
    530c:	eeb0 0a67 	vmov.f32	s0, s15
    5310:	4770      	bx	lr
    5312:	bf00      	nop
    5314:	428c0000 	.word	0x428c0000
    5318:	42680000 	.word	0x42680000
    531c:	f3af 8000 	nop.w

00005320 <blankFunction>:
}
    5320:	4770      	bx	lr
    5322:	bf00      	nop
    5324:	f3af 8000 	nop.w
    5328:	f3af 8000 	nop.w
    532c:	f3af 8000 	nop.w
    5330:	f3af 8000 	nop.w
    5334:	f3af 8000 	nop.w
    5338:	f3af 8000 	nop.w
    533c:	f3af 8000 	nop.w

00005340 <scaleTranspose>:
{
    5340:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    5344:	ed9f 0a07 	vldr	s0, [pc, #28]	; 5364 <scaleTranspose+0x24>
    5348:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    534c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    534e:	f003 fc47 	bl	8be0 <LEAF_clip>
	return (input * 96.0f) - 48.0f;
    5352:	ed9f 7a05 	vldr	s14, [pc, #20]	; 5368 <scaleTranspose+0x28>
    5356:	eddf 7a05 	vldr	s15, [pc, #20]	; 536c <scaleTranspose+0x2c>
}
    535a:	eee0 7a07 	vfma.f32	s15, s0, s14
    535e:	eeb0 0a67 	vmov.f32	s0, s15
    5362:	bd08      	pop	{r3, pc}
    5364:	00000000 	.word	0x00000000
    5368:	42c00000 	.word	0x42c00000
    536c:	c2400000 	.word	0xc2400000
    5370:	f3af 8000 	nop.w
    5374:	f3af 8000 	nop.w
    5378:	f3af 8000 	nop.w
    537c:	f3af 8000 	nop.w

00005380 <scalePitchBend>:
{
    5380:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    5384:	ed9f 0a05 	vldr	s0, [pc, #20]	; 539c <scalePitchBend+0x1c>
    5388:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    538c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    538e:	f003 fc27 	bl	8be0 <LEAF_clip>
	return (input * 48.0f);
    5392:	eddf 7a03 	vldr	s15, [pc, #12]	; 53a0 <scalePitchBend+0x20>
}
    5396:	ee20 0a27 	vmul.f32	s0, s0, s15
    539a:	bd08      	pop	{r3, pc}
    539c:	00000000 	.word	0x00000000
    53a0:	42400000 	.word	0x42400000
    53a4:	f3af 8000 	nop.w
    53a8:	f3af 8000 	nop.w
    53ac:	f3af 8000 	nop.w
    53b0:	f3af 8000 	nop.w
    53b4:	f3af 8000 	nop.w
    53b8:	f3af 8000 	nop.w
    53bc:	f3af 8000 	nop.w

000053c0 <scaleFilterResonance>:
{
    53c0:	b510      	push	{r4, lr}
    53c2:	ed2d 8b02 	vpush	{d8}
    53c6:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    53ca:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 5438 <scaleFilterResonance+0x78>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    53ce:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 543c <scaleFilterResonance+0x7c>
	input *= 2047.0f;
    53d2:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    53d6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    53da:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    53de:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    53e2:	1c63      	adds	r3, r4, #1
    53e4:	ee00 3a90 	vmov	s1, r3
    53e8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    53ec:	f003 fbf8 	bl	8be0 <LEAF_clip>
    53f0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    53f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    53f8:	4b11      	ldr	r3, [pc, #68]	; (5440 <scaleFilterResonance+0x80>)
	float inputFloat = (float)inputInt - input;
    53fa:	ee78 0ac8 	vsub.f32	s1, s17, s16
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    53fe:	ed9f 0a11 	vldr	s0, [pc, #68]	; 5444 <scaleFilterResonance+0x84>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    5402:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    5406:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    540a:	ee38 8a27 	vadd.f32	s16, s16, s15
    540e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5412:	edd4 7a00 	vldr	s15, [r4]
    5416:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    541a:	ed93 7a00 	vldr	s14, [r3]
    541e:	ee38 8a68 	vsub.f32	s16, s16, s17
    5422:	ee60 0a87 	vmul.f32	s1, s1, s14
    5426:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    542a:	ecbd 8b02 	vpop	{d8}
    542e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    5432:	f003 bbd5 	b.w	8be0 <LEAF_clip>
    5436:	bf00      	nop
    5438:	44ffe000 	.word	0x44ffe000
    543c:	00000000 	.word	0x00000000
    5440:	2001aeb0 	.word	0x2001aeb0
    5444:	3dcccccd 	.word	0x3dcccccd
    5448:	f3af 8000 	nop.w
    544c:	f3af 8000 	nop.w
    5450:	f3af 8000 	nop.w
    5454:	f3af 8000 	nop.w
    5458:	f3af 8000 	nop.w
    545c:	f3af 8000 	nop.w

00005460 <scaleEnvTimes>:
{
    5460:	b510      	push	{r4, lr}
    5462:	ed2d 8b02 	vpush	{d8}
    5466:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    546a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 54c8 <scaleEnvTimes+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    546e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 54cc <scaleEnvTimes+0x6c>
	input *= 2047.0f;
    5472:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    5476:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    547a:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    547e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    5482:	1c63      	adds	r3, r4, #1
    5484:	ee00 3a90 	vmov	s1, r3
    5488:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    548c:	f003 fba8 	bl	8be0 <LEAF_clip>
    5490:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    5494:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5498:	4b0d      	ldr	r3, [pc, #52]	; (54d0 <scaleEnvTimes+0x70>)
	float inputFloat = (float)inputInt - input;
    549a:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    549e:	ee10 2a10 	vmov	r2, s0
    54a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    54a6:	ee38 8a07 	vadd.f32	s16, s16, s14
    54aa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    54ae:	ed94 7a00 	vldr	s14, [r4]
    54b2:	edd3 6a00 	vldr	s13, [r3]
    54b6:	ee38 8a68 	vsub.f32	s16, s16, s17
    54ba:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    54be:	eea7 0a08 	vfma.f32	s0, s14, s16
    54c2:	ecbd 8b02 	vpop	{d8}
    54c6:	bd10      	pop	{r4, pc}
    54c8:	44ffe000 	.word	0x44ffe000
    54cc:	00000000 	.word	0x00000000
    54d0:	20014bb0 	.word	0x20014bb0
    54d4:	f3af 8000 	nop.w
    54d8:	f3af 8000 	nop.w
    54dc:	f3af 8000 	nop.w

000054e0 <scaleLFORates>:
{
    54e0:	b510      	push	{r4, lr}
    54e2:	ed2d 8b02 	vpush	{d8}
    54e6:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    54ea:	ed9f 1a17 	vldr	s2, [pc, #92]	; 5548 <scaleLFORates+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    54ee:	ed9f 0a17 	vldr	s0, [pc, #92]	; 554c <scaleLFORates+0x6c>
	input *= 2047.0f;
    54f2:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    54f6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    54fa:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    54fe:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    5502:	1c63      	adds	r3, r4, #1
    5504:	ee00 3a90 	vmov	s1, r3
    5508:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    550c:	f003 fb68 	bl	8be0 <LEAF_clip>
    5510:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    5514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5518:	4b0d      	ldr	r3, [pc, #52]	; (5550 <scaleLFORates+0x70>)
	float inputFloat = (float)inputInt - input;
    551a:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    551e:	ee10 2a10 	vmov	r2, s0
    5522:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5526:	ee38 8a07 	vadd.f32	s16, s16, s14
    552a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    552e:	ed94 7a00 	vldr	s14, [r4]
    5532:	edd3 6a00 	vldr	s13, [r3]
    5536:	ee38 8a68 	vsub.f32	s16, s16, s17
    553a:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    553e:	eea7 0a08 	vfma.f32	s0, s14, s16
    5542:	ecbd 8b02 	vpop	{d8}
    5546:	bd10      	pop	{r4, pc}
    5548:	44ffe000 	.word	0x44ffe000
    554c:	00000000 	.word	0x00000000
    5550:	20016cdc 	.word	0x20016cdc
    5554:	f3af 8000 	nop.w
    5558:	f3af 8000 	nop.w
    555c:	f3af 8000 	nop.w

00005560 <randomNumber>:
float __ATTR_ITCMRAM randomNumber(void) {
    5560:	b500      	push	{lr}
    5562:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
    5564:	4807      	ldr	r0, [pc, #28]	; (5584 <randomNumber+0x24>)
    5566:	a901      	add	r1, sp, #4
    5568:	f004 fec6 	bl	a2f8 <__HAL_RNG_GenerateRandomNumber_veneer>
	float num = (float)rand * INV_TWO_TO_32;
    556c:	eddd 7a01 	vldr	s15, [sp, #4]
    5570:	ed9f 0a05 	vldr	s0, [pc, #20]	; 5588 <randomNumber+0x28>
    5574:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
    5578:	ee27 0a80 	vmul.f32	s0, s15, s0
    557c:	b003      	add	sp, #12
    557e:	f85d fb04 	ldr.w	pc, [sp], #4
    5582:	bf00      	nop
    5584:	2001cf50 	.word	0x2001cf50
    5588:	2f80000d 	.word	0x2f80000d
    558c:	f3af 8000 	nop.w
    5590:	f3af 8000 	nop.w
    5594:	f3af 8000 	nop.w
    5598:	f3af 8000 	nop.w
    559c:	f3af 8000 	nop.w

000055a0 <scaleTwo>:
}
    55a0:	ee30 0a00 	vadd.f32	s0, s0, s0
    55a4:	4770      	bx	lr
    55a6:	bf00      	nop
    55a8:	f3af 8000 	nop.w
    55ac:	f3af 8000 	nop.w
    55b0:	f3af 8000 	nop.w
    55b4:	f3af 8000 	nop.w
    55b8:	f3af 8000 	nop.w
    55bc:	f3af 8000 	nop.w

000055c0 <parsePreset>:
{
    55c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55c4:	460b      	mov	r3, r1
    55c6:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    55c8:	2200      	movs	r2, #0
    55ca:	2101      	movs	r1, #1
    55cc:	48f0      	ldr	r0, [pc, #960]	; (5990 <parsePreset+0x3d0>)
{
    55ce:	ed2d 8b02 	vpush	{d8}
    55d2:	b08f      	sub	sp, #60	; 0x3c
    55d4:	e9cd 4301 	strd	r4, r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
    55d8:	f004 ff1e 	bl	a418 <__HAL_GPIO_WritePin_veneer>
  __ASM volatile ("cpsid i" : : : "memory");
    55dc:	b672      	cpsid	i
	 presetReady = 0;
    55de:	2500      	movs	r5, #0
    55e0:	4bec      	ldr	r3, [pc, #944]	; (5994 <parsePreset+0x3d4>)
	if (buffer[bufferIndex] == 17)
    55e2:	f8df a3c8 	ldr.w	sl, [pc, #968]	; 59ac <parsePreset+0x3ec>
		 audioOutBuffer[i] = 0;
    55e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    55ea:	4629      	mov	r1, r5
    55ec:	48ea      	ldr	r0, [pc, #936]	; (5998 <parsePreset+0x3d8>)
	 presetReady = 0;
    55ee:	601d      	str	r5, [r3, #0]
		 audioOutBuffer[i] = 0;
    55f0:	f004 ff96 	bl	a520 <__memset_veneer>
	if (buffer[bufferIndex] == 17)
    55f4:	f89a 4000 	ldrb.w	r4, [sl]
	audioMasterLevel = 0.0f;
    55f8:	2300      	movs	r3, #0
    55fa:	4ae8      	ldr	r2, [pc, #928]	; (599c <parsePreset+0x3dc>)
	if (buffer[bufferIndex] == 17)
    55fc:	2c11      	cmp	r4, #17
	audioMasterLevel = 0.0f;
    55fe:	6013      	str	r3, [r2, #0]
	if (buffer[bufferIndex] == 17)
    5600:	f000 844d 	beq.w	5e9e <parsePreset+0x8de>
	uint16_t bufferIndex = 0;
    5604:	462b      	mov	r3, r5
	uint16_t presetVersionNumber = 0;
    5606:	9506      	str	r5, [sp, #24]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5608:	9a02      	ldr	r2, [sp, #8]
    560a:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    560e:	1c5a      	adds	r2, r3, #1
    5610:	f81a 9002 	ldrb.w	r9, [sl, r2]
    5614:	1c9a      	adds	r2, r3, #2
    5616:	f81a 8002 	ldrb.w	r8, [sl, r2]
    561a:	1cda      	adds	r2, r3, #3
    561c:	f81a e002 	ldrb.w	lr, [sl, r2]
    5620:	1d1a      	adds	r2, r3, #4
    5622:	f81a 1002 	ldrb.w	r1, [sl, r2]
    5626:	1d5a      	adds	r2, r3, #5
    5628:	f81a 5002 	ldrb.w	r5, [sl, r2]
    562c:	1d9a      	adds	r2, r3, #6
    562e:	9103      	str	r1, [sp, #12]
    5630:	f81a c002 	ldrb.w	ip, [sl, r2]
    5634:	1dda      	adds	r2, r3, #7
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5636:	49da      	ldr	r1, [pc, #872]	; (59a0 <parsePreset+0x3e0>)
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5638:	f81a b002 	ldrb.w	fp, [sl, r2]
    563c:	f103 0208 	add.w	r2, r3, #8
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5640:	460e      	mov	r6, r1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5642:	9504      	str	r5, [sp, #16]
    5644:	f81a 7002 	ldrb.w	r7, [sl, r2]
    5648:	f103 0209 	add.w	r2, r3, #9
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    564c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5650:	f81a 2002 	ldrb.w	r2, [sl, r2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5654:	0040      	lsls	r0, r0, #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5656:	9205      	str	r2, [sp, #20]
    5658:	f103 020a 	add.w	r2, r3, #10
    565c:	f81a 5002 	ldrb.w	r5, [sl, r2]
		presetName[i] = buffer[bufferIndex];
    5660:	4ad0      	ldr	r2, [pc, #832]	; (59a4 <parsePreset+0x3e4>)
    5662:	7014      	strb	r4, [r2, #0]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5664:	5434      	strb	r4, [r6, r0]
		presetName[i] = buffer[bufferIndex];
    5666:	9c03      	ldr	r4, [sp, #12]
    5668:	f882 9001 	strb.w	r9, [r2, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    566c:	f881 9001 	strb.w	r9, [r1, #1]
		presetName[i] = buffer[bufferIndex];
    5670:	f882 8002 	strb.w	r8, [r2, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5674:	f881 8002 	strb.w	r8, [r1, #2]
		presetName[i] = buffer[bufferIndex];
    5678:	f882 e003 	strb.w	lr, [r2, #3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    567c:	f881 e003 	strb.w	lr, [r1, #3]
		presetName[i] = buffer[bufferIndex];
    5680:	7114      	strb	r4, [r2, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5682:	710c      	strb	r4, [r1, #4]
		presetName[i] = buffer[bufferIndex];
    5684:	9c04      	ldr	r4, [sp, #16]
    5686:	7154      	strb	r4, [r2, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5688:	714c      	strb	r4, [r1, #5]
		presetName[i] = buffer[bufferIndex];
    568a:	f882 c006 	strb.w	ip, [r2, #6]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    568e:	f881 c006 	strb.w	ip, [r1, #6]
		presetName[i] = buffer[bufferIndex];
    5692:	f882 b007 	strb.w	fp, [r2, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    5696:	f881 b007 	strb.w	fp, [r1, #7]
		presetName[i] = buffer[bufferIndex];
    569a:	7217      	strb	r7, [r2, #8]
    569c:	9805      	ldr	r0, [sp, #20]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    569e:	720f      	strb	r7, [r1, #8]
		presetName[i] = buffer[bufferIndex];
    56a0:	7250      	strb	r0, [r2, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    56a2:	7248      	strb	r0, [r1, #9]
		presetName[i] = buffer[bufferIndex];
    56a4:	7295      	strb	r5, [r2, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    56a6:	728d      	strb	r5, [r1, #10]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    56a8:	f103 050b 	add.w	r5, r3, #11
    56ac:	9802      	ldr	r0, [sp, #8]
    56ae:	f81a 5005 	ldrb.w	r5, [sl, r5]
    56b2:	4cbd      	ldr	r4, [pc, #756]	; (59a8 <parsePreset+0x3e8>)
    56b4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
		presetName[i] = buffer[bufferIndex];
    56b8:	72d5      	strb	r5, [r2, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    56ba:	72cd      	strb	r5, [r1, #11]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    56bc:	f103 050c 	add.w	r5, r3, #12
    56c0:	f81a 5005 	ldrb.w	r5, [sl, r5]
		presetName[i] = buffer[bufferIndex];
    56c4:	7315      	strb	r5, [r2, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    56c6:	730d      	strb	r5, [r1, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    56c8:	f103 050d 	add.w	r5, r3, #13
    56cc:	f81a 5005 	ldrb.w	r5, [sl, r5]
		presetName[i] = buffer[bufferIndex];
    56d0:	7355      	strb	r5, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    56d2:	f103 020e 	add.w	r2, r3, #14
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    56d6:	734d      	strb	r5, [r1, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    56d8:	f81a 2002 	ldrb.w	r2, [sl, r2]
    56dc:	4611      	mov	r1, r2
    56de:	f103 020f 	add.w	r2, r3, #15
    56e2:	f81a 9002 	ldrb.w	r9, [sl, r2]
    56e6:	f103 0210 	add.w	r2, r3, #16
    56ea:	f81a 8002 	ldrb.w	r8, [sl, r2]
    56ee:	f103 0211 	add.w	r2, r3, #17
    56f2:	f81a b002 	ldrb.w	fp, [sl, r2]
    56f6:	f103 0212 	add.w	r2, r3, #18
    56fa:	f81a 5002 	ldrb.w	r5, [sl, r2]
    56fe:	f103 0213 	add.w	r2, r3, #19
    5702:	f81a 6002 	ldrb.w	r6, [sl, r2]
    5706:	f103 0214 	add.w	r2, r3, #20
    570a:	9505      	str	r5, [sp, #20]
    570c:	f81a e002 	ldrb.w	lr, [sl, r2]
    5710:	f103 0215 	add.w	r2, r3, #21
    5714:	9604      	str	r6, [sp, #16]
    5716:	f81a c002 	ldrb.w	ip, [sl, r2]
    571a:	f103 0216 	add.w	r2, r3, #22
    571e:	f81a 7002 	ldrb.w	r7, [sl, r2]
    5722:	f103 0217 	add.w	r2, r3, #23
    5726:	f81a 6002 	ldrb.w	r6, [sl, r2]
    572a:	f103 0218 	add.w	r2, r3, #24
    572e:	f81a 5002 	ldrb.w	r5, [sl, r2]
    5732:	f103 0219 	add.w	r2, r3, #25
    5736:	f81a 2002 	ldrb.w	r2, [sl, r2]
    573a:	9203      	str	r2, [sp, #12]
    573c:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5740:	00c0      	lsls	r0, r0, #3
    5742:	5421      	strb	r1, [r4, r0]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    5744:	f103 007e 	add.w	r0, r3, #126	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    5748:	f882 9001 	strb.w	r9, [r2, #1]
    574c:	9905      	ldr	r1, [sp, #20]
    574e:	f882 8002 	strb.w	r8, [r2, #2]
    5752:	f882 b003 	strb.w	fp, [r2, #3]
    5756:	7111      	strb	r1, [r2, #4]
    5758:	9904      	ldr	r1, [sp, #16]
    575a:	7151      	strb	r1, [r2, #5]
    575c:	9903      	ldr	r1, [sp, #12]
    575e:	f882 e006 	strb.w	lr, [r2, #6]
    5762:	f882 c007 	strb.w	ip, [r2, #7]
    5766:	7217      	strb	r7, [r2, #8]
    5768:	7296      	strb	r6, [r2, #10]
    576a:	72d5      	strb	r5, [r2, #11]
    576c:	7311      	strb	r1, [r2, #12]
    576e:	f103 011a 	add.w	r1, r3, #26
    5772:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5776:	7351      	strb	r1, [r2, #13]
    5778:	f103 011b 	add.w	r1, r3, #27
    577c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5780:	7391      	strb	r1, [r2, #14]
    5782:	f103 011c 	add.w	r1, r3, #28
    5786:	f81a 1001 	ldrb.w	r1, [sl, r1]
    578a:	73d1      	strb	r1, [r2, #15]
    578c:	f103 011d 	add.w	r1, r3, #29
    5790:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5794:	7411      	strb	r1, [r2, #16]
    5796:	f103 011e 	add.w	r1, r3, #30
    579a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    579e:	7451      	strb	r1, [r2, #17]
    57a0:	f103 011f 	add.w	r1, r3, #31
    57a4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    57a8:	7491      	strb	r1, [r2, #18]
    57aa:	f103 0120 	add.w	r1, r3, #32
    57ae:	f81a 1001 	ldrb.w	r1, [sl, r1]
    57b2:	7511      	strb	r1, [r2, #20]
    57b4:	f103 0121 	add.w	r1, r3, #33	; 0x21
    57b8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    57bc:	7551      	strb	r1, [r2, #21]
    57be:	f103 0122 	add.w	r1, r3, #34	; 0x22
    57c2:	f81a 1001 	ldrb.w	r1, [sl, r1]
    57c6:	7591      	strb	r1, [r2, #22]
    57c8:	f103 0123 	add.w	r1, r3, #35	; 0x23
    57cc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    57d0:	75d1      	strb	r1, [r2, #23]
    57d2:	f103 0124 	add.w	r1, r3, #36	; 0x24
    57d6:	f81a 1001 	ldrb.w	r1, [sl, r1]
    57da:	7611      	strb	r1, [r2, #24]
    57dc:	f103 0125 	add.w	r1, r3, #37	; 0x25
    57e0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    57e4:	7651      	strb	r1, [r2, #25]
    57e6:	f103 0126 	add.w	r1, r3, #38	; 0x26
    57ea:	f81a 1001 	ldrb.w	r1, [sl, r1]
    57ee:	7691      	strb	r1, [r2, #26]
    57f0:	f103 0127 	add.w	r1, r3, #39	; 0x27
    57f4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    57f8:	76d1      	strb	r1, [r2, #27]
    57fa:	f103 0128 	add.w	r1, r3, #40	; 0x28
    57fe:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5802:	7711      	strb	r1, [r2, #28]
    5804:	f103 0129 	add.w	r1, r3, #41	; 0x29
    5808:	f81a 1001 	ldrb.w	r1, [sl, r1]
    580c:	7791      	strb	r1, [r2, #30]
    580e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
    5812:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5816:	77d1      	strb	r1, [r2, #31]
    5818:	f103 012b 	add.w	r1, r3, #43	; 0x2b
    581c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5820:	f882 1020 	strb.w	r1, [r2, #32]
    5824:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    5828:	f81a 1001 	ldrb.w	r1, [sl, r1]
    582c:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
    5830:	f103 012d 	add.w	r1, r3, #45	; 0x2d
    5834:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5838:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    583c:	f103 012e 	add.w	r1, r3, #46	; 0x2e
    5840:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5844:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    5848:	f103 012f 	add.w	r1, r3, #47	; 0x2f
    584c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5850:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    5854:	f103 0130 	add.w	r1, r3, #48	; 0x30
    5858:	f81a 1001 	ldrb.w	r1, [sl, r1]
    585c:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
    5860:	f103 0131 	add.w	r1, r3, #49	; 0x31
    5864:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5868:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
    586c:	f103 0132 	add.w	r1, r3, #50	; 0x32
    5870:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5874:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    5878:	f103 0133 	add.w	r1, r3, #51	; 0x33
    587c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5880:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    5884:	f103 0134 	add.w	r1, r3, #52	; 0x34
    5888:	f81a 1001 	ldrb.w	r1, [sl, r1]
    588c:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    5890:	f103 0135 	add.w	r1, r3, #53	; 0x35
    5894:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5898:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    589c:	f103 0136 	add.w	r1, r3, #54	; 0x36
    58a0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    58a4:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
    58a8:	f103 0137 	add.w	r1, r3, #55	; 0x37
    58ac:	f81a 1001 	ldrb.w	r1, [sl, r1]
    58b0:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
    58b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
    58b8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    58bc:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
    58c0:	f103 0139 	add.w	r1, r3, #57	; 0x39
    58c4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    58c8:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
    58cc:	f103 013a 	add.w	r1, r3, #58	; 0x3a
    58d0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    58d4:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    58d8:	f103 013b 	add.w	r1, r3, #59	; 0x3b
    58dc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    58e0:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
    58e4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    58e8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    58ec:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
    58f0:	f103 013d 	add.w	r1, r3, #61	; 0x3d
    58f4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    58f8:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
    58fc:	f103 013e 	add.w	r1, r3, #62	; 0x3e
    5900:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5904:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
    5908:	f103 013f 	add.w	r1, r3, #63	; 0x3f
    590c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5910:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
    5914:	f103 0140 	add.w	r1, r3, #64	; 0x40
    5918:	f81a 1001 	ldrb.w	r1, [sl, r1]
    591c:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
    5920:	f103 0141 	add.w	r1, r3, #65	; 0x41
    5924:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5928:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
    592c:	f103 0142 	add.w	r1, r3, #66	; 0x42
    5930:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5934:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
    5938:	f103 0143 	add.w	r1, r3, #67	; 0x43
    593c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5940:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
    5944:	f103 0144 	add.w	r1, r3, #68	; 0x44
    5948:	f81a 1001 	ldrb.w	r1, [sl, r1]
    594c:	f8df a05c 	ldr.w	sl, [pc, #92]	; 59ac <parsePreset+0x3ec>
    5950:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
    5954:	f103 0145 	add.w	r1, r3, #69	; 0x45
    5958:	f81a 1001 	ldrb.w	r1, [sl, r1]
    595c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    5960:	f103 0146 	add.w	r1, r3, #70	; 0x46
    5964:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5968:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
    596c:	f103 0147 	add.w	r1, r3, #71	; 0x47
    5970:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5974:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    5978:	f103 0148 	add.w	r1, r3, #72	; 0x48
    597c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5980:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    5984:	f103 0149 	add.w	r1, r3, #73	; 0x49
    5988:	f81a 1001 	ldrb.w	r1, [sl, r1]
    598c:	e010      	b.n	59b0 <parsePreset+0x3f0>
    598e:	bf00      	nop
    5990:	58020000 	.word	0x58020000
    5994:	20005748 	.word	0x20005748
    5998:	30000000 	.word	0x30000000
    599c:	2000073c 	.word	0x2000073c
    59a0:	30032000 	.word	0x30032000
    59a4:	2001aa84 	.word	0x2001aa84
    59a8:	30033380 	.word	0x30033380
    59ac:	30032380 	.word	0x30032380
    59b0:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
    59b4:	f103 014a 	add.w	r1, r3, #74	; 0x4a
    59b8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    59bc:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
    59c0:	f103 014b 	add.w	r1, r3, #75	; 0x4b
    59c4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    59c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    59cc:	f103 014c 	add.w	r1, r3, #76	; 0x4c
    59d0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    59d4:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    59d8:	f103 014d 	add.w	r1, r3, #77	; 0x4d
    59dc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    59e0:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
    59e4:	f103 014e 	add.w	r1, r3, #78	; 0x4e
    59e8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    59ec:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
    59f0:	f103 014f 	add.w	r1, r3, #79	; 0x4f
    59f4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    59f8:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
    59fc:	f103 0150 	add.w	r1, r3, #80	; 0x50
    5a00:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5a04:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
    5a08:	f103 0151 	add.w	r1, r3, #81	; 0x51
    5a0c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5a10:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
    5a14:	f103 0152 	add.w	r1, r3, #82	; 0x52
    5a18:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5a1c:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
    5a20:	f103 0153 	add.w	r1, r3, #83	; 0x53
    5a24:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5a28:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
    5a2c:	f103 0154 	add.w	r1, r3, #84	; 0x54
    5a30:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5a34:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
    5a38:	f103 0155 	add.w	r1, r3, #85	; 0x55
    5a3c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5a40:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    5a44:	f103 0156 	add.w	r1, r3, #86	; 0x56
    5a48:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5a4c:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
    5a50:	f103 0157 	add.w	r1, r3, #87	; 0x57
    5a54:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5a58:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    5a5c:	f103 0158 	add.w	r1, r3, #88	; 0x58
    5a60:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5a64:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
    5a68:	f103 0159 	add.w	r1, r3, #89	; 0x59
    5a6c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5a70:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
    5a74:	f103 015a 	add.w	r1, r3, #90	; 0x5a
    5a78:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5a7c:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
    5a80:	f103 015b 	add.w	r1, r3, #91	; 0x5b
    5a84:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5a88:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
    5a8c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    5a90:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5a94:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
    5a98:	f103 015d 	add.w	r1, r3, #93	; 0x5d
    5a9c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5aa0:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
    5aa4:	f103 015e 	add.w	r1, r3, #94	; 0x5e
    5aa8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5aac:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
    5ab0:	f103 015f 	add.w	r1, r3, #95	; 0x5f
    5ab4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5ab8:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
    5abc:	f103 0160 	add.w	r1, r3, #96	; 0x60
    5ac0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5ac4:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
    5ac8:	f103 0161 	add.w	r1, r3, #97	; 0x61
    5acc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5ad0:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
    5ad4:	f103 0162 	add.w	r1, r3, #98	; 0x62
    5ad8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5adc:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
    5ae0:	f103 0163 	add.w	r1, r3, #99	; 0x63
    5ae4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5ae8:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    5aec:	f103 0164 	add.w	r1, r3, #100	; 0x64
    5af0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5af4:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
    5af8:	f103 0165 	add.w	r1, r3, #101	; 0x65
    5afc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5b00:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
    5b04:	f103 0166 	add.w	r1, r3, #102	; 0x66
    5b08:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5b0c:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
    5b10:	f103 0167 	add.w	r1, r3, #103	; 0x67
    5b14:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5b18:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    5b1c:	f103 0168 	add.w	r1, r3, #104	; 0x68
    5b20:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5b24:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    5b28:	f103 0169 	add.w	r1, r3, #105	; 0x69
    5b2c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5b30:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    5b34:	f103 016a 	add.w	r1, r3, #106	; 0x6a
    5b38:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5b3c:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
    5b40:	f103 016b 	add.w	r1, r3, #107	; 0x6b
    5b44:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5b48:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
    5b4c:	f103 016c 	add.w	r1, r3, #108	; 0x6c
    5b50:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5b54:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
    5b58:	f103 016d 	add.w	r1, r3, #109	; 0x6d
    5b5c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5b60:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    5b64:	f103 016e 	add.w	r1, r3, #110	; 0x6e
    5b68:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5b6c:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
    5b70:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    5b74:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5b78:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
    5b7c:	f103 0170 	add.w	r1, r3, #112	; 0x70
    5b80:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5b84:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
    5b88:	f103 0171 	add.w	r1, r3, #113	; 0x71
    5b8c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5b90:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    5b94:	f103 0172 	add.w	r1, r3, #114	; 0x72
    5b98:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5b9c:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
    5ba0:	f103 0173 	add.w	r1, r3, #115	; 0x73
    5ba4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5ba8:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
    5bac:	f103 0174 	add.w	r1, r3, #116	; 0x74
    5bb0:	f81a 1001 	ldrb.w	r1, [sl, r1]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    5bb4:	f81a 4000 	ldrb.w	r4, [sl, r0]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    5bb8:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    5bbc:	f103 0175 	add.w	r1, r3, #117	; 0x75
    5bc0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5bc4:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
    5bc8:	f103 0176 	add.w	r1, r3, #118	; 0x76
    5bcc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5bd0:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
    5bd4:	f103 0177 	add.w	r1, r3, #119	; 0x77
    5bd8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5bdc:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
    5be0:	f103 0178 	add.w	r1, r3, #120	; 0x78
    5be4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5be8:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
    5bec:	f103 0179 	add.w	r1, r3, #121	; 0x79
    5bf0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5bf4:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
    5bf8:	f103 017a 	add.w	r1, r3, #122	; 0x7a
    5bfc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    5c00:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    5c04:	eb0a 0100 	add.w	r1, sl, r0
    5c08:	7849      	ldrb	r1, [r1, #1]
    5c0a:	eb01 2104 	add.w	r1, r1, r4, lsl #8
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    5c0e:	f103 047b 	add.w	r4, r3, #123	; 0x7b
    5c12:	f81a 4004 	ldrb.w	r4, [sl, r4]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    5c16:	b289      	uxth	r1, r1
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    5c18:	f882 4075 	strb.w	r4, [r2, #117]	; 0x75
    5c1c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
    5c20:	f81a 4004 	ldrb.w	r4, [sl, r4]
    5c24:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
    5c28:	f103 047d 	add.w	r4, r3, #125	; 0x7d
    5c2c:	f81a 4004 	ldrb.w	r4, [sl, r4]
    5c30:	f882 4077 	strb.w	r4, [r2, #119]	; 0x77
	if (paramCount > size)
    5c34:	9a01      	ldr	r2, [sp, #4]
    5c36:	4291      	cmp	r1, r2
    5c38:	dc0c      	bgt.n	5c54 <parsePreset+0x694>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    5c3a:	eb00 0241 	add.w	r2, r0, r1, lsl #1
	if (paramEndCheck != 0xefef)
    5c3e:	f64e 75ef 	movw	r5, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    5c42:	004c      	lsls	r4, r1, #1
    5c44:	4452      	add	r2, sl
    5c46:	7896      	ldrb	r6, [r2, #2]
    5c48:	78d0      	ldrb	r0, [r2, #3]
    5c4a:	eb00 2006 	add.w	r0, r0, r6, lsl #8
	if (paramEndCheck != 0xefef)
    5c4e:	b280      	uxth	r0, r0
    5c50:	42a8      	cmp	r0, r5
    5c52:	d00c      	beq.n	5c6e <parsePreset+0x6ae>
		audioMasterLevel = 1.0f;
    5c54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    5c58:	4bba      	ldr	r3, [pc, #744]	; (5f44 <parsePreset+0x984>)
    5c5a:	2200      	movs	r2, #0
		audioMasterLevel = 1.0f;
    5c5c:	48ba      	ldr	r0, [pc, #744]	; (5f48 <parsePreset+0x988>)
    5c5e:	6001      	str	r1, [r0, #0]
		presetWaitingToParse = 0;
    5c60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    5c62:	b662      	cpsie	i
}
    5c64:	b00f      	add	sp, #60	; 0x3c
    5c66:	ecbd 8b02 	vpop	{d8}
    5c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    5c6e:	7910      	ldrb	r0, [r2, #4]
    5c70:	7952      	ldrb	r2, [r2, #5]
    5c72:	eb02 2200 	add.w	r2, r2, r0, lsl #8
    5c76:	b290      	uxth	r0, r2
	if (presetVersionNumber == 0)
    5c78:	9a06      	ldr	r2, [sp, #24]
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    5c7a:	9007      	str	r0, [sp, #28]
	if (presetVersionNumber == 0)
    5c7c:	2a00      	cmp	r2, #0
    5c7e:	f000 8118 	beq.w	5eb2 <parsePreset+0x8f2>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    5c82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5c86:	f103 0284 	add.w	r2, r3, #132	; 0x84
    5c8a:	4408      	add	r0, r1
    5c8c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    5c90:	b292      	uxth	r2, r2
	if (mappingEndLocation > size)
    5c92:	9801      	ldr	r0, [sp, #4]
    5c94:	4282      	cmp	r2, r0
    5c96:	dcdd      	bgt.n	5c54 <parsePreset+0x694>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    5c98:	eb0a 0502 	add.w	r5, sl, r2
    5c9c:	f81a 0002 	ldrb.w	r0, [sl, r2]
    5ca0:	786a      	ldrb	r2, [r5, #1]
    5ca2:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    5ca6:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    5caa:	b292      	uxth	r2, r2
    5cac:	4282      	cmp	r2, r0
    5cae:	d1d1      	bne.n	5c54 <parsePreset+0x694>
	bufferIndex = bufferIndex + 2;
    5cb0:	f103 0780 	add.w	r7, r3, #128	; 0x80
    5cb4:	463d      	mov	r5, r7
	for (int i = 0; i < paramCount; i++)
    5cb6:	2900      	cmp	r1, #0
    5cb8:	f000 86f5 	beq.w	6aa6 <parsePreset+0x14e6>
    5cbc:	4427      	add	r7, r4
    5cbe:	48a3      	ldr	r0, [pc, #652]	; (5f4c <parsePreset+0x98c>)
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    5cc0:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 5f50 <parsePreset+0x990>
    5cc4:	b2bf      	uxth	r7, r7
	for (int i = 0; i < paramCount; i++)
    5cc6:	4681      	mov	r9, r0
    5cc8:	4604      	mov	r4, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    5cca:	eb0a 0205 	add.w	r2, sl, r5
    5cce:	f81a 6005 	ldrb.w	r6, [sl, r5]
		bufferIndex += 2;
    5cd2:	3502      	adds	r5, #2
	for (int i = 0; i < paramCount; i++)
    5cd4:	341c      	adds	r4, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    5cd6:	7852      	ldrb	r2, [r2, #1]
		bufferIndex += 2;
    5cd8:	b2ad      	uxth	r5, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    5cda:	eb02 2206 	add.w	r2, r2, r6, lsl #8
	for (int i = 0; i < paramCount; i++)
    5cde:	42af      	cmp	r7, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    5ce0:	ee07 2a90 	vmov	s15, r2
    5ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
    5cec:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
    5cf0:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    5cf4:	d1e9      	bne.n	5cca <parsePreset+0x70a>
    5cf6:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
    5cfa:	4a94      	ldr	r2, [pc, #592]	; (5f4c <parsePreset+0x98c>)
    5cfc:	4e95      	ldr	r6, [pc, #596]	; (5f54 <parsePreset+0x994>)
    5cfe:	eb00 0484 	add.w	r4, r0, r4, lsl #2
		params[i].setParam = &blankFunction;
    5d02:	6156      	str	r6, [r2, #20]
	for (int i = 0; i < paramCount; i++)
    5d04:	321c      	adds	r2, #28
    5d06:	4294      	cmp	r4, r2
    5d08:	d1fb      	bne.n	5d02 <parsePreset+0x742>
    5d0a:	4a93      	ldr	r2, [pc, #588]	; (5f58 <parsePreset+0x998>)
		params[i].scaleFunc = &scaleDefault;
    5d0c:	6102      	str	r2, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    5d0e:	301c      	adds	r0, #28
    5d10:	42a0      	cmp	r0, r4
    5d12:	d1fb      	bne.n	5d0c <parsePreset+0x74c>
		bufferIndex += 2;
    5d14:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5d18:	3380      	adds	r3, #128	; 0x80
    5d1a:	b29d      	uxth	r5, r3
	for (int i = paramCount; i < NUM_PARAMS; i++)
    5d1c:	299c      	cmp	r1, #156	; 0x9c
    5d1e:	f000 86bf 	beq.w	6aa0 <parsePreset+0x14e0>
    5d22:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    5d26:	4c8d      	ldr	r4, [pc, #564]	; (5f5c <parsePreset+0x99c>)
    5d28:	4e8a      	ldr	r6, [pc, #552]	; (5f54 <parsePreset+0x994>)
    5d2a:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    5d2e:	4a8a      	ldr	r2, [pc, #552]	; (5f58 <parsePreset+0x998>)
			params[i].zeroToOneVal[v] = 0.0f;
    5d30:	2100      	movs	r1, #0
    5d32:	6019      	str	r1, [r3, #0]
    5d34:	6059      	str	r1, [r3, #4]
		params[i].setParam = &blankFunction;
    5d36:	e9c3 2604 	strd	r2, r6, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    5d3a:	331c      	adds	r3, #28
    5d3c:	429c      	cmp	r4, r3
    5d3e:	d1f8      	bne.n	5d32 <parsePreset+0x772>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    5d40:	4a87      	ldr	r2, [pc, #540]	; (5f60 <parsePreset+0x9a0>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    5d42:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    5d46:	4b87      	ldr	r3, [pc, #540]	; (5f64 <parsePreset+0x9a4>)
	for (int i = 0; i < NUM_EFFECT; i++)
    5d48:	2700      	movs	r7, #0
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    5d4a:	f8c9 22e8 	str.w	r2, [r9, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    5d4e:	f8c9 2454 	str.w	r2, [r9, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    5d52:	f8c9 25c0 	str.w	r2, [r9, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    5d56:	4a84      	ldr	r2, [pc, #528]	; (5f68 <parsePreset+0x9a8>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    5d58:	f8c9 3be0 	str.w	r3, [r9, #3040]	; 0xbe0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    5d5c:	f8c9 2304 	str.w	r2, [r9, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    5d60:	f8c9 2470 	str.w	r2, [r9, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    5d64:	f8c9 25dc 	str.w	r2, [r9, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    5d68:	4a80      	ldr	r2, [pc, #512]	; (5f6c <parsePreset+0x9ac>)
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    5d6a:	f8c9 3bfc 	str.w	r3, [r9, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    5d6e:	f8c9 3c34 	str.w	r3, [r9, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    5d72:	f8c9 3c88 	str.w	r3, [r9, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    5d76:	f8c9 3ca4 	str.w	r3, [r9, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    5d7a:	f8c9 3cdc 	str.w	r3, [r9, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    5d7e:	f8c9 3d30 	str.w	r3, [r9, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    5d82:	f8c9 3d4c 	str.w	r3, [r9, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    5d86:	f8c9 3d84 	str.w	r3, [r9, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    5d8a:	f8c9 3dd8 	str.w	r3, [r9, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    5d8e:	f8c9 3df4 	str.w	r3, [r9, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    5d92:	f8c9 3e2c 	str.w	r3, [r9, #3628]	; 0xe2c
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    5d96:	f8c9 2aac 	str.w	r2, [r9, #2732]	; 0xaac
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    5d9a:	4b75      	ldr	r3, [pc, #468]	; (5f70 <parsePreset+0x9b0>)
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    5d9c:	f8c9 2b54 	str.w	r2, [r9, #2900]	; 0xb54
	params[Transpose].scaleFunc = &scaleTranspose;
    5da0:	4a74      	ldr	r2, [pc, #464]	; (5f74 <parsePreset+0x9b4>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    5da2:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 5f9c <parsePreset+0x9dc>
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    5da6:	4e74      	ldr	r6, [pc, #464]	; (5f78 <parsePreset+0x9b8>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    5da8:	f8c9 32cc 	str.w	r3, [r9, #716]	; 0x2cc
    5dac:	f6ab 181c 	subw	r8, fp, #2332	; 0x91c
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    5db0:	f8c9 3358 	str.w	r3, [r9, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    5db4:	f8c9 3438 	str.w	r3, [r9, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    5db8:	f8c9 34c4 	str.w	r3, [r9, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    5dbc:	f8c9 35a4 	str.w	r3, [r9, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    5dc0:	f8c9 3630 	str.w	r3, [r9, #1584]	; 0x630
	params[Transpose].scaleFunc = &scaleTranspose;
    5dc4:	f8c9 21d0 	str.w	r2, [r9, #464]	; 0x1d0
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    5dc8:	4b6c      	ldr	r3, [pc, #432]	; (5f7c <parsePreset+0x9bc>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    5dca:	4a6d      	ldr	r2, [pc, #436]	; (5f80 <parsePreset+0x9c0>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    5dcc:	f8c9 3e80 	str.w	r3, [r9, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    5dd0:	f8c9 3f0c 	str.w	r3, [r9, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    5dd4:	f8c9 6ae4 	str.w	r6, [r9, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    5dd8:	f8c9 6b8c 	str.w	r6, [r9, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    5ddc:	f8c9 21ec 	str.w	r2, [r9, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    5de0:	f8c9 3f98 	str.w	r3, [r9, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    5de4:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    5de8:	4b66      	ldr	r3, [pc, #408]	; (5f84 <parsePreset+0x9c4>)
    5dea:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    5dee:	edd8 7a00 	vldr	s15, [r8]
			setEffectsFunctions(effectType, i);
    5df2:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    5df4:	ee67 7a87 	vmul.f32	s15, s15, s14
    5df8:	fef8 7a67 	vrinta.f32	s15, s15
    5dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5e00:	edcd 7a01 	vstr	s15, [sp, #4]
    5e04:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    5e08:	280b      	cmp	r0, #11
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    5e0a:	bf88      	it	hi
    5e0c:	f8c8 6064 	strhi.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    5e10:	f004 fa1e 	bl	a250 <__setEffectsFunctions_veneer>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    5e14:	edd8 7a01 	vldr	s15, [r8, #4]
			setEffectsFunctions(effectType, i);
    5e18:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    5e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
    5e1e:	fef8 7a67 	vrinta.f32	s15, s15
    5e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5e26:	edcd 7a01 	vstr	s15, [sp, #4]
    5e2a:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    5e2e:	280b      	cmp	r0, #11
    5e30:	d947      	bls.n	5ec2 <parsePreset+0x902>
	for (int i = 0; i < NUM_EFFECT; i++)
    5e32:	3701      	adds	r7, #1
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    5e34:	f8c8 6064 	str.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    5e38:	f004 fa0a 	bl	a250 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    5e3c:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    5e40:	2f04      	cmp	r7, #4
    5e42:	d1d4      	bne.n	5dee <parsePreset+0x82e>
    5e44:	4f41      	ldr	r7, [pc, #260]	; (5f4c <parsePreset+0x98c>)
    5e46:	46b9      	mov	r9, r7
    5e48:	463e      	mov	r6, r7
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    5e4a:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    5e4c:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    5e4e:	ed16 0a07 	vldr	s0, [r6, #-28]	; 0xffffffe4
    5e52:	4798      	blx	r3
    5e54:	ed06 0a05 	vstr	s0, [r6, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    5e58:	42a6      	cmp	r6, r4
    5e5a:	d1f6      	bne.n	5e4a <parsePreset+0x88a>
    5e5c:	4e3b      	ldr	r6, [pc, #236]	; (5f4c <parsePreset+0x98c>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    5e5e:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    5e60:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    5e62:	ed16 0a06 	vldr	s0, [r6, #-24]	; 0xffffffe8
    5e66:	4798      	blx	r3
    5e68:	ed06 0a04 	vstr	s0, [r6, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    5e6c:	42a6      	cmp	r6, r4
    5e6e:	d1f6      	bne.n	5e5e <parsePreset+0x89e>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    5e70:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    5e74:	edd9 7af7 	vldr	s15, [r9, #988]	; 0x3dc
    5e78:	ee67 7a87 	vmul.f32	s15, s15, s14
    5e7c:	fef8 7a67 	vrinta.f32	s15, s15
    5e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5e84:	ee17 3a90 	vmov	r3, s15
	switch (oscshape)
    5e88:	2b06      	cmp	r3, #6
    5e8a:	d833      	bhi.n	5ef4 <parsePreset+0x934>
    5e8c:	e8df f013 	tbh	[pc, r3, lsl #1]
    5e90:	002f0603 	.word	0x002f0603
    5e94:	05f905fe 	.word	0x05f905fe
    5e98:	05ef05f4 	.word	0x05ef05f4
    5e9c:	05ea      	.short	0x05ea
		if (buffer[bufferIndex + 1] == 18)
    5e9e:	f89a 3001 	ldrb.w	r3, [sl, #1]
    5ea2:	2b12      	cmp	r3, #18
    5ea4:	d016      	beq.n	5ed4 <parsePreset+0x914>
		presetName[i] = buffer[bufferIndex];
    5ea6:	f89a 4004 	ldrb.w	r4, [sl, #4]
		bufferIndex = 4;
    5eaa:	2304      	movs	r3, #4
	uint16_t presetVersionNumber = 0;
    5eac:	9506      	str	r5, [sp, #24]
    5eae:	f7ff bbab 	b.w	5608 <parsePreset+0x48>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    5eb2:	f103 0284 	add.w	r2, r3, #132	; 0x84
    5eb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5eba:	4422      	add	r2, r4
    5ebc:	4402      	add	r2, r0
    5ebe:	b292      	uxth	r2, r2
    5ec0:	e6e7      	b.n	5c92 <parsePreset+0x6d2>
			setEffectsFunctions(effectType, i);
    5ec2:	4639      	mov	r1, r7
	for (int i = 0; i < NUM_EFFECT; i++)
    5ec4:	3701      	adds	r7, #1
			setEffectsFunctions(effectType, i);
    5ec6:	f004 f9c3 	bl	a250 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    5eca:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    5ece:	2f04      	cmp	r7, #4
    5ed0:	d18d      	bne.n	5dee <parsePreset+0x82e>
    5ed2:	e7b7      	b.n	5e44 <parsePreset+0x884>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    5ed4:	f89a 2002 	ldrb.w	r2, [sl, #2]
    5ed8:	f89a 3003 	ldrb.w	r3, [sl, #3]
		presetName[i] = buffer[bufferIndex];
    5edc:	f89a 4004 	ldrb.w	r4, [sl, #4]
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    5ee0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    5ee4:	b29b      	uxth	r3, r3
    5ee6:	9306      	str	r3, [sp, #24]
		bufferIndex = 4;
    5ee8:	2304      	movs	r3, #4
    5eea:	f7ff bb8d 	b.w	5608 <parsePreset+0x48>
			  shapeTick[i] = &sineTriTick;
    5eee:	4b26      	ldr	r3, [pc, #152]	; (5f88 <parsePreset+0x9c8>)
    5ef0:	4a26      	ldr	r2, [pc, #152]	; (5f8c <parsePreset+0x9cc>)
    5ef2:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    5ef4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5ef8:	ed99 7aaa 	vldr	s14, [r9, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    5efc:	4a24      	ldr	r2, [pc, #144]	; (5f90 <parsePreset+0x9d0>)
    5efe:	4925      	ldr	r1, [pc, #148]	; (5f94 <parsePreset+0x9d4>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    5f00:	eeb4 7ae7 	vcmpe.f32	s14, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    5f04:	edd2 7a00 	vldr	s15, [r2]
    5f08:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    5f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    5f10:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscsEnabled[i] = 0;
    5f14:	bfd4      	ite	le
    5f16:	2000      	movle	r0, #0
			oscsEnabled[i] = 1;
    5f18:	2001      	movgt	r0, #1
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    5f1a:	fef8 7a67 	vrinta.f32	s15, s15
    5f1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5f22:	7008      	strb	r0, [r1, #0]
			enabledCount++;
    5f24:	4603      	mov	r3, r0
    5f26:	491c      	ldr	r1, [pc, #112]	; (5f98 <parsePreset+0x9d8>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    5f28:	ee17 2a90 	vmov	r2, s15
    5f2c:	6008      	str	r0, [r1, #0]
	switch (oscshape)
    5f2e:	2a06      	cmp	r2, #6
    5f30:	d839      	bhi.n	5fa6 <parsePreset+0x9e6>
    5f32:	e8df f012 	tbh	[pc, r2, lsl #1]
    5f36:	0592      	.short	0x0592
    5f38:	058d0035 	.word	0x058d0035
    5f3c:	05830588 	.word	0x05830588
    5f40:	0579057e 	.word	0x0579057e
    5f44:	2001aa98 	.word	0x2001aa98
    5f48:	2000073c 	.word	0x2000073c
    5f4c:	20019968 	.word	0x20019968
    5f50:	377ffff6 	.word	0x377ffff6
    5f54:	00005321 	.word	0x00005321
    5f58:	00005261 	.word	0x00005261
    5f5c:	2001aa78 	.word	0x2001aa78
    5f60:	000052a1 	.word	0x000052a1
    5f64:	00005461 	.word	0x00005461
    5f68:	000052c1 	.word	0x000052c1
    5f6c:	000052e1 	.word	0x000052e1
    5f70:	00005281 	.word	0x00005281
    5f74:	00005341 	.word	0x00005341
    5f78:	000053c1 	.word	0x000053c1
    5f7c:	000054e1 	.word	0x000054e1
    5f80:	00005381 	.word	0x00005381
    5f84:	00005301 	.word	0x00005301
    5f88:	20005bfc 	.word	0x20005bfc
    5f8c:	000020c1 	.word	0x000020c1
    5f90:	20019eb0 	.word	0x20019eb0
    5f94:	20005604 	.word	0x20005604
    5f98:	2001995c 	.word	0x2001995c
    5f9c:	2001a968 	.word	0x2001a968
			  shapeTick[i] = &sineTriTick;
    5fa0:	4a16      	ldr	r2, [pc, #88]	; (5ffc <parsePreset+0xa3c>)
    5fa2:	4817      	ldr	r0, [pc, #92]	; (6000 <parsePreset+0xa40>)
    5fa4:	6050      	str	r0, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    5fa6:	4a17      	ldr	r2, [pc, #92]	; (6004 <parsePreset+0xa44>)
    5fa8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5fac:	ed92 7a00 	vldr	s14, [r2]
    5fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5fb8:	f340 850b 	ble.w	69d2 <parsePreset+0x1412>
			enabledCount++;
    5fbc:	3301      	adds	r3, #1
			oscOn[i] = 1;
    5fbe:	2201      	movs	r2, #1
			enabledCount++;
    5fc0:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    5fc2:	4610      	mov	r0, r2
    5fc4:	4c10      	ldr	r4, [pc, #64]	; (6008 <parsePreset+0xa48>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    5fc6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    5fca:	6048      	str	r0, [r1, #4]
    5fcc:	7062      	strb	r2, [r4, #1]
    5fce:	4a0f      	ldr	r2, [pc, #60]	; (600c <parsePreset+0xa4c>)
    5fd0:	edd2 7a00 	vldr	s15, [r2]
    5fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
    5fd8:	fef8 7a67 	vrinta.f32	s15, s15
    5fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5fe0:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    5fe4:	2a06      	cmp	r2, #6
    5fe6:	d816      	bhi.n	6016 <parsePreset+0xa56>
    5fe8:	e8df f012 	tbh	[pc, r2, lsl #1]
    5fec:	05140519 	.word	0x05140519
    5ff0:	050a050f 	.word	0x050a050f
    5ff4:	00120505 	.word	0x00120505
    5ff8:	0500      	.short	0x0500
    5ffa:	bf00      	nop
    5ffc:	20005bfc 	.word	0x20005bfc
    6000:	000020c1 	.word	0x000020c1
    6004:	20019d7c 	.word	0x20019d7c
    6008:	20005604 	.word	0x20005604
    600c:	2001a01c 	.word	0x2001a01c
			  shapeTick[i] = &triTick;
    6010:	4a9a      	ldr	r2, [pc, #616]	; (627c <parsePreset+0xcbc>)
    6012:	489b      	ldr	r0, [pc, #620]	; (6280 <parsePreset+0xcc0>)
    6014:	6090      	str	r0, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    6016:	4a9b      	ldr	r2, [pc, #620]	; (6284 <parsePreset+0xcc4>)
    6018:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    601c:	ed92 7a00 	vldr	s14, [r2]
    6020:	eeb4 7ae7 	vcmpe.f32	s14, s15
    6024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6028:	f340 84cf 	ble.w	69ca <parsePreset+0x140a>
			enabledCount++;
    602c:	3301      	adds	r3, #1
			oscOn[i] = 1;
    602e:	2201      	movs	r2, #1
			enabledCount++;
    6030:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    6032:	4610      	mov	r0, r2
	if (params[Noise].realVal[0]  > 0.5f)
    6034:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    6038:	4e93      	ldr	r6, [pc, #588]	; (6288 <parsePreset+0xcc8>)
	if (params[Noise].realVal[0]  > 0.5f)
    603a:	ed99 6a80 	vldr	s12, [r9, #512]	; 0x200
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    603e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    6042:	6088      	str	r0, [r1, #8]
	oscAmpMult = oscAmpMultArray[enabledCount];
    6044:	f206 4444 	addw	r4, r6, #1092	; 0x444
    6048:	4990      	ldr	r1, [pc, #576]	; (628c <parsePreset+0xccc>)
	if (params[Noise].realVal[0]  > 0.5f)
    604a:	eeb4 6ae7 	vcmpe.f32	s12, s15
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    604e:	edd6 7a00 	vldr	s15, [r6]
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    6052:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    6056:	708a      	strb	r2, [r1, #2]
	oscAmpMult = oscAmpMultArray[enabledCount];
    6058:	4a8d      	ldr	r2, [pc, #564]	; (6290 <parsePreset+0xcd0>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    605a:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (params[Noise].realVal[0]  > 0.5f)
    605e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	oscAmpMult = oscAmpMultArray[enabledCount];
    6062:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6066:	4a8b      	ldr	r2, [pc, #556]	; (6294 <parsePreset+0xcd4>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    6068:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    606c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    6070:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    6072:	4633      	mov	r3, r6
	if (params[Noise].realVal[0]  > 0.5f)
    6074:	bfcc      	ite	gt
    6076:	2301      	movgt	r3, #1
    6078:	2300      	movle	r3, #0
	oscAmpMult = oscAmpMultArray[enabledCount];
    607a:	6011      	str	r1, [r2, #0]
		setFilterTypes(filterType, i);
    607c:	ee17 0a90 	vmov	r0, s15
	if (params[Noise].realVal[0]  > 0.5f)
    6080:	4a85      	ldr	r2, [pc, #532]	; (6298 <parsePreset+0xcd8>)
		setFilterTypes(filterType, i);
    6082:	2100      	movs	r1, #0
	if (params[Noise].realVal[0]  > 0.5f)
    6084:	7013      	strb	r3, [r2, #0]
		setFilterTypes(filterType, i);
    6086:	f004 f903 	bl	a290 <__setFilterTypes_veneer>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    608a:	edd6 7a2a 	vldr	s15, [r6, #168]	; 0xa8
	for (int i = 0; i < NUM_LFOS; i++)
    608e:	460e      	mov	r6, r1
		setFilterTypes(filterType, i);
    6090:	2101      	movs	r1, #1
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    6092:	ee67 7aa6 	vmul.f32	s15, s15, s13
    6096:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    609a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    609e:	ee17 0a90 	vmov	r0, s15
    60a2:	f004 f8f5 	bl	a290 <__setFilterTypes_veneer>
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    60a6:	4623      	mov	r3, r4
		setLFOShapes(LFOShape, i);
    60a8:	4631      	mov	r1, r6
	for (int i = 0; i < NUM_LFOS; i++)
    60aa:	3601      	adds	r6, #1
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    60ac:	348c      	adds	r4, #140	; 0x8c
    60ae:	edd3 7a00 	vldr	s15, [r3]
    60b2:	ee67 7a87 	vmul.f32	s15, s15, s14
    60b6:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    60ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    60be:	ee17 0a90 	vmov	r0, s15
    60c2:	f004 f9f9 	bl	a4b8 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    60c6:	2e04      	cmp	r6, #4
    60c8:	d1ed      	bne.n	60a6 <parsePreset+0xae6>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    60ca:	4874      	ldr	r0, [pc, #464]	; (629c <parsePreset+0xcdc>)
	for (int i = 0; i < NUM_PARAMS; i++)
    60cc:	f04f 0800 	mov.w	r8, #0
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    60d0:	4b73      	ldr	r3, [pc, #460]	; (62a0 <parsePreset+0xce0>)
			params[i].objectNumber = 1;
    60d2:	2601      	movs	r6, #1
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    60d4:	f8c9 02d0 	str.w	r0, [r9, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    60d8:	f8c9 043c 	str.w	r0, [r9, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    60dc:	f8c9 05a8 	str.w	r0, [r9, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    60e0:	4870      	ldr	r0, [pc, #448]	; (62a4 <parsePreset+0xce4>)
	params[Effect1Mix].setParam = &fxMixSet;
    60e2:	4971      	ldr	r1, [pc, #452]	; (62a8 <parsePreset+0xce8>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    60e4:	f8c9 035c 	str.w	r0, [r9, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    60e8:	f8c9 04c8 	str.w	r0, [r9, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    60ec:	f8c9 0634 	str.w	r0, [r9, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    60f0:	6818      	ldr	r0, [r3, #0]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    60f2:	4c6e      	ldr	r4, [pc, #440]	; (62ac <parsePreset+0xcec>)
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    60f4:	f8c9 0714 	str.w	r0, [r9, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    60f8:	6858      	ldr	r0, [r3, #4]
	params[Effect1Mix].setParam = &fxMixSet;
    60fa:	f8c9 17a0 	str.w	r1, [r9, #1952]	; 0x7a0
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    60fe:	f8c9 0730 	str.w	r0, [r9, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    6102:	6898      	ldr	r0, [r3, #8]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    6104:	f8c9 47bc 	str.w	r4, [r9, #1980]	; 0x7bc
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    6108:	f8c9 074c 	str.w	r0, [r9, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    610c:	68d8      	ldr	r0, [r3, #12]
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    610e:	4a68      	ldr	r2, [pc, #416]	; (62b0 <parsePreset+0xcf0>)
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    6110:	f8c9 0768 	str.w	r0, [r9, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    6114:	6918      	ldr	r0, [r3, #16]
    6116:	f8c9 0784 	str.w	r0, [r9, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    611a:	6958      	ldr	r0, [r3, #20]
    611c:	f8c9 07f4 	str.w	r0, [r9, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    6120:	6998      	ldr	r0, [r3, #24]
    6122:	f8c9 0810 	str.w	r0, [r9, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    6126:	69d8      	ldr	r0, [r3, #28]
    6128:	f8c9 082c 	str.w	r0, [r9, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
    612c:	4861      	ldr	r0, [pc, #388]	; (62b4 <parsePreset+0xcf4>)
    612e:	f8c9 0228 	str.w	r0, [r9, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    6132:	4861      	ldr	r0, [pc, #388]	; (62b8 <parsePreset+0xcf8>)
    6134:	f8c9 0260 	str.w	r0, [r9, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    6138:	4860      	ldr	r0, [pc, #384]	; (62bc <parsePreset+0xcfc>)
    613a:	f8c9 0244 	str.w	r0, [r9, #580]	; 0x244
	params[Master].setParam = &setMaster;
    613e:	4860      	ldr	r0, [pc, #384]	; (62c0 <parsePreset+0xd00>)
    6140:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    6144:	485f      	ldr	r0, [pc, #380]	; (62c4 <parsePreset+0xd04>)
    6146:	f8c9 01d4 	str.w	r0, [r9, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    614a:	485f      	ldr	r0, [pc, #380]	; (62c8 <parsePreset+0xd08>)
    614c:	f8c9 01f0 	str.w	r0, [r9, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    6150:	485e      	ldr	r0, [pc, #376]	; (62cc <parsePreset+0xd0c>)
    6152:	f8cb 00d0 	str.w	r0, [fp, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    6156:	6a18      	ldr	r0, [r3, #32]
    6158:	f8c9 0848 	str.w	r0, [r9, #2120]	; 0x848
	params[Effect2Mix].setParam = &fxMixSet;
    615c:	f8c9 1880 	str.w	r1, [r9, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
    6160:	f8c9 1960 	str.w	r1, [r9, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
    6164:	f8c9 1a40 	str.w	r1, [r9, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    6168:	6a59      	ldr	r1, [r3, #36]	; 0x24
	params[Effect2PostGain].setParam = &fxPostGainSet;
    616a:	f8c9 489c 	str.w	r4, [r9, #2204]	; 0x89c
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    616e:	f8c9 1864 	str.w	r1, [r9, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    6172:	6a99      	ldr	r1, [r3, #40]	; 0x28
	params[Effect3PostGain].setParam = &fxPostGainSet;
    6174:	f8c9 497c 	str.w	r4, [r9, #2428]	; 0x97c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    6178:	f8c9 18d4 	str.w	r1, [r9, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    617c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	params[Effect4PostGain].setParam = &fxPostGainSet;
    617e:	f8c9 4a5c 	str.w	r4, [r9, #2652]	; 0xa5c
		params[i].objectNumber = 0;
    6182:	4644      	mov	r4, r8
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    6184:	f8c9 18f0 	str.w	r1, [r9, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    6188:	6b19      	ldr	r1, [r3, #48]	; 0x30
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    618a:	4851      	ldr	r0, [pc, #324]	; (62d0 <parsePreset+0xd10>)
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    618c:	f8c9 190c 	str.w	r1, [r9, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    6190:	6b59      	ldr	r1, [r3, #52]	; 0x34
    6192:	f8c9 1928 	str.w	r1, [r9, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    6196:	6b99      	ldr	r1, [r3, #56]	; 0x38
    6198:	f8c9 1944 	str.w	r1, [r9, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    619c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    619e:	f8c9 19b4 	str.w	r1, [r9, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    61a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
    61a4:	f8c9 19d0 	str.w	r1, [r9, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    61a8:	6c59      	ldr	r1, [r3, #68]	; 0x44
    61aa:	f8c9 19ec 	str.w	r1, [r9, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    61ae:	6c99      	ldr	r1, [r3, #72]	; 0x48
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    61b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    61b2:	f8c9 1a08 	str.w	r1, [r9, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    61b6:	f8c9 3a24 	str.w	r3, [r9, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    61ba:	6813      	ldr	r3, [r2, #0]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    61bc:	4945      	ldr	r1, [pc, #276]	; (62d4 <parsePreset+0xd14>)
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    61be:	f8c9 3ae8 	str.w	r3, [r9, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    61c2:	6853      	ldr	r3, [r2, #4]
    61c4:	f8c9 3acc 	str.w	r3, [r9, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    61c8:	6893      	ldr	r3, [r2, #8]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    61ca:	f8c9 1be4 	str.w	r1, [r9, #3044]	; 0xbe4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    61ce:	f8c9 3b90 	str.w	r3, [r9, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    61d2:	68d3      	ldr	r3, [r2, #12]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    61d4:	f8c9 1c8c 	str.w	r1, [r9, #3212]	; 0xc8c
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    61d8:	f8c9 3b74 	str.w	r3, [r9, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    61dc:	4b3e      	ldr	r3, [pc, #248]	; (62d8 <parsePreset+0xd18>)
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    61de:	f8c9 1d34 	str.w	r1, [r9, #3380]	; 0xd34
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    61e2:	f8c9 3c00 	str.w	r3, [r9, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    61e6:	f8c9 3ca8 	str.w	r3, [r9, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    61ea:	f8c9 3d50 	str.w	r3, [r9, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    61ee:	f8c9 3df8 	str.w	r3, [r9, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    61f2:	4b3a      	ldr	r3, [pc, #232]	; (62dc <parsePreset+0xd1c>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    61f4:	f8c9 1ddc 	str.w	r1, [r9, #3548]	; 0xddc
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    61f8:	f8c9 3c1c 	str.w	r3, [r9, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    61fc:	f8c9 3cc4 	str.w	r3, [r9, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    6200:	f8c9 3d6c 	str.w	r3, [r9, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    6204:	f8c9 3e14 	str.w	r3, [r9, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    6208:	4b35      	ldr	r3, [pc, #212]	; (62e0 <parsePreset+0xd20>)
    620a:	f8c9 3c38 	str.w	r3, [r9, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    620e:	f8c9 3ce0 	str.w	r3, [r9, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    6212:	f8c9 3d88 	str.w	r3, [r9, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    6216:	f8c9 3e30 	str.w	r3, [r9, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    621a:	4b32      	ldr	r3, [pc, #200]	; (62e4 <parsePreset+0xd24>)
    621c:	f8c9 3c54 	str.w	r3, [r9, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    6220:	f8c9 3cfc 	str.w	r3, [r9, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    6224:	f8c9 3da4 	str.w	r3, [r9, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    6228:	f8c9 3e4c 	str.w	r3, [r9, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    622c:	6803      	ldr	r3, [r0, #0]
    622e:	f8c9 3e84 	str.w	r3, [r9, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    6232:	68c3      	ldr	r3, [r0, #12]
    6234:	f8c9 3f10 	str.w	r3, [r9, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    6238:	6983      	ldr	r3, [r0, #24]
    623a:	f8c9 3f9c 	str.w	r3, [r9, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    623e:	6a43      	ldr	r3, [r0, #36]	; 0x24
    6240:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    6244:	6843      	ldr	r3, [r0, #4]
    6246:	f8c9 3ea0 	str.w	r3, [r9, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    624a:	6903      	ldr	r3, [r0, #16]
    624c:	f8c9 3f2c 	str.w	r3, [r9, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    6250:	69c3      	ldr	r3, [r0, #28]
    6252:	f8c9 3fb8 	str.w	r3, [r9, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    6256:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6258:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    625c:	6883      	ldr	r3, [r0, #8]
    625e:	f8c9 3ebc 	str.w	r3, [r9, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    6262:	6943      	ldr	r3, [r0, #20]
    6264:	f8c9 3f48 	str.w	r3, [r9, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    6268:	6a03      	ldr	r3, [r0, #32]
    626a:	f8c9 3fd4 	str.w	r3, [r9, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    626e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    6270:	f8cb 3060 	str.w	r3, [fp, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    6274:	4b1c      	ldr	r3, [pc, #112]	; (62e8 <parsePreset+0xd28>)
    6276:	f8cb 30b4 	str.w	r3, [fp, #180]	; 0xb4
    627a:	e03b      	b.n	62f4 <parsePreset+0xd34>
    627c:	20005bfc 	.word	0x20005bfc
    6280:	00002201 	.word	0x00002201
    6284:	20019ee8 	.word	0x20019ee8
    6288:	2001a3f0 	.word	0x2001a3f0
    628c:	20005604 	.word	0x20005604
    6290:	2000001c 	.word	0x2000001c
    6294:	20000018 	.word	0x20000018
    6298:	200055a8 	.word	0x200055a8
    629c:	00002721 	.word	0x00002721
    62a0:	20014b5c 	.word	0x20014b5c
    62a4:	00002781 	.word	0x00002781
    62a8:	00003741 	.word	0x00003741
    62ac:	00003761 	.word	0x00003761
    62b0:	20016bb0 	.word	0x20016bb0
    62b4:	00004461 	.word	0x00004461
    62b8:	00004501 	.word	0x00004501
    62bc:	000044c1 	.word	0x000044c1
    62c0:	00002d41 	.word	0x00002d41
    62c4:	00002d61 	.word	0x00002d61
    62c8:	00002d81 	.word	0x00002d81
    62cc:	00002da1 	.word	0x00002da1
    62d0:	20018cdc 	.word	0x20018cdc
    62d4:	00002c61 	.word	0x00002c61
    62d8:	00002c81 	.word	0x00002c81
    62dc:	00002ca1 	.word	0x00002ca1
    62e0:	00002cc1 	.word	0x00002cc1
    62e4:	00002ce1 	.word	0x00002ce1
    62e8:	00002d21 	.word	0x00002d21
    62ec:	3c010204 	.word	0x3c010204
    62f0:	42fe0000 	.word	0x42fe0000
		if ((i >= Osc1) && (i < Osc2))
    62f4:	f1a8 0318 	sub.w	r3, r8, #24
		params[i].objectNumber = 0;
    62f8:	763c      	strb	r4, [r7, #24]
		if ((i >= Osc1) && (i < Osc2))
    62fa:	2b0c      	cmp	r3, #12
    62fc:	f240 8278 	bls.w	67f0 <parsePreset+0x1230>
		else if ((i >= Osc2) && (i < Osc3))
    6300:	f1a8 0325 	sub.w	r3, r8, #37	; 0x25
    6304:	2b72      	cmp	r3, #114	; 0x72
    6306:	f200 8273 	bhi.w	67f0 <parsePreset+0x1230>
    630a:	e8df f013 	tbh	[pc, r3, lsl #1]
    630e:	0073      	.short	0x0073
    6310:	00730073 	.word	0x00730073
    6314:	00730073 	.word	0x00730073
    6318:	00730073 	.word	0x00730073
    631c:	00730073 	.word	0x00730073
    6320:	00730073 	.word	0x00730073
    6324:	00730073 	.word	0x00730073
    6328:	026b026b 	.word	0x026b026b
    632c:	026b026b 	.word	0x026b026b
    6330:	026b026b 	.word	0x026b026b
    6334:	026b026b 	.word	0x026b026b
    6338:	026b026b 	.word	0x026b026b
    633c:	026b026b 	.word	0x026b026b
    6340:	0271026b 	.word	0x0271026b
    6344:	02710271 	.word	0x02710271
    6348:	02710271 	.word	0x02710271
    634c:	02710271 	.word	0x02710271
    6350:	00730271 	.word	0x00730271
    6354:	00730073 	.word	0x00730073
    6358:	00730073 	.word	0x00730073
    635c:	00730073 	.word	0x00730073
    6360:	026b0073 	.word	0x026b0073
    6364:	026b026b 	.word	0x026b026b
    6368:	026b026b 	.word	0x026b026b
    636c:	026b026b 	.word	0x026b026b
    6370:	026e026b 	.word	0x026e026b
    6374:	026e026e 	.word	0x026e026e
    6378:	026e026e 	.word	0x026e026e
    637c:	026e026e 	.word	0x026e026e
    6380:	0271026e 	.word	0x0271026e
    6384:	02710271 	.word	0x02710271
    6388:	02710271 	.word	0x02710271
    638c:	00730271 	.word	0x00730271
    6390:	00730073 	.word	0x00730073
    6394:	00730073 	.word	0x00730073
    6398:	00730073 	.word	0x00730073
    639c:	02710271 	.word	0x02710271
    63a0:	02710271 	.word	0x02710271
    63a4:	02710271 	.word	0x02710271
    63a8:	00730073 	.word	0x00730073
    63ac:	00730073 	.word	0x00730073
    63b0:	00730073 	.word	0x00730073
    63b4:	026b026b 	.word	0x026b026b
    63b8:	026b026b 	.word	0x026b026b
    63bc:	026b026b 	.word	0x026b026b
    63c0:	026e026e 	.word	0x026e026e
    63c4:	026e026e 	.word	0x026e026e
    63c8:	026e026e 	.word	0x026e026e
    63cc:	02710271 	.word	0x02710271
    63d0:	02710271 	.word	0x02710271
    63d4:	00730271 	.word	0x00730271
    63d8:	00730073 	.word	0x00730073
    63dc:	00730073 	.word	0x00730073
    63e0:	026b026b 	.word	0x026b026b
    63e4:	026b026b 	.word	0x026b026b
    63e8:	026e026b 	.word	0x026e026b
    63ec:	026e026e 	.word	0x026e026e
    63f0:	026e026e 	.word	0x026e026e
			params[i].objectNumber = 1;
    63f4:	2001      	movs	r0, #1
    63f6:	763e      	strb	r6, [r7, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    63f8:	ed97 0a02 	vldr	s0, [r7, #8]
    63fc:	2100      	movs	r1, #0
    63fe:	697b      	ldr	r3, [r7, #20]
	for (int i = 0; i < NUM_PARAMS; i++)
    6400:	f108 0801 	add.w	r8, r8, #1
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    6404:	4798      	blx	r3
    6406:	ed97 0a03 	vldr	s0, [r7, #12]
    640a:	697b      	ldr	r3, [r7, #20]
    640c:	2101      	movs	r1, #1
    640e:	7e38      	ldrb	r0, [r7, #24]
	for (int i = 0; i < NUM_PARAMS; i++)
    6410:	371c      	adds	r7, #28
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    6412:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    6414:	f1b8 0f9c 	cmp.w	r8, #156	; 0x9c
    6418:	f47f af6c 	bne.w	62f4 <parsePreset+0xd34>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    641c:	edd9 7a09 	vldr	s15, [r9, #36]	; 0x24
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    6420:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6424:	ed99 7a02 	vldr	s14, [r9, #8]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    6428:	ed9b 6a38 	vldr	s12, [fp, #224]	; 0xe0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    642c:	ee37 7a67 	vsub.f32	s14, s14, s15
    6430:	ed1f 5a52 	vldr	s10, [pc, #-328]	; 62ec <parsePreset+0xd2c>
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    6434:	eeb4 6ae6 	vcmpe.f32	s12, s13
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    6438:	ed5f 5a53 	vldr	s11, [pc, #-332]	; 62f0 <parsePreset+0xd30>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    643c:	4baa      	ldr	r3, [pc, #680]	; (66e8 <parsePreset+0x1128>)
    643e:	ee85 6a07 	vdiv.f32	s12, s10, s14
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    6442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    6446:	ee67 7aa5 	vmul.f32	s15, s15, s11
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    644a:	bfcc      	ite	gt
    644c:	2201      	movgt	r2, #1
    644e:	2200      	movle	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    6450:	ed83 6a00 	vstr	s12, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    6454:	4ba5      	ldr	r3, [pc, #660]	; (66ec <parsePreset+0x112c>)
    6456:	edc3 7a00 	vstr	s15, [r3]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    645a:	4ba5      	ldr	r3, [pc, #660]	; (66f0 <parsePreset+0x1130>)
    645c:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    645e:	9b06      	ldr	r3, [sp, #24]
    6460:	2b00      	cmp	r3, #0
    6462:	f000 82ba 	beq.w	69da <parsePreset+0x141a>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    6466:	eddb 7a3f 	vldr	s15, [fp, #252]	; 0xfc
    646a:	eef4 7ae6 	vcmpe.f32	s15, s13
    646e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6472:	bfcc      	ite	gt
    6474:	2301      	movgt	r3, #1
    6476:	2300      	movle	r3, #0
	bufferIndex += 2;
    6478:	3504      	adds	r5, #4
		knobFrozen[i] = 0;
    647a:	499e      	ldr	r1, [pc, #632]	; (66f4 <parsePreset+0x1134>)
    647c:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 6724 <parsePreset+0x1164>
	bufferIndex += 2;
    6480:	b2aa      	uxth	r2, r5
    6482:	f50b 6018 	add.w	r0, fp, #2432	; 0x980
    6486:	4614      	mov	r4, r2
	numMappings = 0;
    6488:	2200      	movs	r2, #0
		knobFrozen[i] = 0;
    648a:	700a      	strb	r2, [r1, #0]
    648c:	704a      	strb	r2, [r1, #1]
    648e:	708a      	strb	r2, [r1, #2]
    6490:	70ca      	strb	r2, [r1, #3]
    6492:	710a      	strb	r2, [r1, #4]
    6494:	714a      	strb	r2, [r1, #5]
    6496:	718a      	strb	r2, [r1, #6]
    6498:	71ca      	strb	r2, [r1, #7]
    649a:	720a      	strb	r2, [r1, #8]
    649c:	724a      	strb	r2, [r1, #9]
    649e:	728a      	strb	r2, [r1, #10]
    64a0:	72ca      	strb	r2, [r1, #11]
    64a2:	4995      	ldr	r1, [pc, #596]	; (66f8 <parsePreset+0x1138>)
    64a4:	700b      	strb	r3, [r1, #0]
		mappings[i].destNumber = 255;
    64a6:	21ff      	movs	r1, #255	; 0xff
	numMappings = 0;
    64a8:	4b94      	ldr	r3, [pc, #592]	; (66fc <parsePreset+0x113c>)
    64aa:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
    64ac:	4b94      	ldr	r3, [pc, #592]	; (6700 <parsePreset+0x1140>)
    64ae:	601a      	str	r2, [r3, #0]
		envOn[i] = 0;
    64b0:	4b94      	ldr	r3, [pc, #592]	; (6704 <parsePreset+0x1144>)
    64b2:	601a      	str	r2, [r3, #0]
		knobFrozen[i] = 0;
    64b4:	465b      	mov	r3, fp
		mappings[i].destNumber = 255;
    64b6:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    64b8:	334c      	adds	r3, #76	; 0x4c
		mappings[i].hookActive[0] = 0;
    64ba:	f843 2c04 	str.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    64be:	4298      	cmp	r0, r3
    64c0:	d1f9      	bne.n	64b6 <parsePreset+0xef6>
	for (int i = 0; i < mappingCount; i++)
    64c2:	9b07      	ldr	r3, [sp, #28]
    64c4:	2b00      	cmp	r3, #0
    64c6:	f000 8251 	beq.w	696c <parsePreset+0x13ac>
    64ca:	2300      	movs	r3, #0
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    64cc:	f8cd a004 	str.w	sl, [sp, #4]
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    64d0:	ed9f 8a8d 	vldr	s16, [pc, #564]	; 6708 <parsePreset+0x1148>
				foundOne = 1;
    64d4:	f04f 0801 	mov.w	r8, #1
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    64d8:	9e06      	ldr	r6, [sp, #24]
    64da:	46a2      	mov	sl, r4
	for (int i = 0; i < mappingCount; i++)
    64dc:	9303      	str	r3, [sp, #12]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    64de:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
		uint8_t destNumber = buffer[bufferIndex+1];
    64e2:	9b01      	ldr	r3, [sp, #4]
    64e4:	4453      	add	r3, sl
    64e6:	7858      	ldrb	r0, [r3, #1]
		if (presetVersionNumber > 0)
    64e8:	2e00      	cmp	r6, #0
    64ea:	f000 8192 	beq.w	6812 <parsePreset+0x1252>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    64ee:	795d      	ldrb	r5, [r3, #5]
		uint8_t whichHook = 0;
    64f0:	2300      	movs	r3, #0
    64f2:	465a      	mov	r2, fp
    64f4:	461f      	mov	r7, r3
    64f6:	461c      	mov	r4, r3
    64f8:	e003      	b.n	6502 <parsePreset+0xf42>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    64fa:	3301      	adds	r3, #1
    64fc:	324c      	adds	r2, #76	; 0x4c
    64fe:	2b20      	cmp	r3, #32
    6500:	d00c      	beq.n	651c <parsePreset+0xf5c>
			if (mappings[j].destNumber == destNumber)
    6502:	7811      	ldrb	r1, [r2, #0]
    6504:	4281      	cmp	r1, r0
    6506:	d1f8      	bne.n	64fa <parsePreset+0xf3a>
				foundOne = 1;
    6508:	2701      	movs	r7, #1
    650a:	b2dc      	uxtb	r4, r3
				if (presetVersionNumber == 0)
    650c:	2e00      	cmp	r6, #0
    650e:	d1f4      	bne.n	64fa <parsePreset+0xf3a>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    6510:	3301      	adds	r3, #1
					whichHook = mappings[j].numHooks;
    6512:	f892 504b 	ldrb.w	r5, [r2, #75]	; 0x4b
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    6516:	324c      	adds	r2, #76	; 0x4c
    6518:	2b20      	cmp	r3, #32
    651a:	d1f2      	bne.n	6502 <parsePreset+0xf42>
		if (foundOne == 0)
    651c:	b99f      	cbnz	r7, 6546 <parsePreset+0xf86>
			whichMapping = numMappings;
    651e:	4977      	ldr	r1, [pc, #476]	; (66fc <parsePreset+0x113c>)
			mappings[whichMapping].dest = &params[destNumber];
    6520:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    6524:	9c09      	ldr	r4, [sp, #36]	; 0x24
			if (presetVersionNumber == 0)
    6526:	2e00      	cmp	r6, #0
			whichMapping = numMappings;
    6528:	780b      	ldrb	r3, [r1, #0]
			mappings[whichMapping].dest = &params[destNumber];
    652a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			if (presetVersionNumber == 0)
    652e:	bf08      	it	eq
    6530:	2500      	moveq	r5, #0
			mappings[whichMapping].destNumber = destNumber;
    6532:	461c      	mov	r4, r3
			numMappings++;
    6534:	3301      	adds	r3, #1
    6536:	700b      	strb	r3, [r1, #0]
			mappings[whichMapping].destNumber = destNumber;
    6538:	234c      	movs	r3, #76	; 0x4c
    653a:	fb03 f304 	mul.w	r3, r3, r4
    653e:	f80b 0003 	strb.w	r0, [fp, r3]
    6542:	445b      	add	r3, fp
			mappings[whichMapping].dest = &params[destNumber];
    6544:	605a      	str	r2, [r3, #4]
		int source = buffer[bufferIndex];
    6546:	9b01      	ldr	r3, [sp, #4]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    6548:	1c6a      	adds	r2, r5, #1
    654a:	4870      	ldr	r0, [pc, #448]	; (670c <parsePreset+0x114c>)
		int source = buffer[bufferIndex];
    654c:	f813 700a 	ldrb.w	r7, [r3, sl]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    6550:	234c      	movs	r3, #76	; 0x4c
    6552:	fb03 f304 	mul.w	r3, r3, r4
    6556:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    655a:	2f03      	cmp	r7, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    655c:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
    6560:	f100 0004 	add.w	r0, r0, #4
    6564:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    6568:	445b      	add	r3, fp
    656a:	4459      	add	r1, fp
    656c:	442b      	add	r3, r5
    656e:	60c8      	str	r0, [r1, #12]
    6570:	4866      	ldr	r0, [pc, #408]	; (670c <parsePreset+0x114c>)
    6572:	eb00 01c7 	add.w	r1, r0, r7, lsl #3
    6576:	f84b 1002 	str.w	r1, [fp, r2]
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    657a:	bfd4      	ite	le
    657c:	2200      	movle	r2, #0
    657e:	2201      	movgt	r2, #1
    6580:	f883 2020 	strb.w	r2, [r3, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    6584:	b23a      	sxth	r2, r7
    6586:	f1a7 0318 	sub.w	r3, r7, #24
    658a:	920a      	str	r2, [sp, #40]	; 0x28
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    658c:	00ea      	lsls	r2, r5, #3
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    658e:	2b03      	cmp	r3, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    6590:	9204      	str	r2, [sp, #16]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    6592:	f200 8134 	bhi.w	67fe <parsePreset+0x123e>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    6596:	4b5a      	ldr	r3, [pc, #360]	; (6700 <parsePreset+0x1140>)
    6598:	443b      	add	r3, r7
    659a:	f803 8c18 	strb.w	r8, [r3, #-24]
		if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    659e:	2f02      	cmp	r7, #2
    65a0:	d802      	bhi.n	65a8 <parsePreset+0xfe8>
			oscOn[source - OSC_SOURCE_OFFSET] = 1;
    65a2:	4b5b      	ldr	r3, [pc, #364]	; (6710 <parsePreset+0x1150>)
    65a4:	f803 8007 	strb.w	r8, [r3, r7]
		if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    65a8:	2f03      	cmp	r7, #3
    65aa:	f000 8142 	beq.w	6832 <parsePreset+0x1272>
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    65ae:	3f04      	subs	r7, #4
    65b0:	2f0b      	cmp	r7, #11
    65b2:	f240 815a 	bls.w	686a <parsePreset+0x12aa>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    65b6:	b2fb      	uxtb	r3, r7
    65b8:	4a56      	ldr	r2, [pc, #344]	; (6714 <parsePreset+0x1154>)
    65ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    65be:	930b      	str	r3, [sp, #44]	; 0x2c
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    65c0:	b2fb      	uxtb	r3, r7
    65c2:	9304      	str	r3, [sp, #16]
		int scalar = buffer[bufferIndex+2];
    65c4:	9b01      	ldr	r3, [sp, #4]
    65c6:	4453      	add	r3, sl
    65c8:	f893 9002 	ldrb.w	r9, [r3, #2]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    65cc:	ea4f 0349 	mov.w	r3, r9, lsl #1
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    65d0:	f1a9 0018 	sub.w	r0, r9, #24
			if (scalar == 0xff)
    65d4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    65d8:	fa0f f289 	sxth.w	r2, r9
    65dc:	9306      	str	r3, [sp, #24]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    65de:	f1a9 0314 	sub.w	r3, r9, #20
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    65e2:	9005      	str	r0, [sp, #20]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    65e4:	9308      	str	r3, [sp, #32]
			if (scalar == 0xff)
    65e6:	f000 8116 	beq.w	6816 <parsePreset+0x1256>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    65ea:	4b48      	ldr	r3, [pc, #288]	; (670c <parsePreset+0x114c>)
    65ec:	1d29      	adds	r1, r5, #4
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    65ee:	2803      	cmp	r0, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    65f0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    65f4:	f04f 034c 	mov.w	r3, #76	; 0x4c
    65f8:	fb03 f304 	mul.w	r3, r3, r4
    65fc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    6600:	445b      	add	r3, fp
    6602:	605a      	str	r2, [r3, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    6604:	f200 811f 	bhi.w	6846 <parsePreset+0x1286>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    6608:	4b3d      	ldr	r3, [pc, #244]	; (6700 <parsePreset+0x1140>)
    660a:	444b      	add	r3, r9
    660c:	f803 8c18 	strb.w	r8, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    6610:	f1b9 0f02 	cmp.w	r9, #2
    6614:	d802      	bhi.n	661c <parsePreset+0x105c>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    6616:	4b3e      	ldr	r3, [pc, #248]	; (6710 <parsePreset+0x1150>)
    6618:	f803 8009 	strb.w	r8, [r3, r9]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    661c:	f1b9 0f03 	cmp.w	r9, #3
    6620:	d102      	bne.n	6628 <parsePreset+0x1068>
					noiseOn = 1;
    6622:	4b3d      	ldr	r3, [pc, #244]	; (6718 <parsePreset+0x1158>)
    6624:	f883 8000 	strb.w	r8, [r3]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    6628:	2f0b      	cmp	r7, #11
    662a:	f240 814f 	bls.w	68cc <parsePreset+0x130c>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    662e:	224c      	movs	r2, #76	; 0x4c
    6630:	00eb      	lsls	r3, r5, #3
    6632:	4936      	ldr	r1, [pc, #216]	; (670c <parsePreset+0x114c>)
    6634:	fb02 3304 	mla	r3, r2, r4, r3
    6638:	9a06      	ldr	r2, [sp, #24]
    663a:	3201      	adds	r2, #1
    663c:	445b      	add	r3, fp
    663e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6642:	629a      	str	r2, [r3, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    6644:	9b05      	ldr	r3, [sp, #20]
    6646:	2b03      	cmp	r3, #3
    6648:	f200 8106 	bhi.w	6858 <parsePreset+0x1298>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    664c:	4b2c      	ldr	r3, [pc, #176]	; (6700 <parsePreset+0x1140>)
    664e:	444b      	add	r3, r9
    6650:	f803 8c18 	strb.w	r8, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    6654:	f1b9 0f02 	cmp.w	r9, #2
    6658:	d802      	bhi.n	6660 <parsePreset+0x10a0>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    665a:	4b2d      	ldr	r3, [pc, #180]	; (6710 <parsePreset+0x1150>)
    665c:	f803 8009 	strb.w	r8, [r3, r9]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    6660:	f1b9 0f03 	cmp.w	r9, #3
    6664:	d102      	bne.n	666c <parsePreset+0x10ac>
					noiseOn = 1;
    6666:	4b2c      	ldr	r3, [pc, #176]	; (6718 <parsePreset+0x1158>)
    6668:	f883 8000 	strb.w	r8, [r3]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    666c:	2f0b      	cmp	r7, #11
    666e:	f240 8158 	bls.w	6922 <parsePreset+0x1362>
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    6672:	9b01      	ldr	r3, [sp, #4]
		mappings[whichMapping].hookActive[whichHook] = 1;
    6674:	214c      	movs	r1, #76	; 0x4c
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    6676:	eb03 020a 	add.w	r2, r3, sl
		mappings[whichMapping].amount[whichHook] = amountFloat;
    667a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    667e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		mappings[whichMapping].hookActive[whichHook] = 1;
    6682:	fb01 b404 	mla	r4, r1, r4, fp
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    6686:	78d1      	ldrb	r1, [r2, #3]
    6688:	7912      	ldrb	r2, [r2, #4]
		mappings[whichMapping].amount[whichHook] = amountFloat;
    668a:	442b      	add	r3, r5
		mappings[whichMapping].hookActive[whichHook] = 1;
    668c:	4425      	add	r5, r4
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    668e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
		mappings[whichMapping].amount[whichHook] = amountFloat;
    6692:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		mappings[whichMapping].hookActive[whichHook] = 1;
    6696:	f885 8048 	strb.w	r8, [r5, #72]	; 0x48
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    669a:	b212      	sxth	r2, r2
    669c:	ee07 2a90 	vmov	s15, r2
    66a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    66a4:	ee67 7a88 	vmul.f32	s15, s15, s16
		mappings[whichMapping].amount[whichHook] = amountFloat;
    66a8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
    66ac:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    66b0:	3301      	adds	r3, #1
    66b2:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		if (presetVersionNumber > 0)
    66b6:	2e00      	cmp	r6, #0
    66b8:	f000 809c 	beq.w	67f4 <parsePreset+0x1234>
			bufferIndex += 6;
    66bc:	f10a 0306 	add.w	r3, sl, #6
    66c0:	fa1f fa83 	uxth.w	sl, r3
	for (int i = 0; i < mappingCount; i++)
    66c4:	9b03      	ldr	r3, [sp, #12]
    66c6:	9a07      	ldr	r2, [sp, #28]
    66c8:	3301      	adds	r3, #1
    66ca:	4293      	cmp	r3, r2
    66cc:	9303      	str	r3, [sp, #12]
    66ce:	f47f af08 	bne.w	64e2 <parsePreset+0xf22>
	for (int i = 0; i < numMappings; i++)
    66d2:	4b0a      	ldr	r3, [pc, #40]	; (66fc <parsePreset+0x113c>)
    66d4:	781a      	ldrb	r2, [r3, #0]
    66d6:	2a00      	cmp	r2, #0
    66d8:	f000 8148 	beq.w	696c <parsePreset+0x13ac>
    66dc:	4c0f      	ldr	r4, [pc, #60]	; (671c <parsePreset+0x115c>)
    66de:	f04f 0800 	mov.w	r8, #0
			for (int v = 0; v < numStringsThisBoard; v++)
    66e2:	4f0f      	ldr	r7, [pc, #60]	; (6720 <parsePreset+0x1160>)
    66e4:	e028      	b.n	6738 <parsePreset+0x1178>
    66e6:	bf00      	nop
    66e8:	2001994c 	.word	0x2001994c
    66ec:	20019950 	.word	0x20019950
    66f0:	20016cd9 	.word	0x20016cd9
    66f4:	20005284 	.word	0x20005284
    66f8:	2001aa78 	.word	0x2001aa78
    66fc:	20019958 	.word	0x20019958
    6700:	20005344 	.word	0x20005344
    6704:	200050d8 	.word	0x200050d8
    6708:	37fffffc 	.word	0x37fffffc
    670c:	200146d8 	.word	0x200146d8
    6710:	20005604 	.word	0x20005604
    6714:	200052c0 	.word	0x200052c0
    6718:	200055a8 	.word	0x200055a8
    671c:	20018d18 	.word	0x20018d18
    6720:	20000015 	.word	0x20000015
    6724:	20018d10 	.word	0x20018d10
    6728:	00000000 	.word	0x00000000
	for (int i = 0; i < numMappings; i++)
    672c:	f108 0801 	add.w	r8, r8, #1
    6730:	344c      	adds	r4, #76	; 0x4c
    6732:	4542      	cmp	r2, r8
    6734:	f340 811a 	ble.w	696c <parsePreset+0x13ac>
		if (mappings[i].destNumber != 255)
    6738:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    673c:	2bff      	cmp	r3, #255	; 0xff
    673e:	d0f5      	beq.n	672c <parsePreset+0x116c>
			for (int v = 0; v < numStringsThisBoard; v++)
    6740:	783b      	ldrb	r3, [r7, #0]
    6742:	2b00      	cmp	r3, #0
    6744:	d0f2      	beq.n	672c <parsePreset+0x116c>
    6746:	4626      	mov	r6, r4
    6748:	2500      	movs	r5, #0
					if (mappings[i].hookActive[j])
    674a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				float unsmoothedValue = 0.0f;
    674e:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 6728 <parsePreset+0x1168>
					if (mappings[i].hookActive[j])
    6752:	b15b      	cbz	r3, 676c <parsePreset+0x11ac>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6754:	6832      	ldr	r2, [r6, #0]
    6756:	69f3      	ldr	r3, [r6, #28]
    6758:	edd2 7a00 	vldr	s15, [r2]
    675c:	edd3 6a00 	vldr	s13, [r3]
    6760:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
    6764:	ee67 7aa6 	vmul.f32	s15, s15, s13
    6768:	ee67 7a87 	vmul.f32	s15, s15, s14
					if (mappings[i].hookActive[j])
    676c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    6770:	b15b      	cbz	r3, 678a <parsePreset+0x11ca>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6772:	68b2      	ldr	r2, [r6, #8]
    6774:	6a73      	ldr	r3, [r6, #36]	; 0x24
						unsmoothedValue += sum;
    6776:	ed92 7a00 	vldr	s14, [r2]
    677a:	ed93 6a00 	vldr	s12, [r3]
    677e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    6782:	ee27 7a06 	vmul.f32	s14, s14, s12
    6786:	eee6 7a87 	vfma.f32	s15, s13, s14
					if (mappings[i].hookActive[j])
    678a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    678e:	b15b      	cbz	r3, 67a8 <parsePreset+0x11e8>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6790:	6932      	ldr	r2, [r6, #16]
    6792:	6af3      	ldr	r3, [r6, #44]	; 0x2c
						unsmoothedValue += sum;
    6794:	ed92 7a00 	vldr	s14, [r2]
    6798:	ed93 6a00 	vldr	s12, [r3]
    679c:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    67a0:	ee27 7a06 	vmul.f32	s14, s14, s12
    67a4:	eee6 7a87 	vfma.f32	s15, s13, s14
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    67a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
			for (int v = 0; v < numStringsThisBoard; v++)
    67ac:	3604      	adds	r6, #4
    67ae:	eb03 0985 	add.w	r9, r3, r5, lsl #2
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    67b2:	691b      	ldr	r3, [r3, #16]
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    67b4:	ed99 0a00 	vldr	s0, [r9]
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    67b8:	ee37 0a80 	vadd.f32	s0, s15, s0
    67bc:	4798      	blx	r3
    67be:	ed89 0a02 	vstr	s0, [r9, #8]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    67c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    67c6:	4629      	mov	r1, r5
    67c8:	eb03 0285 	add.w	r2, r3, r5, lsl #2
    67cc:	7e18      	ldrb	r0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    67ce:	3501      	adds	r5, #1
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    67d0:	ed92 0a02 	vldr	s0, [r2, #8]
    67d4:	695a      	ldr	r2, [r3, #20]
    67d6:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    67d8:	783b      	ldrb	r3, [r7, #0]
    67da:	42ab      	cmp	r3, r5
    67dc:	dcb5      	bgt.n	674a <parsePreset+0x118a>
	for (int i = 0; i < numMappings; i++)
    67de:	4bb4      	ldr	r3, [pc, #720]	; (6ab0 <parsePreset+0x14f0>)
    67e0:	781a      	ldrb	r2, [r3, #0]
    67e2:	e7a3      	b.n	672c <parsePreset+0x116c>
			params[i].objectNumber = 2;
    67e4:	2002      	movs	r0, #2
    67e6:	7638      	strb	r0, [r7, #24]
    67e8:	e606      	b.n	63f8 <parsePreset+0xe38>
			params[i].objectNumber = 3;
    67ea:	2003      	movs	r0, #3
    67ec:	7638      	strb	r0, [r7, #24]
    67ee:	e603      	b.n	63f8 <parsePreset+0xe38>
		if ((i >= Osc1) && (i < Osc2))
    67f0:	2000      	movs	r0, #0
    67f2:	e601      	b.n	63f8 <parsePreset+0xe38>
			bufferIndex += 5;
    67f4:	f10a 0305 	add.w	r3, sl, #5
    67f8:	fa1f fa83 	uxth.w	sl, r3
    67fc:	e762      	b.n	66c4 <parsePreset+0x1104>
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    67fe:	f1a7 0314 	sub.w	r3, r7, #20
    6802:	2b03      	cmp	r3, #3
    6804:	f63f aecb 	bhi.w	659e <parsePreset+0xfde>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    6808:	4baa      	ldr	r3, [pc, #680]	; (6ab4 <parsePreset+0x14f4>)
    680a:	443b      	add	r3, r7
    680c:	f803 8c14 	strb.w	r8, [r3, #-20]
    6810:	e6c5      	b.n	659e <parsePreset+0xfde>
		uint8_t whichHook = 0;
    6812:	4635      	mov	r5, r6
    6814:	e66c      	b.n	64f0 <parsePreset+0xf30>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    6816:	234c      	movs	r3, #76	; 0x4c
    6818:	1d29      	adds	r1, r5, #4
    681a:	00ea      	lsls	r2, r5, #3
    681c:	fb03 f304 	mul.w	r3, r3, r4
    6820:	441a      	add	r2, r3
    6822:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    6826:	49a4      	ldr	r1, [pc, #656]	; (6ab8 <parsePreset+0x14f8>)
    6828:	445a      	add	r2, fp
    682a:	445b      	add	r3, fp
    682c:	6291      	str	r1, [r2, #40]	; 0x28
    682e:	6059      	str	r1, [r3, #4]
    6830:	e71f      	b.n	6672 <parsePreset+0x10b2>
			noiseOn = 1;
    6832:	4ba2      	ldr	r3, [pc, #648]	; (6abc <parsePreset+0x14fc>)
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    6834:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			noiseOn = 1;
    6838:	f883 8000 	strb.w	r8, [r3]
    683c:	4ba0      	ldr	r3, [pc, #640]	; (6ac0 <parsePreset+0x1500>)
    683e:	930b      	str	r3, [sp, #44]	; 0x2c
    6840:	23ff      	movs	r3, #255	; 0xff
    6842:	9304      	str	r3, [sp, #16]
    6844:	e6be      	b.n	65c4 <parsePreset+0x1004>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    6846:	9b08      	ldr	r3, [sp, #32]
    6848:	2b03      	cmp	r3, #3
    684a:	f63f aee1 	bhi.w	6610 <parsePreset+0x1050>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    684e:	4b99      	ldr	r3, [pc, #612]	; (6ab4 <parsePreset+0x14f4>)
    6850:	444b      	add	r3, r9
    6852:	f803 8c14 	strb.w	r8, [r3, #-20]
    6856:	e6db      	b.n	6610 <parsePreset+0x1050>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    6858:	9b08      	ldr	r3, [sp, #32]
    685a:	2b03      	cmp	r3, #3
    685c:	f63f aefa 	bhi.w	6654 <parsePreset+0x1094>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    6860:	4b94      	ldr	r3, [pc, #592]	; (6ab4 <parsePreset+0x14f4>)
    6862:	444b      	add	r3, r9
    6864:	f803 8c14 	strb.w	r8, [r3, #-20]
    6868:	e6f4      	b.n	6654 <parsePreset+0x1094>
			for (int v = 0; v < numStringsThisBoard; v++)
    686a:	4b96      	ldr	r3, [pc, #600]	; (6ac4 <parsePreset+0x1504>)
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    686c:	fa5f f987 	uxtb.w	r9, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    6870:	781a      	ldrb	r2, [r3, #0]
    6872:	2a00      	cmp	r2, #0
    6874:	f000 809b 	beq.w	69ae <parsePreset+0x13ee>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    6878:	f109 0c03 	add.w	ip, r9, #3
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    687c:	4992      	ldr	r1, [pc, #584]	; (6ac8 <parsePreset+0x1508>)
    687e:	980a      	ldr	r0, [sp, #40]	; 0x28
    6880:	0092      	lsls	r2, r2, #2
    6882:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6884:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    6888:	f8cd 9010 	str.w	r9, [sp, #16]
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    688c:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    6890:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6894:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    6898:	3108      	adds	r1, #8
    689a:	e9cd 3c05 	strd	r3, ip, [sp, #20]
    689e:	f003 fdbf 	bl	a420 <__memcpy_veneer>
    68a2:	f8dd c018 	ldr.w	ip, [sp, #24]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    68a6:	9a05      	ldr	r2, [sp, #20]
    68a8:	eba2 030c 	sub.w	r3, r2, ip
    68ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    68ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    68b2:	ed93 0a02 	vldr	s0, [r3, #8]
    68b6:	4b85      	ldr	r3, [pc, #532]	; (6acc <parsePreset+0x150c>)
    68b8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    68bc:	4618      	mov	r0, r3
    68be:	930b      	str	r3, [sp, #44]	; 0x2c
    68c0:	f003 fdfe 	bl	a4c0 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[whichMacro] = 1;
    68c4:	4b82      	ldr	r3, [pc, #520]	; (6ad0 <parsePreset+0x1510>)
    68c6:	f803 8009 	strb.w	r8, [r3, r9]
    68ca:	e67b      	b.n	65c4 <parsePreset+0x1004>
					for (int v = 0; v < numStringsThisBoard; v++)
    68cc:	4b7d      	ldr	r3, [pc, #500]	; (6ac4 <parsePreset+0x1504>)
    68ce:	781a      	ldrb	r2, [r3, #0]
    68d0:	2a00      	cmp	r2, #0
    68d2:	f000 8084 	beq.w	69de <parsePreset+0x141e>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    68d6:	9b04      	ldr	r3, [sp, #16]
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    68d8:	0092      	lsls	r2, r2, #2
    68da:	497b      	ldr	r1, [pc, #492]	; (6ac8 <parsePreset+0x1508>)
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    68dc:	f103 0c03 	add.w	ip, r3, #3
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    68e0:	980a      	ldr	r0, [sp, #40]	; 0x28
    68e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    68e4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    68e8:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    68ec:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    68f0:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    68f4:	3108      	adds	r1, #8
    68f6:	e9cd 3c0c 	strd	r3, ip, [sp, #48]	; 0x30
    68fa:	f003 fd91 	bl	a420 <__memcpy_veneer>
    68fe:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    6902:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6904:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6906:	eba2 030c 	sub.w	r3, r2, ip
    690a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    690c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6910:	ed93 0a02 	vldr	s0, [r3, #8]
    6914:	f003 fdd4 	bl	a4c0 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    6918:	4b6d      	ldr	r3, [pc, #436]	; (6ad0 <parsePreset+0x1510>)
    691a:	9a04      	ldr	r2, [sp, #16]
    691c:	f803 8002 	strb.w	r8, [r3, r2]
    6920:	e685      	b.n	662e <parsePreset+0x106e>
					for (int v = 0; v < numStringsThisBoard; v++)
    6922:	4b68      	ldr	r3, [pc, #416]	; (6ac4 <parsePreset+0x1504>)
    6924:	781a      	ldrb	r2, [r3, #0]
    6926:	2a00      	cmp	r2, #0
    6928:	d049      	beq.n	69be <parsePreset+0x13fe>
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    692a:	4b67      	ldr	r3, [pc, #412]	; (6ac8 <parsePreset+0x1508>)
    692c:	0092      	lsls	r2, r2, #2
    692e:	990a      	ldr	r1, [sp, #40]	; 0x28
    6930:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    6934:	9b04      	ldr	r3, [sp, #16]
    6936:	f103 0903 	add.w	r9, r3, #3
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    693a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    693c:	ebc9 01c9 	rsb	r1, r9, r9, lsl #3
    6940:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    6944:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6948:	3108      	adds	r1, #8
    694a:	f003 fd69 	bl	a420 <__memcpy_veneer>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    694e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6950:	eba7 0309 	sub.w	r3, r7, r9
    6954:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6956:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    695a:	ed93 0a02 	vldr	s0, [r3, #8]
    695e:	f003 fdaf 	bl	a4c0 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    6962:	4b5b      	ldr	r3, [pc, #364]	; (6ad0 <parsePreset+0x1510>)
    6964:	9a04      	ldr	r2, [sp, #16]
    6966:	f803 8002 	strb.w	r8, [r3, r2]
    696a:	e682      	b.n	6672 <parsePreset+0x10b2>
	presetWaitingToParse = 0;
    696c:	4b59      	ldr	r3, [pc, #356]	; (6ad4 <parsePreset+0x1514>)
    696e:	2400      	movs	r4, #0
	currentActivePreset = presetNumber;
    6970:	f89d 2008 	ldrb.w	r2, [sp, #8]
	presetWaitingToParse = 0;
    6974:	601c      	str	r4, [r3, #0]
	currentActivePreset = presetNumber;
    6976:	4b58      	ldr	r3, [pc, #352]	; (6ad8 <parsePreset+0x1518>)
	audioMasterLevel = 1.0f;
    6978:	4958      	ldr	r1, [pc, #352]	; (6adc <parsePreset+0x151c>)
	currentActivePreset = presetNumber;
    697a:	701a      	strb	r2, [r3, #0]
	audioMasterLevel = 1.0f;
    697c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
	oscToTick = NUM_OSC;
    6980:	4a57      	ldr	r2, [pc, #348]	; (6ae0 <parsePreset+0x1520>)
	audioMasterLevel = 1.0f;
    6982:	600b      	str	r3, [r1, #0]
	oscToTick = NUM_OSC;
    6984:	2103      	movs	r1, #3
	overSampled = 1;
    6986:	4b57      	ldr	r3, [pc, #348]	; (6ae4 <parsePreset+0x1524>)
	oscToTick = NUM_OSC;
    6988:	7011      	strb	r1, [r2, #0]
	overSampled = 1;
    698a:	2201      	movs	r2, #1
    698c:	701a      	strb	r2, [r3, #0]
    698e:	b662      	cpsie	i
	presetReady = 1;
    6990:	4b55      	ldr	r3, [pc, #340]	; (6ae8 <parsePreset+0x1528>)
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    6992:	4611      	mov	r1, r2
    6994:	4855      	ldr	r0, [pc, #340]	; (6aec <parsePreset+0x152c>)
	presetReady = 1;
    6996:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
    6998:	f003 fd3e 	bl	a418 <__HAL_GPIO_WritePin_veneer>
	diskBusy = 0;
    699c:	4a54      	ldr	r2, [pc, #336]	; (6af0 <parsePreset+0x1530>)
	receivingI2C = 0;
    699e:	4b55      	ldr	r3, [pc, #340]	; (6af4 <parsePreset+0x1534>)
	diskBusy = 0;
    69a0:	7014      	strb	r4, [r2, #0]
	receivingI2C = 0;
    69a2:	701c      	strb	r4, [r3, #0]
}
    69a4:	b00f      	add	sp, #60	; 0x3c
    69a6:	ecbd 8b02 	vpop	{d8}
    69aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    69ae:	f109 0c03 	add.w	ip, r9, #3
    69b2:	f8cd 9010 	str.w	r9, [sp, #16]
    69b6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    69ba:	9305      	str	r3, [sp, #20]
    69bc:	e773      	b.n	68a6 <parsePreset+0x12e6>
    69be:	9b04      	ldr	r3, [sp, #16]
    69c0:	f103 0903 	add.w	r9, r3, #3
    69c4:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    69c8:	e7c1      	b.n	694e <parsePreset+0x138e>
			oscOn[i] = 0;
    69ca:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    69cc:	4610      	mov	r0, r2
    69ce:	f7ff bb31 	b.w	6034 <parsePreset+0xa74>
			oscOn[i] = 0;
    69d2:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    69d4:	4610      	mov	r0, r2
    69d6:	f7ff baf5 	b.w	5fc4 <parsePreset+0xa04>
		pedalControlsMaster = 1;
    69da:	2301      	movs	r3, #1
    69dc:	e54c      	b.n	6478 <parsePreset+0xeb8>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    69de:	9b04      	ldr	r3, [sp, #16]
    69e0:	f103 0c03 	add.w	ip, r3, #3
    69e4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
    69e8:	920c      	str	r2, [sp, #48]	; 0x30
    69ea:	e78a      	b.n	6902 <parsePreset+0x1342>
			  shapeTick[i] = &userTick;
    69ec:	4a42      	ldr	r2, [pc, #264]	; (6af8 <parsePreset+0x1538>)
    69ee:	4843      	ldr	r0, [pc, #268]	; (6afc <parsePreset+0x153c>)
    69f0:	6090      	str	r0, [r2, #8]
			  break;
    69f2:	f7ff bb10 	b.w	6016 <parsePreset+0xa56>
			  shapeTick[i] = &sineTick;
    69f6:	4a40      	ldr	r2, [pc, #256]	; (6af8 <parsePreset+0x1538>)
    69f8:	4841      	ldr	r0, [pc, #260]	; (6b00 <parsePreset+0x1540>)
    69fa:	6090      	str	r0, [r2, #8]
			  break;
    69fc:	f7ff bb0b 	b.w	6016 <parsePreset+0xa56>
			  shapeTick[i] = &pulseTick;
    6a00:	4a3d      	ldr	r2, [pc, #244]	; (6af8 <parsePreset+0x1538>)
    6a02:	4840      	ldr	r0, [pc, #256]	; (6b04 <parsePreset+0x1544>)
    6a04:	6090      	str	r0, [r2, #8]
			  break;
    6a06:	f7ff bb06 	b.w	6016 <parsePreset+0xa56>
			  shapeTick[i] = &sawTick;
    6a0a:	4a3b      	ldr	r2, [pc, #236]	; (6af8 <parsePreset+0x1538>)
    6a0c:	483e      	ldr	r0, [pc, #248]	; (6b08 <parsePreset+0x1548>)
    6a0e:	6090      	str	r0, [r2, #8]
			  break;
    6a10:	f7ff bb01 	b.w	6016 <parsePreset+0xa56>
			  shapeTick[i] = &sineTriTick;
    6a14:	4a38      	ldr	r2, [pc, #224]	; (6af8 <parsePreset+0x1538>)
    6a16:	483d      	ldr	r0, [pc, #244]	; (6b0c <parsePreset+0x154c>)
    6a18:	6090      	str	r0, [r2, #8]
			  break;
    6a1a:	f7ff bafc 	b.w	6016 <parsePreset+0xa56>
			  shapeTick[i] = &sawSquareTick;
    6a1e:	4a36      	ldr	r2, [pc, #216]	; (6af8 <parsePreset+0x1538>)
    6a20:	483b      	ldr	r0, [pc, #236]	; (6b10 <parsePreset+0x1550>)
    6a22:	6090      	str	r0, [r2, #8]
			  break;
    6a24:	f7ff baf7 	b.w	6016 <parsePreset+0xa56>
			  shapeTick[i] = &userTick;
    6a28:	4a33      	ldr	r2, [pc, #204]	; (6af8 <parsePreset+0x1538>)
    6a2a:	4834      	ldr	r0, [pc, #208]	; (6afc <parsePreset+0x153c>)
    6a2c:	6050      	str	r0, [r2, #4]
			  break;
    6a2e:	f7ff baba 	b.w	5fa6 <parsePreset+0x9e6>
			  shapeTick[i] = &triTick;
    6a32:	4a31      	ldr	r2, [pc, #196]	; (6af8 <parsePreset+0x1538>)
    6a34:	4837      	ldr	r0, [pc, #220]	; (6b14 <parsePreset+0x1554>)
    6a36:	6050      	str	r0, [r2, #4]
			  break;
    6a38:	f7ff bab5 	b.w	5fa6 <parsePreset+0x9e6>
			  shapeTick[i] = &sineTick;
    6a3c:	4a2e      	ldr	r2, [pc, #184]	; (6af8 <parsePreset+0x1538>)
    6a3e:	4830      	ldr	r0, [pc, #192]	; (6b00 <parsePreset+0x1540>)
    6a40:	6050      	str	r0, [r2, #4]
			  break;
    6a42:	f7ff bab0 	b.w	5fa6 <parsePreset+0x9e6>
			  shapeTick[i] = &pulseTick;
    6a46:	4a2c      	ldr	r2, [pc, #176]	; (6af8 <parsePreset+0x1538>)
    6a48:	482e      	ldr	r0, [pc, #184]	; (6b04 <parsePreset+0x1544>)
    6a4a:	6050      	str	r0, [r2, #4]
			  break;
    6a4c:	f7ff baab 	b.w	5fa6 <parsePreset+0x9e6>
			  shapeTick[i] = &sawTick;
    6a50:	4a29      	ldr	r2, [pc, #164]	; (6af8 <parsePreset+0x1538>)
    6a52:	482d      	ldr	r0, [pc, #180]	; (6b08 <parsePreset+0x1548>)
    6a54:	6050      	str	r0, [r2, #4]
			  break;
    6a56:	f7ff baa6 	b.w	5fa6 <parsePreset+0x9e6>
			  shapeTick[i] = &sawSquareTick;
    6a5a:	4a27      	ldr	r2, [pc, #156]	; (6af8 <parsePreset+0x1538>)
    6a5c:	482c      	ldr	r0, [pc, #176]	; (6b10 <parsePreset+0x1550>)
    6a5e:	6050      	str	r0, [r2, #4]
			  break;
    6a60:	f7ff baa1 	b.w	5fa6 <parsePreset+0x9e6>
			  shapeTick[i] = &userTick;
    6a64:	4b24      	ldr	r3, [pc, #144]	; (6af8 <parsePreset+0x1538>)
    6a66:	4a25      	ldr	r2, [pc, #148]	; (6afc <parsePreset+0x153c>)
    6a68:	601a      	str	r2, [r3, #0]
			  break;
    6a6a:	f7ff ba43 	b.w	5ef4 <parsePreset+0x934>
			  shapeTick[i] = &triTick;
    6a6e:	4b22      	ldr	r3, [pc, #136]	; (6af8 <parsePreset+0x1538>)
    6a70:	4a28      	ldr	r2, [pc, #160]	; (6b14 <parsePreset+0x1554>)
    6a72:	601a      	str	r2, [r3, #0]
			  break;
    6a74:	f7ff ba3e 	b.w	5ef4 <parsePreset+0x934>
			  shapeTick[i] = &sineTick;
    6a78:	4b1f      	ldr	r3, [pc, #124]	; (6af8 <parsePreset+0x1538>)
    6a7a:	4a21      	ldr	r2, [pc, #132]	; (6b00 <parsePreset+0x1540>)
    6a7c:	601a      	str	r2, [r3, #0]
			  break;
    6a7e:	f7ff ba39 	b.w	5ef4 <parsePreset+0x934>
			  shapeTick[i] = &pulseTick;
    6a82:	4b1d      	ldr	r3, [pc, #116]	; (6af8 <parsePreset+0x1538>)
    6a84:	4a1f      	ldr	r2, [pc, #124]	; (6b04 <parsePreset+0x1544>)
    6a86:	601a      	str	r2, [r3, #0]
			  break;
    6a88:	f7ff ba34 	b.w	5ef4 <parsePreset+0x934>
			  shapeTick[i] = &sawTick;
    6a8c:	4b1a      	ldr	r3, [pc, #104]	; (6af8 <parsePreset+0x1538>)
    6a8e:	4a1e      	ldr	r2, [pc, #120]	; (6b08 <parsePreset+0x1548>)
    6a90:	601a      	str	r2, [r3, #0]
			  break;
    6a92:	f7ff ba2f 	b.w	5ef4 <parsePreset+0x934>
			  shapeTick[i] = &sawSquareTick;
    6a96:	4b18      	ldr	r3, [pc, #96]	; (6af8 <parsePreset+0x1538>)
    6a98:	4a1d      	ldr	r2, [pc, #116]	; (6b10 <parsePreset+0x1550>)
    6a9a:	601a      	str	r2, [r3, #0]
			  break;
    6a9c:	f7ff ba2a 	b.w	5ef4 <parsePreset+0x934>
    6aa0:	4c1d      	ldr	r4, [pc, #116]	; (6b18 <parsePreset+0x1558>)
    6aa2:	f7ff b94d 	b.w	5d40 <parsePreset+0x780>
    6aa6:	f8df 9074 	ldr.w	r9, [pc, #116]	; 6b1c <parsePreset+0x155c>
    6aaa:	f7ff b937 	b.w	5d1c <parsePreset+0x75c>
    6aae:	bf00      	nop
    6ab0:	20019958 	.word	0x20019958
    6ab4:	200050d8 	.word	0x200050d8
    6ab8:	20000744 	.word	0x20000744
    6abc:	200055a8 	.word	0x200055a8
    6ac0:	200056bc 	.word	0x200056bc
    6ac4:	20000015 	.word	0x20000015
    6ac8:	200146d8 	.word	0x200146d8
    6acc:	200052c0 	.word	0x200052c0
    6ad0:	20005284 	.word	0x20005284
    6ad4:	2001aa98 	.word	0x2001aa98
    6ad8:	20000740 	.word	0x20000740
    6adc:	2000073c 	.word	0x2000073c
    6ae0:	2000002c 	.word	0x2000002c
    6ae4:	2000002d 	.word	0x2000002d
    6ae8:	20005748 	.word	0x20005748
    6aec:	58020000 	.word	0x58020000
    6af0:	20014b58 	.word	0x20014b58
    6af4:	2001aeac 	.word	0x2001aeac
    6af8:	20005bfc 	.word	0x20005bfc
    6afc:	00002261 	.word	0x00002261
    6b00:	000021c1 	.word	0x000021c1
    6b04:	00002161 	.word	0x00002161
    6b08:	00002121 	.word	0x00002121
    6b0c:	000020c1 	.word	0x000020c1
    6b10:	00002061 	.word	0x00002061
    6b14:	00002201 	.word	0x00002201
    6b18:	2001aa78 	.word	0x2001aa78
    6b1c:	20019968 	.word	0x20019968

00006b20 <handleSPI>:
	if (foundBrainFirmware)
    6b20:	4974      	ldr	r1, [pc, #464]	; (6cf4 <handleSPI+0x1d4>)
	interruptChecker = 1;
    6b22:	4b75      	ldr	r3, [pc, #468]	; (6cf8 <handleSPI+0x1d8>)
{
    6b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 1;
    6b28:	2501      	movs	r5, #1
{
    6b2a:	4604      	mov	r4, r0
    6b2c:	ed2d 8b02 	vpush	{d8}
	if (foundBrainFirmware)
    6b30:	780a      	ldrb	r2, [r1, #0]
{
    6b32:	b085      	sub	sp, #20
	interruptChecker = 1;
    6b34:	701d      	strb	r5, [r3, #0]
	if (foundBrainFirmware)
    6b36:	b37a      	cbz	r2, 6b98 <handleSPI+0x78>
		if (brainFirmwareEndSignal)
    6b38:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 6d14 <handleSPI+0x1f4>
    6b3c:	f8d9 0000 	ldr.w	r0, [r9]
    6b40:	2800      	cmp	r0, #0
    6b42:	d045      	beq.n	6bd0 <handleSPI+0xb0>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    6b44:	4b6d      	ldr	r3, [pc, #436]	; (6cfc <handleSPI+0x1dc>)
    6b46:	20f9      	movs	r0, #249	; 0xf9
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    6b48:	4a6d      	ldr	r2, [pc, #436]	; (6d00 <handleSPI+0x1e0>)
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    6b4a:	4423      	add	r3, r4
			brainFirmwareSendInProgress = 0;
    6b4c:	4c6d      	ldr	r4, [pc, #436]	; (6d04 <handleSPI+0x1e4>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    6b4e:	6812      	ldr	r2, [r2, #0]
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    6b50:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
			brainFirmwareEndSignal = 0;
    6b54:	2000      	movs	r0, #0
			foundBrainFirmware = 0;
    6b56:	7008      	strb	r0, [r1, #0]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    6b58:	0c11      	lsrs	r1, r2, #16
			brainFirmwareSendInProgress = 0;
    6b5a:	6020      	str	r0, [r4, #0]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    6b5c:	0e14      	lsrs	r4, r2, #24
			brainFirmwareEndSignal = 0;
    6b5e:	f8c9 0000 	str.w	r0, [r9]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    6b62:	0a10      	lsrs	r0, r2, #8
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    6b64:	3a00      	subs	r2, #0
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    6b66:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
			SPI_LEVERS_TX[offset+31] = 254;
    6b6a:	f04f 01fe 	mov.w	r1, #254	; 0xfe
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    6b6e:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    6b72:	bf18      	it	ne
    6b74:	2201      	movne	r2, #1
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    6b76:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
			SPI_LEVERS_TX[offset+31] = 254;
    6b7a:	f883 105f 	strb.w	r1, [r3, #95]	; 0x5f
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    6b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    6b82:	2200      	movs	r2, #0
    6b84:	f44f 6100 	mov.w	r1, #2048	; 0x800
    6b88:	485f      	ldr	r0, [pc, #380]	; (6d08 <handleSPI+0x1e8>)
}
    6b8a:	b005      	add	sp, #20
    6b8c:	ecbd 8b02 	vpop	{d8}
    6b90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
    6b94:	f003 bc40 	b.w	a418 <__HAL_GPIO_WritePin_veneer>
		if (SPI_LEVERS_RX[offset] == ReceivingPitches)
    6b98:	4d58      	ldr	r5, [pc, #352]	; (6cfc <handleSPI+0x1dc>)
    6b9a:	5c2b      	ldrb	r3, [r5, r0]
    6b9c:	2b01      	cmp	r3, #1
    6b9e:	f000 80bd 	beq.w	6d1c <handleSPI+0x1fc>
		else if (SPI_LEVERS_RX[offset] == ReceivingPreset)
    6ba2:	2b0c      	cmp	r3, #12
    6ba4:	f200 8275 	bhi.w	7092 <handleSPI+0x572>
    6ba8:	2b01      	cmp	r3, #1
    6baa:	f240 8151 	bls.w	6e50 <handleSPI+0x330>
    6bae:	3b02      	subs	r3, #2
    6bb0:	2b0a      	cmp	r3, #10
    6bb2:	f200 814d 	bhi.w	6e50 <handleSPI+0x330>
    6bb6:	e8df f013 	tbh	[pc, r3, lsl #1]
    6bba:	02c0      	.short	0x02c0
    6bbc:	014b031f 	.word	0x014b031f
    6bc0:	0429014b 	.word	0x0429014b
    6bc4:	014b04af 	.word	0x014b04af
    6bc8:	053b014b 	.word	0x053b014b
    6bcc:	055102f3 	.word	0x055102f3
		else if (brainFirmwareSendInProgress)
    6bd0:	4a4c      	ldr	r2, [pc, #304]	; (6d04 <handleSPI+0x1e4>)
    6bd2:	6813      	ldr	r3, [r2, #0]
    6bd4:	2b00      	cmp	r3, #0
    6bd6:	f000 8274 	beq.w	70c2 <handleSPI+0x5a2>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    6bda:	4d48      	ldr	r5, [pc, #288]	; (6cfc <handleSPI+0x1dc>)
    6bdc:	23fb      	movs	r3, #251	; 0xfb
    6bde:	f8df b138 	ldr.w	fp, [pc, #312]	; 6d18 <handleSPI+0x1f8>
    6be2:	eb05 0a04 	add.w	sl, r5, r4
    6be6:	4f49      	ldr	r7, [pc, #292]	; (6d0c <handleSPI+0x1ec>)
    6be8:	f8db 2000 	ldr.w	r2, [fp]
    6bec:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
			for (int i = 0; i < 30; i++)
    6bf0:	4b47      	ldr	r3, [pc, #284]	; (6d10 <handleSPI+0x1f0>)
    6bf2:	8819      	ldrh	r1, [r3, #0]
    6bf4:	e032      	b.n	6c5c <handleSPI+0x13c>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6bf6:	2e3a      	cmp	r6, #58	; 0x3a
    6bf8:	f000 829a 	beq.w	7130 <handleSPI+0x610>
    6bfc:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
					positionInRowLine = 0;
    6c00:	f04f 0100 	mov.w	r1, #0
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6c04:	bf08      	it	eq
    6c06:	3202      	addeq	r2, #2
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6c08:	18bb      	adds	r3, r7, r2
    6c0a:	789b      	ldrb	r3, [r3, #2]
    6c0c:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6c0e:	bf08      	it	eq
    6c10:	3203      	addeq	r2, #3
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6c12:	18bb      	adds	r3, r7, r2
    6c14:	78db      	ldrb	r3, [r3, #3]
    6c16:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6c18:	bf08      	it	eq
    6c1a:	3204      	addeq	r2, #4
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6c1c:	18bb      	adds	r3, r7, r2
    6c1e:	791b      	ldrb	r3, [r3, #4]
    6c20:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6c22:	bf08      	it	eq
    6c24:	3205      	addeq	r2, #5
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6c26:	18bb      	adds	r3, r7, r2
    6c28:	795b      	ldrb	r3, [r3, #5]
    6c2a:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6c2c:	bf08      	it	eq
    6c2e:	3206      	addeq	r2, #6
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6c30:	18bb      	adds	r3, r7, r2
    6c32:	799b      	ldrb	r3, [r3, #6]
    6c34:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6c36:	bf08      	it	eq
    6c38:	3207      	addeq	r2, #7
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6c3a:	18bb      	adds	r3, r7, r2
    6c3c:	79db      	ldrb	r3, [r3, #7]
    6c3e:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6c40:	bf08      	it	eq
    6c42:	3208      	addeq	r2, #8
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6c44:	18bb      	adds	r3, r7, r2
    6c46:	7a1b      	ldrb	r3, [r3, #8]
    6c48:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6c4a:	bf08      	it	eq
    6c4c:	3209      	addeq	r2, #9
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    6c4e:	18bb      	adds	r3, r7, r2
    6c50:	7a5b      	ldrb	r3, [r3, #9]
    6c52:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    6c54:	bf08      	it	eq
    6c56:	320a      	addeq	r2, #10
			for (int i = 0; i < 30; i++)
    6c58:	281e      	cmp	r0, #30
    6c5a:	d03a      	beq.n	6cd2 <handleSPI+0x1b2>
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    6c5c:	5cbe      	ldrb	r6, [r7, r2]
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    6c5e:	f102 0c01 	add.w	ip, r2, #1
	if (('0' <= value) && (value <= '9'))
    6c62:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    6c66:	f817 e00c 	ldrb.w	lr, [r7, ip]
	if (('0' <= value) && (value <= '9'))
    6c6a:	b2db      	uxtb	r3, r3
    6c6c:	2b09      	cmp	r3, #9
    6c6e:	f240 824a 	bls.w	7106 <handleSPI+0x5e6>
	if (('a' <= value) && (value <= 'f'))
    6c72:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
    6c76:	2b05      	cmp	r3, #5
    6c78:	f240 8248 	bls.w	710c <handleSPI+0x5ec>
	if (('A' <= value) && (value <= 'F'))
    6c7c:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
    6c80:	2b05      	cmp	r3, #5
    6c82:	f240 824f 	bls.w	7124 <handleSPI+0x604>
    6c86:	2300      	movs	r3, #0
	if (('0' <= value) && (value <= '9'))
    6c88:	f1ae 0830 	sub.w	r8, lr, #48	; 0x30
    6c8c:	fa5f f888 	uxtb.w	r8, r8
    6c90:	f1b8 0f09 	cmp.w	r8, #9
    6c94:	f240 8234 	bls.w	7100 <handleSPI+0x5e0>
	if (('a' <= value) && (value <= 'f'))
    6c98:	f1ae 0861 	sub.w	r8, lr, #97	; 0x61
    6c9c:	f1b8 0f05 	cmp.w	r8, #5
    6ca0:	f240 823a 	bls.w	7118 <handleSPI+0x5f8>
	if (('A' <= value) && (value <= 'F'))
    6ca4:	f1ae 0841 	sub.w	r8, lr, #65	; 0x41
    6ca8:	f1b8 0f05 	cmp.w	r8, #5
    6cac:	d804      	bhi.n	6cb8 <handleSPI+0x198>
		return (uint8_t) (10 + value - 'A');
    6cae:	f1ae 0837 	sub.w	r8, lr, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    6cb2:	ea43 0308 	orr.w	r3, r3, r8
    6cb6:	b2db      	uxtb	r3, r3
				if (positionInRowLine < 294)
    6cb8:	f5b1 7f93 	cmp.w	r1, #294	; 0x126
    6cbc:	d29b      	bcs.n	6bf6 <handleSPI+0xd6>
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    6cbe:	eb0a 0600 	add.w	r6, sl, r0
			for (int i = 0; i < 30; i++)
    6cc2:	3001      	adds	r0, #1
				positionInRowLine++;
    6cc4:	3101      	adds	r1, #1
					brainFirmwareBufferIndex += 2;
    6cc6:	3202      	adds	r2, #2
			for (int i = 0; i < 30; i++)
    6cc8:	281e      	cmp	r0, #30
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    6cca:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
				positionInRowLine++;
    6cce:	b289      	uxth	r1, r1
			for (int i = 0; i < 30; i++)
    6cd0:	d1c4      	bne.n	6c5c <handleSPI+0x13c>
    6cd2:	4b0f      	ldr	r3, [pc, #60]	; (6d10 <handleSPI+0x1f0>)
			SPI_LEVERS_TX[offset+31] = 254;
    6cd4:	442c      	add	r4, r5
    6cd6:	f8cb 2000 	str.w	r2, [fp]
    6cda:	8019      	strh	r1, [r3, #0]
    6cdc:	23fe      	movs	r3, #254	; 0xfe
    6cde:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    6ce2:	4b07      	ldr	r3, [pc, #28]	; (6d00 <handleSPI+0x1e0>)
    6ce4:	681b      	ldr	r3, [r3, #0]
    6ce6:	4293      	cmp	r3, r2
    6ce8:	f63f af4b 	bhi.w	6b82 <handleSPI+0x62>
				brainFirmwareEndSignal = 1;
    6cec:	2301      	movs	r3, #1
    6cee:	f8c9 3000 	str.w	r3, [r9]
    6cf2:	e746      	b.n	6b82 <handleSPI+0x62>
    6cf4:	20016cd8 	.word	0x20016cd8
    6cf8:	20016cdb 	.word	0x20016cdb
    6cfc:	30000800 	.word	0x30000800
    6d00:	20014b14 	.word	0x20014b14
    6d04:	20014b10 	.word	0x20014b10
    6d08:	58020c00 	.word	0x58020c00
    6d0c:	c3c00000 	.word	0xc3c00000
    6d10:	2001aa80 	.word	0x2001aa80
    6d14:	20014b0c 	.word	0x20014b0c
    6d18:	20014b08 	.word	0x20014b08
			 for (int i = 0; i < numStringsThisBoard; i++)
    6d1c:	4bca      	ldr	r3, [pc, #808]	; (7048 <handleSPI+0x528>)
    6d1e:	7818      	ldrb	r0, [r3, #0]
    6d20:	2800      	cmp	r0, #0
    6d22:	f000 8083 	beq.w	6e2c <handleSPI+0x30c>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    6d26:	49c9      	ldr	r1, [pc, #804]	; (704c <handleSPI+0x52c>)
			 uint8_t currentByte = offset+1;
    6d28:	1c63      	adds	r3, r4, #1
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    6d2a:	ed9f 6ac9 	vldr	s12, [pc, #804]	; 7050 <handleSPI+0x530>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    6d2e:	680a      	ldr	r2, [r1, #0]
    6d30:	b2db      	uxtb	r3, r3
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    6d32:	eddf 6ac8 	vldr	s13, [pc, #800]	; 7054 <handleSPI+0x534>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    6d36:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    6d3a:	5cd2      	ldrb	r2, [r2, r3]
    6d3c:	0212      	lsls	r2, r2, #8
    6d3e:	ee07 2a90 	vmov	s15, r2
    6d42:	680a      	ldr	r2, [r1, #0]
    6d44:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    6d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    6d4c:	441a      	add	r2, r3
    6d4e:	7852      	ldrb	r2, [r2, #1]
    6d50:	ee07 2a90 	vmov	s15, r2
    6d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6d58:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    6d5c:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    6d60:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    6d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d68:	d507      	bpl.n	6d7a <handleSPI+0x25a>
    6d6a:	eeb5 7a40 	vcmp.f32	s14, #0.0
    6d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6d72:	dd02      	ble.n	6d7a <handleSPI+0x25a>
					stringMIDIPitches[i] = myPitch;
    6d74:	4ab8      	ldr	r2, [pc, #736]	; (7058 <handleSPI+0x538>)
    6d76:	ed82 7a00 	vstr	s14, [r2]
			 for (int i = 0; i < numStringsThisBoard; i++)
    6d7a:	2801      	cmp	r0, #1
    6d7c:	d056      	beq.n	6e2c <handleSPI+0x30c>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    6d7e:	680a      	ldr	r2, [r1, #0]
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    6d80:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 7050 <handleSPI+0x530>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    6d84:	3201      	adds	r2, #1
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    6d86:	eddf 6ab3 	vldr	s13, [pc, #716]	; 7054 <handleSPI+0x534>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    6d8a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    6d8e:	5cd2      	ldrb	r2, [r2, r3]
    6d90:	0212      	lsls	r2, r2, #8
    6d92:	ee07 2a90 	vmov	s15, r2
    6d96:	680a      	ldr	r2, [r1, #0]
    6d98:	3201      	adds	r2, #1
    6d9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    6d9e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    6da2:	441a      	add	r2, r3
    6da4:	7852      	ldrb	r2, [r2, #1]
    6da6:	ee07 2a90 	vmov	s15, r2
    6daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6dae:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    6db2:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    6db6:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    6dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6dbe:	d507      	bpl.n	6dd0 <handleSPI+0x2b0>
    6dc0:	eeb5 7a40 	vcmp.f32	s14, #0.0
    6dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6dc8:	dd02      	ble.n	6dd0 <handleSPI+0x2b0>
					stringMIDIPitches[i] = myPitch;
    6dca:	4aa3      	ldr	r2, [pc, #652]	; (7058 <handleSPI+0x538>)
    6dcc:	ed82 7a01 	vstr	s14, [r2, #4]
			 for (int i = 0; i < numStringsThisBoard; i++)
    6dd0:	2802      	cmp	r0, #2
    6dd2:	d02b      	beq.n	6e2c <handleSPI+0x30c>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    6dd4:	680a      	ldr	r2, [r1, #0]
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    6dd6:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 7054 <handleSPI+0x534>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    6dda:	3202      	adds	r2, #2
    6ddc:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    6de0:	5cd2      	ldrb	r2, [r2, r3]
    6de2:	0212      	lsls	r2, r2, #8
    6de4:	ee07 2a90 	vmov	s15, r2
    6de8:	680a      	ldr	r2, [r1, #0]
    6dea:	3202      	adds	r2, #2
    6dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    6df0:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    6df4:	441a      	add	r2, r3
    6df6:	7852      	ldrb	r2, [r2, #1]
    6df8:	ee06 2a90 	vmov	s13, r2
    6dfc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    6e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    6e04:	ee27 7a87 	vmul.f32	s14, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    6e08:	eeb5 7a40 	vcmp.f32	s14, #0.0
    6e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6e10:	dd09      	ble.n	6e26 <handleSPI+0x306>
    6e12:	eddf 6a8f 	vldr	s13, [pc, #572]	; 7050 <handleSPI+0x530>
    6e16:	eef4 7a66 	vcmp.f32	s15, s13
    6e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6e1e:	d502      	bpl.n	6e26 <handleSPI+0x306>
					stringMIDIPitches[i] = myPitch;
    6e20:	4a8d      	ldr	r2, [pc, #564]	; (7058 <handleSPI+0x538>)
    6e22:	ed82 7a02 	vstr	s14, [r2, #8]
			 for (int i = 0; i < numStringsThisBoard; i++)
    6e26:	2803      	cmp	r0, #3
    6e28:	f040 8422 	bne.w	7670 <handleSPI+0xb50>
			 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    6e2c:	488b      	ldr	r0, [pc, #556]	; (705c <handleSPI+0x53c>)
    6e2e:	f44f 7100 	mov.w	r1, #512	; 0x200
    6e32:	2201      	movs	r2, #1
			 whichBar = 0;
    6e34:	2600      	movs	r6, #0
			 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    6e36:	f003 faef 	bl	a418 <__HAL_GPIO_WritePin_veneer>
			 whichBar = 0;
    6e3a:	4b89      	ldr	r3, [pc, #548]	; (7060 <handleSPI+0x540>)
			 updateStateFromSPIMessage(offset);
    6e3c:	4620      	mov	r0, r4
			 whichBar = 0;
    6e3e:	701e      	strb	r6, [r3, #0]
			updateStateFromSPIMessage(offset);
    6e40:	f7f9 fb5e 	bl	500 <updateStateFromSPIMessage>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
    6e44:	2200      	movs	r2, #0
    6e46:	f44f 7100 	mov.w	r1, #512	; 0x200
    6e4a:	4884      	ldr	r0, [pc, #528]	; (705c <handleSPI+0x53c>)
    6e4c:	f003 fae4 	bl	a418 <__HAL_GPIO_WritePin_veneer>
			if (boardNumber == 0)
    6e50:	4b84      	ldr	r3, [pc, #528]	; (7064 <handleSPI+0x544>)
    6e52:	781b      	ldrb	r3, [r3, #0]
    6e54:	2b00      	cmp	r3, #0
    6e56:	f47f ae94 	bne.w	6b82 <handleSPI+0x62>
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    6e5a:	4b83      	ldr	r3, [pc, #524]	; (7068 <handleSPI+0x548>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    6e5c:	442c      	add	r4, r5
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    6e5e:	4a83      	ldr	r2, [pc, #524]	; (706c <handleSPI+0x54c>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    6e60:	20fd      	movs	r0, #253	; 0xfd
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    6e62:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    6e64:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    6e68:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    6e6c:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    6e6e:	4d80      	ldr	r5, [pc, #512]	; (7070 <handleSPI+0x550>)
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    6e70:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6e74:	0049      	lsls	r1, r1, #1
    6e76:	5c50      	ldrb	r0, [r2, r1]
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    6e78:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    6e7a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    6e7e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6e82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6e86:	7849      	ldrb	r1, [r1, #1]
    6e88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    6e8c:	7819      	ldrb	r1, [r3, #0]
    6e8e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6e92:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6e96:	7889      	ldrb	r1, [r1, #2]
    6e98:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    6e9c:	7819      	ldrb	r1, [r3, #0]
    6e9e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6ea2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6ea6:	78c9      	ldrb	r1, [r1, #3]
    6ea8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    6eac:	7819      	ldrb	r1, [r3, #0]
    6eae:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6eb2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6eb6:	7909      	ldrb	r1, [r1, #4]
    6eb8:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    6ebc:	7819      	ldrb	r1, [r3, #0]
    6ebe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6ec2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6ec6:	7949      	ldrb	r1, [r1, #5]
    6ec8:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    6ecc:	7819      	ldrb	r1, [r3, #0]
    6ece:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6ed2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6ed6:	7989      	ldrb	r1, [r1, #6]
    6ed8:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    6edc:	7819      	ldrb	r1, [r3, #0]
    6ede:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6ee2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6ee6:	79c9      	ldrb	r1, [r1, #7]
    6ee8:	f884 1049 	strb.w	r1, [r4, #73]	; 0x49
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    6eec:	7819      	ldrb	r1, [r3, #0]
    6eee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6ef2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6ef6:	7a09      	ldrb	r1, [r1, #8]
    6ef8:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    6efc:	7819      	ldrb	r1, [r3, #0]
    6efe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6f02:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6f06:	7a49      	ldrb	r1, [r1, #9]
    6f08:	f884 104b 	strb.w	r1, [r4, #75]	; 0x4b
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    6f0c:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    6f0e:	782e      	ldrb	r6, [r5, #0]
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    6f10:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    6f14:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    6f18:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6f1c:	7a89      	ldrb	r1, [r1, #10]
    6f1e:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    6f22:	7819      	ldrb	r1, [r3, #0]
    6f24:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6f28:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6f2c:	7ac9      	ldrb	r1, [r1, #11]
    6f2e:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    6f32:	7819      	ldrb	r1, [r3, #0]
    6f34:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6f38:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6f3c:	7b09      	ldrb	r1, [r1, #12]
    6f3e:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    6f42:	7819      	ldrb	r1, [r3, #0]
    6f44:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    6f48:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    6f4c:	eb06 0186 	add.w	r1, r6, r6, lsl #2
				whichMacroToSendName = (whichMacroToSendName + 1);
    6f50:	3601      	adds	r6, #1
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    6f52:	7b52      	ldrb	r2, [r2, #13]
				whichMacroToSendName = (whichMacroToSendName + 1);
    6f54:	b2f6      	uxtb	r6, r6
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    6f56:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    6f5a:	781a      	ldrb	r2, [r3, #0]
    6f5c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    6f60:	00d0      	lsls	r0, r2, #3
    6f62:	4a44      	ldr	r2, [pc, #272]	; (7074 <handleSPI+0x554>)
    6f64:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6f68:	5c10      	ldrb	r0, [r2, r0]
    6f6a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    6f6e:	7818      	ldrb	r0, [r3, #0]
    6f70:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    6f74:	00c0      	lsls	r0, r0, #3
    6f76:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6f7a:	4410      	add	r0, r2
    6f7c:	7840      	ldrb	r0, [r0, #1]
    6f7e:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    6f82:	7818      	ldrb	r0, [r3, #0]
    6f84:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    6f88:	00c0      	lsls	r0, r0, #3
    6f8a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6f8e:	4410      	add	r0, r2
    6f90:	7880      	ldrb	r0, [r0, #2]
    6f92:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    6f96:	7818      	ldrb	r0, [r3, #0]
    6f98:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    6f9c:	00c0      	lsls	r0, r0, #3
    6f9e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6fa2:	4410      	add	r0, r2
    6fa4:	78c0      	ldrb	r0, [r0, #3]
    6fa6:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    6faa:	7818      	ldrb	r0, [r3, #0]
    6fac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    6fb0:	00c0      	lsls	r0, r0, #3
    6fb2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6fb6:	4410      	add	r0, r2
    6fb8:	7900      	ldrb	r0, [r0, #4]
    6fba:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    6fbe:	7818      	ldrb	r0, [r3, #0]
    6fc0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    6fc4:	00c0      	lsls	r0, r0, #3
    6fc6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6fca:	4410      	add	r0, r2
    6fcc:	7940      	ldrb	r0, [r0, #5]
    6fce:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    6fd2:	7818      	ldrb	r0, [r3, #0]
    6fd4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    6fd8:	00c0      	lsls	r0, r0, #3
    6fda:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6fde:	4410      	add	r0, r2
    6fe0:	7980      	ldrb	r0, [r0, #6]
    6fe2:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    6fe6:	7818      	ldrb	r0, [r3, #0]
    6fe8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    6fec:	00c0      	lsls	r0, r0, #3
    6fee:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6ff2:	4410      	add	r0, r2
    6ff4:	79c0      	ldrb	r0, [r0, #7]
    6ff6:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    6ffa:	7818      	ldrb	r0, [r3, #0]
    6ffc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    7000:	00c0      	lsls	r0, r0, #3
    7002:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    7006:	4410      	add	r0, r2
    7008:	7a00      	ldrb	r0, [r0, #8]
    700a:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    700e:	7818      	ldrb	r0, [r3, #0]
    7010:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    7014:	00c0      	lsls	r0, r0, #3
    7016:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    701a:	440a      	add	r2, r1
    701c:	7a52      	ldrb	r2, [r2, #9]
    701e:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
				SPI_LEVERS_TX[offset+27] = 13;
    7022:	220d      	movs	r2, #13
    7024:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
				SPI_LEVERS_TX[offset+28] = 13;
    7028:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
				SPI_LEVERS_TX[offset+29] = 13;
    702c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    7030:	4a11      	ldr	r2, [pc, #68]	; (7078 <handleSPI+0x558>)
    7032:	8812      	ldrh	r2, [r2, #0]
    7034:	b292      	uxth	r2, r2
    7036:	3a00      	subs	r2, #0
    7038:	bf18      	it	ne
    703a:	2201      	movne	r2, #1
				if (whichMacroToSendName >= 12)
    703c:	2e0b      	cmp	r6, #11
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    703e:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
				SPI_LEVERS_TX[offset+31] = 254;
    7042:	f04f 02fe 	mov.w	r2, #254	; 0xfe
    7046:	e019      	b.n	707c <handleSPI+0x55c>
    7048:	20000015 	.word	0x20000015
    704c:	2000513c 	.word	0x2000513c
    7050:	478bff74 	.word	0x478bff74
    7054:	3b000080 	.word	0x3b000080
    7058:	20014850 	.word	0x20014850
    705c:	58021800 	.word	0x58021800
    7060:	20014930 	.word	0x20014930
    7064:	20014b05 	.word	0x20014b05
    7068:	2001cf4d 	.word	0x2001cf4d
    706c:	30032000 	.word	0x30032000
    7070:	2001cf4c 	.word	0x2001cf4c
    7074:	30033380 	.word	0x30033380
    7078:	20005b88 	.word	0x20005b88
    707c:	f884 205f 	strb.w	r2, [r4, #95]	; 0x5f
				if (whichMacroToSendName >= 12)
    7080:	d93c      	bls.n	70fc <handleSPI+0x5dc>
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    7082:	781a      	ldrb	r2, [r3, #0]
					whichMacroToSendName = 0;
    7084:	2100      	movs	r1, #0
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    7086:	3201      	adds	r2, #1
					whichMacroToSendName = 0;
    7088:	7029      	strb	r1, [r5, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    708a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    708e:	701a      	strb	r2, [r3, #0]
    7090:	e577      	b.n	6b82 <handleSPI+0x62>
    7092:	2bfd      	cmp	r3, #253	; 0xfd
    7094:	f47f aedc 	bne.w	6e50 <handleSPI+0x330>
			if(writingState == ReceivingPreset)
    7098:	4b46      	ldr	r3, [pc, #280]	; (71b4 <handleSPI+0x694>)
    709a:	7819      	ldrb	r1, [r3, #0]
    709c:	2902      	cmp	r1, #2
    709e:	f47f aed7 	bne.w	6e50 <handleSPI+0x330>
				 presetNumberToLoad = presetNumberToSave;
    70a2:	4845      	ldr	r0, [pc, #276]	; (71b8 <handleSPI+0x698>)
				 writingState = 0;
    70a4:	701a      	strb	r2, [r3, #0]
				 presetNumberToLoad = presetNumberToSave;
    70a6:	7803      	ldrb	r3, [r0, #0]
				 presetWaitingToParse = bufferPos;
    70a8:	4a44      	ldr	r2, [pc, #272]	; (71bc <handleSPI+0x69c>)
				 presetNumberToLoad = presetNumberToSave;
    70aa:	4945      	ldr	r1, [pc, #276]	; (71c0 <handleSPI+0x6a0>)
    70ac:	b2db      	uxtb	r3, r3
    70ae:	700b      	strb	r3, [r1, #0]
				 presetWaitingToParse = bufferPos;
    70b0:	8813      	ldrh	r3, [r2, #0]
    70b2:	4944      	ldr	r1, [pc, #272]	; (71c4 <handleSPI+0x6a4>)
    70b4:	b29b      	uxth	r3, r3
    70b6:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    70b8:	8813      	ldrh	r3, [r2, #0]
    70ba:	4a43      	ldr	r2, [pc, #268]	; (71c8 <handleSPI+0x6a8>)
    70bc:	b29b      	uxth	r3, r3
    70be:	6013      	str	r3, [r2, #0]
    70c0:	e6c6      	b.n	6e50 <handleSPI+0x330>
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    70c2:	4b42      	ldr	r3, [pc, #264]	; (71cc <handleSPI+0x6ac>)
    70c4:	20fc      	movs	r0, #252	; 0xfc
    70c6:	4942      	ldr	r1, [pc, #264]	; (71d0 <handleSPI+0x6b0>)
    70c8:	f8df b128 	ldr.w	fp, [pc, #296]	; 71f4 <handleSPI+0x6d4>
			brainFirmwareSendInProgress = 1;
    70cc:	6015      	str	r5, [r2, #0]
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    70ce:	190a      	adds	r2, r1, r4
    70d0:	1c5d      	adds	r5, r3, #1
    70d2:	f8db 1000 	ldr.w	r1, [fp]
    70d6:	f103 0464 	add.w	r4, r3, #100	; 0x64
    70da:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
			for (uint8_t i = 0; i<100; i++)
    70de:	461a      	mov	r2, r3
				if (brainFirmwareBuffer[i] ==  0x3a)
    70e0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    70e4:	283a      	cmp	r0, #58	; 0x3a
    70e6:	d101      	bne.n	70ec <handleSPI+0x5cc>
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    70e8:	3202      	adds	r2, #2
    70ea:	1b51      	subs	r1, r2, r5
			for (uint8_t i = 0; i<100; i++)
    70ec:	429c      	cmp	r4, r3
    70ee:	d1f6      	bne.n	70de <handleSPI+0x5be>
			positionInRowLine = 0;
    70f0:	4b38      	ldr	r3, [pc, #224]	; (71d4 <handleSPI+0x6b4>)
    70f2:	2200      	movs	r2, #0
    70f4:	f8cb 1000 	str.w	r1, [fp]
    70f8:	801a      	strh	r2, [r3, #0]
    70fa:	e542      	b.n	6b82 <handleSPI+0x62>
				whichMacroToSendName = (whichMacroToSendName + 1);
    70fc:	702e      	strb	r6, [r5, #0]
    70fe:	e540      	b.n	6b82 <handleSPI+0x62>
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    7100:	ea48 0303 	orr.w	r3, r8, r3
    7104:	e5d8      	b.n	6cb8 <handleSPI+0x198>
    7106:	011b      	lsls	r3, r3, #4
    7108:	b2db      	uxtb	r3, r3
    710a:	e5bd      	b.n	6c88 <handleSPI+0x168>
		return (uint8_t) (10 + value - 'a');
    710c:	f1a6 0357 	sub.w	r3, r6, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    7110:	011b      	lsls	r3, r3, #4
    7112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'a');
    7116:	e5b7      	b.n	6c88 <handleSPI+0x168>
    7118:	f1ae 0857 	sub.w	r8, lr, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    711c:	ea43 0308 	orr.w	r3, r3, r8
    7120:	b2db      	uxtb	r3, r3
		return (uint8_t) (10 + value - 'a');
    7122:	e5c9      	b.n	6cb8 <handleSPI+0x198>
		return (uint8_t) (10 + value - 'A');
    7124:	f1a6 0337 	sub.w	r3, r6, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    7128:	011b      	lsls	r3, r3, #4
    712a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'A');
    712e:	e5ab      	b.n	6c88 <handleSPI+0x168>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    7130:	18bb      	adds	r3, r7, r2
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    7132:	4662      	mov	r2, ip
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    7134:	f893 e002 	ldrb.w	lr, [r3, #2]
    7138:	e560      	b.n	6bfc <handleSPI+0xdc>
			 if (writingState != ReceivingPreset)
    713a:	4a1e      	ldr	r2, [pc, #120]	; (71b4 <handleSPI+0x694>)
    713c:	7813      	ldrb	r3, [r2, #0]
    713e:	2b02      	cmp	r3, #2
    7140:	f000 82c9 	beq.w	76d6 <handleSPI+0xbb6>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    7144:	4b24      	ldr	r3, [pc, #144]	; (71d8 <handleSPI+0x6b8>)
    7146:	2102      	movs	r1, #2
    7148:	0758      	lsls	r0, r3, #29
    714a:	7011      	strb	r1, [r2, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    714c:	f040 85d9 	bne.w	7d02 <handleSPI+0x11e2>
    7150:	f503 6280 	add.w	r2, r3, #1024	; 0x400
						audioOutBuffer[i] = 0;
    7154:	2000      	movs	r0, #0
    7156:	2100      	movs	r1, #0
    7158:	e8e3 0102 	strd	r0, r1, [r3], #8
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    715c:	429a      	cmp	r2, r3
    715e:	d1fb      	bne.n	7158 <handleSPI+0x638>
				 diskBusy = 1;
    7160:	4a1e      	ldr	r2, [pc, #120]	; (71dc <handleSPI+0x6bc>)
    7162:	2101      	movs	r1, #1
				 audioMasterLevel = 0.0f;
    7164:	4b1e      	ldr	r3, [pc, #120]	; (71e0 <handleSPI+0x6c0>)
				 diskBusy = 1;
    7166:	7011      	strb	r1, [r2, #0]
				 audioMasterLevel = 0.0f;
    7168:	2200      	movs	r2, #0
				 bufferPos = 0;
    716a:	4914      	ldr	r1, [pc, #80]	; (71bc <handleSPI+0x69c>)
				 audioMasterLevel = 0.0f;
    716c:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    716e:	2300      	movs	r3, #0
    7170:	800b      	strh	r3, [r1, #0]
			 presetNumberToSave = SPI_LEVERS_RX[offset + 1];
    7172:	192b      	adds	r3, r5, r4
    7174:	4a10      	ldr	r2, [pc, #64]	; (71b8 <handleSPI+0x698>)
    7176:	4e1b      	ldr	r6, [pc, #108]	; (71e4 <handleSPI+0x6c4>)
    7178:	785b      	ldrb	r3, [r3, #1]
    717a:	4f1b      	ldr	r7, [pc, #108]	; (71e8 <handleSPI+0x6c8>)
    717c:	7013      	strb	r3, [r2, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    717e:	1ca3      	adds	r3, r4, #2
    7180:	b2db      	uxtb	r3, r3
    7182:	1e5a      	subs	r2, r3, #1
    7184:	441e      	add	r6, r3
    7186:	442a      	add	r2, r5
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    7188:	880b      	ldrh	r3, [r1, #0]
    718a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    718e:	b29b      	uxth	r3, r3
			 for (int i = 0; i < 28; i++)
    7190:	4296      	cmp	r6, r2
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    7192:	54f8      	strb	r0, [r7, r3]
    7194:	f103 0301 	add.w	r3, r3, #1
    7198:	b29b      	uxth	r3, r3
    719a:	800b      	strh	r3, [r1, #0]
			 for (int i = 0; i < 28; i++)
    719c:	d1f4      	bne.n	7188 <handleSPI+0x668>
    719e:	e657      	b.n	6e50 <handleSPI+0x330>
			if (boardNumber == 0)
    71a0:	4b12      	ldr	r3, [pc, #72]	; (71ec <handleSPI+0x6cc>)
    71a2:	781b      	ldrb	r3, [r3, #0]
    71a4:	2b00      	cmp	r3, #0
    71a6:	f47f acec 	bne.w	6b82 <handleSPI+0x62>
				brainFirmwareUpdateRequested = 1;
    71aa:	4b11      	ldr	r3, [pc, #68]	; (71f0 <handleSPI+0x6d0>)
    71ac:	2201      	movs	r2, #1
    71ae:	601a      	str	r2, [r3, #0]
    71b0:	e653      	b.n	6e5a <handleSPI+0x33a>
    71b2:	bf00      	nop
    71b4:	2001cf4e 	.word	0x2001cf4e
    71b8:	2001aa93 	.word	0x2001aa93
    71bc:	20014b1c 	.word	0x20014b1c
    71c0:	2001aa92 	.word	0x2001aa92
    71c4:	2001aa98 	.word	0x2001aa98
    71c8:	2001aa9c 	.word	0x2001aa9c
    71cc:	c3bfffff 	.word	0xc3bfffff
    71d0:	30000800 	.word	0x30000800
    71d4:	2001aa80 	.word	0x2001aa80
    71d8:	30000000 	.word	0x30000000
    71dc:	20014b58 	.word	0x20014b58
    71e0:	2000073c 	.word	0x2000073c
    71e4:	3000081b 	.word	0x3000081b
    71e8:	30032380 	.word	0x30032380
    71ec:	20014b05 	.word	0x20014b05
    71f0:	20014b18 	.word	0x20014b18
    71f4:	20014b08 	.word	0x20014b08
			 uint8_t currentByte = offset+1;
    71f8:	f100 0801 	add.w	r8, r0, #1
				if (knobFrozen[i])
    71fc:	4fbb      	ldr	r7, [pc, #748]	; (74ec <handleSPI+0x9cc>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    71fe:	fa5f f888 	uxtb.w	r8, r8
				if (knobFrozen[i])
    7202:	783b      	ldrb	r3, [r7, #0]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7204:	f815 9008 	ldrb.w	r9, [r5, r8]
				if (knobFrozen[i])
    7208:	2b00      	cmp	r3, #0
    720a:	f000 8274 	beq.w	76f6 <handleSPI+0xbd6>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    720e:	4eb8      	ldr	r6, [pc, #736]	; (74f0 <handleSPI+0x9d0>)
    7210:	7833      	ldrb	r3, [r6, #0]
    7212:	1c9a      	adds	r2, r3, #2
    7214:	4591      	cmp	r9, r2
    7216:	dc02      	bgt.n	721e <handleSPI+0x6fe>
    7218:	3b02      	subs	r3, #2
    721a:	4599      	cmp	r9, r3
    721c:	da03      	bge.n	7226 <handleSPI+0x706>
						knobFrozen[i] = 0;
    721e:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7220:	f886 9000 	strb.w	r9, [r6]
						knobFrozen[i] = 0;
    7224:	703b      	strb	r3, [r7, #0]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7226:	eb05 0308 	add.w	r3, r5, r8
    722a:	f893 9001 	ldrb.w	r9, [r3, #1]
				if (knobFrozen[i])
    722e:	787b      	ldrb	r3, [r7, #1]
    7230:	2b00      	cmp	r3, #0
    7232:	f000 827d 	beq.w	7730 <handleSPI+0xc10>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7236:	7873      	ldrb	r3, [r6, #1]
    7238:	1c9a      	adds	r2, r3, #2
    723a:	454a      	cmp	r2, r9
    723c:	db02      	blt.n	7244 <handleSPI+0x724>
    723e:	3b02      	subs	r3, #2
    7240:	454b      	cmp	r3, r9
    7242:	dd03      	ble.n	724c <handleSPI+0x72c>
						knobFrozen[i] = 0;
    7244:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7246:	f886 9001 	strb.w	r9, [r6, #1]
						knobFrozen[i] = 0;
    724a:	707b      	strb	r3, [r7, #1]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    724c:	eb05 0308 	add.w	r3, r5, r8
    7250:	f893 9002 	ldrb.w	r9, [r3, #2]
				if (knobFrozen[i])
    7254:	78bb      	ldrb	r3, [r7, #2]
    7256:	2b00      	cmp	r3, #0
    7258:	f000 825c 	beq.w	7714 <handleSPI+0xbf4>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    725c:	78b3      	ldrb	r3, [r6, #2]
    725e:	1c9a      	adds	r2, r3, #2
    7260:	454a      	cmp	r2, r9
    7262:	db02      	blt.n	726a <handleSPI+0x74a>
    7264:	3b02      	subs	r3, #2
    7266:	4599      	cmp	r9, r3
    7268:	da03      	bge.n	7272 <handleSPI+0x752>
						knobFrozen[i] = 0;
    726a:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    726c:	f886 9002 	strb.w	r9, [r6, #2]
						knobFrozen[i] = 0;
    7270:	70bb      	strb	r3, [r7, #2]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7272:	eb05 0308 	add.w	r3, r5, r8
    7276:	f893 9003 	ldrb.w	r9, [r3, #3]
				if (knobFrozen[i])
    727a:	78fb      	ldrb	r3, [r7, #3]
    727c:	2b00      	cmp	r3, #0
    727e:	f000 82c7 	beq.w	7810 <handleSPI+0xcf0>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7282:	78f3      	ldrb	r3, [r6, #3]
    7284:	1c9a      	adds	r2, r3, #2
    7286:	454a      	cmp	r2, r9
    7288:	db02      	blt.n	7290 <handleSPI+0x770>
    728a:	3b02      	subs	r3, #2
    728c:	4599      	cmp	r9, r3
    728e:	da03      	bge.n	7298 <handleSPI+0x778>
						knobFrozen[i] = 0;
    7290:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7292:	f886 9003 	strb.w	r9, [r6, #3]
						knobFrozen[i] = 0;
    7296:	70fb      	strb	r3, [r7, #3]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7298:	eb05 0308 	add.w	r3, r5, r8
    729c:	f893 9004 	ldrb.w	r9, [r3, #4]
				if (knobFrozen[i])
    72a0:	793b      	ldrb	r3, [r7, #4]
    72a2:	2b00      	cmp	r3, #0
    72a4:	f000 82a6 	beq.w	77f4 <handleSPI+0xcd4>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    72a8:	7933      	ldrb	r3, [r6, #4]
    72aa:	1c9a      	adds	r2, r3, #2
    72ac:	454a      	cmp	r2, r9
    72ae:	db02      	blt.n	72b6 <handleSPI+0x796>
    72b0:	3b02      	subs	r3, #2
    72b2:	454b      	cmp	r3, r9
    72b4:	dd03      	ble.n	72be <handleSPI+0x79e>
						knobFrozen[i] = 0;
    72b6:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    72b8:	f886 9004 	strb.w	r9, [r6, #4]
						knobFrozen[i] = 0;
    72bc:	713b      	strb	r3, [r7, #4]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    72be:	eb05 0308 	add.w	r3, r5, r8
    72c2:	f893 9005 	ldrb.w	r9, [r3, #5]
				if (knobFrozen[i])
    72c6:	797b      	ldrb	r3, [r7, #5]
    72c8:	2b00      	cmp	r3, #0
    72ca:	f000 8285 	beq.w	77d8 <handleSPI+0xcb8>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    72ce:	7973      	ldrb	r3, [r6, #5]
    72d0:	1c9a      	adds	r2, r3, #2
    72d2:	4591      	cmp	r9, r2
    72d4:	dc02      	bgt.n	72dc <handleSPI+0x7bc>
    72d6:	3b02      	subs	r3, #2
    72d8:	4599      	cmp	r9, r3
    72da:	da03      	bge.n	72e4 <handleSPI+0x7c4>
						knobFrozen[i] = 0;
    72dc:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    72de:	f886 9005 	strb.w	r9, [r6, #5]
						knobFrozen[i] = 0;
    72e2:	717b      	strb	r3, [r7, #5]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    72e4:	eb05 0308 	add.w	r3, r5, r8
    72e8:	f893 9006 	ldrb.w	r9, [r3, #6]
				if (knobFrozen[i])
    72ec:	79bb      	ldrb	r3, [r7, #6]
    72ee:	2b00      	cmp	r3, #0
    72f0:	f000 8264 	beq.w	77bc <handleSPI+0xc9c>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    72f4:	79b3      	ldrb	r3, [r6, #6]
    72f6:	1c9a      	adds	r2, r3, #2
    72f8:	4591      	cmp	r9, r2
    72fa:	dc02      	bgt.n	7302 <handleSPI+0x7e2>
    72fc:	3b02      	subs	r3, #2
    72fe:	4599      	cmp	r9, r3
    7300:	da03      	bge.n	730a <handleSPI+0x7ea>
						knobFrozen[i] = 0;
    7302:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7304:	f886 9006 	strb.w	r9, [r6, #6]
						knobFrozen[i] = 0;
    7308:	71bb      	strb	r3, [r7, #6]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    730a:	eb05 0308 	add.w	r3, r5, r8
    730e:	f893 9007 	ldrb.w	r9, [r3, #7]
				if (knobFrozen[i])
    7312:	79fb      	ldrb	r3, [r7, #7]
    7314:	2b00      	cmp	r3, #0
    7316:	f000 8243 	beq.w	77a0 <handleSPI+0xc80>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    731a:	79f3      	ldrb	r3, [r6, #7]
    731c:	1c9a      	adds	r2, r3, #2
    731e:	4591      	cmp	r9, r2
    7320:	dc02      	bgt.n	7328 <handleSPI+0x808>
    7322:	3b02      	subs	r3, #2
    7324:	4599      	cmp	r9, r3
    7326:	da03      	bge.n	7330 <handleSPI+0x810>
						knobFrozen[i] = 0;
    7328:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    732a:	f886 9007 	strb.w	r9, [r6, #7]
						knobFrozen[i] = 0;
    732e:	71fb      	strb	r3, [r7, #7]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7330:	eb05 0308 	add.w	r3, r5, r8
    7334:	f893 9008 	ldrb.w	r9, [r3, #8]
				if (knobFrozen[i])
    7338:	7a3b      	ldrb	r3, [r7, #8]
    733a:	2b00      	cmp	r3, #0
    733c:	f000 8222 	beq.w	7784 <handleSPI+0xc64>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7340:	7a33      	ldrb	r3, [r6, #8]
    7342:	1c9a      	adds	r2, r3, #2
    7344:	4591      	cmp	r9, r2
    7346:	dc02      	bgt.n	734e <handleSPI+0x82e>
    7348:	3b02      	subs	r3, #2
    734a:	4599      	cmp	r9, r3
    734c:	da03      	bge.n	7356 <handleSPI+0x836>
						knobFrozen[i] = 0;
    734e:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7350:	f886 9008 	strb.w	r9, [r6, #8]
						knobFrozen[i] = 0;
    7354:	723b      	strb	r3, [r7, #8]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    7356:	eb05 0308 	add.w	r3, r5, r8
    735a:	f893 9009 	ldrb.w	r9, [r3, #9]
				if (knobFrozen[i])
    735e:	7a7b      	ldrb	r3, [r7, #9]
    7360:	2b00      	cmp	r3, #0
    7362:	f000 8201 	beq.w	7768 <handleSPI+0xc48>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    7366:	7a73      	ldrb	r3, [r6, #9]
    7368:	1c9a      	adds	r2, r3, #2
    736a:	4591      	cmp	r9, r2
    736c:	dc02      	bgt.n	7374 <handleSPI+0x854>
    736e:	3b02      	subs	r3, #2
    7370:	4599      	cmp	r9, r3
    7372:	da03      	bge.n	737c <handleSPI+0x85c>
						knobFrozen[i] = 0;
    7374:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    7376:	f886 9009 	strb.w	r9, [r6, #9]
						knobFrozen[i] = 0;
    737a:	727b      	strb	r3, [r7, #9]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    737c:	eb05 0308 	add.w	r3, r5, r8
    7380:	f893 900a 	ldrb.w	r9, [r3, #10]
				if (knobFrozen[i])
    7384:	7abb      	ldrb	r3, [r7, #10]
    7386:	2b00      	cmp	r3, #0
    7388:	f000 81e0 	beq.w	774c <handleSPI+0xc2c>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    738c:	7ab3      	ldrb	r3, [r6, #10]
    738e:	1c9a      	adds	r2, r3, #2
    7390:	4591      	cmp	r9, r2
    7392:	dc02      	bgt.n	739a <handleSPI+0x87a>
    7394:	3b02      	subs	r3, #2
    7396:	4599      	cmp	r9, r3
    7398:	da03      	bge.n	73a2 <handleSPI+0x882>
						knobFrozen[i] = 0;
    739a:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    739c:	f886 900a 	strb.w	r9, [r6, #10]
						knobFrozen[i] = 0;
    73a0:	72bb      	strb	r3, [r7, #10]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    73a2:	44a8      	add	r8, r5
				if (knobFrozen[i])
    73a4:	7afb      	ldrb	r3, [r7, #11]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    73a6:	f898 800b 	ldrb.w	r8, [r8, #11]
				if (knobFrozen[i])
    73aa:	2b00      	cmp	r3, #0
    73ac:	f000 8195 	beq.w	76da <handleSPI+0xbba>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    73b0:	7af3      	ldrb	r3, [r6, #11]
    73b2:	1c9a      	adds	r2, r3, #2
    73b4:	4590      	cmp	r8, r2
    73b6:	dc02      	bgt.n	73be <handleSPI+0x89e>
    73b8:	3b02      	subs	r3, #2
    73ba:	4598      	cmp	r8, r3
    73bc:	da03      	bge.n	73c6 <handleSPI+0x8a6>
						knobFrozen[i] = 0;
    73be:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    73c0:	f886 800b 	strb.w	r8, [r6, #11]
						knobFrozen[i] = 0;
    73c4:	72fb      	strb	r3, [r7, #11]
			currentByte += 12;
    73c6:	f104 070d 	add.w	r7, r4, #13
    73ca:	4e4a      	ldr	r6, [pc, #296]	; (74f4 <handleSPI+0x9d4>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    73cc:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 74f8 <handleSPI+0x9d8>
    73d0:	b2ff      	uxtb	r7, r7
    73d2:	f106 0828 	add.w	r8, r6, #40	; 0x28
    73d6:	3f01      	subs	r7, #1
    73d8:	442f      	add	r7, r5
    73da:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    73de:	4630      	mov	r0, r6
			for (int i = 0; i < 10; i++)
    73e0:	3604      	adds	r6, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    73e2:	ee00 3a10 	vmov	s0, r3
    73e6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    73ea:	ee20 0a08 	vmul.f32	s0, s0, s16
    73ee:	f001 f807 	bl	8400 <tExpSmooth_setDest>
			for (int i = 0; i < 10; i++)
    73f2:	45b0      	cmp	r8, r6
    73f4:	d1f1      	bne.n	73da <handleSPI+0x8ba>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
    73f6:	2201      	movs	r2, #1
    73f8:	4840      	ldr	r0, [pc, #256]	; (74fc <handleSPI+0x9dc>)
    73fa:	f44f 7100 	mov.w	r1, #512	; 0x200
    73fe:	f003 f80b 	bl	a418 <__HAL_GPIO_WritePin_veneer>
			whichBar = 1;
    7402:	4b3f      	ldr	r3, [pc, #252]	; (7500 <handleSPI+0x9e0>)
    7404:	2201      	movs	r2, #1
			updateStateFromSPIMessage(offset);
    7406:	4620      	mov	r0, r4
			whichBar = 1;
    7408:	701a      	strb	r2, [r3, #0]
    740a:	e519      	b.n	6e40 <handleSPI+0x320>
			if (presetReady)
    740c:	4b3d      	ldr	r3, [pc, #244]	; (7504 <handleSPI+0x9e4>)
    740e:	681b      	ldr	r3, [r3, #0]
    7410:	2b00      	cmp	r3, #0
    7412:	f43f ad1d 	beq.w	6e50 <handleSPI+0x330>
				uint8_t currentByte = offset+1;
    7416:	1c43      	adds	r3, r0, #1
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    7418:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 7508 <handleSPI+0x9e8>
    741c:	4f3b      	ldr	r7, [pc, #236]	; (750c <handleSPI+0x9ec>)
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    741e:	b2db      	uxtb	r3, r3
    7420:	18ea      	adds	r2, r5, r3
    7422:	5ceb      	ldrb	r3, [r5, r3]
    7424:	7856      	ldrb	r6, [r2, #1]
    7426:	eb06 2603 	add.w	r6, r6, r3, lsl #8
				currentByte = currentByte + 2;
    742a:	1cc3      	adds	r3, r0, #3
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    742c:	b2db      	uxtb	r3, r3
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    742e:	b2b6      	uxth	r6, r6
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    7430:	18e9      	adds	r1, r5, r3
    7432:	5cea      	ldrb	r2, [r5, r3]
    7434:	f1a6 083f 	sub.w	r8, r6, #63	; 0x3f
    7438:	784b      	ldrb	r3, [r1, #1]
    743a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    743e:	fa1f f288 	uxth.w	r2, r8
    7442:	ee07 3a90 	vmov	s15, r3
    7446:	00f3      	lsls	r3, r6, #3
    7448:	2a18      	cmp	r2, #24
    744a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    744e:	9301      	str	r3, [sp, #4]
    7450:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    7454:	ee67 7a87 	vmul.f32	s15, s15, s14
    7458:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    745c:	edc3 7a00 	vstr	s15, [r3]
    7460:	edc3 7a01 	vstr	s15, [r3, #4]
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    7464:	d805      	bhi.n	7472 <handleSPI+0x952>
    7466:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    746a:	40d3      	lsrs	r3, r2
    746c:	07d9      	lsls	r1, r3, #31
    746e:	f100 8262 	bmi.w	7936 <handleSPI+0xe16>
    7472:	00f3      	lsls	r3, r6, #3
			 for (int i = 0; i < numStringsThisBoard; i++)
    7474:	f04f 0b00 	mov.w	fp, #0
    7478:	46a1      	mov	r9, r4
    747a:	eba3 0806 	sub.w	r8, r3, r6
    747e:	465c      	mov	r4, fp
    7480:	eb07 0888 	add.w	r8, r7, r8, lsl #2
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    7484:	46c2      	mov	sl, r8
    7486:	ecb8 0a01 	vldmia	r8!, {s0}
    748a:	f8da 3010 	ldr.w	r3, [sl, #16]
    748e:	4798      	blx	r3
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    7490:	4621      	mov	r1, r4
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    7492:	ed88 0a01 	vstr	s0, [r8, #4]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    7496:	f8da 3014 	ldr.w	r3, [sl, #20]
    749a:	f89a 0018 	ldrb.w	r0, [sl, #24]
    749e:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    74a0:	2c00      	cmp	r4, #0
    74a2:	f000 8116 	beq.w	76d2 <handleSPI+0xbb2>
    74a6:	f1a6 0323 	sub.w	r3, r6, #35	; 0x23
    74aa:	464c      	mov	r4, r9
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    74ac:	b299      	uxth	r1, r3
    74ae:	291a      	cmp	r1, #26
    74b0:	d804      	bhi.n	74bc <handleSPI+0x99c>
    74b2:	4a17      	ldr	r2, [pc, #92]	; (7510 <handleSPI+0x9f0>)
    74b4:	40ca      	lsrs	r2, r1
    74b6:	07d2      	lsls	r2, r2, #31
    74b8:	f100 8348 	bmi.w	7b4c <handleSPI+0x102c>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    74bc:	f1a6 0218 	sub.w	r2, r6, #24
    74c0:	b291      	uxth	r1, r2
    74c2:	291a      	cmp	r1, #26
    74c4:	f240 826e 	bls.w	79a4 <handleSPI+0xe84>
				if ((whichParam == Noise))
    74c8:	2e12      	cmp	r6, #18
    74ca:	f040 83b5 	bne.w	7c38 <handleSPI+0x1118>
					if (params[whichParam].realVal[0]  > 0.5f)
    74ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    74d2:	ed97 7a80 	vldr	s14, [r7, #512]	; 0x200
    74d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    74da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    74de:	f77f acb7 	ble.w	6e50 <handleSPI+0x330>
						noiseOn = 1;
    74e2:	4b0c      	ldr	r3, [pc, #48]	; (7514 <handleSPI+0x9f4>)
    74e4:	2201      	movs	r2, #1
    74e6:	701a      	strb	r2, [r3, #0]
    74e8:	e4b2      	b.n	6e50 <handleSPI+0x330>
    74ea:	bf00      	nop
    74ec:	20005284 	.word	0x20005284
    74f0:	2001aaa0 	.word	0x2001aaa0
    74f4:	20005708 	.word	0x20005708
    74f8:	3b808081 	.word	0x3b808081
    74fc:	58021800 	.word	0x58021800
    7500:	20014930 	.word	0x20014930
    7504:	20005748 	.word	0x20005748
    7508:	377ffff6 	.word	0x377ffff6
    750c:	20019968 	.word	0x20019968
    7510:	04002001 	.word	0x04002001
    7514:	200055a8 	.word	0x200055a8
			if (presetReady)
    7518:	4bc4      	ldr	r3, [pc, #784]	; (782c <handleSPI+0xd0c>)
    751a:	681b      	ldr	r3, [r3, #0]
    751c:	2b00      	cmp	r3, #0
    751e:	f43f ac97 	beq.w	6e50 <handleSPI+0x330>
				uint8_t currentByte = offset+1;
    7522:	1c43      	adds	r3, r0, #1
    7524:	f8df 9378 	ldr.w	r9, [pc, #888]	; 78a0 <handleSPI+0xd80>
				uint8_t foundOne = 0;
    7528:	f04f 0e00 	mov.w	lr, #0
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    752c:	f04f 0c20 	mov.w	ip, #32
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    7530:	b2db      	uxtb	r3, r3
    7532:	5ce9      	ldrb	r1, [r5, r3]
    7534:	442b      	add	r3, r5
    7536:	785e      	ldrb	r6, [r3, #1]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    7538:	795f      	ldrb	r7, [r3, #5]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    753a:	eb06 2601 	add.w	r6, r6, r1, lsl #8
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    753e:	7919      	ldrb	r1, [r3, #4]
				uint8_t whichSlot = (SPI_LEVERS_RX[currentByte+2]);
    7540:	f893 8002 	ldrb.w	r8, [r3, #2]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    7544:	eb07 2701 	add.w	r7, r7, r1, lsl #8
				uint8_t mappingChangeType = (SPI_LEVERS_RX[currentByte+3]);
    7548:	f893 a003 	ldrb.w	sl, [r3, #3]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    754c:	b2b6      	uxth	r6, r6
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    754e:	4649      	mov	r1, r9
    7550:	b23f      	sxth	r7, r7
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    7552:	4673      	mov	r3, lr
					if (mappings[j].destNumber == destNumber)
    7554:	7808      	ldrb	r0, [r1, #0]
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    7556:	314c      	adds	r1, #76	; 0x4c
					if (mappings[j].destNumber == destNumber)
    7558:	42b0      	cmp	r0, r6
    755a:	d102      	bne.n	7562 <handleSPI+0xa42>
						whichMapping = j;
    755c:	b2da      	uxtb	r2, r3
						foundOne = 1;
    755e:	f04f 0e01 	mov.w	lr, #1
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    7562:	28ff      	cmp	r0, #255	; 0xff
    7564:	d103      	bne.n	756e <handleSPI+0xa4e>
    7566:	459c      	cmp	ip, r3
    7568:	bfc8      	it	gt
    756a:	fa5f fc83 	uxtbgt.w	ip, r3
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    756e:	3301      	adds	r3, #1
    7570:	2b20      	cmp	r3, #32
    7572:	d1ef      	bne.n	7554 <handleSPI+0xa34>
				if (foundOne == 0)
    7574:	f1be 0f00 	cmp.w	lr, #0
    7578:	d110      	bne.n	759c <handleSPI+0xa7c>
					numMappings++;
    757a:	49ad      	ldr	r1, [pc, #692]	; (7830 <handleSPI+0xd10>)
					mappings[whichMapping].destNumber = destNumber;
    757c:	234c      	movs	r3, #76	; 0x4c
					mappings[whichMapping].dest = &params[destNumber];
    757e:	4662      	mov	r2, ip
					numMappings++;
    7580:	7808      	ldrb	r0, [r1, #0]
					mappings[whichMapping].destNumber = destNumber;
    7582:	fb03 f30c 	mul.w	r3, r3, ip
					numMappings++;
    7586:	3001      	adds	r0, #1
					mappings[whichMapping].destNumber = destNumber;
    7588:	f809 6003 	strb.w	r6, [r9, r3]
					mappings[whichMapping].dest = &params[destNumber];
    758c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
					mappings[whichMapping].destNumber = destNumber;
    7590:	444b      	add	r3, r9
					numMappings++;
    7592:	7008      	strb	r0, [r1, #0]
					mappings[whichMapping].dest = &params[destNumber];
    7594:	49a7      	ldr	r1, [pc, #668]	; (7834 <handleSPI+0xd14>)
    7596:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    759a:	6059      	str	r1, [r3, #4]
				if (mappingChangeType == SourceID)
    759c:	f1ba 0f00 	cmp.w	sl, #0
    75a0:	f040 8182 	bne.w	78a8 <handleSPI+0xd88>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    75a4:	234c      	movs	r3, #76	; 0x4c
    75a6:	2001      	movs	r0, #1
					if (source == 255)
    75a8:	2fff      	cmp	r7, #255	; 0xff
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    75aa:	fb02 f303 	mul.w	r3, r2, r3
    75ae:	eb09 0b03 	add.w	fp, r9, r3
    75b2:	eb0b 0608 	add.w	r6, fp, r8
    75b6:	f886 0020 	strb.w	r0, [r6, #32]
					if (source == 255)
    75ba:	f000 83ac 	beq.w	7d16 <handleSPI+0x11f6>
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    75be:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 789c <handleSPI+0xd7c>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    75c2:	f108 0104 	add.w	r1, r8, #4
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    75c6:	f108 0e01 	add.w	lr, r8, #1
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    75ca:	2f03      	cmp	r7, #3
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    75cc:	eb0c 0bc7 	add.w	fp, ip, r7, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    75d0:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 78a4 <handleSPI+0xd84>
    75d4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
						mappings[whichMapping].hookActive[whichSlot] = 1;
    75d8:	f886 0048 	strb.w	r0, [r6, #72]	; 0x48
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    75dc:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
    75e0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    75e4:	4449      	add	r1, r9
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    75e6:	f849 b00e 	str.w	fp, [r9, lr]
    75ea:	f10b 0b04 	add.w	fp, fp, #4
    75ee:	444b      	add	r3, r9
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    75f0:	f8c1 c004 	str.w	ip, [r1, #4]
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    75f4:	f8c3 b00c 	str.w	fp, [r3, #12]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    75f8:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    75fc:	f340 8375 	ble.w	7cea <handleSPI+0x11ca>
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    7600:	f1a7 0318 	sub.w	r3, r7, #24
    7604:	2b03      	cmp	r3, #3
    7606:	f200 83ec 	bhi.w	7de2 <handleSPI+0x12c2>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    760a:	4b8b      	ldr	r3, [pc, #556]	; (7838 <handleSPI+0xd18>)
    760c:	443b      	add	r3, r7
    760e:	f803 0c18 	strb.w	r0, [r3, #-24]
						if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    7612:	2f03      	cmp	r7, #3
    7614:	d102      	bne.n	761c <handleSPI+0xafc>
							noiseOn = 1;
    7616:	4b89      	ldr	r3, [pc, #548]	; (783c <handleSPI+0xd1c>)
    7618:	2101      	movs	r1, #1
    761a:	7019      	strb	r1, [r3, #0]
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    761c:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    7620:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    7624:	2200      	movs	r2, #0
    7626:	4443      	add	r3, r8
    7628:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    762c:	63da      	str	r2, [r3, #60]	; 0x3c
    762e:	e40f      	b.n	6e50 <handleSPI+0x330>
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    7630:	182b      	adds	r3, r5, r0
    7632:	eddf 6a83 	vldr	s13, [pc, #524]	; 7840 <handleSPI+0xd20>
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    7636:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    763a:	4a82      	ldr	r2, [pc, #520]	; (7844 <handleSPI+0xd24>)
    763c:	785b      	ldrb	r3, [r3, #1]
    763e:	ee07 3a90 	vmov	s15, r3
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    7642:	4b81      	ldr	r3, [pc, #516]	; (7848 <handleSPI+0xd28>)
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    7644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    7648:	ee67 7aa6 	vmul.f32	s15, s15, s13
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    764c:	ee27 7a87 	vmul.f32	s14, s15, s14
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    7650:	edc2 7a00 	vstr	s15, [r2]
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    7654:	ed83 7a00 	vstr	s14, [r3]
    7658:	f7ff bbfa 	b.w	6e50 <handleSPI+0x330>
			if (boardNumber == 0)
    765c:	4b7b      	ldr	r3, [pc, #492]	; (784c <handleSPI+0xd2c>)
    765e:	781b      	ldrb	r3, [r3, #0]
    7660:	2b00      	cmp	r3, #0
    7662:	f47f aa8e 	bne.w	6b82 <handleSPI+0x62>
				pluckFirmwareUpdateRequested = 1;
    7666:	4b7a      	ldr	r3, [pc, #488]	; (7850 <handleSPI+0xd30>)
    7668:	2201      	movs	r2, #1
    766a:	601a      	str	r2, [r3, #0]
    766c:	f7ff bbf5 	b.w	6e5a <handleSPI+0x33a>
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    7670:	ed9f 6a78 	vldr	s12, [pc, #480]	; 7854 <handleSPI+0xd34>
			 for (int i = 0; i < numStringsThisBoard; i++)
    7674:	2603      	movs	r6, #3
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    7676:	eddf 6a78 	vldr	s13, [pc, #480]	; 7858 <handleSPI+0xd38>
					stringMIDIPitches[i] = myPitch;
    767a:	4f78      	ldr	r7, [pc, #480]	; (785c <handleSPI+0xd3c>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    767c:	680a      	ldr	r2, [r1, #0]
					stringMIDIPitches[i] = myPitch;
    767e:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    7682:	4432      	add	r2, r6
    7684:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    7688:	5cd2      	ldrb	r2, [r2, r3]
    768a:	0212      	lsls	r2, r2, #8
    768c:	ee07 2a90 	vmov	s15, r2
    7690:	680a      	ldr	r2, [r1, #0]
    7692:	4432      	add	r2, r6
    7694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    7698:	3601      	adds	r6, #1
    769a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    769e:	441a      	add	r2, r3
    76a0:	7852      	ldrb	r2, [r2, #1]
    76a2:	ee07 2a10 	vmov	s14, r2
    76a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    76aa:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    76ae:	ee27 7a86 	vmul.f32	s14, s15, s12
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    76b2:	eeb5 7a40 	vcmp.f32	s14, #0.0
    76b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    76ba:	dd06      	ble.n	76ca <handleSPI+0xbaa>
    76bc:	eef4 7a66 	vcmp.f32	s15, s13
    76c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    76c4:	d501      	bpl.n	76ca <handleSPI+0xbaa>
					stringMIDIPitches[i] = myPitch;
    76c6:	ed8c 7a00 	vstr	s14, [ip]
			 for (int i = 0; i < numStringsThisBoard; i++)
    76ca:	42b0      	cmp	r0, r6
    76cc:	dcd6      	bgt.n	767c <handleSPI+0xb5c>
    76ce:	f7ff bbad 	b.w	6e2c <handleSPI+0x30c>
    76d2:	2401      	movs	r4, #1
    76d4:	e6d7      	b.n	7486 <handleSPI+0x966>
    76d6:	4962      	ldr	r1, [pc, #392]	; (7860 <handleSPI+0xd40>)
    76d8:	e54b      	b.n	7172 <handleSPI+0x652>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    76da:	ee07 8a90 	vmov	s15, r8
    76de:	4861      	ldr	r0, [pc, #388]	; (7864 <handleSPI+0xd44>)
    76e0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    76e4:	eddf 7a60 	vldr	s15, [pc, #384]	; 7868 <handleSPI+0xd48>
    76e8:	ee20 0a27 	vmul.f32	s0, s0, s15
    76ec:	f000 fe88 	bl	8400 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    76f0:	f886 800b 	strb.w	r8, [r6, #11]
    76f4:	e667      	b.n	73c6 <handleSPI+0x8a6>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    76f6:	ee07 9a90 	vmov	s15, r9
					prevKnobByte[i] = newByte;
    76fa:	4e5c      	ldr	r6, [pc, #368]	; (786c <handleSPI+0xd4c>)
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    76fc:	485c      	ldr	r0, [pc, #368]	; (7870 <handleSPI+0xd50>)
    76fe:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    7702:	eddf 7a59 	vldr	s15, [pc, #356]	; 7868 <handleSPI+0xd48>
    7706:	ee20 0a27 	vmul.f32	s0, s0, s15
    770a:	f000 fe79 	bl	8400 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    770e:	f886 9000 	strb.w	r9, [r6]
    7712:	e588      	b.n	7226 <handleSPI+0x706>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    7714:	ee07 9a90 	vmov	s15, r9
    7718:	4856      	ldr	r0, [pc, #344]	; (7874 <handleSPI+0xd54>)
    771a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    771e:	eddf 7a52 	vldr	s15, [pc, #328]	; 7868 <handleSPI+0xd48>
    7722:	ee20 0a27 	vmul.f32	s0, s0, s15
    7726:	f000 fe6b 	bl	8400 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    772a:	f886 9002 	strb.w	r9, [r6, #2]
    772e:	e5a0      	b.n	7272 <handleSPI+0x752>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    7730:	ee07 9a90 	vmov	s15, r9
    7734:	4850      	ldr	r0, [pc, #320]	; (7878 <handleSPI+0xd58>)
    7736:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    773a:	eddf 7a4b 	vldr	s15, [pc, #300]	; 7868 <handleSPI+0xd48>
    773e:	ee20 0a27 	vmul.f32	s0, s0, s15
    7742:	f000 fe5d 	bl	8400 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    7746:	f886 9001 	strb.w	r9, [r6, #1]
    774a:	e57f      	b.n	724c <handleSPI+0x72c>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    774c:	ee07 9a90 	vmov	s15, r9
    7750:	484a      	ldr	r0, [pc, #296]	; (787c <handleSPI+0xd5c>)
    7752:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    7756:	eddf 7a44 	vldr	s15, [pc, #272]	; 7868 <handleSPI+0xd48>
    775a:	ee20 0a27 	vmul.f32	s0, s0, s15
    775e:	f000 fe4f 	bl	8400 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    7762:	f886 900a 	strb.w	r9, [r6, #10]
    7766:	e61c      	b.n	73a2 <handleSPI+0x882>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    7768:	ee07 9a90 	vmov	s15, r9
    776c:	4844      	ldr	r0, [pc, #272]	; (7880 <handleSPI+0xd60>)
    776e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    7772:	eddf 7a3d 	vldr	s15, [pc, #244]	; 7868 <handleSPI+0xd48>
    7776:	ee20 0a27 	vmul.f32	s0, s0, s15
    777a:	f000 fe41 	bl	8400 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    777e:	f886 9009 	strb.w	r9, [r6, #9]
    7782:	e5fb      	b.n	737c <handleSPI+0x85c>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    7784:	ee07 9a90 	vmov	s15, r9
    7788:	483e      	ldr	r0, [pc, #248]	; (7884 <handleSPI+0xd64>)
    778a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    778e:	eddf 7a36 	vldr	s15, [pc, #216]	; 7868 <handleSPI+0xd48>
    7792:	ee20 0a27 	vmul.f32	s0, s0, s15
    7796:	f000 fe33 	bl	8400 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    779a:	f886 9008 	strb.w	r9, [r6, #8]
    779e:	e5da      	b.n	7356 <handleSPI+0x836>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    77a0:	ee07 9a90 	vmov	s15, r9
    77a4:	4838      	ldr	r0, [pc, #224]	; (7888 <handleSPI+0xd68>)
    77a6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    77aa:	eddf 7a2f 	vldr	s15, [pc, #188]	; 7868 <handleSPI+0xd48>
    77ae:	ee20 0a27 	vmul.f32	s0, s0, s15
    77b2:	f000 fe25 	bl	8400 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    77b6:	f886 9007 	strb.w	r9, [r6, #7]
    77ba:	e5b9      	b.n	7330 <handleSPI+0x810>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    77bc:	ee07 9a90 	vmov	s15, r9
    77c0:	4832      	ldr	r0, [pc, #200]	; (788c <handleSPI+0xd6c>)
    77c2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    77c6:	eddf 7a28 	vldr	s15, [pc, #160]	; 7868 <handleSPI+0xd48>
    77ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    77ce:	f000 fe17 	bl	8400 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    77d2:	f886 9006 	strb.w	r9, [r6, #6]
    77d6:	e598      	b.n	730a <handleSPI+0x7ea>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    77d8:	ee07 9a90 	vmov	s15, r9
    77dc:	482c      	ldr	r0, [pc, #176]	; (7890 <handleSPI+0xd70>)
    77de:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    77e2:	eddf 7a21 	vldr	s15, [pc, #132]	; 7868 <handleSPI+0xd48>
    77e6:	ee20 0a27 	vmul.f32	s0, s0, s15
    77ea:	f000 fe09 	bl	8400 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    77ee:	f886 9005 	strb.w	r9, [r6, #5]
    77f2:	e577      	b.n	72e4 <handleSPI+0x7c4>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    77f4:	ee07 9a90 	vmov	s15, r9
    77f8:	4826      	ldr	r0, [pc, #152]	; (7894 <handleSPI+0xd74>)
    77fa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    77fe:	eddf 7a1a 	vldr	s15, [pc, #104]	; 7868 <handleSPI+0xd48>
    7802:	ee20 0a27 	vmul.f32	s0, s0, s15
    7806:	f000 fdfb 	bl	8400 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    780a:	f886 9004 	strb.w	r9, [r6, #4]
    780e:	e556      	b.n	72be <handleSPI+0x79e>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    7810:	ee07 9a90 	vmov	s15, r9
    7814:	4820      	ldr	r0, [pc, #128]	; (7898 <handleSPI+0xd78>)
    7816:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    781a:	eddf 7a13 	vldr	s15, [pc, #76]	; 7868 <handleSPI+0xd48>
    781e:	ee20 0a27 	vmul.f32	s0, s0, s15
    7822:	f000 fded 	bl	8400 <tExpSmooth_setDest>
					prevKnobByte[i] = newByte;
    7826:	f886 9003 	strb.w	r9, [r6, #3]
    782a:	e535      	b.n	7298 <handleSPI+0x778>
    782c:	20005748 	.word	0x20005748
    7830:	20019958 	.word	0x20019958
    7834:	20019968 	.word	0x20019968
    7838:	20005344 	.word	0x20005344
    783c:	200055a8 	.word	0x200055a8
    7840:	3c23d70a 	.word	0x3c23d70a
    7844:	2000000c 	.word	0x2000000c
    7848:	20000010 	.word	0x20000010
    784c:	20014b05 	.word	0x20014b05
    7850:	2001aa7c 	.word	0x2001aa7c
    7854:	3b000080 	.word	0x3b000080
    7858:	478bff74 	.word	0x478bff74
    785c:	20014850 	.word	0x20014850
    7860:	20014b1c 	.word	0x20014b1c
    7864:	200052ec 	.word	0x200052ec
    7868:	3b808081 	.word	0x3b808081
    786c:	2001aaa0 	.word	0x2001aaa0
    7870:	200052c0 	.word	0x200052c0
    7874:	200052c8 	.word	0x200052c8
    7878:	200052c4 	.word	0x200052c4
    787c:	200052e8 	.word	0x200052e8
    7880:	200052e4 	.word	0x200052e4
    7884:	200052e0 	.word	0x200052e0
    7888:	200052dc 	.word	0x200052dc
    788c:	200052d8 	.word	0x200052d8
    7890:	200052d4 	.word	0x200052d4
    7894:	200052d0 	.word	0x200052d0
    7898:	200052cc 	.word	0x200052cc
    789c:	200146d8 	.word	0x200146d8
    78a0:	20018d10 	.word	0x20018d10
    78a4:	20000744 	.word	0x20000744
				else if (mappingChangeType == Amount)
    78a8:	f1ba 0f01 	cmp.w	sl, #1
    78ac:	f000 8257 	beq.w	7d5e <handleSPI+0x123e>
				else if (mappingChangeType == ScalarID)
    78b0:	f1ba 0f02 	cmp.w	sl, #2
    78b4:	f47f aacc 	bne.w	6e50 <handleSPI+0x330>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    78b8:	48c3      	ldr	r0, [pc, #780]	; (7bc8 <handleSPI+0x10a8>)
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    78ba:	234c      	movs	r3, #76	; 0x4c
						if (scalar == 0xff)
    78bc:	2fff      	cmp	r7, #255	; 0xff
    78be:	ea4f 0a47 	mov.w	sl, r7, lsl #1
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    78c2:	f1a7 0e18 	sub.w	lr, r7, #24
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    78c6:	f1a7 0c14 	sub.w	ip, r7, #20
    78ca:	7801      	ldrb	r1, [r0, #0]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    78cc:	fb02 f303 	mul.w	r3, r2, r3
    78d0:	f108 0604 	add.w	r6, r8, #4
						if (scalar == 0xff)
    78d4:	f000 8256 	beq.w	7d84 <handleSPI+0x1264>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    78d8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    78dc:	4ebb      	ldr	r6, [pc, #748]	; (7bcc <handleSPI+0x10ac>)
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    78de:	f1be 0f03 	cmp.w	lr, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    78e2:	444b      	add	r3, r9
    78e4:	eb06 0bc7 	add.w	fp, r6, r7, lsl #3
    78e8:	f8c3 b004 	str.w	fp, [r3, #4]
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    78ec:	f200 825f 	bhi.w	7dae <handleSPI+0x128e>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    78f0:	4bb7      	ldr	r3, [pc, #732]	; (7bd0 <handleSPI+0x10b0>)
    78f2:	f04f 0b01 	mov.w	fp, #1
    78f6:	443b      	add	r3, r7
    78f8:	f803 bc18 	strb.w	fp, [r3, #-24]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    78fc:	234c      	movs	r3, #76	; 0x4c
								noiseOn = 1;
    78fe:	2f03      	cmp	r7, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    7900:	f10a 0a01 	add.w	sl, sl, #1
    7904:	fb02 f303 	mul.w	r3, r2, r3
								noiseOn = 1;
    7908:	bf08      	it	eq
    790a:	2101      	moveq	r1, #1
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    790c:	eb06 068a 	add.w	r6, r6, sl, lsl #2
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    7910:	f1be 0f03 	cmp.w	lr, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    7914:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    7918:	444b      	add	r3, r9
    791a:	629e      	str	r6, [r3, #40]	; 0x28
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    791c:	f200 823e 	bhi.w	7d9c <handleSPI+0x127c>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    7920:	4bab      	ldr	r3, [pc, #684]	; (7bd0 <handleSPI+0x10b0>)
    7922:	2201      	movs	r2, #1
    7924:	443b      	add	r3, r7
    7926:	f803 2c18 	strb.w	r2, [r3, #-24]
								noiseOn = 1;
    792a:	2f03      	cmp	r7, #3
    792c:	bf08      	it	eq
    792e:	2101      	moveq	r1, #1
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    7930:	7001      	strb	r1, [r0, #0]
    7932:	f7ff ba8d 	b.w	6e50 <handleSPI+0x330>
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    7936:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
					param *FXAlias = &params[whichParam + 1];
    793a:	f106 0901 	add.w	r9, r6, #1
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    793e:	ea4f 08e8 	mov.w	r8, r8, asr #3
					param *FXAlias = &params[whichParam + 1];
    7942:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    7946:	ee67 7a87 	vmul.f32	s15, s15, s14
					param *FXAlias = &params[whichParam + 1];
    794a:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
    794e:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    7952:	fef8 7a67 	vrinta.f32	s15, s15
    7956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    795a:	edcd 7a02 	vstr	s15, [sp, #8]
    795e:	f89d 0008 	ldrb.w	r0, [sp, #8]
					if (effectType > FXLowpass)
    7962:	280b      	cmp	r0, #11
    7964:	d902      	bls.n	796c <handleSPI+0xe4c>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    7966:	4a9b      	ldr	r2, [pc, #620]	; (7bd4 <handleSPI+0x10b4>)
    7968:	f8ca 2048 	str.w	r2, [sl, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    796c:	4641      	mov	r1, r8
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    796e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
					setEffectsFunctions(effectType, whichEffect);
    7972:	f002 fc6d 	bl	a250 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    7976:	4a98      	ldr	r2, [pc, #608]	; (7bd8 <handleSPI+0x10b8>)
    7978:	ebab 0309 	sub.w	r3, fp, r9
    797c:	eb02 0188 	add.w	r1, r2, r8, lsl #2
    7980:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    7984:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    7988:	615a      	str	r2, [r3, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    798a:	684b      	ldr	r3, [r1, #4]
    798c:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    7990:	688b      	ldr	r3, [r1, #8]
    7992:	f8ca 304c 	str.w	r3, [sl, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    7996:	68cb      	ldr	r3, [r1, #12]
    7998:	f8ca 3068 	str.w	r3, [sl, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    799c:	690b      	ldr	r3, [r1, #16]
    799e:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
    79a2:	e566      	b.n	7472 <handleSPI+0x952>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    79a4:	4b8d      	ldr	r3, [pc, #564]	; (7bdc <handleSPI+0x10bc>)
    79a6:	410b      	asrs	r3, r1
    79a8:	f013 0301 	ands.w	r3, r3, #1
    79ac:	d123      	bne.n	79f6 <handleSPI+0xed6>
					if (params[whichParam].realVal[0]  > 0.5f)
    79ae:	9901      	ldr	r1, [sp, #4]
    79b0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    79b4:	1b89      	subs	r1, r1, r6
    79b6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    79ba:	ed91 7a02 	vldr	s14, [r1, #8]
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    79be:	4988      	ldr	r1, [pc, #544]	; (7be0 <handleSPI+0x10c0>)
					if (params[whichParam].realVal[0]  > 0.5f)
    79c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    79c4:	fb81 0102 	smull	r0, r1, r1, r2
    79c8:	17d2      	asrs	r2, r2, #31
					if (params[whichParam].realVal[0]  > 0.5f)
    79ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    79ce:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
					if (params[whichParam].realVal[0]  > 0.5f)
    79d2:	dd02      	ble.n	79da <handleSPI+0xeba>
						oscOn[whichOsc] = 1;
    79d4:	2301      	movs	r3, #1
    79d6:	4983      	ldr	r1, [pc, #524]	; (7be4 <handleSPI+0x10c4>)
    79d8:	548b      	strb	r3, [r1, r2]
    79da:	4983      	ldr	r1, [pc, #524]	; (7be8 <handleSPI+0x10c8>)
    79dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
						enabledCount += oscsEnabled[j];
    79e0:	e9d1 3200 	ldrd	r3, r2, [r1]
    79e4:	4413      	add	r3, r2
					oscAmpMult = oscAmpMultArray[enabledCount];
    79e6:	688a      	ldr	r2, [r1, #8]
    79e8:	4413      	add	r3, r2
    79ea:	4a80      	ldr	r2, [pc, #512]	; (7bec <handleSPI+0x10cc>)
    79ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    79f0:	681a      	ldr	r2, [r3, #0]
    79f2:	4b7f      	ldr	r3, [pc, #508]	; (7bf0 <handleSPI+0x10d0>)
    79f4:	601a      	str	r2, [r3, #0]
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    79f6:	2e87      	cmp	r6, #135	; 0x87
    79f8:	d005      	beq.n	7a06 <handleSPI+0xee6>
    79fa:	2e8c      	cmp	r6, #140	; 0x8c
    79fc:	d003      	beq.n	7a06 <handleSPI+0xee6>
    79fe:	2e91      	cmp	r6, #145	; 0x91
    7a00:	d001      	beq.n	7a06 <handleSPI+0xee6>
    7a02:	2e96      	cmp	r6, #150	; 0x96
    7a04:	d16b      	bne.n	7ade <handleSPI+0xfbe>
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    7a06:	9b01      	ldr	r3, [sp, #4]
    7a08:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    7a0c:	4a79      	ldr	r2, [pc, #484]	; (7bf4 <handleSPI+0x10d4>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    7a0e:	f04f 0a00 	mov.w	sl, #0
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    7a12:	1b9b      	subs	r3, r3, r6
    7a14:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    7a18:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    7a1c:	f1a6 0387 	sub.w	r3, r6, #135	; 0x87
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    7a20:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    7a24:	fb82 1203 	smull	r1, r2, r2, r3
    7a28:	17db      	asrs	r3, r3, #31
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    7a2a:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    7a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    7a32:	ebc3 0862 	rsb	r8, r3, r2, asr #1
					setLFOShapes(LFOShape, whichLFO);
    7a36:	ee17 0a90 	vmov	r0, s15
    7a3a:	4641      	mov	r1, r8
    7a3c:	f002 fd3c 	bl	a4b8 <__setLFOShapes_veneer>
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    7a40:	496d      	ldr	r1, [pc, #436]	; (7bf8 <handleSPI+0x10d8>)
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    7a42:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    7a46:	9503      	str	r5, [sp, #12]
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    7a48:	eb08 0848 	add.w	r8, r8, r8, lsl #1
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    7a4c:	f103 0984 	add.w	r9, r3, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    7a50:	f103 0285 	add.w	r2, r3, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    7a54:	3386      	adds	r3, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    7a56:	eb01 0088 	add.w	r0, r1, r8, lsl #2
    7a5a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
    7a5e:	f851 1028 	ldr.w	r1, [r1, r8, lsl #2]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    7a62:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    7a66:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    7a6a:	eb07 0b82 	add.w	fp, r7, r2, lsl #2
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    7a6e:	eb07 0283 	add.w	r2, r7, r3, lsl #2
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    7a72:	ea4f 0389 	mov.w	r3, r9, lsl #2
    7a76:	eb07 0989 	add.w	r9, r7, r9, lsl #2
    7a7a:	f103 0840 	add.w	r8, r3, #64	; 0x40
    7a7e:	f8c9 1014 	str.w	r1, [r9, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    7a82:	6841      	ldr	r1, [r0, #4]
    7a84:	44b8      	add	r8, r7
    7a86:	f8cb 1014 	str.w	r1, [fp, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    7a8a:	6881      	ldr	r1, [r0, #8]
    7a8c:	4610      	mov	r0, r2
    7a8e:	6151      	str	r1, [r2, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    7a90:	f103 0108 	add.w	r1, r3, #8
    7a94:	187a      	adds	r2, r7, r1
    7a96:	f103 0124 	add.w	r1, r3, #36	; 0x24
    7a9a:	187b      	adds	r3, r7, r1
    7a9c:	4615      	mov	r5, r2
    7a9e:	e9cd 6401 	strd	r6, r4, [sp, #4]
    7aa2:	461c      	mov	r4, r3
    7aa4:	4606      	mov	r6, r0
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    7aa6:	ecb5 0a01 	vldmia	r5!, {s0}
    7aaa:	4651      	mov	r1, sl
    7aac:	f899 0018 	ldrb.w	r0, [r9, #24]
    7ab0:	f8d9 3014 	ldr.w	r3, [r9, #20]
    7ab4:	4798      	blx	r3
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    7ab6:	ecb4 0a01 	vldmia	r4!, {s0}
    7aba:	4651      	mov	r1, sl
    7abc:	f89b 0018 	ldrb.w	r0, [fp, #24]
    7ac0:	f8db 3014 	ldr.w	r3, [fp, #20]
    7ac4:	4798      	blx	r3
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    7ac6:	ecb8 0a01 	vldmia	r8!, {s0}
    7aca:	4651      	mov	r1, sl
    7acc:	6973      	ldr	r3, [r6, #20]
    7ace:	7e30      	ldrb	r0, [r6, #24]
    7ad0:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    7ad2:	f1ba 0f00 	cmp.w	sl, #0
    7ad6:	d016      	beq.n	7b06 <handleSPI+0xfe6>
    7ad8:	9d03      	ldr	r5, [sp, #12]
    7ada:	e9dd 6401 	ldrd	r6, r4, [sp, #4]
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    7ade:	2e01      	cmp	r6, #1
    7ae0:	d914      	bls.n	7b0c <handleSPI+0xfec>
				if (whichParam == FXOrder)
    7ae2:	2e9a      	cmp	r6, #154	; 0x9a
    7ae4:	d128      	bne.n	7b38 <handleSPI+0x1018>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    7ae6:	4a45      	ldr	r2, [pc, #276]	; (7bfc <handleSPI+0x10dc>)
    7ae8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    7aec:	4b44      	ldr	r3, [pc, #272]	; (7c00 <handleSPI+0x10e0>)
    7aee:	ed92 7a38 	vldr	s14, [r2, #224]	; 0xe0
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    7af2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    7af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7afa:	bfcc      	ite	gt
    7afc:	2201      	movgt	r2, #1
    7afe:	2200      	movle	r2, #0
    7b00:	701a      	strb	r2, [r3, #0]
    7b02:	f7ff b9a5 	b.w	6e50 <handleSPI+0x330>
    7b06:	f04f 0a01 	mov.w	sl, #1
    7b0a:	e7cc      	b.n	7aa6 <handleSPI+0xf86>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    7b0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    7b10:	ed97 7a02 	vldr	s14, [r7, #8]
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    7b14:	eddf 6a3b 	vldr	s13, [pc, #236]	; 7c04 <handleSPI+0x10e4>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    7b18:	ee37 7a67 	vsub.f32	s14, s14, s15
    7b1c:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 7c08 <handleSPI+0x10e8>
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    7b20:	ee67 7aa6 	vmul.f32	s15, s15, s13
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    7b24:	4b39      	ldr	r3, [pc, #228]	; (7c0c <handleSPI+0x10ec>)
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    7b26:	4a3a      	ldr	r2, [pc, #232]	; (7c10 <handleSPI+0x10f0>)
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    7b28:	eec6 6a07 	vdiv.f32	s13, s12, s14
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    7b2c:	edc2 7a00 	vstr	s15, [r2]
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    7b30:	edc3 6a00 	vstr	s13, [r3]
				if (whichParam == PedalControlsMaster)
    7b34:	f7ff b98c 	b.w	6e50 <handleSPI+0x330>
    7b38:	2e9b      	cmp	r6, #155	; 0x9b
    7b3a:	f47f a989 	bne.w	6e50 <handleSPI+0x330>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    7b3e:	4a2f      	ldr	r2, [pc, #188]	; (7bfc <handleSPI+0x10dc>)
    7b40:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    7b44:	4b33      	ldr	r3, [pc, #204]	; (7c14 <handleSPI+0x10f4>)
    7b46:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
    7b4a:	e7d2      	b.n	7af2 <handleSPI+0xfd2>
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    7b4c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    7b50:	edda 7a02 	vldr	s15, [sl, #8]
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    7b54:	4a22      	ldr	r2, [pc, #136]	; (7be0 <handleSPI+0x10c0>)
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    7b56:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    7b5a:	fb82 1203 	smull	r1, r2, r2, r3
    7b5e:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    7b60:	fef8 7a67 	vrinta.f32	s15, s15
    7b64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    7b68:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    7b6c:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    7b70:	2a06      	cmp	r2, #6
    7b72:	f63f aca3 	bhi.w	74bc <handleSPI+0x99c>
    7b76:	e8df f002 	tbb	[pc, r2]
    7b7a:	1d22      	.short	0x1d22
    7b7c:	090e1318 	.word	0x090e1318
    7b80:	04          	.byte	0x04
    7b81:	00          	.byte	0x00
			  shapeTick[i] = &userTick;
    7b82:	4a25      	ldr	r2, [pc, #148]	; (7c18 <handleSPI+0x10f8>)
    7b84:	4925      	ldr	r1, [pc, #148]	; (7c1c <handleSPI+0x10fc>)
    7b86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    7b8a:	e497      	b.n	74bc <handleSPI+0x99c>
			  shapeTick[i] = &triTick;
    7b8c:	4a22      	ldr	r2, [pc, #136]	; (7c18 <handleSPI+0x10f8>)
    7b8e:	4924      	ldr	r1, [pc, #144]	; (7c20 <handleSPI+0x1100>)
    7b90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    7b94:	e492      	b.n	74bc <handleSPI+0x99c>
			  shapeTick[i] = &sineTick;
    7b96:	4a20      	ldr	r2, [pc, #128]	; (7c18 <handleSPI+0x10f8>)
    7b98:	4922      	ldr	r1, [pc, #136]	; (7c24 <handleSPI+0x1104>)
    7b9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    7b9e:	e48d      	b.n	74bc <handleSPI+0x99c>
			  shapeTick[i] = &pulseTick;
    7ba0:	4a1d      	ldr	r2, [pc, #116]	; (7c18 <handleSPI+0x10f8>)
    7ba2:	4921      	ldr	r1, [pc, #132]	; (7c28 <handleSPI+0x1108>)
    7ba4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    7ba8:	e488      	b.n	74bc <handleSPI+0x99c>
			  shapeTick[i] = &sawTick;
    7baa:	4a1b      	ldr	r2, [pc, #108]	; (7c18 <handleSPI+0x10f8>)
    7bac:	491f      	ldr	r1, [pc, #124]	; (7c2c <handleSPI+0x110c>)
    7bae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    7bb2:	e483      	b.n	74bc <handleSPI+0x99c>
			  shapeTick[i] = &sineTriTick;
    7bb4:	4a18      	ldr	r2, [pc, #96]	; (7c18 <handleSPI+0x10f8>)
    7bb6:	491e      	ldr	r1, [pc, #120]	; (7c30 <handleSPI+0x1110>)
    7bb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    7bbc:	e47e      	b.n	74bc <handleSPI+0x99c>
			  shapeTick[i] = &sawSquareTick;
    7bbe:	4a16      	ldr	r2, [pc, #88]	; (7c18 <handleSPI+0x10f8>)
    7bc0:	491c      	ldr	r1, [pc, #112]	; (7c34 <handleSPI+0x1114>)
    7bc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    7bc6:	e479      	b.n	74bc <handleSPI+0x99c>
    7bc8:	200055a8 	.word	0x200055a8
    7bcc:	200146d8 	.word	0x200146d8
    7bd0:	20005344 	.word	0x20005344
    7bd4:	000053c1 	.word	0x000053c1
    7bd8:	20014b5c 	.word	0x20014b5c
    7bdc:	fbffdffe 	.word	0xfbffdffe
    7be0:	4ec4ec4f 	.word	0x4ec4ec4f
    7be4:	20005604 	.word	0x20005604
    7be8:	2001995c 	.word	0x2001995c
    7bec:	2000001c 	.word	0x2000001c
    7bf0:	20000018 	.word	0x20000018
    7bf4:	66666667 	.word	0x66666667
    7bf8:	20018cdc 	.word	0x20018cdc
    7bfc:	2001a968 	.word	0x2001a968
    7c00:	20016cd9 	.word	0x20016cd9
    7c04:	42fe0000 	.word	0x42fe0000
    7c08:	3c010204 	.word	0x3c010204
    7c0c:	2001994c 	.word	0x2001994c
    7c10:	20019950 	.word	0x20019950
    7c14:	2001aa78 	.word	0x2001aa78
    7c18:	20005bfc 	.word	0x20005bfc
    7c1c:	00002261 	.word	0x00002261
    7c20:	00002201 	.word	0x00002201
    7c24:	000021c1 	.word	0x000021c1
    7c28:	00002161 	.word	0x00002161
    7c2c:	00002121 	.word	0x00002121
    7c30:	000020c1 	.word	0x000020c1
    7c34:	00002061 	.word	0x00002061
				if ((whichParam == Filter1Type) || (whichParam == Filter2Type))
    7c38:	2e60      	cmp	r6, #96	; 0x60
    7c3a:	d002      	beq.n	7c42 <handleSPI+0x1122>
    7c3c:	2e66      	cmp	r6, #102	; 0x66
    7c3e:	f47f aeda 	bne.w	79f6 <handleSPI+0xed6>
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    7c42:	9b01      	ldr	r3, [sp, #4]
    7c44:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    7c48:	4968      	ldr	r1, [pc, #416]	; (7dec <handleSPI+0x12cc>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    7c4a:	f04f 0900 	mov.w	r9, #0
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    7c4e:	1b9b      	subs	r3, r3, r6
    7c50:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    7c54:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    7c58:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    7c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    7c60:	fb81 2103 	smull	r2, r1, r1, r3
    7c64:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    7c68:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    7c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    7c70:	ee17 0a90 	vmov	r0, s15
    7c74:	f002 fb0c 	bl	a290 <__setFilterTypes_veneer>
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    7c78:	485d      	ldr	r0, [pc, #372]	; (7df0 <handleSPI+0x12d0>)
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    7c7a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    7c7e:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    7c82:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    7c86:	005b      	lsls	r3, r3, #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    7c88:	f8dc 0004 	ldr.w	r0, [ip, #4]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    7c8c:	f103 0863 	add.w	r8, r3, #99	; 0x63
					int filterGainParamNum = Filter1Gain + (whichFilter * FilterParamsNum);
    7c90:	3362      	adds	r3, #98	; 0x62
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    7c92:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    7c96:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    7c9a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
    7c9e:	eb07 0888 	add.w	r8, r7, r8, lsl #2
    7ca2:	f10a 0b08 	add.w	fp, sl, #8
    7ca6:	f1aa 0a14 	sub.w	sl, sl, #20
    7caa:	f8c8 1014 	str.w	r1, [r8, #20]
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    7cae:	eb07 0183 	add.w	r1, r7, r3, lsl #2
    7cb2:	44bb      	add	fp, r7
    7cb4:	009b      	lsls	r3, r3, #2
    7cb6:	44ba      	add	sl, r7
    7cb8:	6148      	str	r0, [r1, #20]
    7cba:	9302      	str	r3, [sp, #8]
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    7cbc:	ecbb 0a01 	vldmia	fp!, {s0}
    7cc0:	4649      	mov	r1, r9
    7cc2:	f898 0018 	ldrb.w	r0, [r8, #24]
    7cc6:	f8d8 3014 	ldr.w	r3, [r8, #20]
    7cca:	4798      	blx	r3
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    7ccc:	9b02      	ldr	r3, [sp, #8]
    7cce:	ecba 0a01 	vldmia	sl!, {s0}
    7cd2:	4649      	mov	r1, r9
    7cd4:	18fb      	adds	r3, r7, r3
    7cd6:	695a      	ldr	r2, [r3, #20]
    7cd8:	7e18      	ldrb	r0, [r3, #24]
    7cda:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    7cdc:	f1b9 0f00 	cmp.w	r9, #0
    7ce0:	f47f ae89 	bne.w	79f6 <handleSPI+0xed6>
    7ce4:	f04f 0901 	mov.w	r9, #1
    7ce8:	e7e8      	b.n	7cbc <handleSPI+0x119c>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    7cea:	f1a7 0314 	sub.w	r3, r7, #20
    7cee:	f886 a020 	strb.w	sl, [r6, #32]
    7cf2:	2b03      	cmp	r3, #3
    7cf4:	d82d      	bhi.n	7d52 <handleSPI+0x1232>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    7cf6:	4b3f      	ldr	r3, [pc, #252]	; (7df4 <handleSPI+0x12d4>)
    7cf8:	2101      	movs	r1, #1
    7cfa:	443b      	add	r3, r7
    7cfc:	f803 1c14 	strb.w	r1, [r3, #-20]
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    7d00:	e487      	b.n	7612 <handleSPI+0xaf2>
						audioOutBuffer[i] = 0;
    7d02:	2200      	movs	r2, #0
    7d04:	f503 6180 	add.w	r1, r3, #1024	; 0x400
						audioOutBuffer[i + 1] = 0;
    7d08:	e9c3 2200 	strd	r2, r2, [r3]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    7d0c:	3308      	adds	r3, #8
    7d0e:	4299      	cmp	r1, r3
    7d10:	d1fa      	bne.n	7d08 <handleSPI+0x11e8>
    7d12:	f7ff ba25 	b.w	7160 <handleSPI+0x640>
						mappings[whichMapping].hookActive[whichSlot] = 0;
    7d16:	f886 a048 	strb.w	sl, [r6, #72]	; 0x48
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    7d1a:	4656      	mov	r6, sl
							mappings[whichMapping].destNumber = 255;
    7d1c:	f809 7003 	strb.w	r7, [r9, r3]
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    7d20:	f8db 3004 	ldr.w	r3, [fp, #4]
    7d24:	eb03 0786 	add.w	r7, r3, r6, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    7d28:	691b      	ldr	r3, [r3, #16]
    7d2a:	ed97 0a00 	vldr	s0, [r7]
    7d2e:	4798      	blx	r3
    7d30:	ed87 0a02 	vstr	s0, [r7, #8]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    7d34:	f8db 3004 	ldr.w	r3, [fp, #4]
    7d38:	4631      	mov	r1, r6
    7d3a:	eb03 0786 	add.w	r7, r3, r6, lsl #2
    7d3e:	695a      	ldr	r2, [r3, #20]
    7d40:	7e18      	ldrb	r0, [r3, #24]
    7d42:	ed97 0a02 	vldr	s0, [r7, #8]
    7d46:	4790      	blx	r2
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    7d48:	2e00      	cmp	r6, #0
    7d4a:	f47f a881 	bne.w	6e50 <handleSPI+0x330>
    7d4e:	2601      	movs	r6, #1
    7d50:	e7e6      	b.n	7d20 <handleSPI+0x1200>
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    7d52:	2f02      	cmp	r7, #2
    7d54:	f63f ac5d 	bhi.w	7612 <handleSPI+0xaf2>
							oscOn[source - OSC_SOURCE_OFFSET] = 1;
    7d58:	4b27      	ldr	r3, [pc, #156]	; (7df8 <handleSPI+0x12d8>)
    7d5a:	55d8      	strb	r0, [r3, r7]
    7d5c:	e459      	b.n	7612 <handleSPI+0xaf2>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    7d5e:	ee07 7a90 	vmov	s15, r7
    7d62:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    7d66:	ed9f 7a25 	vldr	s14, [pc, #148]	; 7dfc <handleSPI+0x12dc>
    7d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    7d6e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    7d72:	4443      	add	r3, r8
    7d74:	ee67 7a87 	vmul.f32	s15, s15, s14
    7d78:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    7d7c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    7d80:	f7ff b866 	b.w	6e50 <handleSPI+0x330>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    7d84:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
    7d88:	7001      	strb	r1, [r0, #0]
    7d8a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    7d8e:	4e1c      	ldr	r6, [pc, #112]	; (7e00 <handleSPI+0x12e0>)
    7d90:	444a      	add	r2, r9
    7d92:	444b      	add	r3, r9
    7d94:	6296      	str	r6, [r2, #40]	; 0x28
    7d96:	605e      	str	r6, [r3, #4]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    7d98:	f7ff b85a 	b.w	6e50 <handleSPI+0x330>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    7d9c:	f1bc 0f03 	cmp.w	ip, #3
    7da0:	d811      	bhi.n	7dc6 <handleSPI+0x12a6>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    7da2:	4b14      	ldr	r3, [pc, #80]	; (7df4 <handleSPI+0x12d4>)
    7da4:	2201      	movs	r2, #1
    7da6:	443b      	add	r3, r7
    7da8:	f803 2c14 	strb.w	r2, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    7dac:	e5bd      	b.n	792a <handleSPI+0xe0a>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    7dae:	f1bc 0f03 	cmp.w	ip, #3
    7db2:	d90f      	bls.n	7dd4 <handleSPI+0x12b4>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    7db4:	2f02      	cmp	r7, #2
    7db6:	f63f ada1 	bhi.w	78fc <handleSPI+0xddc>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    7dba:	4b0f      	ldr	r3, [pc, #60]	; (7df8 <handleSPI+0x12d8>)
    7dbc:	f04f 0b01 	mov.w	fp, #1
    7dc0:	f803 b007 	strb.w	fp, [r3, r7]
    7dc4:	e59a      	b.n	78fc <handleSPI+0xddc>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    7dc6:	2f02      	cmp	r7, #2
    7dc8:	f63f adaf 	bhi.w	792a <handleSPI+0xe0a>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    7dcc:	4b0a      	ldr	r3, [pc, #40]	; (7df8 <handleSPI+0x12d8>)
    7dce:	2201      	movs	r2, #1
    7dd0:	55da      	strb	r2, [r3, r7]
    7dd2:	e5aa      	b.n	792a <handleSPI+0xe0a>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    7dd4:	4b07      	ldr	r3, [pc, #28]	; (7df4 <handleSPI+0x12d4>)
    7dd6:	f04f 0b01 	mov.w	fp, #1
    7dda:	443b      	add	r3, r7
    7ddc:	f803 bc14 	strb.w	fp, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    7de0:	e58c      	b.n	78fc <handleSPI+0xddc>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    7de2:	f1a7 0314 	sub.w	r3, r7, #20
    7de6:	2b03      	cmp	r3, #3
    7de8:	d985      	bls.n	7cf6 <handleSPI+0x11d6>
    7dea:	e412      	b.n	7612 <handleSPI+0xaf2>
    7dec:	2aaaaaab 	.word	0x2aaaaaab
    7df0:	20016bb0 	.word	0x20016bb0
    7df4:	200050d8 	.word	0x200050d8
    7df8:	20005604 	.word	0x20005604
    7dfc:	37fffffc 	.word	0x37fffffc
    7e00:	20000744 	.word	0x20000744
    7e04:	f3af 8000 	nop.w
    7e08:	f3af 8000 	nop.w
    7e0c:	f3af 8000 	nop.w
    7e10:	f3af 8000 	nop.w
    7e14:	f3af 8000 	nop.w
    7e18:	f3af 8000 	nop.w
    7e1c:	f3af 8000 	nop.w

00007e20 <HAL_I2C_SlaveRxCpltCallback>:
	presetWaitingToParse = 4096;
    7e20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    7e24:	4b02      	ldr	r3, [pc, #8]	; (7e30 <HAL_I2C_SlaveRxCpltCallback+0x10>)
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    7e26:	4903      	ldr	r1, [pc, #12]	; (7e34 <HAL_I2C_SlaveRxCpltCallback+0x14>)
    7e28:	4803      	ldr	r0, [pc, #12]	; (7e38 <HAL_I2C_SlaveRxCpltCallback+0x18>)
	presetWaitingToParse = 4096;
    7e2a:	601a      	str	r2, [r3, #0]
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    7e2c:	f002 ba44 	b.w	a2b8 <__HAL_I2C_Slave_Receive_IT_veneer>
    7e30:	2001aa98 	.word	0x2001aa98
    7e34:	30032380 	.word	0x30032380
    7e38:	20014a5c 	.word	0x20014a5c
    7e3c:	f3af 8000 	nop.w

00007e40 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    7e40:	4b01      	ldr	r3, [pc, #4]	; (7e48 <HAL_I2C_MasterTxCpltCallback+0x8>)
    7e42:	2200      	movs	r2, #0
    7e44:	701a      	strb	r2, [r3, #0]
}
    7e46:	4770      	bx	lr
    7e48:	20016cda 	.word	0x20016cda
    7e4c:	f3af 8000 	nop.w
    7e50:	f3af 8000 	nop.w
    7e54:	f3af 8000 	nop.w
    7e58:	f3af 8000 	nop.w
    7e5c:	f3af 8000 	nop.w

00007e60 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    7e60:	2100      	movs	r1, #0
	I2CErrors++;
    7e62:	4a05      	ldr	r2, [pc, #20]	; (7e78 <HAL_I2C_ErrorCallback+0x18>)
	i2cSending = 0;
    7e64:	4b05      	ldr	r3, [pc, #20]	; (7e7c <HAL_I2C_ErrorCallback+0x1c>)
	receivingI2C = 0;
    7e66:	4806      	ldr	r0, [pc, #24]	; (7e80 <HAL_I2C_ErrorCallback+0x20>)
	i2cSending = 0;
    7e68:	7019      	strb	r1, [r3, #0]
	I2CErrors++;
    7e6a:	7813      	ldrb	r3, [r2, #0]
	receivingI2C = 0;
    7e6c:	7001      	strb	r1, [r0, #0]
	I2CErrors++;
    7e6e:	3301      	adds	r3, #1
    7e70:	b2db      	uxtb	r3, r3
    7e72:	7013      	strb	r3, [r2, #0]
}
    7e74:	4770      	bx	lr
    7e76:	bf00      	nop
    7e78:	20014b04 	.word	0x20014b04
    7e7c:	20016cda 	.word	0x20016cda
    7e80:	2001aeac 	.word	0x2001aeac
    7e84:	f3af 8000 	nop.w
    7e88:	f3af 8000 	nop.w
    7e8c:	f3af 8000 	nop.w
    7e90:	f3af 8000 	nop.w
    7e94:	f3af 8000 	nop.w
    7e98:	f3af 8000 	nop.w
    7e9c:	f3af 8000 	nop.w

00007ea0 <HAL_SPI_TxRxCpltCallback>:
{
    7ea0:	b538      	push	{r3, r4, r5, lr}
	if (hspi == &hspi6)
    7ea2:	4b98      	ldr	r3, [pc, #608]	; (8104 <_Min_Stack_Size+0x104>)
	interrupted = 1;
    7ea4:	2201      	movs	r2, #1
    7ea6:	4998      	ldr	r1, [pc, #608]	; (8108 <_Min_Stack_Size+0x108>)
	if (hspi == &hspi6)
    7ea8:	4283      	cmp	r3, r0
	interrupted = 1;
    7eaa:	700a      	strb	r2, [r1, #0]
	if (hspi == &hspi6)
    7eac:	d038      	beq.n	7f20 <HAL_SPI_TxRxCpltCallback+0x80>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    7eae:	4c97      	ldr	r4, [pc, #604]	; (810c <_Min_Stack_Size+0x10c>)
  __ASM volatile ("dsb 0xF":::"memory");
    7eb0:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    7eb4:	4b96      	ldr	r3, [pc, #600]	; (8110 <_Min_Stack_Size+0x110>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    7eb6:	f104 0120 	add.w	r1, r4, #32
    7eba:	f104 0540 	add.w	r5, r4, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    7ebe:	f8c3 425c 	str.w	r4, [r3, #604]	; 0x25c
    7ec2:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
    7ec6:	f8c3 525c 	str.w	r5, [r3, #604]	; 0x25c
    7eca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ece:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    7ed2:	2110      	movs	r1, #16
    7ed4:	488f      	ldr	r0, [pc, #572]	; (8114 <_Min_Stack_Size+0x114>)
    7ed6:	f002 fa9f 	bl	a418 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_LEVERS_RX[62] == 254) && (SPI_LEVERS_RX[63] == 253))
    7eda:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    7ede:	2bfe      	cmp	r3, #254	; 0xfe
    7ee0:	d016      	beq.n	7f10 <HAL_SPI_TxRxCpltCallback+0x70>
  __ASM volatile ("dsb 0xF":::"memory");
    7ee2:	f3bf 8f4f 	dsb	sy
        op_addr += __SCB_DCACHE_LINE_SIZE;
    7ee6:	4a8c      	ldr	r2, [pc, #560]	; (8118 <_Min_Stack_Size+0x118>)
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    7ee8:	4b89      	ldr	r3, [pc, #548]	; (8110 <_Min_Stack_Size+0x110>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    7eea:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    7eee:	f8c3 5268 	str.w	r5, [r3, #616]	; 0x268
    7ef2:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    7ef6:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
    7efa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7efe:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    7f02:	2200      	movs	r2, #0
    7f04:	2110      	movs	r1, #16
    7f06:	4883      	ldr	r0, [pc, #524]	; (8114 <_Min_Stack_Size+0x114>)
}
    7f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    7f0c:	f002 ba84 	b.w	a418 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_LEVERS_RX[62] == 254) && (SPI_LEVERS_RX[63] == 253))
    7f10:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    7f14:	2bfd      	cmp	r3, #253	; 0xfd
    7f16:	d1e4      	bne.n	7ee2 <HAL_SPI_TxRxCpltCallback+0x42>
			handleSPI(LEVER_BUFFER_SIZE);
    7f18:	2020      	movs	r0, #32
    7f1a:	f7fe fe01 	bl	6b20 <handleSPI>
    7f1e:	e7e0      	b.n	7ee2 <HAL_SPI_TxRxCpltCallback+0x42>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    7f20:	2102      	movs	r1, #2
    7f22:	487c      	ldr	r0, [pc, #496]	; (8114 <_Min_Stack_Size+0x114>)
    7f24:	f002 fa78 	bl	a418 <__HAL_GPIO_WritePin_veneer>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    7f28:	4b7c      	ldr	r3, [pc, #496]	; (811c <_Min_Stack_Size+0x11c>)
    7f2a:	f103 0440 	add.w	r4, r3, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    7f2e:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    7f32:	4a77      	ldr	r2, [pc, #476]	; (8110 <_Min_Stack_Size+0x110>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    7f34:	f103 0060 	add.w	r0, r3, #96	; 0x60
    7f38:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    7f3c:	f8c2 425c 	str.w	r4, [r2, #604]	; 0x25c
    7f40:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
    7f44:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    7f48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7f4c:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    7f50:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    7f54:	2afe      	cmp	r2, #254	; 0xfe
    7f56:	d000      	beq.n	7f5a <HAL_SPI_TxRxCpltCallback+0xba>
}
    7f58:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    7f5a:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
    7f5e:	2afd      	cmp	r2, #253	; 0xfd
    7f60:	d1fa      	bne.n	7f58 <HAL_SPI_TxRxCpltCallback+0xb8>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    7f62:	4a6f      	ldr	r2, [pc, #444]	; (8120 <_Min_Stack_Size+0x120>)
    7f64:	7811      	ldrb	r1, [r2, #0]
    7f66:	2900      	cmp	r1, #0
    7f68:	f000 80c8 	beq.w	80fc <_Min_Stack_Size+0xfc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    7f6c:	4a6d      	ldr	r2, [pc, #436]	; (8124 <_Min_Stack_Size+0x124>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    7f6e:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    7f70:	6814      	ldr	r4, [r2, #0]
    7f72:	6810      	ldr	r0, [r2, #0]
    7f74:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    7f78:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    7f7c:	f894 5061 	ldrb.w	r5, [r4, #97]	; 0x61
    7f80:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    7f84:	4868      	ldr	r0, [pc, #416]	; (8128 <_Min_Stack_Size+0x128>)
    7f86:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    7f8a:	b2a4      	uxth	r4, r4
    7f8c:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    7f8e:	f000 80b5 	beq.w	80fc <_Min_Stack_Size+0xfc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    7f92:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    7f94:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    7f96:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    7f9a:	f894 5063 	ldrb.w	r5, [r4, #99]	; 0x63
    7f9e:	6814      	ldr	r4, [r2, #0]
    7fa0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    7fa4:	f894 4064 	ldrb.w	r4, [r4, #100]	; 0x64
    7fa8:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    7fac:	b2a4      	uxth	r4, r4
    7fae:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    7fb0:	f000 80a4 	beq.w	80fc <_Min_Stack_Size+0xfc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    7fb4:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    7fb6:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    7fb8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    7fbc:	f894 5065 	ldrb.w	r5, [r4, #101]	; 0x65
    7fc0:	6814      	ldr	r4, [r2, #0]
    7fc2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    7fc6:	f894 4066 	ldrb.w	r4, [r4, #102]	; 0x66
    7fca:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    7fce:	b2a4      	uxth	r4, r4
    7fd0:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    7fd2:	f000 8093 	beq.w	80fc <_Min_Stack_Size+0xfc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    7fd6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    7fd8:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    7fda:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    7fde:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    7fe2:	6814      	ldr	r4, [r2, #0]
    7fe4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    7fe8:	f894 4068 	ldrb.w	r4, [r4, #104]	; 0x68
    7fec:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    7ff0:	b2a4      	uxth	r4, r4
    7ff2:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    7ff4:	f000 8082 	beq.w	80fc <_Min_Stack_Size+0xfc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    7ff8:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    7ffa:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    7ffc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8000:	f894 5069 	ldrb.w	r5, [r4, #105]	; 0x69
    8004:	6814      	ldr	r4, [r2, #0]
    8006:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    800a:	f894 406a 	ldrb.w	r4, [r4, #106]	; 0x6a
    800e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8012:	b2a4      	uxth	r4, r4
    8014:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8016:	d071      	beq.n	80fc <_Min_Stack_Size+0xfc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8018:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    801a:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    801c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8020:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
    8024:	6814      	ldr	r4, [r2, #0]
    8026:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    802a:	f894 406c 	ldrb.w	r4, [r4, #108]	; 0x6c
    802e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8032:	b2a4      	uxth	r4, r4
    8034:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8036:	d061      	beq.n	80fc <_Min_Stack_Size+0xfc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8038:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    803a:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    803c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8040:	f894 506d 	ldrb.w	r5, [r4, #109]	; 0x6d
    8044:	6814      	ldr	r4, [r2, #0]
    8046:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    804a:	f894 406e 	ldrb.w	r4, [r4, #110]	; 0x6e
    804e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8052:	b2a4      	uxth	r4, r4
    8054:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8056:	d051      	beq.n	80fc <_Min_Stack_Size+0xfc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8058:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    805a:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    805c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8060:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
    8064:	6814      	ldr	r4, [r2, #0]
    8066:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    806a:	f894 4070 	ldrb.w	r4, [r4, #112]	; 0x70
    806e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8072:	b2a4      	uxth	r4, r4
    8074:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8076:	d041      	beq.n	80fc <_Min_Stack_Size+0xfc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8078:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    807a:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    807c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    8080:	f894 5071 	ldrb.w	r5, [r4, #113]	; 0x71
    8084:	6814      	ldr	r4, [r2, #0]
    8086:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    808a:	f894 4072 	ldrb.w	r4, [r4, #114]	; 0x72
    808e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    8092:	b2a4      	uxth	r4, r4
    8094:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8096:	d031      	beq.n	80fc <_Min_Stack_Size+0xfc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    8098:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    809a:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    809c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    80a0:	f894 5073 	ldrb.w	r5, [r4, #115]	; 0x73
    80a4:	6814      	ldr	r4, [r2, #0]
    80a6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    80aa:	f894 4074 	ldrb.w	r4, [r4, #116]	; 0x74
    80ae:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    80b2:	b2a4      	uxth	r4, r4
    80b4:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    80b6:	d021      	beq.n	80fc <_Min_Stack_Size+0xfc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    80b8:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    80ba:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    80bc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    80c0:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
    80c4:	6814      	ldr	r4, [r2, #0]
    80c6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    80ca:	f894 4076 	ldrb.w	r4, [r4, #118]	; 0x76
    80ce:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    80d2:	b2a4      	uxth	r4, r4
    80d4:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    80d6:	d011      	beq.n	80fc <_Min_Stack_Size+0xfc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    80d8:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    80da:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    80dc:	6815      	ldr	r5, [r2, #0]
    80de:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    80e2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    80e6:	f894 4077 	ldrb.w	r4, [r4, #119]	; 0x77
    80ea:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    80ee:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    80f2:	b29b      	uxth	r3, r3
    80f4:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    80f6:	d001      	beq.n	80fc <_Min_Stack_Size+0xfc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    80f8:	6813      	ldr	r3, [r2, #0]
    80fa:	6813      	ldr	r3, [r2, #0]
			newPluck = 1;
    80fc:	4b0b      	ldr	r3, [pc, #44]	; (812c <_Min_Stack_Size+0x12c>)
    80fe:	2201      	movs	r2, #1
    8100:	601a      	str	r2, [r3, #0]
}
    8102:	bd38      	pop	{r3, r4, r5, pc}
    8104:	2001d488 	.word	0x2001d488
    8108:	2000525c 	.word	0x2000525c
    810c:	30000800 	.word	0x30000800
    8110:	e000ed00 	.word	0xe000ed00
    8114:	58020800 	.word	0x58020800
    8118:	30000860 	.word	0x30000860
    811c:	38000000 	.word	0x38000000
    8120:	20000015 	.word	0x20000015
    8124:	2000513c 	.word	0x2000513c
    8128:	20014838 	.word	0x20014838
    812c:	20005594 	.word	0x20005594
    8130:	f3af 8000 	nop.w
    8134:	f3af 8000 	nop.w
    8138:	f3af 8000 	nop.w
    813c:	f3af 8000 	nop.w

00008140 <HAL_SPI_TxRxHalfCpltCallback>:
{
    8140:	b538      	push	{r3, r4, r5, lr}
	if (hspi == &hspi6)
    8142:	4b97      	ldr	r3, [pc, #604]	; (83a0 <HAL_SPI_TxRxHalfCpltCallback+0x260>)
	interrupted = 1;
    8144:	2201      	movs	r2, #1
    8146:	4997      	ldr	r1, [pc, #604]	; (83a4 <HAL_SPI_TxRxHalfCpltCallback+0x264>)
	if (hspi == &hspi6)
    8148:	4283      	cmp	r3, r0
	interrupted = 1;
    814a:	700a      	strb	r2, [r1, #0]
	if (hspi == &hspi6)
    814c:	d036      	beq.n	81bc <HAL_SPI_TxRxHalfCpltCallback+0x7c>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    814e:	4c96      	ldr	r4, [pc, #600]	; (83a8 <HAL_SPI_TxRxHalfCpltCallback+0x268>)
  __ASM volatile ("dsb 0xF":::"memory");
    8150:	f3bf 8f4f 	dsb	sy
    8154:	4b95      	ldr	r3, [pc, #596]	; (83ac <HAL_SPI_TxRxHalfCpltCallback+0x26c>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    8156:	f104 0120 	add.w	r1, r4, #32
    815a:	f104 0540 	add.w	r5, r4, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    815e:	f8c3 425c 	str.w	r4, [r3, #604]	; 0x25c
    8162:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
    8166:	f8c3 525c 	str.w	r5, [r3, #604]	; 0x25c
    816a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    816e:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
    8172:	2110      	movs	r1, #16
    8174:	488e      	ldr	r0, [pc, #568]	; (83b0 <HAL_SPI_TxRxHalfCpltCallback+0x270>)
    8176:	f002 f94f 	bl	a418 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_LEVERS_RX[30] == 254) && (SPI_LEVERS_RX[31] == 253))
    817a:	7fa3      	ldrb	r3, [r4, #30]
    817c:	2bfe      	cmp	r3, #254	; 0xfe
    817e:	d016      	beq.n	81ae <HAL_SPI_TxRxHalfCpltCallback+0x6e>
  __ASM volatile ("dsb 0xF":::"memory");
    8180:	f3bf 8f4f 	dsb	sy
        op_addr += __SCB_DCACHE_LINE_SIZE;
    8184:	4a8b      	ldr	r2, [pc, #556]	; (83b4 <HAL_SPI_TxRxHalfCpltCallback+0x274>)
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    8186:	4b89      	ldr	r3, [pc, #548]	; (83ac <HAL_SPI_TxRxHalfCpltCallback+0x26c>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    8188:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    818c:	f8c3 5268 	str.w	r5, [r3, #616]	; 0x268
    8190:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    8194:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
    8198:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    819c:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    81a0:	2200      	movs	r2, #0
    81a2:	2110      	movs	r1, #16
    81a4:	4882      	ldr	r0, [pc, #520]	; (83b0 <HAL_SPI_TxRxHalfCpltCallback+0x270>)
}
    81a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
    81aa:	f002 b935 	b.w	a418 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_LEVERS_RX[30] == 254) && (SPI_LEVERS_RX[31] == 253))
    81ae:	7fe3      	ldrb	r3, [r4, #31]
    81b0:	2bfd      	cmp	r3, #253	; 0xfd
    81b2:	d1e5      	bne.n	8180 <HAL_SPI_TxRxHalfCpltCallback+0x40>
			handleSPI(0);
    81b4:	2000      	movs	r0, #0
    81b6:	f7fe fcb3 	bl	6b20 <handleSPI>
    81ba:	e7e1      	b.n	8180 <HAL_SPI_TxRxHalfCpltCallback+0x40>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    81bc:	4c7e      	ldr	r4, [pc, #504]	; (83b8 <HAL_SPI_TxRxHalfCpltCallback+0x278>)
    81be:	f104 0040 	add.w	r0, r4, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    81c2:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    81c6:	4b79      	ldr	r3, [pc, #484]	; (83ac <HAL_SPI_TxRxHalfCpltCallback+0x26c>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    81c8:	f104 0160 	add.w	r1, r4, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    81cc:	f8c3 025c 	str.w	r0, [r3, #604]	; 0x25c
    81d0:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    81d4:	f104 0180 	add.w	r1, r4, #128	; 0x80
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    81d8:	f8c3 125c 	str.w	r1, [r3, #604]	; 0x25c
    81dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    81e0:	f3bf 8f6f 	isb	sy
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    81e4:	2102      	movs	r1, #2
    81e6:	4872      	ldr	r0, [pc, #456]	; (83b0 <HAL_SPI_TxRxHalfCpltCallback+0x270>)
    81e8:	f002 f916 	bl	a418 <__HAL_GPIO_WritePin_veneer>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    81ec:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    81f0:	2bfe      	cmp	r3, #254	; 0xfe
    81f2:	d000      	beq.n	81f6 <HAL_SPI_TxRxHalfCpltCallback+0xb6>
}
    81f4:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    81f6:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
    81fa:	2bfd      	cmp	r3, #253	; 0xfd
    81fc:	d1fa      	bne.n	81f4 <HAL_SPI_TxRxHalfCpltCallback+0xb4>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    81fe:	4b6f      	ldr	r3, [pc, #444]	; (83bc <HAL_SPI_TxRxHalfCpltCallback+0x27c>)
    8200:	781a      	ldrb	r2, [r3, #0]
    8202:	2a00      	cmp	r2, #0
    8204:	f000 80c8 	beq.w	8398 <HAL_SPI_TxRxHalfCpltCallback+0x258>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8208:	4b6d      	ldr	r3, [pc, #436]	; (83c0 <HAL_SPI_TxRxHalfCpltCallback+0x280>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    820a:	2a01      	cmp	r2, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    820c:	6818      	ldr	r0, [r3, #0]
    820e:	6819      	ldr	r1, [r3, #0]
    8210:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8214:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    8218:	f890 5041 	ldrb.w	r5, [r0, #65]	; 0x41
    821c:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8220:	4968      	ldr	r1, [pc, #416]	; (83c4 <HAL_SPI_TxRxHalfCpltCallback+0x284>)
    8222:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    8226:	b280      	uxth	r0, r0
    8228:	8008      	strh	r0, [r1, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    822a:	f000 80b5 	beq.w	8398 <HAL_SPI_TxRxHalfCpltCallback+0x258>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    822e:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8230:	2a02      	cmp	r2, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8232:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8236:	f890 5043 	ldrb.w	r5, [r0, #67]	; 0x43
    823a:	6818      	ldr	r0, [r3, #0]
    823c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8240:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    8244:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    8248:	b280      	uxth	r0, r0
    824a:	8048      	strh	r0, [r1, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    824c:	f000 80a4 	beq.w	8398 <HAL_SPI_TxRxHalfCpltCallback+0x258>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8250:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8252:	2a03      	cmp	r2, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8254:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8258:	f890 5045 	ldrb.w	r5, [r0, #69]	; 0x45
    825c:	6818      	ldr	r0, [r3, #0]
    825e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8262:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    8266:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    826a:	b280      	uxth	r0, r0
    826c:	8088      	strh	r0, [r1, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    826e:	f000 8093 	beq.w	8398 <HAL_SPI_TxRxHalfCpltCallback+0x258>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8272:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8274:	2a04      	cmp	r2, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8276:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    827a:	f890 5047 	ldrb.w	r5, [r0, #71]	; 0x47
    827e:	6818      	ldr	r0, [r3, #0]
    8280:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8284:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    8288:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    828c:	b280      	uxth	r0, r0
    828e:	80c8      	strh	r0, [r1, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8290:	f000 8082 	beq.w	8398 <HAL_SPI_TxRxHalfCpltCallback+0x258>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8294:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8296:	2a05      	cmp	r2, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8298:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    829c:	f890 5049 	ldrb.w	r5, [r0, #73]	; 0x49
    82a0:	6818      	ldr	r0, [r3, #0]
    82a2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    82a6:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    82aa:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    82ae:	b280      	uxth	r0, r0
    82b0:	8108      	strh	r0, [r1, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    82b2:	d071      	beq.n	8398 <HAL_SPI_TxRxHalfCpltCallback+0x258>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    82b4:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    82b6:	2a06      	cmp	r2, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    82b8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    82bc:	f890 504b 	ldrb.w	r5, [r0, #75]	; 0x4b
    82c0:	6818      	ldr	r0, [r3, #0]
    82c2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    82c6:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
    82ca:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    82ce:	b280      	uxth	r0, r0
    82d0:	8148      	strh	r0, [r1, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    82d2:	d061      	beq.n	8398 <HAL_SPI_TxRxHalfCpltCallback+0x258>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    82d4:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    82d6:	2a07      	cmp	r2, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    82d8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    82dc:	f890 504d 	ldrb.w	r5, [r0, #77]	; 0x4d
    82e0:	6818      	ldr	r0, [r3, #0]
    82e2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    82e6:	f890 004e 	ldrb.w	r0, [r0, #78]	; 0x4e
    82ea:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    82ee:	b280      	uxth	r0, r0
    82f0:	8188      	strh	r0, [r1, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    82f2:	d051      	beq.n	8398 <HAL_SPI_TxRxHalfCpltCallback+0x258>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    82f4:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    82f6:	2a08      	cmp	r2, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    82f8:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    82fc:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
    8300:	6818      	ldr	r0, [r3, #0]
    8302:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8306:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    830a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    830e:	b280      	uxth	r0, r0
    8310:	81c8      	strh	r0, [r1, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8312:	d041      	beq.n	8398 <HAL_SPI_TxRxHalfCpltCallback+0x258>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8314:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8316:	2a09      	cmp	r2, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8318:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    831c:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
    8320:	6818      	ldr	r0, [r3, #0]
    8322:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8326:	f890 0052 	ldrb.w	r0, [r0, #82]	; 0x52
    832a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    832e:	b280      	uxth	r0, r0
    8330:	8208      	strh	r0, [r1, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8332:	d031      	beq.n	8398 <HAL_SPI_TxRxHalfCpltCallback+0x258>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8334:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8336:	2a0a      	cmp	r2, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8338:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    833c:	f890 5053 	ldrb.w	r5, [r0, #83]	; 0x53
    8340:	6818      	ldr	r0, [r3, #0]
    8342:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8346:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
    834a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    834e:	b280      	uxth	r0, r0
    8350:	8248      	strh	r0, [r1, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8352:	d021      	beq.n	8398 <HAL_SPI_TxRxHalfCpltCallback+0x258>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8354:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8356:	2a0b      	cmp	r2, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8358:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    835c:	f890 5055 	ldrb.w	r5, [r0, #85]	; 0x55
    8360:	6818      	ldr	r0, [r3, #0]
    8362:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    8366:	f890 0056 	ldrb.w	r0, [r0, #86]	; 0x56
    836a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    836e:	b280      	uxth	r0, r0
    8370:	8288      	strh	r0, [r1, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8372:	d011      	beq.n	8398 <HAL_SPI_TxRxHalfCpltCallback+0x258>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8374:	6818      	ldr	r0, [r3, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8376:	2a0c      	cmp	r2, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8378:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    837c:	f890 5057 	ldrb.w	r5, [r0, #87]	; 0x57
    8380:	6818      	ldr	r0, [r3, #0]
    8382:	eb04 0440 	add.w	r4, r4, r0, lsl #1
    8386:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
    838a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    838e:	b280      	uxth	r0, r0
    8390:	82c8      	strh	r0, [r1, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    8392:	d001      	beq.n	8398 <HAL_SPI_TxRxHalfCpltCallback+0x258>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    8394:	681a      	ldr	r2, [r3, #0]
    8396:	681b      	ldr	r3, [r3, #0]
			newPluck = 1;
    8398:	4b0b      	ldr	r3, [pc, #44]	; (83c8 <HAL_SPI_TxRxHalfCpltCallback+0x288>)
    839a:	2201      	movs	r2, #1
    839c:	601a      	str	r2, [r3, #0]
}
    839e:	bd38      	pop	{r3, r4, r5, pc}
    83a0:	2001d488 	.word	0x2001d488
    83a4:	2000525c 	.word	0x2000525c
    83a8:	30000800 	.word	0x30000800
    83ac:	e000ed00 	.word	0xe000ed00
    83b0:	58020800 	.word	0x58020800
    83b4:	30000860 	.word	0x30000860
    83b8:	38000000 	.word	0x38000000
    83bc:	20000015 	.word	0x20000015
    83c0:	2000513c 	.word	0x2000513c
    83c4:	20014838 	.word	0x20014838
    83c8:	20005594 	.word	0x20005594
	...

000083e0 <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
    83e0:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
    83e2:	edd3 6a04 	vldr	s13, [r3, #16]
    83e6:	ed93 0a03 	vldr	s0, [r3, #12]
    83ea:	ed93 7a02 	vldr	s14, [r3, #8]
    83ee:	ee20 0a26 	vmul.f32	s0, s0, s13
    83f2:	edd3 7a05 	vldr	s15, [r3, #20]
    83f6:	eea7 0a27 	vfma.f32	s0, s14, s15
    83fa:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
    83fe:	4770      	bx	lr

00008400 <tExpSmooth_setDest>:
    _tExpSmooth* smooth = *expsmooth;
    8400:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
    8402:	ed83 0a05 	vstr	s0, [r3, #20]
}
    8406:	4770      	bx	lr
    8408:	f3af 8000 	nop.w
    840c:	f3af 8000 	nop.w
    8410:	f3af 8000 	nop.w
    8414:	f3af 8000 	nop.w
    8418:	f3af 8000 	nop.w
    841c:	f3af 8000 	nop.w

00008420 <tADSRT_setAttack>:
    if (attack < 0.0f)
    8420:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
    8424:	6803      	ldr	r3, [r0, #0]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    8426:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
    842a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
    842e:	bf48      	it	mi
    8430:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8444 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    8434:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
    8438:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    843c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
    8440:	4770      	bx	lr
    8442:	bf00      	nop
    8444:	3c23d70a 	.word	0x3c23d70a
    8448:	f3af 8000 	nop.w
    844c:	f3af 8000 	nop.w
    8450:	f3af 8000 	nop.w
    8454:	f3af 8000 	nop.w
    8458:	f3af 8000 	nop.w
    845c:	f3af 8000 	nop.w

00008460 <tADSRT_setDecay>:
    if (decay < 0.0f)
    8460:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
    8464:	6803      	ldr	r3, [r0, #0]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    8466:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
    846a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
    846e:	bf48      	it	mi
    8470:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8484 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    8474:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
    8478:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    847c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
    8480:	4770      	bx	lr
    8482:	bf00      	nop
    8484:	3c23d70a 	.word	0x3c23d70a
    8488:	f3af 8000 	nop.w
    848c:	f3af 8000 	nop.w
    8490:	f3af 8000 	nop.w
    8494:	f3af 8000 	nop.w
    8498:	f3af 8000 	nop.w
    849c:	f3af 8000 	nop.w

000084a0 <tADSRT_setSustain>:
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
    84a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    84a4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 84b8 <tADSRT_setSustain+0x18>
    _tADSRT* adsr = *adsrenv;
    84a8:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
    84aa:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    84ae:	fe80 0a67 	vminnm.f32	s0, s0, s15
    84b2:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
}
    84b6:	4770      	bx	lr
    84b8:	00000000 	.word	0x00000000
    84bc:	f3af 8000 	nop.w

000084c0 <tADSRT_setRelease>:
    if (release < 0.0f)
    84c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
    84c4:	6803      	ldr	r3, [r0, #0]
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    84c6:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
    84ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
    84ce:	bf48      	it	mi
    84d0:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 84e4 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    84d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
    84d8:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    84dc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
    84e0:	4770      	bx	lr
    84e2:	bf00      	nop
    84e4:	3c23d70a 	.word	0x3c23d70a
    84e8:	f3af 8000 	nop.w
    84ec:	f3af 8000 	nop.w
    84f0:	f3af 8000 	nop.w
    84f4:	f3af 8000 	nop.w
    84f8:	f3af 8000 	nop.w
    84fc:	f3af 8000 	nop.w

00008500 <tADSRT_setLeakFactor>:
{
    8500:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
    8502:	6804      	ldr	r4, [r0, #0]
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
    8504:	eddf 7a06 	vldr	s15, [pc, #24]	; 8520 <tADSRT_setLeakFactor+0x20>
    8508:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
    adsr->baseLeakFactor = leakFactor;
    850c:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
    8510:	ee60 0aa7 	vmul.f32	s1, s1, s15
    8514:	f001 ff7c 	bl	a410 <__powf_veneer>
    8518:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
    851c:	bd10      	pop	{r4, pc}
    851e:	bf00      	nop
    8520:	472c4400 	.word	0x472c4400
    8524:	f3af 8000 	nop.w
    8528:	f3af 8000 	nop.w
    852c:	f3af 8000 	nop.w
    8530:	f3af 8000 	nop.w
    8534:	f3af 8000 	nop.w
    8538:	f3af 8000 	nop.w
    853c:	f3af 8000 	nop.w

00008540 <tADSRT_on>:
    _tADSRT* adsr = *adsrenv;
    8540:	6803      	ldr	r3, [r0, #0]
    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
    8542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    8544:	b162      	cbz	r2, 8560 <tADSRT_on+0x20>
        adsr->rampPhase = 0;
    8546:	2000      	movs	r0, #0
        adsr->rampPeak = adsr->next;
    8548:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
    854a:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
    854c:	65d8      	str	r0, [r3, #92]	; 0x5c
        adsr->rampPeak = adsr->next;
    854e:	649a      	str	r2, [r3, #72]	; 0x48
    adsr->attackPhase = 0;
    8550:	2200      	movs	r2, #0
    8552:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->gain = velocity;
    8554:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    adsr->attackPhase = 0;
    8558:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
    855a:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
    855c:	659a      	str	r2, [r3, #88]	; 0x58
}
    855e:	4770      	bx	lr
        adsr->whichStage = env_attack;
    8560:	2101      	movs	r1, #1
    8562:	e7f5      	b.n	8550 <tADSRT_on+0x10>
    8564:	f3af 8000 	nop.w
    8568:	f3af 8000 	nop.w
    856c:	f3af 8000 	nop.w
    8570:	f3af 8000 	nop.w
    8574:	f3af 8000 	nop.w
    8578:	f3af 8000 	nop.w
    857c:	f3af 8000 	nop.w

00008580 <tADSRT_off>:
    _tADSRT* adsr = *adsrenv;
    8580:	6803      	ldr	r3, [r0, #0]
    if (adsr->whichStage == env_idle)
    8582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    8584:	b11a      	cbz	r2, 858e <tADSRT_off+0xe>
        adsr->whichStage = env_release;
    8586:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
    8588:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
    858a:	63d9      	str	r1, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
    858c:	64da      	str	r2, [r3, #76]	; 0x4c
}
    858e:	4770      	bx	lr
    8590:	f3af 8000 	nop.w
    8594:	f3af 8000 	nop.w
    8598:	f3af 8000 	nop.w
    859c:	f3af 8000 	nop.w

000085a0 <tADSRT_clear>:
    _tADSRT* adsr = *adsrenv;
    85a0:	6803      	ldr	r3, [r0, #0]
    adsr->whichStage = env_idle;
    85a2:	2100      	movs	r1, #0
    adsr->next = 0.0f;
    85a4:	2200      	movs	r2, #0
    adsr->whichStage = env_idle;
    85a6:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->next = 0.0f;
    85a8:	619a      	str	r2, [r3, #24]
}
    85aa:	4770      	bx	lr
    85ac:	f3af 8000 	nop.w
    85b0:	f3af 8000 	nop.w
    85b4:	f3af 8000 	nop.w
    85b8:	f3af 8000 	nop.w
    85bc:	f3af 8000 	nop.w

000085c0 <tADSRT_tick>:
{
    85c0:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
    85c2:	6804      	ldr	r4, [r0, #0]
{
    85c4:	ed2d 8b02 	vpush	{d8}
    switch (adsr->whichStage)
    85c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    85ca:	3b01      	subs	r3, #1
    85cc:	2b04      	cmp	r3, #4
    85ce:	f200 8154 	bhi.w	887a <tADSRT_tick+0x2ba>
    85d2:	e8df f003 	tbb	[pc, r3]
    85d6:	4d1f      	.short	0x4d1f
    85d8:	6f3a      	.short	0x6f3a
    85da:	03          	.byte	0x03
    85db:	00          	.byte	0x00
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
    85dc:	edd4 7a03 	vldr	s15, [r4, #12]
    85e0:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
    85e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    85e8:	eeb4 1ae7 	vcmpe.f32	s2, s15
    85ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    85f0:	dd7d      	ble.n	86ee <tADSRT_tick+0x12e>
                adsr->next = 0.0f;
    85f2:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8880 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_attack;
    85f6:	2301      	movs	r3, #1
    85f8:	eeb0 0a67 	vmov.f32	s0, s15
    85fc:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
    85fe:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->rampPhase += adsr->rampInc;
    8602:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
    8606:	ee77 7a81 	vadd.f32	s15, s15, s2
    860a:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
}
    860e:	ecbd 8b02 	vpop	{d8}
    8612:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
    8614:	edd4 7a03 	vldr	s15, [r4, #12]
    8618:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
    861c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    8620:	eeb4 1ae7 	vcmpe.f32	s2, s15
    8624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8628:	f340 808b 	ble.w	8742 <tADSRT_tick+0x182>
                adsr->whichStage = env_decay;
    862c:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
    862e:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->whichStage = env_decay;
    8632:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain;
    8634:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
    8638:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    863c:	ee77 7a81 	vadd.f32	s15, s15, s2
    8640:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
}
    8644:	ecbd 8b02 	vpop	{d8}
    8648:	bd10      	pop	{r4, pc}
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
    864a:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
    864e:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
    8652:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
    8656:	ee20 0a26 	vmul.f32	s0, s0, s13
    865a:	edd4 7a07 	vldr	s15, [r4, #28]
    865e:	ee20 0a07 	vmul.f32	s0, s0, s14
    8662:	ee20 0a27 	vmul.f32	s0, s0, s15
    8666:	ed84 0a06 	vstr	s0, [r4, #24]
}
    866a:	ecbd 8b02 	vpop	{d8}
    866e:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
    8670:	edd4 7a03 	vldr	s15, [r4, #12]
    8674:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
    8678:	eef8 7a67 	vcvt.f32.u32	s15, s15
    867c:	eeb4 1ae7 	vcmpe.f32	s2, s15
    8680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8684:	f340 808b 	ble.w	879e <tADSRT_tick+0x1de>
                adsr->next = adsr->gain * adsr->sustain;
    8688:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
    868c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
    8690:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
    8694:	2203      	movs	r2, #3
                adsr->sustainWithLeak = 1.0f;
    8696:	61e3      	str	r3, [r4, #28]
                adsr->next = adsr->gain * adsr->sustain;
    8698:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
    869c:	63e2      	str	r2, [r4, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
    869e:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
    86a2:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    86a6:	ee77 7a81 	vadd.f32	s15, s15, s2
    86aa:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
    86ae:	ecbd 8b02 	vpop	{d8}
    86b2:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
    86b4:	edd4 7a03 	vldr	s15, [r4, #12]
    86b8:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
    86bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    86c0:	eeb4 1ae7 	vcmpe.f32	s2, s15
    86c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    86c8:	f340 809e 	ble.w	8808 <tADSRT_tick+0x248>
                adsr->next = 0.0f;
    86cc:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8880 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_idle;
    86d0:	2300      	movs	r3, #0
    86d2:	eeb0 0a67 	vmov.f32	s0, s15
    86d6:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
    86d8:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
    86dc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    86e0:	ee77 7a81 	vadd.f32	s15, s15, s2
    86e4:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
}
    86e8:	ecbd 8b02 	vpop	{d8}
    86ec:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
    86ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
    86f2:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
    86f6:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
    86fa:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
    86fe:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
    8702:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
    8706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    870a:	f100 80b2 	bmi.w	8872 <tADSRT_tick+0x2b2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
    870e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    8712:	6862      	ldr	r2, [r4, #4]
    8714:	ee17 3a90 	vmov	r3, s15
    8718:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    871c:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
    8720:	ee16 3a90 	vmov	r3, s13
    8724:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
    8728:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    872c:	ed92 0a00 	vldr	s0, [r2]
    8730:	f001 fe8e 	bl	a450 <__LEAF_interpolation_linear_veneer>
    8734:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
    8738:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
    873c:	ed84 0a06 	vstr	s0, [r4, #24]
    8740:	e75f      	b.n	8602 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
    8742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
    8746:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
    874a:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
    874e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
    8752:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
    8756:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
    875a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    875e:	f100 8084 	bmi.w	886a <tADSRT_tick+0x2aa>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
    8762:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    8766:	6862      	ldr	r2, [r4, #4]
    8768:	ee17 3a90 	vmov	r3, s15
    876c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8770:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
    8774:	ee16 3a90 	vmov	r3, s13
    8778:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
    877c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    8780:	ed92 0a00 	vldr	s0, [r2]
    8784:	f001 fe64 	bl	a450 <__LEAF_interpolation_linear_veneer>
    8788:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
    878c:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
    8790:	ee37 0ac0 	vsub.f32	s0, s15, s0
    8794:	ee20 0a08 	vmul.f32	s0, s0, s16
    8798:	ed84 0a06 	vstr	s0, [r4, #24]
    879c:	e74c      	b.n	8638 <tADSRT_tick+0x78>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
    879e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
    87a2:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
    87a6:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
    87aa:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
    87ae:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
    87b2:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
    87b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    87ba:	d452      	bmi.n	8862 <tADSRT_tick+0x2a2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
    87bc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    87c0:	6862      	ldr	r2, [r4, #4]
    87c2:	ee17 3a90 	vmov	r3, s15
    87c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    87ca:	edd3 0a00 	vldr	s1, [r3]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
    87ce:	ee16 3a90 	vmov	r3, s13
    87d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    87d6:	ed92 0a00 	vldr	s0, [r2]
    87da:	f001 fe39 	bl	a450 <__LEAF_interpolation_linear_veneer>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
    87de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    87e2:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
    87e6:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
    87ea:	ee76 6ac7 	vsub.f32	s13, s13, s14
    87ee:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
            adsr->decayPhase += adsr->decayInc;
    87f2:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
    87f6:	ee67 7a86 	vmul.f32	s15, s15, s12
    87fa:	eea6 7a80 	vfma.f32	s14, s13, s0
    87fe:	ee27 0a87 	vmul.f32	s0, s15, s14
    8802:	ed84 0a06 	vstr	s0, [r4, #24]
    8806:	e74c      	b.n	86a2 <tADSRT_tick+0xe2>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
    8808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
    880c:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
    8810:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
    8814:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
    8818:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
    881c:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
    8820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8824:	d419      	bmi.n	885a <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
    8826:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    882a:	6862      	ldr	r2, [r4, #4]
    882c:	ee17 3a90 	vmov	r3, s15
    8830:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8834:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
    8838:	ee16 3a90 	vmov	r3, s13
    883c:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
    8840:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    8844:	ed92 0a00 	vldr	s0, [r2]
    8848:	f001 fe02 	bl	a450 <__LEAF_interpolation_linear_veneer>
    884c:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
    8850:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
    8854:	ed84 0a06 	vstr	s0, [r4, #24]
    8858:	e740      	b.n	86dc <tADSRT_tick+0x11c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
    885a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
    885c:	eddf 0a08 	vldr	s1, [pc, #32]	; 8880 <tADSRT_tick+0x2c0>
    8860:	e7ea      	b.n	8838 <tADSRT_tick+0x278>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
    8862:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
    8864:	eddf 0a06 	vldr	s1, [pc, #24]	; 8880 <tADSRT_tick+0x2c0>
    8868:	e7b1      	b.n	87ce <tADSRT_tick+0x20e>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
    886a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
    886c:	eddf 0a04 	vldr	s1, [pc, #16]	; 8880 <tADSRT_tick+0x2c0>
    8870:	e780      	b.n	8774 <tADSRT_tick+0x1b4>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
    8872:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
    8874:	eddf 0a02 	vldr	s1, [pc, #8]	; 8880 <tADSRT_tick+0x2c0>
    8878:	e752      	b.n	8720 <tADSRT_tick+0x160>
    return adsr->next;
    887a:	ed94 0a06 	vldr	s0, [r4, #24]
    887e:	e6c6      	b.n	860e <tADSRT_tick+0x4e>
    8880:	00000000 	.word	0x00000000
    8884:	f3af 8000 	nop.w
    8888:	f3af 8000 	nop.w
    888c:	f3af 8000 	nop.w
    8890:	f3af 8000 	nop.w
    8894:	f3af 8000 	nop.w
    8898:	f3af 8000 	nop.w
    889c:	f3af 8000 	nop.w

000088a0 <tADSRT_tickNoInterp>:
    _tADSRT* adsr = *adsrenv;
    88a0:	6803      	ldr	r3, [r0, #0]
    switch (adsr->whichStage)
    88a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    88a4:	3a01      	subs	r2, #1
    88a6:	2a04      	cmp	r2, #4
    88a8:	f200 80c7 	bhi.w	8a3a <tADSRT_tickNoInterp+0x19a>
    88ac:	e8df f002 	tbb	[pc, r2]
    88b0:	6533461b 	.word	0x6533461b
    88b4:	03          	.byte	0x03
    88b5:	00          	.byte	0x00
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
    88b6:	edd3 7a03 	vldr	s15, [r3, #12]
    88ba:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
    88be:	eef8 7a67 	vcvt.f32.u32	s15, s15
    88c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    88c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    88ca:	dd6e      	ble.n	89aa <tADSRT_tickNoInterp+0x10a>
                adsr->whichStage = env_attack;
    88cc:	2201      	movs	r2, #1
                adsr->next = 0.0f;
    88ce:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8a40 <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_attack;
    88d2:	63da      	str	r2, [r3, #60]	; 0x3c
            adsr->rampPhase += adsr->rampInc;
    88d4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
    88d8:	ed83 0a06 	vstr	s0, [r3, #24]
    88dc:	ee77 7a87 	vadd.f32	s15, s15, s14
    88e0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            break;
    88e4:	4770      	bx	lr
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
    88e6:	edd3 7a03 	vldr	s15, [r3, #12]
    88ea:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
    88ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
    88f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    88f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    88fa:	dd64      	ble.n	89c6 <tADSRT_tickNoInterp+0x126>
                adsr->whichStage = env_decay;
    88fc:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
    88fe:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->whichStage = env_decay;
    8902:	63da      	str	r2, [r3, #60]	; 0x3c
            adsr->attackPhase += adsr->attackInc;
    8904:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
    8908:	ed83 0a06 	vstr	s0, [r3, #24]
    890c:	ee77 7a87 	vadd.f32	s15, s15, s14
    8910:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
    8914:	4770      	bx	lr
            adsr->sustainWithLeak *= adsr->leakFactor;
    8916:	edd3 7a07 	vldr	s15, [r3, #28]
    891a:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
    891e:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
    8922:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
            adsr->sustainWithLeak *= adsr->leakFactor;
    8926:	ee67 7aa6 	vmul.f32	s15, s15, s13
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
    892a:	ee20 0a07 	vmul.f32	s0, s0, s14
            adsr->sustainWithLeak *= adsr->leakFactor;
    892e:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
    8932:	ee20 0a27 	vmul.f32	s0, s0, s15
    8936:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
    893a:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
    893c:	edd3 7a03 	vldr	s15, [r3, #12]
    8940:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
    8944:	eef8 7a67 	vcvt.f32.u32	s15, s15
    8948:	eeb4 7ae7 	vcmpe.f32	s14, s15
    894c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8950:	dd4b      	ble.n	89ea <tADSRT_tickNoInterp+0x14a>
                adsr->next = adsr->gain * adsr->sustain;
    8952:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
    8956:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
    895a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
    895e:	2103      	movs	r1, #3
                adsr->sustainWithLeak = 1.0f;
    8960:	61da      	str	r2, [r3, #28]
                adsr->next = adsr->gain * adsr->sustain;
    8962:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
    8966:	63d9      	str	r1, [r3, #60]	; 0x3c
            adsr->decayPhase += adsr->decayInc;
    8968:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
    896c:	ed83 0a06 	vstr	s0, [r3, #24]
    8970:	ee77 7a87 	vadd.f32	s15, s15, s14
    8974:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
    8978:	4770      	bx	lr
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
    897a:	edd3 7a03 	vldr	s15, [r3, #12]
    897e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
    8982:	eef8 7a67 	vcvt.f32.u32	s15, s15
    8986:	eeb4 7ae7 	vcmpe.f32	s14, s15
    898a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    898e:	dd46      	ble.n	8a1e <tADSRT_tickNoInterp+0x17e>
                adsr->whichStage = env_idle;
    8990:	2200      	movs	r2, #0
                adsr->next = 0.0f;
    8992:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8a40 <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_idle;
    8996:	63da      	str	r2, [r3, #60]	; 0x3c
            adsr->releasePhase += adsr->releaseInc;
    8998:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
    899c:	ed83 0a06 	vstr	s0, [r3, #24]
    89a0:	ee77 7a87 	vadd.f32	s15, s15, s14
    89a4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
    89a8:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
    89aa:	eefc 6ac7 	vcvt.u32.f32	s13, s14
    89ae:	685a      	ldr	r2, [r3, #4]
    89b0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
    89b4:	ee16 1a90 	vmov	r1, s13
    89b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    89bc:	ed92 0a00 	vldr	s0, [r2]
    89c0:	ee20 0a27 	vmul.f32	s0, s0, s15
    89c4:	e786      	b.n	88d4 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
    89c6:	eefc 6ac7 	vcvt.u32.f32	s13, s14
    89ca:	685a      	ldr	r2, [r3, #4]
    89cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    89d0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    89d4:	ee16 1a90 	vmov	r1, s13
    89d8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    89dc:	edd2 6a00 	vldr	s13, [r2]
    89e0:	ee30 0a66 	vsub.f32	s0, s0, s13
    89e4:	ee20 0a27 	vmul.f32	s0, s0, s15
    89e8:	e78c      	b.n	8904 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
    89ea:	eefc 5ac7 	vcvt.u32.f32	s11, s14
    89ee:	685a      	ldr	r2, [r3, #4]
    89f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    89f4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    89f8:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
    89fc:	ee15 1a90 	vmov	r1, s11
    8a00:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
    8a04:	ee76 6ae7 	vsub.f32	s13, s13, s15
    8a08:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    8a0c:	ee20 0a06 	vmul.f32	s0, s0, s12
    8a10:	ed92 6a00 	vldr	s12, [r2]
    8a14:	eee6 7a26 	vfma.f32	s15, s12, s13
    8a18:	ee20 0a27 	vmul.f32	s0, s0, s15
    8a1c:	e7a4      	b.n	8968 <tADSRT_tickNoInterp+0xc8>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
    8a1e:	eefc 6ac7 	vcvt.u32.f32	s13, s14
    8a22:	685a      	ldr	r2, [r3, #4]
    8a24:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
    8a28:	ee16 1a90 	vmov	r1, s13
    8a2c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    8a30:	ed92 0a00 	vldr	s0, [r2]
    8a34:	ee20 0a27 	vmul.f32	s0, s0, s15
    8a38:	e7ae      	b.n	8998 <tADSRT_tickNoInterp+0xf8>
    return adsr->next;
    8a3a:	ed93 0a06 	vldr	s0, [r3, #24]
    8a3e:	4770      	bx	lr
    8a40:	00000000 	.word	0x00000000
    8a44:	f3af 8000 	nop.w
    8a48:	f3af 8000 	nop.w
    8a4c:	f3af 8000 	nop.w
    8a50:	f3af 8000 	nop.w
    8a54:	f3af 8000 	nop.w
    8a58:	f3af 8000 	nop.w
    8a5c:	f3af 8000 	nop.w

00008a60 <tADSRT_setSampleRate>:
{
    8a60:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
    8a62:	6804      	ldr	r4, [r0, #0]
{
    8a64:	eeb0 7a40 	vmov.f32	s14, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
    8a68:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8ad8 <tADSRT_setSampleRate+0x78>
    adsr->invSampleRate = 1.0f/sr;
    8a6c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
    8a70:	edd4 6a02 	vldr	s13, [r4, #8]
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
    8a74:	eeb4 6a00 	vmov.f32	s12, #64	; 0x3e000000  0.125
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->attack;
    8a78:	ed94 4a08 	vldr	s8, [r4, #32]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
    8a7c:	eef8 6a66 	vcvt.f32.u32	s13, s13
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->decay;
    8a80:	edd4 4a09 	vldr	s9, [r4, #36]	; 0x24
    adsr->invSampleRate = 1.0f/sr;
    8a84:	eec3 5a80 	vdiv.f32	s11, s7, s0
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->release;
    8a88:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
    adsr->leakFactor = powf(adsr->baseLeakFactor, 44100.0f * adsr->invSampleRate);
    8a8c:	eddf 0a13 	vldr	s1, [pc, #76]	; 8adc <tADSRT_setSampleRate+0x7c>
    adsr->sampleRate = sr;
    8a90:	ed84 7a04 	vstr	s14, [r4, #16]
    adsr->leakFactor = powf(adsr->baseLeakFactor, 44100.0f * adsr->invSampleRate);
    8a94:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
    8a98:	ee66 6aa7 	vmul.f32	s13, s13, s15
    8a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
    adsr->leakFactor = powf(adsr->baseLeakFactor, 44100.0f * adsr->invSampleRate);
    8aa0:	ee65 0aa0 	vmul.f32	s1, s11, s1
    adsr->invSampleRate = 1.0f/sr;
    8aa4:	edc4 5a1a 	vstr	s11, [r4, #104]	; 0x68
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->decay;
    8aa8:	eec7 6aa4 	vdiv.f32	s13, s15, s9
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
    8aac:	edc4 7a05 	vstr	s15, [r4, #20]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->attack;
    8ab0:	eec7 5a84 	vdiv.f32	s11, s15, s8
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->release;
    8ab4:	ee87 7a85 	vdiv.f32	s14, s15, s10
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
    8ab8:	ee27 6a86 	vmul.f32	s12, s15, s12
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->decay;
    8abc:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
    8ac0:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->attack;
    8ac4:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / adsr->release;
    8ac8:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    adsr->leakFactor = powf(adsr->baseLeakFactor, 44100.0f * adsr->invSampleRate);
    8acc:	f001 fca0 	bl	a410 <__powf_veneer>
    8ad0:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
    8ad4:	bd10      	pop	{r4, pc}
    8ad6:	bf00      	nop
    8ad8:	4479ffff 	.word	0x4479ffff
    8adc:	472c4400 	.word	0x472c4400

00008ae0 <place_step_dd>:
#endif
{
	Lfloat r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    8ae0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8b4c <place_step_dd+0x6c>
	i = lrintf(r - 0.5f);
    8ae4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    8ae8:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    8aec:	b538      	push	{r3, r4, r5, lr}
    8aee:	ed2d 8b02 	vpush	{d8}
	r = MINBLEP_PHASES * phase / w;
    8af2:	ee80 8a20 	vdiv.f32	s16, s0, s1
{
    8af6:	460d      	mov	r5, r1
    8af8:	4604      	mov	r4, r0
    8afa:	eef0 8a41 	vmov.f32	s17, s2
	i = lrintf(r - 0.5f);
    8afe:	ee38 0a67 	vsub.f32	s0, s16, s15
    8b02:	f001 fc4d 	bl	a3a0 <__lrintf_veneer>
	r -= (Lfloat)i;
    8b06:	ee07 0a90 	vmov	s15, r0
    8b0a:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8b0e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (Lfloat)i;
    8b12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8b16:	4b0e      	ldr	r3, [pc, #56]	; (8b50 <place_step_dd+0x70>)
    8b18:	f502 7190 	add.w	r1, r2, #288	; 0x120
    8b1c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    8b20:	ee38 6a67 	vsub.f32	s12, s16, s15

	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    8b24:	edd3 6a01 	vldr	s13, [r3, #4]
    8b28:	ed93 7a00 	vldr	s14, [r3]
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    8b2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
		buffer[index] += scale * (step_dd_table[i].value + r * step_dd_table[i].delta);
    8b30:	edd2 7a00 	vldr	s15, [r2]
    8b34:	eea6 7a86 	vfma.f32	s14, s13, s12
    8b38:	eee7 7a28 	vfma.f32	s15, s14, s17
    8b3c:	ece2 7a01 	vstmia	r2!, {s15}
	while (i < MINBLEP_PHASES * STEP_DD_PULSE_LENGTH) {
    8b40:	4291      	cmp	r1, r2
    8b42:	d1ef      	bne.n	8b24 <place_step_dd+0x44>
		i += MINBLEP_PHASES;
		index++;
	}
}
    8b44:	ecbd 8b02 	vpop	{d8}
    8b48:	bd38      	pop	{r3, r4, r5, pc}
    8b4a:	bf00      	nop
    8b4c:	42800000 	.word	0x42800000
    8b50:	240220c4 	.word	0x240220c4
    8b54:	f3af 8000 	nop.w
    8b58:	f3af 8000 	nop.w
    8b5c:	f3af 8000 	nop.w

00008b60 <place_slope_dd>:
#endif
{
	Lfloat r;
	long i;

	r = MINBLEP_PHASES * phase / w;
    8b60:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8bd8 <place_slope_dd+0x78>
	i = lrintf(r - 0.5f);
    8b64:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	r = MINBLEP_PHASES * phase / w;
    8b68:	ee20 0a07 	vmul.f32	s0, s0, s14
{
    8b6c:	b538      	push	{r3, r4, r5, lr}
    8b6e:	ed2d 8b04 	vpush	{d8-d9}
	r = MINBLEP_PHASES * phase / w;
    8b72:	eec0 8a20 	vdiv.f32	s17, s0, s1
{
    8b76:	460d      	mov	r5, r1
    8b78:	4604      	mov	r4, r0
    8b7a:	eeb0 8a60 	vmov.f32	s16, s1
    8b7e:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    8b82:	ee38 0ae7 	vsub.f32	s0, s17, s15
    8b86:	f001 fc0b 	bl	a3a0 <__lrintf_veneer>
	r -= (Lfloat)i;
    8b8a:	ee07 0a90 	vmov	s15, r0
    8b8e:	eb04 0285 	add.w	r2, r4, r5, lsl #2
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    8b92:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (Lfloat)i;
    8b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8b9a:	4b10      	ldr	r3, [pc, #64]	; (8bdc <place_slope_dd+0x7c>)

	slope_delta *= w;
    8b9c:	ee68 0a09 	vmul.f32	s1, s16, s18
    8ba0:	f502 718e 	add.w	r1, r2, #284	; 0x11c
    8ba4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	r -= (Lfloat)i;
    8ba8:	ee38 6ae7 	vsub.f32	s12, s17, s15

	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    8bac:	edd3 7a00 	vldr	s15, [r3]
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    8bb0:	f503 7380 	add.w	r3, r3, #256	; 0x100
		buffer[index] += slope_delta * (slope_dd_table[i] + r * (slope_dd_table[i + 1] - slope_dd_table[i]));
    8bb4:	ed53 6a3f 	vldr	s13, [r3, #-252]	; 0xffffff04
    8bb8:	ed92 7a00 	vldr	s14, [r2]
    8bbc:	ee76 6ae7 	vsub.f32	s13, s13, s15
    8bc0:	eee6 7a86 	vfma.f32	s15, s13, s12
    8bc4:	eea7 7aa0 	vfma.f32	s14, s15, s1
    8bc8:	eca2 7a01 	vstmia	r2!, {s14}
	while (i < MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH) {
    8bcc:	4291      	cmp	r1, r2
    8bce:	d1ed      	bne.n	8bac <place_slope_dd+0x4c>
		i += MINBLEP_PHASES;
		index++;
	}
}
    8bd0:	ecbd 8b04 	vpop	{d8-d9}
    8bd4:	bd38      	pop	{r3, r4, r5, pc}
    8bd6:	bf00      	nop
    8bd8:	42800000 	.word	0x42800000
    8bdc:	2401d9c0 	.word	0x2401d9c0

00008be0 <LEAF_clip>:
    if (val < min)
    8be0:	eef4 0ac0 	vcmpe.f32	s1, s0
    8be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8be8:	d401      	bmi.n	8bee <LEAF_clip+0xe>
    else if (val > max)
    8bea:	fe80 0ac1 	vminnm.f32	s0, s1, s2
}
    8bee:	4770      	bx	lr
	...

00008c00 <tPBSineTriangle_tick>:
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    8c00:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    8c04:	b510      	push	{r4, lr}
    8c06:	ed2d 8b06 	vpush	{d8-d10}
    _tPBSineTriangle* c = *osc;
    8c0a:	6804      	ldr	r4, [r0, #0]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    8c0c:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    8c10:	eeb0 7a67 	vmov.f32	s14, s15
{
    8c14:	b082      	sub	sp, #8
    Lfloat t = c->phase;
    8c16:	edd4 9a01 	vldr	s19, [r4, #4]
    v += LEAF_poly_blamp(1.0f - t,  dt);
    8c1a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    8c1e:	edd4 0a02 	vldr	s1, [r4, #8]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    8c22:	eea9 7a89 	vfma.f32	s14, s19, s18
    8c26:	eef0 0ae0 	vabs.f32	s1, s1
    v += LEAF_poly_blamp(t,  dt);
    8c2a:	eeb0 0a69 	vmov.f32	s0, s19
    8c2e:	eef1 0a60 	vneg.f32	s1, s1
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    8c32:	eeb0 7ac7 	vabs.f32	s14, s14
    v += LEAF_poly_blamp(t,  dt);
    8c36:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    8c3a:	eee7 7a09 	vfma.f32	s15, s14, s18
    8c3e:	eeb0 8a67 	vmov.f32	s16, s15
    v += LEAF_poly_blamp(t,  dt);
    8c42:	f001 fc41 	bl	a4c8 <__LEAF_poly_blamp_veneer>
    8c46:	eef0 7a40 	vmov.f32	s15, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
    8c4a:	eddd 0a01 	vldr	s1, [sp, #4]
    8c4e:	ee38 0ae9 	vsub.f32	s0, s17, s19
    v += LEAF_poly_blamp(t,  dt);
    8c52:	ee38 8a27 	vadd.f32	s16, s16, s15
    v += LEAF_poly_blamp(1.0f - t,  dt);
    8c56:	f001 fc37 	bl	a4c8 <__LEAF_poly_blamp_veneer>
    t += 0.5f;
    8c5a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    v -= LEAF_poly_blamp(t, dt);
    8c5e:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(1.0f - t,  dt);
    8c62:	ee38 8a00 	vadd.f32	s16, s16, s0
    t += 0.5f;
    8c66:	ee79 9aa7 	vadd.f32	s19, s19, s15
    t -= (int)(t);
    8c6a:	eebd aae9 	vcvt.s32.f32	s20, s19
    8c6e:	eeb8 aaca 	vcvt.f32.s32	s20, s20
    v -= LEAF_poly_blamp(t, dt);
    8c72:	ee39 0aca 	vsub.f32	s0, s19, s20
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    8c76:	ee78 9ae9 	vsub.f32	s19, s17, s19
    v -= LEAF_poly_blamp(t, dt);
    8c7a:	f001 fc25 	bl	a4c8 <__LEAF_poly_blamp_veneer>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    8c7e:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
    8c82:	ee38 8a40 	vsub.f32	s16, s16, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    8c86:	ee39 0a8a 	vadd.f32	s0, s19, s20
    8c8a:	f001 fc1d 	bl	a4c8 <__LEAF_poly_blamp_veneer>
    c->phase += c->inc - (int)c->inc;
    8c8e:	edd4 7a02 	vldr	s15, [r4, #8]
    8c92:	edd4 6a01 	vldr	s13, [r4, #4]
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    8c96:	ee38 8a40 	vsub.f32	s16, s16, s0
    c->phase += c->inc - (int)c->inc;
    8c9a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    8c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
    8ca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    8ca6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    8caa:	eef4 7ae8 	vcmpe.f32	s15, s17
    c->phase += c->inc - (int)c->inc;
    8cae:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
    8cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8cb6:	db0a      	blt.n	8cce <tPBSineTriangle_tick+0xce>
    8cb8:	eeb0 7a67 	vmov.f32	s14, s15
    8cbc:	ee77 7ae8 	vsub.f32	s15, s15, s17
    8cc0:	eeb4 7ac9 	vcmpe.f32	s14, s18
    8cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8cc8:	daf6      	bge.n	8cb8 <tPBSineTriangle_tick+0xb8>
    8cca:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase < 0.0f) c->phase += 1.0f;
    8cce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    8cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8cd6:	d50e      	bpl.n	8cf6 <tPBSineTriangle_tick+0xf6>
    8cd8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    8cdc:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    8ce0:	eeb0 7a67 	vmov.f32	s14, s15
    8ce4:	ee77 7a86 	vadd.f32	s15, s15, s12
    8ce8:	eeb4 7ae6 	vcmpe.f32	s14, s13
    8cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8cf0:	d4f6      	bmi.n	8ce0 <tPBSineTriangle_tick+0xe0>
    8cf2:	edc4 7a01 	vstr	s15, [r4, #4]
    _tCycle* c = *cy;
    8cf6:	69e0      	ldr	r0, [r4, #28]
    out = v * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
    8cf8:	edd4 6a04 	vldr	s13, [r4, #16]
    samp0 = __leaf_table_sinewave[idx];
    8cfc:	4a14      	ldr	r2, [pc, #80]	; (8d50 <tPBSineTriangle_tick+0x150>)
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
    8cfe:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8d54 <tPBSineTriangle_tick+0x154>
    c->phase += c->inc;
    8d02:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
    8d06:	440b      	add	r3, r1
    8d08:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
    8d0a:	0d59      	lsrs	r1, r3, #21
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    8d0c:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
    8d10:	6940      	ldr	r0, [r0, #20]
    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
    8d12:	ed94 6a08 	vldr	s12, [r4, #32]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    8d16:	ee07 3a90 	vmov	s15, r3
    idx = (idx + 1) & c->mask;
    8d1a:	1c4b      	adds	r3, r1, #1
    samp0 = __leaf_table_sinewave[idx];
    8d1c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    idx = (idx + 1) & c->mask;
    8d20:	4003      	ands	r3, r0
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
    8d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
    8d26:	ed91 0a00 	vldr	s0, [r1]
    samp1 = __leaf_table_sinewave[idx];
    8d2a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
    8d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
    8d32:	ed92 7a00 	vldr	s14, [r2]
    8d36:	ee37 7a40 	vsub.f32	s14, s14, s0
    8d3a:	eea7 0a87 	vfma.f32	s0, s15, s14
    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
    8d3e:	ee20 0a06 	vmul.f32	s0, s0, s12
}
    8d42:	eea6 0a88 	vfma.f32	s0, s13, s16
    8d46:	b002      	add	sp, #8
    8d48:	ecbd 8b06 	vpop	{d8-d10}
    8d4c:	bd10      	pop	{r4, pc}
    8d4e:	bf00      	nop
    8d50:	2401b9c0 	.word	0x2401b9c0
    8d54:	35000004 	.word	0x35000004
    8d58:	f3af 8000 	nop.w
    8d5c:	f3af 8000 	nop.w

00008d60 <tPBSineTriangle_setFreq>:
    _tPBSineTriangle* c = *osc;
    8d60:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRate;
    8d62:	edd3 7a06 	vldr	s15, [r3, #24]
    _tCycle* c = *cy;
    8d66:	69da      	ldr	r2, [r3, #28]
    c->inc = freq * c->invSampleRate;
    8d68:	ee67 7a80 	vmul.f32	s15, s15, s0
    c->freq  = freq;
    8d6c:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
    8d70:	edc3 7a02 	vstr	s15, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    8d74:	edd2 7a04 	vldr	s15, [r2, #16]
    c->freq  = freq;
    8d78:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    8d7c:	ee20 0a27 	vmul.f32	s0, s0, s15
    8d80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    8d84:	ed82 0a02 	vstr	s0, [r2, #8]
}
    8d88:	4770      	bx	lr
    8d8a:	bf00      	nop
    8d8c:	f3af 8000 	nop.w
    8d90:	f3af 8000 	nop.w
    8d94:	f3af 8000 	nop.w
    8d98:	f3af 8000 	nop.w
    8d9c:	f3af 8000 	nop.w

00008da0 <tPBTriangle_tick>:
{
    8da0:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
    8da2:	6804      	ldr	r4, [r0, #0]
{
    8da4:	ed2d 8b08 	vpush	{d8-d11}
    Lfloat t = c->phase;
    8da8:	ed94 8a01 	vldr	s16, [r4, #4]
{
    8dac:	b082      	sub	sp, #8
    if (t < c->skew)
    8dae:	edd4 7a04 	vldr	s15, [r4, #16]
    8db2:	edd4 0a02 	vldr	s1, [r4, #8]
    8db6:	eef4 7ac8 	vcmpe.f32	s15, s16
    8dba:	eef0 0ae0 	vabs.f32	s1, s1
    8dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8dc2:	eef1 0a60 	vneg.f32	s1, s1
    8dc6:	dd71      	ble.n	8eac <tPBTriangle_tick+0x10c>
        v = 2.0f * t / c->skew - 1.0f;
    8dc8:	ee38 7a08 	vadd.f32	s14, s16, s16
    8dcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    8dd0:	ee87 aa27 	vdiv.f32	s20, s14, s15
    8dd4:	ee3a aa66 	vsub.f32	s20, s20, s13
    v += LEAF_poly_blamp(1.0f - t,  dt);
    8dd8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    v += LEAF_poly_blamp(t,  dt);
    8ddc:	edcd 0a01 	vstr	s1, [sp, #4]
    8de0:	eeb0 0a48 	vmov.f32	s0, s16
    8de4:	f001 fb70 	bl	a4c8 <__LEAF_poly_blamp_veneer>
    v += LEAF_poly_blamp(1.0f - t,  dt);
    8de8:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(t,  dt);
    8dec:	eeb0 ba40 	vmov.f32	s22, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
    8df0:	ee38 0ac8 	vsub.f32	s0, s17, s16
    8df4:	f001 fb68 	bl	a4c8 <__LEAF_poly_blamp_veneer>
    t += 0.5f;
    8df8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    v += LEAF_poly_blamp(1.0f - t,  dt);
    8dfc:	eef0 aa40 	vmov.f32	s21, s0
    v -= LEAF_poly_blamp(t, dt);
    8e00:	eddd 0a01 	vldr	s1, [sp, #4]
    t += 0.5f;
    8e04:	ee38 8a27 	vadd.f32	s16, s16, s15
    t -= (int)(t);
    8e08:	eefd 9ac8 	vcvt.s32.f32	s19, s16
    8e0c:	eef8 9ae9 	vcvt.f32.s32	s19, s19
    v -= LEAF_poly_blamp(t, dt);
    8e10:	ee38 0a69 	vsub.f32	s0, s16, s19
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    8e14:	ee38 8ac8 	vsub.f32	s16, s17, s16
    v -= LEAF_poly_blamp(t, dt);
    8e18:	f001 fb56 	bl	a4c8 <__LEAF_poly_blamp_veneer>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    8e1c:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
    8e20:	eeb0 9a40 	vmov.f32	s18, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
    8e24:	ee38 0a29 	vadd.f32	s0, s16, s19
    8e28:	f001 fb4e 	bl	a4c8 <__LEAF_poly_blamp_veneer>
    c->phase += c->inc - (int)c->inc;
    8e2c:	edd4 7a02 	vldr	s15, [r4, #8]
    8e30:	edd4 6a01 	vldr	s13, [r4, #4]
    8e34:	ee39 9a00 	vadd.f32	s18, s18, s0
    8e38:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    8e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
    8e40:	ee39 9a4a 	vsub.f32	s18, s18, s20
    8e44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    8e48:	ee77 7ac7 	vsub.f32	s15, s15, s14
	while (c->phase >= 1.0f) c->phase -= 1.0f;
    8e4c:	eef4 7ae8 	vcmpe.f32	s15, s17
    c->phase += c->inc - (int)c->inc;
    8e50:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase >= 1.0f) c->phase -= 1.0f;
    8e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e58:	db0c      	blt.n	8e74 <tPBTriangle_tick+0xd4>
    8e5a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    8e5e:	eeb0 7a67 	vmov.f32	s14, s15
    8e62:	ee77 7ae8 	vsub.f32	s15, s15, s17
    8e66:	eeb4 7ae6 	vcmpe.f32	s14, s13
    8e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e6e:	daf6      	bge.n	8e5e <tPBTriangle_tick+0xbe>
    8e70:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase < 0.0f) c->phase += 1.0f;
    8e74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    8e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e7c:	d50e      	bpl.n	8e9c <tPBTriangle_tick+0xfc>
    8e7e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    8e82:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    8e86:	eeb0 7a67 	vmov.f32	s14, s15
    8e8a:	ee77 7a86 	vadd.f32	s15, s15, s12
    8e8e:	eeb4 7ae6 	vcmpe.f32	s14, s13
    8e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8e96:	d4f6      	bmi.n	8e86 <tPBTriangle_tick+0xe6>
    8e98:	edc4 7a01 	vstr	s15, [r4, #4]
	return -v;
    8e9c:	ee39 9a4b 	vsub.f32	s18, s18, s22
    8ea0:	ee39 0a6a 	vsub.f32	s0, s18, s21
}
    8ea4:	b002      	add	sp, #8
    8ea6:	ecbd 8b08 	vpop	{d8-d11}
    8eaa:	bd10      	pop	{r4, pc}
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
    8eac:	ee78 7a67 	vsub.f32	s15, s16, s15
    8eb0:	edd4 6a05 	vldr	s13, [r4, #20]
    8eb4:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
    8eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    8ebc:	ee67 7a86 	vmul.f32	s15, s15, s12
    8ec0:	ee87 aaa6 	vdiv.f32	s20, s15, s13
    8ec4:	ee3a aa07 	vadd.f32	s20, s20, s14
    8ec8:	e786      	b.n	8dd8 <tPBTriangle_tick+0x38>
    8eca:	bf00      	nop
    8ecc:	f3af 8000 	nop.w
    8ed0:	f3af 8000 	nop.w
    8ed4:	f3af 8000 	nop.w
    8ed8:	f3af 8000 	nop.w
    8edc:	f3af 8000 	nop.w

00008ee0 <tPBTriangle_setFreq>:
    _tPBTriangle* c = *osc;
    8ee0:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRate;
    8ee2:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
    8ee6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
    8eea:	ee67 7a80 	vmul.f32	s15, s15, s0
    8eee:	edc3 7a02 	vstr	s15, [r3, #8]
}
    8ef2:	4770      	bx	lr
    8ef4:	f3af 8000 	nop.w
    8ef8:	f3af 8000 	nop.w
    8efc:	f3af 8000 	nop.w

00008f00 <tPBPulse_tick>:
{
    8f00:	b510      	push	{r4, lr}
    _tPBPulse* c = *osc;
    8f02:	6804      	ldr	r4, [r0, #0]
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
    8f04:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
    8f08:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8f7c <tPBPulse_tick+0x7c>
{
    8f0c:	ed2d 8b02 	vpush	{d8}
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
    8f10:	6862      	ldr	r2, [r4, #4]
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
    8f12:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
    8f16:	edd4 6a02 	vldr	s13, [r4, #8]
{
    8f1a:	b082      	sub	sp, #8
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
    8f1c:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
    8f20:	eef8 0a66 	vcvt.f32.u32	s1, s13
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
    8f24:	ee06 2a90 	vmov	s13, r2
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    8f28:	18d3      	adds	r3, r2, r3
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
    8f2a:	428a      	cmp	r2, r1
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
    8f2c:	eeb8 0a66 	vcvt.f32.u32	s0, s13
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    8f30:	ee08 3a10 	vmov	s16, r3
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
    8f34:	ee60 0aa7 	vmul.f32	s1, s1, s15
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
    8f38:	bf28      	it	cs
    8f3a:	eef0 8a47 	vmovcs.f32	s17, s14
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    8f3e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
    8f42:	ee20 0a27 	vmul.f32	s0, s0, s15
    8f46:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    8f4a:	ee28 8a27 	vmul.f32	s16, s16, s15
    out += LEAF_poly_blep(phaseFloat,incFloat);
    8f4e:	f001 fa43 	bl	a3d8 <__LEAF_poly_blep_veneer>
    8f52:	eef0 7a40 	vmov.f32	s15, s0
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
    8f56:	eddd 0a01 	vldr	s1, [sp, #4]
    8f5a:	eeb0 0a48 	vmov.f32	s0, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
    8f5e:	ee78 8aa7 	vadd.f32	s17, s17, s15
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
    8f62:	f001 fa39 	bl	a3d8 <__LEAF_poly_blep_veneer>
    c->phase += c->inc;
    8f66:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
}
    8f6a:	ee38 0ac0 	vsub.f32	s0, s17, s0
    c->phase += c->inc;
    8f6e:	4413      	add	r3, r2
    8f70:	6063      	str	r3, [r4, #4]
}
    8f72:	b002      	add	sp, #8
    8f74:	ecbd 8b02 	vpop	{d8}
    8f78:	bd10      	pop	{r4, pc}
    8f7a:	bf00      	nop
    8f7c:	2f80000d 	.word	0x2f80000d

00008f80 <tPBPulse_setFreq>:
    _tPBPulse* c = *osc;
    8f80:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    8f82:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
    8f86:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    8f8a:	ee20 0a27 	vmul.f32	s0, s0, s15
    8f8e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    8f92:	ed83 0a02 	vstr	s0, [r3, #8]
}
    8f96:	4770      	bx	lr
    8f98:	f3af 8000 	nop.w
    8f9c:	f3af 8000 	nop.w

00008fa0 <tPBSaw_tick>:
{
    8fa0:	b510      	push	{r4, lr}
    _tPBSaw* c = *osc;
    8fa2:	6804      	ldr	r4, [r0, #0]
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    8fa4:	eddf 0a10 	vldr	s1, [pc, #64]	; 8fe8 <tPBSaw_tick+0x48>
{
    8fa8:	ed2d 8b02 	vpush	{d8}
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
    8fac:	edd4 7a01 	vldr	s15, [r4, #4]
    8fb0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    8fb4:	edd4 7a02 	vldr	s15, [r4, #8]
    8fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    out -= LEAF_poly_blep(phaseFloat, incFloat);
    8fbc:	ee28 0a20 	vmul.f32	s0, s16, s1
    8fc0:	ee67 0aa0 	vmul.f32	s1, s15, s1
    8fc4:	f001 fa08 	bl	a3d8 <__LEAF_poly_blep_veneer>
    c->phase += c->inc;
    8fc8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    8fcc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8fec <tPBSaw_tick+0x4c>
    8fd0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    8fd4:	eee8 7a47 	vfms.f32	s15, s16, s14
    8fd8:	4413      	add	r3, r2
    8fda:	6063      	str	r3, [r4, #4]
}
    8fdc:	ecbd 8b02 	vpop	{d8}
    8fe0:	ee30 0a27 	vadd.f32	s0, s0, s15
    8fe4:	bd10      	pop	{r4, pc}
    8fe6:	bf00      	nop
    8fe8:	2f80000d 	.word	0x2f80000d
    8fec:	2ffffff6 	.word	0x2ffffff6
    8ff0:	f3af 8000 	nop.w
    8ff4:	f3af 8000 	nop.w
    8ff8:	f3af 8000 	nop.w
    8ffc:	f3af 8000 	nop.w

00009000 <tPBSaw_setFreq>:
    _tPBSaw* c = *osc;
    9000:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    9002:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
    9006:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
    900a:	ee20 0a27 	vmul.f32	s0, s0, s15
    900e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    9012:	ed83 0a02 	vstr	s0, [r3, #8]
}
    9016:	4770      	bx	lr
    9018:	f3af 8000 	nop.w
    901c:	f3af 8000 	nop.w

00009020 <tPBSawSquare_tick>:
{
    9020:	b530      	push	{r4, r5, lr}
    _tPBSawSquare* c = *osc;
    9022:	6804      	ldr	r4, [r0, #0]
{
    9024:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
    9028:	6865      	ldr	r5, [r4, #4]
    902a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    902e:	edd4 7a02 	vldr	s15, [r4, #8]
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
    9032:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    9036:	eddf 9a1f 	vldr	s19, [pc, #124]	; 90b4 <tPBSawSquare_tick+0x94>
{
    903a:	b083      	sub	sp, #12
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    903c:	eef8 0a67 	vcvt.f32.u32	s1, s15
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
    9040:	ee07 5a90 	vmov	s15, r5
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
    9044:	2d00      	cmp	r5, #0
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
    9046:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
    904a:	eeb8 aa67 	vcvt.f32.u32	s20, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    904e:	ee60 0aa9 	vmul.f32	s1, s1, s19
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
    9052:	fe28 8a88 	vselge.f32	s16, s17, s16
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
    9056:	ee2a 0a29 	vmul.f32	s0, s20, s19
    905a:	edcd 0a01 	vstr	s1, [sp, #4]
    905e:	f001 f9bb 	bl	a3d8 <__LEAF_poly_blep_veneer>
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
    9062:	ee07 5a90 	vmov	s15, r5
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
    9066:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
    906a:	eddd 0a01 	vldr	s1, [sp, #4]
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
    906e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    squareOut += resetBlep;
    9072:	ee38 8a09 	vadd.f32	s16, s16, s18
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
    9076:	ee20 0a29 	vmul.f32	s0, s0, s19
    907a:	f001 f9ad 	bl	a3d8 <__LEAF_poly_blep_veneer>
    squareOut -= midBlep;
    907e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 90b8 <tPBSawSquare_tick+0x98>
    9082:	ee38 8a40 	vsub.f32	s16, s16, s0
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
    9086:	ed94 7a08 	vldr	s14, [r4, #32]
    908a:	eeea 8a67 	vfms.f32	s17, s20, s15
    908e:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    c->phase += c->inc;
    9092:	6863      	ldr	r3, [r4, #4]
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
    9094:	ee28 8a07 	vmul.f32	s16, s16, s14
    c->phase += c->inc;
    9098:	68a2      	ldr	r2, [r4, #8]
    909a:	4413      	add	r3, r2
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
    909c:	ee38 0a89 	vadd.f32	s0, s17, s18
    c->phase += c->inc;
    90a0:	6063      	str	r3, [r4, #4]
}
    90a2:	eea0 8a27 	vfma.f32	s16, s0, s15
    90a6:	eeb0 0a48 	vmov.f32	s0, s16
    90aa:	b003      	add	sp, #12
    90ac:	ecbd 8b06 	vpop	{d8-d10}
    90b0:	bd30      	pop	{r4, r5, pc}
    90b2:	bf00      	nop
    90b4:	2f80000d 	.word	0x2f80000d
    90b8:	3000000d 	.word	0x3000000d
    90bc:	f3af 8000 	nop.w

000090c0 <tPBSawSquare_setFreq>:
    _tPBSawSquare* c = *osc;
    90c0:	6803      	ldr	r3, [r0, #0]
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
    90c2:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
    90c6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
    90ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    90ce:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    90d2:	ed83 0a02 	vstr	s0, [r3, #8]
}
    90d6:	4770      	bx	lr
    90d8:	f3af 8000 	nop.w
    90dc:	f3af 8000 	nop.w

000090e0 <tMBPulse_place_step_dd_noBuffer>:
	_tMBPulse* c = *osc;
    90e0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 9150 <tMBPulse_place_step_dd_noBuffer+0x70>
	i = lrintf(r - 0.5f);
    90e4:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
{
    90e8:	b510      	push	{r4, lr}
    90ea:	ed2d 8b04 	vpush	{d8-d9}
    90ee:	ee20 8a87 	vmul.f32	s16, s1, s14
	_tMBPulse* c = *osc;
    90f2:	6804      	ldr	r4, [r0, #0]
{
    90f4:	eef0 8a40 	vmov.f32	s17, s0
    90f8:	eeb0 9a41 	vmov.f32	s18, s2
	i = lrintf(r - 0.5f);
    90fc:	eee0 7a08 	vfma.f32	s15, s0, s16
    9100:	eeb0 0a67 	vmov.f32	s0, s15
    9104:	f001 f94c 	bl	a3a0 <__lrintf_veneer>
	r -= (Lfloat)i;
    9108:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    910c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9110:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (Lfloat)i;
    9114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9118:	3301      	adds	r3, #1
	r -= (Lfloat)i;
    911a:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    911e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9122:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9126:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
    912a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    912e:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9132:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9136:	ed82 9a3b 	vstr	s18, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    913a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    913e:	3301      	adds	r3, #1
    9140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9144:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
}
    9148:	ecbd 8b04 	vpop	{d8-d9}
    914c:	bd10      	pop	{r4, pc}
    914e:	bf00      	nop
    9150:	42800000 	.word	0x42800000
    9154:	f3af 8000 	nop.w
    9158:	f3af 8000 	nop.w
    915c:	f3af 8000 	nop.w

00009160 <tMBTriangle_place_dd_noBuffer>:
	_tMBTriangle* c = *osc;
    9160:	ed9f 7a20 	vldr	s14, [pc, #128]	; 91e4 <tMBTriangle_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    9164:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
{
    9168:	b510      	push	{r4, lr}
    916a:	ed2d 8b06 	vpush	{d8-d10}
    916e:	ee60 8a87 	vmul.f32	s17, s1, s14
	_tMBTriangle* c = *osc;
    9172:	6804      	ldr	r4, [r0, #0]
{
    9174:	eeb0 9a40 	vmov.f32	s18, s0
    9178:	eeb0 8a41 	vmov.f32	s16, s2
	i = lrintf(r - 0.5f);
    917c:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    9180:	eef0 9a61 	vmov.f32	s19, s3
    9184:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    9188:	eeb0 0a67 	vmov.f32	s0, s15
    918c:	f001 f908 	bl	a3a0 <__lrintf_veneer>
	r -= (Lfloat)i;
    9190:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9194:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
    9198:	ee28 2a0a 	vmul.f32	s4, s16, s20
	r -= (Lfloat)i;
    919c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    91a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    91a4:	3301      	adds	r3, #1
	r -= (Lfloat)i;
    91a6:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    91aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    91ae:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    91b2:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    91b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
    91ba:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    91be:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    91c2:	ed83 2a3c 	vstr	s4, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    91c6:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    91ca:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    91ce:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    91d2:	3301      	adds	r3, #1
    91d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    91d8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
    91dc:	ecbd 8b06 	vpop	{d8-d10}
    91e0:	bd10      	pop	{r4, pc}
    91e2:	bf00      	nop
    91e4:	42800000 	.word	0x42800000
    91e8:	f3af 8000 	nop.w
    91ec:	f3af 8000 	nop.w
    91f0:	f3af 8000 	nop.w
    91f4:	f3af 8000 	nop.w
    91f8:	f3af 8000 	nop.w
    91fc:	f3af 8000 	nop.w

00009200 <tMBSineTri_place_dd_noBuffer>:
	_tMBSineTri* c = *osc;
    9200:	ed9f 7a20 	vldr	s14, [pc, #128]	; 9284 <tMBSineTri_place_dd_noBuffer+0x84>
	i = lrintf(r - 0.5f);
    9204:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
{
    9208:	b510      	push	{r4, lr}
    920a:	ed2d 8b06 	vpush	{d8-d10}
    920e:	ee60 8a87 	vmul.f32	s17, s1, s14
	_tMBSineTri* c = *osc;
    9212:	6804      	ldr	r4, [r0, #0]
{
    9214:	eeb0 9a40 	vmov.f32	s18, s0
    9218:	eeb0 8a41 	vmov.f32	s16, s2
	i = lrintf(r - 0.5f);
    921c:	eee0 7a28 	vfma.f32	s15, s0, s17
{
    9220:	eef0 9a61 	vmov.f32	s19, s3
    9224:	eeb0 aa42 	vmov.f32	s20, s4
	i = lrintf(r - 0.5f);
    9228:	eeb0 0a67 	vmov.f32	s0, s15
    922c:	f001 f8b8 	bl	a3a0 <__lrintf_veneer>
	r -= (Lfloat)i;
    9230:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9234:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
    9238:	ee28 2a0a 	vmul.f32	s4, s16, s20
	r -= (Lfloat)i;
    923c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9240:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9244:	3301      	adds	r3, #1
	r -= (Lfloat)i;
    9246:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    924a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    924e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
    9252:	eb04 0243 	add.w	r2, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9256:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
    925a:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    925e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9262:	ed83 2a3c 	vstr	s4, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    9266:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
    926a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
    926e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
    9272:	3301      	adds	r3, #1
    9274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9278:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
}
    927c:	ecbd 8b06 	vpop	{d8-d10}
    9280:	bd10      	pop	{r4, pc}
    9282:	bf00      	nop
    9284:	42800000 	.word	0x42800000
    9288:	f3af 8000 	nop.w
    928c:	f3af 8000 	nop.w
    9290:	f3af 8000 	nop.w
    9294:	f3af 8000 	nop.w
    9298:	f3af 8000 	nop.w
    929c:	f3af 8000 	nop.w

000092a0 <tMBSawPulse_place_step_dd_noBuffer>:
{
    92a0:	b510      	push	{r4, lr}
    92a2:	ed2d 8b04 	vpush	{d8-d9}
    _tMBSawPulse* c = *osc;
    92a6:	6804      	ldr	r4, [r0, #0]
    if (c->active)
    92a8:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    92ac:	b36b      	cbz	r3, 930a <tMBSawPulse_place_step_dd_noBuffer+0x6a>
		r = MINBLEP_PHASES * phase * inv_w;
    92ae:	eddf 7a18 	vldr	s15, [pc, #96]	; 9310 <tMBSawPulse_place_step_dd_noBuffer+0x70>
    92b2:	eef0 8a40 	vmov.f32	s17, s0
		i = lrintf(r - 0.5f);
    92b6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    92ba:	ee20 8aa7 	vmul.f32	s16, s1, s15
    92be:	eeb0 9a41 	vmov.f32	s18, s2
    92c2:	eea8 0a88 	vfma.f32	s0, s17, s16
    92c6:	f001 f86b 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    92ca:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    92ce:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    92d2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    92d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    92da:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    92dc:	eed8 7a88 	vfnms.f32	s15, s17, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    92e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    92e4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    92e8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    92ec:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    92f0:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    92f4:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    92f8:	ed82 9a3d 	vstr	s18, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    92fc:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    9300:	3301      	adds	r3, #1
    9302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9306:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
    930a:	ecbd 8b04 	vpop	{d8-d9}
    930e:	bd10      	pop	{r4, pc}
    9310:	42800000 	.word	0x42800000
    9314:	f3af 8000 	nop.w
    9318:	f3af 8000 	nop.w
    931c:	f3af 8000 	nop.w

00009320 <tMBSawPulse_tick>:
{
    9320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9324:	ed2d 8b0e 	vpush	{d8-d14}
    _tMBSawPulse* c = *osc;
    9328:	6804      	ldr	r4, [r0, #0]
    Lfloat sawShape = 1.0f - c->shape;
    932a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
{
    932e:	b082      	sub	sp, #8
    9330:	4607      	mov	r7, r0
    sync = c->sync;
    9332:	ed94 8a04 	vldr	s16, [r4, #16]
    Lfloat shape = c->shape;
    9336:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    933a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    933e:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    Lfloat sawShape = 1.0f - c->shape;
    9342:	ee39 dacc 	vsub.f32	s26, s19, s24
    p = c->_p;  /* phase [0, 1) */
    9346:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    934a:	eefd cae5 	vcvt.s32.f32	s25, s11
    w = c->_w;  /* phase increment */
    934e:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    9352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
    9356:	ed94 ba0a 	vldr	s22, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
    935a:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
    935e:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
    9362:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    9364:	f340 80d6 	ble.w	9514 <tMBSawPulse_tick+0x1f4>
    9368:	f8d4 8018 	ldr.w	r8, [r4, #24]
    936c:	f1b8 0f00 	cmp.w	r8, #0
    9370:	dd65      	ble.n	943e <tMBSawPulse_tick+0x11e>
    9372:	edd4 6a05 	vldr	s13, [r4, #20]
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    9376:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    937a:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
    937e:	ee66 7aab 	vmul.f32	s15, s13, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    9382:	edc4 6a05 	vstr	s13, [r4, #20]
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    9386:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
    938a:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    938e:	ee37 7a87 	vadd.f32	s14, s15, s14
    9392:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    9396:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    939a:	ee1c 3a90 	vmov	r3, s25
		if (sw > 0)
    939e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
    93a2:	2b00      	cmp	r3, #0
    93a4:	f040 80cd 	bne.w	9542 <tMBSawPulse_tick+0x222>
		if (sw > 0)
    93a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    93ac:	f340 8258 	ble.w	9860 <tMBSawPulse_tick+0x540>
			if (p >= b) {
    93b0:	eeb4 8acb 	vcmpe.f32	s16, s22
    93b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    93b8:	f280 81ca 	bge.w	9750 <tMBSawPulse_tick+0x430>
    93bc:	eddf 5ae2 	vldr	s11, [pc, #904]	; 9748 <tMBSawPulse_tick+0x428>
			if (p >= 1.0f) {
    93c0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    93c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
    93c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    93cc:	f2c0 80c7 	blt.w	955e <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
    93d0:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
    93d2:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
    93d6:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    93da:	2b00      	cmp	r3, #0
    93dc:	f000 81f1 	beq.w	97c2 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
    93e0:	eddf 7ada 	vldr	s15, [pc, #872]	; 974c <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
    93e4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    93e8:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    93ec:	ee29 9a27 	vmul.f32	s18, s18, s15
		i = lrintf(r - 0.5f);
    93f0:	eea9 0a08 	vfma.f32	s0, s18, s16
    93f4:	f000 ffd4 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    93f8:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    93fc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9400:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9408:	eddf 5acf 	vldr	s11, [pc, #828]	; 9748 <tMBSawPulse_tick+0x428>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    940c:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    940e:	eed9 7a08 	vfnms.f32	s15, s18, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    9416:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    941a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    941e:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9422:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    9426:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    942a:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    942e:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    9432:	3301      	adds	r3, #1
    9434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9438:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    943c:	e08f      	b.n	955e <tMBSawPulse_tick+0x23e>
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
    943e:	ed94 9a05 	vldr	s18, [r4, #20]
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    9442:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    9446:	ee6b 7a89 	vmul.f32	s15, s23, s18
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    944a:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
    944e:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    9452:	ee37 7a87 	vadd.f32	s14, s15, s14
    9456:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    945a:	ee77 8a66 	vsub.f32	s17, s14, s13
    if (sync > 0.0f && c->softsync == 0)
    945e:	f040 864c 	bne.w	a0fa <tMBSawPulse_tick+0xdda>
        if (sw > 0) p = eof_offset;
    9462:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    9466:	4625      	mov	r5, r4
        Lfloat eof_offset = sync * sw;
    9468:	ee27 8a88 	vmul.f32	s16, s15, s16
        if (sw > 0) p = eof_offset;
    946c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        Lfloat p_at_reset = p - eof_offset;
    9470:	ee78 dac8 	vsub.f32	s27, s17, s16
        if (sw > 0) p = eof_offset;
    9474:	f340 8113 	ble.w	969e <tMBSawPulse_tick+0x37e>
		 if (!k)
    9478:	ee1c 3a90 	vmov	r3, s25
    947c:	2b00      	cmp	r3, #0
    947e:	f040 8202 	bne.w	9886 <tMBSawPulse_tick+0x566>
				 if (p_at_reset >= b)
    9482:	eeb4 baed 	vcmpe.f32	s22, s27
    9486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    948a:	f240 835b 	bls.w	9b44 <tMBSawPulse_tick+0x824>
    _tMBSawPulse* c = *osc;
    948e:	46a1      	mov	r9, r4
    if (c->active)
    9490:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
				 if (p_at_reset >= 1.0f)
    9494:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    9498:	eef4 dae8 	vcmpe.f32	s27, s17
    949c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    94a0:	f280 823d 	bge.w	991e <tMBSawPulse_tick+0x5fe>
    if (c->active)
    94a4:	b35b      	cbz	r3, 94fe <tMBSawPulse_tick+0x1de>
		r = MINBLEP_PHASES * phase * inv_w;
    94a6:	eddf 8aa9 	vldr	s17, [pc, #676]	; 974c <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
    94aa:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
    94ae:	ee6d da2d 	vmul.f32	s27, s26, s27
    94b2:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    94b6:	eea8 0a28 	vfma.f32	s0, s16, s17
    94ba:	f000 ff71 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    94be:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    94c2:	f8b9 306a 	ldrh.w	r3, [r9, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    94c6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    94ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    94ce:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    94d0:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    94d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    94d8:	eb09 0243 	add.w	r2, r9, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    94dc:	f8a9 306a 	strh.w	r3, [r9, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    94e0:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    94e4:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    94e8:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    94ec:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    94f0:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    94f4:	3301      	adds	r3, #1
    94f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    94fa:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
            if (k) {
    94fe:	f1b8 0f00 	cmp.w	r8, #0
    9502:	f040 83c0 	bne.w	9c86 <tMBSawPulse_tick+0x966>
			if (p >= b) {
    9506:	eeb4 bac8 	vcmpe.f32	s22, s16
    950a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    950e:	f200 81b2 	bhi.w	9876 <tMBSawPulse_tick+0x556>
    9512:	e0db      	b.n	96cc <tMBSawPulse_tick+0x3ac>
    sw = w * c->syncdir;
    9514:	ed94 9a05 	vldr	s18, [r4, #20]
    else if (!k)
    9518:	ee1c 3a90 	vmov	r3, s25
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    951c:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
    9520:	ee6b 7a89 	vmul.f32	s15, s23, s18
    Lfloat inv_sw = c->_inv_w * c->syncdir;
    9524:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
    9528:	eebd 8ae7 	vcvt.s32.f32	s16, s15
    952c:	ee37 7a27 	vadd.f32	s14, s14, s15
		if (sw > 0)
    9530:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
    9534:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    9538:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
    953c:	2b00      	cmp	r3, #0
    953e:	f43f af33 	beq.w	93a8 <tMBSawPulse_tick+0x88>
		if (sw > 0)
    9542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9546:	f340 8141 	ble.w	97cc <tMBSawPulse_tick+0x4ac>
			if (p >= 1.0f) {
    954a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    954e:	eeb4 8ae8 	vcmpe.f32	s16, s17
    9552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9556:	f280 80ac 	bge.w	96b2 <tMBSawPulse_tick+0x392>
    c->_k = k;
    955a:	eef8 5aec 	vcvt.f32.s32	s11, s25
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    955e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    9562:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
    9564:	ee2a 7a8c 	vmul.f32	s14, s21, s24
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    9568:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
    956c:	ee76 6ac8 	vsub.f32	s13, s13, s16
    c->_f[currentSamp] += (x * shape);//pulse
    9570:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    9574:	eea6 7a8d 	vfma.f32	s14, s13, s26
    9578:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
    957c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    9580:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    9584:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9588:	2b00      	cmp	r3, #0
    958a:	f000 8177 	beq.w	987c <tMBSawPulse_tick+0x55c>
    958e:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    9592:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    9596:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    959a:	2000      	movs	r0, #0
    959c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
    95a0:	4d68      	ldr	r5, [pc, #416]	; (9744 <tMBSawPulse_tick+0x424>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    95a2:	ebae 0300 	sub.w	r3, lr, r0
    95a6:	b29b      	uxth	r3, r3
    95a8:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
    95ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    95b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    95b4:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    95b8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    95bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    95c0:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    95c4:	b289      	uxth	r1, r1
    95c6:	f8bd 9006 	ldrh.w	r9, [sp, #6]
    95ca:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    95cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    95d0:	fa1f f888 	uxth.w	r8, r8
    95d4:	fa1f f989 	uxth.w	r9, r9
    95d8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    95dc:	eb04 0949 	add.w	r9, r4, r9, lsl #1
    95e0:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
    95e4:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
    95e8:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    95ec:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    95ee:	ed98 6a3c 	vldr	s12, [r8, #240]	; 0xf0
    95f2:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
    95f6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    95fa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    95fe:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
    9602:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    9606:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    9608:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    960c:	edd9 6a01 	vldr	s13, [r9, #4]
    9610:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    9614:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    9618:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    961c:	eee6 7a26 	vfma.f32	s15, s12, s13
    9620:	edd1 6a3d 	vldr	s13, [r1, #244]	; 0xf4
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    9624:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    9628:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
    962c:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
    962e:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
    9632:	d32e      	bcc.n	9692 <tMBSawPulse_tick+0x372>
			c->numBLEPs--;
    9634:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    9638:	3001      	adds	r0, #1
    963a:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
    963e:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    9640:	4282      	cmp	r2, r0
			c->numBLEPs--;
    9642:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    9646:	dcac      	bgt.n	95a2 <tMBSawPulse_tick+0x282>
    9648:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
    964c:	ee37 7a4a 	vsub.f32	s14, s14, s20
    return -c->out * c->gain;
    9650:	ed94 0abc 	vldr	s0, [r4, #752]	; 0x2f0
    z += 0.5f * (c->_f[j] - z); // LP filtering
    9654:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
    9658:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
    965a:	eef0 7a4a 	vmov.f32	s15, s20
    c->_p = p;
    965e:	ed84 8a08 	vstr	s16, [r4, #32]
    j = (j+1) & 7;
    9662:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
    9666:	edc4 ba09 	vstr	s23, [r4, #36]	; 0x24
    c->_b = b;
    966a:	ed84 ba0a 	vstr	s22, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z); // LP filtering
    966e:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
    9672:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    c->_j = j;
    9676:	63a6      	str	r6, [r4, #56]	; 0x38
    c->_k = k;
    9678:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    return -c->out * c->gain;
    967c:	ee20 0a67 	vnmul.f32	s0, s0, s15
    c->out = z;
    9680:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
    9684:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
    9688:	b002      	add	sp, #8
    968a:	ecbd 8b0e 	vpop	{d8-d14}
    968e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
    9692:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9696:	3001      	adds	r0, #1
    9698:	4283      	cmp	r3, r0
    969a:	dc82      	bgt.n	95a2 <tMBSawPulse_tick+0x282>
    969c:	e7d4      	b.n	9648 <tMBSawPulse_tick+0x328>
        else if (sw < 0) p = 1.0f - eof_offset;
    969e:	f100 81b4 	bmi.w	9a0a <tMBSawPulse_tick+0x6ea>
		 if (!k)
    96a2:	ee1c 3a90 	vmov	r3, s25
    96a6:	2b00      	cmp	r3, #0
    96a8:	f040 8129 	bne.w	98fe <tMBSawPulse_tick+0x5de>
    p += sw - (int)sw;
    96ac:	eeb0 8a68 	vmov.f32	s16, s17
    96b0:	e0e1      	b.n	9876 <tMBSawPulse_tick+0x556>
    _tMBSawPulse* c = *osc;
    96b2:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
    96b4:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
    96b8:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    96bc:	2b00      	cmp	r3, #0
    96be:	f040 80f3 	bne.w	98a8 <tMBSawPulse_tick+0x588>
			if (!k && p >= b) {
    96c2:	eeb4 bac8 	vcmpe.f32	s22, s16
    96c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    96ca:	d87a      	bhi.n	97c2 <tMBSawPulse_tick+0x4a2>
    _tMBSawPulse* c = *osc;
    96cc:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    96ce:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    96d2:	2b00      	cmp	r3, #0
    96d4:	f000 80e3 	beq.w	989e <tMBSawPulse_tick+0x57e>
		r = MINBLEP_PHASES * phase * inv_w;
    96d8:	eddf 8a1c 	vldr	s17, [pc, #112]	; 974c <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    96dc:	ee78 7a4b 	vsub.f32	s15, s16, s22
		i = lrintf(r - 0.5f);
    96e0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    96e4:	ee69 8a28 	vmul.f32	s17, s18, s17
    96e8:	eeb0 9a67 	vmov.f32	s18, s15
				x = -0.5f;
    96ec:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    96f0:	eea7 0aa8 	vfma.f32	s0, s15, s17
    96f4:	f000 fe54 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    96f8:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    96fc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9700:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9704:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9708:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    970a:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    970e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    9716:	ee99 7a28 	vfnms.f32	s14, s18, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    971a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    971e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    9722:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9726:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    972a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    972e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9732:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    9736:	3301      	adds	r3, #1
    9738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    973c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    9740:	e70d      	b.n	955e <tMBSawPulse_tick+0x23e>
    9742:	bf00      	nop
    9744:	240220c4 	.word	0x240220c4
    9748:	00000000 	.word	0x00000000
    974c:	42800000 	.word	0x42800000
    _tMBSawPulse* c = *osc;
    9750:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    9752:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    9756:	2b00      	cmp	r3, #0
    9758:	f000 80dc 	beq.w	9914 <tMBSawPulse_tick+0x5f4>
		r = MINBLEP_PHASES * phase * inv_w;
    975c:	ed5f 9a05 	vldr	s19, [pc, #-20]	; 974c <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    9760:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    9764:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    9768:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = -0.5f;
    976c:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    9770:	eea9 0aa8 	vfma.f32	s0, s19, s17
    9774:	f000 fe14 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    9778:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    977c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9780:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9784:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9788:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
    978a:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    978e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9792:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    9796:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    979a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    979e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    97a2:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    97a6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    97aa:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    97ae:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    97b2:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    97b6:	3301      	adds	r3, #1
    97b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    97bc:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    97c0:	e5fe      	b.n	93c0 <tMBSawPulse_tick+0xa0>
				x = 0.5f;
    97c2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			if (p < b) {
    97c6:	ed5f 5a20 	vldr	s11, [pc, #-128]	; 9748 <tMBSawPulse_tick+0x428>
    97ca:	e6c8      	b.n	955e <tMBSawPulse_tick+0x23e>
		else if (sw < 0)
    97cc:	f57f aec5 	bpl.w	955a <tMBSawPulse_tick+0x23a>
			if (p < b) {
    97d0:	eeb4 8acb 	vcmpe.f32	s16, s22
    97d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    97d8:	f100 80de 	bmi.w	9998 <tMBSawPulse_tick+0x678>
			if (p < 0.0f) {
    97dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    97e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    97e4:	f57f aeb9 	bpl.w	955a <tMBSawPulse_tick+0x23a>
    _tMBSawPulse* c = *osc;
    97e8:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
    97ea:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
    97ee:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
    97f2:	ee78 7a28 	vadd.f32	s15, s16, s17
    if (c->active)
    97f6:	2b00      	cmp	r3, #0
    97f8:	f000 83c7 	beq.w	9f8a <tMBSawPulse_tick+0xc6a>
		i = lrintf(r - 0.5f);
    97fc:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    9800:	ed5f 9a2e 	vldr	s19, [pc, #-184]	; 974c <tMBSawPulse_tick+0x42c>
		r = MINBLEP_PHASES * phase * inv_w;
    9804:	ee29 9a08 	vmul.f32	s18, s18, s16
				p += 1.0f;
    9808:	eeb0 8a67 	vmov.f32	s16, s15
		i = lrintf(r - 0.5f);
    980c:	eeb0 0a6a 	vmov.f32	s0, s21
    9810:	eea9 0a29 	vfma.f32	s0, s18, s19
    9814:	f000 fdc4 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    9818:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    981c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9820:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9828:	4acd      	ldr	r2, [pc, #820]	; (9b60 <tMBSawPulse_tick+0x840>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    982a:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    982c:	eef0 5a68 	vmov.f32	s11, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    9834:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
    9838:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    983c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    9840:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9844:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    9848:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    984c:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9850:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    9854:	3301      	adds	r3, #1
    9856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    985a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    985e:	e67e      	b.n	955e <tMBSawPulse_tick+0x23e>
			if (p < 0.0f) {
    9860:	eeb5 8a40 	vcmp.f32	s16, #0.0
    9864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9868:	d505      	bpl.n	9876 <tMBSawPulse_tick+0x556>
    986a:	eef5 7a40 	vcmp.f32	s15, #0.0
    986e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9872:	f100 8280 	bmi.w	9d76 <tMBSawPulse_tick+0xa56>
		 if (!k)
    9876:	eddf 5abb 	vldr	s11, [pc, #748]	; 9b64 <tMBSawPulse_tick+0x844>
    987a:	e670      	b.n	955e <tMBSawPulse_tick+0x23e>
    987c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
    9880:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    9884:	e6e2      	b.n	964c <tMBSawPulse_tick+0x32c>
				 if (p_at_reset >= 1.0f)
    9886:	eef4 dae9 	vcmpe.f32	s27, s19
    988a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    988e:	f280 8171 	bge.w	9b74 <tMBSawPulse_tick+0x854>
    _tMBSawPulse* c = *osc;
    9892:	46a1      	mov	r9, r4
    if (c->active)
    9894:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    9898:	ee1c 8a90 	vmov	r8, s25
    989c:	e602      	b.n	94a4 <tMBSawPulse_tick+0x184>
    989e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    98a2:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    98a6:	e65a      	b.n	955e <tMBSawPulse_tick+0x23e>
		r = MINBLEP_PHASES * phase * inv_w;
    98a8:	eddf 9ab1 	vldr	s19, [pc, #708]	; 9b70 <tMBSawPulse_tick+0x850>
		i = lrintf(r - 0.5f);
    98ac:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    98b0:	ee69 9a29 	vmul.f32	s19, s18, s19
    98b4:	eea9 0a88 	vfma.f32	s0, s19, s16
    98b8:	f000 fd72 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    98bc:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    98c0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    98c4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    98c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    98cc:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    98ce:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    98d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    98d6:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    98da:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    98de:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    98e2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    98e6:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    98ea:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    98ee:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    98f2:	3301      	adds	r3, #1
    98f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    98f8:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    98fc:	e6e1      	b.n	96c2 <tMBSawPulse_tick+0x3a2>
			 else if (sw < 0)
    98fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    9902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9906:	f100 8172 	bmi.w	9bee <tMBSawPulse_tick+0x8ce>
    c->_k = k;
    990a:	eef8 5aec 	vcvt.f32.s32	s11, s25
    p += sw - (int)sw;
    990e:	eeb0 8a68 	vmov.f32	s16, s17
    9912:	e624      	b.n	955e <tMBSawPulse_tick+0x23e>
    9914:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    9918:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    991c:	e550      	b.n	93c0 <tMBSawPulse_tick+0xa0>
					 p_at_reset -= 1.0f;
    991e:	ee7d dae8 	vsub.f32	s27, s27, s17
    if (c->active)
    9922:	2b00      	cmp	r3, #0
    9924:	f000 8118 	beq.w	9b58 <tMBSawPulse_tick+0x838>
		r = MINBLEP_PHASES * phase * inv_w;
    9928:	eddf 9a91 	vldr	s19, [pc, #580]	; 9b70 <tMBSawPulse_tick+0x850>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    992c:	ee78 aa2d 	vadd.f32	s21, s16, s27
		i = lrintf(r - 0.5f);
    9930:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    9934:	ee69 9a29 	vmul.f32	s19, s18, s19
    9938:	eeaa 0aa9 	vfma.f32	s0, s21, s19
    993c:	f000 fd30 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    9940:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9944:	f8b9 306a 	ldrh.w	r3, [r9, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9948:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    994c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9950:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    9952:	eeda 7aa9 	vfnms.f32	s15, s21, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
					 x = 0.5f;
    995a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->BLEPindices[c->mostRecentBLEP] = i;
    995e:	eb09 0243 	add.w	r2, r9, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9962:	f8a9 306a 	strh.w	r3, [r9, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    9966:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    996a:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    996e:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9972:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9976:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    997a:	3301      	adds	r3, #1
    997c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9980:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    9984:	f8d7 9000 	ldr.w	r9, [r7]
    if (c->active)
    9988:	f8d9 32f4 	ldr.w	r3, [r9, #756]	; 0x2f4
    998c:	2b00      	cmp	r3, #0
    998e:	f43f adba 	beq.w	9506 <tMBSawPulse_tick+0x1e6>
					 k = 0;
    9992:	f04f 0800 	mov.w	r8, #0
    9996:	e586      	b.n	94a6 <tMBSawPulse_tick+0x186>
    _tMBSawPulse* c = *osc;
    9998:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    999a:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
    999e:	ee1c 3a90 	vmov	r3, s25
    99a2:	2b00      	cmp	r3, #0
    99a4:	f000 8280 	beq.w	9ea8 <tMBSawPulse_tick+0xb88>
		r = MINBLEP_PHASES * phase * inv_w;
    99a8:	eddf 9a71 	vldr	s19, [pc, #452]	; 9b70 <tMBSawPulse_tick+0x850>
    99ac:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
    99b0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 0;
    99b4:	eddf ca6c 	vldr	s25, [pc, #432]	; 9b68 <tMBSawPulse_tick+0x848>
    99b8:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = 0.5f;
    99bc:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    99c0:	eea9 0aa8 	vfma.f32	s0, s19, s17
    99c4:	f000 fcec 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    99c8:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    99cc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    99d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    99d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    99d8:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    99da:	eed9 7aa8 	vfnms.f32	s15, s19, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    99de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    99e2:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    99e6:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    99ea:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    99ee:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    99f2:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    99f6:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    99fa:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    99fe:	3301      	adds	r3, #1
    9a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9a04:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    9a08:	e6e8      	b.n	97dc <tMBSawPulse_tick+0x4bc>
		 if (!k)
    9a0a:	ee1c 3a90 	vmov	r3, s25
        else if (sw < 0) p = 1.0f - eof_offset;
    9a0e:	ee39 eac8 	vsub.f32	s28, s19, s16
		 if (!k)
    9a12:	2b00      	cmp	r3, #0
    9a14:	f040 80ed 	bne.w	9bf2 <tMBSawPulse_tick+0x8d2>
				 if (p_at_reset < 0.0f)
    9a18:	eef5 da40 	vcmp.f32	s27, #0.0
    9a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9a20:	f140 8085 	bpl.w	9b2e <tMBSawPulse_tick+0x80e>
    if (c->active)
    9a24:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset += 1.0f;
    9a28:	ee7d daa9 	vadd.f32	s27, s27, s19
    if (c->active)
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	f040 82b4 	bne.w	9f9a <tMBSawPulse_tick+0xc7a>
				 if (k && p_at_reset < b)
    9a32:	eeb4 baed 	vcmpe.f32	s22, s27
    9a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9a3a:	f340 8354 	ble.w	a0e6 <tMBSawPulse_tick+0xdc6>
        else if (sw < 0) p = 1.0f - eof_offset;
    9a3e:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
    9a42:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    9a46:	2b00      	cmp	r3, #0
    9a48:	f000 8252 	beq.w	9ef0 <tMBSawPulse_tick+0xbd0>
		r = MINBLEP_PHASES * phase * inv_w;
    9a4c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    9a50:	eddf 9a47 	vldr	s19, [pc, #284]	; 9b70 <tMBSawPulse_tick+0x850>
		i = lrintf(r - 0.5f);
    9a54:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 1;
    9a58:	eddf ca44 	vldr	s25, [pc, #272]	; 9b6c <tMBSawPulse_tick+0x84c>
    9a5c:	ee69 9a29 	vmul.f32	s19, s18, s19
    9a60:	ee7e 8a68 	vsub.f32	s17, s28, s17
				x = -0.5f;
    9a64:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    9a68:	eea9 0aa8 	vfma.f32	s0, s19, s17
    9a6c:	f000 fc98 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    9a70:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9a74:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9a78:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9a7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9a80:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
    9a82:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9a86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    9a8a:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    9a8e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9a92:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    9a96:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9a9a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    9a9e:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9aa2:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9aa6:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    9aaa:	3301      	adds	r3, #1
    9aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9ab0:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (p < b) {
    9ab4:	eeb4 bace 	vcmpe.f32	s22, s28
    9ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9abc:	f77f ad4d 	ble.w	955a <tMBSawPulse_tick+0x23a>
    _tMBSawPulse* c = *osc;
    9ac0:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    9ac2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    9ac6:	2b00      	cmp	r3, #0
    9ac8:	f43f ae7b 	beq.w	97c2 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
    9acc:	eddf 8a28 	vldr	s17, [pc, #160]	; 9b70 <tMBSawPulse_tick+0x850>
    9ad0:	ee3e ea4b 	vsub.f32	s28, s28, s22
		i = lrintf(r - 0.5f);
    9ad4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    9ad8:	ee69 8a28 	vmul.f32	s17, s18, s17
				x = 0.5f;
    9adc:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    9ae0:	eea8 0a8e 	vfma.f32	s0, s17, s28
    9ae4:	f000 fc5c 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    9ae8:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9aec:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9af0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9af8:	eddf 5a1a 	vldr	s11, [pc, #104]	; 9b64 <tMBSawPulse_tick+0x844>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9afc:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    9afe:	eed8 7a8e 	vfnms.f32	s15, s17, s28
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    9b06:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9b0a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    9b0e:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9b12:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    9b16:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9b1a:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9b1e:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    9b22:	3301      	adds	r3, #1
    9b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9b28:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    9b2c:	e517      	b.n	955e <tMBSawPulse_tick+0x23e>
		else if (sw < 0)
    9b2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    9b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b36:	f100 81b4 	bmi.w	9ea2 <tMBSawPulse_tick+0xb82>
        else if (sw < 0) p = 1.0f - eof_offset;
    9b3a:	eeb0 8a4e 	vmov.f32	s16, s28
    9b3e:	eddf 5a09 	vldr	s11, [pc, #36]	; 9b64 <tMBSawPulse_tick+0x844>
    9b42:	e50c      	b.n	955e <tMBSawPulse_tick+0x23e>
    if (c->active)
    9b44:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
    9b48:	2b00      	cmp	r3, #0
    9b4a:	f040 8172 	bne.w	9e32 <tMBSawPulse_tick+0xb12>
				 if (p_at_reset >= 1.0f)
    9b4e:	eef4 dae9 	vcmpe.f32	s27, s19
    9b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b56:	db19      	blt.n	9b8c <tMBSawPulse_tick+0x86c>
				x = 0.5f;
    9b58:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    9b5c:	e4d3      	b.n	9506 <tMBSawPulse_tick+0x1e6>
    9b5e:	bf00      	nop
    9b60:	bf800000 	.word	0xbf800000
	...
    9b6c:	00000001 	.word	0x00000001
    9b70:	42800000 	.word	0x42800000
    if (c->active)
    9b74:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset -= 1.0f;
    9b78:	ee7d dae9 	vsub.f32	s27, s27, s19
    if (c->active)
    9b7c:	2b00      	cmp	r3, #0
    9b7e:	f040 8084 	bne.w	9c8a <tMBSawPulse_tick+0x96a>
				 if (!k && p_at_reset >= b)
    9b82:	eeb4 baed 	vcmpe.f32	s22, s27
    9b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9b8a:	d8e5      	bhi.n	9b58 <tMBSawPulse_tick+0x838>
    if (c->active)
    9b8c:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    9b90:	2b00      	cmp	r3, #0
    9b92:	d0e1      	beq.n	9b58 <tMBSawPulse_tick+0x838>
		r = MINBLEP_PHASES * phase * inv_w;
    9b94:	ed5f 8a0a 	vldr	s17, [pc, #-40]	; 9b70 <tMBSawPulse_tick+0x850>
		i = lrintf(r - 0.5f);
    9b98:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
    9b9c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    9ba0:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    9ba4:	eea8 0a28 	vfma.f32	s0, s16, s17
    9ba8:	f000 fbfa 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    9bac:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9bb0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9bb4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9bbc:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    9bbe:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9bc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    9bc6:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9bca:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    9bce:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9bd2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    9bd6:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9bda:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9bde:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    9be2:	3301      	adds	r3, #1
    9be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9be8:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    9bec:	e48b      	b.n	9506 <tMBSawPulse_tick+0x1e6>
    p += sw - (int)sw;
    9bee:	eeb0 ea68 	vmov.f32	s28, s17
				 if (p_at_reset < b)
    9bf2:	eeb4 baed 	vcmpe.f32	s22, s27
    9bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9bfa:	f300 8167 	bgt.w	9ecc <tMBSawPulse_tick+0xbac>
				 if (p_at_reset < 0.0f)
    9bfe:	eef5 dac0 	vcmpe.f32	s27, #0.0
    if (c->active)
    9c02:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (p_at_reset < 0.0f)
    9c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9c0a:	f100 8184 	bmi.w	9f16 <tMBSawPulse_tick+0xbf6>
        else if (sw < 0) p = 1.0f - eof_offset;
    9c0e:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
    9c12:	b38b      	cbz	r3, 9c78 <tMBSawPulse_tick+0x958>
		r = MINBLEP_PHASES * phase * inv_w;
    9c14:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    9c18:	ed5f 9a2b 	vldr	s19, [pc, #-172]	; 9b70 <tMBSawPulse_tick+0x850>
		i = lrintf(r - 0.5f);
    9c1c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    9c20:	ee69 9a29 	vmul.f32	s19, s18, s19
    9c24:	ee7e ea68 	vsub.f32	s29, s28, s17
    9c28:	eea9 0aae 	vfma.f32	s0, s19, s29
    9c2c:	f000 fbb8 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    9c30:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9c34:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    9c38:	ee7c 7a68 	vsub.f32	s15, s24, s17
		r -= (Lfloat)i;
    9c3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9c40:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9c44:	3301      	adds	r3, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
    9c46:	ee67 7aad 	vmul.f32	s15, s15, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    9c4e:	ee99 7aae 	vfnms.f32	s14, s19, s29
		c->BLEPindices[c->mostRecentBLEP] = i;
    9c52:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9c56:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    9c5a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9c5e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    9c62:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9c66:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9c6a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    9c6e:	3301      	adds	r3, #1
    9c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9c74:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (!k) {
    9c78:	ee1c 3a90 	vmov	r3, s25
    9c7c:	2b00      	cmp	r3, #0
    9c7e:	f47f af19 	bne.w	9ab4 <tMBSawPulse_tick+0x794>
    9c82:	683d      	ldr	r5, [r7, #0]
    9c84:	e6dd      	b.n	9a42 <tMBSawPulse_tick+0x722>
    9c86:	683d      	ldr	r5, [r7, #0]
    9c88:	e780      	b.n	9b8c <tMBSawPulse_tick+0x86c>
		i = lrintf(r - 0.5f);
    9c8a:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
    9c8e:	ed5f 8a48 	vldr	s17, [pc, #-288]	; 9b70 <tMBSawPulse_tick+0x850>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
    9c92:	ee78 aa2d 	vadd.f32	s21, s16, s27
    9c96:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
    9c9a:	eeb0 0a6c 	vmov.f32	s0, s25
    9c9e:	eeaa 0aa8 	vfma.f32	s0, s21, s17
    9ca2:	f000 fb7d 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    9ca6:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9caa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9cae:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9cb6:	3301      	adds	r3, #1
				 if (!k && p_at_reset >= b)
    9cb8:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    9cc0:	eeda 7aa8 	vfnms.f32	s15, s21, s17
				 if (!k && p_at_reset >= b)
    9cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
    9cc8:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9ccc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    9cd0:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9cd4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    9cd8:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9cdc:	edc2 9a3d 	vstr	s19, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9ce0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    9ce4:	f103 0301 	add.w	r3, r3, #1
    9ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9cec:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    9cf0:	f8d7 9000 	ldr.w	r9, [r7]
    9cf4:	464d      	mov	r5, r9
    if (c->active)
    9cf6:	f8d9 32f4 	ldr.w	r3, [r9, #756]	; 0x2f4
				 if (!k && p_at_reset >= b)
    9cfa:	f200 8105 	bhi.w	9f08 <tMBSawPulse_tick+0xbe8>
    if (c->active)
    9cfe:	2b00      	cmp	r3, #0
    9d00:	f43f af44 	beq.w	9b8c <tMBSawPulse_tick+0x86c>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    9d04:	ee78 9a4b 	vsub.f32	s19, s16, s22
		i = lrintf(r - 0.5f);
    9d08:	eeb0 0a6c 	vmov.f32	s0, s25
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    9d0c:	ee79 9aad 	vadd.f32	s19, s19, s27
		i = lrintf(r - 0.5f);
    9d10:	eea9 0aa8 	vfma.f32	s0, s19, s17
    9d14:	f000 fb44 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    9d18:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9d1c:	f8b9 306a 	ldrh.w	r3, [r9, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9d20:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9d24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9d28:	3301      	adds	r3, #1
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    9d2a:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    9d32:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
    9d36:	eb09 0243 	add.w	r2, r9, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9d3a:	f8a9 306a 	strh.w	r3, [r9, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    9d3e:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9d42:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    9d46:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9d4a:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9d4e:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    9d52:	3301      	adds	r3, #1
    9d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9d58:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    9d5c:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    9d5e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    _tMBSawPulse* c = *osc;
    9d62:	46a9      	mov	r9, r5
    if (c->active)
    9d64:	2b00      	cmp	r3, #0
    9d66:	f43f af11 	beq.w	9b8c <tMBSawPulse_tick+0x86c>
					 x = -0.5f;
    9d6a:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
					 k = 1;
    9d6e:	f04f 0801 	mov.w	r8, #1
    9d72:	f7ff bb98 	b.w	94a6 <tMBSawPulse_tick+0x186>
    _tMBSawPulse* c = *osc;
    9d76:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
    9d78:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
    9d7c:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
    9d80:	ee78 8a28 	vadd.f32	s17, s16, s17
    if (c->active)
    9d84:	b353      	cbz	r3, 9ddc <tMBSawPulse_tick+0xabc>
		r = MINBLEP_PHASES * phase * inv_w;
    9d86:	ee29 8a08 	vmul.f32	s16, s18, s16
		i = lrintf(r - 0.5f);
    9d8a:	ed5f 9a87 	vldr	s19, [pc, #-540]	; 9b70 <tMBSawPulse_tick+0x850>
    9d8e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    9d92:	eea8 0a29 	vfma.f32	s0, s16, s19
    9d96:	f000 fb03 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    9d9a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9d9e:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9da2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9daa:	4ad6      	ldr	r2, [pc, #856]	; (a104 <tMBSawPulse_tick+0xde4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9dac:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    9dae:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9db2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    9db6:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9dba:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    9dbe:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9dc2:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    9dc6:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9dca:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9dce:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    9dd2:	3301      	adds	r3, #1
    9dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9dd8:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (k && p < b) {
    9ddc:	eeb4 bae8 	vcmpe.f32	s22, s17
    9de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9de4:	f340 8177 	ble.w	a0d6 <tMBSawPulse_tick+0xdb6>
    _tMBSawPulse* c = *osc;
    9de8:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    9dea:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    9dee:	2b00      	cmp	r3, #0
    9df0:	d064      	beq.n	9ebc <tMBSawPulse_tick+0xb9c>
		r = MINBLEP_PHASES * phase * inv_w;
    9df2:	eddf 7ac5 	vldr	s15, [pc, #788]	; a108 <tMBSawPulse_tick+0xde8>
    9df6:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
    9dfa:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    9dfe:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
    9e02:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9e06:	eeb0 8a68 	vmov.f32	s16, s17
		i = lrintf(r - 0.5f);
    9e0a:	eea9 0a29 	vfma.f32	s0, s18, s19
    9e0e:	f000 fac7 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    9e12:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9e16:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9e1a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9e22:	eddf 5aba 	vldr	s11, [pc, #744]	; a10c <tMBSawPulse_tick+0xdec>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9e26:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    9e28:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9e30:	e669      	b.n	9b06 <tMBSawPulse_tick+0x7e6>
		r = MINBLEP_PHASES * phase * inv_w;
    9e32:	eddf 9ab5 	vldr	s19, [pc, #724]	; a108 <tMBSawPulse_tick+0xde8>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    9e36:	ee78 8acb 	vsub.f32	s17, s17, s22
		i = lrintf(r - 0.5f);
    9e3a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
    9e3e:	f04f 0801 	mov.w	r8, #1
    9e42:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = -0.5f;
    9e46:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    9e4a:	eea8 0aa9 	vfma.f32	s0, s17, s19
    9e4e:	f000 faa7 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    9e52:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9e56:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9e5a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9e5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9e62:	4443      	add	r3, r8
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
    9e64:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    9e6c:	ee98 7aa9 	vfnms.f32	s14, s17, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
    9e70:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9e74:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    9e78:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9e7c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    9e80:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9e84:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9e88:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    9e8c:	4443      	add	r3, r8
    9e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9e92:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    9e96:	f8d7 9000 	ldr.w	r9, [r7]
    if (c->active)
    9e9a:	f8d9 32f4 	ldr.w	r3, [r9, #756]	; 0x2f4
    9e9e:	f7ff baf9 	b.w	9494 <tMBSawPulse_tick+0x174>
    9ea2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    9ea6:	e6b2      	b.n	9c0e <tMBSawPulse_tick+0x8ee>
			if (p < 0.0f) {
    9ea8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    9eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9eb0:	f100 8109 	bmi.w	a0c6 <tMBSawPulse_tick+0xda6>
				x = 0.5f;
    9eb4:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    9eb8:	f7ff bb4f 	b.w	955a <tMBSawPulse_tick+0x23a>
				x = 0.5f;
    9ebc:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    9ec0:	eddf 5a92 	vldr	s11, [pc, #584]	; a10c <tMBSawPulse_tick+0xdec>
    9ec4:	eeb0 8a68 	vmov.f32	s16, s17
    9ec8:	f7ff bb49 	b.w	955e <tMBSawPulse_tick+0x23e>
    if (c->active)
    9ecc:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
    9ed0:	ee1c 3a90 	vmov	r3, s25
    9ed4:	2b00      	cmp	r3, #0
    9ed6:	f040 80bd 	bne.w	a054 <tMBSawPulse_tick+0xd34>
				 if (p_at_reset < 0.0f)
    9eda:	eef5 dac0 	vcmpe.f32	s27, #0.0
    9ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9ee2:	f100 80e9 	bmi.w	a0b8 <tMBSawPulse_tick+0xd98>
					 x = 0.5f;
    9ee6:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        else if (sw < 0) p = 1.0f - eof_offset;
    9eea:	eeb0 8a4e 	vmov.f32	s16, s28
    9eee:	e6c3      	b.n	9c78 <tMBSawPulse_tick+0x958>
			if (p < b) {
    9ef0:	eeb4 bace 	vcmpe.f32	s22, s28
    9ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9ef8:	f73f ac63 	bgt.w	97c2 <tMBSawPulse_tick+0x4a2>
				x = -0.5f;
    9efc:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				k = 1;
    9f00:	eddf ca83 	vldr	s25, [pc, #524]	; a110 <tMBSawPulse_tick+0xdf0>
    9f04:	f7ff bb29 	b.w	955a <tMBSawPulse_tick+0x23a>
    if (c->active)
    9f08:	2b00      	cmp	r3, #0
    9f0a:	f43f ae25 	beq.w	9b58 <tMBSawPulse_tick+0x838>
    9f0e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    9f12:	f7ff bac8 	b.w	94a6 <tMBSawPulse_tick+0x186>
					 p_at_reset += 1.0f;
    9f16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9f1a:	ee7d daa7 	vadd.f32	s27, s27, s15
    if (c->active)
    9f1e:	2b00      	cmp	r3, #0
    9f20:	f000 80ca 	beq.w	a0b8 <tMBSawPulse_tick+0xd98>
		r = MINBLEP_PHASES * phase * inv_w;
    9f24:	ed9f 8a78 	vldr	s16, [pc, #480]	; a108 <tMBSawPulse_tick+0xde8>
		i = lrintf(r - 0.5f);
    9f28:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
    9f2c:	eddf ca78 	vldr	s25, [pc, #480]	; a110 <tMBSawPulse_tick+0xdf0>
    9f30:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = -0.5f;
    9f34:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
    9f38:	eea8 0a28 	vfma.f32	s0, s16, s17
    9f3c:	f000 fa30 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    9f40:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9f44:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9f48:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9f50:	4a6c      	ldr	r2, [pc, #432]	; (a104 <tMBSawPulse_tick+0xde4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9f52:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    9f54:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    9f5c:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9f60:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    9f64:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9f68:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
    9f6c:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9f70:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9f74:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    9f78:	3301      	adds	r3, #1
    9f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9f7e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    9f82:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    9f84:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
    9f88:	e641      	b.n	9c0e <tMBSawPulse_tick+0x8ee>
				x = -0.5f;
    9f8a:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
    9f8e:	eeb0 8a67 	vmov.f32	s16, s15
    9f92:	eef0 5a68 	vmov.f32	s11, s17
    9f96:	f7ff bae2 	b.w	955e <tMBSawPulse_tick+0x23e>
		r = MINBLEP_PHASES * phase * inv_w;
    9f9a:	eddf 9a5b 	vldr	s19, [pc, #364]	; a108 <tMBSawPulse_tick+0xde8>
		i = lrintf(r - 0.5f);
    9f9e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    9fa2:	ee69 9a29 	vmul.f32	s19, s18, s19
    9fa6:	eea9 0aa8 	vfma.f32	s0, s19, s17
    9faa:	f000 f9f9 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    9fae:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9fb2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    9fb6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    9fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9fbe:	4a51      	ldr	r2, [pc, #324]	; (a104 <tMBSawPulse_tick+0xde4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9fc0:	3301      	adds	r3, #1
				 if (k && p_at_reset < b)
    9fc2:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9fc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (Lfloat)i;
    9fca:	eed9 7aa8 	vfnms.f32	s15, s19, s17
				 if (k && p_at_reset < b)
    9fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
    9fd2:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    9fd6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    9fda:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    9fde:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    9fe2:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    9fe6:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    9fea:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    9fee:	f103 0301 	add.w	r3, r3, #1
    9ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9ff6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    9ffa:	683d      	ldr	r5, [r7, #0]
    if (c->active)
    9ffc:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (k && p_at_reset < b)
    a000:	dd76      	ble.n	a0f0 <tMBSawPulse_tick+0xdd0>
    if (c->active)
    a002:	2b00      	cmp	r3, #0
    a004:	f43f ad1b 	beq.w	9a3e <tMBSawPulse_tick+0x71e>
		r = MINBLEP_PHASES * phase * inv_w;
    a008:	ee38 8a4b 	vsub.f32	s16, s16, s22
		i = lrintf(r - 0.5f);
    a00c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
    a010:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    a014:	ee38 8a2d 	vadd.f32	s16, s16, s27
		i = lrintf(r - 0.5f);
    a018:	eea8 0a29 	vfma.f32	s0, s16, s19
    a01c:	f000 f9c0 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    a020:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a024:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a028:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a02c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a030:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    a032:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    a03a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a03e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a042:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a046:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    a04a:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a04e:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a052:	e78f      	b.n	9f74 <tMBSawPulse_tick+0xc54>
		r = MINBLEP_PHASES * phase * inv_w;
    a054:	ed9f 8a2c 	vldr	s16, [pc, #176]	; a108 <tMBSawPulse_tick+0xde8>
    a058:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
    a05c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
    a060:	ee0c 8a90 	vmov	s25, r8
    a064:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = 0.5f;
    a068:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
    a06c:	eea9 0a88 	vfma.f32	s0, s19, s16
    a070:	f000 f996 	bl	a3a0 <__lrintf_veneer>
		r -= (Lfloat)i;
    a074:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a078:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
    a07c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (Lfloat)i;
    a080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a084:	3301      	adds	r3, #1
		r -= (Lfloat)i;
    a086:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a08a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
    a08e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
    a092:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
    a096:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
    a09a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    a09e:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
    a0a2:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
    a0a6:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
    a0aa:	3301      	adds	r3, #1
    a0ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a0b0:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
    a0b4:	683d      	ldr	r5, [r7, #0]
    a0b6:	e5a2      	b.n	9bfe <tMBSawPulse_tick+0x8de>
				k = 1;
    a0b8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    a0bc:	eddf ca14 	vldr	s25, [pc, #80]	; a110 <tMBSawPulse_tick+0xdf0>
    a0c0:	eeb0 8a4e 	vmov.f32	s16, s28
    a0c4:	e4f6      	b.n	9ab4 <tMBSawPulse_tick+0x794>
				p += 1.0f;
    a0c6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
    a0ca:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
    a0ce:	ee38 8a25 	vadd.f32	s16, s16, s11
    if (c->active)
    a0d2:	f7ff ba44 	b.w	955e <tMBSawPulse_tick+0x23e>
    a0d6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    a0da:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    a0de:	eeb0 8a68 	vmov.f32	s16, s17
    a0e2:	f7ff ba3c 	b.w	955e <tMBSawPulse_tick+0x23e>
				 if (k && p_at_reset < b)
    a0e6:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    a0ea:	eddf ca09 	vldr	s25, [pc, #36]	; a110 <tMBSawPulse_tick+0xdf0>
    a0ee:	e6fc      	b.n	9eea <tMBSawPulse_tick+0xbca>
    a0f0:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
    a0f4:	eddf ca06 	vldr	s25, [pc, #24]	; a110 <tMBSawPulse_tick+0xdf0>
		else if (sw < 0)
    a0f8:	e589      	b.n	9c0e <tMBSawPulse_tick+0x8ee>
    p += sw - (int)sw;
    a0fa:	eeb0 8a68 	vmov.f32	s16, s17
    a0fe:	f7ff b94c 	b.w	939a <tMBSawPulse_tick+0x7a>
    a102:	bf00      	nop
    a104:	bf800000 	.word	0xbf800000
    a108:	42800000 	.word	0x42800000
    a10c:	00000000 	.word	0x00000000
    a110:	00000001 	.word	0x00000001
    a114:	f3af 8000 	nop.w
    a118:	f3af 8000 	nop.w
    a11c:	f3af 8000 	nop.w

0000a120 <tMBSawPulse_setFreq>:
    _tMBSawPulse* c = *osc;
    a120:	6803      	ldr	r3, [r0, #0]
    c->_inv_w = 1.0f / c->_w;
    a122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if ((f > 6000.0f) || (f < -6000.0f))
    a126:	eddf 6a14 	vldr	s13, [pc, #80]	; a178 <tMBSawPulse_setFreq+0x58>
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    a12a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    if ((f > 6000.0f) || (f < -6000.0f))
    a12e:	eeb4 0ae6 	vcmpe.f32	s0, s13
    c->freq = f;
    a132:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    a136:	ee60 7a27 	vmul.f32	s15, s0, s15
    if ((f > 6000.0f) || (f < -6000.0f))
    a13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->_inv_w = 1.0f / c->_w;
    a13e:	ee87 6a27 	vdiv.f32	s12, s14, s15
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    a142:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
    a146:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
    a14a:	dc0c      	bgt.n	a166 <tMBSawPulse_setFreq+0x46>
    a14c:	eddf 7a0b 	vldr	s15, [pc, #44]	; a17c <tMBSawPulse_setFreq+0x5c>
    a150:	eeb4 0ae7 	vcmpe.f32	s0, s15
    a154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a158:	d405      	bmi.n	a166 <tMBSawPulse_setFreq+0x46>
    	c->active = 1;
    a15a:	2201      	movs	r2, #1
    a15c:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
    a160:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
    a164:	4770      	bx	lr
    	c->gain = 0.0f;
    a166:	ed9f 7a06 	vldr	s14, [pc, #24]	; a180 <tMBSawPulse_setFreq+0x60>
    	c->active = 0;
    a16a:	2200      	movs	r2, #0
    a16c:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
    a170:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
    a174:	4770      	bx	lr
    a176:	bf00      	nop
    a178:	45bb8000 	.word	0x45bb8000
    a17c:	c5bb8000 	.word	0xc5bb8000
    a180:	00000000 	.word	0x00000000
    a184:	f3af 8000 	nop.w
    a188:	f3af 8000 	nop.w
    a18c:	f3af 8000 	nop.w
    a190:	f3af 8000 	nop.w
    a194:	f3af 8000 	nop.w
    a198:	f3af 8000 	nop.w
    a19c:	f3af 8000 	nop.w

0000a1a0 <tMBSawPulse_sync>:
    _tMBSawPulse* c = *osc;
    a1a0:	6803      	ldr	r3, [r0, #0]
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    a1a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat last = c->lastsyncin;
    a1a6:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
    a1aa:	ed83 0a03 	vstr	s0, [r3, #12]
    Lfloat delta = value - last;
    a1ae:	ee30 6a67 	vsub.f32	s12, s0, s15
    Lfloat crossing = -last / delta;
    a1b2:	eef1 7a67 	vneg.f32	s15, s15
    a1b6:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
    a1ba:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    a1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1c2:	eef4 6ac7 	vcmpe.f32	s13, s14
    a1c6:	bfcc      	ite	gt
    a1c8:	2201      	movgt	r2, #1
    a1ca:	2200      	movle	r2, #0
    a1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1d0:	f002 0201 	and.w	r2, r2, #1
    a1d4:	bf88      	it	hi
    a1d6:	2200      	movhi	r2, #0
    a1d8:	b122      	cbz	r2, a1e4 <tMBSawPulse_sync+0x44>
    a1da:	eeb5 0a40 	vcmp.f32	s0, #0.0
    a1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1e2:	da04      	bge.n	a1ee <tMBSawPulse_sync+0x4e>
    else c->sync = 0.f;
    a1e4:	ed9f 7a05 	vldr	s14, [pc, #20]	; a1fc <tMBSawPulse_sync+0x5c>
    a1e8:	ed83 7a04 	vstr	s14, [r3, #16]
}
    a1ec:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
    a1ee:	ee37 7a66 	vsub.f32	s14, s14, s13
    a1f2:	ee27 7a06 	vmul.f32	s14, s14, s12
    a1f6:	ed83 7a04 	vstr	s14, [r3, #16]
}
    a1fa:	4770      	bx	lr
    a1fc:	00000000 	.word	0x00000000

0000a200 <__tSimpleLivingString3_setDampFreq_veneer>:
    a200:	f85f f000 	ldr.w	pc, [pc]	; a204 <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    a204:	24013739 	.word	0x24013739

0000a208 <__LEAF_shaper_veneer>:
    a208:	f85f f000 	ldr.w	pc, [pc]	; a20c <__LEAF_shaper_veneer+0x4>
    a20c:	240120e9 	.word	0x240120e9

0000a210 <__tSimpleLivingString3_setLevMode_veneer>:
    a210:	f85f f000 	ldr.w	pc, [pc]	; a214 <__tSimpleLivingString3_setLevMode_veneer+0x4>
    a214:	240137a5 	.word	0x240137a5

0000a218 <__tLivingString2_tick_veneer>:
    a218:	f85f f000 	ldr.w	pc, [pc]	; a21c <__tLivingString2_tick_veneer+0x4>
    a21c:	24013ff9 	.word	0x24013ff9

0000a220 <__tPBTriangle_setSkew_veneer>:
    a220:	f85f f000 	ldr.w	pc, [pc]	; a224 <__tPBTriangle_setSkew_veneer+0x4>
    a224:	24012a6d 	.word	0x24012a6d

0000a228 <__fasterexpf_veneer>:
    a228:	f85f f000 	ldr.w	pc, [pc]	; a22c <__fasterexpf_veneer+0x4>
    a22c:	24012089 	.word	0x24012089

0000a230 <__tTriLFO_setPhase_veneer>:
    a230:	f85f f000 	ldr.w	pc, [pc]	; a234 <__tTriLFO_setPhase_veneer+0x4>
    a234:	24013205 	.word	0x24013205

0000a238 <__tSimpleLivingString3_setTargetLev_veneer>:
    a238:	f85f f000 	ldr.w	pc, [pc]	; a23c <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    a23c:	2401378d 	.word	0x2401378d

0000a240 <__tPBSawSquare_setShape_veneer>:
    a240:	f85f f000 	ldr.w	pc, [pc]	; a244 <__tPBSawSquare_setShape_veneer+0x4>
    a244:	24012c1d 	.word	0x24012c1d

0000a248 <__tLivingString2_setPickPos_veneer>:
    a248:	f85f f000 	ldr.w	pc, [pc]	; a24c <__tLivingString2_setPickPos_veneer+0x4>
    a24c:	24013e29 	.word	0x24013e29

0000a250 <__setEffectsFunctions_veneer>:
    a250:	f85f f000 	ldr.w	pc, [pc]	; a254 <__setEffectsFunctions_veneer+0x4>
    a254:	240029b1 	.word	0x240029b1

0000a258 <__tSawSquareLFO_setPhase_veneer>:
    a258:	f85f f000 	ldr.w	pc, [pc]	; a25c <__tSawSquareLFO_setPhase_veneer+0x4>
    a25c:	240130f9 	.word	0x240130f9

0000a260 <__arm_fir_interpolate_f32_veneer>:
    a260:	f85f f000 	ldr.w	pc, [pc]	; a264 <__arm_fir_interpolate_f32_veneer+0x4>
    a264:	240144c9 	.word	0x240144c9

0000a268 <__fasterdbtoa_veneer>:
    a268:	f85f f000 	ldr.w	pc, [pc]	; a26c <__fasterdbtoa_veneer+0x4>
    a26c:	24012679 	.word	0x24012679

0000a270 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    a270:	f85f f000 	ldr.w	pc, [pc]	; a274 <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    a274:	24013795 	.word	0x24013795

0000a278 <__LEAF_tanh_veneer>:
    a278:	f85f f000 	ldr.w	pc, [pc]	; a27c <__LEAF_tanh_veneer+0x4>
    a27c:	240121ad 	.word	0x240121ad

0000a280 <__tLivingString2_setDecay_veneer>:
    a280:	f85f f000 	ldr.w	pc, [pc]	; a284 <__tLivingString2_setDecay_veneer+0x4>
    a284:	24013f39 	.word	0x24013f39

0000a288 <__tVZFilter_setGain_veneer>:
    a288:	f85f f000 	ldr.w	pc, [pc]	; a28c <__tVZFilter_setGain_veneer+0x4>
    a28c:	24011189 	.word	0x24011189

0000a290 <__setFilterTypes_veneer>:
    a290:	f85f f000 	ldr.w	pc, [pc]	; a294 <__setFilterTypes_veneer+0x4>
    a294:	24002dd5 	.word	0x24002dd5

0000a298 <__tDiodeFilter_setFreqFast_veneer>:
    a298:	f85f f000 	ldr.w	pc, [pc]	; a29c <__tDiodeFilter_setFreqFast_veneer+0x4>
    a29c:	24011c65 	.word	0x24011c65

0000a2a0 <__tSimpleLivingString3_tick_veneer>:
    a2a0:	f85f f000 	ldr.w	pc, [pc]	; a2a4 <__tSimpleLivingString3_tick_veneer+0x4>
    a2a4:	24013909 	.word	0x24013909

0000a2a8 <__tCompressor_tick_veneer>:
    a2a8:	f85f f000 	ldr.w	pc, [pc]	; a2ac <__tCompressor_tick_veneer+0x4>
    a2ac:	240101f9 	.word	0x240101f9

0000a2b0 <__tCrusher_setSamplingRatio_veneer>:
    a2b0:	f85f f000 	ldr.w	pc, [pc]	; a2b4 <__tCrusher_setSamplingRatio_veneer+0x4>
    a2b4:	24010149 	.word	0x24010149

0000a2b8 <__HAL_I2C_Slave_Receive_IT_veneer>:
    a2b8:	f85f f000 	ldr.w	pc, [pc]	; a2bc <__HAL_I2C_Slave_Receive_IT_veneer+0x4>
    a2bc:	240069e9 	.word	0x240069e9

0000a2c0 <__tSineTriLFO_tick_veneer>:
    a2c0:	f85f f000 	ldr.w	pc, [pc]	; a2c4 <__tSineTriLFO_tick_veneer+0x4>
    a2c4:	240132b1 	.word	0x240132b1

0000a2c8 <__tDiodeFilter_tick_veneer>:
    a2c8:	f85f f000 	ldr.w	pc, [pc]	; a2cc <__tDiodeFilter_tick_veneer+0x4>
    a2cc:	24011535 	.word	0x24011535

0000a2d0 <__arm_fir_decimate_f32_veneer>:
    a2d0:	f85f f000 	ldr.w	pc, [pc]	; a2d4 <__arm_fir_decimate_f32_veneer+0x4>
    a2d4:	24014949 	.word	0x24014949

0000a2d8 <__faster_mtof_veneer>:
    a2d8:	f85f f000 	ldr.w	pc, [pc]	; a2dc <__faster_mtof_veneer+0x4>
    a2dc:	240125cd 	.word	0x240125cd

0000a2e0 <__tLivingString2_setLevMode_veneer>:
    a2e0:	f85f f000 	ldr.w	pc, [pc]	; a2e4 <__tLivingString2_setLevMode_veneer+0x4>
    a2e4:	24013fdd 	.word	0x24013fdd

0000a2e8 <__tSawSquareLFO_tick_veneer>:
    a2e8:	f85f f000 	ldr.w	pc, [pc]	; a2ec <__tSawSquareLFO_tick_veneer+0x4>
    a2ec:	2401302d 	.word	0x2401302d

0000a2f0 <__tVZFilter_setFreq_veneer>:
    a2f0:	f85f f000 	ldr.w	pc, [pc]	; a2f4 <__tVZFilter_setFreq_veneer+0x4>
    a2f4:	24010e9d 	.word	0x24010e9d

0000a2f8 <__HAL_RNG_GenerateRandomNumber_veneer>:
    a2f8:	f85f f000 	ldr.w	pc, [pc]	; a2fc <__HAL_RNG_GenerateRandomNumber_veneer+0x4>
    a2fc:	24009419 	.word	0x24009419

0000a300 <__tLivingString2_setTargetLev_veneer>:
    a300:	f85f f000 	ldr.w	pc, [pc]	; a304 <__tLivingString2_setTargetLev_veneer+0x4>
    a304:	24013f65 	.word	0x24013f65

0000a308 <__tSVF_tick_veneer>:
    a308:	f85f f000 	ldr.w	pc, [pc]	; a30c <__tSVF_tick_veneer+0x4>
    a30c:	24010899 	.word	0x24010899

0000a310 <__tVZFilter_tickEfficient_veneer>:
    a310:	f85f f000 	ldr.w	pc, [pc]	; a314 <__tVZFilter_tickEfficient_veneer+0x4>
    a314:	24010a91 	.word	0x24010a91

0000a318 <__tSineTriLFO_setFreq_veneer>:
    a318:	f85f f000 	ldr.w	pc, [pc]	; a31c <__tSineTriLFO_setFreq_veneer+0x4>
    a31c:	2401334d 	.word	0x2401334d

0000a320 <__tSimpleLivingString3_setDecay_veneer>:
    a320:	f85f f000 	ldr.w	pc, [pc]	; a324 <__tSimpleLivingString3_setDecay_veneer+0x4>
    a324:	24013741 	.word	0x24013741

0000a328 <__tIntPhasor_setFreq_veneer>:
    a328:	f85f f000 	ldr.w	pc, [pc]	; a32c <__tIntPhasor_setFreq_veneer+0x4>
    a32c:	24012d45 	.word	0x24012d45

0000a330 <__tLivingString2_setPrepPos_veneer>:
    a330:	f85f f000 	ldr.w	pc, [pc]	; a334 <__tLivingString2_setPrepPos_veneer+0x4>
    a334:	24013e4d 	.word	0x24013e4d

0000a338 <__tVZFilter_setResonance_veneer>:
    a338:	f85f f000 	ldr.w	pc, [pc]	; a33c <__tVZFilter_setResonance_veneer+0x4>
    a33c:	240111c1 	.word	0x240111c1

0000a340 <__tLadderFilter_setFreqFast_veneer>:
    a340:	f85f f000 	ldr.w	pc, [pc]	; a344 <__tLadderFilter_setFreqFast_veneer+0x4>
    a344:	24011fa5 	.word	0x24011fa5

0000a348 <__mtof_veneer>:
    a348:	f85f f000 	ldr.w	pc, [pc]	; a34c <__mtof_veneer+0x4>
    a34c:	24012579 	.word	0x24012579

0000a350 <__tCrusher_setQuality_veneer>:
    a350:	f85f f000 	ldr.w	pc, [pc]	; a354 <__tCrusher_setQuality_veneer+0x4>
    a354:	240100f5 	.word	0x240100f5

0000a358 <__tLivingString2_setPickupPos_veneer>:
    a358:	f85f f000 	ldr.w	pc, [pc]	; a35c <__tLivingString2_setPickupPos_veneer+0x4>
    a35c:	24013e71 	.word	0x24013e71

0000a360 <__tLinearDelay_setDelay_veneer>:
    a360:	f85f f000 	ldr.w	pc, [pc]	; a364 <__tLinearDelay_setDelay_veneer+0x4>
    a364:	2400fd2d 	.word	0x2400fd2d

0000a368 <__tPBSineTriangle_setShape_veneer>:
    a368:	f85f f000 	ldr.w	pc, [pc]	; a36c <__tPBSineTriangle_setShape_veneer+0x4>
    a36c:	24012b11 	.word	0x24012b11

0000a370 <__tCycle_tick_veneer>:
    a370:	f85f f000 	ldr.w	pc, [pc]	; a374 <__tCycle_tick_veneer+0x4>
    a374:	240129b5 	.word	0x240129b5

0000a378 <__tLivingString2_setBrightness_veneer>:
    a378:	f85f f000 	ldr.w	pc, [pc]	; a37c <__tLivingString2_setBrightness_veneer+0x4>
    a37c:	24013eb1 	.word	0x24013eb1

0000a380 <__tSimpleLivingString3_setLevStrength_veneer>:
    a380:	f85f f000 	ldr.w	pc, [pc]	; a384 <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    a384:	2401379d 	.word	0x2401379d

0000a388 <__tLivingString2_initToPool_veneer>:
    a388:	f85f f000 	ldr.w	pc, [pc]	; a38c <__tLivingString2_initToPool_veneer+0x4>
    a38c:	24013ac5 	.word	0x24013ac5

0000a390 <__tCycle_setFreq_veneer>:
    a390:	f85f f000 	ldr.w	pc, [pc]	; a394 <__tCycle_setFreq_veneer+0x4>
    a394:	24012a01 	.word	0x24012a01

0000a398 <__tSineTriLFO_setPhase_veneer>:
    a398:	f85f f000 	ldr.w	pc, [pc]	; a39c <__tSineTriLFO_setPhase_veneer+0x4>
    a39c:	2401337d 	.word	0x2401337d

0000a3a0 <__lrintf_veneer>:
    a3a0:	f85f f000 	ldr.w	pc, [pc]	; a3a4 <__lrintf_veneer+0x4>
    a3a4:	24015c59 	.word	0x24015c59

0000a3a8 <__tTriLFO_setFreq_veneer>:
    a3a8:	f85f f000 	ldr.w	pc, [pc]	; a3ac <__tTriLFO_setFreq_veneer+0x4>
    a3ac:	240131ed 	.word	0x240131ed

0000a3b0 <__tIntPhasor_setPhase_veneer>:
    a3b0:	f85f f000 	ldr.w	pc, [pc]	; a3b4 <__tIntPhasor_setPhase_veneer+0x4>
    a3b4:	24012d5d 	.word	0x24012d5d

0000a3b8 <__tDiodeFilter_setQ_veneer>:
    a3b8:	f85f f000 	ldr.w	pc, [pc]	; a3bc <__tDiodeFilter_setQ_veneer+0x4>
    a3bc:	24011ca5 	.word	0x24011ca5

0000a3c0 <__tSquareLFO_setPhase_veneer>:
    a3c0:	f85f f000 	ldr.w	pc, [pc]	; a3c4 <__tSquareLFO_setPhase_veneer+0x4>
    a3c4:	24012f81 	.word	0x24012f81

0000a3c8 <__tSquareLFO_tick_veneer>:
    a3c8:	f85f f000 	ldr.w	pc, [pc]	; a3cc <__tSquareLFO_tick_veneer+0x4>
    a3cc:	24012ec9 	.word	0x24012ec9

0000a3d0 <__tSimpleLivingString3_pluck_veneer>:
    a3d0:	f85f f000 	ldr.w	pc, [pc]	; a3d4 <__tSimpleLivingString3_pluck_veneer+0x4>
    a3d4:	240137b9 	.word	0x240137b9

0000a3d8 <__LEAF_poly_blep_veneer>:
    a3d8:	f85f f000 	ldr.w	pc, [pc]	; a3dc <__LEAF_poly_blep_veneer+0x4>
    a3dc:	24012435 	.word	0x24012435

0000a3e0 <__tSimpleLivingString3_setFreq_veneer>:
    a3e0:	f85f f000 	ldr.w	pc, [pc]	; a3e4 <__tSimpleLivingString3_setFreq_veneer+0x4>
    a3e4:	24013699 	.word	0x24013699

0000a3e8 <__tSawSquareLFO_setShape_veneer>:
    a3e8:	f85f f000 	ldr.w	pc, [pc]	; a3ec <__tSawSquareLFO_setShape_veneer+0x4>
    a3ec:	2401315d 	.word	0x2401315d

0000a3f0 <__tSimpleLivingString3_initToPool_veneer>:
    a3f0:	f85f f000 	ldr.w	pc, [pc]	; a3f4 <__tSimpleLivingString3_initToPool_veneer+0x4>
    a3f4:	240133b9 	.word	0x240133b9

0000a3f8 <__arm_sin_f32_veneer>:
    a3f8:	f85f f000 	ldr.w	pc, [pc]	; a3fc <__arm_sin_f32_veneer+0x4>
    a3fc:	24014cb9 	.word	0x24014cb9

0000a400 <__tSVF_setFreqFast_veneer>:
    a400:	f85f f000 	ldr.w	pc, [pc]	; a404 <__tSVF_setFreqFast_veneer+0x4>
    a404:	24010905 	.word	0x24010905

0000a408 <__tLivingString2_setPrepIndex_veneer>:
    a408:	f85f f000 	ldr.w	pc, [pc]	; a40c <__tLivingString2_setPrepIndex_veneer+0x4>
    a40c:	24013e95 	.word	0x24013e95

0000a410 <__powf_veneer>:
    a410:	f85f f000 	ldr.w	pc, [pc]	; a414 <__powf_veneer+0x4>
    a414:	240152f1 	.word	0x240152f1

0000a418 <__HAL_GPIO_WritePin_veneer>:
    a418:	f85f f000 	ldr.w	pc, [pc]	; a41c <__HAL_GPIO_WritePin_veneer+0x4>
    a41c:	240063f5 	.word	0x240063f5

0000a420 <__memcpy_veneer>:
    a420:	f85f f000 	ldr.w	pc, [pc]	; a424 <__memcpy_veneer+0x4>
    a424:	24014e61 	.word	0x24014e61

0000a428 <__tCrusher_setOperation_veneer>:
    a428:	f85f f000 	ldr.w	pc, [pc]	; a42c <__tCrusher_setOperation_veneer+0x4>
    a42c:	240100e1 	.word	0x240100e1

0000a430 <__tNoise_tick_veneer>:
    a430:	f85f f000 	ldr.w	pc, [pc]	; a434 <__tNoise_tick_veneer+0x4>
    a434:	24012c51 	.word	0x24012c51

0000a438 <__tCycle_setPhase_veneer>:
    a438:	f85f f000 	ldr.w	pc, [pc]	; a43c <__tCycle_setPhase_veneer+0x4>
    a43c:	24012a19 	.word	0x24012a19

0000a440 <__tLivingString2_setLevStrength_veneer>:
    a440:	f85f f000 	ldr.w	pc, [pc]	; a444 <__tLivingString2_setLevStrength_veneer+0x4>
    a444:	24013fb5 	.word	0x24013fb5

0000a448 <__tLadderFilter_tick_veneer>:
    a448:	f85f f000 	ldr.w	pc, [pc]	; a44c <__tLadderFilter_tick_veneer+0x4>
    a44c:	24011d55 	.word	0x24011d55

0000a450 <__LEAF_interpolation_linear_veneer>:
    a450:	f85f f000 	ldr.w	pc, [pc]	; a454 <__LEAF_interpolation_linear_veneer+0x4>
    a454:	24012551 	.word	0x24012551

0000a458 <__tCrusher_setRound_veneer>:
    a458:	f85f f000 	ldr.w	pc, [pc]	; a45c <__tCrusher_setRound_veneer+0x4>
    a45c:	24010141 	.word	0x24010141

0000a460 <__fastdbtoa_veneer>:
    a460:	f85f f000 	ldr.w	pc, [pc]	; a464 <__fastdbtoa_veneer+0x4>
    a464:	24012669 	.word	0x24012669

0000a468 <__tSimpleLivingString3_free_veneer>:
    a468:	f85f f000 	ldr.w	pc, [pc]	; a46c <__tSimpleLivingString3_free_veneer+0x4>
    a46c:	24013651 	.word	0x24013651

0000a470 <__tSawSquareLFO_setFreq_veneer>:
    a470:	f85f f000 	ldr.w	pc, [pc]	; a474 <__tSawSquareLFO_setFreq_veneer+0x4>
    a474:	240130b1 	.word	0x240130b1

0000a478 <__tHighpass_tick_veneer>:
    a478:	f85f f000 	ldr.w	pc, [pc]	; a47c <__tHighpass_tick_veneer+0x4>
    a47c:	24010a4d 	.word	0x24010a4d

0000a480 <__tLivingString2_setFreq_veneer>:
    a480:	f85f f000 	ldr.w	pc, [pc]	; a484 <__tLivingString2_setFreq_veneer+0x4>
    a484:	24013ded 	.word	0x24013ded

0000a488 <__tIntPhasor_tick_veneer>:
    a488:	f85f f000 	ldr.w	pc, [pc]	; a48c <__tIntPhasor_tick_veneer+0x4>
    a48c:	24012d25 	.word	0x24012d25

0000a490 <__tLadderFilter_setQ_veneer>:
    a490:	f85f f000 	ldr.w	pc, [pc]	; a494 <__tLadderFilter_setQ_veneer+0x4>
    a494:	24011fed 	.word	0x24011fed

0000a498 <__tLivingString2_setLevSmoothFactor_veneer>:
    a498:	f85f f000 	ldr.w	pc, [pc]	; a49c <__tLivingString2_setLevSmoothFactor_veneer+0x4>
    a49c:	24013f8d 	.word	0x24013f8d

0000a4a0 <__tVZFilter_setFreqFast_veneer>:
    a4a0:	f85f f000 	ldr.w	pc, [pc]	; a4a4 <__tVZFilter_setFreqFast_veneer+0x4>
    a4a4:	24010ecd 	.word	0x24010ecd

0000a4a8 <__tSVF_setQ_veneer>:
    a4a8:	f85f f000 	ldr.w	pc, [pc]	; a4ac <__tSVF_setQ_veneer+0x4>
    a4ac:	24010971 	.word	0x24010971

0000a4b0 <__tLinearDelay_tick_veneer>:
    a4b0:	f85f f000 	ldr.w	pc, [pc]	; a4b4 <__tLinearDelay_tick_veneer+0x4>
    a4b4:	2400fc35 	.word	0x2400fc35

0000a4b8 <__setLFOShapes_veneer>:
    a4b8:	f85f f000 	ldr.w	pc, [pc]	; a4bc <__setLFOShapes_veneer+0x4>
    a4bc:	24002f6d 	.word	0x24002f6d

0000a4c0 <__tExpSmooth_setValAndDest_veneer>:
    a4c0:	f85f f000 	ldr.w	pc, [pc]	; a4c4 <__tExpSmooth_setValAndDest_veneer+0x4>
    a4c4:	24010561 	.word	0x24010561

0000a4c8 <__LEAF_poly_blamp_veneer>:
    a4c8:	f85f f000 	ldr.w	pc, [pc]	; a4cc <__LEAF_poly_blamp_veneer+0x4>
    a4cc:	2401248d 	.word	0x2401248d

0000a4d0 <__tDiodeFilter_tickEfficient_veneer>:
    a4d0:	f85f f000 	ldr.w	pc, [pc]	; a4d4 <__tDiodeFilter_tickEfficient_veneer+0x4>
    a4d4:	240118cd 	.word	0x240118cd

0000a4d8 <__tSimpleLivingString3_setPickupPoint_veneer>:
    a4d8:	f85f f000 	ldr.w	pc, [pc]	; a4dc <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    a4dc:	24013abd 	.word	0x24013abd

0000a4e0 <__tSquareLFO_setPulseWidth_veneer>:
    a4e0:	f85f f000 	ldr.w	pc, [pc]	; a4e4 <__tSquareLFO_setPulseWidth_veneer+0x4>
    a4e4:	24012f41 	.word	0x24012f41

0000a4e8 <__tPBPulse_setWidth_veneer>:
    a4e8:	f85f f000 	ldr.w	pc, [pc]	; a4ec <__tPBPulse_setWidth_veneer+0x4>
    a4ec:	24012b69 	.word	0x24012b69

0000a4f0 <__tTriLFO_tick_veneer>:
    a4f0:	f85f f000 	ldr.w	pc, [pc]	; a4f4 <__tTriLFO_tick_veneer+0x4>
    a4f4:	240131b9 	.word	0x240131b9

0000a4f8 <__tLivingString2_free_veneer>:
    a4f8:	f85f f000 	ldr.w	pc, [pc]	; a4fc <__tLivingString2_free_veneer+0x4>
    a4fc:	24013d5d 	.word	0x24013d5d

0000a500 <__tCrusher_tick_veneer>:
    a500:	f85f f000 	ldr.w	pc, [pc]	; a504 <__tCrusher_tick_veneer+0x4>
    a504:	24010061 	.word	0x24010061

0000a508 <__tanhf_veneer>:
    a508:	f85f f000 	ldr.w	pc, [pc]	; a50c <__tanhf_veneer+0x4>
    a50c:	240158ad 	.word	0x240158ad

0000a510 <__tSineTriLFO_setShape_veneer>:
    a510:	f85f f000 	ldr.w	pc, [pc]	; a514 <__tSineTriLFO_setShape_veneer+0x4>
    a514:	240133ad 	.word	0x240133ad

0000a518 <__tSquareLFO_setFreq_veneer>:
    a518:	f85f f000 	ldr.w	pc, [pc]	; a51c <__tSquareLFO_setFreq_veneer+0x4>
    a51c:	24012f11 	.word	0x24012f11

0000a520 <__memset_veneer>:
    a520:	f85f f000 	ldr.w	pc, [pc]	; a524 <__memset_veneer+0x4>
    a524:	24014dfd 	.word	0x24014dfd
