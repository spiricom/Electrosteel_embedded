
Electrosteel_Daisy_Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  24000000  24000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0002b490  24000298  24000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab    00000000  2402b728  2402b728  0005c200  2**0
                  CONTENTS
  3 .exidx        00000000  2402b728  2402b728  0005c200  2**0
                  CONTENTS
  4 .ARM.attributes 0000002e  2402b728  2402b728  0005c200  2**0
                  CONTENTS, READONLY
  5 .init_array   00000004  2402b728  2402b728  0003b728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  2402b72c  2402b72c  0003b72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .sram1_bss    00040000  24040000  24040000  00060000  2**5
                  ALLOC
  8 .sram2_dma_bss 00000880  30000000  30000000  00060000  2**5
                  ALLOC
  9 .sram2_bss    00044580  30002000  30002000  00062000  2**5
                  ALLOC
 10 .sram3_bss    00000080  38000000  38000000  00060000  2**5
                  ALLOC
 11 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 12 .data         00000a1c  20000000  2402b730  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0001d814  20000a20  2402c14c  00060a20  2**3
                  ALLOC
 14 .itcmram      0000be00  00000400  2402c14c  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .sdram_bss    02000000  c0000000  c0000000  00060000  2**5
                  ALLOC
 16 .qspiflash_text 00000000  90040000  90040000  0005c22e  2**0
                  CONTENTS
 17 .qspiflash_data 00000000  90040000  90040000  0005c22e  2**0
                  CONTENTS
 18 .qspiflash_bss 00000000  90040000  90040000  0005c22e  2**0
                  CONTENTS
 19 .heap         00000000  2001e234  2001e234  0005c22e  2**0
                  CONTENTS
 20 .reserved_for_stack 00000000  2001e234  2001e234  0005c22e  2**0
                  CONTENTS
 21 .comment      00000043  00000000  00000000  0005c22e  2**0
                  CONTENTS, READONLY
 22 .debug_info   0009ba94  00000000  00000000  0005c271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_abbrev 0000bd69  00000000  00000000  000f7d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0005e400  00000000  00000000  00103a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00004460  00000000  00000000  00161e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_rnglists 0000a28b  00000000  00000000  001662ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macro  00046f1c  00000000  00000000  00170559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line   00089609  00000000  00000000  001b7475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_str    00177a24  00000000  00000000  00240a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_frame  0000f208  00000000  00000000  003b84a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

24000298 <__do_global_dtors_aux>:
24000298:	b510      	push	{r4, lr}
2400029a:	4c05      	ldr	r4, [pc, #20]	; (240002b0 <__do_global_dtors_aux+0x18>)
2400029c:	7823      	ldrb	r3, [r4, #0]
2400029e:	b933      	cbnz	r3, 240002ae <__do_global_dtors_aux+0x16>
240002a0:	4b04      	ldr	r3, [pc, #16]	; (240002b4 <__do_global_dtors_aux+0x1c>)
240002a2:	b113      	cbz	r3, 240002aa <__do_global_dtors_aux+0x12>
240002a4:	4804      	ldr	r0, [pc, #16]	; (240002b8 <__do_global_dtors_aux+0x20>)
240002a6:	f3af 8000 	nop.w
240002aa:	2301      	movs	r3, #1
240002ac:	7023      	strb	r3, [r4, #0]
240002ae:	bd10      	pop	{r4, pc}
240002b0:	20000a20 	.word	0x20000a20
240002b4:	00000000 	.word	0x00000000
240002b8:	0000c200 	.word	0x0000c200

240002bc <frame_dummy>:
240002bc:	b508      	push	{r3, lr}
240002be:	4b03      	ldr	r3, [pc, #12]	; (240002cc <frame_dummy+0x10>)
240002c0:	b11b      	cbz	r3, 240002ca <frame_dummy+0xe>
240002c2:	4903      	ldr	r1, [pc, #12]	; (240002d0 <frame_dummy+0x14>)
240002c4:	4803      	ldr	r0, [pc, #12]	; (240002d4 <frame_dummy+0x18>)
240002c6:	f3af 8000 	nop.w
240002ca:	bd08      	pop	{r3, pc}
240002cc:	00000000 	.word	0x00000000
240002d0:	20000a24 	.word	0x20000a24
240002d4:	0000c200 	.word	0x0000c200

240002d8 <strlen>:
240002d8:	4603      	mov	r3, r0
240002da:	f813 2b01 	ldrb.w	r2, [r3], #1
240002de:	2a00      	cmp	r2, #0
240002e0:	d1fb      	bne.n	240002da <strlen+0x2>
240002e2:	1a18      	subs	r0, r3, r0
240002e4:	3801      	subs	r0, #1
240002e6:	4770      	bx	lr

240002e8 <arm_atan2_f32>:
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
    if (x > 0.0f)
240002e8:	eef5 0ac0 	vcmpe.f32	s1, #0.0
{
240002ec:	4603      	mov	r3, r0
    if (x > 0.0f)
240002ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240002f2:	dc12      	bgt.n	2400031a <arm_atan2_f32+0x32>
    {
        *result=arm_atan_f32(y/x);
        return(ARM_MATH_SUCCESS);
    }
    if (x < 0.0f)
240002f4:	d450      	bmi.n	24000398 <arm_atan2_f32+0xb0>
               *result= PI;
            }
        }
        return(ARM_MATH_SUCCESS);
    }
    if (x == 0.0f)
240002f6:	eef5 0a40 	vcmp.f32	s1, #0.0
240002fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240002fe:	f040 8135 	bne.w	2400056c <arm_atan2_f32+0x284>
    {
        if (y > 0.0f)
24000302:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24000306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400030a:	f300 808e 	bgt.w	2400042a <arm_atan2_f32+0x142>
        {
            *result=PIHALFF32;
            return(ARM_MATH_SUCCESS);
        }
        if (y < 0.0f)
2400030e:	f140 812d 	bpl.w	2400056c <arm_atan2_f32+0x284>
        {
            *result=-PIHALFF32;
24000312:	4aac      	ldr	r2, [pc, #688]	; (240005c4 <arm_atan2_f32+0x2dc>)
            return(ARM_MATH_SUCCESS);
24000314:	2000      	movs	r0, #0
            *result=-PIHALFF32;
24000316:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
24000318:	4770      	bx	lr
        *result=arm_atan_f32(y/x);
2400031a:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
2400031e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24000322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000326:	f100 80a9 	bmi.w	2400047c <arm_atan2_f32+0x194>
   int sign=0;
2400032a:	2200      	movs	r2, #0
   if (x > 1.0f)
2400032c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24000330:	eef4 7ae6 	vcmpe.f32	s15, s13
24000334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24000338:	dd7b      	ble.n	24000432 <arm_atan2_f32+0x14a>
      x = 1.0f / x;
2400033a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
2400033e:	eddf 2aa2 	vldr	s5, [pc, #648]	; 240005c8 <arm_atan2_f32+0x2e0>
24000342:	ed9f 3aa2 	vldr	s6, [pc, #648]	; 240005cc <arm_atan2_f32+0x2e4>
24000346:	eddf 3aa2 	vldr	s7, [pc, #648]	; 240005d0 <arm_atan2_f32+0x2e8>
2400034a:	ed9f 4aa2 	vldr	s8, [pc, #648]	; 240005d4 <arm_atan2_f32+0x2ec>
2400034e:	eddf 4aa2 	vldr	s9, [pc, #648]	; 240005d8 <arm_atan2_f32+0x2f0>
24000352:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 240005dc <arm_atan2_f32+0x2f4>
24000356:	eddf 5aa2 	vldr	s11, [pc, #648]	; 240005e0 <arm_atan2_f32+0x2f8>
2400035a:	ed9f 6aa2 	vldr	s12, [pc, #648]	; 240005e4 <arm_atan2_f32+0x2fc>
2400035e:	eddf 6aa2 	vldr	s13, [pc, #648]	; 240005e8 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
24000362:	eddf 7aa2 	vldr	s15, [pc, #648]	; 240005ec <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
24000366:	eea7 3a22 	vfma.f32	s6, s14, s5
2400036a:	eee7 3a03 	vfma.f32	s7, s14, s6
2400036e:	eea7 4a23 	vfma.f32	s8, s14, s7
24000372:	eee7 4a04 	vfma.f32	s9, s14, s8
24000376:	eea7 5a24 	vfma.f32	s10, s14, s9
2400037a:	eee5 5a07 	vfma.f32	s11, s10, s14
2400037e:	eea7 6a25 	vfma.f32	s12, s14, s11
24000382:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
24000386:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
2400038a:	b10a      	cbz	r2, 24000390 <arm_atan2_f32+0xa8>
     res = -res;
2400038c:	eef1 7a67 	vneg.f32	s15, s15
        return(ARM_MATH_SUCCESS);
24000390:	2000      	movs	r0, #0
        *result=arm_atan_f32(y/x);
24000392:	edc3 7a00 	vstr	s15, [r3]
        return(ARM_MATH_SUCCESS);
24000396:	4770      	bx	lr
        if (y > 0.0f)
24000398:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2400039c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240003a0:	dd70      	ble.n	24000484 <arm_atan2_f32+0x19c>
           *result=arm_atan_f32(y/x) + PI;
240003a2:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
240003a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
240003aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240003ae:	f100 80d9 	bmi.w	24000564 <arm_atan2_f32+0x27c>
   int sign=0;
240003b2:	2200      	movs	r2, #0
   if (x > 1.0f)
240003b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240003b8:	eef4 7ae6 	vcmpe.f32	s15, s13
240003bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240003c0:	f340 80a8 	ble.w	24000514 <arm_atan2_f32+0x22c>
      x = 1.0f / x;
240003c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
240003c8:	eddf 2a7f 	vldr	s5, [pc, #508]	; 240005c8 <arm_atan2_f32+0x2e0>
240003cc:	ed9f 3a7f 	vldr	s6, [pc, #508]	; 240005cc <arm_atan2_f32+0x2e4>
240003d0:	eddf 3a7f 	vldr	s7, [pc, #508]	; 240005d0 <arm_atan2_f32+0x2e8>
240003d4:	ed9f 4a7f 	vldr	s8, [pc, #508]	; 240005d4 <arm_atan2_f32+0x2ec>
240003d8:	eddf 4a7f 	vldr	s9, [pc, #508]	; 240005d8 <arm_atan2_f32+0x2f0>
240003dc:	ed9f 5a7f 	vldr	s10, [pc, #508]	; 240005dc <arm_atan2_f32+0x2f4>
240003e0:	eddf 5a7f 	vldr	s11, [pc, #508]	; 240005e0 <arm_atan2_f32+0x2f8>
240003e4:	ed9f 6a7f 	vldr	s12, [pc, #508]	; 240005e4 <arm_atan2_f32+0x2fc>
240003e8:	eddf 6a7f 	vldr	s13, [pc, #508]	; 240005e8 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
240003ec:	eddf 7a7f 	vldr	s15, [pc, #508]	; 240005ec <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
240003f0:	eea7 3a22 	vfma.f32	s6, s14, s5
240003f4:	eee7 3a03 	vfma.f32	s7, s14, s6
240003f8:	eea7 4a23 	vfma.f32	s8, s14, s7
240003fc:	eee7 4a04 	vfma.f32	s9, s14, s8
24000400:	eea7 5a24 	vfma.f32	s10, s14, s9
24000404:	eee7 5a05 	vfma.f32	s11, s14, s10
24000408:	eea7 6a25 	vfma.f32	s12, s14, s11
2400040c:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
24000410:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
24000414:	b10a      	cbz	r2, 2400041a <arm_atan2_f32+0x132>
     res = -res;
24000416:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) + PI;
2400041a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 240005f0 <arm_atan2_f32+0x308>
        return(ARM_MATH_SUCCESS);
2400041e:	2000      	movs	r0, #0
           *result=arm_atan_f32(y/x) + PI;
24000420:	ee77 7a87 	vadd.f32	s15, s15, s14
24000424:	edc3 7a00 	vstr	s15, [r3]
24000428:	4770      	bx	lr
            *result=PIHALFF32;
2400042a:	4a72      	ldr	r2, [pc, #456]	; (240005f4 <arm_atan2_f32+0x30c>)
            return(ARM_MATH_SUCCESS);
2400042c:	2000      	movs	r0, #0
            *result=PIHALFF32;
2400042e:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
24000430:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
24000432:	ed9f 7a65 	vldr	s14, [pc, #404]	; 240005c8 <arm_atan2_f32+0x2e0>
24000436:	eddf 3a65 	vldr	s7, [pc, #404]	; 240005cc <arm_atan2_f32+0x2e4>
2400043a:	ed9f 4a65 	vldr	s8, [pc, #404]	; 240005d0 <arm_atan2_f32+0x2e8>
2400043e:	eee7 3a87 	vfma.f32	s7, s15, s14
24000442:	eddf 4a64 	vldr	s9, [pc, #400]	; 240005d4 <arm_atan2_f32+0x2ec>
24000446:	ed9f 5a64 	vldr	s10, [pc, #400]	; 240005d8 <arm_atan2_f32+0x2f0>
2400044a:	eddf 5a64 	vldr	s11, [pc, #400]	; 240005dc <arm_atan2_f32+0x2f4>
2400044e:	ed9f 6a64 	vldr	s12, [pc, #400]	; 240005e0 <arm_atan2_f32+0x2f8>
24000452:	eddf 6a64 	vldr	s13, [pc, #400]	; 240005e4 <arm_atan2_f32+0x2fc>
24000456:	ed9f 7a64 	vldr	s14, [pc, #400]	; 240005e8 <arm_atan2_f32+0x300>
2400045a:	eea7 4aa3 	vfma.f32	s8, s15, s7
2400045e:	eee7 4a84 	vfma.f32	s9, s15, s8
24000462:	eea7 5aa4 	vfma.f32	s10, s15, s9
24000466:	eee7 5a85 	vfma.f32	s11, s15, s10
2400046a:	eea7 6aa5 	vfma.f32	s12, s15, s11
2400046e:	eee7 6a86 	vfma.f32	s13, s15, s12
24000472:	eea7 7aa6 	vfma.f32	s14, s15, s13
24000476:	ee67 7a87 	vmul.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
2400047a:	e786      	b.n	2400038a <arm_atan2_f32+0xa2>
      x=-x;
2400047c:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
24000480:	2201      	movs	r2, #1
24000482:	e753      	b.n	2400032c <arm_atan2_f32+0x44>
        else if (y < 0.0f)
24000484:	d403      	bmi.n	2400048e <arm_atan2_f32+0x1a6>
               *result= PI;
24000486:	4a5c      	ldr	r2, [pc, #368]	; (240005f8 <arm_atan2_f32+0x310>)
        return(ARM_MATH_SUCCESS);
24000488:	2000      	movs	r0, #0
               *result= PI;
2400048a:	601a      	str	r2, [r3, #0]
2400048c:	4770      	bx	lr
           *result=arm_atan_f32(y/x) - PI;
2400048e:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
24000492:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24000496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2400049a:	f100 808f 	bmi.w	240005bc <arm_atan2_f32+0x2d4>
   int sign=0;
2400049e:	2200      	movs	r2, #0
   if (x > 1.0f)
240004a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240004a4:	eef4 7ae6 	vcmpe.f32	s15, s13
240004a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240004ac:	dd61      	ble.n	24000572 <arm_atan2_f32+0x28a>
      x = 1.0f / x;
240004ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
240004b2:	eddf 2a45 	vldr	s5, [pc, #276]	; 240005c8 <arm_atan2_f32+0x2e0>
240004b6:	ed9f 3a45 	vldr	s6, [pc, #276]	; 240005cc <arm_atan2_f32+0x2e4>
240004ba:	eddf 3a45 	vldr	s7, [pc, #276]	; 240005d0 <arm_atan2_f32+0x2e8>
240004be:	ed9f 4a45 	vldr	s8, [pc, #276]	; 240005d4 <arm_atan2_f32+0x2ec>
240004c2:	eddf 4a45 	vldr	s9, [pc, #276]	; 240005d8 <arm_atan2_f32+0x2f0>
240004c6:	ed9f 5a45 	vldr	s10, [pc, #276]	; 240005dc <arm_atan2_f32+0x2f4>
240004ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 240005e0 <arm_atan2_f32+0x2f8>
240004ce:	ed9f 6a45 	vldr	s12, [pc, #276]	; 240005e4 <arm_atan2_f32+0x2fc>
240004d2:	eddf 6a45 	vldr	s13, [pc, #276]	; 240005e8 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
240004d6:	eddf 7a45 	vldr	s15, [pc, #276]	; 240005ec <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
240004da:	eea7 3a22 	vfma.f32	s6, s14, s5
240004de:	eee7 3a03 	vfma.f32	s7, s14, s6
240004e2:	eea7 4a23 	vfma.f32	s8, s14, s7
240004e6:	eee7 4a04 	vfma.f32	s9, s14, s8
240004ea:	eea7 5a24 	vfma.f32	s10, s14, s9
240004ee:	eee7 5a05 	vfma.f32	s11, s14, s10
240004f2:	eea7 6a25 	vfma.f32	s12, s14, s11
240004f6:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
240004fa:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
240004fe:	b10a      	cbz	r2, 24000504 <arm_atan2_f32+0x21c>
     res = -res;
24000500:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) - PI;
24000504:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 240005f0 <arm_atan2_f32+0x308>
        return(ARM_MATH_SUCCESS);
24000508:	2000      	movs	r0, #0
           *result=arm_atan_f32(y/x) - PI;
2400050a:	ee77 7ac7 	vsub.f32	s15, s15, s14
2400050e:	edc3 7a00 	vstr	s15, [r3]
24000512:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
24000514:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 240005c8 <arm_atan2_f32+0x2e0>
24000518:	eddf 3a2c 	vldr	s7, [pc, #176]	; 240005cc <arm_atan2_f32+0x2e4>
2400051c:	ed9f 4a2c 	vldr	s8, [pc, #176]	; 240005d0 <arm_atan2_f32+0x2e8>
24000520:	eee7 3a87 	vfma.f32	s7, s15, s14
24000524:	eddf 4a2b 	vldr	s9, [pc, #172]	; 240005d4 <arm_atan2_f32+0x2ec>
24000528:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 240005d8 <arm_atan2_f32+0x2f0>
2400052c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 240005dc <arm_atan2_f32+0x2f4>
24000530:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 240005e0 <arm_atan2_f32+0x2f8>
24000534:	eddf 6a2b 	vldr	s13, [pc, #172]	; 240005e4 <arm_atan2_f32+0x2fc>
24000538:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 240005e8 <arm_atan2_f32+0x300>
2400053c:	eea7 4aa3 	vfma.f32	s8, s15, s7
24000540:	eee7 4a84 	vfma.f32	s9, s15, s8
24000544:	eea7 5aa4 	vfma.f32	s10, s15, s9
24000548:	eee7 5a85 	vfma.f32	s11, s15, s10
2400054c:	eea7 6aa5 	vfma.f32	s12, s15, s11
24000550:	eee7 6a86 	vfma.f32	s13, s15, s12
24000554:	eea7 7aa6 	vfma.f32	s14, s15, s13
24000558:	ee67 7a87 	vmul.f32	s15, s15, s14
   if (sign)
2400055c:	2a00      	cmp	r2, #0
2400055e:	f43f af5c 	beq.w	2400041a <arm_atan2_f32+0x132>
24000562:	e758      	b.n	24000416 <arm_atan2_f32+0x12e>
      x=-x;
24000564:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
24000568:	2201      	movs	r2, #1
2400056a:	e723      	b.n	240003b4 <arm_atan2_f32+0xcc>
        }
    }
    

    return(ARM_MATH_NANINF);
2400056c:	f06f 0003 	mvn.w	r0, #3

}
24000570:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
24000572:	ed9f 7a15 	vldr	s14, [pc, #84]	; 240005c8 <arm_atan2_f32+0x2e0>
24000576:	eddf 3a15 	vldr	s7, [pc, #84]	; 240005cc <arm_atan2_f32+0x2e4>
2400057a:	ed9f 4a15 	vldr	s8, [pc, #84]	; 240005d0 <arm_atan2_f32+0x2e8>
2400057e:	eee7 3a87 	vfma.f32	s7, s15, s14
24000582:	eddf 4a14 	vldr	s9, [pc, #80]	; 240005d4 <arm_atan2_f32+0x2ec>
24000586:	ed9f 5a14 	vldr	s10, [pc, #80]	; 240005d8 <arm_atan2_f32+0x2f0>
2400058a:	eddf 5a14 	vldr	s11, [pc, #80]	; 240005dc <arm_atan2_f32+0x2f4>
2400058e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 240005e0 <arm_atan2_f32+0x2f8>
24000592:	eddf 6a14 	vldr	s13, [pc, #80]	; 240005e4 <arm_atan2_f32+0x2fc>
24000596:	ed9f 7a14 	vldr	s14, [pc, #80]	; 240005e8 <arm_atan2_f32+0x300>
2400059a:	eea7 4aa3 	vfma.f32	s8, s15, s7
2400059e:	eee7 4a84 	vfma.f32	s9, s15, s8
240005a2:	eea7 5aa4 	vfma.f32	s10, s15, s9
240005a6:	eee7 5a85 	vfma.f32	s11, s15, s10
240005aa:	eea7 6aa5 	vfma.f32	s12, s15, s11
240005ae:	eee7 6a86 	vfma.f32	s13, s15, s12
240005b2:	eea7 7aa6 	vfma.f32	s14, s15, s13
240005b6:	ee67 7a87 	vmul.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
240005ba:	e7a0      	b.n	240004fe <arm_atan2_f32+0x216>
      x=-x;
240005bc:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
240005c0:	2201      	movs	r2, #1
240005c2:	e76d      	b.n	240004a0 <arm_atan2_f32+0x1b8>
240005c4:	bfc90fdb 	.word	0xbfc90fdb
240005c8:	bd0492a5 	.word	0xbd0492a5
240005cc:	3e0945e7 	.word	0x3e0945e7
240005d0:	be32b708 	.word	0xbe32b708
240005d4:	bca9fceb 	.word	0xbca9fceb
240005d8:	3e5d693c 	.word	0x3e5d693c
240005dc:	bb905643 	.word	0xbb905643
240005e0:	beaa65e5 	.word	0xbeaa65e5
240005e4:	b7c00cc9 	.word	0xb7c00cc9
240005e8:	3f800001 	.word	0x3f800001
240005ec:	3fc90fdb 	.word	0x3fc90fdb
240005f0:	40490fdb 	.word	0x40490fdb
240005f4:	3fc90fdb 	.word	0x3fc90fdb
240005f8:	40490fdb 	.word	0x40490fdb

240005fc <arm_cos_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
240005fc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
24000600:	ed9f 7a22 	vldr	s14, [pc, #136]	; 2400068c <arm_cos_f32+0x90>

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if (in < 0.0f)
24000604:	eddf 6a22 	vldr	s13, [pc, #136]	; 24000690 <arm_cos_f32+0x94>
  in = x * 0.159154943092f + 0.25f;
24000608:	eee0 7a07 	vfma.f32	s15, s0, s14
  if (in < 0.0f)
2400060c:	eeb4 0ae6 	vcmpe.f32	s0, s13
24000610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  n = (int32_t) in;
24000614:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  if (in < 0.0f)
24000618:	d504      	bpl.n	24000624 <arm_cos_f32+0x28>
  {
    n--;
2400061a:	ee17 3a10 	vmov	r3, s14
2400061e:	3b01      	subs	r3, #1
24000620:	ee07 3a10 	vmov	s14, r3
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
24000624:	eeb8 7ac7 	vcvt.f32.s32	s14, s14

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
24000628:	eddf 6a1a 	vldr	s13, [pc, #104]	; 24000694 <arm_cos_f32+0x98>
  in = in - (float32_t) n;
2400062c:	ee77 7ac7 	vsub.f32	s15, s15, s14
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
24000630:	ee67 7aa6 	vmul.f32	s15, s15, s13
  index = (uint16_t)findex;
24000634:	eebc 7ae7 	vcvt.u32.f32	s14, s15
24000638:	ee17 3a10 	vmov	r3, s14
2400063c:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
2400063e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24000642:	d21a      	bcs.n	2400067a <arm_cos_f32+0x7e>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
24000644:	ee07 3a10 	vmov	s14, r3

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];
24000648:	1c59      	adds	r1, r3, #1
  fract = findex - (float32_t) index;
2400064a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
2400064e:	ee37 0ac7 	vsub.f32	s0, s15, s14

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
24000652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  a = sinTable_f32[index];
24000656:	4a10      	ldr	r2, [pc, #64]	; (24000698 <arm_cos_f32+0x9c>)
  b = sinTable_f32[index+1];
24000658:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  cosVal = (1.0f - fract) * a + fract * b;
2400065c:	ee37 7a26 	vadd.f32	s14, s14, s13
  a = sinTable_f32[index];
24000660:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  cosVal = (1.0f - fract) * a + fract * b;
24000664:	ed91 6a00 	vldr	s12, [r1]
24000668:	edd2 6a00 	vldr	s13, [r2]
2400066c:	ee37 7a67 	vsub.f32	s14, s14, s15
24000670:	ee20 0a06 	vmul.f32	s0, s0, s12

  /* Return output value */
  return (cosVal);
}
24000674:	eea7 0a26 	vfma.f32	s0, s14, s13
24000678:	4770      	bx	lr
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
2400067a:	ee77 7ae6 	vsub.f32	s15, s15, s13
2400067e:	2101      	movs	r1, #1
24000680:	2300      	movs	r3, #0
24000682:	ed9f 7a06 	vldr	s14, [pc, #24]	; 2400069c <arm_cos_f32+0xa0>
24000686:	eeb0 0a67 	vmov.f32	s0, s15
2400068a:	e7e2      	b.n	24000652 <arm_cos_f32+0x56>
2400068c:	3e22f983 	.word	0x3e22f983
24000690:	bfc90fdb 	.word	0xbfc90fdb
24000694:	44000000 	.word	0x44000000
24000698:	2401bd7c 	.word	0x2401bd7c
2400069c:	00000000 	.word	0x00000000

240006a0 <arm_sin_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
240006a0:	eddf 7a21 	vldr	s15, [pc, #132]	; 24000728 <arm_sin_f32+0x88>
240006a4:	ee20 0a27 	vmul.f32	s0, s0, s15

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if (in < 0.0f)
240006a8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
  n = (int32_t) in;
240006ac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  if (in < 0.0f)
240006b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240006b4:	d504      	bpl.n	240006c0 <arm_sin_f32+0x20>
  {
    n--;
240006b6:	ee17 3a90 	vmov	r3, s15
240006ba:	3b01      	subs	r3, #1
240006bc:	ee07 3a90 	vmov	s15, r3
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
240006c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
240006c4:	eddf 6a19 	vldr	s13, [pc, #100]	; 2400072c <arm_sin_f32+0x8c>
  in = in - (float32_t) n;
240006c8:	ee30 0a67 	vsub.f32	s0, s0, s15
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
240006cc:	ee60 7a26 	vmul.f32	s15, s0, s13
  index = (uint16_t)findex;
240006d0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
240006d4:	ee17 3a10 	vmov	r3, s14
240006d8:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
240006da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
240006de:	d21a      	bcs.n	24000716 <arm_sin_f32+0x76>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
240006e0:	ee07 3a10 	vmov	s14, r3

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];
240006e4:	1c59      	adds	r1, r3, #1
  fract = findex - (float32_t) index;
240006e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240006ea:	ee37 0ac7 	vsub.f32	s0, s15, s14

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
240006ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  a = sinTable_f32[index];
240006f2:	4a0f      	ldr	r2, [pc, #60]	; (24000730 <arm_sin_f32+0x90>)
  b = sinTable_f32[index+1];
240006f4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  sinVal = (1.0f - fract) * a + fract * b;
240006f8:	ee37 7a26 	vadd.f32	s14, s14, s13
  a = sinTable_f32[index];
240006fc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  sinVal = (1.0f - fract) * a + fract * b;
24000700:	ed91 6a00 	vldr	s12, [r1]
24000704:	edd2 6a00 	vldr	s13, [r2]
24000708:	ee37 7a67 	vsub.f32	s14, s14, s15
2400070c:	ee20 0a06 	vmul.f32	s0, s0, s12

  /* Return output value */
  return (sinVal);
}
24000710:	eea7 0a26 	vfma.f32	s0, s14, s13
24000714:	4770      	bx	lr
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
24000716:	ee77 7ae6 	vsub.f32	s15, s15, s13
2400071a:	2101      	movs	r1, #1
2400071c:	2300      	movs	r3, #0
2400071e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24000734 <arm_sin_f32+0x94>
24000722:	eeb0 0a67 	vmov.f32	s0, s15
24000726:	e7e2      	b.n	240006ee <arm_sin_f32+0x4e>
24000728:	3e22f983 	.word	0x3e22f983
2400072c:	44000000 	.word	0x44000000
24000730:	2401bd7c 	.word	0x2401bd7c
24000734:	00000000 	.word	0x00000000

24000738 <dbToATableLookup>:
    uint32_t inAmpIndex = LEAF_clip (0, (in * atodbTableScalar) - atodbTableOffset, ATODB_TABLE_SIZE_MINUS_ONE);
    return atoDbTable[inAmpIndex];
}

float FORCE_INLINE dbToATableLookup(float in)
{
24000738:	b508      	push	{r3, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
2400073a:	4a19      	ldr	r2, [pc, #100]	; (240007a0 <dbToATableLookup+0x68>)
{
2400073c:	eef0 7a40 	vmov.f32	s15, s0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
24000740:	4b18      	ldr	r3, [pc, #96]	; (240007a4 <dbToATableLookup+0x6c>)
24000742:	edd2 0a00 	vldr	s1, [r2]
24000746:	ed93 7a00 	vldr	s14, [r3]
2400074a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 240007a8 <dbToATableLookup+0x70>
2400074e:	eed7 0a27 	vfnms.f32	s1, s14, s15
24000752:	ed9f 0a16 	vldr	s0, [pc, #88]	; 240007ac <dbToATableLookup+0x74>
24000756:	f014 f823 	bl	240147a0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
2400075a:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    if (inDBIndexPlusOne > DBTOA_TABLE_SIZE_MINUS_ONE)
    {
    	inDBIndexPlusOne = DBTOA_TABLE_SIZE_MINUS_ONE;
    }
    float alpha = floatIndex - (float)inDBIndex;
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
2400075e:	f643 70ff 	movw	r0, #16383	; 0x3fff
24000762:	4a13      	ldr	r2, [pc, #76]	; (240007b0 <dbToATableLookup+0x78>)
24000764:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    uint32_t inDBIndex = (uint32_t) floatIndex;
24000768:	ee17 3a10 	vmov	r3, s14
    float alpha = floatIndex - (float)inDBIndex;
2400076c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
24000770:	1c59      	adds	r1, r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
24000772:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24000776:	ee77 7ac0 	vsub.f32	s15, s15, s0
2400077a:	4281      	cmp	r1, r0
    float alpha = floatIndex - (float)inDBIndex;
2400077c:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
24000780:	bf28      	it	cs
24000782:	4601      	movcs	r1, r0
24000784:	ee77 7a87 	vadd.f32	s15, s15, s14
24000788:	ed93 7a00 	vldr	s14, [r3]
2400078c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24000790:	edd2 6a00 	vldr	s13, [r2]
24000794:	ee20 0a26 	vmul.f32	s0, s0, s13
}
24000798:	eea7 0a27 	vfma.f32	s0, s14, s15
2400079c:	bd08      	pop	{r3, pc}
2400079e:	bf00      	nop
240007a0:	200011a8 	.word	0x200011a8
240007a4:	200011ac 	.word	0x200011ac
240007a8:	467ffc00 	.word	0x467ffc00
240007ac:	00000000 	.word	0x00000000
240007b0:	30002000 	.word	0x30002000

240007b4 <mtofTableLookup>:
}



float FORCE_INLINE mtofTableLookup(float tempMIDI)
{
240007b4:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
240007b8:	ed9f 1a16 	vldr	s2, [pc, #88]	; 24000814 <mtofTableLookup+0x60>
240007bc:	ed9f 0a16 	vldr	s0, [pc, #88]	; 24000818 <mtofTableLookup+0x64>
{
240007c0:	b508      	push	{r3, lr}
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
240007c2:	f013 ffed 	bl	240147a0 <LEAF_clip>
240007c6:	eddf 6a15 	vldr	s13, [pc, #84]	; 2400081c <mtofTableLookup+0x68>
240007ca:	eddf 7a15 	vldr	s15, [pc, #84]	; 24000820 <mtofTableLookup+0x6c>
	int tempIndexI = (int)tempIndexF;
	tempIndexF = tempIndexF -tempIndexI;
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
240007ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
240007d2:	4a14      	ldr	r2, [pc, #80]	; (24000824 <mtofTableLookup+0x70>)
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
240007d4:	eee0 7a26 	vfma.f32	s15, s0, s13
	int tempIndexI = (int)tempIndexF;
240007d8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
240007dc:	ee37 7a67 	vsub.f32	s14, s14, s15
	int tempIndexI = (int)tempIndexF;
240007e0:	ee16 3a90 	vmov	r3, s13
	tempIndexF = tempIndexF -tempIndexI;
240007e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
240007e8:	1c59      	adds	r1, r3, #1
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
240007ea:	f3c3 030e 	ubfx	r3, r3, #0, #15
	tempIndexF = tempIndexF -tempIndexI;
240007ee:	ee37 0ae6 	vsub.f32	s0, s15, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
240007f2:	f3c1 010e 	ubfx	r1, r1, #0, #15
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
240007f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
240007fa:	ee37 7a26 	vadd.f32	s14, s14, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
240007fe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
24000802:	edd3 7a00 	vldr	s15, [r3]
24000806:	edd2 6a00 	vldr	s13, [r2]
2400080a:	ee20 0a26 	vmul.f32	s0, s0, s13
}
2400080e:	eea7 0a27 	vfma.f32	s0, s14, s15
24000812:	bd08      	pop	{r3, pc}
24000814:	43230000 	.word	0x43230000
24000818:	c3230000 	.word	0xc3230000
2400081c:	42c80000 	.word	0x42c80000
24000820:	46800000 	.word	0x46800000
24000824:	30022000 	.word	0x30022000

24000828 <audioInit>:


void audioInit()
{
24000828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
2400082c:	4d91      	ldr	r5, [pc, #580]	; (24000a74 <audioInit+0x24c>)
2400082e:	f64e 2260 	movw	r2, #60000	; 0xea60
24000832:	ed9f 0a91 	vldr	s0, [pc, #580]	; 24000a78 <audioInit+0x250>
24000836:	4628      	mov	r0, r5
24000838:	4990      	ldr	r1, [pc, #576]	; (24000a7c <audioInit+0x254>)
2400083a:	4b91      	ldr	r3, [pc, #580]	; (24000a80 <audioInit+0x258>)
2400083c:	4c91      	ldr	r4, [pc, #580]	; (24000a84 <audioInit+0x25c>)
{
2400083e:	ed2d 8b04 	vpush	{d8-d9}
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
24000842:	f019 f819 	bl	24019878 <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
24000846:	462b      	mov	r3, r5
24000848:	f44f 2280 	mov.w	r2, #262144	; 0x40000
2400084c:	498e      	ldr	r1, [pc, #568]	; (24000a88 <audioInit+0x260>)
2400084e:	488f      	ldr	r0, [pc, #572]	; (24000a8c <audioInit+0x264>)
24000850:	f014 fb48 	bl	24014ee4 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
24000854:	462b      	mov	r3, r5
24000856:	f04f 72f0 	mov.w	r2, #31457280	; 0x1e00000
2400085a:	498d      	ldr	r1, [pc, #564]	; (24000a90 <audioInit+0x268>)
2400085c:	488d      	ldr	r0, [pc, #564]	; (24000a94 <audioInit+0x26c>)
2400085e:	f014 fb41 	bl	24014ee4 <tMempool_init>

	leaf.clearOnAllocation = 1;
24000862:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
24000864:	f44f 5180 	mov.w	r1, #4096	; 0x1000
24000868:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2400086c:	eddf 1a8a 	vldr	s3, [pc, #552]	; 24000a98 <audioInit+0x270>
24000870:	eddf 0a8a 	vldr	s1, [pc, #552]	; 24000a9c <audioInit+0x274>
24000874:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 24000aa0 <audioInit+0x278>
24000878:	488a      	ldr	r0, [pc, #552]	; (24000aa4 <audioInit+0x27c>)
	leaf.clearOnAllocation = 1;
2400087a:	616b      	str	r3, [r5, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
2400087c:	f014 f81c 	bl	240148b8 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;

	for (int i = 0; i < 12; i++)
	{
		previousStringInputs[i]	= 0;
24000880:	4b89      	ldr	r3, [pc, #548]	; (24000aa8 <audioInit+0x280>)
24000882:	2200      	movs	r2, #0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
24000884:	4989      	ldr	r1, [pc, #548]	; (24000aac <audioInit+0x284>)
24000886:	f504 6580 	add.w	r5, r4, #1024	; 0x400
		previousStringInputs[i]	= 0;
2400088a:	801a      	strh	r2, [r3, #0]



	for (int i = 0; i < 256; i++)
	{
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
2400088c:	eddf 8a88 	vldr	s17, [pc, #544]	; 24000ab0 <audioInit+0x288>
		previousStringInputs[i]	= 0;
24000890:	805a      	strh	r2, [r3, #2]
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
24000892:	ed9f 8a88 	vldr	s16, [pc, #544]	; 24000ab4 <audioInit+0x28c>
		previousStringInputs[i]	= 0;
24000896:	809a      	strh	r2, [r3, #4]
24000898:	80da      	strh	r2, [r3, #6]
2400089a:	811a      	strh	r2, [r3, #8]
2400089c:	815a      	strh	r2, [r3, #10]
2400089e:	819a      	strh	r2, [r3, #12]
240008a0:	81da      	strh	r2, [r3, #14]
240008a2:	821a      	strh	r2, [r3, #16]
240008a4:	825a      	strh	r2, [r3, #18]
240008a6:	829a      	strh	r2, [r3, #20]
240008a8:	82da      	strh	r2, [r3, #22]
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
240008aa:	4b83      	ldr	r3, [pc, #524]	; (24000ab8 <audioInit+0x290>)
240008ac:	600b      	str	r3, [r1, #0]
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
240008ae:	f02a ff27 	bl	2402b700 <__randomNumber_veneer>
240008b2:	eef0 7a48 	vmov.f32	s15, s16
240008b6:	eee0 7a28 	vfma.f32	s15, s0, s17
240008ba:	ece4 7a01 	vstmia	r4!, {s15}
	for (int i = 0; i < 256; i++)
240008be:	42ac      	cmp	r4, r5
240008c0:	d1f5      	bne.n	240008ae <audioInit+0x86>
	}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
240008c2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240008c6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 24000abc <audioInit+0x294>
240008ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
240008ce:	487c      	ldr	r0, [pc, #496]	; (24000ac0 <audioInit+0x298>)
240008d0:	f014 f85c 	bl	2401498c <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 50.0f);
240008d4:	eddf 0a7b 	vldr	s1, [pc, #492]	; 24000ac4 <audioInit+0x29c>
240008d8:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 24000ac8 <audioInit+0x2a0>
240008dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
240008e0:	487a      	ldr	r0, [pc, #488]	; (24000acc <audioInit+0x2a4>)
240008e2:	f014 f877 	bl	240149d4 <LEAF_generate_dbtoa>

	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
240008e6:	4b7a      	ldr	r3, [pc, #488]	; (24000ad0 <audioInit+0x2a8>)
240008e8:	4a7a      	ldr	r2, [pc, #488]	; (24000ad4 <audioInit+0x2ac>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
240008ea:	497b      	ldr	r1, [pc, #492]	; (24000ad8 <audioInit+0x2b0>)
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
240008ec:	601a      	str	r2, [r3, #0]
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
240008ee:	4b7b      	ldr	r3, [pc, #492]	; (24000adc <audioInit+0x2b4>)
240008f0:	4a7b      	ldr	r2, [pc, #492]	; (24000ae0 <audioInit+0x2b8>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
240008f2:	487c      	ldr	r0, [pc, #496]	; (24000ae4 <audioInit+0x2bc>)
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
240008f4:	601a      	str	r2, [r3, #0]
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
240008f6:	4b7c      	ldr	r3, [pc, #496]	; (24000ae8 <audioInit+0x2c0>)
240008f8:	4a7c      	ldr	r2, [pc, #496]	; (24000aec <audioInit+0x2c4>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
240008fa:	6008      	str	r0, [r1, #0]

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
240008fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
24000900:	eddf 0a7b 	vldr	s1, [pc, #492]	; 24000af0 <audioInit+0x2c8>
24000904:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 24000af4 <audioInit+0x2cc>
24000908:	487b      	ldr	r0, [pc, #492]	; (24000af8 <audioInit+0x2d0>)
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
2400090a:	601a      	str	r2, [r3, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
2400090c:	f014 f88c 	bl	24014a28 <LEAF_generate_mtof>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000910:	4b7a      	ldr	r3, [pc, #488]	; (24000afc <audioInit+0x2d4>)
		numStringsThisBoard = 2;
24000912:	2002      	movs	r0, #2
24000914:	4c7a      	ldr	r4, [pc, #488]	; (24000b00 <audioInit+0x2d8>)
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
24000916:	781b      	ldrb	r3, [r3, #0]
		numStringsThisBoard = 2;
24000918:	497a      	ldr	r1, [pc, #488]	; (24000b04 <audioInit+0x2dc>)
2400091a:	f104 0650 	add.w	r6, r4, #80	; 0x50
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
2400091e:	4a7a      	ldr	r2, [pc, #488]	; (24000b08 <audioInit+0x2e0>)
24000920:	005b      	lsls	r3, r3, #1


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 20; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000922:	4d54      	ldr	r5, [pc, #336]	; (24000a74 <audioInit+0x24c>)
24000924:	eddf 8a79 	vldr	s17, [pc, #484]	; 24000b0c <audioInit+0x2e4>
24000928:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 24000a9c <audioInit+0x274>
		numStringsThisBoard = 2;
2400092c:	7008      	strb	r0, [r1, #0]
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
2400092e:	eddf 0a77 	vldr	s1, [pc, #476]	; 24000b0c <audioInit+0x2e4>
24000932:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 24000a9c <audioInit+0x274>
24000936:	494f      	ldr	r1, [pc, #316]	; (24000a74 <audioInit+0x24c>)
24000938:	4875      	ldr	r0, [pc, #468]	; (24000b10 <audioInit+0x2e8>)
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
2400093a:	6013      	str	r3, [r2, #0]
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
2400093c:	f010 ff5e 	bl	240117fc <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000940:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
24000942:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
24000944:	eef0 0a68 	vmov.f32	s1, s17
24000948:	4629      	mov	r1, r5
2400094a:	eeb0 0a48 	vmov.f32	s0, s16
2400094e:	f010 ff55 	bl	240117fc <tExpSmooth_init>
	for (int i = 0; i < 20; i++)
24000952:	42b4      	cmp	r4, r6
24000954:	d1f4      	bne.n	24000940 <audioInit+0x118>
24000956:	4c6f      	ldr	r4, [pc, #444]	; (24000b14 <audioInit+0x2ec>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
24000958:	4e46      	ldr	r6, [pc, #280]	; (24000a74 <audioInit+0x24c>)
2400095a:	eddf 8a6c 	vldr	s17, [pc, #432]	; 24000b0c <audioInit+0x2e4>
2400095e:	f104 0528 	add.w	r5, r4, #40	; 0x28
24000962:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 24000a9c <audioInit+0x274>
24000966:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
24000968:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
2400096a:	eef0 0a68 	vmov.f32	s1, s17
2400096e:	4631      	mov	r1, r6
24000970:	eeb0 0a48 	vmov.f32	s0, s16
24000974:	f010 ff42 	bl	240117fc <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
24000978:	42ac      	cmp	r4, r5
2400097a:	d1f4      	bne.n	24000966 <audioInit+0x13e>
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
2400097c:	493d      	ldr	r1, [pc, #244]	; (24000a74 <audioInit+0x24c>)
2400097e:	eddf 0a66 	vldr	s1, [pc, #408]	; 24000b18 <audioInit+0x2f0>
24000982:	ed9f 0a46 	vldr	s0, [pc, #280]	; 24000a9c <audioInit+0x274>
24000986:	4865      	ldr	r0, [pc, #404]	; (24000b1c <audioInit+0x2f4>)
24000988:	f010 ff38 	bl	240117fc <tExpSmooth_init>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
2400098c:	4939      	ldr	r1, [pc, #228]	; (24000a74 <audioInit+0x24c>)
2400098e:	eddf 0a64 	vldr	s1, [pc, #400]	; 24000b20 <audioInit+0x2f8>
24000992:	ed9f 0a64 	vldr	s0, [pc, #400]	; 24000b24 <audioInit+0x2fc>
24000996:	4864      	ldr	r0, [pc, #400]	; (24000b28 <audioInit+0x300>)
24000998:	f00f fcc2 	bl	24010320 <tEnvelopeFollower_init>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
2400099c:	4935      	ldr	r1, [pc, #212]	; (24000a74 <audioInit+0x24c>)
2400099e:	4c63      	ldr	r4, [pc, #396]	; (24000b2c <audioInit+0x304>)

	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{


		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240009a0:	460d      	mov	r5, r1
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
240009a2:	eddf 0a5d 	vldr	s1, [pc, #372]	; 24000b18 <audioInit+0x2f0>
240009a6:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 24000a9c <audioInit+0x274>
240009aa:	f104 0808 	add.w	r8, r4, #8
240009ae:	4860      	ldr	r0, [pc, #384]	; (24000b30 <audioInit+0x308>)
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240009b0:	ed9f 9a60 	vldr	s18, [pc, #384]	; 24000b34 <audioInit+0x30c>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
240009b4:	f010 ff22 	bl	240117fc <tExpSmooth_init>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240009b8:	eddf 8a38 	vldr	s17, [pc, #224]	; 24000a9c <audioInit+0x274>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
240009bc:	4629      	mov	r1, r5
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240009be:	ed9f 8a41 	vldr	s16, [pc, #260]	; 24000ac4 <audioInit+0x29c>


		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
240009c2:	4f5d      	ldr	r7, [pc, #372]	; (24000b38 <audioInit+0x310>)
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
240009c4:	4e5d      	ldr	r6, [pc, #372]	; (24000b3c <audioInit+0x314>)
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
240009c6:	eddf 0a56 	vldr	s1, [pc, #344]	; 24000b20 <audioInit+0x2f8>
240009ca:	ed9f 0a56 	vldr	s0, [pc, #344]	; 24000b24 <audioInit+0x2fc>
240009ce:	485c      	ldr	r0, [pc, #368]	; (24000b40 <audioInit+0x318>)
240009d0:	f00f fca6 	bl	24010320 <tEnvelopeFollower_init>
	audioInitAdditive();
240009d4:	f02a fe98 	bl	2402b708 <__audioInitAdditive_veneer>
	audioInitVocal();
240009d8:	f02a fe8a 	bl	2402b6f0 <__audioInitVocal_veneer>
	audioInitSynth();
240009dc:	f003 f8f6 	bl	24003bcc <audioInitSynth>
	audioInitString3();
240009e0:	f02a fe6a 	bl	2402b6b8 <__audioInitString3_veneer>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
240009e4:	eef0 1a49 	vmov.f32	s3, s18
240009e8:	462b      	mov	r3, r5
240009ea:	eeb0 1a68 	vmov.f32	s2, s17
240009ee:	4620      	mov	r0, r4
240009f0:	eef0 0a48 	vmov.f32	s1, s16
240009f4:	ed9f 0a29 	vldr	s0, [pc, #164]	; 24000a9c <audioInit+0x274>
240009f8:	492a      	ldr	r1, [pc, #168]	; (24000aa4 <audioInit+0x27c>)
240009fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240009fe:	f010 fbe9 	bl	240111d4 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
24000a02:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
24000a06:	462a      	mov	r2, r5
24000a08:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 24000b44 <audioInit+0x31c>
24000a0c:	2103      	movs	r1, #3
24000a0e:	4638      	mov	r0, r7
24000a10:	f011 fef6 	bl	24012800 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
24000a14:	462a      	mov	r2, r5
24000a16:	eddf 0a4c 	vldr	s1, [pc, #304]	; 24000b48 <audioInit+0x320>
24000a1a:	2101      	movs	r1, #1
24000a1c:	4630      	mov	r0, r6
24000a1e:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 24000b4c <audioInit+0x324>
24000a22:	f011 feed 	bl	24012800 <tVZFilter_init>
		//tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values


		tVZFilter_setFreq(&noiseFilt, faster_mtof(0.9f * 128.0f));
24000a26:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 24000b50 <audioInit+0x328>
24000a2a:	f014 f8d9 	bl	24014be0 <faster_mtof>
24000a2e:	4638      	mov	r0, r7
24000a30:	f011 feea 	bl	24012808 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
24000a34:	ed9f 0a47 	vldr	s0, [pc, #284]	; 24000b54 <audioInit+0x32c>
24000a38:	f014 f8d2 	bl	24014be0 <faster_mtof>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24000a3c:	3404      	adds	r4, #4
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
24000a3e:	4630      	mov	r0, r6
24000a40:	f011 fee2 	bl	24012808 <tVZFilter_setFreq>

		tNoise_init(&myNoise, WhiteNoise, &leaf);
24000a44:	462a      	mov	r2, r5
24000a46:	2100      	movs	r1, #0
24000a48:	4843      	ldr	r0, [pc, #268]	; (24000b58 <audioInit+0x330>)
24000a4a:	f014 fecd 	bl	240157e8 <tNoise_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24000a4e:	45a0      	cmp	r8, r4
24000a50:	d1c8      	bne.n	240009e4 <audioInit+0x1bc>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
24000a52:	f44f 6280 	mov.w	r2, #1024	; 0x400
24000a56:	2100      	movs	r1, #0
24000a58:	4840      	ldr	r0, [pc, #256]	; (24000b5c <audioInit+0x334>)
24000a5a:	f018 ff9d 	bl	24019998 <memset>
	}

	audioFrameFunction = audioFrameWaiting;
24000a5e:	4b40      	ldr	r3, [pc, #256]	; (24000b60 <audioInit+0x338>)
24000a60:	4a40      	ldr	r2, [pc, #256]	; (24000b64 <audioInit+0x33c>)
	HAL_Delay(1);
24000a62:	2001      	movs	r0, #1
	audioFrameFunction = audioFrameWaiting;
24000a64:	601a      	str	r2, [r3, #0]

}
24000a66:	ecbd 8b04 	vpop	{d8-d9}
24000a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_Delay(1);
24000a6e:	f003 bf01 	b.w	24004874 <HAL_Delay>
24000a72:	bf00      	nop
24000a74:	2000528c 	.word	0x2000528c
24000a78:	473b8000 	.word	0x473b8000
24000a7c:	20005774 	.word	0x20005774
24000a80:	00001c41 	.word	0x00001c41
24000a84:	20005370 	.word	0x20005370
24000a88:	24040000 	.word	0x24040000
24000a8c:	200052e0 	.word	0x200052e0
24000a90:	c0000000 	.word	0xc0000000
24000a94:	20005288 	.word	0x20005288
24000a98:	ba51b717 	.word	0xba51b717
24000a9c:	00000000 	.word	0x00000000
24000aa0:	3a83126f 	.word	0x3a83126f
24000aa4:	200011b0 	.word	0x200011b0
24000aa8:	20005358 	.word	0x20005358
24000aac:	200051b0 	.word	0x200051b0
24000ab0:	3ecccccd 	.word	0x3ecccccd
24000ab4:	3f4ccccd 	.word	0x3f4ccccd
24000ab8:	457ff000 	.word	0x457ff000
24000abc:	3727c5ac 	.word	0x3727c5ac
24000ac0:	30012000 	.word	0x30012000
24000ac4:	42480000 	.word	0x42480000
24000ac8:	c2b40000 	.word	0xc2b40000
24000acc:	30002000 	.word	0x30002000
24000ad0:	20001188 	.word	0x20001188
24000ad4:	467ffca8 	.word	0x467ffca8
24000ad8:	20001184 	.word	0x20001184
24000adc:	200011ac 	.word	0x200011ac
24000ae0:	42ea0af9 	.word	0x42ea0af9
24000ae4:	3e27c37b 	.word	0x3e27c37b
24000ae8:	200011a8 	.word	0x200011a8
24000aec:	c6248fb7 	.word	0xc6248fb7
24000af0:	4323d666 	.word	0x4323d666
24000af4:	c323d666 	.word	0xc323d666
24000af8:	30022000 	.word	0x30022000
24000afc:	20014435 	.word	0x20014435
24000b00:	20005238 	.word	0x20005238
24000b04:	20000694 	.word	0x20000694
24000b08:	200051c4 	.word	0x200051c4
24000b0c:	3a03126f 	.word	0x3a03126f
24000b10:	2001425c 	.word	0x2001425c
24000b14:	20005324 	.word	0x20005324
24000b18:	3c23d70a 	.word	0x3c23d70a
24000b1c:	200011a0 	.word	0x200011a0
24000b20:	3f7fd220 	.word	0x3f7fd220
24000b24:	38d1b717 	.word	0x38d1b717
24000b28:	20001198 	.word	0x20001198
24000b2c:	200051bc 	.word	0x200051bc
24000b30:	200011a4 	.word	0x200011a4
24000b34:	43480000 	.word	0x43480000
24000b38:	200052ec 	.word	0x200052ec
24000b3c:	200052f0 	.word	0x200052f0
24000b40:	2000119c 	.word	0x2000119c
24000b44:	44bb8000 	.word	0x44bb8000
24000b48:	3f666666 	.word	0x3f666666
24000b4c:	44480000 	.word	0x44480000
24000b50:	42e66666 	.word	0x42e66666
24000b54:	42cccccd 	.word	0x42cccccd
24000b58:	200052e4 	.word	0x200052e4
24000b5c:	30000000 	.word	0x30000000
24000b60:	2000118c 	.word	0x2000118c
24000b64:	00001361 	.word	0x00001361

24000b68 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
24000b68:	b570      	push	{r4, r5, r6, lr}
24000b6a:	4605      	mov	r5, r0
	HAL_Delay(1);
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24000b6c:	4e0b      	ldr	r6, [pc, #44]	; (24000b9c <audioStart+0x34>)
	HAL_Delay(1);
24000b6e:	2001      	movs	r0, #1
{
24000b70:	460c      	mov	r4, r1
	HAL_Delay(1);
24000b72:	f003 fe7f 	bl	24004874 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24000b76:	f44f 7280 	mov.w	r2, #256	; 0x100
24000b7a:	4631      	mov	r1, r6
24000b7c:	4628      	mov	r0, r5
24000b7e:	f009 f975 	bl	24009e6c <HAL_SAI_Transmit_DMA>
24000b82:	4b07      	ldr	r3, [pc, #28]	; (24000ba0 <audioStart+0x38>)
24000b84:	4605      	mov	r5, r0
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24000b86:	f44f 7280 	mov.w	r2, #256	; 0x100
24000b8a:	f506 6180 	add.w	r1, r6, #1024	; 0x400
24000b8e:	4620      	mov	r0, r4
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
24000b90:	701d      	strb	r5, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
24000b92:	f009 fa07 	bl	24009fa4 <HAL_SAI_Receive_DMA>
24000b96:	4b03      	ldr	r3, [pc, #12]	; (24000ba4 <audioStart+0x3c>)
24000b98:	7018      	strb	r0, [r3, #0]
}
24000b9a:	bd70      	pop	{r4, r5, r6, pc}
24000b9c:	30000000 	.word	0x30000000
24000ba0:	2001424c 	.word	0x2001424c
24000ba4:	20005770 	.word	0x20005770

24000ba8 <MX_BDMA_Init>:
  */
void MX_BDMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
24000ba8:	4b10      	ldr	r3, [pc, #64]	; (24000bec <MX_BDMA_Init+0x44>)

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
24000baa:	2200      	movs	r2, #0
24000bac:	2109      	movs	r1, #9
24000bae:	2081      	movs	r0, #129	; 0x81
{
24000bb0:	b510      	push	{r4, lr}
  __HAL_RCC_BDMA_CLK_ENABLE();
24000bb2:	f8d3 40e0 	ldr.w	r4, [r3, #224]	; 0xe0
{
24000bb6:	b082      	sub	sp, #8
  __HAL_RCC_BDMA_CLK_ENABLE();
24000bb8:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
24000bbc:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
24000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24000bc8:	9301      	str	r3, [sp, #4]
24000bca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 9, 0);
24000bcc:	f003 fe7c 	bl	240048c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
24000bd0:	2081      	movs	r0, #129	; 0x81
24000bd2:	f003 feb7 	bl	24004944 <HAL_NVIC_EnableIRQ>
  /* BDMA_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel1_IRQn, 10, 0);
24000bd6:	2082      	movs	r0, #130	; 0x82
24000bd8:	2200      	movs	r2, #0
24000bda:	210a      	movs	r1, #10
24000bdc:	f003 fe74 	bl	240048c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
24000be0:	2082      	movs	r0, #130	; 0x82

}
24000be2:	b002      	add	sp, #8
24000be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(BDMA_Channel1_IRQn);
24000be8:	f003 beac 	b.w	24004944 <HAL_NVIC_EnableIRQ>
24000bec:	58024400 	.word	0x58024400

24000bf0 <codec_init>:
    CODEC_RATE_44K_44K = 0x08 << 2,
};


void codec_init(I2C_HandleTypeDef* i2c)
{
24000bf0:	b570      	push	{r4, r5, r6, lr}

int WriteControlRegister(I2C_HandleTypeDef* i2c, uint8_t address, uint16_t data)
{
    uint8_t byte_1  = ((address << 1) & 0xfe) | ((data >> 8) & 0x01);
    uint8_t byte_2  = data & 0xff;
    uint8_t buff[2] = {byte_1, byte_2};
24000bf2:	231e      	movs	r3, #30
{
24000bf4:	b084      	sub	sp, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000bf6:	25fa      	movs	r5, #250	; 0xfa
24000bf8:	2134      	movs	r1, #52	; 0x34
24000bfa:	aa03      	add	r2, sp, #12
    uint8_t buff[2] = {byte_1, byte_2};
24000bfc:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000c00:	9500      	str	r5, [sp, #0]
24000c02:	2302      	movs	r3, #2
{
24000c04:	4604      	mov	r4, r0
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000c06:	f005 ff85 	bl	24006b14 <HAL_I2C_Master_Transmit>
                                              2, 250);

    HAL_Delay(10);
24000c0a:	200a      	movs	r0, #10
    uint8_t buff[2] = {byte_1, byte_2};
24000c0c:	260a      	movs	r6, #10
    HAL_Delay(10);
24000c0e:	f003 fe31 	bl	24004874 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000c12:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000c16:	2302      	movs	r3, #2
24000c18:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000c1a:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000c1e:	4620      	mov	r0, r4
24000c20:	aa03      	add	r2, sp, #12
24000c22:	9500      	str	r5, [sp, #0]
24000c24:	f005 ff76 	bl	24006b14 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000c28:	200a      	movs	r0, #10
24000c2a:	f003 fe23 	bl	24004874 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000c2e:	f241 7202 	movw	r2, #5890	; 0x1702
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000c32:	2302      	movs	r3, #2
24000c34:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000c36:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000c3a:	4620      	mov	r0, r4
24000c3c:	aa03      	add	r2, sp, #12
24000c3e:	9500      	str	r5, [sp, #0]
24000c40:	f005 ff68 	bl	24006b14 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000c44:	200a      	movs	r0, #10
24000c46:	f003 fe15 	bl	24004874 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000c4a:	2204      	movs	r2, #4
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000c4c:	2302      	movs	r3, #2
24000c4e:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000c50:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000c54:	4620      	mov	r0, r4
24000c56:	aa03      	add	r2, sp, #12
24000c58:	9500      	str	r5, [sp, #0]
24000c5a:	f005 ff5b 	bl	24006b14 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000c5e:	200a      	movs	r0, #10
24000c60:	f003 fe08 	bl	24004874 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000c64:	2206      	movs	r2, #6
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000c66:	2302      	movs	r3, #2
24000c68:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000c6a:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000c6e:	4620      	mov	r0, r4
24000c70:	aa03      	add	r2, sp, #12
24000c72:	9500      	str	r5, [sp, #0]
24000c74:	f005 ff4e 	bl	24006b14 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000c78:	200a      	movs	r0, #10
24000c7a:	f003 fdfb 	bl	24004874 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000c7e:	f241 2208 	movw	r2, #4616	; 0x1208
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000c82:	2302      	movs	r3, #2
24000c84:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000c86:	f8ad 200c 	strh.w	r2, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000c8a:	4620      	mov	r0, r4
24000c8c:	aa03      	add	r2, sp, #12
24000c8e:	9500      	str	r5, [sp, #0]
24000c90:	f005 ff40 	bl	24006b14 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000c94:	4630      	mov	r0, r6
24000c96:	f003 fded 	bl	24004874 <HAL_Delay>
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000c9a:	aa03      	add	r2, sp, #12
24000c9c:	2302      	movs	r3, #2
24000c9e:	2134      	movs	r1, #52	; 0x34
24000ca0:	4620      	mov	r0, r4
24000ca2:	9500      	str	r5, [sp, #0]
    uint8_t buff[2] = {byte_1, byte_2};
24000ca4:	f8ad 600c 	strh.w	r6, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000ca8:	f005 ff34 	bl	24006b14 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000cac:	4630      	mov	r0, r6
24000cae:	f003 fde1 	bl	24004874 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000cb2:	f246 230c 	movw	r3, #25100	; 0x620c
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000cb6:	aa03      	add	r2, sp, #12
24000cb8:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000cba:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000cbe:	4620      	mov	r0, r4
24000cc0:	2302      	movs	r3, #2
24000cc2:	9500      	str	r5, [sp, #0]
24000cc4:	f005 ff26 	bl	24006b14 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000cc8:	4630      	mov	r0, r6
24000cca:	f003 fdd3 	bl	24004874 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000cce:	f640 130e 	movw	r3, #2318	; 0x90e
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000cd2:	aa03      	add	r2, sp, #12
24000cd4:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000cd6:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000cda:	4620      	mov	r0, r4
24000cdc:	2302      	movs	r3, #2
24000cde:	9500      	str	r5, [sp, #0]
24000ce0:	f005 ff18 	bl	24006b14 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000ce4:	4630      	mov	r0, r6
24000ce6:	f003 fdc5 	bl	24004874 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000cea:	2310      	movs	r3, #16
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000cec:	aa03      	add	r2, sp, #12
24000cee:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000cf0:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000cf4:	4620      	mov	r0, r4
24000cf6:	2302      	movs	r3, #2
24000cf8:	9500      	str	r5, [sp, #0]
24000cfa:	f005 ff0b 	bl	24006b14 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000cfe:	4630      	mov	r0, r6
24000d00:	f003 fdb8 	bl	24004874 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000d04:	2312      	movs	r3, #18
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000d06:	aa03      	add	r2, sp, #12
24000d08:	2134      	movs	r1, #52	; 0x34
    uint8_t buff[2] = {byte_1, byte_2};
24000d0a:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000d0e:	4620      	mov	r0, r4
24000d10:	2302      	movs	r3, #2
24000d12:	9500      	str	r5, [sp, #0]
24000d14:	f005 fefe 	bl	24006b14 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000d18:	4630      	mov	r0, r6
24000d1a:	f003 fdab 	bl	24004874 <HAL_Delay>
    uint8_t buff[2] = {byte_1, byte_2};
24000d1e:	f44f 7189 	mov.w	r1, #274	; 0x112
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000d22:	aa03      	add	r2, sp, #12
24000d24:	2302      	movs	r3, #2
    uint8_t buff[2] = {byte_1, byte_2};
24000d26:	f8ad 100c 	strh.w	r1, [sp, #12]
    HAL_I2C_Master_Transmit(i2c, W8731_ADDR_0<<1, buff,
24000d2a:	4620      	mov	r0, r4
24000d2c:	2134      	movs	r1, #52	; 0x34
24000d2e:	9500      	str	r5, [sp, #0]
24000d30:	f005 fef0 	bl	24006b14 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
24000d34:	4630      	mov	r0, r6
24000d36:	f003 fd9d 	bl	24004874 <HAL_Delay>
}
24000d3a:	b004      	add	sp, #16
24000d3c:	bd70      	pop	{r4, r5, r6, pc}
24000d3e:	bf00      	nop

24000d40 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
24000d40:	4b24      	ldr	r3, [pc, #144]	; (24000dd4 <MX_DMA_Init+0x94>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
24000d42:	2200      	movs	r2, #0
24000d44:	2102      	movs	r1, #2
24000d46:	200b      	movs	r0, #11
{
24000d48:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
24000d4a:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
24000d4e:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
24000d50:	f044 0401 	orr.w	r4, r4, #1
24000d54:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
24000d58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
24000d5c:	f003 0301 	and.w	r3, r3, #1
24000d60:	9301      	str	r3, [sp, #4]
24000d62:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 2, 0);
24000d64:	f003 fdb0 	bl	240048c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
24000d68:	200b      	movs	r0, #11
24000d6a:	f003 fdeb 	bl	24004944 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
24000d6e:	2200      	movs	r2, #0
24000d70:	2105      	movs	r1, #5
24000d72:	200c      	movs	r0, #12
24000d74:	f003 fda8 	bl	240048c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
24000d78:	200c      	movs	r0, #12
24000d7a:	f003 fde3 	bl	24004944 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
24000d7e:	2200      	movs	r2, #0
24000d80:	2106      	movs	r1, #6
24000d82:	200d      	movs	r0, #13
24000d84:	f003 fda0 	bl	240048c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
24000d88:	200d      	movs	r0, #13
24000d8a:	f003 fddb 	bl	24004944 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 4, 0);
24000d8e:	2200      	movs	r2, #0
24000d90:	2104      	movs	r1, #4
24000d92:	200e      	movs	r0, #14
24000d94:	f003 fd98 	bl	240048c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
24000d98:	200e      	movs	r0, #14
24000d9a:	f003 fdd3 	bl	24004944 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 3, 0);
24000d9e:	2200      	movs	r2, #0
24000da0:	2103      	movs	r1, #3
24000da2:	200f      	movs	r0, #15
24000da4:	f003 fd90 	bl	240048c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
24000da8:	200f      	movs	r0, #15
24000daa:	f003 fdcb 	bl	24004944 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
24000dae:	2200      	movs	r2, #0
24000db0:	2101      	movs	r1, #1
24000db2:	2011      	movs	r0, #17
24000db4:	f003 fd88 	bl	240048c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
24000db8:	2011      	movs	r0, #17
24000dba:	f003 fdc3 	bl	24004944 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 8, 0);
24000dbe:	2066      	movs	r0, #102	; 0x66
24000dc0:	2200      	movs	r2, #0
24000dc2:	2108      	movs	r1, #8
24000dc4:	f003 fd80 	bl	240048c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24000dc8:	2066      	movs	r0, #102	; 0x66

}
24000dca:	b002      	add	sp, #8
24000dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
24000dd0:	f003 bdb8 	b.w	24004944 <HAL_NVIC_EnableIRQ>
24000dd4:	58024400 	.word	0x58024400

24000dd8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
24000dd8:	b530      	push	{r4, r5, lr}

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24000dda:	4818      	ldr	r0, [pc, #96]	; (24000e3c <MX_FMC_Init+0x64>)
{
24000ddc:	b089      	sub	sp, #36	; 0x24
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24000dde:	2308      	movs	r3, #8
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
24000de0:	2202      	movs	r2, #2
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
24000de2:	2100      	movs	r1, #0
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24000de4:	4d16      	ldr	r5, [pc, #88]	; (24000e40 <MX_FMC_Init+0x68>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
24000de6:	60c3      	str	r3, [r0, #12]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
24000de8:	f44f 6400 	mov.w	r4, #2048	; 0x800
  SdramTiming.LoadToActiveDelay = 2;
24000dec:	9200      	str	r2, [sp, #0]
  SdramTiming.ExitSelfRefreshDelay = 8;
  SdramTiming.SelfRefreshTime = 5;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
24000dee:	9206      	str	r2, [sp, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24000df0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 8;
24000df4:	9301      	str	r3, [sp, #4]
  SdramTiming.SelfRefreshTime = 5;
24000df6:	2305      	movs	r3, #5
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
24000df8:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
24000dfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  SdramTiming.SelfRefreshTime = 5;
24000dfe:	9302      	str	r3, [sp, #8]
  SdramTiming.RowCycleDelay = 6;
24000e00:	2306      	movs	r3, #6
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
24000e02:	6282      	str	r2, [r0, #40]	; 0x28
  SdramTiming.WriteRecoveryTime = 3;
24000e04:	2203      	movs	r2, #3
  SdramTiming.RowCycleDelay = 6;
24000e06:	9303      	str	r3, [sp, #12]
  SdramTiming.WriteRecoveryTime = 3;
24000e08:	2302      	movs	r3, #2
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
24000e0a:	6041      	str	r1, [r0, #4]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
24000e0c:	61c1      	str	r1, [r0, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24000e0e:	4669      	mov	r1, sp
  hsdram1.Instance = FMC_SDRAM_DEVICE;
24000e10:	6005      	str	r5, [r0, #0]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
24000e12:	6204      	str	r4, [r0, #32]
  SdramTiming.WriteRecoveryTime = 3;
24000e14:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24000e18:	2201      	movs	r2, #1
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24000e1a:	2320      	movs	r3, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
24000e1c:	6082      	str	r2, [r0, #8]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
24000e1e:	2240      	movs	r2, #64	; 0x40
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
24000e20:	6103      	str	r3, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
24000e22:	f44f 7380 	mov.w	r3, #256	; 0x100
24000e26:	e9c0 2305 	strd	r2, r3, [r0, #20]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
24000e2a:	f00a f86f 	bl	2400af0c <HAL_SDRAM_Init>
24000e2e:	b908      	cbnz	r0, 24000e34 <MX_FMC_Init+0x5c>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
24000e30:	b009      	add	sp, #36	; 0x24
24000e32:	bd30      	pop	{r4, r5, pc}
    Error_Handler( );
24000e34:	f002 fa92 	bl	2400335c <Error_Handler>
}
24000e38:	b009      	add	sp, #36	; 0x24
24000e3a:	bd30      	pop	{r4, r5, pc}
24000e3c:	20014268 	.word	0x20014268
24000e40:	52004140 	.word	0x52004140

24000e44 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
24000e44:	4b2e      	ldr	r3, [pc, #184]	; (24000f00 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000e46:	2200      	movs	r2, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
24000e48:	b5f0      	push	{r4, r5, r6, r7, lr}
24000e4a:	b089      	sub	sp, #36	; 0x24
  if (FMC_Initialized) {
24000e4c:	681c      	ldr	r4, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000e4e:	9204      	str	r2, [sp, #16]
  if (FMC_Initialized) {
24000e50:	2c00      	cmp	r4, #0
24000e52:	d153      	bne.n	24000efc <HAL_SDRAM_MspInit+0xb8>
  __HAL_RCC_FMC_CLK_ENABLE();
24000e54:	4a2b      	ldr	r2, [pc, #172]	; (24000f04 <HAL_SDRAM_MspInit+0xc0>)
  FMC_Initialized = 1;
24000e56:	2101      	movs	r1, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000e58:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24000e5a:	250c      	movs	r5, #12
  FMC_Initialized = 1;
24000e5c:	6019      	str	r1, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000e5e:	2702      	movs	r7, #2
  __HAL_RCC_FMC_CLK_ENABLE();
24000e60:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24000e64:	4828      	ldr	r0, [pc, #160]	; (24000f08 <HAL_SDRAM_MspInit+0xc4>)
  __HAL_RCC_FMC_CLK_ENABLE();
24000e66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
24000e6a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
24000e6e:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24000e72:	f64f 7283 	movw	r2, #65411	; 0xff83
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000e76:	9605      	str	r6, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
24000e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24000e7c:	9506      	str	r5, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
24000e7e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24000e80:	2302      	movs	r3, #2
  __HAL_RCC_FMC_CLK_ENABLE();
24000e82:	9901      	ldr	r1, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24000e84:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_8
24000e86:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24000e8a:	f005 fbc5 	bl	24006618 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24000e8e:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24000e92:	a902      	add	r1, sp, #8
24000e94:	481d      	ldr	r0, [pc, #116]	; (24000f0c <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
24000e96:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24000e98:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000e9a:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000e9c:	e9cd 4604 	strd	r4, r6, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24000ea0:	f005 fbba 	bl	24006618 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24000ea4:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24000ea8:	a902      	add	r1, sp, #8
24000eaa:	4819      	ldr	r0, [pc, #100]	; (24000f10 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
24000eac:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24000eae:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24000eb2:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24000eb6:	f005 fbaf 	bl	24006618 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24000eba:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24000ebe:	a902      	add	r1, sp, #8
24000ec0:	4814      	ldr	r0, [pc, #80]	; (24000f14 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3
24000ec2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24000ec4:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24000ec8:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
24000ecc:	f005 fba4 	bl	24006618 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24000ed0:	f64f 732c 	movw	r3, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24000ed4:	a902      	add	r1, sp, #8
24000ed6:	4810      	ldr	r0, [pc, #64]	; (24000f18 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_2
24000ed8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24000eda:	e9cd 7403 	strd	r7, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24000ede:	e9cd 6505 	strd	r6, r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24000ee2:	f005 fb99 	bl	24006618 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24000ee6:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24000eea:	a902      	add	r1, sp, #8
24000eec:	480b      	ldr	r0, [pc, #44]	; (24000f1c <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000eee:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
24000ef0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
24000ef2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000ef4:	e9cd 4604 	strd	r4, r6, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24000ef8:	f005 fb8e 	bl	24006618 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
24000efc:	b009      	add	sp, #36	; 0x24
24000efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
24000f00:	20014264 	.word	0x20014264
24000f04:	58024400 	.word	0x58024400
24000f08:	58021000 	.word	0x58021000
24000f0c:	58021800 	.word	0x58021800
24000f10:	58020c00 	.word	0x58020c00
24000f14:	58022000 	.word	0x58022000
24000f18:	58021c00 	.word	0x58021c00
24000f1c:	58021400 	.word	0x58021400

24000f20 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
24000f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
24000f24:	4bad      	ldr	r3, [pc, #692]	; (240011dc <MX_GPIO_Init+0x2bc>)
{
24000f26:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000f28:	2400      	movs	r4, #0
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24000f2a:	4ead      	ldr	r6, [pc, #692]	; (240011e0 <MX_GPIO_Init+0x2c0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24000f2c:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 240011f4 <MX_GPIO_Init+0x2d4>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24000f30:	2182      	movs	r1, #130	; 0x82
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000f32:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24000f34:	4630      	mov	r0, r6

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24000f36:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 240011f8 <MX_GPIO_Init+0x2d8>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB7 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24000f3a:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
24000f3c:	4fa9      	ldr	r7, [pc, #676]	; (240011e4 <MX_GPIO_Init+0x2c4>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24000f3e:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 240011fc <MX_GPIO_Init+0x2dc>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000f42:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
24000f46:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
24000f4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000f4e:	f042 0210 	orr.w	r2, r2, #16
24000f52:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000f56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000f5a:	f002 0210 	and.w	r2, r2, #16
24000f5e:	9201      	str	r2, [sp, #4]
24000f60:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24000f62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000f66:	f042 0202 	orr.w	r2, r2, #2
24000f6a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000f6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000f72:	f002 0202 	and.w	r2, r2, #2
24000f76:	9202      	str	r2, [sp, #8]
24000f78:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
24000f7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
24000f82:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000f86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000f8a:	f002 0240 	and.w	r2, r2, #64	; 0x40
24000f8e:	9203      	str	r2, [sp, #12]
24000f90:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24000f92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000f96:	f042 0208 	orr.w	r2, r2, #8
24000f9a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000f9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000fa2:	f002 0208 	and.w	r2, r2, #8
24000fa6:	9204      	str	r2, [sp, #16]
24000fa8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
24000faa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000fae:	f042 0204 	orr.w	r2, r2, #4
24000fb2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000fb6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000fba:	f002 0204 	and.w	r2, r2, #4
24000fbe:	9205      	str	r2, [sp, #20]
24000fc0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24000fc2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000fc6:	f042 0201 	orr.w	r2, r2, #1
24000fca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000fce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000fd2:	f002 0201 	and.w	r2, r2, #1
24000fd6:	9206      	str	r2, [sp, #24]
24000fd8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
24000fda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
24000fe2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000fe6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000fea:	f402 7280 	and.w	r2, r2, #256	; 0x100
24000fee:	9207      	str	r2, [sp, #28]
24000ff0:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
24000ff2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24000ff6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
24000ffa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24000ffe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24001002:	f002 0280 	and.w	r2, r2, #128	; 0x80
24001006:	9208      	str	r2, [sp, #32]
24001008:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
2400100a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400100e:	f042 0220 	orr.w	r2, r2, #32
24001012:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001016:	4622      	mov	r2, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
24001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
2400101c:	f003 0320 	and.w	r3, r3, #32
24001020:	9309      	str	r3, [sp, #36]	; 0x24
24001022:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_1, GPIO_PIN_RESET);
24001024:	f005 fc48 	bl	240068b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
24001028:	4622      	mov	r2, r4
2400102a:	4640      	mov	r0, r8
2400102c:	f44f 7100 	mov.w	r1, #512	; 0x200
24001030:	f005 fc42 	bl	240068b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
24001034:	4622      	mov	r2, r4
24001036:	4650      	mov	r0, sl
24001038:	2193      	movs	r1, #147	; 0x93
2400103a:	f005 fc3d 	bl	240068b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
2400103e:	4622      	mov	r2, r4
24001040:	4638      	mov	r0, r7
24001042:	2109      	movs	r1, #9
24001044:	f005 fc38 	bl	240068b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
24001048:	4622      	mov	r2, r4
2400104a:	4648      	mov	r0, r9
2400104c:	f44f 6100 	mov.w	r1, #2048	; 0x800
24001050:	f005 fc32 	bl	240068b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001054:	f247 02c0 	movw	r2, #28864	; 0x70c0
24001058:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400105a:	a90a      	add	r1, sp, #40	; 0x28
2400105c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400105e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_7
24001060:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001064:	f005 fad8 	bl	24006618 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24001068:	f243 02f8 	movw	r2, #12536	; 0x30f8
2400106c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2400106e:	a90a      	add	r1, sp, #40	; 0x28
24001070:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001072:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
24001074:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001078:	f005 face 	bl	24006618 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
2400107c:	f44f 421f 	mov.w	r2, #40704	; 0x9f00
24001080:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001082:	a90a      	add	r1, sp, #40	; 0x28
24001084:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001086:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10
24001088:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400108c:	f005 fac4 	bl	24006618 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
24001090:	2382      	movs	r3, #130	; 0x82
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001092:	a90a      	add	r1, sp, #40	; 0x28
24001094:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
24001096:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001098:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400109a:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400109e:	f005 fabb 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
240010a2:	2240      	movs	r2, #64	; 0x40
240010a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240010a8:	a90a      	add	r1, sp, #40	; 0x28
240010aa:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
240010ac:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6;
240010ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240010b2:	f005 fab1 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
240010b6:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240010ba:	a90a      	add	r1, sp, #40	; 0x28
240010bc:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_9;
240010be:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240010c0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240010c2:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
240010c6:	f005 faa7 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
240010ca:	f24e 026c 	movw	r2, #57452	; 0xe06c
240010ce:	2303      	movs	r3, #3
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240010d0:	a90a      	add	r1, sp, #40	; 0x28
240010d2:	4650      	mov	r0, sl
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240010d4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
240010d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240010da:	f005 fa9d 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
240010de:	f44f 6210 	mov.w	r2, #2304	; 0x900
240010e2:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
240010e4:	a90a      	add	r1, sp, #40	; 0x28
240010e6:	4840      	ldr	r0, [pc, #256]	; (240011e8 <MX_GPIO_Init+0x2c8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240010e8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
240010ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
240010ee:	f005 fa93 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC0 PC1 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
240010f2:	2393      	movs	r3, #147	; 0x93
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
240010f4:	4650      	mov	r0, sl
240010f6:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
240010f8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
240010fa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240010fc:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24001100:	f005 fa8a 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24001104:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
24001108:	2303      	movs	r3, #3
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
2400110a:	a90a      	add	r1, sp, #40	; 0x28
2400110c:	4837      	ldr	r0, [pc, #220]	; (240011ec <MX_GPIO_Init+0x2cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400110e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
24001110:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
24001114:	f005 fa80 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24001118:	2208      	movs	r2, #8
2400111a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2400111e:	4640      	mov	r0, r8
24001120:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001122:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_3;
24001124:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24001128:	f005 fa76 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB0 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
2400112c:	f242 4205 	movw	r2, #9221	; 0x2405
24001130:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001132:	a90a      	add	r1, sp, #40	; 0x28
24001134:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001136:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_10;
24001138:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400113c:	f005 fa6c 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
24001140:	22c0      	movs	r2, #192	; 0xc0
24001142:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001144:	a90a      	add	r1, sp, #40	; 0x28
24001146:	482a      	ldr	r0, [pc, #168]	; (240011f0 <MX_GPIO_Init+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001148:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
2400114a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
2400114e:	f005 fa63 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
24001152:	2202      	movs	r2, #2
24001154:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001156:	a90a      	add	r1, sp, #40	; 0x28
24001158:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400115a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_1;
2400115c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001160:	f005 fa5a 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
24001164:	2309      	movs	r3, #9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001166:	a90a      	add	r1, sp, #40	; 0x28
24001168:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
2400116a:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
2400116c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2400116e:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001172:	f005 fa51 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
24001176:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2400117a:	4648      	mov	r0, r9
2400117c:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11;
2400117e:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
24001180:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24001182:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24001186:	f005 fa47 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
2400118a:	2204      	movs	r2, #4
2400118c:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400118e:	4638      	mov	r0, r7
24001190:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
24001192:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_2;
24001194:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24001198:	f005 fa3e 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
2400119c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240011a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240011a4:	a90a      	add	r1, sp, #40	; 0x28
240011a6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
240011a8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_12;
240011aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240011ae:	f005 fa33 	bl	24006618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
240011b2:	2300      	movs	r3, #0
240011b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240011b8:	4630      	mov	r0, r6
240011ba:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
240011bc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
240011be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240011c2:	f005 fa29 	bl	24006618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
240011c6:	4622      	mov	r2, r4
240011c8:	4621      	mov	r1, r4
240011ca:	2017      	movs	r0, #23
240011cc:	f003 fb7c 	bl	240048c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
240011d0:	2017      	movs	r0, #23
240011d2:	f003 fbb7 	bl	24004944 <HAL_NVIC_EnableIRQ>

}
240011d6:	b010      	add	sp, #64	; 0x40
240011d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
240011dc:	58024400 	.word	0x58024400
240011e0:	58020400 	.word	0x58020400
240011e4:	58020000 	.word	0x58020000
240011e8:	58022000 	.word	0x58022000
240011ec:	58021400 	.word	0x58021400
240011f0:	58021c00 	.word	0x58021c00
240011f4:	58021800 	.word	0x58021800
240011f8:	58020800 	.word	0x58020800
240011fc:	58020c00 	.word	0x58020c00

24001200 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
24001200:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
24001202:	481c      	ldr	r0, [pc, #112]	; (24001274 <MX_I2C1_Init+0x74>)
  hi2c1.Init.Timing = 0x0050174F;
  hi2c1.Init.OwnAddress1 = 68;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
24001204:	2300      	movs	r3, #0
  hi2c1.Init.Timing = 0x0050174F;
24001206:	4a1c      	ldr	r2, [pc, #112]	; (24001278 <MX_I2C1_Init+0x78>)
  hi2c1.Init.OwnAddress1 = 68;
24001208:	2144      	movs	r1, #68	; 0x44
  hi2c1.Instance = I2C1;
2400120a:	4c1c      	ldr	r4, [pc, #112]	; (2400127c <MX_I2C1_Init+0x7c>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
2400120c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 68;
2400120e:	6081      	str	r1, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
24001210:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
24001212:	6203      	str	r3, [r0, #32]
  hi2c1.Init.Timing = 0x0050174F;
24001214:	e9c0 4200 	strd	r4, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001218:	2201      	movs	r2, #1
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
2400121a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
2400121e:	60c2      	str	r2, [r0, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
24001220:	f005 fc1a 	bl	24006a58 <HAL_I2C_Init>
24001224:	b970      	cbnz	r0, 24001244 <MX_I2C1_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001226:	2100      	movs	r1, #0
24001228:	4812      	ldr	r0, [pc, #72]	; (24001274 <MX_I2C1_Init+0x74>)
2400122a:	f006 f9bb 	bl	240075a4 <HAL_I2CEx_ConfigAnalogFilter>
2400122e:	b988      	cbnz	r0, 24001254 <MX_I2C1_Init+0x54>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24001230:	2100      	movs	r1, #0
24001232:	4810      	ldr	r0, [pc, #64]	; (24001274 <MX_I2C1_Init+0x74>)
24001234:	f006 f9ea 	bl	2400760c <HAL_I2CEx_ConfigDigitalFilter>
24001238:	b9a0      	cbnz	r0, 24001264 <MX_I2C1_Init+0x64>
    Error_Handler();
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
2400123a:	2001      	movs	r0, #1
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
2400123c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
24001240:	f006 ba10 	b.w	24007664 <HAL_I2CEx_EnableFastModePlus>
    Error_Handler();
24001244:	f002 f88a 	bl	2400335c <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
24001248:	2100      	movs	r1, #0
2400124a:	480a      	ldr	r0, [pc, #40]	; (24001274 <MX_I2C1_Init+0x74>)
2400124c:	f006 f9aa 	bl	240075a4 <HAL_I2CEx_ConfigAnalogFilter>
24001250:	2800      	cmp	r0, #0
24001252:	d0ed      	beq.n	24001230 <MX_I2C1_Init+0x30>
    Error_Handler();
24001254:	f002 f882 	bl	2400335c <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
24001258:	2100      	movs	r1, #0
2400125a:	4806      	ldr	r0, [pc, #24]	; (24001274 <MX_I2C1_Init+0x74>)
2400125c:	f006 f9d6 	bl	2400760c <HAL_I2CEx_ConfigDigitalFilter>
24001260:	2800      	cmp	r0, #0
24001262:	d0ea      	beq.n	2400123a <MX_I2C1_Init+0x3a>
    Error_Handler();
24001264:	f002 f87a 	bl	2400335c <Error_Handler>
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
24001268:	2001      	movs	r0, #1
}
2400126a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
2400126e:	f006 b9f9 	b.w	24007664 <HAL_I2CEx_EnableFastModePlus>
24001272:	bf00      	nop
24001274:	2001438c 	.word	0x2001438c
24001278:	0050174f 	.word	0x0050174f
2400127c:	40005400 	.word	0x40005400

24001280 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
24001280:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
24001282:	4817      	ldr	r0, [pc, #92]	; (240012e0 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
24001284:	2300      	movs	r3, #0
24001286:	4917      	ldr	r1, [pc, #92]	; (240012e4 <MX_I2C2_Init+0x64>)
24001288:	2401      	movs	r4, #1
2400128a:	4a17      	ldr	r2, [pc, #92]	; (240012e8 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
2400128c:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
2400128e:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
24001292:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
24001296:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
2400129a:	f005 fbdd 	bl	24006a58 <HAL_I2C_Init>
2400129e:	b950      	cbnz	r0, 240012b6 <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
240012a0:	2100      	movs	r1, #0
240012a2:	480f      	ldr	r0, [pc, #60]	; (240012e0 <MX_I2C2_Init+0x60>)
240012a4:	f006 f97e 	bl	240075a4 <HAL_I2CEx_ConfigAnalogFilter>
240012a8:	b968      	cbnz	r0, 240012c6 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
240012aa:	2100      	movs	r1, #0
240012ac:	480c      	ldr	r0, [pc, #48]	; (240012e0 <MX_I2C2_Init+0x60>)
240012ae:	f006 f9ad 	bl	2400760c <HAL_I2CEx_ConfigDigitalFilter>
240012b2:	b980      	cbnz	r0, 240012d6 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
240012b4:	bd10      	pop	{r4, pc}
    Error_Handler();
240012b6:	f002 f851 	bl	2400335c <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
240012ba:	2100      	movs	r1, #0
240012bc:	4808      	ldr	r0, [pc, #32]	; (240012e0 <MX_I2C2_Init+0x60>)
240012be:	f006 f971 	bl	240075a4 <HAL_I2CEx_ConfigAnalogFilter>
240012c2:	2800      	cmp	r0, #0
240012c4:	d0f1      	beq.n	240012aa <MX_I2C2_Init+0x2a>
    Error_Handler();
240012c6:	f002 f849 	bl	2400335c <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
240012ca:	2100      	movs	r1, #0
240012cc:	4804      	ldr	r0, [pc, #16]	; (240012e0 <MX_I2C2_Init+0x60>)
240012ce:	f006 f99d 	bl	2400760c <HAL_I2CEx_ConfigDigitalFilter>
240012d2:	2800      	cmp	r0, #0
240012d4:	d0ee      	beq.n	240012b4 <MX_I2C2_Init+0x34>
}
240012d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
240012da:	f002 b83f 	b.w	2400335c <Error_Handler>
240012de:	bf00      	nop
240012e0:	200143e0 	.word	0x200143e0
240012e4:	40005800 	.word	0x40005800
240012e8:	00b03fdb 	.word	0x00b03fdb

240012ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
240012ec:	b5f0      	push	{r4, r5, r6, r7, lr}
240012ee:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
240012f0:	2100      	movs	r1, #0
{
240012f2:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
240012f4:	22c0      	movs	r2, #192	; 0xc0
240012f6:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
240012f8:	910a      	str	r1, [sp, #40]	; 0x28
240012fa:	e9cd 1106 	strd	r1, r1, [sp, #24]
240012fe:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001302:	f018 fb49 	bl	24019998 <memset>
  if(i2cHandle->Instance==I2C1)
24001306:	6823      	ldr	r3, [r4, #0]
24001308:	4a79      	ldr	r2, [pc, #484]	; (240014f0 <HAL_I2C_MspInit+0x204>)
2400130a:	4293      	cmp	r3, r2
2400130c:	d005      	beq.n	2400131a <HAL_I2C_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
2400130e:	4a79      	ldr	r2, [pc, #484]	; (240014f4 <HAL_I2C_MspInit+0x208>)
24001310:	4293      	cmp	r3, r2
24001312:	f000 8087 	beq.w	24001424 <HAL_I2C_MspInit+0x138>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
24001316:	b03d      	add	sp, #244	; 0xf4
24001318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
2400131a:	2208      	movs	r2, #8
2400131c:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400131e:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
24001320:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001324:	f007 f8a4 	bl	24008470 <HAL_RCCEx_PeriphCLKConfig>
24001328:	2800      	cmp	r0, #0
2400132a:	f040 80db 	bne.w	240014e4 <HAL_I2C_MspInit+0x1f8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400132e:	4d72      	ldr	r5, [pc, #456]	; (240014f8 <HAL_I2C_MspInit+0x20c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001330:	f44f 7240 	mov.w	r2, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
24001334:	2704      	movs	r7, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001336:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001338:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    hdma_i2c1_rx.Instance = DMA1_Stream3;
2400133c:	4e6f      	ldr	r6, [pc, #444]	; (240014fc <HAL_I2C_MspInit+0x210>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400133e:	f043 0302 	orr.w	r3, r3, #2
24001342:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
24001346:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
2400134a:	970a      	str	r7, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400134c:	f003 0302 	and.w	r3, r3, #2
24001350:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001352:	2312      	movs	r3, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001354:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001356:	486a      	ldr	r0, [pc, #424]	; (24001500 <HAL_I2C_MspInit+0x214>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
24001358:	e9cd 2306 	strd	r2, r3, [sp, #24]
2400135c:	2200      	movs	r2, #0
2400135e:	2302      	movs	r3, #2
24001360:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001364:	f005 f958 	bl	24006618 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
24001368:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400136c:	2201      	movs	r2, #1
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2400136e:	6277      	str	r7, [r6, #36]	; 0x24
    __HAL_RCC_I2C1_CLK_ENABLE();
24001370:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
24001374:	4630      	mov	r0, r6
    __HAL_RCC_I2C1_CLK_ENABLE();
24001376:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
2400137a:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400137e:	62b2      	str	r2, [r6, #40]	; 0x28
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001380:	4a60      	ldr	r2, [pc, #384]	; (24001504 <HAL_I2C_MspInit+0x218>)
    __HAL_RCC_I2C1_CLK_ENABLE();
24001382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    hdma_i2c1_rx.Instance = DMA1_Stream3;
24001386:	6032      	str	r2, [r6, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
24001388:	2221      	movs	r2, #33	; 0x21
    __HAL_RCC_I2C1_CLK_ENABLE();
2400138a:	9302      	str	r3, [sp, #8]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
2400138c:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
2400138e:	6072      	str	r2, [r6, #4]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
24001390:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_I2C1_CLK_ENABLE();
24001394:	9902      	ldr	r1, [sp, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
24001396:	6132      	str	r2, [r6, #16]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24001398:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
2400139c:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240013a0:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
240013a4:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240013a8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
240013ac:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
240013b0:	f003 fc1c 	bl	24004bec <HAL_DMA_Init>
240013b4:	2800      	cmp	r0, #0
240013b6:	f040 8092 	bne.w	240014de <HAL_I2C_MspInit+0x1f2>
    hdma_i2c1_tx.Instance = DMA1_Stream4;
240013ba:	4d53      	ldr	r5, [pc, #332]	; (24001508 <HAL_I2C_MspInit+0x21c>)
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
240013bc:	2222      	movs	r2, #34	; 0x22
    hdma_i2c1_tx.Instance = DMA1_Stream4;
240013be:	4953      	ldr	r1, [pc, #332]	; (2400150c <HAL_I2C_MspInit+0x220>)
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240013c0:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
240013c2:	606a      	str	r2, [r5, #4]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
240013c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Instance = DMA1_Stream4;
240013c8:	6029      	str	r1, [r5, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
240013ca:	2140      	movs	r1, #64	; 0x40
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
240013cc:	612a      	str	r2, [r5, #16]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240013ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
240013d2:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
240013d4:	4628      	mov	r0, r5
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
240013d6:	616b      	str	r3, [r5, #20]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
240013d8:	60a9      	str	r1, [r5, #8]
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
240013da:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
240013de:	61ab      	str	r3, [r5, #24]
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
240013e0:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
240013e2:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240013e4:	2301      	movs	r3, #1
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
240013e6:	622a      	str	r2, [r5, #32]
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240013e8:	2204      	movs	r2, #4
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
240013ea:	63e6      	str	r6, [r4, #60]	; 0x3c
240013ec:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.Mode = DMA_CIRCULAR;
240013ee:	61e9      	str	r1, [r5, #28]
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
240013f0:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
240013f4:	f003 fbfa 	bl	24004bec <HAL_DMA_Init>
240013f8:	2800      	cmp	r0, #0
240013fa:	d16d      	bne.n	240014d8 <HAL_I2C_MspInit+0x1ec>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
240013fc:	2200      	movs	r2, #0
240013fe:	2101      	movs	r1, #1
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
24001400:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24001402:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
24001404:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
24001406:	f003 fa5f 	bl	240048c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
2400140a:	201f      	movs	r0, #31
2400140c:	f003 fa9a 	bl	24004944 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
24001410:	2200      	movs	r2, #0
24001412:	2101      	movs	r1, #1
24001414:	2020      	movs	r0, #32
24001416:	f003 fa57 	bl	240048c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
2400141a:	2020      	movs	r0, #32
2400141c:	f003 fa92 	bl	24004944 <HAL_NVIC_EnableIRQ>
}
24001420:	b03d      	add	sp, #244	; 0xf4
24001422:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
24001424:	2208      	movs	r2, #8
24001426:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001428:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
2400142a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400142e:	f007 f81f 	bl	24008470 <HAL_RCCEx_PeriphCLKConfig>
24001432:	2800      	cmp	r0, #0
24001434:	d159      	bne.n	240014ea <HAL_I2C_MspInit+0x1fe>
    __HAL_RCC_GPIOH_CLK_ENABLE();
24001436:	4c30      	ldr	r4, [pc, #192]	; (240014f8 <HAL_I2C_MspInit+0x20c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24001438:	2010      	movs	r0, #16
2400143a:	2112      	movs	r1, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
2400143c:	2504      	movs	r5, #4
    __HAL_RCC_GPIOH_CLK_ENABLE();
2400143e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24001442:	2600      	movs	r6, #0
24001444:	2703      	movs	r7, #3
    __HAL_RCC_GPIOH_CLK_ENABLE();
24001446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400144a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
2400144e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
24001452:	f003 0380 	and.w	r3, r3, #128	; 0x80
24001456:	9303      	str	r3, [sp, #12]
24001458:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400145a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
2400145e:	f043 0302 	orr.w	r3, r3, #2
24001462:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
24001466:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
2400146a:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400146c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
24001470:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24001474:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001476:	a906      	add	r1, sp, #24
24001478:	4825      	ldr	r0, [pc, #148]	; (24001510 <HAL_I2C_MspInit+0x224>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
2400147a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
2400147c:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
24001480:	f005 f8ca 	bl	24006618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
24001484:	f44f 6200 	mov.w	r2, #2048	; 0x800
24001488:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400148a:	a906      	add	r1, sp, #24
2400148c:	481c      	ldr	r0, [pc, #112]	; (24001500 <HAL_I2C_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
2400148e:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11;
24001490:	e9cd 2306 	strd	r2, r3, [sp, #24]
24001494:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24001498:	f005 f8be 	bl	24006618 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
2400149c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
240014a0:	2200      	movs	r2, #0
240014a2:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
240014a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
240014a8:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
240014aa:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
240014ae:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
240014b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
240014b6:	9305      	str	r3, [sp, #20]
240014b8:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
240014ba:	f003 fa05 	bl	240048c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
240014be:	2021      	movs	r0, #33	; 0x21
240014c0:	f003 fa40 	bl	24004944 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
240014c4:	2200      	movs	r2, #0
240014c6:	2101      	movs	r1, #1
240014c8:	2022      	movs	r0, #34	; 0x22
240014ca:	f003 f9fd 	bl	240048c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
240014ce:	2022      	movs	r0, #34	; 0x22
240014d0:	f003 fa38 	bl	24004944 <HAL_NVIC_EnableIRQ>
}
240014d4:	b03d      	add	sp, #244	; 0xf4
240014d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
240014d8:	f001 ff40 	bl	2400335c <Error_Handler>
240014dc:	e78e      	b.n	240013fc <HAL_I2C_MspInit+0x110>
      Error_Handler();
240014de:	f001 ff3d 	bl	2400335c <Error_Handler>
240014e2:	e76a      	b.n	240013ba <HAL_I2C_MspInit+0xce>
      Error_Handler();
240014e4:	f001 ff3a 	bl	2400335c <Error_Handler>
240014e8:	e721      	b.n	2400132e <HAL_I2C_MspInit+0x42>
      Error_Handler();
240014ea:	f001 ff37 	bl	2400335c <Error_Handler>
240014ee:	e7a2      	b.n	24001436 <HAL_I2C_MspInit+0x14a>
240014f0:	40005400 	.word	0x40005400
240014f4:	40005800 	.word	0x40005800
240014f8:	58024400 	.word	0x58024400
240014fc:	2001429c 	.word	0x2001429c
24001500:	58020400 	.word	0x58020400
24001504:	40020058 	.word	0x40020058
24001508:	20014314 	.word	0x20014314
2400150c:	40020070 	.word	0x40020070
24001510:	58021c00 	.word	0x58021c00

24001514 <SystemClock_Config>:
  }
  /* USER CODE END 3 */
}

void SystemClock_Config(void)
{
24001514:	b530      	push	{r4, r5, lr}
24001516:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
24001518:	224c      	movs	r2, #76	; 0x4c
2400151a:	2100      	movs	r1, #0
2400151c:	a80c      	add	r0, sp, #48	; 0x30
2400151e:	f018 fa3b 	bl	24019998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
24001522:	2220      	movs	r2, #32
24001524:	2100      	movs	r1, #0
24001526:	a804      	add	r0, sp, #16
24001528:	f018 fa36 	bl	24019998 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
2400152c:	2002      	movs	r0, #2
2400152e:	f006 f8b1 	bl	24007694 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
24001532:	4b35      	ldr	r3, [pc, #212]	; (24001608 <SystemClock_Config+0xf4>)
24001534:	2100      	movs	r1, #0
24001536:	4a35      	ldr	r2, [pc, #212]	; (2400160c <SystemClock_Config+0xf8>)
24001538:	9101      	str	r1, [sp, #4]
2400153a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
2400153c:	f021 0101 	bic.w	r1, r1, #1
24001540:	62d9      	str	r1, [r3, #44]	; 0x2c
24001542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001544:	f003 0301 	and.w	r3, r3, #1
24001548:	9301      	str	r3, [sp, #4]
2400154a:	6993      	ldr	r3, [r2, #24]
2400154c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24001550:	6193      	str	r3, [r2, #24]
24001552:	6993      	ldr	r3, [r2, #24]
24001554:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24001558:	9301      	str	r3, [sp, #4]
2400155a:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
2400155c:	6993      	ldr	r3, [r2, #24]
2400155e:	0499      	lsls	r1, r3, #18
24001560:	d5fc      	bpl.n	2400155c <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24001562:	4b2b      	ldr	r3, [pc, #172]	; (24001610 <SystemClock_Config+0xfc>)
24001564:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
24001568:	f041 0102 	orr.w	r1, r1, #2
2400156c:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24001570:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24001572:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24001576:	f003 0302 	and.w	r3, r3, #2
2400157a:	9302      	str	r3, [sp, #8]
2400157c:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
2400157e:	9103      	str	r1, [sp, #12]
24001580:	6991      	ldr	r1, [r2, #24]
24001582:	4b21      	ldr	r3, [pc, #132]	; (24001608 <SystemClock_Config+0xf4>)
24001584:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
24001588:	6191      	str	r1, [r2, #24]
2400158a:	6992      	ldr	r2, [r2, #24]
2400158c:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
24001590:	9203      	str	r2, [sp, #12]
24001592:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24001594:	4a1d      	ldr	r2, [pc, #116]	; (2400160c <SystemClock_Config+0xf8>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24001596:	f041 0101 	orr.w	r1, r1, #1
2400159a:	62d9      	str	r1, [r3, #44]	; 0x2c
2400159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400159e:	f003 0301 	and.w	r3, r3, #1
240015a2:	9303      	str	r3, [sp, #12]
240015a4:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
240015a6:	6993      	ldr	r3, [r2, #24]
240015a8:	049b      	lsls	r3, r3, #18
240015aa:	d5fc      	bpl.n	240015a6 <SystemClock_Config+0x92>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
240015ac:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
240015ae:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 6;
  RCC_OscInitStruct.PLL.PLLR = 8;
240015b0:	2508      	movs	r5, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
240015b2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLP = 2;
240015b6:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
240015b8:	2021      	movs	r0, #33	; 0x21
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
240015ba:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
240015bc:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
240015be:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 60;
240015c0:	223c      	movs	r2, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
240015c2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 6;
240015c6:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLN = 60;
240015c8:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 6;
240015ca:	e9cd 351a 	strd	r3, r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
240015ce:	230c      	movs	r3, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
240015d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
240015d4:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
240015d6:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
240015d8:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
240015dc:	f006 f904 	bl	240077e8 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
240015e0:	213f      	movs	r1, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
240015e2:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
240015e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
240015e8:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
240015ea:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
240015ec:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
240015ee:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
240015f0:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
240015f2:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
240015f4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
240015f6:	e9cd 5307 	strd	r5, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
240015fa:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
240015fe:	f006 fc87 	bl	24007f10 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
24001602:	b021      	add	sp, #132	; 0x84
24001604:	bd30      	pop	{r4, r5, pc}
24001606:	bf00      	nop
24001608:	58000400 	.word	0x58000400
2400160c:	58024800 	.word	0x58024800
24001610:	58024400 	.word	0x58024400
24001614:	00000000 	.word	0x00000000

24001618 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
24001618:	b510      	push	{r4, lr}
2400161a:	b0b0      	sub	sp, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400161c:	22a0      	movs	r2, #160	; 0xa0
2400161e:	2100      	movs	r1, #0
  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_SAI1;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
  PeriphClkInitStruct.PLL2.PLL2N = 37;
24001620:	2425      	movs	r4, #37	; 0x25
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24001622:	a808      	add	r0, sp, #32
24001624:	f018 f9b8 	bl	24019998 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 1;
24001628:	2101      	movs	r1, #1
  PeriphClkInitStruct.PLL2.PLL2P = 8;
2400162a:	2208      	movs	r2, #8
  PeriphClkInitStruct.PLL2.PLL2R = 3;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
  PeriphClkInitStruct.PLL3.PLL3N = 12;
2400162c:	200c      	movs	r0, #12
  PeriphClkInitStruct.PLL2.PLL2M = 1;
2400162e:	9102      	str	r1, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
24001630:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL3.PLL3M = 1;
24001632:	910a      	str	r1, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 4;
24001634:	2104      	movs	r1, #4
  PeriphClkInitStruct.PLL2.PLL2N = 37;
24001636:	9403      	str	r4, [sp, #12]
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
  PeriphClkInitStruct.PLL3.PLL3R = 16;
24001638:	2410      	movs	r4, #16
  PeriphClkInitStruct.PLL3.PLL3N = 12;
2400163a:	900b      	str	r0, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
2400163c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
24001640:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
24001642:	9204      	str	r2, [sp, #16]
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
24001644:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
24001646:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 24001680 <PeriphCommonClock_Config+0x68>
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
2400164a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3FRACN = 2360;
2400164e:	f640 1138 	movw	r1, #2360	; 0x938
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
24001652:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC|RCC_PERIPHCLK_SDMMC
24001656:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
2400165a:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 24001688 <PeriphCommonClock_Config+0x70>
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
2400165e:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
24001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
24001666:	9214      	str	r2, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
24001668:	e9cd 400e 	strd	r4, r0, [sp, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400166c:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
2400166e:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLL2.PLL2R = 3;
24001670:	ed8d 7b06 	vstr	d7, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24001674:	f006 fefc 	bl	24008470 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
24001678:	b030      	add	sp, #192	; 0xc0
2400167a:	bd10      	pop	{r4, pc}
2400167c:	f3af 8000 	nop.w
24001680:	01010100 	.word	0x01010100
24001684:	00000000 	.word	0x00000000
24001688:	00000003 	.word	0x00000003
2400168c:	000000c0 	.word	0x000000c0

24001690 <BSP_SD_IsDetected>:
}



uint8_t BSP_SD_IsDetected(void)
{
24001690:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
24001692:	2301      	movs	r3, #1
24001694:	f88d 3007 	strb.w	r3, [sp, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  //{
  //  status = SD_NOT_PRESENT;
  //}

  return status;
24001698:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
2400169c:	b002      	add	sp, #8
2400169e:	4770      	bx	lr

240016a0 <getPresetNamesFromSDCard>:

void getPresetNamesFromSDCard(void)
{
240016a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
240016a4:	2301      	movs	r3, #1
{
240016a6:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
240016a8:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
240016ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
240016b0:	b93b      	cbnz	r3, 240016c2 <getPresetNamesFromSDCard+0x22>
240016b2:	f8df a078 	ldr.w	sl, [pc, #120]	; 2400172c <getPresetNamesFromSDCard+0x8c>
			}

		}

	}
	diskBusy = 0;
240016b6:	2300      	movs	r3, #0
240016b8:	f88a 3000 	strb.w	r3, [sl]
	return;
}
240016bc:	b009      	add	sp, #36	; 0x24
240016be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240016c2:	4b14      	ldr	r3, [pc, #80]	; (24001714 <getPresetNamesFromSDCard+0x74>)
240016c4:	075a      	lsls	r2, r3, #29
240016c6:	f040 830c 	bne.w	24001ce2 <getPresetNamesFromSDCard+0x642>
			audioOutBuffer[i] = 0;
240016ca:	2000      	movs	r0, #0
240016cc:	2100      	movs	r1, #0
240016ce:	f503 6280 	add.w	r2, r3, #1024	; 0x400
240016d2:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
240016d6:	429a      	cmp	r2, r3
240016d8:	d1fb      	bne.n	240016d2 <getPresetNamesFromSDCard+0x32>
		loadFailed = 0;
240016da:	2400      	movs	r4, #0
240016dc:	4b0e      	ldr	r3, [pc, #56]	; (24001718 <getPresetNamesFromSDCard+0x78>)
		diskBusy = 1;
240016de:	2501      	movs	r5, #1
240016e0:	f8df a048 	ldr.w	sl, [pc, #72]	; 2400172c <getPresetNamesFromSDCard+0x8c>
		disk_initialize(0);
240016e4:	4620      	mov	r0, r4
		loadFailed = 0;
240016e6:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
240016e8:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
240016ec:	f00b fd50 	bl	2400d190 <disk_initialize>
	    disk_status(0);
240016f0:	4620      	mov	r0, r4
240016f2:	f00b fd43 	bl	2400d17c <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
240016f6:	462a      	mov	r2, r5
240016f8:	4908      	ldr	r1, [pc, #32]	; (2400171c <getPresetNamesFromSDCard+0x7c>)
240016fa:	4809      	ldr	r0, [pc, #36]	; (24001720 <getPresetNamesFromSDCard+0x80>)
240016fc:	f00d ffb8 	bl	2400f670 <f_mount>
24001700:	2800      	cmp	r0, #0
24001702:	d1d8      	bne.n	240016b6 <getPresetNamesFromSDCard+0x16>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
24001704:	4605      	mov	r5, r0
24001706:	4e07      	ldr	r6, [pc, #28]	; (24001724 <getPresetNamesFromSDCard+0x84>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24001708:	f8df 9010 	ldr.w	r9, [pc, #16]	; 2400171c <getPresetNamesFromSDCard+0x7c>
2400170c:	f8df 8020 	ldr.w	r8, [pc, #32]	; 24001730 <getPresetNamesFromSDCard+0x90>
24001710:	4f05      	ldr	r7, [pc, #20]	; (24001728 <getPresetNamesFromSDCard+0x88>)
24001712:	e027      	b.n	24001764 <getPresetNamesFromSDCard+0xc4>
24001714:	30000000 	.word	0x30000000
24001718:	20018674 	.word	0x20018674
2400171c:	2001dec0 	.word	0x2001dec0
24001720:	2001da60 	.word	0x2001da60
24001724:	2401c580 	.word	0x2401c580
24001728:	20014458 	.word	0x20014458
2400172c:	20014490 	.word	0x20014490
24001730:	200164f8 	.word	0x200164f8
					strcat(charBuf, "*.ebp");
24001734:	aa02      	add	r2, sp, #8
24001736:	6830      	ldr	r0, [r6, #0]
24001738:	88b1      	ldrh	r1, [r6, #4]
2400173a:	f10d 0c08 	add.w	ip, sp, #8
2400173e:	18d4      	adds	r4, r2, r3
					strcpy(finalString, charBuf);
24001740:	1d9a      	adds	r2, r3, #6
					strcat(charBuf, "*.ebp");
24001742:	f84c 0003 	str.w	r0, [ip, r3]
					strcpy(finalString, charBuf);
24001746:	a805      	add	r0, sp, #20
					strcat(charBuf, "*.ebp");
24001748:	80a1      	strh	r1, [r4, #4]
					strcpy(finalString, charBuf);
2400174a:	4661      	mov	r1, ip
2400174c:	f018 f956 	bl	240199fc <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24001750:	ab05      	add	r3, sp, #20
24001752:	464a      	mov	r2, r9
24001754:	4641      	mov	r1, r8
24001756:	4638      	mov	r0, r7
24001758:	f00e fca2 	bl	240100a0 <f_findfirst>
				if(res == FR_OK)
2400175c:	b358      	cbz	r0, 240017b6 <getPresetNamesFromSDCard+0x116>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
2400175e:	3501      	adds	r5, #1
24001760:	2d40      	cmp	r5, #64	; 0x40
24001762:	d0a8      	beq.n	240016b6 <getPresetNamesFromSDCard+0x16>
				itoa(i, charBuf, 10);
24001764:	220a      	movs	r2, #10
24001766:	a902      	add	r1, sp, #8
24001768:	4628      	mov	r0, r5
2400176a:	f018 f8d1 	bl	24019910 <itoa>
				int len = ((strlen(charBuf)));
2400176e:	a802      	add	r0, sp, #8
24001770:	f7fe fdb2 	bl	240002d8 <strlen>
				if (len == 1)
24001774:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
24001776:	4603      	mov	r3, r0
				if (len == 1)
24001778:	d1dc      	bne.n	24001734 <getPresetNamesFromSDCard+0x94>
					finalString[2] = charBuf[1];
2400177a:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
2400177e:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
24001780:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, "*.ebp");
24001784:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
24001786:	f88d 1016 	strb.w	r1, [sp, #22]
					strcat(finalString, "*.ebp");
2400178a:	ac05      	add	r4, sp, #20
					finalString[1] = charBuf[0];
2400178c:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
24001790:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
24001794:	f7fe fda0 	bl	240002d8 <strlen>
24001798:	a905      	add	r1, sp, #20
2400179a:	4603      	mov	r3, r0
2400179c:	88b2      	ldrh	r2, [r6, #4]
2400179e:	4419      	add	r1, r3
240017a0:	6830      	ldr	r0, [r6, #0]
240017a2:	50e0      	str	r0, [r4, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240017a4:	ab05      	add	r3, sp, #20
					strcat(finalString, "*.ebp");
240017a6:	808a      	strh	r2, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240017a8:	4638      	mov	r0, r7
240017aa:	464a      	mov	r2, r9
240017ac:	4641      	mov	r1, r8
240017ae:	f00e fc77 	bl	240100a0 <f_findfirst>
				if(res == FR_OK)
240017b2:	2800      	cmp	r0, #0
240017b4:	d1d3      	bne.n	2400175e <getPresetNamesFromSDCard+0xbe>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
240017b6:	f8df b374 	ldr.w	fp, [pc, #884]	; 24001b2c <getPresetNamesFromSDCard+0x48c>
240017ba:	2211      	movs	r2, #17
240017bc:	49d7      	ldr	r1, [pc, #860]	; (24001b1c <getPresetNamesFromSDCard+0x47c>)
240017be:	4658      	mov	r0, fp
240017c0:	f00d ffa2 	bl	2400f708 <f_open>
240017c4:	2800      	cmp	r0, #0
240017c6:	d1ca      	bne.n	2400175e <getPresetNamesFromSDCard+0xbe>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
240017c8:	4cd5      	ldr	r4, [pc, #852]	; (24001b20 <getPresetNamesFromSDCard+0x480>)
240017ca:	ab01      	add	r3, sp, #4
240017cc:	f8db 200c 	ldr.w	r2, [fp, #12]
240017d0:	4658      	mov	r0, fp
240017d2:	4621      	mov	r1, r4
240017d4:	f00e f8fa 	bl	2400f9cc <f_read>
						f_close(&SDFile);
240017d8:	4658      	mov	r0, fp
240017da:	f00e fb61 	bl	2400fea0 <f_close>
						if (buffer[bufferIndex] == 17)
240017de:	7822      	ldrb	r2, [r4, #0]
							presetNamesArray[i][j] = buffer[bufferIndex];
240017e0:	49d0      	ldr	r1, [pc, #832]	; (24001b24 <getPresetNamesFromSDCard+0x484>)
								macroNamesArray[i][j][k] = buffer[bufferIndex];
240017e2:	20c8      	movs	r0, #200	; 0xc8
						if (buffer[bufferIndex] == 17)
240017e4:	f1a2 0211 	sub.w	r2, r2, #17
								macroNamesArray[i][j][k] = buffer[bufferIndex];
240017e8:	fb05 f000 	mul.w	r0, r5, r0
						if (buffer[bufferIndex] == 17)
240017ec:	fab2 f282 	clz	r2, r2
240017f0:	0952      	lsrs	r2, r2, #5
240017f2:	0093      	lsls	r3, r2, #2
							presetNamesArray[i][j] = buffer[bufferIndex];
240017f4:	f814 c022 	ldrb.w	ip, [r4, r2, lsl #2]
240017f8:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
240017fc:	f801 c012 	strb.w	ip, [r1, r2, lsl #1]
24001800:	f103 0c01 	add.w	ip, r3, #1
24001804:	eb01 0142 	add.w	r1, r1, r2, lsl #1
								macroNamesArray[i][j][k] = buffer[bufferIndex];
24001808:	4ac7      	ldr	r2, [pc, #796]	; (24001b28 <getPresetNamesFromSDCard+0x488>)
							presetNamesArray[i][j] = buffer[bufferIndex];
2400180a:	f814 c00c 	ldrb.w	ip, [r4, ip]
2400180e:	f881 c001 	strb.w	ip, [r1, #1]
24001812:	f103 0c02 	add.w	ip, r3, #2
24001816:	f814 c00c 	ldrb.w	ip, [r4, ip]
2400181a:	f881 c002 	strb.w	ip, [r1, #2]
2400181e:	f103 0c03 	add.w	ip, r3, #3
24001822:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001826:	f881 c003 	strb.w	ip, [r1, #3]
2400182a:	f103 0c04 	add.w	ip, r3, #4
2400182e:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001832:	f881 c004 	strb.w	ip, [r1, #4]
24001836:	f103 0c05 	add.w	ip, r3, #5
2400183a:	f814 c00c 	ldrb.w	ip, [r4, ip]
2400183e:	f881 c005 	strb.w	ip, [r1, #5]
24001842:	f103 0c06 	add.w	ip, r3, #6
24001846:	f814 c00c 	ldrb.w	ip, [r4, ip]
2400184a:	f881 c006 	strb.w	ip, [r1, #6]
2400184e:	f103 0c07 	add.w	ip, r3, #7
24001852:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001856:	f881 c007 	strb.w	ip, [r1, #7]
2400185a:	f103 0c08 	add.w	ip, r3, #8
2400185e:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001862:	f881 c008 	strb.w	ip, [r1, #8]
24001866:	f103 0c09 	add.w	ip, r3, #9
2400186a:	f814 c00c 	ldrb.w	ip, [r4, ip]
2400186e:	f881 c009 	strb.w	ip, [r1, #9]
24001872:	f103 0c0a 	add.w	ip, r3, #10
24001876:	f814 c00c 	ldrb.w	ip, [r4, ip]
2400187a:	f881 c00a 	strb.w	ip, [r1, #10]
2400187e:	f103 0c0b 	add.w	ip, r3, #11
24001882:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001886:	f881 c00b 	strb.w	ip, [r1, #11]
2400188a:	f103 0c0c 	add.w	ip, r3, #12
2400188e:	f814 c00c 	ldrb.w	ip, [r4, ip]
24001892:	f881 c00c 	strb.w	ip, [r1, #12]
24001896:	f103 0c0d 	add.w	ip, r3, #13
2400189a:	f814 c00c 	ldrb.w	ip, [r4, ip]
2400189e:	f881 c00d 	strb.w	ip, [r1, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
240018a2:	f103 010e 	add.w	r1, r3, #14
240018a6:	5c61      	ldrb	r1, [r4, r1]
240018a8:	5411      	strb	r1, [r2, r0]
240018aa:	f103 010f 	add.w	r1, r3, #15
240018ae:	4402      	add	r2, r0
240018b0:	5c61      	ldrb	r1, [r4, r1]
240018b2:	7051      	strb	r1, [r2, #1]
240018b4:	f103 0110 	add.w	r1, r3, #16
240018b8:	5c61      	ldrb	r1, [r4, r1]
240018ba:	7091      	strb	r1, [r2, #2]
240018bc:	f103 0111 	add.w	r1, r3, #17
240018c0:	5c61      	ldrb	r1, [r4, r1]
240018c2:	70d1      	strb	r1, [r2, #3]
240018c4:	f103 0112 	add.w	r1, r3, #18
240018c8:	5c61      	ldrb	r1, [r4, r1]
240018ca:	7111      	strb	r1, [r2, #4]
240018cc:	f103 0113 	add.w	r1, r3, #19
240018d0:	5c61      	ldrb	r1, [r4, r1]
240018d2:	7151      	strb	r1, [r2, #5]
240018d4:	f103 0114 	add.w	r1, r3, #20
240018d8:	5c61      	ldrb	r1, [r4, r1]
240018da:	7191      	strb	r1, [r2, #6]
240018dc:	f103 0115 	add.w	r1, r3, #21
240018e0:	5c61      	ldrb	r1, [r4, r1]
240018e2:	71d1      	strb	r1, [r2, #7]
240018e4:	f103 0116 	add.w	r1, r3, #22
240018e8:	5c61      	ldrb	r1, [r4, r1]
240018ea:	7211      	strb	r1, [r2, #8]
240018ec:	f103 0117 	add.w	r1, r3, #23
240018f0:	5c61      	ldrb	r1, [r4, r1]
240018f2:	7291      	strb	r1, [r2, #10]
240018f4:	f103 0118 	add.w	r1, r3, #24
240018f8:	5c61      	ldrb	r1, [r4, r1]
240018fa:	72d1      	strb	r1, [r2, #11]
240018fc:	f103 0119 	add.w	r1, r3, #25
24001900:	5c61      	ldrb	r1, [r4, r1]
24001902:	7311      	strb	r1, [r2, #12]
24001904:	f103 011a 	add.w	r1, r3, #26
24001908:	5c61      	ldrb	r1, [r4, r1]
2400190a:	7351      	strb	r1, [r2, #13]
2400190c:	f103 011b 	add.w	r1, r3, #27
24001910:	5c61      	ldrb	r1, [r4, r1]
24001912:	7391      	strb	r1, [r2, #14]
24001914:	f103 011c 	add.w	r1, r3, #28
24001918:	5c61      	ldrb	r1, [r4, r1]
2400191a:	73d1      	strb	r1, [r2, #15]
2400191c:	f103 011d 	add.w	r1, r3, #29
24001920:	5c61      	ldrb	r1, [r4, r1]
24001922:	7411      	strb	r1, [r2, #16]
24001924:	f103 011e 	add.w	r1, r3, #30
24001928:	5c61      	ldrb	r1, [r4, r1]
2400192a:	7451      	strb	r1, [r2, #17]
2400192c:	f103 011f 	add.w	r1, r3, #31
24001930:	5c61      	ldrb	r1, [r4, r1]
24001932:	7491      	strb	r1, [r2, #18]
24001934:	f103 0120 	add.w	r1, r3, #32
24001938:	5c61      	ldrb	r1, [r4, r1]
2400193a:	7511      	strb	r1, [r2, #20]
2400193c:	f103 0121 	add.w	r1, r3, #33	; 0x21
24001940:	5c61      	ldrb	r1, [r4, r1]
24001942:	7551      	strb	r1, [r2, #21]
24001944:	f103 0122 	add.w	r1, r3, #34	; 0x22
24001948:	5c61      	ldrb	r1, [r4, r1]
2400194a:	7591      	strb	r1, [r2, #22]
2400194c:	f103 0123 	add.w	r1, r3, #35	; 0x23
24001950:	5c61      	ldrb	r1, [r4, r1]
24001952:	75d1      	strb	r1, [r2, #23]
24001954:	f103 0124 	add.w	r1, r3, #36	; 0x24
24001958:	5c61      	ldrb	r1, [r4, r1]
2400195a:	7611      	strb	r1, [r2, #24]
2400195c:	f103 0125 	add.w	r1, r3, #37	; 0x25
24001960:	5c61      	ldrb	r1, [r4, r1]
24001962:	7651      	strb	r1, [r2, #25]
24001964:	f103 0126 	add.w	r1, r3, #38	; 0x26
24001968:	5c61      	ldrb	r1, [r4, r1]
2400196a:	7691      	strb	r1, [r2, #26]
2400196c:	f103 0127 	add.w	r1, r3, #39	; 0x27
24001970:	5c61      	ldrb	r1, [r4, r1]
24001972:	76d1      	strb	r1, [r2, #27]
24001974:	f103 0128 	add.w	r1, r3, #40	; 0x28
24001978:	5c61      	ldrb	r1, [r4, r1]
2400197a:	7711      	strb	r1, [r2, #28]
2400197c:	f103 0129 	add.w	r1, r3, #41	; 0x29
24001980:	5c61      	ldrb	r1, [r4, r1]
24001982:	7791      	strb	r1, [r2, #30]
24001984:	f103 012a 	add.w	r1, r3, #42	; 0x2a
24001988:	5c61      	ldrb	r1, [r4, r1]
2400198a:	77d1      	strb	r1, [r2, #31]
2400198c:	f103 012b 	add.w	r1, r3, #43	; 0x2b
24001990:	5c61      	ldrb	r1, [r4, r1]
24001992:	f882 1020 	strb.w	r1, [r2, #32]
24001996:	f103 012c 	add.w	r1, r3, #44	; 0x2c
2400199a:	5c61      	ldrb	r1, [r4, r1]
2400199c:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
240019a0:	f103 012d 	add.w	r1, r3, #45	; 0x2d
240019a4:	5c61      	ldrb	r1, [r4, r1]
240019a6:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
240019aa:	f103 012e 	add.w	r1, r3, #46	; 0x2e
240019ae:	5c61      	ldrb	r1, [r4, r1]
240019b0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
240019b4:	f103 012f 	add.w	r1, r3, #47	; 0x2f
240019b8:	5c61      	ldrb	r1, [r4, r1]
240019ba:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
240019be:	f103 0130 	add.w	r1, r3, #48	; 0x30
240019c2:	5c61      	ldrb	r1, [r4, r1]
240019c4:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
240019c8:	f103 0131 	add.w	r1, r3, #49	; 0x31
240019cc:	5c61      	ldrb	r1, [r4, r1]
240019ce:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
240019d2:	f103 0132 	add.w	r1, r3, #50	; 0x32
240019d6:	5c61      	ldrb	r1, [r4, r1]
240019d8:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
240019dc:	f103 0133 	add.w	r1, r3, #51	; 0x33
240019e0:	5c61      	ldrb	r1, [r4, r1]
240019e2:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
240019e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
240019ea:	5c61      	ldrb	r1, [r4, r1]
240019ec:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
240019f0:	f103 0135 	add.w	r1, r3, #53	; 0x35
240019f4:	5c61      	ldrb	r1, [r4, r1]
240019f6:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
240019fa:	f103 0136 	add.w	r1, r3, #54	; 0x36
240019fe:	5c61      	ldrb	r1, [r4, r1]
24001a00:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
24001a04:	f103 0137 	add.w	r1, r3, #55	; 0x37
24001a08:	5c61      	ldrb	r1, [r4, r1]
24001a0a:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
24001a0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
24001a12:	5c61      	ldrb	r1, [r4, r1]
24001a14:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
24001a18:	f103 0139 	add.w	r1, r3, #57	; 0x39
24001a1c:	5c61      	ldrb	r1, [r4, r1]
24001a1e:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
24001a22:	f103 013a 	add.w	r1, r3, #58	; 0x3a
24001a26:	5c61      	ldrb	r1, [r4, r1]
24001a28:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
24001a2c:	f103 013b 	add.w	r1, r3, #59	; 0x3b
24001a30:	5c61      	ldrb	r1, [r4, r1]
24001a32:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
24001a36:	f103 013c 	add.w	r1, r3, #60	; 0x3c
24001a3a:	5c61      	ldrb	r1, [r4, r1]
24001a3c:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
24001a40:	f103 013d 	add.w	r1, r3, #61	; 0x3d
24001a44:	5c61      	ldrb	r1, [r4, r1]
24001a46:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
24001a4a:	f103 013e 	add.w	r1, r3, #62	; 0x3e
24001a4e:	5c61      	ldrb	r1, [r4, r1]
24001a50:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
24001a54:	f103 013f 	add.w	r1, r3, #63	; 0x3f
24001a58:	5c61      	ldrb	r1, [r4, r1]
24001a5a:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
24001a5e:	f103 0140 	add.w	r1, r3, #64	; 0x40
24001a62:	5c61      	ldrb	r1, [r4, r1]
24001a64:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
24001a68:	f103 0141 	add.w	r1, r3, #65	; 0x41
24001a6c:	5c61      	ldrb	r1, [r4, r1]
24001a6e:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
24001a72:	f103 0142 	add.w	r1, r3, #66	; 0x42
24001a76:	5c61      	ldrb	r1, [r4, r1]
24001a78:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
24001a7c:	f103 0143 	add.w	r1, r3, #67	; 0x43
24001a80:	5c61      	ldrb	r1, [r4, r1]
24001a82:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
24001a86:	f103 0144 	add.w	r1, r3, #68	; 0x44
24001a8a:	5c61      	ldrb	r1, [r4, r1]
24001a8c:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
24001a90:	f103 0145 	add.w	r1, r3, #69	; 0x45
24001a94:	5c61      	ldrb	r1, [r4, r1]
24001a96:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
24001a9a:	f103 0146 	add.w	r1, r3, #70	; 0x46
24001a9e:	5c61      	ldrb	r1, [r4, r1]
24001aa0:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
24001aa4:	f103 0147 	add.w	r1, r3, #71	; 0x47
24001aa8:	5c61      	ldrb	r1, [r4, r1]
24001aaa:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
24001aae:	f103 0148 	add.w	r1, r3, #72	; 0x48
24001ab2:	5c61      	ldrb	r1, [r4, r1]
24001ab4:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
24001ab8:	f103 0149 	add.w	r1, r3, #73	; 0x49
24001abc:	5c61      	ldrb	r1, [r4, r1]
24001abe:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
24001ac2:	f103 014a 	add.w	r1, r3, #74	; 0x4a
24001ac6:	5c61      	ldrb	r1, [r4, r1]
24001ac8:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
24001acc:	f103 014b 	add.w	r1, r3, #75	; 0x4b
24001ad0:	5c61      	ldrb	r1, [r4, r1]
24001ad2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
24001ad6:	f103 014c 	add.w	r1, r3, #76	; 0x4c
24001ada:	5c61      	ldrb	r1, [r4, r1]
24001adc:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
24001ae0:	f103 014d 	add.w	r1, r3, #77	; 0x4d
24001ae4:	5c61      	ldrb	r1, [r4, r1]
24001ae6:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
24001aea:	f103 014e 	add.w	r1, r3, #78	; 0x4e
24001aee:	5c61      	ldrb	r1, [r4, r1]
24001af0:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
24001af4:	f103 014f 	add.w	r1, r3, #79	; 0x4f
24001af8:	5c61      	ldrb	r1, [r4, r1]
24001afa:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
24001afe:	f103 0150 	add.w	r1, r3, #80	; 0x50
24001b02:	5c61      	ldrb	r1, [r4, r1]
24001b04:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
24001b08:	f103 0151 	add.w	r1, r3, #81	; 0x51
24001b0c:	5c61      	ldrb	r1, [r4, r1]
24001b0e:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
24001b12:	f103 0152 	add.w	r1, r3, #82	; 0x52
24001b16:	5c61      	ldrb	r1, [r4, r1]
24001b18:	e00a      	b.n	24001b30 <getPresetNamesFromSDCard+0x490>
24001b1a:	bf00      	nop
24001b1c:	2001650e 	.word	0x2001650e
24001b20:	30042380 	.word	0x30042380
24001b24:	30042000 	.word	0x30042000
24001b28:	30043380 	.word	0x30043380
24001b2c:	2001dc94 	.word	0x2001dc94
24001b30:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
24001b34:	f103 0153 	add.w	r1, r3, #83	; 0x53
24001b38:	5c61      	ldrb	r1, [r4, r1]
24001b3a:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
24001b3e:	f103 0154 	add.w	r1, r3, #84	; 0x54
24001b42:	5c61      	ldrb	r1, [r4, r1]
24001b44:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
24001b48:	f103 0155 	add.w	r1, r3, #85	; 0x55
24001b4c:	5c61      	ldrb	r1, [r4, r1]
24001b4e:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
24001b52:	f103 0156 	add.w	r1, r3, #86	; 0x56
24001b56:	5c61      	ldrb	r1, [r4, r1]
24001b58:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
24001b5c:	f103 0157 	add.w	r1, r3, #87	; 0x57
24001b60:	5c61      	ldrb	r1, [r4, r1]
24001b62:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
24001b66:	f103 0158 	add.w	r1, r3, #88	; 0x58
24001b6a:	5c61      	ldrb	r1, [r4, r1]
24001b6c:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
24001b70:	f103 0159 	add.w	r1, r3, #89	; 0x59
24001b74:	5c61      	ldrb	r1, [r4, r1]
24001b76:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
24001b7a:	f103 015a 	add.w	r1, r3, #90	; 0x5a
24001b7e:	5c61      	ldrb	r1, [r4, r1]
24001b80:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
24001b84:	f103 015b 	add.w	r1, r3, #91	; 0x5b
24001b88:	5c61      	ldrb	r1, [r4, r1]
24001b8a:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
24001b8e:	f103 015c 	add.w	r1, r3, #92	; 0x5c
24001b92:	5c61      	ldrb	r1, [r4, r1]
24001b94:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
24001b98:	f103 015d 	add.w	r1, r3, #93	; 0x5d
24001b9c:	5c61      	ldrb	r1, [r4, r1]
24001b9e:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
24001ba2:	f103 015e 	add.w	r1, r3, #94	; 0x5e
24001ba6:	5c61      	ldrb	r1, [r4, r1]
24001ba8:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
24001bac:	f103 015f 	add.w	r1, r3, #95	; 0x5f
24001bb0:	5c61      	ldrb	r1, [r4, r1]
24001bb2:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
24001bb6:	f103 0160 	add.w	r1, r3, #96	; 0x60
24001bba:	5c61      	ldrb	r1, [r4, r1]
24001bbc:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
24001bc0:	f103 0161 	add.w	r1, r3, #97	; 0x61
24001bc4:	5c61      	ldrb	r1, [r4, r1]
24001bc6:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
24001bca:	f103 0162 	add.w	r1, r3, #98	; 0x62
24001bce:	5c61      	ldrb	r1, [r4, r1]
24001bd0:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
24001bd4:	f103 0163 	add.w	r1, r3, #99	; 0x63
24001bd8:	5c61      	ldrb	r1, [r4, r1]
24001bda:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
24001bde:	f103 0164 	add.w	r1, r3, #100	; 0x64
24001be2:	5c61      	ldrb	r1, [r4, r1]
24001be4:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
24001be8:	f103 0165 	add.w	r1, r3, #101	; 0x65
24001bec:	5c61      	ldrb	r1, [r4, r1]
24001bee:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
24001bf2:	f103 0166 	add.w	r1, r3, #102	; 0x66
24001bf6:	5c61      	ldrb	r1, [r4, r1]
24001bf8:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
24001bfc:	f103 0167 	add.w	r1, r3, #103	; 0x67
24001c00:	5c61      	ldrb	r1, [r4, r1]
24001c02:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
24001c06:	f103 0168 	add.w	r1, r3, #104	; 0x68
24001c0a:	5c61      	ldrb	r1, [r4, r1]
24001c0c:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
24001c10:	f103 0169 	add.w	r1, r3, #105	; 0x69
24001c14:	5c61      	ldrb	r1, [r4, r1]
24001c16:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
24001c1a:	f103 016a 	add.w	r1, r3, #106	; 0x6a
24001c1e:	5c61      	ldrb	r1, [r4, r1]
24001c20:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
24001c24:	f103 016b 	add.w	r1, r3, #107	; 0x6b
24001c28:	5c61      	ldrb	r1, [r4, r1]
24001c2a:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
24001c2e:	f103 016c 	add.w	r1, r3, #108	; 0x6c
24001c32:	5c61      	ldrb	r1, [r4, r1]
24001c34:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
24001c38:	f103 016d 	add.w	r1, r3, #109	; 0x6d
24001c3c:	5c61      	ldrb	r1, [r4, r1]
24001c3e:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
24001c42:	f103 016e 	add.w	r1, r3, #110	; 0x6e
24001c46:	5c61      	ldrb	r1, [r4, r1]
24001c48:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
24001c4c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
24001c50:	5c61      	ldrb	r1, [r4, r1]
24001c52:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
24001c56:	f103 0170 	add.w	r1, r3, #112	; 0x70
24001c5a:	5c61      	ldrb	r1, [r4, r1]
24001c5c:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
24001c60:	f103 0171 	add.w	r1, r3, #113	; 0x71
24001c64:	5c61      	ldrb	r1, [r4, r1]
24001c66:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
24001c6a:	f103 0172 	add.w	r1, r3, #114	; 0x72
24001c6e:	5c61      	ldrb	r1, [r4, r1]
24001c70:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
24001c74:	f103 0173 	add.w	r1, r3, #115	; 0x73
24001c78:	5c61      	ldrb	r1, [r4, r1]
24001c7a:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
24001c7e:	f103 0174 	add.w	r1, r3, #116	; 0x74
24001c82:	5c61      	ldrb	r1, [r4, r1]
24001c84:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
24001c88:	f103 0175 	add.w	r1, r3, #117	; 0x75
24001c8c:	5c61      	ldrb	r1, [r4, r1]
24001c8e:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
24001c92:	f103 0176 	add.w	r1, r3, #118	; 0x76
24001c96:	5c61      	ldrb	r1, [r4, r1]
24001c98:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
24001c9c:	f103 0177 	add.w	r1, r3, #119	; 0x77
24001ca0:	5c61      	ldrb	r1, [r4, r1]
24001ca2:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
24001ca6:	f103 0178 	add.w	r1, r3, #120	; 0x78
24001caa:	5c61      	ldrb	r1, [r4, r1]
24001cac:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
24001cb0:	f103 0179 	add.w	r1, r3, #121	; 0x79
24001cb4:	5c61      	ldrb	r1, [r4, r1]
24001cb6:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
24001cba:	f103 017a 	add.w	r1, r3, #122	; 0x7a
24001cbe:	5c61      	ldrb	r1, [r4, r1]
24001cc0:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
24001cc4:	f103 017b 	add.w	r1, r3, #123	; 0x7b
24001cc8:	5c61      	ldrb	r1, [r4, r1]
24001cca:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
24001cce:	f103 017c 	add.w	r1, r3, #124	; 0x7c
24001cd2:	337d      	adds	r3, #125	; 0x7d
24001cd4:	5c61      	ldrb	r1, [r4, r1]
24001cd6:	5ce3      	ldrb	r3, [r4, r3]
24001cd8:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
24001cdc:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
						for (int j = 0; j < 4; j++)
24001ce0:	e53d      	b.n	2400175e <getPresetNamesFromSDCard+0xbe>
			audioOutBuffer[i] = 0;
24001ce2:	2200      	movs	r2, #0
24001ce4:	f503 6180 	add.w	r1, r3, #1024	; 0x400
			audioOutBuffer[i + 1] = 0;
24001ce8:	e9c3 2200 	strd	r2, r2, [r3]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24001cec:	3308      	adds	r3, #8
24001cee:	4299      	cmp	r1, r3
24001cf0:	d1fa      	bne.n	24001ce8 <getPresetNamesFromSDCard+0x648>
24001cf2:	e4f2      	b.n	240016da <getPresetNamesFromSDCard+0x3a>

24001cf4 <SDRAM_init>:
#define SDRAM_MODEREG_WRITEBURST_MODE_PROG_BURST ((0 << 9))

#define SDRAM_MODEREG_OPERATING_MODE_STANDARD ((0 << 13)|(0 << 14))

void SDRAM_init()
{
24001cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24001cf8:	4c21      	ldr	r4, [pc, #132]	; (24001d80 <SDRAM_init+0x8c>)
{
24001cfa:	b086      	sub	sp, #24
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
24001cfc:	2501      	movs	r5, #1
	        __IO uint32_t tmpmrd = 0;
24001cfe:	2600      	movs	r6, #0
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
24001d00:	2710      	movs	r7, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24001d02:	a902      	add	r1, sp, #8
24001d04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001d08:	4620      	mov	r0, r4
	        /* Step 4: Insert 100 us delay */
	        HAL_Delay(1);


	        /* Step 5: Configure a PALL (precharge all) command */
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
24001d0a:	f04f 0802 	mov.w	r8, #2
	        __IO uint32_t tmpmrd = 0;
24001d0e:	9601      	str	r6, [sp, #4]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
24001d10:	e9cd 5702 	strd	r5, r7, [sp, #8]
	        Command.ModeRegisterDefinition = 0;
24001d14:	e9cd 5604 	strd	r5, r6, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24001d18:	f009 f922 	bl	2400af60 <HAL_SDRAM_SendCommand>
	        HAL_Delay(1);
24001d1c:	4628      	mov	r0, r5
24001d1e:	f002 fda9 	bl	24004874 <HAL_Delay>
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24001d22:	a902      	add	r1, sp, #8
24001d24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001d28:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
24001d2a:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
24001d2c:	f8cd 8008 	str.w	r8, [sp, #8]
	        Command.AutoRefreshNumber      = 1;
24001d30:	e9cd 7503 	strd	r7, r5, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24001d34:	f009 f914 	bl	2400af60 <HAL_SDRAM_SendCommand>

	        /* Step 6 : Configure a Auto-Refresh command */
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24001d38:	2303      	movs	r3, #3
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 2;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24001d3a:	a902      	add	r1, sp, #8
24001d3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001d40:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
24001d42:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
24001d44:	9302      	str	r3, [sp, #8]
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
	                 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
	                 | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE | SDRAM_MODEREG_OPERATING_MODE_STANDARD;
	        // // Used in example, but can't find reference except for "Test Mode"

	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24001d46:	2604      	movs	r6, #4
	        Command.AutoRefreshNumber      = 2;
24001d48:	e9cd 7803 	strd	r7, r8, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24001d4c:	f009 f908 	bl	2400af60 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
24001d50:	f240 2322 	movw	r3, #546	; 0x222
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24001d54:	2710      	movs	r7, #16
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = tmpmrd;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24001d56:	a902      	add	r1, sp, #8
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
24001d58:	9301      	str	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24001d5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
24001d5e:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24001d60:	4620      	mov	r0, r4
	        Command.AutoRefreshNumber      = 1;
24001d62:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = tmpmrd;
24001d64:	9305      	str	r3, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
24001d66:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
24001d6a:	f009 f8f9 	bl	2400af60 <HAL_SDRAM_SendCommand>

	        //HAL_SDRAM_ProgramRefreshRate(hsdram, 0x56A - 20);
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
24001d6e:	f240 21fa 	movw	r1, #762	; 0x2fa
24001d72:	4620      	mov	r0, r4
24001d74:	f009 f914 	bl	2400afa0 <HAL_SDRAM_ProgramRefreshRate>
	        //8192 is 2^numberofrows (which is 13 in the case of the sdram)

}
24001d78:	b006      	add	sp, #24
24001d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24001d7e:	bf00      	nop
24001d80:	20014268 	.word	0x20014268

24001d84 <setEffectsFunctions>:
volatile uint8_t chorusAssignment = 255;
volatile uint8_t delayAssignment = 255;

void setEffectsFunctions(FXType effectType, int i)
{
	effectsActive[i] = 1;
24001d84:	4ba4      	ldr	r3, [pc, #656]	; (24002018 <setEffectsFunctions+0x294>)
24001d86:	2201      	movs	r2, #1
{
24001d88:	b5f0      	push	{r4, r5, r6, r7, lr}
	effectsActive[i] = 1;
24001d8a:	545a      	strb	r2, [r3, r1]
	switch (effectType)
24001d8c:	2815      	cmp	r0, #21
24001d8e:	d829      	bhi.n	24001de4 <setEffectsFunctions+0x60>
24001d90:	e8df f010 	tbh	[pc, r0, lsl #1]
24001d94:	0259026d 	.word	0x0259026d
24001d98:	02310245 	.word	0x02310245
24001d9c:	0016022b 	.word	0x0016022b
24001da0:	02020217 	.word	0x02020217
24001da4:	012d01b2 	.word	0x012d01b2
24001da8:	011801f2 	.word	0x011801f2
24001dac:	00c500d8 	.word	0x00c500d8
24001db0:	009f00b2 	.word	0x009f00b2
24001db4:	0078008c 	.word	0x0078008c
24001db8:	00500064 	.word	0x00500064
24001dbc:	0029003c 	.word	0x0029003c
			  effectSetters[i].setParam4 = &blankFunction;
			  effectSetters[i].setParam5 = &blankFunction;
			  break;
		  case Tanh:
			  effectTick[i] = &tanhTick;
			  effectSetters[i].setParam1 = &clipperGainSet;
24001dc0:	4896      	ldr	r0, [pc, #600]	; (2400201c <setEffectsFunctions+0x298>)
24001dc2:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &tanhTick;
24001dc6:	4b96      	ldr	r3, [pc, #600]	; (24002020 <setEffectsFunctions+0x29c>)
24001dc8:	4a96      	ldr	r2, [pc, #600]	; (24002024 <setEffectsFunctions+0x2a0>)
24001dca:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24001dce:	eb00 0384 	add.w	r3, r0, r4, lsl #2
24001dd2:	4995      	ldr	r1, [pc, #596]	; (24002028 <setEffectsFunctions+0x2a4>)
			  effectSetters[i].setParam2 = &offsetParam2;
			  effectSetters[i].setParam3 = &blankFunction;
24001dd4:	4a95      	ldr	r2, [pc, #596]	; (2400202c <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24001dd6:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24001dda:	4995      	ldr	r1, [pc, #596]	; (24002030 <setEffectsFunctions+0x2ac>)
			  effectSetters[i].setParam3 = &blankFunction;
24001ddc:	609a      	str	r2, [r3, #8]
			  effectSetters[i].setParam2 = &offsetParam2;
24001dde:	6059      	str	r1, [r3, #4]
			  effectSetters[i].setParam4 = &blankFunction;
			  effectSetters[i].setParam5 = &blankFunction;
24001de0:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
			  break;
		  default:
			  break;
	}
}
24001de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXLadderLowpassTick;
24001de6:	4b8e      	ldr	r3, [pc, #568]	; (24002020 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24001de8:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &FXLadderLowpassTick;
24001dec:	4a91      	ldr	r2, [pc, #580]	; (24002034 <setEffectsFunctions+0x2b0>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24001dee:	488b      	ldr	r0, [pc, #556]	; (2400201c <setEffectsFunctions+0x298>)
			  effectTick[i] = &FXLadderLowpassTick;
24001df0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24001df4:	4990      	ldr	r1, [pc, #576]	; (24002038 <setEffectsFunctions+0x2b4>)
24001df6:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;;
24001dfa:	4a8c      	ldr	r2, [pc, #560]	; (2400202c <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
24001dfc:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24001e00:	498e      	ldr	r1, [pc, #568]	; (2400203c <setEffectsFunctions+0x2b8>)
			  effectSetters[i].setParam2 = &blankFunction;;
24001e02:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
24001e04:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
24001e06:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
24001e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = FXVZbandrejectTick;
24001e0c:	4b84      	ldr	r3, [pc, #528]	; (24002020 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24001e0e:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = FXVZbandrejectTick;
24001e12:	4a8b      	ldr	r2, [pc, #556]	; (24002040 <setEffectsFunctions+0x2bc>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24001e14:	4881      	ldr	r0, [pc, #516]	; (2400201c <setEffectsFunctions+0x298>)
			  effectTick[i] = FXVZbandrejectTick;
24001e16:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24001e1a:	498a      	ldr	r1, [pc, #552]	; (24002044 <setEffectsFunctions+0x2c0>)
24001e1c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
24001e20:	4a82      	ldr	r2, [pc, #520]	; (2400202c <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
24001e22:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
24001e26:	4888      	ldr	r0, [pc, #544]	; (24002048 <setEffectsFunctions+0x2c4>)
			  effectSetters[i].setParam3 = &FXNotchParam3;;
24001e28:	4988      	ldr	r1, [pc, #544]	; (2400204c <setEffectsFunctions+0x2c8>)
			  effectSetters[i].setParam4 = &blankFunction;;
24001e2a:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
24001e2c:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
24001e2e:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
24001e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = FXVZhighshelfTick;
24001e34:	4b7a      	ldr	r3, [pc, #488]	; (24002020 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24001e36:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = FXVZhighshelfTick;
24001e3a:	4a85      	ldr	r2, [pc, #532]	; (24002050 <setEffectsFunctions+0x2cc>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24001e3c:	4877      	ldr	r0, [pc, #476]	; (2400201c <setEffectsFunctions+0x298>)
			  effectTick[i] = FXVZhighshelfTick;
24001e3e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24001e42:	4984      	ldr	r1, [pc, #528]	; (24002054 <setEffectsFunctions+0x2d0>)
24001e44:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
24001e48:	4a78      	ldr	r2, [pc, #480]	; (2400202c <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
24001e4a:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
24001e4e:	4882      	ldr	r0, [pc, #520]	; (24002058 <setEffectsFunctions+0x2d4>)
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
24001e50:	4982      	ldr	r1, [pc, #520]	; (2400205c <setEffectsFunctions+0x2d8>)
			  effectSetters[i].setParam4 = &blankFunction;;
24001e52:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
24001e54:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
24001e56:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
24001e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXVZlowshelfTick;
24001e5c:	4b70      	ldr	r3, [pc, #448]	; (24002020 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24001e5e:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &FXVZlowshelfTick;
24001e62:	4a7f      	ldr	r2, [pc, #508]	; (24002060 <setEffectsFunctions+0x2dc>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24001e64:	486d      	ldr	r0, [pc, #436]	; (2400201c <setEffectsFunctions+0x298>)
			  effectTick[i] = &FXVZlowshelfTick;
24001e66:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24001e6a:	497e      	ldr	r1, [pc, #504]	; (24002064 <setEffectsFunctions+0x2e0>)
24001e6c:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24001e70:	4a6e      	ldr	r2, [pc, #440]	; (2400202c <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
24001e72:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
24001e76:	487c      	ldr	r0, [pc, #496]	; (24002068 <setEffectsFunctions+0x2e4>)
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
24001e78:	497c      	ldr	r1, [pc, #496]	; (2400206c <setEffectsFunctions+0x2e8>)
			  effectSetters[i].setParam4 = &blankFunction;
24001e7a:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24001e7c:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
24001e7e:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
24001e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXVZpeakTick;
24001e84:	4b66      	ldr	r3, [pc, #408]	; (24002020 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
24001e86:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &FXVZpeakTick;
24001e8a:	4a79      	ldr	r2, [pc, #484]	; (24002070 <setEffectsFunctions+0x2ec>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
24001e8c:	4863      	ldr	r0, [pc, #396]	; (2400201c <setEffectsFunctions+0x298>)
			  effectTick[i] = &FXVZpeakTick;
24001e8e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
24001e92:	4978      	ldr	r1, [pc, #480]	; (24002074 <setEffectsFunctions+0x2f0>)
24001e94:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24001e98:	4a64      	ldr	r2, [pc, #400]	; (2400202c <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
24001e9a:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
24001e9e:	4876      	ldr	r0, [pc, #472]	; (24002078 <setEffectsFunctions+0x2f4>)
			  effectSetters[i].setParam3 = &FXPeakParam3;
24001ea0:	4976      	ldr	r1, [pc, #472]	; (2400207c <setEffectsFunctions+0x2f8>)
			  effectSetters[i].setParam4 = &blankFunction;
24001ea2:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24001ea4:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXPeakParam3;
24001ea6:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
24001eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXdiodeLowpassTick;
24001eac:	4b5c      	ldr	r3, [pc, #368]	; (24002020 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24001eae:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &FXdiodeLowpassTick;
24001eb2:	4a73      	ldr	r2, [pc, #460]	; (24002080 <setEffectsFunctions+0x2fc>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24001eb4:	4859      	ldr	r0, [pc, #356]	; (2400201c <setEffectsFunctions+0x298>)
			  effectTick[i] = &FXdiodeLowpassTick;
24001eb6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24001eba:	4972      	ldr	r1, [pc, #456]	; (24002084 <setEffectsFunctions+0x300>)
24001ebc:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24001ec0:	4a5a      	ldr	r2, [pc, #360]	; (2400202c <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
24001ec2:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
24001ec6:	4970      	ldr	r1, [pc, #448]	; (24002088 <setEffectsFunctions+0x304>)
			  effectSetters[i].setParam2 = &blankFunction;
24001ec8:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
24001eca:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
24001ecc:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
24001ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXbandpassTick;
24001ed2:	4b53      	ldr	r3, [pc, #332]	; (24002020 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24001ed4:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &FXbandpassTick;
24001ed8:	4a6c      	ldr	r2, [pc, #432]	; (2400208c <setEffectsFunctions+0x308>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24001eda:	4850      	ldr	r0, [pc, #320]	; (2400201c <setEffectsFunctions+0x298>)
			  effectTick[i] = &FXbandpassTick;
24001edc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24001ee0:	496b      	ldr	r1, [pc, #428]	; (24002090 <setEffectsFunctions+0x30c>)
24001ee2:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24001ee6:	4a51      	ldr	r2, [pc, #324]	; (2400202c <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
24001ee8:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
24001eec:	4969      	ldr	r1, [pc, #420]	; (24002094 <setEffectsFunctions+0x310>)
			  effectSetters[i].setParam2 = &blankFunction;
24001eee:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
24001ef0:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
24001ef2:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
24001ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXhighpassTick;
24001ef8:	4b49      	ldr	r3, [pc, #292]	; (24002020 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24001efa:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &FXhighpassTick;
24001efe:	4a66      	ldr	r2, [pc, #408]	; (24002098 <setEffectsFunctions+0x314>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24001f00:	4846      	ldr	r0, [pc, #280]	; (2400201c <setEffectsFunctions+0x298>)
			  effectTick[i] = &FXhighpassTick;
24001f02:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24001f06:	4965      	ldr	r1, [pc, #404]	; (2400209c <setEffectsFunctions+0x318>)
24001f08:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24001f0c:	4a47      	ldr	r2, [pc, #284]	; (2400202c <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
24001f0e:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24001f12:	4963      	ldr	r1, [pc, #396]	; (240020a0 <setEffectsFunctions+0x31c>)
			  effectSetters[i].setParam2 = &blankFunction;
24001f14:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
24001f16:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
24001f18:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
24001f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &FXlowpassTick;
24001f1e:	4b40      	ldr	r3, [pc, #256]	; (24002020 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24001f20:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &FXlowpassTick;
24001f24:	4a5f      	ldr	r2, [pc, #380]	; (240020a4 <setEffectsFunctions+0x320>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24001f26:	483d      	ldr	r0, [pc, #244]	; (2400201c <setEffectsFunctions+0x298>)
			  effectTick[i] = &FXlowpassTick;
24001f28:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24001f2c:	495e      	ldr	r1, [pc, #376]	; (240020a8 <setEffectsFunctions+0x324>)
24001f2e:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
24001f32:	4a3e      	ldr	r2, [pc, #248]	; (2400202c <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
24001f34:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
24001f38:	495c      	ldr	r1, [pc, #368]	; (240020ac <setEffectsFunctions+0x328>)
			  effectSetters[i].setParam2 = &blankFunction;
24001f3a:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
24001f3c:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
24001f3e:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
24001f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  if (delayAssignment != 255)
24001f44:	4a5a      	ldr	r2, [pc, #360]	; (240020b0 <setEffectsFunctions+0x32c>)
24001f46:	7813      	ldrb	r3, [r2, #0]
24001f48:	2bff      	cmp	r3, #255	; 0xff
24001f4a:	f000 81a3 	beq.w	24002294 <setEffectsFunctions+0x510>
				  effectTick[delayAssignment] = &blankTick;
24001f4e:	7813      	ldrb	r3, [r2, #0]
24001f50:	4c58      	ldr	r4, [pc, #352]	; (240020b4 <setEffectsFunctions+0x330>)
24001f52:	4833      	ldr	r0, [pc, #204]	; (24002020 <setEffectsFunctions+0x29c>)
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
24001f54:	7816      	ldrb	r6, [r2, #0]
				  effectTick[delayAssignment] = &blankTick;
24001f56:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
				  effectSetters[delayAssignment].setParam2 = &blankFunction;
24001f5a:	7815      	ldrb	r5, [r2, #0]
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
24001f5c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
				  effectSetters[delayAssignment].setParam3 = &blankFunction;
24001f60:	7814      	ldrb	r4, [r2, #0]
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
24001f62:	4b2e      	ldr	r3, [pc, #184]	; (2400201c <setEffectsFunctions+0x298>)
				  effectSetters[delayAssignment].setParam2 = &blankFunction;
24001f64:	eb05 0585 	add.w	r5, r5, r5, lsl #2
				  effectSetters[delayAssignment].setParam3 = &blankFunction;
24001f68:	eb04 0484 	add.w	r4, r4, r4, lsl #2
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
24001f6c:	4f2f      	ldr	r7, [pc, #188]	; (2400202c <setEffectsFunctions+0x2a8>)
				  effectSetters[delayAssignment].setParam2 = &blankFunction;
24001f6e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
				  effectSetters[delayAssignment].setParam3 = &blankFunction;
24001f72:	eb03 0e84 	add.w	lr, r3, r4, lsl #2
				  effectSetters[delayAssignment].setParam4 = &blankFunction;
24001f76:	7814      	ldrb	r4, [r2, #0]
				  effectSetters[delayAssignment].setParam1 = &blankFunction;
24001f78:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
				  effectSetters[delayAssignment].setParam4 = &blankFunction;
24001f7c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
				  effectSetters[delayAssignment].setParam2 = &blankFunction;
24001f80:	606f      	str	r7, [r5, #4]
				  effectSetters[delayAssignment].setParam3 = &blankFunction;
24001f82:	f8ce 7008 	str.w	r7, [lr, #8]
				  effectSetters[delayAssignment].setParam4 = &blankFunction;
24001f86:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
				  effectSetters[delayAssignment].setParam5 = &blankFunction;
24001f8a:	7814      	ldrb	r4, [r2, #0]
24001f8c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
				  effectSetters[delayAssignment].setParam4 = &blankFunction;
24001f90:	f8cc 700c 	str.w	r7, [ip, #12]
				  effectSetters[delayAssignment].setParam5 = &blankFunction;
24001f94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
24001f98:	6127      	str	r7, [r4, #16]
			  delayAssignment = i;
24001f9a:	b2cc      	uxtb	r4, r1
			  effectSetters[i].setParam2 = &delayParam2;
24001f9c:	4d46      	ldr	r5, [pc, #280]	; (240020b8 <setEffectsFunctions+0x334>)
			  delayAssignment = i;
24001f9e:	7014      	strb	r4, [r2, #0]
			  effectSetters[i].setParam1 = &delayParam1;
24001fa0:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &delayTick;
24001fa4:	4a45      	ldr	r2, [pc, #276]	; (240020bc <setEffectsFunctions+0x338>)
24001fa6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
			  effectSetters[i].setParam1 = &delayParam1;
24001faa:	eb03 0284 	add.w	r2, r3, r4, lsl #2
24001fae:	4944      	ldr	r1, [pc, #272]	; (240020c0 <setEffectsFunctions+0x33c>)
			  effectSetters[i].setParam3 = &delayParam3;
24001fb0:	4844      	ldr	r0, [pc, #272]	; (240020c4 <setEffectsFunctions+0x340>)
			  effectSetters[i].setParam1 = &delayParam1;
24001fb2:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
			  effectSetters[i].setParam4 = &delayParam4;
24001fb6:	4944      	ldr	r1, [pc, #272]	; (240020c8 <setEffectsFunctions+0x344>)
			  effectSetters[i].setParam5 = &delayParam5;
24001fb8:	4b44      	ldr	r3, [pc, #272]	; (240020cc <setEffectsFunctions+0x348>)
			  effectSetters[i].setParam3 = &delayParam3;
24001fba:	e9c2 5001 	strd	r5, r0, [r2, #4]
			  effectSetters[i].setParam5 = &delayParam5;
24001fbe:	e9c2 1303 	strd	r1, r3, [r2, #12]
}
24001fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &wavefolderTick;
24001fc4:	4b16      	ldr	r3, [pc, #88]	; (24002020 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24001fc6:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &wavefolderTick;
24001fca:	4c41      	ldr	r4, [pc, #260]	; (240020d0 <setEffectsFunctions+0x34c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24001fcc:	4a13      	ldr	r2, [pc, #76]	; (2400201c <setEffectsFunctions+0x298>)
			  effectTick[i] = &wavefolderTick;
24001fce:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
24001fd2:	4940      	ldr	r1, [pc, #256]	; (240020d4 <setEffectsFunctions+0x350>)
24001fd4:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
24001fd8:	4c15      	ldr	r4, [pc, #84]	; (24002030 <setEffectsFunctions+0x2ac>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
24001fda:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &wavefolderParam3;
24001fde:	483e      	ldr	r0, [pc, #248]	; (240020d8 <setEffectsFunctions+0x354>)
			  effectSetters[i].setParam4 = &param4Linear;
24001fe0:	493e      	ldr	r1, [pc, #248]	; (240020dc <setEffectsFunctions+0x358>)
			  effectSetters[i].setParam5 = &param5Linear;
24001fe2:	4a3f      	ldr	r2, [pc, #252]	; (240020e0 <setEffectsFunctions+0x35c>)
			  effectSetters[i].setParam3 = &wavefolderParam3;
24001fe4:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5Linear;
24001fe8:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
24001fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &bcTick;
24001fee:	4b0c      	ldr	r3, [pc, #48]	; (24002020 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24001ff0:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &bcTick;
24001ff4:	4c3b      	ldr	r4, [pc, #236]	; (240020e4 <setEffectsFunctions+0x360>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24001ff6:	4a09      	ldr	r2, [pc, #36]	; (2400201c <setEffectsFunctions+0x298>)
			  effectTick[i] = &bcTick;
24001ff8:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24001ffc:	490a      	ldr	r1, [pc, #40]	; (24002028 <setEffectsFunctions+0x2a4>)
24001ffe:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &param2BC;
24002002:	4c39      	ldr	r4, [pc, #228]	; (240020e8 <setEffectsFunctions+0x364>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002004:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3BC;
24002008:	4838      	ldr	r0, [pc, #224]	; (240020ec <setEffectsFunctions+0x368>)
			  effectSetters[i].setParam4 = &param4BC;
2400200a:	4939      	ldr	r1, [pc, #228]	; (240020f0 <setEffectsFunctions+0x36c>)
			  effectSetters[i].setParam5 = &param5BC;
2400200c:	4a39      	ldr	r2, [pc, #228]	; (240020f4 <setEffectsFunctions+0x370>)
			  effectSetters[i].setParam3 = &param3BC;
2400200e:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5BC;
24002012:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
24002016:	bdf0      	pop	{r4, r5, r6, r7, pc}
24002018:	200144e4 	.word	0x200144e4
2400201c:	20014494 	.word	0x20014494
24002020:	2001d308 	.word	0x2001d308
24002024:	00009ee1 	.word	0x00009ee1
24002028:	00009461 	.word	0x00009461
2400202c:	00001a01 	.word	0x00001a01
24002030:	00009761 	.word	0x00009761
24002034:	0000a2c1 	.word	0x0000a2c1
24002038:	0000a4e1 	.word	0x0000a4e1
2400203c:	0000a721 	.word	0x0000a721
24002040:	0000a2a1 	.word	0x0000a2a1
24002044:	0000a4a1 	.word	0x0000a4a1
24002048:	0000a5e1 	.word	0x0000a5e1
2400204c:	0000a701 	.word	0x0000a701
24002050:	0000a281 	.word	0x0000a281
24002054:	0000a461 	.word	0x0000a461
24002058:	0000a5a1 	.word	0x0000a5a1
2400205c:	0000a6e1 	.word	0x0000a6e1
24002060:	0000a261 	.word	0x0000a261
24002064:	0000a421 	.word	0x0000a421
24002068:	0000a561 	.word	0x0000a561
2400206c:	0000a6c1 	.word	0x0000a6c1
24002070:	0000a241 	.word	0x0000a241
24002074:	0000a3e1 	.word	0x0000a3e1
24002078:	0000a521 	.word	0x0000a521
2400207c:	0000a6a1 	.word	0x0000a6a1
24002080:	0000a221 	.word	0x0000a221
24002084:	0000a3a1 	.word	0x0000a3a1
24002088:	0000a681 	.word	0x0000a681
2400208c:	0000a201 	.word	0x0000a201
24002090:	0000a361 	.word	0x0000a361
24002094:	0000a661 	.word	0x0000a661
24002098:	0000a1e1 	.word	0x0000a1e1
2400209c:	0000a321 	.word	0x0000a321
240020a0:	0000a641 	.word	0x0000a641
240020a4:	0000a1c1 	.word	0x0000a1c1
240020a8:	0000a2e1 	.word	0x0000a2e1
240020ac:	0000a621 	.word	0x0000a621
240020b0:	200006ac 	.word	0x200006ac
240020b4:	00009e81 	.word	0x00009e81
240020b8:	00009ca1 	.word	0x00009ca1
240020bc:	2400462d 	.word	0x2400462d
240020c0:	00009c61 	.word	0x00009c61
240020c4:	00009ce1 	.word	0x00009ce1
240020c8:	00009d01 	.word	0x00009d01
240020cc:	00009d21 	.word	0x00009d21
240020d0:	00009a61 	.word	0x00009a61
240020d4:	000094a1 	.word	0x000094a1
240020d8:	000094e1 	.word	0x000094e1
240020dc:	00009921 	.word	0x00009921
240020e0:	00009941 	.word	0x00009941
240020e4:	0000a161 	.word	0x0000a161
240020e8:	00009961 	.word	0x00009961
240020ec:	00009981 	.word	0x00009981
240020f0:	000099c1 	.word	0x000099c1
240020f4:	000099e1 	.word	0x000099e1
			  if (chorusAssignment != 255)
240020f8:	4a6a      	ldr	r2, [pc, #424]	; (240022a4 <setEffectsFunctions+0x520>)
240020fa:	7813      	ldrb	r3, [r2, #0]
240020fc:	2bff      	cmp	r3, #255	; 0xff
240020fe:	f000 80cc 	beq.w	2400229a <setEffectsFunctions+0x516>
				  effectTick[chorusAssignment] = &blankTick;
24002102:	7813      	ldrb	r3, [r2, #0]
24002104:	4c68      	ldr	r4, [pc, #416]	; (240022a8 <setEffectsFunctions+0x524>)
24002106:	4869      	ldr	r0, [pc, #420]	; (240022ac <setEffectsFunctions+0x528>)
				  effectSetters[chorusAssignment].setParam1 = &blankFunction;
24002108:	f892 e000 	ldrb.w	lr, [r2]
				  effectTick[chorusAssignment] = &blankTick;
2400210c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
				  effectSetters[chorusAssignment].setParam2 = &blankFunction;
24002110:	f892 c000 	ldrb.w	ip, [r2]
				  effectSetters[chorusAssignment].setParam1 = &blankFunction;
24002114:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
				  effectSetters[chorusAssignment].setParam3 = &blankFunction;
24002118:	7814      	ldrb	r4, [r2, #0]
				  effectSetters[chorusAssignment].setParam1 = &blankFunction;
2400211a:	4b65      	ldr	r3, [pc, #404]	; (240022b0 <setEffectsFunctions+0x52c>)
				  effectSetters[chorusAssignment].setParam2 = &blankFunction;
2400211c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
				  effectSetters[chorusAssignment].setParam3 = &blankFunction;
24002120:	eb04 0484 	add.w	r4, r4, r4, lsl #2
				  effectSetters[chorusAssignment].setParam2 = &blankFunction;
24002124:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
				  effectSetters[chorusAssignment].setParam3 = &blankFunction;
24002128:	eb03 0784 	add.w	r7, r3, r4, lsl #2
				  effectSetters[chorusAssignment].setParam4 = &blankFunction;
2400212c:	7814      	ldrb	r4, [r2, #0]
2400212e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
24002132:	eb03 0684 	add.w	r6, r3, r4, lsl #2
				  effectSetters[chorusAssignment].setParam5 = &blankFunction;
24002136:	7814      	ldrb	r4, [r2, #0]
24002138:	eb04 0484 	add.w	r4, r4, r4, lsl #2
2400213c:	eb03 0584 	add.w	r5, r3, r4, lsl #2
				  effectSetters[chorusAssignment].setParam1 = &blankFunction;
24002140:	4c5c      	ldr	r4, [pc, #368]	; (240022b4 <setEffectsFunctions+0x530>)
24002142:	f843 402e 	str.w	r4, [r3, lr, lsl #2]
				  effectSetters[chorusAssignment].setParam2 = &blankFunction;
24002146:	f8cc 4004 	str.w	r4, [ip, #4]
				  effectSetters[chorusAssignment].setParam3 = &blankFunction;
2400214a:	60bc      	str	r4, [r7, #8]
				  effectSetters[chorusAssignment].setParam4 = &blankFunction;
2400214c:	60f4      	str	r4, [r6, #12]
				  effectSetters[chorusAssignment].setParam5 = &blankFunction;
2400214e:	612c      	str	r4, [r5, #16]
			  effectSetters[i].setParam1 = &chorusParam1;
24002150:	eb01 0581 	add.w	r5, r1, r1, lsl #2
			  chorusAssignment = i;
24002154:	b2ce      	uxtb	r6, r1
24002156:	7016      	strb	r6, [r2, #0]
			  effectSetters[i].setParam1 = &chorusParam1;
24002158:	eb03 0285 	add.w	r2, r3, r5, lsl #2
			  effectSetters[i].setParam5 = &blankFunction;
2400215c:	6114      	str	r4, [r2, #16]
			  effectTick[i] = &chorusTick;
2400215e:	4c56      	ldr	r4, [pc, #344]	; (240022b8 <setEffectsFunctions+0x534>)
24002160:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
24002164:	4955      	ldr	r1, [pc, #340]	; (240022bc <setEffectsFunctions+0x538>)
			  effectSetters[i].setParam2 = &chorusParam2;
24002166:	4856      	ldr	r0, [pc, #344]	; (240022c0 <setEffectsFunctions+0x53c>)
			  effectSetters[i].setParam1 = &chorusParam1;
24002168:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
			  effectSetters[i].setParam3 = &chorusParam3;
2400216c:	4955      	ldr	r1, [pc, #340]	; (240022c4 <setEffectsFunctions+0x540>)
			  effectSetters[i].setParam4 = &chorusParam4;
2400216e:	4b56      	ldr	r3, [pc, #344]	; (240022c8 <setEffectsFunctions+0x544>)
			  effectSetters[i].setParam3 = &chorusParam3;
24002170:	e9c2 0101 	strd	r0, r1, [r2, #4]
			  effectSetters[i].setParam4 = &chorusParam4;
24002174:	60d3      	str	r3, [r2, #12]
}
24002176:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &tiltFilterTick;
24002178:	4b4c      	ldr	r3, [pc, #304]	; (240022ac <setEffectsFunctions+0x528>)
			  effectSetters[i].setParam1 = &tiltParam1;
2400217a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &tiltFilterTick;
2400217e:	4c53      	ldr	r4, [pc, #332]	; (240022cc <setEffectsFunctions+0x548>)
			  effectSetters[i].setParam1 = &tiltParam1;
24002180:	4a4b      	ldr	r2, [pc, #300]	; (240022b0 <setEffectsFunctions+0x52c>)
			  effectTick[i] = &tiltFilterTick;
24002182:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
24002186:	4952      	ldr	r1, [pc, #328]	; (240022d0 <setEffectsFunctions+0x54c>)
24002188:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &tiltParam2;
2400218c:	4c51      	ldr	r4, [pc, #324]	; (240022d4 <setEffectsFunctions+0x550>)
			  effectSetters[i].setParam1 = &tiltParam1;
2400218e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &tiltParam3;
24002192:	4851      	ldr	r0, [pc, #324]	; (240022d8 <setEffectsFunctions+0x554>)
			  effectSetters[i].setParam4 = &tiltParam4;
24002194:	4951      	ldr	r1, [pc, #324]	; (240022dc <setEffectsFunctions+0x558>)
24002196:	e724      	b.n	24001fe2 <setEffectsFunctions+0x25e>
			  effectTick[i] = &compressorTick;
24002198:	4b44      	ldr	r3, [pc, #272]	; (240022ac <setEffectsFunctions+0x528>)
			  effectSetters[i].setParam1 = &compressorParam1;
2400219a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &compressorTick;
2400219e:	4c50      	ldr	r4, [pc, #320]	; (240022e0 <setEffectsFunctions+0x55c>)
			  effectSetters[i].setParam1 = &compressorParam1;
240021a0:	4a43      	ldr	r2, [pc, #268]	; (240022b0 <setEffectsFunctions+0x52c>)
			  effectTick[i] = &compressorTick;
240021a2:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
240021a6:	494f      	ldr	r1, [pc, #316]	; (240022e4 <setEffectsFunctions+0x560>)
240021a8:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &compressorParam2;
240021ac:	4c4e      	ldr	r4, [pc, #312]	; (240022e8 <setEffectsFunctions+0x564>)
			  effectSetters[i].setParam1 = &compressorParam1;
240021ae:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &compressorParam3;
240021b2:	484e      	ldr	r0, [pc, #312]	; (240022ec <setEffectsFunctions+0x568>)
			  effectSetters[i].setParam4 = &compressorParam4;
240021b4:	494e      	ldr	r1, [pc, #312]	; (240022f0 <setEffectsFunctions+0x56c>)
			  effectSetters[i].setParam5 = &compressorParam5;
240021b6:	4a4f      	ldr	r2, [pc, #316]	; (240022f4 <setEffectsFunctions+0x570>)
			  effectSetters[i].setParam3 = &compressorParam3;
240021b8:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &compressorParam5;
240021bc:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
240021c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &shaperTick;
240021c2:	4b3a      	ldr	r3, [pc, #232]	; (240022ac <setEffectsFunctions+0x528>)
			  effectSetters[i].setParam1 = &param1Linear;
240021c4:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &shaperTick;
240021c8:	4a4b      	ldr	r2, [pc, #300]	; (240022f8 <setEffectsFunctions+0x574>)
			  effectSetters[i].setParam1 = &param1Linear;
240021ca:	4839      	ldr	r0, [pc, #228]	; (240022b0 <setEffectsFunctions+0x52c>)
			  effectTick[i] = &shaperTick;
240021cc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &param1Linear;
240021d0:	494a      	ldr	r1, [pc, #296]	; (240022fc <setEffectsFunctions+0x578>)
240021d2:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
240021d6:	4a37      	ldr	r2, [pc, #220]	; (240022b4 <setEffectsFunctions+0x530>)
			  effectSetters[i].setParam1 = &param1Linear;
240021d8:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
240021dc:	4848      	ldr	r0, [pc, #288]	; (24002300 <setEffectsFunctions+0x57c>)
			  effectSetters[i].setParam3 = &param3Linear;
240021de:	4949      	ldr	r1, [pc, #292]	; (24002304 <setEffectsFunctions+0x580>)
			  effectSetters[i].setParam4 = &blankFunction;
240021e0:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
240021e2:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Linear;
240021e4:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
240021e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectSetters[i].setParam1 = &clipperGainSet;
240021ea:	4831      	ldr	r0, [pc, #196]	; (240022b0 <setEffectsFunctions+0x52c>)
240021ec:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &satTick;
240021f0:	4b2e      	ldr	r3, [pc, #184]	; (240022ac <setEffectsFunctions+0x528>)
240021f2:	4a45      	ldr	r2, [pc, #276]	; (24002308 <setEffectsFunctions+0x584>)
240021f4:	e5e9      	b.n	24001dca <setEffectsFunctions+0x46>
			  effectTick[i] = &polynomialShaperTick;
240021f6:	4b2d      	ldr	r3, [pc, #180]	; (240022ac <setEffectsFunctions+0x528>)
			  effectSetters[i].setParam1 = &clipperGainSet;
240021f8:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &polynomialShaperTick;
240021fc:	4a43      	ldr	r2, [pc, #268]	; (2400230c <setEffectsFunctions+0x588>)
			  effectSetters[i].setParam1 = &clipperGainSet;
240021fe:	482c      	ldr	r0, [pc, #176]	; (240022b0 <setEffectsFunctions+0x52c>)
			  effectTick[i] = &polynomialShaperTick;
24002200:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002204:	4942      	ldr	r1, [pc, #264]	; (24002310 <setEffectsFunctions+0x58c>)
24002206:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
2400220a:	4a2a      	ldr	r2, [pc, #168]	; (240022b4 <setEffectsFunctions+0x530>)
			  effectSetters[i].setParam1 = &clipperGainSet;
2400220c:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24002210:	483b      	ldr	r0, [pc, #236]	; (24002300 <setEffectsFunctions+0x57c>)
			  effectSetters[i].setParam3 = &param3Poly;
24002212:	4940      	ldr	r1, [pc, #256]	; (24002314 <setEffectsFunctions+0x590>)
			  effectSetters[i].setParam4 = &blankFunction;
24002214:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002216:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Poly;
24002218:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
2400221c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &hardClipTick;
2400221e:	4b23      	ldr	r3, [pc, #140]	; (240022ac <setEffectsFunctions+0x528>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002220:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &hardClipTick;
24002224:	4a3c      	ldr	r2, [pc, #240]	; (24002318 <setEffectsFunctions+0x594>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002226:	4822      	ldr	r0, [pc, #136]	; (240022b0 <setEffectsFunctions+0x52c>)
			  effectTick[i] = &hardClipTick;
24002228:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
2400222c:	4938      	ldr	r1, [pc, #224]	; (24002310 <setEffectsFunctions+0x58c>)
2400222e:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
24002232:	4a20      	ldr	r2, [pc, #128]	; (240022b4 <setEffectsFunctions+0x530>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002234:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24002238:	4831      	ldr	r0, [pc, #196]	; (24002300 <setEffectsFunctions+0x57c>)
			  effectSetters[i].setParam3 = &param3Hard;
2400223a:	4938      	ldr	r1, [pc, #224]	; (2400231c <setEffectsFunctions+0x598>)
			  effectSetters[i].setParam4 = &blankFunction;
2400223c:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
2400223e:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Hard;
24002240:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
24002244:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectTick[i] = &softClipTick;
24002246:	4b19      	ldr	r3, [pc, #100]	; (240022ac <setEffectsFunctions+0x528>)
			  effectSetters[i].setParam1 = &clipperGainSet;
24002248:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			  effectTick[i] = &softClipTick;
2400224c:	4a34      	ldr	r2, [pc, #208]	; (24002320 <setEffectsFunctions+0x59c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
2400224e:	4818      	ldr	r0, [pc, #96]	; (240022b0 <setEffectsFunctions+0x52c>)
			  effectTick[i] = &softClipTick;
24002250:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
24002254:	492e      	ldr	r1, [pc, #184]	; (24002310 <setEffectsFunctions+0x58c>)
24002256:	eb00 0384 	add.w	r3, r0, r4, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
2400225a:	4a16      	ldr	r2, [pc, #88]	; (240022b4 <setEffectsFunctions+0x530>)
			  effectSetters[i].setParam1 = &clipperGainSet;
2400225c:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
24002260:	4827      	ldr	r0, [pc, #156]	; (24002300 <setEffectsFunctions+0x57c>)
			  effectSetters[i].setParam3 = &param3Soft;
24002262:	4930      	ldr	r1, [pc, #192]	; (24002324 <setEffectsFunctions+0x5a0>)
			  effectSetters[i].setParam4 = &blankFunction;
24002264:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
24002266:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Soft;
24002268:	e9c3 0101 	strd	r0, r1, [r3, #4]
}
2400226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			  effectSetters[i].setParam1 = &blankFunction;
2400226e:	4811      	ldr	r0, [pc, #68]	; (240022b4 <setEffectsFunctions+0x530>)
24002270:	eb01 0481 	add.w	r4, r1, r1, lsl #2
24002274:	4a0e      	ldr	r2, [pc, #56]	; (240022b0 <setEffectsFunctions+0x52c>)
			  effectTick[i] = &blankTick;
24002276:	4d0d      	ldr	r5, [pc, #52]	; (240022ac <setEffectsFunctions+0x528>)
			  effectSetters[i].setParam1 = &blankFunction;
24002278:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
2400227c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
			  effectSetters[i].setParam3 = &blankFunction;
24002280:	e9c2 0001 	strd	r0, r0, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
24002284:	e9c2 0003 	strd	r0, r0, [r2, #12]
			  effectsActive[i] = 0;
24002288:	2200      	movs	r2, #0
2400228a:	545a      	strb	r2, [r3, r1]
			  effectTick[i] = &blankTick;
2400228c:	4b06      	ldr	r3, [pc, #24]	; (240022a8 <setEffectsFunctions+0x524>)
2400228e:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
}
24002292:	bdf0      	pop	{r4, r5, r6, r7, pc}
24002294:	4805      	ldr	r0, [pc, #20]	; (240022ac <setEffectsFunctions+0x528>)
24002296:	4b06      	ldr	r3, [pc, #24]	; (240022b0 <setEffectsFunctions+0x52c>)
24002298:	e67f      	b.n	24001f9a <setEffectsFunctions+0x216>
2400229a:	4804      	ldr	r0, [pc, #16]	; (240022ac <setEffectsFunctions+0x528>)
2400229c:	4b04      	ldr	r3, [pc, #16]	; (240022b0 <setEffectsFunctions+0x52c>)
2400229e:	4c05      	ldr	r4, [pc, #20]	; (240022b4 <setEffectsFunctions+0x530>)
240022a0:	e756      	b.n	24002150 <setEffectsFunctions+0x3cc>
240022a2:	bf00      	nop
240022a4:	200006a4 	.word	0x200006a4
240022a8:	00009e81 	.word	0x00009e81
240022ac:	2001d308 	.word	0x2001d308
240022b0:	20014494 	.word	0x20014494
240022b4:	00001a01 	.word	0x00001a01
240022b8:	00009d41 	.word	0x00009d41
240022bc:	00009b81 	.word	0x00009b81
240022c0:	00009bc1 	.word	0x00009bc1
240022c4:	00009be1 	.word	0x00009be1
240022c8:	00009c21 	.word	0x00009c21
240022cc:	00009ea1 	.word	0x00009ea1
240022d0:	00009521 	.word	0x00009521
240022d4:	00009581 	.word	0x00009581
240022d8:	000095e1 	.word	0x000095e1
240022dc:	00009621 	.word	0x00009621
240022e0:	0000a1a1 	.word	0x0000a1a1
240022e4:	00009661 	.word	0x00009661
240022e8:	00009681 	.word	0x00009681
240022ec:	000096c1 	.word	0x000096c1
240022f0:	000096e1 	.word	0x000096e1
240022f4:	00009721 	.word	0x00009721
240022f8:	00009e21 	.word	0x00009e21
240022fc:	00009441 	.word	0x00009441
24002300:	00009761 	.word	0x00009761
24002304:	000097a1 	.word	0x000097a1
24002308:	0000a0e1 	.word	0x0000a0e1
2400230c:	0000a041 	.word	0x0000a041
24002310:	00009461 	.word	0x00009461
24002314:	000098a1 	.word	0x000098a1
24002318:	00009fa1 	.word	0x00009fa1
2400231c:	00009821 	.word	0x00009821
24002320:	00009f41 	.word	0x00009f41
24002324:	000097c1 	.word	0x000097c1

24002328 <setFilterTypes>:
		  default:
			  break;
	}
}
void setFilterTypes(int filterType, int i)
{
24002328:	b410      	push	{r4}
	switch (filterType)
2400232a:	2808      	cmp	r0, #8
2400232c:	d812      	bhi.n	24002354 <setFilterTypes+0x2c>
2400232e:	e8df f000 	tbb	[pc, r0]
24002332:	3223      	.short	0x3223
24002334:	6e5f5041 	.word	0x6e5f5041
24002338:	057d      	.short	0x057d
2400233a:	14          	.byte	0x14
2400233b:	00          	.byte	0x00
				  filterSetters[i].setQ = &VZhighshelfSetQ;
				  filterSetters[i].setGain = &VZhighshelfSetGain;
				  break;
			  case 7:
				  filterTick[i] = &VZbandrejectTick;
				  filterSetters[i].setQ = &VZbandrejectSetQ;
2400233c:	4b43      	ldr	r3, [pc, #268]	; (2400244c <setFilterTypes+0x124>)
				  filterTick[i] = &VZbandrejectTick;
2400233e:	4a44      	ldr	r2, [pc, #272]	; (24002450 <setFilterTypes+0x128>)
24002340:	4844      	ldr	r0, [pc, #272]	; (24002454 <setFilterTypes+0x12c>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
24002342:	4c45      	ldr	r4, [pc, #276]	; (24002458 <setFilterTypes+0x130>)
				  filterTick[i] = &VZbandrejectTick;
24002344:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
24002348:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
2400234c:	4843      	ldr	r0, [pc, #268]	; (2400245c <setFilterTypes+0x134>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
2400234e:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
24002352:	6050      	str	r0, [r2, #4]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
				  break;
			  default:
				  break;
		}
}
24002354:	f85d 4b04 	ldr.w	r4, [sp], #4
24002358:	4770      	bx	lr
				  filterSetters[i].setQ = &LadderLowpassSetQ;
2400235a:	4b3c      	ldr	r3, [pc, #240]	; (2400244c <setFilterTypes+0x124>)
				  filterTick[i] = &LadderLowpassTick;
2400235c:	4a3c      	ldr	r2, [pc, #240]	; (24002450 <setFilterTypes+0x128>)
2400235e:	4840      	ldr	r0, [pc, #256]	; (24002460 <setFilterTypes+0x138>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
24002360:	4c40      	ldr	r4, [pc, #256]	; (24002464 <setFilterTypes+0x13c>)
				  filterTick[i] = &LadderLowpassTick;
24002362:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
24002366:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
2400236a:	483f      	ldr	r0, [pc, #252]	; (24002468 <setFilterTypes+0x140>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
2400236c:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
24002370:	6050      	str	r0, [r2, #4]
}
24002372:	f85d 4b04 	ldr.w	r4, [sp], #4
24002376:	4770      	bx	lr
				  filterSetters[i].setQ = &lowpassSetQ;
24002378:	4b34      	ldr	r3, [pc, #208]	; (2400244c <setFilterTypes+0x124>)
				  filterTick[i] = &lowpassTick;
2400237a:	4a35      	ldr	r2, [pc, #212]	; (24002450 <setFilterTypes+0x128>)
2400237c:	483b      	ldr	r0, [pc, #236]	; (2400246c <setFilterTypes+0x144>)
				  filterSetters[i].setQ = &lowpassSetQ;
2400237e:	4c3c      	ldr	r4, [pc, #240]	; (24002470 <setFilterTypes+0x148>)
				  filterTick[i] = &lowpassTick;
24002380:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &lowpassSetGain;
24002384:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002388:	483a      	ldr	r0, [pc, #232]	; (24002474 <setFilterTypes+0x14c>)
				  filterSetters[i].setQ = &lowpassSetQ;
2400238a:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
2400238e:	6050      	str	r0, [r2, #4]
}
24002390:	f85d 4b04 	ldr.w	r4, [sp], #4
24002394:	4770      	bx	lr
				  filterSetters[i].setQ = &highpassSetQ;
24002396:	4b2d      	ldr	r3, [pc, #180]	; (2400244c <setFilterTypes+0x124>)
				  filterTick[i] = &highpassTick;
24002398:	4a2d      	ldr	r2, [pc, #180]	; (24002450 <setFilterTypes+0x128>)
2400239a:	4837      	ldr	r0, [pc, #220]	; (24002478 <setFilterTypes+0x150>)
				  filterSetters[i].setQ = &highpassSetQ;
2400239c:	4c37      	ldr	r4, [pc, #220]	; (2400247c <setFilterTypes+0x154>)
				  filterTick[i] = &highpassTick;
2400239e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &highpassSetGain;
240023a2:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
240023a6:	4836      	ldr	r0, [pc, #216]	; (24002480 <setFilterTypes+0x158>)
				  filterSetters[i].setQ = &highpassSetQ;
240023a8:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
240023ac:	6050      	str	r0, [r2, #4]
}
240023ae:	f85d 4b04 	ldr.w	r4, [sp], #4
240023b2:	4770      	bx	lr
				  filterSetters[i].setQ = &bandpassSetQ;
240023b4:	4b25      	ldr	r3, [pc, #148]	; (2400244c <setFilterTypes+0x124>)
				  filterTick[i] = &bandpassTick;
240023b6:	4a26      	ldr	r2, [pc, #152]	; (24002450 <setFilterTypes+0x128>)
240023b8:	4832      	ldr	r0, [pc, #200]	; (24002484 <setFilterTypes+0x15c>)
				  filterSetters[i].setQ = &bandpassSetQ;
240023ba:	4c33      	ldr	r4, [pc, #204]	; (24002488 <setFilterTypes+0x160>)
				  filterTick[i] = &bandpassTick;
240023bc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &bandpassSetGain;
240023c0:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
240023c4:	4831      	ldr	r0, [pc, #196]	; (2400248c <setFilterTypes+0x164>)
				  filterSetters[i].setQ = &bandpassSetQ;
240023c6:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
240023ca:	6050      	str	r0, [r2, #4]
}
240023cc:	f85d 4b04 	ldr.w	r4, [sp], #4
240023d0:	4770      	bx	lr
				  filterSetters[i].setQ = &diodeLowpassSetQ;
240023d2:	4b1e      	ldr	r3, [pc, #120]	; (2400244c <setFilterTypes+0x124>)
				  filterTick[i] = &diodeLowpassTick;
240023d4:	4a1e      	ldr	r2, [pc, #120]	; (24002450 <setFilterTypes+0x128>)
240023d6:	482e      	ldr	r0, [pc, #184]	; (24002490 <setFilterTypes+0x168>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
240023d8:	4c2e      	ldr	r4, [pc, #184]	; (24002494 <setFilterTypes+0x16c>)
				  filterTick[i] = &diodeLowpassTick;
240023da:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
240023de:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
240023e2:	482d      	ldr	r0, [pc, #180]	; (24002498 <setFilterTypes+0x170>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
240023e4:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
240023e8:	6050      	str	r0, [r2, #4]
}
240023ea:	f85d 4b04 	ldr.w	r4, [sp], #4
240023ee:	4770      	bx	lr
				  filterSetters[i].setQ = &VZpeakSetQ;
240023f0:	4b16      	ldr	r3, [pc, #88]	; (2400244c <setFilterTypes+0x124>)
				  filterTick[i] = &VZpeakTick;
240023f2:	4a17      	ldr	r2, [pc, #92]	; (24002450 <setFilterTypes+0x128>)
240023f4:	4829      	ldr	r0, [pc, #164]	; (2400249c <setFilterTypes+0x174>)
				  filterSetters[i].setQ = &VZpeakSetQ;
240023f6:	4c2a      	ldr	r4, [pc, #168]	; (240024a0 <setFilterTypes+0x178>)
				  filterTick[i] = &VZpeakTick;
240023f8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZpeakSetGain;
240023fc:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
24002400:	4828      	ldr	r0, [pc, #160]	; (240024a4 <setFilterTypes+0x17c>)
				  filterSetters[i].setQ = &VZpeakSetQ;
24002402:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
24002406:	6050      	str	r0, [r2, #4]
}
24002408:	f85d 4b04 	ldr.w	r4, [sp], #4
2400240c:	4770      	bx	lr
				  filterSetters[i].setQ = &VZlowshelfSetQ;
2400240e:	4b0f      	ldr	r3, [pc, #60]	; (2400244c <setFilterTypes+0x124>)
				  filterTick[i] = &VZlowshelfTick;
24002410:	4a0f      	ldr	r2, [pc, #60]	; (24002450 <setFilterTypes+0x128>)
24002412:	4825      	ldr	r0, [pc, #148]	; (240024a8 <setFilterTypes+0x180>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002414:	4c25      	ldr	r4, [pc, #148]	; (240024ac <setFilterTypes+0x184>)
				  filterTick[i] = &VZlowshelfTick;
24002416:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
2400241a:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
2400241e:	4824      	ldr	r0, [pc, #144]	; (240024b0 <setFilterTypes+0x188>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
24002420:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
24002424:	6050      	str	r0, [r2, #4]
}
24002426:	f85d 4b04 	ldr.w	r4, [sp], #4
2400242a:	4770      	bx	lr
				  filterSetters[i].setQ = &VZhighshelfSetQ;
2400242c:	4b07      	ldr	r3, [pc, #28]	; (2400244c <setFilterTypes+0x124>)
				  filterTick[i] = &VZhighshelfTick;
2400242e:	4a08      	ldr	r2, [pc, #32]	; (24002450 <setFilterTypes+0x128>)
24002430:	4820      	ldr	r0, [pc, #128]	; (240024b4 <setFilterTypes+0x18c>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
24002432:	4c21      	ldr	r4, [pc, #132]	; (240024b8 <setFilterTypes+0x190>)
				  filterTick[i] = &VZhighshelfTick;
24002434:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
24002438:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
2400243c:	481f      	ldr	r0, [pc, #124]	; (240024bc <setFilterTypes+0x194>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
2400243e:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
24002442:	6050      	str	r0, [r2, #4]
}
24002444:	f85d 4b04 	ldr.w	r4, [sp], #4
24002448:	4770      	bx	lr
2400244a:	bf00      	nop
2400244c:	200164e8 	.word	0x200164e8
24002450:	2001d37c 	.word	0x2001d37c
24002454:	00008841 	.word	0x00008841
24002458:	00008ac1 	.word	0x00008ac1
2400245c:	00008cc1 	.word	0x00008cc1
24002460:	000088a1 	.word	0x000088a1
24002464:	00008ae1 	.word	0x00008ae1
24002468:	00008d01 	.word	0x00008d01
2400246c:	00008601 	.word	0x00008601
24002470:	000089e1 	.word	0x000089e1
24002474:	00008b01 	.word	0x00008b01
24002478:	00008661 	.word	0x00008661
2400247c:	00008a01 	.word	0x00008a01
24002480:	00008b41 	.word	0x00008b41
24002484:	000086c1 	.word	0x000086c1
24002488:	00008a21 	.word	0x00008a21
2400248c:	00008b81 	.word	0x00008b81
24002490:	00008721 	.word	0x00008721
24002494:	00008a41 	.word	0x00008a41
24002498:	00008bc1 	.word	0x00008bc1
2400249c:	00008781 	.word	0x00008781
240024a0:	00008a61 	.word	0x00008a61
240024a4:	00008c01 	.word	0x00008c01
240024a8:	000087c1 	.word	0x000087c1
240024ac:	00008a81 	.word	0x00008a81
240024b0:	00008c41 	.word	0x00008c41
240024b4:	00008801 	.word	0x00008801
240024b8:	00008aa1 	.word	0x00008aa1
240024bc:	00008c81 	.word	0x00008c81

240024c0 <setLFOShapes>:

void setLFOShapes(int LFOShape, int i)
{
240024c0:	b410      	push	{r4}
	switch(LFOShape)
240024c2:	2805      	cmp	r0, #5
240024c4:	d814      	bhi.n	240024f0 <setLFOShapes+0x30>
240024c6:	e8df f000 	tbb	[pc, r0]
240024ca:	3c29      	.short	0x3c29
240024cc:	1603624f 	.word	0x1603624f
			lfoSetters[i].setRate = &lfoTriSetRate;
			lfoSetters[i].setShape = &lfoTriSetShape;
			lfoSetters[i].setPhase = &lfoTriSetPhase;
			break;
		case SawLFOShapeSet:
			lfoShapeTick[i] = &lfoSawTick;
240024d0:	4b38      	ldr	r3, [pc, #224]	; (240025b4 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSetRate;
240024d2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawTick;
240024d6:	4c38      	ldr	r4, [pc, #224]	; (240025b8 <setLFOShapes+0xf8>)
			lfoSetters[i].setRate = &lfoSawSetRate;
240024d8:	4a38      	ldr	r2, [pc, #224]	; (240025bc <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawTick;
240024da:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
240024de:	4c38      	ldr	r4, [pc, #224]	; (240025c0 <setLFOShapes+0x100>)
240024e0:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSetShape;
240024e4:	4937      	ldr	r1, [pc, #220]	; (240025c4 <setLFOShapes+0x104>)
			lfoSetters[i].setRate = &lfoSawSetRate;
240024e6:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
240024ea:	4a37      	ldr	r2, [pc, #220]	; (240025c8 <setLFOShapes+0x108>)
240024ec:	e9c3 1201 	strd	r1, r2, [r3, #4]
			lfoSetters[i].setRate = &lfoPulseSetRate;
			lfoSetters[i].setShape = &lfoPulseSetShape;
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
			break;
	}
}
240024f0:	f85d 4b04 	ldr.w	r4, [sp], #4
240024f4:	4770      	bx	lr
			lfoShapeTick[i] = &lfoPulseTick;
240024f6:	4b2f      	ldr	r3, [pc, #188]	; (240025b4 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
240024f8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoPulseTick;
240024fc:	4c33      	ldr	r4, [pc, #204]	; (240025cc <setLFOShapes+0x10c>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
240024fe:	4a2f      	ldr	r2, [pc, #188]	; (240025bc <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoPulseTick;
24002500:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
24002504:	4c32      	ldr	r4, [pc, #200]	; (240025d0 <setLFOShapes+0x110>)
24002506:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoPulseSetShape;
2400250a:	4932      	ldr	r1, [pc, #200]	; (240025d4 <setLFOShapes+0x114>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
2400250c:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
24002510:	4a31      	ldr	r2, [pc, #196]	; (240025d8 <setLFOShapes+0x118>)
24002512:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002516:	f85d 4b04 	ldr.w	r4, [sp], #4
2400251a:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTriTick;
2400251c:	4b25      	ldr	r3, [pc, #148]	; (240025b4 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
2400251e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTriTick;
24002522:	4c2e      	ldr	r4, [pc, #184]	; (240025dc <setLFOShapes+0x11c>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002524:	4a25      	ldr	r2, [pc, #148]	; (240025bc <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTriTick;
24002526:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
2400252a:	4c2d      	ldr	r4, [pc, #180]	; (240025e0 <setLFOShapes+0x120>)
2400252c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineTriSetShape;
24002530:	492c      	ldr	r1, [pc, #176]	; (240025e4 <setLFOShapes+0x124>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
24002532:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
24002536:	4a2c      	ldr	r2, [pc, #176]	; (240025e8 <setLFOShapes+0x128>)
24002538:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
2400253c:	f85d 4b04 	ldr.w	r4, [sp], #4
24002540:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
24002542:	4b1c      	ldr	r3, [pc, #112]	; (240025b4 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002544:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawSquareTick;
24002548:	4c28      	ldr	r4, [pc, #160]	; (240025ec <setLFOShapes+0x12c>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
2400254a:	4a1c      	ldr	r2, [pc, #112]	; (240025bc <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawSquareTick;
2400254c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002550:	4c27      	ldr	r4, [pc, #156]	; (240025f0 <setLFOShapes+0x130>)
24002552:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
24002556:	4927      	ldr	r1, [pc, #156]	; (240025f4 <setLFOShapes+0x134>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
24002558:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
2400255c:	4a26      	ldr	r2, [pc, #152]	; (240025f8 <setLFOShapes+0x138>)
2400255e:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002562:	f85d 4b04 	ldr.w	r4, [sp], #4
24002566:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTick;
24002568:	4b12      	ldr	r3, [pc, #72]	; (240025b4 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineSetRate;
2400256a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTick;
2400256e:	4c23      	ldr	r4, [pc, #140]	; (240025fc <setLFOShapes+0x13c>)
			lfoSetters[i].setRate = &lfoSineSetRate;
24002570:	4a12      	ldr	r2, [pc, #72]	; (240025bc <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTick;
24002572:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
24002576:	4c22      	ldr	r4, [pc, #136]	; (24002600 <setLFOShapes+0x140>)
24002578:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineSetShape;
2400257c:	4921      	ldr	r1, [pc, #132]	; (24002604 <setLFOShapes+0x144>)
			lfoSetters[i].setRate = &lfoSineSetRate;
2400257e:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
24002582:	4a21      	ldr	r2, [pc, #132]	; (24002608 <setLFOShapes+0x148>)
24002584:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
24002588:	f85d 4b04 	ldr.w	r4, [sp], #4
2400258c:	4770      	bx	lr
			lfoShapeTick[i] = &lfoTriTick;
2400258e:	4b09      	ldr	r3, [pc, #36]	; (240025b4 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoTriSetRate;
24002590:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoTriTick;
24002594:	4c1d      	ldr	r4, [pc, #116]	; (2400260c <setLFOShapes+0x14c>)
			lfoSetters[i].setRate = &lfoTriSetRate;
24002596:	4a09      	ldr	r2, [pc, #36]	; (240025bc <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoTriTick;
24002598:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
2400259c:	4c1c      	ldr	r4, [pc, #112]	; (24002610 <setLFOShapes+0x150>)
2400259e:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoTriSetShape;
240025a2:	491c      	ldr	r1, [pc, #112]	; (24002614 <setLFOShapes+0x154>)
			lfoSetters[i].setRate = &lfoTriSetRate;
240025a4:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
240025a8:	4a1b      	ldr	r2, [pc, #108]	; (24002618 <setLFOShapes+0x158>)
240025aa:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
240025ae:	f85d 4b04 	ldr.w	r4, [sp], #4
240025b2:	4770      	bx	lr
240025b4:	2001d480 	.word	0x2001d480
240025b8:	000091a1 	.word	0x000091a1
240025bc:	20018644 	.word	0x20018644
240025c0:	00009281 	.word	0x00009281
240025c4:	00009401 	.word	0x00009401
240025c8:	00009341 	.word	0x00009341
240025cc:	000091e1 	.word	0x000091e1
240025d0:	000092a1 	.word	0x000092a1
240025d4:	00009421 	.word	0x00009421
240025d8:	00009361 	.word	0x00009361
240025dc:	00009141 	.word	0x00009141
240025e0:	00009221 	.word	0x00009221
240025e4:	000093a1 	.word	0x000093a1
240025e8:	000092e1 	.word	0x000092e1
240025ec:	00009121 	.word	0x00009121
240025f0:	00009201 	.word	0x00009201
240025f4:	00009381 	.word	0x00009381
240025f8:	000092c1 	.word	0x000092c1
240025fc:	00009161 	.word	0x00009161
24002600:	00009241 	.word	0x00009241
24002604:	000093c1 	.word	0x000093c1
24002608:	00009301 	.word	0x00009301
2400260c:	00009181 	.word	0x00009181
24002610:	00009261 	.word	0x00009261
24002614:	000093e1 	.word	0x000093e1
24002618:	00009321 	.word	0x00009321

2400261c <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
2400261c:	4bd6      	ldr	r3, [pc, #856]	; (24002978 <main+0x35c>)
{
2400261e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24002622:	ed2d 8b02 	vpush	{d8}
24002626:	695a      	ldr	r2, [r3, #20]
24002628:	b09d      	sub	sp, #116	; 0x74
2400262a:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
2400262e:	d111      	bne.n	24002654 <main+0x38>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
24002630:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24002634:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
24002638:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
2400263c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24002640:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
24002644:	695a      	ldr	r2, [r3, #20]
24002646:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
2400264a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
2400264c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24002650:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
24002654:	49c8      	ldr	r1, [pc, #800]	; (24002978 <main+0x35c>)
24002656:	694b      	ldr	r3, [r1, #20]
24002658:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
2400265c:	d124      	bne.n	240026a8 <main+0x8c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
2400265e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
24002662:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
24002666:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
2400266a:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
2400266e:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
24002672:	f3c5 05c9 	ubfx	r5, r5, #3, #10
24002676:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24002678:	ea04 0006 	and.w	r0, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
2400267c:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
2400267e:	ea40 7283 	orr.w	r2, r0, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
24002682:	3b01      	subs	r3, #1
24002684:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
24002686:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
      } while (ways-- != 0U);
2400268a:	d1f8      	bne.n	2400267e <main+0x62>
    } while(sets-- != 0U);
2400268c:	3c20      	subs	r4, #32
2400268e:	f114 0f20 	cmn.w	r4, #32
24002692:	d1f1      	bne.n	24002678 <main+0x5c>
24002694:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
24002698:	694b      	ldr	r3, [r1, #20]
2400269a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400269e:	614b      	str	r3, [r1, #20]
240026a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240026a4:	f3bf 8f6f 	isb	sy

/* MPU Configuration */

void MPU_Config(void)
{
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
240026a8:	ae16      	add	r6, sp, #88	; 0x58
240026aa:	2400      	movs	r4, #0
  HAL_Init();
240026ac:	f002 f8a0 	bl	240047f0 <HAL_Init>
	  /* Disables the MPU */
	  HAL_MPU_Disable();

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
240026b0:	2501      	movs	r5, #1
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
240026b2:	9416      	str	r4, [sp, #88]	; 0x58

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
240026b4:	f04f 0804 	mov.w	r8, #4
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
240026b8:	60f4      	str	r4, [r6, #12]
240026ba:	e9c6 4401 	strd	r4, r4, [r6, #4]
	  HAL_MPU_Disable();
240026be:	f002 f965 	bl	2400498c <HAL_MPU_Disable>
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
240026c2:	f248 721f 	movw	r2, #34591	; 0x871f
240026c6:	f240 1301 	movw	r3, #257	; 0x101
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240026ca:	4630      	mov	r0, r6
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
240026cc:	f8ad 5058 	strh.w	r5, [sp, #88]	; 0x58
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
240026d0:	9319      	str	r3, [sp, #100]	; 0x64
240026d2:	e9cd 4217 	strd	r4, r2, [sp, #92]	; 0x5c
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240026d6:	f002 f977 	bl	240049c8 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.BaseAddress = 0x024000000;
240026da:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
240026de:	4ba7      	ldr	r3, [pc, #668]	; (2400297c <main+0x360>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240026e0:	4630      	mov	r0, r6
	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
240026e2:	f88d 5059 	strb.w	r5, [sp, #89]	; 0x59
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
240026e6:	e9cd 2317 	strd	r2, r3, [sp, #92]	; 0x5c
240026ea:	4ba5      	ldr	r3, [pc, #660]	; (24002980 <main+0x364>)
240026ec:	9319      	str	r3, [sp, #100]	; 0x64
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240026ee:	f002 f96b 	bl	240049c8 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
240026f2:	2202      	movs	r2, #2
	  MPU_InitStruct.BaseAddress = 0x24040000;
240026f4:	4ba3      	ldr	r3, [pc, #652]	; (24002984 <main+0x368>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
240026f6:	4630      	mov	r0, r6
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
240026f8:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
	  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
240026fc:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	  MPU_InitStruct.BaseAddress = 0x24040000;
24002700:	9317      	str	r3, [sp, #92]	; 0x5c
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002702:	f002 f961 	bl	240049c8 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
24002706:	2303      	movs	r3, #3
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002708:	4630      	mov	r0, r6
	  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
2400270a:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
	  MPU_InitStruct.BaseAddress = 0x30000000;
2400270e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
24002712:	9317      	str	r3, [sp, #92]	; 0x5c
	  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
24002714:	2312      	movs	r3, #18
24002716:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400271a:	f002 f955 	bl	240049c8 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
2400271e:	230c      	movs	r3, #12
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002720:	4630      	mov	r0, r6
	  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
24002722:	f88d 8059 	strb.w	r8, [sp, #89]	; 0x59
	  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
24002726:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
2400272a:	f88d 4062 	strb.w	r4, [sp, #98]	; 0x62
	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
2400272e:	f8ad 5065 	strh.w	r5, [sp, #101]	; 0x65
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
24002732:	f88d 4067 	strb.w	r4, [sp, #103]	; 0x67
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002736:	f002 f947 	bl	240049c8 <HAL_MPU_ConfigRegion>

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
	  MPU_InitStruct.BaseAddress = 0x38000000;
2400273a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
	  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
2400273e:	2205      	movs	r2, #5
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002740:	4630      	mov	r0, r6
	  MPU_InitStruct.BaseAddress = 0x38000000;
24002742:	9317      	str	r3, [sp, #92]	; 0x5c
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
24002744:	230f      	movs	r3, #15
	  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
24002746:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
2400274a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400274e:	f002 f93b 	bl	240049c8 <HAL_MPU_ConfigRegion>

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
	  MPU_InitStruct.BaseAddress = 0x38800000;
24002752:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
	  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
24002756:	2206      	movs	r2, #6
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002758:	4630      	mov	r0, r6
	  MPU_InitStruct.BaseAddress = 0x38800000;
2400275a:	9317      	str	r3, [sp, #92]	; 0x5c
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
2400275c:	230b      	movs	r3, #11
	  MPU_InitStruct.Number = MPU_REGION_NUMBER6;
2400275e:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
24002762:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002766:	f002 f92f 	bl	240049c8 <HAL_MPU_ConfigRegion>

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
	  MPU_InitStruct.BaseAddress = 0xc0000000;
2400276a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
	  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
2400276e:	2207      	movs	r2, #7
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002770:	4630      	mov	r0, r6
	  MPU_InitStruct.BaseAddress = 0xc0000000;
24002772:	9317      	str	r3, [sp, #92]	; 0x5c
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
24002774:	2319      	movs	r3, #25
	  MPU_InitStruct.Number = MPU_REGION_NUMBER7;
24002776:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
2400277a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400277e:	f002 f923 	bl	240049c8 <HAL_MPU_ConfigRegion>

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
24002782:	2208      	movs	r2, #8
	  MPU_InitStruct.BaseAddress = 0x90040000;
24002784:	4b80      	ldr	r3, [pc, #512]	; (24002988 <main+0x36c>)

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
24002786:	4630      	mov	r0, r6
	  MPU_InitStruct.Number = MPU_REGION_NUMBER8;
24002788:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	  MPU_InitStruct.BaseAddress = 0x90040000;
2400278c:	9317      	str	r3, [sp, #92]	; 0x5c
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
2400278e:	f002 f91b 	bl	240049c8 <HAL_MPU_ConfigRegion>
	  /* Enables the MPU */
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
24002792:	4640      	mov	r0, r8
24002794:	f002 f908 	bl	240049a8 <HAL_MPU_Enable>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
24002798:	b662      	cpsie	i
  SystemClock_Config();
2400279a:	f7fe febb 	bl	24001514 <SystemClock_Config>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
2400279e:	f8df b250 	ldr.w	fp, [pc, #592]	; 240029f0 <main+0x3d4>
  PeriphCommonClock_Config();
240027a2:	f7fe ff39 	bl	24001618 <PeriphCommonClock_Config>
  MX_GPIO_Init();
240027a6:	f7fe fbbb 	bl	24000f20 <MX_GPIO_Init>
  MX_DMA_Init();
240027aa:	f7fe fac9 	bl	24000d40 <MX_DMA_Init>
  MX_BDMA_Init();
240027ae:	f7fe f9fb 	bl	24000ba8 <MX_BDMA_Init>
  MX_I2C2_Init();
240027b2:	f7fe fd65 	bl	24001280 <MX_I2C2_Init>
  MX_SAI1_Init();
240027b6:	f000 fe13 	bl	240033e0 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
240027ba:	f000 ff13 	bl	240035e4 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
240027be:	f000 ff7b 	bl	240036b8 <MX_SPI1_Init>
  MX_I2C1_Init();
240027c2:	f7fe fd1d 	bl	24001200 <MX_I2C1_Init>
  MX_FMC_Init();
240027c6:	f7fe fb07 	bl	24000dd8 <MX_FMC_Init>
  MX_FATFS_Init();
240027ca:	f00a fbf7 	bl	2400cfbc <MX_FATFS_Init>
  MX_SPI6_Init();
240027ce:	f000 ff9f 	bl	24003710 <MX_SPI6_Init>
  MX_RNG_Init();
240027d2:	f000 fdc5 	bl	24003360 <MX_RNG_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
240027d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
240027da:	486c      	ldr	r0, [pc, #432]	; (2400298c <main+0x370>)
240027dc:	f004 f866 	bl	240068ac <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
240027e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
240027e4:	4607      	mov	r7, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
240027e6:	4869      	ldr	r0, [pc, #420]	; (2400298c <main+0x370>)
240027e8:	f004 f860 	bl	240068ac <HAL_GPIO_ReadPin>
240027ec:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
240027ee:	4641      	mov	r1, r8
240027f0:	4867      	ldr	r0, [pc, #412]	; (24002990 <main+0x374>)
240027f2:	f004 f85b 	bl	240068ac <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
240027f6:	00a3      	lsls	r3, r4, #2
240027f8:	eb03 0347 	add.w	r3, r3, r7, lsl #1
240027fc:	4418      	add	r0, r3
240027fe:	b2c4      	uxtb	r4, r0
24002800:	f88b 4000 	strb.w	r4, [fp]
	if (boardNumber == 0)
24002804:	2c00      	cmp	r4, #0
24002806:	f000 8557 	beq.w	240032b8 <main+0xc9c>
	HAL_Delay(500);
2400280a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
2400280e:	f002 f831 	bl	24004874 <HAL_Delay>
    if (boardNumber !=0)
24002812:	f89b 3000 	ldrb.w	r3, [fp]
24002816:	2b00      	cmp	r3, #0
24002818:	f040 8546 	bne.w	240032a8 <main+0xc8c>
   PWR->CR1 |= PWR_CR1_DBP;
2400281c:	4a5d      	ldr	r2, [pc, #372]	; (24002994 <main+0x378>)
2400281e:	6813      	ldr	r3, [r2, #0]
24002820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24002824:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
24002826:	6813      	ldr	r3, [r2, #0]
24002828:	05d9      	lsls	r1, r3, #23
2400282a:	d5fc      	bpl.n	24002826 <main+0x20a>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
2400282c:	4b5a      	ldr	r3, [pc, #360]	; (24002998 <main+0x37c>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
2400282e:	2200      	movs	r2, #0
24002830:	2180      	movs	r1, #128	; 0x80
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24002832:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
24002836:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
2400283a:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
2400283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
24002842:	4856      	ldr	r0, [pc, #344]	; (2400299c <main+0x380>)
   __HAL_RCC_BKPRAM_CLK_ENABLE();
24002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24002848:	9308      	str	r3, [sp, #32]
2400284a:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
2400284c:	f004 f834 	bl	240068b8 <HAL_GPIO_WritePin>
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
24002850:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
24002854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
24002858:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
2400285c:	4946      	ldr	r1, [pc, #280]	; (24002978 <main+0x35c>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
2400285e:	4a50      	ldr	r2, [pc, #320]	; (240029a0 <main+0x384>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
24002860:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
24002864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24002868:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
2400286c:	f8d2 3fb4 	ldr.w	r3, [r2, #4020]	; 0xfb4
24002870:	07db      	lsls	r3, r3, #31
24002872:	d502      	bpl.n	2400287a <main+0x25e>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
24002874:	4b4b      	ldr	r3, [pc, #300]	; (240029a4 <main+0x388>)
24002876:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
2400287a:	4b49      	ldr	r3, [pc, #292]	; (240029a0 <main+0x384>)
2400287c:	2100      	movs	r1, #0
  DWT->CTRL = 0x40000001;
2400287e:	4a4a      	ldr	r2, [pc, #296]	; (240029a8 <main+0x38c>)
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
24002880:	2403      	movs	r4, #3
  DWT->CYCCNT = 0;
24002882:	6059      	str	r1, [r3, #4]
	  SPI_PLUCK_TX[i] = 0;
24002884:	4849      	ldr	r0, [pc, #292]	; (240029ac <main+0x390>)
  DWT->CTRL = 0x40000001;
24002886:	601a      	str	r2, [r3, #0]
	  SPI_PLUCK_TX[i] = 0;
24002888:	2240      	movs	r2, #64	; 0x40
2400288a:	f017 f885 	bl	24019998 <memset>
	  buffer[i] = 0;
2400288e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24002892:	2100      	movs	r1, #0
24002894:	4846      	ldr	r0, [pc, #280]	; (240029b0 <main+0x394>)
24002896:	f017 f87f 	bl	24019998 <memset>
  buffer[15+112] = NUM_PARAMS;
2400289a:	4945      	ldr	r1, [pc, #276]	; (240029b0 <main+0x394>)
2400289c:	239c      	movs	r3, #156	; 0x9c
  buffer[NUM_PARAMS*2+16+112] = 0xef;
2400289e:	f64e 72ef 	movw	r2, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
240028a2:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
240028a6:	ed9f 0a43 	vldr	s0, [pc, #268]	; 240029b4 <main+0x398>
  buffer[15+112] = NUM_PARAMS;
240028aa:	f881 307f 	strb.w	r3, [r1, #127]	; 0x7f
  buffer[NUM_PARAMS*2+19+112] = 1;
240028ae:	2301      	movs	r3, #1
  buffer[NUM_PARAMS*2+16+112] = 0xef;
240028b0:	f8a1 21b8 	strh.w	r2, [r1, #440]	; 0x1b8
  buffer[NUM_PARAMS*2+19+112] = 1;
240028b4:	460a      	mov	r2, r1
240028b6:	f881 31bb 	strb.w	r3, [r1, #443]	; 0x1bb
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
240028ba:	f64f 63fe 	movw	r3, #65278	; 0xfefe
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
240028be:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
240028c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
240028c6:	483c      	ldr	r0, [pc, #240]	; (240029b8 <main+0x39c>)
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
240028c8:	f8a2 31c1 	strh.w	r3, [r2, #449]	; 0x1c1
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
240028cc:	f012 f81c 	bl	24014908 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
240028d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
240028d4:	ed9f 1a39 	vldr	s2, [pc, #228]	; 240029bc <main+0x3a0>
240028d8:	eddf 0a39 	vldr	s1, [pc, #228]	; 240029c0 <main+0x3a4>
240028dc:	ed9f 0a39 	vldr	s0, [pc, #228]	; 240029c4 <main+0x3a8>
240028e0:	4839      	ldr	r0, [pc, #228]	; (240029c8 <main+0x3ac>)
240028e2:	f012 f811 	bl	24014908 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
240028e6:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
240028ea:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
240028ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
240028f2:	ed9f 0a34 	vldr	s0, [pc, #208]	; 240029c4 <main+0x3a8>
240028f6:	4835      	ldr	r0, [pc, #212]	; (240029cc <main+0x3b0>)
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
240028f8:	4d25      	ldr	r5, [pc, #148]	; (24002990 <main+0x374>)
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
240028fa:	f012 f805 	bl	24014908 <LEAF_generate_table_skew_non_sym>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
240028fe:	2201      	movs	r2, #1
24002900:	4628      	mov	r0, r5
24002902:	4611      	mov	r1, r2
24002904:	f003 ffd8 	bl	240068b8 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
24002908:	200a      	movs	r0, #10
2400290a:	f001 ffb3 	bl	24004874 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
2400290e:	4628      	mov	r0, r5
24002910:	2200      	movs	r2, #0
24002912:	2101      	movs	r1, #1
24002914:	f003 ffd0 	bl	240068b8 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
24002918:	200a      	movs	r0, #10
2400291a:	f001 ffab 	bl	24004874 <HAL_Delay>
  for (int i = 0; i < 3; i++)
2400291e:	3c01      	subs	r4, #1
24002920:	d1ed      	bne.n	240028fe <main+0x2e2>
  if (boardNumber == 0)
24002922:	f89b 3000 	ldrb.w	r3, [fp]
24002926:	2b00      	cmp	r3, #0
24002928:	f000 84ba 	beq.w	240032a0 <main+0xc84>
	  diskBusy = 1;
2400292c:	2301      	movs	r3, #1
2400292e:	4a28      	ldr	r2, [pc, #160]	; (240029d0 <main+0x3b4>)
  specialModeMacroNames[0][0] = "Feedback  ";
24002930:	4d28      	ldr	r5, [pc, #160]	; (240029d4 <main+0x3b8>)
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24002932:	f04f 08c8 	mov.w	r8, #200	; 0xc8
	  diskBusy = 1;
24002936:	7013      	strb	r3, [r2, #0]
  SDRAM_init();
24002938:	f7ff f9dc 	bl	24001cf4 <SDRAM_init>
  codec_init(&hi2c2);
2400293c:	4826      	ldr	r0, [pc, #152]	; (240029d8 <main+0x3bc>)
2400293e:	f7fe f957 	bl	24000bf0 <codec_init>
  specialModeMacroNames[1][1] = "Tone      ";
24002942:	4f26      	ldr	r7, [pc, #152]	; (240029dc <main+0x3c0>)
  audioInit();
24002944:	f7fd ff70 	bl	24000828 <audioInit>
  specialModeNames[0] = "PHYS STR1     ";
24002948:	4a25      	ldr	r2, [pc, #148]	; (240029e0 <main+0x3c4>)
2400294a:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 240029f4 <main+0x3d8>
  specialModeMacroNames[0][5] = "          ";
2400294e:	4b25      	ldr	r3, [pc, #148]	; (240029e4 <main+0x3c8>)
  specialModeNames[0] = "PHYS STR1     ";
24002950:	f8c2 e000 	str.w	lr, [r2]
  specialModeMacroNames[0][0] = "Feedback  ";
24002954:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 240029f8 <main+0x3dc>
  specialModeMacroNames[0][1] = "SlideNois ";
24002958:	4923      	ldr	r1, [pc, #140]	; (240029e8 <main+0x3cc>)
  specialModeMacroNames[0][0] = "Feedback  ";
2400295a:	f8c5 e000 	str.w	lr, [r5]
  specialModeMacroNames[0][2] = "PluckWidt ";
2400295e:	f8df e09c 	ldr.w	lr, [pc, #156]	; 240029fc <main+0x3e0>
  specialModeMacroNames[1][3] = "PickupPos ";
24002962:	f8df c09c 	ldr.w	ip, [pc, #156]	; 24002a00 <main+0x3e4>
  specialModeMacroNames[0][2] = "PluckWidt ";
24002966:	f8c5 e008 	str.w	lr, [r5, #8]
  specialModeMacroNames[0][3] = "PickNoise ";
2400296a:	f8df e098 	ldr.w	lr, [pc, #152]	; 24002a04 <main+0x3e8>
  specialModeMacroNames[1][5] = "Stiffness ";
2400296e:	4c1f      	ldr	r4, [pc, #124]	; (240029ec <main+0x3d0>)
  specialModeMacroNames[0][3] = "PickNoise ";
24002970:	f8c5 e00c 	str.w	lr, [r5, #12]
24002974:	e048      	b.n	24002a08 <main+0x3ec>
24002976:	bf00      	nop
24002978:	e000ed00 	.word	0xe000ed00
2400297c:	03010011 	.word	0x03010011
24002980:	01010000 	.word	0x01010000
24002984:	24040000 	.word	0x24040000
24002988:	90040000 	.word	0x90040000
2400298c:	58020400 	.word	0x58020400
24002990:	58020000 	.word	0x58020000
24002994:	58024800 	.word	0x58024800
24002998:	58024400 	.word	0x58024400
2400299c:	58020800 	.word	0x58020800
240029a0:	e0001000 	.word	0xe0001000
240029a4:	c5acce55 	.word	0xc5acce55
240029a8:	40000001 	.word	0x40000001
240029ac:	38000000 	.word	0x38000000
240029b0:	30042380 	.word	0x30042380
240029b4:	3c23d70a 	.word	0x3c23d70a
240029b8:	2001a8d0 	.word	0x2001a8d0
240029bc:	457a0000 	.word	0x457a0000
240029c0:	469c4000 	.word	0x469c4000
240029c4:	00000000 	.word	0x00000000
240029c8:	200144e8 	.word	0x200144e8
240029cc:	20016644 	.word	0x20016644
240029d0:	20014490 	.word	0x20014490
240029d4:	2001c8d0 	.word	0x2001c8d0
240029d8:	200143e0 	.word	0x200143e0
240029dc:	2401c5fc 	.word	0x2401c5fc
240029e0:	2001ca60 	.word	0x2001ca60
240029e4:	2401c5d4 	.word	0x2401c5d4
240029e8:	2401c5a4 	.word	0x2401c5a4
240029ec:	2401c620 	.word	0x2401c620
240029f0:	20014435 	.word	0x20014435
240029f4:	2401c588 	.word	0x2401c588
240029f8:	2401c598 	.word	0x2401c598
240029fc:	2401c5b0 	.word	0x2401c5b0
24002a00:	2401c614 	.word	0x2401c614
24002a04:	2401c5bc 	.word	0x2401c5bc
  specialModeMacroNames[0][4] = "PickupSim ";
24002a08:	f8df e364 	ldr.w	lr, [pc, #868]	; 24002d70 <main+0x754>
  specialModeMacroNames[1][8] = "PU Filter ";
24002a0c:	48a7      	ldr	r0, [pc, #668]	; (24002cac <main+0x690>)
  specialModeMacroNames[0][4] = "PickupSim ";
24002a0e:	f8c5 e010 	str.w	lr, [r5, #16]
  specialModeNames[1] = "PHYS STR2     ";
24002a12:	f8df e360 	ldr.w	lr, [pc, #864]	; 24002d74 <main+0x758>
  specialModeMacroNames[0][1] = "SlideNois ";
24002a16:	6069      	str	r1, [r5, #4]
  specialModeNames[1] = "PHYS STR2     ";
24002a18:	f8c2 e004 	str.w	lr, [r2, #4]
  specialModeMacroNames[1][0] = "DecayTime ";
24002a1c:	f8df e358 	ldr.w	lr, [pc, #856]	; 24002d78 <main+0x75c>
  specialModeMacroNames[1][4] = "SlideNois ";
24002a20:	6629      	str	r1, [r5, #96]	; 0x60
  specialModeMacroNames[1][0] = "DecayTime ";
24002a22:	f8c5 e050 	str.w	lr, [r5, #80]	; 0x50
  specialModeMacroNames[1][2] = "PluckPos  ";
24002a26:	f8df e354 	ldr.w	lr, [pc, #852]	; 24002d7c <main+0x760>
  specialModeMacroNames[1][1] = "Tone      ";
24002a2a:	656f      	str	r7, [r5, #84]	; 0x54
  specialModeMacroNames[1][2] = "PluckPos  ";
24002a2c:	f8c5 e058 	str.w	lr, [r5, #88]	; 0x58
  specialModeMacroNames[1][6] = "FB Amp    ";
24002a30:	f8df e34c 	ldr.w	lr, [pc, #844]	; 24002d80 <main+0x764>
  specialModeMacroNames[1][3] = "PickupPos ";
24002a34:	f8c5 c05c 	str.w	ip, [r5, #92]	; 0x5c
  specialModeMacroNames[1][6] = "FB Amp    ";
24002a38:	f8c5 e068 	str.w	lr, [r5, #104]	; 0x68
  specialModeMacroNames[1][7] = "FB Speed  ";
24002a3c:	f8df e344 	ldr.w	lr, [pc, #836]	; 24002d84 <main+0x768>
  specialModeMacroNames[1][5] = "Stiffness ";
24002a40:	666c      	str	r4, [r5, #100]	; 0x64
  specialModeMacroNames[1][7] = "FB Speed  ";
24002a42:	f8c5 e06c 	str.w	lr, [r5, #108]	; 0x6c
  specialModeMacroNames[1][9] = "Harmonic  ";
24002a46:	f8df e340 	ldr.w	lr, [pc, #832]	; 24002d88 <main+0x76c>
  specialModeMacroNames[0][19] = "          ";
24002a4a:	64eb      	str	r3, [r5, #76]	; 0x4c
  specialModeMacroNames[1][9] = "Harmonic  ";
24002a4c:	f8c5 e074 	str.w	lr, [r5, #116]	; 0x74
  specialModeMacroNames[1][10] = "HarmPosX  ";
24002a50:	f8df e338 	ldr.w	lr, [pc, #824]	; 24002d8c <main+0x770>
  specialModeMacroNames[1][8] = "PU Filter ";
24002a54:	6728      	str	r0, [r5, #112]	; 0x70
  specialModeMacroNames[2][11] = "Decay     ";
24002a56:	4996      	ldr	r1, [pc, #600]	; (24002cb0 <main+0x694>)
  specialModeMacroNames[0][6] = "          ";
24002a58:	e9c5 3305 	strd	r3, r3, [r5, #20]
  specialModeMacroNames[0][8] = "          ";
24002a5c:	e9c5 3307 	strd	r3, r3, [r5, #28]
  specialModeMacroNames[0][10] = "          ";
24002a60:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
  specialModeMacroNames[0][12] = "          ";
24002a64:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
  specialModeMacroNames[0][14] = "          ";
24002a68:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
  specialModeMacroNames[0][16] = "          ";
24002a6c:	e9c5 330f 	strd	r3, r3, [r5, #60]	; 0x3c
  specialModeMacroNames[0][18] = "          ";
24002a70:	e9c5 3311 	strd	r3, r3, [r5, #68]	; 0x44
  specialModeMacroNames[1][10] = "HarmPosX  ";
24002a74:	f8c5 e078 	str.w	lr, [r5, #120]	; 0x78
  specialModeMacroNames[2][10] = "Tone      ";
24002a78:	f8c5 70c8 	str.w	r7, [r5, #200]	; 0xc8
  specialModeMacroNames[1][11] = "HarmPosY  ";
24002a7c:	4f8d      	ldr	r7, [pc, #564]	; (24002cb4 <main+0x698>)
  specialModeMacroNames[2][3] = "PickupPos ";
24002a7e:	f8c5 c0ac 	str.w	ip, [r5, #172]	; 0xac
24002a82:	4694      	mov	ip, r2
  specialModeMacroNames[1][11] = "HarmPosY  ";
24002a84:	67ef      	str	r7, [r5, #124]	; 0x7c
  specialModeMacroNames[1][12] = "PUModRate ";
24002a86:	4f8c      	ldr	r7, [pc, #560]	; (24002cb8 <main+0x69c>)
  specialModeMacroNames[2][9] = "          ";
24002a88:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
  specialModeMacroNames[1][12] = "PUModRate ";
24002a8c:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
  specialModeMacroNames[1][13] = "PUModAmp  ";
24002a90:	4f8a      	ldr	r7, [pc, #552]	; (24002cbc <main+0x6a0>)
  specialModeMacroNames[2][19] = "          ";
24002a92:	f8c5 30ec 	str.w	r3, [r5, #236]	; 0xec
  specialModeMacroNames[1][13] = "PUModAmp  ";
24002a96:	f8c5 7084 	str.w	r7, [r5, #132]	; 0x84
  specialModeMacroNames[1][14] = "PhantomH  ";
24002a9a:	4f89      	ldr	r7, [pc, #548]	; (24002cc0 <main+0x6a4>)
24002a9c:	f8df e2f0 	ldr.w	lr, [pc, #752]	; 24002d90 <main+0x774>
24002aa0:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
  specialModeMacroNames[1][15] = "PUFilterQ ";
24002aa4:	4f87      	ldr	r7, [pc, #540]	; (24002cc4 <main+0x6a8>)
24002aa6:	f8c5 708c 	str.w	r7, [r5, #140]	; 0x8c
  specialModeMacroNames[1][16] = "PeakF Frq ";
24002aaa:	4f87      	ldr	r7, [pc, #540]	; (24002cc8 <main+0x6ac>)
24002aac:	f8c5 7090 	str.w	r7, [r5, #144]	; 0x90
  specialModeMacroNames[1][17] = "PeakF Q   ";
24002ab0:	4f86      	ldr	r7, [pc, #536]	; (24002ccc <main+0x6b0>)
24002ab2:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
  specialModeMacroNames[1][18] = "Tension G ";
24002ab6:	4f86      	ldr	r7, [pc, #536]	; (24002cd0 <main+0x6b4>)
24002ab8:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
  specialModeMacroNames[1][19] = "Acoustic  ";
24002abc:	4f85      	ldr	r7, [pc, #532]	; (24002cd4 <main+0x6b8>)
24002abe:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
  specialModeNames[2] = "ADDITIVE      ";
24002ac2:	4f85      	ldr	r7, [pc, #532]	; (24002cd8 <main+0x6bc>)
24002ac4:	6097      	str	r7, [r2, #8]
  specialModeMacroNames[2][0] = "Stretch   ";
24002ac6:	4f85      	ldr	r7, [pc, #532]	; (24002cdc <main+0x6c0>)
24002ac8:	f8c5 70a0 	str.w	r7, [r5, #160]	; 0xa0
  specialModeMacroNames[2][1] = "Tilt      ";
24002acc:	4f84      	ldr	r7, [pc, #528]	; (24002ce0 <main+0x6c4>)
24002ace:	f8c5 70a4 	str.w	r7, [r5, #164]	; 0xa4
  specialModeMacroNames[2][2] = "NoiseAmp  ";
24002ad2:	4f84      	ldr	r7, [pc, #528]	; (24002ce4 <main+0x6c8>)
24002ad4:	f8c5 70a8 	str.w	r7, [r5, #168]	; 0xa8
  specialModeMacroNames[2][4] = "PickupAmp ";
24002ad8:	4f83      	ldr	r7, [pc, #524]	; (24002ce8 <main+0x6cc>)
24002ada:	f8c5 70b0 	str.w	r7, [r5, #176]	; 0xb0
  specialModeMacroNames[2][5] = "DiveAmp   ";
24002ade:	4f83      	ldr	r7, [pc, #524]	; (24002cec <main+0x6d0>)
24002ae0:	f8c5 70b4 	str.w	r7, [r5, #180]	; 0xb4
  specialModeMacroNames[2][6] = "DiveRate  ";
24002ae4:	4f82      	ldr	r7, [pc, #520]	; (24002cf0 <main+0x6d4>)
24002ae6:	f8c5 70b8 	str.w	r7, [r5, #184]	; 0xb8
  specialModeNames[3] = "VOCAL        ";
24002aea:	4f82      	ldr	r7, [pc, #520]	; (24002cf4 <main+0x6d8>)
24002aec:	60d7      	str	r7, [r2, #12]
  specialModeMacroNames[3][0] = "Size      ";
24002aee:	4f82      	ldr	r7, [pc, #520]	; (24002cf8 <main+0x6dc>)
24002af0:	f8c5 70f0 	str.w	r7, [r5, #240]	; 0xf0
  specialModeMacroNames[3][1] = "Chipmunk  ";
24002af4:	4f81      	ldr	r7, [pc, #516]	; (24002cfc <main+0x6e0>)
  specialModeMacroNames[2][12] = "          ";
24002af6:	e9c5 1333 	strd	r1, r3, [r5, #204]	; 0xcc
  specialModeMacroNames[2][8] = "          ";
24002afa:	e9c5 332f 	strd	r3, r3, [r5, #188]	; 0xbc
  specialModeMacroNames[2][14] = "          ";
24002afe:	e9c5 3335 	strd	r3, r3, [r5, #212]	; 0xd4
  specialModeMacroNames[2][16] = "          ";
24002b02:	e9c5 3337 	strd	r3, r3, [r5, #220]	; 0xdc
  specialModeMacroNames[2][18] = "          ";
24002b06:	e9c5 3339 	strd	r3, r3, [r5, #228]	; 0xe4
  specialModeMacroNames[3][1] = "Chipmunk  ";
24002b0a:	f8c5 70f4 	str.w	r7, [r5, #244]	; 0xf4
  specialModeMacroNames[4][19] = "          ";
24002b0e:	273f      	movs	r7, #63	; 0x3f
  specialModeMacroNames[4][8] = "Decay     ";
24002b10:	f8c5 1160 	str.w	r1, [r5, #352]	; 0x160
  specialModeMacroNames[3][2] = "Diameter  ";
24002b14:	497a      	ldr	r1, [pc, #488]	; (24002d00 <main+0x6e4>)
  specialModeMacroNames[4][0] = "Stiffness ";
24002b16:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
  specialModeMacroNames[3][2] = "Diameter  ";
24002b1a:	f8c5 10f8 	str.w	r1, [r5, #248]	; 0xf8
  specialModeMacroNames[3][3] = "Nasal     ";
24002b1e:	4979      	ldr	r1, [pc, #484]	; (24002d04 <main+0x6e8>)
  specialModeMacroNames[4][3] = "PU Filter ";
24002b20:	f8c5 014c 	str.w	r0, [r5, #332]	; 0x14c
  specialModeMacroNames[3][3] = "Nasal     ";
24002b24:	f8c5 10fc 	str.w	r1, [r5, #252]	; 0xfc
  specialModeMacroNames[3][4] = "Turb Nois ";
24002b28:	4977      	ldr	r1, [pc, #476]	; (24002d08 <main+0x6ec>)
  specialModeMacroNames[4][12] = "          ";
24002b2a:	f8c5 3170 	str.w	r3, [r5, #368]	; 0x170
  specialModeMacroNames[3][4] = "Turb Nois ";
24002b2e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
  specialModeMacroNames[3][5] = "Unvoiced  ";
24002b32:	4976      	ldr	r1, [pc, #472]	; (24002d0c <main+0x6f0>)
24002b34:	4c76      	ldr	r4, [pc, #472]	; (24002d10 <main+0x6f4>)
24002b36:	f8c5 1104 	str.w	r1, [r5, #260]	; 0x104
  specialModeMacroNames[3][8] = "BackPos   ";
24002b3a:	4976      	ldr	r1, [pc, #472]	; (24002d14 <main+0x6f8>)
24002b3c:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
  specialModeMacroNames[3][9] = "BackDiam  ";
24002b40:	4975      	ldr	r1, [pc, #468]	; (24002d18 <main+0x6fc>)
24002b42:	f8c5 1114 	str.w	r1, [r5, #276]	; 0x114
  specialModeMacroNames[3][10] = "ToungePos  ";
24002b46:	4975      	ldr	r1, [pc, #468]	; (24002d1c <main+0x700>)
24002b48:	f8c5 1118 	str.w	r1, [r5, #280]	; 0x118
  specialModeMacroNames[3][11] = "ToungeDia  ";
24002b4c:	4974      	ldr	r1, [pc, #464]	; (24002d20 <main+0x704>)
24002b4e:	f8c5 111c 	str.w	r1, [r5, #284]	; 0x11c
  specialModeNames[4] = "STRING3      ";
24002b52:	4974      	ldr	r1, [pc, #464]	; (24002d24 <main+0x708>)
24002b54:	6111      	str	r1, [r2, #16]
  specialModeMacroNames[4][19] = "          ";
24002b56:	2150      	movs	r1, #80	; 0x50
  specialModeMacroNames[4][1] = "PU Prop   ";
24002b58:	4a73      	ldr	r2, [pc, #460]	; (24002d28 <main+0x70c>)
24002b5a:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
  specialModeMacroNames[4][2] = "Plck Prop ";
24002b5e:	4a73      	ldr	r2, [pc, #460]	; (24002d2c <main+0x710>)
24002b60:	f8c5 2148 	str.w	r2, [r5, #328]	; 0x148
  specialModeMacroNames[4][4] = "NoiseFilt ";
24002b64:	4a72      	ldr	r2, [pc, #456]	; (24002d30 <main+0x714>)
24002b66:	f8c5 2150 	str.w	r2, [r5, #336]	; 0x150
  specialModeMacroNames[4][5] = "NoiseGain ";
24002b6a:	4a72      	ldr	r2, [pc, #456]	; (24002d34 <main+0x718>)
24002b6c:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
  specialModeMacroNames[4][9] = "Damping   ";
24002b70:	4a71      	ldr	r2, [pc, #452]	; (24002d38 <main+0x71c>)
24002b72:	f8c5 2164 	str.w	r2, [r5, #356]	; 0x164
  specialModeMacroNames[4][10] = "PluckPos ";
24002b76:	4a71      	ldr	r2, [pc, #452]	; (24002d3c <main+0x720>)
24002b78:	f8c5 2168 	str.w	r2, [r5, #360]	; 0x168
  specialModeMacroNames[4][11] = "PU Pos   ";
24002b7c:	4a70      	ldr	r2, [pc, #448]	; (24002d40 <main+0x724>)
  specialModeMacroNames[3][7] = "          ";
24002b7e:	e9c5 3342 	strd	r3, r3, [r5, #264]	; 0x108
  specialModeMacroNames[3][13] = "          ";
24002b82:	e9c5 3348 	strd	r3, r3, [r5, #288]	; 0x120
  specialModeMacroNames[3][15] = "          ";
24002b86:	e9c5 334a 	strd	r3, r3, [r5, #296]	; 0x128
  specialModeMacroNames[3][17] = "          ";
24002b8a:	e9c5 334c 	strd	r3, r3, [r5, #304]	; 0x130
  specialModeMacroNames[3][19] = "          ";
24002b8e:	e9c5 334e 	strd	r3, r3, [r5, #312]	; 0x138
  specialModeMacroNames[4][7] = "          ";
24002b92:	e9c5 3356 	strd	r3, r3, [r5, #344]	; 0x158
  specialModeMacroNames[4][11] = "PU Pos   ";
24002b96:	f8c5 216c 	str.w	r2, [r5, #364]	; 0x16c
  specialModeMacroNames[4][14] = "          ";
24002b9a:	e9c5 335d 	strd	r3, r3, [r5, #372]	; 0x174
  specialModeMacroNames[4][16] = "          ";
24002b9e:	e9c5 335f 	strd	r3, r3, [r5, #380]	; 0x17c
  specialModeMacroNames[4][18] = "          ";
24002ba2:	e9c5 3361 	strd	r3, r3, [r5, #388]	; 0x184
  specialModeMacroNames[4][19] = "          ";
24002ba6:	f8c5 318c 	str.w	r3, [r5, #396]	; 0x18c
  for (int i = 0; i < 5; i++)
24002baa:	3d04      	subs	r5, #4
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24002bac:	f85c 2b04 	ldr.w	r2, [ip], #4
24002bb0:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
24002bb4:	4628      	mov	r0, r5
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24002bb6:	fb08 f907 	mul.w	r9, r8, r7
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24002bba:	f80e 1013 	strb.w	r1, [lr, r3, lsl #1]
24002bbe:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
24002bc2:	7851      	ldrb	r1, [r2, #1]
24002bc4:	7059      	strb	r1, [r3, #1]
24002bc6:	7891      	ldrb	r1, [r2, #2]
24002bc8:	7099      	strb	r1, [r3, #2]
24002bca:	78d1      	ldrb	r1, [r2, #3]
24002bcc:	70d9      	strb	r1, [r3, #3]
24002bce:	7911      	ldrb	r1, [r2, #4]
24002bd0:	7119      	strb	r1, [r3, #4]
24002bd2:	7951      	ldrb	r1, [r2, #5]
24002bd4:	7159      	strb	r1, [r3, #5]
24002bd6:	7991      	ldrb	r1, [r2, #6]
24002bd8:	7199      	strb	r1, [r3, #6]
24002bda:	79d1      	ldrb	r1, [r2, #7]
24002bdc:	71d9      	strb	r1, [r3, #7]
24002bde:	7a11      	ldrb	r1, [r2, #8]
24002be0:	7219      	strb	r1, [r3, #8]
24002be2:	7a51      	ldrb	r1, [r2, #9]
24002be4:	7259      	strb	r1, [r3, #9]
24002be6:	7a91      	ldrb	r1, [r2, #10]
24002be8:	7299      	strb	r1, [r3, #10]
24002bea:	7ad1      	ldrb	r1, [r2, #11]
24002bec:	72d9      	strb	r1, [r3, #11]
24002bee:	7b11      	ldrb	r1, [r2, #12]
24002bf0:	7319      	strb	r1, [r3, #12]
	  for (int k = 0; k < 20; k++)
24002bf2:	2100      	movs	r1, #0
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24002bf4:	7b52      	ldrb	r2, [r2, #13]
24002bf6:	735a      	strb	r2, [r3, #13]
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24002bf8:	f850 2f04 	ldr.w	r2, [r0, #4]!
24002bfc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
	  for (int k = 0; k < 20; k++)
24002c00:	3101      	adds	r1, #1
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24002c02:	f892 a000 	ldrb.w	sl, [r2]
24002c06:	eb09 0343 	add.w	r3, r9, r3, lsl #1
	  for (int k = 0; k < 20; k++)
24002c0a:	2914      	cmp	r1, #20
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
24002c0c:	f804 a003 	strb.w	sl, [r4, r3]
24002c10:	4423      	add	r3, r4
24002c12:	f892 a001 	ldrb.w	sl, [r2, #1]
24002c16:	f883 a001 	strb.w	sl, [r3, #1]
24002c1a:	f892 a002 	ldrb.w	sl, [r2, #2]
24002c1e:	f883 a002 	strb.w	sl, [r3, #2]
24002c22:	f892 a003 	ldrb.w	sl, [r2, #3]
24002c26:	f883 a003 	strb.w	sl, [r3, #3]
24002c2a:	f892 a004 	ldrb.w	sl, [r2, #4]
24002c2e:	f883 a004 	strb.w	sl, [r3, #4]
24002c32:	f892 a005 	ldrb.w	sl, [r2, #5]
24002c36:	f883 a005 	strb.w	sl, [r3, #5]
24002c3a:	f892 a006 	ldrb.w	sl, [r2, #6]
24002c3e:	f883 a006 	strb.w	sl, [r3, #6]
24002c42:	f892 a007 	ldrb.w	sl, [r2, #7]
24002c46:	f883 a007 	strb.w	sl, [r3, #7]
24002c4a:	f892 a008 	ldrb.w	sl, [r2, #8]
24002c4e:	f883 a008 	strb.w	sl, [r3, #8]
24002c52:	7a52      	ldrb	r2, [r2, #9]
24002c54:	725a      	strb	r2, [r3, #9]
	  for (int k = 0; k < 20; k++)
24002c56:	d1cf      	bne.n	24002bf8 <main+0x5dc>
  for (int i = 0; i < 5; i++)
24002c58:	2f3b      	cmp	r7, #59	; 0x3b
24002c5a:	f105 0550 	add.w	r5, r5, #80	; 0x50
24002c5e:	d004      	beq.n	24002c6a <main+0x64e>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
24002c60:	f8dc 3000 	ldr.w	r3, [ip]
24002c64:	3f01      	subs	r7, #1
24002c66:	7819      	ldrb	r1, [r3, #0]
24002c68:	e7a0      	b.n	24002bac <main+0x590>
  HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
24002c6a:	4a36      	ldr	r2, [pc, #216]	; (24002d44 <main+0x728>)
24002c6c:	2340      	movs	r3, #64	; 0x40
24002c6e:	4836      	ldr	r0, [pc, #216]	; (24002d48 <main+0x72c>)
24002c70:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
24002c74:	4c35      	ldr	r4, [pc, #212]	; (24002d4c <main+0x730>)
24002c76:	f008 fb15 	bl	2400b2a4 <HAL_SPI_TransmitReceive_DMA>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
24002c7a:	2340      	movs	r3, #64	; 0x40
24002c7c:	4a34      	ldr	r2, [pc, #208]	; (24002d50 <main+0x734>)
24002c7e:	4835      	ldr	r0, [pc, #212]	; (24002d54 <main+0x738>)
24002c80:	18d1      	adds	r1, r2, r3
	  if (rand > TWO_TO_31)
24002c82:	eddf 8a35 	vldr	s17, [pc, #212]	; 24002d58 <main+0x73c>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
24002c86:	f008 fb0d 	bl	2400b2a4 <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockB1, &hsai_BlockA1);
24002c8a:	4934      	ldr	r1, [pc, #208]	; (24002d5c <main+0x740>)
24002c8c:	4834      	ldr	r0, [pc, #208]	; (24002d60 <main+0x744>)
24002c8e:	f7fd ff6b 	bl	24000b68 <audioStart>
24002c92:	f004 0307 	and.w	r3, r4, #7
	  random_values[currentRandom++] = (float)rand * INV_TWO_TO_32 ;
24002c96:	ed9f 8a33 	vldr	s16, [pc, #204]	; 24002d64 <main+0x748>
24002c9a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
24002c9e:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 24002d94 <main+0x778>
24002ca2:	4f31      	ldr	r7, [pc, #196]	; (24002d68 <main+0x74c>)
24002ca4:	4d31      	ldr	r5, [pc, #196]	; (24002d6c <main+0x750>)
24002ca6:	9303      	str	r3, [sp, #12]
24002ca8:	e09a      	b.n	24002de0 <main+0x7c4>
24002caa:	bf00      	nop
24002cac:	2401c644 	.word	0x2401c644
24002cb0:	2401c72c 	.word	0x2401c72c
24002cb4:	2401c668 	.word	0x2401c668
24002cb8:	2401c674 	.word	0x2401c674
24002cbc:	2401c680 	.word	0x2401c680
24002cc0:	2401c68c 	.word	0x2401c68c
24002cc4:	2401c698 	.word	0x2401c698
24002cc8:	2401c6a4 	.word	0x2401c6a4
24002ccc:	2401c6b0 	.word	0x2401c6b0
24002cd0:	2401c6bc 	.word	0x2401c6bc
24002cd4:	2401c6c8 	.word	0x2401c6c8
24002cd8:	2401c6d4 	.word	0x2401c6d4
24002cdc:	2401c6e4 	.word	0x2401c6e4
24002ce0:	2401c6f0 	.word	0x2401c6f0
24002ce4:	2401c6fc 	.word	0x2401c6fc
24002ce8:	2401c708 	.word	0x2401c708
24002cec:	2401c714 	.word	0x2401c714
24002cf0:	2401c720 	.word	0x2401c720
24002cf4:	2401c738 	.word	0x2401c738
24002cf8:	2401c748 	.word	0x2401c748
24002cfc:	2401c754 	.word	0x2401c754
24002d00:	2401c760 	.word	0x2401c760
24002d04:	2401c76c 	.word	0x2401c76c
24002d08:	2401c778 	.word	0x2401c778
24002d0c:	2401c784 	.word	0x2401c784
24002d10:	30043380 	.word	0x30043380
24002d14:	2401c790 	.word	0x2401c790
24002d18:	2401c79c 	.word	0x2401c79c
24002d1c:	2401c7a8 	.word	0x2401c7a8
24002d20:	2401c7b4 	.word	0x2401c7b4
24002d24:	2401c7c0 	.word	0x2401c7c0
24002d28:	2401c7d0 	.word	0x2401c7d0
24002d2c:	2401c7dc 	.word	0x2401c7dc
24002d30:	2401c7e8 	.word	0x2401c7e8
24002d34:	2401c7f4 	.word	0x2401c7f4
24002d38:	2401c800 	.word	0x2401c800
24002d3c:	2401c80c 	.word	0x2401c80c
24002d40:	2401c818 	.word	0x2401c818
24002d44:	38000040 	.word	0x38000040
24002d48:	2001cfb0 	.word	0x2001cfb0
24002d4c:	30000000 	.word	0x30000000
24002d50:	30000800 	.word	0x30000800
24002d54:	2001cf10 	.word	0x2001cf10
24002d58:	4f000000 	.word	0x4f000000
24002d5c:	2001cb80 	.word	0x2001cb80
24002d60:	2001cc18 	.word	0x2001cc18
24002d64:	2f80000d 	.word	0x2f80000d
24002d68:	20014448 	.word	0x20014448
24002d6c:	20014454 	.word	0x20014454
24002d70:	2401c5c8 	.word	0x2401c5c8
24002d74:	2401c5e0 	.word	0x2401c5e0
24002d78:	2401c5f0 	.word	0x2401c5f0
24002d7c:	2401c608 	.word	0x2401c608
24002d80:	2401c62c 	.word	0x2401c62c
24002d84:	2401c638 	.word	0x2401c638
24002d88:	2401c650 	.word	0x2401c650
24002d8c:	2401c65c 	.word	0x2401c65c
24002d90:	30042000 	.word	0x30042000
24002d94:	20014204 	.word	0x20014204
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
24002d98:	f8ba 3000 	ldrh.w	r3, [sl]
24002d9c:	b29b      	uxth	r3, r3
24002d9e:	b90b      	cbnz	r3, 24002da4 <main+0x788>
24002da0:	f8ba 3002 	ldrh.w	r3, [sl, #2]
	  if (brainFirmwareUpdateRequested)
24002da4:	683b      	ldr	r3, [r7, #0]
24002da6:	2b00      	cmp	r3, #0
24002da8:	d133      	bne.n	24002e12 <main+0x7f6>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
24002daa:	4631      	mov	r1, r6
24002dac:	489f      	ldr	r0, [pc, #636]	; (2400302c <main+0xa10>)
24002dae:	f006 fd95 	bl	240098dc <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
24002db2:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
24002db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
24002dba:	eef4 7ae8 	vcmpe.f32	s15, s17
24002dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24002dc2:	dd03      	ble.n	24002dcc <main+0x7b0>
		  myTestInt++;
24002dc4:	4a9a      	ldr	r2, [pc, #616]	; (24003030 <main+0xa14>)
24002dc6:	6813      	ldr	r3, [r2, #0]
24002dc8:	3301      	adds	r3, #1
24002dca:	6013      	str	r3, [r2, #0]
	  random_values[currentRandom++] = (float)rand * INV_TWO_TO_32 ;
24002dcc:	782b      	ldrb	r3, [r5, #0]
24002dce:	ee67 7a88 	vmul.f32	s15, s15, s16
24002dd2:	1c5a      	adds	r2, r3, #1
24002dd4:	702a      	strb	r2, [r5, #0]
24002dd6:	4a97      	ldr	r2, [pc, #604]	; (24003034 <main+0xa18>)
24002dd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24002ddc:	edc3 7a00 	vstr	s15, [r3]
	  if (boardNumber == 0)
24002de0:	f89b 3000 	ldrb.w	r3, [fp]
24002de4:	b953      	cbnz	r3, 24002dfc <main+0x7e0>
		  if (presetWaitingToLoad > 0)
24002de6:	4b94      	ldr	r3, [pc, #592]	; (24003038 <main+0xa1c>)
24002de8:	6819      	ldr	r1, [r3, #0]
24002dea:	2900      	cmp	r1, #0
24002dec:	d043      	beq.n	24002e76 <main+0x85a>
			  if (!i2cSending)
24002dee:	4b93      	ldr	r3, [pc, #588]	; (2400303c <main+0xa20>)
24002df0:	781b      	ldrb	r3, [r3, #0]
24002df2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24002df6:	2b00      	cmp	r3, #0
24002df8:	f000 8142 	beq.w	24003080 <main+0xa64>
	  if (presetWaitingToParse > 0)
24002dfc:	4b90      	ldr	r3, [pc, #576]	; (24003040 <main+0xa24>)
24002dfe:	681b      	ldr	r3, [r3, #0]
24002e00:	2b00      	cmp	r3, #0
24002e02:	d0c9      	beq.n	24002d98 <main+0x77c>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
24002e04:	4b8e      	ldr	r3, [pc, #568]	; (24003040 <main+0xa24>)
24002e06:	6818      	ldr	r0, [r3, #0]
24002e08:	4b8e      	ldr	r3, [pc, #568]	; (24003044 <main+0xa28>)
24002e0a:	7819      	ldrb	r1, [r3, #0]
24002e0c:	f028 fc58 	bl	2402b6c0 <__parsePreset_veneer>
24002e10:	e7c2      	b.n	24002d98 <main+0x77c>
	if (boardNumber == 0)
24002e12:	f89b 2000 	ldrb.w	r2, [fp]
24002e16:	2a00      	cmp	r2, #0
24002e18:	d1c7      	bne.n	24002daa <main+0x78e>
  __IO uint8_t status = SD_PRESENT;
24002e1a:	2301      	movs	r3, #1
24002e1c:	f88d 301f 	strb.w	r3, [sp, #31]
  return status;
24002e20:	f89d 301f 	ldrb.w	r3, [sp, #31]
		if(BSP_SD_IsDetected())
24002e24:	b313      	cbz	r3, 24002e6c <main+0x850>
24002e26:	9b03      	ldr	r3, [sp, #12]
24002e28:	2b00      	cmp	r3, #0
24002e2a:	f040 819e 	bne.w	2400316a <main+0xb4e>
24002e2e:	4b86      	ldr	r3, [pc, #536]	; (24003048 <main+0xa2c>)
				audioOutBuffer[i] = 0;
24002e30:	2000      	movs	r0, #0
24002e32:	2100      	movs	r1, #0
24002e34:	e8e3 0102 	strd	r0, r1, [r3], #8
			for (uint_fast16_t i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24002e38:	429c      	cmp	r4, r3
24002e3a:	d1fb      	bne.n	24002e34 <main+0x818>
			loadFailed = 0;
24002e3c:	f04f 0800 	mov.w	r8, #0
24002e40:	4b82      	ldr	r3, [pc, #520]	; (2400304c <main+0xa30>)
			diskBusy = 1;
24002e42:	f04f 0901 	mov.w	r9, #1
			loadFailed = 0;
24002e46:	f883 8000 	strb.w	r8, [r3]
			disk_initialize(0);
24002e4a:	4640      	mov	r0, r8
			diskBusy = 1;
24002e4c:	4b80      	ldr	r3, [pc, #512]	; (24003050 <main+0xa34>)
24002e4e:	f883 9000 	strb.w	r9, [r3]
			disk_initialize(0);
24002e52:	f00a f99d 	bl	2400d190 <disk_initialize>
			disk_status(0);
24002e56:	4640      	mov	r0, r8
24002e58:	f00a f990 	bl	2400d17c <disk_status>
			if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
24002e5c:	464a      	mov	r2, r9
24002e5e:	497d      	ldr	r1, [pc, #500]	; (24003054 <main+0xa38>)
24002e60:	487d      	ldr	r0, [pc, #500]	; (24003058 <main+0xa3c>)
24002e62:	f00c fc05 	bl	2400f670 <f_mount>
24002e66:	2800      	cmp	r0, #0
24002e68:	f000 8145 	beq.w	240030f6 <main+0xada>
		brainFirmwareUpdateRequested = 0;
24002e6c:	2300      	movs	r3, #0
		diskBusy = 0;
24002e6e:	4a78      	ldr	r2, [pc, #480]	; (24003050 <main+0xa34>)
		brainFirmwareUpdateRequested = 0;
24002e70:	603b      	str	r3, [r7, #0]
		diskBusy = 0;
24002e72:	7013      	strb	r3, [r2, #0]
24002e74:	e799      	b.n	24002daa <main+0x78e>
		  else if (presetWaitingToWrite > 0)
24002e76:	4b79      	ldr	r3, [pc, #484]	; (2400305c <main+0xa40>)
24002e78:	681b      	ldr	r3, [r3, #0]
24002e7a:	2b00      	cmp	r3, #0
24002e7c:	d0be      	beq.n	24002dfc <main+0x7e0>
				  writePresetToSDCard(presetWaitingToWrite);
24002e7e:	4b77      	ldr	r3, [pc, #476]	; (2400305c <main+0xa40>)
24002e80:	681b      	ldr	r3, [r3, #0]
24002e82:	9305      	str	r3, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
24002e84:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
24002e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
24002e8a:	486f      	ldr	r0, [pc, #444]	; (24003048 <main+0xa2c>)
24002e8c:	9104      	str	r1, [sp, #16]
24002e8e:	f016 fd83 	bl	24019998 <memset>
  __IO uint8_t status = SD_PRESENT;
24002e92:	2301      	movs	r3, #1
24002e94:	f88d 301e 	strb.w	r3, [sp, #30]
  return status;
24002e98:	f89d 301e 	ldrb.w	r3, [sp, #30]
	if(BSP_SD_IsDetected())
24002e9c:	2b00      	cmp	r3, #0
24002e9e:	f000 80be 	beq.w	2400301e <main+0xa02>
24002ea2:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
24002ea6:	2b00      	cmp	r3, #0
24002ea8:	f040 81d6 	bne.w	24003258 <main+0xc3c>
24002eac:	4b66      	ldr	r3, [pc, #408]	; (24003048 <main+0xa2c>)
					audioOutBuffer[i] = 0;
24002eae:	2000      	movs	r0, #0
24002eb0:	2100      	movs	r1, #0
24002eb2:	e8e3 0102 	strd	r0, r1, [r3], #8
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24002eb6:	429c      	cmp	r4, r3
24002eb8:	d1fb      	bne.n	24002eb2 <main+0x896>
				diskBusy = 1;
24002eba:	2301      	movs	r3, #1
24002ebc:	4a64      	ldr	r2, [pc, #400]	; (24003050 <main+0xa34>)
24002ebe:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
24002ec0:	4a67      	ldr	r2, [pc, #412]	; (24003060 <main+0xa44>)
24002ec2:	7813      	ldrb	r3, [r2, #0]
24002ec4:	2b63      	cmp	r3, #99	; 0x63
24002ec6:	d901      	bls.n	24002ecc <main+0x8b0>
			        presetNumberToSave = 99;
24002ec8:	2363      	movs	r3, #99	; 0x63
24002eca:	7013      	strb	r3, [r2, #0]
				itoa(presetNumberToSave, charBufC, 10);
24002ecc:	4b64      	ldr	r3, [pc, #400]	; (24003060 <main+0xa44>)
24002ece:	220a      	movs	r2, #10
24002ed0:	a90a      	add	r1, sp, #40	; 0x28
24002ed2:	7818      	ldrb	r0, [r3, #0]
24002ed4:	f016 fd1c 	bl	24019910 <itoa>
				int len = ((strlen(charBufC)));
24002ed8:	a80a      	add	r0, sp, #40	; 0x28
24002eda:	f7fd f9fd 	bl	240002d8 <strlen>
				if (len == 1)
24002ede:	2801      	cmp	r0, #1
				int len = ((strlen(charBufC)));
24002ee0:	4602      	mov	r2, r0
				if (len == 1)
24002ee2:	f000 814f 	beq.w	24003184 <main+0xb68>
					strcat(charBufC, "*.ebp");
24002ee6:	495f      	ldr	r1, [pc, #380]	; (24003064 <main+0xa48>)
24002ee8:	ab0a      	add	r3, sp, #40	; 0x28
24002eea:	6808      	ldr	r0, [r1, #0]
24002eec:	8889      	ldrh	r1, [r1, #4]
24002eee:	5098      	str	r0, [r3, r2]
24002ef0:	4413      	add	r3, r2
					strcpy(finalStringC, charBufC);
24002ef2:	a80d      	add	r0, sp, #52	; 0x34
24002ef4:	3206      	adds	r2, #6
					strcat(charBufC, "*.ebp");
24002ef6:	8099      	strh	r1, [r3, #4]
					strcpy(finalStringC, charBufC);
24002ef8:	a90a      	add	r1, sp, #40	; 0x28
24002efa:	f016 fd7f 	bl	240199fc <memcpy>
					res = f_findfirst(&dir, &fno, SDPath, finalStringC);
24002efe:	f8df 9168 	ldr.w	r9, [pc, #360]	; 24003068 <main+0xa4c>
24002f02:	f8df 8178 	ldr.w	r8, [pc, #376]	; 2400307c <main+0xa60>
24002f06:	e004      	b.n	24002f12 <main+0x8f6>
					if((res == FR_OK) && (fno.fname[0]))
24002f08:	4b57      	ldr	r3, [pc, #348]	; (24003068 <main+0xa4c>)
24002f0a:	7d9b      	ldrb	r3, [r3, #22]
24002f0c:	b15b      	cbz	r3, 24002f26 <main+0x90a>
						f_unlink (fno.fname);
24002f0e:	f00d f911 	bl	24010134 <f_unlink>
					res = f_findfirst(&dir, &fno, SDPath, finalStringC);
24002f12:	ab0d      	add	r3, sp, #52	; 0x34
24002f14:	4a4f      	ldr	r2, [pc, #316]	; (24003054 <main+0xa38>)
24002f16:	4649      	mov	r1, r9
24002f18:	4640      	mov	r0, r8
24002f1a:	f00d f8c1 	bl	240100a0 <f_findfirst>
24002f1e:	4603      	mov	r3, r0
						f_unlink (fno.fname);
24002f20:	4852      	ldr	r0, [pc, #328]	; (2400306c <main+0xa50>)
					if((res == FR_OK) && (fno.fname[0]))
24002f22:	2b00      	cmp	r3, #0
24002f24:	d0f0      	beq.n	24002f08 <main+0x8ec>
				itoa(presetNumberToSave, charBuf, 10);
24002f26:	4b4e      	ldr	r3, [pc, #312]	; (24003060 <main+0xa44>)
24002f28:	220a      	movs	r2, #10
24002f2a:	a910      	add	r1, sp, #64	; 0x40
24002f2c:	7818      	ldrb	r0, [r3, #0]
24002f2e:	f016 fcef 	bl	24019910 <itoa>
				len = ((strlen(charBuf)));
24002f32:	a810      	add	r0, sp, #64	; 0x40
24002f34:	f7fd f9d0 	bl	240002d8 <strlen>
						finalString[i+3] = buffer[i+4];
24002f38:	4a4d      	ldr	r2, [pc, #308]	; (24003070 <main+0xa54>)
					finalString[17] = '.';
24002f3a:	4b4e      	ldr	r3, [pc, #312]	; (24003074 <main+0xa58>)
24002f3c:	f8cd 3069 	str.w	r3, [sp, #105]	; 0x69
						finalString[i+3] = buffer[i+4];
24002f40:	7913      	ldrb	r3, [r2, #4]
							finalString[i+3] = '_';
24002f42:	2b20      	cmp	r3, #32
24002f44:	bf08      	it	eq
24002f46:	235f      	moveq	r3, #95	; 0x5f
24002f48:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
						finalString[i+3] = buffer[i+4];
24002f4c:	7953      	ldrb	r3, [r2, #5]
							finalString[i+3] = '_';
24002f4e:	2b20      	cmp	r3, #32
24002f50:	bf08      	it	eq
24002f52:	235f      	moveq	r3, #95	; 0x5f
24002f54:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
						finalString[i+3] = buffer[i+4];
24002f58:	7993      	ldrb	r3, [r2, #6]
							finalString[i+3] = '_';
24002f5a:	2b20      	cmp	r3, #32
24002f5c:	bf08      	it	eq
24002f5e:	235f      	moveq	r3, #95	; 0x5f
24002f60:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
						finalString[i+3] = buffer[i+4];
24002f64:	79d3      	ldrb	r3, [r2, #7]
							finalString[i+3] = '_';
24002f66:	2b20      	cmp	r3, #32
24002f68:	bf08      	it	eq
24002f6a:	235f      	moveq	r3, #95	; 0x5f
24002f6c:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
						finalString[i+3] = buffer[i+4];
24002f70:	7a13      	ldrb	r3, [r2, #8]
							finalString[i+3] = '_';
24002f72:	2b20      	cmp	r3, #32
24002f74:	bf08      	it	eq
24002f76:	235f      	moveq	r3, #95	; 0x5f
24002f78:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
						finalString[i+3] = buffer[i+4];
24002f7c:	7a53      	ldrb	r3, [r2, #9]
							finalString[i+3] = '_';
24002f7e:	2b20      	cmp	r3, #32
24002f80:	bf08      	it	eq
24002f82:	235f      	moveq	r3, #95	; 0x5f
24002f84:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
						finalString[i+3] = buffer[i+4];
24002f88:	7a93      	ldrb	r3, [r2, #10]
							finalString[i+3] = '_';
24002f8a:	2b20      	cmp	r3, #32
24002f8c:	bf08      	it	eq
24002f8e:	235f      	moveq	r3, #95	; 0x5f
24002f90:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
						finalString[i+3] = buffer[i+4];
24002f94:	7ad3      	ldrb	r3, [r2, #11]
							finalString[i+3] = '_';
24002f96:	2b20      	cmp	r3, #32
24002f98:	bf08      	it	eq
24002f9a:	235f      	moveq	r3, #95	; 0x5f
24002f9c:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
						finalString[i+3] = buffer[i+4];
24002fa0:	7b13      	ldrb	r3, [r2, #12]
							finalString[i+3] = '_';
24002fa2:	2b20      	cmp	r3, #32
24002fa4:	bf08      	it	eq
24002fa6:	235f      	moveq	r3, #95	; 0x5f
24002fa8:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
						finalString[i+3] = buffer[i+4];
24002fac:	7b53      	ldrb	r3, [r2, #13]
							finalString[i+3] = '_';
24002fae:	2b20      	cmp	r3, #32
24002fb0:	bf08      	it	eq
24002fb2:	235f      	moveq	r3, #95	; 0x5f
24002fb4:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
						finalString[i+3] = buffer[i+4];
24002fb8:	7b93      	ldrb	r3, [r2, #14]
							finalString[i+3] = '_';
24002fba:	2b20      	cmp	r3, #32
24002fbc:	bf08      	it	eq
24002fbe:	235f      	moveq	r3, #95	; 0x5f
24002fc0:	f88d 3065 	strb.w	r3, [sp, #101]	; 0x65
						finalString[i+3] = buffer[i+4];
24002fc4:	7bd3      	ldrb	r3, [r2, #15]
							finalString[i+3] = '_';
24002fc6:	2b20      	cmp	r3, #32
24002fc8:	bf08      	it	eq
24002fca:	235f      	moveq	r3, #95	; 0x5f
24002fcc:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
						finalString[i+3] = buffer[i+4];
24002fd0:	7c13      	ldrb	r3, [r2, #16]
							finalString[i+3] = '_';
24002fd2:	2b20      	cmp	r3, #32
24002fd4:	bf08      	it	eq
24002fd6:	235f      	moveq	r3, #95	; 0x5f
24002fd8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
						finalString[i+3] = buffer[i+4];
24002fdc:	7c53      	ldrb	r3, [r2, #17]
							finalString[i+3] = '_';
24002fde:	2b20      	cmp	r3, #32
24002fe0:	bf08      	it	eq
24002fe2:	235f      	moveq	r3, #95	; 0x5f
				if (len == 1)
24002fe4:	2801      	cmp	r0, #1
24002fe6:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
					finalString[21] = 0;
24002fea:	f04f 0300 	mov.w	r3, #0
24002fee:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
					finalString[2] = '_';
24002ff2:	f04f 035f 	mov.w	r3, #95	; 0x5f
24002ff6:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
				if (len == 1)
24002ffa:	f000 80bd 	beq.w	24003178 <main+0xb5c>
					finalString[1] = charBuf[1];
24002ffe:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
24003002:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
					finalString[0] = charBuf[0];
24003006:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
2400300a:	220a      	movs	r2, #10
2400300c:	4631      	mov	r1, r6
2400300e:	481a      	ldr	r0, [pc, #104]	; (24003078 <main+0xa5c>)
					finalString[0] = '0';
24003010:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
24003014:	f00c fb78 	bl	2400f708 <f_open>
24003018:	2800      	cmp	r0, #0
2400301a:	f000 80ca 	beq.w	240031b2 <main+0xb96>
	presetWaitingToWrite = 0;
2400301e:	2300      	movs	r3, #0
24003020:	4a0e      	ldr	r2, [pc, #56]	; (2400305c <main+0xa40>)
24003022:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
24003024:	4a0a      	ldr	r2, [pc, #40]	; (24003050 <main+0xa34>)
24003026:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
24003028:	b662      	cpsie	i
}
2400302a:	e6e7      	b.n	24002dfc <main+0x7e0>
2400302c:	2001ca78 	.word	0x2001ca78
24003030:	2001930c 	.word	0x2001930c
24003034:	2001a4cc 	.word	0x2001a4cc
24003038:	2001a470 	.word	0x2001a470
2400303c:	20016612 	.word	0x20016612
24003040:	2001a474 	.word	0x2001a474
24003044:	2001a46e 	.word	0x2001a46e
24003048:	30000000 	.word	0x30000000
2400304c:	20018674 	.word	0x20018674
24003050:	20014490 	.word	0x20014490
24003054:	2001dec0 	.word	0x2001dec0
24003058:	2001da60 	.word	0x2001da60
2400305c:	2001a478 	.word	0x2001a478
24003060:	2001a46f 	.word	0x2001a46f
24003064:	2401c580 	.word	0x2401c580
24003068:	200164f8 	.word	0x200164f8
2400306c:	2001650e 	.word	0x2001650e
24003070:	30042380 	.word	0x30042380
24003074:	7062652e 	.word	0x7062652e
24003078:	2001dc94 	.word	0x2001dc94
2400307c:	20014458 	.word	0x20014458
				  checkForSDCardPreset(presetNumberToLoad);
24003080:	4b96      	ldr	r3, [pc, #600]	; (240032dc <main+0xcc0>)
24003082:	f893 8000 	ldrb.w	r8, [r3]
	prevVoice = numberToLoad;
24003086:	4b96      	ldr	r3, [pc, #600]	; (240032e0 <main+0xcc4>)
				  checkForSDCardPreset(presetNumberToLoad);
24003088:	fa5f f888 	uxtb.w	r8, r8
	prevVoice = numberToLoad;
2400308c:	f8c3 8000 	str.w	r8, [r3]
	voice = numberToLoad;
24003090:	4b94      	ldr	r3, [pc, #592]	; (240032e4 <main+0xcc8>)
24003092:	f8c3 8000 	str.w	r8, [r3]
  __IO uint8_t status = SD_PRESENT;
24003096:	2301      	movs	r3, #1
24003098:	f88d 301d 	strb.w	r3, [sp, #29]
  return status;
2400309c:	f89d 301d 	ldrb.w	r3, [sp, #29]
	if(BSP_SD_IsDetected())
240030a0:	b313      	cbz	r3, 240030e8 <main+0xacc>
240030a2:	9b03      	ldr	r3, [sp, #12]
240030a4:	2b00      	cmp	r3, #0
240030a6:	f040 80de 	bne.w	24003266 <main+0xc4a>
240030aa:	4b8f      	ldr	r3, [pc, #572]	; (240032e8 <main+0xccc>)
			audioOutBuffer[i] = 0;
240030ac:	2000      	movs	r0, #0
240030ae:	2100      	movs	r1, #0
240030b0:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
240030b4:	429c      	cmp	r4, r3
240030b6:	d1fb      	bne.n	240030b0 <main+0xa94>
		loadFailed = 0;
240030b8:	f04f 0900 	mov.w	r9, #0
240030bc:	4b8b      	ldr	r3, [pc, #556]	; (240032ec <main+0xcd0>)
		diskBusy = 1;
240030be:	2201      	movs	r2, #1
		loadFailed = 0;
240030c0:	f883 9000 	strb.w	r9, [r3]
		disk_initialize(0);
240030c4:	4648      	mov	r0, r9
		presetWaitingToLoad = 0;
240030c6:	4b8a      	ldr	r3, [pc, #552]	; (240032f0 <main+0xcd4>)
240030c8:	f8c3 9000 	str.w	r9, [r3]
		diskBusy = 1;
240030cc:	4b89      	ldr	r3, [pc, #548]	; (240032f4 <main+0xcd8>)
240030ce:	701a      	strb	r2, [r3, #0]
		disk_initialize(0);
240030d0:	f00a f85e 	bl	2400d190 <disk_initialize>
	    disk_status(0);
240030d4:	4648      	mov	r0, r9
240030d6:	f00a f851 	bl	2400d17c <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
240030da:	2201      	movs	r2, #1
240030dc:	4986      	ldr	r1, [pc, #536]	; (240032f8 <main+0xcdc>)
240030de:	4887      	ldr	r0, [pc, #540]	; (240032fc <main+0xce0>)
240030e0:	f00c fac6 	bl	2400f670 <f_mount>
240030e4:	2800      	cmp	r0, #0
240030e6:	d06e      	beq.n	240031c6 <main+0xbaa>
		loadFailed = 1;
240030e8:	2301      	movs	r3, #1
240030ea:	4a80      	ldr	r2, [pc, #512]	; (240032ec <main+0xcd0>)
240030ec:	7013      	strb	r3, [r2, #0]
	diskBusy = 0;
240030ee:	2300      	movs	r3, #0
240030f0:	4a80      	ldr	r2, [pc, #512]	; (240032f4 <main+0xcd8>)
240030f2:	7013      	strb	r3, [r2, #0]
	return found;
240030f4:	e682      	b.n	24002dfc <main+0x7e0>
				char finalString[10] = "brain.bin";
240030f6:	4a82      	ldr	r2, [pc, #520]	; (24003300 <main+0xce4>)
240030f8:	46b4      	mov	ip, r6
				res = f_findfirst(&dir, &fno, SDPath, finalString);
240030fa:	4633      	mov	r3, r6
				char finalString[10] = "brain.bin";
240030fc:	ca07      	ldmia	r2, {r0, r1, r2}
240030fe:	e8ac 0003 	stmia.w	ip!, {r0, r1}
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24003102:	4980      	ldr	r1, [pc, #512]	; (24003304 <main+0xce8>)
				char finalString[10] = "brain.bin";
24003104:	f8ac 2000 	strh.w	r2, [ip]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
24003108:	487f      	ldr	r0, [pc, #508]	; (24003308 <main+0xcec>)
2400310a:	4a7b      	ldr	r2, [pc, #492]	; (240032f8 <main+0xcdc>)
2400310c:	f00c ffc8 	bl	240100a0 <f_findfirst>
				if(res == FR_OK)
24003110:	2800      	cmp	r0, #0
24003112:	f47f aeab 	bne.w	24002e6c <main+0x850>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24003116:	2211      	movs	r2, #17
24003118:	497c      	ldr	r1, [pc, #496]	; (2400330c <main+0xcf0>)
2400311a:	487d      	ldr	r0, [pc, #500]	; (24003310 <main+0xcf4>)
2400311c:	f00c faf4 	bl	2400f708 <f_open>
24003120:	2800      	cmp	r0, #0
24003122:	f47f aea3 	bne.w	24002e6c <main+0x850>
						brainFirmwareSize = f_size(&SDFile);
24003126:	4b7a      	ldr	r3, [pc, #488]	; (24003310 <main+0xcf4>)
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003128:	497a      	ldr	r1, [pc, #488]	; (24003314 <main+0xcf8>)
						brainFirmwareSize = f_size(&SDFile);
2400312a:	68da      	ldr	r2, [r3, #12]
2400312c:	4b7a      	ldr	r3, [pc, #488]	; (24003318 <main+0xcfc>)
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
2400312e:	4878      	ldr	r0, [pc, #480]	; (24003310 <main+0xcf4>)
						brainFirmwareSize = f_size(&SDFile);
24003130:	601a      	str	r2, [r3, #0]
						f_read(&SDFile, &brainFirmwareBuffer, brainFirmwareSize, &bytesRead);
24003132:	ab10      	add	r3, sp, #64	; 0x40
24003134:	f00c fc4a 	bl	2400f9cc <f_read>
						f_close(&SDFile);
24003138:	4875      	ldr	r0, [pc, #468]	; (24003310 <main+0xcf4>)
2400313a:	f00c feb1 	bl	2400fea0 <f_close>
						for (uint_fast16_t i = 0; i< 700; i++)
2400313e:	4b77      	ldr	r3, [pc, #476]	; (2400331c <main+0xd00>)
24003140:	eb03 0209 	add.w	r2, r3, r9
24003144:	eba9 0002 	sub.w	r0, r9, r2
24003148:	4684      	mov	ip, r0
2400314a:	eb0c 0203 	add.w	r2, ip, r3
							memoryTest[i] = brainFirmwareBuffer[i];
2400314e:	4874      	ldr	r0, [pc, #464]	; (24003320 <main+0xd04>)
24003150:	f813 1f01 	ldrb.w	r1, [r3, #1]!
24003154:	5481      	strb	r1, [r0, r2]
						for (uint_fast16_t i = 0; i< 700; i++)
24003156:	4a73      	ldr	r2, [pc, #460]	; (24003324 <main+0xd08>)
24003158:	429a      	cmp	r2, r3
2400315a:	d1f6      	bne.n	2400314a <main+0xb2e>
						foundBrainFirmware = 1;
2400315c:	2301      	movs	r3, #1
2400315e:	4a72      	ldr	r2, [pc, #456]	; (24003328 <main+0xd0c>)
24003160:	7013      	strb	r3, [r2, #0]
						brainFirmwareBufferIndex = 0;
24003162:	2300      	movs	r3, #0
24003164:	4a71      	ldr	r2, [pc, #452]	; (2400332c <main+0xd10>)
24003166:	6013      	str	r3, [r2, #0]
24003168:	e680      	b.n	24002e6c <main+0x850>
2400316a:	4b5f      	ldr	r3, [pc, #380]	; (240032e8 <main+0xccc>)
				audioOutBuffer[i + 1] = 0;
2400316c:	e9c3 2200 	strd	r2, r2, [r3]
			for (uint_fast16_t i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
24003170:	3308      	adds	r3, #8
24003172:	429c      	cmp	r4, r3
24003174:	d1fa      	bne.n	2400316c <main+0xb50>
24003176:	e661      	b.n	24002e3c <main+0x820>
					finalString[1] = charBuf[0];
24003178:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
2400317c:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
					finalString[0] = '0';
24003180:	2330      	movs	r3, #48	; 0x30
24003182:	e742      	b.n	2400300a <main+0x9ee>
					finalStringC[2] = charBufC[1];
24003184:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
					strcat(finalStringC, "*.ebp");
24003188:	a80d      	add	r0, sp, #52	; 0x34
					finalStringC[2] = charBufC[1];
2400318a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
					finalStringC[1] = charBufC[0];
2400318e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
24003192:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
					finalStringC[0] = '0';
24003196:	2330      	movs	r3, #48	; 0x30
24003198:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
					strcat(finalStringC, "*.ebp");
2400319c:	f7fd f89c 	bl	240002d8 <strlen>
240031a0:	4a63      	ldr	r2, [pc, #396]	; (24003330 <main+0xd14>)
240031a2:	4603      	mov	r3, r0
240031a4:	a90d      	add	r1, sp, #52	; 0x34
240031a6:	6810      	ldr	r0, [r2, #0]
240031a8:	8892      	ldrh	r2, [r2, #4]
240031aa:	50c8      	str	r0, [r1, r3]
240031ac:	440b      	add	r3, r1
240031ae:	809a      	strh	r2, [r3, #4]
240031b0:	e6a5      	b.n	24002efe <main+0x8e2>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
240031b2:	9a05      	ldr	r2, [sp, #20]
240031b4:	ab09      	add	r3, sp, #36	; 0x24
240031b6:	495f      	ldr	r1, [pc, #380]	; (24003334 <main+0xd18>)
240031b8:	4855      	ldr	r0, [pc, #340]	; (24003310 <main+0xcf4>)
240031ba:	f00c fd2d 	bl	2400fc18 <f_write>
					f_close(&SDFile);
240031be:	4854      	ldr	r0, [pc, #336]	; (24003310 <main+0xcf4>)
240031c0:	f00c fe6e 	bl	2400fea0 <f_close>
240031c4:	e72b      	b.n	2400301e <main+0xa02>
			itoa(numberToLoad, charBuf, 10);
240031c6:	220a      	movs	r2, #10
240031c8:	a910      	add	r1, sp, #64	; 0x40
240031ca:	4640      	mov	r0, r8
240031cc:	f016 fba0 	bl	24019910 <itoa>
			int len = ((strlen(charBuf)));
240031d0:	a810      	add	r0, sp, #64	; 0x40
240031d2:	f7fd f881 	bl	240002d8 <strlen>
			if (len == 1)
240031d6:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
240031d8:	4602      	mov	r2, r0
			if (len == 1)
240031da:	d04b      	beq.n	24003274 <main+0xc58>
				strcat(charBuf, "*.ebp");
240031dc:	4954      	ldr	r1, [pc, #336]	; (24003330 <main+0xd14>)
240031de:	ab10      	add	r3, sp, #64	; 0x40
240031e0:	6808      	ldr	r0, [r1, #0]
240031e2:	8889      	ldrh	r1, [r1, #4]
240031e4:	5098      	str	r0, [r3, r2]
240031e6:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
240031e8:	4630      	mov	r0, r6
240031ea:	3206      	adds	r2, #6
				strcat(charBuf, "*.ebp");
240031ec:	8099      	strh	r1, [r3, #4]
				strcpy(finalString, charBuf);
240031ee:	a910      	add	r1, sp, #64	; 0x40
240031f0:	f016 fc04 	bl	240199fc <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
240031f4:	4633      	mov	r3, r6
240031f6:	4a40      	ldr	r2, [pc, #256]	; (240032f8 <main+0xcdc>)
240031f8:	4942      	ldr	r1, [pc, #264]	; (24003304 <main+0xce8>)
240031fa:	4843      	ldr	r0, [pc, #268]	; (24003308 <main+0xcec>)
240031fc:	f00c ff50 	bl	240100a0 <f_findfirst>
			if(res == FR_OK)
24003200:	2800      	cmp	r0, #0
24003202:	f47f af71 	bne.w	240030e8 <main+0xacc>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
24003206:	2211      	movs	r2, #17
24003208:	4940      	ldr	r1, [pc, #256]	; (2400330c <main+0xcf0>)
2400320a:	4841      	ldr	r0, [pc, #260]	; (24003310 <main+0xcf4>)
2400320c:	f00c fa7c 	bl	2400f708 <f_open>
24003210:	4680      	mov	r8, r0
24003212:	2800      	cmp	r0, #0
24003214:	f47f af68 	bne.w	240030e8 <main+0xacc>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
24003218:	4a3d      	ldr	r2, [pc, #244]	; (24003310 <main+0xcf4>)
2400321a:	ab0d      	add	r3, sp, #52	; 0x34
2400321c:	4945      	ldr	r1, [pc, #276]	; (24003334 <main+0xd18>)
2400321e:	68d2      	ldr	r2, [r2, #12]
24003220:	483b      	ldr	r0, [pc, #236]	; (24003310 <main+0xcf4>)
24003222:	f00c fbd3 	bl	2400f9cc <f_read>
					presetWaitingToParse = bytesRead;
24003226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
24003228:	4a43      	ldr	r2, [pc, #268]	; (24003338 <main+0xd1c>)
					f_close(&SDFile);
2400322a:	4839      	ldr	r0, [pc, #228]	; (24003310 <main+0xcf4>)
					presetWaitingToParse = bytesRead;
2400322c:	6013      	str	r3, [r2, #0]
					f_close(&SDFile);
2400322e:	f00c fe37 	bl	2400fea0 <f_close>
	  	i2cSending = 1;
24003232:	2301      	movs	r3, #1
24003234:	4a41      	ldr	r2, [pc, #260]	; (2400333c <main+0xd20>)
24003236:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
24003238:	b672      	cpsid	i
	  	HAL_I2C_Master_Transmit(&hi2c1, 34<<1, buffer, 4096, 10000);
2400323a:	f242 7310 	movw	r3, #10000	; 0x2710
2400323e:	4a3d      	ldr	r2, [pc, #244]	; (24003334 <main+0xd18>)
24003240:	2144      	movs	r1, #68	; 0x44
24003242:	483f      	ldr	r0, [pc, #252]	; (24003340 <main+0xd24>)
24003244:	9300      	str	r3, [sp, #0]
24003246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2400324a:	f003 fc63 	bl	24006b14 <HAL_I2C_Master_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
2400324e:	b662      	cpsie	i
	  	i2cSending = 0;
24003250:	4a3a      	ldr	r2, [pc, #232]	; (2400333c <main+0xd20>)
24003252:	f882 8000 	strb.w	r8, [r2]
24003256:	e74a      	b.n	240030ee <main+0xad2>
24003258:	4b23      	ldr	r3, [pc, #140]	; (240032e8 <main+0xccc>)
					audioOutBuffer[i + 1] = 0;
2400325a:	e9c3 1100 	strd	r1, r1, [r3]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
2400325e:	3308      	adds	r3, #8
24003260:	42a3      	cmp	r3, r4
24003262:	d1fa      	bne.n	2400325a <main+0xc3e>
24003264:	e629      	b.n	24002eba <main+0x89e>
24003266:	4b20      	ldr	r3, [pc, #128]	; (240032e8 <main+0xccc>)
			audioOutBuffer[i + 1] = 0;
24003268:	e9c3 2200 	strd	r2, r2, [r3]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
2400326c:	3308      	adds	r3, #8
2400326e:	429c      	cmp	r4, r3
24003270:	d1fa      	bne.n	24003268 <main+0xc4c>
24003272:	e721      	b.n	240030b8 <main+0xa9c>
				finalString[2] = charBuf[1];
24003274:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
				strcat(finalString, "*.ebp");
24003278:	4630      	mov	r0, r6
				finalString[2] = charBuf[1];
2400327a:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
				finalString[1] = charBuf[0];
2400327e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
24003282:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
				finalString[0] = '0';
24003286:	2330      	movs	r3, #48	; 0x30
24003288:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
				strcat(finalString, "*.ebp");
2400328c:	f7fd f824 	bl	240002d8 <strlen>
24003290:	4a27      	ldr	r2, [pc, #156]	; (24003330 <main+0xd14>)
24003292:	4603      	mov	r3, r0
24003294:	6810      	ldr	r0, [r2, #0]
24003296:	8892      	ldrh	r2, [r2, #4]
24003298:	50f0      	str	r0, [r6, r3]
2400329a:	4433      	add	r3, r6
2400329c:	809a      	strh	r2, [r3, #4]
2400329e:	e7a9      	b.n	240031f4 <main+0xbd8>
	  getPresetNamesFromSDCard();
240032a0:	f7fe f9fe 	bl	240016a0 <getPresetNamesFromSDCard>
	  diskBusy = 1;
240032a4:	f7ff bb42 	b.w	2400292c <main+0x310>
    	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
240032a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
240032ac:	4921      	ldr	r1, [pc, #132]	; (24003334 <main+0xd18>)
240032ae:	4824      	ldr	r0, [pc, #144]	; (24003340 <main+0xd24>)
240032b0:	f003 fdfc 	bl	24006eac <HAL_I2C_Slave_Receive_IT>
240032b4:	f7ff bab2 	b.w	2400281c <main+0x200>
	  	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
240032b8:	9517      	str	r5, [sp, #92]	; 0x5c
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
240032ba:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240032be:	4631      	mov	r1, r6
240032c0:	4820      	ldr	r0, [pc, #128]	; (24003344 <main+0xd28>)
		GPIO_InitTypeDef GPIO_InitStruct = {0};
240032c2:	941a      	str	r4, [sp, #104]	; 0x68
	  	  GPIO_InitStruct.Pin = GPIO_PIN_12;
240032c4:	9516      	str	r5, [sp, #88]	; 0x58
		GPIO_InitTypeDef GPIO_InitStruct = {0};
240032c6:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
	  	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240032ca:	f003 f9a5 	bl	24006618 <HAL_GPIO_Init>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
240032ce:	4622      	mov	r2, r4
240032d0:	4629      	mov	r1, r5
240032d2:	481c      	ldr	r0, [pc, #112]	; (24003344 <main+0xd28>)
240032d4:	f003 faf0 	bl	240068b8 <HAL_GPIO_WritePin>
240032d8:	f7ff ba97 	b.w	2400280a <main+0x1ee>
240032dc:	2001a46e 	.word	0x2001a46e
240032e0:	2000069c 	.word	0x2000069c
240032e4:	20014250 	.word	0x20014250
240032e8:	30000000 	.word	0x30000000
240032ec:	20018674 	.word	0x20018674
240032f0:	2001a470 	.word	0x2001a470
240032f4:	20014490 	.word	0x20014490
240032f8:	2001dec0 	.word	0x2001dec0
240032fc:	2001da60 	.word	0x2001da60
24003300:	2401c824 	.word	0x2401c824
24003304:	200164f8 	.word	0x200164f8
24003308:	20014458 	.word	0x20014458
2400330c:	2001650e 	.word	0x2001650e
24003310:	2001dc94 	.word	0x2001dc94
24003314:	c1e00000 	.word	0xc1e00000
24003318:	20014444 	.word	0x20014444
2400331c:	c1dfffff 	.word	0xc1dfffff
24003320:	20019048 	.word	0x20019048
24003324:	c1e002bb 	.word	0xc1e002bb
24003328:	20016610 	.word	0x20016610
2400332c:	20014438 	.word	0x20014438
24003330:	2401c580 	.word	0x2401c580
24003334:	30042380 	.word	0x30042380
24003338:	2001a474 	.word	0x2001a474
2400333c:	20016612 	.word	0x20016612
24003340:	2001438c 	.word	0x2001438c
24003344:	58020400 	.word	0x58020400

24003348 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == GPIO_PIN_6) {
24003348:	2840      	cmp	r0, #64	; 0x40
2400334a:	d000      	beq.n	2400334e <HAL_GPIO_EXTI_Callback+0x6>
}
2400334c:	4770      	bx	lr
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == 0)
2400334e:	4601      	mov	r1, r0
24003350:	4801      	ldr	r0, [pc, #4]	; (24003358 <HAL_GPIO_EXTI_Callback+0x10>)
24003352:	f003 baab 	b.w	240068ac <HAL_GPIO_ReadPin>
24003356:	bf00      	nop
24003358:	58020400 	.word	0x58020400

2400335c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
2400335c:	4770      	bx	lr
2400335e:	bf00      	nop

24003360 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
24003360:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
24003362:	4806      	ldr	r0, [pc, #24]	; (2400337c <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
24003364:	2300      	movs	r3, #0
24003366:	4a06      	ldr	r2, [pc, #24]	; (24003380 <MX_RNG_Init+0x20>)
24003368:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
2400336c:	f006 fa74 	bl	24009858 <HAL_RNG_Init>
24003370:	b900      	cbnz	r0, 24003374 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
24003372:	bd08      	pop	{r3, pc}
24003374:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24003378:	f7ff bff0 	b.w	2400335c <Error_Handler>
2400337c:	2001ca78 	.word	0x2001ca78
24003380:	48021800 	.word	0x48021800

24003384 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
24003384:	b510      	push	{r4, lr}
24003386:	b0b2      	sub	sp, #200	; 0xc8
24003388:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400338a:	22c0      	movs	r2, #192	; 0xc0
2400338c:	2100      	movs	r1, #0
2400338e:	a802      	add	r0, sp, #8
24003390:	f016 fb02 	bl	24019998 <memset>
  if(rngHandle->Instance==RNG)
24003394:	4b10      	ldr	r3, [pc, #64]	; (240033d8 <HAL_RNG_MspInit+0x54>)
24003396:	6822      	ldr	r2, [r4, #0]
24003398:	429a      	cmp	r2, r3
2400339a:	d001      	beq.n	240033a0 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
2400339c:	b032      	add	sp, #200	; 0xc8
2400339e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
240033a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
240033a4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240033a6:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
240033a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240033ac:	f005 f860 	bl	24008470 <HAL_RCCEx_PeriphCLKConfig>
240033b0:	b970      	cbnz	r0, 240033d0 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
240033b2:	4b0a      	ldr	r3, [pc, #40]	; (240033dc <HAL_RNG_MspInit+0x58>)
240033b4:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
240033b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
240033bc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
240033c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
240033c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
240033c8:	9301      	str	r3, [sp, #4]
240033ca:	9b01      	ldr	r3, [sp, #4]
}
240033cc:	b032      	add	sp, #200	; 0xc8
240033ce:	bd10      	pop	{r4, pc}
      Error_Handler();
240033d0:	f7ff ffc4 	bl	2400335c <Error_Handler>
240033d4:	e7ed      	b.n	240033b2 <HAL_RNG_MspInit+0x2e>
240033d6:	bf00      	nop
240033d8:	48021800 	.word	0x48021800
240033dc:	58024400 	.word	0x58024400

240033e0 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
240033e0:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
240033e2:	4817      	ldr	r0, [pc, #92]	; (24003440 <MX_SAI1_Init+0x60>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
240033e4:	2200      	movs	r2, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
240033e6:	4c17      	ldr	r4, [pc, #92]	; (24003444 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
240033e8:	2101      	movs	r1, #1
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
240033ea:	2302      	movs	r3, #2
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
240033ec:	61c2      	str	r2, [r0, #28]
  hsai_BlockA1.Instance = SAI1_Block_A;
240033ee:	6004      	str	r4, [r0, #0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
240033f0:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
240033f4:	60c2      	str	r2, [r0, #12]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
240033f6:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
240033f8:	e9c0 1201 	strd	r1, r2, [r0, #4]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
240033fc:	e9c0 2205 	strd	r2, r2, [r0, #20]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
24003400:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003404:	461a      	mov	r2, r3
24003406:	f006 fc77 	bl	24009cf8 <HAL_SAI_InitProtocol>
2400340a:	b990      	cbnz	r0, 24003432 <MX_SAI1_Init+0x52>
  {
    Error_Handler();
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
2400340c:	480e      	ldr	r0, [pc, #56]	; (24003448 <MX_SAI1_Init+0x68>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
2400340e:	2200      	movs	r2, #0
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_TX;
24003410:	2302      	movs	r3, #2
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24003412:	2101      	movs	r1, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
24003414:	4c0d      	ldr	r4, [pc, #52]	; (2400344c <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
24003416:	6142      	str	r2, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
24003418:	61c2      	str	r2, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
2400341a:	60c2      	str	r2, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
2400341c:	6342      	str	r2, [r0, #52]	; 0x34
  hsai_BlockB1.Instance = SAI1_Block_B;
2400341e:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
24003420:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
24003424:	461a      	mov	r2, r3
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
24003426:	e9c0 3101 	strd	r3, r1, [r0, #4]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
2400342a:	f006 fc65 	bl	24009cf8 <HAL_SAI_InitProtocol>
2400342e:	b918      	cbnz	r0, 24003438 <MX_SAI1_Init+0x58>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
24003430:	bd10      	pop	{r4, pc}
    Error_Handler();
24003432:	f7ff ff93 	bl	2400335c <Error_Handler>
24003436:	e7e9      	b.n	2400340c <MX_SAI1_Init+0x2c>
}
24003438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
2400343c:	f7ff bf8e 	b.w	2400335c <Error_Handler>
24003440:	2001cb80 	.word	0x2001cb80
24003444:	40015804 	.word	0x40015804
24003448:	2001cc18 	.word	0x2001cc18
2400344c:	40015824 	.word	0x40015824

24003450 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
24003450:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
24003452:	4a5b      	ldr	r2, [pc, #364]	; (240035c0 <HAL_SAI_MspInit+0x170>)
{
24003454:	b08c      	sub	sp, #48	; 0x30
    if(saiHandle->Instance==SAI1_Block_A)
24003456:	6803      	ldr	r3, [r0, #0]
{
24003458:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
2400345a:	4293      	cmp	r3, r2
2400345c:	d004      	beq.n	24003468 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
2400345e:	4a59      	ldr	r2, [pc, #356]	; (240035c4 <HAL_SAI_MspInit+0x174>)
24003460:	4293      	cmp	r3, r2
24003462:	d04d      	beq.n	24003500 <HAL_SAI_MspInit+0xb0>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
24003464:	b00c      	add	sp, #48	; 0x30
24003466:	bd70      	pop	{r4, r5, r6, pc}
    if (SAI1_client == 0)
24003468:	4b57      	ldr	r3, [pc, #348]	; (240035c8 <HAL_SAI_MspInit+0x178>)
2400346a:	681a      	ldr	r2, [r3, #0]
2400346c:	2a00      	cmp	r2, #0
2400346e:	f000 808f 	beq.w	24003590 <HAL_SAI_MspInit+0x140>
    SAI1_client ++;
24003472:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003474:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24003476:	2102      	movs	r1, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
24003478:	2074      	movs	r0, #116	; 0x74
    SAI1_client ++;
2400347a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
2400347c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
2400347e:	9007      	str	r0, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003480:	910a      	str	r1, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003482:	4852      	ldr	r0, [pc, #328]	; (240035cc <HAL_SAI_MspInit+0x17c>)
    hdma_sai1_a.Instance = DMA1_Stream1;
24003484:	4d52      	ldr	r5, [pc, #328]	; (240035d0 <HAL_SAI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003486:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24003488:	e9cd 1608 	strd	r1, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
2400348c:	a907      	add	r1, sp, #28
2400348e:	f003 f8c3 	bl	24006618 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
24003492:	4a50      	ldr	r2, [pc, #320]	; (240035d4 <HAL_SAI_MspInit+0x184>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
24003494:	2357      	movs	r3, #87	; 0x57
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
24003496:	4628      	mov	r0, r5
    hdma_sai1_a.Instance = DMA1_Stream1;
24003498:	602a      	str	r2, [r5, #0]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
2400349a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
2400349e:	606b      	str	r3, [r5, #4]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
240034a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
240034a4:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
240034a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
240034aa:	616b      	str	r3, [r5, #20]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
240034ac:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
240034b0:	60ae      	str	r6, [r5, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
240034b2:	60ee      	str	r6, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
240034b4:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
240034b6:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
240034b8:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
240034ba:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
240034be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
240034c2:	2304      	movs	r3, #4
240034c4:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
240034c8:	f001 fb90 	bl	24004bec <HAL_DMA_Init>
240034cc:	2800      	cmp	r0, #0
240034ce:	d173      	bne.n	240035b8 <HAL_SAI_MspInit+0x168>
    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
240034d0:	2106      	movs	r1, #6
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
240034d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    pSyncConfig.SyncEnable = DISABLE;
240034d6:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
240034da:	483d      	ldr	r0, [pc, #244]	; (240035d0 <HAL_SAI_MspInit+0x180>)
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_RISING;
240034dc:	e9cd 1303 	strd	r1, r3, [sp, #12]
    pSyncConfig.RequestNumber = 1;
240034e0:	2301      	movs	r3, #1
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
240034e2:	a903      	add	r1, sp, #12
    pSyncConfig.SyncEnable = DISABLE;
240034e4:	f8ad 2014 	strh.w	r2, [sp, #20]
    pSyncConfig.RequestNumber = 1;
240034e8:	9306      	str	r3, [sp, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai1_a, &pSyncConfig) != HAL_OK)
240034ea:	f003 f82b 	bl	24006544 <HAL_DMAEx_ConfigMuxSync>
240034ee:	2800      	cmp	r0, #0
240034f0:	d15f      	bne.n	240035b2 <HAL_SAI_MspInit+0x162>
    if(saiHandle->Instance==SAI1_Block_B)
240034f2:	4a34      	ldr	r2, [pc, #208]	; (240035c4 <HAL_SAI_MspInit+0x174>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
240034f4:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
240034f6:	6823      	ldr	r3, [r4, #0]
240034f8:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
240034fa:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
240034fe:	d1b1      	bne.n	24003464 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
24003500:	4b31      	ldr	r3, [pc, #196]	; (240035c8 <HAL_SAI_MspInit+0x178>)
24003502:	681a      	ldr	r2, [r3, #0]
24003504:	2a00      	cmp	r2, #0
24003506:	d035      	beq.n	24003574 <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
24003508:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2400350a:	2600      	movs	r6, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2400350c:	2102      	movs	r1, #2
    GPIO_InitStruct.Pin = GPIO_PIN_3;
2400350e:	2008      	movs	r0, #8
    SAI1_client ++;
24003510:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
24003512:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
24003514:	9007      	str	r0, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003516:	910a      	str	r1, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003518:	482c      	ldr	r0, [pc, #176]	; (240035cc <HAL_SAI_MspInit+0x17c>)
    hdma_sai1_b.Instance = DMA1_Stream2;
2400351a:	4d2f      	ldr	r5, [pc, #188]	; (240035d8 <HAL_SAI_MspInit+0x188>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
2400351c:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2400351e:	e9cd 1608 	strd	r1, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24003522:	a907      	add	r1, sp, #28
24003524:	f003 f878 	bl	24006618 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
24003528:	4a2c      	ldr	r2, [pc, #176]	; (240035dc <HAL_SAI_MspInit+0x18c>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
2400352a:	2358      	movs	r3, #88	; 0x58
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
2400352c:	4628      	mov	r0, r5
    hdma_sai1_b.Instance = DMA1_Stream2;
2400352e:	602a      	str	r2, [r5, #0]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24003530:	2240      	movs	r2, #64	; 0x40
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
24003532:	606b      	str	r3, [r5, #4]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
24003534:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
24003538:	60aa      	str	r2, [r5, #8]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
2400353a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
2400353e:	612b      	str	r3, [r5, #16]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
24003540:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
24003544:	60ee      	str	r6, [r5, #12]
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
24003546:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
24003548:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
2400354a:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
2400354c:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24003550:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24003554:	f44f 7280 	mov.w	r2, #256	; 0x100
24003558:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2400355c:	2304      	movs	r3, #4
2400355e:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
24003560:	f001 fb44 	bl	24004bec <HAL_DMA_Init>
24003564:	bb10      	cbnz	r0, 240035ac <HAL_SAI_MspInit+0x15c>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
24003566:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
2400356a:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
2400356c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
24003570:	b00c      	add	sp, #48	; 0x30
24003572:	bd70      	pop	{r4, r5, r6, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
24003574:	491a      	ldr	r1, [pc, #104]	; (240035e0 <HAL_SAI_MspInit+0x190>)
24003576:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
2400357a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
2400357e:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
24003582:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
24003586:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
2400358a:	9102      	str	r1, [sp, #8]
2400358c:	9902      	ldr	r1, [sp, #8]
2400358e:	e7bb      	b.n	24003508 <HAL_SAI_MspInit+0xb8>
       __HAL_RCC_SAI1_CLK_ENABLE();
24003590:	4913      	ldr	r1, [pc, #76]	; (240035e0 <HAL_SAI_MspInit+0x190>)
24003592:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
24003596:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
2400359a:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
2400359e:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
240035a2:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
240035a6:	9101      	str	r1, [sp, #4]
240035a8:	9901      	ldr	r1, [sp, #4]
240035aa:	e762      	b.n	24003472 <HAL_SAI_MspInit+0x22>
      Error_Handler();
240035ac:	f7ff fed6 	bl	2400335c <Error_Handler>
240035b0:	e7d9      	b.n	24003566 <HAL_SAI_MspInit+0x116>
      Error_Handler();
240035b2:	f7ff fed3 	bl	2400335c <Error_Handler>
240035b6:	e79c      	b.n	240034f2 <HAL_SAI_MspInit+0xa2>
      Error_Handler();
240035b8:	f7ff fed0 	bl	2400335c <Error_Handler>
240035bc:	e788      	b.n	240034d0 <HAL_SAI_MspInit+0x80>
240035be:	bf00      	nop
240035c0:	40015804 	.word	0x40015804
240035c4:	40015824 	.word	0x40015824
240035c8:	2001ca8c 	.word	0x2001ca8c
240035cc:	58021000 	.word	0x58021000
240035d0:	2001ca90 	.word	0x2001ca90
240035d4:	40020028 	.word	0x40020028
240035d8:	2001cb08 	.word	0x2001cb08
240035dc:	40020040 	.word	0x40020040
240035e0:	58024400 	.word	0x58024400

240035e4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
240035e4:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
240035e6:	4b07      	ldr	r3, [pc, #28]	; (24003604 <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
240035e8:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
240035ea:	4c07      	ldr	r4, [pc, #28]	; (24003608 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
240035ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
240035f0:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
240035f2:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
240035f6:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
240035fa:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
240035fe:	f85d 4b04 	ldr.w	r4, [sp], #4
24003602:	4770      	bx	lr
24003604:	2001ccb0 	.word	0x2001ccb0
24003608:	52007000 	.word	0x52007000

2400360c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
2400360c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
2400360e:	4b25      	ldr	r3, [pc, #148]	; (240036a4 <HAL_SD_MspInit+0x98>)
{
24003610:	b08a      	sub	sp, #40	; 0x28
  if(sdHandle->Instance==SDMMC1)
24003612:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003614:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
24003616:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003618:	9408      	str	r4, [sp, #32]
2400361a:	e9cd 4404 	strd	r4, r4, [sp, #16]
2400361e:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
24003622:	d001      	beq.n	24003628 <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
24003624:	b00a      	add	sp, #40	; 0x28
24003626:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24003628:	4b1f      	ldr	r3, [pc, #124]	; (240036a8 <HAL_SD_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
2400362a:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
2400362c:	260c      	movs	r6, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2400362e:	a904      	add	r1, sp, #16
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24003630:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24003634:	481d      	ldr	r0, [pc, #116]	; (240036ac <HAL_SD_MspInit+0xa0>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
24003636:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400363a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
2400363e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
24003642:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
24003646:	9201      	str	r2, [sp, #4]
24003648:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
2400364a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400364e:	f042 0204 	orr.w	r2, r2, #4
24003652:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
24003656:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
2400365a:	f002 0204 	and.w	r2, r2, #4
2400365e:	9202      	str	r2, [sp, #8]
24003660:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24003662:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
24003666:	f042 0208 	orr.w	r2, r2, #8
2400366a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
2400366e:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
24003672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24003676:	f003 0308 	and.w	r3, r3, #8
2400367a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
2400367c:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
2400367e:	e9cd 5607 	strd	r5, r6, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
24003682:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24003686:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
24003688:	f002 ffc6 	bl	24006618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
2400368c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2400368e:	a904      	add	r1, sp, #16
24003690:	4807      	ldr	r0, [pc, #28]	; (240036b0 <HAL_SD_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
24003692:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24003694:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
24003698:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2400369c:	f002 ffbc 	bl	24006618 <HAL_GPIO_Init>
}
240036a0:	b00a      	add	sp, #40	; 0x28
240036a2:	bd70      	pop	{r4, r5, r6, pc}
240036a4:	52007000 	.word	0x52007000
240036a8:	58024400 	.word	0x58024400
240036ac:	58020800 	.word	0x58020800
240036b0:	58020c00 	.word	0x58020c00
240036b4:	00000000 	.word	0x00000000

240036b8 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
240036b8:	4813      	ldr	r0, [pc, #76]	; (24003708 <MX_SPI1_Init+0x50>)
240036ba:	4a14      	ldr	r2, [pc, #80]	; (2400370c <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
240036bc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24003700 <MX_SPI1_Init+0x48>
{
240036c0:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
240036c2:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
240036c4:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
240036c6:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
240036c8:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
240036ca:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
240036cc:	ed80 7b08 	vstr	d7, [r0, #32]
240036d0:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
240036d4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
240036d8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
240036dc:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
240036e0:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
240036e4:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
240036e8:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
240036ec:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
240036f0:	f007 fd0c 	bl	2400b10c <HAL_SPI_Init>
240036f4:	b900      	cbnz	r0, 240036f8 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
240036f6:	bd08      	pop	{r3, pc}
240036f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
240036fc:	f7ff be2e 	b.w	2400335c <Error_Handler>
	...
24003708:	2001cf10 	.word	0x2001cf10
2400370c:	40013000 	.word	0x40013000

24003710 <MX_SPI6_Init>:
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
24003710:	4813      	ldr	r0, [pc, #76]	; (24003760 <MX_SPI6_Init+0x50>)
24003712:	4a14      	ldr	r2, [pc, #80]	; (24003764 <MX_SPI6_Init+0x54>)
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
24003714:	ed9f 7b10 	vldr	d7, [pc, #64]	; 24003758 <MX_SPI6_Init+0x48>
{
24003718:	b508      	push	{r3, lr}
  hspi6.Init.Mode = SPI_MODE_SLAVE;
2400371a:	2300      	movs	r3, #0
  hspi6.Instance = SPI6;
2400371c:	6002      	str	r2, [r0, #0]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
2400371e:	2207      	movs	r2, #7
  hspi6.Init.NSS = SPI_NSS_HARD_INPUT;
24003720:	6183      	str	r3, [r0, #24]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
24003722:	60c2      	str	r2, [r0, #12]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
24003724:	ed80 7b08 	vstr	d7, [r0, #32]
24003728:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
2400372c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
24003730:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi6.Init.CRCPolynomial = 0x0;
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
24003734:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
24003738:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
2400373c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
24003740:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
24003744:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
24003748:	f007 fce0 	bl	2400b10c <HAL_SPI_Init>
2400374c:	b900      	cbnz	r0, 24003750 <MX_SPI6_Init+0x40>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
2400374e:	bd08      	pop	{r3, pc}
24003750:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
24003754:	f7ff be02 	b.w	2400335c <Error_Handler>
	...
24003760:	2001cfb0 	.word	0x2001cfb0
24003764:	58001400 	.word	0x58001400

24003768 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
24003768:	b5f0      	push	{r4, r5, r6, r7, lr}
2400376a:	b0bd      	sub	sp, #244	; 0xf4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2400376c:	2100      	movs	r1, #0
{
2400376e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24003770:	22c0      	movs	r2, #192	; 0xc0
24003772:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
24003774:	910a      	str	r1, [sp, #40]	; 0x28
24003776:	e9cd 1106 	strd	r1, r1, [sp, #24]
2400377a:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
2400377e:	f016 f90b 	bl	24019998 <memset>
  if(spiHandle->Instance==SPI1)
24003782:	6823      	ldr	r3, [r4, #0]
24003784:	4a8f      	ldr	r2, [pc, #572]	; (240039c4 <HAL_SPI_MspInit+0x25c>)
24003786:	4293      	cmp	r3, r2
24003788:	d005      	beq.n	24003796 <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI6)
2400378a:	4a8f      	ldr	r2, [pc, #572]	; (240039c8 <HAL_SPI_MspInit+0x260>)
2400378c:	4293      	cmp	r3, r2
2400378e:	f000 8097 	beq.w	240038c0 <HAL_SPI_MspInit+0x158>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
24003792:	b03d      	add	sp, #244	; 0xf4
24003794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
24003796:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2400379a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
2400379c:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
2400379e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240037a2:	f004 fe65 	bl	24008470 <HAL_RCCEx_PeriphCLKConfig>
240037a6:	2800      	cmp	r0, #0
240037a8:	f040 80ff 	bne.w	240039aa <HAL_SPI_MspInit+0x242>
    __HAL_RCC_SPI1_CLK_ENABLE();
240037ac:	4b87      	ldr	r3, [pc, #540]	; (240039cc <HAL_SPI_MspInit+0x264>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240037ae:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
240037b0:	2505      	movs	r5, #5
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240037b2:	2703      	movs	r7, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
240037b4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
240037b8:	4885      	ldr	r0, [pc, #532]	; (240039d0 <HAL_SPI_MspInit+0x268>)
    __HAL_RCC_SPI1_CLK_ENABLE();
240037ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
240037be:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
240037c2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
240037c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
240037ca:	9201      	str	r2, [sp, #4]
240037cc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
240037ce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240037d2:	f042 0202 	orr.w	r2, r2, #2
240037d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
240037da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240037de:	f002 0202 	and.w	r2, r2, #2
240037e2:	9202      	str	r2, [sp, #8]
240037e4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
240037e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240037ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
240037ee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
240037f2:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOG_CLK_ENABLE();
240037f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
240037f8:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
240037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
240037fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24003800:	2302      	movs	r3, #2
    __HAL_RCC_GPIOG_CLK_ENABLE();
24003802:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24003804:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
24003806:	e9cd 2306 	strd	r2, r3, [sp, #24]
2400380a:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2400380e:	f002 ff03 	bl	24006618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
24003812:	f44f 6240 	mov.w	r2, #3072	; 0xc00
24003816:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24003818:	a906      	add	r1, sp, #24
2400381a:	486e      	ldr	r0, [pc, #440]	; (240039d4 <HAL_SPI_MspInit+0x26c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
2400381c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
2400381e:	e9cd 2306 	strd	r2, r3, [sp, #24]
24003822:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
24003826:	f002 fef7 	bl	24006618 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream6;
2400382a:	4e6b      	ldr	r6, [pc, #428]	; (240039d8 <HAL_SPI_MspInit+0x270>)
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
2400382c:	2300      	movs	r3, #0
    hdma_spi1_rx.Instance = DMA1_Stream6;
2400382e:	496b      	ldr	r1, [pc, #428]	; (240039dc <HAL_SPI_MspInit+0x274>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
24003830:	2225      	movs	r2, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
24003832:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
24003834:	e886 000e 	stmia.w	r6, {r1, r2, r3}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
24003838:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
2400383c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
24003840:	e9c6 3103 	strd	r3, r1, [r6, #12]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24003844:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24003848:	f44f 3140 	mov.w	r1, #196608	; 0x30000
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
2400384c:	61f2      	str	r2, [r6, #28]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
2400384e:	2204      	movs	r2, #4
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
24003850:	e9c6 330b 	strd	r3, r3, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24003854:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
24003856:	e9c6 1208 	strd	r1, r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400385a:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
2400385c:	f001 f9c6 	bl	24004bec <HAL_DMA_Init>
24003860:	2800      	cmp	r0, #0
24003862:	f040 809f 	bne.w	240039a4 <HAL_SPI_MspInit+0x23c>
    hdma_spi1_tx.Instance = DMA1_Stream0;
24003866:	4d5e      	ldr	r5, [pc, #376]	; (240039e0 <HAL_SPI_MspInit+0x278>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
24003868:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream0;
2400386a:	495e      	ldr	r1, [pc, #376]	; (240039e4 <HAL_SPI_MspInit+0x27c>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
2400386c:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
2400386e:	606a      	str	r2, [r5, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24003870:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream0;
24003874:	6029      	str	r1, [r5, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24003876:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
24003878:	612a      	str	r2, [r5, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400387a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
2400387e:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
24003880:	4628      	mov	r0, r5
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24003882:	616b      	str	r3, [r5, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
24003884:	60a9      	str	r1, [r5, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
24003886:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
2400388a:	61ab      	str	r3, [r5, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
2400388c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
2400388e:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24003890:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24003892:	622a      	str	r2, [r5, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
24003894:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
24003896:	67e6      	str	r6, [r4, #124]	; 0x7c
24003898:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
2400389a:	61e9      	str	r1, [r5, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
2400389c:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
240038a0:	f001 f9a4 	bl	24004bec <HAL_DMA_Init>
240038a4:	2800      	cmp	r0, #0
240038a6:	d17a      	bne.n	2400399e <HAL_SPI_MspInit+0x236>
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
240038a8:	2200      	movs	r2, #0
240038aa:	2101      	movs	r1, #1
240038ac:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
240038ae:	67a5      	str	r5, [r4, #120]	; 0x78
240038b0:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
240038b2:	f001 f809 	bl	240048c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
240038b6:	2023      	movs	r0, #35	; 0x23
240038b8:	f001 f844 	bl	24004944 <HAL_NVIC_EnableIRQ>
}
240038bc:	b03d      	add	sp, #244	; 0xf4
240038be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
240038c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
240038c4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240038c6:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
240038c8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
240038cc:	f004 fdd0 	bl	24008470 <HAL_RCCEx_PeriphCLKConfig>
240038d0:	2800      	cmp	r0, #0
240038d2:	d16d      	bne.n	240039b0 <HAL_SPI_MspInit+0x248>
    __HAL_RCC_SPI6_CLK_ENABLE();
240038d4:	4b3d      	ldr	r3, [pc, #244]	; (240039cc <HAL_SPI_MspInit+0x264>)
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
240038d6:	2008      	movs	r0, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
240038d8:	a906      	add	r1, sp, #24
    hdma_spi6_rx.Instance = BDMA_Channel0;
240038da:	4e43      	ldr	r6, [pc, #268]	; (240039e8 <HAL_SPI_MspInit+0x280>)
    __HAL_RCC_SPI6_CLK_ENABLE();
240038dc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
240038e0:	f042 0220 	orr.w	r2, r2, #32
240038e4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
240038e8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
240038ec:	f002 0220 	and.w	r2, r2, #32
240038f0:	9204      	str	r2, [sp, #16]
240038f2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
240038f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
240038f8:	f042 0201 	orr.w	r2, r2, #1
240038fc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
24003900:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
24003902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
24003906:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
24003908:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2400390c:	4837      	ldr	r0, [pc, #220]	; (240039ec <HAL_SPI_MspInit+0x284>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
2400390e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
24003910:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
24003912:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
24003914:	e9cd 2306 	strd	r2, r3, [sp, #24]
24003918:	2200      	movs	r2, #0
2400391a:	2302      	movs	r3, #2
2400391c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
24003920:	f002 fe7a 	bl	24006618 <HAL_GPIO_Init>
    hdma_spi6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
24003924:	2300      	movs	r3, #0
    hdma_spi6_rx.Instance = BDMA_Channel0;
24003926:	4932      	ldr	r1, [pc, #200]	; (240039f0 <HAL_SPI_MspInit+0x288>)
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
24003928:	220b      	movs	r2, #11
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
2400392a:	4630      	mov	r0, r6
    hdma_spi6_rx.Init.Request = BDMA_REQUEST_SPI6_RX;
2400392c:	e9c6 1200 	strd	r1, r2, [r6]
    hdma_spi6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
24003930:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
24003934:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi6_rx.Init.Mode = DMA_CIRCULAR;
24003938:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
2400393c:	e9c6 3305 	strd	r3, r3, [r6, #20]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24003940:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi6_rx.Init.MemInc = DMA_MINC_ENABLE;
24003944:	6131      	str	r1, [r6, #16]
    hdma_spi6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24003946:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi6_rx) != HAL_OK)
2400394a:	f001 f94f 	bl	24004bec <HAL_DMA_Init>
2400394e:	2800      	cmp	r0, #0
24003950:	d134      	bne.n	240039bc <HAL_SPI_MspInit+0x254>
    hdma_spi6_tx.Instance = BDMA_Channel1;
24003952:	4d28      	ldr	r5, [pc, #160]	; (240039f4 <HAL_SPI_MspInit+0x28c>)
    hdma_spi6_tx.Init.Request = BDMA_REQUEST_SPI6_TX;
24003954:	220c      	movs	r2, #12
    hdma_spi6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24003956:	2300      	movs	r3, #0
    hdma_spi6_tx.Instance = BDMA_Channel1;
24003958:	4927      	ldr	r1, [pc, #156]	; (240039f8 <HAL_SPI_MspInit+0x290>)
    hdma_spi6_tx.Init.Request = BDMA_REQUEST_SPI6_TX;
2400395a:	606a      	str	r2, [r5, #4]
    hdma_spi6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
2400395c:	2240      	movs	r2, #64	; 0x40
    hdma_spi6_tx.Instance = BDMA_Channel1;
2400395e:	6029      	str	r1, [r5, #0]
    hdma_spi6_tx.Init.MemInc = DMA_MINC_ENABLE;
24003960:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
24003964:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_spi6_tx) != HAL_OK)
24003966:	4628      	mov	r0, r5
    hdma_spi6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
24003968:	616b      	str	r3, [r5, #20]
    hdma_spi6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
2400396a:	60aa      	str	r2, [r5, #8]
    hdma_spi6_tx.Init.Mode = DMA_CIRCULAR;
2400396c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_spi6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
24003970:	61ab      	str	r3, [r5, #24]
    hdma_spi6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
24003972:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi6_rx);
24003976:	67e6      	str	r6, [r4, #124]	; 0x7c
24003978:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_spi6_tx.Init.MemInc = DMA_MINC_ENABLE;
2400397a:	6129      	str	r1, [r5, #16]
    hdma_spi6_tx.Init.Mode = DMA_CIRCULAR;
2400397c:	61ea      	str	r2, [r5, #28]
    hdma_spi6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
2400397e:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_spi6_tx) != HAL_OK)
24003980:	f001 f934 	bl	24004bec <HAL_DMA_Init>
24003984:	b9b8      	cbnz	r0, 240039b6 <HAL_SPI_MspInit+0x24e>
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
24003986:	2200      	movs	r2, #0
24003988:	2107      	movs	r1, #7
2400398a:	2056      	movs	r0, #86	; 0x56
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi6_tx);
2400398c:	67a5      	str	r5, [r4, #120]	; 0x78
2400398e:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI6_IRQn, 7, 0);
24003990:	f000 ff9a 	bl	240048c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
24003994:	2056      	movs	r0, #86	; 0x56
24003996:	f000 ffd5 	bl	24004944 <HAL_NVIC_EnableIRQ>
}
2400399a:	b03d      	add	sp, #244	; 0xf4
2400399c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
2400399e:	f7ff fcdd 	bl	2400335c <Error_Handler>
240039a2:	e781      	b.n	240038a8 <HAL_SPI_MspInit+0x140>
      Error_Handler();
240039a4:	f7ff fcda 	bl	2400335c <Error_Handler>
240039a8:	e75d      	b.n	24003866 <HAL_SPI_MspInit+0xfe>
      Error_Handler();
240039aa:	f7ff fcd7 	bl	2400335c <Error_Handler>
240039ae:	e6fd      	b.n	240037ac <HAL_SPI_MspInit+0x44>
      Error_Handler();
240039b0:	f7ff fcd4 	bl	2400335c <Error_Handler>
240039b4:	e78e      	b.n	240038d4 <HAL_SPI_MspInit+0x16c>
      Error_Handler();
240039b6:	f7ff fcd1 	bl	2400335c <Error_Handler>
240039ba:	e7e4      	b.n	24003986 <HAL_SPI_MspInit+0x21e>
      Error_Handler();
240039bc:	f7ff fcce 	bl	2400335c <Error_Handler>
240039c0:	e7c7      	b.n	24003952 <HAL_SPI_MspInit+0x1ea>
240039c2:	bf00      	nop
240039c4:	40013000 	.word	0x40013000
240039c8:	58001400 	.word	0x58001400
240039cc:	58024400 	.word	0x58024400
240039d0:	58020400 	.word	0x58020400
240039d4:	58021800 	.word	0x58021800
240039d8:	2001cd2c 	.word	0x2001cd2c
240039dc:	400200a0 	.word	0x400200a0
240039e0:	2001cda4 	.word	0x2001cda4
240039e4:	40020010 	.word	0x40020010
240039e8:	2001ce1c 	.word	0x2001ce1c
240039ec:	58020000 	.word	0x58020000
240039f0:	58025408 	.word	0x58025408
240039f4:	2001ce94 	.word	0x2001ce94
240039f8:	5802541c 	.word	0x5802541c

240039fc <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
240039fc:	e7fe      	b.n	240039fc <Default_Handler>
240039fe:	bf00      	nop

24003a00 <Reset_Handler>:
	asm ("ldr sp, =_estack");
24003a00:	f8df d0c0 	ldr.w	sp, [pc, #192]	; 24003ac4 <Reset_Handler+0xc4>
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
24003a04:	481f      	ldr	r0, [pc, #124]	; (24003a84 <Reset_Handler+0x84>)
24003a06:	4a20      	ldr	r2, [pc, #128]	; (24003a88 <Reset_Handler+0x88>)
24003a08:	4290      	cmp	r0, r2
24003a0a:	d003      	beq.n	24003a14 <Reset_Handler+0x14>
		*pDest = *pSource;
24003a0c:	1a12      	subs	r2, r2, r0
24003a0e:	491f      	ldr	r1, [pc, #124]	; (24003a8c <Reset_Handler+0x8c>)
24003a10:	f015 fff4 	bl	240199fc <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
24003a14:	481e      	ldr	r0, [pc, #120]	; (24003a90 <Reset_Handler+0x90>)
24003a16:	4a1f      	ldr	r2, [pc, #124]	; (24003a94 <Reset_Handler+0x94>)
24003a18:	4290      	cmp	r0, r2
24003a1a:	d003      	beq.n	24003a24 <Reset_Handler+0x24>
		*pDest = 0;
24003a1c:	1a12      	subs	r2, r2, r0
24003a1e:	2100      	movs	r1, #0
24003a20:	f015 ffba 	bl	24019998 <memset>
	for (pDest = &_ssram1_bss; pDest != &_esram1_bss; pDest++)
24003a24:	481c      	ldr	r0, [pc, #112]	; (24003a98 <Reset_Handler+0x98>)
24003a26:	4a1d      	ldr	r2, [pc, #116]	; (24003a9c <Reset_Handler+0x9c>)
24003a28:	4290      	cmp	r0, r2
24003a2a:	d003      	beq.n	24003a34 <Reset_Handler+0x34>
		*pDest = 0;
24003a2c:	1a12      	subs	r2, r2, r0
24003a2e:	2100      	movs	r1, #0
24003a30:	f015 ffb2 	bl	24019998 <memset>
	for (pDest = &_ssram2_dma_bss; pDest != &_esram2_dma_bss; pDest++)
24003a34:	481a      	ldr	r0, [pc, #104]	; (24003aa0 <Reset_Handler+0xa0>)
24003a36:	4a1b      	ldr	r2, [pc, #108]	; (24003aa4 <Reset_Handler+0xa4>)
24003a38:	4290      	cmp	r0, r2
24003a3a:	d003      	beq.n	24003a44 <Reset_Handler+0x44>
		*pDest = 0;
24003a3c:	1a12      	subs	r2, r2, r0
24003a3e:	2100      	movs	r1, #0
24003a40:	f015 ffaa 	bl	24019998 <memset>
	for (pDest = &_ssram2_bss; pDest != &_esram2_bss; pDest++)
24003a44:	4818      	ldr	r0, [pc, #96]	; (24003aa8 <Reset_Handler+0xa8>)
24003a46:	4a19      	ldr	r2, [pc, #100]	; (24003aac <Reset_Handler+0xac>)
24003a48:	4290      	cmp	r0, r2
24003a4a:	d003      	beq.n	24003a54 <Reset_Handler+0x54>
		*pDest = 0;
24003a4c:	1a12      	subs	r2, r2, r0
24003a4e:	2100      	movs	r1, #0
24003a50:	f015 ffa2 	bl	24019998 <memset>
	for (pDest = &_ssram3_bss; pDest != &_esram3_bss; pDest++)
24003a54:	4816      	ldr	r0, [pc, #88]	; (24003ab0 <Reset_Handler+0xb0>)
24003a56:	4a17      	ldr	r2, [pc, #92]	; (24003ab4 <Reset_Handler+0xb4>)
24003a58:	4290      	cmp	r0, r2
24003a5a:	d003      	beq.n	24003a64 <Reset_Handler+0x64>
		*pDest = 0;
24003a5c:	1a12      	subs	r2, r2, r0
24003a5e:	2100      	movs	r1, #0
24003a60:	f015 ff9a 	bl	24019998 <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
24003a64:	4814      	ldr	r0, [pc, #80]	; (24003ab8 <Reset_Handler+0xb8>)
24003a66:	4a15      	ldr	r2, [pc, #84]	; (24003abc <Reset_Handler+0xbc>)
24003a68:	4290      	cmp	r0, r2
24003a6a:	d003      	beq.n	24003a74 <Reset_Handler+0x74>
		*pDest = *pSource;
24003a6c:	1a12      	subs	r2, r2, r0
24003a6e:	4914      	ldr	r1, [pc, #80]	; (24003ac0 <Reset_Handler+0xc0>)
24003a70:	f015 ffc4 	bl	240199fc <memcpy>
	SystemInit();
24003a74:	f000 fe1e 	bl	240046b4 <SystemInit>
	__libc_init_array();
24003a78:	f015 ff9c 	bl	240199b4 <__libc_init_array>
	(void)main();
24003a7c:	f7fe fdce 	bl	2400261c <main>
	for (;;) ;
24003a80:	e7fe      	b.n	24003a80 <Reset_Handler+0x80>
24003a82:	bf00      	nop
24003a84:	20000000 	.word	0x20000000
24003a88:	20000a1c 	.word	0x20000a1c
24003a8c:	2402b730 	.word	0x2402b730
24003a90:	20000a20 	.word	0x20000a20
24003a94:	2001e234 	.word	0x2001e234
24003a98:	24040000 	.word	0x24040000
24003a9c:	24080000 	.word	0x24080000
24003aa0:	30000000 	.word	0x30000000
24003aa4:	30000880 	.word	0x30000880
24003aa8:	30002000 	.word	0x30002000
24003aac:	30046580 	.word	0x30046580
24003ab0:	38000000 	.word	0x38000000
24003ab4:	38000080 	.word	0x38000080
24003ab8:	00000400 	.word	0x00000400
24003abc:	0000c200 	.word	0x0000c200
24003ac0:	2402c14c 	.word	0x2402c14c
24003ac4:	20020000 	.word	0x20020000

24003ac8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24003ac8:	4b07      	ldr	r3, [pc, #28]	; (24003ae8 <HAL_MspInit+0x20>)
{
24003aca:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24003acc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
24003ad0:	f042 0202 	orr.w	r2, r2, #2
24003ad4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24003ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24003adc:	f003 0302 	and.w	r3, r3, #2
24003ae0:	9301      	str	r3, [sp, #4]
24003ae2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24003ae4:	b002      	add	sp, #8
24003ae6:	4770      	bx	lr
24003ae8:	58024400 	.word	0x58024400

24003aec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
24003aec:	e7fe      	b.n	24003aec <NMI_Handler>
24003aee:	bf00      	nop

24003af0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24003af0:	e7fe      	b.n	24003af0 <HardFault_Handler>
24003af2:	bf00      	nop

24003af4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
24003af4:	e7fe      	b.n	24003af4 <MemManage_Handler>
24003af6:	bf00      	nop

24003af8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24003af8:	e7fe      	b.n	24003af8 <BusFault_Handler>
24003afa:	bf00      	nop

24003afc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24003afc:	e7fe      	b.n	24003afc <UsageFault_Handler>
24003afe:	bf00      	nop

24003b00 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24003b00:	4770      	bx	lr
24003b02:	bf00      	nop

24003b04 <DebugMon_Handler>:
24003b04:	4770      	bx	lr
24003b06:	bf00      	nop

24003b08 <PendSV_Handler>:
24003b08:	4770      	bx	lr
24003b0a:	bf00      	nop

24003b0c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
24003b0c:	f000 bea0 	b.w	24004850 <HAL_IncTick>

24003b10 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
24003b10:	4801      	ldr	r0, [pc, #4]	; (24003b18 <DMA1_Stream0_IRQHandler+0x8>)
24003b12:	f002 b8d7 	b.w	24005cc4 <HAL_DMA_IRQHandler>
24003b16:	bf00      	nop
24003b18:	2001cda4 	.word	0x2001cda4

24003b1c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
24003b1c:	4801      	ldr	r0, [pc, #4]	; (24003b24 <DMA1_Stream1_IRQHandler+0x8>)
24003b1e:	f002 b8d1 	b.w	24005cc4 <HAL_DMA_IRQHandler>
24003b22:	bf00      	nop
24003b24:	2001ca90 	.word	0x2001ca90

24003b28 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
24003b28:	4801      	ldr	r0, [pc, #4]	; (24003b30 <DMA1_Stream2_IRQHandler+0x8>)
24003b2a:	f002 b8cb 	b.w	24005cc4 <HAL_DMA_IRQHandler>
24003b2e:	bf00      	nop
24003b30:	2001cb08 	.word	0x2001cb08

24003b34 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
24003b34:	4801      	ldr	r0, [pc, #4]	; (24003b3c <DMA1_Stream3_IRQHandler+0x8>)
24003b36:	f002 b8c5 	b.w	24005cc4 <HAL_DMA_IRQHandler>
24003b3a:	bf00      	nop
24003b3c:	2001429c 	.word	0x2001429c

24003b40 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
24003b40:	4801      	ldr	r0, [pc, #4]	; (24003b48 <DMA1_Stream4_IRQHandler+0x8>)
24003b42:	f002 b8bf 	b.w	24005cc4 <HAL_DMA_IRQHandler>
24003b46:	bf00      	nop
24003b48:	20014314 	.word	0x20014314

24003b4c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
24003b4c:	4801      	ldr	r0, [pc, #4]	; (24003b54 <DMA1_Stream6_IRQHandler+0x8>)
24003b4e:	f002 b8b9 	b.w	24005cc4 <HAL_DMA_IRQHandler>
24003b52:	bf00      	nop
24003b54:	2001cd2c 	.word	0x2001cd2c

24003b58 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
24003b58:	2040      	movs	r0, #64	; 0x40
24003b5a:	f002 beb1 	b.w	240068c0 <HAL_GPIO_EXTI_IRQHandler>
24003b5e:	bf00      	nop

24003b60 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
24003b60:	4801      	ldr	r0, [pc, #4]	; (24003b68 <I2C1_EV_IRQHandler+0x8>)
24003b62:	f003 b9d7 	b.w	24006f14 <HAL_I2C_EV_IRQHandler>
24003b66:	bf00      	nop
24003b68:	2001438c 	.word	0x2001438c

24003b6c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
24003b6c:	4801      	ldr	r0, [pc, #4]	; (24003b74 <I2C1_ER_IRQHandler+0x8>)
24003b6e:	f003 bb49 	b.w	24007204 <HAL_I2C_ER_IRQHandler>
24003b72:	bf00      	nop
24003b74:	2001438c 	.word	0x2001438c

24003b78 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
24003b78:	4801      	ldr	r0, [pc, #4]	; (24003b80 <I2C2_EV_IRQHandler+0x8>)
24003b7a:	f003 b9cb 	b.w	24006f14 <HAL_I2C_EV_IRQHandler>
24003b7e:	bf00      	nop
24003b80:	200143e0 	.word	0x200143e0

24003b84 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
24003b84:	4801      	ldr	r0, [pc, #4]	; (24003b8c <I2C2_ER_IRQHandler+0x8>)
24003b86:	f003 bb3d 	b.w	24007204 <HAL_I2C_ER_IRQHandler>
24003b8a:	bf00      	nop
24003b8c:	200143e0 	.word	0x200143e0

24003b90 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
24003b90:	4801      	ldr	r0, [pc, #4]	; (24003b98 <SPI1_IRQHandler+0x8>)
24003b92:	f007 bde9 	b.w	2400b768 <HAL_SPI_IRQHandler>
24003b96:	bf00      	nop
24003b98:	2001cf10 	.word	0x2001cf10

24003b9c <SPI6_IRQHandler>:
void SPI6_IRQHandler(void)
{
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
24003b9c:	4801      	ldr	r0, [pc, #4]	; (24003ba4 <SPI6_IRQHandler+0x8>)
24003b9e:	f007 bde3 	b.w	2400b768 <HAL_SPI_IRQHandler>
24003ba2:	bf00      	nop
24003ba4:	2001cfb0 	.word	0x2001cfb0

24003ba8 <DMAMUX1_OVR_IRQHandler>:
{
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Stream1
  HAL_DMAEx_MUX_IRQHandler(&hdma_sai1_a);
24003ba8:	4801      	ldr	r0, [pc, #4]	; (24003bb0 <DMAMUX1_OVR_IRQHandler+0x8>)
24003baa:	f002 bd05 	b.w	240065b8 <HAL_DMAEx_MUX_IRQHandler>
24003bae:	bf00      	nop
24003bb0:	2001ca90 	.word	0x2001ca90

24003bb4 <BDMA_Channel0_IRQHandler>:
void BDMA_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_rx);
24003bb4:	4801      	ldr	r0, [pc, #4]	; (24003bbc <BDMA_Channel0_IRQHandler+0x8>)
24003bb6:	f002 b885 	b.w	24005cc4 <HAL_DMA_IRQHandler>
24003bba:	bf00      	nop
24003bbc:	2001ce1c 	.word	0x2001ce1c

24003bc0 <BDMA_Channel1_IRQHandler>:
void BDMA_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN BDMA_Channel1_IRQn 0 */

  /* USER CODE END BDMA_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi6_tx);
24003bc0:	4801      	ldr	r0, [pc, #4]	; (24003bc8 <BDMA_Channel1_IRQHandler+0x8>)
24003bc2:	f002 b87f 	b.w	24005cc4 <HAL_DMA_IRQHandler>
24003bc6:	bf00      	nop
24003bc8:	2001ce94 	.word	0x2001ce94

24003bcc <audioInitSynth>:
 float polyDivider[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void audioInitSynth()
{
24003bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24003bd0:	ed2d 8b0a 	vpush	{d8-d12}

			tPBSineTriangle_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);

			freqMult[i][v] = 1.0f;
24003bd4:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
{
24003bd8:	b087      	sub	sp, #28
        oversamplerArray[i] = 0.0f;
24003bda:	4be0      	ldr	r3, [pc, #896]	; (24003f5c <audioInitSynth+0x390>)
24003bdc:	2200      	movs	r2, #0
24003bde:	2600      	movs	r6, #0
24003be0:	49df      	ldr	r1, [pc, #892]	; (24003f60 <audioInitSynth+0x394>)
24003be2:	f8df b468 	ldr.w	fp, [pc, #1128]	; 2400404c <audioInitSynth+0x480>
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
24003be6:	4cdf      	ldr	r4, [pc, #892]	; (24003f64 <audioInitSynth+0x398>)
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);
24003be8:	eddf badf 	vldr	s23, [pc, #892]	; 24003f68 <audioInitSynth+0x39c>
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
24003bec:	ed9f badf 	vldr	s22, [pc, #892]	; 24003f6c <audioInitSynth+0x3a0>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
24003bf0:	eddf 8adf 	vldr	s17, [pc, #892]	; 24003f70 <audioInitSynth+0x3a4>
		}


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24003bf4:	ed9f aadf 	vldr	s20, [pc, #892]	; 24003f74 <audioInitSynth+0x3a8>
24003bf8:	9102      	str	r1, [sp, #8]
        oversamplerArray[i] = 0.0f;
24003bfa:	601a      	str	r2, [r3, #0]
24003bfc:	605a      	str	r2, [r3, #4]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24003bfe:	9603      	str	r6, [sp, #12]
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
24003c00:	4bdd      	ldr	r3, [pc, #884]	; (24003f78 <audioInitSynth+0x3ac>)
24003c02:	2200      	movs	r2, #0
24003c04:	48dd      	ldr	r0, [pc, #884]	; (24003f7c <audioInitSynth+0x3b0>)
24003c06:	2102      	movs	r1, #2
24003c08:	eb03 0806 	add.w	r8, r3, r6
24003c0c:	4bdc      	ldr	r3, [pc, #880]	; (24003f80 <audioInitSynth+0x3b4>)
24003c0e:	4430      	add	r0, r6
24003c10:	4635      	mov	r5, r6
24003c12:	199f      	adds	r7, r3, r6
24003c14:	4623      	mov	r3, r4
24003c16:	f106 0918 	add.w	r9, r6, #24
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);
24003c1a:	ed9f 8ada 	vldr	s16, [pc, #872]	; 24003f84 <audioInitSynth+0x3b8>
			midiAdd[i][v] = 0.0f;
24003c1e:	f04f 0a00 	mov.w	sl, #0
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
24003c22:	f00c ffa9 	bl	24010b78 <tOversampler_init>
			tPBSaw_init(&saw[i][v], &leaf);
24003c26:	4640      	mov	r0, r8
24003c28:	4621      	mov	r1, r4
24003c2a:	f011 fd05 	bl	24015638 <tPBSaw_init>
			tPBPulse_init(&pulse[i][v], &leaf);
24003c2e:	4638      	mov	r0, r7
24003c30:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
24003c32:	f108 0808 	add.w	r8, r8, #8
			tPBPulse_init(&pulse[i][v], &leaf);
24003c36:	f011 fc67 	bl	24015508 <tPBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
24003c3a:	4bd3      	ldr	r3, [pc, #844]	; (24003f88 <audioInitSynth+0x3bc>)
24003c3c:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
24003c3e:	3708      	adds	r7, #8
			tCycle_init(&sine[i][v],  &leaf);
24003c40:	1958      	adds	r0, r3, r5
24003c42:	f011 f96f 	bl	24014f24 <tCycle_init>
			tPBTriangle_init(&tri[i][v],  &leaf);
24003c46:	4bd1      	ldr	r3, [pc, #836]	; (24003f8c <audioInitSynth+0x3c0>)
24003c48:	4621      	mov	r1, r4
24003c4a:	1958      	adds	r0, r3, r5
24003c4c:	f011 fa02 	bl	24015054 <tPBTriangle_init>
			tPBSawSquare_init(&sawPaired[i][v], &leaf);
24003c50:	4bcf      	ldr	r3, [pc, #828]	; (24003f90 <audioInitSynth+0x3c4>)
24003c52:	4621      	mov	r1, r4
24003c54:	1958      	adds	r0, r3, r5
24003c56:	f011 fd3f 	bl	240156d8 <tPBSawSquare_init>
			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
24003c5a:	4bce      	ldr	r3, [pc, #824]	; (24003f94 <audioInitSynth+0x3c8>)
24003c5c:	4621      	mov	r1, r4
24003c5e:	1958      	adds	r0, r3, r5
24003c60:	f011 fb14 	bl	2401528c <tPBSineTriangle_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);
24003c64:	4bcc      	ldr	r3, [pc, #816]	; (24003f98 <audioInitSynth+0x3cc>)
24003c66:	eef0 0a48 	vmov.f32	s1, s16
24003c6a:	4621      	mov	r1, r4
24003c6c:	1958      	adds	r0, r3, r5
24003c6e:	eeb0 0a6b 	vmov.f32	s0, s23
24003c72:	f00d fdc3 	bl	240117fc <tExpSmooth_init>
			freqMult[i][v] = 1.0f;
24003c76:	4bc9      	ldr	r3, [pc, #804]	; (24003f9c <audioInitSynth+0x3d0>)
24003c78:	442b      	add	r3, r5
24003c7a:	ed83 ca00 	vstr	s24, [r3]
			midiAdd[i][v] = 0.0f;
24003c7e:	4bc8      	ldr	r3, [pc, #800]	; (24003fa0 <audioInitSynth+0x3d4>)
24003c80:	442b      	add	r3, r5
		for(int i = 0; i < NUM_OSC; i++)
24003c82:	3508      	adds	r5, #8
24003c84:	454d      	cmp	r5, r9
			midiAdd[i][v] = 0.0f;
24003c86:	f8c3 a000 	str.w	sl, [r3]
		for(int i = 0; i < NUM_OSC; i++)
24003c8a:	d1cc      	bne.n	24003c26 <audioInitSynth+0x5a>
24003c8c:	4635      	mov	r5, r6
24003c8e:	f106 0710 	add.w	r7, r6, #16
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24003c92:	ed9f 9ac4 	vldr	s18, [pc, #784]	; 24003fa4 <audioInitSynth+0x3d8>
24003c96:	ed9f 8ac4 	vldr	s16, [pc, #784]	; 24003fa8 <audioInitSynth+0x3dc>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
24003c9a:	eddf 9ac4 	vldr	s19, [pc, #784]	; 24003fac <audioInitSynth+0x3e0>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24003c9e:	4bc4      	ldr	r3, [pc, #784]	; (24003fb0 <audioInitSynth+0x3e4>)
24003ca0:	eef0 0a49 	vmov.f32	s1, s18
24003ca4:	eeb0 0a48 	vmov.f32	s0, s16
24003ca8:	2101      	movs	r1, #1
24003caa:	1958      	adds	r0, r3, r5
24003cac:	4622      	mov	r2, r4
24003cae:	f00e f92d 	bl	24011f0c <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
24003cb2:	4bc0      	ldr	r3, [pc, #768]	; (24003fb4 <audioInitSynth+0x3e8>)
24003cb4:	eef0 0a49 	vmov.f32	s1, s18
24003cb8:	4622      	mov	r2, r4
24003cba:	1958      	adds	r0, r3, r5
24003cbc:	eeb0 0a48 	vmov.f32	s0, s16
24003cc0:	2100      	movs	r1, #0
24003cc2:	f00e f923 	bl	24011f0c <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
24003cc6:	4bbc      	ldr	r3, [pc, #752]	; (24003fb8 <audioInitSynth+0x3ec>)
24003cc8:	4622      	mov	r2, r4
24003cca:	eef0 0a49 	vmov.f32	s1, s18
24003cce:	1958      	adds	r0, r3, r5
24003cd0:	eeb0 0a48 	vmov.f32	s0, s16
24003cd4:	2102      	movs	r1, #2
24003cd6:	f00e f919 	bl	24011f0c <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
24003cda:	4bb8      	ldr	r3, [pc, #736]	; (24003fbc <audioInitSynth+0x3f0>)
24003cdc:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
24003ce0:	4621      	mov	r1, r4
24003ce2:	1958      	adds	r0, r3, r5
24003ce4:	eeb0 0a48 	vmov.f32	s0, s16
24003ce8:	f00f fcf8 	bl	240136dc <tDiodeFilter_init>
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
24003cec:	4bb4      	ldr	r3, [pc, #720]	; (24003fc0 <audioInitSynth+0x3f4>)
24003cee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24003cf2:	4621      	mov	r1, r4
24003cf4:	1958      	adds	r0, r3, r5
24003cf6:	eef0 0a4b 	vmov.f32	s1, s22
24003cfa:	eeb0 0a48 	vmov.f32	s0, s16
24003cfe:	f00f fb2f 	bl	24013360 <tVZFilterBell_init>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
24003d02:	4bb0      	ldr	r3, [pc, #704]	; (24003fc4 <audioInitSynth+0x3f8>)
24003d04:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24003d08:	4621      	mov	r1, r4
24003d0a:	1958      	adds	r0, r3, r5
24003d0c:	eef0 0a69 	vmov.f32	s1, s19
24003d10:	eeb0 0a48 	vmov.f32	s0, s16
24003d14:	f00f f81a 	bl	24012d4c <tVZFilterLS_init>
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
24003d18:	4bab      	ldr	r3, [pc, #684]	; (24003fc8 <audioInitSynth+0x3fc>)
24003d1a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24003d1e:	4621      	mov	r1, r4
24003d20:	1958      	adds	r0, r3, r5
24003d22:	eef0 0a69 	vmov.f32	s1, s19
24003d26:	eeb0 0a48 	vmov.f32	s0, s16
24003d2a:	f00f f983 	bl	24013034 <tVZFilterHS_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
24003d2e:	4ba7      	ldr	r3, [pc, #668]	; (24003fcc <audioInitSynth+0x400>)
24003d30:	4622      	mov	r2, r4
24003d32:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24003d36:	1958      	adds	r0, r3, r5
24003d38:	eeb0 0a48 	vmov.f32	s0, s16
24003d3c:	2104      	movs	r1, #4
24003d3e:	f00e fd5f 	bl	24012800 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
24003d42:	4ba3      	ldr	r3, [pc, #652]	; (24003fd0 <audioInitSynth+0x404>)
24003d44:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24003d48:	4621      	mov	r1, r4
24003d4a:	1958      	adds	r0, r3, r5
24003d4c:	eeb0 0a48 	vmov.f32	s0, s16
24003d50:	f010 f974 	bl	2401403c <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
24003d54:	4b9f      	ldr	r3, [pc, #636]	; (24003fd4 <audioInitSynth+0x408>)
24003d56:	eef0 0a68 	vmov.f32	s1, s17
24003d5a:	4621      	mov	r1, r4
24003d5c:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
24003d5e:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
24003d60:	eeb0 0a6b 	vmov.f32	s0, s23
24003d64:	f00d fd4a 	bl	240117fc <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
24003d68:	42bd      	cmp	r5, r7
24003d6a:	d198      	bne.n	24003c9e <audioInitSynth+0xd2>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24003d6c:	4b9a      	ldr	r3, [pc, #616]	; (24003fd8 <audioInitSynth+0x40c>)
24003d6e:	2500      	movs	r5, #0
24003d70:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
24003d74:	4b99      	ldr	r3, [pc, #612]	; (24003fdc <audioInitSynth+0x410>)
24003d76:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
24003d78:	eb08 0005 	add.w	r0, r8, r5
24003d7c:	4621      	mov	r1, r4
24003d7e:	f011 fda9 	bl	240158d4 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
24003d82:	1978      	adds	r0, r7, r5
24003d84:	4621      	mov	r1, r4
24003d86:	f011 fdeb 	bl	24015960 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
24003d8a:	4b95      	ldr	r3, [pc, #596]	; (24003fe0 <audioInitSynth+0x414>)
24003d8c:	4621      	mov	r1, r4
24003d8e:	1998      	adds	r0, r3, r6
24003d90:	4428      	add	r0, r5
24003d92:	f011 f8c7 	bl	24014f24 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
24003d96:	4b93      	ldr	r3, [pc, #588]	; (24003fe4 <audioInitSynth+0x418>)
24003d98:	4621      	mov	r1, r4
24003d9a:	1998      	adds	r0, r3, r6
24003d9c:	4428      	add	r0, r5
24003d9e:	f011 ffd1 	bl	24015d44 <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
24003da2:	4b91      	ldr	r3, [pc, #580]	; (24003fe8 <audioInitSynth+0x41c>)
24003da4:	4621      	mov	r1, r4
24003da6:	1998      	adds	r0, r3, r6
24003da8:	4428      	add	r0, r5
24003daa:	f012 f827 	bl	24015dfc <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
24003dae:	4b8f      	ldr	r3, [pc, #572]	; (24003fec <audioInitSynth+0x420>)
24003db0:	4621      	mov	r1, r4
24003db2:	1998      	adds	r0, r3, r6
24003db4:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
24003db6:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
24003db8:	f011 ff00 	bl	24015bbc <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
24003dbc:	2d20      	cmp	r5, #32
24003dbe:	d1db      	bne.n	24003d78 <audioInitSynth+0x1ac>
24003dc0:	9f02      	ldr	r7, [sp, #8]
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24003dc2:	ed9f 9a8b 	vldr	s18, [pc, #556]	; 24003ff0 <audioInitSynth+0x424>
24003dc6:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
24003dca:	ed9f 8a8a 	vldr	s16, [pc, #552]	; 24003ff4 <audioInitSynth+0x428>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
24003dce:	4628      	mov	r0, r5
24003dd0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24003dd4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
24003dd8:	4623      	mov	r3, r4
24003dda:	eef0 0a4a 	vmov.f32	s1, s20
24003dde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24003de2:	eeb0 0a49 	vmov.f32	s0, s18
24003de6:	4984      	ldr	r1, [pc, #528]	; (24003ff8 <audioInitSynth+0x42c>)
24003de8:	f00d f9f4 	bl	240111d4 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
24003dec:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
24003dee:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
24003df0:	eeb0 0a48 	vmov.f32	s0, s16
24003df4:	f00d fa9c 	bl	24011330 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
24003df8:	42bd      	cmp	r5, r7
24003dfa:	d1e8      	bne.n	24003dce <audioInitSynth+0x202>
		}

		//noise
		tVZFilterLS_init(&noiseShelf1[v], 80.0f, 0.5f, 1.0f, &leaf);
24003dfc:	4b7f      	ldr	r3, [pc, #508]	; (24003ffc <audioInitSynth+0x430>)
24003dfe:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24003e02:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
24003e06:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 24004000 <audioInitSynth+0x434>
24003e0a:	1998      	adds	r0, r3, r6
24003e0c:	4621      	mov	r1, r4
24003e0e:	f00e ff9d 	bl	24012d4c <tVZFilterLS_init>
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
24003e12:	4b7c      	ldr	r3, [pc, #496]	; (24004004 <audioInitSynth+0x438>)
24003e14:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24003e18:	4621      	mov	r1, r4
24003e1a:	1998      	adds	r0, r3, r6
24003e1c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
24003e20:	ed9f 0a79 	vldr	s0, [pc, #484]	; 24004008 <audioInitSynth+0x43c>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
24003e24:	4635      	mov	r5, r6
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
24003e26:	f00f f905 	bl	24013034 <tVZFilterHS_init>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
24003e2a:	4b78      	ldr	r3, [pc, #480]	; (2400400c <audioInitSynth+0x440>)
24003e2c:	4a78      	ldr	r2, [pc, #480]	; (24004010 <audioInitSynth+0x444>)
24003e2e:	eef0 0a4b 	vmov.f32	s1, s22
24003e32:	eb03 0a06 	add.w	sl, r3, r6
24003e36:	4b77      	ldr	r3, [pc, #476]	; (24004014 <audioInitSynth+0x448>)
24003e38:	1990      	adds	r0, r2, r6
24003e3a:	eeb0 0a4a 	vmov.f32	s0, s20
24003e3e:	199f      	adds	r7, r3, r6
24003e40:	f106 0320 	add.w	r3, r6, #32
24003e44:	4621      	mov	r1, r4
24003e46:	ed9f 1a74 	vldr	s2, [pc, #464]	; 24004018 <audioInitSynth+0x44c>
24003e4a:	9304      	str	r3, [sp, #16]
24003e4c:	f00f fa88 	bl	24013360 <tVZFilterBell_init>

		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
24003e50:	ed9f 8a72 	vldr	s16, [pc, #456]	; 2400401c <audioInitSynth+0x450>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
24003e54:	9605      	str	r6, [sp, #20]


	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
24003e56:	eddf 9a53 	vldr	s19, [pc, #332]	; 24003fa4 <audioInitSynth+0x3d8>
24003e5a:	ed9f 9a53 	vldr	s18, [pc, #332]	; 24003fa8 <audioInitSynth+0x3dc>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
24003e5e:	eddf aa53 	vldr	s21, [pc, #332]	; 24003fac <audioInitSynth+0x3e0>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
24003e62:	9e04      	ldr	r6, [sp, #16]
			tCrusher_init(&bc[i][v],&leaf);
24003e64:	4650      	mov	r0, sl
24003e66:	4621      	mov	r1, r4
24003e68:	f00c ff8a 	bl	24010d80 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
24003e6c:	4b6c      	ldr	r3, [pc, #432]	; (24004020 <audioInitSynth+0x454>)
24003e6e:	4621      	mov	r1, r4
24003e70:	4638      	mov	r0, r7
24003e72:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24003e76:	eb03 0905 	add.w	r9, r3, r5
24003e7a:	f00e fa33 	bl	240122e4 <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
24003e7e:	4638      	mov	r0, r7
24003e80:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
24003e84:	f10a 0a08 	add.w	sl, sl, #8
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
24003e88:	f00e fa8c 	bl	240123a4 <tHighpass_setSampleRate>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
24003e8c:	4b65      	ldr	r3, [pc, #404]	; (24004024 <audioInitSynth+0x458>)
24003e8e:	4621      	mov	r1, r4
24003e90:	4648      	mov	r0, r9
24003e92:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24003e96:	eb03 0805 	add.w	r8, r3, r5
24003e9a:	f00e fa23 	bl	240122e4 <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
24003e9e:	4648      	mov	r0, r9
24003ea0:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
24003ea4:	3708      	adds	r7, #8
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
24003ea6:	f00e fa7d 	bl	240123a4 <tHighpass_setSampleRate>
			tVZFilterLS_init(&shelf1[i][v], 80.0f, 0.5f, 1.0f,&leaf);
24003eaa:	4b5f      	ldr	r3, [pc, #380]	; (24004028 <audioInitSynth+0x45c>)
24003eac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24003eb0:	4621      	mov	r1, r4
24003eb2:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
24003eb6:	4640      	mov	r0, r8
24003eb8:	ed9f 0a51 	vldr	s0, [pc, #324]	; 24004000 <audioInitSynth+0x434>
24003ebc:	eb03 0905 	add.w	r9, r3, r5
24003ec0:	f00e ff44 	bl	24012d4c <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
24003ec4:	4640      	mov	r0, r8
24003ec6:	eeb0 0a48 	vmov.f32	s0, s16
24003eca:	f00e ff43 	bl	24012d54 <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&shelf2[i][v], 12000.0f, 0.5f, 1.0f, &leaf);
24003ece:	4b57      	ldr	r3, [pc, #348]	; (2400402c <audioInitSynth+0x460>)
24003ed0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24003ed4:	4621      	mov	r1, r4
24003ed6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
24003eda:	4648      	mov	r0, r9
24003edc:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 24004008 <audioInitSynth+0x43c>
24003ee0:	eb03 0805 	add.w	r8, r3, r5
24003ee4:	f00f f8a6 	bl	24013034 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
24003ee8:	4648      	mov	r0, r9
24003eea:	eeb0 0a48 	vmov.f32	s0, s16
24003eee:	f00f f8a5 	bl	2401303c <tVZFilterHS_setSampleRate>
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
24003ef2:	4b4f      	ldr	r3, [pc, #316]	; (24004030 <audioInitSynth+0x464>)
24003ef4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24003ef8:	4621      	mov	r1, r4
24003efa:	eb03 0905 	add.w	r9, r3, r5
24003efe:	eef0 0a4b 	vmov.f32	s1, s22
24003f02:	4640      	mov	r0, r8
24003f04:	eeb0 0a4a 	vmov.f32	s0, s20
24003f08:	f00f fa2a 	bl	24013360 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
24003f0c:	eeb0 0a48 	vmov.f32	s0, s16
24003f10:	4640      	mov	r0, r8
24003f12:	f00f fa29 	bl	24013368 <tVZFilterBell_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
24003f16:	4648      	mov	r0, r9
24003f18:	4621      	mov	r1, r4
24003f1a:	f00c ffed 	bl	24010ef8 <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
24003f1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
24003f22:	4944      	ldr	r1, [pc, #272]	; (24004034 <audioInitSynth+0x468>)
24003f24:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
24003f28:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
24003f2c:	ed9f 1a42 	vldr	s2, [pc, #264]	; 24004038 <audioInitSynth+0x46c>
24003f30:	4a42      	ldr	r2, [pc, #264]	; (2400403c <audioInitSynth+0x470>)
24003f32:	eb01 0805 	add.w	r8, r1, r5
24003f36:	4648      	mov	r0, r9
24003f38:	4941      	ldr	r1, [pc, #260]	; (24004040 <audioInitSynth+0x474>)
24003f3a:	9300      	str	r3, [sp, #0]
24003f3c:	ed9f 0a41 	vldr	s0, [pc, #260]	; 24004044 <audioInitSynth+0x478>
24003f40:	f00d f88e 	bl	24011060 <tCompressor_setTables>
			tCompressor_setSampleRate(&comp[i][v], SAMPLE_RATE * OVERSAMPLE);
24003f44:	eeb0 0a48 	vmov.f32	s0, s16
24003f48:	4648      	mov	r0, r9
24003f4a:	f00d f8af 	bl	240110ac <tCompressor_setSampleRate>
			tCycle_init(&mod1[i][v], &leaf);
24003f4e:	4b3e      	ldr	r3, [pc, #248]	; (24004048 <audioInitSynth+0x47c>)
24003f50:	4621      	mov	r1, r4
24003f52:	4640      	mov	r0, r8
24003f54:	eb03 0905 	add.w	r9, r3, r5
24003f58:	e07e      	b.n	24004058 <audioInitSynth+0x48c>
24003f5a:	bf00      	nop
24003f5c:	2001d6c0 	.word	0x2001d6c0
24003f60:	2001d33c 	.word	0x2001d33c
24003f64:	2000528c 	.word	0x2000528c
24003f68:	42800000 	.word	0x42800000
24003f6c:	3ff33333 	.word	0x3ff33333
24003f70:	3c23d70a 	.word	0x3c23d70a
24003f74:	447a0000 	.word	0x447a0000
24003f78:	2001d7c0 	.word	0x2001d7c0
24003f7c:	2001d684 	.word	0x2001d684
24003f80:	2001d7a4 	.word	0x2001d7a4
24003f84:	3d4ccccd 	.word	0x3d4ccccd
24003f88:	2001d87c 	.word	0x2001d87c
24003f8c:	2001da18 	.word	0x2001da18
24003f90:	2001d7d8 	.word	0x2001d7d8
24003f94:	2001d894 	.word	0x2001d894
24003f98:	2001d768 	.word	0x2001d768
24003f9c:	2001d394 	.word	0x2001d394
24003fa0:	2001d600 	.word	0x2001d600
24003fa4:	3f333333 	.word	0x3f333333
24003fa8:	44fa0000 	.word	0x44fa0000
24003fac:	3f19999a 	.word	0x3f19999a
24003fb0:	2001d4f0 	.word	0x2001d4f0
24003fb4:	2001d3ec 	.word	0x2001d3ec
24003fb8:	2001d218 	.word	0x2001d218
24003fbc:	2001d2f8 	.word	0x2001d2f8
24003fc0:	2001d200 	.word	0x2001d200
24003fc4:	2001d1f0 	.word	0x2001d1f0
24003fc8:	2001d1e0 	.word	0x2001d1e0
24003fcc:	2001d1d0 	.word	0x2001d1d0
24003fd0:	2001d1c0 	.word	0x2001d1c0
24003fd4:	2001d35c 	.word	0x2001d35c
24003fd8:	2001d440 	.word	0x2001d440
24003fdc:	2001d420 	.word	0x2001d420
24003fe0:	2001d490 	.word	0x2001d490
24003fe4:	2001d4d0 	.word	0x2001d4d0
24003fe8:	2001d4b0 	.word	0x2001d4b0
24003fec:	2001d460 	.word	0x2001d460
24003ff0:	3dcccccd 	.word	0x3dcccccd
24003ff4:	3f7fffac 	.word	0x3f7fffac
24003ff8:	200011b0 	.word	0x200011b0
24003ffc:	2001d674 	.word	0x2001d674
24004000:	42a00000 	.word	0x42a00000
24004004:	2001d67c 	.word	0x2001d67c
24004008:	463b8000 	.word	0x463b8000
2400400c:	2001d228 	.word	0x2001d228
24004010:	2001d658 	.word	0x2001d658
24004014:	2001d288 	.word	0x2001d288
24004018:	3f8b851f 	.word	0x3f8b851f
2400401c:	47bb8000 	.word	0x47bb8000
24004020:	2001d2a8 	.word	0x2001d2a8
24004024:	2001d83c 	.word	0x2001d83c
24004028:	2001d85c 	.word	0x2001d85c
2400402c:	2001d248 	.word	0x2001d248
24004030:	2001d268 	.word	0x2001d268
24004034:	2001d618 	.word	0x2001d618
24004038:	c2b40000 	.word	0xc2b40000
2400403c:	30002000 	.word	0x30002000
24004040:	30012000 	.word	0x30012000
24004044:	3727c5ac 	.word	0x3727c5ac
24004048:	2001d638 	.word	0x2001d638
2400404c:	2001d600 	.word	0x2001d600
24004050:	3e4ccccd 	.word	0x3e4ccccd
24004054:	3e638e39 	.word	0x3e638e39
24004058:	f010 ff64 	bl	24014f24 <tCycle_init>
			tCycle_setSampleRate(&mod1[i][v], SAMPLE_RATE * OVERSAMPLE);
2400405c:	eeb0 0a48 	vmov.f32	s0, s16
24004060:	4640      	mov	r0, r8
24004062:	f010 ffdf 	bl	24015024 <tCycle_setSampleRate>
			tCycle_init(&mod2[i][v], &leaf);
24004066:	4621      	mov	r1, r4
24004068:	4648      	mov	r0, r9
2400406a:	f010 ff5b 	bl	24014f24 <tCycle_init>
			tCycle_setSampleRate(&mod2[i][v], SAMPLE_RATE * OVERSAMPLE);
2400406e:	4648      	mov	r0, r9
24004070:	eeb0 0a48 	vmov.f32	s0, s16
24004074:	f010 ffd6 	bl	24015024 <tCycle_setSampleRate>
			tCycle_setFreq(&mod1[i][v], 0.2f);
24004078:	4640      	mov	r0, r8
2400407a:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 24004050 <audioInitSynth+0x484>
2400407e:	f010 ffb3 	bl	24014fe8 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
24004082:	4648      	mov	r0, r9
24004084:	ed1f 0a0d 	vldr	s0, [pc, #-52]	; 24004054 <audioInitSynth+0x488>
24004088:	f010 ffae 	bl	24014fe8 <tCycle_setFreq>
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);
2400408c:	4b69      	ldr	r3, [pc, #420]	; (24004234 <audioInitSynth+0x668>)
2400408e:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
24004092:	4622      	mov	r2, r4
24004094:	eb03 0805 	add.w	r8, r3, r5
24004098:	4b67      	ldr	r3, [pc, #412]	; (24004238 <audioInitSynth+0x66c>)
2400409a:	eef0 0a68 	vmov.f32	s1, s17
2400409e:	ed9f 0a67 	vldr	s0, [pc, #412]	; 2400423c <audioInitSynth+0x670>
240040a2:	1958      	adds	r0, r3, r5
240040a4:	2100      	movs	r1, #0
240040a6:	f00d f805 	bl	240110b4 <tFeedbackLeveler_init>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
240040aa:	4b65      	ldr	r3, [pc, #404]	; (24004240 <audioInitSynth+0x674>)
240040ac:	eef0 0a69 	vmov.f32	s1, s19
240040b0:	4622      	mov	r2, r4
240040b2:	2101      	movs	r1, #1
240040b4:	4640      	mov	r0, r8
240040b6:	eeb0 0a49 	vmov.f32	s0, s18
240040ba:	eb03 0905 	add.w	r9, r3, r5
240040be:	f00d ff25 	bl	24011f0c <tSVF_init>
			tSVF_setSampleRate(&FXlowpass[i][v],SAMPLE_RATE * OVERSAMPLE);
240040c2:	4640      	mov	r0, r8
240040c4:	eeb0 0a48 	vmov.f32	s0, s16
240040c8:	f00e f902 	bl	240122d0 <tSVF_setSampleRate>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
240040cc:	4b5d      	ldr	r3, [pc, #372]	; (24004244 <audioInitSynth+0x678>)
240040ce:	eef0 0a69 	vmov.f32	s1, s19
240040d2:	4622      	mov	r2, r4
240040d4:	2100      	movs	r1, #0
240040d6:	4648      	mov	r0, r9
240040d8:	eeb0 0a49 	vmov.f32	s0, s18
240040dc:	eb03 0805 	add.w	r8, r3, r5
240040e0:	f00d ff14 	bl	24011f0c <tSVF_init>
			tSVF_setSampleRate(&FXhighpass[i][v],SAMPLE_RATE * OVERSAMPLE);
240040e4:	4648      	mov	r0, r9
240040e6:	eeb0 0a48 	vmov.f32	s0, s16
240040ea:	f00e f8f1 	bl	240122d0 <tSVF_setSampleRate>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
240040ee:	4b56      	ldr	r3, [pc, #344]	; (24004248 <audioInitSynth+0x67c>)
240040f0:	4622      	mov	r2, r4
240040f2:	eef0 0a69 	vmov.f32	s1, s19
240040f6:	2102      	movs	r1, #2
240040f8:	4640      	mov	r0, r8
240040fa:	eeb0 0a49 	vmov.f32	s0, s18
240040fe:	eb03 0905 	add.w	r9, r3, r5
24004102:	f00d ff03 	bl	24011f0c <tSVF_init>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
24004106:	4640      	mov	r0, r8
24004108:	eeb0 0a48 	vmov.f32	s0, s16
2400410c:	f00e f8e0 	bl	240122d0 <tSVF_setSampleRate>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
24004110:	4b4e      	ldr	r3, [pc, #312]	; (2400424c <audioInitSynth+0x680>)
24004112:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24004116:	4621      	mov	r1, r4
24004118:	4648      	mov	r0, r9
2400411a:	eeb0 0a49 	vmov.f32	s0, s18
2400411e:	eb03 0805 	add.w	r8, r3, r5
24004122:	f00f fadb 	bl	240136dc <tDiodeFilter_init>
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
24004126:	4648      	mov	r0, r9
24004128:	eeb0 0a48 	vmov.f32	s0, s16
2400412c:	f00f ff6c 	bl	24014008 <tDiodeFilter_setSampleRate>
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
24004130:	4b47      	ldr	r3, [pc, #284]	; (24004250 <audioInitSynth+0x684>)
24004132:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24004136:	eddf 0a47 	vldr	s1, [pc, #284]	; 24004254 <audioInitSynth+0x688>
2400413a:	4621      	mov	r1, r4
2400413c:	4640      	mov	r0, r8
2400413e:	eeb0 0a49 	vmov.f32	s0, s18
24004142:	eb03 0905 	add.w	r9, r3, r5
24004146:	f00f f90b 	bl	24013360 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
2400414a:	4640      	mov	r0, r8
2400414c:	eeb0 0a48 	vmov.f32	s0, s16
24004150:	f00f f90a 	bl	24013368 <tVZFilterBell_setSampleRate>
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
24004154:	4b40      	ldr	r3, [pc, #256]	; (24004258 <audioInitSynth+0x68c>)
24004156:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2400415a:	4621      	mov	r1, r4
2400415c:	eef0 0a6a 	vmov.f32	s1, s21
24004160:	4648      	mov	r0, r9
24004162:	eeb0 0a49 	vmov.f32	s0, s18
24004166:	eb03 0805 	add.w	r8, r3, r5
2400416a:	f00e fdef 	bl	24012d4c <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], SAMPLE_RATE * OVERSAMPLE);
2400416e:	4648      	mov	r0, r9
24004170:	eeb0 0a48 	vmov.f32	s0, s16
24004174:	f00e fdee 	bl	24012d54 <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&FXVZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
24004178:	4b38      	ldr	r3, [pc, #224]	; (2400425c <audioInitSynth+0x690>)
2400417a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2400417e:	4621      	mov	r1, r4
24004180:	eef0 0a6a 	vmov.f32	s1, s21
24004184:	4640      	mov	r0, r8
24004186:	eeb0 0a49 	vmov.f32	s0, s18
2400418a:	eb03 0905 	add.w	r9, r3, r5
2400418e:	f00e ff51 	bl	24013034 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], SAMPLE_RATE * OVERSAMPLE);
24004192:	4640      	mov	r0, r8
24004194:	eeb0 0a48 	vmov.f32	s0, s16
24004198:	f00e ff50 	bl	2401303c <tVZFilterHS_setSampleRate>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
2400419c:	4b30      	ldr	r3, [pc, #192]	; (24004260 <audioInitSynth+0x694>)
2400419e:	4622      	mov	r2, r4
240041a0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240041a4:	eb03 0805 	add.w	r8, r3, r5
240041a8:	2104      	movs	r1, #4
240041aa:	eeb0 0a49 	vmov.f32	s0, s18
240041ae:	4648      	mov	r0, r9
240041b0:	f00e fb26 	bl	24012800 <tVZFilter_init>
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
240041b4:	eeb0 0a48 	vmov.f32	s0, s16
240041b8:	4648      	mov	r0, r9
		for (int i = 0; i < NUM_EFFECT; i++)
240041ba:	3508      	adds	r5, #8
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
240041bc:	f00e fd14 	bl	24012be8 <tVZFilter_setSampleRate>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
240041c0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
240041c4:	eeb0 0a49 	vmov.f32	s0, s18
240041c8:	4621      	mov	r1, r4
240041ca:	4640      	mov	r0, r8
240041cc:	f00f ff36 	bl	2401403c <tLadderFilter_init>
			tLadderFilter_setSampleRate(&FXLadderfilter[i][v], SAMPLE_RATE * OVERSAMPLE);
240041d0:	eeb0 0a48 	vmov.f32	s0, s16
240041d4:	4640      	mov	r0, r8
240041d6:	f010 f8f9 	bl	240143cc <tLadderFilter_setSampleRate>
		for (int i = 0; i < NUM_EFFECT; i++)
240041da:	42ae      	cmp	r6, r5
240041dc:	f47f ae42 	bne.w	24003e64 <audioInitSynth+0x298>
240041e0:	9e05      	ldr	r6, [sp, #20]
240041e2:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.01f, &leaf);
240041e6:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 24004264 <audioInitSynth+0x698>
240041ea:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
240041ec:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.01f, &leaf);
240041ee:	eef0 0a68 	vmov.f32	s1, s17
240041f2:	4621      	mov	r1, r4
240041f4:	eeb0 0a48 	vmov.f32	s0, s16
240041f8:	f00d fb00 	bl	240117fc <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
240041fc:	45ab      	cmp	fp, r5
240041fe:	d1f4      	bne.n	240041ea <audioInitSynth+0x61e>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004200:	9b02      	ldr	r3, [sp, #8]
		}

		//arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
		//arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
24004202:	4622      	mov	r2, r4
24004204:	eddf 0a18 	vldr	s1, [pc, #96]	; 24004268 <audioInitSynth+0x69c>
24004208:	2101      	movs	r1, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
2400420a:	3304      	adds	r3, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
2400420c:	ed9f 0a17 	vldr	s0, [pc, #92]	; 2400426c <audioInitSynth+0x6a0>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004210:	f10b 0b04 	add.w	fp, fp, #4
24004214:	9302      	str	r3, [sp, #8]
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
24004216:	4b16      	ldr	r3, [pc, #88]	; (24004270 <audioInitSynth+0x6a4>)
24004218:	1998      	adds	r0, r3, r6
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
2400421a:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
2400421c:	f00d fe76 	bl	24011f0c <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004220:	9b03      	ldr	r3, [sp, #12]
24004222:	b123      	cbz	r3, 2400422e <audioInitSynth+0x662>
	}

}
24004224:	b007      	add	sp, #28
24004226:	ecbd 8b0a 	vpop	{d8-d12}
2400422a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2400422e:	2301      	movs	r3, #1
24004230:	9303      	str	r3, [sp, #12]
24004232:	e4e5      	b.n	24003c00 <audioInitSynth+0x34>
24004234:	2001d1a0 	.word	0x2001d1a0
24004238:	2001d33c 	.word	0x2001d33c
2400423c:	3f7d70a4 	.word	0x3f7d70a4
24004240:	2001d180 	.word	0x2001d180
24004244:	2001d140 	.word	0x2001d140
24004248:	2001d160 	.word	0x2001d160
2400424c:	2001d120 	.word	0x2001d120
24004250:	2001d100 	.word	0x2001d100
24004254:	3fcccccd 	.word	0x3fcccccd
24004258:	2001d0e0 	.word	0x2001d0e0
2400425c:	2001d0c0 	.word	0x2001d0c0
24004260:	2001d0a0 	.word	0x2001d0a0
24004264:	00000000 	.word	0x00000000
24004268:	3e99999a 	.word	0x3e99999a
2400426c:	46947000 	.word	0x46947000
24004270:	2001d384 	.word	0x2001d384

24004274 <audioFreeSynth>:

void  audioFreeSynth()
{
24004274:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{
		//for (int i = 0; i < NUM_EFFECT; i++)
		{
			tTapeDelay_free(&tapeDelay[v]);
24004276:	4e0b      	ldr	r6, [pc, #44]	; (240042a4 <audioFreeSynth+0x30>)
			tLinearDelay_free(&delay2[v]);
24004278:	4d0b      	ldr	r5, [pc, #44]	; (240042a8 <audioFreeSynth+0x34>)
			tLinearDelay_free(&delay1[v]);
2400427a:	4c0c      	ldr	r4, [pc, #48]	; (240042ac <audioFreeSynth+0x38>)
			tTapeDelay_free(&tapeDelay[v]);
2400427c:	4630      	mov	r0, r6
2400427e:	f00c fbe3 	bl	24010a48 <tTapeDelay_free>
			tLinearDelay_free(&delay2[v]);
24004282:	4628      	mov	r0, r5
24004284:	f00c f944 	bl	24010510 <tLinearDelay_free>
			tLinearDelay_free(&delay1[v]);
24004288:	4620      	mov	r0, r4
2400428a:	f00c f941 	bl	24010510 <tLinearDelay_free>
			tTapeDelay_free(&tapeDelay[v]);
2400428e:	1d30      	adds	r0, r6, #4
24004290:	f00c fbda 	bl	24010a48 <tTapeDelay_free>
			tLinearDelay_free(&delay2[v]);
24004294:	1d28      	adds	r0, r5, #4
24004296:	f00c f93b 	bl	24010510 <tLinearDelay_free>
			tLinearDelay_free(&delay1[v]);
2400429a:	1d20      	adds	r0, r4, #4
		}
	}
}
2400429c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			tLinearDelay_free(&delay1[v]);
240042a0:	f00c b936 	b.w	24010510 <tLinearDelay_free>
240042a4:	2001d9dc 	.word	0x2001d9dc
240042a8:	2001d2d0 	.word	0x2001d2d0
240042ac:	2001d2c8 	.word	0x2001d2c8

240042b0 <audioSwitchToSynth>:

void  audioSwitchToSynth()
{
240042b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (whichStringModelLoaded != SynthLoaded)
240042b4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 24004394 <audioSwitchToSynth+0xe4>
{
240042b8:	ed2d 8b02 	vpush	{d8}
	if (whichStringModelLoaded != SynthLoaded)
240042bc:	f898 3000 	ldrb.w	r3, [r8]
240042c0:	2b04      	cmp	r3, #4
240042c2:	d02e      	beq.n	24004322 <audioSwitchToSynth+0x72>
	{
		if (whichStringModelLoaded == String1Loaded)
240042c4:	2b01      	cmp	r3, #1
240042c6:	d048      	beq.n	2400435a <audioSwitchToSynth+0xaa>
		{
			audioFreeString1();
		}
		if (whichStringModelLoaded == String2Loaded)
240042c8:	2b02      	cmp	r3, #2
240042ca:	d04c      	beq.n	24004366 <audioSwitchToSynth+0xb6>
240042cc:	4c27      	ldr	r4, [pc, #156]	; (2400436c <audioSwitchToSynth+0xbc>)
240042ce:	4f28      	ldr	r7, [pc, #160]	; (24004370 <audioSwitchToSynth+0xc0>)
240042d0:	4e28      	ldr	r6, [pc, #160]	; (24004374 <audioSwitchToSynth+0xc4>)
240042d2:	f104 0908 	add.w	r9, r4, #8
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
		{
			//for (int i = 0; i < NUM_EFFECT; i++)
			{

				tLinearDelay_initToPool(&delay1[v], 4000.0f, 4096, &mediumPool);
240042d6:	4d28      	ldr	r5, [pc, #160]	; (24004378 <audioSwitchToSynth+0xc8>)
240042d8:	ed9f 8a28 	vldr	s16, [pc, #160]	; 2400437c <audioSwitchToSynth+0xcc>
				tLinearDelay_initToPool(&delay2[v], 4000.0f, 4096, &mediumPool);
				tTapeDelay_initToPool(&tapeDelay[v], 15000.0f, 20000, &mediumPool);
240042dc:	eddf 8a28 	vldr	s17, [pc, #160]	; 24004380 <audioSwitchToSynth+0xd0>
				tLinearDelay_initToPool(&delay1[v], 4000.0f, 4096, &mediumPool);
240042e0:	4620      	mov	r0, r4
240042e2:	eeb0 0a48 	vmov.f32	s0, s16
240042e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240042ea:	462a      	mov	r2, r5
240042ec:	f00c f8a2 	bl	24010434 <tLinearDelay_initToPool>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
240042f0:	3404      	adds	r4, #4
				tLinearDelay_initToPool(&delay2[v], 4000.0f, 4096, &mediumPool);
240042f2:	4638      	mov	r0, r7
240042f4:	eeb0 0a48 	vmov.f32	s0, s16
240042f8:	462a      	mov	r2, r5
240042fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
240042fe:	f00c f899 	bl	24010434 <tLinearDelay_initToPool>
				tTapeDelay_initToPool(&tapeDelay[v], 15000.0f, 20000, &mediumPool);
24004302:	4630      	mov	r0, r6
24004304:	eeb0 0a68 	vmov.f32	s0, s17
24004308:	462a      	mov	r2, r5
2400430a:	f644 6120 	movw	r1, #20000	; 0x4e20
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
2400430e:	3704      	adds	r7, #4
				tTapeDelay_initToPool(&tapeDelay[v], 15000.0f, 20000, &mediumPool);
24004310:	f00c fb6c 	bl	240109ec <tTapeDelay_initToPool>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
24004314:	454c      	cmp	r4, r9
24004316:	f106 0604 	add.w	r6, r6, #4
2400431a:	d1e1      	bne.n	240042e0 <audioSwitchToSynth+0x30>
			}
		}
		whichStringModelLoaded = SynthLoaded;
2400431c:	2304      	movs	r3, #4
2400431e:	f888 3000 	strb.w	r3, [r8]
24004322:	4c18      	ldr	r4, [pc, #96]	; (24004384 <audioSwitchToSynth+0xd4>)
{
24004324:	2500      	movs	r5, #0
24004326:	f8df 8070 	ldr.w	r8, [pc, #112]	; 24004398 <audioSwitchToSynth+0xe8>
	}
	for (int i = 0; i < 20; i++)
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
		//tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
		knobFrozen[i] = 1;
2400432a:	2601      	movs	r6, #1
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
2400432c:	ed9f 8a16 	vldr	s16, [pc, #88]	; 24004388 <audioSwitchToSynth+0xd8>
24004330:	f104 0750 	add.w	r7, r4, #80	; 0x50
24004334:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
24004336:	3404      	adds	r4, #4
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
24004338:	eeb0 0a48 	vmov.f32	s0, s16
2400433c:	f00d faae 	bl	2401189c <tExpSmooth_setFactor>
	for (int i = 0; i < 20; i++)
24004340:	42a7      	cmp	r7, r4
		knobFrozen[i] = 1;
24004342:	f808 6005 	strb.w	r6, [r8, r5]
	for (int i = 0; i < 20; i++)
24004346:	f105 0501 	add.w	r5, r5, #1
2400434a:	d1f3      	bne.n	24004334 <audioSwitchToSynth+0x84>
	}
	audioFrameFunction = audioFrameSynth;
2400434c:	4b0f      	ldr	r3, [pc, #60]	; (2400438c <audioSwitchToSynth+0xdc>)
2400434e:	4a10      	ldr	r2, [pc, #64]	; (24004390 <audioSwitchToSynth+0xe0>)
24004350:	601a      	str	r2, [r3, #0]
}
24004352:	ecbd 8b02 	vpop	{d8}
24004356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			audioFreeString1();
2400435a:	f027 f9c1 	bl	2402b6e0 <__audioFreeString1_veneer>
		if (whichStringModelLoaded == String2Loaded)
2400435e:	f898 3000 	ldrb.w	r3, [r8]
24004362:	2b02      	cmp	r3, #2
24004364:	d1b2      	bne.n	240042cc <audioSwitchToSynth+0x1c>
			audioFreeString2();
24004366:	f027 f9b3 	bl	2402b6d0 <__audioFreeString2_veneer>
2400436a:	e7af      	b.n	240042cc <audioSwitchToSynth+0x1c>
2400436c:	2001d2c8 	.word	0x2001d2c8
24004370:	2001d2d0 	.word	0x2001d2d0
24004374:	2001d9dc 	.word	0x2001d9dc
24004378:	200052e0 	.word	0x200052e0
2400437c:	457a0000 	.word	0x457a0000
24004380:	466a6000 	.word	0x466a6000
24004384:	20005238 	.word	0x20005238
24004388:	3a83126f 	.word	0x3a83126f
2400438c:	2000118c 	.word	0x2000118c
24004390:	0000b341 	.word	0x0000b341
24004394:	20014261 	.word	0x20014261
24004398:	200051d4 	.word	0x200051d4

2400439c <changeOversampling>:



void changeOversampling(uint32_t newOS)
{
	if (newOS != prevOversample)
2400439c:	4b8f      	ldr	r3, [pc, #572]	; (240045dc <changeOversampling+0x240>)
{
2400439e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240043a2:	ed2d 8b02 	vpush	{d8}
	if (newOS != prevOversample)
240043a6:	681b      	ldr	r3, [r3, #0]
{
240043a8:	b089      	sub	sp, #36	; 0x24
	if (newOS != prevOversample)
240043aa:	4283      	cmp	r3, r0
{
240043ac:	9007      	str	r0, [sp, #28]
	if (newOS != prevOversample)
240043ae:	f000 810c 	beq.w	240045ca <changeOversampling+0x22e>
	{
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
		for (int v = 0; v < numStringsThisBoard; v++)
240043b2:	4b8b      	ldr	r3, [pc, #556]	; (240045e0 <changeOversampling+0x244>)
240043b4:	781b      	ldrb	r3, [r3, #0]
240043b6:	2b00      	cmp	r3, #0
240043b8:	f000 8107 	beq.w	240045ca <changeOversampling+0x22e>
240043bc:	4603      	mov	r3, r0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
240043be:	eddf 7a89 	vldr	s15, [pc, #548]	; 240045e4 <changeOversampling+0x248>
		{
			for (int i = 0; i < NUM_EFFECT; i++)
			{
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
240043c2:	2200      	movs	r2, #0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
240043c4:	3301      	adds	r3, #1
		for (int v = 0; v < numStringsThisBoard; v++)
240043c6:	9205      	str	r2, [sp, #20]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
240043c8:	ee07 3a10 	vmov	s14, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
240043cc:	2320      	movs	r3, #32
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
240043ce:	eeb8 8a47 	vcvt.f32.u32	s16, s14
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
240043d2:	9304      	str	r3, [sp, #16]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
240043d4:	ee28 8a27 	vmul.f32	s16, s16, s15
240043d8:	eebc 8ac8 	vcvt.u32.f32	s16, s16
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
240043dc:	eeb8 8a48 	vcvt.f32.u32	s16, s16
240043e0:	4b81      	ldr	r3, [pc, #516]	; (240045e8 <changeOversampling+0x24c>)
		for (int v = 0; v < numStringsThisBoard; v++)
240043e2:	4614      	mov	r4, r2
240043e4:	9904      	ldr	r1, [sp, #16]
240043e6:	9206      	str	r2, [sp, #24]
240043e8:	eb03 0a01 	add.w	sl, r3, r1
240043ec:	4b7f      	ldr	r3, [pc, #508]	; (240045ec <changeOversampling+0x250>)
240043ee:	eb03 0902 	add.w	r9, r3, r2
240043f2:	4b7f      	ldr	r3, [pc, #508]	; (240045f0 <changeOversampling+0x254>)
240043f4:	eb03 0802 	add.w	r8, r3, r2
240043f8:	4b7e      	ldr	r3, [pc, #504]	; (240045f4 <changeOversampling+0x258>)
240043fa:	189f      	adds	r7, r3, r2
240043fc:	4b7e      	ldr	r3, [pc, #504]	; (240045f8 <changeOversampling+0x25c>)
240043fe:	189e      	adds	r6, r3, r2
24004400:	4b7e      	ldr	r3, [pc, #504]	; (240045fc <changeOversampling+0x260>)
24004402:	189d      	adds	r5, r3, r2
24004404:	4b7e      	ldr	r3, [pc, #504]	; (24004600 <changeOversampling+0x264>)
24004406:	4413      	add	r3, r2
24004408:	469b      	mov	fp, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
2400440a:	4b7e      	ldr	r3, [pc, #504]	; (24004604 <changeOversampling+0x268>)
2400440c:	eeb0 0a48 	vmov.f32	s0, s16
24004410:	1918      	adds	r0, r3, r4
24004412:	f00d ffc7 	bl	240123a4 <tHighpass_setSampleRate>
				tHighpass_setSampleRate(&dcBlock2[i][v], osMult);
24004416:	4b7c      	ldr	r3, [pc, #496]	; (24004608 <changeOversampling+0x26c>)
24004418:	eeb0 0a48 	vmov.f32	s0, s16
2400441c:	1918      	adds	r0, r3, r4
2400441e:	f00d ffc1 	bl	240123a4 <tHighpass_setSampleRate>
				tVZFilterLS_setSampleRate(&shelf1[i][v], osMult);
24004422:	4650      	mov	r0, sl
24004424:	eeb0 0a48 	vmov.f32	s0, s16
24004428:	f00e fc94 	bl	24012d54 <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
2400442c:	f8da 3000 	ldr.w	r3, [sl]
24004430:	4650      	mov	r0, sl
			for (int i = 0; i < NUM_EFFECT; i++)
24004432:	f10a 0a08 	add.w	sl, sl, #8
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
24004436:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
2400443a:	f00e fcd9 	bl	24012df0 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&shelf2[i][v], osMult);
2400443e:	4648      	mov	r0, r9
24004440:	eeb0 0a48 	vmov.f32	s0, s16
24004444:	f00e fdfa 	bl	2401303c <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
24004448:	f8d9 3000 	ldr.w	r3, [r9]
2400444c:	4648      	mov	r0, r9
			for (int i = 0; i < NUM_EFFECT; i++)
2400444e:	f109 0908 	add.w	r9, r9, #8
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
24004452:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
24004456:	f00e fe3f 	bl	240130d8 <tVZFilterHS_setFreqFast>
				tVZFilterBell_setSampleRate(&bell1[i][v], osMult);
2400445a:	4640      	mov	r0, r8
2400445c:	eeb0 0a48 	vmov.f32	s0, s16
24004460:	f00e ff82 	bl	24013368 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
24004464:	f8d8 3000 	ldr.w	r3, [r8]
24004468:	4640      	mov	r0, r8
			for (int i = 0; i < NUM_EFFECT; i++)
2400446a:	f108 0808 	add.w	r8, r8, #8
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
2400446e:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
24004472:	f00f f86b 	bl	2401354c <tVZFilterBell_setFreqFast>
				tCompressor_setSampleRate(&comp[i][v], osMult);
24004476:	4b65      	ldr	r3, [pc, #404]	; (2400460c <changeOversampling+0x270>)
24004478:	eeb0 0a48 	vmov.f32	s0, s16
2400447c:	1918      	adds	r0, r3, r4
2400447e:	f00c fe15 	bl	240110ac <tCompressor_setSampleRate>
				tCycle_setSampleRate(&mod1[i][v], osMult);
24004482:	4b63      	ldr	r3, [pc, #396]	; (24004610 <changeOversampling+0x274>)
24004484:	eeb0 0a48 	vmov.f32	s0, s16
24004488:	1918      	adds	r0, r3, r4
2400448a:	f010 fdcb 	bl	24015024 <tCycle_setSampleRate>
				tCycle_setSampleRate(&mod2[i][v], osMult);
2400448e:	4b61      	ldr	r3, [pc, #388]	; (24004614 <changeOversampling+0x278>)
24004490:	eeb0 0a48 	vmov.f32	s0, s16
24004494:	1918      	adds	r0, r3, r4
24004496:	f010 fdc5 	bl	24015024 <tCycle_setSampleRate>
				tSVF_setSampleRate(&FXlowpass[i][v],osMult);
2400449a:	4638      	mov	r0, r7
2400449c:	eeb0 0a48 	vmov.f32	s0, s16
240044a0:	f00d ff16 	bl	240122d0 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
240044a4:	683b      	ldr	r3, [r7, #0]
240044a6:	4638      	mov	r0, r7
			for (int i = 0; i < NUM_EFFECT; i++)
240044a8:	3708      	adds	r7, #8
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
240044aa:	ed93 0a04 	vldr	s0, [r3, #16]
240044ae:	f00d feaf 	bl	24012210 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXhighpass[i][v],osMult);
240044b2:	4630      	mov	r0, r6
240044b4:	eeb0 0a48 	vmov.f32	s0, s16
240044b8:	f00d ff0a 	bl	240122d0 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
240044bc:	6833      	ldr	r3, [r6, #0]
240044be:	4630      	mov	r0, r6
			for (int i = 0; i < NUM_EFFECT; i++)
240044c0:	3608      	adds	r6, #8
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
240044c2:	ed93 0a04 	vldr	s0, [r3, #16]
240044c6:	f00d fea3 	bl	24012210 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXbandpass[i][v],osMult);
240044ca:	4628      	mov	r0, r5
240044cc:	eeb0 0a48 	vmov.f32	s0, s16
240044d0:	f00d fefe 	bl	240122d0 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
240044d4:	682b      	ldr	r3, [r5, #0]
240044d6:	4628      	mov	r0, r5
			for (int i = 0; i < NUM_EFFECT; i++)
240044d8:	3508      	adds	r5, #8
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
240044da:	ed93 0a04 	vldr	s0, [r3, #16]
240044de:	f00d fe97 	bl	24012210 <tSVF_setFreqFast>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], osMult);
240044e2:	4658      	mov	r0, fp
240044e4:	eeb0 0a48 	vmov.f32	s0, s16
240044e8:	f00f fd8e 	bl	24014008 <tDiodeFilter_setSampleRate>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
240044ec:	f8db 3000 	ldr.w	r3, [fp]
240044f0:	4658      	mov	r0, fp
			for (int i = 0; i < NUM_EFFECT; i++)
240044f2:	f10b 0b08 	add.w	fp, fp, #8
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
240044f6:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
240044fa:	4b47      	ldr	r3, [pc, #284]	; (24004618 <changeOversampling+0x27c>)
240044fc:	4423      	add	r3, r4
240044fe:	9300      	str	r3, [sp, #0]
24004500:	f00f fd82 	bl	24014008 <tDiodeFilter_setSampleRate>
				tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], osMult);
24004504:	9b00      	ldr	r3, [sp, #0]
24004506:	eeb0 0a48 	vmov.f32	s0, s16
2400450a:	4618      	mov	r0, r3
2400450c:	f00e ff2c 	bl	24013368 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&FXVZfilterPeak[i][v], FXVZfilterPeak[i][v]->cutoffMIDI);
24004510:	9b00      	ldr	r3, [sp, #0]
24004512:	4618      	mov	r0, r3
24004514:	4b40      	ldr	r3, [pc, #256]	; (24004618 <changeOversampling+0x27c>)
24004516:	591b      	ldr	r3, [r3, r4]
24004518:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
2400451c:	f00f f816 	bl	2401354c <tVZFilterBell_setFreqFast>
				tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], osMult);
24004520:	4a3e      	ldr	r2, [pc, #248]	; (2400461c <changeOversampling+0x280>)
24004522:	4b3f      	ldr	r3, [pc, #252]	; (24004620 <changeOversampling+0x284>)
24004524:	eeb0 0a48 	vmov.f32	s0, s16
24004528:	1911      	adds	r1, r2, r4
2400452a:	1918      	adds	r0, r3, r4
2400452c:	4b3d      	ldr	r3, [pc, #244]	; (24004624 <changeOversampling+0x288>)
2400452e:	9103      	str	r1, [sp, #12]
24004530:	493d      	ldr	r1, [pc, #244]	; (24004628 <changeOversampling+0x28c>)
24004532:	4423      	add	r3, r4
24004534:	190a      	adds	r2, r1, r4
24004536:	e9cd 0300 	strd	r0, r3, [sp]
2400453a:	9202      	str	r2, [sp, #8]
2400453c:	f00e fc0a 	bl	24012d54 <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&FXVZfilterLS[i][v], FXVZfilterLS[i][v]->cutoffMIDI);
24004540:	4b37      	ldr	r3, [pc, #220]	; (24004620 <changeOversampling+0x284>)
24004542:	9800      	ldr	r0, [sp, #0]
24004544:	591b      	ldr	r3, [r3, r4]
24004546:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
2400454a:	f00e fc51 	bl	24012df0 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], osMult);
2400454e:	9903      	ldr	r1, [sp, #12]
24004550:	eeb0 0a48 	vmov.f32	s0, s16
24004554:	4608      	mov	r0, r1
24004556:	9100      	str	r1, [sp, #0]
24004558:	f00e fd70 	bl	2401303c <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&FXVZfilterHS[i][v], FXVZfilterHS[i][v]->cutoffMIDI);
2400455c:	9900      	ldr	r1, [sp, #0]
2400455e:	4a2f      	ldr	r2, [pc, #188]	; (2400461c <changeOversampling+0x280>)
24004560:	4608      	mov	r0, r1
24004562:	5911      	ldr	r1, [r2, r4]
24004564:	ed91 0a11 	vldr	s0, [r1, #68]	; 0x44
24004568:	f00e fdb6 	bl	240130d8 <tVZFilterHS_setFreqFast>
				tVZFilter_setSampleRate(&FXVZfilterBR[i][v], osMult);
2400456c:	9a02      	ldr	r2, [sp, #8]
2400456e:	eeb0 0a48 	vmov.f32	s0, s16
24004572:	4610      	mov	r0, r2
24004574:	9200      	str	r2, [sp, #0]
24004576:	f00e fb37 	bl	24012be8 <tVZFilter_setSampleRate>
				tVZFilter_setFreq(&FXVZfilterBR[i][v], FXVZfilterBR[i][v]->fc);
2400457a:	492b      	ldr	r1, [pc, #172]	; (24004628 <changeOversampling+0x28c>)
2400457c:	9a00      	ldr	r2, [sp, #0]
2400457e:	4610      	mov	r0, r2
24004580:	590a      	ldr	r2, [r1, r4]
24004582:	ed92 0a0a 	vldr	s0, [r2, #40]	; 0x28
24004586:	f00e f93f 	bl	24012808 <tVZFilter_setFreq>
				tLadderFilter_setSampleRate(&FXLadderfilter[i][v], osMult);
2400458a:	9b01      	ldr	r3, [sp, #4]
2400458c:	eeb0 0a48 	vmov.f32	s0, s16
24004590:	4618      	mov	r0, r3
24004592:	9300      	str	r3, [sp, #0]
24004594:	f00f ff1a 	bl	240143cc <tLadderFilter_setSampleRate>
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
24004598:	9b00      	ldr	r3, [sp, #0]
2400459a:	4618      	mov	r0, r3
2400459c:	4b21      	ldr	r3, [pc, #132]	; (24004624 <changeOversampling+0x288>)
2400459e:	591b      	ldr	r3, [r3, r4]
			for (int i = 0; i < NUM_EFFECT; i++)
240045a0:	3408      	adds	r4, #8
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
240045a2:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
240045a6:	f00f fecf 	bl	24014348 <tLadderFilter_setFreqFast>
			for (int i = 0; i < NUM_EFFECT; i++)
240045aa:	9b04      	ldr	r3, [sp, #16]
240045ac:	429c      	cmp	r4, r3
240045ae:	f47f af2c 	bne.w	2400440a <changeOversampling+0x6e>
		for (int v = 0; v < numStringsThisBoard; v++)
240045b2:	3304      	adds	r3, #4
240045b4:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
240045b8:	9304      	str	r3, [sp, #16]
240045ba:	4b09      	ldr	r3, [pc, #36]	; (240045e0 <changeOversampling+0x244>)
240045bc:	3101      	adds	r1, #1
240045be:	3204      	adds	r2, #4
240045c0:	781b      	ldrb	r3, [r3, #0]
240045c2:	9105      	str	r1, [sp, #20]
240045c4:	428b      	cmp	r3, r1
240045c6:	f73f af0b 	bgt.w	240043e0 <changeOversampling+0x44>
			}
		}
	}
	prevOversample = newOS;
240045ca:	4b04      	ldr	r3, [pc, #16]	; (240045dc <changeOversampling+0x240>)
240045cc:	9a07      	ldr	r2, [sp, #28]
240045ce:	601a      	str	r2, [r3, #0]
}
240045d0:	b009      	add	sp, #36	; 0x24
240045d2:	ecbd 8b02 	vpop	{d8}
240045d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
240045da:	bf00      	nop
240045dc:	2001d7a0 	.word	0x2001d7a0
240045e0:	20000694 	.word	0x20000694
240045e4:	473b8000 	.word	0x473b8000
240045e8:	2001d81c 	.word	0x2001d81c
240045ec:	2001d85c 	.word	0x2001d85c
240045f0:	2001d248 	.word	0x2001d248
240045f4:	2001d1a0 	.word	0x2001d1a0
240045f8:	2001d180 	.word	0x2001d180
240045fc:	2001d140 	.word	0x2001d140
24004600:	2001d160 	.word	0x2001d160
24004604:	2001d288 	.word	0x2001d288
24004608:	2001d2a8 	.word	0x2001d2a8
2400460c:	2001d268 	.word	0x2001d268
24004610:	2001d618 	.word	0x2001d618
24004614:	2001d638 	.word	0x2001d638
24004618:	2001d120 	.word	0x2001d120
2400461c:	2001d0e0 	.word	0x2001d0e0
24004620:	2001d100 	.word	0x2001d100
24004624:	2001d0a0 	.word	0x2001d0a0
24004628:	2001d0c0 	.word	0x2001d0c0

2400462c <delayTick>:
}



float delayTick(float sample, int v, int string)
{
2400462c:	b570      	push	{r4, r5, r6, lr}
    sample *= param5[v][string];
2400462e:	eb01 0040 	add.w	r0, r1, r0, lsl #1

    sample = sample + (delayFB[v][string] * param2[v][string]);
24004632:	4d19      	ldr	r5, [pc, #100]	; (24004698 <delayTick+0x6c>)
24004634:	4a19      	ldr	r2, [pc, #100]	; (2400469c <delayTick+0x70>)
{
24004636:	460e      	mov	r6, r1
    sample = sample + (delayFB[v][string] * param2[v][string]);
24004638:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    sample *= param5[v][string];
2400463c:	4b18      	ldr	r3, [pc, #96]	; (240046a0 <delayTick+0x74>)
    sample = sample + (delayFB[v][string] * param2[v][string]);
2400463e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
24004642:	edd5 7a00 	vldr	s15, [r5]
    sample *= param5[v][string];
24004646:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
2400464a:	ed92 7a00 	vldr	s14, [r2]
    sample *= param5[v][string];
2400464e:	0084      	lsls	r4, r0, #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
24004650:	ee67 7a87 	vmul.f32	s15, s15, s14
24004654:	ed93 7a00 	vldr	s14, [r3]

    sample = fast_tanh5(sample);
24004658:	eee7 7a00 	vfma.f32	s15, s14, s0
2400465c:	eeb0 0a67 	vmov.f32	s0, s15
24004660:	f010 f8f6 	bl	24014850 <fast_tanh5>

    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
24004664:	480f      	ldr	r0, [pc, #60]	; (240046a4 <delayTick+0x78>)
24004666:	4420      	add	r0, r4
24004668:	f00c fd8c 	bl	24011184 <tFeedbackLeveler_tick>

    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[string], sample);
2400466c:	480e      	ldr	r0, [pc, #56]	; (240046a8 <delayTick+0x7c>)
2400466e:	eb00 0086 	add.w	r0, r0, r6, lsl #2
24004672:	f00c f9f5 	bl	24010a60 <tTapeDelay_tick>
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
24004676:	480d      	ldr	r0, [pc, #52]	; (240046ac <delayTick+0x80>)
    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[string], sample);
24004678:	ed85 0a00 	vstr	s0, [r5]
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
2400467c:	4420      	add	r0, r4
2400467e:	f00d fd59 	bl	24012134 <tSVF_tick>
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
24004682:	480b      	ldr	r0, [pc, #44]	; (240046b0 <delayTick+0x84>)
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
24004684:	ed85 0a00 	vstr	s0, [r5]
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
24004688:	4420      	add	r0, r4
2400468a:	f00d fd53 	bl	24012134 <tSVF_tick>
    sample = fast_tanh5(sample);
2400468e:	f010 f8df 	bl	24014850 <fast_tanh5>
    delayFB[v][string] = sample;
24004692:	ed85 0a00 	vstr	s0, [r5]
    return sample;
}
24004696:	bd70      	pop	{r4, r5, r6, pc}
24004698:	2001d2d8 	.word	0x2001d2d8
2400469c:	2001d6e8 	.word	0x2001d6e8
240046a0:	2001d748 	.word	0x2001d748
240046a4:	2001d33c 	.word	0x2001d33c
240046a8:	2001d9dc 	.word	0x2001d9dc
240046ac:	2001d1a0 	.word	0x2001d1a0
240046b0:	2001d180 	.word	0x2001d180

240046b4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
240046b4:	4930      	ldr	r1, [pc, #192]	; (24004778 <SystemInit+0xc4>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240046b6:	4a31      	ldr	r2, [pc, #196]	; (2400477c <SystemInit+0xc8>)
{
240046b8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
240046ba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
{
240046be:	b083      	sub	sp, #12
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
240046c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
240046c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240046c8:	6813      	ldr	r3, [r2, #0]
240046ca:	f003 030f 	and.w	r3, r3, #15
240046ce:	2b06      	cmp	r3, #6
240046d0:	d805      	bhi.n	240046de <SystemInit+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
240046d2:	6813      	ldr	r3, [r2, #0]
240046d4:	f023 030f 	bic.w	r3, r3, #15
240046d8:	f043 0307 	orr.w	r3, r3, #7
240046dc:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
240046de:	4b28      	ldr	r3, [pc, #160]	; (24004780 <SystemInit+0xcc>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
240046e0:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
240046e2:	4a28      	ldr	r2, [pc, #160]	; (24004784 <SystemInit+0xd0>)
  RCC->CR |= RCC_CR_HSION;
240046e4:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240046e6:	4825      	ldr	r0, [pc, #148]	; (2400477c <SystemInit+0xc8>)
  RCC->CR |= RCC_CR_HSION;
240046e8:	f041 0101 	orr.w	r1, r1, #1
240046ec:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
240046ee:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
240046f0:	6819      	ldr	r1, [r3, #0]
240046f2:	400a      	ands	r2, r1
240046f4:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
240046f6:	6803      	ldr	r3, [r0, #0]
240046f8:	071b      	lsls	r3, r3, #28
240046fa:	d505      	bpl.n	24004708 <SystemInit+0x54>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
240046fc:	6803      	ldr	r3, [r0, #0]
240046fe:	f023 030f 	bic.w	r3, r3, #15
24004702:	f043 0307 	orr.w	r3, r3, #7
24004706:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24004708:	4b1d      	ldr	r3, [pc, #116]	; (24004780 <SystemInit+0xcc>)
2400470a:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
2400470c:	491e      	ldr	r1, [pc, #120]	; (24004788 <SystemInit+0xd4>)
  RCC->PLLCKSELR = 0x02020200;
2400470e:	4c1f      	ldr	r4, [pc, #124]	; (2400478c <SystemInit+0xd8>)
  RCC->PLLCFGR = 0x01FF0000;
24004710:	481f      	ldr	r0, [pc, #124]	; (24004790 <SystemInit+0xdc>)
  RCC->D1CFGR = 0x00000000;
24004712:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
24004714:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
24004716:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
24004718:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
2400471a:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
2400471c:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
2400471e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24004720:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24004722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24004724:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24004726:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24004728:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
2400472a:	4c1a      	ldr	r4, [pc, #104]	; (24004794 <SystemInit+0xe0>)
  RCC->CR &= 0xFFFBFFFFU;
2400472c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24004730:	4919      	ldr	r1, [pc, #100]	; (24004798 <SystemInit+0xe4>)
  RCC->CR &= 0xFFFBFFFFU;
24004732:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
24004734:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24004736:	6823      	ldr	r3, [r4, #0]
24004738:	4019      	ands	r1, r3
2400473a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
2400473e:	d203      	bcs.n	24004748 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
24004740:	4b16      	ldr	r3, [pc, #88]	; (2400479c <SystemInit+0xe8>)
24004742:	2201      	movs	r2, #1
24004744:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24004748:	4b0d      	ldr	r3, [pc, #52]	; (24004780 <SystemInit+0xcc>)
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
2400474a:	f243 04d2 	movw	r4, #12498	; 0x30d2
2400474e:	4814      	ldr	r0, [pc, #80]	; (240047a0 <SystemInit+0xec>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24004750:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24004754:	4908      	ldr	r1, [pc, #32]	; (24004778 <SystemInit+0xc4>)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
24004756:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
2400475a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  tmpreg = RCC->AHB2ENR;
2400475e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
24004762:	9301      	str	r3, [sp, #4]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
24004764:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  (void) tmpreg;
24004768:	9a01      	ldr	r2, [sp, #4]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
2400476a:	6004      	str	r4, [r0, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
2400476c:	608b      	str	r3, [r1, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
2400476e:	b003      	add	sp, #12
24004770:	f85d 4b04 	ldr.w	r4, [sp], #4
24004774:	4770      	bx	lr
24004776:	bf00      	nop
24004778:	e000ed00 	.word	0xe000ed00
2400477c:	52002000 	.word	0x52002000
24004780:	58024400 	.word	0x58024400
24004784:	eaf6ed7f 	.word	0xeaf6ed7f
24004788:	01010280 	.word	0x01010280
2400478c:	02020200 	.word	0x02020200
24004790:	01ff0000 	.word	0x01ff0000
24004794:	5c001000 	.word	0x5c001000
24004798:	ffff0000 	.word	0xffff0000
2400479c:	51008000 	.word	0x51008000
240047a0:	52004000 	.word	0x52004000

240047a4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
240047a4:	4b0f      	ldr	r3, [pc, #60]	; (240047e4 <HAL_InitTick+0x40>)
240047a6:	781b      	ldrb	r3, [r3, #0]
240047a8:	b90b      	cbnz	r3, 240047ae <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
240047aa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
240047ac:	4770      	bx	lr
{
240047ae:	b510      	push	{r4, lr}
240047b0:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
240047b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
240047b6:	4a0c      	ldr	r2, [pc, #48]	; (240047e8 <HAL_InitTick+0x44>)
240047b8:	fbb0 f3f3 	udiv	r3, r0, r3
240047bc:	6810      	ldr	r0, [r2, #0]
240047be:	fbb0 f0f3 	udiv	r0, r0, r3
240047c2:	f000 f8cd 	bl	24004960 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
240047c6:	2c0f      	cmp	r4, #15
240047c8:	d800      	bhi.n	240047cc <HAL_InitTick+0x28>
240047ca:	b108      	cbz	r0, 240047d0 <HAL_InitTick+0x2c>
    return HAL_ERROR;
240047cc:	2001      	movs	r0, #1
}
240047ce:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
240047d0:	2200      	movs	r2, #0
240047d2:	4621      	mov	r1, r4
240047d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
240047d8:	f000 f876 	bl	240048c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
240047dc:	4b03      	ldr	r3, [pc, #12]	; (240047ec <HAL_InitTick+0x48>)
240047de:	2000      	movs	r0, #0
240047e0:	601c      	str	r4, [r3, #0]
}
240047e2:	bd10      	pop	{r4, pc}
240047e4:	20000934 	.word	0x20000934
240047e8:	200008ec 	.word	0x200008ec
240047ec:	20000938 	.word	0x20000938

240047f0 <HAL_Init>:
{
240047f0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
240047f2:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240047f4:	4c12      	ldr	r4, [pc, #72]	; (24004840 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
240047f6:	f000 f855 	bl	240048a4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240047fa:	f003 fae7 	bl	24007dcc <HAL_RCC_GetSysClockFreq>
240047fe:	4b11      	ldr	r3, [pc, #68]	; (24004844 <HAL_Init+0x54>)
24004800:	4911      	ldr	r1, [pc, #68]	; (24004848 <HAL_Init+0x58>)
24004802:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004804:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004806:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400480a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400480e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004810:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24004812:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
24004816:	490d      	ldr	r1, [pc, #52]	; (2400484c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004818:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400481c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400481e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
24004822:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24004824:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24004826:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24004828:	f7ff ffbc 	bl	240047a4 <HAL_InitTick>
2400482c:	b110      	cbz	r0, 24004834 <HAL_Init+0x44>
    return HAL_ERROR;
2400482e:	2401      	movs	r4, #1
}
24004830:	4620      	mov	r0, r4
24004832:	bd10      	pop	{r4, pc}
24004834:	4604      	mov	r4, r0
  HAL_MspInit();
24004836:	f7ff f947 	bl	24003ac8 <HAL_MspInit>
}
2400483a:	4620      	mov	r0, r4
2400483c:	bd10      	pop	{r4, pc}
2400483e:	bf00      	nop
24004840:	200008f0 	.word	0x200008f0
24004844:	58024400 	.word	0x58024400
24004848:	2401c830 	.word	0x2401c830
2400484c:	200008ec 	.word	0x200008ec

24004850 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
24004850:	4a03      	ldr	r2, [pc, #12]	; (24004860 <HAL_IncTick+0x10>)
24004852:	4b04      	ldr	r3, [pc, #16]	; (24004864 <HAL_IncTick+0x14>)
24004854:	6811      	ldr	r1, [r2, #0]
24004856:	781b      	ldrb	r3, [r3, #0]
24004858:	440b      	add	r3, r1
2400485a:	6013      	str	r3, [r2, #0]
}
2400485c:	4770      	bx	lr
2400485e:	bf00      	nop
24004860:	2001da5c 	.word	0x2001da5c
24004864:	20000934 	.word	0x20000934

24004868 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
24004868:	4b01      	ldr	r3, [pc, #4]	; (24004870 <HAL_GetTick+0x8>)
2400486a:	6818      	ldr	r0, [r3, #0]
}
2400486c:	4770      	bx	lr
2400486e:	bf00      	nop
24004870:	2001da5c 	.word	0x2001da5c

24004874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24004874:	b538      	push	{r3, r4, r5, lr}
24004876:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24004878:	f7ff fff6 	bl	24004868 <HAL_GetTick>
2400487c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
2400487e:	1c63      	adds	r3, r4, #1
24004880:	d002      	beq.n	24004888 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
24004882:	4b04      	ldr	r3, [pc, #16]	; (24004894 <HAL_Delay+0x20>)
24004884:	781b      	ldrb	r3, [r3, #0]
24004886:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
24004888:	f7ff ffee 	bl	24004868 <HAL_GetTick>
2400488c:	1b43      	subs	r3, r0, r5
2400488e:	42a3      	cmp	r3, r4
24004890:	d3fa      	bcc.n	24004888 <HAL_Delay+0x14>
  {
  }
}
24004892:	bd38      	pop	{r3, r4, r5, pc}
24004894:	20000934 	.word	0x20000934

24004898 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
24004898:	4b01      	ldr	r3, [pc, #4]	; (240048a0 <HAL_GetREVID+0x8>)
2400489a:	6818      	ldr	r0, [r3, #0]
}
2400489c:	0c00      	lsrs	r0, r0, #16
2400489e:	4770      	bx	lr
240048a0:	5c001000 	.word	0x5c001000

240048a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
240048a4:	4906      	ldr	r1, [pc, #24]	; (240048c0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
240048a6:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
240048aa:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
240048ac:	4b05      	ldr	r3, [pc, #20]	; (240048c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
240048ae:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
240048b0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
240048b4:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
240048b8:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
240048ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
240048bc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
240048be:	4770      	bx	lr
240048c0:	e000ed00 	.word	0xe000ed00
240048c4:	05fa0000 	.word	0x05fa0000

240048c8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
240048c8:	4b1b      	ldr	r3, [pc, #108]	; (24004938 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
240048ca:	b500      	push	{lr}
240048cc:	68db      	ldr	r3, [r3, #12]
240048ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
240048d2:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
240048d6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
240048da:	f1be 0f04 	cmp.w	lr, #4
240048de:	bf28      	it	cs
240048e0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
240048e4:	f1bc 0f06 	cmp.w	ip, #6
240048e8:	d91a      	bls.n	24004920 <HAL_NVIC_SetPriority+0x58>
240048ea:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
240048ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
240048f0:	fa0c fc03 	lsl.w	ip, ip, r3
240048f4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
240048f8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
240048fc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
240048fe:	fa0c fc0e 	lsl.w	ip, ip, lr
24004902:	ea21 010c 	bic.w	r1, r1, ip
24004906:	fa01 f103 	lsl.w	r1, r1, r3
2400490a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
2400490e:	db0a      	blt.n	24004926 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004910:	0109      	lsls	r1, r1, #4
24004912:	4b0a      	ldr	r3, [pc, #40]	; (2400493c <HAL_NVIC_SetPriority+0x74>)
24004914:	b2c9      	uxtb	r1, r1
24004916:	4403      	add	r3, r0
24004918:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
2400491c:	f85d fb04 	ldr.w	pc, [sp], #4
24004920:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24004922:	4613      	mov	r3, r2
24004924:	e7e8      	b.n	240048f8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004926:	f000 000f 	and.w	r0, r0, #15
2400492a:	0109      	lsls	r1, r1, #4
2400492c:	4b04      	ldr	r3, [pc, #16]	; (24004940 <HAL_NVIC_SetPriority+0x78>)
2400492e:	b2c9      	uxtb	r1, r1
24004930:	4403      	add	r3, r0
24004932:	7619      	strb	r1, [r3, #24]
24004934:	f85d fb04 	ldr.w	pc, [sp], #4
24004938:	e000ed00 	.word	0xe000ed00
2400493c:	e000e100 	.word	0xe000e100
24004940:	e000ecfc 	.word	0xe000ecfc

24004944 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
24004944:	2800      	cmp	r0, #0
24004946:	db07      	blt.n	24004958 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24004948:	2301      	movs	r3, #1
2400494a:	f000 011f 	and.w	r1, r0, #31
2400494e:	4a03      	ldr	r2, [pc, #12]	; (2400495c <HAL_NVIC_EnableIRQ+0x18>)
24004950:	0940      	lsrs	r0, r0, #5
24004952:	408b      	lsls	r3, r1
24004954:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
24004958:	4770      	bx	lr
2400495a:	bf00      	nop
2400495c:	e000e100 	.word	0xe000e100

24004960 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24004960:	1e43      	subs	r3, r0, #1
24004962:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24004966:	d20c      	bcs.n	24004982 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24004968:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2400496c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2400496e:	4906      	ldr	r1, [pc, #24]	; (24004988 <HAL_SYSTICK_Config+0x28>)
24004970:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24004974:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24004976:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24004978:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2400497c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2400497e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24004980:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
24004982:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
24004984:	4770      	bx	lr
24004986:	bf00      	nop
24004988:	e000ed00 	.word	0xe000ed00

2400498c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
2400498c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24004990:	4b04      	ldr	r3, [pc, #16]	; (240049a4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
24004992:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24004994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
24004996:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
2400499a:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
2400499c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
240049a0:	4770      	bx	lr
240049a2:	bf00      	nop
240049a4:	e000ed00 	.word	0xe000ed00

240049a8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
240049a8:	4b06      	ldr	r3, [pc, #24]	; (240049c4 <HAL_MPU_Enable+0x1c>)
240049aa:	f040 0001 	orr.w	r0, r0, #1
240049ae:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
240049b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
240049b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240049b8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
240049ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
240049be:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
240049c2:	4770      	bx	lr
240049c4:	e000ed00 	.word	0xe000ed00

240049c8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
240049c8:	7843      	ldrb	r3, [r0, #1]
240049ca:	4a16      	ldr	r2, [pc, #88]	; (24004a24 <HAL_MPU_ConfigRegion+0x5c>)
240049cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
240049d0:	7803      	ldrb	r3, [r0, #0]
240049d2:	b313      	cbz	r3, 24004a1a <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
240049d4:	6843      	ldr	r3, [r0, #4]
240049d6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
240049da:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
240049dc:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
240049e0:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
240049e2:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
240049e4:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
240049e8:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
240049ec:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
240049ee:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
240049f0:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
240049f4:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
240049f8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
240049fc:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
240049fe:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24004a02:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24004a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
24004a0a:	7a01      	ldrb	r1, [r0, #8]
24004a0c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
24004a10:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24004a14:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
24004a18:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
24004a1a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
24004a1e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
24004a22:	4770      	bx	lr
24004a24:	e000ed00 	.word	0xe000ed00

24004a28 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004a28:	4b33      	ldr	r3, [pc, #204]	; (24004af8 <DMA_CalcBaseAndBitshift+0xd0>)
{
24004a2a:	4601      	mov	r1, r0
24004a2c:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004a2e:	4e33      	ldr	r6, [pc, #204]	; (24004afc <DMA_CalcBaseAndBitshift+0xd4>)
24004a30:	6802      	ldr	r2, [r0, #0]
24004a32:	4d33      	ldr	r5, [pc, #204]	; (24004b00 <DMA_CalcBaseAndBitshift+0xd8>)
24004a34:	42b2      	cmp	r2, r6
24004a36:	bf18      	it	ne
24004a38:	429a      	cmpne	r2, r3
24004a3a:	4c32      	ldr	r4, [pc, #200]	; (24004b04 <DMA_CalcBaseAndBitshift+0xdc>)
24004a3c:	4832      	ldr	r0, [pc, #200]	; (24004b08 <DMA_CalcBaseAndBitshift+0xe0>)
24004a3e:	bf0c      	ite	eq
24004a40:	2301      	moveq	r3, #1
24004a42:	2300      	movne	r3, #0
24004a44:	42aa      	cmp	r2, r5
24004a46:	bf08      	it	eq
24004a48:	f043 0301 	orreq.w	r3, r3, #1
24004a4c:	42a2      	cmp	r2, r4
24004a4e:	bf08      	it	eq
24004a50:	f043 0301 	orreq.w	r3, r3, #1
24004a54:	3430      	adds	r4, #48	; 0x30
24004a56:	4282      	cmp	r2, r0
24004a58:	bf08      	it	eq
24004a5a:	f043 0301 	orreq.w	r3, r3, #1
24004a5e:	3030      	adds	r0, #48	; 0x30
24004a60:	42a2      	cmp	r2, r4
24004a62:	bf08      	it	eq
24004a64:	f043 0301 	orreq.w	r3, r3, #1
24004a68:	3430      	adds	r4, #48	; 0x30
24004a6a:	4282      	cmp	r2, r0
24004a6c:	bf08      	it	eq
24004a6e:	f043 0301 	orreq.w	r3, r3, #1
24004a72:	f500 705c 	add.w	r0, r0, #880	; 0x370
24004a76:	42a2      	cmp	r2, r4
24004a78:	bf08      	it	eq
24004a7a:	f043 0301 	orreq.w	r3, r3, #1
24004a7e:	f504 745c 	add.w	r4, r4, #880	; 0x370
24004a82:	4282      	cmp	r2, r0
24004a84:	bf08      	it	eq
24004a86:	f043 0301 	orreq.w	r3, r3, #1
24004a8a:	3030      	adds	r0, #48	; 0x30
24004a8c:	42a2      	cmp	r2, r4
24004a8e:	bf08      	it	eq
24004a90:	f043 0301 	orreq.w	r3, r3, #1
24004a94:	3430      	adds	r4, #48	; 0x30
24004a96:	4282      	cmp	r2, r0
24004a98:	bf08      	it	eq
24004a9a:	f043 0301 	orreq.w	r3, r3, #1
24004a9e:	3030      	adds	r0, #48	; 0x30
24004aa0:	42a2      	cmp	r2, r4
24004aa2:	bf08      	it	eq
24004aa4:	f043 0301 	orreq.w	r3, r3, #1
24004aa8:	3430      	adds	r4, #48	; 0x30
24004aaa:	4282      	cmp	r2, r0
24004aac:	bf08      	it	eq
24004aae:	f043 0301 	orreq.w	r3, r3, #1
24004ab2:	3030      	adds	r0, #48	; 0x30
24004ab4:	42a2      	cmp	r2, r4
24004ab6:	bf08      	it	eq
24004ab8:	f043 0301 	orreq.w	r3, r3, #1
24004abc:	4282      	cmp	r2, r0
24004abe:	bf08      	it	eq
24004ac0:	f043 0301 	orreq.w	r3, r3, #1
24004ac4:	b913      	cbnz	r3, 24004acc <DMA_CalcBaseAndBitshift+0xa4>
24004ac6:	4b11      	ldr	r3, [pc, #68]	; (24004b0c <DMA_CalcBaseAndBitshift+0xe4>)
24004ac8:	429a      	cmp	r2, r3
24004aca:	d112      	bne.n	24004af2 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004acc:	b2d3      	uxtb	r3, r2
24004ace:	4810      	ldr	r0, [pc, #64]	; (24004b10 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24004ad0:	4c10      	ldr	r4, [pc, #64]	; (24004b14 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004ad2:	3b10      	subs	r3, #16
24004ad4:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
24004ad8:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004ada:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
24004ade:	5c20      	ldrb	r0, [r4, r0]
24004ae0:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
24004ae2:	480d      	ldr	r0, [pc, #52]	; (24004b18 <DMA_CalcBaseAndBitshift+0xf0>)
24004ae4:	ea00 0002 	and.w	r0, r0, r2
24004ae8:	bf88      	it	hi
24004aea:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
24004aec:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
24004aee:	bc70      	pop	{r4, r5, r6}
24004af0:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
24004af2:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
24004af6:	e7f9      	b.n	24004aec <DMA_CalcBaseAndBitshift+0xc4>
24004af8:	40020010 	.word	0x40020010
24004afc:	40020028 	.word	0x40020028
24004b00:	40020040 	.word	0x40020040
24004b04:	40020058 	.word	0x40020058
24004b08:	40020070 	.word	0x40020070
24004b0c:	400204b8 	.word	0x400204b8
24004b10:	aaaaaaab 	.word	0xaaaaaaab
24004b14:	2401c840 	.word	0x2401c840
24004b18:	fffffc00 	.word	0xfffffc00

24004b1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
24004b1c:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24004b1e:	4a27      	ldr	r2, [pc, #156]	; (24004bbc <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
24004b20:	4927      	ldr	r1, [pc, #156]	; (24004bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
24004b22:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24004b24:	4d27      	ldr	r5, [pc, #156]	; (24004bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
24004b26:	4c28      	ldr	r4, [pc, #160]	; (24004bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
24004b28:	42ab      	cmp	r3, r5
24004b2a:	bf18      	it	ne
24004b2c:	4293      	cmpne	r3, r2
24004b2e:	bf0c      	ite	eq
24004b30:	2201      	moveq	r2, #1
24004b32:	2200      	movne	r2, #0
24004b34:	428b      	cmp	r3, r1
24004b36:	bf08      	it	eq
24004b38:	f042 0201 	orreq.w	r2, r2, #1
24004b3c:	3128      	adds	r1, #40	; 0x28
24004b3e:	42a3      	cmp	r3, r4
24004b40:	bf08      	it	eq
24004b42:	f042 0201 	orreq.w	r2, r2, #1
24004b46:	3428      	adds	r4, #40	; 0x28
24004b48:	428b      	cmp	r3, r1
24004b4a:	bf08      	it	eq
24004b4c:	f042 0201 	orreq.w	r2, r2, #1
24004b50:	3128      	adds	r1, #40	; 0x28
24004b52:	42a3      	cmp	r3, r4
24004b54:	bf08      	it	eq
24004b56:	f042 0201 	orreq.w	r2, r2, #1
24004b5a:	428b      	cmp	r3, r1
24004b5c:	bf08      	it	eq
24004b5e:	f042 0201 	orreq.w	r2, r2, #1
24004b62:	b912      	cbnz	r2, 24004b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
24004b64:	4a19      	ldr	r2, [pc, #100]	; (24004bcc <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
24004b66:	4293      	cmp	r3, r2
24004b68:	d113      	bne.n	24004b92 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24004b6a:	b2db      	uxtb	r3, r3
24004b6c:	4918      	ldr	r1, [pc, #96]	; (24004bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24004b6e:	4a19      	ldr	r2, [pc, #100]	; (24004bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
24004b70:	3b08      	subs	r3, #8
24004b72:	4c19      	ldr	r4, [pc, #100]	; (24004bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
24004b74:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004b78:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24004b7a:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004b7e:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
24004b82:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004b84:	fa01 f303 	lsl.w	r3, r1, r3
24004b88:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
24004b8a:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
24004b8e:	bc30      	pop	{r4, r5}
24004b90:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004b92:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004b94:	4a11      	ldr	r2, [pc, #68]	; (24004bdc <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004b96:	4c12      	ldr	r4, [pc, #72]	; (24004be0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
24004b98:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004b9a:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004b9c:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004ba0:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
24004ba2:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
24004ba6:	d800      	bhi.n	24004baa <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
24004ba8:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004baa:	4a0e      	ldr	r2, [pc, #56]	; (24004be4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004bac:	f001 041f 	and.w	r4, r1, #31
24004bb0:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004bb2:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004bb4:	40a3      	lsls	r3, r4
24004bb6:	4c0c      	ldr	r4, [pc, #48]	; (24004be8 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
24004bb8:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
24004bba:	e7e5      	b.n	24004b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
24004bbc:	58025408 	.word	0x58025408
24004bc0:	58025430 	.word	0x58025430
24004bc4:	5802541c 	.word	0x5802541c
24004bc8:	58025444 	.word	0x58025444
24004bcc:	58025494 	.word	0x58025494
24004bd0:	cccccccd 	.word	0xcccccccd
24004bd4:	16009600 	.word	0x16009600
24004bd8:	58025880 	.word	0x58025880
24004bdc:	bffdfbf0 	.word	0xbffdfbf0
24004be0:	aaaaaaab 	.word	0xaaaaaaab
24004be4:	10008200 	.word	0x10008200
24004be8:	40020880 	.word	0x40020880

24004bec <HAL_DMA_Init>:
{
24004bec:	b538      	push	{r3, r4, r5, lr}
24004bee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
24004bf0:	f7ff fe3a 	bl	24004868 <HAL_GetTick>
  if(hdma == NULL)
24004bf4:	2c00      	cmp	r4, #0
24004bf6:	f000 816a 	beq.w	24004ece <HAL_DMA_Init+0x2e2>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24004bfa:	6822      	ldr	r2, [r4, #0]
24004bfc:	4605      	mov	r5, r0
24004bfe:	4ba3      	ldr	r3, [pc, #652]	; (24004e8c <HAL_DMA_Init+0x2a0>)
24004c00:	429a      	cmp	r2, r3
24004c02:	d048      	beq.n	24004c96 <HAL_DMA_Init+0xaa>
24004c04:	3318      	adds	r3, #24
24004c06:	429a      	cmp	r2, r3
24004c08:	d045      	beq.n	24004c96 <HAL_DMA_Init+0xaa>
24004c0a:	3330      	adds	r3, #48	; 0x30
24004c0c:	49a0      	ldr	r1, [pc, #640]	; (24004e90 <HAL_DMA_Init+0x2a4>)
24004c0e:	428a      	cmp	r2, r1
24004c10:	bf18      	it	ne
24004c12:	429a      	cmpne	r2, r3
24004c14:	f101 0130 	add.w	r1, r1, #48	; 0x30
24004c18:	bf0c      	ite	eq
24004c1a:	2301      	moveq	r3, #1
24004c1c:	2300      	movne	r3, #0
24004c1e:	428a      	cmp	r2, r1
24004c20:	bf08      	it	eq
24004c22:	f043 0301 	orreq.w	r3, r3, #1
24004c26:	3118      	adds	r1, #24
24004c28:	428a      	cmp	r2, r1
24004c2a:	bf08      	it	eq
24004c2c:	f043 0301 	orreq.w	r3, r3, #1
24004c30:	3118      	adds	r1, #24
24004c32:	428a      	cmp	r2, r1
24004c34:	bf08      	it	eq
24004c36:	f043 0301 	orreq.w	r3, r3, #1
24004c3a:	3118      	adds	r1, #24
24004c3c:	428a      	cmp	r2, r1
24004c3e:	bf08      	it	eq
24004c40:	f043 0301 	orreq.w	r3, r3, #1
24004c44:	f501 7156 	add.w	r1, r1, #856	; 0x358
24004c48:	428a      	cmp	r2, r1
24004c4a:	bf08      	it	eq
24004c4c:	f043 0301 	orreq.w	r3, r3, #1
24004c50:	3118      	adds	r1, #24
24004c52:	428a      	cmp	r2, r1
24004c54:	bf08      	it	eq
24004c56:	f043 0301 	orreq.w	r3, r3, #1
24004c5a:	3118      	adds	r1, #24
24004c5c:	428a      	cmp	r2, r1
24004c5e:	bf08      	it	eq
24004c60:	f043 0301 	orreq.w	r3, r3, #1
24004c64:	3118      	adds	r1, #24
24004c66:	428a      	cmp	r2, r1
24004c68:	bf08      	it	eq
24004c6a:	f043 0301 	orreq.w	r3, r3, #1
24004c6e:	3118      	adds	r1, #24
24004c70:	428a      	cmp	r2, r1
24004c72:	bf08      	it	eq
24004c74:	f043 0301 	orreq.w	r3, r3, #1
24004c78:	3118      	adds	r1, #24
24004c7a:	428a      	cmp	r2, r1
24004c7c:	bf08      	it	eq
24004c7e:	f043 0301 	orreq.w	r3, r3, #1
24004c82:	3118      	adds	r1, #24
24004c84:	428a      	cmp	r2, r1
24004c86:	bf08      	it	eq
24004c88:	f043 0301 	orreq.w	r3, r3, #1
24004c8c:	b91b      	cbnz	r3, 24004c96 <HAL_DMA_Init+0xaa>
24004c8e:	4b81      	ldr	r3, [pc, #516]	; (24004e94 <HAL_DMA_Init+0x2a8>)
24004c90:	429a      	cmp	r2, r3
24004c92:	f040 8184 	bne.w	24004f9e <HAL_DMA_Init+0x3b2>
    hdma->State = HAL_DMA_STATE_BUSY;
24004c96:	2302      	movs	r3, #2
24004c98:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
24004c9c:	2300      	movs	r3, #0
24004c9e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
24004ca2:	6813      	ldr	r3, [r2, #0]
24004ca4:	f023 0301 	bic.w	r3, r3, #1
24004ca8:	6013      	str	r3, [r2, #0]
24004caa:	e005      	b.n	24004cb8 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24004cac:	f7ff fddc 	bl	24004868 <HAL_GetTick>
24004cb0:	1b43      	subs	r3, r0, r5
24004cb2:	2b05      	cmp	r3, #5
24004cb4:	f200 80fe 	bhi.w	24004eb4 <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24004cb8:	6823      	ldr	r3, [r4, #0]
24004cba:	681a      	ldr	r2, [r3, #0]
24004cbc:	07d0      	lsls	r0, r2, #31
24004cbe:	d4f5      	bmi.n	24004cac <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
24004cc0:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004cc4:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
24004cc6:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
24004cc8:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004cca:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004ccc:	430a      	orrs	r2, r1
24004cce:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004cd0:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
24004cd2:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
24004cd6:	69a1      	ldr	r1, [r4, #24]
24004cd8:	ea42 0201 	orr.w	r2, r2, r1
24004cdc:	69e1      	ldr	r1, [r4, #28]
24004cde:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
24004ce2:	6a21      	ldr	r1, [r4, #32]
24004ce4:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
24004ce8:	496b      	ldr	r1, [pc, #428]	; (24004e98 <HAL_DMA_Init+0x2ac>)
24004cea:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
24004cee:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004cf2:	d103      	bne.n	24004cfc <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
24004cf4:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
24004cf8:	4301      	orrs	r1, r0
24004cfa:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
24004cfc:	4867      	ldr	r0, [pc, #412]	; (24004e9c <HAL_DMA_Init+0x2b0>)
24004cfe:	4968      	ldr	r1, [pc, #416]	; (24004ea0 <HAL_DMA_Init+0x2b4>)
24004d00:	6800      	ldr	r0, [r0, #0]
24004d02:	4001      	ands	r1, r0
24004d04:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24004d08:	d30a      	bcc.n	24004d20 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24004d0a:	6861      	ldr	r1, [r4, #4]
24004d0c:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
24004d10:	281f      	cmp	r0, #31
24004d12:	f240 80d6 	bls.w	24004ec2 <HAL_DMA_Init+0x2d6>
24004d16:	394f      	subs	r1, #79	; 0x4f
24004d18:	2903      	cmp	r1, #3
24004d1a:	d801      	bhi.n	24004d20 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
24004d1c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
24004d20:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24004d22:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
24004d24:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
24004d26:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004d28:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
24004d2a:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
24004d2e:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
24004d32:	d10e      	bne.n	24004d52 <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24004d34:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
24004d38:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
24004d3a:	b150      	cbz	r0, 24004d52 <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
24004d3c:	69a5      	ldr	r5, [r4, #24]
24004d3e:	2d00      	cmp	r5, #0
24004d40:	f040 8107 	bne.w	24004f52 <HAL_DMA_Init+0x366>
    switch (hdma->Init.FIFOThreshold)
24004d44:	2a01      	cmp	r2, #1
24004d46:	f000 8125 	beq.w	24004f94 <HAL_DMA_Init+0x3a8>
24004d4a:	f032 0202 	bics.w	r2, r2, #2
24004d4e:	f000 8108 	beq.w	24004f62 <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
24004d52:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
24004d54:	4620      	mov	r0, r4
24004d56:	f7ff fe67 	bl	24004a28 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24004d5a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24004d5c:	233f      	movs	r3, #63	; 0x3f
24004d5e:	f002 021f 	and.w	r2, r2, #31
24004d62:	4093      	lsls	r3, r2
24004d64:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24004d66:	6822      	ldr	r2, [r4, #0]
24004d68:	4b48      	ldr	r3, [pc, #288]	; (24004e8c <HAL_DMA_Init+0x2a0>)
24004d6a:	484e      	ldr	r0, [pc, #312]	; (24004ea4 <HAL_DMA_Init+0x2b8>)
24004d6c:	4948      	ldr	r1, [pc, #288]	; (24004e90 <HAL_DMA_Init+0x2a4>)
24004d6e:	4282      	cmp	r2, r0
24004d70:	bf18      	it	ne
24004d72:	429a      	cmpne	r2, r3
24004d74:	f100 0030 	add.w	r0, r0, #48	; 0x30
24004d78:	bf0c      	ite	eq
24004d7a:	2301      	moveq	r3, #1
24004d7c:	2300      	movne	r3, #0
24004d7e:	428a      	cmp	r2, r1
24004d80:	bf08      	it	eq
24004d82:	f043 0301 	orreq.w	r3, r3, #1
24004d86:	3130      	adds	r1, #48	; 0x30
24004d88:	4282      	cmp	r2, r0
24004d8a:	bf08      	it	eq
24004d8c:	f043 0301 	orreq.w	r3, r3, #1
24004d90:	3030      	adds	r0, #48	; 0x30
24004d92:	428a      	cmp	r2, r1
24004d94:	bf08      	it	eq
24004d96:	f043 0301 	orreq.w	r3, r3, #1
24004d9a:	3130      	adds	r1, #48	; 0x30
24004d9c:	4282      	cmp	r2, r0
24004d9e:	bf08      	it	eq
24004da0:	f043 0301 	orreq.w	r3, r3, #1
24004da4:	3030      	adds	r0, #48	; 0x30
24004da6:	428a      	cmp	r2, r1
24004da8:	bf08      	it	eq
24004daa:	f043 0301 	orreq.w	r3, r3, #1
24004dae:	f501 715c 	add.w	r1, r1, #880	; 0x370
24004db2:	4282      	cmp	r2, r0
24004db4:	bf08      	it	eq
24004db6:	f043 0301 	orreq.w	r3, r3, #1
24004dba:	f500 705c 	add.w	r0, r0, #880	; 0x370
24004dbe:	428a      	cmp	r2, r1
24004dc0:	bf08      	it	eq
24004dc2:	f043 0301 	orreq.w	r3, r3, #1
24004dc6:	3130      	adds	r1, #48	; 0x30
24004dc8:	4282      	cmp	r2, r0
24004dca:	bf08      	it	eq
24004dcc:	f043 0301 	orreq.w	r3, r3, #1
24004dd0:	3030      	adds	r0, #48	; 0x30
24004dd2:	428a      	cmp	r2, r1
24004dd4:	bf08      	it	eq
24004dd6:	f043 0301 	orreq.w	r3, r3, #1
24004dda:	3130      	adds	r1, #48	; 0x30
24004ddc:	4282      	cmp	r2, r0
24004dde:	bf08      	it	eq
24004de0:	f043 0301 	orreq.w	r3, r3, #1
24004de4:	3030      	adds	r0, #48	; 0x30
24004de6:	428a      	cmp	r2, r1
24004de8:	bf08      	it	eq
24004dea:	f043 0301 	orreq.w	r3, r3, #1
24004dee:	3130      	adds	r1, #48	; 0x30
24004df0:	4282      	cmp	r2, r0
24004df2:	bf08      	it	eq
24004df4:	f043 0301 	orreq.w	r3, r3, #1
24004df8:	3030      	adds	r0, #48	; 0x30
24004dfa:	428a      	cmp	r2, r1
24004dfc:	bf08      	it	eq
24004dfe:	f043 0301 	orreq.w	r3, r3, #1
24004e02:	4929      	ldr	r1, [pc, #164]	; (24004ea8 <HAL_DMA_Init+0x2bc>)
24004e04:	4282      	cmp	r2, r0
24004e06:	bf08      	it	eq
24004e08:	f043 0301 	orreq.w	r3, r3, #1
24004e0c:	4827      	ldr	r0, [pc, #156]	; (24004eac <HAL_DMA_Init+0x2c0>)
24004e0e:	428a      	cmp	r2, r1
24004e10:	bf08      	it	eq
24004e12:	f043 0301 	orreq.w	r3, r3, #1
24004e16:	3128      	adds	r1, #40	; 0x28
24004e18:	4282      	cmp	r2, r0
24004e1a:	bf08      	it	eq
24004e1c:	f043 0301 	orreq.w	r3, r3, #1
24004e20:	3028      	adds	r0, #40	; 0x28
24004e22:	428a      	cmp	r2, r1
24004e24:	bf08      	it	eq
24004e26:	f043 0301 	orreq.w	r3, r3, #1
24004e2a:	3128      	adds	r1, #40	; 0x28
24004e2c:	4282      	cmp	r2, r0
24004e2e:	bf08      	it	eq
24004e30:	f043 0301 	orreq.w	r3, r3, #1
24004e34:	3028      	adds	r0, #40	; 0x28
24004e36:	428a      	cmp	r2, r1
24004e38:	bf08      	it	eq
24004e3a:	f043 0301 	orreq.w	r3, r3, #1
24004e3e:	3128      	adds	r1, #40	; 0x28
24004e40:	4282      	cmp	r2, r0
24004e42:	bf08      	it	eq
24004e44:	f043 0301 	orreq.w	r3, r3, #1
24004e48:	428a      	cmp	r2, r1
24004e4a:	bf08      	it	eq
24004e4c:	f043 0301 	orreq.w	r3, r3, #1
24004e50:	b913      	cbnz	r3, 24004e58 <HAL_DMA_Init+0x26c>
24004e52:	4b17      	ldr	r3, [pc, #92]	; (24004eb0 <HAL_DMA_Init+0x2c4>)
24004e54:	429a      	cmp	r2, r3
24004e56:	d113      	bne.n	24004e80 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
24004e58:	4620      	mov	r0, r4
24004e5a:	f7ff fe5f 	bl	24004b1c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
24004e5e:	68a3      	ldr	r3, [r4, #8]
24004e60:	2b80      	cmp	r3, #128	; 0x80
24004e62:	d036      	beq.n	24004ed2 <HAL_DMA_Init+0x2e6>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
24004e64:	7922      	ldrb	r2, [r4, #4]
24004e66:	6e23      	ldr	r3, [r4, #96]	; 0x60
24004e68:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24004e6a:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
24004e6e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
24004e70:	6861      	ldr	r1, [r4, #4]
24004e72:	1e4b      	subs	r3, r1, #1
24004e74:	2b07      	cmp	r3, #7
24004e76:	d930      	bls.n	24004eda <HAL_DMA_Init+0x2ee>
      hdma->DMAmuxRequestGen = 0U;
24004e78:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
24004e7a:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
24004e7e:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004e80:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
24004e82:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
24004e84:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
24004e86:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004e8a:	bd38      	pop	{r3, r4, r5, pc}
24004e8c:	40020010 	.word	0x40020010
24004e90:	40020040 	.word	0x40020040
24004e94:	400204b8 	.word	0x400204b8
24004e98:	fe10803f 	.word	0xfe10803f
24004e9c:	5c001000 	.word	0x5c001000
24004ea0:	ffff0000 	.word	0xffff0000
24004ea4:	40020028 	.word	0x40020028
24004ea8:	58025408 	.word	0x58025408
24004eac:	5802541c 	.word	0x5802541c
24004eb0:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24004eb4:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
24004eb6:	2303      	movs	r3, #3
        return HAL_ERROR;
24004eb8:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24004eba:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
24004ebc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004ec0:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
24004ec2:	496b      	ldr	r1, [pc, #428]	; (24005070 <HAL_DMA_Init+0x484>)
24004ec4:	40c1      	lsrs	r1, r0
24004ec6:	07c9      	lsls	r1, r1, #31
24004ec8:	f57f af2a 	bpl.w	24004d20 <HAL_DMA_Init+0x134>
24004ecc:	e726      	b.n	24004d1c <HAL_DMA_Init+0x130>
    return HAL_ERROR;
24004ece:	2001      	movs	r0, #1
}
24004ed0:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
24004ed2:	2300      	movs	r3, #0
24004ed4:	461a      	mov	r2, r3
24004ed6:	6063      	str	r3, [r4, #4]
24004ed8:	e7c5      	b.n	24004e66 <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
24004eda:	6820      	ldr	r0, [r4, #0]
24004edc:	4a65      	ldr	r2, [pc, #404]	; (24005074 <HAL_DMA_Init+0x488>)
24004ede:	4d66      	ldr	r5, [pc, #408]	; (24005078 <HAL_DMA_Init+0x48c>)
24004ee0:	42a8      	cmp	r0, r5
24004ee2:	bf18      	it	ne
24004ee4:	4290      	cmpne	r0, r2
24004ee6:	f105 0514 	add.w	r5, r5, #20
24004eea:	bf0c      	ite	eq
24004eec:	2201      	moveq	r2, #1
24004eee:	2200      	movne	r2, #0
24004ef0:	42a8      	cmp	r0, r5
24004ef2:	bf08      	it	eq
24004ef4:	f042 0201 	orreq.w	r2, r2, #1
24004ef8:	3514      	adds	r5, #20
24004efa:	42a8      	cmp	r0, r5
24004efc:	bf08      	it	eq
24004efe:	f042 0201 	orreq.w	r2, r2, #1
24004f02:	3514      	adds	r5, #20
24004f04:	42a8      	cmp	r0, r5
24004f06:	bf08      	it	eq
24004f08:	f042 0201 	orreq.w	r2, r2, #1
24004f0c:	3514      	adds	r5, #20
24004f0e:	42a8      	cmp	r0, r5
24004f10:	bf08      	it	eq
24004f12:	f042 0201 	orreq.w	r2, r2, #1
24004f16:	3514      	adds	r5, #20
24004f18:	42a8      	cmp	r0, r5
24004f1a:	bf08      	it	eq
24004f1c:	f042 0201 	orreq.w	r2, r2, #1
24004f20:	b93a      	cbnz	r2, 24004f32 <HAL_DMA_Init+0x346>
24004f22:	4a56      	ldr	r2, [pc, #344]	; (2400507c <HAL_DMA_Init+0x490>)
24004f24:	4290      	cmp	r0, r2
24004f26:	d004      	beq.n	24004f32 <HAL_DMA_Init+0x346>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24004f28:	4a55      	ldr	r2, [pc, #340]	; (24005080 <HAL_DMA_Init+0x494>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24004f2a:	4856      	ldr	r0, [pc, #344]	; (24005084 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
24004f2c:	440a      	add	r2, r1
24004f2e:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
24004f30:	e003      	b.n	24004f3a <HAL_DMA_Init+0x34e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24004f32:	4a55      	ldr	r2, [pc, #340]	; (24005088 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
24004f34:	4855      	ldr	r0, [pc, #340]	; (2400508c <HAL_DMA_Init+0x4a0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
24004f36:	440a      	add	r2, r1
24004f38:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24004f3a:	2101      	movs	r1, #1
24004f3c:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
24004f40:	2100      	movs	r1, #0
24004f42:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
24004f46:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
24004f48:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24004f4a:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
24004f4e:	605a      	str	r2, [r3, #4]
24004f50:	e796      	b.n	24004e80 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
24004f52:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
24004f56:	d00e      	beq.n	24004f76 <HAL_DMA_Init+0x38a>
    switch (hdma->Init.FIFOThreshold)
24004f58:	2a02      	cmp	r2, #2
24004f5a:	d905      	bls.n	24004f68 <HAL_DMA_Init+0x37c>
24004f5c:	2a03      	cmp	r2, #3
24004f5e:	f47f aef8 	bne.w	24004d52 <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
24004f62:	01c2      	lsls	r2, r0, #7
24004f64:	f57f aef5 	bpl.w	24004d52 <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
24004f68:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004f6a:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
24004f6c:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24004f6e:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
24004f70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
24004f74:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
24004f76:	2a03      	cmp	r2, #3
24004f78:	f63f aeeb 	bhi.w	24004d52 <HAL_DMA_Init+0x166>
24004f7c:	a501      	add	r5, pc, #4	; (adr r5, 24004f84 <HAL_DMA_Init+0x398>)
24004f7e:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
24004f82:	bf00      	nop
24004f84:	24004f69 	.word	0x24004f69
24004f88:	24004f63 	.word	0x24004f63
24004f8c:	24004f69 	.word	0x24004f69
24004f90:	24004f95 	.word	0x24004f95
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
24004f94:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
24004f98:	f47f aedb 	bne.w	24004d52 <HAL_DMA_Init+0x166>
24004f9c:	e7e4      	b.n	24004f68 <HAL_DMA_Init+0x37c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
24004f9e:	4b35      	ldr	r3, [pc, #212]	; (24005074 <HAL_DMA_Init+0x488>)
24004fa0:	4835      	ldr	r0, [pc, #212]	; (24005078 <HAL_DMA_Init+0x48c>)
24004fa2:	493b      	ldr	r1, [pc, #236]	; (24005090 <HAL_DMA_Init+0x4a4>)
24004fa4:	4282      	cmp	r2, r0
24004fa6:	bf18      	it	ne
24004fa8:	429a      	cmpne	r2, r3
24004faa:	f100 0028 	add.w	r0, r0, #40	; 0x28
24004fae:	bf0c      	ite	eq
24004fb0:	2301      	moveq	r3, #1
24004fb2:	2300      	movne	r3, #0
24004fb4:	428a      	cmp	r2, r1
24004fb6:	bf08      	it	eq
24004fb8:	f043 0301 	orreq.w	r3, r3, #1
24004fbc:	3128      	adds	r1, #40	; 0x28
24004fbe:	4282      	cmp	r2, r0
24004fc0:	bf08      	it	eq
24004fc2:	f043 0301 	orreq.w	r3, r3, #1
24004fc6:	3028      	adds	r0, #40	; 0x28
24004fc8:	428a      	cmp	r2, r1
24004fca:	bf08      	it	eq
24004fcc:	f043 0301 	orreq.w	r3, r3, #1
24004fd0:	3128      	adds	r1, #40	; 0x28
24004fd2:	4282      	cmp	r2, r0
24004fd4:	bf08      	it	eq
24004fd6:	f043 0301 	orreq.w	r3, r3, #1
24004fda:	428a      	cmp	r2, r1
24004fdc:	bf08      	it	eq
24004fde:	f043 0301 	orreq.w	r3, r3, #1
24004fe2:	b913      	cbnz	r3, 24004fea <HAL_DMA_Init+0x3fe>
24004fe4:	4b25      	ldr	r3, [pc, #148]	; (2400507c <HAL_DMA_Init+0x490>)
24004fe6:	429a      	cmp	r2, r3
24004fe8:	d13a      	bne.n	24005060 <HAL_DMA_Init+0x474>
    __HAL_UNLOCK(hdma);
24004fea:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
24004fec:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24004fee:	4929      	ldr	r1, [pc, #164]	; (24005094 <HAL_DMA_Init+0x4a8>)
    hdma->State = HAL_DMA_STATE_BUSY;
24004ff0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
24004ff4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
24004ff8:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
24004ffa:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24004ffc:	68a3      	ldr	r3, [r4, #8]
24004ffe:	2b40      	cmp	r3, #64	; 0x40
24005000:	d02c      	beq.n	2400505c <HAL_DMA_Init+0x470>
24005002:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
24005006:	fab3 f383 	clz	r3, r3
2400500a:	095b      	lsrs	r3, r3, #5
2400500c:	0398      	lsls	r0, r3, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
2400500e:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
24005012:	08db      	lsrs	r3, r3, #3
24005014:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
24005018:	6965      	ldr	r5, [r4, #20]
2400501a:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
2400501e:	69a5      	ldr	r5, [r4, #24]
24005020:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
24005024:	69e5      	ldr	r5, [r4, #28]
24005026:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
2400502a:	6a25      	ldr	r5, [r4, #32]
2400502c:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
24005030:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24005032:	4919      	ldr	r1, [pc, #100]	; (24005098 <HAL_DMA_Init+0x4ac>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
24005034:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
24005036:	4b19      	ldr	r3, [pc, #100]	; (2400509c <HAL_DMA_Init+0x4b0>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
24005038:	6010      	str	r0, [r2, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2400503a:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
2400503c:	6822      	ldr	r2, [r4, #0]
2400503e:	4411      	add	r1, r2
24005040:	fba3 2301 	umull	r2, r3, r3, r1
24005044:	091b      	lsrs	r3, r3, #4
24005046:	009b      	lsls	r3, r3, #2
24005048:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
2400504a:	f7ff fced 	bl	24004a28 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
2400504e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
24005050:	2301      	movs	r3, #1
24005052:	f002 021f 	and.w	r2, r2, #31
24005056:	4093      	lsls	r3, r2
24005058:	6043      	str	r3, [r0, #4]
2400505a:	e684      	b.n	24004d66 <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
2400505c:	2010      	movs	r0, #16
2400505e:	e7d6      	b.n	2400500e <HAL_DMA_Init+0x422>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24005060:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
24005062:	2303      	movs	r3, #3
    return HAL_ERROR;
24005064:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
24005066:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
24005068:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
2400506c:	bd38      	pop	{r3, r4, r5, pc}
2400506e:	bf00      	nop
24005070:	c3c0003f 	.word	0xc3c0003f
24005074:	58025408 	.word	0x58025408
24005078:	5802541c 	.word	0x5802541c
2400507c:	58025494 	.word	0x58025494
24005080:	1000823f 	.word	0x1000823f
24005084:	40020940 	.word	0x40020940
24005088:	1600963f 	.word	0x1600963f
2400508c:	58025940 	.word	0x58025940
24005090:	58025430 	.word	0x58025430
24005094:	fffe000f 	.word	0xfffe000f
24005098:	a7fdabf8 	.word	0xa7fdabf8
2400509c:	cccccccd 	.word	0xcccccccd

240050a0 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
240050a0:	2800      	cmp	r0, #0
240050a2:	f000 8270 	beq.w	24005586 <HAL_DMA_Start_IT+0x4e6>
240050a6:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
240050a8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
240050ac:	2801      	cmp	r0, #1
240050ae:	f000 826c 	beq.w	2400558a <HAL_DMA_Start_IT+0x4ea>
240050b2:	2001      	movs	r0, #1
{
240050b4:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
240050b6:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
240050ba:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
240050be:	4284      	cmp	r4, r0
240050c0:	d008      	beq.n	240050d4 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240050c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
240050c6:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240050c8:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
240050cc:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
240050d0:	bc70      	pop	{r4, r5, r6}
240050d2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
240050d4:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
240050d6:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240050da:	4ea2      	ldr	r6, [pc, #648]	; (24005364 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
240050dc:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
240050e0:	2000      	movs	r0, #0
240050e2:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
240050e6:	6820      	ldr	r0, [r4, #0]
240050e8:	f020 0001 	bic.w	r0, r0, #1
240050ec:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240050ee:	489e      	ldr	r0, [pc, #632]	; (24005368 <HAL_DMA_Start_IT+0x2c8>)
240050f0:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240050f4:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240050f8:	42b4      	cmp	r4, r6
240050fa:	bf18      	it	ne
240050fc:	4284      	cmpne	r4, r0
240050fe:	f106 0618 	add.w	r6, r6, #24
24005102:	bf0c      	ite	eq
24005104:	2001      	moveq	r0, #1
24005106:	2000      	movne	r0, #0
24005108:	42b4      	cmp	r4, r6
2400510a:	bf08      	it	eq
2400510c:	f040 0001 	orreq.w	r0, r0, #1
24005110:	3618      	adds	r6, #24
24005112:	42b4      	cmp	r4, r6
24005114:	bf08      	it	eq
24005116:	f040 0001 	orreq.w	r0, r0, #1
2400511a:	3618      	adds	r6, #24
2400511c:	42b4      	cmp	r4, r6
2400511e:	bf08      	it	eq
24005120:	f040 0001 	orreq.w	r0, r0, #1
24005124:	3618      	adds	r6, #24
24005126:	42b4      	cmp	r4, r6
24005128:	bf08      	it	eq
2400512a:	f040 0001 	orreq.w	r0, r0, #1
2400512e:	3618      	adds	r6, #24
24005130:	42b4      	cmp	r4, r6
24005132:	bf08      	it	eq
24005134:	f040 0001 	orreq.w	r0, r0, #1
24005138:	3618      	adds	r6, #24
2400513a:	42b4      	cmp	r4, r6
2400513c:	bf08      	it	eq
2400513e:	f040 0001 	orreq.w	r0, r0, #1
24005142:	f506 7656 	add.w	r6, r6, #856	; 0x358
24005146:	42b4      	cmp	r4, r6
24005148:	bf08      	it	eq
2400514a:	f040 0001 	orreq.w	r0, r0, #1
2400514e:	3618      	adds	r6, #24
24005150:	42b4      	cmp	r4, r6
24005152:	bf08      	it	eq
24005154:	f040 0001 	orreq.w	r0, r0, #1
24005158:	3618      	adds	r6, #24
2400515a:	42b4      	cmp	r4, r6
2400515c:	bf08      	it	eq
2400515e:	f040 0001 	orreq.w	r0, r0, #1
24005162:	3618      	adds	r6, #24
24005164:	42b4      	cmp	r4, r6
24005166:	bf08      	it	eq
24005168:	f040 0001 	orreq.w	r0, r0, #1
2400516c:	3618      	adds	r6, #24
2400516e:	42b4      	cmp	r4, r6
24005170:	bf08      	it	eq
24005172:	f040 0001 	orreq.w	r0, r0, #1
24005176:	3618      	adds	r6, #24
24005178:	42b4      	cmp	r4, r6
2400517a:	bf08      	it	eq
2400517c:	f040 0001 	orreq.w	r0, r0, #1
24005180:	3618      	adds	r6, #24
24005182:	42b4      	cmp	r4, r6
24005184:	bf08      	it	eq
24005186:	f040 0001 	orreq.w	r0, r0, #1
2400518a:	3618      	adds	r6, #24
2400518c:	42b4      	cmp	r4, r6
2400518e:	bf08      	it	eq
24005190:	f040 0001 	orreq.w	r0, r0, #1
24005194:	4e75      	ldr	r6, [pc, #468]	; (2400536c <HAL_DMA_Start_IT+0x2cc>)
24005196:	42b4      	cmp	r4, r6
24005198:	bf08      	it	eq
2400519a:	f040 0001 	orreq.w	r0, r0, #1
2400519e:	3614      	adds	r6, #20
240051a0:	42b4      	cmp	r4, r6
240051a2:	bf08      	it	eq
240051a4:	f040 0001 	orreq.w	r0, r0, #1
240051a8:	3614      	adds	r6, #20
240051aa:	42b4      	cmp	r4, r6
240051ac:	bf08      	it	eq
240051ae:	f040 0001 	orreq.w	r0, r0, #1
240051b2:	3614      	adds	r6, #20
240051b4:	42b4      	cmp	r4, r6
240051b6:	bf08      	it	eq
240051b8:	f040 0001 	orreq.w	r0, r0, #1
240051bc:	3614      	adds	r6, #20
240051be:	42b4      	cmp	r4, r6
240051c0:	bf08      	it	eq
240051c2:	f040 0001 	orreq.w	r0, r0, #1
240051c6:	3614      	adds	r6, #20
240051c8:	42b4      	cmp	r4, r6
240051ca:	bf08      	it	eq
240051cc:	f040 0001 	orreq.w	r0, r0, #1
240051d0:	3614      	adds	r6, #20
240051d2:	42b4      	cmp	r4, r6
240051d4:	bf08      	it	eq
240051d6:	f040 0001 	orreq.w	r0, r0, #1
240051da:	b910      	cbnz	r0, 240051e2 <HAL_DMA_Start_IT+0x142>
240051dc:	4864      	ldr	r0, [pc, #400]	; (24005370 <HAL_DMA_Start_IT+0x2d0>)
240051de:	4284      	cmp	r4, r0
240051e0:	d10a      	bne.n	240051f8 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240051e2:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
240051e6:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
240051e8:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
240051ec:	b110      	cbz	r0, 240051f4 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240051ee:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
240051f2:	6044      	str	r4, [r0, #4]
240051f4:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240051f8:	485b      	ldr	r0, [pc, #364]	; (24005368 <HAL_DMA_Start_IT+0x2c8>)
240051fa:	4e5a      	ldr	r6, [pc, #360]	; (24005364 <HAL_DMA_Start_IT+0x2c4>)
240051fc:	42b4      	cmp	r4, r6
240051fe:	bf18      	it	ne
24005200:	4284      	cmpne	r4, r0
24005202:	f106 0618 	add.w	r6, r6, #24
24005206:	bf0c      	ite	eq
24005208:	2001      	moveq	r0, #1
2400520a:	2000      	movne	r0, #0
2400520c:	42b4      	cmp	r4, r6
2400520e:	bf08      	it	eq
24005210:	f040 0001 	orreq.w	r0, r0, #1
24005214:	3618      	adds	r6, #24
24005216:	42b4      	cmp	r4, r6
24005218:	bf08      	it	eq
2400521a:	f040 0001 	orreq.w	r0, r0, #1
2400521e:	3618      	adds	r6, #24
24005220:	42b4      	cmp	r4, r6
24005222:	bf08      	it	eq
24005224:	f040 0001 	orreq.w	r0, r0, #1
24005228:	3618      	adds	r6, #24
2400522a:	42b4      	cmp	r4, r6
2400522c:	bf08      	it	eq
2400522e:	f040 0001 	orreq.w	r0, r0, #1
24005232:	3618      	adds	r6, #24
24005234:	42b4      	cmp	r4, r6
24005236:	bf08      	it	eq
24005238:	f040 0001 	orreq.w	r0, r0, #1
2400523c:	3618      	adds	r6, #24
2400523e:	42b4      	cmp	r4, r6
24005240:	bf08      	it	eq
24005242:	f040 0001 	orreq.w	r0, r0, #1
24005246:	f506 7656 	add.w	r6, r6, #856	; 0x358
2400524a:	42b4      	cmp	r4, r6
2400524c:	bf08      	it	eq
2400524e:	f040 0001 	orreq.w	r0, r0, #1
24005252:	3618      	adds	r6, #24
24005254:	42b4      	cmp	r4, r6
24005256:	bf08      	it	eq
24005258:	f040 0001 	orreq.w	r0, r0, #1
2400525c:	3618      	adds	r6, #24
2400525e:	42b4      	cmp	r4, r6
24005260:	bf08      	it	eq
24005262:	f040 0001 	orreq.w	r0, r0, #1
24005266:	3618      	adds	r6, #24
24005268:	42b4      	cmp	r4, r6
2400526a:	bf08      	it	eq
2400526c:	f040 0001 	orreq.w	r0, r0, #1
24005270:	3618      	adds	r6, #24
24005272:	42b4      	cmp	r4, r6
24005274:	bf08      	it	eq
24005276:	f040 0001 	orreq.w	r0, r0, #1
2400527a:	3618      	adds	r6, #24
2400527c:	42b4      	cmp	r4, r6
2400527e:	bf08      	it	eq
24005280:	f040 0001 	orreq.w	r0, r0, #1
24005284:	3618      	adds	r6, #24
24005286:	42b4      	cmp	r4, r6
24005288:	bf08      	it	eq
2400528a:	f040 0001 	orreq.w	r0, r0, #1
2400528e:	b918      	cbnz	r0, 24005298 <HAL_DMA_Start_IT+0x1f8>
24005290:	4838      	ldr	r0, [pc, #224]	; (24005374 <HAL_DMA_Start_IT+0x2d4>)
24005292:	4284      	cmp	r4, r0
24005294:	f040 817b 	bne.w	2400558e <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24005298:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
2400529c:	f000 041f 	and.w	r4, r0, #31
240052a0:	203f      	movs	r0, #63	; 0x3f
240052a2:	40a0      	lsls	r0, r4
240052a4:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
240052a6:	f8dc 4000 	ldr.w	r4, [ip]
240052aa:	6820      	ldr	r0, [r4, #0]
240052ac:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
240052b0:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
240052b2:	f8dc 0000 	ldr.w	r0, [ip]
240052b6:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
240052b8:	f8dc 3008 	ldr.w	r3, [ip, #8]
240052bc:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
240052be:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
240052c2:	f000 815b 	beq.w	2400557c <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
240052c6:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
240052c8:	f8dc 3000 	ldr.w	r3, [ip]
240052cc:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
240052ce:	f8dc 4000 	ldr.w	r4, [ip]
240052d2:	4b25      	ldr	r3, [pc, #148]	; (24005368 <HAL_DMA_Start_IT+0x2c8>)
240052d4:	4923      	ldr	r1, [pc, #140]	; (24005364 <HAL_DMA_Start_IT+0x2c4>)
240052d6:	4a28      	ldr	r2, [pc, #160]	; (24005378 <HAL_DMA_Start_IT+0x2d8>)
240052d8:	428c      	cmp	r4, r1
240052da:	bf18      	it	ne
240052dc:	429c      	cmpne	r4, r3
240052de:	f101 0130 	add.w	r1, r1, #48	; 0x30
240052e2:	bf0c      	ite	eq
240052e4:	2301      	moveq	r3, #1
240052e6:	2300      	movne	r3, #0
240052e8:	4294      	cmp	r4, r2
240052ea:	bf08      	it	eq
240052ec:	f043 0301 	orreq.w	r3, r3, #1
240052f0:	3230      	adds	r2, #48	; 0x30
240052f2:	428c      	cmp	r4, r1
240052f4:	bf08      	it	eq
240052f6:	f043 0301 	orreq.w	r3, r3, #1
240052fa:	3130      	adds	r1, #48	; 0x30
240052fc:	4294      	cmp	r4, r2
240052fe:	bf08      	it	eq
24005300:	f043 0301 	orreq.w	r3, r3, #1
24005304:	3230      	adds	r2, #48	; 0x30
24005306:	428c      	cmp	r4, r1
24005308:	bf08      	it	eq
2400530a:	f043 0301 	orreq.w	r3, r3, #1
2400530e:	3130      	adds	r1, #48	; 0x30
24005310:	4294      	cmp	r4, r2
24005312:	bf08      	it	eq
24005314:	f043 0301 	orreq.w	r3, r3, #1
24005318:	f502 725c 	add.w	r2, r2, #880	; 0x370
2400531c:	428c      	cmp	r4, r1
2400531e:	bf08      	it	eq
24005320:	f043 0301 	orreq.w	r3, r3, #1
24005324:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005328:	4294      	cmp	r4, r2
2400532a:	bf08      	it	eq
2400532c:	f043 0301 	orreq.w	r3, r3, #1
24005330:	3230      	adds	r2, #48	; 0x30
24005332:	428c      	cmp	r4, r1
24005334:	bf08      	it	eq
24005336:	f043 0301 	orreq.w	r3, r3, #1
2400533a:	3130      	adds	r1, #48	; 0x30
2400533c:	4294      	cmp	r4, r2
2400533e:	bf08      	it	eq
24005340:	f043 0301 	orreq.w	r3, r3, #1
24005344:	3230      	adds	r2, #48	; 0x30
24005346:	428c      	cmp	r4, r1
24005348:	bf08      	it	eq
2400534a:	f043 0301 	orreq.w	r3, r3, #1
2400534e:	3130      	adds	r1, #48	; 0x30
24005350:	4294      	cmp	r4, r2
24005352:	bf08      	it	eq
24005354:	f043 0301 	orreq.w	r3, r3, #1
24005358:	3230      	adds	r2, #48	; 0x30
2400535a:	428c      	cmp	r4, r1
2400535c:	bf08      	it	eq
2400535e:	f043 0301 	orreq.w	r3, r3, #1
24005362:	e00b      	b.n	2400537c <HAL_DMA_Start_IT+0x2dc>
24005364:	40020028 	.word	0x40020028
24005368:	40020010 	.word	0x40020010
2400536c:	58025408 	.word	0x58025408
24005370:	58025494 	.word	0x58025494
24005374:	400204b8 	.word	0x400204b8
24005378:	40020040 	.word	0x40020040
2400537c:	4294      	cmp	r4, r2
2400537e:	bf08      	it	eq
24005380:	f043 0301 	orreq.w	r3, r3, #1
24005384:	b91b      	cbnz	r3, 2400538e <HAL_DMA_Start_IT+0x2ee>
24005386:	4b9b      	ldr	r3, [pc, #620]	; (240055f4 <HAL_DMA_Start_IT+0x554>)
24005388:	429c      	cmp	r4, r3
2400538a:	f040 8143 	bne.w	24005614 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
2400538e:	6823      	ldr	r3, [r4, #0]
24005390:	f023 031e 	bic.w	r3, r3, #30
24005394:	f043 0316 	orr.w	r3, r3, #22
24005398:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
2400539a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
2400539e:	b12b      	cbz	r3, 240053ac <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
240053a0:	f8dc 2000 	ldr.w	r2, [ip]
240053a4:	6813      	ldr	r3, [r2, #0]
240053a6:	f043 0308 	orr.w	r3, r3, #8
240053aa:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240053ac:	f8dc 4000 	ldr.w	r4, [ip]
240053b0:	4b91      	ldr	r3, [pc, #580]	; (240055f8 <HAL_DMA_Start_IT+0x558>)
240053b2:	4992      	ldr	r1, [pc, #584]	; (240055fc <HAL_DMA_Start_IT+0x55c>)
240053b4:	4a92      	ldr	r2, [pc, #584]	; (24005600 <HAL_DMA_Start_IT+0x560>)
240053b6:	428c      	cmp	r4, r1
240053b8:	bf18      	it	ne
240053ba:	429c      	cmpne	r4, r3
240053bc:	f101 0130 	add.w	r1, r1, #48	; 0x30
240053c0:	bf0c      	ite	eq
240053c2:	2301      	moveq	r3, #1
240053c4:	2300      	movne	r3, #0
240053c6:	4294      	cmp	r4, r2
240053c8:	bf08      	it	eq
240053ca:	f043 0301 	orreq.w	r3, r3, #1
240053ce:	3230      	adds	r2, #48	; 0x30
240053d0:	428c      	cmp	r4, r1
240053d2:	bf08      	it	eq
240053d4:	f043 0301 	orreq.w	r3, r3, #1
240053d8:	3130      	adds	r1, #48	; 0x30
240053da:	4294      	cmp	r4, r2
240053dc:	bf08      	it	eq
240053de:	f043 0301 	orreq.w	r3, r3, #1
240053e2:	3230      	adds	r2, #48	; 0x30
240053e4:	428c      	cmp	r4, r1
240053e6:	bf08      	it	eq
240053e8:	f043 0301 	orreq.w	r3, r3, #1
240053ec:	3130      	adds	r1, #48	; 0x30
240053ee:	4294      	cmp	r4, r2
240053f0:	bf08      	it	eq
240053f2:	f043 0301 	orreq.w	r3, r3, #1
240053f6:	f502 725c 	add.w	r2, r2, #880	; 0x370
240053fa:	428c      	cmp	r4, r1
240053fc:	bf08      	it	eq
240053fe:	f043 0301 	orreq.w	r3, r3, #1
24005402:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005406:	4294      	cmp	r4, r2
24005408:	bf08      	it	eq
2400540a:	f043 0301 	orreq.w	r3, r3, #1
2400540e:	3230      	adds	r2, #48	; 0x30
24005410:	428c      	cmp	r4, r1
24005412:	bf08      	it	eq
24005414:	f043 0301 	orreq.w	r3, r3, #1
24005418:	3130      	adds	r1, #48	; 0x30
2400541a:	4294      	cmp	r4, r2
2400541c:	bf08      	it	eq
2400541e:	f043 0301 	orreq.w	r3, r3, #1
24005422:	3230      	adds	r2, #48	; 0x30
24005424:	428c      	cmp	r4, r1
24005426:	bf08      	it	eq
24005428:	f043 0301 	orreq.w	r3, r3, #1
2400542c:	3130      	adds	r1, #48	; 0x30
2400542e:	4294      	cmp	r4, r2
24005430:	bf08      	it	eq
24005432:	f043 0301 	orreq.w	r3, r3, #1
24005436:	3230      	adds	r2, #48	; 0x30
24005438:	428c      	cmp	r4, r1
2400543a:	bf08      	it	eq
2400543c:	f043 0301 	orreq.w	r3, r3, #1
24005440:	3130      	adds	r1, #48	; 0x30
24005442:	4294      	cmp	r4, r2
24005444:	bf08      	it	eq
24005446:	f043 0301 	orreq.w	r3, r3, #1
2400544a:	4a6e      	ldr	r2, [pc, #440]	; (24005604 <HAL_DMA_Start_IT+0x564>)
2400544c:	428c      	cmp	r4, r1
2400544e:	bf08      	it	eq
24005450:	f043 0301 	orreq.w	r3, r3, #1
24005454:	496c      	ldr	r1, [pc, #432]	; (24005608 <HAL_DMA_Start_IT+0x568>)
24005456:	4294      	cmp	r4, r2
24005458:	bf08      	it	eq
2400545a:	f043 0301 	orreq.w	r3, r3, #1
2400545e:	3228      	adds	r2, #40	; 0x28
24005460:	428c      	cmp	r4, r1
24005462:	bf08      	it	eq
24005464:	f043 0301 	orreq.w	r3, r3, #1
24005468:	3128      	adds	r1, #40	; 0x28
2400546a:	4294      	cmp	r4, r2
2400546c:	bf08      	it	eq
2400546e:	f043 0301 	orreq.w	r3, r3, #1
24005472:	3228      	adds	r2, #40	; 0x28
24005474:	428c      	cmp	r4, r1
24005476:	bf08      	it	eq
24005478:	f043 0301 	orreq.w	r3, r3, #1
2400547c:	3128      	adds	r1, #40	; 0x28
2400547e:	4294      	cmp	r4, r2
24005480:	bf08      	it	eq
24005482:	f043 0301 	orreq.w	r3, r3, #1
24005486:	3228      	adds	r2, #40	; 0x28
24005488:	428c      	cmp	r4, r1
2400548a:	bf08      	it	eq
2400548c:	f043 0301 	orreq.w	r3, r3, #1
24005490:	4294      	cmp	r4, r2
24005492:	bf08      	it	eq
24005494:	f043 0301 	orreq.w	r3, r3, #1
24005498:	b913      	cbnz	r3, 240054a0 <HAL_DMA_Start_IT+0x400>
2400549a:	4b5c      	ldr	r3, [pc, #368]	; (2400560c <HAL_DMA_Start_IT+0x56c>)
2400549c:	429c      	cmp	r4, r3
2400549e:	d111      	bne.n	240054c4 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
240054a0:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
240054a4:	681a      	ldr	r2, [r3, #0]
240054a6:	03d2      	lsls	r2, r2, #15
240054a8:	d503      	bpl.n	240054b2 <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
240054aa:	681a      	ldr	r2, [r3, #0]
240054ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240054b0:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
240054b2:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
240054b6:	b11b      	cbz	r3, 240054c0 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
240054b8:	681a      	ldr	r2, [r3, #0]
240054ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
240054be:	601a      	str	r2, [r3, #0]
240054c0:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
240054c4:	4b4c      	ldr	r3, [pc, #304]	; (240055f8 <HAL_DMA_Start_IT+0x558>)
240054c6:	494d      	ldr	r1, [pc, #308]	; (240055fc <HAL_DMA_Start_IT+0x55c>)
240054c8:	4a4d      	ldr	r2, [pc, #308]	; (24005600 <HAL_DMA_Start_IT+0x560>)
240054ca:	428c      	cmp	r4, r1
240054cc:	bf18      	it	ne
240054ce:	429c      	cmpne	r4, r3
240054d0:	484f      	ldr	r0, [pc, #316]	; (24005610 <HAL_DMA_Start_IT+0x570>)
240054d2:	f101 0160 	add.w	r1, r1, #96	; 0x60
240054d6:	bf0c      	ite	eq
240054d8:	2301      	moveq	r3, #1
240054da:	2300      	movne	r3, #0
240054dc:	4294      	cmp	r4, r2
240054de:	bf08      	it	eq
240054e0:	f043 0301 	orreq.w	r3, r3, #1
240054e4:	3230      	adds	r2, #48	; 0x30
240054e6:	4284      	cmp	r4, r0
240054e8:	bf08      	it	eq
240054ea:	f043 0301 	orreq.w	r3, r3, #1
240054ee:	3060      	adds	r0, #96	; 0x60
240054f0:	4294      	cmp	r4, r2
240054f2:	bf08      	it	eq
240054f4:	f043 0301 	orreq.w	r3, r3, #1
240054f8:	3230      	adds	r2, #48	; 0x30
240054fa:	428c      	cmp	r4, r1
240054fc:	bf08      	it	eq
240054fe:	f043 0301 	orreq.w	r3, r3, #1
24005502:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
24005506:	4294      	cmp	r4, r2
24005508:	bf08      	it	eq
2400550a:	f043 0301 	orreq.w	r3, r3, #1
2400550e:	f502 725c 	add.w	r2, r2, #880	; 0x370
24005512:	4284      	cmp	r4, r0
24005514:	bf08      	it	eq
24005516:	f043 0301 	orreq.w	r3, r3, #1
2400551a:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
2400551e:	4294      	cmp	r4, r2
24005520:	bf08      	it	eq
24005522:	f043 0301 	orreq.w	r3, r3, #1
24005526:	3230      	adds	r2, #48	; 0x30
24005528:	428c      	cmp	r4, r1
2400552a:	bf08      	it	eq
2400552c:	f043 0301 	orreq.w	r3, r3, #1
24005530:	3160      	adds	r1, #96	; 0x60
24005532:	4294      	cmp	r4, r2
24005534:	bf08      	it	eq
24005536:	f043 0301 	orreq.w	r3, r3, #1
2400553a:	3230      	adds	r2, #48	; 0x30
2400553c:	4284      	cmp	r4, r0
2400553e:	bf08      	it	eq
24005540:	f043 0301 	orreq.w	r3, r3, #1
24005544:	4294      	cmp	r4, r2
24005546:	bf08      	it	eq
24005548:	f043 0301 	orreq.w	r3, r3, #1
2400554c:	3230      	adds	r2, #48	; 0x30
2400554e:	428c      	cmp	r4, r1
24005550:	bf08      	it	eq
24005552:	f043 0301 	orreq.w	r3, r3, #1
24005556:	4294      	cmp	r4, r2
24005558:	bf08      	it	eq
2400555a:	f043 0301 	orreq.w	r3, r3, #1
2400555e:	b933      	cbnz	r3, 2400556e <HAL_DMA_Start_IT+0x4ce>
24005560:	3060      	adds	r0, #96	; 0x60
24005562:	1a20      	subs	r0, r4, r0
24005564:	fab0 f080 	clz	r0, r0
24005568:	0940      	lsrs	r0, r0, #5
2400556a:	2800      	cmp	r0, #0
2400556c:	d03d      	beq.n	240055ea <HAL_DMA_Start_IT+0x54a>
2400556e:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
24005570:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
24005572:	f043 0301 	orr.w	r3, r3, #1
24005576:	6023      	str	r3, [r4, #0]
}
24005578:	bc70      	pop	{r4, r5, r6}
2400557a:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
2400557c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
2400557e:	f8dc 3000 	ldr.w	r3, [ip]
24005582:	60d9      	str	r1, [r3, #12]
24005584:	e6a3      	b.n	240052ce <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
24005586:	2001      	movs	r0, #1
24005588:	4770      	bx	lr
  __HAL_LOCK(hdma);
2400558a:	2002      	movs	r0, #2
}
2400558c:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
2400558e:	481d      	ldr	r0, [pc, #116]	; (24005604 <HAL_DMA_Start_IT+0x564>)
24005590:	4e1d      	ldr	r6, [pc, #116]	; (24005608 <HAL_DMA_Start_IT+0x568>)
24005592:	42b4      	cmp	r4, r6
24005594:	bf18      	it	ne
24005596:	4284      	cmpne	r4, r0
24005598:	f106 0614 	add.w	r6, r6, #20
2400559c:	bf0c      	ite	eq
2400559e:	2001      	moveq	r0, #1
240055a0:	2000      	movne	r0, #0
240055a2:	42b4      	cmp	r4, r6
240055a4:	bf08      	it	eq
240055a6:	f040 0001 	orreq.w	r0, r0, #1
240055aa:	3614      	adds	r6, #20
240055ac:	42b4      	cmp	r4, r6
240055ae:	bf08      	it	eq
240055b0:	f040 0001 	orreq.w	r0, r0, #1
240055b4:	3614      	adds	r6, #20
240055b6:	42b4      	cmp	r4, r6
240055b8:	bf08      	it	eq
240055ba:	f040 0001 	orreq.w	r0, r0, #1
240055be:	3614      	adds	r6, #20
240055c0:	42b4      	cmp	r4, r6
240055c2:	bf08      	it	eq
240055c4:	f040 0001 	orreq.w	r0, r0, #1
240055c8:	3614      	adds	r6, #20
240055ca:	42b4      	cmp	r4, r6
240055cc:	bf08      	it	eq
240055ce:	f040 0001 	orreq.w	r0, r0, #1
240055d2:	b910      	cbnz	r0, 240055da <HAL_DMA_Start_IT+0x53a>
240055d4:	480d      	ldr	r0, [pc, #52]	; (2400560c <HAL_DMA_Start_IT+0x56c>)
240055d6:	4284      	cmp	r4, r0
240055d8:	d11c      	bne.n	24005614 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
240055da:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
240055de:	f000 041f 	and.w	r4, r0, #31
240055e2:	2001      	movs	r0, #1
240055e4:	40a0      	lsls	r0, r4
240055e6:	6068      	str	r0, [r5, #4]
240055e8:	e663      	b.n	240052b2 <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
240055ea:	6823      	ldr	r3, [r4, #0]
240055ec:	f043 0301 	orr.w	r3, r3, #1
240055f0:	6023      	str	r3, [r4, #0]
240055f2:	e56d      	b.n	240050d0 <HAL_DMA_Start_IT+0x30>
240055f4:	400204b8 	.word	0x400204b8
240055f8:	40020010 	.word	0x40020010
240055fc:	40020028 	.word	0x40020028
24005600:	40020040 	.word	0x40020040
24005604:	58025408 	.word	0x58025408
24005608:	5802541c 	.word	0x5802541c
2400560c:	58025494 	.word	0x58025494
24005610:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
24005614:	6823      	ldr	r3, [r4, #0]
24005616:	f023 030e 	bic.w	r3, r3, #14
2400561a:	f043 030a 	orr.w	r3, r3, #10
2400561e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
24005620:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
24005624:	2b00      	cmp	r3, #0
24005626:	f43f aec1 	beq.w	240053ac <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
2400562a:	f8dc 2000 	ldr.w	r2, [ip]
2400562e:	6813      	ldr	r3, [r2, #0]
24005630:	f043 0304 	orr.w	r3, r3, #4
24005634:	6013      	str	r3, [r2, #0]
24005636:	e6b9      	b.n	240053ac <HAL_DMA_Start_IT+0x30c>

24005638 <HAL_DMA_Abort>:
{
24005638:	b570      	push	{r4, r5, r6, lr}
2400563a:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
2400563c:	f7ff f914 	bl	24004868 <HAL_GetTick>
  if(hdma == NULL)
24005640:	2e00      	cmp	r6, #0
24005642:	f000 81ef 	beq.w	24005a24 <HAL_DMA_Abort+0x3ec>
  if(hdma->State != HAL_DMA_STATE_BUSY)
24005646:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
2400564a:	2b02      	cmp	r3, #2
2400564c:	f040 81d9 	bne.w	24005a02 <HAL_DMA_Abort+0x3ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005650:	6832      	ldr	r2, [r6, #0]
24005652:	4604      	mov	r4, r0
24005654:	4b6e      	ldr	r3, [pc, #440]	; (24005810 <HAL_DMA_Abort+0x1d8>)
24005656:	496f      	ldr	r1, [pc, #444]	; (24005814 <HAL_DMA_Abort+0x1dc>)
24005658:	428a      	cmp	r2, r1
2400565a:	bf18      	it	ne
2400565c:	429a      	cmpne	r2, r3
2400565e:	f101 0118 	add.w	r1, r1, #24
24005662:	bf0c      	ite	eq
24005664:	2301      	moveq	r3, #1
24005666:	2300      	movne	r3, #0
24005668:	428a      	cmp	r2, r1
2400566a:	bf08      	it	eq
2400566c:	f043 0301 	orreq.w	r3, r3, #1
24005670:	3118      	adds	r1, #24
24005672:	428a      	cmp	r2, r1
24005674:	bf08      	it	eq
24005676:	f043 0301 	orreq.w	r3, r3, #1
2400567a:	3118      	adds	r1, #24
2400567c:	428a      	cmp	r2, r1
2400567e:	bf08      	it	eq
24005680:	f043 0301 	orreq.w	r3, r3, #1
24005684:	3118      	adds	r1, #24
24005686:	428a      	cmp	r2, r1
24005688:	bf08      	it	eq
2400568a:	f043 0301 	orreq.w	r3, r3, #1
2400568e:	3118      	adds	r1, #24
24005690:	428a      	cmp	r2, r1
24005692:	bf08      	it	eq
24005694:	f043 0301 	orreq.w	r3, r3, #1
24005698:	3118      	adds	r1, #24
2400569a:	428a      	cmp	r2, r1
2400569c:	bf08      	it	eq
2400569e:	f043 0301 	orreq.w	r3, r3, #1
240056a2:	f501 7156 	add.w	r1, r1, #856	; 0x358
240056a6:	428a      	cmp	r2, r1
240056a8:	bf08      	it	eq
240056aa:	f043 0301 	orreq.w	r3, r3, #1
240056ae:	3118      	adds	r1, #24
240056b0:	428a      	cmp	r2, r1
240056b2:	bf08      	it	eq
240056b4:	f043 0301 	orreq.w	r3, r3, #1
240056b8:	3118      	adds	r1, #24
240056ba:	428a      	cmp	r2, r1
240056bc:	bf08      	it	eq
240056be:	f043 0301 	orreq.w	r3, r3, #1
240056c2:	3118      	adds	r1, #24
240056c4:	428a      	cmp	r2, r1
240056c6:	bf08      	it	eq
240056c8:	f043 0301 	orreq.w	r3, r3, #1
240056cc:	3118      	adds	r1, #24
240056ce:	428a      	cmp	r2, r1
240056d0:	bf08      	it	eq
240056d2:	f043 0301 	orreq.w	r3, r3, #1
240056d6:	3118      	adds	r1, #24
240056d8:	428a      	cmp	r2, r1
240056da:	bf08      	it	eq
240056dc:	f043 0301 	orreq.w	r3, r3, #1
240056e0:	3118      	adds	r1, #24
240056e2:	428a      	cmp	r2, r1
240056e4:	bf08      	it	eq
240056e6:	f043 0301 	orreq.w	r3, r3, #1
240056ea:	b91b      	cbnz	r3, 240056f4 <HAL_DMA_Abort+0xbc>
240056ec:	4b4a      	ldr	r3, [pc, #296]	; (24005818 <HAL_DMA_Abort+0x1e0>)
240056ee:	429a      	cmp	r2, r3
240056f0:	f040 81a2 	bne.w	24005a38 <HAL_DMA_Abort+0x400>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
240056f4:	6813      	ldr	r3, [r2, #0]
240056f6:	f023 031e 	bic.w	r3, r3, #30
240056fa:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
240056fc:	6832      	ldr	r2, [r6, #0]
240056fe:	6953      	ldr	r3, [r2, #20]
24005700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24005704:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
24005706:	6832      	ldr	r2, [r6, #0]
24005708:	4615      	mov	r5, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
2400570a:	4b41      	ldr	r3, [pc, #260]	; (24005810 <HAL_DMA_Abort+0x1d8>)
2400570c:	4941      	ldr	r1, [pc, #260]	; (24005814 <HAL_DMA_Abort+0x1dc>)
2400570e:	428a      	cmp	r2, r1
24005710:	bf18      	it	ne
24005712:	429a      	cmpne	r2, r3
24005714:	f101 0118 	add.w	r1, r1, #24
24005718:	bf0c      	ite	eq
2400571a:	2301      	moveq	r3, #1
2400571c:	2300      	movne	r3, #0
2400571e:	428a      	cmp	r2, r1
24005720:	bf08      	it	eq
24005722:	f043 0301 	orreq.w	r3, r3, #1
24005726:	3118      	adds	r1, #24
24005728:	428a      	cmp	r2, r1
2400572a:	bf08      	it	eq
2400572c:	f043 0301 	orreq.w	r3, r3, #1
24005730:	3118      	adds	r1, #24
24005732:	428a      	cmp	r2, r1
24005734:	bf08      	it	eq
24005736:	f043 0301 	orreq.w	r3, r3, #1
2400573a:	3118      	adds	r1, #24
2400573c:	428a      	cmp	r2, r1
2400573e:	bf08      	it	eq
24005740:	f043 0301 	orreq.w	r3, r3, #1
24005744:	3118      	adds	r1, #24
24005746:	428a      	cmp	r2, r1
24005748:	bf08      	it	eq
2400574a:	f043 0301 	orreq.w	r3, r3, #1
2400574e:	3118      	adds	r1, #24
24005750:	428a      	cmp	r2, r1
24005752:	bf08      	it	eq
24005754:	f043 0301 	orreq.w	r3, r3, #1
24005758:	f501 7156 	add.w	r1, r1, #856	; 0x358
2400575c:	428a      	cmp	r2, r1
2400575e:	bf08      	it	eq
24005760:	f043 0301 	orreq.w	r3, r3, #1
24005764:	3118      	adds	r1, #24
24005766:	428a      	cmp	r2, r1
24005768:	bf08      	it	eq
2400576a:	f043 0301 	orreq.w	r3, r3, #1
2400576e:	3118      	adds	r1, #24
24005770:	428a      	cmp	r2, r1
24005772:	bf08      	it	eq
24005774:	f043 0301 	orreq.w	r3, r3, #1
24005778:	3118      	adds	r1, #24
2400577a:	428a      	cmp	r2, r1
2400577c:	bf08      	it	eq
2400577e:	f043 0301 	orreq.w	r3, r3, #1
24005782:	3118      	adds	r1, #24
24005784:	428a      	cmp	r2, r1
24005786:	bf08      	it	eq
24005788:	f043 0301 	orreq.w	r3, r3, #1
2400578c:	3118      	adds	r1, #24
2400578e:	428a      	cmp	r2, r1
24005790:	bf08      	it	eq
24005792:	f043 0301 	orreq.w	r3, r3, #1
24005796:	3118      	adds	r1, #24
24005798:	428a      	cmp	r2, r1
2400579a:	bf08      	it	eq
2400579c:	f043 0301 	orreq.w	r3, r3, #1
240057a0:	3118      	adds	r1, #24
240057a2:	428a      	cmp	r2, r1
240057a4:	bf08      	it	eq
240057a6:	f043 0301 	orreq.w	r3, r3, #1
240057aa:	491c      	ldr	r1, [pc, #112]	; (2400581c <HAL_DMA_Abort+0x1e4>)
240057ac:	428a      	cmp	r2, r1
240057ae:	bf08      	it	eq
240057b0:	f043 0301 	orreq.w	r3, r3, #1
240057b4:	3114      	adds	r1, #20
240057b6:	428a      	cmp	r2, r1
240057b8:	bf08      	it	eq
240057ba:	f043 0301 	orreq.w	r3, r3, #1
240057be:	3114      	adds	r1, #20
240057c0:	428a      	cmp	r2, r1
240057c2:	bf08      	it	eq
240057c4:	f043 0301 	orreq.w	r3, r3, #1
240057c8:	3114      	adds	r1, #20
240057ca:	428a      	cmp	r2, r1
240057cc:	bf08      	it	eq
240057ce:	f043 0301 	orreq.w	r3, r3, #1
240057d2:	3114      	adds	r1, #20
240057d4:	428a      	cmp	r2, r1
240057d6:	bf08      	it	eq
240057d8:	f043 0301 	orreq.w	r3, r3, #1
240057dc:	3114      	adds	r1, #20
240057de:	428a      	cmp	r2, r1
240057e0:	bf08      	it	eq
240057e2:	f043 0301 	orreq.w	r3, r3, #1
240057e6:	3114      	adds	r1, #20
240057e8:	428a      	cmp	r2, r1
240057ea:	bf08      	it	eq
240057ec:	f043 0301 	orreq.w	r3, r3, #1
240057f0:	b913      	cbnz	r3, 240057f8 <HAL_DMA_Abort+0x1c0>
240057f2:	4b0b      	ldr	r3, [pc, #44]	; (24005820 <HAL_DMA_Abort+0x1e8>)
240057f4:	429a      	cmp	r2, r3
240057f6:	d105      	bne.n	24005804 <HAL_DMA_Abort+0x1cc>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240057f8:	6e32      	ldr	r2, [r6, #96]	; 0x60
240057fa:	6813      	ldr	r3, [r2, #0]
240057fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24005800:	6013      	str	r3, [r2, #0]
24005802:	6832      	ldr	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
24005804:	6813      	ldr	r3, [r2, #0]
24005806:	f023 0301 	bic.w	r3, r3, #1
2400580a:	6013      	str	r3, [r2, #0]
2400580c:	e010      	b.n	24005830 <HAL_DMA_Abort+0x1f8>
2400580e:	bf00      	nop
24005810:	40020010 	.word	0x40020010
24005814:	40020028 	.word	0x40020028
24005818:	400204b8 	.word	0x400204b8
2400581c:	58025408 	.word	0x58025408
24005820:	58025494 	.word	0x58025494
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
24005824:	f7ff f820 	bl	24004868 <HAL_GetTick>
24005828:	1b00      	subs	r0, r0, r4
2400582a:	2805      	cmp	r0, #5
2400582c:	f200 80f0 	bhi.w	24005a10 <HAL_DMA_Abort+0x3d8>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
24005830:	682b      	ldr	r3, [r5, #0]
24005832:	07db      	lsls	r3, r3, #31
24005834:	d4f6      	bmi.n	24005824 <HAL_DMA_Abort+0x1ec>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005836:	6832      	ldr	r2, [r6, #0]
24005838:	4b83      	ldr	r3, [pc, #524]	; (24005a48 <HAL_DMA_Abort+0x410>)
2400583a:	4884      	ldr	r0, [pc, #528]	; (24005a4c <HAL_DMA_Abort+0x414>)
2400583c:	4984      	ldr	r1, [pc, #528]	; (24005a50 <HAL_DMA_Abort+0x418>)
2400583e:	4282      	cmp	r2, r0
24005840:	bf18      	it	ne
24005842:	429a      	cmpne	r2, r3
24005844:	f100 0030 	add.w	r0, r0, #48	; 0x30
24005848:	bf0c      	ite	eq
2400584a:	2301      	moveq	r3, #1
2400584c:	2300      	movne	r3, #0
2400584e:	428a      	cmp	r2, r1
24005850:	bf08      	it	eq
24005852:	f043 0301 	orreq.w	r3, r3, #1
24005856:	3130      	adds	r1, #48	; 0x30
24005858:	4282      	cmp	r2, r0
2400585a:	bf08      	it	eq
2400585c:	f043 0301 	orreq.w	r3, r3, #1
24005860:	3030      	adds	r0, #48	; 0x30
24005862:	428a      	cmp	r2, r1
24005864:	bf08      	it	eq
24005866:	f043 0301 	orreq.w	r3, r3, #1
2400586a:	3130      	adds	r1, #48	; 0x30
2400586c:	4282      	cmp	r2, r0
2400586e:	bf08      	it	eq
24005870:	f043 0301 	orreq.w	r3, r3, #1
24005874:	3030      	adds	r0, #48	; 0x30
24005876:	428a      	cmp	r2, r1
24005878:	bf08      	it	eq
2400587a:	f043 0301 	orreq.w	r3, r3, #1
2400587e:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005882:	4282      	cmp	r2, r0
24005884:	bf08      	it	eq
24005886:	f043 0301 	orreq.w	r3, r3, #1
2400588a:	f500 705c 	add.w	r0, r0, #880	; 0x370
2400588e:	428a      	cmp	r2, r1
24005890:	bf08      	it	eq
24005892:	f043 0301 	orreq.w	r3, r3, #1
24005896:	3130      	adds	r1, #48	; 0x30
24005898:	4282      	cmp	r2, r0
2400589a:	bf08      	it	eq
2400589c:	f043 0301 	orreq.w	r3, r3, #1
240058a0:	3030      	adds	r0, #48	; 0x30
240058a2:	428a      	cmp	r2, r1
240058a4:	bf08      	it	eq
240058a6:	f043 0301 	orreq.w	r3, r3, #1
240058aa:	3130      	adds	r1, #48	; 0x30
240058ac:	4282      	cmp	r2, r0
240058ae:	bf08      	it	eq
240058b0:	f043 0301 	orreq.w	r3, r3, #1
240058b4:	3030      	adds	r0, #48	; 0x30
240058b6:	428a      	cmp	r2, r1
240058b8:	bf08      	it	eq
240058ba:	f043 0301 	orreq.w	r3, r3, #1
240058be:	3130      	adds	r1, #48	; 0x30
240058c0:	4282      	cmp	r2, r0
240058c2:	bf08      	it	eq
240058c4:	f043 0301 	orreq.w	r3, r3, #1
240058c8:	428a      	cmp	r2, r1
240058ca:	bf08      	it	eq
240058cc:	f043 0301 	orreq.w	r3, r3, #1
240058d0:	b91b      	cbnz	r3, 240058da <HAL_DMA_Abort+0x2a2>
240058d2:	4b60      	ldr	r3, [pc, #384]	; (24005a54 <HAL_DMA_Abort+0x41c>)
240058d4:	429a      	cmp	r2, r3
240058d6:	f040 80a7 	bne.w	24005a28 <HAL_DMA_Abort+0x3f0>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240058da:	6df2      	ldr	r2, [r6, #92]	; 0x5c
240058dc:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
240058de:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240058e0:	f002 021f 	and.w	r2, r2, #31
240058e4:	4093      	lsls	r3, r2
240058e6:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
240058e8:	6832      	ldr	r2, [r6, #0]
240058ea:	4b57      	ldr	r3, [pc, #348]	; (24005a48 <HAL_DMA_Abort+0x410>)
240058ec:	4857      	ldr	r0, [pc, #348]	; (24005a4c <HAL_DMA_Abort+0x414>)
240058ee:	4958      	ldr	r1, [pc, #352]	; (24005a50 <HAL_DMA_Abort+0x418>)
240058f0:	4282      	cmp	r2, r0
240058f2:	bf18      	it	ne
240058f4:	429a      	cmpne	r2, r3
240058f6:	f100 0030 	add.w	r0, r0, #48	; 0x30
240058fa:	bf0c      	ite	eq
240058fc:	2301      	moveq	r3, #1
240058fe:	2300      	movne	r3, #0
24005900:	428a      	cmp	r2, r1
24005902:	bf08      	it	eq
24005904:	f043 0301 	orreq.w	r3, r3, #1
24005908:	3130      	adds	r1, #48	; 0x30
2400590a:	4282      	cmp	r2, r0
2400590c:	bf08      	it	eq
2400590e:	f043 0301 	orreq.w	r3, r3, #1
24005912:	3030      	adds	r0, #48	; 0x30
24005914:	428a      	cmp	r2, r1
24005916:	bf08      	it	eq
24005918:	f043 0301 	orreq.w	r3, r3, #1
2400591c:	3130      	adds	r1, #48	; 0x30
2400591e:	4282      	cmp	r2, r0
24005920:	bf08      	it	eq
24005922:	f043 0301 	orreq.w	r3, r3, #1
24005926:	3030      	adds	r0, #48	; 0x30
24005928:	428a      	cmp	r2, r1
2400592a:	bf08      	it	eq
2400592c:	f043 0301 	orreq.w	r3, r3, #1
24005930:	f501 715c 	add.w	r1, r1, #880	; 0x370
24005934:	4282      	cmp	r2, r0
24005936:	bf08      	it	eq
24005938:	f043 0301 	orreq.w	r3, r3, #1
2400593c:	f500 705c 	add.w	r0, r0, #880	; 0x370
24005940:	428a      	cmp	r2, r1
24005942:	bf08      	it	eq
24005944:	f043 0301 	orreq.w	r3, r3, #1
24005948:	3130      	adds	r1, #48	; 0x30
2400594a:	4282      	cmp	r2, r0
2400594c:	bf08      	it	eq
2400594e:	f043 0301 	orreq.w	r3, r3, #1
24005952:	3030      	adds	r0, #48	; 0x30
24005954:	428a      	cmp	r2, r1
24005956:	bf08      	it	eq
24005958:	f043 0301 	orreq.w	r3, r3, #1
2400595c:	3130      	adds	r1, #48	; 0x30
2400595e:	4282      	cmp	r2, r0
24005960:	bf08      	it	eq
24005962:	f043 0301 	orreq.w	r3, r3, #1
24005966:	3030      	adds	r0, #48	; 0x30
24005968:	428a      	cmp	r2, r1
2400596a:	bf08      	it	eq
2400596c:	f043 0301 	orreq.w	r3, r3, #1
24005970:	3130      	adds	r1, #48	; 0x30
24005972:	4282      	cmp	r2, r0
24005974:	bf08      	it	eq
24005976:	f043 0301 	orreq.w	r3, r3, #1
2400597a:	3030      	adds	r0, #48	; 0x30
2400597c:	428a      	cmp	r2, r1
2400597e:	bf08      	it	eq
24005980:	f043 0301 	orreq.w	r3, r3, #1
24005984:	4934      	ldr	r1, [pc, #208]	; (24005a58 <HAL_DMA_Abort+0x420>)
24005986:	4282      	cmp	r2, r0
24005988:	bf08      	it	eq
2400598a:	f043 0301 	orreq.w	r3, r3, #1
2400598e:	4833      	ldr	r0, [pc, #204]	; (24005a5c <HAL_DMA_Abort+0x424>)
24005990:	428a      	cmp	r2, r1
24005992:	bf08      	it	eq
24005994:	f043 0301 	orreq.w	r3, r3, #1
24005998:	3128      	adds	r1, #40	; 0x28
2400599a:	4282      	cmp	r2, r0
2400599c:	bf08      	it	eq
2400599e:	f043 0301 	orreq.w	r3, r3, #1
240059a2:	3028      	adds	r0, #40	; 0x28
240059a4:	428a      	cmp	r2, r1
240059a6:	bf08      	it	eq
240059a8:	f043 0301 	orreq.w	r3, r3, #1
240059ac:	3128      	adds	r1, #40	; 0x28
240059ae:	4282      	cmp	r2, r0
240059b0:	bf08      	it	eq
240059b2:	f043 0301 	orreq.w	r3, r3, #1
240059b6:	3028      	adds	r0, #40	; 0x28
240059b8:	428a      	cmp	r2, r1
240059ba:	bf08      	it	eq
240059bc:	f043 0301 	orreq.w	r3, r3, #1
240059c0:	3128      	adds	r1, #40	; 0x28
240059c2:	4282      	cmp	r2, r0
240059c4:	bf08      	it	eq
240059c6:	f043 0301 	orreq.w	r3, r3, #1
240059ca:	428a      	cmp	r2, r1
240059cc:	bf08      	it	eq
240059ce:	f043 0301 	orreq.w	r3, r3, #1
240059d2:	b913      	cbnz	r3, 240059da <HAL_DMA_Abort+0x3a2>
240059d4:	4b22      	ldr	r3, [pc, #136]	; (24005a60 <HAL_DMA_Abort+0x428>)
240059d6:	429a      	cmp	r2, r3
240059d8:	d10b      	bne.n	240059f2 <HAL_DMA_Abort+0x3ba>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240059da:	e9d6 3219 	ldrd	r3, r2, [r6, #100]	; 0x64
240059de:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
240059e0:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
240059e2:	b133      	cbz	r3, 240059f2 <HAL_DMA_Abort+0x3ba>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240059e4:	681a      	ldr	r2, [r3, #0]
240059e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240059ea:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240059ec:	e9d6 321c 	ldrd	r3, r2, [r6, #112]	; 0x70
240059f0:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
240059f2:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
240059f4:	2201      	movs	r2, #1
  return HAL_OK;
240059f6:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
240059f8:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
    __HAL_UNLOCK(hdma);
240059fc:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
24005a00:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24005a02:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
24005a04:	2300      	movs	r3, #0
    return HAL_ERROR;
24005a06:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24005a08:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
24005a0a:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
24005a0e:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24005a10:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
24005a12:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
24005a14:	2300      	movs	r3, #0
        return HAL_ERROR;
24005a16:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
24005a18:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
24005a1a:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
24005a1e:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
}
24005a22:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
24005a24:	2001      	movs	r0, #1
}
24005a26:	bd70      	pop	{r4, r5, r6, pc}
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005a28:	6df2      	ldr	r2, [r6, #92]	; 0x5c
24005a2a:	2301      	movs	r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24005a2c:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005a2e:	f002 021f 	and.w	r2, r2, #31
24005a32:	4093      	lsls	r3, r2
24005a34:	604b      	str	r3, [r1, #4]
24005a36:	e757      	b.n	240058e8 <HAL_DMA_Abort+0x2b0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24005a38:	6813      	ldr	r3, [r2, #0]
24005a3a:	f023 030e 	bic.w	r3, r3, #14
24005a3e:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
24005a40:	6832      	ldr	r2, [r6, #0]
24005a42:	4615      	mov	r5, r2
24005a44:	e661      	b.n	2400570a <HAL_DMA_Abort+0xd2>
24005a46:	bf00      	nop
24005a48:	40020010 	.word	0x40020010
24005a4c:	40020028 	.word	0x40020028
24005a50:	40020040 	.word	0x40020040
24005a54:	400204b8 	.word	0x400204b8
24005a58:	58025408 	.word	0x58025408
24005a5c:	5802541c 	.word	0x5802541c
24005a60:	58025494 	.word	0x58025494

24005a64 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
24005a64:	2800      	cmp	r0, #0
24005a66:	d065      	beq.n	24005b34 <HAL_DMA_Abort_IT+0xd0>
{
24005a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
24005a6c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
24005a70:	4603      	mov	r3, r0
24005a72:	2a02      	cmp	r2, #2
24005a74:	d159      	bne.n	24005b2a <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
24005a76:	6801      	ldr	r1, [r0, #0]
24005a78:	4883      	ldr	r0, [pc, #524]	; (24005c88 <HAL_DMA_Abort_IT+0x224>)
24005a7a:	4281      	cmp	r1, r0
24005a7c:	d04b      	beq.n	24005b16 <HAL_DMA_Abort_IT+0xb2>
24005a7e:	4c83      	ldr	r4, [pc, #524]	; (24005c8c <HAL_DMA_Abort_IT+0x228>)
24005a80:	42a1      	cmp	r1, r4
24005a82:	d048      	beq.n	24005b16 <HAL_DMA_Abort_IT+0xb2>
24005a84:	f8df a228 	ldr.w	sl, [pc, #552]	; 24005cb0 <HAL_DMA_Abort_IT+0x24c>
24005a88:	f8df b214 	ldr.w	fp, [pc, #532]	; 24005ca0 <HAL_DMA_Abort_IT+0x23c>
24005a8c:	f8df 9224 	ldr.w	r9, [pc, #548]	; 24005cb4 <HAL_DMA_Abort_IT+0x250>
24005a90:	4559      	cmp	r1, fp
24005a92:	bf18      	it	ne
24005a94:	4551      	cmpne	r1, sl
24005a96:	f8df 8220 	ldr.w	r8, [pc, #544]	; 24005cb8 <HAL_DMA_Abort_IT+0x254>
24005a9a:	f8df e220 	ldr.w	lr, [pc, #544]	; 24005cbc <HAL_DMA_Abort_IT+0x258>
24005a9e:	bf0c      	ite	eq
24005aa0:	2201      	moveq	r2, #1
24005aa2:	2200      	movne	r2, #0
24005aa4:	f8df c218 	ldr.w	ip, [pc, #536]	; 24005cc0 <HAL_DMA_Abort_IT+0x25c>
24005aa8:	4549      	cmp	r1, r9
24005aaa:	bf08      	it	eq
24005aac:	f042 0201 	orreq.w	r2, r2, #1
24005ab0:	4d77      	ldr	r5, [pc, #476]	; (24005c90 <HAL_DMA_Abort_IT+0x22c>)
24005ab2:	4f78      	ldr	r7, [pc, #480]	; (24005c94 <HAL_DMA_Abort_IT+0x230>)
24005ab4:	4541      	cmp	r1, r8
24005ab6:	bf08      	it	eq
24005ab8:	f042 0201 	orreq.w	r2, r2, #1
24005abc:	4e76      	ldr	r6, [pc, #472]	; (24005c98 <HAL_DMA_Abort_IT+0x234>)
24005abe:	4571      	cmp	r1, lr
24005ac0:	bf08      	it	eq
24005ac2:	f042 0201 	orreq.w	r2, r2, #1
24005ac6:	4561      	cmp	r1, ip
24005ac8:	bf08      	it	eq
24005aca:	f042 0201 	orreq.w	r2, r2, #1
24005ace:	42a9      	cmp	r1, r5
24005ad0:	bf08      	it	eq
24005ad2:	f042 0201 	orreq.w	r2, r2, #1
24005ad6:	3518      	adds	r5, #24
24005ad8:	42a9      	cmp	r1, r5
24005ada:	bf08      	it	eq
24005adc:	f042 0201 	orreq.w	r2, r2, #1
24005ae0:	3518      	adds	r5, #24
24005ae2:	42a9      	cmp	r1, r5
24005ae4:	bf08      	it	eq
24005ae6:	f042 0201 	orreq.w	r2, r2, #1
24005aea:	3518      	adds	r5, #24
24005aec:	42a9      	cmp	r1, r5
24005aee:	bf08      	it	eq
24005af0:	f042 0201 	orreq.w	r2, r2, #1
24005af4:	3548      	adds	r5, #72	; 0x48
24005af6:	42b9      	cmp	r1, r7
24005af8:	bf08      	it	eq
24005afa:	f042 0201 	orreq.w	r2, r2, #1
24005afe:	42b1      	cmp	r1, r6
24005b00:	bf08      	it	eq
24005b02:	f042 0201 	orreq.w	r2, r2, #1
24005b06:	42a9      	cmp	r1, r5
24005b08:	bf08      	it	eq
24005b0a:	f042 0201 	orreq.w	r2, r2, #1
24005b0e:	b912      	cbnz	r2, 24005b16 <HAL_DMA_Abort_IT+0xb2>
24005b10:	4a62      	ldr	r2, [pc, #392]	; (24005c9c <HAL_DMA_Abort_IT+0x238>)
24005b12:	4291      	cmp	r1, r2
24005b14:	d110      	bne.n	24005b38 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
24005b16:	2204      	movs	r2, #4
  return HAL_OK;
24005b18:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
24005b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
24005b1e:	680b      	ldr	r3, [r1, #0]
24005b20:	f023 0301 	bic.w	r3, r3, #1
24005b24:	600b      	str	r3, [r1, #0]
}
24005b26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24005b2a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
24005b2c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
24005b2e:	655a      	str	r2, [r3, #84]	; 0x54
}
24005b30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
24005b34:	2001      	movs	r0, #1
}
24005b36:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24005b38:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005b3a:	4c54      	ldr	r4, [pc, #336]	; (24005c8c <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24005b3c:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005b40:	4857      	ldr	r0, [pc, #348]	; (24005ca0 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
24005b42:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
24005b44:	6819      	ldr	r1, [r3, #0]
24005b46:	680a      	ldr	r2, [r1, #0]
24005b48:	f022 0201 	bic.w	r2, r2, #1
24005b4c:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
24005b4e:	4a4e      	ldr	r2, [pc, #312]	; (24005c88 <HAL_DMA_Abort_IT+0x224>)
24005b50:	6819      	ldr	r1, [r3, #0]
24005b52:	42a1      	cmp	r1, r4
24005b54:	bf18      	it	ne
24005b56:	4291      	cmpne	r1, r2
24005b58:	f104 0430 	add.w	r4, r4, #48	; 0x30
24005b5c:	bf0c      	ite	eq
24005b5e:	2201      	moveq	r2, #1
24005b60:	2200      	movne	r2, #0
24005b62:	4281      	cmp	r1, r0
24005b64:	bf08      	it	eq
24005b66:	f042 0201 	orreq.w	r2, r2, #1
24005b6a:	3030      	adds	r0, #48	; 0x30
24005b6c:	42a1      	cmp	r1, r4
24005b6e:	bf08      	it	eq
24005b70:	f042 0201 	orreq.w	r2, r2, #1
24005b74:	3430      	adds	r4, #48	; 0x30
24005b76:	4281      	cmp	r1, r0
24005b78:	bf08      	it	eq
24005b7a:	f042 0201 	orreq.w	r2, r2, #1
24005b7e:	3030      	adds	r0, #48	; 0x30
24005b80:	42a1      	cmp	r1, r4
24005b82:	bf08      	it	eq
24005b84:	f042 0201 	orreq.w	r2, r2, #1
24005b88:	3430      	adds	r4, #48	; 0x30
24005b8a:	4281      	cmp	r1, r0
24005b8c:	bf08      	it	eq
24005b8e:	f042 0201 	orreq.w	r2, r2, #1
24005b92:	f500 705c 	add.w	r0, r0, #880	; 0x370
24005b96:	42a1      	cmp	r1, r4
24005b98:	bf08      	it	eq
24005b9a:	f042 0201 	orreq.w	r2, r2, #1
24005b9e:	f504 745c 	add.w	r4, r4, #880	; 0x370
24005ba2:	4281      	cmp	r1, r0
24005ba4:	bf08      	it	eq
24005ba6:	f042 0201 	orreq.w	r2, r2, #1
24005baa:	3030      	adds	r0, #48	; 0x30
24005bac:	42a1      	cmp	r1, r4
24005bae:	bf08      	it	eq
24005bb0:	f042 0201 	orreq.w	r2, r2, #1
24005bb4:	3430      	adds	r4, #48	; 0x30
24005bb6:	4281      	cmp	r1, r0
24005bb8:	bf08      	it	eq
24005bba:	f042 0201 	orreq.w	r2, r2, #1
24005bbe:	3030      	adds	r0, #48	; 0x30
24005bc0:	42a1      	cmp	r1, r4
24005bc2:	bf08      	it	eq
24005bc4:	f042 0201 	orreq.w	r2, r2, #1
24005bc8:	3430      	adds	r4, #48	; 0x30
24005bca:	4281      	cmp	r1, r0
24005bcc:	bf08      	it	eq
24005bce:	f042 0201 	orreq.w	r2, r2, #1
24005bd2:	3030      	adds	r0, #48	; 0x30
24005bd4:	42a1      	cmp	r1, r4
24005bd6:	bf08      	it	eq
24005bd8:	f042 0201 	orreq.w	r2, r2, #1
24005bdc:	3430      	adds	r4, #48	; 0x30
24005bde:	4281      	cmp	r1, r0
24005be0:	bf08      	it	eq
24005be2:	f042 0201 	orreq.w	r2, r2, #1
24005be6:	482f      	ldr	r0, [pc, #188]	; (24005ca4 <HAL_DMA_Abort_IT+0x240>)
24005be8:	42a1      	cmp	r1, r4
24005bea:	bf08      	it	eq
24005bec:	f042 0201 	orreq.w	r2, r2, #1
24005bf0:	4c2d      	ldr	r4, [pc, #180]	; (24005ca8 <HAL_DMA_Abort_IT+0x244>)
24005bf2:	4281      	cmp	r1, r0
24005bf4:	bf08      	it	eq
24005bf6:	f042 0201 	orreq.w	r2, r2, #1
24005bfa:	3028      	adds	r0, #40	; 0x28
24005bfc:	42a1      	cmp	r1, r4
24005bfe:	bf08      	it	eq
24005c00:	f042 0201 	orreq.w	r2, r2, #1
24005c04:	3428      	adds	r4, #40	; 0x28
24005c06:	4281      	cmp	r1, r0
24005c08:	bf08      	it	eq
24005c0a:	f042 0201 	orreq.w	r2, r2, #1
24005c0e:	3028      	adds	r0, #40	; 0x28
24005c10:	42a1      	cmp	r1, r4
24005c12:	bf08      	it	eq
24005c14:	f042 0201 	orreq.w	r2, r2, #1
24005c18:	3428      	adds	r4, #40	; 0x28
24005c1a:	4281      	cmp	r1, r0
24005c1c:	bf08      	it	eq
24005c1e:	f042 0201 	orreq.w	r2, r2, #1
24005c22:	3028      	adds	r0, #40	; 0x28
24005c24:	42a1      	cmp	r1, r4
24005c26:	bf08      	it	eq
24005c28:	f042 0201 	orreq.w	r2, r2, #1
24005c2c:	4281      	cmp	r1, r0
24005c2e:	bf08      	it	eq
24005c30:	f042 0201 	orreq.w	r2, r2, #1
24005c34:	b912      	cbnz	r2, 24005c3c <HAL_DMA_Abort_IT+0x1d8>
24005c36:	4a1d      	ldr	r2, [pc, #116]	; (24005cac <HAL_DMA_Abort_IT+0x248>)
24005c38:	4291      	cmp	r1, r2
24005c3a:	d117      	bne.n	24005c6c <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24005c3c:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005c3e:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
24005c40:	6801      	ldr	r1, [r0, #0]
24005c42:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24005c46:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
24005c48:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
24005c4c:	f001 011f 	and.w	r1, r1, #31
24005c50:	408a      	lsls	r2, r1
24005c52:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
24005c54:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
24005c58:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
24005c5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
24005c5c:	b132      	cbz	r2, 24005c6c <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
24005c5e:	6811      	ldr	r1, [r2, #0]
24005c60:	f421 7180 	bic.w	r1, r1, #256	; 0x100
24005c64:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
24005c66:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
24005c6a:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
24005c6c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
24005c6e:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
24005c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
24005c72:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
24005c76:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
24005c7a:	b11a      	cbz	r2, 24005c84 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
24005c7c:	4618      	mov	r0, r3
24005c7e:	4790      	blx	r2
  return HAL_OK;
24005c80:	4620      	mov	r0, r4
24005c82:	e755      	b.n	24005b30 <HAL_DMA_Abort_IT+0xcc>
24005c84:	4610      	mov	r0, r2
24005c86:	e753      	b.n	24005b30 <HAL_DMA_Abort_IT+0xcc>
24005c88:	40020010 	.word	0x40020010
24005c8c:	40020028 	.word	0x40020028
24005c90:	40020410 	.word	0x40020410
24005c94:	40020470 	.word	0x40020470
24005c98:	40020488 	.word	0x40020488
24005c9c:	400204b8 	.word	0x400204b8
24005ca0:	40020040 	.word	0x40020040
24005ca4:	58025408 	.word	0x58025408
24005ca8:	5802541c 	.word	0x5802541c
24005cac:	58025494 	.word	0x58025494
24005cb0:	40020058 	.word	0x40020058
24005cb4:	40020070 	.word	0x40020070
24005cb8:	40020088 	.word	0x40020088
24005cbc:	400200a0 	.word	0x400200a0
24005cc0:	400200b8 	.word	0x400200b8

24005cc4 <HAL_DMA_IRQHandler>:
{
24005cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
24005cc6:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
24005cc8:	4b9a      	ldr	r3, [pc, #616]	; (24005f34 <HAL_DMA_IRQHandler+0x270>)
{
24005cca:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
24005ccc:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
24005cce:	681f      	ldr	r7, [r3, #0]
{
24005cd0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
24005cd2:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24005cd4:	6803      	ldr	r3, [r0, #0]
24005cd6:	4a98      	ldr	r2, [pc, #608]	; (24005f38 <HAL_DMA_IRQHandler+0x274>)
  tmpisr_dma  = regs_dma->ISR;
24005cd8:	6835      	ldr	r5, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24005cda:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
24005cdc:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
24005cde:	d048      	beq.n	24005d72 <HAL_DMA_IRQHandler+0xae>
24005ce0:	3218      	adds	r2, #24
24005ce2:	4293      	cmp	r3, r2
24005ce4:	d045      	beq.n	24005d72 <HAL_DMA_IRQHandler+0xae>
24005ce6:	3218      	adds	r2, #24
24005ce8:	4894      	ldr	r0, [pc, #592]	; (24005f3c <HAL_DMA_IRQHandler+0x278>)
24005cea:	4283      	cmp	r3, r0
24005cec:	bf18      	it	ne
24005cee:	4293      	cmpne	r3, r2
24005cf0:	f100 0018 	add.w	r0, r0, #24
24005cf4:	bf0c      	ite	eq
24005cf6:	2201      	moveq	r2, #1
24005cf8:	2200      	movne	r2, #0
24005cfa:	4283      	cmp	r3, r0
24005cfc:	bf08      	it	eq
24005cfe:	f042 0201 	orreq.w	r2, r2, #1
24005d02:	3018      	adds	r0, #24
24005d04:	4283      	cmp	r3, r0
24005d06:	bf08      	it	eq
24005d08:	f042 0201 	orreq.w	r2, r2, #1
24005d0c:	3018      	adds	r0, #24
24005d0e:	4283      	cmp	r3, r0
24005d10:	bf08      	it	eq
24005d12:	f042 0201 	orreq.w	r2, r2, #1
24005d16:	3018      	adds	r0, #24
24005d18:	4283      	cmp	r3, r0
24005d1a:	bf08      	it	eq
24005d1c:	f042 0201 	orreq.w	r2, r2, #1
24005d20:	f500 7056 	add.w	r0, r0, #856	; 0x358
24005d24:	4283      	cmp	r3, r0
24005d26:	bf08      	it	eq
24005d28:	f042 0201 	orreq.w	r2, r2, #1
24005d2c:	3018      	adds	r0, #24
24005d2e:	4283      	cmp	r3, r0
24005d30:	bf08      	it	eq
24005d32:	f042 0201 	orreq.w	r2, r2, #1
24005d36:	3018      	adds	r0, #24
24005d38:	4283      	cmp	r3, r0
24005d3a:	bf08      	it	eq
24005d3c:	f042 0201 	orreq.w	r2, r2, #1
24005d40:	3018      	adds	r0, #24
24005d42:	4283      	cmp	r3, r0
24005d44:	bf08      	it	eq
24005d46:	f042 0201 	orreq.w	r2, r2, #1
24005d4a:	3018      	adds	r0, #24
24005d4c:	4283      	cmp	r3, r0
24005d4e:	bf08      	it	eq
24005d50:	f042 0201 	orreq.w	r2, r2, #1
24005d54:	3018      	adds	r0, #24
24005d56:	4283      	cmp	r3, r0
24005d58:	bf08      	it	eq
24005d5a:	f042 0201 	orreq.w	r2, r2, #1
24005d5e:	3018      	adds	r0, #24
24005d60:	4283      	cmp	r3, r0
24005d62:	bf08      	it	eq
24005d64:	f042 0201 	orreq.w	r2, r2, #1
24005d68:	b91a      	cbnz	r2, 24005d72 <HAL_DMA_IRQHandler+0xae>
24005d6a:	4a75      	ldr	r2, [pc, #468]	; (24005f40 <HAL_DMA_IRQHandler+0x27c>)
24005d6c:	4293      	cmp	r3, r2
24005d6e:	f040 8294 	bne.w	2400629a <HAL_DMA_IRQHandler+0x5d6>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005d72:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
24005d76:	2208      	movs	r2, #8
24005d78:	f00e 011f 	and.w	r1, lr, #31
24005d7c:	408a      	lsls	r2, r1
24005d7e:	422a      	tst	r2, r5
24005d80:	f040 8193 	bne.w	240060aa <HAL_DMA_IRQHandler+0x3e6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005d84:	fa25 f201 	lsr.w	r2, r5, r1
24005d88:	07d2      	lsls	r2, r2, #31
24005d8a:	d50e      	bpl.n	24005daa <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
24005d8c:	695a      	ldr	r2, [r3, #20]
24005d8e:	0612      	lsls	r2, r2, #24
24005d90:	f140 824d 	bpl.w	2400622e <HAL_DMA_IRQHandler+0x56a>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005d94:	2301      	movs	r3, #1
24005d96:	408b      	lsls	r3, r1
24005d98:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24005d9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005d9c:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24005da0:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005da4:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
24005da8:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005daa:	f04f 0c04 	mov.w	ip, #4
24005dae:	fa0c fc01 	lsl.w	ip, ip, r1
24005db2:	ea1c 0f05 	tst.w	ip, r5
24005db6:	d05f      	beq.n	24005e78 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24005db8:	6822      	ldr	r2, [r4, #0]
24005dba:	485f      	ldr	r0, [pc, #380]	; (24005f38 <HAL_DMA_IRQHandler+0x274>)
24005dbc:	4b61      	ldr	r3, [pc, #388]	; (24005f44 <HAL_DMA_IRQHandler+0x280>)
24005dbe:	429a      	cmp	r2, r3
24005dc0:	bf18      	it	ne
24005dc2:	4282      	cmpne	r2, r0
24005dc4:	f103 0318 	add.w	r3, r3, #24
24005dc8:	bf0c      	ite	eq
24005dca:	2001      	moveq	r0, #1
24005dcc:	2000      	movne	r0, #0
24005dce:	429a      	cmp	r2, r3
24005dd0:	bf08      	it	eq
24005dd2:	f040 0001 	orreq.w	r0, r0, #1
24005dd6:	3318      	adds	r3, #24
24005dd8:	429a      	cmp	r2, r3
24005dda:	bf08      	it	eq
24005ddc:	f040 0001 	orreq.w	r0, r0, #1
24005de0:	3318      	adds	r3, #24
24005de2:	429a      	cmp	r2, r3
24005de4:	bf08      	it	eq
24005de6:	f040 0001 	orreq.w	r0, r0, #1
24005dea:	3318      	adds	r3, #24
24005dec:	429a      	cmp	r2, r3
24005dee:	bf08      	it	eq
24005df0:	f040 0001 	orreq.w	r0, r0, #1
24005df4:	3318      	adds	r3, #24
24005df6:	429a      	cmp	r2, r3
24005df8:	bf08      	it	eq
24005dfa:	f040 0001 	orreq.w	r0, r0, #1
24005dfe:	3318      	adds	r3, #24
24005e00:	429a      	cmp	r2, r3
24005e02:	bf08      	it	eq
24005e04:	f040 0001 	orreq.w	r0, r0, #1
24005e08:	f503 7356 	add.w	r3, r3, #856	; 0x358
24005e0c:	429a      	cmp	r2, r3
24005e0e:	bf08      	it	eq
24005e10:	f040 0001 	orreq.w	r0, r0, #1
24005e14:	3318      	adds	r3, #24
24005e16:	429a      	cmp	r2, r3
24005e18:	bf08      	it	eq
24005e1a:	f040 0001 	orreq.w	r0, r0, #1
24005e1e:	3318      	adds	r3, #24
24005e20:	429a      	cmp	r2, r3
24005e22:	bf08      	it	eq
24005e24:	f040 0001 	orreq.w	r0, r0, #1
24005e28:	3318      	adds	r3, #24
24005e2a:	429a      	cmp	r2, r3
24005e2c:	bf08      	it	eq
24005e2e:	f040 0001 	orreq.w	r0, r0, #1
24005e32:	3318      	adds	r3, #24
24005e34:	429a      	cmp	r2, r3
24005e36:	bf08      	it	eq
24005e38:	f040 0001 	orreq.w	r0, r0, #1
24005e3c:	3318      	adds	r3, #24
24005e3e:	429a      	cmp	r2, r3
24005e40:	bf08      	it	eq
24005e42:	f040 0001 	orreq.w	r0, r0, #1
24005e46:	3318      	adds	r3, #24
24005e48:	429a      	cmp	r2, r3
24005e4a:	bf08      	it	eq
24005e4c:	f040 0001 	orreq.w	r0, r0, #1
24005e50:	4613      	mov	r3, r2
24005e52:	b918      	cbnz	r0, 24005e5c <HAL_DMA_IRQHandler+0x198>
24005e54:	483a      	ldr	r0, [pc, #232]	; (24005f40 <HAL_DMA_IRQHandler+0x27c>)
24005e56:	4282      	cmp	r2, r0
24005e58:	f040 825a 	bne.w	24006310 <HAL_DMA_IRQHandler+0x64c>
24005e5c:	681a      	ldr	r2, [r3, #0]
24005e5e:	0790      	lsls	r0, r2, #30
24005e60:	f140 81f1 	bpl.w	24006246 <HAL_DMA_IRQHandler+0x582>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
24005e64:	f8c6 c008 	str.w	ip, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24005e68:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005e6a:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24005e6e:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005e72:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
24005e76:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005e78:	f04f 0c10 	mov.w	ip, #16
24005e7c:	fa0c fc01 	lsl.w	ip, ip, r1
24005e80:	ea1c 0f05 	tst.w	ip, r5
24005e84:	d075      	beq.n	24005f72 <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
24005e86:	6822      	ldr	r2, [r4, #0]
24005e88:	482b      	ldr	r0, [pc, #172]	; (24005f38 <HAL_DMA_IRQHandler+0x274>)
24005e8a:	4b2e      	ldr	r3, [pc, #184]	; (24005f44 <HAL_DMA_IRQHandler+0x280>)
24005e8c:	429a      	cmp	r2, r3
24005e8e:	bf18      	it	ne
24005e90:	4282      	cmpne	r2, r0
24005e92:	f103 0318 	add.w	r3, r3, #24
24005e96:	bf0c      	ite	eq
24005e98:	2001      	moveq	r0, #1
24005e9a:	2000      	movne	r0, #0
24005e9c:	429a      	cmp	r2, r3
24005e9e:	bf08      	it	eq
24005ea0:	f040 0001 	orreq.w	r0, r0, #1
24005ea4:	3318      	adds	r3, #24
24005ea6:	429a      	cmp	r2, r3
24005ea8:	bf08      	it	eq
24005eaa:	f040 0001 	orreq.w	r0, r0, #1
24005eae:	3318      	adds	r3, #24
24005eb0:	429a      	cmp	r2, r3
24005eb2:	bf08      	it	eq
24005eb4:	f040 0001 	orreq.w	r0, r0, #1
24005eb8:	3318      	adds	r3, #24
24005eba:	429a      	cmp	r2, r3
24005ebc:	bf08      	it	eq
24005ebe:	f040 0001 	orreq.w	r0, r0, #1
24005ec2:	3318      	adds	r3, #24
24005ec4:	429a      	cmp	r2, r3
24005ec6:	bf08      	it	eq
24005ec8:	f040 0001 	orreq.w	r0, r0, #1
24005ecc:	3318      	adds	r3, #24
24005ece:	429a      	cmp	r2, r3
24005ed0:	bf08      	it	eq
24005ed2:	f040 0001 	orreq.w	r0, r0, #1
24005ed6:	f503 7356 	add.w	r3, r3, #856	; 0x358
24005eda:	429a      	cmp	r2, r3
24005edc:	bf08      	it	eq
24005ede:	f040 0001 	orreq.w	r0, r0, #1
24005ee2:	3318      	adds	r3, #24
24005ee4:	429a      	cmp	r2, r3
24005ee6:	bf08      	it	eq
24005ee8:	f040 0001 	orreq.w	r0, r0, #1
24005eec:	3318      	adds	r3, #24
24005eee:	429a      	cmp	r2, r3
24005ef0:	bf08      	it	eq
24005ef2:	f040 0001 	orreq.w	r0, r0, #1
24005ef6:	3318      	adds	r3, #24
24005ef8:	429a      	cmp	r2, r3
24005efa:	bf08      	it	eq
24005efc:	f040 0001 	orreq.w	r0, r0, #1
24005f00:	3318      	adds	r3, #24
24005f02:	429a      	cmp	r2, r3
24005f04:	bf08      	it	eq
24005f06:	f040 0001 	orreq.w	r0, r0, #1
24005f0a:	3318      	adds	r3, #24
24005f0c:	429a      	cmp	r2, r3
24005f0e:	bf08      	it	eq
24005f10:	f040 0001 	orreq.w	r0, r0, #1
24005f14:	3318      	adds	r3, #24
24005f16:	429a      	cmp	r2, r3
24005f18:	bf08      	it	eq
24005f1a:	f040 0001 	orreq.w	r0, r0, #1
24005f1e:	4613      	mov	r3, r2
24005f20:	b918      	cbnz	r0, 24005f2a <HAL_DMA_IRQHandler+0x266>
24005f22:	4807      	ldr	r0, [pc, #28]	; (24005f40 <HAL_DMA_IRQHandler+0x27c>)
24005f24:	4282      	cmp	r2, r0
24005f26:	f040 813c 	bne.w	240061a2 <HAL_DMA_IRQHandler+0x4de>
24005f2a:	681a      	ldr	r2, [r3, #0]
24005f2c:	0712      	lsls	r2, r2, #28
24005f2e:	f140 8177 	bpl.w	24006220 <HAL_DMA_IRQHandler+0x55c>
24005f32:	e009      	b.n	24005f48 <HAL_DMA_IRQHandler+0x284>
24005f34:	200008ec 	.word	0x200008ec
24005f38:	40020010 	.word	0x40020010
24005f3c:	40020058 	.word	0x40020058
24005f40:	400204b8 	.word	0x400204b8
24005f44:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
24005f48:	f8c6 c008 	str.w	ip, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24005f4c:	6823      	ldr	r3, [r4, #0]
24005f4e:	681a      	ldr	r2, [r3, #0]
24005f50:	0350      	lsls	r0, r2, #13
24005f52:	f100 8181 	bmi.w	24006258 <HAL_DMA_IRQHandler+0x594>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
24005f56:	681a      	ldr	r2, [r3, #0]
24005f58:	05d2      	lsls	r2, r2, #23
24005f5a:	d403      	bmi.n	24005f64 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
24005f5c:	681a      	ldr	r2, [r3, #0]
24005f5e:	f022 0208 	bic.w	r2, r2, #8
24005f62:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
24005f64:	6c23      	ldr	r3, [r4, #64]	; 0x40
24005f66:	b10b      	cbz	r3, 24005f6c <HAL_DMA_IRQHandler+0x2a8>
            hdma->XferHalfCpltCallback(hdma);
24005f68:	4620      	mov	r0, r4
24005f6a:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24005f6c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
24005f6e:	f001 011f 	and.w	r1, r1, #31
24005f72:	2320      	movs	r3, #32
24005f74:	fa03 f101 	lsl.w	r1, r3, r1
24005f78:	4229      	tst	r1, r5
24005f7a:	d066      	beq.n	2400604a <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
24005f7c:	6823      	ldr	r3, [r4, #0]
24005f7e:	4a92      	ldr	r2, [pc, #584]	; (240061c8 <HAL_DMA_IRQHandler+0x504>)
24005f80:	4892      	ldr	r0, [pc, #584]	; (240061cc <HAL_DMA_IRQHandler+0x508>)
24005f82:	4283      	cmp	r3, r0
24005f84:	bf18      	it	ne
24005f86:	4293      	cmpne	r3, r2
24005f88:	f100 0018 	add.w	r0, r0, #24
24005f8c:	bf0c      	ite	eq
24005f8e:	2201      	moveq	r2, #1
24005f90:	2200      	movne	r2, #0
24005f92:	4283      	cmp	r3, r0
24005f94:	bf08      	it	eq
24005f96:	f042 0201 	orreq.w	r2, r2, #1
24005f9a:	3018      	adds	r0, #24
24005f9c:	4283      	cmp	r3, r0
24005f9e:	bf08      	it	eq
24005fa0:	f042 0201 	orreq.w	r2, r2, #1
24005fa4:	3018      	adds	r0, #24
24005fa6:	4283      	cmp	r3, r0
24005fa8:	bf08      	it	eq
24005faa:	f042 0201 	orreq.w	r2, r2, #1
24005fae:	3018      	adds	r0, #24
24005fb0:	4283      	cmp	r3, r0
24005fb2:	bf08      	it	eq
24005fb4:	f042 0201 	orreq.w	r2, r2, #1
24005fb8:	3018      	adds	r0, #24
24005fba:	4283      	cmp	r3, r0
24005fbc:	bf08      	it	eq
24005fbe:	f042 0201 	orreq.w	r2, r2, #1
24005fc2:	3018      	adds	r0, #24
24005fc4:	4283      	cmp	r3, r0
24005fc6:	bf08      	it	eq
24005fc8:	f042 0201 	orreq.w	r2, r2, #1
24005fcc:	f500 7056 	add.w	r0, r0, #856	; 0x358
24005fd0:	4283      	cmp	r3, r0
24005fd2:	bf08      	it	eq
24005fd4:	f042 0201 	orreq.w	r2, r2, #1
24005fd8:	3018      	adds	r0, #24
24005fda:	4283      	cmp	r3, r0
24005fdc:	bf08      	it	eq
24005fde:	f042 0201 	orreq.w	r2, r2, #1
24005fe2:	3018      	adds	r0, #24
24005fe4:	4283      	cmp	r3, r0
24005fe6:	bf08      	it	eq
24005fe8:	f042 0201 	orreq.w	r2, r2, #1
24005fec:	3018      	adds	r0, #24
24005fee:	4283      	cmp	r3, r0
24005ff0:	bf08      	it	eq
24005ff2:	f042 0201 	orreq.w	r2, r2, #1
24005ff6:	3018      	adds	r0, #24
24005ff8:	4283      	cmp	r3, r0
24005ffa:	bf08      	it	eq
24005ffc:	f042 0201 	orreq.w	r2, r2, #1
24006000:	3018      	adds	r0, #24
24006002:	4283      	cmp	r3, r0
24006004:	bf08      	it	eq
24006006:	f042 0201 	orreq.w	r2, r2, #1
2400600a:	3018      	adds	r0, #24
2400600c:	4283      	cmp	r3, r0
2400600e:	bf08      	it	eq
24006010:	f042 0201 	orreq.w	r2, r2, #1
24006014:	b91a      	cbnz	r2, 2400601e <HAL_DMA_IRQHandler+0x35a>
24006016:	4a6e      	ldr	r2, [pc, #440]	; (240061d0 <HAL_DMA_IRQHandler+0x50c>)
24006018:	4293      	cmp	r3, r2
2400601a:	f040 80cf 	bne.w	240061bc <HAL_DMA_IRQHandler+0x4f8>
2400601e:	681b      	ldr	r3, [r3, #0]
24006020:	06dd      	lsls	r5, r3, #27
24006022:	d512      	bpl.n	2400604a <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
24006024:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
24006026:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
2400602a:	2b04      	cmp	r3, #4
2400602c:	f000 80d4 	beq.w	240061d8 <HAL_DMA_IRQHandler+0x514>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
24006030:	6823      	ldr	r3, [r4, #0]
24006032:	681a      	ldr	r2, [r3, #0]
24006034:	0352      	lsls	r2, r2, #13
24006036:	f140 8118 	bpl.w	2400626a <HAL_DMA_IRQHandler+0x5a6>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
2400603a:	681b      	ldr	r3, [r3, #0]
2400603c:	031e      	lsls	r6, r3, #12
2400603e:	f140 8123 	bpl.w	24006288 <HAL_DMA_IRQHandler+0x5c4>
          if(hdma->XferCpltCallback != NULL)
24006042:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24006044:	b10b      	cbz	r3, 2400604a <HAL_DMA_IRQHandler+0x386>
            hdma->XferCpltCallback(hdma);
24006046:	4620      	mov	r0, r4
24006048:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
2400604a:	6d63      	ldr	r3, [r4, #84]	; 0x54
2400604c:	2b00      	cmp	r3, #0
2400604e:	f000 80e5 	beq.w	2400621c <HAL_DMA_IRQHandler+0x558>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
24006052:	6d63      	ldr	r3, [r4, #84]	; 0x54
24006054:	07dd      	lsls	r5, r3, #31
24006056:	d51f      	bpl.n	24006098 <HAL_DMA_IRQHandler+0x3d4>
        __HAL_DMA_DISABLE(hdma);
24006058:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
2400605a:	2104      	movs	r1, #4
2400605c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
24006060:	6813      	ldr	r3, [r2, #0]
24006062:	f023 0301 	bic.w	r3, r3, #1
24006066:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
24006068:	4a5a      	ldr	r2, [pc, #360]	; (240061d4 <HAL_DMA_IRQHandler+0x510>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
2400606a:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
2400606c:	fba2 7207 	umull	r7, r2, r2, r7
24006070:	0a92      	lsrs	r2, r2, #10
24006072:	e002      	b.n	2400607a <HAL_DMA_IRQHandler+0x3b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
24006074:	680b      	ldr	r3, [r1, #0]
24006076:	07d8      	lsls	r0, r3, #31
24006078:	d504      	bpl.n	24006084 <HAL_DMA_IRQHandler+0x3c0>
          if (++count > timeout)
2400607a:	9b01      	ldr	r3, [sp, #4]
2400607c:	3301      	adds	r3, #1
2400607e:	4293      	cmp	r3, r2
24006080:	9301      	str	r3, [sp, #4]
24006082:	d9f7      	bls.n	24006074 <HAL_DMA_IRQHandler+0x3b0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
24006084:	680b      	ldr	r3, [r1, #0]
24006086:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
24006088:	bf4c      	ite	mi
2400608a:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
2400608c:	2301      	movpl	r3, #1
2400608e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
24006092:	2300      	movs	r3, #0
24006094:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
24006098:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
2400609a:	2b00      	cmp	r3, #0
2400609c:	f000 80be 	beq.w	2400621c <HAL_DMA_IRQHandler+0x558>
        hdma->XferErrorCallback(hdma);
240060a0:	4620      	mov	r0, r4
}
240060a2:	b003      	add	sp, #12
240060a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
240060a8:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
240060aa:	681a      	ldr	r2, [r3, #0]
240060ac:	0752      	lsls	r2, r2, #29
240060ae:	d511      	bpl.n	240060d4 <HAL_DMA_IRQHandler+0x410>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
240060b0:	681a      	ldr	r2, [r3, #0]
240060b2:	f022 0204 	bic.w	r2, r2, #4
240060b6:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
240060b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
240060ba:	f003 021f 	and.w	r2, r3, #31
240060be:	2308      	movs	r3, #8
240060c0:	4093      	lsls	r3, r2
240060c2:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
240060c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240060c6:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
240060ca:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240060ce:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
240060d2:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240060d4:	fa25 f301 	lsr.w	r3, r5, r1
240060d8:	07d8      	lsls	r0, r3, #31
240060da:	f57f ae66 	bpl.w	24005daa <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
240060de:	6822      	ldr	r2, [r4, #0]
240060e0:	4839      	ldr	r0, [pc, #228]	; (240061c8 <HAL_DMA_IRQHandler+0x504>)
240060e2:	4b3a      	ldr	r3, [pc, #232]	; (240061cc <HAL_DMA_IRQHandler+0x508>)
240060e4:	429a      	cmp	r2, r3
240060e6:	bf18      	it	ne
240060e8:	4282      	cmpne	r2, r0
240060ea:	f103 0318 	add.w	r3, r3, #24
240060ee:	bf0c      	ite	eq
240060f0:	2001      	moveq	r0, #1
240060f2:	2000      	movne	r0, #0
240060f4:	429a      	cmp	r2, r3
240060f6:	bf08      	it	eq
240060f8:	f040 0001 	orreq.w	r0, r0, #1
240060fc:	3318      	adds	r3, #24
240060fe:	429a      	cmp	r2, r3
24006100:	bf08      	it	eq
24006102:	f040 0001 	orreq.w	r0, r0, #1
24006106:	3318      	adds	r3, #24
24006108:	429a      	cmp	r2, r3
2400610a:	bf08      	it	eq
2400610c:	f040 0001 	orreq.w	r0, r0, #1
24006110:	3318      	adds	r3, #24
24006112:	429a      	cmp	r2, r3
24006114:	bf08      	it	eq
24006116:	f040 0001 	orreq.w	r0, r0, #1
2400611a:	3318      	adds	r3, #24
2400611c:	429a      	cmp	r2, r3
2400611e:	bf08      	it	eq
24006120:	f040 0001 	orreq.w	r0, r0, #1
24006124:	3318      	adds	r3, #24
24006126:	429a      	cmp	r2, r3
24006128:	bf08      	it	eq
2400612a:	f040 0001 	orreq.w	r0, r0, #1
2400612e:	f503 7356 	add.w	r3, r3, #856	; 0x358
24006132:	429a      	cmp	r2, r3
24006134:	bf08      	it	eq
24006136:	f040 0001 	orreq.w	r0, r0, #1
2400613a:	3318      	adds	r3, #24
2400613c:	429a      	cmp	r2, r3
2400613e:	bf08      	it	eq
24006140:	f040 0001 	orreq.w	r0, r0, #1
24006144:	3318      	adds	r3, #24
24006146:	429a      	cmp	r2, r3
24006148:	bf08      	it	eq
2400614a:	f040 0001 	orreq.w	r0, r0, #1
2400614e:	3318      	adds	r3, #24
24006150:	429a      	cmp	r2, r3
24006152:	bf08      	it	eq
24006154:	f040 0001 	orreq.w	r0, r0, #1
24006158:	3318      	adds	r3, #24
2400615a:	429a      	cmp	r2, r3
2400615c:	bf08      	it	eq
2400615e:	f040 0001 	orreq.w	r0, r0, #1
24006162:	3318      	adds	r3, #24
24006164:	429a      	cmp	r2, r3
24006166:	bf08      	it	eq
24006168:	f040 0001 	orreq.w	r0, r0, #1
2400616c:	3318      	adds	r3, #24
2400616e:	429a      	cmp	r2, r3
24006170:	bf08      	it	eq
24006172:	f040 0001 	orreq.w	r0, r0, #1
24006176:	4613      	mov	r3, r2
24006178:	2800      	cmp	r0, #0
2400617a:	f47f ae07 	bne.w	24005d8c <HAL_DMA_IRQHandler+0xc8>
2400617e:	4814      	ldr	r0, [pc, #80]	; (240061d0 <HAL_DMA_IRQHandler+0x50c>)
24006180:	4282      	cmp	r2, r0
24006182:	f43f ae03 	beq.w	24005d8c <HAL_DMA_IRQHandler+0xc8>
24006186:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006188:	2304      	movs	r3, #4
2400618a:	408b      	lsls	r3, r1
2400618c:	422b      	tst	r3, r5
2400618e:	f040 80bf 	bne.w	24006310 <HAL_DMA_IRQHandler+0x64c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006192:	f04f 0c10 	mov.w	ip, #16
24006196:	fa0c fc01 	lsl.w	ip, ip, r1
2400619a:	ea15 0f0c 	tst.w	r5, ip
2400619e:	f43f aee8 	beq.w	24005f72 <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
240061a2:	6813      	ldr	r3, [r2, #0]
240061a4:	075b      	lsls	r3, r3, #29
240061a6:	f53f aecf 	bmi.w	24005f48 <HAL_DMA_IRQHandler+0x284>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
240061aa:	f00e 0e1f 	and.w	lr, lr, #31
240061ae:	2120      	movs	r1, #32
240061b0:	fa01 f10e 	lsl.w	r1, r1, lr
240061b4:	420d      	tst	r5, r1
240061b6:	f43f af48 	beq.w	2400604a <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
240061ba:	4613      	mov	r3, r2
240061bc:	681b      	ldr	r3, [r3, #0]
240061be:	0798      	lsls	r0, r3, #30
240061c0:	f57f af43 	bpl.w	2400604a <HAL_DMA_IRQHandler+0x386>
240061c4:	e72e      	b.n	24006024 <HAL_DMA_IRQHandler+0x360>
240061c6:	bf00      	nop
240061c8:	40020010 	.word	0x40020010
240061cc:	40020028 	.word	0x40020028
240061d0:	400204b8 	.word	0x400204b8
240061d4:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
240061d8:	6822      	ldr	r2, [r4, #0]
240061da:	6813      	ldr	r3, [r2, #0]
240061dc:	f023 0316 	bic.w	r3, r3, #22
240061e0:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
240061e2:	6822      	ldr	r2, [r4, #0]
240061e4:	6953      	ldr	r3, [r2, #20]
240061e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
240061ea:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
240061ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
240061ee:	2b00      	cmp	r3, #0
240061f0:	d04f      	beq.n	24006292 <HAL_DMA_IRQHandler+0x5ce>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
240061f2:	6822      	ldr	r2, [r4, #0]
240061f4:	6813      	ldr	r3, [r2, #0]
240061f6:	f023 0308 	bic.w	r3, r3, #8
240061fa:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
240061fc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
240061fe:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
24006200:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
24006202:	f002 021f 	and.w	r2, r2, #31
24006206:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
24006208:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
2400620a:	60b3      	str	r3, [r6, #8]
          if(hdma->XferAbortCallback != NULL)
2400620c:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
2400620e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
24006212:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
24006216:	2b00      	cmp	r3, #0
24006218:	f47f af42 	bne.w	240060a0 <HAL_DMA_IRQHandler+0x3dc>
}
2400621c:	b003      	add	sp, #12
2400621e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006220:	2220      	movs	r2, #32
24006222:	fa02 f101 	lsl.w	r1, r2, r1
24006226:	420d      	tst	r5, r1
24006228:	f47f aef9 	bne.w	2400601e <HAL_DMA_IRQHandler+0x35a>
2400622c:	e70d      	b.n	2400604a <HAL_DMA_IRQHandler+0x386>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400622e:	f04f 0c04 	mov.w	ip, #4
24006232:	fa0c fc01 	lsl.w	ip, ip, r1
24006236:	ea15 0f0c 	tst.w	r5, ip
2400623a:	f43f ae1d 	beq.w	24005e78 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
2400623e:	681a      	ldr	r2, [r3, #0]
24006240:	0790      	lsls	r0, r2, #30
24006242:	f53f ae0f 	bmi.w	24005e64 <HAL_DMA_IRQHandler+0x1a0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006246:	f04f 0c10 	mov.w	ip, #16
2400624a:	fa0c fc01 	lsl.w	ip, ip, r1
2400624e:	ea15 0f0c 	tst.w	r5, ip
24006252:	f47f ae6a 	bne.w	24005f2a <HAL_DMA_IRQHandler+0x266>
24006256:	e68c      	b.n	24005f72 <HAL_DMA_IRQHandler+0x2ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
24006258:	681b      	ldr	r3, [r3, #0]
2400625a:	0319      	lsls	r1, r3, #12
2400625c:	f57f ae82 	bpl.w	24005f64 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1HalfCpltCallback != NULL)
24006260:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24006262:	2b00      	cmp	r3, #0
24006264:	f47f ae80 	bne.w	24005f68 <HAL_DMA_IRQHandler+0x2a4>
24006268:	e680      	b.n	24005f6c <HAL_DMA_IRQHandler+0x2a8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
2400626a:	681a      	ldr	r2, [r3, #0]
2400626c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
24006270:	f47f aee7 	bne.w	24006042 <HAL_DMA_IRQHandler+0x37e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
24006274:	6819      	ldr	r1, [r3, #0]
24006276:	f021 0110 	bic.w	r1, r1, #16
2400627a:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
2400627c:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
2400627e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
24006282:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
24006286:	e6dc      	b.n	24006042 <HAL_DMA_IRQHandler+0x37e>
            if(hdma->XferM1CpltCallback != NULL)
24006288:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400628a:	2b00      	cmp	r3, #0
2400628c:	f47f aedb 	bne.w	24006046 <HAL_DMA_IRQHandler+0x382>
24006290:	e6db      	b.n	2400604a <HAL_DMA_IRQHandler+0x386>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
24006292:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24006294:	2b00      	cmp	r3, #0
24006296:	d1ac      	bne.n	240061f2 <HAL_DMA_IRQHandler+0x52e>
24006298:	e7b0      	b.n	240061fc <HAL_DMA_IRQHandler+0x538>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
2400629a:	4a9b      	ldr	r2, [pc, #620]	; (24006508 <HAL_DMA_IRQHandler+0x844>)
2400629c:	489b      	ldr	r0, [pc, #620]	; (2400650c <HAL_DMA_IRQHandler+0x848>)
2400629e:	4283      	cmp	r3, r0
240062a0:	bf18      	it	ne
240062a2:	4293      	cmpne	r3, r2
240062a4:	f100 0014 	add.w	r0, r0, #20
240062a8:	bf0c      	ite	eq
240062aa:	2201      	moveq	r2, #1
240062ac:	2200      	movne	r2, #0
240062ae:	4283      	cmp	r3, r0
240062b0:	bf08      	it	eq
240062b2:	f042 0201 	orreq.w	r2, r2, #1
240062b6:	3014      	adds	r0, #20
240062b8:	4283      	cmp	r3, r0
240062ba:	bf08      	it	eq
240062bc:	f042 0201 	orreq.w	r2, r2, #1
240062c0:	3014      	adds	r0, #20
240062c2:	4283      	cmp	r3, r0
240062c4:	bf08      	it	eq
240062c6:	f042 0201 	orreq.w	r2, r2, #1
240062ca:	3014      	adds	r0, #20
240062cc:	4283      	cmp	r3, r0
240062ce:	bf08      	it	eq
240062d0:	f042 0201 	orreq.w	r2, r2, #1
240062d4:	3014      	adds	r0, #20
240062d6:	4283      	cmp	r3, r0
240062d8:	bf08      	it	eq
240062da:	f042 0201 	orreq.w	r2, r2, #1
240062de:	b912      	cbnz	r2, 240062e6 <HAL_DMA_IRQHandler+0x622>
240062e0:	4a8b      	ldr	r2, [pc, #556]	; (24006510 <HAL_DMA_IRQHandler+0x84c>)
240062e2:	4293      	cmp	r3, r2
240062e4:	d19a      	bne.n	2400621c <HAL_DMA_IRQHandler+0x558>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
240062e6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
240062e8:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
240062ea:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
240062ec:	f000 001f 	and.w	r0, r0, #31
240062f0:	4085      	lsls	r5, r0
240062f2:	420d      	tst	r5, r1
240062f4:	d018      	beq.n	24006328 <HAL_DMA_IRQHandler+0x664>
240062f6:	0757      	lsls	r7, r2, #29
240062f8:	d516      	bpl.n	24006328 <HAL_DMA_IRQHandler+0x664>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240062fa:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
240062fc:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
240062fe:	d544      	bpl.n	2400638a <HAL_DMA_IRQHandler+0x6c6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
24006300:	03d2      	lsls	r2, r2, #15
24006302:	f100 8099 	bmi.w	24006438 <HAL_DMA_IRQHandler+0x774>
          if(hdma->XferM1HalfCpltCallback != NULL)
24006306:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24006308:	2b00      	cmp	r3, #0
2400630a:	f47f aec9 	bne.w	240060a0 <HAL_DMA_IRQHandler+0x3dc>
2400630e:	e785      	b.n	2400621c <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
24006310:	f00e 011f 	and.w	r1, lr, #31
24006314:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
24006318:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
2400631a:	fa0c fc01 	lsl.w	ip, ip, r1
2400631e:	ea15 0f0c 	tst.w	r5, ip
24006322:	f47f af3e 	bne.w	240061a2 <HAL_DMA_IRQHandler+0x4de>
24006326:	e624      	b.n	24005f72 <HAL_DMA_IRQHandler+0x2ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
24006328:	2502      	movs	r5, #2
2400632a:	4085      	lsls	r5, r0
2400632c:	420d      	tst	r5, r1
2400632e:	d00d      	beq.n	2400634c <HAL_DMA_IRQHandler+0x688>
24006330:	0797      	lsls	r7, r2, #30
24006332:	d50b      	bpl.n	2400634c <HAL_DMA_IRQHandler+0x688>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
24006334:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
24006336:	0416      	lsls	r6, r2, #16
24006338:	f140 8083 	bpl.w	24006442 <HAL_DMA_IRQHandler+0x77e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
2400633c:	03d5      	lsls	r5, r2, #15
2400633e:	f100 80dd 	bmi.w	240064fc <HAL_DMA_IRQHandler+0x838>
          if(hdma->XferM1CpltCallback != NULL)
24006342:	6c63      	ldr	r3, [r4, #68]	; 0x44
24006344:	2b00      	cmp	r3, #0
24006346:	f47f aeab 	bne.w	240060a0 <HAL_DMA_IRQHandler+0x3dc>
2400634a:	e767      	b.n	2400621c <HAL_DMA_IRQHandler+0x558>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
2400634c:	2508      	movs	r5, #8
2400634e:	fa05 f000 	lsl.w	r0, r5, r0
24006352:	4208      	tst	r0, r1
24006354:	f43f af62 	beq.w	2400621c <HAL_DMA_IRQHandler+0x558>
24006358:	0711      	lsls	r1, r2, #28
2400635a:	f57f af5f 	bpl.w	2400621c <HAL_DMA_IRQHandler+0x558>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
2400635e:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
24006360:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
24006362:	f021 010e 	bic.w	r1, r1, #14
24006366:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
24006368:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
2400636a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
2400636c:	f003 031f 	and.w	r3, r3, #31
24006370:	fa02 f303 	lsl.w	r3, r2, r3
24006374:	6073      	str	r3, [r6, #4]
      if (hdma->XferErrorCallback != NULL)
24006376:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
24006378:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
2400637a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
2400637e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
24006382:	2b00      	cmp	r3, #0
24006384:	f47f ae8c 	bne.w	240060a0 <HAL_DMA_IRQHandler+0x3dc>
24006388:	e748      	b.n	2400621c <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
2400638a:	0693      	lsls	r3, r2, #26
2400638c:	d454      	bmi.n	24006438 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
2400638e:	6822      	ldr	r2, [r4, #0]
24006390:	4b60      	ldr	r3, [pc, #384]	; (24006514 <HAL_DMA_IRQHandler+0x850>)
24006392:	4861      	ldr	r0, [pc, #388]	; (24006518 <HAL_DMA_IRQHandler+0x854>)
24006394:	4961      	ldr	r1, [pc, #388]	; (2400651c <HAL_DMA_IRQHandler+0x858>)
24006396:	4282      	cmp	r2, r0
24006398:	bf18      	it	ne
2400639a:	429a      	cmpne	r2, r3
2400639c:	f100 0030 	add.w	r0, r0, #48	; 0x30
240063a0:	bf0c      	ite	eq
240063a2:	2301      	moveq	r3, #1
240063a4:	2300      	movne	r3, #0
240063a6:	428a      	cmp	r2, r1
240063a8:	bf08      	it	eq
240063aa:	f043 0301 	orreq.w	r3, r3, #1
240063ae:	3130      	adds	r1, #48	; 0x30
240063b0:	4282      	cmp	r2, r0
240063b2:	bf08      	it	eq
240063b4:	f043 0301 	orreq.w	r3, r3, #1
240063b8:	3030      	adds	r0, #48	; 0x30
240063ba:	428a      	cmp	r2, r1
240063bc:	bf08      	it	eq
240063be:	f043 0301 	orreq.w	r3, r3, #1
240063c2:	3130      	adds	r1, #48	; 0x30
240063c4:	4282      	cmp	r2, r0
240063c6:	bf08      	it	eq
240063c8:	f043 0301 	orreq.w	r3, r3, #1
240063cc:	3030      	adds	r0, #48	; 0x30
240063ce:	428a      	cmp	r2, r1
240063d0:	bf08      	it	eq
240063d2:	f043 0301 	orreq.w	r3, r3, #1
240063d6:	f501 715c 	add.w	r1, r1, #880	; 0x370
240063da:	4282      	cmp	r2, r0
240063dc:	bf08      	it	eq
240063de:	f043 0301 	orreq.w	r3, r3, #1
240063e2:	f500 705c 	add.w	r0, r0, #880	; 0x370
240063e6:	428a      	cmp	r2, r1
240063e8:	bf08      	it	eq
240063ea:	f043 0301 	orreq.w	r3, r3, #1
240063ee:	3130      	adds	r1, #48	; 0x30
240063f0:	4282      	cmp	r2, r0
240063f2:	bf08      	it	eq
240063f4:	f043 0301 	orreq.w	r3, r3, #1
240063f8:	3030      	adds	r0, #48	; 0x30
240063fa:	428a      	cmp	r2, r1
240063fc:	bf08      	it	eq
240063fe:	f043 0301 	orreq.w	r3, r3, #1
24006402:	3130      	adds	r1, #48	; 0x30
24006404:	4282      	cmp	r2, r0
24006406:	bf08      	it	eq
24006408:	f043 0301 	orreq.w	r3, r3, #1
2400640c:	3030      	adds	r0, #48	; 0x30
2400640e:	428a      	cmp	r2, r1
24006410:	bf08      	it	eq
24006412:	f043 0301 	orreq.w	r3, r3, #1
24006416:	3130      	adds	r1, #48	; 0x30
24006418:	4282      	cmp	r2, r0
2400641a:	bf08      	it	eq
2400641c:	f043 0301 	orreq.w	r3, r3, #1
24006420:	428a      	cmp	r2, r1
24006422:	bf08      	it	eq
24006424:	f043 0301 	orreq.w	r3, r3, #1
24006428:	b913      	cbnz	r3, 24006430 <HAL_DMA_IRQHandler+0x76c>
2400642a:	4b3d      	ldr	r3, [pc, #244]	; (24006520 <HAL_DMA_IRQHandler+0x85c>)
2400642c:	429a      	cmp	r2, r3
2400642e:	d179      	bne.n	24006524 <HAL_DMA_IRQHandler+0x860>
24006430:	6813      	ldr	r3, [r2, #0]
24006432:	f023 0308 	bic.w	r3, r3, #8
24006436:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
24006438:	6c23      	ldr	r3, [r4, #64]	; 0x40
2400643a:	2b00      	cmp	r3, #0
2400643c:	f47f ae30 	bne.w	240060a0 <HAL_DMA_IRQHandler+0x3dc>
24006440:	e6ec      	b.n	2400621c <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
24006442:	0690      	lsls	r0, r2, #26
24006444:	d45a      	bmi.n	240064fc <HAL_DMA_IRQHandler+0x838>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
24006446:	6822      	ldr	r2, [r4, #0]
24006448:	4b32      	ldr	r3, [pc, #200]	; (24006514 <HAL_DMA_IRQHandler+0x850>)
2400644a:	4833      	ldr	r0, [pc, #204]	; (24006518 <HAL_DMA_IRQHandler+0x854>)
2400644c:	4933      	ldr	r1, [pc, #204]	; (2400651c <HAL_DMA_IRQHandler+0x858>)
2400644e:	4282      	cmp	r2, r0
24006450:	bf18      	it	ne
24006452:	429a      	cmpne	r2, r3
24006454:	f100 0030 	add.w	r0, r0, #48	; 0x30
24006458:	bf0c      	ite	eq
2400645a:	2301      	moveq	r3, #1
2400645c:	2300      	movne	r3, #0
2400645e:	428a      	cmp	r2, r1
24006460:	bf08      	it	eq
24006462:	f043 0301 	orreq.w	r3, r3, #1
24006466:	3130      	adds	r1, #48	; 0x30
24006468:	4282      	cmp	r2, r0
2400646a:	bf08      	it	eq
2400646c:	f043 0301 	orreq.w	r3, r3, #1
24006470:	3030      	adds	r0, #48	; 0x30
24006472:	428a      	cmp	r2, r1
24006474:	bf08      	it	eq
24006476:	f043 0301 	orreq.w	r3, r3, #1
2400647a:	3130      	adds	r1, #48	; 0x30
2400647c:	4282      	cmp	r2, r0
2400647e:	bf08      	it	eq
24006480:	f043 0301 	orreq.w	r3, r3, #1
24006484:	3030      	adds	r0, #48	; 0x30
24006486:	428a      	cmp	r2, r1
24006488:	bf08      	it	eq
2400648a:	f043 0301 	orreq.w	r3, r3, #1
2400648e:	f501 715c 	add.w	r1, r1, #880	; 0x370
24006492:	4282      	cmp	r2, r0
24006494:	bf08      	it	eq
24006496:	f043 0301 	orreq.w	r3, r3, #1
2400649a:	f500 705c 	add.w	r0, r0, #880	; 0x370
2400649e:	428a      	cmp	r2, r1
240064a0:	bf08      	it	eq
240064a2:	f043 0301 	orreq.w	r3, r3, #1
240064a6:	3130      	adds	r1, #48	; 0x30
240064a8:	4282      	cmp	r2, r0
240064aa:	bf08      	it	eq
240064ac:	f043 0301 	orreq.w	r3, r3, #1
240064b0:	3030      	adds	r0, #48	; 0x30
240064b2:	428a      	cmp	r2, r1
240064b4:	bf08      	it	eq
240064b6:	f043 0301 	orreq.w	r3, r3, #1
240064ba:	3130      	adds	r1, #48	; 0x30
240064bc:	4282      	cmp	r2, r0
240064be:	bf08      	it	eq
240064c0:	f043 0301 	orreq.w	r3, r3, #1
240064c4:	3030      	adds	r0, #48	; 0x30
240064c6:	428a      	cmp	r2, r1
240064c8:	bf08      	it	eq
240064ca:	f043 0301 	orreq.w	r3, r3, #1
240064ce:	3130      	adds	r1, #48	; 0x30
240064d0:	4282      	cmp	r2, r0
240064d2:	bf08      	it	eq
240064d4:	f043 0301 	orreq.w	r3, r3, #1
240064d8:	428a      	cmp	r2, r1
240064da:	bf08      	it	eq
240064dc:	f043 0301 	orreq.w	r3, r3, #1
240064e0:	b913      	cbnz	r3, 240064e8 <HAL_DMA_IRQHandler+0x824>
240064e2:	4b0f      	ldr	r3, [pc, #60]	; (24006520 <HAL_DMA_IRQHandler+0x85c>)
240064e4:	429a      	cmp	r2, r3
240064e6:	d122      	bne.n	2400652e <HAL_DMA_IRQHandler+0x86a>
240064e8:	6813      	ldr	r3, [r2, #0]
240064ea:	f023 0314 	bic.w	r3, r3, #20
240064ee:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
240064f0:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
240064f2:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
240064f4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
240064f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
240064fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
240064fe:	2b00      	cmp	r3, #0
24006500:	f47f adce 	bne.w	240060a0 <HAL_DMA_IRQHandler+0x3dc>
24006504:	e68a      	b.n	2400621c <HAL_DMA_IRQHandler+0x558>
24006506:	bf00      	nop
24006508:	58025408 	.word	0x58025408
2400650c:	5802541c 	.word	0x5802541c
24006510:	58025494 	.word	0x58025494
24006514:	40020010 	.word	0x40020010
24006518:	40020028 	.word	0x40020028
2400651c:	40020040 	.word	0x40020040
24006520:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
24006524:	6813      	ldr	r3, [r2, #0]
24006526:	f023 0304 	bic.w	r3, r3, #4
2400652a:	6013      	str	r3, [r2, #0]
2400652c:	e784      	b.n	24006438 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
2400652e:	6813      	ldr	r3, [r2, #0]
24006530:	f023 030a 	bic.w	r3, r3, #10
24006534:	6013      	str	r3, [r2, #0]
24006536:	e7db      	b.n	240064f0 <HAL_DMA_IRQHandler+0x82c>

24006538 <HAL_DMA_GetState>:
  return hdma->State;
24006538:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
2400653c:	4770      	bx	lr
2400653e:	bf00      	nop

24006540 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
24006540:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
24006542:	4770      	bx	lr

24006544 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
24006544:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
24006546:	7a0a      	ldrb	r2, [r1, #8]
{
24006548:	4603      	mov	r3, r0
  if(pSyncConfig->SyncEnable == ENABLE)
2400654a:	2a01      	cmp	r2, #1
2400654c:	d02e      	beq.n	240065ac <HAL_DMAEx_ConfigMuxSync+0x68>
  uint32_t syncPolarity = 0;
2400654e:	2400      	movs	r4, #0
  uint32_t syncSignalID = 0;
24006550:	4625      	mov	r5, r4
    syncSignalID = pSyncConfig->SyncSignalID;
    syncPolarity = pSyncConfig->SyncPolarity;
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
24006552:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
24006556:	2a01      	cmp	r2, #1
24006558:	b2d0      	uxtb	r0, r2
2400655a:	d122      	bne.n	240065a2 <HAL_DMAEx_ConfigMuxSync+0x5e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
2400655c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
24006560:	2a01      	cmp	r2, #1
24006562:	d026      	beq.n	240065b2 <HAL_DMAEx_ConfigMuxSync+0x6e>
24006564:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
24006568:	f04f 0c00 	mov.w	ip, #0
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
2400656c:	6e18      	ldr	r0, [r3, #96]	; 0x60
2400656e:	6802      	ldr	r2, [r0, #0]
24006570:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
24006574:	6002      	str	r2, [r0, #0]
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
24006576:	68ca      	ldr	r2, [r1, #12]
24006578:	6e1e      	ldr	r6, [r3, #96]	; 0x60
2400657a:	1e50      	subs	r0, r2, #1
2400657c:	7a0a      	ldrb	r2, [r1, #8]
2400657e:	f891 e009 	ldrb.w	lr, [r1, #9]
24006582:	0412      	lsls	r2, r2, #16
24006584:	6831      	ldr	r1, [r6, #0]
24006586:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19

    return HAL_OK;
2400658a:	4660      	mov	r0, ip
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
2400658c:	b2c9      	uxtb	r1, r1
2400658e:	430a      	orrs	r2, r1
24006590:	ea42 224e 	orr.w	r2, r2, lr, lsl #9
24006594:	4322      	orrs	r2, r4
24006596:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
2400659a:	6032      	str	r2, [r6, #0]
    __HAL_UNLOCK(hdma);
2400659c:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;

    /* Return error status */
    return HAL_ERROR;
  }
}
240065a0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240065a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    return HAL_ERROR;
240065a6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
240065a8:	655a      	str	r2, [r3, #84]	; 0x54
}
240065aa:	bd70      	pop	{r4, r5, r6, pc}
    syncPolarity = pSyncConfig->SyncPolarity;
240065ac:	e9d1 5400 	ldrd	r5, r4, [r1]
240065b0:	e7cf      	b.n	24006552 <HAL_DMAEx_ConfigMuxSync+0xe>
    __HAL_LOCK(hdma);
240065b2:	2002      	movs	r0, #2
}
240065b4:	bd70      	pop	{r4, r5, r6, pc}
240065b6:	bf00      	nop

240065b8 <HAL_DMAEx_MUX_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
240065b8:	b510      	push	{r4, lr}
  /* Check for DMAMUX Synchronization overrun */
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
240065ba:	e9d0 2319 	ldrd	r2, r3, [r0, #100]	; 0x64
{
240065be:	4604      	mov	r4, r0
  if((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
240065c0:	6812      	ldr	r2, [r2, #0]
240065c2:	421a      	tst	r2, r3
240065c4:	d00e      	beq.n	240065e4 <HAL_DMAEx_MUX_IRQHandler+0x2c>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
240065c6:	6e02      	ldr	r2, [r0, #96]	; 0x60
240065c8:	6813      	ldr	r3, [r2, #0]
240065ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
240065ce:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
240065d0:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	; 0x64
240065d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
240065d6:	6d43      	ldr	r3, [r0, #84]	; 0x54

    if(hdma->XferErrorCallback != NULL)
240065d8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
240065da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
240065de:	6543      	str	r3, [r0, #84]	; 0x54
    if(hdma->XferErrorCallback != NULL)
240065e0:	b102      	cbz	r2, 240065e4 <HAL_DMAEx_MUX_IRQHandler+0x2c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
240065e2:	4790      	blx	r2
    }
  }

  if(hdma->DMAmuxRequestGen != 0)
240065e4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
240065e6:	b1ab      	cbz	r3, 24006614 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
   /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
240065e8:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
240065ec:	6809      	ldr	r1, [r1, #0]
240065ee:	4211      	tst	r1, r2
240065f0:	d010      	beq.n	24006614 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
240065f2:	681a      	ldr	r2, [r3, #0]
240065f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
240065f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
240065fa:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
240065fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24006600:	6d63      	ldr	r3, [r4, #84]	; 0x54

      if(hdma->XferErrorCallback != NULL)
24006602:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
24006604:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
24006608:	6563      	str	r3, [r4, #84]	; 0x54
      if(hdma->XferErrorCallback != NULL)
2400660a:	b11a      	cbz	r2, 24006614 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
2400660c:	4620      	mov	r0, r4
      }
    }
  }
}
2400660e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        hdma->XferErrorCallback(hdma);
24006612:	4710      	bx	r2
}
24006614:	bd10      	pop	{r4, pc}
24006616:	bf00      	nop

24006618 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24006618:	680b      	ldr	r3, [r1, #0]
2400661a:	2b00      	cmp	r3, #0
2400661c:	f000 8119 	beq.w	24006852 <HAL_GPIO_Init+0x23a>
24006620:	f04f 0c00 	mov.w	ip, #0
{
24006624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
24006628:	4662      	mov	r2, ip
{
2400662a:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2400662c:	4d94      	ldr	r5, [pc, #592]	; (24006880 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
2400662e:	4f95      	ldr	r7, [pc, #596]	; (24006884 <HAL_GPIO_Init+0x26c>)
24006630:	f8df 8268 	ldr.w	r8, [pc, #616]	; 2400689c <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
24006634:	f04f 0901 	mov.w	r9, #1
24006638:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
2400663c:	ea19 0e03 	ands.w	lr, r9, r3
24006640:	f000 80c1 	beq.w	240067c6 <HAL_GPIO_Init+0x1ae>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24006644:	684b      	ldr	r3, [r1, #4]
24006646:	f003 0303 	and.w	r3, r3, #3
2400664a:	1e5c      	subs	r4, r3, #1
2400664c:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400664e:	f04f 0403 	mov.w	r4, #3
24006652:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
24006656:	f240 80c0 	bls.w	240067da <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400665a:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
2400665c:	2b03      	cmp	r3, #3
2400665e:	d026      	beq.n	240066ae <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
24006660:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
24006662:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
24006666:	688b      	ldr	r3, [r1, #8]
24006668:	fa03 f30c 	lsl.w	r3, r3, ip
2400666c:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
24006670:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
24006672:	684b      	ldr	r3, [r1, #4]
24006674:	f003 0303 	and.w	r3, r3, #3
24006678:	2b02      	cmp	r3, #2
2400667a:	d118      	bne.n	240066ae <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3U];
2400667c:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24006680:	f002 0b07 	and.w	fp, r2, #7
24006684:	230f      	movs	r3, #15
24006686:	eb00 0989 	add.w	r9, r0, r9, lsl #2
2400668a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
2400668e:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
24006692:	fa03 f30b 	lsl.w	r3, r3, fp
24006696:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
2400669a:	690b      	ldr	r3, [r1, #16]
2400669c:	fa03 f30b 	lsl.w	r3, r3, fp
240066a0:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
240066a4:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
240066a8:	684b      	ldr	r3, [r1, #4]
240066aa:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
240066ae:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
240066b2:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
240066b6:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
240066ba:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
240066bc:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
240066be:	684b      	ldr	r3, [r1, #4]
240066c0:	f413 3f40 	tst.w	r3, #196608	; 0x30000
240066c4:	d07e      	beq.n	240067c4 <HAL_GPIO_Init+0x1ac>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240066c6:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
240066ca:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240066ce:	f002 0903 	and.w	r9, r2, #3
240066d2:	f04f 0a0f 	mov.w	sl, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240066d6:	f043 0302 	orr.w	r3, r3, #2
240066da:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240066de:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240066e2:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240066e4:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
240066e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
240066ec:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240066f0:	fa0a fa09 	lsl.w	sl, sl, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
240066f4:	f003 0302 	and.w	r3, r3, #2
240066f8:	9301      	str	r3, [sp, #4]
240066fa:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
240066fc:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
240066fe:	ea23 030a 	bic.w	r3, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
24006702:	d02b      	beq.n	2400675c <HAL_GPIO_Init+0x144>
24006704:	4540      	cmp	r0, r8
24006706:	f000 8088 	beq.w	2400681a <HAL_GPIO_Init+0x202>
2400670a:	4e5f      	ldr	r6, [pc, #380]	; (24006888 <HAL_GPIO_Init+0x270>)
2400670c:	42b0      	cmp	r0, r6
2400670e:	f000 808b 	beq.w	24006828 <HAL_GPIO_Init+0x210>
24006712:	4e5e      	ldr	r6, [pc, #376]	; (2400688c <HAL_GPIO_Init+0x274>)
24006714:	42b0      	cmp	r0, r6
24006716:	d079      	beq.n	2400680c <HAL_GPIO_Init+0x1f4>
24006718:	4e5d      	ldr	r6, [pc, #372]	; (24006890 <HAL_GPIO_Init+0x278>)
2400671a:	42b0      	cmp	r0, r6
2400671c:	f000 8092 	beq.w	24006844 <HAL_GPIO_Init+0x22c>
24006720:	4e5c      	ldr	r6, [pc, #368]	; (24006894 <HAL_GPIO_Init+0x27c>)
24006722:	42b0      	cmp	r0, r6
24006724:	f000 8096 	beq.w	24006854 <HAL_GPIO_Init+0x23c>
24006728:	4e5b      	ldr	r6, [pc, #364]	; (24006898 <HAL_GPIO_Init+0x280>)
2400672a:	42b0      	cmp	r0, r6
2400672c:	f000 8083 	beq.w	24006836 <HAL_GPIO_Init+0x21e>
24006730:	f8df a16c 	ldr.w	sl, [pc, #364]	; 240068a0 <HAL_GPIO_Init+0x288>
24006734:	4550      	cmp	r0, sl
24006736:	f000 8094 	beq.w	24006862 <HAL_GPIO_Init+0x24a>
2400673a:	f8df a168 	ldr.w	sl, [pc, #360]	; 240068a4 <HAL_GPIO_Init+0x28c>
2400673e:	4550      	cmp	r0, sl
24006740:	f000 8096 	beq.w	24006870 <HAL_GPIO_Init+0x258>
24006744:	f8df a160 	ldr.w	sl, [pc, #352]	; 240068a8 <HAL_GPIO_Init+0x290>
24006748:	4550      	cmp	r0, sl
2400674a:	bf0c      	ite	eq
2400674c:	f04f 0a09 	moveq.w	sl, #9
24006750:	f04f 0a0a 	movne.w	sl, #10
24006754:	fa0a f909 	lsl.w	r9, sl, r9
24006758:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
2400675c:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
2400675e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
24006762:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
24006764:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
24006768:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
2400676a:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
2400676e:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
24006770:	bf54      	ite	pl
24006772:	4023      	andpl	r3, r4
          temp |= iocurrent;
24006774:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
24006778:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
2400677c:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
2400677e:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
24006782:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
24006786:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
24006788:	bf54      	ite	pl
2400678a:	4023      	andpl	r3, r4
          temp |= iocurrent;
2400678c:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
24006790:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
24006794:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
24006796:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
2400679a:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
2400679e:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
240067a0:	bf54      	ite	pl
240067a2:	4023      	andpl	r3, r4
          temp |= iocurrent;
240067a4:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
240067a8:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
240067ac:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
240067ae:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
240067b2:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
240067b4:	bf54      	ite	pl
240067b6:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
240067b8:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
240067bc:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
240067c0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
240067c4:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
240067c6:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
240067c8:	f10c 0c02 	add.w	ip, ip, #2
240067cc:	fa33 f402 	lsrs.w	r4, r3, r2
240067d0:	f47f af30 	bne.w	24006634 <HAL_GPIO_Init+0x1c>
  }
}
240067d4:	b003      	add	sp, #12
240067d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
240067da:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
240067dc:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
240067e0:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
240067e2:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
240067e4:	fa03 f30c 	lsl.w	r3, r3, ip
240067e8:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
240067ec:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240067ee:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
240067f0:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240067f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
240067f8:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
240067fc:	4093      	lsls	r3, r2
240067fe:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
24006802:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
24006804:	684b      	ldr	r3, [r1, #4]
24006806:	f003 0303 	and.w	r3, r3, #3
2400680a:	e727      	b.n	2400665c <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
2400680c:	f04f 0a03 	mov.w	sl, #3
24006810:	fa0a f909 	lsl.w	r9, sl, r9
24006814:	ea43 0309 	orr.w	r3, r3, r9
24006818:	e7a0      	b.n	2400675c <HAL_GPIO_Init+0x144>
2400681a:	f04f 0a01 	mov.w	sl, #1
2400681e:	fa0a f909 	lsl.w	r9, sl, r9
24006822:	ea43 0309 	orr.w	r3, r3, r9
24006826:	e799      	b.n	2400675c <HAL_GPIO_Init+0x144>
24006828:	f04f 0a02 	mov.w	sl, #2
2400682c:	fa0a f909 	lsl.w	r9, sl, r9
24006830:	ea43 0309 	orr.w	r3, r3, r9
24006834:	e792      	b.n	2400675c <HAL_GPIO_Init+0x144>
24006836:	f04f 0a06 	mov.w	sl, #6
2400683a:	fa0a f909 	lsl.w	r9, sl, r9
2400683e:	ea43 0309 	orr.w	r3, r3, r9
24006842:	e78b      	b.n	2400675c <HAL_GPIO_Init+0x144>
24006844:	f04f 0a04 	mov.w	sl, #4
24006848:	fa0a f909 	lsl.w	r9, sl, r9
2400684c:	ea43 0309 	orr.w	r3, r3, r9
24006850:	e784      	b.n	2400675c <HAL_GPIO_Init+0x144>
24006852:	4770      	bx	lr
24006854:	f04f 0a05 	mov.w	sl, #5
24006858:	fa0a f909 	lsl.w	r9, sl, r9
2400685c:	ea43 0309 	orr.w	r3, r3, r9
24006860:	e77c      	b.n	2400675c <HAL_GPIO_Init+0x144>
24006862:	f04f 0a07 	mov.w	sl, #7
24006866:	fa0a f909 	lsl.w	r9, sl, r9
2400686a:	ea43 0309 	orr.w	r3, r3, r9
2400686e:	e775      	b.n	2400675c <HAL_GPIO_Init+0x144>
24006870:	f04f 0a08 	mov.w	sl, #8
24006874:	fa0a f909 	lsl.w	r9, sl, r9
24006878:	ea43 0309 	orr.w	r3, r3, r9
2400687c:	e76e      	b.n	2400675c <HAL_GPIO_Init+0x144>
2400687e:	bf00      	nop
24006880:	58024400 	.word	0x58024400
24006884:	58020000 	.word	0x58020000
24006888:	58020800 	.word	0x58020800
2400688c:	58020c00 	.word	0x58020c00
24006890:	58021000 	.word	0x58021000
24006894:	58021400 	.word	0x58021400
24006898:	58021800 	.word	0x58021800
2400689c:	58020400 	.word	0x58020400
240068a0:	58021c00 	.word	0x58021c00
240068a4:	58022000 	.word	0x58022000
240068a8:	58022400 	.word	0x58022400

240068ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
240068ac:	6903      	ldr	r3, [r0, #16]
240068ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
240068b0:	bf14      	ite	ne
240068b2:	2001      	movne	r0, #1
240068b4:	2000      	moveq	r0, #0
240068b6:	4770      	bx	lr

240068b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
240068b8:	b902      	cbnz	r2, 240068bc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
240068ba:	0409      	lsls	r1, r1, #16
240068bc:	6181      	str	r1, [r0, #24]
  }
}
240068be:	4770      	bx	lr

240068c0 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
240068c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240068c4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
240068c8:	4201      	tst	r1, r0
240068ca:	d100      	bne.n	240068ce <HAL_GPIO_EXTI_IRQHandler+0xe>
240068cc:	4770      	bx	lr
{
240068ce:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
240068d0:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
240068d4:	f7fc fd38 	bl	24003348 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
240068d8:	bd08      	pop	{r3, pc}
240068da:	bf00      	nop

240068dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
240068dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240068e0:	6803      	ldr	r3, [r0, #0]
{
240068e2:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240068e4:	699a      	ldr	r2, [r3, #24]
240068e6:	0694      	lsls	r4, r2, #26
240068e8:	d46d      	bmi.n	240069c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
240068ea:	4605      	mov	r5, r0
240068ec:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240068ee:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
240068f2:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
240068f4:	f014 0410 	ands.w	r4, r4, #16
240068f8:	d068      	beq.n	240069cc <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
240068fa:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240068fc:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
24006900:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006902:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
24006904:	46b2      	mov	sl, r6
24006906:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006908:	699a      	ldr	r2, [r3, #24]
2400690a:	d161      	bne.n	240069d0 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
2400690c:	0690      	lsls	r0, r2, #26
2400690e:	f100 8085 	bmi.w	24006a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
24006912:	f1ba 0f00 	cmp.w	sl, #0
24006916:	d105      	bne.n	24006924 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
24006918:	699c      	ldr	r4, [r3, #24]
2400691a:	06a1      	lsls	r1, r4, #26
2400691c:	d5fc      	bpl.n	24006918 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400691e:	2220      	movs	r2, #32
24006920:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
24006922:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
24006924:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
24006928:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
2400692a:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
2400692c:	05d0      	lsls	r0, r2, #23
2400692e:	d535      	bpl.n	2400699c <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006930:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006934:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
24006936:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400693a:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400693c:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2400693e:	d505      	bpl.n	2400694c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006940:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
24006944:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006948:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400694a:	682b      	ldr	r3, [r5, #0]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
2400694c:	0597      	lsls	r7, r2, #22
2400694e:	d505      	bpl.n	2400695c <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006950:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
24006954:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006958:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400695a:	682b      	ldr	r3, [r5, #0]
2400695c:	699a      	ldr	r2, [r3, #24]
2400695e:	0790      	lsls	r0, r2, #30
24006960:	d502      	bpl.n	24006968 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
24006962:	2200      	movs	r2, #0
24006964:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24006966:	682b      	ldr	r3, [r5, #0]
24006968:	699a      	ldr	r2, [r3, #24]
2400696a:	07d1      	lsls	r1, r2, #31
2400696c:	d404      	bmi.n	24006978 <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2400696e:	699a      	ldr	r2, [r3, #24]
24006970:	f042 0201 	orr.w	r2, r2, #1
24006974:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
24006976:	682b      	ldr	r3, [r5, #0]
24006978:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
2400697a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
2400697c:	4835      	ldr	r0, [pc, #212]	; (24006a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
2400697e:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
24006980:	4002      	ands	r2, r0
      return HAL_ERROR;
24006982:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24006984:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
24006986:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24006988:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
2400698c:	4323      	orrs	r3, r4
2400698e:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24006990:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24006994:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
24006998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
2400699c:	0550      	lsls	r0, r2, #21
2400699e:	d4cf      	bmi.n	24006940 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
240069a0:	0596      	lsls	r6, r2, #22
240069a2:	d4d5      	bmi.n	24006950 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
240069a4:	2900      	cmp	r1, #0
240069a6:	d1d9      	bne.n	2400695c <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240069a8:	f7fd ff5e 	bl	24004868 <HAL_GetTick>
240069ac:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
240069b0:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
240069b2:	42b8      	cmp	r0, r7
240069b4:	d800      	bhi.n	240069b8 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
240069b6:	b91f      	cbnz	r7, 240069c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
240069b8:	699a      	ldr	r2, [r3, #24]
240069ba:	f012 0220 	ands.w	r2, r2, #32
240069be:	d032      	beq.n	24006a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
240069c0:	699a      	ldr	r2, [r3, #24]
240069c2:	0692      	lsls	r2, r2, #26
240069c4:	d595      	bpl.n	240068f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
240069c6:	2000      	movs	r0, #0
}
240069c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
240069cc:	4621      	mov	r1, r4
240069ce:	e7ac      	b.n	2400692a <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
240069d0:	0692      	lsls	r2, r2, #26
240069d2:	d423      	bmi.n	24006a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
240069d4:	f1ba 0f00 	cmp.w	sl, #0
240069d8:	d1a4      	bne.n	24006924 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240069da:	f7fd ff45 	bl	24004868 <HAL_GetTick>
240069de:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240069e0:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
240069e2:	4287      	cmp	r7, r0
240069e4:	d301      	bcc.n	240069ea <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
240069e6:	2f00      	cmp	r7, #0
240069e8:	d18d      	bne.n	24006906 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
240069ea:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
240069ec:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240069f0:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
240069f2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
240069f4:	0409      	lsls	r1, r1, #16
240069f6:	d503      	bpl.n	24006a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
240069f8:	0441      	lsls	r1, r0, #17
240069fa:	d401      	bmi.n	24006a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
240069fc:	2a20      	cmp	r2, #32
240069fe:	d11f      	bne.n	24006a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006a00:	699a      	ldr	r2, [r3, #24]
24006a02:	0690      	lsls	r0, r2, #26
24006a04:	f53f af7f 	bmi.w	24006906 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24006a08:	f7fd ff2e 	bl	24004868 <HAL_GetTick>
24006a0c:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006a0e:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24006a10:	2819      	cmp	r0, #25
24006a12:	d9f5      	bls.n	24006a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24006a14:	2620      	movs	r6, #32
              status = HAL_ERROR;
24006a16:	f04f 0a01 	mov.w	sl, #1
24006a1a:	e774      	b.n	24006906 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
24006a1c:	f1ba 0f00 	cmp.w	sl, #0
24006a20:	f43f af7d 	beq.w	2400691e <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
24006a24:	e77e      	b.n	24006924 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006a26:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006a28:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
24006a2a:	2001      	movs	r0, #1
24006a2c:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006a30:	430b      	orrs	r3, r1
24006a32:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006a34:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24006a38:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
24006a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24006a40:	685a      	ldr	r2, [r3, #4]
24006a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24006a46:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
24006a48:	f7fd ff0e 	bl	24004868 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006a4c:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
24006a4e:	4604      	mov	r4, r0
24006a50:	e7d6      	b.n	24006a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
24006a52:	bf00      	nop
24006a54:	fe00e800 	.word	0xfe00e800

24006a58 <HAL_I2C_Init>:
  if (hi2c == NULL)
24006a58:	2800      	cmp	r0, #0
24006a5a:	d056      	beq.n	24006b0a <HAL_I2C_Init+0xb2>
{
24006a5c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
24006a5e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006a62:	4604      	mov	r4, r0
24006a64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24006a68:	2b00      	cmp	r3, #0
24006a6a:	d049      	beq.n	24006b00 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
24006a6c:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
24006a6e:	2324      	movs	r3, #36	; 0x24
24006a70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
24006a74:	6813      	ldr	r3, [r2, #0]
24006a76:	f023 0301 	bic.w	r3, r3, #1
24006a7a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
24006a7c:	e9d4 2300 	ldrd	r2, r3, [r4]
24006a80:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
24006a84:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
24006a86:	6822      	ldr	r2, [r4, #0]
24006a88:	6893      	ldr	r3, [r2, #8]
24006a8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24006a8e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24006a90:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
24006a92:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
24006a94:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
24006a96:	68a3      	ldr	r3, [r4, #8]
24006a98:	bf0c      	ite	eq
24006a9a:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
24006a9e:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
24006aa2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006aa4:	68e3      	ldr	r3, [r4, #12]
24006aa6:	2b02      	cmp	r3, #2
24006aa8:	d103      	bne.n	24006ab2 <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
24006aaa:	6823      	ldr	r3, [r4, #0]
24006aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
24006ab0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24006ab2:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
24006ab4:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
24006ab8:	4b15      	ldr	r3, [pc, #84]	; (24006b10 <HAL_I2C_Init+0xb8>)
24006aba:	6851      	ldr	r1, [r2, #4]
24006abc:	430b      	orrs	r3, r1
24006abe:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
24006ac0:	6822      	ldr	r2, [r4, #0]
24006ac2:	68d3      	ldr	r3, [r2, #12]
24006ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
24006ac8:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
24006aca:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24006acc:	6821      	ldr	r1, [r4, #0]
24006ace:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
24006ad2:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24006ad4:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
24006ad6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
24006ada:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24006adc:	6821      	ldr	r1, [r4, #0]
24006ade:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
24006ae2:	4303      	orrs	r3, r0
  return HAL_OK;
24006ae4:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
24006ae6:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
24006ae8:	6821      	ldr	r1, [r4, #0]
24006aea:	680b      	ldr	r3, [r1, #0]
24006aec:	f043 0301 	orr.w	r3, r3, #1
24006af0:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24006af2:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
24006af4:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
24006af8:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006afa:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
24006afe:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
24006b00:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
24006b04:	f7fa fbf2 	bl	240012ec <HAL_I2C_MspInit>
24006b08:	e7b0      	b.n	24006a6c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
24006b0a:	2001      	movs	r0, #1
}
24006b0c:	4770      	bx	lr
24006b0e:	bf00      	nop
24006b10:	02008000 	.word	0x02008000

24006b14 <HAL_I2C_Master_Transmit>:
{
24006b14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
24006b18:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
24006b1a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
24006b1e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
24006b20:	2b20      	cmp	r3, #32
24006b22:	d12c      	bne.n	24006b7e <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
24006b24:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
24006b28:	4683      	mov	fp, r0
24006b2a:	2b01      	cmp	r3, #1
24006b2c:	d027      	beq.n	24006b7e <HAL_I2C_Master_Transmit+0x6a>
24006b2e:	2301      	movs	r3, #1
24006b30:	468a      	mov	sl, r1
24006b32:	4616      	mov	r6, r2
24006b34:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
24006b38:	f7fd fe96 	bl	24004868 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24006b3c:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
24006b40:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24006b42:	699a      	ldr	r2, [r3, #24]
24006b44:	0417      	lsls	r7, r2, #16
24006b46:	d51d      	bpl.n	24006b84 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006b48:	f7fd fe8e 	bl	24004868 <HAL_GetTick>
24006b4c:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24006b50:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006b54:	2819      	cmp	r0, #25
24006b56:	d9f4      	bls.n	24006b42 <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24006b58:	699a      	ldr	r2, [r3, #24]
24006b5a:	0410      	lsls	r0, r2, #16
24006b5c:	d5f1      	bpl.n	24006b42 <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006b5e:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006b62:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
24006b64:	2200      	movs	r2, #0
      return HAL_ERROR;
24006b66:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006b68:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
24006b6a:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006b6e:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006b72:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24006b76:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
24006b7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
24006b7e:	2002      	movs	r0, #2
}
24006b80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24006b84:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24006b86:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
24006b88:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
24006b8c:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
24006b90:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
24006b92:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
24006b96:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
24006b9a:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
24006b9e:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
24006ba2:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
24006ba6:	b292      	uxth	r2, r2
24006ba8:	2aff      	cmp	r2, #255	; 0xff
24006baa:	d87e      	bhi.n	24006caa <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
24006bac:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
24006bb0:	49ad      	ldr	r1, [pc, #692]	; (24006e68 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
24006bb2:	b292      	uxth	r2, r2
24006bb4:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24006bb8:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
24006bba:	6858      	ldr	r0, [r3, #4]
24006bbc:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24006bbe:	f3ca 0109 	ubfx	r1, sl, #0, #10
24006bc2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
24006bc6:	4301      	orrs	r1, r0
24006bc8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
24006bcc:	49a7      	ldr	r1, [pc, #668]	; (24006e6c <HAL_I2C_Master_Transmit+0x358>)
24006bce:	4311      	orrs	r1, r2
24006bd0:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24006bd2:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
24006bd6:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
24006bda:	b29b      	uxth	r3, r3
24006bdc:	2b00      	cmp	r3, #0
24006bde:	f000 8107 	beq.w	24006df0 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
24006be2:	f8db 3000 	ldr.w	r3, [fp]
24006be6:	699c      	ldr	r4, [r3, #24]
24006be8:	f014 0402 	ands.w	r4, r4, #2
24006bec:	f040 80c5 	bne.w	24006d7a <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
24006bf0:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
24006bf2:	f012 0210 	ands.w	r2, r2, #16
24006bf6:	f000 808d 	beq.w	24006d14 <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006bfa:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
24006bfc:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
24006bfe:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24006c00:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006c02:	f8db 3000 	ldr.w	r3, [fp]
24006c06:	1c69      	adds	r1, r5, #1
24006c08:	699a      	ldr	r2, [r3, #24]
24006c0a:	f040 8085 	bne.w	24006d18 <HAL_I2C_Master_Transmit+0x204>
24006c0e:	0690      	lsls	r0, r2, #26
24006c10:	f100 8106 	bmi.w	24006e20 <HAL_I2C_Master_Transmit+0x30c>
24006c14:	b937      	cbnz	r7, 24006c24 <HAL_I2C_Master_Transmit+0x110>
24006c16:	699a      	ldr	r2, [r3, #24]
24006c18:	0691      	lsls	r1, r2, #26
24006c1a:	d5fc      	bpl.n	24006c16 <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006c1c:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
24006c20:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
24006c24:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
24006c28:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
24006c2a:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
24006c2c:	05ce      	lsls	r6, r1, #23
24006c2e:	d54b      	bpl.n	24006cc8 <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006c30:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006c34:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
24006c36:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24006c3a:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006c3c:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006c40:	d506      	bpl.n	24006c50 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006c42:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
24006c46:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24006c4a:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006c4c:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006c50:	0589      	lsls	r1, r1, #22
24006c52:	d506      	bpl.n	24006c62 <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006c54:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
24006c58:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24006c5c:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24006c5e:	f8db 3000 	ldr.w	r3, [fp]
24006c62:	6999      	ldr	r1, [r3, #24]
24006c64:	078e      	lsls	r6, r1, #30
24006c66:	d503      	bpl.n	24006c70 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
24006c68:	2100      	movs	r1, #0
24006c6a:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24006c6c:	f8db 3000 	ldr.w	r3, [fp]
24006c70:	6999      	ldr	r1, [r3, #24]
24006c72:	07cd      	lsls	r5, r1, #31
24006c74:	d405      	bmi.n	24006c82 <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
24006c76:	6999      	ldr	r1, [r3, #24]
24006c78:	f041 0101 	orr.w	r1, r1, #1
24006c7c:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
24006c7e:	f8db 3000 	ldr.w	r3, [fp]
24006c82:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
24006c84:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
24006c86:	487a      	ldr	r0, [pc, #488]	; (24006e70 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
24006c88:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
24006c8a:	4001      	ands	r1, r0
        return HAL_ERROR;
24006c8c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
24006c8e:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
24006c90:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
24006c94:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
24006c98:	4313      	orrs	r3, r2
24006c9a:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
24006c9e:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
24006ca2:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
24006ca6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
24006caa:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
24006cac:	496e      	ldr	r1, [pc, #440]	; (24006e68 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
24006cae:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24006cb2:	685a      	ldr	r2, [r3, #4]
24006cb4:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
24006cb6:	f3ca 0109 	ubfx	r1, sl, #0, #10
24006cba:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
24006cbe:	4311      	orrs	r1, r2
24006cc0:	4a6c      	ldr	r2, [pc, #432]	; (24006e74 <HAL_I2C_Master_Transmit+0x360>)
24006cc2:	430a      	orrs	r2, r1
24006cc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
24006cc6:	e784      	b.n	24006bd2 <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
24006cc8:	054c      	lsls	r4, r1, #21
24006cca:	d4ba      	bmi.n	24006c42 <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
24006ccc:	058f      	lsls	r7, r1, #22
24006cce:	d4c1      	bmi.n	24006c54 <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
24006cd0:	2800      	cmp	r0, #0
24006cd2:	d1c6      	bne.n	24006c62 <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
24006cd4:	1c6c      	adds	r4, r5, #1
24006cd6:	d086      	beq.n	24006be6 <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006cd8:	f7fd fdc6 	bl	24004868 <HAL_GetTick>
24006cdc:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24006ce0:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006ce4:	4285      	cmp	r5, r0
24006ce6:	d302      	bcc.n	24006cee <HAL_I2C_Master_Transmit+0x1da>
24006ce8:	2d00      	cmp	r5, #0
24006cea:	f47f af7c 	bne.w	24006be6 <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
24006cee:	699a      	ldr	r2, [r3, #24]
24006cf0:	f012 0202 	ands.w	r2, r2, #2
24006cf4:	f47f af77 	bne.w	24006be6 <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006cf8:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006cfc:	2120      	movs	r1, #32
        return HAL_ERROR;
24006cfe:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
24006d00:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006d04:	430b      	orrs	r3, r1
24006d06:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006d0a:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24006d0e:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
24006d12:	e735      	b.n	24006b80 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
24006d14:	4610      	mov	r0, r2
24006d16:	e788      	b.n	24006c2a <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006d18:	0692      	lsls	r2, r2, #26
24006d1a:	f100 8081 	bmi.w	24006e20 <HAL_I2C_Master_Transmit+0x30c>
24006d1e:	2f00      	cmp	r7, #0
24006d20:	d180      	bne.n	24006c24 <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24006d22:	f7fd fda1 	bl	24004868 <HAL_GetTick>
24006d26:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24006d28:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
24006d2c:	4285      	cmp	r5, r0
24006d2e:	d302      	bcc.n	24006d36 <HAL_I2C_Master_Transmit+0x222>
24006d30:	2d00      	cmp	r5, #0
24006d32:	f47f af68 	bne.w	24006c06 <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
24006d36:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
24006d38:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24006d3c:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
24006d3e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
24006d40:	0409      	lsls	r1, r1, #16
24006d42:	d50c      	bpl.n	24006d5e <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
24006d44:	0441      	lsls	r1, r0, #17
24006d46:	d40a      	bmi.n	24006d5e <HAL_I2C_Master_Transmit+0x24a>
24006d48:	2a20      	cmp	r2, #32
24006d4a:	d008      	beq.n	24006d5e <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
24006d4c:	685a      	ldr	r2, [r3, #4]
24006d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
24006d52:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
24006d54:	f7fd fd88 	bl	24004868 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006d58:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
24006d5c:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
24006d5e:	699a      	ldr	r2, [r3, #24]
24006d60:	0690      	lsls	r0, r2, #26
24006d62:	f53f af50 	bmi.w	24006c06 <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24006d66:	f7fd fd7f 	bl	24004868 <HAL_GetTick>
24006d6a:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
24006d6c:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
24006d70:	2819      	cmp	r0, #25
24006d72:	d9f4      	bls.n	24006d5e <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
24006d74:	2420      	movs	r4, #32
              status = HAL_ERROR;
24006d76:	2701      	movs	r7, #1
24006d78:	e745      	b.n	24006c06 <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
24006d7a:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
24006d7e:	7812      	ldrb	r2, [r2, #0]
24006d80:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
24006d82:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
24006d86:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
24006d8a:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
24006d8c:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
24006d90:	3b01      	subs	r3, #1
      hi2c->XferCount--;
24006d92:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
24006d94:	3101      	adds	r1, #1
      hi2c->XferSize--;
24006d96:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
24006d98:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
24006d9c:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
24006da0:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
24006da4:	b292      	uxth	r2, r2
      hi2c->XferSize--;
24006da6:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
24006daa:	2b00      	cmp	r3, #0
24006dac:	f47f af13 	bne.w	24006bd6 <HAL_I2C_Master_Transmit+0xc2>
24006db0:	2a00      	cmp	r2, #0
24006db2:	f43f af10 	beq.w	24006bd6 <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24006db6:	f8db 2000 	ldr.w	r2, [fp]
24006dba:	1c68      	adds	r0, r5, #1
24006dbc:	d134      	bne.n	24006e28 <HAL_I2C_Master_Transmit+0x314>
24006dbe:	6993      	ldr	r3, [r2, #24]
24006dc0:	0619      	lsls	r1, r3, #24
24006dc2:	d5fc      	bpl.n	24006dbe <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
24006dc4:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
24006dc8:	b29b      	uxth	r3, r3
24006dca:	2bff      	cmp	r3, #255	; 0xff
24006dcc:	d958      	bls.n	24006e80 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
24006dce:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
24006dd0:	4929      	ldr	r1, [pc, #164]	; (24006e78 <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
24006dd2:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24006dd6:	6853      	ldr	r3, [r2, #4]
24006dd8:	400b      	ands	r3, r1
24006dda:	4928      	ldr	r1, [pc, #160]	; (24006e7c <HAL_I2C_Master_Transmit+0x368>)
24006ddc:	ea4a 0303 	orr.w	r3, sl, r3
24006de0:	4319      	orrs	r1, r3
24006de2:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
24006de4:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
24006de8:	b29b      	uxth	r3, r3
24006dea:	2b00      	cmp	r3, #0
24006dec:	f47f aef9 	bne.w	24006be2 <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
24006df0:	4642      	mov	r2, r8
24006df2:	4629      	mov	r1, r5
24006df4:	4658      	mov	r0, fp
24006df6:	f7ff fd71 	bl	240068dc <I2C_WaitOnSTOPFlagUntilTimeout>
24006dfa:	2800      	cmp	r0, #0
24006dfc:	d151      	bne.n	24006ea2 <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006dfe:	f8db 3000 	ldr.w	r3, [fp]
24006e02:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
24006e04:	4c1a      	ldr	r4, [pc, #104]	; (24006e70 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24006e06:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
24006e08:	f8db 1000 	ldr.w	r1, [fp]
24006e0c:	684b      	ldr	r3, [r1, #4]
24006e0e:	4023      	ands	r3, r4
24006e10:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
24006e12:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24006e16:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
24006e1a:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
24006e1e:	e6af      	b.n	24006b80 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
24006e20:	2f00      	cmp	r7, #0
24006e22:	f43f aefb 	beq.w	24006c1c <HAL_I2C_Master_Transmit+0x108>
24006e26:	e6fd      	b.n	24006c24 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
24006e28:	6993      	ldr	r3, [r2, #24]
24006e2a:	061b      	lsls	r3, r3, #24
24006e2c:	d4ca      	bmi.n	24006dc4 <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006e2e:	f7fd fd1b 	bl	24004868 <HAL_GetTick>
24006e32:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24006e36:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006e3a:	4285      	cmp	r5, r0
24006e3c:	d301      	bcc.n	24006e42 <HAL_I2C_Master_Transmit+0x32e>
24006e3e:	2d00      	cmp	r5, #0
24006e40:	d1bb      	bne.n	24006dba <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
24006e42:	6993      	ldr	r3, [r2, #24]
24006e44:	f013 0380 	ands.w	r3, r3, #128	; 0x80
24006e48:	d1b7      	bne.n	24006dba <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006e4a:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006e4e:	2120      	movs	r1, #32
          return HAL_ERROR;
24006e50:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
24006e52:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
24006e56:	430a      	orrs	r2, r1
24006e58:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
24006e5c:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
24006e60:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
24006e64:	e68c      	b.n	24006b80 <HAL_I2C_Master_Transmit+0x6c>
24006e66:	bf00      	nop
24006e68:	fc009800 	.word	0xfc009800
24006e6c:	02002000 	.word	0x02002000
24006e70:	fe00e800 	.word	0xfe00e800
24006e74:	01ff2000 	.word	0x01ff2000
24006e78:	fc009c00 	.word	0xfc009c00
24006e7c:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
24006e80:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
24006e84:	4808      	ldr	r0, [pc, #32]	; (24006ea8 <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
24006e86:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
24006e88:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
24006e8a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
24006e8e:	6853      	ldr	r3, [r2, #4]
24006e90:	4003      	ands	r3, r0
24006e92:	ea4a 0303 	orr.w	r3, sl, r3
24006e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
24006e9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
24006e9e:	6053      	str	r3, [r2, #4]
}
24006ea0:	e699      	b.n	24006bd6 <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
24006ea2:	2001      	movs	r0, #1
24006ea4:	e66c      	b.n	24006b80 <HAL_I2C_Master_Transmit+0x6c>
24006ea6:	bf00      	nop
24006ea8:	fc009c00 	.word	0xfc009c00

24006eac <HAL_I2C_Slave_Receive_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
24006eac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006eb0:	2b20      	cmp	r3, #32
24006eb2:	d126      	bne.n	24006f02 <HAL_I2C_Slave_Receive_IT+0x56>
{
24006eb4:	b4f0      	push	{r4, r5, r6, r7}
24006eb6:	b2dc      	uxtb	r4, r3
    __HAL_LOCK(hi2c);
24006eb8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
24006ebc:	2b01      	cmp	r3, #1
24006ebe:	d022      	beq.n	24006f06 <HAL_I2C_Slave_Receive_IT+0x5a>
24006ec0:	2301      	movs	r3, #1
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
24006ec2:	6805      	ldr	r5, [r0, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006ec4:	4e11      	ldr	r6, [pc, #68]	; (24006f0c <HAL_I2C_Slave_Receive_IT+0x60>)
    __HAL_LOCK(hi2c);
24006ec6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
24006eca:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR     = I2C_Slave_ISR_IT;
24006ecc:	4f10      	ldr	r7, [pc, #64]	; (24006f10 <HAL_I2C_Slave_Receive_IT+0x64>)
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
24006ece:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
24006ed2:	2300      	movs	r3, #0
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
24006ed4:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
24006ed8:	6443      	str	r3, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
24006eda:	686c      	ldr	r4, [r5, #4]
24006edc:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
24006ee0:	606c      	str	r4, [r5, #4]
    hi2c->XferCount   = Size;
24006ee2:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
24006ee4:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
24006ee6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
24006ee8:	6801      	ldr	r1, [r0, #0]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
24006eea:	6347      	str	r7, [r0, #52]	; 0x34
    hi2c->XferSize    = hi2c->XferCount;
24006eec:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24006eee:	62c6      	str	r6, [r0, #44]	; 0x2c
    __HAL_UNLOCK(hi2c);
24006ef0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_OK;
24006ef4:	4618      	mov	r0, r3
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
24006ef6:	680a      	ldr	r2, [r1, #0]
24006ef8:	f042 02fc 	orr.w	r2, r2, #252	; 0xfc
24006efc:	600a      	str	r2, [r1, #0]
}
24006efe:	bcf0      	pop	{r4, r5, r6, r7}
24006f00:	4770      	bx	lr
    return HAL_BUSY;
24006f02:	2002      	movs	r0, #2
}
24006f04:	4770      	bx	lr
    return HAL_BUSY;
24006f06:	2002      	movs	r0, #2
}
24006f08:	bcf0      	pop	{r4, r5, r6, r7}
24006f0a:	4770      	bx	lr
24006f0c:	ffff0000 	.word	0xffff0000
24006f10:	240073fd 	.word	0x240073fd

24006f14 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24006f14:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
24006f16:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24006f18:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
24006f1a:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
24006f1c:	b103      	cbz	r3, 24006f20 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
24006f1e:	4718      	bx	r3
}
24006f20:	4770      	bx	lr
24006f22:	bf00      	nop

24006f24 <HAL_I2C_SlaveTxCpltCallback>:
24006f24:	4770      	bx	lr
24006f26:	bf00      	nop

24006f28 <I2C_ITSlaveSeqCplt>:
{
24006f28:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24006f2a:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006f2c:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24006f2e:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
24006f30:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
24006f34:	0451      	lsls	r1, r2, #17
24006f36:	d526      	bpl.n	24006f86 <I2C_ITSlaveSeqCplt+0x5e>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
24006f38:	681a      	ldr	r2, [r3, #0]
24006f3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
24006f3e:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
24006f40:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006f44:	2b29      	cmp	r3, #41	; 0x29
24006f46:	d028      	beq.n	24006f9a <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
24006f48:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006f4c:	2b2a      	cmp	r3, #42	; 0x2a
24006f4e:	d000      	beq.n	24006f52 <I2C_ITSlaveSeqCplt+0x2a>
}
24006f50:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006f52:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24006f54:	2322      	movs	r3, #34	; 0x22
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006f56:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
24006f58:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006f5c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
24006f60:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006f62:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006f66:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006f68:	f002 0228 	and.w	r2, r2, #40	; 0x28
24006f6c:	2a28      	cmp	r2, #40	; 0x28
24006f6e:	bf0c      	ite	eq
24006f70:	f06f 0244 	mvneq.w	r2, #68	; 0x44
24006f74:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006f78:	4013      	ands	r3, r2
24006f7a:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
24006f7c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24006f80:	f024 fbaa 	bl	2402b6d8 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
24006f84:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
24006f86:	0412      	lsls	r2, r2, #16
24006f88:	d5da      	bpl.n	24006f40 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24006f8a:	681a      	ldr	r2, [r3, #0]
24006f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24006f90:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
24006f92:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24006f96:	2b29      	cmp	r3, #41	; 0x29
24006f98:	d1d6      	bne.n	24006f48 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006f9a:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24006f9c:	2321      	movs	r3, #33	; 0x21
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006f9e:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
24006fa0:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
24006fa4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
24006fa8:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006faa:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006fae:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24006fb0:	f002 0228 	and.w	r2, r2, #40	; 0x28
24006fb4:	2a28      	cmp	r2, #40	; 0x28
24006fb6:	bf0c      	ite	eq
24006fb8:	f06f 0242 	mvneq.w	r2, #66	; 0x42
24006fbc:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24006fc0:	4013      	ands	r3, r2
24006fc2:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
24006fc4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
24006fc8:	f7ff ffac 	bl	24006f24 <HAL_I2C_SlaveTxCpltCallback>
}
24006fcc:	bd08      	pop	{r3, pc}
24006fce:	bf00      	nop

24006fd0 <HAL_I2C_AddrCallback>:
}
24006fd0:	4770      	bx	lr
24006fd2:	bf00      	nop

24006fd4 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24006fd4:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
24006fd6:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24006fd8:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006fda:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
24006fdc:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006fde:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006fe0:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24006fe2:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
24006fe4:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006fe8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
24006fec:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
24006fee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
24006ff2:	d10f      	bne.n	24007014 <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24006ff4:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
24006ff8:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
24006ffc:	f013 0306 	ands.w	r3, r3, #6
24007000:	d106      	bne.n	24007010 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
24007002:	6c85      	ldr	r5, [r0, #72]	; 0x48
24007004:	3501      	adds	r5, #1
24007006:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
24007008:	6c85      	ldr	r5, [r0, #72]	; 0x48
2400700a:	2d02      	cmp	r5, #2
2400700c:	d00c      	beq.n	24007028 <I2C_ITAddrCplt.part.0+0x54>
}
2400700e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24007010:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007014:	6823      	ldr	r3, [r4, #0]
24007016:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
2400701a:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
2400701c:	2300      	movs	r3, #0
2400701e:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24007022:	f7ff ffd5 	bl	24006fd0 <HAL_I2C_AddrCallback>
}
24007026:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24007028:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
2400702a:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
2400702c:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
2400702e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
24007032:	f7ff ffcd 	bl	24006fd0 <HAL_I2C_AddrCallback>
}
24007036:	bd70      	pop	{r4, r5, r6, pc}

24007038 <HAL_I2C_ListenCpltCallback>:
24007038:	4770      	bx	lr
2400703a:	bf00      	nop

2400703c <HAL_I2C_AbortCpltCallback>:
2400703c:	4770      	bx	lr
2400703e:	bf00      	nop

24007040 <I2C_DMAAbort>:
{
24007040:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
24007042:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
24007044:	6b83      	ldr	r3, [r0, #56]	; 0x38
24007046:	b10b      	cbz	r3, 2400704c <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
24007048:	2200      	movs	r2, #0
2400704a:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
2400704c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
2400704e:	b10b      	cbz	r3, 24007054 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
24007050:	2200      	movs	r2, #0
24007052:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
24007054:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
24007058:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
2400705a:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
2400705e:	d005      	beq.n	2400706c <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
24007060:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24007062:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24007066:	f024 fb5b 	bl	2402b720 <__HAL_I2C_ErrorCallback_veneer>
}
2400706a:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
2400706c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
2400706e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24007072:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24007076:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
24007078:	f7ff ffe0 	bl	2400703c <HAL_I2C_AbortCpltCallback>
}
2400707c:	bd08      	pop	{r3, pc}
2400707e:	bf00      	nop

24007080 <I2C_ITError>:
{
24007080:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24007082:	4a5d      	ldr	r2, [pc, #372]	; (240071f8 <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
24007084:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24007086:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
2400708a:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
2400708c:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24007090:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
24007092:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
24007094:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
24007096:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
24007098:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
2400709a:	ea41 0102 	orr.w	r1, r1, r2
2400709e:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
240070a0:	d874      	bhi.n	2400718c <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240070a2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240070a6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240070aa:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240070ae:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240070b0:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240070b4:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240070b6:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240070b8:	bf14      	ite	ne
240070ba:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
240070be:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240070c2:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
240070c4:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240070c8:	bf18      	it	ne
240070ca:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240070ce:	4013      	ands	r3, r2
240070d0:	4a4a      	ldr	r2, [pc, #296]	; (240071fc <I2C_ITError+0x17c>)
240070d2:	6003      	str	r3, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
240070d4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
240070d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
240070da:	6b23      	ldr	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
240070dc:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
240070de:	b118      	cbz	r0, 240070e8 <I2C_ITError+0x68>
240070e0:	2b11      	cmp	r3, #17
240070e2:	d01e      	beq.n	24007122 <I2C_ITError+0xa2>
240070e4:	2b21      	cmp	r3, #33	; 0x21
240070e6:	d01c      	beq.n	24007122 <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
240070e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
240070ea:	b118      	cbz	r0, 240070f4 <I2C_ITError+0x74>
240070ec:	2b12      	cmp	r3, #18
240070ee:	d030      	beq.n	24007152 <I2C_ITError+0xd2>
240070f0:	2b22      	cmp	r3, #34	; 0x22
240070f2:	d02e      	beq.n	24007152 <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
240070f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
240070f8:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
240070fa:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
240070fe:	d006      	beq.n	2400710e <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
24007100:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
24007102:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
24007104:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
24007108:	f024 fb0a 	bl	2402b720 <__HAL_I2C_ErrorCallback_veneer>
}
2400710c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
2400710e:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
24007110:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
24007112:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
24007116:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
2400711a:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
2400711c:	f7ff ff8e 	bl	2400703c <HAL_I2C_AbortCpltCallback>
}
24007120:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
24007122:	6823      	ldr	r3, [r4, #0]
24007124:	681a      	ldr	r2, [r3, #0]
24007126:	0451      	lsls	r1, r2, #17
24007128:	d45f      	bmi.n	240071ea <I2C_ITError+0x16a>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
2400712a:	f7ff fa05 	bl	24006538 <HAL_DMA_GetState>
2400712e:	2801      	cmp	r0, #1
24007130:	d0e0      	beq.n	240070f4 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24007132:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
24007134:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
24007136:	4932      	ldr	r1, [pc, #200]	; (24007200 <I2C_ITError+0x180>)
24007138:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
2400713a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
2400713e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
24007140:	f7fe fc90 	bl	24005a64 <HAL_DMA_Abort_IT>
24007144:	2800      	cmp	r0, #0
24007146:	d0e1      	beq.n	2400710c <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
24007148:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
2400714a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
2400714e:	6d03      	ldr	r3, [r0, #80]	; 0x50
24007150:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
24007152:	6823      	ldr	r3, [r4, #0]
24007154:	681a      	ldr	r2, [r3, #0]
24007156:	0412      	lsls	r2, r2, #16
24007158:	d504      	bpl.n	24007164 <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
2400715a:	681a      	ldr	r2, [r3, #0]
2400715c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24007160:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
24007162:	6be0      	ldr	r0, [r4, #60]	; 0x3c
24007164:	f7ff f9e8 	bl	24006538 <HAL_DMA_GetState>
24007168:	2801      	cmp	r0, #1
2400716a:	d0c3      	beq.n	240070f4 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
2400716c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
2400716e:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
24007170:	4923      	ldr	r1, [pc, #140]	; (24007200 <I2C_ITError+0x180>)
24007172:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
24007174:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
24007178:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400717a:	f7fe fc73 	bl	24005a64 <HAL_DMA_Abort_IT>
2400717e:	2800      	cmp	r0, #0
24007180:	d0c4      	beq.n	2400710c <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24007182:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
24007184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
24007188:	6d03      	ldr	r3, [r0, #80]	; 0x50
2400718a:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400718c:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400718e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007192:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007196:	6813      	ldr	r3, [r2, #0]
24007198:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
2400719c:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
2400719e:	6803      	ldr	r3, [r0, #0]
240071a0:	699a      	ldr	r2, [r3, #24]
240071a2:	0792      	lsls	r2, r2, #30
240071a4:	d501      	bpl.n	240071aa <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
240071a6:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
240071a8:	6803      	ldr	r3, [r0, #0]
240071aa:	699a      	ldr	r2, [r3, #24]
240071ac:	07d6      	lsls	r6, r2, #31
240071ae:	d403      	bmi.n	240071b8 <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
240071b0:	699a      	ldr	r2, [r3, #24]
240071b2:	f042 0201 	orr.w	r2, r2, #1
240071b6:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
240071b8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
240071bc:	2b60      	cmp	r3, #96	; 0x60
240071be:	d012      	beq.n	240071e6 <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
240071c0:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
240071c2:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
240071c4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
240071c8:	699a      	ldr	r2, [r3, #24]
240071ca:	0695      	lsls	r5, r2, #26
240071cc:	d50b      	bpl.n	240071e6 <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
240071ce:	699a      	ldr	r2, [r3, #24]
240071d0:	06d0      	lsls	r0, r2, #27
240071d2:	d506      	bpl.n	240071e2 <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240071d4:	2210      	movs	r2, #16
240071d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
240071d8:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240071da:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
240071dc:	f042 0204 	orr.w	r2, r2, #4
240071e0:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
240071e2:	2220      	movs	r2, #32
240071e4:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
240071e6:	2200      	movs	r2, #0
240071e8:	e776      	b.n	240070d8 <I2C_ITError+0x58>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
240071ea:	681a      	ldr	r2, [r3, #0]
240071ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
240071f0:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
240071f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
240071f4:	e799      	b.n	2400712a <I2C_ITError+0xaa>
240071f6:	bf00      	nop
240071f8:	ffff0000 	.word	0xffff0000
240071fc:	240073fd 	.word	0x240073fd
24007200:	24007041 	.word	0x24007041

24007204 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24007204:	6803      	ldr	r3, [r0, #0]
{
24007206:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
24007208:	699a      	ldr	r2, [r3, #24]
2400720a:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
2400720c:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
2400720e:	f412 7f80 	tst.w	r2, #256	; 0x100
24007212:	d032      	beq.n	2400727a <HAL_I2C_ER_IRQHandler+0x76>
24007214:	f011 0f80 	tst.w	r1, #128	; 0x80
24007218:	d021      	beq.n	2400725e <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
2400721a:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
2400721c:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
24007220:	f041 0101 	orr.w	r1, r1, #1
24007224:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
24007226:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
24007228:	0553      	lsls	r3, r2, #21
2400722a:	d507      	bpl.n	2400723c <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400722c:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
2400722e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
24007230:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
24007234:	f041 0108 	orr.w	r1, r1, #8
24007238:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
2400723a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
2400723c:	0592      	lsls	r2, r2, #22
2400723e:	d507      	bpl.n	24007250 <HAL_I2C_ER_IRQHandler+0x4c>
24007240:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24007242:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
24007244:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
24007248:	f043 0302 	orr.w	r3, r3, #2
2400724c:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
2400724e:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
24007250:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
24007252:	f011 0f0b 	tst.w	r1, #11
24007256:	d10c      	bne.n	24007272 <HAL_I2C_ER_IRQHandler+0x6e>
}
24007258:	f85d 4b04 	ldr.w	r4, [sp], #4
2400725c:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400725e:	0553      	lsls	r3, r2, #21
24007260:	d4f6      	bmi.n	24007250 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
24007262:	0593      	lsls	r3, r2, #22
24007264:	d5f4      	bpl.n	24007250 <HAL_I2C_ER_IRQHandler+0x4c>
24007266:	060a      	lsls	r2, r1, #24
24007268:	d4eb      	bmi.n	24007242 <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
2400726a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
2400726c:	f011 0f0b 	tst.w	r1, #11
24007270:	d0f2      	beq.n	24007258 <HAL_I2C_ER_IRQHandler+0x54>
}
24007272:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
24007276:	f7ff bf03 	b.w	24007080 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
2400727a:	f412 6f80 	tst.w	r2, #1024	; 0x400
2400727e:	d0f0      	beq.n	24007262 <HAL_I2C_ER_IRQHandler+0x5e>
24007280:	0609      	lsls	r1, r1, #24
24007282:	d5e5      	bpl.n	24007250 <HAL_I2C_ER_IRQHandler+0x4c>
24007284:	e7d3      	b.n	2400722e <HAL_I2C_ER_IRQHandler+0x2a>
24007286:	bf00      	nop

24007288 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
24007288:	b570      	push	{r4, r5, r6, lr}
2400728a:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
2400728c:	6802      	ldr	r2, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
2400728e:	2520      	movs	r5, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
24007290:	6810      	ldr	r0, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
24007292:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
24007296:	61d5      	str	r5, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
24007298:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
2400729c:	2b21      	cmp	r3, #33	; 0x21
2400729e:	d16d      	bne.n	2400737c <I2C_ITSlaveCplt.constprop.0+0xf4>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240072a0:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240072a2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240072a6:	682a      	ldr	r2, [r5, #0]
240072a8:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
240072ac:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
240072ae:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
240072b0:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
240072b2:	4d50      	ldr	r5, [pc, #320]	; (240073f4 <I2C_ITSlaveCplt.constprop.0+0x16c>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
240072b4:	6853      	ldr	r3, [r2, #4]
240072b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
240072ba:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
240072bc:	6822      	ldr	r2, [r4, #0]
240072be:	6853      	ldr	r3, [r2, #4]
240072c0:	402b      	ands	r3, r5
240072c2:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
240072c4:	6823      	ldr	r3, [r4, #0]
240072c6:	699a      	ldr	r2, [r3, #24]
240072c8:	0792      	lsls	r2, r2, #30
240072ca:	d502      	bpl.n	240072d2 <I2C_ITSlaveCplt.constprop.0+0x4a>
    hi2c->Instance->TXDR = 0x00U;
240072cc:	2200      	movs	r2, #0
240072ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
240072d0:	6823      	ldr	r3, [r4, #0]
240072d2:	699a      	ldr	r2, [r3, #24]
240072d4:	07d6      	lsls	r6, r2, #31
240072d6:	d403      	bmi.n	240072e0 <I2C_ITSlaveCplt.constprop.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
240072d8:	699a      	ldr	r2, [r3, #24]
240072da:	f042 0201 	orr.w	r2, r2, #1
240072de:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
240072e0:	0445      	lsls	r5, r0, #17
240072e2:	d556      	bpl.n	24007392 <I2C_ITSlaveCplt.constprop.0+0x10a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
240072e4:	6822      	ldr	r2, [r4, #0]
240072e6:	6813      	ldr	r3, [r2, #0]
240072e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
240072ec:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
240072ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
240072f0:	b11b      	cbz	r3, 240072fa <I2C_ITSlaveCplt.constprop.0+0x72>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
240072f2:	681a      	ldr	r2, [r3, #0]
240072f4:	6853      	ldr	r3, [r2, #4]
240072f6:	b29b      	uxth	r3, r3
240072f8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
240072fa:	074b      	lsls	r3, r1, #29
240072fc:	d508      	bpl.n	24007310 <I2C_ITSlaveCplt.constprop.0+0x88>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
240072fe:	6822      	ldr	r2, [r4, #0]
24007300:	6a63      	ldr	r3, [r4, #36]	; 0x24
24007302:	6a52      	ldr	r2, [r2, #36]	; 0x24
24007304:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
24007306:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24007308:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
2400730a:	3301      	adds	r3, #1
2400730c:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
2400730e:	bb72      	cbnz	r2, 2400736e <I2C_ITSlaveCplt.constprop.0+0xe6>
  if (hi2c->XferCount != 0U)
24007310:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24007312:	b29b      	uxth	r3, r3
24007314:	b11b      	cbz	r3, 2400731e <I2C_ITSlaveCplt.constprop.0+0x96>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007316:	6c63      	ldr	r3, [r4, #68]	; 0x44
24007318:	f043 0304 	orr.w	r3, r3, #4
2400731c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400731e:	2600      	movs	r6, #0
24007320:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24007324:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
24007326:	6366      	str	r6, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
24007328:	2d00      	cmp	r5, #0
2400732a:	d13d      	bne.n	240073a8 <I2C_ITSlaveCplt.constprop.0+0x120>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
2400732c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
2400732e:	4e32      	ldr	r6, [pc, #200]	; (240073f8 <I2C_ITSlaveCplt.constprop.0+0x170>)
24007330:	42b3      	cmp	r3, r6
24007332:	d10e      	bne.n	24007352 <I2C_ITSlaveCplt.constprop.0+0xca>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
24007334:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
24007338:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
2400733a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400733e:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
24007340:	f04f 0320 	mov.w	r3, #32
24007344:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
24007348:	6325      	str	r5, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
2400734a:	d050      	beq.n	240073ee <I2C_ITSlaveCplt.constprop.0+0x166>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
2400734c:	f7ff fdea 	bl	24006f24 <HAL_I2C_SlaveTxCpltCallback>
}
24007350:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITSlaveSeqCplt(hi2c);
24007352:	4620      	mov	r0, r4
24007354:	f7ff fde8 	bl	24006f28 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
24007358:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400735a:	62e6      	str	r6, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
2400735c:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
2400735e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24007362:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
24007366:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
24007368:	f7ff fe66 	bl	24007038 <HAL_I2C_ListenCpltCallback>
}
2400736c:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
2400736e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24007370:	3a01      	subs	r2, #1
      hi2c->XferCount--;
24007372:	3b01      	subs	r3, #1
      hi2c->XferSize--;
24007374:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007376:	b29b      	uxth	r3, r3
24007378:	8563      	strh	r3, [r4, #42]	; 0x2a
2400737a:	e7c9      	b.n	24007310 <I2C_ITSlaveCplt.constprop.0+0x88>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
2400737c:	2b22      	cmp	r3, #34	; 0x22
2400737e:	d197      	bne.n	240072b0 <I2C_ITSlaveCplt.constprop.0+0x28>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007380:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007382:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007386:	682a      	ldr	r2, [r5, #0]
24007388:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
2400738c:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
2400738e:	6323      	str	r3, [r4, #48]	; 0x30
24007390:	e78e      	b.n	240072b0 <I2C_ITSlaveCplt.constprop.0+0x28>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
24007392:	0402      	lsls	r2, r0, #16
24007394:	d5b1      	bpl.n	240072fa <I2C_ITSlaveCplt.constprop.0+0x72>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
24007396:	6822      	ldr	r2, [r4, #0]
24007398:	6813      	ldr	r3, [r2, #0]
2400739a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
2400739e:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
240073a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
240073a2:	2b00      	cmp	r3, #0
240073a4:	d1a5      	bne.n	240072f2 <I2C_ITSlaveCplt.constprop.0+0x6a>
240073a6:	e7a8      	b.n	240072fa <I2C_ITSlaveCplt.constprop.0+0x72>
    I2C_ITError(hi2c, hi2c->ErrorCode);
240073a8:	6c61      	ldr	r1, [r4, #68]	; 0x44
240073aa:	4620      	mov	r0, r4
240073ac:	f7ff fe68 	bl	24007080 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
240073b0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
240073b4:	2b28      	cmp	r3, #40	; 0x28
240073b6:	d1cb      	bne.n	24007350 <I2C_ITSlaveCplt.constprop.0+0xc8>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240073b8:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
240073ba:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240073bc:	490e      	ldr	r1, [pc, #56]	; (240073f8 <I2C_ITSlaveCplt.constprop.0+0x170>)
  HAL_I2C_ListenCpltCallback(hi2c);
240073be:	4620      	mov	r0, r4
  hi2c->XferISR = NULL;
240073c0:	6366      	str	r6, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
240073c2:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240073c4:	2110      	movs	r1, #16
  hi2c->PreviousState = I2C_STATE_NONE;
240073c6:	6326      	str	r6, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
240073c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
240073cc:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240073d0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
240073d4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
240073d8:	6813      	ldr	r3, [r2, #0]
240073da:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
240073de:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240073e0:	6823      	ldr	r3, [r4, #0]
240073e2:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(hi2c);
240073e4:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
240073e8:	f7ff fe26 	bl	24007038 <HAL_I2C_ListenCpltCallback>
}
240073ec:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
240073ee:	f024 f973 	bl	2402b6d8 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
240073f2:	bd70      	pop	{r4, r5, r6, pc}
240073f4:	fe00e800 	.word	0xfe00e800
240073f8:	ffff0000 	.word	0xffff0000

240073fc <I2C_Slave_ISR_IT>:
{
240073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
240073fe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
24007402:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
24007404:	2b01      	cmp	r3, #1
24007406:	f000 8081 	beq.w	2400750c <I2C_Slave_ISR_IT+0x110>
2400740a:	4617      	mov	r7, r2
2400740c:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
2400740e:	068a      	lsls	r2, r1, #26
24007410:	4604      	mov	r4, r0
24007412:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
24007414:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
24007418:	d501      	bpl.n	2400741e <I2C_Slave_ISR_IT+0x22>
2400741a:	06bb      	lsls	r3, r7, #26
2400741c:	d462      	bmi.n	240074e4 <I2C_Slave_ISR_IT+0xe8>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
2400741e:	06ea      	lsls	r2, r5, #27
24007420:	d51c      	bpl.n	2400745c <I2C_Slave_ISR_IT+0x60>
24007422:	06fb      	lsls	r3, r7, #27
24007424:	d51a      	bpl.n	2400745c <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount == 0U)
24007426:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24007428:	b29b      	uxth	r3, r3
2400742a:	2b00      	cmp	r3, #0
2400742c:	d15f      	bne.n	240074ee <I2C_Slave_ISR_IT+0xf2>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
2400742e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
24007432:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
24007436:	b2d2      	uxtb	r2, r2
24007438:	d101      	bne.n	2400743e <I2C_Slave_ISR_IT+0x42>
2400743a:	2a28      	cmp	r2, #40	; 0x28
2400743c:	d07f      	beq.n	2400753e <I2C_Slave_ISR_IT+0x142>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400743e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007442:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
24007444:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007446:	6823      	ldr	r3, [r4, #0]
24007448:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
2400744a:	d102      	bne.n	24007452 <I2C_Slave_ISR_IT+0x56>
2400744c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
24007450:	d162      	bne.n	24007518 <I2C_Slave_ISR_IT+0x11c>
  __HAL_UNLOCK(hi2c);
24007452:	2300      	movs	r3, #0
  return HAL_OK;
24007454:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
24007456:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
2400745a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400745c:	076a      	lsls	r2, r5, #29
2400745e:	d40d      	bmi.n	2400747c <I2C_Slave_ISR_IT+0x80>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
24007460:	0728      	lsls	r0, r5, #28
24007462:	d529      	bpl.n	240074b8 <I2C_Slave_ISR_IT+0xbc>
24007464:	0739      	lsls	r1, r7, #28
24007466:	d527      	bpl.n	240074b8 <I2C_Slave_ISR_IT+0xbc>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
24007468:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
2400746c:	f003 0328 	and.w	r3, r3, #40	; 0x28
24007470:	2b28      	cmp	r3, #40	; 0x28
24007472:	d060      	beq.n	24007536 <I2C_Slave_ISR_IT+0x13a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
24007474:	6823      	ldr	r3, [r4, #0]
24007476:	2208      	movs	r2, #8
24007478:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
2400747a:	e7ea      	b.n	24007452 <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
2400747c:	077b      	lsls	r3, r7, #29
2400747e:	d5ef      	bpl.n	24007460 <I2C_Slave_ISR_IT+0x64>
    if (hi2c->XferCount > 0U)
24007480:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
24007482:	b29b      	uxth	r3, r3
24007484:	b16b      	cbz	r3, 240074a2 <I2C_Slave_ISR_IT+0xa6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24007486:	6822      	ldr	r2, [r4, #0]
24007488:	6a63      	ldr	r3, [r4, #36]	; 0x24
2400748a:	6a52      	ldr	r2, [r2, #36]	; 0x24
2400748c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
2400748e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
24007490:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
24007492:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
24007494:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
24007496:	3101      	adds	r1, #1
      hi2c->XferSize--;
24007498:	3a01      	subs	r2, #1
      hi2c->XferCount--;
2400749a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
2400749c:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
2400749e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
240074a0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
240074a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
240074a4:	b29b      	uxth	r3, r3
240074a6:	2b00      	cmp	r3, #0
240074a8:	d1d3      	bne.n	24007452 <I2C_Slave_ISR_IT+0x56>
240074aa:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
240074ae:	d0d0      	beq.n	24007452 <I2C_Slave_ISR_IT+0x56>
        I2C_ITSlaveSeqCplt(hi2c);
240074b0:	4620      	mov	r0, r4
240074b2:	f7ff fd39 	bl	24006f28 <I2C_ITSlaveSeqCplt>
240074b6:	e7cc      	b.n	24007452 <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
240074b8:	07aa      	lsls	r2, r5, #30
240074ba:	d5ca      	bpl.n	24007452 <I2C_Slave_ISR_IT+0x56>
240074bc:	07bb      	lsls	r3, r7, #30
240074be:	d5c8      	bpl.n	24007452 <I2C_Slave_ISR_IT+0x56>
    if (hi2c->XferCount > 0U)
240074c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
240074c2:	b29b      	uxth	r3, r3
240074c4:	b323      	cbz	r3, 24007510 <I2C_Slave_ISR_IT+0x114>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
240074c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
240074c8:	6823      	ldr	r3, [r4, #0]
240074ca:	7812      	ldrb	r2, [r2, #0]
240074cc:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
240074ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
240074d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
240074d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
240074d4:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
240074d6:	3101      	adds	r1, #1
      hi2c->XferSize--;
240074d8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
240074da:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
240074dc:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
240074de:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
240074e0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
240074e2:	e7b6      	b.n	24007452 <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
240074e4:	f7ff fed0 	bl	24007288 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
240074e8:	06ea      	lsls	r2, r5, #27
240074ea:	d5b7      	bpl.n	2400745c <I2C_Slave_ISR_IT+0x60>
240074ec:	e799      	b.n	24007422 <I2C_Slave_ISR_IT+0x26>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
240074ee:	6823      	ldr	r3, [r4, #0]
240074f0:	2210      	movs	r2, #16
240074f2:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
240074f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
240074f6:	f043 0304 	orr.w	r3, r3, #4
240074fa:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
240074fc:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24007500:	d1a7      	bne.n	24007452 <I2C_Slave_ISR_IT+0x56>
        I2C_ITError(hi2c, hi2c->ErrorCode);
24007502:	6c61      	ldr	r1, [r4, #68]	; 0x44
24007504:	4620      	mov	r0, r4
24007506:	f7ff fdbb 	bl	24007080 <I2C_ITError>
2400750a:	e7a2      	b.n	24007452 <I2C_Slave_ISR_IT+0x56>
  __HAL_LOCK(hi2c);
2400750c:	2002      	movs	r0, #2
}
2400750e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
24007510:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
24007514:	d19d      	bne.n	24007452 <I2C_Slave_ISR_IT+0x56>
24007516:	e7cb      	b.n	240074b0 <I2C_Slave_ISR_IT+0xb4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
24007518:	6823      	ldr	r3, [r4, #0]
2400751a:	699a      	ldr	r2, [r3, #24]
2400751c:	0790      	lsls	r0, r2, #30
2400751e:	d502      	bpl.n	24007526 <I2C_Slave_ISR_IT+0x12a>
    hi2c->Instance->TXDR = 0x00U;
24007520:	2200      	movs	r2, #0
24007522:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
24007524:	6823      	ldr	r3, [r4, #0]
24007526:	699a      	ldr	r2, [r3, #24]
24007528:	07d1      	lsls	r1, r2, #31
2400752a:	d4c1      	bmi.n	240074b0 <I2C_Slave_ISR_IT+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
2400752c:	699a      	ldr	r2, [r3, #24]
2400752e:	f042 0201 	orr.w	r2, r2, #1
24007532:	619a      	str	r2, [r3, #24]
24007534:	e7bc      	b.n	240074b0 <I2C_Slave_ISR_IT+0xb4>
24007536:	4620      	mov	r0, r4
24007538:	f7ff fd4c 	bl	24006fd4 <I2C_ITAddrCplt.part.0>
2400753c:	e789      	b.n	24007452 <I2C_Slave_ISR_IT+0x56>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
2400753e:	4918      	ldr	r1, [pc, #96]	; (240075a0 <I2C_Slave_ISR_IT+0x1a4>)
  hi2c->State = HAL_I2C_STATE_READY;
24007540:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24007542:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
24007544:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
24007546:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
24007548:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
2400754a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
2400754e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
24007552:	d512      	bpl.n	2400757a <I2C_Slave_ISR_IT+0x17e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
24007554:	6822      	ldr	r2, [r4, #0]
24007556:	6a63      	ldr	r3, [r4, #36]	; 0x24
24007558:	6a52      	ldr	r2, [r2, #36]	; 0x24
2400755a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
2400755c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
2400755e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
24007560:	3301      	adds	r3, #1
24007562:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
24007564:	b14a      	cbz	r2, 2400757a <I2C_Slave_ISR_IT+0x17e>
      hi2c->XferCount--;
24007566:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
24007568:	3a01      	subs	r2, #1
      hi2c->XferCount--;
2400756a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
2400756c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
2400756e:	b29b      	uxth	r3, r3
24007570:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
24007572:	6c63      	ldr	r3, [r4, #68]	; 0x44
24007574:	f043 0304 	orr.w	r3, r3, #4
24007578:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
2400757a:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
2400757c:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
2400757e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
24007582:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
24007584:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
24007588:	6813      	ldr	r3, [r2, #0]
2400758a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
2400758e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
24007590:	6823      	ldr	r3, [r4, #0]
24007592:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
24007594:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
24007596:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
2400759a:	f7ff fd4d 	bl	24007038 <HAL_I2C_ListenCpltCallback>
}
2400759e:	e758      	b.n	24007452 <I2C_Slave_ISR_IT+0x56>
240075a0:	ffff0000 	.word	0xffff0000

240075a4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
240075a4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
240075a8:	2a20      	cmp	r2, #32
240075aa:	d129      	bne.n	24007600 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
240075ac:	4603      	mov	r3, r0
{
240075ae:	b500      	push	{lr}
240075b0:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
240075b4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
240075b8:	2a01      	cmp	r2, #1
240075ba:	d023      	beq.n	24007604 <HAL_I2CEx_ConfigAnalogFilter+0x60>
240075bc:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
240075be:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
240075c0:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
240075c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
240075c8:	2224      	movs	r2, #36	; 0x24
240075ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
240075ce:	6802      	ldr	r2, [r0, #0]
240075d0:	f022 0201 	bic.w	r2, r2, #1
240075d4:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
240075d6:	6818      	ldr	r0, [r3, #0]
240075d8:	6802      	ldr	r2, [r0, #0]
240075da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
240075de:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
240075e0:	6818      	ldr	r0, [r3, #0]
240075e2:	6802      	ldr	r2, [r0, #0]
240075e4:	4311      	orrs	r1, r2
240075e6:	6001      	str	r1, [r0, #0]

    return HAL_OK;
240075e8:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
240075ea:	6819      	ldr	r1, [r3, #0]
240075ec:	680a      	ldr	r2, [r1, #0]
240075ee:	f042 0201 	orr.w	r2, r2, #1
240075f2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
240075f4:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
240075f8:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
240075fc:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
24007600:	2002      	movs	r0, #2
}
24007602:	4770      	bx	lr
    return HAL_BUSY;
24007604:	2002      	movs	r0, #2
}
24007606:	f85d fb04 	ldr.w	pc, [sp], #4
2400760a:	bf00      	nop

2400760c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
2400760c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
24007610:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
24007612:	2a20      	cmp	r2, #32
24007614:	fa5f fc82 	uxtb.w	ip, r2
24007618:	d121      	bne.n	2400765e <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
2400761a:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
2400761e:	2a01      	cmp	r2, #1
24007620:	d01d      	beq.n	2400765e <HAL_I2CEx_ConfigDigitalFilter+0x52>
24007622:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
24007624:	6800      	ldr	r0, [r0, #0]
    __HAL_LOCK(hi2c);
24007626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
2400762a:	2224      	movs	r2, #36	; 0x24
2400762c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
24007630:	6802      	ldr	r2, [r0, #0]
24007632:	f022 0201 	bic.w	r2, r2, #1
24007636:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
24007638:	6818      	ldr	r0, [r3, #0]
2400763a:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
2400763c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
24007640:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
24007644:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
24007646:	6002      	str	r2, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
24007648:	6818      	ldr	r0, [r3, #0]
2400764a:	6802      	ldr	r2, [r0, #0]
2400764c:	f042 0201 	orr.w	r2, r2, #1
24007650:	6002      	str	r2, [r0, #0]

    return HAL_OK;
24007652:	4608      	mov	r0, r1
    hi2c->State = HAL_I2C_STATE_READY;
24007654:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
24007658:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    return HAL_OK;
2400765c:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
2400765e:	2002      	movs	r0, #2
  }
}
24007660:	4770      	bx	lr
24007662:	bf00      	nop

24007664 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
24007664:	4b09      	ldr	r3, [pc, #36]	; (2400768c <HAL_I2CEx_EnableFastModePlus+0x28>)
{
24007666:	b082      	sub	sp, #8

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
24007668:	4909      	ldr	r1, [pc, #36]	; (24007690 <HAL_I2CEx_EnableFastModePlus+0x2c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
2400766a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
2400766e:	f042 0202 	orr.w	r2, r2, #2
24007672:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
24007676:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
2400767a:	f003 0302 	and.w	r3, r3, #2
2400767e:	9301      	str	r3, [sp, #4]
24007680:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
24007682:	684b      	ldr	r3, [r1, #4]
24007684:	4318      	orrs	r0, r3
24007686:	6048      	str	r0, [r1, #4]
}
24007688:	b002      	add	sp, #8
2400768a:	4770      	bx	lr
2400768c:	58024400 	.word	0x58024400
24007690:	58000400 	.word	0x58000400

24007694 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24007694:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24007696:	4c10      	ldr	r4, [pc, #64]	; (240076d8 <HAL_PWREx_ConfigSupply+0x44>)
24007698:	68e3      	ldr	r3, [r4, #12]
2400769a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
2400769e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
240076a0:	d105      	bne.n	240076ae <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
240076a2:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
240076a6:	1a18      	subs	r0, r3, r0
240076a8:	bf18      	it	ne
240076aa:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
240076ac:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
240076ae:	f023 0307 	bic.w	r3, r3, #7
240076b2:	4303      	orrs	r3, r0
240076b4:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
240076b6:	f7fd f8d7 	bl	24004868 <HAL_GetTick>
240076ba:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240076bc:	e005      	b.n	240076ca <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
240076be:	f7fd f8d3 	bl	24004868 <HAL_GetTick>
240076c2:	1b40      	subs	r0, r0, r5
240076c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
240076c8:	d804      	bhi.n	240076d4 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
240076ca:	6863      	ldr	r3, [r4, #4]
240076cc:	049b      	lsls	r3, r3, #18
240076ce:	d5f6      	bpl.n	240076be <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
240076d0:	2000      	movs	r0, #0
}
240076d2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
240076d4:	2001      	movs	r0, #1
}
240076d6:	bd38      	pop	{r3, r4, r5, pc}
240076d8:	58024800 	.word	0x58024800

240076dc <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240076dc:	4b3c      	ldr	r3, [pc, #240]	; (240077d0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
240076de:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240076e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240076e2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240076e4:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
240076e6:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240076ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
240076ec:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
240076f0:	d038      	beq.n	24007764 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240076f2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
240076f6:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240076fa:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
240076fe:	fb05 f101 	mul.w	r1, r5, r1
24007702:	2a01      	cmp	r2, #1
24007704:	ee07 1a90 	vmov	s15, r1
24007708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
2400770c:	d002      	beq.n	24007714 <HAL_RCC_GetSysClockFreq.part.0+0x38>
2400770e:	2a02      	cmp	r2, #2
24007710:	d050      	beq.n	240077b4 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
24007712:	b34a      	cbz	r2, 24007768 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007714:	ee07 0a90 	vmov	s15, r0
24007718:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 240077d4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
2400771c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24007722:	eec5 6a27 	vdiv.f32	s13, s10, s15
24007726:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 240077d8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
2400772a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400772e:	ee07 3a90 	vmov	s15, r3
24007732:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24007736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400773a:	ee77 7aa5 	vadd.f32	s15, s15, s11
2400773e:	eee7 7a06 	vfma.f32	s15, s14, s12
24007742:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24007746:	4b22      	ldr	r3, [pc, #136]	; (240077d0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
24007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400774a:	f3c3 2346 	ubfx	r3, r3, #9, #7
2400774e:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24007750:	ee07 3a90 	vmov	s15, r3
24007754:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24007758:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400775c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24007760:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
24007764:	bc30      	pop	{r4, r5}
24007766:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007768:	681a      	ldr	r2, [r3, #0]
2400776a:	0692      	lsls	r2, r2, #26
2400776c:	d529      	bpl.n	240077c2 <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400776e:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007770:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007774:	4a19      	ldr	r2, [pc, #100]	; (240077dc <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400777a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400777c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007784:	ed9f 5a14 	vldr	s10, [pc, #80]	; 240077d8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
24007788:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400778c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400778e:	ee06 3a10 	vmov	s12, r3
24007792:	ee05 2a90 	vmov	s11, r2
24007796:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
2400779a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
2400779e:	ee36 6a26 	vadd.f32	s12, s12, s13
240077a2:	eec5 6aa7 	vdiv.f32	s13, s11, s15
240077a6:	eef0 7a46 	vmov.f32	s15, s12
240077aa:	eee7 7a05 	vfma.f32	s15, s14, s10
240077ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
240077b2:	e7c8      	b.n	24007746 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240077b4:	ee07 0a90 	vmov	s15, r0
240077b8:	ed9f 5a09 	vldr	s10, [pc, #36]	; 240077e0 <HAL_RCC_GetSysClockFreq.part.0+0x104>
240077bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240077c0:	e7ae      	b.n	24007720 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240077c2:	ee07 0a90 	vmov	s15, r0
240077c6:	ed9f 5a07 	vldr	s10, [pc, #28]	; 240077e4 <HAL_RCC_GetSysClockFreq.part.0+0x108>
240077ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240077ce:	e7a7      	b.n	24007720 <HAL_RCC_GetSysClockFreq.part.0+0x44>
240077d0:	58024400 	.word	0x58024400
240077d4:	4a742400 	.word	0x4a742400
240077d8:	39000000 	.word	0x39000000
240077dc:	03d09000 	.word	0x03d09000
240077e0:	4b742400 	.word	0x4b742400
240077e4:	4c742400 	.word	0x4c742400

240077e8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
240077e8:	2800      	cmp	r0, #0
240077ea:	f000 81ef 	beq.w	24007bcc <HAL_RCC_OscConfig+0x3e4>
{
240077ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
240077f0:	6803      	ldr	r3, [r0, #0]
240077f2:	4604      	mov	r4, r0
240077f4:	07d9      	lsls	r1, r3, #31
240077f6:	d52e      	bpl.n	24007856 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240077f8:	49a4      	ldr	r1, [pc, #656]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
240077fa:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240077fc:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240077fe:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24007802:	2a10      	cmp	r2, #16
24007804:	f000 8107 	beq.w	24007a16 <HAL_RCC_OscConfig+0x22e>
24007808:	2a18      	cmp	r2, #24
2400780a:	f000 80ff 	beq.w	24007a0c <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2400780e:	6863      	ldr	r3, [r4, #4]
24007810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24007814:	f000 812a 	beq.w	24007a6c <HAL_RCC_OscConfig+0x284>
24007818:	2b00      	cmp	r3, #0
2400781a:	f040 8188 	bne.w	24007b2e <HAL_RCC_OscConfig+0x346>
2400781e:	4b9b      	ldr	r3, [pc, #620]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
24007820:	681a      	ldr	r2, [r3, #0]
24007822:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
24007826:	601a      	str	r2, [r3, #0]
24007828:	681a      	ldr	r2, [r3, #0]
2400782a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
2400782e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
24007830:	6863      	ldr	r3, [r4, #4]
24007832:	2b00      	cmp	r3, #0
24007834:	f000 815c 	beq.w	24007af0 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
24007838:	f7fd f816 	bl	24004868 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400783c:	4e93      	ldr	r6, [pc, #588]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
2400783e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007840:	e005      	b.n	2400784e <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24007842:	f7fd f811 	bl	24004868 <HAL_GetTick>
24007846:	1b40      	subs	r0, r0, r5
24007848:	2864      	cmp	r0, #100	; 0x64
2400784a:	f200 814f 	bhi.w	24007aec <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400784e:	6833      	ldr	r3, [r6, #0]
24007850:	039b      	lsls	r3, r3, #14
24007852:	d5f6      	bpl.n	24007842 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24007854:	6823      	ldr	r3, [r4, #0]
24007856:	079d      	lsls	r5, r3, #30
24007858:	f100 808a 	bmi.w	24007970 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
2400785c:	06d9      	lsls	r1, r3, #27
2400785e:	d533      	bpl.n	240078c8 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007860:	4a8a      	ldr	r2, [pc, #552]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
24007862:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007864:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007866:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
2400786a:	2b08      	cmp	r3, #8
2400786c:	f000 80e3 	beq.w	24007a36 <HAL_RCC_OscConfig+0x24e>
24007870:	2b18      	cmp	r3, #24
24007872:	f000 80db 	beq.w	24007a2c <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
24007876:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
24007878:	4d84      	ldr	r5, [pc, #528]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
2400787a:	2b00      	cmp	r3, #0
2400787c:	f000 8176 	beq.w	24007b6c <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
24007880:	682b      	ldr	r3, [r5, #0]
24007882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24007886:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007888:	f7fc ffee 	bl	24004868 <HAL_GetTick>
2400788c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2400788e:	e005      	b.n	2400789c <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24007890:	f7fc ffea 	bl	24004868 <HAL_GetTick>
24007894:	1b80      	subs	r0, r0, r6
24007896:	2802      	cmp	r0, #2
24007898:	f200 8128 	bhi.w	24007aec <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2400789c:	682b      	ldr	r3, [r5, #0]
2400789e:	05db      	lsls	r3, r3, #23
240078a0:	d5f6      	bpl.n	24007890 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240078a2:	f7fc fff9 	bl	24004898 <HAL_GetREVID>
240078a6:	f241 0303 	movw	r3, #4099	; 0x1003
240078aa:	4298      	cmp	r0, r3
240078ac:	f200 8266 	bhi.w	24007d7c <HAL_RCC_OscConfig+0x594>
240078b0:	6a22      	ldr	r2, [r4, #32]
240078b2:	686b      	ldr	r3, [r5, #4]
240078b4:	2a20      	cmp	r2, #32
240078b6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
240078ba:	bf0c      	ite	eq
240078bc:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
240078c0:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
240078c4:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
240078c6:	6823      	ldr	r3, [r4, #0]
240078c8:	071d      	lsls	r5, r3, #28
240078ca:	d516      	bpl.n	240078fa <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
240078cc:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
240078ce:	4d6f      	ldr	r5, [pc, #444]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
240078d0:	2b00      	cmp	r3, #0
240078d2:	f000 811b 	beq.w	24007b0c <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
240078d6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
240078d8:	f043 0301 	orr.w	r3, r3, #1
240078dc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
240078de:	f7fc ffc3 	bl	24004868 <HAL_GetTick>
240078e2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
240078e4:	e005      	b.n	240078f2 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
240078e6:	f7fc ffbf 	bl	24004868 <HAL_GetTick>
240078ea:	1b80      	subs	r0, r0, r6
240078ec:	2802      	cmp	r0, #2
240078ee:	f200 80fd 	bhi.w	24007aec <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
240078f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
240078f4:	0798      	lsls	r0, r3, #30
240078f6:	d5f6      	bpl.n	240078e6 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
240078f8:	6823      	ldr	r3, [r4, #0]
240078fa:	069a      	lsls	r2, r3, #26
240078fc:	d516      	bpl.n	2400792c <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
240078fe:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
24007900:	4d62      	ldr	r5, [pc, #392]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
24007902:	2b00      	cmp	r3, #0
24007904:	f000 8121 	beq.w	24007b4a <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
24007908:	682b      	ldr	r3, [r5, #0]
2400790a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2400790e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
24007910:	f7fc ffaa 	bl	24004868 <HAL_GetTick>
24007914:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24007916:	e005      	b.n	24007924 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24007918:	f7fc ffa6 	bl	24004868 <HAL_GetTick>
2400791c:	1b80      	subs	r0, r0, r6
2400791e:	2802      	cmp	r0, #2
24007920:	f200 80e4 	bhi.w	24007aec <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
24007924:	682b      	ldr	r3, [r5, #0]
24007926:	049f      	lsls	r7, r3, #18
24007928:	d5f6      	bpl.n	24007918 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2400792a:	6823      	ldr	r3, [r4, #0]
2400792c:	0759      	lsls	r1, r3, #29
2400792e:	f100 80a3 	bmi.w	24007a78 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
24007932:	6a60      	ldr	r0, [r4, #36]	; 0x24
24007934:	b1d0      	cbz	r0, 2400796c <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
24007936:	4d55      	ldr	r5, [pc, #340]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
24007938:	692b      	ldr	r3, [r5, #16]
2400793a:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400793e:	2b18      	cmp	r3, #24
24007940:	f000 81b6 	beq.w	24007cb0 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
24007944:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24007946:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
24007948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2400794c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2400794e:	f000 8149 	beq.w	24007be4 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
24007952:	f7fc ff89 	bl	24004868 <HAL_GetTick>
24007956:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007958:	e005      	b.n	24007966 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2400795a:	f7fc ff85 	bl	24004868 <HAL_GetTick>
2400795e:	1b00      	subs	r0, r0, r4
24007960:	2802      	cmp	r0, #2
24007962:	f200 80c3 	bhi.w	24007aec <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007966:	682b      	ldr	r3, [r5, #0]
24007968:	019b      	lsls	r3, r3, #6
2400796a:	d4f6      	bmi.n	2400795a <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
2400796c:	2000      	movs	r0, #0
}
2400796e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007970:	4a46      	ldr	r2, [pc, #280]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
24007972:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007974:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24007976:	f013 0338 	ands.w	r3, r3, #56	; 0x38
2400797a:	d12d      	bne.n	240079d8 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2400797c:	4b43      	ldr	r3, [pc, #268]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
2400797e:	68e2      	ldr	r2, [r4, #12]
24007980:	681b      	ldr	r3, [r3, #0]
24007982:	0759      	lsls	r1, r3, #29
24007984:	d501      	bpl.n	2400798a <HAL_RCC_OscConfig+0x1a2>
24007986:	2a00      	cmp	r2, #0
24007988:	d04e      	beq.n	24007a28 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2400798a:	4d40      	ldr	r5, [pc, #256]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
2400798c:	682b      	ldr	r3, [r5, #0]
2400798e:	f023 0319 	bic.w	r3, r3, #25
24007992:	4313      	orrs	r3, r2
24007994:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007996:	f7fc ff67 	bl	24004868 <HAL_GetTick>
2400799a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2400799c:	e005      	b.n	240079aa <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2400799e:	f7fc ff63 	bl	24004868 <HAL_GetTick>
240079a2:	1b80      	subs	r0, r0, r6
240079a4:	2802      	cmp	r0, #2
240079a6:	f200 80a1 	bhi.w	24007aec <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240079aa:	682b      	ldr	r3, [r5, #0]
240079ac:	075b      	lsls	r3, r3, #29
240079ae:	d5f6      	bpl.n	2400799e <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240079b0:	f7fc ff72 	bl	24004898 <HAL_GetREVID>
240079b4:	f241 0303 	movw	r3, #4099	; 0x1003
240079b8:	4298      	cmp	r0, r3
240079ba:	f200 80fe 	bhi.w	24007bba <HAL_RCC_OscConfig+0x3d2>
240079be:	6922      	ldr	r2, [r4, #16]
240079c0:	686b      	ldr	r3, [r5, #4]
240079c2:	2a40      	cmp	r2, #64	; 0x40
240079c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
240079c8:	bf0c      	ite	eq
240079ca:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
240079ce:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
240079d2:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
240079d4:	6823      	ldr	r3, [r4, #0]
240079d6:	e741      	b.n	2400785c <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
240079d8:	2b18      	cmp	r3, #24
240079da:	f000 80ea 	beq.w	24007bb2 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240079de:	4d2b      	ldr	r5, [pc, #172]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
240079e0:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240079e2:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
240079e4:	2a00      	cmp	r2, #0
240079e6:	f000 80d3 	beq.w	24007b90 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
240079ea:	f023 0319 	bic.w	r3, r3, #25
240079ee:	4313      	orrs	r3, r2
240079f0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
240079f2:	f7fc ff39 	bl	24004868 <HAL_GetTick>
240079f6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240079f8:	e004      	b.n	24007a04 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
240079fa:	f7fc ff35 	bl	24004868 <HAL_GetTick>
240079fe:	1b80      	subs	r0, r0, r6
24007a00:	2802      	cmp	r0, #2
24007a02:	d873      	bhi.n	24007aec <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007a04:	682b      	ldr	r3, [r5, #0]
24007a06:	075f      	lsls	r7, r3, #29
24007a08:	d5f7      	bpl.n	240079fa <HAL_RCC_OscConfig+0x212>
24007a0a:	e7d1      	b.n	240079b0 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24007a0c:	f001 0103 	and.w	r1, r1, #3
24007a10:	2902      	cmp	r1, #2
24007a12:	f47f aefc 	bne.w	2400780e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24007a16:	4a1d      	ldr	r2, [pc, #116]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
24007a18:	6812      	ldr	r2, [r2, #0]
24007a1a:	0392      	lsls	r2, r2, #14
24007a1c:	f57f af1b 	bpl.w	24007856 <HAL_RCC_OscConfig+0x6e>
24007a20:	6862      	ldr	r2, [r4, #4]
24007a22:	2a00      	cmp	r2, #0
24007a24:	f47f af17 	bne.w	24007856 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
24007a28:	2001      	movs	r0, #1
}
24007a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
24007a2c:	f002 0203 	and.w	r2, r2, #3
24007a30:	2a01      	cmp	r2, #1
24007a32:	f47f af20 	bne.w	24007876 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24007a36:	4b15      	ldr	r3, [pc, #84]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
24007a38:	681b      	ldr	r3, [r3, #0]
24007a3a:	05da      	lsls	r2, r3, #23
24007a3c:	d502      	bpl.n	24007a44 <HAL_RCC_OscConfig+0x25c>
24007a3e:	69e3      	ldr	r3, [r4, #28]
24007a40:	2b80      	cmp	r3, #128	; 0x80
24007a42:	d1f1      	bne.n	24007a28 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007a44:	f7fc ff28 	bl	24004898 <HAL_GetREVID>
24007a48:	f241 0303 	movw	r3, #4099	; 0x1003
24007a4c:	4298      	cmp	r0, r3
24007a4e:	f200 80bf 	bhi.w	24007bd0 <HAL_RCC_OscConfig+0x3e8>
24007a52:	6a22      	ldr	r2, [r4, #32]
24007a54:	2a20      	cmp	r2, #32
24007a56:	f000 81ad 	beq.w	24007db4 <HAL_RCC_OscConfig+0x5cc>
24007a5a:	490c      	ldr	r1, [pc, #48]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
24007a5c:	684b      	ldr	r3, [r1, #4]
24007a5e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24007a62:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
24007a66:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007a68:	6823      	ldr	r3, [r4, #0]
24007a6a:	e72d      	b.n	240078c8 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24007a6c:	4a07      	ldr	r2, [pc, #28]	; (24007a8c <HAL_RCC_OscConfig+0x2a4>)
24007a6e:	6813      	ldr	r3, [r2, #0]
24007a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24007a74:	6013      	str	r3, [r2, #0]
24007a76:	e6db      	b.n	24007830 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
24007a78:	4d05      	ldr	r5, [pc, #20]	; (24007a90 <HAL_RCC_OscConfig+0x2a8>)
24007a7a:	682b      	ldr	r3, [r5, #0]
24007a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24007a80:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
24007a82:	f7fc fef1 	bl	24004868 <HAL_GetTick>
24007a86:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24007a88:	e009      	b.n	24007a9e <HAL_RCC_OscConfig+0x2b6>
24007a8a:	bf00      	nop
24007a8c:	58024400 	.word	0x58024400
24007a90:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24007a94:	f7fc fee8 	bl	24004868 <HAL_GetTick>
24007a98:	1b80      	subs	r0, r0, r6
24007a9a:	2864      	cmp	r0, #100	; 0x64
24007a9c:	d826      	bhi.n	24007aec <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24007a9e:	682b      	ldr	r3, [r5, #0]
24007aa0:	05da      	lsls	r2, r3, #23
24007aa2:	d5f7      	bpl.n	24007a94 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24007aa4:	68a3      	ldr	r3, [r4, #8]
24007aa6:	2b01      	cmp	r3, #1
24007aa8:	f000 8171 	beq.w	24007d8e <HAL_RCC_OscConfig+0x5a6>
24007aac:	2b00      	cmp	r3, #0
24007aae:	f040 8174 	bne.w	24007d9a <HAL_RCC_OscConfig+0x5b2>
24007ab2:	4baa      	ldr	r3, [pc, #680]	; (24007d5c <HAL_RCC_OscConfig+0x574>)
24007ab4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007ab6:	f022 0201 	bic.w	r2, r2, #1
24007aba:	671a      	str	r2, [r3, #112]	; 0x70
24007abc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007abe:	f022 0204 	bic.w	r2, r2, #4
24007ac2:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
24007ac4:	68a3      	ldr	r3, [r4, #8]
24007ac6:	2b00      	cmp	r3, #0
24007ac8:	f000 8140 	beq.w	24007d4c <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
24007acc:	f7fc fecc 	bl	24004868 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24007ad0:	4ea2      	ldr	r6, [pc, #648]	; (24007d5c <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24007ad2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
24007ad6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24007ad8:	e004      	b.n	24007ae4 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24007ada:	f7fc fec5 	bl	24004868 <HAL_GetTick>
24007ade:	1b40      	subs	r0, r0, r5
24007ae0:	42b8      	cmp	r0, r7
24007ae2:	d803      	bhi.n	24007aec <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24007ae4:	6f33      	ldr	r3, [r6, #112]	; 0x70
24007ae6:	079b      	lsls	r3, r3, #30
24007ae8:	d5f7      	bpl.n	24007ada <HAL_RCC_OscConfig+0x2f2>
24007aea:	e722      	b.n	24007932 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
24007aec:	2003      	movs	r0, #3
}
24007aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
24007af0:	f7fc feba 	bl	24004868 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24007af4:	4e99      	ldr	r6, [pc, #612]	; (24007d5c <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
24007af6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24007af8:	e004      	b.n	24007b04 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
24007afa:	f7fc feb5 	bl	24004868 <HAL_GetTick>
24007afe:	1b40      	subs	r0, r0, r5
24007b00:	2864      	cmp	r0, #100	; 0x64
24007b02:	d8f3      	bhi.n	24007aec <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24007b04:	6833      	ldr	r3, [r6, #0]
24007b06:	039f      	lsls	r7, r3, #14
24007b08:	d4f7      	bmi.n	24007afa <HAL_RCC_OscConfig+0x312>
24007b0a:	e6a3      	b.n	24007854 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
24007b0c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24007b0e:	f023 0301 	bic.w	r3, r3, #1
24007b12:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
24007b14:	f7fc fea8 	bl	24004868 <HAL_GetTick>
24007b18:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24007b1a:	e004      	b.n	24007b26 <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
24007b1c:	f7fc fea4 	bl	24004868 <HAL_GetTick>
24007b20:	1b80      	subs	r0, r0, r6
24007b22:	2802      	cmp	r0, #2
24007b24:	d8e2      	bhi.n	24007aec <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
24007b26:	6f6b      	ldr	r3, [r5, #116]	; 0x74
24007b28:	0799      	lsls	r1, r3, #30
24007b2a:	d4f7      	bmi.n	24007b1c <HAL_RCC_OscConfig+0x334>
24007b2c:	e6e4      	b.n	240078f8 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24007b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24007b32:	4b8a      	ldr	r3, [pc, #552]	; (24007d5c <HAL_RCC_OscConfig+0x574>)
24007b34:	681a      	ldr	r2, [r3, #0]
24007b36:	f47f ae74 	bne.w	24007822 <HAL_RCC_OscConfig+0x3a>
24007b3a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
24007b3e:	601a      	str	r2, [r3, #0]
24007b40:	681a      	ldr	r2, [r3, #0]
24007b42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24007b46:	601a      	str	r2, [r3, #0]
24007b48:	e672      	b.n	24007830 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
24007b4a:	682b      	ldr	r3, [r5, #0]
24007b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
24007b50:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
24007b52:	f7fc fe89 	bl	24004868 <HAL_GetTick>
24007b56:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24007b58:	e004      	b.n	24007b64 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
24007b5a:	f7fc fe85 	bl	24004868 <HAL_GetTick>
24007b5e:	1b80      	subs	r0, r0, r6
24007b60:	2802      	cmp	r0, #2
24007b62:	d8c3      	bhi.n	24007aec <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24007b64:	682b      	ldr	r3, [r5, #0]
24007b66:	0498      	lsls	r0, r3, #18
24007b68:	d4f7      	bmi.n	24007b5a <HAL_RCC_OscConfig+0x372>
24007b6a:	e6de      	b.n	2400792a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
24007b6c:	682b      	ldr	r3, [r5, #0]
24007b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24007b72:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007b74:	f7fc fe78 	bl	24004868 <HAL_GetTick>
24007b78:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24007b7a:	e004      	b.n	24007b86 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
24007b7c:	f7fc fe74 	bl	24004868 <HAL_GetTick>
24007b80:	1b80      	subs	r0, r0, r6
24007b82:	2802      	cmp	r0, #2
24007b84:	d8b2      	bhi.n	24007aec <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24007b86:	682b      	ldr	r3, [r5, #0]
24007b88:	05df      	lsls	r7, r3, #23
24007b8a:	d4f7      	bmi.n	24007b7c <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007b8c:	6823      	ldr	r3, [r4, #0]
24007b8e:	e69b      	b.n	240078c8 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
24007b90:	f023 0301 	bic.w	r3, r3, #1
24007b94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007b96:	f7fc fe67 	bl	24004868 <HAL_GetTick>
24007b9a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24007b9c:	e004      	b.n	24007ba8 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
24007b9e:	f7fc fe63 	bl	24004868 <HAL_GetTick>
24007ba2:	1b80      	subs	r0, r0, r6
24007ba4:	2802      	cmp	r0, #2
24007ba6:	d8a1      	bhi.n	24007aec <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
24007ba8:	682b      	ldr	r3, [r5, #0]
24007baa:	0758      	lsls	r0, r3, #29
24007bac:	d4f7      	bmi.n	24007b9e <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007bae:	6823      	ldr	r3, [r4, #0]
24007bb0:	e654      	b.n	2400785c <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24007bb2:	0790      	lsls	r0, r2, #30
24007bb4:	f47f af13 	bne.w	240079de <HAL_RCC_OscConfig+0x1f6>
24007bb8:	e6e0      	b.n	2400797c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24007bba:	686b      	ldr	r3, [r5, #4]
24007bbc:	6922      	ldr	r2, [r4, #16]
24007bbe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
24007bc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24007bc6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
24007bc8:	6823      	ldr	r3, [r4, #0]
24007bca:	e647      	b.n	2400785c <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
24007bcc:	2001      	movs	r0, #1
}
24007bce:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007bd0:	4a62      	ldr	r2, [pc, #392]	; (24007d5c <HAL_RCC_OscConfig+0x574>)
24007bd2:	6a21      	ldr	r1, [r4, #32]
24007bd4:	68d3      	ldr	r3, [r2, #12]
24007bd6:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
24007bda:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
24007bde:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007be0:	6823      	ldr	r3, [r4, #0]
24007be2:	e671      	b.n	240078c8 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
24007be4:	f7fc fe40 	bl	24004868 <HAL_GetTick>
24007be8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007bea:	e005      	b.n	24007bf8 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24007bec:	f7fc fe3c 	bl	24004868 <HAL_GetTick>
24007bf0:	1b80      	subs	r0, r0, r6
24007bf2:	2802      	cmp	r0, #2
24007bf4:	f63f af7a 	bhi.w	24007aec <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007bf8:	682b      	ldr	r3, [r5, #0]
24007bfa:	0199      	lsls	r1, r3, #6
24007bfc:	d4f6      	bmi.n	24007bec <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24007bfe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
24007c00:	4b57      	ldr	r3, [pc, #348]	; (24007d60 <HAL_RCC_OscConfig+0x578>)
24007c02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
24007c04:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24007c06:	4957      	ldr	r1, [pc, #348]	; (24007d64 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007c08:	4e54      	ldr	r6, [pc, #336]	; (24007d5c <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24007c0a:	4313      	orrs	r3, r2
24007c0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24007c0e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
24007c12:	62ab      	str	r3, [r5, #40]	; 0x28
24007c14:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
24007c18:	3b01      	subs	r3, #1
24007c1a:	3a01      	subs	r2, #1
24007c1c:	025b      	lsls	r3, r3, #9
24007c1e:	0412      	lsls	r2, r2, #16
24007c20:	b29b      	uxth	r3, r3
24007c22:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
24007c26:	4313      	orrs	r3, r2
24007c28:	6b22      	ldr	r2, [r4, #48]	; 0x30
24007c2a:	3a01      	subs	r2, #1
24007c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
24007c30:	4313      	orrs	r3, r2
24007c32:	6be2      	ldr	r2, [r4, #60]	; 0x3c
24007c34:	3a01      	subs	r2, #1
24007c36:	0612      	lsls	r2, r2, #24
24007c38:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
24007c3c:	4313      	orrs	r3, r2
24007c3e:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
24007c40:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007c42:	f023 0301 	bic.w	r3, r3, #1
24007c46:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24007c48:	6b6a      	ldr	r2, [r5, #52]	; 0x34
24007c4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24007c4c:	4011      	ands	r1, r2
24007c4e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
24007c52:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24007c54:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007c56:	6c22      	ldr	r2, [r4, #64]	; 0x40
24007c58:	f023 030c 	bic.w	r3, r3, #12
24007c5c:	4313      	orrs	r3, r2
24007c5e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24007c60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007c62:	6c62      	ldr	r2, [r4, #68]	; 0x44
24007c64:	f023 0302 	bic.w	r3, r3, #2
24007c68:	4313      	orrs	r3, r2
24007c6a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24007c6c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24007c72:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24007c74:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24007c7a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
24007c7c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007c7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24007c82:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
24007c84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
24007c86:	f043 0301 	orr.w	r3, r3, #1
24007c8a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
24007c8c:	682b      	ldr	r3, [r5, #0]
24007c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24007c92:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
24007c94:	f7fc fde8 	bl	24004868 <HAL_GetTick>
24007c98:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007c9a:	e005      	b.n	24007ca8 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
24007c9c:	f7fc fde4 	bl	24004868 <HAL_GetTick>
24007ca0:	1b00      	subs	r0, r0, r4
24007ca2:	2802      	cmp	r0, #2
24007ca4:	f63f af22 	bhi.w	24007aec <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007ca8:	6833      	ldr	r3, [r6, #0]
24007caa:	019a      	lsls	r2, r3, #6
24007cac:	d5f6      	bpl.n	24007c9c <HAL_RCC_OscConfig+0x4b4>
24007cae:	e65d      	b.n	2400796c <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24007cb0:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
24007cb2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
24007cb4:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24007cb6:	f43f ae5a 	beq.w	2400796e <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24007cba:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24007cbe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
24007cc0:	428b      	cmp	r3, r1
24007cc2:	f47f aeb1 	bne.w	24007a28 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24007cc6:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24007cca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24007ccc:	429a      	cmp	r2, r3
24007cce:	f47f aeab 	bne.w	24007a28 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24007cd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
24007cd4:	f3c6 0208 	ubfx	r2, r6, #0, #9
24007cd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24007cda:	429a      	cmp	r2, r3
24007cdc:	f47f aea4 	bne.w	24007a28 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24007ce0:	6b63      	ldr	r3, [r4, #52]	; 0x34
24007ce2:	f3c6 2246 	ubfx	r2, r6, #9, #7
24007ce6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24007ce8:	429a      	cmp	r2, r3
24007cea:	f47f ae9d 	bne.w	24007a28 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24007cee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
24007cf0:	f3c6 4206 	ubfx	r2, r6, #16, #7
24007cf4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24007cf6:	429a      	cmp	r2, r3
24007cf8:	f47f ae96 	bne.w	24007a28 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
24007cfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
24007cfe:	f3c6 6606 	ubfx	r6, r6, #24, #7
24007d02:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24007d04:	429e      	cmp	r6, r3
24007d06:	f47f ae8f 	bne.w	24007a28 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
24007d0a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
24007d0c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
24007d0e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
24007d12:	429a      	cmp	r2, r3
24007d14:	f43f ae2a 	beq.w	2400796c <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
24007d18:	4a10      	ldr	r2, [pc, #64]	; (24007d5c <HAL_RCC_OscConfig+0x574>)
24007d1a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007d1c:	f023 0301 	bic.w	r3, r3, #1
24007d20:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
24007d22:	f7fc fda1 	bl	24004868 <HAL_GetTick>
24007d26:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
24007d28:	f7fc fd9e 	bl	24004868 <HAL_GetTick>
24007d2c:	42a8      	cmp	r0, r5
24007d2e:	d0fb      	beq.n	24007d28 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24007d30:	4a0a      	ldr	r2, [pc, #40]	; (24007d5c <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
24007d32:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
24007d34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24007d36:	4b0b      	ldr	r3, [pc, #44]	; (24007d64 <HAL_RCC_OscConfig+0x57c>)
24007d38:	6b54      	ldr	r4, [r2, #52]	; 0x34
24007d3a:	4023      	ands	r3, r4
24007d3c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
24007d40:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
24007d42:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24007d44:	f043 0301 	orr.w	r3, r3, #1
24007d48:	62d3      	str	r3, [r2, #44]	; 0x2c
}
24007d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
24007d4c:	f7fc fd8c 	bl	24004868 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24007d50:	4e02      	ldr	r6, [pc, #8]	; (24007d5c <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24007d52:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
24007d56:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24007d58:	e00c      	b.n	24007d74 <HAL_RCC_OscConfig+0x58c>
24007d5a:	bf00      	nop
24007d5c:	58024400 	.word	0x58024400
24007d60:	fffffc0c 	.word	0xfffffc0c
24007d64:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24007d68:	f7fc fd7e 	bl	24004868 <HAL_GetTick>
24007d6c:	1b40      	subs	r0, r0, r5
24007d6e:	42b8      	cmp	r0, r7
24007d70:	f63f aebc 	bhi.w	24007aec <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24007d74:	6f33      	ldr	r3, [r6, #112]	; 0x70
24007d76:	0798      	lsls	r0, r3, #30
24007d78:	d4f6      	bmi.n	24007d68 <HAL_RCC_OscConfig+0x580>
24007d7a:	e5da      	b.n	24007932 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007d7c:	68eb      	ldr	r3, [r5, #12]
24007d7e:	6a22      	ldr	r2, [r4, #32]
24007d80:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
24007d84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
24007d88:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007d8a:	6823      	ldr	r3, [r4, #0]
24007d8c:	e59c      	b.n	240078c8 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
24007d8e:	4a0e      	ldr	r2, [pc, #56]	; (24007dc8 <HAL_RCC_OscConfig+0x5e0>)
24007d90:	6f13      	ldr	r3, [r2, #112]	; 0x70
24007d92:	f043 0301 	orr.w	r3, r3, #1
24007d96:	6713      	str	r3, [r2, #112]	; 0x70
24007d98:	e694      	b.n	24007ac4 <HAL_RCC_OscConfig+0x2dc>
24007d9a:	2b05      	cmp	r3, #5
24007d9c:	4b0a      	ldr	r3, [pc, #40]	; (24007dc8 <HAL_RCC_OscConfig+0x5e0>)
24007d9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007da0:	f47f ae89 	bne.w	24007ab6 <HAL_RCC_OscConfig+0x2ce>
24007da4:	f042 0204 	orr.w	r2, r2, #4
24007da8:	671a      	str	r2, [r3, #112]	; 0x70
24007daa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24007dac:	f042 0201 	orr.w	r2, r2, #1
24007db0:	671a      	str	r2, [r3, #112]	; 0x70
24007db2:	e687      	b.n	24007ac4 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007db4:	4a04      	ldr	r2, [pc, #16]	; (24007dc8 <HAL_RCC_OscConfig+0x5e0>)
24007db6:	6853      	ldr	r3, [r2, #4]
24007db8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
24007dbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24007dc0:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007dc2:	6823      	ldr	r3, [r4, #0]
24007dc4:	e580      	b.n	240078c8 <HAL_RCC_OscConfig+0xe0>
24007dc6:	bf00      	nop
24007dc8:	58024400 	.word	0x58024400

24007dcc <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007dcc:	4a48      	ldr	r2, [pc, #288]	; (24007ef0 <HAL_RCC_GetSysClockFreq+0x124>)
24007dce:	6913      	ldr	r3, [r2, #16]
24007dd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007dd4:	2b10      	cmp	r3, #16
24007dd6:	d004      	beq.n	24007de2 <HAL_RCC_GetSysClockFreq+0x16>
24007dd8:	2b18      	cmp	r3, #24
24007dda:	d00d      	beq.n	24007df8 <HAL_RCC_GetSysClockFreq+0x2c>
24007ddc:	b11b      	cbz	r3, 24007de6 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
24007dde:	4845      	ldr	r0, [pc, #276]	; (24007ef4 <HAL_RCC_GetSysClockFreq+0x128>)
24007de0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
24007de2:	4845      	ldr	r0, [pc, #276]	; (24007ef8 <HAL_RCC_GetSysClockFreq+0x12c>)
24007de4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007de6:	6813      	ldr	r3, [r2, #0]
24007de8:	0699      	lsls	r1, r3, #26
24007dea:	d54a      	bpl.n	24007e82 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007dec:	6813      	ldr	r3, [r2, #0]
24007dee:	4843      	ldr	r0, [pc, #268]	; (24007efc <HAL_RCC_GetSysClockFreq+0x130>)
24007df0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24007df4:	40d8      	lsrs	r0, r3
24007df6:	4770      	bx	lr
{
24007df8:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007dfa:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24007dfc:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24007dfe:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
24007e00:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007e04:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
24007e06:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
24007e0a:	d038      	beq.n	24007e7e <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007e0c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
24007e10:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24007e14:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24007e18:	fb05 f101 	mul.w	r1, r5, r1
24007e1c:	2b01      	cmp	r3, #1
24007e1e:	ee07 1a90 	vmov	s15, r1
24007e22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
24007e26:	d002      	beq.n	24007e2e <HAL_RCC_GetSysClockFreq+0x62>
24007e28:	2b02      	cmp	r3, #2
24007e2a:	d02c      	beq.n	24007e86 <HAL_RCC_GetSysClockFreq+0xba>
24007e2c:	b393      	cbz	r3, 24007e94 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007e2e:	ee07 0a90 	vmov	s15, r0
24007e32:	ed9f 5a33 	vldr	s10, [pc, #204]	; 24007f00 <HAL_RCC_GetSysClockFreq+0x134>
24007e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007e3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
24007e3c:	eec5 6a27 	vdiv.f32	s13, s10, s15
24007e40:	ed9f 6a30 	vldr	s12, [pc, #192]	; 24007f04 <HAL_RCC_GetSysClockFreq+0x138>
24007e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
24007e48:	ee07 3a90 	vmov	s15, r3
24007e4c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24007e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007e54:	ee77 7aa5 	vadd.f32	s15, s15, s11
24007e58:	eee7 7a06 	vfma.f32	s15, s14, s12
24007e5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
24007e60:	4b23      	ldr	r3, [pc, #140]	; (24007ef0 <HAL_RCC_GetSysClockFreq+0x124>)
24007e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24007e64:	f3c3 2346 	ubfx	r3, r3, #9, #7
24007e68:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
24007e6a:	ee07 3a90 	vmov	s15, r3
24007e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
24007e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
24007e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24007e7a:	ee17 0a90 	vmov	r0, s15
}
24007e7e:	bc30      	pop	{r4, r5}
24007e80:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
24007e82:	481e      	ldr	r0, [pc, #120]	; (24007efc <HAL_RCC_GetSysClockFreq+0x130>)
}
24007e84:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007e86:	ee07 0a90 	vmov	s15, r0
24007e8a:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 24007f08 <HAL_RCC_GetSysClockFreq+0x13c>
24007e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007e92:	e7d2      	b.n	24007e3a <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24007e94:	6813      	ldr	r3, [r2, #0]
24007e96:	069b      	lsls	r3, r3, #26
24007e98:	d522      	bpl.n	24007ee0 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007e9a:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007e9c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007ea0:	4916      	ldr	r1, [pc, #88]	; (24007efc <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24007ea6:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007ea8:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007eb0:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24007f04 <HAL_RCC_GetSysClockFreq+0x138>
24007eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24007eb8:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007eba:	ee06 3a10 	vmov	s12, r3
24007ebe:	ee05 1a90 	vmov	s11, r1
24007ec2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24007ec6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
24007eca:	ee36 6a26 	vadd.f32	s12, s12, s13
24007ece:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24007ed2:	eef0 7a46 	vmov.f32	s15, s12
24007ed6:	eee7 7a05 	vfma.f32	s15, s14, s10
24007eda:	ee66 6aa7 	vmul.f32	s13, s13, s15
24007ede:	e7bf      	b.n	24007e60 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24007ee0:	ee07 0a90 	vmov	s15, r0
24007ee4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 24007f0c <HAL_RCC_GetSysClockFreq+0x140>
24007ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24007eec:	e7a5      	b.n	24007e3a <HAL_RCC_GetSysClockFreq+0x6e>
24007eee:	bf00      	nop
24007ef0:	58024400 	.word	0x58024400
24007ef4:	003d0900 	.word	0x003d0900
24007ef8:	00f42400 	.word	0x00f42400
24007efc:	03d09000 	.word	0x03d09000
24007f00:	4a742400 	.word	0x4a742400
24007f04:	39000000 	.word	0x39000000
24007f08:	4b742400 	.word	0x4b742400
24007f0c:	4c742400 	.word	0x4c742400

24007f10 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
24007f10:	2800      	cmp	r0, #0
24007f12:	f000 811a 	beq.w	2400814a <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24007f16:	4a92      	ldr	r2, [pc, #584]	; (24008160 <HAL_RCC_ClockConfig+0x250>)
{
24007f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
24007f1c:	6813      	ldr	r3, [r2, #0]
24007f1e:	4604      	mov	r4, r0
24007f20:	460d      	mov	r5, r1
24007f22:	f003 030f 	and.w	r3, r3, #15
24007f26:	428b      	cmp	r3, r1
24007f28:	d20c      	bcs.n	24007f44 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
24007f2a:	6813      	ldr	r3, [r2, #0]
24007f2c:	f023 030f 	bic.w	r3, r3, #15
24007f30:	430b      	orrs	r3, r1
24007f32:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
24007f34:	6813      	ldr	r3, [r2, #0]
24007f36:	f003 030f 	and.w	r3, r3, #15
24007f3a:	428b      	cmp	r3, r1
24007f3c:	d002      	beq.n	24007f44 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
24007f3e:	2001      	movs	r0, #1
}
24007f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24007f44:	6823      	ldr	r3, [r4, #0]
24007f46:	075f      	lsls	r7, r3, #29
24007f48:	d50c      	bpl.n	24007f64 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24007f4a:	4986      	ldr	r1, [pc, #536]	; (24008164 <HAL_RCC_ClockConfig+0x254>)
24007f4c:	6920      	ldr	r0, [r4, #16]
24007f4e:	698a      	ldr	r2, [r1, #24]
24007f50:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007f54:	4290      	cmp	r0, r2
24007f56:	d905      	bls.n	24007f64 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24007f58:	698b      	ldr	r3, [r1, #24]
24007f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007f5e:	4303      	orrs	r3, r0
24007f60:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24007f62:	6823      	ldr	r3, [r4, #0]
24007f64:	071e      	lsls	r6, r3, #28
24007f66:	d50c      	bpl.n	24007f82 <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24007f68:	497e      	ldr	r1, [pc, #504]	; (24008164 <HAL_RCC_ClockConfig+0x254>)
24007f6a:	6960      	ldr	r0, [r4, #20]
24007f6c:	69ca      	ldr	r2, [r1, #28]
24007f6e:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007f72:	4290      	cmp	r0, r2
24007f74:	d905      	bls.n	24007f82 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24007f76:	69cb      	ldr	r3, [r1, #28]
24007f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007f7c:	4303      	orrs	r3, r0
24007f7e:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24007f80:	6823      	ldr	r3, [r4, #0]
24007f82:	06d8      	lsls	r0, r3, #27
24007f84:	d50c      	bpl.n	24007fa0 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24007f86:	4977      	ldr	r1, [pc, #476]	; (24008164 <HAL_RCC_ClockConfig+0x254>)
24007f88:	69a0      	ldr	r0, [r4, #24]
24007f8a:	69ca      	ldr	r2, [r1, #28]
24007f8c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24007f90:	4290      	cmp	r0, r2
24007f92:	d905      	bls.n	24007fa0 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24007f94:	69cb      	ldr	r3, [r1, #28]
24007f96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
24007f9a:	4303      	orrs	r3, r0
24007f9c:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24007f9e:	6823      	ldr	r3, [r4, #0]
24007fa0:	0699      	lsls	r1, r3, #26
24007fa2:	d50c      	bpl.n	24007fbe <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24007fa4:	496f      	ldr	r1, [pc, #444]	; (24008164 <HAL_RCC_ClockConfig+0x254>)
24007fa6:	69e0      	ldr	r0, [r4, #28]
24007fa8:	6a0a      	ldr	r2, [r1, #32]
24007faa:	f002 0270 	and.w	r2, r2, #112	; 0x70
24007fae:	4290      	cmp	r0, r2
24007fb0:	d905      	bls.n	24007fbe <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24007fb2:	6a0b      	ldr	r3, [r1, #32]
24007fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24007fb8:	4303      	orrs	r3, r0
24007fba:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007fbc:	6823      	ldr	r3, [r4, #0]
24007fbe:	079a      	lsls	r2, r3, #30
24007fc0:	f140 8083 	bpl.w	240080ca <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007fc4:	4867      	ldr	r0, [pc, #412]	; (24008164 <HAL_RCC_ClockConfig+0x254>)
24007fc6:	68e1      	ldr	r1, [r4, #12]
24007fc8:	6982      	ldr	r2, [r0, #24]
24007fca:	f002 020f 	and.w	r2, r2, #15
24007fce:	4291      	cmp	r1, r2
24007fd0:	f240 80a9 	bls.w	24008126 <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24007fd4:	6983      	ldr	r3, [r0, #24]
24007fd6:	f023 030f 	bic.w	r3, r3, #15
24007fda:	430b      	orrs	r3, r1
24007fdc:	6183      	str	r3, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24007fde:	6823      	ldr	r3, [r4, #0]
24007fe0:	07df      	lsls	r7, r3, #31
24007fe2:	d474      	bmi.n	240080ce <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007fe4:	079f      	lsls	r7, r3, #30
24007fe6:	d507      	bpl.n	24007ff8 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007fe8:	4a5e      	ldr	r2, [pc, #376]	; (24008164 <HAL_RCC_ClockConfig+0x254>)
24007fea:	68e1      	ldr	r1, [r4, #12]
24007fec:	6993      	ldr	r3, [r2, #24]
24007fee:	f003 030f 	and.w	r3, r3, #15
24007ff2:	428b      	cmp	r3, r1
24007ff4:	f200 80a0 	bhi.w	24008138 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
24007ff8:	4a59      	ldr	r2, [pc, #356]	; (24008160 <HAL_RCC_ClockConfig+0x250>)
24007ffa:	6813      	ldr	r3, [r2, #0]
24007ffc:	f003 030f 	and.w	r3, r3, #15
24008000:	42ab      	cmp	r3, r5
24008002:	d909      	bls.n	24008018 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
24008004:	6813      	ldr	r3, [r2, #0]
24008006:	f023 030f 	bic.w	r3, r3, #15
2400800a:	432b      	orrs	r3, r5
2400800c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
2400800e:	6813      	ldr	r3, [r2, #0]
24008010:	f003 030f 	and.w	r3, r3, #15
24008014:	42ab      	cmp	r3, r5
24008016:	d192      	bne.n	24007f3e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24008018:	6823      	ldr	r3, [r4, #0]
2400801a:	075e      	lsls	r6, r3, #29
2400801c:	d50c      	bpl.n	24008038 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
2400801e:	4951      	ldr	r1, [pc, #324]	; (24008164 <HAL_RCC_ClockConfig+0x254>)
24008020:	6920      	ldr	r0, [r4, #16]
24008022:	698a      	ldr	r2, [r1, #24]
24008024:	f002 0270 	and.w	r2, r2, #112	; 0x70
24008028:	4290      	cmp	r0, r2
2400802a:	d205      	bcs.n	24008038 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
2400802c:	698b      	ldr	r3, [r1, #24]
2400802e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24008032:	4303      	orrs	r3, r0
24008034:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24008036:	6823      	ldr	r3, [r4, #0]
24008038:	071d      	lsls	r5, r3, #28
2400803a:	d50c      	bpl.n	24008056 <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
2400803c:	4949      	ldr	r1, [pc, #292]	; (24008164 <HAL_RCC_ClockConfig+0x254>)
2400803e:	6960      	ldr	r0, [r4, #20]
24008040:	69ca      	ldr	r2, [r1, #28]
24008042:	f002 0270 	and.w	r2, r2, #112	; 0x70
24008046:	4290      	cmp	r0, r2
24008048:	d205      	bcs.n	24008056 <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
2400804a:	69cb      	ldr	r3, [r1, #28]
2400804c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
24008050:	4303      	orrs	r3, r0
24008052:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24008054:	6823      	ldr	r3, [r4, #0]
24008056:	06d8      	lsls	r0, r3, #27
24008058:	d50c      	bpl.n	24008074 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
2400805a:	4942      	ldr	r1, [pc, #264]	; (24008164 <HAL_RCC_ClockConfig+0x254>)
2400805c:	69a0      	ldr	r0, [r4, #24]
2400805e:	69ca      	ldr	r2, [r1, #28]
24008060:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
24008064:	4290      	cmp	r0, r2
24008066:	d205      	bcs.n	24008074 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24008068:	69cb      	ldr	r3, [r1, #28]
2400806a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
2400806e:	4303      	orrs	r3, r0
24008070:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24008072:	6823      	ldr	r3, [r4, #0]
24008074:	0699      	lsls	r1, r3, #26
24008076:	d50b      	bpl.n	24008090 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24008078:	4a3a      	ldr	r2, [pc, #232]	; (24008164 <HAL_RCC_ClockConfig+0x254>)
2400807a:	69e1      	ldr	r1, [r4, #28]
2400807c:	6a13      	ldr	r3, [r2, #32]
2400807e:	f003 0370 	and.w	r3, r3, #112	; 0x70
24008082:	4299      	cmp	r1, r3
24008084:	d204      	bcs.n	24008090 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
24008086:	6a13      	ldr	r3, [r2, #32]
24008088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
2400808c:	430b      	orrs	r3, r1
2400808e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24008090:	f7ff fe9c 	bl	24007dcc <HAL_RCC_GetSysClockFreq>
24008094:	4a33      	ldr	r2, [pc, #204]	; (24008164 <HAL_RCC_ClockConfig+0x254>)
24008096:	4603      	mov	r3, r0
24008098:	4833      	ldr	r0, [pc, #204]	; (24008168 <HAL_RCC_ClockConfig+0x258>)
2400809a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400809c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
2400809e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
240080a2:	4d32      	ldr	r5, [pc, #200]	; (2400816c <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240080a4:	f002 020f 	and.w	r2, r2, #15
240080a8:	4c31      	ldr	r4, [pc, #196]	; (24008170 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240080aa:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240080ac:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240080ae:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
240080b2:	4830      	ldr	r0, [pc, #192]	; (24008174 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240080b4:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
240080b8:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
240080ba:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
240080bc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240080be:	40d3      	lsrs	r3, r2
240080c0:	6023      	str	r3, [r4, #0]
}
240080c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
240080c6:	f7fc bb6d 	b.w	240047a4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
240080ca:	07db      	lsls	r3, r3, #31
240080cc:	d594      	bpl.n	24007ff8 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
240080ce:	4a25      	ldr	r2, [pc, #148]	; (24008164 <HAL_RCC_ClockConfig+0x254>)
240080d0:	68a1      	ldr	r1, [r4, #8]
240080d2:	6993      	ldr	r3, [r2, #24]
240080d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
240080d8:	430b      	orrs	r3, r1
240080da:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
240080dc:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
240080de:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
240080e0:	2902      	cmp	r1, #2
240080e2:	d034      	beq.n	2400814e <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
240080e4:	2903      	cmp	r1, #3
240080e6:	d02d      	beq.n	24008144 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
240080e8:	2901      	cmp	r1, #1
240080ea:	d035      	beq.n	24008158 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
240080ec:	075b      	lsls	r3, r3, #29
240080ee:	f57f af26 	bpl.w	24007f3e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
240080f2:	4e1c      	ldr	r6, [pc, #112]	; (24008164 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
240080f4:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
240080f8:	6933      	ldr	r3, [r6, #16]
240080fa:	f023 0307 	bic.w	r3, r3, #7
240080fe:	430b      	orrs	r3, r1
24008100:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
24008102:	f7fc fbb1 	bl	24004868 <HAL_GetTick>
24008106:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24008108:	e004      	b.n	24008114 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2400810a:	f7fc fbad 	bl	24004868 <HAL_GetTick>
2400810e:	1bc0      	subs	r0, r0, r7
24008110:	4540      	cmp	r0, r8
24008112:	d81f      	bhi.n	24008154 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24008114:	6933      	ldr	r3, [r6, #16]
24008116:	6862      	ldr	r2, [r4, #4]
24008118:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400811c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
24008120:	d1f3      	bne.n	2400810a <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24008122:	6823      	ldr	r3, [r4, #0]
24008124:	e75e      	b.n	24007fe4 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24008126:	07da      	lsls	r2, r3, #31
24008128:	d4d1      	bmi.n	240080ce <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
2400812a:	4a0e      	ldr	r2, [pc, #56]	; (24008164 <HAL_RCC_ClockConfig+0x254>)
2400812c:	6993      	ldr	r3, [r2, #24]
2400812e:	f003 030f 	and.w	r3, r3, #15
24008132:	428b      	cmp	r3, r1
24008134:	f67f af60 	bls.w	24007ff8 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24008138:	6993      	ldr	r3, [r2, #24]
2400813a:	f023 030f 	bic.w	r3, r3, #15
2400813e:	430b      	orrs	r3, r1
24008140:	6193      	str	r3, [r2, #24]
24008142:	e759      	b.n	24007ff8 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24008144:	0198      	lsls	r0, r3, #6
24008146:	d4d4      	bmi.n	240080f2 <HAL_RCC_ClockConfig+0x1e2>
24008148:	e6f9      	b.n	24007f3e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
2400814a:	2001      	movs	r0, #1
}
2400814c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400814e:	039e      	lsls	r6, r3, #14
24008150:	d4cf      	bmi.n	240080f2 <HAL_RCC_ClockConfig+0x1e2>
24008152:	e6f4      	b.n	24007f3e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
24008154:	2003      	movs	r0, #3
24008156:	e6f3      	b.n	24007f40 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24008158:	05da      	lsls	r2, r3, #23
2400815a:	d4ca      	bmi.n	240080f2 <HAL_RCC_ClockConfig+0x1e2>
2400815c:	e6ef      	b.n	24007f3e <HAL_RCC_ClockConfig+0x2e>
2400815e:	bf00      	nop
24008160:	52002000 	.word	0x52002000
24008164:	58024400 	.word	0x58024400
24008168:	2401c830 	.word	0x2401c830
2400816c:	200008ec 	.word	0x200008ec
24008170:	200008f0 	.word	0x200008f0
24008174:	20000938 	.word	0x20000938

24008178 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
24008178:	4a18      	ldr	r2, [pc, #96]	; (240081dc <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2400817a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400817c:	6913      	ldr	r3, [r2, #16]
2400817e:	f003 0338 	and.w	r3, r3, #56	; 0x38
24008182:	2b10      	cmp	r3, #16
24008184:	d01a      	beq.n	240081bc <HAL_RCC_GetHCLKFreq+0x44>
24008186:	2b18      	cmp	r3, #24
24008188:	d023      	beq.n	240081d2 <HAL_RCC_GetHCLKFreq+0x5a>
2400818a:	b1cb      	cbz	r3, 240081c0 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
2400818c:	4814      	ldr	r0, [pc, #80]	; (240081e0 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400818e:	4b13      	ldr	r3, [pc, #76]	; (240081dc <HAL_RCC_GetHCLKFreq+0x64>)
24008190:	4914      	ldr	r1, [pc, #80]	; (240081e4 <HAL_RCC_GetHCLKFreq+0x6c>)
24008192:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008194:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008196:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400819a:	4c13      	ldr	r4, [pc, #76]	; (240081e8 <HAL_RCC_GetHCLKFreq+0x70>)
2400819c:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
240081a0:	4d12      	ldr	r5, [pc, #72]	; (240081ec <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240081a2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240081a4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240081a6:	f002 021f 	and.w	r2, r2, #31
240081aa:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240081ae:	f003 001f 	and.w	r0, r3, #31
240081b2:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
240081b6:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240081b8:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
240081ba:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
240081bc:	480c      	ldr	r0, [pc, #48]	; (240081f0 <HAL_RCC_GetHCLKFreq+0x78>)
240081be:	e7e6      	b.n	2400818e <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240081c0:	6813      	ldr	r3, [r2, #0]
240081c2:	069b      	lsls	r3, r3, #26
240081c4:	d508      	bpl.n	240081d8 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240081c6:	6813      	ldr	r3, [r2, #0]
240081c8:	480a      	ldr	r0, [pc, #40]	; (240081f4 <HAL_RCC_GetHCLKFreq+0x7c>)
240081ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
240081ce:	40d8      	lsrs	r0, r3
240081d0:	e7dd      	b.n	2400818e <HAL_RCC_GetHCLKFreq+0x16>
240081d2:	f7ff fa83 	bl	240076dc <HAL_RCC_GetSysClockFreq.part.0>
240081d6:	e7da      	b.n	2400818e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
240081d8:	4806      	ldr	r0, [pc, #24]	; (240081f4 <HAL_RCC_GetHCLKFreq+0x7c>)
240081da:	e7d8      	b.n	2400818e <HAL_RCC_GetHCLKFreq+0x16>
240081dc:	58024400 	.word	0x58024400
240081e0:	003d0900 	.word	0x003d0900
240081e4:	2401c830 	.word	0x2401c830
240081e8:	200008f0 	.word	0x200008f0
240081ec:	200008ec 	.word	0x200008ec
240081f0:	00f42400 	.word	0x00f42400
240081f4:	03d09000 	.word	0x03d09000

240081f8 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
240081f8:	4a1c      	ldr	r2, [pc, #112]	; (2400826c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
240081fa:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
240081fc:	6913      	ldr	r3, [r2, #16]
240081fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
24008202:	2b10      	cmp	r3, #16
24008204:	d021      	beq.n	2400824a <HAL_RCC_GetPCLK1Freq+0x52>
24008206:	2b18      	cmp	r3, #24
24008208:	d02a      	beq.n	24008260 <HAL_RCC_GetPCLK1Freq+0x68>
2400820a:	b303      	cbz	r3, 2400824e <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
2400820c:	4818      	ldr	r0, [pc, #96]	; (24008270 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400820e:	4a17      	ldr	r2, [pc, #92]	; (2400826c <HAL_RCC_GetPCLK1Freq+0x74>)
24008210:	4918      	ldr	r1, [pc, #96]	; (24008274 <HAL_RCC_GetPCLK1Freq+0x7c>)
24008212:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008214:	4c18      	ldr	r4, [pc, #96]	; (24008278 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
24008216:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
2400821a:	4d18      	ldr	r5, [pc, #96]	; (2400827c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400821c:	5ccb      	ldrb	r3, [r1, r3]
2400821e:	f003 031f 	and.w	r3, r3, #31
24008222:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24008224:	6993      	ldr	r3, [r2, #24]
24008226:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
2400822a:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400822c:	5ccb      	ldrb	r3, [r1, r3]
2400822e:	f003 031f 	and.w	r3, r3, #31
24008232:	fa20 f303 	lsr.w	r3, r0, r3
24008236:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
24008238:	69d2      	ldr	r2, [r2, #28]
2400823a:	f3c2 1202 	ubfx	r2, r2, #4, #3
2400823e:	5c88      	ldrb	r0, [r1, r2]
24008240:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
24008244:	fa23 f000 	lsr.w	r0, r3, r0
24008248:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
2400824a:	480d      	ldr	r0, [pc, #52]	; (24008280 <HAL_RCC_GetPCLK1Freq+0x88>)
2400824c:	e7df      	b.n	2400820e <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400824e:	6813      	ldr	r3, [r2, #0]
24008250:	069b      	lsls	r3, r3, #26
24008252:	d508      	bpl.n	24008266 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24008254:	6813      	ldr	r3, [r2, #0]
24008256:	480b      	ldr	r0, [pc, #44]	; (24008284 <HAL_RCC_GetPCLK1Freq+0x8c>)
24008258:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400825c:	40d8      	lsrs	r0, r3
2400825e:	e7d6      	b.n	2400820e <HAL_RCC_GetPCLK1Freq+0x16>
24008260:	f7ff fa3c 	bl	240076dc <HAL_RCC_GetSysClockFreq.part.0>
24008264:	e7d3      	b.n	2400820e <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
24008266:	4807      	ldr	r0, [pc, #28]	; (24008284 <HAL_RCC_GetPCLK1Freq+0x8c>)
24008268:	e7d1      	b.n	2400820e <HAL_RCC_GetPCLK1Freq+0x16>
2400826a:	bf00      	nop
2400826c:	58024400 	.word	0x58024400
24008270:	003d0900 	.word	0x003d0900
24008274:	2401c830 	.word	0x2401c830
24008278:	200008f0 	.word	0x200008f0
2400827c:	200008ec 	.word	0x200008ec
24008280:	00f42400 	.word	0x00f42400
24008284:	03d09000 	.word	0x03d09000

24008288 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
24008288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2400828a:	4c3a      	ldr	r4, [pc, #232]	; (24008374 <RCCEx_PLL2_Config+0xec>)
2400828c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2400828e:	f003 0303 	and.w	r3, r3, #3
24008292:	2b03      	cmp	r3, #3
24008294:	d067      	beq.n	24008366 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
24008296:	6823      	ldr	r3, [r4, #0]
24008298:	4606      	mov	r6, r0
2400829a:	460f      	mov	r7, r1
2400829c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
240082a0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
240082a2:	f7fc fae1 	bl	24004868 <HAL_GetTick>
240082a6:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
240082a8:	e004      	b.n	240082b4 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
240082aa:	f7fc fadd 	bl	24004868 <HAL_GetTick>
240082ae:	1b43      	subs	r3, r0, r5
240082b0:	2b02      	cmp	r3, #2
240082b2:	d856      	bhi.n	24008362 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
240082b4:	6823      	ldr	r3, [r4, #0]
240082b6:	011a      	lsls	r2, r3, #4
240082b8:	d4f7      	bmi.n	240082aa <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
240082ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
240082bc:	6832      	ldr	r2, [r6, #0]
240082be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
240082c2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
240082c6:	62a3      	str	r3, [r4, #40]	; 0x28
240082c8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
240082cc:	3b01      	subs	r3, #1
240082ce:	3a01      	subs	r2, #1
240082d0:	025b      	lsls	r3, r3, #9
240082d2:	0412      	lsls	r2, r2, #16
240082d4:	b29b      	uxth	r3, r3
240082d6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
240082da:	4313      	orrs	r3, r2
240082dc:	6872      	ldr	r2, [r6, #4]
240082de:	3a01      	subs	r2, #1
240082e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
240082e4:	4313      	orrs	r3, r2
240082e6:	6932      	ldr	r2, [r6, #16]
240082e8:	3a01      	subs	r2, #1
240082ea:	0612      	lsls	r2, r2, #24
240082ec:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
240082f0:	4313      	orrs	r3, r2
240082f2:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
240082f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240082f6:	6972      	ldr	r2, [r6, #20]
240082f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
240082fc:	4313      	orrs	r3, r2
240082fe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
24008300:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24008302:	69b3      	ldr	r3, [r6, #24]
24008304:	f022 0220 	bic.w	r2, r2, #32
24008308:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
2400830a:	4b1b      	ldr	r3, [pc, #108]	; (24008378 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
2400830c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
2400830e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24008310:	f022 0210 	bic.w	r2, r2, #16
24008314:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
24008316:	6be1      	ldr	r1, [r4, #60]	; 0x3c
24008318:	69f2      	ldr	r2, [r6, #28]
2400831a:	400b      	ands	r3, r1
2400831c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24008320:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
24008322:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24008324:	f043 0310 	orr.w	r3, r3, #16
24008328:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
2400832a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
2400832c:	b1ef      	cbz	r7, 2400836a <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
2400832e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
24008330:	bf0c      	ite	eq
24008332:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
24008336:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
2400833a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
2400833c:	4c0d      	ldr	r4, [pc, #52]	; (24008374 <RCCEx_PLL2_Config+0xec>)
2400833e:	6823      	ldr	r3, [r4, #0]
24008340:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
24008344:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24008346:	f7fc fa8f 	bl	24004868 <HAL_GetTick>
2400834a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2400834c:	e004      	b.n	24008358 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
2400834e:	f7fc fa8b 	bl	24004868 <HAL_GetTick>
24008352:	1b40      	subs	r0, r0, r5
24008354:	2802      	cmp	r0, #2
24008356:	d804      	bhi.n	24008362 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
24008358:	6823      	ldr	r3, [r4, #0]
2400835a:	011b      	lsls	r3, r3, #4
2400835c:	d5f7      	bpl.n	2400834e <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
2400835e:	2000      	movs	r0, #0
}
24008360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
24008362:	2003      	movs	r0, #3
}
24008364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
24008366:	2001      	movs	r0, #1
}
24008368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
2400836a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
2400836e:	62e3      	str	r3, [r4, #44]	; 0x2c
24008370:	e7e4      	b.n	2400833c <RCCEx_PLL2_Config+0xb4>
24008372:	bf00      	nop
24008374:	58024400 	.word	0x58024400
24008378:	ffff0007 	.word	0xffff0007

2400837c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
2400837c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2400837e:	4c3a      	ldr	r4, [pc, #232]	; (24008468 <RCCEx_PLL3_Config+0xec>)
24008380:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24008382:	f003 0303 	and.w	r3, r3, #3
24008386:	2b03      	cmp	r3, #3
24008388:	d067      	beq.n	2400845a <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
2400838a:	6823      	ldr	r3, [r4, #0]
2400838c:	4606      	mov	r6, r0
2400838e:	460f      	mov	r7, r1
24008390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
24008394:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
24008396:	f7fc fa67 	bl	24004868 <HAL_GetTick>
2400839a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2400839c:	e004      	b.n	240083a8 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
2400839e:	f7fc fa63 	bl	24004868 <HAL_GetTick>
240083a2:	1b43      	subs	r3, r0, r5
240083a4:	2b02      	cmp	r3, #2
240083a6:	d856      	bhi.n	24008456 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
240083a8:	6823      	ldr	r3, [r4, #0]
240083aa:	009a      	lsls	r2, r3, #2
240083ac:	d4f7      	bmi.n	2400839e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
240083ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
240083b0:	6832      	ldr	r2, [r6, #0]
240083b2:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
240083b6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
240083ba:	62a3      	str	r3, [r4, #40]	; 0x28
240083bc:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
240083c0:	3b01      	subs	r3, #1
240083c2:	3a01      	subs	r2, #1
240083c4:	025b      	lsls	r3, r3, #9
240083c6:	0412      	lsls	r2, r2, #16
240083c8:	b29b      	uxth	r3, r3
240083ca:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
240083ce:	4313      	orrs	r3, r2
240083d0:	6872      	ldr	r2, [r6, #4]
240083d2:	3a01      	subs	r2, #1
240083d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
240083d8:	4313      	orrs	r3, r2
240083da:	6932      	ldr	r2, [r6, #16]
240083dc:	3a01      	subs	r2, #1
240083de:	0612      	lsls	r2, r2, #24
240083e0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
240083e4:	4313      	orrs	r3, r2
240083e6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
240083e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
240083ea:	6972      	ldr	r2, [r6, #20]
240083ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
240083f0:	4313      	orrs	r3, r2
240083f2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
240083f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
240083f6:	69b3      	ldr	r3, [r6, #24]
240083f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
240083fc:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
240083fe:	4b1b      	ldr	r3, [pc, #108]	; (2400846c <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
24008400:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
24008402:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
24008404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
24008408:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
2400840a:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400840c:	69f2      	ldr	r2, [r6, #28]
2400840e:	400b      	ands	r3, r1
24008410:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
24008414:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
24008416:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
24008418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400841c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
2400841e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
24008420:	b1ef      	cbz	r7, 2400845e <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
24008422:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
24008424:	bf0c      	ite	eq
24008426:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
2400842a:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
2400842e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
24008430:	4c0d      	ldr	r4, [pc, #52]	; (24008468 <RCCEx_PLL3_Config+0xec>)
24008432:	6823      	ldr	r3, [r4, #0]
24008434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
24008438:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400843a:	f7fc fa15 	bl	24004868 <HAL_GetTick>
2400843e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
24008440:	e004      	b.n	2400844c <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
24008442:	f7fc fa11 	bl	24004868 <HAL_GetTick>
24008446:	1b40      	subs	r0, r0, r5
24008448:	2802      	cmp	r0, #2
2400844a:	d804      	bhi.n	24008456 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2400844c:	6823      	ldr	r3, [r4, #0]
2400844e:	009b      	lsls	r3, r3, #2
24008450:	d5f7      	bpl.n	24008442 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
24008452:	2000      	movs	r0, #0
}
24008454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
24008456:	2003      	movs	r0, #3
}
24008458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
2400845a:	2001      	movs	r0, #1
}
2400845c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
2400845e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
24008462:	62e3      	str	r3, [r4, #44]	; 0x2c
24008464:	e7e4      	b.n	24008430 <RCCEx_PLL3_Config+0xb4>
24008466:	bf00      	nop
24008468:	58024400 	.word	0x58024400
2400846c:	ffff0007 	.word	0xffff0007

24008470 <HAL_RCCEx_PeriphCLKConfig>:
{
24008470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
24008474:	e9d0 3200 	ldrd	r3, r2, [r0]
{
24008478:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2400847a:	011d      	lsls	r5, r3, #4
2400847c:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
24008480:	d521      	bpl.n	240084c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
24008482:	6e81      	ldr	r1, [r0, #104]	; 0x68
24008484:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24008488:	f000 8577 	beq.w	24008f7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
2400848c:	d80e      	bhi.n	240084ac <HAL_RCCEx_PeriphCLKConfig+0x3c>
2400848e:	2900      	cmp	r1, #0
24008490:	f000 85d2 	beq.w	24009038 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
24008494:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24008498:	f040 85cb 	bne.w	24009032 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
2400849c:	2102      	movs	r1, #2
2400849e:	3008      	adds	r0, #8
240084a0:	f7ff fef2 	bl	24008288 <RCCEx_PLL2_Config>
240084a4:	4606      	mov	r6, r0
    if (ret == HAL_OK)
240084a6:	b966      	cbnz	r6, 240084c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
240084a8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
240084aa:	e003      	b.n	240084b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
240084ac:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
240084b0:	f040 85bf 	bne.w	24009032 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
240084b4:	4aa3      	ldr	r2, [pc, #652]	; (24008744 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240084b6:	2600      	movs	r6, #0
240084b8:	6d13      	ldr	r3, [r2, #80]	; 0x50
240084ba:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
240084be:	430b      	orrs	r3, r1
240084c0:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
240084c2:	e9d4 3200 	ldrd	r3, r2, [r4]
240084c6:	05d8      	lsls	r0, r3, #23
240084c8:	d50a      	bpl.n	240084e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
240084ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
240084cc:	2904      	cmp	r1, #4
240084ce:	d806      	bhi.n	240084de <HAL_RCCEx_PeriphCLKConfig+0x6e>
240084d0:	e8df f011 	tbh	[pc, r1, lsl #1]
240084d4:	0564055d 	.word	0x0564055d
240084d8:	0310057b 	.word	0x0310057b
240084dc:	0310      	.short	0x0310
240084de:	2601      	movs	r6, #1
240084e0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
240084e2:	0599      	lsls	r1, r3, #22
240084e4:	d517      	bpl.n	24008516 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
240084e6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
240084e8:	2980      	cmp	r1, #128	; 0x80
240084ea:	f000 8575 	beq.w	24008fd8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
240084ee:	f200 80e1 	bhi.w	240086b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
240084f2:	2900      	cmp	r1, #0
240084f4:	f000 8446 	beq.w	24008d84 <HAL_RCCEx_PeriphCLKConfig+0x914>
240084f8:	2940      	cmp	r1, #64	; 0x40
240084fa:	f040 80e2 	bne.w	240086c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240084fe:	2100      	movs	r1, #0
24008500:	f104 0008 	add.w	r0, r4, #8
24008504:	f7ff fec0 	bl	24008288 <RCCEx_PLL2_Config>
24008508:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400850a:	2d00      	cmp	r5, #0
2400850c:	f000 83f6 	beq.w	24008cfc <HAL_RCCEx_PeriphCLKConfig+0x88c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
24008510:	462e      	mov	r6, r5
24008512:	e9d4 3200 	ldrd	r3, r2, [r4]
24008516:	055f      	lsls	r7, r3, #21
24008518:	d51a      	bpl.n	24008550 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
2400851a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
2400851e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
24008522:	f000 8522 	beq.w	24008f6a <HAL_RCCEx_PeriphCLKConfig+0xafa>
24008526:	f200 80cf 	bhi.w	240086c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
2400852a:	2900      	cmp	r1, #0
2400852c:	f000 8431 	beq.w	24008d92 <HAL_RCCEx_PeriphCLKConfig+0x922>
24008530:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24008534:	f040 80d0 	bne.w	240086d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008538:	2100      	movs	r1, #0
2400853a:	f104 0008 	add.w	r0, r4, #8
2400853e:	f7ff fea3 	bl	24008288 <RCCEx_PLL2_Config>
24008542:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008544:	2d00      	cmp	r5, #0
24008546:	f000 83f8 	beq.w	24008d3a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
2400854a:	462e      	mov	r6, r5
2400854c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008550:	0518      	lsls	r0, r3, #20
24008552:	d51a      	bpl.n	2400858a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
24008554:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24008558:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
2400855c:	f000 852d 	beq.w	24008fba <HAL_RCCEx_PeriphCLKConfig+0xb4a>
24008560:	f200 80bd 	bhi.w	240086de <HAL_RCCEx_PeriphCLKConfig+0x26e>
24008564:	2900      	cmp	r1, #0
24008566:	f000 8406 	beq.w	24008d76 <HAL_RCCEx_PeriphCLKConfig+0x906>
2400856a:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
2400856e:	f040 80be 	bne.w	240086ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008572:	2100      	movs	r1, #0
24008574:	f104 0008 	add.w	r0, r4, #8
24008578:	f7ff fe86 	bl	24008288 <RCCEx_PLL2_Config>
2400857c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400857e:	2d00      	cmp	r5, #0
24008580:	f000 83b1 	beq.w	24008ce6 <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24008584:	462e      	mov	r6, r5
24008586:	e9d4 3200 	ldrd	r3, r2, [r4]
2400858a:	0199      	lsls	r1, r3, #6
2400858c:	d51a      	bpl.n	240085c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
2400858e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
24008590:	2920      	cmp	r1, #32
24008592:	f000 84b4 	beq.w	24008efe <HAL_RCCEx_PeriphCLKConfig+0xa8e>
24008596:	f200 80ad 	bhi.w	240086f4 <HAL_RCCEx_PeriphCLKConfig+0x284>
2400859a:	b139      	cbz	r1, 240085ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
2400859c:	2910      	cmp	r1, #16
2400859e:	f040 80ac 	bne.w	240086fa <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240085a2:	4a68      	ldr	r2, [pc, #416]	; (24008744 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240085a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
240085a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240085aa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
240085ac:	2d00      	cmp	r5, #0
240085ae:	f040 8418 	bne.w	24008de2 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
240085b2:	4a64      	ldr	r2, [pc, #400]	; (24008744 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
240085b4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
240085b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
240085b8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
240085bc:	430b      	orrs	r3, r1
240085be:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
240085c0:	e9d4 3200 	ldrd	r3, r2, [r4]
240085c4:	04df      	lsls	r7, r3, #19
240085c6:	d519      	bpl.n	240085fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
240085c8:	6e21      	ldr	r1, [r4, #96]	; 0x60
240085ca:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
240085ce:	f000 84ec 	beq.w	24008faa <HAL_RCCEx_PeriphCLKConfig+0xb3a>
240085d2:	f200 8095 	bhi.w	24008700 <HAL_RCCEx_PeriphCLKConfig+0x290>
240085d6:	2900      	cmp	r1, #0
240085d8:	f000 83c7 	beq.w	24008d6a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
240085dc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
240085e0:	f040 8096 	bne.w	24008710 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240085e4:	2100      	movs	r1, #0
240085e6:	f104 0008 	add.w	r0, r4, #8
240085ea:	f7ff fe4d 	bl	24008288 <RCCEx_PLL2_Config>
240085ee:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240085f0:	2d00      	cmp	r5, #0
240085f2:	f000 838d 	beq.w	24008d10 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
240085f6:	462e      	mov	r6, r5
240085f8:	e9d4 3200 	ldrd	r3, r2, [r4]
240085fc:	0498      	lsls	r0, r3, #18
240085fe:	d51d      	bpl.n	2400863c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
24008600:	6e61      	ldr	r1, [r4, #100]	; 0x64
24008602:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
24008606:	f000 8466 	beq.w	24008ed6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
2400860a:	f200 8084 	bhi.w	24008716 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
2400860e:	b149      	cbz	r1, 24008624 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
24008610:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24008614:	f040 8088 	bne.w	24008728 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008618:	2101      	movs	r1, #1
2400861a:	f104 0008 	add.w	r0, r4, #8
2400861e:	f7ff fe33 	bl	24008288 <RCCEx_PLL2_Config>
24008622:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008624:	2d00      	cmp	r5, #0
24008626:	f040 83eb 	bne.w	24008e00 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
2400862a:	4a46      	ldr	r2, [pc, #280]	; (24008744 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2400862c:	6e61      	ldr	r1, [r4, #100]	; 0x64
2400862e:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008630:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
24008634:	430b      	orrs	r3, r1
24008636:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24008638:	e9d4 3200 	ldrd	r3, r2, [r4]
2400863c:	0459      	lsls	r1, r3, #17
2400863e:	d51d      	bpl.n	2400867c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
24008640:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
24008644:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008648:	f000 844f 	beq.w	24008eea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
2400864c:	d86f      	bhi.n	2400872e <HAL_RCCEx_PeriphCLKConfig+0x2be>
2400864e:	b141      	cbz	r1, 24008662 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
24008650:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24008654:	d173      	bne.n	2400873e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008656:	2101      	movs	r1, #1
24008658:	f104 0008 	add.w	r0, r4, #8
2400865c:	f7ff fe14 	bl	24008288 <RCCEx_PLL2_Config>
24008660:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008662:	2d00      	cmp	r5, #0
24008664:	f040 83d4 	bne.w	24008e10 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
24008668:	4a36      	ldr	r2, [pc, #216]	; (24008744 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
2400866a:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
2400866e:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008670:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
24008674:	430b      	orrs	r3, r1
24008676:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24008678:	e9d4 3200 	ldrd	r3, r2, [r4]
2400867c:	041f      	lsls	r7, r3, #16
2400867e:	d50d      	bpl.n	2400869c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
24008680:	6f21      	ldr	r1, [r4, #112]	; 0x70
24008682:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24008686:	f000 841d 	beq.w	24008ec4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
2400868a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
2400868e:	f000 8239 	beq.w	24008b04 <HAL_RCCEx_PeriphCLKConfig+0x694>
24008692:	2900      	cmp	r1, #0
24008694:	f000 823c 	beq.w	24008b10 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
24008698:	2601      	movs	r6, #1
2400869a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
2400869c:	01d8      	lsls	r0, r3, #7
2400869e:	d55e      	bpl.n	2400875e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->FmcClockSelection)
240086a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
240086a2:	2903      	cmp	r1, #3
240086a4:	f200 84f3 	bhi.w	2400908e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
240086a8:	e8df f011 	tbh	[pc, r1, lsl #1]
240086ac:	004e0053 	.word	0x004e0053
240086b0:	0053043d 	.word	0x0053043d
    switch (PeriphClkInit->Sai23ClockSelection)
240086b4:	29c0      	cmp	r1, #192	; 0xc0
240086b6:	f43f af28 	beq.w	2400850a <HAL_RCCEx_PeriphCLKConfig+0x9a>
240086ba:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
240086be:	f43f af24 	beq.w	2400850a <HAL_RCCEx_PeriphCLKConfig+0x9a>
240086c2:	2601      	movs	r6, #1
240086c4:	4635      	mov	r5, r6
240086c6:	e726      	b.n	24008516 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
240086c8:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
240086cc:	f43f af3a 	beq.w	24008544 <HAL_RCCEx_PeriphCLKConfig+0xd4>
240086d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
240086d4:	f43f af36 	beq.w	24008544 <HAL_RCCEx_PeriphCLKConfig+0xd4>
240086d8:	2601      	movs	r6, #1
240086da:	4635      	mov	r5, r6
240086dc:	e738      	b.n	24008550 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
240086de:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
240086e2:	f43f af4c 	beq.w	2400857e <HAL_RCCEx_PeriphCLKConfig+0x10e>
240086e6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
240086ea:	f43f af48 	beq.w	2400857e <HAL_RCCEx_PeriphCLKConfig+0x10e>
240086ee:	2601      	movs	r6, #1
240086f0:	4635      	mov	r5, r6
240086f2:	e74a      	b.n	2400858a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
240086f4:	2930      	cmp	r1, #48	; 0x30
240086f6:	f43f af59 	beq.w	240085ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
240086fa:	2601      	movs	r6, #1
240086fc:	4635      	mov	r5, r6
240086fe:	e761      	b.n	240085c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
24008700:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
24008704:	f43f af74 	beq.w	240085f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
24008708:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400870c:	f43f af70 	beq.w	240085f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
24008710:	2601      	movs	r6, #1
24008712:	4635      	mov	r5, r6
24008714:	e772      	b.n	240085fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
24008716:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
2400871a:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
2400871e:	d081      	beq.n	24008624 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
24008720:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
24008724:	f43f af7e 	beq.w	24008624 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
24008728:	2601      	movs	r6, #1
2400872a:	4635      	mov	r5, r6
2400872c:	e786      	b.n	2400863c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
2400872e:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
24008732:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24008736:	d094      	beq.n	24008662 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
24008738:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
2400873c:	d091      	beq.n	24008662 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
2400873e:	2601      	movs	r6, #1
24008740:	4635      	mov	r5, r6
24008742:	e79b      	b.n	2400867c <HAL_RCCEx_PeriphCLKConfig+0x20c>
24008744:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008748:	4a34      	ldr	r2, [pc, #208]	; (2400881c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
2400874a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400874c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008750:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008752:	2d00      	cmp	r5, #0
24008754:	f000 834a 	beq.w	24008dec <HAL_RCCEx_PeriphCLKConfig+0x97c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24008758:	462e      	mov	r6, r5
2400875a:	e9d4 3200 	ldrd	r3, r2, [r4]
2400875e:	0259      	lsls	r1, r3, #9
24008760:	f100 826f 	bmi.w	24008c42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008764:	07d8      	lsls	r0, r3, #31
24008766:	d52f      	bpl.n	240087c8 <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (PeriphClkInit->Usart16ClockSelection)
24008768:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
2400876a:	2928      	cmp	r1, #40	; 0x28
2400876c:	d82a      	bhi.n	240087c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
2400876e:	e8df f011 	tbh	[pc, r1, lsl #1]
24008772:	020d      	.short	0x020d
24008774:	00290029 	.word	0x00290029
24008778:	00290029 	.word	0x00290029
2400877c:	00290029 	.word	0x00290029
24008780:	02070029 	.word	0x02070029
24008784:	00290029 	.word	0x00290029
24008788:	00290029 	.word	0x00290029
2400878c:	00290029 	.word	0x00290029
24008790:	04500029 	.word	0x04500029
24008794:	00290029 	.word	0x00290029
24008798:	00290029 	.word	0x00290029
2400879c:	00290029 	.word	0x00290029
240087a0:	020d0029 	.word	0x020d0029
240087a4:	00290029 	.word	0x00290029
240087a8:	00290029 	.word	0x00290029
240087ac:	00290029 	.word	0x00290029
240087b0:	020d0029 	.word	0x020d0029
240087b4:	00290029 	.word	0x00290029
240087b8:	00290029 	.word	0x00290029
240087bc:	00290029 	.word	0x00290029
240087c0:	020d0029 	.word	0x020d0029
240087c4:	2601      	movs	r6, #1
240087c6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
240087c8:	0799      	lsls	r1, r3, #30
240087ca:	d517      	bpl.n	240087fc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    switch (PeriphClkInit->Usart234578ClockSelection)
240087cc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
240087ce:	2905      	cmp	r1, #5
240087d0:	f200 8465 	bhi.w	2400909e <HAL_RCCEx_PeriphCLKConfig+0xc2e>
240087d4:	e8df f011 	tbh	[pc, r1, lsl #1]
240087d8:	0006000c 	.word	0x0006000c
240087dc:	000c0412 	.word	0x000c0412
240087e0:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
240087e4:	2101      	movs	r1, #1
240087e6:	f104 0008 	add.w	r0, r4, #8
240087ea:	f7ff fd4d 	bl	24008288 <RCCEx_PLL2_Config>
240087ee:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240087f0:	2d00      	cmp	r5, #0
240087f2:	f000 82dd 	beq.w	24008db0 <HAL_RCCEx_PeriphCLKConfig+0x940>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
240087f6:	462e      	mov	r6, r5
240087f8:	e9d4 3200 	ldrd	r3, r2, [r4]
240087fc:	075f      	lsls	r7, r3, #29
240087fe:	d51b      	bpl.n	24008838 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24008800:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
24008804:	2905      	cmp	r1, #5
24008806:	f200 8446 	bhi.w	24009096 <HAL_RCCEx_PeriphCLKConfig+0xc26>
2400880a:	e8df f011 	tbh	[pc, r1, lsl #1]
2400880e:	000f      	.short	0x000f
24008810:	03ed0009 	.word	0x03ed0009
24008814:	000f000f 	.word	0x000f000f
24008818:	000f      	.short	0x000f
2400881a:	bf00      	nop
2400881c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008820:	2101      	movs	r1, #1
24008822:	f104 0008 	add.w	r0, r4, #8
24008826:	f7ff fd2f 	bl	24008288 <RCCEx_PLL2_Config>
2400882a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400882c:	2d00      	cmp	r5, #0
2400882e:	f000 82c9 	beq.w	24008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24008832:	462e      	mov	r6, r5
24008834:	e9d4 3200 	ldrd	r3, r2, [r4]
24008838:	0698      	lsls	r0, r3, #26
2400883a:	d51f      	bpl.n	2400887c <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim1ClockSelection)
2400883c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
24008840:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
24008844:	f000 8365 	beq.w	24008f12 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
24008848:	f200 811c 	bhi.w	24008a84 <HAL_RCCEx_PeriphCLKConfig+0x614>
2400884c:	b149      	cbz	r1, 24008862 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
2400884e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
24008852:	f040 8121 	bne.w	24008a98 <HAL_RCCEx_PeriphCLKConfig+0x628>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008856:	2100      	movs	r1, #0
24008858:	f104 0008 	add.w	r0, r4, #8
2400885c:	f7ff fd14 	bl	24008288 <RCCEx_PLL2_Config>
24008860:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008862:	2d00      	cmp	r5, #0
24008864:	f040 82b9 	bne.w	24008dda <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
24008868:	4ab0      	ldr	r2, [pc, #704]	; (24008b2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
2400886a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
2400886e:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008870:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
24008874:	430b      	orrs	r3, r1
24008876:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24008878:	e9d4 3200 	ldrd	r3, r2, [r4]
2400887c:	0659      	lsls	r1, r3, #25
2400887e:	d51f      	bpl.n	240088c0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim2ClockSelection)
24008880:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
24008884:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
24008888:	f000 8308 	beq.w	24008e9c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
2400888c:	f200 8107 	bhi.w	24008a9e <HAL_RCCEx_PeriphCLKConfig+0x62e>
24008890:	b149      	cbz	r1, 240088a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
24008892:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
24008896:	f040 810c 	bne.w	24008ab2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
2400889a:	2100      	movs	r1, #0
2400889c:	f104 0008 	add.w	r0, r4, #8
240088a0:	f7ff fcf2 	bl	24008288 <RCCEx_PLL2_Config>
240088a4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240088a6:	2d00      	cmp	r5, #0
240088a8:	f040 82b6 	bne.w	24008e18 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
240088ac:	4a9f      	ldr	r2, [pc, #636]	; (24008b2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
240088ae:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
240088b2:	6d93      	ldr	r3, [r2, #88]	; 0x58
240088b4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
240088b8:	430b      	orrs	r3, r1
240088ba:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
240088bc:	e9d4 3200 	ldrd	r3, r2, [r4]
240088c0:	061f      	lsls	r7, r3, #24
240088c2:	d51f      	bpl.n	24008904 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Lptim345ClockSelection)
240088c4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
240088c8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
240088cc:	f000 82f0 	beq.w	24008eb0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
240088d0:	f200 80f2 	bhi.w	24008ab8 <HAL_RCCEx_PeriphCLKConfig+0x648>
240088d4:	b149      	cbz	r1, 240088ea <HAL_RCCEx_PeriphCLKConfig+0x47a>
240088d6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
240088da:	f040 80f7 	bne.w	24008acc <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
240088de:	2100      	movs	r1, #0
240088e0:	f104 0008 	add.w	r0, r4, #8
240088e4:	f7ff fcd0 	bl	24008288 <RCCEx_PLL2_Config>
240088e8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
240088ea:	2d00      	cmp	r5, #0
240088ec:	f040 828c 	bne.w	24008e08 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
240088f0:	4a8e      	ldr	r2, [pc, #568]	; (24008b2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
240088f2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
240088f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
240088f8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
240088fc:	430b      	orrs	r3, r1
240088fe:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24008900:	e9d4 3200 	ldrd	r3, r2, [r4]
24008904:	0718      	lsls	r0, r3, #28
24008906:	d50d      	bpl.n	24008924 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
24008908:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
2400890c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
24008910:	f000 8313 	beq.w	24008f3a <HAL_RCCEx_PeriphCLKConfig+0xaca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24008914:	4985      	ldr	r1, [pc, #532]	; (24008b2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008916:	6d4b      	ldr	r3, [r1, #84]	; 0x54
24008918:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
2400891c:	4313      	orrs	r3, r2
2400891e:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24008920:	e9d4 3200 	ldrd	r3, r2, [r4]
24008924:	06d9      	lsls	r1, r3, #27
24008926:	d50d      	bpl.n	24008944 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
24008928:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
2400892c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
24008930:	f000 830f 	beq.w	24008f52 <HAL_RCCEx_PeriphCLKConfig+0xae2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24008934:	497d      	ldr	r1, [pc, #500]	; (24008b2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008936:	6d8b      	ldr	r3, [r1, #88]	; 0x58
24008938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2400893c:	4313      	orrs	r3, r2
2400893e:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
24008940:	e9d4 3200 	ldrd	r3, r2, [r4]
24008944:	031f      	lsls	r7, r3, #12
24008946:	d50e      	bpl.n	24008966 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    switch (PeriphClkInit->AdcClockSelection)
24008948:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
2400894c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
24008950:	f000 8102 	beq.w	24008b58 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
24008954:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
24008958:	f000 8104 	beq.w	24008b64 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
2400895c:	2900      	cmp	r1, #0
2400895e:	f000 8292 	beq.w	24008e86 <HAL_RCCEx_PeriphCLKConfig+0xa16>
24008962:	2601      	movs	r6, #1
24008964:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24008966:	0358      	lsls	r0, r3, #13
24008968:	d50f      	bpl.n	2400898a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch (PeriphClkInit->UsbClockSelection)
2400896a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
2400896e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
24008972:	f000 80dd 	beq.w	24008b30 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
24008976:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
2400897a:	f000 80df 	beq.w	24008b3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
2400897e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
24008982:	f000 8277 	beq.w	24008e74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
24008986:	2601      	movs	r6, #1
24008988:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
2400898a:	03d9      	lsls	r1, r3, #15
2400898c:	d509      	bpl.n	240089a2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    switch (PeriphClkInit->SdmmcClockSelection)
2400898e:	6d21      	ldr	r1, [r4, #80]	; 0x50
24008990:	2900      	cmp	r1, #0
24008992:	f000 825a 	beq.w	24008e4a <HAL_RCCEx_PeriphCLKConfig+0x9da>
24008996:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
2400899a:	f000 81da 	beq.w	24008d52 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
2400899e:	2601      	movs	r6, #1
240089a0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
240089a2:	009f      	lsls	r7, r3, #2
240089a4:	f100 80ff 	bmi.w	24008ba6 <HAL_RCCEx_PeriphCLKConfig+0x736>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
240089a8:	0398      	lsls	r0, r3, #14
240089aa:	d50e      	bpl.n	240089ca <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->RngClockSelection)
240089ac:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
240089b0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
240089b4:	f000 8240 	beq.w	24008e38 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
240089b8:	f240 808b 	bls.w	24008ad2 <HAL_RCCEx_PeriphCLKConfig+0x662>
240089bc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
240089c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
240089c4:	f000 8088 	beq.w	24008ad8 <HAL_RCCEx_PeriphCLKConfig+0x668>
240089c8:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
240089ca:	02d9      	lsls	r1, r3, #11
240089cc:	d508      	bpl.n	240089e0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
240089ce:	4a57      	ldr	r2, [pc, #348]	; (24008b2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
240089d0:	6f61      	ldr	r1, [r4, #116]	; 0x74
240089d2:	6d13      	ldr	r3, [r2, #80]	; 0x50
240089d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
240089d8:	430b      	orrs	r3, r1
240089da:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
240089dc:	e9d4 3200 	ldrd	r3, r2, [r4]
240089e0:	00df      	lsls	r7, r3, #3
240089e2:	d509      	bpl.n	240089f8 <HAL_RCCEx_PeriphCLKConfig+0x588>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
240089e4:	4a51      	ldr	r2, [pc, #324]	; (24008b2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
240089e6:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
240089ea:	6913      	ldr	r3, [r2, #16]
240089ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
240089f0:	430b      	orrs	r3, r1
240089f2:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
240089f4:	e9d4 3200 	ldrd	r3, r2, [r4]
240089f8:	029d      	lsls	r5, r3, #10
240089fa:	d508      	bpl.n	24008a0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
240089fc:	4a4b      	ldr	r2, [pc, #300]	; (24008b2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
240089fe:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
24008a00:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24008a06:	430b      	orrs	r3, r1
24008a08:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
24008a0a:	e9d4 3200 	ldrd	r3, r2, [r4]
24008a0e:	0058      	lsls	r0, r3, #1
24008a10:	d50b      	bpl.n	24008a2a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
24008a12:	4b46      	ldr	r3, [pc, #280]	; (24008b2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008a14:	691a      	ldr	r2, [r3, #16]
24008a16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
24008a1a:	611a      	str	r2, [r3, #16]
24008a1c:	691a      	ldr	r2, [r3, #16]
24008a1e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
24008a22:	430a      	orrs	r2, r1
24008a24:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
24008a26:	e9d4 3200 	ldrd	r3, r2, [r4]
24008a2a:	2b00      	cmp	r3, #0
24008a2c:	da08      	bge.n	24008a40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
24008a2e:	4a3f      	ldr	r2, [pc, #252]	; (24008b2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008a30:	6d61      	ldr	r1, [r4, #84]	; 0x54
24008a32:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008a34:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
24008a38:	430b      	orrs	r3, r1
24008a3a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
24008a3c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008a40:	0219      	lsls	r1, r3, #8
24008a42:	d508      	bpl.n	24008a56 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
24008a44:	4a39      	ldr	r2, [pc, #228]	; (24008b2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008a46:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
24008a4a:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008a4c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
24008a50:	430b      	orrs	r3, r1
24008a52:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
24008a54:	6862      	ldr	r2, [r4, #4]
24008a56:	07d3      	lsls	r3, r2, #31
24008a58:	f100 80b1 	bmi.w	24008bbe <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24008a5c:	0797      	lsls	r7, r2, #30
24008a5e:	f100 80bb 	bmi.w	24008bd8 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24008a62:	0755      	lsls	r5, r2, #29
24008a64:	f100 80c5 	bmi.w	24008bf2 <HAL_RCCEx_PeriphCLKConfig+0x782>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24008a68:	0710      	lsls	r0, r2, #28
24008a6a:	f100 80cf 	bmi.w	24008c0c <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24008a6e:	06d1      	lsls	r1, r2, #27
24008a70:	f100 80d9 	bmi.w	24008c26 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24008a74:	0692      	lsls	r2, r2, #26
24008a76:	f100 812a 	bmi.w	24008cce <HAL_RCCEx_PeriphCLKConfig+0x85e>
    return HAL_OK;
24008a7a:	1e30      	subs	r0, r6, #0
24008a7c:	bf18      	it	ne
24008a7e:	2001      	movne	r0, #1
}
24008a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
24008a84:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
24008a88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
24008a8c:	f43f aee9 	beq.w	24008862 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
24008a90:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
24008a94:	f43f aee5 	beq.w	24008862 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
24008a98:	2601      	movs	r6, #1
24008a9a:	4635      	mov	r5, r6
24008a9c:	e6ee      	b.n	2400887c <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim2ClockSelection)
24008a9e:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
24008aa2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
24008aa6:	f43f aefe 	beq.w	240088a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
24008aaa:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
24008aae:	f43f aefa 	beq.w	240088a6 <HAL_RCCEx_PeriphCLKConfig+0x436>
24008ab2:	2601      	movs	r6, #1
24008ab4:	4635      	mov	r5, r6
24008ab6:	e703      	b.n	240088c0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim345ClockSelection)
24008ab8:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
24008abc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
24008ac0:	f43f af13 	beq.w	240088ea <HAL_RCCEx_PeriphCLKConfig+0x47a>
24008ac4:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
24008ac8:	f43f af0f 	beq.w	240088ea <HAL_RCCEx_PeriphCLKConfig+0x47a>
24008acc:	2601      	movs	r6, #1
24008ace:	4635      	mov	r5, r6
24008ad0:	e718      	b.n	24008904 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->RngClockSelection)
24008ad2:	2900      	cmp	r1, #0
24008ad4:	f47f af78 	bne.w	240089c8 <HAL_RCCEx_PeriphCLKConfig+0x558>
    if (ret == HAL_OK)
24008ad8:	2d00      	cmp	r5, #0
24008ada:	f040 81c7 	bne.w	24008e6c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
24008ade:	4a13      	ldr	r2, [pc, #76]	; (24008b2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008ae0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
24008ae4:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24008aea:	430b      	orrs	r3, r1
24008aec:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24008aee:	e9d4 3200 	ldrd	r3, r2, [r4]
24008af2:	e76a      	b.n	240089ca <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->Sai1ClockSelection)
24008af4:	4635      	mov	r5, r6
    if (ret == HAL_OK)
24008af6:	2d00      	cmp	r5, #0
24008af8:	f000 8114 	beq.w	24008d24 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24008afc:	462e      	mov	r6, r5
24008afe:	e9d4 3200 	ldrd	r3, r2, [r4]
24008b02:	e4ee      	b.n	240084e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008b04:	2101      	movs	r1, #1
24008b06:	f104 0008 	add.w	r0, r4, #8
24008b0a:	f7ff fbbd 	bl	24008288 <RCCEx_PLL2_Config>
24008b0e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008b10:	2d00      	cmp	r5, #0
24008b12:	f040 8149 	bne.w	24008da8 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
24008b16:	4a05      	ldr	r2, [pc, #20]	; (24008b2c <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
24008b18:	6f21      	ldr	r1, [r4, #112]	; 0x70
24008b1a:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008b1c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
24008b20:	430b      	orrs	r3, r1
24008b22:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24008b24:	e9d4 3200 	ldrd	r3, r2, [r4]
24008b28:	e5b8      	b.n	2400869c <HAL_RCCEx_PeriphCLKConfig+0x22c>
24008b2a:	bf00      	nop
24008b2c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008b30:	2101      	movs	r1, #1
24008b32:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008b36:	f7ff fc21 	bl	2400837c <RCCEx_PLL3_Config>
24008b3a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008b3c:	2d00      	cmp	r5, #0
24008b3e:	f040 8173 	bne.w	24008e28 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
24008b42:	4abb      	ldr	r2, [pc, #748]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008b44:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
24008b48:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008b4a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
24008b4e:	430b      	orrs	r3, r1
24008b50:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24008b52:	e9d4 3200 	ldrd	r3, r2, [r4]
24008b56:	e718      	b.n	2400898a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008b58:	2102      	movs	r1, #2
24008b5a:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008b5e:	f7ff fc0d 	bl	2400837c <RCCEx_PLL3_Config>
24008b62:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008b64:	2d00      	cmp	r5, #0
24008b66:	f040 815b 	bne.w	24008e20 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
24008b6a:	4ab1      	ldr	r2, [pc, #708]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008b6c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
24008b70:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008b72:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
24008b76:	430b      	orrs	r3, r1
24008b78:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24008b7a:	e9d4 3200 	ldrd	r3, r2, [r4]
24008b7e:	e6f2      	b.n	24008966 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008b80:	2101      	movs	r1, #1
24008b82:	f104 0008 	add.w	r0, r4, #8
24008b86:	f7ff fb7f 	bl	24008288 <RCCEx_PLL2_Config>
24008b8a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008b8c:	2d00      	cmp	r5, #0
24008b8e:	f040 8107 	bne.w	24008da0 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24008b92:	4aa7      	ldr	r2, [pc, #668]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008b94:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
24008b96:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008b98:	f023 0338 	bic.w	r3, r3, #56	; 0x38
24008b9c:	430b      	orrs	r3, r1
24008b9e:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24008ba0:	e9d4 3200 	ldrd	r3, r2, [r4]
24008ba4:	e610      	b.n	240087c8 <HAL_RCCEx_PeriphCLKConfig+0x358>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008ba6:	2102      	movs	r1, #2
24008ba8:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008bac:	f7ff fbe6 	bl	2400837c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
24008bb0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008bb4:	2800      	cmp	r0, #0
24008bb6:	f43f aef7 	beq.w	240089a8 <HAL_RCCEx_PeriphCLKConfig+0x538>
      status = HAL_ERROR;
24008bba:	2601      	movs	r6, #1
24008bbc:	e6f4      	b.n	240089a8 <HAL_RCCEx_PeriphCLKConfig+0x538>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008bbe:	2100      	movs	r1, #0
24008bc0:	f104 0008 	add.w	r0, r4, #8
24008bc4:	f7ff fb60 	bl	24008288 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24008bc8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24008bca:	2800      	cmp	r0, #0
24008bcc:	f43f af46 	beq.w	24008a5c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
24008bd0:	0797      	lsls	r7, r2, #30
24008bd2:	4606      	mov	r6, r0
24008bd4:	f57f af45 	bpl.w	24008a62 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
24008bd8:	2101      	movs	r1, #1
24008bda:	f104 0008 	add.w	r0, r4, #8
24008bde:	f7ff fb53 	bl	24008288 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24008be2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24008be4:	2800      	cmp	r0, #0
24008be6:	f43f af3c 	beq.w	24008a62 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
24008bea:	0755      	lsls	r5, r2, #29
24008bec:	4606      	mov	r6, r0
24008bee:	f57f af3b 	bpl.w	24008a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008bf2:	2102      	movs	r1, #2
24008bf4:	f104 0008 	add.w	r0, r4, #8
24008bf8:	f7ff fb46 	bl	24008288 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24008bfc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24008bfe:	2800      	cmp	r0, #0
24008c00:	f43f af32 	beq.w	24008a68 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
24008c04:	4606      	mov	r6, r0
24008c06:	0710      	lsls	r0, r2, #28
24008c08:	f57f af31 	bpl.w	24008a6e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008c0c:	2100      	movs	r1, #0
24008c0e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008c12:	f7ff fbb3 	bl	2400837c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24008c16:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
24008c18:	2800      	cmp	r0, #0
24008c1a:	f43f af28 	beq.w	24008a6e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
24008c1e:	06d1      	lsls	r1, r2, #27
24008c20:	4606      	mov	r6, r0
24008c22:	f57f af27 	bpl.w	24008a74 <HAL_RCCEx_PeriphCLKConfig+0x604>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008c26:	f104 0528 	add.w	r5, r4, #40	; 0x28
24008c2a:	2101      	movs	r1, #1
24008c2c:	4628      	mov	r0, r5
24008c2e:	f7ff fba5 	bl	2400837c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24008c32:	2800      	cmp	r0, #0
24008c34:	f000 8130 	beq.w	24008e98 <HAL_RCCEx_PeriphCLKConfig+0xa28>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24008c38:	6863      	ldr	r3, [r4, #4]
24008c3a:	069b      	lsls	r3, r3, #26
24008c3c:	d550      	bpl.n	24008ce0 <HAL_RCCEx_PeriphCLKConfig+0x870>
24008c3e:	4606      	mov	r6, r0
24008c40:	e047      	b.n	24008cd2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
24008c42:	4f7c      	ldr	r7, [pc, #496]	; (24008e34 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
24008c44:	683b      	ldr	r3, [r7, #0]
24008c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24008c4a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
24008c4c:	f7fb fe0c 	bl	24004868 <HAL_GetTick>
24008c50:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24008c52:	e006      	b.n	24008c62 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24008c54:	f7fb fe08 	bl	24004868 <HAL_GetTick>
24008c58:	eba0 0008 	sub.w	r0, r0, r8
24008c5c:	2864      	cmp	r0, #100	; 0x64
24008c5e:	f200 81e2 	bhi.w	24009026 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
24008c62:	683b      	ldr	r3, [r7, #0]
24008c64:	05da      	lsls	r2, r3, #23
24008c66:	d5f5      	bpl.n	24008c54 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    if (ret == HAL_OK)
24008c68:	2d00      	cmp	r5, #0
24008c6a:	f040 820b 	bne.w	24009084 <HAL_RCCEx_PeriphCLKConfig+0xc14>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
24008c6e:	4b70      	ldr	r3, [pc, #448]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008c70:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
24008c74:	6f19      	ldr	r1, [r3, #112]	; 0x70
24008c76:	4051      	eors	r1, r2
24008c78:	f411 7f40 	tst.w	r1, #768	; 0x300
24008c7c:	d00d      	beq.n	24008c9a <HAL_RCCEx_PeriphCLKConfig+0x82a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24008c7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
24008c80:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24008c82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
24008c86:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
24008c8a:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
24008c8c:	6f19      	ldr	r1, [r3, #112]	; 0x70
24008c8e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
24008c92:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
24008c94:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
24008c96:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
24008c9a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
24008c9e:	f000 81d3 	beq.w	24009048 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24008ca2:	f402 7340 	and.w	r3, r2, #768	; 0x300
24008ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
24008caa:	f000 81e1 	beq.w	24009070 <HAL_RCCEx_PeriphCLKConfig+0xc00>
24008cae:	4a60      	ldr	r2, [pc, #384]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008cb0:	6913      	ldr	r3, [r2, #16]
24008cb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
24008cb6:	6113      	str	r3, [r2, #16]
24008cb8:	4a5d      	ldr	r2, [pc, #372]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008cba:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
24008cbe:	6f11      	ldr	r1, [r2, #112]	; 0x70
24008cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
24008cc4:	430b      	orrs	r3, r1
24008cc6:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008cc8:	e9d4 3200 	ldrd	r3, r2, [r4]
24008ccc:	e54a      	b.n	24008764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008cce:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008cd2:	2102      	movs	r1, #2
24008cd4:	4628      	mov	r0, r5
24008cd6:	f7ff fb51 	bl	2400837c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
24008cda:	2800      	cmp	r0, #0
24008cdc:	f43f aecd 	beq.w	24008a7a <HAL_RCCEx_PeriphCLKConfig+0x60a>
  return HAL_ERROR;
24008ce0:	2001      	movs	r0, #1
}
24008ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
24008ce6:	4a52      	ldr	r2, [pc, #328]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008ce8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
24008cec:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008cee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
24008cf2:	430b      	orrs	r3, r1
24008cf4:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
24008cf6:	e9d4 3200 	ldrd	r3, r2, [r4]
24008cfa:	e446      	b.n	2400858a <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
24008cfc:	4a4c      	ldr	r2, [pc, #304]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008cfe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
24008d00:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008d02:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
24008d06:	430b      	orrs	r3, r1
24008d08:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
24008d0a:	e9d4 3200 	ldrd	r3, r2, [r4]
24008d0e:	e402      	b.n	24008516 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
24008d10:	4a47      	ldr	r2, [pc, #284]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008d12:	6e21      	ldr	r1, [r4, #96]	; 0x60
24008d14:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
24008d1a:	430b      	orrs	r3, r1
24008d1c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
24008d1e:	e9d4 3200 	ldrd	r3, r2, [r4]
24008d22:	e46b      	b.n	240085fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
24008d24:	4a42      	ldr	r2, [pc, #264]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008d26:	6da1      	ldr	r1, [r4, #88]	; 0x58
24008d28:	6d13      	ldr	r3, [r2, #80]	; 0x50
24008d2a:	f023 0307 	bic.w	r3, r3, #7
24008d2e:	430b      	orrs	r3, r1
24008d30:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
24008d32:	e9d4 3200 	ldrd	r3, r2, [r4]
24008d36:	f7ff bbd4 	b.w	240084e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
24008d3a:	4a3d      	ldr	r2, [pc, #244]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008d3c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
24008d40:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008d42:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
24008d46:	430b      	orrs	r3, r1
24008d48:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
24008d4a:	e9d4 3200 	ldrd	r3, r2, [r4]
24008d4e:	f7ff bbff 	b.w	24008550 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008d52:	2102      	movs	r1, #2
24008d54:	f104 0008 	add.w	r0, r4, #8
24008d58:	f7ff fa96 	bl	24008288 <RCCEx_PLL2_Config>
24008d5c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008d5e:	2d00      	cmp	r5, #0
24008d60:	d07a      	beq.n	24008e58 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24008d62:	462e      	mov	r6, r5
24008d64:	e9d4 3200 	ldrd	r3, r2, [r4]
24008d68:	e61b      	b.n	240089a2 <HAL_RCCEx_PeriphCLKConfig+0x532>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008d6a:	4a31      	ldr	r2, [pc, #196]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008d6c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008d72:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008d74:	e43c      	b.n	240085f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008d76:	4a2e      	ldr	r2, [pc, #184]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008d78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008d80:	f7ff bbfd 	b.w	2400857e <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008d84:	4a2a      	ldr	r2, [pc, #168]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008d86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008d8c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008d8e:	f7ff bbbc 	b.w	2400850a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008d92:	4a27      	ldr	r2, [pc, #156]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008d94:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008d9a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008d9c:	f7ff bbd2 	b.w	24008544 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24008da0:	e9d4 3200 	ldrd	r3, r2, [r4]
24008da4:	462e      	mov	r6, r5
24008da6:	e50f      	b.n	240087c8 <HAL_RCCEx_PeriphCLKConfig+0x358>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24008da8:	e9d4 3200 	ldrd	r3, r2, [r4]
24008dac:	462e      	mov	r6, r5
24008dae:	e475      	b.n	2400869c <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
24008db0:	4a1f      	ldr	r2, [pc, #124]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008db2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
24008db4:	6d53      	ldr	r3, [r2, #84]	; 0x54
24008db6:	f023 0307 	bic.w	r3, r3, #7
24008dba:	430b      	orrs	r3, r1
24008dbc:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24008dbe:	e9d4 3200 	ldrd	r3, r2, [r4]
24008dc2:	e51b      	b.n	240087fc <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
24008dc4:	4a1a      	ldr	r2, [pc, #104]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008dc6:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
24008dca:	6d93      	ldr	r3, [r2, #88]	; 0x58
24008dcc:	f023 0307 	bic.w	r3, r3, #7
24008dd0:	430b      	orrs	r3, r1
24008dd2:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24008dd4:	e9d4 3200 	ldrd	r3, r2, [r4]
24008dd8:	e52e      	b.n	24008838 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24008dda:	e9d4 3200 	ldrd	r3, r2, [r4]
24008dde:	462e      	mov	r6, r5
24008de0:	e54c      	b.n	2400887c <HAL_RCCEx_PeriphCLKConfig+0x40c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
24008de2:	e9d4 3200 	ldrd	r3, r2, [r4]
24008de6:	462e      	mov	r6, r5
24008de8:	f7ff bbec 	b.w	240085c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
24008dec:	4a10      	ldr	r2, [pc, #64]	; (24008e30 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
24008dee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
24008df0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008df2:	f023 0303 	bic.w	r3, r3, #3
24008df6:	430b      	orrs	r3, r1
24008df8:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24008dfa:	e9d4 3200 	ldrd	r3, r2, [r4]
24008dfe:	e4ae      	b.n	2400875e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24008e00:	e9d4 3200 	ldrd	r3, r2, [r4]
24008e04:	462e      	mov	r6, r5
24008e06:	e419      	b.n	2400863c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
24008e08:	e9d4 3200 	ldrd	r3, r2, [r4]
24008e0c:	462e      	mov	r6, r5
24008e0e:	e579      	b.n	24008904 <HAL_RCCEx_PeriphCLKConfig+0x494>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24008e10:	e9d4 3200 	ldrd	r3, r2, [r4]
24008e14:	462e      	mov	r6, r5
24008e16:	e431      	b.n	2400867c <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
24008e18:	e9d4 3200 	ldrd	r3, r2, [r4]
24008e1c:	462e      	mov	r6, r5
24008e1e:	e54f      	b.n	240088c0 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
24008e20:	e9d4 3200 	ldrd	r3, r2, [r4]
24008e24:	462e      	mov	r6, r5
24008e26:	e59e      	b.n	24008966 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24008e28:	e9d4 3200 	ldrd	r3, r2, [r4]
24008e2c:	462e      	mov	r6, r5
24008e2e:	e5ac      	b.n	2400898a <HAL_RCCEx_PeriphCLKConfig+0x51a>
24008e30:	58024400 	.word	0x58024400
24008e34:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008e38:	4a9b      	ldr	r2, [pc, #620]	; (240090a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24008e3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008e40:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008e42:	2d00      	cmp	r5, #0
24008e44:	f43f ae4b 	beq.w	24008ade <HAL_RCCEx_PeriphCLKConfig+0x66e>
24008e48:	e010      	b.n	24008e6c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008e4a:	4a97      	ldr	r2, [pc, #604]	; (240090a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24008e4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008e52:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008e54:	2d00      	cmp	r5, #0
24008e56:	d184      	bne.n	24008d62 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
24008e58:	4a93      	ldr	r2, [pc, #588]	; (240090a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24008e5a:	6d21      	ldr	r1, [r4, #80]	; 0x50
24008e5c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24008e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24008e62:	430b      	orrs	r3, r1
24008e64:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
24008e66:	e9d4 3200 	ldrd	r3, r2, [r4]
24008e6a:	e59a      	b.n	240089a2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24008e6c:	e9d4 3200 	ldrd	r3, r2, [r4]
24008e70:	462e      	mov	r6, r5
24008e72:	e5aa      	b.n	240089ca <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008e74:	4a8c      	ldr	r2, [pc, #560]	; (240090a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24008e76:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008e7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008e7e:	2d00      	cmp	r5, #0
24008e80:	f43f ae5f 	beq.w	24008b42 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
24008e84:	e7d0      	b.n	24008e28 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008e86:	f104 0008 	add.w	r0, r4, #8
24008e8a:	f7ff f9fd 	bl	24008288 <RCCEx_PLL2_Config>
24008e8e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008e90:	2d00      	cmp	r5, #0
24008e92:	f43f ae6a 	beq.w	24008b6a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
24008e96:	e7c3      	b.n	24008e20 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
24008e98:	6862      	ldr	r2, [r4, #4]
24008e9a:	e5eb      	b.n	24008a74 <HAL_RCCEx_PeriphCLKConfig+0x604>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008e9c:	2102      	movs	r1, #2
24008e9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008ea2:	f7ff fa6b 	bl	2400837c <RCCEx_PLL3_Config>
24008ea6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008ea8:	2d00      	cmp	r5, #0
24008eaa:	f43f acff 	beq.w	240088ac <HAL_RCCEx_PeriphCLKConfig+0x43c>
24008eae:	e7b3      	b.n	24008e18 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008eb0:	2102      	movs	r1, #2
24008eb2:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008eb6:	f7ff fa61 	bl	2400837c <RCCEx_PLL3_Config>
24008eba:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008ebc:	2d00      	cmp	r5, #0
24008ebe:	f43f ad17 	beq.w	240088f0 <HAL_RCCEx_PeriphCLKConfig+0x480>
24008ec2:	e7a1      	b.n	24008e08 <HAL_RCCEx_PeriphCLKConfig+0x998>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008ec4:	4a78      	ldr	r2, [pc, #480]	; (240090a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24008ec6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008ecc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
24008ece:	2d00      	cmp	r5, #0
24008ed0:	f43f ae21 	beq.w	24008b16 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
24008ed4:	e768      	b.n	24008da8 <HAL_RCCEx_PeriphCLKConfig+0x938>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008ed6:	2101      	movs	r1, #1
24008ed8:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008edc:	f7ff fa4e 	bl	2400837c <RCCEx_PLL3_Config>
24008ee0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008ee2:	2d00      	cmp	r5, #0
24008ee4:	f43f aba1 	beq.w	2400862a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
24008ee8:	e78a      	b.n	24008e00 <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008eea:	2101      	movs	r1, #1
24008eec:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008ef0:	f7ff fa44 	bl	2400837c <RCCEx_PLL3_Config>
24008ef4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008ef6:	2d00      	cmp	r5, #0
24008ef8:	f43f abb6 	beq.w	24008668 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
24008efc:	e788      	b.n	24008e10 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008efe:	2102      	movs	r1, #2
24008f00:	f104 0008 	add.w	r0, r4, #8
24008f04:	f7ff f9c0 	bl	24008288 <RCCEx_PLL2_Config>
24008f08:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008f0a:	2d00      	cmp	r5, #0
24008f0c:	f43f ab51 	beq.w	240085b2 <HAL_RCCEx_PeriphCLKConfig+0x142>
24008f10:	e767      	b.n	24008de2 <HAL_RCCEx_PeriphCLKConfig+0x972>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008f12:	2102      	movs	r1, #2
24008f14:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008f18:	f7ff fa30 	bl	2400837c <RCCEx_PLL3_Config>
24008f1c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008f1e:	2d00      	cmp	r5, #0
24008f20:	f43f aca2 	beq.w	24008868 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
24008f24:	e759      	b.n	24008dda <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
24008f26:	2102      	movs	r1, #2
24008f28:	f104 0008 	add.w	r0, r4, #8
24008f2c:	f7ff f9ac 	bl	24008288 <RCCEx_PLL2_Config>
24008f30:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008f32:	2d00      	cmp	r5, #0
24008f34:	f43f af5a 	beq.w	24008dec <HAL_RCCEx_PeriphCLKConfig+0x97c>
24008f38:	e40e      	b.n	24008758 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008f3a:	2102      	movs	r1, #2
24008f3c:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008f40:	f7ff fa1c 	bl	2400837c <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24008f44:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008f48:	2800      	cmp	r0, #0
24008f4a:	f43f ace3 	beq.w	24008914 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        status = HAL_ERROR;
24008f4e:	2601      	movs	r6, #1
24008f50:	e4e0      	b.n	24008914 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008f52:	2102      	movs	r1, #2
24008f54:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008f58:	f7ff fa10 	bl	2400837c <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24008f5c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
24008f60:	2800      	cmp	r0, #0
24008f62:	f43f ace7 	beq.w	24008934 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        status = HAL_ERROR;
24008f66:	2601      	movs	r6, #1
24008f68:	e4e4      	b.n	24008934 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008f6a:	2100      	movs	r1, #0
24008f6c:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008f70:	f7ff fa04 	bl	2400837c <RCCEx_PLL3_Config>
24008f74:	4605      	mov	r5, r0
        break;
24008f76:	f7ff bae5 	b.w	24008544 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
24008f7a:	2102      	movs	r1, #2
24008f7c:	3028      	adds	r0, #40	; 0x28
24008f7e:	f7ff f9fd 	bl	2400837c <RCCEx_PLL3_Config>
24008f82:	4606      	mov	r6, r0
    if (ret == HAL_OK)
24008f84:	2e00      	cmp	r6, #0
24008f86:	f43f aa8f 	beq.w	240084a8 <HAL_RCCEx_PeriphCLKConfig+0x38>
24008f8a:	f7ff ba9a 	b.w	240084c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008f8e:	4a46      	ldr	r2, [pc, #280]	; (240090a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
        break;
24008f90:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008f92:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
24008f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008f98:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
24008f9a:	e5ac      	b.n	24008af6 <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
24008f9c:	2100      	movs	r1, #0
24008f9e:	f104 0008 	add.w	r0, r4, #8
24008fa2:	f7ff f971 	bl	24008288 <RCCEx_PLL2_Config>
24008fa6:	4605      	mov	r5, r0
        break;
24008fa8:	e5a5      	b.n	24008af6 <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008faa:	2100      	movs	r1, #0
24008fac:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008fb0:	f7ff f9e4 	bl	2400837c <RCCEx_PLL3_Config>
24008fb4:	4605      	mov	r5, r0
        break;
24008fb6:	f7ff bb1b 	b.w	240085f0 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008fba:	2100      	movs	r1, #0
24008fbc:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008fc0:	f7ff f9dc 	bl	2400837c <RCCEx_PLL3_Config>
24008fc4:	4605      	mov	r5, r0
        break;
24008fc6:	f7ff bada 	b.w	2400857e <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008fca:	2100      	movs	r1, #0
24008fcc:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008fd0:	f7ff f9d4 	bl	2400837c <RCCEx_PLL3_Config>
24008fd4:	4605      	mov	r5, r0
        break;
24008fd6:	e58e      	b.n	24008af6 <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
24008fd8:	2100      	movs	r1, #0
24008fda:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008fde:	f7ff f9cd 	bl	2400837c <RCCEx_PLL3_Config>
24008fe2:	4605      	mov	r5, r0
        break;
24008fe4:	f7ff ba91 	b.w	2400850a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008fe8:	2101      	movs	r1, #1
24008fea:	f104 0028 	add.w	r0, r4, #40	; 0x28
24008fee:	f7ff f9c5 	bl	2400837c <RCCEx_PLL3_Config>
24008ff2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24008ff4:	2d00      	cmp	r5, #0
24008ff6:	f43f aee5 	beq.w	24008dc4 <HAL_RCCEx_PeriphCLKConfig+0x954>
24008ffa:	e41a      	b.n	24008832 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24008ffc:	2101      	movs	r1, #1
24008ffe:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009002:	f7ff f9bb 	bl	2400837c <RCCEx_PLL3_Config>
24009006:	4605      	mov	r5, r0
    if (ret == HAL_OK)
24009008:	2d00      	cmp	r5, #0
2400900a:	f43f aed1 	beq.w	24008db0 <HAL_RCCEx_PeriphCLKConfig+0x940>
2400900e:	f7ff bbf2 	b.w	240087f6 <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
24009012:	2101      	movs	r1, #1
24009014:	f104 0028 	add.w	r0, r4, #40	; 0x28
24009018:	f7ff f9b0 	bl	2400837c <RCCEx_PLL3_Config>
2400901c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
2400901e:	2d00      	cmp	r5, #0
24009020:	f43f adb7 	beq.w	24008b92 <HAL_RCCEx_PeriphCLKConfig+0x722>
24009024:	e6bc      	b.n	24008da0 <HAL_RCCEx_PeriphCLKConfig+0x930>
        status = ret;
24009026:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24009028:	e9d4 3200 	ldrd	r3, r2, [r4]
2400902c:	4635      	mov	r5, r6
2400902e:	f7ff bb99 	b.w	24008764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->SpdifrxClockSelection)
24009032:	2601      	movs	r6, #1
24009034:	f7ff ba47 	b.w	240084c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009038:	4a1b      	ldr	r2, [pc, #108]	; (240090a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
2400903a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
2400903c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009040:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
24009042:	6e81      	ldr	r1, [r0, #104]	; 0x68
24009044:	f7ff ba36 	b.w	240084b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
24009048:	f7fb fc0e 	bl	24004868 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
2400904c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 240090a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
        tickstart = HAL_GetTick();
24009050:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24009052:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24009056:	e004      	b.n	24009062 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24009058:	f7fb fc06 	bl	24004868 <HAL_GetTick>
2400905c:	1bc0      	subs	r0, r0, r7
2400905e:	4548      	cmp	r0, r9
24009060:	d8e1      	bhi.n	24009026 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24009062:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
24009066:	079b      	lsls	r3, r3, #30
24009068:	d5f6      	bpl.n	24009058 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2400906a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
2400906e:	e618      	b.n	24008ca2 <HAL_RCCEx_PeriphCLKConfig+0x832>
24009070:	490d      	ldr	r1, [pc, #52]	; (240090a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
24009072:	4b0e      	ldr	r3, [pc, #56]	; (240090ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>)
24009074:	ea03 1312 	and.w	r3, r3, r2, lsr #4
24009078:	690a      	ldr	r2, [r1, #16]
2400907a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
2400907e:	4313      	orrs	r3, r2
24009080:	610b      	str	r3, [r1, #16]
24009082:	e619      	b.n	24008cb8 <HAL_RCCEx_PeriphCLKConfig+0x848>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24009084:	e9d4 3200 	ldrd	r3, r2, [r4]
24009088:	462e      	mov	r6, r5
2400908a:	f7ff bb6b 	b.w	24008764 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->FmcClockSelection)
2400908e:	2601      	movs	r6, #1
24009090:	4635      	mov	r5, r6
24009092:	f7ff bb64 	b.w	2400875e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
24009096:	2601      	movs	r6, #1
24009098:	4635      	mov	r5, r6
2400909a:	f7ff bbcd 	b.w	24008838 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
2400909e:	2601      	movs	r6, #1
240090a0:	4635      	mov	r5, r6
240090a2:	f7ff bbab 	b.w	240087fc <HAL_RCCEx_PeriphCLKConfig+0x38c>
240090a6:	bf00      	nop
240090a8:	58024400 	.word	0x58024400
240090ac:	00ffffcf 	.word	0x00ffffcf

240090b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240090b0:	4a50      	ldr	r2, [pc, #320]	; (240091f4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
240090b2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240090b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
240090b6:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
240090b8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
240090ba:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
240090be:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
240090c2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
240090c4:	d05d      	beq.n	24009182 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
240090c6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
240090ca:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240090ce:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
240090d2:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
240090d6:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
240090d8:	ee07 4a90 	vmov	s15, r4
240090dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
240090e0:	d003      	beq.n	240090ea <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
240090e2:	2902      	cmp	r1, #2
240090e4:	d078      	beq.n	240091d8 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
240090e6:	2900      	cmp	r1, #0
240090e8:	d050      	beq.n	2400918c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240090ea:	ee07 3a90 	vmov	s15, r3
240090ee:	ed9f 5a42 	vldr	s10, [pc, #264]	; 240091f8 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
240090f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240090f6:	6b93      	ldr	r3, [r2, #56]	; 0x38
240090f8:	eec5 6a27 	vdiv.f32	s13, s10, s15
240090fc:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 240091fc <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
24009100:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009104:	ee07 3a90 	vmov	s15, r3
24009108:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2400910c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009110:	ee77 7aa5 	vadd.f32	s15, s15, s11
24009114:	eee7 7a06 	vfma.f32	s15, s14, s12
24009118:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
2400911c:	4a35      	ldr	r2, [pc, #212]	; (240091f4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
2400911e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
24009122:	6b93      	ldr	r3, [r2, #56]	; 0x38
24009124:	f3c3 2346 	ubfx	r3, r3, #9, #7
24009128:	ee07 3a90 	vmov	s15, r3
2400912c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
24009130:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
24009132:	ee77 7a86 	vadd.f32	s15, s15, s12
24009136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400913a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
2400913e:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
24009142:	6b93      	ldr	r3, [r2, #56]	; 0x38
24009144:	f3c3 4306 	ubfx	r3, r3, #16, #7
24009148:	ee07 3a90 	vmov	s15, r3
2400914c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009150:	ee77 7a86 	vadd.f32	s15, s15, s12
24009154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009158:	eebc 7ac7 	vcvt.u32.f32	s14, s14
2400915c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
24009160:	6b93      	ldr	r3, [r2, #56]	; 0x38
24009162:	f3c3 6306 	ubfx	r3, r3, #24, #7
24009166:	ee07 3a10 	vmov	s14, r3
2400916a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2400916e:	ee37 7a06 	vadd.f32	s14, s14, s12
24009172:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400917a:	ee17 3a90 	vmov	r3, s15
2400917e:	6083      	str	r3, [r0, #8]
}
24009180:	4770      	bx	lr
24009182:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
24009184:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
24009188:	6083      	str	r3, [r0, #8]
}
2400918a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400918c:	6811      	ldr	r1, [r2, #0]
2400918e:	0689      	lsls	r1, r1, #26
24009190:	d529      	bpl.n	240091e6 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009192:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
24009194:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009198:	4919      	ldr	r1, [pc, #100]	; (24009200 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
2400919a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400919e:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240091a0:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240091a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240091a8:	ed9f 5a14 	vldr	s10, [pc, #80]	; 240091fc <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
240091ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240091b0:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240091b2:	ee06 3a10 	vmov	s12, r3
240091b6:	ee05 1a90 	vmov	s11, r1
240091ba:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
240091be:	eef8 5ae5 	vcvt.f32.s32	s11, s11
240091c2:	ee36 6a26 	vadd.f32	s12, s12, s13
240091c6:	eec5 6aa7 	vdiv.f32	s13, s11, s15
240091ca:	eef0 7a46 	vmov.f32	s15, s12
240091ce:	eee7 7a05 	vfma.f32	s15, s14, s10
240091d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
240091d6:	e7a1      	b.n	2400911c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240091d8:	ee07 3a90 	vmov	s15, r3
240091dc:	ed9f 5a09 	vldr	s10, [pc, #36]	; 24009204 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
240091e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240091e4:	e787      	b.n	240090f6 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
240091e6:	ee07 3a90 	vmov	s15, r3
240091ea:	ed9f 5a07 	vldr	s10, [pc, #28]	; 24009208 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
240091ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240091f2:	e780      	b.n	240090f6 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
240091f4:	58024400 	.word	0x58024400
240091f8:	4a742400 	.word	0x4a742400
240091fc:	39000000 	.word	0x39000000
24009200:	03d09000 	.word	0x03d09000
24009204:	4b742400 	.word	0x4b742400
24009208:	4c742400 	.word	0x4c742400

2400920c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400920c:	4a50      	ldr	r2, [pc, #320]	; (24009350 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
2400920e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009210:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
24009212:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24009214:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
24009216:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
2400921a:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400921e:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
24009220:	d05d      	beq.n	240092de <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24009222:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24009226:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400922a:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
2400922e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
24009232:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
24009234:	ee07 4a90 	vmov	s15, r4
24009238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
2400923c:	d003      	beq.n	24009246 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
2400923e:	2902      	cmp	r1, #2
24009240:	d078      	beq.n	24009334 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
24009242:	2900      	cmp	r1, #0
24009244:	d050      	beq.n	240092e8 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009246:	ee07 3a90 	vmov	s15, r3
2400924a:	ed9f 5a42 	vldr	s10, [pc, #264]	; 24009354 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
2400924e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009252:	6c13      	ldr	r3, [r2, #64]	; 0x40
24009254:	eec5 6a27 	vdiv.f32	s13, s10, s15
24009258:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 24009358 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
2400925c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009260:	ee07 3a90 	vmov	s15, r3
24009264:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24009268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400926c:	ee77 7aa5 	vadd.f32	s15, s15, s11
24009270:	eee7 7a06 	vfma.f32	s15, s14, s12
24009274:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
24009278:	4a35      	ldr	r2, [pc, #212]	; (24009350 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
2400927a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2400927e:	6c13      	ldr	r3, [r2, #64]	; 0x40
24009280:	f3c3 2346 	ubfx	r3, r3, #9, #7
24009284:	ee07 3a90 	vmov	s15, r3
24009288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
2400928c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
2400928e:	ee77 7a86 	vadd.f32	s15, s15, s12
24009292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009296:	eebc 7ac7 	vcvt.u32.f32	s14, s14
2400929a:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
2400929e:	6c13      	ldr	r3, [r2, #64]	; 0x40
240092a0:	f3c3 4306 	ubfx	r3, r3, #16, #7
240092a4:	ee07 3a90 	vmov	s15, r3
240092a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240092ac:	ee77 7a86 	vadd.f32	s15, s15, s12
240092b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240092b4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
240092b8:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
240092bc:	6c13      	ldr	r3, [r2, #64]	; 0x40
240092be:	f3c3 6306 	ubfx	r3, r3, #24, #7
240092c2:	ee07 3a10 	vmov	s14, r3
240092c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240092ca:	ee37 7a06 	vadd.f32	s14, s14, s12
240092ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
240092d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240092d6:	ee17 3a90 	vmov	r3, s15
240092da:	6083      	str	r3, [r0, #8]
}
240092dc:	4770      	bx	lr
240092de:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
240092e0:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
240092e4:	6083      	str	r3, [r0, #8]
}
240092e6:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240092e8:	6811      	ldr	r1, [r2, #0]
240092ea:	0689      	lsls	r1, r1, #26
240092ec:	d529      	bpl.n	24009342 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240092ee:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240092f0:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240092f4:	4919      	ldr	r1, [pc, #100]	; (2400935c <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
240092f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240092fa:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
240092fc:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009304:	ed9f 5a14 	vldr	s10, [pc, #80]	; 24009358 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
24009308:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400930c:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
2400930e:	ee06 3a10 	vmov	s12, r3
24009312:	ee05 1a90 	vmov	s11, r1
24009316:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
2400931a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
2400931e:	ee36 6a26 	vadd.f32	s12, s12, s13
24009322:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24009326:	eef0 7a46 	vmov.f32	s15, s12
2400932a:	eee7 7a05 	vfma.f32	s15, s14, s10
2400932e:	ee66 6aa7 	vmul.f32	s13, s13, s15
24009332:	e7a1      	b.n	24009278 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009334:	ee07 3a90 	vmov	s15, r3
24009338:	ed9f 5a09 	vldr	s10, [pc, #36]	; 24009360 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
2400933c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009340:	e787      	b.n	24009252 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
24009342:	ee07 3a90 	vmov	s15, r3
24009346:	ed9f 5a07 	vldr	s10, [pc, #28]	; 24009364 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
2400934a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400934e:	e780      	b.n	24009252 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
24009350:	58024400 	.word	0x58024400
24009354:	4a742400 	.word	0x4a742400
24009358:	39000000 	.word	0x39000000
2400935c:	03d09000 	.word	0x03d09000
24009360:	4b742400 	.word	0x4b742400
24009364:	4c742400 	.word	0x4c742400

24009368 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009368:	4a51      	ldr	r2, [pc, #324]	; (240094b0 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
2400936a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400936c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
2400936e:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24009370:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
24009372:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
24009376:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400937a:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
2400937c:	d05e      	beq.n	2400943c <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400937e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
24009382:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009386:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
2400938a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
2400938e:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
24009390:	ee07 4a90 	vmov	s15, r4
24009394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
24009398:	f000 8082 	beq.w	240094a0 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
2400939c:	2902      	cmp	r1, #2
2400939e:	d078      	beq.n	24009492 <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
240093a0:	2900      	cmp	r1, #0
240093a2:	d050      	beq.n	24009446 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240093a4:	ee07 3a90 	vmov	s15, r3
240093a8:	ed9f 5a42 	vldr	s10, [pc, #264]	; 240094b4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
240093ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240093b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
240093b2:	eec5 6a27 	vdiv.f32	s13, s10, s15
240093b6:	ed9f 6a40 	vldr	s12, [pc, #256]	; 240094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
240093ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
240093be:	ee07 3a90 	vmov	s15, r3
240093c2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
240093c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240093ca:	ee77 7aa5 	vadd.f32	s15, s15, s11
240093ce:	eee7 7a06 	vfma.f32	s15, s14, s12
240093d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
240093d6:	4a36      	ldr	r2, [pc, #216]	; (240094b0 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
240093d8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
240093dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
240093de:	f3c3 2346 	ubfx	r3, r3, #9, #7
240093e2:	ee07 3a90 	vmov	s15, r3
240093e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
240093ea:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
240093ec:	ee77 7a86 	vadd.f32	s15, s15, s12
240093f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240093f4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
240093f8:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
240093fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
240093fe:	f3c3 4306 	ubfx	r3, r3, #16, #7
24009402:	ee07 3a90 	vmov	s15, r3
24009406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400940a:	ee77 7a86 	vadd.f32	s15, s15, s12
2400940e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009412:	eebc 7ac7 	vcvt.u32.f32	s14, s14
24009416:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
2400941a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2400941c:	f3c3 6306 	ubfx	r3, r3, #24, #7
24009420:	ee07 3a10 	vmov	s14, r3
24009424:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24009428:	ee37 7a06 	vadd.f32	s14, s14, s12
2400942c:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24009434:	ee17 3a90 	vmov	r3, s15
24009438:	6083      	str	r3, [r0, #8]
}
2400943a:	4770      	bx	lr
2400943c:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
2400943e:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
24009442:	6083      	str	r3, [r0, #8]
}
24009444:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24009446:	6811      	ldr	r1, [r2, #0]
24009448:	0689      	lsls	r1, r1, #26
2400944a:	d5ab      	bpl.n	240093a4 <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400944c:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400944e:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009452:	491a      	ldr	r1, [pc, #104]	; (240094bc <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009454:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24009458:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400945a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400945e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24009462:	ed9f 5a15 	vldr	s10, [pc, #84]	; 240094b8 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
24009466:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
2400946a:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
2400946c:	ee06 3a10 	vmov	s12, r3
24009470:	ee05 1a90 	vmov	s11, r1
24009474:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
24009478:	eef8 5ae5 	vcvt.f32.s32	s11, s11
2400947c:	ee36 6a26 	vadd.f32	s12, s12, s13
24009480:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24009484:	eef0 7a46 	vmov.f32	s15, s12
24009488:	eee7 7a05 	vfma.f32	s15, s14, s10
2400948c:	ee66 6aa7 	vmul.f32	s13, s13, s15
24009490:	e7a1      	b.n	240093d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
24009492:	ee07 3a90 	vmov	s15, r3
24009496:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 240094c0 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
2400949a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2400949e:	e787      	b.n	240093b0 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
240094a0:	ee07 3a90 	vmov	s15, r3
240094a4:	ed9f 5a07 	vldr	s10, [pc, #28]	; 240094c4 <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
240094a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240094ac:	e780      	b.n	240093b0 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
240094ae:	bf00      	nop
240094b0:	58024400 	.word	0x58024400
240094b4:	4c742400 	.word	0x4c742400
240094b8:	39000000 	.word	0x39000000
240094bc:	03d09000 	.word	0x03d09000
240094c0:	4b742400 	.word	0x4b742400
240094c4:	4a742400 	.word	0x4a742400

240094c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
240094c8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
240094cc:	430b      	orrs	r3, r1
{
240094ce:	b500      	push	{lr}
240094d0:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
240094d2:	f000 8083 	beq.w	240095dc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
240094d6:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
240094da:	430b      	orrs	r3, r1
240094dc:	d038      	beq.n	24009550 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
240094de:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
240094e2:	430b      	orrs	r3, r1
240094e4:	f000 80e6 	beq.w	240096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
240094e8:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
240094ec:	430b      	orrs	r3, r1
240094ee:	f000 8089 	beq.w	24009604 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
240094f2:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
240094f6:	430b      	orrs	r3, r1
240094f8:	d060      	beq.n	240095bc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
240094fa:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
240094fe:	430b      	orrs	r3, r1
24009500:	f000 8112 	beq.w	24009728 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24009504:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
24009508:	430b      	orrs	r3, r1
2400950a:	f000 80a3 	beq.w	24009654 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
2400950e:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
24009512:	430b      	orrs	r3, r1
24009514:	f000 80fa 	beq.w	2400970c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24009518:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
2400951c:	430b      	orrs	r3, r1
2400951e:	f000 8143 	beq.w	240097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
24009522:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
24009526:	4308      	orrs	r0, r1
24009528:	d137      	bne.n	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
2400952a:	4a9a      	ldr	r2, [pc, #616]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400952c:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400952e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
24009532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009536:	f000 8084 	beq.w	24009642 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
2400953a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
2400953e:	f000 8157 	beq.w	240097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
24009542:	bb53      	cbnz	r3, 2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24009544:	6810      	ldr	r0, [r2, #0]
24009546:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
2400954a:	d044      	beq.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
2400954c:	4892      	ldr	r0, [pc, #584]	; (24009798 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
2400954e:	e042      	b.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
24009550:	4a90      	ldr	r2, [pc, #576]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009552:	6d13      	ldr	r3, [r2, #80]	; 0x50
24009554:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
24009558:	2b80      	cmp	r3, #128	; 0x80
2400955a:	f000 80a6 	beq.w	240096aa <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
2400955e:	d920      	bls.n	240095a2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
24009560:	2bc0      	cmp	r3, #192	; 0xc0
24009562:	d037      	beq.n	240095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
24009564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24009568:	d117      	bne.n	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400956a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
2400956c:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400956e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009572:	0749      	lsls	r1, r1, #29
24009574:	d502      	bpl.n	2400957c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
24009576:	2b00      	cmp	r3, #0
24009578:	f000 80c2 	beq.w	24009700 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
2400957c:	4a85      	ldr	r2, [pc, #532]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400957e:	6812      	ldr	r2, [r2, #0]
24009580:	05d0      	lsls	r0, r2, #23
24009582:	d503      	bpl.n	2400958c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
24009584:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009588:	f000 8102 	beq.w	24009790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
2400958c:	4a81      	ldr	r2, [pc, #516]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400958e:	6812      	ldr	r2, [r2, #0]
24009590:	0391      	lsls	r1, r2, #14
24009592:	d502      	bpl.n	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
24009594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009598:	d0d8      	beq.n	2400954c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
2400959a:	2000      	movs	r0, #0
}
2400959c:	b005      	add	sp, #20
2400959e:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
240095a2:	2b00      	cmp	r3, #0
240095a4:	d04d      	beq.n	24009642 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
240095a6:	2b40      	cmp	r3, #64	; 0x40
240095a8:	d1f7      	bne.n	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240095aa:	6810      	ldr	r0, [r2, #0]
240095ac:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
240095b0:	d011      	beq.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240095b2:	a801      	add	r0, sp, #4
240095b4:	f7ff fd7c 	bl	240090b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240095b8:	9801      	ldr	r0, [sp, #4]
240095ba:	e00c      	b.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
240095bc:	4a75      	ldr	r2, [pc, #468]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240095be:	6d13      	ldr	r3, [r2, #80]	; 0x50
240095c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
240095c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240095c8:	d06f      	beq.n	240096aa <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
240095ca:	d938      	bls.n	2400963e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
240095cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
240095d0:	f040 8088 	bne.w	240096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
240095d4:	4871      	ldr	r0, [pc, #452]	; (2400979c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
240095d6:	b005      	add	sp, #20
240095d8:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
240095dc:	4b6d      	ldr	r3, [pc, #436]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240095de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240095e0:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
240095e4:	2b04      	cmp	r3, #4
240095e6:	d8d8      	bhi.n	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
240095e8:	a201      	add	r2, pc, #4	; (adr r2, 240095f0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
240095ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240095ee:	bf00      	nop
240095f0:	24009693 	.word	0x24009693
240095f4:	2400966f 	.word	0x2400966f
240095f8:	2400967f 	.word	0x2400967f
240095fc:	240095d5 	.word	0x240095d5
24009600:	2400967b 	.word	0x2400967b
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
24009604:	4a63      	ldr	r2, [pc, #396]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009606:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009608:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
2400960c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24009610:	d04b      	beq.n	240096aa <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
24009612:	d944      	bls.n	2400969e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
24009614:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
24009618:	d0dc      	beq.n	240095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
2400961a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
2400961e:	d1bc      	bne.n	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009620:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009622:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
24009624:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
24009628:	0752      	lsls	r2, r2, #29
2400962a:	d5a7      	bpl.n	2400957c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
2400962c:	2b00      	cmp	r3, #0
2400962e:	d1a5      	bne.n	2400957c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009630:	4b58      	ldr	r3, [pc, #352]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009632:	485b      	ldr	r0, [pc, #364]	; (240097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
24009634:	681b      	ldr	r3, [r3, #0]
24009636:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400963a:	40d8      	lsrs	r0, r3
2400963c:	e7cb      	b.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
2400963e:	2b00      	cmp	r3, #0
24009640:	d154      	bne.n	240096ec <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24009642:	6810      	ldr	r0, [r2, #0]
24009644:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
24009648:	d0c5      	beq.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
2400964a:	a801      	add	r0, sp, #4
2400964c:	f7ff fe8c 	bl	24009368 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24009650:	9802      	ldr	r0, [sp, #8]
24009652:	e7c0      	b.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
24009654:	4a4f      	ldr	r2, [pc, #316]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009656:	6d93      	ldr	r3, [r2, #88]	; 0x58
24009658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
2400965c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24009660:	f000 80d0 	beq.w	24009804 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
24009664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24009668:	d0da      	beq.n	24009620 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
2400966a:	2b00      	cmp	r3, #0
2400966c:	d195      	bne.n	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400966e:	4b49      	ldr	r3, [pc, #292]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009670:	6818      	ldr	r0, [r3, #0]
24009672:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009676:	d0ae      	beq.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009678:	e79b      	b.n	240095b2 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
2400967a:	4a46      	ldr	r2, [pc, #280]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400967c:	e775      	b.n	2400956a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
2400967e:	4b45      	ldr	r3, [pc, #276]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009680:	6818      	ldr	r0, [r3, #0]
24009682:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
24009686:	d0a6      	beq.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24009688:	a801      	add	r0, sp, #4
2400968a:	f7ff fdbf 	bl	2400920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2400968e:	9801      	ldr	r0, [sp, #4]
24009690:	e7a1      	b.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
24009692:	4b40      	ldr	r3, [pc, #256]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009694:	6818      	ldr	r0, [r3, #0]
24009696:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
2400969a:	d09c      	beq.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
2400969c:	e7d5      	b.n	2400964a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
2400969e:	2b00      	cmp	r3, #0
240096a0:	d0cf      	beq.n	24009642 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
240096a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
240096a6:	d080      	beq.n	240095aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
240096a8:	e777      	b.n	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
240096aa:	6810      	ldr	r0, [r2, #0]
240096ac:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
240096b0:	d091      	beq.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
240096b2:	e7e9      	b.n	24009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
240096b4:	4a37      	ldr	r2, [pc, #220]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
240096b6:	6d93      	ldr	r3, [r2, #88]	; 0x58
240096b8:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
240096bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
240096c0:	d0f3      	beq.n	240096aa <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
240096c2:	d806      	bhi.n	240096d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
240096c4:	2b00      	cmp	r3, #0
240096c6:	d0bc      	beq.n	24009642 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
240096c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
240096cc:	f43f af6d 	beq.w	240095aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
240096d0:	e763      	b.n	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
240096d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
240096d6:	f43f af7d 	beq.w	240095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
240096da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
240096de:	f43f af44 	beq.w	2400956a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
240096e2:	e75a      	b.n	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
240096e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
240096e8:	d09a      	beq.n	24009620 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
240096ea:	e756      	b.n	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
240096ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240096f0:	f43f af5b 	beq.w	240095aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
240096f4:	e751      	b.n	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
240096f6:	6810      	ldr	r0, [r2, #0]
240096f8:	f010 0004 	ands.w	r0, r0, #4
240096fc:	f43f af6b 	beq.w	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009700:	6813      	ldr	r3, [r2, #0]
24009702:	4827      	ldr	r0, [pc, #156]	; (240097a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
24009704:	f3c3 03c1 	ubfx	r3, r3, #3, #2
24009708:	40d8      	lsrs	r0, r3
2400970a:	e764      	b.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
2400970c:	4b21      	ldr	r3, [pc, #132]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400970e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
24009710:	03d2      	lsls	r2, r2, #15
24009712:	d5bf      	bpl.n	24009694 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
24009714:	6818      	ldr	r0, [r3, #0]
24009716:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
2400971a:	f43f af5c 	beq.w	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2400971e:	a801      	add	r0, sp, #4
24009720:	f7ff fcc6 	bl	240090b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
24009724:	9803      	ldr	r0, [sp, #12]
24009726:	e756      	b.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
24009728:	4a1a      	ldr	r2, [pc, #104]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400972a:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400972c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
24009730:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24009734:	d0df      	beq.n	240096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
24009736:	d810      	bhi.n	2400975a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
24009738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400973c:	d058      	beq.n	240097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
2400973e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24009742:	d118      	bne.n	24009776 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009744:	4b13      	ldr	r3, [pc, #76]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
24009746:	6818      	ldr	r0, [r3, #0]
24009748:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400974c:	f43f af43 	beq.w	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24009750:	a801      	add	r0, sp, #4
24009752:	f7ff fd5b 	bl	2400920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24009756:	9802      	ldr	r0, [sp, #8]
24009758:	e73d      	b.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
2400975a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2400975e:	d012      	beq.n	24009786 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
24009760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24009764:	f47f af19 	bne.w	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
24009768:	4b0a      	ldr	r3, [pc, #40]	; (24009794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
2400976a:	6818      	ldr	r0, [r3, #0]
2400976c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
24009770:	f43f af31 	beq.w	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009774:	e6ea      	b.n	2400954c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
24009776:	2b00      	cmp	r3, #0
24009778:	f47f af0f 	bne.w	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
2400977c:	b005      	add	sp, #20
2400977e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
24009782:	f7fe bd39 	b.w	240081f8 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24009786:	6810      	ldr	r0, [r2, #0]
24009788:	f410 7080 	ands.w	r0, r0, #256	; 0x100
2400978c:	f43f af23 	beq.w	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
24009790:	4804      	ldr	r0, [pc, #16]	; (240097a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
24009792:	e720      	b.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009794:	58024400 	.word	0x58024400
24009798:	00f42400 	.word	0x00f42400
2400979c:	00bb8000 	.word	0x00bb8000
240097a0:	03d09000 	.word	0x03d09000
240097a4:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
240097a8:	4b28      	ldr	r3, [pc, #160]	; (2400984c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
240097aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240097ac:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
240097b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
240097b4:	d037      	beq.n	24009826 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
240097b6:	d814      	bhi.n	240097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
240097b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240097bc:	d03f      	beq.n	2400983e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
240097be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240097c2:	d0bf      	beq.n	24009744 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
240097c4:	2b00      	cmp	r3, #0
240097c6:	f47f aee8 	bne.w	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
240097ca:	f7fe fcd5 	bl	24008178 <HAL_RCC_GetHCLKFreq>
240097ce:	4b1f      	ldr	r3, [pc, #124]	; (2400984c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
240097d0:	4a1f      	ldr	r2, [pc, #124]	; (24009850 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
240097d2:	6a1b      	ldr	r3, [r3, #32]
240097d4:	f3c3 1302 	ubfx	r3, r3, #4, #3
240097d8:	5cd3      	ldrb	r3, [r2, r3]
240097da:	f003 031f 	and.w	r3, r3, #31
240097de:	40d8      	lsrs	r0, r3
        break;
240097e0:	e6f9      	b.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
240097e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
240097e6:	d017      	beq.n	24009818 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
240097e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
240097ec:	d0bc      	beq.n	24009768 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
240097ee:	e6d4      	b.n	2400959a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
240097f0:	6810      	ldr	r0, [r2, #0]
240097f2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
240097f6:	f43f aeee 	beq.w	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240097fa:	a801      	add	r0, sp, #4
240097fc:	f7ff fc58 	bl	240090b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24009800:	9802      	ldr	r0, [sp, #8]
24009802:	e6e8      	b.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
24009804:	6810      	ldr	r0, [r2, #0]
24009806:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
2400980a:	f43f aee4 	beq.w	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400980e:	a801      	add	r0, sp, #4
24009810:	f7ff fcfc 	bl	2400920c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
24009814:	9803      	ldr	r0, [sp, #12]
24009816:	e6de      	b.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
24009818:	4b0c      	ldr	r3, [pc, #48]	; (2400984c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
2400981a:	6818      	ldr	r0, [r3, #0]
2400981c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
24009820:	f43f aed9 	beq.w	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
24009824:	e7b4      	b.n	24009790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
24009826:	4b09      	ldr	r3, [pc, #36]	; (2400984c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009828:	6818      	ldr	r0, [r3, #0]
2400982a:	f010 0004 	ands.w	r0, r0, #4
2400982e:	f43f aed2 	beq.w	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
24009832:	681b      	ldr	r3, [r3, #0]
24009834:	4807      	ldr	r0, [pc, #28]	; (24009854 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
24009836:	f3c3 03c1 	ubfx	r3, r3, #3, #2
2400983a:	40d8      	lsrs	r0, r3
2400983c:	e6cb      	b.n	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
2400983e:	4b03      	ldr	r3, [pc, #12]	; (2400984c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
24009840:	6818      	ldr	r0, [r3, #0]
24009842:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
24009846:	f43f aec6 	beq.w	240095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
2400984a:	e7d6      	b.n	240097fa <HAL_RCCEx_GetPeriphCLKFreq+0x332>
2400984c:	58024400 	.word	0x58024400
24009850:	2401c830 	.word	0x2401c830
24009854:	03d09000 	.word	0x03d09000

24009858 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
24009858:	2800      	cmp	r0, #0
2400985a:	d03c      	beq.n	240098d6 <HAL_RNG_Init+0x7e>
{
2400985c:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
2400985e:	7a43      	ldrb	r3, [r0, #9]
24009860:	4604      	mov	r4, r0
24009862:	f003 02ff 	and.w	r2, r3, #255	; 0xff
24009866:	2b00      	cmp	r3, #0
24009868:	d031      	beq.n	240098ce <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400986a:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
2400986c:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
2400986e:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
24009870:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
24009872:	6813      	ldr	r3, [r2, #0]
24009874:	f023 0320 	bic.w	r3, r3, #32
24009878:	430b      	orrs	r3, r1
2400987a:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
2400987c:	6822      	ldr	r2, [r4, #0]
2400987e:	6813      	ldr	r3, [r2, #0]
24009880:	f043 0304 	orr.w	r3, r3, #4
24009884:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
24009886:	6823      	ldr	r3, [r4, #0]
24009888:	685b      	ldr	r3, [r3, #4]
2400988a:	0658      	lsls	r0, r3, #25
2400988c:	d503      	bpl.n	24009896 <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
2400988e:	2304      	movs	r3, #4
    return HAL_ERROR;
24009890:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
24009892:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
24009894:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
24009896:	f7fa ffe7 	bl	24004868 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400989a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
2400989c:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
2400989e:	685b      	ldr	r3, [r3, #4]
240098a0:	0759      	lsls	r1, r3, #29
240098a2:	d50e      	bpl.n	240098c2 <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
240098a4:	f7fa ffe0 	bl	24004868 <HAL_GetTick>
240098a8:	1b43      	subs	r3, r0, r5
240098aa:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
240098ac:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
240098ae:	d9f6      	bls.n	2400989e <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
240098b0:	685a      	ldr	r2, [r3, #4]
240098b2:	0752      	lsls	r2, r2, #29
240098b4:	d5f3      	bpl.n	2400989e <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
240098b6:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
240098b8:	2302      	movs	r3, #2
        return HAL_ERROR;
240098ba:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
240098bc:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
240098be:	60e3      	str	r3, [r4, #12]
}
240098c0:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
240098c2:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
240098c4:	2201      	movs	r2, #1
  return HAL_OK;
240098c6:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
240098c8:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
240098ca:	60e3      	str	r3, [r4, #12]
}
240098cc:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
240098ce:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
240098d0:	f7f9 fd58 	bl	24003384 <HAL_RNG_MspInit>
240098d4:	e7c9      	b.n	2400986a <HAL_RNG_Init+0x12>
    return HAL_ERROR;
240098d6:	2001      	movs	r0, #1
}
240098d8:	4770      	bx	lr
240098da:	bf00      	nop

240098dc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
240098dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
240098de:	7a03      	ldrb	r3, [r0, #8]
240098e0:	2b01      	cmp	r3, #1
240098e2:	d027      	beq.n	24009934 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
240098e4:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
240098e6:	2201      	movs	r2, #1
240098e8:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
240098ea:	4293      	cmp	r3, r2
240098ec:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
240098ee:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
240098f0:	d006      	beq.n	24009900 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
240098f2:	2304      	movs	r3, #4
    status = HAL_ERROR;
240098f4:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
240098f6:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
240098f8:	2300      	movs	r3, #0
240098fa:	7223      	strb	r3, [r4, #8]

  return status;
}
240098fc:	4630      	mov	r0, r6
240098fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
24009900:	2302      	movs	r3, #2
24009902:	460d      	mov	r5, r1
24009904:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
24009906:	f7fa ffaf 	bl	24004868 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400990a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
2400990c:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400990e:	685a      	ldr	r2, [r3, #4]
24009910:	07d2      	lsls	r2, r2, #31
24009912:	d412      	bmi.n	2400993a <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
24009914:	f7fa ffa8 	bl	24004868 <HAL_GetTick>
24009918:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
2400991a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
2400991c:	2802      	cmp	r0, #2
2400991e:	d9f6      	bls.n	2400990e <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
24009920:	685a      	ldr	r2, [r3, #4]
24009922:	f012 0201 	ands.w	r2, r2, #1
24009926:	d1f2      	bne.n	2400990e <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
24009928:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
2400992a:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
2400992c:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
2400992e:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
24009930:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
24009932:	e7e3      	b.n	240098fc <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
24009934:	2602      	movs	r6, #2
}
24009936:	4630      	mov	r0, r6
24009938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
2400993a:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
2400993c:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
2400993e:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
24009940:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
24009942:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
24009944:	7262      	strb	r2, [r4, #9]
24009946:	e7d7      	b.n	240098f8 <HAL_RNG_GenerateRandomNumber+0x1c>

24009948 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
24009948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2400994a:	4ba3      	ldr	r3, [pc, #652]	; (24009bd8 <HAL_SAI_Init.part.0+0x290>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
2400994c:	4605      	mov	r5, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
2400994e:	6802      	ldr	r2, [r0, #0]
24009950:	429a      	cmp	r2, r3
24009952:	d01c      	beq.n	2400998e <HAL_SAI_Init.part.0+0x46>
24009954:	3320      	adds	r3, #32
24009956:	429a      	cmp	r2, r3
24009958:	d019      	beq.n	2400998e <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
2400995a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
2400995e:	429a      	cmp	r2, r3
24009960:	d04d      	beq.n	240099fe <HAL_SAI_Init.part.0+0xb6>
24009962:	3320      	adds	r3, #32
24009964:	429a      	cmp	r2, r3
24009966:	d04a      	beq.n	240099fe <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24009968:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
2400996c:	429a      	cmp	r2, r3
2400996e:	f000 812f 	beq.w	24009bd0 <HAL_SAI_Init.part.0+0x288>
24009972:	3320      	adds	r3, #32
24009974:	429a      	cmp	r2, r3
24009976:	f000 812b 	beq.w	24009bd0 <HAL_SAI_Init.part.0+0x288>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
2400997a:	4b98      	ldr	r3, [pc, #608]	; (24009bdc <HAL_SAI_Init.part.0+0x294>)
2400997c:	429a      	cmp	r2, r3
2400997e:	f000 8129 	beq.w	24009bd4 <HAL_SAI_Init.part.0+0x28c>
24009982:	3320      	adds	r3, #32
24009984:	429a      	cmp	r2, r3
24009986:	f000 8125 	beq.w	24009bd4 <HAL_SAI_Init.part.0+0x28c>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
2400998a:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
2400998c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
2400998e:	4c94      	ldr	r4, [pc, #592]	; (24009be0 <HAL_SAI_Init.part.0+0x298>)
  if (hsai->State == HAL_SAI_STATE_RESET)
24009990:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
24009994:	f003 01ff 	and.w	r1, r3, #255	; 0xff
24009998:	2b00      	cmp	r3, #0
2400999a:	d037      	beq.n	24009a0c <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400999c:	4b91      	ldr	r3, [pc, #580]	; (24009be4 <HAL_SAI_Init.part.0+0x29c>)
2400999e:	4992      	ldr	r1, [pc, #584]	; (24009be8 <HAL_SAI_Init.part.0+0x2a0>)
240099a0:	681b      	ldr	r3, [r3, #0]
240099a2:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
240099a6:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
240099a8:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
240099aa:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
240099ae:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
240099b0:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
240099b2:	2b00      	cmp	r3, #0
240099b4:	d031      	beq.n	24009a1a <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
240099b6:	682a      	ldr	r2, [r5, #0]
    count--;
240099b8:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
240099ba:	6812      	ldr	r2, [r2, #0]
240099bc:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
240099c0:	d1f7      	bne.n	240099b2 <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
240099c2:	68eb      	ldr	r3, [r5, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
240099c4:	2102      	movs	r1, #2
  switch (hsai->Init.SynchroExt)
240099c6:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
240099c8:	f885 1091 	strb.w	r1, [r5, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
240099cc:	f000 8150 	beq.w	24009c70 <HAL_SAI_Init.part.0+0x328>
240099d0:	428b      	cmp	r3, r1
240099d2:	bf19      	ittee	ne
240099d4:	460e      	movne	r6, r1
240099d6:	2003      	movne	r0, #3
240099d8:	2023      	moveq	r0, #35	; 0x23
240099da:	2622      	moveq	r6, #34	; 0x22
240099dc:	bf15      	itete	ne
240099de:	2701      	movne	r7, #1
240099e0:	2721      	moveq	r7, #33	; 0x21
240099e2:	2100      	movne	r1, #0
240099e4:	2120      	moveq	r1, #32
  switch (hsai->Init.Synchro)
240099e6:	68ab      	ldr	r3, [r5, #8]
240099e8:	3b01      	subs	r3, #1
240099ea:	2b04      	cmp	r3, #4
240099ec:	f200 8180 	bhi.w	24009cf0 <HAL_SAI_Init.part.0+0x3a8>
240099f0:	e8df f013 	tbh	[pc, r3, lsl #1]
240099f4:	001c00e3 	.word	0x001c00e3
240099f8:	001b00ea 	.word	0x001b00ea
240099fc:	00e6      	.short	0x00e6
  if (hsai->State == HAL_SAI_STATE_RESET)
240099fe:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
    SaiBaseAddress = SAI2;
24009a02:	4c7a      	ldr	r4, [pc, #488]	; (24009bec <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
24009a04:	f003 01ff 	and.w	r1, r3, #255	; 0xff
24009a08:	2b00      	cmp	r3, #0
24009a0a:	d1c7      	bne.n	2400999c <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
24009a0c:	4628      	mov	r0, r5
    hsai->Lock = HAL_UNLOCKED;
24009a0e:	f885 1090 	strb.w	r1, [r5, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
24009a12:	f7f9 fd1d 	bl	24003450 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
24009a16:	682a      	ldr	r2, [r5, #0]
24009a18:	e7c0      	b.n	2400999c <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009a1a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    return HAL_ERROR;
24009a1e:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
24009a24:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
24009a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
24009a2a:	4631      	mov	r1, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
24009a2c:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
24009a30:	6021      	str	r1, [r4, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
24009a32:	6a2b      	ldr	r3, [r5, #32]
24009a34:	2b00      	cmp	r3, #0
24009a36:	d046      	beq.n	24009ac6 <HAL_SAI_Init.part.0+0x17e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
24009a38:	682b      	ldr	r3, [r5, #0]
24009a3a:	4967      	ldr	r1, [pc, #412]	; (24009bd8 <HAL_SAI_Init.part.0+0x290>)
24009a3c:	428b      	cmp	r3, r1
24009a3e:	f000 812b 	beq.w	24009c98 <HAL_SAI_Init.part.0+0x350>
24009a42:	3120      	adds	r1, #32
24009a44:	428b      	cmp	r3, r1
24009a46:	f000 8127 	beq.w	24009c98 <HAL_SAI_Init.part.0+0x350>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24009a4a:	4969      	ldr	r1, [pc, #420]	; (24009bf0 <HAL_SAI_Init.part.0+0x2a8>)
24009a4c:	428b      	cmp	r3, r1
24009a4e:	f000 8133 	beq.w	24009cb8 <HAL_SAI_Init.part.0+0x370>
24009a52:	3120      	adds	r1, #32
24009a54:	428b      	cmp	r3, r1
24009a56:	f000 812f 	beq.w	24009cb8 <HAL_SAI_Init.part.0+0x370>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24009a5a:	4966      	ldr	r1, [pc, #408]	; (24009bf4 <HAL_SAI_Init.part.0+0x2ac>)
24009a5c:	428b      	cmp	r3, r1
24009a5e:	f000 8123 	beq.w	24009ca8 <HAL_SAI_Init.part.0+0x360>
24009a62:	3120      	adds	r1, #32
24009a64:	428b      	cmp	r3, r1
24009a66:	f000 811f 	beq.w	24009ca8 <HAL_SAI_Init.part.0+0x360>
    if (hsai->Instance == SAI4_Block_A)
24009a6a:	495c      	ldr	r1, [pc, #368]	; (24009bdc <HAL_SAI_Init.part.0+0x294>)
24009a6c:	428b      	cmp	r3, r1
24009a6e:	f000 8135 	beq.w	24009cdc <HAL_SAI_Init.part.0+0x394>
    if (hsai->Instance == SAI4_Block_B)
24009a72:	4961      	ldr	r1, [pc, #388]	; (24009bf8 <HAL_SAI_Init.part.0+0x2b0>)
24009a74:	428b      	cmp	r3, r1
24009a76:	f000 812a 	beq.w	24009cce <HAL_SAI_Init.part.0+0x386>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
24009a7a:	69ab      	ldr	r3, [r5, #24]
24009a7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
24009a80:	f000 80fb 	beq.w	24009c7a <HAL_SAI_Init.part.0+0x332>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24009a84:	6aab      	ldr	r3, [r5, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009a86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
24009a8a:	6a29      	ldr	r1, [r5, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24009a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009a90:	ea4f 0342 	mov.w	r3, r2, lsl #1
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
24009a94:	bf0c      	ite	eq
24009a96:	2202      	moveq	r2, #2
24009a98:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009a9a:	fb01 f202 	mul.w	r2, r1, r2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009a9e:	6c69      	ldr	r1, [r5, #68]	; 0x44
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
24009aa0:	0212      	lsls	r2, r2, #8
24009aa2:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
24009aa6:	4a55      	ldr	r2, [pc, #340]	; (24009bfc <HAL_SAI_Init.part.0+0x2b4>)
24009aa8:	fba2 0203 	umull	r0, r2, r2, r3
24009aac:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
24009aae:	eb02 0082 	add.w	r0, r2, r2, lsl #2
24009ab2:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
24009ab6:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
24009ab8:	bf08      	it	eq
24009aba:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009abc:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
24009abe:	626a      	str	r2, [r5, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009ac0:	d101      	bne.n	24009ac6 <HAL_SAI_Init.part.0+0x17e>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
24009ac2:	0852      	lsrs	r2, r2, #1
24009ac4:	626a      	str	r2, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009ac6:	686b      	ldr	r3, [r5, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
24009ac8:	6d2f      	ldr	r7, [r5, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009aca:	f033 0302 	bics.w	r3, r3, #2
24009ace:	f040 80c8 	bne.w	24009c62 <HAL_SAI_Init.part.0+0x31a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
24009ad2:	3f01      	subs	r7, #1
24009ad4:	bf18      	it	ne
24009ad6:	2701      	movne	r7, #1
24009ad8:	027f      	lsls	r7, r7, #9
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24009ada:	f7fa fedd 	bl	24004898 <HAL_GetREVID>
24009ade:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
24009ae2:	682a      	ldr	r2, [r5, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24009ae4:	f0c0 80a9 	bcc.w	24009c3a <HAL_SAI_Init.part.0+0x2f2>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
24009ae8:	6811      	ldr	r1, [r2, #0]
24009aea:	4b45      	ldr	r3, [pc, #276]	; (24009c00 <HAL_SAI_Init.part.0+0x2b8>)
24009aec:	400b      	ands	r3, r1
24009aee:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009af0:	6c69      	ldr	r1, [r5, #68]	; 0x44
24009af2:	e9d5 2300 	ldrd	r2, r3, [r5]
24009af6:	430b      	orrs	r3, r1
24009af8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
24009afa:	430b      	orrs	r3, r1
24009afc:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
24009afe:	430b      	orrs	r3, r1
24009b00:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
24009b02:	430b      	orrs	r3, r1
24009b04:	6969      	ldr	r1, [r5, #20]
24009b06:	430b      	orrs	r3, r1
24009b08:	69a9      	ldr	r1, [r5, #24]
24009b0a:	430b      	orrs	r3, r1
24009b0c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
24009b0e:	430b      	orrs	r3, r1
24009b10:	6929      	ldr	r1, [r5, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009b12:	430b      	orrs	r3, r1
24009b14:	6811      	ldr	r1, [r2, #0]
24009b16:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
24009b18:	6a69      	ldr	r1, [r5, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009b1a:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
24009b1e:	4333      	orrs	r3, r6
24009b20:	433b      	orrs	r3, r7
24009b22:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
24009b24:	682a      	ldr	r2, [r5, #0]
24009b26:	4b37      	ldr	r3, [pc, #220]	; (24009c04 <HAL_SAI_Init.part.0+0x2bc>)
24009b28:	6851      	ldr	r1, [r2, #4]
24009b2a:	400b      	ands	r3, r1
24009b2c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
24009b2e:	6b29      	ldr	r1, [r5, #48]	; 0x30
24009b30:	69eb      	ldr	r3, [r5, #28]
24009b32:	682a      	ldr	r2, [r5, #0]
24009b34:	430b      	orrs	r3, r1
24009b36:	6b69      	ldr	r1, [r5, #52]	; 0x34
24009b38:	430b      	orrs	r3, r1
24009b3a:	6851      	ldr	r1, [r2, #4]
24009b3c:	430b      	orrs	r3, r1
24009b3e:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
24009b40:	682a      	ldr	r2, [r5, #0]
24009b42:	4b31      	ldr	r3, [pc, #196]	; (24009c08 <HAL_SAI_Init.part.0+0x2c0>)
24009b44:	6891      	ldr	r1, [r2, #8]
24009b46:	400b      	ands	r3, r1
24009b48:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24009b4a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
24009b4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
24009b4e:	6829      	ldr	r1, [r5, #0]
24009b50:	4313      	orrs	r3, r2
24009b52:	6e2a      	ldr	r2, [r5, #96]	; 0x60
24009b54:	6888      	ldr	r0, [r1, #8]
24009b56:	4313      	orrs	r3, r2
24009b58:	6d6a      	ldr	r2, [r5, #84]	; 0x54
24009b5a:	4303      	orrs	r3, r0
24009b5c:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
24009b5e:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24009b62:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
24009b64:	6daa      	ldr	r2, [r5, #88]	; 0x58
24009b66:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
24009b68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
24009b6c:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
24009b6e:	682a      	ldr	r2, [r5, #0]
24009b70:	68d3      	ldr	r3, [r2, #12]
24009b72:	4003      	ands	r3, r0
24009b74:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009b76:	6829      	ldr	r1, [r5, #0]
24009b78:	e9d5 301a 	ldrd	r3, r0, [r5, #104]	; 0x68
24009b7c:	68ca      	ldr	r2, [r1, #12]
24009b7e:	4303      	orrs	r3, r0
24009b80:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
24009b82:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009b84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
24009b88:	6f2a      	ldr	r2, [r5, #112]	; 0x70
24009b8a:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009b8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
24009b90:	4a11      	ldr	r2, [pc, #68]	; (24009bd8 <HAL_SAI_Init.part.0+0x290>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
24009b92:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
24009b94:	682b      	ldr	r3, [r5, #0]
24009b96:	4293      	cmp	r3, r2
24009b98:	d03c      	beq.n	24009c14 <HAL_SAI_Init.part.0+0x2cc>
24009b9a:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
24009b9e:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
24009ba2:	4293      	cmp	r3, r2
24009ba4:	d036      	beq.n	24009c14 <HAL_SAI_Init.part.0+0x2cc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009ba6:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
24009ba8:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009baa:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return HAL_OK;
24009bae:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
24009bb0:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
  __HAL_UNLOCK(hsai);
24009bb4:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
24009bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
24009bba:	f44f 6680 	mov.w	r6, #1024	; 0x400
24009bbe:	e737      	b.n	24009a30 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
24009bc0:	4601      	mov	r1, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
24009bc2:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
24009bc6:	e733      	b.n	24009a30 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
24009bc8:	4639      	mov	r1, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
24009bca:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
24009bce:	e72f      	b.n	24009a30 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
24009bd0:	4c0e      	ldr	r4, [pc, #56]	; (24009c0c <HAL_SAI_Init.part.0+0x2c4>)
24009bd2:	e6dd      	b.n	24009990 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
24009bd4:	4c0e      	ldr	r4, [pc, #56]	; (24009c10 <HAL_SAI_Init.part.0+0x2c8>)
24009bd6:	e6db      	b.n	24009990 <HAL_SAI_Init.part.0+0x48>
24009bd8:	40015804 	.word	0x40015804
24009bdc:	58005404 	.word	0x58005404
24009be0:	40015800 	.word	0x40015800
24009be4:	200008ec 	.word	0x200008ec
24009be8:	95cbec1b 	.word	0x95cbec1b
24009bec:	40015c00 	.word	0x40015c00
24009bf0:	40015c04 	.word	0x40015c04
24009bf4:	40016004 	.word	0x40016004
24009bf8:	58005424 	.word	0x58005424
24009bfc:	cccccccd 	.word	0xcccccccd
24009c00:	f005c010 	.word	0xf005c010
24009c04:	ffff1ff0 	.word	0xffff1ff0
24009c08:	fff88000 	.word	0xfff88000
24009c0c:	40016000 	.word	0x40016000
24009c10:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
24009c14:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009c16:	f023 0301 	bic.w	r3, r3, #1
24009c1a:	6463      	str	r3, [r4, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
24009c1c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
24009c20:	2b01      	cmp	r3, #1
24009c22:	d1c0      	bne.n	24009ba6 <HAL_SAI_Init.part.0+0x25e>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
24009c24:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
24009c28:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
24009c2a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
24009c2e:	6463      	str	r3, [r4, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
24009c30:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009c32:	f043 0301 	orr.w	r3, r3, #1
24009c36:	6463      	str	r3, [r4, #68]	; 0x44
24009c38:	e7b5      	b.n	24009ba6 <HAL_SAI_Init.part.0+0x25e>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
24009c3a:	6811      	ldr	r1, [r2, #0]
24009c3c:	4b2d      	ldr	r3, [pc, #180]	; (24009cf4 <HAL_SAI_Init.part.0+0x3ac>)
24009c3e:	400b      	ands	r3, r1
24009c40:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
24009c42:	6c69      	ldr	r1, [r5, #68]	; 0x44
24009c44:	e9d5 2300 	ldrd	r2, r3, [r5]
24009c48:	430b      	orrs	r3, r1
24009c4a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
24009c4c:	430b      	orrs	r3, r1
24009c4e:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
24009c50:	430b      	orrs	r3, r1
24009c52:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
24009c54:	430b      	orrs	r3, r1
24009c56:	6969      	ldr	r1, [r5, #20]
24009c58:	430b      	orrs	r3, r1
24009c5a:	69a9      	ldr	r1, [r5, #24]
24009c5c:	430b      	orrs	r3, r1
24009c5e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
24009c60:	e757      	b.n	24009b12 <HAL_SAI_Init.part.0+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
24009c62:	f1a7 0701 	sub.w	r7, r7, #1
24009c66:	fab7 f787 	clz	r7, r7
24009c6a:	097f      	lsrs	r7, r7, #5
24009c6c:	027f      	lsls	r7, r7, #9
24009c6e:	e734      	b.n	24009ada <HAL_SAI_Init.part.0+0x192>
  switch (hsai->Init.SynchroExt)
24009c70:	2013      	movs	r0, #19
24009c72:	2612      	movs	r6, #18
24009c74:	2711      	movs	r7, #17
24009c76:	2110      	movs	r1, #16
24009c78:	e6b5      	b.n	240099e6 <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
24009c7a:	6c69      	ldr	r1, [r5, #68]	; 0x44
24009c7c:	2904      	cmp	r1, #4
24009c7e:	d035      	beq.n	24009cec <HAL_SAI_Init.part.0+0x3a4>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
24009c80:	2908      	cmp	r1, #8
24009c82:	d021      	beq.n	24009cc8 <HAL_SAI_Init.part.0+0x380>
        tmpframelength = hsai->FrameInit.FrameLength;
24009c84:	6d68      	ldr	r0, [r5, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
24009c86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
24009c8a:	0053      	lsls	r3, r2, #1
24009c8c:	6a2a      	ldr	r2, [r5, #32]
24009c8e:	fb00 f202 	mul.w	r2, r0, r2
24009c92:	fbb3 f3f2 	udiv	r3, r3, r2
24009c96:	e706      	b.n	24009aa6 <HAL_SAI_Init.part.0+0x15e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
24009c98:	f44f 7080 	mov.w	r0, #256	; 0x100
24009c9c:	2100      	movs	r1, #0
24009c9e:	f7ff fc13 	bl	240094c8 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
24009ca2:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
24009ca4:	4602      	mov	r2, r0
24009ca6:	e6d0      	b.n	24009a4a <HAL_SAI_Init.part.0+0x102>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
24009ca8:	f44f 7000 	mov.w	r0, #512	; 0x200
24009cac:	2100      	movs	r1, #0
24009cae:	f7ff fc0b 	bl	240094c8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
24009cb2:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
24009cb4:	4602      	mov	r2, r0
24009cb6:	e6d8      	b.n	24009a6a <HAL_SAI_Init.part.0+0x122>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
24009cb8:	f44f 7000 	mov.w	r0, #512	; 0x200
24009cbc:	2100      	movs	r1, #0
24009cbe:	f7ff fc03 	bl	240094c8 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
24009cc2:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
24009cc4:	4602      	mov	r2, r0
24009cc6:	e6c8      	b.n	24009a5a <HAL_SAI_Init.part.0+0x112>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
24009cc8:	f44f 7080 	mov.w	r0, #256	; 0x100
24009ccc:	e7db      	b.n	24009c86 <HAL_SAI_Init.part.0+0x33e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
24009cce:	f44f 6000 	mov.w	r0, #2048	; 0x800
24009cd2:	2100      	movs	r1, #0
24009cd4:	f7ff fbf8 	bl	240094c8 <HAL_RCCEx_GetPeriphCLKFreq>
24009cd8:	4602      	mov	r2, r0
24009cda:	e6ce      	b.n	24009a7a <HAL_SAI_Init.part.0+0x132>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
24009cdc:	f44f 6080 	mov.w	r0, #1024	; 0x400
24009ce0:	2100      	movs	r1, #0
24009ce2:	f7ff fbf1 	bl	240094c8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
24009ce6:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
24009ce8:	4602      	mov	r2, r0
24009cea:	e6c2      	b.n	24009a72 <HAL_SAI_Init.part.0+0x12a>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
24009cec:	2040      	movs	r0, #64	; 0x40
24009cee:	e7ca      	b.n	24009c86 <HAL_SAI_Init.part.0+0x33e>
      syncen_bits = 0;
24009cf0:	2600      	movs	r6, #0
24009cf2:	e69d      	b.n	24009a30 <HAL_SAI_Init.part.0+0xe8>
24009cf4:	f805c010 	.word	0xf805c010

24009cf8 <HAL_SAI_InitProtocol>:
  switch (protocol)
24009cf8:	2902      	cmp	r1, #2
{
24009cfa:	b538      	push	{r3, r4, r5, lr}
24009cfc:	4604      	mov	r4, r0
  switch (protocol)
24009cfe:	d935      	bls.n	24009d6c <HAL_SAI_InitProtocol+0x74>
24009d00:	1ec8      	subs	r0, r1, #3
24009d02:	2801      	cmp	r0, #1
24009d04:	d830      	bhi.n	24009d68 <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24009d06:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
24009d08:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24009d0a:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
24009d0c:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
24009d0e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
24009d10:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
24009d12:	f64f 70ff 	movw	r0, #65535	; 0xffff
24009d16:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009d18:	6860      	ldr	r0, [r4, #4]
24009d1a:	f030 0002 	bics.w	r0, r0, #2
24009d1e:	bf0c      	ite	eq
24009d20:	2501      	moveq	r5, #1
24009d22:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
24009d24:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
24009d26:	f44f 3100 	mov.w	r1, #131072	; 0x20000
24009d2a:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
24009d2c:	bf0c      	ite	eq
24009d2e:	2001      	moveq	r0, #1
24009d30:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
24009d32:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
24009d34:	f44f 2180 	mov.w	r1, #262144	; 0x40000
24009d38:	65a0      	str	r0, [r4, #88]	; 0x58
24009d3a:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
24009d3c:	2a03      	cmp	r2, #3
24009d3e:	d813      	bhi.n	24009d68 <HAL_SAI_InitProtocol+0x70>
24009d40:	e8df f002 	tbb	[pc, r2]
24009d44:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
24009d48:	6823      	ldr	r3, [r4, #0]
24009d4a:	4a47      	ldr	r2, [pc, #284]	; (24009e68 <HAL_SAI_InitProtocol+0x170>)
24009d4c:	4293      	cmp	r3, r2
24009d4e:	d005      	beq.n	24009d5c <HAL_SAI_InitProtocol+0x64>
24009d50:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
24009d54:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
24009d58:	4293      	cmp	r3, r2
24009d5a:	d105      	bne.n	24009d68 <HAL_SAI_InitProtocol+0x70>
24009d5c:	6863      	ldr	r3, [r4, #4]
24009d5e:	2b01      	cmp	r3, #1
24009d60:	d102      	bne.n	24009d68 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
24009d62:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009d64:	2b00      	cmp	r3, #0
24009d66:	d037      	beq.n	24009dd8 <HAL_SAI_InitProtocol+0xe0>
}
24009d68:	2001      	movs	r0, #1
24009d6a:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24009d6c:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
24009d6e:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
24009d70:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
24009d72:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
24009d74:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009d76:	6860      	ldr	r0, [r4, #4]
24009d78:	f030 0002 	bics.w	r0, r0, #2
24009d7c:	bf14      	ite	ne
24009d7e:	2001      	movne	r0, #1
24009d80:	2000      	moveq	r0, #0
24009d82:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
24009d84:	f44f 3080 	mov.w	r0, #65536	; 0x10000
24009d88:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
24009d8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
24009d8e:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
24009d90:	f013 0001 	ands.w	r0, r3, #1
24009d94:	d1e8      	bne.n	24009d68 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
24009d96:	b949      	cbnz	r1, 24009dac <HAL_SAI_InitProtocol+0xb4>
24009d98:	f44f 2080 	mov.w	r0, #262144	; 0x40000
24009d9c:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
24009da0:	2a03      	cmp	r2, #3
24009da2:	d8e1      	bhi.n	24009d68 <HAL_SAI_InitProtocol+0x70>
24009da4:	e8df f002 	tbb	[pc, r2]
24009da8:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
24009dac:	6660      	str	r0, [r4, #100]	; 0x64
24009dae:	f44f 3000 	mov.w	r0, #131072	; 0x20000
24009db2:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
24009db4:	2a03      	cmp	r2, #3
24009db6:	d8d7      	bhi.n	24009d68 <HAL_SAI_InitProtocol+0x70>
24009db8:	e8df f002 	tbb	[pc, r2]
24009dbc:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009dc0:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
24009dc2:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24009dc4:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009dc6:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
24009dc8:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24009dca:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
24009dcc:	f7fa fd64 	bl	24004898 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
24009dd0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
24009dd4:	2b01      	cmp	r3, #1
24009dd6:	d0b7      	beq.n	24009d48 <HAL_SAI_InitProtocol+0x50>
24009dd8:	4620      	mov	r0, r4
}
24009dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
24009dde:	f7ff bdb3 	b.w	24009948 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009de2:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009de4:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009de6:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009de8:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009dea:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
24009dec:	e7ee      	b.n	24009dcc <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
24009dee:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009df0:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009df2:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
24009df4:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
24009df6:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009df8:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
24009dfa:	e7e7      	b.n	24009dcc <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
24009dfc:	21e0      	movs	r1, #224	; 0xe0
24009dfe:	e7f7      	b.n	24009df0 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009e00:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
24009e02:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009e04:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009e06:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
24009e08:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009e0a:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009e0c:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009e0e:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009e12:	e7db      	b.n	24009dcc <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009e14:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
24009e16:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009e18:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009e1a:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009e1c:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
24009e20:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009e22:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009e26:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009e28:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009e2a:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009e2c:	d1ce      	bne.n	24009dcc <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
24009e2e:	2308      	movs	r3, #8
24009e30:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
24009e32:	e7cb      	b.n	24009dcc <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009e34:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009e36:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009e38:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
24009e3a:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009e3e:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009e40:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
24009e44:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
24009e46:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009e4a:	d1bf      	bne.n	24009dcc <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
24009e4c:	2310      	movs	r3, #16
24009e4e:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
24009e50:	e7bc      	b.n	24009dcc <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
24009e52:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009e54:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24009e56:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
24009e58:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
24009e5a:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
24009e5c:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
24009e5e:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
24009e60:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
24009e64:	e7b2      	b.n	24009dcc <HAL_SAI_InitProtocol+0xd4>
24009e66:	bf00      	nop
24009e68:	40015804 	.word	0x40015804

24009e6c <HAL_SAI_Transmit_DMA>:
{
24009e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24009e70:	4615      	mov	r5, r2
24009e72:	f04f 0800 	mov.w	r8, #0
24009e76:	460f      	mov	r7, r1
24009e78:	4604      	mov	r4, r0
24009e7a:	f365 080f 	bfi	r8, r5, #0, #16
  uint32_t tickstart = HAL_GetTick();
24009e7e:	f7fa fcf3 	bl	24004868 <HAL_GetTick>
24009e82:	f365 481f 	bfi	r8, r5, #16, #16
  if ((pData == NULL) || (Size == 0U))
24009e86:	2f00      	cmp	r7, #0
24009e88:	d066      	beq.n	24009f58 <HAL_SAI_Transmit_DMA+0xec>
24009e8a:	fab5 f985 	clz	r9, r5
24009e8e:	ea4f 1959 	mov.w	r9, r9, lsr #5
24009e92:	2d00      	cmp	r5, #0
24009e94:	d060      	beq.n	24009f58 <HAL_SAI_Transmit_DMA+0xec>
  if (hsai->State == HAL_SAI_STATE_READY)
24009e96:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
24009e9a:	2b01      	cmp	r3, #1
24009e9c:	fa5f fa83 	uxtb.w	sl, r3
24009ea0:	d155      	bne.n	24009f4e <HAL_SAI_Transmit_DMA+0xe2>
    __HAL_LOCK(hsai);
24009ea2:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
24009ea6:	2b01      	cmp	r3, #1
24009ea8:	d051      	beq.n	24009f4e <HAL_SAI_Transmit_DMA+0xe2>
    hsai->State = HAL_SAI_STATE_BUSY_TX;
24009eaa:	2312      	movs	r3, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009eac:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
24009eb0:	4a39      	ldr	r2, [pc, #228]	; (24009f98 <HAL_SAI_Transmit_DMA+0x12c>)
24009eb2:	4606      	mov	r6, r0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
24009eb4:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
24009eb8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    __HAL_LOCK(hsai);
24009ebc:	f884 a090 	strb.w	sl, [r4, #144]	; 0x90
    hsai->XferSize = Size;
24009ec0:	e9c4 781e 	strd	r7, r8, [r4, #120]	; 0x78
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
24009ec4:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
24009ec6:	4a35      	ldr	r2, [pc, #212]	; (24009f9c <HAL_SAI_Transmit_DMA+0x130>)
24009ec8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24009ecc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
24009ece:	4a34      	ldr	r2, [pc, #208]	; (24009fa0 <HAL_SAI_Transmit_DMA+0x134>)
24009ed0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24009ed4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
24009ed6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
24009eda:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
24009ede:	6822      	ldr	r2, [r4, #0]
24009ee0:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
24009ee4:	321c      	adds	r2, #28
24009ee6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
24009ee8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
24009eec:	f7fb f8d8 	bl	240050a0 <HAL_DMA_Start_IT>
24009ef0:	2800      	cmp	r0, #0
24009ef2:	d13f      	bne.n	24009f74 <HAL_SAI_Transmit_DMA+0x108>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009ef4:	6c63      	ldr	r3, [r4, #68]	; 0x44
24009ef6:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009ef8:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009efa:	d032      	beq.n	24009f62 <HAL_SAI_Transmit_DMA+0xf6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009efc:	2205      	movs	r2, #5
24009efe:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
24009f00:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
24009f02:	2b01      	cmp	r3, #1
24009f04:	bf98      	it	ls
24009f06:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
24009f08:	6821      	ldr	r1, [r4, #0]
24009f0a:	690b      	ldr	r3, [r1, #16]
24009f0c:	4313      	orrs	r3, r2
24009f0e:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
24009f10:	6822      	ldr	r2, [r4, #0]
24009f12:	6813      	ldr	r3, [r2, #0]
24009f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009f18:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
24009f1a:	e005      	b.n	24009f28 <HAL_SAI_Transmit_DMA+0xbc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
24009f1c:	f7fa fca4 	bl	24004868 <HAL_GetTick>
24009f20:	1b83      	subs	r3, r0, r6
24009f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24009f26:	d82a      	bhi.n	24009f7e <HAL_SAI_Transmit_DMA+0x112>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
24009f28:	6822      	ldr	r2, [r4, #0]
24009f2a:	6955      	ldr	r5, [r2, #20]
24009f2c:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
24009f30:	d0f4      	beq.n	24009f1c <HAL_SAI_Transmit_DMA+0xb0>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
24009f32:	6813      	ldr	r3, [r2, #0]
24009f34:	03db      	lsls	r3, r3, #15
24009f36:	d403      	bmi.n	24009f40 <HAL_SAI_Transmit_DMA+0xd4>
      __HAL_SAI_ENABLE(hsai);
24009f38:	6813      	ldr	r3, [r2, #0]
24009f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24009f3e:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
24009f40:	2300      	movs	r3, #0
    return HAL_OK;
24009f42:	469a      	mov	sl, r3
    __HAL_UNLOCK(hsai);
24009f44:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
24009f48:	4650      	mov	r0, sl
24009f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
24009f4e:	f04f 0a02 	mov.w	sl, #2
}
24009f52:	4650      	mov	r0, sl
24009f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return  HAL_ERROR;
24009f58:	f04f 0a01 	mov.w	sl, #1
}
24009f5c:	4650      	mov	r0, sl
24009f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
24009f62:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
24009f66:	2a01      	cmp	r2, #1
24009f68:	bf0b      	itete	eq
24009f6a:	2215      	moveq	r2, #21
24009f6c:	2205      	movne	r2, #5
24009f6e:	2171      	moveq	r1, #113	; 0x71
24009f70:	2161      	movne	r1, #97	; 0x61
24009f72:	e7c5      	b.n	24009f00 <HAL_SAI_Transmit_DMA+0x94>
}
24009f74:	4650      	mov	r0, sl
      __HAL_UNLOCK(hsai);
24009f76:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
}
24009f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009f7e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
24009f82:	f04f 0a03 	mov.w	sl, #3
        __HAL_UNLOCK(hsai);
24009f86:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
24009f8e:	4650      	mov	r0, sl
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
24009f90:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
24009f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24009f98:	2400a0f1 	.word	0x2400a0f1
24009f9c:	2400a08d 	.word	0x2400a08d
24009fa0:	2400a175 	.word	0x2400a175

24009fa4 <HAL_SAI_Receive_DMA>:
{
24009fa4:	2300      	movs	r3, #0
24009fa6:	f362 030f 	bfi	r3, r2, #0, #16
24009faa:	b570      	push	{r4, r5, r6, lr}
24009fac:	f362 431f 	bfi	r3, r2, #16, #16
  if ((pData == NULL) || (Size == 0U))
24009fb0:	2900      	cmp	r1, #0
24009fb2:	d054      	beq.n	2400a05e <HAL_SAI_Receive_DMA+0xba>
24009fb4:	fab2 f582 	clz	r5, r2
24009fb8:	096d      	lsrs	r5, r5, #5
24009fba:	2a00      	cmp	r2, #0
24009fbc:	d04f      	beq.n	2400a05e <HAL_SAI_Receive_DMA+0xba>
  if (hsai->State == HAL_SAI_STATE_READY)
24009fbe:	f890 2091 	ldrb.w	r2, [r0, #145]	; 0x91
24009fc2:	4604      	mov	r4, r0
24009fc4:	2a01      	cmp	r2, #1
24009fc6:	b2d6      	uxtb	r6, r2
24009fc8:	d146      	bne.n	2400a058 <HAL_SAI_Receive_DMA+0xb4>
    __HAL_LOCK(hsai);
24009fca:	f890 2090 	ldrb.w	r2, [r0, #144]	; 0x90
24009fce:	2a01      	cmp	r2, #1
24009fd0:	d042      	beq.n	2400a058 <HAL_SAI_Receive_DMA+0xb4>
    hsai->pBuffPtr = pData;
24009fd2:	6781      	str	r1, [r0, #120]	; 0x78
    hsai->State = HAL_SAI_STATE_BUSY_RX;
24009fd4:	2122      	movs	r1, #34	; 0x22
    hsai->XferSize = Size;
24009fd6:	67c3      	str	r3, [r0, #124]	; 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
24009fd8:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
24009fdc:	4b28      	ldr	r3, [pc, #160]	; (2400a080 <HAL_SAI_Receive_DMA+0xdc>)
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
24009fde:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
    __HAL_LOCK(hsai);
24009fe2:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
24009fe6:	f880 1091 	strb.w	r1, [r0, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
24009fea:	6413      	str	r3, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
24009fec:	4a25      	ldr	r2, [pc, #148]	; (2400a084 <HAL_SAI_Receive_DMA+0xe0>)
24009fee:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24009ff2:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
24009ff4:	4a24      	ldr	r2, [pc, #144]	; (2400a088 <HAL_SAI_Receive_DMA+0xe4>)
24009ff6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
24009ffa:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
24009ffc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
2400a000:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
2400a002:	6801      	ldr	r1, [r0, #0]
2400a004:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
2400a008:	6f82      	ldr	r2, [r0, #120]	; 0x78
2400a00a:	311c      	adds	r1, #28
2400a00c:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
2400a010:	f7fb f846 	bl	240050a0 <HAL_DMA_Start_IT>
2400a014:	bb30      	cbnz	r0, 2400a064 <HAL_SAI_Receive_DMA+0xc0>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a016:	6c63      	ldr	r3, [r4, #68]	; 0x44
2400a018:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a01a:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a01c:	d026      	beq.n	2400a06c <HAL_SAI_Receive_DMA+0xc8>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a01e:	2205      	movs	r2, #5
2400a020:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a022:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a024:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
2400a026:	2b01      	cmp	r3, #1
2400a028:	bf98      	it	ls
2400a02a:	4602      	movls	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a02c:	690b      	ldr	r3, [r1, #16]
2400a02e:	4313      	orrs	r3, r2
2400a030:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
2400a032:	6822      	ldr	r2, [r4, #0]
2400a034:	6813      	ldr	r3, [r2, #0]
2400a036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400a03a:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
2400a03c:	6823      	ldr	r3, [r4, #0]
2400a03e:	681a      	ldr	r2, [r3, #0]
2400a040:	03d2      	lsls	r2, r2, #15
2400a042:	d403      	bmi.n	2400a04c <HAL_SAI_Receive_DMA+0xa8>
      __HAL_SAI_ENABLE(hsai);
2400a044:	681a      	ldr	r2, [r3, #0]
2400a046:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400a04a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
2400a04c:	2300      	movs	r3, #0
    return HAL_OK;
2400a04e:	461e      	mov	r6, r3
    __HAL_UNLOCK(hsai);
2400a050:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
2400a054:	4630      	mov	r0, r6
2400a056:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
2400a058:	2602      	movs	r6, #2
}
2400a05a:	4630      	mov	r0, r6
2400a05c:	bd70      	pop	{r4, r5, r6, pc}
    return  HAL_ERROR;
2400a05e:	2601      	movs	r6, #1
}
2400a060:	4630      	mov	r0, r6
2400a062:	bd70      	pop	{r4, r5, r6, pc}
2400a064:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
2400a066:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
}
2400a06a:	bd70      	pop	{r4, r5, r6, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a06c:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a070:	2a01      	cmp	r2, #1
2400a072:	bf0b      	itete	eq
2400a074:	2215      	moveq	r2, #21
2400a076:	2205      	movne	r2, #5
2400a078:	2071      	moveq	r0, #113	; 0x71
2400a07a:	2061      	movne	r0, #97	; 0x61
2400a07c:	e7d1      	b.n	2400a022 <HAL_SAI_Receive_DMA+0x7e>
2400a07e:	bf00      	nop
2400a080:	2400a169 	.word	0x2400a169
2400a084:	2400a101 	.word	0x2400a101
2400a088:	2400a175 	.word	0x2400a175

2400a08c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
2400a08c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
2400a08e:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400a090:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
2400a092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400a096:	d01b      	beq.n	2400a0d0 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400a098:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
2400a09a:	2300      	movs	r3, #0
2400a09c:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400a0a0:	6813      	ldr	r3, [r2, #0]
2400a0a2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400a0a6:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a0a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
2400a0aa:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a0ac:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a0ae:	d012      	beq.n	2400a0d6 <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a0b0:	f06f 0c61 	mvn.w	ip, #97	; 0x61
2400a0b4:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a0b8:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a0ba:	3b02      	subs	r3, #2
2400a0bc:	2b01      	cmp	r3, #1
2400a0be:	bf98      	it	ls
2400a0c0:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a0c2:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
2400a0c4:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a0c8:	4013      	ands	r3, r2
2400a0ca:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
2400a0cc:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
2400a0d0:	f021 fb0a 	bl	2402b6e8 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
2400a0d4:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a0d6:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a0da:	2a01      	cmp	r2, #1
2400a0dc:	bf0b      	itete	eq
2400a0de:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
2400a0e2:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
2400a0e6:	f06f 0215 	mvneq.w	r2, #21
2400a0ea:	f06f 0205 	mvnne.w	r2, #5
2400a0ee:	e7e3      	b.n	2400a0b8 <SAI_DMATxCplt+0x2c>

2400a0f0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
2400a0f0:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
2400a0f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400a0f4:	f021 fb00 	bl	2402b6f8 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
2400a0f8:	bd08      	pop	{r3, pc}
2400a0fa:	bf00      	nop

2400a0fc <HAL_SAI_RxCpltCallback>:
2400a0fc:	4770      	bx	lr
2400a0fe:	bf00      	nop

2400a100 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
2400a100:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
2400a102:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400a104:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
2400a106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400a10a:	d01b      	beq.n	2400a144 <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400a10c:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
2400a10e:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
2400a110:	6813      	ldr	r3, [r2, #0]
2400a112:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400a116:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a118:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
2400a11a:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a11e:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a120:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a122:	d012      	beq.n	2400a14a <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a124:	f06f 0c61 	mvn.w	ip, #97	; 0x61
2400a128:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a12c:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
2400a12e:	3b02      	subs	r3, #2
2400a130:	2b01      	cmp	r3, #1
2400a132:	bf98      	it	ls
2400a134:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a136:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
2400a138:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
2400a13c:	4013      	ands	r3, r2
2400a13e:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
2400a140:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
2400a144:	f7ff ffda 	bl	2400a0fc <HAL_SAI_RxCpltCallback>
#endif
}
2400a148:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
2400a14a:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
2400a14e:	2a01      	cmp	r2, #1
2400a150:	bf0b      	itete	eq
2400a152:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
2400a156:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
2400a15a:	f06f 0215 	mvneq.w	r2, #21
2400a15e:	f06f 0205 	mvnne.w	r2, #5
2400a162:	e7e3      	b.n	2400a12c <SAI_DMARxCplt+0x2c>

2400a164 <HAL_SAI_RxHalfCpltCallback>:
2400a164:	4770      	bx	lr
2400a166:	bf00      	nop

2400a168 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
2400a168:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
2400a16a:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400a16c:	f7ff fffa 	bl	2400a164 <HAL_SAI_RxHalfCpltCallback>
#endif
}
2400a170:	bd08      	pop	{r3, pc}
2400a172:	bf00      	nop

2400a174 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
2400a174:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400a176:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400a178:	f7fc f9e2 	bl	24006540 <HAL_DMA_GetError>
2400a17c:	2802      	cmp	r0, #2
2400a17e:	d025      	beq.n	2400a1cc <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a180:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400a184:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a18a:	4814      	ldr	r0, [pc, #80]	; (2400a1dc <SAI_DMAError+0x68>)
2400a18c:	4a14      	ldr	r2, [pc, #80]	; (2400a1e0 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
2400a18e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
2400a192:	680b      	ldr	r3, [r1, #0]
2400a194:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
2400a198:	600b      	str	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a19a:	6803      	ldr	r3, [r0, #0]
  __HAL_SAI_DISABLE(hsai);
2400a19c:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a19e:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
2400a1a2:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a1a4:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
2400a1a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
2400a1aa:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
2400a1ac:	600a      	str	r2, [r1, #0]
    if (count == 0U)
2400a1ae:	b173      	cbz	r3, 2400a1ce <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400a1b0:	6822      	ldr	r2, [r4, #0]
    count--;
2400a1b2:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
2400a1b4:	6812      	ldr	r2, [r2, #0]
2400a1b6:	03d2      	lsls	r2, r2, #15
2400a1b8:	d4f9      	bmi.n	2400a1ae <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
2400a1ba:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
2400a1bc:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
2400a1be:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
2400a1c0:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
2400a1c4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
2400a1c8:	f021 faa6 	bl	2402b718 <__HAL_SAI_ErrorCallback_veneer>
#endif
  }
}
2400a1cc:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
2400a1ce:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
2400a1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a1d6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
2400a1da:	e7ee      	b.n	2400a1ba <SAI_DMAError+0x46>
2400a1dc:	200008ec 	.word	0x200008ec
2400a1e0:	95cbec1b 	.word	0x95cbec1b

2400a1e4 <HAL_SD_GetCardStatus.part.0>:
  * @param  hsd: Pointer to SD handle
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
2400a1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2400a1e8:	4604      	mov	r4, r0
2400a1ea:	b096      	sub	sp, #88	; 0x58
2400a1ec:	460d      	mov	r5, r1
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
2400a1ee:	f7fa fb3b 	bl	24004868 <HAL_GetTick>
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a1f2:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
2400a1f4:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400a1f6:	6820      	ldr	r0, [r4, #0]
2400a1f8:	f001 fcca 	bl	2400bb90 <SDMMC_GetResponse>
2400a1fc:	0181      	lsls	r1, r0, #6
2400a1fe:	d45a      	bmi.n	2400a2b6 <HAL_SD_GetCardStatus.part.0+0xd2>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
2400a200:	2140      	movs	r1, #64	; 0x40
2400a202:	6820      	ldr	r0, [r4, #0]
2400a204:	f001 fcde 	bl	2400bbc4 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a208:	b1e8      	cbz	r0, 2400a246 <HAL_SD_GetCardStatus.part.0+0x62>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
  if (errorstate != HAL_SD_ERROR_NONE)
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
2400a20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a20c:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a20e:	6823      	ldr	r3, [r4, #0]
2400a210:	4955      	ldr	r1, [pc, #340]	; (2400a368 <HAL_SD_GetCardStatus.part.0+0x184>)
    hsd->State = HAL_SD_STATE_READY;
2400a212:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a214:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
2400a216:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
2400a218:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a21a:	4303      	orrs	r3, r0
2400a21c:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a21e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400a222:	f44f 7100 	mov.w	r1, #512	; 0x200
2400a226:	6820      	ldr	r0, [r4, #0]
2400a228:	f001 fccc 	bl	2400bbc4 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a22c:	b138      	cbz	r0, 2400a23e <HAL_SD_GetCardStatus.part.0+0x5a>
    hsd->State = HAL_SD_STATE_READY;
2400a22e:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a230:	6822      	ldr	r2, [r4, #0]
2400a232:	494d      	ldr	r1, [pc, #308]	; (2400a368 <HAL_SD_GetCardStatus.part.0+0x184>)
    status = HAL_ERROR;
2400a234:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a236:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
2400a238:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a23a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400a23e:	4630      	mov	r0, r6
2400a240:	b016      	add	sp, #88	; 0x58
2400a242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400a246:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400a248:	6820      	ldr	r0, [r4, #0]
2400a24a:	0409      	lsls	r1, r1, #16
2400a24c:	f002 fa42 	bl	2400c6d4 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a250:	2800      	cmp	r0, #0
2400a252:	d1da      	bne.n	2400a20a <HAL_SD_GetCardStatus.part.0+0x26>
  config.DataLength    = 64U;
2400a254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400a258:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a25a:	4669      	mov	r1, sp
2400a25c:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
2400a25e:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400a262:	2260      	movs	r2, #96	; 0x60
2400a264:	2302      	movs	r3, #2
2400a266:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400a26a:	2200      	movs	r2, #0
2400a26c:	2301      	movs	r3, #1
2400a26e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a272:	f001 fc91 	bl	2400bb98 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
2400a276:	6820      	ldr	r0, [r4, #0]
2400a278:	f002 fdf8 	bl	2400ce6c <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a27c:	2800      	cmp	r0, #0
2400a27e:	d1c4      	bne.n	2400a20a <HAL_SD_GetCardStatus.part.0+0x26>
  uint32_t *pData = pSDstatus;
2400a280:	ae06      	add	r6, sp, #24
2400a282:	e004      	b.n	2400a28e <HAL_SD_GetCardStatus.part.0+0xaa>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
        pData++;
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400a284:	f7fa faf0 	bl	24004868 <HAL_GetTick>
2400a288:	1bc0      	subs	r0, r0, r7
2400a28a:	3001      	adds	r0, #1
2400a28c:	d017      	beq.n	2400a2be <HAL_SD_GetCardStatus.part.0+0xda>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400a28e:	6823      	ldr	r3, [r4, #0]
2400a290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400a292:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2400a296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400a298:	d114      	bne.n	2400a2c4 <HAL_SD_GetCardStatus.part.0+0xe0>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
2400a29a:	0412      	lsls	r2, r2, #16
2400a29c:	d5f2      	bpl.n	2400a284 <HAL_SD_GetCardStatus.part.0+0xa0>
2400a29e:	f106 0820 	add.w	r8, r6, #32
2400a2a2:	e000      	b.n	2400a2a6 <HAL_SD_GetCardStatus.part.0+0xc2>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
2400a2a4:	6823      	ldr	r3, [r4, #0]
2400a2a6:	4618      	mov	r0, r3
2400a2a8:	f001 fc5c 	bl	2400bb64 <SDMMC_ReadFIFO>
2400a2ac:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
2400a2b0:	4546      	cmp	r6, r8
2400a2b2:	d1f7      	bne.n	2400a2a4 <HAL_SD_GetCardStatus.part.0+0xc0>
2400a2b4:	e7e6      	b.n	2400a284 <HAL_SD_GetCardStatus.part.0+0xa0>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
2400a2b6:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400a2b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400a2bc:	e7a8      	b.n	2400a210 <HAL_SD_GetCardStatus.part.0+0x2c>
    {
      return HAL_SD_ERROR_TIMEOUT;
2400a2be:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400a2c2:	e7a4      	b.n	2400a20e <HAL_SD_GetCardStatus.part.0+0x2a>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a2c4:	0710      	lsls	r0, r2, #28
2400a2c6:	d449      	bmi.n	2400a35c <HAL_SD_GetCardStatus.part.0+0x178>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a2c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400a2ca:	0791      	lsls	r1, r2, #30
2400a2cc:	d448      	bmi.n	2400a360 <HAL_SD_GetCardStatus.part.0+0x17c>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400a2ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400a2d0:	0692      	lsls	r2, r2, #26
2400a2d2:	d50a      	bpl.n	2400a2ea <HAL_SD_GetCardStatus.part.0+0x106>
2400a2d4:	e046      	b.n	2400a364 <HAL_SD_GetCardStatus.part.0+0x180>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
2400a2d6:	f001 fc45 	bl	2400bb64 <SDMMC_ReadFIFO>
2400a2da:	f846 0b04 	str.w	r0, [r6], #4
    pData++;

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400a2de:	f7fa fac3 	bl	24004868 <HAL_GetTick>
2400a2e2:	1bc0      	subs	r0, r0, r7
2400a2e4:	3001      	adds	r0, #1
2400a2e6:	d0ea      	beq.n	2400a2be <HAL_SD_GetCardStatus.part.0+0xda>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a2e8:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
2400a2ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
2400a2ec:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
2400a2ee:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
2400a2f2:	d1f0      	bne.n	2400a2d6 <HAL_SD_GetCardStatus.part.0+0xf2>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a2f4:	491d      	ldr	r1, [pc, #116]	; (2400a36c <HAL_SD_GetCardStatus.part.0+0x188>)
  HAL_StatusTypeDef status = HAL_OK;
2400a2f6:	4616      	mov	r6, r2
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a2f8:	6399      	str	r1, [r3, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
2400a2fa:	9b06      	ldr	r3, [sp, #24]
2400a2fc:	f3c3 1281 	ubfx	r2, r3, #6, #2
2400a300:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
2400a302:	f3c3 1240 	ubfx	r2, r3, #5, #1
2400a306:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
2400a308:	0a1a      	lsrs	r2, r3, #8
2400a30a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
2400a30e:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
2400a312:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
2400a316:	b292      	uxth	r2, r2
2400a318:	ba09      	rev	r1, r1
2400a31a:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400a31c:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
2400a31e:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
2400a320:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
2400a322:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
2400a326:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
2400a32a:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
2400a32c:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400a330:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
2400a332:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
2400a334:	9a09      	ldr	r2, [sp, #36]	; 0x24
2400a336:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
2400a33a:	b2d0      	uxtb	r0, r2
2400a33c:	4303      	orrs	r3, r0
2400a33e:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
2400a340:	f3c2 2385 	ubfx	r3, r2, #10, #6
2400a344:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
2400a346:	f3c2 2301 	ubfx	r3, r2, #8, #2
2400a34a:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400a34c:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400a350:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
2400a354:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
2400a356:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
2400a358:	74a9      	strb	r1, [r5, #18]
2400a35a:	e762      	b.n	2400a222 <HAL_SD_GetCardStatus.part.0+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400a35c:	2008      	movs	r0, #8
2400a35e:	e757      	b.n	2400a210 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400a360:	2002      	movs	r0, #2
2400a362:	e755      	b.n	2400a210 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
2400a364:	2020      	movs	r0, #32
2400a366:	e753      	b.n	2400a210 <HAL_SD_GetCardStatus.part.0+0x2c>
2400a368:	1fe00fff 	.word	0x1fe00fff
2400a36c:	18000f3a 	.word	0x18000f3a

2400a370 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
2400a370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400a374:	4605      	mov	r5, r0
2400a376:	b086      	sub	sp, #24
2400a378:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
2400a37a:	f7fa fa75 	bl	24004868 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
2400a37e:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
2400a380:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
2400a382:	6828      	ldr	r0, [r5, #0]
2400a384:	f001 fc1e 	bl	2400bbc4 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a388:	4604      	mov	r4, r0
2400a38a:	b118      	cbz	r0, 2400a394 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
2400a38c:	4620      	mov	r0, r4
2400a38e:	b006      	add	sp, #24
2400a390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
2400a394:	6c69      	ldr	r1, [r5, #68]	; 0x44
2400a396:	6828      	ldr	r0, [r5, #0]
2400a398:	0409      	lsls	r1, r1, #16
2400a39a:	f002 f99b 	bl	2400c6d4 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a39e:	4604      	mov	r4, r0
2400a3a0:	2800      	cmp	r0, #0
2400a3a2:	d1f3      	bne.n	2400a38c <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
2400a3a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400a3a8:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a3aa:	4669      	mov	r1, sp
2400a3ac:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
2400a3ae:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400a3b2:	2230      	movs	r2, #48	; 0x30
2400a3b4:	2302      	movs	r3, #2
2400a3b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400a3ba:	2200      	movs	r2, #0
2400a3bc:	2301      	movs	r3, #1
2400a3be:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a3c2:	f001 fbe9 	bl	2400bb98 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
2400a3c6:	6828      	ldr	r0, [r5, #0]
2400a3c8:	f002 fb1c 	bl	2400ca04 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
2400a3cc:	4604      	mov	r4, r0
2400a3ce:	2800      	cmp	r0, #0
2400a3d0:	d1dc      	bne.n	2400a38c <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
2400a3d2:	4682      	mov	sl, r0
2400a3d4:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400a3d6:	f240 582a 	movw	r8, #1322	; 0x52a
2400a3da:	e004      	b.n	2400a3e6 <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400a3dc:	f7fa fa44 	bl	24004868 <HAL_GetTick>
2400a3e0:	1b83      	subs	r3, r0, r6
2400a3e2:	3301      	adds	r3, #1
2400a3e4:	d024      	beq.n	2400a430 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400a3e6:	6828      	ldr	r0, [r5, #0]
2400a3e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a3ea:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
2400a3ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
2400a3f0:	d10c      	bne.n	2400a40c <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
2400a3f2:	0319      	lsls	r1, r3, #12
2400a3f4:	d4f2      	bmi.n	2400a3dc <SD_FindSCR.constprop.0+0x6c>
2400a3f6:	2c00      	cmp	r4, #0
2400a3f8:	d1f0      	bne.n	2400a3dc <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
2400a3fa:	f001 fbb3 	bl	2400bb64 <SDMMC_ReadFIFO>
2400a3fe:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
2400a400:	6828      	ldr	r0, [r5, #0]
      index++;
2400a402:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
2400a404:	f001 fbae 	bl	2400bb64 <SDMMC_ReadFIFO>
2400a408:	4682      	mov	sl, r0
      index++;
2400a40a:	e7e7      	b.n	2400a3dc <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a40c:	071a      	lsls	r2, r3, #28
2400a40e:	d416      	bmi.n	2400a43e <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a410:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a412:	079b      	lsls	r3, r3, #30
2400a414:	d40f      	bmi.n	2400a436 <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400a416:	6b44      	ldr	r4, [r0, #52]	; 0x34
2400a418:	f014 0420 	ands.w	r4, r4, #32
2400a41c:	d113      	bne.n	2400a446 <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a41e:	fa9a f28a 	rev.w	r2, sl
2400a422:	fa99 f389 	rev.w	r3, r9
2400a426:	490a      	ldr	r1, [pc, #40]	; (2400a450 <SD_FindSCR.constprop.0+0xe0>)
2400a428:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
2400a42a:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
2400a42e:	e7ad      	b.n	2400a38c <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
2400a430:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
2400a434:	e7aa      	b.n	2400a38c <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400a436:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400a438:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
2400a43a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
2400a43c:	e7a6      	b.n	2400a38c <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2400a43e:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400a440:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
2400a442:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
2400a444:	e7a2      	b.n	2400a38c <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400a446:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
2400a448:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
2400a44a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
2400a44c:	e79e      	b.n	2400a38c <SD_FindSCR.constprop.0+0x1c>
2400a44e:	bf00      	nop
2400a450:	18000f3a 	.word	0x18000f3a

2400a454 <HAL_SD_ReadBlocks>:
{
2400a454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400a458:	460d      	mov	r5, r1
2400a45a:	b087      	sub	sp, #28
2400a45c:	4604      	mov	r4, r0
2400a45e:	4692      	mov	sl, r2
2400a460:	461f      	mov	r7, r3
2400a462:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
2400a466:	f7fa f9ff 	bl	24004868 <HAL_GetTick>
  if (NULL == pData)
2400a46a:	2d00      	cmp	r5, #0
2400a46c:	d069      	beq.n	2400a542 <HAL_SD_ReadBlocks+0xee>
  if (hsd->State == HAL_SD_STATE_READY)
2400a46e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400a472:	2b01      	cmp	r3, #1
2400a474:	fa5f f983 	uxtb.w	r9, r3
2400a478:	d152      	bne.n	2400a520 <HAL_SD_ReadBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a47a:	eb0a 0307 	add.w	r3, sl, r7
2400a47e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a480:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a482:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a484:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a486:	d866      	bhi.n	2400a556 <HAL_SD_ReadBlocks+0x102>
    hsd->State = HAL_SD_STATE_BUSY;
2400a488:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400a48a:	f04f 0b02 	mov.w	fp, #2
2400a48e:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
2400a490:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400a494:	6823      	ldr	r3, [r4, #0]
2400a496:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a498:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a49a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a49c:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a49e:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400a4a0:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400a4a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a4a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400a4ac:	bf18      	it	ne
2400a4ae:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a4b2:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400a4b4:	027b      	lsls	r3, r7, #9
2400a4b6:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
2400a4b8:	2390      	movs	r3, #144	; 0x90
2400a4ba:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a4be:	f001 fb6b 	bl	2400bb98 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a4c2:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400a4c4:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a4c6:	68d3      	ldr	r3, [r2, #12]
2400a4c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a4cc:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400a4ce:	d931      	bls.n	2400a534 <HAL_SD_ReadBlocks+0xe0>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400a4d0:	4651      	mov	r1, sl
2400a4d2:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
2400a4d4:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
2400a4d8:	f001 fcd0 	bl	2400be7c <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a4dc:	2800      	cmp	r0, #0
2400a4de:	d142      	bne.n	2400a566 <HAL_SD_ReadBlocks+0x112>
    dataremaining = config.DataLength;
2400a4e0:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400a4e4:	e004      	b.n	2400a4f0 <HAL_SD_ReadBlocks+0x9c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a4e6:	f7fa f9bf 	bl	24004868 <HAL_GetTick>
2400a4ea:	1b80      	subs	r0, r0, r6
2400a4ec:	4540      	cmp	r0, r8
2400a4ee:	d267      	bcs.n	2400a5c0 <HAL_SD_ReadBlocks+0x16c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
2400a4f0:	6820      	ldr	r0, [r4, #0]
2400a4f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a4f4:	f413 7f95 	tst.w	r3, #298	; 0x12a
2400a4f8:	d141      	bne.n	2400a57e <HAL_SD_ReadBlocks+0x12a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
2400a4fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a4fc:	041a      	lsls	r2, r3, #16
2400a4fe:	d5f2      	bpl.n	2400a4e6 <HAL_SD_ReadBlocks+0x92>
2400a500:	f1bb 0f1f 	cmp.w	fp, #31
2400a504:	d9ef      	bls.n	2400a4e6 <HAL_SD_ReadBlocks+0x92>
2400a506:	f105 0a20 	add.w	sl, r5, #32
2400a50a:	e000      	b.n	2400a50e <HAL_SD_ReadBlocks+0xba>
          data = SDMMC_ReadFIFO(hsd->Instance);
2400a50c:	6820      	ldr	r0, [r4, #0]
2400a50e:	f001 fb29 	bl	2400bb64 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
2400a512:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
2400a516:	45aa      	cmp	sl, r5
2400a518:	d1f8      	bne.n	2400a50c <HAL_SD_ReadBlocks+0xb8>
        dataremaining -= 32U;
2400a51a:	f1ab 0b20 	sub.w	fp, fp, #32
2400a51e:	e7e2      	b.n	2400a4e6 <HAL_SD_ReadBlocks+0x92>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a520:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a522:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a526:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400a52a:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a52c:	4648      	mov	r0, r9
2400a52e:	b007      	add	sp, #28
2400a530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400a534:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400a536:	4651      	mov	r1, sl
2400a538:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
2400a53a:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
2400a53c:	f001 fbf0 	bl	2400bd20 <SDMMC_CmdReadSingleBlock>
2400a540:	e7cc      	b.n	2400a4dc <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a542:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a544:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a548:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400a54c:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a54e:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a550:	b007      	add	sp, #28
2400a552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a556:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400a558:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a55a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400a55e:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a560:	b007      	add	sp, #28
2400a562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a566:	6823      	ldr	r3, [r4, #0]
2400a568:	4a30      	ldr	r2, [pc, #192]	; (2400a62c <HAL_SD_ReadBlocks+0x1d8>)
2400a56a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400a56c:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400a56e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a570:	4303      	orrs	r3, r0
2400a572:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
2400a574:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
2400a576:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400a57a:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400a57c:	e7d6      	b.n	2400a52c <HAL_SD_ReadBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400a57e:	68c3      	ldr	r3, [r0, #12]
2400a580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400a584:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400a586:	6820      	ldr	r0, [r4, #0]
2400a588:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a58a:	05db      	lsls	r3, r3, #23
2400a58c:	d501      	bpl.n	2400a592 <HAL_SD_ReadBlocks+0x13e>
2400a58e:	2f01      	cmp	r7, #1
2400a590:	d825      	bhi.n	2400a5de <HAL_SD_ReadBlocks+0x18a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a592:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a594:	f013 0308 	ands.w	r3, r3, #8
2400a598:	d135      	bne.n	2400a606 <HAL_SD_ReadBlocks+0x1b2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a59a:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400a59c:	f012 0202 	ands.w	r2, r2, #2
2400a5a0:	d126      	bne.n	2400a5f0 <HAL_SD_ReadBlocks+0x19c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
2400a5a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a5a4:	f013 0320 	ands.w	r3, r3, #32
2400a5a8:	d039      	beq.n	2400a61e <HAL_SD_ReadBlocks+0x1ca>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a5aa:	4b20      	ldr	r3, [pc, #128]	; (2400a62c <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400a5ac:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a5ae:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
2400a5b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a5b2:	f043 0320 	orr.w	r3, r3, #32
2400a5b6:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a5b8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a5bc:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a5be:	e7b5      	b.n	2400a52c <HAL_SD_ReadBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a5c0:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
2400a5c2:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a5c4:	4819      	ldr	r0, [pc, #100]	; (2400a62c <HAL_SD_ReadBlocks+0x1d8>)
        hsd->Context = SD_CONTEXT_NONE;
2400a5c6:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
2400a5c8:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a5cc:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
2400a5ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a5d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400a5d4:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400a5d6:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400a5da:	62e2      	str	r2, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
2400a5dc:	e7a6      	b.n	2400a52c <HAL_SD_ReadBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400a5de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a5e0:	2b03      	cmp	r3, #3
2400a5e2:	d0d6      	beq.n	2400a592 <HAL_SD_ReadBlocks+0x13e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400a5e4:	f001 fe54 	bl	2400c290 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400a5e8:	2800      	cmp	r0, #0
2400a5ea:	d1bc      	bne.n	2400a566 <HAL_SD_ReadBlocks+0x112>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a5ec:	6820      	ldr	r0, [r4, #0]
2400a5ee:	e7d0      	b.n	2400a592 <HAL_SD_ReadBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a5f0:	4a0e      	ldr	r2, [pc, #56]	; (2400a62c <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400a5f2:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a5f4:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400a5f6:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a5f8:	f042 0202 	orr.w	r2, r2, #2
2400a5fc:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a5fe:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a602:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a604:	e792      	b.n	2400a52c <HAL_SD_ReadBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a606:	4b09      	ldr	r3, [pc, #36]	; (2400a62c <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
2400a608:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a60a:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400a60c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a60e:	f043 0308 	orr.w	r3, r3, #8
2400a612:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400a614:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400a616:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a61a:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a61c:	e786      	b.n	2400a52c <HAL_SD_ReadBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a61e:	4904      	ldr	r1, [pc, #16]	; (2400a630 <HAL_SD_ReadBlocks+0x1dc>)
    hsd->State = HAL_SD_STATE_READY;
2400a620:	2201      	movs	r2, #1
    return HAL_OK;
2400a622:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a624:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400a626:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400a62a:	e77f      	b.n	2400a52c <HAL_SD_ReadBlocks+0xd8>
2400a62c:	1fe00fff 	.word	0x1fe00fff
2400a630:	18000f3a 	.word	0x18000f3a

2400a634 <HAL_SD_WriteBlocks>:
{
2400a634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400a638:	460d      	mov	r5, r1
2400a63a:	b089      	sub	sp, #36	; 0x24
2400a63c:	4604      	mov	r4, r0
2400a63e:	4692      	mov	sl, r2
2400a640:	461f      	mov	r7, r3
2400a642:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
2400a646:	f7fa f90f 	bl	24004868 <HAL_GetTick>
  if (NULL == pData)
2400a64a:	2d00      	cmp	r5, #0
2400a64c:	d068      	beq.n	2400a720 <HAL_SD_WriteBlocks+0xec>
  if (hsd->State == HAL_SD_STATE_READY)
2400a64e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400a652:	2b01      	cmp	r3, #1
2400a654:	fa5f f983 	uxtb.w	r9, r3
2400a658:	d152      	bne.n	2400a700 <HAL_SD_WriteBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a65a:	eb0a 0307 	add.w	r3, sl, r7
2400a65e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a660:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a662:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400a664:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
2400a666:	d865      	bhi.n	2400a734 <HAL_SD_WriteBlocks+0x100>
    hsd->State = HAL_SD_STATE_BUSY;
2400a668:	2303      	movs	r3, #3
2400a66a:	4606      	mov	r6, r0
2400a66c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
2400a670:	6823      	ldr	r3, [r4, #0]
2400a672:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a674:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a676:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a678:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
2400a67a:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
2400a67c:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
2400a680:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
2400a684:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
2400a68a:	bf18      	it	ne
2400a68c:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
2400a690:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
2400a692:	027b      	lsls	r3, r7, #9
2400a694:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
2400a696:	2390      	movs	r3, #144	; 0x90
2400a698:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
2400a69a:	f001 fa7d 	bl	2400bb98 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a69e:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
2400a6a0:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a6a2:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
2400a6a4:	68d3      	ldr	r3, [r2, #12]
2400a6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400a6aa:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
2400a6ac:	d932      	bls.n	2400a714 <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400a6ae:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a6b0:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
2400a6b2:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
2400a6b4:	f001 fd3e 	bl	2400c134 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
2400a6b8:	2800      	cmp	r0, #0
2400a6ba:	d143      	bne.n	2400a744 <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
2400a6bc:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400a6c0:	e004      	b.n	2400a6cc <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
2400a6c2:	f7fa f8d1 	bl	24004868 <HAL_GetTick>
2400a6c6:	1b80      	subs	r0, r0, r6
2400a6c8:	4540      	cmp	r0, r8
2400a6ca:	d268      	bcs.n	2400a79e <HAL_SD_WriteBlocks+0x16a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
2400a6cc:	6820      	ldr	r0, [r4, #0]
2400a6ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a6d0:	f413 7f8d 	tst.w	r3, #282	; 0x11a
2400a6d4:	d142      	bne.n	2400a75c <HAL_SD_WriteBlocks+0x128>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
2400a6d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a6d8:	045a      	lsls	r2, r3, #17
2400a6da:	d5f2      	bpl.n	2400a6c2 <HAL_SD_WriteBlocks+0x8e>
2400a6dc:	f1bb 0f1f 	cmp.w	fp, #31
2400a6e0:	d9ef      	bls.n	2400a6c2 <HAL_SD_WriteBlocks+0x8e>
2400a6e2:	f105 0a20 	add.w	sl, r5, #32
2400a6e6:	e000      	b.n	2400a6ea <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a6e8:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
2400a6ea:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a6ee:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
2400a6f0:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
2400a6f2:	f001 fa3b 	bl	2400bb6c <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
2400a6f6:	4555      	cmp	r5, sl
2400a6f8:	d1f6      	bne.n	2400a6e8 <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
2400a6fa:	f1ab 0b20 	sub.w	fp, fp, #32
2400a6fe:	e7e0      	b.n	2400a6c2 <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a700:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a702:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
2400a706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
2400a70a:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a70c:	4648      	mov	r0, r9
2400a70e:	b009      	add	sp, #36	; 0x24
2400a710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400a714:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400a716:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
2400a718:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
2400a71a:	f001 fc5d 	bl	2400bfd8 <SDMMC_CmdWriteSingleBlock>
2400a71e:	e7cb      	b.n	2400a6b8 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a720:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
2400a722:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a726:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
2400a72a:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400a72c:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a72e:	b009      	add	sp, #36	; 0x24
2400a730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a734:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
2400a736:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
2400a738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
2400a73c:	6363      	str	r3, [r4, #52]	; 0x34
}
2400a73e:	b009      	add	sp, #36	; 0x24
2400a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a744:	6823      	ldr	r3, [r4, #0]
2400a746:	4a30      	ldr	r2, [pc, #192]	; (2400a808 <HAL_SD_WriteBlocks+0x1d4>)
2400a748:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
2400a74a:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
2400a74c:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a74e:	4303      	orrs	r3, r0
2400a750:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
2400a752:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
2400a754:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
2400a758:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
2400a75a:	e7d7      	b.n	2400a70c <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
2400a75c:	68c3      	ldr	r3, [r0, #12]
2400a75e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400a762:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
2400a764:	6820      	ldr	r0, [r4, #0]
2400a766:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a768:	05db      	lsls	r3, r3, #23
2400a76a:	d501      	bpl.n	2400a770 <HAL_SD_WriteBlocks+0x13c>
2400a76c:	2f01      	cmp	r7, #1
2400a76e:	d823      	bhi.n	2400a7b8 <HAL_SD_WriteBlocks+0x184>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
2400a770:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a772:	f013 0308 	ands.w	r3, r3, #8
2400a776:	d133      	bne.n	2400a7e0 <HAL_SD_WriteBlocks+0x1ac>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
2400a778:	6b42      	ldr	r2, [r0, #52]	; 0x34
2400a77a:	f012 0202 	ands.w	r2, r2, #2
2400a77e:	d124      	bne.n	2400a7ca <HAL_SD_WriteBlocks+0x196>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
2400a780:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400a782:	f013 0310 	ands.w	r3, r3, #16
2400a786:	d037      	beq.n	2400a7f8 <HAL_SD_WriteBlocks+0x1c4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a788:	4b1f      	ldr	r3, [pc, #124]	; (2400a808 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
2400a78a:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a78c:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
2400a78e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a790:	f043 0310 	orr.w	r3, r3, #16
2400a794:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a796:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a79a:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a79c:	e7b6      	b.n	2400a70c <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a79e:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
2400a7a0:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a7a2:	4819      	ldr	r0, [pc, #100]	; (2400a808 <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
2400a7a4:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
2400a7a6:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a7aa:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
2400a7ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
2400a7ae:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
2400a7b0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
2400a7b4:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
2400a7b6:	e7a9      	b.n	2400a70c <HAL_SD_WriteBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
2400a7b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400a7ba:	2b03      	cmp	r3, #3
2400a7bc:	d0d8      	beq.n	2400a770 <HAL_SD_WriteBlocks+0x13c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
2400a7be:	f001 fd67 	bl	2400c290 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
2400a7c2:	2800      	cmp	r0, #0
2400a7c4:	d1be      	bne.n	2400a744 <HAL_SD_WriteBlocks+0x110>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a7c6:	6820      	ldr	r0, [r4, #0]
2400a7c8:	e7d2      	b.n	2400a770 <HAL_SD_WriteBlocks+0x13c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a7ca:	4a0f      	ldr	r2, [pc, #60]	; (2400a808 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
2400a7cc:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a7ce:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
2400a7d0:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400a7d2:	f042 0202 	orr.w	r2, r2, #2
2400a7d6:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400a7d8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a7dc:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a7de:	e795      	b.n	2400a70c <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a7e0:	4b09      	ldr	r3, [pc, #36]	; (2400a808 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
2400a7e2:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a7e4:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
2400a7e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400a7e8:	f043 0308 	orr.w	r3, r3, #8
2400a7ec:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
2400a7ee:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
2400a7f0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
2400a7f4:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
2400a7f6:	e789      	b.n	2400a70c <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a7f8:	4904      	ldr	r1, [pc, #16]	; (2400a80c <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
2400a7fa:	2201      	movs	r2, #1
    return HAL_OK;
2400a7fc:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
2400a7fe:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
2400a800:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
2400a804:	e782      	b.n	2400a70c <HAL_SD_WriteBlocks+0xd8>
2400a806:	bf00      	nop
2400a808:	1fe00fff 	.word	0x1fe00fff
2400a80c:	18000f3a 	.word	0x18000f3a

2400a810 <HAL_SD_GetCardCSD>:
{
2400a810:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400a812:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400a814:	f04f 0c00 	mov.w	ip, #0
{
2400a818:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
2400a81a:	0f92      	lsrs	r2, r2, #30
2400a81c:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
2400a81e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
2400a820:	f3c2 6283 	ubfx	r2, r2, #26, #4
2400a824:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
2400a826:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
2400a82a:	f002 0203 	and.w	r2, r2, #3
2400a82e:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
2400a830:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
2400a834:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
2400a836:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
2400a83a:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
2400a83c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
2400a840:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
2400a842:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a844:	0d12      	lsrs	r2, r2, #20
2400a846:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
2400a848:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
2400a84c:	f002 020f 	and.w	r2, r2, #15
2400a850:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
2400a852:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a854:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400a858:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
2400a85a:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a85c:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400a860:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
2400a862:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a864:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400a868:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
2400a86a:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a86c:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400a870:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
2400a872:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
2400a876:	6b82      	ldr	r2, [r0, #56]	; 0x38
2400a878:	2a00      	cmp	r2, #0
2400a87a:	f040 808a 	bne.w	2400a992 <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
2400a87e:	6e04      	ldr	r4, [r0, #96]	; 0x60
2400a880:	f640 72fc 	movw	r2, #4092	; 0xffc
2400a884:	6e40      	ldr	r0, [r0, #100]	; 0x64
2400a886:	ea02 0284 	and.w	r2, r2, r4, lsl #2
2400a88a:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
2400a88e:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
2400a890:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a892:	f3c2 62c2 	ubfx	r2, r2, #27, #3
2400a896:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
2400a898:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
2400a89c:	f002 0207 	and.w	r2, r2, #7
2400a8a0:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
2400a8a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a8a4:	f3c2 5242 	ubfx	r2, r2, #21, #3
2400a8a8:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
2400a8aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a8ac:	f3c2 4282 	ubfx	r2, r2, #18, #3
2400a8b0:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
2400a8b2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a8b4:	f3c2 32c2 	ubfx	r2, r2, #15, #3
2400a8b8:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
2400a8ba:	690a      	ldr	r2, [r1, #16]
2400a8bc:	3201      	adds	r2, #1
2400a8be:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400a8c0:	7e08      	ldrb	r0, [r1, #24]
2400a8c2:	f000 0007 	and.w	r0, r0, #7
2400a8c6:	3002      	adds	r0, #2
2400a8c8:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a8ca:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
2400a8cc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a8ce:	f891 c008 	ldrb.w	ip, [r1, #8]
2400a8d2:	f00c 0c0f 	and.w	ip, ip, #15
2400a8d6:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400a8da:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
2400a8de:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
2400a8e0:	fb02 f20c 	mul.w	r2, r2, ip
2400a8e4:	651a      	str	r2, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400a8e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.LogBlockSize = 512U;
2400a8e8:	f44f 7400 	mov.w	r4, #512	; 0x200
  pCSD->Reserved3 = 0;
2400a8ec:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
2400a8ee:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400a8f2:	f3c2 3280 	ubfx	r2, r2, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
2400a8f6:	655c      	str	r4, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
2400a8f8:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
2400a8fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a8fc:	f3c2 12c6 	ubfx	r2, r2, #7, #7
2400a900:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
2400a902:	6e5a      	ldr	r2, [r3, #100]	; 0x64
2400a904:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400a908:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
2400a90a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a90c:	0fd2      	lsrs	r2, r2, #31
2400a90e:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
2400a910:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a912:	f3c2 7241 	ubfx	r2, r2, #29, #2
2400a916:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
2400a918:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a91a:	f3c2 6282 	ubfx	r2, r2, #26, #3
2400a91e:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
2400a920:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a922:	f3c2 5283 	ubfx	r2, r2, #22, #4
2400a926:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
2400a928:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a92a:	f3c2 5240 	ubfx	r2, r2, #21, #1
2400a92e:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
2400a932:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
2400a936:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
2400a93a:	ea02 020c 	and.w	r2, r2, ip
2400a93e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
2400a942:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a944:	f3c2 32c0 	ubfx	r2, r2, #15, #1
2400a948:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
2400a94c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a94e:	f3c2 3280 	ubfx	r2, r2, #14, #1
2400a952:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
2400a956:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a958:	f3c2 3240 	ubfx	r2, r2, #13, #1
2400a95c:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
2400a960:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a962:	f3c2 3200 	ubfx	r2, r2, #12, #1
2400a966:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
2400a96a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a96c:	f3c2 2281 	ubfx	r2, r2, #10, #2
2400a970:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
2400a974:	6e9a      	ldr	r2, [r3, #104]	; 0x68
2400a976:	f3c2 2201 	ubfx	r2, r2, #8, #2
2400a97a:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
2400a97e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400a980:	f3c3 0346 	ubfx	r3, r3, #1, #7
2400a984:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
2400a988:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
2400a98c:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a990:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
2400a992:	2a01      	cmp	r2, #1
2400a994:	d110      	bne.n	2400a9b8 <HAL_SD_GetCardCSD+0x1a8>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400a996:	6e02      	ldr	r2, [r0, #96]	; 0x60
2400a998:	f8b0 4066 	ldrh.w	r4, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
2400a99c:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
2400a9a0:	0412      	lsls	r2, r2, #16
2400a9a2:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
2400a9a6:	4322      	orrs	r2, r4
2400a9a8:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400a9aa:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
2400a9ac:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
2400a9ae:	3201      	adds	r2, #1
2400a9b0:	0292      	lsls	r2, r2, #10
2400a9b2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
2400a9b4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
2400a9b6:	e796      	b.n	2400a8e6 <HAL_SD_GetCardCSD+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a9b8:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
2400a9ba:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400a9bc:	4805      	ldr	r0, [pc, #20]	; (2400a9d4 <HAL_SD_GetCardCSD+0x1c4>)
2400a9be:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
2400a9c0:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400a9c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2400a9c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
2400a9c8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400a9ca:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
2400a9ce:	f85d 4b04 	ldr.w	r4, [sp], #4
2400a9d2:	4770      	bx	lr
2400a9d4:	1fe00fff 	.word	0x1fe00fff

2400a9d8 <HAL_SD_InitCard>:
{
2400a9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a9da:	2200      	movs	r2, #0
{
2400a9dc:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a9de:	2300      	movs	r3, #0
{
2400a9e0:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400a9e2:	2100      	movs	r1, #0
2400a9e4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
2400a9e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
2400a9ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400a9f0:	f7fe fd6a 	bl	240094c8 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
2400a9f4:	b940      	cbnz	r0, 2400aa08 <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
2400a9f6:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400a9f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
2400a9fc:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
2400aa00:	6363      	str	r3, [r4, #52]	; 0x34
}
2400aa02:	4630      	mov	r0, r6
2400aa04:	b015      	add	sp, #84	; 0x54
2400aa06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400aa08:	0a06      	lsrs	r6, r0, #8
2400aa0a:	4b8e      	ldr	r3, [pc, #568]	; (2400ac44 <HAL_SD_InitCard+0x26c>)
  (void)SDMMC_Init(hsd->Instance, Init);
2400aa0c:	aa07      	add	r2, sp, #28
2400aa0e:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400aa10:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
2400aa14:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
2400aa16:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
2400aa18:	9608      	str	r6, [sp, #32]
2400aa1a:	e892 0003 	ldmia.w	r2, {r0, r1}
2400aa1e:	e88d 0003 	stmia.w	sp, {r0, r1}
2400aa22:	cb0e      	ldmia	r3, {r1, r2, r3}
2400aa24:	6820      	ldr	r0, [r4, #0]
2400aa26:	f001 f881 	bl	2400bb2c <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
2400aa2a:	6820      	ldr	r0, [r4, #0]
2400aa2c:	f001 f8a4 	bl	2400bb78 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
2400aa30:	4b85      	ldr	r3, [pc, #532]	; (2400ac48 <HAL_SD_InitCard+0x270>)
2400aa32:	429d      	cmp	r5, r3
2400aa34:	d902      	bls.n	2400aa3c <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
2400aa36:	0076      	lsls	r6, r6, #1
2400aa38:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
2400aa3c:	4883      	ldr	r0, [pc, #524]	; (2400ac4c <HAL_SD_InitCard+0x274>)
2400aa3e:	fbb0 f0f5 	udiv	r0, r0, r5
2400aa42:	3001      	adds	r0, #1
2400aa44:	f7f9 ff16 	bl	24004874 <HAL_Delay>
  __IO uint32_t count = 0U;
2400aa48:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400aa4a:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
2400aa4c:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400aa4e:	f001 fdd5 	bl	2400c5fc <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
2400aa52:	4605      	mov	r5, r0
2400aa54:	b140      	cbz	r0, 2400aa68 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
2400aa56:	2601      	movs	r6, #1
2400aa58:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
2400aa5c:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400aa5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400aa60:	432b      	orrs	r3, r5
2400aa62:	6363      	str	r3, [r4, #52]	; 0x34
}
2400aa64:	b015      	add	sp, #84	; 0x54
2400aa66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
2400aa68:	6820      	ldr	r0, [r4, #0]
2400aa6a:	f001 fdf3 	bl	2400c654 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
2400aa6e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
2400aa72:	f000 80ce 	beq.w	2400ac12 <HAL_SD_InitCard+0x23a>
    hsd->SdCard.CardVersion = CARD_V2_X;
2400aa76:	2301      	movs	r3, #1
2400aa78:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400aa7a:	2100      	movs	r1, #0
2400aa7c:	6820      	ldr	r0, [r4, #0]
2400aa7e:	f001 fe29 	bl	2400c6d4 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400aa82:	bb08      	cbnz	r0, 2400aac8 <HAL_SD_InitCard+0xf0>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400aa84:	9b03      	ldr	r3, [sp, #12]
2400aa86:	f64f 76fe 	movw	r6, #65534	; 0xfffe
2400aa8a:	42b3      	cmp	r3, r6
2400aa8c:	f200 80d3 	bhi.w	2400ac36 <HAL_SD_InitCard+0x25e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400aa90:	4f6f      	ldr	r7, [pc, #444]	; (2400ac50 <HAL_SD_InitCard+0x278>)
2400aa92:	e010      	b.n	2400aab6 <HAL_SD_InitCard+0xde>
2400aa94:	6820      	ldr	r0, [r4, #0]
2400aa96:	f001 fecb 	bl	2400c830 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400aa9a:	4601      	mov	r1, r0
2400aa9c:	b9a0      	cbnz	r0, 2400aac8 <HAL_SD_InitCard+0xf0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400aa9e:	6820      	ldr	r0, [r4, #0]
2400aaa0:	f001 f876 	bl	2400bb90 <SDMMC_GetResponse>
    count++;
2400aaa4:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400aaa6:	2800      	cmp	r0, #0
    count++;
2400aaa8:	f103 0301 	add.w	r3, r3, #1
2400aaac:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
2400aaae:	9b03      	ldr	r3, [sp, #12]
2400aab0:	db0d      	blt.n	2400aace <HAL_SD_InitCard+0xf6>
2400aab2:	42b3      	cmp	r3, r6
2400aab4:	d80b      	bhi.n	2400aace <HAL_SD_InitCard+0xf6>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
2400aab6:	2100      	movs	r1, #0
2400aab8:	6820      	ldr	r0, [r4, #0]
2400aaba:	f001 fe0b 	bl	2400c6d4 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
2400aabe:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
2400aac0:	2800      	cmp	r0, #0
2400aac2:	d0e7      	beq.n	2400aa94 <HAL_SD_InitCard+0xbc>
2400aac4:	4605      	mov	r5, r0
2400aac6:	e7c6      	b.n	2400aa56 <HAL_SD_InitCard+0x7e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400aac8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
2400aacc:	e7c3      	b.n	2400aa56 <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400aace:	9a03      	ldr	r2, [sp, #12]
2400aad0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
2400aad4:	429a      	cmp	r2, r3
2400aad6:	f200 80b2 	bhi.w	2400ac3e <HAL_SD_InitCard+0x266>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400aada:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  hsd->SdCard.CardType = CARD_SDSC;
2400aade:	f04f 0300 	mov.w	r3, #0
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
2400aae2:	bf18      	it	ne
2400aae4:	2501      	movne	r5, #1
  hsd->SdCard.CardType = CARD_SDSC;
2400aae6:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
2400aae8:	2300      	movs	r3, #0
2400aaea:	63a5      	str	r5, [r4, #56]	; 0x38
2400aaec:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
2400aaf0:	f7f9 feba 	bl	24004868 <HAL_GetTick>
2400aaf4:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
2400aaf6:	6820      	ldr	r0, [r4, #0]
2400aaf8:	f001 f846 	bl	2400bb88 <SDMMC_GetPowerState>
2400aafc:	b350      	cbz	r0, 2400ab54 <HAL_SD_InitCard+0x17c>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400aafe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
2400ab00:	2b03      	cmp	r3, #3
2400ab02:	d132      	bne.n	2400ab6a <HAL_SD_InitCard+0x192>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400ab04:	2104      	movs	r1, #4
2400ab06:	6820      	ldr	r0, [r4, #0]
2400ab08:	f001 f842 	bl	2400bb90 <SDMMC_GetResponse>
2400ab0c:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400ab0e:	a909      	add	r1, sp, #36	; 0x24
2400ab10:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
2400ab12:	0d1b      	lsrs	r3, r3, #20
2400ab14:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
2400ab16:	f7ff fe7b 	bl	2400a810 <HAL_SD_GetCardCSD>
2400ab1a:	4606      	mov	r6, r0
2400ab1c:	2800      	cmp	r0, #0
2400ab1e:	f040 8084 	bne.w	2400ac2a <HAL_SD_InitCard+0x252>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
2400ab22:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400ab24:	6820      	ldr	r0, [r4, #0]
2400ab26:	0409      	lsls	r1, r1, #16
2400ab28:	f001 fcba 	bl	2400c4a0 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
2400ab2c:	b9a0      	cbnz	r0, 2400ab58 <HAL_SD_InitCard+0x180>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400ab2e:	f44f 7100 	mov.w	r1, #512	; 0x200
2400ab32:	6820      	ldr	r0, [r4, #0]
2400ab34:	f001 f846 	bl	2400bbc4 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400ab38:	2800      	cmp	r0, #0
2400ab3a:	f43f af62 	beq.w	2400aa02 <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ab3e:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
2400ab40:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ab42:	4944      	ldr	r1, [pc, #272]	; (2400ac54 <HAL_SD_InitCard+0x27c>)
    return HAL_ERROR;
2400ab44:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ab46:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400ab48:	6b62      	ldr	r2, [r4, #52]	; 0x34
2400ab4a:	4310      	orrs	r0, r2
2400ab4c:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
2400ab4e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
2400ab52:	e756      	b.n	2400aa02 <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400ab54:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
2400ab58:	2601      	movs	r6, #1
2400ab5a:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
2400ab5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ab60:	4303      	orrs	r3, r0
}
2400ab62:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
2400ab64:	6363      	str	r3, [r4, #52]	; 0x34
}
2400ab66:	b015      	add	sp, #84	; 0x54
2400ab68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
2400ab6a:	6820      	ldr	r0, [r4, #0]
2400ab6c:	f001 fff2 	bl	2400cb54 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
2400ab70:	2800      	cmp	r0, #0
2400ab72:	d1f1      	bne.n	2400ab58 <HAL_SD_InitCard+0x180>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400ab74:	4601      	mov	r1, r0
2400ab76:	6820      	ldr	r0, [r4, #0]
2400ab78:	f001 f80a 	bl	2400bb90 <SDMMC_GetResponse>
2400ab7c:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400ab7e:	2104      	movs	r1, #4
2400ab80:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400ab82:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400ab84:	f001 f804 	bl	2400bb90 <SDMMC_GetResponse>
2400ab88:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400ab8a:	2108      	movs	r1, #8
2400ab8c:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400ab8e:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400ab90:	f000 fffe 	bl	2400bb90 <SDMMC_GetResponse>
2400ab94:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400ab96:	210c      	movs	r1, #12
2400ab98:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400ab9a:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400ab9c:	f000 fff8 	bl	2400bb90 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400aba0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400aba2:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
2400aba4:	2b03      	cmp	r3, #3
2400aba6:	d0ad      	beq.n	2400ab04 <HAL_SD_InitCard+0x12c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400aba8:	f241 3687 	movw	r6, #4999	; 0x1387
2400abac:	e009      	b.n	2400abc2 <HAL_SD_InitCard+0x1ea>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400abae:	6820      	ldr	r0, [r4, #0]
2400abb0:	f002 f84e 	bl	2400cc50 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
2400abb4:	2800      	cmp	r0, #0
2400abb6:	d1cf      	bne.n	2400ab58 <HAL_SD_InitCard+0x180>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
2400abb8:	f7f9 fe56 	bl	24004868 <HAL_GetTick>
2400abbc:	1b43      	subs	r3, r0, r5
2400abbe:	42b3      	cmp	r3, r6
2400abc0:	d836      	bhi.n	2400ac30 <HAL_SD_InitCard+0x258>
    while (sd_rca == 0U)
2400abc2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
2400abc6:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
2400abca:	2b00      	cmp	r3, #0
2400abcc:	d0ef      	beq.n	2400abae <HAL_SD_InitCard+0x1d6>
  if (hsd->SdCard.CardType != CARD_SECURED)
2400abce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
2400abd0:	2a03      	cmp	r2, #3
2400abd2:	d097      	beq.n	2400ab04 <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400abd4:	0419      	lsls	r1, r3, #16
2400abd6:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
2400abd8:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400abda:	f001 fff9 	bl	2400cbd0 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
2400abde:	2800      	cmp	r0, #0
2400abe0:	d1ba      	bne.n	2400ab58 <HAL_SD_InitCard+0x180>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400abe2:	4601      	mov	r1, r0
2400abe4:	6820      	ldr	r0, [r4, #0]
2400abe6:	f000 ffd3 	bl	2400bb90 <SDMMC_GetResponse>
2400abea:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400abec:	2104      	movs	r1, #4
2400abee:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400abf0:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400abf2:	f000 ffcd 	bl	2400bb90 <SDMMC_GetResponse>
2400abf6:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400abf8:	2108      	movs	r1, #8
2400abfa:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
2400abfc:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400abfe:	f000 ffc7 	bl	2400bb90 <SDMMC_GetResponse>
2400ac02:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400ac04:	210c      	movs	r1, #12
2400ac06:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
2400ac08:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
2400ac0a:	f000 ffc1 	bl	2400bb90 <SDMMC_GetResponse>
2400ac0e:	66a0      	str	r0, [r4, #104]	; 0x68
2400ac10:	e778      	b.n	2400ab04 <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400ac12:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
2400ac14:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
2400ac16:	f001 fcf1 	bl	2400c5fc <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
2400ac1a:	2800      	cmp	r0, #0
2400ac1c:	f47f af52 	bne.w	2400aac4 <HAL_SD_InitCard+0xec>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
2400ac20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2400ac22:	2b01      	cmp	r3, #1
2400ac24:	f47f af2e 	bne.w	2400aa84 <HAL_SD_InitCard+0xac>
2400ac28:	e727      	b.n	2400aa7a <HAL_SD_InitCard+0xa2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400ac2a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
2400ac2e:	e793      	b.n	2400ab58 <HAL_SD_InitCard+0x180>
        return HAL_SD_ERROR_TIMEOUT;
2400ac30:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
2400ac34:	e790      	b.n	2400ab58 <HAL_SD_InitCard+0x180>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
2400ac36:	9b03      	ldr	r3, [sp, #12]
2400ac38:	42b3      	cmp	r3, r6
2400ac3a:	f67f af55 	bls.w	2400aae8 <HAL_SD_InitCard+0x110>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
2400ac3e:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
2400ac42:	e708      	b.n	2400aa56 <HAL_SD_InitCard+0x7e>
2400ac44:	014f8b59 	.word	0x014f8b59
2400ac48:	000c34ff 	.word	0x000c34ff
2400ac4c:	00012110 	.word	0x00012110
2400ac50:	c1100000 	.word	0xc1100000
2400ac54:	1fe00fff 	.word	0x1fe00fff

2400ac58 <HAL_SD_GetCardInfo>:
{
2400ac58:	4603      	mov	r3, r0
}
2400ac5a:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
2400ac5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2400ac5e:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
2400ac60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2400ac62:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
2400ac64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
2400ac66:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
2400ac68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400ac6a:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
2400ac6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
2400ac6e:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
2400ac70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2400ac72:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
2400ac74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2400ac76:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
2400ac78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400ac7a:	61cb      	str	r3, [r1, #28]
}
2400ac7c:	4770      	bx	lr
2400ac7e:	bf00      	nop

2400ac80 <HAL_SD_ConfigWideBusOperation>:
{
2400ac80:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
2400ac82:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
2400ac84:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
2400ac86:	b089      	sub	sp, #36	; 0x24
2400ac88:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
2400ac8a:	4293      	cmp	r3, r2
{
2400ac8c:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
2400ac8e:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
2400ac92:	d040      	beq.n	2400ad16 <HAL_SD_ConfigWideBusOperation+0x96>
    if (WideMode == SDMMC_BUS_WIDE_8B)
2400ac94:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
2400ac98:	d03d      	beq.n	2400ad16 <HAL_SD_ConfigWideBusOperation+0x96>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
2400ac9a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400ac9e:	d07d      	beq.n	2400ad9c <HAL_SD_ConfigWideBusOperation+0x11c>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
2400aca0:	2900      	cmp	r1, #0
2400aca2:	d05c      	beq.n	2400ad5e <HAL_SD_ConfigWideBusOperation+0xde>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
2400aca4:	6b43      	ldr	r3, [r0, #52]	; 0x34
2400aca6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400acaa:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400acac:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400acae:	2b00      	cmp	r3, #0
2400acb0:	d138      	bne.n	2400ad24 <HAL_SD_ConfigWideBusOperation+0xa4>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
2400acb2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
2400acb6:	2100      	movs	r1, #0
2400acb8:	f7fe fc06 	bl	240094c8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
2400acbc:	2800      	cmp	r0, #0
2400acbe:	d048      	beq.n	2400ad52 <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400acc0:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400acc2:	4b50      	ldr	r3, [pc, #320]	; (2400ae04 <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400acc4:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
2400acc6:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
2400acc8:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400acca:	fba3 5300 	umull	r5, r3, r3, r0
2400acce:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
2400acd0:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400acd2:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400acd6:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400acd8:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
2400acdc:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
2400acde:	d20e      	bcs.n	2400acfe <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
2400ace0:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400ace2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
2400ace6:	d00a      	beq.n	2400acfe <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
2400ace8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
2400acec:	d078      	beq.n	2400ade0 <HAL_SD_ConfigWideBusOperation+0x160>
        if (hsd->Init.ClockDiv == 0U)
2400acee:	b112      	cbz	r2, 2400acf6 <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
2400acf0:	0053      	lsls	r3, r2, #1
2400acf2:	fbb0 f0f3 	udiv	r0, r0, r3
2400acf6:	4b44      	ldr	r3, [pc, #272]	; (2400ae08 <HAL_SD_ConfigWideBusOperation+0x188>)
2400acf8:	4298      	cmp	r0, r3
2400acfa:	bf88      	it	hi
2400acfc:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
2400acfe:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
2400ad00:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
2400ad02:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
2400ad04:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
2400ad06:	c903      	ldmia	r1, {r0, r1}
2400ad08:	e88d 0003 	stmia.w	sp, {r0, r1}
2400ad0c:	cb0e      	ldmia	r3, {r1, r2, r3}
2400ad0e:	6820      	ldr	r0, [r4, #0]
2400ad10:	f000 ff0c 	bl	2400bb2c <SDMMC_Init>
2400ad14:	e00a      	b.n	2400ad2c <HAL_SD_ConfigWideBusOperation+0xac>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
2400ad16:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ad18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2400ad1c:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
2400ad1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ad20:	2b00      	cmp	r3, #0
2400ad22:	d0c6      	beq.n	2400acb2 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad24:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400ad26:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad28:	4a38      	ldr	r2, [pc, #224]	; (2400ae0c <HAL_SD_ConfigWideBusOperation+0x18c>)
2400ad2a:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
2400ad2c:	f44f 7100 	mov.w	r1, #512	; 0x200
2400ad30:	6820      	ldr	r0, [r4, #0]
2400ad32:	f000 ff47 	bl	2400bbc4 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
2400ad36:	b130      	cbz	r0, 2400ad46 <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad38:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
2400ad3a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
2400ad3c:	4a33      	ldr	r2, [pc, #204]	; (2400ae0c <HAL_SD_ConfigWideBusOperation+0x18c>)
2400ad3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
2400ad40:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ad42:	4303      	orrs	r3, r0
2400ad44:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
2400ad46:	2301      	movs	r3, #1
}
2400ad48:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
2400ad4a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
2400ad4e:	b009      	add	sp, #36	; 0x24
2400ad50:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400ad52:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400ad54:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
2400ad56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
2400ad5a:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
2400ad5c:	e7e6      	b.n	2400ad2c <HAL_SD_ConfigWideBusOperation+0xac>
  uint32_t scr[2U] = {0UL, 0UL};
2400ad5e:	2200      	movs	r2, #0
2400ad60:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400ad62:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400ad64:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400ad68:	f000 ff12 	bl	2400bb90 <SDMMC_GetResponse>
2400ad6c:	0182      	lsls	r2, r0, #6
2400ad6e:	d434      	bmi.n	2400adda <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
2400ad70:	a902      	add	r1, sp, #8
2400ad72:	4620      	mov	r0, r4
2400ad74:	f7ff fafc 	bl	2400a370 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
2400ad78:	b960      	cbnz	r0, 2400ad94 <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400ad7a:	9b03      	ldr	r3, [sp, #12]
2400ad7c:	03db      	lsls	r3, r3, #15
2400ad7e:	d535      	bpl.n	2400adec <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400ad80:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400ad82:	6820      	ldr	r0, [r4, #0]
2400ad84:	0409      	lsls	r1, r1, #16
2400ad86:	f001 fca5 	bl	2400c6d4 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400ad8a:	b918      	cbnz	r0, 2400ad94 <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
2400ad8c:	4601      	mov	r1, r0
2400ad8e:	6820      	ldr	r0, [r4, #0]
2400ad90:	f001 fd8a 	bl	2400c8a8 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
2400ad94:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400ad96:	4303      	orrs	r3, r0
2400ad98:	6363      	str	r3, [r4, #52]	; 0x34
2400ad9a:	e7c0      	b.n	2400ad1e <HAL_SD_ConfigWideBusOperation+0x9e>
  uint32_t scr[2U] = {0UL, 0UL};
2400ad9c:	2200      	movs	r2, #0
2400ad9e:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400ada0:	2100      	movs	r1, #0
2400ada2:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
2400ada4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
2400ada8:	f000 fef2 	bl	2400bb90 <SDMMC_GetResponse>
2400adac:	0180      	lsls	r0, r0, #6
2400adae:	d414      	bmi.n	2400adda <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
2400adb0:	a902      	add	r1, sp, #8
2400adb2:	4620      	mov	r0, r4
2400adb4:	f7ff fadc 	bl	2400a370 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
2400adb8:	2800      	cmp	r0, #0
2400adba:	d1eb      	bne.n	2400ad94 <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
2400adbc:	9b03      	ldr	r3, [sp, #12]
2400adbe:	0359      	lsls	r1, r3, #13
2400adc0:	d514      	bpl.n	2400adec <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400adc2:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400adc4:	6820      	ldr	r0, [r4, #0]
2400adc6:	0409      	lsls	r1, r1, #16
2400adc8:	f001 fc84 	bl	2400c6d4 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
2400adcc:	2800      	cmp	r0, #0
2400adce:	d1e1      	bne.n	2400ad94 <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
2400add0:	2102      	movs	r1, #2
2400add2:	6820      	ldr	r0, [r4, #0]
2400add4:	f001 fd68 	bl	2400c8a8 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
2400add8:	e7dc      	b.n	2400ad94 <HAL_SD_ConfigWideBusOperation+0x114>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
2400adda:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400adde:	e7d9      	b.n	2400ad94 <HAL_SD_ConfigWideBusOperation+0x114>
        if (hsd->Init.ClockDiv == 0U)
2400ade0:	b93a      	cbnz	r2, 2400adf2 <HAL_SD_ConfigWideBusOperation+0x172>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
2400ade2:	490b      	ldr	r1, [pc, #44]	; (2400ae10 <HAL_SD_ConfigWideBusOperation+0x190>)
2400ade4:	4288      	cmp	r0, r1
2400ade6:	d98a      	bls.n	2400acfe <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
2400ade8:	0e5a      	lsrs	r2, r3, #25
2400adea:	e788      	b.n	2400acfe <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
2400adec:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
2400adf0:	e7d0      	b.n	2400ad94 <HAL_SD_ConfigWideBusOperation+0x114>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
2400adf2:	0051      	lsls	r1, r2, #1
2400adf4:	fbb0 f1f1 	udiv	r1, r0, r1
2400adf8:	4805      	ldr	r0, [pc, #20]	; (2400ae10 <HAL_SD_ConfigWideBusOperation+0x190>)
2400adfa:	4281      	cmp	r1, r0
2400adfc:	f67f af7f 	bls.w	2400acfe <HAL_SD_ConfigWideBusOperation+0x7e>
2400ae00:	e7f2      	b.n	2400ade8 <HAL_SD_ConfigWideBusOperation+0x168>
2400ae02:	bf00      	nop
2400ae04:	55e63b89 	.word	0x55e63b89
2400ae08:	017d7840 	.word	0x017d7840
2400ae0c:	1fe00fff 	.word	0x1fe00fff
2400ae10:	02faf080 	.word	0x02faf080

2400ae14 <HAL_SD_Init>:
{
2400ae14:	b5f0      	push	{r4, r5, r6, r7, lr}
2400ae16:	b087      	sub	sp, #28
  if (hsd == NULL)
2400ae18:	2800      	cmp	r0, #0
2400ae1a:	d045      	beq.n	2400aea8 <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_RESET)
2400ae1c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
2400ae20:	4604      	mov	r4, r0
2400ae22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400ae26:	2b00      	cmp	r3, #0
2400ae28:	d042      	beq.n	2400aeb0 <HAL_SD_Init+0x9c>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400ae2a:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400ae2c:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
2400ae2e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
2400ae32:	f7ff fdd1 	bl	2400a9d8 <HAL_SD_InitCard>
2400ae36:	2800      	cmp	r0, #0
2400ae38:	d136      	bne.n	2400aea8 <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_BUSY)
2400ae3a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
2400ae3e:	2b03      	cmp	r3, #3
2400ae40:	d032      	beq.n	2400aea8 <HAL_SD_Init+0x94>
2400ae42:	a901      	add	r1, sp, #4
2400ae44:	4620      	mov	r0, r4
2400ae46:	f7ff f9cd 	bl	2400a1e4 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
2400ae4a:	bb68      	cbnz	r0, 2400aea8 <HAL_SD_Init+0x94>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400ae4c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
2400ae4e:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400ae52:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
2400ae54:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
2400ae58:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
2400ae5a:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400ae5c:	d02c      	beq.n	2400aeb8 <HAL_SD_Init+0xa4>
2400ae5e:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400ae60:	68e1      	ldr	r1, [r4, #12]
2400ae62:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
2400ae64:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
2400ae66:	f7ff ff0b 	bl	2400ac80 <HAL_SD_ConfigWideBusOperation>
2400ae6a:	4606      	mov	r6, r0
2400ae6c:	b9e0      	cbnz	r0, 2400aea8 <HAL_SD_Init+0x94>
  tickstart = HAL_GetTick();
2400ae6e:	f7f9 fcfb 	bl	24004868 <HAL_GetTick>
2400ae72:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400ae74:	e00c      	b.n	2400ae90 <HAL_SD_Init+0x7c>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400ae76:	6820      	ldr	r0, [r4, #0]
2400ae78:	4629      	mov	r1, r5
2400ae7a:	f000 fe89 	bl	2400bb90 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400ae7e:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
2400ae82:	2804      	cmp	r0, #4
2400ae84:	d01f      	beq.n	2400aec6 <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
2400ae86:	f7f9 fcef 	bl	24004868 <HAL_GetTick>
2400ae8a:	1bc3      	subs	r3, r0, r7
2400ae8c:	3301      	adds	r3, #1
2400ae8e:	d020      	beq.n	2400aed2 <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400ae90:	6c61      	ldr	r1, [r4, #68]	; 0x44
2400ae92:	6820      	ldr	r0, [r4, #0]
2400ae94:	0409      	lsls	r1, r1, #16
2400ae96:	f001 ff3b 	bl	2400cd10 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400ae9a:	4605      	mov	r5, r0
2400ae9c:	2800      	cmp	r0, #0
2400ae9e:	d0ea      	beq.n	2400ae76 <HAL_SD_Init+0x62>
    hsd->ErrorCode |= errorstate;
2400aea0:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400aea2:	4303      	orrs	r3, r0
2400aea4:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
2400aea6:	e7ee      	b.n	2400ae86 <HAL_SD_Init+0x72>
    return HAL_ERROR;
2400aea8:	2601      	movs	r6, #1
}
2400aeaa:	4630      	mov	r0, r6
2400aeac:	b007      	add	sp, #28
2400aeae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
2400aeb0:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
2400aeb2:	f7f8 fbab 	bl	2400360c <HAL_SD_MspInit>
2400aeb6:	e7b8      	b.n	2400ae2a <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
2400aeb8:	4313      	orrs	r3, r2
2400aeba:	bf0c      	ite	eq
2400aebc:	f44f 7380 	moveq.w	r3, #256	; 0x100
2400aec0:	f44f 7300 	movne.w	r3, #512	; 0x200
2400aec4:	e7cc      	b.n	2400ae60 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
2400aec6:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
2400aec8:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
2400aeca:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
2400aecc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
2400aed0:	e7eb      	b.n	2400aeaa <HAL_SD_Init+0x96>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400aed2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
2400aed6:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
2400aed8:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
2400aeda:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
2400aedc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
2400aee0:	e7e3      	b.n	2400aeaa <HAL_SD_Init+0x96>
2400aee2:	bf00      	nop

2400aee4 <HAL_SD_GetCardState>:
{
2400aee4:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400aee6:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
2400aee8:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
2400aeea:	6800      	ldr	r0, [r0, #0]
2400aeec:	0409      	lsls	r1, r1, #16
2400aeee:	f001 ff0f 	bl	2400cd10 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
2400aef2:	4601      	mov	r1, r0
2400aef4:	b120      	cbz	r0, 2400af00 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
2400aef6:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400aef8:	2000      	movs	r0, #0
2400aefa:	430b      	orrs	r3, r1
2400aefc:	6363      	str	r3, [r4, #52]	; 0x34
}
2400aefe:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
2400af00:	6820      	ldr	r0, [r4, #0]
2400af02:	f000 fe45 	bl	2400bb90 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
2400af06:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
2400af0a:	bd10      	pop	{r4, pc}

2400af0c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
2400af0c:	b318      	cbz	r0, 2400af56 <HAL_SDRAM_Init+0x4a>
{
2400af0e:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
2400af10:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
2400af14:	4604      	mov	r4, r0
2400af16:	460d      	mov	r5, r1
2400af18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
2400af1c:	b1b3      	cbz	r3, 2400af4c <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400af1e:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
2400af20:	2302      	movs	r3, #2
2400af22:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
2400af26:	f851 0b04 	ldr.w	r0, [r1], #4
2400af2a:	f000 fd4d 	bl	2400b9c8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
2400af2e:	6862      	ldr	r2, [r4, #4]
2400af30:	4629      	mov	r1, r5
2400af32:	6820      	ldr	r0, [r4, #0]
2400af34:	f000 fd86 	bl	2400ba44 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
2400af38:	4a08      	ldr	r2, [pc, #32]	; (2400af5c <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
2400af3a:	2101      	movs	r1, #1

  return HAL_OK;
2400af3c:	2000      	movs	r0, #0
  __FMC_ENABLE();
2400af3e:	6813      	ldr	r3, [r2, #0]
2400af40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2400af44:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
2400af46:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
2400af4a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
2400af4c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
2400af50:	f7f5 ff78 	bl	24000e44 <HAL_SDRAM_MspInit>
2400af54:	e7e3      	b.n	2400af1e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
2400af56:	2001      	movs	r0, #1
}
2400af58:	4770      	bx	lr
2400af5a:	bf00      	nop
2400af5c:	52004000 	.word	0x52004000

2400af60 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
2400af60:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400af62:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400af66:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
2400af68:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
2400af6a:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
2400af6c:	d004      	beq.n	2400af78 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
2400af6e:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
2400af72:	2e01      	cmp	r6, #1
2400af74:	d001      	beq.n	2400af7a <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
2400af76:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400af78:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400af7a:	2302      	movs	r3, #2
2400af7c:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400af7e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400af80:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
2400af84:	f000 fdac 	bl	2400bae0 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
2400af88:	682b      	ldr	r3, [r5, #0]
2400af8a:	2b02      	cmp	r3, #2
2400af8c:	d003      	beq.n	2400af96 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
2400af8e:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
2400af90:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
2400af94:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400af96:	2305      	movs	r3, #5
  return HAL_OK;
2400af98:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
2400af9a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
2400af9e:	bd70      	pop	{r4, r5, r6, pc}

2400afa0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
2400afa0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400afa2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
2400afa6:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
2400afa8:	2b02      	cmp	r3, #2
2400afaa:	b2d8      	uxtb	r0, r3
2400afac:	d005      	beq.n	2400afba <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
2400afae:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400afb2:	2b01      	cmp	r3, #1
2400afb4:	b2dd      	uxtb	r5, r3
2400afb6:	d001      	beq.n	2400afbc <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
2400afb8:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
2400afba:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400afbc:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400afbe:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
2400afc0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
2400afc4:	f000 fda4 	bl	2400bb10 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
2400afc8:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
2400afca:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
2400afce:	bd38      	pop	{r3, r4, r5, pc}

2400afd0 <SPI_AbortTransfer>:
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2400afd0:	6801      	ldr	r1, [r0, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400afd2:	4b1b      	ldr	r3, [pc, #108]	; (2400b040 <SPI_AbortTransfer+0x70>)
  __HAL_SPI_DISABLE(hspi);
2400afd4:	680a      	ldr	r2, [r1, #0]
2400afd6:	f022 0201 	bic.w	r2, r2, #1
2400afda:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400afdc:	6802      	ldr	r2, [r0, #0]
2400afde:	6911      	ldr	r1, [r2, #16]
2400afe0:	400b      	ands	r3, r1
2400afe2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400afe4:	6802      	ldr	r2, [r0, #0]
2400afe6:	6993      	ldr	r3, [r2, #24]
2400afe8:	f043 0308 	orr.w	r3, r3, #8
2400afec:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400afee:	6802      	ldr	r2, [r0, #0]
2400aff0:	6993      	ldr	r3, [r2, #24]
2400aff2:	f043 0310 	orr.w	r3, r3, #16
2400aff6:	6193      	str	r3, [r2, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400aff8:	6802      	ldr	r2, [r0, #0]
2400affa:	6893      	ldr	r3, [r2, #8]
2400affc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400b000:	6093      	str	r3, [r2, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b002:	6802      	ldr	r2, [r0, #0]
2400b004:	6993      	ldr	r3, [r2, #24]
2400b006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b00a:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b00c:	6802      	ldr	r2, [r0, #0]
2400b00e:	6993      	ldr	r3, [r2, #24]
2400b010:	f043 0320 	orr.w	r3, r3, #32
2400b014:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b016:	6802      	ldr	r2, [r0, #0]
2400b018:	6993      	ldr	r3, [r2, #24]
2400b01a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400b01e:	6193      	str	r3, [r2, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
2400b020:	2200      	movs	r2, #0
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b022:	6801      	ldr	r1, [r0, #0]
2400b024:	698b      	ldr	r3, [r1, #24]
2400b026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400b02a:	618b      	str	r3, [r1, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400b02c:	6801      	ldr	r1, [r0, #0]
2400b02e:	698b      	ldr	r3, [r1, #24]
2400b030:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b034:	618b      	str	r3, [r1, #24]
  hspi->TxXferCount = (uint16_t)0UL;
2400b036:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400b03a:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
}
2400b03e:	4770      	bx	lr
2400b040:	fffffc90 	.word	0xfffffc90

2400b044 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
2400b044:	6802      	ldr	r2, [r0, #0]
{
2400b046:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
2400b048:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400b04a:	6991      	ldr	r1, [r2, #24]
2400b04c:	f041 0108 	orr.w	r1, r1, #8
2400b050:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400b052:	6801      	ldr	r1, [r0, #0]
2400b054:	698a      	ldr	r2, [r1, #24]
2400b056:	f042 0210 	orr.w	r2, r2, #16
2400b05a:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
2400b05c:	6801      	ldr	r1, [r0, #0]
2400b05e:	680a      	ldr	r2, [r1, #0]
2400b060:	f022 0201 	bic.w	r2, r2, #1
2400b064:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400b066:	6801      	ldr	r1, [r0, #0]
2400b068:	4a27      	ldr	r2, [pc, #156]	; (2400b108 <SPI_CloseTransfer+0xc4>)
2400b06a:	690c      	ldr	r4, [r1, #16]
2400b06c:	4022      	ands	r2, r4
2400b06e:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b070:	6801      	ldr	r1, [r0, #0]
2400b072:	688a      	ldr	r2, [r1, #8]
2400b074:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400b078:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400b07a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400b07e:	2a04      	cmp	r2, #4
2400b080:	d001      	beq.n	2400b086 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400b082:	069c      	lsls	r4, r3, #26
2400b084:	d433      	bmi.n	2400b0ee <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400b086:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
2400b08a:	2a03      	cmp	r2, #3
2400b08c:	d001      	beq.n	2400b092 <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400b08e:	0659      	lsls	r1, r3, #25
2400b090:	d421      	bmi.n	2400b0d6 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400b092:	059a      	lsls	r2, r3, #22
2400b094:	d50a      	bpl.n	2400b0ac <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b096:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b09a:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b09c:	f042 0201 	orr.w	r2, r2, #1
2400b0a0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b0a4:	698a      	ldr	r2, [r1, #24]
2400b0a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400b0aa:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400b0ac:	05db      	lsls	r3, r3, #23
2400b0ae:	d50a      	bpl.n	2400b0c6 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b0b0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b0b4:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b0b6:	f043 0308 	orr.w	r3, r3, #8
2400b0ba:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b0be:	6993      	ldr	r3, [r2, #24]
2400b0c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400b0c4:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
2400b0c6:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
2400b0c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
2400b0cc:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400b0d0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
2400b0d4:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b0d6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b0da:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b0dc:	f042 0204 	orr.w	r2, r2, #4
2400b0e0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b0e4:	698a      	ldr	r2, [r1, #24]
2400b0e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400b0ea:	618a      	str	r2, [r1, #24]
2400b0ec:	e7d1      	b.n	2400b092 <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b0ee:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b0f2:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b0f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400b0f8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b0fc:	698a      	ldr	r2, [r1, #24]
2400b0fe:	f042 0220 	orr.w	r2, r2, #32
2400b102:	618a      	str	r2, [r1, #24]
2400b104:	e7bf      	b.n	2400b086 <SPI_CloseTransfer+0x42>
2400b106:	bf00      	nop
2400b108:	fffffc90 	.word	0xfffffc90

2400b10c <HAL_SPI_Init>:
  if (hspi == NULL)
2400b10c:	2800      	cmp	r0, #0
2400b10e:	f000 80be 	beq.w	2400b28e <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400b112:	4a62      	ldr	r2, [pc, #392]	; (2400b29c <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400b114:	2100      	movs	r1, #0
{
2400b116:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400b118:	6803      	ldr	r3, [r0, #0]
2400b11a:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2400b11c:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
2400b11e:	4293      	cmp	r3, r2
2400b120:	d015      	beq.n	2400b14e <HAL_SPI_Init+0x42>
2400b122:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
2400b126:	4293      	cmp	r3, r2
2400b128:	d011      	beq.n	2400b14e <HAL_SPI_Init+0x42>
2400b12a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
2400b12e:	4293      	cmp	r3, r2
2400b130:	68c2      	ldr	r2, [r0, #12]
2400b132:	f000 80a5 	beq.w	2400b280 <HAL_SPI_Init+0x174>
2400b136:	2a0f      	cmp	r2, #15
2400b138:	d807      	bhi.n	2400b14a <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400b13a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
2400b13c:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400b13e:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400b140:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
2400b142:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400b146:	2a08      	cmp	r2, #8
2400b148:	d914      	bls.n	2400b174 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
2400b14a:	2001      	movs	r0, #1
}
2400b14c:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
2400b14e:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400b150:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400b152:	3208      	adds	r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400b154:	4851      	ldr	r0, [pc, #324]	; (2400b29c <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400b156:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400b158:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
2400b15a:	fb01 2202 	mla	r2, r1, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
2400b15e:	4950      	ldr	r1, [pc, #320]	; (2400b2a0 <HAL_SPI_Init+0x194>)
2400b160:	428b      	cmp	r3, r1
2400b162:	bf18      	it	ne
2400b164:	4283      	cmpne	r3, r0
2400b166:	d003      	beq.n	2400b170 <HAL_SPI_Init+0x64>
2400b168:	f501 6180 	add.w	r1, r1, #1024	; 0x400
2400b16c:	428b      	cmp	r3, r1
2400b16e:	d101      	bne.n	2400b174 <HAL_SPI_Init+0x68>
2400b170:	2a10      	cmp	r2, #16
2400b172:	d8ea      	bhi.n	2400b14a <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
2400b174:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400b178:	f002 01ff 	and.w	r1, r2, #255	; 0xff
2400b17c:	2a00      	cmp	r2, #0
2400b17e:	d078      	beq.n	2400b272 <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
2400b180:	2202      	movs	r2, #2
2400b182:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
2400b186:	681a      	ldr	r2, [r3, #0]
2400b188:	f022 0201 	bic.w	r2, r2, #1
2400b18c:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b18e:	69a1      	ldr	r1, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400b190:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b192:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
2400b196:	6861      	ldr	r1, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
2400b198:	689a      	ldr	r2, [r3, #8]
2400b19a:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b19e:	d058      	beq.n	2400b252 <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
2400b1a0:	0249      	lsls	r1, r1, #9
2400b1a2:	d502      	bpl.n	2400b1aa <HAL_SPI_Init+0x9e>
2400b1a4:	68e1      	ldr	r1, [r4, #12]
2400b1a6:	2906      	cmp	r1, #6
2400b1a8:	d84c      	bhi.n	2400b244 <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400b1aa:	6819      	ldr	r1, [r3, #0]
2400b1ac:	f421 7180 	bic.w	r1, r1, #256	; 0x100
2400b1b0:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
2400b1b2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
2400b1b4:	69e3      	ldr	r3, [r4, #28]
2400b1b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
2400b1b8:	432b      	orrs	r3, r5
2400b1ba:	6821      	ldr	r1, [r4, #0]
2400b1bc:	4303      	orrs	r3, r0
2400b1be:	68e0      	ldr	r0, [r4, #12]
2400b1c0:	4303      	orrs	r3, r0
2400b1c2:	4313      	orrs	r3, r2
2400b1c4:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
2400b1c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
2400b1c8:	69a0      	ldr	r0, [r4, #24]
2400b1ca:	6822      	ldr	r2, [r4, #0]
2400b1cc:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
2400b1d0:	432b      	orrs	r3, r5
2400b1d2:	430b      	orrs	r3, r1
2400b1d4:	6921      	ldr	r1, [r4, #16]
2400b1d6:	4303      	orrs	r3, r0
2400b1d8:	6960      	ldr	r0, [r4, #20]
2400b1da:	430b      	orrs	r3, r1
2400b1dc:	6a21      	ldr	r1, [r4, #32]
2400b1de:	4303      	orrs	r3, r0
2400b1e0:	6860      	ldr	r0, [r4, #4]
2400b1e2:	430b      	orrs	r3, r1
2400b1e4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
2400b1e6:	4303      	orrs	r3, r0
2400b1e8:	68a0      	ldr	r0, [r4, #8]
2400b1ea:	430b      	orrs	r3, r1
2400b1ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2400b1ee:	4303      	orrs	r3, r0
2400b1f0:	430b      	orrs	r3, r1
2400b1f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
2400b1f4:	430b      	orrs	r3, r1
2400b1f6:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
2400b1f8:	6863      	ldr	r3, [r4, #4]
2400b1fa:	b96b      	cbnz	r3, 2400b218 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
2400b1fc:	6822      	ldr	r2, [r4, #0]
2400b1fe:	6893      	ldr	r3, [r2, #8]
2400b200:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
2400b204:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b208:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
2400b20a:	6822      	ldr	r2, [r4, #0]
2400b20c:	6893      	ldr	r3, [r2, #8]
2400b20e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
2400b212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400b216:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2400b218:	6822      	ldr	r2, [r4, #0]
2400b21a:	6d13      	ldr	r3, [r2, #80]	; 0x50
2400b21c:	f023 0301 	bic.w	r3, r3, #1
2400b220:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
2400b222:	6863      	ldr	r3, [r4, #4]
2400b224:	025b      	lsls	r3, r3, #9
2400b226:	d506      	bpl.n	2400b236 <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
2400b228:	6822      	ldr	r2, [r4, #0]
2400b22a:	6d61      	ldr	r1, [r4, #84]	; 0x54
2400b22c:	68d3      	ldr	r3, [r2, #12]
2400b22e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2400b232:	430b      	orrs	r3, r1
2400b234:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400b236:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
2400b238:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400b23a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
2400b23e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400b242:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
2400b244:	6819      	ldr	r1, [r3, #0]
2400b246:	6d20      	ldr	r0, [r4, #80]	; 0x50
2400b248:	f421 7180 	bic.w	r1, r1, #256	; 0x100
2400b24c:	4301      	orrs	r1, r0
2400b24e:	6019      	str	r1, [r3, #0]
2400b250:	e7af      	b.n	2400b1b2 <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b252:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
2400b256:	d01c      	beq.n	2400b292 <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
2400b258:	2900      	cmp	r1, #0
2400b25a:	d1a1      	bne.n	2400b1a0 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
2400b25c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2400b25e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
2400b262:	d1a2      	bne.n	2400b1aa <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
2400b264:	6819      	ldr	r1, [r3, #0]
2400b266:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
2400b26a:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
2400b26c:	e9d4 3100 	ldrd	r3, r1, [r4]
2400b270:	e796      	b.n	2400b1a0 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
2400b272:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
2400b274:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
2400b278:	f7f8 fa76 	bl	24003768 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
2400b27c:	6823      	ldr	r3, [r4, #0]
2400b27e:	e77f      	b.n	2400b180 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400b280:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
2400b282:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
2400b284:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
2400b286:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
2400b288:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
2400b28c:	e770      	b.n	2400b170 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
2400b28e:	2001      	movs	r0, #1
}
2400b290:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
2400b292:	6ba1      	ldr	r1, [r4, #56]	; 0x38
2400b294:	2900      	cmp	r1, #0
2400b296:	d0e5      	beq.n	2400b264 <HAL_SPI_Init+0x158>
2400b298:	e784      	b.n	2400b1a4 <HAL_SPI_Init+0x98>
2400b29a:	bf00      	nop
2400b29c:	40013000 	.word	0x40013000
2400b2a0:	40003800 	.word	0x40003800

2400b2a4 <HAL_SPI_TransmitReceive_DMA>:
{
2400b2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400b2a8:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
2400b2aa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400b2ae:	2b01      	cmp	r3, #1
2400b2b0:	f000 809a 	beq.w	2400b3e8 <HAL_SPI_TransmitReceive_DMA+0x144>
2400b2b4:	2301      	movs	r3, #1
2400b2b6:	4604      	mov	r4, r0
2400b2b8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
2400b2bc:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400b2c0:	2b01      	cmp	r3, #1
2400b2c2:	b2de      	uxtb	r6, r3
2400b2c4:	d158      	bne.n	2400b378 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
2400b2c6:	2d00      	cmp	r5, #0
2400b2c8:	bf18      	it	ne
2400b2ca:	2a00      	cmpne	r2, #0
2400b2cc:	d04e      	beq.n	2400b36c <HAL_SPI_TransmitReceive_DMA+0xc8>
2400b2ce:	fab1 f381 	clz	r3, r1
2400b2d2:	095b      	lsrs	r3, r3, #5
2400b2d4:	2900      	cmp	r1, #0
2400b2d6:	d049      	beq.n	2400b36c <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
2400b2d8:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400b2da:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
2400b2dc:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
2400b2de:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
2400b2e0:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
2400b2e4:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2400b2e8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
2400b2ec:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
2400b2f0:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
2400b2f4:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
2400b2f8:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
2400b2fc:	68d3      	ldr	r3, [r2, #12]
2400b2fe:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
2400b302:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b304:	6802      	ldr	r2, [r0, #0]
2400b306:	6893      	ldr	r3, [r2, #8]
2400b308:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400b30c:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400b30e:	68c3      	ldr	r3, [r0, #12]
2400b310:	2b0f      	cmp	r3, #15
2400b312:	d938      	bls.n	2400b386 <HAL_SPI_TransmitReceive_DMA+0xe2>
2400b314:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400b316:	699a      	ldr	r2, [r3, #24]
2400b318:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b31c:	d126      	bne.n	2400b36c <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400b31e:	4a6c      	ldr	r2, [pc, #432]	; (2400b4d0 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
2400b320:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400b324:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 2400b4dc <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2400b328:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
2400b32a:	4a6a      	ldr	r2, [pc, #424]	; (2400b4d4 <HAL_SPI_TransmitReceive_DMA+0x230>)
2400b32c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b32e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2400b330:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b332:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
2400b336:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b338:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
2400b33c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
2400b340:	6821      	ldr	r1, [r4, #0]
2400b342:	b29b      	uxth	r3, r3
2400b344:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b346:	3130      	adds	r1, #48	; 0x30
2400b348:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400b34a:	f7f9 fea9 	bl	240050a0 <HAL_DMA_Start_IT>
2400b34e:	4607      	mov	r7, r0
2400b350:	2800      	cmp	r0, #0
2400b352:	d04d      	beq.n	2400b3f0 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b354:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b358:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400b35a:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b35e:	f043 0310 	orr.w	r3, r3, #16
2400b362:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b366:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400b36a:	e002      	b.n	2400b372 <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
2400b36c:	2300      	movs	r3, #0
2400b36e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
2400b372:	4630      	mov	r0, r6
2400b374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
2400b378:	2300      	movs	r3, #0
    return errorcode;
2400b37a:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
2400b37c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
2400b380:	4630      	mov	r0, r6
2400b382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
2400b386:	2b07      	cmp	r3, #7
2400b388:	d87f      	bhi.n	2400b48a <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400b38a:	6f82      	ldr	r2, [r0, #120]	; 0x78
2400b38c:	6993      	ldr	r3, [r2, #24]
2400b38e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400b392:	d107      	bne.n	2400b3a4 <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400b394:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
2400b398:	b29b      	uxth	r3, r3
2400b39a:	3301      	adds	r3, #1
2400b39c:	085b      	lsrs	r3, r3, #1
2400b39e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b3a2:	6993      	ldr	r3, [r2, #24]
2400b3a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400b3a8:	d106      	bne.n	2400b3b8 <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
2400b3aa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
2400b3ae:	b29b      	uxth	r3, r3
2400b3b0:	3303      	adds	r3, #3
2400b3b2:	089b      	lsrs	r3, r3, #2
2400b3b4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2400b3b8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b3ba:	699a      	ldr	r2, [r3, #24]
2400b3bc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400b3c0:	d107      	bne.n	2400b3d2 <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400b3c2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b3c6:	b292      	uxth	r2, r2
2400b3c8:	3201      	adds	r2, #1
2400b3ca:	0852      	lsrs	r2, r2, #1
2400b3cc:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b3d0:	699a      	ldr	r2, [r3, #24]
2400b3d2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b3d6:	d1a2      	bne.n	2400b31e <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
2400b3d8:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b3dc:	b292      	uxth	r2, r2
2400b3de:	3203      	adds	r2, #3
2400b3e0:	0892      	lsrs	r2, r2, #2
2400b3e2:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400b3e6:	e79a      	b.n	2400b31e <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
2400b3e8:	2602      	movs	r6, #2
}
2400b3ea:	4630      	mov	r0, r6
2400b3ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
2400b3f0:	6822      	ldr	r2, [r4, #0]
2400b3f2:	6893      	ldr	r3, [r2, #8]
2400b3f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2400b3f8:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
2400b3fa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b3fc:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
2400b3fe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b400:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
2400b402:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b404:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
2400b406:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b408:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
2400b40c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
2400b410:	6822      	ldr	r2, [r4, #0]
2400b412:	b29b      	uxth	r3, r3
2400b414:	6de1      	ldr	r1, [r4, #92]	; 0x5c
2400b416:	3220      	adds	r2, #32
2400b418:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400b41a:	f7f9 fe41 	bl	240050a0 <HAL_DMA_Start_IT>
2400b41e:	bb40      	cbnz	r0, 2400b472 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b420:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b422:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b424:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b426:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
2400b42c:	4b2a      	ldr	r3, [pc, #168]	; (2400b4d8 <HAL_SPI_TransmitReceive_DMA+0x234>)
2400b42e:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
2400b432:	bf18      	it	ne
2400b434:	432b      	orrne	r3, r5
2400b436:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
2400b438:	6822      	ldr	r2, [r4, #0]
2400b43a:	6893      	ldr	r3, [r2, #8]
2400b43c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
2400b440:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
2400b442:	6822      	ldr	r2, [r4, #0]
2400b444:	6913      	ldr	r3, [r2, #16]
2400b446:	f443 7358 	orr.w	r3, r3, #864	; 0x360
2400b44a:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
2400b44c:	6822      	ldr	r2, [r4, #0]
2400b44e:	6813      	ldr	r3, [r2, #0]
2400b450:	f043 0301 	orr.w	r3, r3, #1
2400b454:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2400b456:	6863      	ldr	r3, [r4, #4]
2400b458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2400b45c:	d104      	bne.n	2400b468 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
2400b45e:	6822      	ldr	r2, [r4, #0]
2400b460:	6813      	ldr	r3, [r2, #0]
2400b462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400b466:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
2400b468:	2300      	movs	r3, #0
  return errorcode;
2400b46a:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
2400b46c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
2400b470:	e77f      	b.n	2400b372 <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b472:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b476:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
2400b478:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b47c:	f043 0310 	orr.w	r3, r3, #16
2400b480:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b484:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
2400b488:	e773      	b.n	2400b372 <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
2400b48a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
2400b48c:	699a      	ldr	r2, [r3, #24]
2400b48e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
2400b492:	d003      	beq.n	2400b49c <HAL_SPI_TransmitReceive_DMA+0x1f8>
2400b494:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b498:	f47f af68 	bne.w	2400b36c <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b49c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
2400b49e:	6989      	ldr	r1, [r1, #24]
2400b4a0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
2400b4a4:	d107      	bne.n	2400b4b6 <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
2400b4a6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
2400b4aa:	b292      	uxth	r2, r2
2400b4ac:	3201      	adds	r2, #1
2400b4ae:	0852      	lsrs	r2, r2, #1
2400b4b0:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
2400b4b4:	699a      	ldr	r2, [r3, #24]
2400b4b6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
2400b4ba:	f47f af30 	bne.w	2400b31e <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
2400b4be:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
2400b4c2:	b292      	uxth	r2, r2
2400b4c4:	3201      	adds	r2, #1
2400b4c6:	0852      	lsrs	r2, r2, #1
2400b4c8:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
2400b4cc:	e727      	b.n	2400b31e <HAL_SPI_TransmitReceive_DMA+0x7a>
2400b4ce:	bf00      	nop
2400b4d0:	2400b651 	.word	0x2400b651
2400b4d4:	2400b629 	.word	0x2400b629
2400b4d8:	ffff0000 	.word	0xffff0000
2400b4dc:	2400b661 	.word	0x2400b661

2400b4e0 <HAL_SPI_Abort>:
  __HAL_LOCK(hspi);
2400b4e0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
2400b4e4:	2b01      	cmp	r3, #1
2400b4e6:	f000 8095 	beq.w	2400b614 <HAL_SPI_Abort+0x134>
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400b4ea:	4b4b      	ldr	r3, [pc, #300]	; (2400b618 <HAL_SPI_Abort+0x138>)
2400b4ec:	2164      	movs	r1, #100	; 0x64
2400b4ee:	4a4b      	ldr	r2, [pc, #300]	; (2400b61c <HAL_SPI_Abort+0x13c>)
{
2400b4f0:	b510      	push	{r4, lr}
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400b4f2:	681b      	ldr	r3, [r3, #0]
2400b4f4:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
2400b4f6:	2001      	movs	r0, #1
{
2400b4f8:	b082      	sub	sp, #8
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400b4fa:	fba2 2303 	umull	r2, r3, r2, r3
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
2400b4fe:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hspi);
2400b500:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_ABORT;
2400b504:	2007      	movs	r0, #7
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400b506:	0a5b      	lsrs	r3, r3, #9
  hspi->State = HAL_SPI_STATE_ABORT;
2400b508:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
2400b50c:	fb01 f303 	mul.w	r3, r1, r3
2400b510:	9301      	str	r3, [sp, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
2400b512:	6813      	ldr	r3, [r2, #0]
2400b514:	0598      	lsls	r0, r3, #22
2400b516:	d53e      	bpl.n	2400b596 <HAL_SPI_Abort+0xb6>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400b518:	6913      	ldr	r3, [r2, #16]
2400b51a:	f023 0308 	bic.w	r3, r3, #8
2400b51e:	6113      	str	r3, [r2, #16]
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
2400b520:	6822      	ldr	r2, [r4, #0]
2400b522:	e002      	b.n	2400b52a <HAL_SPI_Abort+0x4a>
2400b524:	6913      	ldr	r3, [r2, #16]
2400b526:	0719      	lsls	r1, r3, #28
2400b528:	d50b      	bpl.n	2400b542 <HAL_SPI_Abort+0x62>
      count--;
2400b52a:	9b01      	ldr	r3, [sp, #4]
2400b52c:	3b01      	subs	r3, #1
2400b52e:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
2400b530:	9b01      	ldr	r3, [sp, #4]
2400b532:	2b00      	cmp	r3, #0
2400b534:	d1f6      	bne.n	2400b524 <HAL_SPI_Abort+0x44>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400b536:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b53a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b53e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
2400b542:	6813      	ldr	r3, [r2, #0]
2400b544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400b548:	6013      	str	r3, [r2, #0]
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
2400b54a:	6822      	ldr	r2, [r4, #0]
2400b54c:	e002      	b.n	2400b554 <HAL_SPI_Abort+0x74>
2400b54e:	6813      	ldr	r3, [r2, #0]
2400b550:	059b      	lsls	r3, r3, #22
2400b552:	d50b      	bpl.n	2400b56c <HAL_SPI_Abort+0x8c>
      count--;
2400b554:	9b01      	ldr	r3, [sp, #4]
2400b556:	3b01      	subs	r3, #1
2400b558:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
2400b55a:	9b01      	ldr	r3, [sp, #4]
2400b55c:	2b00      	cmp	r3, #0
2400b55e:	d1f6      	bne.n	2400b54e <HAL_SPI_Abort+0x6e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400b560:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b568:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400b56c:	6993      	ldr	r3, [r2, #24]
2400b56e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b572:	6193      	str	r3, [r2, #24]
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
2400b574:	6822      	ldr	r2, [r4, #0]
2400b576:	e002      	b.n	2400b57e <HAL_SPI_Abort+0x9e>
2400b578:	6953      	ldr	r3, [r2, #20]
2400b57a:	0518      	lsls	r0, r3, #20
2400b57c:	d50b      	bpl.n	2400b596 <HAL_SPI_Abort+0xb6>
      count--;
2400b57e:	9b01      	ldr	r3, [sp, #4]
2400b580:	3b01      	subs	r3, #1
2400b582:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
2400b584:	9b01      	ldr	r3, [sp, #4]
2400b586:	2b00      	cmp	r3, #0
2400b588:	d1f6      	bne.n	2400b578 <HAL_SPI_Abort+0x98>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400b58a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b58e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b592:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
2400b596:	6893      	ldr	r3, [r2, #8]
2400b598:	0419      	lsls	r1, r3, #16
2400b59a:	d508      	bpl.n	2400b5ae <HAL_SPI_Abort+0xce>
    if (hspi->hdmatx != NULL)
2400b59c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b59e:	b133      	cbz	r3, 2400b5ae <HAL_SPI_Abort+0xce>
      hspi->hdmatx->XferAbortCallback = NULL;
2400b5a0:	2200      	movs	r2, #0
2400b5a2:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
2400b5a4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400b5a6:	f7fa f847 	bl	24005638 <HAL_DMA_Abort>
2400b5aa:	bb00      	cbnz	r0, 2400b5ee <HAL_SPI_Abort+0x10e>
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
2400b5ac:	6822      	ldr	r2, [r4, #0]
2400b5ae:	6893      	ldr	r3, [r2, #8]
2400b5b0:	045b      	lsls	r3, r3, #17
2400b5b2:	d507      	bpl.n	2400b5c4 <HAL_SPI_Abort+0xe4>
    if (hspi->hdmarx != NULL)
2400b5b4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b5b6:	b12b      	cbz	r3, 2400b5c4 <HAL_SPI_Abort+0xe4>
      hspi->hdmarx->XferAbortCallback = NULL;
2400b5b8:	2200      	movs	r2, #0
2400b5ba:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
2400b5bc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400b5be:	f7fa f83b 	bl	24005638 <HAL_DMA_Abort>
2400b5c2:	b9f0      	cbnz	r0, 2400b602 <HAL_SPI_Abort+0x122>
  SPI_AbortTransfer(hspi);
2400b5c4:	4620      	mov	r0, r4
2400b5c6:	f7ff fd03 	bl	2400afd0 <SPI_AbortTransfer>
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
2400b5ca:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b5ce:	f013 0340 	ands.w	r3, r3, #64	; 0x40
2400b5d2:	d10a      	bne.n	2400b5ea <HAL_SPI_Abort+0x10a>
  errorcode = HAL_OK;
2400b5d4:	4618      	mov	r0, r3
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2400b5d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
2400b5da:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
2400b5dc:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
2400b5de:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
2400b5e2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
2400b5e6:	b002      	add	sp, #8
2400b5e8:	bd10      	pop	{r4, pc}
    errorcode = HAL_ERROR;
2400b5ea:	2001      	movs	r0, #1
2400b5ec:	e7f5      	b.n	2400b5da <HAL_SPI_Abort+0xfa>
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
2400b5ee:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400b5f0:	f7fa ffa6 	bl	24006540 <HAL_DMA_GetError>
2400b5f4:	2820      	cmp	r0, #32
2400b5f6:	d1d9      	bne.n	2400b5ac <HAL_SPI_Abort+0xcc>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2400b5f8:	2340      	movs	r3, #64	; 0x40
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
2400b5fa:	6822      	ldr	r2, [r4, #0]
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2400b5fc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400b600:	e7d5      	b.n	2400b5ae <HAL_SPI_Abort+0xce>
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
2400b602:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400b604:	f7fa ff9c 	bl	24006540 <HAL_DMA_GetError>
2400b608:	2820      	cmp	r0, #32
2400b60a:	d1db      	bne.n	2400b5c4 <HAL_SPI_Abort+0xe4>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
2400b60c:	2340      	movs	r3, #64	; 0x40
2400b60e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400b612:	e7d7      	b.n	2400b5c4 <HAL_SPI_Abort+0xe4>
  __HAL_LOCK(hspi);
2400b614:	2002      	movs	r0, #2
}
2400b616:	4770      	bx	lr
2400b618:	200008ec 	.word	0x200008ec
2400b61c:	057619f1 	.word	0x057619f1

2400b620 <HAL_SPI_TxCpltCallback>:
2400b620:	4770      	bx	lr
2400b622:	bf00      	nop

2400b624 <HAL_SPI_RxCpltCallback>:
2400b624:	4770      	bx	lr
2400b626:	bf00      	nop

2400b628 <SPI_DMATransmitReceiveCplt>:
{
2400b628:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b62a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
2400b62c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
2400b630:	2b07      	cmp	r3, #7
2400b632:	d009      	beq.n	2400b648 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
2400b634:	6f83      	ldr	r3, [r0, #120]	; 0x78
2400b636:	69db      	ldr	r3, [r3, #28]
2400b638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400b63c:	d005      	beq.n	2400b64a <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
2400b63e:	6802      	ldr	r2, [r0, #0]
2400b640:	6913      	ldr	r3, [r2, #16]
2400b642:	f043 0308 	orr.w	r3, r3, #8
2400b646:	6113      	str	r3, [r2, #16]
}
2400b648:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
2400b64a:	f020 f83d 	bl	2402b6c8 <__HAL_SPI_TxRxCpltCallback_veneer>
}
2400b64e:	bd08      	pop	{r3, pc}

2400b650 <SPI_DMAHalfTransmitReceiveCplt>:
{
2400b650:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2400b652:	6b80      	ldr	r0, [r0, #56]	; 0x38
2400b654:	f020 f85c 	bl	2402b710 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
2400b658:	bd08      	pop	{r3, pc}
2400b65a:	bf00      	nop

2400b65c <HAL_SPI_ErrorCallback>:
2400b65c:	4770      	bx	lr
2400b65e:	bf00      	nop

2400b660 <SPI_DMAError>:
{
2400b660:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b662:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
2400b664:	f7fa ff6c 	bl	24006540 <HAL_DMA_GetError>
2400b668:	2802      	cmp	r0, #2
2400b66a:	d100      	bne.n	2400b66e <SPI_DMAError+0xe>
}
2400b66c:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
2400b66e:	6822      	ldr	r2, [r4, #0]
2400b670:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400b672:	6991      	ldr	r1, [r2, #24]
2400b674:	f041 0108 	orr.w	r1, r1, #8
2400b678:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400b67a:	6821      	ldr	r1, [r4, #0]
2400b67c:	698a      	ldr	r2, [r1, #24]
2400b67e:	f042 0210 	orr.w	r2, r2, #16
2400b682:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
2400b684:	6821      	ldr	r1, [r4, #0]
2400b686:	680a      	ldr	r2, [r1, #0]
2400b688:	f022 0201 	bic.w	r2, r2, #1
2400b68c:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
2400b68e:	6821      	ldr	r1, [r4, #0]
2400b690:	4a2c      	ldr	r2, [pc, #176]	; (2400b744 <SPI_DMAError+0xe4>)
2400b692:	6908      	ldr	r0, [r1, #16]
2400b694:	4002      	ands	r2, r0
2400b696:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b698:	6821      	ldr	r1, [r4, #0]
2400b69a:	688a      	ldr	r2, [r1, #8]
2400b69c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
2400b6a0:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2400b6a2:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400b6a6:	2a04      	cmp	r2, #4
2400b6a8:	d001      	beq.n	2400b6ae <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
2400b6aa:	0698      	lsls	r0, r3, #26
2400b6ac:	d43d      	bmi.n	2400b72a <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
2400b6ae:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
2400b6b2:	2a03      	cmp	r2, #3
2400b6b4:	d001      	beq.n	2400b6ba <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
2400b6b6:	0659      	lsls	r1, r3, #25
2400b6b8:	d42b      	bmi.n	2400b712 <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
2400b6ba:	059a      	lsls	r2, r3, #22
2400b6bc:	d50a      	bpl.n	2400b6d4 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b6be:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b6c2:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b6c4:	f042 0201 	orr.w	r2, r2, #1
2400b6c8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b6cc:	698a      	ldr	r2, [r1, #24]
2400b6ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
2400b6d2:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
2400b6d4:	05db      	lsls	r3, r3, #23
2400b6d6:	d50a      	bpl.n	2400b6ee <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b6d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b6dc:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b6de:	f043 0308 	orr.w	r3, r3, #8
2400b6e2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b6e6:	6993      	ldr	r3, [r2, #24]
2400b6e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400b6ec:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
2400b6ee:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
2400b6f0:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
2400b6f2:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
2400b6f4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
2400b6f8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2400b6fc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b700:	f043 0310 	orr.w	r3, r3, #16
2400b704:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
2400b708:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
2400b70c:	f7ff ffa6 	bl	2400b65c <HAL_SPI_ErrorCallback>
}
2400b710:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b712:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b716:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b718:	f042 0204 	orr.w	r2, r2, #4
2400b71c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b720:	698a      	ldr	r2, [r1, #24]
2400b722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400b726:	618a      	str	r2, [r1, #24]
2400b728:	e7c7      	b.n	2400b6ba <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b72a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b72e:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b730:	f042 0280 	orr.w	r2, r2, #128	; 0x80
2400b734:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b738:	698a      	ldr	r2, [r1, #24]
2400b73a:	f042 0220 	orr.w	r2, r2, #32
2400b73e:	618a      	str	r2, [r1, #24]
2400b740:	e7b5      	b.n	2400b6ae <SPI_DMAError+0x4e>
2400b742:	bf00      	nop
2400b744:	fffffc90 	.word	0xfffffc90

2400b748 <SPI_DMAAbortOnError>:
{
2400b748:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
2400b74a:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2400b74c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
2400b74e:	2300      	movs	r3, #0
2400b750:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
2400b754:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
2400b758:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
2400b75c:	f7ff ff7e 	bl	2400b65c <HAL_SPI_ErrorCallback>
}
2400b760:	bd08      	pop	{r3, pc}
2400b762:	bf00      	nop

2400b764 <HAL_SPI_SuspendCallback>:
2400b764:	4770      	bx	lr
2400b766:	bf00      	nop

2400b768 <HAL_SPI_IRQHandler>:
{
2400b768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
2400b76c:	6805      	ldr	r5, [r0, #0]
{
2400b76e:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
2400b770:	692a      	ldr	r2, [r5, #16]
  uint32_t itflag   = hspi->Instance->SR;
2400b772:	696b      	ldr	r3, [r5, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
2400b774:	f8d5 8008 	ldr.w	r8, [r5, #8]
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400b778:	0519      	lsls	r1, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
2400b77a:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  uint32_t trigger  = itsource & itflag;
2400b77e:	ea02 0703 	and.w	r7, r2, r3
  HAL_SPI_StateTypeDef State = hspi->State;
2400b782:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
2400b784:	d502      	bpl.n	2400b78c <HAL_SPI_IRQHandler+0x24>
2400b786:	0713      	lsls	r3, r2, #28
2400b788:	f100 80fd 	bmi.w	2400b986 <HAL_SPI_IRQHandler+0x21e>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
2400b78c:	f007 0364 	and.w	r3, r7, #100	; 0x64
2400b790:	2b04      	cmp	r3, #4
2400b792:	d076      	beq.n	2400b882 <HAL_SPI_IRQHandler+0x11a>
  uint32_t handled  = 0UL;
2400b794:	2200      	movs	r2, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
2400b796:	f007 0345 	and.w	r3, r7, #69	; 0x45
2400b79a:	2b01      	cmp	r3, #1
2400b79c:	d045      	beq.n	2400b82a <HAL_SPI_IRQHandler+0xc2>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400b79e:	f007 0326 	and.w	r3, r7, #38	; 0x26
2400b7a2:	2b02      	cmp	r3, #2
2400b7a4:	d048      	beq.n	2400b838 <HAL_SPI_IRQHandler+0xd0>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400b7a6:	0579      	lsls	r1, r7, #21
2400b7a8:	f100 80e4 	bmi.w	2400b974 <HAL_SPI_IRQHandler+0x20c>
  if (handled != 0UL)
2400b7ac:	2a00      	cmp	r2, #0
2400b7ae:	d150      	bne.n	2400b852 <HAL_SPI_IRQHandler+0xea>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
2400b7b0:	073b      	lsls	r3, r7, #28
2400b7b2:	d56e      	bpl.n	2400b892 <HAL_SPI_IRQHandler+0x12a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
2400b7b4:	6822      	ldr	r2, [r4, #0]
2400b7b6:	6993      	ldr	r3, [r2, #24]
2400b7b8:	f043 0308 	orr.w	r3, r3, #8
2400b7bc:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
2400b7be:	6822      	ldr	r2, [r4, #0]
2400b7c0:	6993      	ldr	r3, [r2, #24]
2400b7c2:	f043 0310 	orr.w	r3, r3, #16
2400b7c6:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400b7c8:	6822      	ldr	r2, [r4, #0]
2400b7ca:	6993      	ldr	r3, [r2, #24]
2400b7cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b7d0:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
2400b7d2:	6822      	ldr	r2, [r4, #0]
2400b7d4:	6913      	ldr	r3, [r2, #16]
2400b7d6:	f023 0308 	bic.w	r3, r3, #8
2400b7da:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b7dc:	6823      	ldr	r3, [r4, #0]
2400b7de:	689b      	ldr	r3, [r3, #8]
2400b7e0:	f413 4f40 	tst.w	r3, #49152	; 0xc000
2400b7e4:	d137      	bne.n	2400b856 <HAL_SPI_IRQHandler+0xee>
      while (hspi->RxXferCount != 0UL)
2400b7e6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400b7ea:	b29b      	uxth	r3, r3
2400b7ec:	2b00      	cmp	r3, #0
2400b7ee:	d032      	beq.n	2400b856 <HAL_SPI_IRQHandler+0xee>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
2400b7f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b7f2:	e00f      	b.n	2400b814 <HAL_SPI_IRQHandler+0xac>
2400b7f4:	6823      	ldr	r3, [r4, #0]
2400b7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400b7f8:	6013      	str	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400b7fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b7fc:	3204      	adds	r2, #4
        hspi->RxXferCount--;
2400b7fe:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
2400b802:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->RxXferCount--;
2400b804:	3b01      	subs	r3, #1
2400b806:	b29b      	uxth	r3, r3
2400b808:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
2400b80c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
2400b810:	b29b      	uxth	r3, r3
2400b812:	b303      	cbz	r3, 2400b856 <HAL_SPI_IRQHandler+0xee>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
2400b814:	68e3      	ldr	r3, [r4, #12]
2400b816:	2b0f      	cmp	r3, #15
2400b818:	d8ec      	bhi.n	2400b7f4 <HAL_SPI_IRQHandler+0x8c>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
2400b81a:	2b07      	cmp	r3, #7
2400b81c:	f240 80c3 	bls.w	2400b9a6 <HAL_SPI_IRQHandler+0x23e>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
2400b820:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
2400b822:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
2400b824:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b826:	3202      	adds	r2, #2
2400b828:	e7e9      	b.n	2400b7fe <HAL_SPI_IRQHandler+0x96>
    hspi->RxISR(hspi);
2400b82a:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400b82c:	4620      	mov	r0, r4
2400b82e:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
2400b830:	f007 0326 	and.w	r3, r7, #38	; 0x26
2400b834:	2b02      	cmp	r3, #2
2400b836:	d102      	bne.n	2400b83e <HAL_SPI_IRQHandler+0xd6>
    hspi->TxISR(hspi);
2400b838:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400b83a:	4620      	mov	r0, r4
2400b83c:	4798      	blx	r3
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_TSERF))
2400b83e:	0578      	lsls	r0, r7, #21
2400b840:	d507      	bpl.n	2400b852 <HAL_SPI_IRQHandler+0xea>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b842:	6822      	ldr	r2, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400b844:	2300      	movs	r3, #0
2400b846:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b84a:	6993      	ldr	r3, [r2, #24]
2400b84c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400b850:	6193      	str	r3, [r2, #24]
}
2400b852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
2400b856:	4620      	mov	r0, r4
2400b858:	f7ff fbf4 	bl	2400b044 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
2400b85c:	2301      	movs	r3, #1
2400b85e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400b862:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b866:	2b00      	cmp	r3, #0
2400b868:	f040 8099 	bne.w	2400b99e <HAL_SPI_IRQHandler+0x236>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
2400b86c:	2e05      	cmp	r6, #5
2400b86e:	f000 80a1 	beq.w	2400b9b4 <HAL_SPI_IRQHandler+0x24c>
    else if (State == HAL_SPI_STATE_BUSY_RX)
2400b872:	2e04      	cmp	r6, #4
2400b874:	f000 80a1 	beq.w	2400b9ba <HAL_SPI_IRQHandler+0x252>
    else if (State == HAL_SPI_STATE_BUSY_TX)
2400b878:	2e03      	cmp	r6, #3
2400b87a:	d1ea      	bne.n	2400b852 <HAL_SPI_IRQHandler+0xea>
      HAL_SPI_TxCpltCallback(hspi);
2400b87c:	f7ff fed0 	bl	2400b620 <HAL_SPI_TxCpltCallback>
2400b880:	e7e7      	b.n	2400b852 <HAL_SPI_IRQHandler+0xea>
    hspi->TxISR(hspi);
2400b882:	4620      	mov	r0, r4
2400b884:	6f63      	ldr	r3, [r4, #116]	; 0x74
2400b886:	4798      	blx	r3
    hspi->RxISR(hspi);
2400b888:	6f23      	ldr	r3, [r4, #112]	; 0x70
2400b88a:	4620      	mov	r0, r4
2400b88c:	4798      	blx	r3
    handled = 1UL;
2400b88e:	2201      	movs	r2, #1
2400b890:	e781      	b.n	2400b796 <HAL_SPI_IRQHandler+0x2e>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
2400b892:	f417 7f58 	tst.w	r7, #864	; 0x360
2400b896:	d0dc      	beq.n	2400b852 <HAL_SPI_IRQHandler+0xea>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
2400b898:	0678      	lsls	r0, r7, #25
2400b89a:	d50a      	bpl.n	2400b8b2 <HAL_SPI_IRQHandler+0x14a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b89c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b8a0:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2400b8a2:	f043 0304 	orr.w	r3, r3, #4
2400b8a6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
2400b8aa:	6993      	ldr	r3, [r2, #24]
2400b8ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b8b0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
2400b8b2:	05b9      	lsls	r1, r7, #22
2400b8b4:	d50a      	bpl.n	2400b8cc <HAL_SPI_IRQHandler+0x164>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b8b6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b8ba:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
2400b8bc:	f043 0301 	orr.w	r3, r3, #1
2400b8c0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
2400b8c4:	6993      	ldr	r3, [r2, #24]
2400b8c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400b8ca:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
2400b8cc:	05fa      	lsls	r2, r7, #23
2400b8ce:	d50a      	bpl.n	2400b8e6 <HAL_SPI_IRQHandler+0x17e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b8d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b8d4:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2400b8d6:	f043 0308 	orr.w	r3, r3, #8
2400b8da:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
2400b8de:	6993      	ldr	r3, [r2, #24]
2400b8e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400b8e4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
2400b8e6:	06bb      	lsls	r3, r7, #26
2400b8e8:	d50a      	bpl.n	2400b900 <HAL_SPI_IRQHandler+0x198>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b8ea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b8ee:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
2400b8f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400b8f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
2400b8f8:	6993      	ldr	r3, [r2, #24]
2400b8fa:	f043 0320 	orr.w	r3, r3, #32
2400b8fe:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2400b900:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b904:	2b00      	cmp	r3, #0
2400b906:	d0a4      	beq.n	2400b852 <HAL_SPI_IRQHandler+0xea>
      __HAL_SPI_DISABLE(hspi);
2400b908:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b90a:	f408 4840 	and.w	r8, r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400b90e:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b910:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
2400b914:	f023 0301 	bic.w	r3, r3, #1
2400b918:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
2400b91a:	6822      	ldr	r2, [r4, #0]
2400b91c:	4b28      	ldr	r3, [pc, #160]	; (2400b9c0 <HAL_SPI_IRQHandler+0x258>)
2400b91e:	6911      	ldr	r1, [r2, #16]
2400b920:	ea03 0301 	and.w	r3, r3, r1
2400b924:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
2400b926:	d136      	bne.n	2400b996 <HAL_SPI_IRQHandler+0x22e>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
2400b928:	6822      	ldr	r2, [r4, #0]
2400b92a:	6893      	ldr	r3, [r2, #8]
2400b92c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
2400b930:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
2400b932:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
2400b934:	b15b      	cbz	r3, 2400b94e <HAL_SPI_IRQHandler+0x1e6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
2400b936:	4a23      	ldr	r2, [pc, #140]	; (2400b9c4 <HAL_SPI_IRQHandler+0x25c>)
2400b938:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2400b93a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
2400b93c:	f7fa f892 	bl	24005a64 <HAL_DMA_Abort_IT>
2400b940:	b128      	cbz	r0, 2400b94e <HAL_SPI_IRQHandler+0x1e6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400b942:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b94a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
2400b94e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
2400b950:	2b00      	cmp	r3, #0
2400b952:	f43f af7e 	beq.w	2400b852 <HAL_SPI_IRQHandler+0xea>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2400b956:	4a1b      	ldr	r2, [pc, #108]	; (2400b9c4 <HAL_SPI_IRQHandler+0x25c>)
2400b958:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
2400b95a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
2400b95c:	f7fa f882 	bl	24005a64 <HAL_DMA_Abort_IT>
2400b960:	2800      	cmp	r0, #0
2400b962:	f43f af76 	beq.w	2400b852 <HAL_SPI_IRQHandler+0xea>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2400b966:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
2400b96a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2400b96e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
2400b972:	e76e      	b.n	2400b852 <HAL_SPI_IRQHandler+0xea>
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b974:	6821      	ldr	r1, [r4, #0]
    hspi->Reload.Requested = 0UL;
2400b976:	2300      	movs	r3, #0
2400b978:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
2400b97c:	698b      	ldr	r3, [r1, #24]
2400b97e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2400b982:	618b      	str	r3, [r1, #24]
2400b984:	e712      	b.n	2400b7ac <HAL_SPI_IRQHandler+0x44>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
2400b986:	69ab      	ldr	r3, [r5, #24]
2400b988:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2400b98c:	61ab      	str	r3, [r5, #24]
    HAL_SPI_SuspendCallback(hspi);
2400b98e:	f7ff fee9 	bl	2400b764 <HAL_SPI_SuspendCallback>
}
2400b992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
2400b996:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
2400b998:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
2400b99a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
2400b99e:	f7ff fe5d 	bl	2400b65c <HAL_SPI_ErrorCallback>
}
2400b9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
2400b9a6:	6823      	ldr	r3, [r4, #0]
2400b9a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
2400b9ac:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
2400b9ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
2400b9b0:	3201      	adds	r2, #1
2400b9b2:	e724      	b.n	2400b7fe <HAL_SPI_IRQHandler+0x96>
      HAL_SPI_TxRxCpltCallback(hspi);
2400b9b4:	f01f fe88 	bl	2402b6c8 <__HAL_SPI_TxRxCpltCallback_veneer>
2400b9b8:	e74b      	b.n	2400b852 <HAL_SPI_IRQHandler+0xea>
      HAL_SPI_RxCpltCallback(hspi);
2400b9ba:	f7ff fe33 	bl	2400b624 <HAL_SPI_RxCpltCallback>
2400b9be:	e748      	b.n	2400b852 <HAL_SPI_IRQHandler+0xea>
2400b9c0:	fffffc94 	.word	0xfffffc94
2400b9c4:	2400b749 	.word	0x2400b749

2400b9c8 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400b9c8:	680b      	ldr	r3, [r1, #0]
{
2400b9ca:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
2400b9cc:	b9d3      	cbnz	r3, 2400ba04 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400b9ce:	6804      	ldr	r4, [r0, #0]
2400b9d0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
2400b9d4:	684a      	ldr	r2, [r1, #4]
2400b9d6:	4023      	ands	r3, r4
2400b9d8:	4313      	orrs	r3, r2
2400b9da:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400b9de:	4323      	orrs	r3, r4
2400b9e0:	4313      	orrs	r3, r2
2400b9e2:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
2400b9e6:	4323      	orrs	r3, r4
2400b9e8:	4313      	orrs	r3, r2
2400b9ea:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
2400b9ee:	4323      	orrs	r3, r4
2400b9f0:	4313      	orrs	r3, r2
2400b9f2:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
2400b9f6:	4323      	orrs	r3, r4
2400b9f8:	4313      	orrs	r3, r2
2400b9fa:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
2400b9fc:	2000      	movs	r0, #0
2400b9fe:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ba02:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400ba04:	6802      	ldr	r2, [r0, #0]
2400ba06:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
2400ba0a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
2400ba0e:	4322      	orrs	r2, r4
2400ba10:	6a4c      	ldr	r4, [r1, #36]	; 0x24
2400ba12:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400ba14:	4b0a      	ldr	r3, [pc, #40]	; (2400ba40 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
2400ba16:	4322      	orrs	r2, r4
2400ba18:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
2400ba1a:	6842      	ldr	r2, [r0, #4]
2400ba1c:	4013      	ands	r3, r2
2400ba1e:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
2400ba22:	4323      	orrs	r3, r4
2400ba24:	4313      	orrs	r3, r2
2400ba26:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
2400ba2a:	4323      	orrs	r3, r4
2400ba2c:	4313      	orrs	r3, r2
2400ba2e:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
2400ba32:	4323      	orrs	r3, r4
2400ba34:	4313      	orrs	r3, r2
2400ba36:	6043      	str	r3, [r0, #4]
}
2400ba38:	2000      	movs	r0, #0
2400ba3a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ba3e:	4770      	bx	lr
2400ba40:	ffff8000 	.word	0xffff8000

2400ba44 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
2400ba44:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
2400ba46:	bb0a      	cbnz	r2, 2400ba8c <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400ba48:	6883      	ldr	r3, [r0, #8]
2400ba4a:	e9d1 2400 	ldrd	r2, r4, [r1]
2400ba4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400ba52:	3c01      	subs	r4, #1
2400ba54:	3a01      	subs	r2, #1
2400ba56:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400ba5a:	4313      	orrs	r3, r2
2400ba5c:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
2400ba60:	3c01      	subs	r4, #1
2400ba62:	3a01      	subs	r2, #1
2400ba64:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
2400ba68:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
2400ba6c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
2400ba70:	698a      	ldr	r2, [r1, #24]
2400ba72:	3d01      	subs	r5, #1
2400ba74:	1e61      	subs	r1, r4, #1
2400ba76:	3a01      	subs	r2, #1
2400ba78:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
2400ba7c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
2400ba80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400ba84:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
2400ba86:	2000      	movs	r0, #0
2400ba88:	bc30      	pop	{r4, r5}
2400ba8a:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
2400ba8c:	6885      	ldr	r5, [r0, #8]
2400ba8e:	68ca      	ldr	r2, [r1, #12]
2400ba90:	4b12      	ldr	r3, [pc, #72]	; (2400badc <FMC_SDRAM_Timing_Init+0x98>)
2400ba92:	1e54      	subs	r4, r2, #1
2400ba94:	694a      	ldr	r2, [r1, #20]
2400ba96:	402b      	ands	r3, r5
2400ba98:	3a01      	subs	r2, #1
2400ba9a:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
2400ba9e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
2400baa2:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
2400baa4:	68c3      	ldr	r3, [r0, #12]
2400baa6:	688d      	ldr	r5, [r1, #8]
2400baa8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400baac:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2400bab0:	e9d1 2400 	ldrd	r2, r4, [r1]
2400bab4:	3c01      	subs	r4, #1
2400bab6:	3a01      	subs	r2, #1
2400bab8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
2400babc:	690c      	ldr	r4, [r1, #16]
2400babe:	4313      	orrs	r3, r2
2400bac0:	698a      	ldr	r2, [r1, #24]
2400bac2:	1e61      	subs	r1, r4, #1
2400bac4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
2400bac8:	3a01      	subs	r2, #1
2400baca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2400bace:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
2400bad2:	60c3      	str	r3, [r0, #12]
}
2400bad4:	2000      	movs	r0, #0
2400bad6:	bc30      	pop	{r4, r5}
2400bad8:	4770      	bx	lr
2400bada:	bf00      	nop
2400badc:	ff0f0fff 	.word	0xff0f0fff

2400bae0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
2400bae0:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400bae2:	e9d1 3400 	ldrd	r3, r4, [r1]
{
2400bae6:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400bae8:	6900      	ldr	r0, [r0, #16]
2400baea:	4323      	orrs	r3, r4
2400baec:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
2400baf0:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
2400baf4:	4c05      	ldr	r4, [pc, #20]	; (2400bb0c <FMC_SDRAM_SendCommand+0x2c>)
2400baf6:	3901      	subs	r1, #1
2400baf8:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
2400bafa:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
2400bafc:	4323      	orrs	r3, r4
2400bafe:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
2400bb02:	6113      	str	r3, [r2, #16]
}
2400bb04:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bb08:	4770      	bx	lr
2400bb0a:	bf00      	nop
2400bb0c:	ffc00000 	.word	0xffc00000

2400bb10 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
2400bb10:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400bb12:	4b05      	ldr	r3, [pc, #20]	; (2400bb28 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
2400bb14:	2000      	movs	r0, #0
{
2400bb16:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
2400bb18:	6954      	ldr	r4, [r2, #20]
2400bb1a:	4023      	ands	r3, r4
2400bb1c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
2400bb20:	6151      	str	r1, [r2, #20]
}
2400bb22:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bb26:	4770      	bx	lr
2400bb28:	ffffc001 	.word	0xffffc001

2400bb2c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
2400bb2c:	b084      	sub	sp, #16
2400bb2e:	b410      	push	{r4}
2400bb30:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
2400bb34:	4614      	mov	r4, r2
{
2400bb36:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
2400bb3a:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
2400bb3c:	9904      	ldr	r1, [sp, #16]
{
2400bb3e:	4602      	mov	r2, r0
             Init.BusWide             | \
2400bb40:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
2400bb42:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400bb44:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
2400bb46:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
2400bb48:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
2400bb4a:	4303      	orrs	r3, r0

  return HAL_OK;
}
2400bb4c:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
2400bb4e:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
2400bb50:	4903      	ldr	r1, [pc, #12]	; (2400bb60 <SDMMC_Init+0x34>)
2400bb52:	4021      	ands	r1, r4
2400bb54:	430b      	orrs	r3, r1
2400bb56:	6053      	str	r3, [r2, #4]
}
2400bb58:	f85d 4b04 	ldr.w	r4, [sp], #4
2400bb5c:	b004      	add	sp, #16
2400bb5e:	4770      	bx	lr
2400bb60:	ffc02c00 	.word	0xffc02c00

2400bb64 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
2400bb64:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
2400bb68:	4770      	bx	lr
2400bb6a:	bf00      	nop

2400bb6c <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
2400bb6c:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
2400bb6e:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
2400bb70:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
2400bb72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
2400bb76:	4770      	bx	lr

2400bb78 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
2400bb78:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
2400bb7a:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
2400bb7c:	681a      	ldr	r2, [r3, #0]
2400bb7e:	f042 0203 	orr.w	r2, r2, #3
2400bb82:	601a      	str	r2, [r3, #0]
}
2400bb84:	4770      	bx	lr
2400bb86:	bf00      	nop

2400bb88 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
2400bb88:	6800      	ldr	r0, [r0, #0]
}
2400bb8a:	f000 0003 	and.w	r0, r0, #3
2400bb8e:	4770      	bx	lr

2400bb90 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
2400bb90:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
2400bb92:	5840      	ldr	r0, [r0, r1]
}
2400bb94:	4770      	bx	lr
2400bb96:	bf00      	nop

2400bb98 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
2400bb98:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
2400bb9a:	680b      	ldr	r3, [r1, #0]
{
2400bb9c:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
2400bb9e:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
2400bba0:	684b      	ldr	r3, [r1, #4]
2400bba2:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
2400bba4:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400bba6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
2400bba8:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
2400bbac:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
2400bbae:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400bbb0:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
2400bbb4:	2000      	movs	r0, #0
                       Data->TransferDir   | \
2400bbb6:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
2400bbb8:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
2400bbba:	430b      	orrs	r3, r1
2400bbbc:	62d3      	str	r3, [r2, #44]	; 0x2c
}
2400bbbe:	bc30      	pop	{r4, r5}
2400bbc0:	4770      	bx	lr
2400bbc2:	bf00      	nop

2400bbc4 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bbc4:	4a50      	ldr	r2, [pc, #320]	; (2400bd08 <SDMMC_CmdBlockLength+0x144>)
{
2400bbc6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bbc8:	4b50      	ldr	r3, [pc, #320]	; (2400bd0c <SDMMC_CmdBlockLength+0x148>)
2400bbca:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400bbcc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bbd0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bbd4:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400bbd8:	484d      	ldr	r0, [pc, #308]	; (2400bd10 <SDMMC_CmdBlockLength+0x14c>)
2400bbda:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bbde:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bbe0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bbe2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bbe6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bbe8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bbec:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
2400bbf0:	1e53      	subs	r3, r2, #1
2400bbf2:	b14a      	cbz	r2, 2400bc08 <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400bbf4:	4947      	ldr	r1, [pc, #284]	; (2400bd14 <SDMMC_CmdBlockLength+0x150>)
    sta_reg = SDMMCx->STA;
2400bbf6:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400bbfa:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400bbfc:	420a      	tst	r2, r1
2400bbfe:	d001      	beq.n	2400bc04 <SDMMC_CmdBlockLength+0x40>
2400bc00:	0492      	lsls	r2, r2, #18
2400bc02:	d504      	bpl.n	2400bc0e <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
2400bc04:	1c58      	adds	r0, r3, #1
2400bc06:	d1f6      	bne.n	2400bbf6 <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400bc08:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400bc0c:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bc0e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400bc12:	0758      	lsls	r0, r3, #29
2400bc14:	d445      	bmi.n	2400bca2 <SDMMC_CmdBlockLength+0xde>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bc16:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400bc1a:	f010 0001 	ands.w	r0, r0, #1
2400bc1e:	d137      	bne.n	2400bc90 <SDMMC_CmdBlockLength+0xcc>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bc20:	4b3d      	ldr	r3, [pc, #244]	; (2400bd18 <SDMMC_CmdBlockLength+0x154>)
2400bc22:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400bc26:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400bc2a:	b2db      	uxtb	r3, r3
2400bc2c:	2b10      	cmp	r3, #16
2400bc2e:	d136      	bne.n	2400bc9e <SDMMC_CmdBlockLength+0xda>
  return (*(__IO uint32_t *) tmp);
2400bc30:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400bc34:	4839      	ldr	r0, [pc, #228]	; (2400bd1c <SDMMC_CmdBlockLength+0x158>)
2400bc36:	4018      	ands	r0, r3
2400bc38:	2800      	cmp	r0, #0
2400bc3a:	d02f      	beq.n	2400bc9c <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bc3c:	2b00      	cmp	r3, #0
2400bc3e:	db35      	blt.n	2400bcac <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bc40:	0059      	lsls	r1, r3, #1
2400bc42:	d436      	bmi.n	2400bcb2 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400bc44:	009a      	lsls	r2, r3, #2
2400bc46:	d436      	bmi.n	2400bcb6 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400bc48:	00d9      	lsls	r1, r3, #3
2400bc4a:	d436      	bmi.n	2400bcba <SDMMC_CmdBlockLength+0xf6>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400bc4c:	011a      	lsls	r2, r3, #4
2400bc4e:	d437      	bmi.n	2400bcc0 <SDMMC_CmdBlockLength+0xfc>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400bc50:	0159      	lsls	r1, r3, #5
2400bc52:	d438      	bmi.n	2400bcc6 <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400bc54:	01da      	lsls	r2, r3, #7
2400bc56:	d439      	bmi.n	2400bccc <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bc58:	0219      	lsls	r1, r3, #8
2400bc5a:	d43a      	bmi.n	2400bcd2 <SDMMC_CmdBlockLength+0x10e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bc5c:	025a      	lsls	r2, r3, #9
2400bc5e:	d43b      	bmi.n	2400bcd8 <SDMMC_CmdBlockLength+0x114>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bc60:	0299      	lsls	r1, r3, #10
2400bc62:	d445      	bmi.n	2400bcf0 <SDMMC_CmdBlockLength+0x12c>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400bc64:	02da      	lsls	r2, r3, #11
2400bc66:	d440      	bmi.n	2400bcea <SDMMC_CmdBlockLength+0x126>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400bc68:	0359      	lsls	r1, r3, #13
2400bc6a:	d43b      	bmi.n	2400bce4 <SDMMC_CmdBlockLength+0x120>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400bc6c:	039a      	lsls	r2, r3, #14
2400bc6e:	d436      	bmi.n	2400bcde <SDMMC_CmdBlockLength+0x11a>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400bc70:	03d9      	lsls	r1, r3, #15
2400bc72:	d446      	bmi.n	2400bd02 <SDMMC_CmdBlockLength+0x13e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400bc74:	041a      	lsls	r2, r3, #16
2400bc76:	d441      	bmi.n	2400bcfc <SDMMC_CmdBlockLength+0x138>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400bc78:	0459      	lsls	r1, r3, #17
2400bc7a:	d43c      	bmi.n	2400bcf6 <SDMMC_CmdBlockLength+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400bc7c:	049a      	lsls	r2, r3, #18
2400bc7e:	d40b      	bmi.n	2400bc98 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400bc80:	f013 0f08 	tst.w	r3, #8
2400bc84:	bf14      	ite	ne
2400bc86:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400bc8a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400bc8e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400bc90:	2301      	movs	r3, #1
2400bc92:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bc96:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400bc98:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400bc9c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bc9e:	2001      	movs	r0, #1
2400bca0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bca2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bca4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bca6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bcaa:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400bcac:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400bcb0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400bcb2:	2040      	movs	r0, #64	; 0x40
2400bcb4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400bcb6:	2080      	movs	r0, #128	; 0x80
2400bcb8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400bcba:	f44f 7080 	mov.w	r0, #256	; 0x100
2400bcbe:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400bcc0:	f44f 7000 	mov.w	r0, #512	; 0x200
2400bcc4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400bcc6:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400bcca:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bccc:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400bcd0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bcd2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400bcd6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bcd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400bcdc:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bcde:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400bce2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400bce4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400bce8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400bcea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400bcee:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400bcf0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400bcf4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400bcf6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400bcfa:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bcfc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400bd00:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400bd02:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400bd06:	4770      	bx	lr
2400bd08:	200008ec 	.word	0x200008ec
2400bd0c:	10624dd3 	.word	0x10624dd3
2400bd10:	fffee0c0 	.word	0xfffee0c0
2400bd14:	00200045 	.word	0x00200045
2400bd18:	002000c5 	.word	0x002000c5
2400bd1c:	fdffe008 	.word	0xfdffe008

2400bd20 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bd20:	4a50      	ldr	r2, [pc, #320]	; (2400be64 <SDMMC_CmdReadSingleBlock+0x144>)
{
2400bd22:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bd24:	4b50      	ldr	r3, [pc, #320]	; (2400be68 <SDMMC_CmdReadSingleBlock+0x148>)
2400bd26:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400bd28:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bd2c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bd30:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400bd34:	484d      	ldr	r0, [pc, #308]	; (2400be6c <SDMMC_CmdReadSingleBlock+0x14c>)
2400bd36:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bd3a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bd3c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bd3e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bd42:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bd44:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bd48:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400bd4c:	1e53      	subs	r3, r2, #1
2400bd4e:	b14a      	cbz	r2, 2400bd64 <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400bd50:	4947      	ldr	r1, [pc, #284]	; (2400be70 <SDMMC_CmdReadSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400bd52:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400bd56:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400bd58:	420a      	tst	r2, r1
2400bd5a:	d001      	beq.n	2400bd60 <SDMMC_CmdReadSingleBlock+0x40>
2400bd5c:	0492      	lsls	r2, r2, #18
2400bd5e:	d504      	bpl.n	2400bd6a <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
2400bd60:	1c58      	adds	r0, r3, #1
2400bd62:	d1f6      	bne.n	2400bd52 <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400bd64:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400bd68:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bd6a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400bd6e:	0758      	lsls	r0, r3, #29
2400bd70:	d445      	bmi.n	2400bdfe <SDMMC_CmdReadSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bd72:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400bd76:	f010 0001 	ands.w	r0, r0, #1
2400bd7a:	d137      	bne.n	2400bdec <SDMMC_CmdReadSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bd7c:	4b3d      	ldr	r3, [pc, #244]	; (2400be74 <SDMMC_CmdReadSingleBlock+0x154>)
2400bd7e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400bd82:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400bd86:	b2db      	uxtb	r3, r3
2400bd88:	2b11      	cmp	r3, #17
2400bd8a:	d136      	bne.n	2400bdfa <SDMMC_CmdReadSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400bd8c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400bd90:	4839      	ldr	r0, [pc, #228]	; (2400be78 <SDMMC_CmdReadSingleBlock+0x158>)
2400bd92:	4018      	ands	r0, r3
2400bd94:	2800      	cmp	r0, #0
2400bd96:	d02f      	beq.n	2400bdf8 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bd98:	2b00      	cmp	r3, #0
2400bd9a:	db35      	blt.n	2400be08 <SDMMC_CmdReadSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bd9c:	0059      	lsls	r1, r3, #1
2400bd9e:	d436      	bmi.n	2400be0e <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400bda0:	009a      	lsls	r2, r3, #2
2400bda2:	d436      	bmi.n	2400be12 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400bda4:	00d9      	lsls	r1, r3, #3
2400bda6:	d436      	bmi.n	2400be16 <SDMMC_CmdReadSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400bda8:	011a      	lsls	r2, r3, #4
2400bdaa:	d437      	bmi.n	2400be1c <SDMMC_CmdReadSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400bdac:	0159      	lsls	r1, r3, #5
2400bdae:	d438      	bmi.n	2400be22 <SDMMC_CmdReadSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400bdb0:	01da      	lsls	r2, r3, #7
2400bdb2:	d439      	bmi.n	2400be28 <SDMMC_CmdReadSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bdb4:	0219      	lsls	r1, r3, #8
2400bdb6:	d43a      	bmi.n	2400be2e <SDMMC_CmdReadSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bdb8:	025a      	lsls	r2, r3, #9
2400bdba:	d43b      	bmi.n	2400be34 <SDMMC_CmdReadSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bdbc:	0299      	lsls	r1, r3, #10
2400bdbe:	d445      	bmi.n	2400be4c <SDMMC_CmdReadSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400bdc0:	02da      	lsls	r2, r3, #11
2400bdc2:	d440      	bmi.n	2400be46 <SDMMC_CmdReadSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400bdc4:	0359      	lsls	r1, r3, #13
2400bdc6:	d43b      	bmi.n	2400be40 <SDMMC_CmdReadSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400bdc8:	039a      	lsls	r2, r3, #14
2400bdca:	d436      	bmi.n	2400be3a <SDMMC_CmdReadSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400bdcc:	03d9      	lsls	r1, r3, #15
2400bdce:	d446      	bmi.n	2400be5e <SDMMC_CmdReadSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400bdd0:	041a      	lsls	r2, r3, #16
2400bdd2:	d441      	bmi.n	2400be58 <SDMMC_CmdReadSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400bdd4:	0459      	lsls	r1, r3, #17
2400bdd6:	d43c      	bmi.n	2400be52 <SDMMC_CmdReadSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400bdd8:	049a      	lsls	r2, r3, #18
2400bdda:	d40b      	bmi.n	2400bdf4 <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400bddc:	f013 0f08 	tst.w	r3, #8
2400bde0:	bf14      	ite	ne
2400bde2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400bde6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400bdea:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400bdec:	2301      	movs	r3, #1
2400bdee:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bdf2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400bdf4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400bdf8:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bdfa:	2001      	movs	r0, #1
2400bdfc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bdfe:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400be00:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400be02:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400be06:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400be08:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400be0c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400be0e:	2040      	movs	r0, #64	; 0x40
2400be10:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400be12:	2080      	movs	r0, #128	; 0x80
2400be14:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400be16:	f44f 7080 	mov.w	r0, #256	; 0x100
2400be1a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400be1c:	f44f 7000 	mov.w	r0, #512	; 0x200
2400be20:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400be22:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400be26:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400be28:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400be2c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400be2e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400be32:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400be34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400be38:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400be3a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400be3e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400be40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400be44:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400be46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400be4a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400be4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400be50:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400be52:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400be56:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400be58:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400be5c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400be5e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400be62:	4770      	bx	lr
2400be64:	200008ec 	.word	0x200008ec
2400be68:	10624dd3 	.word	0x10624dd3
2400be6c:	fffee0c0 	.word	0xfffee0c0
2400be70:	00200045 	.word	0x00200045
2400be74:	002000c5 	.word	0x002000c5
2400be78:	fdffe008 	.word	0xfdffe008

2400be7c <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400be7c:	4a50      	ldr	r2, [pc, #320]	; (2400bfc0 <SDMMC_CmdReadMultiBlock+0x144>)
{
2400be7e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400be80:	4b50      	ldr	r3, [pc, #320]	; (2400bfc4 <SDMMC_CmdReadMultiBlock+0x148>)
2400be82:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400be84:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400be88:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400be8c:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400be90:	484d      	ldr	r0, [pc, #308]	; (2400bfc8 <SDMMC_CmdReadMultiBlock+0x14c>)
2400be92:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400be96:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400be98:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400be9a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400be9e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bea0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bea4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400bea8:	1e53      	subs	r3, r2, #1
2400beaa:	b14a      	cbz	r2, 2400bec0 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400beac:	4947      	ldr	r1, [pc, #284]	; (2400bfcc <SDMMC_CmdReadMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400beae:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400beb2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400beb4:	420a      	tst	r2, r1
2400beb6:	d001      	beq.n	2400bebc <SDMMC_CmdReadMultiBlock+0x40>
2400beb8:	0492      	lsls	r2, r2, #18
2400beba:	d504      	bpl.n	2400bec6 <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
2400bebc:	1c58      	adds	r0, r3, #1
2400bebe:	d1f6      	bne.n	2400beae <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400bec0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400bec4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400bec6:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400beca:	0758      	lsls	r0, r3, #29
2400becc:	d445      	bmi.n	2400bf5a <SDMMC_CmdReadMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400bece:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400bed2:	f010 0001 	ands.w	r0, r0, #1
2400bed6:	d137      	bne.n	2400bf48 <SDMMC_CmdReadMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400bed8:	4b3d      	ldr	r3, [pc, #244]	; (2400bfd0 <SDMMC_CmdReadMultiBlock+0x154>)
2400beda:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400bede:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400bee2:	b2db      	uxtb	r3, r3
2400bee4:	2b12      	cmp	r3, #18
2400bee6:	d136      	bne.n	2400bf56 <SDMMC_CmdReadMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400bee8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400beec:	4839      	ldr	r0, [pc, #228]	; (2400bfd4 <SDMMC_CmdReadMultiBlock+0x158>)
2400beee:	4018      	ands	r0, r3
2400bef0:	2800      	cmp	r0, #0
2400bef2:	d02f      	beq.n	2400bf54 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400bef4:	2b00      	cmp	r3, #0
2400bef6:	db35      	blt.n	2400bf64 <SDMMC_CmdReadMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400bef8:	0059      	lsls	r1, r3, #1
2400befa:	d436      	bmi.n	2400bf6a <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400befc:	009a      	lsls	r2, r3, #2
2400befe:	d436      	bmi.n	2400bf6e <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400bf00:	00d9      	lsls	r1, r3, #3
2400bf02:	d436      	bmi.n	2400bf72 <SDMMC_CmdReadMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400bf04:	011a      	lsls	r2, r3, #4
2400bf06:	d437      	bmi.n	2400bf78 <SDMMC_CmdReadMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400bf08:	0159      	lsls	r1, r3, #5
2400bf0a:	d438      	bmi.n	2400bf7e <SDMMC_CmdReadMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400bf0c:	01da      	lsls	r2, r3, #7
2400bf0e:	d439      	bmi.n	2400bf84 <SDMMC_CmdReadMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400bf10:	0219      	lsls	r1, r3, #8
2400bf12:	d43a      	bmi.n	2400bf8a <SDMMC_CmdReadMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400bf14:	025a      	lsls	r2, r3, #9
2400bf16:	d43b      	bmi.n	2400bf90 <SDMMC_CmdReadMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400bf18:	0299      	lsls	r1, r3, #10
2400bf1a:	d445      	bmi.n	2400bfa8 <SDMMC_CmdReadMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400bf1c:	02da      	lsls	r2, r3, #11
2400bf1e:	d440      	bmi.n	2400bfa2 <SDMMC_CmdReadMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400bf20:	0359      	lsls	r1, r3, #13
2400bf22:	d43b      	bmi.n	2400bf9c <SDMMC_CmdReadMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400bf24:	039a      	lsls	r2, r3, #14
2400bf26:	d436      	bmi.n	2400bf96 <SDMMC_CmdReadMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400bf28:	03d9      	lsls	r1, r3, #15
2400bf2a:	d446      	bmi.n	2400bfba <SDMMC_CmdReadMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400bf2c:	041a      	lsls	r2, r3, #16
2400bf2e:	d441      	bmi.n	2400bfb4 <SDMMC_CmdReadMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400bf30:	0459      	lsls	r1, r3, #17
2400bf32:	d43c      	bmi.n	2400bfae <SDMMC_CmdReadMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400bf34:	049a      	lsls	r2, r3, #18
2400bf36:	d40b      	bmi.n	2400bf50 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400bf38:	f013 0f08 	tst.w	r3, #8
2400bf3c:	bf14      	ite	ne
2400bf3e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400bf42:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400bf46:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400bf48:	2301      	movs	r3, #1
2400bf4a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bf4e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400bf50:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400bf54:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400bf56:	2001      	movs	r0, #1
2400bf58:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bf5a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bf5c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400bf5e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400bf62:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400bf64:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400bf68:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400bf6a:	2040      	movs	r0, #64	; 0x40
2400bf6c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400bf6e:	2080      	movs	r0, #128	; 0x80
2400bf70:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400bf72:	f44f 7080 	mov.w	r0, #256	; 0x100
2400bf76:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400bf78:	f44f 7000 	mov.w	r0, #512	; 0x200
2400bf7c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400bf7e:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400bf82:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400bf84:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400bf88:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400bf8a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400bf8e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400bf90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400bf94:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400bf96:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400bf9a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400bf9c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400bfa0:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400bfa2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400bfa6:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400bfa8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400bfac:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400bfae:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400bfb2:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400bfb4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400bfb8:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400bfba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400bfbe:	4770      	bx	lr
2400bfc0:	200008ec 	.word	0x200008ec
2400bfc4:	10624dd3 	.word	0x10624dd3
2400bfc8:	fffee0c0 	.word	0xfffee0c0
2400bfcc:	00200045 	.word	0x00200045
2400bfd0:	002000c5 	.word	0x002000c5
2400bfd4:	fdffe008 	.word	0xfdffe008

2400bfd8 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bfd8:	4a50      	ldr	r2, [pc, #320]	; (2400c11c <SDMMC_CmdWriteSingleBlock+0x144>)
{
2400bfda:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bfdc:	4b50      	ldr	r3, [pc, #320]	; (2400c120 <SDMMC_CmdWriteSingleBlock+0x148>)
2400bfde:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400bfe0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bfe4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bfe8:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400bfec:	484d      	ldr	r0, [pc, #308]	; (2400c124 <SDMMC_CmdWriteSingleBlock+0x14c>)
2400bfee:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bff2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bff4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bff6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400bffa:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400bffc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c000:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c004:	1e53      	subs	r3, r2, #1
2400c006:	b14a      	cbz	r2, 2400c01c <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c008:	4947      	ldr	r1, [pc, #284]	; (2400c128 <SDMMC_CmdWriteSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400c00a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c00e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c010:	420a      	tst	r2, r1
2400c012:	d001      	beq.n	2400c018 <SDMMC_CmdWriteSingleBlock+0x40>
2400c014:	0492      	lsls	r2, r2, #18
2400c016:	d504      	bpl.n	2400c022 <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
2400c018:	1c58      	adds	r0, r3, #1
2400c01a:	d1f6      	bne.n	2400c00a <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c01c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c020:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c022:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c026:	0758      	lsls	r0, r3, #29
2400c028:	d445      	bmi.n	2400c0b6 <SDMMC_CmdWriteSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c02a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c02e:	f010 0001 	ands.w	r0, r0, #1
2400c032:	d137      	bne.n	2400c0a4 <SDMMC_CmdWriteSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c034:	4b3d      	ldr	r3, [pc, #244]	; (2400c12c <SDMMC_CmdWriteSingleBlock+0x154>)
2400c036:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c03a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c03e:	b2db      	uxtb	r3, r3
2400c040:	2b18      	cmp	r3, #24
2400c042:	d136      	bne.n	2400c0b2 <SDMMC_CmdWriteSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400c044:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c048:	4839      	ldr	r0, [pc, #228]	; (2400c130 <SDMMC_CmdWriteSingleBlock+0x158>)
2400c04a:	4018      	ands	r0, r3
2400c04c:	2800      	cmp	r0, #0
2400c04e:	d02f      	beq.n	2400c0b0 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c050:	2b00      	cmp	r3, #0
2400c052:	db35      	blt.n	2400c0c0 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c054:	0059      	lsls	r1, r3, #1
2400c056:	d436      	bmi.n	2400c0c6 <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c058:	009a      	lsls	r2, r3, #2
2400c05a:	d436      	bmi.n	2400c0ca <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c05c:	00d9      	lsls	r1, r3, #3
2400c05e:	d436      	bmi.n	2400c0ce <SDMMC_CmdWriteSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c060:	011a      	lsls	r2, r3, #4
2400c062:	d437      	bmi.n	2400c0d4 <SDMMC_CmdWriteSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c064:	0159      	lsls	r1, r3, #5
2400c066:	d438      	bmi.n	2400c0da <SDMMC_CmdWriteSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c068:	01da      	lsls	r2, r3, #7
2400c06a:	d439      	bmi.n	2400c0e0 <SDMMC_CmdWriteSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c06c:	0219      	lsls	r1, r3, #8
2400c06e:	d43a      	bmi.n	2400c0e6 <SDMMC_CmdWriteSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c070:	025a      	lsls	r2, r3, #9
2400c072:	d43b      	bmi.n	2400c0ec <SDMMC_CmdWriteSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c074:	0299      	lsls	r1, r3, #10
2400c076:	d445      	bmi.n	2400c104 <SDMMC_CmdWriteSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c078:	02da      	lsls	r2, r3, #11
2400c07a:	d440      	bmi.n	2400c0fe <SDMMC_CmdWriteSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c07c:	0359      	lsls	r1, r3, #13
2400c07e:	d43b      	bmi.n	2400c0f8 <SDMMC_CmdWriteSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c080:	039a      	lsls	r2, r3, #14
2400c082:	d436      	bmi.n	2400c0f2 <SDMMC_CmdWriteSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c084:	03d9      	lsls	r1, r3, #15
2400c086:	d446      	bmi.n	2400c116 <SDMMC_CmdWriteSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c088:	041a      	lsls	r2, r3, #16
2400c08a:	d441      	bmi.n	2400c110 <SDMMC_CmdWriteSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c08c:	0459      	lsls	r1, r3, #17
2400c08e:	d43c      	bmi.n	2400c10a <SDMMC_CmdWriteSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c090:	049a      	lsls	r2, r3, #18
2400c092:	d40b      	bmi.n	2400c0ac <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c094:	f013 0f08 	tst.w	r3, #8
2400c098:	bf14      	ite	ne
2400c09a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c09e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c0a2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c0a4:	2301      	movs	r3, #1
2400c0a6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c0aa:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c0ac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c0b0:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c0b2:	2001      	movs	r0, #1
2400c0b4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c0b6:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c0b8:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c0ba:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c0be:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c0c0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c0c4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c0c6:	2040      	movs	r0, #64	; 0x40
2400c0c8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c0ca:	2080      	movs	r0, #128	; 0x80
2400c0cc:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c0ce:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c0d2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c0d4:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c0d8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c0da:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c0de:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c0e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c0e4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c0e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c0ea:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c0ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c0f0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c0f2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c0f6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c0f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c0fc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c0fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c102:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c104:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c108:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c10a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c10e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c110:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c114:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c116:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c11a:	4770      	bx	lr
2400c11c:	200008ec 	.word	0x200008ec
2400c120:	10624dd3 	.word	0x10624dd3
2400c124:	fffee0c0 	.word	0xfffee0c0
2400c128:	00200045 	.word	0x00200045
2400c12c:	002000c5 	.word	0x002000c5
2400c130:	fdffe008 	.word	0xfdffe008

2400c134 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c134:	4a50      	ldr	r2, [pc, #320]	; (2400c278 <SDMMC_CmdWriteMultiBlock+0x144>)
{
2400c136:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c138:	4b50      	ldr	r3, [pc, #320]	; (2400c27c <SDMMC_CmdWriteMultiBlock+0x148>)
2400c13a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c13c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c140:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c144:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c148:	484d      	ldr	r0, [pc, #308]	; (2400c280 <SDMMC_CmdWriteMultiBlock+0x14c>)
2400c14a:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c14e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c150:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c152:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c156:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c158:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c15c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c160:	1e53      	subs	r3, r2, #1
2400c162:	b14a      	cbz	r2, 2400c178 <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c164:	4947      	ldr	r1, [pc, #284]	; (2400c284 <SDMMC_CmdWriteMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
2400c166:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c16a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c16c:	420a      	tst	r2, r1
2400c16e:	d001      	beq.n	2400c174 <SDMMC_CmdWriteMultiBlock+0x40>
2400c170:	0492      	lsls	r2, r2, #18
2400c172:	d504      	bpl.n	2400c17e <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
2400c174:	1c58      	adds	r0, r3, #1
2400c176:	d1f6      	bne.n	2400c166 <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c178:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c17c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c17e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c182:	0758      	lsls	r0, r3, #29
2400c184:	d445      	bmi.n	2400c212 <SDMMC_CmdWriteMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c186:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c18a:	f010 0001 	ands.w	r0, r0, #1
2400c18e:	d137      	bne.n	2400c200 <SDMMC_CmdWriteMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c190:	4b3d      	ldr	r3, [pc, #244]	; (2400c288 <SDMMC_CmdWriteMultiBlock+0x154>)
2400c192:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c196:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c19a:	b2db      	uxtb	r3, r3
2400c19c:	2b19      	cmp	r3, #25
2400c19e:	d136      	bne.n	2400c20e <SDMMC_CmdWriteMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
2400c1a0:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c1a4:	4839      	ldr	r0, [pc, #228]	; (2400c28c <SDMMC_CmdWriteMultiBlock+0x158>)
2400c1a6:	4018      	ands	r0, r3
2400c1a8:	2800      	cmp	r0, #0
2400c1aa:	d02f      	beq.n	2400c20c <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c1ac:	2b00      	cmp	r3, #0
2400c1ae:	db35      	blt.n	2400c21c <SDMMC_CmdWriteMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c1b0:	0059      	lsls	r1, r3, #1
2400c1b2:	d436      	bmi.n	2400c222 <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c1b4:	009a      	lsls	r2, r3, #2
2400c1b6:	d436      	bmi.n	2400c226 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c1b8:	00d9      	lsls	r1, r3, #3
2400c1ba:	d436      	bmi.n	2400c22a <SDMMC_CmdWriteMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c1bc:	011a      	lsls	r2, r3, #4
2400c1be:	d437      	bmi.n	2400c230 <SDMMC_CmdWriteMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c1c0:	0159      	lsls	r1, r3, #5
2400c1c2:	d438      	bmi.n	2400c236 <SDMMC_CmdWriteMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c1c4:	01da      	lsls	r2, r3, #7
2400c1c6:	d439      	bmi.n	2400c23c <SDMMC_CmdWriteMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c1c8:	0219      	lsls	r1, r3, #8
2400c1ca:	d43a      	bmi.n	2400c242 <SDMMC_CmdWriteMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c1cc:	025a      	lsls	r2, r3, #9
2400c1ce:	d43b      	bmi.n	2400c248 <SDMMC_CmdWriteMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c1d0:	0299      	lsls	r1, r3, #10
2400c1d2:	d445      	bmi.n	2400c260 <SDMMC_CmdWriteMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c1d4:	02da      	lsls	r2, r3, #11
2400c1d6:	d440      	bmi.n	2400c25a <SDMMC_CmdWriteMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c1d8:	0359      	lsls	r1, r3, #13
2400c1da:	d43b      	bmi.n	2400c254 <SDMMC_CmdWriteMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c1dc:	039a      	lsls	r2, r3, #14
2400c1de:	d436      	bmi.n	2400c24e <SDMMC_CmdWriteMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c1e0:	03d9      	lsls	r1, r3, #15
2400c1e2:	d446      	bmi.n	2400c272 <SDMMC_CmdWriteMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c1e4:	041a      	lsls	r2, r3, #16
2400c1e6:	d441      	bmi.n	2400c26c <SDMMC_CmdWriteMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c1e8:	0459      	lsls	r1, r3, #17
2400c1ea:	d43c      	bmi.n	2400c266 <SDMMC_CmdWriteMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c1ec:	049a      	lsls	r2, r3, #18
2400c1ee:	d40b      	bmi.n	2400c208 <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c1f0:	f013 0f08 	tst.w	r3, #8
2400c1f4:	bf14      	ite	ne
2400c1f6:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c1fa:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c1fe:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c200:	2301      	movs	r3, #1
2400c202:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c206:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c208:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c20c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c20e:	2001      	movs	r0, #1
2400c210:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c212:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c214:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c216:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c21a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c21c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c220:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c222:	2040      	movs	r0, #64	; 0x40
2400c224:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c226:	2080      	movs	r0, #128	; 0x80
2400c228:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c22a:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c22e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c230:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c234:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c236:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c23a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c23c:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c240:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c242:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c246:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c248:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c24c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c24e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c252:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c254:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c258:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c25a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c25e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c260:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c264:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c266:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c26a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c26c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c270:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c272:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c276:	4770      	bx	lr
2400c278:	200008ec 	.word	0x200008ec
2400c27c:	10624dd3 	.word	0x10624dd3
2400c280:	fffee0c0 	.word	0xfffee0c0
2400c284:	00200045 	.word	0x00200045
2400c288:	002000c5 	.word	0x002000c5
2400c28c:	fdffe008 	.word	0xfdffe008

2400c290 <SDMMC_CmdStopTransfer>:
{
2400c290:	b430      	push	{r4, r5}
2400c292:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c294:	4b7b      	ldr	r3, [pc, #492]	; (2400c484 <SDMMC_CmdStopTransfer+0x1f4>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400c296:	68c0      	ldr	r0, [r0, #12]
  SDMMCx->ARG = Command->Argument;
2400c298:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c29a:	4c7b      	ldr	r4, [pc, #492]	; (2400c488 <SDMMC_CmdStopTransfer+0x1f8>)
2400c29c:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400c29e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c2a2:	4b7a      	ldr	r3, [pc, #488]	; (2400c48c <SDMMC_CmdStopTransfer+0x1fc>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
2400c2a4:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c2a6:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400c2aa:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c2ac:	4c78      	ldr	r4, [pc, #480]	; (2400c490 <SDMMC_CmdStopTransfer+0x200>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400c2ae:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c2b2:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
2400c2b4:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c2b6:	f241 100c 	movw	r0, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
2400c2ba:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c2bc:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c2c0:	68cc      	ldr	r4, [r1, #12]
2400c2c2:	4023      	ands	r3, r4
2400c2c4:	4318      	orrs	r0, r3
2400c2c6:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
2400c2c8:	b14a      	cbz	r2, 2400c2de <SDMMC_CmdStopTransfer+0x4e>
2400c2ca:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c2cc:	4871      	ldr	r0, [pc, #452]	; (2400c494 <SDMMC_CmdStopTransfer+0x204>)
    sta_reg = SDMMCx->STA;
2400c2ce:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400c2d0:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c2d2:	4202      	tst	r2, r0
2400c2d4:	d001      	beq.n	2400c2da <SDMMC_CmdStopTransfer+0x4a>
2400c2d6:	0492      	lsls	r2, r2, #18
2400c2d8:	d509      	bpl.n	2400c2ee <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
2400c2da:	1c5c      	adds	r4, r3, #1
2400c2dc:	d1f7      	bne.n	2400c2ce <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c2de:	68cb      	ldr	r3, [r1, #12]
2400c2e0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c2e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c2e8:	60cb      	str	r3, [r1, #12]
}
2400c2ea:	bc30      	pop	{r4, r5}
2400c2ec:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c2ee:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c2f0:	075b      	lsls	r3, r3, #29
2400c2f2:	d452      	bmi.n	2400c39a <SDMMC_CmdStopTransfer+0x10a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c2f4:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400c2f6:	f010 0001 	ands.w	r0, r0, #1
2400c2fa:	d13b      	bne.n	2400c374 <SDMMC_CmdStopTransfer+0xe4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c2fc:	4b66      	ldr	r3, [pc, #408]	; (2400c498 <SDMMC_CmdStopTransfer+0x208>)
2400c2fe:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c300:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c302:	b2db      	uxtb	r3, r3
2400c304:	2b0c      	cmp	r3, #12
2400c306:	d142      	bne.n	2400c38e <SDMMC_CmdStopTransfer+0xfe>
  return (*(__IO uint32_t *) tmp);
2400c308:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c30a:	4a64      	ldr	r2, [pc, #400]	; (2400c49c <SDMMC_CmdStopTransfer+0x20c>)
2400c30c:	401a      	ands	r2, r3
2400c30e:	2a00      	cmp	r2, #0
2400c310:	d037      	beq.n	2400c382 <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c312:	2b00      	cmp	r3, #0
2400c314:	db35      	blt.n	2400c382 <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c316:	005d      	lsls	r5, r3, #1
2400c318:	d446      	bmi.n	2400c3a8 <SDMMC_CmdStopTransfer+0x118>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c31a:	009c      	lsls	r4, r3, #2
2400c31c:	d44a      	bmi.n	2400c3b4 <SDMMC_CmdStopTransfer+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c31e:	00d8      	lsls	r0, r3, #3
2400c320:	d44e      	bmi.n	2400c3c0 <SDMMC_CmdStopTransfer+0x130>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c322:	011a      	lsls	r2, r3, #4
2400c324:	d453      	bmi.n	2400c3ce <SDMMC_CmdStopTransfer+0x13e>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c326:	015d      	lsls	r5, r3, #5
2400c328:	d458      	bmi.n	2400c3dc <SDMMC_CmdStopTransfer+0x14c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c32a:	01dc      	lsls	r4, r3, #7
2400c32c:	d464      	bmi.n	2400c3f8 <SDMMC_CmdStopTransfer+0x168>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c32e:	0218      	lsls	r0, r3, #8
2400c330:	d45b      	bmi.n	2400c3ea <SDMMC_CmdStopTransfer+0x15a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c332:	025a      	lsls	r2, r3, #9
2400c334:	d46e      	bmi.n	2400c414 <SDMMC_CmdStopTransfer+0x184>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c336:	029d      	lsls	r5, r3, #10
2400c338:	d465      	bmi.n	2400c406 <SDMMC_CmdStopTransfer+0x176>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c33a:	02dc      	lsls	r4, r3, #11
2400c33c:	d47f      	bmi.n	2400c43e <SDMMC_CmdStopTransfer+0x1ae>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c33e:	0358      	lsls	r0, r3, #13
2400c340:	d476      	bmi.n	2400c430 <SDMMC_CmdStopTransfer+0x1a0>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c342:	039a      	lsls	r2, r3, #14
2400c344:	d46d      	bmi.n	2400c422 <SDMMC_CmdStopTransfer+0x192>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c346:	03dd      	lsls	r5, r3, #15
2400c348:	f100 8095 	bmi.w	2400c476 <SDMMC_CmdStopTransfer+0x1e6>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c34c:	041c      	lsls	r4, r3, #16
2400c34e:	f100 8084 	bmi.w	2400c45a <SDMMC_CmdStopTransfer+0x1ca>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c352:	0458      	lsls	r0, r3, #17
2400c354:	d47a      	bmi.n	2400c44c <SDMMC_CmdStopTransfer+0x1bc>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c356:	049a      	lsls	r2, r3, #18
2400c358:	f100 8086 	bmi.w	2400c468 <SDMMC_CmdStopTransfer+0x1d8>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
2400c35c:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c360:	68cb      	ldr	r3, [r1, #12]
2400c362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
2400c366:	bf14      	ite	ne
2400c368:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c36c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c370:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c372:	e7ba      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c374:	2301      	movs	r3, #1
2400c376:	638b      	str	r3, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c378:	68cb      	ldr	r3, [r1, #12]
2400c37a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c37e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c380:	e7b3      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c382:	68cb      	ldr	r3, [r1, #12]
2400c384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c388:	60cb      	str	r3, [r1, #12]
}
2400c38a:	bc30      	pop	{r4, r5}
2400c38c:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c38e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c390:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c396:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c398:	e7a7      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c39a:	2004      	movs	r0, #4
2400c39c:	6388      	str	r0, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c39e:	68cb      	ldr	r3, [r1, #12]
2400c3a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c3a4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c3a6:	e7a0      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c3a8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c3aa:	2040      	movs	r0, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c3ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c3b0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c3b2:	e79a      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c3b4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c3b6:	2080      	movs	r0, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c3b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c3bc:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c3be:	e794      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c3c0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c3c2:	f44f 7080 	mov.w	r0, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c3c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c3ca:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c3cc:	e78d      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c3ce:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c3d0:	f44f 7000 	mov.w	r0, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c3d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c3d8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c3da:	e786      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c3dc:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c3de:	f44f 6080 	mov.w	r0, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c3e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c3e6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c3e8:	e77f      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c3ea:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c3ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c3f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c3f4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c3f6:	e778      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c3f8:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c3fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c3fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c402:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c404:	e771      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c406:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c408:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c40c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c410:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c412:	e76a      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c414:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c416:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c41a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c41e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c420:	e763      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c422:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c424:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c42c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c42e:	e75c      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c430:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c432:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c43a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c43c:	e755      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c43e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
2400c440:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c448:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c44a:	e74e      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c44c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c44e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c456:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c458:	e747      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c45a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c45c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c464:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c466:	e740      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c468:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
2400c46a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c46e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c472:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c474:	e739      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c476:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c478:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
2400c47c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
2400c480:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
2400c482:	e732      	b.n	2400c2ea <SDMMC_CmdStopTransfer+0x5a>
2400c484:	200008ec 	.word	0x200008ec
2400c488:	10624dd3 	.word	0x10624dd3
2400c48c:	fffee0c0 	.word	0xfffee0c0
2400c490:	05f5e100 	.word	0x05f5e100
2400c494:	00200045 	.word	0x00200045
2400c498:	002000c5 	.word	0x002000c5
2400c49c:	fdffe008 	.word	0xfdffe008

2400c4a0 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c4a0:	4a50      	ldr	r2, [pc, #320]	; (2400c5e4 <SDMMC_CmdSelDesel+0x144>)
{
2400c4a2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c4a4:	4b50      	ldr	r3, [pc, #320]	; (2400c5e8 <SDMMC_CmdSelDesel+0x148>)
2400c4a6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c4a8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c4ac:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c4b0:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c4b4:	484d      	ldr	r0, [pc, #308]	; (2400c5ec <SDMMC_CmdSelDesel+0x14c>)
2400c4b6:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c4ba:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c4bc:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c4be:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c4c2:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c4c4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c4c8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c4cc:	1e53      	subs	r3, r2, #1
2400c4ce:	b14a      	cbz	r2, 2400c4e4 <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c4d0:	4947      	ldr	r1, [pc, #284]	; (2400c5f0 <SDMMC_CmdSelDesel+0x150>)
    sta_reg = SDMMCx->STA;
2400c4d2:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c4d6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c4d8:	420a      	tst	r2, r1
2400c4da:	d001      	beq.n	2400c4e0 <SDMMC_CmdSelDesel+0x40>
2400c4dc:	0492      	lsls	r2, r2, #18
2400c4de:	d504      	bpl.n	2400c4ea <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
2400c4e0:	1c58      	adds	r0, r3, #1
2400c4e2:	d1f6      	bne.n	2400c4d2 <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c4e4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c4e8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c4ea:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c4ee:	0758      	lsls	r0, r3, #29
2400c4f0:	d445      	bmi.n	2400c57e <SDMMC_CmdSelDesel+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c4f2:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c4f6:	f010 0001 	ands.w	r0, r0, #1
2400c4fa:	d137      	bne.n	2400c56c <SDMMC_CmdSelDesel+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c4fc:	4b3d      	ldr	r3, [pc, #244]	; (2400c5f4 <SDMMC_CmdSelDesel+0x154>)
2400c4fe:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c502:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c506:	b2db      	uxtb	r3, r3
2400c508:	2b07      	cmp	r3, #7
2400c50a:	d136      	bne.n	2400c57a <SDMMC_CmdSelDesel+0xda>
  return (*(__IO uint32_t *) tmp);
2400c50c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c510:	4839      	ldr	r0, [pc, #228]	; (2400c5f8 <SDMMC_CmdSelDesel+0x158>)
2400c512:	4018      	ands	r0, r3
2400c514:	2800      	cmp	r0, #0
2400c516:	d02f      	beq.n	2400c578 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c518:	2b00      	cmp	r3, #0
2400c51a:	db35      	blt.n	2400c588 <SDMMC_CmdSelDesel+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c51c:	0059      	lsls	r1, r3, #1
2400c51e:	d436      	bmi.n	2400c58e <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c520:	009a      	lsls	r2, r3, #2
2400c522:	d436      	bmi.n	2400c592 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c524:	00d9      	lsls	r1, r3, #3
2400c526:	d436      	bmi.n	2400c596 <SDMMC_CmdSelDesel+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c528:	011a      	lsls	r2, r3, #4
2400c52a:	d437      	bmi.n	2400c59c <SDMMC_CmdSelDesel+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c52c:	0159      	lsls	r1, r3, #5
2400c52e:	d438      	bmi.n	2400c5a2 <SDMMC_CmdSelDesel+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c530:	01da      	lsls	r2, r3, #7
2400c532:	d439      	bmi.n	2400c5a8 <SDMMC_CmdSelDesel+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c534:	0219      	lsls	r1, r3, #8
2400c536:	d43a      	bmi.n	2400c5ae <SDMMC_CmdSelDesel+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c538:	025a      	lsls	r2, r3, #9
2400c53a:	d43b      	bmi.n	2400c5b4 <SDMMC_CmdSelDesel+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c53c:	0299      	lsls	r1, r3, #10
2400c53e:	d445      	bmi.n	2400c5cc <SDMMC_CmdSelDesel+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c540:	02da      	lsls	r2, r3, #11
2400c542:	d440      	bmi.n	2400c5c6 <SDMMC_CmdSelDesel+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c544:	0359      	lsls	r1, r3, #13
2400c546:	d43b      	bmi.n	2400c5c0 <SDMMC_CmdSelDesel+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c548:	039a      	lsls	r2, r3, #14
2400c54a:	d436      	bmi.n	2400c5ba <SDMMC_CmdSelDesel+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c54c:	03d9      	lsls	r1, r3, #15
2400c54e:	d446      	bmi.n	2400c5de <SDMMC_CmdSelDesel+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c550:	041a      	lsls	r2, r3, #16
2400c552:	d441      	bmi.n	2400c5d8 <SDMMC_CmdSelDesel+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c554:	0459      	lsls	r1, r3, #17
2400c556:	d43c      	bmi.n	2400c5d2 <SDMMC_CmdSelDesel+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c558:	049a      	lsls	r2, r3, #18
2400c55a:	d40b      	bmi.n	2400c574 <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c55c:	f013 0f08 	tst.w	r3, #8
2400c560:	bf14      	ite	ne
2400c562:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c566:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c56a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c56c:	2301      	movs	r3, #1
2400c56e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c572:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c574:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c578:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c57a:	2001      	movs	r0, #1
2400c57c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c57e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c580:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c582:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c586:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c588:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c58c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c58e:	2040      	movs	r0, #64	; 0x40
2400c590:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c592:	2080      	movs	r0, #128	; 0x80
2400c594:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c596:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c59a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c59c:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c5a0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c5a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c5a6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c5a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c5ac:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c5ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c5b2:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c5b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c5b8:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c5ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c5be:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c5c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c5c4:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c5c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c5ca:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c5cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c5d0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c5d2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c5d6:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c5d8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c5dc:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c5de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c5e2:	4770      	bx	lr
2400c5e4:	200008ec 	.word	0x200008ec
2400c5e8:	10624dd3 	.word	0x10624dd3
2400c5ec:	fffee0c0 	.word	0xfffee0c0
2400c5f0:	00200045 	.word	0x00200045
2400c5f4:	002000c5 	.word	0x002000c5
2400c5f8:	fdffe008 	.word	0xfdffe008

2400c5fc <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c5fc:	4b11      	ldr	r3, [pc, #68]	; (2400c644 <SDMMC_CmdGoIdleState+0x48>)
{
2400c5fe:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c600:	4a11      	ldr	r2, [pc, #68]	; (2400c648 <SDMMC_CmdGoIdleState+0x4c>)
{
2400c602:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c604:	4c11      	ldr	r4, [pc, #68]	; (2400c64c <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
2400c606:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c608:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
2400c60a:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c60c:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c610:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c612:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c616:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c618:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c61a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c61e:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c622:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c624:	e002      	b.n	2400c62c <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
2400c626:	6b4a      	ldr	r2, [r1, #52]	; 0x34
2400c628:	0612      	lsls	r2, r2, #24
2400c62a:	d405      	bmi.n	2400c638 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
2400c62c:	3b01      	subs	r3, #1
2400c62e:	d2fa      	bcs.n	2400c626 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
2400c630:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c634:	bc30      	pop	{r4, r5}
2400c636:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c638:	4b05      	ldr	r3, [pc, #20]	; (2400c650 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
2400c63a:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c63c:	638b      	str	r3, [r1, #56]	; 0x38
}
2400c63e:	bc30      	pop	{r4, r5}
2400c640:	4770      	bx	lr
2400c642:	bf00      	nop
2400c644:	200008ec 	.word	0x200008ec
2400c648:	fffee0c0 	.word	0xfffee0c0
2400c64c:	10624dd3 	.word	0x10624dd3
2400c650:	002000c5 	.word	0x002000c5

2400c654 <SDMMC_CmdOperCond>:
{
2400c654:	b410      	push	{r4}
2400c656:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400c658:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c65c:	4a1a      	ldr	r2, [pc, #104]	; (2400c6c8 <SDMMC_CmdOperCond+0x74>)
2400c65e:	4b1b      	ldr	r3, [pc, #108]	; (2400c6cc <SDMMC_CmdOperCond+0x78>)
  SDMMCx->ARG = Command->Argument;
2400c660:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c662:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c664:	68cc      	ldr	r4, [r1, #12]
2400c666:	481a      	ldr	r0, [pc, #104]	; (2400c6d0 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c668:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c66c:	f241 1308 	movw	r3, #4360	; 0x1108
2400c670:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c672:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c674:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c676:	f241 3088 	movw	r0, #5000	; 0x1388
2400c67a:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c67e:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400c680:	b14a      	cbz	r2, 2400c696 <SDMMC_CmdOperCond+0x42>
2400c682:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400c684:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400c686:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c688:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c68c:	d001      	beq.n	2400c692 <SDMMC_CmdOperCond+0x3e>
2400c68e:	0490      	lsls	r0, r2, #18
2400c690:	d506      	bpl.n	2400c6a0 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
2400c692:	1c5c      	adds	r4, r3, #1
2400c694:	d1f6      	bne.n	2400c684 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400c696:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c69a:	f85d 4b04 	ldr.w	r4, [sp], #4
2400c69e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c6a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c6a2:	075a      	lsls	r2, r3, #29
2400c6a4:	d40c      	bmi.n	2400c6c0 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c6a6:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400c6a8:	f010 0001 	ands.w	r0, r0, #1
2400c6ac:	d105      	bne.n	2400c6ba <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
2400c6ae:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400c6b0:	065b      	lsls	r3, r3, #25
2400c6b2:	d5f2      	bpl.n	2400c69a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
2400c6b4:	2340      	movs	r3, #64	; 0x40
2400c6b6:	638b      	str	r3, [r1, #56]	; 0x38
2400c6b8:	e7ef      	b.n	2400c69a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c6ba:	2301      	movs	r3, #1
2400c6bc:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c6be:	e7ec      	b.n	2400c69a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c6c0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c6c2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c6c4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c6c6:	e7e8      	b.n	2400c69a <SDMMC_CmdOperCond+0x46>
2400c6c8:	200008ec 	.word	0x200008ec
2400c6cc:	10624dd3 	.word	0x10624dd3
2400c6d0:	fffee0c0 	.word	0xfffee0c0

2400c6d4 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c6d4:	4a50      	ldr	r2, [pc, #320]	; (2400c818 <SDMMC_CmdAppCommand+0x144>)
{
2400c6d6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c6d8:	4b50      	ldr	r3, [pc, #320]	; (2400c81c <SDMMC_CmdAppCommand+0x148>)
2400c6da:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c6dc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c6e0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6e4:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c6e8:	484d      	ldr	r0, [pc, #308]	; (2400c820 <SDMMC_CmdAppCommand+0x14c>)
2400c6ea:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c6ee:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6f0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c6f2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6f6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c6f8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c6fc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c700:	1e53      	subs	r3, r2, #1
2400c702:	b14a      	cbz	r2, 2400c718 <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c704:	4947      	ldr	r1, [pc, #284]	; (2400c824 <SDMMC_CmdAppCommand+0x150>)
    sta_reg = SDMMCx->STA;
2400c706:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c70a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c70c:	420a      	tst	r2, r1
2400c70e:	d001      	beq.n	2400c714 <SDMMC_CmdAppCommand+0x40>
2400c710:	0492      	lsls	r2, r2, #18
2400c712:	d504      	bpl.n	2400c71e <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
2400c714:	1c58      	adds	r0, r3, #1
2400c716:	d1f6      	bne.n	2400c706 <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c718:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c71c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c71e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c722:	0758      	lsls	r0, r3, #29
2400c724:	d445      	bmi.n	2400c7b2 <SDMMC_CmdAppCommand+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c726:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c72a:	f010 0001 	ands.w	r0, r0, #1
2400c72e:	d137      	bne.n	2400c7a0 <SDMMC_CmdAppCommand+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c730:	4b3d      	ldr	r3, [pc, #244]	; (2400c828 <SDMMC_CmdAppCommand+0x154>)
2400c732:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c736:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c73a:	b2db      	uxtb	r3, r3
2400c73c:	2b37      	cmp	r3, #55	; 0x37
2400c73e:	d136      	bne.n	2400c7ae <SDMMC_CmdAppCommand+0xda>
  return (*(__IO uint32_t *) tmp);
2400c740:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c744:	4839      	ldr	r0, [pc, #228]	; (2400c82c <SDMMC_CmdAppCommand+0x158>)
2400c746:	4018      	ands	r0, r3
2400c748:	2800      	cmp	r0, #0
2400c74a:	d02f      	beq.n	2400c7ac <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c74c:	2b00      	cmp	r3, #0
2400c74e:	db35      	blt.n	2400c7bc <SDMMC_CmdAppCommand+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c750:	0059      	lsls	r1, r3, #1
2400c752:	d436      	bmi.n	2400c7c2 <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c754:	009a      	lsls	r2, r3, #2
2400c756:	d436      	bmi.n	2400c7c6 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c758:	00d9      	lsls	r1, r3, #3
2400c75a:	d436      	bmi.n	2400c7ca <SDMMC_CmdAppCommand+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c75c:	011a      	lsls	r2, r3, #4
2400c75e:	d437      	bmi.n	2400c7d0 <SDMMC_CmdAppCommand+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c760:	0159      	lsls	r1, r3, #5
2400c762:	d438      	bmi.n	2400c7d6 <SDMMC_CmdAppCommand+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c764:	01da      	lsls	r2, r3, #7
2400c766:	d439      	bmi.n	2400c7dc <SDMMC_CmdAppCommand+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c768:	0219      	lsls	r1, r3, #8
2400c76a:	d43a      	bmi.n	2400c7e2 <SDMMC_CmdAppCommand+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c76c:	025a      	lsls	r2, r3, #9
2400c76e:	d43b      	bmi.n	2400c7e8 <SDMMC_CmdAppCommand+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c770:	0299      	lsls	r1, r3, #10
2400c772:	d445      	bmi.n	2400c800 <SDMMC_CmdAppCommand+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c774:	02da      	lsls	r2, r3, #11
2400c776:	d440      	bmi.n	2400c7fa <SDMMC_CmdAppCommand+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c778:	0359      	lsls	r1, r3, #13
2400c77a:	d43b      	bmi.n	2400c7f4 <SDMMC_CmdAppCommand+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c77c:	039a      	lsls	r2, r3, #14
2400c77e:	d436      	bmi.n	2400c7ee <SDMMC_CmdAppCommand+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c780:	03d9      	lsls	r1, r3, #15
2400c782:	d446      	bmi.n	2400c812 <SDMMC_CmdAppCommand+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c784:	041a      	lsls	r2, r3, #16
2400c786:	d441      	bmi.n	2400c80c <SDMMC_CmdAppCommand+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c788:	0459      	lsls	r1, r3, #17
2400c78a:	d43c      	bmi.n	2400c806 <SDMMC_CmdAppCommand+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c78c:	049a      	lsls	r2, r3, #18
2400c78e:	d40b      	bmi.n	2400c7a8 <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c790:	f013 0f08 	tst.w	r3, #8
2400c794:	bf14      	ite	ne
2400c796:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c79a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c79e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c7a0:	2301      	movs	r3, #1
2400c7a2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c7a6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c7a8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c7ac:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c7ae:	2001      	movs	r0, #1
2400c7b0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c7b2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c7b4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c7b6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c7ba:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c7bc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c7c0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c7c2:	2040      	movs	r0, #64	; 0x40
2400c7c4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c7c6:	2080      	movs	r0, #128	; 0x80
2400c7c8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c7ca:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c7ce:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c7d0:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c7d4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c7d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c7da:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c7dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c7e0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c7e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c7e6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c7e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c7ec:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c7ee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c7f2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c7f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c7f8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c7fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c7fe:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c800:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c804:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c806:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c80a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c80c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c810:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c812:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c816:	4770      	bx	lr
2400c818:	200008ec 	.word	0x200008ec
2400c81c:	10624dd3 	.word	0x10624dd3
2400c820:	fffee0c0 	.word	0xfffee0c0
2400c824:	00200045 	.word	0x00200045
2400c828:	002000c5 	.word	0x002000c5
2400c82c:	fdffe008 	.word	0xfdffe008

2400c830 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c830:	4a19      	ldr	r2, [pc, #100]	; (2400c898 <SDMMC_CmdAppOperCommand+0x68>)
{
2400c832:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c834:	4b19      	ldr	r3, [pc, #100]	; (2400c89c <SDMMC_CmdAppOperCommand+0x6c>)
2400c836:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c838:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c83c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c840:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c844:	4816      	ldr	r0, [pc, #88]	; (2400c8a0 <SDMMC_CmdAppOperCommand+0x70>)
2400c846:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c84a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c84c:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c84e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c852:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400c854:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c858:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c85c:	1e53      	subs	r3, r2, #1
2400c85e:	b14a      	cbz	r2, 2400c874 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
2400c860:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c864:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400c866:	f012 0f45 	tst.w	r2, #69	; 0x45
2400c86a:	d001      	beq.n	2400c870 <SDMMC_CmdAppOperCommand+0x40>
2400c86c:	0492      	lsls	r2, r2, #18
2400c86e:	d504      	bpl.n	2400c87a <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
2400c870:	1c59      	adds	r1, r3, #1
2400c872:	d1f5      	bne.n	2400c860 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400c874:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400c878:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c87a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c87e:	f010 0004 	ands.w	r0, r0, #4
2400c882:	d103      	bne.n	2400c88c <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c884:	4b07      	ldr	r3, [pc, #28]	; (2400c8a4 <SDMMC_CmdAppOperCommand+0x74>)
2400c886:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400c88a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c88c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c88e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c890:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c894:	4770      	bx	lr
2400c896:	bf00      	nop
2400c898:	200008ec 	.word	0x200008ec
2400c89c:	10624dd3 	.word	0x10624dd3
2400c8a0:	fffee0c0 	.word	0xfffee0c0
2400c8a4:	002000c5 	.word	0x002000c5

2400c8a8 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8a8:	4a50      	ldr	r2, [pc, #320]	; (2400c9ec <SDMMC_CmdBusWidth+0x144>)
{
2400c8aa:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8ac:	4b50      	ldr	r3, [pc, #320]	; (2400c9f0 <SDMMC_CmdBusWidth+0x148>)
2400c8ae:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400c8b0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8b4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8b8:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400c8bc:	484d      	ldr	r0, [pc, #308]	; (2400c9f4 <SDMMC_CmdBusWidth+0x14c>)
2400c8be:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8c2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8c4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8c6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8ca:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400c8cc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400c8d0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400c8d4:	1e53      	subs	r3, r2, #1
2400c8d6:	b14a      	cbz	r2, 2400c8ec <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400c8d8:	4947      	ldr	r1, [pc, #284]	; (2400c9f8 <SDMMC_CmdBusWidth+0x150>)
    sta_reg = SDMMCx->STA;
2400c8da:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400c8de:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400c8e0:	420a      	tst	r2, r1
2400c8e2:	d001      	beq.n	2400c8e8 <SDMMC_CmdBusWidth+0x40>
2400c8e4:	0492      	lsls	r2, r2, #18
2400c8e6:	d504      	bpl.n	2400c8f2 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
2400c8e8:	1c58      	adds	r0, r3, #1
2400c8ea:	d1f6      	bne.n	2400c8da <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400c8ec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400c8f0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400c8f2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400c8f6:	0758      	lsls	r0, r3, #29
2400c8f8:	d445      	bmi.n	2400c986 <SDMMC_CmdBusWidth+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400c8fa:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400c8fe:	f010 0001 	ands.w	r0, r0, #1
2400c902:	d137      	bne.n	2400c974 <SDMMC_CmdBusWidth+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400c904:	4b3d      	ldr	r3, [pc, #244]	; (2400c9fc <SDMMC_CmdBusWidth+0x154>)
2400c906:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400c90a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400c90e:	b2db      	uxtb	r3, r3
2400c910:	2b06      	cmp	r3, #6
2400c912:	d136      	bne.n	2400c982 <SDMMC_CmdBusWidth+0xda>
  return (*(__IO uint32_t *) tmp);
2400c914:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400c918:	4839      	ldr	r0, [pc, #228]	; (2400ca00 <SDMMC_CmdBusWidth+0x158>)
2400c91a:	4018      	ands	r0, r3
2400c91c:	2800      	cmp	r0, #0
2400c91e:	d02f      	beq.n	2400c980 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400c920:	2b00      	cmp	r3, #0
2400c922:	db35      	blt.n	2400c990 <SDMMC_CmdBusWidth+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400c924:	0059      	lsls	r1, r3, #1
2400c926:	d436      	bmi.n	2400c996 <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400c928:	009a      	lsls	r2, r3, #2
2400c92a:	d436      	bmi.n	2400c99a <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400c92c:	00d9      	lsls	r1, r3, #3
2400c92e:	d436      	bmi.n	2400c99e <SDMMC_CmdBusWidth+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400c930:	011a      	lsls	r2, r3, #4
2400c932:	d437      	bmi.n	2400c9a4 <SDMMC_CmdBusWidth+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400c934:	0159      	lsls	r1, r3, #5
2400c936:	d438      	bmi.n	2400c9aa <SDMMC_CmdBusWidth+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400c938:	01da      	lsls	r2, r3, #7
2400c93a:	d439      	bmi.n	2400c9b0 <SDMMC_CmdBusWidth+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400c93c:	0219      	lsls	r1, r3, #8
2400c93e:	d43a      	bmi.n	2400c9b6 <SDMMC_CmdBusWidth+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400c940:	025a      	lsls	r2, r3, #9
2400c942:	d43b      	bmi.n	2400c9bc <SDMMC_CmdBusWidth+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400c944:	0299      	lsls	r1, r3, #10
2400c946:	d445      	bmi.n	2400c9d4 <SDMMC_CmdBusWidth+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400c948:	02da      	lsls	r2, r3, #11
2400c94a:	d440      	bmi.n	2400c9ce <SDMMC_CmdBusWidth+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400c94c:	0359      	lsls	r1, r3, #13
2400c94e:	d43b      	bmi.n	2400c9c8 <SDMMC_CmdBusWidth+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400c950:	039a      	lsls	r2, r3, #14
2400c952:	d436      	bmi.n	2400c9c2 <SDMMC_CmdBusWidth+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400c954:	03d9      	lsls	r1, r3, #15
2400c956:	d446      	bmi.n	2400c9e6 <SDMMC_CmdBusWidth+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400c958:	041a      	lsls	r2, r3, #16
2400c95a:	d441      	bmi.n	2400c9e0 <SDMMC_CmdBusWidth+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400c95c:	0459      	lsls	r1, r3, #17
2400c95e:	d43c      	bmi.n	2400c9da <SDMMC_CmdBusWidth+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400c960:	049a      	lsls	r2, r3, #18
2400c962:	d40b      	bmi.n	2400c97c <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400c964:	f013 0f08 	tst.w	r3, #8
2400c968:	bf14      	ite	ne
2400c96a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400c96e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400c972:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400c974:	2301      	movs	r3, #1
2400c976:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c97a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400c97c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400c980:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400c982:	2001      	movs	r0, #1
2400c984:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c986:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c988:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400c98a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400c98e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400c990:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400c994:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400c996:	2040      	movs	r0, #64	; 0x40
2400c998:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400c99a:	2080      	movs	r0, #128	; 0x80
2400c99c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400c99e:	f44f 7080 	mov.w	r0, #256	; 0x100
2400c9a2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400c9a4:	f44f 7000 	mov.w	r0, #512	; 0x200
2400c9a8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400c9aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400c9ae:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400c9b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400c9b4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400c9b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400c9ba:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400c9bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400c9c0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400c9c2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400c9c6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400c9c8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400c9cc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400c9ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400c9d2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400c9d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400c9d8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400c9da:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400c9de:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400c9e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400c9e4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400c9e6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400c9ea:	4770      	bx	lr
2400c9ec:	200008ec 	.word	0x200008ec
2400c9f0:	10624dd3 	.word	0x10624dd3
2400c9f4:	fffee0c0 	.word	0xfffee0c0
2400c9f8:	00200045 	.word	0x00200045
2400c9fc:	002000c5 	.word	0x002000c5
2400ca00:	fdffe008 	.word	0xfdffe008

2400ca04 <SDMMC_CmdSendSCR>:
{
2400ca04:	b410      	push	{r4}
2400ca06:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400ca08:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca0a:	4a4c      	ldr	r2, [pc, #304]	; (2400cb3c <SDMMC_CmdSendSCR+0x138>)
2400ca0c:	4b4c      	ldr	r3, [pc, #304]	; (2400cb40 <SDMMC_CmdSendSCR+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400ca0e:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca10:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca12:	68cc      	ldr	r4, [r1, #12]
2400ca14:	484b      	ldr	r0, [pc, #300]	; (2400cb44 <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca16:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca1a:	f241 1333 	movw	r3, #4403	; 0x1133
2400ca1e:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca20:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca22:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ca24:	f241 3088 	movw	r0, #5000	; 0x1388
2400ca28:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ca2c:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400ca2e:	b14a      	cbz	r2, 2400ca44 <SDMMC_CmdSendSCR+0x40>
2400ca30:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400ca32:	4845      	ldr	r0, [pc, #276]	; (2400cb48 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
2400ca34:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400ca36:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400ca38:	4202      	tst	r2, r0
2400ca3a:	d001      	beq.n	2400ca40 <SDMMC_CmdSendSCR+0x3c>
2400ca3c:	0494      	lsls	r4, r2, #18
2400ca3e:	d506      	bpl.n	2400ca4e <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
2400ca40:	1c5a      	adds	r2, r3, #1
2400ca42:	d1f7      	bne.n	2400ca34 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400ca44:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400ca48:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ca4c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400ca4e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400ca50:	0758      	lsls	r0, r3, #29
2400ca52:	d43d      	bmi.n	2400cad0 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400ca54:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400ca56:	f010 0001 	ands.w	r0, r0, #1
2400ca5a:	d134      	bne.n	2400cac6 <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400ca5c:	4b3b      	ldr	r3, [pc, #236]	; (2400cb4c <SDMMC_CmdSendSCR+0x148>)
2400ca5e:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400ca60:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400ca62:	b2db      	uxtb	r3, r3
2400ca64:	2b33      	cmp	r3, #51	; 0x33
2400ca66:	d131      	bne.n	2400cacc <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
2400ca68:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400ca6a:	4839      	ldr	r0, [pc, #228]	; (2400cb50 <SDMMC_CmdSendSCR+0x14c>)
2400ca6c:	4018      	ands	r0, r3
2400ca6e:	2800      	cmp	r0, #0
2400ca70:	d0ea      	beq.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400ca72:	2b00      	cmp	r3, #0
2400ca74:	db30      	blt.n	2400cad8 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400ca76:	005a      	lsls	r2, r3, #1
2400ca78:	d431      	bmi.n	2400cade <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400ca7a:	009c      	lsls	r4, r3, #2
2400ca7c:	d431      	bmi.n	2400cae2 <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400ca7e:	00d9      	lsls	r1, r3, #3
2400ca80:	d431      	bmi.n	2400cae6 <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400ca82:	011a      	lsls	r2, r3, #4
2400ca84:	d432      	bmi.n	2400caec <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400ca86:	015c      	lsls	r4, r3, #5
2400ca88:	d433      	bmi.n	2400caf2 <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400ca8a:	01d9      	lsls	r1, r3, #7
2400ca8c:	d434      	bmi.n	2400caf8 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400ca8e:	021a      	lsls	r2, r3, #8
2400ca90:	d435      	bmi.n	2400cafe <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400ca92:	025c      	lsls	r4, r3, #9
2400ca94:	d436      	bmi.n	2400cb04 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400ca96:	0299      	lsls	r1, r3, #10
2400ca98:	d440      	bmi.n	2400cb1c <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400ca9a:	02da      	lsls	r2, r3, #11
2400ca9c:	d43b      	bmi.n	2400cb16 <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400ca9e:	035c      	lsls	r4, r3, #13
2400caa0:	d436      	bmi.n	2400cb10 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400caa2:	0399      	lsls	r1, r3, #14
2400caa4:	d431      	bmi.n	2400cb0a <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400caa6:	03da      	lsls	r2, r3, #15
2400caa8:	d444      	bmi.n	2400cb34 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400caaa:	041c      	lsls	r4, r3, #16
2400caac:	d43f      	bmi.n	2400cb2e <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400caae:	0459      	lsls	r1, r3, #17
2400cab0:	d43a      	bmi.n	2400cb28 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400cab2:	049a      	lsls	r2, r3, #18
2400cab4:	d435      	bmi.n	2400cb22 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400cab6:	f013 0f08 	tst.w	r3, #8
2400caba:	bf14      	ite	ne
2400cabc:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400cac0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400cac4:	e7c0      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cac6:	2301      	movs	r3, #1
2400cac8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400caca:	e7bd      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cacc:	2001      	movs	r0, #1
2400cace:	e7bb      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cad0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cad2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cad4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cad6:	e7b7      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400cad8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400cadc:	e7b4      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400cade:	2040      	movs	r0, #64	; 0x40
2400cae0:	e7b2      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400cae2:	2080      	movs	r0, #128	; 0x80
2400cae4:	e7b0      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400cae6:	f44f 7080 	mov.w	r0, #256	; 0x100
2400caea:	e7ad      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400caec:	f44f 7000 	mov.w	r0, #512	; 0x200
2400caf0:	e7aa      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400caf2:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400caf6:	e7a7      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400caf8:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400cafc:	e7a4      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400cafe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400cb02:	e7a1      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400cb04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400cb08:	e79e      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400cb0a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400cb0e:	e79b      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400cb10:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400cb14:	e798      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
2400cb16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400cb1a:	e795      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400cb1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400cb20:	e792      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
2400cb22:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400cb26:	e78f      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400cb28:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400cb2c:	e78c      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400cb2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400cb32:	e789      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400cb34:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400cb38:	e786      	b.n	2400ca48 <SDMMC_CmdSendSCR+0x44>
2400cb3a:	bf00      	nop
2400cb3c:	200008ec 	.word	0x200008ec
2400cb40:	10624dd3 	.word	0x10624dd3
2400cb44:	fffee0c0 	.word	0xfffee0c0
2400cb48:	00200045 	.word	0x00200045
2400cb4c:	002000c5 	.word	0x002000c5
2400cb50:	fdffe008 	.word	0xfdffe008

2400cb54 <SDMMC_CmdSendCID>:
{
2400cb54:	b410      	push	{r4}
2400cb56:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400cb58:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb5a:	4a19      	ldr	r2, [pc, #100]	; (2400cbc0 <SDMMC_CmdSendCID+0x6c>)
2400cb5c:	4b19      	ldr	r3, [pc, #100]	; (2400cbc4 <SDMMC_CmdSendCID+0x70>)
  SDMMCx->ARG = Command->Argument;
2400cb5e:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb60:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb62:	68cc      	ldr	r4, [r1, #12]
2400cb64:	4818      	ldr	r0, [pc, #96]	; (2400cbc8 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb66:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb6a:	f241 3302 	movw	r3, #4866	; 0x1302
2400cb6e:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb70:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb72:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cb74:	f241 3088 	movw	r0, #5000	; 0x1388
2400cb78:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cb7c:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400cb7e:	b14a      	cbz	r2, 2400cb94 <SDMMC_CmdSendCID+0x40>
2400cb80:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400cb82:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400cb84:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400cb86:	f012 0f45 	tst.w	r2, #69	; 0x45
2400cb8a:	d001      	beq.n	2400cb90 <SDMMC_CmdSendCID+0x3c>
2400cb8c:	0492      	lsls	r2, r2, #18
2400cb8e:	d506      	bpl.n	2400cb9e <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
2400cb90:	1c58      	adds	r0, r3, #1
2400cb92:	d1f6      	bne.n	2400cb82 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
2400cb94:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400cb98:	f85d 4b04 	ldr.w	r4, [sp], #4
2400cb9c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cb9e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400cba0:	075b      	lsls	r3, r3, #29
2400cba2:	d409      	bmi.n	2400cbb8 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cba4:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400cba6:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cbaa:	bf14      	ite	ne
2400cbac:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cbae:	4b07      	ldreq	r3, [pc, #28]	; (2400cbcc <SDMMC_CmdSendCID+0x78>)
2400cbb0:	638b      	str	r3, [r1, #56]	; 0x38
}
2400cbb2:	f85d 4b04 	ldr.w	r4, [sp], #4
2400cbb6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cbb8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cbba:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cbbc:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cbbe:	e7eb      	b.n	2400cb98 <SDMMC_CmdSendCID+0x44>
2400cbc0:	200008ec 	.word	0x200008ec
2400cbc4:	10624dd3 	.word	0x10624dd3
2400cbc8:	fffee0c0 	.word	0xfffee0c0
2400cbcc:	002000c5 	.word	0x002000c5

2400cbd0 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cbd0:	4a1b      	ldr	r2, [pc, #108]	; (2400cc40 <SDMMC_CmdSendCSD+0x70>)
{
2400cbd2:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cbd4:	4b1b      	ldr	r3, [pc, #108]	; (2400cc44 <SDMMC_CmdSendCSD+0x74>)
2400cbd6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400cbd8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cbdc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cbe0:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400cbe4:	4818      	ldr	r0, [pc, #96]	; (2400cc48 <SDMMC_CmdSendCSD+0x78>)
2400cbe6:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cbea:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cbec:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cbee:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cbf2:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cbf4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cbf8:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400cbfc:	1e53      	subs	r3, r2, #1
2400cbfe:	b14a      	cbz	r2, 2400cc14 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
2400cc00:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400cc04:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400cc06:	f012 0f45 	tst.w	r2, #69	; 0x45
2400cc0a:	d001      	beq.n	2400cc10 <SDMMC_CmdSendCSD+0x40>
2400cc0c:	0492      	lsls	r2, r2, #18
2400cc0e:	d504      	bpl.n	2400cc1a <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
2400cc10:	1c59      	adds	r1, r3, #1
2400cc12:	d1f5      	bne.n	2400cc00 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400cc14:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400cc18:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cc1a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400cc1e:	075b      	lsls	r3, r3, #29
2400cc20:	d409      	bmi.n	2400cc36 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cc22:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400cc26:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cc2a:	bf14      	ite	ne
2400cc2c:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cc2e:	4b07      	ldreq	r3, [pc, #28]	; (2400cc4c <SDMMC_CmdSendCSD+0x7c>)
2400cc30:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
2400cc34:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cc36:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cc38:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cc3a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cc3e:	4770      	bx	lr
2400cc40:	200008ec 	.word	0x200008ec
2400cc44:	10624dd3 	.word	0x10624dd3
2400cc48:	fffee0c0 	.word	0xfffee0c0
2400cc4c:	002000c5 	.word	0x002000c5

2400cc50 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
2400cc50:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cc52:	4a2b      	ldr	r2, [pc, #172]	; (2400cd00 <SDMMC_CmdSetRelAdd+0xb0>)
{
2400cc54:	4684      	mov	ip, r0
2400cc56:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
2400cc58:	6083      	str	r3, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cc5a:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cc5c:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cc5e:	4829      	ldr	r0, [pc, #164]	; (2400cd04 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cc60:	4c29      	ldr	r4, [pc, #164]	; (2400cd08 <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cc62:	fba0 0202 	umull	r0, r2, r0, r2
2400cc66:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cc6a:	401c      	ands	r4, r3
2400cc6c:	f241 1303 	movw	r3, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cc70:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cc72:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
2400cc74:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cc78:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400cc7c:	b152      	cbz	r2, 2400cc94 <SDMMC_CmdSetRelAdd+0x44>
2400cc7e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
2400cc80:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400cc84:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
2400cc86:	f012 0f45 	tst.w	r2, #69	; 0x45
2400cc8a:	d001      	beq.n	2400cc90 <SDMMC_CmdSetRelAdd+0x40>
2400cc8c:	0494      	lsls	r4, r2, #18
2400cc8e:	d506      	bpl.n	2400cc9e <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
2400cc90:	1c5a      	adds	r2, r3, #1
2400cc92:	d1f5      	bne.n	2400cc80 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400cc94:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400cc98:	f85d 4b04 	ldr.w	r4, [sp], #4
2400cc9c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cc9e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400cca2:	0758      	lsls	r0, r3, #29
2400cca4:	d421      	bmi.n	2400ccea <SDMMC_CmdSetRelAdd+0x9a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cca6:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400ccaa:	f010 0001 	ands.w	r0, r0, #1
2400ccae:	d116      	bne.n	2400ccde <SDMMC_CmdSetRelAdd+0x8e>
  return (uint8_t)(SDMMCx->RESPCMD);
2400ccb0:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400ccb4:	b2db      	uxtb	r3, r3
2400ccb6:	2b03      	cmp	r3, #3
2400ccb8:	d115      	bne.n	2400cce6 <SDMMC_CmdSetRelAdd+0x96>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400ccba:	4b14      	ldr	r3, [pc, #80]	; (2400cd0c <SDMMC_CmdSetRelAdd+0xbc>)
2400ccbc:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
2400ccc0:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
2400ccc4:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
2400ccc8:	d017      	beq.n	2400ccfa <SDMMC_CmdSetRelAdd+0xaa>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
2400ccca:	045a      	lsls	r2, r3, #17
2400cccc:	d412      	bmi.n	2400ccf4 <SDMMC_CmdSetRelAdd+0xa4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400ccce:	f413 4f00 	tst.w	r3, #32768	; 0x8000
2400ccd2:	bf14      	ite	ne
2400ccd4:	f44f 5080 	movne.w	r0, #4096	; 0x1000
2400ccd8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400ccdc:	e7dc      	b.n	2400cc98 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400ccde:	2301      	movs	r3, #1
2400cce0:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cce4:	e7d8      	b.n	2400cc98 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cce6:	2001      	movs	r0, #1
2400cce8:	e7d6      	b.n	2400cc98 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ccea:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400ccec:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400ccee:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400ccf2:	e7d1      	b.n	2400cc98 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400ccf4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400ccf8:	e7ce      	b.n	2400cc98 <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
2400ccfa:	0c1b      	lsrs	r3, r3, #16
2400ccfc:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
2400ccfe:	e7cb      	b.n	2400cc98 <SDMMC_CmdSetRelAdd+0x48>
2400cd00:	200008ec 	.word	0x200008ec
2400cd04:	10624dd3 	.word	0x10624dd3
2400cd08:	fffee0c0 	.word	0xfffee0c0
2400cd0c:	002000c5 	.word	0x002000c5

2400cd10 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cd10:	4a50      	ldr	r2, [pc, #320]	; (2400ce54 <SDMMC_CmdSendStatus+0x144>)
{
2400cd12:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cd14:	4b50      	ldr	r3, [pc, #320]	; (2400ce58 <SDMMC_CmdSendStatus+0x148>)
2400cd16:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
2400cd18:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cd1c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cd20:	f8dc 100c 	ldr.w	r1, [ip, #12]
2400cd24:	484d      	ldr	r0, [pc, #308]	; (2400ce5c <SDMMC_CmdSendStatus+0x14c>)
2400cd26:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cd2a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cd2c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cd2e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cd32:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400cd34:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400cd38:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
2400cd3c:	1e53      	subs	r3, r2, #1
2400cd3e:	b14a      	cbz	r2, 2400cd54 <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400cd40:	4947      	ldr	r1, [pc, #284]	; (2400ce60 <SDMMC_CmdSendStatus+0x150>)
    sta_reg = SDMMCx->STA;
2400cd42:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
2400cd46:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400cd48:	420a      	tst	r2, r1
2400cd4a:	d001      	beq.n	2400cd50 <SDMMC_CmdSendStatus+0x40>
2400cd4c:	0492      	lsls	r2, r2, #18
2400cd4e:	d504      	bpl.n	2400cd5a <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
2400cd50:	1c58      	adds	r0, r3, #1
2400cd52:	d1f6      	bne.n	2400cd42 <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
2400cd54:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
2400cd58:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400cd5a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
2400cd5e:	0758      	lsls	r0, r3, #29
2400cd60:	d445      	bmi.n	2400cdee <SDMMC_CmdSendStatus+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cd62:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
2400cd66:	f010 0001 	ands.w	r0, r0, #1
2400cd6a:	d137      	bne.n	2400cddc <SDMMC_CmdSendStatus+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cd6c:	4b3d      	ldr	r3, [pc, #244]	; (2400ce64 <SDMMC_CmdSendStatus+0x154>)
2400cd6e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400cd72:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400cd76:	b2db      	uxtb	r3, r3
2400cd78:	2b0d      	cmp	r3, #13
2400cd7a:	d136      	bne.n	2400cdea <SDMMC_CmdSendStatus+0xda>
  return (*(__IO uint32_t *) tmp);
2400cd7c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400cd80:	4839      	ldr	r0, [pc, #228]	; (2400ce68 <SDMMC_CmdSendStatus+0x158>)
2400cd82:	4018      	ands	r0, r3
2400cd84:	2800      	cmp	r0, #0
2400cd86:	d02f      	beq.n	2400cde8 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400cd88:	2b00      	cmp	r3, #0
2400cd8a:	db35      	blt.n	2400cdf8 <SDMMC_CmdSendStatus+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400cd8c:	0059      	lsls	r1, r3, #1
2400cd8e:	d436      	bmi.n	2400cdfe <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400cd90:	009a      	lsls	r2, r3, #2
2400cd92:	d436      	bmi.n	2400ce02 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400cd94:	00d9      	lsls	r1, r3, #3
2400cd96:	d436      	bmi.n	2400ce06 <SDMMC_CmdSendStatus+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400cd98:	011a      	lsls	r2, r3, #4
2400cd9a:	d437      	bmi.n	2400ce0c <SDMMC_CmdSendStatus+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400cd9c:	0159      	lsls	r1, r3, #5
2400cd9e:	d438      	bmi.n	2400ce12 <SDMMC_CmdSendStatus+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400cda0:	01da      	lsls	r2, r3, #7
2400cda2:	d439      	bmi.n	2400ce18 <SDMMC_CmdSendStatus+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400cda4:	0219      	lsls	r1, r3, #8
2400cda6:	d43a      	bmi.n	2400ce1e <SDMMC_CmdSendStatus+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400cda8:	025a      	lsls	r2, r3, #9
2400cdaa:	d43b      	bmi.n	2400ce24 <SDMMC_CmdSendStatus+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400cdac:	0299      	lsls	r1, r3, #10
2400cdae:	d445      	bmi.n	2400ce3c <SDMMC_CmdSendStatus+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400cdb0:	02da      	lsls	r2, r3, #11
2400cdb2:	d440      	bmi.n	2400ce36 <SDMMC_CmdSendStatus+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400cdb4:	0359      	lsls	r1, r3, #13
2400cdb6:	d43b      	bmi.n	2400ce30 <SDMMC_CmdSendStatus+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400cdb8:	039a      	lsls	r2, r3, #14
2400cdba:	d436      	bmi.n	2400ce2a <SDMMC_CmdSendStatus+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400cdbc:	03d9      	lsls	r1, r3, #15
2400cdbe:	d446      	bmi.n	2400ce4e <SDMMC_CmdSendStatus+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400cdc0:	041a      	lsls	r2, r3, #16
2400cdc2:	d441      	bmi.n	2400ce48 <SDMMC_CmdSendStatus+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400cdc4:	0459      	lsls	r1, r3, #17
2400cdc6:	d43c      	bmi.n	2400ce42 <SDMMC_CmdSendStatus+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400cdc8:	049a      	lsls	r2, r3, #18
2400cdca:	d40b      	bmi.n	2400cde4 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400cdcc:	f013 0f08 	tst.w	r3, #8
2400cdd0:	bf14      	ite	ne
2400cdd2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400cdd6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400cdda:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cddc:	2301      	movs	r3, #1
2400cdde:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cde2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
2400cde4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
2400cde8:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cdea:	2001      	movs	r0, #1
2400cdec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cdee:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cdf0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cdf2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cdf6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400cdf8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400cdfc:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400cdfe:	2040      	movs	r0, #64	; 0x40
2400ce00:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400ce02:	2080      	movs	r0, #128	; 0x80
2400ce04:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400ce06:	f44f 7080 	mov.w	r0, #256	; 0x100
2400ce0a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400ce0c:	f44f 7000 	mov.w	r0, #512	; 0x200
2400ce10:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400ce12:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400ce16:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400ce18:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400ce1c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
2400ce1e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400ce22:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
2400ce24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400ce28:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400ce2a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400ce2e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400ce30:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400ce34:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
2400ce36:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400ce3a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400ce3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400ce40:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400ce42:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400ce46:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400ce48:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400ce4c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400ce4e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400ce52:	4770      	bx	lr
2400ce54:	200008ec 	.word	0x200008ec
2400ce58:	10624dd3 	.word	0x10624dd3
2400ce5c:	fffee0c0 	.word	0xfffee0c0
2400ce60:	00200045 	.word	0x00200045
2400ce64:	002000c5 	.word	0x002000c5
2400ce68:	fdffe008 	.word	0xfdffe008

2400ce6c <SDMMC_CmdStatusRegister>:
{
2400ce6c:	b410      	push	{r4}
2400ce6e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
2400ce70:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ce72:	4a4c      	ldr	r2, [pc, #304]	; (2400cfa4 <SDMMC_CmdStatusRegister+0x138>)
2400ce74:	4b4c      	ldr	r3, [pc, #304]	; (2400cfa8 <SDMMC_CmdStatusRegister+0x13c>)
  SDMMCx->ARG = Command->Argument;
2400ce76:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ce78:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ce7a:	68cc      	ldr	r4, [r1, #12]
2400ce7c:	484b      	ldr	r0, [pc, #300]	; (2400cfac <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ce7e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ce82:	f241 130d 	movw	r3, #4365	; 0x110d
2400ce86:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ce88:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ce8a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
2400ce8c:	f241 3088 	movw	r0, #5000	; 0x1388
2400ce90:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
2400ce94:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
2400ce96:	b14a      	cbz	r2, 2400ceac <SDMMC_CmdStatusRegister+0x40>
2400ce98:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
2400ce9a:	4845      	ldr	r0, [pc, #276]	; (2400cfb0 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
2400ce9c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
2400ce9e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
2400cea0:	4202      	tst	r2, r0
2400cea2:	d001      	beq.n	2400cea8 <SDMMC_CmdStatusRegister+0x3c>
2400cea4:	0494      	lsls	r4, r2, #18
2400cea6:	d506      	bpl.n	2400ceb6 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
2400cea8:	1c5a      	adds	r2, r3, #1
2400ceaa:	d1f7      	bne.n	2400ce9c <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
2400ceac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
2400ceb0:	f85d 4b04 	ldr.w	r4, [sp], #4
2400ceb4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
2400ceb6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
2400ceb8:	0758      	lsls	r0, r3, #29
2400ceba:	d43d      	bmi.n	2400cf38 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
2400cebc:	6b48      	ldr	r0, [r1, #52]	; 0x34
2400cebe:	f010 0001 	ands.w	r0, r0, #1
2400cec2:	d134      	bne.n	2400cf2e <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
2400cec4:	4b3b      	ldr	r3, [pc, #236]	; (2400cfb4 <SDMMC_CmdStatusRegister+0x148>)
2400cec6:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
2400cec8:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
2400ceca:	b2db      	uxtb	r3, r3
2400cecc:	2b0d      	cmp	r3, #13
2400cece:	d131      	bne.n	2400cf34 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
2400ced0:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
2400ced2:	4839      	ldr	r0, [pc, #228]	; (2400cfb8 <SDMMC_CmdStatusRegister+0x14c>)
2400ced4:	4018      	ands	r0, r3
2400ced6:	2800      	cmp	r0, #0
2400ced8:	d0ea      	beq.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
2400ceda:	2b00      	cmp	r3, #0
2400cedc:	db30      	blt.n	2400cf40 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
2400cede:	005a      	lsls	r2, r3, #1
2400cee0:	d431      	bmi.n	2400cf46 <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
2400cee2:	009c      	lsls	r4, r3, #2
2400cee4:	d431      	bmi.n	2400cf4a <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
2400cee6:	00d9      	lsls	r1, r3, #3
2400cee8:	d431      	bmi.n	2400cf4e <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
2400ceea:	011a      	lsls	r2, r3, #4
2400ceec:	d432      	bmi.n	2400cf54 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
2400ceee:	015c      	lsls	r4, r3, #5
2400cef0:	d433      	bmi.n	2400cf5a <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
2400cef2:	01d9      	lsls	r1, r3, #7
2400cef4:	d434      	bmi.n	2400cf60 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
2400cef6:	021a      	lsls	r2, r3, #8
2400cef8:	d435      	bmi.n	2400cf66 <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
2400cefa:	025c      	lsls	r4, r3, #9
2400cefc:	d436      	bmi.n	2400cf6c <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
2400cefe:	0299      	lsls	r1, r3, #10
2400cf00:	d440      	bmi.n	2400cf84 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
2400cf02:	02da      	lsls	r2, r3, #11
2400cf04:	d43b      	bmi.n	2400cf7e <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
2400cf06:	035c      	lsls	r4, r3, #13
2400cf08:	d436      	bmi.n	2400cf78 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
2400cf0a:	0399      	lsls	r1, r3, #14
2400cf0c:	d431      	bmi.n	2400cf72 <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
2400cf0e:	03da      	lsls	r2, r3, #15
2400cf10:	d444      	bmi.n	2400cf9c <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
2400cf12:	041c      	lsls	r4, r3, #16
2400cf14:	d43f      	bmi.n	2400cf96 <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
2400cf16:	0459      	lsls	r1, r3, #17
2400cf18:	d43a      	bmi.n	2400cf90 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
2400cf1a:	049a      	lsls	r2, r3, #18
2400cf1c:	d435      	bmi.n	2400cf8a <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
2400cf1e:	f013 0f08 	tst.w	r3, #8
2400cf22:	bf14      	ite	ne
2400cf24:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
2400cf28:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
2400cf2c:	e7c0      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
2400cf2e:	2301      	movs	r3, #1
2400cf30:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cf32:	e7bd      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
2400cf34:	2001      	movs	r0, #1
2400cf36:	e7bb      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cf38:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cf3a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
2400cf3c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
2400cf3e:	e7b7      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
2400cf40:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
2400cf44:	e7b4      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
2400cf46:	2040      	movs	r0, #64	; 0x40
2400cf48:	e7b2      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
2400cf4a:	2080      	movs	r0, #128	; 0x80
2400cf4c:	e7b0      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
2400cf4e:	f44f 7080 	mov.w	r0, #256	; 0x100
2400cf52:	e7ad      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
2400cf54:	f44f 7000 	mov.w	r0, #512	; 0x200
2400cf58:	e7aa      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
2400cf5a:	f44f 6080 	mov.w	r0, #1024	; 0x400
2400cf5e:	e7a7      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
2400cf60:	f44f 6000 	mov.w	r0, #2048	; 0x800
2400cf64:	e7a4      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
2400cf66:	f44f 5080 	mov.w	r0, #4096	; 0x1000
2400cf6a:	e7a1      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
2400cf6c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
2400cf70:	e79e      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
2400cf72:	f44f 2080 	mov.w	r0, #262144	; 0x40000
2400cf76:	e79b      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
2400cf78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
2400cf7c:	e798      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
2400cf7e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2400cf82:	e795      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
2400cf84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2400cf88:	e792      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
2400cf8a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2400cf8e:	e78f      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
2400cf90:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
2400cf94:	e78c      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
2400cf96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2400cf9a:	e789      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
2400cf9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
2400cfa0:	e786      	b.n	2400ceb0 <SDMMC_CmdStatusRegister+0x44>
2400cfa2:	bf00      	nop
2400cfa4:	200008ec 	.word	0x200008ec
2400cfa8:	10624dd3 	.word	0x10624dd3
2400cfac:	fffee0c0 	.word	0xfffee0c0
2400cfb0:	00200045 	.word	0x00200045
2400cfb4:	002000c5 	.word	0x002000c5
2400cfb8:	fdffe008 	.word	0xfdffe008

2400cfbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
2400cfbc:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
2400cfbe:	4903      	ldr	r1, [pc, #12]	; (2400cfcc <MX_FATFS_Init+0x10>)
2400cfc0:	4803      	ldr	r0, [pc, #12]	; (2400cfd0 <MX_FATFS_Init+0x14>)
2400cfc2:	f003 f91d 	bl	24010200 <FATFS_LinkDriver>
2400cfc6:	4b03      	ldr	r3, [pc, #12]	; (2400cfd4 <MX_FATFS_Init+0x18>)
2400cfc8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
2400cfca:	bd08      	pop	{r3, pc}
2400cfcc:	2001dec0 	.word	0x2001dec0
2400cfd0:	2401c848 	.word	0x2401c848
2400cfd4:	2001dec4 	.word	0x2001dec4

2400cfd8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
2400cfd8:	2000      	movs	r0, #0
2400cfda:	4770      	bx	lr

2400cfdc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400cfdc:	b510      	push	{r4, lr}
2400cfde:	4694      	mov	ip, r2
2400cfe0:	b082      	sub	sp, #8
2400cfe2:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
2400cfe4:	460a      	mov	r2, r1
2400cfe6:	4663      	mov	r3, ip
2400cfe8:	4601      	mov	r1, r0
2400cfea:	9400      	str	r4, [sp, #0]
2400cfec:	4803      	ldr	r0, [pc, #12]	; (2400cffc <BSP_SD_ReadBlocks+0x20>)
2400cfee:	f7fd fa31 	bl	2400a454 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400cff2:	3800      	subs	r0, #0
2400cff4:	bf18      	it	ne
2400cff6:	2001      	movne	r0, #1
2400cff8:	b002      	add	sp, #8
2400cffa:	bd10      	pop	{r4, pc}
2400cffc:	2001ccb0 	.word	0x2001ccb0

2400d000 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
2400d000:	b510      	push	{r4, lr}
2400d002:	4694      	mov	ip, r2
2400d004:	b082      	sub	sp, #8
2400d006:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
2400d008:	460a      	mov	r2, r1
2400d00a:	4663      	mov	r3, ip
2400d00c:	4601      	mov	r1, r0
2400d00e:	9400      	str	r4, [sp, #0]
2400d010:	4803      	ldr	r0, [pc, #12]	; (2400d020 <BSP_SD_WriteBlocks+0x20>)
2400d012:	f7fd fb0f 	bl	2400a634 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
2400d016:	3800      	subs	r0, #0
2400d018:	bf18      	it	ne
2400d01a:	2001      	movne	r0, #1
2400d01c:	b002      	add	sp, #8
2400d01e:	bd10      	pop	{r4, pc}
2400d020:	2001ccb0 	.word	0x2001ccb0

2400d024 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
2400d024:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
2400d026:	4803      	ldr	r0, [pc, #12]	; (2400d034 <BSP_SD_GetCardState+0x10>)
2400d028:	f7fd ff5c 	bl	2400aee4 <HAL_SD_GetCardState>
}
2400d02c:	3804      	subs	r0, #4
2400d02e:	bf18      	it	ne
2400d030:	2001      	movne	r0, #1
2400d032:	bd08      	pop	{r3, pc}
2400d034:	2001ccb0 	.word	0x2001ccb0

2400d038 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
2400d038:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
2400d03a:	4801      	ldr	r0, [pc, #4]	; (2400d040 <BSP_SD_GetCardInfo+0x8>)
2400d03c:	f7fd be0c 	b.w	2400ac58 <HAL_SD_GetCardInfo>
2400d040:	2001ccb0 	.word	0x2001ccb0

2400d044 <BSP_SD_Init>:
{
2400d044:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
2400d046:	f7f4 fb23 	bl	24001690 <BSP_SD_IsDetected>
2400d04a:	2801      	cmp	r0, #1
2400d04c:	d001      	beq.n	2400d052 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
2400d04e:	2002      	movs	r0, #2
}
2400d050:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
2400d052:	4807      	ldr	r0, [pc, #28]	; (2400d070 <BSP_SD_Init+0x2c>)
2400d054:	f7fd fede 	bl	2400ae14 <HAL_SD_Init>
  if (sd_state == MSD_OK)
2400d058:	2800      	cmp	r0, #0
2400d05a:	d1f9      	bne.n	2400d050 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
2400d05c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2400d060:	4803      	ldr	r0, [pc, #12]	; (2400d070 <BSP_SD_Init+0x2c>)
2400d062:	f7fd fe0d 	bl	2400ac80 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
2400d066:	3800      	subs	r0, #0
2400d068:	bf18      	it	ne
2400d06a:	2001      	movne	r0, #1
}
2400d06c:	bd08      	pop	{r3, pc}
2400d06e:	bf00      	nop
2400d070:	2001ccb0 	.word	0x2001ccb0

2400d074 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
2400d074:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
2400d076:	4c0a      	ldr	r4, [pc, #40]	; (2400d0a0 <SD_initialize+0x2c>)
2400d078:	2501      	movs	r5, #1
2400d07a:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
2400d07c:	f7ff ffe2 	bl	2400d044 <BSP_SD_Init>
2400d080:	b108      	cbz	r0, 2400d086 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
2400d082:	7820      	ldrb	r0, [r4, #0]
}
2400d084:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
2400d086:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400d088:	f7ff ffcc 	bl	2400d024 <BSP_SD_GetCardState>
2400d08c:	b918      	cbnz	r0, 2400d096 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
2400d08e:	7823      	ldrb	r3, [r4, #0]
2400d090:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400d094:	7023      	strb	r3, [r4, #0]
  return Stat;
2400d096:	7823      	ldrb	r3, [r4, #0]
2400d098:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
2400d09a:	7023      	strb	r3, [r4, #0]
  return Stat;
2400d09c:	7820      	ldrb	r0, [r4, #0]
}
2400d09e:	bd38      	pop	{r3, r4, r5, pc}
2400d0a0:	2000093c 	.word	0x2000093c

2400d0a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
2400d0a4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
2400d0a6:	2301      	movs	r3, #1
2400d0a8:	4c05      	ldr	r4, [pc, #20]	; (2400d0c0 <SD_status+0x1c>)
2400d0aa:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
2400d0ac:	f7ff ffba 	bl	2400d024 <BSP_SD_GetCardState>
2400d0b0:	b918      	cbnz	r0, 2400d0ba <SD_status+0x16>
    Stat &= ~STA_NOINIT;
2400d0b2:	7823      	ldrb	r3, [r4, #0]
2400d0b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
2400d0b8:	7023      	strb	r3, [r4, #0]
  return Stat;
2400d0ba:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
2400d0bc:	bd10      	pop	{r4, pc}
2400d0be:	bf00      	nop
2400d0c0:	2000093c 	.word	0x2000093c

2400d0c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
2400d0c4:	b508      	push	{r3, lr}
2400d0c6:	4608      	mov	r0, r1
2400d0c8:	4611      	mov	r1, r2
2400d0ca:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
2400d0cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400d0d0:	f7ff ff84 	bl	2400cfdc <BSP_SD_ReadBlocks>
2400d0d4:	b108      	cbz	r0, 2400d0da <SD_read+0x16>
  DRESULT res = RES_ERROR;
2400d0d6:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
2400d0d8:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400d0da:	f7ff ffa3 	bl	2400d024 <BSP_SD_GetCardState>
2400d0de:	2800      	cmp	r0, #0
2400d0e0:	d0fa      	beq.n	2400d0d8 <SD_read+0x14>
2400d0e2:	f7ff ff9f 	bl	2400d024 <BSP_SD_GetCardState>
2400d0e6:	2800      	cmp	r0, #0
2400d0e8:	d1f7      	bne.n	2400d0da <SD_read+0x16>
2400d0ea:	e7f5      	b.n	2400d0d8 <SD_read+0x14>

2400d0ec <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400d0ec:	4b18      	ldr	r3, [pc, #96]	; (2400d150 <SD_ioctl+0x64>)
{
2400d0ee:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400d0f0:	7818      	ldrb	r0, [r3, #0]
{
2400d0f2:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400d0f4:	f010 0401 	ands.w	r4, r0, #1
2400d0f8:	d106      	bne.n	2400d108 <SD_ioctl+0x1c>
2400d0fa:	4615      	mov	r5, r2

  switch (cmd)
2400d0fc:	2903      	cmp	r1, #3
2400d0fe:	d824      	bhi.n	2400d14a <SD_ioctl+0x5e>
2400d100:	e8df f001 	tbb	[pc, r1]
2400d104:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
2400d108:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
2400d10a:	4620      	mov	r0, r4
2400d10c:	b00b      	add	sp, #44	; 0x2c
2400d10e:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
2400d110:	460c      	mov	r4, r1
}
2400d112:	4620      	mov	r0, r4
2400d114:	b00b      	add	sp, #44	; 0x2c
2400d116:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400d118:	a801      	add	r0, sp, #4
2400d11a:	f7ff ff8d 	bl	2400d038 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400d11e:	9b07      	ldr	r3, [sp, #28]
}
2400d120:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
2400d122:	602b      	str	r3, [r5, #0]
}
2400d124:	b00b      	add	sp, #44	; 0x2c
2400d126:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400d128:	a801      	add	r0, sp, #4
2400d12a:	f7ff ff85 	bl	2400d038 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
2400d12e:	9b08      	ldr	r3, [sp, #32]
}
2400d130:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
2400d132:	802b      	strh	r3, [r5, #0]
}
2400d134:	b00b      	add	sp, #44	; 0x2c
2400d136:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
2400d138:	a801      	add	r0, sp, #4
2400d13a:	f7ff ff7d 	bl	2400d038 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400d13e:	9b08      	ldr	r3, [sp, #32]
}
2400d140:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
2400d142:	0a5b      	lsrs	r3, r3, #9
2400d144:	602b      	str	r3, [r5, #0]
}
2400d146:	b00b      	add	sp, #44	; 0x2c
2400d148:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
2400d14a:	2404      	movs	r4, #4
2400d14c:	e7dd      	b.n	2400d10a <SD_ioctl+0x1e>
2400d14e:	bf00      	nop
2400d150:	2000093c 	.word	0x2000093c

2400d154 <SD_write>:
{
2400d154:	b508      	push	{r3, lr}
2400d156:	4608      	mov	r0, r1
2400d158:	4611      	mov	r1, r2
2400d15a:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
2400d15c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400d160:	f7ff ff4e 	bl	2400d000 <BSP_SD_WriteBlocks>
2400d164:	b108      	cbz	r0, 2400d16a <SD_write+0x16>
  DRESULT res = RES_ERROR;
2400d166:	2001      	movs	r0, #1
}
2400d168:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
2400d16a:	f7ff ff5b 	bl	2400d024 <BSP_SD_GetCardState>
2400d16e:	2800      	cmp	r0, #0
2400d170:	d0fa      	beq.n	2400d168 <SD_write+0x14>
2400d172:	f7ff ff57 	bl	2400d024 <BSP_SD_GetCardState>
2400d176:	2800      	cmp	r0, #0
2400d178:	d1f7      	bne.n	2400d16a <SD_write+0x16>
2400d17a:	e7f5      	b.n	2400d168 <SD_write+0x14>

2400d17c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
2400d17c:	4b03      	ldr	r3, [pc, #12]	; (2400d18c <disk_status+0x10>)
2400d17e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400d182:	4418      	add	r0, r3
2400d184:	6853      	ldr	r3, [r2, #4]
2400d186:	7a00      	ldrb	r0, [r0, #8]
2400d188:	685b      	ldr	r3, [r3, #4]
2400d18a:	4718      	bx	r3
2400d18c:	2001e0f0 	.word	0x2001e0f0

2400d190 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
2400d190:	4b07      	ldr	r3, [pc, #28]	; (2400d1b0 <disk_initialize+0x20>)
2400d192:	5c1a      	ldrb	r2, [r3, r0]
2400d194:	b952      	cbnz	r2, 2400d1ac <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400d196:	eb03 0280 	add.w	r2, r3, r0, lsl #2
2400d19a:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
2400d19c:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400d1a0:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
2400d1a2:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
2400d1a6:	7a08      	ldrb	r0, [r1, #8]
2400d1a8:	6813      	ldr	r3, [r2, #0]
2400d1aa:	4718      	bx	r3
  }
  return stat;
}
2400d1ac:	2000      	movs	r0, #0
2400d1ae:	4770      	bx	lr
2400d1b0:	2001e0f0 	.word	0x2001e0f0

2400d1b4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
2400d1b4:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400d1b6:	4c06      	ldr	r4, [pc, #24]	; (2400d1d0 <disk_read+0x1c>)
2400d1b8:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
2400d1bc:	4420      	add	r0, r4
2400d1be:	f8dc 4004 	ldr.w	r4, [ip, #4]
2400d1c2:	7a00      	ldrb	r0, [r0, #8]
2400d1c4:	68a4      	ldr	r4, [r4, #8]
2400d1c6:	46a4      	mov	ip, r4
  return res;
}
2400d1c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
2400d1cc:	4760      	bx	ip
2400d1ce:	bf00      	nop
2400d1d0:	2001e0f0 	.word	0x2001e0f0

2400d1d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
2400d1d4:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400d1d6:	4c06      	ldr	r4, [pc, #24]	; (2400d1f0 <disk_write+0x1c>)
2400d1d8:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
2400d1dc:	4420      	add	r0, r4
2400d1de:	f8dc 4004 	ldr.w	r4, [ip, #4]
2400d1e2:	7a00      	ldrb	r0, [r0, #8]
2400d1e4:	68e4      	ldr	r4, [r4, #12]
2400d1e6:	46a4      	mov	ip, r4
  return res;
}
2400d1e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
2400d1ec:	4760      	bx	ip
2400d1ee:	bf00      	nop
2400d1f0:	2001e0f0 	.word	0x2001e0f0

2400d1f4 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
2400d1f4:	4b04      	ldr	r3, [pc, #16]	; (2400d208 <disk_ioctl+0x14>)
2400d1f6:	eb03 0c00 	add.w	ip, r3, r0
2400d1fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2400d1fe:	6843      	ldr	r3, [r0, #4]
2400d200:	f89c 0008 	ldrb.w	r0, [ip, #8]
2400d204:	691b      	ldr	r3, [r3, #16]
2400d206:	4718      	bx	r3
2400d208:	2001e0f0 	.word	0x2001e0f0

2400d20c <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
2400d20c:	4b2a      	ldr	r3, [pc, #168]	; (2400d2b8 <inc_lock+0xac>)
{
2400d20e:	4684      	mov	ip, r0
2400d210:	b470      	push	{r4, r5, r6}
		if (Files[i].fs == dp->obj.fs &&
2400d212:	681a      	ldr	r2, [r3, #0]
2400d214:	6804      	ldr	r4, [r0, #0]
2400d216:	4294      	cmp	r4, r2
2400d218:	d01c      	beq.n	2400d254 <inc_lock+0x48>
2400d21a:	6918      	ldr	r0, [r3, #16]
2400d21c:	42a0      	cmp	r0, r4
2400d21e:	d005      	beq.n	2400d22c <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400d220:	b372      	cbz	r2, 2400d280 <inc_lock+0x74>
2400d222:	2800      	cmp	r0, #0
2400d224:	d044      	beq.n	2400d2b0 <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
2400d226:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
2400d228:	bc70      	pop	{r4, r5, r6}
2400d22a:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
2400d22c:	695d      	ldr	r5, [r3, #20]
2400d22e:	f8dc 6008 	ldr.w	r6, [ip, #8]
2400d232:	42b5      	cmp	r5, r6
2400d234:	d1f4      	bne.n	2400d220 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
2400d236:	f8dc 5014 	ldr.w	r5, [ip, #20]
2400d23a:	699e      	ldr	r6, [r3, #24]
2400d23c:	42ae      	cmp	r6, r5
2400d23e:	d1ef      	bne.n	2400d220 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400d240:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400d242:	b999      	cbnz	r1, 2400d26c <inc_lock+0x60>
2400d244:	eb03 1402 	add.w	r4, r3, r2, lsl #4
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400d248:	1c50      	adds	r0, r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400d24a:	0111      	lsls	r1, r2, #4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400d24c:	89a2      	ldrh	r2, [r4, #12]
2400d24e:	3201      	adds	r2, #1
2400d250:	b292      	uxth	r2, r2
2400d252:	e029      	b.n	2400d2a8 <inc_lock+0x9c>
		if (Files[i].fs == dp->obj.fs &&
2400d254:	6880      	ldr	r0, [r0, #8]
2400d256:	685d      	ldr	r5, [r3, #4]
2400d258:	4285      	cmp	r5, r0
2400d25a:	d1de      	bne.n	2400d21a <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
2400d25c:	f8dc 5014 	ldr.w	r5, [ip, #20]
2400d260:	6898      	ldr	r0, [r3, #8]
2400d262:	4285      	cmp	r5, r0
2400d264:	d1d9      	bne.n	2400d21a <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400d266:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400d268:	2900      	cmp	r1, #0
2400d26a:	d0eb      	beq.n	2400d244 <inc_lock+0x38>
2400d26c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
2400d270:	0111      	lsls	r1, r2, #4
2400d272:	8980      	ldrh	r0, [r0, #12]
2400d274:	2800      	cmp	r0, #0
2400d276:	d1d6      	bne.n	2400d226 <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
2400d278:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400d27a:	f44f 7280 	mov.w	r2, #256	; 0x100
2400d27e:	e013      	b.n	2400d2a8 <inc_lock+0x9c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400d280:	2001      	movs	r0, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400d282:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
2400d284:	ea4f 1102 	mov.w	r1, r2, lsl #4
2400d288:	eb03 1202 	add.w	r2, r3, r2, lsl #4
2400d28c:	505c      	str	r4, [r3, r1]
		Files[i].clu = dp->obj.sclust;
2400d28e:	f8dc 4014 	ldr.w	r4, [ip, #20]
2400d292:	f8dc 5008 	ldr.w	r5, [ip, #8]
2400d296:	e9c2 5401 	strd	r5, r4, [r2, #4]
		Files[i].ctr = 0;
2400d29a:	f04f 0400 	mov.w	r4, #0
2400d29e:	8194      	strh	r4, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
2400d2a0:	bf14      	ite	ne
2400d2a2:	f44f 7280 	movne.w	r2, #256	; 0x100
2400d2a6:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
2400d2a8:	440b      	add	r3, r1
2400d2aa:	819a      	strh	r2, [r3, #12]
}
2400d2ac:	bc70      	pop	{r4, r5, r6}
2400d2ae:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400d2b0:	2002      	movs	r0, #2
2400d2b2:	2201      	movs	r2, #1
2400d2b4:	e7e5      	b.n	2400d282 <inc_lock+0x76>
2400d2b6:	bf00      	nop
2400d2b8:	2001decc 	.word	0x2001decc

2400d2bc <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
2400d2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2400d2c0:	440a      	add	r2, r1
2400d2c2:	460d      	mov	r5, r1
2400d2c4:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d2c6:	4f37      	ldr	r7, [pc, #220]	; (2400d3a4 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
2400d2c8:	42aa      	cmp	r2, r5
2400d2ca:	d012      	beq.n	2400d2f2 <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d2cc:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d2d0:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d2d4:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d2d8:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d2dc:	2919      	cmp	r1, #25
2400d2de:	d9f3      	bls.n	2400d2c8 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d2e0:	2c7f      	cmp	r4, #127	; 0x7f
2400d2e2:	bf88      	it	hi
2400d2e4:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2400d2e8:	2c00      	cmp	r4, #0
2400d2ea:	d1ed      	bne.n	2400d2c8 <pattern_matching+0xc>
2400d2ec:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
2400d2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
2400d2f2:	1e1f      	subs	r7, r3, #0
2400d2f4:	f896 8000 	ldrb.w	r8, [r6]
2400d2f8:	bf18      	it	ne
2400d2fa:	2701      	movne	r7, #1
2400d2fc:	f1b8 0f00 	cmp.w	r8, #0
2400d300:	d100      	bne.n	2400d304 <pattern_matching+0x48>
2400d302:	bb8f      	cbnz	r7, 2400d368 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d304:	4c27      	ldr	r4, [pc, #156]	; (2400d3a4 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400d306:	4630      	mov	r0, r6
{
2400d308:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
2400d30a:	46a9      	mov	r9, r5
2400d30c:	e010      	b.n	2400d330 <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d30e:	3a20      	subs	r2, #32
2400d310:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d312:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d316:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d31a:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d31c:	f1bc 0f19 	cmp.w	ip, #25
2400d320:	d815      	bhi.n	2400d34e <pattern_matching+0x92>
2400d322:	3b20      	subs	r3, #32
2400d324:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
2400d326:	4293      	cmp	r3, r2
2400d328:	d118      	bne.n	2400d35c <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2400d32a:	b1eb      	cbz	r3, 2400d368 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2400d32c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400d330:	2b3f      	cmp	r3, #63	; 0x3f
2400d332:	d01c      	beq.n	2400d36e <pattern_matching+0xb2>
2400d334:	2b2a      	cmp	r3, #42	; 0x2a
2400d336:	d01a      	beq.n	2400d36e <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d338:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d33c:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2400d33e:	2919      	cmp	r1, #25
2400d340:	d9e5      	bls.n	2400d30e <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400d342:	2a7f      	cmp	r2, #127	; 0x7f
2400d344:	d9e5      	bls.n	2400d312 <pattern_matching+0x56>
2400d346:	4423      	add	r3, r4
2400d348:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2400d34c:	e7e1      	b.n	2400d312 <pattern_matching+0x56>
2400d34e:	2b7f      	cmp	r3, #127	; 0x7f
2400d350:	d9e9      	bls.n	2400d326 <pattern_matching+0x6a>
2400d352:	4421      	add	r1, r4
2400d354:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
2400d358:	4293      	cmp	r3, r2
2400d35a:	d0e6      	beq.n	2400d32a <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2400d35c:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2400d35e:	2b00      	cmp	r3, #0
2400d360:	d0c4      	beq.n	2400d2ec <pattern_matching+0x30>
2400d362:	2f00      	cmp	r7, #0
2400d364:	d1cf      	bne.n	2400d306 <pattern_matching+0x4a>
2400d366:	e7c1      	b.n	2400d2ec <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
2400d368:	2001      	movs	r0, #1
}
2400d36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2400d36e:	4601      	mov	r1, r0
				nm = nx = 0;
2400d370:	2300      	movs	r3, #0
2400d372:	f811 cb01 	ldrb.w	ip, [r1], #1
2400d376:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
2400d378:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400d37c:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
2400d37e:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
2400d382:	bf0c      	ite	eq
2400d384:	3201      	addeq	r2, #1
2400d386:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
2400d388:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
2400d38c:	d0f4      	beq.n	2400d378 <pattern_matching+0xbc>
2400d38e:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
2400d392:	d0f1      	beq.n	2400d378 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
2400d394:	4649      	mov	r1, r9
2400d396:	f7ff ff91 	bl	2400d2bc <pattern_matching>
2400d39a:	2800      	cmp	r0, #0
2400d39c:	d1e4      	bne.n	2400d368 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
2400d39e:	f899 3000 	ldrb.w	r3, [r9]
2400d3a2:	e7db      	b.n	2400d35c <pattern_matching+0xa0>
2400d3a4:	2401c870 	.word	0x2401c870

2400d3a8 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
2400d3a8:	2300      	movs	r3, #0
{
2400d3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
2400d3ae:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
2400d3b2:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
2400d3b4:	69c2      	ldr	r2, [r0, #28]
2400d3b6:	2a00      	cmp	r2, #0
2400d3b8:	d063      	beq.n	2400d482 <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2400d3ba:	6b02      	ldr	r2, [r0, #48]	; 0x30
2400d3bc:	4604      	mov	r4, r0
2400d3be:	460d      	mov	r5, r1
2400d3c0:	3201      	adds	r2, #1
2400d3c2:	d01f      	beq.n	2400d404 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400d3c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
2400d3c8:	8818      	ldrh	r0, [r3, #0]
2400d3ca:	2800      	cmp	r0, #0
2400d3cc:	d063      	beq.n	2400d496 <get_fileinfo+0xee>
2400d3ce:	f101 0715 	add.w	r7, r1, #21
2400d3d2:	2601      	movs	r6, #1
2400d3d4:	e000      	b.n	2400d3d8 <get_fileinfo+0x30>
2400d3d6:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
2400d3d8:	2100      	movs	r1, #0
2400d3da:	f002 ff37 	bl	2401024c <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400d3de:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2400d3e0:	2800      	cmp	r0, #0
2400d3e2:	d058      	beq.n	2400d496 <get_fileinfo+0xee>
2400d3e4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
2400d3e8:	d055      	beq.n	2400d496 <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
2400d3ea:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2400d3ee:	f8d8 200c 	ldr.w	r2, [r8, #12]
2400d3f2:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
2400d3f6:	2800      	cmp	r0, #0
2400d3f8:	d1ed      	bne.n	2400d3d6 <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
2400d3fa:	442e      	add	r6, r5
2400d3fc:	2300      	movs	r3, #0
2400d3fe:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400d400:	7da8      	ldrb	r0, [r5, #22]
2400d402:	e000      	b.n	2400d406 <get_fileinfo+0x5e>
2400d404:	4618      	mov	r0, r3
	i = j = 0;
2400d406:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
2400d40a:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
2400d40c:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
2400d40e:	6a21      	ldr	r1, [r4, #32]
2400d410:	5c8b      	ldrb	r3, [r1, r2]
2400d412:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
2400d414:	2b20      	cmp	r3, #32
2400d416:	d01b      	beq.n	2400d450 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2400d418:	2b05      	cmp	r3, #5
2400d41a:	bf08      	it	eq
2400d41c:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
2400d41e:	2a09      	cmp	r2, #9
2400d420:	d031      	beq.n	2400d486 <get_fileinfo+0xde>
		fno->altname[j] = c;
2400d422:	eb05 010c 	add.w	r1, r5, ip
2400d426:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
2400d428:	b980      	cbnz	r0, 2400d44c <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
2400d42a:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
2400d42e:	2e19      	cmp	r6, #25
2400d430:	d80b      	bhi.n	2400d44a <get_fileinfo+0xa2>
2400d432:	6a26      	ldr	r6, [r4, #32]
2400d434:	2a08      	cmp	r2, #8
2400d436:	f896 e00c 	ldrb.w	lr, [r6, #12]
2400d43a:	bf8c      	ite	hi
2400d43c:	2610      	movhi	r6, #16
2400d43e:	2608      	movls	r6, #8
2400d440:	ea1e 0f06 	tst.w	lr, r6
2400d444:	d001      	beq.n	2400d44a <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
2400d446:	3320      	adds	r3, #32
2400d448:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
2400d44a:	758b      	strb	r3, [r1, #22]
		j++;
2400d44c:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
2400d450:	2a0b      	cmp	r2, #11
2400d452:	d1dc      	bne.n	2400d40e <get_fileinfo+0x66>
		fno->fname[j] = 0;
2400d454:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
2400d458:	b928      	cbnz	r0, 2400d466 <get_fileinfo+0xbe>
		fno->fname[j] = 0;
2400d45a:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
2400d45c:	6a23      	ldr	r3, [r4, #32]
2400d45e:	7b1b      	ldrb	r3, [r3, #12]
2400d460:	2b00      	cmp	r3, #0
2400d462:	bf08      	it	eq
2400d464:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
2400d466:	2300      	movs	r3, #0
2400d468:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
2400d46a:	6a23      	ldr	r3, [r4, #32]
2400d46c:	7adb      	ldrb	r3, [r3, #11]
2400d46e:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
2400d470:	6a23      	ldr	r3, [r4, #32]
2400d472:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
2400d474:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
2400d476:	6a23      	ldr	r3, [r4, #32]
2400d478:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
2400d47c:	0c1a      	lsrs	r2, r3, #16
2400d47e:	80eb      	strh	r3, [r5, #6]
2400d480:	80aa      	strh	r2, [r5, #4]
}
2400d482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
2400d486:	eb05 010c 	add.w	r1, r5, ip
2400d48a:	b900      	cbnz	r0, 2400d48e <get_fileinfo+0xe6>
2400d48c:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
2400d48e:	f10c 0c01 	add.w	ip, ip, #1
2400d492:	724f      	strb	r7, [r1, #9]
2400d494:	e7c5      	b.n	2400d422 <get_fileinfo+0x7a>
			i = j = 0;
2400d496:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
2400d498:	2300      	movs	r3, #0
2400d49a:	442e      	add	r6, r5
2400d49c:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2400d49e:	7da8      	ldrb	r0, [r5, #22]
2400d4a0:	e7b1      	b.n	2400d406 <get_fileinfo+0x5e>
2400d4a2:	bf00      	nop

2400d4a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
2400d4a4:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400d4a6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
2400d4aa:	2300      	movs	r3, #0
{
2400d4ac:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d4ae:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2400d4b0:	70c3      	strb	r3, [r0, #3]
2400d4b2:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d4b4:	d00c      	beq.n	2400d4d0 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400d4b6:	460d      	mov	r5, r1
2400d4b8:	460a      	mov	r2, r1
2400d4ba:	2301      	movs	r3, #1
2400d4bc:	f100 0134 	add.w	r1, r0, #52	; 0x34
2400d4c0:	7840      	ldrb	r0, [r0, #1]
2400d4c2:	f7ff fe77 	bl	2400d1b4 <disk_read>
2400d4c6:	b110      	cbz	r0, 2400d4ce <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2400d4c8:	2004      	movs	r0, #4
			fs->winsect = sector;
2400d4ca:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
2400d4cc:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
2400d4ce:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400d4d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400d4d4:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
2400d4d8:	429a      	cmp	r2, r3
2400d4da:	d11a      	bne.n	2400d512 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
2400d4dc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
2400d4e0:	2be9      	cmp	r3, #233	; 0xe9
2400d4e2:	d007      	beq.n	2400d4f4 <check_fs+0x50>
2400d4e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
2400d4e6:	4a0d      	ldr	r2, [pc, #52]	; (2400d51c <check_fs+0x78>)
2400d4e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
2400d4ec:	4293      	cmp	r3, r2
2400d4ee:	d001      	beq.n	2400d4f4 <check_fs+0x50>
	return 2;
2400d4f0:	2002      	movs	r0, #2
}
2400d4f2:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
2400d4f4:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400d4f8:	4a09      	ldr	r2, [pc, #36]	; (2400d520 <check_fs+0x7c>)
2400d4fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
2400d4fe:	4293      	cmp	r3, r2
2400d500:	d009      	beq.n	2400d516 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
2400d502:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2400d506:	4b07      	ldr	r3, [pc, #28]	; (2400d524 <check_fs+0x80>)
2400d508:	1ac0      	subs	r0, r0, r3
2400d50a:	bf18      	it	ne
2400d50c:	2001      	movne	r0, #1
2400d50e:	0040      	lsls	r0, r0, #1
}
2400d510:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
2400d512:	2003      	movs	r0, #3
}
2400d514:	bd70      	pop	{r4, r5, r6, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
2400d516:	2000      	movs	r0, #0
}
2400d518:	bd70      	pop	{r4, r5, r6, pc}
2400d51a:	bf00      	nop
2400d51c:	009000eb 	.word	0x009000eb
2400d520:	00544146 	.word	0x00544146
2400d524:	33544146 	.word	0x33544146

2400d528 <move_window>:
{
2400d528:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d52a:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
2400d52c:	b083      	sub	sp, #12
	if (sector != fs->winsect) {	/* Window offset changed? */
2400d52e:	428e      	cmp	r6, r1
2400d530:	d024      	beq.n	2400d57c <move_window+0x54>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400d532:	78c3      	ldrb	r3, [r0, #3]
2400d534:	460d      	mov	r5, r1
2400d536:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400d538:	f100 0134 	add.w	r1, r0, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400d53c:	b963      	cbnz	r3, 2400d558 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400d53e:	2301      	movs	r3, #1
2400d540:	462a      	mov	r2, r5
2400d542:	7860      	ldrb	r0, [r4, #1]
2400d544:	f7ff fe36 	bl	2400d1b4 <disk_read>
2400d548:	b910      	cbnz	r0, 2400d550 <move_window+0x28>
			fs->winsect = sector;
2400d54a:	6325      	str	r5, [r4, #48]	; 0x30
}
2400d54c:	b003      	add	sp, #12
2400d54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
2400d550:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
2400d552:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
2400d556:	e7f8      	b.n	2400d54a <move_window+0x22>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400d558:	2301      	movs	r3, #1
2400d55a:	4632      	mov	r2, r6
2400d55c:	7840      	ldrb	r0, [r0, #1]
2400d55e:	9101      	str	r1, [sp, #4]
2400d560:	f7ff fe38 	bl	2400d1d4 <disk_write>
2400d564:	b9d0      	cbnz	r0, 2400d59c <move_window+0x74>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d566:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400d568:	69e3      	ldr	r3, [r4, #28]
2400d56a:	1ab2      	subs	r2, r6, r2
2400d56c:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
2400d56e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400d570:	429a      	cmp	r2, r3
2400d572:	d2e4      	bcs.n	2400d53e <move_window+0x16>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d574:	78a7      	ldrb	r7, [r4, #2]
2400d576:	2f01      	cmp	r7, #1
2400d578:	d804      	bhi.n	2400d584 <move_window+0x5c>
2400d57a:	e7e0      	b.n	2400d53e <move_window+0x16>
	FRESULT res = FR_OK;
2400d57c:	2000      	movs	r0, #0
}
2400d57e:	b003      	add	sp, #12
2400d580:	bdf0      	pop	{r4, r5, r6, r7, pc}
					wsect += fs->fsize;
2400d582:	69e3      	ldr	r3, [r4, #28]
2400d584:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d586:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400d588:	2301      	movs	r3, #1
2400d58a:	7860      	ldrb	r0, [r4, #1]
2400d58c:	4632      	mov	r2, r6
2400d58e:	9101      	str	r1, [sp, #4]
2400d590:	f7ff fe20 	bl	2400d1d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400d594:	2f01      	cmp	r7, #1
2400d596:	9901      	ldr	r1, [sp, #4]
2400d598:	d1f3      	bne.n	2400d582 <move_window+0x5a>
2400d59a:	e7d0      	b.n	2400d53e <move_window+0x16>
			res = FR_DISK_ERR;
2400d59c:	2001      	movs	r0, #1
}
2400d59e:	b003      	add	sp, #12
2400d5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
2400d5a2:	bf00      	nop

2400d5a4 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
2400d5a4:	2300      	movs	r3, #0
{
2400d5a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
2400d5aa:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
2400d5ac:	6804      	ldr	r4, [r0, #0]
2400d5ae:	b18c      	cbz	r4, 2400d5d4 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400d5b0:	7825      	ldrb	r5, [r4, #0]
2400d5b2:	2d1f      	cmp	r5, #31
2400d5b4:	d912      	bls.n	2400d5dc <find_volume+0x38>
2400d5b6:	2d3a      	cmp	r5, #58	; 0x3a
2400d5b8:	d010      	beq.n	2400d5dc <find_volume+0x38>
2400d5ba:	46a4      	mov	ip, r4
2400d5bc:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
2400d5c0:	2b1f      	cmp	r3, #31
2400d5c2:	d90d      	bls.n	2400d5e0 <find_volume+0x3c>
2400d5c4:	2b3a      	cmp	r3, #58	; 0x3a
2400d5c6:	d1f9      	bne.n	2400d5bc <find_volume+0x18>
			i = *tp++ - '0';
2400d5c8:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400d5ca:	45a4      	cmp	ip, r4
2400d5cc:	d102      	bne.n	2400d5d4 <find_volume+0x30>
2400d5ce:	2d30      	cmp	r5, #48	; 0x30
2400d5d0:	f000 80da 	beq.w	2400d788 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
2400d5d4:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
2400d5d6:	4620      	mov	r0, r4
2400d5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400d5dc:	462b      	mov	r3, r5
2400d5de:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400d5e0:	2b3a      	cmp	r3, #58	; 0x3a
2400d5e2:	d0f1      	beq.n	2400d5c8 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
2400d5e4:	4ba3      	ldr	r3, [pc, #652]	; (2400d874 <find_volume+0x2d0>)
2400d5e6:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400d5e8:	2d00      	cmp	r5, #0
2400d5ea:	f000 80c9 	beq.w	2400d780 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
2400d5ee:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
2400d5f0:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
2400d5f4:	782b      	ldrb	r3, [r5, #0]
2400d5f6:	b17b      	cbz	r3, 2400d618 <find_volume+0x74>
		stat = disk_status(fs->drv);
2400d5f8:	7868      	ldrb	r0, [r5, #1]
2400d5fa:	f7ff fdbf 	bl	2400d17c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
2400d5fe:	07c1      	lsls	r1, r0, #31
2400d600:	d40a      	bmi.n	2400d618 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
2400d602:	2c00      	cmp	r4, #0
2400d604:	f000 80ab 	beq.w	2400d75e <find_volume+0x1ba>
2400d608:	f010 0404 	ands.w	r4, r0, #4
2400d60c:	f000 80a7 	beq.w	2400d75e <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
2400d610:	240a      	movs	r4, #10
}
2400d612:	4620      	mov	r0, r4
2400d614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
2400d618:	2000      	movs	r0, #0
2400d61a:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
2400d61c:	f7ff fdb8 	bl	2400d190 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
2400d620:	07c2      	lsls	r2, r0, #31
2400d622:	f100 809f 	bmi.w	2400d764 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
2400d626:	b10c      	cbz	r4, 2400d62c <find_volume+0x88>
2400d628:	0743      	lsls	r3, r0, #29
2400d62a:	d4f1      	bmi.n	2400d610 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
2400d62c:	2100      	movs	r1, #0
2400d62e:	4628      	mov	r0, r5
2400d630:	f7ff ff38 	bl	2400d4a4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
2400d634:	2802      	cmp	r0, #2
2400d636:	d077      	beq.n	2400d728 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400d638:	2804      	cmp	r0, #4
2400d63a:	f000 809f 	beq.w	2400d77c <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400d63e:	2801      	cmp	r0, #1
2400d640:	f200 808c 	bhi.w	2400d75c <find_volume+0x1b8>
	bsect = 0;
2400d644:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
2400d646:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
2400d64a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2400d64e:	f040 8085 	bne.w	2400d75c <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
2400d652:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
2400d656:	b902      	cbnz	r2, 2400d65a <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
2400d658:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400d65a:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
2400d65e:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400d660:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
2400d662:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
2400d664:	2901      	cmp	r1, #1
2400d666:	d879      	bhi.n	2400d75c <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
2400d668:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
2400d66c:	b288      	uxth	r0, r1
2400d66e:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
2400d670:	2800      	cmp	r0, #0
2400d672:	d073      	beq.n	2400d75c <find_volume+0x1b8>
2400d674:	1e48      	subs	r0, r1, #1
2400d676:	4208      	tst	r0, r1
2400d678:	d170      	bne.n	2400d75c <find_volume+0x1b8>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400d67a:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400d67e:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
2400d682:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
2400d686:	d169      	bne.n	2400d75c <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
2400d688:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
2400d68c:	b900      	cbnz	r0, 2400d690 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
2400d68e:	6d68      	ldr	r0, [r5, #84]	; 0x54
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
2400d690:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
2400d694:	2f00      	cmp	r7, #0
2400d696:	d061      	beq.n	2400d75c <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
2400d698:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
2400d69c:	eb07 161c 	add.w	r6, r7, ip, lsr #4
2400d6a0:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
2400d6a2:	42b0      	cmp	r0, r6
2400d6a4:	d35a      	bcc.n	2400d75c <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400d6a6:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400d6aa:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
2400d6ac:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
2400d6b0:	d354      	bcc.n	2400d75c <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
2400d6b2:	f64f 71f5 	movw	r1, #65525	; 0xfff5
2400d6b6:	4288      	cmp	r0, r1
2400d6b8:	f200 8084 	bhi.w	2400d7c4 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
2400d6bc:	f640 71f5 	movw	r1, #4085	; 0xff5
2400d6c0:	4288      	cmp	r0, r1
2400d6c2:	f200 80a3 	bhi.w	2400d80c <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d6c6:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d6c8:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d6ca:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400d6cc:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d6ce:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400d6d0:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d6d2:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400d6d4:	f1bc 0f00 	cmp.w	ip, #0
2400d6d8:	d040      	beq.n	2400d75c <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d6da:	eb00 0140 	add.w	r1, r0, r0, lsl #1
2400d6de:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d6e2:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d6e4:	eb00 0151 	add.w	r1, r0, r1, lsr #1
2400d6e8:	2001      	movs	r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d6ea:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d6ee:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d6f0:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
2400d6f4:	d332      	bcc.n	2400d75c <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d6f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400d6fa:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d6fc:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
2400d700:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
2400d702:	495d      	ldr	r1, [pc, #372]	; (2400d878 <find_volume+0x2d4>)
	fs->fs_type = fmt;		/* FAT sub-type */
2400d704:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400d706:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400d708:	485c      	ldr	r0, [pc, #368]	; (2400d87c <find_volume+0x2d8>)
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d70a:	4a5d      	ldr	r2, [pc, #372]	; (2400d880 <find_volume+0x2dc>)
	fs->id = ++Fsid;		/* File system mount ID */
2400d70c:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
2400d70e:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d710:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
2400d712:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d714:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
2400d716:	800b      	strh	r3, [r1, #0]
2400d718:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d71a:	f000 8085 	beq.w	2400d828 <find_volume+0x284>
2400d71e:	6913      	ldr	r3, [r2, #16]
2400d720:	429d      	cmp	r5, r3
2400d722:	d06f      	beq.n	2400d804 <find_volume+0x260>
	return FR_OK;
2400d724:	2400      	movs	r4, #0
2400d726:	e01a      	b.n	2400d75e <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d728:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
2400d72c:	b10e      	cbz	r6, 2400d732 <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
2400d72e:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d732:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
2400d736:	b10c      	cbz	r4, 2400d73c <find_volume+0x198>
	rv = rv << 8 | ptr[0];
2400d738:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d73c:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
2400d740:	b303      	cbz	r3, 2400d784 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
2400d742:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d746:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
2400d74a:	b10f      	cbz	r7, 2400d750 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
2400d74c:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d750:	b9f6      	cbnz	r6, 2400d790 <find_volume+0x1ec>
2400d752:	bb2c      	cbnz	r4, 2400d7a0 <find_volume+0x1fc>
2400d754:	f1b8 0f00 	cmp.w	r8, #0
2400d758:	d12c      	bne.n	2400d7b4 <find_volume+0x210>
2400d75a:	b93f      	cbnz	r7, 2400d76c <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
2400d75c:	240d      	movs	r4, #13
}
2400d75e:	4620      	mov	r0, r4
2400d760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
2400d764:	2403      	movs	r4, #3
}
2400d766:	4620      	mov	r0, r4
2400d768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d76c:	4639      	mov	r1, r7
2400d76e:	4628      	mov	r0, r5
2400d770:	f7ff fe98 	bl	2400d4a4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d774:	2801      	cmp	r0, #1
2400d776:	d95a      	bls.n	2400d82e <find_volume+0x28a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
2400d778:	2804      	cmp	r0, #4
2400d77a:	d1ef      	bne.n	2400d75c <find_volume+0x1b8>
2400d77c:	2401      	movs	r4, #1
2400d77e:	e7ee      	b.n	2400d75e <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
2400d780:	240c      	movs	r4, #12
2400d782:	e7ec      	b.n	2400d75e <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
2400d784:	4698      	mov	r8, r3
2400d786:	e7de      	b.n	2400d746 <find_volume+0x1a2>
					*path = ++tt;
2400d788:	f10c 0301 	add.w	r3, ip, #1
2400d78c:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
2400d78e:	e729      	b.n	2400d5e4 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d790:	4631      	mov	r1, r6
2400d792:	4628      	mov	r0, r5
2400d794:	f7ff fe86 	bl	2400d4a4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d798:	2801      	cmp	r0, #1
2400d79a:	d8da      	bhi.n	2400d752 <find_volume+0x1ae>
2400d79c:	4634      	mov	r4, r6
2400d79e:	e752      	b.n	2400d646 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d7a0:	4621      	mov	r1, r4
2400d7a2:	4628      	mov	r0, r5
2400d7a4:	f7ff fe7e 	bl	2400d4a4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d7a8:	2801      	cmp	r0, #1
2400d7aa:	f67f af4c 	bls.w	2400d646 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
2400d7ae:	f1b8 0f00 	cmp.w	r8, #0
2400d7b2:	d0d2      	beq.n	2400d75a <find_volume+0x1b6>
2400d7b4:	4641      	mov	r1, r8
2400d7b6:	4628      	mov	r0, r5
2400d7b8:	f7ff fe74 	bl	2400d4a4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
2400d7bc:	2801      	cmp	r0, #1
2400d7be:	d8cc      	bhi.n	2400d75a <find_volume+0x1b6>
2400d7c0:	4644      	mov	r4, r8
2400d7c2:	e740      	b.n	2400d646 <find_volume+0xa2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400d7c4:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d7c8:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d7ca:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d7cc:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400d7ce:	ea5c 0303 	orrs.w	r3, ip, r3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d7d2:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d7d4:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
2400d7d6:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
2400d7d8:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
2400d7da:	d1bf      	bne.n	2400d75c <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
2400d7dc:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
2400d7de:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d7e0:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
2400d7e4:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
2400d7e6:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
2400d7ea:	d3b7      	bcc.n	2400d75c <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d7ec:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d7f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
2400d7f4:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d7f6:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
2400d7f8:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
2400d7fa:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
2400d7fe:	d018      	beq.n	2400d832 <find_volume+0x28e>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400d800:	2003      	movs	r0, #3
2400d802:	e77e      	b.n	2400d702 <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d804:	2300      	movs	r3, #0
	return FR_OK;
2400d806:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d808:	6113      	str	r3, [r2, #16]
2400d80a:	e7a8      	b.n	2400d75e <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d80c:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d80e:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
2400d810:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
2400d812:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
2400d814:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
2400d816:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
2400d818:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
2400d81a:	f1bc 0f00 	cmp.w	ip, #0
2400d81e:	d09d      	beq.n	2400d75c <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
2400d820:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
2400d822:	0049      	lsls	r1, r1, #1
2400d824:	2002      	movs	r0, #2
2400d826:	e760      	b.n	2400d6ea <find_volume+0x146>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400d828:	2300      	movs	r3, #0
2400d82a:	6013      	str	r3, [r2, #0]
2400d82c:	e777      	b.n	2400d71e <find_volume+0x17a>
2400d82e:	463c      	mov	r4, r7
2400d830:	e709      	b.n	2400d646 <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
2400d832:	1c61      	adds	r1, r4, #1
2400d834:	4628      	mov	r0, r5
2400d836:	f7ff fe77 	bl	2400d528 <move_window>
2400d83a:	2800      	cmp	r0, #0
2400d83c:	d1e0      	bne.n	2400d800 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400d83e:	f64a 2355 	movw	r3, #43605	; 0xaa55
2400d842:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
2400d846:	7128      	strb	r0, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
2400d848:	429a      	cmp	r2, r3
2400d84a:	d1d9      	bne.n	2400d800 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
2400d84c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
2400d84e:	4b0d      	ldr	r3, [pc, #52]	; (2400d884 <find_volume+0x2e0>)
2400d850:	429a      	cmp	r2, r3
2400d852:	d1d5      	bne.n	2400d800 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400d854:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
2400d858:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
2400d85c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
2400d860:	3320      	adds	r3, #32
2400d862:	429a      	cmp	r2, r3
2400d864:	d1cc      	bne.n	2400d800 <find_volume+0x25c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
2400d866:	2003      	movs	r0, #3
2400d868:	e9d5 3287 	ldrd	r3, r2, [r5, #540]	; 0x21c
2400d86c:	e9c5 2304 	strd	r2, r3, [r5, #16]
2400d870:	e747      	b.n	2400d702 <find_volume+0x15e>
2400d872:	bf00      	nop
2400d874:	2001dec8 	.word	0x2001dec8
2400d878:	2001deec 	.word	0x2001deec
2400d87c:	2001def0 	.word	0x2001def0
2400d880:	2001decc 	.word	0x2001decc
2400d884:	41615252 	.word	0x41615252

2400d888 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400d888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
2400d88c:	7806      	ldrb	r6, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
2400d88e:	4604      	mov	r4, r0
2400d890:	460d      	mov	r5, r1
2400d892:	4690      	mov	r8, r2
		switch (fs->fs_type) {
2400d894:	2e02      	cmp	r6, #2
2400d896:	d007      	beq.n	2400d8a8 <put_fat.part.0+0x20>
2400d898:	2e03      	cmp	r6, #3
2400d89a:	d041      	beq.n	2400d920 <put_fat.part.0+0x98>
2400d89c:	2e01      	cmp	r6, #1
2400d89e:	d01b      	beq.n	2400d8d8 <put_fat.part.0+0x50>
2400d8a0:	2702      	movs	r7, #2
}
2400d8a2:	4638      	mov	r0, r7
2400d8a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400d8a8:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400d8aa:	eb01 2115 	add.w	r1, r1, r5, lsr #8
2400d8ae:	f7ff fe3b 	bl	2400d528 <move_window>
			if (res != FR_OK) break;
2400d8b2:	4607      	mov	r7, r0
2400d8b4:	2800      	cmp	r0, #0
2400d8b6:	d1f4      	bne.n	2400d8a2 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d8b8:	006d      	lsls	r5, r5, #1
2400d8ba:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
2400d8be:	f3c8 2207 	ubfx	r2, r8, #8, #8
			fs->wflag = 1;
2400d8c2:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d8c4:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
}
2400d8c8:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val; val >>= 8;
2400d8ca:	f803 8005 	strb.w	r8, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400d8ce:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
2400d8d0:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
2400d8d2:	70e1      	strb	r1, [r4, #3]
}
2400d8d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d8d8:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400d8da:	eb05 0955 	add.w	r9, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d8de:	eb01 2159 	add.w	r1, r1, r9, lsr #9
2400d8e2:	f7ff fe21 	bl	2400d528 <move_window>
			if (res != FR_OK) break;
2400d8e6:	4607      	mov	r7, r0
2400d8e8:	2800      	cmp	r0, #0
2400d8ea:	d1da      	bne.n	2400d8a2 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d8ec:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
2400d8ee:	f109 0b01 	add.w	fp, r9, #1
2400d8f2:	f104 0a34 	add.w	sl, r4, #52	; 0x34
2400d8f6:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d8fa:	d52a      	bpl.n	2400d952 <put_fat.part.0+0xca>
2400d8fc:	f81a 3009 	ldrb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d900:	4620      	mov	r0, r4
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d902:	f003 030f 	and.w	r3, r3, #15
2400d906:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
2400d90a:	f80a 3009 	strb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d90e:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400d910:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d912:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400d916:	f7ff fe07 	bl	2400d528 <move_window>
			if (res != FR_OK) break;
2400d91a:	b3a0      	cbz	r0, 2400d986 <put_fat.part.0+0xfe>
2400d91c:	4607      	mov	r7, r0
	return res;
2400d91e:	e7c0      	b.n	2400d8a2 <put_fat.part.0+0x1a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400d920:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400d922:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
2400d926:	f7ff fdff 	bl	2400d528 <move_window>
			if (res != FR_OK) break;
2400d92a:	4607      	mov	r7, r0
2400d92c:	2800      	cmp	r0, #0
2400d92e:	d1b8      	bne.n	2400d8a2 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400d930:	00ad      	lsls	r5, r5, #2
2400d932:	f104 0134 	add.w	r1, r4, #52	; 0x34
2400d936:	f028 4270 	bic.w	r2, r8, #4026531840	; 0xf0000000
			fs->wflag = 1;
2400d93a:	2001      	movs	r0, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400d93c:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400d940:	594b      	ldr	r3, [r1, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400d942:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
2400d946:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
2400d948:	514b      	str	r3, [r1, r5]
			fs->wflag = 1;
2400d94a:	70e0      	strb	r0, [r4, #3]
}
2400d94c:	4638      	mov	r0, r7
2400d94e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400d952:	f80a 8009 	strb.w	r8, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d956:	4620      	mov	r0, r4
2400d958:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
2400d95a:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400d95c:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400d960:	f7ff fde2 	bl	2400d528 <move_window>
			if (res != FR_OK) break;
2400d964:	2800      	cmp	r0, #0
2400d966:	d1d9      	bne.n	2400d91c <put_fat.part.0+0x94>
			p = fs->win + bc % SS(fs);
2400d968:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d96c:	f3c8 2203 	ubfx	r2, r8, #8, #4
2400d970:	f81a 300b 	ldrb.w	r3, [sl, fp]
			p = fs->win + bc % SS(fs);
2400d974:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d976:	f023 030f 	bic.w	r3, r3, #15
2400d97a:	4313      	orrs	r3, r2
			fs->wflag = 1;
2400d97c:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d97e:	f88a 3000 	strb.w	r3, [sl]
			fs->wflag = 1;
2400d982:	70e2      	strb	r2, [r4, #3]
			break;
2400d984:	e78d      	b.n	2400d8a2 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
2400d986:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d98a:	f3c8 1307 	ubfx	r3, r8, #4, #8
			p = fs->win + bc % SS(fs);
2400d98e:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400d990:	e7f4      	b.n	2400d97c <put_fat.part.0+0xf4>
2400d992:	bf00      	nop

2400d994 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400d994:	2901      	cmp	r1, #1
2400d996:	d90e      	bls.n	2400d9b6 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
2400d998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400d99a:	6983      	ldr	r3, [r0, #24]
2400d99c:	460c      	mov	r4, r1
2400d99e:	4605      	mov	r5, r0
2400d9a0:	4299      	cmp	r1, r3
2400d9a2:	d206      	bcs.n	2400d9b2 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
2400d9a4:	7803      	ldrb	r3, [r0, #0]
2400d9a6:	2b02      	cmp	r3, #2
2400d9a8:	d021      	beq.n	2400d9ee <get_fat.isra.0+0x5a>
2400d9aa:	2b03      	cmp	r3, #3
2400d9ac:	d010      	beq.n	2400d9d0 <get_fat.isra.0+0x3c>
2400d9ae:	2b01      	cmp	r3, #1
2400d9b0:	d003      	beq.n	2400d9ba <get_fat.isra.0+0x26>
2400d9b2:	2001      	movs	r0, #1
}
2400d9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
2400d9b6:	2001      	movs	r0, #1
}
2400d9b8:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d9ba:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400d9bc:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400d9c0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
2400d9c4:	f7ff fdb0 	bl	2400d528 <move_window>
2400d9c8:	b1f0      	cbz	r0, 2400da08 <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
2400d9ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
2400d9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400d9d0:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400d9d2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400d9d6:	f7ff fda7 	bl	2400d528 <move_window>
2400d9da:	2800      	cmp	r0, #0
2400d9dc:	d1f5      	bne.n	2400d9ca <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400d9de:	00a4      	lsls	r4, r4, #2
2400d9e0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400d9e4:	4425      	add	r5, r4
2400d9e6:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400d9e8:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
2400d9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400d9ee:	6a41      	ldr	r1, [r0, #36]	; 0x24
2400d9f0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400d9f4:	f7ff fd98 	bl	2400d528 <move_window>
2400d9f8:	2800      	cmp	r0, #0
2400d9fa:	d1e6      	bne.n	2400d9ca <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400d9fc:	0063      	lsls	r3, r4, #1
2400d9fe:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400da02:	442b      	add	r3, r5
2400da04:	8e98      	ldrh	r0, [r3, #52]	; 0x34
}
2400da06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
2400da08:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400da0c:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400da0e:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400da10:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
2400da12:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400da14:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400da18:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400da1c:	f7ff fd84 	bl	2400d528 <move_window>
2400da20:	2800      	cmp	r0, #0
2400da22:	d1d2      	bne.n	2400d9ca <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
2400da24:	f3c7 0708 	ubfx	r7, r7, #0, #9
2400da28:	442f      	add	r7, r5
2400da2a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
2400da2e:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400da32:	07e3      	lsls	r3, r4, #31
2400da34:	bf4c      	ite	mi
2400da36:	0900      	lsrmi	r0, r0, #4
2400da38:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
2400da3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400da3e:	bf00      	nop

2400da40 <dir_read.constprop.0>:
FRESULT dir_read (
2400da40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
2400da44:	69c6      	ldr	r6, [r0, #28]
FRESULT dir_read (
2400da46:	b083      	sub	sp, #12
2400da48:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400da4a:	f8d0 8000 	ldr.w	r8, [r0]
	while (dp->sect) {
2400da4e:	2e00      	cmp	r6, #0
2400da50:	d061      	beq.n	2400db16 <dir_read.constprop.0+0xd6>
	BYTE ord = 0xFF, sum = 0xFF;
2400da52:	f04f 0bff 	mov.w	fp, #255	; 0xff
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400da56:	f108 0a34 	add.w	sl, r8, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
2400da5a:	46d9      	mov	r9, fp
	if (sector != fs->winsect) {	/* Window offset changed? */
2400da5c:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400da60:	42b5      	cmp	r5, r6
2400da62:	d018      	beq.n	2400da96 <dir_read.constprop.0+0x56>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400da64:	f898 3003 	ldrb.w	r3, [r8, #3]
2400da68:	2b00      	cmp	r3, #0
2400da6a:	f040 80c8 	bne.w	2400dbfe <dir_read.constprop.0+0x1be>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400da6e:	2301      	movs	r3, #1
2400da70:	4632      	mov	r2, r6
2400da72:	4651      	mov	r1, sl
2400da74:	f898 0001 	ldrb.w	r0, [r8, #1]
2400da78:	f7ff fb9c 	bl	2400d1b4 <disk_read>
2400da7c:	b148      	cbz	r0, 2400da92 <dir_read.constprop.0+0x52>
			fs->winsect = sector;
2400da7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400da82:	2001      	movs	r0, #1
			fs->winsect = sector;
2400da84:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400da88:	2300      	movs	r3, #0
2400da8a:	61e3      	str	r3, [r4, #28]
}
2400da8c:	b003      	add	sp, #12
2400da8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400da92:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
2400da96:	6a21      	ldr	r1, [r4, #32]
2400da98:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
2400da9a:	2a00      	cmp	r2, #0
2400da9c:	d03b      	beq.n	2400db16 <dir_read.constprop.0+0xd6>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400da9e:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400daa0:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2400daa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400daa6:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
2400daa8:	d005      	beq.n	2400dab6 <dir_read.constprop.0+0x76>
2400daaa:	2a2e      	cmp	r2, #46	; 0x2e
2400daac:	d003      	beq.n	2400dab6 <dir_read.constprop.0+0x76>
2400daae:	f023 0020 	bic.w	r0, r3, #32
2400dab2:	2808      	cmp	r0, #8
2400dab4:	d136      	bne.n	2400db24 <dir_read.constprop.0+0xe4>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400dab6:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400daba:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
2400dabc:	6827      	ldr	r7, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400dabe:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400dac0:	69e6      	ldr	r6, [r4, #28]
2400dac2:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400dac6:	d226      	bcs.n	2400db16 <dir_read.constprop.0+0xd6>
2400dac8:	b32e      	cbz	r6, 2400db16 <dir_read.constprop.0+0xd6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400daca:	f3c5 0308 	ubfx	r3, r5, #0, #9
2400dace:	bb23      	cbnz	r3, 2400db1a <dir_read.constprop.0+0xda>
		dp->sect++;				/* Next sector */
2400dad0:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400dad2:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400dad4:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400dad6:	b961      	cbnz	r1, 2400daf2 <dir_read.constprop.0+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400dad8:	893b      	ldrh	r3, [r7, #8]
2400dada:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400dade:	d91a      	bls.n	2400db16 <dir_read.constprop.0+0xd6>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400dae0:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400dae2:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400dae4:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400dae6:	2e00      	cmp	r6, #0
2400dae8:	d1b8      	bne.n	2400da5c <dir_read.constprop.0+0x1c>
		res = move_window(fs, dp->sect);
2400daea:	2000      	movs	r0, #0
}
2400daec:	b003      	add	sp, #12
2400daee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400daf2:	897b      	ldrh	r3, [r7, #10]
2400daf4:	3b01      	subs	r3, #1
2400daf6:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
2400dafa:	d1f1      	bne.n	2400dae0 <dir_read.constprop.0+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400dafc:	4638      	mov	r0, r7
2400dafe:	9301      	str	r3, [sp, #4]
2400db00:	f7ff ff48 	bl	2400d994 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400db04:	2801      	cmp	r0, #1
2400db06:	f240 80b2 	bls.w	2400dc6e <dir_read.constprop.0+0x22e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400db0a:	1c43      	adds	r3, r0, #1
2400db0c:	d07f      	beq.n	2400dc0e <dir_read.constprop.0+0x1ce>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400db0e:	69ba      	ldr	r2, [r7, #24]
2400db10:	4290      	cmp	r0, r2
2400db12:	f0c0 809f 	bcc.w	2400dc54 <dir_read.constprop.0+0x214>
	FRESULT res = FR_NO_FILE;
2400db16:	2004      	movs	r0, #4
2400db18:	e7b6      	b.n	2400da88 <dir_read.constprop.0+0x48>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400db1a:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400db1c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400db1e:	441f      	add	r7, r3
2400db20:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400db22:	e79b      	b.n	2400da5c <dir_read.constprop.0+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
2400db24:	2b0f      	cmp	r3, #15
2400db26:	f040 80a9 	bne.w	2400dc7c <dir_read.constprop.0+0x23c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2400db2a:	0650      	lsls	r0, r2, #25
2400db2c:	d571      	bpl.n	2400dc12 <dir_read.constprop.0+0x1d2>
						dp->blk_ofs = dp->dptr;
2400db2e:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;
2400db30:	f002 09bf 	and.w	r9, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400db34:	f891 b00d 	ldrb.w	fp, [r1, #13]
						dp->blk_ofs = dp->dptr;
2400db38:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400db3a:	7b4b      	ldrb	r3, [r1, #13]
2400db3c:	455b      	cmp	r3, fp
2400db3e:	d1ba      	bne.n	2400dab6 <dir_read.constprop.0+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
2400db40:	8b4b      	ldrh	r3, [r1, #26]
2400db42:	2b00      	cmp	r3, #0
2400db44:	d1b7      	bne.n	2400dab6 <dir_read.constprop.0+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
2400db46:	780b      	ldrb	r3, [r1, #0]
2400db48:	f8b1 0001 	ldrh.w	r0, [r1, #1]
2400db4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400db50:	3b01      	subs	r3, #1
2400db52:	eb03 0243 	add.w	r2, r3, r3, lsl #1
2400db56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400db5a:	2bfe      	cmp	r3, #254	; 0xfe
2400db5c:	d8ab      	bhi.n	2400dab6 <dir_read.constprop.0+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400db5e:	f8d8 500c 	ldr.w	r5, [r8, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
2400db62:	1c5a      	adds	r2, r3, #1
2400db64:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
2400db68:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
2400db6c:	2800      	cmp	r0, #0
2400db6e:	f040 808e 	bne.w	2400dc8e <dir_read.constprop.0+0x24e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400db72:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400db76:	429e      	cmp	r6, r3
2400db78:	d19d      	bne.n	2400dab6 <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400db7a:	f8b1 c005 	ldrh.w	ip, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400db7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400db82:	459c      	cmp	ip, r3
2400db84:	d197      	bne.n	2400dab6 <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400db86:	f8b1 7007 	ldrh.w	r7, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400db8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400db8e:	429f      	cmp	r7, r3
2400db90:	d191      	bne.n	2400dab6 <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400db92:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400db96:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400db9a:	429e      	cmp	r6, r3
2400db9c:	d18b      	bne.n	2400dab6 <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400db9e:	89cf      	ldrh	r7, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400dba4:	429f      	cmp	r7, r3
2400dba6:	d186      	bne.n	2400dab6 <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400dba8:	f8b1 c010 	ldrh.w	ip, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dbac:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400dbb0:	459c      	cmp	ip, r3
2400dbb2:	d180      	bne.n	2400dab6 <dir_read.constprop.0+0x76>
	rv = rv << 8 | ptr[0];
2400dbb4:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dbb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400dbba:	429e      	cmp	r6, r3
2400dbbc:	f47f af7b 	bne.w	2400dab6 <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400dbc0:	8a8f      	ldrh	r7, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dbc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400dbc6:	429f      	cmp	r7, r3
2400dbc8:	f47f af75 	bne.w	2400dab6 <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400dbcc:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dbce:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400dbd2:	429e      	cmp	r6, r3
2400dbd4:	f47f af6f 	bne.w	2400dab6 <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400dbd8:	8b0f      	ldrh	r7, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dbda:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400dbde:	429f      	cmp	r7, r3
2400dbe0:	f47f af69 	bne.w	2400dab6 <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400dbe4:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dbe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400dbea:	429e      	cmp	r6, r3
2400dbec:	f47f af63 	bne.w	2400dab6 <dir_read.constprop.0+0x76>
	rv = ptr[1];
2400dbf0:	8bcf      	ldrh	r7, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400dbf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400dbf6:	429f      	cmp	r7, r3
2400dbf8:	f000 80bd 	beq.w	2400dd76 <dir_read.constprop.0+0x336>
2400dbfc:	e75b      	b.n	2400dab6 <dir_read.constprop.0+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400dbfe:	2301      	movs	r3, #1
2400dc00:	462a      	mov	r2, r5
2400dc02:	4651      	mov	r1, sl
2400dc04:	f898 0001 	ldrb.w	r0, [r8, #1]
2400dc08:	f7ff fae4 	bl	2400d1d4 <disk_write>
2400dc0c:	b128      	cbz	r0, 2400dc1a <dir_read.constprop.0+0x1da>
	FRESULT res = FR_NO_FILE;
2400dc0e:	2001      	movs	r0, #1
2400dc10:	e73a      	b.n	2400da88 <dir_read.constprop.0+0x48>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400dc12:	454a      	cmp	r2, r9
2400dc14:	f47f af4f 	bne.w	2400dab6 <dir_read.constprop.0+0x76>
2400dc18:	e78f      	b.n	2400db3a <dir_read.constprop.0+0xfa>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400dc1a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400dc1e:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400dc22:	1aea      	subs	r2, r5, r3
2400dc24:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400dc28:	429a      	cmp	r2, r3
2400dc2a:	f4bf af20 	bcs.w	2400da6e <dir_read.constprop.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400dc2e:	f898 7002 	ldrb.w	r7, [r8, #2]
2400dc32:	2f01      	cmp	r7, #1
2400dc34:	d802      	bhi.n	2400dc3c <dir_read.constprop.0+0x1fc>
2400dc36:	e71a      	b.n	2400da6e <dir_read.constprop.0+0x2e>
					wsect += fs->fsize;
2400dc38:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400dc3c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400dc3e:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400dc40:	2301      	movs	r3, #1
2400dc42:	4651      	mov	r1, sl
2400dc44:	462a      	mov	r2, r5
2400dc46:	f898 0001 	ldrb.w	r0, [r8, #1]
2400dc4a:	f7ff fac3 	bl	2400d1d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400dc4e:	2f01      	cmp	r7, #1
2400dc50:	d1f2      	bne.n	2400dc38 <dir_read.constprop.0+0x1f8>
2400dc52:	e70c      	b.n	2400da6e <dir_read.constprop.0+0x2e>
				dp->clust = clst;		/* Initialize data for new cluster */
2400dc54:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400dc56:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400dc58:	69ba      	ldr	r2, [r7, #24]
2400dc5a:	9b01      	ldr	r3, [sp, #4]
2400dc5c:	3a02      	subs	r2, #2
2400dc5e:	4290      	cmp	r0, r2
2400dc60:	d207      	bcs.n	2400dc72 <dir_read.constprop.0+0x232>
	return clst * fs->csize + fs->database;
2400dc62:	897b      	ldrh	r3, [r7, #10]
2400dc64:	6afe      	ldr	r6, [r7, #44]	; 0x2c
2400dc66:	fb00 6603 	mla	r6, r0, r3, r6
				dp->sect = clust2sect(fs, clst);
2400dc6a:	61e6      	str	r6, [r4, #28]
2400dc6c:	e738      	b.n	2400dae0 <dir_read.constprop.0+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400dc6e:	2002      	movs	r0, #2
2400dc70:	e70a      	b.n	2400da88 <dir_read.constprop.0+0x48>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400dc72:	3734      	adds	r7, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
2400dc74:	61e3      	str	r3, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
2400dc76:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400dc78:	6227      	str	r7, [r4, #32]
	while (dp->sect) {
2400dc7a:	e736      	b.n	2400daea <dir_read.constprop.0+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400dc7c:	f1b9 0f00 	cmp.w	r9, #0
2400dc80:	f000 8086 	beq.w	2400dd90 <dir_read.constprop.0+0x350>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400dc84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400dc88:	2000      	movs	r0, #0
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2400dc8a:	6323      	str	r3, [r4, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2400dc8c:	e6fe      	b.n	2400da8c <dir_read.constprop.0+0x4c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dc8e:	2aff      	cmp	r2, #255	; 0xff
2400dc90:	f000 80c8 	beq.w	2400de24 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dc94:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
2400dc98:	0050      	lsls	r0, r2, #1
2400dc9a:	f8b1 c005 	ldrh.w	ip, [r1, #5]
2400dc9e:	1c9a      	adds	r2, r3, #2
		if (wc) {
2400dca0:	2e00      	cmp	r6, #0
2400dca2:	f43f af6c 	beq.w	2400db7e <dir_read.constprop.0+0x13e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dca6:	2aff      	cmp	r2, #255	; 0xff
2400dca8:	f000 80bc 	beq.w	2400de24 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dcac:	4428      	add	r0, r5
2400dcae:	1cda      	adds	r2, r3, #3
2400dcb0:	f8a0 c002 	strh.w	ip, [r0, #2]
2400dcb4:	f8b1 7007 	ldrh.w	r7, [r1, #7]
		if (wc) {
2400dcb8:	f1bc 0f00 	cmp.w	ip, #0
2400dcbc:	f43f af65 	beq.w	2400db8a <dir_read.constprop.0+0x14a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dcc0:	2aff      	cmp	r2, #255	; 0xff
2400dcc2:	f000 80af 	beq.w	2400de24 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dcc6:	8087      	strh	r7, [r0, #4]
2400dcc8:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
2400dcca:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
2400dcce:	2f00      	cmp	r7, #0
2400dcd0:	f43f af61 	beq.w	2400db96 <dir_read.constprop.0+0x156>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dcd4:	2aff      	cmp	r2, #255	; 0xff
2400dcd6:	f000 80a5 	beq.w	2400de24 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dcda:	80c6      	strh	r6, [r0, #6]
2400dcdc:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
2400dcde:	89cf      	ldrh	r7, [r1, #14]
		if (wc) {
2400dce0:	2e00      	cmp	r6, #0
2400dce2:	f43f af5d 	beq.w	2400dba0 <dir_read.constprop.0+0x160>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dce6:	2aff      	cmp	r2, #255	; 0xff
2400dce8:	f000 809c 	beq.w	2400de24 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dcec:	8107      	strh	r7, [r0, #8]
2400dcee:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
2400dcf0:	f8b1 c010 	ldrh.w	ip, [r1, #16]
		if (wc) {
2400dcf4:	2f00      	cmp	r7, #0
2400dcf6:	f43f af59 	beq.w	2400dbac <dir_read.constprop.0+0x16c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dcfa:	2aff      	cmp	r2, #255	; 0xff
2400dcfc:	f000 8092 	beq.w	2400de24 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dd00:	f8a0 c00a 	strh.w	ip, [r0, #10]
2400dd04:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
2400dd06:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
2400dd08:	f1bc 0f00 	cmp.w	ip, #0
2400dd0c:	f43f af53 	beq.w	2400dbb6 <dir_read.constprop.0+0x176>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dd10:	2aff      	cmp	r2, #255	; 0xff
2400dd12:	f000 8087 	beq.w	2400de24 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dd16:	8186      	strh	r6, [r0, #12]
2400dd18:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
2400dd1c:	8a8f      	ldrh	r7, [r1, #20]
		if (wc) {
2400dd1e:	2e00      	cmp	r6, #0
2400dd20:	f43f af4f 	beq.w	2400dbc2 <dir_read.constprop.0+0x182>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dd24:	2aff      	cmp	r2, #255	; 0xff
2400dd26:	d07d      	beq.n	2400de24 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dd28:	81c7      	strh	r7, [r0, #14]
2400dd2a:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
2400dd2e:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
2400dd30:	2f00      	cmp	r7, #0
2400dd32:	f43f af4c 	beq.w	2400dbce <dir_read.constprop.0+0x18e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dd36:	2aff      	cmp	r2, #255	; 0xff
2400dd38:	d074      	beq.n	2400de24 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dd3a:	8206      	strh	r6, [r0, #16]
2400dd3c:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
2400dd40:	8b0f      	ldrh	r7, [r1, #24]
		if (wc) {
2400dd42:	2e00      	cmp	r6, #0
2400dd44:	f43f af49 	beq.w	2400dbda <dir_read.constprop.0+0x19a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dd48:	2aff      	cmp	r2, #255	; 0xff
2400dd4a:	d06b      	beq.n	2400de24 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dd4c:	8247      	strh	r7, [r0, #18]
2400dd4e:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
2400dd52:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
2400dd54:	2f00      	cmp	r7, #0
2400dd56:	f43f af46 	beq.w	2400dbe6 <dir_read.constprop.0+0x1a6>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dd5a:	2aff      	cmp	r2, #255	; 0xff
2400dd5c:	d062      	beq.n	2400de24 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dd5e:	8286      	strh	r6, [r0, #20]
2400dd60:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
2400dd64:	8bcf      	ldrh	r7, [r1, #30]
		if (wc) {
2400dd66:	2e00      	cmp	r6, #0
2400dd68:	f43f af43 	beq.w	2400dbf2 <dir_read.constprop.0+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
2400dd6c:	2aff      	cmp	r2, #255	; 0xff
2400dd6e:	d059      	beq.n	2400de24 <dir_read.constprop.0+0x3e4>
			lfnbuf[i++] = wc = uc;			/* Store it */
2400dd70:	f103 020d 	add.w	r2, r3, #13
2400dd74:	82c7      	strh	r7, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
2400dd76:	780b      	ldrb	r3, [r1, #0]
2400dd78:	0659      	lsls	r1, r3, #25
2400dd7a:	d504      	bpl.n	2400dd86 <dir_read.constprop.0+0x346>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
2400dd7c:	2aff      	cmp	r2, #255	; 0xff
2400dd7e:	d051      	beq.n	2400de24 <dir_read.constprop.0+0x3e4>
		lfnbuf[i] = 0;
2400dd80:	2300      	movs	r3, #0
2400dd82:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400dd86:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
2400dd8a:	fa5f f989 	uxtb.w	r9, r9
2400dd8e:	e694      	b.n	2400daba <dir_read.constprop.0+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400dd90:	780b      	ldrb	r3, [r1, #0]
2400dd92:	01da      	lsls	r2, r3, #7
2400dd94:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
2400dd98:	784b      	ldrb	r3, [r1, #1]
2400dd9a:	441a      	add	r2, r3
2400dd9c:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400dda0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400dda4:	788a      	ldrb	r2, [r1, #2]
2400dda6:	fa52 f383 	uxtab	r3, r2, r3
2400ddaa:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400ddae:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400ddb2:	78cb      	ldrb	r3, [r1, #3]
2400ddb4:	fa53 f282 	uxtab	r2, r3, r2
2400ddb8:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400ddbc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400ddc0:	790a      	ldrb	r2, [r1, #4]
2400ddc2:	fa52 f383 	uxtab	r3, r2, r3
2400ddc6:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400ddca:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400ddce:	794b      	ldrb	r3, [r1, #5]
2400ddd0:	fa53 f282 	uxtab	r2, r3, r2
2400ddd4:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400ddd8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400dddc:	798a      	ldrb	r2, [r1, #6]
2400ddde:	fa52 f383 	uxtab	r3, r2, r3
2400dde2:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400dde6:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400ddea:	79cb      	ldrb	r3, [r1, #7]
2400ddec:	fa53 f282 	uxtab	r2, r3, r2
2400ddf0:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400ddf4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400ddf8:	7a0a      	ldrb	r2, [r1, #8]
2400ddfa:	fa52 f383 	uxtab	r3, r2, r3
2400ddfe:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400de02:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400de06:	7a4b      	ldrb	r3, [r1, #9]
2400de08:	7a89      	ldrb	r1, [r1, #10]
2400de0a:	fa53 f282 	uxtab	r2, r3, r2
2400de0e:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400de12:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400de16:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2400de1a:	b2db      	uxtb	r3, r3
2400de1c:	455b      	cmp	r3, fp
2400de1e:	f47f af31 	bne.w	2400dc84 <dir_read.constprop.0+0x244>
2400de22:	e662      	b.n	2400daea <dir_read.constprop.0+0xaa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400de24:	4691      	mov	r9, r2
2400de26:	e648      	b.n	2400daba <dir_read.constprop.0+0x7a>

2400de28 <sync_fs>:
{
2400de28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400de2a:	78c3      	ldrb	r3, [r0, #3]
{
2400de2c:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400de2e:	b95b      	cbnz	r3, 2400de48 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400de30:	7823      	ldrb	r3, [r4, #0]
2400de32:	2b03      	cmp	r3, #3
2400de34:	d029      	beq.n	2400de8a <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
2400de36:	2200      	movs	r2, #0
2400de38:	7860      	ldrb	r0, [r4, #1]
2400de3a:	4611      	mov	r1, r2
2400de3c:	f7ff f9da 	bl	2400d1f4 <disk_ioctl>
			res = FR_DISK_ERR;
2400de40:	3800      	subs	r0, #0
2400de42:	bf18      	it	ne
2400de44:	2001      	movne	r0, #1
}
2400de46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
2400de48:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400de4a:	f100 0734 	add.w	r7, r0, #52	; 0x34
2400de4e:	2301      	movs	r3, #1
2400de50:	7840      	ldrb	r0, [r0, #1]
2400de52:	462a      	mov	r2, r5
2400de54:	4639      	mov	r1, r7
2400de56:	f7ff f9bd 	bl	2400d1d4 <disk_write>
2400de5a:	2800      	cmp	r0, #0
2400de5c:	d13e      	bne.n	2400dedc <sync_fs+0xb4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400de5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400de60:	69e3      	ldr	r3, [r4, #28]
2400de62:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
2400de64:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400de66:	429a      	cmp	r2, r3
2400de68:	d2e2      	bcs.n	2400de30 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400de6a:	78a6      	ldrb	r6, [r4, #2]
2400de6c:	2e01      	cmp	r6, #1
2400de6e:	d801      	bhi.n	2400de74 <sync_fs+0x4c>
2400de70:	e7de      	b.n	2400de30 <sync_fs+0x8>
					wsect += fs->fsize;
2400de72:	69e3      	ldr	r3, [r4, #28]
2400de74:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400de76:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400de78:	2301      	movs	r3, #1
2400de7a:	4639      	mov	r1, r7
2400de7c:	462a      	mov	r2, r5
2400de7e:	7860      	ldrb	r0, [r4, #1]
2400de80:	f7ff f9a8 	bl	2400d1d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400de84:	2e01      	cmp	r6, #1
2400de86:	d1f4      	bne.n	2400de72 <sync_fs+0x4a>
2400de88:	e7d2      	b.n	2400de30 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
2400de8a:	7925      	ldrb	r5, [r4, #4]
2400de8c:	2d01      	cmp	r5, #1
2400de8e:	d1d2      	bne.n	2400de36 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
2400de90:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
2400de94:	f44f 7200 	mov.w	r2, #512	; 0x200
2400de98:	2100      	movs	r1, #0
2400de9a:	4630      	mov	r0, r6
2400de9c:	f00b fd7c 	bl	24019998 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
2400dea0:	480f      	ldr	r0, [pc, #60]	; (2400dee0 <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
2400dea2:	f64a 2355 	movw	r3, #43605	; 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
2400dea6:	6360      	str	r0, [r4, #52]	; 0x34
2400dea8:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
2400deac:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400deb0:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400deb2:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
2400deb6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
2400deba:	3020      	adds	r0, #32
2400debc:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
			fs->winsect = fs->volbase + 1;
2400dec0:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
2400dec2:	f8c4 1220 	str.w	r1, [r4, #544]	; 0x220
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400dec6:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
2400dec8:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
2400deca:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400dece:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
2400ded0:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
2400ded2:	f7ff f97f 	bl	2400d1d4 <disk_write>
			fs->fsi_flag = 0;
2400ded6:	2300      	movs	r3, #0
2400ded8:	7123      	strb	r3, [r4, #4]
2400deda:	e7ac      	b.n	2400de36 <sync_fs+0xe>
			res = FR_DISK_ERR;
2400dedc:	2001      	movs	r0, #1
}
2400dede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2400dee0:	41615252 	.word	0x41615252

2400dee4 <create_chain>:
{
2400dee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400dee8:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
2400deea:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
2400deec:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
2400def0:	2900      	cmp	r1, #0
2400def2:	f040 80a7 	bne.w	2400e044 <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
2400def6:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400defa:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400defe:	b9c6      	cbnz	r6, 2400df32 <create_chain+0x4e>
2400df00:	2601      	movs	r6, #1
2400df02:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
2400df04:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
2400df06:	429c      	cmp	r4, r3
2400df08:	d317      	bcc.n	2400df3a <create_chain+0x56>
				if (ncl > scl) return 0;	/* No free cluster */
2400df0a:	2e01      	cmp	r6, #1
2400df0c:	f000 8096 	beq.w	2400e03c <create_chain+0x158>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
2400df10:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
2400df14:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400df16:	69ab      	ldr	r3, [r5, #24]
2400df18:	42a3      	cmp	r3, r4
2400df1a:	d906      	bls.n	2400df2a <create_chain+0x46>
		switch (fs->fs_type) {
2400df1c:	782b      	ldrb	r3, [r5, #0]
2400df1e:	2b02      	cmp	r3, #2
2400df20:	d07e      	beq.n	2400e020 <create_chain+0x13c>
2400df22:	2b03      	cmp	r3, #3
2400df24:	d064      	beq.n	2400dff0 <create_chain+0x10c>
2400df26:	2b01      	cmp	r3, #1
2400df28:	d00c      	beq.n	2400df44 <create_chain+0x60>
2400df2a:	2401      	movs	r4, #1
}
2400df2c:	4620      	mov	r0, r4
2400df2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
2400df32:	42b3      	cmp	r3, r6
2400df34:	bf98      	it	ls
2400df36:	2601      	movls	r6, #1
2400df38:	e7e3      	b.n	2400df02 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400df3a:	2c01      	cmp	r4, #1
2400df3c:	f8d9 5000 	ldr.w	r5, [r9]
2400df40:	d9f3      	bls.n	2400df2a <create_chain+0x46>
2400df42:	e7e8      	b.n	2400df16 <create_chain+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400df44:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400df46:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400df4a:	4628      	mov	r0, r5
2400df4c:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400df50:	f7ff faea 	bl	2400d528 <move_window>
2400df54:	2800      	cmp	r0, #0
2400df56:	d146      	bne.n	2400dfe6 <create_chain+0x102>
			wc = fs->win[bc++ % SS(fs)];
2400df58:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400df5c:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400df5e:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400df62:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
2400df64:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400df66:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400df6a:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400df6e:	f7ff fadb 	bl	2400d528 <move_window>
2400df72:	bbc0      	cbnz	r0, 2400dfe6 <create_chain+0x102>
			wc |= fs->win[bc % SS(fs)] << 8;
2400df74:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400df78:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400df7a:	44ab      	add	fp, r5
2400df7c:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
2400df80:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400df84:	bf4c      	ite	mi
2400df86:	091b      	lsrmi	r3, r3, #4
2400df88:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
2400df8c:	2b00      	cmp	r3, #0
2400df8e:	d140      	bne.n	2400e012 <create_chain+0x12e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400df90:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400df94:	42a3      	cmp	r3, r4
2400df96:	d9c8      	bls.n	2400df2a <create_chain+0x46>
2400df98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400df9c:	4621      	mov	r1, r4
2400df9e:	4640      	mov	r0, r8
2400dfa0:	f7ff fc72 	bl	2400d888 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
2400dfa4:	b958      	cbnz	r0, 2400dfbe <create_chain+0xda>
2400dfa6:	b157      	cbz	r7, 2400dfbe <create_chain+0xda>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400dfa8:	2f01      	cmp	r7, #1
2400dfaa:	d0be      	beq.n	2400df2a <create_chain+0x46>
2400dfac:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400dfb0:	429f      	cmp	r7, r3
2400dfb2:	d2ba      	bcs.n	2400df2a <create_chain+0x46>
2400dfb4:	4622      	mov	r2, r4
2400dfb6:	4639      	mov	r1, r7
2400dfb8:	4640      	mov	r0, r8
2400dfba:	f7ff fc65 	bl	2400d888 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
2400dfbe:	b980      	cbnz	r0, 2400dfe2 <create_chain+0xfe>
		fs->last_clst = ncl;
2400dfc0:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
2400dfc4:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
2400dfc8:	3b02      	subs	r3, #2
2400dfca:	429a      	cmp	r2, r3
2400dfcc:	d802      	bhi.n	2400dfd4 <create_chain+0xf0>
2400dfce:	3a01      	subs	r2, #1
2400dfd0:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
2400dfd4:	f898 3004 	ldrb.w	r3, [r8, #4]
2400dfd8:	f043 0301 	orr.w	r3, r3, #1
2400dfdc:	f888 3004 	strb.w	r3, [r8, #4]
2400dfe0:	e7a4      	b.n	2400df2c <create_chain+0x48>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
2400dfe2:	2801      	cmp	r0, #1
2400dfe4:	d1a1      	bne.n	2400df2a <create_chain+0x46>
2400dfe6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
2400dfea:	4620      	mov	r0, r4
2400dfec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400dff0:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400dff2:	4628      	mov	r0, r5
2400dff4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400dff8:	f7ff fa96 	bl	2400d528 <move_window>
2400dffc:	2800      	cmp	r0, #0
2400dffe:	d1f2      	bne.n	2400dfe6 <create_chain+0x102>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e000:	00a3      	lsls	r3, r4, #2
2400e002:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400e006:	441d      	add	r5, r3
2400e008:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e00a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
2400e00e:	2b00      	cmp	r3, #0
2400e010:	d0be      	beq.n	2400df90 <create_chain+0xac>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
2400e012:	2b01      	cmp	r3, #1
2400e014:	d089      	beq.n	2400df2a <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
2400e016:	42a6      	cmp	r6, r4
2400e018:	d010      	beq.n	2400e03c <create_chain+0x158>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400e01a:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e01e:	e771      	b.n	2400df04 <create_chain+0x20>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e020:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400e022:	4628      	mov	r0, r5
2400e024:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400e028:	f7ff fa7e 	bl	2400d528 <move_window>
2400e02c:	2800      	cmp	r0, #0
2400e02e:	d1da      	bne.n	2400dfe6 <create_chain+0x102>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400e030:	0063      	lsls	r3, r4, #1
2400e032:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400e036:	442b      	add	r3, r5
2400e038:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
			break;
2400e03a:	e7a7      	b.n	2400df8c <create_chain+0xa8>
				if (ncl > scl) return 0;	/* No free cluster */
2400e03c:	2400      	movs	r4, #0
}
2400e03e:	4620      	mov	r0, r4
2400e040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400e044:	4640      	mov	r0, r8
2400e046:	f7ff fca5 	bl	2400d994 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
2400e04a:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
2400e04c:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
2400e04e:	f67f af6c 	bls.w	2400df2a <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
2400e052:	1c41      	adds	r1, r0, #1
2400e054:	d0c7      	beq.n	2400dfe6 <create_chain+0x102>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
2400e056:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e05a:	4283      	cmp	r3, r0
2400e05c:	f63f af66 	bhi.w	2400df2c <create_chain+0x48>
2400e060:	463e      	mov	r6, r7
2400e062:	e74e      	b.n	2400df02 <create_chain+0x1e>

2400e064 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400e064:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
2400e068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
2400e06c:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
2400e070:	d24e      	bcs.n	2400e110 <dir_sdi+0xac>
2400e072:	06ca      	lsls	r2, r1, #27
2400e074:	460c      	mov	r4, r1
2400e076:	d14b      	bne.n	2400e110 <dir_sdi+0xac>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
2400e078:	6885      	ldr	r5, [r0, #8]
2400e07a:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
2400e07c:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400e07e:	2d00      	cmp	r5, #0
2400e080:	d049      	beq.n	2400e116 <dir_sdi+0xb2>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400e082:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
2400e086:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
2400e08a:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
2400e08e:	f0c0 8084 	bcc.w	2400e19a <dir_sdi+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e092:	2d01      	cmp	r5, #1
2400e094:	d03c      	beq.n	2400e110 <dir_sdi+0xac>
2400e096:	4647      	mov	r7, r8
2400e098:	e037      	b.n	2400e10a <dir_sdi+0xa6>
		switch (fs->fs_type) {
2400e09a:	783b      	ldrb	r3, [r7, #0]
2400e09c:	2b02      	cmp	r3, #2
2400e09e:	d06e      	beq.n	2400e17e <dir_sdi+0x11a>
2400e0a0:	2b03      	cmp	r3, #3
2400e0a2:	d05c      	beq.n	2400e15e <dir_sdi+0xfa>
2400e0a4:	2b01      	cmp	r3, #1
2400e0a6:	d133      	bne.n	2400e110 <dir_sdi+0xac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e0a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400e0aa:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e0ae:	4638      	mov	r0, r7
2400e0b0:	eb01 215a 	add.w	r1, r1, sl, lsr #9
2400e0b4:	f7ff fa38 	bl	2400d528 <move_window>
2400e0b8:	2800      	cmp	r0, #0
2400e0ba:	d14d      	bne.n	2400e158 <dir_sdi+0xf4>
			wc = fs->win[bc++ % SS(fs)];
2400e0bc:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e0c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400e0c2:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e0c6:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
2400e0c8:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e0ca:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400e0ce:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400e0d2:	f7ff fa29 	bl	2400d528 <move_window>
2400e0d6:	2800      	cmp	r0, #0
2400e0d8:	d13e      	bne.n	2400e158 <dir_sdi+0xf4>
			wc |= fs->win[bc % SS(fs)] << 8;
2400e0da:	f3ca 0a08 	ubfx	sl, sl, #0, #9
2400e0de:	44ba      	add	sl, r7
2400e0e0:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
2400e0e4:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400e0e8:	07eb      	lsls	r3, r5, #31
2400e0ea:	bf4c      	ite	mi
2400e0ec:	ea4f 151b 	movmi.w	r5, fp, lsr #4
2400e0f0:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
2400e0f4:	2d01      	cmp	r5, #1
2400e0f6:	d90b      	bls.n	2400e110 <dir_sdi+0xac>
2400e0f8:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e0fc:	42ab      	cmp	r3, r5
2400e0fe:	d907      	bls.n	2400e110 <dir_sdi+0xac>
			ofs -= csz;
2400e100:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
2400e104:	45a1      	cmp	r9, r4
2400e106:	d84a      	bhi.n	2400e19e <dir_sdi+0x13a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
2400e108:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400e10a:	69bb      	ldr	r3, [r7, #24]
2400e10c:	42ab      	cmp	r3, r5
2400e10e:	d8c4      	bhi.n	2400e09a <dir_sdi+0x36>
		switch (fs->fs_type) {
2400e110:	2002      	movs	r0, #2
}
2400e112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
2400e116:	f898 3000 	ldrb.w	r3, [r8]
2400e11a:	2b02      	cmp	r3, #2
2400e11c:	d816      	bhi.n	2400e14c <dir_sdi+0xe8>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
2400e11e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
2400e122:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
2400e126:	d9f3      	bls.n	2400e110 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
2400e128:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
2400e12c:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400e130:	2b00      	cmp	r3, #0
2400e132:	d0ed      	beq.n	2400e110 <dir_sdi+0xac>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400e134:	f108 0834 	add.w	r8, r8, #52	; 0x34
2400e138:	f3c4 0108 	ubfx	r1, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
2400e13c:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	return FR_OK;
2400e140:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
2400e142:	4441      	add	r1, r8
2400e144:	e9c6 3107 	strd	r3, r1, [r6, #28]
}
2400e148:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
2400e14c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
2400e150:	2b00      	cmp	r3, #0
2400e152:	d0e4      	beq.n	2400e11e <dir_sdi+0xba>
2400e154:	461d      	mov	r5, r3
2400e156:	e794      	b.n	2400e082 <dir_sdi+0x1e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400e158:	2001      	movs	r0, #1
}
2400e15a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400e15e:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400e160:	4638      	mov	r0, r7
2400e162:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
2400e166:	f7ff f9df 	bl	2400d528 <move_window>
2400e16a:	2800      	cmp	r0, #0
2400e16c:	d1f4      	bne.n	2400e158 <dir_sdi+0xf4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e16e:	00ab      	lsls	r3, r5, #2
2400e170:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400e174:	443b      	add	r3, r7
2400e176:	6b5d      	ldr	r5, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400e178:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
2400e17c:	e7ba      	b.n	2400e0f4 <dir_sdi+0x90>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400e17e:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400e180:	4638      	mov	r0, r7
2400e182:	eb01 2115 	add.w	r1, r1, r5, lsr #8
2400e186:	f7ff f9cf 	bl	2400d528 <move_window>
2400e18a:	2800      	cmp	r0, #0
2400e18c:	d1e4      	bne.n	2400e158 <dir_sdi+0xf4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400e18e:	006b      	lsls	r3, r5, #1
2400e190:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400e194:	443b      	add	r3, r7
2400e196:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
			break;
2400e198:	e7ac      	b.n	2400e0f4 <dir_sdi+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e19a:	f8d8 3018 	ldr.w	r3, [r8, #24]
2400e19e:	3b02      	subs	r3, #2
	clst -= 2;
2400e1a0:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e1a2:	429a      	cmp	r2, r3
2400e1a4:	d206      	bcs.n	2400e1b4 <dir_sdi+0x150>
	return clst * fs->csize + fs->database;
2400e1a6:	f8b8 100a 	ldrh.w	r1, [r8, #10]
2400e1aa:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
2400e1ae:	fb02 3301 	mla	r3, r2, r1, r3
2400e1b2:	e7bb      	b.n	2400e12c <dir_sdi+0xc8>
		dp->sect = fs->dirbase;
2400e1b4:	2300      	movs	r3, #0
2400e1b6:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
2400e1ba:	e7a9      	b.n	2400e110 <dir_sdi+0xac>

2400e1bc <dir_remove>:
{
2400e1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
2400e1c0:	6b01      	ldr	r1, [r0, #48]	; 0x30
{
2400e1c2:	b083      	sub	sp, #12
2400e1c4:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400e1c6:	6806      	ldr	r6, [r0, #0]
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
2400e1c8:	1c4a      	adds	r2, r1, #1
	DWORD last = dp->dptr;
2400e1ca:	f8d0 9014 	ldr.w	r9, [r0, #20]
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
2400e1ce:	f040 8086 	bne.w	2400e2de <dir_remove+0x122>
			res = move_window(fs, dp->sect);
2400e1d2:	69e7      	ldr	r7, [r4, #28]
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400e1d4:	f04f 0b01 	mov.w	fp, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e1d8:	f106 0834 	add.w	r8, r6, #52	; 0x34
				dp->dir[DIR_Name] = DDEM;
2400e1dc:	f04f 0ae5 	mov.w	sl, #229	; 0xe5
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e1e0:	6b32      	ldr	r2, [r6, #48]	; 0x30
2400e1e2:	42ba      	cmp	r2, r7
2400e1e4:	d011      	beq.n	2400e20a <dir_remove+0x4e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e1e6:	78f3      	ldrb	r3, [r6, #3]
2400e1e8:	2b00      	cmp	r3, #0
2400e1ea:	d131      	bne.n	2400e250 <dir_remove+0x94>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400e1ec:	2301      	movs	r3, #1
2400e1ee:	463a      	mov	r2, r7
2400e1f0:	4641      	mov	r1, r8
2400e1f2:	7870      	ldrb	r0, [r6, #1]
2400e1f4:	f7fe ffde 	bl	2400d1b4 <disk_read>
2400e1f8:	b130      	cbz	r0, 2400e208 <dir_remove+0x4c>
			fs->winsect = sector;
2400e1fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400e1fe:	2001      	movs	r0, #1
			fs->winsect = sector;
2400e200:	6333      	str	r3, [r6, #48]	; 0x30
}
2400e202:	b003      	add	sp, #12
2400e204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400e208:	6337      	str	r7, [r6, #48]	; 0x30
				dp->dir[DIR_Name] = DDEM;
2400e20a:	6a23      	ldr	r3, [r4, #32]
2400e20c:	f883 a000 	strb.w	sl, [r3]
			fs->wflag = 1;
2400e210:	f886 b003 	strb.w	fp, [r6, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
2400e214:	6965      	ldr	r5, [r4, #20]
2400e216:	454d      	cmp	r5, r9
2400e218:	d267      	bcs.n	2400e2ea <dir_remove+0x12e>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e21a:	69e7      	ldr	r7, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e21c:	3520      	adds	r5, #32
	FATFS *fs = dp->obj.fs;
2400e21e:	6823      	ldr	r3, [r4, #0]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e220:	b197      	cbz	r7, 2400e248 <dir_remove+0x8c>
2400e222:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400e226:	d20f      	bcs.n	2400e248 <dir_remove+0x8c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e228:	f3c5 0208 	ubfx	r2, r5, #0, #9
2400e22c:	b93a      	cbnz	r2, 2400e23e <dir_remove+0x82>
		dp->sect++;				/* Next sector */
2400e22e:	3701      	adds	r7, #1
		if (!dp->clust) {		/* Static table */
2400e230:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400e232:	61e7      	str	r7, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400e234:	b9b1      	cbnz	r1, 2400e264 <dir_remove+0xa8>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400e236:	8919      	ldrh	r1, [r3, #8]
2400e238:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
2400e23c:	d94b      	bls.n	2400e2d6 <dir_remove+0x11a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e23e:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400e240:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e242:	4413      	add	r3, r2
2400e244:	6223      	str	r3, [r4, #32]
		} while (res == FR_OK);
2400e246:	e7cb      	b.n	2400e1e0 <dir_remove+0x24>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
2400e248:	2002      	movs	r0, #2
}
2400e24a:	b003      	add	sp, #12
2400e24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e250:	2301      	movs	r3, #1
2400e252:	4641      	mov	r1, r8
2400e254:	7870      	ldrb	r0, [r6, #1]
2400e256:	9200      	str	r2, [sp, #0]
2400e258:	f7fe ffbc 	bl	2400d1d4 <disk_write>
2400e25c:	9a00      	ldr	r2, [sp, #0]
2400e25e:	b300      	cbz	r0, 2400e2a2 <dir_remove+0xe6>
				res = FR_DISK_ERR;
2400e260:	2001      	movs	r0, #1
2400e262:	e7ce      	b.n	2400e202 <dir_remove+0x46>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400e264:	8958      	ldrh	r0, [r3, #10]
2400e266:	3801      	subs	r0, #1
2400e268:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
2400e26c:	d1e7      	bne.n	2400e23e <dir_remove+0x82>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400e26e:	4618      	mov	r0, r3
2400e270:	9201      	str	r2, [sp, #4]
2400e272:	9300      	str	r3, [sp, #0]
2400e274:	f7ff fb8e 	bl	2400d994 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e278:	2801      	cmp	r0, #1
2400e27a:	d9e5      	bls.n	2400e248 <dir_remove+0x8c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400e27c:	1c43      	adds	r3, r0, #1
2400e27e:	d0ef      	beq.n	2400e260 <dir_remove+0xa4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400e280:	9b00      	ldr	r3, [sp, #0]
2400e282:	6999      	ldr	r1, [r3, #24]
2400e284:	4288      	cmp	r0, r1
2400e286:	d226      	bcs.n	2400e2d6 <dir_remove+0x11a>
				dp->clust = clst;		/* Initialize data for new cluster */
2400e288:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400e28a:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e28c:	6999      	ldr	r1, [r3, #24]
2400e28e:	9a01      	ldr	r2, [sp, #4]
2400e290:	3902      	subs	r1, #2
2400e292:	4288      	cmp	r0, r1
2400e294:	d22b      	bcs.n	2400e2ee <dir_remove+0x132>
	return clst * fs->csize + fs->database;
2400e296:	8959      	ldrh	r1, [r3, #10]
2400e298:	6adf      	ldr	r7, [r3, #44]	; 0x2c
2400e29a:	fb00 7701 	mla	r7, r0, r1, r7
				dp->sect = clust2sect(fs, clst);
2400e29e:	61e7      	str	r7, [r4, #28]
2400e2a0:	e7cd      	b.n	2400e23e <dir_remove+0x82>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e2a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
2400e2a4:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e2a6:	1ad1      	subs	r1, r2, r3
2400e2a8:	69f3      	ldr	r3, [r6, #28]
2400e2aa:	4299      	cmp	r1, r3
2400e2ac:	d29e      	bcs.n	2400e1ec <dir_remove+0x30>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e2ae:	78b5      	ldrb	r5, [r6, #2]
2400e2b0:	2d01      	cmp	r5, #1
2400e2b2:	d99b      	bls.n	2400e1ec <dir_remove+0x30>
2400e2b4:	9400      	str	r4, [sp, #0]
2400e2b6:	462c      	mov	r4, r5
2400e2b8:	4615      	mov	r5, r2
2400e2ba:	e000      	b.n	2400e2be <dir_remove+0x102>
					wsect += fs->fsize;
2400e2bc:	69f3      	ldr	r3, [r6, #28]
2400e2be:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e2c0:	3c01      	subs	r4, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400e2c2:	2301      	movs	r3, #1
2400e2c4:	4641      	mov	r1, r8
2400e2c6:	462a      	mov	r2, r5
2400e2c8:	7870      	ldrb	r0, [r6, #1]
2400e2ca:	f7fe ff83 	bl	2400d1d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e2ce:	2c01      	cmp	r4, #1
2400e2d0:	d1f4      	bne.n	2400e2bc <dir_remove+0x100>
2400e2d2:	9c00      	ldr	r4, [sp, #0]
2400e2d4:	e78a      	b.n	2400e1ec <dir_remove+0x30>
				dp->sect = 0; return FR_NO_FILE;
2400e2d6:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_INT_ERR;
2400e2d8:	2002      	movs	r0, #2
				dp->sect = 0; return FR_NO_FILE;
2400e2da:	61e3      	str	r3, [r4, #28]
		} while (res == FR_OK);
2400e2dc:	e791      	b.n	2400e202 <dir_remove+0x46>
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
2400e2de:	f7ff fec1 	bl	2400e064 <dir_sdi>
	if (res == FR_OK) {
2400e2e2:	2800      	cmp	r0, #0
2400e2e4:	f43f af75 	beq.w	2400e1d2 <dir_remove+0x16>
2400e2e8:	e78b      	b.n	2400e202 <dir_remove+0x46>
			res = move_window(fs, dp->sect);
2400e2ea:	2000      	movs	r0, #0
2400e2ec:	e789      	b.n	2400e202 <dir_remove+0x46>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e2ee:	2700      	movs	r7, #0
2400e2f0:	e7d5      	b.n	2400e29e <dir_remove+0xe2>
2400e2f2:	bf00      	nop

2400e2f4 <dir_find>:
{
2400e2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400e2f8:	2100      	movs	r1, #0
{
2400e2fa:	b085      	sub	sp, #20
2400e2fc:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400e2fe:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
2400e302:	f7ff feaf 	bl	2400e064 <dir_sdi>
	if (res != FR_OK) return res;
2400e306:	4607      	mov	r7, r0
2400e308:	b9e8      	cbnz	r0, 2400e346 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400e30a:	f04f 09ff 	mov.w	r9, #255	; 0xff
2400e30e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
2400e312:	69e6      	ldr	r6, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400e314:	464f      	mov	r7, r9
2400e316:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
2400e318:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
2400e31c:	42b5      	cmp	r5, r6
2400e31e:	d018      	beq.n	2400e352 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e320:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e324:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400e328:	2b00      	cmp	r3, #0
2400e32a:	f040 8085 	bne.w	2400e438 <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400e32e:	2301      	movs	r3, #1
2400e330:	4632      	mov	r2, r6
2400e332:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e336:	f7fe ff3d 	bl	2400d1b4 <disk_read>
2400e33a:	b140      	cbz	r0, 2400e34e <dir_find+0x5a>
			fs->winsect = sector;
2400e33c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
2400e340:	2701      	movs	r7, #1
			fs->winsect = sector;
2400e342:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
2400e346:	4638      	mov	r0, r7
2400e348:	b005      	add	sp, #20
2400e34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
2400e34e:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
2400e352:	6a25      	ldr	r5, [r4, #32]
2400e354:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400e356:	b346      	cbz	r6, 2400e3aa <dir_find+0xb6>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400e358:	7aeb      	ldrb	r3, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400e35a:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2400e35c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2400e360:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2400e362:	d004      	beq.n	2400e36e <dir_find+0x7a>
2400e364:	071b      	lsls	r3, r3, #28
2400e366:	d525      	bpl.n	2400e3b4 <dir_find+0xc0>
2400e368:	2a0f      	cmp	r2, #15
2400e36a:	f000 8093 	beq.w	2400e494 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2400e36e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
2400e372:	27ff      	movs	r7, #255	; 0xff
2400e374:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e376:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
2400e378:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e37a:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e37c:	69e6      	ldr	r6, [r4, #28]
2400e37e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400e382:	d212      	bcs.n	2400e3aa <dir_find+0xb6>
2400e384:	b18e      	cbz	r6, 2400e3aa <dir_find+0xb6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e386:	f3c5 0208 	ubfx	r2, r5, #0, #9
2400e38a:	b94a      	cbnz	r2, 2400e3a0 <dir_find+0xac>
		dp->sect++;				/* Next sector */
2400e38c:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
2400e38e:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
2400e390:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
2400e392:	2900      	cmp	r1, #0
2400e394:	d15c      	bne.n	2400e450 <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400e396:	8919      	ldrh	r1, [r3, #8]
2400e398:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
2400e39c:	f240 813a 	bls.w	2400e614 <dir_find+0x320>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e3a0:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
2400e3a2:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e3a4:	4413      	add	r3, r2
2400e3a6:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
2400e3a8:	e7b6      	b.n	2400e318 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400e3aa:	2704      	movs	r7, #4
}
2400e3ac:	4638      	mov	r0, r7
2400e3ae:	b005      	add	sp, #20
2400e3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
2400e3b4:	2a0f      	cmp	r2, #15
2400e3b6:	d06d      	beq.n	2400e494 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400e3b8:	2f00      	cmp	r7, #0
2400e3ba:	f000 80d9 	beq.w	2400e570 <dir_find+0x27c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400e3be:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
2400e3c2:	f017 0701 	ands.w	r7, r7, #1
2400e3c6:	d1d2      	bne.n	2400e36e <dir_find+0x7a>
	} while (--cnt && r == 0);
2400e3c8:	782a      	ldrb	r2, [r5, #0]
2400e3ca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
2400e3ce:	429a      	cmp	r2, r3
2400e3d0:	d1cd      	bne.n	2400e36e <dir_find+0x7a>
2400e3d2:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400e3d6:	786b      	ldrb	r3, [r5, #1]
2400e3d8:	429a      	cmp	r2, r3
2400e3da:	d1c8      	bne.n	2400e36e <dir_find+0x7a>
2400e3dc:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400e3e0:	78ab      	ldrb	r3, [r5, #2]
2400e3e2:	429a      	cmp	r2, r3
2400e3e4:	d1c3      	bne.n	2400e36e <dir_find+0x7a>
2400e3e6:	78ea      	ldrb	r2, [r5, #3]
2400e3e8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
2400e3ec:	429a      	cmp	r2, r3
2400e3ee:	d1be      	bne.n	2400e36e <dir_find+0x7a>
2400e3f0:	792a      	ldrb	r2, [r5, #4]
2400e3f2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
2400e3f6:	429a      	cmp	r2, r3
2400e3f8:	d1b9      	bne.n	2400e36e <dir_find+0x7a>
2400e3fa:	796a      	ldrb	r2, [r5, #5]
2400e3fc:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
2400e400:	429a      	cmp	r2, r3
2400e402:	d1b4      	bne.n	2400e36e <dir_find+0x7a>
2400e404:	79aa      	ldrb	r2, [r5, #6]
2400e406:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400e40a:	429a      	cmp	r2, r3
2400e40c:	d1af      	bne.n	2400e36e <dir_find+0x7a>
2400e40e:	79ea      	ldrb	r2, [r5, #7]
2400e410:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
2400e414:	429a      	cmp	r2, r3
2400e416:	d1aa      	bne.n	2400e36e <dir_find+0x7a>
2400e418:	7a2a      	ldrb	r2, [r5, #8]
2400e41a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400e41e:	429a      	cmp	r2, r3
2400e420:	d1a5      	bne.n	2400e36e <dir_find+0x7a>
2400e422:	7a6a      	ldrb	r2, [r5, #9]
2400e424:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
2400e428:	429a      	cmp	r2, r3
2400e42a:	d1a0      	bne.n	2400e36e <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2400e42c:	7aaa      	ldrb	r2, [r5, #10]
2400e42e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
2400e432:	429a      	cmp	r2, r3
2400e434:	d19b      	bne.n	2400e36e <dir_find+0x7a>
2400e436:	e786      	b.n	2400e346 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e438:	2301      	movs	r3, #1
2400e43a:	462a      	mov	r2, r5
2400e43c:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e440:	9100      	str	r1, [sp, #0]
2400e442:	f7fe fec7 	bl	2400d1d4 <disk_write>
2400e446:	9900      	ldr	r1, [sp, #0]
2400e448:	2800      	cmp	r0, #0
2400e44a:	d06e      	beq.n	2400e52a <dir_find+0x236>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2400e44c:	2701      	movs	r7, #1
2400e44e:	e77a      	b.n	2400e346 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400e450:	8958      	ldrh	r0, [r3, #10]
2400e452:	3801      	subs	r0, #1
2400e454:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
2400e458:	d1a2      	bne.n	2400e3a0 <dir_find+0xac>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400e45a:	4618      	mov	r0, r3
2400e45c:	9201      	str	r2, [sp, #4]
2400e45e:	9300      	str	r3, [sp, #0]
2400e460:	f7ff fa98 	bl	2400d994 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e464:	2801      	cmp	r0, #1
2400e466:	f240 80d9 	bls.w	2400e61c <dir_find+0x328>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400e46a:	1c43      	adds	r3, r0, #1
2400e46c:	d0ee      	beq.n	2400e44c <dir_find+0x158>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400e46e:	9b00      	ldr	r3, [sp, #0]
2400e470:	6999      	ldr	r1, [r3, #24]
2400e472:	4288      	cmp	r0, r1
2400e474:	f080 80ce 	bcs.w	2400e614 <dir_find+0x320>
				dp->clust = clst;		/* Initialize data for new cluster */
2400e478:	61a0      	str	r0, [r4, #24]
	clst -= 2;
2400e47a:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e47c:	6999      	ldr	r1, [r3, #24]
2400e47e:	9a01      	ldr	r2, [sp, #4]
2400e480:	3902      	subs	r1, #2
2400e482:	4288      	cmp	r0, r1
2400e484:	f080 80cc 	bcs.w	2400e620 <dir_find+0x32c>
	return clst * fs->csize + fs->database;
2400e488:	8959      	ldrh	r1, [r3, #10]
2400e48a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
2400e48c:	fb00 6601 	mla	r6, r0, r1, r6
				dp->sect = clust2sect(fs, clst);
2400e490:	61e6      	str	r6, [r4, #28]
2400e492:	e785      	b.n	2400e3a0 <dir_find+0xac>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2400e494:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400e498:	0658      	lsls	r0, r3, #25
2400e49a:	f53f af6c 	bmi.w	2400e376 <dir_find+0x82>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
2400e49e:	0671      	lsls	r1, r6, #25
2400e4a0:	f140 80b3 	bpl.w	2400e60a <dir_find+0x316>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400e4a4:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2400e4a6:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
2400e4aa:	f895 900d 	ldrb.w	r9, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2400e4ae:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e4b0:	7b6b      	ldrb	r3, [r5, #13]
2400e4b2:	454b      	cmp	r3, r9
2400e4b4:	f040 80ac 	bne.w	2400e610 <dir_find+0x31c>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
2400e4b8:	8b6b      	ldrh	r3, [r5, #26]
2400e4ba:	2b00      	cmp	r3, #0
2400e4bc:	f040 80a8 	bne.w	2400e610 <dir_find+0x31c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400e4c0:	782f      	ldrb	r7, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400e4c2:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e4c4:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400e4c8:	f007 073f 	and.w	r7, r7, #63	; 0x3f
2400e4cc:	f8df a178 	ldr.w	sl, [pc, #376]	; 2400e648 <dir_find+0x354>
2400e4d0:	9602      	str	r6, [sp, #8]
2400e4d2:	462e      	mov	r6, r5
2400e4d4:	3f01      	subs	r7, #1
2400e4d6:	f10a 0b0d 	add.w	fp, sl, #13
2400e4da:	4615      	mov	r5, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e4dc:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
2400e4de:	eb07 0347 	add.w	r3, r7, r7, lsl #1
2400e4e2:	f8cd 8000 	str.w	r8, [sp]
2400e4e6:	9401      	str	r4, [sp, #4]
2400e4e8:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400e4ec:	e010      	b.n	2400e510 <dir_find+0x21c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
2400e4ee:	2ffe      	cmp	r7, #254	; 0xfe
2400e4f0:	4620      	mov	r0, r4
2400e4f2:	d816      	bhi.n	2400e522 <dir_find+0x22e>
2400e4f4:	f001 fec8 	bl	24010288 <ff_wtoupper>
2400e4f8:	4680      	mov	r8, r0
2400e4fa:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
2400e4fe:	3701      	adds	r7, #1
2400e500:	f001 fec2 	bl	24010288 <ff_wtoupper>
2400e504:	4580      	cmp	r8, r0
2400e506:	4621      	mov	r1, r4
2400e508:	d10b      	bne.n	2400e522 <dir_find+0x22e>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
2400e50a:	45d3      	cmp	fp, sl
2400e50c:	f000 808a 	beq.w	2400e624 <dir_find+0x330>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
2400e510:	f81a 3b01 	ldrb.w	r3, [sl], #1
2400e514:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
2400e516:	2900      	cmp	r1, #0
2400e518:	d1e9      	bne.n	2400e4ee <dir_find+0x1fa>
			if (uc != 0xFFFF) return 0;		/* Check filler */
2400e51a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2400e51e:	429c      	cmp	r4, r3
2400e520:	d0f3      	beq.n	2400e50a <dir_find+0x216>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e522:	e9dd 8400 	ldrd	r8, r4, [sp]
2400e526:	27ff      	movs	r7, #255	; 0xff
2400e528:	e725      	b.n	2400e376 <dir_find+0x82>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e52a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
2400e52e:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400e532:	1aea      	subs	r2, r5, r3
2400e534:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400e538:	429a      	cmp	r2, r3
2400e53a:	f4bf aef8 	bcs.w	2400e32e <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e53e:	f898 a002 	ldrb.w	sl, [r8, #2]
2400e542:	f1ba 0f01 	cmp.w	sl, #1
2400e546:	f67f aef2 	bls.w	2400e32e <dir_find+0x3a>
2400e54a:	468b      	mov	fp, r1
2400e54c:	e001      	b.n	2400e552 <dir_find+0x25e>
					wsect += fs->fsize;
2400e54e:	f8d8 301c 	ldr.w	r3, [r8, #28]
2400e552:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e554:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400e558:	2301      	movs	r3, #1
2400e55a:	4659      	mov	r1, fp
2400e55c:	462a      	mov	r2, r5
2400e55e:	f898 0001 	ldrb.w	r0, [r8, #1]
2400e562:	f7fe fe37 	bl	2400d1d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400e566:	f1ba 0f01 	cmp.w	sl, #1
2400e56a:	d1f0      	bne.n	2400e54e <dir_find+0x25a>
2400e56c:	4659      	mov	r1, fp
2400e56e:	e6de      	b.n	2400e32e <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400e570:	782a      	ldrb	r2, [r5, #0]
2400e572:	7869      	ldrb	r1, [r5, #1]
2400e574:	01d0      	lsls	r0, r2, #7
2400e576:	78ae      	ldrb	r6, [r5, #2]
2400e578:	78eb      	ldrb	r3, [r5, #3]
2400e57a:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
2400e57e:	792a      	ldrb	r2, [r5, #4]
2400e580:	f895 a005 	ldrb.w	sl, [r5, #5]
2400e584:	4408      	add	r0, r1
2400e586:	f895 e006 	ldrb.w	lr, [r5, #6]
2400e58a:	f895 c007 	ldrb.w	ip, [r5, #7]
2400e58e:	f3c0 0146 	ubfx	r1, r0, #1, #7
2400e592:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
2400e596:	7a68      	ldrb	r0, [r5, #9]
2400e598:	fa56 f181 	uxtab	r1, r6, r1
2400e59c:	7a2e      	ldrb	r6, [r5, #8]
2400e59e:	f3c1 0b46 	ubfx	fp, r1, #1, #7
2400e5a2:	ea4b 1bc1 	orr.w	fp, fp, r1, lsl #7
2400e5a6:	7aa9      	ldrb	r1, [r5, #10]
2400e5a8:	fa53 fb8b 	uxtab	fp, r3, fp
2400e5ac:	f3cb 0346 	ubfx	r3, fp, #1, #7
2400e5b0:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
2400e5b4:	fa52 f383 	uxtab	r3, r2, r3
2400e5b8:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e5bc:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e5c0:	fa5a f282 	uxtab	r2, sl, r2
2400e5c4:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e5c8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e5cc:	fa5e f383 	uxtab	r3, lr, r3
2400e5d0:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e5d4:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e5d8:	fa5c f282 	uxtab	r2, ip, r2
2400e5dc:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e5e0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e5e4:	fa56 f383 	uxtab	r3, r6, r3
2400e5e8:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400e5ec:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400e5f0:	fa50 f282 	uxtab	r2, r0, r2
2400e5f4:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400e5f8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400e5fc:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2400e600:	b2db      	uxtb	r3, r3
2400e602:	4599      	cmp	r9, r3
2400e604:	f47f aedb 	bne.w	2400e3be <dir_find+0xca>
2400e608:	e69d      	b.n	2400e346 <dir_find+0x52>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e60a:	42b7      	cmp	r7, r6
2400e60c:	f43f af50 	beq.w	2400e4b0 <dir_find+0x1bc>
2400e610:	27ff      	movs	r7, #255	; 0xff
2400e612:	e6b0      	b.n	2400e376 <dir_find+0x82>
				dp->sect = 0; return FR_NO_FILE;
2400e614:	2300      	movs	r3, #0
2400e616:	2704      	movs	r7, #4
2400e618:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
2400e61a:	e694      	b.n	2400e346 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e61c:	2702      	movs	r7, #2
2400e61e:	e692      	b.n	2400e346 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e620:	4616      	mov	r6, r2
2400e622:	e735      	b.n	2400e490 <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400e624:	4635      	mov	r5, r6
2400e626:	f8dd 8000 	ldr.w	r8, [sp]
2400e62a:	782b      	ldrb	r3, [r5, #0]
2400e62c:	065a      	lsls	r2, r3, #25
2400e62e:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
2400e632:	d500      	bpl.n	2400e636 <dir_find+0x342>
2400e634:	b911      	cbnz	r1, 2400e63c <dir_find+0x348>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
2400e636:	3e01      	subs	r6, #1
2400e638:	b2f7      	uxtb	r7, r6
2400e63a:	e69c      	b.n	2400e376 <dir_find+0x82>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
2400e63c:	9b03      	ldr	r3, [sp, #12]
2400e63e:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
2400e642:	2b00      	cmp	r3, #0
2400e644:	d0f7      	beq.n	2400e636 <dir_find+0x342>
2400e646:	e7e3      	b.n	2400e610 <dir_find+0x31c>
2400e648:	2401c8f0 	.word	0x2401c8f0

2400e64c <follow_path>:
{
2400e64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400e650:	780b      	ldrb	r3, [r1, #0]
{
2400e652:	b083      	sub	sp, #12
2400e654:	4688      	mov	r8, r1
2400e656:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400e658:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
2400e65a:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2400e65e:	d103      	bne.n	2400e668 <follow_path+0x1c>
2400e660:	f818 3f01 	ldrb.w	r3, [r8, #1]!
2400e664:	2b2f      	cmp	r3, #47	; 0x2f
2400e666:	d0fb      	beq.n	2400e660 <follow_path+0x14>
2400e668:	2b5c      	cmp	r3, #92	; 0x5c
2400e66a:	d0f9      	beq.n	2400e660 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
2400e66c:	2100      	movs	r1, #0
2400e66e:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2400e670:	f898 3000 	ldrb.w	r3, [r8]
2400e674:	2b1f      	cmp	r3, #31
2400e676:	f240 8147 	bls.w	2400e908 <follow_path+0x2bc>
2400e67a:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
2400e67c:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400e67e:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
2400e680:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
2400e682:	d929      	bls.n	2400e6d8 <follow_path+0x8c>
2400e684:	f1a5 0902 	sub.w	r9, r5, #2
2400e688:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
2400e68a:	2401      	movs	r4, #1
2400e68c:	e008      	b.n	2400e6a0 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
2400e68e:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
2400e692:	1c63      	adds	r3, r4, #1
2400e694:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
2400e698:	281f      	cmp	r0, #31
2400e69a:	f240 80f6 	bls.w	2400e88a <follow_path+0x23e>
		w = p[si++];					/* Get a character */
2400e69e:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2400e6a0:	282f      	cmp	r0, #47	; 0x2f
2400e6a2:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
2400e6a6:	d01d      	beq.n	2400e6e4 <follow_path+0x98>
2400e6a8:	285c      	cmp	r0, #92	; 0x5c
2400e6aa:	d01b      	beq.n	2400e6e4 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2400e6ac:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
2400e6b0:	d00e      	beq.n	2400e6d0 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2400e6b2:	2101      	movs	r1, #1
2400e6b4:	f001 fdca 	bl	2401024c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2400e6b8:	b150      	cbz	r0, 2400e6d0 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
2400e6ba:	287f      	cmp	r0, #127	; 0x7f
2400e6bc:	d8e7      	bhi.n	2400e68e <follow_path+0x42>
	while (*str && *str != chr) str++;
2400e6be:	2322      	movs	r3, #34	; 0x22
2400e6c0:	4aa5      	ldr	r2, [pc, #660]	; (2400e958 <follow_path+0x30c>)
2400e6c2:	e003      	b.n	2400e6cc <follow_path+0x80>
2400e6c4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
2400e6c8:	2b00      	cmp	r3, #0
2400e6ca:	d0e0      	beq.n	2400e68e <follow_path+0x42>
2400e6cc:	4298      	cmp	r0, r3
2400e6ce:	d1f9      	bne.n	2400e6c4 <follow_path+0x78>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400e6d0:	2006      	movs	r0, #6
}
2400e6d2:	b003      	add	sp, #12
2400e6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
2400e6d8:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2400e6da:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
2400e6dc:	802b      	strh	r3, [r5, #0]
}
2400e6de:	b003      	add	sp, #12
2400e6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400e6e4:	f818 3004 	ldrb.w	r3, [r8, r4]
2400e6e8:	eb08 0204 	add.w	r2, r8, r4
2400e6ec:	2b2f      	cmp	r3, #47	; 0x2f
2400e6ee:	d002      	beq.n	2400e6f6 <follow_path+0xaa>
2400e6f0:	2b5c      	cmp	r3, #92	; 0x5c
2400e6f2:	f040 811e 	bne.w	2400e932 <follow_path+0x2e6>
2400e6f6:	1c63      	adds	r3, r4, #1
2400e6f8:	4443      	add	r3, r8
2400e6fa:	4698      	mov	r8, r3
2400e6fc:	f813 2b01 	ldrb.w	r2, [r3], #1
2400e700:	2a2f      	cmp	r2, #47	; 0x2f
2400e702:	d0fa      	beq.n	2400e6fa <follow_path+0xae>
2400e704:	2a5c      	cmp	r2, #92	; 0x5c
2400e706:	d0f8      	beq.n	2400e6fa <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400e708:	f1ba 0f00 	cmp.w	sl, #0
2400e70c:	d0e4      	beq.n	2400e6d8 <follow_path+0x8c>
2400e70e:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400e710:	2400      	movs	r4, #0
2400e712:	eb05 024a 	add.w	r2, r5, sl, lsl #1
2400e716:	e002      	b.n	2400e71e <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
2400e718:	f1ba 0a01 	subs.w	sl, sl, #1
2400e71c:	d0dc      	beq.n	2400e6d8 <follow_path+0x8c>
		w = lfn[di - 1];
2400e71e:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
2400e722:	2b20      	cmp	r3, #32
2400e724:	d0f8      	beq.n	2400e718 <follow_path+0xcc>
2400e726:	2b2e      	cmp	r3, #46	; 0x2e
2400e728:	d0f6      	beq.n	2400e718 <follow_path+0xcc>
		*d++ = (BYTE)val;
2400e72a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
2400e72e:	2100      	movs	r1, #0
		*d++ = (BYTE)val;
2400e730:	f242 0220 	movw	r2, #8224	; 0x2020
	lfn[di] = 0;						/* LFN is created */
2400e734:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
2400e738:	627b      	str	r3, [r7, #36]	; 0x24
2400e73a:	62bb      	str	r3, [r7, #40]	; 0x28
2400e73c:	2320      	movs	r3, #32
2400e73e:	85ba      	strh	r2, [r7, #44]	; 0x2c
2400e740:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400e744:	8828      	ldrh	r0, [r5, #0]
2400e746:	282e      	cmp	r0, #46	; 0x2e
2400e748:	d002      	beq.n	2400e750 <follow_path+0x104>
2400e74a:	4298      	cmp	r0, r3
2400e74c:	f040 80e5 	bne.w	2400e91a <follow_path+0x2ce>
2400e750:	462a      	mov	r2, r5
2400e752:	2300      	movs	r3, #0
2400e754:	f832 0f02 	ldrh.w	r0, [r2, #2]!
2400e758:	461c      	mov	r4, r3
2400e75a:	3301      	adds	r3, #1
2400e75c:	2820      	cmp	r0, #32
2400e75e:	d0f9      	beq.n	2400e754 <follow_path+0x108>
2400e760:	282e      	cmp	r0, #46	; 0x2e
2400e762:	d0f7      	beq.n	2400e754 <follow_path+0x108>
		w = lfn[si++];					/* Get an LFN character */
2400e764:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2400e766:	eb05 034a 	add.w	r3, r5, sl, lsl #1
2400e76a:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
2400e76e:	2a2e      	cmp	r2, #46	; 0x2e
2400e770:	d002      	beq.n	2400e778 <follow_path+0x12c>
2400e772:	f1ba 0a01 	subs.w	sl, sl, #1
2400e776:	d1f8      	bne.n	2400e76a <follow_path+0x11e>
		if (!w) break;					/* Break on end of the LFN */
2400e778:	b3b0      	cbz	r0, 2400e7e8 <follow_path+0x19c>
2400e77a:	2208      	movs	r2, #8
2400e77c:	4641      	mov	r1, r8
2400e77e:	2300      	movs	r3, #0
2400e780:	46b8      	mov	r8, r7
2400e782:	462f      	mov	r7, r5
2400e784:	4615      	mov	r5, r2
2400e786:	4699      	mov	r9, r3
2400e788:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2400e78a:	2820      	cmp	r0, #32
2400e78c:	d003      	beq.n	2400e796 <follow_path+0x14a>
2400e78e:	282e      	cmp	r0, #46	; 0x2e
2400e790:	d14d      	bne.n	2400e82e <follow_path+0x1e2>
2400e792:	45a2      	cmp	sl, r4
2400e794:	d04b      	beq.n	2400e82e <follow_path+0x1e2>
			cf |= NS_LOSS | NS_LFN; continue;
2400e796:	f046 0603 	orr.w	r6, r6, #3
2400e79a:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
2400e79c:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
2400e7a0:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
2400e7a2:	2800      	cmp	r0, #0
2400e7a4:	d1f1      	bne.n	2400e78a <follow_path+0x13e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400e7a6:	4647      	mov	r7, r8
2400e7a8:	4690      	mov	r8, r2
2400e7aa:	462a      	mov	r2, r5
2400e7ac:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
2400e7b0:	29e5      	cmp	r1, #229	; 0xe5
2400e7b2:	d102      	bne.n	2400e7ba <follow_path+0x16e>
2400e7b4:	2105      	movs	r1, #5
2400e7b6:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400e7ba:	2a08      	cmp	r2, #8
2400e7bc:	f000 8093 	beq.w	2400e8e6 <follow_path+0x29a>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e7c0:	f003 020c 	and.w	r2, r3, #12
2400e7c4:	2a0c      	cmp	r2, #12
2400e7c6:	d065      	beq.n	2400e894 <follow_path+0x248>
2400e7c8:	f003 0303 	and.w	r3, r3, #3
2400e7cc:	2b03      	cmp	r3, #3
2400e7ce:	d061      	beq.n	2400e894 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400e7d0:	07b1      	lsls	r1, r6, #30
2400e7d2:	d409      	bmi.n	2400e7e8 <follow_path+0x19c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2400e7d4:	2b01      	cmp	r3, #1
2400e7d6:	d102      	bne.n	2400e7de <follow_path+0x192>
2400e7d8:	f046 0610 	orr.w	r6, r6, #16
2400e7dc:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2400e7de:	2a04      	cmp	r2, #4
2400e7e0:	d102      	bne.n	2400e7e8 <follow_path+0x19c>
2400e7e2:	f046 0608 	orr.w	r6, r6, #8
2400e7e6:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
2400e7e8:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400e7ea:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400e7ee:	f7ff fd81 	bl	2400e2f4 <dir_find>
			ns = dp->fn[NSFLAG];
2400e7f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400e7f6:	2800      	cmp	r0, #0
2400e7f8:	d158      	bne.n	2400e8ac <follow_path+0x260>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2400e7fa:	075a      	lsls	r2, r3, #29
2400e7fc:	f53f af69 	bmi.w	2400e6d2 <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
2400e800:	79bb      	ldrb	r3, [r7, #6]
2400e802:	06db      	lsls	r3, r3, #27
2400e804:	f140 8097 	bpl.w	2400e936 <follow_path+0x2ea>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e808:	697a      	ldr	r2, [r7, #20]
2400e80a:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
2400e80e:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e812:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
2400e816:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e818:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
2400e81a:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400e81c:	d102      	bne.n	2400e824 <follow_path+0x1d8>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400e81e:	8a9b      	ldrh	r3, [r3, #20]
2400e820:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2400e824:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2400e826:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
2400e828:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
2400e82c:	e726      	b.n	2400e67c <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
2400e82e:	454d      	cmp	r5, r9
2400e830:	d91c      	bls.n	2400e86c <follow_path+0x220>
2400e832:	ebaa 0104 	sub.w	r1, sl, r4
2400e836:	fab1 f181 	clz	r1, r1
2400e83a:	0949      	lsrs	r1, r1, #5
2400e83c:	b9b1      	cbnz	r1, 2400e86c <follow_path+0x220>
		if (w >= 0x80) {				/* Non ASCII character */
2400e83e:	287f      	cmp	r0, #127	; 0x7f
2400e840:	d83c      	bhi.n	2400e8bc <follow_path+0x270>
	while (*str && *str != chr) str++;
2400e842:	212b      	movs	r1, #43	; 0x2b
2400e844:	f8df c118 	ldr.w	ip, [pc, #280]	; 2400e960 <follow_path+0x314>
2400e848:	e003      	b.n	2400e852 <follow_path+0x206>
2400e84a:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
2400e84e:	2900      	cmp	r1, #0
2400e850:	d052      	beq.n	2400e8f8 <follow_path+0x2ac>
2400e852:	4281      	cmp	r1, r0
2400e854:	d1f9      	bne.n	2400e84a <follow_path+0x1fe>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2400e856:	f046 0603 	orr.w	r6, r6, #3
2400e85a:	205f      	movs	r0, #95	; 0x5f
2400e85c:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
2400e85e:	eb08 0109 	add.w	r1, r8, r9
2400e862:	f109 0901 	add.w	r9, r9, #1
2400e866:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
2400e86a:	e797      	b.n	2400e79c <follow_path+0x150>
			if (ni == 11) {				/* Long extension */
2400e86c:	2d0b      	cmp	r5, #11
2400e86e:	d064      	beq.n	2400e93a <follow_path+0x2ee>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2400e870:	45a2      	cmp	sl, r4
2400e872:	d003      	beq.n	2400e87c <follow_path+0x230>
2400e874:	f046 0603 	orr.w	r6, r6, #3
2400e878:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
2400e87a:	d394      	bcc.n	2400e7a6 <follow_path+0x15a>
			b <<= 2; continue;
2400e87c:	009b      	lsls	r3, r3, #2
2400e87e:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
2400e880:	250b      	movs	r5, #11
2400e882:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
2400e886:	b2db      	uxtb	r3, r3
2400e888:	e788      	b.n	2400e79c <follow_path+0x150>
	*path = &p[si];						/* Return pointer to the next segment */
2400e88a:	46a2      	mov	sl, r4
2400e88c:	4498      	add	r8, r3
2400e88e:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2400e890:	2404      	movs	r4, #4
2400e892:	e73e      	b.n	2400e712 <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e894:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
2400e898:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e89a:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
2400e89c:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
2400e8a0:	f7ff fd28 	bl	2400e2f4 <dir_find>
			ns = dp->fn[NSFLAG];
2400e8a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
2400e8a8:	2800      	cmp	r0, #0
2400e8aa:	d0a6      	beq.n	2400e7fa <follow_path+0x1ae>
				if (res == FR_NO_FILE) {	/* Object is not found */
2400e8ac:	2804      	cmp	r0, #4
2400e8ae:	f47f af10 	bne.w	2400e6d2 <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400e8b2:	f013 0f04 	tst.w	r3, #4
2400e8b6:	bf08      	it	eq
2400e8b8:	2005      	moveq	r0, #5
2400e8ba:	e70a      	b.n	2400e6d2 <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2400e8bc:	e9cd 3200 	strd	r3, r2, [sp]
2400e8c0:	f001 fcc4 	bl	2401024c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e8c4:	e9dd 3200 	ldrd	r3, r2, [sp]
2400e8c8:	b918      	cbnz	r0, 2400e8d2 <follow_path+0x286>
			cf |= NS_LFN;				/* Force create LFN entry */
2400e8ca:	f046 0602 	orr.w	r6, r6, #2
2400e8ce:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400e8d0:	e7c1      	b.n	2400e856 <follow_path+0x20a>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e8d2:	4922      	ldr	r1, [pc, #136]	; (2400e95c <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
2400e8d4:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e8d8:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
2400e8da:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2400e8dc:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2400e8e0:	2800      	cmp	r0, #0
2400e8e2:	d0b8      	beq.n	2400e856 <follow_path+0x20a>
2400e8e4:	e7ad      	b.n	2400e842 <follow_path+0x1f6>
	if (ni == 8) b <<= 2;
2400e8e6:	009a      	lsls	r2, r3, #2
2400e8e8:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
2400e8ec:	2a0c      	cmp	r2, #12
2400e8ee:	d0d1      	beq.n	2400e894 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
2400e8f0:	07b0      	lsls	r0, r6, #30
2400e8f2:	f57f af74 	bpl.w	2400e7de <follow_path+0x192>
2400e8f6:	e777      	b.n	2400e7e8 <follow_path+0x19c>
				if (IsUpper(w)) {		/* ASCII large capital */
2400e8f8:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
2400e8fc:	2919      	cmp	r1, #25
2400e8fe:	d80f      	bhi.n	2400e920 <follow_path+0x2d4>
					b |= 2;
2400e900:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
2400e904:	b2c0      	uxtb	r0, r0
2400e906:	e7aa      	b.n	2400e85e <follow_path+0x212>
		dp->fn[NSFLAG] = NS_NONAME;
2400e908:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
2400e90a:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
2400e90c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
2400e910:	b003      	add	sp, #12
2400e912:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
2400e916:	f7ff bba5 	b.w	2400e064 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2400e91a:	4626      	mov	r6, r4
2400e91c:	2401      	movs	r4, #1
2400e91e:	e722      	b.n	2400e766 <follow_path+0x11a>
					if (IsLower(w)) {	/* ASCII small capital */
2400e920:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
2400e924:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
2400e926:	bf9c      	itt	ls
2400e928:	3820      	subls	r0, #32
2400e92a:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
2400e92e:	b2c0      	uxtb	r0, r0
2400e930:	e795      	b.n	2400e85e <follow_path+0x212>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2400e932:	4690      	mov	r8, r2
2400e934:	e6e8      	b.n	2400e708 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2400e936:	2005      	movs	r0, #5
2400e938:	e6cb      	b.n	2400e6d2 <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
2400e93a:	4647      	mov	r7, r8
2400e93c:	4690      	mov	r8, r2
2400e93e:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400e942:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
2400e946:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
2400e948:	2ae5      	cmp	r2, #229	; 0xe5
2400e94a:	f47f af39 	bne.w	2400e7c0 <follow_path+0x174>
2400e94e:	2205      	movs	r2, #5
2400e950:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
2400e954:	e734      	b.n	2400e7c0 <follow_path+0x174>
2400e956:	bf00      	nop
2400e958:	2401c85c 	.word	0x2401c85c
2400e95c:	2401c870 	.word	0x2401c870
2400e960:	2401c868 	.word	0x2401c868

2400e964 <dir_next>:
{
2400e964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e968:	69c3      	ldr	r3, [r0, #28]
{
2400e96a:	b085      	sub	sp, #20
	ofs = dp->dptr + SZDIRE;	/* Next entry */
2400e96c:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e96e:	2b00      	cmp	r3, #0
2400e970:	d03d      	beq.n	2400e9ee <dir_next+0x8a>
2400e972:	3520      	adds	r5, #32
2400e974:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
2400e978:	d239      	bcs.n	2400e9ee <dir_next+0x8a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e97a:	f3c5 0808 	ubfx	r8, r5, #0, #9
2400e97e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
2400e980:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
2400e982:	f1b8 0f00 	cmp.w	r8, #0
2400e986:	d008      	beq.n	2400e99a <dir_next+0x36>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e988:	f107 0634 	add.w	r6, r7, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e98c:	4446      	add	r6, r8
	return FR_OK;
2400e98e:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
2400e990:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
2400e992:	6226      	str	r6, [r4, #32]
}
2400e994:	b005      	add	sp, #20
2400e996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;				/* Next sector */
2400e99a:	460e      	mov	r6, r1
2400e99c:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
2400e99e:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
2400e9a0:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
2400e9a2:	b341      	cbz	r1, 2400e9f6 <dir_next+0x92>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
2400e9a4:	897b      	ldrh	r3, [r7, #10]
2400e9a6:	3b01      	subs	r3, #1
2400e9a8:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
2400e9ac:	9300      	str	r3, [sp, #0]
2400e9ae:	d1eb      	bne.n	2400e988 <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400e9b0:	4638      	mov	r0, r7
2400e9b2:	f7fe ffef 	bl	2400d994 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e9b6:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
2400e9b8:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400e9ba:	d924      	bls.n	2400ea06 <dir_next+0xa2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400e9bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400e9c0:	d023      	beq.n	2400ea0a <dir_next+0xa6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
2400e9c2:	69bb      	ldr	r3, [r7, #24]
2400e9c4:	4283      	cmp	r3, r0
2400e9c6:	d922      	bls.n	2400ea0e <dir_next+0xaa>
	clst -= 2;
2400e9c8:	1e83      	subs	r3, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400e9ca:	f107 0634 	add.w	r6, r7, #52	; 0x34
2400e9ce:	4619      	mov	r1, r3
	clst -= 2;
2400e9d0:	9301      	str	r3, [sp, #4]
				dp->clust = clst;		/* Initialize data for new cluster */
2400e9d2:	f8c4 9018 	str.w	r9, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400e9d6:	69bb      	ldr	r3, [r7, #24]
2400e9d8:	3b02      	subs	r3, #2
2400e9da:	428b      	cmp	r3, r1
2400e9dc:	d904      	bls.n	2400e9e8 <dir_next+0x84>
	return clst * fs->csize + fs->database;
2400e9de:	897a      	ldrh	r2, [r7, #10]
2400e9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2400e9e2:	fb01 3302 	mla	r3, r1, r2, r3
2400e9e6:	9300      	str	r3, [sp, #0]
				dp->sect = clust2sect(fs, clst);
2400e9e8:	9b00      	ldr	r3, [sp, #0]
2400e9ea:	61e3      	str	r3, [r4, #28]
2400e9ec:	e7ce      	b.n	2400e98c <dir_next+0x28>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
2400e9ee:	2004      	movs	r0, #4
}
2400e9f0:	b005      	add	sp, #20
2400e9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
2400e9f6:	893b      	ldrh	r3, [r7, #8]
2400e9f8:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
2400e9fc:	d8c4      	bhi.n	2400e988 <dir_next+0x24>
				dp->sect = 0; return FR_NO_FILE;
2400e9fe:	2300      	movs	r3, #0
2400ea00:	2004      	movs	r0, #4
2400ea02:	61e3      	str	r3, [r4, #28]
2400ea04:	e7c6      	b.n	2400e994 <dir_next+0x30>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
2400ea06:	2002      	movs	r0, #2
2400ea08:	e7c4      	b.n	2400e994 <dir_next+0x30>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
2400ea0a:	2001      	movs	r0, #1
2400ea0c:	e7c2      	b.n	2400e994 <dir_next+0x30>
					if (!stretch) {								/* If no stretch, report EOT */
2400ea0e:	2e00      	cmp	r6, #0
2400ea10:	d0f5      	beq.n	2400e9fe <dir_next+0x9a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
2400ea12:	69a1      	ldr	r1, [r4, #24]
2400ea14:	4620      	mov	r0, r4
2400ea16:	f7ff fa65 	bl	2400dee4 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400ea1a:	4681      	mov	r9, r0
2400ea1c:	2800      	cmp	r0, #0
2400ea1e:	d05a      	beq.n	2400ead6 <dir_next+0x172>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
2400ea20:	2801      	cmp	r0, #1
2400ea22:	d0f0      	beq.n	2400ea06 <dir_next+0xa2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
2400ea24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
2400ea28:	d0ef      	beq.n	2400ea0a <dir_next+0xa6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ea2a:	78fb      	ldrb	r3, [r7, #3]
2400ea2c:	2b00      	cmp	r3, #0
2400ea2e:	d154      	bne.n	2400eada <dir_next+0x176>
2400ea30:	f107 0b34 	add.w	fp, r7, #52	; 0x34
		*d++ = (BYTE)val;
2400ea34:	f44f 7200 	mov.w	r2, #512	; 0x200
2400ea38:	2100      	movs	r1, #0
2400ea3a:	4658      	mov	r0, fp
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
2400ea3c:	465e      	mov	r6, fp
		*d++ = (BYTE)val;
2400ea3e:	f00a ffab 	bl	24019998 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ea42:	69bb      	ldr	r3, [r7, #24]
	clst -= 2;
2400ea44:	f1a9 0202 	sub.w	r2, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ea48:	3b02      	subs	r3, #2
	clst -= 2;
2400ea4a:	9201      	str	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400ea4c:	429a      	cmp	r2, r3
2400ea4e:	d267      	bcs.n	2400eb20 <dir_next+0x1bc>
	return clst * fs->csize + fs->database;
2400ea50:	4611      	mov	r1, r2
2400ea52:	897b      	ldrh	r3, [r7, #10]
2400ea54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2400ea56:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400ea5a:	633a      	str	r2, [r7, #48]	; 0x30
2400ea5c:	2b00      	cmp	r3, #0
2400ea5e:	d036      	beq.n	2400eace <dir_next+0x16a>
2400ea60:	2300      	movs	r3, #0
						fs->wflag = 1;
2400ea62:	e9cd 6402 	strd	r6, r4, [sp, #8]
2400ea66:	465e      	mov	r6, fp
2400ea68:	461c      	mov	r4, r3
2400ea6a:	46ab      	mov	fp, r5
2400ea6c:	4615      	mov	r5, r2
2400ea6e:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ea72:	462a      	mov	r2, r5
2400ea74:	4631      	mov	r1, r6
2400ea76:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
2400ea78:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ea7a:	2301      	movs	r3, #1
2400ea7c:	f7fe fbaa 	bl	2400d1d4 <disk_write>
2400ea80:	2800      	cmp	r0, #0
2400ea82:	d1c2      	bne.n	2400ea0a <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400ea84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
2400ea86:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400ea88:	1aea      	subs	r2, r5, r3
2400ea8a:	69fb      	ldr	r3, [r7, #28]
2400ea8c:	429a      	cmp	r2, r3
2400ea8e:	d212      	bcs.n	2400eab6 <dir_next+0x152>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400ea90:	f897 a002 	ldrb.w	sl, [r7, #2]
2400ea94:	f1ba 0f01 	cmp.w	sl, #1
2400ea98:	d801      	bhi.n	2400ea9e <dir_next+0x13a>
2400ea9a:	e00c      	b.n	2400eab6 <dir_next+0x152>
					wsect += fs->fsize;
2400ea9c:	69fb      	ldr	r3, [r7, #28]
2400ea9e:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400eaa0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400eaa4:	2301      	movs	r3, #1
2400eaa6:	4631      	mov	r1, r6
2400eaa8:	462a      	mov	r2, r5
2400eaaa:	7878      	ldrb	r0, [r7, #1]
2400eaac:	f7fe fb92 	bl	2400d1d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400eab0:	f1ba 0f01 	cmp.w	sl, #1
2400eab4:	d1f2      	bne.n	2400ea9c <dir_next+0x138>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
2400eab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2400eab8:	3401      	adds	r4, #1
2400eaba:	1c5d      	adds	r5, r3, #1
2400eabc:	897b      	ldrh	r3, [r7, #10]
2400eabe:	42a3      	cmp	r3, r4
2400eac0:	633d      	str	r5, [r7, #48]	; 0x30
2400eac2:	d8d4      	bhi.n	2400ea6e <dir_next+0x10a>
2400eac4:	462a      	mov	r2, r5
2400eac6:	4623      	mov	r3, r4
2400eac8:	465d      	mov	r5, fp
2400eaca:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					fs->winsect -= n;							/* Restore window offset */
2400eace:	1ad2      	subs	r2, r2, r3
2400ead0:	9901      	ldr	r1, [sp, #4]
2400ead2:	633a      	str	r2, [r7, #48]	; 0x30
2400ead4:	e77d      	b.n	2400e9d2 <dir_next+0x6e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
2400ead6:	2007      	movs	r0, #7
2400ead8:	e75c      	b.n	2400e994 <dir_next+0x30>
		wsect = fs->winsect;	/* Current sector number */
2400eada:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400eade:	f107 0b34 	add.w	fp, r7, #52	; 0x34
2400eae2:	2301      	movs	r3, #1
2400eae4:	7878      	ldrb	r0, [r7, #1]
2400eae6:	4652      	mov	r2, sl
2400eae8:	4659      	mov	r1, fp
2400eaea:	f7fe fb73 	bl	2400d1d4 <disk_write>
2400eaee:	2800      	cmp	r0, #0
2400eaf0:	d18b      	bne.n	2400ea0a <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400eaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
2400eaf4:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400eaf6:	ebaa 0203 	sub.w	r2, sl, r3
2400eafa:	69fb      	ldr	r3, [r7, #28]
2400eafc:	429a      	cmp	r2, r3
2400eafe:	d299      	bcs.n	2400ea34 <dir_next+0xd0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400eb00:	78be      	ldrb	r6, [r7, #2]
2400eb02:	2e01      	cmp	r6, #1
2400eb04:	d801      	bhi.n	2400eb0a <dir_next+0x1a6>
2400eb06:	e795      	b.n	2400ea34 <dir_next+0xd0>
2400eb08:	69fb      	ldr	r3, [r7, #28]
					wsect += fs->fsize;
2400eb0a:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400eb0c:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
2400eb0e:	2301      	movs	r3, #1
2400eb10:	4659      	mov	r1, fp
2400eb12:	4652      	mov	r2, sl
2400eb14:	7878      	ldrb	r0, [r7, #1]
2400eb16:	f7fe fb5d 	bl	2400d1d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400eb1a:	2e01      	cmp	r6, #1
2400eb1c:	d1f4      	bne.n	2400eb08 <dir_next+0x1a4>
2400eb1e:	e789      	b.n	2400ea34 <dir_next+0xd0>
	return clst * fs->csize + fs->database;
2400eb20:	897b      	ldrh	r3, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400eb22:	2200      	movs	r2, #0
2400eb24:	e799      	b.n	2400ea5a <dir_next+0xf6>
2400eb26:	bf00      	nop

2400eb28 <dir_register>:
{
2400eb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400eb2c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
2400eb30:	b08d      	sub	sp, #52	; 0x34
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400eb32:	f013 01a0 	ands.w	r1, r3, #160	; 0xa0
2400eb36:	9304      	str	r3, [sp, #16]
2400eb38:	f040 8312 	bne.w	2400f160 <dir_register+0x638>
	FATFS *fs = dp->obj.fs;
2400eb3c:	6803      	ldr	r3, [r0, #0]
2400eb3e:	4604      	mov	r4, r0
2400eb40:	9303      	str	r3, [sp, #12]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400eb42:	68db      	ldr	r3, [r3, #12]
2400eb44:	881a      	ldrh	r2, [r3, #0]
2400eb46:	2a00      	cmp	r2, #0
2400eb48:	f000 8473 	beq.w	2400f432 <dir_register+0x90a>
2400eb4c:	4689      	mov	r9, r1
2400eb4e:	f833 2f02 	ldrh.w	r2, [r3, #2]!
2400eb52:	f109 0901 	add.w	r9, r9, #1
2400eb56:	2a00      	cmp	r2, #0
2400eb58:	d1f9      	bne.n	2400eb4e <dir_register+0x26>
	mem_cpy(sn, dp->fn, 12);
2400eb5a:	f104 0624 	add.w	r6, r4, #36	; 0x24
			*d++ = *s++;
2400eb5e:	ab0c      	add	r3, sp, #48	; 0x30
2400eb60:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
2400eb64:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2400eb68:	9b04      	ldr	r3, [sp, #16]
2400eb6a:	07dd      	lsls	r5, r3, #31
2400eb6c:	f140 8153 	bpl.w	2400ee16 <dir_register+0x2ee>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400eb70:	2340      	movs	r3, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eb72:	f8cd 9014 	str.w	r9, [sp, #20]
			*d++ = *s++;
2400eb76:	f89d a02e 	ldrb.w	sl, [sp, #46]	; 0x2e
		for (n = 1; n < 100; n++) {
2400eb7a:	2701      	movs	r7, #1
			*d++ = *s++;
2400eb7c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eb80:	f04f 0b20 	mov.w	fp, #32
				if (sr & 0x10000) sr ^= 0x11021;
2400eb84:	4db1      	ldr	r5, [pc, #708]	; (2400ee4c <dir_register+0x324>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eb86:	f8dd 900c 	ldr.w	r9, [sp, #12]
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2400eb8a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			*d++ = *s++;
2400eb8e:	9002      	str	r0, [sp, #8]
2400eb90:	9101      	str	r1, [sp, #4]
2400eb92:	9b02      	ldr	r3, [sp, #8]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400eb94:	2f05      	cmp	r7, #5
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2400eb96:	f8d9 100c 	ldr.w	r1, [r9, #12]
			*d++ = *s++;
2400eb9a:	6263      	str	r3, [r4, #36]	; 0x24
2400eb9c:	9b01      	ldr	r3, [sp, #4]
2400eb9e:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
2400eba2:	62a3      	str	r3, [r4, #40]	; 0x28
2400eba4:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
2400eba8:	f240 814e 	bls.w	2400ee48 <dir_register+0x320>
		while (*lfn) {	/* Create a CRC */
2400ebac:	880a      	ldrh	r2, [r1, #0]
2400ebae:	2a00      	cmp	r2, #0
2400ebb0:	f000 814a 	beq.w	2400ee48 <dir_register+0x320>
				sr = (sr << 1) + (wc & 1);
2400ebb4:	468c      	mov	ip, r1
2400ebb6:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
2400ebba:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
2400ebbc:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ebc0:	e009      	b.n	2400ebd6 <dir_register+0xae>
				sr = (sr << 1) + (wc & 1);
2400ebc2:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ebc6:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
2400ebca:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
2400ebce:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ebd2:	bf18      	it	ne
2400ebd4:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
2400ebd6:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
2400ebda:	0893      	lsrs	r3, r2, #2
2400ebdc:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
2400ebde:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ebe2:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
2400ebe4:	f003 0301 	and.w	r3, r3, #1
2400ebe8:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ebec:	bf48      	it	mi
2400ebee:	ea8e 0e05 	eormi.w	lr, lr, r5
				wc >>= 1;
2400ebf2:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
2400ebf4:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ebf8:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
2400ebfc:	f001 0101 	and.w	r1, r1, #1
				wc >>= 1;
2400ec00:	ea4f 3ed2 	mov.w	lr, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
2400ec04:	bf18      	it	ne
2400ec06:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
2400ec08:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec0c:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400ec0e:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
2400ec12:	bf48      	it	mi
2400ec14:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400ec16:	f003 0301 	and.w	r3, r3, #1
2400ec1a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec1e:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400ec20:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
2400ec24:	bf48      	it	mi
2400ec26:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400ec28:	f000 0001 	and.w	r0, r0, #1
2400ec2c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec30:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400ec32:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
2400ec36:	bf48      	it	mi
2400ec38:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400ec3a:	f001 0101 	and.w	r1, r1, #1
2400ec3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec42:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400ec44:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
2400ec48:	bf48      	it	mi
2400ec4a:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400ec4c:	f003 0301 	and.w	r3, r3, #1
2400ec50:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec54:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400ec56:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
2400ec5a:	bf48      	it	mi
2400ec5c:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400ec5e:	f000 0001 	and.w	r0, r0, #1
2400ec62:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec66:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400ec68:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
2400ec6c:	bf48      	it	mi
2400ec6e:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400ec70:	f001 0101 	and.w	r1, r1, #1
2400ec74:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec78:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400ec7a:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
2400ec7e:	bf48      	it	mi
2400ec80:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400ec82:	f003 0301 	and.w	r3, r3, #1
2400ec86:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec8a:	0400      	lsls	r0, r0, #16
				wc >>= 1;
2400ec8c:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
2400ec90:	bf48      	it	mi
2400ec92:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400ec94:	f000 0001 	and.w	r0, r0, #1
2400ec98:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ec9c:	0409      	lsls	r1, r1, #16
				wc >>= 1;
2400ec9e:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
2400eca2:	bf48      	it	mi
2400eca4:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400eca6:	f001 0101 	and.w	r1, r1, #1
2400ecaa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ecae:	041b      	lsls	r3, r3, #16
				wc >>= 1;
2400ecb0:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
2400ecb4:	bf48      	it	mi
2400ecb6:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
2400ecb8:	f003 0301 	and.w	r3, r3, #1
2400ecbc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ecc0:	0400      	lsls	r0, r0, #16
2400ecc2:	bf48      	it	mi
2400ecc4:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
2400ecc6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ecca:	040a      	lsls	r2, r1, #16
		while (*lfn) {	/* Create a CRC */
2400eccc:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
2400ecd0:	bf48      	it	mi
2400ecd2:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
2400ecd4:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
2400ecd8:	041b      	lsls	r3, r3, #16
2400ecda:	bf48      	it	mi
2400ecdc:	ea8e 0e05 	eormi.w	lr, lr, r5
		while (*lfn) {	/* Create a CRC */
2400ece0:	2a00      	cmp	r2, #0
2400ece2:	f47f af6e 	bne.w	2400ebc2 <dir_register+0x9a>
		c = (BYTE)((seq % 16) + '0');
2400ece6:	f00e 010f 	and.w	r1, lr, #15
2400ecea:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400ecee:	2a39      	cmp	r2, #57	; 0x39
2400ecf0:	bf88      	it	hi
2400ecf2:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400ecf6:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
2400ecfa:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
2400ecfe:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	} while (seq);
2400ed02:	f240 8191 	bls.w	2400f028 <dir_register+0x500>
		c = (BYTE)((seq % 16) + '0');
2400ed06:	f001 000f 	and.w	r0, r1, #15
2400ed0a:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400ed0e:	2a39      	cmp	r2, #57	; 0x39
2400ed10:	bf88      	it	hi
2400ed12:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400ed16:	290f      	cmp	r1, #15
		seq /= 16;
2400ed18:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
2400ed1c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	} while (seq);
2400ed20:	f240 8188 	bls.w	2400f034 <dir_register+0x50c>
		c = (BYTE)((seq % 16) + '0');
2400ed24:	f000 010f 	and.w	r1, r0, #15
2400ed28:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400ed2c:	2a39      	cmp	r2, #57	; 0x39
2400ed2e:	bf88      	it	hi
2400ed30:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400ed34:	280f      	cmp	r0, #15
		seq /= 16;
2400ed36:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
2400ed3a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	} while (seq);
2400ed3e:	f240 8188 	bls.w	2400f052 <dir_register+0x52a>
		c = (BYTE)((seq % 16) + '0');
2400ed42:	f001 000f 	and.w	r0, r1, #15
2400ed46:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400ed4a:	2a39      	cmp	r2, #57	; 0x39
2400ed4c:	bf88      	it	hi
2400ed4e:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400ed52:	290f      	cmp	r1, #15
		seq /= 16;
2400ed54:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
2400ed58:	f88d 2020 	strb.w	r2, [sp, #32]
	} while (seq);
2400ed5c:	f240 817f 	bls.w	2400f05e <dir_register+0x536>
		c = (BYTE)((seq % 16) + '0');
2400ed60:	f000 010f 	and.w	r1, r0, #15
2400ed64:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400ed68:	2a39      	cmp	r2, #57	; 0x39
2400ed6a:	bf88      	it	hi
2400ed6c:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400ed70:	280f      	cmp	r0, #15
		seq /= 16;
2400ed72:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
2400ed76:	f88d 201f 	strb.w	r2, [sp, #31]
	} while (seq);
2400ed7a:	f240 8176 	bls.w	2400f06a <dir_register+0x542>
		c = (BYTE)((seq % 16) + '0');
2400ed7e:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
2400ed82:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
2400ed86:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
2400ed8a:	2a39      	cmp	r2, #57	; 0x39
2400ed8c:	bf88      	it	hi
2400ed8e:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
2400ed92:	290f      	cmp	r1, #15
		ns[i--] = c;
2400ed94:	f88d 201e 	strb.w	r2, [sp, #30]
	} while (seq);
2400ed98:	f240 816d 	bls.w	2400f076 <dir_register+0x54e>
		c = (BYTE)((seq % 16) + '0');
2400ed9c:	f00e 010f 	and.w	r1, lr, #15
2400eda0:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
2400eda4:	2a39      	cmp	r2, #57	; 0x39
2400eda6:	bf88      	it	hi
2400eda8:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
2400edac:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
2400edb0:	f88d 201d 	strb.w	r2, [sp, #29]
	} while (seq);
2400edb4:	f240 8144 	bls.w	2400f040 <dir_register+0x518>
		ns[i--] = c;
2400edb8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
2400edbc:	f104 0123 	add.w	r1, r4, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400edc0:	2200      	movs	r2, #0
2400edc2:	e002      	b.n	2400edca <dir_register+0x2a2>
2400edc4:	3201      	adds	r2, #1
2400edc6:	4562      	cmp	r2, ip
2400edc8:	d003      	beq.n	2400edd2 <dir_register+0x2aa>
2400edca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
2400edce:	2b20      	cmp	r3, #32
2400edd0:	d1f8      	bne.n	2400edc4 <dir_register+0x29c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400edd2:	f1bc 0f07 	cmp.w	ip, #7
2400edd6:	d93d      	bls.n	2400ee54 <dir_register+0x32c>
2400edd8:	1c50      	adds	r0, r2, #1
2400edda:	f806 b002 	strb.w	fp, [r6, r2]
	} while (j < 8);
2400edde:	2807      	cmp	r0, #7
2400ede0:	d809      	bhi.n	2400edf6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ede2:	1c42      	adds	r2, r0, #1
2400ede4:	2120      	movs	r1, #32
2400ede6:	2a08      	cmp	r2, #8
2400ede8:	f1c0 0208 	rsb	r2, r0, #8
2400edec:	4430      	add	r0, r6
2400edee:	bf88      	it	hi
2400edf0:	2201      	movhi	r2, #1
2400edf2:	f00a fdd1 	bl	24019998 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400edf6:	4620      	mov	r0, r4
2400edf8:	f7ff fa7c 	bl	2400e2f4 <dir_find>
2400edfc:	4601      	mov	r1, r0
			if (res != FR_OK) break;
2400edfe:	2800      	cmp	r0, #0
2400ee00:	f040 80a6 	bne.w	2400ef50 <dir_register+0x428>
		for (n = 1; n < 100; n++) {
2400ee04:	3701      	adds	r7, #1
2400ee06:	2f64      	cmp	r7, #100	; 0x64
2400ee08:	f47f aec3 	bne.w	2400eb92 <dir_register+0x6a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2400ee0c:	2107      	movs	r1, #7
}
2400ee0e:	4608      	mov	r0, r1
2400ee10:	b00d      	add	sp, #52	; 0x34
2400ee12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400ee16:	f013 0802 	ands.w	r8, r3, #2
2400ee1a:	9d03      	ldr	r5, [sp, #12]
2400ee1c:	f000 80a5 	beq.w	2400ef6a <dir_register+0x442>
2400ee20:	4a0b      	ldr	r2, [pc, #44]	; (2400ee50 <dir_register+0x328>)
2400ee22:	f109 030c 	add.w	r3, r9, #12
	res = dir_sdi(dp, 0);
2400ee26:	2100      	movs	r1, #0
2400ee28:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400ee2a:	fba2 2303 	umull	r2, r3, r2, r3
2400ee2e:	ea4f 0893 	mov.w	r8, r3, lsr #2
	res = dir_sdi(dp, 0);
2400ee32:	f7ff f917 	bl	2400e064 <dir_sdi>
	if (res == FR_OK) {
2400ee36:	4601      	mov	r1, r0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400ee38:	f108 0b01 	add.w	fp, r8, #1
	if (res == FR_OK) {
2400ee3c:	2800      	cmp	r0, #0
2400ee3e:	f000 809e 	beq.w	2400ef7e <dir_register+0x456>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
2400ee42:	2904      	cmp	r1, #4
2400ee44:	d0e2      	beq.n	2400ee0c <dir_register+0x2e4>
2400ee46:	e7e2      	b.n	2400ee0e <dir_register+0x2e6>
2400ee48:	46be      	mov	lr, r7
2400ee4a:	e74c      	b.n	2400ece6 <dir_register+0x1be>
2400ee4c:	00011021 	.word	0x00011021
2400ee50:	4ec4ec4f 	.word	0x4ec4ec4f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee54:	f10c 0330 	add.w	r3, ip, #48	; 0x30
2400ee58:	f10c 0c01 	add.w	ip, ip, #1
2400ee5c:	eb0d 0103 	add.w	r1, sp, r3
2400ee60:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ee64:	54b1      	strb	r1, [r6, r2]
2400ee66:	3201      	adds	r2, #1
	} while (j < 8);
2400ee68:	2a07      	cmp	r2, #7
2400ee6a:	d8c4      	bhi.n	2400edf6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee6c:	f1bc 0f08 	cmp.w	ip, #8
2400ee70:	f000 80a3 	beq.w	2400efba <dir_register+0x492>
2400ee74:	f10c 0330 	add.w	r3, ip, #48	; 0x30
	} while (j < 8);
2400ee78:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee7a:	f102 0001 	add.w	r0, r2, #1
2400ee7e:	eb0d 0103 	add.w	r1, sp, r3
2400ee82:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ee86:	54b1      	strb	r1, [r6, r2]
2400ee88:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
2400ee8c:	d0b3      	beq.n	2400edf6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee8e:	2908      	cmp	r1, #8
2400ee90:	f000 809b 	beq.w	2400efca <dir_register+0x4a2>
2400ee94:	f10c 0331 	add.w	r3, ip, #49	; 0x31
	} while (j < 8);
2400ee98:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ee9a:	eb0d 0103 	add.w	r1, sp, r3
2400ee9e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400eea2:	5431      	strb	r1, [r6, r0]
2400eea4:	f10c 0102 	add.w	r1, ip, #2
2400eea8:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400eeac:	d0a3      	beq.n	2400edf6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eeae:	2908      	cmp	r1, #8
2400eeb0:	f000 8093 	beq.w	2400efda <dir_register+0x4b2>
2400eeb4:	f10c 0332 	add.w	r3, ip, #50	; 0x32
	} while (j < 8);
2400eeb8:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eeba:	eb0d 0103 	add.w	r1, sp, r3
2400eebe:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400eec2:	5431      	strb	r1, [r6, r0]
2400eec4:	f10c 0103 	add.w	r1, ip, #3
2400eec8:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400eecc:	d093      	beq.n	2400edf6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eece:	2908      	cmp	r1, #8
2400eed0:	f000 808b 	beq.w	2400efea <dir_register+0x4c2>
2400eed4:	f10c 0333 	add.w	r3, ip, #51	; 0x33
	} while (j < 8);
2400eed8:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eeda:	eb0d 0103 	add.w	r1, sp, r3
2400eede:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400eee2:	5431      	strb	r1, [r6, r0]
2400eee4:	f10c 0104 	add.w	r1, ip, #4
2400eee8:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400eeec:	d083      	beq.n	2400edf6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eeee:	2908      	cmp	r1, #8
2400eef0:	f000 8083 	beq.w	2400effa <dir_register+0x4d2>
2400eef4:	f10c 0334 	add.w	r3, ip, #52	; 0x34
	} while (j < 8);
2400eef8:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400eefa:	eb0d 0103 	add.w	r1, sp, r3
2400eefe:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ef02:	5431      	strb	r1, [r6, r0]
2400ef04:	f10c 0105 	add.w	r1, ip, #5
2400ef08:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400ef0c:	f43f af73 	beq.w	2400edf6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef10:	2908      	cmp	r1, #8
2400ef12:	d07a      	beq.n	2400f00a <dir_register+0x4e2>
2400ef14:	f10c 0335 	add.w	r3, ip, #53	; 0x35
	} while (j < 8);
2400ef18:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef1a:	eb0d 0103 	add.w	r1, sp, r3
2400ef1e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
2400ef22:	5431      	strb	r1, [r6, r0]
2400ef24:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
2400ef28:	f43f af65 	beq.w	2400edf6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef2c:	f1bc 0f01 	cmp.w	ip, #1
2400ef30:	d173      	bne.n	2400f01a <dir_register+0x4f2>
2400ef32:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
	} while (j < 8);
2400ef36:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef38:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
2400ef3a:	f47f af5c 	bne.w	2400edf6 <dir_register+0x2ce>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400ef3e:	4620      	mov	r0, r4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400ef40:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2400ef44:	f7ff f9d6 	bl	2400e2f4 <dir_find>
2400ef48:	4601      	mov	r1, r0
			if (res != FR_OK) break;
2400ef4a:	2800      	cmp	r0, #0
2400ef4c:	f43f af5a 	beq.w	2400ee04 <dir_register+0x2dc>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2400ef50:	2804      	cmp	r0, #4
2400ef52:	f8dd 9014 	ldr.w	r9, [sp, #20]
2400ef56:	f47f af5a 	bne.w	2400ee0e <dir_register+0x2e6>
		dp->fn[NSFLAG] = sn[NSFLAG];
2400ef5a:	9b04      	ldr	r3, [sp, #16]
	FATFS *fs = dp->obj.fs;
2400ef5c:	6825      	ldr	r5, [r4, #0]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400ef5e:	f013 0802 	ands.w	r8, r3, #2
		dp->fn[NSFLAG] = sn[NSFLAG];
2400ef62:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400ef66:	f47f af5b 	bne.w	2400ee20 <dir_register+0x2f8>
	res = dir_sdi(dp, 0);
2400ef6a:	2100      	movs	r1, #0
2400ef6c:	4620      	mov	r0, r4
2400ef6e:	f7ff f879 	bl	2400e064 <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2400ef72:	f04f 0b01 	mov.w	fp, #1
	if (res == FR_OK) {
2400ef76:	4601      	mov	r1, r0
2400ef78:	2800      	cmp	r0, #0
2400ef7a:	f47f af62 	bne.w	2400ee42 <dir_register+0x31a>
		n = 0;
2400ef7e:	4607      	mov	r7, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400ef80:	f105 0a34 	add.w	sl, r5, #52	; 0x34
2400ef84:	f8cd 8004 	str.w	r8, [sp, #4]
			res = move_window(fs, dp->sect);
2400ef88:	69e6      	ldr	r6, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
2400ef8a:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
2400ef8e:	4546      	cmp	r6, r8
2400ef90:	d078      	beq.n	2400f084 <dir_register+0x55c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
2400ef92:	78eb      	ldrb	r3, [r5, #3]
2400ef94:	2b00      	cmp	r3, #0
2400ef96:	f040 80bb 	bne.w	2400f110 <dir_register+0x5e8>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
2400ef9a:	2301      	movs	r3, #1
2400ef9c:	4632      	mov	r2, r6
2400ef9e:	4651      	mov	r1, sl
2400efa0:	7868      	ldrb	r0, [r5, #1]
2400efa2:	f7fe f907 	bl	2400d1b4 <disk_read>
2400efa6:	2800      	cmp	r0, #0
2400efa8:	d06b      	beq.n	2400f082 <dir_register+0x55a>
				res = FR_DISK_ERR;
2400efaa:	2101      	movs	r1, #1
			fs->winsect = sector;
2400efac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
2400efb0:	4608      	mov	r0, r1
			fs->winsect = sector;
2400efb2:	632b      	str	r3, [r5, #48]	; 0x30
}
2400efb4:	b00d      	add	sp, #52	; 0x34
2400efb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
2400efba:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400efbc:	f102 0001 	add.w	r0, r2, #1
2400efc0:	f806 b002 	strb.w	fp, [r6, r2]
	} while (j < 8);
2400efc4:	f47f af0d 	bne.w	2400ede2 <dir_register+0x2ba>
2400efc8:	e715      	b.n	2400edf6 <dir_register+0x2ce>
2400efca:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400efcc:	f806 b000 	strb.w	fp, [r6, r0]
2400efd0:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
2400efd4:	f47f af05 	bne.w	2400ede2 <dir_register+0x2ba>
2400efd8:	e70d      	b.n	2400edf6 <dir_register+0x2ce>
2400efda:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400efdc:	f806 b000 	strb.w	fp, [r6, r0]
2400efe0:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
2400efe4:	f47f aefd 	bne.w	2400ede2 <dir_register+0x2ba>
2400efe8:	e705      	b.n	2400edf6 <dir_register+0x2ce>
2400efea:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400efec:	f806 b000 	strb.w	fp, [r6, r0]
2400eff0:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
2400eff4:	f47f aef5 	bne.w	2400ede2 <dir_register+0x2ba>
2400eff8:	e6fd      	b.n	2400edf6 <dir_register+0x2ce>
2400effa:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400effc:	f806 b000 	strb.w	fp, [r6, r0]
2400f000:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
2400f004:	f47f aeed 	bne.w	2400ede2 <dir_register+0x2ba>
2400f008:	e6f5      	b.n	2400edf6 <dir_register+0x2ce>
2400f00a:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f00c:	f806 b000 	strb.w	fp, [r6, r0]
2400f010:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
2400f014:	f47f aee5 	bne.w	2400ede2 <dir_register+0x2ba>
2400f018:	e6ed      	b.n	2400edf6 <dir_register+0x2ce>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f01a:	f806 b001 	strb.w	fp, [r6, r1]
	} while (j < 8);
2400f01e:	2a00      	cmp	r2, #0
2400f020:	f47f aee9 	bne.w	2400edf6 <dir_register+0x2ce>
2400f024:	2007      	movs	r0, #7
2400f026:	e6dc      	b.n	2400ede2 <dir_register+0x2ba>
	ns[i] = '~';
2400f028:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f02a:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
2400f02e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f032:	e6c3      	b.n	2400edbc <dir_register+0x294>
	ns[i] = '~';
2400f034:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f036:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
2400f03a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f03e:	e6bd      	b.n	2400edbc <dir_register+0x294>
	ns[i] = '~';
2400f040:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f042:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400f046:	f88d 201c 	strb.w	r2, [sp, #28]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
2400f04a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
2400f04e:	4662      	mov	r2, ip
2400f050:	e710      	b.n	2400ee74 <dir_register+0x34c>
	ns[i] = '~';
2400f052:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f054:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
2400f058:	f88d 2020 	strb.w	r2, [sp, #32]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f05c:	e6ae      	b.n	2400edbc <dir_register+0x294>
	ns[i] = '~';
2400f05e:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f060:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
2400f064:	f88d 201f 	strb.w	r2, [sp, #31]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f068:	e6a8      	b.n	2400edbc <dir_register+0x294>
	ns[i] = '~';
2400f06a:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f06c:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
2400f070:	f88d 201e 	strb.w	r2, [sp, #30]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f074:	e6a2      	b.n	2400edbc <dir_register+0x294>
	ns[i] = '~';
2400f076:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
2400f078:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
2400f07c:	f88d 201d 	strb.w	r2, [sp, #29]
	for (j = 0; j < i && dst[j] != ' '; j++) {
2400f080:	e69c      	b.n	2400edbc <dir_register+0x294>
			fs->winsect = sector;
2400f082:	632e      	str	r6, [r5, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
2400f084:	6a23      	ldr	r3, [r4, #32]
2400f086:	781b      	ldrb	r3, [r3, #0]
2400f088:	2be5      	cmp	r3, #229	; 0xe5
2400f08a:	d00d      	beq.n	2400f0a8 <dir_register+0x580>
2400f08c:	fab3 f283 	clz	r2, r3
2400f090:	0952      	lsrs	r2, r2, #5
2400f092:	b14b      	cbz	r3, 2400f0a8 <dir_register+0x580>
				n = 0;					/* Not a blank entry. Restart to search */
2400f094:	4617      	mov	r7, r2
			res = dir_next(dp, 1);
2400f096:	2101      	movs	r1, #1
2400f098:	4620      	mov	r0, r4
2400f09a:	f7ff fc63 	bl	2400e964 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
2400f09e:	2800      	cmp	r0, #0
2400f0a0:	f43f af72 	beq.w	2400ef88 <dir_register+0x460>
2400f0a4:	4601      	mov	r1, r0
2400f0a6:	e6cc      	b.n	2400ee42 <dir_register+0x31a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
2400f0a8:	3701      	adds	r7, #1
2400f0aa:	45bb      	cmp	fp, r7
2400f0ac:	d1f3      	bne.n	2400f096 <dir_register+0x56e>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2400f0ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
2400f0b2:	f1b8 0f00 	cmp.w	r8, #0
2400f0b6:	d155      	bne.n	2400f164 <dir_register+0x63c>
		res = move_window(fs, dp->sect);
2400f0b8:	69e1      	ldr	r1, [r4, #28]
2400f0ba:	9803      	ldr	r0, [sp, #12]
2400f0bc:	f7fe fa34 	bl	2400d528 <move_window>
		if (res == FR_OK) {
2400f0c0:	4601      	mov	r1, r0
2400f0c2:	2800      	cmp	r0, #0
2400f0c4:	f47f aea3 	bne.w	2400ee0e <dir_register+0x2e6>
		*d++ = (BYTE)val;
2400f0c8:	2220      	movs	r2, #32
2400f0ca:	9001      	str	r0, [sp, #4]
2400f0cc:	6a20      	ldr	r0, [r4, #32]
2400f0ce:	f00a fc63 	bl	24019998 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2400f0d2:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400f0d4:	f104 0225 	add.w	r2, r4, #37	; 0x25
2400f0d8:	9901      	ldr	r1, [sp, #4]
2400f0da:	1a9a      	subs	r2, r3, r2
2400f0dc:	2a02      	cmp	r2, #2
2400f0de:	f240 81ab 	bls.w	2400f438 <dir_register+0x910>
			*d++ = *s++;
2400f0e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
2400f0e4:	601a      	str	r2, [r3, #0]
2400f0e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
2400f0e8:	605a      	str	r2, [r3, #4]
2400f0ea:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
2400f0ee:	721a      	strb	r2, [r3, #8]
2400f0f0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
2400f0f4:	725a      	strb	r2, [r3, #9]
2400f0f6:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
2400f0fa:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
2400f0fc:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2400f0fe:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
2400f102:	6a20      	ldr	r0, [r4, #32]
2400f104:	f003 0318 	and.w	r3, r3, #24
2400f108:	7303      	strb	r3, [r0, #12]
			fs->wflag = 1;
2400f10a:	9b03      	ldr	r3, [sp, #12]
2400f10c:	70da      	strb	r2, [r3, #3]
2400f10e:	e67e      	b.n	2400ee0e <dir_register+0x2e6>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
2400f110:	2301      	movs	r3, #1
2400f112:	4642      	mov	r2, r8
2400f114:	4651      	mov	r1, sl
2400f116:	7868      	ldrb	r0, [r5, #1]
2400f118:	f7fe f85c 	bl	2400d1d4 <disk_write>
2400f11c:	b9d8      	cbnz	r0, 2400f156 <dir_register+0x62e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f11e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
			fs->wflag = 0;
2400f120:	70e8      	strb	r0, [r5, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
2400f122:	eba8 0103 	sub.w	r1, r8, r3
2400f126:	69eb      	ldr	r3, [r5, #28]
2400f128:	4299      	cmp	r1, r3
2400f12a:	f4bf af36 	bcs.w	2400ef9a <dir_register+0x472>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f12e:	f895 9002 	ldrb.w	r9, [r5, #2]
2400f132:	f1b9 0f01 	cmp.w	r9, #1
2400f136:	d801      	bhi.n	2400f13c <dir_register+0x614>
2400f138:	e72f      	b.n	2400ef9a <dir_register+0x472>
					wsect += fs->fsize;
2400f13a:	69eb      	ldr	r3, [r5, #28]
2400f13c:	4498      	add	r8, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f13e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
2400f142:	2301      	movs	r3, #1
2400f144:	4651      	mov	r1, sl
2400f146:	4642      	mov	r2, r8
2400f148:	7868      	ldrb	r0, [r5, #1]
2400f14a:	f7fe f843 	bl	2400d1d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
2400f14e:	f1b9 0f01 	cmp.w	r9, #1
2400f152:	d1f2      	bne.n	2400f13a <dir_register+0x612>
2400f154:	e721      	b.n	2400ef9a <dir_register+0x472>
2400f156:	2101      	movs	r1, #1
}
2400f158:	4608      	mov	r0, r1
2400f15a:	b00d      	add	sp, #52	; 0x34
2400f15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2400f160:	2106      	movs	r1, #6
2400f162:	e654      	b.n	2400ee0e <dir_register+0x2e6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2400f164:	6961      	ldr	r1, [r4, #20]
2400f166:	4620      	mov	r0, r4
2400f168:	eba1 1148 	sub.w	r1, r1, r8, lsl #5
2400f16c:	f7fe ff7a 	bl	2400e064 <dir_sdi>
		if (res == FR_OK) {
2400f170:	4601      	mov	r1, r0
2400f172:	2800      	cmp	r0, #0
2400f174:	f47f ae4b 	bne.w	2400ee0e <dir_register+0x2e6>
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400f178:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400f17c:	260f      	movs	r6, #15
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f17e:	f64f 77fd 	movw	r7, #65533	; 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
2400f182:	f64f 79ff 	movw	r9, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400f186:	01d3      	lsls	r3, r2, #7
	*ptr++ = (BYTE)val; val >>= 8;
2400f188:	f8dd a00c 	ldr.w	sl, [sp, #12]
		sum = (sum >> 1) + (sum << 7) + *dir++;
2400f18c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
2400f190:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400f194:	4413      	add	r3, r2
2400f196:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400f19a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400f19e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
2400f1a2:	fa53 f282 	uxtab	r2, r3, r2
2400f1a6:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400f1aa:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400f1ae:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
2400f1b2:	fa52 f383 	uxtab	r3, r2, r3
2400f1b6:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400f1ba:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400f1be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
2400f1c2:	fa53 f282 	uxtab	r2, r3, r2
2400f1c6:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400f1ca:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400f1ce:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
2400f1d2:	fa52 f383 	uxtab	r3, r2, r3
2400f1d6:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400f1da:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400f1de:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
2400f1e2:	fa53 f282 	uxtab	r2, r3, r2
2400f1e6:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400f1ea:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400f1ee:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
2400f1f2:	fa52 f383 	uxtab	r3, r2, r3
2400f1f6:	f3c3 0246 	ubfx	r2, r3, #1, #7
2400f1fa:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
2400f1fe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
2400f202:	fa53 f282 	uxtab	r2, r3, r2
2400f206:	f3c2 0346 	ubfx	r3, r2, #1, #7
2400f20a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
2400f20e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
2400f212:	fa52 f383 	uxtab	r3, r2, r3
2400f216:	f3c3 0546 	ubfx	r5, r3, #1, #7
2400f21a:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
2400f21e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
2400f222:	fa53 f585 	uxtab	r5, r3, r5
2400f226:	b2ed      	uxtb	r5, r5
	} while (--n);
2400f228:	e02a      	b.n	2400f280 <dir_register+0x758>
	*ptr++ = (BYTE)val; val >>= 8;
2400f22a:	f8a3 9003 	strh.w	r9, [r3, #3]
2400f22e:	f8a3 9005 	strh.w	r9, [r3, #5]
2400f232:	f8a3 9007 	strh.w	r9, [r3, #7]
2400f236:	f8a3 9009 	strh.w	r9, [r3, #9]
2400f23a:	f8a3 900e 	strh.w	r9, [r3, #14]
2400f23e:	f8a3 9010 	strh.w	r9, [r3, #16]
2400f242:	f8a3 9012 	strh.w	r9, [r3, #18]
2400f246:	f8a3 9014 	strh.w	r9, [r3, #20]
2400f24a:	f8a3 9016 	strh.w	r9, [r3, #22]
2400f24e:	f8a3 9018 	strh.w	r9, [r3, #24]
2400f252:	f8a3 901c 	strh.w	r9, [r3, #28]
2400f256:	f8a3 901e 	strh.w	r9, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400f25a:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
2400f25e:	f883 c000 	strb.w	ip, [r3]
				fs->wflag = 1;
2400f262:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
2400f264:	2100      	movs	r1, #0
2400f266:	4620      	mov	r0, r4
				fs->wflag = 1;
2400f268:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
2400f26c:	f7ff fb7a 	bl	2400e964 <dir_next>
			} while (res == FR_OK && --nent);
2400f270:	4601      	mov	r1, r0
2400f272:	2800      	cmp	r0, #0
2400f274:	f47f adcb 	bne.w	2400ee0e <dir_register+0x2e6>
2400f278:	f1b8 0801 	subs.w	r8, r8, #1
2400f27c:	f43f af1c 	beq.w	2400f0b8 <dir_register+0x590>
				res = move_window(fs, dp->sect);
2400f280:	69e1      	ldr	r1, [r4, #28]
2400f282:	4650      	mov	r0, sl
2400f284:	f7fe f950 	bl	2400d528 <move_window>
2400f288:	4601      	mov	r1, r0
				if (res != FR_OK) break;
2400f28a:	2800      	cmp	r0, #0
2400f28c:	f47f adbf 	bne.w	2400ee0e <dir_register+0x2e6>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2400f290:	fa5f fc88 	uxtb.w	ip, r8
2400f294:	6a23      	ldr	r3, [r4, #32]
2400f296:	f8da 100c 	ldr.w	r1, [sl, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400f29a:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f29e:	8358      	strh	r0, [r3, #26]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
2400f2a0:	735d      	strb	r5, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400f2a2:	eb02 0042 	add.w	r0, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
2400f2a6:	f8a3 600b 	strh.w	r6, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
2400f2aa:	eb02 0280 	add.w	r2, r2, r0, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f2ae:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
2400f2b2:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f2b6:	7058      	strb	r0, [r3, #1]
2400f2b8:	0a00      	lsrs	r0, r0, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f2ba:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
2400f2be:	7098      	strb	r0, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f2c0:	0050      	lsls	r0, r2, #1
2400f2c2:	45be      	cmp	lr, r7
2400f2c4:	d8b1      	bhi.n	2400f22a <dir_register+0x702>
2400f2c6:	3201      	adds	r2, #1
2400f2c8:	f831 e012 	ldrh.w	lr, [r1, r2, lsl #1]
2400f2cc:	0052      	lsls	r2, r2, #1
2400f2ce:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f2d2:	f883 e003 	strb.w	lr, [r3, #3]
2400f2d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f2da:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f2de:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f2e2:	45bb      	cmp	fp, r7
2400f2e4:	d8a3      	bhi.n	2400f22e <dir_register+0x706>
2400f2e6:	440a      	add	r2, r1
2400f2e8:	f8b2 e002 	ldrh.w	lr, [r2, #2]
2400f2ec:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f2f0:	f883 e005 	strb.w	lr, [r3, #5]
2400f2f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f2f8:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f2fc:	f883 e006 	strb.w	lr, [r3, #6]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f300:	45bb      	cmp	fp, r7
2400f302:	d896      	bhi.n	2400f232 <dir_register+0x70a>
2400f304:	f8b2 e004 	ldrh.w	lr, [r2, #4]
2400f308:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f30c:	f883 e007 	strb.w	lr, [r3, #7]
2400f310:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f314:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f318:	f883 e008 	strb.w	lr, [r3, #8]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f31c:	45bb      	cmp	fp, r7
2400f31e:	d88a      	bhi.n	2400f236 <dir_register+0x70e>
2400f320:	f8b2 e006 	ldrh.w	lr, [r2, #6]
2400f324:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f328:	f883 e009 	strb.w	lr, [r3, #9]
2400f32c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f330:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f334:	f883 e00a 	strb.w	lr, [r3, #10]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f338:	45bb      	cmp	fp, r7
2400f33a:	f63f af7e 	bhi.w	2400f23a <dir_register+0x712>
2400f33e:	f8b2 e008 	ldrh.w	lr, [r2, #8]
2400f342:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f346:	f883 e00e 	strb.w	lr, [r3, #14]
2400f34a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f34e:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f352:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f356:	45bb      	cmp	fp, r7
2400f358:	f63f af71 	bhi.w	2400f23e <dir_register+0x716>
2400f35c:	f8b2 e00a 	ldrh.w	lr, [r2, #10]
2400f360:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f364:	f883 e010 	strb.w	lr, [r3, #16]
2400f368:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f36c:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f370:	f883 e011 	strb.w	lr, [r3, #17]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f374:	45bb      	cmp	fp, r7
2400f376:	f63f af64 	bhi.w	2400f242 <dir_register+0x71a>
2400f37a:	f8b2 e00c 	ldrh.w	lr, [r2, #12]
2400f37e:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f382:	f883 e012 	strb.w	lr, [r3, #18]
2400f386:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f38a:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f38e:	f883 e013 	strb.w	lr, [r3, #19]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f392:	45bb      	cmp	fp, r7
2400f394:	f63f af57 	bhi.w	2400f246 <dir_register+0x71e>
2400f398:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
2400f39c:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f3a0:	f883 e014 	strb.w	lr, [r3, #20]
2400f3a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f3a8:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f3ac:	f883 e015 	strb.w	lr, [r3, #21]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f3b0:	45bb      	cmp	fp, r7
2400f3b2:	f63f af4a 	bhi.w	2400f24a <dir_register+0x722>
2400f3b6:	f8b2 e010 	ldrh.w	lr, [r2, #16]
2400f3ba:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f3be:	f883 e016 	strb.w	lr, [r3, #22]
2400f3c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f3c6:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f3ca:	f883 e017 	strb.w	lr, [r3, #23]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f3ce:	45bb      	cmp	fp, r7
2400f3d0:	f63f af3d 	bhi.w	2400f24e <dir_register+0x726>
2400f3d4:	f8b2 e012 	ldrh.w	lr, [r2, #18]
2400f3d8:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f3dc:	f883 e018 	strb.w	lr, [r3, #24]
2400f3e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f3e4:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f3e8:	f883 e019 	strb.w	lr, [r3, #25]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f3ec:	45bb      	cmp	fp, r7
2400f3ee:	f63f af30 	bhi.w	2400f252 <dir_register+0x72a>
2400f3f2:	f8b2 e014 	ldrh.w	lr, [r2, #20]
2400f3f6:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f3fa:	f883 e01c 	strb.w	lr, [r3, #28]
2400f3fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f402:	fa1f fb8b 	uxth.w	fp, fp
	*ptr++ = (BYTE)val;
2400f406:	f883 e01d 	strb.w	lr, [r3, #29]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
2400f40a:	45bb      	cmp	fp, r7
2400f40c:	f63f af23 	bhi.w	2400f256 <dir_register+0x72e>
2400f410:	8ad2      	ldrh	r2, [r2, #22]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400f412:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
2400f416:	779a      	strb	r2, [r3, #30]
2400f418:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
2400f41a:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
2400f41c:	fa1f f28e 	uxth.w	r2, lr
2400f420:	42ba      	cmp	r2, r7
2400f422:	f63f af1a 	bhi.w	2400f25a <dir_register+0x732>
2400f426:	180a      	adds	r2, r1, r0
2400f428:	8b52      	ldrh	r2, [r2, #26]
2400f42a:	2a00      	cmp	r2, #0
2400f42c:	f47f af17 	bne.w	2400f25e <dir_register+0x736>
2400f430:	e713      	b.n	2400f25a <dir_register+0x732>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2400f432:	4691      	mov	r9, r2
2400f434:	f7ff bb91 	b.w	2400eb5a <dir_register+0x32>
			*d++ = *s++;
2400f438:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
2400f43c:	701a      	strb	r2, [r3, #0]
2400f43e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
2400f442:	705a      	strb	r2, [r3, #1]
2400f444:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
2400f448:	709a      	strb	r2, [r3, #2]
2400f44a:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
2400f44e:	70da      	strb	r2, [r3, #3]
2400f450:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
2400f454:	711a      	strb	r2, [r3, #4]
2400f456:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
2400f45a:	715a      	strb	r2, [r3, #5]
2400f45c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
2400f460:	719a      	strb	r2, [r3, #6]
2400f462:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
2400f466:	71da      	strb	r2, [r3, #7]
2400f468:	e63f      	b.n	2400f0ea <dir_register+0x5c2>
2400f46a:	bf00      	nop

2400f46c <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400f46c:	2901      	cmp	r1, #1
{
2400f46e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400f472:	460c      	mov	r4, r1
2400f474:	b083      	sub	sp, #12
	FATFS *fs = obj->fs;
2400f476:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
2400f478:	d914      	bls.n	2400f4a4 <remove_chain+0x38>
2400f47a:	69ab      	ldr	r3, [r5, #24]
2400f47c:	428b      	cmp	r3, r1
2400f47e:	d911      	bls.n	2400f4a4 <remove_chain+0x38>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
2400f480:	4606      	mov	r6, r0
2400f482:	4611      	mov	r1, r2
2400f484:	b992      	cbnz	r2, 2400f4ac <remove_chain+0x40>
2400f486:	462f      	mov	r7, r5
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400f488:	f105 0934 	add.w	r9, r5, #52	; 0x34
			fs->wflag = 1;
2400f48c:	f04f 0801 	mov.w	r8, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f490:	429c      	cmp	r4, r3
2400f492:	d207      	bcs.n	2400f4a4 <remove_chain+0x38>
		switch (fs->fs_type) {
2400f494:	783b      	ldrb	r3, [r7, #0]
2400f496:	2b02      	cmp	r3, #2
2400f498:	f000 80a3 	beq.w	2400f5e2 <remove_chain+0x176>
2400f49c:	2b03      	cmp	r3, #3
2400f49e:	d022      	beq.n	2400f4e6 <remove_chain+0x7a>
2400f4a0:	2b01      	cmp	r3, #1
2400f4a2:	d011      	beq.n	2400f4c8 <remove_chain+0x5c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400f4a4:	2002      	movs	r0, #2
}
2400f4a6:	b003      	add	sp, #12
2400f4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400f4ac:	4293      	cmp	r3, r2
2400f4ae:	d9f9      	bls.n	2400f4a4 <remove_chain+0x38>
2400f4b0:	2a01      	cmp	r2, #1
2400f4b2:	d0f7      	beq.n	2400f4a4 <remove_chain+0x38>
2400f4b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2400f4b8:	4628      	mov	r0, r5
2400f4ba:	f7fe f9e5 	bl	2400d888 <put_fat.part.0>
		if (res != FR_OK) return res;
2400f4be:	2800      	cmp	r0, #0
2400f4c0:	d1f1      	bne.n	2400f4a6 <remove_chain+0x3a>
2400f4c2:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f4c4:	69bb      	ldr	r3, [r7, #24]
2400f4c6:	e7df      	b.n	2400f488 <remove_chain+0x1c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f4c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400f4ca:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f4ce:	4638      	mov	r0, r7
2400f4d0:	eb01 215a 	add.w	r1, r1, sl, lsr #9
2400f4d4:	f7fe f828 	bl	2400d528 <move_window>
2400f4d8:	2800      	cmp	r0, #0
2400f4da:	f000 80a9 	beq.w	2400f630 <remove_chain+0x1c4>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
2400f4de:	2001      	movs	r0, #1
}
2400f4e0:	b003      	add	sp, #12
2400f4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
2400f4e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400f4e8:	4638      	mov	r0, r7
2400f4ea:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400f4ee:	f7fe f81b 	bl	2400d528 <move_window>
2400f4f2:	2800      	cmp	r0, #0
2400f4f4:	d1f3      	bne.n	2400f4de <remove_chain+0x72>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400f4f6:	00a3      	lsls	r3, r4, #2
2400f4f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400f4fc:	443b      	add	r3, r7
2400f4fe:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
2400f502:	f02a 4a70 	bic.w	sl, sl, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
2400f506:	f1ba 0f00 	cmp.w	sl, #0
2400f50a:	f000 80af 	beq.w	2400f66c <remove_chain+0x200>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
2400f50e:	f1ba 0f01 	cmp.w	sl, #1
2400f512:	d0c7      	beq.n	2400f4a4 <remove_chain+0x38>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
2400f514:	69ab      	ldr	r3, [r5, #24]
2400f516:	42a3      	cmp	r3, r4
2400f518:	d9c4      	bls.n	2400f4a4 <remove_chain+0x38>
		switch (fs->fs_type) {
2400f51a:	782f      	ldrb	r7, [r5, #0]
2400f51c:	2f02      	cmp	r7, #2
2400f51e:	d029      	beq.n	2400f574 <remove_chain+0x108>
2400f520:	2f03      	cmp	r7, #3
2400f522:	d047      	beq.n	2400f5b4 <remove_chain+0x148>
2400f524:	2f01      	cmp	r7, #1
2400f526:	d1bd      	bne.n	2400f4a4 <remove_chain+0x38>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f528:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
2400f52a:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f52e:	4628      	mov	r0, r5
2400f530:	eb01 215b 	add.w	r1, r1, fp, lsr #9
2400f534:	f7fd fff8 	bl	2400d528 <move_window>
			if (res != FR_OK) break;
2400f538:	2800      	cmp	r0, #0
2400f53a:	d1b4      	bne.n	2400f4a6 <remove_chain+0x3a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400f53c:	07e2      	lsls	r2, r4, #31
			p = fs->win + bc++ % SS(fs);
2400f53e:	f10b 0301 	add.w	r3, fp, #1
2400f542:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400f546:	d55c      	bpl.n	2400f602 <remove_chain+0x196>
2400f548:	f819 200b 	ldrb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f54c:	4628      	mov	r0, r5
2400f54e:	9301      	str	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400f550:	f002 020f 	and.w	r2, r2, #15
2400f554:	f809 200b 	strb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f558:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
2400f55a:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f55c:	eb01 2153 	add.w	r1, r1, r3, lsr #9
2400f560:	f7fd ffe2 	bl	2400d528 <move_window>
			if (res != FR_OK) break;
2400f564:	9b01      	ldr	r3, [sp, #4]
2400f566:	2800      	cmp	r0, #0
2400f568:	d19d      	bne.n	2400f4a6 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
2400f56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400f56e:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400f570:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
2400f572:	e00c      	b.n	2400f58e <remove_chain+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
2400f574:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400f576:	4628      	mov	r0, r5
2400f578:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400f57c:	f7fd ffd4 	bl	2400d528 <move_window>
			if (res != FR_OK) break;
2400f580:	2800      	cmp	r0, #0
2400f582:	d190      	bne.n	2400f4a6 <remove_chain+0x3a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
2400f584:	0064      	lsls	r4, r4, #1
2400f586:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
2400f58a:	442c      	add	r4, r5
2400f58c:	86a0      	strh	r0, [r4, #52]	; 0x34
			fs->wflag = 1;
2400f58e:	f885 8003 	strb.w	r8, [r5, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
2400f592:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
2400f596:	1e91      	subs	r1, r2, #2
2400f598:	428b      	cmp	r3, r1
2400f59a:	d205      	bcs.n	2400f5a8 <remove_chain+0x13c>
			fs->free_clst++;
2400f59c:	3301      	adds	r3, #1
2400f59e:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
2400f5a0:	792b      	ldrb	r3, [r5, #4]
2400f5a2:	f043 0301 	orr.w	r3, r3, #1
2400f5a6:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
2400f5a8:	4552      	cmp	r2, sl
2400f5aa:	d95f      	bls.n	2400f66c <remove_chain+0x200>
		nxt = get_fat(obj, clst);			/* Get cluster status */
2400f5ac:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
2400f5ae:	4654      	mov	r4, sl
2400f5b0:	69bb      	ldr	r3, [r7, #24]
2400f5b2:	e76d      	b.n	2400f490 <remove_chain+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
2400f5b4:	6a69      	ldr	r1, [r5, #36]	; 0x24
2400f5b6:	4628      	mov	r0, r5
2400f5b8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
2400f5bc:	f7fd ffb4 	bl	2400d528 <move_window>
			if (res != FR_OK) break;
2400f5c0:	2800      	cmp	r0, #0
2400f5c2:	f47f af70 	bne.w	2400f4a6 <remove_chain+0x3a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400f5c6:	00a4      	lsls	r4, r4, #2
2400f5c8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
2400f5cc:	f859 2004 	ldr.w	r2, [r9, r4]
	*ptr++ = (BYTE)val; val >>= 8;
2400f5d0:	f829 0004 	strh.w	r0, [r9, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
2400f5d4:	444c      	add	r4, r9
	*ptr++ = (BYTE)val; val >>= 8;
2400f5d6:	0e13      	lsrs	r3, r2, #24
2400f5d8:	70a0      	strb	r0, [r4, #2]
2400f5da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
2400f5de:	70e3      	strb	r3, [r4, #3]
			if (res != FR_OK) return res;
2400f5e0:	e7d5      	b.n	2400f58e <remove_chain+0x122>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
2400f5e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
2400f5e4:	4638      	mov	r0, r7
2400f5e6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
2400f5ea:	f7fd ff9d 	bl	2400d528 <move_window>
2400f5ee:	2800      	cmp	r0, #0
2400f5f0:	f47f af75 	bne.w	2400f4de <remove_chain+0x72>
			val = ld_word(fs->win + clst * 2 % SS(fs));
2400f5f4:	0063      	lsls	r3, r4, #1
2400f5f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
2400f5fa:	443b      	add	r3, r7
2400f5fc:	f8b3 a034 	ldrh.w	sl, [r3, #52]	; 0x34
			break;
2400f600:	e781      	b.n	2400f506 <remove_chain+0x9a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
2400f602:	f809 000b 	strb.w	r0, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f606:	4628      	mov	r0, r5
2400f608:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
2400f60a:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
2400f60c:	eb01 2153 	add.w	r1, r1, r3, lsr #9
2400f610:	9301      	str	r3, [sp, #4]
2400f612:	f7fd ff89 	bl	2400d528 <move_window>
			if (res != FR_OK) break;
2400f616:	2800      	cmp	r0, #0
2400f618:	f47f af45 	bne.w	2400f4a6 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
2400f61c:	9b01      	ldr	r3, [sp, #4]
2400f61e:	f3c3 0308 	ubfx	r3, r3, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400f622:	f819 0003 	ldrb.w	r0, [r9, r3]
			p = fs->win + bc % SS(fs);
2400f626:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2400f628:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
2400f62c:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
2400f62e:	e7ae      	b.n	2400f58e <remove_chain+0x122>
			wc = fs->win[bc++ % SS(fs)];
2400f630:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f634:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
2400f636:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f63a:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
2400f63c:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f63e:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
2400f642:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
2400f646:	f7fd ff6f 	bl	2400d528 <move_window>
2400f64a:	2800      	cmp	r0, #0
2400f64c:	f47f af47 	bne.w	2400f4de <remove_chain+0x72>
			wc |= fs->win[bc % SS(fs)] << 8;
2400f650:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400f654:	07e1      	lsls	r1, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
2400f656:	44ba      	add	sl, r7
2400f658:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
2400f65c:	ea4b 2a03 	orr.w	sl, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2400f660:	bf4c      	ite	mi
2400f662:	ea4f 1a1a 	movmi.w	sl, sl, lsr #4
2400f666:	f3ca 0a0b 	ubfxpl	sl, sl, #0, #12
2400f66a:	e74c      	b.n	2400f506 <remove_chain+0x9a>
	return FR_OK;
2400f66c:	2000      	movs	r0, #0
2400f66e:	e71a      	b.n	2400f4a6 <remove_chain+0x3a>

2400f670 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
2400f670:	b510      	push	{r4, lr}
2400f672:	b082      	sub	sp, #8
2400f674:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
2400f678:	b1a1      	cbz	r1, 2400f6a4 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400f67a:	f891 c000 	ldrb.w	ip, [r1]
2400f67e:	f1bc 0f1f 	cmp.w	ip, #31
2400f682:	d912      	bls.n	2400f6aa <f_mount+0x3a>
2400f684:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
2400f688:	d00f      	beq.n	2400f6aa <f_mount+0x3a>
2400f68a:	4608      	mov	r0, r1
2400f68c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
2400f690:	2b1f      	cmp	r3, #31
2400f692:	d90c      	bls.n	2400f6ae <f_mount+0x3e>
2400f694:	2b3a      	cmp	r3, #58	; 0x3a
2400f696:	d1f9      	bne.n	2400f68c <f_mount+0x1c>
			i = *tp++ - '0';
2400f698:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2400f69a:	4288      	cmp	r0, r1
2400f69c:	d102      	bne.n	2400f6a4 <f_mount+0x34>
2400f69e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
2400f6a2:	d006      	beq.n	2400f6b2 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
2400f6a4:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
2400f6a6:	b002      	add	sp, #8
2400f6a8:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
2400f6aa:	4663      	mov	r3, ip
2400f6ac:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
2400f6ae:	2b3a      	cmp	r3, #58	; 0x3a
2400f6b0:	d0f2      	beq.n	2400f698 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
2400f6b2:	4913      	ldr	r1, [pc, #76]	; (2400f700 <f_mount+0x90>)
2400f6b4:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
2400f6b6:	b143      	cbz	r3, 2400f6ca <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
2400f6b8:	4812      	ldr	r0, [pc, #72]	; (2400f704 <f_mount+0x94>)
2400f6ba:	6804      	ldr	r4, [r0, #0]
2400f6bc:	42a3      	cmp	r3, r4
2400f6be:	d019      	beq.n	2400f6f4 <f_mount+0x84>
2400f6c0:	6904      	ldr	r4, [r0, #16]
2400f6c2:	429c      	cmp	r4, r3
2400f6c4:	d013      	beq.n	2400f6ee <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
2400f6c6:	2000      	movs	r0, #0
2400f6c8:	7018      	strb	r0, [r3, #0]
	if (fs) {
2400f6ca:	9b01      	ldr	r3, [sp, #4]
2400f6cc:	b15b      	cbz	r3, 2400f6e6 <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
2400f6ce:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400f6d0:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
2400f6d2:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
2400f6d4:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400f6d6:	d1e6      	bne.n	2400f6a6 <f_mount+0x36>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
2400f6d8:	4602      	mov	r2, r0
2400f6da:	a901      	add	r1, sp, #4
2400f6dc:	4668      	mov	r0, sp
2400f6de:	f7fd ff61 	bl	2400d5a4 <find_volume>
}
2400f6e2:	b002      	add	sp, #8
2400f6e4:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
2400f6e6:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
2400f6e8:	600b      	str	r3, [r1, #0]
}
2400f6ea:	b002      	add	sp, #8
2400f6ec:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
2400f6ee:	2400      	movs	r4, #0
2400f6f0:	6104      	str	r4, [r0, #16]
2400f6f2:	e7e8      	b.n	2400f6c6 <f_mount+0x56>
2400f6f4:	2400      	movs	r4, #0
2400f6f6:	6004      	str	r4, [r0, #0]
2400f6f8:	6904      	ldr	r4, [r0, #16]
2400f6fa:	429c      	cmp	r4, r3
2400f6fc:	d1e3      	bne.n	2400f6c6 <f_mount+0x56>
2400f6fe:	e7f6      	b.n	2400f6ee <f_mount+0x7e>
2400f700:	2001dec8 	.word	0x2001dec8
2400f704:	2001decc 	.word	0x2001decc

2400f708 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
2400f708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2400f70c:	b092      	sub	sp, #72	; 0x48
2400f70e:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
2400f710:	2800      	cmp	r0, #0
2400f712:	f000 8096 	beq.w	2400f842 <f_open+0x13a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
2400f716:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
2400f71a:	4616      	mov	r6, r2
2400f71c:	4604      	mov	r4, r0
2400f71e:	a903      	add	r1, sp, #12
2400f720:	a801      	add	r0, sp, #4
2400f722:	463a      	mov	r2, r7
2400f724:	f7fd ff3e 	bl	2400d5a4 <find_volume>
	if (res == FR_OK) {
2400f728:	4605      	mov	r5, r0
2400f72a:	b128      	cbz	r0, 2400f738 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
2400f72c:	2300      	movs	r3, #0
2400f72e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
2400f730:	4628      	mov	r0, r5
2400f732:	b012      	add	sp, #72	; 0x48
2400f734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
2400f738:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
2400f73c:	a804      	add	r0, sp, #16
2400f73e:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
2400f740:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
2400f744:	f7fe ff82 	bl	2400e64c <follow_path>
		if (res == FR_OK) {
2400f748:	b9f0      	cbnz	r0, 2400f788 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
2400f74a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
2400f74e:	2b00      	cmp	r3, #0
2400f750:	db7e      	blt.n	2400f850 <f_open+0x148>
		if (Files[i].fs) {	/* Existing entry */
2400f752:	4b9d      	ldr	r3, [pc, #628]	; (2400f9c8 <f_open+0x2c0>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f754:	f027 0001 	bic.w	r0, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f758:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
2400f75a:	f8d3 9000 	ldr.w	r9, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f75e:	4601      	mov	r1, r0
				Files[i].clu == dp->obj.sclust &&
2400f760:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
2400f764:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
2400f768:	f1b9 0f00 	cmp.w	r9, #0
2400f76c:	f000 80d8 	beq.w	2400f920 <f_open+0x218>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f770:	4591      	cmp	r9, r2
2400f772:	d06f      	beq.n	2400f854 <f_open+0x14c>
		if (Files[i].fs) {	/* Existing entry */
2400f774:	f8d3 9010 	ldr.w	r9, [r3, #16]
2400f778:	f1b9 0f00 	cmp.w	r9, #0
2400f77c:	d071      	beq.n	2400f862 <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f77e:	454a      	cmp	r2, r9
2400f780:	f000 80e7 	beq.w	2400f952 <f_open+0x24a>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
2400f784:	2512      	movs	r5, #18
2400f786:	e7d1      	b.n	2400f72c <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400f788:	f016 0f1c 	tst.w	r6, #28
2400f78c:	d05e      	beq.n	2400f84c <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
2400f78e:	2804      	cmp	r0, #4
2400f790:	d15c      	bne.n	2400f84c <f_open+0x144>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
2400f792:	4b8d      	ldr	r3, [pc, #564]	; (2400f9c8 <f_open+0x2c0>)
2400f794:	681a      	ldr	r2, [r3, #0]
2400f796:	b112      	cbz	r2, 2400f79e <f_open+0x96>
2400f798:	691b      	ldr	r3, [r3, #16]
2400f79a:	2b00      	cmp	r3, #0
2400f79c:	d1f2      	bne.n	2400f784 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400f79e:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
2400f7a0:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2400f7a4:	f7ff f9c0 	bl	2400eb28 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400f7a8:	2800      	cmp	r0, #0
2400f7aa:	d14f      	bne.n	2400f84c <f_open+0x144>
				dw = GET_FATTIME();
2400f7ac:	f7fd fc14 	bl	2400cfd8 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
2400f7b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400f7b2:	0a02      	lsrs	r2, r0, #8
2400f7b4:	f8c3 000e 	str.w	r0, [r3, #14]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
2400f7b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400f7ba:	75da      	strb	r2, [r3, #23]
2400f7bc:	0c02      	lsrs	r2, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400f7be:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
2400f7c0:	0e00      	lsrs	r0, r0, #24
2400f7c2:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400f7c4:	2220      	movs	r2, #32
	*ptr++ = (BYTE)val;
2400f7c6:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
2400f7c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400f7ca:	72da      	strb	r2, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
2400f7cc:	f898 2000 	ldrb.w	r2, [r8]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
2400f7d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2400f7d2:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
2400f7d4:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f7d6:	d102      	bne.n	2400f7de <f_open+0xd6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400f7d8:	8a9a      	ldrh	r2, [r3, #20]
2400f7da:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
2400f7de:	2200      	movs	r2, #0
2400f7e0:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f7e2:	f898 1000 	ldrb.w	r1, [r8]
2400f7e6:	2903      	cmp	r1, #3
2400f7e8:	d100      	bne.n	2400f7ec <f_open+0xe4>
	*ptr++ = (BYTE)val; val >>= 8;
2400f7ea:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
2400f7ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
2400f7ee:	2200      	movs	r2, #0
2400f7f0:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
2400f7f2:	2301      	movs	r3, #1
2400f7f4:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
2400f7f8:	b186      	cbz	r6, 2400f81c <f_open+0x114>
						dw = fs->winsect;
2400f7fa:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
2400f7fe:	4631      	mov	r1, r6
2400f800:	a804      	add	r0, sp, #16
						dw = fs->winsect;
2400f802:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
2400f804:	f7ff fe32 	bl	2400f46c <remove_chain>
						if (res == FR_OK) {
2400f808:	9b00      	ldr	r3, [sp, #0]
2400f80a:	b9f8      	cbnz	r0, 2400f84c <f_open+0x144>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400f80c:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
2400f80e:	4619      	mov	r1, r3
2400f810:	4640      	mov	r0, r8
2400f812:	f7fd fe89 	bl	2400d528 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
2400f816:	f8c8 6010 	str.w	r6, [r8, #16]
		if (res == FR_OK) {
2400f81a:	b9b8      	cbnz	r0, 2400f84c <f_open+0x144>
				mode |= FA_MODIFIED;
2400f81c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f820:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f824:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f828:	3900      	subs	r1, #0
2400f82a:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
2400f82c:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f82e:	bf18      	it	ne
2400f830:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
2400f832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
2400f834:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f836:	f7fd fce9 	bl	2400d20c <inc_lock>
2400f83a:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
2400f83c:	b9e8      	cbnz	r0, 2400f87a <f_open+0x172>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400f83e:	2502      	movs	r5, #2
2400f840:	e774      	b.n	2400f72c <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
2400f842:	2509      	movs	r5, #9
}
2400f844:	4628      	mov	r0, r5
2400f846:	b012      	add	sp, #72	; 0x48
2400f848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2400f84c:	4605      	mov	r5, r0
2400f84e:	e76d      	b.n	2400f72c <f_open+0x24>
				res = FR_INVALID_NAME;
2400f850:	2506      	movs	r5, #6
2400f852:	e76b      	b.n	2400f72c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f854:	685a      	ldr	r2, [r3, #4]
2400f856:	4562      	cmp	r2, ip
2400f858:	f000 8084 	beq.w	2400f964 <f_open+0x25c>
		if (Files[i].fs) {	/* Existing entry */
2400f85c:	691a      	ldr	r2, [r3, #16]
2400f85e:	2a00      	cmp	r2, #0
2400f860:	d18d      	bne.n	2400f77e <f_open+0x76>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2400f862:	f016 0f1c 	tst.w	r6, #28
2400f866:	d048      	beq.n	2400f8fa <f_open+0x1f2>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
2400f868:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400f86c:	f013 0f11 	tst.w	r3, #17
2400f870:	d154      	bne.n	2400f91c <f_open+0x214>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
2400f872:	0773      	lsls	r3, r6, #29
2400f874:	d54f      	bpl.n	2400f916 <f_open+0x20e>
2400f876:	2508      	movs	r5, #8
2400f878:	e758      	b.n	2400f72c <f_open+0x24>
	if (fs->fs_type == FS_FAT32) {
2400f87a:	f898 2000 	ldrb.w	r2, [r8]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400f87e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
2400f880:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
2400f882:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
2400f884:	d102      	bne.n	2400f88c <f_open+0x184>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2400f886:	8a9a      	ldrh	r2, [r3, #20]
2400f888:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
2400f88c:	60a6      	str	r6, [r4, #8]
			fp->err = 0;			/* Clear error flag */
2400f88e:	2100      	movs	r1, #0
	rv = rv << 8 | ptr[0];
2400f890:	f8d3 901c 	ldr.w	r9, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
2400f894:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
2400f898:	f8c4 8000 	str.w	r8, [r4]
		*d++ = (BYTE)val;
2400f89c:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
2400f8a0:	f8c4 900c 	str.w	r9, [r4, #12]
		*d++ = (BYTE)val;
2400f8a4:	4650      	mov	r0, sl
			fp->obj.id = fs->id;
2400f8a6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
			fp->flag = mode;		/* Set file access mode */
2400f8aa:	7527      	strb	r7, [r4, #20]
			fp->obj.id = fs->id;
2400f8ac:	80a3      	strh	r3, [r4, #4]
			fp->err = 0;			/* Clear error flag */
2400f8ae:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
2400f8b0:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
2400f8b2:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
2400f8b4:	f00a f870 	bl	24019998 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
2400f8b8:	06bf      	lsls	r7, r7, #26
2400f8ba:	f57f af39 	bpl.w	2400f730 <f_open+0x28>
2400f8be:	f1b9 0f00 	cmp.w	r9, #0
2400f8c2:	f43f af35 	beq.w	2400f730 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
2400f8c6:	f8c4 9018 	str.w	r9, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400f8ca:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f8ce:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
2400f8d2:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f8d6:	d804      	bhi.n	2400f8e2 <f_open+0x1da>
2400f8d8:	e04a      	b.n	2400f970 <f_open+0x268>
2400f8da:	1c70      	adds	r0, r6, #1
2400f8dc:	d06c      	beq.n	2400f9b8 <f_open+0x2b0>
2400f8de:	454f      	cmp	r7, r9
2400f8e0:	d26a      	bcs.n	2400f9b8 <f_open+0x2b0>
					clst = get_fat(&fp->obj, clst);
2400f8e2:	4631      	mov	r1, r6
2400f8e4:	6820      	ldr	r0, [r4, #0]
2400f8e6:	f7fe f855 	bl	2400d994 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
2400f8ea:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2400f8ec:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
2400f8f0:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
2400f8f2:	d8f2      	bhi.n	2400f8da <f_open+0x1d2>
2400f8f4:	2502      	movs	r5, #2
				fp->clust = clst;
2400f8f6:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f8f8:	e718      	b.n	2400f72c <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
2400f8fa:	f89d 3016 	ldrb.w	r3, [sp, #22]
2400f8fe:	06da      	lsls	r2, r3, #27
2400f900:	d425      	bmi.n	2400f94e <f_open+0x246>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
2400f902:	07b2      	lsls	r2, r6, #30
2400f904:	d501      	bpl.n	2400f90a <f_open+0x202>
2400f906:	07db      	lsls	r3, r3, #31
2400f908:	d408      	bmi.n	2400f91c <f_open+0x214>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
2400f90a:	f006 0608 	and.w	r6, r6, #8
2400f90e:	2e00      	cmp	r6, #0
2400f910:	d184      	bne.n	2400f81c <f_open+0x114>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2400f912:	4601      	mov	r1, r0
2400f914:	e786      	b.n	2400f824 <f_open+0x11c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2400f916:	0730      	lsls	r0, r6, #28
2400f918:	d584      	bpl.n	2400f824 <f_open+0x11c>
2400f91a:	e747      	b.n	2400f7ac <f_open+0xa4>
						res = FR_DENIED;
2400f91c:	2507      	movs	r5, #7
2400f91e:	e705      	b.n	2400f72c <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
2400f920:	f8d3 9010 	ldr.w	r9, [r3, #16]
2400f924:	f1b9 0f00 	cmp.w	r9, #0
2400f928:	d09b      	beq.n	2400f862 <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f92a:	4591      	cmp	r9, r2
2400f92c:	d199      	bne.n	2400f862 <f_open+0x15a>
2400f92e:	695a      	ldr	r2, [r3, #20]
2400f930:	4562      	cmp	r2, ip
2400f932:	d196      	bne.n	2400f862 <f_open+0x15a>
				Files[i].clu == dp->obj.sclust &&
2400f934:	699a      	ldr	r2, [r3, #24]
2400f936:	4572      	cmp	r2, lr
2400f938:	d193      	bne.n	2400f862 <f_open+0x15a>
	for (i = be = 0; i < _FS_LOCK; i++) {
2400f93a:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
2400f93c:	b928      	cbnz	r0, 2400f94a <f_open+0x242>
2400f93e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
2400f942:	899b      	ldrh	r3, [r3, #12]
2400f944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400f948:	d18b      	bne.n	2400f862 <f_open+0x15a>
2400f94a:	2510      	movs	r5, #16
2400f94c:	e6ee      	b.n	2400f72c <f_open+0x24>
					res = FR_NO_FILE;
2400f94e:	2504      	movs	r5, #4
2400f950:	e6ec      	b.n	2400f72c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2400f952:	695a      	ldr	r2, [r3, #20]
2400f954:	4562      	cmp	r2, ip
2400f956:	f47f af15 	bne.w	2400f784 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
2400f95a:	699a      	ldr	r2, [r3, #24]
2400f95c:	4572      	cmp	r2, lr
2400f95e:	f47f af11 	bne.w	2400f784 <f_open+0x7c>
2400f962:	e7ea      	b.n	2400f93a <f_open+0x232>
2400f964:	689a      	ldr	r2, [r3, #8]
2400f966:	4572      	cmp	r2, lr
2400f968:	f47f af78 	bne.w	2400f85c <f_open+0x154>
	for (i = be = 0; i < _FS_LOCK; i++) {
2400f96c:	462a      	mov	r2, r5
2400f96e:	e7e5      	b.n	2400f93c <f_open+0x234>
				fp->clust = clst;
2400f970:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f972:	f3c9 0308 	ubfx	r3, r9, #0, #9
2400f976:	2b00      	cmp	r3, #0
2400f978:	f43f aeda 	beq.w	2400f730 <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f97c:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
2400f980:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400f982:	3b02      	subs	r3, #2
2400f984:	429e      	cmp	r6, r3
2400f986:	f4bf af5a 	bcs.w	2400f83e <f_open+0x136>
	return clst * fs->csize + fs->database;
2400f98a:	f8b8 200a 	ldrh.w	r2, [r8, #10]
2400f98e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
2400f992:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
2400f996:	2a00      	cmp	r2, #0
2400f998:	f43f af51 	beq.w	2400f83e <f_open+0x136>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400f99c:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400f9a0:	4651      	mov	r1, sl
2400f9a2:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
2400f9a4:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
2400f9a6:	f898 0001 	ldrb.w	r0, [r8, #1]
2400f9aa:	f7fd fc03 	bl	2400d1b4 <disk_read>
2400f9ae:	2800      	cmp	r0, #0
2400f9b0:	f43f aebe 	beq.w	2400f730 <f_open+0x28>
2400f9b4:	2501      	movs	r5, #1
2400f9b6:	e6b9      	b.n	2400f72c <f_open+0x24>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400f9b8:	1c71      	adds	r1, r6, #1
				fp->clust = clst;
2400f9ba:	61e6      	str	r6, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
2400f9bc:	bf0c      	ite	eq
2400f9be:	2301      	moveq	r3, #1
2400f9c0:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
2400f9c2:	d1d6      	bne.n	2400f972 <f_open+0x26a>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
2400f9c4:	461d      	mov	r5, r3
2400f9c6:	e6b1      	b.n	2400f72c <f_open+0x24>
2400f9c8:	2001decc 	.word	0x2001decc

2400f9cc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
2400f9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400f9d0:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
2400f9d2:	2300      	movs	r3, #0
{
2400f9d4:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
2400f9d6:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400f9d8:	b150      	cbz	r0, 2400f9f0 <f_read+0x24>
2400f9da:	6803      	ldr	r3, [r0, #0]
2400f9dc:	4604      	mov	r4, r0
2400f9de:	b13b      	cbz	r3, 2400f9f0 <f_read+0x24>
2400f9e0:	4691      	mov	r9, r2
2400f9e2:	781a      	ldrb	r2, [r3, #0]
2400f9e4:	b122      	cbz	r2, 2400f9f0 <f_read+0x24>
2400f9e6:	460d      	mov	r5, r1
2400f9e8:	88da      	ldrh	r2, [r3, #6]
2400f9ea:	8881      	ldrh	r1, [r0, #4]
2400f9ec:	4291      	cmp	r1, r2
2400f9ee:	d005      	beq.n	2400f9fc <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2400f9f0:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
2400f9f4:	4640      	mov	r0, r8
2400f9f6:	b005      	add	sp, #20
2400f9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400f9fc:	7858      	ldrb	r0, [r3, #1]
2400f9fe:	f7fd fbbd 	bl	2400d17c <disk_status>
2400fa02:	07c2      	lsls	r2, r0, #31
2400fa04:	d4f4      	bmi.n	2400f9f0 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400fa06:	f894 8015 	ldrb.w	r8, [r4, #21]
2400fa0a:	f1b8 0f00 	cmp.w	r8, #0
2400fa0e:	d1f1      	bne.n	2400f9f4 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400fa10:	7d23      	ldrb	r3, [r4, #20]
2400fa12:	f013 0301 	ands.w	r3, r3, #1
2400fa16:	9300      	str	r3, [sp, #0]
2400fa18:	f000 80cb 	beq.w	2400fbb2 <f_read+0x1e6>
	remain = fp->obj.objsize - fp->fptr;
2400fa1c:	69a3      	ldr	r3, [r4, #24]
2400fa1e:	68e7      	ldr	r7, [r4, #12]
2400fa20:	1aff      	subs	r7, r7, r3
2400fa22:	454f      	cmp	r7, r9
2400fa24:	bf28      	it	cs
2400fa26:	464f      	movcs	r7, r9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400fa28:	f8d4 9000 	ldr.w	r9, [r4]
	for ( ;  btr;								/* Repeat until all data read */
2400fa2c:	2f00      	cmp	r7, #0
2400fa2e:	d0e1      	beq.n	2400f9f4 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400fa30:	f104 022d 	add.w	r2, r4, #45	; 0x2d
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400fa34:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
2400fa38:	e9cd 2801 	strd	r2, r8, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400fa3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400fa40:	2a00      	cmp	r2, #0
2400fa42:	d140      	bne.n	2400fac6 <f_read+0xfa>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
2400fa44:	f8b9 200a 	ldrh.w	r2, [r9, #10]
2400fa48:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
2400fa4a:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
2400fa4e:	d06e      	beq.n	2400fb2e <f_read+0x162>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
2400fa50:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fa52:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
2400fa56:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fa58:	3b02      	subs	r3, #2
2400fa5a:	4298      	cmp	r0, r3
2400fa5c:	d274      	bcs.n	2400fb48 <f_read+0x17c>
	return clst * fs->csize + fs->database;
2400fa5e:	f8b9 100a 	ldrh.w	r1, [r9, #10]
2400fa62:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
2400fa66:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
2400fa6a:	2b00      	cmp	r3, #0
2400fa6c:	d06c      	beq.n	2400fb48 <f_read+0x17c>
			if (cc) {							/* Read maximum contiguous sectors directly */
2400fa6e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
2400fa72:	eb02 0b03 	add.w	fp, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
2400fa76:	d36e      	bcc.n	2400fb56 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400fa78:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
2400fa7c:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400fa80:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400fa82:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
2400fa86:	bf88      	it	hi
2400fa88:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400fa8c:	465a      	mov	r2, fp
2400fa8e:	4629      	mov	r1, r5
2400fa90:	4643      	mov	r3, r8
2400fa92:	f7fd fb8f 	bl	2400d1b4 <disk_read>
2400fa96:	2800      	cmp	r0, #0
2400fa98:	d172      	bne.n	2400fb80 <f_read+0x1b4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400fa9a:	f994 2014 	ldrsb.w	r2, [r4, #20]
2400fa9e:	2a00      	cmp	r2, #0
2400faa0:	f2c0 8097 	blt.w	2400fbd2 <f_read+0x206>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
2400faa4:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400faa8:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
2400faaa:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2400faac:	440d      	add	r5, r1
2400faae:	440b      	add	r3, r1
2400fab0:	61a3      	str	r3, [r4, #24]
2400fab2:	6833      	ldr	r3, [r6, #0]
2400fab4:	440b      	add	r3, r1
2400fab6:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
2400fab8:	f000 80a1 	beq.w	2400fbfe <f_read+0x232>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
2400fabc:	69a3      	ldr	r3, [r4, #24]
2400fabe:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400fac2:	2a00      	cmp	r2, #0
2400fac4:	d0be      	beq.n	2400fa44 <f_read+0x78>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
2400fac6:	1c50      	adds	r0, r2, #1
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400fac8:	f5c2 7100 	rsb	r1, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
2400facc:	eb0a 0302 	add.w	r3, sl, r2
2400fad0:	4450      	add	r0, sl
2400fad2:	42b9      	cmp	r1, r7
2400fad4:	eba5 0000 	sub.w	r0, r5, r0
2400fad8:	bf28      	it	cs
2400fada:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400fadc:	2802      	cmp	r0, #2
2400fade:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
2400fae2:	d95c      	bls.n	2400fb9e <f_read+0x1d2>
2400fae4:	f1bb 0f05 	cmp.w	fp, #5
2400fae8:	d959      	bls.n	2400fb9e <f_read+0x1d2>
2400faea:	f021 0e03 	bic.w	lr, r1, #3
2400faee:	461a      	mov	r2, r3
2400faf0:	4628      	mov	r0, r5
2400faf2:	449e      	add	lr, r3
			*d++ = *s++;
2400faf4:	f852 cb04 	ldr.w	ip, [r2], #4
2400faf8:	4572      	cmp	r2, lr
2400fafa:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
2400fafe:	d1f9      	bne.n	2400faf4 <f_read+0x128>
2400fb00:	f021 0203 	bic.w	r2, r1, #3
2400fb04:	4291      	cmp	r1, r2
2400fb06:	eb05 0002 	add.w	r0, r5, r2
2400fb0a:	eb03 0c02 	add.w	ip, r3, r2
2400fb0e:	d0cb      	beq.n	2400faa8 <f_read+0xdc>
			*d++ = *s++;
2400fb10:	5c9b      	ldrb	r3, [r3, r2]
		} while (--cnt);
2400fb12:	ebbb 0b02 	subs.w	fp, fp, r2
			*d++ = *s++;
2400fb16:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
2400fb18:	d0c6      	beq.n	2400faa8 <f_read+0xdc>
			*d++ = *s++;
2400fb1a:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
2400fb1e:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
2400fb22:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
2400fb24:	d0c0      	beq.n	2400faa8 <f_read+0xdc>
			*d++ = *s++;
2400fb26:	f89c 3002 	ldrb.w	r3, [ip, #2]
2400fb2a:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
2400fb2c:	e7bc      	b.n	2400faa8 <f_read+0xdc>
				if (fp->fptr == 0) {			/* On the top of the file? */
2400fb2e:	bb7b      	cbnz	r3, 2400fb90 <f_read+0x1c4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
2400fb30:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400fb32:	2801      	cmp	r0, #1
2400fb34:	d908      	bls.n	2400fb48 <f_read+0x17c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400fb36:	1c43      	adds	r3, r0, #1
2400fb38:	d022      	beq.n	2400fb80 <f_read+0x1b4>
				fp->clust = clst;				/* Update current cluster */
2400fb3a:	61e0      	str	r0, [r4, #28]
	clst -= 2;
2400fb3c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fb3e:	f8d9 3018 	ldr.w	r3, [r9, #24]
2400fb42:	3b02      	subs	r3, #2
2400fb44:	4298      	cmp	r0, r3
2400fb46:	d38a      	bcc.n	2400fa5e <f_read+0x92>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
2400fb48:	2302      	movs	r3, #2
2400fb4a:	4698      	mov	r8, r3
2400fb4c:	7563      	strb	r3, [r4, #21]
}
2400fb4e:	4640      	mov	r0, r8
2400fb50:	b005      	add	sp, #20
2400fb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
2400fb56:	6a22      	ldr	r2, [r4, #32]
2400fb58:	455a      	cmp	r2, fp
2400fb5a:	d00b      	beq.n	2400fb74 <f_read+0x1a8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
2400fb5c:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400fb60:	2b00      	cmp	r3, #0
2400fb62:	db29      	blt.n	2400fbb8 <f_read+0x1ec>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
2400fb64:	2301      	movs	r3, #1
2400fb66:	465a      	mov	r2, fp
2400fb68:	4651      	mov	r1, sl
2400fb6a:	f899 0001 	ldrb.w	r0, [r9, #1]
2400fb6e:	f7fd fb21 	bl	2400d1b4 <disk_read>
2400fb72:	b928      	cbnz	r0, 2400fb80 <f_read+0x1b4>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400fb74:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
2400fb76:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400fb7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400fb7e:	e7a2      	b.n	2400fac6 <f_read+0xfa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400fb80:	f8dd 8000 	ldr.w	r8, [sp]
2400fb84:	2301      	movs	r3, #1
}
2400fb86:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400fb88:	7563      	strb	r3, [r4, #21]
}
2400fb8a:	b005      	add	sp, #20
2400fb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
2400fb90:	69e1      	ldr	r1, [r4, #28]
2400fb92:	6820      	ldr	r0, [r4, #0]
2400fb94:	9203      	str	r2, [sp, #12]
2400fb96:	f7fd fefd 	bl	2400d994 <get_fat.isra.0>
2400fb9a:	9a03      	ldr	r2, [sp, #12]
2400fb9c:	e7c9      	b.n	2400fb32 <f_read+0x166>
2400fb9e:	1e6a      	subs	r2, r5, #1
2400fba0:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
2400fba4:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
2400fba8:	4563      	cmp	r3, ip
			*d++ = *s++;
2400fbaa:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2400fbae:	d1f9      	bne.n	2400fba4 <f_read+0x1d8>
2400fbb0:	e77a      	b.n	2400faa8 <f_read+0xdc>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
2400fbb2:	f04f 0807 	mov.w	r8, #7
2400fbb6:	e71d      	b.n	2400f9f4 <f_read+0x28>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400fbb8:	2301      	movs	r3, #1
2400fbba:	4651      	mov	r1, sl
2400fbbc:	f899 0001 	ldrb.w	r0, [r9, #1]
2400fbc0:	f7fd fb08 	bl	2400d1d4 <disk_write>
2400fbc4:	2800      	cmp	r0, #0
2400fbc6:	d1db      	bne.n	2400fb80 <f_read+0x1b4>
					fp->flag &= (BYTE)~FA_DIRTY;
2400fbc8:	7d23      	ldrb	r3, [r4, #20]
2400fbca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400fbce:	7523      	strb	r3, [r4, #20]
2400fbd0:	e7c8      	b.n	2400fb64 <f_read+0x198>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
2400fbd2:	6a22      	ldr	r2, [r4, #32]
2400fbd4:	eba2 020b 	sub.w	r2, r2, fp
2400fbd8:	4542      	cmp	r2, r8
2400fbda:	f4bf af63 	bcs.w	2400faa4 <f_read+0xd8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
2400fbde:	eb05 2242 	add.w	r2, r5, r2, lsl #9
2400fbe2:	9b01      	ldr	r3, [sp, #4]
2400fbe4:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400fbe6:	1ad0      	subs	r0, r2, r3
2400fbe8:	2802      	cmp	r0, #2
2400fbea:	d90b      	bls.n	2400fc04 <f_read+0x238>
2400fbec:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
2400fbf0:	f851 3b04 	ldr.w	r3, [r1], #4
2400fbf4:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
2400fbf8:	4562      	cmp	r2, ip
2400fbfa:	d1f9      	bne.n	2400fbf0 <f_read+0x224>
2400fbfc:	e752      	b.n	2400faa4 <f_read+0xd8>
2400fbfe:	f8dd 8008 	ldr.w	r8, [sp, #8]
2400fc02:	e6f7      	b.n	2400f9f4 <f_read+0x28>
2400fc04:	3a01      	subs	r2, #1
2400fc06:	f504 7c0b 	add.w	ip, r4, #556	; 0x22c
			*d++ = *s++;
2400fc0a:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
2400fc0e:	458c      	cmp	ip, r1
			*d++ = *s++;
2400fc10:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
2400fc14:	d1f9      	bne.n	2400fc0a <f_read+0x23e>
2400fc16:	e745      	b.n	2400faa4 <f_read+0xd8>

2400fc18 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
2400fc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2400fc1c:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
2400fc1e:	2300      	movs	r3, #0
{
2400fc20:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
2400fc22:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400fc24:	b150      	cbz	r0, 2400fc3c <f_write+0x24>
2400fc26:	6803      	ldr	r3, [r0, #0]
2400fc28:	4604      	mov	r4, r0
2400fc2a:	b13b      	cbz	r3, 2400fc3c <f_write+0x24>
2400fc2c:	4616      	mov	r6, r2
2400fc2e:	781a      	ldrb	r2, [r3, #0]
2400fc30:	b122      	cbz	r2, 2400fc3c <f_write+0x24>
2400fc32:	460d      	mov	r5, r1
2400fc34:	88da      	ldrh	r2, [r3, #6]
2400fc36:	8881      	ldrh	r1, [r0, #4]
2400fc38:	4291      	cmp	r1, r2
2400fc3a:	d005      	beq.n	2400fc48 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
2400fc3c:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
2400fc40:	4640      	mov	r0, r8
2400fc42:	b005      	add	sp, #20
2400fc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400fc48:	7858      	ldrb	r0, [r3, #1]
2400fc4a:	f7fd fa97 	bl	2400d17c <disk_status>
2400fc4e:	07c0      	lsls	r0, r0, #31
2400fc50:	d4f4      	bmi.n	2400fc3c <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
2400fc52:	f894 8015 	ldrb.w	r8, [r4, #21]
2400fc56:	f1b8 0f00 	cmp.w	r8, #0
2400fc5a:	d1f1      	bne.n	2400fc40 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2400fc5c:	7d22      	ldrb	r2, [r4, #20]
2400fc5e:	0791      	lsls	r1, r2, #30
2400fc60:	f140 80e6 	bpl.w	2400fe30 <f_write+0x218>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
2400fc64:	69a3      	ldr	r3, [r4, #24]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400fc66:	f8d4 9000 	ldr.w	r9, [r4]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
2400fc6a:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2400fc6c:	bf28      	it	cs
2400fc6e:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
2400fc70:	2e00      	cmp	r6, #0
2400fc72:	f000 80cf 	beq.w	2400fe14 <f_write+0x1fc>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400fc76:	f504 720b 	add.w	r2, r4, #556	; 0x22c
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400fc7a:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
2400fc7e:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400fc80:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400fc84:	2a00      	cmp	r2, #0
2400fc86:	d15e      	bne.n	2400fd46 <f_write+0x12e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
2400fc88:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
2400fc8c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
2400fc90:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
2400fc94:	d110      	bne.n	2400fcb8 <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
2400fc96:	2b00      	cmp	r3, #0
2400fc98:	f040 80b4 	bne.w	2400fe04 <f_write+0x1ec>
					clst = fp->obj.sclust;	/* Follow from the origin */
2400fc9c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
2400fc9e:	2800      	cmp	r0, #0
2400fca0:	f000 80c9 	beq.w	2400fe36 <f_write+0x21e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2400fca4:	2801      	cmp	r0, #1
2400fca6:	f000 8087 	beq.w	2400fdb8 <f_write+0x1a0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400fcaa:	1c43      	adds	r3, r0, #1
2400fcac:	f000 80a3 	beq.w	2400fdf6 <f_write+0x1de>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
2400fcb0:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
2400fcb2:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
2400fcb4:	b903      	cbnz	r3, 2400fcb8 <f_write+0xa0>
2400fcb6:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
2400fcb8:	f994 3014 	ldrsb.w	r3, [r4, #20]
2400fcbc:	2b00      	cmp	r3, #0
2400fcbe:	f2c0 808d 	blt.w	2400fddc <f_write+0x1c4>
	clst -= 2;
2400fcc2:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fcc4:	f8d9 2018 	ldr.w	r2, [r9, #24]
	clst -= 2;
2400fcc8:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
2400fcca:	3a02      	subs	r2, #2
2400fccc:	4293      	cmp	r3, r2
2400fcce:	d273      	bcs.n	2400fdb8 <f_write+0x1a0>
	return clst * fs->csize + fs->database;
2400fcd0:	f8b9 100a 	ldrh.w	r1, [r9, #10]
2400fcd4:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
2400fcd8:	fb01 2203 	mla	r2, r1, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
2400fcdc:	2a00      	cmp	r2, #0
2400fcde:	d06b      	beq.n	2400fdb8 <f_write+0x1a0>
			if (cc) {						/* Write maximum contiguous sectors directly */
2400fce0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
2400fce4:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
2400fce6:	d36e      	bcc.n	2400fdc6 <f_write+0x1ae>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400fce8:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
2400fcec:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
2400fcee:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400fcf0:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
2400fcf4:	bf88      	it	hi
2400fcf6:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400fcfa:	4629      	mov	r1, r5
2400fcfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
2400fd00:	f7fd fa68 	bl	2400d1d4 <disk_write>
2400fd04:	2800      	cmp	r0, #0
2400fd06:	d176      	bne.n	2400fdf6 <f_write+0x1de>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
2400fd08:	6a21      	ldr	r1, [r4, #32]
2400fd0a:	9a02      	ldr	r2, [sp, #8]
2400fd0c:	9b03      	ldr	r3, [sp, #12]
2400fd0e:	1a8a      	subs	r2, r1, r2
2400fd10:	429a      	cmp	r2, r3
2400fd12:	f0c0 80a4 	bcc.w	2400fe5e <f_write+0x246>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
2400fd16:	eb05 2243 	add.w	r2, r5, r3, lsl #9
2400fd1a:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2400fd1e:	69a3      	ldr	r3, [r4, #24]
2400fd20:	4615      	mov	r5, r2
2400fd22:	68e2      	ldr	r2, [r4, #12]
2400fd24:	4463      	add	r3, ip
2400fd26:	429a      	cmp	r2, r3
2400fd28:	61a3      	str	r3, [r4, #24]
2400fd2a:	bf38      	it	cc
2400fd2c:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
2400fd2e:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
2400fd32:	60e2      	str	r2, [r4, #12]
2400fd34:	683b      	ldr	r3, [r7, #0]
2400fd36:	4463      	add	r3, ip
2400fd38:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
2400fd3a:	d06a      	beq.n	2400fe12 <f_write+0x1fa>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
2400fd3c:	69a3      	ldr	r3, [r4, #24]
2400fd3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400fd42:	2a00      	cmp	r2, #0
2400fd44:	d0a0      	beq.n	2400fc88 <f_write+0x70>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400fd46:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
2400fd4a:	eb0a 0302 	add.w	r3, sl, r2
2400fd4e:	1c6a      	adds	r2, r5, #1
2400fd50:	45b4      	cmp	ip, r6
2400fd52:	eba3 0202 	sub.w	r2, r3, r2
2400fd56:	bf28      	it	cs
2400fd58:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400fd5a:	2a02      	cmp	r2, #2
2400fd5c:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
2400fd60:	d95c      	bls.n	2400fe1c <f_write+0x204>
2400fd62:	f1bb 0f05 	cmp.w	fp, #5
2400fd66:	d959      	bls.n	2400fe1c <f_write+0x204>
2400fd68:	f02c 0e03 	bic.w	lr, ip, #3
2400fd6c:	461a      	mov	r2, r3
2400fd6e:	4629      	mov	r1, r5
2400fd70:	449e      	add	lr, r3
			*d++ = *s++;
2400fd72:	f851 0b04 	ldr.w	r0, [r1], #4
2400fd76:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
2400fd7a:	4596      	cmp	lr, r2
2400fd7c:	d1f9      	bne.n	2400fd72 <f_write+0x15a>
2400fd7e:	f02c 0103 	bic.w	r1, ip, #3
2400fd82:	458c      	cmp	ip, r1
2400fd84:	eb03 0001 	add.w	r0, r3, r1
2400fd88:	eb05 0201 	add.w	r2, r5, r1
2400fd8c:	d00f      	beq.n	2400fdae <f_write+0x196>
			*d++ = *s++;
2400fd8e:	f815 e001 	ldrb.w	lr, [r5, r1]
		} while (--cnt);
2400fd92:	ebbb 0b01 	subs.w	fp, fp, r1
			*d++ = *s++;
2400fd96:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
2400fd9a:	d006      	beq.n	2400fdaa <f_write+0x192>
			*d++ = *s++;
2400fd9c:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
2400fd9e:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
2400fda2:	7043      	strb	r3, [r0, #1]
2400fda4:	bf1c      	itt	ne
2400fda6:	7893      	ldrbne	r3, [r2, #2]
2400fda8:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
2400fdaa:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
2400fdae:	7d23      	ldrb	r3, [r4, #20]
2400fdb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
2400fdb4:	7523      	strb	r3, [r4, #20]
2400fdb6:	e7b2      	b.n	2400fd1e <f_write+0x106>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
2400fdb8:	2302      	movs	r3, #2
2400fdba:	4698      	mov	r8, r3
2400fdbc:	7563      	strb	r3, [r4, #21]
}
2400fdbe:	4640      	mov	r0, r8
2400fdc0:	b005      	add	sp, #20
2400fdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2400fdc6:	6a23      	ldr	r3, [r4, #32]
2400fdc8:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
2400fdca:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
2400fdcc:	d002      	beq.n	2400fdd4 <f_write+0x1bc>
2400fdce:	68e1      	ldr	r1, [r4, #12]
2400fdd0:	428b      	cmp	r3, r1
2400fdd2:	d338      	bcc.n	2400fe46 <f_write+0x22e>
			fp->sect = sect;
2400fdd4:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400fdd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400fdda:	e7b4      	b.n	2400fd46 <f_write+0x12e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
2400fddc:	2301      	movs	r3, #1
2400fdde:	6a22      	ldr	r2, [r4, #32]
2400fde0:	4651      	mov	r1, sl
2400fde2:	f899 0001 	ldrb.w	r0, [r9, #1]
2400fde6:	f7fd f9f5 	bl	2400d1d4 <disk_write>
2400fdea:	b920      	cbnz	r0, 2400fdf6 <f_write+0x1de>
				fp->flag &= (BYTE)~FA_DIRTY;
2400fdec:	7d23      	ldrb	r3, [r4, #20]
2400fdee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400fdf2:	7523      	strb	r3, [r4, #20]
2400fdf4:	e765      	b.n	2400fcc2 <f_write+0xaa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
2400fdf6:	2301      	movs	r3, #1
2400fdf8:	4698      	mov	r8, r3
2400fdfa:	7563      	strb	r3, [r4, #21]
}
2400fdfc:	4640      	mov	r0, r8
2400fdfe:	b005      	add	sp, #20
2400fe00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
2400fe04:	69e1      	ldr	r1, [r4, #28]
2400fe06:	4620      	mov	r0, r4
2400fe08:	f7fe f86c 	bl	2400dee4 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2400fe0c:	2800      	cmp	r0, #0
2400fe0e:	f47f af49 	bne.w	2400fca4 <f_write+0x8c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
2400fe12:	7d22      	ldrb	r2, [r4, #20]
2400fe14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2400fe18:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
2400fe1a:	e711      	b.n	2400fc40 <f_write+0x28>
2400fe1c:	3b01      	subs	r3, #1
2400fe1e:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
2400fe22:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
2400fe26:	4295      	cmp	r5, r2
			*d++ = *s++;
2400fe28:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
2400fe2c:	d1f9      	bne.n	2400fe22 <f_write+0x20a>
2400fe2e:	e7be      	b.n	2400fdae <f_write+0x196>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
2400fe30:	f04f 0807 	mov.w	r8, #7
2400fe34:	e704      	b.n	2400fc40 <f_write+0x28>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
2400fe36:	4659      	mov	r1, fp
2400fe38:	4620      	mov	r0, r4
2400fe3a:	f7fe f853 	bl	2400dee4 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
2400fe3e:	2800      	cmp	r0, #0
2400fe40:	f47f af30 	bne.w	2400fca4 <f_write+0x8c>
2400fe44:	e7e5      	b.n	2400fe12 <f_write+0x1fa>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
2400fe46:	2301      	movs	r3, #1
2400fe48:	4651      	mov	r1, sl
2400fe4a:	f899 0001 	ldrb.w	r0, [r9, #1]
2400fe4e:	9202      	str	r2, [sp, #8]
2400fe50:	f7fd f9b0 	bl	2400d1b4 <disk_read>
				fp->fptr < fp->obj.objsize &&
2400fe54:	2800      	cmp	r0, #0
2400fe56:	d1ce      	bne.n	2400fdf6 <f_write+0x1de>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
2400fe58:	69a3      	ldr	r3, [r4, #24]
2400fe5a:	9a02      	ldr	r2, [sp, #8]
2400fe5c:	e7ba      	b.n	2400fdd4 <f_write+0x1bc>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
2400fe5e:	eb05 2042 	add.w	r0, r5, r2, lsl #9
2400fe62:	1c42      	adds	r2, r0, #1
2400fe64:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
2400fe66:	ebaa 0202 	sub.w	r2, sl, r2
2400fe6a:	2a02      	cmp	r2, #2
2400fe6c:	d90d      	bls.n	2400fe8a <f_write+0x272>
2400fe6e:	4652      	mov	r2, sl
2400fe70:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
2400fe74:	f851 0b04 	ldr.w	r0, [r1], #4
2400fe78:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
2400fe7c:	4562      	cmp	r2, ip
2400fe7e:	d1f9      	bne.n	2400fe74 <f_write+0x25c>
					fp->flag &= (BYTE)~FA_DIRTY;
2400fe80:	7d22      	ldrb	r2, [r4, #20]
2400fe82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2400fe86:	7522      	strb	r2, [r4, #20]
2400fe88:	e745      	b.n	2400fd16 <f_write+0xfe>
2400fe8a:	f104 022b 	add.w	r2, r4, #43	; 0x2b
2400fe8e:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
2400fe92:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
2400fe96:	458c      	cmp	ip, r1
			*d++ = *s++;
2400fe98:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
2400fe9c:	d1f9      	bne.n	2400fe92 <f_write+0x27a>
2400fe9e:	e7ef      	b.n	2400fe80 <f_write+0x268>

2400fea0 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400fea0:	b158      	cbz	r0, 2400feba <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
2400fea2:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400fea4:	6803      	ldr	r3, [r0, #0]
2400fea6:	4604      	mov	r4, r0
2400fea8:	b12b      	cbz	r3, 2400feb6 <f_close+0x16>
2400feaa:	781a      	ldrb	r2, [r3, #0]
2400feac:	b11a      	cbz	r2, 2400feb6 <f_close+0x16>
2400feae:	8881      	ldrh	r1, [r0, #4]
2400feb0:	88da      	ldrh	r2, [r3, #6]
2400feb2:	4291      	cmp	r1, r2
2400feb4:	d003      	beq.n	2400febe <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
2400feb6:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
2400feb8:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
2400feba:	2009      	movs	r0, #9
}
2400febc:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400febe:	7858      	ldrb	r0, [r3, #1]
2400fec0:	f7fd f95c 	bl	2400d17c <disk_status>
2400fec4:	07c1      	lsls	r1, r0, #31
2400fec6:	d4f6      	bmi.n	2400feb6 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2400fec8:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
2400feca:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
2400fecc:	065a      	lsls	r2, r3, #25
2400fece:	d52e      	bpl.n	2400ff2e <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
2400fed0:	061b      	lsls	r3, r3, #24
2400fed2:	d451      	bmi.n	2400ff78 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
2400fed4:	f7fd f880 	bl	2400cfd8 <get_fattime>
				res = move_window(fs, fp->dir_sect);
2400fed8:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
2400feda:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
2400fedc:	4628      	mov	r0, r5
2400fede:	f7fd fb23 	bl	2400d528 <move_window>
				if (res == FR_OK) {
2400fee2:	2800      	cmp	r0, #0
2400fee4:	d1e8      	bne.n	2400feb8 <f_close+0x18>
					dir = fp->dir_ptr;
2400fee6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
2400fee8:	7ada      	ldrb	r2, [r3, #11]
2400feea:	f042 0220 	orr.w	r2, r2, #32
2400feee:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
2400fef0:	68a2      	ldr	r2, [r4, #8]
2400fef2:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
2400fef4:	f3c2 2007 	ubfx	r0, r2, #8, #8
2400fef8:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
2400fefa:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
2400fefc:	7809      	ldrb	r1, [r1, #0]
2400fefe:	2903      	cmp	r1, #3
2400ff00:	d103      	bne.n	2400ff0a <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
2400ff02:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
2400ff04:	751a      	strb	r2, [r3, #20]
2400ff06:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
2400ff08:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
2400ff0a:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
2400ff0c:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
2400ff0e:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
2400ff12:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
2400ff14:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
2400ff16:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
2400ff18:	2301      	movs	r3, #1
2400ff1a:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
2400ff1c:	f7fd ff84 	bl	2400de28 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
2400ff20:	7d23      	ldrb	r3, [r4, #20]
2400ff22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2400ff26:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
2400ff28:	2800      	cmp	r0, #0
2400ff2a:	d1c5      	bne.n	2400feb8 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400ff2c:	6825      	ldr	r5, [r4, #0]
2400ff2e:	2d00      	cmp	r5, #0
2400ff30:	d0c1      	beq.n	2400feb6 <f_close+0x16>
2400ff32:	782b      	ldrb	r3, [r5, #0]
2400ff34:	2b00      	cmp	r3, #0
2400ff36:	d0be      	beq.n	2400feb6 <f_close+0x16>
2400ff38:	88a2      	ldrh	r2, [r4, #4]
2400ff3a:	88eb      	ldrh	r3, [r5, #6]
2400ff3c:	429a      	cmp	r2, r3
2400ff3e:	d1ba      	bne.n	2400feb6 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400ff40:	7868      	ldrb	r0, [r5, #1]
2400ff42:	f7fd f91b 	bl	2400d17c <disk_status>
2400ff46:	f010 0001 	ands.w	r0, r0, #1
2400ff4a:	d1b4      	bne.n	2400feb6 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
2400ff4c:	6923      	ldr	r3, [r4, #16]
2400ff4e:	3b01      	subs	r3, #1
2400ff50:	2b01      	cmp	r3, #1
2400ff52:	d81e      	bhi.n	2400ff92 <f_close+0xf2>
		n = Files[i].ctr;
2400ff54:	4912      	ldr	r1, [pc, #72]	; (2400ffa0 <f_close+0x100>)
2400ff56:	011d      	lsls	r5, r3, #4
2400ff58:	eb01 1303 	add.w	r3, r1, r3, lsl #4
2400ff5c:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
2400ff5e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
2400ff62:	d01a      	beq.n	2400ff9a <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
2400ff64:	b11a      	cbz	r2, 2400ff6e <f_close+0xce>
2400ff66:	3a01      	subs	r2, #1
2400ff68:	b292      	uxth	r2, r2
		Files[i].ctr = n;
2400ff6a:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2400ff6c:	b90a      	cbnz	r2, 2400ff72 <f_close+0xd2>
2400ff6e:	2300      	movs	r3, #0
2400ff70:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
2400ff72:	2300      	movs	r3, #0
2400ff74:	6023      	str	r3, [r4, #0]
}
2400ff76:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2400ff78:	2301      	movs	r3, #1
2400ff7a:	6a22      	ldr	r2, [r4, #32]
2400ff7c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
2400ff80:	7868      	ldrb	r0, [r5, #1]
2400ff82:	f7fd f927 	bl	2400d1d4 <disk_write>
2400ff86:	b930      	cbnz	r0, 2400ff96 <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
2400ff88:	7d23      	ldrb	r3, [r4, #20]
2400ff8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400ff8e:	7523      	strb	r3, [r4, #20]
2400ff90:	e7a0      	b.n	2400fed4 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
2400ff92:	2002      	movs	r0, #2
}
2400ff94:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
2400ff96:	2001      	movs	r0, #1
}
2400ff98:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
2400ff9a:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
2400ff9c:	e7e7      	b.n	2400ff6e <f_close+0xce>
2400ff9e:	bf00      	nop
2400ffa0:	2001decc 	.word	0x2001decc

2400ffa4 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
2400ffa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400ffa8:	b150      	cbz	r0, 2400ffc0 <f_findnext+0x1c>
2400ffaa:	4605      	mov	r5, r0
2400ffac:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2400ffae:	4c3b      	ldr	r4, [pc, #236]	; (2401009c <f_findnext+0xf8>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
2400ffb0:	682b      	ldr	r3, [r5, #0]
2400ffb2:	b12b      	cbz	r3, 2400ffc0 <f_findnext+0x1c>
2400ffb4:	781a      	ldrb	r2, [r3, #0]
2400ffb6:	b11a      	cbz	r2, 2400ffc0 <f_findnext+0x1c>
2400ffb8:	88a9      	ldrh	r1, [r5, #4]
2400ffba:	88da      	ldrh	r2, [r3, #6]
2400ffbc:	4291      	cmp	r1, r2
2400ffbe:	d003      	beq.n	2400ffc8 <f_findnext+0x24>
	FRESULT res = FR_INVALID_OBJECT;
2400ffc0:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
2400ffc2:	4638      	mov	r0, r7
2400ffc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
2400ffc8:	7858      	ldrb	r0, [r3, #1]
2400ffca:	f7fd f8d7 	bl	2400d17c <disk_status>
2400ffce:	07c3      	lsls	r3, r0, #31
2400ffd0:	d4f6      	bmi.n	2400ffc0 <f_findnext+0x1c>
		if (!fno) {
2400ffd2:	2e00      	cmp	r6, #0
2400ffd4:	d059      	beq.n	2401008a <f_findnext+0xe6>
			res = dir_read(dp, 0);			/* Read an item */
2400ffd6:	4628      	mov	r0, r5
2400ffd8:	f7fd fd32 	bl	2400da40 <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
2400ffdc:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
2400ffe0:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
2400ffe2:	d1ee      	bne.n	2400ffc2 <f_findnext+0x1e>
				get_fileinfo(dp, fno);		/* Get the object information */
2400ffe4:	4631      	mov	r1, r6
2400ffe6:	4628      	mov	r0, r5
2400ffe8:	f7fd f9de 	bl	2400d3a8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
2400ffec:	4641      	mov	r1, r8
2400ffee:	4628      	mov	r0, r5
2400fff0:	f7fe fcb8 	bl	2400e964 <dir_next>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
2400fff4:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
2400fff8:	d14d      	bne.n	24010096 <f_findnext+0xf2>
2400fffa:	7db3      	ldrb	r3, [r6, #22]
2400fffc:	2b00      	cmp	r3, #0
2400fffe:	d0e0      	beq.n	2400ffc2 <f_findnext+0x1e>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
24010000:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
24010004:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
24010008:	e00f      	b.n	2401002a <f_findnext+0x86>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2401000a:	3a20      	subs	r2, #32
2401000c:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2401000e:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
24010012:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
24010016:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
24010018:	f1be 0f19 	cmp.w	lr, #25
2401001c:	d817      	bhi.n	2401004e <f_findnext+0xaa>
2401001e:	3b20      	subs	r3, #32
24010020:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
24010022:	4293      	cmp	r3, r2
24010024:	d1c4      	bne.n	2400ffb0 <f_findnext+0xc>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
24010026:	2b00      	cmp	r3, #0
24010028:	d0cb      	beq.n	2400ffc2 <f_findnext+0x1e>
2401002a:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2401002c:	f81c 3b01 	ldrb.w	r3, [ip], #1
24010030:	2b3f      	cmp	r3, #63	; 0x3f
24010032:	d012      	beq.n	2401005a <f_findnext+0xb6>
24010034:	2b2a      	cmp	r3, #42	; 0x2a
24010036:	d010      	beq.n	2401005a <f_findnext+0xb6>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
24010038:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2401003c:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2401003e:	2819      	cmp	r0, #25
24010040:	d9e3      	bls.n	2401000a <f_findnext+0x66>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
24010042:	2a7f      	cmp	r2, #127	; 0x7f
24010044:	d9e3      	bls.n	2401000e <f_findnext+0x6a>
24010046:	4423      	add	r3, r4
24010048:	f813 2c80 	ldrb.w	r2, [r3, #-128]
2401004c:	e7df      	b.n	2401000e <f_findnext+0x6a>
2401004e:	2b7f      	cmp	r3, #127	; 0x7f
24010050:	d9e7      	bls.n	24010022 <f_findnext+0x7e>
24010052:	4420      	add	r0, r4
24010054:	f810 3c80 	ldrb.w	r3, [r0, #-128]
24010058:	e7e3      	b.n	24010022 <f_findnext+0x7e>
2401005a:	4694      	mov	ip, r2
				nm = nx = 0;
2401005c:	2300      	movs	r3, #0
2401005e:	f81c eb01 	ldrb.w	lr, [ip], #1
24010062:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
24010064:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
24010068:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
2401006a:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
2401006e:	bf0c      	ite	eq
24010070:	3201      	addeq	r2, #1
24010072:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
24010074:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
24010078:	d0f4      	beq.n	24010064 <f_findnext+0xc0>
2401007a:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
2401007e:	d0f1      	beq.n	24010064 <f_findnext+0xc0>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
24010080:	f7fd f91c 	bl	2400d2bc <pattern_matching>
24010084:	2800      	cmp	r0, #0
24010086:	d093      	beq.n	2400ffb0 <f_findnext+0xc>
24010088:	e79b      	b.n	2400ffc2 <f_findnext+0x1e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
2401008a:	4631      	mov	r1, r6
2401008c:	4628      	mov	r0, r5
}
2401008e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
24010092:	f7fd bfe7 	b.w	2400e064 <dir_sdi>
24010096:	4607      	mov	r7, r0
24010098:	e793      	b.n	2400ffc2 <f_findnext+0x1e>
2401009a:	bf00      	nop
2401009c:	2401c870 	.word	0x2401c870

240100a0 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
240100a0:	b570      	push	{r4, r5, r6, lr}
240100a2:	b082      	sub	sp, #8
240100a4:	4615      	mov	r5, r2
240100a6:	4604      	mov	r4, r0
240100a8:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
240100aa:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
240100ac:	2200      	movs	r2, #0
240100ae:	a901      	add	r1, sp, #4
240100b0:	4668      	mov	r0, sp
240100b2:	9500      	str	r5, [sp, #0]
240100b4:	f7fd fa76 	bl	2400d5a4 <find_volume>
	if (res == FR_OK) {
240100b8:	b118      	cbz	r0, 240100c2 <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
240100ba:	2300      	movs	r3, #0
240100bc:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
240100be:	b002      	add	sp, #8
240100c0:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
240100c2:	e9dd 1500 	ldrd	r1, r5, [sp]
240100c6:	4620      	mov	r0, r4
		obj->fs = fs;
240100c8:	6025      	str	r5, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
240100ca:	f7fe fabf 	bl	2400e64c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
240100ce:	bb00      	cbnz	r0, 24010112 <f_findfirst+0x72>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
240100d0:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
240100d4:	2b00      	cmp	r3, #0
240100d6:	db0b      	blt.n	240100f0 <f_findfirst+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
240100d8:	79a3      	ldrb	r3, [r4, #6]
240100da:	06db      	lsls	r3, r3, #27
240100dc:	d51f      	bpl.n	2401011e <f_findfirst+0x7e>
	if (fs->fs_type == FS_FAT32) {
240100de:	7829      	ldrb	r1, [r5, #0]
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
240100e0:	6a22      	ldr	r2, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
240100e2:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
240100e4:	8b53      	ldrh	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
240100e6:	d102      	bne.n	240100ee <f_findfirst+0x4e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
240100e8:	8a92      	ldrh	r2, [r2, #20]
240100ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
240100ee:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
240100f0:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
240100f2:	2100      	movs	r1, #0
240100f4:	4620      	mov	r0, r4
				obj->id = fs->id;
240100f6:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
240100f8:	f7fd ffb4 	bl	2400e064 <dir_sdi>
				if (res == FR_OK) {
240100fc:	b948      	cbnz	r0, 24010112 <f_findfirst+0x72>
					if (obj->sclust) {
240100fe:	68a3      	ldr	r3, [r4, #8]
24010100:	b97b      	cbnz	r3, 24010122 <f_findfirst+0x82>
						obj->lockid = 0;	/* Root directory need not to be locked */
24010102:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
24010104:	4631      	mov	r1, r6
24010106:	4620      	mov	r0, r4
}
24010108:	b002      	add	sp, #8
2401010a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
2401010e:	f7ff bf49 	b.w	2400ffa4 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
24010112:	2804      	cmp	r0, #4
24010114:	d1d1      	bne.n	240100ba <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
24010116:	2300      	movs	r3, #0
	res = f_opendir(dp, path);		/* Open the target directory */
24010118:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
2401011a:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
2401011c:	e7cf      	b.n	240100be <f_findfirst+0x1e>
					res = FR_NO_PATH;
2401011e:	2005      	movs	r0, #5
24010120:	e7cb      	b.n	240100ba <f_findfirst+0x1a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
24010122:	4601      	mov	r1, r0
24010124:	4620      	mov	r0, r4
24010126:	f7fd f871 	bl	2400d20c <inc_lock>
2401012a:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
2401012c:	2800      	cmp	r0, #0
2401012e:	d1e9      	bne.n	24010104 <f_findfirst+0x64>
24010130:	2012      	movs	r0, #18
24010132:	e7c2      	b.n	240100ba <f_findfirst+0x1a>

24010134 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
24010134:	b530      	push	{r4, r5, lr}
24010136:	b0a1      	sub	sp, #132	; 0x84
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
24010138:	2202      	movs	r2, #2
{
2401013a:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
2401013c:	a903      	add	r1, sp, #12
2401013e:	a801      	add	r0, sp, #4
24010140:	f7fd fa30 	bl	2400d5a4 <find_volume>
	dj.obj.fs = fs;
24010144:	9c03      	ldr	r4, [sp, #12]
24010146:	9404      	str	r4, [sp, #16]
	if (res == FR_OK) {
24010148:	b108      	cbz	r0, 2401014e <f_unlink+0x1a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
2401014a:	b021      	add	sp, #132	; 0x84
2401014c:	bd30      	pop	{r4, r5, pc}
		res = follow_path(&dj, path);		/* Follow the file path */
2401014e:	9901      	ldr	r1, [sp, #4]
24010150:	a804      	add	r0, sp, #16
24010152:	f7fe fa7b 	bl	2400e64c <follow_path>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
24010156:	2800      	cmp	r0, #0
24010158:	d1f7      	bne.n	2401014a <f_unlink+0x16>
		if (Files[i].fs) {	/* Existing entry */
2401015a:	4b28      	ldr	r3, [pc, #160]	; (240101fc <f_unlink+0xc8>)
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2401015c:	9904      	ldr	r1, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
2401015e:	681a      	ldr	r2, [r3, #0]
				Files[i].clu == dp->obj.sclust &&
24010160:	9806      	ldr	r0, [sp, #24]
				Files[i].ofs == dp->dptr) break;
24010162:	9d09      	ldr	r5, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
24010164:	b10a      	cbz	r2, 2401016a <f_unlink+0x36>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
24010166:	428a      	cmp	r2, r1
24010168:	d029      	beq.n	240101be <f_unlink+0x8a>
		if (Files[i].fs) {	/* Existing entry */
2401016a:	691a      	ldr	r2, [r3, #16]
2401016c:	b10a      	cbz	r2, 24010172 <f_unlink+0x3e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
2401016e:	428a      	cmp	r2, r1
24010170:	d02d      	beq.n	240101ce <f_unlink+0x9a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
24010172:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
24010176:	2b00      	cmp	r3, #0
24010178:	db1f      	blt.n	240101ba <f_unlink+0x86>
				if (dj.obj.attr & AM_RDO) {
2401017a:	f89d 3016 	ldrb.w	r3, [sp, #22]
2401017e:	07da      	lsls	r2, r3, #31
24010180:	d419      	bmi.n	240101b6 <f_unlink+0x82>
	if (fs->fs_type == FS_FAT32) {
24010182:	7821      	ldrb	r1, [r4, #0]
					dclst = ld_clust(fs, dj.dir);
24010184:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
24010186:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
24010188:	8b55      	ldrh	r5, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
2401018a:	d102      	bne.n	24010192 <f_unlink+0x5e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
2401018c:	8a92      	ldrh	r2, [r2, #20]
2401018e:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
24010192:	06db      	lsls	r3, r3, #27
24010194:	d422      	bmi.n	240101dc <f_unlink+0xa8>
				res = dir_remove(&dj);			/* Remove the directory entry */
24010196:	a804      	add	r0, sp, #16
24010198:	f7fe f810 	bl	2400e1bc <dir_remove>
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
2401019c:	b928      	cbnz	r0, 240101aa <f_unlink+0x76>
2401019e:	b125      	cbz	r5, 240101aa <f_unlink+0x76>
					res = remove_chain(&dj.obj, dclst, 0);
240101a0:	2200      	movs	r2, #0
240101a2:	4629      	mov	r1, r5
240101a4:	a804      	add	r0, sp, #16
240101a6:	f7ff f961 	bl	2400f46c <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
240101aa:	2800      	cmp	r0, #0
240101ac:	d1cd      	bne.n	2401014a <f_unlink+0x16>
240101ae:	4620      	mov	r0, r4
240101b0:	f7fd fe3a 	bl	2400de28 <sync_fs>
240101b4:	e7c9      	b.n	2401014a <f_unlink+0x16>
					res = FR_DENIED;		/* Cannot remove R/O object */
240101b6:	2007      	movs	r0, #7
240101b8:	e7c7      	b.n	2401014a <f_unlink+0x16>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
240101ba:	2006      	movs	r0, #6
240101bc:	e7c5      	b.n	2401014a <f_unlink+0x16>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
240101be:	685a      	ldr	r2, [r3, #4]
240101c0:	4282      	cmp	r2, r0
240101c2:	d1d2      	bne.n	2401016a <f_unlink+0x36>
				Files[i].clu == dp->obj.sclust &&
240101c4:	689a      	ldr	r2, [r3, #8]
240101c6:	42aa      	cmp	r2, r5
240101c8:	d1cf      	bne.n	2401016a <f_unlink+0x36>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
240101ca:	2010      	movs	r0, #16
240101cc:	e7bd      	b.n	2401014a <f_unlink+0x16>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
240101ce:	695a      	ldr	r2, [r3, #20]
240101d0:	4282      	cmp	r2, r0
240101d2:	d1ce      	bne.n	24010172 <f_unlink+0x3e>
				Files[i].clu == dp->obj.sclust &&
240101d4:	699b      	ldr	r3, [r3, #24]
240101d6:	42ab      	cmp	r3, r5
240101d8:	d1cb      	bne.n	24010172 <f_unlink+0x3e>
240101da:	e7f6      	b.n	240101ca <f_unlink+0x96>
						res = dir_sdi(&sdj, 0);
240101dc:	2100      	movs	r1, #0
240101de:	a812      	add	r0, sp, #72	; 0x48
						sdj.obj.fs = fs;						/* Open the sub-directory */
240101e0:	9412      	str	r4, [sp, #72]	; 0x48
						sdj.obj.sclust = dclst;
240101e2:	9514      	str	r5, [sp, #80]	; 0x50
						res = dir_sdi(&sdj, 0);
240101e4:	f7fd ff3e 	bl	2400e064 <dir_sdi>
						if (res == FR_OK) {
240101e8:	2800      	cmp	r0, #0
240101ea:	d1ae      	bne.n	2401014a <f_unlink+0x16>
							res = dir_read(&sdj, 0);			/* Read an item */
240101ec:	a812      	add	r0, sp, #72	; 0x48
240101ee:	f7fd fc27 	bl	2400da40 <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
240101f2:	2800      	cmp	r0, #0
240101f4:	d0df      	beq.n	240101b6 <f_unlink+0x82>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
240101f6:	2804      	cmp	r0, #4
240101f8:	d1a7      	bne.n	2401014a <f_unlink+0x16>
240101fa:	e7cc      	b.n	24010196 <f_unlink+0x62>
240101fc:	2001decc 	.word	0x2001decc

24010200 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
24010200:	4b11      	ldr	r3, [pc, #68]	; (24010248 <FATFS_LinkDriver+0x48>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
24010202:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
24010204:	7a5c      	ldrb	r4, [r3, #9]
24010206:	b9cc      	cbnz	r4, 2401023c <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
24010208:	f004 02ff 	and.w	r2, r4, #255	; 0xff
2401020c:	7a5c      	ldrb	r4, [r3, #9]
2401020e:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
24010210:	7a5c      	ldrb	r4, [r3, #9]
24010212:	eb03 0484 	add.w	r4, r3, r4, lsl #2
24010216:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
24010218:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
2401021a:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
2401021c:	441c      	add	r4, r3
2401021e:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
24010220:	1c44      	adds	r4, r0, #1
    path[0] = DiskNum + '0';
24010222:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
24010224:	b2e4      	uxtb	r4, r4
24010226:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
24010228:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
2401022a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
2401022c:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
2401022e:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
24010230:	4610      	mov	r0, r2
24010232:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[3] = 0;
24010236:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
24010238:	708b      	strb	r3, [r1, #2]
}
2401023a:	4770      	bx	lr
  uint8_t ret = 1;
2401023c:	2201      	movs	r2, #1
}
2401023e:	f85d 4b04 	ldr.w	r4, [sp], #4
24010242:	4610      	mov	r0, r2
24010244:	4770      	bx	lr
24010246:	bf00      	nop
24010248:	2001e0f0 	.word	0x2001e0f0

2401024c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
2401024c:	287f      	cmp	r0, #127	; 0x7f
2401024e:	d913      	bls.n	24010278 <ff_convert+0x2c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
24010250:	b979      	cbnz	r1, 24010272 <ff_convert+0x26>
24010252:	4b0c      	ldr	r3, [pc, #48]	; (24010284 <ff_convert+0x38>)
24010254:	e001      	b.n	2401025a <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
24010256:	2980      	cmp	r1, #128	; 0x80
24010258:	d00d      	beq.n	24010276 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
2401025a:	f833 2b02 	ldrh.w	r2, [r3], #2
2401025e:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
24010262:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
24010264:	4282      	cmp	r2, r0
24010266:	d1f6      	bne.n	24010256 <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
24010268:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
2401026c:	fa1f f08c 	uxth.w	r0, ip
24010270:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
24010272:	28ff      	cmp	r0, #255	; 0xff
24010274:	d901      	bls.n	2401027a <ff_convert+0x2e>
24010276:	2000      	movs	r0, #0
		}
	}

	return c;
}
24010278:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
2401027a:	4b02      	ldr	r3, [pc, #8]	; (24010284 <ff_convert+0x38>)
2401027c:	3880      	subs	r0, #128	; 0x80
2401027e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
24010282:	4770      	bx	lr
24010284:	2401c900 	.word	0x2401c900

24010288 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
24010288:	4b23      	ldr	r3, [pc, #140]	; (24010318 <ff_wtoupper+0x90>)
2401028a:	4a24      	ldr	r2, [pc, #144]	; (2401031c <ff_wtoupper+0x94>)
2401028c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
24010290:	bf28      	it	cs
24010292:	4613      	movcs	r3, r2
{
24010294:	b510      	push	{r4, lr}
24010296:	3304      	adds	r3, #4
24010298:	e00a      	b.n	240102b0 <ff_wtoupper+0x28>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
2401029a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
2401029e:	fa5f fc82 	uxtb.w	ip, r2
240102a2:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
240102a4:	eb0c 0e01 	add.w	lr, ip, r1
240102a8:	4570      	cmp	r0, lr
240102aa:	db09      	blt.n	240102c0 <ff_wtoupper+0x38>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
240102ac:	3304      	adds	r3, #4
240102ae:	b182      	cbz	r2, 240102d2 <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
240102b0:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
240102b4:	461c      	mov	r4, r3
240102b6:	1e4a      	subs	r2, r1, #1
240102b8:	b292      	uxth	r2, r2
240102ba:	4290      	cmp	r0, r2
240102bc:	d8ed      	bhi.n	2401029a <ff_wtoupper+0x12>
	}

	return chr;
}
240102be:	bd10      	pop	{r4, pc}
			switch (cmd) {
240102c0:	2a08      	cmp	r2, #8
240102c2:	d8fc      	bhi.n	240102be <ff_wtoupper+0x36>
240102c4:	e8df f002 	tbb	[pc, r2]
240102c8:	1916100c 	.word	0x1916100c
240102cc:	25221f1c 	.word	0x25221f1c
240102d0:	08          	.byte	0x08
240102d1:	00          	.byte	0x00
		if (!cmd) p += nc;
240102d2:	eb04 034c 	add.w	r3, r4, ip, lsl #1
240102d6:	e7de      	b.n	24010296 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
240102d8:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
240102dc:	b280      	uxth	r0, r0
}
240102de:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
240102e0:	1a41      	subs	r1, r0, r1
240102e2:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
240102e6:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
240102e8:	1a43      	subs	r3, r0, r1
240102ea:	f003 0301 	and.w	r3, r3, #1
240102ee:	1ac3      	subs	r3, r0, r3
240102f0:	b298      	uxth	r0, r3
}
240102f2:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
240102f4:	3810      	subs	r0, #16
240102f6:	b280      	uxth	r0, r0
}
240102f8:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
240102fa:	3820      	subs	r0, #32
240102fc:	b280      	uxth	r0, r0
}
240102fe:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
24010300:	3830      	subs	r0, #48	; 0x30
24010302:	b280      	uxth	r0, r0
}
24010304:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
24010306:	381a      	subs	r0, #26
24010308:	b280      	uxth	r0, r0
}
2401030a:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
2401030c:	3008      	adds	r0, #8
2401030e:	b280      	uxth	r0, r0
}
24010310:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
24010312:	3850      	subs	r0, #80	; 0x50
24010314:	b280      	uxth	r0, r0
}
24010316:	bd10      	pop	{r4, pc}
24010318:	2401ca00 	.word	0x2401ca00
2401031c:	2401cbf4 	.word	0x2401cbf4

24010320 <tEnvelopeFollower_init>:
//===========================================================================
/* Envelope Follower */
//===========================================================================

void    tEnvelopeFollower_init(tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, LEAF* const leaf)
{
24010320:	b538      	push	{r3, r4, r5, lr}
24010322:	ed2d 8b02 	vpush	{d8}
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
}

void    tEnvelopeFollower_initToPool    (tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, tMempool* const mp)
{
    _tMempool* m = *mp;
24010326:	698d      	ldr	r5, [r1, #24]
{
24010328:	eef0 8a40 	vmov.f32	s17, s0
2401032c:	eeb0 8a60 	vmov.f32	s16, s1
24010330:	4604      	mov	r4, r0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
24010332:	4629      	mov	r1, r5
24010334:	2010      	movs	r0, #16
24010336:	f004 fcaf 	bl	24014c98 <mpool_alloc>
    e->mempool = m;
    
    e->y = 0.0f;
2401033a:	2300      	movs	r3, #0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
2401033c:	6020      	str	r0, [r4, #0]
    e->mempool = m;
2401033e:	6005      	str	r5, [r0, #0]
    e->y = 0.0f;
24010340:	6043      	str	r3, [r0, #4]
    e->a_thresh = attackThreshold;
24010342:	edc0 8a02 	vstr	s17, [r0, #8]
    e->d_coeff = decayCoeff;
24010346:	ed80 8a03 	vstr	s16, [r0, #12]
}
2401034a:	ecbd 8b02 	vpop	{d8}
2401034e:	bd38      	pop	{r3, r4, r5, pc}

24010350 <tEnvelopeFollower_tick>:
    mpool_free((char*)e, e->mempool);
}

Lfloat   tEnvelopeFollower_tick(tEnvelopeFollower* const ef, Lfloat x)
{
    _tEnvelopeFollower* e = *ef;
24010350:	6803      	ldr	r3, [r0, #0]
    
    if (x < 0.0f ) x = -x;  /* Absolute value. */
24010352:	eeb0 0ac0 	vabs.f32	s0, s0
    
    if (isnan(x)) return 0.0f;
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x; /* If we hit a peak, ride the peak to the top. */
24010356:	edd3 7a01 	vldr	s15, [r3, #4]
2401035a:	eef4 7ac0 	vcmpe.f32	s15, s0
2401035e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010362:	d810      	bhi.n	24010386 <tEnvelopeFollower_tick+0x36>
24010364:	ed93 7a02 	vldr	s14, [r3, #8]
24010368:	eeb4 7ac0 	vcmpe.f32	s14, s0
2401036c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010370:	d509      	bpl.n	24010386 <tEnvelopeFollower_tick+0x36>
    //ef->y = envelope_pow[(uint16_t)(ef->y * (Lfloat)UINT16_MAX)] * ef->d_coeff; //not quite the right behavior - too much loss of precision?
    //ef->y = powf(ef->y, 1.000009f) * ef->d_coeff;  // too expensive
    
#ifdef NO_DENORMAL_CHECK
#else
    if( e->y < VSF)   e->y = 0.0f;
24010372:	eddf 7a0e 	vldr	s15, [pc, #56]	; 240103ac <tEnvelopeFollower_tick+0x5c>
24010376:	eeb4 0ae7 	vcmpe.f32	s0, s15
2401037a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401037e:	d40d      	bmi.n	2401039c <tEnvelopeFollower_tick+0x4c>
24010380:	ed83 0a01 	vstr	s0, [r3, #4]
24010384:	4770      	bx	lr
    else e->y = e->y * e->d_coeff; /* Else, exponential decay of output. */
24010386:	ed93 0a03 	vldr	s0, [r3, #12]
2401038a:	ee27 0a80 	vmul.f32	s0, s15, s0
    if( e->y < VSF)   e->y = 0.0f;
2401038e:	eddf 7a07 	vldr	s15, [pc, #28]	; 240103ac <tEnvelopeFollower_tick+0x5c>
24010392:	eeb4 0ae7 	vcmpe.f32	s0, s15
24010396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401039a:	d5f1      	bpl.n	24010380 <tEnvelopeFollower_tick+0x30>
2401039c:	eddf 7a04 	vldr	s15, [pc, #16]	; 240103b0 <tEnvelopeFollower_tick+0x60>
240103a0:	eeb0 0a67 	vmov.f32	s0, s15
240103a4:	edc3 7a01 	vstr	s15, [r3, #4]
#endif
    return e->y;
}
240103a8:	4770      	bx	lr
240103aa:	bf00      	nop
240103ac:	006ce3ee 	.word	0x006ce3ee
240103b0:	00000000 	.word	0x00000000

240103b4 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
240103b4:	b538      	push	{r3, r4, r5, lr}
240103b6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
240103ba:	680d      	ldr	r5, [r1, #0]
{
240103bc:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
240103be:	2010      	movs	r0, #16
{
240103c0:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
240103c4:	4629      	mov	r1, r5
240103c6:	f004 fc67 	bl	24014c98 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
240103ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
240103ce:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
240103d0:	6020      	str	r0, [r4, #0]
    p->mempool = m;
240103d2:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
240103d4:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
240103d8:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
240103da:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
240103de:	edc0 7a02 	vstr	s15, [r0, #8]
}
240103e2:	ecbd 8b02 	vpop	{d8}
240103e6:	bd38      	pop	{r3, r4, r5, pc}

240103e8 <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
    _tPowerFollower* p = *pf;
240103e8:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
240103ea:	6801      	ldr	r1, [r0, #0]
240103ec:	f004 bd16 	b.w	24014e1c <mpool_free>

240103f0 <tPowerFollower_setFactor>:
}

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
240103f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240103f4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24010410 <tPowerFollower_setFactor+0x20>
240103f8:	6803      	ldr	r3, [r0, #0]
    
    if (factor<0.0f) factor=0.0f;
    if (factor>1.0f) factor=1.0f;
240103fa:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
240103fe:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
24010402:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
24010406:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
2401040a:	edc3 7a02 	vstr	s15, [r3, #8]
}
2401040e:	4770      	bx	lr
24010410:	00000000 	.word	0x00000000

24010414 <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
24010414:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
24010416:	ee60 7a00 	vmul.f32	s15, s0, s0
2401041a:	edd3 6a03 	vldr	s13, [r3, #12]
2401041e:	ed93 0a02 	vldr	s0, [r3, #8]
24010422:	ed93 7a01 	vldr	s14, [r3, #4]
24010426:	ee20 0a26 	vmul.f32	s0, s0, s13
2401042a:	eea7 0a27 	vfma.f32	s0, s14, s15
2401042e:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
24010432:	4770      	bx	lr

24010434 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
24010434:	b570      	push	{r4, r5, r6, lr}
24010436:	460d      	mov	r5, r1
24010438:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2401043a:	202c      	movs	r0, #44	; 0x2c
{
2401043c:	ed2d 8b02 	vpush	{d8}
24010440:	b082      	sub	sp, #8
    _tMempool* m = *mp;
24010442:	6811      	ldr	r1, [r2, #0]
{
24010444:	eeb0 8a40 	vmov.f32	s16, s0
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
24010448:	eddf 8a30 	vldr	s17, [pc, #192]	; 2401050c <tLinearDelay_initToPool+0xd8>
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2401044c:	9101      	str	r1, [sp, #4]
2401044e:	f004 fc23 	bl	24014c98 <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
24010452:	ee07 5a90 	vmov	s15, r5
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
24010456:	4604      	mov	r4, r0
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24010458:	9901      	ldr	r1, [sp, #4]
    if (delay > maxDelay)   d->delay = maxDelay;
2401045a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
2401045e:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
24010460:	fec8 7a28 	vmaxnm.f32	s15, s16, s17
    d->mempool = m;
24010464:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
24010466:	61c5      	str	r5, [r0, #28]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24010468:	00a8      	lsls	r0, r5, #2
    if (delay > maxDelay)   d->delay = maxDelay;
2401046a:	fec7 7ac7 	vminnm.f32	s15, s15, s14
2401046e:	edc4 7a08 	vstr	s15, [r4, #32]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24010472:	f004 fc11 	bl	24014c98 <mpool_alloc>

    d->gain = 1.0f;
24010476:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
2401047a:	2300      	movs	r3, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
2401047c:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
2401047e:	6062      	str	r2, [r4, #4]

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
24010480:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    d->lastIn = 0.0f;
24010484:	edc4 8a04 	vstr	s17, [r4, #16]
    d->lastOut = 0.0f;
24010488:	edc4 8a03 	vstr	s17, [r4, #12]
    d->inPoint = 0;
2401048c:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
2401048e:	61a3      	str	r3, [r4, #24]
    _tLinearDelay* d = *dl;
24010490:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
24010492:	edd4 0a08 	vldr	s1, [r4, #32]
24010496:	edd5 7a07 	vldr	s15, [r5, #28]
2401049a:	eeb8 1a67 	vcvt.f32.u32	s2, s15
2401049e:	f004 f97f 	bl	240147a0 <LEAF_clip>

    Lfloat outPointer = d->inPoint - d->delay;
240104a2:	edd5 7a05 	vldr	s15, [r5, #20]

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
240104a6:	69ea      	ldr	r2, [r5, #28]
    Lfloat outPointer = d->inPoint - d->delay;
240104a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
240104ac:	ed85 0a08 	vstr	s0, [r5, #32]
    Lfloat outPointer = d->inPoint - d->delay;
240104b0:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
240104b4:	eef4 7ae8 	vcmpe.f32	s15, s17
240104b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240104bc:	d50a      	bpl.n	240104d4 <tLinearDelay_initToPool+0xa0>
        outPointer += d->maxDelay; // modulo maximum length
240104be:	ee07 2a10 	vmov	s14, r2
240104c2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240104c6:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
240104ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
240104ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240104d2:	d4f8      	bmi.n	240104c6 <tLinearDelay_initToPool+0x92>

    d->outPoint = (uint32_t) outPointer;   // integer part
240104d4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
240104d8:	ee17 3a10 	vmov	r3, s14

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
240104dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
240104e0:	ee06 3a90 	vmov	s13, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
240104e4:	4293      	cmp	r3, r2
240104e6:	bf08      	it	eq
240104e8:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
240104ea:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
240104ee:	eef8 6a66 	vcvt.f32.u32	s13, s13
240104f2:	61ab      	str	r3, [r5, #24]
240104f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
240104f8:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
240104fc:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
24010500:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
}
24010504:	b002      	add	sp, #8
24010506:	ecbd 8b02 	vpop	{d8}
2401050a:	bd70      	pop	{r4, r5, r6, pc}
2401050c:	00000000 	.word	0x00000000

24010510 <tLinearDelay_free>:
{
24010510:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
24010512:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
24010514:	6821      	ldr	r1, [r4, #0]
24010516:	68a0      	ldr	r0, [r4, #8]
24010518:	f004 fc80 	bl	24014e1c <mpool_free>
    mpool_free((char*)d, d->mempool);
2401051c:	6821      	ldr	r1, [r4, #0]
2401051e:	4620      	mov	r0, r4
}
24010520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
24010524:	f004 bc7a 	b.w	24014e1c <mpool_free>

24010528 <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
24010528:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2401052a:	69cb      	ldr	r3, [r1, #28]
2401052c:	b14b      	cbz	r3, 24010542 <tLinearDelay_clear+0x1a>
2401052e:	2300      	movs	r3, #0
        d->buff[i] = 0;
24010530:	2000      	movs	r0, #0
24010532:	688a      	ldr	r2, [r1, #8]
24010534:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
24010538:	3301      	adds	r3, #1
        d->buff[i] = 0;
2401053a:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
2401053c:	69ca      	ldr	r2, [r1, #28]
2401053e:	429a      	cmp	r2, r3
24010540:	d8f7      	bhi.n	24010532 <tLinearDelay_clear+0xa>
}
24010542:	4770      	bx	lr

24010544 <tLinearDelay_tick>:
{
24010544:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
24010546:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
24010548:	edd3 7a01 	vldr	s15, [r3, #4]
2401054c:	6959      	ldr	r1, [r3, #20]
2401054e:	689a      	ldr	r2, [r3, #8]
24010550:	ee27 0a80 	vmul.f32	s0, s15, s0
24010554:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24010558:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2401055c:	69dc      	ldr	r4, [r3, #28]
    d->lastOut = d->buff[idx] * d->omAlpha;
2401055e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    uint32_t idx = (uint32_t) d->outPoint;
24010562:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010566:	3201      	adds	r2, #1
    if ((idx + 1) < d->maxDelay)
24010568:	1c48      	adds	r0, r1, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
2401056a:	42a2      	cmp	r2, r4
2401056c:	bf08      	it	eq
2401056e:	2200      	moveq	r2, #0
    if ((idx + 1) < d->maxDelay)
24010570:	4284      	cmp	r4, r0
24010572:	615a      	str	r2, [r3, #20]
    d->lastOut = d->buff[idx] * d->omAlpha;
24010574:	689a      	ldr	r2, [r3, #8]
24010576:	eb02 0181 	add.w	r1, r2, r1, lsl #2
2401057a:	ed91 0a00 	vldr	s0, [r1]
2401057e:	ee20 0a27 	vmul.f32	s0, s0, s15
24010582:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
24010586:	d90b      	bls.n	240105a0 <tLinearDelay_tick+0x5c>
        d->lastOut += d->buff[idx+1] * d->alpha;
24010588:	ed91 7a01 	vldr	s14, [r1, #4]
2401058c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24010590:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
24010592:	eea7 0a27 	vfma.f32	s0, s14, s15
24010596:	ed83 0a03 	vstr	s0, [r3, #12]
}
2401059a:	f85d 4b04 	ldr.w	r4, [sp], #4
2401059e:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
240105a0:	ed92 7a00 	vldr	s14, [r2]
240105a4:	2000      	movs	r0, #0
240105a6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
240105aa:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
240105ac:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
240105b0:	ed83 0a03 	vstr	s0, [r3, #12]
}
240105b4:	f85d 4b04 	ldr.w	r4, [sp], #4
240105b8:	4770      	bx	lr
240105ba:	bf00      	nop

240105bc <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
240105bc:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
240105be:	edd3 7a01 	vldr	s15, [r3, #4]
240105c2:	6959      	ldr	r1, [r3, #20]
240105c4:	689a      	ldr	r2, [r3, #8]
240105c6:	ee27 0a80 	vmul.f32	s0, s15, s0
240105ca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240105ce:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
240105d2:	695a      	ldr	r2, [r3, #20]
240105d4:	69d9      	ldr	r1, [r3, #28]
240105d6:	3201      	adds	r2, #1
240105d8:	428a      	cmp	r2, r1
240105da:	bf08      	it	eq
240105dc:	2200      	moveq	r2, #0
240105de:	615a      	str	r2, [r3, #20]
}
240105e0:	4770      	bx	lr
240105e2:	bf00      	nop

240105e4 <tLinearDelay_tickOut>:
{
240105e4:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
240105e6:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
240105e8:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
240105ea:	6899      	ldr	r1, [r3, #8]
240105ec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
240105f0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
240105f4:	69dc      	ldr	r4, [r3, #28]
240105f6:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
240105f8:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
240105fc:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
240105fe:	ee20 0a27 	vmul.f32	s0, s0, s15
24010602:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
24010606:	d20b      	bcs.n	24010620 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
24010608:	ed90 7a01 	vldr	s14, [r0, #4]
2401060c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
24010610:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
24010612:	eea7 0a27 	vfma.f32	s0, s14, s15
24010616:	ed83 0a03 	vstr	s0, [r3, #12]
}
2401061a:	f85d 4b04 	ldr.w	r4, [sp], #4
2401061e:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
24010620:	ed91 7a00 	vldr	s14, [r1]
24010624:	2200      	movs	r2, #0
24010626:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
2401062a:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
2401062c:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
24010630:	ed83 0a03 	vstr	s0, [r3, #12]
}
24010634:	f85d 4b04 	ldr.w	r4, [sp], #4
24010638:	4770      	bx	lr
2401063a:	bf00      	nop

2401063c <tLinearDelay_setDelay>:
{
2401063c:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
2401063e:	6804      	ldr	r4, [r0, #0]
{
24010640:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
24010644:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24010648:	edd4 7a07 	vldr	s15, [r4, #28]
2401064c:	eeb8 1a67 	vcvt.f32.u32	s2, s15
24010650:	f004 f8a6 	bl	240147a0 <LEAF_clip>
    Lfloat outPointer = d->inPoint - d->delay;
24010654:	edd4 7a05 	vldr	s15, [r4, #20]
        outPointer += d->maxDelay; // modulo maximum length
24010658:	69e2      	ldr	r2, [r4, #28]
    Lfloat outPointer = d->inPoint - d->delay;
2401065a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
2401065e:	ed84 0a08 	vstr	s0, [r4, #32]
    Lfloat outPointer = d->inPoint - d->delay;
24010662:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
24010666:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2401066a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401066e:	d50a      	bpl.n	24010686 <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
24010670:	ee07 2a10 	vmov	s14, r2
24010674:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24010678:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
2401067c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010684:	d4f8      	bmi.n	24010678 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
24010686:	eebc 7ae7 	vcvt.u32.f32	s14, s15
2401068a:	ee17 3a10 	vmov	r3, s14
    d->omAlpha = 1.0f - d->alpha;
2401068e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
24010692:	ee06 3a90 	vmov	s13, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
24010696:	4293      	cmp	r3, r2
24010698:	bf08      	it	eq
2401069a:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
2401069c:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
240106a0:	eef8 6a66 	vcvt.f32.u32	s13, s13
240106a4:	61a3      	str	r3, [r4, #24]
240106a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
240106aa:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
240106ae:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
240106b2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
}
240106b6:	bd10      	pop	{r4, pc}

240106b8 <tLinearDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tLinearDelay_addTo (tLinearDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tLinearDelay* d = *dl;
240106b8:	6802      	ldr	r2, [r0, #0]

    int32_t tap = d->inPoint - tapDelay - 1;
240106ba:	6953      	ldr	r3, [r2, #20]
240106bc:	1a59      	subs	r1, r3, r1

    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
240106be:	3901      	subs	r1, #1
240106c0:	d502      	bpl.n	240106c8 <tLinearDelay_addTo+0x10>
240106c2:	69d3      	ldr	r3, [r2, #28]
240106c4:	18c9      	adds	r1, r1, r3
240106c6:	d4fd      	bmi.n	240106c4 <tLinearDelay_addTo+0xc>
    
    return (d->buff[tap] += value);
240106c8:	6893      	ldr	r3, [r2, #8]
240106ca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
240106ce:	edd3 7a00 	vldr	s15, [r3]
240106d2:	ee30 0a27 	vadd.f32	s0, s0, s15
240106d6:	ed83 0a00 	vstr	s0, [r3]
}
240106da:	4770      	bx	lr

240106dc <tLagrangeDelay_free>:

    tLagrangeDelay_setDelay(dl, d->delay);
}

void tLagrangeDelay_free (tLagrangeDelay* const dl)
{
240106dc:	b510      	push	{r4, lr}
    _tLagrangeDelay* d = *dl;
240106de:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)d->buff, d->mempool);
240106e0:	e9d4 1000 	ldrd	r1, r0, [r4]
240106e4:	f004 fb9a 	bl	24014e1c <mpool_free>
    mpool_free((char*)d, d->mempool);
240106e8:	6821      	ldr	r1, [r4, #0]
240106ea:	4620      	mov	r0, r4
}
240106ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
240106f0:	f004 bb94 	b.w	24014e1c <mpool_free>

240106f4 <tLagrangeDelay_clear>:


void    tLagrangeDelay_clear(tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
240106f4:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
240106f6:	69cb      	ldr	r3, [r1, #28]
240106f8:	b14b      	cbz	r3, 2401070e <tLagrangeDelay_clear+0x1a>
240106fa:	2300      	movs	r3, #0
    {
        d->buff[i] = 0.0f;
240106fc:	2000      	movs	r0, #0
240106fe:	684a      	ldr	r2, [r1, #4]
24010700:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
24010704:	3301      	adds	r3, #1
        d->buff[i] = 0.0f;
24010706:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
24010708:	69ca      	ldr	r2, [r1, #28]
2401070a:	429a      	cmp	r2, r3
2401070c:	d8f7      	bhi.n	240106fe <tLagrangeDelay_clear+0xa>
    }
}
2401070e:	4770      	bx	lr

24010710 <tLagrangeDelay_tickIn>:
    return d->lastOut;
}

void   tLagrangeDelay_tickIn (tLagrangeDelay* const dl, Lfloat input)
{
	_tLagrangeDelay* d = *dl;
24010710:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input;
24010712:	6959      	ldr	r1, [r3, #20]
24010714:	685a      	ldr	r2, [r3, #4]
24010716:	eb02 0281 	add.w	r2, r2, r1, lsl #2
2401071a:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
2401071e:	695a      	ldr	r2, [r3, #20]
24010720:	6899      	ldr	r1, [r3, #8]
24010722:	3201      	adds	r2, #1
24010724:	400a      	ands	r2, r1
24010726:	615a      	str	r2, [r3, #20]
}
24010728:	4770      	bx	lr
2401072a:	bf00      	nop

2401072c <tLagrangeDelay_tickOut>:

Lfloat   tLagrangeDelay_tickOut (tLagrangeDelay* const dl)
{
2401072c:	b430      	push	{r4, r5}
	_tLagrangeDelay* d = *dl;
2401072e:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
24010730:	6998      	ldr	r0, [r3, #24]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;

    d->lastOut =    (d->buff[previdx] * d->h0) +
    		(d->buff[idx] * d->h1) +
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
24010732:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
24010736:	1c82      	adds	r2, r0, #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
24010738:	1c44      	adds	r4, r0, #1
2401073a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
2401073e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
24010742:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    d->lastOut =    (d->buff[previdx] * d->h0) +
24010746:	e9d3 1501 	ldrd	r1, r5, [r3, #4]
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
2401074a:	402a      	ands	r2, r5
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
2401074c:	402c      	ands	r4, r5
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
2401074e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
24010752:	ed92 0a00 	vldr	s0, [r2]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
24010756:	eb01 0284 	add.w	r2, r1, r4, lsl #2
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
2401075a:	ee20 0a06 	vmul.f32	s0, s0, s12
2401075e:	ed92 6a00 	vldr	s12, [r2]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
24010762:	69da      	ldr	r2, [r3, #28]
24010764:	eea6 0a26 	vfma.f32	s0, s12, s13
24010768:	4402      	add	r2, r0
    		(d->buff[idx] * d->h1) +
2401076a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
2401076e:	3a01      	subs	r2, #1
24010770:	edd0 6a00 	vldr	s13, [r0]
24010774:	402a      	ands	r2, r5
24010776:	eea6 0a87 	vfma.f32	s0, s13, s14
    d->lastOut =    (d->buff[previdx] * d->h0) +
2401077a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
2401077e:	ed91 7a00 	vldr	s14, [r1]

    //d->buff[previdx] = 0.0f;
    // Increment output pointer modulo length
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
24010782:	619c      	str	r4, [r3, #24]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
24010784:	eea7 0a27 	vfma.f32	s0, s14, s15
    d->lastOut =    (d->buff[previdx] * d->h0) +
24010788:	ed83 0a03 	vstr	s0, [r3, #12]

    return d->lastOut;
}
2401078c:	bc30      	pop	{r4, r5}
2401078e:	4770      	bx	lr

24010790 <tLagrangeDelay_setDelay>:
void tLagrangeDelay_setDelay (tLagrangeDelay* const dl, Lfloat delay)
{
	_tLagrangeDelay* d = *dl;
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
24010790:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
	_tLagrangeDelay* d = *dl;
24010794:	6803      	ldr	r3, [r0, #0]
    d->delay = delay; // not safe but faster
24010796:	ed83 0a08 	vstr	s0, [r3, #32]
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
2401079a:	ee37 7ac0 	vsub.f32	s14, s15, s0
2401079e:	edd3 7a05 	vldr	s15, [r3, #20]
240107a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
240107a6:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
240107aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
240107ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240107b2:	d50a      	bpl.n	240107ca <tLagrangeDelay_setDelay+0x3a>
        outPointer += d->maxDelay; // modulo maximum length
240107b4:	ed93 7a07 	vldr	s14, [r3, #28]
240107b8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240107bc:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
240107c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
240107c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240107c8:	d4f8      	bmi.n	240107bc <tLagrangeDelay_setDelay+0x2c>

    d->outPoint = (uint32_t) outPointer;   // integer part
240107ca:	eebc 7ae7 	vcvt.u32.f32	s14, s15

	Lfloat pdp1d = dp1*alpha;
	Lfloat pddm1 = alpha*dm1;
	Lfloat pdm1dm2 = dm1*dm2;

	d->h0 = -0.166666666666667f * (pddm1 * dm2);
240107ce:	eddf 6a1d 	vldr	s13, [pc, #116]	; 24010844 <tLagrangeDelay_setDelay+0xb4>
	Lfloat dp1 = alpha+1.0f;
240107d2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	d->h1 = 0.5f * (dp1 * pdm1dm2);
	d->h2 = -0.5f * (pdp1d * dm2);
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
240107d6:	eddf 3a1c 	vldr	s7, [pc, #112]	; 24010848 <tLagrangeDelay_setDelay+0xb8>
	Lfloat dm2 = alpha-2.0f;
240107da:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0

    d->outPoint &= d->bufferMask;
240107de:	689a      	ldr	r2, [r3, #8]
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
240107e0:	eeb8 6a47 	vcvt.f32.u32	s12, s14
    d->outPoint &= d->bufferMask;
240107e4:	ee17 1a10 	vmov	r1, s14
	d->h1 = 0.5f * (dp1 * pdm1dm2);
240107e8:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
	d->h2 = -0.5f * (pdp1d * dm2);
240107ec:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    d->outPoint &= d->bufferMask;
240107f0:	400a      	ands	r2, r1
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
240107f2:	ee77 7ac6 	vsub.f32	s15, s15, s12
    d->outPoint &= d->bufferMask;
240107f6:	619a      	str	r2, [r3, #24]
	Lfloat dm1 = alpha-1.0f;
240107f8:	ee37 7ae4 	vsub.f32	s14, s15, s9
	Lfloat dp1 = alpha+1.0f;
240107fc:	ee77 4aa4 	vadd.f32	s9, s15, s9
	Lfloat dm2 = alpha-2.0f;
24010800:	ee37 5ac5 	vsub.f32	s10, s15, s10
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
24010804:	ee67 6aa6 	vmul.f32	s13, s15, s13
	d->h1 = 0.5f * (dp1 * pdm1dm2);
24010808:	ee24 6a87 	vmul.f32	s12, s9, s14
	Lfloat pdp1d = dp1*alpha;
2401080c:	ee67 7aa4 	vmul.f32	s15, s15, s9
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
24010810:	ee66 6a87 	vmul.f32	s13, s13, s14
	d->h2 = -0.5f * (pdp1d * dm2);
24010814:	ee65 5a25 	vmul.f32	s11, s10, s11
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
24010818:	ee27 7a23 	vmul.f32	s14, s14, s7
	d->h1 = 0.5f * (dp1 * pdm1dm2);
2401081c:	ee26 6a04 	vmul.f32	s12, s12, s8
	d->h2 = -0.5f * (pdp1d * dm2);
24010820:	ee65 5aa7 	vmul.f32	s11, s11, s15
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
24010824:	ee27 7a27 	vmul.f32	s14, s14, s15
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
24010828:	ee66 6a85 	vmul.f32	s13, s13, s10
	d->h1 = 0.5f * (dp1 * pdm1dm2);
2401082c:	ee66 7a05 	vmul.f32	s15, s12, s10
	d->h2 = -0.5f * (pdp1d * dm2);
24010830:	edc3 5a0b 	vstr	s11, [r3, #44]	; 0x2c
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
24010834:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
24010838:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
	d->h1 = 0.5f * (dp1 * pdm1dm2);
2401083c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
24010840:	4770      	bx	lr
24010842:	bf00      	nop
24010844:	be2aaaab 	.word	0xbe2aaaab
24010848:	3e2aaaab 	.word	0x3e2aaaab

2401084c <tLagrangeDelay_initToPool>:
{
2401084c:	b570      	push	{r4, r5, r6, lr}
2401084e:	460d      	mov	r5, r1
24010850:	4606      	mov	r6, r0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
24010852:	2034      	movs	r0, #52	; 0x34
{
24010854:	ed2d 8b02 	vpush	{d8}
24010858:	b082      	sub	sp, #8
    _tMempool* m = *mp;
2401085a:	6811      	ldr	r1, [r2, #0]
{
2401085c:	eeb0 8a40 	vmov.f32	s16, s0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
24010860:	9101      	str	r1, [sp, #4]
24010862:	f004 fa19 	bl	24014c98 <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
24010866:	ee07 5a90 	vmov	s15, r5
2401086a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 240108dc <tLagrangeDelay_initToPool+0x90>
    d->mempool = m;
2401086e:	9901      	ldr	r1, [sp, #4]
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
24010870:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
24010872:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
24010876:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
24010878:	fe88 0a07 	vmaxnm.f32	s0, s16, s14
    d->mempool = m;
2401087c:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
2401087e:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
24010880:	fe80 0a67 	vminnm.f32	s0, s0, s15
24010884:	ed80 0a08 	vstr	s0, [r0, #32]
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
24010888:	bb1d      	cbnz	r5, 240108d2 <tLagrangeDelay_initToPool+0x86>
2401088a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        maxDelay |= maxDelay >> 1;
2401088e:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
24010892:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
24010896:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
2401089a:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
2401089e:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
240108a2:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
240108a4:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
240108a6:	60a2      	str	r2, [r4, #8]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
240108a8:	00a8      	lsls	r0, r5, #2
240108aa:	f004 f9f5 	bl	24014c98 <mpool_alloc>
    d->lastIn = 0.0f;
240108ae:	2200      	movs	r2, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
240108b0:	4601      	mov	r1, r0
    d->inPoint = 0;
240108b2:	2300      	movs	r3, #0
    tLagrangeDelay_setDelay(dl, d->delay);
240108b4:	ed94 0a08 	vldr	s0, [r4, #32]
240108b8:	4630      	mov	r0, r6
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
240108ba:	6061      	str	r1, [r4, #4]
    d->lastIn = 0.0f;
240108bc:	6122      	str	r2, [r4, #16]
    d->lastOut = 0.0f;
240108be:	60e2      	str	r2, [r4, #12]
    d->outPoint = 0;
240108c0:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
240108c4:	b002      	add	sp, #8
240108c6:	ecbd 8b02 	vpop	{d8}
240108ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tLagrangeDelay_setDelay(dl, d->delay);
240108ce:	f7ff bf5f 	b.w	24010790 <tLagrangeDelay_setDelay>
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
240108d2:	1e6b      	subs	r3, r5, #1
240108d4:	422b      	tst	r3, r5
240108d6:	461a      	mov	r2, r3
240108d8:	d1d9      	bne.n	2401088e <tLagrangeDelay_initToPool+0x42>
240108da:	e7e4      	b.n	240108a6 <tLagrangeDelay_initToPool+0x5a>
240108dc:	00000000 	.word	0x00000000

240108e0 <tLagrangeDelay_tapOut>:

Lfloat tLagrangeDelay_tapOut (tLagrangeDelay* const dl, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
240108e0:	6802      	ldr	r2, [r0, #0]

    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
240108e2:	6953      	ldr	r3, [r2, #20]
240108e4:	1a5b      	subs	r3, r3, r1

    return d->buff[tap];
240108e6:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
240108ea:	3b01      	subs	r3, #1
240108ec:	4003      	ands	r3, r0
    return d->buff[tap];
240108ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2

}
240108f2:	ed92 0a00 	vldr	s0, [r2]
240108f6:	4770      	bx	lr

240108f8 <tLagrangeDelay_tapOutInterpolated>:

Lfloat   tLagrangeDelay_tapOutInterpolated (tLagrangeDelay* const dl, uint32_t tapDelay, Lfloat alpha)
{
240108f8:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;

    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
240108fa:	f06f 0301 	mvn.w	r3, #1
	_tLagrangeDelay* d = *dl;
240108fe:	6802      	ldr	r2, [r0, #0]

    alpha = 1.0f - alpha;
24010900:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

    Lfloat pdp1d = dp1*alpha;
    Lfloat pddm1 = alpha*dm1;
    Lfloat pdm1dm2 = dm1*dm2;

    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
24010904:	eddf 4a27 	vldr	s9, [pc, #156]	; 240109a4 <tLagrangeDelay_tapOutInterpolated+0xac>
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
24010908:	1a59      	subs	r1, r3, r1
2401090a:	6953      	ldr	r3, [r2, #20]
2401090c:	6894      	ldr	r4, [r2, #8]
    Lfloat dp1 = alpha+1.0f;
2401090e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
24010912:	4419      	add	r1, r3
    alpha = 1.0f - alpha;
24010914:	ee77 5ac0 	vsub.f32	s11, s15, s0
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
    Lfloat h2 = -0.5f * (pdp1d * dm2);
    Lfloat h3 = 0.166666666666667f * (pdp1d * dm1);
    
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
24010918:	69d3      	ldr	r3, [r2, #28]
    Lfloat dm2 = alpha-2.0f;
2401091a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
2401091e:	4021      	ands	r1, r4
    Lfloat dp1 = alpha+1.0f;
24010920:	ee35 5a40 	vsub.f32	s10, s10, s0
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
24010924:	3b01      	subs	r3, #1
24010926:	6852      	ldr	r2, [r2, #4]
    		(d->buff[idx] * h1) +
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24010928:	1c88      	adds	r0, r1, #2
    Lfloat dm2 = alpha-2.0f;
2401092a:	ee37 7a40 	vsub.f32	s14, s14, s0
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
2401092e:	ee30 6a67 	vsub.f32	s12, s0, s15
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
24010932:	440b      	add	r3, r1
    Lfloat pdp1d = dp1*alpha;
24010934:	ee65 5a85 	vmul.f32	s11, s11, s10
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24010938:	4020      	ands	r0, r4
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
2401093a:	4023      	ands	r3, r4
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
2401093c:	ee70 7a27 	vadd.f32	s15, s0, s15
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24010940:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
24010944:	ee26 6a07 	vmul.f32	s12, s12, s14
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24010948:	ee65 6aa4 	vmul.f32	s13, s11, s9
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
2401094c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24010950:	ed90 4a00 	vldr	s8, [r0]
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
24010954:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
24010958:	ee26 6a24 	vmul.f32	s12, s12, s9
2401095c:	edd3 3a00 	vldr	s7, [r3]
			(d->buff[(idx + 2) & d->bufferMask] * h3);
24010960:	ee66 6a84 	vmul.f32	s13, s13, s8
    		(d->buff[idx] * h1) +
24010964:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
24010968:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
2401096c:	3101      	adds	r1, #1
2401096e:	ed93 5a00 	vldr	s10, [r3]
    Lfloat h2 = -0.5f * (pdp1d * dm2);
24010972:	eefe 4a00 	vmov.f32	s9, #224	; 0xbf000000 -0.5
24010976:	eee3 6a86 	vfma.f32	s13, s7, s12
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
2401097a:	4021      	ands	r1, r4
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
2401097c:	ee67 7a84 	vmul.f32	s15, s15, s8

}
24010980:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat h2 = -0.5f * (pdp1d * dm2);
24010984:	ee27 7a24 	vmul.f32	s14, s14, s9
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
24010988:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    Lfloat h2 = -0.5f * (pdp1d * dm2);
2401098c:	ee27 7a25 	vmul.f32	s14, s14, s11
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
24010990:	eee5 6a27 	vfma.f32	s13, s10, s15
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
24010994:	edd2 7a00 	vldr	s15, [r2]
24010998:	ee20 0a26 	vmul.f32	s0, s0, s13
}
2401099c:	eea7 0a87 	vfma.f32	s0, s15, s14
240109a0:	4770      	bx	lr
240109a2:	bf00      	nop
240109a4:	be2aaaab 	.word	0xbe2aaaab

240109a8 <tLagrangeDelay_tapIn>:

void tLagrangeDelay_tapIn (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
240109a8:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
240109aa:	6953      	ldr	r3, [r2, #20]
240109ac:	1a5b      	subs	r3, r3, r1

    d->buff[tap] = value;
240109ae:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
240109b2:	3b01      	subs	r3, #1
240109b4:	4003      	ands	r3, r0
    d->buff[tap] = value;
240109b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240109ba:	ed82 0a00 	vstr	s0, [r2]
}
240109be:	4770      	bx	lr

240109c0 <tLagrangeDelay_addTo>:

Lfloat tLagrangeDelay_addTo (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
240109c0:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
240109c2:	6953      	ldr	r3, [r2, #20]
240109c4:	1a5b      	subs	r3, r3, r1

    return (d->buff[tap] += value);
240109c6:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
240109ca:	3b01      	subs	r3, #1
240109cc:	4003      	ands	r3, r0
    return (d->buff[tap] += value);
240109ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
240109d2:	edd3 7a00 	vldr	s15, [r3]
240109d6:	ee30 0a27 	vadd.f32	s0, s0, s15
240109da:	ed83 0a00 	vstr	s0, [r3]
}
240109de:	4770      	bx	lr

240109e0 <tLagrangeDelay_getMaxDelay>:


Lfloat   tLagrangeDelay_getMaxDelay (tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
    return d->maxDelay;
240109e0:	6803      	ldr	r3, [r0, #0]
240109e2:	ed93 0a07 	vldr	s0, [r3, #28]
}
240109e6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
240109ea:	4770      	bx	lr

240109ec <tTapeDelay_initToPool>:
{
    tTapeDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tTapeDelay_initToPool (tTapeDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
240109ec:	b570      	push	{r4, r5, r6, lr}
240109ee:	460e      	mov	r6, r1
240109f0:	b082      	sub	sp, #8
    _tMempool* m = *mp;
240109f2:	6811      	ldr	r1, [r2, #0]
{
240109f4:	4605      	mov	r5, r0
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
240109f6:	202c      	movs	r0, #44	; 0x2c
{
240109f8:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
240109fc:	9100      	str	r1, [sp, #0]
240109fe:	f004 f94b 	bl	24014c98 <mpool_alloc>
    d->mempool = m;
24010a02:	9900      	ldr	r1, [sp, #0]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
24010a04:	4604      	mov	r4, r0
24010a06:	6028      	str	r0, [r5, #0]
    d->mempool = m;
24010a08:	6001      	str	r1, [r0, #0]

    d->maxDelay = maxDelay;
24010a0a:	6186      	str	r6, [r0, #24]

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24010a0c:	00b0      	lsls	r0, r6, #2
24010a0e:	f004 f943 	bl	24014c98 <mpool_alloc>

    d->gain = 1.0f;
24010a12:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0

    d->lastIn = 0.0f;
24010a16:	2300      	movs	r3, #0
    d->lastOut = 0.0f;

    d->idx = 0.0f;
    d->inc = 1.0f;
    d->inPoint = 0;
24010a18:	2200      	movs	r2, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
24010a1a:	60a0      	str	r0, [r4, #8]
    d->lastIn = 0.0f;
24010a1c:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
24010a1e:	60e3      	str	r3, [r4, #12]
    d->idx = 0.0f;
24010a20:	6263      	str	r3, [r4, #36]	; 0x24
    d->inPoint = 0;
24010a22:	6162      	str	r2, [r4, #20]
    d->gain = 1.0f;
24010a24:	ed84 0a01 	vstr	s0, [r4, #4]
    d->inc = 1.0f;
24010a28:	ed84 0a08 	vstr	s0, [r4, #32]
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
    _tTapeDelay* d = *dl;
24010a2c:	682c      	ldr	r4, [r5, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
24010a2e:	eddd 0a01 	vldr	s1, [sp, #4]
24010a32:	edd4 7a06 	vldr	s15, [r4, #24]
24010a36:	eeb8 1a67 	vcvt.f32.u32	s2, s15
24010a3a:	f003 feb1 	bl	240147a0 <LEAF_clip>
24010a3e:	ed84 0a07 	vstr	s0, [r4, #28]
}
24010a42:	b002      	add	sp, #8
24010a44:	bd70      	pop	{r4, r5, r6, pc}
24010a46:	bf00      	nop

24010a48 <tTapeDelay_free>:
{
24010a48:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
24010a4a:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
24010a4c:	6821      	ldr	r1, [r4, #0]
24010a4e:	68a0      	ldr	r0, [r4, #8]
24010a50:	f004 f9e4 	bl	24014e1c <mpool_free>
    mpool_free((char*)d, d->mempool);
24010a54:	6821      	ldr	r1, [r4, #0]
24010a56:	4620      	mov	r0, r4
}
24010a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
24010a5c:	f004 b9de 	b.w	24014e1c <mpool_free>

24010a60 <tTapeDelay_tick>:
{
24010a60:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
24010a62:	6804      	ldr	r4, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
24010a64:	edd4 7a01 	vldr	s15, [r4, #4]
24010a68:	6962      	ldr	r2, [r4, #20]
24010a6a:	68a3      	ldr	r3, [r4, #8]
24010a6c:	ee27 0a80 	vmul.f32	s0, s15, s0
24010a70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24010a74:	ed83 0a00 	vstr	s0, [r3]
    int idx =  (int) d->idx;
24010a78:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
24010a7c:	68a1      	ldr	r1, [r4, #8]
    int idx =  (int) d->idx;
24010a7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010a82:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
    int idx =  (int) d->idx;
24010a86:	ee17 2a10 	vmov	r2, s14
    Lfloat alpha = d->idx - idx;
24010a8a:	eeb8 2ac7 	vcvt.f32.s32	s4, s14
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010a8e:	3001      	adds	r0, #1
                                              d->buff[(idx + 2) % d->maxDelay],
24010a90:	f102 0e02 	add.w	lr, r2, #2
                                              d->buff[(idx + 1) % d->maxDelay],
24010a94:	f102 0c01 	add.w	ip, r2, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
24010a98:	4298      	cmp	r0, r3
24010a9a:	bf08      	it	eq
24010a9c:	2000      	moveq	r0, #0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
24010a9e:	ee37 2ac2 	vsub.f32	s4, s15, s4
24010aa2:	6160      	str	r0, [r4, #20]
24010aa4:	1e58      	subs	r0, r3, #1
24010aa6:	4410      	add	r0, r2
24010aa8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
24010aac:	edd2 0a00 	vldr	s1, [r2]
                                              d->buff[(idx + 2) % d->maxDelay],
24010ab0:	fbbe f2f3 	udiv	r2, lr, r3
24010ab4:	fb03 ee12 	mls	lr, r3, r2, lr
                                              d->buff[(idx + 1) % d->maxDelay],
24010ab8:	fbbc f2f3 	udiv	r2, ip, r3
24010abc:	fb03 cc12 	mls	ip, r3, r2, ip
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
24010ac0:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
24010ac4:	fbb0 f2f3 	udiv	r2, r0, r3
24010ac8:	fb03 0012 	mls	r0, r3, r2, r0
24010acc:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
24010ad0:	edde 1a00 	vldr	s3, [lr]
24010ad4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
24010ad8:	ed9c 1a00 	vldr	s2, [ip]
24010adc:	ed91 0a00 	vldr	s0, [r1]
24010ae0:	f004 f81e 	bl	24014b20 <LEAF_interpolate_hermite_x>
    Lfloat diff = (d->inPoint - d->idx);
24010ae4:	edd4 7a05 	vldr	s15, [r4, #20]
24010ae8:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
24010aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
    while (diff < 0.f) diff += d->maxDelay;
24010af0:	edd4 6a06 	vldr	s13, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
24010af4:	ed84 0a03 	vstr	s0, [r4, #12]
    while (diff < 0.f) diff += d->maxDelay;
24010af8:	eef8 6a66 	vcvt.f32.u32	s13, s13
    Lfloat diff = (d->inPoint - d->idx);
24010afc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while (diff < 0.f) diff += d->maxDelay;
24010b00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b08:	d506      	bpl.n	24010b18 <tTapeDelay_tick+0xb8>
24010b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
24010b0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b16:	d4f8      	bmi.n	24010b0a <tTapeDelay_tick+0xaa>
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
24010b18:	edd4 5a07 	vldr	s11, [r4, #28]
24010b1c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24010b20:	ee77 7ae5 	vsub.f32	s15, s15, s11
24010b24:	ee87 6aa5 	vdiv.f32	s12, s15, s11
24010b28:	ee36 6a05 	vadd.f32	s12, s12, s10
    d->idx += d->inc;
24010b2c:	ee77 7a06 	vadd.f32	s15, s14, s12
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
24010b30:	ed84 6a08 	vstr	s12, [r4, #32]
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
24010b34:	eef4 7ae6 	vcmpe.f32	s15, s13
    d->idx += d->inc;
24010b38:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
24010b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b40:	db08      	blt.n	24010b54 <tTapeDelay_tick+0xf4>
24010b42:	ee77 7ae6 	vsub.f32	s15, s15, s13
24010b46:	eef4 7ae6 	vcmpe.f32	s15, s13
24010b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010b4e:	daf8      	bge.n	24010b42 <tTapeDelay_tick+0xe2>
24010b50:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
24010b54:	bd10      	pop	{r4, pc}
24010b56:	bf00      	nop

24010b58 <tTapeDelay_setDelay>:
{
24010b58:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
24010b5a:	6804      	ldr	r4, [r0, #0]
{
24010b5c:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
24010b60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24010b64:	edd4 7a06 	vldr	s15, [r4, #24]
24010b68:	eeb8 1a67 	vcvt.f32.u32	s2, s15
24010b6c:	f003 fe18 	bl	240147a0 <LEAF_clip>
24010b70:	ed84 0a07 	vstr	s0, [r4, #28]
}
24010b74:	bd10      	pop	{r4, pc}
24010b76:	bf00      	nop

24010b78 <tOversampler_init>:
//============================================================================================================
// Oversampler
//============================================================================================================
// Latency is equal to the phase length (numTaps / ratio)
void tOversampler_init (tOversampler* const osr, int ratio, int extraQuality, LEAF* const leaf)
{
24010b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
    int offset = 0;
    if (extraQuality) offset = 6;
24010b7c:	1e16      	subs	r6, r2, #0
{
24010b7e:	b083      	sub	sp, #12
24010b80:	460c      	mov	r4, r1
24010b82:	4607      	mov	r7, r0
    if (extraQuality) offset = 6;
24010b84:	bf0b      	itete	eq
24010b86:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
24010b8a:	f04f 0805 	movne.w	r8, #5
24010b8e:	f04f 0900 	moveq.w	r9, #0
24010b92:	f04f 0906 	movne.w	r9, #6
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
24010b96:	2902      	cmp	r1, #2
24010b98:	d00d      	beq.n	24010bb6 <tOversampler_init+0x3e>
24010b9a:	2904      	cmp	r1, #4
24010b9c:	d00b      	beq.n	24010bb6 <tOversampler_init+0x3e>
24010b9e:	2920      	cmp	r1, #32
24010ba0:	dc3b      	bgt.n	24010c1a <tOversampler_init+0xa2>
24010ba2:	2907      	cmp	r1, #7
24010ba4:	dc02      	bgt.n	24010bac <tOversampler_init+0x34>
}
24010ba6:	b003      	add	sp, #12
24010ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
24010bac:	3908      	subs	r1, #8
24010bae:	4a1d      	ldr	r2, [pc, #116]	; (24010c24 <tOversampler_init+0xac>)
24010bb0:	40ca      	lsrs	r2, r1
24010bb2:	07d2      	lsls	r2, r2, #31
24010bb4:	d5f7      	bpl.n	24010ba6 <tOversampler_init+0x2e>
    _tMempool* m = *mp;
24010bb6:	6999      	ldr	r1, [r3, #24]
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
24010bb8:	2028      	movs	r0, #40	; 0x28
24010bba:	9101      	str	r1, [sp, #4]
24010bbc:	f004 f86c 	bl	24014c98 <mpool_alloc>
        os->mempool = m;
24010bc0:	9901      	ldr	r1, [sp, #4]
        
        os->offset = offset;
        os->maxRatio = maxRatio;
        os->allowHighQuality = extraQuality;
        os->ratio = os->maxRatio;
        uint_fast16_t idx = (int)(log2f(os->ratio))-1+os->offset;
24010bc2:	ee07 4a90 	vmov	s15, r4
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
24010bc6:	6038      	str	r0, [r7, #0]
24010bc8:	4605      	mov	r5, r0
        os->offset = offset;
24010bca:	f8c0 9010 	str.w	r9, [r0, #16]
        uint_fast16_t idx = (int)(log2f(os->ratio))-1+os->offset;
24010bce:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        os->allowHighQuality = extraQuality;
24010bd2:	7206      	strb	r6, [r0, #8]
        os->ratio = os->maxRatio;
24010bd4:	60c4      	str	r4, [r0, #12]
        os->maxRatio = maxRatio;
24010bd6:	e9c0 1400 	strd	r1, r4, [r0]
        uint_fast16_t idx = (int)(log2f(os->ratio))-1+os->offset;
24010bda:	f008 fff7 	bl	24019bcc <log2f>
24010bde:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24010be2:	4a11      	ldr	r2, [pc, #68]	; (24010c28 <tOversampler_init+0xb0>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (Lfloat*) __leaf_tableref_firCoeffs[idx];
        os->upState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
24010be4:	9901      	ldr	r1, [sp, #4]
        uint_fast16_t idx = (int)(log2f(os->ratio))-1+os->offset;
24010be6:	ee17 3a90 	vmov	r3, s15
24010bea:	4443      	add	r3, r8
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24010bec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        os->pCoeffs = (Lfloat*) __leaf_tableref_firCoeffs[idx];
24010bf0:	4a0e      	ldr	r2, [pc, #56]	; (24010c2c <tOversampler_init+0xb4>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
24010bf2:	6228      	str	r0, [r5, #32]
        os->phaseLength = os->numTaps / os->ratio;
24010bf4:	fbb0 f4f4 	udiv	r4, r0, r4
24010bf8:	626c      	str	r4, [r5, #36]	; 0x24
        os->upState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
24010bfa:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (Lfloat*) __leaf_tableref_firCoeffs[idx];
24010bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
24010c00:	616b      	str	r3, [r5, #20]
        os->upState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
24010c02:	f004 f849 	bl	24014c98 <mpool_alloc>
        os->downState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
24010c06:	6a2b      	ldr	r3, [r5, #32]
24010c08:	9901      	ldr	r1, [sp, #4]
        os->upState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
24010c0a:	61a8      	str	r0, [r5, #24]
        os->downState = (Lfloat*) mpool_alloc(sizeof(Lfloat) * os->numTaps * 2, m);
24010c0c:	00d8      	lsls	r0, r3, #3
24010c0e:	f004 f843 	bl	24014c98 <mpool_alloc>
24010c12:	61e8      	str	r0, [r5, #28]
}
24010c14:	b003      	add	sp, #12
24010c16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
24010c1a:	2940      	cmp	r1, #64	; 0x40
24010c1c:	d0cb      	beq.n	24010bb6 <tOversampler_init+0x3e>
24010c1e:	b003      	add	sp, #12
24010c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
24010c24:	01000101 	.word	0x01000101
24010c28:	2402a330 	.word	0x2402a330
24010c2c:	20000940 	.word	0x20000940

24010c30 <tOversampler_upsample>:
#ifdef ITCMRAM
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_upsample(tOversampler* const osr, Lfloat input, Lfloat* output)
#else
void tOversampler_upsample(tOversampler* const osr, Lfloat input, Lfloat* output)
#endif
{
24010c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tOversampler* os = *osr;
24010c34:	6807      	ldr	r7, [r0, #0]
    
    if (os->ratio == 1)
24010c36:	68fb      	ldr	r3, [r7, #12]
24010c38:	2b01      	cmp	r3, #1
24010c3a:	d05d      	beq.n	24010cf8 <tOversampler_upsample+0xc8>
    {
        output[0] = input;
        return;
    }
    
    Lfloat *pState = os->upState;                 /* State pointer */
24010c3c:	69be      	ldr	r6, [r7, #24]
    Lfloat *pStateCur;
    Lfloat *ptr1;                               /* Temporary pointer for state buffer */
    Lfloat *ptr2;                               /* Temporary pointer for coefficient buffer */
    Lfloat sum0;                                /* Accumulators */
    uint_fast16_t i, tapCnt;                    /* Loop counters */
    uint_fast16_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
24010c3e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    Lfloat *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
24010c40:	f8d7 8014 	ldr.w	r8, [r7, #20]
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
24010c44:	eb06 0385 	add.w	r3, r6, r5, lsl #2
24010c48:	ed03 0a01 	vstr	s0, [r3, #-4]
    
    /* Address modifier index of coefficient buffer */
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
24010c4c:	f8d7 e00c 	ldr.w	lr, [r7, #12]
    
    while (i > 0U)
24010c50:	f1be 0f00 	cmp.w	lr, #0
24010c54:	d035      	beq.n	24010cc2 <tOversampler_upsample+0x92>
24010c56:	4674      	mov	r4, lr
    j = 1U;
24010c58:	f04f 0c01 	mov.w	ip, #1
         Repeat until we've computed numTaps-(4*os->L) coefficients. */
        
        /* Initialize tapCnt with number of samples */
        tapCnt = phaseLen;
        
        while (tapCnt > 0U)
24010c5c:	ed9f 6a28 	vldr	s12, [pc, #160]	; 24010d00 <tOversampler_upsample+0xd0>
        ptr2 = pCoeffs + (os->ratio - j);
24010c60:	eba4 030c 	sub.w	r3, r4, ip
24010c64:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
24010c68:	b31d      	cbz	r5, 24010cb2 <tOversampler_upsample+0x82>
24010c6a:	2c01      	cmp	r4, #1
            sum0 += *ptr1++ * *ptr2;
            
            /* Upsampling is done by stuffing L-1 zeros between each sample.
             * So instead of multiplying zeros with coefficients,
             * Increment the coefficient pointer by interpolation factor times. */
            ptr2 += os->ratio;
24010c6c:	ea4f 0984 	mov.w	r9, r4, lsl #2
24010c70:	d134      	bne.n	24010cdc <tOversampler_upsample+0xac>
24010c72:	462a      	mov	r2, r5
        ptr1 = pState;
24010c74:	4630      	mov	r0, r6
        sum0 = 0.0f;
24010c76:	eddf 7a22 	vldr	s15, [pc, #136]	; 24010d00 <tOversampler_upsample+0xd0>
            sum0 += *ptr1++ * *ptr2;
24010c7a:	ecf3 6a01 	vldmia	r3!, {s13}
        while (tapCnt > 0U)
24010c7e:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
24010c80:	ecb0 7a01 	vldmia	r0!, {s14}
24010c84:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
24010c88:	d1f7      	bne.n	24010c7a <tOversampler_upsample+0x4a>
            /* Decrement loop counter */
            tapCnt--;
        }
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
24010c8a:	ee07 4a10 	vmov	s14, r4
    while (i > 0U)
24010c8e:	45e6      	cmp	lr, ip
        
        /* Increment the address modifier index of coefficient buffer */
        j++;
24010c90:	f10c 0301 	add.w	r3, ip, #1
        *output++ = sum0 * os->ratio;
24010c94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24010c98:	ee67 7a27 	vmul.f32	s15, s14, s15
24010c9c:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
24010ca0:	d00f      	beq.n	24010cc2 <tOversampler_upsample+0x92>
        ptr2 = pCoeffs + (os->ratio - j);
24010ca2:	68fc      	ldr	r4, [r7, #12]
24010ca4:	469c      	mov	ip, r3
24010ca6:	eba4 030c 	sub.w	r3, r4, ip
24010caa:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
24010cae:	2d00      	cmp	r5, #0
24010cb0:	d1db      	bne.n	24010c6a <tOversampler_upsample+0x3a>
24010cb2:	eef0 7a46 	vmov.f32	s15, s12
    while (i > 0U)
24010cb6:	45e6      	cmp	lr, ip
        j++;
24010cb8:	f10c 0301 	add.w	r3, ip, #1
        *output++ = sum0 * os->ratio;
24010cbc:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
24010cc0:	d1ef      	bne.n	24010ca2 <tOversampler_upsample+0x72>
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
24010cc2:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
24010cc4:	f106 0204 	add.w	r2, r6, #4
    pStateCur = os->upState;
24010cc8:	69b9      	ldr	r1, [r7, #24]
    while (tapCnt > 0U)
24010cca:	d005      	beq.n	24010cd8 <tOversampler_upsample+0xa8>
    {
        *pStateCur++ = *pState++;
24010ccc:	f852 0b04 	ldr.w	r0, [r2], #4
    while (tapCnt > 0U)
24010cd0:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
24010cd2:	f841 0b04 	str.w	r0, [r1], #4
    while (tapCnt > 0U)
24010cd6:	d1f9      	bne.n	24010ccc <tOversampler_upsample+0x9c>
        
        /* Decrement loop counter */
        tapCnt--;
    }
}
24010cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sum0 = 0.0f;
24010cdc:	eddf 7a08 	vldr	s15, [pc, #32]	; 24010d00 <tOversampler_upsample+0xd0>
            ptr2 += os->ratio;
24010ce0:	462a      	mov	r2, r5
        ptr1 = pState;
24010ce2:	4630      	mov	r0, r6
            sum0 += *ptr1++ * *ptr2;
24010ce4:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
24010ce8:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
24010cea:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
24010cee:	444b      	add	r3, r9
            sum0 += *ptr1++ * *ptr2;
24010cf0:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
24010cf4:	d1f6      	bne.n	24010ce4 <tOversampler_upsample+0xb4>
24010cf6:	e7c8      	b.n	24010c8a <tOversampler_upsample+0x5a>
        output[0] = input;
24010cf8:	ed81 0a00 	vstr	s0, [r1]
}
24010cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
24010d00:	00000000 	.word	0x00000000

24010d04 <tOversampler_downsample>:
#ifdef ITCMRAM
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_downsample(tOversampler *const osr, Lfloat* input)
#else
Lfloat tOversampler_downsample(tOversampler *const osr, Lfloat* input)
#endif
{
24010d04:	b470      	push	{r4, r5, r6}
    _tOversampler* os = *osr;
24010d06:	6806      	ldr	r6, [r0, #0]
    
    if (os->ratio == 1) return input[0];
24010d08:	68f2      	ldr	r2, [r6, #12]
24010d0a:	2a01      	cmp	r2, #1
24010d0c:	d028      	beq.n	24010d60 <tOversampler_downsample+0x5c>
    Lfloat *pStateCur;                          /* Points to the current sample of the state */
    Lfloat *px0;                                /* Temporary pointer for state buffer */
    Lfloat *pb;                                 /* Temporary pointer for coefficient buffer */
    Lfloat x0, c0;                              /* Temporary variables to hold state and coefficient values */
    Lfloat acc0;                                /* Accumulator */
    uint32_t numTaps = os->numTaps;                 /* Number of filter coefficients in the filter */
24010d0e:	6a33      	ldr	r3, [r6, #32]
    uint32_t i, tapCnt;
    Lfloat output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
24010d10:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    Lfloat *pState = os->downState;                 /* State pointer */
24010d14:	69f4      	ldr	r4, [r6, #28]
    pStateCur = os->downState + (numTaps - 1U);
24010d16:	4418      	add	r0, r3
    Lfloat *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
24010d18:	6975      	ldr	r5, [r6, #20]
    pStateCur = os->downState + (numTaps - 1U);
24010d1a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
    
    do
    {
        *pStateCur++ = *input++;
24010d1e:	f851 cb04 	ldr.w	ip, [r1], #4
        
    } while (--i);
24010d22:	3a01      	subs	r2, #1
        *pStateCur++ = *input++;
24010d24:	f840 cb04 	str.w	ip, [r0], #4
    } while (--i);
24010d28:	d1f9      	bne.n	24010d1e <tOversampler_downsample+0x1a>
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
    
    while (tapCnt > 0U)
24010d2a:	b1eb      	cbz	r3, 24010d68 <tOversampler_downsample+0x64>
24010d2c:	461a      	mov	r2, r3
    acc0 = 0.0f;
24010d2e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 24010d7c <tOversampler_downsample+0x78>
    px0 = pState;
24010d32:	4621      	mov	r1, r4
        
        /* Fetch 1 state variable */
        x0 = *px0++;
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
24010d34:	ecb5 7a01 	vldmia	r5!, {s14}
    while (tapCnt > 0U)
24010d38:	3a01      	subs	r2, #1
        acc0 += x0 * c0;
24010d3a:	ecf1 7a01 	vldmia	r1!, {s15}
24010d3e:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
24010d42:	d1f7      	bne.n	24010d34 <tOversampler_downsample+0x30>
        tapCnt--;
    }
    
    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + os->ratio;
24010d44:	68f2      	ldr	r2, [r6, #12]
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
24010d46:	3b01      	subs	r3, #1
    pStateCur = os->downState;
24010d48:	69f1      	ldr	r1, [r6, #28]
    pState = pState + os->ratio;
24010d4a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    while (tapCnt > 0U)
24010d4e:	d005      	beq.n	24010d5c <tOversampler_downsample+0x58>
    {
        *pStateCur++ = *pState++;
24010d50:	f852 0b04 	ldr.w	r0, [r2], #4
    while (tapCnt > 0U)
24010d54:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
24010d56:	f841 0b04 	str.w	r0, [r1], #4
    while (tapCnt > 0U)
24010d5a:	d1f9      	bne.n	24010d50 <tOversampler_downsample+0x4c>
        /* Decrement loop counter */
        tapCnt--;
    }
    
    return output;
}
24010d5c:	bc70      	pop	{r4, r5, r6}
24010d5e:	4770      	bx	lr
    if (os->ratio == 1) return input[0];
24010d60:	ed91 0a00 	vldr	s0, [r1]
}
24010d64:	bc70      	pop	{r4, r5, r6}
24010d66:	4770      	bx	lr
    pState = pState + os->ratio;
24010d68:	68f2      	ldr	r2, [r6, #12]
    tapCnt = (numTaps - 1U);
24010d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    pStateCur = os->downState;
24010d6e:	69f1      	ldr	r1, [r6, #28]
    acc0 = 0.0f;
24010d70:	ed9f 0a02 	vldr	s0, [pc, #8]	; 24010d7c <tOversampler_downsample+0x78>
    pState = pState + os->ratio;
24010d74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    while (tapCnt > 0U)
24010d78:	e7ea      	b.n	24010d50 <tOversampler_downsample+0x4c>
24010d7a:	bf00      	nop
24010d7c:	00000000 	.word	0x00000000

24010d80 <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
24010d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
24010d82:	698f      	ldr	r7, [r1, #24]
{
24010d84:	4606      	mov	r6, r0
24010d86:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
24010d88:	2020      	movs	r0, #32
24010d8a:	4639      	mov	r1, r7
24010d8c:	f003 ff84 	bl	24014c98 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
24010d90:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
24010d94:	4a10      	ldr	r2, [pc, #64]	; (24010dd8 <tCrusher_init+0x58>)
    c->op = 4;
24010d96:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
24010d98:	6030      	str	r0, [r6, #0]
24010d9a:	4604      	mov	r4, r0
    c->op = 4;
24010d9c:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
24010d9e:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
24010da0:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
24010da2:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
24010da4:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24010da6:	2010      	movs	r0, #16
    _tMempool* m = *mp;
24010da8:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24010daa:	4629      	mov	r1, r5
24010dac:	f003 ff74 	bl	24014c98 <mpool_alloc>
    s->invRatio = 1.0f;
24010db0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
24010db4:	2200      	movs	r2, #0
    s->count = 0;
24010db6:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
24010db8:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24010dba:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24010ddc <tCrusher_init+0x5c>
    s->mempool = m;
24010dbe:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
24010dc0:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
24010dc2:	6082      	str	r2, [r0, #8]
    s->count = 0;
24010dc4:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
24010dc6:	eddf 7a06 	vldr	s15, [pc, #24]	; 24010de0 <tCrusher_init+0x60>
24010dca:	edd4 6a03 	vldr	s13, [r4, #12]
24010dce:	eee6 7a87 	vfma.f32	s15, s13, s14
24010dd2:	edc4 7a06 	vstr	s15, [r4, #24]
}
24010dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24010dd8:	3951b717 	.word	0x3951b717
24010ddc:	3912ccf6 	.word	0x3912ccf6
24010de0:	3e99999a 	.word	0x3e99999a

24010de4 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
24010de4:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24010e60 <tCrusher_tick+0x7c>
24010de8:	ee20 0a27 	vmul.f32	s0, s0, s15
{
24010dec:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
24010dee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
24010df2:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
24010df4:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
24010df8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
24010dfc:	6960      	ldr	r0, [r4, #20]
24010dfe:	05c0      	lsls	r0, r0, #23
24010e00:	ee20 0a27 	vmul.f32	s0, s0, s15
24010e04:	f003 fcc6 	bl	24014794 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
24010e08:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
24010e0c:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
24010e10:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24010e14:	f003 fcc4 	bl	240147a0 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
24010e18:	edd4 0a04 	vldr	s1, [r4, #16]
24010e1c:	f003 fca8 	bl	24014770 <LEAF_round>
    _tSampleReducer* s = *sr;
24010e20:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
24010e22:	68da      	ldr	r2, [r3, #12]
24010e24:	edd3 7a01 	vldr	s15, [r3, #4]
24010e28:	ee07 2a10 	vmov	s14, r2
24010e2c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24010e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
24010e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010e38:	dc08      	bgt.n	24010e4c <tCrusher_tick+0x68>
    s->count++;
24010e3a:	3201      	adds	r2, #1
    return s->hold;
24010e3c:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
24010e40:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
24010e42:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
24010e46:	ee20 0a27 	vmul.f32	s0, s0, s15
24010e4a:	bd10      	pop	{r4, pc}
        s->hold = input;
24010e4c:	2201      	movs	r2, #1
24010e4e:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
24010e52:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
24010e54:	edd4 7a06 	vldr	s15, [r4, #24]
}
24010e58:	ee20 0a27 	vmul.f32	s0, s0, s15
24010e5c:	bd10      	pop	{r4, pc}
24010e5e:	bf00      	nop
24010e60:	459c4000 	.word	0x459c4000

24010e64 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
24010e64:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
24010e68:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
24010e6a:	ee20 0a27 	vmul.f32	s0, s0, s15
24010e6e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24010e72:	ed83 0a05 	vstr	s0, [r3, #20]
}
24010e76:	4770      	bx	lr

24010e78 <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
24010e78:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
24010e7c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24010eb0 <tCrusher_setQuality+0x38>
24010e80:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
24010e84:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
24010e86:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
24010e88:	f003 fc8a 	bl	240147a0 <LEAF_clip>
    
    c->div = 0.01f + val * SCALAR;
24010e8c:	ed9f 6a09 	vldr	s12, [pc, #36]	; 24010eb4 <tCrusher_setQuality+0x3c>
24010e90:	eddf 7a09 	vldr	s15, [pc, #36]	; 24010eb8 <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24010e94:	eddf 6a09 	vldr	s13, [pc, #36]	; 24010ebc <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
24010e98:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24010e9c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24010ec0 <tCrusher_setQuality+0x48>
24010ea0:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
24010ea4:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
24010ea8:	ed84 7a06 	vstr	s14, [r4, #24]
}
24010eac:	bd10      	pop	{r4, pc}
24010eae:	bf00      	nop
24010eb0:	00000000 	.word	0x00000000
24010eb4:	459c4000 	.word	0x459c4000
24010eb8:	3c23d70a 	.word	0x3c23d70a
24010ebc:	3912ccf6 	.word	0x3912ccf6
24010ec0:	3e99999a 	.word	0x3e99999a

24010ec4 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
24010ec4:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
24010ec6:	ed83 0a04 	vstr	s0, [r3, #16]
}
24010eca:	4770      	bx	lr

24010ecc <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
24010ecc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
    _tCrusher* c = *cr;
24010ed0:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
24010ed2:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
24010ed6:	eeb4 0a67 	vcmp.f32	s0, s15
24010eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010ede:	d809      	bhi.n	24010ef4 <tCrusher_setSamplingRatio+0x28>
24010ee0:	eeb5 0a40 	vcmp.f32	s0, #0.0
24010ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010ee8:	db04      	blt.n	24010ef4 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
24010eea:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
24010eee:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
24010ef0:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
24010ef4:	4770      	bx	lr
24010ef6:	bf00      	nop

24010ef8 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
24010ef8:	b570      	push	{r4, r5, r6, lr}
24010efa:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
24010efe:	698d      	ldr	r5, [r1, #24]
{
24010f00:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
24010f02:	206c      	movs	r0, #108	; 0x6c
24010f04:	4629      	mov	r1, r5
24010f06:	f003 fec7 	bl	24014c98 <mpool_alloc>
24010f0a:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24010f0c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
24010f0e:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
24010f12:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
24010f14:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
24010f16:	ed93 8a00 	vldr	s16, [r3]
24010f1a:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
24010f1e:	ee80 0a08 	vdiv.f32	s0, s0, s16
24010f22:	f008 fd79 	bl	24019a18 <expf>
24010f26:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
24010f2a:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
24010f2e:	ee87 0a88 	vdiv.f32	s0, s15, s16
24010f32:	f008 fd71 	bl	24019a18 <expf>
    c->x_T[0] = 0.0f;
    c->x_T[1] = 0.0f;
    c->y_T[0] = 0.0f;
    c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
24010f36:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f;
24010f3a:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
24010f3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
24010f40:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
24010f42:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f;
24010f44:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
24010f46:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
24010f48:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[1] = 0.0f;
24010f4c:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f;
24010f4e:	62e3      	str	r3, [r4, #44]	; 0x2c
    c->y_G[1] = 0.0f;
24010f50:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f;
24010f52:	6363      	str	r3, [r4, #52]	; 0x34
    c->x_T[1] = 0.0f;
24010f54:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f;
24010f56:	63e3      	str	r3, [r4, #60]	; 0x3c
    c->y_T[1] = 0.0f;
24010f58:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
24010f5a:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
24010f5c:	4905      	ldr	r1, [pc, #20]	; (24010f74 <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
24010f5e:	4b06      	ldr	r3, [pc, #24]	; (24010f78 <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
24010f60:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
24010f64:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
24010f66:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
24010f68:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
24010f6a:	6223      	str	r3, [r4, #32]
}
24010f6c:	ecbd 8b02 	vpop	{d8}
24010f70:	bd70      	pop	{r4, r5, r6, pc}
24010f72:	bf00      	nop
24010f74:	40400000 	.word	0x40400000
24010f78:	3e2aaaab 	.word	0x3e2aaaab

24010f7c <tCompressor_tickWithTableHardKnee>:
    return attenuation * in;
}

//requires tables to be set with set function
Lfloat tCompressor_tickWithTableHardKnee(tCompressor* const comp, Lfloat in)
{
24010f7c:	b510      	push	{r4, lr}
    _tCompressor* c = *comp;
24010f7e:	6804      	ldr	r4, [r0, #0]
{
24010f80:	ed2d 8b02 	vpush	{d8}

    Lfloat slope, overshoot;

    in = fastabsf(in);
24010f84:	f003 faca 	bl	2401451c <fastabsf>
24010f88:	eeb0 8a40 	vmov.f32	s16, s0
    int inAmpIndex = LEAF_clip (0, (in * c->atodbScalar) - c->atodbOffset, c->atodbTableSizeMinus1);
24010f8c:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
24010f90:	edd4 0a17 	vldr	s1, [r4, #92]	; 0x5c
24010f94:	ed9f 0a31 	vldr	s0, [pc, #196]	; 2401105c <tCompressor_tickWithTableHardKnee+0xe0>
24010f98:	eed7 0a88 	vfnms.f32	s1, s15, s16
24010f9c:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
24010fa0:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
24010fa4:	f003 fbfc 	bl	240147a0 <LEAF_clip>
24010fa8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    Lfloat in_db = c->atodbTable[inAmpIndex];
24010fac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c

    c->y_T[1] = c->y_T[0];

    slope = 1.0f - c->invR; // feed-forward topology;

    overshoot = in_db - c->T;
24010fae:	ed94 7a03 	vldr	s14, [r4, #12]
    Lfloat in_db = c->atodbTable[inAmpIndex];
24010fb2:	ee10 2a10 	vmov	r2, s0
    c->y_T[1] = c->y_T[0];
24010fb6:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    slope = 1.0f - c->invR; // feed-forward topology;
24010fba:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat in_db = c->atodbTable[inAmpIndex];
24010fbe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24010fc2:	edd3 7a00 	vldr	s15, [r3]
    c->y_T[1] = c->y_T[0];
24010fc6:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    overshoot = in_db - c->T;
24010fca:	ee77 7ac7 	vsub.f32	s15, s15, s14

  // simpler hard-knee version (more efficient)
    if (overshoot <= 0.0f)
24010fce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
24010fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24010fd6:	d93c      	bls.n	24011052 <tCompressor_tickWithTableHardKnee+0xd6>
    slope = 1.0f - c->invR; // feed-forward topology;
24010fd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
        c->isActive = 0;
    }
    else
    {
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
24010fdc:	2301      	movs	r3, #1
    slope = 1.0f - c->invR; // feed-forward topology;
24010fde:	ee37 7a46 	vsub.f32	s14, s14, s12
        out_db = in_db + slope * overshoot;
24010fe2:	ee27 7a27 	vmul.f32	s14, s14, s15
    }

    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
24010fe6:	eef4 6ac7 	vcmpe.f32	s13, s14
    c->x_T[0] = out_db - in_db;
24010fea:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
24010fee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuationDb = c->M - c->y_T[0];
   // tempdbToA = dbtoa(attenuationDb);
    int attenuationDbIndex = LEAF_clip (0, (attenuationDb * c->dbtoaScalar) - c->dbtoaOffset, c->dbtoaTableSizeMinus1);
24010ff2:	edd4 0a18 	vldr	s1, [r4, #96]	; 0x60
24010ff6:	6463      	str	r3, [r4, #68]	; 0x44
    if (c->x_T[0] > c->y_T[1])
24010ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int attenuationDbIndex = LEAF_clip (0, (attenuationDb * c->dbtoaScalar) - c->dbtoaOffset, c->dbtoaTableSizeMinus1);
24010ffc:	ed9f 0a17 	vldr	s0, [pc, #92]	; 2401105c <tCompressor_tickWithTableHardKnee+0xe0>
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
24011000:	bf4c      	ite	mi
24011002:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
24011006:	ed94 6a02 	vldrpl	s12, [r4, #8]
2401100a:	ee77 7ac6 	vsub.f32	s15, s15, s12
2401100e:	ee67 7a87 	vmul.f32	s15, s15, s14
    Lfloat attenuationDb = c->M - c->y_T[0];
24011012:	ed94 7a06 	vldr	s14, [r4, #24]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
24011016:	eee6 7a86 	vfma.f32	s15, s13, s12
    int attenuationDbIndex = LEAF_clip (0, (attenuationDb * c->dbtoaScalar) - c->dbtoaOffset, c->dbtoaTableSizeMinus1);
2401101a:	edd4 6a16 	vldr	s13, [r4, #88]	; 0x58
2401101e:	ed94 6a1a 	vldr	s12, [r4, #104]	; 0x68
24011022:	eeb8 1ac6 	vcvt.f32.s32	s2, s12
    Lfloat attenuationDb = c->M - c->y_T[0];
24011026:	ee37 7a67 	vsub.f32	s14, s14, s15
2401102a:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    int attenuationDbIndex = LEAF_clip (0, (attenuationDb * c->dbtoaScalar) - c->dbtoaOffset, c->dbtoaTableSizeMinus1);
2401102e:	eed6 0a87 	vfnms.f32	s1, s13, s14
24011032:	f003 fbb5 	bl	240147a0 <LEAF_clip>
24011036:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    Lfloat attenuation = c->dbtoaTable[attenuationDbIndex];
2401103a:	6d23      	ldr	r3, [r4, #80]	; 0x50
2401103c:	ee10 2a10 	vmov	r2, s0
24011040:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    return attenuation * in;
24011044:	ed93 0a00 	vldr	s0, [r3]
}
24011048:	ee28 0a00 	vmul.f32	s0, s16, s0
2401104c:	ecbd 8b02 	vpop	{d8}
24011050:	bd10      	pop	{r4, pc}
24011052:	ed9f 7a02 	vldr	s14, [pc, #8]	; 2401105c <tCompressor_tickWithTableHardKnee+0xe0>
        c->isActive = 0;
24011056:	2300      	movs	r3, #0
24011058:	e7c5      	b.n	24010fe6 <tCompressor_tickWithTableHardKnee+0x6a>
2401105a:	bf00      	nop
2401105c:	00000000 	.word	0x00000000

24011060 <tCompressor_setTables>:
{
    _tCompressor* c = *comp;
	c->atodbTable = atodb;
	c->dbtoaTable = dbtoa;

	c->atodbTableSizeMinus1 = atodbTableSize-1;
24011060:	3b01      	subs	r3, #1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24011062:	ee70 0ac0 	vsub.f32	s1, s1, s0
    _tCompressor* c = *comp;
24011066:	6800      	ldr	r0, [r0, #0]
	c->atodbOffset = atodbMinIn * c->atodbScalar;


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24011068:	ee71 1ac1 	vsub.f32	s3, s3, s2
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
2401106c:	ee07 3a90 	vmov	s15, r3
	c->atodbTableSizeMinus1 = atodbTableSize-1;
24011070:	6643      	str	r3, [r0, #100]	; 0x64
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24011072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
{
24011076:	9b00      	ldr	r3, [sp, #0]
	c->atodbTable = atodb;
24011078:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
2401107a:	3b01      	subs	r3, #1
	c->dbtoaTable = dbtoa;
2401107c:	6502      	str	r2, [r0, #80]	; 0x50
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
2401107e:	eec7 7a20 	vdiv.f32	s15, s14, s1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
24011082:	6683      	str	r3, [r0, #104]	; 0x68
	c->atodbOffset = atodbMinIn * c->atodbScalar;
24011084:	ee27 0a80 	vmul.f32	s0, s15, s0
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
24011088:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
2401108c:	ee07 3a90 	vmov	s15, r3
24011090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	c->atodbOffset = atodbMinIn * c->atodbScalar;
24011094:	ed80 0a17 	vstr	s0, [r0, #92]	; 0x5c
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
24011098:	eec7 7a21 	vdiv.f32	s15, s14, s3
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
2401109c:	ee27 1a81 	vmul.f32	s2, s15, s2
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
240110a0:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
240110a4:	ed80 1a18 	vstr	s2, [r0, #96]	; 0x60

}
240110a8:	4770      	bx	lr
240110aa:	bf00      	nop

240110ac <tCompressor_setSampleRate>:
    c->tauRelease = fastExp4(-1.0f/(0.001f * release * c->sampleRate));
}

void tCompressor_setSampleRate(tCompressor* const comp, Lfloat sampleRate)
{
    _tCompressor* c = *comp;
240110ac:	6803      	ldr	r3, [r0, #0]
    c->sampleRate = sampleRate;
240110ae:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
}
240110b2:	4770      	bx	lr

240110b4 <tFeedbackLeveler_init>:
/* Feedback Leveler */

void tFeedbackLeveler_init (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, LEAF* const leaf)
{
240110b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
    _tMempool* m = *mp;
240110b6:	4614      	mov	r4, r2
{
240110b8:	4606      	mov	r6, r0
240110ba:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
240110bc:	2018      	movs	r0, #24
{
240110be:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
240110c2:	f854 7f18 	ldr.w	r7, [r4, #24]!
{
240110c6:	b083      	sub	sp, #12
240110c8:	eef0 8a40 	vmov.f32	s17, s0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
240110cc:	4639      	mov	r1, r7
{
240110ce:	eeb0 8a41 	vmov.f32	s16, s2
240110d2:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
240110d6:	f003 fddf 	bl	24014c98 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
240110da:	4621      	mov	r1, r4
    p->curr=0.0f;
240110dc:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
240110de:	4604      	mov	r4, r0
240110e0:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
240110e2:	ed9d 0a01 	vldr	s0, [sp, #4]
240110e6:	3014      	adds	r0, #20
    p->mempool = m;
240110e8:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
240110ec:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
240110f0:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
240110f2:	f7ff f95f 	bl	240103b4 <tPowerFollower_initToPool>
    p->mode=mode;
240110f6:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
240110f8:	ed84 8a02 	vstr	s16, [r4, #8]
}
240110fc:	b003      	add	sp, #12
240110fe:	ecbd 8b02 	vpop	{d8}
24011102:	bdf0      	pop	{r4, r5, r6, r7, pc}

24011104 <tFeedbackLeveler_initToPool>:
{
24011104:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
24011106:	6817      	ldr	r7, [r2, #0]
{
24011108:	4614      	mov	r4, r2
2401110a:	4606      	mov	r6, r0
2401110c:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
2401110e:	2018      	movs	r0, #24
24011110:	4639      	mov	r1, r7
{
24011112:	ed2d 8b02 	vpush	{d8}
24011116:	eef0 8a40 	vmov.f32	s17, s0
2401111a:	b083      	sub	sp, #12
2401111c:	eeb0 8a41 	vmov.f32	s16, s2
24011120:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
24011124:	f003 fdb8 	bl	24014c98 <mpool_alloc>
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24011128:	4621      	mov	r1, r4
    p->curr=0.0f;
2401112a:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
2401112c:	4604      	mov	r4, r0
2401112e:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24011130:	ed9d 0a01 	vldr	s0, [sp, #4]
24011134:	3014      	adds	r0, #20
    p->mempool = m;
24011136:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
2401113a:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
2401113e:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
24011140:	f7ff f938 	bl	240103b4 <tPowerFollower_initToPool>
    p->mode=mode;
24011144:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
24011146:	ed84 8a02 	vstr	s16, [r4, #8]
}
2401114a:	b003      	add	sp, #12
2401114c:	ecbd 8b02 	vpop	{d8}
24011150:	bdf0      	pop	{r4, r5, r6, r7, pc}
24011152:	bf00      	nop

24011154 <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
24011154:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
24011156:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
24011158:	f104 0014 	add.w	r0, r4, #20
2401115c:	f7ff f944 	bl	240103e8 <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
24011160:	6821      	ldr	r1, [r4, #0]
24011162:	4620      	mov	r0, r4
}
24011164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
24011168:	f003 be58 	b.w	24014e1c <mpool_free>

2401116c <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
2401116c:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
2401116e:	ed83 0a02 	vstr	s0, [r3, #8]
}
24011172:	4770      	bx	lr

24011174 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
24011174:	6800      	ldr	r0, [r0, #0]
24011176:	3014      	adds	r0, #20
24011178:	f7ff b93a 	b.w	240103f0 <tPowerFollower_setFactor>

2401117c <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
2401117c:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
2401117e:	60d9      	str	r1, [r3, #12]
}
24011180:	4770      	bx	lr
24011182:	bf00      	nop

24011184 <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
24011184:	b510      	push	{r4, lr}
24011186:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
2401118a:	6804      	ldr	r4, [r0, #0]
{
2401118c:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
24011190:	f104 0014 	add.w	r0, r4, #20
24011194:	f7ff f93e 	bl	24010414 <tPowerFollower_tick>
24011198:	edd4 7a01 	vldr	s15, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
2401119c:	68e3      	ldr	r3, [r4, #12]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
2401119e:	ee30 7a67 	vsub.f32	s14, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
240111a2:	b91b      	cbnz	r3, 240111ac <tFeedbackLeveler_tick+0x28>
240111a4:	eddf 7a08 	vldr	s15, [pc, #32]	; 240111c8 <tFeedbackLeveler_tick+0x44>
240111a8:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
240111ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240111b0:	edd4 6a02 	vldr	s13, [r4, #8]
240111b4:	eee6 7ac7 	vfms.f32	s15, s13, s14
240111b8:	ee27 0a88 	vmul.f32	s0, s15, s16
240111bc:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
240111c0:	ecbd 8b02 	vpop	{d8}
240111c4:	bd10      	pop	{r4, pc}
240111c6:	bf00      	nop
240111c8:	00000000 	.word	0x00000000

240111cc <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
240111cc:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
240111ce:	ed83 0a01 	vstr	s0, [r3, #4]
}
240111d2:	4770      	bx	lr

240111d4 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, LEAF* const leaf)
{
240111d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240111d6:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
240111da:	699e      	ldr	r6, [r3, #24]
{
240111dc:	4614      	mov	r4, r2
240111de:	4607      	mov	r7, r0
240111e0:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
240111e2:	206c      	movs	r0, #108	; 0x6c
240111e4:	4631      	mov	r1, r6
{
240111e6:	eef0 9a40 	vmov.f32	s19, s0
240111ea:	eeb0 9a60 	vmov.f32	s18, s1
240111ee:	eef0 8a61 	vmov.f32	s17, s3
240111f2:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
240111f6:	f003 fd4f 	bl	24014c98 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
240111fa:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
240111fe:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
24011200:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
24011202:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24011204:	eef8 5a67 	vcvt.f32.u32	s11, s15
24011208:	eddf 7a22 	vldr	s15, [pc, #136]	; 24011294 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
2401120c:	6873      	ldr	r3, [r6, #4]

    adsr->next = 0.0f;

    adsr->whichStage = env_idle;

    adsr->sustain = sustain;
2401120e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
24011212:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24011214:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24011218:	ee65 5aa7 	vmul.f32	s11, s11, s15
    adsr->exp_buff = expBuffer;
2401121c:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
2401121e:	6084      	str	r4, [r0, #8]
    adsr->sustain = sustain;
24011220:	fe88 8a46 	vminnm.f32	s16, s16, s12
    adsr->sampleRate = leaf->sampleRate;
24011224:	ed93 5a00 	vldr	s10, [r3]
    adsr->whichStage = env_idle;
24011228:	2200      	movs	r2, #0
2401122a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 24011298 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
2401122e:	eec5 7a85 	vdiv.f32	s15, s11, s10
    adsr->sampleRate = leaf->sampleRate;
24011232:	ed80 5a04 	vstr	s10, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24011236:	fe89 0a87 	vmaxnm.f32	s0, s19, s14
2401123a:	fec9 0a07 	vmaxnm.f32	s1, s18, s14
2401123e:	fec8 1a87 	vmaxnm.f32	s3, s17, s14

    adsr->baseLeakFactor = 1.0f;
24011242:	ed80 6a18 	vstr	s12, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
24011246:	ed80 6a19 	vstr	s12, [r0, #100]	; 0x64
    adsr->sustain = sustain;
2401124a:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    adsr->next = 0.0f;
2401124e:	ed80 7a06 	vstr	s14, [r0, #24]
    adsr->whichStage = env_idle;
24011252:	63c2      	str	r2, [r0, #60]	; 0x3c
    adsr->attack = attack;
24011254:	ed80 0a08 	vstr	s0, [r0, #32]
    adsr->decay = decay;
24011258:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
    adsr->sustain = sustain;
2401125c:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    adsr->release = release;
24011260:	edc0 1a0a 	vstr	s3, [r0, #40]	; 0x28
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24011264:	ee87 5a80 	vdiv.f32	s10, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
24011268:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
2401126c:	eec7 5aa0 	vdiv.f32	s11, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24011270:	ee87 6aa1 	vdiv.f32	s12, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
24011274:	ee27 7aa6 	vmul.f32	s14, s15, s13
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
24011278:	ed80 5a0b 	vstr	s10, [r0, #44]	; 0x2c
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
2401127c:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
24011280:	edc0 5a0c 	vstr	s11, [r0, #48]	; 0x30
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24011284:	ed80 6a0d 	vstr	s12, [r0, #52]	; 0x34
    adsr->invSampleRate = leaf->invSampleRate;
24011288:	685b      	ldr	r3, [r3, #4]
2401128a:	6683      	str	r3, [r0, #104]	; 0x68
}
2401128c:	ecbd 8b04 	vpop	{d8-d9}
24011290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24011292:	bf00      	nop
24011294:	4479ffff 	.word	0x4479ffff
24011298:	00000000 	.word	0x00000000

2401129c <tADSRT_setAttack>:
void     tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
2401129c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
240112a0:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
240112a2:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
240112a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
240112aa:	bf48      	it	mi
240112ac:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 240112c0 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
240112b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
240112b4:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
240112b8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
240112bc:	4770      	bx	lr
240112be:	bf00      	nop
240112c0:	3c23d70a 	.word	0x3c23d70a

240112c4 <tADSRT_setDecay>:
void     tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
240112c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
240112c8:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
240112ca:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
240112ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
240112d2:	bf48      	it	mi
240112d4:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 240112e8 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
240112d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
240112dc:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
240112e0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
240112e4:	4770      	bx	lr
240112e6:	bf00      	nop
240112e8:	3c23d70a 	.word	0x3c23d70a

240112ec <tADSRT_setSustain>:
void     tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
240112ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240112f0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 24011304 <tADSRT_setSustain+0x18>
    _tADSRT* adsr = *adsrenv;
240112f4:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
240112f6:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
240112fa:	fe80 0a67 	vminnm.f32	s0, s0, s15
240112fe:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
    else                     adsr->sustain = sustain;
}
24011302:	4770      	bx	lr
24011304:	00000000 	.word	0x00000000

24011308 <tADSRT_setRelease>:
void     tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
24011308:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
2401130c:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
2401130e:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
24011312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
24011316:	bf48      	it	mi
24011318:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 2401132c <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
2401131c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
24011320:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
24011324:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
24011328:	4770      	bx	lr
2401132a:	bf00      	nop
2401132c:	3c23d70a 	.word	0x3c23d70a

24011330 <tADSRT_setLeakFactor>:
#ifdef ITCMRAM
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#else
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#endif
{
24011330:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
24011332:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
24011334:	eddf 7a06 	vldr	s15, [pc, #24]	; 24011350 <tADSRT_setLeakFactor+0x20>
24011338:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
    adsr->baseLeakFactor = leakFactor;
2401133c:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
24011340:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011344:	f008 fde0 	bl	24019f08 <powf>
24011348:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
2401134c:	bd10      	pop	{r4, pc}
2401134e:	bf00      	nop
24011350:	472c4400 	.word	0x472c4400

24011354 <tADSRT_on>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#else
void tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#endif
{
    _tADSRT* adsr = *adsrenv;
24011354:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
24011356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24011358:	b162      	cbz	r2, 24011374 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
2401135a:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
2401135c:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
2401135e:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
24011360:	65d8      	str	r0, [r3, #92]	; 0x5c
        adsr->rampPeak = adsr->next;
24011362:	649a      	str	r2, [r3, #72]	; 0x48
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
24011364:	2200      	movs	r2, #0
24011366:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
24011368:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    adsr->attackPhase = 0;
2401136c:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
2401136e:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
24011370:	659a      	str	r2, [r3, #88]	; 0x58
}
24011372:	4770      	bx	lr
        adsr->whichStage = env_attack;
24011374:	2101      	movs	r1, #1
24011376:	e7f5      	b.n	24011364 <tADSRT_on+0x10>

24011378 <tADSRT_off>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_off(tADSRT* const adsrenv)
#else
    void tADSRT_off(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
24011378:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
2401137a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2401137c:	b11a      	cbz	r2, 24011386 <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
2401137e:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
24011380:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
24011382:	63d9      	str	r1, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
24011384:	64da      	str	r2, [r3, #76]	; 0x4c
    }
}
24011386:	4770      	bx	lr

24011388 <tADSRT_clear>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_clear(tADSRT* const adsrenv)
#else
	void	tADSRT_clear(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
24011388:	6803      	ldr	r3, [r0, #0]

    adsr->whichStage = env_idle;
2401138a:	2100      	movs	r1, #0
    adsr->next = 0.0f;
2401138c:	2200      	movs	r2, #0
    adsr->whichStage = env_idle;
2401138e:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->next = 0.0f;
24011390:	619a      	str	r2, [r3, #24]
}
24011392:	4770      	bx	lr

24011394 <tADSRT_tick>:
#ifdef ITCMRAM
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))   tADSRT_tick(tADSRT* const adsrenv)
#else
		Lfloat  tADSRT_tick(tADSRT* const adsrenv)
#endif
{
24011394:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
24011396:	6804      	ldr	r4, [r0, #0]
{
24011398:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
2401139c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
2401139e:	3b01      	subs	r3, #1
240113a0:	2b04      	cmp	r3, #4
240113a2:	f200 8154 	bhi.w	2401164e <tADSRT_tick+0x2ba>
240113a6:	e8df f003 	tbb	[pc, r3]
240113aa:	4d1f      	.short	0x4d1f
240113ac:	6f3a      	.short	0x6f3a
240113ae:	03          	.byte	0x03
240113af:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
240113b0:	edd4 7a03 	vldr	s15, [r4, #12]
240113b4:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
240113b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
240113bc:	eeb4 1ae7 	vcmpe.f32	s2, s15
240113c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240113c4:	dd7d      	ble.n	240114c2 <tADSRT_tick+0x12e>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
240113c6:	eddf 7aa3 	vldr	s15, [pc, #652]	; 24011654 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_attack;
240113ca:	2301      	movs	r3, #1
240113cc:	eeb0 0a67 	vmov.f32	s0, s15
240113d0:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
240113d2:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
            }

            adsr->rampPhase += adsr->rampInc;
240113d6:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
240113da:	ee77 7a81 	vadd.f32	s15, s15, s2
240113de:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
240113e2:	ecbd 8b02 	vpop	{d8}
240113e6:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
240113e8:	edd4 7a03 	vldr	s15, [r4, #12]
240113ec:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
240113f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
240113f4:	eeb4 1ae7 	vcmpe.f32	s2, s15
240113f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240113fc:	f340 808b 	ble.w	24011516 <tADSRT_tick+0x182>
                adsr->whichStage = env_decay;
24011400:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
24011402:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->whichStage = env_decay;
24011406:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain;
24011408:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
2401140c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
24011410:	ee77 7a81 	vadd.f32	s15, s15, s2
24011414:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
}
24011418:	ecbd 8b02 	vpop	{d8}
2401141c:	bd10      	pop	{r4, pc}
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
2401141e:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
24011422:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
24011426:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
2401142a:	ee20 0a26 	vmul.f32	s0, s0, s13
2401142e:	edd4 7a07 	vldr	s15, [r4, #28]
24011432:	ee20 0a07 	vmul.f32	s0, s0, s14
24011436:	ee20 0a27 	vmul.f32	s0, s0, s15
2401143a:	ed84 0a06 	vstr	s0, [r4, #24]
}
2401143e:	ecbd 8b02 	vpop	{d8}
24011442:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
24011444:	edd4 7a03 	vldr	s15, [r4, #12]
24011448:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
2401144c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011450:	eeb4 1ae7 	vcmpe.f32	s2, s15
24011454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011458:	f340 808b 	ble.w	24011572 <tADSRT_tick+0x1de>
                adsr->next = adsr->gain * adsr->sustain;
2401145c:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
24011460:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
24011464:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
24011468:	2203      	movs	r2, #3
                adsr->sustainWithLeak = 1.0f;
2401146a:	61e3      	str	r3, [r4, #28]
                adsr->next = adsr->gain * adsr->sustain;
2401146c:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
24011470:	63e2      	str	r2, [r4, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
24011472:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
24011476:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
2401147a:	ee77 7a81 	vadd.f32	s15, s15, s2
2401147e:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
24011482:	ecbd 8b02 	vpop	{d8}
24011486:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
24011488:	edd4 7a03 	vldr	s15, [r4, #12]
2401148c:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
24011490:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011494:	eeb4 1ae7 	vcmpe.f32	s2, s15
24011498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401149c:	f340 809e 	ble.w	240115dc <tADSRT_tick+0x248>
                adsr->next = 0.0f;
240114a0:	eddf 7a6c 	vldr	s15, [pc, #432]	; 24011654 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_idle;
240114a4:	2300      	movs	r3, #0
240114a6:	eeb0 0a67 	vmov.f32	s0, s15
240114aa:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
240114ac:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
240114b0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
240114b4:	ee77 7a81 	vadd.f32	s15, s15, s2
240114b8:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
}
240114bc:	ecbd 8b02 	vpop	{d8}
240114c0:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
240114c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
240114c6:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
240114ca:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
240114ce:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
240114d2:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
240114d6:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
240114da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240114de:	f100 80b2 	bmi.w	24011646 <tADSRT_tick+0x2b2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
240114e2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240114e6:	6862      	ldr	r2, [r4, #4]
240114e8:	ee17 3a90 	vmov	r3, s15
240114ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
240114f0:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
240114f4:	ee16 3a90 	vmov	r3, s13
240114f8:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
240114fc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24011500:	ed92 0a00 	vldr	s0, [r2]
24011504:	f003 fb2e 	bl	24014b64 <LEAF_interpolation_linear>
24011508:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
2401150c:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
24011510:	ed84 0a06 	vstr	s0, [r4, #24]
24011514:	e75f      	b.n	240113d6 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24011516:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
2401151a:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
2401151e:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
24011522:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
24011526:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
2401152a:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
2401152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011532:	f100 8084 	bmi.w	2401163e <tADSRT_tick+0x2aa>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
24011536:	eefc 7ac7 	vcvt.u32.f32	s15, s14
2401153a:	6862      	ldr	r2, [r4, #4]
2401153c:	ee17 3a90 	vmov	r3, s15
24011540:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24011544:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
24011548:	ee16 3a90 	vmov	r3, s13
2401154c:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
24011550:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24011554:	ed92 0a00 	vldr	s0, [r2]
24011558:	f003 fb04 	bl	24014b64 <LEAF_interpolation_linear>
2401155c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
24011560:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
24011564:	ee37 0ac0 	vsub.f32	s0, s15, s0
24011568:	ee20 0a08 	vmul.f32	s0, s0, s16
2401156c:	ed84 0a06 	vstr	s0, [r4, #24]
24011570:	e74c      	b.n	2401140c <tADSRT_tick+0x78>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24011572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
24011576:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
2401157a:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
2401157e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
24011582:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
24011586:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
2401158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401158e:	d452      	bmi.n	24011636 <tADSRT_tick+0x2a2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
24011590:	eefc 7ac7 	vcvt.u32.f32	s15, s14
24011594:	6862      	ldr	r2, [r4, #4]
24011596:	ee17 3a90 	vmov	r3, s15
2401159a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
2401159e:	edd3 0a00 	vldr	s1, [r3]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
240115a2:	ee16 3a90 	vmov	r3, s13
240115a6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
240115aa:	ed92 0a00 	vldr	s0, [r2]
240115ae:	f003 fad9 	bl	24014b64 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
240115b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240115b6:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
240115ba:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
240115be:	ee76 6ac7 	vsub.f32	s13, s13, s14
240115c2:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
            adsr->decayPhase += adsr->decayInc;
240115c6:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
240115ca:	ee67 7a86 	vmul.f32	s15, s15, s12
240115ce:	eea6 7a80 	vfma.f32	s14, s13, s0
240115d2:	ee27 0a87 	vmul.f32	s0, s15, s14
240115d6:	ed84 0a06 	vstr	s0, [r4, #24]
240115da:	e74c      	b.n	24011476 <tADSRT_tick+0xe2>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
240115dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
240115e0:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
240115e4:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
240115e8:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
240115ec:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
240115f0:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
240115f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240115f8:	d419      	bmi.n	2401162e <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
240115fa:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240115fe:	6862      	ldr	r2, [r4, #4]
24011600:	ee17 3a90 	vmov	r3, s15
24011604:	eb02 0383 	add.w	r3, r2, r3, lsl #2
24011608:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
2401160c:	ee16 3a90 	vmov	r3, s13
24011610:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
24011614:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24011618:	ed92 0a00 	vldr	s0, [r2]
2401161c:	f003 faa2 	bl	24014b64 <LEAF_interpolation_linear>
24011620:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
24011624:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
24011628:	ed84 0a06 	vstr	s0, [r4, #24]
2401162c:	e740      	b.n	240114b0 <tADSRT_tick+0x11c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
2401162e:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24011630:	eddf 0a08 	vldr	s1, [pc, #32]	; 24011654 <tADSRT_tick+0x2c0>
24011634:	e7ea      	b.n	2401160c <tADSRT_tick+0x278>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24011636:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24011638:	eddf 0a06 	vldr	s1, [pc, #24]	; 24011654 <tADSRT_tick+0x2c0>
2401163c:	e7b1      	b.n	240115a2 <tADSRT_tick+0x20e>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
2401163e:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24011640:	eddf 0a04 	vldr	s1, [pc, #16]	; 24011654 <tADSRT_tick+0x2c0>
24011644:	e780      	b.n	24011548 <tADSRT_tick+0x1b4>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
24011646:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
24011648:	eddf 0a02 	vldr	s1, [pc, #8]	; 24011654 <tADSRT_tick+0x2c0>
2401164c:	e752      	b.n	240114f4 <tADSRT_tick+0x160>
    return adsr->next;
2401164e:	ed94 0a06 	vldr	s0, [r4, #24]
24011652:	e6c6      	b.n	240113e2 <tADSRT_tick+0x4e>
24011654:	00000000 	.word	0x00000000

24011658 <tADSRT_tickNoInterp>:
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_tickNoInterp(tADSRT* const adsrenv)
#else
Lfloat   tADSRT_tickNoInterp(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
24011658:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
2401165a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2401165c:	3a01      	subs	r2, #1
2401165e:	2a04      	cmp	r2, #4
24011660:	f200 80c7 	bhi.w	240117f2 <tADSRT_tickNoInterp+0x19a>
24011664:	e8df f002 	tbb	[pc, r2]
24011668:	6533461b 	.word	0x6533461b
2401166c:	03          	.byte	0x03
2401166d:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
2401166e:	edd3 7a03 	vldr	s15, [r3, #12]
24011672:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
24011676:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401167a:	eeb4 7ae7 	vcmpe.f32	s14, s15
2401167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011682:	dd6e      	ble.n	24011762 <tADSRT_tickNoInterp+0x10a>
            {
                adsr->whichStage = env_attack;
24011684:	2201      	movs	r2, #1
                adsr->next = 0.0f;
24011686:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 240117f8 <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_attack;
2401168a:	63da      	str	r2, [r3, #60]	; 0x3c
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
2401168c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
24011690:	ed83 0a06 	vstr	s0, [r3, #24]
24011694:	ee77 7a87 	vadd.f32	s15, s15, s14
24011698:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            break;
2401169c:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
2401169e:	edd3 7a03 	vldr	s15, [r3, #12]
240116a2:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
240116a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
240116aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
240116ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240116b2:	dd64      	ble.n	2401177e <tADSRT_tickNoInterp+0x126>
            {
                adsr->whichStage = env_decay;
240116b4:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
240116b6:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->whichStage = env_decay;
240116ba:	63da      	str	r2, [r3, #60]	; 0x3c
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
240116bc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
240116c0:	ed83 0a06 	vstr	s0, [r3, #24]
240116c4:	ee77 7a87 	vadd.f32	s15, s15, s14
240116c8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
240116cc:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->sustainWithLeak *= adsr->leakFactor;
240116ce:	edd3 7a07 	vldr	s15, [r3, #28]
240116d2:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
240116d6:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
240116da:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
            adsr->sustainWithLeak *= adsr->leakFactor;
240116de:	ee67 7aa6 	vmul.f32	s15, s15, s13
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
240116e2:	ee20 0a07 	vmul.f32	s0, s0, s14
            adsr->sustainWithLeak *= adsr->leakFactor;
240116e6:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
240116ea:	ee20 0a27 	vmul.f32	s0, s0, s15
240116ee:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
240116f2:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
240116f4:	edd3 7a03 	vldr	s15, [r3, #12]
240116f8:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
240116fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
24011700:	eeb4 7ae7 	vcmpe.f32	s14, s15
24011704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011708:	dd4b      	ble.n	240117a2 <tADSRT_tickNoInterp+0x14a>
                adsr->next = adsr->gain * adsr->sustain;
2401170a:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
2401170e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
24011712:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
24011716:	2103      	movs	r1, #3
                adsr->sustainWithLeak = 1.0f;
24011718:	61da      	str	r2, [r3, #28]
                adsr->next = adsr->gain * adsr->sustain;
2401171a:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
2401171e:	63d9      	str	r1, [r3, #60]	; 0x3c
            adsr->decayPhase += adsr->decayInc;
24011720:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
24011724:	ed83 0a06 	vstr	s0, [r3, #24]
24011728:	ee77 7a87 	vadd.f32	s15, s15, s14
2401172c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
24011730:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
24011732:	edd3 7a03 	vldr	s15, [r3, #12]
24011736:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
2401173a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2401173e:	eeb4 7ae7 	vcmpe.f32	s14, s15
24011742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011746:	dd46      	ble.n	240117d6 <tADSRT_tickNoInterp+0x17e>
            {
                adsr->whichStage = env_idle;
24011748:	2200      	movs	r2, #0
                adsr->next = 0.0f;
2401174a:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 240117f8 <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_idle;
2401174e:	63da      	str	r2, [r3, #60]	; 0x3c
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
24011750:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
24011754:	ed83 0a06 	vstr	s0, [r3, #24]
24011758:	ee77 7a87 	vadd.f32	s15, s15, s14
2401175c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
    }
    return adsr->next;
}
24011760:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
24011762:	eefc 6ac7 	vcvt.u32.f32	s13, s14
24011766:	685a      	ldr	r2, [r3, #4]
24011768:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
2401176c:	ee16 1a90 	vmov	r1, s13
24011770:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24011774:	ed92 0a00 	vldr	s0, [r2]
24011778:	ee20 0a27 	vmul.f32	s0, s0, s15
2401177c:	e786      	b.n	2401168c <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
2401177e:	eefc 6ac7 	vcvt.u32.f32	s13, s14
24011782:	685a      	ldr	r2, [r3, #4]
24011784:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
24011788:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
2401178c:	ee16 1a90 	vmov	r1, s13
24011790:	eb02 0281 	add.w	r2, r2, r1, lsl #2
24011794:	edd2 6a00 	vldr	s13, [r2]
24011798:	ee30 0a66 	vsub.f32	s0, s0, s13
2401179c:	ee20 0a27 	vmul.f32	s0, s0, s15
240117a0:	e78c      	b.n	240116bc <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
240117a2:	eefc 5ac7 	vcvt.u32.f32	s11, s14
240117a6:	685a      	ldr	r2, [r3, #4]
240117a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240117ac:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
240117b0:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
240117b4:	ee15 1a90 	vmov	r1, s11
240117b8:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
240117bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
240117c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240117c4:	ee20 0a06 	vmul.f32	s0, s0, s12
240117c8:	ed92 6a00 	vldr	s12, [r2]
240117cc:	eee6 7a26 	vfma.f32	s15, s12, s13
240117d0:	ee20 0a27 	vmul.f32	s0, s0, s15
240117d4:	e7a4      	b.n	24011720 <tADSRT_tickNoInterp+0xc8>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
240117d6:	eefc 6ac7 	vcvt.u32.f32	s13, s14
240117da:	685a      	ldr	r2, [r3, #4]
240117dc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
240117e0:	ee16 1a90 	vmov	r1, s13
240117e4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
240117e8:	ed92 0a00 	vldr	s0, [r2]
240117ec:	ee20 0a27 	vmul.f32	s0, s0, s15
240117f0:	e7ae      	b.n	24011750 <tADSRT_tickNoInterp+0xf8>
    return adsr->next;
240117f2:	ed93 0a06 	vldr	s0, [r3, #24]
240117f6:	4770      	bx	lr
240117f8:	00000000 	.word	0x00000000

240117fc <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
240117fc:	b538      	push	{r3, r4, r5, lr}
240117fe:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
    _tMempool* m = *mp;
24011802:	698d      	ldr	r5, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24011804:	4604      	mov	r4, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011806:	2014      	movs	r0, #20
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
24011808:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
2401180c:	4629      	mov	r1, r5
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
2401180e:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011812:	f003 fa41 	bl	24014c98 <mpool_alloc>
24011816:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401181a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24011844 <tExpSmooth_init+0x48>
2401181e:	6020      	str	r0, [r4, #0]
    smooth->mempool = m;
24011820:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
24011824:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    //smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
24011828:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
2401182c:	6005      	str	r5, [r0, #0]
    smooth->curr = val;
2401182e:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest = val;
24011832:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->factor = factor;
24011836:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
2401183a:	edc0 7a02 	vstr	s15, [r0, #8]
}
2401183e:	ecbd 8b02 	vpop	{d8}
24011842:	bd38      	pop	{r3, r4, r5, pc}
24011844:	00000000 	.word	0x00000000

24011848 <tExpSmooth_initToPool>:
{
24011848:	b538      	push	{r3, r4, r5, lr}
2401184a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2401184e:	680d      	ldr	r5, [r1, #0]
{
24011850:	4604      	mov	r4, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011852:	2014      	movs	r0, #20
{
24011854:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
24011858:	4629      	mov	r1, r5
{
2401185a:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
2401185e:	f003 fa1b 	bl	24014c98 <mpool_alloc>
24011862:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24011866:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24011890 <tExpSmooth_initToPool+0x48>
2401186a:	6020      	str	r0, [r4, #0]
    smooth->mempool = m;
2401186c:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
24011870:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
24011874:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
24011878:	6005      	str	r5, [r0, #0]
    smooth->curr = val;
2401187a:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest = val;
2401187e:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->factor = factor;
24011882:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
24011886:	edc0 7a02 	vstr	s15, [r0, #8]
    //smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
}
2401188a:	ecbd 8b02 	vpop	{d8}
2401188e:	bd38      	pop	{r3, r4, r5, pc}
24011890:	00000000 	.word	0x00000000

24011894 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
24011894:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
24011896:	6801      	ldr	r1, [r0, #0]
24011898:	f003 bac0 	b.w	24014e1c <mpool_free>

2401189c <tExpSmooth_setFactor>:
}

void     tExpSmooth_setFactor(tExpSmooth* const expsmooth, Lfloat factor)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
    _tExpSmooth* smooth = *expsmooth;
2401189c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240118a0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240118bc <tExpSmooth_setFactor+0x20>
240118a4:	6803      	ldr	r3, [r0, #0]
    
    if (factor < 0.0f)
240118a6:	fe80 0a67 	vminnm.f32	s0, s0, s15
240118aa:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
        factor = 0.0f;
    else if (factor > 1.0f) factor = 1.0f;
    //smooth->baseFactor = factor;
    //smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - smooth->factor;
240118ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
    smooth->factor = factor;
240118b2:	ed83 0a01 	vstr	s0, [r3, #4]
    smooth->oneminusfactor = 1.0f - smooth->factor;
240118b6:	edc3 7a02 	vstr	s15, [r3, #8]
}
240118ba:	4770      	bx	lr
240118bc:	00000000 	.word	0x00000000

240118c0 <tExpSmooth_setDest>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#else
void     tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
240118c0:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
240118c2:	ed83 0a04 	vstr	s0, [r3, #16]
}
240118c6:	4770      	bx	lr

240118c8 <tExpSmooth_setVal>:

void     tExpSmooth_setVal(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
240118c8:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
240118ca:	ed83 0a03 	vstr	s0, [r3, #12]
}
240118ce:	4770      	bx	lr

240118d0 <tExpSmooth_setValAndDest>:

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
240118d0:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
240118d2:	ed83 0a03 	vstr	s0, [r3, #12]
    smooth->dest=val;
240118d6:	ed83 0a04 	vstr	s0, [r3, #16]
}
240118da:	4770      	bx	lr

240118dc <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
240118dc:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
240118de:	edd3 6a03 	vldr	s13, [r3, #12]
240118e2:	ed93 0a02 	vldr	s0, [r3, #8]
240118e6:	ed93 7a01 	vldr	s14, [r3, #4]
240118ea:	ee20 0a26 	vmul.f32	s0, s0, s13
240118ee:	edd3 7a04 	vldr	s15, [r3, #16]
240118f2:	eea7 0a27 	vfma.f32	s0, s14, s15
240118f6:	ed83 0a03 	vstr	s0, [r3, #12]
    return smooth->curr;
}
240118fa:	4770      	bx	lr

240118fc <tSlide_initToPool>:
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

//upslide and downslide are in samples
void    tSlide_initToPool    (tSlide* const sl, Lfloat upSlide, Lfloat downSlide, tMempool* const mp)
{
240118fc:	b538      	push	{r3, r4, r5, lr}
240118fe:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24011902:	680d      	ldr	r5, [r1, #0]
{
24011904:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
24011906:	201c      	movs	r0, #28
{
24011908:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
2401190c:	4629      	mov	r1, r5
{
2401190e:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
24011912:	f003 f9c1 	bl	24014c98 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
24011916:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
2401191a:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
2401191c:	6020      	str	r0, [r4, #0]
    s->mempool = m;
2401191e:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
24011920:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
24011924:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
24011928:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
2401192c:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
2401192e:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
24011930:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
24011932:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
24011934:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
24011938:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
2401193c:	ed80 7a05 	vstr	s14, [r0, #20]
}
24011940:	ecbd 8b02 	vpop	{d8}
24011944:	bd38      	pop	{r3, r4, r5, pc}
24011946:	bf00      	nop

24011948 <tSlide_free>:

void    tSlide_free  (tSlide* const sl)
{
    _tSlide* s = *sl;
24011948:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)s, s->mempool);
2401194a:	6801      	ldr	r1, [r0, #0]
2401194c:	f003 ba66 	b.w	24014e1c <mpool_free>

24011950 <tSlide_setDest>:
    s->invDownSlide = 1.0f / downSlide;
}

void tSlide_setDest(tSlide* const sl, Lfloat dest)
{
    _tSlide* s = *sl;
24011950:	6803      	ldr	r3, [r0, #0]
    s->dest = dest;
24011952:	ed83 0a06 	vstr	s0, [r3, #24]
}
24011956:	4770      	bx	lr

24011958 <tSlide_tickNoInput>:

Lfloat tSlide_tickNoInput(tSlide* const sl)
{
    _tSlide* s = *sl;
24011958:	6803      	ldr	r3, [r0, #0]
    Lfloat in = s->dest;

    if (in >= s->prevOut)
2401195a:	ed93 0a01 	vldr	s0, [r3, #4]
    Lfloat in = s->dest;
2401195e:	edd3 7a06 	vldr	s15, [r3, #24]
    if (in >= s->prevOut)
24011962:	eeb4 0ae7 	vcmpe.f32	s0, s15
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
24011966:	ee77 6ac0 	vsub.f32	s13, s15, s0
    if (in >= s->prevOut)
2401196a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
2401196e:	bf94      	ite	ls
24011970:	ed93 7a04 	vldrls	s14, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
24011974:	ed93 7a05 	vldrhi	s14, [r3, #20]
24011978:	eea6 0a87 	vfma.f32	s0, s13, s14
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
2401197c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 240119b0 <tSlide_tickNoInput+0x58>
24011980:	eeb4 0ac7 	vcmpe.f32	s0, s14
24011984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011988:	d406      	bmi.n	24011998 <tSlide_tickNoInput+0x40>
2401198a:	ed83 0a02 	vstr	s0, [r3, #8]
#endif
    s->prevIn = in;
2401198e:	edc3 7a03 	vstr	s15, [r3, #12]
    s->prevOut = s->currentOut;
24011992:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
24011996:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
24011998:	ed9f 7a06 	vldr	s14, [pc, #24]	; 240119b4 <tSlide_tickNoInput+0x5c>
    s->prevIn = in;
2401199c:	edc3 7a03 	vstr	s15, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
240119a0:	eeb0 0a47 	vmov.f32	s0, s14
240119a4:	ed83 7a02 	vstr	s14, [r3, #8]
    s->prevOut = s->currentOut;
240119a8:	ed83 0a01 	vstr	s0, [r3, #4]
}
240119ac:	4770      	bx	lr
240119ae:	bf00      	nop
240119b0:	006ce3ee 	.word	0x006ce3ee
240119b4:	00000000 	.word	0x00000000

240119b8 <tSlide_tick>:

Lfloat tSlide_tick(tSlide* const sl, Lfloat in)
{
    _tSlide* s = *sl;
240119b8:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
240119ba:	edd3 7a01 	vldr	s15, [r3, #4]
240119be:	eef4 7ac0 	vcmpe.f32	s15, s0
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
240119c2:	ee70 6a67 	vsub.f32	s13, s0, s15
    if (in >= s->prevOut)
240119c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
240119ca:	bf94      	ite	ls
240119cc:	ed93 7a04 	vldrls	s14, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
240119d0:	ed93 7a05 	vldrhi	s14, [r3, #20]
240119d4:	eee6 7a87 	vfma.f32	s15, s13, s14
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
240119d8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 24011a14 <tSlide_tick+0x5c>
240119dc:	eef4 7ac7 	vcmpe.f32	s15, s14
240119e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240119e4:	d408      	bmi.n	240119f8 <tSlide_tick+0x40>
#endif
    s->prevIn = in;
240119e6:	ed83 0a03 	vstr	s0, [r3, #12]
    s->prevOut = s->currentOut;
    return s->currentOut;
}
240119ea:	eeb0 0a67 	vmov.f32	s0, s15
240119ee:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
240119f2:	edc3 7a01 	vstr	s15, [r3, #4]
}
240119f6:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
240119f8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 24011a18 <tSlide_tick+0x60>
    s->prevIn = in;
240119fc:	ed83 0a03 	vstr	s0, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
24011a00:	eef0 7a47 	vmov.f32	s15, s14
24011a04:	ed83 7a02 	vstr	s14, [r3, #8]
}
24011a08:	eeb0 0a67 	vmov.f32	s0, s15
    s->prevOut = s->currentOut;
24011a0c:	edc3 7a01 	vstr	s15, [r3, #4]
}
24011a10:	4770      	bx	lr
24011a12:	bf00      	nop
24011a14:	006ce3ee 	.word	0x006ce3ee
24011a18:	00000000 	.word	0x00000000

24011a1c <tThiranAllpassSOCascade_initToPool>:
{
    tThiranAllpassSOCascade_initToPool(ft, numFilts, &leaf->mempool);
}

void    tThiranAllpassSOCascade_initToPool     (tThiranAllpassSOCascade* const ft, int numFilts, tMempool* const mp)
{
24011a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
24011a20:	460f      	mov	r7, r1
24011a22:	b082      	sub	sp, #8
    _tMempool* m = *mp;
24011a24:	6811      	ldr	r1, [r2, #0]
{
24011a26:	4604      	mov	r4, r0
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
24011a28:	2058      	movs	r0, #88	; 0x58
{
24011a2a:	4690      	mov	r8, r2
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
24011a2c:	9101      	str	r1, [sp, #4]
24011a2e:	f003 f933 	bl	24014c98 <mpool_alloc>
    f->mempool = m;
    f->numFilts = numFilts;
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
24011a32:	9901      	ldr	r1, [sp, #4]
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
24011a34:	4606      	mov	r6, r0
24011a36:	6020      	str	r0, [r4, #0]
    f->k3[1] = -2.9018f;
    f->C1[1] = 0.071089f;
    f->C2[1] = 2.1074f;
    f->isHigh = 0;
    f->numFiltsMap[0] = numFilts;
    f->numFiltsMap[1] = 1;
24011a38:	2400      	movs	r4, #0
    f->numFilts = numFilts;
24011a3a:	e9c0 1700 	strd	r1, r7, [r0]
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
24011a3e:	00b8      	lsls	r0, r7, #2
24011a40:	f003 f98e 	bl	24014d60 <mpool_calloc>
    f->k1[0] = -0.00050469f;
24011a44:	4b1a      	ldr	r3, [pc, #104]	; (24011ab0 <tThiranAllpassSOCascade_initToPool+0x94>)
    f->numActiveFilters = numFilts;
    for (int i = 0; i < numFilts; i++)
24011a46:	42a7      	cmp	r7, r4
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
24011a48:	60b0      	str	r0, [r6, #8]
    f->k1[0] = -0.00050469f;
24011a4a:	61f3      	str	r3, [r6, #28]
    f->k2[0] = -0.0064264f;
24011a4c:	4b19      	ldr	r3, [pc, #100]	; (24011ab4 <tThiranAllpassSOCascade_initToPool+0x98>)
24011a4e:	6273      	str	r3, [r6, #36]	; 0x24
    f->k3[0] = -2.8743f;
24011a50:	4b19      	ldr	r3, [pc, #100]	; (24011ab8 <tThiranAllpassSOCascade_initToPool+0x9c>)
24011a52:	62f3      	str	r3, [r6, #44]	; 0x2c
    f->C1[0] = 0.069618f;
24011a54:	4b19      	ldr	r3, [pc, #100]	; (24011abc <tThiranAllpassSOCascade_initToPool+0xa0>)
24011a56:	6373      	str	r3, [r6, #52]	; 0x34
    f->C2[0] = 2.0427f;
24011a58:	4b19      	ldr	r3, [pc, #100]	; (24011ac0 <tThiranAllpassSOCascade_initToPool+0xa4>)
24011a5a:	63f3      	str	r3, [r6, #60]	; 0x3c
    f->k1[1] = -0.0026580f;
24011a5c:	4b19      	ldr	r3, [pc, #100]	; (24011ac4 <tThiranAllpassSOCascade_initToPool+0xa8>)
24011a5e:	6233      	str	r3, [r6, #32]
    f->k2[1] = -0.014811f;
24011a60:	4b19      	ldr	r3, [pc, #100]	; (24011ac8 <tThiranAllpassSOCascade_initToPool+0xac>)
24011a62:	62b3      	str	r3, [r6, #40]	; 0x28
    f->k3[1] = -2.9018f;
24011a64:	4b19      	ldr	r3, [pc, #100]	; (24011acc <tThiranAllpassSOCascade_initToPool+0xb0>)
24011a66:	6333      	str	r3, [r6, #48]	; 0x30
    f->C1[1] = 0.071089f;
24011a68:	4b19      	ldr	r3, [pc, #100]	; (24011ad0 <tThiranAllpassSOCascade_initToPool+0xb4>)
24011a6a:	63b3      	str	r3, [r6, #56]	; 0x38
    f->C2[1] = 2.1074f;
24011a6c:	4b19      	ldr	r3, [pc, #100]	; (24011ad4 <tThiranAllpassSOCascade_initToPool+0xb8>)
24011a6e:	6433      	str	r3, [r6, #64]	; 0x40
    f->numFiltsMap[1] = 1;
24011a70:	f04f 0301 	mov.w	r3, #1
    f->numActiveFilters = numFilts;
24011a74:	e9c6 7711 	strd	r7, r7, [r6, #68]	; 0x44
    f->numFiltsMap[1] = 1;
24011a78:	e9c6 3413 	strd	r3, r4, [r6, #76]	; 0x4c
    for (int i = 0; i < numFilts; i++)
24011a7c:	dd15      	ble.n	24011aaa <tThiranAllpassSOCascade_initToPool+0x8e>
24011a7e:	4682      	mov	sl, r0
    f->prevSamp = 0.0f;
24011a80:	2500      	movs	r5, #0
24011a82:	e001      	b.n	24011a88 <tThiranAllpassSOCascade_initToPool+0x6c>
    {
        tAllpassSO_initToPool(&f->filters[i], mp);
24011a84:	f8d6 a008 	ldr.w	sl, [r6, #8]
    _tMempool* m = *mp;
24011a88:	f8d8 9000 	ldr.w	r9, [r8]
    _tAllpassSO* f = *ft = (_tAllpassSO*) mpool_alloc(sizeof(_tAllpassSO), m);
24011a8c:	201c      	movs	r0, #28
24011a8e:	4649      	mov	r1, r9
24011a90:	f003 f902 	bl	24014c98 <mpool_alloc>
24011a94:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
    for (int i = 0; i < numFilts; i++)
24011a98:	3401      	adds	r4, #1
    f->mempool = m;
24011a9a:	f8c0 9000 	str.w	r9, [r0]
    f->prevSamp = 0.0f;
24011a9e:	6045      	str	r5, [r0, #4]
    for (int i = 0; i < numFilts; i++)
24011aa0:	42a7      	cmp	r7, r4
    f->prevPrevSamp = 0.0f;
24011aa2:	6085      	str	r5, [r0, #8]
    f->a1 = 0.0f;
24011aa4:	6145      	str	r5, [r0, #20]
    f->a2 = 0.0f;
24011aa6:	6185      	str	r5, [r0, #24]
    for (int i = 0; i < numFilts; i++)
24011aa8:	d1ec      	bne.n	24011a84 <tThiranAllpassSOCascade_initToPool+0x68>
    }
}
24011aaa:	b002      	add	sp, #8
24011aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
24011ab0:	ba044d2c 	.word	0xba044d2c
24011ab4:	bbd2948d 	.word	0xbbd2948d
24011ab8:	c037f488 	.word	0xc037f488
24011abc:	3d8e93e2 	.word	0x3d8e93e2
24011ac0:	4002bb99 	.word	0x4002bb99
24011ac4:	bb2e31d7 	.word	0xbb2e31d7
24011ac8:	bc72a9d6 	.word	0xbc72a9d6
24011acc:	c039b717 	.word	0xc039b717
24011ad0:	3d91971c 	.word	0x3d91971c
24011ad4:	4006dfa4 	.word	0x4006dfa4

24011ad8 <tThiranAllpassSOCascade_free>:

void    tThiranAllpassSOCascade_free  (tThiranAllpassSOCascade* const ft)
{
24011ad8:	b538      	push	{r3, r4, r5, lr}
    _tThiranAllpassSOCascade* f = *ft;
24011ada:	6805      	ldr	r5, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
24011adc:	686b      	ldr	r3, [r5, #4]
24011ade:	2b00      	cmp	r3, #0
24011ae0:	dd0a      	ble.n	24011af8 <tThiranAllpassSOCascade_free+0x20>
24011ae2:	2400      	movs	r4, #0
    _tAllpassSO* f = *ft;
24011ae4:	68ab      	ldr	r3, [r5, #8]
24011ae6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
24011aea:	3401      	adds	r4, #1
    mpool_free((char*)f, f->mempool);
24011aec:	6801      	ldr	r1, [r0, #0]
24011aee:	f003 f995 	bl	24014e1c <mpool_free>
    for (int i = 0; i < f->numFilts; i++)
24011af2:	686b      	ldr	r3, [r5, #4]
24011af4:	42a3      	cmp	r3, r4
24011af6:	dcf5      	bgt.n	24011ae4 <tThiranAllpassSOCascade_free+0xc>
    {
        tAllpassSO_free(&f->filters[i]);
    }
    mpool_free((char*)f->filters, f->mempool); //do I need to free the pointers separately?
24011af8:	6829      	ldr	r1, [r5, #0]
24011afa:	68a8      	ldr	r0, [r5, #8]
24011afc:	f003 f98e 	bl	24014e1c <mpool_free>
    mpool_free((char*)f, f->mempool);
24011b00:	6829      	ldr	r1, [r5, #0]
24011b02:	4628      	mov	r0, r5
}
24011b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char*)f, f->mempool);
24011b08:	f003 b988 	b.w	24014e1c <mpool_free>

24011b0c <tThiranAllpassSOCascade_setCoeff>:

volatile Lfloat binTest;
float    tThiranAllpassSOCascade_setCoeff(tThiranAllpassSOCascade* const ft, Lfloat dispersionCoeff, Lfloat freq, Lfloat oversampling)
{
24011b0c:	eef0 7a40 	vmov.f32	s15, s0
24011b10:	b510      	push	{r4, lr}
24011b12:	ed2d 8b08 	vpush	{d8-d11}
    _tThiranAllpassSOCascade* f = *ft;

    f->B = dispersionCoeff;
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
24011b16:	eddf 9a68 	vldr	s19, [pc, #416]	; 24011cb8 <tThiranAllpassSOCascade_setCoeff+0x1ac>
24011b1a:	eeb2 9a08 	vmov.f32	s18, #40	; 0x41400000  12.0
    _tThiranAllpassSOCascade* f = *ft;
24011b1e:	6804      	ldr	r4, [r0, #0]
{
24011b20:	eef0 8a60 	vmov.f32	s17, s1
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
24011b24:	ee20 0aa9 	vmul.f32	s0, s1, s19
    f->B = dispersionCoeff;
24011b28:	edc4 7a03 	vstr	s15, [r4, #12]
{
24011b2c:	eeb0 8a41 	vmov.f32	s16, s2
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
24011b30:	f008 f84c 	bl	24019bcc <log2f>
24011b34:	eddf 7a61 	vldr	s15, [pc, #388]	; 24011cbc <tThiranAllpassSOCascade_setCoeff+0x1b0>
    //f->iKey = logf((110.0f*twelfthRootOf2) / 27.5f)/ logf(twelfthRootOf2);
    //f->isHigh = freq > 400.0f;//switch to different coefficients for higher notes
    //Lfloat howHigh = LEAF_mapToZeroToOneOutput(iKey2, 16.0f, 76.0f);
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
24011b38:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
24011b3c:	eee0 7a09 	vfma.f32	s15, s0, s18
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
24011b40:	ee28 8a29 	vmul.f32	s16, s16, s19
24011b44:	ee28 0a28 	vmul.f32	s0, s16, s17
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
24011b48:	edc4 7a04 	vstr	s15, [r4, #16]
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
24011b4c:	f008 f83e 	bl	24019bcc <log2f>
24011b50:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
24011b54:	eddf 0a5a 	vldr	s1, [pc, #360]	; 24011cc0 <tThiranAllpassSOCascade_setCoeff+0x1b4>
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
24011b58:	eeb0 1a4b 	vmov.f32	s2, s22
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
24011b5c:	eddf 7a59 	vldr	s15, [pc, #356]	; 24011cc4 <tThiranAllpassSOCascade_setCoeff+0x1b8>
24011b60:	eee7 0a09 	vfma.f32	s1, s14, s18
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
24011b64:	ed9f 0a58 	vldr	s0, [pc, #352]	; 24011cc8 <tThiranAllpassSOCascade_setCoeff+0x1bc>
24011b68:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011b6c:	f002 fe18 	bl	240147a0 <LEAF_clip>

    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
24011b70:	edd4 aa08 	vldr	s21, [r4, #32]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
24011b74:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
24011b78:	ee7b 7a40 	vsub.f32	s15, s22, s0
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
24011b7c:	ee60 aa2a 	vmul.f32	s21, s0, s21
24011b80:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
24011b84:	ee60 8a28 	vmul.f32	s17, s0, s17
24011b88:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
24011b8c:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
24011b90:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
24011b94:	eee6 aaa7 	vfma.f32	s21, s13, s15
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
24011b98:	eee7 8a27 	vfma.f32	s17, s14, s15
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
24011b9c:	edd4 9a0e 	vldr	s19, [r4, #56]	; 0x38
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
24011ba0:	ee20 aa0a 	vmul.f32	s20, s0, s20
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
24011ba4:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
24011ba8:	ee20 8a06 	vmul.f32	s16, s0, s12
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
24011bac:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
24011bb0:	ee60 9a29 	vmul.f32	s19, s0, s19
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
24011bb4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
24011bb8:	eea6 aa27 	vfma.f32	s20, s12, s15
    Lfloat logB = logf(f->B);
24011bbc:	ed94 0a03 	vldr	s0, [r4, #12]
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
24011bc0:	eea7 8a27 	vfma.f32	s16, s14, s15
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
24011bc4:	eee6 9aa7 	vfma.f32	s19, s13, s15
    Lfloat logB = logf(f->B);
24011bc8:	f007 ff9a 	bl	24019b00 <logf>
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
24011bcc:	eeea 8a80 	vfma.f32	s17, s21, s0
    Lfloat logB = logf(f->B);
24011bd0:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat kd = fastExp3(temp);
24011bd4:	eeb0 0a4a 	vmov.f32	s0, s20
24011bd8:	eea8 0a89 	vfma.f32	s0, s17, s18
24011bdc:	f002 fcc0 	bl	24014560 <fastExp3>
24011be0:	eef0 7a40 	vmov.f32	s15, s0
    Lfloat Cd = fastExp3((C1 * logB) + C2);
24011be4:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat kd = fastExp3(temp);
24011be8:	eeb0 8a67 	vmov.f32	s16, s15
    Lfloat Cd = fastExp3((C1 * logB) + C2);
24011bec:	eea9 0a89 	vfma.f32	s0, s19, s18
24011bf0:	f002 fcb6 	bl	24014560 <fastExp3>
    Lfloat D = fastExp3(Cd-(f->iKey*kd));
24011bf4:	edd4 7a04 	vldr	s15, [r4, #16]
24011bf8:	eea7 0ac8 	vfms.f32	s0, s15, s16
24011bfc:	f002 fcb0 	bl	24014560 <fastExp3>
    f->D = D;

	Lfloat a_k = -2.0f;

	a_k *= (D - 2.0f);
24011c00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
24011c04:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
	a_k *= D;
	a_k /= (D + 2.0f);

	f->a[1] = a_k;

	if (f->a[0] > 0.99f)
24011c08:	eddf 5a30 	vldr	s11, [pc, #192]	; 24011ccc <tThiranAllpassSOCascade_setCoeff+0x1c0>
	a_k /= (D - 1.0f);
24011c0c:	ee70 7a4b 	vsub.f32	s15, s0, s22
    f->D = D;
24011c10:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
	a_k *= (D - 2.0f);
24011c14:	ee70 4a47 	vsub.f32	s9, s0, s14
	a_k /= (D + 1.0f);
24011c18:	ee30 5a0b 	vadd.f32	s10, s0, s22
	a_k /= (D + 2.0f);
24011c1c:	ee30 7a07 	vadd.f32	s14, s0, s14
	a_k *= (D - 2.0f);
24011c20:	ee24 6aa6 	vmul.f32	s12, s9, s13
	a_k /= D;
24011c24:	eec4 6a80 	vdiv.f32	s13, s9, s0
	a_k /= (D - 1.0f);
24011c28:	eec6 4a27 	vdiv.f32	s9, s12, s15
	a_k *= (D - 1.0f);
24011c2c:	ee67 6aa6 	vmul.f32	s13, s15, s13
	a_k /= (D + 1.0f);
24011c30:	ee86 6a85 	vdiv.f32	s12, s13, s10
	a_k *= (D - 1.0f);
24011c34:	ee67 7aa4 	vmul.f32	s15, s15, s9
	a_k /= D;
24011c38:	eec7 6a80 	vdiv.f32	s13, s15, s0
	a_k *= D;
24011c3c:	ee60 7a06 	vmul.f32	s15, s0, s12
	a_k /= (D + 2.0f);
24011c40:	ee87 6a87 	vdiv.f32	s12, s15, s14
	a_k *= D;
24011c44:	ee60 6a26 	vmul.f32	s13, s0, s13
	a_k /= (D + 1.0f);
24011c48:	eec6 7a85 	vdiv.f32	s15, s13, s10
	f->a[1] = a_k;
24011c4c:	ed84 6a06 	vstr	s12, [r4, #24]
	if (f->a[0] > 0.99f)
24011c50:	eef4 7ae5 	vcmpe.f32	s15, s11
	f->a[0] = a_k;
24011c54:	edc4 7a05 	vstr	s15, [r4, #20]
	if (f->a[0] > 0.99f)
24011c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011c5c:	dd0b      	ble.n	24011c76 <tThiranAllpassSOCascade_setCoeff+0x16a>
	{
		f->a[0] = 0.99f;
		f->a[1] = 0.01f;
24011c5e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 24011cd0 <tThiranAllpassSOCascade_setCoeff+0x1c4>
24011c62:	eef0 7a65 	vmov.f32	s15, s11
		D = 1.0f;
24011c66:	eeb0 0a4b 	vmov.f32	s0, s22
		f->a[0] = 0.99f;
24011c6a:	edc4 5a05 	vstr	s11, [r4, #20]
		f->a[1] = 0.01f;
24011c6e:	eeb0 6a47 	vmov.f32	s12, s14
24011c72:	ed84 7a06 	vstr	s14, [r4, #24]
	}
	//f->a[0] = LEAF_clip(0.0f, f->a[0], 1.0f);
	//f->a[1] = LEAF_clip(-1.999999f, f->a[1], 2.0f);

    for (int i = 0; i < f->numActiveFilters; i++)
24011c76:	6c62      	ldr	r2, [r4, #68]	; 0x44
24011c78:	2a00      	cmp	r2, #0
24011c7a:	dd14      	ble.n	24011ca6 <tThiranAllpassSOCascade_setCoeff+0x19a>
    _tAllpassSO* f = *ft;
24011c7c:	68a3      	ldr	r3, [r4, #8]
24011c7e:	681b      	ldr	r3, [r3, #0]
    f->a1 = a1;
24011c80:	edc3 7a05 	vstr	s15, [r3, #20]
    f->a2 = a2;
24011c84:	ed83 6a06 	vstr	s12, [r3, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
24011c88:	6c62      	ldr	r2, [r4, #68]	; 0x44
24011c8a:	2a01      	cmp	r2, #1
24011c8c:	dd0b      	ble.n	24011ca6 <tThiranAllpassSOCascade_setCoeff+0x19a>
24011c8e:	2301      	movs	r3, #1
    _tAllpassSO* f = *ft;
24011c90:	68a2      	ldr	r2, [r4, #8]
    {
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
24011c92:	6960      	ldr	r0, [r4, #20]
    _tAllpassSO* f = *ft;
24011c94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
24011c98:	3301      	adds	r3, #1
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
24011c9a:	69a1      	ldr	r1, [r4, #24]
    f->a1 = a1;
24011c9c:	6150      	str	r0, [r2, #20]
    f->a2 = a2;
24011c9e:	6191      	str	r1, [r2, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
24011ca0:	6c62      	ldr	r2, [r4, #68]	; 0x44
24011ca2:	429a      	cmp	r2, r3
24011ca4:	dcf4      	bgt.n	24011c90 <tThiranAllpassSOCascade_setCoeff+0x184>
        //f->filters[i]->prevSamp = 0.0f;
        //f->filters[i]->prevPrevSamp = 0.0f;
        //probably should adjust the gain of the internal state variables (prevSamp and prevPrevSamp) if the gain total of the two coefficients goes //up, since the internals of the allpass boosts gain and then attenuates it, so leaving super big values in there that won't be //attenuated enough can make it distort or nan.
    }
    return D*f->numActiveFilters;
24011ca6:	ee07 2a90 	vmov	s15, r2
24011caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
24011cae:	ecbd 8b08 	vpop	{d8-d11}
24011cb2:	ee27 0a80 	vmul.f32	s0, s15, s0
24011cb6:	bd10      	pop	{r4, pc}
24011cb8:	3b14f209 	.word	0x3b14f209
24011cbc:	42440000 	.word	0x42440000
24011cc0:	42040000 	.word	0x42040000
24011cc4:	3cf5c28f 	.word	0x3cf5c28f
24011cc8:	00000000 	.word	0x00000000
24011ccc:	3f7d70a4 	.word	0x3f7d70a4
24011cd0:	3c23d70a 	.word	0x3c23d70a

24011cd4 <tThiranAllpassSOCascade_tick>:

Lfloat   tThiranAllpassSOCascade_tick(tThiranAllpassSOCascade* const ft, Lfloat input)
{
    _tThiranAllpassSOCascade* f = *ft;
24011cd4:	6801      	ldr	r1, [r0, #0]
    Lfloat sample = input;
    for (int i = 0; i < f->numActiveFilters; i++)
24011cd6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
24011cd8:	2b00      	cmp	r3, #0
24011cda:	dd27      	ble.n	24011d2c <tThiranAllpassSOCascade_tick+0x58>
24011cdc:	2200      	movs	r2, #0
    _tAllpassSO* f = *ft;
24011cde:	688b      	ldr	r3, [r1, #8]
24011ce0:	eef0 4a40 	vmov.f32	s9, s0
24011ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
24011ce8:	3201      	adds	r2, #1
24011cea:	edd3 6a04 	vldr	s13, [r3, #16]
    Lfloat vn = input * f->a2 + (f->prevSamp * f->a1 + f->prevPrevSamp);
24011cee:	ed93 7a01 	vldr	s14, [r3, #4]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
24011cf2:	ee30 0a66 	vsub.f32	s0, s0, s13
24011cf6:	edd3 7a03 	vldr	s15, [r3, #12]
24011cfa:	ed93 5a06 	vldr	s10, [r3, #24]
24011cfe:	ee37 6a67 	vsub.f32	s12, s14, s15
24011d02:	edd3 5a05 	vldr	s11, [r3, #20]
24011d06:	ee20 0a05 	vmul.f32	s0, s0, s10
24011d0a:	edd3 6a02 	vldr	s13, [r3, #8]
    f->prevSamp = input;
24011d0e:	edc3 4a01 	vstr	s9, [r3, #4]
    f->prevPrevSamp = f->prevSamp;
24011d12:	ed83 7a02 	vstr	s14, [r3, #8]
24011d16:	eea5 0a86 	vfma.f32	s0, s11, s12
    f->prevPrevSamp2 = f->prevSamp2;
24011d1a:	edc3 7a04 	vstr	s15, [r3, #16]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
24011d1e:	ee30 0a26 	vadd.f32	s0, s0, s13
    f->prevSamp2 = output;
24011d22:	ed83 0a03 	vstr	s0, [r3, #12]
    for (int i = 0; i < f->numActiveFilters; i++)
24011d26:	6c4b      	ldr	r3, [r1, #68]	; 0x44
24011d28:	4293      	cmp	r3, r2
24011d2a:	dcd8      	bgt.n	24011cde <tThiranAllpassSOCascade_tick+0xa>
    {
        sample = tAllpassSO_tick(&f->filters[i], sample);
    }
    return sample;
}
24011d2c:	4770      	bx	lr
24011d2e:	bf00      	nop

24011d30 <tThiranAllpassSOCascade_clear>:

void   tThiranAllpassSOCascade_clear(tThiranAllpassSOCascade* const ft)
{
    _tThiranAllpassSOCascade* f = *ft;
24011d30:	6802      	ldr	r2, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
24011d32:	6853      	ldr	r3, [r2, #4]
24011d34:	2b00      	cmp	r3, #0
24011d36:	dd0d      	ble.n	24011d54 <tThiranAllpassSOCascade_clear+0x24>
24011d38:	2300      	movs	r3, #0
    {
        //tAllpassSO_setCoeff(&f->filters[i], f->a[1], f->a[2]);
        f->filters[i]->prevSamp = 0.0f;
24011d3a:	2100      	movs	r1, #0
24011d3c:	6890      	ldr	r0, [r2, #8]
24011d3e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
24011d42:	6041      	str	r1, [r0, #4]
        f->filters[i]->prevPrevSamp = 0.0f;
24011d44:	6890      	ldr	r0, [r2, #8]
24011d46:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
24011d4a:	3301      	adds	r3, #1
        f->filters[i]->prevPrevSamp = 0.0f;
24011d4c:	6081      	str	r1, [r0, #8]
    for (int i = 0; i < f->numFilts; i++)
24011d4e:	6850      	ldr	r0, [r2, #4]
24011d50:	4298      	cmp	r0, r3
24011d52:	dcf3      	bgt.n	24011d3c <tThiranAllpassSOCascade_clear+0xc>

    }
}
24011d54:	4770      	bx	lr
24011d56:	bf00      	nop

24011d58 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, Lfloat freq, tMempool* const mp)
{
24011d58:	b538      	push	{r3, r4, r5, lr}
24011d5a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24011d5e:	680d      	ldr	r5, [r1, #0]
{
24011d60:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
24011d62:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24011d66:	2028      	movs	r0, #40	; 0x28
24011d68:	4629      	mov	r1, r5
{
24011d6a:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24011d6e:	f002 ff93 	bl	24014c98 <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
24011d72:	ed9f 0a12 	vldr	s0, [pc, #72]	; 24011dbc <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
24011d76:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
24011d78:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
24011d7c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
24011d7e:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
24011d80:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
24011d84:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
24011d88:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
24011d8c:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011d90:	68db      	ldr	r3, [r3, #12]
24011d92:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
24011d94:	6824      	ldr	r4, [r4, #0]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
24011d96:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
24011d9a:	ed84 8a01 	vstr	s16, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
24011d9e:	ee68 0a27 	vmul.f32	s1, s16, s15
24011da2:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
24011da6:	f002 fcfb 	bl	240147a0 <LEAF_clip>
    f->b0 = 1.0f - f->a1;
24011daa:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
24011dae:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
24011db2:	edc4 8a05 	vstr	s17, [r4, #20]
}
24011db6:	ecbd 8b02 	vpop	{d8}
24011dba:	bd38      	pop	{r3, r4, r5, pc}
24011dbc:	00000000 	.word	0x00000000

24011dc0 <tOnePole_free>:
    _tOnePole* f = *ft;
24011dc0:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
24011dc2:	6801      	ldr	r1, [r0, #0]
24011dc4:	f003 b82a 	b.w	24014e1c <mpool_free>

24011dc8 <tOnePole_setFreq>:
{
24011dc8:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
24011dca:	6804      	ldr	r4, [r0, #0]
{
24011dcc:	eef0 0a40 	vmov.f32	s1, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
24011dd0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24011dd4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24011e00 <tOnePole_setFreq+0x38>
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
24011dd8:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
24011ddc:	edc4 0a01 	vstr	s1, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
24011de0:	ee60 0aa7 	vmul.f32	s1, s1, s15
24011de4:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
24011de8:	f002 fcda 	bl	240147a0 <LEAF_clip>
    f->b0 = 1.0f - f->a1;
24011dec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
24011df0:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
24011df4:	ee77 7ac0 	vsub.f32	s15, s15, s0
24011df8:	edc4 7a05 	vstr	s15, [r4, #20]
}
24011dfc:	bd10      	pop	{r4, pc}
24011dfe:	bf00      	nop
24011e00:	00000000 	.word	0x00000000

24011e04 <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
24011e04:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24011e06:	ed93 6a08 	vldr	s12, [r3, #32]
    Lfloat in = input * f->gain;
24011e0a:	ed93 7a02 	vldr	s14, [r3, #8]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24011e0e:	edd3 7a04 	vldr	s15, [r3, #16]
    Lfloat in = input * f->gain;
24011e12:	ee20 7a07 	vmul.f32	s14, s0, s14
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24011e16:	edd3 6a05 	vldr	s13, [r3, #20]
24011e1a:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
24011e1e:	ed83 7a07 	vstr	s14, [r3, #28]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
24011e22:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
24011e26:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
24011e2a:	4770      	bx	lr

24011e2c <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24011e2c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 24011e68 <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011e30:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24011e34:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011e38:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 24011e6c <tOnePole_setSampleRate+0x40>
{
24011e3c:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
24011e3e:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24011e40:	edd4 0a01 	vldr	s1, [r4, #4]
24011e44:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24011e48:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
24011e4c:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011e50:	f002 fca6 	bl	240147a0 <LEAF_clip>
    f->a1 = 1.0f - f->b0;
24011e54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
24011e58:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
24011e5c:	ee77 7ac0 	vsub.f32	s15, s15, s0
24011e60:	edc4 7a04 	vstr	s15, [r4, #16]
}
24011e64:	bd10      	pop	{r4, pc}
24011e66:	bf00      	nop
24011e68:	40c90fdb 	.word	0x40c90fdb
24011e6c:	00000000 	.word	0x00000000

24011e70 <tCookOnePole_initToPool>:
{
    tCookOnePole_initToPool(ft, &leaf->mempool);
}

void    tCookOnePole_initToPool     (tCookOnePole* const ft, tMempool* const mp)
{
24011e70:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24011e72:	680c      	ldr	r4, [r1, #0]
{
24011e74:	4605      	mov	r5, r0
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
24011e76:	2018      	movs	r0, #24
24011e78:	4621      	mov	r1, r4
24011e7a:	f002 ff0d 	bl	24014c98 <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->poleCoeff     = 0.9f;
24011e7e:	4a06      	ldr	r2, [pc, #24]	; (24011e98 <tCookOnePole_initToPool+0x28>)
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
24011e80:	6028      	str	r0, [r5, #0]
    f->sgain         = 0.1f;
24011e82:	4906      	ldr	r1, [pc, #24]	; (24011e9c <tCookOnePole_initToPool+0x2c>)
    f->mempool = m;
24011e84:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
24011e86:	6863      	ldr	r3, [r4, #4]
    f->poleCoeff     = 0.9f;
24011e88:	6042      	str	r2, [r0, #4]
    f->output         = 0.0f;
24011e8a:	2200      	movs	r2, #0
    f->sgain         = 0.1f;
24011e8c:	6081      	str	r1, [r0, #8]
    f->output         = 0.0f;
24011e8e:	60c2      	str	r2, [r0, #12]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24011e90:	68db      	ldr	r3, [r3, #12]
24011e92:	6103      	str	r3, [r0, #16]
}
24011e94:	bd38      	pop	{r3, r4, r5, pc}
24011e96:	bf00      	nop
24011e98:	3f666666 	.word	0x3f666666
24011e9c:	3dcccccd 	.word	0x3dcccccd

24011ea0 <tCookOnePole_free>:

void    tCookOnePole_free   (tCookOnePole* const ft)
{
    _tCookOnePole* f = *ft;
24011ea0:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
24011ea2:	6801      	ldr	r1, [r0, #0]
24011ea4:	f002 bfba 	b.w	24014e1c <mpool_free>

24011ea8 <tCookOnePole_setPole>:
void    tCookOnePole_setPole(tCookOnePole* const ft, Lfloat aValue)
{
    _tCookOnePole* onepole = *ft;
    
    onepole->poleCoeff = aValue;
      if (onepole->poleCoeff > 0.0f)                   // Normalize gain to 1.0 max
24011ea8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tCookOnePole* onepole = *ft;
24011eac:	6803      	ldr	r3, [r0, #0]
        onepole->sgain = (1.0f - onepole->poleCoeff);
24011eae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    onepole->poleCoeff = aValue;
24011eb2:	ed83 0a01 	vstr	s0, [r3, #4]
      if (onepole->poleCoeff > 0.0f)                   // Normalize gain to 1.0 max
24011eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        onepole->sgain = (1.0f - onepole->poleCoeff);
24011eba:	bfcc      	ite	gt
24011ebc:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
      else
        onepole->sgain = (1.0f + onepole->poleCoeff);
24011ec0:	ee30 0a27 	vaddle.f32	s0, s0, s15
24011ec4:	ed83 0a02 	vstr	s0, [r3, #8]
}
24011ec8:	4770      	bx	lr
24011eca:	bf00      	nop

24011ecc <tCookOnePole_setGainAndPole>:
        onepole->sgain = ((1.0f + onepole->poleCoeff) * gain);
}

void    tCookOnePole_setGainAndPole(tCookOnePole* const ft, Lfloat gain, Lfloat pole)
{
    _tCookOnePole* onepole = *ft;
24011ecc:	6803      	ldr	r3, [r0, #0]
    
    onepole->poleCoeff = pole;
24011ece:	edc3 0a01 	vstr	s1, [r3, #4]

    onepole->sgain = gain;
24011ed2:	ed83 0a02 	vstr	s0, [r3, #8]
     
}
24011ed6:	4770      	bx	lr

24011ed8 <tCookOnePole_tick>:
    
Lfloat   tCookOnePole_tick(tCookOnePole* const ft, Lfloat sample)
{
    _tCookOnePole* onepole = *ft;
24011ed8:	6803      	ldr	r3, [r0, #0]
    
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
24011eda:	edd3 6a03 	vldr	s13, [r3, #12]
24011ede:	edd3 7a01 	vldr	s15, [r3, #4]
24011ee2:	ed93 7a02 	vldr	s14, [r3, #8]
24011ee6:	ee67 7aa6 	vmul.f32	s15, s15, s13
24011eea:	eee7 7a00 	vfma.f32	s15, s14, s0
    return onepole->output;
}
24011eee:	eeb0 0a67 	vmov.f32	s0, s15
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
24011ef2:	edc3 7a03 	vstr	s15, [r3, #12]
}
24011ef6:	4770      	bx	lr

24011ef8 <tCookOnePole_setSampleRate>:

void tCookOnePole_setSampleRate(tCookOnePole* const ft, Lfloat sr)
{
    _tCookOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24011ef8:	ed9f 7a03 	vldr	s14, [pc, #12]	; 24011f08 <tCookOnePole_setSampleRate+0x10>
    _tCookOnePole* f = *ft;
24011efc:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
24011efe:	eec7 7a00 	vdiv.f32	s15, s14, s0
24011f02:	edc3 7a04 	vstr	s15, [r3, #16]
}
24011f06:	4770      	bx	lr
24011f08:	40c90fdb 	.word	0x40c90fdb

24011f0c <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as Lfloating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, LEAF* const leaf)
{
24011f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24011f0e:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
    _tMempool* m = *mp;
24011f12:	6995      	ldr	r5, [r2, #24]
{
24011f14:	4606      	mov	r6, r0
24011f16:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24011f18:	2050      	movs	r0, #80	; 0x50
24011f1a:	4629      	mov	r1, r5
{
24011f1c:	eef0 8a40 	vmov.f32	s17, s0
24011f20:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24011f24:	f002 feb8 	bl	24014c98 <mpool_alloc>
24011f28:	6030      	str	r0, [r6, #0]
24011f2a:	4604      	mov	r4, r0
    svf->mempool = m;
24011f2c:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
24011f2e:	686e      	ldr	r6, [r5, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0.0f;
24011f30:	2500      	movs	r5, #0
    svf->ic2eq = 0.0f;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011f32:	ed9f 0a35 	vldr	s0, [pc, #212]	; 24012008 <tSVF_init+0xfc>
    svf->sampleRate = leaf->sampleRate;
24011f36:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011f38:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
24011f3c:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
24011f3e:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
24011f42:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011f44:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
24011f48:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0.0f;
24011f4c:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0.0f;
24011f4e:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
24011f50:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
24011f54:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011f58:	f008 f9b8 	bl	2401a2cc <tanf>
    svf->k = 1.0f/Q;
24011f5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
24011f60:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
24011f64:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
24011f66:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
24011f68:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
24011f6c:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
24011f70:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
24011f72:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011f74:	eef0 6a67 	vmov.f32	s13, s15
24011f78:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
24011f7c:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011f80:	eee0 6a06 	vfma.f32	s13, s0, s12
24011f84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
24011f88:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24011f8c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
24011f90:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
24011f94:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
24011f98:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
24011f9c:	d00d      	beq.n	24011fba <tSVF_init+0xae>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
24011f9e:	2f04      	cmp	r7, #4
24011fa0:	d80b      	bhi.n	24011fba <tSVF_init+0xae>
24011fa2:	e8df f007 	tbb	[pc, r7]
24011fa6:	0a23      	.short	0x0a23
24011fa8:	032a      	.short	0x032a
24011faa:	1a          	.byte	0x1a
24011fab:	00          	.byte	0x00
        svf->cL = -1.0f;
    }
    
    else if (type == SVFTypeNotch)
    {
        svf->cH = 1.0f;
24011fac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
24011fb0:	4a16      	ldr	r2, [pc, #88]	; (2401200c <tSVF_init+0x100>)
        svf->cL = 0.0f;
24011fb2:	2300      	movs	r3, #0
        svf->cH = 1.0f;
24011fb4:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
24011fb6:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
24011fb8:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -2.0f;
    }
    if (leaf->sampleRate > 90000)
24011fba:	ed96 7a00 	vldr	s14, [r6]
24011fbe:	eddf 7a14 	vldr	s15, [pc, #80]	; 24012010 <tSVF_init+0x104>
    {
    	svf->table = __filterTanhTable_96000;
    }
    else
    {
    	svf->table = __filterTanhTable_48000;
24011fc2:	4a14      	ldr	r2, [pc, #80]	; (24012014 <tSVF_init+0x108>)
24011fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
24011fc8:	4b13      	ldr	r3, [pc, #76]	; (24012018 <tSVF_init+0x10c>)
24011fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24011fce:	bfd8      	it	le
24011fd0:	4613      	movle	r3, r2
24011fd2:	64e3      	str	r3, [r4, #76]	; 0x4c
}
24011fd4:	ecbd 8b02 	vpop	{d8}
24011fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
24011fda:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
24011fde:	4a0b      	ldr	r2, [pc, #44]	; (2401200c <tSVF_init+0x100>)
        svf->cL = -2.0f;
24011fe0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
24011fe4:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
24011fe6:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
24011fe8:	63a3      	str	r3, [r4, #56]	; 0x38
24011fea:	e7e6      	b.n	24011fba <tSVF_init+0xae>
        svf->cBK = -1.0f;
24011fec:	4b07      	ldr	r3, [pc, #28]	; (2401200c <tSVF_init+0x100>)
        svf->cH = 1.0f;
24011fee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
24011ff2:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
24011ff4:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
24011ff6:	63a3      	str	r3, [r4, #56]	; 0x38
24011ff8:	e7df      	b.n	24011fba <tSVF_init+0xae>
        svf->cB = 1.0f;
24011ffa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
24011ffe:	2200      	movs	r2, #0
        svf->cB = 1.0f;
24012000:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
24012002:	63a2      	str	r2, [r4, #56]	; 0x38
24012004:	e7d9      	b.n	24011fba <tSVF_init+0xae>
24012006:	bf00      	nop
24012008:	40490fdb 	.word	0x40490fdb
2401200c:	bf800000 	.word	0xbf800000
24012010:	47afc800 	.word	0x47afc800
24012014:	2401ccb0 	.word	0x2401ccb0
24012018:	24020cb0 	.word	0x24020cb0

2401201c <tSVF_initToPool>:
{
2401201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2401201e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24012022:	6815      	ldr	r5, [r2, #0]
{
24012024:	4606      	mov	r6, r0
24012026:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24012028:	2050      	movs	r0, #80	; 0x50
2401202a:	4629      	mov	r1, r5
{
2401202c:	eef0 8a40 	vmov.f32	s17, s0
24012030:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
24012034:	f002 fe30 	bl	24014c98 <mpool_alloc>
24012038:	6030      	str	r0, [r6, #0]
2401203a:	4604      	mov	r4, r0
    svf->mempool = m;
2401203c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = svf->mempool->leaf;
2401203e:	686e      	ldr	r6, [r5, #4]
    svf->ic1eq = 0.0f;
24012040:	2500      	movs	r5, #0
    svf->g = tanf(PI * freq * svf->invSampleRate);
24012042:	ed9f 0a35 	vldr	s0, [pc, #212]	; 24012118 <tSVF_initToPool+0xfc>
    svf->sampleRate = leaf->sampleRate;
24012046:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24012048:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
2401204c:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
2401204e:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
24012052:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24012054:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
24012058:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0.0f;
2401205c:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0.0f;
2401205e:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
24012060:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
24012064:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
24012068:	f008 f930 	bl	2401a2cc <tanf>
    svf->k = 1.0f/Q;
2401206c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
24012070:	ed84 0a07 	vstr	s0, [r4, #28]
    if (type == SVFTypeLowpass)
24012074:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
24012076:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
24012078:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
2401207c:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
24012080:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
24012082:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24012084:	eef0 6a67 	vmov.f32	s13, s15
24012088:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
2401208c:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24012090:	eee0 6a06 	vfma.f32	s13, s0, s12
24012094:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
24012098:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401209c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
240120a0:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
240120a4:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
240120a8:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
240120ac:	d00b      	beq.n	240120c6 <tSVF_initToPool+0xaa>
    else if (type == SVFTypeBandpass)
240120ae:	2f04      	cmp	r7, #4
240120b0:	d809      	bhi.n	240120c6 <tSVF_initToPool+0xaa>
240120b2:	e8df f007 	tbb	[pc, r7]
240120b6:	0821      	.short	0x0821
240120b8:	2803      	.short	0x2803
240120ba:	18          	.byte	0x18
240120bb:	00          	.byte	0x00
        svf->cB = 1.0f;
240120bc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
240120c0:	2200      	movs	r2, #0
        svf->cB = 1.0f;
240120c2:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
240120c4:	63a2      	str	r2, [r4, #56]	; 0x38
    if (leaf->sampleRate > 90000)
240120c6:	ed96 7a00 	vldr	s14, [r6]
240120ca:	eddf 7a14 	vldr	s15, [pc, #80]	; 2401211c <tSVF_initToPool+0x100>
    	svf->table = __filterTanhTable_48000;
240120ce:	4a14      	ldr	r2, [pc, #80]	; (24012120 <tSVF_initToPool+0x104>)
240120d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
240120d4:	4b13      	ldr	r3, [pc, #76]	; (24012124 <tSVF_initToPool+0x108>)
240120d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240120da:	bfd8      	it	le
240120dc:	4613      	movle	r3, r2
240120de:	64e3      	str	r3, [r4, #76]	; 0x4c
    }
}
240120e0:	ecbd 8b02 	vpop	{d8}
240120e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
240120e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
240120ea:	4a0f      	ldr	r2, [pc, #60]	; (24012128 <tSVF_initToPool+0x10c>)
        svf->cL = -2.0f;
240120ec:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
240120f0:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
240120f2:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
240120f4:	63a3      	str	r3, [r4, #56]	; 0x38
240120f6:	e7e6      	b.n	240120c6 <tSVF_initToPool+0xaa>
        svf->cBK = -1.0f;
240120f8:	4b0b      	ldr	r3, [pc, #44]	; (24012128 <tSVF_initToPool+0x10c>)
        svf->cH = 1.0f;
240120fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
240120fe:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
24012100:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
24012102:	63a3      	str	r3, [r4, #56]	; 0x38
24012104:	e7df      	b.n	240120c6 <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
24012106:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
2401210a:	4a07      	ldr	r2, [pc, #28]	; (24012128 <tSVF_initToPool+0x10c>)
        svf->cL = 0.0f;
2401210c:	2300      	movs	r3, #0
        svf->cH = 1.0f;
2401210e:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
24012110:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
24012112:	63a3      	str	r3, [r4, #56]	; 0x38
24012114:	e7d7      	b.n	240120c6 <tSVF_initToPool+0xaa>
24012116:	bf00      	nop
24012118:	40490fdb 	.word	0x40490fdb
2401211c:	47afc800 	.word	0x47afc800
24012120:	2401ccb0 	.word	0x2401ccb0
24012124:	24020cb0 	.word	0x24020cb0
24012128:	bf800000 	.word	0xbf800000

2401212c <tSVF_free>:

void    tSVF_free   (tSVF* const svff)
{
    _tSVF* svf = *svff;
2401212c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)svf, svf->mempool);
2401212e:	6801      	ldr	r1, [r0, #0]
24012130:	f002 be74 	b.w	24014e1c <mpool_free>

24012134 <tSVF_tick>:
}

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
24012134:	6803      	ldr	r3, [r0, #0]
#endif
    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
24012136:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
2401213a:	edd3 6a06 	vldr	s13, [r3, #24]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
2401213e:	ed93 6a05 	vldr	s12, [r3, #20]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
24012142:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24012146:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    v3 = v0 - svf->ic2eq;
2401214a:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
2401214e:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
24012152:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
24012156:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
2401215a:	edd3 2a09 	vldr	s5, [r3, #36]	; 0x24
2401215e:	ee67 7a84 	vmul.f32	s15, s15, s8
24012162:	ed93 2a08 	vldr	s4, [r3, #32]
24012166:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
2401216a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
2401216e:	eea2 5a23 	vfma.f32	s10, s4, s7
24012172:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
24012176:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
2401217a:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
2401217e:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
24012182:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24012186:	eed5 6aa4 	vfnms.f32	s13, s11, s9
2401218a:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
2401218e:	ed83 6a05 	vstr	s12, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
24012192:	edc3 6a06 	vstr	s13, [r3, #24]
}
24012196:	eea3 7a80 	vfma.f32	s14, s7, s0
2401219a:	eeb0 0a47 	vmov.f32	s0, s14
2401219e:	4770      	bx	lr

240121a0 <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, Lfloat freq)
{
240121a0:	b510      	push	{r4, lr}
    _tSVF* svf = *svff;
240121a2:	6804      	ldr	r4, [r0, #0]
    
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
240121a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
240121a8:	eef0 0a40 	vmov.f32	s1, s0
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
240121ac:	ed9f 0a16 	vldr	s0, [pc, #88]	; 24012208 <tSVF_setFreq+0x68>
240121b0:	ed94 1a10 	vldr	s2, [r4, #64]	; 0x40
240121b4:	ee21 1a27 	vmul.f32	s2, s2, s15
240121b8:	f002 faf2 	bl	240147a0 <LEAF_clip>
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
240121bc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 2401220c <tSVF_setFreq+0x6c>
240121c0:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
240121c4:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
240121c8:	ee67 7a87 	vmul.f32	s15, s15, s14
240121cc:	ee27 0a80 	vmul.f32	s0, s15, s0
240121d0:	f008 f87c 	bl	2401a2cc <tanf>
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240121d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240121d8:	edd4 7a08 	vldr	s15, [r4, #32]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
240121dc:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240121e0:	ee70 7a27 	vadd.f32	s15, s0, s15
240121e4:	eeb0 6a66 	vmov.f32	s12, s13
240121e8:	eea0 6a27 	vfma.f32	s12, s0, s15
240121ec:	ee86 7a86 	vdiv.f32	s14, s13, s12
    svf->a2 = svf->g * svf->a1;
240121f0:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240121f4:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
240121f8:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
240121fc:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
24012200:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
}
24012204:	bd10      	pop	{r4, pc}
24012206:	bf00      	nop
24012208:	00000000 	.word	0x00000000
2401220c:	40490fdb 	.word	0x40490fdb

24012210 <tSVF_setFreqFast>:

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
	_tSVF* svf = *vf;
	svf->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
24012210:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 24012290 <tSVF_setFreqFast+0x80>
24012214:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tSVF* svf = *vf;
24012218:	6803      	ldr	r3, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
2401221a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
2401221e:	ee20 7a07 	vmul.f32	s14, s0, s14
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
24012222:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
	svf->cutoffMIDI = cutoff;
24012224:	ed83 0a04 	vstr	s0, [r3, #16]
    int32_t intVer = (int32_t)cutoff;
24012228:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401222c:	ed93 6a08 	vldr	s12, [r3, #32]
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
24012230:	ee76 5ac7 	vsub.f32	s11, s13, s14
    int32_t intVer = (int32_t)cutoff;
24012234:	ee17 2a90 	vmov	r2, s15
24012238:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
2401223c:	4562      	cmp	r2, ip
2401223e:	bfa8      	it	ge
24012240:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012242:	ee07 2a90 	vmov	s15, r2
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
24012246:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401224a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
2401224e:	ed92 4a01 	vldr	s8, [r2, #4]
24012252:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012256:	ee77 7a45 	vsub.f32	s15, s14, s10
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
2401225a:	ee35 7a85 	vadd.f32	s14, s11, s10
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401225e:	eef0 5a66 	vmov.f32	s11, s13
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
24012262:	ee67 7a84 	vmul.f32	s15, s15, s8
24012266:	eee4 7a87 	vfma.f32	s15, s9, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401226a:	ee37 7a86 	vadd.f32	s14, s15, s12
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
2401226e:	edc3 7a07 	vstr	s15, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
24012272:	eee7 5a87 	vfma.f32	s11, s15, s14
24012276:	ee86 6aa5 	vdiv.f32	s12, s13, s11
    svf->a2 = svf->g * svf->a1;
2401227a:	ee27 7a86 	vmul.f32	s14, s15, s12
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401227e:	ed83 6a09 	vstr	s12, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
24012282:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
24012286:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
2401228a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
2401228e:	4770      	bx	lr
24012290:	41f4898d 	.word	0x41f4898d

24012294 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
24012294:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
24012298:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
2401229a:	edd3 7a07 	vldr	s15, [r3, #28]
    svf->k = 1.0f/Q;
2401229e:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
240122a2:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240122a6:	eeb0 6a47 	vmov.f32	s12, s14
240122aa:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
240122ae:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240122b2:	eea7 6aa5 	vfma.f32	s12, s15, s11
240122b6:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
240122ba:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
240122be:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
240122c2:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
240122c6:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
240122ca:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
240122ce:	4770      	bx	lr

240122d0 <tSVF_setSampleRate>:

void    tSVF_setSampleRate  (tSVF* const svff, Lfloat sr)
{
    _tSVF* svf = *svff;
    svf->sampleRate = sr;
    svf->invSampleRate = 1.0f/svf->sampleRate;
240122d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
240122d4:	6803      	ldr	r3, [r0, #0]
    svf->sampleRate = sr;
240122d6:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    svf->invSampleRate = 1.0f/svf->sampleRate;
240122da:	eec7 7a00 	vdiv.f32	s15, s14, s0
240122de:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
240122e2:	4770      	bx	lr

240122e4 <tHighpass_init>:

#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, Lfloat freq, LEAF* const leaf)
{
240122e4:	b538      	push	{r3, r4, r5, lr}
240122e6:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
    _tMempool* m = *mp;
240122ea:	698c      	ldr	r4, [r1, #24]
{
240122ec:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240122ee:	2018      	movs	r0, #24
{
240122f0:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
240122f4:	4621      	mov	r1, r4
240122f6:	f002 fd33 	bl	24014d60 <mpool_calloc>
240122fa:	6028      	str	r0, [r5, #0]
    f->mempool = m;
240122fc:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
240122fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24012302:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
24012304:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24012306:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
2401230a:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401230c:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
24012310:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
24012312:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24012316:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401231a:	edc0 7a03 	vstr	s15, [r0, #12]
}
2401231e:	ecbd 8b02 	vpop	{d8}
24012322:	bd38      	pop	{r3, r4, r5, pc}

24012324 <tHighpass_initToPool>:
{
24012324:	b538      	push	{r3, r4, r5, lr}
24012326:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
2401232a:	680c      	ldr	r4, [r1, #0]
{
2401232c:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
2401232e:	2018      	movs	r0, #24
{
24012330:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
24012334:	4621      	mov	r1, r4
24012336:	f002 fd13 	bl	24014d60 <mpool_calloc>
2401233a:	6028      	str	r0, [r5, #0]
    f->mempool = m;
2401233c:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401233e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24012342:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
24012344:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24012346:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
2401234a:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401234c:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
24012350:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
24012352:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
24012356:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401235a:	edc0 7a03 	vstr	s15, [r0, #12]
}
2401235e:	ecbd 8b02 	vpop	{d8}
24012362:	bd38      	pop	{r3, r4, r5, pc}

24012364 <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
    _tHighpass* f = *ft;
24012364:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
24012366:	6801      	ldr	r1, [r0, #0]
24012368:	f002 bd58 	b.w	24014e1c <mpool_free>

2401236c <tHighpass_setFreq>:
}

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
2401236c:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401236e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24012372:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
24012376:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
2401237a:	eee7 7a40 	vfms.f32	s15, s14, s0
2401237e:	edc3 7a03 	vstr	s15, [r3, #12]
}
24012382:	4770      	bx	lr

24012384 <tHighpass_tick>:
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
    _tHighpass* f = *ft;
24012384:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
24012386:	edd3 7a01 	vldr	s15, [r3, #4]
2401238a:	ed93 7a02 	vldr	s14, [r3, #8]
2401238e:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
24012392:	ed83 0a01 	vstr	s0, [r3, #4]
24012396:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
2401239a:	ee30 0a27 	vadd.f32	s0, s0, s15
2401239e:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
240123a2:	4770      	bx	lr

240123a4 <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
240123a4:	eddf 6a07 	vldr	s13, [pc, #28]	; 240123c4 <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
240123a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
240123ac:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
240123ae:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
240123b2:	edd3 6a04 	vldr	s13, [r3, #16]
240123b6:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
240123ba:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
240123be:	edc3 7a03 	vstr	s15, [r3, #12]
}
240123c2:	4770      	bx	lr
240123c4:	40c90fdb 	.word	0x40c90fdb

240123c8 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
240123c8:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
240123ca:	edd3 6a03 	vldr	s13, [r3, #12]
240123ce:	ed93 7a02 	vldr	s14, [r3, #8]
240123d2:	ee70 7a66 	vsub.f32	s15, s0, s13
240123d6:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
240123da:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
240123de:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
240123e2:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
240123e6:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
240123ea:	edd3 4a08 	vldr	s9, [r3, #32]
240123ee:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
240123f2:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
240123f6:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
240123fa:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
240123fe:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24012402:	eeb0 5a47 	vmov.f32	s10, s14
24012406:	eea4 0a87 	vfma.f32	s0, s9, s14
2401240a:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
2401240e:	eef0 7a66 	vmov.f32	s15, s13
}
24012412:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
24012416:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
2401241a:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
2401241e:	edc3 7a03 	vstr	s15, [r3, #12]
}
24012422:	4770      	bx	lr

24012424 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
24012424:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
24012426:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012428:	eddf 7a98 	vldr	s15, [pc, #608]	; 2401268c <tVZFilter_calcCoeffs+0x268>
{
2401242c:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012430:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
24012434:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
24012438:	ee68 8a87 	vmul.f32	s17, s17, s14
2401243c:	ee68 8aa7 	vmul.f32	s17, s17, s15
24012440:	eeb0 0a68 	vmov.f32	s0, s17
24012444:	f007 ff42 	bl	2401a2cc <tanf>
    
    switch( f->type )
24012448:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401244a:	eeb0 8a40 	vmov.f32	s16, s0
2401244e:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
24012452:	2b0a      	cmp	r3, #10
24012454:	f200 8117 	bhi.w	24012686 <tVZFilter_calcCoeffs+0x262>
24012458:	e8df f013 	tbh	[pc, r3, lsl #1]
2401245c:	002f0026 	.word	0x002f0026
24012460:	00410038 	.word	0x00410038
24012464:	0056004d 	.word	0x0056004d
24012468:	00a1008b 	.word	0x00a1008b
2401246c:	010a00b7 	.word	0x010a00b7
24012470:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
24012472:	edd4 7a05 	vldr	s15, [r4, #20]
24012476:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2401247a:	eeb1 7a67 	vneg.f32	s14, s15
2401247e:	61e3      	str	r3, [r4, #28]
24012480:	6263      	str	r3, [r4, #36]	; 0x24
24012482:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24012486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
2401248a:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
2401248e:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
24012492:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
24012496:	eee7 6a88 	vfma.f32	s13, s15, s16
2401249a:	eec7 7a26 	vdiv.f32	s15, s14, s13
2401249e:	edc4 7a06 	vstr	s15, [r4, #24]
}
240124a2:	ecbd 8b02 	vpop	{d8}
240124a6:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240124a8:	2300      	movs	r3, #0
240124aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240124ae:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240124b2:	61e3      	str	r3, [r4, #28]
240124b4:	6223      	str	r3, [r4, #32]
240124b6:	6262      	str	r2, [r4, #36]	; 0x24
            break;
240124b8:	e7e5      	b.n	24012486 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240124ba:	2300      	movs	r3, #0
240124bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240124c0:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240124c4:	6223      	str	r3, [r4, #32]
240124c6:	6263      	str	r3, [r4, #36]	; 0x24
240124c8:	61e2      	str	r2, [r4, #28]
            break;
240124ca:	e7dc      	b.n	24012486 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240124cc:	2300      	movs	r3, #0
240124ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240124d2:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
240124d6:	61e3      	str	r3, [r4, #28]
240124d8:	6263      	str	r3, [r4, #36]	; 0x24
240124da:	6222      	str	r2, [r4, #32]
            break;
240124dc:	e7d3      	b.n	24012486 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240124de:	edd4 7a05 	vldr	s15, [r4, #20]
240124e2:	2300      	movs	r3, #0
240124e4:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
240124e8:	61e3      	str	r3, [r4, #28]
240124ea:	ee27 7a27 	vmul.f32	s14, s14, s15
240124ee:	6263      	str	r3, [r4, #36]	; 0x24
240124f0:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
240124f4:	e7c7      	b.n	24012486 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
240124f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240124fa:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240124fc:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24012500:	6222      	str	r2, [r4, #32]
24012502:	61e3      	str	r3, [r4, #28]
24012504:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24012506:	e7be      	b.n	24012486 <tVZFilter_calcCoeffs+0x62>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24012508:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
2401250c:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24012510:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24012514:	ee60 0aa7 	vmul.f32	s1, s1, s15
24012518:	f007 fcf6 	bl	24019f08 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
2401251c:	ee28 0a80 	vmul.f32	s0, s17, s0
24012520:	f007 fed4 	bl	2401a2cc <tanf>
            Lfloat r  = f->g/wl;
24012524:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012528:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
2401252c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24012530:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
24012534:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24012538:	ed84 7a07 	vstr	s14, [r4, #28]
2401253c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24012540:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012544:	eea7 7aa7 	vfma.f32	s14, s15, s15
24012548:	eef0 6a47 	vmov.f32	s13, s14
2401254c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24012550:	ee77 7a45 	vsub.f32	s15, s14, s10
24012554:	ee67 7aa5 	vmul.f32	s15, s15, s11
24012558:	ee87 7a86 	vdiv.f32	s14, s15, s12
2401255c:	eef1 7ac7 	vsqrt.f32	s15, s14
24012560:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
24012564:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012568:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
2401256c:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
24012570:	e789      	b.n	24012486 <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
24012572:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012576:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
2401257a:	edd4 7a05 	vldr	s15, [r4, #20]
2401257e:	eef1 6ac7 	vsqrt.f32	s13, s14
24012582:	ed84 7a07 	vstr	s14, [r4, #28]
24012586:	6263      	str	r3, [r4, #36]	; 0x24
24012588:	ee27 6a27 	vmul.f32	s12, s14, s15
2401258c:	ed84 6a08 	vstr	s12, [r4, #32]
24012590:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012594:	ee80 8a07 	vdiv.f32	s16, s0, s14
24012598:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
2401259c:	e773      	b.n	24012486 <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
2401259e:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240125a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240125a6:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240125aa:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
240125ae:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
240125b2:	61e3      	str	r3, [r4, #28]
240125b4:	ee27 6a27 	vmul.f32	s12, s14, s15
240125b8:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
240125bc:	eeb1 7ae6 	vsqrt.f32	s14, s13
240125c0:	ee20 8a07 	vmul.f32	s16, s0, s14
240125c4:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
240125c8:	e75d      	b.n	24012486 <tVZFilter_calcCoeffs+0x62>
            Lfloat x  = (2.0f*f->m-1.0f);
240125ca:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
240125ce:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
240125d2:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240125d6:	eddf 0a2e 	vldr	s1, [pc, #184]	; 24012690 <tVZFilter_calcCoeffs+0x26c>
240125da:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
240125de:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240125e2:	eeb0 0a48 	vmov.f32	s0, s16
240125e6:	eea7 0a67 	vfms.f32	s0, s14, s15
240125ea:	f002 fb33 	bl	24014c54 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240125ee:	eddf 0a28 	vldr	s1, [pc, #160]	; 24012690 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
240125f2:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
240125f6:	eeb0 0a68 	vmov.f32	s0, s17
240125fa:	f002 fb2f 	bl	24014c5c <minimum>
            f->cB = 1.0f-x*x;
240125fe:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012602:	edd4 7a05 	vldr	s15, [r4, #20]
24012606:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
2401260a:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401260e:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24012612:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24012616:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401261a:	ee76 5a06 	vadd.f32	s11, s12, s12
2401261e:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24012622:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012626:	eee6 7a06 	vfma.f32	s15, s12, s12
2401262a:	eee0 7a00 	vfma.f32	s15, s0, s0
2401262e:	eee0 7a65 	vfms.f32	s15, s0, s11
24012632:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24012636:	f001 ff4f 	bl	240144d8 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
2401263a:	edd4 5a07 	vldr	s11, [r4, #28]
2401263e:	ed94 6a08 	vldr	s12, [r4, #32]
24012642:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24012646:	edd4 7a05 	vldr	s15, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
2401264a:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
2401264e:	ed94 8a04 	vldr	s16, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012652:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
24012656:	ee65 5a80 	vmul.f32	s11, s11, s0
2401265a:	ee26 6a00 	vmul.f32	s12, s12, s0
2401265e:	ee66 6a80 	vmul.f32	s13, s13, s0
24012662:	edc4 5a07 	vstr	s11, [r4, #28]
24012666:	ed84 6a08 	vstr	s12, [r4, #32]
2401266a:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
2401266e:	e70a      	b.n	24012486 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
24012670:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24012674:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
24012678:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
2401267a:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
2401267e:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
24012682:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24012684:	e6ff      	b.n	24012486 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012686:	edd4 7a05 	vldr	s15, [r4, #20]
2401268a:	e6fc      	b.n	24012486 <tVZFilter_calcCoeffs+0x62>
2401268c:	40490fdb 	.word	0x40490fdb
24012690:	00000000 	.word	0x00000000

24012694 <tVZFilter_initToPool>:
{
24012694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24012698:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
2401269c:	6816      	ldr	r6, [r2, #0]
{
2401269e:	b082      	sub	sp, #8
240126a0:	4605      	mov	r5, r0
240126a2:	460f      	mov	r7, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
240126a4:	2054      	movs	r0, #84	; 0x54
240126a6:	4631      	mov	r1, r6
{
240126a8:	eef0 8a60 	vmov.f32	s17, s1
240126ac:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
240126b0:	f002 faf2 	bl	24014c98 <mpool_alloc>
240126b4:	6028      	str	r0, [r5, #0]
    f->mempool = m;
240126b6:	6006      	str	r6, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240126b8:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
240126bc:	6876      	ldr	r6, [r6, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
240126be:	4604      	mov	r4, r0
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240126c0:	ed9f 8a47 	vldr	s16, [pc, #284]	; 240127e0 <tVZFilter_initToPool+0x14c>
    f->sampleRate = leaf->sampleRate;
240126c4:	ed96 1a00 	vldr	s2, [r6]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240126c8:	eddd 0a01 	vldr	s1, [sp, #4]
240126cc:	eeb0 0a48 	vmov.f32	s0, s16
    f->sampleRate = leaf->sampleRate;
240126d0:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240126d4:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
240126d8:	6873      	ldr	r3, [r6, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240126da:	ed9f 9a42 	vldr	s18, [pc, #264]	; 240127e4 <tVZFilter_initToPool+0x150>
    f->invSampleRate = leaf->invSampleRate;
240126de:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
240126e0:	f002 f85e 	bl	240147a0 <LEAF_clip>
240126e4:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->cutoffMIDI = ftom(f->fc);
240126e8:	f002 fa9a 	bl	24014c20 <ftom>
    f->invG = 1.414213562373095f;
240126ec:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 240127e8 <tVZFilter_initToPool+0x154>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
240126f0:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
240126f4:	ed94 6a12 	vldr	s12, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
240126f8:	edd4 7a04 	vldr	s15, [r4, #16]
    f->cutoffMIDI = ftom(f->fc);
240126fc:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012700:	ee26 0a86 	vmul.f32	s0, s13, s12
    f->R2Plusg = f->R2 + f->g;
24012704:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = INV_SQRT2;
24012708:	4b38      	ldr	r3, [pc, #224]	; (240127ec <tVZFilter_initToPool+0x158>)
    f->invG = 1.414213562373095f;
2401270a:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = INV_SQRT2;
2401270e:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012710:	ee20 0a09 	vmul.f32	s0, s0, s18
    f->R2   = f->invG;
24012714:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
24012718:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->type = type;
2401271c:	7127      	strb	r7, [r4, #4]
    f->B    = bandWidth;
2401271e:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
24012722:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
24012726:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
2401272a:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
2401272e:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
24012732:	f007 fdcb 	bl	2401a2cc <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
24012736:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 240127f0 <tVZFilter_initToPool+0x15c>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
2401273a:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
2401273e:	eef0 0a68 	vmov.f32	s1, s17
24012742:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
24012746:	f8d5 8000 	ldr.w	r8, [r5]
    f->B = LEAF_clip(0.0f, B, 100.0f);
2401274a:	f002 f829 	bl	240147a0 <LEAF_clip>
2401274e:	eef0 0a40 	vmov.f32	s1, s0
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24012752:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24012756:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
2401275a:	edc8 0a0e 	vstr	s1, [r8, #56]	; 0x38
    _tVZFilter* f = *vf;
2401275e:	682f      	ldr	r7, [r5, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
24012760:	ee60 0aa7 	vmul.f32	s1, s1, s15
24012764:	f007 fbd0 	bl	24019f08 <powf>
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24012768:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
2401276c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
24012770:	ee67 7a87 	vmul.f32	s15, s15, s14
24012774:	ee67 7a89 	vmul.f32	s15, s15, s18
24012778:	ee27 0a80 	vmul.f32	s0, s15, s0
2401277c:	f007 fda6 	bl	2401a2cc <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
24012780:	ed97 6a04 	vldr	s12, [r7, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
24012784:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24012788:	4628      	mov	r0, r5
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
2401278a:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
2401278e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
24012792:	ee27 7a07 	vmul.f32	s14, s14, s14
24012796:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401279a:	ee67 7aa7 	vmul.f32	s15, s15, s15
2401279e:	ee67 7aa6 	vmul.f32	s15, s15, s13
240127a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
240127a6:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
240127aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
240127ae:	edc8 7a05 	vstr	s15, [r8, #20]
    tVZFilter_calcCoeffs(vf);
240127b2:	f7ff fe37 	bl	24012424 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
240127b6:	4628      	mov	r0, r5
240127b8:	f7ff fe34 	bl	24012424 <tVZFilter_calcCoeffs>
    if (leaf->sampleRate > 90000)
240127bc:	ed96 7a00 	vldr	s14, [r6]
240127c0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 240127f4 <tVZFilter_initToPool+0x160>
    	f->table = __filterTanhTable_48000;
240127c4:	4a0c      	ldr	r2, [pc, #48]	; (240127f8 <tVZFilter_initToPool+0x164>)
240127c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
240127ca:	4b0c      	ldr	r3, [pc, #48]	; (240127fc <tVZFilter_initToPool+0x168>)
240127cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240127d0:	bfd8      	it	le
240127d2:	4613      	movle	r3, r2
240127d4:	6523      	str	r3, [r4, #80]	; 0x50
}
240127d6:	b002      	add	sp, #8
240127d8:	ecbd 8b04 	vpop	{d8-d9}
240127dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
240127e0:	00000000 	.word	0x00000000
240127e4:	40490fdb 	.word	0x40490fdb
240127e8:	3fb504f3 	.word	0x3fb504f3
240127ec:	3f3504f3 	.word	0x3f3504f3
240127f0:	42c80000 	.word	0x42c80000
240127f4:	47afc800 	.word	0x47afc800
240127f8:	2401ccb0 	.word	0x2401ccb0
240127fc:	24020cb0 	.word	0x24020cb0

24012800 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
24012800:	3218      	adds	r2, #24
24012802:	f7ff bf47 	b.w	24012694 <tVZFilter_initToPool>
24012806:	bf00      	nop

24012808 <tVZFilter_setFreq>:
{
24012808:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
2401280a:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401280c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
24012810:	4604      	mov	r4, r0
24012812:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012816:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
2401281a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24012834 <tVZFilter_setFreq+0x2c>
2401281e:	ee21 1a27 	vmul.f32	s2, s2, s15
24012822:	f001 ffbd 	bl	240147a0 <LEAF_clip>
    tVZFilter_calcCoeffs(vf);
24012826:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012828:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
2401282c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24012830:	f7ff bdf8 	b.w	24012424 <tVZFilter_calcCoeffs>
24012834:	00000000 	.word	0x00000000

24012838 <tVZFilter_setFreqFast>:
	 cutoff *= 30.567164179104478f;
24012838:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 24012b00 <tVZFilter_setFreqFast+0x2c8>
2401283c:	f640 7cfe 	movw	ip, #4094	; 0xffe
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24012840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	 cutoff *= 30.567164179104478f;
24012844:	ee20 7a07 	vmul.f32	s14, s0, s14
{
24012848:	b510      	push	{r4, lr}
	    int32_t intVer = (int32_t)cutoff;
2401284a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
	 _tVZFilter* f = *vf;
2401284e:	6804      	ldr	r4, [r0, #0]
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24012850:	ee76 6ac7 	vsub.f32	s13, s13, s14
	    int32_t intVer = (int32_t)cutoff;
24012854:	ee17 3a90 	vmov	r3, s15
24012858:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
2401285c:	4563      	cmp	r3, ip
2401285e:	bfa8      	it	ge
24012860:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012862:	ee07 3a90 	vmov	s15, r3
{
24012866:	ed2d 8b02 	vpush	{d8}
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401286a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
2401286e:	6d22      	ldr	r2, [r4, #80]	; 0x50
	 f->cutoffMIDI = cutoff;
24012870:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24012874:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    switch( f->type )
24012878:	7921      	ldrb	r1, [r4, #4]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401287a:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
2401287e:	ed93 5a01 	vldr	s10, [r3, #4]
24012882:	ee36 7a86 	vadd.f32	s14, s13, s12
24012886:	edd3 5a00 	vldr	s11, [r3]
2401288a:	ee67 7a85 	vmul.f32	s15, s15, s10
2401288e:	eee5 7a87 	vfma.f32	s15, s11, s14
24012892:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
24012896:	290a      	cmp	r1, #10
24012898:	f200 812f 	bhi.w	24012afa <tVZFilter_setFreqFast+0x2c2>
2401289c:	e8df f011 	tbh	[pc, r1, lsl #1]
240128a0:	002f0026 	.word	0x002f0026
240128a4:	00410038 	.word	0x00410038
240128a8:	0056004d 	.word	0x0056004d
240128ac:	00b5009b 	.word	0x00b5009b
240128b0:	012200cf 	.word	0x012200cf
240128b4:	000b      	.short	0x000b
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
240128b6:	ed94 7a05 	vldr	s14, [r4, #20]
240128ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
240128be:	eef1 6a47 	vneg.f32	s13, s14
240128c2:	61e3      	str	r3, [r4, #28]
240128c4:	6263      	str	r3, [r4, #36]	; 0x24
240128c6:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
240128ca:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240128ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
240128d2:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
240128d6:	eef0 6a47 	vmov.f32	s13, s14
240128da:	eee0 6a27 	vfma.f32	s13, s0, s15
240128de:	eec7 7a26 	vdiv.f32	s15, s14, s13
240128e2:	edc4 7a06 	vstr	s15, [r4, #24]
}
240128e6:	ecbd 8b02 	vpop	{d8}
240128ea:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240128ec:	2300      	movs	r3, #0
240128ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
240128f2:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
240128f6:	61e3      	str	r3, [r4, #28]
240128f8:	6223      	str	r3, [r4, #32]
240128fa:	6262      	str	r2, [r4, #36]	; 0x24
            break;
240128fc:	e7e5      	b.n	240128ca <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
240128fe:	2300      	movs	r3, #0
24012900:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012904:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
24012908:	6223      	str	r3, [r4, #32]
2401290a:	6263      	str	r3, [r4, #36]	; 0x24
2401290c:	61e2      	str	r2, [r4, #28]
            break;
2401290e:	e7dc      	b.n	240128ca <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
24012910:	2300      	movs	r3, #0
24012912:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012916:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
2401291a:	61e3      	str	r3, [r4, #28]
2401291c:	6263      	str	r3, [r4, #36]	; 0x24
2401291e:	6222      	str	r2, [r4, #32]
            break;
24012920:	e7d3      	b.n	240128ca <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012922:	ed94 7a05 	vldr	s14, [r4, #20]
24012926:	2300      	movs	r3, #0
24012928:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
2401292c:	61e3      	str	r3, [r4, #28]
2401292e:	ee66 6a87 	vmul.f32	s13, s13, s14
24012932:	6263      	str	r3, [r4, #36]	; 0x24
24012934:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24012938:	e7c7      	b.n	240128ca <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
2401293a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
2401293e:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012940:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
24012944:	6222      	str	r2, [r4, #32]
24012946:	61e3      	str	r3, [r4, #28]
24012948:	6263      	str	r3, [r4, #36]	; 0x24
            break;
2401294a:	e7be      	b.n	240128ca <tVZFilter_setFreqFast+0x92>
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2401294c:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
24012950:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
24012954:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24012958:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401295c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24012960:	ee60 0aa7 	vmul.f32	s1, s1, s15
24012964:	f001 fe8e 	bl	24014684 <fastPowf>
            Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
24012968:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
2401296c:	eddf 7a65 	vldr	s15, [pc, #404]	; 24012b04 <tVZFilter_setFreqFast+0x2cc>
24012970:	ee28 8a07 	vmul.f32	s16, s16, s14
24012974:	ee28 8a27 	vmul.f32	s16, s16, s15
24012978:	ee28 0a00 	vmul.f32	s0, s16, s0
2401297c:	f001 fd5e 	bl	2401443c <fastertanf>
            Lfloat r  = f->g/wl;
24012980:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012984:	eeb0 5a68 	vmov.f32	s10, s17
24012988:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            Lfloat r  = f->g/wl;
2401298c:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24012990:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24012994:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
24012998:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401299c:	eea7 5aa7 	vfma.f32	s10, s15, s15
240129a0:	ee85 7a27 	vdiv.f32	s14, s10, s15
240129a4:	ee77 7a65 	vsub.f32	s15, s14, s11
240129a8:	ee67 7a86 	vmul.f32	s15, s15, s12
240129ac:	ee87 0aa6 	vdiv.f32	s0, s15, s13
240129b0:	f001 fd92 	bl	240144d8 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240129b4:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
240129b8:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240129bc:	edc4 8a07 	vstr	s17, [r4, #28]
240129c0:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240129c4:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240129c8:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240129cc:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
240129d0:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
240129d4:	e779      	b.n	240128ca <tVZFilter_setFreqFast+0x92>
            Lfloat A = fastsqrtf(f->G);
240129d6:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
240129da:	f001 fd7d 	bl	240144d8 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240129de:	f001 fd7b 	bl	240144d8 <fastsqrtf>
240129e2:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
240129e6:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
240129ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
240129ee:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
240129f2:	ed94 7a05 	vldr	s14, [r4, #20]
240129f6:	edc4 6a07 	vstr	s13, [r4, #28]
240129fa:	6263      	str	r3, [r4, #36]	; 0x24
240129fc:	ee66 6a87 	vmul.f32	s13, s13, s14
24012a00:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012a04:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
24012a08:	e75f      	b.n	240128ca <tVZFilter_setFreqFast+0x92>
            Lfloat A = fastsqrtf(f->G);
24012a0a:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
24012a0e:	f001 fd63 	bl	240144d8 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012a12:	f001 fd61 	bl	240144d8 <fastsqrtf>
24012a16:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24012a1a:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
24012a1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
24012a22:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012a26:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24012a2a:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
24012a2e:	ee67 6a26 	vmul.f32	s13, s14, s13
24012a32:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
24012a34:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
24012a38:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
24012a3c:	e745      	b.n	240128ca <tVZFilter_setFreqFast+0x92>
            Lfloat x  = (2.0f*f->m-1.0f);
24012a3e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24012a42:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
24012a46:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24012a4a:	eddf 0a2f 	vldr	s1, [pc, #188]	; 24012b08 <tVZFilter_setFreqFast+0x2d0>
24012a4e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
24012a52:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24012a56:	eeb0 0a48 	vmov.f32	s0, s16
24012a5a:	eea7 0a67 	vfms.f32	s0, s14, s15
24012a5e:	f002 f8f9 	bl	24014c54 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24012a62:	eddf 0a29 	vldr	s1, [pc, #164]	; 24012b08 <tVZFilter_setFreqFast+0x2d0>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
24012a66:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24012a6a:	eeb0 0a68 	vmov.f32	s0, s17
24012a6e:	f002 f8f5 	bl	24014c5c <minimum>
            f->cB = 1.0f-x*x;
24012a72:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012a76:	edd4 7a05 	vldr	s15, [r4, #20]
24012a7a:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
24012a7e:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012a82:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
24012a86:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
24012a8a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012a8e:	ee76 5a06 	vadd.f32	s11, s12, s12
24012a92:	ee38 8a08 	vadd.f32	s16, s16, s16
24012a96:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
24012a9a:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012a9e:	eee6 7a06 	vfma.f32	s15, s12, s12
24012aa2:	eee0 7a00 	vfma.f32	s15, s0, s0
24012aa6:	eee0 7a65 	vfms.f32	s15, s0, s11
24012aaa:	ee86 0aa7 	vdiv.f32	s0, s13, s15
24012aae:	f001 fd13 	bl	240144d8 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
24012ab2:	edd4 5a07 	vldr	s11, [r4, #28]
24012ab6:	ed94 6a08 	vldr	s12, [r4, #32]
24012aba:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
24012abe:	ed94 7a05 	vldr	s14, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
24012ac2:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
24012ac6:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
24012aca:	ee65 5a80 	vmul.f32	s11, s11, s0
24012ace:	ee26 6a00 	vmul.f32	s12, s12, s0
24012ad2:	ee66 6a80 	vmul.f32	s13, s13, s0
24012ad6:	edc4 5a07 	vstr	s11, [r4, #28]
24012ada:	ed84 6a08 	vstr	s12, [r4, #32]
24012ade:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
24012ae2:	e6f2      	b.n	240128ca <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f;
24012ae4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
24012ae8:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
24012aec:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
24012aee:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
24012af2:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
24012af6:	6263      	str	r3, [r4, #36]	; 0x24
            break;
24012af8:	e6e7      	b.n	240128ca <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
24012afa:	ed94 7a05 	vldr	s14, [r4, #20]
24012afe:	e6e4      	b.n	240128ca <tVZFilter_setFreqFast+0x92>
24012b00:	41f4898d 	.word	0x41f4898d
24012b04:	40490fdb 	.word	0x40490fdb
24012b08:	00000000 	.word	0x00000000

24012b0c <tVZFilter_setGain>:
{
24012b0c:	b538      	push	{r3, r4, r5, lr}
24012b0e:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012b12:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 24012b3c <tVZFilter_setGain+0x30>
24012b16:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24012b40 <tVZFilter_setGain+0x34>
{
24012b1a:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
24012b1c:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012b1e:	f001 fe3f 	bl	240147a0 <LEAF_clip>
    f->invG = 1.0f/f->G;
24012b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24012b26:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012b28:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
24012b2c:	eec7 7a00 	vdiv.f32	s15, s14, s0
24012b30:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
24012b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24012b38:	f7ff bc74 	b.w	24012424 <tVZFilter_calcCoeffs>
24012b3c:	457a0000 	.word	0x457a0000
24012b40:	358637bd 	.word	0x358637bd

24012b44 <tVZFilter_setResonance>:
{
24012b44:	b538      	push	{r3, r4, r5, lr}
24012b46:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24012b4a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 24012b74 <tVZFilter_setResonance+0x30>
24012b4e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24012b78 <tVZFilter_setResonance+0x34>
{
24012b52:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
24012b54:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24012b56:	f001 fe23 	bl	240147a0 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
24012b5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
24012b5e:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24012b60:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
24012b64:	eec7 7a00 	vdiv.f32	s15, s14, s0
24012b68:	edc5 7a05 	vstr	s15, [r5, #20]
}
24012b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24012b70:	f7ff bc58 	b.w	24012424 <tVZFilter_calcCoeffs>
24012b74:	42c80000 	.word	0x42c80000
24012b78:	3c23d70a 	.word	0x3c23d70a

24012b7c <tVZFilter_setFrequencyAndResonance>:
{
24012b7c:	b538      	push	{r3, r4, r5, lr}
24012b7e:	ed2d 8b02 	vpush	{d8}
    _tVZFilter* f = *vf;
24012b82:	6804      	ldr	r4, [r0, #0]
{
24012b84:	eeb0 8a60 	vmov.f32	s16, s1
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
24012b88:	eddf 7a13 	vldr	s15, [pc, #76]	; 24012bd8 <tVZFilter_setFrequencyAndResonance+0x5c>
24012b8c:	eef0 0a40 	vmov.f32	s1, s0
24012b90:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
{
24012b94:	4605      	mov	r5, r0
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
24012b96:	ed9f 0a11 	vldr	s0, [pc, #68]	; 24012bdc <tVZFilter_setFrequencyAndResonance+0x60>
24012b9a:	ee21 1a27 	vmul.f32	s2, s2, s15
24012b9e:	f001 fdff 	bl	240147a0 <LEAF_clip>
24012ba2:	eef0 7a40 	vmov.f32	s15, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24012ba6:	eef0 0a48 	vmov.f32	s1, s16
24012baa:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 24012be0 <tVZFilter_setFrequencyAndResonance+0x64>
24012bae:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 24012be4 <tVZFilter_setFrequencyAndResonance+0x68>
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
24012bb2:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24012bb6:	f001 fdf3 	bl	240147a0 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
24012bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
24012bbe:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    tVZFilter_calcCoeffs(vf);
24012bc2:	4628      	mov	r0, r5
    f->R2 = 1.0f / f->Q;
24012bc4:	eec7 7a00 	vdiv.f32	s15, s14, s0
24012bc8:	edc4 7a05 	vstr	s15, [r4, #20]
}
24012bcc:	ecbd 8b02 	vpop	{d8}
24012bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
24012bd4:	f7ff bc26 	b.w	24012424 <tVZFilter_calcCoeffs>
24012bd8:	3ecccccd 	.word	0x3ecccccd
24012bdc:	3dcccccd 	.word	0x3dcccccd
24012be0:	42c80000 	.word	0x42c80000
24012be4:	3c23d70a 	.word	0x3c23d70a

24012be8 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, Lfloat sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
24012be8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
24012bec:	ed9f 7a09 	vldr	s14, [pc, #36]	; 24012c14 <tVZFilter_setSampleRate+0x2c>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24012bf0:	4909      	ldr	r1, [pc, #36]	; (24012c18 <tVZFilter_setSampleRate+0x30>)
24012bf2:	eeb4 0ac7 	vcmpe.f32	s0, s14
    _tVZFilter* f = *vf;
24012bf6:	6803      	ldr	r3, [r0, #0]
    f->invSampleRate = 1.0f/f->sampleRate;
24012bf8:	eec6 7a80 	vdiv.f32	s15, s13, s0
    	f->table = __filterTanhTable_48000;
24012bfc:	4a07      	ldr	r2, [pc, #28]	; (24012c1c <tVZFilter_setSampleRate+0x34>)
    f->sampleRate = sr;
24012bfe:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    	f->table = __filterTanhTable_48000;
24012c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012c06:	bfd8      	it	le
24012c08:	460a      	movle	r2, r1
24012c0a:	651a      	str	r2, [r3, #80]	; 0x50
    f->invSampleRate = 1.0f/f->sampleRate;
24012c0c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    }
}
24012c10:	4770      	bx	lr
24012c12:	bf00      	nop
24012c14:	47afc800 	.word	0x47afc800
24012c18:	2401ccb0 	.word	0x2401ccb0
24012c1c:	24020cb0 	.word	0x24020cb0

24012c20 <tVZFilterLS_initToPool>:
{
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterLS_initToPool     (tVZFilterLS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
24012c20:	b570      	push	{r4, r5, r6, lr}
24012c22:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
24012c26:	680d      	ldr	r5, [r1, #0]
{
24012c28:	b082      	sub	sp, #8
24012c2a:	4606      	mov	r6, r0
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
24012c2c:	2048      	movs	r0, #72	; 0x48
24012c2e:	4629      	mov	r1, r5
{
24012c30:	eef0 8a60 	vmov.f32	s17, s1
24012c34:	eeb0 9a41 	vmov.f32	s18, s2
24012c38:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
24012c3c:	f002 f82c 	bl	24014c98 <mpool_alloc>
24012c40:	6030      	str	r0, [r6, #0]
    f->mempool = m;
24012c42:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012c44:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
24012c48:	686d      	ldr	r5, [r5, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
24012c4a:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
24012c4c:	eddf 6a37 	vldr	s13, [pc, #220]	; 24012d2c <tVZFilterLS_initToPool+0x10c>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
24012c50:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
24012c54:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012c58:	eddf 9a35 	vldr	s19, [pc, #212]	; 24012d30 <tVZFilterLS_initToPool+0x110>
    f->sampRatio = 48000.0f / f->sampleRate;
24012c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
24012c60:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012c64:	eddd 0a01 	vldr	s1, [sp, #4]
24012c68:	ee27 1a81 	vmul.f32	s2, s15, s2
24012c6c:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
24012c70:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->invSampleRate = leaf->invSampleRate;
24012c74:	686b      	ldr	r3, [r5, #4]
24012c76:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012c78:	f001 fd92 	bl	240147a0 <LEAF_clip>
24012c7c:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
24012c80:	f001 ffce 	bl	24014c20 <ftom>
    f->R2 =    1.0f/Q;
24012c84:	ee88 7a28 	vdiv.f32	s14, s16, s17
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012c88:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
24012c8c:	edd4 7a06 	vldr	s15, [r4, #24]
24012c90:	eddf 6a28 	vldr	s13, [pc, #160]	; 24012d34 <tVZFilterLS_initToPool+0x114>
    f->cutoffMIDI = ftom(f->fc);
24012c94:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012c98:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
24012c9c:	edc4 8a08 	vstr	s17, [r4, #32]
    f->s1    = 0.0f;
24012ca0:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
24012ca4:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012ca8:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
24012cac:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012cb0:	f007 fb0c 	bl	2401a2cc <tanf>
24012cb4:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012cb8:	eef0 0a49 	vmov.f32	s1, s18
24012cbc:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 24012d38 <tVZFilterLS_initToPool+0x118>
24012cc0:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 24012d3c <tVZFilterLS_initToPool+0x11c>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012cc4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012cc8:	f001 fd6a 	bl	240147a0 <LEAF_clip>
24012ccc:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24012cd0:	f001 fc02 	bl	240144d8 <fastsqrtf>
24012cd4:	f001 fc00 	bl	240144d8 <fastsqrtf>
24012cd8:	eec8 6a00 	vdiv.f32	s13, s16, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24012cdc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
24012ce0:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
24012ce4:	ed9f 6a16 	vldr	s12, [pc, #88]	; 24012d40 <tVZFilterLS_initToPool+0x120>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24012ce8:	4a16      	ldr	r2, [pc, #88]	; (24012d44 <tVZFilterLS_initToPool+0x124>)
24012cea:	4b17      	ldr	r3, [pc, #92]	; (24012d48 <tVZFilterLS_initToPool+0x128>)
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24012cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24012cf0:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012cf4:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
24012cf8:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24012cfc:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012d00:	eee7 6a87 	vfma.f32	s13, s15, s14
    f->R2Plusg = f->R2+f->g;
24012d04:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012d08:	eec8 7a26 	vdiv.f32	s15, s16, s13
24012d0c:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
24012d10:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
24012d14:	eef4 7ac6 	vcmpe.f32	s15, s12
24012d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012d1c:	bfd8      	it	le
24012d1e:	4613      	movle	r3, r2
24012d20:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
24012d22:	b002      	add	sp, #8
24012d24:	ecbd 8b04 	vpop	{d8-d9}
24012d28:	bd70      	pop	{r4, r5, r6, pc}
24012d2a:	bf00      	nop
24012d2c:	473b8000 	.word	0x473b8000
24012d30:	00000000 	.word	0x00000000
24012d34:	40490fdb 	.word	0x40490fdb
24012d38:	457a0000 	.word	0x457a0000
24012d3c:	358637bd 	.word	0x358637bd
24012d40:	47afc800 	.word	0x47afc800
24012d44:	2401ccb0 	.word	0x2401ccb0
24012d48:	24020cb0 	.word	0x24020cb0

24012d4c <tVZFilterLS_init>:
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
24012d4c:	3118      	adds	r1, #24
24012d4e:	f7ff bf67 	b.w	24012c20 <tVZFilterLS_initToPool>
24012d52:	bf00      	nop

24012d54 <tVZFilterLS_setSampleRate>:

void    tVZFilterLS_setSampleRate  (tVZFilterLS* const vf, Lfloat sampleRate)
{
        _tVZFilterLS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
24012d54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
24012d58:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 24012d8c <tVZFilterLS_setSampleRate+0x38>
    if (sampleRate > 90000)
24012d5c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24012d90 <tVZFilterLS_setSampleRate+0x3c>
       {
       	f->table = __filterTanhTable_96000;
       }
       else
       {
       	f->table = __filterTanhTable_48000;
24012d60:	490c      	ldr	r1, [pc, #48]	; (24012d94 <tVZFilterLS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
24012d62:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterLS* f = *vf;
24012d66:	6803      	ldr	r3, [r0, #0]
       	f->table = __filterTanhTable_48000;
24012d68:	4a0b      	ldr	r2, [pc, #44]	; (24012d98 <tVZFilterLS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
24012d6a:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
24012d6e:	eec6 7a00 	vdiv.f32	s15, s12, s0
       	f->table = __filterTanhTable_48000;
24012d72:	eeb4 0ae6 	vcmpe.f32	s0, s13
24012d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24012d7a:	bfd8      	it	le
24012d7c:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
24012d7e:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
24012d82:	641a      	str	r2, [r3, #64]	; 0x40
24012d84:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
       }
}
24012d88:	4770      	bx	lr
24012d8a:	bf00      	nop
24012d8c:	473b8000 	.word	0x473b8000
24012d90:	47afc800 	.word	0x47afc800
24012d94:	2401ccb0 	.word	0x2401ccb0
24012d98:	24020cb0 	.word	0x24020cb0

24012d9c <tVZFilterLS_tick>:
Lfloat   tVZFilterLS_tick               (tVZFilterLS* const vf, Lfloat input)
{
        _tVZFilterLS* f = *vf;
24012d9c:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24012d9e:	edd3 7a02 	vldr	s15, [r3, #8]
24012da2:	ed93 7a01 	vldr	s14, [r3, #4]
24012da6:	ee30 0a67 	vsub.f32	s0, s0, s15
24012daa:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
24012dae:	edd3 5a05 	vldr	s11, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
24012db2:	edd3 6a03 	vldr	s13, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24012db6:	eea5 0a47 	vfms.f32	s0, s10, s14
24012dba:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->G*yL + f->R2*f->G*yB + yH;
24012dbe:	ed93 6a07 	vldr	s12, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24012dc2:	ee20 0a25 	vmul.f32	s0, s0, s11
    yB = v1 + f->s1;
24012dc6:	eea6 7a80 	vfma.f32	s14, s13, s0
    yL = v2 + f->s2;
24012dca:	eee6 7a87 	vfma.f32	s15, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24012dce:	eeb0 5a47 	vmov.f32	s10, s14
24012dd2:	eea6 5a80 	vfma.f32	s10, s13, s0
    f->s2 = v2 + yL; // state update in 2nd integrator
24012dd6:	eef0 5a67 	vmov.f32	s11, s15
24012dda:	eee4 7a87 	vfma.f32	s15, s9, s14
24012dde:	eee6 5a87 	vfma.f32	s11, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
24012de2:	ed83 5a01 	vstr	s10, [r3, #4]
}
24012de6:	eea6 0a27 	vfma.f32	s0, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
24012dea:	edc3 5a02 	vstr	s11, [r3, #8]
}
24012dee:	4770      	bx	lr

24012df0 <tVZFilterLS_setFreqFast>:

void    tVZFilterLS_setFreqFast           (tVZFilterLS* const vf, Lfloat cutoff)
{
        _tVZFilterLS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
24012df0:	eddf 7a21 	vldr	s15, [pc, #132]	; 24012e78 <tVZFilterLS_setFreqFast+0x88>
24012df4:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012df8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
24012dfc:	6803      	ldr	r3, [r0, #0]
        cutoff *= 30.567164179104478f;
24012dfe:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012e02:	6c19      	ldr	r1, [r3, #64]	; 0x40
24012e04:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
        int32_t intVer = (int32_t)cutoff;
24012e08:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        f->cutoffMIDI = cutoff;
24012e0c:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012e10:	ee76 5a67 	vsub.f32	s11, s12, s15

    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24012e14:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
24012e18:	ee16 2a90 	vmov	r2, s13
    f->R2Plusg = f->R2+f->g;
24012e1c:	edd3 6a04 	vldr	s13, [r3, #16]
24012e20:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
24012e24:	4562      	cmp	r2, ip
24012e26:	bfa8      	it	ge
24012e28:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012e2a:	ee05 2a10 	vmov	s10, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012e2e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012e32:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012e36:	ed92 4a01 	vldr	s8, [r2, #4]
24012e3a:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24012e3e:	ee77 7ac5 	vsub.f32	s15, s15, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012e42:	ee75 5a85 	vadd.f32	s11, s11, s10
24012e46:	ee67 7aa3 	vmul.f32	s15, s15, s7
24012e4a:	ee67 7a84 	vmul.f32	s15, s15, s8
24012e4e:	eee4 7aa5 	vfma.f32	s15, s9, s11
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24012e52:	ee27 7a87 	vmul.f32	s14, s15, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24012e56:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
24012e5a:	ee77 7a26 	vadd.f32	s15, s14, s13
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24012e5e:	ed83 7a03 	vstr	s14, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012e62:	eef0 6a46 	vmov.f32	s13, s12
    f->R2Plusg = f->R2+f->g;
24012e66:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012e6a:	eee7 6a27 	vfma.f32	s13, s14, s15
24012e6e:	eec6 7a26 	vdiv.f32	s15, s12, s13
24012e72:	edc3 7a05 	vstr	s15, [r3, #20]
}
24012e76:	4770      	bx	lr
24012e78:	41f4898d 	.word	0x41f4898d

24012e7c <tVZFilterLS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterLS_setGain                  (tVZFilterLS* const vf, Lfloat gain)
{
24012e7c:	b510      	push	{r4, lr}
        _tVZFilterLS* f = *vf;
24012e7e:	6804      	ldr	r4, [r0, #0]
{
24012e80:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012e84:	ed9f 1a13 	vldr	s2, [pc, #76]	; 24012ed4 <tVZFilterLS_setGain+0x58>
24012e88:	ed9f 0a13 	vldr	s0, [pc, #76]	; 24012ed8 <tVZFilterLS_setGain+0x5c>
24012e8c:	f001 fc88 	bl	240147a0 <LEAF_clip>
24012e90:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24012e94:	f001 fb20 	bl	240144d8 <fastsqrtf>
24012e98:	f001 fb1e 	bl	240144d8 <fastsqrtf>
24012e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24012ea0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
24012ea4:	ed94 7a04 	vldr	s14, [r4, #16]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24012ea8:	ee86 6a80 	vdiv.f32	s12, s13, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24012eac:	ee66 7a27 	vmul.f32	s15, s12, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
24012eb0:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012eb4:	eeb0 6a66 	vmov.f32	s12, s13
    f->R2Plusg = f->R2+f->g;
24012eb8:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
24012ebc:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012ec0:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
24012ec4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012ec8:	eec6 7a86 	vdiv.f32	s15, s13, s12
24012ecc:	edc4 7a05 	vstr	s15, [r4, #20]
}
24012ed0:	bd10      	pop	{r4, pc}
24012ed2:	bf00      	nop
24012ed4:	457a0000 	.word	0x457a0000
24012ed8:	358637bd 	.word	0x358637bd

24012edc <tVZFilterLS_setResonance>:

void    tVZFilterLS_setResonance                (tVZFilterLS* const vf, Lfloat res)
{
        _tVZFilterLS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
24012edc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
24012ee0:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
24012ee2:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
24012ee6:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
24012eea:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
24012eee:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
24012ef2:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012ef6:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
24012efa:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012efe:	eea6 6a87 	vfma.f32	s12, s13, s14
24012f02:	ee87 7a86 	vdiv.f32	s14, s15, s12
24012f06:	ed83 7a05 	vstr	s14, [r3, #20]
}
24012f0a:	4770      	bx	lr

24012f0c <tVZFilterHS_initToPool>:
{
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterHS_initToPool     (tVZFilterHS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
24012f0c:	b570      	push	{r4, r5, r6, lr}
24012f0e:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
24012f12:	680d      	ldr	r5, [r1, #0]
{
24012f14:	b082      	sub	sp, #8
24012f16:	4606      	mov	r6, r0
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
24012f18:	2048      	movs	r0, #72	; 0x48
24012f1a:	4629      	mov	r1, r5
{
24012f1c:	eeb0 8a60 	vmov.f32	s16, s1
24012f20:	eeb0 9a41 	vmov.f32	s18, s2
24012f24:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
24012f28:	f001 feb6 	bl	24014c98 <mpool_alloc>
24012f2c:	6030      	str	r0, [r6, #0]
    f->mempool = m;
24012f2e:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012f30:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
24012f34:	686d      	ldr	r5, [r5, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
24012f36:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
24012f38:	eddf 6a36 	vldr	s13, [pc, #216]	; 24013014 <tVZFilterHS_initToPool+0x108>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
24012f3c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
24012f40:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012f44:	eddf 9a34 	vldr	s19, [pc, #208]	; 24013018 <tVZFilterHS_initToPool+0x10c>
    f->sampRatio = 48000.0f / f->sampleRate;
24012f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
24012f4c:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->invSampleRate = leaf->invSampleRate;
24012f50:	686b      	ldr	r3, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012f52:	eddd 0a01 	vldr	s1, [sp, #4]
    f->invSampleRate = leaf->invSampleRate;
24012f56:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012f58:	ee27 1a81 	vmul.f32	s2, s15, s2
24012f5c:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
24012f60:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24012f64:	f001 fc1c 	bl	240147a0 <LEAF_clip>
24012f68:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
24012f6c:	f001 fe58 	bl	24014c20 <ftom>
    f->R2 =    1.0f/Q;
24012f70:	ee88 7a88 	vdiv.f32	s14, s17, s16
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012f74:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
24012f78:	edd4 7a06 	vldr	s15, [r4, #24]
24012f7c:	eddf 6a27 	vldr	s13, [pc, #156]	; 2401301c <tVZFilterHS_initToPool+0x110>
    f->cutoffMIDI = ftom(f->fc);
24012f80:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012f84:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
24012f88:	ed84 8a08 	vstr	s16, [r4, #32]
    f->s1    = 0.0f;
24012f8c:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
24012f90:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012f94:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
24012f98:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012f9c:	f007 f996 	bl	2401a2cc <tanf>
24012fa0:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012fa4:	eef0 0a49 	vmov.f32	s1, s18
24012fa8:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 24013020 <tVZFilterHS_initToPool+0x114>
24012fac:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 24013024 <tVZFilterHS_initToPool+0x118>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
24012fb0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24012fb4:	f001 fbf4 	bl	240147a0 <LEAF_clip>
24012fb8:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
24012fbc:	f001 fa8c 	bl	240144d8 <fastsqrtf>
24012fc0:	f001 fa8a 	bl	240144d8 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24012fc4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
24012fc8:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012fcc:	eeb0 6a68 	vmov.f32	s12, s17
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24012fd0:	ee60 7a27 	vmul.f32	s15, s0, s15
    if (leaf->sampleRate > 90000)
24012fd4:	eddf 6a14 	vldr	s13, [pc, #80]	; 24013028 <tVZFilterHS_initToPool+0x11c>
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
24012fd8:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24012fdc:	4a13      	ldr	r2, [pc, #76]	; (2401302c <tVZFilterHS_initToPool+0x120>)
    f->R2Plusg = f->R2+f->g;
24012fde:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24012fe2:	edc4 7a03 	vstr	s15, [r4, #12]
    	f->table = __filterTanhTable_48000;
24012fe6:	4b12      	ldr	r3, [pc, #72]	; (24013030 <tVZFilterHS_initToPool+0x124>)
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012fe8:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
24012fec:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24012ff0:	eec8 7a86 	vdiv.f32	s15, s17, s12
24012ff4:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
24012ff8:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
24012ffc:	eef4 7ae6 	vcmpe.f32	s15, s13
24013000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013004:	bfd8      	it	le
24013006:	4613      	movle	r3, r2
24013008:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
2401300a:	b002      	add	sp, #8
2401300c:	ecbd 8b04 	vpop	{d8-d9}
24013010:	bd70      	pop	{r4, r5, r6, pc}
24013012:	bf00      	nop
24013014:	473b8000 	.word	0x473b8000
24013018:	00000000 	.word	0x00000000
2401301c:	40490fdb 	.word	0x40490fdb
24013020:	457a0000 	.word	0x457a0000
24013024:	358637bd 	.word	0x358637bd
24013028:	47afc800 	.word	0x47afc800
2401302c:	2401ccb0 	.word	0x2401ccb0
24013030:	24020cb0 	.word	0x24020cb0

24013034 <tVZFilterHS_init>:
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
24013034:	3118      	adds	r1, #24
24013036:	f7ff bf69 	b.w	24012f0c <tVZFilterHS_initToPool>
2401303a:	bf00      	nop

2401303c <tVZFilterHS_setSampleRate>:

void    tVZFilterHS_setSampleRate  (tVZFilterHS* const vf, Lfloat sampleRate)
{
        _tVZFilterHS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
2401303c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
24013040:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 24013074 <tVZFilterHS_setSampleRate+0x38>
    if (sampleRate > 90000)
24013044:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24013078 <tVZFilterHS_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
24013048:	490c      	ldr	r1, [pc, #48]	; (2401307c <tVZFilterHS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
2401304a:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterHS* f = *vf;
2401304e:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
24013050:	4a0b      	ldr	r2, [pc, #44]	; (24013080 <tVZFilterHS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
24013052:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
24013056:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
2401305a:	eeb4 0ae6 	vcmpe.f32	s0, s13
2401305e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013062:	bfd8      	it	le
24013064:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
24013066:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
2401306a:	641a      	str	r2, [r3, #64]	; 0x40
2401306c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
          }
}
24013070:	4770      	bx	lr
24013072:	bf00      	nop
24013074:	473b8000 	.word	0x473b8000
24013078:	47afc800 	.word	0x47afc800
2401307c:	2401ccb0 	.word	0x2401ccb0
24013080:	24020cb0 	.word	0x24020cb0

24013084 <tVZFilterHS_tick>:
Lfloat   tVZFilterHS_tick               (tVZFilterHS* const vf, Lfloat input)
{
        _tVZFilterHS* f = *vf;
24013084:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
24013086:	edd3 6a02 	vldr	s13, [r3, #8]
2401308a:	ed93 7a01 	vldr	s14, [r3, #4]
2401308e:	ee70 7a66 	vsub.f32	s15, s0, s13
24013092:	ed93 4a0a 	vldr	s8, [r3, #40]	; 0x28
24013096:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
2401309a:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
2401309e:	eee4 7a47 	vfms.f32	s15, s8, s14
240130a2:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + f->G*yH;
240130a6:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
240130aa:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
240130ae:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
240130b2:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240130b6:	eeb0 5a47 	vmov.f32	s10, s14
240130ba:	eea6 5a27 	vfma.f32	s10, s12, s15
240130be:	eee4 7a87 	vfma.f32	s15, s9, s14
    yL = v2 + f->s2;
240130c2:	eeb0 0a66 	vmov.f32	s0, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
240130c6:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240130ca:	ed83 5a01 	vstr	s10, [r3, #4]
}
240130ce:	eea5 0aa7 	vfma.f32	s0, s11, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
240130d2:	edc3 6a02 	vstr	s13, [r3, #8]
}
240130d6:	4770      	bx	lr

240130d8 <tVZFilterHS_setFreqFast>:

void    tVZFilterHS_setFreqFast           (tVZFilterHS* const vf, Lfloat cutoff)
{
        _tVZFilterHS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
240130d8:	eddf 7a21 	vldr	s15, [pc, #132]	; 24013160 <tVZFilterHS_setFreqFast+0x88>
240130dc:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240130e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
240130e4:	6803      	ldr	r3, [r0, #0]
        cutoff *= 30.567164179104478f;
240130e6:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240130ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
240130ec:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
        int32_t intVer = (int32_t)cutoff;
240130f0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        f->cutoffMIDI = cutoff;
240130f4:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240130f8:	ee76 5a67 	vsub.f32	s11, s12, s15

    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
240130fc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
24013100:	ee16 2a90 	vmov	r2, s13
    
    f->R2Plusg = f->R2+f->g;
24013104:	edd3 6a04 	vldr	s13, [r3, #16]
24013108:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
2401310c:	4562      	cmp	r2, ip
2401310e:	bfa8      	it	ge
24013110:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013112:	ee05 2a10 	vmov	s10, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013116:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401311a:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
2401311e:	ed92 4a01 	vldr	s8, [r2, #4]
24013122:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013126:	ee77 7ac5 	vsub.f32	s15, s15, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
2401312a:	ee75 5a85 	vadd.f32	s11, s11, s10
2401312e:	ee67 7aa3 	vmul.f32	s15, s15, s7
24013132:	ee67 7a84 	vmul.f32	s15, s15, s8
24013136:	eee4 7aa5 	vfma.f32	s15, s9, s11
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
2401313a:	ee27 7a87 	vmul.f32	s14, s15, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
2401313e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
24013142:	ee77 7a26 	vadd.f32	s15, s14, s13
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24013146:	ed83 7a03 	vstr	s14, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401314a:	eef0 6a46 	vmov.f32	s13, s12
    f->R2Plusg = f->R2+f->g;
2401314e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013152:	eee7 6a27 	vfma.f32	s13, s14, s15
24013156:	eec6 7a26 	vdiv.f32	s15, s12, s13
2401315a:	edc3 7a05 	vstr	s15, [r3, #20]
}
2401315e:	4770      	bx	lr
24013160:	41f4898d 	.word	0x41f4898d

24013164 <tVZFilterHS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterHS_setGain                  (tVZFilterHS* const vf, Lfloat gain)
{
24013164:	b510      	push	{r4, lr}
        _tVZFilterHS* f = *vf;
24013166:	6804      	ldr	r4, [r0, #0]
{
24013168:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
2401316c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 240131b8 <tVZFilterHS_setGain+0x54>
24013170:	ed9f 0a12 	vldr	s0, [pc, #72]	; 240131bc <tVZFilterHS_setGain+0x58>
24013174:	f001 fb14 	bl	240147a0 <LEAF_clip>
24013178:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
2401317c:	f001 f9ac 	bl	240144d8 <fastsqrtf>
24013180:	f001 f9aa 	bl	240144d8 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24013184:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013188:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
2401318c:	ed94 7a04 	vldr	s14, [r4, #16]
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
24013190:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
24013194:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013198:	eeb0 6a66 	vmov.f32	s12, s13
    f->R2Plusg = f->R2+f->g;
2401319c:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
240131a0:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240131a4:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
240131a8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240131ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
240131b0:	edc4 7a05 	vstr	s15, [r4, #20]
}
240131b4:	bd10      	pop	{r4, pc}
240131b6:	bf00      	nop
240131b8:	457a0000 	.word	0x457a0000
240131bc:	358637bd 	.word	0x358637bd

240131c0 <tVZFilterHS_setResonance>:

void    tVZFilterHS_setResonance                (tVZFilterHS* const vf, Lfloat res)
{
        _tVZFilterHS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
240131c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
240131c4:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
240131c6:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
240131ca:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
240131ce:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
240131d2:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
240131d6:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240131da:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
240131de:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240131e2:	eea6 6a87 	vfma.f32	s12, s13, s14
240131e6:	ee87 7a86 	vdiv.f32	s14, s15, s12
240131ea:	ed83 7a05 	vstr	s14, [r3, #20]
}
240131ee:	4770      	bx	lr

240131f0 <tVZFilterBell_initToPool>:
{
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
}

void    tVZFilterBell_initToPool     (tVZFilterBell* const vf, Lfloat freq, Lfloat BW, Lfloat gain, tMempool* const mp)
{
240131f0:	b570      	push	{r4, r5, r6, lr}
240131f2:	ed2d 8b06 	vpush	{d8-d10}
    _tMempool* m = *mp;
240131f6:	680d      	ldr	r5, [r1, #0]
{
240131f8:	4606      	mov	r6, r0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
240131fa:	2040      	movs	r0, #64	; 0x40
{
240131fc:	eeb0 8a40 	vmov.f32	s16, s0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
24013200:	4629      	mov	r1, r5
{
24013202:	eef0 9a60 	vmov.f32	s19, s1
24013206:	eeb0 aa41 	vmov.f32	s20, s2
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
2401320a:	f001 fd45 	bl	24014c98 <mpool_alloc>
2401320e:	6030      	str	r0, [r6, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
24013210:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    f->mempool = m;
24013214:	6005      	str	r5, [r0, #0]
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
24013216:	4604      	mov	r4, r0
    LEAF* leaf = f->mempool->leaf;
24013218:	686d      	ldr	r5, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401321a:	eef0 0a48 	vmov.f32	s1, s16
    f->sampRatio = 48000.0f / f->sampleRate;
2401321e:	eddf 6a48 	vldr	s13, [pc, #288]	; 24013340 <tVZFilterBell_initToPool+0x150>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013222:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
24013226:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401322a:	ed9f 9a46 	vldr	s18, [pc, #280]	; 24013344 <tVZFilterBell_initToPool+0x154>
    f->sampRatio = 48000.0f / f->sampleRate;
2401322e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
24013232:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
    f->invSampleRate = leaf->invSampleRate;
24013236:	686b      	ldr	r3, [r5, #4]
    f->g = tanf(PI * freq * f->invSampleRate);
24013238:	eddf aa43 	vldr	s21, [pc, #268]	; 24013348 <tVZFilterBell_initToPool+0x158>
    f->invSampleRate = leaf->invSampleRate;
2401323c:	62c3      	str	r3, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401323e:	ee27 1a81 	vmul.f32	s2, s15, s2
24013242:	eeb0 0a49 	vmov.f32	s0, s18
    f->g = tanf(PI * freq * f->invSampleRate);
24013246:	ee28 8a2a 	vmul.f32	s16, s16, s21
    f->sampRatio = 48000.0f / f->sampleRate;
2401324a:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
2401324e:	f001 faa7 	bl	240147a0 <LEAF_clip>
24013252:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
24013256:	f001 fce3 	bl	24014c20 <ftom>
2401325a:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
2401325e:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 2401334c <tVZFilterBell_initToPool+0x15c>
24013262:	eef0 0a4a 	vmov.f32	s1, s20
    f->B = BW;
24013266:	edc4 9a08 	vstr	s19, [r4, #32]
    f->cutoffMIDI = ftom(f->fc);
2401326a:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    f->s1    = 0.0f;
2401326e:	ed84 9a01 	vstr	s18, [r4, #4]
    f->s2   = 0.0f;
24013272:	ed84 9a02 	vstr	s18, [r4, #8]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24013276:	ed9f 0a36 	vldr	s0, [pc, #216]	; 24013350 <tVZFilterBell_initToPool+0x160>
2401327a:	f001 fa91 	bl	240147a0 <LEAF_clip>
    f->g = tanf(PI * freq * f->invSampleRate);
2401327e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24013282:	ed84 0a07 	vstr	s0, [r4, #28]
    f->g = tanf(PI * freq * f->invSampleRate);
24013286:	ee28 0a27 	vmul.f32	s0, s16, s15
2401328a:	f007 f81f 	bl	2401a2cc <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2401328e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    f->g = tanf(PI * freq * f->invSampleRate);
24013292:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24013296:	edd4 0a08 	vldr	s1, [r4, #32]
2401329a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
2401329e:	ed94 8a06 	vldr	s16, [r4, #24]
240132a2:	ee60 0aa7 	vmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
240132a6:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240132aa:	f001 f9eb 	bl	24014684 <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
240132ae:	ee20 0a2a 	vmul.f32	s0, s0, s21
240132b2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
240132b6:	ee20 0a08 	vmul.f32	s0, s0, s16
240132ba:	ee20 0a27 	vmul.f32	s0, s0, s15
240132be:	f001 f8bd 	bl	2401443c <fastertanf>
    Lfloat r  = f->g/wl;
240132c2:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240132c6:	eeb0 5a68 	vmov.f32	s10, s17
240132ca:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat r  = f->g/wl;
240132ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240132d2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
240132d6:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
240132da:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240132de:	eea7 5aa7 	vfma.f32	s10, s15, s15
    f->rToUse = r;
240132e2:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240132e6:	ee85 7a27 	vdiv.f32	s14, s10, s15
240132ea:	ee77 7a65 	vsub.f32	s15, s14, s11
240132ee:	ee67 7a86 	vmul.f32	s15, s15, s12
240132f2:	ee87 0aa6 	vdiv.f32	s0, s15, s13
240132f6:	f001 f8ef 	bl	240144d8 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
240132fa:	ed94 7a03 	vldr	s14, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
240132fe:	eddf 6a15 	vldr	s13, [pc, #84]	; 24013354 <tVZFilterBell_initToPool+0x164>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24013302:	4a15      	ldr	r2, [pc, #84]	; (24013358 <tVZFilterBell_initToPool+0x168>)
24013304:	4b15      	ldr	r3, [pc, #84]	; (2401335c <tVZFilterBell_initToPool+0x16c>)
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013306:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401330a:	eeb0 6a68 	vmov.f32	s12, s17
    f->R2Plusg = f->R2+f->g;
2401330e:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013312:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013316:	eea7 6a27 	vfma.f32	s12, s14, s15
    f->R2Plusg = f->R2+f->g;
2401331a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401331e:	eec8 7a86 	vdiv.f32	s15, s17, s12
24013322:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
24013326:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
2401332a:	eef4 7ae6 	vcmpe.f32	s15, s13
2401332e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013332:	bfd8      	it	le
24013334:	4613      	movle	r3, r2
24013336:	63a3      	str	r3, [r4, #56]	; 0x38
    }
}
24013338:	ecbd 8b06 	vpop	{d8-d10}
2401333c:	bd70      	pop	{r4, r5, r6, pc}
2401333e:	bf00      	nop
24013340:	473b8000 	.word	0x473b8000
24013344:	00000000 	.word	0x00000000
24013348:	40490fdb 	.word	0x40490fdb
2401334c:	457a0000 	.word	0x457a0000
24013350:	358637bd 	.word	0x358637bd
24013354:	47afc800 	.word	0x47afc800
24013358:	2401ccb0 	.word	0x2401ccb0
2401335c:	24020cb0 	.word	0x24020cb0

24013360 <tVZFilterBell_init>:
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
24013360:	3118      	adds	r1, #24
24013362:	f7ff bf45 	b.w	240131f0 <tVZFilterBell_initToPool>
24013366:	bf00      	nop

24013368 <tVZFilterBell_setSampleRate>:

void    tVZFilterBell_setSampleRate  (tVZFilterBell* const vf, Lfloat sampleRate)
{
        _tVZFilterBell* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
24013368:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
2401336c:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 240133a0 <tVZFilterBell_setSampleRate+0x38>
    if (sampleRate > 90000)
24013370:	eddf 6a0c 	vldr	s13, [pc, #48]	; 240133a4 <tVZFilterBell_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
24013374:	490c      	ldr	r1, [pc, #48]	; (240133a8 <tVZFilterBell_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
24013376:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterBell* f = *vf;
2401337a:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
2401337c:	4a0b      	ldr	r2, [pc, #44]	; (240133ac <tVZFilterBell_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
2401337e:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    f->sampRatio = 48000.0f / f->sampleRate;
24013382:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
24013386:	eeb4 0ae6 	vcmpe.f32	s0, s13
2401338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401338e:	bfd8      	it	le
24013390:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
24013392:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
24013396:	639a      	str	r2, [r3, #56]	; 0x38
24013398:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
          }
}
2401339c:	4770      	bx	lr
2401339e:	bf00      	nop
240133a0:	473b8000 	.word	0x473b8000
240133a4:	47afc800 	.word	0x47afc800
240133a8:	2401ccb0 	.word	0x2401ccb0
240133ac:	24020cb0 	.word	0x24020cb0

240133b0 <tVZFilterBell_tick>:
Lfloat   tVZFilterBell_tick               (tVZFilterBell* const vf, Lfloat input)
{
        _tVZFilterBell* f = *vf;
240133b0:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
240133b2:	edd3 6a02 	vldr	s13, [r3, #8]
240133b6:	ed93 7a01 	vldr	s14, [r3, #4]
240133ba:	ee70 7a66 	vsub.f32	s15, s0, s13
240133be:	ed93 4a09 	vldr	s8, [r3, #36]	; 0x24
240133c2:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
240133c6:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
240133ca:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + yH;
240133ce:	edd3 5a04 	vldr	s11, [r3, #16]
240133d2:	edd3 4a07 	vldr	s9, [r3, #28]
240133d6:	ee65 5aa4 	vmul.f32	s11, s11, s9
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
240133da:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
240133de:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
240133e2:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240133e6:	eeb0 5a47 	vmov.f32	s10, s14
240133ea:	eea6 5a27 	vfma.f32	s10, s12, s15
240133ee:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
240133f2:	eef0 5a66 	vmov.f32	s11, s13
240133f6:	eee6 5a07 	vfma.f32	s11, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
240133fa:	ed83 5a01 	vstr	s10, [r3, #4]
}
240133fe:	ee36 0aa7 	vadd.f32	s0, s13, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
24013402:	edc3 5a02 	vstr	s11, [r3, #8]
}
24013406:	4770      	bx	lr

24013408 <tVZFilterBell_setBandwidth>:


               
void    tVZFilterBell_setBandwidth           (tVZFilterBell* const vf, Lfloat bandWidth)
{
24013408:	eef0 7a40 	vmov.f32	s15, s0
        _tVZFilterBell* f = *vf;
    f->B = bandWidth;
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
2401340c:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
24013410:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
{
24013414:	b510      	push	{r4, lr}
        _tVZFilterBell* f = *vf;
24013416:	6804      	ldr	r4, [r0, #0]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24013418:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
2401341c:	ed2d 8b02 	vpush	{d8}
    f->B = bandWidth;
24013420:	edc4 7a08 	vstr	s15, [r4, #32]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
24013424:	ed94 8a06 	vldr	s16, [r4, #24]
24013428:	f001 f92c 	bl	24014684 <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
2401342c:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
24013430:	eddf 7a17 	vldr	s15, [pc, #92]	; 24013490 <tVZFilterBell_setBandwidth+0x88>
24013434:	ee28 8a07 	vmul.f32	s16, s16, s14
24013438:	ee28 8a27 	vmul.f32	s16, s16, s15
2401343c:	ee28 0a00 	vmul.f32	s0, s16, s0
24013440:	f000 fffc 	bl	2401443c <fastertanf>
    Lfloat r  = f->g/wl;
24013444:	edd4 6a03 	vldr	s13, [r4, #12]
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013448:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat r  = f->g/wl;
2401344c:	eec6 7a80 	vdiv.f32	s15, s13, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013450:	ed94 0a07 	vldr	s0, [r4, #28]
24013454:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24013458:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
2401345c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013460:	eea7 7aa7 	vfma.f32	s14, s15, s15
    f->rToUse = r;
24013464:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013468:	eef0 6a47 	vmov.f32	s13, s14
2401346c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24013470:	ee77 7a65 	vsub.f32	s15, s14, s11
24013474:	ee67 7a86 	vmul.f32	s15, s15, s12
24013478:	ee87 0a80 	vdiv.f32	s0, s15, s0
2401347c:	f001 f82c 	bl	240144d8 <fastsqrtf>
24013480:	ee30 0a00 	vadd.f32	s0, s0, s0
24013484:	ed84 0a04 	vstr	s0, [r4, #16]
}
24013488:	ecbd 8b02 	vpop	{d8}
2401348c:	bd10      	pop	{r4, pc}
2401348e:	bf00      	nop
24013490:	40490fdb 	.word	0x40490fdb

24013494 <tVZFilterBell_setFreq>:
void    tVZFilterBell_setFreq           (tVZFilterBell* const vf, Lfloat freq)
{
24013494:	b510      	push	{r4, lr}
24013496:	ed2d 8b02 	vpush	{d8}
2401349a:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 24013548 <tVZFilterBell_setFreq+0xb4>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401349e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
240134a2:	6804      	ldr	r4, [r0, #0]
    f->fc = freq;
240134a4:	ee20 8a08 	vmul.f32	s16, s0, s16
    f->g = tanf(PI * freq * f->invSampleRate);
240134a8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->fc = freq;
240134ac:	ed84 0a06 	vstr	s0, [r4, #24]
    f->g = tanf(PI * freq * f->invSampleRate);
240134b0:	ee28 0a27 	vmul.f32	s0, s16, s15
240134b4:	f006 ff0a 	bl	2401a2cc <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240134b8:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    f->g = tanf(PI * freq * f->invSampleRate);
240134bc:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240134c0:	edd4 0a08 	vldr	s1, [r4, #32]
240134c4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
240134c8:	ee60 0aa7 	vmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
240134cc:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
240134d0:	f001 f8d8 	bl	24014684 <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
240134d4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
240134d8:	ee28 8a27 	vmul.f32	s16, s16, s15
240134dc:	ee28 0a00 	vmul.f32	s0, s16, s0
240134e0:	f000 ffac 	bl	2401443c <fastertanf>
    Lfloat r  = f->g/wl;
240134e4:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240134e8:	eeb0 5a68 	vmov.f32	s10, s17
240134ec:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat r  = f->g/wl;
240134f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240134f4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
240134f8:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
240134fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013500:	eea7 5aa7 	vfma.f32	s10, s15, s15
    f->rToUse = r;
24013504:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013508:	ee85 7a27 	vdiv.f32	s14, s10, s15
2401350c:	ee77 7a65 	vsub.f32	s15, s14, s11
24013510:	ee67 7a86 	vmul.f32	s15, s15, s12
24013514:	ee87 0aa6 	vdiv.f32	s0, s15, s13
24013518:	f000 ffde 	bl	240144d8 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
2401351c:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013520:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013524:	eef0 6a68 	vmov.f32	s13, s17
    f->R2Plusg = f->R2+f->g;
24013528:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401352c:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013530:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
24013534:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013538:	eec8 7aa6 	vdiv.f32	s15, s17, s13
2401353c:	edc4 7a05 	vstr	s15, [r4, #20]
}
24013540:	ecbd 8b02 	vpop	{d8}
24013544:	bd10      	pop	{r4, pc}
24013546:	bf00      	nop
24013548:	40490fdb 	.word	0x40490fdb

2401354c <tVZFilterBell_setFreqFast>:

void    tVZFilterBell_setFreqFast           (tVZFilterBell* const vf, Lfloat cutoff)
{
    _tVZFilterBell* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
2401354c:	eddf 7a43 	vldr	s15, [pc, #268]	; 2401365c <tVZFilterBell_setFreqFast+0x110>
	{
		intVer = 0;
	}
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
24013550:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
24013554:	f640 7cfe 	movw	ip, #4094	; 0xffe

    Lfloat r  = f->g/gLower;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013558:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    cutoff *= 30.567164179104478f;
2401355c:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013560:	eef5 4a00 	vmov.f32	s9, #80	; 0x3e800000  0.250
	int32_t intVer = (int32_t)cutoff;
24013564:	eebd 7ae7 	vcvt.s32.f32	s14, s15
{
24013568:	b510      	push	{r4, lr}
    _tVZFilterBell* f = *vf;
2401356a:	6804      	ldr	r4, [r0, #0]
	int32_t intVer = (int32_t)cutoff;
2401356c:	ee17 3a10 	vmov	r3, s14
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
24013570:	eeb0 7a67 	vmov.f32	s14, s15
24013574:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
{
24013578:	ed2d 8b02 	vpush	{d8}
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
2401357c:	ed94 6a08 	vldr	s12, [r4, #32]
24013580:	4563      	cmp	r3, ip
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013582:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
24013586:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
24013588:	eea6 7a26 	vfma.f32	s14, s12, s13
2401358c:	bfa8      	it	ge
2401358e:	4663      	movge	r3, ip
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013590:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013594:	ee05 3a10 	vmov	s10, r3
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
24013598:	ee38 6a67 	vsub.f32	s12, s16, s15
2401359c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    f->cutoffMIDI = cutoff;
240135a0:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240135a4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
240135a8:	ed94 0a07 	vldr	s0, [r4, #28]
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240135ac:	ed93 3a01 	vldr	s6, [r3, #4]
	intVer = (int32_t)fl;
240135b0:	eefd 6ac7 	vcvt.s32.f32	s13, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240135b4:	edd3 3a00 	vldr	s7, [r3]
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
240135b8:	ee77 7ac5 	vsub.f32	s15, s15, s10
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240135bc:	ee36 6a05 	vadd.f32	s12, s12, s10
	intVer = (int32_t)fl;
240135c0:	ee16 2a90 	vmov	r2, s13
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240135c4:	ee78 6a47 	vsub.f32	s13, s16, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240135c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
240135cc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
240135d0:	4562      	cmp	r2, ip
240135d2:	ee67 7a83 	vmul.f32	s15, s15, s6
240135d6:	bfa8      	it	ge
240135d8:	4662      	movge	r2, ip
240135da:	eee3 7a86 	vfma.f32	s15, s7, s12
	LfloatVer = fl - (Lfloat)intVer;
240135de:	ee05 2a10 	vmov	s10, r2
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240135e2:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	LfloatVer = fl - (Lfloat)intVer;
240135e6:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
240135ea:	ee37 7a45 	vsub.f32	s14, s14, s10
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240135ee:	edc4 7a03 	vstr	s15, [r4, #12]
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
240135f2:	ee76 6a85 	vadd.f32	s13, s13, s10
240135f6:	ed93 6a00 	vldr	s12, [r3]
240135fa:	ee27 7a25 	vmul.f32	s14, s14, s11
240135fe:	edd3 5a01 	vldr	s11, [r3, #4]
24013602:	ee27 7a25 	vmul.f32	s14, s14, s11
24013606:	eea6 7a26 	vfma.f32	s14, s12, s13
    Lfloat r  = f->g/gLower;
2401360a:	eec7 6a87 	vdiv.f32	s13, s15, s14
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
2401360e:	ee66 7aa6 	vmul.f32	s15, s13, s13
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013612:	eef0 6a48 	vmov.f32	s13, s16
    f->rToUse = r;
24013616:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
2401361a:	eee7 6aa7 	vfma.f32	s13, s15, s15
2401361e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24013622:	ee77 7a44 	vsub.f32	s15, s14, s8
24013626:	ee67 7aa4 	vmul.f32	s15, s15, s9
2401362a:	ee87 0a80 	vdiv.f32	s0, s15, s0
2401362e:	f000 ff53 	bl	240144d8 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
24013632:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013636:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401363a:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
2401363e:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
24013642:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
24013646:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
2401364a:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
2401364e:	eec8 7a26 	vdiv.f32	s15, s16, s13
24013652:	edc4 7a05 	vstr	s15, [r4, #20]
}
24013656:	ecbd 8b02 	vpop	{d8}
2401365a:	bd10      	pop	{r4, pc}
2401365c:	41f4898d 	.word	0x41f4898d

24013660 <tVZFilterBell_setGain>:

void    tVZFilterBell_setGain                  (tVZFilterBell* const vf, Lfloat gain)
{
24013660:	b510      	push	{r4, lr}
24013662:	ed2d 8b02 	vpush	{d8}
    _tVZFilterBell* f = *vf;
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24013666:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
2401366a:	6804      	ldr	r4, [r0, #0]
{
2401366c:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
24013670:	ed9f 1a18 	vldr	s2, [pc, #96]	; 240136d4 <tVZFilterBell_setGain+0x74>
24013674:	ed9f 0a18 	vldr	s0, [pc, #96]	; 240136d8 <tVZFilterBell_setGain+0x78>
24013678:	f001 f892 	bl	240147a0 <LEAF_clip>
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
2401367c:	eef0 5a48 	vmov.f32	s11, s16
24013680:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
24013684:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
24013688:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
2401368c:	ed84 0a07 	vstr	s0, [r4, #28]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
24013690:	eee7 5a07 	vfma.f32	s11, s14, s14
24013694:	eec5 7a87 	vdiv.f32	s15, s11, s14
24013698:	ee77 7ac6 	vsub.f32	s15, s15, s12
2401369c:	ee67 7aa6 	vmul.f32	s15, s15, s13
240136a0:	ee87 0a80 	vdiv.f32	s0, s15, s0
240136a4:	f000 ff18 	bl	240144d8 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
240136a8:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
240136ac:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240136b0:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
240136b4:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
240136b8:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240136bc:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
240136c0:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
240136c4:	eec8 7a26 	vdiv.f32	s15, s16, s13
240136c8:	edc4 7a05 	vstr	s15, [r4, #20]
}
240136cc:	ecbd 8b02 	vpop	{d8}
240136d0:	bd10      	pop	{r4, pc}
240136d2:	bf00      	nop
240136d4:	457a0000 	.word	0x457a0000
240136d8:	358637bd 	.word	0x358637bd

240136dc <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
240136dc:	b570      	push	{r4, r5, r6, lr}
240136de:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
240136e2:	698d      	ldr	r5, [r1, #24]
{
240136e4:	eeb0 8a40 	vmov.f32	s16, s0
240136e8:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
240136ea:	2048      	movs	r0, #72	; 0x48
240136ec:	4629      	mov	r1, r5
{
240136ee:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
240136f2:	f001 fad1 	bl	24014c98 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
240136f6:	ed9f 0a27 	vldr	s0, [pc, #156]	; 24013794 <tDiodeFilter_init+0xb8>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
240136fa:	6030      	str	r0, [r6, #0]
240136fc:	4604      	mov	r4, r0
    f->mempool = m;
240136fe:	6005      	str	r5, [r0, #0]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24013700:	ee28 0a00 	vmul.f32	s0, s16, s0
    LEAF* leaf = f->mempool->leaf;
24013704:	686d      	ldr	r5, [r5, #4]
    f->invSampleRate = leaf->invSampleRate;
24013706:	edd5 7a01 	vldr	s15, [r5, #4]
    f->cutoff = cutoff;
2401370a:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
2401370e:	ee20 0a27 	vmul.f32	s0, s0, s15
    f->invSampleRate = leaf->invSampleRate;
24013712:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24013716:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
2401371a:	f006 fe6d 	bl	2401a3f8 <tan>
2401371e:	eef7 7bc0 	vcvt.f32.f64	s15, d0
    f->cutoffMIDI = ftom(cutoff);
24013722:	eeb0 0a48 	vmov.f32	s0, s16
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
24013726:	edc4 7a02 	vstr	s15, [r4, #8]
    f->cutoffMIDI = ftom(cutoff);
2401372a:	f001 fa79 	bl	24014c20 <ftom>
    f->r = (7.f * resonance + 0.5f);
2401372e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24013732:	eeb1 6a0c 	vmov.f32	s12, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
24013736:	4b18      	ldr	r3, [pc, #96]	; (24013798 <tDiodeFilter_init+0xbc>)
    f->gamma = f->Vt*f->n;
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
24013738:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->zi = 0.0f; //previous input value
2401373c:	2100      	movs	r1, #0
    f->r = (7.f * resonance + 0.5f);
2401373e:	eef0 6a67 	vmov.f32	s13, s15
    f->n = 1.836f;
24013742:	6163      	str	r3, [r4, #20]
    f->gamma = f->Vt*f->n;
24013744:	4b15      	ldr	r3, [pc, #84]	; (2401379c <tDiodeFilter_init+0xc0>)
    f->zi = 0.0f; //previous input value
24013746:	61e1      	str	r1, [r4, #28]
    f->r = (7.f * resonance + 0.5f);
24013748:	eee8 6a86 	vfma.f32	s13, s17, s12
    f->g0inv = 1.f/(2.f*f->Vt);
2401374c:	6222      	str	r2, [r4, #32]
    f->gamma = f->Vt*f->n;
2401374e:	61a3      	str	r3, [r4, #24]
    f->g1inv = 1.f/(2.f*f->gamma);
24013750:	4913      	ldr	r1, [pc, #76]	; (240137a0 <tDiodeFilter_init+0xc4>)
    f->g2inv = 1.f/(6.f*f->gamma);
24013752:	4a14      	ldr	r2, [pc, #80]	; (240137a4 <tDiodeFilter_init+0xc8>)
    f->s0 = 0.01f;
24013754:	4b14      	ldr	r3, [pc, #80]	; (240137a8 <tDiodeFilter_init+0xcc>)
    f->g1inv = 1.f/(2.f*f->gamma);
24013756:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
24013758:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s0 = 0.01f;
2401375a:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->s2 = 0.03f;
2401375c:	4a13      	ldr	r2, [pc, #76]	; (240137ac <tDiodeFilter_init+0xd0>)
    f->s3 = 0.04f;
2401375e:	4b14      	ldr	r3, [pc, #80]	; (240137b0 <tDiodeFilter_init+0xd4>)
    f->s1 = 0.02f;
24013760:	4914      	ldr	r1, [pc, #80]	; (240137b4 <tDiodeFilter_init+0xd8>)
    f->s2 = 0.03f;
24013762:	6362      	str	r2, [r4, #52]	; 0x34
    f->s3 = 0.04f;
24013764:	63a3      	str	r3, [r4, #56]	; 0x38
    f->cutoffMIDI = ftom(cutoff);
24013766:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->Vt = 0.5f;
2401376a:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
2401376e:	edc4 6a03 	vstr	s13, [r4, #12]
    f->s1 = 0.02f;
24013772:	6321      	str	r1, [r4, #48]	; 0x30
    if (leaf->sampleRate > 90000)
24013774:	ed9f 7a10 	vldr	s14, [pc, #64]	; 240137b8 <tDiodeFilter_init+0xdc>
24013778:	edd5 7a00 	vldr	s15, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
2401377c:	4a0f      	ldr	r2, [pc, #60]	; (240137bc <tDiodeFilter_init+0xe0>)
2401377e:	eef4 7ac7 	vcmpe.f32	s15, s14
24013782:	4b0f      	ldr	r3, [pc, #60]	; (240137c0 <tDiodeFilter_init+0xe4>)
24013784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013788:	bfd8      	it	le
2401378a:	4613      	movle	r3, r2
2401378c:	6423      	str	r3, [r4, #64]	; 0x40
}
2401378e:	ecbd 8b02 	vpop	{d8}
24013792:	bd70      	pop	{r4, r5, r6, pc}
24013794:	40490fdb 	.word	0x40490fdb
24013798:	3feb020c 	.word	0x3feb020c
2401379c:	3f6b020c 	.word	0x3f6b020c
240137a0:	3f0b6efd 	.word	0x3f0b6efd
240137a4:	3e39e952 	.word	0x3e39e952
240137a8:	3c23d70a 	.word	0x3c23d70a
240137ac:	3cf5c28f 	.word	0x3cf5c28f
240137b0:	3d23d70a 	.word	0x3d23d70a
240137b4:	3ca3d70a 	.word	0x3ca3d70a
240137b8:	47afc800 	.word	0x47afc800
240137bc:	2401ccb0 	.word	0x2401ccb0
240137c0:	24020cb0 	.word	0x24020cb0

240137c4 <tDiodeFilter_tick>:
}

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
Lfloat   tDiodeFilter_tick               (tDiodeFilter* const vf, Lfloat in)
{
240137c4:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
240137c6:	6804      	ldr	r4, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240137c8:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240137cc:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
240137d0:	eddf 6aee 	vldr	s13, [pc, #952]	; 24013b8c <tDiodeFilter_tick+0x3c8>
    if (testVal!= 0.0f)
240137d4:	eddf 5aee 	vldr	s11, [pc, #952]	; 24013b90 <tDiodeFilter_tick+0x3cc>
{
240137d8:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240137dc:	ed94 4a03 	vldr	s8, [r4, #12]
{
240137e0:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240137e4:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
240137e8:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240137ec:	ee67 7a44 	vnmul.f32	s15, s14, s8
240137f0:	ed94 5a08 	vldr	s10, [r4, #32]
    Lfloat ih = 0.5f * (in + f->zi);
240137f4:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
240137f8:	ed94 2a02 	vldr	s4, [r4, #8]
240137fc:	eee6 7a23 	vfma.f32	s15, s12, s7
24013800:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat a = x*x;
24013804:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013808:	eee7 6aa4 	vfma.f32	s13, s15, s9
2401380c:	ee67 6aa6 	vmul.f32	s13, s15, s13
    if (testVal!= 0.0f)
24013810:	eef4 6a65 	vcmp.f32	s13, s11
24013814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013818:	f000 81aa 	beq.w	24013b70 <tDiodeFilter_tick+0x3ac>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401381c:	ed9f 6add 	vldr	s12, [pc, #884]	; 24013b94 <tDiodeFilter_tick+0x3d0>
24013820:	ee76 5a86 	vadd.f32	s11, s13, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013824:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013828:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401382c:	edd4 3a0b 	vldr	s7, [r4, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013830:	ee22 5a05 	vmul.f32	s10, s4, s10
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013834:	edd4 2a09 	vldr	s5, [r4, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
    
    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013838:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401383c:	ee70 6a63 	vsub.f32	s13, s0, s7
    return ((a + 105.0f)*a + 945.0f) / output;
24013840:	eddf 1ad4 	vldr	s3, [pc, #848]	; 24013b94 <tDiodeFilter_tick+0x3d0>
24013844:	eddf 4ad4 	vldr	s9, [pc, #848]	; 24013b98 <tDiodeFilter_tick+0x3d4>
    if (!isfinite(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24013848:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
2401384c:	eef0 0a61 	vmov.f32	s1, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013850:	ed9f 6ace 	vldr	s12, [pc, #824]	; 24013b8c <tDiodeFilter_tick+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
24013854:	ee77 4aa4 	vadd.f32	s9, s15, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013858:	ee66 6aa2 	vmul.f32	s13, s13, s5
    return ((a + 105.0f)*a + 945.0f) / output;
2401385c:	eee7 0aa4 	vfma.f32	s1, s15, s9
    if (testVal!= 0.0f)
24013860:	eddf 4acb 	vldr	s9, [pc, #812]	; 24013b90 <tDiodeFilter_tick+0x3cc>
    Lfloat a = x*x;
24013864:	ee66 6aa6 	vmul.f32	s13, s13, s13
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013868:	eef0 7a46 	vmov.f32	s15, s12
2401386c:	ed9f 6ac7 	vldr	s12, [pc, #796]	; 24013b8c <tDiodeFilter_tick+0x3c8>
24013870:	eee6 7a81 	vfma.f32	s15, s13, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24013874:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 24013b94 <tDiodeFilter_tick+0x3d0>
24013878:	ee80 3aa5 	vdiv.f32	s6, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401387c:	ee66 7aa7 	vmul.f32	s15, s13, s15
24013880:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
24013884:	eeb0 8a41 	vmov.f32	s16, s2
    if (testVal!= 0.0f)
24013888:	eef4 7a64 	vcmp.f32	s15, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2401388c:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
    if (testVal!= 0.0f)
24013890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013894:	bf18      	it	ne
24013896:	ee77 5aa1 	vaddne.f32	s11, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2401389a:	ee74 7ac0 	vsub.f32	s15, s9, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
2401389e:	ee23 3a05 	vmul.f32	s6, s6, s10
    return ((a + 105.0f)*a + 945.0f) / output;
240138a2:	ed9f 5abd 	vldr	s10, [pc, #756]	; 24013b98 <tDiodeFilter_tick+0x3d4>
    Lfloat output = 1.0f;
240138a6:	bf08      	it	eq
240138a8:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
240138ac:	ee67 7aa2 	vmul.f32	s15, s15, s5
    return ((a + 105.0f)*a + 945.0f) / output;
240138b0:	ee36 5a85 	vadd.f32	s10, s13, s10
240138b4:	ee62 1a22 	vmul.f32	s3, s4, s5
    Lfloat a = x*x;
240138b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
240138bc:	eea6 8a85 	vfma.f32	s16, s13, s10
240138c0:	ed9f 5ab5 	vldr	s10, [pc, #724]	; 24013b98 <tDiodeFilter_tick+0x3d4>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240138c4:	eea7 6aa0 	vfma.f32	s12, s15, s1
    return ((a + 105.0f)*a + 945.0f) / output;
240138c8:	ee37 5a85 	vadd.f32	s10, s15, s10
240138cc:	eec8 6a25 	vdiv.f32	s13, s16, s11
    if (testVal!= 0.0f)
240138d0:	eddf 5aaf 	vldr	s11, [pc, #700]	; 24013b90 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240138d4:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
240138d8:	eeb4 6a65 	vcmp.f32	s12, s11
240138dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
240138e0:	bf18      	it	ne
240138e2:	ee76 5a01 	vaddne.f32	s11, s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
240138e6:	ed9f 1aab 	vldr	s2, [pc, #684]	; 24013b94 <tDiodeFilter_tick+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
240138ea:	ee37 6a64 	vsub.f32	s12, s14, s9
    return ((a + 105.0f)*a + 945.0f) / output;
240138ee:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
240138f2:	bf08      	it	eq
240138f4:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
240138f8:	ee26 6a22 	vmul.f32	s12, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
240138fc:	eee7 0a85 	vfma.f32	s1, s15, s10
    if (testVal!= 0.0f)
24013900:	ed9f 5aa3 	vldr	s10, [pc, #652]	; 24013b90 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013904:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat a = x*x;
24013908:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
2401390c:	ee66 6aa1 	vmul.f32	s13, s13, s3
    return ((a + 105.0f)*a + 945.0f) / output;
24013910:	eec0 7aa5 	vdiv.f32	s15, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013914:	eddf 5a9d 	vldr	s11, [pc, #628]	; 24013b8c <tDiodeFilter_tick+0x3c8>
24013918:	eee6 5a22 	vfma.f32	s11, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
2401391c:	eddf 2a9d 	vldr	s5, [pc, #628]	; 24013b94 <tDiodeFilter_tick+0x3d0>
24013920:	eef0 0a62 	vmov.f32	s1, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013924:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
24013928:	eef4 5a45 	vcmp.f32	s11, s10
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
2401392c:	ee67 7aa1 	vmul.f32	s15, s15, s3
    if (testVal!= 0.0f)
24013930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013934:	bf18      	it	ne
24013936:	ee35 5a81 	vaddne.f32	s10, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
2401393a:	eddf 5a97 	vldr	s11, [pc, #604]	; 24013b98 <tDiodeFilter_tick+0x3d4>
    Lfloat output = 1.0f;
2401393e:	bf08      	it	eq
24013940:	eeb7 5a00 	vmoveq.f32	s10, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24013944:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
24013948:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
2401394c:	ee22 2a01 	vmul.f32	s4, s4, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24013950:	eee6 0a25 	vfma.f32	s1, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013954:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 24013b8c <tDiodeFilter_tick+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
24013958:	eec0 5a85 	vdiv.f32	s11, s1, s10
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
2401395c:	ee27 5a01 	vmul.f32	s10, s14, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013960:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
24013964:	ee37 1a00 	vadd.f32	s2, s14, s0
    Lfloat a = x*x;
24013968:	ee25 5a05 	vmul.f32	s10, s10, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401396c:	eea5 6a20 	vfma.f32	s12, s10, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24013970:	eddf 0a88 	vldr	s1, [pc, #544]	; 24013b94 <tDiodeFilter_tick+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24013974:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
24013978:	eddf 1a85 	vldr	s3, [pc, #532]	; 24013b90 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
2401397c:	ee26 6a05 	vmul.f32	s12, s12, s10
    if (testVal!= 0.0f)
24013980:	eeb4 6a61 	vcmp.f32	s12, s3
    return ((a + 105.0f)*a + 945.0f) / output;
24013984:	eddf 1a84 	vldr	s3, [pc, #528]	; 24013b98 <tDiodeFilter_tick+0x3d4>
24013988:	ee75 1a21 	vadd.f32	s3, s10, s3
    if (testVal!= 0.0f)
2401398c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
24013990:	eee5 0a21 	vfma.f32	s1, s10, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013994:	bf14      	ite	ne
24013996:	ee76 2a22 	vaddne.f32	s5, s12, s5
    Lfloat output = 1.0f;
2401399a:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
2401399e:	ee37 6a24 	vadd.f32	s12, s14, s9
240139a2:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
240139a6:	ee80 5aa2 	vdiv.f32	s10, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240139aa:	ee73 2aa4 	vadd.f32	s5, s7, s9
240139ae:	ee74 0a81 	vadd.f32	s1, s9, s2
240139b2:	ee72 2a81 	vadd.f32	s5, s5, s2
240139b6:	eeb0 1a60 	vmov.f32	s2, s1
240139ba:	eef0 0a61 	vmov.f32	s1, s3
240139be:	eee9 2a03 	vfma.f32	s5, s18, s6
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
240139c2:	ee25 5a02 	vmul.f32	s10, s10, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240139c6:	eea2 1aa6 	vfma.f32	s2, s5, s13
240139ca:	ee76 2a06 	vadd.f32	s5, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
240139ce:	eeb1 2a00 	vmov.f32	s4, #16	; 0x40800000  4.0
240139d2:	ee35 8a28 	vadd.f32	s16, s10, s17
240139d6:	eea6 6aa2 	vfma.f32	s12, s13, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
240139da:	ee67 2a26 	vmul.f32	s5, s14, s13
240139de:	eee5 0a21 	vfma.f32	s1, s10, s3
240139e2:	eea1 6a27 	vfma.f32	s12, s2, s15
240139e6:	eeb0 1a47 	vmov.f32	s2, s14
240139ea:	eea2 1aa1 	vfma.f32	s2, s5, s3
240139ee:	ee62 2aa8 	vmul.f32	s5, s5, s17
240139f2:	eee7 2a21 	vfma.f32	s5, s14, s3
240139f6:	eea2 1aa7 	vfma.f32	s2, s5, s15
240139fa:	eef0 2a41 	vmov.f32	s5, s2
240139fe:	eeb0 1a42 	vmov.f32	s2, s4
24013a02:	eee6 2a25 	vfma.f32	s5, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24013a06:	eea4 1a03 	vfma.f32	s2, s8, s6
24013a0a:	eeb0 6a42 	vmov.f32	s12, s4
24013a0e:	eea5 6a21 	vfma.f32	s12, s10, s3
24013a12:	ee35 2a01 	vadd.f32	s4, s10, s2
24013a16:	ee35 1a29 	vadd.f32	s2, s10, s19
24013a1a:	eea2 8a26 	vfma.f32	s16, s4, s13
24013a1e:	ee35 2a21 	vadd.f32	s4, s10, s3
24013a22:	eea6 2a26 	vfma.f32	s4, s12, s13
24013a26:	eeb0 6a45 	vmov.f32	s12, s10
24013a2a:	eea8 2a27 	vfma.f32	s4, s16, s15
24013a2e:	ee21 8a26 	vmul.f32	s16, s2, s13
24013a32:	eee8 0a28 	vfma.f32	s1, s16, s17
24013a36:	eea8 6a21 	vfma.f32	s12, s16, s3
24013a3a:	eea0 6aa7 	vfma.f32	s12, s1, s15
24013a3e:	eea2 6a25 	vfma.f32	s12, s4, s11
    if (!isfinite(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
24013a42:	eebf 2a00 	vmov.f32	s4, #240	; 0xbf800000 -1.0
24013a46:	eeb4 6a42 	vcmp.f32	s12, s4
24013a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (!isfinite(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
24013a4e:	eef5 6a40 	vcmp.f32	s13, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24013a52:	bf14      	ite	ne
24013a54:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
24013a58:	ed9f 6a50 	vldreq	s12, [pc, #320]	; 24013b9c <tDiodeFilter_tick+0x3d8>
    if (t1 == 0.0f)
24013a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
24013a60:	ee82 2a86 	vdiv.f32	s4, s5, s12
    if (t1 == 0.0f)
24013a64:	f000 808c 	beq.w	24013b80 <tDiodeFilter_tick+0x3bc>
24013a68:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
24013a6c:	ee76 1aa1 	vadd.f32	s3, s13, s3
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
24013a70:	eef5 7a40 	vcmp.f32	s15, #0.0
24013a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013a78:	d07d      	beq.n	24013b76 <tDiodeFilter_tick+0x3b2>
24013a7a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
24013a7e:	ee77 2aa2 	vadd.f32	s5, s15, s5
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
24013a82:	eef5 5a40 	vcmp.f32	s11, #0.0
    }
    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
    Lfloat xx = (in - f->r*y3);
24013a86:	ee24 aa02 	vmul.f32	s20, s8, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24013a8a:	eeb0 4a47 	vmov.f32	s8, s14
    if (t3 == 0.0f)
24013a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013a92:	eef0 0a64 	vmov.f32	s1, s9
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24013a96:	ee77 1aa1 	vadd.f32	s3, s15, s3
        t3 = 0.000001f;
24013a9a:	bf08      	it	eq
24013a9c:	eddf 5a3f 	vldreq	s11, [pc, #252]	; 24013b9c <tDiodeFilter_tick+0x3d8>
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24013aa0:	ee31 1a25 	vadd.f32	s2, s2, s11
24013aa4:	eee5 0a82 	vfma.f32	s1, s11, s4
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24013aa8:	ee75 2aa2 	vadd.f32	s5, s11, s5
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24013aac:	ee91 4a02 	vfnms.f32	s8, s2, s4
24013ab0:	eeb0 1a40 	vmov.f32	s2, s0
24013ab4:	ee84 6a25 	vdiv.f32	s12, s8, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24013ab8:	eeb0 4a60 	vmov.f32	s8, s1
    Lfloat xx = (in - f->r*y3);
24013abc:	ee79 0a4a 	vsub.f32	s1, s18, s20
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24013ac0:	ee92 4a86 	vfnms.f32	s8, s5, s12
24013ac4:	eea7 1a86 	vfma.f32	s2, s15, s12
24013ac8:	eec4 2a27 	vdiv.f32	s5, s8, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24013acc:	ee91 1aa2 	vfnms.f32	s2, s3, s5
24013ad0:	ee81 4a26 	vdiv.f32	s8, s2, s13
    
    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24013ad4:	ee32 4ac4 	vsub.f32	s8, s5, s8
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24013ad8:	ee76 2a62 	vsub.f32	s5, s12, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24013adc:	ee32 6a46 	vsub.f32	s12, s4, s12
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24013ae0:	ee64 6a26 	vmul.f32	s13, s8, s13
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24013ae4:	ee26 6a25 	vmul.f32	s12, s12, s11
24013ae8:	eef0 1a66 	vmov.f32	s3, s13
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24013aec:	eee3 6a20 	vfma.f32	s13, s6, s1
24013af0:	eeb0 4a46 	vmov.f32	s8, s12
24013af4:	eed2 1aa7 	vfnms.f32	s3, s5, s15
24013af8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24013afc:	eea2 4ae7 	vfms.f32	s8, s5, s15
24013b00:	eea5 6a02 	vfma.f32	s12, s10, s4
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->s0 = tanhf(f->s0);
24013b04:	eee6 3aa5 	vfma.f32	s7, s13, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24013b08:	eea1 0aa5 	vfma.f32	s0, s3, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24013b0c:	eee4 4a25 	vfma.f32	s9, s8, s11
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24013b10:	eea6 7a65 	vfms.f32	s14, s12, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24013b14:	eef0 9a40 	vmov.f32	s19, s0
    f->s0 = tanhf(f->s0);
24013b18:	eeb0 0a63 	vmov.f32	s0, s7
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24013b1c:	eef0 8a64 	vmov.f32	s17, s9
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24013b20:	eeb0 8a47 	vmov.f32	s16, s14
    f->s0 = tanhf(f->s0);
24013b24:	f006 fbfe 	bl	2401a324 <tanhf>
24013b28:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s1 = tanhf(f->s1);
24013b2c:	eeb0 0a69 	vmov.f32	s0, s19
24013b30:	f006 fbf8 	bl	2401a324 <tanhf>
24013b34:	eef0 7a40 	vmov.f32	s15, s0
    f->s2 = tanhf(f->s2);
24013b38:	eeb0 0a68 	vmov.f32	s0, s17
    f->s1 = tanhf(f->s1);
24013b3c:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->s2 = tanhf(f->s2);
24013b40:	f006 fbf0 	bl	2401a324 <tanhf>
24013b44:	eef0 7a40 	vmov.f32	s15, s0
    f->s3 = tanhf(f->s3);
24013b48:	eeb0 0a48 	vmov.f32	s0, s16
    f->s2 = tanhf(f->s2);
24013b4c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->s3 = tanhf(f->s3);
24013b50:	f006 fbe8 	bl	2401a324 <tanhf>
24013b54:	eef0 7a40 	vmov.f32	s15, s0
    f->zi = in;
24013b58:	ed84 9a07 	vstr	s18, [r4, #28]
    return tanhf(y3*f->r);
24013b5c:	eeb0 0a4a 	vmov.f32	s0, s20
    f->s3 = tanhf(f->s3);
24013b60:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
}
24013b64:	ecbd 8b06 	vpop	{d8-d10}
24013b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tanhf(y3*f->r);
24013b6c:	f006 bbda 	b.w	2401a324 <tanhf>
    Lfloat output = 1.0f;
24013b70:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24013b74:	e656      	b.n	24013824 <tDiodeFilter_tick+0x60>
24013b76:	eddf 2a0a 	vldr	s5, [pc, #40]	; 24013ba0 <tDiodeFilter_tick+0x3dc>
        t2 = 0.000001f;
24013b7a:	eddf 7a08 	vldr	s15, [pc, #32]	; 24013b9c <tDiodeFilter_tick+0x3d8>
24013b7e:	e780      	b.n	24013a82 <tDiodeFilter_tick+0x2be>
24013b80:	eddf 1a07 	vldr	s3, [pc, #28]	; 24013ba0 <tDiodeFilter_tick+0x3dc>
        t1 = 0.000001f;
24013b84:	eddf 6a05 	vldr	s13, [pc, #20]	; 24013b9c <tDiodeFilter_tick+0x3d8>
24013b88:	e772      	b.n	24013a70 <tDiodeFilter_tick+0x2ac>
24013b8a:	bf00      	nop
24013b8c:	43d20000 	.word	0x43d20000
24013b90:	c46c4000 	.word	0xc46c4000
24013b94:	446c4000 	.word	0x446c4000
24013b98:	42d20000 	.word	0x42d20000
24013b9c:	358637bd 	.word	0x358637bd
24013ba0:	3f800008 	.word	0x3f800008

24013ba4 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
24013ba4:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
24013ba6:	6804      	ldr	r4, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013ba8:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013bac:	eeb2 4a0e 	vmov.f32	s8, #46	; 0x41700000  15.0
24013bb0:	ed9f 7aee 	vldr	s14, [pc, #952]	; 24013f6c <tDiodeFilter_tickEfficient+0x3c8>
    if (testVal!= 0.0f)
24013bb4:	eddf 5aee 	vldr	s11, [pc, #952]	; 24013f70 <tDiodeFilter_tickEfficient+0x3cc>
{
24013bb8:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013bbc:	ed94 5a03 	vldr	s10, [r4, #12]
{
24013bc0:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013bc4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
24013bc8:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013bcc:	ee66 7ac5 	vnmul.f32	s15, s13, s10
24013bd0:	edd4 4a08 	vldr	s9, [r4, #32]
    Lfloat ih = 0.5f * (in + f->zi);
24013bd4:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013bd8:	ed94 2a02 	vldr	s4, [r4, #8]
24013bdc:	eee6 7a23 	vfma.f32	s15, s12, s7
24013be0:	ee67 7aa4 	vmul.f32	s15, s15, s9
    Lfloat a = x*x;
24013be4:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013be8:	eea7 7a84 	vfma.f32	s14, s15, s8
24013bec:	ee27 7a87 	vmul.f32	s14, s15, s14
    if (testVal!= 0.0f)
24013bf0:	eeb4 7a65 	vcmp.f32	s14, s11
24013bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013bf8:	f000 81aa 	beq.w	24013f50 <tDiodeFilter_tickEfficient+0x3ac>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013bfc:	ed9f 6add 	vldr	s12, [pc, #884]	; 24013f74 <tDiodeFilter_tickEfficient+0x3d0>
24013c00:	ee77 5a06 	vadd.f32	s11, s14, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013c04:	edd4 3a0c 	vldr	s7, [r4, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013c08:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013c0c:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013c10:	ee62 4a24 	vmul.f32	s9, s4, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013c14:	edd4 2a09 	vldr	s5, [r4, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013c18:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013c1c:	ee33 7ac0 	vsub.f32	s14, s7, s0
    return ((a + 105.0f)*a + 945.0f) / output;
24013c20:	eddf 1ad4 	vldr	s3, [pc, #848]	; 24013f74 <tDiodeFilter_tickEfficient+0x3d0>
24013c24:	ed9f 4ad4 	vldr	s8, [pc, #848]	; 24013f78 <tDiodeFilter_tickEfficient+0x3d4>
    if (!isfinite(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24013c28:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
24013c2c:	eef0 0a61 	vmov.f32	s1, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013c30:	ed9f 6ace 	vldr	s12, [pc, #824]	; 24013f6c <tDiodeFilter_tickEfficient+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
24013c34:	ee37 4a84 	vadd.f32	s8, s15, s8
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013c38:	ee27 7a22 	vmul.f32	s14, s14, s5
    return ((a + 105.0f)*a + 945.0f) / output;
24013c3c:	eee7 0a84 	vfma.f32	s1, s15, s8
    if (testVal!= 0.0f)
24013c40:	ed9f 4acb 	vldr	s8, [pc, #812]	; 24013f70 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat a = x*x;
24013c44:	ee27 7a07 	vmul.f32	s14, s14, s14
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013c48:	eef0 7a46 	vmov.f32	s15, s12
24013c4c:	ed9f 6ac7 	vldr	s12, [pc, #796]	; 24013f6c <tDiodeFilter_tickEfficient+0x3c8>
24013c50:	eee7 7a01 	vfma.f32	s15, s14, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24013c54:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 24013f74 <tDiodeFilter_tickEfficient+0x3d0>
24013c58:	ee80 3aa5 	vdiv.f32	s6, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
24013c60:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
24013c64:	eef0 8a41 	vmov.f32	s17, s2
    if (testVal!= 0.0f)
24013c68:	eef4 7a44 	vcmp.f32	s15, s8
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24013c6c:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    if (testVal!= 0.0f)
24013c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013c74:	bf18      	it	ne
24013c76:	ee77 5aa1 	vaddne.f32	s11, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24013c7a:	ee74 7a63 	vsub.f32	s15, s8, s7
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
24013c7e:	ee23 3a24 	vmul.f32	s6, s6, s9
    return ((a + 105.0f)*a + 945.0f) / output;
24013c82:	eddf 4abd 	vldr	s9, [pc, #756]	; 24013f78 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat output = 1.0f;
24013c86:	bf08      	it	eq
24013c88:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24013c8c:	ee67 7aa2 	vmul.f32	s15, s15, s5
    return ((a + 105.0f)*a + 945.0f) / output;
24013c90:	ee77 4a24 	vadd.f32	s9, s14, s9
24013c94:	ee62 1a22 	vmul.f32	s3, s4, s5
    Lfloat a = x*x;
24013c98:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
24013c9c:	eee7 8a24 	vfma.f32	s17, s14, s9
24013ca0:	eddf 4ab5 	vldr	s9, [pc, #724]	; 24013f78 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013ca4:	eea7 6aa0 	vfma.f32	s12, s15, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24013ca8:	ee77 4aa4 	vadd.f32	s9, s15, s9
24013cac:	ee88 7aa5 	vdiv.f32	s14, s17, s11
    if (testVal!= 0.0f)
24013cb0:	eddf 5aaf 	vldr	s11, [pc, #700]	; 24013f70 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013cb4:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
24013cb8:	eeb4 6a65 	vcmp.f32	s12, s11
24013cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013cc0:	bf18      	it	ne
24013cc2:	ee76 5a01 	vaddne.f32	s11, s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24013cc6:	ed9f 1aab 	vldr	s2, [pc, #684]	; 24013f74 <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24013cca:	ee36 6ac4 	vsub.f32	s12, s13, s8
    return ((a + 105.0f)*a + 945.0f) / output;
24013cce:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
24013cd2:	bf08      	it	eq
24013cd4:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24013cd8:	ee26 6a22 	vmul.f32	s12, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
24013cdc:	eee7 0aa4 	vfma.f32	s1, s15, s9
    if (testVal!= 0.0f)
24013ce0:	eddf 4aa3 	vldr	s9, [pc, #652]	; 24013f70 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013ce4:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat a = x*x;
24013ce8:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
24013cec:	ee27 7a21 	vmul.f32	s14, s14, s3
    return ((a + 105.0f)*a + 945.0f) / output;
24013cf0:	eec0 7aa5 	vdiv.f32	s15, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013cf4:	eddf 5a9d 	vldr	s11, [pc, #628]	; 24013f6c <tDiodeFilter_tickEfficient+0x3c8>
24013cf8:	eee6 5a22 	vfma.f32	s11, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
24013cfc:	eddf 2a9d 	vldr	s5, [pc, #628]	; 24013f74 <tDiodeFilter_tickEfficient+0x3d0>
24013d00:	eef0 0a62 	vmov.f32	s1, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013d04:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
24013d08:	eef4 5a64 	vcmp.f32	s11, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
24013d0c:	ee67 7aa1 	vmul.f32	s15, s15, s3
    if (testVal!= 0.0f)
24013d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013d14:	bf18      	it	ne
24013d16:	ee75 4a81 	vaddne.f32	s9, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24013d1a:	eddf 5a97 	vldr	s11, [pc, #604]	; 24013f78 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat output = 1.0f;
24013d1e:	bf08      	it	eq
24013d20:	eef7 4a00 	vmoveq.f32	s9, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24013d24:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
24013d28:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24013d2c:	ee22 2a01 	vmul.f32	s4, s4, s2
    return ((a + 105.0f)*a + 945.0f) / output;
24013d30:	eee6 0a25 	vfma.f32	s1, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013d34:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 24013f6c <tDiodeFilter_tickEfficient+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
24013d38:	eec0 5aa4 	vdiv.f32	s11, s1, s9
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24013d3c:	ee66 4a81 	vmul.f32	s9, s13, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013d40:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
24013d44:	ee36 1aa3 	vadd.f32	s2, s13, s7
    Lfloat a = x*x;
24013d48:	ee64 4aa4 	vmul.f32	s9, s9, s9
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013d4c:	eea4 6aa0 	vfma.f32	s12, s9, s1
    return ((a + 105.0f)*a + 945.0f) / output;
24013d50:	eddf 0a88 	vldr	s1, [pc, #544]	; 24013f74 <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
24013d54:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
24013d58:	eddf 1a85 	vldr	s3, [pc, #532]	; 24013f70 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013d5c:	ee26 6a24 	vmul.f32	s12, s12, s9
    if (testVal!= 0.0f)
24013d60:	eeb4 6a61 	vcmp.f32	s12, s3
    return ((a + 105.0f)*a + 945.0f) / output;
24013d64:	eddf 1a84 	vldr	s3, [pc, #528]	; 24013f78 <tDiodeFilter_tickEfficient+0x3d4>
24013d68:	ee74 1aa1 	vadd.f32	s3, s9, s3
    if (testVal!= 0.0f)
24013d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
24013d70:	eee4 0aa1 	vfma.f32	s1, s9, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
24013d74:	bf14      	ite	ne
24013d76:	ee76 2a22 	vaddne.f32	s5, s12, s5
    Lfloat output = 1.0f;
24013d7a:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013d7e:	ee36 6a84 	vadd.f32	s12, s13, s8
24013d82:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
24013d86:	eec0 4aa2 	vdiv.f32	s9, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013d8a:	ee70 2a04 	vadd.f32	s5, s0, s8
24013d8e:	ee74 0a01 	vadd.f32	s1, s8, s2
24013d92:	ee72 2a81 	vadd.f32	s5, s5, s2
24013d96:	eeb0 1a60 	vmov.f32	s2, s1
24013d9a:	eef0 0a61 	vmov.f32	s1, s3
24013d9e:	eee8 2a03 	vfma.f32	s5, s16, s6
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
24013da2:	ee64 4a82 	vmul.f32	s9, s9, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013da6:	eea2 1a87 	vfma.f32	s2, s5, s14
24013daa:	ee76 2a06 	vadd.f32	s5, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24013dae:	eeb1 2a00 	vmov.f32	s4, #16	; 0x40800000  4.0
24013db2:	ee74 8a89 	vadd.f32	s17, s9, s18
24013db6:	eea7 6a22 	vfma.f32	s12, s14, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
24013dba:	ee66 2a87 	vmul.f32	s5, s13, s14
24013dbe:	eee4 0aa1 	vfma.f32	s1, s9, s3
24013dc2:	eea1 6a27 	vfma.f32	s12, s2, s15
24013dc6:	eeb0 1a66 	vmov.f32	s2, s13
24013dca:	eea2 1aa1 	vfma.f32	s2, s5, s3
24013dce:	ee62 2a89 	vmul.f32	s5, s5, s18
24013dd2:	eee6 2aa1 	vfma.f32	s5, s13, s3
24013dd6:	eea2 1aa7 	vfma.f32	s2, s5, s15
24013dda:	eef0 2a41 	vmov.f32	s5, s2
24013dde:	eeb0 1a42 	vmov.f32	s2, s4
24013de2:	eee6 2a25 	vfma.f32	s5, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24013de6:	eea5 1a03 	vfma.f32	s2, s10, s6
24013dea:	eeb0 6a42 	vmov.f32	s12, s4
24013dee:	eea4 6aa1 	vfma.f32	s12, s9, s3
24013df2:	ee34 2a81 	vadd.f32	s4, s9, s2
24013df6:	ee34 1aa9 	vadd.f32	s2, s9, s19
24013dfa:	eee2 8a07 	vfma.f32	s17, s4, s14
24013dfe:	ee34 2aa1 	vadd.f32	s4, s9, s3
24013e02:	eea6 2a07 	vfma.f32	s4, s12, s14
24013e06:	eeb0 6a64 	vmov.f32	s12, s9
24013e0a:	eea8 2aa7 	vfma.f32	s4, s17, s15
24013e0e:	ee61 8a07 	vmul.f32	s17, s2, s14
24013e12:	eee8 0a89 	vfma.f32	s1, s17, s18
24013e16:	eea8 6aa1 	vfma.f32	s12, s17, s3
24013e1a:	eea0 6aa7 	vfma.f32	s12, s1, s15
24013e1e:	eea2 6a25 	vfma.f32	s12, s4, s11
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
24013e22:	eebf 2a00 	vmov.f32	s4, #240	; 0xbf800000 -1.0
24013e26:	eeb4 6a42 	vcmp.f32	s12, s4
24013e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (!isfinite(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
24013e2e:	eeb5 7a40 	vcmp.f32	s14, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
24013e32:	bf14      	ite	ne
24013e34:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
24013e38:	ed9f 6a50 	vldreq	s12, [pc, #320]	; 24013f7c <tDiodeFilter_tickEfficient+0x3d8>
    if (t1 == 0.0f)
24013e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
24013e40:	eec2 8a86 	vdiv.f32	s17, s5, s12
    if (t1 == 0.0f)
24013e44:	f000 808c 	beq.w	24013f60 <tDiodeFilter_tickEfficient+0x3bc>
24013e48:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
24013e4c:	ee77 2a22 	vadd.f32	s5, s14, s5
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
24013e50:	eef5 7a40 	vcmp.f32	s15, #0.0
24013e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24013e58:	d07d      	beq.n	24013f56 <tDiodeFilter_tickEfficient+0x3b2>
24013e5a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
24013e5e:	ee37 2a82 	vadd.f32	s4, s15, s4
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
24013e62:	eef5 5a40 	vcmp.f32	s11, #0.0

    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
    Lfloat xx = (in - f->r*y3);
24013e66:	eef0 0a48 	vmov.f32	s1, s16
24013e6a:	eef0 1a44 	vmov.f32	s3, s8
    if (t3 == 0.0f)
24013e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat xx = (in - f->r*y3);
24013e72:	eee5 0a68 	vfms.f32	s1, s10, s17
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24013e76:	eeb0 5a66 	vmov.f32	s10, s13
        t3 = 0.000001f;
24013e7a:	bf08      	it	eq
24013e7c:	eddf 5a3f 	vldreq	s11, [pc, #252]	; 24013f7c <tDiodeFilter_tickEfficient+0x3d8>
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24013e80:	ee77 2aa2 	vadd.f32	s5, s15, s5
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24013e84:	ee31 1a25 	vadd.f32	s2, s2, s11
24013e88:	eee5 1aa8 	vfma.f32	s3, s11, s17
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24013e8c:	ee35 2a82 	vadd.f32	s4, s11, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
24013e90:	ee91 5a28 	vfnms.f32	s10, s2, s17
24013e94:	ee85 6a25 	vdiv.f32	s12, s10, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
24013e98:	eed2 1a06 	vfnms.f32	s3, s4, s12
24013e9c:	eeb0 2a63 	vmov.f32	s4, s7
24013ea0:	eea7 2a86 	vfma.f32	s4, s15, s12
24013ea4:	ee81 5aa7 	vdiv.f32	s10, s3, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24013ea8:	ee92 2a85 	vfnms.f32	s4, s5, s10
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24013eac:	ee76 2a45 	vsub.f32	s5, s12, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24013eb0:	ee38 6ac6 	vsub.f32	s12, s17, s12
24013eb4:	ee26 6a25 	vmul.f32	s12, s12, s11
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
24013eb8:	eec2 1a07 	vdiv.f32	s3, s4, s14
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24013ebc:	eeb0 2a46 	vmov.f32	s4, s12
24013ec0:	eea4 6aa8 	vfma.f32	s12, s9, s17
24013ec4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
24013ec8:	eea2 2ae7 	vfms.f32	s4, s5, s15
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24013ecc:	eee6 6a65 	vfms.f32	s13, s12, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24013ed0:	eea2 4a25 	vfma.f32	s8, s4, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24013ed4:	ee35 5a61 	vsub.f32	s10, s10, s3
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
24013ed8:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24013edc:	ee25 5a07 	vmul.f32	s10, s10, s14
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
24013ee0:	ed84 4a0d 	vstr	s8, [r4, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24013ee4:	eeb0 7a45 	vmov.f32	s14, s10
24013ee8:	ee92 5aa7 	vfnms.f32	s10, s5, s15
24013eec:	eea3 7a20 	vfma.f32	s14, s6, s1
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24013ef0:	eee5 3a25 	vfma.f32	s7, s10, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24013ef4:	eea7 0a25 	vfma.f32	s0, s14, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
24013ef8:	edc4 3a0c 	vstr	s7, [r4, #48]	; 0x30
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
24013efc:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s0 = fast_tanh4(f->s0);
24013f00:	f000 fc7a 	bl	240147f8 <fast_tanh4>
24013f04:	eef0 7a40 	vmov.f32	s15, s0
    f->s1 = fast_tanh4(f->s1);
24013f08:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    f->s0 = fast_tanh4(f->s0);
24013f0c:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
    f->s1 = fast_tanh4(f->s1);
24013f10:	f000 fc72 	bl	240147f8 <fast_tanh4>
24013f14:	eef0 7a40 	vmov.f32	s15, s0
    f->s2 = fast_tanh4(f->s2);
24013f18:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
    f->s1 = fast_tanh4(f->s1);
24013f1c:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->s2 = fast_tanh4(f->s2);
24013f20:	f000 fc6a 	bl	240147f8 <fast_tanh4>
24013f24:	eef0 7a40 	vmov.f32	s15, s0
    f->s3 = fast_tanh4(f->s3);
24013f28:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
    f->s2 = fast_tanh4(f->s2);
24013f2c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->s3 = fast_tanh4(f->s3);
24013f30:	f000 fc62 	bl	240147f8 <fast_tanh4>
    f->zi = in;
    return fast_tanh4(y3*f->r);
24013f34:	edd4 7a03 	vldr	s15, [r4, #12]
    f->s3 = fast_tanh4(f->s3);
24013f38:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->zi = in;
24013f3c:	ed84 8a07 	vstr	s16, [r4, #28]
    return fast_tanh4(y3*f->r);
24013f40:	ee28 0aa7 	vmul.f32	s0, s17, s15
}
24013f44:	ecbd 8b04 	vpop	{d8-d9}
24013f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return fast_tanh4(y3*f->r);
24013f4c:	f000 bc54 	b.w	240147f8 <fast_tanh4>
    Lfloat output = 1.0f;
24013f50:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24013f54:	e656      	b.n	24013c04 <tDiodeFilter_tickEfficient+0x60>
24013f56:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 24013f80 <tDiodeFilter_tickEfficient+0x3dc>
        t2 = 0.000001f;
24013f5a:	eddf 7a08 	vldr	s15, [pc, #32]	; 24013f7c <tDiodeFilter_tickEfficient+0x3d8>
24013f5e:	e780      	b.n	24013e62 <tDiodeFilter_tickEfficient+0x2be>
24013f60:	eddf 2a07 	vldr	s5, [pc, #28]	; 24013f80 <tDiodeFilter_tickEfficient+0x3dc>
        t1 = 0.000001f;
24013f64:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24013f7c <tDiodeFilter_tickEfficient+0x3d8>
24013f68:	e772      	b.n	24013e50 <tDiodeFilter_tickEfficient+0x2ac>
24013f6a:	bf00      	nop
24013f6c:	43d20000 	.word	0x43d20000
24013f70:	c46c4000 	.word	0xc46c4000
24013f74:	446c4000 	.word	0x446c4000
24013f78:	42d20000 	.word	0x42d20000
24013f7c:	358637bd 	.word	0x358637bd
24013f80:	3f800008 	.word	0x3f800008

24013f84 <tDiodeFilter_setFreqFast>:

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
	f->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
24013f84:	eddf 7a15 	vldr	s15, [pc, #84]	; 24013fdc <tDiodeFilter_setFreqFast+0x58>
24013f88:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tDiodeFilter* f = *vf;
24013f8c:	6801      	ldr	r1, [r0, #0]
    if (intVer < 0)
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24013f8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
24013f92:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24013f96:	6c0a      	ldr	r2, [r1, #64]	; 0x40
	f->cutoffMIDI = cutoff;
24013f98:	ed81 0a11 	vstr	s0, [r1, #68]	; 0x44
    int32_t intVer = (int32_t)cutoff;
24013f9c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24013fa0:	ee37 7a67 	vsub.f32	s14, s14, s15
    int32_t intVer = (int32_t)cutoff;
24013fa4:	ee16 3a90 	vmov	r3, s13
24013fa8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
24013fac:	4563      	cmp	r3, ip
24013fae:	bfa8      	it	ge
24013fb0:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013fb2:	ee06 3a90 	vmov	s13, r3
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24013fb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013fba:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24013fbe:	edd3 5a01 	vldr	s11, [r3, #4]
24013fc2:	ed93 6a00 	vldr	s12, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24013fc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24013fca:	ee37 7a26 	vadd.f32	s14, s14, s13
24013fce:	ee67 7aa5 	vmul.f32	s15, s15, s11
24013fd2:	eee6 7a07 	vfma.f32	s15, s12, s14
24013fd6:	edc1 7a02 	vstr	s15, [r1, #8]
}
24013fda:	4770      	bx	lr
24013fdc:	41f4898d 	.word	0x41f4898d

24013fe0 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
24013fe0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24013fe4:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
24013fe8:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
24013fec:	eef0 0a67 	vmov.f32	s1, s15
{
24013ff0:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
24013ff2:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
24013ff4:	eee0 0a07 	vfma.f32	s1, s0, s14
24013ff8:	eeb0 0a67 	vmov.f32	s0, s15
24013ffc:	f000 fbd0 	bl	240147a0 <LEAF_clip>
24014000:	ed84 0a03 	vstr	s0, [r4, #12]
}
24014004:	bd10      	pop	{r4, pc}
24014006:	bf00      	nop

24014008 <tDiodeFilter_setSampleRate>:

void    tDiodeFilter_setSampleRate(tDiodeFilter* const vf, Lfloat sr)
{
    _tDiodeFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
24014008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
2401400c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 24014030 <tDiodeFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
24014010:	4908      	ldr	r1, [pc, #32]	; (24014034 <tDiodeFilter_setSampleRate+0x2c>)
24014012:	eeb4 0ac7 	vcmpe.f32	s0, s14
24014016:	4b08      	ldr	r3, [pc, #32]	; (24014038 <tDiodeFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
24014018:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tDiodeFilter* f = *vf;
2401401c:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
2401401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014022:	bfd8      	it	le
24014024:	460b      	movle	r3, r1
24014026:	6413      	str	r3, [r2, #64]	; 0x40
    f->invSampleRate = 1.0f/sr;
24014028:	edc2 7a0f 	vstr	s15, [r2, #60]	; 0x3c
    }
}
2401402c:	4770      	bx	lr
2401402e:	bf00      	nop
24014030:	47afc800 	.word	0x47afc800
24014034:	2401ccb0 	.word	0x2401ccb0
24014038:	24020cb0 	.word	0x24020cb0

2401403c <tLadderFilter_init>:


void    tLadderFilter_init           (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
2401403c:	b570      	push	{r4, r5, r6, lr}
2401403e:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
24014042:	698d      	ldr	r5, [r1, #24]
{
24014044:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24014046:	2040      	movs	r0, #64	; 0x40
{
24014048:	eeb0 8a40 	vmov.f32	s16, s0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
2401404c:	4629      	mov	r1, r5
{
2401404e:	eef0 8a60 	vmov.f32	s17, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24014052:	f000 fe21 	bl	24014c98 <mpool_alloc>
24014056:	6030      	str	r0, [r6, #0]
    f->mempool = m;
24014058:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->cutoffMIDI = ftom(cutoff);
2401405a:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
2401405e:	686d      	ldr	r5, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
24014060:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
24014062:	686b      	ldr	r3, [r5, #4]
    f->cutoff = cutoff;
24014064:	ed80 8a01 	vstr	s16, [r0, #4]
    f->invSampleRate = leaf->invSampleRate;
24014068:	6083      	str	r3, [r0, #8]
    f->cutoffMIDI = ftom(cutoff);
2401406a:	f000 fdd9 	bl	24014c20 <ftom>
    f->oversampling = 1;
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
2401406e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 240140e0 <tLadderFilter_init+0xa4>
    f->cutoffMIDI = ftom(cutoff);
24014072:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->oversampling = 1;
24014076:	2301      	movs	r3, #1
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24014078:	ee28 0a07 	vmul.f32	s0, s16, s14
2401407c:	edd4 7a02 	vldr	s15, [r4, #8]
    f->oversampling = 1;
24014080:	60e3      	str	r3, [r4, #12]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24014082:	ee20 0a27 	vmul.f32	s0, s0, s15
24014086:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
2401408a:	f006 f9b5 	bl	2401a3f8 <tan>
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
2401408e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
24014092:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
24014096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
2401409a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
2401409e:	4911      	ldr	r1, [pc, #68]	; (240140e4 <tLadderFilter_init+0xa8>)
    f->fb = (resonance * 8.0f);
240140a0:	ee68 8aa6 	vmul.f32	s17, s17, s13
    f->a = 2.0f;
240140a4:	61e3      	str	r3, [r4, #28]
    f->c2 = 2.0f * f->c;
240140a6:	ee30 7a00 	vadd.f32	s14, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
240140aa:	4b0f      	ldr	r3, [pc, #60]	; (240140e8 <tLadderFilter_init+0xac>)
    f->d = 1.0f;
240140ac:	6262      	str	r2, [r4, #36]	; 0x24
    f->b[0] = 0.04f;
240140ae:	62a3      	str	r3, [r4, #40]	; 0x28
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
240140b0:	ed84 0a04 	vstr	s0, [r4, #16]
    f->s = 0.1f;
240140b4:	6221      	str	r1, [r4, #32]
    f->c2 = 2.0f * f->c;
240140b6:	ed84 7a06 	vstr	s14, [r4, #24]
    f->fb = (resonance * 8.0f);
240140ba:	edc4 8a05 	vstr	s17, [r4, #20]
    if (leaf->sampleRate > 90000)
240140be:	eddf 7a0b 	vldr	s15, [pc, #44]	; 240140ec <tLadderFilter_init+0xb0>
240140c2:	ed95 7a00 	vldr	s14, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
240140c6:	4a0a      	ldr	r2, [pc, #40]	; (240140f0 <tLadderFilter_init+0xb4>)
240140c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
240140cc:	4b09      	ldr	r3, [pc, #36]	; (240140f4 <tLadderFilter_init+0xb8>)
240140ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240140d2:	bfd8      	it	le
240140d4:	4613      	movle	r3, r2
240140d6:	63a3      	str	r3, [r4, #56]	; 0x38
}
240140d8:	ecbd 8b02 	vpop	{d8}
240140dc:	bd70      	pop	{r4, r5, r6, pc}
240140de:	bf00      	nop
240140e0:	40490fdb 	.word	0x40490fdb
240140e4:	3dcccccd 	.word	0x3dcccccd
240140e8:	3d23d70a 	.word	0x3d23d70a
240140ec:	47afc800 	.word	0x47afc800
240140f0:	2401ccb0 	.word	0x2401ccb0
240140f4:	24020cb0 	.word	0x24020cb0

240140f8 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
    _tLadderFilter* f = *vf;
240140f8:	6802      	ldr	r2, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
240140fa:	eddf 7a90 	vldr	s15, [pc, #576]	; 2401433c <tLadderFilter_tick+0x244>
{
240140fe:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
24014102:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
24014104:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
24014108:	2900      	cmp	r1, #0
2401410a:	f340 8112 	ble.w	24014332 <tLadderFilter_tick+0x23a>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401410e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
24014112:	ed92 5a04 	vldr	s10, [r2, #16]
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24014116:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    Lfloat  x2 = smoothABS (x-b, 0.01f);
2401411a:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
        
        Lfloat f3 = f->c       * t2*g3;
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
2401411e:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24014122:	ed92 7a08 	vldr	s14, [r2, #32]
24014126:	ee72 2a27 	vadd.f32	s5, s4, s15
2401412a:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        Lfloat estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
2401412e:	ee65 aa00 	vmul.f32	s21, s10, s0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
24014132:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
24014136:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
2401413a:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
2401413e:	ee25 9a28 	vmul.f32	s18, s10, s17
24014142:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
24014146:	ee62 2a87 	vmul.f32	s5, s5, s14
2401414a:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
2401414e:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
24014152:	2300      	movs	r3, #0
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
24014154:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24014158:	ed9f 8a79 	vldr	s16, [pc, #484]	; 24014340 <tLadderFilter_tick+0x248>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
2401415c:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
24014160:	3301      	adds	r3, #1
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
24014162:	ee31 6a23 	vadd.f32	s12, s2, s7
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
24014166:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
2401416a:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401416c:	ee65 5aa5 	vmul.f32	s11, s11, s11
24014170:	ee26 6a06 	vmul.f32	s12, s12, s12
24014174:	ee66 6aa6 	vmul.f32	s13, s13, s13
24014178:	ee22 baa5 	vmul.f32	s22, s5, s11
2401417c:	ee26 ca22 	vmul.f32	s24, s12, s5
24014180:	ee72 5a25 	vadd.f32	s11, s4, s11
24014184:	ee32 6a06 	vadd.f32	s12, s4, s12
24014188:	ee66 baa2 	vmul.f32	s23, s13, s5
2401418c:	eecb ea25 	vdiv.f32	s29, s22, s11
24014190:	eecc 5a06 	vdiv.f32	s11, s24, s12
24014194:	ee72 6a26 	vadd.f32	s13, s4, s13
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
24014198:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
2401419c:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
240141a0:	ee27 7a07 	vmul.f32	s14, s14, s14
240141a4:	ee77 eaee 	vsub.f32	s29, s15, s29
240141a8:	ee77 6ae5 	vsub.f32	s13, s15, s11
240141ac:	ee22 ba87 	vmul.f32	s22, s5, s14
240141b0:	ee32 7a07 	vadd.f32	s14, s4, s14
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
240141b4:	ee65 5a2e 	vmul.f32	s11, s10, s29
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
240141b8:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240141bc:	eecb ca07 	vdiv.f32	s25, s22, s14
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
240141c0:	ee7e da27 	vadd.f32	s27, s28, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240141c4:	ee37 7ac6 	vsub.f32	s14, s15, s12
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
240141c8:	ee35 6aa7 	vadd.f32	s12, s11, s15
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
240141cc:	ee25 da07 	vmul.f32	s26, s10, s14
        Lfloat z0 = f->c*t0 / (1.0f + f->c*t0);
240141d0:	eec5 ba86 	vdiv.f32	s23, s11, s12
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
240141d4:	eece 5a2d 	vdiv.f32	s11, s28, s27
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
240141d8:	ee3d ca27 	vadd.f32	s24, s26, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
240141dc:	ee77 caec 	vsub.f32	s25, s15, s25
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
240141e0:	ee87 fa86 	vdiv.f32	s30, s15, s12
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
240141e4:	ee8d ea0c 	vdiv.f32	s28, s26, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
240141e8:	ee25 ba2c 	vmul.f32	s22, s10, s25
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240141ec:	ee6b baa5 	vmul.f32	s23, s23, s11
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
240141f0:	ee87 6aad 	vdiv.f32	s12, s15, s27
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
240141f4:	ee7b 5a27 	vadd.f32	s11, s22, s15
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
240141f8:	ee6b baa0 	vmul.f32	s23, s23, s1
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
240141fc:	eec7 da8c 	vdiv.f32	s27, s15, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
24014200:	ee87 caa5 	vdiv.f32	s24, s15, s11
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24014204:	ee6b ba8e 	vmul.f32	s23, s23, s28
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
24014208:	ee8b ea25 	vdiv.f32	s28, s22, s11
        Lfloat estimate =
2401420c:	ee73 5a2a 	vadd.f32	s11, s6, s21
24014210:	ee27 ba26 	vmul.f32	s22, s14, s13
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24014214:	ee66 6a26 	vmul.f32	s13, s12, s13
24014218:	ee65 5a89 	vmul.f32	s11, s11, s18
2401421c:	ee2b ba06 	vmul.f32	s22, s22, s12
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
24014220:	ee2f 6a2e 	vmul.f32	s12, s30, s29
24014224:	ee65 5aae 	vmul.f32	s11, s11, s29
24014228:	ee60 ea8c 	vmul.f32	s29, s1, s24
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
2401422c:	ee2c ca2c 	vmul.f32	s24, s24, s25
24014230:	ee65 5a8f 	vmul.f32	s11, s11, s30
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24014234:	eef0 ca67 	vmov.f32	s25, s15
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
24014238:	ee2d 7a87 	vmul.f32	s14, s27, s14
2401423c:	eee3 5aa8 	vfma.f32	s11, s7, s17
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
24014240:	eeeb ca8e 	vfma.f32	s25, s23, s28
24014244:	ee6b 5a25 	vmul.f32	s11, s22, s11
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
24014248:	eec9 baac 	vdiv.f32	s23, s19, s25
2401424c:	eeed 5a04 	vfma.f32	s11, s26, s8
24014250:	eef0 ca64 	vmov.f32	s25, s9
    Lfloat  x1 = smoothABS (x-a, 0.01f);
24014254:	eeb0 ba67 	vmov.f32	s22, s15
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24014258:	eeb0 da48 	vmov.f32	s26, s16
2401425c:	eeed caa5 	vfma.f32	s25, s27, s11
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24014260:	eef0 5a4a 	vmov.f32	s11, s20
    Lfloat  x1 = smoothABS (x-a, 0.01f);
24014264:	eeac baae 	vfma.f32	s22, s25, s29
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24014268:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2401426c:	eef0 ca48 	vmov.f32	s25, s16
24014270:	eeab da0b 	vfma.f32	s26, s22, s22
24014274:	eee5 caa5 	vfma.f32	s25, s11, s11
24014278:	eef1 5acd 	vsqrt.f32	s11, s26
2401427c:	eeb1 baec 	vsqrt.f32	s22, s25
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
24014280:	ee3b ba65 	vsub.f32	s22, s22, s11
24014284:	eef0 5a40 	vmov.f32	s11, s0
24014288:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
2401428c:	eeb0 ba43 	vmov.f32	s22, s6
24014290:	eea5 ba25 	vfma.f32	s22, s10, s11
24014294:	ee26 6a0b 	vmul.f32	s12, s12, s22
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
24014298:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
2401429c:	ee75 5ac6 	vsub.f32	s11, s11, s12
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
240142a0:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
240142a4:	eea1 3aa5 	vfma.f32	s6, s3, s11
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
240142a8:	eef0 5a44 	vmov.f32	s11, s8
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
240142ac:	ee66 6a8b 	vmul.f32	s13, s13, s22
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
240142b0:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
240142b4:	ee36 6a66 	vsub.f32	s12, s12, s13
240142b8:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
240142bc:	eeb0 6a64 	vmov.f32	s12, s9
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
240142c0:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
240142c4:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
240142c8:	ee76 6ac7 	vsub.f32	s13, s13, s14
240142cc:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
240142d0:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
240142d4:	ee37 7a4c 	vsub.f32	s14, s14, s24
240142d8:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
240142dc:	f47f af3e 	bne.w	2401415c <tLadderFilter_tick+0x64>
240142e0:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
240142e4:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
240142e8:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
240142ec:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240142f0:	eddf 7a13 	vldr	s15, [pc, #76]	; 24014340 <tLadderFilter_tick+0x248>
    Lfloat  x2 = smoothABS (x-b, 0.01f);
240142f4:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
240142f8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
240142fc:	eeb0 5a67 	vmov.f32	s10, s15
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24014300:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
24014304:	eea0 5aa0 	vfma.f32	s10, s1, s1
    Lfloat  x2 = smoothABS (x-b, 0.01f);
24014308:	ee70 0ac6 	vsub.f32	s1, s1, s12
		return (sqrtf((x * x)  + y)) - sqrtf(y);
2401430c:	eee0 7aa0 	vfma.f32	s15, s1, s1
24014310:	eeb0 7a67 	vmov.f32	s14, s15
24014314:	eef1 7ac5 	vsqrt.f32	s15, s10
24014318:	eeb1 5ac7 	vsqrt.f32	s10, s14
    x = x - x2;
2401431c:	ee77 7a86 	vadd.f32	s15, s15, s12
24014320:	ee77 7ac5 	vsub.f32	s15, s15, s10
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24014324:	eea7 0aa5 	vfma.f32	s0, s15, s11
    return y3 * compensation;
}
24014328:	ee20 0a0c 	vmul.f32	s0, s0, s24
2401432c:	ecbd 8b10 	vpop	{d8-d15}
24014330:	4770      	bx	lr
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
24014332:	edd2 0a05 	vldr	s1, [r2, #20]
    Lfloat y3 = 0.0f;
24014336:	ed9f ca03 	vldr	s24, [pc, #12]	; 24014344 <tLadderFilter_tick+0x24c>
2401433a:	e7d9      	b.n	240142f0 <tLadderFilter_tick+0x1f8>
2401433c:	3c75c28f 	.word	0x3c75c28f
24014340:	3c23d70a 	.word	0x3c23d70a
24014344:	00000000 	.word	0x00000000

24014348 <tLadderFilter_setFreqFast>:

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
24014348:	ed9f 7a17 	vldr	s14, [pc, #92]	; 240143a8 <tLadderFilter_setFreqFast+0x60>
2401434c:	f640 7cfe 	movw	ip, #4094	; 0xffe
    _tLadderFilter* f = *vf;
24014350:	6802      	ldr	r2, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24014352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    cutoff *= 30.567164179104478f;
24014356:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
2401435a:	6b91      	ldr	r1, [r2, #56]	; 0x38
    f->cutoffMIDI = cutoff;
2401435c:	ed82 0a0f 	vstr	s0, [r2, #60]	; 0x3c
    int32_t intVer = (int32_t)cutoff;
24014360:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24014364:	ee76 6ac7 	vsub.f32	s13, s13, s14
    int32_t intVer = (int32_t)cutoff;
24014368:	ee17 3a90 	vmov	r3, s15
2401436c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
24014370:	4563      	cmp	r3, ip
24014372:	bfa8      	it	ge
24014374:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
24014376:	ee07 3a90 	vmov	s15, r3
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
2401437a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401437e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
24014382:	ed93 5a01 	vldr	s10, [r3, #4]
24014386:	edd3 5a00 	vldr	s11, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
2401438a:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
2401438e:	ee36 7a86 	vadd.f32	s14, s13, s12
24014392:	ee67 7a85 	vmul.f32	s15, s15, s10
24014396:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->c2 = 2.0f * f->c;
2401439a:	ee37 7aa7 	vadd.f32	s14, s15, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
2401439e:	edc2 7a04 	vstr	s15, [r2, #16]
    f->c2 = 2.0f * f->c;
240143a2:	ed82 7a06 	vstr	s14, [r2, #24]
}
240143a6:	4770      	bx	lr
240143a8:	41f4898d 	.word	0x41f4898d

240143ac <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
240143ac:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
240143ae:	6804      	ldr	r4, [r0, #0]
{
240143b0:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
240143b4:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
240143b8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 240143c8 <tLadderFilter_setQ+0x1c>
240143bc:	f000 f9f0 	bl	240147a0 <LEAF_clip>
240143c0:	ed84 0a05 	vstr	s0, [r4, #20]
}
240143c4:	bd10      	pop	{r4, pc}
240143c6:	bf00      	nop
240143c8:	3e4ccccd 	.word	0x3e4ccccd

240143cc <tLadderFilter_setSampleRate>:

void    tLadderFilter_setSampleRate(tLadderFilter* const vf, Lfloat sr)
{
    _tLadderFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
240143cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
240143d0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 240143f4 <tLadderFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
240143d4:	4908      	ldr	r1, [pc, #32]	; (240143f8 <tLadderFilter_setSampleRate+0x2c>)
240143d6:	eeb4 0ac7 	vcmpe.f32	s0, s14
240143da:	4b08      	ldr	r3, [pc, #32]	; (240143fc <tLadderFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
240143dc:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tLadderFilter* f = *vf;
240143e0:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
240143e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240143e6:	bfd8      	it	le
240143e8:	460b      	movle	r3, r1
240143ea:	6393      	str	r3, [r2, #56]	; 0x38
    f->invSampleRate = 1.0f/sr;
240143ec:	edc2 7a02 	vstr	s15, [r2, #8]
    }
}
240143f0:	4770      	bx	lr
240143f2:	bf00      	nop
240143f4:	47afc800 	.word	0x47afc800
240143f8:	2401ccb0 	.word	0x2401ccb0
240143fc:	24020cb0 	.word	0x24020cb0

24014400 <LEAF_map>:
    return(fraction);
}

inline float LEAF_map(float value, float istart, float istop, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
24014400:	ee70 7a60 	vsub.f32	s15, s0, s1
24014404:	ee31 1a60 	vsub.f32	s2, s2, s1
24014408:	ee32 2a61 	vsub.f32	s4, s4, s3
2401440c:	ee87 7a81 	vdiv.f32	s14, s15, s2
}
24014410:	eee2 1a07 	vfma.f32	s3, s4, s14
24014414:	eeb0 0a61 	vmov.f32	s0, s3
24014418:	4770      	bx	lr
2401441a:	bf00      	nop

2401441c <LEAF_mapFromZeroToOneInput>:

inline float LEAF_mapFromZeroToOneInput(float value, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * value;
2401441c:	ee31 1a60 	vsub.f32	s2, s2, s1
}
24014420:	eee1 0a00 	vfma.f32	s1, s2, s0
24014424:	eeb0 0a60 	vmov.f32	s0, s1
24014428:	4770      	bx	lr
2401442a:	bf00      	nop

2401442c <LEAF_mapToZeroToOneOutput>:

inline float LEAF_mapToZeroToOneOutput(float value, float istart, float istop)
{
	return ((value - istart) / (istop - istart));
2401442c:	ee30 0a60 	vsub.f32	s0, s0, s1
24014430:	ee31 1a60 	vsub.f32	s2, s2, s1
}
24014434:	ee80 0a01 	vdiv.f32	s0, s0, s2
24014438:	4770      	bx	lr
2401443a:	bf00      	nop

2401443c <fastertanf>:
    return fResult;
}

inline Lfloat fastertanf(Lfloat fAngle)
{
    Lfloat fASqr = fAngle*fAngle;
2401443c:	ee60 6a00 	vmul.f32	s13, s0, s0
    Lfloat fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
24014440:	ed9f 6a06 	vldr	s12, [pc, #24]	; 2401445c <fastertanf+0x20>
24014444:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24014460 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
24014448:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
2401444c:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
24014450:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
24014454:	ee20 0a27 	vmul.f32	s0, s0, s15
24014458:	4770      	bx	lr
2401445a:	bf00      	nop
2401445c:	3e502de0 	.word	0x3e502de0
24014460:	3ea295ea 	.word	0x3ea295ea

24014464 <my_faster_logf>:
/* natural log on [0x1.f7a5ecp-127, 0x1.fffffep127]. Maximum relative error 9.4529e-5 */
inline Lfloat my_faster_logf (Lfloat a)
{
24014464:	b082      	sub	sp, #8
	Lfloat m, r, s, t, i, f;
    int32_t e;
    union unholy_t unholy;
    unholy.f = a;
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
24014466:	4915      	ldr	r1, [pc, #84]	; (240144bc <my_faster_logf+0x58>)
24014468:	4a15      	ldr	r2, [pc, #84]	; (240144c0 <my_faster_logf+0x5c>)
    union unholy_t unholy2;
    unholy2.i = (unholy.i - e);
    m = unholy2.f;
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
    /* m in [2/3, 4/3] */
    f = m - 1.0f;
2401446a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
{
2401446e:	ed8d 0a01 	vstr	s0, [sp, #4]
    unholy.f = a;
24014472:	9b01      	ldr	r3, [sp, #4]
    s = f * f;
    /* Compute log1p(f) for f in [-1/3, 1/3] */
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
24014474:	ed9f 5a13 	vldr	s10, [pc, #76]	; 240144c4 <my_faster_logf+0x60>
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
24014478:	4419      	add	r1, r3
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
2401447a:	ed9f 6a13 	vldr	s12, [pc, #76]	; 240144c8 <my_faster_logf+0x64>
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
2401447e:	eddf 6a13 	vldr	s13, [pc, #76]	; 240144cc <my_faster_logf+0x68>
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
24014482:	400a      	ands	r2, r1
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
24014484:	ed9f 7a12 	vldr	s14, [pc, #72]	; 240144d0 <my_faster_logf+0x6c>
    r = fmaf (r, s, t);
    r = fmaf (r, s, f);
    r = fmaf (i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
24014488:	eddf 5a12 	vldr	s11, [pc, #72]	; 240144d4 <my_faster_logf+0x70>
    unholy2.i = (unholy.i - e);
2401448c:	1a9b      	subs	r3, r3, r2
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
2401448e:	ee07 2a90 	vmov	s15, r2
    unholy2.i = (unholy.i - e);
24014492:	ee00 3a10 	vmov	s0, r3
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
24014496:	eefa 7ae4 	vcvt.f32.s32	s15, s15, #23
    f = m - 1.0f;
2401449a:	ee30 0a64 	vsub.f32	s0, s0, s9
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
2401449e:	eee5 6a00 	vfma.f32	s13, s10, s0
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
240144a2:	eea6 7a00 	vfma.f32	s14, s12, s0
    s = f * f;
240144a6:	ee20 6a00 	vmul.f32	s12, s0, s0
    r = fmaf (r, s, t);
240144aa:	eea6 7a86 	vfma.f32	s14, s13, s12
    r = fmaf (r, s, f);
240144ae:	eea7 0a06 	vfma.f32	s0, s14, s12
    return r;
}
240144b2:	eea7 0aa5 	vfma.f32	s0, s15, s11
240144b6:	b002      	add	sp, #8
240144b8:	4770      	bx	lr
240144ba:	bf00      	nop
240144bc:	c0d55555 	.word	0xc0d55555
240144c0:	ff800000 	.word	0xff800000
240144c4:	3e6c6078 	.word	0x3e6c6078
240144c8:	3ea9e51a 	.word	0x3ea9e51a
240144cc:	be8ef46d 	.word	0xbe8ef46d
240144d0:	beff712d 	.word	0xbeff712d
240144d4:	3f317218 	.word	0x3f317218

240144d8 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
inline Lfloat fastsqrtf(Lfloat x)
{
	union { Lfloat f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240144d8:	ee10 2a10 	vmov	r2, s0
240144dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
240144e0:	4b0d      	ldr	r3, [pc, #52]	; (24014518 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
240144e2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
240144e6:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
240144ea:	ee60 7a27 	vmul.f32	s15, s0, s15
240144ee:	ee00 3a10 	vmov	s0, r3
240144f2:	ee67 7a80 	vmul.f32	s15, s15, s0
240144f6:	eea0 7a67 	vfms.f32	s14, s0, s15
240144fa:	ee60 7a07 	vmul.f32	s15, s0, s14
240144fe:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
24014502:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
24014506:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
2401450a:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
2401450e:	336e      	adds	r3, #110	; 0x6e
}
24014510:	ee00 3a10 	vmov	s0, r3
24014514:	4770      	bx	lr
24014516:	bf00      	nop
24014518:	5f3759df 	.word	0x5f3759df

2401451c <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
2401451c:	ee10 3a10 	vmov	r3, s0
24014520:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
24014524:	ee00 3a10 	vmov	s0, r3
}
24014528:	4770      	bx	lr
2401452a:	bf00      	nop

2401452c <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline Lfloat fasterexpf(Lfloat x) {
    x = 1.0f + (x * 0.00390625f);
2401452c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24014530:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 2401455c <fasterexpf+0x30>
24014534:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
24014538:	ee27 0aa7 	vmul.f32	s0, s15, s15
2401453c:	ee20 0a00 	vmul.f32	s0, s0, s0
24014540:	ee20 0a00 	vmul.f32	s0, s0, s0
24014544:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
24014548:	ee20 0a00 	vmul.f32	s0, s0, s0
2401454c:	ee20 0a00 	vmul.f32	s0, s0, s0
24014550:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
24014554:	ee20 0a00 	vmul.f32	s0, s0, s0
24014558:	4770      	bx	lr
2401455a:	bf00      	nop
2401455c:	3b800000 	.word	0x3b800000

24014560 <fastExp3>:

inline Lfloat fastExp3(Lfloat x)  // cubic spline approximation
{
    union { Lfloat f; int32_t i; } reinterpreter;

    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
24014560:	eddf 7a10 	vldr	s15, [pc, #64]	; 240145a4 <fastExp3+0x44>
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    // empirical values for small maximum relative error (8.34e-5):
    reinterpreter.i +=
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24014564:	f240 4cfd 	movw	ip, #1277	; 0x4fd
24014568:	f643 11e9 	movw	r1, #14825	; 0x39e9
2401456c:	4b0e      	ldr	r3, [pc, #56]	; (240145a8 <fastExp3+0x48>)
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401456e:	ee20 0a27 	vmul.f32	s0, s0, s15
24014572:	eefd 7ac0 	vcvt.s32.f32	s15, s0
24014576:	ee17 2a90 	vmov	r2, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
2401457a:	f3c2 10cf 	ubfx	r0, r2, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
2401457e:	f102 527e 	add.w	r2, r2, #1065353216	; 0x3f800000
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
24014582:	fb0c fc00 	mul.w	ip, ip, r0
24014586:	eb01 31ac 	add.w	r1, r1, ip, asr #14
2401458a:	fb00 f101 	mul.w	r1, r0, r1
2401458e:	eb03 33a1 	add.w	r3, r3, r1, asr #14
24014592:	fb00 f303 	mul.w	r3, r0, r3
24014596:	12db      	asrs	r3, r3, #11
24014598:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    return reinterpreter.f;
2401459c:	4413      	add	r3, r2
2401459e:	ee00 3a10 	vmov	s0, r3
}
240145a2:	4770      	bx	lr
240145a4:	4b38aa3b 	.word	0x4b38aa3b
240145a8:	fffec87b 	.word	0xfffec87b

240145ac <fastExp4>:

inline Lfloat fastExp4(Lfloat x)  // quartic spline approximation
{
    union { Lfloat f; int32_t i; } reinterpreter;

    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
240145ac:	eddf 7a12 	vldr	s15, [pc, #72]	; 240145f8 <fastExp4+0x4c>
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    // empirical values for small maximum relative error (1.21e-5):
    reinterpreter.i += (((((((((((3537*m) >> 16)
240145b0:	f640 5cd1 	movw	ip, #3537	; 0xdd1
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
240145b4:	f243 5264 	movw	r2, #13668	; 0x3564
240145b8:	f643 51c9 	movw	r1, #15817	; 0x3dc9
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
240145bc:	ee20 0a27 	vmul.f32	s0, s0, s15
240145c0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
240145c4:	ee17 3a90 	vmov	r3, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
240145c8:	f3c3 10cf 	ubfx	r0, r3, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
240145cc:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
    reinterpreter.i += (((((((((((3537*m) >> 16)
240145d0:	fb0c fc00 	mul.w	ip, ip, r0
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
240145d4:	eb02 422c 	add.w	r2, r2, ip, asr #16
240145d8:	fb00 f202 	mul.w	r2, r0, r2
240145dc:	eb01 41a2 	add.w	r1, r1, r2, asr #18
240145e0:	4a06      	ldr	r2, [pc, #24]	; (240145fc <fastExp4+0x50>)
240145e2:	fb00 f101 	mul.w	r1, r0, r1
240145e6:	eb02 32a1 	add.w	r2, r2, r1, asr #14
240145ea:	fb00 f202 	mul.w	r2, r0, r2
    return reinterpreter.f;
240145ee:	eb03 23e2 	add.w	r3, r3, r2, asr #11
240145f2:	ee00 3a10 	vmov	s0, r3
}
240145f6:	4770      	bx	lr
240145f8:	4b38aa3b 	.word	0x4b38aa3b
240145fc:	fffec5aa 	.word	0xfffec5aa

24014600 <fast_sinf2>:
inline Lfloat fast_sinf2(Lfloat x)
{
	Lfloat invert = 1.0f;
	Lfloat out;

	x = x * INV_TWO_PI_TIMES_SINE_TABLE_SIZE;
24014600:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 24014678 <fast_sinf2+0x78>
24014604:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24014608:	ee20 0b07 	vmul.f64	d0, d0, d7
2401460c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

	if (x < 0.0f)
24014610:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24014614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014618:	d426      	bmi.n	24014668 <fast_sinf2+0x68>
	Lfloat invert = 1.0f;
2401461a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	{
		x *= -1.0f;
		invert = -1.0f;
	}
	int intX = ((int)x) & 2047;
2401461e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	int intXNext = (intX + 1) & 2047;
	Lfloat LfloatX = x-intX;

	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24014622:	4a17      	ldr	r2, [pc, #92]	; (24014680 <fast_sinf2+0x80>)
	int intX = ((int)x) & 2047;
24014624:	ee17 3a90 	vmov	r3, s15
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24014628:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	int intX = ((int)x) & 2047;
2401462c:	f3c3 030a 	ubfx	r3, r3, #0, #11
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24014630:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int intXNext = (intX + 1) & 2047;
24014634:	1c59      	adds	r1, r3, #1
	Lfloat LfloatX = x-intX;
24014636:	ee07 3a10 	vmov	s14, r3
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
2401463a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	Lfloat LfloatX = x-intX;
2401463e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int intXNext = (intX + 1) & 2047;
24014642:	f3c1 010a 	ubfx	r1, r1, #0, #11
	out += __leaf_table_sinewave[intXNext] * LfloatX;
24014646:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	Lfloat LfloatX = x-intX;
2401464a:	ee30 0a47 	vsub.f32	s0, s0, s14
	out += __leaf_table_sinewave[intXNext] * LfloatX;
2401464e:	ed92 6a00 	vldr	s12, [r2]
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
24014652:	ee77 7a87 	vadd.f32	s15, s15, s14
	out += __leaf_table_sinewave[intXNext] * LfloatX;
24014656:	ed93 7a00 	vldr	s14, [r3]
2401465a:	ee20 0a06 	vmul.f32	s0, s0, s12
2401465e:	eea7 0a27 	vfma.f32	s0, s14, s15
	out *= invert;
	return out;
}
24014662:	ee26 0a80 	vmul.f32	s0, s13, s0
24014666:	4770      	bx	lr
		x *= -1.0f;
24014668:	eeb1 0a40 	vneg.f32	s0, s0
		invert = -1.0f;
2401466c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
24014670:	e7d5      	b.n	2401461e <fast_sinf2+0x1e>
24014672:	bf00      	nop
24014674:	f3af 8000 	nop.w
24014678:	6dc9c883 	.word	0x6dc9c883
2401467c:	40745f30 	.word	0x40745f30
24014680:	24028330 	.word	0x24028330

24014684 <fastPowf>:
    { 
        Lfloat d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
24014684:	ee10 3a10 	vmov	r3, s0
24014688:	ed9f 7a08 	vldr	s14, [pc, #32]	; 240146ac <fastPowf+0x28>
2401468c:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
24014690:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
24014694:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
24014698:	330b      	adds	r3, #11
2401469a:	ee07 3a90 	vmov	s15, r3
2401469e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240146a2:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
240146a6:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
240146aa:	4770      	bx	lr
240146ac:	4e7de250 	.word	0x4e7de250

240146b0 <LEAF_crossfade>:
 when t = 0, volumes[0] = 0.707, volumes[1] = 0.707 (equal-power cross fade)
 when t = 1, volumes[0] = 1, volumes[1] = 0
 */

inline void LEAF_crossfade(Lfloat fade, Lfloat* volumes) {
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
240146b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240146b4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
240146b8:	ee30 7a27 	vadd.f32	s14, s0, s15
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
240146bc:	ee37 0ac0 	vsub.f32	s0, s15, s0
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
240146c0:	ee67 7a26 	vmul.f32	s15, s14, s13
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
240146c4:	ee20 0a26 	vmul.f32	s0, s0, s13
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
240146c8:	eeb1 7ae7 	vsqrt.f32	s14, s15
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
240146cc:	eef1 7ac0 	vsqrt.f32	s15, s0
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
240146d0:	ed80 7a00 	vstr	s14, [r0]
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
240146d4:	edc0 7a01 	vstr	s15, [r0, #4]
}
240146d8:	4770      	bx	lr
240146da:	bf00      	nop

240146dc <LEAF_shaper>:
#else
		inline Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
240146dc:	eddf 7a1e 	vldr	s15, [pc, #120]	; 24014758 <LEAF_shaper+0x7c>
240146e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
240146e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240146e8:	d406      	bmi.n	240146f8 <LEAF_shaper+0x1c>
    {
        return min;
    }
    else if (val > max)
240146ea:	eddf 7a1c 	vldr	s15, [pc, #112]	; 2401475c <LEAF_shaper+0x80>
240146ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
240146f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240146f6:	dd02      	ble.n	240146fe <LEAF_shaper+0x22>
240146f8:	ed9f 0a19 	vldr	s0, [pc, #100]	; 24014760 <LEAF_shaper+0x84>
}
240146fc:	4770      	bx	lr
    Lfloat fx = input * 2.0f;    // prescale
240146fe:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
24014702:	eddf 4a18 	vldr	s9, [pc, #96]	; 24014764 <LEAF_shaper+0x88>
24014706:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
2401470a:	eddf 3a17 	vldr	s7, [pc, #92]	; 24014768 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
2401470e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    xc2 = xc*xc;
24014712:	ee20 6a00 	vmul.f32	s12, s0, s0
    c = 0.5f*fx*(3.0f - (xc2));
24014716:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
2401471a:	eeb6 5a08 	vmov.f32	s10, #104	; 0x3f400000  0.750
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401471e:	ee26 4a06 	vmul.f32	s8, s12, s12
24014722:	ee66 6ac6 	vnmul.f32	s13, s13, s12
    c = 0.5f*fx*(3.0f - (xc2));
24014726:	ee37 7a46 	vsub.f32	s14, s14, s12
2401472a:	ee60 7a27 	vmul.f32	s15, s0, s15
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401472e:	eee4 6a24 	vfma.f32	s13, s8, s9
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24014732:	ee70 0a85 	vadd.f32	s1, s1, s10
24014736:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 2401476c <LEAF_shaper+0x90>
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401473a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    c = 0.5f*fx*(3.0f - (xc2));
2401473e:	ee67 7a27 	vmul.f32	s15, s14, s15
24014742:	ee20 0aa3 	vmul.f32	s0, s1, s7
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
24014746:	eee6 7a05 	vfma.f32	s15, s12, s10
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
2401474a:	ee36 7aa5 	vadd.f32	s14, s13, s11
2401474e:	ee20 0a07 	vmul.f32	s0, s0, s14
    shaperOut *= 0.5f;    // post_scale
24014752:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return max;
    }
    else
    {
        return val;
24014756:	4770      	bx	lr
24014758:	bfb504f3 	.word	0xbfb504f3
2401475c:	3fb504f3 	.word	0x3fb504f3
24014760:	00000000 	.word	0x00000000
24014764:	3c800000 	.word	0x3c800000
24014768:	3f272f05 	.word	0x3f272f05
2401476c:	3d4ccccd 	.word	0x3d4ccccd

24014770 <LEAF_round>:
    rnd = fabsf(rnd);
24014770:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
24014774:	eddf 7a06 	vldr	s15, [pc, #24]	; 24014790 <LEAF_round+0x20>
24014778:	eef4 0ae7 	vcmpe.f32	s1, s15
2401477c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014780:	d905      	bls.n	2401478e <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
24014782:	eec0 7a20 	vdiv.f32	s15, s0, s1
24014786:	fef8 7a67 	vrinta.f32	s15, s15
2401478a:	ee27 0aa0 	vmul.f32	s0, s15, s1
}
2401478e:	4770      	bx	lr
24014790:	33d6bf95 	.word	0x33d6bf95

24014794 <LEAF_bitwise_xor>:
    return unholy.f;
24014794:	ee10 3a10 	vmov	r3, s0
24014798:	4043      	eors	r3, r0
2401479a:	ee00 3a10 	vmov	s0, r3
}
2401479e:	4770      	bx	lr

240147a0 <LEAF_clip>:
    if (val < min)
240147a0:	eef4 0ac0 	vcmpe.f32	s1, s0
240147a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240147a8:	d401      	bmi.n	240147ae <LEAF_clip+0xe>
    else if (val > max)
240147aa:	fe80 0ac1 	vminnm.f32	s0, s1, s2
    }
}
240147ae:	4770      	bx	lr

240147b0 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
inline Lfloat LEAF_tanh(Lfloat x)
{
    
    if( x < -3.0f )
240147b0:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
240147b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
240147b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240147bc:	d418      	bmi.n	240147f0 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
240147be:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
240147c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
240147c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240147ca:	dd02      	ble.n	240147d2 <LEAF_tanh+0x22>
        return 1.0f;
240147cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
240147d0:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
240147d2:	ee60 6a00 	vmul.f32	s13, s0, s0
240147d6:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
240147da:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
240147de:	ee36 7aa7 	vadd.f32	s14, s13, s15
240147e2:	eee6 7a86 	vfma.f32	s15, s13, s12
240147e6:	ee27 7a00 	vmul.f32	s14, s14, s0
240147ea:	ee87 0a27 	vdiv.f32	s0, s14, s15
240147ee:	4770      	bx	lr
        return -1.0f;
240147f0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240147f4:	4770      	bx	lr
240147f6:	bf00      	nop

240147f8 <fast_tanh4>:

//from antto on KVR forum
inline Lfloat   fast_tanh4 (Lfloat x)
{
    Lfloat xa = fabsf(x);
    Lfloat x2 = xa * xa;
240147f8:	ee60 6a00 	vmul.f32	s13, s0, s0
240147fc:	ed9f 4a11 	vldr	s8, [pc, #68]	; 24014844 <fast_tanh4+0x4c>
    Lfloat xa = fabsf(x);
24014800:	eeb0 7ac0 	vabs.f32	s14, s0
    Lfloat x3 = xa * x2;
24014804:	eddf 4a10 	vldr	s9, [pc, #64]	; 24014848 <fast_tanh4+0x50>
24014808:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2401480c:	eddf 5a0f 	vldr	s11, [pc, #60]	; 2401484c <fast_tanh4+0x54>
    Lfloat x4 = x2 * x2;
24014810:	ee26 5aa6 	vmul.f32	s10, s13, s13
24014814:	ee77 7a26 	vadd.f32	s15, s14, s13
    Lfloat x3 = xa * x2;
24014818:	ee27 7a26 	vmul.f32	s14, s14, s13
    Lfloat x7 = x3 * x4;
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
2401481c:	eee5 5a04 	vfma.f32	s11, s10, s8
24014820:	ee77 7a86 	vadd.f32	s15, s15, s12
    Lfloat   result = (x < 0) ? -res : res;
24014824:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24014828:	eee5 7a24 	vfma.f32	s15, s10, s9
2401482c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
24014830:	eee7 7a25 	vfma.f32	s15, s14, s11
24014834:	ee86 7a27 	vdiv.f32	s14, s12, s15
24014838:	bf54      	ite	pl
2401483a:	ee36 0a47 	vsubpl.f32	s0, s12, s14
    Lfloat   result = (x < 0) ? -res : res;
2401483e:	ee37 0a46 	vsubmi.f32	s0, s14, s12

    return (result);
}
24014842:	4770      	bx	lr
24014844:	3d6b71bb 	.word	0x3d6b71bb
24014848:	3f0dee8b 	.word	0x3f0dee8b
2401484c:	3f15f4d3 	.word	0x3f15f4d3

24014850 <fast_tanh5>:

//from raphx on this post : https://www.kvraudio.com/forum/viewtopic.php?t=332930&start=30
inline Lfloat fast_tanh5(Lfloat x)
{
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
24014850:	ee60 7a00 	vmul.f32	s15, s0, s0
24014854:	ed9f 6a09 	vldr	s12, [pc, #36]	; 2401487c <fast_tanh5+0x2c>
24014858:	eddf 6a09 	vldr	s13, [pc, #36]	; 24014880 <fast_tanh5+0x30>
	return a / sqrtf(1.0f + a * a);
2401485c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014860:	eee7 6a86 	vfma.f32	s13, s15, s12
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
24014864:	ee67 7a80 	vmul.f32	s15, s15, s0
24014868:	eea7 0aa6 	vfma.f32	s0, s15, s13
	return a / sqrtf(1.0f + a * a);
2401486c:	eea0 7a00 	vfma.f32	s14, s0, s0
24014870:	eef1 7ac7 	vsqrt.f32	s15, s14
}
24014874:	ee80 0a27 	vdiv.f32	s0, s0, s15
24014878:	4770      	bx	lr
2401487a:	bf00      	nop
2401487c:	3c217586 	.word	0x3c217586
24014880:	3e28d927 	.word	0x3e28d927

24014884 <fastSine>:
//from Olli Niemitalo
//https://dsp.stackexchange.com/questions/46629/finding-polynomial-approximations-of-a-sine-wave
Lfloat fastSine(Lfloat x)
{
	Lfloat term1 = x * 1.570034357f;
	Lfloat term2 = x * x * x * -0.6425216143f;
24014884:	ee60 7a00 	vmul.f32	s15, s0, s0
24014888:	eddf 6a08 	vldr	s13, [pc, #32]	; 240148ac <fastSine+0x28>
2401488c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 240148b0 <fastSine+0x2c>
24014890:	ee60 6a26 	vmul.f32	s13, s0, s13
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
	return term1+term2+term3;
24014894:	ed9f 6a07 	vldr	s12, [pc, #28]	; 240148b4 <fastSine+0x30>
	Lfloat term2 = x * x * x * -0.6425216143f;
24014898:	ee67 7a80 	vmul.f32	s15, s15, s0
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
2401489c:	eea7 7aa6 	vfma.f32	s14, s15, s13
	return term1+term2+term3;
240148a0:	ee20 0a07 	vmul.f32	s0, s0, s14
}
240148a4:	eea7 0a86 	vfma.f32	s0, s15, s12
240148a8:	4770      	bx	lr
240148aa:	bf00      	nop
240148ac:	3d947433 	.word	0x3d947433
240148b0:	3fc8f6e3 	.word	0x3fc8f6e3
240148b4:	bf247c4c 	.word	0xbf247c4c

240148b8 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
240148b8:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
240148ba:	1e4b      	subs	r3, r1, #1
240148bc:	ee31 1a60 	vsub.f32	s2, s2, s1
    Lfloat x = start;
    for (int i = 0; i < size; i++)
240148c0:	2900      	cmp	r1, #0
    Lfloat increment = (end - start) / (Lfloat)(size-1);
240148c2:	ee07 3a90 	vmov	s15, r3
240148c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
240148ca:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
240148ce:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
240148d2:	dd16      	ble.n	24014902 <LEAF_generate_exp+0x4a>
240148d4:	4604      	mov	r4, r0
240148d6:	eb00 0581 	add.w	r5, r0, r1, lsl #2
240148da:	eeb0 8a60 	vmov.f32	s16, s1
240148de:	eef0 8a40 	vmov.f32	s17, s0
240148e2:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
240148e6:	eef0 0a48 	vmov.f32	s1, s16
240148ea:	eeb0 0a68 	vmov.f32	s0, s17
240148ee:	f005 fb0b 	bl	24019f08 <powf>
240148f2:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
240148f6:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
240148fa:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
240148fe:	42a5      	cmp	r5, r4
24014900:	d1f1      	bne.n	240148e6 <LEAF_generate_exp+0x2e>
    }
}
24014902:	ecbd 8b04 	vpop	{d8-d9}
24014906:	bd38      	pop	{r3, r4, r5, pc}

24014908 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
24014908:	b538      	push	{r3, r4, r5, lr}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
2401490a:	ee31 1a40 	vsub.f32	s2, s2, s0
{
2401490e:	460d      	mov	r5, r1
24014910:	4604      	mov	r4, r0
24014912:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
24014916:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
2401491a:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
2401491e:	ee81 0a29 	vdiv.f32	s0, s2, s19
24014922:	f005 f8ed 	bl	24019b00 <logf>
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24014926:	1e6b      	subs	r3, r5, #1
    Lfloat x = 0.0000000001f;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
24014928:	2d00      	cmp	r5, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
2401492a:	ee07 3a90 	vmov	s15, r3
2401492e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24014936:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
2401493a:	dd1e      	ble.n	2401497a <LEAF_generate_table_skew_non_sym+0x72>
2401493c:	eddf 7a10 	vldr	s15, [pc, #64]	; 24014980 <LEAF_generate_table_skew_non_sym+0x78>
24014940:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    Lfloat x = 0.0000000001f;
24014944:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 24014984 <LEAF_generate_table_skew_non_sym+0x7c>
24014948:	eeb0 9a40 	vmov.f32	s18, s0
    for (int i = 0; i < size; i++)
2401494c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 24014988 <LEAF_generate_table_skew_non_sym+0x80>
24014950:	ee29 9a27 	vmul.f32	s18, s18, s15
24014954:	e001      	b.n	2401495a <LEAF_generate_table_skew_non_sym+0x52>
    {
        proportion = expf (logf(x) / skew);
24014956:	f005 f8d3 	bl	24019b00 <logf>
2401495a:	ee29 0a00 	vmul.f32	s0, s18, s0
2401495e:	f005 f85b 	bl	24019a18 <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
24014962:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
24014966:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
2401496a:	eee9 7a80 	vfma.f32	s15, s19, s0
        proportion = expf (logf(x) / skew);
2401496e:	eeb0 0a48 	vmov.f32	s0, s16
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
24014972:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24014976:	42a5      	cmp	r5, r4
24014978:	d1ed      	bne.n	24014956 <LEAF_generate_table_skew_non_sym+0x4e>
    }
}
2401497a:	ecbd 8b06 	vpop	{d8-d10}
2401497e:	bd38      	pop	{r3, r4, r5, pc}
24014980:	bfb8aa3b 	.word	0xbfb8aa3b
24014984:	2edbe6ff 	.word	0x2edbe6ff
24014988:	c1b834f1 	.word	0xc1b834f1

2401498c <LEAF_generate_atodb>:


void LEAF_generate_atodb(Lfloat* buffer, int size, Lfloat min, Lfloat max)
{
2401498c:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
2401498e:	1e4b      	subs	r3, r1, #1
24014990:	ee70 0ac0 	vsub.f32	s1, s1, s0
    Lfloat x = min;
    for (int i = 0; i < size; i++)
24014994:	2900      	cmp	r1, #0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
24014996:	ee07 3a90 	vmov	s15, r3
2401499a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
2401499e:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
240149a2:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
240149a6:	dd12      	ble.n	240149ce <LEAF_generate_atodb+0x42>
240149a8:	4604      	mov	r4, r0
240149aa:	eb00 0581 	add.w	r5, r0, r1, lsl #2
240149ae:	eeb0 8a40 	vmov.f32	s16, s0
}


Lfloat atodb(Lfloat a)
{
    return 20.0f*log10f(a);
240149b2:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
240149b6:	eeb0 0a48 	vmov.f32	s0, s16
240149ba:	f005 fc4b 	bl	2401a254 <log10f>
240149be:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
240149c2:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
240149c6:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
240149ca:	42a5      	cmp	r5, r4
240149cc:	d1f3      	bne.n	240149b6 <LEAF_generate_atodb+0x2a>
}
240149ce:	ecbd 8b04 	vpop	{d8-d9}
240149d2:	bd38      	pop	{r3, r4, r5, pc}

240149d4 <LEAF_generate_dbtoa>:
{
240149d4:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
240149d6:	1e4b      	subs	r3, r1, #1
240149d8:	ee70 0ac0 	vsub.f32	s1, s1, s0
    for (int i = 0; i < size; i++)
240149dc:	2900      	cmp	r1, #0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
240149de:	ee07 3a90 	vmov	s15, r3
240149e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
240149e6:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
240149ea:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
240149ee:	dd14      	ble.n	24014a1a <LEAF_generate_dbtoa+0x46>
240149f0:	4604      	mov	r4, r0
	return 20.0f*log10f_fast(a);
}

inline Lfloat dbtoa(Lfloat db)
{
    return powf(10.0f, db * 0.05f);
240149f2:	eddf 9a0b 	vldr	s19, [pc, #44]	; 24014a20 <LEAF_generate_dbtoa+0x4c>
240149f6:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 24014a24 <LEAF_generate_dbtoa+0x50>
240149fa:	eb00 0581 	add.w	r5, r0, r1, lsl #2
240149fe:	eeb0 8a40 	vmov.f32	s16, s0
24014a02:	ee28 0a29 	vmul.f32	s0, s16, s19
        x += increment;
24014a06:	ee38 8a28 	vadd.f32	s16, s16, s17
    return powf(10.0f, db * 0.05f);
24014a0a:	ee20 0a09 	vmul.f32	s0, s0, s18
24014a0e:	f005 f803 	bl	24019a18 <expf>
        buffer[i] = dbtoa(x);
24014a12:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
24014a16:	42a5      	cmp	r5, r4
24014a18:	d1f3      	bne.n	24014a02 <LEAF_generate_dbtoa+0x2e>
}
24014a1a:	ecbd 8b04 	vpop	{d8-d9}
24014a1e:	bd38      	pop	{r3, r4, r5, pc}
24014a20:	3d4ccccd 	.word	0x3d4ccccd
24014a24:	40135d8e 	.word	0x40135d8e

24014a28 <LEAF_generate_mtof>:
{
24014a28:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24014a2a:	1e4b      	subs	r3, r1, #1
24014a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (int i = 0; i < size; i++)
24014a30:	2900      	cmp	r1, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24014a32:	ee07 3a90 	vmov	s15, r3
24014a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
24014a3a:	ed2d 8b0a 	vpush	{d8-d12}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
24014a3e:	eec7 aa27 	vdiv.f32	s21, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
24014a42:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
24014a46:	dd29      	ble.n	24014a9c <LEAF_generate_mtof+0x74>
    Lfloat x = 0.0f;
24014a48:	ed9f 9a19 	vldr	s18, [pc, #100]	; 24014ab0 <LEAF_generate_mtof+0x88>
24014a4c:	eef0 9a40 	vmov.f32	s19, s0
24014a50:	4604      	mov	r4, r0
    if (f <= -1500.0f) return(0);
24014a52:	eddf 8a18 	vldr	s17, [pc, #96]	; 24014ab4 <LEAF_generate_mtof+0x8c>
24014a56:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
24014a5a:	ed9f 8a17 	vldr	s16, [pc, #92]	; 24014ab8 <LEAF_generate_mtof+0x90>
24014a5e:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
24014a62:	ed9f ca16 	vldr	s24, [pc, #88]	; 24014abc <LEAF_generate_mtof+0x94>
24014a66:	eddf ba16 	vldr	s23, [pc, #88]	; 24014ac0 <LEAF_generate_mtof+0x98>
        Lfloat midiVal = (x * scalar) + startMIDI;
24014a6a:	eeb0 0a69 	vmov.f32	s0, s19
24014a6e:	eeaa 0a09 	vfma.f32	s0, s20, s18
Lfloat mtof(Lfloat f)
24014a72:	e006      	b.n	24014a82 <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
24014a74:	eeb4 0ac8 	vcmpe.f32	s0, s16
24014a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014a7c:	dd11      	ble.n	24014aa2 <LEAF_generate_mtof+0x7a>
24014a7e:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
24014a82:	eeb4 0ae8 	vcmpe.f32	s0, s17
24014a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014a8a:	d8f3      	bhi.n	24014a74 <LEAF_generate_mtof+0x4c>
24014a8c:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
24014a90:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
24014a94:	42ac      	cmp	r4, r5
        x += increment;
24014a96:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
24014a9a:	d1e6      	bne.n	24014a6a <LEAF_generate_mtof+0x42>
}
24014a9c:	ecbd 8b0a 	vpop	{d8-d12}
24014aa0:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
24014aa2:	ee20 0a0c 	vmul.f32	s0, s0, s24
24014aa6:	f004 ffb7 	bl	24019a18 <expf>
24014aaa:	ee60 7a2b 	vmul.f32	s15, s0, s23
24014aae:	e7ef      	b.n	24014a90 <LEAF_generate_mtof+0x68>
24014ab0:	00000000 	.word	0x00000000
24014ab4:	c4bb8000 	.word	0xc4bb8000
24014ab8:	44bb6000 	.word	0x44bb6000
24014abc:	3d6c9820 	.word	0x3d6c9820
24014ac0:	4102d013 	.word	0x4102d013

24014ac4 <LEAF_poly_blep>:
    dt = fabsf(dt);
24014ac4:	eef0 0ae0 	vabs.f32	s1, s1
        if (t < dt)
24014ac8:	eef4 0ac0 	vcmpe.f32	s1, s0
24014acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014ad0:	dc18      	bgt.n	24014b04 <LEAF_poly_blep+0x40>
        else if (t > 1.0f - dt)
24014ad2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24014ad6:	ee77 7a60 	vsub.f32	s15, s14, s1
24014ada:	eef4 7ac0 	vcmpe.f32	s15, s0
24014ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014ae2:	d50c      	bpl.n	24014afe <LEAF_poly_blep+0x3a>
            t = (t - 1.0f) / dt;
24014ae4:	ee70 7a47 	vsub.f32	s15, s0, s14
            return t*t + t+t + 1.0f;
24014ae8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
            t = (t - 1.0f) / dt;
24014aec:	ee87 6aa0 	vdiv.f32	s12, s15, s1
            return t*t + t+t + 1.0f;
24014af0:	ee76 7a26 	vadd.f32	s15, s12, s13
24014af4:	eea7 7a86 	vfma.f32	s14, s15, s12
24014af8:	eeb0 0a47 	vmov.f32	s0, s14
24014afc:	4770      	bx	lr
        else return 0.0f;
24014afe:	ed9f 0a07 	vldr	s0, [pc, #28]	; 24014b1c <LEAF_poly_blep+0x58>
}
24014b02:	4770      	bx	lr
            t /= dt;
24014b04:	ee80 7a20 	vdiv.f32	s14, s0, s1
            return t+t - t*t - 1.0f;
24014b08:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
24014b0c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24014b10:	ee77 7ac7 	vsub.f32	s15, s15, s14
24014b14:	eea7 0a87 	vfma.f32	s0, s15, s14
24014b18:	4770      	bx	lr
24014b1a:	bf00      	nop
24014b1c:	00000000 	.word	0x00000000

24014b20 <LEAF_interpolate_hermite_x>:
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24014b20:	ee71 1ac0 	vsub.f32	s3, s3, s0
    Lfloat c1 = 0.5f * (yy2 - yy0);
24014b24:	ee31 6a40 	vsub.f32	s12, s2, s0
24014b28:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
24014b2c:	ee71 1aa0 	vadd.f32	s3, s3, s1
24014b30:	eef0 5a60 	vmov.f32	s11, s1
24014b34:	ee30 7ac1 	vsub.f32	s14, s1, s2
24014b38:	ee31 1ac1 	vsub.f32	s2, s3, s2
24014b3c:	eed6 5a26 	vfnms.f32	s11, s12, s13
24014b40:	eea1 7a26 	vfma.f32	s14, s2, s13
    Lfloat c2 = y0my1 + c1 - c3;
24014b44:	ee70 7a25 	vadd.f32	s15, s0, s11
24014b48:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
24014b4c:	eee7 7a02 	vfma.f32	s15, s14, s4
24014b50:	ee67 7a82 	vmul.f32	s15, s15, s4
24014b54:	eee6 7a26 	vfma.f32	s15, s12, s13
}
24014b58:	eee7 0a82 	vfma.f32	s1, s15, s4
24014b5c:	eeb0 0a60 	vmov.f32	s0, s1
24014b60:	4770      	bx	lr
24014b62:	bf00      	nop

24014b64 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
24014b64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24014b68:	ed9f 7a07 	vldr	s14, [pc, #28]	; 24014b88 <LEAF_interpolation_linear+0x24>
24014b6c:	fe81 1a67 	vminnm.f32	s2, s2, s15
24014b70:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    Lfloat omAlpha = 1.0f - alpha;
24014b74:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
24014b78:	ee61 0a20 	vmul.f32	s1, s2, s1
}
24014b7c:	eee7 0a80 	vfma.f32	s1, s15, s0
24014b80:	eeb0 0a60 	vmov.f32	s0, s1
24014b84:	4770      	bx	lr
24014b86:	bf00      	nop
24014b88:	00000000 	.word	0x00000000

24014b8c <mtof>:
    if (f <= -1500.0f) return(0);
24014b8c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24014bcc <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
24014b90:	eddf 7a0f 	vldr	s15, [pc, #60]	; 24014bd0 <mtof+0x44>
24014b94:	e006      	b.n	24014ba4 <mtof+0x18>
24014b96:	eeb4 0ae7 	vcmpe.f32	s0, s15
24014b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014b9e:	dd09      	ble.n	24014bb4 <mtof+0x28>
24014ba0:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
24014ba4:	eeb4 0ac7 	vcmpe.f32	s0, s14
24014ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014bac:	d8f3      	bhi.n	24014b96 <mtof+0xa>
24014bae:	ed9f 0a09 	vldr	s0, [pc, #36]	; 24014bd4 <mtof+0x48>
}
24014bb2:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
24014bb4:	eddf 7a08 	vldr	s15, [pc, #32]	; 24014bd8 <mtof+0x4c>
{
24014bb8:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
24014bba:	ee20 0a27 	vmul.f32	s0, s0, s15
24014bbe:	f004 ff2b 	bl	24019a18 <expf>
24014bc2:	eddf 7a06 	vldr	s15, [pc, #24]	; 24014bdc <mtof+0x50>
24014bc6:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24014bca:	bd08      	pop	{r3, pc}
24014bcc:	c4bb8000 	.word	0xc4bb8000
24014bd0:	44bb6000 	.word	0x44bb6000
24014bd4:	00000000 	.word	0x00000000
24014bd8:	3d6c9820 	.word	0x3d6c9820
24014bdc:	4102d013 	.word	0x4102d013

24014be0 <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
24014be0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
24014be4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24014c18 <faster_mtof+0x38>
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
24014be8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 24014c1c <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
24014bec:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
24014bf0:	ee67 7aa7 	vmul.f32	s15, s15, s15
24014bf4:	ee67 7aa7 	vmul.f32	s15, s15, s15
24014bf8:	ee67 7aa7 	vmul.f32	s15, s15, s15
24014bfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
24014c00:	ee67 7aa7 	vmul.f32	s15, s15, s15
24014c04:	ee67 7aa7 	vmul.f32	s15, s15, s15
24014c08:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
24014c0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
24014c10:	ee27 0a87 	vmul.f32	s0, s15, s14
24014c14:	4770      	bx	lr
24014c16:	bf00      	nop
24014c18:	396c9820 	.word	0x396c9820
24014c1c:	4102d013 	.word	0x4102d013

24014c20 <ftom>:
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24014c20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
24014c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24014c28:	dd0b      	ble.n	24014c42 <ftom+0x22>
24014c2a:	eddf 7a07 	vldr	s15, [pc, #28]	; 24014c48 <ftom+0x28>
{
24014c2e:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24014c30:	ee20 0a27 	vmul.f32	s0, s0, s15
24014c34:	f004 ff64 	bl	24019b00 <logf>
24014c38:	eddf 7a04 	vldr	s15, [pc, #16]	; 24014c4c <ftom+0x2c>
24014c3c:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24014c40:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
24014c42:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24014c50 <ftom+0x30>
}
24014c46:	4770      	bx	lr
24014c48:	3dfa7ed2 	.word	0x3dfa7ed2
24014c4c:	418a7fac 	.word	0x418a7fac
24014c50:	c4bb8000 	.word	0xc4bb8000

24014c54 <maximum>:


inline Lfloat maximum (Lfloat num1, Lfloat num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
24014c54:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
24014c58:	4770      	bx	lr
24014c5a:	bf00      	nop

24014c5c <minimum>:

inline Lfloat minimum (Lfloat num1, Lfloat num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
24014c5c:	fe80 0ac0 	vminnm.f32	s0, s1, s0
24014c60:	4770      	bx	lr
24014c62:	bf00      	nop

24014c64 <leaf_pool_init>:
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
}


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
24014c64:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24014c66:	6a03      	ldr	r3, [r0, #32]
24014c68:	2510      	movs	r5, #16
    pool->usize  = 0;
24014c6a:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24014c6c:	635d      	str	r5, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
24014c6e:	6a03      	ldr	r3, [r0, #32]
    pool->usize  = 0;
24014c70:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    if (size < pool->leaf->header_size)
24014c74:	6b5d      	ldr	r5, [r3, #52]	; 0x34
24014c76:	42aa      	cmp	r2, r5
24014c78:	bf38      	it	cc
24014c7a:	462a      	movcc	r2, r5
    pool->msize  = size;
24014c7c:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24014c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24014c80:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
24014c82:	440b      	add	r3, r1
24014c84:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
24014c86:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
24014c8a:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
24014c8c:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
24014c90:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24014c92:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
24014c94:	6183      	str	r3, [r0, #24]
}
24014c96:	4770      	bx	lr

24014c98 <mpool_alloc>:
{
24014c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
24014c9a:	684a      	ldr	r2, [r1, #4]
{
24014c9c:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
24014c9e:	6c93      	ldr	r3, [r2, #72]	; 0x48
24014ca0:	3301      	adds	r3, #1
24014ca2:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24014ca4:	694b      	ldr	r3, [r1, #20]
24014ca6:	2b00      	cmp	r3, #0
24014ca8:	d04a      	beq.n	24014d40 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24014caa:	1dc4      	adds	r4, r0, #7
24014cac:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24014cb0:	e002      	b.n	24014cb8 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
24014cb2:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24014cb4:	2b00      	cmp	r3, #0
24014cb6:	d043      	beq.n	24014d40 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
24014cb8:	68da      	ldr	r2, [r3, #12]
24014cba:	42a2      	cmp	r2, r4
24014cbc:	d3f9      	bcc.n	24014cb2 <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
24014cbe:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24014cc0:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
24014cc2:	f8dc 1004 	ldr.w	r1, [ip, #4]
24014cc6:	6b49      	ldr	r1, [r1, #52]	; 0x34
24014cc8:	4281      	cmp	r1, r0
24014cca:	d246      	bcs.n	24014d5a <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24014ccc:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24014cd0:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
24014cd2:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24014cd4:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
24014cd6:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24014cd8:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
24014cda:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
24014cde:	4429      	add	r1, r5
24014ce0:	5111      	str	r1, [r2, r4]
    node->size = size;
24014ce2:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
24014ce4:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24014ce8:	f8dc 2014 	ldr.w	r2, [ip, #20]
24014cec:	429a      	cmp	r2, r3
        pool->head = new_node;
24014cee:	bf08      	it	eq
24014cf0:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
24014cf4:	685a      	ldr	r2, [r3, #4]
24014cf6:	b10a      	cbz	r2, 24014cfc <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
24014cf8:	6899      	ldr	r1, [r3, #8]
24014cfa:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
24014cfc:	689a      	ldr	r2, [r3, #8]
24014cfe:	b10a      	cbz	r2, 24014d04 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
24014d00:	6859      	ldr	r1, [r3, #4]
24014d02:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
24014d04:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24014d06:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
24014d08:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24014d0c:	f8dc 1004 	ldr.w	r1, [ip, #4]
24014d10:	f8dc 200c 	ldr.w	r2, [ip, #12]
24014d14:	6b4c      	ldr	r4, [r1, #52]	; 0x34
24014d16:	4422      	add	r2, r4
24014d18:	4402      	add	r2, r0
24014d1a:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
24014d1e:	694a      	ldr	r2, [r1, #20]
24014d20:	42aa      	cmp	r2, r5
24014d22:	dd0b      	ble.n	24014d3c <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24014d24:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
24014d26:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
24014d28:	b14a      	cbz	r2, 24014d3e <mpool_alloc+0xa6>
24014d2a:	1e41      	subs	r1, r0, #1
24014d2c:	460a      	mov	r2, r1
24014d2e:	f801 5f01 	strb.w	r5, [r1, #1]!
24014d32:	68dc      	ldr	r4, [r3, #12]
24014d34:	3202      	adds	r2, #2
24014d36:	1a12      	subs	r2, r2, r0
24014d38:	42a2      	cmp	r2, r4
24014d3a:	d3f7      	bcc.n	24014d2c <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
24014d3c:	6818      	ldr	r0, [r3, #0]
}
24014d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
24014d40:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
24014d44:	1a9b      	subs	r3, r3, r2
24014d46:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24014d48:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24014d4c:	bf8c      	ite	hi
24014d4e:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24014d50:	2100      	movls	r1, #0
24014d52:	f004 fdbb 	bl	240198cc <LEAF_internalErrorCallback>
        return NULL;
24014d56:	2000      	movs	r0, #0
}
24014d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
24014d5a:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
24014d5c:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
24014d5e:	e7c3      	b.n	24014ce8 <mpool_alloc+0x50>

24014d60 <mpool_calloc>:
{
24014d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
24014d62:	684a      	ldr	r2, [r1, #4]
{
24014d64:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
24014d66:	6c93      	ldr	r3, [r2, #72]	; 0x48
24014d68:	3301      	adds	r3, #1
24014d6a:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
24014d6c:	694b      	ldr	r3, [r1, #20]
24014d6e:	2b00      	cmp	r3, #0
24014d70:	d044      	beq.n	24014dfc <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
24014d72:	1dc4      	adds	r4, r0, #7
24014d74:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
24014d78:	e002      	b.n	24014d80 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
24014d7a:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
24014d7c:	2b00      	cmp	r3, #0
24014d7e:	d03d      	beq.n	24014dfc <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
24014d80:	68da      	ldr	r2, [r3, #12]
24014d82:	42a2      	cmp	r2, r4
24014d84:	d3f9      	bcc.n	24014d7a <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
24014d86:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
24014d88:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
24014d8a:	f8dc 1004 	ldr.w	r1, [ip, #4]
24014d8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
24014d90:	4281      	cmp	r1, r0
24014d92:	d240      	bcs.n	24014e16 <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24014d94:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
24014d98:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
24014d9a:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
24014d9c:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
24014d9e:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
24014da0:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
24014da2:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
24014da6:	4429      	add	r1, r5
24014da8:	5111      	str	r1, [r2, r4]
    node->size = size;
24014daa:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
24014dac:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
24014db0:	f8dc 2014 	ldr.w	r2, [ip, #20]
24014db4:	429a      	cmp	r2, r3
        pool->head = new_node;
24014db6:	bf08      	it	eq
24014db8:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
24014dbc:	685a      	ldr	r2, [r3, #4]
24014dbe:	b10a      	cbz	r2, 24014dc4 <mpool_calloc+0x64>
        node->next->prev = node->prev;
24014dc0:	6899      	ldr	r1, [r3, #8]
24014dc2:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
24014dc4:	689a      	ldr	r2, [r3, #8]
24014dc6:	b10a      	cbz	r2, 24014dcc <mpool_calloc+0x6c>
        node->prev->next = node->next;
24014dc8:	6859      	ldr	r1, [r3, #4]
24014dca:	6051      	str	r1, [r2, #4]
    node->next = NULL;
24014dcc:	2200      	movs	r2, #0
    node->prev = NULL;
24014dce:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
24014dd2:	f8dc 1004 	ldr.w	r1, [ip, #4]
24014dd6:	f8dc 000c 	ldr.w	r0, [ip, #12]
24014dda:	6b49      	ldr	r1, [r1, #52]	; 0x34
24014ddc:	4401      	add	r1, r0
24014dde:	68d8      	ldr	r0, [r3, #12]
24014de0:	4401      	add	r1, r0
24014de2:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
24014de6:	68d9      	ldr	r1, [r3, #12]
24014de8:	b131      	cbz	r1, 24014df8 <mpool_calloc+0x98>
24014dea:	4610      	mov	r0, r2
24014dec:	6819      	ldr	r1, [r3, #0]
24014dee:	5488      	strb	r0, [r1, r2]
24014df0:	3201      	adds	r2, #1
24014df2:	68d9      	ldr	r1, [r3, #12]
24014df4:	4291      	cmp	r1, r2
24014df6:	d8f9      	bhi.n	24014dec <mpool_calloc+0x8c>
    return node_to_alloc->pool;
24014df8:	6818      	ldr	r0, [r3, #0]
}
24014dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
24014dfc:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
24014e00:	1a9b      	subs	r3, r3, r2
24014e02:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24014e04:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
24014e08:	bf8c      	ite	hi
24014e0a:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
24014e0c:	2100      	movls	r1, #0
24014e0e:	f004 fd5d 	bl	240198cc <LEAF_internalErrorCallback>
        return NULL;
24014e12:	2000      	movs	r0, #0
}
24014e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
24014e16:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
24014e18:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
24014e1a:	e7c9      	b.n	24014db0 <mpool_calloc+0x50>

24014e1c <mpool_free>:
{
24014e1c:	b470      	push	{r4, r5, r6}
    pool->leaf->freeCount++;
24014e1e:	684a      	ldr	r2, [r1, #4]
24014e20:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
24014e22:	3301      	adds	r3, #1
24014e24:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
24014e26:	684e      	ldr	r6, [r1, #4]
    pool->usize -= pool->leaf->header_size + freed_node->size;
24014e28:	68cb      	ldr	r3, [r1, #12]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
24014e2a:	6b72      	ldr	r2, [r6, #52]	; 0x34
24014e2c:	1a84      	subs	r4, r0, r2
    pool->usize -= pool->leaf->header_size + freed_node->size;
24014e2e:	1a9b      	subs	r3, r3, r2
24014e30:	68e2      	ldr	r2, [r4, #12]
24014e32:	1a9a      	subs	r2, r3, r2
    mpool_node_t* other_node = pool->head;
24014e34:	694b      	ldr	r3, [r1, #20]
    pool->usize -= pool->leaf->header_size + freed_node->size;
24014e36:	60ca      	str	r2, [r1, #12]
    while (other_node != NULL)
24014e38:	2b00      	cmp	r3, #0
24014e3a:	d051      	beq.n	24014ee0 <mpool_free+0xc4>
        if ((long) other_node < (long) pool->mpool ||
24014e3c:	688a      	ldr	r2, [r1, #8]
    node->next = NULL;
24014e3e:	2000      	movs	r0, #0
        if ((long) other_node < (long) pool->mpool ||
24014e40:	429a      	cmp	r2, r3
24014e42:	dc17      	bgt.n	24014e74 <mpool_free+0x58>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
24014e44:	690d      	ldr	r5, [r1, #16]
24014e46:	442a      	add	r2, r5
        if ((long) other_node < (long) pool->mpool ||
24014e48:	429a      	cmp	r2, r3
24014e4a:	d913      	bls.n	24014e74 <mpool_free+0x58>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24014e4c:	6b72      	ldr	r2, [r6, #52]	; 0x34
24014e4e:	68e6      	ldr	r6, [r4, #12]
        next_node = other_node->next;
24014e50:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24014e52:	eb02 0c06 	add.w	ip, r2, r6
24014e56:	eb0c 0604 	add.w	r6, ip, r4
24014e5a:	42b3      	cmp	r3, r6
24014e5c:	d029      	beq.n	24014eb2 <mpool_free+0x96>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
24014e5e:	68de      	ldr	r6, [r3, #12]
24014e60:	441a      	add	r2, r3
24014e62:	4432      	add	r2, r6
24014e64:	4294      	cmp	r4, r2
24014e66:	d00a      	beq.n	24014e7e <mpool_free+0x62>
    while (other_node != NULL)
24014e68:	b1e5      	cbz	r5, 24014ea4 <mpool_free+0x88>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24014e6a:	462b      	mov	r3, r5
        if ((long) other_node < (long) pool->mpool ||
24014e6c:	688a      	ldr	r2, [r1, #8]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
24014e6e:	684e      	ldr	r6, [r1, #4]
        if ((long) other_node < (long) pool->mpool ||
24014e70:	429a      	cmp	r2, r3
24014e72:	dde7      	ble.n	24014e44 <mpool_free+0x28>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
24014e74:	4630      	mov	r0, r6
24014e76:	2102      	movs	r1, #2
}
24014e78:	bc70      	pop	{r4, r5, r6}
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
24014e7a:	f004 bd27 	b.w	240198cc <LEAF_internalErrorCallback>
            other_node->size += pool->leaf->header_size + freed_node->size;
24014e7e:	4466      	add	r6, ip
24014e80:	60de      	str	r6, [r3, #12]
            if (other_node != pool->head)
24014e82:	694a      	ldr	r2, [r1, #20]
24014e84:	429a      	cmp	r2, r3
24014e86:	d028      	beq.n	24014eda <mpool_free+0xbe>
    if (node->next != NULL)
24014e88:	b10d      	cbz	r5, 24014e8e <mpool_free+0x72>
        node->next->prev = node->prev;
24014e8a:	689a      	ldr	r2, [r3, #8]
24014e8c:	60aa      	str	r2, [r5, #8]
    if (node->prev != NULL)
24014e8e:	689a      	ldr	r2, [r3, #8]
24014e90:	b10a      	cbz	r2, 24014e96 <mpool_free+0x7a>
        node->prev->next = node->next;
24014e92:	685c      	ldr	r4, [r3, #4]
24014e94:	6054      	str	r4, [r2, #4]
    node->next = NULL;
24014e96:	461c      	mov	r4, r3
    node->prev = NULL;
24014e98:	e9c3 0001 	strd	r0, r0, [r3, #4]
                other_node->next = pool->head;
24014e9c:	694a      	ldr	r2, [r1, #20]
24014e9e:	605a      	str	r2, [r3, #4]
    while (other_node != NULL)
24014ea0:	2d00      	cmp	r5, #0
24014ea2:	d1e2      	bne.n	24014e6a <mpool_free+0x4e>
    freed_node->next = pool->head;
24014ea4:	694b      	ldr	r3, [r1, #20]
24014ea6:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
24014ea8:	b103      	cbz	r3, 24014eac <mpool_free+0x90>
24014eaa:	609c      	str	r4, [r3, #8]
    pool->head = freed_node;
24014eac:	614c      	str	r4, [r1, #20]
}
24014eae:	bc70      	pop	{r4, r5, r6}
24014eb0:	4770      	bx	lr
            freed_node->size += pool->leaf->header_size + other_node->size;
24014eb2:	68da      	ldr	r2, [r3, #12]
24014eb4:	4462      	add	r2, ip
24014eb6:	60e2      	str	r2, [r4, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
24014eb8:	694a      	ldr	r2, [r1, #20]
24014eba:	429a      	cmp	r2, r3
24014ebc:	d00a      	beq.n	24014ed4 <mpool_free+0xb8>
    if (node->next != NULL)
24014ebe:	685a      	ldr	r2, [r3, #4]
24014ec0:	b10a      	cbz	r2, 24014ec6 <mpool_free+0xaa>
        node->next->prev = node->prev;
24014ec2:	689e      	ldr	r6, [r3, #8]
24014ec4:	6096      	str	r6, [r2, #8]
    if (node->prev != NULL)
24014ec6:	689a      	ldr	r2, [r3, #8]
24014ec8:	b10a      	cbz	r2, 24014ece <mpool_free+0xb2>
        node->prev->next = node->next;
24014eca:	685e      	ldr	r6, [r3, #4]
24014ecc:	6056      	str	r6, [r2, #4]
    node->prev = NULL;
24014ece:	e9c3 0001 	strd	r0, r0, [r3, #4]
}
24014ed2:	e7c9      	b.n	24014e68 <mpool_free+0x4c>
            if (other_node == pool->head) pool->head = pool->head->next;
24014ed4:	685a      	ldr	r2, [r3, #4]
24014ed6:	614a      	str	r2, [r1, #20]
24014ed8:	e7f1      	b.n	24014ebe <mpool_free+0xa2>
                pool->head = pool->head->next;
24014eda:	461c      	mov	r4, r3
24014edc:	614d      	str	r5, [r1, #20]
                freed_node = other_node;
24014ede:	e7c3      	b.n	24014e68 <mpool_free+0x4c>
    freed_node->next = pool->head;
24014ee0:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
24014ee2:	e7e3      	b.n	24014eac <mpool_free+0x90>

24014ee4 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
24014ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
24014ee6:	699f      	ldr	r7, [r3, #24]
{
24014ee8:	4606      	mov	r6, r0
24014eea:	460c      	mov	r4, r1
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24014eec:	2018      	movs	r0, #24
24014eee:	4639      	mov	r1, r7
{
24014ef0:	4615      	mov	r5, r2
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
24014ef2:	f7ff fed1 	bl	24014c98 <mpool_alloc>
24014ef6:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
24014ef8:	687b      	ldr	r3, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24014efa:	2210      	movs	r2, #16
    pool->usize  = 0;
24014efc:	2100      	movs	r1, #0
    m->leaf = mm->leaf;
24014efe:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
24014f00:	635a      	str	r2, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
24014f02:	6843      	ldr	r3, [r0, #4]
    pool->usize  = 0;
24014f04:	e9c0 4102 	strd	r4, r1, [r0, #8]
    if (size < pool->leaf->header_size)
24014f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
24014f0a:	42aa      	cmp	r2, r5
24014f0c:	bf38      	it	cc
24014f0e:	462a      	movcc	r2, r5
    pool->msize  = size;
24014f10:	6102      	str	r2, [r0, #16]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24014f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24014f14:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
24014f16:	4423      	add	r3, r4
    node->prev = prev;
24014f18:	e9c4 1101 	strd	r1, r1, [r4, #4]
    node->pool = block_location + header_size;
24014f1c:	6023      	str	r3, [r4, #0]
    node->size = size;
24014f1e:	60e2      	str	r2, [r4, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
24014f20:	6144      	str	r4, [r0, #20]
}
24014f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

24014f24 <tCycle_init>:
}

#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
24014f24:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24014f26:	698c      	ldr	r4, [r1, #24]
{
24014f28:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24014f2a:	2018      	movs	r0, #24
24014f2c:	4621      	mov	r1, r4
24014f2e:	f7ff feb3 	bl	24014c98 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
24014f32:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24014f34:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
24014f36:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
24014f3a:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24014f3c:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014f3e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24014f58 <tCycle_init+0x34>
    c->phase    =  0;
24014f42:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014f46:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24014f4a:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
24014f50:	edc0 7a04 	vstr	s15, [r0, #16]
}
24014f54:	bd38      	pop	{r3, r4, r5, pc}
24014f56:	bf00      	nop
24014f58:	4f800000 	.word	0x4f800000

24014f5c <tCycle_initToPool>:
{
24014f5c:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
24014f5e:	680c      	ldr	r4, [r1, #0]
{
24014f60:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24014f62:	2018      	movs	r0, #24
24014f64:	4621      	mov	r1, r4
24014f66:	f7ff fe97 	bl	24014c98 <mpool_alloc>
    c->inc      =  0;
24014f6a:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24014f6c:	6028      	str	r0, [r5, #0]
    c->mask = SINE_TABLE_SIZE - 1;
24014f6e:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
24014f72:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24014f74:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014f76:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24014f90 <tCycle_initToPool+0x34>
    c->phase    =  0;
24014f7a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014f7e:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24014f82:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24014f84:	ee67 7a87 	vmul.f32	s15, s15, s14
24014f88:	edc0 7a04 	vstr	s15, [r0, #16]
}
24014f8c:	bd38      	pop	{r3, r4, r5, pc}
24014f8e:	bf00      	nop
24014f90:	4f800000 	.word	0x4f800000

24014f94 <tCycle_free>:

void    tCycle_free (tCycle* const cy)
{
    _tCycle* c = *cy;
24014f94:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)c, c->mempool);
24014f96:	6801      	ldr	r1, [r0, #0]
24014f98:	f7ff bf40 	b.w	24014e1c <mpool_free>

24014f9c <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
24014f9c:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
    
    samp0 = __leaf_table_sinewave[idx];
24014f9e:	4910      	ldr	r1, [pc, #64]	; (24014fe0 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24014fa0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 24014fe4 <tCycle_tick+0x48>
    c->phase += c->inc;
24014fa4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
24014fa8:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
24014faa:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
24014fac:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
24014fae:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
24014fb2:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
24014fb4:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
24014fb8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
24014fbc:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24014fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
24014fc2:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
24014fc6:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
24014fc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24014fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
24014fd0:	ed91 7a00 	vldr	s14, [r1]
24014fd4:	ee37 7a40 	vsub.f32	s14, s14, s0
}
24014fd8:	eea7 0a27 	vfma.f32	s0, s14, s15
24014fdc:	4770      	bx	lr
24014fde:	bf00      	nop
24014fe0:	24028330 	.word	0x24028330
24014fe4:	35000004 	.word	0x35000004

24014fe8 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
24014fe8:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014fea:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
24014fee:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24014ff2:	ee20 0a27 	vmul.f32	s0, s0, s15
24014ff6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24014ffa:	ed83 0a02 	vstr	s0, [r3, #8]
}
24014ffe:	4770      	bx	lr

24015000 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
24015000:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
24015004:	ed9f 7a06 	vldr	s14, [pc, #24]	; 24015020 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
24015008:	6803      	ldr	r3, [r0, #0]
    phase -= i;
2401500a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401500e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24015012:	ee20 0a07 	vmul.f32	s0, s0, s14
24015016:	eebc 0ac0 	vcvt.u32.f32	s0, s0
2401501a:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401501e:	4770      	bx	lr
24015020:	4f800000 	.word	0x4f800000

24015024 <tCycle_setSampleRate>:

void     tCycle_setSampleRate (tCycle* const cy, Lfloat sr)
{
    _tCycle* c = *cy;
    
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
24015024:	eddf 7a0a 	vldr	s15, [pc, #40]	; 24015050 <tCycle_setSampleRate+0x2c>
    _tCycle* c = *cy;
24015028:	6803      	ldr	r3, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
2401502a:	ee87 7a80 	vdiv.f32	s14, s15, s0
    tCycle_setFreq(cy, c->freq);
2401502e:	edd3 7a03 	vldr	s15, [r3, #12]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
24015032:	ed83 7a04 	vstr	s14, [r3, #16]
    _tCycle* c = *cy;
24015036:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015038:	ed93 7a04 	vldr	s14, [r3, #16]
    c->freq  = freq;
2401503c:	edc3 7a03 	vstr	s15, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015040:	ee67 7a87 	vmul.f32	s15, s15, s14
24015044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24015048:	edc3 7a02 	vstr	s15, [r3, #8]
}
2401504c:	4770      	bx	lr
2401504e:	bf00      	nop
24015050:	4f800000 	.word	0x4f800000

24015054 <tPBTriangle_init>:

//==============================================================================

/* tTri: Anti-aliased Triangle waveform. */
void    tPBTriangle_init          (tPBTriangle* const osc, LEAF* const leaf)
{
24015054:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
24015056:	698c      	ldr	r4, [r1, #24]
{
24015058:	4605      	mov	r5, r0
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
2401505a:	2024      	movs	r0, #36	; 0x24
2401505c:	4621      	mov	r1, r4
2401505e:	f7ff fe1b 	bl	24014c98 <mpool_alloc>
24015062:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24015064:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;

    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
24015066:	2200      	movs	r2, #0
    c->invSampleRate = leaf->invSampleRate;
24015068:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->width     =  (0.5f * TWO_TO_32);
2401506a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
2401506e:	eddf 7a08 	vldr	s15, [pc, #32]	; 24015090 <tPBTriangle_init+0x3c>
    c->invSampleRate = leaf->invSampleRate;
24015072:	ed91 7a01 	vldr	s14, [r1, #4]
    c->oneMinusWidth =  c->width;
    c->freq = 0.0f;
24015076:	2100      	movs	r1, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24015078:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
2401507c:	ed80 7a07 	vstr	s14, [r0, #28]
    c->freq = 0.0f;
24015080:	60c1      	str	r1, [r0, #12]
    c->phase    =  0;
24015082:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->oneMinusWidth =  c->width;
24015086:	e9c0 3304 	strd	r3, r3, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
2401508a:	edc0 7a08 	vstr	s15, [r0, #32]
}
2401508e:	bd38      	pop	{r3, r4, r5, pc}
24015090:	4f800000 	.word	0x4f800000

24015094 <tPBTriangle_tick>:
#else
Lfloat   tPBTriangle_tick          (tPBTriangle* const osc)
#endif

{
    _tPBTriangle* c = *osc;
24015094:	6802      	ldr	r2, [r0, #0]
    Lfloat t = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    
    float y = t * 2.0f;

    if (y >= 2.0f - floatWidth) {
24015096:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
    Lfloat floatWidth = c->width * INV_TWO_TO_32;
2401509a:	eddf 5a5a 	vldr	s11, [pc, #360]	; 24015204 <tPBTriangle_tick+0x170>
    uint32_t halfWidth =(c->width >> 1);
2401509e:	6913      	ldr	r3, [r2, #16]
    float y = t * 2.0f;
240150a0:	eddf 4a59 	vldr	s9, [pc, #356]	; 24015208 <tPBTriangle_tick+0x174>
    Lfloat floatWidth = c->width * INV_TWO_TO_32;
240150a4:	ee07 3a90 	vmov	s15, r3
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
240150a8:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    Lfloat floatWidth = c->width * INV_TWO_TO_32;
240150ac:	eeb8 4a67 	vcvt.f32.u32	s8, s15
    Lfloat t = c->phase * INV_TWO_TO_32;
240150b0:	ee07 0a90 	vmov	s15, r0
    uint32_t t1 = c->phase + halfWidth;
240150b4:	eb00 0c53 	add.w	ip, r0, r3, lsr #1
    uint32_t t2 = c->phase + (4294967296u - halfWidth);
240150b8:	eba0 0353 	sub.w	r3, r0, r3, lsr #1
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
240150bc:	ee07 1a10 	vmov	s14, r1
    Lfloat t = c->phase * INV_TWO_TO_32;
240150c0:	eeb8 6a67 	vcvt.f32.u32	s12, s15
    uint32_t t1 = c->phase + halfWidth;
240150c4:	ee06 ca90 	vmov	s13, ip
    Lfloat floatWidth = c->width * INV_TWO_TO_32;
240150c8:	ee24 4a25 	vmul.f32	s8, s8, s11
    uint32_t t2 = c->phase + (4294967296u - halfWidth);
240150cc:	ee07 3a90 	vmov	s15, r3
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
240150d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    float y = t * 2.0f;
240150d4:	ee26 6a24 	vmul.f32	s12, s12, s9
    if (y >= 2.0f - floatWidth) {
240150d8:	ee75 4a44 	vsub.f32	s9, s10, s8
    Lfloat t1F = t1 * INV_TWO_TO_32;
240150dc:	eef8 6a66 	vcvt.f32.u32	s13, s13
    Lfloat t2F = t2 * INV_TWO_TO_32;
240150e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    if (y >= 2.0f - floatWidth) {
240150e4:	eef4 4ac6 	vcmpe.f32	s9, s12
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
240150e8:	ee27 7a25 	vmul.f32	s14, s14, s11
    Lfloat t1F = t1 * INV_TWO_TO_32;
240150ec:	ee66 6aa5 	vmul.f32	s13, s13, s11
    if (y >= 2.0f - floatWidth) {
240150f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t2F = t2 * INV_TWO_TO_32;
240150f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
    if (y >= 2.0f - floatWidth) {
240150f8:	d83c      	bhi.n	24015174 <tPBTriangle_tick+0xe0>
        y = (y - 2.0f) / floatWidth;
240150fa:	ee36 6a45 	vsub.f32	s12, s12, s10
240150fe:	ee86 0a04 	vdiv.f32	s0, s12, s8
    if (t < dt) {
24015102:	eef4 6ac7 	vcmpe.f32	s13, s14
24015106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401510a:	d447      	bmi.n	2401519c <tPBTriangle_tick+0x108>
    } else if (t > (1.0f - dt)) {
2401510c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24015110:	ee35 6ac7 	vsub.f32	s12, s11, s14
24015114:	eef4 6ac6 	vcmpe.f32	s13, s12
24015118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401511c:	dc60      	bgt.n	240151e0 <tPBTriangle_tick+0x14c>
        return 0.0f;
2401511e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 2401520c <tPBTriangle_tick+0x178>
    if (t < dt) {
24015122:	eef4 7ac7 	vcmpe.f32	s15, s14
24015126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401512a:	d44a      	bmi.n	240151c2 <tPBTriangle_tick+0x12e>
    } else if (t > (1.0f - dt)) {
2401512c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24015130:	ee35 6ac7 	vsub.f32	s12, s11, s14
24015134:	eef4 7ac6 	vcmpe.f32	s15, s12
24015138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401513c:	dd0d      	ble.n	2401515a <tPBTriangle_tick+0xc6>
        t = (t - 1.0f) / dt + 1.0f;
2401513e:	ee77 7ae5 	vsub.f32	s15, s15, s11
        y /= floatWidth;
    }
    Lfloat blampOne = blamp(t1F, incFloat);
    Lfloat blampTwo = blamp(t2F, incFloat);
    Lfloat scaling = incFloat / (floatWidth - floatWidth * floatWidth) ;
    y += scaling * (blampOne - blampTwo);
24015142:	ed9f 5a33 	vldr	s10, [pc, #204]	; 24015210 <tPBTriangle_tick+0x17c>
        t = (t - 1.0f) / dt + 1.0f;
24015146:	ee87 6a87 	vdiv.f32	s12, s15, s14
2401514a:	ee76 7a25 	vadd.f32	s15, s12, s11
        return 1.0f / 3.0f * t * t * t;
2401514e:	ee27 6aa7 	vmul.f32	s12, s15, s15
    y += scaling * (blampOne - blampTwo);
24015152:	ee26 6a05 	vmul.f32	s12, s12, s10
24015156:	eee7 6ac6 	vfms.f32	s13, s15, s12
    Lfloat scaling = incFloat / (floatWidth - floatWidth * floatWidth) ;
2401515a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->phase += c->inc;
2401515e:	4401      	add	r1, r0
24015160:	6051      	str	r1, [r2, #4]
    Lfloat scaling = incFloat / (floatWidth - floatWidth * floatWidth) ;
24015162:	ee77 7ac4 	vsub.f32	s15, s15, s8
24015166:	ee67 7a84 	vmul.f32	s15, s15, s8
2401516a:	ee87 6a27 	vdiv.f32	s12, s14, s15
    return y;
}
2401516e:	eea6 0a26 	vfma.f32	s0, s12, s13
24015172:	4770      	bx	lr
    } else if (y >= floatWidth) {
24015174:	eeb4 4ac6 	vcmpe.f32	s8, s12
24015178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401517c:	d83f      	bhi.n	240151fe <tPBTriangle_tick+0x16a>
        y = 1.0f - (y - floatWidth) / (1.0f - floatWidth);
2401517e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
24015182:	ee36 6a44 	vsub.f32	s12, s12, s8
    if (t < dt) {
24015186:	eef4 6ac7 	vcmpe.f32	s13, s14
        y = 1.0f - (y - floatWidth) / (1.0f - floatWidth);
2401518a:	ee34 5a65 	vsub.f32	s10, s8, s11
    if (t < dt) {
2401518e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        y = 1.0f - (y - floatWidth) / (1.0f - floatWidth);
24015192:	ee86 0a05 	vdiv.f32	s0, s12, s10
24015196:	ee30 0a25 	vadd.f32	s0, s0, s11
    if (t < dt) {
2401519a:	d5b7      	bpl.n	2401510c <tPBTriangle_tick+0x78>
        t = (t / dt) - 1.0f;
2401519c:	ee86 6a87 	vdiv.f32	s12, s13, s14
        return -1.0f / 3.0f * t * t * t;
240151a0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 24015214 <tPBTriangle_tick+0x180>
        t = (t / dt) - 1.0f;
240151a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (t < dt) {
240151a8:	eef4 7ac7 	vcmpe.f32	s15, s14
240151ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t = (t / dt) - 1.0f;
240151b0:	ee36 6a66 	vsub.f32	s12, s12, s13
        return -1.0f / 3.0f * t * t * t;
240151b4:	ee66 6a06 	vmul.f32	s13, s12, s12
240151b8:	ee66 6aa5 	vmul.f32	s13, s13, s11
240151bc:	ee66 6a86 	vmul.f32	s13, s13, s12
    if (t < dt) {
240151c0:	d5b4      	bpl.n	2401512c <tPBTriangle_tick+0x98>
        t = (t / dt) - 1.0f;
240151c2:	ee87 6a87 	vdiv.f32	s12, s15, s14
    y += scaling * (blampOne - blampTwo);
240151c6:	eddf 5a13 	vldr	s11, [pc, #76]	; 24015214 <tPBTriangle_tick+0x180>
        t = (t / dt) - 1.0f;
240151ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240151ce:	ee76 7a67 	vsub.f32	s15, s12, s15
        return -1.0f / 3.0f * t * t * t;
240151d2:	ee27 6aa7 	vmul.f32	s12, s15, s15
    y += scaling * (blampOne - blampTwo);
240151d6:	ee26 6a25 	vmul.f32	s12, s12, s11
240151da:	eee7 6ac6 	vfms.f32	s13, s15, s12
        return -1.0f / 3.0f * t * t * t;
240151de:	e7bc      	b.n	2401515a <tPBTriangle_tick+0xc6>
        t = (t - 1.0f) / dt + 1.0f;
240151e0:	ee76 6ae5 	vsub.f32	s13, s13, s11
        return 1.0f / 3.0f * t * t * t;
240151e4:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 24015210 <tPBTriangle_tick+0x17c>
        t = (t - 1.0f) / dt + 1.0f;
240151e8:	ee86 6a87 	vdiv.f32	s12, s13, s14
240151ec:	ee36 6a25 	vadd.f32	s12, s12, s11
        return 1.0f / 3.0f * t * t * t;
240151f0:	ee66 6a06 	vmul.f32	s13, s12, s12
240151f4:	ee66 6a85 	vmul.f32	s13, s13, s10
240151f8:	ee66 6a86 	vmul.f32	s13, s13, s12
240151fc:	e791      	b.n	24015122 <tPBTriangle_tick+0x8e>
        y /= floatWidth;
240151fe:	ee86 0a04 	vdiv.f32	s0, s12, s8
24015202:	e77e      	b.n	24015102 <tPBTriangle_tick+0x6e>
24015204:	2f80000d 	.word	0x2f80000d
24015208:	3000000d 	.word	0x3000000d
2401520c:	00000000 	.word	0x00000000
24015210:	3eaaaaab 	.word	0x3eaaaaab
24015214:	beaaaaab 	.word	0xbeaaaaab

24015218 <tPBTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#else
void    tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#endif
{
    _tPBTriangle* c = *osc;
24015218:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401521a:	edd3 7a08 	vldr	s15, [r3, #32]
    c->freq  = freq;
2401521e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015222:	ee20 0a27 	vmul.f32	s0, s0, s15
24015226:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401522a:	ed83 0a02 	vstr	s0, [r3, #8]
}
2401522e:	4770      	bx	lr

24015230 <tPBTriangle_setSkew>:

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat width)
{
24015230:	b510      	push	{r4, lr}
24015232:	eef0 0a40 	vmov.f32	s1, s0
    _tPBTriangle* c = *osc;
    width = width*0.5f + 0.5f;
    width = LEAF_clip(0.01f, width, 0.99f);
24015236:	ed9f 1a12 	vldr	s2, [pc, #72]	; 24015280 <tPBTriangle_setSkew+0x50>
    width = width*0.5f + 0.5f;
2401523a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    width = LEAF_clip(0.01f, width, 0.99f);
2401523e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 24015284 <tPBTriangle_setSkew+0x54>
    _tPBTriangle* c = *osc;
24015242:	6804      	ldr	r4, [r0, #0]
{
24015244:	ed2d 8b02 	vpush	{d8}
    width = width*0.5f + 0.5f;
24015248:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
2401524c:	ee70 0a88 	vadd.f32	s1, s1, s16
    width = LEAF_clip(0.01f, width, 0.99f);
24015250:	ee60 0aa7 	vmul.f32	s1, s1, s15
24015254:	f7ff faa4 	bl	240147a0 <LEAF_clip>
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24015258:	ee38 8a40 	vsub.f32	s16, s16, s0
2401525c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 24015288 <tPBTriangle_setSkew+0x58>
    c->width = width * TWO_TO_32;
24015260:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24015264:	ee28 8a27 	vmul.f32	s16, s16, s15
    c->width = width * TWO_TO_32;
24015268:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
2401526c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
    c->width = width * TWO_TO_32;
24015270:	ed84 0a04 	vstr	s0, [r4, #16]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24015274:	ed84 8a05 	vstr	s16, [r4, #20]
}
24015278:	ecbd 8b02 	vpop	{d8}
2401527c:	bd10      	pop	{r4, pc}
2401527e:	bf00      	nop
24015280:	3f7d70a4 	.word	0x3f7d70a4
24015284:	3c23d70a 	.word	0x3c23d70a
24015288:	4f800000 	.word	0x4f800000

2401528c <tPBSineTriangle_init>:

//==============================================================================

/* tPBSineTriangle: Anti-aliased Triangle waveform with sine wave, crossfaded between them with shape param. */
void    tPBSineTriangle_init          (tPBSineTriangle* const osc, LEAF* const leaf)
{
2401528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
2401528e:	698e      	ldr	r6, [r1, #24]
{
24015290:	4607      	mov	r7, r0
24015292:	460d      	mov	r5, r1
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
24015294:	2024      	movs	r0, #36	; 0x24
24015296:	4631      	mov	r1, r6
24015298:	f7ff fcfe 	bl	24014c98 <mpool_alloc>
2401529c:	6038      	str	r0, [r7, #0]
    c->mempool = m;
2401529e:	6006      	str	r6, [r0, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
240152a0:	4604      	mov	r4, r0
    _tMempool* m = *mp;
240152a2:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240152a4:	2018      	movs	r0, #24
    LEAF* leaf = c->mempool->leaf;
240152a6:	6876      	ldr	r6, [r6, #4]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240152a8:	4629      	mov	r1, r5
240152aa:	f7ff fcf5 	bl	24014c98 <mpool_alloc>
    c->inc      =  0;
240152ae:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
240152b0:	60a0      	str	r0, [r4, #8]
    c->mask = SINE_TABLE_SIZE - 1;
240152b2:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
240152b6:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240152b8:	6869      	ldr	r1, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240152ba:	eddf 7a0e 	vldr	s15, [pc, #56]	; 240152f4 <tPBSineTriangle_init+0x68>
    c->phase    =  0;
240152be:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240152c2:	ed91 7a01 	vldr	s14, [r1, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
    c->phase    =  0;
    c->freq = 0.0f;
    c->shape     =  0.0f;
    c->oneMinusShape = 1.0f;
240152c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->mask = SINE_TABLE_SIZE - 1;
240152ca:	6142      	str	r2, [r0, #20]
    c->freq = 0.0f;
240152cc:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240152ce:	ee27 7a27 	vmul.f32	s14, s14, s15
240152d2:	ed80 7a04 	vstr	s14, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
240152d6:	ed96 7a01 	vldr	s14, [r6, #4]
    c->inc      =  0;
240152da:	60e3      	str	r3, [r4, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
240152dc:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->phase    =  0;
240152e0:	6063      	str	r3, [r4, #4]
    c->invSampleRate = leaf->invSampleRate;
240152e2:	ed84 7a07 	vstr	s14, [r4, #28]
    c->freq = 0.0f;
240152e6:	6122      	str	r2, [r4, #16]
    c->shape     =  0.0f;
240152e8:	6162      	str	r2, [r4, #20]
    c->oneMinusShape = 1.0f;
240152ea:	61a1      	str	r1, [r4, #24]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
240152ec:	edc4 7a08 	vstr	s15, [r4, #32]
}
240152f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240152f2:	bf00      	nop
240152f4:	4f800000 	.word	0x4f800000

240152f8 <tPBSineTriangle_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_tick          (tPBSineTriangle* const osc)
#else
Lfloat   tPBSineTriangle_tick          (tPBSineTriangle* const osc)
#endif
{
240152f8:	b410      	push	{r4}
    _tPBSineTriangle* c = *osc;
240152fa:	6802      	ldr	r2, [r0, #0]
    Lfloat t = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
    
    float y = t * 4.0f;

    if (y >= 3.0f) {
240152fc:	eddf 4a67 	vldr	s9, [pc, #412]	; 2401549c <tPBSineTriangle_tick+0x1a4>
    uint32_t t1 = c->phase + TWO_TO_32_ONE_QUARTER;
24015300:	6853      	ldr	r3, [r2, #4]
    Lfloat t1F = t1 * INV_TWO_TO_32;
24015302:	ed9f 5a67 	vldr	s10, [pc, #412]	; 240154a0 <tPBSineTriangle_tick+0x1a8>
    Lfloat t = c->phase * INV_TWO_TO_32;
24015306:	ee07 3a90 	vmov	s15, r3
    uint32_t t1 = c->phase + TWO_TO_32_ONE_QUARTER;
2401530a:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    float y = t * 4.0f;
2401530e:	ed9f 6a65 	vldr	s12, [pc, #404]	; 240154a4 <tPBSineTriangle_tick+0x1ac>
    Lfloat t = c->phase * INV_TWO_TO_32;
24015312:	eef8 5a67 	vcvt.f32.u32	s11, s15
    uint32_t t1 = c->phase + TWO_TO_32_ONE_QUARTER;
24015316:	ee06 1a90 	vmov	s13, r1
    uint32_t t2 = c->phase + TWO_TO_32_THREE_QUARTERS;
2401531a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
2401531e:	edd2 7a03 	vldr	s15, [r2, #12]
    Lfloat t1F = t1 * INV_TWO_TO_32;
24015322:	eef8 6a66 	vcvt.f32.u32	s13, s13
    if (y >= 3.0f) {
24015326:	eef4 5ae4 	vcmpe.f32	s11, s9
    uint32_t t2 = c->phase + TWO_TO_32_THREE_QUARTERS;
2401532a:	ee07 1a10 	vmov	s14, r1
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
2401532e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    Lfloat t2F = t2 * INV_TWO_TO_32;
24015332:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    if (y >= 3.0f) {
24015336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
2401533a:	ee67 7a85 	vmul.f32	s15, s15, s10
    float y = t * 4.0f;
2401533e:	ee25 6a86 	vmul.f32	s12, s11, s12
    Lfloat t1F = t1 * INV_TWO_TO_32;
24015342:	ee66 6a85 	vmul.f32	s13, s13, s10
    Lfloat t2F = t2 * INV_TWO_TO_32;
24015346:	ee27 7a05 	vmul.f32	s14, s14, s10
    if (y >= 3.0f) {
2401534a:	db65      	blt.n	24015418 <tPBSineTriangle_tick+0x120>
        y -= 4.0f;
2401534c:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
24015350:	ee36 6a65 	vsub.f32	s12, s12, s11
    if (t < dt) {
24015354:	eef4 6ae7 	vcmpe.f32	s13, s15
24015358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401535c:	d46c      	bmi.n	24015438 <tPBSineTriangle_tick+0x140>
    } else if (t > (1.0f - dt)) {
2401535e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24015362:	ee75 5a67 	vsub.f32	s11, s10, s15
24015366:	eef4 6ae5 	vcmpe.f32	s13, s11
2401536a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401536e:	f300 8085 	bgt.w	2401547c <tPBSineTriangle_tick+0x184>
        return 0.0f;
24015372:	eddf 6a4d 	vldr	s13, [pc, #308]	; 240154a8 <tPBSineTriangle_tick+0x1b0>
    if (t < dt) {
24015376:	eeb4 7ae7 	vcmpe.f32	s14, s15
2401537a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401537e:	d46e      	bmi.n	2401545e <tPBSineTriangle_tick+0x166>
    } else if (t > (1.0f - dt)) {
24015380:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
24015384:	ee75 5a67 	vsub.f32	s11, s10, s15
24015388:	eeb4 7ae5 	vcmpe.f32	s14, s11
2401538c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015390:	dd0d      	ble.n	240153ae <tPBSineTriangle_tick+0xb6>
        t = (t - 1.0f) / dt + 1.0f;
24015392:	ee37 7a45 	vsub.f32	s14, s14, s10
    } else if (y > 1.0f) {
        y = 2.0f - y;
    }
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
24015396:	eddf 4a45 	vldr	s9, [pc, #276]	; 240154ac <tPBSineTriangle_tick+0x1b4>
        t = (t - 1.0f) / dt + 1.0f;
2401539a:	eec7 5a27 	vdiv.f32	s11, s14, s15
2401539e:	ee35 7a85 	vadd.f32	s14, s11, s10
        return 1.0f / 3.0f * t * t * t;
240153a2:	ee67 5a07 	vmul.f32	s11, s14, s14
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
240153a6:	ee65 5aa4 	vmul.f32	s11, s11, s9
240153aa:	eee7 6a65 	vfms.f32	s13, s14, s11
    _tCycle* c = *cy;
240153ae:	6890      	ldr	r0, [r2, #8]
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
240153b0:	eeb1 5a00 	vmov.f32	s10, #16	; 0x40800000  4.0
    y = y * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
240153b4:	edd2 5a05 	vldr	s11, [r2, #20]
    samp0 = __leaf_table_sinewave[idx];
240153b8:	493d      	ldr	r1, [pc, #244]	; (240154b0 <tPBSineTriangle_tick+0x1b8>)
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
240153ba:	ee67 7a85 	vmul.f32	s15, s15, s10
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240153be:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 240154b4 <tPBSineTriangle_tick+0x1bc>
    c->phase += c->inc;
240153c2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
240153c6:	eea7 6aa6 	vfma.f32	s12, s15, s13
    c->phase += c->inc;
240153ca:	4423      	add	r3, r4
    idx = (idx + 1) & c->mask;
240153cc:	6944      	ldr	r4, [r0, #20]
    c->phase += c->inc;
240153ce:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
240153d0:	0d58      	lsrs	r0, r3, #21
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
240153d2:	f3c3 0314 	ubfx	r3, r3, #0, #21

    y = y + (tCycle_tick(&c->sine) * c->oneMinusShape);
240153d6:	edd2 6a06 	vldr	s13, [r2, #24]
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
240153da:	ee07 3a90 	vmov	s15, r3
    idx = (idx + 1) & c->mask;
240153de:	1c43      	adds	r3, r0, #1
    samp0 = __leaf_table_sinewave[idx];
240153e0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    idx = (idx + 1) & c->mask;
240153e4:	4023      	ands	r3, r4
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240153e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
240153ea:	ed90 0a00 	vldr	s0, [r0]
    samp1 = __leaf_table_sinewave[idx];
240153ee:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    
    c->phase += c->inc;
240153f2:	68d3      	ldr	r3, [r2, #12]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240153f4:	ee67 7a87 	vmul.f32	s15, s15, s14
240153f8:	ed91 7a00 	vldr	s14, [r1]
    c->phase += c->inc;
240153fc:	6851      	ldr	r1, [r2, #4]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
240153fe:	ee37 7a40 	vsub.f32	s14, s14, s0
    c->phase += c->inc;
24015402:	440b      	add	r3, r1
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24015404:	eea7 0a27 	vfma.f32	s0, s14, s15
    c->phase += c->inc;
24015408:	6053      	str	r3, [r2, #4]
    
    return y;
}
2401540a:	f85d 4b04 	ldr.w	r4, [sp], #4
    y = y + (tCycle_tick(&c->sine) * c->oneMinusShape);
2401540e:	ee20 0a26 	vmul.f32	s0, s0, s13
}
24015412:	eea5 0a86 	vfma.f32	s0, s11, s12
24015416:	4770      	bx	lr
    } else if (y > 1.0f) {
24015418:	ed9f 5a27 	vldr	s10, [pc, #156]	; 240154b8 <tPBSineTriangle_tick+0x1c0>
2401541c:	eef4 5ac5 	vcmpe.f32	s11, s10
24015420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24015424:	dd96      	ble.n	24015354 <tPBSineTriangle_tick+0x5c>
    if (t < dt) {
24015426:	eef4 6ae7 	vcmpe.f32	s13, s15
        y = 2.0f - y;
2401542a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
    if (t < dt) {
2401542e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        y = 2.0f - y;
24015432:	ee35 6ac6 	vsub.f32	s12, s11, s12
    if (t < dt) {
24015436:	d592      	bpl.n	2401535e <tPBSineTriangle_tick+0x66>
        t = (t / dt) - 1.0f;
24015438:	eec6 5aa7 	vdiv.f32	s11, s13, s15
        return -1.0f / 3.0f * t * t * t;
2401543c:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 240154bc <tPBSineTriangle_tick+0x1c4>
        t = (t / dt) - 1.0f;
24015440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (t < dt) {
24015444:	eeb4 7ae7 	vcmpe.f32	s14, s15
24015448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        t = (t / dt) - 1.0f;
2401544c:	ee75 5ae6 	vsub.f32	s11, s11, s13
        return -1.0f / 3.0f * t * t * t;
24015450:	ee65 6aa5 	vmul.f32	s13, s11, s11
24015454:	ee66 6a85 	vmul.f32	s13, s13, s10
24015458:	ee66 6aa5 	vmul.f32	s13, s13, s11
    if (t < dt) {
2401545c:	d590      	bpl.n	24015380 <tPBSineTriangle_tick+0x88>
        t = (t / dt) - 1.0f;
2401545e:	eec7 5a27 	vdiv.f32	s11, s14, s15
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
24015462:	ed9f 5a16 	vldr	s10, [pc, #88]	; 240154bc <tPBSineTriangle_tick+0x1c4>
        t = (t / dt) - 1.0f;
24015466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401546a:	ee35 7ac7 	vsub.f32	s14, s11, s14
        return -1.0f / 3.0f * t * t * t;
2401546e:	ee67 5a07 	vmul.f32	s11, s14, s14
    y += 4.0f * incFloat * (blamp(t1F, incFloat) - blamp(t2F, incFloat));
24015472:	ee65 5a85 	vmul.f32	s11, s11, s10
24015476:	eee7 6a65 	vfms.f32	s13, s14, s11
        return -1.0f / 3.0f * t * t * t;
2401547a:	e798      	b.n	240153ae <tPBSineTriangle_tick+0xb6>
        t = (t - 1.0f) / dt + 1.0f;
2401547c:	ee76 6ac5 	vsub.f32	s13, s13, s10
        return 1.0f / 3.0f * t * t * t;
24015480:	eddf 4a0a 	vldr	s9, [pc, #40]	; 240154ac <tPBSineTriangle_tick+0x1b4>
        t = (t - 1.0f) / dt + 1.0f;
24015484:	eec6 5aa7 	vdiv.f32	s11, s13, s15
24015488:	ee75 5a85 	vadd.f32	s11, s11, s10
        return 1.0f / 3.0f * t * t * t;
2401548c:	ee65 6aa5 	vmul.f32	s13, s11, s11
24015490:	ee66 6aa4 	vmul.f32	s13, s13, s9
24015494:	ee66 6aa5 	vmul.f32	s13, s13, s11
24015498:	e76d      	b.n	24015376 <tPBSineTriangle_tick+0x7e>
2401549a:	bf00      	nop
2401549c:	4f3fffed 	.word	0x4f3fffed
240154a0:	2f80000d 	.word	0x2f80000d
240154a4:	3080000d 	.word	0x3080000d
240154a8:	00000000 	.word	0x00000000
240154ac:	3eaaaaab 	.word	0x3eaaaaab
240154b0:	24028330 	.word	0x24028330
240154b4:	35000004 	.word	0x35000004
240154b8:	4e7fffe6 	.word	0x4e7fffe6
240154bc:	beaaaaab 	.word	0xbeaaaaab

240154c0 <tPBSineTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#else
void    tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#endif
{
    _tPBSineTriangle* c = *osc;
240154c0:	6803      	ldr	r3, [r0, #0]
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240154c2:	edd3 7a08 	vldr	s15, [r3, #32]
    _tCycle* c = *cy;
240154c6:	689a      	ldr	r2, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240154c8:	ee60 7a27 	vmul.f32	s15, s0, s15
    c->freq  = freq;
240154cc:	ed83 0a04 	vstr	s0, [r3, #16]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240154d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
240154d4:	edc3 7a03 	vstr	s15, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240154d8:	edd2 7a04 	vldr	s15, [r2, #16]
    c->freq  = freq;
240154dc:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240154e0:	ee20 0a27 	vmul.f32	s0, s0, s15
240154e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240154e8:	ed82 0a02 	vstr	s0, [r2, #8]
    tCycle_setFreq(&c->sine, freq);
}
240154ec:	4770      	bx	lr
240154ee:	bf00      	nop

240154f0 <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
    c->oneMinusShape = 1.0f - shape;
240154f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSineTriangle* c = *osc;
240154f4:	6803      	ldr	r3, [r0, #0]
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
240154f6:	eeb1 7a40 	vneg.f32	s14, s0
    c->oneMinusShape = 1.0f - shape;
240154fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
240154fe:	ed83 7a05 	vstr	s14, [r3, #20]
    c->oneMinusShape = 1.0f - shape;
24015502:	edc3 7a06 	vstr	s15, [r3, #24]
}
24015506:	4770      	bx	lr

24015508 <tPBPulse_init>:
}
//==============================================================================

/* tPulse: Anti-aliased pulse waveform. */
void    tPBPulse_init        (tPBPulse* const osc, LEAF* const leaf)
{
24015508:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
2401550a:	698c      	ldr	r4, [r1, #24]
{
2401550c:	4605      	mov	r5, r0
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
2401550e:	2020      	movs	r0, #32
24015510:	4621      	mov	r1, r4
24015512:	f7ff fbc1 	bl	24014c98 <mpool_alloc>
24015516:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24015518:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
2401551a:	2200      	movs	r2, #0
    c->invSampleRate = leaf->invSampleRate;
2401551c:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->width     =  (0.5f * TWO_TO_32);
2401551e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24015522:	eddf 7a08 	vldr	s15, [pc, #32]	; 24015544 <tPBPulse_init+0x3c>
    c->invSampleRate = leaf->invSampleRate;
24015526:	ed91 7a01 	vldr	s14, [r1, #4]
    c->oneMinusWidth =  c->width;
    c->freq = 0.0f;
2401552a:	2100      	movs	r1, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
2401552c:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
24015530:	ed80 7a06 	vstr	s14, [r0, #24]
    c->freq = 0.0f;
24015534:	60c1      	str	r1, [r0, #12]
    c->phase    =  0;
24015536:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->oneMinusWidth =  c->width;
2401553a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
2401553e:	edc0 7a07 	vstr	s15, [r0, #28]
}
24015542:	bd38      	pop	{r3, r4, r5, pc}
24015544:	4f800000 	.word	0x4f800000

24015548 <tPBPulse_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_tick        (tPBPulse* const osc)
#else
Lfloat   tPBPulse_tick        (tPBPulse* const osc)
#endif
{
24015548:	b510      	push	{r4, lr}
    _tPBPulse* c = *osc;
2401554a:	6804      	ldr	r4, [r0, #0]
    
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
2401554c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 240155d8 <tPBPulse_tick+0x90>
{
24015550:	ed2d 8b02 	vpush	{d8}
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
24015554:	edd4 7a01 	vldr	s15, [r4, #4]
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    Lfloat widthFloat =c->width *INV_TWO_TO_32;
    Lfloat out = -2.0f * widthFloat;
24015558:	eef8 8a00 	vmov.f32	s17, #128	; 0xc0000000 -2.0
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
2401555c:	6963      	ldr	r3, [r4, #20]
{
2401555e:	b082      	sub	sp, #8
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
24015560:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    Lfloat widthFloat =c->width *INV_TWO_TO_32;
24015564:	edd4 7a04 	vldr	s15, [r4, #16]
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
24015568:	6862      	ldr	r2, [r4, #4]
    Lfloat widthFloat =c->width *INV_TWO_TO_32;
2401556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
2401556e:	edd4 6a02 	vldr	s13, [r4, #8]
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
24015572:	ee20 0a07 	vmul.f32	s0, s0, s14
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
24015576:	18d3      	adds	r3, r2, r3
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
24015578:	eef8 0ae6 	vcvt.f32.s32	s1, s13
    Lfloat widthFloat =c->width *INV_TWO_TO_32;
2401557c:	ee67 7a87 	vmul.f32	s15, s15, s14
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
24015580:	ee08 3a10 	vmov	s16, r3
24015584:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    if (phaseFloat < widthFloat) {
24015588:	eeb4 0ae7 	vcmpe.f32	s0, s15
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
2401558c:	ee60 0a87 	vmul.f32	s1, s1, s14
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
24015590:	ee28 8a07 	vmul.f32	s16, s16, s14
    if (phaseFloat < widthFloat) {
24015594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat out = -2.0f * widthFloat;
24015598:	ee67 8aa8 	vmul.f32	s17, s15, s17
    if (phaseFloat < widthFloat) {
2401559c:	d503      	bpl.n	240155a6 <tPBPulse_tick+0x5e>
        out += 2.0f;
2401559e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
240155a2:	ee78 8aa7 	vadd.f32	s17, s17, s15
    }
    out += LEAF_poly_blep(phaseFloat,incFloat);
240155a6:	edcd 0a01 	vstr	s1, [sp, #4]
240155aa:	f7ff fa8b 	bl	24014ac4 <LEAF_poly_blep>
240155ae:	eef0 7a40 	vmov.f32	s15, s0
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
240155b2:	eddd 0a01 	vldr	s1, [sp, #4]
240155b6:	eeb0 0a48 	vmov.f32	s0, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
240155ba:	ee78 8aa7 	vadd.f32	s17, s17, s15
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
240155be:	f7ff fa81 	bl	24014ac4 <LEAF_poly_blep>
    c->phase += c->inc;
240155c2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    return out;
    
}
240155c6:	ee38 0ac0 	vsub.f32	s0, s17, s0
    c->phase += c->inc;
240155ca:	4413      	add	r3, r2
240155cc:	6063      	str	r3, [r4, #4]
}
240155ce:	b002      	add	sp, #8
240155d0:	ecbd 8b02 	vpop	{d8}
240155d4:	bd10      	pop	{r4, pc}
240155d6:	bf00      	nop
240155d8:	2f80000d 	.word	0x2f80000d

240155dc <tPBPulse_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#else
void    tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#endif
{
    _tPBPulse* c = *osc;
240155dc:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240155de:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
240155e2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240155e6:	ee20 0a27 	vmul.f32	s0, s0, s15
240155ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240155ee:	ed83 0a02 	vstr	s0, [r3, #8]
}
240155f2:	4770      	bx	lr

240155f4 <tPBPulse_setWidth>:
    }
    if (width > 0.95f)
    {
        width = 0.95f;
    }
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
240155f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
240155f8:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 2401562c <tPBPulse_setWidth+0x38>
240155fc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 24015630 <tPBPulse_setWidth+0x3c>
24015600:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
24015604:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 24015634 <tPBPulse_setWidth+0x40>
24015608:	fe80 0a66 	vminnm.f32	s0, s0, s13
2401560c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->width = width * TWO_TO_32;
24015610:	ee20 0a07 	vmul.f32	s0, s0, s14
    _tPBPulse* c = *osc;
24015614:	6803      	ldr	r3, [r0, #0]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24015616:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->width = width * TWO_TO_32;
2401561a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
2401561e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c->width = width * TWO_TO_32;
24015622:	ed83 0a04 	vstr	s0, [r3, #16]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
24015626:	edc3 7a05 	vstr	s15, [r3, #20]
}
2401562a:	4770      	bx	lr
2401562c:	3d4ccccd 	.word	0x3d4ccccd
24015630:	3f733333 	.word	0x3f733333
24015634:	4f800000 	.word	0x4f800000

24015638 <tPBSaw_init>:

//==============================================================================

/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSaw_init          (tPBSaw* const osc, LEAF* const leaf)
{
24015638:	b538      	push	{r3, r4, r5, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
2401563a:	698c      	ldr	r4, [r1, #24]
{
2401563c:	4605      	mov	r5, r0
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
2401563e:	2020      	movs	r0, #32
24015640:	4621      	mov	r1, r4
24015642:	f7ff fb29 	bl	24014c98 <mpool_alloc>
24015646:	6028      	str	r0, [r5, #0]
    c->mempool = m;
24015648:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
2401564a:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
2401564c:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
2401564e:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24015650:	eddf 7a06 	vldr	s15, [pc, #24]	; 2401566c <tPBSaw_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
24015654:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
24015658:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
2401565a:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
2401565e:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
24015662:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24015666:	edc0 7a05 	vstr	s15, [r0, #20]
}
2401566a:	bd38      	pop	{r3, r4, r5, pc}
2401566c:	4f800000 	.word	0x4f800000

24015670 <tPBSaw_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSaw_tick          (tPBSaw* const osc)
#else
Lfloat   tPBSaw_tick          (tPBSaw* const osc)
#endif
{
24015670:	b510      	push	{r4, lr}
    _tPBSaw* c = *osc;
24015672:	6804      	ldr	r4, [r0, #0]
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;

    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24015674:	eddf 0a10 	vldr	s1, [pc, #64]	; 240156b8 <tPBSaw_tick+0x48>
{
24015678:	ed2d 8b02 	vpush	{d8}
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
2401567c:	edd4 7a01 	vldr	s15, [r4, #4]
24015680:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24015684:	edd4 7a02 	vldr	s15, [r4, #8]
24015688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    out -= LEAF_poly_blep(phaseFloat, incFloat);
2401568c:	ee28 0a20 	vmul.f32	s0, s16, s1
24015690:	ee67 0aa0 	vmul.f32	s1, s15, s1
24015694:	f7ff fa16 	bl	24014ac4 <LEAF_poly_blep>
    c->phase += c->inc;
24015698:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401569c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 240156bc <tPBSaw_tick+0x4c>
240156a0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
240156a4:	eee8 7a47 	vfms.f32	s15, s16, s14
240156a8:	4413      	add	r3, r2
240156aa:	6063      	str	r3, [r4, #4]
    return (-1.0f * out);
}
240156ac:	ecbd 8b02 	vpop	{d8}
240156b0:	ee30 0a27 	vadd.f32	s0, s0, s15
240156b4:	bd10      	pop	{r4, pc}
240156b6:	bf00      	nop
240156b8:	2f80000d 	.word	0x2f80000d
240156bc:	2ffffff6 	.word	0x2ffffff6

240156c0 <tPBSaw_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#else
void    tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#endif
{
    _tPBSaw* c = *osc;
240156c0:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240156c2:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
240156c6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
240156ca:	ee20 0a27 	vmul.f32	s0, s0, s15
240156ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240156d2:	ed83 0a02 	vstr	s0, [r3, #8]
}
240156d6:	4770      	bx	lr

240156d8 <tPBSawSquare_init>:
//========================================================================


/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSawSquare_init          (tPBSawSquare* const osc, LEAF* const leaf)
{
240156d8:	b538      	push	{r3, r4, r5, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
240156da:	698c      	ldr	r4, [r1, #24]
{
240156dc:	4605      	mov	r5, r0
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
240156de:	2028      	movs	r0, #40	; 0x28
240156e0:	4621      	mov	r1, r4
240156e2:	f7ff fad9 	bl	24014c98 <mpool_alloc>
240156e6:	6028      	str	r0, [r5, #0]
    c->mempool = m;
240156e8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
240156ea:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
240156ec:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
240156ee:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
240156f0:	eddf 7a06 	vldr	s15, [pc, #24]	; 2401570c <tPBSawSquare_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
240156f4:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
240156f8:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
240156fa:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
240156fe:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
24015702:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
24015706:	edc0 7a05 	vstr	s15, [r0, #20]
}
2401570a:	bd38      	pop	{r3, r4, r5, pc}
2401570c:	4f800000 	.word	0x4f800000

24015710 <tPBSawSquare_tick>:
#ifdef ITCMRAM
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_tick          (tPBSawSquare* const osc)
#else
Lfloat   tPBSawSquare_tick          (tPBSawSquare* const osc)
#endif
{
24015710:	b530      	push	{r4, r5, lr}
    _tPBSawSquare* c = *osc;
24015712:	6804      	ldr	r4, [r0, #0]
{
24015714:	ed2d 8b04 	vpush	{d8-d9}

    //Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
24015718:	6865      	ldr	r5, [r4, #4]
{
2401571a:	b083      	sub	sp, #12
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
2401571c:	edd4 7a02 	vldr	s15, [r4, #8]
24015720:	eddf 9a23 	vldr	s19, [pc, #140]	; 240157b0 <tPBSawSquare_tick+0xa0>
24015724:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
24015728:	ee07 5a90 	vmov	s15, r5
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
2401572c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
24015730:	ed9f 8a20 	vldr	s16, [pc, #128]	; 240157b4 <tPBSawSquare_tick+0xa4>
24015734:	eeb8 9a67 	vcvt.f32.u32	s18, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
24015738:	ee60 0aa9 	vmul.f32	s1, s1, s19
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
2401573c:	ee29 0a29 	vmul.f32	s0, s18, s19
24015740:	edcd 0a01 	vstr	s1, [sp, #4]
24015744:	f7ff f9be 	bl	24014ac4 <LEAF_poly_blep>
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
24015748:	ee07 5a90 	vmov	s15, r5
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
2401574c:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
24015750:	eddd 0a01 	vldr	s1, [sp, #4]
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
24015754:	ee29 8a08 	vmul.f32	s16, s18, s16
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
24015758:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
2401575c:	ee20 0a29 	vmul.f32	s0, s0, s19
24015760:	f7ff f9b0 	bl	24014ac4 <LEAF_poly_blep>
    
    Lfloat squareOut = -1.0f;
    if (phaseFloat < 0.5f) {
24015764:	eddf 6a14 	vldr	s13, [pc, #80]	; 240157b8 <tPBSawSquare_tick+0xa8>
    Lfloat squareOut = -1.0f;
24015768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    squareOut += resetBlep;
    squareOut -= midBlep;

    c->phase += c->inc;
    
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
2401576c:	ed94 6a08 	vldr	s12, [r4, #32]
    Lfloat squareOut = -1.0f;
24015770:	eeb4 9ae6 	vcmpe.f32	s18, s13
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
24015774:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    Lfloat squareOut = -1.0f;
24015778:	eeff 5a00 	vmov.f32	s11, #240	; 0xbf800000 -1.0
    squareOut -= midBlep;
2401577c:	ee78 7ac0 	vsub.f32	s15, s17, s0
    Lfloat squareOut = -1.0f;
24015780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
24015784:	ee37 8a48 	vsub.f32	s16, s14, s16
    Lfloat squareOut = -1.0f;
24015788:	bf58      	it	pl
2401578a:	eeb0 7a65 	vmovpl.f32	s14, s11
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
2401578e:	ee38 8a28 	vadd.f32	s16, s16, s17
    squareOut -= midBlep;
24015792:	ee77 7a87 	vadd.f32	s15, s15, s14
    c->phase += c->inc;
24015796:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
2401579a:	ee27 0a86 	vmul.f32	s0, s15, s12
    c->phase += c->inc;
2401579e:	4413      	add	r3, r2
}
240157a0:	eea8 0a26 	vfma.f32	s0, s16, s13
    c->phase += c->inc;
240157a4:	6063      	str	r3, [r4, #4]
}
240157a6:	b003      	add	sp, #12
240157a8:	ecbd 8b04 	vpop	{d8-d9}
240157ac:	bd30      	pop	{r4, r5, pc}
240157ae:	bf00      	nop
240157b0:	2f80000d 	.word	0x2f80000d
240157b4:	3000000d 	.word	0x3000000d
240157b8:	4effffe6 	.word	0x4effffe6

240157bc <tPBSawSquare_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#else
void    tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#endif
{
    _tPBSawSquare* c = *osc;
240157bc:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = (freq * c->invSampleRateTimesTwoTo32);
240157be:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
240157c2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = (freq * c->invSampleRateTimesTwoTo32);
240157c6:	ee20 0a27 	vmul.f32	s0, s0, s15
240157ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
240157ce:	ed83 0a02 	vstr	s0, [r3, #8]

}
240157d2:	4770      	bx	lr

240157d4 <tPBSawSquare_setShape>:
void    tPBSawSquare_setShape      (tPBSawSquare* const osc, Lfloat inputShape)
{
    _tPBSawSquare* c = *osc;
    
    c->shape  = inputShape;
    c->oneMinusShape = 1.0f - inputShape;
240157d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSawSquare* c = *osc;
240157d8:	6803      	ldr	r3, [r0, #0]
    c->shape  = inputShape;
240157da:	ed83 0a08 	vstr	s0, [r3, #32]
    c->oneMinusShape = 1.0f - inputShape;
240157de:	ee77 7ac0 	vsub.f32	s15, s15, s0
240157e2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
240157e6:	4770      	bx	lr

240157e8 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
240157e8:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
240157ea:	6995      	ldr	r5, [r2, #24]
{
240157ec:	4606      	mov	r6, r0
240157ee:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
240157f0:	2018      	movs	r0, #24
240157f2:	4629      	mov	r1, r5
240157f4:	f7ff fa50 	bl	24014c98 <mpool_alloc>
240157f8:	6030      	str	r0, [r6, #0]
    n->mempool = m;
240157fa:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
240157fc:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
240157fe:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
24015800:	691b      	ldr	r3, [r3, #16]
24015802:	6143      	str	r3, [r0, #20]
}
24015804:	bd70      	pop	{r4, r5, r6, pc}
24015806:	bf00      	nop

24015808 <tNoise_initToPool>:
{
24015808:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
2401580a:	6815      	ldr	r5, [r2, #0]
{
2401580c:	4606      	mov	r6, r0
2401580e:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
24015810:	2018      	movs	r0, #24
24015812:	4629      	mov	r1, r5
24015814:	f7ff fa40 	bl	24014c98 <mpool_alloc>
24015818:	6030      	str	r0, [r6, #0]
    n->mempool = m;
2401581a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
2401581c:	686b      	ldr	r3, [r5, #4]
    n->type = type;
2401581e:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
24015820:	691b      	ldr	r3, [r3, #16]
24015822:	6143      	str	r3, [r0, #20]
}
24015824:	bd70      	pop	{r4, r5, r6, pc}
24015826:	bf00      	nop

24015828 <tNoise_free>:

void    tNoise_free (tNoise* const ns)
{
    _tNoise* n = *ns;
24015828:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)n, n->mempool);
2401582a:	6801      	ldr	r1, [r0, #0]
2401582c:	f7ff baf6 	b.w	24014e1c <mpool_free>

24015830 <tNoise_tick>:
}

Lfloat   tNoise_tick(tNoise* const ns)
{
24015830:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
24015832:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
24015834:	6963      	ldr	r3, [r4, #20]
24015836:	4798      	blx	r3
    
    if (n->type == PinkNoise)
24015838:	7923      	ldrb	r3, [r4, #4]
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
2401583a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
2401583e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
24015842:	2b01      	cmp	r3, #1
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
24015844:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
24015848:	d131      	bne.n	240158ae <tNoise_tick+0x7e>
    {
        Lfloat tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
2401584a:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 240158b4 <tNoise_tick+0x84>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
2401584e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 240158b8 <tNoise_tick+0x88>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
24015852:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24015856:	ed94 5a03 	vldr	s10, [r4, #12]
2401585a:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
2401585e:	edd4 3a02 	vldr	s7, [r4, #8]
24015862:	eddf 4a16 	vldr	s9, [pc, #88]	; 240158bc <tNoise_tick+0x8c>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24015866:	eddf 5a16 	vldr	s11, [pc, #88]	; 240158c0 <tNoise_tick+0x90>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
2401586a:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
2401586e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 240158c4 <tNoise_tick+0x94>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24015872:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
24015876:	ed94 4a04 	vldr	s8, [r4, #16]
2401587a:	ee27 7a87 	vmul.f32	s14, s15, s14
2401587e:	eddf 5a12 	vldr	s11, [pc, #72]	; 240158c8 <tNoise_tick+0x98>
24015882:	eddf 4a12 	vldr	s9, [pc, #72]	; 240158cc <tNoise_tick+0x9c>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
24015886:	ed9f 5a12 	vldr	s10, [pc, #72]	; 240158d0 <tNoise_tick+0xa0>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
2401588a:	eea4 7a25 	vfma.f32	s14, s8, s11
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
2401588e:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
24015892:	ee76 5a26 	vadd.f32	s11, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
24015896:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
2401589a:	eef0 6a65 	vmov.f32	s13, s11
2401589e:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
240158a2:	eee7 6aa4 	vfma.f32	s13, s15, s9
240158a6:	ee37 7a26 	vadd.f32	s14, s14, s13
        return (tmp * 0.05f);
240158aa:	ee67 7a05 	vmul.f32	s15, s14, s10
    }
    else // WhiteNoise
    {
        return rand;
    }
}
240158ae:	eeb0 0a67 	vmov.f32	s0, s15
240158b2:	bd10      	pop	{r4, pc}
240158b4:	3dcad8a1 	.word	0x3dcad8a1
240158b8:	3e97d0ff 	.word	0x3e97d0ff
240158bc:	3f7f65fe 	.word	0x3f7f65fe
240158c0:	3f76872b 	.word	0x3f76872b
240158c4:	3f86be97 	.word	0x3f86be97
240158c8:	3f11eb85 	.word	0x3f11eb85
240158cc:	3e3d3c36 	.word	0x3e3d3c36
240158d0:	3d4ccccd 	.word	0x3d4ccccd

240158d4 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
240158d4:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
240158d6:	698c      	ldr	r4, [r1, #24]
{
240158d8:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240158da:	201c      	movs	r0, #28
240158dc:	4621      	mov	r1, r4
240158de:	f7ff f9db 	bl	24014c98 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
240158e2:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240158e4:	6028      	str	r0, [r5, #0]
    c->mempool = m;
240158e6:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
240158e8:	6862      	ldr	r2, [r4, #4]
    c->inc  = 0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240158ea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24015900 <tIntPhasor_init+0x2c>
    c->inc  = 0;
240158ee:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240158f2:	edd2 7a01 	vldr	s15, [r2, #4]
240158f6:	ee67 7a87 	vmul.f32	s15, s15, s14
240158fa:	edc0 7a06 	vstr	s15, [r0, #24]
}
240158fe:	bd38      	pop	{r3, r4, r5, pc}
24015900:	4f800000 	.word	0x4f800000

24015904 <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
24015904:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
24015906:	eddf 7a06 	vldr	s15, [pc, #24]	; 24015920 <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
2401590a:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
2401590e:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
24015910:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
24015914:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24015916:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
2401591a:	ee20 0a27 	vmul.f32	s0, s0, s15
2401591e:	4770      	bx	lr
24015920:	2f80000d 	.word	0x2f80000d

24015924 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
24015924:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015926:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
2401592a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
2401592e:	ee20 0a27 	vmul.f32	s0, s0, s15
24015932:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24015936:	ed83 0a02 	vstr	s0, [r3, #8]
}
2401593a:	4770      	bx	lr

2401593c <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
2401593c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
24015940:	ed9f 7a06 	vldr	s14, [pc, #24]	; 2401595c <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
24015944:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24015946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401594a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
2401594e:	ee20 0a07 	vmul.f32	s0, s0, s14
24015952:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24015956:	ed83 0a01 	vstr	s0, [r3, #4]
}
2401595a:	4770      	bx	lr
2401595c:	4f800000 	.word	0x4f800000

24015960 <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
24015960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24015962:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24015966:	698f      	ldr	r7, [r1, #24]
{
24015968:	4606      	mov	r6, r0
2401596a:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
2401596c:	2010      	movs	r0, #16
2401596e:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015970:	ed9f 8a22 	vldr	s16, [pc, #136]	; 240159fc <tSquareLFO_init+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24015974:	f7ff f990 	bl	24014c98 <mpool_alloc>
24015978:	6030      	str	r0, [r6, #0]
    c->mempool = m;
2401597a:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
2401597c:	4604      	mov	r4, r0
    _tMempool* m = *mp;
2401597e:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24015980:	201c      	movs	r0, #28
24015982:	4639      	mov	r1, r7
24015984:	f7ff f988 	bl	24014c98 <mpool_alloc>
24015988:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
2401598a:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
2401598c:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
2401598e:	2700      	movs	r7, #0
    c->inc  = 0;
24015990:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015994:	edd2 7a01 	vldr	s15, [r2, #4]
24015998:	ee67 7a88 	vmul.f32	s15, s15, s16
2401599c:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240159a0:	201c      	movs	r0, #28
    _tMempool* m = *mp;
240159a2:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
240159a4:	4629      	mov	r1, r5
240159a6:	f7ff f977 	bl	24014c98 <mpool_alloc>
240159aa:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
240159ac:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
240159ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
240159b2:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240159b4:	eddf 6a12 	vldr	s13, [pc, #72]	; 24015a00 <tSquareLFO_init+0xa0>
    c->inc  = 0;
240159b8:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
240159bc:	ed92 7a01 	vldr	s14, [r2, #4]
240159c0:	ee27 7a08 	vmul.f32	s14, s14, s16
240159c4:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
240159c8:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240159ca:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
240159cc:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240159d0:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
240159d4:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
240159d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240159da:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
240159de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
240159e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
240159e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
240159ea:	ee67 7a88 	vmul.f32	s15, s15, s16
240159ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
240159f2:	edc3 7a01 	vstr	s15, [r3, #4]
}
240159f6:	ecbd 8b02 	vpop	{d8}
240159fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
240159fc:	4f800000 	.word	0x4f800000
24015a00:	2f80000d 	.word	0x2f80000d

24015a04 <tSquareLFO_initToPool>:
{
24015a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24015a06:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
24015a0a:	680f      	ldr	r7, [r1, #0]
{
24015a0c:	4606      	mov	r6, r0
24015a0e:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24015a10:	2010      	movs	r0, #16
24015a12:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015a14:	ed9f 8a22 	vldr	s16, [pc, #136]	; 24015aa0 <tSquareLFO_initToPool+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24015a18:	f7ff f93e 	bl	24014c98 <mpool_alloc>
24015a1c:	6030      	str	r0, [r6, #0]
    c->mempool = m;
24015a1e:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
24015a20:	4604      	mov	r4, r0
    _tMempool* m = *mp;
24015a22:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24015a24:	201c      	movs	r0, #28
24015a26:	4639      	mov	r1, r7
24015a28:	f7ff f936 	bl	24014c98 <mpool_alloc>
24015a2c:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24015a2e:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24015a30:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
24015a32:	2700      	movs	r7, #0
    c->inc  = 0;
24015a34:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015a38:	edd2 7a01 	vldr	s15, [r2, #4]
24015a3c:	ee67 7a88 	vmul.f32	s15, s15, s16
24015a40:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24015a44:	201c      	movs	r0, #28
    _tMempool* m = *mp;
24015a46:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24015a48:	4629      	mov	r1, r5
24015a4a:	f7ff f925 	bl	24014c98 <mpool_alloc>
24015a4e:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24015a50:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
24015a52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
24015a56:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015a58:	eddf 6a12 	vldr	s13, [pc, #72]	; 24015aa4 <tSquareLFO_initToPool+0xa0>
    c->inc  = 0;
24015a5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015a60:	ed92 7a01 	vldr	s14, [r2, #4]
24015a64:	ee27 7a08 	vmul.f32	s14, s14, s16
24015a68:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
24015a6c:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015a6e:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24015a70:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015a74:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
24015a78:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015a7a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24015a7e:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
24015a82:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24015a86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24015a8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24015a8e:	ee67 7a88 	vmul.f32	s15, s15, s16
24015a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24015a96:	edc3 7a01 	vstr	s15, [r3, #4]
}
24015a9a:	ecbd 8b02 	vpop	{d8}
24015a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24015aa0:	4f800000 	.word	0x4f800000
24015aa4:	2f80000d 	.word	0x2f80000d

24015aa8 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
24015aa8:	6802      	ldr	r2, [r0, #0]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24015aaa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
24015aae:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24015aec <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
24015ab2:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
24015ab4:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24015ab8:	4403      	add	r3, r0
24015aba:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24015abc:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
24015ac0:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
24015ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
24015ac6:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24015aca:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
24015acc:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
24015ad0:	604b      	str	r3, [r1, #4]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24015ad2:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24015ad6:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24015ada:	ee30 0a66 	vsub.f32	s0, s0, s13
24015ade:	ee77 7ac6 	vsub.f32	s15, s15, s12
24015ae2:	eea7 0a87 	vfma.f32	s0, s15, s14
}
24015ae6:	ee30 0a00 	vadd.f32	s0, s0, s0
24015aea:	4770      	bx	lr
24015aec:	2f80000d 	.word	0x2f80000d

24015af0 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
24015af0:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
24015af2:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015af4:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24015af8:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015afc:	ee60 7a27 	vmul.f32	s15, s0, s15
24015b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24015b04:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24015b08:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015b0a:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24015b0e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015b12:	ee20 0a27 	vmul.f32	s0, s0, s15
24015b16:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24015b1a:	ed83 0a02 	vstr	s0, [r3, #8]
}
24015b1e:	4770      	bx	lr

24015b20 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
24015b20:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015b22:	eddf 6a0d 	vldr	s13, [pc, #52]	; 24015b58 <tSquareLFO_setPulseWidth+0x38>
24015b26:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
24015b28:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015b2c:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
24015b30:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24015b5c <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
24015b38:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015b3a:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
24015b3e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
24015b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015b46:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24015b4a:	ee20 0a07 	vmul.f32	s0, s0, s14
24015b4e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24015b52:	ed83 0a01 	vstr	s0, [r3, #4]
}
24015b56:	4770      	bx	lr
24015b58:	2f80000d 	.word	0x2f80000d
24015b5c:	4f800000 	.word	0x4f800000

24015b60 <tSquareLFO_setPhase>:
    int i = phase;
24015b60:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
24015b64:	eddf 6a13 	vldr	s13, [pc, #76]	; 24015bb4 <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
    _tSquareLFO *c = *cy;
24015b68:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015b6a:	ed9f 6a13 	vldr	s12, [pc, #76]	; 24015bb8 <tSquareLFO_setPhase+0x58>
    phase -= i;
24015b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tIntPhasor* c = *cy;
24015b72:	689a      	ldr	r2, [r3, #8]
    phase -= i;
24015b74:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24015b78:	ee20 0a26 	vmul.f32	s0, s0, s13
24015b7c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24015b80:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015b84:	689a      	ldr	r2, [r3, #8]
24015b86:	edd3 7a01 	vldr	s15, [r3, #4]
24015b8a:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
24015b8e:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015b90:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24015b94:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
24015b98:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24015b9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24015ba0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24015ba4:	ee67 7aa6 	vmul.f32	s15, s15, s13
24015ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24015bac:	edc3 7a01 	vstr	s15, [r3, #4]
}
24015bb0:	4770      	bx	lr
24015bb2:	bf00      	nop
24015bb4:	4f800000 	.word	0x4f800000
24015bb8:	2f80000d 	.word	0x2f80000d

24015bbc <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
24015bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24015bbe:	460c      	mov	r4, r1
{
24015bc0:	4606      	mov	r6, r0
24015bc2:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24015bc4:	2010      	movs	r0, #16
    _tMempool* m = *mp;
24015bc6:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24015bca:	4639      	mov	r1, r7
24015bcc:	f7ff f864 	bl	24014c98 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
24015bd0:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
24015bd2:	6030      	str	r0, [r6, #0]
24015bd4:	4604      	mov	r4, r0
    c->mempool = m;
24015bd6:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
24015bda:	f7ff ff13 	bl	24015a04 <tSquareLFO_initToPool>
    _tMempool* m = *mp;
24015bde:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24015be0:	201c      	movs	r0, #28
24015be2:	4629      	mov	r1, r5
24015be4:	f7ff f858 	bl	24014c98 <mpool_alloc>
    c->phase    =  0;
24015be8:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
24015bea:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24015bec:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24015bee:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015bf0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 24015c08 <tSawSquareLFO_init+0x4c>
    c->inc  = 0;
24015bf4:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015bf8:	edd2 7a01 	vldr	s15, [r2, #4]
24015bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
24015c00:	edc0 7a06 	vstr	s15, [r0, #24]
}
24015c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24015c06:	bf00      	nop
24015c08:	4f800000 	.word	0x4f800000

24015c0c <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
24015c0c:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
24015c0e:	6802      	ldr	r2, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24015c10:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
24015c14:	eddf 5a1d 	vldr	s11, [pc, #116]	; 24015c8c <tSawSquareLFO_tick+0x80>
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24015c18:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
24015c1c:	6891      	ldr	r1, [r2, #8]
    Lfloat b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
24015c1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
24015c22:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
24015c26:	4403      	add	r3, r0
24015c28:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
24015c2a:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
24015c2e:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
24015c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
24015c34:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
24015c36:	6843      	ldr	r3, [r0, #4]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
24015c38:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
24015c3c:	6884      	ldr	r4, [r0, #8]
24015c3e:	4423      	add	r3, r4
24015c40:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
24015c42:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
24015c46:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
24015c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
24015c4c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
24015c50:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
24015c52:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
24015c56:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
24015c58:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
24015c5c:	eef8 4a66 	vcvt.f32.u32	s9, s13
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24015c60:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
24015c64:	ee37 7a40 	vsub.f32	s14, s14, s0
}
24015c68:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24015c6c:	ee76 6ac5 	vsub.f32	s13, s13, s10
24015c70:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
24015c74:	ee30 0a00 	vadd.f32	s0, s0, s0
24015c78:	ee37 7a07 	vadd.f32	s14, s14, s14
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
24015c7c:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
24015c80:	ee20 0a26 	vmul.f32	s0, s0, s13
}
24015c84:	eea6 0a07 	vfma.f32	s0, s12, s14
24015c88:	4770      	bx	lr
24015c8a:	bf00      	nop
24015c8c:	2f80000d 	.word	0x2f80000d

24015c90 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
    _tSawSquareLFO* c = *cy;
24015c90:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
24015c92:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
24015c94:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015c96:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24015c9a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015c9e:	ee60 7a27 	vmul.f32	s15, s0, s15
24015ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24015ca6:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24015caa:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015cac:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24015cb0:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015cb4:	ee60 7a27 	vmul.f32	s15, s0, s15
24015cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24015cbc:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
24015cc0:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015cc2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
24015cc6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015cca:	ee20 0a27 	vmul.f32	s0, s0, s15
24015cce:	eebc 0ac0 	vcvt.u32.f32	s0, s0
24015cd2:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
24015cd6:	4770      	bx	lr

24015cd8 <tSawSquareLFO_setPhase>:
    int i = phase;
24015cd8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
24015cdc:	eddf 6a15 	vldr	s13, [pc, #84]	; 24015d34 <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
    _tSawSquareLFO* c = *cy;
24015ce0:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015ce2:	ed9f 6a15 	vldr	s12, [pc, #84]	; 24015d38 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
24015ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tSquareLFO *c = *cy;
24015cea:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
24015cec:	6890      	ldr	r0, [r2, #8]
    phase -= i;
24015cee:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
24015cf2:	ee20 0a26 	vmul.f32	s0, s0, s13
24015cf6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
24015cfa:	edc0 7a01 	vstr	s15, [r0, #4]
24015cfe:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015d02:	6890      	ldr	r0, [r2, #8]
24015d04:	edd2 7a01 	vldr	s15, [r2, #4]
24015d08:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
24015d0c:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
24015d0e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
24015d12:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
24015d16:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
24015d1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24015d1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
24015d22:	ee67 7aa6 	vmul.f32	s15, s15, s13
24015d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24015d2a:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
24015d2e:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
24015d30:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
24015d32:	4770      	bx	lr
24015d34:	4f800000 	.word	0x4f800000
24015d38:	2f80000d 	.word	0x2f80000d

24015d3c <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
24015d3c:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
24015d3e:	ed83 0a01 	vstr	s0, [r3, #4]
}
24015d42:	4770      	bx	lr

24015d44 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
24015d44:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24015d46:	698d      	ldr	r5, [r1, #24]
{
24015d48:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24015d4a:	2018      	movs	r0, #24
24015d4c:	4629      	mov	r1, r5
24015d4e:	f7fe ffa3 	bl	24014c98 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
24015d52:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24015d54:	6020      	str	r0, [r4, #0]
    c->mempool = m;
24015d56:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24015d58:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24015d5a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24015d90 <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
24015d5e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 24015d94 <tTriLFO_init+0x50>
    c->phase    =  0;
24015d62:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
24015d66:	edd2 6a01 	vldr	s13, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24015d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    c->invSampleRate = leaf->invSampleRate;
24015d6e:	edc0 6a04 	vstr	s13, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24015d72:	edc0 7a05 	vstr	s15, [r0, #20]
    _tTriLFO* c = *cy;
24015d76:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015d78:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24015d7c:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015d80:	ee67 7a87 	vmul.f32	s15, s15, s14
24015d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24015d88:	edc3 7a02 	vstr	s15, [r3, #8]
}
24015d8c:	bd38      	pop	{r3, r4, r5, pc}
24015d8e:	bf00      	nop
24015d90:	4f800000 	.word	0x4f800000
24015d94:	435c0000 	.word	0x435c0000

24015d98 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
24015d98:	6801      	ldr	r1, [r0, #0]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24015d9a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
24015d9e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 24015dc8 <tTriLFO_tick+0x30>
    c->phase += c->inc;
24015da2:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
24015da6:	4413      	add	r3, r2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
24015da8:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    c->phase += c->inc;
24015dac:	604b      	str	r3, [r1, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24015dae:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
24015db2:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24015db6:	ee07 3a90 	vmov	s15, r3
24015dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015dbe:	eea7 0a87 	vfma.f32	s0, s15, s14
}
24015dc2:	ee30 0a00 	vadd.f32	s0, s0, s0
24015dc6:	4770      	bx	lr
24015dc8:	2ffffff6 	.word	0x2ffffff6

24015dcc <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
24015dcc:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015dce:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24015dd2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015dd6:	ee20 0a27 	vmul.f32	s0, s0, s15
24015dda:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24015dde:	ed83 0a02 	vstr	s0, [r3, #8]
}
24015de2:	4770      	bx	lr

24015de4 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
24015de4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
24015de8:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24015dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24015dee:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
24015df2:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
24015df6:	ed83 0a01 	vstr	s0, [r3, #4]
}
24015dfa:	4770      	bx	lr

24015dfc <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
24015dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24015dfe:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
24015e02:	698f      	ldr	r7, [r1, #24]
{
24015e04:	4606      	mov	r6, r0
24015e06:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24015e08:	2010      	movs	r0, #16
24015e0a:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24015e0c:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 24015e88 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24015e10:	f7fe ff42 	bl	24014c98 <mpool_alloc>
24015e14:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24015e16:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
24015e18:	6034      	str	r4, [r6, #0]
    c->mempool = m;
24015e1a:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
24015e1c:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
24015e1e:	4631      	mov	r1, r6
24015e20:	f7fe ff3a 	bl	24014c98 <mpool_alloc>
24015e24:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
24015e26:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
24015e28:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
24015e2a:	2600      	movs	r6, #0
    c->freq  = freq;
24015e2c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 24015e8c <tSineTriLFO_init+0x90>
    c->phase    =  0;
24015e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
24015e34:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24015e38:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
24015e3c:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
24015e40:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24015e44:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
24015e46:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015e48:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24015e4c:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015e50:	ee67 7a87 	vmul.f32	s15, s15, s14
24015e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24015e58:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
24015e5c:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
24015e5e:	4629      	mov	r1, r5
24015e60:	f7fe ff1a 	bl	24014c98 <mpool_alloc>
24015e64:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
24015e66:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
24015e68:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
24015e6c:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
24015e6e:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015e72:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
24015e76:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
24015e78:	ee67 7a88 	vmul.f32	s15, s15, s16
24015e7c:	edc0 7a04 	vstr	s15, [r0, #16]
}
24015e80:	ecbd 8b02 	vpop	{d8}
24015e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24015e86:	bf00      	nop
24015e88:	4f800000 	.word	0x4f800000
24015e8c:	435c0000 	.word	0x435c0000

24015e90 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
24015e90:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
24015e92:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
    Lfloat b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
24015e94:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
24015e98:	4a21      	ldr	r2, [pc, #132]	; (24015f20 <tSineTriLFO_tick+0x90>)
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24015e9a:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
24015e9e:	68e0      	ldr	r0, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24015ea0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 24015f24 <tSineTriLFO_tick+0x94>
    idx = (idx + 1) & c->mask;
24015ea4:	6945      	ldr	r5, [r0, #20]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24015ea6:	eddf 4a20 	vldr	s9, [pc, #128]	; 24015f28 <tSineTriLFO_tick+0x98>
    c->phase += c->inc;
24015eaa:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
24015eae:	440b      	add	r3, r1
24015eb0:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
24015eb2:	0d59      	lsrs	r1, r3, #21
    _tTriLFO* c = *cy;
24015eb4:	68a0      	ldr	r0, [r4, #8]
    tempFrac = (c->phase & 2097151u); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index)
24015eb6:	f3c3 0314 	ubfx	r3, r3, #0, #21
24015eba:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
24015ebe:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24015ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
24015ec6:	4433      	add	r3, r6
24015ec8:	6043      	str	r3, [r0, #4]
    idx = (idx + 1) & c->mask;
24015eca:	1c48      	adds	r0, r1, #1
    samp0 = __leaf_table_sinewave[idx];
24015ecc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
24015ed0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    idx = (idx + 1) & c->mask;
24015ed4:	4028      	ands	r0, r5
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24015ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp0 = __leaf_table_sinewave[idx];
24015eda:	edd1 6a00 	vldr	s13, [r1]
    samp1 = __leaf_table_sinewave[idx];
24015ede:	eb02 0180 	add.w	r1, r2, r0, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
24015ee2:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
24015ee6:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24015eea:	ed91 5a00 	vldr	s10, [r1]
    return  (1.0f - c->shape) * a + c->shape * b;
24015eee:	ee37 0a07 	vadd.f32	s0, s14, s14
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
24015ef2:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
24015ef6:	ee36 6a47 	vsub.f32	s12, s12, s14
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24015efa:	ee35 5a66 	vsub.f32	s10, s10, s13
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24015efe:	ee07 2a10 	vmov	s14, r2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
24015f02:	eee7 6a85 	vfma.f32	s13, s15, s10
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24015f06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
24015f0a:	eef0 7a65 	vmov.f32	s15, s11
}
24015f0e:	bc70      	pop	{r4, r5, r6}
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
24015f10:	eee7 7a24 	vfma.f32	s15, s14, s9
    return  (1.0f - c->shape) * a + c->shape * b;
24015f14:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24015f18:	eea6 0a26 	vfma.f32	s0, s12, s13
24015f1c:	4770      	bx	lr
24015f1e:	bf00      	nop
24015f20:	24028330 	.word	0x24028330
24015f24:	35000004 	.word	0x35000004
24015f28:	2ffffff6 	.word	0x2ffffff6

24015f2c <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
    _tSineTriLFO* c = *cy;
24015f2c:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
24015f2e:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015f30:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
24015f34:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015f38:	ee60 7a27 	vmul.f32	s15, s0, s15
24015f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24015f40:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
24015f44:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015f46:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
24015f4a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
24015f4e:	ee20 0a27 	vmul.f32	s0, s0, s15
24015f52:	eebd 0ac0 	vcvt.s32.f32	s0, s0
24015f56:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
24015f5a:	4770      	bx	lr

24015f5c <tSineTriLFO_setPhase>:
    int i = phase;
24015f5c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
24015f60:	ed9f 7a09 	vldr	s14, [pc, #36]	; 24015f88 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
    _tSineTriLFO* c = *cy;
24015f64:	6803      	ldr	r3, [r0, #0]
    phase -= i;
24015f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
24015f6a:	689a      	ldr	r2, [r3, #8]
    phase -= i;
24015f6c:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
24015f70:	ee20 0a07 	vmul.f32	s0, s0, s14
24015f74:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
24015f78:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
24015f7c:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
24015f80:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
24015f82:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
24015f86:	4770      	bx	lr
24015f88:	4f800000 	.word	0x4f800000

24015f8c <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
24015f8c:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
24015f8e:	ed83 0a01 	vstr	s0, [r3, #4]

 }
24015f92:	4770      	bx	lr

24015f94 <tPickupNonLinearity_init>:
	return out;
}


void   tPickupNonLinearity_init          (tPickupNonLinearity* const pl, LEAF* const leaf)
{
24015f94:	b538      	push	{r3, r4, r5, lr}
	tPickupNonLinearity_initToPool(pl, &leaf->mempool);
}
void   tPickupNonLinearity_initToPool          (tPickupNonLinearity* const pl, tMempool* const mp)
{
    _tMempool* m = *mp;
24015f96:	698d      	ldr	r5, [r1, #24]
{
24015f98:	4604      	mov	r4, r0
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
24015f9a:	2008      	movs	r0, #8
24015f9c:	4629      	mov	r1, r5
24015f9e:	f7fe fe7b 	bl	24014c98 <mpool_alloc>
    p->mempool = m;
    p->prev = 0.0f;
24015fa2:	2300      	movs	r3, #0
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
24015fa4:	6020      	str	r0, [r4, #0]
    p->mempool = m;
24015fa6:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
24015fa8:	6043      	str	r3, [r0, #4]
}
24015faa:	bd38      	pop	{r3, r4, r5, pc}

24015fac <tPickupNonLinearity_free>:
}
void   tPickupNonLinearity_free          (tPickupNonLinearity* const pl)
{
	_tPickupNonLinearity* p = *pl;
24015fac:	6800      	ldr	r0, [r0, #0]
	mpool_free((char*)p, p->mempool);
24015fae:	6801      	ldr	r1, [r0, #0]
24015fb0:	f7fe bf34 	b.w	24014e1c <mpool_free>

24015fb4 <tPickupNonLinearity_tick>:
}
Lfloat   tPickupNonLinearity_tick          (tPickupNonLinearity* const pl, Lfloat x)
{
	_tPickupNonLinearity* p = *pl;
	x = x * 2.0f;
24015fb4:	ee70 7a00 	vadd.f32	s15, s0, s0
24015fb8:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 24015ff8 <tPickupNonLinearity_tick+0x44>
24015fbc:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 24015ffc <tPickupNonLinearity_tick+0x48>
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24015fc0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 24016000 <tPickupNonLinearity_tick+0x4c>
24015fc4:	ee67 5aa7 	vmul.f32	s11, s15, s15
24015fc8:	ed9f 4a0e 	vldr	s8, [pc, #56]	; 24016004 <tPickupNonLinearity_tick+0x50>
24015fcc:	eea7 6a85 	vfma.f32	s12, s15, s10
24015fd0:	eddf 6a0d 	vldr	s13, [pc, #52]	; 24016008 <tPickupNonLinearity_tick+0x54>
	out *= 4.366812227074236f;
	Lfloat y = out - p->prev;
24015fd4:	6803      	ldr	r3, [r0, #0]
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24015fd6:	ee25 5aa7 	vmul.f32	s10, s11, s15
	Lfloat y = out - p->prev;
24015fda:	eddf 4a0c 	vldr	s9, [pc, #48]	; 2401600c <tPickupNonLinearity_tick+0x58>
24015fde:	ed93 0a01 	vldr	s0, [r3, #4]
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24015fe2:	ee25 7a07 	vmul.f32	s14, s10, s14
24015fe6:	eee5 6a06 	vfma.f32	s13, s10, s12
24015fea:	eea5 7a84 	vfma.f32	s14, s11, s8
24015fee:	eea7 7aa6 	vfma.f32	s14, s15, s13
	return y;
}
24015ff2:	ee97 0a24 	vfnms.f32	s0, s14, s9
24015ff6:	4770      	bx	lr
24015ff8:	3a59d777 	.word	0x3a59d777
24015ffc:	39f9096c 	.word	0x39f9096c
24016000:	3b0a47ed 	.word	0x3b0a47ed
24016004:	3bdd2f1b 	.word	0x3bdd2f1b
24016008:	3d99999a 	.word	0x3d99999a
2401600c:	408bbced 	.word	0x408bbced

24016010 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, Lfloat freq, Lfloat dampFreq,
                                         Lfloat decay, Lfloat targetLev, Lfloat levSmoothFactor,
                                         Lfloat levStrength, int levMode, tMempool* const mp)
{
24016010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24016014:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
24016018:	f8d3 9000 	ldr.w	r9, [r3]
{
2401601c:	b083      	sub	sp, #12
2401601e:	460e      	mov	r6, r1
24016020:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24016022:	4649      	mov	r1, r9
24016024:	2070      	movs	r0, #112	; 0x70
{
24016026:	461d      	mov	r5, r3
24016028:	eeb0 8a40 	vmov.f32	s16, s0
2401602c:	eeb0 9a41 	vmov.f32	s18, s2
24016030:	4617      	mov	r7, r2
24016032:	eef0 9a61 	vmov.f32	s19, s3
24016036:	eeb0 aa42 	vmov.f32	s20, s4
2401603a:	eeb0 ba62 	vmov.f32	s22, s5
2401603e:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24016042:	f7fe fe29 	bl	24014c98 <mpool_alloc>
24016046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
2401604a:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
2401604e:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24016052:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    p->mempool = m;
24016056:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
2401605a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401605e:	ee87 ca08 	vdiv.f32	s24, s14, s16
    LEAF* leaf = p->mempool->leaf;
24016062:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
24016066:	65c6      	str	r6, [r0, #92]	; 0x5c
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
24016068:	4604      	mov	r4, r0
    p->sampleRate = leaf->sampleRate * oversampling;
2401606a:	ed93 7a00 	vldr	s14, [r3]
    p->maxLength = 2400 * oversampling;
2401606e:	f44f 6316 	mov.w	r3, #2400	; 0x960
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24016072:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
24016076:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->maxLength = 2400 * oversampling;
2401607a:	fb03 f606 	mul.w	r6, r3, r6
    p->curr=0.0f;
2401607e:	2300      	movs	r3, #0
    p->sampleRate = leaf->sampleRate * oversampling;
24016080:	ee67 7a87 	vmul.f32	s15, s15, s14
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24016084:	eddf 0a7e 	vldr	s1, [pc, #504]	; 24016280 <tSimpleLivingString3_initToPool+0x270>
    p->curr=0.0f;
24016088:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
2401608a:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
2401608c:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
2401608e:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
24016092:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
24016096:	4650      	mov	r0, sl
24016098:	ee2c 0a2a 	vmul.f32	s0, s24, s21
2401609c:	ee20 0a27 	vmul.f32	s0, s0, s15
240160a0:	f7fb fbd2 	bl	24011848 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
240160a4:	ed94 0a02 	vldr	s0, [r4, #8]
240160a8:	462a      	mov	r2, r5
240160aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
240160ac:	4658      	mov	r0, fp
240160ae:	f7fa f9c1 	bl	24010434 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
240160b2:	ed94 0a02 	vldr	s0, [r4, #8]
240160b6:	462a      	mov	r2, r5
240160b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
240160ba:	4648      	mov	r0, r9
240160bc:	f7fa f9ba 	bl	24010434 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
    _tSimpleLivingString3* p = *pl;
240160c0:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    Lfloat waveLength = (p->sampleRate/freq);
240160c4:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    p->freq = freq;
240160c8:	ed86 8a01 	vstr	s16, [r6, #4]
    Lfloat waveLength = (p->sampleRate/freq);
240160cc:	ee2c 7a07 	vmul.f32	s14, s24, s14
    if (waveLength<4.8) waveLength=4.8f;
240160d0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 24016270 <tSimpleLivingString3_initToPool+0x260>
240160d4:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
240160d8:	eeb4 5bc6 	vcmpe.f64	d5, d6
240160dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240160e0:	f100 80bf 	bmi.w	24016262 <tSimpleLivingString3_initToPool+0x252>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
240160e4:	6b33      	ldr	r3, [r6, #48]	; 0x30
240160e6:	005b      	lsls	r3, r3, #1
240160e8:	ee07 3a90 	vmov	s15, r3
240160ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
240160f0:	fec7 7ac7 	vminnm.f32	s15, s15, s14
240160f4:	ee27 0aaa 	vmul.f32	s0, s15, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
240160f8:	f106 0058 	add.w	r0, r6, #88	; 0x58
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
240160fc:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    p->waveLengthInSamples =  waveLength * 0.5f;
24016100:	ed86 0a02 	vstr	s0, [r6, #8]
    p->rippleDelay = 0.5f;
24016104:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24016108:	f7fb fbda 	bl	240118c0 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
2401610c:	ed96 7a05 	vldr	s14, [r6, #20]
24016110:	eddf 7a5c 	vldr	s15, [pc, #368]	; 24016284 <tSimpleLivingString3_initToPool+0x274>
24016114:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24016118:	ed96 6a01 	vldr	s12, [r6, #4]
2401611c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24016120:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24016124:	ed9f 0b54 	vldr	d0, [pc, #336]	; 24016278 <tSimpleLivingString3_initToPool+0x268>
24016128:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
2401612c:	ee27 7b06 	vmul.f64	d7, d7, d6
24016130:	ee80 0b07 	vdiv.f64	d0, d0, d7
24016134:	f003 fdb0 	bl	24019c98 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24016138:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
2401613a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401613e:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
24016142:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
24016146:	ed94 0a02 	vldr	s0, [r4, #8]
2401614a:	f7fa fa77 	bl	2401063c <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
2401614e:	ed94 0a02 	vldr	s0, [r4, #8]
24016152:	4648      	mov	r0, r9
24016154:	f7fa fa72 	bl	2401063c <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
24016158:	4658      	mov	r0, fp
2401615a:	f7fa f9e5 	bl	24010528 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
2401615e:	4648      	mov	r0, r9
24016160:	f7fa f9e2 	bl	24010528 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24016164:	f104 003c 	add.w	r0, r4, #60	; 0x3c
24016168:	4629      	mov	r1, r5
2401616a:	eeb0 0a68 	vmov.f32	s0, s17
    p->dampFreq = dampFreq;
2401616e:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
24016172:	9001      	str	r0, [sp, #4]
24016174:	f7fb fdf0 	bl	24011d58 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
24016178:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
2401617c:	9801      	ldr	r0, [sp, #4]
2401617e:	f7fb fe55 	bl	24011e2c <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24016182:	eeb0 0a68 	vmov.f32	s0, s17
24016186:	9801      	ldr	r0, [sp, #4]
24016188:	f7fb fe1e 	bl	24011dc8 <tOnePole_setFreq>
    p->rippleGain = 0.0f;
2401618c:	2300      	movs	r3, #0
    tHighpass_initToPool(&p->DCblocker,13, mp);
2401618e:	4629      	mov	r1, r5
24016190:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
    p->rippleGain = 0.0f;
24016194:	6663      	str	r3, [r4, #100]	; 0x64
    tHighpass_initToPool(&p->DCblocker,13, mp);
24016196:	4630      	mov	r0, r6
    p->rippleDelay = 0.5f;
24016198:	edc4 aa1a 	vstr	s21, [r4, #104]	; 0x68
    p->invOnePlusr = 1.0f;
2401619c:	edc4 ba1b 	vstr	s23, [r4, #108]	; 0x6c
    tHighpass_initToPool(&p->DCblocker,13, mp);
240161a0:	9601      	str	r6, [sp, #4]
240161a2:	f7fc f8bf 	bl	24012324 <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
240161a6:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
240161aa:	9801      	ldr	r0, [sp, #4]
240161ac:	f7fc f8fa 	bl	240123a4 <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
240161b0:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
240161b4:	9801      	ldr	r0, [sp, #4]
240161b6:	f7fc f8d9 	bl	2401236c <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
240161ba:	eeb0 1a4b 	vmov.f32	s2, s22
240161be:	eef0 0a4a 	vmov.f32	s1, s20
240161c2:	462a      	mov	r2, r5
240161c4:	eeb0 0a69 	vmov.f32	s0, s19
240161c8:	f104 0054 	add.w	r0, r4, #84	; 0x54
240161cc:	4639      	mov	r1, r7
    p->userDecay = decay;
240161ce:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
240161d2:	f7fa ff97 	bl	24011104 <tFeedbackLeveler_initToPool>
    Lfloat waveLength = (p->sampleRate/freq);
240161d6:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
    p->levMode=levMode;
240161da:	6227      	str	r7, [r4, #32]
    Lfloat waveLength = (p->sampleRate/freq);
240161dc:	ee2c ca26 	vmul.f32	s24, s24, s13
    p->changeGainCompensator = 1.0f;
240161e0:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
240161e4:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
240161e8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 24016270 <tSimpleLivingString3_initToPool+0x260>
240161ec:	eeb7 6acc 	vcvt.f64.f32	d6, s24
240161f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
240161f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240161f8:	d436      	bmi.n	24016268 <tSimpleLivingString3_initToPool+0x258>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
240161fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
240161fc:	005b      	lsls	r3, r3, #1
240161fe:	ee00 3a10 	vmov	s0, r3
24016202:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24016206:	fe80 0a4c 	vminnm.f32	s0, s0, s24
2401620a:	ee20 0a2a 	vmul.f32	s0, s0, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401620e:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
24016210:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24016214:	f7fb fb54 	bl	240118c0 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24016218:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401621c:	ed94 7a05 	vldr	s14, [r4, #20]
24016220:	eddf 7a18 	vldr	s15, [pc, #96]	; 24016284 <tSimpleLivingString3_initToPool+0x274>
24016224:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24016228:	ed94 6a01 	vldr	s12, [r4, #4]
2401622c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24016230:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24016234:	ed9f 0b10 	vldr	d0, [pc, #64]	; 24016278 <tSimpleLivingString3_initToPool+0x268>
24016238:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
2401623c:	ee27 7b06 	vmul.f64	d7, d7, d6
24016240:	ee80 0b07 	vdiv.f64	d0, d0, d7
24016244:	f003 fd28 	bl	24019c98 <exp>
    p->pickupPoint = 0.9f;
24016248:	4a0f      	ldr	r2, [pc, #60]	; (24016288 <tSimpleLivingString3_initToPool+0x278>)
    p->prevDelayLength = p->waveLengthInSamples;
2401624a:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
2401624c:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
2401624e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
24016252:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24016254:	ed84 0a04 	vstr	s0, [r4, #16]
}
24016258:	b003      	add	sp, #12
2401625a:	ecbd 8b0a 	vpop	{d8-d12}
2401625e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
24016262:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2401628c <tSimpleLivingString3_initToPool+0x27c>
24016266:	e747      	b.n	240160f8 <tSimpleLivingString3_initToPool+0xe8>
24016268:	ed9f 0a08 	vldr	s0, [pc, #32]	; 2401628c <tSimpleLivingString3_initToPool+0x27c>
2401626c:	e7cf      	b.n	2401620e <tSimpleLivingString3_initToPool+0x1fe>
2401626e:	bf00      	nop
24016270:	33333333 	.word	0x33333333
24016274:	40133333 	.word	0x40133333
24016278:	0a3d70a4 	.word	0x0a3d70a4
2401627c:	c01ba3d7 	.word	0xc01ba3d7
24016280:	3c23d70a 	.word	0x3c23d70a
24016284:	3d8d78c4 	.word	0x3d8d78c4
24016288:	3f666666 	.word	0x3f666666
2401628c:	4019999a 	.word	0x4019999a

24016290 <tSimpleLivingString3_free>:
{
24016290:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
24016292:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_free(&p->fbLev);
24016294:	f104 0054 	add.w	r0, r4, #84	; 0x54
24016298:	f7fa ff5c 	bl	24011154 <tFeedbackLeveler_free>
    tHighpass_free(&p->DCblocker);
2401629c:	f104 0050 	add.w	r0, r4, #80	; 0x50
240162a0:	f7fc f860 	bl	24012364 <tHighpass_free>
    tOnePole_free(&p->bridgeFilter);
240162a4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
240162a8:	f7fb fd8a 	bl	24011dc0 <tOnePole_free>
    tLinearDelay_free(&p->delayLineL);
240162ac:	f104 0038 	add.w	r0, r4, #56	; 0x38
240162b0:	f7fa f92e 	bl	24010510 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineU);
240162b4:	f104 0034 	add.w	r0, r4, #52	; 0x34
240162b8:	f7fa f92a 	bl	24010510 <tLinearDelay_free>
    tExpSmooth_free(&p->wlSmooth);
240162bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
240162c0:	f7fb fae8 	bl	24011894 <tExpSmooth_free>
    mpool_free((char*)p, p->mempool);
240162c4:	6821      	ldr	r1, [r4, #0]
240162c6:	4620      	mov	r0, r4
}
240162c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
240162cc:	f7fe bda6 	b.w	24014e1c <mpool_free>

240162d0 <tSimpleLivingString3_setFreq>:
{
240162d0:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
240162d2:	6804      	ldr	r4, [r0, #0]
    Lfloat waveLength = (p->sampleRate/freq);
240162d4:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
240162d8:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
240162dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
240162e0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 24016358 <tSimpleLivingString3_setFreq+0x88>
240162e4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
240162e8:	eeb4 5bc6 	vcmpe.f64	d5, d6
240162ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240162f0:	d42e      	bmi.n	24016350 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
240162f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
240162f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
240162f8:	005b      	lsls	r3, r3, #1
240162fa:	ee00 3a10 	vmov	s0, r3
240162fe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
24016302:	fe80 0a67 	vminnm.f32	s0, s0, s15
24016306:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
2401630a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
2401630e:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
24016312:	f7fb fad5 	bl	240118c0 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
24016316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401631a:	ed94 7a05 	vldr	s14, [r4, #20]
2401631e:	eddf 7a12 	vldr	s15, [pc, #72]	; 24016368 <tSimpleLivingString3_setFreq+0x98>
24016322:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24016326:	ed94 6a01 	vldr	s12, [r4, #4]
2401632a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
2401632e:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
24016332:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 24016360 <tSimpleLivingString3_setFreq+0x90>
24016336:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
2401633a:	ee27 7b06 	vmul.f64	d7, d7, d6
2401633e:	ee80 0b07 	vdiv.f64	d0, d0, d7
24016342:	f003 fca9 	bl	24019c98 <exp>
24016346:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401634a:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
2401634e:	bd10      	pop	{r4, pc}
24016350:	ed9f 0a06 	vldr	s0, [pc, #24]	; 2401636c <tSimpleLivingString3_setFreq+0x9c>
24016354:	e7d9      	b.n	2401630a <tSimpleLivingString3_setFreq+0x3a>
24016356:	bf00      	nop
24016358:	33333333 	.word	0x33333333
2401635c:	40133333 	.word	0x40133333
24016360:	0a3d70a4 	.word	0x0a3d70a4
24016364:	c01ba3d7 	.word	0xc01ba3d7
24016368:	3d8d78c4 	.word	0x3d8d78c4
2401636c:	4019999a 	.word	0x4019999a

24016370 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
24016370:	6800      	ldr	r0, [r0, #0]
24016372:	303c      	adds	r0, #60	; 0x3c
24016374:	f7fb bd28 	b.w	24011dc8 <tOnePole_setFreq>

24016378 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24016378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401637c:	eddf 7a10 	vldr	s15, [pc, #64]	; 240163c0 <tSimpleLivingString3_setDecay+0x48>
{
24016380:	b510      	push	{r4, lr}
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
24016382:	ee30 7a07 	vadd.f32	s14, s0, s14
    _tSimpleLivingString3* p = *pl;
24016386:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24016388:	ed94 6a01 	vldr	s12, [r4, #4]
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
2401638c:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->userDecay = decay;
24016390:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
24016394:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
24016398:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
2401639c:	ed9f 5b06 	vldr	d5, [pc, #24]	; 240163b8 <tSimpleLivingString3_setDecay+0x40>
240163a0:	ee27 7b06 	vmul.f64	d7, d7, d6
240163a4:	ee85 0b07 	vdiv.f64	d0, d5, d7
240163a8:	f003 fc76 	bl	24019c98 <exp>
240163ac:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
240163b0:	ed84 0a04 	vstr	s0, [r4, #16]


    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
240163b4:	bd10      	pop	{r4, pc}
240163b6:	bf00      	nop
240163b8:	52bd3c36 	.word	0x52bd3c36
240163bc:	c01ba196 	.word	0xc01ba196
240163c0:	3d8d78c4 	.word	0x3d8d78c4

240163c4 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
240163c4:	6800      	ldr	r0, [r0, #0]
240163c6:	3054      	adds	r0, #84	; 0x54
240163c8:	f7fa bf00 	b.w	240111cc <tFeedbackLeveler_setTargetLevel>

240163cc <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
240163cc:	6800      	ldr	r0, [r0, #0]
240163ce:	3054      	adds	r0, #84	; 0x54
240163d0:	f7fa bed0 	b.w	24011174 <tFeedbackLeveler_setFactor>

240163d4 <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
240163d4:	6800      	ldr	r0, [r0, #0]
240163d6:	3054      	adds	r0, #84	; 0x54
240163d8:	f7fa bec8 	b.w	2401116c <tFeedbackLeveler_setStrength>

240163dc <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
240163dc:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
240163de:	6805      	ldr	r5, [r0, #0]
{
240163e0:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
240163e2:	f105 0054 	add.w	r0, r5, #84	; 0x54
240163e6:	f7fa fec9 	bl	2401117c <tFeedbackLeveler_setMode>
    p->levMode=levMode;
240163ea:	622c      	str	r4, [r5, #32]
}
240163ec:	bd38      	pop	{r3, r4, r5, pc}
240163ee:	bf00      	nop

240163f0 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
240163f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tSimpleLivingString3* p = *pl;
240163f4:	6801      	ldr	r1, [r0, #0]
{
240163f6:	b083      	sub	sp, #12
    int length = p->waveLengthInSamples;
240163f8:	edd1 7a02 	vldr	s15, [r1, #8]
240163fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
24016400:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
24016404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016408:	ee67 0aa0 	vmul.f32	s1, s15, s1
2401640c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
24016410:	ee17 6a90 	vmov	r6, s15
    if (pluckPoint < 1)
24016414:	2e00      	cmp	r6, #0
24016416:	f340 8085 	ble.w	24016524 <tSimpleLivingString3_pluck+0x134>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
2401641a:	42b0      	cmp	r0, r6
2401641c:	dc11      	bgt.n	24016442 <tSimpleLivingString3_pluck+0x52>
    {
    	pluckPoint = length-1;
2401641e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
24016422:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
24016424:	4666      	mov	r6, ip
    for (int i = 0; i < length; i++)
24016426:	dd7a      	ble.n	2401651e <tSimpleLivingString3_pluck+0x12e>
    {
        Lfloat val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24016428:	ee07 ca90 	vmov	s15, ip
2401642c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24016430:	f1bc 0f00 	cmp.w	ip, #0
24016434:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
24016438:	ee86 7a86 	vdiv.f32	s14, s13, s12
2401643c:	da10      	bge.n	24016460 <tSimpleLivingString3_pluck+0x70>
2401643e:	2300      	movs	r3, #0
24016440:	e02d      	b.n	2401649e <tSimpleLivingString3_pluck+0xae>
    int remainder = length-pluckPoint;
24016442:	1b83      	subs	r3, r0, r6
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24016444:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
24016448:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
2401644c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24016450:	ee07 3a90 	vmov	s15, r3
24016454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24016458:	ee85 7a86 	vdiv.f32	s14, s11, s12
2401645c:	eec5 6aa7 	vdiv.f32	s13, s11, s15
24016460:	4566      	cmp	r6, ip
    for (int i = 0; i < length; i++)
24016462:	f04f 0300 	mov.w	r3, #0
24016466:	bfa8      	it	ge
24016468:	4666      	movge	r6, ip
2401646a:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
2401646e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24016470:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24016474:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24016478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
2401647c:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
2401647e:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
24016480:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
24016482:	fbb2 f7f5 	udiv	r7, r2, r5
24016486:	fb05 2217 	mls	r2, r5, r7, r2
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
2401648a:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
2401648e:	42b3      	cmp	r3, r6
        p->delayLineU->buff[bufWritePoint] = val;
24016490:	eb04 0282 	add.w	r2, r4, r2, lsl #2
24016494:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
24016498:	dde9      	ble.n	2401646e <tSimpleLivingString3_pluck+0x7e>
2401649a:	4298      	cmp	r0, r3
2401649c:	dd1d      	ble.n	240164da <tSimpleLivingString3_pluck+0xea>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
2401649e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
240164a2:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240164a6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240164a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
240164ac:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240164b0:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240164b4:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
240164b8:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240164ba:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
240164bc:	3301      	adds	r3, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240164be:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
240164c2:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
240164c4:	fbb2 f6f5 	udiv	r6, r2, r5
240164c8:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
240164cc:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
240164d0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
240164d4:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
240164d8:	dce3      	bgt.n	240164a2 <tSimpleLivingString3_pluck+0xb2>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
240164da:	f04f 0e00 	mov.w	lr, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
240164de:	ebac 020e 	sub.w	r2, ip, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
240164e2:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
240164e6:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
240164e8:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
240164ea:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
240164ec:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
240164ee:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
240164f0:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
240164f2:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
240164f4:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
240164f6:	4473      	add	r3, lr
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
240164f8:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
240164fa:	f10e 0e01 	add.w	lr, lr, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
240164fe:	fbb2 f9f7 	udiv	r9, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
24016502:	fbb3 f8f6 	udiv	r8, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
24016506:	fb07 2219 	mls	r2, r7, r9, r2
    for (int i = 0; i < length; i++)
2401650a:	4570      	cmp	r0, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
2401650c:	fb06 3318 	mls	r3, r6, r8, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
24016510:	eb05 0282 	add.w	r2, r5, r2, lsl #2
24016514:	eb04 0383 	add.w	r3, r4, r3, lsl #2
24016518:	6812      	ldr	r2, [r2, #0]
2401651a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
2401651c:	d1df      	bne.n	240164de <tSimpleLivingString3_pluck+0xee>
    }
}
2401651e:	b003      	add	sp, #12
24016520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (int i = 0; i < length; i++)
24016524:	2800      	cmp	r0, #0
24016526:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
2401652a:	ddf8      	ble.n	2401651e <tSimpleLivingString3_pluck+0x12e>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
2401652c:	ee07 ca10 	vmov	s14, ip
24016530:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
24016534:	2601      	movs	r6, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
24016536:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
2401653a:	eeb0 7a67 	vmov.f32	s14, s15
2401653e:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
24016542:	eeb0 6a67 	vmov.f32	s12, s15
24016546:	e78b      	b.n	24016460 <tSimpleLivingString3_pluck+0x70>

24016548 <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
24016548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2401654c:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
24016550:	6804      	ldr	r4, [r0, #0]
{
24016552:	eef0 8a40 	vmov.f32	s17, s0

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
24016556:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
2401655a:	f104 0534 	add.w	r5, r4, #52	; 0x34
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
2401655e:	f7fb f9bd 	bl	240118dc <tExpSmooth_tick>
24016562:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
24016566:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
2401656a:	4628      	mov	r0, r5
2401656c:	f7fa f866 	bl	2401063c <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
24016570:	eeb0 0a48 	vmov.f32	s0, s16
24016574:	4638      	mov	r0, r7
24016576:	f7fa f861 	bl	2401063c <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
2401657a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
2401657c:	2b00      	cmp	r3, #0
2401657e:	dd56      	ble.n	2401662e <tSimpleLivingString3_tick+0xe6>
    {
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
24016580:	f104 0a50 	add.w	sl, r4, #80	; 0x50
24016584:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
24016588:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
2401658c:	2600      	movs	r6, #0
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
2401658e:	4628      	mov	r0, r5
    for (int i = 0; i < p->oversampling; i++)
24016590:	3601      	adds	r6, #1
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
24016592:	f7fa f827 	bl	240105e4 <tLinearDelay_tickOut>
24016596:	4648      	mov	r0, r9
24016598:	f7fb fc34 	bl	24011e04 <tOnePole_tick>
2401659c:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
240165a0:	edd4 7a04 	vldr	s15, [r4, #16]
240165a4:	4650      	mov	r0, sl
240165a6:	ee67 7a87 	vmul.f32	s15, s15, s14
240165aa:	ee27 0a80 	vmul.f32	s0, s15, s0
240165ae:	f7fb fee9 	bl	24012384 <tHighpass_tick>
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
240165b2:	4640      	mov	r0, r8
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
240165b4:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
240165b8:	f7fa fde4 	bl	24011184 <tFeedbackLeveler_tick>
240165bc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240165c0:	eef0 0a40 	vmov.f32	s1, s0
240165c4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240165c8:	f7fe f8ea 	bl	240147a0 <LEAF_clip>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
240165cc:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
240165ce:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
240165d2:	f7fa f807 	bl	240105e4 <tLinearDelay_tickOut>
240165d6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
240165da:	eef0 0a40 	vmov.f32	s1, s0
240165de:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
240165e2:	f7fe f8dd 	bl	240147a0 <LEAF_clip>
240165e6:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
240165ea:	4628      	mov	r0, r5
240165ec:	ee38 0ac0 	vsub.f32	s0, s17, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
240165f0:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
240165f4:	f7f9 ffe2 	bl	240105bc <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
240165f8:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
240165fc:	4638      	mov	r0, r7
240165fe:	eeb1 0a40 	vneg.f32	s0, s0
24016602:	f7f9 ffdb 	bl	240105bc <tLinearDelay_tickIn>
		tLinearDelay_addTo (&p->delayLineU, p->Lout * p->rippleGain, p->rippleDelay*wl);
24016606:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
2401660a:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
2401660e:	4628      	mov	r0, r5
24016610:	ee68 7a27 	vmul.f32	s15, s16, s15
24016614:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
24016618:	ee26 0a80 	vmul.f32	s0, s13, s0
2401661c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24016620:	ee17 1a90 	vmov	r1, s15
24016624:	f7fa f848 	bl	240106b8 <tLinearDelay_addTo>
    for (int i = 0; i < p->oversampling; i++)
24016628:	6de3      	ldr	r3, [r4, #92]	; 0x5c
2401662a:	42b3      	cmp	r3, r6
2401662c:	dcaf      	bgt.n	2401658e <tSimpleLivingString3_tick+0x46>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
2401662e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    Lfloat point = wl * p->pickupPoint;
24016632:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    Lfloat LfloatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24016636:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
24016638:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    Lfloat point = wl * p->pickupPoint;
2401663c:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24016640:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
24016642:	ee77 6ae6 	vsub.f32	s13, s15, s13
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24016646:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
24016648:	feb8 6a65 	vrinta.f32	s12, s11
2401664c:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
24016650:	ee66 6a88 	vmul.f32	s13, s13, s16
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24016654:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
24016658:	feb8 7a66 	vrinta.f32	s14, s13
2401665c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
24016660:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24016664:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24016668:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
2401666c:	ee17 0a10 	vmov	r0, s14
    Lfloat LfloatPart = point - whichPoint;
24016670:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
24016674:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24016676:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
24016678:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
2401667c:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
2401667e:	fb07 2216 	mls	r2, r7, r6, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
24016682:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
24016686:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
24016688:	69c8      	ldr	r0, [r1, #28]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
2401668a:	6889      	ldr	r1, [r1, #8]
    Lfloat LfloatPart = point - whichPoint;
2401668c:	ee75 5ac6 	vsub.f32	s11, s11, s12
    LfloatPart = reversePoint - whichPoint;
24016690:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
24016694:	fb93 f6f0 	sdiv	r6, r3, r0
24016698:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
2401669c:	1c56      	adds	r6, r2, #1
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
2401669e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240166a2:	ee30 0a06 	vadd.f32	s0, s0, s12
    LfloatPart = reversePoint - whichPoint;
240166a6:	ee76 6ac6 	vsub.f32	s13, s13, s12
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
240166aa:	ed92 7a00 	vldr	s14, [r2]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240166ae:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
240166b2:	3301      	adds	r3, #1
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240166b4:	ed92 6a00 	vldr	s12, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
240166b8:	fb96 f2f7 	sdiv	r2, r6, r7
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240166bc:	ee20 0a06 	vmul.f32	s0, s0, s12
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
240166c0:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
240166c4:	68a2      	ldr	r2, [r4, #8]
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
240166c6:	eb05 0586 	add.w	r5, r5, r6, lsl #2
240166ca:	eea7 0a27 	vfma.f32	s0, s14, s15
240166ce:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
240166d2:	fb93 f5f0 	sdiv	r5, r3, r0
240166d6:	eea7 0aa5 	vfma.f32	s0, s15, s11
240166da:	fb00 3315 	mls	r3, r0, r5, r3
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
240166de:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
240166e2:	edd1 7a00 	vldr	s15, [r1]
    p->prevDelayLength = p->waveLengthInSamples;
240166e6:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
240166e8:	eea7 0aa6 	vfma.f32	s0, s15, s13
240166ec:	ee20 0a24 	vmul.f32	s0, s0, s9
240166f0:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
240166f4:	ecbd 8b02 	vpop	{d8}
240166f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

240166fc <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
240166fc:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
240166fe:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
24016702:	4770      	bx	lr

24016704 <tTString_initToPool>:
void    tTString_init                  (tTString* const b, int oversampling, Lfloat lowestFreq, LEAF* const leaf)
{
    tTString_initToPool(b, oversampling, lowestFreq, &leaf->mempool);
}
void    tTString_initToPool            (tTString* const bw, int oversampling, Lfloat lowestFreq, tMempool* const mp)
{
24016704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24016708:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
2401670c:	6817      	ldr	r7, [r2, #0]
{
2401670e:	460e      	mov	r6, r1
24016710:	b085      	sub	sp, #20
24016712:	4680      	mov	r8, r0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
24016714:	4639      	mov	r1, r7
24016716:	f44f 70ca 	mov.w	r0, #404	; 0x194
{
2401671a:	4615      	mov	r5, r2
2401671c:	eeb0 9a40 	vmov.f32	s18, s0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
24016720:	f7fe faba 	bl	24014c98 <mpool_alloc>
    x->mempool = m;
    LEAF* leaf = x->mempool->leaf;
    
    x->oversampling = oversampling;
    x->invOversampling = 1.0f / oversampling;
24016724:	ee07 6a90 	vmov	s15, r6
24016728:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
2401672c:	f8c8 0000 	str.w	r0, [r8]
    x->invOversampling = 1.0f / oversampling;
24016730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    x->mempool = m;
24016734:	6007      	str	r7, [r0, #0]
    LEAF* leaf = x->mempool->leaf;
24016736:	687a      	ldr	r2, [r7, #4]

    x->pickupPos = 0.0f;
    x->slideGain = 0.4f;
    x->barDrive = 1.5f;
    x->wound = 1;
    x->barPulsePhasor = 0;
24016738:	f04f 0800 	mov.w	r8, #0
    x->oversampling = oversampling;
2401673c:	6046      	str	r6, [r0, #4]
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
2401673e:	f100 0714 	add.w	r7, r0, #20
    x->invOversampling = 1.0f / oversampling;
24016742:	ee88 7aa7 	vdiv.f32	s14, s17, s15
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
24016746:	eddf baf7 	vldr	s23, [pc, #988]	; 24016b24 <tTString_initToPool+0x420>
    x->decayInSeconds = 10.0f;
2401674a:	4bf7      	ldr	r3, [pc, #988]	; (24016b28 <tTString_initToPool+0x424>)
    x->wound = 1;
2401674c:	2601      	movs	r6, #1
    x->tensionGain = 0.0f;
2401674e:	ed9f 8af7 	vldr	s16, [pc, #988]	; 24016b2c <tTString_initToPool+0x428>
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
24016752:	4604      	mov	r4, r0
    x->baseDelay = 100.0f;
24016754:	eddf 9af6 	vldr	s19, [pc, #984]	; 24016b30 <tTString_initToPool+0x42c>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer

    tLagrangeDelay_clear(&x->delay);
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
24016758:	f104 0918 	add.w	r9, r4, #24
2401675c:	eddf aaf5 	vldr	s21, [pc, #980]	; 24016b34 <tTString_initToPool+0x430>
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
24016760:	eeb0 0a69 	vmov.f32	s0, s19
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
   
    tTString_setFreq(&x, 440.0f);

    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
24016764:	f104 0b4c 	add.w	fp, r4, #76	; 0x4c
24016768:	ed9f baf3 	vldr	s22, [pc, #972]	; 24016b38 <tTString_initToPool+0x434>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
2401676c:	f504 7abe 	add.w	sl, r4, #380	; 0x17c
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
24016770:	ee77 6a07 	vadd.f32	s13, s14, s14
    x->invOversampling = 1.0f / oversampling;
24016774:	ed80 7a02 	vstr	s14, [r0, #8]
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
24016778:	edc0 6a03 	vstr	s13, [r0, #12]
    x->sampleRate          = leaf->sampleRate * oversampling;
2401677c:	ed92 7a00 	vldr	s14, [r2]
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
24016780:	462a      	mov	r2, r5
    x->decayInSeconds = 10.0f;
24016782:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    x->sampleRate          = leaf->sampleRate * oversampling;
24016786:	ee67 7a87 	vmul.f32	s15, s15, s14
    x->slideGain = 0.4f;
2401678a:	4bec      	ldr	r3, [pc, #944]	; (24016b3c <tTString_initToPool+0x438>)
    x->wound = 1;
2401678c:	f8c0 60d8 	str.w	r6, [r0, #216]	; 0xd8
    x->slideGain = 0.4f;
24016790:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
    x->barDrive = 1.5f;
24016794:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    x->invSampleRate = 1.f / x->sampleRate;
24016798:	eec8 6aa7 	vdiv.f32	s13, s17, s15
    x->sampleRate          = leaf->sampleRate * oversampling;
2401679c:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
    x->barDrive = 1.5f;
240167a0:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    x->barPulsePhasor = 0;
240167a4:	f8c0 80e4 	str.w	r8, [r0, #228]	; 0xe4
    x->tensionGain = 0.0f;
240167a8:	ed80 8a11 	vstr	s16, [r0, #68]	; 0x44
    x->allpassDelay = 0.f;
240167ac:	ed80 8a17 	vstr	s16, [r0, #92]	; 0x5c
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
240167b0:	ee87 7a89 	vdiv.f32	s14, s15, s18
    x->decayCoeff = 1.0f;
240167b4:	edc0 8a1d 	vstr	s17, [r0, #116]	; 0x74
    x->muteCoeff = 1.0f;
240167b8:	edc0 8a1e 	vstr	s17, [r0, #120]	; 0x78
    x->output = 0.0f;
240167bc:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    x->outputP = 0.0f;
240167c0:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    x->rippleRate = 1.0f;
240167c4:	edc0 8a20 	vstr	s17, [r0, #128]	; 0x80
    x->r = 0.0f;
240167c8:	ed80 8a1f 	vstr	s16, [r0, #124]	; 0x7c
    x->invOnePlusr = 1.0f;
240167cc:	edc0 8a23 	vstr	s17, [r0, #140]	; 0x8c
    x->harmonic = 1.0f;
240167d0:	edc0 8a21 	vstr	s17, [r0, #132]	; 0x84
    x->baseDelay = 100.0f;
240167d4:	edc0 9a0b 	vstr	s19, [r0, #44]	; 0x2c
    x->tensionAmount = 0.0f;
240167d8:	ed80 8a28 	vstr	s16, [r0, #160]	; 0xa0
    x->pickupPos = 0.0f;
240167dc:	ed80 8a27 	vstr	s16, [r0, #156]	; 0x9c
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
240167e0:	ee66 7aab 	vmul.f32	s15, s13, s23
    x->invSampleRate = 1.f / x->sampleRate;
240167e4:	edc0 6a0d 	vstr	s13, [r0, #52]	; 0x34
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
240167e8:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
240167ec:	4638      	mov	r0, r7
240167ee:	eefc 7ac7 	vcvt.u32.f32	s15, s14
240167f2:	ee17 1a90 	vmov	r1, s15
240167f6:	edcd 7a01 	vstr	s15, [sp, #4]
240167fa:	f7fa f827 	bl	2401084c <tLagrangeDelay_initToPool>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
240167fe:	ed94 9a0c 	vldr	s18, [r4, #48]	; 0x30
24016802:	4638      	mov	r0, r7
24016804:	f7fa f8ec 	bl	240109e0 <tLagrangeDelay_getMaxDelay>
24016808:	eec9 7a00 	vdiv.f32	s15, s18, s0
    tLagrangeDelay_clear(&x->delay);
2401680c:	4638      	mov	r0, r7
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
2401680e:	edc4 7a24 	vstr	s15, [r4, #144]	; 0x90
    tLagrangeDelay_clear(&x->delay);
24016812:	f7f9 ff6f 	bl	240106f4 <tLagrangeDelay_clear>
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
24016816:	462a      	mov	r2, r5
24016818:	9901      	ldr	r1, [sp, #4]
2401681a:	eeb0 0a69 	vmov.f32	s0, s19
2401681e:	4648      	mov	r0, r9
24016820:	f7fa f814 	bl	2401084c <tLagrangeDelay_initToPool>
    tLagrangeDelay_clear(&x->delayP);
24016824:	4648      	mov	r0, r9
24016826:	f7f9 ff65 	bl	240106f4 <tLagrangeDelay_clear>
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
2401682a:	4638      	mov	r0, r7
2401682c:	f7fa f8d8 	bl	240109e0 <tLagrangeDelay_getMaxDelay>
24016830:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    tCookOnePole_initToPool(&x->reflFilt, mp);
24016834:	f104 0924 	add.w	r9, r4, #36	; 0x24
    tCookOnePole_initToPool(&x->reflFiltP, mp);
24016838:	f104 0728 	add.w	r7, r4, #40	; 0x28
    tCookOnePole_initToPool(&x->reflFilt, mp);
2401683c:	4629      	mov	r1, r5
2401683e:	4648      	mov	r0, r9
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
24016840:	ed84 0a54 	vstr	s0, [r4, #336]	; 0x150
    tCookOnePole_initToPool(&x->reflFilt, mp);
24016844:	f7fb fb14 	bl	24011e70 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFilt, x->sampleRate);
24016848:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
2401684c:	4648      	mov	r0, r9
2401684e:	f7fb fb53 	bl	24011ef8 <tCookOnePole_setSampleRate>
    tCookOnePole_initToPool(&x->reflFiltP, mp);
24016852:	4629      	mov	r1, r5
24016854:	4638      	mov	r0, r7
24016856:	f7fb fb0b 	bl	24011e70 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFiltP, x->sampleRate);
2401685a:	4638      	mov	r0, r7
2401685c:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016860:	f7fb fb4a 	bl	24011ef8 <tCookOnePole_setSampleRate>
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
24016864:	4648      	mov	r0, r9
24016866:	eddf 0ab6 	vldr	s1, [pc, #728]	; 24016b40 <tTString_initToPool+0x43c>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
2401686a:	f104 0954 	add.w	r9, r4, #84	; 0x54
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
2401686e:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 24016b44 <tTString_initToPool+0x440>
24016872:	f7fb fb2b 	bl	24011ecc <tCookOnePole_setGainAndPole>
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
24016876:	eddf 0ab2 	vldr	s1, [pc, #712]	; 24016b40 <tTString_initToPool+0x43c>
2401687a:	4638      	mov	r0, r7
2401687c:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 24016b44 <tTString_initToPool+0x440>
24016880:	f7fb fb24 	bl	24011ecc <tCookOnePole_setGainAndPole>
    x->freq = freq;

    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);

    //tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 1.0f);
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24016884:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
24016888:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
2401688c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
24016890:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24016894:	f104 0750 	add.w	r7, r4, #80	; 0x50
24016898:	fec7 7aaa 	vmaxnm.f32	s15, s15, s21
2401689c:	ee86 0a27 	vdiv.f32	s0, s12, s15
240168a0:	4638      	mov	r0, r7
    x->freq = freq;
240168a2:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
240168a6:	ee27 9a87 	vmul.f32	s18, s15, s14
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
240168aa:	ee30 0a66 	vsub.f32	s0, s0, s13
240168ae:	f7fb f807 	bl	240118c0 <tExpSmooth_setDest>

    //tCycle_setFreq(&x->tensionModOsc, freq * x->invOversamplingTimesTwo);
#ifdef ARM_MATH_CM7
    Lfloat result = 0.0f;
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
240168b2:	eeb0 0a49 	vmov.f32	s0, s18
240168b6:	ed94 aa50 	vldr	s20, [r4, #320]	; 0x140
    Lfloat result = 0.0f;
240168ba:	ed8d 8a03 	vstr	s16, [sp, #12]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
240168be:	f7e9 feef 	bl	240006a0 <arm_sin_f32>
240168c2:	eef0 7a40 	vmov.f32	s15, s0
240168c6:	ed94 ca50 	vldr	s24, [r4, #320]	; 0x140
240168ca:	eeb0 0a49 	vmov.f32	s0, s18
240168ce:	ee2a aa27 	vmul.f32	s20, s20, s15
240168d2:	f7e9 fe93 	bl	240005fc <arm_cos_f32>
240168d6:	eef0 0a68 	vmov.f32	s1, s17
240168da:	a803      	add	r0, sp, #12
240168dc:	eef0 7a40 	vmov.f32	s15, s0
240168e0:	eeb0 0a4a 	vmov.f32	s0, s20
240168e4:	eeec 0a67 	vfms.f32	s1, s24, s15
240168e8:	f7e9 fcfe 	bl	240002e8 <arm_atan2_f32>
     x->phaseComp = result;
240168ec:	9b03      	ldr	r3, [sp, #12]
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
240168ee:	edd4 0a02 	vldr	s1, [r4, #8]
240168f2:	4629      	mov	r1, r5
     x->phaseComp = result;
240168f4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
240168f8:	eeb0 0a48 	vmov.f32	s0, s16
240168fc:	ee60 0a8b 	vmul.f32	s1, s1, s22
24016900:	4658      	mov	r0, fp
24016902:	f7fa ffa1 	bl	24011848 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
24016906:	eeb0 0a48 	vmov.f32	s0, s16
2401690a:	4658      	mov	r0, fp
2401690c:	f7fa ffd8 	bl	240118c0 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
24016910:	eddf 7a9e 	vldr	s15, [pc, #632]	; 24016b8c <tTString_initToPool+0x488>
24016914:	edd4 0a02 	vldr	s1, [r4, #8]
24016918:	4629      	mov	r1, r5
2401691a:	4638      	mov	r0, r7
2401691c:	eeb0 0a69 	vmov.f32	s0, s19
24016920:	ee60 0aa7 	vmul.f32	s1, s1, s15
24016924:	f7fa ff90 	bl	24011848 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
24016928:	4638      	mov	r0, r7
2401692a:	eeb0 0a69 	vmov.f32	s0, s19
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
2401692e:	f104 0758 	add.w	r7, r4, #88	; 0x58
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
24016932:	f7fa ffc5 	bl	240118c0 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
24016936:	eddf 7a84 	vldr	s15, [pc, #528]	; 24016b48 <tTString_initToPool+0x444>
2401693a:	edd4 0a02 	vldr	s1, [r4, #8]
2401693e:	4629      	mov	r1, r5
24016940:	eeb0 0a48 	vmov.f32	s0, s16
24016944:	4650      	mov	r0, sl
24016946:	ee60 0aa7 	vmul.f32	s1, s1, s15
2401694a:	f7fa ff7d 	bl	24011848 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
2401694e:	eeb0 0a48 	vmov.f32	s0, s16
24016952:	4650      	mov	r0, sl
24016954:	f7fa ffb4 	bl	240118c0 <tExpSmooth_setDest>
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
24016958:	462a      	mov	r2, r5
2401695a:	2104      	movs	r1, #4
2401695c:	4648      	mov	r0, r9
2401695e:	f7fb f85d 	bl	24011a1c <tThiranAllpassSOCascade_initToPool>
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
24016962:	462a      	mov	r2, r5
24016964:	2104      	movs	r1, #4
24016966:	4638      	mov	r0, r7
24016968:	f7fb f858 	bl	24011a1c <tThiranAllpassSOCascade_initToPool>
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
2401696c:	eef0 0a69 	vmov.f32	s1, s19
24016970:	ed94 1a02 	vldr	s2, [r4, #8]
24016974:	4648      	mov	r0, r9
24016976:	ed9f 0a75 	vldr	s0, [pc, #468]	; 24016b4c <tTString_initToPool+0x448>
2401697a:	f7fb f8c7 	bl	24011b0c <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
2401697e:	ed94 1a02 	vldr	s2, [r4, #8]
24016982:	4638      	mov	r0, r7
24016984:	eef0 0a69 	vmov.f32	s1, s19
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
24016988:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
2401698c:	f104 076c 	add.w	r7, r4, #108	; 0x6c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
24016990:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 24016b50 <tTString_initToPool+0x44c>
24016994:	f7fb f8ba 	bl	24011b0c <tThiranAllpassSOCascade_setCoeff>
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
24016998:	f104 0068 	add.w	r0, r4, #104	; 0x68
2401699c:	4631      	mov	r1, r6
2401699e:	eddf 0a6d 	vldr	s1, [pc, #436]	; 24016b54 <tTString_initToPool+0x450>
240169a2:	462a      	mov	r2, r5
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
240169a4:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
240169a8:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 24016b58 <tTString_initToPool+0x454>
240169ac:	9001      	str	r0, [sp, #4]
240169ae:	f7fb fb35 	bl	2401201c <tSVF_initToPool>
    tSVF_setSampleRate(&x->lowpassP, x->sampleRate);
240169b2:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
240169b6:	9801      	ldr	r0, [sp, #4]
240169b8:	f7fb fc8a 	bl	240122d0 <tSVF_setSampleRate>
    tSVF_setFreq(&x->lowpassP, 6000.0f);
240169bc:	ed9f 0a67 	vldr	s0, [pc, #412]	; 24016b5c <tTString_initToPool+0x458>
240169c0:	9801      	ldr	r0, [sp, #4]
240169c2:	f7fb fbed 	bl	240121a0 <tSVF_setFreq>
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
240169c6:	eddf 0a63 	vldr	s1, [pc, #396]	; 24016b54 <tTString_initToPool+0x450>
240169ca:	462a      	mov	r2, r5
240169cc:	4641      	mov	r1, r8
240169ce:	4638      	mov	r0, r7
240169d0:	ed9f 0a63 	vldr	s0, [pc, #396]	; 24016b60 <tTString_initToPool+0x45c>
240169d4:	f7fb fb22 	bl	2401201c <tSVF_initToPool>
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
240169d8:	4638      	mov	r0, r7
240169da:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
240169de:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
240169e2:	f7fb fc75 	bl	240122d0 <tSVF_setSampleRate>
    tSVF_setFreq(&x->highpassP, 1800.0f);
240169e6:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 24016b60 <tTString_initToPool+0x45c>
240169ea:	4638      	mov	r0, r7
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
240169ec:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    tSVF_setFreq(&x->highpassP, 1800.0f);
240169f0:	f7fb fbd6 	bl	240121a0 <tSVF_setFreq>
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
240169f4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    tCycle_initToPool(&x->tensionModOsc, mp);
240169f8:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
240169fc:	4629      	mov	r1, r5
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
240169fe:	ee67 7aab 	vmul.f32	s15, s15, s23
    tCycle_initToPool(&x->tensionModOsc, mp);
24016a02:	9001      	str	r0, [sp, #4]
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
24016a04:	edc4 7a04 	vstr	s15, [r4, #16]
    tCycle_initToPool(&x->tensionModOsc, mp);
24016a08:	f7fe faa8 	bl	24014f5c <tCycle_initToPool>
    tCycle_setSampleRate(&x->tensionModOsc, x->sampleRate);
24016a0c:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016a10:	9801      	ldr	r0, [sp, #4]
24016a12:	f7fe fb07 	bl	24015024 <tCycle_setSampleRate>
    tCycle_initToPool(&x->pickupModOsc, mp);
24016a16:	f104 00ac 	add.w	r0, r4, #172	; 0xac
24016a1a:	4629      	mov	r1, r5
24016a1c:	9001      	str	r0, [sp, #4]
24016a1e:	f7fe fa9d 	bl	24014f5c <tCycle_initToPool>
    tCycle_setSampleRate(&x->pickupModOsc, x->sampleRate);
24016a22:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016a26:	9801      	ldr	r0, [sp, #4]
24016a28:	f7fe fafc 	bl	24015024 <tCycle_setSampleRate>
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
24016a2c:	4631      	mov	r1, r6
24016a2e:	eef0 0a68 	vmov.f32	s1, s17
24016a32:	462a      	mov	r2, r5
24016a34:	4638      	mov	r0, r7
24016a36:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 24016b64 <tTString_initToPool+0x460>
    x->pickupModOscFreq = 440.0f;
24016a3a:	edc4 aa2c 	vstr	s21, [r4, #176]	; 0xb0
    x->pickupModOscAmp = 1.0f;
24016a3e:	edc4 8a2d 	vstr	s17, [r4, #180]	; 0xb4
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
24016a42:	f7fb faeb 	bl	2401201c <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter, x->sampleRate);
24016a46:	4638      	mov	r0, r7
24016a48:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016a4c:	f7fb fc40 	bl	240122d0 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
24016a50:	4638      	mov	r0, r7
24016a52:	ed9f 0a45 	vldr	s0, [pc, #276]	; 24016b68 <tTString_initToPool+0x464>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, .9f, mp);
24016a56:	f504 77c4 	add.w	r7, r4, #392	; 0x188
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
24016a5a:	f7fb fba1 	bl	240121a0 <tSVF_setFreq>
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
24016a5e:	4631      	mov	r1, r6
24016a60:	eddf 0a42 	vldr	s1, [pc, #264]	; 24016b6c <tTString_initToPool+0x468>
24016a64:	462a      	mov	r2, r5
24016a66:	ed9f 0a42 	vldr	s0, [pc, #264]	; 24016b70 <tTString_initToPool+0x46c>
24016a6a:	4640      	mov	r0, r8
24016a6c:	f7fb fad6 	bl	2401201c <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter2, x->sampleRate);
24016a70:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016a74:	4640      	mov	r0, r8
24016a76:	f7fb fc2b 	bl	240122d0 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter2, 4100.0f);
24016a7a:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 24016b74 <tTString_initToPool+0x470>
24016a7e:	4640      	mov	r0, r8
24016a80:	f7fb fb8e 	bl	240121a0 <tSVF_setFreq>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, .9f, mp);
24016a84:	eddf 0a43 	vldr	s1, [pc, #268]	; 24016b94 <tTString_initToPool+0x490>
24016a88:	462a      	mov	r2, r5
24016a8a:	2104      	movs	r1, #4
24016a8c:	4638      	mov	r0, r7
24016a8e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 24016b84 <tTString_initToPool+0x480>
24016a92:	f7fb fac3 	bl	2401201c <tSVF_initToPool>
    tSVF_setSampleRate(&x->peakFilt, x->sampleRate);
24016a96:	4638      	mov	r0, r7
24016a98:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016a9c:	f7fb fc18 	bl	240122d0 <tSVF_setSampleRate>
    tSVF_setFreq(&x->peakFilt, 1000.0f);
24016aa0:	ed9f 0a38 	vldr	s0, [pc, #224]	; 24016b84 <tTString_initToPool+0x480>
24016aa4:	4638      	mov	r0, r7
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
24016aa6:	f104 071c 	add.w	r7, r4, #28
    tSVF_setFreq(&x->peakFilt, 1000.0f);
24016aaa:	f7fb fb79 	bl	240121a0 <tSVF_setFreq>
    tNoise_initToPool(&x->noise, PinkNoise, mp);
24016aae:	462a      	mov	r2, r5
24016ab0:	4631      	mov	r1, r6
24016ab2:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
24016ab6:	f7fe fea7 	bl	24015808 <tNoise_initToPool>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
24016aba:	f104 0620 	add.w	r6, r4, #32
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
24016abe:	4629      	mov	r1, r5
24016ac0:	eeb0 0a68 	vmov.f32	s0, s17
24016ac4:	4638      	mov	r0, r7
24016ac6:	f7fb fc2d 	bl	24012324 <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlock,x->sampleRate);
24016aca:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016ace:	4638      	mov	r0, r7
24016ad0:	f7fb fc68 	bl	240123a4 <tHighpass_setSampleRate>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
24016ad4:	4629      	mov	r1, r5
24016ad6:	eeb0 0a68 	vmov.f32	s0, s17
24016ada:	4630      	mov	r0, r6
24016adc:	f7fb fc22 	bl	24012324 <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlockP,x->sampleRate);
24016ae0:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
24016ae4:	4630      	mov	r0, r6
24016ae6:	f7fb fc5d 	bl	240123a4 <tHighpass_setSampleRate>
    tSlide_initToPool(&x->slide, 0, 3000, mp);//100 1400
24016aea:	4629      	mov	r1, r5
24016aec:	f104 0048 	add.w	r0, r4, #72	; 0x48
24016af0:	eeb0 0a48 	vmov.f32	s0, s16
24016af4:	eddf 0a20 	vldr	s1, [pc, #128]	; 24016b78 <tTString_initToPool+0x474>
24016af8:	f7fa ff00 	bl	240118fc <tSlide_initToPool>
    if (x->wound)
24016afc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
24016b00:	f504 708c 	add.w	r0, r4, #280	; 0x118
24016b04:	4629      	mov	r1, r5
    if (x->wound)
24016b06:	2b00      	cmp	r3, #0
24016b08:	f000 80e4 	beq.w	24016cd4 <tTString_initToPool+0x5d0>
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
24016b0c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 24016b7c <tTString_initToPool+0x478>
24016b10:	eeb0 0a48 	vmov.f32	s0, s16
24016b14:	9001      	str	r0, [sp, #4]
24016b16:	f7fa fe97 	bl	24011848 <tExpSmooth_initToPool>
    	    tExpSmooth_setDest(&x->barSmooth2, 0.0f);
24016b1a:	eeb0 0a48 	vmov.f32	s0, s16
24016b1e:	9801      	ldr	r0, [sp, #4]
24016b20:	e040      	b.n	24016ba4 <tTString_initToPool+0x4a0>
24016b22:	bf00      	nop
24016b24:	40c90fdb 	.word	0x40c90fdb
24016b28:	41200000 	.word	0x41200000
24016b2c:	00000000 	.word	0x00000000
24016b30:	42c80000 	.word	0x42c80000
24016b34:	43dc0000 	.word	0x43dc0000
24016b38:	3b83126f 	.word	0x3b83126f
24016b3c:	3ecccccd 	.word	0x3ecccccd
24016b40:	bab78034 	.word	0xbab78034
24016b44:	3f7fbe77 	.word	0x3f7fbe77
24016b48:	3db851ec 	.word	0x3db851ec
24016b4c:	38d1b717 	.word	0x38d1b717
24016b50:	37d1b717 	.word	0x37d1b717
24016b54:	3f4ccccd 	.word	0x3f4ccccd
24016b58:	459c4000 	.word	0x459c4000
24016b5c:	45bb8000 	.word	0x45bb8000
24016b60:	44e10000 	.word	0x44e10000
24016b64:	45354000 	.word	0x45354000
24016b68:	4573c000 	.word	0x4573c000
24016b6c:	3f8ccccd 	.word	0x3f8ccccd
24016b70:	456d8000 	.word	0x456d8000
24016b74:	45802000 	.word	0x45802000
24016b78:	453b8000 	.word	0x453b8000
24016b7c:	3a03126f 	.word	0x3a03126f
24016b80:	3a51b717 	.word	0x3a51b717
24016b84:	447a0000 	.word	0x447a0000
24016b88:	00000000 	.word	0x00000000
24016b8c:	3d23d70a 	.word	0x3d23d70a
24016b90:	3d4ccccd 	.word	0x3d4ccccd
24016b94:	3f666666 	.word	0x3f666666
24016b98:	45dac000 	.word	0x45dac000
24016b9c:	3dcccccd 	.word	0x3dcccccd
24016ba0:	3e7ae148 	.word	0x3e7ae148
24016ba4:	f7fa fe8c 	bl	240118c0 <tExpSmooth_setDest>
    	    tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.0008f, mp); //was 0.008
24016ba8:	f504 768e 	add.w	r6, r4, #284	; 0x11c
24016bac:	4629      	mov	r1, r5
24016bae:	ed5f 0a0c 	vldr	s1, [pc, #-48]	; 24016b80 <tTString_initToPool+0x47c>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
24016bb2:	eeb0 0a48 	vmov.f32	s0, s16
24016bb6:	4630      	mov	r0, r6
24016bb8:	9601      	str	r6, [sp, #4]
24016bba:	f7fa fe45 	bl	24011848 <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmoothVol, 0.0f);
24016bbe:	eeb0 0a48 	vmov.f32	s0, s16
24016bc2:	9801      	ldr	r0, [sp, #4]
24016bc4:	f7fa fe7c 	bl	240118c0 <tExpSmooth_setDest>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
24016bc8:	ed5f 0a12 	vldr	s1, [pc, #-72]	; 24016b84 <tTString_initToPool+0x480>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
24016bcc:	ed1f 8a12 	vldr	s16, [pc, #-72]	; 24016b88 <tTString_initToPool+0x484>
24016bd0:	f104 06dc 	add.w	r6, r4, #220	; 0xdc
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
24016bd4:	eeb0 0a60 	vmov.f32	s0, s1
24016bd8:	f504 7084 	add.w	r0, r4, #264	; 0x108
24016bdc:	4629      	mov	r1, r5
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
24016bde:	ed5f 8a15 	vldr	s17, [pc, #-84]	; 24016b8c <tTString_initToPool+0x488>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
24016be2:	f7fa fe8b 	bl	240118fc <tSlide_initToPool>
    tSlide_initToPool(&x->barPulseSlide, 2, 30, mp);//100 1400 // 10 3000
24016be6:	4629      	mov	r1, r5
24016be8:	f504 708a 	add.w	r0, r4, #276	; 0x114
24016bec:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
24016bf0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
24016bf4:	f7fa fe82 	bl	240118fc <tSlide_initToPool>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
24016bf8:	4629      	mov	r1, r5
24016bfa:	eeb0 0a48 	vmov.f32	s0, s16
24016bfe:	ed5f 0a1c 	vldr	s1, [pc, #-112]	; 24016b90 <tTString_initToPool+0x48c>
24016c02:	4630      	mov	r0, r6
24016c04:	f7fa fe20 	bl	24011848 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->barPulse, 0.0f);
24016c08:	eeb0 0a48 	vmov.f32	s0, s16
24016c0c:	4630      	mov	r0, r6
    x->timeSinceLastBump = 1;
24016c0e:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    tExpSmooth_setDest(&x->barPulse, 0.0f);
24016c12:	f7fa fe55 	bl	240118c0 <tExpSmooth_setDest>
    tSVF_initToPool(&x->barResonator, SVFTypeBandpass, 5.0f, 15.0f, mp);
24016c16:	462a      	mov	r2, r5
24016c18:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
24016c1c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
24016c20:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24016c24:	2102      	movs	r1, #2
24016c26:	f7fb f9f9 	bl	2401201c <tSVF_initToPool>
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
24016c2a:	4629      	mov	r1, r5
24016c2c:	f504 7086 	add.w	r0, r4, #268	; 0x10c
24016c30:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
    x->timeSinceLastBump = 1;
24016c34:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
24016c38:	f7fb fb74 	bl	24012324 <tHighpass_initToPool>
    tSVF_initToPool(&x->barLP, SVFTypeLowpass, 7000.0f, 0.9f, mp);
24016c3c:	462a      	mov	r2, r5
24016c3e:	f504 7088 	add.w	r0, r4, #272	; 0x110
24016c42:	ed5f 0a2c 	vldr	s1, [pc, #-176]	; 24016b94 <tTString_initToPool+0x490>
24016c46:	ed1f 0a2c 	vldr	s0, [pc, #-176]	; 24016b98 <tTString_initToPool+0x494>
24016c4a:	2101      	movs	r1, #1
24016c4c:	f7fb f9e6 	bl	2401201c <tSVF_initToPool>
    x->inharmonic = 1;
24016c50:	2101      	movs	r1, #1
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
24016c52:	edd4 0a02 	vldr	s1, [r4, #8]
24016c56:	462a      	mov	r2, r5
24016c58:	f504 70ac 	add.w	r0, r4, #344	; 0x158
    x->inharmonic = 1;
24016c5c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
24016c60:	ee60 0aa8 	vmul.f32	s1, s1, s17
24016c64:	ed1f 1a33 	vldr	s2, [pc, #-204]	; 24016b9c <tTString_initToPool+0x498>
24016c68:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
    x->inharmonicMult = 1.0f;
24016c6c:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
24016c70:	f7fa fa48 	bl	24011104 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&x->feedbackP, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
24016c74:	edd4 0a02 	vldr	s1, [r4, #8]
24016c78:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
24016c7c:	ed1f 1a39 	vldr	s2, [pc, #-228]	; 24016b9c <tTString_initToPool+0x498>
24016c80:	ee60 0aa8 	vmul.f32	s1, s1, s17
24016c84:	462a      	mov	r2, r5
24016c86:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
24016c8a:	2101      	movs	r1, #1
24016c8c:	f7fa fa3a 	bl	24011104 <tFeedbackLeveler_initToPool>
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
24016c90:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 24016ba0 <tTString_initToPool+0x49c>
24016c94:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
24016c98:	462a      	mov	r2, r5
    x->windingsPerInch = 70.0f;
24016c9a:	4b17      	ldr	r3, [pc, #92]	; (24016cf8 <tTString_initToPool+0x5f4>)
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
24016c9c:	f504 70c0 	add.w	r0, r4, #384	; 0x180
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
24016ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
24016ca4:	2101      	movs	r1, #1
    x->windingsPerInch = 70.0f;
24016ca6:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
24016caa:	edc4 7a5a 	vstr	s15, [r4, #360]	; 0x168
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
24016cae:	f7fe fdab 	bl	24015808 <tNoise_initToPool>
    x->pickupAmount = 0.0f;
24016cb2:	ed84 8a63 	vstr	s16, [r4, #396]	; 0x18c
    _tMempool* m = *mp;
24016cb6:	682d      	ldr	r5, [r5, #0]
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
24016cb8:	2008      	movs	r0, #8
24016cba:	4629      	mov	r1, r5
24016cbc:	f7fd ffec 	bl	24014c98 <mpool_alloc>
24016cc0:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    p->mempool = m;
24016cc4:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
24016cc6:	ed80 8a01 	vstr	s16, [r0, #4]
}
24016cca:	b005      	add	sp, #20
24016ccc:	ecbd 8b0a 	vpop	{d8-d12}
24016cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.005f, mp); //was 0.0005
24016cd4:	eddf 0a09 	vldr	s1, [pc, #36]	; 24016cfc <tTString_initToPool+0x5f8>
24016cd8:	eeb0 0a48 	vmov.f32	s0, s16
24016cdc:	9001      	str	r0, [sp, #4]
24016cde:	f7fa fdb3 	bl	24011848 <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmooth2, 0.0f);
24016ce2:	eeb0 0a48 	vmov.f32	s0, s16
24016ce6:	9801      	ldr	r0, [sp, #4]
24016ce8:	f7fa fdea 	bl	240118c0 <tExpSmooth_setDest>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
24016cec:	f504 768e 	add.w	r6, r4, #284	; 0x11c
24016cf0:	eef0 0a4b 	vmov.f32	s1, s22
24016cf4:	4629      	mov	r1, r5
24016cf6:	e75c      	b.n	24016bb2 <tTString_initToPool+0x4ae>
24016cf8:	428c0000 	.word	0x428c0000
24016cfc:	3ba3d70a 	.word	0x3ba3d70a

24016d00 <tTString_free>:
{
24016d00:	b510      	push	{r4, lr}
    _tTString* x = *bw;
24016d02:	6804      	ldr	r4, [r0, #0]
	_tPickupNonLinearity* p = *pl;
24016d04:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
	mpool_free((char*)p, p->mempool);
24016d08:	6801      	ldr	r1, [r0, #0]
24016d0a:	f7fe f887 	bl	24014e1c <mpool_free>
    tNoise_free(&x->pickNoiseSource);
24016d0e:	f504 70c0 	add.w	r0, r4, #384	; 0x180
24016d12:	f7fe fd89 	bl	24015828 <tNoise_free>
    tFeedbackLeveler_free(&x->feedbackP);
24016d16:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
24016d1a:	f7fa fa1b 	bl	24011154 <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&x->feedback);
24016d1e:	f504 70ac 	add.w	r0, r4, #344	; 0x158
24016d22:	f7fa fa17 	bl	24011154 <tFeedbackLeveler_free>
    tSVF_free(&x->barLP);
24016d26:	f504 7088 	add.w	r0, r4, #272	; 0x110
24016d2a:	f7fb f9ff 	bl	2401212c <tSVF_free>
    tHighpass_free(&x->barHP);
24016d2e:	f504 7086 	add.w	r0, r4, #268	; 0x10c
24016d32:	f7fb fb17 	bl	24012364 <tHighpass_free>
    tSVF_free(&x->barResonator);
24016d36:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
24016d3a:	f7fb f9f7 	bl	2401212c <tSVF_free>
    tExpSmooth_free(&x->barPulse);
24016d3e:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
24016d42:	f7fa fda7 	bl	24011894 <tExpSmooth_free>
    tSlide_free(&x->barPulseSlide);
24016d46:	f504 708a 	add.w	r0, r4, #276	; 0x114
24016d4a:	f7fa fdfd 	bl	24011948 <tSlide_free>
    tSlide_free(&x->barSmooth);
24016d4e:	f504 7084 	add.w	r0, r4, #264	; 0x108
24016d52:	f7fa fdf9 	bl	24011948 <tSlide_free>
	tExpSmooth_free(&x->barSmoothVol);
24016d56:	f504 708e 	add.w	r0, r4, #284	; 0x11c
24016d5a:	f7fa fd9b 	bl	24011894 <tExpSmooth_free>
	tExpSmooth_free(&x->barSmooth2);
24016d5e:	f504 708c 	add.w	r0, r4, #280	; 0x118
24016d62:	f7fa fd97 	bl	24011894 <tExpSmooth_free>
	tSlide_free(&x->slide);
24016d66:	f104 0048 	add.w	r0, r4, #72	; 0x48
24016d6a:	f7fa fded 	bl	24011948 <tSlide_free>
    tHighpass_free(&x->dcBlockP);
24016d6e:	f104 0020 	add.w	r0, r4, #32
24016d72:	f7fb faf7 	bl	24012364 <tHighpass_free>
    tHighpass_free(&x->dcBlock);
24016d76:	f104 001c 	add.w	r0, r4, #28
24016d7a:	f7fb faf3 	bl	24012364 <tHighpass_free>
    tNoise_free(&x->noise);
24016d7e:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
24016d82:	f7fe fd51 	bl	24015828 <tNoise_free>
    tSVF_free(&x->peakFilt);
24016d86:	f504 70c4 	add.w	r0, r4, #392	; 0x188
24016d8a:	f7fb f9cf 	bl	2401212c <tSVF_free>
    tSVF_free(&x->pickupFilter2);
24016d8e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
24016d92:	f7fb f9cb 	bl	2401212c <tSVF_free>
    tSVF_free(&x->pickupFilter);
24016d96:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
24016d9a:	f7fb f9c7 	bl	2401212c <tSVF_free>
    tCycle_free(&x->pickupModOsc);
24016d9e:	f104 00ac 	add.w	r0, r4, #172	; 0xac
24016da2:	f7fe f8f7 	bl	24014f94 <tCycle_free>
    tCycle_free(&x->tensionModOsc);
24016da6:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
24016daa:	f7fe f8f3 	bl	24014f94 <tCycle_free>
    tSVF_free(&x->highpassP);
24016dae:	f104 006c 	add.w	r0, r4, #108	; 0x6c
24016db2:	f7fb f9bb 	bl	2401212c <tSVF_free>
    tSVF_free(&x->lowpassP),
24016db6:	f104 0068 	add.w	r0, r4, #104	; 0x68
24016dba:	f7fb f9b7 	bl	2401212c <tSVF_free>
    tThiranAllpassSOCascade_free(&x->allpassP);
24016dbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
24016dc2:	f7fa fe89 	bl	24011ad8 <tThiranAllpassSOCascade_free>
    tThiranAllpassSOCascade_free(&x->allpass);
24016dc6:	f104 0054 	add.w	r0, r4, #84	; 0x54
24016dca:	f7fa fe85 	bl	24011ad8 <tThiranAllpassSOCascade_free>
    tExpSmooth_free(&x->pickNoise);
24016dce:	f504 70be 	add.w	r0, r4, #380	; 0x17c
24016dd2:	f7fa fd5f 	bl	24011894 <tExpSmooth_free>
    tExpSmooth_free(&x->pitchSmoother);
24016dd6:	f104 0050 	add.w	r0, r4, #80	; 0x50
24016dda:	f7fa fd5b 	bl	24011894 <tExpSmooth_free>
    tExpSmooth_free(&x->tensionSmoother);
24016dde:	f104 004c 	add.w	r0, r4, #76	; 0x4c
24016de2:	f7fa fd57 	bl	24011894 <tExpSmooth_free>
    tCookOnePole_free(&x->reflFiltP);
24016de6:	f104 0028 	add.w	r0, r4, #40	; 0x28
24016dea:	f7fb f859 	bl	24011ea0 <tCookOnePole_free>
    tCookOnePole_free(&x->reflFilt);
24016dee:	f104 0024 	add.w	r0, r4, #36	; 0x24
24016df2:	f7fb f855 	bl	24011ea0 <tCookOnePole_free>
    tLagrangeDelay_free(&x->delayP);
24016df6:	f104 0018 	add.w	r0, r4, #24
24016dfa:	f7f9 fc6f 	bl	240106dc <tLagrangeDelay_free>
    tLagrangeDelay_free(&x->delay);
24016dfe:	f104 0014 	add.w	r0, r4, #20
24016e02:	f7f9 fc6b 	bl	240106dc <tLagrangeDelay_free>
    mpool_free((char*)x, x->mempool);
24016e06:	6821      	ldr	r1, [r4, #0]
24016e08:	4620      	mov	r0, r4
}
24016e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)x, x->mempool);
24016e0e:	f7fe b805 	b.w	24014e1c <mpool_free>
24016e12:	bf00      	nop

24016e14 <tTString_tick>:
{
24016e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
24016e18:	ed2d 8b10 	vpush	{d8-d15}
    _tTString* x = *bw;
24016e1c:	6804      	ldr	r4, [r0, #0]
{
24016e1e:	b093      	sub	sp, #76	; 0x4c
    x->feedbackNoise = tNoise_tick(&x->noise);
24016e20:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
24016e24:	f7fe fd04 	bl	24015830 <tNoise_tick>
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
24016e28:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
24016e2c:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
24016e30:	f504 708c 	add.w	r0, r4, #280	; 0x118
    Lfloat barPos = x->barPosition;
24016e34:	ed94 8a3b 	vldr	s16, [r4, #236]	; 0xec
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
24016e38:	ee77 6a87 	vadd.f32	s13, s15, s14
    x->feedbackNoise = tNoise_tick(&x->noise);
24016e3c:	ed84 0a58 	vstr	s0, [r4, #352]	; 0x160
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
24016e40:	9000      	str	r0, [sp, #0]
24016e42:	eeb0 0a48 	vmov.f32	s0, s16
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
24016e46:	eef4 6ac8 	vcmpe.f32	s13, s16
24016e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016e4e:	d407      	bmi.n	24016e60 <tTString_tick+0x4c>
24016e50:	ee77 7ac7 	vsub.f32	s15, s15, s14
24016e54:	eef4 7ac8 	vcmpe.f32	s15, s16
24016e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016e5c:	f340 83d5 	ble.w	2401760a <tTString_tick+0x7f6>
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
24016e60:	f7fa fd36 	bl	240118d0 <tExpSmooth_setValAndDest>
24016e64:	9800      	ldr	r0, [sp, #0]
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
24016e66:	f7fa fd39 	bl	240118dc <tExpSmooth_tick>
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
24016e6a:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
24016e6e:	f504 758e 	add.w	r5, r4, #284	; 0x11c
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
24016e72:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
24016e76:	ee30 0a67 	vsub.f32	s0, s0, s15
24016e7a:	f7fd fb4f 	bl	2401451c <fastabsf>
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
24016e7e:	4628      	mov	r0, r5
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
24016e80:	eeb0 9a40 	vmov.f32	s18, s0
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
24016e84:	9500      	str	r5, [sp, #0]
24016e86:	eeb0 0a48 	vmov.f32	s0, s16
24016e8a:	f7fa fd19 	bl	240118c0 <tExpSmooth_setDest>
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
24016e8e:	9800      	ldr	r0, [sp, #0]
24016e90:	f7fa fd24 	bl	240118dc <tExpSmooth_tick>
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
24016e94:	edd4 7a48 	vldr	s15, [r4, #288]	; 0x120
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
24016e98:	eeb0 8a40 	vmov.f32	s16, s0
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
24016e9c:	ee30 0a67 	vsub.f32	s0, s0, s15
24016ea0:	f7fd fb3c 	bl	2401451c <fastabsf>
        if (differenceFastSmooth < 0.0001f)
24016ea4:	eddf 7ad3 	vldr	s15, [pc, #844]	; 240171f4 <tTString_tick+0x3e0>
        x->prevBarPosSmoothVol = barPosSmoothVol;
24016ea8:	ed84 8a48 	vstr	s16, [r4, #288]	; 0x120
        if (differenceFastSmooth < 0.0001f)
24016eac:	eeb4 0ae7 	vcmpe.f32	s0, s15
24016eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016eb4:	f140 8359 	bpl.w	2401756a <tTString_tick+0x756>
        	volCut = ((differenceFastSmooth - 0.00001f) * 1111.111111111111111f);
24016eb8:	eddf 6acf 	vldr	s13, [pc, #828]	; 240171f8 <tTString_tick+0x3e4>
24016ebc:	ed9f 7acf 	vldr	s14, [pc, #828]	; 240171fc <tTString_tick+0x3e8>
24016ec0:	ee30 8a66 	vsub.f32	s16, s0, s13
24016ec4:	eddf 7ace 	vldr	s15, [pc, #824]	; 24017200 <tTString_tick+0x3ec>
24016ec8:	ee28 8a07 	vmul.f32	s16, s16, s14
24016ecc:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
24016ed0:	edd4 9a5b 	vldr	s19, [r4, #364]	; 0x16c
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
24016ed4:	ed94 0a3f 	vldr	s0, [r4, #252]	; 0xfc
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
24016ed8:	ee68 9aa9 	vmul.f32	s19, s17, s19
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
24016edc:	ee39 0ac0 	vsub.f32	s0, s19, s0
24016ee0:	f7fd fb1c 	bl	2401451c <fastabsf>
24016ee4:	eef0 7a40 	vmov.f32	s15, s0
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
24016ee8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    x->prevBarPosSmoothed = barPosSmoothed;
24016eec:	edc4 8a4a 	vstr	s17, [r4, #296]	; 0x128
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
24016ef0:	ee79 0a09 	vadd.f32	s1, s18, s18
24016ef4:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 24017200 <tTString_tick+0x3ec>
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
24016ef8:	eef0 8a67 	vmov.f32	s17, s15
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
24016efc:	f7fd fc50 	bl	240147a0 <LEAF_clip>
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
24016f00:	f104 0048 	add.w	r0, r4, #72	; 0x48
24016f04:	f7fa fd58 	bl	240119b8 <tSlide_tick>
    if (x->wound)
24016f08:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
24016f0c:	ed84 0a30 	vstr	s0, [r4, #192]	; 0xc0
    if (x->wound)
24016f10:	2b00      	cmp	r3, #0
24016f12:	f000 83a9 	beq.w	24017668 <tTString_tick+0x854>
		if (bumpDifference > 1.0f)
24016f16:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
24016f1a:	eef4 8ac9 	vcmpe.f32	s17, s18
24016f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016f22:	f300 8325 	bgt.w	24017570 <tTString_tick+0x75c>
			x->bumpOsc = 0;
24016f26:	2300      	movs	r3, #0
			tExpSmooth_setVal(&x->barPulse, 1.0f);
24016f28:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
			tSlide_setDest(&x->barPulseSlide, 1.0f);
24016f2c:	f504 768a 	add.w	r6, r4, #276	; 0x114
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
24016f30:	f504 7584 	add.w	r5, r4, #264	; 0x108
			x->bumpOsc = 0;
24016f34:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		if (x->sampleCount < 3000)
24016f38:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
24016f3c:	f640 32b7 	movw	r2, #2999	; 0xbb7
24016f40:	4293      	cmp	r3, r2
24016f42:	f240 835e 	bls.w	24017602 <tTString_tick+0x7ee>
			tSlide_setDest(&x->barSmooth, 5.0f);
24016f46:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
24016f4a:	4628      	mov	r0, r5
24016f4c:	f7fa fd00 	bl	24011950 <tSlide_setDest>
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
24016f50:	4628      	mov	r0, r5
		tSVF_setFreq(&x->barResonator, barFreq);
24016f52:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
24016f56:	f7fa fcff 	bl	24011958 <tSlide_tickNoInput>
24016f5a:	eef0 9a40 	vmov.f32	s19, s0
		tSVF_setFreq(&x->barResonator, barFreq);
24016f5e:	4628      	mov	r0, r5
24016f60:	f7fb f91e 	bl	240121a0 <tSVF_setFreq>
		x->slideNoise = x->feedbackNoise;
24016f64:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
24016f68:	4630      	mov	r0, r6
		x->slideNoise = x->feedbackNoise;
24016f6a:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
24016f6e:	f7fa fcf3 	bl	24011958 <tSlide_tickNoInput>
		if (pulseVal > .99f)
24016f72:	eddf 7aa4 	vldr	s15, [pc, #656]	; 24017204 <tTString_tick+0x3f0>
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
24016f76:	eef0 8a40 	vmov.f32	s17, s0
		if (pulseVal > .99f)
24016f7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
24016f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016f82:	f300 83ad 	bgt.w	240176e0 <tTString_tick+0x8cc>
		x->slideNoise *= pulseVal;
24016f86:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
24016f8a:	4638      	mov	r0, r7
		x->slideNoise *= pulseVal;
24016f8c:	ee67 7aa8 	vmul.f32	s15, s15, s17
24016f90:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
24016f94:	f7fa fca2 	bl	240118dc <tExpSmooth_tick>
24016f98:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
24016f9c:	4628      	mov	r0, r5
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
24016f9e:	ee60 8a27 	vmul.f32	s17, s0, s15
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
24016fa2:	eeb0 0a68 	vmov.f32	s0, s17
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
24016fa6:	edc4 8a34 	vstr	s17, [r4, #208]	; 0xd0
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
24016faa:	f7fb f8c3 	bl	24012134 <tSVF_tick>
24016fae:	edd4 7a4c 	vldr	s15, [r4, #304]	; 0x130
24016fb2:	ee20 0a27 	vmul.f32	s0, s0, s15
24016fb6:	f7fd fc4b 	bl	24014850 <fast_tanh5>
		if (barFreq < 300.0f)
24016fba:	eddf 7a93 	vldr	s15, [pc, #588]	; 24017208 <tTString_tick+0x3f4>
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
24016fbe:	eeb0 9a40 	vmov.f32	s18, s0
		if (barFreq < 300.0f)
24016fc2:	eef4 9ae7 	vcmpe.f32	s19, s15
24016fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24016fca:	f100 837a 	bmi.w	240176c2 <tTString_tick+0x8ae>
		Lfloat filterFade = 1.0f;
24016fce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
24016fd2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
		x->slideNoise *= x->muted;
24016fd6:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
24016fda:	f504 7086 	add.w	r0, r4, #268	; 0x10c
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
24016fde:	ee29 9a07 	vmul.f32	s18, s18, s14
24016fe2:	eee9 8a00 	vfma.f32	s17, s18, s0
		x->slideNoise *= x->muted;
24016fe6:	ee28 0aa7 	vmul.f32	s0, s17, s15
24016fea:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
24016fee:	f7fb f9c9 	bl	24012384 <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
24016ff2:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
24016ff6:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
24016ffa:	f504 7088 	add.w	r0, r4, #272	; 0x110
24016ffe:	ee68 7a27 	vmul.f32	s15, s16, s15
24017002:	ee27 0a80 	vmul.f32	s0, s15, s0
24017006:	f7fb f895 	bl	24012134 <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
2401700a:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
    for (int i = 0; i < x->oversampling; i++)
2401700e:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
24017010:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
24017014:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
24017016:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
    for (int i = 0; i < x->oversampling; i++)
2401701a:	f340 834b 	ble.w	240176b4 <tTString_tick+0x8a0>
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
2401701e:	f104 0350 	add.w	r3, r4, #80	; 0x50
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
24017022:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
24017026:	f104 0614 	add.w	r6, r4, #20
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
2401702a:	f104 0518 	add.w	r5, r4, #24
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
2401702e:	9304      	str	r3, [sp, #16]
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
24017030:	f104 034c 	add.w	r3, r4, #76	; 0x4c
24017034:	ed9f 9a75 	vldr	s18, [pc, #468]	; 2401720c <tTString_tick+0x3f8>
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
24017038:	f04f 0900 	mov.w	r9, #0
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
2401703c:	9305      	str	r3, [sp, #20]
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
2401703e:	f504 73c0 	add.w	r3, r4, #384	; 0x180
24017042:	9306      	str	r3, [sp, #24]
24017044:	f504 73be 	add.w	r3, r4, #380	; 0x17c
24017048:	9307      	str	r3, [sp, #28]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
2401704a:	f104 0324 	add.w	r3, r4, #36	; 0x24
2401704e:	9300      	str	r3, [sp, #0]
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
24017050:	f104 0328 	add.w	r3, r4, #40	; 0x28
24017054:	9303      	str	r3, [sp, #12]
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
24017056:	f104 03ac 	add.w	r3, r4, #172	; 0xac
2401705a:	9301      	str	r3, [sp, #4]
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
2401705c:	f504 73ac 	add.w	r3, r4, #344	; 0x158
24017060:	9302      	str	r3, [sp, #8]
24017062:	f104 031c 	add.w	r3, r4, #28
24017066:	9308      	str	r3, [sp, #32]
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
24017068:	f504 73ae 	add.w	r3, r4, #348	; 0x15c
2401706c:	9309      	str	r3, [sp, #36]	; 0x24
2401706e:	f104 0320 	add.w	r3, r4, #32
24017072:	930a      	str	r3, [sp, #40]	; 0x28
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
24017074:	f104 0368 	add.w	r3, r4, #104	; 0x68
24017078:	930b      	str	r3, [sp, #44]	; 0x2c
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
2401707a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
2401707e:	930c      	str	r3, [sp, #48]	; 0x30
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
24017080:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
24017084:	930d      	str	r3, [sp, #52]	; 0x34
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
24017086:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
2401708a:	930e      	str	r3, [sp, #56]	; 0x38
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
2401708c:	f504 73c4 	add.w	r3, r4, #392	; 0x188
24017090:	930f      	str	r3, [sp, #60]	; 0x3c
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
24017092:	9804      	ldr	r0, [sp, #16]
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
24017094:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
24017098:	f7fa fc20 	bl	240118dc <tExpSmooth_tick>
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
2401709c:	9805      	ldr	r0, [sp, #20]
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
2401709e:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
240170a2:	f7fa fc1b 	bl	240118dc <tExpSmooth_tick>
240170a6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
240170aa:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
240170ae:	4630      	mov	r0, r6
    	x->tensionAmount = tension * 0.01f;
240170b0:	ed94 5a11 	vldr	s10, [r4, #68]	; 0x44
240170b4:	fec7 6aa6 	vmaxnm.f32	s13, s15, s13
240170b8:	edd4 5a17 	vldr	s11, [r4, #92]	; 0x5c
240170bc:	ee67 7a85 	vmul.f32	s15, s15, s10
240170c0:	ed9f 5a53 	vldr	s10, [pc, #332]	; 24017210 <tTString_tick+0x3fc>
240170c4:	ed94 6a53 	vldr	s12, [r4, #332]	; 0x14c
240170c8:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
240170cc:	ee67 7a85 	vmul.f32	s15, s15, s10
        if (currentDelay > x->maxDelay)
240170d0:	ed94 5a54 	vldr	s10, [r4, #336]	; 0x150
240170d4:	ee27 7a09 	vmul.f32	s14, s14, s18
240170d8:	eeb8 da45 	vcvt.f32.u32	s26, s10
    	x->tensionAmount = tension * 0.01f;
240170dc:	ee67 7a80 	vmul.f32	s15, s15, s0
240170e0:	fe8d da66 	vminnm.f32	s26, s26, s13
240170e4:	eeb0 0a4d 	vmov.f32	s0, s26
240170e8:	edc4 7a28 	vstr	s15, [r4, #160]	; 0xa0
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
240170ec:	eef1 8a4d 	vneg.f32	s17, s26
240170f0:	ee2d 8a08 	vmul.f32	s16, s26, s16
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
240170f4:	eea5 0ac6 	vfms.f32	s0, s11, s12
240170f8:	eead 0a47 	vfms.f32	s0, s26, s14
240170fc:	ee30 0a67 	vsub.f32	s0, s0, s15
24017100:	f7f9 fb46 	bl	24010790 <tLagrangeDelay_setDelay>
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
24017104:	eeb0 0a4d 	vmov.f32	s0, s26
24017108:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
2401710c:	4628      	mov	r0, r5
2401710e:	edd4 6a53 	vldr	s13, [r4, #332]	; 0x14c
24017112:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
24017116:	eea6 0a66 	vfms.f32	s0, s12, s13
2401711a:	edd4 7a4f 	vldr	s15, [r4, #316]	; 0x13c
2401711e:	ee67 7a89 	vmul.f32	s15, s15, s18
24017122:	ee30 0a47 	vsub.f32	s0, s0, s14
24017126:	eea8 0aa7 	vfma.f32	s0, s17, s15
2401712a:	f7f9 fb31 	bl	24010790 <tLagrangeDelay_setDelay>
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
2401712e:	9806      	ldr	r0, [sp, #24]
24017130:	f7fe fb7e 	bl	24015830 <tNoise_tick>
24017134:	eef0 8a40 	vmov.f32	s17, s0
24017138:	9807      	ldr	r0, [sp, #28]
2401713a:	f7fa fbcf 	bl	240118dc <tExpSmooth_tick>
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
2401713e:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
24017142:	ee68 8a80 	vmul.f32	s17, s17, s0
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
24017146:	4630      	mov	r0, r6
24017148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401714c:	ee78 8aa8 	vadd.f32	s17, s17, s17
24017150:	ee17 1a90 	vmov	r1, s15
24017154:	eeb0 0a68 	vmov.f32	s0, s17
24017158:	f7f9 fc32 	bl	240109c0 <tLagrangeDelay_addTo>
        tLagrangeDelay_addTo(&x->delayP,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
2401715c:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
24017160:	eeb0 0a68 	vmov.f32	s0, s17
24017164:	4628      	mov	r0, r5
24017166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2401716a:	ee17 1a90 	vmov	r1, s15
2401716e:	f7f9 fc27 	bl	240109c0 <tLagrangeDelay_addTo>
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
24017172:	9800      	ldr	r0, [sp, #0]
24017174:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
24017178:	f7fa feae 	bl	24011ed8 <tCookOnePole_tick>
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
2401717c:	9803      	ldr	r0, [sp, #12]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
2401717e:	eef0 ca40 	vmov.f32	s25, s0
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
24017182:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
24017186:	f7fa fea7 	bl	24011ed8 <tCookOnePole_tick>
        Lfloat rippleLength = x->rippleRate *  currentDelay;
2401718a:	ed94 ca20 	vldr	s24, [r4, #128]	; 0x80
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
2401718e:	4630      	mov	r0, r6
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
24017190:	eef0 8a40 	vmov.f32	s17, s0
        Lfloat rippleLength = x->rippleRate *  currentDelay;
24017194:	ee2d ca0c 	vmul.f32	s24, s26, s24
        uint32_t rippleLengthInt = (uint32_t) rippleLength;
24017198:	eebc aacc 	vcvt.u32.f32	s20, s24
        Lfloat rippleLengthAlpha = rippleLength - rippleLengthInt;
2401719c:	eef8 7a4a 	vcvt.f32.u32	s15, s20
240171a0:	ee3c ca67 	vsub.f32	s24, s24, s15
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
240171a4:	f7f9 fac2 	bl	2401072c <tLagrangeDelay_tickOut>
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
240171a8:	4628      	mov	r0, r5
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
240171aa:	eeb0 ea40 	vmov.f32	s28, s0
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
240171ae:	f7f9 fabd 	bl	2401072c <tLagrangeDelay_tickOut>
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
240171b2:	ee1a 1a10 	vmov	r1, s20
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
240171b6:	eef0 da40 	vmov.f32	s27, s0
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
240171ba:	4630      	mov	r0, r6
240171bc:	eeb0 0a4c 	vmov.f32	s0, s24
240171c0:	f7f9 fb9a 	bl	240108f8 <tLagrangeDelay_tapOutInterpolated>
240171c4:	eef0 7a40 	vmov.f32	s15, s0
240171c8:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
240171cc:	eeb0 0a4c 	vmov.f32	s0, s24
240171d0:	ee1a 1a10 	vmov	r1, s20
240171d4:	4628      	mov	r0, r5
        Lfloat rippleOut = delayOut + rippleOut1;
240171d6:	eea7 ea87 	vfma.f32	s28, s15, s14
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
240171da:	f7f9 fb8d 	bl	240108f8 <tLagrangeDelay_tapOutInterpolated>
        Lfloat rippleOutP = delayOutP + rippleOut1P;
240171de:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
        if (x->inharmonic)
240171e2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        Lfloat rippleOutP = delayOutP + rippleOut1P;
240171e6:	eee0 da27 	vfma.f32	s27, s0, s15
        if (x->inharmonic)
240171ea:	2b00      	cmp	r3, #0
240171ec:	f040 8224 	bne.w	24017638 <tTString_tick+0x824>
240171f0:	e024      	b.n	2401723c <tTString_tick+0x428>
240171f2:	bf00      	nop
240171f4:	38d1b717 	.word	0x38d1b717
240171f8:	3727c5ac 	.word	0x3727c5ac
240171fc:	448ae38e 	.word	0x448ae38e
24017200:	00000000 	.word	0x00000000
24017204:	3f7d70a4 	.word	0x3f7d70a4
24017208:	43960000 	.word	0x43960000
2401720c:	3e22f983 	.word	0x3e22f983
24017210:	3c23d70a 	.word	0x3c23d70a
24017214:	3cb17e4b 	.word	0x3cb17e4b
24017218:	3dd55555 	.word	0x3dd55555
2401721c:	3b0a47ed 	.word	0x3b0a47ed
24017220:	3bdd2f1b 	.word	0x3bdd2f1b
24017224:	39f9096c 	.word	0x39f9096c
24017228:	3d99999a 	.word	0x3d99999a
2401722c:	3a59d777 	.word	0x3a59d777
24017230:	408bbced 	.word	0x408bbced
24017234:	3fa66666 	.word	0x3fa66666
24017238:	42c80000 	.word	0x42c80000
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
2401723c:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
24017240:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24017244:	edd4 0a1d 	vldr	s1, [r4, #116]	; 0x74
24017248:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401724c:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
24017250:	ee60 0a87 	vmul.f32	s1, s1, s14
24017254:	ee60 0aa7 	vmul.f32	s1, s1, s15
24017258:	ee60 0a8e 	vmul.f32	s1, s1, s28
2401725c:	f7fd faa0 	bl	240147a0 <LEAF_clip>
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
24017260:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
24017264:	edd4 0a1d 	vldr	s1, [r4, #116]	; 0x74
24017268:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
2401726c:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
24017270:	ee60 0a87 	vmul.f32	s1, s1, s14
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
24017274:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
24017278:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401727c:	ee60 0aa7 	vmul.f32	s1, s1, s15
24017280:	ee60 0aad 	vmul.f32	s1, s1, s27
24017284:	f7fd fa8c 	bl	240147a0 <LEAF_clip>
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
24017288:	9801      	ldr	r0, [sp, #4]
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
2401728a:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
        Lfloat positionMin = (x->openStringLength * 0.104166666666667f);
2401728e:	ed94 ca3d 	vldr	s24, [r4, #244]	; 0xf4
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
24017292:	edd4 da27 	vldr	s27, [r4, #156]	; 0x9c
24017296:	f7fd fe81 	bl	24014f9c <tCycle_tick>
2401729a:	edd4 7a2d 	vldr	s15, [r4, #180]	; 0xb4
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
2401729e:	eee0 da27 	vfma.f32	s27, s0, s15
240172a2:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 24017214 <tTString_tick+0x400>
240172a6:	ee2c 1a27 	vmul.f32	s2, s24, s15
240172aa:	ed5f 7a25 	vldr	s15, [pc, #-148]	; 24017218 <tTString_tick+0x404>
240172ae:	ee6c 0a27 	vmul.f32	s1, s24, s15
240172b2:	eeb0 0a6d 	vmov.f32	s0, s27
240172b6:	f7fd f8b1 	bl	2401441c <LEAF_mapFromZeroToOneInput>
        while (pickupPos > halfCurrentDelay)
240172ba:	eeb4 8ac0 	vcmpe.f32	s16, s0
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
240172be:	eef0 7a40 	vmov.f32	s15, s0
        while (pickupPos > halfCurrentDelay)
240172c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240172c6:	f140 81c8 	bpl.w	2401765a <tTString_tick+0x846>
        uint32_t backwards = 0;
240172ca:	2300      	movs	r3, #0
        	pickupPos = pickupPos - halfCurrentDelay;
240172cc:	ee77 7ac8 	vsub.f32	s15, s15, s16
        	backwards = !backwards;
240172d0:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos > halfCurrentDelay)
240172d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
240172d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240172dc:	d4f6      	bmi.n	240172cc <tTString_tick+0x4b8>
        while (pickupPos < 0.0f)
240172de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
240172e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240172e6:	d508      	bpl.n	240172fa <tTString_tick+0x4e6>
        	pickupPos = pickupPos + halfCurrentDelay;
240172e8:	ee77 7a88 	vadd.f32	s15, s15, s16
        	backwards = !backwards;
240172ec:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos < 0.0f)
240172f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
240172f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240172f8:	d4f6      	bmi.n	240172e8 <tTString_tick+0x4d4>
        if (backwards)
240172fa:	2b00      	cmp	r3, #0
240172fc:	f000 8189 	beq.w	24017612 <tTString_tick+0x7fe>
        	pickupPosFinal = halfCurrentDelay - pickupPos;
24017300:	ee78 6a67 	vsub.f32	s13, s16, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
24017304:	ee79 dac8 	vsub.f32	s27, s19, s16
        	inversePickupPos = halfCurrentDelay + pickupPos;
24017308:	ee38 da27 	vadd.f32	s26, s16, s15
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
2401730c:	ee86 7a88 	vdiv.f32	s14, s13, s16
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
24017310:	ee7d daa7 	vadd.f32	s27, s27, s15
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
24017314:	eefc 7ae6 	vcvt.u32.f32	s15, s13
24017318:	ee17 7a90 	vmov	r7, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
2401731c:	eef8 7a67 	vcvt.f32.u32	s15, s15
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
24017320:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
24017324:	ee36 8ae7 	vsub.f32	s16, s13, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
24017328:	ee7d daa7 	vadd.f32	s27, s27, s15
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
2401732c:	eefc 7acd 	vcvt.u32.f32	s15, s26
24017330:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
24017334:	ee39 eacd 	vsub.f32	s28, s19, s26
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
24017338:	4639      	mov	r1, r7
2401733a:	4630      	mov	r0, r6
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
2401733c:	ed1f fa49 	vldr	s30, [pc, #-292]	; 2401721c <tTString_tick+0x408>
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
24017340:	ee17 8a90 	vmov	r8, s15
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
24017344:	eef8 7a67 	vcvt.f32.u32	s15, s15
24017348:	ed5f fa4b 	vldr	s31, [pc, #-300]	; 24017220 <tTString_tick+0x40c>
    for (int i = 0; i < x->oversampling; i++)
2401734c:	f109 0901 	add.w	r9, r9, #1
        uint32_t inversePickupPosIntPlusOne = inversePickupPosInt + 1;
24017350:	f108 0b01 	add.w	fp, r8, #1
24017354:	ed5f ea4d 	vldr	s29, [pc, #-308]	; 24017224 <tTString_tick+0x410>
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
24017358:	ee3d da67 	vsub.f32	s26, s26, s15
2401735c:	ed1f aa4e 	vldr	s20, [pc, #-312]	; 24017228 <tTString_tick+0x414>
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
24017360:	ee3e ea27 	vadd.f32	s28, s28, s15
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
24017364:	f7f9 fabc 	bl	240108e0 <tLagrangeDelay_tapOut>
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
24017368:	4651      	mov	r1, sl
2401736a:	4630      	mov	r0, r6
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
2401736c:	eeb0 ba40 	vmov.f32	s22, s0
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
24017370:	f7f9 fab6 	bl	240108e0 <tLagrangeDelay_tapOut>
24017374:	ee60 5a08 	vmul.f32	s11, s0, s16
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
24017378:	4641      	mov	r1, r8
2401737a:	4630      	mov	r0, r6
2401737c:	ed5f aa55 	vldr	s21, [pc, #-340]	; 2401722c <tTString_tick+0x418>
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
24017380:	ed1f ca55 	vldr	s24, [pc, #-340]	; 24017230 <tTString_tick+0x41c>
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
24017384:	eeeb 5a2d 	vfma.f32	s11, s22, s27
24017388:	eef0 ba65 	vmov.f32	s23, s11
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
2401738c:	f7f9 faa8 	bl	240108e0 <tLagrangeDelay_tapOut>
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24017390:	4659      	mov	r1, fp
24017392:	4630      	mov	r0, r6
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
24017394:	eeb0 ba40 	vmov.f32	s22, s0
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24017398:	f7f9 faa2 	bl	240108e0 <tLagrangeDelay_tapOut>
	x = x * 2.0f;
2401739c:	ee7b 5aab 	vadd.f32	s11, s23, s23
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
240173a0:	4639      	mov	r1, r7
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
240173a2:	ee20 6a0d 	vmul.f32	s12, s0, s26
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
240173a6:	4628      	mov	r0, r5
240173a8:	eeb0 3a4a 	vmov.f32	s6, s20
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
240173ac:	ee65 4aa5 	vmul.f32	s9, s11, s11
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
240173b0:	eeab 6a0e 	vfma.f32	s12, s22, s28
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
240173b4:	ee25 5aa4 	vmul.f32	s10, s11, s9
240173b8:	ee65 7a0f 	vmul.f32	s15, s10, s30
240173bc:	ee25 5a85 	vmul.f32	s10, s11, s10
	x = x * 2.0f;
240173c0:	ee36 6a06 	vadd.f32	s12, s12, s12
240173c4:	eee4 7aaf 	vfma.f32	s15, s9, s31
240173c8:	eea5 3a2a 	vfma.f32	s6, s10, s21
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
240173cc:	ee66 3a06 	vmul.f32	s7, s12, s12
240173d0:	ee26 4a2a 	vmul.f32	s8, s12, s21
240173d4:	ee66 4a23 	vmul.f32	s9, s12, s7
240173d8:	eee5 7a2e 	vfma.f32	s15, s10, s29
	return out;
240173dc:	ee24 5ac6 	vnmul.f32	s10, s9, s12
240173e0:	eee6 7a4a 	vfms.f32	s15, s12, s20
240173e4:	eee5 7a83 	vfma.f32	s15, s11, s6
240173e8:	eee3 7aef 	vfms.f32	s15, s7, s31
240173ec:	eee4 7acf 	vfms.f32	s15, s9, s30
240173f0:	eee5 7a2e 	vfma.f32	s15, s10, s29
240173f4:	eee5 7a04 	vfma.f32	s15, s10, s8
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
240173f8:	ee67 7a8c 	vmul.f32	s15, s15, s24
240173fc:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
24017400:	f7f9 fa6e 	bl	240108e0 <tLagrangeDelay_tapOut>
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
24017404:	4651      	mov	r1, sl
24017406:	4628      	mov	r0, r5
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
24017408:	eeb0 ba40 	vmov.f32	s22, s0
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
2401740c:	f7f9 fa68 	bl	240108e0 <tLagrangeDelay_tapOut>
24017410:	ee60 5a08 	vmul.f32	s11, s0, s16
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
24017414:	4641      	mov	r1, r8
24017416:	4628      	mov	r0, r5
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
24017418:	eeeb 5a2d 	vfma.f32	s11, s22, s27
2401741c:	eeb0 8a65 	vmov.f32	s16, s11
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
24017420:	f7f9 fa5e 	bl	240108e0 <tLagrangeDelay_tapOut>
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24017424:	4659      	mov	r1, fp
24017426:	4628      	mov	r0, r5
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
24017428:	eef0 da40 	vmov.f32	s27, s0
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
2401742c:	f7f9 fa58 	bl	240108e0 <tLagrangeDelay_tapOut>
	x = x * 2.0f;
24017430:	ee78 5a08 	vadd.f32	s11, s16, s16
24017434:	ed94 4a58 	vldr	s8, [r4, #352]	; 0x160
24017438:	ed94 5a59 	vldr	s10, [r4, #356]	; 0x164
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
2401743c:	ee20 6a0d 	vmul.f32	s12, s0, s26
24017440:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
24017444:	eef0 3a4a 	vmov.f32	s7, s20
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24017448:	ee65 4aa5 	vmul.f32	s9, s11, s11
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
2401744c:	9808      	ldr	r0, [sp, #32]
2401744e:	eee4 7a05 	vfma.f32	s15, s8, s10
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
24017452:	eead 6a8e 	vfma.f32	s12, s27, s28
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24017456:	ee25 5aa4 	vmul.f32	s10, s11, s9
2401745a:	eeb0 0a67 	vmov.f32	s0, s15
2401745e:	ee65 7a0f 	vmul.f32	s15, s10, s30
24017462:	ee25 5a85 	vmul.f32	s10, s11, s10
	x = x * 2.0f;
24017466:	ee36 6a06 	vadd.f32	s12, s12, s12
2401746a:	eee4 7aaf 	vfma.f32	s15, s9, s31
2401746e:	eee5 3a2a 	vfma.f32	s7, s10, s21
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
24017472:	ee26 4a06 	vmul.f32	s8, s12, s12
24017476:	ee66 6a2a 	vmul.f32	s13, s12, s21
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
2401747a:	ee3c 0a80 	vadd.f32	s0, s25, s0
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
2401747e:	ee64 4a06 	vmul.f32	s9, s8, s12
24017482:	eee5 7a2e 	vfma.f32	s15, s10, s29
	return out;
24017486:	ee24 5ac6 	vnmul.f32	s10, s9, s12
2401748a:	eee6 7a4a 	vfms.f32	s15, s12, s20
2401748e:	eee5 7aa3 	vfma.f32	s15, s11, s7
24017492:	eee4 7a6f 	vfms.f32	s15, s8, s31
24017496:	eee4 7acf 	vfms.f32	s15, s9, s30
2401749a:	eee5 7a2e 	vfma.f32	s15, s10, s29
2401749e:	eee5 7a26 	vfma.f32	s15, s10, s13
		x->pickupOutP =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
240174a2:	ee67 7a8c 	vmul.f32	s15, s15, s24
240174a6:	edc4 7a26 	vstr	s15, [r4, #152]	; 0x98
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
240174aa:	f7fa ff6b 	bl	24012384 <tHighpass_tick>
240174ae:	9802      	ldr	r0, [sp, #8]
240174b0:	f7f9 fe68 	bl	24011184 <tFeedbackLeveler_tick>
240174b4:	edd4 6a58 	vldr	s13, [r4, #352]	; 0x160
240174b8:	ed94 7a59 	vldr	s14, [r4, #356]	; 0x164
240174bc:	eeb0 aa40 	vmov.f32	s20, s0
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
240174c0:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
240174c4:	980a      	ldr	r0, [sp, #40]	; 0x28
240174c6:	eee6 7a87 	vfma.f32	s15, s13, s14
240174ca:	ee38 0aa7 	vadd.f32	s0, s17, s15
240174ce:	f7fa ff59 	bl	24012384 <tHighpass_tick>
240174d2:	9809      	ldr	r0, [sp, #36]	; 0x24
240174d4:	f7f9 fe56 	bl	24011184 <tFeedbackLeveler_tick>
240174d8:	eeb0 8a40 	vmov.f32	s16, s0
        tLagrangeDelay_tickIn(&x->delay, inputSample);
240174dc:	4630      	mov	r0, r6
240174de:	eeb0 0a4a 	vmov.f32	s0, s20
240174e2:	f7f9 f915 	bl	24010710 <tLagrangeDelay_tickIn>
        tLagrangeDelay_tickIn(&x->delayP, inputSampleP);
240174e6:	4628      	mov	r0, r5
240174e8:	eeb0 0a48 	vmov.f32	s0, s16
240174ec:	f7f9 f910 	bl	24010710 <tLagrangeDelay_tickIn>
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
240174f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
240174f2:	ed94 0a26 	vldr	s0, [r4, #152]	; 0x98
240174f6:	f7fa fe1d 	bl	24012134 <tSVF_tick>
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
240174fa:	980c      	ldr	r0, [sp, #48]	; 0x30
240174fc:	f7fa fe1a 	bl	24012134 <tSVF_tick>
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
24017500:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
24017504:	eeb0 8a40 	vmov.f32	s16, s0
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
24017508:	ed94 7a63 	vldr	s14, [r4, #396]	; 0x18c
2401750c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
24017510:	a810      	add	r0, sp, #64	; 0x40
24017512:	eea7 0a27 	vfma.f32	s0, s14, s15
24017516:	f7fd f8cb 	bl	240146b0 <LEAF_crossfade>
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
2401751a:	ed94 7a2a 	vldr	s14, [r4, #168]	; 0xa8
2401751e:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
24017522:	980d      	ldr	r0, [sp, #52]	; 0x34
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
24017524:	eee7 7a08 	vfma.f32	s15, s14, s16
24017528:	ee37 8aa7 	vadd.f32	s16, s15, s15
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
2401752c:	eeb0 0a48 	vmov.f32	s0, s16
24017530:	f7fa fe00 	bl	24012134 <tSVF_tick>
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
24017534:	980e      	ldr	r0, [sp, #56]	; 0x38
24017536:	f7fa fdfd 	bl	24012134 <tSVF_tick>
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
2401753a:	980f      	ldr	r0, [sp, #60]	; 0x3c
2401753c:	f7fa fdfa 	bl	24012134 <tSVF_tick>
    for (int i = 0; i < x->oversampling; i++)
24017540:	6863      	ldr	r3, [r4, #4]
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
24017542:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
    for (int i = 0; i < x->oversampling; i++)
24017546:	454b      	cmp	r3, r9
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
24017548:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
    for (int i = 0; i < x->oversampling; i++)
2401754c:	f73f ada1 	bgt.w	24017092 <tTString_tick+0x27e>
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
24017550:	ee67 7a80 	vmul.f32	s15, s15, s0
24017554:	ed5f 6ac9 	vldr	s13, [pc, #-804]	; 24017234 <tTString_tick+0x420>
24017558:	eee7 7a08 	vfma.f32	s15, s14, s16
2401755c:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
24017560:	b013      	add	sp, #76	; 0x4c
24017562:	ecbd 8b10 	vpop	{d8-d15}
24017566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Lfloat volCut = 1.0f;
2401756a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
2401756e:	e4af      	b.n	24016ed0 <tTString_tick+0xbc>
			tExpSmooth_setVal(&x->barPulse, 1.0f);
24017570:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
			tSlide_setDest(&x->barPulseSlide, 1.0f);
24017574:	f504 768a 	add.w	r6, r4, #276	; 0x114
			tExpSmooth_setVal(&x->barPulse, 1.0f);
24017578:	eeb0 0a49 	vmov.f32	s0, s18
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
2401757c:	f504 7584 	add.w	r5, r4, #264	; 0x108
			tExpSmooth_setVal(&x->barPulse, 1.0f);
24017580:	4638      	mov	r0, r7
24017582:	f7fa f9a1 	bl	240118c8 <tExpSmooth_setVal>
			tSlide_setDest(&x->barPulseSlide, 1.0f);
24017586:	eeb0 0a49 	vmov.f32	s0, s18
2401758a:	4630      	mov	r0, r6
2401758c:	f7fa f9e0 	bl	24011950 <tSlide_setDest>
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
24017590:	eec9 6a28 	vdiv.f32	s13, s18, s17
24017594:	edd4 7a41 	vldr	s15, [r4, #260]	; 0x104
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
24017598:	4628      	mov	r0, r5
			if (x->timeSinceLastBump < 100)
2401759a:	ed1f 7ad9 	vldr	s14, [pc, #-868]	; 24017238 <tTString_tick+0x424>
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
2401759e:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
240175a2:	ed94 6a02 	vldr	s12, [r4, #8]
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
240175a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
			x->lastBump = currentBump;
240175aa:	edc4 9a3f 	vstr	s19, [r4, #252]	; 0xfc
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
240175ae:	ee20 0a06 	vmul.f32	s0, s0, s12
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
240175b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
			if (x->timeSinceLastBump < 100)
240175b6:	eef4 7ac7 	vcmpe.f32	s15, s14
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
240175ba:	edc4 7a40 	vstr	s15, [r4, #256]	; 0x100
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
240175be:	ee80 0a27 	vdiv.f32	s0, s0, s15
			if (x->timeSinceLastBump < 100)
240175c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240175c6:	bf4c      	ite	mi
240175c8:	2301      	movmi	r3, #1
240175ca:	2300      	movpl	r3, #0
240175cc:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
240175d0:	f7fa f9be 	bl	24011950 <tSlide_setDest>
			x->sampleCount = 0;
240175d4:	2200      	movs	r2, #0
		if (x->bumpOsc)
240175d6:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
			x->sampleCount = 0;
240175da:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
		if (x->bumpOsc)
240175de:	b183      	cbz	r3, 24017602 <tTString_tick+0x7ee>
			if (x->bumpCount > x->timeSinceLastBump)
240175e0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
240175e4:	edd4 7a40 	vldr	s15, [r4, #256]	; 0x100
240175e8:	ee07 3a10 	vmov	s14, r3
240175ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
240175f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
240175f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240175f8:	dc78      	bgt.n	240176ec <tTString_tick+0x8d8>
			x->bumpCount++;
240175fa:	3301      	adds	r3, #1
240175fc:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
24017600:	4613      	mov	r3, r2
			x->sampleCount++;
24017602:	3301      	adds	r3, #1
24017604:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
24017608:	e4a2      	b.n	24016f50 <tTString_tick+0x13c>
    	tExpSmooth_setDest(&x->barSmooth2,barPos);
2401760a:	f7fa f959 	bl	240118c0 <tExpSmooth_setDest>
2401760e:	9800      	ldr	r0, [sp, #0]
24017610:	e429      	b.n	24016e66 <tTString_tick+0x52>
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
24017612:	eefc 6ae7 	vcvt.u32.f32	s13, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
24017616:	ee79 dae7 	vsub.f32	s27, s19, s15
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
2401761a:	ee87 7a88 	vdiv.f32	s14, s15, s16
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
2401761e:	ee16 7a90 	vmov	r7, s13
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
24017622:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
24017626:	eef8 6a66 	vcvt.f32.u32	s13, s13
        Lfloat inversePickupPos = currentDelay - pickupPos;
2401762a:	ee3d da67 	vsub.f32	s26, s26, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
2401762e:	ee37 8ae6 	vsub.f32	s16, s15, s13
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
24017632:	ee7d daa6 	vadd.f32	s27, s27, s13
        if (backwards)
24017636:	e679      	b.n	2401732c <tTString_tick+0x518>
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
24017638:	eeb0 0a4e 	vmov.f32	s0, s28
2401763c:	f104 0054 	add.w	r0, r4, #84	; 0x54
24017640:	f7fa fb48 	bl	24011cd4 <tThiranAllpassSOCascade_tick>
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
24017644:	f104 0058 	add.w	r0, r4, #88	; 0x58
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
24017648:	eeb0 ea40 	vmov.f32	s28, s0
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
2401764c:	eeb0 0a6d 	vmov.f32	s0, s27
24017650:	f7fa fb40 	bl	24011cd4 <tThiranAllpassSOCascade_tick>
24017654:	eef0 da40 	vmov.f32	s27, s0
24017658:	e5f0      	b.n	2401723c <tTString_tick+0x428>
        while (pickupPos < 0.0f)
2401765a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401765e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24017662:	d5d6      	bpl.n	24017612 <tTString_tick+0x7fe>
        uint32_t backwards = 0;
24017664:	2300      	movs	r3, #0
24017666:	e63f      	b.n	240172e8 <tTString_tick+0x4d4>
		x->slideNoise *= x->muted;
24017668:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
2401766c:	f504 7086 	add.w	r0, r4, #268	; 0x10c
		x->slideNoise *= x->muted;
24017670:	ed94 0a58 	vldr	s0, [r4, #352]	; 0x160
24017674:	ee20 0a27 	vmul.f32	s0, s0, s15
24017678:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
2401767c:	f7fa fe82 	bl	24012384 <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
24017680:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
24017684:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
24017688:	f504 7088 	add.w	r0, r4, #272	; 0x110
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
2401768c:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
24017690:	ee67 7a87 	vmul.f32	s15, s15, s14
24017694:	ee67 7a88 	vmul.f32	s15, s15, s16
24017698:	ee27 0a80 	vmul.f32	s0, s15, s0
2401769c:	f7fa fd4a 	bl	24012134 <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
240176a0:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
    for (int i = 0; i < x->oversampling; i++)
240176a4:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
240176a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
240176aa:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
240176ac:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
    for (int i = 0; i < x->oversampling; i++)
240176b0:	f73f acb5 	bgt.w	2401701e <tTString_tick+0x20a>
240176b4:	ed9f 0a15 	vldr	s0, [pc, #84]	; 2401770c <tTString_tick+0x8f8>
}
240176b8:	b013      	add	sp, #76	; 0x4c
240176ba:	ecbd 8b10 	vpop	{d8-d15}
240176be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			filterFade = (barFreq - 100.0f) * 0.005f;
240176c2:	eddf 7a13 	vldr	s15, [pc, #76]	; 24017710 <tTString_tick+0x8fc>
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
240176c6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			filterFade = (barFreq - 100.0f) * 0.005f;
240176ca:	eddf 0a12 	vldr	s1, [pc, #72]	; 24017714 <tTString_tick+0x900>
240176ce:	ee79 9ae7 	vsub.f32	s19, s19, s15
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
240176d2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 2401770c <tTString_tick+0x8f8>
240176d6:	ee69 0aa0 	vmul.f32	s1, s19, s1
240176da:	f7fd f861 	bl	240147a0 <LEAF_clip>
240176de:	e478      	b.n	24016fd2 <tTString_tick+0x1be>
			tSlide_setDest(&x->barPulseSlide, 0.0f);
240176e0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 2401770c <tTString_tick+0x8f8>
240176e4:	4630      	mov	r0, r6
240176e6:	f7fa f933 	bl	24011950 <tSlide_setDest>
240176ea:	e44c      	b.n	24016f86 <tTString_tick+0x172>
				tExpSmooth_setVal(&x->barPulse, 1.0f);
240176ec:	eeb0 0a49 	vmov.f32	s0, s18
240176f0:	4638      	mov	r0, r7
240176f2:	f7fa f8e9 	bl	240118c8 <tExpSmooth_setVal>
				tSlide_setDest(&x->barPulseSlide, 1.0f);
240176f6:	eeb0 0a49 	vmov.f32	s0, s18
240176fa:	4630      	mov	r0, r6
240176fc:	f7fa f928 	bl	24011950 <tSlide_setDest>
			x->bumpCount++;
24017700:	2201      	movs	r2, #1
		if (x->sampleCount < 3000)
24017702:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
			x->bumpCount++;
24017706:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
2401770a:	e417      	b.n	24016f3c <tTString_tick+0x128>
2401770c:	00000000 	.word	0x00000000
24017710:	42c80000 	.word	0x42c80000
24017714:	3ba3d70a 	.word	0x3ba3d70a

24017718 <tTString_setFreq>:
{
24017718:	b510      	push	{r4, lr}
2401771a:	ed2d 8b04 	vpush	{d8-d9}
    _tTString* x = *bw;
2401771e:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24017720:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
{
24017724:	b082      	sub	sp, #8
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24017726:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
2401772a:	f104 0050 	add.w	r0, r4, #80	; 0x50
2401772e:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
24017732:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
24017736:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
2401773a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    x->freq = freq;
2401773e:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
24017742:	ee27 8a88 	vmul.f32	s16, s15, s16
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
24017746:	ee30 0a47 	vsub.f32	s0, s0, s14
2401774a:	f7fa f8b9 	bl	240118c0 <tExpSmooth_setDest>
    Lfloat result = 0.0f;
2401774e:	2300      	movs	r3, #0
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
24017750:	eeb0 0a48 	vmov.f32	s0, s16
24017754:	edd4 8a50 	vldr	s17, [r4, #320]	; 0x140
    Lfloat result = 0.0f;
24017758:	9301      	str	r3, [sp, #4]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
2401775a:	f7e8 ffa1 	bl	240006a0 <arm_sin_f32>
2401775e:	eef0 7a40 	vmov.f32	s15, s0
24017762:	ed94 9a50 	vldr	s18, [r4, #320]	; 0x140
24017766:	eeb0 0a48 	vmov.f32	s0, s16
2401776a:	ee68 8aa7 	vmul.f32	s17, s17, s15
2401776e:	f7e8 ff45 	bl	240005fc <arm_cos_f32>
24017772:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
24017776:	a801      	add	r0, sp, #4
24017778:	eef0 7a40 	vmov.f32	s15, s0
2401777c:	eeb0 0a68 	vmov.f32	s0, s17
24017780:	eee9 0a67 	vfms.f32	s1, s18, s15
24017784:	f7e8 fdb0 	bl	240002e8 <arm_atan2_f32>
     x->phaseComp = result;
24017788:	9b01      	ldr	r3, [sp, #4]
2401778a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    //if I can figure out how to use a newer CMSIS DSP pack, the new version 1.15 has an atan2f approximation that's likely faster
#else
    x->phaseComp = atan2f((x->poleCoeff * sinf(Fc)) , (1.0f - (x->poleCoeff * cosf(Fc))));
#endif
}
2401778e:	b002      	add	sp, #8
24017790:	ecbd 8b04 	vpop	{d8-d9}
24017794:	bd10      	pop	{r4, pc}
24017796:	bf00      	nop

24017798 <tTString_setDecayInSeconds>:

void    tTString_setDecayInSeconds               (tTString* const bw, Lfloat decay)
{
	 _tTString* x = *bw;
	 x->decayInSeconds = decay;
	 if (x->decayInSeconds > 20.0f)
24017798:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
{
2401779c:	b510      	push	{r4, lr}
	 if (x->decayInSeconds > 20.0f)
2401779e:	eeb4 0ae7 	vcmpe.f32	s0, s15
	 _tTString* x = *bw;
240177a2:	6804      	ldr	r4, [r0, #0]
	 x->decayInSeconds = decay;
240177a4:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
	 if (x->decayInSeconds > 20.0f)
240177a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240177ac:	dd04      	ble.n	240177b8 <tTString_setDecayInSeconds+0x20>
240177ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	 {
		 x->decayCoeff = 1.0f;
240177b2:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
		 //decay = LEAF_map(decay, 0.0f, 1.0f, 0.99f, 1.01f);
		 decay = LEAF_clip(0.1f, decay, 1.0f);
		 x->decayCoeff = decay;
	 }
}
240177b6:	bd10      	pop	{r4, pc}
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
240177b8:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
240177bc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
240177c0:	ee20 0a07 	vmul.f32	s0, s0, s14
240177c4:	ee87 0a80 	vdiv.f32	s0, s15, s0
240177c8:	f7fc feca 	bl	24014560 <fastExp3>
		 decay = LEAF_clip(0.1f, decay, 1.0f);
240177cc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
240177d0:	eef0 0a40 	vmov.f32	s1, s0
		 decay = LEAF_clip(0.1f, decay, 1.0f);
240177d4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 240177e4 <tTString_setDecayInSeconds+0x4c>
240177d8:	f7fc ffe2 	bl	240147a0 <LEAF_clip>
		 x->decayCoeff = 1.0f;
240177dc:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
}
240177e0:	bd10      	pop	{r4, pc}
240177e2:	bf00      	nop
240177e4:	3dcccccd 	.word	0x3dcccccd

240177e8 <tTString_setPickupPos>:

void    tTString_setPickupPos               (tTString* const bw, Lfloat pos)
{
	_tTString* x = *bw;
240177e8:	6803      	ldr	r3, [r0, #0]
	x->pickupPos = pos;
240177ea:	ed83 0a27 	vstr	s0, [r3, #156]	; 0x9c
}
240177ee:	4770      	bx	lr

240177f0 <tTString_setPickupAmount>:

void    tTString_setPickupAmount               (tTString* const bw, Lfloat amount)
{
	_tTString* x = *bw;
240177f0:	6803      	ldr	r3, [r0, #0]
	x->pickupAmount = amount;
240177f2:	ed83 0a63 	vstr	s0, [r3, #396]	; 0x18c
}
240177f6:	4770      	bx	lr

240177f8 <tTString_setPickupModAmp>:

void    tTString_setPickupModAmp               (tTString* const bw, Lfloat amp)
{
	_tTString* x = *bw;
240177f8:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscAmp = amp;
240177fa:	ed83 0a2d 	vstr	s0, [r3, #180]	; 0xb4
}
240177fe:	4770      	bx	lr

24017800 <tTString_setPickupModFreq>:


void    tTString_setPickupModFreq               (tTString* const bw, Lfloat freq)
{
	_tTString* x = *bw;
24017800:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscFreq = freq;
	tCycle_setFreq(&x->pickupModOsc, freq);
24017802:	f103 00ac 	add.w	r0, r3, #172	; 0xac
	x->pickupModOscFreq = freq;
24017806:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
	tCycle_setFreq(&x->pickupModOsc, freq);
2401780a:	f7fd bbed 	b.w	24014fe8 <tCycle_setFreq>
2401780e:	bf00      	nop

24017810 <tTString_mute>:
}



void    tTString_mute              (tTString* const bw)
{
24017810:	b510      	push	{r4, lr}
	 _tTString* x = *bw;
24017812:	6804      	ldr	r4, [r0, #0]
	 x->muteCoeff = fastExp3(-1.0f / (x->freq * 0.007f));;
24017814:	ed9f 0a08 	vldr	s0, [pc, #32]	; 24017838 <tTString_mute+0x28>
24017818:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
2401781c:	ee80 0a27 	vdiv.f32	s0, s0, s15
24017820:	f7fc fe9e 	bl	24014560 <fastExp3>
	 if (x->muteCoeff < 0.5f)
	 {
		 x->muteCoeff = 0.5f;
	 }
	 x->muted = 0.0f;
24017824:	2300      	movs	r3, #0
24017826:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
2401782a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401782e:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
24017832:	ed84 0a1e 	vstr	s0, [r4, #120]	; 0x78
}
24017836:	bd10      	pop	{r4, pc}
24017838:	c30edb6d 	.word	0xc30edb6d

2401783c <tTString_setFilterFreqDirectly>:
	tCookOnePole_setPole(&x->reflFiltP,filter);
	x->poleCoeff = filter;
}

void    tTString_setFilterFreqDirectly              (tTString* const bw, Lfloat freq)
{
2401783c:	b510      	push	{r4, lr}
2401783e:	ed2d 8b02 	vpush	{d8}
	 _tTString* x = *bw;
24017842:	6804      	ldr	r4, [r0, #0]
{
24017844:	eef0 0a40 	vmov.f32	s1, s0
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
24017848:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
2401784c:	ed94 1a5a 	vldr	s2, [r4, #360]	; 0x168
	x->filterFreq = freqToUse;
#ifdef ARM_MATH_CM7
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
24017850:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
24017854:	f7fc ffa4 	bl	240147a0 <LEAF_clip>
24017858:	eef0 7a40 	vmov.f32	s15, s0
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
2401785c:	ed94 7a04 	vldr	s14, [r4, #16]
	x->filterFreq = freqToUse;
24017860:	edc4 7a1c 	vstr	s15, [r4, #112]	; 0x70
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
24017864:	ee20 0a07 	vmul.f32	s0, s0, s14
24017868:	f7e8 ff1a 	bl	240006a0 <arm_sin_f32>
2401786c:	ee38 8a40 	vsub.f32	s16, s16, s0
	freq = 1.0f - sinf(freqToUse * x->twoPiTimesInvSampleRate);
#endif
	//volatile Lfloat normalizedFreq = (overtone * x->freq) * x->twoPiTimesInvSampleRate;
	//filter = 1.0f - normalizedFreq;

	tCookOnePole_setPole(&x->reflFilt,freq);
24017870:	f104 0024 	add.w	r0, r4, #36	; 0x24
24017874:	eeb0 0a48 	vmov.f32	s0, s16
24017878:	f7fa fb16 	bl	24011ea8 <tCookOnePole_setPole>
	tCookOnePole_setPole(&x->reflFiltP,freq);
2401787c:	eeb0 0a48 	vmov.f32	s0, s16
24017880:	f104 0028 	add.w	r0, r4, #40	; 0x28
24017884:	f7fa fb10 	bl	24011ea8 <tCookOnePole_setPole>
	x->poleCoeff = freq;
24017888:	ed84 8a50 	vstr	s16, [r4, #320]	; 0x140
}
2401788c:	ecbd 8b02 	vpop	{d8}
24017890:	bd10      	pop	{r4, pc}
24017892:	bf00      	nop

24017894 <tTString_setTensionGain>:

void   tTString_setTensionGain                  (tTString* const bw, Lfloat tensionGain)
{
	_tTString* x = *bw;
24017894:	6803      	ldr	r3, [r0, #0]
	x->tensionGain = tensionGain;
24017896:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
2401789a:	4770      	bx	lr

2401789c <tTString_setBarPosition>:
	x->barDrive = drive + 1.0f;
}

void   tTString_setBarPosition                  (tTString* const bw, Lfloat barPosition)
{
	_tTString* x = *bw;
2401789c:	6803      	ldr	r3, [r0, #0]
	x->prevBarPosition = x->barPosition;
2401789e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
	x->barPosition = barPosition;
240178a2:	ed83 0a3b 	vstr	s0, [r3, #236]	; 0xec
	x->prevBarPosition = x->barPosition;
240178a6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
240178aa:	4770      	bx	lr

240178ac <tTString_setOpenStringFrequency>:

void   tTString_setOpenStringFrequency                  (tTString* const bw, Lfloat openStringFrequency)
{
	_tTString* x = *bw;
240178ac:	6803      	ldr	r3, [r0, #0]
	x->openStringLength = ((x->sampleRate / openStringFrequency) - 2.0f);
240178ae:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
240178b2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
240178b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
240178ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
240178be:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
}
240178c2:	4770      	bx	lr

240178c4 <tTString_setPhantomHarmonicsGain>:
	x->pickupRatio = ratio;
}

void   tTString_setPhantomHarmonicsGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
240178c4:	6803      	ldr	r3, [r0, #0]
	x->phantomGain = gain;
240178c6:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
}
240178ca:	4770      	bx	lr

240178cc <tTString_setSlideGain>:

void   tTString_setSlideGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
240178cc:	6803      	ldr	r3, [r0, #0]
	x->slideGain = gain;
240178ce:	ed83 0a35 	vstr	s0, [r3, #212]	; 0xd4
}
240178d2:	4770      	bx	lr

240178d4 <tTString_setRippleDepth>:
	tExpSmooth_setFactor(&x->tensionSmoother, 0.00064f * x->invOversampling * (1.0f - tensionSpeed) + 0.00001f); //0.5 is good
}


void   tTString_setRippleDepth                  (tTString* const bw, Lfloat depth)
{
240178d4:	b510      	push	{r4, lr}
240178d6:	ed2d 8b02 	vpush	{d8}
	_tTString* x = *bw;
240178da:	6804      	ldr	r4, [r0, #0]
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
240178dc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
240178e0:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 24017950 <tTString_setRippleDepth+0x7c>
{
240178e4:	eeb0 8a40 	vmov.f32	s16, s0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
240178e8:	edd4 5a22 	vldr	s11, [r4, #136]	; 0x88
240178ec:	eddf 7a19 	vldr	s15, [pc, #100]	; 24017954 <tTString_setRippleDepth+0x80>
240178f0:	edd4 6a19 	vldr	s13, [r4, #100]	; 0x64
240178f4:	eee5 7a86 	vfma.f32	s15, s11, s12
240178f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
240178fc:	ee87 0a27 	vdiv.f32	s0, s14, s15
24017900:	f7fc fe2e 	bl	24014560 <fastExp3>
	x->invOnePlusr = 1.0f / (1.0f + x->r);
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
24017904:	f104 001c 	add.w	r0, r4, #28
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
24017908:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	x->invOnePlusr = 1.0f / (1.0f + x->r);
2401790c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
24017910:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
24017914:	ee68 7a27 	vmul.f32	s15, s16, s15
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
24017918:	eef0 8a47 	vmov.f32	s17, s14
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
2401791c:	ee67 7a80 	vmul.f32	s15, s15, s0
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
24017920:	eee8 8a26 	vfma.f32	s17, s16, s13
	x->invOnePlusr = 1.0f / (1.0f + x->r);
24017924:	ee77 6a87 	vadd.f32	s13, s15, s14
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
24017928:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
	x->invOnePlusr = 1.0f / (1.0f + x->r);
2401792c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
24017930:	eeb0 0a68 	vmov.f32	s0, s17
	x->invOnePlusr = 1.0f / (1.0f + x->r);
24017934:	edc4 7a23 	vstr	s15, [r4, #140]	; 0x8c
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
24017938:	f7fa fd18 	bl	2401236c <tHighpass_setFreq>
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
2401793c:	eeb0 0a68 	vmov.f32	s0, s17
24017940:	f104 0020 	add.w	r0, r4, #32
}
24017944:	ecbd 8b02 	vpop	{d8}
24017948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
2401794c:	f7fa bd0e 	b.w	2401236c <tHighpass_setFreq>
24017950:	3ba3d70a 	.word	0x3ba3d70a
24017954:	38d1b717 	.word	0x38d1b717

24017958 <tTString_setHarmonic>:

void   tTString_setHarmonic                  (tTString* const bw, Lfloat harmonic)
{
	_tTString* x = *bw;
	x->harmonic = harmonic;
	x->rippleRate = 1.0f / harmonic;
24017958:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	_tTString* x = *bw;
2401795c:	6803      	ldr	r3, [r0, #0]
	x->harmonic = harmonic;
2401795e:	ed83 0a21 	vstr	s0, [r3, #132]	; 0x84
	x->rippleRate = 1.0f / harmonic;
24017962:	eec7 7a00 	vdiv.f32	s15, s14, s0
24017966:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
2401796a:	4770      	bx	lr

2401796c <tTString_setFeedbackStrength>:
void   tTString_setFeedbackStrength                  (tTString* const bw, Lfloat strength)
{
	_tTString* x = *bw;
	Lfloat strengthVal = 0.5f * strength;
2401796c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
24017970:	b510      	push	{r4, lr}
24017972:	ed2d 8b02 	vpush	{d8}
24017976:	eeb0 8a40 	vmov.f32	s16, s0
	_tTString* x = *bw;
2401797a:	6804      	ldr	r4, [r0, #0]
	Lfloat strengthVal = 0.5f * strength;
2401797c:	ee20 0a27 	vmul.f32	s0, s0, s15
{
24017980:	b082      	sub	sp, #8
	tFeedbackLeveler_setStrength(&x->feedback, strengthVal);
24017982:	f504 70ac 	add.w	r0, r4, #344	; 0x158
24017986:	ed8d 0a01 	vstr	s0, [sp, #4]
2401798a:	f7f9 fbef 	bl	2401116c <tFeedbackLeveler_setStrength>
	tFeedbackLeveler_setStrength(&x->feedbackP, strengthVal);
2401798e:	ed9d 0a01 	vldr	s0, [sp, #4]
24017992:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
24017996:	f7f9 fbe9 	bl	2401116c <tFeedbackLeveler_setStrength>
	x->feedbackNoiseLevel = strength * 0.005f;
2401799a:	eddf 7a05 	vldr	s15, [pc, #20]	; 240179b0 <tTString_setFeedbackStrength+0x44>
2401799e:	ee28 8a27 	vmul.f32	s16, s16, s15
240179a2:	ed84 8a59 	vstr	s16, [r4, #356]	; 0x164

}
240179a6:	b002      	add	sp, #8
240179a8:	ecbd 8b02 	vpop	{d8}
240179ac:	bd10      	pop	{r4, pc}
240179ae:	bf00      	nop
240179b0:	3ba3d70a 	.word	0x3ba3d70a

240179b4 <tTString_setFeedbackReactionSpeed>:
void   tTString_setFeedbackReactionSpeed                  (tTString* const bw, Lfloat speed)
{
240179b4:	b510      	push	{r4, lr}
	_tTString* x = *bw;
	Lfloat speedVal = speed * 0.1f + 0.00001f;
240179b6:	eddf 7a0c 	vldr	s15, [pc, #48]	; 240179e8 <tTString_setFeedbackReactionSpeed+0x34>
{
240179ba:	ed2d 8b02 	vpush	{d8}
	Lfloat speedVal = speed * 0.1f + 0.00001f;
240179be:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 240179ec <tTString_setFeedbackReactionSpeed+0x38>
	_tTString* x = *bw;
240179c2:	6804      	ldr	r4, [r0, #0]
	Lfloat speedVal = speed * 0.1f + 0.00001f;
240179c4:	eea0 8a27 	vfma.f32	s16, s0, s15
	tFeedbackLeveler_setFactor(&x->feedback, speedVal);
240179c8:	f504 70ac 	add.w	r0, r4, #344	; 0x158
240179cc:	eeb0 0a48 	vmov.f32	s0, s16
240179d0:	f7f9 fbd0 	bl	24011174 <tFeedbackLeveler_setFactor>
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
240179d4:	eeb0 0a48 	vmov.f32	s0, s16
240179d8:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
}
240179dc:	ecbd 8b02 	vpop	{d8}
240179e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
240179e4:	f7f9 bbc6 	b.w	24011174 <tFeedbackLeveler_setFactor>
240179e8:	3dcccccd 	.word	0x3dcccccd
240179ec:	3727c5ac 	.word	0x3727c5ac

240179f0 <tTString_pluck>:

void    tTString_pluck               (tTString* const bw, Lfloat position, Lfloat amplitude)
{
240179f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
240179f4:	ed2d 8b06 	vpush	{d8-d10}
    _tTString* x = *bw;

    x->muted = 1.0f;
240179f8:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    _tTString* x = *bw;
240179fc:	f8d0 8000 	ldr.w	r8, [r0]
{
24017a00:	b085      	sub	sp, #20
24017a02:	eeb0 8a40 	vmov.f32	s16, s0
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
24017a06:	f108 004c 	add.w	r0, r8, #76	; 0x4c
24017a0a:	eeb0 0a60 	vmov.f32	s0, s1
    x->muted = 1.0f;
24017a0e:	ed88 aa51 	vstr	s20, [r8, #324]	; 0x144
{
24017a12:	eef0 8a60 	vmov.f32	s17, s1
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
24017a16:	f7f9 ff57 	bl	240118c8 <tExpSmooth_setVal>
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
24017a1a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
24017a1e:	f508 70ac 	add.w	r0, r8, #344	; 0x158
    Lfloat currentDelay = x->baseDelay;// - x->allpassDelay;
    x->muteCoeff = 1.0f;
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
    Lfloat positionMax = (x->openStringLength * 0.001f);
24017a22:	ed9f 9aa4 	vldr	s18, [pc, #656]	; 24017cb4 <tTString_pluck+0x2c4>
    //0.083335f; * position;//position * halfCurrentDelay;
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
    tLagrangeDelay_clear(&x->delay);
24017a26:	f108 0514 	add.w	r5, r8, #20
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
24017a2a:	ee28 0aa7 	vmul.f32	s0, s17, s15
24017a2e:	ed8d 0a00 	vstr	s0, [sp]
24017a32:	f7f9 fbcb 	bl	240111cc <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&x->feedbackP, amplitude * 0.25f);
24017a36:	ed9d 0a00 	vldr	s0, [sp]
24017a3a:	f508 70ae 	add.w	r0, r8, #348	; 0x15c
24017a3e:	f7f9 fbc5 	bl	240111cc <tFeedbackLeveler_setTargetLevel>
    tExpSmooth_setValAndDest(&x->pitchSmoother, x->pitchSmoother->dest);
24017a42:	4640      	mov	r0, r8
24017a44:	f850 3f50 	ldr.w	r3, [r0, #80]!
24017a48:	ed93 0a04 	vldr	s0, [r3, #16]
24017a4c:	f7f9 ff40 	bl	240118d0 <tExpSmooth_setValAndDest>
    x->baseDelay = x->pitchSmoother->dest;
24017a50:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
24017a54:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
24017a58:	edd8 6a3d 	vldr	s13, [r8, #244]	; 0xf4
    x->baseDelay = x->pitchSmoother->dest;
24017a5c:	ed93 7a04 	vldr	s14, [r3, #16]
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
24017a60:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
24017a64:	eddf 0a94 	vldr	s1, [pc, #592]	; 24017cb8 <tTString_pluck+0x2c8>
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
24017a68:	ee26 1a89 	vmul.f32	s2, s13, s18
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
24017a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
    x->baseDelay = x->pitchSmoother->dest;
24017a70:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
24017a74:	ee66 0aa0 	vmul.f32	s1, s13, s1
    x->muteCoeff = 1.0f;
24017a78:	ed88 aa1e 	vstr	s20, [r8, #120]	; 0x78
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
24017a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
24017a80:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
24017a84:	edcd 7a00 	vstr	s15, [sp]
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
24017a88:	ee78 7a08 	vadd.f32	s15, s16, s16
24017a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24017a90:	ee17 7a90 	vmov	r7, s15
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
24017a94:	f7fc fcc2 	bl	2401441c <LEAF_mapFromZeroToOneInput>
24017a98:	eef0 7a40 	vmov.f32	s15, s0
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
24017a9c:	ed9f 0a87 	vldr	s0, [pc, #540]	; 24017cbc <tTString_pluck+0x2cc>
24017aa0:	eeb0 1a48 	vmov.f32	s2, s16
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
24017aa4:	edcd 7a02 	vstr	s15, [sp, #8]
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
24017aa8:	eddd 0a02 	vldr	s1, [sp, #8]
24017aac:	f7fc fe78 	bl	240147a0 <LEAF_clip>
24017ab0:	ed8d 0a02 	vstr	s0, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
24017ab4:	ed9d 7a02 	vldr	s14, [sp, #8]
    tLagrangeDelay_clear(&x->delay);
24017ab8:	4628      	mov	r0, r5
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
24017aba:	eddd 7a02 	vldr	s15, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
24017abe:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
24017ac2:	ee79 7a67 	vsub.f32	s15, s18, s15
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
24017ac6:	eef8 9a47 	vcvt.f32.u32	s19, s14
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
24017aca:	ee17 4a10 	vmov	r4, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
24017ace:	ee77 7a88 	vadd.f32	s15, s15, s16
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
24017ad2:	ee39 9a89 	vadd.f32	s18, s19, s18
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
24017ad6:	ee8a 7a27 	vdiv.f32	s14, s20, s15
24017ada:	ed8d 7a03 	vstr	s14, [sp, #12]
    tLagrangeDelay_clear(&x->delay);
24017ade:	f7f8 fe09 	bl	240106f4 <tLagrangeDelay_clear>
    x->pluckRatio = pluckPoint / halfCurrentDelay;
24017ae2:	ed9d 7a02 	vldr	s14, [sp, #8]
    x->pluckPoint_forInput = pluckPoint;
24017ae6:	9b02      	ldr	r3, [sp, #8]
    x->pluckRatio = pluckPoint / halfCurrentDelay;
24017ae8:	eec7 7a08 	vdiv.f32	s15, s14, s16
    x->pluckPoint_forInput = pluckPoint;
24017aec:	f8c8 3184 	str.w	r3, [r8, #388]	; 0x184
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24017af0:	9b00      	ldr	r3, [sp, #0]
    x->pluckRatio = pluckPoint / halfCurrentDelay;
24017af2:	edc8 7a5d 	vstr	s15, [r8, #372]	; 0x174
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24017af6:	2b00      	cmp	r3, #0
24017af8:	f000 80c7 	beq.w	24017c8a <tTString_pluck+0x29a>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
        }
        val = LEAF_tanh(val* 1.2f) * amplitude;
        tLagrangeDelay_tapIn(&x->delay, val, i);
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
        tLagrangeDelay_tapIn(&x->delayP, val, i);
24017afc:	f108 0618 	add.w	r6, r8, #24
24017b00:	2c00      	cmp	r4, #0
24017b02:	f000 80d5 	beq.w	24017cb0 <tTString_pluck+0x2c0>
        val = LEAF_tanh(val* 1.2f) * amplitude;
24017b06:	eddf aa6e 	vldr	s21, [pc, #440]	; 24017cc0 <tTString_pluck+0x2d0>
24017b0a:	42a3      	cmp	r3, r4
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24017b0c:	f04f 0900 	mov.w	r9, #0
24017b10:	eba7 0a04 	sub.w	sl, r7, r4
        val = LEAF_tanh(val* 1.2f) * amplitude;
24017b14:	ee8a aa89 	vdiv.f32	s20, s21, s18
24017b18:	bf28      	it	cs
24017b1a:	4623      	movcs	r3, r4
24017b1c:	9301      	str	r3, [sp, #4]
24017b1e:	ee07 9a90 	vmov	s15, r9
        if (i == pluckPointInt)
24017b22:	454c      	cmp	r4, r9
24017b24:	eba7 0b09 	sub.w	fp, r7, r9
        val = LEAF_tanh(val* 1.2f) * amplitude;
24017b28:	eeb8 0a67 	vcvt.f32.u32	s0, s15
24017b2c:	ee20 0a0a 	vmul.f32	s0, s0, s20
        if (i == pluckPointInt)
24017b30:	f000 8081 	beq.w	24017c36 <tTString_pluck+0x246>
        val = LEAF_tanh(val* 1.2f) * amplitude;
24017b34:	f7fc fe3c 	bl	240147b0 <LEAF_tanh>
24017b38:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
24017b3c:	4649      	mov	r1, r9
24017b3e:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
24017b40:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
24017b44:	eeb0 0a48 	vmov.f32	s0, s16
24017b48:	f7f8 ff2e 	bl	240109a8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
24017b4c:	4659      	mov	r1, fp
24017b4e:	eeb0 0a49 	vmov.f32	s0, s18
24017b52:	4628      	mov	r0, r5
24017b54:	f7f8 ff28 	bl	240109a8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
24017b58:	4649      	mov	r1, r9
24017b5a:	eeb0 0a48 	vmov.f32	s0, s16
24017b5e:	4630      	mov	r0, r6
24017b60:	f7f8 ff22 	bl	240109a8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
24017b64:	eeb0 0a49 	vmov.f32	s0, s18
24017b68:	4659      	mov	r1, fp
24017b6a:	4630      	mov	r0, r6
24017b6c:	f7f8 ff1c 	bl	240109a8 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24017b70:	f109 0901 	add.w	r9, r9, #1
24017b74:	9b01      	ldr	r3, [sp, #4]
24017b76:	454b      	cmp	r3, r9
24017b78:	d8d1      	bhi.n	24017b1e <tTString_pluck+0x12e>
24017b7a:	9b00      	ldr	r3, [sp, #0]
24017b7c:	454b      	cmp	r3, r9
24017b7e:	f240 8084 	bls.w	24017c8a <tTString_pluck+0x29a>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
24017b82:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
        val = LEAF_tanh(val* 1.2f) * amplitude;
24017b86:	ed9f aa4e 	vldr	s20, [pc, #312]	; 24017cc0 <tTString_pluck+0x2d0>
24017b8a:	eba7 0a04 	sub.w	sl, r7, r4
24017b8e:	e02a      	b.n	24017be6 <tTString_pluck+0x1f6>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
24017b90:	eeb0 0a6a 	vmov.f32	s0, s21
24017b94:	ed9d 7a03 	vldr	s14, [sp, #12]
24017b98:	eea7 0a27 	vfma.f32	s0, s14, s15
        val = LEAF_tanh(val* 1.2f) * amplitude;
24017b9c:	ee20 0a0a 	vmul.f32	s0, s0, s20
24017ba0:	f7fc fe06 	bl	240147b0 <LEAF_tanh>
24017ba4:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
24017ba8:	4649      	mov	r1, r9
24017baa:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
24017bac:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
24017bb0:	eeb0 0a48 	vmov.f32	s0, s16
24017bb4:	f7f8 fef8 	bl	240109a8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
24017bb8:	4659      	mov	r1, fp
24017bba:	eeb0 0a49 	vmov.f32	s0, s18
24017bbe:	4628      	mov	r0, r5
24017bc0:	f7f8 fef2 	bl	240109a8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
24017bc4:	4649      	mov	r1, r9
24017bc6:	eeb0 0a48 	vmov.f32	s0, s16
24017bca:	4630      	mov	r0, r6
24017bcc:	f7f8 feec 	bl	240109a8 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24017bd0:	f109 0901 	add.w	r9, r9, #1
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
24017bd4:	4659      	mov	r1, fp
24017bd6:	eeb0 0a49 	vmov.f32	s0, s18
24017bda:	4630      	mov	r0, r6
24017bdc:	f7f8 fee4 	bl	240109a8 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24017be0:	9b00      	ldr	r3, [sp, #0]
24017be2:	454b      	cmp	r3, r9
24017be4:	d951      	bls.n	24017c8a <tTString_pluck+0x29a>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
24017be6:	ee07 9a90 	vmov	s15, r9
        if (i == pluckPointInt)
24017bea:	454c      	cmp	r4, r9
24017bec:	eba7 0b09 	sub.w	fp, r7, r9
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
24017bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
24017bf4:	ee79 7ae7 	vsub.f32	s15, s19, s15
        if (i == pluckPointInt)
24017bf8:	d1ca      	bne.n	24017b90 <tTString_pluck+0x1a0>
        val = LEAF_tanh(val* 1.2f) * amplitude;
24017bfa:	eeb0 0a4a 	vmov.f32	s0, s20
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24017bfe:	f104 0901 	add.w	r9, r4, #1
        val = LEAF_tanh(val* 1.2f) * amplitude;
24017c02:	f7fc fdd5 	bl	240147b0 <LEAF_tanh>
24017c06:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
24017c0a:	4621      	mov	r1, r4
24017c0c:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
24017c0e:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
24017c12:	eeb0 0a48 	vmov.f32	s0, s16
24017c16:	f7f8 fec7 	bl	240109a8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
24017c1a:	4651      	mov	r1, sl
24017c1c:	eeb0 0a49 	vmov.f32	s0, s18
24017c20:	4628      	mov	r0, r5
24017c22:	f7f8 fec1 	bl	240109a8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
24017c26:	4621      	mov	r1, r4
24017c28:	eeb0 0a48 	vmov.f32	s0, s16
24017c2c:	4630      	mov	r0, r6
24017c2e:	f7f8 febb 	bl	240109a8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
24017c32:	4651      	mov	r1, sl
24017c34:	e7cf      	b.n	24017bd6 <tTString_pluck+0x1e6>
        val = LEAF_tanh(val* 1.2f) * amplitude;
24017c36:	eeb0 0a6a 	vmov.f32	s0, s21
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24017c3a:	f104 0901 	add.w	r9, r4, #1
        val = LEAF_tanh(val* 1.2f) * amplitude;
24017c3e:	f7fc fdb7 	bl	240147b0 <LEAF_tanh>
24017c42:	ee20 8a28 	vmul.f32	s16, s0, s17
        tLagrangeDelay_tapIn(&x->delay, val, i);
24017c46:	4621      	mov	r1, r4
24017c48:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
24017c4a:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
24017c4e:	eeb0 0a48 	vmov.f32	s0, s16
24017c52:	f7f8 fea9 	bl	240109a8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
24017c56:	4651      	mov	r1, sl
24017c58:	eeb0 0a49 	vmov.f32	s0, s18
24017c5c:	4628      	mov	r0, r5
24017c5e:	f7f8 fea3 	bl	240109a8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
24017c62:	eeb0 0a48 	vmov.f32	s0, s16
24017c66:	4621      	mov	r1, r4
24017c68:	4630      	mov	r0, r6
24017c6a:	f7f8 fe9d 	bl	240109a8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
24017c6e:	eeb0 0a49 	vmov.f32	s0, s18
24017c72:	4651      	mov	r1, sl
24017c74:	4630      	mov	r0, r6
24017c76:	f7f8 fe97 	bl	240109a8 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
24017c7a:	9b01      	ldr	r3, [sp, #4]
24017c7c:	4599      	cmp	r9, r3
24017c7e:	f4ff af4e 	bcc.w	24017b1e <tTString_pluck+0x12e>
24017c82:	9b00      	ldr	r3, [sp, #0]
24017c84:	454b      	cmp	r3, r9
24017c86:	f63f af7c 	bhi.w	24017b82 <tTString_pluck+0x192>

    }
    tThiranAllpassSOCascade_clear(&x->allpass);
24017c8a:	f108 0054 	add.w	r0, r8, #84	; 0x54
24017c8e:	f7fa f84f 	bl	24011d30 <tThiranAllpassSOCascade_clear>
    tThiranAllpassSOCascade_clear(&x->allpassP);
24017c92:	f108 0058 	add.w	r0, r8, #88	; 0x58
24017c96:	f7fa f84b 	bl	24011d30 <tThiranAllpassSOCascade_clear>

    tExpSmooth_setVal(&x->pickNoise, amplitude);
24017c9a:	eeb0 0a68 	vmov.f32	s0, s17
24017c9e:	f508 70be 	add.w	r0, r8, #380	; 0x17c
}
24017ca2:	b005      	add	sp, #20
24017ca4:	ecbd 8b06 	vpop	{d8-d10}
24017ca8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tExpSmooth_setVal(&x->pickNoise, amplitude);
24017cac:	f7f9 be0c 	b.w	240118c8 <tExpSmooth_setVal>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
24017cb0:	46a1      	mov	r9, r4
24017cb2:	e766      	b.n	24017b82 <tTString_pluck+0x192>
24017cb4:	3a83126f 	.word	0x3a83126f
24017cb8:	3e511111 	.word	0x3e511111
24017cbc:	00000000 	.word	0x00000000
24017cc0:	3f99999a 	.word	0x3f99999a

24017cc4 <tTString_setHarmonicity>:
	x->wavelength = waveLength;
}
void    tTString_setSampleRate         (tTString* const, Lfloat sr);

void    tTString_setHarmonicity         (tTString* const bw, Lfloat B, Lfloat freq)
{
24017cc4:	b510      	push	{r4, lr}
24017cc6:	ed2d 8b02 	vpush	{d8}
    _tTString* x = *bw;
24017cca:	6804      	ldr	r4, [r0, #0]
{
24017ccc:	eeb0 8a60 	vmov.f32	s16, s1
24017cd0:	eef0 8a40 	vmov.f32	s17, s0
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
24017cd4:	edd4 7a01 	vldr	s15, [r4, #4]
24017cd8:	f104 0054 	add.w	r0, r4, #84	; 0x54
24017cdc:	edd4 0a02 	vldr	s1, [r4, #8]
24017ce0:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
24017ce4:	ee68 0a20 	vmul.f32	s1, s16, s1
24017ce8:	f7f9 ff10 	bl	24011b0c <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
24017cec:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
24017cf0:	edd4 0a02 	vldr	s1, [r4, #8]
24017cf4:	f104 0058 	add.w	r0, r4, #88	; 0x58
24017cf8:	ed94 7a01 	vldr	s14, [r4, #4]
24017cfc:	ee68 0a20 	vmul.f32	s1, s16, s1
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
24017d00:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
24017d04:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
24017d08:	ee28 0aa7 	vmul.f32	s0, s17, s15
24017d0c:	f7f9 fefe 	bl	24011b0c <tThiranAllpassSOCascade_setCoeff>
24017d10:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
24017d14:	ecbd 8b02 	vpop	{d8}
24017d18:	bd10      	pop	{r4, pc}
24017d1a:	bf00      	nop

24017d1c <tTString_setInharmonic>:

void    tTString_setInharmonic         (tTString* const bw, uint32_t onOrOff)
{
    _tTString* x = *bw;
    x->inharmonic = onOrOff;
    x->inharmonicMult = (Lfloat)onOrOff;
24017d1c:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
24017d20:	6803      	ldr	r3, [r0, #0]
    x->inharmonicMult = (Lfloat)onOrOff;
24017d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
    x->inharmonic = onOrOff;
24017d26:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
    x->inharmonicMult = (Lfloat)onOrOff;
24017d2a:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
}
24017d2e:	4770      	bx	lr

24017d30 <tTString_setWoundOrUnwound>:
void    tTString_setWoundOrUnwound         (tTString* const bw, uint32_t wound)
{
24017d30:	b510      	push	{r4, lr}
    _tTString* x = *bw;
24017d32:	6804      	ldr	r4, [r0, #0]
    x->wound = wound;
24017d34:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
    if (x->wound)
24017d38:	b169      	cbz	r1, 24017d56 <tTString_setWoundOrUnwound+0x26>
	{

    	tExpSmooth_setFactor(&x->barSmooth2, 0.0005f);
24017d3a:	f504 708c 	add.w	r0, r4, #280	; 0x118
24017d3e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 24017d74 <tTString_setWoundOrUnwound+0x44>
24017d42:	f7f9 fdab 	bl	2401189c <tExpSmooth_setFactor>
    	tExpSmooth_setFactor(&x->barSmoothVol, 0.0008f);
24017d46:	f504 708e 	add.w	r0, r4, #284	; 0x11c
24017d4a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 24017d78 <tTString_setWoundOrUnwound+0x48>

		tExpSmooth_setFactor(&x->barSmooth2, 0.005f);
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);

	}
}
24017d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	tExpSmooth_setFactor(&x->barSmoothVol, 0.0008f);
24017d52:	f7f9 bda3 	b.w	2401189c <tExpSmooth_setFactor>
		tExpSmooth_setFactor(&x->barSmooth2, 0.005f);
24017d56:	f504 708c 	add.w	r0, r4, #280	; 0x118
24017d5a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 24017d7c <tTString_setWoundOrUnwound+0x4c>
24017d5e:	f7f9 fd9d 	bl	2401189c <tExpSmooth_setFactor>
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);
24017d62:	f504 708e 	add.w	r0, r4, #284	; 0x11c
24017d66:	ed9f 0a06 	vldr	s0, [pc, #24]	; 24017d80 <tTString_setWoundOrUnwound+0x50>
}
24017d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);
24017d6e:	f7f9 bd95 	b.w	2401189c <tExpSmooth_setFactor>
24017d72:	bf00      	nop
24017d74:	3a03126f 	.word	0x3a03126f
24017d78:	3a51b717 	.word	0x3a51b717
24017d7c:	3ba3d70a 	.word	0x3ba3d70a
24017d80:	3b83126f 	.word	0x3b83126f

24017d84 <tTString_setWindingsPerInch>:
void    tTString_setWindingsPerInch         (tTString* const bw, uint32_t windings)
{
    _tTString* x = *bw;
    x->windingsPerInch = windings;
24017d84:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
24017d88:	6803      	ldr	r3, [r0, #0]
    x->windingsPerInch = windings;
24017d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
24017d8e:	edc3 7a5b 	vstr	s15, [r3, #364]	; 0x16c
}
24017d92:	4770      	bx	lr

24017d94 <tTString_setPickupFilterFreq>:

void    tTString_setPickupFilterFreq         (tTString* const bw, Lfloat cutoff)
{
    _tTString* x = *bw;
    tSVF_setFreq(&x->pickupFilter,cutoff);
24017d94:	6800      	ldr	r0, [r0, #0]
24017d96:	30b8      	adds	r0, #184	; 0xb8
24017d98:	f7fa ba02 	b.w	240121a0 <tSVF_setFreq>

24017d9c <tTString_setPickupFilterQ>:

}
void    tTString_setPickupFilterQ        (tTString* const bw, Lfloat Q)
{
    _tTString* x = *bw;
    tSVF_setQ(&x->pickupFilter,Q+0.5f);
24017d9c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24017da0:	6800      	ldr	r0, [r0, #0]
24017da2:	30b8      	adds	r0, #184	; 0xb8
24017da4:	ee30 0a27 	vadd.f32	s0, s0, s15
24017da8:	f7fa ba74 	b.w	24012294 <tSVF_setQ>

24017dac <tTString_setPeakFilterFreq>:
}

void    tTString_setPeakFilterFreq         (tTString* const bw, Lfloat cutoff)
{
    _tTString* x = *bw;
    tSVF_setFreq(&x->peakFilt,cutoff);
24017dac:	6800      	ldr	r0, [r0, #0]
24017dae:	f500 70c4 	add.w	r0, r0, #392	; 0x188
24017db2:	f7fa b9f5 	b.w	240121a0 <tSVF_setFreq>
24017db6:	bf00      	nop

24017db8 <tTString_setPeakFilterQ>:

}
void    tTString_setPeakFilterQ        (tTString* const bw, Lfloat Q)
{
    _tTString* x = *bw;
    tSVF_setQ(&x->peakFilt,Q+0.5f);
24017db8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
24017dbc:	6800      	ldr	r0, [r0, #0]
24017dbe:	f500 70c4 	add.w	r0, r0, #392	; 0x188
24017dc2:	ee30 0a27 	vadd.f32	s0, s0, s15
24017dc6:	f7fa ba65 	b.w	24012294 <tSVF_setQ>
24017dca:	bf00      	nop

24017dcc <tStiffString_free>:
}



void    tStiffString_free (tStiffString* const pm)
{
24017dcc:	b538      	push	{r3, r4, r5, lr}
    _tStiffString* p = *pm;
24017dce:	6805      	ldr	r5, [r0, #0]

    for (int i = 0; i < p->numModes; ++i) {
24017dd0:	686b      	ldr	r3, [r5, #4]
24017dd2:	2b00      	cmp	r3, #0
24017dd4:	dd09      	ble.n	24017dea <tStiffString_free+0x1e>
24017dd6:	2400      	movs	r4, #0
        //tDampedOscillator_free(&p->osc[i]);
    	tCycle_free(&p->osc[i]);
24017dd8:	68a8      	ldr	r0, [r5, #8]
24017dda:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    for (int i = 0; i < p->numModes; ++i) {
24017dde:	3401      	adds	r4, #1
    	tCycle_free(&p->osc[i]);
24017de0:	f7fd f8d8 	bl	24014f94 <tCycle_free>
    for (int i = 0; i < p->numModes; ++i) {
24017de4:	686b      	ldr	r3, [r5, #4]
24017de6:	42a3      	cmp	r3, r4
24017de8:	dcf6      	bgt.n	24017dd8 <tStiffString_free+0xc>
    	//
    }
    mpool_free((char *) p->nyquistCoeff, p->mempool);
24017dea:	6829      	ldr	r1, [r5, #0]
24017dec:	6be8      	ldr	r0, [r5, #60]	; 0x3c
24017dee:	f7fd f815 	bl	24014e1c <mpool_free>
    mpool_free((char *) p->decayScalar, p->mempool);
24017df2:	6829      	ldr	r1, [r5, #0]
24017df4:	6b68      	ldr	r0, [r5, #52]	; 0x34
24017df6:	f7fd f811 	bl	24014e1c <mpool_free>
    mpool_free((char *) p->decayVal, p->mempool);
24017dfa:	6829      	ldr	r1, [r5, #0]
24017dfc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
24017dfe:	f7fd f80d 	bl	24014e1c <mpool_free>
    mpool_free((char *) p->amplitudes, p->mempool);
24017e02:	6829      	ldr	r1, [r5, #0]
24017e04:	68e8      	ldr	r0, [r5, #12]
24017e06:	f7fd f809 	bl	24014e1c <mpool_free>
    mpool_free((char *) p->outputWeights, p->mempool);
24017e0a:	6829      	ldr	r1, [r5, #0]
24017e0c:	6928      	ldr	r0, [r5, #16]
24017e0e:	f7fd f805 	bl	24014e1c <mpool_free>
    mpool_free((char *) p, p->mempool);
24017e12:	6829      	ldr	r1, [r5, #0]
24017e14:	4628      	mov	r0, r5
}
24017e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char *) p, p->mempool);
24017e1a:	f7fc bfff 	b.w	24014e1c <mpool_free>
24017e1e:	bf00      	nop

24017e20 <tStiffString_updateOscillators>:

void tStiffString_updateOscillators(tStiffString* const pm)
{
24017e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24017e22:	ed2d 8b08 	vpush	{d8-d11}
	_tStiffString *p = *pm;
24017e26:	6804      	ldr	r4, [r0, #0]
	Lfloat kappa_sq = p->stiffness * p->stiffness;
	Lfloat compensation = 0.0f;
    for (int i = 0; i < p->numModes; ++i) {
24017e28:	6863      	ldr	r3, [r4, #4]
	Lfloat kappa_sq = p->stiffness * p->stiffness;
24017e2a:	edd4 9a06 	vldr	s19, [r4, #24]
    for (int i = 0; i < p->numModes; ++i) {
24017e2e:	2b00      	cmp	r3, #0
	Lfloat kappa_sq = p->stiffness * p->stiffness;
24017e30:	ee69 9aa9 	vmul.f32	s19, s19, s19
    for (int i = 0; i < p->numModes; ++i) {
24017e34:	dd60      	ble.n	24017ef8 <tStiffString_updateOscillators+0xd8>
24017e36:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
	Lfloat compensation = 0.0f;
24017e3a:	ed9f 9a31 	vldr	s18, [pc, #196]	; 24017f00 <tStiffString_updateOscillators+0xe0>
      int n = i + 1;
      int n_sq = n * n;
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
      //Lfloat w0 = n * sqrtf(1.0f + kappa_sq * n_sq);
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
24017e3e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    for (int i = 0; i < p->numModes; ++i) {
24017e42:	2500      	movs	r5, #0
    	  tDampedOscillator_setDecay(&p->osc[i],0.5f);
      }
      */
      Lfloat	testFreq = (p->freqHz * w);
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
24017e44:	eef0 aa49 	vmov.f32	s21, s18
24017e48:	ee69 9a8a 	vmul.f32	s19, s19, s20
    	  compensation = 1.0f / w;
24017e4c:	462e      	mov	r6, r5
24017e4e:	3501      	adds	r5, #1
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
24017e50:	eef0 6a4b 	vmov.f32	s13, s22
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
24017e54:	ed94 6a0a 	vldr	s12, [r4, #40]	; 0x28
      int n_sq = n * n;
24017e58:	fb05 f305 	mul.w	r3, r5, r5
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
24017e5c:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
24017e60:	ee07 5a90 	vmov	s15, r5
       Lfloat w = w0 * (1.0f - 0.5f * zeta * zeta);
24017e64:	eeb0 8a4b 	vmov.f32	s16, s22
      int n_sq = n * n;
24017e68:	ee07 3a10 	vmov	s14, r3
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
24017e6c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
24017e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24017e74:	00b7      	lsls	r7, r6, #2
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
24017e76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
24017e7a:	eeb0 0a6a 	vmov.f32	s0, s21
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
24017e7e:	eee7 6a29 	vfma.f32	s13, s14, s19
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
24017e82:	eee6 8a07 	vfma.f32	s17, s12, s14
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
24017e86:	ee67 7aa6 	vmul.f32	s15, s15, s13
      Lfloat zeta = sig / w0;
24017e8a:	ee88 7aa7 	vdiv.f32	s14, s17, s15
       Lfloat w = w0 * (1.0f - 0.5f * zeta * zeta);
24017e8e:	ee27 7a47 	vnmul.f32	s14, s14, s14
24017e92:	eea7 8a0a 	vfma.f32	s16, s14, s20
24017e96:	ee28 8a27 	vmul.f32	s16, s16, s15
      if (i == 0)
24017e9a:	b90e      	cbnz	r6, 24017ea0 <tStiffString_updateOscillators+0x80>
    	  compensation = 1.0f / w;
24017e9c:	ee8b 9a08 	vdiv.f32	s18, s22, s16
      Lfloat	testFreq = (p->freqHz * w);
24017ea0:	ed94 7a05 	vldr	s14, [r4, #20]
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
24017ea4:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
24017ea8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
24017eaa:	edd4 0a11 	vldr	s1, [r4, #68]	; 0x44
      Lfloat	testFreq = (p->freqHz * w);
24017eae:	ee28 8a07 	vmul.f32	s16, s16, s14
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
24017eb2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
24017eb6:	ee78 7a67 	vsub.f32	s15, s16, s15
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
24017eba:	ee67 0aa0 	vmul.f32	s1, s15, s1
24017ebe:	f7fc fc6f 	bl	240147a0 <LEAF_clip>
24017ec2:	ed86 0a00 	vstr	s0, [r6]
	  tCycle_setFreq(&p->osc[i], testFreq * compensation);
24017ec6:	68a0      	ldr	r0, [r4, #8]
24017ec8:	ee29 0a08 	vmul.f32	s0, s18, s16
24017ecc:	4438      	add	r0, r7
24017ece:	f7fd f88b 	bl	24014fe8 <tCycle_setFreq>
	  //tDampedOscillator_setDecay(&p->osc[i],p->freqHz * sig);
	  Lfloat val = p->freqHz * sig;
	  Lfloat r = fastExp4(-val * p->twoPiTimesInvSampleRate);
24017ed2:	ed94 0a05 	vldr	s0, [r4, #20]
24017ed6:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
24017eda:	ee20 0a27 	vmul.f32	s0, s0, s15
24017ede:	ee28 0ac0 	vnmul.f32	s0, s17, s0
24017ee2:	f7fc fb63 	bl	240145ac <fastExp4>
	  p->decayScalar[i] = r * r;
24017ee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
24017ee8:	ee20 0a00 	vmul.f32	s0, s0, s0
24017eec:	443b      	add	r3, r7
24017eee:	ed83 0a00 	vstr	s0, [r3]
    for (int i = 0; i < p->numModes; ++i) {
24017ef2:	6863      	ldr	r3, [r4, #4]
24017ef4:	42ab      	cmp	r3, r5
24017ef6:	dca9      	bgt.n	24017e4c <tStiffString_updateOscillators+0x2c>
    }
}
24017ef8:	ecbd 8b08 	vpop	{d8-d11}
24017efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
24017efe:	bf00      	nop
24017f00:	00000000 	.word	0x00000000

24017f04 <tStiffString_updateOutputWeights>:
void tStiffString_updateOutputWeights(tStiffString* const pm)
{
24017f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
24017f06:	ed2d 8b02 	vpush	{d8}
	_tStiffString *p = *pm;
24017f0a:	6807      	ldr	r7, [r0, #0]
		Lfloat x0 = p->pickupPos * PI;
24017f0c:	eddf 7a20 	vldr	s15, [pc, #128]	; 24017f90 <tStiffString_updateOutputWeights+0x8c>
		Lfloat totalGain = 0.0f;
	  for (int i = 0; i < p->numModes; ++i)
24017f10:	687b      	ldr	r3, [r7, #4]
		Lfloat x0 = p->pickupPos * PI;
24017f12:	edd7 8a08 	vldr	s17, [r7, #32]
	  for (int i = 0; i < p->numModes; ++i)
24017f16:	2b00      	cmp	r3, #0
		Lfloat x0 = p->pickupPos * PI;
24017f18:	ee68 8aa7 	vmul.f32	s17, s17, s15
	  for (int i = 0; i < p->numModes; ++i)
24017f1c:	dd34      	ble.n	24017f88 <tStiffString_updateOutputWeights+0x84>
	  {
#ifdef ARM_MATH_CM7
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
24017f1e:	693e      	ldr	r6, [r7, #16]
	  for (int i = 0; i < p->numModes; ++i)
24017f20:	2500      	movs	r5, #0
		Lfloat totalGain = 0.0f;
24017f22:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 24017f94 <tStiffString_updateOutputWeights+0x90>
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
24017f26:	3501      	adds	r5, #1
24017f28:	ee07 5a90 	vmov	s15, r5
24017f2c:	00ac      	lsls	r4, r5, #2
24017f2e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
24017f32:	3c04      	subs	r4, #4
24017f34:	4426      	add	r6, r4
24017f36:	ee20 0a28 	vmul.f32	s0, s0, s17
24017f3a:	f7e8 fbb1 	bl	240006a0 <arm_sin_f32>
24017f3e:	ed86 0a00 	vstr	s0, [r6]
	  for (int i = 0; i < p->numModes; ++i)
24017f42:	6879      	ldr	r1, [r7, #4]
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
24017f44:	e9d7 2603 	ldrd	r2, r6, [r7, #12]
	  for (int i = 0; i < p->numModes; ++i)
24017f48:	428d      	cmp	r5, r1
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
24017f4a:	eb06 0004 	add.w	r0, r6, r4
24017f4e:	4422      	add	r2, r4
24017f50:	edd0 7a00 	vldr	s15, [r0]
24017f54:	ed92 7a00 	vldr	s14, [r2]
24017f58:	eef0 7ae7 	vabs.f32	s15, s15
24017f5c:	eea7 8a87 	vfma.f32	s16, s15, s14
	  for (int i = 0; i < p->numModes; ++i)
24017f60:	dbe1      	blt.n	24017f26 <tStiffString_updateOutputWeights+0x22>
24017f62:	eddf 7a0d 	vldr	s15, [pc, #52]	; 24017f98 <tStiffString_updateOutputWeights+0x94>
24017f66:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
	  }
	  if (totalGain < 0.01f)
	  {
		  totalGain = 0.01f;
	  }
	  totalGain = LEAF_clip(0.01f, totalGain, 1.0f);
24017f6a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24017f6e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 24017f98 <tStiffString_updateOutputWeights+0x94>
24017f72:	f7fc fc15 	bl	240147a0 <LEAF_clip>
	  p->gainComp = 1.0f / totalGain;
24017f76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24017f7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
24017f7e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
}
24017f82:	ecbd 8b02 	vpop	{d8}
24017f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  for (int i = 0; i < p->numModes; ++i)
24017f88:	eddf 0a03 	vldr	s1, [pc, #12]	; 24017f98 <tStiffString_updateOutputWeights+0x94>
24017f8c:	e7ed      	b.n	24017f6a <tStiffString_updateOutputWeights+0x66>
24017f8e:	bf00      	nop
24017f90:	40490fdb 	.word	0x40490fdb
24017f94:	00000000 	.word	0x00000000
24017f98:	3c23d70a 	.word	0x3c23d70a

24017f9c <tStiffString_initToPool>:
{
24017f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tMempool* m = *mp;
24017fa0:	6813      	ldr	r3, [r2, #0]
{
24017fa2:	b082      	sub	sp, #8
24017fa4:	460e      	mov	r6, r1
24017fa6:	4680      	mov	r8, r0
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
24017fa8:	4619      	mov	r1, r3
24017faa:	2054      	movs	r0, #84	; 0x54
    _tMempool* m = *mp;
24017fac:	9301      	str	r3, [sp, #4]
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
24017fae:	f7fc fe73 	bl	24014c98 <mpool_alloc>
    p->freqHz = 440.0f;
24017fb2:	4b2f      	ldr	r3, [pc, #188]	; (24018070 <tStiffString_initToPool+0xd4>)
    p->nyquist = p->sampleRate * 0.5f;
24017fb4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
24017fb8:	f8c8 0000 	str.w	r0, [r8]
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
24017fbc:	00b7      	lsls	r7, r6, #2
    p->freqHz = 440.0f;
24017fbe:	6143      	str	r3, [r0, #20]
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
24017fc0:	4605      	mov	r5, r0
    p->pluckPos = 0.2f;
24017fc2:	4b2c      	ldr	r3, [pc, #176]	; (24018074 <tStiffString_initToPool+0xd8>)
    p->mempool = m;
24017fc4:	9a01      	ldr	r2, [sp, #4]
    p->pluckPos = 0.2f;
24017fc6:	61c3      	str	r3, [r0, #28]
    p->pickupPos = 0.3f;
24017fc8:	4b2b      	ldr	r3, [pc, #172]	; (24018078 <tStiffString_initToPool+0xdc>)
    p->mempool = m;
24017fca:	6002      	str	r2, [r0, #0]
    p->pickupPos = 0.3f;
24017fcc:	6203      	str	r3, [r0, #32]
    p->decay = 0.0001f;
24017fce:	4b2b      	ldr	r3, [pc, #172]	; (2401807c <tStiffString_initToPool+0xe0>)
    p->sampleRate = m->leaf->sampleRate;
24017fd0:	9901      	ldr	r1, [sp, #4]
    p->decay = 0.0001f;
24017fd2:	6243      	str	r3, [r0, #36]	; 0x24
    p->decayHighFreq = 0.0003f;
24017fd4:	4b2a      	ldr	r3, [pc, #168]	; (24018080 <tStiffString_initToPool+0xe4>)
    p->stiffness = 0.001f;
24017fd6:	4a2b      	ldr	r2, [pc, #172]	; (24018084 <tStiffString_initToPool+0xe8>)
    p->decayHighFreq = 0.0003f;
24017fd8:	6283      	str	r3, [r0, #40]	; 0x28
    p->muteDecay = 0.4f;
24017fda:	4b2b      	ldr	r3, [pc, #172]	; (24018088 <tStiffString_initToPool+0xec>)
    p->stiffness = 0.001f;
24017fdc:	6182      	str	r2, [r0, #24]
    p->numModes = numModes;
24017fde:	6046      	str	r6, [r0, #4]
    p->muteDecay = 0.4f;
24017fe0:	6483      	str	r3, [r0, #72]	; 0x48
    p->sampleRate = m->leaf->sampleRate;
24017fe2:	684b      	ldr	r3, [r1, #4]
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
24017fe4:	ed9f 6a29 	vldr	s12, [pc, #164]	; 2401808c <tStiffString_initToPool+0xf0>
    p->sampleRate = m->leaf->sampleRate;
24017fe8:	edd3 7a00 	vldr	s15, [r3]
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
24017fec:	ee86 7a27 	vdiv.f32	s14, s12, s15
    p->sampleRate = m->leaf->sampleRate;
24017ff0:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    p->twoPiTimesInvSampleRate = m->leaf->twoPiTimesInvSampleRate;
24017ff4:	684b      	ldr	r3, [r1, #4]
24017ff6:	68db      	ldr	r3, [r3, #12]
    p->nyquist = p->sampleRate * 0.5f;
24017ff8:	ee67 7aa6 	vmul.f32	s15, s15, s13
    p->twoPiTimesInvSampleRate = m->leaf->twoPiTimesInvSampleRate;
24017ffc:	6303      	str	r3, [r0, #48]	; 0x30
    p->amp = 0.0f;
24017ffe:	2300      	movs	r3, #0
    p->nyquist = p->sampleRate * 0.5f;
24018000:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    p->amp = 0.0f;
24018004:	64c3      	str	r3, [r0, #76]	; 0x4c
    p->gainComp = 0.0f;
24018006:	6503      	str	r3, [r0, #80]	; 0x50
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
24018008:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
2401800c:	4638      	mov	r0, r7
2401800e:	f7fc fe43 	bl	24014c98 <mpool_alloc>
    for (int i = 0; i < numModes; ++i) {
24018012:	2e00      	cmp	r6, #0
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
24018014:	60a8      	str	r0, [r5, #8]
    for (int i = 0; i < numModes; ++i) {
24018016:	dd0a      	ble.n	2401802e <tStiffString_initToPool+0x92>
24018018:	2400      	movs	r4, #0
2401801a:	e000      	b.n	2401801e <tStiffString_initToPool+0x82>
    	tCycle_initToPool(&p->osc[i], &m);
2401801c:	68a8      	ldr	r0, [r5, #8]
2401801e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    for (int i = 0; i < numModes; ++i) {
24018022:	3401      	adds	r4, #1
    	tCycle_initToPool(&p->osc[i], &m);
24018024:	a901      	add	r1, sp, #4
24018026:	f7fc ff99 	bl	24014f5c <tCycle_initToPool>
    for (int i = 0; i < numModes; ++i) {
2401802a:	42a6      	cmp	r6, r4
2401802c:	d1f6      	bne.n	2401801c <tStiffString_initToPool+0x80>
    p->amplitudes = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401802e:	9901      	ldr	r1, [sp, #4]
24018030:	4638      	mov	r0, r7
24018032:	f7fc fe31 	bl	24014c98 <mpool_alloc>
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
24018036:	9901      	ldr	r1, [sp, #4]
    p->amplitudes = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
24018038:	60e8      	str	r0, [r5, #12]
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401803a:	4638      	mov	r0, r7
2401803c:	f7fc fe2c 	bl	24014c98 <mpool_alloc>
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
24018040:	9901      	ldr	r1, [sp, #4]
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
24018042:	6128      	str	r0, [r5, #16]
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
24018044:	4638      	mov	r0, r7
24018046:	f7fc fe27 	bl	24014c98 <mpool_alloc>
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401804a:	9901      	ldr	r1, [sp, #4]
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401804c:	6368      	str	r0, [r5, #52]	; 0x34
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401804e:	4638      	mov	r0, r7
24018050:	f7fc fe22 	bl	24014c98 <mpool_alloc>
24018054:	4603      	mov	r3, r0
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
24018056:	9901      	ldr	r1, [sp, #4]
24018058:	4638      	mov	r0, r7
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401805a:	63ab      	str	r3, [r5, #56]	; 0x38
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
2401805c:	f7fc fe1c 	bl	24014c98 <mpool_alloc>
24018060:	4603      	mov	r3, r0
    tStiffString_updateOutputWeights(pm);
24018062:	4640      	mov	r0, r8
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
24018064:	63eb      	str	r3, [r5, #60]	; 0x3c
    tStiffString_updateOutputWeights(pm);
24018066:	f7ff ff4d 	bl	24017f04 <tStiffString_updateOutputWeights>
}
2401806a:	b002      	add	sp, #8
2401806c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
24018070:	43dc0000 	.word	0x43dc0000
24018074:	3e4ccccd 	.word	0x3e4ccccd
24018078:	3e99999a 	.word	0x3e99999a
2401807c:	38d1b717 	.word	0x38d1b717
24018080:	399d4952 	.word	0x399d4952
24018084:	3a83126f 	.word	0x3a83126f
24018088:	3ecccccd 	.word	0x3ecccccd
2401808c:	c1200001 	.word	0xc1200001

24018090 <tStiffString_init>:
    tStiffString_initToPool(pm, numModes, &leaf->mempool);
24018090:	3218      	adds	r2, #24
24018092:	f7ff bf83 	b.w	24017f9c <tStiffString_initToPool>
24018096:	bf00      	nop

24018098 <tStiffString_tick>:

Lfloat   tStiffString_tick                  (tStiffString* const pm)
{
24018098:	b570      	push	{r4, r5, r6, lr}
2401809a:	ed2d 8b02 	vpush	{d8}
    _tStiffString *p = *pm;
2401809e:	6804      	ldr	r4, [r0, #0]
    Lfloat sample = 0.0f;
    for (int i = 0; i < p->numModes; ++i) {
240180a0:	6863      	ldr	r3, [r4, #4]
240180a2:	2b00      	cmp	r3, #0
240180a4:	dd3b      	ble.n	2401811e <tStiffString_tick+0x86>
240180a6:	2600      	movs	r6, #0
    Lfloat sample = 0.0f;
240180a8:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 24018124 <tStiffString_tick+0x8c>
      //sample += tDampedOscillator_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i];
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
240180ac:	68a0      	ldr	r0, [r4, #8]
240180ae:	00b5      	lsls	r5, r6, #2
240180b0:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    for (int i = 0; i < p->numModes; ++i) {
240180b4:	3601      	adds	r6, #1
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
240180b6:	f7fc ff71 	bl	24014f9c <tCycle_tick>
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
240180ba:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	; 0x34
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
240180be:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
240180c2:	442b      	add	r3, r5
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
240180c4:	442a      	add	r2, r5
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
240180c6:	4428      	add	r0, r5
240180c8:	4429      	add	r1, r5
240180ca:	edd3 6a00 	vldr	s13, [r3]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
240180ce:	ed92 7a00 	vldr	s14, [r2]
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
240180d2:	ed91 6a00 	vldr	s12, [r1]
240180d6:	edd0 7a00 	vldr	s15, [r0]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
240180da:	ee26 7a87 	vmul.f32	s14, s13, s14
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
240180de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
240180e0:	ee67 7a86 	vmul.f32	s15, s15, s12
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
240180e4:	ed94 6a12 	vldr	s12, [r4, #72]	; 0x48
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
240180e8:	442a      	add	r2, r5
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
240180ea:	ee27 7a06 	vmul.f32	s14, s14, s12
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
240180ee:	ee27 0a80 	vmul.f32	s0, s15, s0
240180f2:	edd2 7a00 	vldr	s15, [r2]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
240180f6:	ed83 7a00 	vstr	s14, [r3]
    for (int i = 0; i < p->numModes; ++i) {
240180fa:	6863      	ldr	r3, [r4, #4]
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
240180fc:	ee20 0a26 	vmul.f32	s0, s0, s13
    for (int i = 0; i < p->numModes; ++i) {
24018100:	42b3      	cmp	r3, r6
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
24018102:	eea0 8a27 	vfma.f32	s16, s0, s15
    for (int i = 0; i < p->numModes; ++i) {
24018106:	dcd1      	bgt.n	240180ac <tStiffString_tick+0x14>
    }
    return sample * p->amp * p->gainComp;
24018108:	ed94 0a13 	vldr	s0, [r4, #76]	; 0x4c
2401810c:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
24018110:	ee20 0a27 	vmul.f32	s0, s0, s15
}
24018114:	ee20 0a08 	vmul.f32	s0, s0, s16
24018118:	ecbd 8b02 	vpop	{d8}
2401811c:	bd70      	pop	{r4, r5, r6, pc}
    Lfloat sample = 0.0f;
2401811e:	ed9f 8a01 	vldr	s16, [pc, #4]	; 24018124 <tStiffString_tick+0x8c>
24018122:	e7f1      	b.n	24018108 <tStiffString_tick+0x70>
24018124:	00000000 	.word	0x00000000

24018128 <tStiffString_setFreq>:
}


void tStiffString_setFreq(tStiffString* const pm, Lfloat newFreq)
{
    _tStiffString *p = *pm;
24018128:	6803      	ldr	r3, [r0, #0]
    p->freqHz = newFreq;
2401812a:	ed83 0a05 	vstr	s0, [r3, #20]
    tStiffString_updateOscillators(pm);
2401812e:	f7ff be77 	b.w	24017e20 <tStiffString_updateOscillators>
24018132:	bf00      	nop

24018134 <tStiffString_mute>:
}

void tStiffString_mute(tStiffString* const pm)
{
    _tStiffString *p = *pm;
    p->muteDecay = 0.99f;
24018134:	4a01      	ldr	r2, [pc, #4]	; (2401813c <tStiffString_mute+0x8>)
    _tStiffString *p = *pm;
24018136:	6803      	ldr	r3, [r0, #0]
    p->muteDecay = 0.99f;
24018138:	649a      	str	r2, [r3, #72]	; 0x48
}
2401813a:	4770      	bx	lr
2401813c:	3f7d70a4 	.word	0x3f7d70a4

24018140 <tStiffString_pluck>:

void tStiffString_pluck(tStiffString* const mp, Lfloat amp)
{
24018140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24018144:	ed2d 8b04 	vpush	{d8-d9}
    _tStiffString* p = *mp;
24018148:	6807      	ldr	r7, [r0, #0]
    Lfloat x0 = p->pluckPos * PI;
    p->muteDecay = 1.0f;
2401814a:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
    Lfloat x0 = p->pluckPos * PI;
2401814e:	ed9f 8a21 	vldr	s16, [pc, #132]	; 240181d4 <tStiffString_pluck+0x94>
{
24018152:	eef0 9a40 	vmov.f32	s19, s0
    for (int i = 0; i < p->numModes; ++i) {
24018156:	687b      	ldr	r3, [r7, #4]
{
24018158:	4606      	mov	r6, r0
    Lfloat x0 = p->pluckPos * PI;
2401815a:	edd7 8a07 	vldr	s17, [r7, #28]
    for (int i = 0; i < p->numModes; ++i) {
2401815e:	2b00      	cmp	r3, #0
    p->muteDecay = 1.0f;
24018160:	f8c7 8048 	str.w	r8, [r7, #72]	; 0x48
    Lfloat x0 = p->pluckPos * PI;
24018164:	ee68 8a88 	vmul.f32	s17, s17, s16
    for (int i = 0; i < p->numModes; ++i) {
24018168:	dd2a      	ble.n	240181c0 <tStiffString_pluck+0x80>
        int n = i + 1;
        float denom = n * n * x0 * (PI - x0);
2401816a:	ee38 8a68 	vsub.f32	s16, s16, s17
2401816e:	2500      	movs	r5, #0
        if (denom < 0.001f)
        {
        	denom = 0.001f; // to avoid divide by zero
        }
#ifdef ARM_MATH_CM7
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
24018170:	ed9f 9a19 	vldr	s18, [pc, #100]	; 240181d8 <tStiffString_pluck+0x98>
    for (int i = 0; i < p->numModes; ++i) {
24018174:	462c      	mov	r4, r5
24018176:	ee28 8a28 	vmul.f32	s16, s16, s17
        int n = i + 1;
2401817a:	3401      	adds	r4, #1
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
2401817c:	ee07 4a90 	vmov	s15, r4
24018180:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
24018184:	ee20 0a28 	vmul.f32	s0, s0, s17
24018188:	f7e8 fa8a 	bl	240006a0 <arm_sin_f32>
        float denom = n * n * x0 * (PI - x0);
2401818c:	fb04 f304 	mul.w	r3, r4, r4
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
24018190:	ee30 0a00 	vadd.f32	s0, s0, s0
        float denom = n * n * x0 * (PI - x0);
24018194:	ee07 3a90 	vmov	s15, r3
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
24018198:	68fb      	ldr	r3, [r7, #12]
        float denom = n * n * x0 * (PI - x0);
2401819a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
2401819e:	442b      	add	r3, r5
        float denom = n * n * x0 * (PI - x0);
240181a0:	ee67 7a88 	vmul.f32	s15, s15, s16
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
240181a4:	fec7 7a89 	vmaxnm.f32	s15, s15, s18
240181a8:	ee80 7a27 	vdiv.f32	s14, s0, s15
240181ac:	ed83 7a00 	vstr	s14, [r3]
#else
	      p->amplitudes[i] = 2.0f * sinf(x0 * n) / denom;
#endif
        //tDampedOscillator_reset(&p->osc[i]);
        p->decayVal[i] = 1.0f;
240181b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
240181b2:	442b      	add	r3, r5
240181b4:	3504      	adds	r5, #4
240181b6:	f8c3 8000 	str.w	r8, [r3]
    for (int i = 0; i < p->numModes; ++i) {
240181ba:	687b      	ldr	r3, [r7, #4]
240181bc:	42a3      	cmp	r3, r4
240181be:	dcdc      	bgt.n	2401817a <tStiffString_pluck+0x3a>
    }
    p->amp = amp;
240181c0:	edc7 9a13 	vstr	s19, [r7, #76]	; 0x4c
    tStiffString_updateOutputWeights(mp);
240181c4:	4630      	mov	r0, r6
}
240181c6:	ecbd 8b04 	vpop	{d8-d9}
240181ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    tStiffString_updateOutputWeights(mp);
240181ce:	f7ff be99 	b.w	24017f04 <tStiffString_updateOutputWeights>
240181d2:	bf00      	nop
240181d4:	40490fdb 	.word	0x40490fdb
240181d8:	3a83126f 	.word	0x3a83126f

240181dc <tStiffString_setStiffnessNoUpdate>:
240181dc:	b510      	push	{r4, lr}
240181de:	6804      	ldr	r4, [r0, #0]
240181e0:	ed9f 1a04 	vldr	s2, [pc, #16]	; 240181f4 <tStiffString_setStiffnessNoUpdate+0x18>
240181e4:	eddf 0a04 	vldr	s1, [pc, #16]	; 240181f8 <tStiffString_setStiffnessNoUpdate+0x1c>
240181e8:	f7fc f918 	bl	2401441c <LEAF_mapFromZeroToOneInput>
240181ec:	ed84 0a06 	vstr	s0, [r4, #24]
240181f0:	bd10      	pop	{r4, pc}
240181f2:	bf00      	nop
240181f4:	3e4ccccd 	.word	0x3e4ccccd
240181f8:	00000000 	.word	0x00000000

240181fc <tStiffString_setPickupPosNoUpdate>:

    p->stiffness = LEAF_mapFromZeroToOneInput(newValue,0.00f, 0.2f);
}

void tStiffString_setPickupPosNoUpdate(tStiffString* const pm, Lfloat newValue)
{
240181fc:	b510      	push	{r4, lr}
    tStiffString p = *pm;
240181fe:	6804      	ldr	r4, [r0, #0]
{
24018200:	eef0 0a40 	vmov.f32	s1, s0

    p->pickupPos = LEAF_clip(0.01f, newValue, 0.99f);
24018204:	ed9f 1a04 	vldr	s2, [pc, #16]	; 24018218 <tStiffString_setPickupPosNoUpdate+0x1c>
24018208:	ed9f 0a04 	vldr	s0, [pc, #16]	; 2401821c <tStiffString_setPickupPosNoUpdate+0x20>
2401820c:	f7fc fac8 	bl	240147a0 <LEAF_clip>
24018210:	ed84 0a08 	vstr	s0, [r4, #32]
}
24018214:	bd10      	pop	{r4, pc}
24018216:	bf00      	nop
24018218:	3f7d70a4 	.word	0x3f7d70a4
2401821c:	3c23d70a 	.word	0x3c23d70a

24018220 <tStiffString_setPluckPosNoUpdate>:

void tStiffString_setPluckPosNoUpdate(tStiffString* const pm, Lfloat newValue)
{
24018220:	b510      	push	{r4, lr}
    tStiffString p = *pm;
24018222:	6804      	ldr	r4, [r0, #0]
{
24018224:	eef0 0a40 	vmov.f32	s1, s0

    p->pluckPos = LEAF_clip(0.01f, newValue, 0.99f);
24018228:	ed9f 1a04 	vldr	s2, [pc, #16]	; 2401823c <tStiffString_setPluckPosNoUpdate+0x1c>
2401822c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 24018240 <tStiffString_setPluckPosNoUpdate+0x20>
24018230:	f7fc fab6 	bl	240147a0 <LEAF_clip>
24018234:	ed84 0a07 	vstr	s0, [r4, #28]
}
24018238:	bd10      	pop	{r4, pc}
2401823a:	bf00      	nop
2401823c:	3f7d70a4 	.word	0x3f7d70a4
24018240:	3c23d70a 	.word	0x3c23d70a

24018244 <tStiffString_setFreqNoUpdate>:


void tStiffString_setFreqNoUpdate(tStiffString* const pm, Lfloat newFreq)
{
    _tStiffString *p = *pm;
24018244:	6803      	ldr	r3, [r0, #0]
    p->freqHz = newFreq;
24018246:	ed83 0a05 	vstr	s0, [r3, #20]
}
2401824a:	4770      	bx	lr

2401824c <tStiffString_setDecayNoUpdate>:

void tStiffString_setDecayNoUpdate(tStiffString* const pm, Lfloat decay)
{
    _tStiffString *p = *pm;
2401824c:	6803      	ldr	r3, [r0, #0]
    p->decay = decay;
2401824e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
}
24018252:	4770      	bx	lr

24018254 <tStiffString_setDecayHighFreqNoUpdate>:

void tStiffString_setDecayHighFreqNoUpdate(tStiffString* const pm, Lfloat decayHF)
{
    _tStiffString *p = *pm;
24018254:	6803      	ldr	r3, [r0, #0]
    p->decayHighFreq = decayHF;
24018256:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
2401825a:	4770      	bx	lr
2401825c:	0000      	movs	r0, r0
	...

24018260 <glottis_setup_waveform>:
    union { float f; uint32_t x; } u = { f };
    return (u.x << 1) > 0xff000000u;
}

void glottis_setup_waveform(glottis* const glo)
{
24018260:	b510      	push	{r4, lr}
	_glottis* glot = *glo;
24018262:	6804      	ldr	r4, [r0, #0]

    Lfloat alpha;
    Lfloat E0;


    glot->Rd = 3.0f * (1.0f - glot->tenseness);
24018264:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
24018268:	eddf 3a53 	vldr	s7, [pc, #332]	; 240183b8 <glottis_setup_waveform+0x158>
    if(Rd < 0.5f) Rd = 0.5f;
    if(Rd > 2.7f) Rd = 2.7f;


    Ra = -0.01f + 0.048f*Rd;
    Rk = 0.224f + 0.118f*Rd;
2401826c:	eddf 6a53 	vldr	s13, [pc, #332]	; 240183bc <glottis_setup_waveform+0x15c>
24018270:	ed9f 6a53 	vldr	s12, [pc, #332]	; 240183c0 <glottis_setup_waveform+0x160>
    Ra = -0.01f + 0.048f*Rd;
24018274:	ed9f 4a53 	vldr	s8, [pc, #332]	; 240183c4 <glottis_setup_waveform+0x164>
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
24018278:	eddf 4a53 	vldr	s9, [pc, #332]	; 240183c8 <glottis_setup_waveform+0x168>
2401827c:	eddf 5a53 	vldr	s11, [pc, #332]	; 240183cc <glottis_setup_waveform+0x16c>
{
24018280:	ed2d 8b08 	vpush	{d8-d11}
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
24018284:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
24018288:	edd4 7a02 	vldr	s15, [r4, #8]
2401828c:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    glot->waveform_length = 1.0f / glot->freq;
24018290:	ed94 7a01 	vldr	s14, [r4, #4]


    Ta = Ra;
    Tp = (Lfloat)1.0f / (2.0f*Rg);
    Te = Tp + Tp*Rk;
24018294:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 240183d0 <glottis_setup_waveform+0x170>
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
24018298:	ee79 7a67 	vsub.f32	s15, s18, s15
    Ra = -0.01f + 0.048f*Rd;
2401829c:	eddf aa4d 	vldr	s21, [pc, #308]	; 240183d4 <glottis_setup_waveform+0x174>
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
240182a0:	ee67 7a85 	vmul.f32	s15, s15, s10
    glot->waveform_length = 1.0f / glot->freq;
240182a4:	ee89 5a07 	vdiv.f32	s10, s18, s14
240182a8:	fe87 7a8b 	vmaxnm.f32	s14, s15, s22
240182ac:	fe87 7a63 	vminnm.f32	s14, s14, s7
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
240182b0:	edc4 7a03 	vstr	s15, [r4, #12]
    Rk = 0.224f + 0.118f*Rd;
240182b4:	eea7 6a26 	vfma.f32	s12, s14, s13
    Te = Tp + Tp*Rk;
240182b8:	eea7 8a26 	vfma.f32	s16, s14, s13
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
240182bc:	eef0 6a4b 	vmov.f32	s13, s22
    Ra = -0.01f + 0.048f*Rd;
240182c0:	eee7 aa04 	vfma.f32	s21, s14, s8
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
240182c4:	eee6 6a24 	vfma.f32	s13, s12, s9



    epsilon = (Lfloat)1.0f / Ta;
240182c8:	eec9 ba2a 	vdiv.f32	s23, s18, s21
    glot->waveform_length = 1.0f / glot->freq;
240182cc:	ed84 5a04 	vstr	s10, [r4, #16]
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
240182d0:	ee6a 7ae6 	vnmul.f32	s15, s21, s13
240182d4:	ee66 6a86 	vmul.f32	s13, s13, s12
240182d8:	eee7 7a25 	vfma.f32	s15, s14, s11
    Tp = (Lfloat)1.0f / (2.0f*Rg);
240182dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
240182e0:	ee87 aaa6 	vdiv.f32	s20, s15, s13
    Te = Tp + Tp*Rk;
240182e4:	ee28 8a0a 	vmul.f32	s16, s16, s20
    shift = fasterexpf(-epsilon * (1.0f - Te));
240182e8:	ee38 0a49 	vsub.f32	s0, s16, s18
240182ec:	ee20 0a2b 	vmul.f32	s0, s0, s23
240182f0:	f7fc f91c 	bl	2401452c <fasterexpf>
    rhs_integral = rhs_integral / delta;
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
    upper_integral = -lower_integral;


    omega = M_PI / Tp;
240182f4:	eeb7 5aca 	vcvt.f64.f32	d5, s20
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
240182f8:	ee79 7a48 	vsub.f32	s15, s18, s16
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
240182fc:	ee3a 7a48 	vsub.f32	s14, s20, s16
    shift = fasterexpf(-epsilon * (1.0f - Te));
24018300:	eef0 9a40 	vmov.f32	s19, s0
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
24018304:	ee67 7a80 	vmul.f32	s15, s15, s0
    omega = M_PI / Tp;
24018308:	ed9f 4b27 	vldr	d4, [pc, #156]	; 240183a8 <glottis_setup_waveform+0x148>
2401830c:	ee84 6b05 	vdiv.f64	d6, d4, d5
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
24018310:	ee70 5a49 	vsub.f32	s11, s0, s18
    delta = 1.0f - shift;
24018314:	ee39 9a40 	vsub.f32	s18, s18, s0
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
24018318:	eee5 7aaa 	vfma.f32	s15, s11, s21
    rhs_integral = rhs_integral / delta;
2401831c:	eec7 8a89 	vdiv.f32	s17, s15, s18
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
24018320:	eee7 8a0b 	vfma.f32	s17, s14, s22
    omega = M_PI / Tp;
24018324:	eef7 abc6 	vcvt.f32.f64	s21, d6
    s = fast_sinf2(omega * Te);
24018328:	ee28 0a2a 	vmul.f32	s0, s16, s21
2401832c:	f7fc f968 	bl	24014600 <fast_sinf2>

    y = -M_PI * s * upper_integral / (Tp*2.0f);
24018330:	eeb7 5ac0 	vcvt.f64.f32	d5, s0
    upper_integral = -lower_integral;
24018334:	eeb1 7a68 	vneg.f32	s14, s17
    y = -M_PI * s * upper_integral / (Tp*2.0f);
24018338:	ee3a 6a0a 	vadd.f32	s12, s20, s20
    s = fast_sinf2(omega * Te);
2401833c:	eef0 8a40 	vmov.f32	s17, s0
    y = -M_PI * s * upper_integral / (Tp*2.0f);
24018340:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
24018344:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
24018348:	ed9f 4b19 	vldr	d4, [pc, #100]	; 240183b0 <glottis_setup_waveform+0x150>
2401834c:	ee25 5b04 	vmul.f64	d5, d5, d4
24018350:	ee27 7b05 	vmul.f64	d7, d7, d5
24018354:	ee87 0b06 	vdiv.f64	d0, d7, d6
    z = my_faster_logf(y);
24018358:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401835c:	f7fc f882 	bl	24014464 <my_faster_logf>
    alpha = z / (Tp/2.0f - Te);
24018360:	eef0 7a48 	vmov.f32	s15, s16
24018364:	eeda 7a0b 	vfnms.f32	s15, s20, s22
24018368:	ee80 aa27 	vdiv.f32	s20, s0, s15
    E0 = -1.0f / (s * fastExp4(alpha*Te));
2401836c:	ee28 0a0a 	vmul.f32	s0, s16, s20
24018370:	f7fc f91c 	bl	240145ac <fastExp4>
24018374:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
24018378:	ee20 0a28 	vmul.f32	s0, s0, s17



    glot->alpha = alpha;
2401837c:	ed84 aa06 	vstr	s20, [r4, #24]
    glot->E0 = E0;
    glot->epsilon = epsilon;
24018380:	edc4 ba08 	vstr	s23, [r4, #32]
    glot->shift = shift;
24018384:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    E0 = -1.0f / (s * fastExp4(alpha*Te));
24018388:	eec7 7a00 	vdiv.f32	s15, s14, s0
    glot->delta = delta;
2401838c:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    glot->Te = Te;
24018390:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
    glot->omega = omega;
24018394:	edc4 aa0c 	vstr	s21, [r4, #48]	; 0x30
    glot->E0 = E0;
24018398:	edc4 7a07 	vstr	s15, [r4, #28]
}
2401839c:	ecbd 8b08 	vpop	{d8-d11}
240183a0:	bd10      	pop	{r4, pc}
240183a2:	bf00      	nop
240183a4:	f3af 8000 	nop.w
240183a8:	54442d18 	.word	0x54442d18
240183ac:	400921fb 	.word	0x400921fb
240183b0:	54442d18 	.word	0x54442d18
240183b4:	c00921fb 	.word	0xc00921fb
240183b8:	402ccccd 	.word	0x402ccccd
240183bc:	3df1a9fc 	.word	0x3df1a9fc
240183c0:	3e656042 	.word	0x3e656042
240183c4:	3d449ba6 	.word	0x3d449ba6
240183c8:	3f99999a 	.word	0x3f99999a
240183cc:	3de147ae 	.word	0x3de147ae
240183d0:	3f9cac08 	.word	0x3f9cac08
240183d4:	bc23d70a 	.word	0xbc23d70a

240183d8 <glottis_compute>:
	mpool_free((char*)glot, glot->mempool);
}


Lfloat glottis_compute(glottis* const glo)
{
240183d8:	b530      	push	{r4, r5, lr}
240183da:	ed2d 8b04 	vpush	{d8-d9}
	_glottis* glot = *glo;
240183de:	6804      	ldr	r4, [r0, #0]
{
240183e0:	b083      	sub	sp, #12
    Lfloat t;
    Lfloat intensity;

    out = 0.0f;
    intensity = 1.0f;
    glot->time_in_waveform += glot->T;
240183e2:	edd4 7a05 	vldr	s15, [r4, #20]
240183e6:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38

    if(glot->time_in_waveform > glot->waveform_length) {
240183ea:	ed94 7a04 	vldr	s14, [r4, #16]
    glot->time_in_waveform += glot->T;
240183ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
	LEAF* leaf = glot->mempool->leaf;
240183f2:	6823      	ldr	r3, [r4, #0]
	_glottis* glot = *glo;
240183f4:	9401      	str	r4, [sp, #4]
	LEAF* leaf = glot->mempool->leaf;
240183f6:	685d      	ldr	r5, [r3, #4]
    if(glot->time_in_waveform > glot->waveform_length) {
240183f8:	eef4 7ac7 	vcmpe.f32	s15, s14
    glot->time_in_waveform += glot->T;
240183fc:	edc4 7a05 	vstr	s15, [r4, #20]
    if(glot->time_in_waveform > glot->waveform_length) {
24018400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018404:	dc50      	bgt.n	240184a8 <glottis_compute+0xd0>
        glot->time_in_waveform -= glot->waveform_length;
        glottis_setup_waveform(&glot);

    }

    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
24018406:	ed94 7a01 	vldr	s14, [r4, #4]

    if(t > glot->Te) {
2401840a:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
2401840e:	ee27 8a87 	vmul.f32	s16, s15, s14
    if(t > glot->Te) {
24018412:	eeb4 0ac8 	vcmpe.f32	s0, s16
24018416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401841a:	d530      	bpl.n	2401847e <glottis_compute+0xa6>
        out = (-fastExp4(-glot->epsilon * (t-glot->Te)) + glot->shift) / glot->delta;
2401841c:	ee30 0a48 	vsub.f32	s0, s0, s16
24018420:	edd4 7a08 	vldr	s15, [r4, #32]
24018424:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
24018428:	ee20 0a27 	vmul.f32	s0, s0, s15
2401842c:	f7fc f8be 	bl	240145ac <fastExp4>
24018430:	ee38 0a40 	vsub.f32	s0, s16, s0
24018434:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
24018438:	ee80 9a27 	vdiv.f32	s18, s0, s15
        out = glot->E0 * fastExp4(glot->alpha * t) * sinf(glot->omega * t);
#endif

    }

    noise = (2.0f * leaf->random()) - 1.0f;
2401843c:	692b      	ldr	r3, [r5, #16]
2401843e:	4798      	blx	r3

#ifdef ARM_MATH_CM7
    Lfloat sqr = 0.0f;
    arm_sqrt_f32(glot->tenseness, &sqr);
24018440:	ed94 7a02 	vldr	s14, [r4, #8]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
24018444:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    noise = (2.0f * leaf->random()) - 1.0f;
24018448:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
2401844c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
24018450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018454:	eee0 7a26 	vfma.f32	s15, s0, s13
24018458:	db31      	blt.n	240184be <glottis_compute+0xe6>
    aspiration = intensity * (1.0f - sqr) * 0.3f * noise;
2401845a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
2401845e:	eeb1 7ac7 	vsqrt.f32	s14, s14
24018462:	ee36 7ac7 	vsub.f32	s14, s13, s14
        aspiration = intensity * (1.0f - sqrtf(glot->tenseness)) * 0.3f * noise;
#endif

    aspiration *= 0.2f;

    out += aspiration;
24018466:	eddf 6a17 	vldr	s13, [pc, #92]	; 240184c4 <glottis_compute+0xec>

    return out;
}
2401846a:	eeb0 0a49 	vmov.f32	s0, s18
    out += aspiration;
2401846e:	ee67 7aa6 	vmul.f32	s15, s15, s13
}
24018472:	eea7 0a87 	vfma.f32	s0, s15, s14
24018476:	b003      	add	sp, #12
24018478:	ecbd 8b04 	vpop	{d8-d9}
2401847c:	bd30      	pop	{r4, r5, pc}
        out = glot->E0 * fastExp4(glot->alpha * t) * arm_sin_f32(glot->omega * t);
2401847e:	ed94 0a06 	vldr	s0, [r4, #24]
24018482:	ed94 9a07 	vldr	s18, [r4, #28]
24018486:	ee28 0a00 	vmul.f32	s0, s16, s0
2401848a:	f7fc f88f 	bl	240145ac <fastExp4>
2401848e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
24018492:	eef0 8a40 	vmov.f32	s17, s0
24018496:	ee28 0a27 	vmul.f32	s0, s16, s15
2401849a:	f7e8 f901 	bl	240006a0 <arm_sin_f32>
2401849e:	ee28 0a80 	vmul.f32	s0, s17, s0
240184a2:	ee20 9a09 	vmul.f32	s18, s0, s18
240184a6:	e7c9      	b.n	2401843c <glottis_compute+0x64>
        glot->time_in_waveform -= glot->waveform_length;
240184a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
        glottis_setup_waveform(&glot);
240184ac:	a801      	add	r0, sp, #4
        glot->time_in_waveform -= glot->waveform_length;
240184ae:	edc4 7a05 	vstr	s15, [r4, #20]
        glottis_setup_waveform(&glot);
240184b2:	f7ff fed5 	bl	24018260 <glottis_setup_waveform>
    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
240184b6:	9c01      	ldr	r4, [sp, #4]
240184b8:	edd4 7a05 	vldr	s15, [r4, #20]
240184bc:	e7a3      	b.n	24018406 <glottis_compute+0x2e>
240184be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240184c2:	e7d0      	b.n	24018466 <glottis_compute+0x8e>
240184c4:	3d75c290 	.word	0x3d75c290

240184c8 <tract_calculate_reflections>:
	mpool_free((char*)tr, tr->mempool);
}


void tract_calculate_reflections(tract* const t)
{
240184c8:	b500      	push	{lr}
	_tract* tr = *t;
240184ca:	6803      	ldr	r3, [r0, #0]
	int i;
    Lfloat  sum;

    for(i = 0; i < tr->n; i++)
240184cc:	685a      	ldr	r2, [r3, #4]
240184ce:	2a00      	cmp	r2, #0
240184d0:	dd55      	ble.n	2401857e <tract_calculate_reflections+0xb6>
240184d2:	2200      	movs	r2, #0
    {
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
240184d4:	6958      	ldr	r0, [r3, #20]
240184d6:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
240184da:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        tr->A[i] = scaledDiameter * scaledDiameter;
240184de:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
240184e0:	edd0 7a00 	vldr	s15, [r0]
        tr->A[i] = scaledDiameter * scaledDiameter;
240184e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->n; i++)
240184e8:	3201      	adds	r2, #1
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
240184ea:	ee67 7a87 	vmul.f32	s15, s15, s14
        tr->A[i] = scaledDiameter * scaledDiameter;
240184ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
240184f2:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++)
240184f6:	6859      	ldr	r1, [r3, #4]
240184f8:	4291      	cmp	r1, r2
240184fa:	dceb      	bgt.n	240184d4 <tract_calculate_reflections+0xc>
        /* Calculate area from diameter squared*/
    }

    for(i = 1; i < tr->n; i++)
240184fc:	2901      	cmp	r1, #1
240184fe:	dd3e      	ble.n	2401857e <tract_calculate_reflections+0xb6>
24018500:	2204      	movs	r2, #4
24018502:	f04f 0c01 	mov.w	ip, #1
    {
        tr->reflection[i] = tr->new_reflection[i];

        Lfloat divisorTest = (tr->A[i - 1] + tr->A[i]);

        if(tr->A[i] <= 0.0000001f)
24018506:	ed9f 6a47 	vldr	s12, [pc, #284]	; 24018624 <tract_calculate_reflections+0x15c>
        {
            tr->new_reflection[i] = 0.99f; /* to prevent bad behavior if 0 */
        }
        else
        {
        	if ((divisorTest >= 0.0000001f)|| (divisorTest <= -0.0000001f))
2401850a:	eddf 5a47 	vldr	s11, [pc, #284]	; 24018628 <tract_calculate_reflections+0x160>
            tr->new_reflection[i] = 0.99f; /* to prevent bad behavior if 0 */
2401850e:	f8df e128 	ldr.w	lr, [pc, #296]	; 24018638 <tract_calculate_reflections+0x170>
24018512:	e009      	b.n	24018528 <tract_calculate_reflections+0x60>
24018514:	6b19      	ldr	r1, [r3, #48]	; 0x30
24018516:	4411      	add	r1, r2
24018518:	f8c1 e000 	str.w	lr, [r1]
    for(i = 1; i < tr->n; i++)
2401851c:	f10c 0c01 	add.w	ip, ip, #1
24018520:	6859      	ldr	r1, [r3, #4]
24018522:	3204      	adds	r2, #4
24018524:	4561      	cmp	r1, ip
24018526:	dd2a      	ble.n	2401857e <tract_calculate_reflections+0xb6>
        tr->reflection[i] = tr->new_reflection[i];
24018528:	e9d3 100b 	ldrd	r1, r0, [r3, #44]	; 0x2c
2401852c:	4410      	add	r0, r2
2401852e:	4411      	add	r1, r2
24018530:	6800      	ldr	r0, [r0, #0]
24018532:	6008      	str	r0, [r1, #0]
        Lfloat divisorTest = (tr->A[i - 1] + tr->A[i]);
24018534:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
24018536:	4411      	add	r1, r2
24018538:	edd1 7a00 	vldr	s15, [r1]
2401853c:	ed11 7a01 	vldr	s14, [r1, #-4]
        if(tr->A[i] <= 0.0000001f)
24018540:	eef4 7ac6 	vcmpe.f32	s15, s12
        Lfloat divisorTest = (tr->A[i - 1] + tr->A[i]);
24018544:	ee77 6a27 	vadd.f32	s13, s14, s15
        if(tr->A[i] <= 0.0000001f)
24018548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401854c:	d9e2      	bls.n	24018514 <tract_calculate_reflections+0x4c>
        	if ((divisorTest >= 0.0000001f)|| (divisorTest <= -0.0000001f))
2401854e:	eef4 6ac6 	vcmpe.f32	s13, s12
        	{
        		tr->new_reflection[i] = (tr->A[i - 1] - tr->A[i]) / divisorTest;
24018552:	ee37 7a67 	vsub.f32	s14, s14, s15
        	if ((divisorTest >= 0.0000001f)|| (divisorTest <= -0.0000001f))
24018556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401855a:	da04      	bge.n	24018566 <tract_calculate_reflections+0x9e>
2401855c:	eef4 6a65 	vcmp.f32	s13, s11
24018560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018564:	d8da      	bhi.n	2401851c <tract_calculate_reflections+0x54>
        		tr->new_reflection[i] = (tr->A[i - 1] - tr->A[i]) / divisorTest;
24018566:	eec7 7a26 	vdiv.f32	s15, s14, s13
2401856a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    for(i = 1; i < tr->n; i++)
2401856c:	f10c 0c01 	add.w	ip, ip, #1
        		tr->new_reflection[i] = (tr->A[i - 1] - tr->A[i]) / divisorTest;
24018570:	4411      	add	r1, r2
    for(i = 1; i < tr->n; i++)
24018572:	3204      	adds	r2, #4
        		tr->new_reflection[i] = (tr->A[i - 1] - tr->A[i]) / divisorTest;
24018574:	edc1 7a00 	vstr	s15, [r1]
    for(i = 1; i < tr->n; i++)
24018578:	6859      	ldr	r1, [r3, #4]
2401857a:	4561      	cmp	r1, ip
2401857c:	dcd4      	bgt.n	24018528 <tract_calculate_reflections+0x60>
        	}
        }
    }

    tr->reflection_left = tr->new_reflection_left;
2401857e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    tr->reflection_right = tr->new_reflection_right;
    tr->reflection_nose = tr->new_reflection_nose;

    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
24018582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    tr->reflection_left = tr->new_reflection_left;
24018584:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    tr->reflection_right = tr->new_reflection_right;
24018588:	f8d3 c090 	ldr.w	ip, [r3, #144]	; 0x90
    tr->reflection_nose = tr->new_reflection_nose;
2401858c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
24018590:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    tr->reflection_right = tr->new_reflection_right;
24018592:	f8c3 c084 	str.w	ip, [r3, #132]	; 0x84
    tr->reflection_nose = tr->new_reflection_nose;
24018596:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
2401859a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
2401859e:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
240185a0:	eddc 5a00 	vldr	s11, [ip]
240185a4:	4662      	mov	r2, ip
240185a6:	edd1 7a00 	vldr	s15, [r1]
240185aa:	ed9c 7a01 	vldr	s14, [ip, #4]
240185ae:	3204      	adds	r2, #4
240185b0:	ee75 7aa7 	vadd.f32	s15, s11, s15
    if ((sum  <= 0.001f) && (sum >= -0.001f))
240185b4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 2401862c <tract_calculate_reflections+0x164>
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
240185b8:	ee77 7a87 	vadd.f32	s15, s15, s14
    if ((sum  <= 0.001f) && (sum >= -0.001f))
240185bc:	eef4 7a66 	vcmp.f32	s15, s13
240185c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240185c4:	d828      	bhi.n	24018618 <tract_calculate_reflections+0x150>
240185c6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 24018630 <tract_calculate_reflections+0x168>
240185ca:	eef4 7ac7 	vcmpe.f32	s15, s14
240185ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240185d2:	db21      	blt.n	24018618 <tract_calculate_reflections+0x150>
    {
    	sum = 0.001f;
240185d4:	eef0 7a66 	vmov.f32	s15, s13
240185d8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 24018634 <tract_calculate_reflections+0x16c>
    }
    Lfloat invSum = 1.0f / sum;
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
240185dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
240185e0:	eeb0 6a67 	vmov.f32	s12, s15
240185e4:	ee95 6aa6 	vfnms.f32	s12, s11, s13
240185e8:	ee26 6a07 	vmul.f32	s12, s12, s14
240185ec:	ed83 6a23 	vstr	s12, [r3, #140]	; 0x8c
    tr->new_reflection_right = (Lfloat)(2.0f * tr->A[tr->nose_start + 1] - sum) * invSum;
240185f0:	eeb0 6a67 	vmov.f32	s12, s15
240185f4:	edd2 5a00 	vldr	s11, [r2]
240185f8:	ee95 6aa6 	vfnms.f32	s12, s11, s13
240185fc:	ee26 6a07 	vmul.f32	s12, s12, s14
24018600:	ed83 6a24 	vstr	s12, [r3, #144]	; 0x90
    tr->new_reflection_nose = (Lfloat)(2.0f * tr->noseA[0] - sum) * invSum;
24018604:	ed91 6a00 	vldr	s12, [r1]
24018608:	eed6 7a26 	vfnms.f32	s15, s12, s13
2401860c:	ee67 7a87 	vmul.f32	s15, s15, s14
24018610:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
}
24018614:	f85d fb04 	ldr.w	pc, [sp], #4
    Lfloat invSum = 1.0f / sum;
24018618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401861c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24018620:	e7dc      	b.n	240185dc <tract_calculate_reflections+0x114>
24018622:	bf00      	nop
24018624:	33d6bf95 	.word	0x33d6bf95
24018628:	b3d6bf95 	.word	0xb3d6bf95
2401862c:	3a83126f 	.word	0x3a83126f
24018630:	ba83126f 	.word	0xba83126f
24018634:	4479ffff 	.word	0x4479ffff
24018638:	3f7d70a4 	.word	0x3f7d70a4

2401863c <tract_newLength>:

void tract_newLength(tract* const t, int numTractSections)
{
2401863c:	b410      	push	{r4}
	_tract* tr = *t;
2401863e:	6803      	ldr	r3, [r0, #0]
    }

    tr->n = n; //44
    tr->invN = 1.0f / n;
    tr->nose_length = n*0.636363636363636f; //28
    tr->nose_start = (n - tr->nose_length) + 1; //17
24018640:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    tr->nose_length = n*0.636363636363636f; //28
24018644:	ed9f 6aa5 	vldr	s12, [pc, #660]	; 240188dc <tract_newLength+0x2a0>

	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));

	tr->turbuluencePointPosition[0] = n* 0.45f;
	tr->turbuluencePointPosition[1] = n* 0.5f;
24018648:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    if (numTractSections < tr->maxNumTractSections)
2401864c:	691a      	ldr	r2, [r3, #16]
    tr->last_obstruction = -1;
2401864e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    tr->tip_start = n*0.727272727272727f;
24018652:	ed9f 5aa3 	vldr	s10, [pc, #652]	; 240188e0 <tract_newLength+0x2a4>
    if (numTractSections < tr->maxNumTractSections)
24018656:	428a      	cmp	r2, r1
    tr->blade_start = n*0.227272727272727f;
24018658:	eddf 5aa2 	vldr	s11, [pc, #648]	; 240188e4 <tract_newLength+0x2a8>
    tr->lip_start = n*0.886363636363636f;
2401865c:	eddf 4aa2 	vldr	s9, [pc, #648]	; 240188e8 <tract_newLength+0x2ac>
    	n = numTractSections;
24018660:	bfcc      	ite	gt
24018662:	ee07 1a90 	vmovgt	s15, r1
    	n = tr->maxNumTractSections;
24018666:	ee07 2a90 	vmovle	s15, r2
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
2401866a:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 240188ec <tract_newLength+0x2b0>
    tr->glottal_reflection = 0.75f;
2401866e:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
    	n = tr->maxNumTractSections;
24018672:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
24018676:	eddf 0a9e 	vldr	s1, [pc, #632]	; 240188f0 <tract_newLength+0x2b4>
    tr->glottal_reflection = 0.75f;
2401867a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    tr->reflection_left = 0.0f;
2401867e:	2100      	movs	r1, #0
    tr->lip_reflection = -0.85f;
24018680:	4a9c      	ldr	r2, [pc, #624]	; (240188f4 <tract_newLength+0x2b8>)
    tr->n = n; //44
24018682:	eefd 7ae6 	vcvt.s32.f32	s15, s13
	tr->turbuluencePointPosition[0] = n* 0.45f;
24018686:	eddf 2a9c 	vldr	s5, [pc, #624]	; 240188f8 <tract_newLength+0x2bc>
    tr->nose_length = n*0.636363636363636f; //28
2401868a:	ee26 6a86 	vmul.f32	s12, s13, s12
    tr->lip_reflection = -0.85f;
2401868e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    tr->tip_start = n*0.727272727272727f;
24018692:	ee26 5a85 	vmul.f32	s10, s13, s10
    tr->velum_target = 0.01f;
24018696:	4a99      	ldr	r2, [pc, #612]	; (240188fc <tract_newLength+0x2c0>)
	tr->turbuluencePointDiameter[0] = 1.5f;
	tr->turbuluencePointDiameter[1] = 1.5f;

    tr->invN = 1.0f / tr->n;
24018698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    tr->n = n; //44
2401869c:	ee17 0a90 	vmov	r0, s15
    tr->blade_start = n*0.227272727272727f;
240186a0:	ee66 5aa5 	vmul.f32	s11, s13, s11
    tr->velum_target = 0.01f;
240186a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    tr->tip_start = n*0.727272727272727f;
240186a8:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    tr->movement_speed = 200.0f;
240186ac:	4a94      	ldr	r2, [pc, #592]	; (24018900 <tract_newLength+0x2c4>)
    tr->invN = 1.0f / tr->n;
240186ae:	eec4 7a07 	vdiv.f32	s15, s8, s14

    for(i = 0; i < tr->n; i++) {
240186b2:	2800      	cmp	r0, #0
    tr->n = n; //44
240186b4:	6058      	str	r0, [r3, #4]
    tr->tip_start = n*0.727272727272727f;
240186b6:	ed83 5a14 	vstr	s10, [r3, #80]	; 0x50
    tr->reflection_left = 0.0f;
240186ba:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    tr->reflection_right = 0.0f;
240186be:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    tr->nose_length = n*0.636363636363636f; //28
240186c2:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->reflection_nose = 0.0f;
240186c6:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    tr->blade_start = n*0.227272727272727f;
240186ca:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    tr->new_reflection_left = 0.0f;
240186ce:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    tr->nose_start = (n - tr->nose_length) + 1; //17
240186d2:	ee76 3a84 	vadd.f32	s7, s13, s8
    tr->new_reflection_right= 0.0f;
240186d6:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
240186da:	eef8 1ac5 	vcvt.f32.s32	s3, s10
    tr->nose_length = n*0.636363636363636f; //28
240186de:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48
    tr->nose_start = (n - tr->nose_length) + 1; //17
240186e2:	eeb8 3ac6 	vcvt.f32.s32	s6, s12
    tr->blade_start = n*0.227272727272727f;
240186e6:	edc3 5a15 	vstr	s11, [r3, #84]	; 0x54
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
240186ea:	eeb8 2ae5 	vcvt.f32.s32	s4, s11
    tr->new_reflection_nose = 0.0f;
240186ee:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
240186f2:	eee6 1ac0 	vfms.f32	s3, s13, s0
    tr->lip_output = 0.0f;
240186f6:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    tr->lip_start = n*0.886363636363636f;
240186fa:	ee66 4aa4 	vmul.f32	s9, s13, s9
    tr->nose_output = 0.0f;
240186fe:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
24018702:	eea6 2aa0 	vfma.f32	s4, s13, s1
    tr->last_obstruction = -1;
24018706:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401870a:	ee73 3ac3 	vsub.f32	s7, s7, s6
    tr->movement_speed = 200.0f;
2401870e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	tr->turbuluencePointDiameter[0] = 1.5f;
24018712:	eeb7 4a08 	vmov.f32	s8, #120	; 0x3fc00000  1.5
	tr->turbuluencePointPosition[0] = n* 0.45f;
24018716:	ee26 5aa2 	vmul.f32	s10, s13, s5
    tr->invN = 1.0f / tr->n;
2401871a:	edc3 7a02 	vstr	s15, [r3, #8]
    tr->lip_start = n*0.886363636363636f;
2401871e:	eefd 4ae4 	vcvt.s32.f32	s9, s9
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
24018722:	edc3 1a17 	vstr	s3, [r3, #92]	; 0x5c
    tr->nose_start = (n - tr->nose_length) + 1; //17
24018726:	eefd 3ae3 	vcvt.s32.f32	s7, s7
	tr->turbuluencePointDiameter[0] = 1.5f;
2401872a:	ed83 4a36 	vstr	s8, [r3, #216]	; 0xd8
	tr->turbuluencePointPosition[1] = n* 0.5f;
2401872e:	ee66 6a81 	vmul.f32	s13, s13, s2
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
24018732:	ed83 2a18 	vstr	s4, [r3, #96]	; 0x60
    tr->lip_start = n*0.886363636363636f;
24018736:	edc3 4a16 	vstr	s9, [r3, #88]	; 0x58
    tr->nose_start = (n - tr->nose_length) + 1; //17
2401873a:	edc3 3a13 	vstr	s7, [r3, #76]	; 0x4c
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401873e:	ed83 5a34 	vstr	s10, [r3, #208]	; 0xd0
	tr->turbuluencePointPosition[1] = n* 0.5f;
24018742:	edc3 6a35 	vstr	s13, [r3, #212]	; 0xd4
	tr->turbuluencePointDiameter[1] = 1.5f;
24018746:	ed83 4a37 	vstr	s8, [r3, #220]	; 0xdc
    for(i = 0; i < tr->n; i++) {
2401874a:	dd5c      	ble.n	24018806 <tract_newLength+0x1ca>
        diameter = 0;
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
2401874c:	eef1 4a0c 	vmov.f32	s9, #28	; 0x40e00000  7.0
    for(i = 0; i < tr->n; i++) {
24018750:	2200      	movs	r2, #0
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
24018752:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
            diameter = 0.6f;
24018756:	ed9f 6a6b 	vldr	s12, [pc, #428]	; 24018904 <tract_newLength+0x2c8>
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
2401875a:	eef2 5a08 	vmov.f32	s11, #40	; 0x41400000  12.0
            diameter = 1.1f;
        } else {
            diameter = 1.5f;
2401875e:	eddf 3a6a 	vldr	s7, [pc, #424]	; 24018908 <tract_newLength+0x2cc>
24018762:	e001      	b.n	24018768 <tract_newLength+0x12c>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
24018764:	edd3 7a02 	vldr	s15, [r3, #8]
24018768:	ee67 7a27 	vmul.f32	s15, s14, s15
2401876c:	eef0 6a45 	vmov.f32	s13, s10
            diameter = 0.6f;
24018770:	eeb0 7a46 	vmov.f32	s14, s12
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
24018774:	eee7 6aa4 	vfma.f32	s13, s15, s9
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
24018778:	ee67 7aa5 	vmul.f32	s15, s15, s11
2401877c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
24018780:	eefd 6ae6 	vcvt.s32.f32	s13, s13
24018784:	ee16 0a90 	vmov	r0, s13
24018788:	4290      	cmp	r0, r2
2401878a:	dc04      	bgt.n	24018796 <tract_newLength+0x15a>
            diameter = 1.5f;
2401878c:	ee17 0a90 	vmov	r0, s15
24018790:	4290      	cmp	r0, r2
24018792:	fe33 7a84 	vselgt.f32	s14, s7, s8
        }

        tr->diameter[i] =
            tr->rest_diameter[i] =
            tr->target_diameter[i] =
            tr->new_diameter[i] = diameter;
24018796:	6a18      	ldr	r0, [r3, #32]
24018798:	eb00 0082 	add.w	r0, r0, r2, lsl #2
2401879c:	ed80 7a00 	vstr	s14, [r0]
            tr->target_diameter[i] =
240187a0:	69d8      	ldr	r0, [r3, #28]
240187a2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
240187a6:	ed80 7a00 	vstr	s14, [r0]
            tr->rest_diameter[i] =
240187aa:	6998      	ldr	r0, [r3, #24]
240187ac:	eb00 0082 	add.w	r0, r0, r2, lsl #2
240187b0:	ed80 7a00 	vstr	s14, [r0]
        tr->diameter[i] =
240187b4:	6958      	ldr	r0, [r3, #20]
240187b6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
240187ba:	ed80 7a00 	vstr	s14, [r0]
        tr->reflection[i] = 0.0f;
240187be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
240187c0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
240187c4:	6001      	str	r1, [r0, #0]
        tr->new_reflection[i] = 0.0f;
240187c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
240187c8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
240187cc:	6001      	str	r1, [r0, #0]
        tr->R[i] = 0.0f;
240187ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
240187d0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
240187d4:	6001      	str	r1, [r0, #0]
        tr->L[i] = 0.0f;
240187d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
240187d8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
240187dc:	6001      	str	r1, [r0, #0]
        tr->junction_outR[i] = 0.0f;
240187de:	6b98      	ldr	r0, [r3, #56]	; 0x38
240187e0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
240187e4:	6001      	str	r1, [r0, #0]
        tr->junction_outL[i] = 0.0f;
240187e6:	6b58      	ldr	r0, [r3, #52]	; 0x34
240187e8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
240187ec:	3201      	adds	r2, #1
        tr->junction_outL[i] = 0.0f;
240187ee:	6001      	str	r1, [r0, #0]
    for(i = 0; i < tr->n; i++) {
240187f0:	6858      	ldr	r0, [r3, #4]
240187f2:	ee07 0a90 	vmov	s15, r0
240187f6:	4290      	cmp	r0, r2
240187f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
240187fc:	dcb2      	bgt.n	24018764 <tract_newLength+0x128>
    }

    if (tr->nose_length < 0.01f)
240187fe:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
24018802:	eeb8 3ac6 	vcvt.f32.s32	s6, s12
24018806:	eddf 7a41 	vldr	s15, [pc, #260]	; 2401890c <tract_newLength+0x2d0>
2401880a:	eeb4 3ae7 	vcmpe.f32	s6, s15
2401880e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018812:	d515      	bpl.n	24018840 <tract_newLength+0x204>
    {
    	tr->nose_length = 0.01f;
24018814:	2200      	movs	r2, #0
24018816:	649a      	str	r2, [r3, #72]	; 0x48
        tr->noseL[i] = 0.0f;
        tr->nose_junc_outR[i] = 0.0f;
        tr->nose_junc_outL[i] = 0.0f;
	}

    tr->new_reflection_left = 0.0f;
24018818:	2200      	movs	r2, #0
2401881a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    tr->reflection_left = 0.0f;
2401881e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    tr->new_reflection_right = 0.0f;
24018822:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    tr->reflection_right = 0.0f;
24018826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    tr->new_reflection_nose = 0.0f;
2401882a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    tr->reflection_nose = 0.0f;
2401882e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    tr->lip_output = 0.0f;
24018832:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tr->nose_output = 0.0f;
24018836:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

}
2401883a:	f85d 4b04 	ldr.w	r4, [sp], #4
2401883e:	4770      	bx	lr
	for(i = 0; i < tr->nose_length; i++) {
24018840:	ee16 2a10 	vmov	r2, s12
    Lfloat invNoseLength = 1.0f / tr->nose_length;
24018844:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	for(i = 0; i < tr->nose_length; i++) {
24018848:	2a00      	cmp	r2, #0
    Lfloat invNoseLength = 1.0f / tr->nose_length;
2401884a:	eec7 3a83 	vdiv.f32	s7, s15, s6
	for(i = 0; i < tr->nose_length; i++) {
2401884e:	dde3      	ble.n	24018818 <tract_newLength+0x1dc>
24018850:	2200      	movs	r2, #0
			diameter = 0.4f + 1.6f * d;
24018852:	eddf 4a2f 	vldr	s9, [pc, #188]	; 24018910 <tract_newLength+0x2d4>
24018856:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 24018914 <tract_newLength+0x2d8>
        tr->nose_reflection[i] = 0.0f;
2401885a:	2100      	movs	r1, #0
		diameter = MIN(diameter, 1.9f);
2401885c:	eddf 5a2e 	vldr	s11, [pc, #184]	; 24018918 <tract_newLength+0x2dc>
		if(d < 1.0f) {
24018860:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
			diameter = 0.5f + 1.5f*(2.0f-d);
24018864:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
24018868:	eeb7 3a08 	vmov.f32	s6, #120	; 0x3fc00000  1.5
		d = 2.0f * ((Lfloat)i * invNoseLength);
2401886c:	ee07 2a90 	vmov	s15, r2
24018870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24018874:	ee67 7aa3 	vmul.f32	s15, s15, s7
		if(d < 1.0f) {
24018878:	eef4 7ae6 	vcmpe.f32	s15, s13
		d = 2.0f * ((Lfloat)i * invNoseLength);
2401887c:	ee37 7aa7 	vadd.f32	s14, s15, s15
			diameter = 0.4f + 1.6f * d;
24018880:	eef0 7a45 	vmov.f32	s15, s10
		if(d < 1.0f) {
24018884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.5f + 1.5f*(2.0f-d);
24018888:	ee34 6a47 	vsub.f32	s12, s8, s14
			diameter = 0.4f + 1.6f * d;
2401888c:	eee7 7a24 	vfma.f32	s15, s14, s9
		if(d < 1.0f) {
24018890:	d403      	bmi.n	2401889a <tract_newLength+0x25e>
			diameter = 0.5f + 1.5f*(2.0f-d);
24018892:	eef0 7a66 	vmov.f32	s15, s13
24018896:	eee6 7a03 	vfma.f32	s15, s12, s6
		tr->nose_diameter[i] = diameter;
2401889a:	6f98      	ldr	r0, [r3, #120]	; 0x78
		diameter = MIN(diameter, 1.9f);
2401889c:	fec7 7ae5 	vminnm.f32	s15, s15, s11
		tr->nose_diameter[i] = diameter;
240188a0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
240188a4:	edc0 7a00 	vstr	s15, [r0]
        tr->nose_reflection[i] = 0.0f;
240188a8:	6f58      	ldr	r0, [r3, #116]	; 0x74
240188aa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
240188ae:	6001      	str	r1, [r0, #0]
        tr->noseR[i] = 0.0f;
240188b0:	6e98      	ldr	r0, [r3, #104]	; 0x68
240188b2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
240188b6:	6001      	str	r1, [r0, #0]
        tr->noseL[i] = 0.0f;
240188b8:	6e58      	ldr	r0, [r3, #100]	; 0x64
240188ba:	eb00 0082 	add.w	r0, r0, r2, lsl #2
240188be:	6001      	str	r1, [r0, #0]
        tr->nose_junc_outR[i] = 0.0f;
240188c0:	6f18      	ldr	r0, [r3, #112]	; 0x70
240188c2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
240188c6:	6001      	str	r1, [r0, #0]
        tr->nose_junc_outL[i] = 0.0f;
240188c8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
240188ca:	eb00 0082 	add.w	r0, r0, r2, lsl #2
	for(i = 0; i < tr->nose_length; i++) {
240188ce:	3201      	adds	r2, #1
        tr->nose_junc_outL[i] = 0.0f;
240188d0:	6001      	str	r1, [r0, #0]
	for(i = 0; i < tr->nose_length; i++) {
240188d2:	6c98      	ldr	r0, [r3, #72]	; 0x48
240188d4:	4290      	cmp	r0, r2
240188d6:	dcc9      	bgt.n	2401886c <tract_newLength+0x230>
240188d8:	e79e      	b.n	24018818 <tract_newLength+0x1dc>
240188da:	bf00      	nop
240188dc:	3f22e8ba 	.word	0x3f22e8ba
240188e0:	3f3a2e8c 	.word	0x3f3a2e8c
240188e4:	3e68ba2f 	.word	0x3e68ba2f
240188e8:	3f62e8ba 	.word	0x3f62e8ba
240188ec:	3d8ba2e9 	.word	0x3d8ba2e9
240188f0:	3d3a2e8c 	.word	0x3d3a2e8c
240188f4:	bf59999a 	.word	0xbf59999a
240188f8:	3ee66666 	.word	0x3ee66666
240188fc:	3c23d70a 	.word	0x3c23d70a
24018900:	43480000 	.word	0x43480000
24018904:	3f19999a 	.word	0x3f19999a
24018908:	3f8ccccd 	.word	0x3f8ccccd
2401890c:	3c23d70a 	.word	0x3c23d70a
24018910:	3fcccccd 	.word	0x3fcccccd
24018914:	3ecccccd 	.word	0x3ecccccd
24018918:	3ff33333 	.word	0x3ff33333

2401891c <tract_reshape>:

void tract_reshape(tract* const t)
{
2401891c:	b410      	push	{r4}
	_tract* tr = *t;
2401891e:	6802      	ldr	r2, [r0, #0]

            slow_return =
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
        }

        tr->diameter[i] = move_towards(diameter, target_diameter,
24018920:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 24018a14 <tract_reshape+0xf8>
    for(i = 0; i < tr->n; i++) {
24018924:	6853      	ldr	r3, [r2, #4]
    amount = tr->block_time * tr->movement_speed;
24018926:	edd2 4a2e 	vldr	s9, [r2, #184]	; 0xb8
2401892a:	edd2 7a2b 	vldr	s15, [r2, #172]	; 0xac
    for(i = 0; i < tr->n; i++) {
2401892e:	2b00      	cmp	r3, #0
    amount = tr->block_time * tr->movement_speed;
24018930:	ee64 4aa7 	vmul.f32	s9, s9, s15
    for(i = 0; i < tr->n; i++) {
24018934:	dd6a      	ble.n	24018a0c <tract_reshape+0xf0>
        tr->diameter[i] = move_towards(diameter, target_diameter,
24018936:	ed9f 3a38 	vldr	s6, [pc, #224]	; 24018a18 <tract_reshape+0xfc>
2401893a:	ee24 5a85 	vmul.f32	s10, s9, s10
    for(i = 0; i < tr->n; i++) {
2401893e:	2300      	movs	r3, #0
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
24018940:	eddf 3a36 	vldr	s7, [pc, #216]	; 24018a1c <tract_reshape+0x100>
        tr->diameter[i] = move_towards(diameter, target_diameter,
24018944:	ee24 4a83 	vmul.f32	s8, s9, s6
        diameter = tr->diameter[i];
24018948:	6951      	ldr	r1, [r2, #20]
        tr->diameter[i] = move_towards(diameter, target_diameter,
2401894a:	eef0 7a44 	vmov.f32	s15, s8
        if(i < tr->nose_start) slow_return = 0.6f;
2401894e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
        target_diameter = tr->target_diameter[i];
24018950:	69d4      	ldr	r4, [r2, #28]
        diameter = tr->diameter[i];
24018952:	eb01 0183 	add.w	r1, r1, r3, lsl #2
        if(i < tr->nose_start) slow_return = 0.6f;
24018956:	4298      	cmp	r0, r3
        target_diameter = tr->target_diameter[i];
24018958:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
        diameter = tr->diameter[i];
2401895c:	ed91 6a00 	vldr	s12, [r1]
        target_diameter = tr->target_diameter[i];
24018960:	eddc 6a00 	vldr	s13, [ip]
        if(i < tr->nose_start) slow_return = 0.6f;
24018964:	dc16      	bgt.n	24018994 <tract_reshape+0x78>
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
24018966:	1a1c      	subs	r4, r3, r0
        else if(i >= tr->tip_start) slow_return = 1.0f;
24018968:	eef0 7a64 	vmov.f32	s15, s9
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
2401896c:	ee05 4a90 	vmov	s11, r4
        else if(i >= tr->tip_start) slow_return = 1.0f;
24018970:	6d14      	ldr	r4, [r2, #80]	; 0x50
        	Lfloat tempDiv= (tr->tip_start - tr->nose_start);
24018972:	1a20      	subs	r0, r4, r0
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
24018974:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        else if(i >= tr->tip_start) slow_return = 1.0f;
24018978:	429c      	cmp	r4, r3
        	Lfloat tempDiv= (tr->tip_start - tr->nose_start);
2401897a:	ee07 0a10 	vmov	s14, r0
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
2401897e:	ee65 5aa3 	vmul.f32	s11, s11, s7
        	Lfloat tempDiv= (tr->tip_start - tr->nose_start);
24018982:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
        else if(i >= tr->tip_start) slow_return = 1.0f;
24018986:	dd05      	ble.n	24018994 <tract_reshape+0x78>
                0.6f+0.4f*(i - tr->nose_start)/tempDiv;
24018988:	eec5 7a87 	vdiv.f32	s15, s11, s14
            slow_return =
2401898c:	ee77 7a83 	vadd.f32	s15, s15, s6
        tr->diameter[i] = move_towards(diameter, target_diameter,
24018990:	ee67 7aa4 	vmul.f32	s15, s15, s9

Lfloat move_towards(Lfloat current, Lfloat target,
        Lfloat amt_up, Lfloat amt_down)
{
    Lfloat tmp;
    if(current < target) {
24018994:	eef4 6ac6 	vcmpe.f32	s13, s12
        tmp = current + amt_up;
24018998:	ee76 7a27 	vadd.f32	s15, s12, s15
        return MIN(tmp, target);
    } else {
        tmp = current - amt_down;
2401899c:	ee36 7a45 	vsub.f32	s14, s12, s10
    if(current < target) {
240189a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return MIN(tmp, target);
240189a4:	fec7 7ae6 	vminnm.f32	s15, s15, s13
        return MAX(tmp, target);
240189a8:	fe87 7a26 	vmaxnm.f32	s14, s14, s13
    if(current < target) {
240189ac:	dd22      	ble.n	240189f4 <tract_reshape+0xd8>
    for(i = 0; i < tr->n; i++) {
240189ae:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
240189b0:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
240189b4:	6851      	ldr	r1, [r2, #4]
240189b6:	428b      	cmp	r3, r1
240189b8:	dbc6      	blt.n	24018948 <tract_reshape+0x2c>
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
240189ba:	6f93      	ldr	r3, [r2, #120]	; 0x78
240189bc:	edd2 7a26 	vldr	s15, [r2, #152]	; 0x98
240189c0:	ed93 7a00 	vldr	s14, [r3]
    if(current < target) {
240189c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
240189c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240189cc:	d519      	bpl.n	24018a02 <tract_reshape+0xe6>
        tmp = current + amt_up;
240189ce:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
240189d2:	eea4 7aa6 	vfma.f32	s14, s9, s13
        return MIN(tmp, target);
240189d6:	fec7 7ac7 	vminnm.f32	s15, s15, s14
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
240189da:	edc3 7a00 	vstr	s15, [r3]
    tr->noseA[0] = tr->nose_diameter[0] * tr->nose_diameter[0];
240189de:	e9d2 131e 	ldrd	r1, r3, [r2, #120]	; 0x78
240189e2:	edd1 7a00 	vldr	s15, [r1]
240189e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
240189ea:	edc3 7a00 	vstr	s15, [r3]
}
240189ee:	f85d 4b04 	ldr.w	r4, [sp], #4
240189f2:	4770      	bx	lr
    for(i = 0; i < tr->n; i++) {
240189f4:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
240189f6:	ed81 7a00 	vstr	s14, [r1]
    for(i = 0; i < tr->n; i++) {
240189fa:	6851      	ldr	r1, [r2, #4]
240189fc:	428b      	cmp	r3, r1
240189fe:	dba3      	blt.n	24018948 <tract_reshape+0x2c>
24018a00:	e7db      	b.n	240189ba <tract_reshape+0x9e>
        tmp = current - amt_down;
24018a02:	ee37 7a45 	vsub.f32	s14, s14, s10
        return MAX(tmp, target);
24018a06:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
24018a0a:	e7e6      	b.n	240189da <tract_reshape+0xbe>
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
24018a0c:	ee24 5a85 	vmul.f32	s10, s9, s10
24018a10:	e7d3      	b.n	240189ba <tract_reshape+0x9e>
24018a12:	bf00      	nop
24018a14:	3dcccccd 	.word	0x3dcccccd
24018a18:	3f19999a 	.word	0x3f19999a
24018a1c:	3ecccccd 	.word	0x3ecccccd

24018a20 <tract_addTurbulenceNoiseAtPosition>:
{
24018a20:	b538      	push	{r3, r4, r5, lr}
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
24018a22:	eddf 7a36 	vldr	s15, [pc, #216]	; 24018afc <tract_addTurbulenceNoiseAtPosition+0xdc>
24018a26:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
	_tract* tr = *t;
24018a2a:	6805      	ldr	r5, [r0, #0]
{
24018a2c:	ed2d 8b06 	vpush	{d8-d10}
24018a30:	eef0 8a60 	vmov.f32	s17, s1
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
24018a34:	ee77 0ac1 	vsub.f32	s1, s15, s2
{
24018a38:	eeb0 9a41 	vmov.f32	s18, s2
	int i = (int)floorf(position);
24018a3c:	fefb 7a68 	vrintm.f32	s15, s17
24018a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
24018a44:	ee60 0a87 	vmul.f32	s1, s1, s14
{
24018a48:	eeb0 8a40 	vmov.f32	s16, s0
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
24018a4c:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 24018b00 <tract_addTurbulenceNoiseAtPosition+0xe0>
24018a50:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	int i = (int)floorf(position);
24018a54:	ee17 4a90 	vmov	r4, s15
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
24018a58:	f7fb fea2 	bl	240147a0 <LEAF_clip>
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
24018a5c:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
	Lfloat delta = position - i;
24018a60:	ee07 4a90 	vmov	s15, r4
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
24018a64:	eef0 9a40 	vmov.f32	s19, s0
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
24018a68:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
24018a6c:	ed9f 0a24 	vldr	s0, [pc, #144]	; 24018b00 <tract_addTurbulenceNoiseAtPosition+0xe0>
24018a70:	ee69 0a20 	vmul.f32	s1, s18, s1
	Lfloat delta = position - i;
24018a74:	eeb8 aae7 	vcvt.f32.s32	s20, s15
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
24018a78:	f7fb fe92 	bl	240147a0 <LEAF_clip>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
24018a7c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	if ((i + 1) < tr->n) {
24018a80:	686b      	ldr	r3, [r5, #4]
24018a82:	1c62      	adds	r2, r4, #1
24018a84:	ee28 8a27 	vmul.f32	s16, s16, s15
24018a88:	429a      	cmp	r2, r3
24018a8a:	ee28 8a29 	vmul.f32	s16, s16, s19
24018a8e:	ee28 0a00 	vmul.f32	s0, s16, s0
24018a92:	da18      	bge.n	24018ac6 <tract_addTurbulenceNoiseAtPosition+0xa6>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
24018a94:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		tr->R[i + 1] += noise0;
24018a98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
24018a9a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
24018a9e:	ee77 7ae8 	vsub.f32	s15, s15, s17
		tr->R[i + 1] += noise0;
24018aa2:	ed93 7a00 	vldr	s14, [r3]
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
24018aa6:	ee77 7a8a 	vadd.f32	s15, s15, s20
		tr->R[i + 1] += noise0;
24018aaa:	eea7 7a80 	vfma.f32	s14, s15, s0
24018aae:	ed83 7a00 	vstr	s14, [r3]
		tr->L[i + 1] += noise0;
24018ab2:	6aab      	ldr	r3, [r5, #40]	; 0x28
24018ab4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24018ab8:	ed93 7a00 	vldr	s14, [r3]
24018abc:	eea7 7a80 	vfma.f32	s14, s15, s0
24018ac0:	ed83 7a00 	vstr	s14, [r3]
	if ((i + 2) < tr->n) {
24018ac4:	686b      	ldr	r3, [r5, #4]
24018ac6:	3402      	adds	r4, #2
24018ac8:	429c      	cmp	r4, r3
24018aca:	da13      	bge.n	24018af4 <tract_addTurbulenceNoiseAtPosition+0xd4>
		tr->R[i + 2] += noise1;
24018acc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	Lfloat delta = position - i;
24018ace:	ee78 8aca 	vsub.f32	s17, s17, s20
		tr->R[i + 2] += noise1;
24018ad2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
24018ad6:	edd3 7a00 	vldr	s15, [r3]
24018ada:	eee8 7a80 	vfma.f32	s15, s17, s0
24018ade:	edc3 7a00 	vstr	s15, [r3]
		tr->L[i + 2] += noise1;
24018ae2:	6aab      	ldr	r3, [r5, #40]	; 0x28
24018ae4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
24018ae8:	edd3 7a00 	vldr	s15, [r3]
24018aec:	eee8 7a80 	vfma.f32	s15, s17, s0
24018af0:	edc3 7a00 	vstr	s15, [r3]
 }
24018af4:	ecbd 8b06 	vpop	{d8-d10}
24018af8:	bd38      	pop	{r3, r4, r5, pc}
24018afa:	bf00      	nop
24018afc:	3db851ec 	.word	0x3db851ec
24018b00:	00000000 	.word	0x00000000

24018b04 <tract_compute>:
{
24018b04:	b570      	push	{r4, r5, r6, lr}
24018b06:	ed2d 8b06 	vpush	{d8-d10}
	_tract* tr = *t;
24018b0a:	6804      	ldr	r4, [r0, #0]
    Lfloat oneMinusLambda = 1.0f - lambda;
24018b0c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
{
24018b10:	b082      	sub	sp, #8
24018b12:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat UVnoise = tNoise_tick(&tr->whiteNoise);
24018b16:	f104 05cc 	add.w	r5, r4, #204	; 0xcc
{
24018b1a:	eef0 9a40 	vmov.f32	s19, s0
    Lfloat oneMinusLambda = 1.0f - lambda;
24018b1e:	ee79 8a60 	vsub.f32	s17, s18, s1
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
24018b22:	ed9f aacc 	vldr	s20, [pc, #816]	; 24018e54 <tract_compute+0x350>
    Lfloat UVnoise = tNoise_tick(&tr->whiteNoise);
24018b26:	4628      	mov	r0, r5
24018b28:	f7fc fe82 	bl	24015830 <tNoise_tick>
    UVnoise = tSVF_tick(&tr->aspirationNoiseFilt,UVnoise);
24018b2c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
24018b30:	f7f9 fb00 	bl	24012134 <tSVF_tick>
    in = fast_tanh5((UVnoise * tr->AnoiseGain) + (in * (1.0f - tr->AnoiseGain)));
24018b34:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
24018b38:	ee39 9a67 	vsub.f32	s18, s18, s15
24018b3c:	ee29 9a29 	vmul.f32	s18, s18, s19
24018b40:	eea7 9a80 	vfma.f32	s18, s15, s0
24018b44:	eeb0 0a49 	vmov.f32	s0, s18
24018b48:	f7fb fe82 	bl	24014850 <fast_tanh5>
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
24018b4c:	4628      	mov	r0, r5
24018b4e:	edd4 9a10 	vldr	s19, [r4, #64]	; 0x40
    in = fast_tanh5((UVnoise * tr->AnoiseGain) + (in * (1.0f - tr->AnoiseGain)));
24018b52:	eeb0 9a40 	vmov.f32	s18, s0
	_tract* tr = *t;
24018b56:	9401      	str	r4, [sp, #4]
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
24018b58:	f7fc fe6a 	bl	24015830 <tNoise_tick>
24018b5c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
24018b60:	ee20 0a0a 	vmul.f32	s0, s0, s20
24018b64:	f7f9 fae6 	bl	24012134 <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
24018b68:	ed94 1a36 	vldr	s2, [r4, #216]	; 0xd8
24018b6c:	edd4 0a34 	vldr	s1, [r4, #208]	; 0xd0
24018b70:	ee20 0a29 	vmul.f32	s0, s0, s19
24018b74:	a801      	add	r0, sp, #4
24018b76:	f7ff ff53 	bl	24018a20 <tract_addTurbulenceNoiseAtPosition>
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
24018b7a:	9d01      	ldr	r5, [sp, #4]
24018b7c:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
24018b80:	edd5 9a10 	vldr	s19, [r5, #64]	; 0x40
24018b84:	f7fc fe54 	bl	24015830 <tNoise_tick>
24018b88:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
24018b8c:	ee20 0a0a 	vmul.f32	s0, s0, s20
24018b90:	f7f9 fad0 	bl	24012134 <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
24018b94:	ed95 1a37 	vldr	s2, [r5, #220]	; 0xdc
24018b98:	ee29 0a80 	vmul.f32	s0, s19, s0
24018b9c:	edd5 0a35 	vldr	s1, [r5, #212]	; 0xd4
24018ba0:	a801      	add	r0, sp, #4
24018ba2:	f7ff ff3d 	bl	24018a20 <tract_addTurbulenceNoiseAtPosition>
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
24018ba6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
24018ba8:	edd4 7a27 	vldr	s15, [r4, #156]	; 0x9c
24018bac:	ed93 7a00 	vldr	s14, [r3]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
24018bb0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
24018bb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
24018bb6:	eea7 9a27 	vfma.f32	s18, s14, s15
24018bba:	ed82 9a00 	vstr	s18, [r2]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
24018bbe:	6862      	ldr	r2, [r4, #4]
24018bc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
24018bc2:	4413      	add	r3, r2
24018bc4:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
24018bc8:	6b62      	ldr	r2, [r4, #52]	; 0x34
24018bca:	eb01 0183 	add.w	r1, r1, r3, lsl #2
24018bce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
24018bd2:	edd1 7a00 	vldr	s15, [r1]
24018bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
24018bda:	edc2 7a01 	vstr	s15, [r2, #4]
    for(i = 1; i < tr->n; i++) {
24018bde:	6863      	ldr	r3, [r4, #4]
24018be0:	2b01      	cmp	r3, #1
24018be2:	dd2f      	ble.n	24018c44 <tract_compute+0x140>
24018be4:	2304      	movs	r3, #4
24018be6:	f04f 0c01 	mov.w	ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
24018bea:	6b25      	ldr	r5, [r4, #48]	; 0x30
    for(i = 1; i < tr->n; i++) {
24018bec:	f10c 0c01 	add.w	ip, ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
24018bf0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
24018bf2:	eb05 0e03 	add.w	lr, r5, r3
24018bf6:	4418      	add	r0, r3
24018bf8:	edde 7a00 	vldr	s15, [lr]
24018bfc:	ed90 6a00 	vldr	s12, [r0]
24018c00:	ee68 7a27 	vmul.f32	s15, s16, s15
        w = r * (tr->R[i - 1] + tr->L[i]);
24018c04:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
24018c08:	eee6 7a28 	vfma.f32	s15, s12, s17
        w = r * (tr->R[i - 1] + tr->L[i]);
24018c0c:	4419      	add	r1, r3
24018c0e:	441a      	add	r2, r3
24018c10:	ed51 6a01 	vldr	s13, [r1, #-4]
24018c14:	ed92 7a00 	vldr	s14, [r2]
        tr->junction_outR[i] = tr->R[i - 1] - w;
24018c18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        w = r * (tr->R[i - 1] + tr->L[i]);
24018c1a:	ee36 7a87 	vadd.f32	s14, s13, s14
        tr->junction_outR[i] = tr->R[i - 1] - w;
24018c1e:	441a      	add	r2, r3
24018c20:	eee7 6a67 	vfms.f32	s13, s14, s15
24018c24:	edc2 6a00 	vstr	s13, [r2]
        tr->junction_outL[i] = tr->L[i] + w;
24018c28:	6aa1      	ldr	r1, [r4, #40]	; 0x28
24018c2a:	6b62      	ldr	r2, [r4, #52]	; 0x34
24018c2c:	4419      	add	r1, r3
24018c2e:	441a      	add	r2, r3
24018c30:	3304      	adds	r3, #4
24018c32:	edd1 6a00 	vldr	s13, [r1]
24018c36:	eee7 6a27 	vfma.f32	s13, s14, s15
24018c3a:	edc2 6a00 	vstr	s13, [r2]
    for(i = 1; i < tr->n; i++) {
24018c3e:	6862      	ldr	r2, [r4, #4]
24018c40:	4562      	cmp	r2, ip
24018c42:	dcd2      	bgt.n	24018bea <tract_compute+0xe6>
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
24018c44:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
24018c46:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
24018c4a:	ed94 7a20 	vldr	s14, [r4, #128]	; 0x80
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
24018c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24018c52:	4413      	add	r3, r2
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
24018c54:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
24018c58:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
24018c5c:	6e62      	ldr	r2, [r4, #100]	; 0x64
24018c5e:	009b      	lsls	r3, r3, #2
24018c60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
24018c62:	edd2 5a00 	vldr	s11, [r2]
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
24018c66:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
24018c6a:	1d1a      	adds	r2, r3, #4
24018c6c:	6a65      	ldr	r5, [r4, #36]	; 0x24
24018c6e:	4410      	add	r0, r2
24018c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
24018c72:	441d      	add	r5, r3
24018c74:	edd0 7a00 	vldr	s15, [r0]
24018c78:	4411      	add	r1, r2
24018c7a:	ed95 6a00 	vldr	s12, [r5]
24018c7e:	ee77 7aa5 	vadd.f32	s15, s15, s11
24018c82:	ee77 5a26 	vadd.f32	s11, s14, s13
24018c86:	ee67 7aa5 	vmul.f32	s15, s15, s11
24018c8a:	eee6 7a07 	vfma.f32	s15, s12, s14
24018c8e:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
24018c92:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
24018c96:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
24018c9a:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
24018c9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
24018ca0:	6a61      	ldr	r1, [r4, #36]	; 0x24
24018ca2:	4410      	add	r0, r2
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
24018ca4:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
24018ca8:	4419      	add	r1, r3
24018caa:	ed90 6a00 	vldr	s12, [r0]
24018cae:	6e60      	ldr	r0, [r4, #100]	; 0x64
24018cb0:	edd1 7a00 	vldr	s15, [r1]
24018cb4:	ed90 5a00 	vldr	s10, [r0]
24018cb8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
24018cba:	ee77 5a26 	vadd.f32	s11, s14, s13
24018cbe:	ee77 7a85 	vadd.f32	s15, s15, s10
24018cc2:	4411      	add	r1, r2
24018cc4:	ee67 7aa5 	vmul.f32	s15, s15, s11
24018cc8:	eee6 7a07 	vfma.f32	s15, s12, s14
24018ccc:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
24018cd0:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
24018cd4:	6e61      	ldr	r1, [r4, #100]	; 0x64
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
24018cd6:	ee28 7a07 	vmul.f32	s14, s16, s14
24018cda:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
24018cde:	ed91 6a00 	vldr	s12, [r1]
24018ce2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
24018ce4:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
24018ce8:	6f20      	ldr	r0, [r4, #112]	; 0x70
24018cea:	4411      	add	r1, r2
24018cec:	6a62      	ldr	r2, [r4, #36]	; 0x24
24018cee:	441a      	add	r2, r3
24018cf0:	edd1 7a00 	vldr	s15, [r1]
24018cf4:	edd2 5a00 	vldr	s11, [r2]
24018cf8:	ee77 6a26 	vadd.f32	s13, s14, s13
24018cfc:	ee77 7aa5 	vadd.f32	s15, s15, s11
24018d00:	ee67 7aa6 	vmul.f32	s15, s15, s13
24018d04:	eee6 7a07 	vfma.f32	s15, s12, s14
24018d08:	edc0 7a00 	vstr	s15, [r0]
    for(i = 0; i < tr->n; i++) {
24018d0c:	6863      	ldr	r3, [r4, #4]
24018d0e:	2b00      	cmp	r3, #0
24018d10:	dd1d      	ble.n	24018d4e <tract_compute+0x24a>
24018d12:	2300      	movs	r3, #0
        tr->R[i] = (tr->junction_outR[i]*0.999f);
24018d14:	ed9f 7a50 	vldr	s14, [pc, #320]	; 24018e58 <tract_compute+0x354>
    for(i = 0; i < tr->n; i++) {
24018d18:	4618      	mov	r0, r3
        tr->R[i] = (tr->junction_outR[i]*0.999f);
24018d1a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
24018d1c:	469c      	mov	ip, r3
24018d1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    for(i = 0; i < tr->n; i++) {
24018d20:	3001      	adds	r0, #1
        tr->R[i] = (tr->junction_outR[i]*0.999f);
24018d22:	4419      	add	r1, r3
24018d24:	441a      	add	r2, r3
24018d26:	3304      	adds	r3, #4
24018d28:	edd1 7a00 	vldr	s15, [r1]
24018d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
24018d30:	edc2 7a00 	vstr	s15, [r2]
        tr->L[i] = (tr->junction_outL[i + 1]*0.999f);
24018d34:	6b61      	ldr	r1, [r4, #52]	; 0x34
24018d36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
24018d38:	4419      	add	r1, r3
24018d3a:	4462      	add	r2, ip
24018d3c:	edd1 7a00 	vldr	s15, [r1]
24018d40:	ee67 7a87 	vmul.f32	s15, s15, s14
24018d44:	edc2 7a00 	vstr	s15, [r2]
    for(i = 0; i < tr->n; i++) {
24018d48:	6862      	ldr	r2, [r4, #4]
24018d4a:	4282      	cmp	r2, r0
24018d4c:	dce5      	bgt.n	24018d1a <tract_compute+0x216>
    tr->L[0] = LEAF_clip(-1.5f, tr->L[0], 1.5f);
24018d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
24018d50:	eeb7 1a08 	vmov.f32	s2, #120	; 0x3fc00000  1.5
24018d54:	eebf 0a08 	vmov.f32	s0, #248	; 0xbfc00000 -1.5
    tr->L[tr->n - 1] = LEAF_clip(-1.5f, tr->L[tr->n - 1], 1.5f);
24018d58:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
    tr->L[0] = LEAF_clip(-1.5f, tr->L[0], 1.5f);
24018d5c:	edd6 0a00 	vldr	s1, [r6]
24018d60:	f7fb fd1e 	bl	240147a0 <LEAF_clip>
24018d64:	eef0 7a40 	vmov.f32	s15, s0
    tr->L[tr->n - 1] = LEAF_clip(-1.5f, tr->L[tr->n - 1], 1.5f);
24018d68:	eeb7 1a08 	vmov.f32	s2, #120	; 0x3fc00000  1.5
24018d6c:	eebf 0a08 	vmov.f32	s0, #248	; 0xbfc00000 -1.5
    tr->L[0] = LEAF_clip(-1.5f, tr->L[0], 1.5f);
24018d70:	edc6 7a00 	vstr	s15, [r6]
    tr->L[tr->n - 1] = LEAF_clip(-1.5f, tr->L[tr->n - 1], 1.5f);
24018d74:	6863      	ldr	r3, [r4, #4]
24018d76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
24018d78:	442b      	add	r3, r5
24018d7a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
24018d7e:	edd6 0a00 	vldr	s1, [r6]
24018d82:	f7fb fd0d 	bl	240147a0 <LEAF_clip>
24018d86:	ed86 0a00 	vstr	s0, [r6]
    tr->lip_output = tr->R[tr->n - 1];
24018d8a:	6863      	ldr	r3, [r4, #4]
24018d8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
24018d8e:	18e9      	adds	r1, r5, r3
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
24018d90:	6ca0      	ldr	r0, [r4, #72]	; 0x48
24018d92:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
    tr->lip_output = tr->R[tr->n - 1];
24018d96:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
24018d9a:	4405      	add	r5, r0
    tr->nose_junc_outL[tr->nose_length] =
24018d9c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    tr->lip_output = tr->R[tr->n - 1];
24018d9e:	6812      	ldr	r2, [r2, #0]
    tr->nose_junc_outL[tr->nose_length] =
24018da0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    tr->lip_output = tr->R[tr->n - 1];
24018da4:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
24018da8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
24018daa:	eb02 0285 	add.w	r2, r2, r5, lsl #2
24018dae:	edd2 7a00 	vldr	s15, [r2]
24018db2:	ee67 7a87 	vmul.f32	s15, s15, s14
    tr->nose_junc_outL[tr->nose_length] =
24018db6:	edc3 7a01 	vstr	s15, [r3, #4]
    for(i = 1; i < tr->nose_length; i++) {
24018dba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
24018dbc:	2a01      	cmp	r2, #1
24018dbe:	dd27      	ble.n	24018e10 <tract_compute+0x30c>
24018dc0:	2304      	movs	r3, #4
24018dc2:	f04f 0c01 	mov.w	ip, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
24018dc6:	6e60      	ldr	r0, [r4, #100]	; 0x64
    for(i = 1; i < tr->nose_length; i++) {
24018dc8:	f10c 0c01 	add.w	ip, ip, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
24018dcc:	6ea5      	ldr	r5, [r4, #104]	; 0x68
24018dce:	4418      	add	r0, r3
24018dd0:	eb05 0e03 	add.w	lr, r5, r3
24018dd4:	edd0 7a00 	vldr	s15, [r0]
24018dd8:	ed1e 7a01 	vldr	s14, [lr, #-4]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
24018ddc:	e9d4 211c 	ldrd	r2, r1, [r4, #112]	; 0x70
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
24018de0:	ee77 7a27 	vadd.f32	s15, s14, s15
24018de4:	4419      	add	r1, r3
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
24018de6:	441a      	add	r2, r3
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
24018de8:	edd1 6a00 	vldr	s13, [r1]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
24018dec:	eea6 7ae7 	vfms.f32	s14, s13, s15
24018df0:	ed82 7a00 	vstr	s14, [r2]
        tr->nose_junc_outL[i] = tr->noseL[i] + w;
24018df4:	6e61      	ldr	r1, [r4, #100]	; 0x64
24018df6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
24018df8:	4419      	add	r1, r3
24018dfa:	441a      	add	r2, r3
24018dfc:	3304      	adds	r3, #4
24018dfe:	ed91 7a00 	vldr	s14, [r1]
24018e02:	eea6 7aa7 	vfma.f32	s14, s13, s15
24018e06:	ed82 7a00 	vstr	s14, [r2]
    for(i = 1; i < tr->nose_length; i++) {
24018e0a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
24018e0c:	4562      	cmp	r2, ip
24018e0e:	dcda      	bgt.n	24018dc6 <tract_compute+0x2c2>
    for(i = 0; i < tr->nose_length; i++) {
24018e10:	2a00      	cmp	r2, #0
24018e12:	dd13      	ble.n	24018e3c <tract_compute+0x338>
24018e14:	2300      	movs	r3, #0
24018e16:	4618      	mov	r0, r3
        tr->noseR[i] = tr->nose_junc_outR[i];
24018e18:	6f21      	ldr	r1, [r4, #112]	; 0x70
24018e1a:	469c      	mov	ip, r3
24018e1c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    for(i = 0; i < tr->nose_length; i++) {
24018e1e:	3001      	adds	r0, #1
        tr->noseR[i] = tr->nose_junc_outR[i];
24018e20:	4419      	add	r1, r3
24018e22:	441a      	add	r2, r3
24018e24:	3304      	adds	r3, #4
24018e26:	6809      	ldr	r1, [r1, #0]
24018e28:	6011      	str	r1, [r2, #0]
        tr->noseL[i] = tr->nose_junc_outL[i + 1];
24018e2a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
24018e2c:	6e62      	ldr	r2, [r4, #100]	; 0x64
24018e2e:	4419      	add	r1, r3
24018e30:	4462      	add	r2, ip
24018e32:	6809      	ldr	r1, [r1, #0]
24018e34:	6011      	str	r1, [r2, #0]
    for(i = 0; i < tr->nose_length; i++) {
24018e36:	6ca2      	ldr	r2, [r4, #72]	; 0x48
24018e38:	4282      	cmp	r2, r0
24018e3a:	dced      	bgt.n	24018e18 <tract_compute+0x314>
    tr->nose_output = tr->noseR[tr->nose_length - 1];
24018e3c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
24018e3e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24018e42:	f853 3c04 	ldr.w	r3, [r3, #-4]
24018e46:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
}
24018e4a:	b002      	add	sp, #8
24018e4c:	ecbd 8b06 	vpop	{d8-d10}
24018e50:	bd70      	pop	{r4, r5, r6, pc}
24018e52:	bf00      	nop
24018e54:	3e4ccccd 	.word	0x3e4ccccd
24018e58:	3f7fbe77 	.word	0x3f7fbe77

24018e5c <tract_calculate_nose_reflections>:
	_tract* tr = *t;
24018e5c:	6803      	ldr	r3, [r0, #0]
    for(i = 0; i < tr->nose_length; i++) {
24018e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
24018e60:	2a00      	cmp	r2, #0
24018e62:	dd4e      	ble.n	24018f02 <tract_calculate_nose_reflections+0xa6>
24018e64:	2200      	movs	r2, #0
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
24018e66:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
24018e6a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
24018e6e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->nose_length; i++) {
24018e72:	3201      	adds	r2, #1
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
24018e74:	edd0 7a00 	vldr	s15, [r0]
24018e78:	ee67 7aa7 	vmul.f32	s15, s15, s15
24018e7c:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->nose_length; i++) {
24018e80:	6c99      	ldr	r1, [r3, #72]	; 0x48
24018e82:	4291      	cmp	r1, r2
24018e84:	dcef      	bgt.n	24018e66 <tract_calculate_nose_reflections+0xa>
    for(i = 1; i < tr->nose_length; i++) {
24018e86:	2901      	cmp	r1, #1
24018e88:	dd3b      	ble.n	24018f02 <tract_calculate_nose_reflections+0xa6>
24018e8a:	2000      	movs	r0, #0
24018e8c:	2201      	movs	r2, #1
    	if ((tempDiv <= 0.001f) &&  (tempDiv >= -0.001f))
24018e8e:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 24018f04 <tract_calculate_nose_reflections+0xa8>
24018e92:	eddf 4a1d 	vldr	s9, [pc, #116]	; 24018f08 <tract_calculate_nose_reflections+0xac>
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
24018e96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 24018f0c <tract_calculate_nose_reflections+0xb0>
{
24018e9a:	b500      	push	{lr}
    	Lfloat tempDiv = (tr->noseA[i-1] + tr->noseA[i]);
24018e9c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
24018e9e:	ea4f 0c82 	mov.w	ip, r2, lsl #2
24018ea2:	eb01 0e00 	add.w	lr, r1, r0
24018ea6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
24018eaa:	ed9e 7a00 	vldr	s14, [lr]
24018eae:	edd1 7a00 	vldr	s15, [r1]
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
24018eb2:	ee37 6a67 	vsub.f32	s12, s14, s15
    	Lfloat tempDiv = (tr->noseA[i-1] + tr->noseA[i]);
24018eb6:	ee77 7a87 	vadd.f32	s15, s15, s14
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
24018eba:	ee66 6a25 	vmul.f32	s13, s12, s11
    	if ((tempDiv <= 0.001f) &&  (tempDiv >= -0.001f))
24018ebe:	eef4 7a45 	vcmp.f32	s15, s10
24018ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018ec6:	db0f      	blt.n	24018ee8 <tract_calculate_nose_reflections+0x8c>
24018ec8:	eef4 7a64 	vcmp.f32	s15, s9
24018ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24018ed0:	d80a      	bhi.n	24018ee8 <tract_calculate_nose_reflections+0x8c>
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
24018ed2:	6f59      	ldr	r1, [r3, #116]	; 0x74
    for(i = 1; i < tr->nose_length; i++) {
24018ed4:	3201      	adds	r2, #1
24018ed6:	3004      	adds	r0, #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
24018ed8:	4461      	add	r1, ip
24018eda:	edc1 6a00 	vstr	s13, [r1]
    for(i = 1; i < tr->nose_length; i++) {
24018ede:	6c99      	ldr	r1, [r3, #72]	; 0x48
24018ee0:	428a      	cmp	r2, r1
24018ee2:	dbdb      	blt.n	24018e9c <tract_calculate_nose_reflections+0x40>
}
24018ee4:	f85d fb04 	ldr.w	pc, [sp], #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
24018ee8:	ee86 7a27 	vdiv.f32	s14, s12, s15
24018eec:	6f59      	ldr	r1, [r3, #116]	; 0x74
    for(i = 1; i < tr->nose_length; i++) {
24018eee:	3201      	adds	r2, #1
24018ef0:	3004      	adds	r0, #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) / tempDiv;
24018ef2:	4461      	add	r1, ip
24018ef4:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->nose_length; i++) {
24018ef8:	6c99      	ldr	r1, [r3, #72]	; 0x48
24018efa:	4291      	cmp	r1, r2
24018efc:	dcce      	bgt.n	24018e9c <tract_calculate_nose_reflections+0x40>
}
24018efe:	f85d fb04 	ldr.w	pc, [sp], #4
24018f02:	4770      	bx	lr
24018f04:	ba83126f 	.word	0xba83126f
24018f08:	3a83126f 	.word	0x3a83126f
24018f0c:	42c80000 	.word	0x42c80000

24018f10 <tract_initToPool>:
{
24018f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
24018f14:	ed2d 8b02 	vpush	{d8}
	_tMempool* m = *mp;
24018f18:	681b      	ldr	r3, [r3, #0]
{
24018f1a:	b082      	sub	sp, #8
24018f1c:	ee08 1a10 	vmov	s16, r1
24018f20:	4605      	mov	r5, r0
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
24018f22:	4619      	mov	r1, r3
24018f24:	20e8      	movs	r0, #232	; 0xe8
{
24018f26:	4617      	mov	r7, r2
	_tMempool* m = *mp;
24018f28:	9300      	str	r3, [sp, #0]
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
24018f2a:	f7fb ff19 	bl	24014d60 <mpool_calloc>
    tr->invN = 1.0f / n;
24018f2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat n = numTractSections;
24018f32:	eef8 7ac8 	vcvt.f32.s32	s15, s16
    tr->nose_length = n*0.636363636363636f; //28
24018f36:	eddf 5ad4 	vldr	s11, [pc, #848]	; 24019288 <tract_initToPool+0x378>
    tr->tip_start = n*0.727272727272727f;
24018f3a:	ed9f 6ad4 	vldr	s12, [pc, #848]	; 2401928c <tract_initToPool+0x37c>
	tr->turbuluencePointPosition[1] = n* 0.5f;
24018f3e:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    tr->blade_start = n*0.227272727272727f;
24018f42:	eddf 6ad3 	vldr	s13, [pc, #844]	; 24019290 <tract_initToPool+0x380>
	tr->turbuluencePointDiameter[0] = 1.5f;
24018f46:	eef7 8a08 	vmov.f32	s17, #120	; 0x3fc00000  1.5
    tr->invN = 1.0f / n;
24018f4a:	ee87 2a27 	vdiv.f32	s4, s14, s15
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
24018f4e:	eddf 0ad1 	vldr	s1, [pc, #836]	; 24019294 <tract_initToPool+0x384>
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
24018f52:	eddf 1ad1 	vldr	s3, [pc, #836]	; 24019298 <tract_initToPool+0x388>
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
24018f56:	4604      	mov	r4, r0
    tr->lip_start = n*0.886363636363636f;
24018f58:	ed9f 5ad0 	vldr	s10, [pc, #832]	; 2401929c <tract_initToPool+0x38c>
    tr->glottal_reflection = 0.75f;
24018f5c:	f04f 5e7d 	mov.w	lr, #1061158912	; 0x3f400000
	tr->mempool = m;
24018f60:	9b00      	ldr	r3, [sp, #0]
	tr->turbuluencePointPosition[0] = n* 0.45f;
24018f62:	ed9f 4acf 	vldr	s8, [pc, #828]	; 240192a0 <tract_initToPool+0x390>
    tr->nose_length = n*0.636363636363636f; //28
24018f66:	ee67 5aa5 	vmul.f32	s11, s15, s11
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
24018f6a:	6028      	str	r0, [r5, #0]
    tr->tip_start = n*0.727272727272727f;
24018f6c:	ee27 6a86 	vmul.f32	s12, s15, s12
	tr->mempool = m;
24018f70:	6003      	str	r3, [r0, #0]
    tr->blade_start = n*0.227272727272727f;
24018f72:	ee67 6aa6 	vmul.f32	s13, s15, s13
    tr->reflection_left = 0.0f;
24018f76:	2300      	movs	r3, #0
    tr->nose_length = n*0.636363636363636f; //28
24018f78:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    tr->lip_reflection = -0.85f;
24018f7c:	f8df c350 	ldr.w	ip, [pc, #848]	; 240192d0 <tract_initToPool+0x3c0>
    tr->tip_start = n*0.727272727272727f;
24018f80:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->movement_speed = 200.0f;
24018f84:	4ac7      	ldr	r2, [pc, #796]	; (240192a4 <tract_initToPool+0x394>)
    tr->blade_start = n*0.227272727272727f;
24018f86:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24018f8a:	00bd      	lsls	r5, r7, #2
    tr->nose_start = (n - tr->nose_length) + 1; //17
24018f8c:	ee77 4a87 	vadd.f32	s9, s15, s14
	LEAF* leaf = m->leaf;
24018f90:	9900      	ldr	r1, [sp, #0]
    tr->nose_start = (n - tr->nose_length) + 1; //17
24018f92:	eef8 2ae5 	vcvt.f32.s32	s5, s11
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
24018f96:	9001      	str	r0, [sp, #4]
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
24018f98:	eeb8 3ac6 	vcvt.f32.s32	s6, s12
    tr->last_obstruction = -1;
24018f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
24018fa0:	eef8 3ae6 	vcvt.f32.s32	s7, s13
    tr->velum_target = 0.01f;
24018fa4:	f8df 832c 	ldr.w	r8, [pc, #812]	; 240192d4 <tract_initToPool+0x3c4>
    tr->nose_start = (n - tr->nose_length) + 1; //17
24018fa8:	ee74 4ae2 	vsub.f32	s9, s9, s5
	LEAF* leaf = m->leaf;
24018fac:	684e      	ldr	r6, [r1, #4]
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
24018fae:	eea7 3ae0 	vfms.f32	s6, s15, s1
    tr->glottal_reflection = 0.75f;
24018fb2:	f8c4 e09c 	str.w	lr, [r4, #156]	; 0x9c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
24018fb6:	eee7 3aa1 	vfma.f32	s7, s15, s3
    tr->lip_reflection = -0.85f;
24018fba:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
    tr->lip_start = n*0.886363636363636f;
24018fbe:	ee27 5a85 	vmul.f32	s10, s15, s10
    tr->movement_speed = 200.0f;
24018fc2:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    tr->n = n; //44
24018fc6:	eefd 1ae7 	vcvt.s32.f32	s3, s15
    tr->invN = 1.0f / n;
24018fca:	ed84 2a02 	vstr	s4, [r4, #8]
	tr->turbuluencePointPosition[0] = n* 0.45f;
24018fce:	ee27 4a84 	vmul.f32	s8, s15, s8
    tr->nose_length = n*0.636363636363636f; //28
24018fd2:	edc4 5a12 	vstr	s11, [r4, #72]	; 0x48
    tr->nose_start = (n - tr->nose_length) + 1; //17
24018fd6:	eefd 4ae4 	vcvt.s32.f32	s9, s9
    tr->tip_start = n*0.727272727272727f;
24018fda:	ed84 6a14 	vstr	s12, [r4, #80]	; 0x50
	tr->turbuluencePointPosition[1] = n* 0.5f;
24018fde:	ee67 7a81 	vmul.f32	s15, s15, s2
    tr->n = n; //44
24018fe2:	edc4 1a01 	vstr	s3, [r4, #4]
    tr->lip_start = n*0.886363636363636f;
24018fe6:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    tr->blade_start = n*0.227272727272727f;
24018fea:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
    tr->nose_start = (n - tr->nose_length) + 1; //17
24018fee:	edc4 4a13 	vstr	s9, [r4, #76]	; 0x4c
    Lfloat invNoseLength = 1.0f / tr->nose_length;
24018ff2:	ee87 8a22 	vdiv.f32	s16, s14, s5
    tr->TnoiseGain = 1.0f;
24018ff6:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    tr->lip_start = n*0.886363636363636f;
24018ffa:	ed84 5a16 	vstr	s10, [r4, #88]	; 0x58
    tr->AnoiseGain = 1.0f;
24018ffe:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
    tr->diameterScale = 1.0f;
24019002:	ed84 7a2f 	vstr	s14, [r4, #188]	; 0xbc
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
24019006:	ed84 3a17 	vstr	s6, [r4, #92]	; 0x5c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
2401900a:	edc4 3a18 	vstr	s7, [r4, #96]	; 0x60
    tr->reflection_left = 0.0f;
2401900e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    tr->reflection_right = 0.0f;
24019012:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tr->reflection_nose = 0.0f;
24019016:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    tr->new_reflection_left = 0.0f;
2401901a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    tr->new_reflection_right= 0.0f;
2401901e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    tr->new_reflection_nose = 0.0f;
24019022:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    tr->lip_output = 0.0f;
24019026:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    tr->nose_output = 0.0f;
2401902a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    tr->last_obstruction = -1;
2401902e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24019032:	4628      	mov	r0, r5
    tr->maxNumTractSections = maxNumTractSections;
24019034:	6127      	str	r7, [r4, #16]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
24019036:	1d2f      	adds	r7, r5, #4
    tr->velum_target = 0.01f;
24019038:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
	tr->turbuluencePointPosition[0] = n* 0.45f;
2401903c:	ed84 4a34 	vstr	s8, [r4, #208]	; 0xd0
	tr->turbuluencePointPosition[1] = n* 0.5f;
24019040:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
	tr->turbuluencePointDiameter[0] = 1.5f;
24019044:	edc4 8a36 	vstr	s17, [r4, #216]	; 0xd8
	tr->turbuluencePointDiameter[1] = 1.5f;
24019048:	edc4 8a37 	vstr	s17, [r4, #220]	; 0xdc
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401904c:	f7fb fe88 	bl	24014d60 <mpool_calloc>
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24019050:	9900      	ldr	r1, [sp, #0]
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24019052:	6160      	str	r0, [r4, #20]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24019054:	4628      	mov	r0, r5
24019056:	f7fb fe83 	bl	24014d60 <mpool_calloc>
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401905a:	9900      	ldr	r1, [sp, #0]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401905c:	61a0      	str	r0, [r4, #24]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401905e:	4628      	mov	r0, r5
24019060:	f7fb fe7e 	bl	24014d60 <mpool_calloc>
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24019064:	9900      	ldr	r1, [sp, #0]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24019066:	61e0      	str	r0, [r4, #28]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24019068:	4628      	mov	r0, r5
2401906a:	f7fb fe79 	bl	24014d60 <mpool_calloc>
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401906e:	9900      	ldr	r1, [sp, #0]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24019070:	6220      	str	r0, [r4, #32]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24019072:	4628      	mov	r0, r5
24019074:	f7fb fe74 	bl	24014d60 <mpool_calloc>
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24019078:	9900      	ldr	r1, [sp, #0]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401907a:	62a0      	str	r0, [r4, #40]	; 0x28
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
2401907c:	4628      	mov	r0, r5
2401907e:	f7fb fe6f 	bl	24014d60 <mpool_calloc>
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
24019082:	9900      	ldr	r1, [sp, #0]
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24019084:	6260      	str	r0, [r4, #36]	; 0x24
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
24019086:	4638      	mov	r0, r7
24019088:	f7fb fe6a 	bl	24014d60 <mpool_calloc>
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401908c:	9900      	ldr	r1, [sp, #0]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401908e:	62e0      	str	r0, [r4, #44]	; 0x2c
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
24019090:	4638      	mov	r0, r7
24019092:	f7fb fe65 	bl	24014d60 <mpool_calloc>
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
24019096:	9900      	ldr	r1, [sp, #0]
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
24019098:	6320      	str	r0, [r4, #48]	; 0x30
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
2401909a:	4638      	mov	r0, r7
2401909c:	f7fb fe60 	bl	24014d60 <mpool_calloc>
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240190a0:	9900      	ldr	r1, [sp, #0]
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240190a2:	6360      	str	r0, [r4, #52]	; 0x34
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240190a4:	4638      	mov	r0, r7
240190a6:	f7fb fe5b 	bl	24014d60 <mpool_calloc>
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190aa:	9900      	ldr	r1, [sp, #0]
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240190ac:	63a0      	str	r0, [r4, #56]	; 0x38
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190ae:	4628      	mov	r0, r5
240190b0:	f7fb fe56 	bl	24014d60 <mpool_calloc>
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190b4:	9900      	ldr	r1, [sp, #0]
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190b6:	63e0      	str	r0, [r4, #60]	; 0x3c
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190b8:	4628      	mov	r0, r5
240190ba:	f7fb fe51 	bl	24014d60 <mpool_calloc>
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190be:	9900      	ldr	r1, [sp, #0]
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190c0:	6660      	str	r0, [r4, #100]	; 0x64
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190c2:	4628      	mov	r0, r5
240190c4:	f7fb fe4c 	bl	24014d60 <mpool_calloc>
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240190c8:	9900      	ldr	r1, [sp, #0]
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190ca:	66a0      	str	r0, [r4, #104]	; 0x68
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240190cc:	4638      	mov	r0, r7
240190ce:	f7fb fe47 	bl	24014d60 <mpool_calloc>
240190d2:	4603      	mov	r3, r0
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240190d4:	9900      	ldr	r1, [sp, #0]
240190d6:	4638      	mov	r0, r7
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240190d8:	66e3      	str	r3, [r4, #108]	; 0x6c
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240190da:	f7fb fe41 	bl	24014d60 <mpool_calloc>
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190de:	9900      	ldr	r1, [sp, #0]
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
240190e0:	6720      	str	r0, [r4, #112]	; 0x70
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190e2:	4628      	mov	r0, r5
240190e4:	f7fb fe3c 	bl	24014d60 <mpool_calloc>
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190e8:	9900      	ldr	r1, [sp, #0]
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190ea:	67a0      	str	r0, [r4, #120]	; 0x78
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190ec:	4628      	mov	r0, r5
240190ee:	f7fb fe37 	bl	24014d60 <mpool_calloc>
240190f2:	4603      	mov	r3, r0
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190f4:	9900      	ldr	r1, [sp, #0]
240190f6:	4628      	mov	r0, r5
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190f8:	6763      	str	r3, [r4, #116]	; 0x74
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
240190fa:	f7fb fe31 	bl	24014d60 <mpool_calloc>
    for(i = 0; i < tr->n; i++) {
240190fe:	6863      	ldr	r3, [r4, #4]
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
24019100:	67e0      	str	r0, [r4, #124]	; 0x7c
    for(i = 0; i < tr->n; i++) {
24019102:	2b00      	cmp	r3, #0
24019104:	dd3f      	ble.n	24019186 <tract_initToPool+0x276>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
24019106:	eef1 4a0c 	vmov.f32	s9, #28	; 0x40e00000  7.0
    for(i = 0; i < tr->n; i++) {
2401910a:	2200      	movs	r2, #0
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
2401910c:	eebe 5a00 	vmov.f32	s10, #224	; 0xbf000000 -0.5
            diameter = 0.6f;
24019110:	ed9f 6a65 	vldr	s12, [pc, #404]	; 240192a8 <tract_initToPool+0x398>
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
24019114:	eef2 5a08 	vmov.f32	s11, #40	; 0x41400000  12.0
            diameter = 1.5f;
24019118:	ed9f 4a64 	vldr	s8, [pc, #400]	; 240192ac <tract_initToPool+0x39c>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
2401911c:	ee07 3a90 	vmov	s15, r3
24019120:	edd4 6a02 	vldr	s13, [r4, #8]
            diameter = 0.6f;
24019124:	eeb0 7a46 	vmov.f32	s14, s12
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
24019128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401912c:	ee67 7aa6 	vmul.f32	s15, s15, s13
24019130:	eef0 6a45 	vmov.f32	s13, s10
24019134:	eee7 6aa4 	vfma.f32	s13, s15, s9
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
24019138:	ee67 7aa5 	vmul.f32	s15, s15, s11
2401913c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
24019140:	eefd 6ae6 	vcvt.s32.f32	s13, s13
24019144:	ee16 3a90 	vmov	r3, s13
24019148:	429a      	cmp	r2, r3
2401914a:	db04      	blt.n	24019156 <tract_initToPool+0x246>
            diameter = 1.5f;
2401914c:	ee17 3a90 	vmov	r3, s15
24019150:	429a      	cmp	r2, r3
24019152:	fe28 7a84 	vselge.f32	s14, s17, s8
            tr->new_diameter[i] = diameter;
24019156:	6a23      	ldr	r3, [r4, #32]
24019158:	eb03 0382 	add.w	r3, r3, r2, lsl #2
2401915c:	ed83 7a00 	vstr	s14, [r3]
            tr->target_diameter[i] =
24019160:	69e3      	ldr	r3, [r4, #28]
24019162:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24019166:	ed83 7a00 	vstr	s14, [r3]
            tr->rest_diameter[i] =
2401916a:	69a3      	ldr	r3, [r4, #24]
2401916c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
24019170:	ed83 7a00 	vstr	s14, [r3]
        tr->diameter[i] =
24019174:	6963      	ldr	r3, [r4, #20]
24019176:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
2401917a:	3201      	adds	r2, #1
        tr->diameter[i] =
2401917c:	ed83 7a00 	vstr	s14, [r3]
    for(i = 0; i < tr->n; i++) {
24019180:	6863      	ldr	r3, [r4, #4]
24019182:	429a      	cmp	r2, r3
24019184:	dbca      	blt.n	2401911c <tract_initToPool+0x20c>
	for(i = 0; i < tr->nose_length; i++) {
24019186:	6ca3      	ldr	r3, [r4, #72]	; 0x48
24019188:	2b00      	cmp	r3, #0
2401918a:	dd2f      	ble.n	240191ec <tract_initToPool+0x2dc>
		if(d < 1.0f) {
2401918c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	for(i = 0; i < tr->nose_length; i++) {
24019190:	2300      	movs	r3, #0
			diameter = 0.5f + 1.5f*(2.0f-d);
24019192:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
		diameter = MIN(diameter, 1.9f);
24019196:	ed9f 4a46 	vldr	s8, [pc, #280]	; 240192b0 <tract_initToPool+0x3a0>
			diameter = 0.5f + 1.5f*(2.0f-d);
2401919a:	eef7 3a08 	vmov.f32	s7, #120	; 0x3fc00000  1.5
			diameter = 0.4f + 1.6f * d;
2401919e:	eddf 4a45 	vldr	s9, [pc, #276]	; 240192b4 <tract_initToPool+0x3a4>
240191a2:	ed9f 5a45 	vldr	s10, [pc, #276]	; 240192b8 <tract_initToPool+0x3a8>
		d = 2.0f * ((Lfloat)i * invNoseLength);
240191a6:	ee07 3a90 	vmov	s15, r3
			diameter = 0.4f + 1.6f * d;
240191aa:	eef0 6a45 	vmov.f32	s13, s10
		tr->nose_diameter[i] = diameter;
240191ae:	6fa2      	ldr	r2, [r4, #120]	; 0x78
		d = 2.0f * ((Lfloat)i * invNoseLength);
240191b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
240191b4:	ee67 7a88 	vmul.f32	s15, s15, s16
240191b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
		if(d < 1.0f) {
240191bc:	eef4 7ac6 	vcmpe.f32	s15, s12
			diameter = 0.5f + 1.5f*(2.0f-d);
240191c0:	eef0 7a46 	vmov.f32	s15, s12
240191c4:	ee73 5a47 	vsub.f32	s11, s6, s14
		if(d < 1.0f) {
240191c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.4f + 1.6f * d;
240191cc:	eee7 6a24 	vfma.f32	s13, s14, s9
			diameter = 0.5f + 1.5f*(2.0f-d);
240191d0:	eee5 7aa3 	vfma.f32	s15, s11, s7
		if(d < 1.0f) {
240191d4:	f140 80af 	bpl.w	24019336 <tract_initToPool+0x426>
		tr->nose_diameter[i] = diameter;
240191d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
240191dc:	fec6 6ac4 	vminnm.f32	s13, s13, s8
	for(i = 0; i < tr->nose_length; i++) {
240191e0:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
240191e2:	edc2 6a00 	vstr	s13, [r2]
	for(i = 0; i < tr->nose_length; i++) {
240191e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
240191e8:	429a      	cmp	r2, r3
240191ea:	dcdc      	bgt.n	240191a6 <tract_initToPool+0x296>
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.7f, &m);
240191ec:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
240191f0:	eddf 0a32 	vldr	s1, [pc, #200]	; 240192bc <tract_initToPool+0x3ac>
240191f4:	ed9f 0a32 	vldr	s0, [pc, #200]	; 240192c0 <tract_initToPool+0x3b0>
240191f8:	2102      	movs	r1, #2
240191fa:	466a      	mov	r2, sp
        tr->tpool->pool[i]->is_free = 1;
240191fc:	2701      	movs	r7, #1
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.7f, &m);
240191fe:	f7f8 ff0d 	bl	2401201c <tSVF_initToPool>
	tSVF_initToPool(&tr->fricativeNoiseFilt[1], SVFTypeBandpass, 990.0f, 0.7f, &m);
24019202:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
24019206:	466a      	mov	r2, sp
24019208:	eddf 0a2c 	vldr	s1, [pc, #176]	; 240192bc <tract_initToPool+0x3ac>
2401920c:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 240192c4 <tract_initToPool+0x3b4>
24019210:	2102      	movs	r1, #2
24019212:	f7f8 ff03 	bl	2401201c <tSVF_initToPool>
	tSVF_initToPool(&tr->aspirationNoiseFilt, SVFTypeBandpass, 500.0f, 0.7f, &m);
24019216:	eddf 0a29 	vldr	s1, [pc, #164]	; 240192bc <tract_initToPool+0x3ac>
2401921a:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 240192c8 <tract_initToPool+0x3b8>
2401921e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
24019222:	466a      	mov	r2, sp
24019224:	2102      	movs	r1, #2
24019226:	f7f8 fef9 	bl	2401201c <tSVF_initToPool>
	tNoise_initToPool(&tr->whiteNoise, WhiteNoise, &m);
2401922a:	466a      	mov	r2, sp
2401922c:	2100      	movs	r1, #0
2401922e:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
24019232:	f7fc fae9 	bl	24015808 <tNoise_initToPool>
    tract_calculate_reflections(&tr);
24019236:	a801      	add	r0, sp, #4
24019238:	f7ff f946 	bl	240184c8 <tract_calculate_reflections>
    tract_calculate_nose_reflections(&tr);
2401923c:	a801      	add	r0, sp, #4
2401923e:	f7ff fe0d 	bl	24018e5c <tract_calculate_nose_reflections>
    tr->nose_diameter[0] = tr->velum_target;
24019242:	9d01      	ldr	r5, [sp, #4]
    tr->block_time = 64.0f / leaf->sampleRate;
24019244:	ed9f 6a21 	vldr	s12, [pc, #132]	; 240192cc <tract_initToPool+0x3bc>
    tr->T = 1.0f / leaf->sampleRate;
24019248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    tr->nose_diameter[0] = tr->velum_target;
2401924c:	6fab      	ldr	r3, [r5, #120]	; 0x78
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
2401924e:	201c      	movs	r0, #28
    tr->nose_diameter[0] = tr->velum_target;
24019250:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
24019254:	601a      	str	r2, [r3, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
24019256:	ed96 7a00 	vldr	s14, [r6]
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
2401925a:	9900      	ldr	r1, [sp, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
2401925c:	eec6 7a07 	vdiv.f32	s15, s12, s14
24019260:	edc5 7a2e 	vstr	s15, [r5, #184]	; 0xb8
    tr->T = 1.0f / leaf->sampleRate;
24019264:	ed96 7a00 	vldr	s14, [r6]
        tr->tpool->pool[i]->time_alive = 0;
24019268:	2600      	movs	r6, #0
    tr->T = 1.0f / leaf->sampleRate;
2401926a:	eec6 7a87 	vdiv.f32	s15, s13, s14
2401926e:	edc5 7a39 	vstr	s15, [r5, #228]	; 0xe4
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
24019272:	f7fb fd11 	bl	24014c98 <mpool_alloc>
    tr->tpool->size = 0;
24019276:	2300      	movs	r3, #0
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
24019278:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
    for(i = 0; i < MAX_TRANSIENTS; i++) {
2401927c:	461c      	mov	r4, r3
    tr->tpool->size = 0;
2401927e:	6143      	str	r3, [r0, #20]
    tr->tpool->next_free = 0;
24019280:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
24019284:	6193      	str	r3, [r2, #24]
24019286:	e027      	b.n	240192d8 <tract_initToPool+0x3c8>
24019288:	3f22e8ba 	.word	0x3f22e8ba
2401928c:	3f3a2e8c 	.word	0x3f3a2e8c
24019290:	3e68ba2f 	.word	0x3e68ba2f
24019294:	3d8ba2e9 	.word	0x3d8ba2e9
24019298:	3d3a2e8c 	.word	0x3d3a2e8c
2401929c:	3f62e8ba 	.word	0x3f62e8ba
240192a0:	3ee66666 	.word	0x3ee66666
240192a4:	43480000 	.word	0x43480000
240192a8:	3f19999a 	.word	0x3f19999a
240192ac:	3f8ccccd 	.word	0x3f8ccccd
240192b0:	3ff33333 	.word	0x3ff33333
240192b4:	3fcccccd 	.word	0x3fcccccd
240192b8:	3ecccccd 	.word	0x3ecccccd
240192bc:	3f333333 	.word	0x3f333333
240192c0:	447c8000 	.word	0x447c8000
240192c4:	44778000 	.word	0x44778000
240192c8:	43fa0000 	.word	0x43fa0000
240192cc:	42800000 	.word	0x42800000
240192d0:	bf59999a 	.word	0xbf59999a
240192d4:	3c23d70a 	.word	0x3c23d70a
    	tr->tpool->pool[i] = (_transient*) mpool_alloc(sizeof(_transient), m);
240192d8:	f8d5 80e0 	ldr.w	r8, [r5, #224]	; 0xe0
240192dc:	2020      	movs	r0, #32
240192de:	9900      	ldr	r1, [sp, #0]
240192e0:	f7fb fcda 	bl	24014c98 <mpool_alloc>
240192e4:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
        tr->tpool->pool[i]->is_free = 1;
240192e8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
        tr->tpool->pool[i]->position = 0;
240192ec:	2200      	movs	r2, #0
        tr->tpool->pool[i]->is_free = 1;
240192ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
240192f2:	751f      	strb	r7, [r3, #20]
        tr->tpool->pool[i]->id = i;
240192f4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
240192f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
240192fc:	619c      	str	r4, [r3, #24]
        tr->tpool->pool[i]->position = 0;
240192fe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
24019302:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
24019306:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
24019308:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
2401930c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
24019310:	605e      	str	r6, [r3, #4]
        tr->tpool->pool[i]->strength = 0;
24019312:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
24019316:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
2401931a:	60de      	str	r6, [r3, #12]
        tr->tpool->pool[i]->exponent = 0;
2401931c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
24019320:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
24019324:	3401      	adds	r4, #1
24019326:	2c04      	cmp	r4, #4
        tr->tpool->pool[i]->exponent = 0;
24019328:	611e      	str	r6, [r3, #16]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
2401932a:	d1d5      	bne.n	240192d8 <tract_initToPool+0x3c8>
}
2401932c:	b002      	add	sp, #8
2401932e:	ecbd 8b02 	vpop	{d8}
24019332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tr->nose_diameter[i] = diameter;
24019336:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
2401933a:	fec7 7ac4 	vminnm.f32	s15, s15, s8
	for(i = 0; i < tr->nose_length; i++) {
2401933e:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
24019340:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < tr->nose_length; i++) {
24019344:	6ca2      	ldr	r2, [r4, #72]	; 0x48
24019346:	429a      	cmp	r2, r3
24019348:	f73f af2d 	bgt.w	240191a6 <tract_initToPool+0x296>
2401934c:	e74e      	b.n	240191ec <tract_initToPool+0x2dc>
2401934e:	bf00      	nop

24019350 <tVoc_init>:
}



void    tVoc_init         (tVoc* const voc, int numTractSections, int maxNumTractSections, LEAF* const leaf)
{
24019350:	b5f0      	push	{r4, r5, r6, r7, lr}
	tVoc_initToPool   (voc, numTractSections, maxNumTractSections, &leaf->mempool);
}

void    tVoc_initToPool   (tVoc* const voc, int numTractSections, int maxNumTractSections, tMempool* const mp)
{
	_tMempool* m = *mp;
24019352:	699d      	ldr	r5, [r3, #24]
{
24019354:	b085      	sub	sp, #20
24019356:	4607      	mov	r7, r0
24019358:	460e      	mov	r6, r1
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
2401935a:	2018      	movs	r0, #24
2401935c:	4629      	mov	r1, r5
{
2401935e:	9201      	str	r2, [sp, #4]
	_tMempool* m = *mp;
24019360:	9502      	str	r5, [sp, #8]
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
24019362:	f7fb fc99 	bl	24014c98 <mpool_alloc>
24019366:	4604      	mov	r4, r0
24019368:	6038      	str	r0, [r7, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
2401936a:	4629      	mov	r1, r5
	v->mempool = m;
2401936c:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
2401936e:	203c      	movs	r0, #60	; 0x3c
24019370:	f7fb fcf6 	bl	24014d60 <mpool_calloc>
24019374:	6060      	str	r0, [r4, #4]
24019376:	4603      	mov	r3, r0
	glot->mempool = m;
24019378:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
2401937a:	9003      	str	r0, [sp, #12]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
2401937c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	glot->freq = 140.0f; /* 140Hz frequency by default */
24019380:	480d      	ldr	r0, [pc, #52]	; (240193b8 <tVoc_init+0x68>)
	LEAF* leaf = glot->mempool->leaf;
24019382:	6869      	ldr	r1, [r5, #4]
	glot->freq = 140.0f; /* 140Hz frequency by default */
24019384:	6058      	str	r0, [r3, #4]
    glot->tenseness = 0.6f; /* value between 0 and 1 */
24019386:	480d      	ldr	r0, [pc, #52]	; (240193bc <tVoc_init+0x6c>)
24019388:	6098      	str	r0, [r3, #8]
    glottis_setup_waveform(&glot);
2401938a:	a803      	add	r0, sp, #12
    glot->T = 1.0f/leaf->sampleRate; /* big T */
2401938c:	ed91 7a00 	vldr	s14, [r1]
    glot->time_in_waveform = 0;
24019390:	2100      	movs	r1, #0
    glot->T = 1.0f/leaf->sampleRate; /* big T */
24019392:	eec6 7a87 	vdiv.f32	s15, s13, s14
    glot->time_in_waveform = 0;
24019396:	6159      	str	r1, [r3, #20]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
24019398:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    glottis_setup_waveform(&glot);
2401939c:	f7fe ff60 	bl	24018260 <glottis_setup_waveform>
	glottis_initToPool(&v->glot, &m); /* initialize glottis */
	tract_initToPool(&v->tr, numTractSections, maxNumTractSections, &m); /* initialize vocal tract */
240193a0:	ab02      	add	r3, sp, #8
240193a2:	9a01      	ldr	r2, [sp, #4]
240193a4:	4631      	mov	r1, r6
240193a6:	f104 0008 	add.w	r0, r4, #8
240193aa:	f7ff fdb1 	bl	24018f10 <tract_initToPool>
	v->counter = 0;
240193ae:	2300      	movs	r3, #0
240193b0:	6123      	str	r3, [r4, #16]
}
240193b2:	b005      	add	sp, #20
240193b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
240193b6:	bf00      	nop
240193b8:	430c0000 	.word	0x430c0000
240193bc:	3f19999a 	.word	0x3f19999a

240193c0 <tVoc_tick>:
	//mpool_free((char*)v->buf, v->mempool);
	mpool_free((char*)v, v->mempool);
}

Lfloat   tVoc_tick         (tVoc* const voc)
{
240193c0:	b538      	push	{r3, r4, r5, lr}
240193c2:	ed2d 8b04 	vpush	{d8-d9}
	_tVoc* v = *voc;
240193c6:	6804      	ldr	r4, [r0, #0]
	Lfloat vocal_output, glot;
	Lfloat lambda1,lambda2;

	if(v->counter == 0) {
240193c8:	6923      	ldr	r3, [r4, #16]
		tract_reshape(&v->tr);
240193ca:	f104 0508 	add.w	r5, r4, #8
	if(v->counter == 0) {
240193ce:	b323      	cbz	r3, 2401941a <tVoc_tick+0x5a>
		tract_calculate_reflections(&v->tr);
	}

	//Lfloat finalOutput = v->buf[v->counter];
	vocal_output = 0.0f;
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
240193d0:	ee07 3a90 	vmov	s15, r3
240193d4:	eddf 9a21 	vldr	s19, [pc, #132]	; 2401945c <tVoc_tick+0x9c>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
	glot = glottis_compute(&v->glot);
240193d8:	1d20      	adds	r0, r4, #4
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
240193da:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
	glot = glottis_compute(&v->glot);
240193de:	f7fe fffb 	bl	240183d8 <glottis_compute>

	tract_compute(&v->tr, glot, lambda1);
240193e2:	4628      	mov	r0, r5
	glot = glottis_compute(&v->glot);
240193e4:	eeb0 9a40 	vmov.f32	s18, s0
	tract_compute(&v->tr, glot, lambda1);
240193e8:	ee68 0a29 	vmul.f32	s1, s16, s19
240193ec:	f7ff fb8a 	bl	24018b04 <tract_compute>
	vocal_output += v->tr->lip_output + v->tr->nose_output;

	if (v->doubleCompute)
240193f0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
	vocal_output += v->tr->lip_output + v->tr->nose_output;
240193f4:	edd3 8a2c 	vldr	s17, [r3, #176]	; 0xb0
240193f8:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
240193fc:	ee78 8aa7 	vadd.f32	s17, s17, s15
	if (v->doubleCompute)
24019400:	b99a      	cbnz	r2, 2401942a <tVoc_tick+0x6a>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
		vocal_output *= 0.125f;
	}
	else
	{
		vocal_output *= 0.25f;
24019402:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
24019406:	ee28 0aa7 	vmul.f32	s0, s17, s15
	}

	v->counter = (v->counter + 1) & 63;
2401940a:	6923      	ldr	r3, [r4, #16]
2401940c:	3301      	adds	r3, #1
2401940e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24019412:	6123      	str	r3, [r4, #16]
	return vocal_output;
}
24019414:	ecbd 8b04 	vpop	{d8-d9}
24019418:	bd38      	pop	{r3, r4, r5, pc}
		tract_reshape(&v->tr);
2401941a:	4628      	mov	r0, r5
2401941c:	f7ff fa7e 	bl	2401891c <tract_reshape>
		tract_calculate_reflections(&v->tr);
24019420:	4628      	mov	r0, r5
24019422:	f7ff f851 	bl	240184c8 <tract_calculate_reflections>
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
24019426:	6923      	ldr	r3, [r4, #16]
24019428:	e7d2      	b.n	240193d0 <tVoc_tick+0x10>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
2401942a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		tract_compute(&v->tr, glot, lambda2);
2401942e:	4628      	mov	r0, r5
24019430:	eeb0 0a49 	vmov.f32	s0, s18
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
24019434:	ee78 0a27 	vadd.f32	s1, s16, s15
		tract_compute(&v->tr, glot, lambda2);
24019438:	ee60 0aa9 	vmul.f32	s1, s1, s19
2401943c:	f7ff fb62 	bl	24018b04 <tract_compute>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
24019440:	68a3      	ldr	r3, [r4, #8]
		vocal_output *= 0.125f;
24019442:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
		vocal_output += v->tr->lip_output + v->tr->nose_output;
24019446:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
2401944a:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
2401944e:	ee77 7aa6 	vadd.f32	s15, s15, s13
24019452:	ee77 7aa8 	vadd.f32	s15, s15, s17
		vocal_output *= 0.125f;
24019456:	ee27 0a87 	vmul.f32	s0, s15, s14
2401945a:	e7d6      	b.n	2401940a <tVoc_tick+0x4a>
2401945c:	3c800000 	.word	0x3c800000

24019460 <tVoc_setDoubleComputeFlag>:
    *out = vocal_output * 0.125;
    v->counter = (v->counter + 1) & 64;
}
void    tVoc_setDoubleComputeFlag(tVoc* const voc, int doubleCompute)
{
	_tVoc* v = *voc;
24019460:	6803      	ldr	r3, [r0, #0]
	v->doubleCompute = doubleCompute;
24019462:	60d9      	str	r1, [r3, #12]
}
24019464:	4770      	bx	lr
24019466:	bf00      	nop

24019468 <tVoc_setFreq>:
}

void    tVoc_setFreq      (tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
	v->glot->freq = freq;
24019468:	6803      	ldr	r3, [r0, #0]
2401946a:	685b      	ldr	r3, [r3, #4]
2401946c:	ed83 0a01 	vstr	s0, [r3, #4]
}
24019470:	4770      	bx	lr
24019472:	bf00      	nop

24019474 <tVoc_set_tractLength>:
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
}
void tVoc_set_tractLength(tVoc* const voc, int newLength)
{
	_tVoc* v = *voc;
	tract_newLength(&v->tr, newLength);
24019474:	6800      	ldr	r0, [r0, #0]
24019476:	3008      	adds	r0, #8
24019478:	f7ff b8e0 	b.w	2401863c <tract_newLength>

2401947c <tVoc_set_tenseness>:
}

void tVoc_set_tenseness(tVoc* const voc, Lfloat tenseness)
{
	_tVoc* v = *voc;
	v->glot->tenseness = tenseness;
2401947c:	6803      	ldr	r3, [r0, #0]
2401947e:	685b      	ldr	r3, [r3, #4]
24019480:	ed83 0a02 	vstr	s0, [r3, #8]
}
24019484:	4770      	bx	lr
24019486:	bf00      	nop

24019488 <tVoc_set_velum>:
	return &v->glot->tenseness;
}
void tVoc_set_velum(tVoc* const voc, Lfloat velum)
{
	_tVoc* v = *voc;
	v->tr->velum_target = velum;
24019488:	6803      	ldr	r3, [r0, #0]
2401948a:	689b      	ldr	r3, [r3, #8]
2401948c:	ed83 0a26 	vstr	s0, [r3, #152]	; 0x98
}
24019490:	4770      	bx	lr
24019492:	bf00      	nop

24019494 <tVoc_setTurbulenceNoiseGain>:

void tVoc_setTurbulenceNoiseGain(tVoc* const voc, Lfloat gain)
{
	_tVoc* v = *voc;
	v->tr->TnoiseGain = gain;
24019494:	6803      	ldr	r3, [r0, #0]
24019496:	689b      	ldr	r3, [r3, #8]
24019498:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
}
2401949c:	4770      	bx	lr
2401949e:	bf00      	nop

240194a0 <tVoc_setAspirationNoiseGain>:

void tVoc_setAspirationNoiseGain(tVoc* const voc, Lfloat gain)
{
	_tVoc* v = *voc;
	v->tr->AnoiseGain = gain;
240194a0:	6803      	ldr	r3, [r0, #0]
240194a2:	689b      	ldr	r3, [r3, #8]
240194a4:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
240194a8:	4770      	bx	lr
240194aa:	bf00      	nop

240194ac <tVoc_setAspirationNoiseFilterFreq>:

//0-1
void tVoc_setAspirationNoiseFilterFreq(tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
	tSVF_setFreqFast(&v->tr->aspirationNoiseFilt,freq*30.0f + 60.0f);
240194ac:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
240194b0:	eddf 7a05 	vldr	s15, [pc, #20]	; 240194c8 <tVoc_setAspirationNoiseFilterFreq+0x1c>
240194b4:	6803      	ldr	r3, [r0, #0]
240194b6:	eee0 7a07 	vfma.f32	s15, s0, s14
240194ba:	6898      	ldr	r0, [r3, #8]
240194bc:	30c8      	adds	r0, #200	; 0xc8
240194be:	eeb0 0a67 	vmov.f32	s0, s15
240194c2:	f7f8 bea5 	b.w	24012210 <tSVF_setFreqFast>
240194c6:	bf00      	nop
240194c8:	42700000 	.word	0x42700000

240194cc <tVoc_setAspirationNoiseFilterQ>:
}

void tVoc_setAspirationNoiseFilterQ(tVoc* const voc, Lfloat Q)
{
	_tVoc* v = *voc;
	tSVF_setQ(&v->tr->aspirationNoiseFilt,Q*0.49f + 0.5f);
240194cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
240194d0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 240194e8 <tVoc_setAspirationNoiseFilterQ+0x1c>
240194d4:	6803      	ldr	r3, [r0, #0]
240194d6:	eee0 7a07 	vfma.f32	s15, s0, s14
240194da:	6898      	ldr	r0, [r3, #8]
240194dc:	30c8      	adds	r0, #200	; 0xc8
240194de:	eeb0 0a67 	vmov.f32	s0, s15
240194e2:	f7f8 bed7 	b.w	24012294 <tSVF_setQ>
240194e6:	bf00      	nop
240194e8:	3efae148 	.word	0x3efae148
240194ec:	00000000 	.word	0x00000000

240194f0 <tVoc_set_tongue_and_touch_diameters>:
}


//diameter and index are 0-1.0f
void tVoc_set_tongue_and_touch_diameters(tVoc* const voc, Lfloat tongue_index, Lfloat tongue_diameter, Lfloat touch_index, Lfloat touch_diameter, Lfloat *theDiameters)
{
240194f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
240194f2:	ed2d 8b0a 	vpush	{d8-d12}
	int i;

	_tVoc* v = *voc;
240194f6:	6805      	ldr	r5, [r0, #0]
{
240194f8:	460e      	mov	r6, r1

	Lfloat t;
	Lfloat curve;
	//do tongue position
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
240194fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
240194fe:	68ab      	ldr	r3, [r5, #8]
{
24019500:	eeb0 9a40 	vmov.f32	s18, s0
24019504:	eef0 aa41 	vmov.f32	s21, s2
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
24019508:	6d5c      	ldr	r4, [r3, #84]	; 0x54
{
2401950a:	eeb0 ba61 	vmov.f32	s22, s3
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
2401950e:	6d1a      	ldr	r2, [r3, #80]	; 0x50

	for (i = 0; i < v->tr->n; i++)
24019510:	6859      	ldr	r1, [r3, #4]
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
24019512:	1b12      	subs	r2, r2, r4
	for (i = 0; i < v->tr->n; i++)
24019514:	2900      	cmp	r1, #0
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
24019516:	ee07 2a90 	vmov	s15, r2
2401951a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401951e:	ee87 8a27 	vdiv.f32	s16, s14, s15
	for (i = 0; i < v->tr->n; i++)
24019522:	dd0d      	ble.n	24019540 <tVoc_set_tongue_and_touch_diameters+0x50>
24019524:	4630      	mov	r0, r6
24019526:	2200      	movs	r2, #0
	{
		theDiameters[i] = v->tr->rest_diameter[i];
24019528:	699b      	ldr	r3, [r3, #24]
2401952a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (i = 0; i < v->tr->n; i++)
2401952e:	3201      	adds	r2, #1
		theDiameters[i] = v->tr->rest_diameter[i];
24019530:	681b      	ldr	r3, [r3, #0]
24019532:	f840 3b04 	str.w	r3, [r0], #4
	for (i = 0; i < v->tr->n; i++)
24019536:	68ab      	ldr	r3, [r5, #8]
24019538:	6859      	ldr	r1, [r3, #4]
2401953a:	4291      	cmp	r1, r2
2401953c:	dcf4      	bgt.n	24019528 <tVoc_set_tongue_and_touch_diameters+0x38>
	}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
2401953e:	6d5c      	ldr	r4, [r3, #84]	; 0x54
24019540:	6d9a      	ldr	r2, [r3, #88]	; 0x58
24019542:	42a2      	cmp	r2, r4
24019544:	dd47      	ble.n	240195d6 <tVoc_set_tongue_and_touch_diameters+0xe6>
	{
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
		Lfloat fixedTongueDiameter = 2.0f + ((tongue_diameter - 2.0f) * 0.66666666666667f);
24019546:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
#ifdef ARM_MATH_CM7
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
2401954a:	ed9f 7a95 	vldr	s14, [pc, #596]	; 240197a0 <tVoc_set_tongue_and_touch_diameters+0x2b0>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
2401954e:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
24019552:	eddf 9a94 	vldr	s19, [pc, #592]	; 240197a4 <tVoc_set_tongue_and_touch_diameters+0x2b4>
		}
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
		{
			curve *= 0.94f;
		}
		theDiameters[i] = 1.5f - curve;
24019556:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
2401955a:	eb06 0784 	add.w	r7, r6, r4, lsl #2
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
2401955e:	ee77 7ae0 	vsub.f32	s15, s15, s1
			curve *= 0.8f;
24019562:	ed9f ca91 	vldr	s24, [pc, #580]	; 240197a8 <tVoc_set_tongue_and_touch_diameters+0x2b8>
			curve *= 0.94f;
24019566:	eddf ba91 	vldr	s23, [pc, #580]	; 240197ac <tVoc_set_tongue_and_touch_diameters+0x2bc>
2401956a:	ed9f 6b89 	vldr	d6, [pc, #548]	; 24019790 <tVoc_set_tongue_and_touch_diameters+0x2a0>
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
2401956e:	eee7 9a87 	vfma.f32	s19, s15, s14
24019572:	ee28 8b06 	vmul.f64	d8, d8, d6
24019576:	e00c      	b.n	24019592 <tVoc_set_tongue_and_touch_diameters+0xa2>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
24019578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2401957a:	3b02      	subs	r3, #2
2401957c:	42a3      	cmp	r3, r4
2401957e:	d023      	beq.n	240195c8 <tVoc_set_tongue_and_touch_diameters+0xd8>
		theDiameters[i] = 1.5f - curve;
24019580:	ee7a 7a40 	vsub.f32	s15, s20, s0
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
24019584:	3401      	adds	r4, #1
		theDiameters[i] = 1.5f - curve;
24019586:	ece7 7a01 	vstmia	r7!, {s15}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
2401958a:	68ab      	ldr	r3, [r5, #8]
2401958c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
2401958e:	42a2      	cmp	r2, r4
24019590:	dd20      	ble.n	240195d4 <tVoc_set_tongue_and_touch_diameters+0xe4>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
24019592:	ee07 4a90 	vmov	s15, r4
24019596:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2401959a:	ee39 7a47 	vsub.f32	s14, s18, s14
2401959e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
240195a2:	ee27 7b08 	vmul.f64	d7, d7, d8
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
240195a6:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
240195aa:	f7e7 f827 	bl	240005fc <arm_cos_f32>
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
240195ae:	68ab      	ldr	r3, [r5, #8]
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
240195b0:	ee29 0a80 	vmul.f32	s0, s19, s0
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
240195b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
240195b6:	1e91      	subs	r1, r2, #2
240195b8:	42a1      	cmp	r1, r4
240195ba:	d008      	beq.n	240195ce <tVoc_set_tongue_and_touch_diameters+0xde>
240195bc:	6d99      	ldr	r1, [r3, #88]	; 0x58
240195be:	3901      	subs	r1, #1
240195c0:	42a1      	cmp	r1, r4
240195c2:	d004      	beq.n	240195ce <tVoc_set_tongue_and_touch_diameters+0xde>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
240195c4:	42a2      	cmp	r2, r4
240195c6:	d1d7      	bne.n	24019578 <tVoc_set_tongue_and_touch_diameters+0x88>
			curve *= 0.94f;
240195c8:	ee20 0a2b 	vmul.f32	s0, s0, s23
240195cc:	e7d8      	b.n	24019580 <tVoc_set_tongue_and_touch_diameters+0x90>
			curve *= 0.8f;
240195ce:	ee20 0a0c 	vmul.f32	s0, s0, s24
240195d2:	e7f7      	b.n	240195c4 <tVoc_set_tongue_and_touch_diameters+0xd4>

	Lfloat invWidth = 1.0f / width;
	*/

	Lfloat width=2.0f;
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
240195d4:	6859      	ldr	r1, [r3, #4]
240195d6:	ee07 1a90 	vmov	s15, r1
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
		Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
240195da:	ed9f 7a75 	vldr	s14, [pc, #468]	; 240197b0 <tVoc_set_tongue_and_touch_diameters+0x2c0>
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
240195de:	ed9f 8a75 	vldr	s16, [pc, #468]	; 240197b4 <tVoc_set_tongue_and_touch_diameters+0x2c4>
240195e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
240195e6:	ee27 7a87 	vmul.f32	s14, s15, s14
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
240195ea:	ee27 8a88 	vmul.f32	s16, s15, s16
		if (touch_index< (twentyfivewidth)) width = tenwidth; //25 in original code
240195ee:	eeb4 7aea 	vcmpe.f32	s14, s21
240195f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
240195f6:	dc0e      	bgt.n	24019616 <tVoc_set_tongue_and_touch_diameters+0x126>
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
240195f8:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
240195fc:	ed9f 6a6e 	vldr	s12, [pc, #440]	; 240197b8 <tVoc_set_tongue_and_touch_diameters+0x2c8>
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
24019600:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
24019604:	ee27 6a86 	vmul.f32	s12, s15, s12
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
24019608:	eef4 6aea 	vcmpe.f32	s13, s21
2401960c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019610:	d84e      	bhi.n	240196b0 <tVoc_set_tongue_and_touch_diameters+0x1c0>
24019612:	eeb0 8a46 	vmov.f32	s16, s12
		else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
		if ((width <= 0.01f) && (width >= -0.01f))
24019616:	ed9f 7a69 	vldr	s14, [pc, #420]	; 240197bc <tVoc_set_tongue_and_touch_diameters+0x2cc>
2401961a:	eeb4 8a47 	vcmp.f32	s16, s14
2401961e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019622:	d815      	bhi.n	24019650 <tVoc_set_tongue_and_touch_diameters+0x160>
24019624:	ed9f 7a66 	vldr	s14, [pc, #408]	; 240197c0 <tVoc_set_tongue_and_touch_diameters+0x2d0>
24019628:	eeb4 8ac7 	vcmpe.f32	s16, s14
2401962c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019630:	db0e      	blt.n	24019650 <tVoc_set_tongue_and_touch_diameters+0x160>
		{
			width = 1.0f;
		}
		Lfloat invWidth = 1.0f / width;
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
24019632:	eef4 7a6a 	vcmp.f32	s15, s21
24019636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401963a:	dd06      	ble.n	2401964a <tVoc_set_tongue_and_touch_diameters+0x15a>
2401963c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
24019640:	eeb4 bae7 	vcmpe.f32	s22, s15
24019644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019648:	d43d      	bmi.n	240196c6 <tVoc_set_tongue_and_touch_diameters+0x1d6>
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
			}
		}
	}

}
2401964a:	ecbd 8b0a 	vpop	{d8-d12}
2401964e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
24019650:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
24019654:	eeb4 ba47 	vcmp.f32	s22, s14
24019658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401965c:	d5f5      	bpl.n	2401964a <tVoc_set_tongue_and_touch_diameters+0x15a>
2401965e:	eef4 7aea 	vcmpe.f32	s15, s21
24019662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019666:	ddf0      	ble.n	2401964a <tVoc_set_tongue_and_touch_diameters+0x15a>
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
24019668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2401966c:	fefa 7a48 	vrintp.f32	s15, s16
		int intIndex = roundf(touch_index);
24019670:	feb8 7a6a 	vrinta.f32	s14, s21
24019674:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
24019678:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401967c:	ee38 aa26 	vadd.f32	s20, s16, s13
		int intIndex = roundf(touch_index);
24019680:	ee17 7a10 	vmov	r7, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
24019684:	eef1 7a67 	vneg.f32	s15, s15
24019688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401968c:	ee17 4a90 	vmov	r4, s15
24019690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019694:	eef4 7aca 	vcmpe.f32	s15, s20
24019698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401969c:	d5d5      	bpl.n	2401964a <tVoc_set_tongue_and_touch_diameters+0x15a>
		Lfloat invWidth = 1.0f / width;
2401969e:	ee86 9a88 	vdiv.f32	s18, s13, s16
240196a2:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 24019798 <tVoc_set_tongue_and_touch_diameters+0x2a8>
			else shrink = 0.5f*(1.0f-arm_cos_f32(M_PI * relpos * invWidth));
240196a6:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
240196aa:	ee29 9b07 	vmul.f64	d9, d9, d7
240196ae:	e018      	b.n	240196e2 <tVoc_set_tongue_and_touch_diameters+0x1f2>
		else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
240196b0:	ee7a 5ac7 	vsub.f32	s11, s21, s14
240196b4:	ee37 7a66 	vsub.f32	s14, s14, s13
240196b8:	ee65 6a86 	vmul.f32	s13, s11, s12
240196bc:	ee86 6a87 	vdiv.f32	s12, s13, s14
240196c0:	ee38 8a06 	vadd.f32	s16, s16, s12
240196c4:	e7a7      	b.n	24019616 <tVoc_set_tongue_and_touch_diameters+0x126>
		int intIndex = roundf(touch_index);
240196c6:	fef8 7a6a 	vrinta.f32	s15, s21
240196ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
240196ce:	eeb0 aa00 	vmov.f32	s20, #0	; 0x40000000  2.0
240196d2:	f06f 0401 	mvn.w	r4, #1
			width = 1.0f;
240196d6:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		int intIndex = roundf(touch_index);
240196da:	ee17 7a90 	vmov	r7, s15
240196de:	ed9f 9b2e 	vldr	d9, [pc, #184]	; 24019798 <tVoc_set_tongue_and_touch_diameters+0x2a8>
240196e2:	443c      	add	r4, r7
			if (relpos <= 0.0f) shrink = 0.0f;
240196e4:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
			else if (relpos > width) shrink = 1.0f;
240196e8:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
240196ec:	f1c7 0701 	rsb	r7, r7, #1
240196f0:	eb06 0684 	add.w	r6, r6, r4, lsl #2
			if (relpos <= 0.0f) shrink = 0.0f;
240196f4:	eddf ba33 	vldr	s23, [pc, #204]	; 240197c4 <tVoc_set_tongue_and_touch_diameters+0x2d4>
			Lfloat relpos = (intIndex+i) - touch_index;
240196f8:	ee07 4a90 	vmov	s15, r4
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
240196fc:	2c00      	cmp	r4, #0
			Lfloat relpos = (intIndex+i) - touch_index;
240196fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
24019702:	db26      	blt.n	24019752 <tVoc_set_tongue_and_touch_diameters+0x262>
24019704:	68ab      	ldr	r3, [r5, #8]
			Lfloat relpos = (intIndex+i) - touch_index;
24019706:	ee77 7aea 	vsub.f32	s15, s15, s21
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
2401970a:	685b      	ldr	r3, [r3, #4]
			relpos = fabsf(relpos)-0.5f;
2401970c:	eef0 7ae7 	vabs.f32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
24019710:	429c      	cmp	r4, r3
24019712:	da1e      	bge.n	24019752 <tVoc_set_tongue_and_touch_diameters+0x262>
			if (relpos <= 0.0f) shrink = 0.0f;
24019714:	eef4 7ae8 	vcmpe.f32	s15, s17
			relpos = fabsf(relpos)-0.5f;
24019718:	ee37 0ae8 	vsub.f32	s0, s15, s17
			if (relpos <= 0.0f) shrink = 0.0f;
2401971c:	eef0 7a6b 	vmov.f32	s15, s23
24019720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019724:	d906      	bls.n	24019734 <tVoc_set_tongue_and_touch_diameters+0x244>
			else if (relpos > width) shrink = 1.0f;
24019726:	eeb4 0ac8 	vcmpe.f32	s0, s16
2401972a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401972e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019732:	dd1d      	ble.n	24019770 <tVoc_set_tongue_and_touch_diameters+0x280>
			if (touch_diameter < theDiameters[intIndex+i])
24019734:	ed96 7a00 	vldr	s14, [r6]
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
24019738:	ee77 6a4b 	vsub.f32	s13, s14, s22
			if (touch_diameter < theDiameters[intIndex+i])
2401973c:	eeb4 7acb 	vcmpe.f32	s14, s22
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
24019740:	eeb0 7a4b 	vmov.f32	s14, s22
			if (touch_diameter < theDiameters[intIndex+i])
24019744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
24019748:	eea6 7aa7 	vfma.f32	s14, s13, s15
2401974c:	bfc8      	it	gt
2401974e:	ed86 7a00 	vstrgt	s14, [r6]
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
24019752:	193b      	adds	r3, r7, r4
24019754:	3604      	adds	r6, #4
24019756:	3401      	adds	r4, #1
24019758:	ee07 3a90 	vmov	s15, r3
2401975c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
24019760:	eef4 7aca 	vcmpe.f32	s15, s20
24019764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019768:	d4c6      	bmi.n	240196f8 <tVoc_set_tongue_and_touch_diameters+0x208>
}
2401976a:	ecbd 8b0a 	vpop	{d8-d12}
2401976e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			else shrink = 0.5f*(1.0f-arm_cos_f32(M_PI * relpos * invWidth));
24019770:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
24019774:	ee20 0b09 	vmul.f64	d0, d0, d9
24019778:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401977c:	f7e6 ff3e 	bl	240005fc <arm_cos_f32>
24019780:	ee3c 0a40 	vsub.f32	s0, s24, s0
24019784:	ee60 7a28 	vmul.f32	s15, s0, s17
24019788:	e7d4      	b.n	24019734 <tVoc_set_tongue_and_touch_diameters+0x244>
2401978a:	bf00      	nop
2401978c:	f3af 8000 	nop.w
24019790:	4d2562ef 	.word	0x4d2562ef
24019794:	400ba561 	.word	0x400ba561
24019798:	54442d18 	.word	0x54442d18
2401979c:	400921fb 	.word	0x400921fb
240197a0:	3f2aaaab 	.word	0x3f2aaaab
240197a4:	3f99999a 	.word	0x3f99999a
240197a8:	3f4ccccd 	.word	0x3f4ccccd
240197ac:	3f70a3d7 	.word	0x3f70a3d7
240197b0:	3f11745d 	.word	0x3f11745d
240197b4:	3e68ba2f 	.word	0x3e68ba2f
240197b8:	3de8ba2f 	.word	0x3de8ba2f
240197bc:	3c23d70a 	.word	0x3c23d70a
240197c0:	bc23d70a 	.word	0xbc23d70a
240197c4:	00000000 	.word	0x00000000

240197c8 <tVoc_set_tongue_shape_and_touch>:
{
240197c8:	b500      	push	{lr}
	tongue_diameter += 2.05f;
240197ca:	eddf 7a23 	vldr	s15, [pc, #140]	; 24019858 <tVoc_set_tongue_shape_and_touch+0x90>
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
240197ce:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
240197d2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 2401985c <tVoc_set_tongue_shape_and_touch+0x94>
{
240197d6:	ed2d 8b04 	vpush	{d8-d9}
240197da:	fec1 1a87 	vmaxnm.f32	s3, s3, s14
240197de:	b083      	sub	sp, #12
	_tVoc* v = *voc;
240197e0:	6803      	ldr	r3, [r0, #0]
	tongue_diameter += 2.05f;
240197e2:	eddf 9a1f 	vldr	s19, [pc, #124]	; 24019860 <tVoc_set_tongue_shape_and_touch+0x98>
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
240197e6:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
	_tVoc* v = *voc;
240197ea:	9301      	str	r3, [sp, #4]
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
240197ec:	a801      	add	r0, sp, #4
	return v->tr->target_diameter;
240197ee:	689b      	ldr	r3, [r3, #8]
	tongue_diameter += 2.05f;
240197f0:	eee0 9aa7 	vfma.f32	s19, s1, s15
	touch_diameter *= 1.6f;
240197f4:	eddf 7a1b 	vldr	s15, [pc, #108]	; 24019864 <tVoc_set_tongue_shape_and_touch+0x9c>
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
240197f8:	edd3 8a18 	vldr	s17, [r3, #96]	; 0x60
	touch_diameter *= 1.6f;
240197fc:	ee21 8aa7 	vmul.f32	s16, s3, s15
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
24019800:	edd3 7a01 	vldr	s15, [r3, #4]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
24019804:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
24019808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
2401980c:	69d9      	ldr	r1, [r3, #28]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
2401980e:	ee37 7a68 	vsub.f32	s14, s14, s17
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
24019812:	eef0 1a48 	vmov.f32	s3, s16
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
24019816:	ee77 7ae6 	vsub.f32	s15, s15, s13
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
2401981a:	eee7 8a00 	vfma.f32	s17, s14, s0
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
2401981e:	eef0 0a69 	vmov.f32	s1, s19
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
24019822:	eea7 9a81 	vfma.f32	s18, s15, s2
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
24019826:	eeb0 0a68 	vmov.f32	s0, s17
2401982a:	eeb0 1a49 	vmov.f32	s2, s18
2401982e:	f7ff fe5f 	bl	240194f0 <tVoc_set_tongue_and_touch_diameters>
	v->tr->turbuluencePointPosition[0] = tongue_index;
24019832:	9b01      	ldr	r3, [sp, #4]
24019834:	689a      	ldr	r2, [r3, #8]
24019836:	edc2 8a34 	vstr	s17, [r2, #208]	; 0xd0
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
2401983a:	689a      	ldr	r2, [r3, #8]
2401983c:	edc2 9a36 	vstr	s19, [r2, #216]	; 0xd8
	v->tr->turbuluencePointPosition[1] = touch_index;
24019840:	689a      	ldr	r2, [r3, #8]
24019842:	ed82 9a35 	vstr	s18, [r2, #212]	; 0xd4
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
24019846:	689b      	ldr	r3, [r3, #8]
24019848:	ed83 8a37 	vstr	s16, [r3, #220]	; 0xdc
}
2401984c:	b003      	add	sp, #12
2401984e:	ecbd 8b04 	vpop	{d8-d9}
24019852:	f85d fb04 	ldr.w	pc, [sp], #4
24019856:	bf00      	nop
24019858:	3fb9999a 	.word	0x3fb9999a
2401985c:	00000000 	.word	0x00000000
24019860:	40033333 	.word	0x40033333
24019864:	3fcccccd 	.word	0x3fcccccd

24019868 <tVoc_rescaleDiameter>:
}

void tVoc_rescaleDiameter(tVoc* const voc, Lfloat scale)
{
	_tVoc* v = *voc;
	v->tr->diameterScale = scale;
24019868:	6803      	ldr	r3, [r0, #0]
2401986a:	689b      	ldr	r3, [r3, #8]
2401986c:	ed83 0a2f 	vstr	s0, [r3, #188]	; 0xbc
}
24019870:	4770      	bx	lr
24019872:	bf00      	nop

24019874 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
24019874:	4770      	bx	lr
24019876:	bf00      	nop

24019878 <LEAF_init>:
{
24019878:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
2401987a:	6200      	str	r0, [r0, #32]
{
2401987c:	4604      	mov	r4, r0
2401987e:	461d      	mov	r5, r3
24019880:	ed2d 8b02 	vpush	{d8}
24019884:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
24019888:	f7fb f9ec 	bl	24014c64 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
2401988c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
24019890:	eddf 7a0c 	vldr	s15, [pc, #48]	; 240198c4 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
24019894:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
24019896:	4b0c      	ldr	r3, [pc, #48]	; (240198c8 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
24019898:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
2401989c:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
240198a0:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
240198a2:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
240198a4:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
240198a8:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
240198ac:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
240198b0:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
240198b4:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
240198b8:	edc4 7a03 	vstr	s15, [r4, #12]
}
240198bc:	ecbd 8b02 	vpop	{d8}
240198c0:	bd38      	pop	{r3, r4, r5, pc}
240198c2:	bf00      	nop
240198c4:	40c90fdb 	.word	0x40c90fdb
240198c8:	24019875 	.word	0x24019875

240198cc <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
240198cc:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
240198ce:	eb00 0281 	add.w	r2, r0, r1, lsl #2
240198d2:	2401      	movs	r4, #1
240198d4:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
240198d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
240198da:	6b83      	ldr	r3, [r0, #56]	; 0x38
240198dc:	4718      	bx	r3
240198de:	bf00      	nop

240198e0 <__itoa>:
240198e0:	1e93      	subs	r3, r2, #2
240198e2:	2b22      	cmp	r3, #34	; 0x22
240198e4:	b510      	push	{r4, lr}
240198e6:	460c      	mov	r4, r1
240198e8:	d904      	bls.n	240198f4 <__itoa+0x14>
240198ea:	2300      	movs	r3, #0
240198ec:	700b      	strb	r3, [r1, #0]
240198ee:	461c      	mov	r4, r3
240198f0:	4620      	mov	r0, r4
240198f2:	bd10      	pop	{r4, pc}
240198f4:	2a0a      	cmp	r2, #10
240198f6:	d109      	bne.n	2401990c <__itoa+0x2c>
240198f8:	2800      	cmp	r0, #0
240198fa:	da07      	bge.n	2401990c <__itoa+0x2c>
240198fc:	232d      	movs	r3, #45	; 0x2d
240198fe:	700b      	strb	r3, [r1, #0]
24019900:	4240      	negs	r0, r0
24019902:	2101      	movs	r1, #1
24019904:	4421      	add	r1, r4
24019906:	f000 f805 	bl	24019914 <__utoa>
2401990a:	e7f1      	b.n	240198f0 <__itoa+0x10>
2401990c:	2100      	movs	r1, #0
2401990e:	e7f9      	b.n	24019904 <__itoa+0x24>

24019910 <itoa>:
24019910:	f7ff bfe6 	b.w	240198e0 <__itoa>

24019914 <__utoa>:
24019914:	b5f0      	push	{r4, r5, r6, r7, lr}
24019916:	4c1f      	ldr	r4, [pc, #124]	; (24019994 <__utoa+0x80>)
24019918:	b08b      	sub	sp, #44	; 0x2c
2401991a:	4605      	mov	r5, r0
2401991c:	460b      	mov	r3, r1
2401991e:	466e      	mov	r6, sp
24019920:	f104 0c20 	add.w	ip, r4, #32
24019924:	6820      	ldr	r0, [r4, #0]
24019926:	6861      	ldr	r1, [r4, #4]
24019928:	4637      	mov	r7, r6
2401992a:	c703      	stmia	r7!, {r0, r1}
2401992c:	3408      	adds	r4, #8
2401992e:	4564      	cmp	r4, ip
24019930:	463e      	mov	r6, r7
24019932:	d1f7      	bne.n	24019924 <__utoa+0x10>
24019934:	7921      	ldrb	r1, [r4, #4]
24019936:	7139      	strb	r1, [r7, #4]
24019938:	1e91      	subs	r1, r2, #2
2401993a:	6820      	ldr	r0, [r4, #0]
2401993c:	6038      	str	r0, [r7, #0]
2401993e:	2922      	cmp	r1, #34	; 0x22
24019940:	f04f 0100 	mov.w	r1, #0
24019944:	d904      	bls.n	24019950 <__utoa+0x3c>
24019946:	7019      	strb	r1, [r3, #0]
24019948:	460b      	mov	r3, r1
2401994a:	4618      	mov	r0, r3
2401994c:	b00b      	add	sp, #44	; 0x2c
2401994e:	bdf0      	pop	{r4, r5, r6, r7, pc}
24019950:	1e58      	subs	r0, r3, #1
24019952:	4684      	mov	ip, r0
24019954:	fbb5 f7f2 	udiv	r7, r5, r2
24019958:	fb02 5617 	mls	r6, r2, r7, r5
2401995c:	3628      	adds	r6, #40	; 0x28
2401995e:	446e      	add	r6, sp
24019960:	460c      	mov	r4, r1
24019962:	f816 6c28 	ldrb.w	r6, [r6, #-40]
24019966:	f80c 6f01 	strb.w	r6, [ip, #1]!
2401996a:	462e      	mov	r6, r5
2401996c:	42b2      	cmp	r2, r6
2401996e:	f101 0101 	add.w	r1, r1, #1
24019972:	463d      	mov	r5, r7
24019974:	d9ee      	bls.n	24019954 <__utoa+0x40>
24019976:	2200      	movs	r2, #0
24019978:	545a      	strb	r2, [r3, r1]
2401997a:	1919      	adds	r1, r3, r4
2401997c:	1aa5      	subs	r5, r4, r2
2401997e:	42aa      	cmp	r2, r5
24019980:	dae3      	bge.n	2401994a <__utoa+0x36>
24019982:	f810 5f01 	ldrb.w	r5, [r0, #1]!
24019986:	780e      	ldrb	r6, [r1, #0]
24019988:	7006      	strb	r6, [r0, #0]
2401998a:	3201      	adds	r2, #1
2401998c:	f801 5901 	strb.w	r5, [r1], #-1
24019990:	e7f4      	b.n	2401997c <__utoa+0x68>
24019992:	bf00      	nop
24019994:	2402a3b0 	.word	0x2402a3b0

24019998 <memset>:
24019998:	4402      	add	r2, r0
2401999a:	4603      	mov	r3, r0
2401999c:	4293      	cmp	r3, r2
2401999e:	d100      	bne.n	240199a2 <memset+0xa>
240199a0:	4770      	bx	lr
240199a2:	f803 1b01 	strb.w	r1, [r3], #1
240199a6:	e7f9      	b.n	2401999c <memset+0x4>

240199a8 <__errno>:
240199a8:	4b01      	ldr	r3, [pc, #4]	; (240199b0 <__errno+0x8>)
240199aa:	6818      	ldr	r0, [r3, #0]
240199ac:	4770      	bx	lr
240199ae:	bf00      	nop
240199b0:	20000a0c 	.word	0x20000a0c

240199b4 <__libc_init_array>:
240199b4:	b570      	push	{r4, r5, r6, lr}
240199b6:	4d0d      	ldr	r5, [pc, #52]	; (240199ec <__libc_init_array+0x38>)
240199b8:	4c0d      	ldr	r4, [pc, #52]	; (240199f0 <__libc_init_array+0x3c>)
240199ba:	1b64      	subs	r4, r4, r5
240199bc:	10a4      	asrs	r4, r4, #2
240199be:	2600      	movs	r6, #0
240199c0:	42a6      	cmp	r6, r4
240199c2:	d109      	bne.n	240199d8 <__libc_init_array+0x24>
240199c4:	4d0b      	ldr	r5, [pc, #44]	; (240199f4 <__libc_init_array+0x40>)
240199c6:	4c0c      	ldr	r4, [pc, #48]	; (240199f8 <__libc_init_array+0x44>)
240199c8:	f011 fe6a 	bl	2402b6a0 <_init>
240199cc:	1b64      	subs	r4, r4, r5
240199ce:	10a4      	asrs	r4, r4, #2
240199d0:	2600      	movs	r6, #0
240199d2:	42a6      	cmp	r6, r4
240199d4:	d105      	bne.n	240199e2 <__libc_init_array+0x2e>
240199d6:	bd70      	pop	{r4, r5, r6, pc}
240199d8:	f855 3b04 	ldr.w	r3, [r5], #4
240199dc:	4798      	blx	r3
240199de:	3601      	adds	r6, #1
240199e0:	e7ee      	b.n	240199c0 <__libc_init_array+0xc>
240199e2:	f855 3b04 	ldr.w	r3, [r5], #4
240199e6:	4798      	blx	r3
240199e8:	3601      	adds	r6, #1
240199ea:	e7f2      	b.n	240199d2 <__libc_init_array+0x1e>
240199ec:	2402b728 	.word	0x2402b728
240199f0:	2402b728 	.word	0x2402b728
240199f4:	2402b728 	.word	0x2402b728
240199f8:	2402b72c 	.word	0x2402b72c

240199fc <memcpy>:
240199fc:	440a      	add	r2, r1
240199fe:	4291      	cmp	r1, r2
24019a00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
24019a04:	d100      	bne.n	24019a08 <memcpy+0xc>
24019a06:	4770      	bx	lr
24019a08:	b510      	push	{r4, lr}
24019a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
24019a0e:	f803 4f01 	strb.w	r4, [r3, #1]!
24019a12:	4291      	cmp	r1, r2
24019a14:	d1f9      	bne.n	24019a0a <memcpy+0xe>
24019a16:	bd10      	pop	{r4, pc}

24019a18 <expf>:
24019a18:	ee10 2a10 	vmov	r2, s0
24019a1c:	f240 412a 	movw	r1, #1066	; 0x42a
24019a20:	f3c2 530a 	ubfx	r3, r2, #20, #11
24019a24:	428b      	cmp	r3, r1
24019a26:	b430      	push	{r4, r5}
24019a28:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
24019a2c:	d92a      	bls.n	24019a84 <expf+0x6c>
24019a2e:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
24019a32:	d058      	beq.n	24019ae6 <expf+0xce>
24019a34:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
24019a38:	d303      	bcc.n	24019a42 <expf+0x2a>
24019a3a:	ee30 0a00 	vadd.f32	s0, s0, s0
24019a3e:	bc30      	pop	{r4, r5}
24019a40:	4770      	bx	lr
24019a42:	eddf 7a2a 	vldr	s15, [pc, #168]	; 24019aec <expf+0xd4>
24019a46:	eeb4 0ae7 	vcmpe.f32	s0, s15
24019a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019a4e:	dd03      	ble.n	24019a58 <expf+0x40>
24019a50:	bc30      	pop	{r4, r5}
24019a52:	2000      	movs	r0, #0
24019a54:	f000 bbd6 	b.w	2401a204 <__math_oflowf>
24019a58:	eddf 7a25 	vldr	s15, [pc, #148]	; 24019af0 <expf+0xd8>
24019a5c:	eeb4 0ae7 	vcmpe.f32	s0, s15
24019a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019a64:	d503      	bpl.n	24019a6e <expf+0x56>
24019a66:	bc30      	pop	{r4, r5}
24019a68:	2000      	movs	r0, #0
24019a6a:	f000 bbbf 	b.w	2401a1ec <__math_uflowf>
24019a6e:	eddf 7a21 	vldr	s15, [pc, #132]	; 24019af4 <expf+0xdc>
24019a72:	eeb4 0ae7 	vcmpe.f32	s0, s15
24019a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019a7a:	d503      	bpl.n	24019a84 <expf+0x6c>
24019a7c:	bc30      	pop	{r4, r5}
24019a7e:	2000      	movs	r0, #0
24019a80:	f000 bbba 	b.w	2401a1f8 <__math_may_uflowf>
24019a84:	4b1c      	ldr	r3, [pc, #112]	; (24019af8 <expf+0xe0>)
24019a86:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
24019a8a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
24019a8e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
24019a92:	eeb0 7b44 	vmov.f64	d7, d4
24019a96:	eea5 7b06 	vfma.f64	d7, d5, d6
24019a9a:	ee17 0a10 	vmov	r0, s14
24019a9e:	ee37 7b44 	vsub.f64	d7, d7, d4
24019aa2:	f000 021f 	and.w	r2, r0, #31
24019aa6:	ee95 7b06 	vfnms.f64	d7, d5, d6
24019aaa:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
24019aae:	ee27 4b07 	vmul.f64	d4, d7, d7
24019ab2:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
24019ab6:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
24019aba:	eea5 6b07 	vfma.f64	d6, d5, d7
24019abe:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
24019ac2:	684d      	ldr	r5, [r1, #4]
24019ac4:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
24019ac8:	2100      	movs	r1, #0
24019aca:	190a      	adds	r2, r1, r4
24019acc:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
24019ad0:	eea5 0b07 	vfma.f64	d0, d5, d7
24019ad4:	ec43 2b17 	vmov	d7, r2, r3
24019ad8:	eea6 0b04 	vfma.f64	d0, d6, d4
24019adc:	ee20 0b07 	vmul.f64	d0, d0, d7
24019ae0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24019ae4:	e7ab      	b.n	24019a3e <expf+0x26>
24019ae6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 24019afc <expf+0xe4>
24019aea:	e7a8      	b.n	24019a3e <expf+0x26>
24019aec:	42b17217 	.word	0x42b17217
24019af0:	c2cff1b4 	.word	0xc2cff1b4
24019af4:	c2ce8ecf 	.word	0xc2ce8ecf
24019af8:	2402a3d8 	.word	0x2402a3d8
24019afc:	00000000 	.word	0x00000000

24019b00 <logf>:
24019b00:	ee10 3a10 	vmov	r3, s0
24019b04:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
24019b08:	b410      	push	{r4}
24019b0a:	d055      	beq.n	24019bb8 <logf+0xb8>
24019b0c:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
24019b10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
24019b14:	d31a      	bcc.n	24019b4c <logf+0x4c>
24019b16:	005a      	lsls	r2, r3, #1
24019b18:	d104      	bne.n	24019b24 <logf+0x24>
24019b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
24019b1e:	2001      	movs	r0, #1
24019b20:	f000 bb76 	b.w	2401a210 <__math_divzerof>
24019b24:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
24019b28:	d043      	beq.n	24019bb2 <logf+0xb2>
24019b2a:	2b00      	cmp	r3, #0
24019b2c:	db02      	blt.n	24019b34 <logf+0x34>
24019b2e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
24019b32:	d303      	bcc.n	24019b3c <logf+0x3c>
24019b34:	f85d 4b04 	ldr.w	r4, [sp], #4
24019b38:	f000 bb7c 	b.w	2401a234 <__math_invalidf>
24019b3c:	eddf 7a20 	vldr	s15, [pc, #128]	; 24019bc0 <logf+0xc0>
24019b40:	ee20 0a27 	vmul.f32	s0, s0, s15
24019b44:	ee10 3a10 	vmov	r3, s0
24019b48:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
24019b4c:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
24019b50:	491c      	ldr	r1, [pc, #112]	; (24019bc4 <logf+0xc4>)
24019b52:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
24019b56:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
24019b5a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
24019b5e:	0dd4      	lsrs	r4, r2, #23
24019b60:	eb01 1000 	add.w	r0, r1, r0, lsl #4
24019b64:	05e4      	lsls	r4, r4, #23
24019b66:	ed90 6b00 	vldr	d6, [r0]
24019b6a:	1b1b      	subs	r3, r3, r4
24019b6c:	ee07 3a90 	vmov	s15, r3
24019b70:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
24019b74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24019b78:	15d2      	asrs	r2, r2, #23
24019b7a:	eea6 0b07 	vfma.f64	d0, d6, d7
24019b7e:	ed90 6b02 	vldr	d6, [r0, #8]
24019b82:	ee20 4b00 	vmul.f64	d4, d0, d0
24019b86:	ee07 2a90 	vmov	s15, r2
24019b8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24019b8e:	eea7 6b05 	vfma.f64	d6, d7, d5
24019b92:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
24019b96:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
24019b9a:	eea5 7b00 	vfma.f64	d7, d5, d0
24019b9e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
24019ba2:	ee30 0b06 	vadd.f64	d0, d0, d6
24019ba6:	eea5 7b04 	vfma.f64	d7, d5, d4
24019baa:	eea4 0b07 	vfma.f64	d0, d4, d7
24019bae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24019bb2:	f85d 4b04 	ldr.w	r4, [sp], #4
24019bb6:	4770      	bx	lr
24019bb8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24019bc8 <logf+0xc8>
24019bbc:	e7f9      	b.n	24019bb2 <logf+0xb2>
24019bbe:	bf00      	nop
24019bc0:	4b000000 	.word	0x4b000000
24019bc4:	2402a520 	.word	0x2402a520
24019bc8:	00000000 	.word	0x00000000

24019bcc <log2f>:
24019bcc:	ee10 2a10 	vmov	r2, s0
24019bd0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
24019bd4:	b410      	push	{r4}
24019bd6:	d055      	beq.n	24019c84 <log2f+0xb8>
24019bd8:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
24019bdc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24019be0:	d31a      	bcc.n	24019c18 <log2f+0x4c>
24019be2:	0053      	lsls	r3, r2, #1
24019be4:	d104      	bne.n	24019bf0 <log2f+0x24>
24019be6:	f85d 4b04 	ldr.w	r4, [sp], #4
24019bea:	2001      	movs	r0, #1
24019bec:	f000 bb10 	b.w	2401a210 <__math_divzerof>
24019bf0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
24019bf4:	d043      	beq.n	24019c7e <log2f+0xb2>
24019bf6:	2a00      	cmp	r2, #0
24019bf8:	db02      	blt.n	24019c00 <log2f+0x34>
24019bfa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
24019bfe:	d303      	bcc.n	24019c08 <log2f+0x3c>
24019c00:	f85d 4b04 	ldr.w	r4, [sp], #4
24019c04:	f000 bb16 	b.w	2401a234 <__math_invalidf>
24019c08:	eddf 7a20 	vldr	s15, [pc, #128]	; 24019c8c <log2f+0xc0>
24019c0c:	ee20 0a27 	vmul.f32	s0, s0, s15
24019c10:	ee10 3a10 	vmov	r3, s0
24019c14:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
24019c18:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
24019c1c:	491c      	ldr	r1, [pc, #112]	; (24019c90 <log2f+0xc4>)
24019c1e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
24019c22:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
24019c26:	f3c3 40c3 	ubfx	r0, r3, #19, #4
24019c2a:	0ddc      	lsrs	r4, r3, #23
24019c2c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
24019c30:	05e4      	lsls	r4, r4, #23
24019c32:	ed90 5b00 	vldr	d5, [r0]
24019c36:	1b12      	subs	r2, r2, r4
24019c38:	ee07 2a90 	vmov	s15, r2
24019c3c:	15db      	asrs	r3, r3, #23
24019c3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24019c42:	eea5 6b07 	vfma.f64	d6, d5, d7
24019c46:	ed90 7b02 	vldr	d7, [r0, #8]
24019c4a:	ee26 4b06 	vmul.f64	d4, d6, d6
24019c4e:	ee00 3a10 	vmov	s0, r3
24019c52:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
24019c56:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
24019c5a:	ee30 0b07 	vadd.f64	d0, d0, d7
24019c5e:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
24019c62:	eea5 7b06 	vfma.f64	d7, d5, d6
24019c66:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
24019c6a:	eea5 7b04 	vfma.f64	d7, d5, d4
24019c6e:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
24019c72:	eea5 0b06 	vfma.f64	d0, d5, d6
24019c76:	eea4 0b07 	vfma.f64	d0, d4, d7
24019c7a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
24019c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
24019c82:	4770      	bx	lr
24019c84:	ed9f 0a03 	vldr	s0, [pc, #12]	; 24019c94 <log2f+0xc8>
24019c88:	e7f9      	b.n	24019c7e <log2f+0xb2>
24019c8a:	bf00      	nop
24019c8c:	4b000000 	.word	0x4b000000
24019c90:	2402aeb0 	.word	0x2402aeb0
24019c94:	00000000 	.word	0x00000000

24019c98 <exp>:
24019c98:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
24019c9a:	ee10 3a90 	vmov	r3, s1
24019c9e:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
24019ca2:	f3c3 540a 	ubfx	r4, r3, #20, #11
24019ca6:	18a2      	adds	r2, r4, r2
24019ca8:	2a3e      	cmp	r2, #62	; 0x3e
24019caa:	ee10 1a10 	vmov	r1, s0
24019cae:	d922      	bls.n	24019cf6 <exp+0x5e>
24019cb0:	2a00      	cmp	r2, #0
24019cb2:	da06      	bge.n	24019cc2 <exp+0x2a>
24019cb4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
24019cb8:	ee30 0b07 	vadd.f64	d0, d0, d7
24019cbc:	b004      	add	sp, #16
24019cbe:	bcf0      	pop	{r4, r5, r6, r7}
24019cc0:	4770      	bx	lr
24019cc2:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
24019cc6:	f04f 0000 	mov.w	r0, #0
24019cca:	d913      	bls.n	24019cf4 <exp+0x5c>
24019ccc:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
24019cd0:	bf08      	it	eq
24019cd2:	4281      	cmpeq	r1, r0
24019cd4:	f000 80a0 	beq.w	24019e18 <exp+0x180>
24019cd8:	f240 72ff 	movw	r2, #2047	; 0x7ff
24019cdc:	4294      	cmp	r4, r2
24019cde:	d0e9      	beq.n	24019cb4 <exp+0x1c>
24019ce0:	4283      	cmp	r3, r0
24019ce2:	da03      	bge.n	24019cec <exp+0x54>
24019ce4:	b004      	add	sp, #16
24019ce6:	bcf0      	pop	{r4, r5, r6, r7}
24019ce8:	f000 b8c6 	b.w	24019e78 <__math_uflow>
24019cec:	b004      	add	sp, #16
24019cee:	bcf0      	pop	{r4, r5, r6, r7}
24019cf0:	f000 b8ca 	b.w	24019e88 <__math_oflow>
24019cf4:	4604      	mov	r4, r0
24019cf6:	4950      	ldr	r1, [pc, #320]	; (24019e38 <exp+0x1a0>)
24019cf8:	ed91 6b02 	vldr	d6, [r1, #8]
24019cfc:	ed91 5b00 	vldr	d5, [r1]
24019d00:	eeb0 7b46 	vmov.f64	d7, d6
24019d04:	eea5 7b00 	vfma.f64	d7, d5, d0
24019d08:	ee17 5a10 	vmov	r5, s14
24019d0c:	ee37 7b46 	vsub.f64	d7, d7, d6
24019d10:	ed91 6b04 	vldr	d6, [r1, #16]
24019d14:	f005 037f 	and.w	r3, r5, #127	; 0x7f
24019d18:	eea6 0b07 	vfma.f64	d0, d6, d7
24019d1c:	ed91 6b06 	vldr	d6, [r1, #24]
24019d20:	18d8      	adds	r0, r3, r3
24019d22:	f100 030f 	add.w	r3, r0, #15
24019d26:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
24019d2a:	eea6 0b07 	vfma.f64	d0, d6, d7
24019d2e:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
24019d32:	ee20 7b00 	vmul.f64	d7, d0, d0
24019d36:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
24019d3a:	ed91 4b08 	vldr	d4, [r1, #32]
24019d3e:	ee30 6b06 	vadd.f64	d6, d0, d6
24019d42:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
24019d46:	eea3 4b00 	vfma.f64	d4, d3, d0
24019d4a:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
24019d4e:	eea4 6b07 	vfma.f64	d6, d4, d7
24019d52:	ee27 7b07 	vmul.f64	d7, d7, d7
24019d56:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
24019d5a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
24019d5e:	f8d2 c004 	ldr.w	ip, [r2, #4]
24019d62:	eea3 4b00 	vfma.f64	d4, d3, d0
24019d66:	2600      	movs	r6, #0
24019d68:	19f2      	adds	r2, r6, r7
24019d6a:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
24019d6e:	eea7 6b04 	vfma.f64	d6, d7, d4
24019d72:	2c00      	cmp	r4, #0
24019d74:	d14b      	bne.n	24019e0e <exp+0x176>
24019d76:	42b5      	cmp	r5, r6
24019d78:	db10      	blt.n	24019d9c <exp+0x104>
24019d7a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
24019d7e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 24019e20 <exp+0x188>
24019d82:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
24019d86:	4610      	mov	r0, r2
24019d88:	ec41 0b10 	vmov	d0, r0, r1
24019d8c:	eea6 0b00 	vfma.f64	d0, d6, d0
24019d90:	ee20 0b07 	vmul.f64	d0, d0, d7
24019d94:	b004      	add	sp, #16
24019d96:	bcf0      	pop	{r4, r5, r6, r7}
24019d98:	f000 b88a 	b.w	24019eb0 <__math_check_oflow>
24019d9c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
24019da0:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
24019da4:	4610      	mov	r0, r2
24019da6:	ec41 0b17 	vmov	d7, r0, r1
24019daa:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
24019dae:	ee26 6b07 	vmul.f64	d6, d6, d7
24019db2:	ee37 5b06 	vadd.f64	d5, d7, d6
24019db6:	eeb4 5bc4 	vcmpe.f64	d5, d4
24019dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019dbe:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 24019e28 <exp+0x190>
24019dc2:	d51e      	bpl.n	24019e02 <exp+0x16a>
24019dc4:	ee35 3b04 	vadd.f64	d3, d5, d4
24019dc8:	ee37 7b45 	vsub.f64	d7, d7, d5
24019dcc:	ee37 7b06 	vadd.f64	d7, d7, d6
24019dd0:	ee34 6b43 	vsub.f64	d6, d4, d3
24019dd4:	ee36 6b05 	vadd.f64	d6, d6, d5
24019dd8:	ee36 6b07 	vadd.f64	d6, d6, d7
24019ddc:	ee36 6b03 	vadd.f64	d6, d6, d3
24019de0:	ee36 5b44 	vsub.f64	d5, d6, d4
24019de4:	eeb5 5b40 	vcmp.f64	d5, #0.0
24019de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019dec:	d101      	bne.n	24019df2 <exp+0x15a>
24019dee:	ed9f 5b10 	vldr	d5, [pc, #64]	; 24019e30 <exp+0x198>
24019df2:	ed8d 0b00 	vstr	d0, [sp]
24019df6:	ed9d 7b00 	vldr	d7, [sp]
24019dfa:	ee27 7b00 	vmul.f64	d7, d7, d0
24019dfe:	ed8d 7b02 	vstr	d7, [sp, #8]
24019e02:	ee25 0b00 	vmul.f64	d0, d5, d0
24019e06:	b004      	add	sp, #16
24019e08:	bcf0      	pop	{r4, r5, r6, r7}
24019e0a:	f000 b845 	b.w	24019e98 <__math_check_uflow>
24019e0e:	ec43 2b10 	vmov	d0, r2, r3
24019e12:	eea6 0b00 	vfma.f64	d0, d6, d0
24019e16:	e751      	b.n	24019cbc <exp+0x24>
24019e18:	ed9f 0b05 	vldr	d0, [pc, #20]	; 24019e30 <exp+0x198>
24019e1c:	e74e      	b.n	24019cbc <exp+0x24>
24019e1e:	bf00      	nop
24019e20:	00000000 	.word	0x00000000
24019e24:	7f000000 	.word	0x7f000000
24019e28:	00000000 	.word	0x00000000
24019e2c:	00100000 	.word	0x00100000
	...
24019e38:	2402a640 	.word	0x2402a640

24019e3c <with_errno>:
24019e3c:	b513      	push	{r0, r1, r4, lr}
24019e3e:	4604      	mov	r4, r0
24019e40:	ed8d 0b00 	vstr	d0, [sp]
24019e44:	f7ff fdb0 	bl	240199a8 <__errno>
24019e48:	ed9d 0b00 	vldr	d0, [sp]
24019e4c:	6004      	str	r4, [r0, #0]
24019e4e:	b002      	add	sp, #8
24019e50:	bd10      	pop	{r4, pc}

24019e52 <xflow>:
24019e52:	b082      	sub	sp, #8
24019e54:	b158      	cbz	r0, 24019e6e <xflow+0x1c>
24019e56:	eeb1 7b40 	vneg.f64	d7, d0
24019e5a:	ed8d 7b00 	vstr	d7, [sp]
24019e5e:	ed9d 7b00 	vldr	d7, [sp]
24019e62:	2022      	movs	r0, #34	; 0x22
24019e64:	ee20 0b07 	vmul.f64	d0, d0, d7
24019e68:	b002      	add	sp, #8
24019e6a:	f7ff bfe7 	b.w	24019e3c <with_errno>
24019e6e:	eeb0 7b40 	vmov.f64	d7, d0
24019e72:	e7f2      	b.n	24019e5a <xflow+0x8>
24019e74:	0000      	movs	r0, r0
	...

24019e78 <__math_uflow>:
24019e78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24019e80 <__math_uflow+0x8>
24019e7c:	f7ff bfe9 	b.w	24019e52 <xflow>
24019e80:	00000000 	.word	0x00000000
24019e84:	10000000 	.word	0x10000000

24019e88 <__math_oflow>:
24019e88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 24019e90 <__math_oflow+0x8>
24019e8c:	f7ff bfe1 	b.w	24019e52 <xflow>
24019e90:	00000000 	.word	0x00000000
24019e94:	70000000 	.word	0x70000000

24019e98 <__math_check_uflow>:
24019e98:	eeb5 0b40 	vcmp.f64	d0, #0.0
24019e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019ea0:	d102      	bne.n	24019ea8 <__math_check_uflow+0x10>
24019ea2:	2022      	movs	r0, #34	; 0x22
24019ea4:	f7ff bfca 	b.w	24019e3c <with_errno>
24019ea8:	4770      	bx	lr
24019eaa:	0000      	movs	r0, r0
24019eac:	0000      	movs	r0, r0
	...

24019eb0 <__math_check_oflow>:
24019eb0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 24019ed0 <__math_check_oflow+0x20>
24019eb4:	eeb0 7bc0 	vabs.f64	d7, d0
24019eb8:	eeb4 7b46 	vcmp.f64	d7, d6
24019ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019ec0:	dd02      	ble.n	24019ec8 <__math_check_oflow+0x18>
24019ec2:	2022      	movs	r0, #34	; 0x22
24019ec4:	f7ff bfba 	b.w	24019e3c <with_errno>
24019ec8:	4770      	bx	lr
24019eca:	bf00      	nop
24019ecc:	f3af 8000 	nop.w
24019ed0:	ffffffff 	.word	0xffffffff
24019ed4:	7fefffff 	.word	0x7fefffff

24019ed8 <checkint>:
24019ed8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
24019edc:	2b7e      	cmp	r3, #126	; 0x7e
24019ede:	dd10      	ble.n	24019f02 <checkint+0x2a>
24019ee0:	2b96      	cmp	r3, #150	; 0x96
24019ee2:	dc0c      	bgt.n	24019efe <checkint+0x26>
24019ee4:	2201      	movs	r2, #1
24019ee6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
24019eea:	fa02 f303 	lsl.w	r3, r2, r3
24019eee:	1e5a      	subs	r2, r3, #1
24019ef0:	4202      	tst	r2, r0
24019ef2:	d106      	bne.n	24019f02 <checkint+0x2a>
24019ef4:	4203      	tst	r3, r0
24019ef6:	bf0c      	ite	eq
24019ef8:	2002      	moveq	r0, #2
24019efa:	2001      	movne	r0, #1
24019efc:	4770      	bx	lr
24019efe:	2002      	movs	r0, #2
24019f00:	4770      	bx	lr
24019f02:	2000      	movs	r0, #0
24019f04:	4770      	bx	lr
	...

24019f08 <powf>:
24019f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
24019f0a:	ee10 1a10 	vmov	r1, s0
24019f0e:	ee10 4a90 	vmov	r4, s1
24019f12:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
24019f16:	0062      	lsls	r2, r4, #1
24019f18:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
24019f1c:	eef0 7a40 	vmov.f32	s15, s0
24019f20:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
24019f24:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
24019f28:	d252      	bcs.n	24019fd0 <powf+0xc8>
24019f2a:	4298      	cmp	r0, r3
24019f2c:	d252      	bcs.n	24019fd4 <powf+0xcc>
24019f2e:	2000      	movs	r0, #0
24019f30:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
24019f34:	4a9e      	ldr	r2, [pc, #632]	; (2401a1b0 <powf+0x2a8>)
24019f36:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
24019f3a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
24019f3e:	f3c3 44c3 	ubfx	r4, r3, #19, #4
24019f42:	0ddb      	lsrs	r3, r3, #23
24019f44:	eb02 1404 	add.w	r4, r2, r4, lsl #4
24019f48:	05db      	lsls	r3, r3, #23
24019f4a:	ed94 5b00 	vldr	d5, [r4]
24019f4e:	1ac9      	subs	r1, r1, r3
24019f50:	ee07 1a90 	vmov	s15, r1
24019f54:	15db      	asrs	r3, r3, #23
24019f56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
24019f5a:	eea5 6b07 	vfma.f64	d6, d5, d7
24019f5e:	ed94 5b02 	vldr	d5, [r4, #8]
24019f62:	ee26 2b06 	vmul.f64	d2, d6, d6
24019f66:	ee22 1b02 	vmul.f64	d1, d2, d2
24019f6a:	ee07 3a90 	vmov	s15, r3
24019f6e:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
24019f72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
24019f76:	ee37 7b05 	vadd.f64	d7, d7, d5
24019f7a:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
24019f7e:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
24019f82:	eea6 3b05 	vfma.f64	d3, d6, d5
24019f86:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
24019f8a:	eea6 5b04 	vfma.f64	d5, d6, d4
24019f8e:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
24019f92:	eea6 7b04 	vfma.f64	d7, d6, d4
24019f96:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
24019f9a:	eea2 7b05 	vfma.f64	d7, d2, d5
24019f9e:	eea3 7b01 	vfma.f64	d7, d3, d1
24019fa2:	ee26 6b07 	vmul.f64	d6, d6, d7
24019fa6:	ee16 3a90 	vmov	r3, s13
24019faa:	f3c3 32cf 	ubfx	r2, r3, #15, #16
24019fae:	f248 03bf 	movw	r3, #32959	; 0x80bf
24019fb2:	429a      	cmp	r2, r3
24019fb4:	f0c0 80b0 	bcc.w	2401a118 <powf+0x210>
24019fb8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 2401a190 <powf+0x288>
24019fbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
24019fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
24019fc4:	dd78      	ble.n	2401a0b8 <powf+0x1b0>
24019fc6:	b003      	add	sp, #12
24019fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
24019fcc:	f000 b91a 	b.w	2401a204 <__math_oflowf>
24019fd0:	4298      	cmp	r0, r3
24019fd2:	d32d      	bcc.n	2401a030 <powf+0x128>
24019fd4:	b952      	cbnz	r2, 24019fec <powf+0xe4>
24019fd6:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
24019fda:	0049      	lsls	r1, r1, #1
24019fdc:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
24019fe0:	f240 80c8 	bls.w	2401a174 <powf+0x26c>
24019fe4:	ee37 0aa0 	vadd.f32	s0, s15, s1
24019fe8:	b003      	add	sp, #12
24019fea:	bd30      	pop	{r4, r5, pc}
24019fec:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
24019ff0:	d105      	bne.n	24019ffe <powf+0xf6>
24019ff2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
24019ff6:	0064      	lsls	r4, r4, #1
24019ff8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
24019ffc:	e7f0      	b.n	24019fe0 <powf+0xd8>
24019ffe:	0049      	lsls	r1, r1, #1
2401a000:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
2401a004:	d8ee      	bhi.n	24019fe4 <powf+0xdc>
2401a006:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
2401a00a:	d1eb      	bne.n	24019fe4 <powf+0xdc>
2401a00c:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
2401a010:	f000 80b0 	beq.w	2401a174 <powf+0x26c>
2401a014:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
2401a018:	ea6f 0404 	mvn.w	r4, r4
2401a01c:	bf34      	ite	cc
2401a01e:	2100      	movcc	r1, #0
2401a020:	2101      	movcs	r1, #1
2401a022:	0fe4      	lsrs	r4, r4, #31
2401a024:	42a1      	cmp	r1, r4
2401a026:	f040 80a8 	bne.w	2401a17a <powf+0x272>
2401a02a:	ee20 0aa0 	vmul.f32	s0, s1, s1
2401a02e:	e7db      	b.n	24019fe8 <powf+0xe0>
2401a030:	004d      	lsls	r5, r1, #1
2401a032:	1e6a      	subs	r2, r5, #1
2401a034:	429a      	cmp	r2, r3
2401a036:	d31c      	bcc.n	2401a072 <powf+0x16a>
2401a038:	2900      	cmp	r1, #0
2401a03a:	ee20 0a00 	vmul.f32	s0, s0, s0
2401a03e:	da0f      	bge.n	2401a060 <powf+0x158>
2401a040:	ee10 0a90 	vmov	r0, s1
2401a044:	f7ff ff48 	bl	24019ed8 <checkint>
2401a048:	2801      	cmp	r0, #1
2401a04a:	d109      	bne.n	2401a060 <powf+0x158>
2401a04c:	eeb1 0a40 	vneg.f32	s0, s0
2401a050:	b945      	cbnz	r5, 2401a064 <powf+0x15c>
2401a052:	2c00      	cmp	r4, #0
2401a054:	dac8      	bge.n	24019fe8 <powf+0xe0>
2401a056:	b003      	add	sp, #12
2401a058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401a05c:	f000 b8d8 	b.w	2401a210 <__math_divzerof>
2401a060:	2000      	movs	r0, #0
2401a062:	e7f5      	b.n	2401a050 <powf+0x148>
2401a064:	2c00      	cmp	r4, #0
2401a066:	dabf      	bge.n	24019fe8 <powf+0xe0>
2401a068:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2401a06c:	ee87 0a80 	vdiv.f32	s0, s15, s0
2401a070:	e7ba      	b.n	24019fe8 <powf+0xe0>
2401a072:	2900      	cmp	r1, #0
2401a074:	da1e      	bge.n	2401a0b4 <powf+0x1ac>
2401a076:	ee10 0a90 	vmov	r0, s1
2401a07a:	f7ff ff2d 	bl	24019ed8 <checkint>
2401a07e:	b920      	cbnz	r0, 2401a08a <powf+0x182>
2401a080:	b003      	add	sp, #12
2401a082:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401a086:	f000 b8d5 	b.w	2401a234 <__math_invalidf>
2401a08a:	1e43      	subs	r3, r0, #1
2401a08c:	4258      	negs	r0, r3
2401a08e:	4158      	adcs	r0, r3
2401a090:	0400      	lsls	r0, r0, #16
2401a092:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2401a096:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
2401a09a:	f4bf af49 	bcs.w	24019f30 <powf+0x28>
2401a09e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 2401a1b4 <powf+0x2ac>
2401a0a2:	ee27 0a87 	vmul.f32	s0, s15, s14
2401a0a6:	ee10 3a10 	vmov	r3, s0
2401a0aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401a0ae:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
2401a0b2:	e73d      	b.n	24019f30 <powf+0x28>
2401a0b4:	2000      	movs	r0, #0
2401a0b6:	e7ee      	b.n	2401a096 <powf+0x18e>
2401a0b8:	ed9f 7b37 	vldr	d7, [pc, #220]	; 2401a198 <powf+0x290>
2401a0bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
2401a0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a0c4:	dd10      	ble.n	2401a0e8 <powf+0x1e0>
2401a0c6:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
2401a0ca:	2800      	cmp	r0, #0
2401a0cc:	d158      	bne.n	2401a180 <powf+0x278>
2401a0ce:	9300      	str	r3, [sp, #0]
2401a0d0:	eddd 7a00 	vldr	s15, [sp]
2401a0d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a0d8:	ee77 7a87 	vadd.f32	s15, s15, s14
2401a0dc:	eef4 7a47 	vcmp.f32	s15, s14
2401a0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a0e4:	f47f af6f 	bne.w	24019fc6 <powf+0xbe>
2401a0e8:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 2401a1a0 <powf+0x298>
2401a0ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
2401a0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a0f4:	d804      	bhi.n	2401a100 <powf+0x1f8>
2401a0f6:	b003      	add	sp, #12
2401a0f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401a0fc:	f000 b876 	b.w	2401a1ec <__math_uflowf>
2401a100:	ed9f 7b29 	vldr	d7, [pc, #164]	; 2401a1a8 <powf+0x2a0>
2401a104:	eeb4 6bc7 	vcmpe.f64	d6, d7
2401a108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a10c:	d504      	bpl.n	2401a118 <powf+0x210>
2401a10e:	b003      	add	sp, #12
2401a110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2401a114:	f000 b870 	b.w	2401a1f8 <__math_may_uflowf>
2401a118:	4b27      	ldr	r3, [pc, #156]	; (2401a1b8 <powf+0x2b0>)
2401a11a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401a11e:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
2401a122:	ee36 7b05 	vadd.f64	d7, d6, d5
2401a126:	ee17 2a10 	vmov	r2, s14
2401a12a:	ee37 7b45 	vsub.f64	d7, d7, d5
2401a12e:	f002 011f 	and.w	r1, r2, #31
2401a132:	ee36 7b47 	vsub.f64	d7, d6, d7
2401a136:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
2401a13a:	ee27 4b07 	vmul.f64	d4, d7, d7
2401a13e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
2401a142:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
2401a146:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
2401a14a:	eea7 6b05 	vfma.f64	d6, d7, d5
2401a14e:	686d      	ldr	r5, [r5, #4]
2401a150:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
2401a154:	1882      	adds	r2, r0, r2
2401a156:	2300      	movs	r3, #0
2401a158:	1918      	adds	r0, r3, r4
2401a15a:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
2401a15e:	eea7 0b05 	vfma.f64	d0, d7, d5
2401a162:	ec41 0b17 	vmov	d7, r0, r1
2401a166:	eea6 0b04 	vfma.f64	d0, d6, d4
2401a16a:	ee20 0b07 	vmul.f64	d0, d0, d7
2401a16e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
2401a172:	e739      	b.n	24019fe8 <powf+0xe0>
2401a174:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401a178:	e736      	b.n	24019fe8 <powf+0xe0>
2401a17a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 2401a1bc <powf+0x2b4>
2401a17e:	e733      	b.n	24019fe8 <powf+0xe0>
2401a180:	9301      	str	r3, [sp, #4]
2401a182:	eddd 7a01 	vldr	s15, [sp, #4]
2401a186:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
2401a18a:	ee77 7a67 	vsub.f32	s15, s14, s15
2401a18e:	e7a5      	b.n	2401a0dc <powf+0x1d4>
2401a190:	ffd1d571 	.word	0xffd1d571
2401a194:	405fffff 	.word	0x405fffff
2401a198:	ffa3aae2 	.word	0xffa3aae2
2401a19c:	405fffff 	.word	0x405fffff
2401a1a0:	00000000 	.word	0x00000000
2401a1a4:	c062c000 	.word	0xc062c000
2401a1a8:	00000000 	.word	0x00000000
2401a1ac:	c062a000 	.word	0xc062a000
2401a1b0:	2402b4f0 	.word	0x2402b4f0
2401a1b4:	4b000000 	.word	0x4b000000
2401a1b8:	2402a3d8 	.word	0x2402a3d8
2401a1bc:	00000000 	.word	0x00000000

2401a1c0 <with_errnof>:
2401a1c0:	b513      	push	{r0, r1, r4, lr}
2401a1c2:	4604      	mov	r4, r0
2401a1c4:	ed8d 0a01 	vstr	s0, [sp, #4]
2401a1c8:	f7ff fbee 	bl	240199a8 <__errno>
2401a1cc:	ed9d 0a01 	vldr	s0, [sp, #4]
2401a1d0:	6004      	str	r4, [r0, #0]
2401a1d2:	b002      	add	sp, #8
2401a1d4:	bd10      	pop	{r4, pc}

2401a1d6 <xflowf>:
2401a1d6:	b130      	cbz	r0, 2401a1e6 <xflowf+0x10>
2401a1d8:	eef1 7a40 	vneg.f32	s15, s0
2401a1dc:	ee27 0a80 	vmul.f32	s0, s15, s0
2401a1e0:	2022      	movs	r0, #34	; 0x22
2401a1e2:	f7ff bfed 	b.w	2401a1c0 <with_errnof>
2401a1e6:	eef0 7a40 	vmov.f32	s15, s0
2401a1ea:	e7f7      	b.n	2401a1dc <xflowf+0x6>

2401a1ec <__math_uflowf>:
2401a1ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401a1f4 <__math_uflowf+0x8>
2401a1f0:	f7ff bff1 	b.w	2401a1d6 <xflowf>
2401a1f4:	10000000 	.word	0x10000000

2401a1f8 <__math_may_uflowf>:
2401a1f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401a200 <__math_may_uflowf+0x8>
2401a1fc:	f7ff bfeb 	b.w	2401a1d6 <xflowf>
2401a200:	1a200000 	.word	0x1a200000

2401a204 <__math_oflowf>:
2401a204:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401a20c <__math_oflowf+0x8>
2401a208:	f7ff bfe5 	b.w	2401a1d6 <xflowf>
2401a20c:	70000000 	.word	0x70000000

2401a210 <__math_divzerof>:
2401a210:	ed9f 0a07 	vldr	s0, [pc, #28]	; 2401a230 <__math_divzerof+0x20>
2401a214:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401a218:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a21c:	2800      	cmp	r0, #0
2401a21e:	f04f 0022 	mov.w	r0, #34	; 0x22
2401a222:	fe47 7a27 	vseleq.f32	s15, s14, s15
2401a226:	ee87 0a80 	vdiv.f32	s0, s15, s0
2401a22a:	f7ff bfc9 	b.w	2401a1c0 <with_errnof>
2401a22e:	bf00      	nop
2401a230:	00000000 	.word	0x00000000

2401a234 <__math_invalidf>:
2401a234:	eef0 7a40 	vmov.f32	s15, s0
2401a238:	ee30 7a40 	vsub.f32	s14, s0, s0
2401a23c:	eef4 7a67 	vcmp.f32	s15, s15
2401a240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a244:	ee87 0a07 	vdiv.f32	s0, s14, s14
2401a248:	d602      	bvs.n	2401a250 <__math_invalidf+0x1c>
2401a24a:	2021      	movs	r0, #33	; 0x21
2401a24c:	f7ff bfb8 	b.w	2401a1c0 <with_errnof>
2401a250:	4770      	bx	lr
	...

2401a254 <log10f>:
2401a254:	b508      	push	{r3, lr}
2401a256:	ed2d 8b02 	vpush	{d8}
2401a25a:	eeb0 8a40 	vmov.f32	s16, s0
2401a25e:	f000 f9df 	bl	2401a620 <__ieee754_log10f>
2401a262:	eeb4 8a48 	vcmp.f32	s16, s16
2401a266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a26a:	d60f      	bvs.n	2401a28c <log10f+0x38>
2401a26c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
2401a270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a274:	d80a      	bhi.n	2401a28c <log10f+0x38>
2401a276:	eeb5 8a40 	vcmp.f32	s16, #0.0
2401a27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a27e:	d108      	bne.n	2401a292 <log10f+0x3e>
2401a280:	f7ff fb92 	bl	240199a8 <__errno>
2401a284:	2322      	movs	r3, #34	; 0x22
2401a286:	ed9f 0a08 	vldr	s0, [pc, #32]	; 2401a2a8 <log10f+0x54>
2401a28a:	6003      	str	r3, [r0, #0]
2401a28c:	ecbd 8b02 	vpop	{d8}
2401a290:	bd08      	pop	{r3, pc}
2401a292:	f7ff fb89 	bl	240199a8 <__errno>
2401a296:	ecbd 8b02 	vpop	{d8}
2401a29a:	2321      	movs	r3, #33	; 0x21
2401a29c:	6003      	str	r3, [r0, #0]
2401a29e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
2401a2a2:	4802      	ldr	r0, [pc, #8]	; (2401a2ac <log10f+0x58>)
2401a2a4:	f000 b80c 	b.w	2401a2c0 <nanf>
2401a2a8:	ff800000 	.word	0xff800000
2401a2ac:	2402a3d4 	.word	0x2402a3d4

2401a2b0 <fabsf>:
2401a2b0:	ee10 3a10 	vmov	r3, s0
2401a2b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401a2b8:	ee00 3a10 	vmov	s0, r3
2401a2bc:	4770      	bx	lr
	...

2401a2c0 <nanf>:
2401a2c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2401a2c8 <nanf+0x8>
2401a2c4:	4770      	bx	lr
2401a2c6:	bf00      	nop
2401a2c8:	7fc00000 	.word	0x7fc00000

2401a2cc <tanf>:
2401a2cc:	ee10 3a10 	vmov	r3, s0
2401a2d0:	b507      	push	{r0, r1, r2, lr}
2401a2d2:	4a12      	ldr	r2, [pc, #72]	; (2401a31c <tanf+0x50>)
2401a2d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401a2d8:	4293      	cmp	r3, r2
2401a2da:	dc07      	bgt.n	2401a2ec <tanf+0x20>
2401a2dc:	eddf 0a10 	vldr	s1, [pc, #64]	; 2401a320 <tanf+0x54>
2401a2e0:	2001      	movs	r0, #1
2401a2e2:	b003      	add	sp, #12
2401a2e4:	f85d eb04 	ldr.w	lr, [sp], #4
2401a2e8:	f000 b8ba 	b.w	2401a460 <__kernel_tanf>
2401a2ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401a2f0:	db04      	blt.n	2401a2fc <tanf+0x30>
2401a2f2:	ee30 0a40 	vsub.f32	s0, s0, s0
2401a2f6:	b003      	add	sp, #12
2401a2f8:	f85d fb04 	ldr.w	pc, [sp], #4
2401a2fc:	4668      	mov	r0, sp
2401a2fe:	f000 f9e7 	bl	2401a6d0 <__ieee754_rem_pio2f>
2401a302:	0040      	lsls	r0, r0, #1
2401a304:	f000 0002 	and.w	r0, r0, #2
2401a308:	eddd 0a01 	vldr	s1, [sp, #4]
2401a30c:	ed9d 0a00 	vldr	s0, [sp]
2401a310:	f1c0 0001 	rsb	r0, r0, #1
2401a314:	f000 f8a4 	bl	2401a460 <__kernel_tanf>
2401a318:	e7ed      	b.n	2401a2f6 <tanf+0x2a>
2401a31a:	bf00      	nop
2401a31c:	3f490fda 	.word	0x3f490fda
2401a320:	00000000 	.word	0x00000000

2401a324 <tanhf>:
2401a324:	b538      	push	{r3, r4, r5, lr}
2401a326:	ee10 5a10 	vmov	r5, s0
2401a32a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
2401a32e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401a332:	ed2d 8b02 	vpush	{d8}
2401a336:	db0f      	blt.n	2401a358 <tanhf+0x34>
2401a338:	4b2a      	ldr	r3, [pc, #168]	; (2401a3e4 <tanhf+0xc0>)
2401a33a:	ed93 6a00 	vldr	s12, [r3]
2401a33e:	edd3 6a00 	vldr	s13, [r3]
2401a342:	eec6 7a00 	vdiv.f32	s15, s12, s0
2401a346:	2d00      	cmp	r5, #0
2401a348:	bfac      	ite	ge
2401a34a:	ee37 0aa6 	vaddge.f32	s0, s15, s13
2401a34e:	ee37 0ae6 	vsublt.f32	s0, s15, s13
2401a352:	ecbd 8b02 	vpop	{d8}
2401a356:	bd38      	pop	{r3, r4, r5, pc}
2401a358:	4a23      	ldr	r2, [pc, #140]	; (2401a3e8 <tanhf+0xc4>)
2401a35a:	4293      	cmp	r3, r2
2401a35c:	dc39      	bgt.n	2401a3d2 <tanhf+0xae>
2401a35e:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
2401a362:	da07      	bge.n	2401a374 <tanhf+0x50>
2401a364:	4b1f      	ldr	r3, [pc, #124]	; (2401a3e4 <tanhf+0xc0>)
2401a366:	edd3 7a00 	vldr	s15, [r3]
2401a36a:	ee77 7a80 	vadd.f32	s15, s15, s0
2401a36e:	ee27 0a80 	vmul.f32	s0, s15, s0
2401a372:	e7ee      	b.n	2401a352 <tanhf+0x2e>
2401a374:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
2401a378:	4c1c      	ldr	r4, [pc, #112]	; (2401a3ec <tanhf+0xc8>)
2401a37a:	db19      	blt.n	2401a3b0 <tanhf+0x8c>
2401a37c:	f7ff ff98 	bl	2401a2b0 <fabsf>
2401a380:	edd4 7a00 	vldr	s15, [r4]
2401a384:	ee20 0a27 	vmul.f32	s0, s0, s15
2401a388:	f000 ffc2 	bl	2401b310 <expm1f>
2401a38c:	4b15      	ldr	r3, [pc, #84]	; (2401a3e4 <tanhf+0xc0>)
2401a38e:	edd3 7a00 	vldr	s15, [r3]
2401a392:	edd4 6a00 	vldr	s13, [r4]
2401a396:	ed94 7a00 	vldr	s14, [r4]
2401a39a:	ee37 0a00 	vadd.f32	s0, s14, s0
2401a39e:	ee86 7a80 	vdiv.f32	s14, s13, s0
2401a3a2:	ee37 0ac7 	vsub.f32	s0, s15, s14
2401a3a6:	2d00      	cmp	r5, #0
2401a3a8:	bfb8      	it	lt
2401a3aa:	eeb1 0a40 	vneglt.f32	s0, s0
2401a3ae:	e7d0      	b.n	2401a352 <tanhf+0x2e>
2401a3b0:	ed94 8a00 	vldr	s16, [r4]
2401a3b4:	f7ff ff7c 	bl	2401a2b0 <fabsf>
2401a3b8:	ee28 0a40 	vnmul.f32	s0, s16, s0
2401a3bc:	f000 ffa8 	bl	2401b310 <expm1f>
2401a3c0:	edd4 7a00 	vldr	s15, [r4]
2401a3c4:	ee77 7a80 	vadd.f32	s15, s15, s0
2401a3c8:	eeb1 7a40 	vneg.f32	s14, s0
2401a3cc:	ee87 0a27 	vdiv.f32	s0, s14, s15
2401a3d0:	e7e9      	b.n	2401a3a6 <tanhf+0x82>
2401a3d2:	4b04      	ldr	r3, [pc, #16]	; (2401a3e4 <tanhf+0xc0>)
2401a3d4:	ed93 0a00 	vldr	s0, [r3]
2401a3d8:	4b05      	ldr	r3, [pc, #20]	; (2401a3f0 <tanhf+0xcc>)
2401a3da:	edd3 7a00 	vldr	s15, [r3]
2401a3de:	ee30 0a67 	vsub.f32	s0, s0, s15
2401a3e2:	e7e0      	b.n	2401a3a6 <tanhf+0x82>
2401a3e4:	20000a10 	.word	0x20000a10
2401a3e8:	41afffff 	.word	0x41afffff
2401a3ec:	20000a18 	.word	0x20000a18
2401a3f0:	20000a14 	.word	0x20000a14
2401a3f4:	00000000 	.word	0x00000000

2401a3f8 <tan>:
2401a3f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
2401a3fa:	eeb0 7b40 	vmov.f64	d7, d0
2401a3fe:	ee17 3a90 	vmov	r3, s15
2401a402:	4a15      	ldr	r2, [pc, #84]	; (2401a458 <tan+0x60>)
2401a404:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
2401a408:	4293      	cmp	r3, r2
2401a40a:	dc07      	bgt.n	2401a41c <tan+0x24>
2401a40c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 2401a450 <tan+0x58>
2401a410:	2001      	movs	r0, #1
2401a412:	b005      	add	sp, #20
2401a414:	f85d eb04 	ldr.w	lr, [sp], #4
2401a418:	f000 be5e 	b.w	2401b0d8 <__kernel_tan>
2401a41c:	4a0f      	ldr	r2, [pc, #60]	; (2401a45c <tan+0x64>)
2401a41e:	4293      	cmp	r3, r2
2401a420:	dd04      	ble.n	2401a42c <tan+0x34>
2401a422:	ee30 0b40 	vsub.f64	d0, d0, d0
2401a426:	b005      	add	sp, #20
2401a428:	f85d fb04 	ldr.w	pc, [sp], #4
2401a42c:	4668      	mov	r0, sp
2401a42e:	f000 fa7b 	bl	2401a928 <__ieee754_rem_pio2>
2401a432:	0040      	lsls	r0, r0, #1
2401a434:	f000 0002 	and.w	r0, r0, #2
2401a438:	ed9d 1b02 	vldr	d1, [sp, #8]
2401a43c:	ed9d 0b00 	vldr	d0, [sp]
2401a440:	f1c0 0001 	rsb	r0, r0, #1
2401a444:	f000 fe48 	bl	2401b0d8 <__kernel_tan>
2401a448:	e7ed      	b.n	2401a426 <tan+0x2e>
2401a44a:	bf00      	nop
2401a44c:	f3af 8000 	nop.w
	...
2401a458:	3fe921fb 	.word	0x3fe921fb
2401a45c:	7fefffff 	.word	0x7fefffff

2401a460 <__kernel_tanf>:
2401a460:	b508      	push	{r3, lr}
2401a462:	ee10 3a10 	vmov	r3, s0
2401a466:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2401a46a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
2401a46e:	eef0 7a40 	vmov.f32	s15, s0
2401a472:	da17      	bge.n	2401a4a4 <__kernel_tanf+0x44>
2401a474:	eebd 7ac0 	vcvt.s32.f32	s14, s0
2401a478:	ee17 1a10 	vmov	r1, s14
2401a47c:	bb41      	cbnz	r1, 2401a4d0 <__kernel_tanf+0x70>
2401a47e:	1c43      	adds	r3, r0, #1
2401a480:	4313      	orrs	r3, r2
2401a482:	d108      	bne.n	2401a496 <__kernel_tanf+0x36>
2401a484:	f7ff ff14 	bl	2401a2b0 <fabsf>
2401a488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a48c:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401a490:	eeb0 0a67 	vmov.f32	s0, s15
2401a494:	bd08      	pop	{r3, pc}
2401a496:	2801      	cmp	r0, #1
2401a498:	d0fa      	beq.n	2401a490 <__kernel_tanf+0x30>
2401a49a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
2401a49e:	eec7 7a00 	vdiv.f32	s15, s14, s0
2401a4a2:	e7f5      	b.n	2401a490 <__kernel_tanf+0x30>
2401a4a4:	494c      	ldr	r1, [pc, #304]	; (2401a5d8 <__kernel_tanf+0x178>)
2401a4a6:	428a      	cmp	r2, r1
2401a4a8:	db12      	blt.n	2401a4d0 <__kernel_tanf+0x70>
2401a4aa:	2b00      	cmp	r3, #0
2401a4ac:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 2401a5dc <__kernel_tanf+0x17c>
2401a4b0:	bfb8      	it	lt
2401a4b2:	eef1 7a40 	vneglt.f32	s15, s0
2401a4b6:	ee37 7a67 	vsub.f32	s14, s14, s15
2401a4ba:	eddf 7a49 	vldr	s15, [pc, #292]	; 2401a5e0 <__kernel_tanf+0x180>
2401a4be:	bfb8      	it	lt
2401a4c0:	eef1 0a60 	vneglt.f32	s1, s1
2401a4c4:	ee77 7ae0 	vsub.f32	s15, s15, s1
2401a4c8:	eddf 0a46 	vldr	s1, [pc, #280]	; 2401a5e4 <__kernel_tanf+0x184>
2401a4cc:	ee77 7a87 	vadd.f32	s15, s15, s14
2401a4d0:	ee67 6aa7 	vmul.f32	s13, s15, s15
2401a4d4:	eddf 5a44 	vldr	s11, [pc, #272]	; 2401a5e8 <__kernel_tanf+0x188>
2401a4d8:	ed9f 6a44 	vldr	s12, [pc, #272]	; 2401a5ec <__kernel_tanf+0x18c>
2401a4dc:	ed9f 5a44 	vldr	s10, [pc, #272]	; 2401a5f0 <__kernel_tanf+0x190>
2401a4e0:	493d      	ldr	r1, [pc, #244]	; (2401a5d8 <__kernel_tanf+0x178>)
2401a4e2:	ee26 7aa6 	vmul.f32	s14, s13, s13
2401a4e6:	428a      	cmp	r2, r1
2401a4e8:	eea7 6a25 	vfma.f32	s12, s14, s11
2401a4ec:	eddf 5a41 	vldr	s11, [pc, #260]	; 2401a5f4 <__kernel_tanf+0x194>
2401a4f0:	eee6 5a07 	vfma.f32	s11, s12, s14
2401a4f4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 2401a5f8 <__kernel_tanf+0x198>
2401a4f8:	eea5 6a87 	vfma.f32	s12, s11, s14
2401a4fc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 2401a5fc <__kernel_tanf+0x19c>
2401a500:	eee6 5a07 	vfma.f32	s11, s12, s14
2401a504:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 2401a600 <__kernel_tanf+0x1a0>
2401a508:	eea5 6a87 	vfma.f32	s12, s11, s14
2401a50c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 2401a604 <__kernel_tanf+0x1a4>
2401a510:	eee7 5a05 	vfma.f32	s11, s14, s10
2401a514:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 2401a608 <__kernel_tanf+0x1a8>
2401a518:	eea5 5a87 	vfma.f32	s10, s11, s14
2401a51c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 2401a60c <__kernel_tanf+0x1ac>
2401a520:	eee5 5a07 	vfma.f32	s11, s10, s14
2401a524:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 2401a610 <__kernel_tanf+0x1b0>
2401a528:	eea5 5a87 	vfma.f32	s10, s11, s14
2401a52c:	eddf 5a39 	vldr	s11, [pc, #228]	; 2401a614 <__kernel_tanf+0x1b4>
2401a530:	eee5 5a07 	vfma.f32	s11, s10, s14
2401a534:	eeb0 7a46 	vmov.f32	s14, s12
2401a538:	eea5 7aa6 	vfma.f32	s14, s11, s13
2401a53c:	ee27 5aa6 	vmul.f32	s10, s15, s13
2401a540:	eeb0 6a60 	vmov.f32	s12, s1
2401a544:	eea7 6a05 	vfma.f32	s12, s14, s10
2401a548:	ed9f 7a33 	vldr	s14, [pc, #204]	; 2401a618 <__kernel_tanf+0x1b8>
2401a54c:	eee6 0a26 	vfma.f32	s1, s12, s13
2401a550:	eee5 0a07 	vfma.f32	s1, s10, s14
2401a554:	ee77 6aa0 	vadd.f32	s13, s15, s1
2401a558:	db1d      	blt.n	2401a596 <__kernel_tanf+0x136>
2401a55a:	ee07 0a10 	vmov	s14, r0
2401a55e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401a562:	ee66 5aa6 	vmul.f32	s11, s13, s13
2401a566:	ee76 6a87 	vadd.f32	s13, s13, s14
2401a56a:	179b      	asrs	r3, r3, #30
2401a56c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
2401a570:	f003 0302 	and.w	r3, r3, #2
2401a574:	f1c3 0301 	rsb	r3, r3, #1
2401a578:	ee76 6a60 	vsub.f32	s13, s12, s1
2401a57c:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401a580:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
2401a584:	eea7 7ae6 	vfms.f32	s14, s15, s13
2401a588:	ee07 3a90 	vmov	s15, r3
2401a58c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401a590:	ee67 7a87 	vmul.f32	s15, s15, s14
2401a594:	e77c      	b.n	2401a490 <__kernel_tanf+0x30>
2401a596:	2801      	cmp	r0, #1
2401a598:	d01b      	beq.n	2401a5d2 <__kernel_tanf+0x172>
2401a59a:	4b20      	ldr	r3, [pc, #128]	; (2401a61c <__kernel_tanf+0x1bc>)
2401a59c:	ee16 2a90 	vmov	r2, s13
2401a5a0:	401a      	ands	r2, r3
2401a5a2:	ee05 2a90 	vmov	s11, r2
2401a5a6:	ee75 7ae7 	vsub.f32	s15, s11, s15
2401a5aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2401a5ae:	ee70 0ae7 	vsub.f32	s1, s1, s15
2401a5b2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401a5b6:	ee87 6aa6 	vdiv.f32	s12, s15, s13
2401a5ba:	ee16 2a10 	vmov	r2, s12
2401a5be:	4013      	ands	r3, r2
2401a5c0:	ee07 3a90 	vmov	s15, r3
2401a5c4:	eea5 7aa7 	vfma.f32	s14, s11, s15
2401a5c8:	eea0 7aa7 	vfma.f32	s14, s1, s15
2401a5cc:	eee7 7a06 	vfma.f32	s15, s14, s12
2401a5d0:	e75e      	b.n	2401a490 <__kernel_tanf+0x30>
2401a5d2:	eef0 7a66 	vmov.f32	s15, s13
2401a5d6:	e75b      	b.n	2401a490 <__kernel_tanf+0x30>
2401a5d8:	3f2ca140 	.word	0x3f2ca140
2401a5dc:	3f490fda 	.word	0x3f490fda
2401a5e0:	33222168 	.word	0x33222168
2401a5e4:	00000000 	.word	0x00000000
2401a5e8:	b79bae5f 	.word	0xb79bae5f
2401a5ec:	38a3f445 	.word	0x38a3f445
2401a5f0:	37d95384 	.word	0x37d95384
2401a5f4:	3a1a26c8 	.word	0x3a1a26c8
2401a5f8:	3b6b6916 	.word	0x3b6b6916
2401a5fc:	3cb327a4 	.word	0x3cb327a4
2401a600:	3e088889 	.word	0x3e088889
2401a604:	3895c07a 	.word	0x3895c07a
2401a608:	398137b9 	.word	0x398137b9
2401a60c:	3abede48 	.word	0x3abede48
2401a610:	3c11371f 	.word	0x3c11371f
2401a614:	3d5d0dd1 	.word	0x3d5d0dd1
2401a618:	3eaaaaab 	.word	0x3eaaaaab
2401a61c:	fffff000 	.word	0xfffff000

2401a620 <__ieee754_log10f>:
2401a620:	b508      	push	{r3, lr}
2401a622:	ee10 2a10 	vmov	r2, s0
2401a626:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
2401a62a:	ed2d 8b02 	vpush	{d8}
2401a62e:	d108      	bne.n	2401a642 <__ieee754_log10f+0x22>
2401a630:	ed9f 7a21 	vldr	s14, [pc, #132]	; 2401a6b8 <__ieee754_log10f+0x98>
2401a634:	eddf 7a21 	vldr	s15, [pc, #132]	; 2401a6bc <__ieee754_log10f+0x9c>
2401a638:	ee87 0a27 	vdiv.f32	s0, s14, s15
2401a63c:	ecbd 8b02 	vpop	{d8}
2401a640:	bd08      	pop	{r3, pc}
2401a642:	2a00      	cmp	r2, #0
2401a644:	da02      	bge.n	2401a64c <__ieee754_log10f+0x2c>
2401a646:	ee30 7a40 	vsub.f32	s14, s0, s0
2401a64a:	e7f3      	b.n	2401a634 <__ieee754_log10f+0x14>
2401a64c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401a650:	db02      	blt.n	2401a658 <__ieee754_log10f+0x38>
2401a652:	ee30 0a00 	vadd.f32	s0, s0, s0
2401a656:	e7f1      	b.n	2401a63c <__ieee754_log10f+0x1c>
2401a658:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
2401a65c:	bfbf      	itttt	lt
2401a65e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 2401a6c0 <__ieee754_log10f+0xa0>
2401a662:	ee60 7a27 	vmullt.f32	s15, s0, s15
2401a666:	f06f 0118 	mvnlt.w	r1, #24
2401a66a:	ee17 2a90 	vmovlt	r2, s15
2401a66e:	ea4f 53e2 	mov.w	r3, r2, asr #23
2401a672:	bfa8      	it	ge
2401a674:	2100      	movge	r1, #0
2401a676:	3b7f      	subs	r3, #127	; 0x7f
2401a678:	440b      	add	r3, r1
2401a67a:	0fd9      	lsrs	r1, r3, #31
2401a67c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
2401a680:	ee07 3a90 	vmov	s15, r3
2401a684:	f3c2 0216 	ubfx	r2, r2, #0, #23
2401a688:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
2401a68c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
2401a690:	ee00 3a10 	vmov	s0, r3
2401a694:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
2401a698:	f7ff fa32 	bl	24019b00 <logf>
2401a69c:	eddf 7a09 	vldr	s15, [pc, #36]	; 2401a6c4 <__ieee754_log10f+0xa4>
2401a6a0:	ee20 0a27 	vmul.f32	s0, s0, s15
2401a6a4:	eddf 7a08 	vldr	s15, [pc, #32]	; 2401a6c8 <__ieee754_log10f+0xa8>
2401a6a8:	eea8 0a27 	vfma.f32	s0, s16, s15
2401a6ac:	eddf 7a07 	vldr	s15, [pc, #28]	; 2401a6cc <__ieee754_log10f+0xac>
2401a6b0:	eea8 0a27 	vfma.f32	s0, s16, s15
2401a6b4:	e7c2      	b.n	2401a63c <__ieee754_log10f+0x1c>
2401a6b6:	bf00      	nop
2401a6b8:	cc000000 	.word	0xcc000000
2401a6bc:	00000000 	.word	0x00000000
2401a6c0:	4c000000 	.word	0x4c000000
2401a6c4:	3ede5bd9 	.word	0x3ede5bd9
2401a6c8:	355427db 	.word	0x355427db
2401a6cc:	3e9a2080 	.word	0x3e9a2080

2401a6d0 <__ieee754_rem_pio2f>:
2401a6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
2401a6d2:	ee10 6a10 	vmov	r6, s0
2401a6d6:	4b86      	ldr	r3, [pc, #536]	; (2401a8f0 <__ieee754_rem_pio2f+0x220>)
2401a6d8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
2401a6dc:	429d      	cmp	r5, r3
2401a6de:	b087      	sub	sp, #28
2401a6e0:	4604      	mov	r4, r0
2401a6e2:	dc05      	bgt.n	2401a6f0 <__ieee754_rem_pio2f+0x20>
2401a6e4:	2300      	movs	r3, #0
2401a6e6:	ed80 0a00 	vstr	s0, [r0]
2401a6ea:	6043      	str	r3, [r0, #4]
2401a6ec:	2000      	movs	r0, #0
2401a6ee:	e020      	b.n	2401a732 <__ieee754_rem_pio2f+0x62>
2401a6f0:	4b80      	ldr	r3, [pc, #512]	; (2401a8f4 <__ieee754_rem_pio2f+0x224>)
2401a6f2:	429d      	cmp	r5, r3
2401a6f4:	dc38      	bgt.n	2401a768 <__ieee754_rem_pio2f+0x98>
2401a6f6:	2e00      	cmp	r6, #0
2401a6f8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 2401a8f8 <__ieee754_rem_pio2f+0x228>
2401a6fc:	4b7f      	ldr	r3, [pc, #508]	; (2401a8fc <__ieee754_rem_pio2f+0x22c>)
2401a6fe:	f025 050f 	bic.w	r5, r5, #15
2401a702:	dd18      	ble.n	2401a736 <__ieee754_rem_pio2f+0x66>
2401a704:	429d      	cmp	r5, r3
2401a706:	ee70 7a47 	vsub.f32	s15, s0, s14
2401a70a:	bf09      	itett	eq
2401a70c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 2401a900 <__ieee754_rem_pio2f+0x230>
2401a710:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 2401a904 <__ieee754_rem_pio2f+0x234>
2401a714:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
2401a718:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 2401a908 <__ieee754_rem_pio2f+0x238>
2401a71c:	ee77 6ac7 	vsub.f32	s13, s15, s14
2401a720:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401a724:	edc0 6a00 	vstr	s13, [r0]
2401a728:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401a72c:	edc0 7a01 	vstr	s15, [r0, #4]
2401a730:	2001      	movs	r0, #1
2401a732:	b007      	add	sp, #28
2401a734:	bdf0      	pop	{r4, r5, r6, r7, pc}
2401a736:	429d      	cmp	r5, r3
2401a738:	ee70 7a07 	vadd.f32	s15, s0, s14
2401a73c:	bf09      	itett	eq
2401a73e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 2401a900 <__ieee754_rem_pio2f+0x230>
2401a742:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 2401a904 <__ieee754_rem_pio2f+0x234>
2401a746:	ee77 7a87 	vaddeq.f32	s15, s15, s14
2401a74a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 2401a908 <__ieee754_rem_pio2f+0x238>
2401a74e:	ee77 6a87 	vadd.f32	s13, s15, s14
2401a752:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401a756:	edc0 6a00 	vstr	s13, [r0]
2401a75a:	ee77 7a87 	vadd.f32	s15, s15, s14
2401a75e:	edc0 7a01 	vstr	s15, [r0, #4]
2401a762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2401a766:	e7e4      	b.n	2401a732 <__ieee754_rem_pio2f+0x62>
2401a768:	4b68      	ldr	r3, [pc, #416]	; (2401a90c <__ieee754_rem_pio2f+0x23c>)
2401a76a:	429d      	cmp	r5, r3
2401a76c:	dc71      	bgt.n	2401a852 <__ieee754_rem_pio2f+0x182>
2401a76e:	f7ff fd9f 	bl	2401a2b0 <fabsf>
2401a772:	ed9f 7a67 	vldr	s14, [pc, #412]	; 2401a910 <__ieee754_rem_pio2f+0x240>
2401a776:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401a77a:	eee0 7a07 	vfma.f32	s15, s0, s14
2401a77e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401a782:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
2401a786:	ee17 0a90 	vmov	r0, s15
2401a78a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 2401a8f8 <__ieee754_rem_pio2f+0x228>
2401a78e:	eea7 0a67 	vfms.f32	s0, s14, s15
2401a792:	281f      	cmp	r0, #31
2401a794:	eddf 7a5b 	vldr	s15, [pc, #364]	; 2401a904 <__ieee754_rem_pio2f+0x234>
2401a798:	ee67 7a27 	vmul.f32	s15, s14, s15
2401a79c:	eeb1 6a47 	vneg.f32	s12, s14
2401a7a0:	ee70 6a67 	vsub.f32	s13, s0, s15
2401a7a4:	ee16 2a90 	vmov	r2, s13
2401a7a8:	dc1c      	bgt.n	2401a7e4 <__ieee754_rem_pio2f+0x114>
2401a7aa:	495a      	ldr	r1, [pc, #360]	; (2401a914 <__ieee754_rem_pio2f+0x244>)
2401a7ac:	1e47      	subs	r7, r0, #1
2401a7ae:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
2401a7b2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
2401a7b6:	428b      	cmp	r3, r1
2401a7b8:	d014      	beq.n	2401a7e4 <__ieee754_rem_pio2f+0x114>
2401a7ba:	6022      	str	r2, [r4, #0]
2401a7bc:	ed94 7a00 	vldr	s14, [r4]
2401a7c0:	ee30 0a47 	vsub.f32	s0, s0, s14
2401a7c4:	2e00      	cmp	r6, #0
2401a7c6:	ee30 0a67 	vsub.f32	s0, s0, s15
2401a7ca:	ed84 0a01 	vstr	s0, [r4, #4]
2401a7ce:	dab0      	bge.n	2401a732 <__ieee754_rem_pio2f+0x62>
2401a7d0:	eeb1 7a47 	vneg.f32	s14, s14
2401a7d4:	eeb1 0a40 	vneg.f32	s0, s0
2401a7d8:	ed84 7a00 	vstr	s14, [r4]
2401a7dc:	ed84 0a01 	vstr	s0, [r4, #4]
2401a7e0:	4240      	negs	r0, r0
2401a7e2:	e7a6      	b.n	2401a732 <__ieee754_rem_pio2f+0x62>
2401a7e4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
2401a7e8:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
2401a7ec:	2908      	cmp	r1, #8
2401a7ee:	ea4f 53e5 	mov.w	r3, r5, asr #23
2401a7f2:	dde2      	ble.n	2401a7ba <__ieee754_rem_pio2f+0xea>
2401a7f4:	eddf 5a42 	vldr	s11, [pc, #264]	; 2401a900 <__ieee754_rem_pio2f+0x230>
2401a7f8:	eef0 6a40 	vmov.f32	s13, s0
2401a7fc:	eee6 6a25 	vfma.f32	s13, s12, s11
2401a800:	ee70 7a66 	vsub.f32	s15, s0, s13
2401a804:	eee6 7a25 	vfma.f32	s15, s12, s11
2401a808:	eddf 5a3f 	vldr	s11, [pc, #252]	; 2401a908 <__ieee754_rem_pio2f+0x238>
2401a80c:	eed7 7a25 	vfnms.f32	s15, s14, s11
2401a810:	ee76 5ae7 	vsub.f32	s11, s13, s15
2401a814:	ee15 2a90 	vmov	r2, s11
2401a818:	f3c2 51c7 	ubfx	r1, r2, #23, #8
2401a81c:	1a5b      	subs	r3, r3, r1
2401a81e:	2b19      	cmp	r3, #25
2401a820:	dc04      	bgt.n	2401a82c <__ieee754_rem_pio2f+0x15c>
2401a822:	edc4 5a00 	vstr	s11, [r4]
2401a826:	eeb0 0a66 	vmov.f32	s0, s13
2401a82a:	e7c7      	b.n	2401a7bc <__ieee754_rem_pio2f+0xec>
2401a82c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 2401a918 <__ieee754_rem_pio2f+0x248>
2401a830:	eeb0 0a66 	vmov.f32	s0, s13
2401a834:	eea6 0a25 	vfma.f32	s0, s12, s11
2401a838:	ee76 7ac0 	vsub.f32	s15, s13, s0
2401a83c:	eddf 6a37 	vldr	s13, [pc, #220]	; 2401a91c <__ieee754_rem_pio2f+0x24c>
2401a840:	eee6 7a25 	vfma.f32	s15, s12, s11
2401a844:	eed7 7a26 	vfnms.f32	s15, s14, s13
2401a848:	ee30 7a67 	vsub.f32	s14, s0, s15
2401a84c:	ed84 7a00 	vstr	s14, [r4]
2401a850:	e7b4      	b.n	2401a7bc <__ieee754_rem_pio2f+0xec>
2401a852:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
2401a856:	db06      	blt.n	2401a866 <__ieee754_rem_pio2f+0x196>
2401a858:	ee70 7a40 	vsub.f32	s15, s0, s0
2401a85c:	edc0 7a01 	vstr	s15, [r0, #4]
2401a860:	edc0 7a00 	vstr	s15, [r0]
2401a864:	e742      	b.n	2401a6ec <__ieee754_rem_pio2f+0x1c>
2401a866:	15ea      	asrs	r2, r5, #23
2401a868:	3a86      	subs	r2, #134	; 0x86
2401a86a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
2401a86e:	ee07 3a90 	vmov	s15, r3
2401a872:	eebd 7ae7 	vcvt.s32.f32	s14, s15
2401a876:	eddf 6a2a 	vldr	s13, [pc, #168]	; 2401a920 <__ieee754_rem_pio2f+0x250>
2401a87a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401a87e:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401a882:	ed8d 7a03 	vstr	s14, [sp, #12]
2401a886:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401a88a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
2401a88e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
2401a892:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401a896:	ed8d 7a04 	vstr	s14, [sp, #16]
2401a89a:	ee67 7aa6 	vmul.f32	s15, s15, s13
2401a89e:	eef5 7a40 	vcmp.f32	s15, #0.0
2401a8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a8a6:	edcd 7a05 	vstr	s15, [sp, #20]
2401a8aa:	d11e      	bne.n	2401a8ea <__ieee754_rem_pio2f+0x21a>
2401a8ac:	eeb5 7a40 	vcmp.f32	s14, #0.0
2401a8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401a8b4:	bf14      	ite	ne
2401a8b6:	2302      	movne	r3, #2
2401a8b8:	2301      	moveq	r3, #1
2401a8ba:	491a      	ldr	r1, [pc, #104]	; (2401a924 <__ieee754_rem_pio2f+0x254>)
2401a8bc:	9101      	str	r1, [sp, #4]
2401a8be:	2102      	movs	r1, #2
2401a8c0:	9100      	str	r1, [sp, #0]
2401a8c2:	a803      	add	r0, sp, #12
2401a8c4:	4621      	mov	r1, r4
2401a8c6:	f000 fec9 	bl	2401b65c <__kernel_rem_pio2f>
2401a8ca:	2e00      	cmp	r6, #0
2401a8cc:	f6bf af31 	bge.w	2401a732 <__ieee754_rem_pio2f+0x62>
2401a8d0:	edd4 7a00 	vldr	s15, [r4]
2401a8d4:	eef1 7a67 	vneg.f32	s15, s15
2401a8d8:	edc4 7a00 	vstr	s15, [r4]
2401a8dc:	edd4 7a01 	vldr	s15, [r4, #4]
2401a8e0:	eef1 7a67 	vneg.f32	s15, s15
2401a8e4:	edc4 7a01 	vstr	s15, [r4, #4]
2401a8e8:	e77a      	b.n	2401a7e0 <__ieee754_rem_pio2f+0x110>
2401a8ea:	2303      	movs	r3, #3
2401a8ec:	e7e5      	b.n	2401a8ba <__ieee754_rem_pio2f+0x1ea>
2401a8ee:	bf00      	nop
2401a8f0:	3f490fd8 	.word	0x3f490fd8
2401a8f4:	4016cbe3 	.word	0x4016cbe3
2401a8f8:	3fc90f80 	.word	0x3fc90f80
2401a8fc:	3fc90fd0 	.word	0x3fc90fd0
2401a900:	37354400 	.word	0x37354400
2401a904:	37354443 	.word	0x37354443
2401a908:	2e85a308 	.word	0x2e85a308
2401a90c:	43490f80 	.word	0x43490f80
2401a910:	3f22f984 	.word	0x3f22f984
2401a914:	2402afd0 	.word	0x2402afd0
2401a918:	2e85a300 	.word	0x2e85a300
2401a91c:	248d3132 	.word	0x248d3132
2401a920:	43800000 	.word	0x43800000
2401a924:	2402b050 	.word	0x2402b050

2401a928 <__ieee754_rem_pio2>:
2401a928:	b570      	push	{r4, r5, r6, lr}
2401a92a:	eeb0 7b40 	vmov.f64	d7, d0
2401a92e:	ee17 5a90 	vmov	r5, s15
2401a932:	4b99      	ldr	r3, [pc, #612]	; (2401ab98 <__ieee754_rem_pio2+0x270>)
2401a934:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
2401a938:	429e      	cmp	r6, r3
2401a93a:	b088      	sub	sp, #32
2401a93c:	4604      	mov	r4, r0
2401a93e:	dc07      	bgt.n	2401a950 <__ieee754_rem_pio2+0x28>
2401a940:	2200      	movs	r2, #0
2401a942:	2300      	movs	r3, #0
2401a944:	ed84 0b00 	vstr	d0, [r4]
2401a948:	e9c0 2302 	strd	r2, r3, [r0, #8]
2401a94c:	2000      	movs	r0, #0
2401a94e:	e01b      	b.n	2401a988 <__ieee754_rem_pio2+0x60>
2401a950:	4b92      	ldr	r3, [pc, #584]	; (2401ab9c <__ieee754_rem_pio2+0x274>)
2401a952:	429e      	cmp	r6, r3
2401a954:	dc3b      	bgt.n	2401a9ce <__ieee754_rem_pio2+0xa6>
2401a956:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
2401a95a:	2d00      	cmp	r5, #0
2401a95c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 2401ab58 <__ieee754_rem_pio2+0x230>
2401a960:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
2401a964:	dd19      	ble.n	2401a99a <__ieee754_rem_pio2+0x72>
2401a966:	ee30 7b46 	vsub.f64	d7, d0, d6
2401a96a:	429e      	cmp	r6, r3
2401a96c:	d00e      	beq.n	2401a98c <__ieee754_rem_pio2+0x64>
2401a96e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 2401ab60 <__ieee754_rem_pio2+0x238>
2401a972:	ee37 5b46 	vsub.f64	d5, d7, d6
2401a976:	ee37 7b45 	vsub.f64	d7, d7, d5
2401a97a:	ed84 5b00 	vstr	d5, [r4]
2401a97e:	ee37 7b46 	vsub.f64	d7, d7, d6
2401a982:	ed84 7b02 	vstr	d7, [r4, #8]
2401a986:	2001      	movs	r0, #1
2401a988:	b008      	add	sp, #32
2401a98a:	bd70      	pop	{r4, r5, r6, pc}
2401a98c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 2401ab68 <__ieee754_rem_pio2+0x240>
2401a990:	ee37 7b46 	vsub.f64	d7, d7, d6
2401a994:	ed9f 6b76 	vldr	d6, [pc, #472]	; 2401ab70 <__ieee754_rem_pio2+0x248>
2401a998:	e7eb      	b.n	2401a972 <__ieee754_rem_pio2+0x4a>
2401a99a:	429e      	cmp	r6, r3
2401a99c:	ee30 7b06 	vadd.f64	d7, d0, d6
2401a9a0:	d00e      	beq.n	2401a9c0 <__ieee754_rem_pio2+0x98>
2401a9a2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 2401ab60 <__ieee754_rem_pio2+0x238>
2401a9a6:	ee37 5b06 	vadd.f64	d5, d7, d6
2401a9aa:	ee37 7b45 	vsub.f64	d7, d7, d5
2401a9ae:	ed84 5b00 	vstr	d5, [r4]
2401a9b2:	ee37 7b06 	vadd.f64	d7, d7, d6
2401a9b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
2401a9ba:	ed84 7b02 	vstr	d7, [r4, #8]
2401a9be:	e7e3      	b.n	2401a988 <__ieee754_rem_pio2+0x60>
2401a9c0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 2401ab68 <__ieee754_rem_pio2+0x240>
2401a9c4:	ee37 7b06 	vadd.f64	d7, d7, d6
2401a9c8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 2401ab70 <__ieee754_rem_pio2+0x248>
2401a9cc:	e7eb      	b.n	2401a9a6 <__ieee754_rem_pio2+0x7e>
2401a9ce:	4b74      	ldr	r3, [pc, #464]	; (2401aba0 <__ieee754_rem_pio2+0x278>)
2401a9d0:	429e      	cmp	r6, r3
2401a9d2:	dc70      	bgt.n	2401aab6 <__ieee754_rem_pio2+0x18e>
2401a9d4:	f000 fdb8 	bl	2401b548 <fabs>
2401a9d8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
2401a9dc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 2401ab78 <__ieee754_rem_pio2+0x250>
2401a9e0:	eea0 7b06 	vfma.f64	d7, d0, d6
2401a9e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
2401a9e8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
2401a9ec:	ee17 0a90 	vmov	r0, s15
2401a9f0:	eeb1 4b45 	vneg.f64	d4, d5
2401a9f4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 2401ab58 <__ieee754_rem_pio2+0x230>
2401a9f8:	eea5 0b47 	vfms.f64	d0, d5, d7
2401a9fc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 2401ab60 <__ieee754_rem_pio2+0x238>
2401aa00:	281f      	cmp	r0, #31
2401aa02:	ee25 7b07 	vmul.f64	d7, d5, d7
2401aa06:	ee30 6b47 	vsub.f64	d6, d0, d7
2401aa0a:	dc08      	bgt.n	2401aa1e <__ieee754_rem_pio2+0xf6>
2401aa0c:	4b65      	ldr	r3, [pc, #404]	; (2401aba4 <__ieee754_rem_pio2+0x27c>)
2401aa0e:	1e42      	subs	r2, r0, #1
2401aa10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2401aa14:	42b3      	cmp	r3, r6
2401aa16:	d002      	beq.n	2401aa1e <__ieee754_rem_pio2+0xf6>
2401aa18:	ed84 6b00 	vstr	d6, [r4]
2401aa1c:	e024      	b.n	2401aa68 <__ieee754_rem_pio2+0x140>
2401aa1e:	ee16 3a90 	vmov	r3, s13
2401aa22:	f3c3 530a 	ubfx	r3, r3, #20, #11
2401aa26:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
2401aa2a:	2b10      	cmp	r3, #16
2401aa2c:	ea4f 5226 	mov.w	r2, r6, asr #20
2401aa30:	ddf2      	ble.n	2401aa18 <__ieee754_rem_pio2+0xf0>
2401aa32:	eeb0 6b40 	vmov.f64	d6, d0
2401aa36:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 2401ab68 <__ieee754_rem_pio2+0x240>
2401aa3a:	eea4 6b03 	vfma.f64	d6, d4, d3
2401aa3e:	ee30 7b46 	vsub.f64	d7, d0, d6
2401aa42:	eea4 7b03 	vfma.f64	d7, d4, d3
2401aa46:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 2401ab70 <__ieee754_rem_pio2+0x248>
2401aa4a:	ee95 7b03 	vfnms.f64	d7, d5, d3
2401aa4e:	ee36 3b47 	vsub.f64	d3, d6, d7
2401aa52:	ee13 3a90 	vmov	r3, s7
2401aa56:	f3c3 530a 	ubfx	r3, r3, #20, #11
2401aa5a:	1ad3      	subs	r3, r2, r3
2401aa5c:	2b31      	cmp	r3, #49	; 0x31
2401aa5e:	dc17      	bgt.n	2401aa90 <__ieee754_rem_pio2+0x168>
2401aa60:	eeb0 0b46 	vmov.f64	d0, d6
2401aa64:	ed84 3b00 	vstr	d3, [r4]
2401aa68:	ed94 6b00 	vldr	d6, [r4]
2401aa6c:	2d00      	cmp	r5, #0
2401aa6e:	ee30 0b46 	vsub.f64	d0, d0, d6
2401aa72:	ee30 0b47 	vsub.f64	d0, d0, d7
2401aa76:	ed84 0b02 	vstr	d0, [r4, #8]
2401aa7a:	da85      	bge.n	2401a988 <__ieee754_rem_pio2+0x60>
2401aa7c:	eeb1 6b46 	vneg.f64	d6, d6
2401aa80:	eeb1 0b40 	vneg.f64	d0, d0
2401aa84:	ed84 6b00 	vstr	d6, [r4]
2401aa88:	ed84 0b02 	vstr	d0, [r4, #8]
2401aa8c:	4240      	negs	r0, r0
2401aa8e:	e77b      	b.n	2401a988 <__ieee754_rem_pio2+0x60>
2401aa90:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 2401ab80 <__ieee754_rem_pio2+0x258>
2401aa94:	eeb0 0b46 	vmov.f64	d0, d6
2401aa98:	eea4 0b07 	vfma.f64	d0, d4, d7
2401aa9c:	ee36 6b40 	vsub.f64	d6, d6, d0
2401aaa0:	eea4 6b07 	vfma.f64	d6, d4, d7
2401aaa4:	ed9f 4b38 	vldr	d4, [pc, #224]	; 2401ab88 <__ieee754_rem_pio2+0x260>
2401aaa8:	eeb0 7b46 	vmov.f64	d7, d6
2401aaac:	ee95 7b04 	vfnms.f64	d7, d5, d4
2401aab0:	ee30 6b47 	vsub.f64	d6, d0, d7
2401aab4:	e7b0      	b.n	2401aa18 <__ieee754_rem_pio2+0xf0>
2401aab6:	4b3c      	ldr	r3, [pc, #240]	; (2401aba8 <__ieee754_rem_pio2+0x280>)
2401aab8:	429e      	cmp	r6, r3
2401aaba:	dd06      	ble.n	2401aaca <__ieee754_rem_pio2+0x1a2>
2401aabc:	ee30 7b40 	vsub.f64	d7, d0, d0
2401aac0:	ed80 7b02 	vstr	d7, [r0, #8]
2401aac4:	ed80 7b00 	vstr	d7, [r0]
2401aac8:	e740      	b.n	2401a94c <__ieee754_rem_pio2+0x24>
2401aaca:	1532      	asrs	r2, r6, #20
2401aacc:	ee10 0a10 	vmov	r0, s0
2401aad0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
2401aad4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
2401aad8:	ec41 0b17 	vmov	d7, r0, r1
2401aadc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
2401aae0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 2401ab90 <__ieee754_rem_pio2+0x268>
2401aae4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
2401aae8:	ee37 7b46 	vsub.f64	d7, d7, d6
2401aaec:	ed8d 6b02 	vstr	d6, [sp, #8]
2401aaf0:	ee27 7b05 	vmul.f64	d7, d7, d5
2401aaf4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
2401aaf8:	a808      	add	r0, sp, #32
2401aafa:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
2401aafe:	ee37 7b46 	vsub.f64	d7, d7, d6
2401ab02:	ed8d 6b04 	vstr	d6, [sp, #16]
2401ab06:	ee27 7b05 	vmul.f64	d7, d7, d5
2401ab0a:	ed8d 7b06 	vstr	d7, [sp, #24]
2401ab0e:	2103      	movs	r1, #3
2401ab10:	ed30 7b02 	vldmdb	r0!, {d7}
2401ab14:	eeb5 7b40 	vcmp.f64	d7, #0.0
2401ab18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401ab1c:	460b      	mov	r3, r1
2401ab1e:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
2401ab22:	d0f5      	beq.n	2401ab10 <__ieee754_rem_pio2+0x1e8>
2401ab24:	4921      	ldr	r1, [pc, #132]	; (2401abac <__ieee754_rem_pio2+0x284>)
2401ab26:	9101      	str	r1, [sp, #4]
2401ab28:	2102      	movs	r1, #2
2401ab2a:	9100      	str	r1, [sp, #0]
2401ab2c:	a802      	add	r0, sp, #8
2401ab2e:	4621      	mov	r1, r4
2401ab30:	f000 f83e 	bl	2401abb0 <__kernel_rem_pio2>
2401ab34:	2d00      	cmp	r5, #0
2401ab36:	f6bf af27 	bge.w	2401a988 <__ieee754_rem_pio2+0x60>
2401ab3a:	ed94 7b00 	vldr	d7, [r4]
2401ab3e:	eeb1 7b47 	vneg.f64	d7, d7
2401ab42:	ed84 7b00 	vstr	d7, [r4]
2401ab46:	ed94 7b02 	vldr	d7, [r4, #8]
2401ab4a:	eeb1 7b47 	vneg.f64	d7, d7
2401ab4e:	ed84 7b02 	vstr	d7, [r4, #8]
2401ab52:	e79b      	b.n	2401aa8c <__ieee754_rem_pio2+0x164>
2401ab54:	f3af 8000 	nop.w
2401ab58:	54400000 	.word	0x54400000
2401ab5c:	3ff921fb 	.word	0x3ff921fb
2401ab60:	1a626331 	.word	0x1a626331
2401ab64:	3dd0b461 	.word	0x3dd0b461
2401ab68:	1a600000 	.word	0x1a600000
2401ab6c:	3dd0b461 	.word	0x3dd0b461
2401ab70:	2e037073 	.word	0x2e037073
2401ab74:	3ba3198a 	.word	0x3ba3198a
2401ab78:	6dc9c883 	.word	0x6dc9c883
2401ab7c:	3fe45f30 	.word	0x3fe45f30
2401ab80:	2e000000 	.word	0x2e000000
2401ab84:	3ba3198a 	.word	0x3ba3198a
2401ab88:	252049c1 	.word	0x252049c1
2401ab8c:	397b839a 	.word	0x397b839a
2401ab90:	00000000 	.word	0x00000000
2401ab94:	41700000 	.word	0x41700000
2401ab98:	3fe921fb 	.word	0x3fe921fb
2401ab9c:	4002d97b 	.word	0x4002d97b
2401aba0:	413921fb 	.word	0x413921fb
2401aba4:	2402b368 	.word	0x2402b368
2401aba8:	7fefffff 	.word	0x7fefffff
2401abac:	2402b3e8 	.word	0x2402b3e8

2401abb0 <__kernel_rem_pio2>:
2401abb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401abb4:	ed2d 8b06 	vpush	{d8-d10}
2401abb8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
2401abbc:	460f      	mov	r7, r1
2401abbe:	9002      	str	r0, [sp, #8]
2401abc0:	49c3      	ldr	r1, [pc, #780]	; (2401aed0 <__kernel_rem_pio2+0x320>)
2401abc2:	98a2      	ldr	r0, [sp, #648]	; 0x288
2401abc4:	9301      	str	r3, [sp, #4]
2401abc6:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
2401abca:	9901      	ldr	r1, [sp, #4]
2401abcc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
2401abce:	f112 0f14 	cmn.w	r2, #20
2401abd2:	bfa8      	it	ge
2401abd4:	1ed0      	subge	r0, r2, #3
2401abd6:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
2401abda:	bfaa      	itet	ge
2401abdc:	2418      	movge	r4, #24
2401abde:	2000      	movlt	r0, #0
2401abe0:	fb90 f0f4 	sdivge	r0, r0, r4
2401abe4:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 2401aeb8 <__kernel_rem_pio2+0x308>
2401abe8:	f06f 0417 	mvn.w	r4, #23
2401abec:	fb00 4404 	mla	r4, r0, r4, r4
2401abf0:	eba0 060a 	sub.w	r6, r0, sl
2401abf4:	4414      	add	r4, r2
2401abf6:	eb09 0c0a 	add.w	ip, r9, sl
2401abfa:	ad1a      	add	r5, sp, #104	; 0x68
2401abfc:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
2401ac00:	2200      	movs	r2, #0
2401ac02:	4562      	cmp	r2, ip
2401ac04:	dd10      	ble.n	2401ac28 <__kernel_rem_pio2+0x78>
2401ac06:	9a01      	ldr	r2, [sp, #4]
2401ac08:	a91a      	add	r1, sp, #104	; 0x68
2401ac0a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
2401ac0e:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
2401ac12:	f04f 0c00 	mov.w	ip, #0
2401ac16:	45cc      	cmp	ip, r9
2401ac18:	dc26      	bgt.n	2401ac68 <__kernel_rem_pio2+0xb8>
2401ac1a:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 2401aeb8 <__kernel_rem_pio2+0x308>
2401ac1e:	f8dd e008 	ldr.w	lr, [sp, #8]
2401ac22:	4616      	mov	r6, r2
2401ac24:	2500      	movs	r5, #0
2401ac26:	e015      	b.n	2401ac54 <__kernel_rem_pio2+0xa4>
2401ac28:	42d6      	cmn	r6, r2
2401ac2a:	d409      	bmi.n	2401ac40 <__kernel_rem_pio2+0x90>
2401ac2c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
2401ac30:	ee07 1a90 	vmov	s15, r1
2401ac34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401ac38:	eca5 7b02 	vstmia	r5!, {d7}
2401ac3c:	3201      	adds	r2, #1
2401ac3e:	e7e0      	b.n	2401ac02 <__kernel_rem_pio2+0x52>
2401ac40:	eeb0 7b46 	vmov.f64	d7, d6
2401ac44:	e7f8      	b.n	2401ac38 <__kernel_rem_pio2+0x88>
2401ac46:	ecbe 5b02 	vldmia	lr!, {d5}
2401ac4a:	ed96 6b00 	vldr	d6, [r6]
2401ac4e:	3501      	adds	r5, #1
2401ac50:	eea5 7b06 	vfma.f64	d7, d5, d6
2401ac54:	4555      	cmp	r5, sl
2401ac56:	f1a6 0608 	sub.w	r6, r6, #8
2401ac5a:	ddf4      	ble.n	2401ac46 <__kernel_rem_pio2+0x96>
2401ac5c:	eca8 7b02 	vstmia	r8!, {d7}
2401ac60:	f10c 0c01 	add.w	ip, ip, #1
2401ac64:	3208      	adds	r2, #8
2401ac66:	e7d6      	b.n	2401ac16 <__kernel_rem_pio2+0x66>
2401ac68:	aa06      	add	r2, sp, #24
2401ac6a:	ed9f 9b95 	vldr	d9, [pc, #596]	; 2401aec0 <__kernel_rem_pio2+0x310>
2401ac6e:	ed9f ab96 	vldr	d10, [pc, #600]	; 2401aec8 <__kernel_rem_pio2+0x318>
2401ac72:	eb02 0289 	add.w	r2, r2, r9, lsl #2
2401ac76:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2401ac7a:	9204      	str	r2, [sp, #16]
2401ac7c:	9303      	str	r3, [sp, #12]
2401ac7e:	464d      	mov	r5, r9
2401ac80:	00eb      	lsls	r3, r5, #3
2401ac82:	9305      	str	r3, [sp, #20]
2401ac84:	ab92      	add	r3, sp, #584	; 0x248
2401ac86:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
2401ac8a:	f10d 0b18 	add.w	fp, sp, #24
2401ac8e:	ab6a      	add	r3, sp, #424	; 0x1a8
2401ac90:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
2401ac94:	465e      	mov	r6, fp
2401ac96:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
2401ac9a:	4628      	mov	r0, r5
2401ac9c:	2800      	cmp	r0, #0
2401ac9e:	f1a2 0208 	sub.w	r2, r2, #8
2401aca2:	dc48      	bgt.n	2401ad36 <__kernel_rem_pio2+0x186>
2401aca4:	4620      	mov	r0, r4
2401aca6:	f000 fc5b 	bl	2401b560 <scalbn>
2401acaa:	eeb0 8b40 	vmov.f64	d8, d0
2401acae:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
2401acb2:	ee28 0b00 	vmul.f64	d0, d8, d0
2401acb6:	f000 ff43 	bl	2401bb40 <floor>
2401acba:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
2401acbe:	eea0 8b47 	vfms.f64	d8, d0, d7
2401acc2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
2401acc6:	2c00      	cmp	r4, #0
2401acc8:	ee17 8a90 	vmov	r8, s15
2401accc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401acd0:	ee38 8b47 	vsub.f64	d8, d8, d7
2401acd4:	dd41      	ble.n	2401ad5a <__kernel_rem_pio2+0x1aa>
2401acd6:	1e68      	subs	r0, r5, #1
2401acd8:	ab06      	add	r3, sp, #24
2401acda:	f1c4 0c18 	rsb	ip, r4, #24
2401acde:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
2401ace2:	fa46 f20c 	asr.w	r2, r6, ip
2401ace6:	4490      	add	r8, r2
2401ace8:	fa02 f20c 	lsl.w	r2, r2, ip
2401acec:	1ab6      	subs	r6, r6, r2
2401acee:	f1c4 0217 	rsb	r2, r4, #23
2401acf2:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
2401acf6:	4116      	asrs	r6, r2
2401acf8:	2e00      	cmp	r6, #0
2401acfa:	dd3d      	ble.n	2401ad78 <__kernel_rem_pio2+0x1c8>
2401acfc:	f04f 0c00 	mov.w	ip, #0
2401ad00:	f108 0801 	add.w	r8, r8, #1
2401ad04:	4660      	mov	r0, ip
2401ad06:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
2401ad0a:	4565      	cmp	r5, ip
2401ad0c:	dc6a      	bgt.n	2401ade4 <__kernel_rem_pio2+0x234>
2401ad0e:	2c00      	cmp	r4, #0
2401ad10:	dd04      	ble.n	2401ad1c <__kernel_rem_pio2+0x16c>
2401ad12:	2c01      	cmp	r4, #1
2401ad14:	d07b      	beq.n	2401ae0e <__kernel_rem_pio2+0x25e>
2401ad16:	2c02      	cmp	r4, #2
2401ad18:	f000 8083 	beq.w	2401ae22 <__kernel_rem_pio2+0x272>
2401ad1c:	2e02      	cmp	r6, #2
2401ad1e:	d12b      	bne.n	2401ad78 <__kernel_rem_pio2+0x1c8>
2401ad20:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401ad24:	ee30 8b48 	vsub.f64	d8, d0, d8
2401ad28:	b330      	cbz	r0, 2401ad78 <__kernel_rem_pio2+0x1c8>
2401ad2a:	4620      	mov	r0, r4
2401ad2c:	f000 fc18 	bl	2401b560 <scalbn>
2401ad30:	ee38 8b40 	vsub.f64	d8, d8, d0
2401ad34:	e020      	b.n	2401ad78 <__kernel_rem_pio2+0x1c8>
2401ad36:	ee20 7b09 	vmul.f64	d7, d0, d9
2401ad3a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
2401ad3e:	3801      	subs	r0, #1
2401ad40:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
2401ad44:	eea7 0b4a 	vfms.f64	d0, d7, d10
2401ad48:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401ad4c:	eca6 0a01 	vstmia	r6!, {s0}
2401ad50:	ed92 0b00 	vldr	d0, [r2]
2401ad54:	ee37 0b00 	vadd.f64	d0, d7, d0
2401ad58:	e7a0      	b.n	2401ac9c <__kernel_rem_pio2+0xec>
2401ad5a:	d105      	bne.n	2401ad68 <__kernel_rem_pio2+0x1b8>
2401ad5c:	1e6a      	subs	r2, r5, #1
2401ad5e:	ab06      	add	r3, sp, #24
2401ad60:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
2401ad64:	15f6      	asrs	r6, r6, #23
2401ad66:	e7c7      	b.n	2401acf8 <__kernel_rem_pio2+0x148>
2401ad68:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
2401ad6c:	eeb4 8bc7 	vcmpe.f64	d8, d7
2401ad70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401ad74:	da34      	bge.n	2401ade0 <__kernel_rem_pio2+0x230>
2401ad76:	2600      	movs	r6, #0
2401ad78:	eeb5 8b40 	vcmp.f64	d8, #0.0
2401ad7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401ad80:	f040 80aa 	bne.w	2401aed8 <__kernel_rem_pio2+0x328>
2401ad84:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
2401ad88:	4658      	mov	r0, fp
2401ad8a:	2200      	movs	r2, #0
2401ad8c:	4548      	cmp	r0, r9
2401ad8e:	da50      	bge.n	2401ae32 <__kernel_rem_pio2+0x282>
2401ad90:	2a00      	cmp	r2, #0
2401ad92:	d06b      	beq.n	2401ae6c <__kernel_rem_pio2+0x2bc>
2401ad94:	ab06      	add	r3, sp, #24
2401ad96:	3c18      	subs	r4, #24
2401ad98:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
2401ad9c:	2b00      	cmp	r3, #0
2401ad9e:	f000 8087 	beq.w	2401aeb0 <__kernel_rem_pio2+0x300>
2401ada2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
2401ada6:	4620      	mov	r0, r4
2401ada8:	f000 fbda 	bl	2401b560 <scalbn>
2401adac:	ed9f 6b44 	vldr	d6, [pc, #272]	; 2401aec0 <__kernel_rem_pio2+0x310>
2401adb0:	f10b 0201 	add.w	r2, fp, #1
2401adb4:	a96a      	add	r1, sp, #424	; 0x1a8
2401adb6:	00d3      	lsls	r3, r2, #3
2401adb8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
2401adbc:	465a      	mov	r2, fp
2401adbe:	2a00      	cmp	r2, #0
2401adc0:	f280 80b8 	bge.w	2401af34 <__kernel_rem_pio2+0x384>
2401adc4:	465a      	mov	r2, fp
2401adc6:	2a00      	cmp	r2, #0
2401adc8:	f2c0 80d6 	blt.w	2401af78 <__kernel_rem_pio2+0x3c8>
2401adcc:	a96a      	add	r1, sp, #424	; 0x1a8
2401adce:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
2401add2:	ed9f 7b39 	vldr	d7, [pc, #228]	; 2401aeb8 <__kernel_rem_pio2+0x308>
2401add6:	4d3f      	ldr	r5, [pc, #252]	; (2401aed4 <__kernel_rem_pio2+0x324>)
2401add8:	2000      	movs	r0, #0
2401adda:	ebab 0102 	sub.w	r1, fp, r2
2401adde:	e0c0      	b.n	2401af62 <__kernel_rem_pio2+0x3b2>
2401ade0:	2602      	movs	r6, #2
2401ade2:	e78b      	b.n	2401acfc <__kernel_rem_pio2+0x14c>
2401ade4:	f8db 2000 	ldr.w	r2, [fp]
2401ade8:	b958      	cbnz	r0, 2401ae02 <__kernel_rem_pio2+0x252>
2401adea:	b122      	cbz	r2, 2401adf6 <__kernel_rem_pio2+0x246>
2401adec:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
2401adf0:	f8cb 2000 	str.w	r2, [fp]
2401adf4:	2201      	movs	r2, #1
2401adf6:	f10c 0c01 	add.w	ip, ip, #1
2401adfa:	f10b 0b04 	add.w	fp, fp, #4
2401adfe:	4610      	mov	r0, r2
2401ae00:	e783      	b.n	2401ad0a <__kernel_rem_pio2+0x15a>
2401ae02:	ebae 0202 	sub.w	r2, lr, r2
2401ae06:	f8cb 2000 	str.w	r2, [fp]
2401ae0a:	4602      	mov	r2, r0
2401ae0c:	e7f3      	b.n	2401adf6 <__kernel_rem_pio2+0x246>
2401ae0e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2401ae12:	ab06      	add	r3, sp, #24
2401ae14:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
2401ae18:	f3c2 0216 	ubfx	r2, r2, #0, #23
2401ae1c:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
2401ae20:	e77c      	b.n	2401ad1c <__kernel_rem_pio2+0x16c>
2401ae22:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
2401ae26:	ab06      	add	r3, sp, #24
2401ae28:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
2401ae2c:	f3c2 0215 	ubfx	r2, r2, #0, #22
2401ae30:	e7f4      	b.n	2401ae1c <__kernel_rem_pio2+0x26c>
2401ae32:	ab06      	add	r3, sp, #24
2401ae34:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
2401ae38:	3801      	subs	r0, #1
2401ae3a:	431a      	orrs	r2, r3
2401ae3c:	e7a6      	b.n	2401ad8c <__kernel_rem_pio2+0x1dc>
2401ae3e:	3201      	adds	r2, #1
2401ae40:	f850 6d04 	ldr.w	r6, [r0, #-4]!
2401ae44:	2e00      	cmp	r6, #0
2401ae46:	d0fa      	beq.n	2401ae3e <__kernel_rem_pio2+0x28e>
2401ae48:	9b05      	ldr	r3, [sp, #20]
2401ae4a:	f503 7312 	add.w	r3, r3, #584	; 0x248
2401ae4e:	eb0d 0003 	add.w	r0, sp, r3
2401ae52:	9b01      	ldr	r3, [sp, #4]
2401ae54:	18ee      	adds	r6, r5, r3
2401ae56:	ab1a      	add	r3, sp, #104	; 0x68
2401ae58:	f105 0c01 	add.w	ip, r5, #1
2401ae5c:	3898      	subs	r0, #152	; 0x98
2401ae5e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
2401ae62:	442a      	add	r2, r5
2401ae64:	4562      	cmp	r2, ip
2401ae66:	da04      	bge.n	2401ae72 <__kernel_rem_pio2+0x2c2>
2401ae68:	4615      	mov	r5, r2
2401ae6a:	e709      	b.n	2401ac80 <__kernel_rem_pio2+0xd0>
2401ae6c:	9804      	ldr	r0, [sp, #16]
2401ae6e:	2201      	movs	r2, #1
2401ae70:	e7e6      	b.n	2401ae40 <__kernel_rem_pio2+0x290>
2401ae72:	9b03      	ldr	r3, [sp, #12]
2401ae74:	f8dd e008 	ldr.w	lr, [sp, #8]
2401ae78:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
2401ae7c:	9305      	str	r3, [sp, #20]
2401ae7e:	ee07 3a90 	vmov	s15, r3
2401ae82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401ae86:	2500      	movs	r5, #0
2401ae88:	eca6 7b02 	vstmia	r6!, {d7}
2401ae8c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 2401aeb8 <__kernel_rem_pio2+0x308>
2401ae90:	46b0      	mov	r8, r6
2401ae92:	4555      	cmp	r5, sl
2401ae94:	dd04      	ble.n	2401aea0 <__kernel_rem_pio2+0x2f0>
2401ae96:	eca0 7b02 	vstmia	r0!, {d7}
2401ae9a:	f10c 0c01 	add.w	ip, ip, #1
2401ae9e:	e7e1      	b.n	2401ae64 <__kernel_rem_pio2+0x2b4>
2401aea0:	ecbe 5b02 	vldmia	lr!, {d5}
2401aea4:	ed38 6b02 	vldmdb	r8!, {d6}
2401aea8:	3501      	adds	r5, #1
2401aeaa:	eea5 7b06 	vfma.f64	d7, d5, d6
2401aeae:	e7f0      	b.n	2401ae92 <__kernel_rem_pio2+0x2e2>
2401aeb0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401aeb4:	e76e      	b.n	2401ad94 <__kernel_rem_pio2+0x1e4>
2401aeb6:	bf00      	nop
	...
2401aec4:	3e700000 	.word	0x3e700000
2401aec8:	00000000 	.word	0x00000000
2401aecc:	41700000 	.word	0x41700000
2401aed0:	2402b658 	.word	0x2402b658
2401aed4:	2402b618 	.word	0x2402b618
2401aed8:	4260      	negs	r0, r4
2401aeda:	eeb0 0b48 	vmov.f64	d0, d8
2401aede:	f000 fb3f 	bl	2401b560 <scalbn>
2401aee2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 2401b0c0 <__kernel_rem_pio2+0x510>
2401aee6:	eeb4 0bc6 	vcmpe.f64	d0, d6
2401aeea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401aeee:	db18      	blt.n	2401af22 <__kernel_rem_pio2+0x372>
2401aef0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 2401b0c8 <__kernel_rem_pio2+0x518>
2401aef4:	ee20 7b07 	vmul.f64	d7, d0, d7
2401aef8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
2401aefc:	aa06      	add	r2, sp, #24
2401aefe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
2401af02:	eea5 0b46 	vfms.f64	d0, d5, d6
2401af06:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401af0a:	f105 0b01 	add.w	fp, r5, #1
2401af0e:	ee10 3a10 	vmov	r3, s0
2401af12:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
2401af16:	ee17 3a10 	vmov	r3, s14
2401af1a:	3418      	adds	r4, #24
2401af1c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
2401af20:	e73f      	b.n	2401ada2 <__kernel_rem_pio2+0x1f2>
2401af22:	eebd 0bc0 	vcvt.s32.f64	s0, d0
2401af26:	aa06      	add	r2, sp, #24
2401af28:	ee10 3a10 	vmov	r3, s0
2401af2c:	46ab      	mov	fp, r5
2401af2e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
2401af32:	e736      	b.n	2401ada2 <__kernel_rem_pio2+0x1f2>
2401af34:	a806      	add	r0, sp, #24
2401af36:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
2401af3a:	9001      	str	r0, [sp, #4]
2401af3c:	ee07 0a90 	vmov	s15, r0
2401af40:	3a01      	subs	r2, #1
2401af42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401af46:	ee27 7b00 	vmul.f64	d7, d7, d0
2401af4a:	ee20 0b06 	vmul.f64	d0, d0, d6
2401af4e:	ed21 7b02 	vstmdb	r1!, {d7}
2401af52:	e734      	b.n	2401adbe <__kernel_rem_pio2+0x20e>
2401af54:	ecb5 5b02 	vldmia	r5!, {d5}
2401af58:	ecb4 6b02 	vldmia	r4!, {d6}
2401af5c:	3001      	adds	r0, #1
2401af5e:	eea5 7b06 	vfma.f64	d7, d5, d6
2401af62:	4548      	cmp	r0, r9
2401af64:	dc01      	bgt.n	2401af6a <__kernel_rem_pio2+0x3ba>
2401af66:	4288      	cmp	r0, r1
2401af68:	ddf4      	ble.n	2401af54 <__kernel_rem_pio2+0x3a4>
2401af6a:	a842      	add	r0, sp, #264	; 0x108
2401af6c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
2401af70:	ed81 7b00 	vstr	d7, [r1]
2401af74:	3a01      	subs	r2, #1
2401af76:	e726      	b.n	2401adc6 <__kernel_rem_pio2+0x216>
2401af78:	9aa2      	ldr	r2, [sp, #648]	; 0x288
2401af7a:	2a02      	cmp	r2, #2
2401af7c:	dc0a      	bgt.n	2401af94 <__kernel_rem_pio2+0x3e4>
2401af7e:	2a00      	cmp	r2, #0
2401af80:	dc2e      	bgt.n	2401afe0 <__kernel_rem_pio2+0x430>
2401af82:	d047      	beq.n	2401b014 <__kernel_rem_pio2+0x464>
2401af84:	f008 0007 	and.w	r0, r8, #7
2401af88:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
2401af8c:	ecbd 8b06 	vpop	{d8-d10}
2401af90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2401af94:	9aa2      	ldr	r2, [sp, #648]	; 0x288
2401af96:	2a03      	cmp	r2, #3
2401af98:	d1f4      	bne.n	2401af84 <__kernel_rem_pio2+0x3d4>
2401af9a:	a942      	add	r1, sp, #264	; 0x108
2401af9c:	f1a3 0208 	sub.w	r2, r3, #8
2401afa0:	440a      	add	r2, r1
2401afa2:	4611      	mov	r1, r2
2401afa4:	4658      	mov	r0, fp
2401afa6:	2800      	cmp	r0, #0
2401afa8:	f1a1 0108 	sub.w	r1, r1, #8
2401afac:	dc55      	bgt.n	2401b05a <__kernel_rem_pio2+0x4aa>
2401afae:	4659      	mov	r1, fp
2401afb0:	2901      	cmp	r1, #1
2401afb2:	f1a2 0208 	sub.w	r2, r2, #8
2401afb6:	dc60      	bgt.n	2401b07a <__kernel_rem_pio2+0x4ca>
2401afb8:	ed9f 7b45 	vldr	d7, [pc, #276]	; 2401b0d0 <__kernel_rem_pio2+0x520>
2401afbc:	aa42      	add	r2, sp, #264	; 0x108
2401afbe:	4413      	add	r3, r2
2401afc0:	f1bb 0f01 	cmp.w	fp, #1
2401afc4:	dc69      	bgt.n	2401b09a <__kernel_rem_pio2+0x4ea>
2401afc6:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
2401afca:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
2401afce:	2e00      	cmp	r6, #0
2401afd0:	d16a      	bne.n	2401b0a8 <__kernel_rem_pio2+0x4f8>
2401afd2:	ed87 5b00 	vstr	d5, [r7]
2401afd6:	ed87 6b02 	vstr	d6, [r7, #8]
2401afda:	ed87 7b04 	vstr	d7, [r7, #16]
2401afde:	e7d1      	b.n	2401af84 <__kernel_rem_pio2+0x3d4>
2401afe0:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 2401b0d0 <__kernel_rem_pio2+0x520>
2401afe4:	aa42      	add	r2, sp, #264	; 0x108
2401afe6:	4413      	add	r3, r2
2401afe8:	465a      	mov	r2, fp
2401afea:	2a00      	cmp	r2, #0
2401afec:	da26      	bge.n	2401b03c <__kernel_rem_pio2+0x48c>
2401afee:	b35e      	cbz	r6, 2401b048 <__kernel_rem_pio2+0x498>
2401aff0:	eeb1 7b46 	vneg.f64	d7, d6
2401aff4:	ed87 7b00 	vstr	d7, [r7]
2401aff8:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
2401affc:	aa44      	add	r2, sp, #272	; 0x110
2401affe:	2301      	movs	r3, #1
2401b000:	ee37 7b46 	vsub.f64	d7, d7, d6
2401b004:	459b      	cmp	fp, r3
2401b006:	da22      	bge.n	2401b04e <__kernel_rem_pio2+0x49e>
2401b008:	b10e      	cbz	r6, 2401b00e <__kernel_rem_pio2+0x45e>
2401b00a:	eeb1 7b47 	vneg.f64	d7, d7
2401b00e:	ed87 7b02 	vstr	d7, [r7, #8]
2401b012:	e7b7      	b.n	2401af84 <__kernel_rem_pio2+0x3d4>
2401b014:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 2401b0d0 <__kernel_rem_pio2+0x520>
2401b018:	aa42      	add	r2, sp, #264	; 0x108
2401b01a:	4413      	add	r3, r2
2401b01c:	f1bb 0f00 	cmp.w	fp, #0
2401b020:	da05      	bge.n	2401b02e <__kernel_rem_pio2+0x47e>
2401b022:	b10e      	cbz	r6, 2401b028 <__kernel_rem_pio2+0x478>
2401b024:	eeb1 7b47 	vneg.f64	d7, d7
2401b028:	ed87 7b00 	vstr	d7, [r7]
2401b02c:	e7aa      	b.n	2401af84 <__kernel_rem_pio2+0x3d4>
2401b02e:	ed33 6b02 	vldmdb	r3!, {d6}
2401b032:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401b036:	ee37 7b06 	vadd.f64	d7, d7, d6
2401b03a:	e7ef      	b.n	2401b01c <__kernel_rem_pio2+0x46c>
2401b03c:	ed33 7b02 	vldmdb	r3!, {d7}
2401b040:	3a01      	subs	r2, #1
2401b042:	ee36 6b07 	vadd.f64	d6, d6, d7
2401b046:	e7d0      	b.n	2401afea <__kernel_rem_pio2+0x43a>
2401b048:	eeb0 7b46 	vmov.f64	d7, d6
2401b04c:	e7d2      	b.n	2401aff4 <__kernel_rem_pio2+0x444>
2401b04e:	ecb2 6b02 	vldmia	r2!, {d6}
2401b052:	3301      	adds	r3, #1
2401b054:	ee37 7b06 	vadd.f64	d7, d7, d6
2401b058:	e7d4      	b.n	2401b004 <__kernel_rem_pio2+0x454>
2401b05a:	ed91 7b00 	vldr	d7, [r1]
2401b05e:	ed91 5b02 	vldr	d5, [r1, #8]
2401b062:	3801      	subs	r0, #1
2401b064:	ee37 6b05 	vadd.f64	d6, d7, d5
2401b068:	ee37 7b46 	vsub.f64	d7, d7, d6
2401b06c:	ed81 6b00 	vstr	d6, [r1]
2401b070:	ee37 7b05 	vadd.f64	d7, d7, d5
2401b074:	ed81 7b02 	vstr	d7, [r1, #8]
2401b078:	e795      	b.n	2401afa6 <__kernel_rem_pio2+0x3f6>
2401b07a:	ed92 7b00 	vldr	d7, [r2]
2401b07e:	ed92 5b02 	vldr	d5, [r2, #8]
2401b082:	3901      	subs	r1, #1
2401b084:	ee37 6b05 	vadd.f64	d6, d7, d5
2401b088:	ee37 7b46 	vsub.f64	d7, d7, d6
2401b08c:	ed82 6b00 	vstr	d6, [r2]
2401b090:	ee37 7b05 	vadd.f64	d7, d7, d5
2401b094:	ed82 7b02 	vstr	d7, [r2, #8]
2401b098:	e78a      	b.n	2401afb0 <__kernel_rem_pio2+0x400>
2401b09a:	ed33 6b02 	vldmdb	r3!, {d6}
2401b09e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
2401b0a2:	ee37 7b06 	vadd.f64	d7, d7, d6
2401b0a6:	e78b      	b.n	2401afc0 <__kernel_rem_pio2+0x410>
2401b0a8:	eeb1 5b45 	vneg.f64	d5, d5
2401b0ac:	eeb1 6b46 	vneg.f64	d6, d6
2401b0b0:	ed87 5b00 	vstr	d5, [r7]
2401b0b4:	eeb1 7b47 	vneg.f64	d7, d7
2401b0b8:	ed87 6b02 	vstr	d6, [r7, #8]
2401b0bc:	e78d      	b.n	2401afda <__kernel_rem_pio2+0x42a>
2401b0be:	bf00      	nop
2401b0c0:	00000000 	.word	0x00000000
2401b0c4:	41700000 	.word	0x41700000
2401b0c8:	00000000 	.word	0x00000000
2401b0cc:	3e700000 	.word	0x3e700000
	...

2401b0d8 <__kernel_tan>:
2401b0d8:	eeb0 7b40 	vmov.f64	d7, d0
2401b0dc:	ee17 3a90 	vmov	r3, s15
2401b0e0:	4989      	ldr	r1, [pc, #548]	; (2401b308 <__kernel_tan+0x230>)
2401b0e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
2401b0e6:	428a      	cmp	r2, r1
2401b0e8:	b510      	push	{r4, lr}
2401b0ea:	dc33      	bgt.n	2401b154 <__kernel_tan+0x7c>
2401b0ec:	eefd 6bc0 	vcvt.s32.f64	s13, d0
2401b0f0:	ee16 1a90 	vmov	r1, s13
2401b0f4:	2900      	cmp	r1, #0
2401b0f6:	d143      	bne.n	2401b180 <__kernel_tan+0xa8>
2401b0f8:	ee10 4a10 	vmov	r4, s0
2401b0fc:	1c43      	adds	r3, r0, #1
2401b0fe:	4323      	orrs	r3, r4
2401b100:	4313      	orrs	r3, r2
2401b102:	d108      	bne.n	2401b116 <__kernel_tan+0x3e>
2401b104:	f000 fa20 	bl	2401b548 <fabs>
2401b108:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401b10c:	ee86 7b00 	vdiv.f64	d7, d6, d0
2401b110:	eeb0 0b47 	vmov.f64	d0, d7
2401b114:	bd10      	pop	{r4, pc}
2401b116:	2801      	cmp	r0, #1
2401b118:	d0fa      	beq.n	2401b110 <__kernel_tan+0x38>
2401b11a:	ee30 6b01 	vadd.f64	d6, d0, d1
2401b11e:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401b122:	ec53 2b16 	vmov	r2, r3, d6
2401b126:	ee87 3b06 	vdiv.f64	d3, d7, d6
2401b12a:	460a      	mov	r2, r1
2401b12c:	ec43 2b15 	vmov	d5, r2, r3
2401b130:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401b134:	ec53 2b13 	vmov	r2, r3, d3
2401b138:	ee35 4b40 	vsub.f64	d4, d5, d0
2401b13c:	460a      	mov	r2, r1
2401b13e:	ec43 2b17 	vmov	d7, r2, r3
2401b142:	ee31 4b44 	vsub.f64	d4, d1, d4
2401b146:	eea5 6b07 	vfma.f64	d6, d5, d7
2401b14a:	eea4 6b07 	vfma.f64	d6, d4, d7
2401b14e:	eea6 7b03 	vfma.f64	d7, d6, d3
2401b152:	e7dd      	b.n	2401b110 <__kernel_tan+0x38>
2401b154:	496d      	ldr	r1, [pc, #436]	; (2401b30c <__kernel_tan+0x234>)
2401b156:	428a      	cmp	r2, r1
2401b158:	dd12      	ble.n	2401b180 <__kernel_tan+0xa8>
2401b15a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 2401b288 <__kernel_tan+0x1b0>
2401b15e:	2b00      	cmp	r3, #0
2401b160:	bfb8      	it	lt
2401b162:	eeb1 7b40 	vneglt.f64	d7, d0
2401b166:	ee36 6b47 	vsub.f64	d6, d6, d7
2401b16a:	ed9f 7b49 	vldr	d7, [pc, #292]	; 2401b290 <__kernel_tan+0x1b8>
2401b16e:	bfb8      	it	lt
2401b170:	eeb1 1b41 	vneglt.f64	d1, d1
2401b174:	ee37 7b41 	vsub.f64	d7, d7, d1
2401b178:	ed9f 1b47 	vldr	d1, [pc, #284]	; 2401b298 <__kernel_tan+0x1c0>
2401b17c:	ee37 7b06 	vadd.f64	d7, d7, d6
2401b180:	ee27 5b07 	vmul.f64	d5, d7, d7
2401b184:	ed9f 3b46 	vldr	d3, [pc, #280]	; 2401b2a0 <__kernel_tan+0x1c8>
2401b188:	ee25 6b05 	vmul.f64	d6, d5, d5
2401b18c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 2401b2a8 <__kernel_tan+0x1d0>
2401b190:	eea6 4b03 	vfma.f64	d4, d6, d3
2401b194:	ed9f 3b46 	vldr	d3, [pc, #280]	; 2401b2b0 <__kernel_tan+0x1d8>
2401b198:	eea4 3b06 	vfma.f64	d3, d4, d6
2401b19c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 2401b2b8 <__kernel_tan+0x1e0>
2401b1a0:	eea3 4b06 	vfma.f64	d4, d3, d6
2401b1a4:	ed9f 3b46 	vldr	d3, [pc, #280]	; 2401b2c0 <__kernel_tan+0x1e8>
2401b1a8:	eea4 3b06 	vfma.f64	d3, d4, d6
2401b1ac:	ed9f 4b46 	vldr	d4, [pc, #280]	; 2401b2c8 <__kernel_tan+0x1f0>
2401b1b0:	ed9f 2b47 	vldr	d2, [pc, #284]	; 2401b2d0 <__kernel_tan+0x1f8>
2401b1b4:	eea3 4b06 	vfma.f64	d4, d3, d6
2401b1b8:	ed9f 3b47 	vldr	d3, [pc, #284]	; 2401b2d8 <__kernel_tan+0x200>
2401b1bc:	eea6 3b02 	vfma.f64	d3, d6, d2
2401b1c0:	ed9f 2b47 	vldr	d2, [pc, #284]	; 2401b2e0 <__kernel_tan+0x208>
2401b1c4:	eea3 2b06 	vfma.f64	d2, d3, d6
2401b1c8:	ed9f 3b47 	vldr	d3, [pc, #284]	; 2401b2e8 <__kernel_tan+0x210>
2401b1cc:	eea2 3b06 	vfma.f64	d3, d2, d6
2401b1d0:	ed9f 2b47 	vldr	d2, [pc, #284]	; 2401b2f0 <__kernel_tan+0x218>
2401b1d4:	eea3 2b06 	vfma.f64	d2, d3, d6
2401b1d8:	ed9f 3b47 	vldr	d3, [pc, #284]	; 2401b2f8 <__kernel_tan+0x220>
2401b1dc:	494b      	ldr	r1, [pc, #300]	; (2401b30c <__kernel_tan+0x234>)
2401b1de:	eea2 3b06 	vfma.f64	d3, d2, d6
2401b1e2:	ee27 2b05 	vmul.f64	d2, d7, d5
2401b1e6:	eeb0 6b44 	vmov.f64	d6, d4
2401b1ea:	eeb0 4b41 	vmov.f64	d4, d1
2401b1ee:	eea3 6b05 	vfma.f64	d6, d3, d5
2401b1f2:	eea6 4b02 	vfma.f64	d4, d6, d2
2401b1f6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 2401b300 <__kernel_tan+0x228>
2401b1fa:	eea4 1b05 	vfma.f64	d1, d4, d5
2401b1fe:	428a      	cmp	r2, r1
2401b200:	eea2 1b06 	vfma.f64	d1, d2, d6
2401b204:	ee37 5b01 	vadd.f64	d5, d7, d1
2401b208:	dd1d      	ble.n	2401b246 <__kernel_tan+0x16e>
2401b20a:	ee25 3b05 	vmul.f64	d3, d5, d5
2401b20e:	179b      	asrs	r3, r3, #30
2401b210:	ee06 0a90 	vmov	s13, r0
2401b214:	f003 0302 	and.w	r3, r3, #2
2401b218:	f1c3 0301 	rsb	r3, r3, #1
2401b21c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
2401b220:	ee35 5b06 	vadd.f64	d5, d5, d6
2401b224:	ee83 4b05 	vdiv.f64	d4, d3, d5
2401b228:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
2401b22c:	ee34 4b41 	vsub.f64	d4, d4, d1
2401b230:	ee37 7b44 	vsub.f64	d7, d7, d4
2401b234:	eea7 6b45 	vfms.f64	d6, d7, d5
2401b238:	ee07 3a90 	vmov	s15, r3
2401b23c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
2401b240:	ee27 7b06 	vmul.f64	d7, d7, d6
2401b244:	e764      	b.n	2401b110 <__kernel_tan+0x38>
2401b246:	2801      	cmp	r0, #1
2401b248:	d01a      	beq.n	2401b280 <__kernel_tan+0x1a8>
2401b24a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
2401b24e:	ec51 0b15 	vmov	r0, r1, d5
2401b252:	2000      	movs	r0, #0
2401b254:	ec41 0b13 	vmov	d3, r0, r1
2401b258:	ee33 7b47 	vsub.f64	d7, d3, d7
2401b25c:	ee31 1b47 	vsub.f64	d1, d1, d7
2401b260:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
2401b264:	ee87 4b05 	vdiv.f64	d4, d7, d5
2401b268:	ec53 2b14 	vmov	r2, r3, d4
2401b26c:	4602      	mov	r2, r0
2401b26e:	ec43 2b17 	vmov	d7, r2, r3
2401b272:	eea3 6b07 	vfma.f64	d6, d3, d7
2401b276:	eea1 6b07 	vfma.f64	d6, d1, d7
2401b27a:	eea6 7b04 	vfma.f64	d7, d6, d4
2401b27e:	e747      	b.n	2401b110 <__kernel_tan+0x38>
2401b280:	eeb0 7b45 	vmov.f64	d7, d5
2401b284:	e744      	b.n	2401b110 <__kernel_tan+0x38>
2401b286:	bf00      	nop
2401b288:	54442d18 	.word	0x54442d18
2401b28c:	3fe921fb 	.word	0x3fe921fb
2401b290:	33145c07 	.word	0x33145c07
2401b294:	3c81a626 	.word	0x3c81a626
	...
2401b2a0:	db605373 	.word	0xdb605373
2401b2a4:	bef375cb 	.word	0xbef375cb
2401b2a8:	a03792a6 	.word	0xa03792a6
2401b2ac:	3f147e88 	.word	0x3f147e88
2401b2b0:	f2f26501 	.word	0xf2f26501
2401b2b4:	3f4344d8 	.word	0x3f4344d8
2401b2b8:	c9560328 	.word	0xc9560328
2401b2bc:	3f6d6d22 	.word	0x3f6d6d22
2401b2c0:	8406d637 	.word	0x8406d637
2401b2c4:	3f9664f4 	.word	0x3f9664f4
2401b2c8:	1110fe7a 	.word	0x1110fe7a
2401b2cc:	3fc11111 	.word	0x3fc11111
2401b2d0:	74bf7ad4 	.word	0x74bf7ad4
2401b2d4:	3efb2a70 	.word	0x3efb2a70
2401b2d8:	32f0a7e9 	.word	0x32f0a7e9
2401b2dc:	3f12b80f 	.word	0x3f12b80f
2401b2e0:	1a8d1068 	.word	0x1a8d1068
2401b2e4:	3f3026f7 	.word	0x3f3026f7
2401b2e8:	fee08315 	.word	0xfee08315
2401b2ec:	3f57dbc8 	.word	0x3f57dbc8
2401b2f0:	e96e8493 	.word	0xe96e8493
2401b2f4:	3f8226e3 	.word	0x3f8226e3
2401b2f8:	1bb341fe 	.word	0x1bb341fe
2401b2fc:	3faba1ba 	.word	0x3faba1ba
2401b300:	55555563 	.word	0x55555563
2401b304:	3fd55555 	.word	0x3fd55555
2401b308:	3e2fffff 	.word	0x3e2fffff
2401b30c:	3fe59427 	.word	0x3fe59427

2401b310 <expm1f>:
2401b310:	ee10 2a10 	vmov	r2, s0
2401b314:	497d      	ldr	r1, [pc, #500]	; (2401b50c <expm1f+0x1fc>)
2401b316:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
2401b31a:	428b      	cmp	r3, r1
2401b31c:	d920      	bls.n	2401b360 <expm1f+0x50>
2401b31e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
2401b322:	d902      	bls.n	2401b32a <expm1f+0x1a>
2401b324:	ee30 0a00 	vadd.f32	s0, s0, s0
2401b328:	4770      	bx	lr
2401b32a:	d105      	bne.n	2401b338 <expm1f+0x28>
2401b32c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
2401b330:	2a00      	cmp	r2, #0
2401b332:	fe20 0a27 	vselge.f32	s0, s0, s15
2401b336:	4770      	bx	lr
2401b338:	2a00      	cmp	r2, #0
2401b33a:	db05      	blt.n	2401b348 <expm1f+0x38>
2401b33c:	4974      	ldr	r1, [pc, #464]	; (2401b510 <expm1f+0x200>)
2401b33e:	428b      	cmp	r3, r1
2401b340:	d95c      	bls.n	2401b3fc <expm1f+0xec>
2401b342:	2000      	movs	r0, #0
2401b344:	f7fe bf5e 	b.w	2401a204 <__math_oflowf>
2401b348:	eddf 7a72 	vldr	s15, [pc, #456]	; 2401b514 <expm1f+0x204>
2401b34c:	ee70 7a27 	vadd.f32	s15, s0, s15
2401b350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
2401b354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b358:	d550      	bpl.n	2401b3fc <expm1f+0xec>
2401b35a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2401b35e:	4770      	bx	lr
2401b360:	496d      	ldr	r1, [pc, #436]	; (2401b518 <expm1f+0x208>)
2401b362:	428b      	cmp	r3, r1
2401b364:	d966      	bls.n	2401b434 <expm1f+0x124>
2401b366:	496d      	ldr	r1, [pc, #436]	; (2401b51c <expm1f+0x20c>)
2401b368:	428b      	cmp	r3, r1
2401b36a:	d847      	bhi.n	2401b3fc <expm1f+0xec>
2401b36c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 2401b520 <expm1f+0x210>
2401b370:	2a00      	cmp	r2, #0
2401b372:	bfa7      	ittee	ge
2401b374:	ee30 7a47 	vsubge.f32	s14, s0, s14
2401b378:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 2401b524 <expm1f+0x214>
2401b37c:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 2401b528 <expm1f+0x218>
2401b380:	ee30 7a07 	vaddlt.f32	s14, s0, s14
2401b384:	bfac      	ite	ge
2401b386:	2301      	movge	r3, #1
2401b388:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
2401b38c:	ee37 0a66 	vsub.f32	s0, s14, s13
2401b390:	ee77 7a40 	vsub.f32	s15, s14, s0
2401b394:	ee77 7ae6 	vsub.f32	s15, s15, s13
2401b398:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
2401b39c:	ee20 4a25 	vmul.f32	s8, s0, s11
2401b3a0:	ed9f 6a62 	vldr	s12, [pc, #392]	; 2401b52c <expm1f+0x21c>
2401b3a4:	eddf 6a62 	vldr	s13, [pc, #392]	; 2401b530 <expm1f+0x220>
2401b3a8:	ed9f 5a62 	vldr	s10, [pc, #392]	; 2401b534 <expm1f+0x224>
2401b3ac:	ee20 7a04 	vmul.f32	s14, s0, s8
2401b3b0:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
2401b3b4:	eee7 6a06 	vfma.f32	s13, s14, s12
2401b3b8:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 2401b538 <expm1f+0x228>
2401b3bc:	eea6 6a87 	vfma.f32	s12, s13, s14
2401b3c0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 2401b53c <expm1f+0x22c>
2401b3c4:	eee6 6a07 	vfma.f32	s13, s12, s14
2401b3c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
2401b3cc:	eea6 5a87 	vfma.f32	s10, s13, s14
2401b3d0:	eef0 6a46 	vmov.f32	s13, s12
2401b3d4:	eee5 6a07 	vfma.f32	s13, s10, s14
2401b3d8:	eee4 4a66 	vfms.f32	s9, s8, s13
2401b3dc:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
2401b3e0:	eea0 4a64 	vfms.f32	s8, s0, s9
2401b3e4:	ee36 5ae4 	vsub.f32	s10, s13, s9
2401b3e8:	eec5 6a04 	vdiv.f32	s13, s10, s8
2401b3ec:	ee66 6a87 	vmul.f32	s13, s13, s14
2401b3f0:	bb73      	cbnz	r3, 2401b450 <expm1f+0x140>
2401b3f2:	ee90 7a26 	vfnms.f32	s14, s0, s13
2401b3f6:	ee30 0a47 	vsub.f32	s0, s0, s14
2401b3fa:	4770      	bx	lr
2401b3fc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
2401b400:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401b404:	2a00      	cmp	r2, #0
2401b406:	fe67 7a87 	vselge.f32	s15, s15, s14
2401b40a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 2401b540 <expm1f+0x230>
2401b40e:	ee40 7a07 	vmla.f32	s15, s0, s14
2401b412:	eeb0 7a40 	vmov.f32	s14, s0
2401b416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401b41a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
2401b41e:	ee17 3a90 	vmov	r3, s15
2401b422:	eddf 7a3f 	vldr	s15, [pc, #252]	; 2401b520 <expm1f+0x210>
2401b426:	eea6 7ae7 	vfms.f32	s14, s13, s15
2401b42a:	eddf 7a3e 	vldr	s15, [pc, #248]	; 2401b524 <expm1f+0x214>
2401b42e:	ee66 6aa7 	vmul.f32	s13, s13, s15
2401b432:	e7ab      	b.n	2401b38c <expm1f+0x7c>
2401b434:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
2401b438:	d208      	bcs.n	2401b44c <expm1f+0x13c>
2401b43a:	eddf 7a42 	vldr	s15, [pc, #264]	; 2401b544 <expm1f+0x234>
2401b43e:	ee70 7a27 	vadd.f32	s15, s0, s15
2401b442:	ee77 7ae7 	vsub.f32	s15, s15, s15
2401b446:	ee30 0a67 	vsub.f32	s0, s0, s15
2401b44a:	4770      	bx	lr
2401b44c:	2300      	movs	r3, #0
2401b44e:	e7a3      	b.n	2401b398 <expm1f+0x88>
2401b450:	ee76 6ae7 	vsub.f32	s13, s13, s15
2401b454:	1c5a      	adds	r2, r3, #1
2401b456:	eed6 7a80 	vfnms.f32	s15, s13, s0
2401b45a:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401b45e:	d106      	bne.n	2401b46e <expm1f+0x15e>
2401b460:	ee70 7a67 	vsub.f32	s15, s0, s15
2401b464:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
2401b468:	eea7 0aa5 	vfma.f32	s0, s15, s11
2401b46c:	4770      	bx	lr
2401b46e:	2b01      	cmp	r3, #1
2401b470:	d118      	bne.n	2401b4a4 <expm1f+0x194>
2401b472:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
2401b476:	eeb4 0ac7 	vcmpe.f32	s0, s14
2401b47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b47e:	bf5b      	ittet	pl
2401b480:	ee70 7a67 	vsubpl.f32	s15, s0, s15
2401b484:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
2401b488:	ee70 5a25 	vaddmi.f32	s11, s0, s11
2401b48c:	eea7 6a87 	vfmapl.f32	s12, s15, s14
2401b490:	bf43      	ittte	mi
2401b492:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
2401b496:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
2401b49a:	ee27 0a80 	vmulmi.f32	s0, s15, s0
2401b49e:	eeb0 0a46 	vmovpl.f32	s0, s12
2401b4a2:	4770      	bx	lr
2401b4a4:	1c5a      	adds	r2, r3, #1
2401b4a6:	2a39      	cmp	r2, #57	; 0x39
2401b4a8:	ea4f 51c3 	mov.w	r1, r3, lsl #23
2401b4ac:	d90b      	bls.n	2401b4c6 <expm1f+0x1b6>
2401b4ae:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401b4b2:	ee76 7a67 	vsub.f32	s15, s12, s15
2401b4b6:	ee17 3a90 	vmov	r3, s15
2401b4ba:	4419      	add	r1, r3
2401b4bc:	ee07 1a90 	vmov	s15, r1
2401b4c0:	ee37 0ac6 	vsub.f32	s0, s15, s12
2401b4c4:	4770      	bx	lr
2401b4c6:	2b16      	cmp	r3, #22
2401b4c8:	dc11      	bgt.n	2401b4ee <expm1f+0x1de>
2401b4ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
2401b4ce:	fa42 f303 	asr.w	r3, r2, r3
2401b4d2:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
2401b4d6:	ee07 3a10 	vmov	s14, r3
2401b4da:	ee77 7ac0 	vsub.f32	s15, s15, s0
2401b4de:	ee77 7a67 	vsub.f32	s15, s14, s15
2401b4e2:	ee17 3a90 	vmov	r3, s15
2401b4e6:	440b      	add	r3, r1
2401b4e8:	ee00 3a10 	vmov	s0, r3
2401b4ec:	4770      	bx	lr
2401b4ee:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
2401b4f2:	05db      	lsls	r3, r3, #23
2401b4f4:	ee07 3a10 	vmov	s14, r3
2401b4f8:	ee77 7a87 	vadd.f32	s15, s15, s14
2401b4fc:	ee70 7a67 	vsub.f32	s15, s0, s15
2401b500:	ee77 7a86 	vadd.f32	s15, s15, s12
2401b504:	ee17 3a90 	vmov	r3, s15
2401b508:	e7ed      	b.n	2401b4e6 <expm1f+0x1d6>
2401b50a:	bf00      	nop
2401b50c:	4195b843 	.word	0x4195b843
2401b510:	42b17217 	.word	0x42b17217
2401b514:	0da24260 	.word	0x0da24260
2401b518:	3eb17218 	.word	0x3eb17218
2401b51c:	3f851591 	.word	0x3f851591
2401b520:	3f317180 	.word	0x3f317180
2401b524:	3717f7d1 	.word	0x3717f7d1
2401b528:	b717f7d1 	.word	0xb717f7d1
2401b52c:	b457edbb 	.word	0xb457edbb
2401b530:	36867e54 	.word	0x36867e54
2401b534:	bd088889 	.word	0xbd088889
2401b538:	b8a670cd 	.word	0xb8a670cd
2401b53c:	3ad00d01 	.word	0x3ad00d01
2401b540:	3fb8aa3b 	.word	0x3fb8aa3b
2401b544:	7149f2ca 	.word	0x7149f2ca

2401b548 <fabs>:
2401b548:	ec51 0b10 	vmov	r0, r1, d0
2401b54c:	ee10 2a10 	vmov	r2, s0
2401b550:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
2401b554:	ec43 2b10 	vmov	d0, r2, r3
2401b558:	4770      	bx	lr
2401b55a:	0000      	movs	r0, r0
2401b55c:	0000      	movs	r0, r0
	...

2401b560 <scalbn>:
2401b560:	ee10 1a90 	vmov	r1, s1
2401b564:	f3c1 530a 	ubfx	r3, r1, #20, #11
2401b568:	b98b      	cbnz	r3, 2401b58e <scalbn+0x2e>
2401b56a:	ee10 3a10 	vmov	r3, s0
2401b56e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2401b572:	4319      	orrs	r1, r3
2401b574:	d00a      	beq.n	2401b58c <scalbn+0x2c>
2401b576:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 2401b628 <scalbn+0xc8>
2401b57a:	4b37      	ldr	r3, [pc, #220]	; (2401b658 <scalbn+0xf8>)
2401b57c:	ee20 0b07 	vmul.f64	d0, d0, d7
2401b580:	4298      	cmp	r0, r3
2401b582:	da0b      	bge.n	2401b59c <scalbn+0x3c>
2401b584:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 2401b630 <scalbn+0xd0>
2401b588:	ee20 0b07 	vmul.f64	d0, d0, d7
2401b58c:	4770      	bx	lr
2401b58e:	f240 72ff 	movw	r2, #2047	; 0x7ff
2401b592:	4293      	cmp	r3, r2
2401b594:	d107      	bne.n	2401b5a6 <scalbn+0x46>
2401b596:	ee30 0b00 	vadd.f64	d0, d0, d0
2401b59a:	4770      	bx	lr
2401b59c:	ee10 1a90 	vmov	r1, s1
2401b5a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
2401b5a4:	3b36      	subs	r3, #54	; 0x36
2401b5a6:	f24c 3250 	movw	r2, #50000	; 0xc350
2401b5aa:	4290      	cmp	r0, r2
2401b5ac:	dd0d      	ble.n	2401b5ca <scalbn+0x6a>
2401b5ae:	ed9f 7b22 	vldr	d7, [pc, #136]	; 2401b638 <scalbn+0xd8>
2401b5b2:	ee10 3a90 	vmov	r3, s1
2401b5b6:	eeb0 6b47 	vmov.f64	d6, d7
2401b5ba:	ed9f 5b21 	vldr	d5, [pc, #132]	; 2401b640 <scalbn+0xe0>
2401b5be:	2b00      	cmp	r3, #0
2401b5c0:	fe27 7b05 	vselge.f64	d7, d7, d5
2401b5c4:	ee27 0b06 	vmul.f64	d0, d7, d6
2401b5c8:	4770      	bx	lr
2401b5ca:	4418      	add	r0, r3
2401b5cc:	f240 73fe 	movw	r3, #2046	; 0x7fe
2401b5d0:	4298      	cmp	r0, r3
2401b5d2:	dcec      	bgt.n	2401b5ae <scalbn+0x4e>
2401b5d4:	2800      	cmp	r0, #0
2401b5d6:	dd0a      	ble.n	2401b5ee <scalbn+0x8e>
2401b5d8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
2401b5dc:	ec53 2b10 	vmov	r2, r3, d0
2401b5e0:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
2401b5e4:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
2401b5e8:	ec43 2b10 	vmov	d0, r2, r3
2401b5ec:	4770      	bx	lr
2401b5ee:	f110 0f35 	cmn.w	r0, #53	; 0x35
2401b5f2:	da09      	bge.n	2401b608 <scalbn+0xa8>
2401b5f4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 2401b630 <scalbn+0xd0>
2401b5f8:	ee10 3a90 	vmov	r3, s1
2401b5fc:	eeb0 6b47 	vmov.f64	d6, d7
2401b600:	ed9f 5b11 	vldr	d5, [pc, #68]	; 2401b648 <scalbn+0xe8>
2401b604:	2b00      	cmp	r3, #0
2401b606:	e7db      	b.n	2401b5c0 <scalbn+0x60>
2401b608:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
2401b60c:	ec53 2b10 	vmov	r2, r3, d0
2401b610:	3036      	adds	r0, #54	; 0x36
2401b612:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
2401b616:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
2401b61a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 2401b650 <scalbn+0xf0>
2401b61e:	ec43 2b10 	vmov	d0, r2, r3
2401b622:	e7b1      	b.n	2401b588 <scalbn+0x28>
2401b624:	f3af 8000 	nop.w
2401b628:	00000000 	.word	0x00000000
2401b62c:	43500000 	.word	0x43500000
2401b630:	c2f8f359 	.word	0xc2f8f359
2401b634:	01a56e1f 	.word	0x01a56e1f
2401b638:	8800759c 	.word	0x8800759c
2401b63c:	7e37e43c 	.word	0x7e37e43c
2401b640:	8800759c 	.word	0x8800759c
2401b644:	fe37e43c 	.word	0xfe37e43c
2401b648:	c2f8f359 	.word	0xc2f8f359
2401b64c:	81a56e1f 	.word	0x81a56e1f
2401b650:	00000000 	.word	0x00000000
2401b654:	3c900000 	.word	0x3c900000
2401b658:	ffff3cb0 	.word	0xffff3cb0

2401b65c <__kernel_rem_pio2f>:
2401b65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2401b660:	ed2d 8b04 	vpush	{d8-d9}
2401b664:	b0d9      	sub	sp, #356	; 0x164
2401b666:	4688      	mov	r8, r1
2401b668:	9002      	str	r0, [sp, #8]
2401b66a:	49b8      	ldr	r1, [pc, #736]	; (2401b94c <__kernel_rem_pio2f+0x2f0>)
2401b66c:	9866      	ldr	r0, [sp, #408]	; 0x198
2401b66e:	9301      	str	r3, [sp, #4]
2401b670:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
2401b674:	9901      	ldr	r1, [sp, #4]
2401b676:	9b67      	ldr	r3, [sp, #412]	; 0x19c
2401b678:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
2401b67c:	1d11      	adds	r1, r2, #4
2401b67e:	db25      	blt.n	2401b6cc <__kernel_rem_pio2f+0x70>
2401b680:	1ed0      	subs	r0, r2, #3
2401b682:	bf48      	it	mi
2401b684:	1d10      	addmi	r0, r2, #4
2401b686:	10c0      	asrs	r0, r0, #3
2401b688:	1c45      	adds	r5, r0, #1
2401b68a:	00e9      	lsls	r1, r5, #3
2401b68c:	eba0 070b 	sub.w	r7, r0, fp
2401b690:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 2401b95c <__kernel_rem_pio2f+0x300>
2401b694:	9103      	str	r1, [sp, #12]
2401b696:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
2401b69a:	eb0a 0c0b 	add.w	ip, sl, fp
2401b69e:	ae1c      	add	r6, sp, #112	; 0x70
2401b6a0:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
2401b6a4:	2400      	movs	r4, #0
2401b6a6:	4564      	cmp	r4, ip
2401b6a8:	dd12      	ble.n	2401b6d0 <__kernel_rem_pio2f+0x74>
2401b6aa:	9901      	ldr	r1, [sp, #4]
2401b6ac:	ac1c      	add	r4, sp, #112	; 0x70
2401b6ae:	eb04 0481 	add.w	r4, r4, r1, lsl #2
2401b6b2:	f50d 7988 	add.w	r9, sp, #272	; 0x110
2401b6b6:	f04f 0c00 	mov.w	ip, #0
2401b6ba:	45d4      	cmp	ip, sl
2401b6bc:	dc27      	bgt.n	2401b70e <__kernel_rem_pio2f+0xb2>
2401b6be:	f8dd e008 	ldr.w	lr, [sp, #8]
2401b6c2:	eddf 7aa6 	vldr	s15, [pc, #664]	; 2401b95c <__kernel_rem_pio2f+0x300>
2401b6c6:	4627      	mov	r7, r4
2401b6c8:	2600      	movs	r6, #0
2401b6ca:	e016      	b.n	2401b6fa <__kernel_rem_pio2f+0x9e>
2401b6cc:	2000      	movs	r0, #0
2401b6ce:	e7db      	b.n	2401b688 <__kernel_rem_pio2f+0x2c>
2401b6d0:	42e7      	cmn	r7, r4
2401b6d2:	bf5d      	ittte	pl
2401b6d4:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
2401b6d8:	ee07 1a90 	vmovpl	s15, r1
2401b6dc:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
2401b6e0:	eef0 7a47 	vmovmi.f32	s15, s14
2401b6e4:	ece6 7a01 	vstmia	r6!, {s15}
2401b6e8:	3401      	adds	r4, #1
2401b6ea:	e7dc      	b.n	2401b6a6 <__kernel_rem_pio2f+0x4a>
2401b6ec:	ecfe 6a01 	vldmia	lr!, {s13}
2401b6f0:	ed97 7a00 	vldr	s14, [r7]
2401b6f4:	eee6 7a87 	vfma.f32	s15, s13, s14
2401b6f8:	3601      	adds	r6, #1
2401b6fa:	455e      	cmp	r6, fp
2401b6fc:	f1a7 0704 	sub.w	r7, r7, #4
2401b700:	ddf4      	ble.n	2401b6ec <__kernel_rem_pio2f+0x90>
2401b702:	ece9 7a01 	vstmia	r9!, {s15}
2401b706:	f10c 0c01 	add.w	ip, ip, #1
2401b70a:	3404      	adds	r4, #4
2401b70c:	e7d5      	b.n	2401b6ba <__kernel_rem_pio2f+0x5e>
2401b70e:	a908      	add	r1, sp, #32
2401b710:	eb01 018a 	add.w	r1, r1, sl, lsl #2
2401b714:	eb03 0380 	add.w	r3, r3, r0, lsl #2
2401b718:	eddf 8a8f 	vldr	s17, [pc, #572]	; 2401b958 <__kernel_rem_pio2f+0x2fc>
2401b71c:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 2401b954 <__kernel_rem_pio2f+0x2f8>
2401b720:	9105      	str	r1, [sp, #20]
2401b722:	9304      	str	r3, [sp, #16]
2401b724:	4656      	mov	r6, sl
2401b726:	00b3      	lsls	r3, r6, #2
2401b728:	9306      	str	r3, [sp, #24]
2401b72a:	ab58      	add	r3, sp, #352	; 0x160
2401b72c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
2401b730:	ac08      	add	r4, sp, #32
2401b732:	ab44      	add	r3, sp, #272	; 0x110
2401b734:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
2401b738:	46a4      	mov	ip, r4
2401b73a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
2401b73e:	4637      	mov	r7, r6
2401b740:	2f00      	cmp	r7, #0
2401b742:	f1a0 0004 	sub.w	r0, r0, #4
2401b746:	dc4a      	bgt.n	2401b7de <__kernel_rem_pio2f+0x182>
2401b748:	4628      	mov	r0, r5
2401b74a:	9207      	str	r2, [sp, #28]
2401b74c:	f000 fab2 	bl	2401bcb4 <scalbnf>
2401b750:	eeb0 8a40 	vmov.f32	s16, s0
2401b754:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
2401b758:	ee28 0a00 	vmul.f32	s0, s16, s0
2401b75c:	f000 fa68 	bl	2401bc30 <floorf>
2401b760:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
2401b764:	eea0 8a67 	vfms.f32	s16, s0, s15
2401b768:	2d00      	cmp	r5, #0
2401b76a:	9a07      	ldr	r2, [sp, #28]
2401b76c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
2401b770:	ee17 9a90 	vmov	r9, s15
2401b774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401b778:	ee38 8a67 	vsub.f32	s16, s16, s15
2401b77c:	dd41      	ble.n	2401b802 <__kernel_rem_pio2f+0x1a6>
2401b77e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
2401b782:	ab08      	add	r3, sp, #32
2401b784:	f1c5 0e08 	rsb	lr, r5, #8
2401b788:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
2401b78c:	fa47 f00e 	asr.w	r0, r7, lr
2401b790:	4481      	add	r9, r0
2401b792:	fa00 f00e 	lsl.w	r0, r0, lr
2401b796:	1a3f      	subs	r7, r7, r0
2401b798:	f1c5 0007 	rsb	r0, r5, #7
2401b79c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
2401b7a0:	4107      	asrs	r7, r0
2401b7a2:	2f00      	cmp	r7, #0
2401b7a4:	dd3c      	ble.n	2401b820 <__kernel_rem_pio2f+0x1c4>
2401b7a6:	f04f 0e00 	mov.w	lr, #0
2401b7aa:	f109 0901 	add.w	r9, r9, #1
2401b7ae:	4671      	mov	r1, lr
2401b7b0:	4576      	cmp	r6, lr
2401b7b2:	dc67      	bgt.n	2401b884 <__kernel_rem_pio2f+0x228>
2401b7b4:	2d00      	cmp	r5, #0
2401b7b6:	dd03      	ble.n	2401b7c0 <__kernel_rem_pio2f+0x164>
2401b7b8:	2d01      	cmp	r5, #1
2401b7ba:	d074      	beq.n	2401b8a6 <__kernel_rem_pio2f+0x24a>
2401b7bc:	2d02      	cmp	r5, #2
2401b7be:	d07b      	beq.n	2401b8b8 <__kernel_rem_pio2f+0x25c>
2401b7c0:	2f02      	cmp	r7, #2
2401b7c2:	d12d      	bne.n	2401b820 <__kernel_rem_pio2f+0x1c4>
2401b7c4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401b7c8:	ee30 8a48 	vsub.f32	s16, s0, s16
2401b7cc:	b341      	cbz	r1, 2401b820 <__kernel_rem_pio2f+0x1c4>
2401b7ce:	4628      	mov	r0, r5
2401b7d0:	9207      	str	r2, [sp, #28]
2401b7d2:	f000 fa6f 	bl	2401bcb4 <scalbnf>
2401b7d6:	9a07      	ldr	r2, [sp, #28]
2401b7d8:	ee38 8a40 	vsub.f32	s16, s16, s0
2401b7dc:	e020      	b.n	2401b820 <__kernel_rem_pio2f+0x1c4>
2401b7de:	ee60 7a28 	vmul.f32	s15, s0, s17
2401b7e2:	3f01      	subs	r7, #1
2401b7e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401b7e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401b7ec:	eea7 0ac9 	vfms.f32	s0, s15, s18
2401b7f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401b7f4:	ecac 0a01 	vstmia	ip!, {s0}
2401b7f8:	ed90 0a00 	vldr	s0, [r0]
2401b7fc:	ee37 0a80 	vadd.f32	s0, s15, s0
2401b800:	e79e      	b.n	2401b740 <__kernel_rem_pio2f+0xe4>
2401b802:	d105      	bne.n	2401b810 <__kernel_rem_pio2f+0x1b4>
2401b804:	1e70      	subs	r0, r6, #1
2401b806:	ab08      	add	r3, sp, #32
2401b808:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
2401b80c:	11ff      	asrs	r7, r7, #7
2401b80e:	e7c8      	b.n	2401b7a2 <__kernel_rem_pio2f+0x146>
2401b810:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
2401b814:	eeb4 8ae7 	vcmpe.f32	s16, s15
2401b818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b81c:	da30      	bge.n	2401b880 <__kernel_rem_pio2f+0x224>
2401b81e:	2700      	movs	r7, #0
2401b820:	eeb5 8a40 	vcmp.f32	s16, #0.0
2401b824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b828:	f040 809a 	bne.w	2401b960 <__kernel_rem_pio2f+0x304>
2401b82c:	1e74      	subs	r4, r6, #1
2401b82e:	46a4      	mov	ip, r4
2401b830:	2100      	movs	r1, #0
2401b832:	45d4      	cmp	ip, sl
2401b834:	da47      	bge.n	2401b8c6 <__kernel_rem_pio2f+0x26a>
2401b836:	2900      	cmp	r1, #0
2401b838:	d063      	beq.n	2401b902 <__kernel_rem_pio2f+0x2a6>
2401b83a:	ab08      	add	r3, sp, #32
2401b83c:	3d08      	subs	r5, #8
2401b83e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
2401b842:	2b00      	cmp	r3, #0
2401b844:	d07f      	beq.n	2401b946 <__kernel_rem_pio2f+0x2ea>
2401b846:	4628      	mov	r0, r5
2401b848:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2401b84c:	f000 fa32 	bl	2401bcb4 <scalbnf>
2401b850:	1c63      	adds	r3, r4, #1
2401b852:	aa44      	add	r2, sp, #272	; 0x110
2401b854:	ed9f 7a40 	vldr	s14, [pc, #256]	; 2401b958 <__kernel_rem_pio2f+0x2fc>
2401b858:	0099      	lsls	r1, r3, #2
2401b85a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
2401b85e:	4623      	mov	r3, r4
2401b860:	2b00      	cmp	r3, #0
2401b862:	f280 80ad 	bge.w	2401b9c0 <__kernel_rem_pio2f+0x364>
2401b866:	4623      	mov	r3, r4
2401b868:	2b00      	cmp	r3, #0
2401b86a:	f2c0 80cb 	blt.w	2401ba04 <__kernel_rem_pio2f+0x3a8>
2401b86e:	aa44      	add	r2, sp, #272	; 0x110
2401b870:	eb02 0583 	add.w	r5, r2, r3, lsl #2
2401b874:	4e36      	ldr	r6, [pc, #216]	; (2401b950 <__kernel_rem_pio2f+0x2f4>)
2401b876:	eddf 7a39 	vldr	s15, [pc, #228]	; 2401b95c <__kernel_rem_pio2f+0x300>
2401b87a:	2000      	movs	r0, #0
2401b87c:	1ae2      	subs	r2, r4, r3
2401b87e:	e0b6      	b.n	2401b9ee <__kernel_rem_pio2f+0x392>
2401b880:	2702      	movs	r7, #2
2401b882:	e790      	b.n	2401b7a6 <__kernel_rem_pio2f+0x14a>
2401b884:	6820      	ldr	r0, [r4, #0]
2401b886:	b949      	cbnz	r1, 2401b89c <__kernel_rem_pio2f+0x240>
2401b888:	b118      	cbz	r0, 2401b892 <__kernel_rem_pio2f+0x236>
2401b88a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
2401b88e:	6020      	str	r0, [r4, #0]
2401b890:	2001      	movs	r0, #1
2401b892:	f10e 0e01 	add.w	lr, lr, #1
2401b896:	3404      	adds	r4, #4
2401b898:	4601      	mov	r1, r0
2401b89a:	e789      	b.n	2401b7b0 <__kernel_rem_pio2f+0x154>
2401b89c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
2401b8a0:	6020      	str	r0, [r4, #0]
2401b8a2:	4608      	mov	r0, r1
2401b8a4:	e7f5      	b.n	2401b892 <__kernel_rem_pio2f+0x236>
2401b8a6:	1e74      	subs	r4, r6, #1
2401b8a8:	ab08      	add	r3, sp, #32
2401b8aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
2401b8ae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
2401b8b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
2401b8b6:	e783      	b.n	2401b7c0 <__kernel_rem_pio2f+0x164>
2401b8b8:	1e74      	subs	r4, r6, #1
2401b8ba:	ab08      	add	r3, sp, #32
2401b8bc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
2401b8c0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
2401b8c4:	e7f5      	b.n	2401b8b2 <__kernel_rem_pio2f+0x256>
2401b8c6:	ab08      	add	r3, sp, #32
2401b8c8:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
2401b8cc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
2401b8d0:	4301      	orrs	r1, r0
2401b8d2:	e7ae      	b.n	2401b832 <__kernel_rem_pio2f+0x1d6>
2401b8d4:	3001      	adds	r0, #1
2401b8d6:	f854 7d04 	ldr.w	r7, [r4, #-4]!
2401b8da:	2f00      	cmp	r7, #0
2401b8dc:	d0fa      	beq.n	2401b8d4 <__kernel_rem_pio2f+0x278>
2401b8de:	9b06      	ldr	r3, [sp, #24]
2401b8e0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
2401b8e4:	eb0d 0403 	add.w	r4, sp, r3
2401b8e8:	9b01      	ldr	r3, [sp, #4]
2401b8ea:	18f7      	adds	r7, r6, r3
2401b8ec:	ab1c      	add	r3, sp, #112	; 0x70
2401b8ee:	f106 0c01 	add.w	ip, r6, #1
2401b8f2:	3c4c      	subs	r4, #76	; 0x4c
2401b8f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
2401b8f8:	4430      	add	r0, r6
2401b8fa:	4560      	cmp	r0, ip
2401b8fc:	da04      	bge.n	2401b908 <__kernel_rem_pio2f+0x2ac>
2401b8fe:	4606      	mov	r6, r0
2401b900:	e711      	b.n	2401b726 <__kernel_rem_pio2f+0xca>
2401b902:	9c05      	ldr	r4, [sp, #20]
2401b904:	2001      	movs	r0, #1
2401b906:	e7e6      	b.n	2401b8d6 <__kernel_rem_pio2f+0x27a>
2401b908:	9b04      	ldr	r3, [sp, #16]
2401b90a:	f8dd e008 	ldr.w	lr, [sp, #8]
2401b90e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
2401b912:	9306      	str	r3, [sp, #24]
2401b914:	ee07 3a90 	vmov	s15, r3
2401b918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401b91c:	2600      	movs	r6, #0
2401b91e:	ece7 7a01 	vstmia	r7!, {s15}
2401b922:	eddf 7a0e 	vldr	s15, [pc, #56]	; 2401b95c <__kernel_rem_pio2f+0x300>
2401b926:	46b9      	mov	r9, r7
2401b928:	455e      	cmp	r6, fp
2401b92a:	dd04      	ble.n	2401b936 <__kernel_rem_pio2f+0x2da>
2401b92c:	ece4 7a01 	vstmia	r4!, {s15}
2401b930:	f10c 0c01 	add.w	ip, ip, #1
2401b934:	e7e1      	b.n	2401b8fa <__kernel_rem_pio2f+0x29e>
2401b936:	ecfe 6a01 	vldmia	lr!, {s13}
2401b93a:	ed39 7a01 	vldmdb	r9!, {s14}
2401b93e:	3601      	adds	r6, #1
2401b940:	eee6 7a87 	vfma.f32	s15, s13, s14
2401b944:	e7f0      	b.n	2401b928 <__kernel_rem_pio2f+0x2cc>
2401b946:	3c01      	subs	r4, #1
2401b948:	e777      	b.n	2401b83a <__kernel_rem_pio2f+0x1de>
2401b94a:	bf00      	nop
2401b94c:	2402b694 	.word	0x2402b694
2401b950:	2402b668 	.word	0x2402b668
2401b954:	43800000 	.word	0x43800000
2401b958:	3b800000 	.word	0x3b800000
2401b95c:	00000000 	.word	0x00000000
2401b960:	9b03      	ldr	r3, [sp, #12]
2401b962:	eeb0 0a48 	vmov.f32	s0, s16
2401b966:	1a98      	subs	r0, r3, r2
2401b968:	f000 f9a4 	bl	2401bcb4 <scalbnf>
2401b96c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 2401b954 <__kernel_rem_pio2f+0x2f8>
2401b970:	eeb4 0ac7 	vcmpe.f32	s0, s14
2401b974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401b978:	db19      	blt.n	2401b9ae <__kernel_rem_pio2f+0x352>
2401b97a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 2401b958 <__kernel_rem_pio2f+0x2fc>
2401b97e:	ee60 7a27 	vmul.f32	s15, s0, s15
2401b982:	aa08      	add	r2, sp, #32
2401b984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401b988:	1c74      	adds	r4, r6, #1
2401b98a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401b98e:	3508      	adds	r5, #8
2401b990:	eea7 0ac7 	vfms.f32	s0, s15, s14
2401b994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2401b998:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401b99c:	ee10 3a10 	vmov	r3, s0
2401b9a0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
2401b9a4:	ee17 3a90 	vmov	r3, s15
2401b9a8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
2401b9ac:	e74b      	b.n	2401b846 <__kernel_rem_pio2f+0x1ea>
2401b9ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
2401b9b2:	aa08      	add	r2, sp, #32
2401b9b4:	ee10 3a10 	vmov	r3, s0
2401b9b8:	4634      	mov	r4, r6
2401b9ba:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
2401b9be:	e742      	b.n	2401b846 <__kernel_rem_pio2f+0x1ea>
2401b9c0:	a808      	add	r0, sp, #32
2401b9c2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
2401b9c6:	9001      	str	r0, [sp, #4]
2401b9c8:	ee07 0a90 	vmov	s15, r0
2401b9cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2401b9d0:	3b01      	subs	r3, #1
2401b9d2:	ee67 7a80 	vmul.f32	s15, s15, s0
2401b9d6:	ee20 0a07 	vmul.f32	s0, s0, s14
2401b9da:	ed62 7a01 	vstmdb	r2!, {s15}
2401b9de:	e73f      	b.n	2401b860 <__kernel_rem_pio2f+0x204>
2401b9e0:	ecf6 6a01 	vldmia	r6!, {s13}
2401b9e4:	ecb5 7a01 	vldmia	r5!, {s14}
2401b9e8:	eee6 7a87 	vfma.f32	s15, s13, s14
2401b9ec:	3001      	adds	r0, #1
2401b9ee:	4550      	cmp	r0, sl
2401b9f0:	dc01      	bgt.n	2401b9f6 <__kernel_rem_pio2f+0x39a>
2401b9f2:	4290      	cmp	r0, r2
2401b9f4:	ddf4      	ble.n	2401b9e0 <__kernel_rem_pio2f+0x384>
2401b9f6:	a858      	add	r0, sp, #352	; 0x160
2401b9f8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
2401b9fc:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
2401ba00:	3b01      	subs	r3, #1
2401ba02:	e731      	b.n	2401b868 <__kernel_rem_pio2f+0x20c>
2401ba04:	9b66      	ldr	r3, [sp, #408]	; 0x198
2401ba06:	2b02      	cmp	r3, #2
2401ba08:	dc09      	bgt.n	2401ba1e <__kernel_rem_pio2f+0x3c2>
2401ba0a:	2b00      	cmp	r3, #0
2401ba0c:	dc2b      	bgt.n	2401ba66 <__kernel_rem_pio2f+0x40a>
2401ba0e:	d044      	beq.n	2401ba9a <__kernel_rem_pio2f+0x43e>
2401ba10:	f009 0007 	and.w	r0, r9, #7
2401ba14:	b059      	add	sp, #356	; 0x164
2401ba16:	ecbd 8b04 	vpop	{d8-d9}
2401ba1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2401ba1e:	9b66      	ldr	r3, [sp, #408]	; 0x198
2401ba20:	2b03      	cmp	r3, #3
2401ba22:	d1f5      	bne.n	2401ba10 <__kernel_rem_pio2f+0x3b4>
2401ba24:	aa30      	add	r2, sp, #192	; 0xc0
2401ba26:	1f0b      	subs	r3, r1, #4
2401ba28:	4413      	add	r3, r2
2401ba2a:	461a      	mov	r2, r3
2401ba2c:	4620      	mov	r0, r4
2401ba2e:	2800      	cmp	r0, #0
2401ba30:	f1a2 0204 	sub.w	r2, r2, #4
2401ba34:	dc52      	bgt.n	2401badc <__kernel_rem_pio2f+0x480>
2401ba36:	4622      	mov	r2, r4
2401ba38:	2a01      	cmp	r2, #1
2401ba3a:	f1a3 0304 	sub.w	r3, r3, #4
2401ba3e:	dc5d      	bgt.n	2401bafc <__kernel_rem_pio2f+0x4a0>
2401ba40:	ab30      	add	r3, sp, #192	; 0xc0
2401ba42:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 2401b95c <__kernel_rem_pio2f+0x300>
2401ba46:	440b      	add	r3, r1
2401ba48:	2c01      	cmp	r4, #1
2401ba4a:	dc67      	bgt.n	2401bb1c <__kernel_rem_pio2f+0x4c0>
2401ba4c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
2401ba50:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
2401ba54:	2f00      	cmp	r7, #0
2401ba56:	d167      	bne.n	2401bb28 <__kernel_rem_pio2f+0x4cc>
2401ba58:	edc8 6a00 	vstr	s13, [r8]
2401ba5c:	ed88 7a01 	vstr	s14, [r8, #4]
2401ba60:	edc8 7a02 	vstr	s15, [r8, #8]
2401ba64:	e7d4      	b.n	2401ba10 <__kernel_rem_pio2f+0x3b4>
2401ba66:	ab30      	add	r3, sp, #192	; 0xc0
2401ba68:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 2401b95c <__kernel_rem_pio2f+0x300>
2401ba6c:	440b      	add	r3, r1
2401ba6e:	4622      	mov	r2, r4
2401ba70:	2a00      	cmp	r2, #0
2401ba72:	da24      	bge.n	2401babe <__kernel_rem_pio2f+0x462>
2401ba74:	b34f      	cbz	r7, 2401baca <__kernel_rem_pio2f+0x46e>
2401ba76:	eef1 7a47 	vneg.f32	s15, s14
2401ba7a:	edc8 7a00 	vstr	s15, [r8]
2401ba7e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
2401ba82:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401ba86:	aa31      	add	r2, sp, #196	; 0xc4
2401ba88:	2301      	movs	r3, #1
2401ba8a:	429c      	cmp	r4, r3
2401ba8c:	da20      	bge.n	2401bad0 <__kernel_rem_pio2f+0x474>
2401ba8e:	b10f      	cbz	r7, 2401ba94 <__kernel_rem_pio2f+0x438>
2401ba90:	eef1 7a67 	vneg.f32	s15, s15
2401ba94:	edc8 7a01 	vstr	s15, [r8, #4]
2401ba98:	e7ba      	b.n	2401ba10 <__kernel_rem_pio2f+0x3b4>
2401ba9a:	ab30      	add	r3, sp, #192	; 0xc0
2401ba9c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 2401b95c <__kernel_rem_pio2f+0x300>
2401baa0:	440b      	add	r3, r1
2401baa2:	2c00      	cmp	r4, #0
2401baa4:	da05      	bge.n	2401bab2 <__kernel_rem_pio2f+0x456>
2401baa6:	b10f      	cbz	r7, 2401baac <__kernel_rem_pio2f+0x450>
2401baa8:	eef1 7a67 	vneg.f32	s15, s15
2401baac:	edc8 7a00 	vstr	s15, [r8]
2401bab0:	e7ae      	b.n	2401ba10 <__kernel_rem_pio2f+0x3b4>
2401bab2:	ed33 7a01 	vldmdb	r3!, {s14}
2401bab6:	3c01      	subs	r4, #1
2401bab8:	ee77 7a87 	vadd.f32	s15, s15, s14
2401babc:	e7f1      	b.n	2401baa2 <__kernel_rem_pio2f+0x446>
2401babe:	ed73 7a01 	vldmdb	r3!, {s15}
2401bac2:	3a01      	subs	r2, #1
2401bac4:	ee37 7a27 	vadd.f32	s14, s14, s15
2401bac8:	e7d2      	b.n	2401ba70 <__kernel_rem_pio2f+0x414>
2401baca:	eef0 7a47 	vmov.f32	s15, s14
2401bace:	e7d4      	b.n	2401ba7a <__kernel_rem_pio2f+0x41e>
2401bad0:	ecb2 7a01 	vldmia	r2!, {s14}
2401bad4:	3301      	adds	r3, #1
2401bad6:	ee77 7a87 	vadd.f32	s15, s15, s14
2401bada:	e7d6      	b.n	2401ba8a <__kernel_rem_pio2f+0x42e>
2401badc:	edd2 7a00 	vldr	s15, [r2]
2401bae0:	edd2 6a01 	vldr	s13, [r2, #4]
2401bae4:	ee37 7aa6 	vadd.f32	s14, s15, s13
2401bae8:	3801      	subs	r0, #1
2401baea:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401baee:	ed82 7a00 	vstr	s14, [r2]
2401baf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401baf6:	edc2 7a01 	vstr	s15, [r2, #4]
2401bafa:	e798      	b.n	2401ba2e <__kernel_rem_pio2f+0x3d2>
2401bafc:	edd3 7a00 	vldr	s15, [r3]
2401bb00:	edd3 6a01 	vldr	s13, [r3, #4]
2401bb04:	ee37 7aa6 	vadd.f32	s14, s15, s13
2401bb08:	3a01      	subs	r2, #1
2401bb0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
2401bb0e:	ed83 7a00 	vstr	s14, [r3]
2401bb12:	ee77 7aa6 	vadd.f32	s15, s15, s13
2401bb16:	edc3 7a01 	vstr	s15, [r3, #4]
2401bb1a:	e78d      	b.n	2401ba38 <__kernel_rem_pio2f+0x3dc>
2401bb1c:	ed33 7a01 	vldmdb	r3!, {s14}
2401bb20:	3c01      	subs	r4, #1
2401bb22:	ee77 7a87 	vadd.f32	s15, s15, s14
2401bb26:	e78f      	b.n	2401ba48 <__kernel_rem_pio2f+0x3ec>
2401bb28:	eef1 6a66 	vneg.f32	s13, s13
2401bb2c:	eeb1 7a47 	vneg.f32	s14, s14
2401bb30:	edc8 6a00 	vstr	s13, [r8]
2401bb34:	ed88 7a01 	vstr	s14, [r8, #4]
2401bb38:	eef1 7a67 	vneg.f32	s15, s15
2401bb3c:	e790      	b.n	2401ba60 <__kernel_rem_pio2f+0x404>
2401bb3e:	bf00      	nop

2401bb40 <floor>:
2401bb40:	ee10 1a90 	vmov	r1, s1
2401bb44:	f3c1 520a 	ubfx	r2, r1, #20, #11
2401bb48:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
2401bb4c:	2b13      	cmp	r3, #19
2401bb4e:	b530      	push	{r4, r5, lr}
2401bb50:	ee10 0a10 	vmov	r0, s0
2401bb54:	ee10 5a10 	vmov	r5, s0
2401bb58:	dc31      	bgt.n	2401bbbe <floor+0x7e>
2401bb5a:	2b00      	cmp	r3, #0
2401bb5c:	da15      	bge.n	2401bb8a <floor+0x4a>
2401bb5e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 2401bc20 <floor+0xe0>
2401bb62:	ee30 0b07 	vadd.f64	d0, d0, d7
2401bb66:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401bb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bb6e:	dd07      	ble.n	2401bb80 <floor+0x40>
2401bb70:	2900      	cmp	r1, #0
2401bb72:	da4e      	bge.n	2401bc12 <floor+0xd2>
2401bb74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2401bb78:	4308      	orrs	r0, r1
2401bb7a:	d04d      	beq.n	2401bc18 <floor+0xd8>
2401bb7c:	492a      	ldr	r1, [pc, #168]	; (2401bc28 <floor+0xe8>)
2401bb7e:	2000      	movs	r0, #0
2401bb80:	460b      	mov	r3, r1
2401bb82:	4602      	mov	r2, r0
2401bb84:	ec43 2b10 	vmov	d0, r2, r3
2401bb88:	e020      	b.n	2401bbcc <floor+0x8c>
2401bb8a:	4a28      	ldr	r2, [pc, #160]	; (2401bc2c <floor+0xec>)
2401bb8c:	411a      	asrs	r2, r3
2401bb8e:	ea01 0402 	and.w	r4, r1, r2
2401bb92:	4304      	orrs	r4, r0
2401bb94:	d01a      	beq.n	2401bbcc <floor+0x8c>
2401bb96:	ed9f 7b22 	vldr	d7, [pc, #136]	; 2401bc20 <floor+0xe0>
2401bb9a:	ee30 0b07 	vadd.f64	d0, d0, d7
2401bb9e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401bba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bba6:	ddeb      	ble.n	2401bb80 <floor+0x40>
2401bba8:	2900      	cmp	r1, #0
2401bbaa:	bfbe      	ittt	lt
2401bbac:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
2401bbb0:	fa40 f303 	asrlt.w	r3, r0, r3
2401bbb4:	18c9      	addlt	r1, r1, r3
2401bbb6:	ea21 0102 	bic.w	r1, r1, r2
2401bbba:	2000      	movs	r0, #0
2401bbbc:	e7e0      	b.n	2401bb80 <floor+0x40>
2401bbbe:	2b33      	cmp	r3, #51	; 0x33
2401bbc0:	dd05      	ble.n	2401bbce <floor+0x8e>
2401bbc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2401bbc6:	d101      	bne.n	2401bbcc <floor+0x8c>
2401bbc8:	ee30 0b00 	vadd.f64	d0, d0, d0
2401bbcc:	bd30      	pop	{r4, r5, pc}
2401bbce:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
2401bbd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2401bbd6:	40e2      	lsrs	r2, r4
2401bbd8:	4210      	tst	r0, r2
2401bbda:	d0f7      	beq.n	2401bbcc <floor+0x8c>
2401bbdc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 2401bc20 <floor+0xe0>
2401bbe0:	ee30 0b07 	vadd.f64	d0, d0, d7
2401bbe4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
2401bbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bbec:	ddc8      	ble.n	2401bb80 <floor+0x40>
2401bbee:	2900      	cmp	r1, #0
2401bbf0:	da02      	bge.n	2401bbf8 <floor+0xb8>
2401bbf2:	2b14      	cmp	r3, #20
2401bbf4:	d103      	bne.n	2401bbfe <floor+0xbe>
2401bbf6:	3101      	adds	r1, #1
2401bbf8:	ea20 0002 	bic.w	r0, r0, r2
2401bbfc:	e7c0      	b.n	2401bb80 <floor+0x40>
2401bbfe:	2401      	movs	r4, #1
2401bc00:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
2401bc04:	fa04 f303 	lsl.w	r3, r4, r3
2401bc08:	4418      	add	r0, r3
2401bc0a:	4285      	cmp	r5, r0
2401bc0c:	bf88      	it	hi
2401bc0e:	1909      	addhi	r1, r1, r4
2401bc10:	e7f2      	b.n	2401bbf8 <floor+0xb8>
2401bc12:	2000      	movs	r0, #0
2401bc14:	4601      	mov	r1, r0
2401bc16:	e7b3      	b.n	2401bb80 <floor+0x40>
2401bc18:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
2401bc1c:	e7b0      	b.n	2401bb80 <floor+0x40>
2401bc1e:	bf00      	nop
2401bc20:	8800759c 	.word	0x8800759c
2401bc24:	7e37e43c 	.word	0x7e37e43c
2401bc28:	bff00000 	.word	0xbff00000
2401bc2c:	000fffff 	.word	0x000fffff

2401bc30 <floorf>:
2401bc30:	ee10 3a10 	vmov	r3, s0
2401bc34:	f3c3 52c7 	ubfx	r2, r3, #23, #8
2401bc38:	3a7f      	subs	r2, #127	; 0x7f
2401bc3a:	2a16      	cmp	r2, #22
2401bc3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
2401bc40:	dc2a      	bgt.n	2401bc98 <floorf+0x68>
2401bc42:	2a00      	cmp	r2, #0
2401bc44:	da11      	bge.n	2401bc6a <floorf+0x3a>
2401bc46:	eddf 7a18 	vldr	s15, [pc, #96]	; 2401bca8 <floorf+0x78>
2401bc4a:	ee30 0a27 	vadd.f32	s0, s0, s15
2401bc4e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401bc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bc56:	dd05      	ble.n	2401bc64 <floorf+0x34>
2401bc58:	2b00      	cmp	r3, #0
2401bc5a:	da23      	bge.n	2401bca4 <floorf+0x74>
2401bc5c:	4a13      	ldr	r2, [pc, #76]	; (2401bcac <floorf+0x7c>)
2401bc5e:	2900      	cmp	r1, #0
2401bc60:	bf18      	it	ne
2401bc62:	4613      	movne	r3, r2
2401bc64:	ee00 3a10 	vmov	s0, r3
2401bc68:	4770      	bx	lr
2401bc6a:	4911      	ldr	r1, [pc, #68]	; (2401bcb0 <floorf+0x80>)
2401bc6c:	4111      	asrs	r1, r2
2401bc6e:	420b      	tst	r3, r1
2401bc70:	d0fa      	beq.n	2401bc68 <floorf+0x38>
2401bc72:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2401bca8 <floorf+0x78>
2401bc76:	ee30 0a27 	vadd.f32	s0, s0, s15
2401bc7a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
2401bc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2401bc82:	ddef      	ble.n	2401bc64 <floorf+0x34>
2401bc84:	2b00      	cmp	r3, #0
2401bc86:	bfbe      	ittt	lt
2401bc88:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
2401bc8c:	fa40 f202 	asrlt.w	r2, r0, r2
2401bc90:	189b      	addlt	r3, r3, r2
2401bc92:	ea23 0301 	bic.w	r3, r3, r1
2401bc96:	e7e5      	b.n	2401bc64 <floorf+0x34>
2401bc98:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
2401bc9c:	d3e4      	bcc.n	2401bc68 <floorf+0x38>
2401bc9e:	ee30 0a00 	vadd.f32	s0, s0, s0
2401bca2:	4770      	bx	lr
2401bca4:	2300      	movs	r3, #0
2401bca6:	e7dd      	b.n	2401bc64 <floorf+0x34>
2401bca8:	7149f2ca 	.word	0x7149f2ca
2401bcac:	bf800000 	.word	0xbf800000
2401bcb0:	007fffff 	.word	0x007fffff

2401bcb4 <scalbnf>:
2401bcb4:	ee10 3a10 	vmov	r3, s0
2401bcb8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
2401bcbc:	d02a      	beq.n	2401bd14 <scalbnf+0x60>
2401bcbe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
2401bcc2:	d302      	bcc.n	2401bcca <scalbnf+0x16>
2401bcc4:	ee30 0a00 	vadd.f32	s0, s0, s0
2401bcc8:	4770      	bx	lr
2401bcca:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
2401bcce:	d122      	bne.n	2401bd16 <scalbnf+0x62>
2401bcd0:	4b23      	ldr	r3, [pc, #140]	; (2401bd60 <scalbnf+0xac>)
2401bcd2:	eddf 7a24 	vldr	s15, [pc, #144]	; 2401bd64 <scalbnf+0xb0>
2401bcd6:	4298      	cmp	r0, r3
2401bcd8:	ee20 0a27 	vmul.f32	s0, s0, s15
2401bcdc:	db16      	blt.n	2401bd0c <scalbnf+0x58>
2401bcde:	ee10 3a10 	vmov	r3, s0
2401bce2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
2401bce6:	3a19      	subs	r2, #25
2401bce8:	f24c 3150 	movw	r1, #50000	; 0xc350
2401bcec:	4288      	cmp	r0, r1
2401bcee:	dd14      	ble.n	2401bd1a <scalbnf+0x66>
2401bcf0:	eddf 7a1d 	vldr	s15, [pc, #116]	; 2401bd68 <scalbnf+0xb4>
2401bcf4:	eddf 6a1d 	vldr	s13, [pc, #116]	; 2401bd6c <scalbnf+0xb8>
2401bcf8:	ee10 3a10 	vmov	r3, s0
2401bcfc:	eeb0 7a67 	vmov.f32	s14, s15
2401bd00:	2b00      	cmp	r3, #0
2401bd02:	fe67 7aa6 	vselge.f32	s15, s15, s13
2401bd06:	ee27 0a87 	vmul.f32	s0, s15, s14
2401bd0a:	4770      	bx	lr
2401bd0c:	eddf 7a18 	vldr	s15, [pc, #96]	; 2401bd70 <scalbnf+0xbc>
2401bd10:	ee27 0a80 	vmul.f32	s0, s15, s0
2401bd14:	4770      	bx	lr
2401bd16:	0dd2      	lsrs	r2, r2, #23
2401bd18:	e7e6      	b.n	2401bce8 <scalbnf+0x34>
2401bd1a:	4410      	add	r0, r2
2401bd1c:	28fe      	cmp	r0, #254	; 0xfe
2401bd1e:	dce7      	bgt.n	2401bcf0 <scalbnf+0x3c>
2401bd20:	2800      	cmp	r0, #0
2401bd22:	dd06      	ble.n	2401bd32 <scalbnf+0x7e>
2401bd24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
2401bd28:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
2401bd2c:	ee00 3a10 	vmov	s0, r3
2401bd30:	4770      	bx	lr
2401bd32:	f110 0f16 	cmn.w	r0, #22
2401bd36:	da09      	bge.n	2401bd4c <scalbnf+0x98>
2401bd38:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2401bd70 <scalbnf+0xbc>
2401bd3c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 2401bd74 <scalbnf+0xc0>
2401bd40:	ee10 3a10 	vmov	r3, s0
2401bd44:	eeb0 7a67 	vmov.f32	s14, s15
2401bd48:	2b00      	cmp	r3, #0
2401bd4a:	e7da      	b.n	2401bd02 <scalbnf+0x4e>
2401bd4c:	3019      	adds	r0, #25
2401bd4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
2401bd52:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
2401bd56:	ed9f 0a08 	vldr	s0, [pc, #32]	; 2401bd78 <scalbnf+0xc4>
2401bd5a:	ee07 3a90 	vmov	s15, r3
2401bd5e:	e7d7      	b.n	2401bd10 <scalbnf+0x5c>
2401bd60:	ffff3cb0 	.word	0xffff3cb0
2401bd64:	4c000000 	.word	0x4c000000
2401bd68:	7149f2ca 	.word	0x7149f2ca
2401bd6c:	f149f2ca 	.word	0xf149f2ca
2401bd70:	0da24260 	.word	0x0da24260
2401bd74:	8da24260 	.word	0x8da24260
2401bd78:	33000000 	.word	0x33000000

2401bd7c <sinTable_f32>:
2401bd7c:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
2401bd8c:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
2401bd9c:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
2401bdac:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
2401bdbc:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
2401bdcc:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
2401bddc:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
2401bdec:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
2401bdfc:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
2401be0c:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
2401be1c:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
2401be2c:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
2401be3c:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
2401be4c:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
2401be5c:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
2401be6c:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
2401be7c:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
2401be8c:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
2401be9c:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
2401beac:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
2401bebc:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
2401becc:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
2401bedc:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
2401beec:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
2401befc:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
2401bf0c:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
2401bf1c:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
2401bf2c:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
2401bf3c:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
2401bf4c:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
2401bf5c:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
2401bf6c:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
2401bf7c:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
2401bf8c:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
2401bf9c:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
2401bfac:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
2401bfbc:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
2401bfcc:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
2401bfdc:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
2401bfec:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
2401bffc:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
2401c00c:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
2401c01c:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
2401c02c:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
2401c03c:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
2401c04c:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
2401c05c:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
2401c06c:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
2401c07c:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
2401c08c:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
2401c09c:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
2401c0ac:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
2401c0bc:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
2401c0cc:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
2401c0dc:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
2401c0ec:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
2401c0fc:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
2401c10c:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
2401c11c:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
2401c12c:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
2401c13c:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
2401c14c:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
2401c15c:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
2401c16c:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
2401c17c:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
2401c18c:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
2401c19c:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
2401c1ac:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
2401c1bc:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
2401c1cc:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
2401c1dc:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
2401c1ec:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
2401c1fc:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
2401c20c:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
2401c21c:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
2401c22c:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
2401c23c:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
2401c24c:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
2401c25c:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
2401c26c:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
2401c27c:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
2401c28c:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
2401c29c:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
2401c2ac:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
2401c2bc:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
2401c2cc:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
2401c2dc:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
2401c2ec:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
2401c2fc:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
2401c30c:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
2401c31c:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
2401c32c:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
2401c33c:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
2401c34c:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
2401c35c:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
2401c36c:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
2401c37c:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
2401c38c:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
2401c39c:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
2401c3ac:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
2401c3bc:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
2401c3cc:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
2401c3dc:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
2401c3ec:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
2401c3fc:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
2401c40c:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
2401c41c:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
2401c42c:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
2401c43c:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
2401c44c:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
2401c45c:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
2401c46c:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
2401c47c:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
2401c48c:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
2401c49c:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
2401c4ac:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
2401c4bc:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
2401c4cc:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
2401c4dc:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
2401c4ec:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
2401c4fc:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
2401c50c:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
2401c51c:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
2401c52c:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
2401c53c:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
2401c54c:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
2401c55c:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
2401c56c:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
2401c57c:	80000000 62652e2a 00000070 53594850     ....*.ebp...PHYS
2401c58c:	52545320 20202031 00002020 64656546      STR1     ..Feed
2401c59c:	6b636162 00002020 64696c53 696f4e65     back  ..SlideNoi
2401c5ac:	00002073 63756c50 6469576b 00002074     s ..PluckWidt ..
2401c5bc:	6b636950 73696f4e 00002065 6b636950     PickNoise ..Pick
2401c5cc:	69537075 0000206d 20202020 20202020     upSim ..        
2401c5dc:	00002020 53594850 52545320 20202032       ..PHYS STR2   
2401c5ec:	00002020 61636544 6d695479 00002065       ..DecayTime ..
2401c5fc:	656e6f54 20202020 00002020 63756c50     Tone      ..Pluc
2401c60c:	736f506b 00002020 6b636950 6f507075     kPos  ..PickupPo
2401c61c:	00002073 66697453 73656e66 00002073     s ..Stiffness ..
2401c62c:	41204246 2020706d 00002020 53204246     FB Amp    ..FB S
2401c63c:	64656570 00002020 46205550 65746c69     peed  ..PU Filte
2401c64c:	00002072 6d726148 63696e6f 00002020     r ..Harmonic  ..
2401c65c:	6d726148 58736f50 00002020 6d726148     HarmPosX  ..Harm
2401c66c:	59736f50 00002020 6f4d5550 74615264     PosY  ..PUModRat
2401c67c:	00002065 6f4d5550 706d4164 00002020     e ..PUModAmp  ..
2401c68c:	6e616850 486d6f74 00002020 69465550     PhantomH  ..PUFi
2401c69c:	7265746c 00002051 6b616550 72462046     lterQ ..PeakF Fr
2401c6ac:	00002071 6b616550 20512046 00002020     q ..PeakF Q   ..
2401c6bc:	736e6554 206e6f69 00002047 756f6341     Tension G ..Acou
2401c6cc:	63697473 00002020 49444441 45564954     stic  ..ADDITIVE
2401c6dc:	20202020 00002020 65727453 20686374           ..Stretch 
2401c6ec:	00002020 746c6954 20202020 00002020       ..Tilt      ..
2401c6fc:	73696f4e 706d4165 00002020 6b636950     NoiseAmp  ..Pick
2401c70c:	6d417075 00002070 65766944 20706d41     upAmp ..DiveAmp 
2401c71c:	00002020 65766944 65746152 00002020       ..DiveRate  ..
2401c72c:	61636544 20202079 00002020 41434f56     Decay     ..VOCA
2401c73c:	2020204c 20202020 00000020 657a6953     L        ...Size
2401c74c:	20202020 00002020 70696843 6b6e756d           ..Chipmunk
2401c75c:	00002020 6d616944 72657465 00002020       ..Diameter  ..
2401c76c:	6173614e 2020206c 00002020 62727554     Nasal     ..Turb
2401c77c:	696f4e20 00002073 6f766e55 64656369      Nois ..Unvoiced
2401c78c:	00002020 6b636142 20736f50 00002020       ..BackPos   ..
2401c79c:	6b636142 6d616944 00002020 6e756f54     BackDiam  ..Toun
2401c7ac:	6f506567 00202073 6e756f54 69446567     gePos  .ToungeDi
2401c7bc:	00202061 49525453 2033474e 20202020     a  .STRING3     
2401c7cc:	00000020 50205550 20706f72 00002020      ...PU Prop   ..
2401c7dc:	6b636c50 6f725020 00002070 73696f4e     Plck Prop ..Nois
2401c7ec:	6c694665 00002074 73696f4e 69614765     eFilt ..NoiseGai
2401c7fc:	0000206e 706d6144 20676e69 00002020     n ..Damping   ..
2401c80c:	63756c50 736f506b 00000020 50205550     PluckPos ...PU P
2401c81c:	2020736f 00000020 69617262 69622e6e     os   ...brain.bi
2401c82c:	0000006e                                n...

2401c830 <D1CorePrescTable>:
2401c830:	00000000 04030201 04030201 09080706     ................

2401c840 <flagBitshiftOffset.0>:
2401c840:	16100600 16100600                       ........

2401c848 <SD_Driver>:
2401c848:	2400d075 2400d0a5 2400d0c5 2400d155     u..$...$...$U..$
2401c858:	2400d0ed 3c3a2a22 7f7c3f3e 00000000     ...$"*:<>?|.....
2401c868:	3d3b2c2b 00005d5b                       +,;=[]..

2401c870 <ExCvt>:
2401c870:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
2401c880:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
2401c890:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
2401c8a0:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
2401c8b0:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
2401c8c0:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
2401c8d0:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
2401c8e0:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

2401c8f0 <LfnOfs>:
2401c8f0:	07050301 12100e09 1c181614 0000001e     ................

2401c900 <Tbl>:
2401c900:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
2401c910:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
2401c920:	00e600c9 00f400c6 00f200f6 00f900fb     ................
2401c930:	00d600ff 00f800dc 00d800a3 019200d7     ................
2401c940:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
2401c950:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
2401c960:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
2401c970:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
2401c980:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
2401c990:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
2401c9a0:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
2401c9b0:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
2401c9c0:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
2401c9d0:	00da00de 00d900db 00dd00fd 00b400af     ................
2401c9e0:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
2401c9f0:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

2401ca00 <cvt1.1>:
2401ca00:	031a0061 031700e0 030700f8 000100ff     a...............
2401ca10:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
2401ca20:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
2401ca30:	01840182 01860184 01870187 018a0189     ................
2401ca40:	018b018b 018e018d 0190018f 01910191     ................
2401ca50:	01940193 019601f6 01980197 023d0198     ..............=.
2401ca60:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
2401ca70:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
2401ca80:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
2401ca90:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
2401caa0:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
2401cab0:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
2401cac0:	01ca01cb 011001cd 000101dd 01de018e     ................
2401cad0:	01f30112 01f10003 01f401f4 012801f8     ..............(.
2401cae0:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
2401caf0:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
2401cb00:	01810040 02550186 018a0189 018f0258     @.....U.....X...
2401cb10:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
2401cb20:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
2401cb30:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
2401cb40:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
2401cb50:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
2401cb60:	01a90282 02850284 02870286 024401ae     ..............D.
2401cb70:	01b201b1 028d0245 028f028e 02910290     ....E...........
2401cb80:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
2401cb90:	03880386 038a0389 031103b1 000203c2     ................
2401cba0:	03a303a3 030803c4 000303cc 038e038c     ................
2401cbb0:	03d8038f 03f20118 03f9000a 03f403f3     ................
2401cbc0:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
2401cbd0:	04500320 04600710 048a0122 04c10136      .P...`."...6...
2401cbe0:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
2401cbf0:	00000000                                ....

2401cbf4 <cvt2.0>:
2401cbf4:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
2401cc04:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
2401cc14:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
2401cc24:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
2401cc34:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
2401cc44:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
2401cc54:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
2401cc64:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
2401cc74:	1fec0001 00011ff2 214e1ffc 21320001     ..........N!..2!
2401cc84:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
2401cc94:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
2401cca4:	2d000164 ff410826 0000031a              d..-&.A.....

2401ccb0 <__filterTanhTable_48000>:
2401ccb0:	3a0c4647 3a0c8a33 3a0cce41 3a0d126f     GF.:3..:A..:o..:
2401ccc0:	3a0d56be 3a0d9b2e 3a0ddfc0 3a0e2472     .V.:...:...:r$.:
2401ccd0:	3a0e6946 3a0eae3c 3a0ef352 3a0f388a     Fi.:<..:R..:.8.:
2401cce0:	3a0f7de4 3a0fc35f 3a1008fc 3a104eba     .}.:_..:...:.N.:
2401ccf0:	3a10949a 3a10da9d 3a1120c1 3a116707     ...:...:. .:.g.:
2401cd00:	3a11ad6f 3a11f3f9 3a123aa5 3a128173     o..:...:.:.:s..:
2401cd10:	3a12c864 3a130f77 3a1356ad 3a139e05     d..:w..:.V.:...:
2401cd20:	3a13e57f 3a142d1c 3a1474dc 3a14bcbf     ...:.-.:.t.:...:
2401cd30:	3a1504c4 3a154ced 3a159538 3a15dda6     ...:.L.:8..:...:
2401cd40:	3a162637 3a166eec 3a16b7c3 3a1700be     7&.:.n.:...:...:
2401cd50:	3a1749dc 3a17931e 3a17dc83 3a18260c     .I.:...:...:.&.:
2401cd60:	3a186fb8 3a18b988 3a19037c 3a194d93     .o.:...:|..:.M.:
2401cd70:	3a1997ce 3a19e22e 3a1a2cb1 3a1a7758     ...:...:.,.:Xw.:
2401cd80:	3a1ac224 3a1b0d14 3a1b5828 3a1ba360     $..:...:(X.:`..:
2401cd90:	3a1beebd 3a1c3a3e 3a1c85e4 3a1cd1af     ...:>:.:...:...:
2401cda0:	3a1d1d9e 3a1d69b2 3a1db5eb 3a1e0248     ...:.i.:...:H..:
2401cdb0:	3a1e4ecb 3a1e9b73 3a1ee840 3a1f3532     .N.:s..:@..:25.:
2401cdc0:	3a1f8249 3a1fcf86 3a201ce8 3a206a6f     I..:...:.. :oj :
2401cdd0:	3a20b81c 3a2105ef 3a2153e7 3a21a205     .. :..!:.S!:..!:
2401cde0:	3a21f049 3a223eb3 3a228d43 3a22dbf9     I.!:.>":C.":..":
2401cdf0:	3a232ad5 3a2379d7 3a23c8ff 3a24184e     .*#:.y#:..#:N.$:
2401ce00:	3a2467c3 3a24b75e 3a250721 3a255709     .g$:^.$:!.%:.W%:
2401ce10:	3a25a719 3a25f74f 3a2647ac 3a269830     ..%:O.%:.G&:0.&:
2401ce20:	3a26e8db 3a2739ad 3a278aa6 3a27dbc7     ..&:.9':..':..':
2401ce30:	3a282d0e 3a287e7d 3a28d014 3a2921d2     .-(:}~(:..(:.!):
2401ce40:	3a2973b7 3a29c5c4 3a2a17f9 3a2a6a56     .s):..):..*:Vj*:
2401ce50:	3a2abcda 3a2b0f87 3a2b625c 3a2bb558     ..*:..+:\b+:X.+:
2401ce60:	3a2c087d 3a2c5bca 3a2caf40 3a2d02de     }.,:.[,:@.,:..-:
2401ce70:	3a2d56a4 3a2daa93 3a2dfeaa 3a2e52eb     .V-:..-:..-:.R.:
2401ce80:	3a2ea754 3a2efbe6 3a2f50a1 3a2fa585     T..:...:.P/:../:
2401ce90:	3a2ffa92 3a304fc8 3a30a527 3a30fab0     ../:.O0:'.0:..0:
2401cea0:	3a315062 3a31a63e 3a31fc44 3a325273     bP1:>.1:D.1:sR2:
2401ceb0:	3a32a8cb 3a32ff4e 3a3355fa 3a33acd0     ..2:N.2:.U3:..3:
2401cec0:	3a3403d1 3a345afb 3a34b250 3a3509cf     ..4:.Z4:P.4:..5:
2401ced0:	3a356179 3a35b94c 3a36114b 3a366974     ya5:L.5:K.6:ti6:
2401cee0:	3a36c1c8 3a371a46 3a3772ef 3a37cbc3     ..6:F.7:.r7:..7:
2401cef0:	3a3824c3 3a387ded 3a38d743 3a3930c3     .$8:.}8:C.8:.09:
2401cf00:	3a398a6f 3a39e447 3a3a3e4a 3a3a9879     o.9:G.9:J>::y.::
2401cf10:	3a3af2d3 3a3b4d59 3a3ba80b 3a3c02e9     ..::YM;:..;:..<:
2401cf20:	3a3c5df2 3a3cb928 3a3d148a 3a3d7019     .]<:(.<:..=:.p=:
2401cf30:	3a3dcbd3 3a3e27ba 3a3e83ce 3a3ee00e     ..=:.'>:..>:..>:
2401cf40:	3a3f3c7b 3a3f9914 3a3ff5da 3a4052ce     {<?:..?:..?:.R@:
2401cf50:	3a40afee 3a410d3b 3a416ab6 3a41c85e     ..@:;.A:.jA:^.A:
2401cf60:	3a422633 3a428436 3a42e266 3a4340c4     3&B:6.B:f.B:.@C:
2401cf70:	3a439f4f 3a43fe08 3a445cef 3a44bc04     O.C:..C:.\D:..D:
2401cf80:	3a451b48 3a457ab9 3a45da58 3a463a26     H.E:.zE:X.E:&:F:
2401cf90:	3a469a22 3a46fa4d 3a475aa6 3a47bb2e     ".F:M.F:.ZG:..G:
2401cfa0:	3a481be4 3a487cca 3a48ddde 3a493f21     ..H:.|H:..H:!?I:
2401cfb0:	3a49a094 3a4a0235 3a4a6406 3a4ac606     ..I:5.J:.dJ:..J:
2401cfc0:	3a4b2836 3a4b8a95 3a4bed24 3a4c4fe3     6(K:..K:$.K:.OL:
2401cfd0:	3a4cb2d1 3a4d15ef 3a4d793e 3a4ddcbc     ..L:..M:>yM:..M:
2401cfe0:	3a4e406b 3a4ea44a 3a4f0859 3a4f6c98     k@N:J.N:Y.O:.lO:
2401cff0:	3a4fd109 3a5035a9 3a509a7b 3a50ff7d     ..O:.5P:{.P:}.P:
2401d000:	3a5164b1 3a51ca15 3a522faa 3a529571     .dQ:..Q:./R:q.R:
2401d010:	3a52fb69 3a536192 3a53c7ed 3a542e79     i.R:.aS:..S:y.T:
2401d020:	3a549537 3a54fc26 3a556348 3a55ca9b     7.T:&.T:HcU:..U:
2401d030:	3a563221 3a5699d8 3a5701c2 3a5769de     !2V:..V:..W:.iW:
2401d040:	3a57d22d 3a583aae 3a58a361 3a590c48     -.W:.:X:a.X:H.Y:
2401d050:	3a597561 3a59dead 3a5a482c 3a5ab1de     auY:..Y:,HZ:..Z:
2401d060:	3a5b1bc3 3a5b85dc 3a5bf028 3a5c5aa7     ..[:..[:(.[:.Z\:
2401d070:	3a5cc55a 3a5d3041 3a5d9b5b 3a5e06aa     Z.\:A0]:[.]:..^:
2401d080:	3a5e722c 3a5edde2 3a5f49cd 3a5fb5eb     ,r^:..^:.I_:.._:
2401d090:	3a60223e 3a608ec6 3a60fb82 3a616873     >"`:..`:..`:sha:
2401d0a0:	3a61d598 3a6242f2 3a62b082 3a631e46     ..a:.Bb:..b:F.c:
2401d0b0:	3a638c3f 3a63fa6e 3a6468d2 3a64d76c     ?.c:n.c:.hd:l.d:
2401d0c0:	3a65463b 3a65b53f 3a66247a 3a6693ea     ;Fe:?.e:z$f:..f:
2401d0d0:	3a670390 3a67736d 3a67e37f 3a6853c8     ..g:msg:..g:.Sh:
2401d0e0:	3a68c447 3a6934fd 3a69a5e9 3a6a170c     G.h:.4i:..i:..j:
2401d0f0:	3a6a8866 3a6af9f6 3a6b6bbe 3a6bddbc     f.j:..j:.kk:..k:
2401d100:	3a6c4ff2 3a6cc25f 3a6d3504 3a6da7e0     .Ol:_.l:.5m:..m:
2401d110:	3a6e1af4 3a6e8e3f 3a6f01c2 3a6f757d     ..n:?.n:..o:}uo:
2401d120:	3a6fe971 3a705d9c 3a70d200 3a71469c     q.o:.]p:..p:.Fq:
2401d130:	3a71bb70 3a72307d 3a72a5c3 3a731b41     p.q:}0r:..r:A.s:
2401d140:	3a7390f8 3a7406e9 3a747d12 3a74f375     ..s:..t:.}t:u.t:
2401d150:	3a756a11 3a75e0e6 3a7657f5 3a76cf3e     .ju:..u:.Wv:>.v:
2401d160:	3a7746c0 3a77be7d 3a783673 3a78aea3     .Fw:}.w:s6x:..x:
2401d170:	3a79270e 3a799fb2 3a7a1892 3a7a91ab     .'y:..y:..z:..z:
2401d180:	3a7b0b00 3a7b848f 3a7bfe59 3a7c785e     ..{:..{:Y.{:^x|:
2401d190:	3a7cf29e 3a7d6d19 3a7de7d0 3a7e62c2     ..|:.m}:..}:.b~:
2401d1a0:	3a7eddef 3a7f5958 3a7fd4fd 3a80286f     ..~:XY.:...:o(.:
2401d1b0:	3a80667d 3a80a4aa 3a80e2f4 3a81215d     }f.:...:...:]!.:
2401d1c0:	3a815fe4 3a819e89 3a81dd4d 3a821c2f     ._.:...:M..:/..:
2401d1d0:	3a825b2f 3a829a4e 3a82d98b 3a8318e8     /[.:N..:...:...:
2401d1e0:	3a835862 3a8397fc 3a83d7b4 3a84178b     bX.:...:...:...:
2401d1f0:	3a845781 3a849796 3a84d7ca 3a85181d     .W.:...:...:...:
2401d200:	3a855890 3a859921 3a85d9d2 3a861aa2     .X.:!..:...:...:
2401d210:	3a865b92 3a869ca0 3a86ddcf 3a871f1d     .[.:...:...:...:
2401d220:	3a87608a 3a87a218 3a87e3c5 3a882592     .`.:...:...:.%.:
2401d230:	3a88677e 3a88a98b 3a88ebb7 3a892e04     ~g.:...:...:...:
2401d240:	3a897071 3a89b2fe 3a89f5ab 3a8a3878     qp.:...:...:x8.:
2401d250:	3a8a7b66 3a8abe74 3a8b01a3 3a8b44f2     f{.:t..:...:.D.:
2401d260:	3a8b8862 3a8bcbf2 3a8c0fa3 3a8c5375     b..:...:...:uS.:
2401d270:	3a8c9768 3a8cdb7b 3a8d1fb0 3a8d6406     h..:{..:...:.d.:
2401d280:	3a8da87c 3a8ded14 3a8e31cd 3a8e76a8     |..:...:.1.:.v.:
2401d290:	3a8ebba3 3a8f00c0 3a8f45ff 3a8f8b5f     ...:...:.E.:_..:
2401d2a0:	3a8fd0e1 3a901684 3a905c49 3a90a230     ...:...:I\.:0..:
2401d2b0:	3a90e839 3a912e63 3a9174b0 3a91bb1f     9..:c..:.t.:...:
2401d2c0:	3a9201af 3a924862 3a928f37 3a92d62f     ...:bH.:7..:/..:
2401d2d0:	3a931d49 3a936485 3a93abe4 3a93f365     I..:.d.:...:e..:
2401d2e0:	3a943b09 3a9482cf 3a94cab9 3a9512c5     .;.:...:...:...:
2401d2f0:	3a955af4 3a95a346 3a95ebbb 3a963453     .Z.:F..:...:S4.:
2401d300:	3a967d0e 3a96c5ed 3a970eef 3a975814     .}.:...:...:.X.:
2401d310:	3a97a15c 3a97eac8 3a983458 3a987e0b     \..:...:X4.:.~.:
2401d320:	3a98c7e2 3a9911dc 3a995bfb 3a99a63d     ...:...:.[.:=..:
2401d330:	3a99f0a4 3a9a3b2e 3a9a85dc 3a9ad0af     ...:.;.:...:...:
2401d340:	3a9b1ba6 3a9b66c1 3a9bb200 3a9bfd64     ...:.f.:...:d..:
2401d350:	3a9c48ed 3a9c949a 3a9ce06b 3a9d2c62     .H.:...:k..:b,.:
2401d360:	3a9d787d 3a9dc4bd 3a9e1122 3a9e5dac     }x.:...:"..:.].:
2401d370:	3a9eaa5a 3a9ef72f 3a9f4428 3a9f9146     Z..:/..:(D.:F..:
2401d380:	3a9fde8a 3aa02bf4 3aa07982 3aa0c737     ...:.+.:.y.:7..:
2401d390:	3aa11511 3aa16310 3aa1b136 3aa1ff81     ...:.c.:6..:...:
2401d3a0:	3aa24df2 3aa29c8a 3aa2eb47 3aa33a2a     .M.:...:G..:*:.:
2401d3b0:	3aa38934 3aa3d864 3aa427ba 3aa47736     4..:d..:.'.:6w.:
2401d3c0:	3aa4c6d9 3aa516a3 3aa56693 3aa5b6aa     ...:...:.f.:...:
2401d3d0:	3aa606e8 3aa6574d 3aa6a7d8 3aa6f88b     ...:MW.:...:...:
2401d3e0:	3aa74964 3aa79a65 3aa7eb8d 3aa83cdd     dI.:e..:...:.<.:
2401d3f0:	3aa88e53 3aa8dff1 3aa931b7 3aa983a4     S..:...:.1.:...:
2401d400:	3aa9d5b9 3aaa27f6 3aaa7a5a 3aaacce7     ...:.'.:Zz.:...:
2401d410:	3aab1f9b 3aab7277 3aabc57c 3aac18a9     ...:wr.:|..:...:
2401d420:	3aac6bfe 3aacbf7b 3aad1321 3aad66ef     .k.:{..:!..:.f.:
2401d430:	3aadbae6 3aae0f05 3aae634d 3aaeb7be     ...:...:Mc.:...:
2401d440:	3aaf0c58 3aaf611b 3aafb607 3ab00b1c     X..:.a.:...:...:
2401d450:	3ab0605b 3ab0b5c2 3ab10b53 3ab1610d     [`.:...:S..:.a.:
2401d460:	3ab1b6f1 3ab20cff 3ab26336 3ab2b996     ...:...:6c.:...:
2401d470:	3ab31021 3ab366d6 3ab3bdb4 3ab414bd     !..:.f.:...:...:
2401d480:	3ab46bf0 3ab4c34d 3ab51ad4 3ab57286     .k.:M..:...:.r.:
2401d490:	3ab5ca62 3ab62268 3ab67a9a 3ab6d2f6     b..:h".:.z.:...:
2401d4a0:	3ab72b7c 3ab7842e 3ab7dd0b 3ab83612     |+.:...:...:.6.:
2401d4b0:	3ab88f45 3ab8e8a3 3ab9422c 3ab99be1     E..:...:,B.:...:
2401d4c0:	3ab9f5c1 3aba4fcc 3abaaa03 3abb0466     ...:.O.:...:f..:
2401d4d0:	3abb5ef5 3abbb9af 3abc1495 3abc6fa8     .^.:...:...:.o.:
2401d4e0:	3abccae6 3abd2651 3abd81e8 3abdddab     ...:Q&.:...:...:
2401d4f0:	3abe399b 3abe95b7 3abef200 3abf4e75     .9.:...:...:uN.:
2401d500:	3abfab18 3ac007e7 3ac064e3 3ac0c20c     ...:...:.d.:...:
2401d510:	3ac11f62 3ac17ce5 3ac1da96 3ac23874     b..:.|.:...:t8.:
2401d520:	3ac29680 3ac2f4b9 3ac3531f 3ac3b1b4     ...:...:.S.:...:
2401d530:	3ac41076 3ac46f66 3ac4ce84 3ac52dd0     v..:fo.:...:.-.:
2401d540:	3ac58d4a 3ac5ecf3 3ac64cc9 3ac6accf     J..:...:.L.:...:
2401d550:	3ac70d02 3ac76d65 3ac7cdf5 3ac82eb5     ...:em.:...:...:
2401d560:	3ac88fa4 3ac8f0c1 3ac9520e 3ac9b389     ...:...:.R.:...:
2401d570:	3aca1534 3aca770e 3acad918 3acb3b51     4..:.w.:...:Q;.:
2401d580:	3acb9db9 3acc0051 3acc6319 3accc611     ...:Q..:.c.:...:
2401d590:	3acd2939 3acd8c90 3acdf018 3ace53d0     9).:...:...:.S.:
2401d5a0:	3aceb7b8 3acf1bd1 3acf801a 3acfe494     ...:...:...:...:
2401d5b0:	3ad0493e 3ad0ae19 3ad11325 3ad17862     >I.:...:%..:bx.:
2401d5c0:	3ad1ddd0 3ad2436f 3ad2a93f 3ad30f40     ...:oC.:?..:@..:
2401d5d0:	3ad37573 3ad3dbd7 3ad4426d 3ad4a935     su.:...:mB.:5..:
2401d5e0:	3ad5102e 3ad5775a 3ad5deb7 3ad64646     ...:Zw.:...:FF.:
2401d5f0:	3ad6ae07 3ad715fb 3ad77e21 3ad7e679     ...:...:!~.:y..:
2401d600:	3ad84f04 3ad8b7c2 3ad920b2 3ad989d5     .O.:...:. .:...:
2401d610:	3ad9f32b 3ada5cb4 3adac670 3adb305f     +..:.\.:p..:_0.:
2401d620:	3adb9a82 3adc04d8 3adc6f61 3adcda1e     ...:...:ao.:...:
2401d630:	3add450f 3addb034 3ade1b8c 3ade8719     .E.:4..:...:...:
2401d640:	3adef2d9 3adf5ece 3adfcaf6 3ae03754     ...:.^.:...:T7.:
2401d650:	3ae0a3e6 3ae110ac 3ae17da7 3ae1ead7     ...:...:.}.:...:
2401d660:	3ae2583b 3ae2c5d5 3ae333a3 3ae3a1a7     ;X.:...:.3.:...:
2401d670:	3ae40fe0 3ae47e4f 3ae4ecf3 3ae55bcc     ...:O~.:...:.[.:
2401d680:	3ae5cadc 3ae63a21 3ae6a99b 3ae7194c     ...:!:.:...:L..:
2401d690:	3ae78933 3ae7f950 3ae869a4 3ae8da2e     3..:P..:.i.:...:
2401d6a0:	3ae94aee 3ae9bbe5 3aea2d12 3aea9e77     .J.:...:.-.:w..:
2401d6b0:	3aeb1012 3aeb81e4 3aebf3ee 3aec662e     ...:...:...:.f.:
2401d6c0:	3aecd8a6 3aed4b56 3aedbe3d 3aee315b     ...:VK.:=..:[1.:
2401d6d0:	3aeea4b1 3aef1840 3aef8c06 3af00004     ...:@..:...:...:
2401d6e0:	3af0743a 3af0e8a9 3af15d50 3af1d22f     :t.:...:P].:/..:
2401d6f0:	3af24747 3af2bc98 3af33222 3af3a7e4     GG.:...:"2.:...:
2401d700:	3af41ddf 3af49414 3af50a82 3af58129     ...:...:...:)..:
2401d710:	3af5f80a 3af66f24 3af6e678 3af75e06     ...:$o.:x..:.^.:
2401d720:	3af7d5cd 3af84dcf 3af8c60a 3af93e80     ...:.M.:...:.>.:
2401d730:	3af9b731 3afa301b 3afaa940 3afb22a0     1..:.0.:@..:.".:
2401d740:	3afb9c3b 3afc1610 3afc9021 3afd0a6d     ;..:...:!..:m..:
2401d750:	3afd84f3 3afdffb6 3afe7ab3 3afef5ec     ...:...:.z.:...:
2401d760:	3aff7161 3affed12 3b00347f 3b007293     aq.:...:.4.;.r.;
2401d770:	3b00b0c6 3b00ef16 3b012d85 3b016c12     ...;...;.-.;.l.;
2401d780:	3b01aabd 3b01e986 3b02286e 3b026775     ...;...;n(.;ug.;
2401d790:	3b02a699 3b02e5dd 3b03253f 3b0364c0     ...;...;?%.;.d.;
2401d7a0:	3b03a45f 3b03e41d 3b0423fb 3b0463f7     _..;...;.#.;.c.;
2401d7b0:	3b04a412 3b04e44c 3b0524a5 3b05651e     ...;L..;.$.;.e.;
2401d7c0:	3b05a5b5 3b05e66c 3b062742 3b066838     ...;l..;B'.;8h.;
2401d7d0:	3b06a94d 3b06ea82 3b072bd6 3b076d49     M..;...;.+.;Im.;
2401d7e0:	3b07aedd 3b07f090 3b083263 3b087456     ...;...;c2.;Vt.;
2401d7f0:	3b08b669 3b08f89c 3b093aef 3b097d62     i..;...;.:.;b}.;
2401d800:	3b09bff5 3b0a02a8 3b0a457c 3b0a8870     ...;...;|E.;p..;
2401d810:	3b0acb85 3b0b0eba 3b0b520f 3b0b9585     ...;...;.R.;...;
2401d820:	3b0bd91c 3b0c1cd4 3b0c60ac 3b0ca4a5     ...;...;.`.;...;
2401d830:	3b0ce8bf 3b0d2cfa 3b0d7157 3b0db5d4     ...;.,.;Wq.;...;
2401d840:	3b0dfa72 3b0e3f32 3b0e8413 3b0ec915     r..;2?.;...;...;
2401d850:	3b0f0e39 3b0f537e 3b0f98e4 3b0fde6d     9..;~S.;...;m..;
2401d860:	3b102417 3b1069e2 3b10afd0 3b10f5df     .$.;.i.;...;...;
2401d870:	3b113c10 3b118264 3b11c8d9 3b120f70     .<.;d..;...;p..;
2401d880:	3b12562a 3b129d06 3b12e404 3b132b24     *V.;...;...;$+.;
2401d890:	3b137267 3b13b9cd 3b140155 3b144900     gr.;...;U..;.I.;
2401d8a0:	3b1490cd 3b14d8bd 3b1520d0 3b156906     ...;...;. .;.i.;
2401d8b0:	3b15b15f 3b15f9db 3b16427a 3b168b3c     _..;...;zB.;<..;
2401d8c0:	3b16d421 3b171d2a 3b176656 3b17afa6     !..;*..;Vf.;...;
2401d8d0:	3b17f919 3b1842af 3b188c69 3b18d647     ...;.B.;i..;G..;
2401d8e0:	3b192049 3b196a6e 3b19b4b8 3b19ff25     I .;nj.;...;%..;
2401d8f0:	3b1a49b7 3b1a946c 3b1adf46 3b1b2a44     .I.;l..;F..;D*.;
2401d900:	3b1b7566 3b1bc0ad 3b1c0c18 3b1c57a7     fu.;...;...;.W.;
2401d910:	3b1ca35b 3b1cef34 3b1d3b32 3b1d8754     [..;4..;2;.;T..;
2401d920:	3b1dd39b 3b1e2008 3b1e6c99 3b1eb94f     ...;. .;.l.;O..;
2401d930:	3b1f062a 3b1f532b 3b1fa051 3b1fed9c     *..;+S.;Q..;...;
2401d940:	3b203b0d 3b2088a3 3b20d65f 3b212440     .; ;.. ;_. ;@$!;
2401d950:	3b217247 3b21c074 3b220ec7 3b225d3f     Gr!;t.!;..";?]";
2401d960:	3b22abde 3b22faa3 3b23498e 3b23989f     ..";..";.I#;..#;
2401d970:	3b23e7d6 3b243734 3b2486b8 3b24d663     ..#;47$;..$;c.$;
2401d980:	3b252634 3b25762c 3b25c64a 3b261690     4&%;,v%;J.%;..&;
2401d990:	3b2666fc 3b26b78f 3b27084a 3b27592b     .f&;..&;J.';+Y';
2401d9a0:	3b27aa33 3b27fb63 3b284cba 3b289e39     3.';c.';.L(;9.(;
2401d9b0:	3b28efde 3b2941ac 3b2993a1 3b29e5be     ..(;.A);..);..);
2401d9c0:	3b2a3802 3b2a8a6e 3b2add03 3b2b2fbf     .8*;n.*;..*;./+;
2401d9d0:	3b2b82a3 3b2bd5af 3b2c28e4 3b2c7c41     ..+;..+;.(,;A|,;
2401d9e0:	3b2ccfc6 3b2d2374 3b2d774a 3b2dcb49     ..,;t#-;Jw-;I.-;
2401d9f0:	3b2e1f71 3b2e73c1 3b2ec83a 3b2f1cdc     q..;.s.;:..;../;
2401da00:	3b2f71a7 3b2fc69b 3b301bb8 3b3070fe     .q/;../;..0;.p0;
2401da10:	3b30c66e 3b311c07 3b3171ca 3b31c7b6     n.0;..1;.q1;..1;
2401da20:	3b321dcb 3b32740b 3b32ca74 3b332107     ..2;.t2;t.2;.!3;
2401da30:	3b3377c3 3b33ceaa 3b3425bb 3b347cf6     .w3;..3;.%4;.|4;
2401da40:	3b34d45c 3b352beb 3b3583a5 3b35db8a     \.4;.+5;..5;..5;
2401da50:	3b363399 3b368bd2 3b36e437 3b373cc6     .36;..6;7.6;.<7;
2401da60:	3b379580 3b37ee65 3b384775 3b38a0b1     ..7;e.7;uG8;..8;
2401da70:	3b38fa17 3b3953a9 3b39ad66 3b3a074f     ..8;.S9;f.9;O.:;
2401da80:	3b3a6163 3b3abba2 3b3b160e 3b3b70a5     ca:;..:;..;;.p;;
2401da90:	3b3bcb68 3b3c2657 3b3c8172 3b3cdcb9     h.;;W&<;r.<;..<;
2401daa0:	3b3d382d 3b3d93cc 3b3def98 3b3e4b91     -8=;..=;..=;.K>;
2401dab0:	3b3ea7b6 3b3f0408 3b3f6086 3b3fbd31     ..>;..?;.`?;1.?;
2401dac0:	3b401a09 3b40770e 3b40d440 3b41319f     ..@;.w@;@.@;.1A;
2401dad0:	3b418f2b 3b41ece5 3b424acc 3b42a8e0     +.A;..A;.JB;..B;
2401dae0:	3b430722 3b436592 3b43c430 3b4422fb     ".C;.eC;0.C;."D;
2401daf0:	3b4481f4 3b44e11b 3b454070 3b459ff4     ..D;..D;p@E;..E;
2401db00:	3b45ffa5 3b465f85 3b46bf93 3b471fd0     ..E;._F;..F;..G;
2401db10:	3b47803c 3b47e0d6 3b48419f 3b48a297     <.G;..G;.AH;..H;
2401db20:	3b4903bd 3b496513 3b49c698 3b4a284c     ..I;.eI;..I;L(J;
2401db30:	3b4a8a30 3b4aec43 3b4b4e85 3b4bb0f7     0.J;C.J;.NK;..K;
2401db40:	3b4c1399 3b4c766a 3b4cd96b 3b4d3c9c     ..L;jvL;k.L;.<M;
2401db50:	3b4d9ffe 3b4e038f 3b4e6750 3b4ecb42     ..M;..N;PgN;B.N;
2401db60:	3b4f2f64 3b4f93b7 3b4ff83a 3b505cee     d/O;..O;:.O;.\P;
2401db70:	3b50c1d3 3b5126e9 3b518c2f 3b51f1a7     ..P;.&Q;/.Q;..Q;
2401db80:	3b52574f 3b52bd29 3b532335 3b538971     OWR;).R;5#S;q.S;
2401db90:	3b53efdf 3b54567f 3b54bd51 3b552454     ..S;.VT;Q.T;T$U;
2401dba0:	3b558b89 3b55f2f0 3b565a89 3b56c255     ..U;..U;.ZV;U.V;
2401dbb0:	3b572a52 3b579282 3b57fae5 3b58637a     R*W;..W;..W;zcX;
2401dbc0:	3b58cc41 3b59353b 3b599e69 3b5a07c9     A.X;;5Y;i.Y;..Z;
2401dbd0:	3b5a715c 3b5adb22 3b5b451c 3b5baf48     \qZ;".Z;.E[;H.[;
2401dbe0:	3b5c19a8 3b5c843c 3b5cef03 3b5d59fe     ..\;<.\;..\;.Y];
2401dbf0:	3b5dc52d 3b5e3090 3b5e9c27 3b5f07f2     -.];.0^;'.^;.._;
2401dc00:	3b5f73f1 3b5fe024 3b604c8c 3b60b928     .s_;$._;.L`;(.`;
2401dc10:	3b6125f8 3b6192fe 3b620038 3b626da7     .%a;..a;8.b;.mb;
2401dc20:	3b62db4b 3b634925 3b63b733 3b642577     K.b;%Ic;3.c;w%d;
2401dc30:	3b6493f0 3b65029f 3b657183 3b65e09d     ..d;..e;.qe;..e;
2401dc40:	3b664fec 3b66bf72 3b672f2e 3b679f1f     .Of;r.f;./g;..g;
2401dc50:	3b680f47 3b687fa5 3b68f03a 3b696105     G.h;..h;:.h;.ai;
2401dc60:	3b69d207 3b6a433f 3b6ab4af 3b6b2655     ..i;?Cj;..j;U&k;
2401dc70:	3b6b9832 3b6c0a47 3b6c7c92 3b6cef15     2.k;G.l;.|l;..l;
2401dc80:	3b6d61d0 3b6dd4c2 3b6e47eb 3b6ebb4d     .am;..m;.Gn;M.n;
2401dc90:	3b6f2ee6 3b6fa2b7 3b7016c1 3b708b02     ..o;..o;..p;..p;
2401dca0:	3b70ff7c 3b71742e 3b71e919 3b725e3c     |.p;.tq;..q;<^r;
2401dcb0:	3b72d398 3b73492d 3b73befb 3b743502     ..r;-Is;..s;.5t;
2401dcc0:	3b74ab42 3b7521bb 3b75986e 3b760f5a     B.t;.!u;n.u;Z.v;
2401dcd0:	3b768680 3b76fddf 3b777579 3b77ed4c     ..v;..v;yuw;L.w;
2401dce0:	3b786559 3b78dda0 3b795622 3b79cede     Yex;..x;"Vy;..y;
2401dcf0:	3b7a47d4 3b7ac105 3b7b3a70 3b7bb417     .Gz;..z;p:{;..{;
2401dd00:	3b7c2df8 3b7ca815 3b7d226c 3b7d9cff     .-|;..|;l"};..};
2401dd10:	3b7e17cd 3b7e92d6 3b7f0e1b 3b7f899c     ..~;..~;...;...;
2401dd20:	3b8002ac 3b8040a9 3b807ec3 3b80bcfb     ...;.@.;.~.;...;
2401dd30:	3b80fb52 3b8139c6 3b817859 3b81b70a     R..;.9.;Yx.;...;
2401dd40:	3b81f5da 3b8234c8 3b8273d4 3b82b2ff     ...;.4.;.s.;...;
2401dd50:	3b82f249 3b8331b1 3b837138 3b83b0de     I..;.1.;8q.;...;
2401dd60:	3b83f0a2 3b843086 3b847088 3b84b0a9     ...;.0.;.p.;...;
2401dd70:	3b84f0ea 3b853149 3b8571c8 3b85b266     ...;I1.;.q.;f..;
2401dd80:	3b85f323 3b8633ff 3b8674fb 3b86b617     #..;.3.;.t.;...;
2401dd90:	3b86f752 3b8738ac 3b877a26 3b87bbc0     R..;.8.;&z.;...;
2401dda0:	3b87fd7a 3b883f53 3b88814c 3b88c366     z..;S?.;L..;f..;
2401ddb0:	3b89059f 3b8947f8 3b898a72 3b89cd0c     ...;.G.;r..;...;
2401ddc0:	3b8a0fc5 3b8a52a0 3b8a959a 3b8ad8b5     ...;.R.;...;...;
2401ddd0:	3b8b1bf1 3b8b5f4d 3b8ba2ca 3b8be667     ...;M_.;...;g..;
2401dde0:	3b8c2a25 3b8c6e04 3b8cb204 3b8cf625     %*.;.n.;...;%..;
2401ddf0:	3b8d3a66 3b8d7ec9 3b8dc34d 3b8e07f2     f:.;.~.;M..;...;
2401de00:	3b8e4cb8 3b8e91a0 3b8ed6a9 3b8f1bd3     .L.;...;...;...;
2401de10:	3b8f611f 3b8fa68d 3b8fec1c 3b9031cd     .a.;...;...;.1.;
2401de20:	3b90779f 3b90bd93 3b9103aa 3b9149e2     .w.;...;...;.I.;
2401de30:	3b91903c 3b91d6b8 3b921d56 3b926417     <..;...;V..;.d.;
2401de40:	3b92aafa 3b92f1ff 3b933926 3b938070     ...;...;&9.;p..;
2401de50:	3b93c7dd 3b940f6c 3b94571d 3b949ef2     ...;l..;.W.;...;
2401de60:	3b94e6e9 3b952f03 3b957740 3b95bfa0     ...;./.;@w.;...;
2401de70:	3b960823 3b9650c9 3b969992 3b96e27f     #..;.P.;...;...;
2401de80:	3b972b8f 3b9774c2 3b97be19 3b980793     .+.;.t.;...;...;
2401de90:	3b985131 3b989af2 3b98e4d7 3b992ee0     1Q.;...;...;...;
2401dea0:	3b99790d 3b99c35d 3b9a0dd2 3b9a586b     .y.;]..;...;kX.;
2401deb0:	3b9aa328 3b9aee09 3b9b390e 3b9b8438     (..;...;.9.;8..;
2401dec0:	3b9bcf86 3b9c1af8 3b9c668f 3b9cb24b     ...;...;.f.;K..;
2401ded0:	3b9cfe2b 3b9d4a30 3b9d965a 3b9de2a9     +..;0J.;Z..;...;
2401dee0:	3b9e2f1c 3b9e7bb5 3b9ec873 3b9f1556     ./.;.{.;s..;V..;
2401def0:	3b9f625e 3b9faf8b 3b9ffcde 3ba04a57     ^b.;...;...;WJ.;
2401df00:	3ba097f4 3ba0e5b8 3ba133a1 3ba181b0     ...;...;.3.;...;
2401df10:	3ba1cfe4 3ba21e3f 3ba26cbf 3ba2bb65     ...;?..;.l.;e..;
2401df20:	3ba30a32 3ba35925 3ba3a83d 3ba3f77d     2..;%Y.;=..;}..;
2401df30:	3ba446e2 3ba4966e 3ba4e621 3ba535fa     .F.;n..;!..;.5.;
2401df40:	3ba585fa 3ba5d620 3ba6266e 3ba676e2     ...; ..;n&.;.v.;
2401df50:	3ba6c77d 3ba7183f 3ba76928 3ba7ba39     }..;?..;(i.;9..;
2401df60:	3ba80b71 3ba85cd0 3ba8ae56 3ba90004     q..;.\.;V..;...;
2401df70:	3ba951da 3ba9a3d7 3ba9f5fc 3baa4848     .Q.;...;...;HH.;
2401df80:	3baa9abd 3baaed59 3bab401e 3bab930a     ...;Y..;.@.;...;
2401df90:	3babe61f 3bac395c 3bac8cc1 3bace04e     ...;\9.;...;N..;
2401dfa0:	3bad3404 3bad87e3 3baddbea 3bae301a     .4.;...;...;.0.;
2401dfb0:	3bae8473 3baed8f4 3baf2d9f 3baf8272     s..;...;.-.;r..;
2401dfc0:	3bafd76e 3bb02c94 3bb081e3 3bb0d75b     n..;.,.;...;[..;
2401dfd0:	3bb12cfd 3bb182c8 3bb1d8bc 3bb22eda     .,.;...;...;...;
2401dfe0:	3bb28522 3bb2db94 3bb3322f 3bb388f5     "..;...;/2.;...;
2401dff0:	3bb3dfe4 3bb436fe 3bb48e42 3bb4e5b0     ...;.6.;B..;...;
2401e000:	3bb53d48 3bb5950b 3bb5ecf8 3bb64510     H=.;...;...;.E.;
2401e010:	3bb69d53 3bb6f5c0 3bb74e58 3bb7a71b     S..;...;XN.;...;
2401e020:	3bb80009 3bb85922 3bb8b266 3bb90bd5     ...;"Y.;f..;...;
2401e030:	3bb96570 3bb9bf36 3bba1928 3bba7345     pe.;6..;(..;Es.;
2401e040:	3bbacd8e 3bbb2802 3bbb82a3 3bbbdd6f     ...;.(.;...;o..;
2401e050:	3bbc3867 3bbc938b 3bbceedb 3bbd4a58     g8.;...;...;XJ.;
2401e060:	3bbda601 3bbe01d6 3bbe5dd8 3bbeba06     ...;...;.].;...;
2401e070:	3bbf1661 3bbf72e8 3bbfcf9d 3bc02c7e     a..;.r.;...;~,.;
2401e080:	3bc0898c 3bc0e6c8 3bc14430 3bc1a1c6     ...;...;0D.;...;
2401e090:	3bc1ff89 3bc25d7a 3bc2bb97 3bc319e3     ...;z].;...;...;
2401e0a0:	3bc3785c 3bc3d703 3bc435d8 3bc494db     \x.;...;.5.;...;
2401e0b0:	3bc4f40b 3bc5536a 3bc5b2f7 3bc612b2     ...;jS.;...;...;
2401e0c0:	3bc6729c 3bc6d2b4 3bc732fb 3bc79370     .r.;...;.2.;p..;
2401e0d0:	3bc7f414 3bc854e6 3bc8b5e8 3bc91719     ...;.T.;...;...;
2401e0e0:	3bc97878 3bc9da07 3bca3bc5 3bca9db3     xx.;...;.;.;...;
2401e0f0:	3bcaffcf 3bcb621c 3bcbc498 3bcc2743     ...;.b.;...;C'.;
2401e100:	3bcc8a1f 3bcced2a 3bcd5065 3bcdb3d0     ...;*..;eP.;...;
2401e110:	3bce176c 3bce7b37 3bcedf33 3bcf4360     l..;7{.;3..;`C.;
2401e120:	3bcfa7bd 3bd00c4a 3bd07108 3bd0d5f7     ...;J..;.q.;...;
2401e130:	3bd13b17 3bd1a068 3bd205ea 3bd26b9d     .;.;h..;...;.k.;
2401e140:	3bd2d181 3bd33797 3bd39dde 3bd40457     ...;.7.;...;W..;
2401e150:	3bd46b01 3bd4d1dd 3bd538ea 3bd5a02a     .k.;...;.8.;*..;
2401e160:	3bd6079c 3bd66f3f 3bd6d715 3bd73f1e     ...;?o.;...;.?.;
2401e170:	3bd7a758 3bd80fc5 3bd87865 3bd8e137     X..;...;ex.;7..;
2401e180:	3bd94a3c 3bd9b374 3bda1cdf 3bda867d     <J.;t..;...;}..;
2401e190:	3bdaf04e 3bdb5a52 3bdbc48a 3bdc2ef5     N..;RZ.;...;...;
2401e1a0:	3bdc9994 3bdd0466 3bdd6f6c 3bdddaa6     ...;f..;lo.;...;
2401e1b0:	3bde4614 3bdeb1b5 3bdf1d8b 3bdf8995     .F.;...;...;...;
2401e1c0:	3bdff5d4 3be06247 3be0ceee 3be13bca     ...;Gb.;...;.;.;
2401e1d0:	3be1a8db 3be21620 3be2839b 3be2f14a     ...; ..;...;J..;
2401e1e0:	3be35f2f 3be3cd48 3be43b97 3be4aa1c     /_.;H..;.;.;...;
2401e1f0:	3be518d6 3be587c6 3be5f6eb 3be66646     ...;...;...;Ff.;
2401e200:	3be6d5d7 3be7459f 3be7b59c 3be825cf     ...;.E.;...;.%.;
2401e210:	3be89639 3be906d9 3be977b0 3be9e8be     9..;...;.w.;...;
2401e220:	3bea5a02 3beacb7d 3beb3d2f 3bebaf18     .Z.;}..;/=.;...;
2401e230:	3bec2138 3bec9390 3bed061f 3bed78e5     8!.;...;...;.x.;
2401e240:	3bedebe3 3bee5f19 3beed286 3bef462b     ...;._.;...;+F.;
2401e250:	3befba09 3bf02e1e 3bf0a26c 3bf116f2     ...;...;l..;...;
2401e260:	3bf18bb0 3bf200a7 3bf275d7 3bf2eb3f     ...;...;.u.;?..;
2401e270:	3bf360e0 3bf3d6ba 3bf44cce 3bf4c31a     .`.;...;.L.;...;
2401e280:	3bf539a0 3bf5b05f 3bf62757 3bf69e8a     .9.;_..;W'.;...;
2401e290:	3bf715f6 3bf78d9b 3bf8057b 3bf87d95     ...;...;{..;.}.;
2401e2a0:	3bf8f5e9 3bf96e77 3bf9e740 3bfa6043     ...;wn.;@..;C`.;
2401e2b0:	3bfad980 3bfb52f9 3bfbccac 3bfc469a     ...;.R.;...;.F.;
2401e2c0:	3bfcc0c3 3bfd3b28 3bfdb5c7 3bfe30a2     ...;(;.;...;.0.;
2401e2d0:	3bfeabb9 3bff270b 3bffa299 3c000f31     ...;.'.;...;1..<
2401e2e0:	3c004d34 3c008b55 3c00c994 3c0107f1     4M.<U..<...<...<
2401e2f0:	3c01466c 3c018506 3c01c3bd 3c020294     lF.<...<...<...<
2401e300:	3c024188 3c02809b 3c02bfcd 3c02ff1d     .A.<...<...<...<
2401e310:	3c033e8c 3c037e1a 3c03bdc6 3c03fd92     .>.<.~.<...<...<
2401e320:	3c043d7c 3c047d85 3c04bdad 3c04fdf4     |=.<.}.<...<...<
2401e330:	3c053e5b 3c057ee0 3c05bf85 3c060049     [>.<.~.<...<I..<
2401e340:	3c06412c 3c06822f 3c06c352 3c070494     ,A.</..<R..<...<
2401e350:	3c0745f5 3c078776 3c07c917 3c080ad8     .E.<v..<...<...<
2401e360:	3c084cb8 3c088eb9 3c08d0d9 3c091319     .L.<...<...<...<
2401e370:	3c09557a 3c0997fb 3c09da9b 3c0a1d5c     zU.<...<...<\..<
2401e380:	3c0a603e 3c0aa340 3c0ae662 3c0b29a5     >`.<@..<b..<.).<
2401e390:	3c0b6d08 3c0bb08c 3c0bf431 3c0c37f6     .m.<...<1..<.7.<
2401e3a0:	3c0c7bdc 3c0cbfe4 3c0d040c 3c0d4855     .{.<...<...<UH.<
2401e3b0:	3c0d8cbf 3c0dd14a 3c0e15f7 3c0e5ac4     ...<J..<...<.Z.<
2401e3c0:	3c0e9fb4 3c0ee4c4 3c0f29f6 3c0f6f49     ...<...<.).<Io.<
2401e3d0:	3c0fb4be 3c0ffa55 3c10400d 3c1085e7     ...<U..<.@.<...<
2401e3e0:	3c10cbe3 3c111201 3c115841 3c119ea3     ...<...<AX.<...<
2401e3f0:	3c11e527 3c122bcd 3c127295 3c12b97f     '..<.+.<.r.<...<
2401e400:	3c13008c 3c1347bb 3c138f0d 3c13d682     ...<.G.<...<...<
2401e410:	3c141e18 3c1465d2 3c14adae 3c14f5ad     ...<.e.<...<...<
2401e420:	3c153dcf 3c158614 3c15ce7c 3c161707     .=.<...<|..<...<
2401e430:	3c165fb5 3c16a887 3c16f17b 3c173a93     ._.<...<{..<.:.<
2401e440:	3c1783ce 3c17cd2d 3c1816af 3c186055     ...<-..<...<U`.<
2401e450:	3c18aa1f 3c18f40c 3c193e1d 3c198852     ...<...<.>.<R..<
2401e460:	3c19d2ab 3c1a1d28 3c1a67c9 3c1ab28e     ...<(..<.g.<...<
2401e470:	3c1afd77 3c1b4885 3c1b93b7 3c1bdf0d     w..<.H.<...<...<
2401e480:	3c1c2a88 3c1c7628 3c1cc1ec 3c1d0dd5     .*.<(v.<...<...<
2401e490:	3c1d59e2 3c1da614 3c1df26c 3c1e3ee8     .Y.<...<l..<.>.<
2401e4a0:	3c1e8b89 3c1ed850 3c1f253b 3c1f724c     ...<P..<;%.<Lr.<
2401e4b0:	3c1fbf82 3c200cde 3c205a5f 3c20a805     ...<.. <_Z <.. <
2401e4c0:	3c20f5d1 3c2143c3 3c2191db 3c21e018     .. <.C!<..!<..!<
2401e4d0:	3c222e7b 3c227d05 3c22cbb4 3c231a89     {."<.}"<.."<..#<
2401e4e0:	3c236985 3c23b8a7 3c2407ef 3c24575d     .i#<..#<..$<]W$<
2401e4f0:	3c24a6f2 3c24f6ae 3c254690 3c259699     ..$<..$<.F%<..%<
2401e500:	3c25e6c9 3c26371f 3c26879c 3c26d841     ..%<.7&<..&<A.&<
2401e510:	3c27290c 3c2779ff 3c27cb18 3c281c59     .)'<.y'<..'<Y.(<
2401e520:	3c286dc2 3c28bf52 3c291109 3c2962e8     .m(<R.(<..)<.b)<
2401e530:	3c29b4ee 3c2a071d 3c2a5973 3c2aabf1     ..)<..*<sY*<..*<
2401e540:	3c2afe96 3c2b5164 3c2ba45a 3c2bf779     ..*<dQ+<Z.+<y.+<
2401e550:	3c2c4abf 3c2c9e2e 3c2cf1c5 3c2d4585     .J,<..,<..,<.E-<
2401e560:	3c2d996d 3c2ded7e 3c2e41b7 3c2e961a     m.-<~.-<.A.<...<
2401e570:	3c2eeaa5 3c2f3f59 3c2f9436 3c2fe93d     ...<Y?/<6./<=./<
2401e580:	3c303e6c 3c3093c5 3c30e947 3c313ef3     l>0<..0<G.0<.>1<
2401e590:	3c3194c8 3c31eac6 3c3240ef 3c329740     ..1<..1<.@2<@.2<
2401e5a0:	3c32edbc 3c334462 3c339b32 3c33f22b     ..2<bD3<2.3<+.3<
2401e5b0:	3c34494f 3c34a09d 3c34f815 3c354fb8     OI4<..4<..4<.O5<
2401e5c0:	3c35a785 3c35ff7d 3c36579f 3c36afec     ..5<}.5<.W6<..6<
2401e5d0:	3c370863 3c376106 3c37b9d3 3c3812cc     c.7<.a7<..7<..8<
2401e5e0:	3c386bef 3c38c53e 3c391eb8 3c39785d     .k8<>.8<..9<]x9<
2401e5f0:	3c39d22e 3c3a2c2a 3c3a8652 3c3ae0a6     ..9<*,:<R.:<..:<
2401e600:	3c3b3b25 3c3b95d0 3c3bf0a7 3c3c4baa     %;;<..;<..;<.K<<
2401e610:	3c3ca6d9 3c3d0234 3c3d5dbc 3c3db970     ..<<4.=<.]=<p.=<
2401e620:	3c3e1550 3c3e715c 3c3ecd96 3c3f29fc     P.><\q><..><.)?<
2401e630:	3c3f868e 3c3fe34e 3c40403b 3c409d54     ..?<N.?<;@@<T.@<
2401e640:	3c40fa9b 3c41580e 3c41b5af 3c42137e     ..@<.XA<..A<~.B<
2401e650:	3c42717a 3c42cfa3 3c432dfa 3c438c7f     zqB<..B<.-C<..C<
2401e660:	3c43eb31 3c444a11 3c44a91f 3c45085c     1.C<.JD<..D<\.E<
2401e670:	3c4567c6 3c45c75f 3c462726 3c46871b     .gE<_.E<&'F<..F<
2401e680:	3c46e73f 3c474791 3c47a812 3c4808c2     ?.F<.GG<..G<..H<
2401e690:	3c4869a1 3c48caae 3c492beb 3c498d56     .iH<..H<.+I<V.I<
2401e6a0:	3c49eef1 3c4a50bb 3c4ab2b4 3c4b14dd     ..I<.PJ<..J<..K<
2401e6b0:	3c4b7736 3c4bd9be 3c4c3c76 3c4c9f5d     6wK<..K<v<L<].L<
2401e6c0:	3c4d0275 3c4d65bc 3c4dc934 3c4e2cdc     u.M<.eM<4.M<.,N<
2401e6d0:	3c4e90b4 3c4ef4bc 3c4f58f5 3c4fbd5f     ..N<..N<.XO<_.O<
2401e6e0:	3c5021f9 3c5086c3 3c50ebbf 3c5150ec     .!P<..P<..P<.PQ<
2401e6f0:	3c51b649 3c521bd8 3c528197 3c52e789     I.Q<..R<..R<..R<
2401e700:	3c534dab 3c53b3ff 3c541a85 3c54813c     .MS<..S<..T<<.T<
2401e710:	3c54e825 3c554f3f 3c55b68c 3c561e0b     %.T<?OU<..U<..V<
2401e720:	3c5685bc 3c56ed9f 3c5755b4 3c57bdfc     ..V<..V<.UW<..W<
2401e730:	3c582677 3c588f23 3c58f803 3c596116     w&X<#.X<..X<.aY<
2401e740:	3c59ca5b 3c5a33d3 3c5a9d7f 3c5b075d     [.Y<.3Z<..Z<].[<
2401e750:	3c5b716f 3c5bdbb5 3c5c462d 3c5cb0da     oq[<..[<-F\<..\<
2401e760:	3c5d1bba 3c5d86ce 3c5df215 3c5e5d91     ..]<..]<..]<.]^<
2401e770:	3c5ec941 3c5f3524 3c5fa13c 3c600d89     A.^<$5_<<._<..`<
2401e780:	3c607a0a 3c60e6bf 3c6153a9 3c61c0c8     .z`<..`<.Sa<..a<
2401e790:	3c622e1c 3c629ba5 3c630963 3c637756     ..b<..b<c.c<Vwc<
2401e7a0:	3c63e57e 3c6453db 3c64c26e 3c653137     ~.c<.Sd<n.d<71e<
2401e7b0:	3c65a035 3c660f69 3c667ed3 3c66ee73     5.e<i.f<.~f<s.f<
2401e7c0:	3c675e49 3c67ce55 3c683e97 3c68af10     I^g<U.g<.>h<..h<
2401e7d0:	3c691fbf 3c6990a5 3c6a01c2 3c6a7315     ..i<..i<..j<.sj<
2401e7e0:	3c6ae49f 3c6b5660 3c6bc859 3c6c3a88     ..j<`Vk<Y.k<.:l<
2401e7f0:	3c6cacef 3c6d1f8d 3c6d9263 3c6e0570     ..l<..m<c.m<p.n<
2401e800:	3c6e78b5 3c6eec32 3c6f5fe7 3c6fd3d4     .xn<2.n<._o<..o<
2401e810:	3c7047f9 3c70bc57 3c7130ed 3c71a5bb     .Gp<W.p<.0q<..q<
2401e820:	3c721ac2 3c729001 3c730579 3c737b2b     ..r<..r<y.s<+{s<
2401e830:	3c73f115 3c746738 3c74dd95 3c75542b     ..s<8gt<..t<+Tu<
2401e840:	3c75cafa 3c764203 3c76b946 3c7730c2     ..u<.Bv<F.v<.0w<
2401e850:	3c77a878 3c782068 3c789893 3c7910f7     x.w<h x<..x<..y<
2401e860:	3c798996 3c7a026f 3c7a7b83 3c7af4d2     ..y<o.z<.{z<..z<
2401e870:	3c7b6e5b 3c7be81f 3c7c621e 3c7cdc59     [n{<..{<.b|<Y.|<
2401e880:	3c7d56ce 3c7dd17f 3c7e4c6b 3c7ec793     .V}<..}<kL~<..~<
2401e890:	3c7f42f6 3c7fbe95 3c801d38 3c805b44     .B.<...<8..<D[.<
2401e8a0:	3c80996d 3c80d7b5 3c81161b 3c81549f     m..<...<...<.T.<
2401e8b0:	3c819342 3c81d202 3c8210e1 3c824fdf     B..<...<...<.O.<
2401e8c0:	3c828efb 3c82ce36 3c830d8f 3c834d07     ...<6..<...<.M.<
2401e8d0:	3c838c9e 3c83cc54 3c840c28 3c844c1b     ...<T..<(..<.L.<
2401e8e0:	3c848c2e 3c84cc5f 3c850cb0 3c854d1f     ...<_..<...<.M.<
2401e8f0:	3c858dae 3c85ce5c 3c860f2a 3c865017     ...<\..<*..<.P.<
2401e900:	3c869123 3c86d24f 3c87139a 3c875505     #..<O..<...<.U.<
2401e910:	3c879690 3c87d83b 3c881a05 3c885bef     ...<;..<...<.[.<
2401e920:	3c889df9 3c88e023 3c89226d 3c8964d8     ...<#..<m".<.d.<
2401e930:	3c89a762 3c89ea0d 3c8a2cd8 3c8a6fc3     b..<...<.,.<.o.<
2401e940:	3c8ab2cf 3c8af5fb 3c8b3948 3c8b7cb6     ...<...<H9.<.|.<
2401e950:	3c8bc044 3c8c03f3 3c8c47c2 3c8c8bb3     D..<...<.G.<...<
2401e960:	3c8ccfc4 3c8d13f6 3c8d584a 3c8d9cbe     ...<...<JX.<...<
2401e970:	3c8de154 3c8e260b 3c8e6ae3 3c8eafdd     T..<.&.<.j.<...<
2401e980:	3c8ef4f8 3c8f3a34 3c8f7f92 3c8fc512     ...<4:.<...<...<
2401e990:	3c900ab3 3c905076 3c90965b 3c90dc61     ...<vP.<[..<a..<
2401e9a0:	3c91228a 3c9168d5 3c91af41 3c91f5d0     .".<.h.<A..<...<
2401e9b0:	3c923c81 3c928354 3c92ca4a 3c931162     .<.<T..<J..<b..<
2401e9c0:	3c93589c 3c939ff9 3c93e779 3c942f1b     .X.<...<y..<./.<
2401e9d0:	3c9476df 3c94bec7 3c9506d2 3c954eff     .v.<...<...<.N.<
2401e9e0:	3c95974f 3c95dfc2 3c962859 3c967113     O..<...<Y(.<.q.<
2401e9f0:	3c96b9ef 3c9702f0 3c974c13 3c97955a     ...<...<.L.<Z..<
2401ea00:	3c97dec5 3c982853 3c987204 3c98bbda     ...<S(.<.r.<...<
2401ea10:	3c9905d3 3c994ff0 3c999a31 3c99e496     ...<.O.<1..<...<
2401ea20:	3c9a2f1f 3c9a79cc 3c9ac49d 3c9b0f93     ./.<.y.<...<...<
2401ea30:	3c9b5aad 3c9ba5eb 3c9bf14e 3c9c3cd5     .Z.<...<N..<.<.<
2401ea40:	3c9c8881 3c9cd451 3c9d2046 3c9d6c60     ...<Q..<F .<`l.<
2401ea50:	3c9db89f 3c9e0503 3c9e518c 3c9e9e3a     ...<...<.Q.<:..<
2401ea60:	3c9eeb0d 3c9f3805 3c9f8523 3c9fd266     ...<.8.<#..<f..<
2401ea70:	3ca01fcf 3ca06d5d 3ca0bb10 3ca108e9     ...<]m.<...<...<
2401ea80:	3ca156e8 3ca1a50d 3ca1f358 3ca241c8     .V.<...<X..<.A.<
2401ea90:	3ca2905f 3ca2df1b 3ca32dfe 3ca37d07     _..<...<.-.<.}.<
2401eaa0:	3ca3cc36 3ca41b8c 3ca46b08 3ca4baab     6..<...<.k.<...<
2401eab0:	3ca50a74 3ca55a64 3ca5aa7b 3ca5fab8     t..<dZ.<{..<...<
2401eac0:	3ca64b1c 3ca69ba8 3ca6ec5a 3ca73d34     .K.<...<Z..<4=.<
2401ead0:	3ca78e34 3ca7df5c 3ca830ab 3ca88222     4..<\..<.0.<"..<
2401eae0:	3ca8d3c0 3ca92586 3ca97773 3ca9c988     ...<.%.<sw.<...<
2401eaf0:	3caa1bc5 3caa6e29 3caac0b6 3cab136a     ...<)n.<...<j..<
2401eb00:	3cab6647 3cabb94c 3cac0c79 3cac5fce     Gf.<L..<y..<._.<
2401eb10:	3cacb34c 3cad06f2 3cad5ac1 3cadaeb8     L..<...<.Z.<...<
2401eb20:	3cae02d8 3cae5721 3caeab93 3caf002d     ...<!W.<...<-..<
2401eb30:	3caf54f1 3cafa9de 3caffef3 3cb05433     .T.<...<...<3T.<
2401eb40:	3cb0a99b 3cb0ff2d 3cb154e8 3cb1aacd     ...<-..<.T.<...<
2401eb50:	3cb200db 3cb25713 3cb2ad75 3cb30401     ...<.W.<u..<...<
2401eb60:	3cb35ab7 3cb3b197 3cb408a1 3cb45fd5     .Z.<...<...<._.<
2401eb70:	3cb4b733 3cb50ebc 3cb5666f 3cb5be4c     3..<...<of.<L..<
2401eb80:	3cb61655 3cb66e87 3cb6c6e5 3cb71f6e     U..<.n.<...<n..<
2401eb90:	3cb77821 3cb7d0ff 3cb82a09 3cb8833d     !x.<...<.*.<=..<
2401eba0:	3cb8dc9d 3cb93628 3cb98fdf 3cb9e9c1     ...<(6.<...<...<
2401ebb0:	3cba43ce 3cba9e08 3cbaf86d 3cbb52fe     .C.<...<m..<.R.<
2401ebc0:	3cbbadba 3cbc08a3 3cbc63b8 3cbcbef9     ...<...<.c.<...<
2401ebd0:	3cbd1a66 3cbd75ff 3cbdd1c5 3cbe2db7     f..<.u.<...<.-.<
2401ebe0:	3cbe89d6 3cbee622 3cbf429a 3cbf9f3f     ...<"..<.B.<?..<
2401ebf0:	3cbffc11 3cc05910 3cc0b63c 3cc11396     ...<.Y.<<..<...<
2401ec00:	3cc1711c 3cc1ced0 3cc22cb1 3cc28ac0     .q.<...<.,.<...<
2401ec10:	3cc2e8fd 3cc34767 3cc3a5ff 3cc404c4     ...<gG.<...<...<
2401ec20:	3cc463b8 3cc4c2da 3cc52229 3cc581a7     .c.<...<)".<...<
2401ec30:	3cc5e154 3cc6412e 3cc6a137 3cc7016f     T..<.A.<7..<o..<
2401ec40:	3cc761d6 3cc7c26b 3cc8232f 3cc88421     .a.<k..</#.<!..<
2401ec50:	3cc8e543 3cc94694 3cc9a814 3cca09c3     C..<.F.<...<...<
2401ec60:	3cca6ba2 3ccacdb0 3ccb2fee 3ccb925b     .k.<...<./.<[..<
2401ec70:	3ccbf4f8 3ccc57c5 3cccbac2 3ccd1def     ...<.W.<...<...<
2401ec80:	3ccd814c 3ccde4d9 3cce4896 3cceac83     L..<...<.H.<...<
2401ec90:	3ccf10a1 3ccf74f0 3ccfd96f 3cd03e1f     ...<.t.<o..<.>.<
2401eca0:	3cd0a300 3cd10812 3cd16d54 3cd1d2c8     ...<...<Tm.<...<
2401ecb0:	3cd2386d 3cd29e43 3cd3044b 3cd36a84     m8.<C..<K..<.j.<
2401ecc0:	3cd3d0ef 3cd4378b 3cd49e59 3cd50559     ...<.7.<Y..<Y..<
2401ecd0:	3cd56c8b 3cd5d3ef 3cd63b85 3cd6a34d     .l.<...<.;.<M..<
2401ece0:	3cd70b48 3cd77375 3cd7dbd4 3cd84467     H..<us.<...<gD.<
2401ecf0:	3cd8ad2b 3cd91623 3cd97f4e 3cd9e8ab     +..<#..<N..<...<
2401ed00:	3cda523c 3cdabc00 3cdb25f7 3cdb9021     <R.<...<.%.<!..<
2401ed10:	3cdbfa7f 3cdc6511 3cdccfd6 3cdd3acf     ...<.e.<...<.:.<
2401ed20:	3cdda5fc 3cde115d 3cde7cf2 3cdee8bb     ...<]..<.|.<...<
2401ed30:	3cdf54b8 3cdfc0ea 3ce02d50 3ce099eb     .T.<...<P-.<...<
2401ed40:	3ce106ba 3ce173be 3ce1e0f7 3ce24e65     ...<.s.<...<eN.<
2401ed50:	3ce2bc08 3ce329e1 3ce397ee 3ce40631     ...<.).<...<1..<
2401ed60:	3ce474a9 3ce4e357 3ce5523b 3ce5c154     .t.<W..<;R.<T..<
2401ed70:	3ce630a4 3ce6a029 3ce70fe4 3ce77fd6     .0.<)..<...<...<
2401ed80:	3ce7effe 3ce8605c 3ce8d0f1 3ce941bc     ...<\`.<...<.A.<
2401ed90:	3ce9b2be 3cea23f7 3cea9567 3ceb070d     ...<.#.<g..<...<
2401eda0:	3ceb78eb 3cebeb00 3cec5d4d 3ceccfd1     .x.<...<M].<...<
2401edb0:	3ced428c 3cedb57f 3cee28aa 3cee9c0d     .B.<...<.(.<...<
2401edc0:	3cef0fa8 3cef837a 3ceff785 3cf06bc8     ...<z..<...<.k.<
2401edd0:	3cf0e044 3cf154f8 3cf1c9e5 3cf23f0a     D..<.T.<...<.?.<
2401ede0:	3cf2b469 3cf32a00 3cf39fd0 3cf415d9     i..<.*.<...<...<
2401edf0:	3cf48c1c 3cf50298 3cf5794d 3cf5f03c     ...<...<My.<<..<
2401ee00:	3cf66765 3cf6dec8 3cf75664 3cf7ce3b     eg.<...<dV.<;..<
2401ee10:	3cf8464b 3cf8be96 3cf9371b 3cf9afdb     KF.<...<.7.<...<
2401ee20:	3cfa28d5 3cfaa20a 3cfb1b7a 3cfb9525     .(.<...<z..<%..<
2401ee30:	3cfc0f0a 3cfc892b 3cfd0387 3cfd7e1f     ...<+..<...<.~.<
2401ee40:	3cfdf8f2 3cfe7400 3cfeef4a 3cff6ad0     ...<.t.<J..<.j.<
2401ee50:	3cffe692 3d003148 3d006f65 3d00ada0     ...<H1.=eo.=...=
2401ee60:	3d00ebfa 3d012a71 3d016907 3d01a7bc     ...=q*.=.i.=...=
2401ee70:	3d01e68e 3d022580 3d02648f 3d02a3be     ...=.%.=.d.=...=
2401ee80:	3d02e30b 3d032276 3d036201 3d03a1aa     ...=v".=.b.=...=
2401ee90:	3d03e173 3d04215a 3d046160 3d04a185     s..=Z!.=`a.=...=
2401eea0:	3d04e1ca 3d05222d 3d0562b0 3d05a352     ...=-".=.b.=R..=
2401eeb0:	3d05e413 3d0624f4 3d0665f5 3d06a715     ...=.$.=.e.=...=
2401eec0:	3d06e854 3d0729b3 3d076b32 3d07acd1     T..=.).=2k.=...=
2401eed0:	3d07ee8f 3d08306e 3d08726c 3d08b48b     ...=n0.=lr.=...=
2401eee0:	3d08f6c9 3d093928 3d097ba7 3d09be46     ...=(9.=.{.=F..=
2401eef0:	3d0a0105 3d0a43e5 3d0a86e6 3d0aca06     ...=.C.=...=...=
2401ef00:	3d0b0d48 3d0b50aa 3d0b942d 3d0bd7d0     H..=.P.=-..=...=
2401ef10:	3d0c1b95 3d0c5f7a 3d0ca380 3d0ce7a7     ...=z_.=...=...=
2401ef20:	3d0d2bf0 3d0d7059 3d0db4e4 3d0df990     .+.=Yp.=...=...=
2401ef30:	3d0e3e5d 3d0e834b 3d0ec85c 3d0f0d8d     ]>.=K..=\..=...=
2401ef40:	3d0f52e0 3d0f9855 3d0fddec 3d1023a4     .R.=U..=...=.#.=
2401ef50:	3d10697e 3d10af7a 3d10f599 3d113bd9     ~i.=z..=...=.;.=
2401ef60:	3d11823b 3d11c8bf 3d120f66 3d12562f     ;..=...=f..=/V.=
2401ef70:	3d129d1a 3d12e428 3d132b58 3d1372ab     ...=(..=X+.=.r.=
2401ef80:	3d13ba20 3d1401b8 3d144973 3d149151      ..=...=sI.=Q..=
2401ef90:	3d14d951 3d152175 3d1569bb 3d15b225     Q..=u!.=.i.=%..=
2401efa0:	3d15fab2 3d164362 3d168c35 3d16d52c     ...=bC.=5..=,..=
2401efb0:	3d171e46 3d176783 3d17b0e4 3d17fa69     F..=.g.=...=i..=
2401efc0:	3d184412 3d188dde 3d18d7ce 3d1921e2     .D.=...=...=.!.=
2401efd0:	3d196c1a 3d19b676 3d1a00f6 3d1a4b9a     .l.=v..=...=.K.=
2401efe0:	3d1a9662 3d1ae14f 3d1b2c60 3d1b7796     b..=O..=`,.=.w.=
2401eff0:	3d1bc2f0 3d1c0e6f 3d1c5a12 3d1ca5db     ...=o..=.Z.=...=
2401f000:	3d1cf1c8 3d1d3dd9 3d1d8a10 3d1dd66c     ...=.=.=...=l..=
2401f010:	3d1e22ed 3d1e6f93 3d1ebc5e 3d1f094f     .".=.o.=^..=O..=
2401f020:	3d1f5665 3d1fa3a0 3d1ff101 3d203e87     eV.=...=...=.> =
2401f030:	3d208c33 3d20da05 3d2127fd 3d21761a     3. =.. =.'!=.v!=
2401f040:	3d21c45e 3d2212c7 3d226157 3d22b00c     ^.!=.."=Wa"=.."=
2401f050:	3d22fee8 3d234dea 3d239d13 3d23ec62     .."=.M#=..#=b.#=
2401f060:	3d243bd8 3d248b74 3d24db37 3d252b20     .;$=t.$=7.$= +%=
2401f070:	3d257b31 3d25cb68 3d261bc6 3d266c4c     1{%=h.%=..&=Ll&=
2401f080:	3d26bcf8 3d270dcc 3d275ec7 3d27afe9     ..&=..'=.^'=..'=
2401f090:	3d280133 3d2852a4 3d28a43d 3d28f5fd     3.(=.R(==.(=..(=
2401f0a0:	3d2947e5 3d2999f5 3d29ec2d 3d2a3e8d     .G)=..)=-.)=.>*=
2401f0b0:	3d2a9114 3d2ae3c4 3d2b369c 3d2b899c     ..*=..*=.6+=..+=
2401f0c0:	3d2bdcc5 3d2c3016 3d2c8390 3d2cd732     ..+=.0,=..,=2.,=
2401f0d0:	3d2d2afc 3d2d7ef0 3d2dd30c 3d2e2751     .*-=.~-=..-=Q'.=
2401f0e0:	3d2e7bbf 3d2ed056 3d2f2517 3d2f7a00     .{.=V..=.%/=.z/=
2401f0f0:	3d2fcf13 3d30244f 3d3079b4 3d30cf43     ../=O$0=.y0=C.0=
2401f100:	3d3124fb 3d317ade 3d31d0e9 3d32271f     .$1=.z1=..1=.'2=
2401f110:	3d327d7f 3d32d408 3d332abc 3d33819a     .}2=..2=.*3=..3=
2401f120:	3d33d8a2 3d342fd4 3d348731 3d34deb8     ..3=./4=1.4=..4=
2401f130:	3d35366a 3d358e46 3d35e64d 3d363e7f     j65=F.5=M.5=.>6=
2401f140:	3d3696dc 3d36ef64 3d374817 3d37a0f4     ..6=d.6=.H7=..7=
2401f150:	3d37f9fe 3d385332 3d38ac92 3d39061d     ..7=2S8=..8=..9=
2401f160:	3d395fd4 3d39b9b6 3d3a13c4 3d3a6dfe     ._9=..9=..:=.m:=
2401f170:	3d3ac863 3d3b22f5 3d3b7db3 3d3bd89d     c.:=.";=.};=..;=
2401f180:	3d3c33b3 3d3c8ef5 3d3cea64 3d3d45ff     .3<=..<=d.<=.E==
2401f190:	3d3da1c6 3d3dfdbb 3d3e59dc 3d3eb62a     ..==..==.Y>=*.>=
2401f1a0:	3d3f12a4 3d3f6f4c 3d3fcc21 3d402923     ..?=Lo?=!.?=#)@=
2401f1b0:	3d408652 3d40e3ae 3d414138 3d419ef0     R.@=..@=8AA=..A=
2401f1c0:	3d41fcd5 3d425ae7 3d42b928 3d431796     ..A=.ZB=(.B=..C=
2401f1d0:	3d437632 3d43d4fc 3d4433f5 3d44931b     2vC=..C=.3D=..D=
2401f1e0:	3d44f270 3d4551f3 3d45b1a5 3d461185     p.D=.QE=..E=..F=
2401f1f0:	3d467194 3d46d1d1 3d47323d 3d4792d9     .qF=..F==2G=..G=
2401f200:	3d47f3a3 3d48549c 3d48b5c5 3d49171d     ..G=.TH=..H=..I=
2401f210:	3d4978a4 3d49da5b 3d4a3c41 3d4a9e56     .xI=[.I=A<J=V.J=
2401f220:	3d4b009c 3d4b6311 3d4bc5b7 3d4c288c     ..K=.cK=..K=.(L=
2401f230:	3d4c8b91 3d4ceec7 3d4d522d 3d4db5c3     ..L=..L=-RM=..M=
2401f240:	3d4e1989 3d4e7d81 3d4ee1a9 3d4f4601     ..N=.}N=..N=.FO=
2401f250:	3d4faa8b 3d500f45 3d507430 3d50d94d     ..O=E.P=0tP=M.P=
2401f260:	3d513e9b 3d51a41a 3d5209ca 3d526fac     .>Q=..Q=..R=.oR=
2401f270:	3d52d5c0 3d533c05 3d53a27c 3d540925     ..R=.<S=|.S=%.T=
2401f280:	3d547000 3d54d70d 3d553e4c 3d55a5bd     .pT=..T=L>U=..U=
2401f290:	3d560d61 3d567537 3d56dd40 3d57457b     a.V=7uV=@.V={EW=
2401f2a0:	3d57adea 3d58168b 3d587f5f 3d58e866     ..W=..X=_.X=f.X=
2401f2b0:	3d5951a0 3d59bb0d 3d5a24ae 3d5a8e82     .QY=..Y=.$Z=..Z=
2401f2c0:	3d5af88a 3d5b62c5 3d5bcd34 3d5c37d7     ..Z=.b[=4.[=.7\=
2401f2d0:	3d5ca2ae 3d5d0db9 3d5d78f8 3d5de46b     ..\=..]=.x]=k.]=
2401f2e0:	3d5e5012 3d5ebbee 3d5f27ff 3d5f9444     .P^=..^=.'_=D._=
2401f2f0:	3d6000be 3d606d6d 3d60da50 3d614769     ..`=mm`=P.`=iGa=
2401f300:	3d61b4b7 3d62223a 3d628ff3 3d62fde1     ..a=:"b=..b=..b=
2401f310:	3d636c04 3d63da5d 3d6448ec 3d64b7b1     .lc=].c=.Hd=..d=
2401f320:	3d6526ac 3d6595dc 3d660543 3d6674e1     .&e=..e=C.f=.tf=
2401f330:	3d66e4b4 3d6754bf 3d67c4ff 3d683577     ..f=.Tg=..g=w5h=
2401f340:	3d68a625 3d69170a 3d698827 3d69f97a     %.h=..i='.i=z.i=
2401f350:	3d6a6b04 3d6adcc6 3d6b4ec0 3d6bc0f1     .kj=..j=.Nk=..k=
2401f360:	3d6c3359 3d6ca5f9 3d6d18d2 3d6d8be2     Y3l=..l=..m=..m=
2401f370:	3d6dff2a 3d6e72ab 3d6ee663 3d6f5a55     *.m=.rn=c.n=UZo=
2401f380:	3d6fce7e 3d7042e1 3d70b77c 3d712c50     ~.o=.Bp=|.p=P,q=
2401f390:	3d71a15d 3d7216a3 3d728c22 3d7301da     ].q=..r=".r=..s=
2401f3a0:	3d7377cc 3d73edf7 3d74645c 3d74dafb     .ws=..s=\dt=..t=
2401f3b0:	3d7551d4 3d75c8e6 3d764033 3d76b7ba     .Qu=..u=3@v=..v=
2401f3c0:	3d772f7b 3d77a776 3d781fac 3d78981d     {/w=v.w=..x=..x=
2401f3d0:	3d7910c8 3d7989af 3d7a02d0 3d7a7c2c     ..y=..y=..z=,|z=
2401f3e0:	3d7af5c4 3d7b6f97 3d7be9a5 3d7c63ef     ..z=.o{=..{=.c|=
2401f3f0:	3d7cde74 3d7d5936 3d7dd433 3d7e4f6c     t.|=6Y}=3.}=lO~=
2401f400:	3d7ecae1 3d7f4693 3d7fc281 3d801f56     ..~=.F.=...=V..=
2401f410:	3d805d89 3d809bdb 3d80da4b 3d8118da     .].=...=K..=...=
2401f420:	3d815787 3d819653 3d81d53e 3d821447     .W.=S..=>..=G..=
2401f430:	3d82536f 3d8292b6 3d82d21b 3d8311a0     oS.=...=...=...=
2401f440:	3d835144 3d839106 3d83d0e8 3d8410e9     DQ.=...=...=...=
2401f450:	3d84510a 3d849149 3d84d1a8 3d851227     .Q.=I..=...='..=
2401f460:	3d8552c5 3d859382 3d85d45f 3d86155c     .R.=...=_..=\..=
2401f470:	3d865678 3d8697b5 3d86d911 3d871a8d     xV.=...=...=...=
2401f480:	3d875c29 3d879de5 3d87dfc1 3d8821be     )\.=...=...=.!.=
2401f490:	3d8863da 3d88a617 3d88e874 3d892af2     .c.=...=t..=.*.=
2401f4a0:	3d896d90 3d89b04f 3d89f32e 3d8a362e     .m.=O..=...=.6.=
2401f4b0:	3d8a794f 3d8abc91 3d8afff3 3d8b4376     Oy.=...=...=vC.=
2401f4c0:	3d8b871b 3d8bcae0 3d8c0ec7 3d8c52ce     ...=...=...=.R.=
2401f4d0:	3d8c96f7 3d8cdb42 3d8d1fad 3d8d643a     ...=B..=...=:d.=
2401f4e0:	3d8da8e9 3d8dedb9 3d8e32ab 3d8e77bf     ...=...=.2.=.w.=
2401f4f0:	3d8ebcf4 3d8f024b 3d8f47c4 3d8f8d5f     ...=K..=.G.=_..=
2401f500:	3d8fd31c 3d9018fb 3d905efc 3d90a520     ...=...=.^.= ..=
2401f510:	3d90eb66 3d9131ce 3d917859 3d91bf06     f..=.1.=Yx.=...=
2401f520:	3d9205d6 3d924cc8 3d9293dd 3d92db15     ...=.L.=...=...=
2401f530:	3d93226f 3d9369ed 3d93b18e 3d93f951     o".=.i.=...=Q..=
2401f540:	3d944138 3d948942 3d94d16f 3d9519bf     8A.=B..=o..=...=
2401f550:	3d956233 3d95aacb 3d95f385 3d963c64     3b.=...=...=d<.=
2401f560:	3d968566 3d96ce8c 3d9717d5 3d976143     f..=...=...=Ca.=
2401f570:	3d97aad4 3d97f48a 3d983e63 3d988861     ...=...=c>.=a..=
2401f580:	3d98d283 3d991cc9 3d996734 3d99b1c3     ...=...=4g.=...=
2401f590:	3d99fc76 3d9a474e 3d9a924b 3d9add6c     v..=NG.=K..=l..=
2401f5a0:	3d9b28b3 3d9b741e 3d9bbfae 3d9c0b63     .(.=.t.=...=c..=
2401f5b0:	3d9c573d 3d9ca33c 3d9cef61 3d9d3bab     =W.=<..=a..=.;.=
2401f5c0:	3d9d881a 3d9dd4af 3d9e2169 3d9e6e49     ...=...=i!.=In.=
2401f5d0:	3d9ebb4e 3d9f0879 3d9f55ca 3d9fa341     N..=y..=.U.=A..=
2401f5e0:	3d9ff0de 3da03ea1 3da08c8a 3da0da99     ...=.>.=...=...=
2401f5f0:	3da128cf 3da1772b 3da1c5ad 3da21456     .(.=+w.=...=V..=
2401f600:	3da26325 3da2b21b 3da30137 3da3507b     %c.=...=7..={P.=
2401f610:	3da39fe5 3da3ef76 3da43f2f 3da48f0e     ...=v..=/?.=...=
2401f620:	3da4df15 3da52f42 3da57f98 3da5d014     ...=B/.=...=...=
2401f630:	3da620b8 3da67184 3da6c277 3da71392     . .=.q.=w..=...=
2401f640:	3da764d5 3da7b63f 3da807d2 3da8598c     .d.=?..=...=.Y.=
2401f650:	3da8ab6f 3da8fd7a 3da94fad 3da9a208     o..=z..=.O.=...=
2401f660:	3da9f48c 3daa4739 3daa9a0e 3daaed0b     ...=9G.=...=...=
2401f670:	3dab4032 3dab9381 3dabe6f9 3dac3a9a     2@.=...=...=.:.=
2401f680:	3dac8e65 3dace258 3dad3674 3dad8aba     e..=X..=t6.=...=
2401f690:	3daddf2a 3dae33c2 3dae8885 3daedd71     *..=.3.=...=q..=
2401f6a0:	3daf3286 3daf87c6 3dafdd2f 3db032c2     .2.=...=/..=.2.=
2401f6b0:	3db08880 3db0de67 3db13479 3db18ab5     ...=g..=y4.=...=
2401f6c0:	3db1e11b 3db237ac 3db28e68 3db2e54e     ...=.7.=h..=N..=
2401f6d0:	3db33c5e 3db3939a 3db3eb00 3db44292     ^<.=...=...=.B.=
2401f6e0:	3db49a4e 3db4f236 3db54a49 3db5a287     N..=6..=IJ.=...=
2401f6f0:	3db5faf0 3db65386 3db6ac46 3db70532     ...=.S.=F..=2..=
2401f700:	3db75e4a 3db7b78e 3db810fe 3db86a9a     J^.=...=...=.j.=
2401f710:	3db8c462 3db91e56 3db97876 3db9d2c3     b..=V..=vx.=...=
2401f720:	3dba2d3c 3dba87e2 3dbae2b4 3dbb3db3     <-.=...=...=.=.=
2401f730:	3dbb98df 3dbbf437 3dbc4fbd 3dbcab70     ...=7..=.O.=p..=
2401f740:	3dbd074f 3dbd635c 3dbdbf97 3dbe1bff     O..=\c.=...=...=
2401f750:	3dbe7894 3dbed557 3dbf3248 3dbf8f66     .x.=W..=H2.=f..=
2401f760:	3dbfecb3 3dc04a2d 3dc0a7d5 3dc105ac     ...=-J.=...=...=
2401f770:	3dc163b0 3dc1c1e4 3dc22045 3dc27ed5     .c.=...=E .=.~.=
2401f780:	3dc2dd94 3dc33c81 3dc39b9d 3dc3fae8     ...=.<.=...=...=
2401f790:	3dc45a62 3dc4ba0b 3dc519e4 3dc579eb     bZ.=...=...=.y.=
2401f7a0:	3dc5da22 3dc63a89 3dc69b1e 3dc6fbe4     "..=.:.=...=...=
2401f7b0:	3dc75cd9 3dc7bdfe 3dc81f54 3dc880d9     .\.=...=T..=...=
2401f7c0:	3dc8e28e 3dc94473 3dc9a689 3dca08cf     ...=sD.=...=...=
2401f7d0:	3dca6b46 3dcacded 3dcb30c5 3dcb93ce     Fk.=...=.0.=...=
2401f7e0:	3dcbf708 3dcc5a73 3dccbe0e 3dcd21db     ...=sZ.=...=.!.=
2401f7f0:	3dcd85da 3dcdea09 3dce4e6a 3dceb2fd     ...=...=jN.=...=
2401f800:	3dcf17c2 3dcf7cb8 3dcfe1e0 3dd0473a     ...=.|.=...=:G.=
2401f810:	3dd0acc6 3dd11285 3dd17875 3dd1de98     ...=...=ux.=...=
2401f820:	3dd244ee 3dd2ab76 3dd31231 3dd3791f     .D.=v..=1..=.y.=
2401f830:	3dd3e03f 3dd44793 3dd4af19 3dd516d3     ?..=.G.=...=...=
2401f840:	3dd57ec0 3dd5e6e1 3dd64f35 3dd6b7bd     .~.=...=5O.=...=
2401f850:	3dd72078 3dd78968 3dd7f28b 3dd85be2     x .=h..=...=.[.=
2401f860:	3dd8c56d 3dd92f2d 3dd99921 3dda0349     m..=-/.=!..=I..=
2401f870:	3dda6da7 3ddad838 3ddb42ff 3ddbadfa     .m.=8..=.B.=...=
2401f880:	3ddc192a 3ddc8490 3ddcf02a 3ddd5bfa     *..=...=*..=.[.=
2401f890:	3dddc800 3dde343b 3ddea0ab 3ddf0d52     ...=;4.=...=R..=
2401f8a0:	3ddf7a2e 3ddfe740 3de05488 3de0c206     .z.=@..=.T.=...=
2401f8b0:	3de12fbb 3de19da6 3de20bc8 3de27a20     ./.=...=...= z.=
2401f8c0:	3de2e8af 3de35775 3de3c671 3de435a5     ...=uW.=q..=.5.=
2401f8d0:	3de4a510 3de514b2 3de5848c 3de5f49d     ...=...=...=...=
2401f8e0:	3de664e6 3de6d566 3de7461f 3de7b70f     .d.=f..=.F.=...=
2401f8f0:	3de82838 3de89998 3de90b31 3de97d03     8(.=...=1..=.}.=
2401f900:	3de9ef0d 3dea614f 3dead3cb 3deb467f     ...=Oa.=...=.F.=
2401f910:	3debb96c 3dec2c92 3dec9ff2 3ded138b     l..=.,.=...=...=
2401f920:	3ded875d 3dedfb69 3dee6faf 3deee42f     ]..=i..=.o.=/..=
2401f930:	3def58e8 3defcddc 3df04309 3df0b871     .X.=...=.C.=q..=
2401f940:	3df12e14 3df1a3f1 3df21a08 3df2905b     ...=...=...=[..=
2401f950:	3df306e8 3df37db0 3df3f4b4 3df46bf3     ...=.}.=...=.k.=
2401f960:	3df4e36d 3df55b22 3df5d313 3df64b40     m..="[.=...=@K.=
2401f970:	3df6c3a9 3df73c4e 3df7b52f 3df82e4c     ...=N<.=/..=L..=
2401f980:	3df8a7a5 3df9213b 3df99b0e 3dfa151d     ...=;!.=...=...=
2401f990:	3dfa8f6a 3dfb09f3 3dfb84b9 3dfbffbd     j..=...=...=...=
2401f9a0:	3dfc7afe 3dfcf67c 3dfd7238 3dfdee32     .z.=|..=8r.=2..=
2401f9b0:	3dfe6a69 3dfee6df 3dff6393 3dffe085     ij.=...=.c.=...=
2401f9c0:	3e002eda 3e006d92 3e00ac69 3e00eb5f     ...>.m.>i..>_..>
2401f9d0:	3e012a74 3e0169a9 3e01a8fe 3e01e872     t*.>.i.>...>r..>
2401f9e0:	3e022806 3e0267ba 3e02a78e 3e02e782     .(.>.g.>...>...>
2401f9f0:	3e032795 3e0367c9 3e03a81c 3e03e890     .'.>.g.>...>...>
2401fa00:	3e042924 3e0469d9 3e04aaad 3e04eba3     $).>.i.>...>...>
2401fa10:	3e052cb8 3e056def 3e05af46 3e05f0bd     .,.>.m.>F..>...>
2401fa20:	3e063256 3e06740f 3e06b5e9 3e06f7e4     V2.>.t.>...>...>
2401fa30:	3e073a01 3e077c3e 3e07be9d 3e08011c     .:.>>|.>...>...>
2401fa40:	3e0843be 3e088680 3e08c964 3e090c6a     .C.>...>d..>j..>
2401fa50:	3e094f91 3e0992da 3e09d644 3e0a19d1     .O.>...>D..>...>
2401fa60:	3e0a5d7f 3e0aa14f 3e0ae542 3e0b2956     .].>O..>B..>V).>
2401fa70:	3e0b6d8d 3e0bb1e6 3e0bf661 3e0c3afe     .m.>...>a..>.:.>
2401fa80:	3e0c7fbe 3e0cc4a1 3e0d09a6 3e0d4ece     ...>...>...>.N.>
2401fa90:	3e0d9418 3e0dd986 3e0e1f16 3e0e64c9     ...>...>...>.d.>
2401faa0:	3e0eaaa0 3e0ef099 3e0f36b6 3e0f7cf6     ...>...>.6.>.|.>
2401fab0:	3e0fc359 3e1009e0 3e10508a 3e109758     Y..>...>.P.>X..>
2401fac0:	3e10de49 3e11255e 3e116c97 3e11b3f4     I..>^%.>.l.>...>
2401fad0:	3e11fb75 3e12431a 3e128ae3 3e12d2d0     u..>.C.>...>...>
2401fae0:	3e131ae1 3e136316 3e13ab70 3e13f3ef     ...>.c.>p..>...>
2401faf0:	3e143c92 3e14855a 3e14ce46 3e151757     .<.>Z..>F..>W..>
2401fb00:	3e15608d 3e15a9e9 3e15f369 3e163d0e     .`.>...>i..>.=.>
2401fb10:	3e1686d8 3e16d0c8 3e171add 3e176517     ...>...>...>.e.>
2401fb20:	3e17af77 3e17f9fc 3e1844a8 3e188f78     w..>...>.D.>x..>
2401fb30:	3e18da6f 3e19258c 3e1970ce 3e19bc37     o..>.%.>.p.>7..>
2401fb40:	3e1a07c6 3e1a537b 3e1a9f56 3e1aeb58     ...>{S.>V..>X..>
2401fb50:	3e1b3780 3e1b83cf 3e1bd045 3e1c1ce1     .7.>...>E..>...>
2401fb60:	3e1c69a4 3e1cb68e 3e1d039e 3e1d50d6     .i.>...>...>.P.>
2401fb70:	3e1d9e35 3e1debbc 3e1e3969 3e1e873e     5..>...>i9.>>..>
2401fb80:	3e1ed53b 3e1f235f 3e1f71aa 3e1fc01e     ;..>_#.>.q.>...>
2401fb90:	3e200eb9 3e205d7c 3e20ac67 3e20fb7a     .. >|] >g. >z. >
2401fba0:	3e214ab6 3e219a1a 3e21e9a6 3e22395a     .J!>..!>..!>Z9">
2401fbb0:	3e228937 3e22d93c 3e23296b 3e2379c2     7."><.">k)#>.y#>
2401fbc0:	3e23ca42 3e241aea 3e246bbc 3e24bcb7     B.#>..$>.k$>..$>
2401fbd0:	3e250ddc 3e255f29 3e25b0a0 3e260241     ..%>)_%>..%>A.&>
2401fbe0:	3e26540b 3e26a5ff 3e26f81c 3e274a63     .T&>..&>..&>cJ'>
2401fbf0:	3e279cd5 3e27ef70 3e284236 3e289525     ..'>p.'>6B(>%.(>
2401fc00:	3e28e83f 3e293b84 3e298ef3 3e29e28c     ?.(>.;)>..)>..)>
2401fc10:	3e2a3651 3e2a8a40 3e2ade5a 3e2b329e     Q6*>@.*>Z.*>.2+>
2401fc20:	3e2b870e 3e2bdbaa 3e2c3070 3e2c8562     ..+>..+>p0,>b.,>
2401fc30:	3e2cda7f 3e2d2fc8 3e2d853c 3e2ddadc     ..,>./-><.->..->
2401fc40:	3e2e30a8 3e2e86a0 3e2edcc4 3e2f3314     .0.>...>...>.3/>
2401fc50:	3e2f8990 3e2fe038 3e30370d 3e308e0f     ../>8./>.70>..0>
2401fc60:	3e30e53d 3e313c98 3e31941f 3e31ebd4     =.0>.<1>..1>..1>
2401fc70:	3e3243b5 3e329bc4 3e32f400 3e334c69     .C2>..2>..2>iL3>
2401fc80:	3e33a4ff 3e33fdc3 3e3456b5 3e34afd5     ..3>..3>.V4>..4>
2401fc90:	3e350922 3e35629d 3e35bc46 3e36161d     ".5>.b5>F.5>..6>
2401fca0:	3e367023 3e36ca57 3e3724b9 3e377f4a     #p6>W.6>.$7>J.7>
2401fcb0:	3e37da09 3e3834f7 3e389014 3e38eb60     ..7>.48>..8>`.8>
2401fcc0:	3e3946dc 3e39a286 3e39fe5f 3e3a5a68     .F9>..9>_.9>hZ:>
2401fcd0:	3e3ab6a1 3e3b1309 3e3b6fa0 3e3bcc68     ..:>..;>.o;>h.;>
2401fce0:	3e3c295f 3e3c8687 3e3ce3de 3e3d4166     _)<>..<>..<>fA=>
2401fcf0:	3e3d9f1e 3e3dfd07 3e3e5b20 3e3eb96a     ..=>..=> [>>j.>>
2401fd00:	3e3f17e5 3e3f7690 3e3fd56d 3e40347a     ..?>.v?>m.?>z4@>
2401fd10:	3e4093b9 3e40f32a 3e4152cb 3e41b29f     ..@>*.@>.RA>..A>
2401fd20:	3e4212a4 3e4272da 3e42d343 3e4333de     ..B>.rB>C.B>.3C>
2401fd30:	3e4394ab 3e43f5aa 3e4456db 3e44b83f     ..C>..C>.VD>?.D>
2401fd40:	3e4519d6 3e457b9f 3e45dd9b 3e463fcb     ..E>.{E>..E>.?F>
2401fd50:	3e46a22d 3e4704c2 3e47678b 3e47ca87     -.F>..G>.gG>..G>
2401fd60:	3e482db6 3e48911a 3e48f4b1 3e49587c     .-H>..H>..H>|XI>
2401fd70:	3e49bc7b 3e4a20ae 3e4a8515 3e4ae9b1     {.I>. J>..J>..J>
2401fd80:	3e4b4e81 3e4bb386 3e4c18bf 3e4c7e2e     .NK>..K>..L>.~L>
2401fd90:	3e4ce3d1 3e4d49aa 3e4dafb7 3e4e15fa     ..L>.IM>..M>..N>
2401fda0:	3e4e7c73 3e4ee321 3e4f4a05 3e4fb11f     s|N>!.N>.JO>..O>
2401fdb0:	3e50186f 3e507ff4 3e50e7b1 3e514fa3     o.P>..P>..P>.OQ>
2401fdc0:	3e51b7cc 3e52202b 3e5288c2 3e52f18f     ..Q>+ R>..R>..R>
2401fdd0:	3e535a93 3e53c3ce 3e542d41 3e5496eb     .ZS>..S>A-T>..T>
2401fde0:	3e5500cc 3e556ae5 3e55d536 3e563fbf     ..U>.jU>6.U>.?V>
2401fdf0:	3e56aa80 3e571579 3e5780aa 3e57ec14     ..V>y.W>..W>..W>
2401fe00:	3e5857b6 3e58c391 3e592fa5 3e599bf2     .WX>..X>./Y>..Y>
2401fe10:	3e5a0878 3e5a7537 3e5ae230 3e5b4f62     x.Z>7uZ>0.Z>bO[>
2401fe20:	3e5bbcce 3e5c2a73 3e5c9853 3e5d066c     ..[>s*\>S.\>l.]>
2401fe30:	3e5d74c0 3e5de34e 3e5e5217 3e5ec11a     .t]>N.]>.R^>..^>
2401fe40:	3e5f3058 3e5f9fd1 3e600f85 3e607f74     X0_>.._>..`>t.`>
2401fe50:	3e60ef9e 3e616004 3e61d0a6 3e624183     ..`>.`a>..a>.Ab>
2401fe60:	3e62b29d 3e6323f2 3e639584 3e640751     ..b>.#c>..c>Q.d>
2401fe70:	3e64795c 3e64eba3 3e655e27 3e65d0e7     \yd>..d>'^e>..e>
2401fe80:	3e6643e5 3e66b720 3e672a98 3e679e4e     .Cf> .f>.*g>N.g>
2401fe90:	3e681242 3e688673 3e68fae3 3e696f90     B.h>s.h>..h>.oi>
2401fea0:	3e69e47c 3e6a59a6 3e6acf0f 3e6b44b6     |.i>.Yj>..j>.Dk>
2401feb0:	3e6bba9d 3e6c30c2 3e6ca727 3e6d1dcb     ..k>.0l>'.l>..m>
2401fec0:	3e6d94ae 3e6e0bd2 3e6e8335 3e6efad7     ..m>..n>5.n>..n>
2401fed0:	3e6f72bb 3e6feade 3e706342 3e70dbe6     .ro>..o>Bcp>..p>
2401fee0:	3e7154cc 3e71cdf2 3e724759 3e72c101     .Tq>..q>YGr>..r>
2401fef0:	3e733aeb 3e73b517 3e742f84 3e74aa33     .:s>..s>./t>3.t>
2401ff00:	3e752525 3e75a058 3e761bce 3e769786     %%u>X.u>..v>..v>
2401ff10:	3e771382 3e778fc0 3e780c41 3e788905     ..w>..w>A.x>..x>
2401ff20:	3e79060d 3e798358 3e7a00e7 3e7a7eba     ..y>X.y>..z>.~z>
2401ff30:	3e7afcd1 3e7b7b2d 3e7bf9cd 3e7c78b1     ..z>-{{>..{>.x|>
2401ff40:	3e7cf7da 3e7d7748 3e7df6fb 3e7e76f4     ..|>Hw}>..}>.v~>
2401ff50:	3e7ef732 3e7f77b6 3e7ff87f 3e803cc7     2.~>.w.>...>.<.>
2401ff60:	3e807d72 3e80be40 3e80ff31 3e814046     r}.>@..>1..>F@.>
2401ff70:	3e81817e 3e81c2da 3e820459 3e8245fc     ~..>...>Y..>.E.>
2401ff80:	3e8287c3 3e82c9ae 3e830bbc 3e834def     ...>...>...>.M.>
2401ff90:	3e839046 3e83d2c1 3e841561 3e845825     F..>...>a..>%X.>
2401ffa0:	3e849b0e 3e84de1b 3e85214d 3e8564a4     ...>...>M!.>.d.>
2401ffb0:	3e85a820 3e85ebc1 3e862f87 3e867372      ..>...>./.>rs.>
2401ffc0:	3e86b783 3e86fbb9 3e874015 3e878496     ...>...>.@.>...>
2401ffd0:	3e87c93d 3e880e09 3e8852fc 3e889815     =..>...>.R.>...>
2401ffe0:	3e88dd54 3e8922b9 3e896844 3e89adf6     T..>.".>Dh.>...>
2401fff0:	3e89f3ce 3e8a39cd 3e8a7ff2 3e8ac63f     ...>.9.>...>?..>
24020000:	3e8b0cb2 3e8b534c 3e8b9a0e 3e8be0f7     ...>LS.>...>...>
24020010:	3e8c2807 3e8c6f3e 3e8cb69d 3e8cfe24     .(.>>o.>...>$..>
24020020:	3e8d45d3 3e8d8da9 3e8dd5a7 3e8e1dce     .E.>...>...>...>
24020030:	3e8e661d 3e8eae94 3e8ef733 3e8f3ffb     .f.>...>3..>.?.>
24020040:	3e8f88eb 3e8fd205 3e901b47 3e9064b2     ...>...>G..>.d.>
24020050:	3e90ae46 3e90f803 3e9141ea 3e918bfa     F..>...>.A.>...>
24020060:	3e91d633 3e922096 3e926b23 3e92b5da     3..>. .>#k.>...>
24020070:	3e9300bb 3e934bc5 3e9396fa 3e93e25a     ...>.K.>...>Z..>
24020080:	3e942de3 3e947998 3e94c577 3e951180     .-.>.y.>w..>...>
24020090:	3e955db5 3e95aa15 3e95f69f 3e964356     .].>...>...>VC.>
240200a0:	3e969037 3e96dd44 3e972a7c 3e9777e1     7..>D..>|*.>.w.>
240200b0:	3e97c571 3e98132d 3e986115 3e98af29     q..>-..>.a.>)..>
240200c0:	3e98fd6a 3e994bd8 3e999a71 3e99e938     j..>.K.>q..>8..>
240200d0:	3e9a382b 3e9a874c 3e9ad699 3e9b2614     +8.>L..>...>.&.>
240200e0:	3e9b75bc 3e9bc592 3e9c1595 3e9c65c6     .u.>...>...>.e.>
240200f0:	3e9cb625 3e9d06b1 3e9d576c 3e9da856     %..>...>lW.>V..>
24020100:	3e9df96d 3e9e4ab3 3e9e9c28 3e9eedcc     m..>.J.>(..>...>
24020110:	3e9f3f9e 3e9f91a0 3e9fe3d0 3ea03630     .?.>...>...>06.>
24020120:	3ea088c0 3ea0db7f 3ea12e6e 3ea1818d     ...>...>n..>...>
24020130:	3ea1d4db 3ea2285a 3ea27c0a 3ea2cfe9     ...>Z(.>.|.>...>
24020140:	3ea323f9 3ea3783a 3ea3ccac 3ea4214f     .#.>:x.>...>O!.>
24020150:	3ea47623 3ea4cb28 3ea5205f 3ea575c7     #v.>(..>_ .>.u.>
24020160:	3ea5cb61 3ea6212d 3ea6772b 3ea6cd5b     a..>-!.>+w.>[..>
24020170:	3ea723bd 3ea77a52 3ea7d119 3ea82813     .#.>Rz.>...>.(.>
24020180:	3ea87f40 3ea8d6a0 3ea92e34 3ea985fa     @..>...>4..>...>
24020190:	3ea9ddf4 3eaa3622 3eaa8e84 3eaae719     ...>"6.>...>...>
240201a0:	3eab3fe3 3eab98e1 3eabf214 3eac4b7b     .?.>...>...>{K.>
240201b0:	3eaca516 3eacfee7 3ead58ed 3eadb328     ...>...>.X.>(..>
240201c0:	3eae0d99 3eae683f 3eaec31a 3eaf1e2c     ...>?h.>...>,..>
240201d0:	3eaf7974 3eafd4f2 3eb030a6 3eb08c91     ty.>...>.0.>...>
240201e0:	3eb0e8b2 3eb1450b 3eb1a19a 3eb1fe61     ...>.E.>...>a..>
240201f0:	3eb25b5f 3eb2b894 3eb31602 3eb373a7     _[.>...>...>.s.>
24020200:	3eb3d184 3eb42f9a 3eb48de8 3eb4ec6e     ...>./.>...>n..>
24020210:	3eb54b2e 3eb5aa26 3eb60957 3eb668c2     .K.>&..>W..>.h.>
24020220:	3eb6c866 3eb72844 3eb7885c 3eb7e8ae     f..>D(.>\..>...>
24020230:	3eb8493a 3eb8aa00 3eb90b01 3eb96c3d     :I.>...>...>=l.>
24020240:	3eb9cdb3 3eba2f65 3eba9152 3ebaf37a     ...>e/.>R..>z..>
24020250:	3ebb55df 3ebbb87f 3ebc1b5b 3ebc7e74     .U.>...>[..>t~.>
24020260:	3ebce1c9 3ebd455a 3ebda929 3ebe0d34     ...>ZE.>)..>4..>
24020270:	3ebe717d 3ebed603 3ebf3ac7 3ebf9fc9     }q.>...>.:.>...>
24020280:	3ec00508 3ec06a86 3ec0d043 3ec1363e     ...>.j.>C..>>6.>
24020290:	3ec19c78 3ec202f0 3ec269a9 3ec2d0a0     x..>...>.i.>...>
240202a0:	3ec337d8 3ec39f4f 3ec40706 3ec46efe     .7.>O..>...>.n.>
240202b0:	3ec4d736 3ec53fae 3ec5a868 3ec61163     6..>.?.>h..>c..>
240202c0:	3ec67a9f 3ec6e41d 3ec74ddd 3ec7b7de     .z.>...>.M.>...>
240202d0:	3ec82222 3ec88ca9 3ec8f772 3ec9627e     "".>...>r..>~b.>
240202e0:	3ec9cdcd 3eca395f 3ecaa535 3ecb114f     ...>_9.>5..>O..>
240202f0:	3ecb7dad 3ecbea4f 3ecc5736 3eccc461     .}.>O..>6W.>a..>
24020300:	3ecd31d2 3ecd9f87 3ece0d82 3ece7bc3     .1.>...>...>.{.>
24020310:	3eceea4a 3ecf5916 3ecfc82a 3ed03783     J..>.Y.>*..>.7.>
24020320:	3ed0a724 3ed1170c 3ed1873b 3ed1f7b2     $..>...>;..>...>
24020330:	3ed26870 3ed2d977 3ed34ac6 3ed3bc5e     ph.>w..>.J.>^..>
24020340:	3ed42e3e 3ed4a068 3ed512db 3ed58598     >..>h..>...>...>
24020350:	3ed5f89e 3ed66bef 3ed6df8a 3ed75370     ...>.k.>...>pS.>
24020360:	3ed7c7a1 3ed83c1d 3ed8b0e4 3ed925f7     ...>.<.>...>.%.>
24020370:	3ed99b57 3eda1102 3eda86fa 3edafd3f     W..>...>...>?..>
24020380:	3edb73d1 3edbeab0 3edc61dd 3edcd958     .s.>...>.a.>X..>
24020390:	3edd5121 3eddc938 3ede419e 3edeba54     !Q.>8..>.A.>T..>
240203a0:	3edf3358 3edfacad 3ee02651 3ee0a045     X3.>...>Q&.>E..>
240203b0:	3ee11a8a 3ee19520 3ee21007 3ee28b3f     ...> ..>...>?..>
240203c0:	3ee306c9 3ee382a5 3ee3fed3 3ee47b54     ...>...>...>T{.>
240203d0:	3ee4f827 3ee5754e 3ee5f2c9 3ee67097     '..>Nu.>...>.p.>
240203e0:	3ee6eeb9 3ee76d30 3ee7ebfc 3ee86b1c     ...>0m.>...>.k.>
240203f0:	3ee8ea92 3ee96a5e 3ee9ea80 3eea6af8     ...>^j.>...>.j.>
24020400:	3eeaebc7 3eeb6ced 3eebee6a 3eec703f     ...>.l.>j..>?p.>
24020410:	3eecf26c 3eed74f2 3eedf7d0 3eee7b07     l..>.t.>...>.{.>
24020420:	3eeefe97 3eef8282 3ef006c6 3ef08b64     ...>...>...>d..>
24020430:	3ef1105e 3ef195b2 3ef21b62 3ef2a16e     ^..>...>b..>n..>
24020440:	3ef327d6 3ef3ae9a 3ef435bc 3ef4bd3a     .'.>...>.5.>:..>
24020450:	3ef54516 3ef5cd50 3ef655e9 3ef6dee0     .E.>P..>.U.>...>
24020460:	3ef76837 3ef7f1ec 3ef87c02 3ef90678     7h.>...>.|.>x..>
24020470:	3ef9914e 3efa1c86 3efaa81f 3efb3419     N..>...>...>.4.>
24020480:	3efbc076 3efc4d36 3efcda58 3efd67dd     v..>6M.>X..>.g.>
24020490:	3efdf5c7 3efe8414 3eff12c6 3effa1dd     ...>...>...>...>
240204a0:	3f0018ad 3f00609e 3f00a8c2 3f00f11a     ...?.`.?...?...?
240204b0:	3f0139a5 3f018263 3f01cb56 3f02147d     .9.?c..?V..?}..?
240204c0:	3f025dd8 3f02a768 3f02f12d 3f033b26     .].?h..?-..?&;.?
240204d0:	3f038555 3f03cfb9 3f041a53 3f046523     U..?...?S..?#e.?
240204e0:	3f04b029 3f04fb66 3f0546d9 3f059282     )..?f..?.F.?...?
240204f0:	3f05de63 3f062a7b 3f0676cb 3f06c353     c..?{*.?.v.?S..?
24020500:	3f071012 3f075d0a 3f07aa3a 3f07f7a2     ...?.].?:..?...?
24020510:	3f084544 3f08931f 3f08e134 3f092f82     DE.?...?4..?./.?
24020520:	3f097e0a 3f09cccc 3f0a1bc8 3f0a6b00     .~.?...?...?.k.?
24020530:	3f0aba72 3f0b0a20 3f0b5a08 3f0baa2d     r..? ..?.Z.?-..?
24020540:	3f0bfa8e 3f0c4b2b 3f0c9c04 3f0ced1a     ...?+K.?...?...?
24020550:	3f0d3e6e 3f0d8ffe 3f0de1cc 3f0e33d8     n>.?...?...?.3.?
24020560:	3f0e8622 3f0ed8ab 3f0f2b72 3f0f7e78     "..?...?r+.?x~.?
24020570:	3f0fd1be 3f102543 3f107908 3f10cd0d     ...?C%.?.y.?...?
24020580:	3f112152 3f1175d9 3f11caa0 3f121fa8     R!.?.u.?...?...?
24020590:	3f1274f2 3f12ca7e 3f13204c 3f13765d     .t.?~..?L .?]v.?
240205a0:	3f13ccb0 3f142346 3f147a20 3f14d13e     ...?F#.? z.?>..?
240205b0:	3f1528a0 3f158046 3f15d831 3f163060     .(.?F..?1..?`0.?
240205c0:	3f1688d5 3f16e190 3f173a91 3f1793d8     ...?...?.:.?...?
240205d0:	3f17ed65 3f18473a 3f18a156 3f18fbba     e..?:G.?V..?...?
240205e0:	3f195665 3f19b159 3f1a0c96 3f1a681b     eV.?Y..?...?.h.?
240205f0:	3f1ac3ea 3f1b2003 3f1b7c66 3f1bd913     ...?. .?f|.?...?
24020600:	3f1c360b 3f1c934e 3f1cf0dd 3f1d4eb7     .6.?N..?...?.N.?
24020610:	3f1dacde 3f1e0b52 3f1e6a12 3f1ec920     ...?R..?.j.? ..?
24020620:	3f1f287c 3f1f8826 3f1fe81e 3f204866     |(.?&..?...?fH ?
24020630:	3f20a8fc 3f2109e3 3f216b19 3f21cca0     .. ?..!?.k!?..!?
24020640:	3f222e78 3f2290a2 3f22f31d 3f2355ea     x."?.."?.."?.U#?
24020650:	3f23b90a 3f241c7d 3f248043 3f24e45d     ..#?}.$?C.$?].$?
24020660:	3f2548cb 3f25ad8e 3f2612a6 3f267814     .H%?..%?..&?.x&?
24020670:	3f26ddd7 3f2743f1 3f27aa62 3f28112b     ..&?.C'?b.'?+.(?
24020680:	3f28784b 3f28dfc3 3f294794 3f29afbe     Kx(?..(?.G)?..)?
24020690:	3f2a1842 3f2a8120 3f2aea59 3f2b53ed     B.*? .*?Y.*?.S+?
240206a0:	3f2bbddc 3f2c2827 3f2c92cf 3f2cfdd4     ..+?'(,?..,?..,?
240206b0:	3f2d6936 3f2dd4f6 3f2e4115 3f2ead93     6i-?..-?.A.?...?
240206c0:	3f2f1a70 3f2f87ae 3f2ff54c 3f30634b     p./?../?L./?Kc0?
240206d0:	3f30d1ac 3f31406e 3f31af94 3f321f1d     ..0?n@1?..1?..2?
240206e0:	3f328f09 3f32ff5a 3f337010 3f33e12b     ..2?Z.2?.p3?+.3?
240206f0:	3f3452ac 3f34c494 3f3536e3 3f35a999     .R4?..4?.65?..5?
24020700:	3f361cb8 3f369040 3f370431 3f37788c     ..6?@.6?1.7?.x7?
24020710:	3f37ed52 3f386283 3f38d820 3f394e2a     R.7?.b8? .8?*N9?
24020720:	3f39c4a0 3f3a3b85 3f3ab2d7 3f3b2a99     ..9?.;:?..:?.*;?
24020730:	3f3ba2ca 3f3c1b6c 3f3c947e 3f3d0e02     ..;?l.<?~.<?..=?
24020740:	3f3d87f8 3f3e0261 3f3e7d3e 3f3ef88e     ..=?a.>?>}>?..>?
24020750:	3f3f7454 3f3ff090 3f406d41 3f40ea6a     Tt??..??Am@?j.@?
24020760:	3f41680a 3f41e623 3f4264b5 3f42e3c1     .hA?#.A?.dB?..B?
24020770:	3f436347 3f43e349 3f4463c6 3f44e4c1     GcC?I.C?.cD?..D?
24020780:	3f456639 3f45e82f 3f466aa5 3f46ed9a     9fE?/.E?.jF?..F?
24020790:	3f477110 3f47f507 3f487981 3f48fe7d     .qG?..G?.yH?}.H?
240207a0:	3f4983fe 3f4a0a03 3f4a908d 3f4b179e     ..I?..J?..J?..K?
240207b0:	3f4b9f36 3f4c2756 3f4cafff 3f4d3932     6.K?V'L?..L?29M?
240207c0:	3f4dc2ef 3f4e4d37 3f4ed80c 3f4f636e     ..M?7MN?..N?ncO?
240207d0:	3f4fef5e 3f507bdd 3f5108ec 3f51968b     ^.O?.{P?..Q?..Q?
240207e0:	3f5224bd 3f52b381 3f5342d9 3f53d2c6     .$R?..R?.BS?..S?
240207f0:	3f546348 3f54f460 3f558611 3f561859     HcT?`.T?..U?Y.V?
24020800:	3f56ab3b 3f573eb8 3f57d2d0 3f586785     ;.V?.>W?..W?.gX?
24020810:	3f58fcd8 3f5992c9 3f5a295a 3f5ac08b     ..X?..Y?Z)Z?..Z?
24020820:	3f5b585f 3f5bf0d5 3f5c89f0 3f5d23b0     _X[?..[?..\?.#]?
24020830:	3f5dbe16 3f5e5923 3f5ef4d9 3f5f9138     ..]?#Y^?..^?8._?
24020840:	3f602e43 3f60cbf9 3f616a5d 3f62096f     C.`?..`?]ja?o.b?
24020850:	3f62a931 3f6349a4 3f63eac8 3f648ca0     1.b?.Ic?..c?..d?
24020860:	3f652f2d 3f65d26f 3f667669 3f671b1b     -/e?o.e?ivf?..g?
24020870:	3f67c086 3f6866ad 3f690d90 3f69b531     ..g?.fh?..i?1.i?
24020880:	3f6a5d91 3f6b06b1 3f6bb093 3f6c5b38     .]j?..k?..k?8[l?
24020890:	3f6d06a2 3f6db2d2 3f6e5fca 3f6f0d8a     ..m?..m?._n?..o?
240208a0:	3f6fbc15 3f706b6c 3f711b90 3f71cc83     ..o?lkp?..q?..q?
240208b0:	3f727e47 3f7330dd 3f73e446 3f749884     G~r?.0s?F.s?..t?
240208c0:	3f754d9a 3f760387 3f76ba4f 3f7771f2     .Mu?..v?O.v?.qw?
240208d0:	3f782a73 3f78e3d2 3f799e12 3f7a5935     s*x?..x?..y?5Yz?
240208e0:	3f7b153c 3f7bd228 3f7c8ffd 3f7d4ebb     <.{?(.{?..|?.N}?
240208f0:	3f7e0e64 3f7ecefa 3f7f9080 3f80297b     d.~?..~?...?{).?
24020900:	3f808b2f 3f80ed5e 3f815008 3f81b32e     /..?^..?.P.?...?
24020910:	3f8216d2 3f827af4 3f82df95 3f8344b6     ...?.z.?...?.D.?
24020920:	3f83aa59 3f84107e 3f847727 3f84de54     Y..?~..?'w.?T..?
24020930:	3f854606 3f85ae3f 3f861700 3f86804a     .F.??..?...?J..?
24020940:	3f86ea1e 3f87547d 3f87bf68 3f882ae1     ...?}T.?h..?.*.?
24020950:	3f8896e8 3f890380 3f8970a8 3f89de63     ...?...?.p.?c..?
24020960:	3f8a4cb1 3f8abb94 3f8b2b0d 3f8b9b1d     .L.?...?.+.?...?
24020970:	3f8c0bc6 3f8c7d09 3f8ceee7 3f8d6162     ...?.}.?...?ba.?
24020980:	3f8dd47a 3f8e4832 3f8ebc8b 3f8f3186     z..?2H.?...?.1.?
24020990:	3f8fa724 3f901d68 3f909452 3f910be4     $..?h..?R..?...?
240209a0:	3f91841f 3f91fd05 3f927698 3f92f0d9     ...?...?.v.?...?
240209b0:	3f936bc9 3f93e76b 3f9463bf 3f94e0c8     .k.?k..?.c.?...?
240209c0:	3f955e87 3f95dcfe 3f965c2e 3f96dc19     .^.?...?.\.?...?
240209d0:	3f975cc2 3f97de29 3f986050 3f98e33a     .\.?)..?P`.?:..?
240209e0:	3f9966e8 3f99eb5c 3f9a7097 3f9af69d     .f.?\..?.p.?...?
240209f0:	3f9b7d6e 3f9c050c 3f9c8d7a 3f9d16ba     n}.?...?z..?...?
24020a00:	3f9da0cd 3f9e2bb6 3f9eb777 3f9f4412     ...?.+.?w..?.D.?
24020a10:	3f9fd188 3fa05fdd 3fa0ef12 3fa17f29     ...?._.?...?)..?
24020a20:	3fa21026 3fa2a209 3fa334d6 3fa3c88f     &..?...?.4.?...?
24020a30:	3fa45d36 3fa4f2cd 3fa58958 3fa620d8     6].?...?X..?. .?
24020a40:	3fa6b950 3fa752c2 3fa7ed32 3fa888a1     P..?.R.?2..?...?
24020a50:	3fa92513 3fa9c28a 3faa6109 3fab0093     .%.?...?.a.?...?
24020a60:	3faba12a 3fac42d2 3face58c 3fad895d     *..?.B.?...?]..?
24020a70:	3fae2e47 3faed44d 3faf7b73 3fb023bb     G..?M..?s{.?.#.?
24020a80:	3fb0cd28 3fb177be 3fb22380 3fb2d072     (..?.w.?.#.?r..?
24020a90:	3fb37e96 3fb42df0 3fb4de84 3fb59055     .~.?.-.?...?U..?
24020aa0:	3fb64366 3fb6f7bc 3fb7ad59 3fb86443     fC.?...?Y..?Cd.?
24020ab0:	3fb91c7b 3fb9d607 3fba90ea 3fbb4d29     {..?...?...?)M.?
24020ac0:	3fbc0ac6 3fbcc9c7 3fbd8a2f 3fbe4c03     ...?...?/..?.L.?
24020ad0:	3fbf0f47 3fbfd400 3fc09a31 3fc161df     G..?...?1..?.a.?
24020ae0:	3fc22b0f 3fc2f5c6 3fc3c208 3fc48fda     .+.?...?...?...?
24020af0:	3fc55f41 3fc63042 3fc702e2 3fc7d726     A_.?B0.?...?&..?
24020b00:	3fc8ad14 3fc984b0 3fca5e00 3fcb390a     ...?...?.^.?.9.?
24020b10:	3fcc15d2 3fccf460 3fcdd4b8 3fceb6e1     ...?`..?...?...?
24020b20:	3fcf9ae0 3fd080bc 3fd1687a 3fd25222     ...?...?zh.?"R.?
24020b30:	3fd33db9 3fd42b46 3fd51ad0 3fd60c5d     .=.?F+.?...?]..?
24020b40:	3fd6fff4 3fd7f59d 3fd8ed5e 3fd9e73f     ...?...?^..??..?
24020b50:	3fdae347 3fdbe17e 3fdce1eb 3fdde497     G..?~..?...?...?
24020b60:	3fdee988 3fdff0c8 3fe0fa5e 3fe20654     ...?...?^..?T..?
24020b70:	3fe314b1 3fe4257e 3fe538c5 3fe64e8d     ...?~%.?.8.?.N.?
24020b80:	3fe766e2 3fe881cc 3fe99f54 3feabf85     .f.?...?T..?...?
24020b90:	3febe269 3fed080a 3fee3071 3fef5bab     i..?...?q0.?.[.?
24020ba0:	3ff089c1 3ff1bac0 3ff2eeb1 3ff425a1     ...?...?...?.%.?
24020bb0:	3ff55f9c 3ff69cad 3ff7dce1 3ff92044     ._.?...?...?D .?
24020bc0:	3ffa66e4 3ffbb0cc 3ffcfe0b 3ffe4eae     .f.?...?...?.N.?
24020bd0:	3fffa2c4 40007d2c 40012abf 4001da20     ...?,}.@.*.@ ..@
24020be0:	40028b57 40033e6d 4003f368 4004aa52     W..@m>.@h..@R..@
24020bf0:	40056333 40061e12 4006daf9 400799f1     3c.@...@...@...@
24020c00:	40085b02 40091e36 4009e397 400aab2e     .[.@6..@...@...@
24020c10:	400b7504 400c4126 400d0f9b 400de071     .u.@&A.@...@q..@
24020c20:	400eb3b0 400f8965 4010619b 40113c5e     ...@e..@.a.@^<.@
24020c30:	401219ba 4012f9bb 4013dc6e 4014c1e0     ...@...@n..@...@
24020c40:	4015aa1e 40169536 40178336 4018742c     ...@6..@6..@,t.@
24020c50:	40196827 401a5f36 401b5968 401c56cf     'h.@6_.@hY.@.V.@
24020c60:	401d5779 401e5b78 401f62de 40206dbb     yW.@x[.@.b.@.m @
24020c70:	40217c22 40228e25 4023a3d9 4024bd51     "|!@%."@..#@Q.$@
24020c80:	4025daa1 4026fbde 4028211e 40294a76     ..%@..&@.!(@vJ)@
24020c90:	402a77fe 402ba9ce 402cdffc 402e1aa3     .w*@..+@..,@...@
24020ca0:	402f59db 40309dc0 4031e66c 403333fc     .Y/@..0@l.1@.33@

24020cb0 <__filterTanhTable_96000>:
24020cb0:	398c4646 398c8a33 398cce40 398d126e     FF.93..9@..9n..9
24020cc0:	398d56bd 398d9b2e 398ddfbf 398e2472     .V.9...9...9r$.9
24020cd0:	398e6946 398eae3b 398ef351 398f3889     Fi.9;..9Q..9.8.9
24020ce0:	398f7de3 398fc35e 399008fb 39904eb9     .}.9^..9...9.N.9
24020cf0:	3990949a 3990da9c 399120c0 39916706     ...9...9. .9.g.9
24020d00:	3991ad6e 3991f3f8 39923aa4 39928173     n..9...9.:.9s..9
24020d10:	3992c863 39930f76 399356ac 39939e04     c..9v..9.V.9...9
24020d20:	3993e57f 39942d1c 399474dc 3994bcbe     ...9.-.9.t.9...9
24020d30:	399504c3 39954cec 39959537 3995dda5     ...9.L.97..9...9
24020d40:	39962636 39966eeb 3996b7c2 399700bd     6&.9.n.9...9...9
24020d50:	399749dc 3997931d 3997dc82 3998260b     .I.9...9...9.&.9
24020d60:	39986fb7 3998b987 3999037b 39994d92     .o.9...9{..9.M.9
24020d70:	399997ce 3999e22d 399a2cb0 399a7758     ...9-..9.,.9Xw.9
24020d80:	399ac223 399b0d13 399b5827 399ba35f     #..9...9'X.9_..9
24020d90:	399beebc 399c3a3d 399c85e3 399cd1ae     ...9=:.9...9...9
24020da0:	399d1d9d 399d69b1 399db5ea 399e0247     ...9.i.9...9G..9
24020db0:	399e4eca 399e9b72 399ee83f 399f3531     .N.9r..9?..915.9
24020dc0:	399f8248 399fcf85 39a01ce7 39a06a6e     H..9...9...9nj.9
24020dd0:	39a0b81b 39a105ee 39a153e6 39a1a204     ...9...9.S.9...9
24020de0:	39a1f048 39a23eb2 39a28d42 39a2dbf8     H..9.>.9B..9...9
24020df0:	39a32ad4 39a379d6 39a3c8fe 39a4184d     .*.9.y.9...9M..9
24020e00:	39a467c2 39a4b75d 39a50720 39a55708     .g.9]..9 ..9.W.9
24020e10:	39a5a718 39a5f74e 39a647ab 39a6982f     ...9N..9.G.9/..9
24020e20:	39a6e8da 39a739ac 39a78aa5 39a7dbc5     ...9.9.9...9...9
24020e30:	39a82d0d 39a87e7c 39a8d012 39a921d0     .-.9|~.9...9.!.9
24020e40:	39a973b6 39a9c5c3 39aa17f8 39aa6a55     .s.9...9...9Uj.9
24020e50:	39aabcd9 39ab0f86 39ab625a 39abb557     ...9...9Zb.9W..9
24020e60:	39ac087c 39ac5bc9 39acaf3e 39ad02dc     |..9.[.9>..9...9
24020e70:	39ad56a3 39adaa92 39adfea9 39ae52e9     .V.9...9...9.R.9
24020e80:	39aea753 39aefbe5 39af509f 39afa583     S..9...9.P.9...9
24020e90:	39affa90 39b04fc7 39b0a526 39b0faaf     ...9.O.9&..9...9
24020ea0:	39b15061 39b1a63d 39b1fc42 39b25271     aP.9=..9B..9qR.9
24020eb0:	39b2a8ca 39b2ff4c 39b355f9 39b3accf     ...9L..9.U.9...9
24020ec0:	39b403d0 39b45afa 39b4b24f 39b509ce     ...9.Z.9O..9...9
24020ed0:	39b56177 39b5b94b 39b61149 39b66972     wa.9K..9I..9ri.9
24020ee0:	39b6c1c6 39b71a45 39b772ee 39b7cbc2     ...9E..9.r.9...9
24020ef0:	39b824c1 39b87dec 39b8d741 39b930c2     .$.9.}.9A..9.0.9
24020f00:	39b98a6e 39b9e445 39ba3e48 39ba9877     n..9E..9H>.9w..9
24020f10:	39baf2d1 39bb4d57 39bba809 39bc02e7     ...9WM.9...9...9
24020f20:	39bc5df1 39bcb927 39bd1489 39bd7017     .].9'..9...9.p.9
24020f30:	39bdcbd2 39be27b9 39be83cc 39bee00c     ...9.'.9...9...9
24020f40:	39bf3c79 39bf9912 39bff5d9 39c052cc     y<.9...9...9.R.9
24020f50:	39c0afec 39c10d3a 39c16ab4 39c1c85c     ...9:..9.j.9\..9
24020f60:	39c22631 39c28434 39c2e264 39c340c2     1&.94..9d..9.@.9
24020f70:	39c39f4d 39c3fe07 39c45cee 39c4bc03     M..9...9.\.9...9
24020f80:	39c51b46 39c57ab7 39c5da56 39c63a24     F..9.z.9V..9$:.9
24020f90:	39c69a20 39c6fa4b 39c75aa4 39c7bb2c      ..9K..9.Z.9,..9
24020fa0:	39c81be2 39c87cc8 39c8dddc 39c93f1f     ...9.|.9...9.?.9
24020fb0:	39c9a092 39ca0233 39ca6404 39cac604     ...93..9.d.9...9
24020fc0:	39cb2834 39cb8a93 39cbed22 39cc4fe1     4(.9...9"..9.O.9
24020fd0:	39ccb2cf 39cd15ed 39cd793c 39cddcba     ...9...9<y.9...9
24020fe0:	39ce4069 39cea447 39cf0857 39cf6c96     i@.9G..9W..9.l.9
24020ff0:	39cfd106 39d035a7 39d09a79 39d0ff7b     ...9.5.9y..9{..9
24021000:	39d164ae 39d1ca13 39d22fa8 39d2956f     .d.9...9./.9o..9
24021010:	39d2fb66 39d36190 39d3c7ea 39d42e76     f..9.a.9...9v..9
24021020:	39d49534 39d4fc24 39d56346 39d5ca99     4..9$..9Fc.9...9
24021030:	39d6321e 39d699d6 39d701c0 39d769dc     .2.9...9...9.i.9
24021040:	39d7d22a 39d83aab 39d8a35f 39d90c45     *..9.:.9_..9E..9
24021050:	39d9755f 39d9deab 39da482a 39dab1dc     _u.9...9*H.9...9
24021060:	39db1bc1 39db85d9 39dbf025 39dc5aa5     ...9...9%..9.Z.9
24021070:	39dcc558 39dd303e 39dd9b59 39de06a7     X..9>0.9Y..9...9
24021080:	39de7229 39dedddf 39df49ca 39dfb5e9     )r.9...9.I.9...9
24021090:	39e0223c 39e08ec3 39e0fb7f 39e16870     <".9...9...9ph.9
240210a0:	39e1d595 39e242f0 39e2b07f 39e31e43     ...9.B.9...9C..9
240210b0:	39e38c3c 39e3fa6b 39e468cf 39e4d769     <..9k..9.h.9i..9
240210c0:	39e54638 39e5b53c 39e62477 39e693e7     8F.9<..9w$.9...9
240210d0:	39e7038d 39e7736a 39e7e37c 39e853c5     ...9js.9|..9.S.9
240210e0:	39e8c444 39e934fa 39e9a5e6 39ea1709     D..9.4.9...9...9
240210f0:	39ea8863 39eaf9f3 39eb6bbb 39ebddb9     c..9...9.k.9...9
24021100:	39ec4fef 39ecc25c 39ed3501 39eda7dd     .O.9\..9.5.9...9
24021110:	39ee1af0 39ee8e3c 39ef01bf 39ef757a     ...9<..9...9zu.9
24021120:	39efe96d 39f05d99 39f0d1fc 39f14698     m..9.].9...9.F.9
24021130:	39f1bb6d 39f2307a 39f2a5bf 39f31b3e     m..9z0.9...9>..9
24021140:	39f390f5 39f406e5 39f47d0f 39f4f371     ...9...9.}.9q..9
24021150:	39f56a0d 39f5e0e3 39f657f2 39f6cf3a     .j.9...9.W.9:..9
24021160:	39f746bd 39f7be79 39f8366f 39f8ae9f     .F.9y..9o6.9...9
24021170:	39f9270a 39f99faf 39fa188e 39fa91a8     .'.9...9...9...9
24021180:	39fb0afc 39fb848b 39fbfe55 39fc785a     ...9...9U..9Zx.9
24021190:	39fcf29a 39fd6d15 39fde7cc 39fe62be     ...9.m.9...9.b.9
240211a0:	39feddeb 39ff5955 39ffd4f9 3a00286d     ...9UY.9...9m(.:
240211b0:	3a00667b 3a00a4a8 3a00e2f2 3a01215b     {f.:...:...:[!.:
240211c0:	3a015fe2 3a019e87 3a01dd4b 3a021c2d     ._.:...:K..:-..:
240211d0:	3a025b2d 3a029a4c 3a02d989 3a0318e5     -[.:L..:...:...:
240211e0:	3a035860 3a0397fa 3a03d7b2 3a041789     `X.:...:...:...:
240211f0:	3a04577f 3a049794 3a04d7c8 3a05181b     .W.:...:...:...:
24021200:	3a05588d 3a05991f 3a05d9d0 3a061aa0     .X.:...:...:...:
24021210:	3a065b8f 3a069c9e 3a06ddcd 3a071f1a     .[.:...:...:...:
24021220:	3a076088 3a07a215 3a07e3c2 3a08258f     .`.:...:...:.%.:
24021230:	3a08677c 3a08a988 3a08ebb5 3a092e02     |g.:...:...:...:
24021240:	3a09706e 3a09b2fb 3a09f5a8 3a0a3876     np.:...:...:v8.:
24021250:	3a0a7b63 3a0abe72 3a0b01a0 3a0b44ef     c{.:r..:...:.D.:
24021260:	3a0b885f 3a0bcbef 3a0c0fa1 3a0c5372     _..:...:...:rS.:
24021270:	3a0c9765 3a0cdb79 3a0d1fad 3a0d6403     e..:y..:...:.d.:
24021280:	3a0da87a 3a0ded12 3a0e31cb 3a0e76a5     z..:...:.1.:.v.:
24021290:	3a0ebba1 3a0f00be 3a0f45fc 3a0f8b5c     ...:...:.E.:\..:
240212a0:	3a0fd0de 3a101681 3a105c46 3a10a22d     ...:...:F\.:-..:
240212b0:	3a10e836 3a112e61 3a1174ad 3a11bb1c     6..:a..:.t.:...:
240212c0:	3a1201ac 3a12485f 3a128f34 3a12d62c     ...:_H.:4..:,..:
240212d0:	3a131d46 3a136482 3a13abe1 3a13f362     F..:.d.:...:b..:
240212e0:	3a143b06 3a1482cc 3a14cab6 3a1512c2     .;.:...:...:...:
240212f0:	3a155af1 3a15a343 3a15ebb8 3a163450     .Z.:C..:...:P4.:
24021300:	3a167d0b 3a16c5ea 3a170eeb 3a175810     .}.:...:...:.X.:
24021310:	3a17a159 3a17eac5 3a183454 3a187e08     Y..:...:T4.:.~.:
24021320:	3a18c7de 3a1911d9 3a195bf7 3a19a63a     ...:...:.[.::..:
24021330:	3a19f0a0 3a1a3b2a 3a1a85d9 3a1ad0ab     ...:*;.:...:...:
24021340:	3a1b1ba2 3a1b66bd 3a1bb1fd 3a1bfd61     ...:.f.:...:a..:
24021350:	3a1c48e9 3a1c9496 3a1ce068 3a1d2c5e     .H.:...:h..:^,.:
24021360:	3a1d7879 3a1dc4b9 3a1e111e 3a1e5da8     yx.:...:...:.].:
24021370:	3a1eaa57 3a1ef72b 3a1f4424 3a1f9143     W..:+..:$D.:C..:
24021380:	3a1fde86 3a202bf0 3a20797e 3a20c733     ...:.+ :~y :3. :
24021390:	3a21150d 3a21630c 3a21b132 3a21ff7d     ..!:.c!:2.!:}.!:
240213a0:	3a224dee 3a229c85 3a22eb43 3a233a26     .M":..":C.":&:#:
240213b0:	3a238930 3a23d85f 3a2427b6 3a247732     0.#:_.#:.'$:2w$:
240213c0:	3a24c6d5 3a25169f 3a25668f 3a25b6a6     ..$:..%:.f%:..%:
240213d0:	3a2606e4 3a265748 3a26a7d4 3a26f886     ..&:HW&:..&:..&:
240213e0:	3a274960 3a279a61 3a27eb89 3a283cd8     `I':a.':..':.<(:
240213f0:	3a288e4f 3a28dfed 3a2931b2 3a2983a0     O.(:..(:.1):..):
24021400:	3a29d5b4 3a2a27f1 3a2a7a56 3a2acce2     ..):.'*:Vz*:..*:
24021410:	3a2b1f96 3a2b7273 3a2bc577 3a2c18a4     ..+:sr+:w.+:..,:
24021420:	3a2c6bf9 3a2cbf76 3a2d131c 3a2d66ea     .k,:v.,:..-:.f-:
24021430:	3a2dbae1 3a2e0f00 3a2e6348 3a2eb7b9     ..-:...:Hc.:...:
24021440:	3a2f0c53 3a2f6116 3a2fb602 3a300b17     S./:.a/:../:..0:
24021450:	3a306055 3a30b5bd 3a310b4e 3a316108     U`0:..0:N.1:.a1:
24021460:	3a31b6ec 3a320cf9 3a326330 3a32b991     ..1:..2:0c2:..2:
24021470:	3a33101c 3a3366d0 3a33bdaf 3a3414b7     ..3:.f3:..3:..4:
24021480:	3a346bea 3a34c347 3a351ace 3a357280     .k4:G.4:..5:.r5:
24021490:	3a35ca5c 3a362263 3a367a94 3a36d2f0     \.5:c"6:.z6:..6:
240214a0:	3a372b77 3a378428 3a37dd05 3a38360c     w+7:(.7:..7:.68:
240214b0:	3a388f3f 3a38e89d 3a394226 3a399bdb     ?.8:..8:&B9:..9:
240214c0:	3a39f5bb 3a3a4fc6 3a3aa9fd 3a3b0460     ..9:.O::..::`.;:
240214d0:	3a3b5eee 3a3bb9a9 3a3c148f 3a3c6fa1     .^;:..;:..<:.o<:
240214e0:	3a3ccae0 3a3d264b 3a3d81e1 3a3ddda5     ..<:K&=:..=:..=:
240214f0:	3a3e3994 3a3e95b0 3a3ef1f9 3a3f4e6f     .9>:..>:..>:oN?:
24021500:	3a3fab11 3a4007e0 3a4064dc 3a40c205     ..?:..@:.d@:..@:
24021510:	3a411f5b 3a417cdf 3a41da8f 3a42386d     [.A:.|A:..A:m8B:
24021520:	3a429679 3a42f4b2 3a435318 3a43b1ad     y.B:..B:.SC:..C:
24021530:	3a44106f 3a446f5f 3a44ce7d 3a452dc9     o.D:_oD:}.D:.-E:
24021540:	3a458d43 3a45eceb 3a464cc2 3a46acc7     C.E:..E:.LF:..F:
24021550:	3a470cfb 3a476d5d 3a47cdee 3a482eae     ..G:]mG:..G:..H:
24021560:	3a488f9c 3a48f0b9 3a495206 3a49b381     ..H:..H:.RI:..I:
24021570:	3a4a152c 3a4a7706 3a4ad910 3a4b3b49     ,.J:.wJ:..J:I;K:
24021580:	3a4b9db1 3a4c0049 3a4c6311 3a4cc609     ..K:I.L:.cL:..L:
24021590:	3a4d2930 3a4d8c88 3a4df010 3a4e53c8     0)M:..M:..M:.SN:
240215a0:	3a4eb7b0 3a4f1bc8 3a4f8012 3a4fe48b     ..N:..O:..O:..O:
240215b0:	3a504935 3a50ae10 3a51131c 3a517859     5IP:..P:..Q:YxQ:
240215c0:	3a51ddc7 3a524366 3a52a936 3a530f37     ..Q:fCR:6.R:7.S:
240215d0:	3a53756a 3a53dbce 3a544264 3a54a92c     juS:..S:dBT:,.T:
240215e0:	3a551025 3a557750 3a55dead 3a56463d     %.U:PwU:..U:=FV:
240215f0:	3a56adfe 3a5715f1 3a577e17 3a57e670     ..V:..W:.~W:p.W:
24021600:	3a584efb 3a58b7b8 3a5920a8 3a5989cb     .NX:..X:. Y:..Y:
24021610:	3a59f321 3a5a5caa 3a5ac666 3a5b3055     !.Y:.\Z:f.Z:U0[:
24021620:	3a5b9a78 3a5c04ce 3a5c6f57 3a5cda14     x.[:..\:Wo\:..\:
24021630:	3a5d4505 3a5db029 3a5e1b82 3a5e870e     .E]:).]:..^:..^:
24021640:	3a5ef2ce 3a5f5ec3 3a5fcaec 3a603749     ..^:.^_:.._:I7`:
24021650:	3a60a3db 3a6110a1 3a617d9c 3a61eacc     ..`:..a:.}a:..a:
24021660:	3a625830 3a62c5ca 3a633398 3a63a19c     0Xb:..b:.3c:..c:
24021670:	3a640fd5 3a647e44 3a64ece7 3a655bc1     ..d:D~d:..d:.[e:
24021680:	3a65cad0 3a663a15 3a66a990 3a671941     ..e:.:f:..f:A.g:
24021690:	3a678927 3a67f944 3a686998 3a68da21     '.g:D.g:.ih:!.h:
240216a0:	3a694ae2 3a69bbd8 3a6a2d06 3a6a9e6a     .Ji:..i:.-j:j.j:
240216b0:	3a6b1006 3a6b81d8 3a6bf3e1 3a6c6622     ..k:..k:..k:"fl:
240216c0:	3a6cd89a 3a6d4b49 3a6dbe30 3a6e314e     ..l:IKm:0.m:N1n:
240216d0:	3a6ea4a4 3a6f1832 3a6f8bf9 3a6ffff7     ..n:2.o:..o:..o:
240216e0:	3a70742d 3a70e89b 3a715d42 3a71d222     -tp:..p:B]q:".q:
240216f0:	3a72473a 3a72bc8a 3a733214 3a73a7d6     :Gr:..r:.2s:..s:
24021700:	3a741dd2 3a749406 3a750a74 3a75811b     ..t:..t:t.u:..u:
24021710:	3a75f7fc 3a766f16 3a76e66a 3a775df7     ..u:.ov:j.v:.]w:
24021720:	3a77d5bf 3a784dc0 3a78c5fc 3a793e72     ..w:.Mx:..x:r>y:
24021730:	3a79b722 3a7a300c 3a7aa931 3a7b2291     ".y:.0z:1.z:."{:
24021740:	3a7b9c2c 3a7c1601 3a7c9012 3a7d0a5d     ,.{:..|:..|:].}:
24021750:	3a7d84e4 3a7dffa6 3a7e7aa4 3a7ef5dd     ..}:..}:.z~:..~:
24021760:	3a7f7151 3a7fed02 3a803477 3a80728b     Qq.:...:w4.:.r.:
24021770:	3a80b0be 3a80ef0e 3a812d7d 3a816c09     ...:...:}-.:.l.:
24021780:	3a81aab5 3a81e97e 3a822866 3a82676c     ...:~..:f(.:lg.:
24021790:	3a82a691 3a82e5d4 3a832536 3a8364b7     ...:...:6%.:.d.:
240217a0:	3a83a456 3a83e415 3a8423f2 3a8463ee     V..:...:.#.:.c.:
240217b0:	3a84a409 3a84e443 3a85249c 3a856515     ...:C..:.$.:.e.:
240217c0:	3a85a5ac 3a85e663 3a862739 3a86682f     ...:c..:9'.:/h.:
240217d0:	3a86a944 3a86ea78 3a872bcc 3a876d40     D..:x..:.+.:@m.:
240217e0:	3a87aed3 3a87f087 3a88325a 3a88744c     ...:...:Z2.:Lt.:
240217f0:	3a88b65f 3a88f892 3a893ae5 3a897d58     _..:...:.:.:X}.:
24021800:	3a89bfeb 3a8a029e 3a8a4572 3a8a8866     ...:...:rE.:f..:
24021810:	3a8acb7b 3a8b0eb0 3a8b5205 3a8b957b     {..:...:.R.:{..:
24021820:	3a8bd912 3a8c1cc9 3a8c60a2 3a8ca49b     ...:...:.`.:...:
24021830:	3a8ce8b5 3a8d2cf0 3a8d714c 3a8db5c9     ...:.,.:Lq.:...:
24021840:	3a8dfa67 3a8e3f27 3a8e8408 3a8ec90a     g..:'?.:...:...:
24021850:	3a8f0e2d 3a8f5372 3a8f98d9 3a8fde61     -..:rS.:...:a..:
24021860:	3a90240b 3a9069d7 3a90afc4 3a90f5d3     .$.:.i.:...:...:
24021870:	3a913c05 3a918258 3a91c8cd 3a920f64     .<.:X..:...:d..:
24021880:	3a92561e 3a929cfa 3a92e3f8 3a932b18     .V.:...:...:.+.:
24021890:	3a93725b 3a93b9c1 3a940149 3a9448f3     [r.:...:I..:.H.:
240218a0:	3a9490c1 3a94d8b1 3a9520c4 3a9568f9     ...:...:. .:.h.:
240218b0:	3a95b152 3a95f9ce 3a96426d 3a968b2f     R..:...:mB.:/..:
240218c0:	3a96d414 3a971d1d 3a976649 3a97af98     ...:...:If.:...:
240218d0:	3a97f90b 3a9842a2 3a988c5c 3a98d63a     ...:.B.:\..::..:
240218e0:	3a99203b 3a996a61 3a99b4aa 3a99ff17     ; .:aj.:...:...:
240218f0:	3a9a49a9 3a9a945e 3a9adf38 3a9b2a35     .I.:^..:8..:5*.:
24021900:	3a9b7558 3a9bc09e 3a9c0c09 3a9c5799     Xu.:...:...:.W.:
24021910:	3a9ca34d 3a9cef26 3a9d3b23 3a9d8745     M..:&..:#;.:E..:
24021920:	3a9dd38c 3a9e1ff9 3a9e6c8a 3a9eb940     ...:...:.l.:@..:
24021930:	3a9f061b 3a9f531c 3a9fa041 3a9fed8d     ...:.S.:A..:...:
24021940:	3aa03afd 3aa08893 3aa0d64f 3aa12430     .:.:...:O..:0$.:
24021950:	3aa17237 3aa1c064 3aa20eb7 3aa25d2f     7r.:d..:...:/].:
24021960:	3aa2abce 3aa2fa92 3aa3497d 3aa3988e     ...:...:}I.:...:
24021970:	3aa3e7c5 3aa43723 3aa486a7 3aa4d652     ...:#7.:...:R..:
24021980:	3aa52623 3aa5761b 3aa5c639 3aa6167e     #&.:.v.:9..:~..:
24021990:	3aa666eb 3aa6b77e 3aa70838 3aa75919     .f.:~..:8..:.Y.:
240219a0:	3aa7aa21 3aa7fb51 3aa84ca8 3aa89e26     !..:Q..:.L.:&..:
240219b0:	3aa8efcc 3aa94199 3aa9938e 3aa9e5ab     ...:.A.:...:...:
240219c0:	3aaa37ef 3aaa8a5b 3aaadcf0 3aab2fac     .7.:[..:...:./.:
240219d0:	3aab8290 3aabd59c 3aac28d1 3aac7c2d     ...:...:.(.:-|.:
240219e0:	3aaccfb3 3aad2360 3aad7736 3aadcb35     ...:`#.:6w.:5..:
240219f0:	3aae1f5c 3aae73ad 3aaec826 3aaf1cc7     \..:.s.:&..:...:
24021a00:	3aaf7192 3aafc686 3ab01ba3 3ab070e9     .q.:...:...:.p.:
24021a10:	3ab0c659 3ab11bf2 3ab171b4 3ab1c7a0     Y..:...:.q.:...:
24021a20:	3ab21db6 3ab273f5 3ab2ca5e 3ab320f1     ...:.s.:^..:. .:
24021a30:	3ab377ad 3ab3ce94 3ab425a5 3ab47ce0     .w.:...:.%.:.|.:
24021a40:	3ab4d445 3ab52bd4 3ab5838e 3ab5db73     E..:.+.:...:s..:
24021a50:	3ab63382 3ab68bbb 3ab6e420 3ab73caf     .3.:...: ..:.<.:
24021a60:	3ab79569 3ab7ee4e 3ab8475e 3ab8a099     i..:N..:^G.:...:
24021a70:	3ab8f9ff 3ab95391 3ab9ad4e 3aba0736     ...:.S.:N..:6..:
24021a80:	3aba614a 3ababb8a 3abb15f5 3abb708c     Ja.:...:...:.p.:
24021a90:	3abbcb4f 3abc263e 3abc8159 3abcdca0     O..:>&.:Y..:...:
24021aa0:	3abd3813 3abd93b2 3abdef7e 3abe4b77     .8.:...:~..:wK.:
24021ab0:	3abea79b 3abf03ed 3abf606b 3abfbd16     ...:...:k`.:...:
24021ac0:	3ac019ee 3ac076f3 3ac0d425 3ac13183     ...:.v.:%..:.1.:
24021ad0:	3ac18f10 3ac1ecc9 3ac24ab0 3ac2a8c4     ...:...:.J.:...:
24021ae0:	3ac30706 3ac36576 3ac3c413 3ac422de     ...:ve.:...:.".:
24021af0:	3ac481d7 3ac4e0fe 3ac54053 3ac59fd6     ...:...:S@.:...:
24021b00:	3ac5ff88 3ac65f67 3ac6bf75 3ac71fb2     ...:g_.:u..:...:
24021b10:	3ac7801d 3ac7e0b7 3ac84180 3ac8a278     ...:...:.A.:x..:
24021b20:	3ac9039e 3ac964f4 3ac9c679 3aca282d     ...:.d.:y..:-(.:
24021b30:	3aca8a10 3acaec23 3acb4e65 3acbb0d7     ...:#..:eN.:...:
24021b40:	3acc1378 3acc7649 3accd94a 3acd3c7b     x..:Iv.:J..:{<.:
24021b50:	3acd9fdc 3ace036d 3ace672f 3acecb20     ...:m..:/g.: ..:
24021b60:	3acf2f42 3acf9395 3acff818 3ad05ccc     B/.:...:...:.\.:
24021b70:	3ad0c1b0 3ad126c6 3ad18c0c 3ad1f183     ...:.&.:...:...:
24021b80:	3ad2572c 3ad2bd06 3ad32311 3ad3894d     ,W.:...:.#.:M..:
24021b90:	3ad3efbb 3ad4565b 3ad4bd2c 3ad5242f     ...:[V.:,..:/$.:
24021ba0:	3ad58b64 3ad5f2cb 3ad65a64 3ad6c22f     d..:...:dZ.:/..:
24021bb0:	3ad72a2c 3ad7925c 3ad7fabe 3ad86353     ,*.:\..:...:Sc.:
24021bc0:	3ad8cc1a 3ad93514 3ad99e41 3ada07a1     ...:.5.:A..:...:
24021bd0:	3ada7134 3adadafa 3adb44f3 3adbaf20     4q.:...:.D.: ..:
24021be0:	3adc1980 3adc8413 3adceeda 3add59d5     ...:...:...:.Y.:
24021bf0:	3addc504 3ade3066 3ade9bfd 3adf07c7     ...:f0.:...:...:
24021c00:	3adf73c6 3adfdff9 3ae04c60 3ae0b8fc     .s.:...:`L.:...:
24021c10:	3ae125cd 3ae192d2 3ae2000c 3ae26d7b     .%.:...:...:{m.:
24021c20:	3ae2db1f 3ae348f8 3ae3b706 3ae4254a     ...:.H.:...:J%.:
24021c30:	3ae493c2 3ae50271 3ae57155 3ae5e06e     ...:q..:Uq.:n..:
24021c40:	3ae64fbe 3ae6bf43 3ae72efe 3ae79ef0     .O.:C..:...:...:
24021c50:	3ae80f17 3ae87f75 3ae8f00a 3ae960d5     ...:u..:...:.`.:
24021c60:	3ae9d1d6 3aea430e 3aeab47d 3aeb2623     ...:.C.:}..:#&.:
24021c70:	3aeb9800 3aec0a14 3aec7c60 3aeceee2     ...:...:`|.:...:
24021c80:	3aed619d 3aedd48e 3aee47b8 3aeebb19     .a.:...:.G.:...:
24021c90:	3aef2eb2 3aefa283 3af0168c 3af08acd     ...:...:...:...:
24021ca0:	3af0ff47 3af173f9 3af1e8e3 3af25e06     G..:.s.:...:.^.:
24021cb0:	3af2d362 3af348f6 3af3bec4 3af434ca     b..:.H.:...:.4.:
24021cc0:	3af4ab0a 3af52183 3af59836 3af60f21     ...:.!.:6..:!..:
24021cd0:	3af68647 3af6fda6 3af7753f 3af7ed12     G..:...:?u.:...:
24021ce0:	3af8651e 3af8dd65 3af955e7 3af9cea2     .e.:e..:.U.:...:
24021cf0:	3afa4798 3afac0c9 3afb3a34 3afbb3da     .G.:...:4:.:...:
24021d00:	3afc2dbb 3afca7d7 3afd222e 3afd9cc0     .-.:...:.".:...:
24021d10:	3afe178e 3afe9297 3aff0ddc 3aff895d     ...:...:...:]..:
24021d20:	3b00028c 3b004088 3b007ea3 3b00bcdb     ...;.@.;.~.;...;
24021d30:	3b00fb31 3b0139a5 3b017838 3b01b6e9     1..;.9.;8x.;...;
24021d40:	3b01f5b9 3b0234a6 3b0273b3 3b02b2dd     ...;.4.;.s.;...;
24021d50:	3b02f227 3b03318f 3b037115 3b03b0bb     '..;.1.;.q.;...;
24021d60:	3b03f07f 3b043062 3b047065 3b04b086     ...;b0.;ep.;...;
24021d70:	3b04f0c6 3b053125 3b0571a4 3b05b241     ...;%1.;.q.;A..;
24021d80:	3b05f2fe 3b0633da 3b0674d6 3b06b5f1     ...;.3.;.t.;...;
24021d90:	3b06f72c 3b073886 3b077a00 3b07bb9a     ,..;.8.;.z.;...;
24021da0:	3b07fd53 3b083f2d 3b088126 3b08c33f     S..;-?.;&..;?..;
24021db0:	3b090578 3b0947d1 3b098a4a 3b09cce4     x..;.G.;J..;...;
24021dc0:	3b0a0f9d 3b0a5277 3b0a9572 3b0ad88d     ...;wR.;r..;...;
24021dd0:	3b0b1bc8 3b0b5f24 3b0ba2a0 3b0be63d     ...;$_.;...;=..;
24021de0:	3b0c29fb 3b0c6dda 3b0cb1d9 3b0cf5fa     .).;.m.;...;...;
24021df0:	3b0d3a3b 3b0d7e9e 3b0dc322 3b0e07c6     ;:.;.~.;"..;...;
24021e00:	3b0e4c8c 3b0e9174 3b0ed67d 3b0f1ba7     .L.;t..;}..;...;
24021e10:	3b0f60f2 3b0fa65f 3b0febee 3b10319f     .`.;_..;...;.1.;
24021e20:	3b107771 3b10bd65 3b11037b 3b1149b3     qw.;e..;{..;.I.;
24021e30:	3b11900d 3b11d689 3b121d27 3b1263e7     ...;...;'..;.c.;
24021e40:	3b12aac9 3b12f1ce 3b1338f5 3b13803f     ...;...;.8.;?..;
24021e50:	3b13c7ab 3b140f3a 3b1456ec 3b149ec0     ...;:..;.V.;...;
24021e60:	3b14e6b7 3b152ed0 3b15770d 3b15bf6d     ...;...;.w.;m..;
24021e70:	3b1607ef 3b165095 3b16995e 3b16e24a     ...;.P.;^..;J..;
24021e80:	3b172b5a 3b17748d 3b17bde3 3b18075d     Z+.;.t.;...;]..;
24021e90:	3b1850fb 3b189abc 3b18e4a1 3b192ea9     .P.;...;...;...;
24021ea0:	3b1978d6 3b19c326 3b1a0d9a 3b1a5833     .x.;&..;...;3X.;
24021eb0:	3b1aa2ef 3b1aedd0 3b1b38d5 3b1b83fe     ...;...;.8.;...;
24021ec0:	3b1bcf4c 3b1c1abe 3b1c6655 3b1cb210     L..;...;Uf.;...;
24021ed0:	3b1cfdf0 3b1d49f5 3b1d961e 3b1de26d     ...;.I.;...;m..;
24021ee0:	3b1e2ee0 3b1e7b78 3b1ec836 3b1f1518     ...;x{.;6..;...;
24021ef0:	3b1f6220 3b1faf4d 3b1ffca0 3b204a18      b.;M..;...;.J ;
24021f00:	3b2097b5 3b20e578 3b213361 3b21816f     .. ;x. ;a3!;o.!;
24021f10:	3b21cfa4 3b221dfe 3b226c7e 3b22bb24     ..!;..";~l";$.";
24021f20:	3b2309f0 3b2358e2 3b23a7fb 3b23f739     ..#;.X#;..#;9.#;
24021f30:	3b24469f 3b24962a 3b24e5dc 3b2535b5     .F$;*.$;..$;.5%;
24021f40:	3b2585b4 3b25d5db 3b262628 3b26769b     ..%;..%;(&&;.v&;
24021f50:	3b26c736 3b2717f8 3b2768e1 3b27b9f1     6.&;..';.h';..';
24021f60:	3b280b28 3b285c87 3b28ae0d 3b28ffbb     (.(;.\(;..(;..(;
24021f70:	3b295190 3b29a38c 3b29f5b1 3b2a47fd     .Q);..);..);.G*;
24021f80:	3b2a9a71 3b2aed0d 3b2b3fd1 3b2b92bd     q.*;..*;.?+;..+;
24021f90:	3b2be5d1 3b2c390e 3b2c8c72 3b2ce000     ..+;.9,;r.,;..,;
24021fa0:	3b2d33b5 3b2d8793 3b2ddb9a 3b2e2fc9     .3-;..-;..-;./.;
24021fb0:	3b2e8422 3b2ed8a3 3b2f2d4c 3b2f821f     "..;...;L-/;../;
24021fc0:	3b2fd71b 3b302c41 3b30818f 3b30d707     ../;A,0;..0;..0;
24021fd0:	3b312ca8 3b318272 3b31d866 3b322e84     .,1;r.1;f.1;..2;
24021fe0:	3b3284cb 3b32db3d 3b3331d8 3b33889d     ..2;=.2;.13;..3;
24021ff0:	3b33df8c 3b3436a5 3b348de8 3b34e556     ..3;.64;..4;V.4;
24022000:	3b353ced 3b3594b0 3b35ec9c 3b3644b4     .<5;..5;..5;.D6;
24022010:	3b369cf6 3b36f562 3b374dfa 3b37a6bc     ..6;b.6;.M7;..7;
24022020:	3b37ffaa 3b3858c2 3b38b206 3b390b75     ..7;.X8;..8;u.9;
24022030:	3b39650f 3b39bed5 3b3a18c6 3b3a72e2     .e9;..9;..:;.r:;
24022040:	3b3acd2a 3b3b279e 3b3b823e 3b3bdd0a     *.:;.';;>.;;..;;
24022050:	3b3c3801 3b3c9325 3b3cee74 3b3d49f0     .8<;%.<;t.<;.I=;
24022060:	3b3da599 3b3e016d 3b3e5d6e 3b3eb99c     ..=;m.>;n]>;..>;
24022070:	3b3f15f6 3b3f727d 3b3fcf31 3b402c12     ..?;}r?;1.?;.,@;
24022080:	3b408920 3b40e65a 3b4143c2 3b41a157      .@;Z.@;.CA;W.A;
24022090:	3b41ff1a 3b425d0a 3b42bb27 3b431972     ..A;.]B;'.B;r.C;
240220a0:	3b4377ea 3b43d691 3b443565 3b449467     .wC;..C;e5D;g.D;
240220b0:	3b44f397 3b4552f5 3b45b281 3b46123c     ..D;.RE;..E;<.F;
240220c0:	3b467225 3b46d23c 3b473282 3b4792f7     %rF;<.F;.2G;..G;
240220d0:	3b47f39a 3b48546c 3b48b56d 3b49169d     ..G;lTH;m.H;..I;
240220e0:	3b4977fc 3b49d98a 3b4a3b47 3b4a9d34     .wI;..I;G;J;4.J;
240220f0:	3b4aff50 3b4b619b 3b4bc416 3b4c26c1     P.J;.aK;..K;.&L;
24022100:	3b4c899c 3b4ceca6 3b4d4fe1 3b4db34b     ..L;..L;.OM;K.M;
24022110:	3b4e16e6 3b4e7ab1 3b4edeac 3b4f42d8     ..N;.zN;..N;.BO;
24022120:	3b4fa734 3b500bc1 3b50707e 3b50d56c     4.O;..P;~pP;l.P;
24022130:	3b513a8b 3b519fdb 3b52055c 3b526b0f     .:Q;..Q;\.R;.kR;
24022140:	3b52d0f2 3b533707 3b539d4d 3b5403c5     ..R;.7S;M.S;..T;
24022150:	3b546a6e 3b54d14a 3b553857 3b559f95     njT;J.T;W8U;..U;
24022160:	3b560706 3b566ea9 3b56d67e 3b573e85     ..V;.nV;~.V;.>W;
24022170:	3b57a6bf 3b580f2b 3b5877ca 3b58e09c     ..W;+.X;.wX;..X;
24022180:	3b5949a0 3b59b2d7 3b5a1c41 3b5a85de     .IY;..Y;A.Z;..Z;
24022190:	3b5aefae 3b5b59b1 3b5bc3e8 3b5c2e52     ..Z;.Y[;..[;R.\;
240221a0:	3b5c98f0 3b5d03c1 3b5d6ec6 3b5dd9ff     ..\;..];.n];..];
240221b0:	3b5e456c 3b5eb10d 3b5f1ce2 3b5f88eb     lE^;..^;.._;.._;
240221c0:	3b5ff528 3b60619a 3b60ce41 3b613b1c     (._;.a`;A.`;.;a;
240221d0:	3b61a82b 3b621570 3b6282e9 3b62f098     +.a;p.b;..b;..b;
240221e0:	3b635e7b 3b63cc94 3b643ae2 3b64a966     {^c;..c;.:d;f.d;
240221f0:	3b65181f 3b65870d 3b65f631 3b66658c     ..e;..e;1.e;.ef;
24022200:	3b66d51c 3b6744e2 3b67b4de 3b682510     ..f;.Dg;..g;.%h;
24022210:	3b689579 3b690618 3b6976ee 3b69e7fa     y.h;..i;.vi;..i;
24022220:	3b6a593e 3b6acab8 3b6b3c68 3b6bae50     >Yj;..j;h<k;P.k;
24022230:	3b6c2070 3b6c92c6 3b6d0554 3b6d7819     p l;..l;T.m;.xm;
24022240:	3b6deb16 3b6e5e4a 3b6ed1b6 3b6f455a     ..m;J^n;..n;ZEo;
24022250:	3b6fb937 3b702d4b 3b70a197 3b71161c     7.o;K-p;..p;..q;
24022260:	3b718ad9 3b71ffcf 3b7274fd 3b72ea64     ..q;..q;.tr;d.r;
24022270:	3b736004 3b73d5dd 3b744bef 3b74c23a     .`s;..s;.Kt;:.t;
24022280:	3b7538bf 3b75af7d 3b762674 3b769da5     .8u;}.u;t&v;..v;
24022290:	3b77150f 3b778cb4 3b780492 3b787cab     ..w;..w;..x;.|x;
240222a0:	3b78f4fd 3b796d8a 3b79e651 3b7a5f53     ..x;.my;Q.y;S_z;
240222b0:	3b7ad88f 3b7b5206 3b7bcbb8 3b7c45a5     ..z;.R{;..{;.E|;
240222c0:	3b7cbfcd 3b7d3a30 3b7db4ce 3b7e2fa8     ..|;0:};..};./~;
240222d0:	3b7eaabd 3b7f260d 3b7fa19a 3b800eb1     ..~;.&.;...;...;
240222e0:	3b804cb3 3b808ad3 3b80c911 3b81076e     .L.;...;...;n..;
240222f0:	3b8145e8 3b818481 3b81c338 3b82020d     .E.;...;8..;...;
24022300:	3b824101 3b828014 3b82bf45 3b82fe94     .A.;...;E..;...;
24022310:	3b833e02 3b837d8f 3b83bd3b 3b83fd05     .>.;.}.;;..;...;
24022320:	3b843cef 3b847cf7 3b84bd1e 3b84fd65     .<.;.|.;...;e..;
24022330:	3b853dca 3b857e4f 3b85bef3 3b85ffb6     .=.;O~.;...;...;
24022340:	3b864099 3b86819b 3b86c2bc 3b8703fd     .@.;...;...;...;
24022350:	3b87455e 3b8786de 3b87c87e 3b880a3e     ^E.;...;~..;>..;
24022360:	3b884c1e 3b888e1d 3b88d03d 3b89127c     .L.;...;=..;|..;
24022370:	3b8954dc 3b89975c 3b89d9fb 3b8a1cbc     .T.;\..;...;...;
24022380:	3b8a5f9c 3b8aa29d 3b8ae5be 3b8b2900     ._.;...;...;.).;
24022390:	3b8b6c63 3b8bafe6 3b8bf389 3b8c374e     cl.;...;...;N7.;
240223a0:	3b8c7b33 3b8cbf39 3b8d0361 3b8d47a9     3{.;9..;a..;.G.;
240223b0:	3b8d8c12 3b8dd09c 3b8e1548 3b8e5a14     ...;...;H..;.Z.;
240223c0:	3b8e9f02 3b8ee412 3b8f2943 3b8f6e95     ...;...;C).;.n.;
240223d0:	3b8fb409 3b8ff99f 3b903f56 3b90852f     ...;...;V?.;/..;
240223e0:	3b90cb2a 3b911147 3b915785 3b919de6     *..;G..;.W.;...;
240223f0:	3b91e469 3b922b0e 3b9271d5 3b92b8bf     i..;.+.;.q.;...;
24022400:	3b92ffca 3b9346f8 3b938e49 3b93d5bc     ...;.F.;I..;...;
24022410:	3b941d52 3b94650b 3b94ace6 3b94f4e4     R..;.e.;...;...;
24022420:	3b953d04 3b958548 3b95cdaf 3b961639     .=.;H..;...;9..;
24022430:	3b965ee6 3b96a7b6 3b96f0a9 3b9739c0     .^.;...;...;.9.;
24022440:	3b9782fa 3b97cc58 3b9815d9 3b985f7d     ...;X..;...;}_.;
24022450:	3b98a946 3b98f332 3b993d42 3b998775     F..;2..;B=.;u..;
24022460:	3b99d1cd 3b9a1c49 3b9a66e8 3b9ab1ac     ...;I..;.f.;...;
24022470:	3b9afc94 3b9b47a1 3b9b92d1 3b9bde26     ...;.G.;...;&..;
24022480:	3b9c29a0 3b9c753e 3b9cc101 3b9d0ce8     .).;>u.;...;...;
24022490:	3b9d58f4 3b9da525 3b9df17b 3b9e3df6     .X.;%..;{..;.=.;
240224a0:	3b9e8a96 3b9ed75b 3b9f2445 3b9f7155     ...;[..;E$.;Uq.;
240224b0:	3b9fbe89 3ba00be3 3ba05963 3ba0a708     ...;...;cY.;...;
240224c0:	3ba0f4d3 3ba142c3 3ba190d9 3ba1df15     ...;.B.;...;...;
240224d0:	3ba22d77 3ba27bff 3ba2caad 3ba31980     w-.;.{.;...;...;
240224e0:	3ba3687b 3ba3b79b 3ba406e1 3ba4564e     {h.;...;...;NV.;
240224f0:	3ba4a5e2 3ba4f59c 3ba5457d 3ba59584     ...;...;}E.;...;
24022500:	3ba5e5b2 3ba63607 3ba68683 3ba6d725     ...;.6.;...;%..;
24022510:	3ba727ef 3ba778e0 3ba7c9f8 3ba81b37     .'.;.x.;...;7..;
24022520:	3ba86c9e 3ba8be2c 3ba90fe2 3ba961bf     .l.;,..;...;.a.;
24022530:	3ba9b3c4 3baa05f1 3baa5845 3baaaac1     ...;...;EX.;...;
24022540:	3baafd65 3bab5031 3baba326 3babf642     e..;1P.;&..;B..;
24022550:	3bac4987 3bac9cf4 3bacf089 3bad4447     .I.;...;...;GD.;
24022560:	3bad982e 3badec3d 3bae4074 3bae94d5     ...;=..;t@.;...;
24022570:	3baee95e 3baf3e11 3baf92ec 3bafe7f1     ^..;.>.;...;...;
24022580:	3bb03d1e 3bb09275 3bb0e7f5 3bb13d9f     .=.;u..;...;.=.;
24022590:	3bb19372 3bb1e96f 3bb23f95 3bb295e5     r..;o..;.?.;...;
240225a0:	3bb2ec5f 3bb34302 3bb399d0 3bb3f0c8     _..;.C.;...;...;
240225b0:	3bb447e9 3bb49f35 3bb4f6ac 3bb54e4c     .G.;5..;...;LN.;
240225c0:	3bb5a617 3bb5fe0d 3bb6562d 3bb6ae78     ...;...;-V.;x..;
240225d0:	3bb706ed 3bb75f8e 3bb7b859 3bb8114f     ...;._.;Y..;O..;
240225e0:	3bb86a71 3bb8c3bd 3bb91d35 3bb976d8     qj.;...;5..;.v.;
240225f0:	3bb9d0a7 3bba2aa1 3bba84c6 3bbadf17     ...;.*.;...;...;
24022600:	3bbb3994 3bbb943d 3bbbef12 3bbc4a13     .9.;=..;...;.J.;
24022610:	3bbca53f 3bbd0098 3bbd5c1d 3bbdb7cf     ?..;...;.\.;...;
24022620:	3bbe13ad 3bbe6fb7 3bbecbee 3bbf2851     ...;.o.;...;Q(.;
24022630:	3bbf84e2 3bbfe19f 3bc03e89 3bc09ba0     ...;...;.>.;...;
24022640:	3bc0f8e4 3bc15655 3bc1b3f4 3bc211c0     ...;UV.;...;...;
24022650:	3bc26fb9 3bc2cde0 3bc32c34 3bc38ab6     .o.;...;4,.;...;
24022660:	3bc3e966 3bc44844 3bc4a74f 3bc50689     f..;DH.;O..;...;
24022670:	3bc565f1 3bc5c587 3bc6254b 3bc6853d     .e.;...;K%.;=..;
24022680:	3bc6e55f 3bc745ae 3bc7a62c 3bc806d9     _..;.E.;,..;...;
24022690:	3bc867b5 3bc8c8c0 3bc929fa 3bc98b62     .g.;...;.).;b..;
240226a0:	3bc9ecfa 3bca4ec2 3bcab0b8 3bcb12de     ...;.N.;...;...;
240226b0:	3bcb7534 3bcbd7b9 3bcc3a6e 3bcc9d52     4u.;...;n:.;R..;
240226c0:	3bcd0067 3bcd63ac 3bcdc720 3bce2ac5     g..;.c.; ..;.*.;
240226d0:	3bce8e9a 3bcef29f 3bcf56d5 3bcfbb3b     ...;...;.V.;;..;
240226e0:	3bd01fd2 3bd0849a 3bd0e992 3bd14ebc     ...;...;...;.N.;
240226f0:	3bd1b416 3bd219a2 3bd27f5e 3bd2e54c     ...;...;^..;L..;
24022700:	3bd34b6b 3bd3b1bc 3bd4183e 3bd47ef2     kK.;...;>..;.~.;
24022710:	3bd4e5d8 3bd54cef 3bd5b438 3bd61bb4     ...;.L.;8..;...;
24022720:	3bd68361 3bd6eb41 3bd75353 3bd7bb97     a..;A..;SS.;...;
24022730:	3bd8240e 3bd88cb8 3bd8f594 3bd95ea3     .$.;...;...;.^.;
24022740:	3bd9c7e5 3bda3159 3bda9b01 3bdb04dc     ...;Y1.;...;...;
24022750:	3bdb6eea 3bdbd92c 3bdc43a1 3bdcae4a     .n.;,..;.C.;J..;
24022760:	3bdd1926 3bdd8436 3bddef7a 3bde5af2     &..;6..;z..;.Z.;
24022770:	3bdec69e 3bdf327e 3bdf9e92 3be00adb     ...;~2.;...;...;
24022780:	3be07758 3be0e409 3be150ef 3be1be0a     Xw.;...;.P.;...;
24022790:	3be22b5a 3be298df 3be30698 3be37487     Z+.;...;...;.t.;
240227a0:	3be3e2ab 3be45105 3be4bf94 3be52e58     ...;.Q.;...;X..;
240227b0:	3be59d52 3be60c82 3be67be8 3be6eb83     R..;...;.{.;...;
240227c0:	3be75b55 3be7cb5d 3be83b9b 3be8ac0f     U[.;]..;.;.;...;
240227d0:	3be91cba 3be98d9c 3be9feb4 3bea7002     ...;...;...;.p.;
240227e0:	3beae188 3beb5345 3bebc539 3bec3764     ...;ES.;9..;d7.;
240227f0:	3beca9c6 3bed1c60 3bed8f31 3bee0239     ...;`..;1..;9..;
24022800:	3bee757a 3beee8f2 3bef5ca2 3befd08b     zu.;...;.\.;...;
24022810:	3bf044ab 3bf0b903 3bf12d94 3bf1a25e     .D.;...;.-.;^..;
24022820:	3bf21760 3bf28c9a 3bf3020e 3bf377ba     `..;...;...;.w.;
24022830:	3bf3ed9f 3bf463bd 3bf4da15 3bf550a6     ...;.c.;...;.P.;
24022840:	3bf5c770 3bf63e74 3bf6b5b1 3bf72d28     p..;t>.;...;(-.;
24022850:	3bf7a4d9 3bf81cc4 3bf894e9 3bf90d48     ...;...;...;H..;
24022860:	3bf985e2 3bf9feb6 3bfa77c4 3bfaf10d     ...;...;.w.;...;
24022870:	3bfb6a91 3bfbe450 3bfc5e49 3bfcd87e     .j.;P..;I^.;~..;
24022880:	3bfd52ee 3bfdcd99 3bfe487f 3bfec3a2     .R.;...;.H.;...;
24022890:	3bff3eff 3bffba99 3c001b37 3c005940     .>.;...;7..<@Y.<
240228a0:	3c009766 3c00d5ab 3c01140e 3c01528f     f..<...<...<.R.<
240228b0:	3c01912e 3c01cfec 3c020ec8 3c024dc3     ...<...<...<.M.<
240228c0:	3c028cdc 3c02cc14 3c030b6a 3c034adf     ...<...<j..<.J.<
240228d0:	3c038a72 3c03ca25 3c0409f6 3c0449e6     r..<%..<...<.I.<
240228e0:	3c0489f5 3c04ca23 3c050a71 3c054add     ...<#..<q..<.J.<
240228f0:	3c058b69 3c05cc14 3c060cde 3c064dc7     i..<...<...<.M.<
24022900:	3c068ed0 3c06cff9 3c071141 3c0752a8     ...<...<A..<.R.<
24022910:	3c079430 3c07d5d7 3c08179d 3c085984     0..<...<...<.Y.<
24022920:	3c089b8b 3c08ddb1 3c091ff8 3c09625f     ...<...<...<_b.<
24022930:	3c09a4e6 3c09e78d 3c0a2a54 3c0a6d3c     ...<...<T*.<<m.<
24022940:	3c0ab044 3c0af36c 3c0b36b5 3c0b7a1f     D..<l..<.6.<.z.<
24022950:	3c0bbda9 3c0c0154 3c0c4520 3c0c890d     ...<T..< E.<...<
24022960:	3c0ccd1a 3c0d1149 3c0d5598 3c0d9a09     ...<I..<.U.<...<
24022970:	3c0dde9b 3c0e234e 3c0e6822 3c0ead17     ...<N#.<"h.<...<
24022980:	3c0ef22e 3c0f3767 3c0f7cc1 3c0fc23c     ...<g7.<.|.<<..<
24022990:	3c1007d9 3c104d98 3c109379 3c10d97b     ...<.M.<y..<{..<
240229a0:	3c111fa0 3c1165e6 3c11ac4f 3c11f2d9     ...<.e.<O..<...<
240229b0:	3c123986 3c128055 3c12c746 3c130e59     .9.<U..<F..<Y..<
240229c0:	3c13558f 3c139ce8 3c13e463 3c142c00     .U.<...<c..<.,.<
240229d0:	3c1473c1 3c14bba4 3c1503aa 3c154bd2     .s.<...<...<.K.<
240229e0:	3c15941e 3c15dc8d 3c16251f 3c166dd3     ...<...<.%.<.m.<
240229f0:	3c16b6ac 3c16ffa7 3c1748c6 3c179208     ...<...<.H.<...<
24022a00:	3c17db6e 3c1824f7 3c186ea4 3c18b874     n..<.$.<.n.<t..<
24022a10:	3c190268 3c194c80 3c1996bc 3c19e11c     h..<.L.<...<...<
24022a20:	3c1a2ba0 3c1a7648 3c1ac114 3c1b0c05     .+.<Hv.<...<...<
24022a30:	3c1b5719 3c1ba252 3c1bedb0 3c1c3932     .W.<R..<...<29.<
24022a40:	3c1c84d8 3c1cd0a4 3c1d1c93 3c1d68a8     ...<...<...<.h.<
24022a50:	3c1db4e2 3c1e0140 3c1e4dc3 3c1e9a6c     ...<@..<.M.<l..<
24022a60:	3c1ee739 3c1f342c 3c1f8144 3c1fce82     9..<,4.<D..<...<
24022a70:	3c201be4 3c20696d 3c20b71b 3c2104ee     .. <mi <.. <..!<
24022a80:	3c2152e7 3c21a106 3c21ef4b 3c223db5     .R!<..!<K.!<.="<
24022a90:	3c228c46 3c22dafd 3c2329d9 3c2378dc     F."<.."<.)#<.x#<
24022aa0:	3c23c806 3c241755 3c2466cb 3c24b668     ..#<U.$<.f$<h.$<
24022ab0:	3c25062b 3c255615 3c25a625 3c25f65c     +.%<.V%<%.%<\.%<
24022ac0:	3c2646ba 3c26973f 3c26e7eb 3c2738be     .F&<?.&<..&<.8'<
24022ad0:	3c2789b8 3c27dad9 3c282c22 3c287d92     ..'<..'<",(<.}(<
24022ae0:	3c28cf29 3c2920e8 3c2972cf 3c29c4dd     ).(<. )<.r)<..)<
24022af0:	3c2a1713 3c2a6971 3c2abbf7 3c2b0ea4     ..*<qi*<..*<..+<
24022b00:	3c2b617a 3c2bb478 3c2c079e 3c2c5aec     za+<x.+<..,<.Z,<
24022b10:	3c2cae63 3c2d0202 3c2d55c9 3c2da9b9     c.,<..-<.U-<..-<
24022b20:	3c2dfdd2 3c2e5214 3c2ea67e 3c2efb11     ..-<.R.<~..<...<
24022b30:	3c2f4fcd 3c2fa4b3 3c2ff9c1 3c304ef8     .O/<../<../<.N0<
24022b40:	3c30a459 3c30f9e3 3c314f97 3c31a574     Y.0<..0<.O1<t.1<
24022b50:	3c31fb7b 3c3251ab 3c32a805 3c32fe89     {.1<.Q2<..2<..2<
24022b60:	3c335537 3c33ac0e 3c340310 3c345a3c     7U3<..3<..4<<Z4<
24022b70:	3c34b192 3c350913 3c3560be 3c35b893     ..4<..5<.`5<..5<
24022b80:	3c361093 3c3668bd 3c36c113 3c371993     ..6<.h6<..6<..7<
24022b90:	3c37723e 3c37cb13 3c382414 3c387d40     >r7<..7<.$8<@}8<
24022ba0:	3c38d697 3c39301a 3c3989c7 3c39e3a0     ..8<.09<..9<..9<
24022bb0:	3c3a3da5 3c3a97d5 3c3af231 3c3b4cb9     .=:<..:<1.:<.L;<
24022bc0:	3c3ba76d 3c3c024c 3c3c5d58 3c3cb88f     m.;<L.<<X]<<..<<
24022bd0:	3c3d13f3 3c3d6f83 3c3dcb40 3c3e2729     ..=<.o=<@.=<)'><
24022be0:	3c3e833e 3c3edf80 3c3f3bef 3c3f988a     >.><..><.;?<..?<
24022bf0:	3c3ff552 3c405247 3c40af6a 3c410cb9     R.?<GR@<j.@<..A<
24022c00:	3c416a36 3c41c7df 3c4225b7 3c4283bb     6jA<..A<.%B<..B<
24022c10:	3c42e1ed 3c43404d 3c439edb 3c43fd96     ..B<M@C<..C<..C<
24022c20:	3c445c7f 3c44bb96 3c451adc 3c457a4f     .\D<..D<..E<OzE<
24022c30:	3c45d9f1 3c4639c0 3c4699bf 3c46f9ec     ..E<.9F<..F<..F<
24022c40:	3c475a47 3c47bad1 3c481b8a 3c487c72     GZG<..G<..H<r|H<
24022c50:	3c48dd88 3c493ece 3c49a043 3c4a01e7     ..H<.>I<C.I<..J<
24022c60:	3c4a63ba 3c4ac5bd 3c4b27ef 3c4b8a50     .cJ<..J<.'K<P.K<
24022c70:	3c4bece2 3c4c4fa3 3c4cb294 3c4d15b4     ..K<.OL<..L<..M<
24022c80:	3c4d7905 3c4ddc86 3c4e4037 3c4ea419     .yM<..M<7@N<..N<
24022c90:	3c4f082b 3c4f6c6d 3c4fd0e0 3c503583     +.O<mlO<..O<.5P<
24022ca0:	3c509a58 3c50ff5d 3c516493 3c51c9fa     X.P<].P<.dQ<..Q<
24022cb0:	3c522f92 3c52955b 3c52fb56 3c536182     ./R<[.R<V.R<.aS<
24022cc0:	3c53c7e0 3c542e6f 3c54952f 3c54fc22     ..S<o.T</.T<".T<
24022cd0:	3c556347 3c55ca9d 3c563225 3c5699e0     GcU<..U<%2V<..V<
24022ce0:	3c5701cd 3c5769ec 3c57d23e 3c583ac2     ..W<.iW<>.W<.:X<
24022cf0:	3c58a379 3c590c62 3c59757f 3c59dece     y.X<b.Y<.uY<..Y<
24022d00:	3c5a4850 3c5ab206 3c5b1bee 3c5b860a     PHZ<..Z<..[<..[<
24022d10:	3c5bf059 3c5c5adc 3c5cc592 3c5d307c     Y.[<.Z\<..\<|0]<
24022d20:	3c5d9b9a 3c5e06ec 3c5e7272 3c5ede2b     ..]<..^<rr^<+.^<
24022d30:	3c5f4a19 3c5fb63c 3c602292 3c608f1d     .J_<<._<."`<..`<
24022d40:	3c60fbdd 3c6168d2 3c61d5fb 3c624359     ..`<.ha<..a<YCb<
24022d50:	3c62b0ec 3c631eb4 3c638cb1 3c63fae4     ..b<..c<..c<..c<
24022d60:	3c64694c 3c64d7e9 3c6546bc 3c65b5c5     Lid<..d<.Fe<..e<
24022d70:	3c662503 3c669477 3c670422 3c677402     .%f<w.f<".g<.tg<
24022d80:	3c67e419 3c685466 3c68c4e9 3c6935a3     ..g<fTh<..h<.5i<
24022d90:	3c69a693 3c6a17ba 3c6a8918 3c6afaad     ..i<..j<..j<..j<
24022da0:	3c6b6c79 3c6bde7c 3c6c50b6 3c6cc328     ylk<|.k<.Pl<(.l<
24022db0:	3c6d35d1 3c6da8b1 3c6e1bca 3c6e8f1a     .5m<..m<..n<..n<
24022dc0:	3c6f02a1 3c6f7661 3c6fea59 3c705e89     ..o<avo<Y.o<.^p<
24022dd0:	3c70d2f1 3c714792 3c71bc6b 3c72317d     ..p<.Gq<k.q<}1r<
24022de0:	3c72a6c8 3c731c4b 3c739207 3c7407fd     ..r<K.s<..s<..t<
24022df0:	3c747e2b 3c74f493 3c756b34 3c75e20e     +~t<..t<4ku<..u<
24022e00:	3c765922 3c76d070 3c7747f8 3c77bfb9     "Yv<p.v<.Gw<..w<
24022e10:	3c7837b5 3c78afea 3c79285a 3c79a104     .7x<..x<Z(y<..y<
24022e20:	3c7a19e9 3c7a9308 3c7b0c62 3c7b85f7     ..z<..z<b.{<..{<
24022e30:	3c7bffc6 3c7c79d1 3c7cf417 3c7d6e98     ..{<.y|<..|<.n}<
24022e40:	3c7de954 3c7e644c 3c7edf7f 3c7f5aee     T.}<Ld~<..~<.Z.<
24022e50:	3c7fd699 3c802940 3c806751 3c80a581     ...<@).<Qg.<...<
24022e60:	3c80e3ce 3c81223a 3c8160c4 3c819f6c     ...<:".<.`.<l..<
24022e70:	3c81de33 3c821d18 3c825c1b 3c829b3e     3..<...<.\.<>..<
24022e80:	3c82da7e 3c8319dd 3c83595b 3c8398f8     ~..<...<[Y.<...<
24022e90:	3c83d8b4 3c84188e 3c845888 3c8498a0     ...<...<.X.<...<
24022ea0:	3c84d8d7 3c85192e 3c8559a4 3c859a39     ...<...<.Y.<9..<
24022eb0:	3c85daed 3c861bc0 3c865cb3 3c869dc6     ...<...<.\.<...<
24022ec0:	3c86def8 3c872049 3c8761ba 3c87a34b     ...<I .<.a.<K..<
24022ed0:	3c87e4fc 3c8826cc 3c8868bd 3c88aacd     ...<.&.<.h.<...<
24022ee0:	3c88ecfe 3c892f4e 3c8971be 3c89b44f     ...<N/.<.q.<O..<
24022ef0:	3c89f700 3c8a39d1 3c8a7cc3 3c8abfd5     ...<.9.<.|.<...<
24022f00:	3c8b0308 3c8b465b 3c8b89cf 3c8bcd63     ...<[F.<...<c..<
24022f10:	3c8c1118 3c8c54ee 3c8c98e5 3c8cdcfd     ...<.T.<...<...<
24022f20:	3c8d2136 3c8d658f 3c8daa0a 3c8deea7     6!.<.e.<...<...<
24022f30:	3c8e3364 3c8e7843 3c8ebd43 3c8f0264     d3.<Cx.<C..<d..<
24022f40:	3c8f47a7 3c8f8d0c 3c8fd292 3c901839     .G.<...<...<9..<
24022f50:	3c905e03 3c90a3ee 3c90e9fc 3c91302b     .^.<...<...<+0.<
24022f60:	3c91767c 3c91bcef 3c920385 3c924a3c     |v.<...<...<<J.<
24022f70:	3c929116 3c92d813 3c931f31 3c936672     ...<...<1..<rf.<
24022f80:	3c93add6 3c93f55c 3c943d05 3c9484d0     ...<\..<.=.<...<
24022f90:	3c94ccbf 3c9514d0 3c955d04 3c95a55b     ...<...<.].<[..<
24022fa0:	3c95edd5 3c963673 3c967f33 3c96c817     ...<s6.<3..<...<
24022fb0:	3c97111e 3c975a48 3c97a396 3c97ed07     ...<HZ.<...<...<
24022fc0:	3c98369c 3c988055 3c98ca31 3c991431     .6.<U..<1..<1..<
24022fd0:	3c995e55 3c99a89d 3c99f309 3c9a3d99     U^.<...<...<.=.<
24022fe0:	3c9a884d 3c9ad326 3c9b1e22 3c9b6943     M..<&..<"..<Ci.<
24022ff0:	3c9bb488 3c9bfff2 3c9c4b81 3c9c9734     ...<...<.K.<4..<
24023000:	3c9ce30b 3c9d2f08 3c9d7b29 3c9dc76f     ...<./.<){.<o..<
24023010:	3c9e13da 3c9e606a 3c9ead1f 3c9ef9f9     ...<j`.<...<...<
24023020:	3c9f46f9 3c9f941e 3c9fe168 3ca02ed8     .F.<...<h..<...<
24023030:	3ca07c6d 3ca0ca28 3ca11809 3ca1660f     m|.<(..<...<.f.<
24023040:	3ca1b43b 3ca2028d 3ca25105 3ca29fa3     ;..<...<.Q.<...<
24023050:	3ca2ee67 3ca33d51 3ca38c61 3ca3db98     g..<Q=.<a..<...<
24023060:	3ca42af5 3ca47a79 3ca4ca23 3ca519f4     .*.<yz.<#..<...<
24023070:	3ca569eb 3ca5ba09 3ca60a4e 3ca65aba     .i.<...<N..<.Z.<
24023080:	3ca6ab4d 3ca6fc07 3ca74ce8 3ca79df0     M..<...<.L.<...<
24023090:	3ca7ef20 3ca84077 3ca891f5 3ca8e39b      ..<w@.<...<...<
240230a0:	3ca93568 3ca9875d 3ca9d97a 3caa2bbe     h5.<]..<z..<.+.<
240230b0:	3caa7e2b 3caad0bf 3cab237b 3cab7660     +~.<...<{#.<`v.<
240230c0:	3cabc96c 3cac1ca1 3cac6ffe 3cacc384     l..<...<.o.<...<
240230d0:	3cad1732 3cad6b08 3cadbf08 3cae1330     2..<.k.<...<0..<
240230e0:	3cae6780 3caebbfa 3caf109d 3caf6568     .g.<...<...<he.<
240230f0:	3cafba5d 3cb00f7b 3cb064c2 3cb0ba32     ]..<{..<.d.<2..<
24023100:	3cb10fcc 3cb1658f 3cb1bb7c 3cb21193     ...<.e.<|..<...<
24023110:	3cb267d3 3cb2be3d 3cb314d1 3cb36b8f     .g.<=..<...<.k.<
24023120:	3cb3c277 3cb41989 3cb470c5 3cb4c82c     w..<...<.p.<,..<
24023130:	3cb51fbc 3cb57778 3cb5cf5e 3cb6276e     ...<xw.<^..<n'.<
24023140:	3cb67fa9 3cb6d80f 3cb730a0 3cb7895c     ...<...<.0.<\..<
24023150:	3cb7e242 3cb83b54 3cb89491 3cb8edf9     B..<T;.<...<...<
24023160:	3cb9478d 3cb9a14c 3cb9fb37 3cba554d     .G.<L..<7..<MU.<
24023170:	3cbaaf8e 3cbb09fc 3cbb6495 3cbbbf5a     ...<...<.d.<Z..<
24023180:	3cbc1a4c 3cbc7569 3cbcd0b2 3cbd2c28     L..<iu.<...<(,.<
24023190:	3cbd87ca 3cbde399 3cbe3f94 3cbe9bbb     ...<...<.?.<...<
240231a0:	3cbef80f 3cbf5490 3cbfb13e 3cc00e19     ...<.T.<>..<...<
240231b0:	3cc06b21 3cc0c856 3cc125b8 3cc18347     !k.<V..<.%.<G..<
240231c0:	3cc1e104 3cc23eee 3cc29d06 3cc2fb4b     ...<.>.<...<K..<
240231d0:	3cc359be 3cc3b85e 3cc4172d 3cc4762a     .Y.<^..<-..<*v.<
240231e0:	3cc4d554 3cc534ad 3cc59434 3cc5f3e9     T..<.4.<4..<...<
240231f0:	3cc653cd 3cc6b3df 3cc71420 3cc7748f     .S.<...< ..<.t.<
24023200:	3cc7d52d 3cc835fa 3cc896f6 3cc8f821     -..<.5.<...<!..<
24023210:	3cc9597b 3cc9bb05 3cca1cbd 3cca7ea5     {Y.<...<...<.~.<
24023220:	3ccae0bc 3ccb4303 3ccba57a 3ccc0820     ...<.C.<z..< ..<
24023230:	3ccc6af6 3ccccdfc 3ccd3132 3ccd9499     .j.<...<21.<...<
24023240:	3ccdf82f 3cce5bf6 3ccebfed 3ccf2414     /..<.[.<...<.$.<
24023250:	3ccf886c 3ccfecf5 3cd051ae 3cd0b699     l..<...<.Q.<...<
24023260:	3cd11bb4 3cd18100 3cd1e67d 3cd24c2c     ...<...<}..<,L.<
24023270:	3cd2b20c 3cd3181d 3cd37e60 3cd3e4d4     ...<...<`~.<...<
24023280:	3cd44b7a 3cd4b252 3cd5195b 3cd58097     zK.<R..<[..<...<
24023290:	3cd5e804 3cd64fa4 3cd6b776 3cd71f7b     ...<.O.<v..<{..<
240232a0:	3cd787b1 3cd7f01b 3cd858b7 3cd8c185     ...<...<.X.<...<
240232b0:	3cd92a87 3cd993bb 3cd9fd23 3cda66bd     .*.<...<#..<.f.<
240232c0:	3cdad08b 3cdb3a8c 3cdba4c1 3cdc0f29     ...<.:.<...<)..<
240232d0:	3cdc79c4 3cdce493 3cdd4f96 3cddbacd     .y.<...<.O.<...<
240232e0:	3cde2638 3cde91d7 3cdefdab 3cdf69b2     8&.<...<...<.i.<
240232f0:	3cdfd5ee 3ce0425e 3ce0af03 3ce11bdd     ...<^B.<...<...<
24023300:	3ce188eb 3ce1f62f 3ce263a7 3ce2d154     ...</..<.c.<T..<
24023310:	3ce33f37 3ce3ad4f 3ce41b9c 3ce48a1f     7?.<O..<...<...<
24023320:	3ce4f8d7 3ce567c5 3ce5d6e9 3ce64643     ...<.g.<...<CF.<
24023330:	3ce6b5d3 3ce72599 3ce79595 3ce805c7     ...<.%.<...<...<
24023340:	3ce87630 3ce8e6cf 3ce957a5 3ce9c8b2     0v.<...<.W.<...<
24023350:	3cea39f5 3ceaab70 3ceb1d21 3ceb8f0a     .9.<p..<!..<...<
24023360:	3cec012a 3cec7381 3cece60f 3ced58d6     *..<.s.<...<.X.<
24023370:	3cedcbd4 3cee3f09 3ceeb277 3cef261c     ...<.?.<w..<.&.<
24023380:	3cef99fa 3cf00e10 3cf0825e 3cf0f6e4     ...<...<^..<...<
24023390:	3cf16ba4 3cf1e09b 3cf255cc 3cf2cb35     .k.<...<.U.<5..<
240233a0:	3cf340d7 3cf3b6b3 3cf42cc7 3cf4a315     .@.<...<.,.<...<
240233b0:	3cf5199c 3cf5905c 3cf60757 3cf67e8b     ...<\..<W..<.~.<
240233c0:	3cf6f5f8 3cf76da0 3cf7e582 3cf85d9e     ...<.m.<...<.].<
240233d0:	3cf8d5f4 3cf94e85 3cf9c750 3cfa4055     ...<.N.<P..<U@.<
240233e0:	3cfab996 3cfb3311 3cfbacc7 3cfc26b8     ...<.3.<...<.&.<
240233f0:	3cfca0e4 3cfd1b4c 3cfd95ef 3cfe10cd     ...<L..<...<...<
24023400:	3cfe8be7 3cff073d 3cff82cf 3cfffe9c     ...<=..<...<...<
24023410:	3d003d53 3d007b76 3d00b9b7 3d00f816     S=.=v{.=...=...=
24023420:	3d013694 3d017530 3d01b3ea 3d01f2c2     .6.=0u.=...=...=
24023430:	3d0231ba 3d0270cf 3d02b004 3d02ef57     .1.=.p.=...=W..=
24023440:	3d032ec8 3d036e59 3d03ae08 3d03edd6     ...=Yn.=...=...=
24023450:	3d042dc3 3d046dd0 3d04adfb 3d04ee45     .-.=.m.=...=E..=
24023460:	3d052eaf 3d056f38 3d05afe0 3d05f0a8     ...=8o.=...=...=
24023470:	3d06318f 3d067295 3d06b3bb 3d06f501     .1.=.r.=...=...=
24023480:	3d073666 3d0777eb 3d07b990 3d07fb55     f6.=.w.=...=U..=
24023490:	3d083d39 3d087f3e 3d08c163 3d0903a7     9=.=>..=c..=...=
240234a0:	3d09460c 3d098891 3d09cb37 3d0a0dfd     .F.=...=7..=...=
240234b0:	3d0a50e3 3d0a93e9 3d0ad711 3d0b1a58     .P.=...=...=X..=
240234c0:	3d0b5dc1 3d0ba14a 3d0be4f4 3d0c28be     .].=J..=...=.(.=
240234d0:	3d0c6caa 3d0cb0b7 3d0cf4e4 3d0d3933     .l.=...=...=39.=
240234e0:	3d0d7da3 3d0dc234 3d0e06e6 3d0e4bba     .}.=4..=...=.K.=
240234f0:	3d0e90af 3d0ed5c6 3d0f1afe 3d0f6058     ...=...=...=X`.=
24023500:	3d0fa5d3 3d0feb70 3d10312f 3d107710     ...=p..=/1.=.w.=
24023510:	3d10bd13 3d110337 3d11497e 3d118fe7     ...=7..=~I.=...=
24023520:	3d11d672 3d121d1f 3d1263ef 3d12aae1     r..=...=.c.=...=
24023530:	3d12f1f5 3d13392c 3d138085 3d13c802     ...=,9.=...=...=
24023540:	3d140fa0 3d145762 3d149f46 3d14e74e     ...=bW.=F..=N..=
24023550:	3d152f78 3d1577c5 3d15c036 3d1608c9     x/.=.w.=6..=...=
24023560:	3d165180 3d169a5a 3d16e358 3d172c79     .Q.=Z..=X..=y,.=
24023570:	3d1775bd 3d17bf25 3d1808b1 3d185260     .u.=%..=...=`R.=
24023580:	3d189c34 3d18e62b 3d193046 3d197a84     4..=+..=F0.=.z.=
24023590:	3d19c4e7 3d1a0f6e 3d1a5a1a 3d1aa4e9     ...=n..=.Z.=...=
240235a0:	3d1aefdd 3d1b3af5 3d1b8632 3d1bd193     ...=.:.=2..=...=
240235b0:	3d1c1d19 3d1c68c4 3d1cb493 3d1d0087     ...=.h.=...=...=
240235c0:	3d1d4ca0 3d1d98de 3d1de541 3d1e31c9     .L.=...=A..=.1.=
240235d0:	3d1e7e76 3d1ecb49 3d1f1841 3d1f655e     v~.=I..=A..=^e.=
240235e0:	3d1fb2a0 3d200009 3d204d96 3d209b4a     ...=.. =.M =J. =
240235f0:	3d20e923 3d213722 3d218547 3d21d392     #. ="7!=G.!=..!=
24023600:	3d222202 3d227099 3d22bf56 3d230e3a     .""=.p"=V."=:.#=
24023610:	3d235d43 3d23ac74 3d23fbca 3d244b47     C]#=t.#=..#=GK$=
24023620:	3d249aeb 3d24eab5 3d253aa6 3d258abe     ..$=..$=.:%=..%=
24023630:	3d25dafd 3d262b63 3d267bf0 3d26cca4     ..%=c+&=.{&=..&=
24023640:	3d271d7f 3d276e82 3d27bfac 3d2810fd     ..'=.n'=..'=..(=
24023650:	3d286276 3d28b416 3d2905de 3d2957ce     vb(=..(=..)=.W)=
24023660:	3d29a9e6 3d29fc25 3d2a4e8d 3d2aa11c     ..)=%.)=.N*=..*=
24023670:	3d2af3d4 3d2b46b4 3d2b99bc 3d2becec     ..*=.F+=..+=..+=
24023680:	3d2c4045 3d2c93c7 3d2ce771 3d2d3b43     E@,=..,=q.,=C;-=
24023690:	3d2d8f3f 3d2de363 3d2e37b0 3d2e8c26     ?.-=c.-=.7.=&..=
240236a0:	3d2ee0c5 3d2f358d 3d2f8a7e 3d2fdf99     ...=.5/=~./=../=
240236b0:	3d3034dd 3d308a4b 3d30dfe1 3d3135a2     .40=K.0=..0=.51=
240236c0:	3d318b8c 3d31e1a0 3d3237de 3d328e46     ..1=..1=.72=F.2=
240236d0:	3d32e4d8 3d333b94 3d33927a 3d33e98a     ..2=.;3=z.3=..3=
240236e0:	3d3440c4 3d349829 3d34efb9 3d354773     .@4=).4=..4=sG5=
240236f0:	3d359f58 3d35f767 3d364fa1 3d36a806     X.5=g.5=.O6=..6=
24023700:	3d370096 3d375951 3d37b238 3d380b49     ..7=QY7=8.7=I.8=
24023710:	3d386486 3d38bdee 3d391782 3d397141     .d8=..8=..9=Aq9=
24023720:	3d39cb2c 3d3a2542 3d3a7f84 3d3ad9f3     ,.9=B%:=..:=..:=
24023730:	3d3b348d 3d3b8f53 3d3bea46 3d3c4564     .4;=S.;=F.;=dE<=
24023740:	3d3ca0af 3d3cfc26 3d3d57ca 3d3db39a     ..<=&.<=.W==..==
24023750:	3d3e0f97 3d3e6bc1 3d3ec818 3d3f249b     ..>=.k>=..>=.$?=
24023760:	3d3f814c 3d3fde29 3d403b34 3d40986c     L.?=).?=4;@=l.@=
24023770:	3d40f5d1 3d415364 3d41b124 3d420f12     ..@=dSA=$.A=..B=
24023780:	3d426d2d 3d42cb77 3d4329ee 3d438893     -mB=w.B=.)C=..C=
24023790:	3d43e766 3d444667 3d44a597 3d4504f4     f.C=gFD=..D=..E=
240237a0:	3d456481 3d45c43b 3d462424 3d46843c     .dE=;.E=$$F=<.F=
240237b0:	3d46e483 3d4744f8 3d47a59d 3d480670     ..F=.DG=..G=p.H=
240237c0:	3d486773 3d48c8a4 3d492a05 3d498b96     sgH=..H=.*I=..I=
240237d0:	3d49ed56 3d4a4f45 3d4ab164 3d4b13b3     V.I=EOJ=d.J=..K=
240237e0:	3d4b7632 3d4bd8e0 3d4c3bbf 3d4c9ecd     2vK=..K=.;L=..L=
240237f0:	3d4d020c 3d4d657b 3d4dc91b 3d4e2ceb     ..M={eM=..M=.,N=
24023800:	3d4e90ec 3d4ef51d 3d4f597f 3d4fbe12     ..N=..N=.YO=..O=
24023810:	3d5022d6 3d5087cb 3d50ecf1 3d515248     ."P=..P=..P=HRQ=
24023820:	3d51b7d1 3d521d8b 3d528377 3d52e994     ..Q=..R=w.R=..R=
24023830:	3d534fe3 3d53b663 3d541d16 3d5483fb     .OS=c.S=..T=..T=
24023840:	3d54eb11 3d55525a 3d55b9d5 3d562183     ..T=ZRU=..U=.!V=
24023850:	3d568963 3d56f175 3d5759bb 3d57c233     c.V=u.V=.YW=3.W=
24023860:	3d582ade 3d5893bb 3d58fccc 3d596610     .*X=..X=..X=.fY=
24023870:	3d59cf88 3d5a3932 3d5aa311 3d5b0d22     ..Y=29Z=..Z=".[=
24023880:	3d5b7768 3d5be1e1 3d5c4c8e 3d5cb76f     hw[=..[=.L\=o.\=
24023890:	3d5d2284 3d5d8dcd 3d5df94a 3d5e64fc     ."]=..]=J.]=.d^=
240238a0:	3d5ed0e2 3d5f3cfd 3d5fa94c 3d6015d0     ..^=.<_=L._=..`=
240238b0:	3d608289 3d60ef77 3d615c9a 3d61c9f3     ..`=w.`=.\a=..a=
240238c0:	3d623780 3d62a543 3d63133b 3d638169     .7b=C.b=;.c=i.c=
240238d0:	3d63efcd 3d645e66 3d64cd35 3d653c3a     ..c=f^d=5.d=:<e=
240238e0:	3d65ab76 3d661ae7 3d668a8f 3d66fa6d     v.e=..f=..f=m.f=
240238f0:	3d676a82 3d67dacd 3d684b50 3d68bc09     .jg=..g=PKh=..h=
24023900:	3d692cf8 3d699e1f 3d6a0f7d 3d6a8113     .,i=..i=}.j=..j=
24023910:	3d6af2df 3d6b64e3 3d6bd71f 3d6c4992     ..j=.dk=..k=.Il=
24023920:	3d6cbc3e 3d6d2f21 3d6da23c 3d6e158f     >.l=!/m=<.m=..n=
24023930:	3d6e891a 3d6efcde 3d6f70da 3d6fe50f     ..n=..n=.po=..o=
24023940:	3d70597c 3d70ce22 3d714301 3d71b819     |Yp=".p=.Cq=..q=
24023950:	3d722d6a 3d72a2f5 3d7318b8 3d738eb5     j-r=..r=..s=..s=
24023960:	3d7404ec 3d747b5c 3d74f206 3d7568ea     ..t=\{t=..t=.hu=
24023970:	3d75e008 3d76575f 3d76cef2 3d7746be     ..u=_Wv=..v=.Fw=
24023980:	3d77bec5 3d783706 3d78af82 3d792839     ..w=.7x=..x=9(y=
24023990:	3d79a12b 3d7a1a58 3d7a93bf 3d7b0d62     +.y=X.z=..z=b.{=
240239a0:	3d7b8741 3d7c015b 3d7c7bb0 3d7cf641     A.{=[.|=.{|=A.|=
240239b0:	3d7d710e 3d7dec17 3d7e675c 3d7ee2dd     .q}=..}=\g~=..~=
240239c0:	3d7f5e9a 3d7fda94 3d802b65 3d80699e     .^.=...=e+.=.i.=
240239d0:	3d80a7f6 3d80e66c 3d812501 3d8163b4     ...=l..=.%.=.c.=
240239e0:	3d81a286 3d81e176 3d822086 3d825fb4     ...=v..=. .=._.=
240239f0:	3d829f00 3d82de6c 3d831df7 3d835da0     ...=l..=...=.].=
24023a00:	3d839d69 3d83dd51 3d841d58 3d845d7f     i..=Q..=X..=.].=
24023a10:	3d849dc4 3d84de29 3d851eae 3d855f52     ...=)..=...=R_.=
24023a20:	3d85a015 3d85e0f9 3d8621fc 3d86631e     ...=...=.!.=.c.=
24023a30:	3d86a461 3d86e5c3 3d872745 3d8768e8     a..=...=E'.=.h.=
24023a40:	3d87aaaa 3d87ec8c 3d882e8f 3d8870b2     ...=...=...=.p.=
24023a50:	3d88b2f5 3d88f559 3d8937dd 3d897a81     ...=Y..=.7.=.z.=
24023a60:	3d89bd46 3d8a002c 3d8a4332 3d8a8659     F..=,..=2C.=Y..=
24023a70:	3d8ac9a1 3d8b0d0a 3d8b5094 3d8b943f     ...=...=.P.=?..=
24023a80:	3d8bd80a 3d8c1bf7 3d8c6005 3d8ca435     ...=...=.`.=5..=
24023a90:	3d8ce886 3d8d2cf8 3d8d718b 3d8db640     ...=.,.=.q.=@..=
24023aa0:	3d8dfb17 3d8e400f 3d8e852a 3d8eca65     ...=.@.=*..=e..=
24023ab0:	3d8f0fc3 3d8f5543 3d8f9ae4 3d8fe0a8     ...=CU.=...=...=
24023ac0:	3d90268e 3d906c96 3d90b2c0 3d90f90c     .&.=.l.=...=...=
24023ad0:	3d913f7b 3d91860d 3d91ccc0 3d921397     {?.=...=...=...=
24023ae0:	3d925a90 3d92a1ac 3d92e8ea 3d93304c     .Z.=...=...=L0.=
24023af0:	3d9377d0 3d93bf77 3d940742 3d944f2f     .w.=w..=B..=/O.=
24023b00:	3d949740 3d94df74 3d9527cb 3d957046     @..=t..=.'.=Fp.=
24023b10:	3d95b8e4 3d9601a6 3d964a8b 3d969394     ...=...=.J.=...=
24023b20:	3d96dcc1 3d972612 3d976f86 3d97b91f     ...=.&.=.o.=...=
24023b30:	3d9802db 3d984cbc 3d9896c0 3d98e0e9     ...=.L.=...=...=
24023b40:	3d992b36 3d9975a8 3d99c03e 3d9a0af9     6+.=.u.=>..=...=
24023b50:	3d9a55d8 3d9aa0dc 3d9aec04 3d9b3752     .U.=...=...=R7.=
24023b60:	3d9b82c4 3d9bce5b 3d9c1a18 3d9c65f9     ...=[..=...=.e.=
24023b70:	3d9cb200 3d9cfe2b 3d9d4a7c 3d9d96f3     ...=+..=|J.=...=
24023b80:	3d9de38f 3d9e3050 3d9e7d38 3d9eca44     ...=P0.=8}.=D..=
24023b90:	3d9f1777 3d9f64cf 3d9fb24d 3d9ffff2     w..=.d.=M..=...=
24023ba0:	3da04dbc 3da09bac 3da0e9c3 3da13800     .M.=...=...=.8.=
24023bb0:	3da18663 3da1d4ed 3da2239d 3da27274     c..=...=.#.=tr.=
24023bc0:	3da2c171 3da31096 3da35fe1 3da3af52     q..=...=._.=R..=
24023bd0:	3da3feeb 3da44eab 3da49e92 3da4eea0     ...=.N.=...=...=
24023be0:	3da53ed6 3da58f32 3da5dfb7 3da63062     .>.=2..=...=b0.=
24023bf0:	3da68136 3da6d230 3da72353 3da7749e     6..=0..=S#.=.t.=
24023c00:	3da7c610 3da817aa 3da8696d 3da8bb57     ...=...=mi.=W..=
24023c10:	3da90d6a 3da95fa5 3da9b208 3daa0494     j..=._.=...=...=
24023c20:	3daa5748 3daaaa25 3daafd2a 3dab5059     HW.=%..=*..=YP.=
24023c30:	3daba3b0 3dabf730 3dac4ad9 3dac9eab     ...=0..=.J.=...=
24023c40:	3dacf2a7 3dad46cb 3dad9b19 3dadef90     ...=.F.=...=...=
24023c50:	3dae4431 3dae98fc 3daeedf0 3daf430d     1D.=...=...=.C.=
24023c60:	3daf9855 3dafedc6 3db04362 3db09927     U..=...=bC.='..=
24023c70:	3db0ef17 3db14531 3db19b75 3db1f1e4     ...=1E.=u..=...=
24023c80:	3db2487d 3db29f41 3db2f62f 3db34d48     }H.=A..=/..=HM.=
24023c90:	3db3a48c 3db3fbfb 3db45394 3db4ab59     ...=...=.S.=Y..=
24023ca0:	3db50349 3db55b65 3db5b3ab 3db60c1d     I..=e[.=...=...=
24023cb0:	3db664bb 3db6bd84 3db71678 3db76f99     .d.=...=x..=.o.=
24023cc0:	3db7c8e5 3db8225e 3db87c02 3db8d5d2     ...=^".=.|.=...=
24023cd0:	3db92fcf 3db989f8 3db9e44d 3dba3ecf     ./.=...=M..=.>.=
24023ce0:	3dba997d 3dbaf458 3dbb4f60 3dbbaa94     }..=X..=`O.=...=
24023cf0:	3dbc05f6 3dbc6184 3dbcbd40 3dbd1928     ...=.a.=@..=(..=
24023d00:	3dbd753e 3dbdd181 3dbe2df2 3dbe8a90     >u.=...=.-.=...=
24023d10:	3dbee75c 3dbf4456 3dbfa17d 3dbffed2     \..=VD.=}..=...=
24023d20:	3dc05c55 3dc0ba07 3dc117e6 3dc175f4     U\.=...=...=.u.=
24023d30:	3dc1d430 3dc2329a 3dc29134 3dc2effb     0..=.2.=4..=...=
24023d40:	3dc34ef2 3dc3ae17 3dc40d6b 3dc46cee     .N.=...=k..=.l.=
24023d50:	3dc4cca1 3dc52c82 3dc58c93 3dc5ecd3     ...=.,.=...=...=
24023d60:	3dc64d42 3dc6ade2 3dc70eb0 3dc76faf     BM.=...=...=.o.=
24023d70:	3dc7d0dd 3dc8323c 3dc893ca 3dc8f589     ...=<2.=...=...=
24023d80:	3dc95778 3dc9b997 3dca1be6 3dca7e66     xW.=...=...=f~.=
24023d90:	3dcae117 3dcb43f9 3dcba70b 3dcc0a4e     ...=.C.=...=N..=
24023da0:	3dcc6dc2 3dccd168 3dcd353e 3dcd9946     .m.=h..=>5.=F..=
24023db0:	3dcdfd7f 3dce61ea 3dcec687 3dcf2b55     ...=.a.=...=U+.=
24023dc0:	3dcf9055 3dcff586 3dd05aea 3dd0c080     U..=...=.Z.=...=
24023dd0:	3dd12648 3dd18c43 3dd1f270 3dd258cf     H&.=C..=p..=.X.=
24023de0:	3dd2bf61 3dd32626 3dd38d1d 3dd3f448     a..=&&.=...=H..=
24023df0:	3dd45ba5 3dd4c336 3dd52af9 3dd592f1     .[.=6..=.*.=...=
24023e00:	3dd5fb1b 3dd66379 3dd6cc0b 3dd734d0     ...=yc.=...=.4.=
24023e10:	3dd79dca 3dd806f7 3dd87058 3dd8d9ee     ...=...=Xp.=...=
24023e20:	3dd943b8 3dd9adb6 3dda17e9 3dda8250     .C.=...=...=P..=
24023e30:	3ddaecec 3ddb57bc 3ddbc2c2 3ddc2dfd     ...=.W.=...=.-.=
24023e40:	3ddc996d 3ddd0511 3ddd70ec 3ddddcfc     m..=...=.p.=...=
24023e50:	3dde4941 3ddeb5bc 3ddf226d 3ddf8f53     AI.=...=m".=S..=
24023e60:	3ddffc70 3de069c2 3de0d74b 3de1450b     p..=.i.=K..=.E.=
24023e70:	3de1b300 3de2212c 3de28f8f 3de2fe29     ...=,!.=...=)..=
24023e80:	3de36cf9 3de3dc01 3de44b3f 3de4bab5     .l.=...=?K.=...=
24023e90:	3de52a62 3de59a46 3de60a62 3de67ab6     b*.=F..=b..=.z.=
24023ea0:	3de6eb41 3de75c04 3de7cd00 3de83e33     A..=.\.=...=3>.=
24023eb0:	3de8af9f 3de92142 3de9931f 3dea0534     ...=B!.=...=4..=
24023ec0:	3dea7781 3deaea08 3deb5cc7 3debcfbf     .w.=...=.\.=...=
24023ed0:	3dec42f1 3decb65c 3ded2a00 3ded9ddd     .B.=\..=.*.=...=
24023ee0:	3dee11f4 3dee8645 3deefad0 3def6f95     ...=E..=...=.o.=
24023ef0:	3defe494 3df059cd 3df0cf40 3df144ee     ...=.Y.=@..=.D.=
24023f00:	3df1bad6 3df230f9 3df2a757 3df31df0     ...=.0.=W..=...=
24023f10:	3df394c3 3df40bd2 3df4831d 3df4faa2     ...=...=...=...=
24023f20:	3df57263 3df5ea60 3df66299 3df6db0d     cr.=`..=.b.=...=
24023f30:	3df753bd 3df7ccaa 3df845d3 3df8bf38     .S.=...=.E.=8..=
24023f40:	3df938da 3df9b2b8 3dfa2cd3 3dfaa72b     .8.=...=.,.=+..=
24023f50:	3dfb21c0 3dfb9c93 3dfc17a2 3dfc92ef     .!.=...=...=...=
24023f60:	3dfd0e79 3dfd8a41 3dfe0647 3dfe828a     y..=A..=G..=...=
24023f70:	3dfeff0c 3dff7bcc 3dfff8ca 3e003b03     ...=.{.=...=.;.>
24023f80:	3e0079c1 3e00b89e 3e00f79a 3e0136b6     .y.>...>...>.6.>
24023f90:	3e0175f1 3e01b54c 3e01f4c6 3e023460     .u.>L..>...>`4.>
24023fa0:	3e02741a 3e02b3f4 3e02f3ee 3e033408     .t.>...>...>.4.>
24023fb0:	3e037441 3e03b49b 3e03f515 3e0435b0     At.>...>...>.5.>
24023fc0:	3e04766a 3e04b745 3e04f841 3e05395d     jv.>E..>A..>]9.>
24023fd0:	3e057a9a 3e05bbf7 3e05fd75 3e063f14     .z.>...>u..>.?.>
24023fe0:	3e0680d3 3e06c2b4 3e0704b6 3e0746d8     ...>...>...>.F.>
24023ff0:	3e07891c 3e07cb81 3e080e07 3e0850af     ...>...>...>.P.>
24024000:	3e089378 3e08d663 3e09196f 3e095c9c     x..>c..>o..>.\.>
24024010:	3e099fec 3e09e35d 3e0a26f0 3e0a6aa5     ...>]..>.&.>.j.>
24024020:	3e0aae7c 3e0af275 3e0b3690 3e0b7acd     |..>u..>.6.>.z.>
24024030:	3e0bbf2c 3e0c03ae 3e0c4852 3e0c8d19     ,..>...>RH.>...>
24024040:	3e0cd202 3e0d170e 3e0d5c3d 3e0da18e     ...>...>=\.>...>
24024050:	3e0de702 3e0e2c9a 3e0e7254 3e0eb831     ...>.,.>Tr.>1..>
24024060:	3e0efe31 3e0f4455 3e0f8a9b 3e0fd106     1..>UD.>...>...>
24024070:	3e101793 3e105e44 3e10a519 3e10ec11     ...>D^.>...>...>
24024080:	3e11332d 3e117a6d 3e11c1d1 3e120959     -3.>mz.>...>Y..>
24024090:	3e125104 3e1298d4 3e12e0c8 3e1328e1     .Q.>...>...>.(.>
240240a0:	3e13711d 3e13b97f 3e140204 3e144aae     .q.>...>...>.J.>
240240b0:	3e14937d 3e14dc71 3e152589 3e156ec6     }..>q..>.%.>.n.>
240240c0:	3e15b828 3e1601b0 3e164b5c 3e16952e     (..>...>\K.>...>
240240d0:	3e16df25 3e172941 3e177382 3e17bdea     %..>A).>.s.>...>
240240e0:	3e180876 3e185329 3e189e01 3e18e8ff     v..>)S.>...>...>
240240f0:	3e193423 3e197f6d 3e19cadd 3e1a1673     #4.>m..>...>s..>
24024100:	3e1a6230 3e1aae13 3e1afa1c 3e1b464c     0b.>...>...>LF.>
24024110:	3e1b92a2 3e1bdf1f 3e1c2bc3 3e1c788d     ...>...>.+.>.x.>
24024120:	3e1cc57e 3e1d1297 3e1d5fd6 3e1dad3d     ~..>...>._.>=..>
24024130:	3e1dfacb 3e1e4880 3e1e965d 3e1ee461     ...>.H.>]..>a..>
24024140:	3e1f328d 3e1f80e0 3e1fcf5b 3e201dfe     .2.>...>[..>.. >
24024150:	3e206cc9 3e20bbbc 3e210ad7 3e215a1a     .l >.. >..!>.Z!>
24024160:	3e21a986 3e21f919 3e2248d6 3e2298bb     ..!>..!>.H">..">
24024170:	3e22e8c8 3e2338fe 3e23895d 3e23d9e5     ..">.8#>].#>..#>
24024180:	3e242a96 3e247b70 3e24cc73 3e251d9f     .*$>p{$>s.$>..%>
24024190:	3e256ef5 3e25c074 3e26121c 3e2663ee     .n%>t.%>..&>.c&>
240241a0:	3e26b5ea 3e270810 3e275a5f 3e27acd9     ..&>..'>_Z'>..'>
240241b0:	3e27ff7c 3e28524a 3e28a542 3e28f864     |.'>JR(>B.(>d.(>
240241c0:	3e294bb1 3e299f28 3e29f2ca 3e2a4696     .K)>(.)>..)>.F*>
240241d0:	3e2a9a8e 3e2aeeb0 3e2b42fd 3e2b9776     ..*>..*>.B+>v.+>
240241e0:	3e2bec19 3e2c40e8 3e2c95e2 3e2ceb08     ..+>.@,>..,>..,>
240241f0:	3e2d4059 3e2d95d6 3e2deb7e 3e2e4153     Y@->..->~.->SA.>
24024200:	3e2e9753 3e2eed7f 3e2f43d8 3e2f9a5d     S..>...>.C/>]./>
24024210:	3e2ff10e 3e3047ec 3e309ef6 3e30f62c     ../>.G0>..0>,.0>
24024220:	3e314d90 3e31a520 3e31fcdd 3e3254c8     .M1> .1>..1>.T2>
24024230:	3e32acdf 3e330524 3e335d96 3e33b635     ..2>$.3>.]3>5.3>
24024240:	3e340f02 3e3467fc 3e34c125 3e351a7b     ..4>.g4>%.4>{.5>
24024250:	3e3573ff 3e35cdb1 3e362791 3e3681a0     .s5>..5>.'6>..6>
24024260:	3e36dbdd 3e373648 3e3790e2 3e37ebaa     ..6>H67>..7>..7>
24024270:	3e3846a1 3e38a1c8 3e38fd1d 3e3958a1     .F8>..8>..8>.X9>
24024280:	3e39b454 3e3a1037 3e3a6c49 3e3ac88b     T.9>7.:>Il:>..:>
24024290:	3e3b24fc 3e3b819d 3e3bde6e 3e3c3b6f     .$;>..;>n.;>o;<>
240242a0:	3e3c989f 3e3cf600 3e3d5391 3e3db153     ..<>..<>.S=>S.=>
240242b0:	3e3e0f45 3e3e6d68 3e3ecbbb 3e3f2a3f     E.>>hm>>..>>?*?>
240242c0:	3e3f88f4 3e3fe7da 3e4046f2 3e40a63a     ..?>..?>.F@>:.@>
240242d0:	3e4105b4 3e41655f 3e41c53c 3e42254b     ..A>_eA><.A>K%B>
240242e0:	3e42858b 3e42e5fe 3e4346a2 3e43a779     ..B>..B>.FC>y.C>
240242f0:	3e440882 3e4469bd 3e44cb2b 3e452ccb     ..D>.iD>+.D>.,E>
24024300:	3e458e9e 3e45f0a4 3e4652dd 3e46b54a     ..E>..E>.RF>J.F>
24024310:	3e4717e9 3e477abb 3e47ddc1 3e4840fb     ..G>.zG>..G>.@H>
24024320:	3e48a468 3e490809 3e496bde 3e49cfe8     h.H>..I>.kI>..I>
24024330:	3e4a3425 3e4a9896 3e4afd3c 3e4b6216     %4J>..J><.J>.bK>
24024340:	3e4bc726 3e4c2c69 3e4c91e2 3e4cf790     &.K>i,L>..L>..L>
24024350:	3e4d5d73 3e4dc38b 3e4e29d8 3e4e905b     s]M>..M>.)N>[.N>
24024360:	3e4ef714 3e4f5e02 3e4fc526 3e502c80     ..N>.^O>&.O>.,P>
24024370:	3e509411 3e50fbd7 3e5163d4 3e51cc08     ..P>..P>.cQ>..Q>
24024380:	3e523472 3e529d13 3e5305eb 3e536efa     r4R>..R>..S>.nS>
24024390:	3e53d840 3e5441bd 3e54ab72 3e55155e     @.S>.AT>r.T>^.U>
240243a0:	3e557f82 3e55e9de 3e565471 3e56bf3d     ..U>..U>qTV>=.V>
240243b0:	3e572a41 3e57957d 3e5800f2 3e586c9f     A*W>}.W>..X>.lX>
240243c0:	3e58d885 3e5944a4 3e59b0fc 3e5a1d8d     ..X>.DY>..Y>..Z>
240243d0:	3e5a8a57 3e5af75b 3e5b6498 3e5bd20f     W.Z>[.Z>.d[>..[>
240243e0:	3e5c3fc0 3e5cadab 3e5d1bd0 3e5d8a2f     .?\>..\>..]>/.]>
240243f0:	3e5df8c8 3e5e679c 3e5ed6ab 3e5f45f4     ..]>.g^>..^>.E_>
24024400:	3e5fb579 3e602538 3e609533 3e610569     y._>8%`>3.`>i.a>
24024410:	3e6175da 3e61e688 3e625771 3e62c895     .ua>..a>qWb>..b>
24024420:	3e6339f6 3e63ab94 3e641d6d 3e648f83     .9c>..c>m.d>..d>
24024430:	3e6501d6 3e657466 3e65e732 3e665a3c     ..e>fte>2.e><Zf>
24024440:	3e66cd83 3e674107 3e67b4c9 3e6828c8     ..f>.Ag>..g>.(h>
24024450:	3e689d06 3e691181 3e69863b 3e69fb33     ..h>..i>;.i>3.i>
24024460:	3e6a7069 3e6ae5de 3e6b5b92 3e6bd184     ipj>..j>.[k>..k>
24024470:	3e6c47b6 3e6cbe27 3e6d34d7 3e6dabc7     .Gl>'.l>.4m>..m>
24024480:	3e6e22f7 3e6e9a66 3e6f1215 3e6f8a05     ."n>f.n>..o>..o>
24024490:	3e700235 3e707aa5 3e70f356 3e716c48     5.p>.zp>V.p>Hlq>
240244a0:	3e71e57b 3e725eef 3e72d8a4 3e73529b     {.q>.^r>..r>.Rs>
240244b0:	3e73ccd3 3e74474d 3e74c209 3e753d07     ..s>MGt>..t>.=u>
240244c0:	3e75b847 3e7633ca 3e76af8f 3e772b98     G.u>.3v>..v>.+w>
240244d0:	3e77a7e3 3e782471 3e78a142 3e791e57     ..w>q$x>B.x>W.y>
240244e0:	3e799bb0 3e7a194c 3e7a972c 3e7b1550     ..y>L.z>,.z>P.{>
240244f0:	3e7b93b9 3e7c1266 3e7c9158 3e7d108e     ..{>f.|>X.|>..}>
24024500:	3e7d900a 3e7e0fcb 3e7e8fd0 3e7f101c     ..}>..~>..~>...>
24024510:	3e7f90ad 3e8008c2 3e804951 3e808a02     ...>...>QI.>...>
24024520:	3e80cad7 3e810bcf 3e814ceb 3e818e2a     ...>...>.L.>*..>
24024530:	3e81cf8c 3e821113 3e8252bd 3e82948a     ...>...>.R.>...>
24024540:	3e82d67c 3e831892 3e835acc 3e839d2a     |..>...>.Z.>*..>
24024550:	3e83dfac 3e842253 3e84651e 3e84a80e     ...>S".>.e.>...>
24024560:	3e84eb22 3e852e5b 3e8571b9 3e85b53d     "..>[..>.q.>=..>
24024570:	3e85f8e5 3e863cb2 3e8680a4 3e86c4bc     ...>.<.>...>...>
24024580:	3e8708fa 3e874d5c 3e8791e5 3e87d693     ...>\M.>...>...>
24024590:	3e881b67 3e886061 3e88a581 3e88eac7     g..>a`.>...>...>
240245a0:	3e893034 3e8975c7 3e89bb80 3e8a0160     40.>.u.>...>`..>
240245b0:	3e8a4766 3e8a8d93 3e8ad3e7 3e8b1a62     fG.>...>...>b..>
240245c0:	3e8b6104 3e8ba7cd 3e8beebd 3e8c35d5     .a.>...>...>.5.>
240245d0:	3e8c7d14 3e8cc47b 3e8d0c0a 3e8d53c0     .}.>{..>...>.S.>
240245e0:	3e8d9b9e 3e8de3a4 3e8e2bd2 3e8e7429     ...>...>.+.>)t.>
240245f0:	3e8ebca8 3e8f054f 3e8f4e1f 3e8f9717     ...>O..>.N.>...>
24024600:	3e8fe038 3e902982 3e9072f5 3e90bc91     8..>.).>.r.>...>
24024610:	3e910657 3e915045 3e919a5d 3e91e49f     W..>EP.>]..>...>
24024620:	3e922f0a 3e92799f 3e92c45e 3e930f47     ./.>.y.>^..>G..>
24024630:	3e935a5a 3e93a597 3e93f0fe 3e943c90     ZZ.>...>...>.<.>
24024640:	3e94884d 3e94d434 3e952046 3e956c83     M..>4..>F .>.l.>
24024650:	3e95b8eb 3e96057e 3e96523d 3e969f27     ...>~..>=R.>'..>
24024660:	3e96ec3c 3e97397d 3e9786ea 3e97d483     <..>}9.>...>...>
24024670:	3e982247 3e987038 3e98be55 3e990c9e     G".>8p.>U..>...>
24024680:	3e995b14 3e99a9b7 3e99f886 3e9a4782     .[.>...>...>.G.>
24024690:	3e9a96ab 3e9ae602 3e9b3585 3e9b8536     ...>...>.5.>6..>
240246a0:	3e9bd514 3e9c2521 3e9c755a 3e9cc5c2     ...>!%.>Zu.>...>
240246b0:	3e9d1658 3e9d671c 3e9db80e 3e9e092e     X..>.g.>...>...>
240246c0:	3e9e5a7e 3e9eabfb 3e9efda8 3e9f4f84     ~Z.>...>...>.O.>
240246d0:	3e9fa18e 3e9ff3c8 3ea04632 3ea098ca     ...>...>2F.>...>
240246e0:	3ea0eb93 3ea13e8b 3ea191b3 3ea1e50b     ...>.>.>...>...>
240246f0:	3ea23893 3ea28c4c 3ea2e035 3ea3344f     .8.>L..>5..>O4.>
24024700:	3ea38899 3ea3dd14 3ea431c1 3ea4869e     ...>...>.1.>...>
24024710:	3ea4dbad 3ea530ed 3ea5865f 3ea5dc03     ...>.0.>_..>...>
24024720:	3ea631d8 3ea687e0 3ea6de1a 3ea73486     .1.>...>...>.4.>
24024730:	3ea78b24 3ea7e1f5 3ea838f9 3ea89030     $..>...>.8.>0..>
24024740:	3ea8e79a 3ea93f37 3ea99708 3ea9ef0c     ...>7?.>...>...>
24024750:	3eaa4744 3eaa9fb0 3eaaf850 3eab5123     DG.>...>P..>#Q.>
24024760:	3eabaa2c 3eac0368 3eac5cda 3eacb680     ,..>h..>.\.>...>
24024770:	3ead105b 3ead6a6b 3eadc4b0 3eae1f2b     [..>kj.>...>+..>
24024780:	3eae79db 3eaed4c2 3eaf2fde 3eaf8b30     .y.>...>./.>0..>
24024790:	3eafe6b8 3eb04277 3eb09e6d 3eb0fa99     ...>wB.>m..>...>
240247a0:	3eb156fc 3eb1b396 3eb21067 3eb26d70     .V.>...>g..>pm.>
240247b0:	3eb2cab1 3eb32829 3eb385d9 3eb3e3c1     ...>)(.>...>...>
240247c0:	3eb441e2 3eb4a03b 3eb4fecc 3eb55d97     .A.>;..>...>.].>
240247d0:	3eb5bc9a 3eb61bd6 3eb67b4c 3eb6dafc     ...>...>L{.>...>
240247e0:	3eb73ae5 3eb79b08 3eb7fb65 3eb85bfc     .:.>...>e..>.[.>
240247f0:	3eb8bcce 3eb91dda 3eb97f21 3eb9e0a3     ...>...>!..>...>
24024800:	3eba4260 3ebaa459 3ebb068d 3ebb68fd     `B.>Y..>...>.h.>
24024810:	3ebbcba9 3ebc2e91 3ebc91b5 3ebcf516     ...>...>...>...>
24024820:	3ebd58b3 3ebdbc8d 3ebe20a5 3ebe84f9     .X.>...>. .>...>
24024830:	3ebee98b 3ebf4e5b 3ebfb369 3ec018b5     ...>[N.>i..>...>
24024840:	3ec07e3f 3ec0e407 3ec14a0e 3ec1b055     ?~.>...>.J.>U..>
24024850:	3ec216da 3ec27d9e 3ec2e4a2 3ec34be6     ...>.}.>...>.K.>
24024860:	3ec3b369 3ec41b2d 3ec48331 3ec4eb76     i..>-..>1..>v..>
24024870:	3ec553fb 3ec5bcc2 3ec625c9 3ec68f12     .S.>...>.%.>...>
24024880:	3ec6f89d 3ec76269 3ec7cc78 3ec836c8     ...>ib.>x..>.6.>
24024890:	3ec8a15c 3ec90c32 3ec9774b 3ec9e2a7     \..>2..>Kw.>...>
240248a0:	3eca4e46 3ecaba2a 3ecb2651 3ecb92bc     FN.>*..>Q&.>...>
240248b0:	3ecbff6b 3ecc6c5f 3eccd998 3ecd4716     k..>_l.>...>.G.>
240248c0:	3ecdb4d9 3ece22e1 3ece9130 3eceffc4     ...>.".>0..>...>
240248d0:	3ecf6e9e 3ecfddbf 3ed04d27 3ed0bcd5     .n.>...>'M.>...>
240248e0:	3ed12ccb 3ed19d08 3ed20d8c 3ed27e59     .,.>...>...>Y~.>
240248f0:	3ed2ef6e 3ed360cb 3ed3d271 3ed4445f     n..>.`.>q..>_D.>
24024900:	3ed4b697 3ed52919 3ed59be4 3ed60ef9     ...>.).>...>...>
24024910:	3ed68258 3ed6f601 3ed769f6 3ed7de35     X..>...>.i.>5..>
24024920:	3ed852c0 3ed8c796 3ed93cb7 3ed9b225     .R.>...>.<.>%..>
24024930:	3eda27e0 3eda9de7 3edb143a 3edb8adb     .'.>...>:..>...>
24024940:	3edc01c9 3edc7905 3edcf08f 3edd6868     ...>.y.>...>hh.>
24024950:	3edde08e 3ede5904 3eded1c9 3edf4add     ...>.Y.>...>.J.>
24024960:	3edfc441 3ee03df4 3ee0b7f8 3ee1324d     A..>.=.>...>M2.>
24024970:	3ee1acf2 3ee227e9 3ee2a331 3ee31ecb     ...>.'.>1..>...>
24024980:	3ee39ab7 3ee416f5 3ee49386 3ee51069     ...>...>...>i..>
24024990:	3ee58da1 3ee60b2b 3ee6890a 3ee7073c     ...>+..>...><..>
240249a0:	3ee785c4 3ee804a0 3ee883d1 3ee90358     ...>...>...>X..>
240249b0:	3ee98334 3eea0367 3eea83f0 3eeb04cf     4..>g..>...>...>
240249c0:	3eeb8606 3eec0795 3eec897b 3eed0bb9     ...>...>{..>...>
240249d0:	3eed8e4f 3eee113f 3eee9487 3eef1829     O..>?..>...>)..>
240249e0:	3eef9c24 3ef0207a 3ef0a52a 3ef12a35     $..>z .>*..>5*.>
240249f0:	3ef1af9c 3ef2355d 3ef2bb7b 3ef341f5     ...>]5.>{..>.A.>
24024a00:	3ef3c8cb 3ef44ffe 3ef4d78f 3ef55f7e     ...>.O.>...>~_.>
24024a10:	3ef5e7ca 3ef67075 3ef6f97f 3ef782e7     ...>up.>...>...>
24024a20:	3ef80cb0 3ef896d8 3ef92161 3ef9ac4a     ...>...>a!.>J..>
24024a30:	3efa3794 3efac340 3efb4f4e 3efbdbbe     .7.>@..>NO.>...>
24024a40:	3efc6890 3efcf5c6 3efd835f 3efe115b     .h.>...>_..>[..>
24024a50:	3efe9fbc 3eff2e82 3effbdad 3f00269e     ...>...>...>.&.?
24024a60:	3f006e99 3f00b6c8 3f00ff29 3f0147be     .n.?...?)..?.G.?
24024a70:	3f019087 3f01d984 3f0222b5 3f026c1a     ...?...?.".?.l.?
24024a80:	3f02b5b4 3f02ff83 3f034987 3f0393c0     ...?...?.I.?...?
24024a90:	3f03de2f 3f0428d3 3f0473ae 3f04bebe     /..?.(.?.s.?...?
24024aa0:	3f050a05 3f055583 3f05a137 3f05ed23     ...?.U.?7..?#..?
24024ab0:	3f063946 3f0685a0 3f06d232 3f071efd     F9.?...?2..?...?
24024ac0:	3f076bff 3f07b93a 3f0806ae 3f08545b     .k.?:..?...?[T.?
24024ad0:	3f08a241 3f08f061 3f093eba 3f098d4d     A..?a..?.>.?M..?
24024ae0:	3f09dc1b 3f0a2b23 3f0a7a65 3f0ac9e3     ...?#+.?ez.?...?
24024af0:	3f0b199c 3f0b6991 3f0bb9c1 3f0c0a2d     ...?.i.?...?-..?
24024b00:	3f0c5ad6 3f0cabbb 3f0cfcdd 3f0d4e3c     .Z.?...?...?<N.?
24024b10:	3f0d9fd9 3f0df1b3 3f0e43cb 3f0e9621     ...?...?.C.?!..?
24024b20:	3f0ee8b6 3f0f3b89 3f0f8e9c 3f0fe1ee     ...?.;.?...?...?
24024b30:	3f10357f 3f108950 3f10dd62 3f1131b4     .5.?P..?b..?.1.?
24024b40:	3f118646 3f11db1a 3f12302f 3f128586     F..?...?/0.?...?
24024b50:	3f12db1f 3f1330fa 3f138717 3f13dd78     ...?.0.?...?x..?
24024b60:	3f14341b 3f148b02 3f14e22d 3f15399c     .4.?...?-..?.9.?
24024b70:	3f15914f 3f15e948 3f164185 3f169a07     O..?H..?.A.?...?
24024b80:	3f16f2d0 3f174bde 3f17a533 3f17fece     ...?.K.?3..?...?
24024b90:	3f1858b0 3f18b2da 3f190d4c 3f196805     .X.?...?L..?.h.?
24024ba0:	3f19c307 3f1a1e52 3f1a79e6 3f1ad5c3     ...?R..?.y.?...?
24024bb0:	3f1b31ea 3f1b8e5b 3f1beb17 3f1c481d     .1.?[..?...?.H.?
24024bc0:	3f1ca56f 3f1d030d 3f1d60f6 3f1dbf2c     o..?...?.`.?,..?
24024bd0:	3f1e1dae 3f1e7c7e 3f1edb9b 3f1f3b06     ...?~|.?...?.;.?
24024be0:	3f1f9abf 3f1ffac6 3f205b1d 3f20bbc3     ...?...?.[ ?.. ?
24024bf0:	3f211cb9 3f217dff 3f21df96 3f22417e     ..!?.}!?..!?~A"?
24024c00:	3f22a3b7 3f230642 3f23691f 3f23cc4f     .."?B.#?.i#?O.#?
24024c10:	3f242fd2 3f2493a8 3f24f7d3 3f255c51     ./$?..$?..$?Q\%?
24024c20:	3f25c125 3f26264d 3f268bcc 3f26f1a0     %.%?M&&?..&?..&?
24024c30:	3f2757cb 3f27be4d 3f282526 3f288c57     .W'?M.'?&%(?W.(?
24024c40:	3f28f3e1 3f295bc3 3f29c3ff 3f2a2c94     ..(?.[)?..)?.,*?
24024c50:	3f2a9584 3f2afece 3f2b6873 3f2bd274     ..*?..*?sh+?t.+?
24024c60:	3f2c3cd2 3f2ca78b 3f2d12a2 3f2d7e17     .<,?..,?..-?.~-?
24024c70:	3f2de9e9 3f2e561b 3f2ec2ab 3f2f2f9b     ..-?.V.?...?.//?
24024c80:	3f2f9ceb 3f300a9c 3f3078ae 3f30e722     ../?..0?.x0?".0?
24024c90:	3f3155f8 3f31c530 3f3234cc 3f32a4cc     .U1?0.1?.42?..2?
24024ca0:	3f331531 3f3385fa 3f33f729 3f3468be     1.3?..3?).3?.h4?

24024cb0 <__leaf_table_fir16XHigh>:
24024cb0:	b828803b b8075a7f b83afe5a b8793f7f     ;.(..Z..Z.:..?y.
24024cc0:	b8a16efe b8cc365a b8fd2336 b91a20a8     .n..Z6..6#... ..
24024cd0:	b938ba83 b95a3b88 b97e67f6 b992750e     ..8..;Z..g~..u..
24024ce0:	b9a6a877 b9bb87a7 b9d0bdfd b9e5e912     w...............
24024cf0:	b9fa9967 ba0729c3 ba1048b6 ba18624b     g....)...H..Kb..
24024d00:	ba1f2c3d ba245a6f ba27a0a6 ba28b3e0     =,..oZ$...'...(.
24024d10:	ba274cb9 ba23287f ba1c0c0f ba11c4db     .L'..(#.........
24024d20:	ba042b83 b9e64ab2 b9bd4b9e b98d60b9     .+...J...K...`..
24024d30:	b92d64dd b84c66a3 38a67ca9 39647818     .d-..fL..|.8.xd9
24024d40:	39bf8fbd 3a085e5c 3a326265 3a5d460b     ...9\^.:eb2:.F]:
24024d50:	3a84372e 3a999afc 3aae7804 3ac27598     .7.:...:.x.:.u.:
24024d60:	3ad53a80 3ae66ee9 3af5be2c 3b016c61     .:.:.n.:,..:al.;
24024d70:	3b06bb0f 3b0aab52 3b0d22ab 3b0e0cb8     ...;R..;.".;...;
24024d80:	3b0d5bef 3b0b0a2e 3b071928 3b01929b     .[.;...;(..;...;
24024d90:	3af51105 3ae429e8 3ad0b3b2 3abb010e     ...:.).:...:...:
24024da0:	3aa3723f 3a8a736f 3a60f53f 3a2c0adb     ?r.:os.:?.`:..,:
24024db0:	39ee59cd 3986ca10 388dddf8 b8e66ce8     .Y.9...9...8.l..
24024dc0:	b98e8577 b9d98431 ba0c8324 ba25db46     w...1...$...F.%.
24024dd0:	ba3842aa ba43581c ba46e3ab ba42d973     .B8..XC...F.s.B.
24024de0:	ba375a72 ba24b587 ba0b664f b9d8266e     rZ7...$.Of..n&..
24024df0:	b98f138d b8f5d376 3854c47d 396d8cbd     ....v...}.T8..m9
24024e00:	39d4a213 3a18d2a0 3a45a363 3a6f8528     ...9...:c.E:(.o:
24024e10:	3a8aa371 3a9ae616 3aa80b5d 3ab1a776     q..:...:]..:v..:
24024e20:	3ab763e9 3ab900d4 3ab658e8 3aaf6527     .c.:...:.X.:'e.:
24024e30:	3aa43966 3a95034d 3a82142e 3a579f82     f9.:M..:...:..W:
24024e40:	3a257140 39dd8fe4 3953d6da b7d2e403     @q%:...9..S9....
24024e50:	b984b7e5 b9f99775 ba345946 ba67819f     ....u...FY4...g.
24024e60:	ba8a6b42 ba9d8446 baac7869 bab6ccdb     Bk..F...ix......
24024e70:	babc2344 babc3cf7 bab6fd6d baac6bd8     D#...<..m....k..
24024e80:	ba9cb3d4 ba88252c ba5e6529 ba24df29     ....,%..)e^.).$.
24024e90:	b9ca34ba b902b206 391aae0d 39de1e16     .4.........9...9
24024ea0:	3a368d63 3a7b2f1f 3a9d822d 3aba1904     c.6:./{:-..:...:
24024eb0:	3ad27f56 3ae5eff2 3af3c2d2 3afb724c     V..:...:...:Lr.:
24024ec0:	3afc9fd3 3af7175f 3aead1d4 3ad7f692     ...:_..:...:...:
24024ed0:	3abedb9b 3aa00455 3a783e8f 3a280548     ...:U..:.>x:H.(:
24024ee0:	39a29dc6 b81b87d2 b9cd6f70 ba4337de     ...9....po...7C.
24024ef0:	ba8e5a31 bab8562a bade59a9 baff418a     1Z..*V...Y...A..
24024f00:	bb0d0305 bb16e154 bb1cde9c bb1eb608     ....T...........
24024f10:	bb1c3daa bb15683c bb0a4651 baf60d63     .=..<h..QF..c...
24024f20:	bacfec00 baa2fb00 ba60843e b9e3e2da     ........>.`.....
24024f30:	3740a839 39f6af20 3a73df43 3ab4a93e     9.@7 ..9C.s:>..:
24024f40:	3aec3344 3b0f78fc 3b25af57 3b380968     D3.:.x.;W.%;h.8;
24024f50:	3b45e946 3b4ecb32 3b5249f5 3b5022a0     F.E;2.N;.IR;."P;
24024f60:	3b483745 3b3a90fe 3b2760b8 3b0eff3c     E7H;..:;.`';<..;
24024f70:	3ae3d81a 3aa1968b 3a3188d8 38b2657b     ...:...:..1:{e.8
24024f80:	ba0a9e4b ba968343 bae6465e bb19302a     K...C...^F..*0..
24024f90:	bb3c4f88 bb5b72bc bb759d71 bb84f680     .O<..r[.q.u.....
24024fa0:	bb8bcf7f bb8f0bb9 bb8e7358 bb89e6dd     ........Xs......
24024fb0:	bb81608b bb69eba2 bb49af5b bb22a3ba     .`....i.[.I...".
24024fc0:	baeb2b01 ba8702c3 b9590bba 3a2bb5f2     .+........Y...+:
24024fd0:	3ac916fb 3b1dc539 3b550973 3b8461d3     ...:9..;s.U;.a.;
24024fe0:	3b9bb323 3bafbaa0 3bbfc836 3bcb3ed7     #..;...;6..;.>.;
24024ff0:	3bd19942 3bd26e62 3bcd7525 3bc287b4     B..;bn.;%u.;...;
24025000:	3bb1a5ee 3b9af70a 3b7d94cc 3b3b2ecb     ...;...;..};..;;
24025010:	3adff149 39ebc642 ba6a1a86 bb15ff09     I..:B..9..j.....
24025020:	bb72b761 bba72719 bbd32336 bbfc09ef     a.r..'..6#......
24025030:	bc104a54 bc1fc1bc bc2bd21b bc33ecd9     TJ........+...3.
24025040:	bc37914f bc364ff3 bc2fcd54 bc23c4b5     O.7..O6.T./...#.
24025050:	bc120a39 bbf5191a bbbaac4e bb6a3781     9.......N....7j.
24025060:	ba93b7d9 3ad47b19 3b9816a4 3c0169df     .....{.:...;.i.<
24025070:	3c3a0151 3c7513ef 3c98e998 3cb7b1af     Q.:<..u<...<...<
24025080:	3cd66fc2 3cf4aed0 3d08fcbc 3d16ee17     .o.<...<...=...=
24025090:	3d23f3b9 3d2fd8f2 3d3a6d2a 3d4384d1     ..#=../=*m:=..C=
240250a0:	3d4afa37 3d50ae49 3d54892a 3d567ab0     7.J=I.P=*.T=.zV=
240250b0:	3d567ab0 3d54892a 3d50ae49 3d4afa37     .zV=*.T=I.P=7.J=
240250c0:	3d4384d1 3d3a6d2a 3d2fd8f2 3d23f3b9     ..C=*m:=../=..#=
240250d0:	3d16ee17 3d08fcbc 3cf4aed0 3cd66fc2     ...=...=...<.o.<
240250e0:	3cb7b1af 3c98e998 3c7513ef 3c3a0151     ...<...<..u<Q.:<
240250f0:	3c0169df 3b9816a4 3ad47b19 ba93b7d9     .i.<...;.{.:....
24025100:	bb6a3781 bbbaac4e bbf5191a bc120a39     .7j.N.......9...
24025110:	bc23c4b5 bc2fcd54 bc364ff3 bc37914f     ..#.T./..O6.O.7.
24025120:	bc33ecd9 bc2bd21b bc1fc1bc bc104a54     ..3...+.....TJ..
24025130:	bbfc09ef bbd32336 bba72719 bb72b761     ....6#...'..a.r.
24025140:	bb15ff09 ba6a1a86 39ebc642 3adff149     ......j.B..9I..:
24025150:	3b3b2ecb 3b7d94cc 3b9af70a 3bb1a5ee     ..;;..};...;...;
24025160:	3bc287b4 3bcd7525 3bd26e62 3bd19942     ...;%u.;bn.;B..;
24025170:	3bcb3ed7 3bbfc836 3bafbaa0 3b9bb323     .>.;6..;...;#..;
24025180:	3b8461d3 3b550973 3b1dc539 3ac916fb     .a.;s.U;9..;...:
24025190:	3a2bb5f2 b9590bba ba8702c3 baeb2b01     ..+:..Y......+..
240251a0:	bb22a3ba bb49af5b bb69eba2 bb81608b     ..".[.I...i..`..
240251b0:	bb89e6dd bb8e7358 bb8f0bb9 bb8bcf7f     ....Xs..........
240251c0:	bb84f680 bb759d71 bb5b72bc bb3c4f88     ....q.u..r[..O<.
240251d0:	bb19302a bae6465e ba968343 ba0a9e4b     *0..^F..C...K...
240251e0:	38b2657b 3a3188d8 3aa1968b 3ae3d81a     {e.8..1:...:...:
240251f0:	3b0eff3c 3b2760b8 3b3a90fe 3b483745     <..;.`';..:;E7H;
24025200:	3b5022a0 3b5249f5 3b4ecb32 3b45e946     ."P;.IR;2.N;F.E;
24025210:	3b380968 3b25af57 3b0f78fc 3aec3344     h.8;W.%;.x.;D3.:
24025220:	3ab4a93e 3a73df43 39f6af20 3740a839     >..:C.s: ..99.@7
24025230:	b9e3e2da ba60843e baa2fb00 bacfec00     ....>.`.........
24025240:	baf60d63 bb0a4651 bb15683c bb1c3daa     c...QF..<h...=..
24025250:	bb1eb608 bb1cde9c bb16e154 bb0d0305     ........T.......
24025260:	baff418a bade59a9 bab8562a ba8e5a31     .A...Y..*V..1Z..
24025270:	ba4337de b9cd6f70 b81b87d2 39a29dc6     .7C.po.........9
24025280:	3a280548 3a783e8f 3aa00455 3abedb9b     H.(:.>x:U..:...:
24025290:	3ad7f692 3aead1d4 3af7175f 3afc9fd3     ...:...:_..:...:
240252a0:	3afb724c 3af3c2d2 3ae5eff2 3ad27f56     Lr.:...:...:V..:
240252b0:	3aba1904 3a9d822d 3a7b2f1f 3a368d63     ...:-..:./{:c.6:
240252c0:	39de1e16 391aae0d b902b206 b9ca34ba     ...9...9.....4..
240252d0:	ba24df29 ba5e6529 ba88252c ba9cb3d4     ).$.)e^.,%......
240252e0:	baac6bd8 bab6fd6d babc3cf7 babc2344     .k..m....<..D#..
240252f0:	bab6ccdb baac7869 ba9d8446 ba8a6b42     ....ix..F...Bk..
24025300:	ba67819f ba345946 b9f99775 b984b7e5     ..g.FY4.u.......
24025310:	b7d2e403 3953d6da 39dd8fe4 3a257140     ......S9...9@q%:
24025320:	3a579f82 3a82142e 3a95034d 3aa43966     ..W:...:M..:f9.:
24025330:	3aaf6527 3ab658e8 3ab900d4 3ab763e9     'e.:.X.:...:.c.:
24025340:	3ab1a776 3aa80b5d 3a9ae616 3a8aa371     v..:]..:...:q..:
24025350:	3a6f8528 3a45a363 3a18d2a0 39d4a213     (.o:c.E:...:...9
24025360:	396d8cbd 3854c47d b8f5d376 b98f138d     ..m9}.T8v.......
24025370:	b9d8266e ba0b664f ba24b587 ba375a72     n&..Of....$.rZ7.
24025380:	ba42d973 ba46e3ab ba43581c ba3842aa     s.B...F..XC..B8.
24025390:	ba25db46 ba0c8324 b9d98431 b98e8577     F.%.$...1...w...
240253a0:	b8e66ce8 388dddf8 3986ca10 39ee59cd     .l.....8...9.Y.9
240253b0:	3a2c0adb 3a60f53f 3a8a736f 3aa3723f     ..,:?.`:os.:?r.:
240253c0:	3abb010e 3ad0b3b2 3ae429e8 3af51105     ...:...:.).:...:
240253d0:	3b01929b 3b071928 3b0b0a2e 3b0d5bef     ...;(..;...;.[.;
240253e0:	3b0e0cb8 3b0d22ab 3b0aab52 3b06bb0f     ...;.".;R..;...;
240253f0:	3b016c61 3af5be2c 3ae66ee9 3ad53a80     al.;,..:.n.:.:.:
24025400:	3ac27598 3aae7804 3a999afc 3a84372e     .u.:.x.:...:.7.:
24025410:	3a5d460b 3a326265 3a085e5c 39bf8fbd     .F]:eb2:\^.:...9
24025420:	39647818 38a67ca9 b84c66a3 b92d64dd     .xd9.|.8.fL..d-.
24025430:	b98d60b9 b9bd4b9e b9e64ab2 ba042b83     .`...K...J...+..
24025440:	ba11c4db ba1c0c0f ba23287f ba274cb9     .........(#..L'.
24025450:	ba28b3e0 ba27a0a6 ba245a6f ba1f2c3d     ..(...'.oZ$.=,..
24025460:	ba18624b ba1048b6 ba0729c3 b9fa9967     Kb...H...)..g...
24025470:	b9e5e912 b9d0bdfd b9bb87a7 b9a6a877     ............w...
24025480:	b992750e b97e67f6 b95a3b88 b938ba83     .u...g~..;Z...8.
24025490:	b91a20a8 b8fd2336 b8cc365a b8a16efe     . ..6#..Z6...n..
240254a0:	b8793f7f b83afe5a b8075a7f b828803b     .?y.Z.:..Z..;.(.

240254b0 <__leaf_table_fir16XLow>:
240254b0:	3b972596 3b1e7b86 3b4480c1 3b6dc089     .%.;.{.;..D;..m;
240254c0:	3b8cd267 3ba3b759 3bbb2b1d 3bd2b96e     g..;Y..;.+.;n..;
240254d0:	3be9d0a6 3bffde9f 3c0a28c2 3c13401d     ...;...;.(.<.@.<
240254e0:	3c1aea38 3c20d2d4 3c24b1bf 3c264050     8..<.. <..$<P@&<
240254f0:	3c254231 3c2184e5 3c1ae23a 3c1144ac     1B%<..!<:..<.D.<
24025500:	3c04a852 3bea35b8 3bc57a82 3b9b844f     R..<.5.;.z.;O..;
24025510:	3b59b9e7 3ae8df31 390d9a9e bace02ab     ..Y;1..:...9....
24025520:	bb58e2ab bba52c90 bbdc6792 bc086799     ..X..,...g...g..
24025530:	bc2082fc bc35d33f bc47ad66 bc556159     .. .?.5.f.G.YaU.
24025540:	bc5e636d bc6220c2 bc6039b8 bc5849be     mc^.. b..9`..IX.
24025550:	bc49fc99 bc35332e bc19f920 bbf0d07c     ..I..35. ...|...
24025560:	bba13d88 bb0be039 3a7d5bdc 3b8f0681     .=..9....[}:...;
24025570:	3c032156 3c41f940 3c818cfc 3ca2c966     V!.<@.A<...<f..<
24025580:	3cc430a8 3ce53b50 3d02b0cd 3d120e4c     .0.<P;.<...=L..=
24025590:	3d2074a4 3d2da6ca 3d396ad2 3d438d97     .t =..-=.j9=..C=
240255a0:	3d4be1b8 3d524230 3d56927e 3d58bf65     ..K=0BR=~.V=e.X=
240255b0:	3d58bf65 3d56927e 3d524230 3d4be1b8     e.X=~.V=0BR=..K=
240255c0:	3d438d97 3d396ad2 3d2da6ca 3d2074a4     ..C=.j9=..-=.t =
240255d0:	3d120e4c 3d02b0cd 3ce53b50 3cc430a8     L..=...=P;.<.0.<
240255e0:	3ca2c966 3c818cfc 3c41f940 3c032156     f..<...<@.A<V!.<
240255f0:	3b8f0681 3a7d5bdc bb0be039 bba13d88     ...;.[}:9....=..
24025600:	bbf0d07c bc19f920 bc35332e bc49fc99     |... ....35...I.
24025610:	bc5849be bc6039b8 bc6220c2 bc5e636d     .IX..9`.. b.mc^.
24025620:	bc556159 bc47ad66 bc35d33f bc2082fc     YaU.f.G.?.5... .
24025630:	bc086799 bbdc6792 bba52c90 bb58e2ab     .g...g...,....X.
24025640:	bace02ab 390d9a9e 3ae8df31 3b59b9e7     .......91..:..Y;
24025650:	3b9b844f 3bc57a82 3bea35b8 3c04a852     O..;.z.;.5.;R..<
24025660:	3c1144ac 3c1ae23a 3c2184e5 3c254231     .D.<:..<..!<1B%<
24025670:	3c264050 3c24b1bf 3c20d2d4 3c1aea38     P@&<..$<.. <8..<
24025680:	3c13401d 3c0a28c2 3bffde9f 3be9d0a6     .@.<.(.<...;...;
24025690:	3bd2b96e 3bbb2b1d 3ba3b759 3b8cd267     n..;.+.;Y..;g..;
240256a0:	3b6dc089 3b4480c1 3b1e7b86 3b972596     ..m;..D;.{.;.%.;

240256b0 <__leaf_table_fir2XHigh>:
240256b0:	b49880da b5b7cebc b60f0421 351be46f     ........!...o..5
240256c0:	36afcfc0 35ef7588 b7438162 b75168b6     ...6.u.5b.C..hQ.
240256d0:	37767f8a 3801affb b7433a4b b88142ed     ..v7...8K:C..B..
240256e0:	b73b9f94 38c99e8c 387f25ef b904a096     ..;....8.%.8....
240256f0:	b91dc7b6 3905bb34 399182b0 b89cbb8a     ....4..9...9....
24025700:	b9e3c624 b88f49b6 3a19ad36 39aa3647     $....I..6..:G6.9
24025710:	ba3395ca ba3a0853 3a2bc34d 3a9d6afd     ..3.S.:.M.+:.j.:
24025720:	b9dbcb4d bae4abaa b8d9f028 3b122fc8     M.......(..../.;
24025730:	3a7b840d bb24ade3 bb0ce216 3b1d89b6     ..{:..$........;
24025740:	3b6b7aa4 bae1214d bba7efa8 399667ea     .zk;M!.......g.9
24025750:	3bd42c70 3b019df0 bbef08c4 bba5eaab     p,.;...;........
24025760:	3bead4ee 3c103482 bbb96ff7 bc52bcad     ...;.4.<.o....R.
24025770:	3b1a42fc 3c8906e5 3b4b8157 bca165a1     .B.;...<W.K;.e..
24025780:	bc34b078 3cab1123 3cb21f27 bc9c27ca     x.4.#..<'..<.'..
24025790:	bd13065e 3c4965b1 3d62c939 3b7d04ce     ^....eI<9.b=..};
240257a0:	bdb30635 bd4002cd 3e3996fd 3ed30014     5.....@...9>...>
240257b0:	3ed30014 3e3996fd bd4002cd bdb30635     ...>..9>..@.5...
240257c0:	3b7d04ce 3d62c939 3c4965b1 bd13065e     ..};9.b=.eI<^...
240257d0:	bc9c27ca 3cb21f27 3cab1123 bc34b078     .'..'..<#..<x.4.
240257e0:	bca165a1 3b4b8157 3c8906e5 3b1a42fc     .e..W.K;...<.B.;
240257f0:	bc52bcad bbb96ff7 3c103482 3bead4ee     ..R..o...4.<...;
24025800:	bba5eaab bbef08c4 3b019df0 3bd42c70     ...........;p,.;
24025810:	399667ea bba7efa8 bae1214d 3b6b7aa4     .g.9....M!...zk;
24025820:	3b1d89b6 bb0ce216 bb24ade3 3a7b840d     ...;......$...{:
24025830:	3b122fc8 b8d9f028 bae4abaa b9dbcb4d     ./.;(.......M...
24025840:	3a9d6afd 3a2bc34d ba3a0853 ba3395ca     .j.:M.+:S.:...3.
24025850:	39aa3647 3a19ad36 b88f49b6 b9e3c624     G6.96..:.I..$...
24025860:	b89cbb8a 399182b0 3905bb34 b91dc7b6     .......94..9....
24025870:	b904a096 387f25ef 38c99e8c b73b9f94     .....%.8...8..;.
24025880:	b88142ed b7433a4b 3801affb 37767f8a     .B..K:C....8..v7
24025890:	b75168b6 b7438162 35ef7588 36afcfc0     .hQ.b.C..u.5...6
240258a0:	351be46f b60f0421 b5b7cebc b49880da     o..5!...........

240258b0 <__leaf_table_fir2XLow>:
240258b0:	3a8bdc32 bb955900 bc88e6bf bcac918f     2..:.Y..........
240258c0:	bb7aead8 3c98db7f 3c45342d bca916b1     ..z....<-4E<....
240258d0:	bcdbbdfe 3c9254a3 3d49d119 bb8d3cda     .....T.<..I=.<..
240258e0:	bdaf8d57 bd1ccea3 3e3ca03d 3ecf9165     W.......=.<>e..>
240258f0:	3ecf9165 3e3ca03d bd1ccea3 bdaf8d57     e..>=.<>....W...
24025900:	bb8d3cda 3d49d119 3c9254a3 bcdbbdfe     .<....I=.T.<....
24025910:	bca916b1 3c45342d 3c98db7f bb7aead8     ....-4E<...<..z.
24025920:	bcac918f bc88e6bf bb955900 3a8bdc32     .........Y..2..:

24025930 <__leaf_table_fir32XHigh>:
24025930:	378e3f75 3700c5e1 371d33b6 373d3b4e     u?.7...7.3.7N;=7
24025940:	37611473 37847a8c 379a88b4 37b2cd08     s.a7.z.7...7...7
24025950:	37cd5dd4 37ea4e7d 3804d820 3815c901     .].7}N.7 ..8...8
24025960:	3827ff7f 383b7f0e 385048f6 38665c17     ..'8..;8.HP8.\f8
24025970:	387db4fb 388b26f1 38980eb6 38a58bc7     ..}8.&.8...8...8
24025980:	38b3963b 38c22506 38d12cdc 38e0a0ea     ;..8.%.8.,.8...8
24025990:	38f07210 390047dc 390873a9 3910b1f1     .r.8.G.9.s.9...9
240259a0:	3918f72d 39213708 39296412 39316fd0     -..9.7!9.d)9.o19
240259b0:	39394aa4 3940e410 39482acb 394f0c66     .J99..@9.*H9f.O9
240259c0:	39557593 395b5287 39608eab 39651479     .uU9.R[9..`9y.e9
240259d0:	3968ce3b 396ba5b4 396d83e8 396e5212     ;.h9..k9..m9.Rn9
240259e0:	396df933 396c61c5 39697544 39651c4d     3.m9.al9Dui9M.e9
240259f0:	395f40df 3957ccd4 394eab18 3943c748     .@_9..W9..N9H.C9
24025a00:	39370e41 39286e00 3917d5d4 3905369c     A.79.n(9...9.6.9
24025a10:	38e105ed 38b35ec6 388164bf 38161265     ...8.^.8.d.8e..8
24025a20:	370212d7 b7bbd1b2 b8653559 b8baa9fe     ...7....Y5e.....
24025a30:	b9038b35 b92be653 b9565a81 b9816b8d     5...S.+..ZV..k..
24025a40:	b998a4fe b9b0cdf5 b9c9d98e b9e3b93b     ............;...
24025a50:	b9fe5c44 ba0cd837 ba1ad0e7 ba290d34     D\..7.......4.).
24025a60:	ba37814f ba4620a9 ba54ddd7 ba63aa9a     O.7.. F...T...c.
24025a70:	ba727810 ba809b59 ba87eb28 ba8f230a     .xr.Y...(....#..
24025a80:	ba963a50 ba9d2813 baa3e336 baaa626d     P:...(..6...mb..
24025a90:	bab09c57 bab6878d babc1aa3 bac14c35     W...........5L..
24025aa0:	bac612e3 baca656b bace3aae bad189cf     ....ke...:......
24025ab0:	bad44a3b bad673c9 bad7feb8 bad8e3b4     ;J...s..........
24025ac0:	bad91bd2 bad8a0a1 bad76c55 bad579f5     ........Ul...y..
24025ad0:	bad2c562 bacf4b22 bacb0835 bac5fa63     b..."K..5...c...
24025ae0:	bac020dd bab97c33 bab20ce9 baa9d398     . ..3|..........
24025af0:	baa0d598 ba9714b8 ba8c9720 ba81627a     ........ ...zb..
24025b00:	ba6afc11 ba51e414 ba378fa3 ba1c1385     ..j...Q...7.....
24025b10:	b9ff0d36 b9c403b6 b9874074 b911fa83     6.......t@......
24025b20:	b7977a12 38dc3d92 3970a6d7 39ba0cf7     .z...=.8..p9...9
24025b30:	39fbf1c1 3a1eda75 3a3f83aa 3a5fcbeb     ...9u..:..?:.._:
24025b40:	3a7f89ee 3a8f49dd 3a9e5f80 3aacf08e     ...:.I.:._.:...:
24025b50:	3abae7ba 3ac82fcf 3ad4b3ca 3ae05ef6     ...:./.:...:.^.:
24025b60:	3aeb1d0f 3af4da5a 3afd83c8 3b028384     ...:Z..:...:...;
24025b70:	3b05a958 3b082b2b 3b0a0157 3b0b24d0     X..;++.;W..;.$.;
24025b80:	3b0b8f36 3b0b3ae3 3b0a22ee 3b084345     6..;.:.;.".;EC.;
24025b90:	3b0598ad 3b0220d1 3afbb4a1 3af18984     ...;. .;...:...:
24025ba0:	3ae5c178 3ad85fca 3ac969cb 3ab8e70b     x..:._.:.i.:...:
24025bb0:	3aa6e135 3a936431 3a7cfc27 3a507e56     5..:1d.:'.|:V~P:
24025bc0:	3a2173f0 39e00c98 39718c0c 37d77bf0     .s!:...9..q9.{.7
24025bd0:	b942e4f6 b9d3850d ba242269 ba5f97b7     ..B.....i"$..._.
24025be0:	ba8deee8 baac5673 bacadd15 bae95c17     ....sV.......\..
24025bf0:	bb03d5ba bb12d120 bb218b2f bb2feeae     .... .../.!.../.
24025c00:	bb3de5df bb4b5af5 bb583801 bb6466f8     ..=..ZK..8X..fd.
24025c10:	bb6fd1f5 bb7a6344 bb8202b3 bb86519e     ..o.Dcz......Q..
24025c20:	bb8a1414 bb8d400e bb8fcbd2 bb91ae0b     .....@..........
24025c30:	bb92ddd2 bb9352bb bb9304df bb91ece2     .....R..........
24025c40:	bb900408 bb8d4438 bb89a809 bb852aca     ....8D.......*..
24025c50:	bb7f9117 bb72fc4f bb649293 bb5450e1     ....O.r...d..PT.
24025c60:	bb4235ed bb2e422d bb1877e5 bb00db2a     .5B.-B...w..*...
24025c70:	bacee3bd ba988766 ba3d68ae b986053f     ....f....h=.?...
24025c80:	3977ba7e 3a452f57 3aa93e79 3af2c6f4     ~.w9W/E:y>.:...:
24025c90:	3b1f8474 3b46ec81 3b6f8484 3b8c99eb     t..;..F;..o;...;
24025ca0:	3ba1f023 3bb7b744 3bcde112 3be45e8f     #..;D..;...;.^.;
24025cb0:	3bfb2081 3c090b7d 3c1498e7 3c203031     . .;}..<...<10 <
24025cc0:	3c2bc8ef 3c375a96 3c42dc87 3c4e4617     ..+<.Z7<..B<.FN<
24025cd0:	3c598e98 3c64ad5f 3c6f99cf 3c7a4b5f     ..Y<_.d<..o<_Kz<
24025ce0:	3c825cd4 3c876e32 3c8c55c1 3c910f90     .\.<2n.<.U.<...<
24025cf0:	3c9597d0 3c99ead5 3c9e051a 3ca1e342     ...<...<...<B..<
24025d00:	3ca58222 3ca8debd 3cabf64d 3caec63f     "..<...<M..<?..<
24025d10:	3cb14c3f 3cb38632 3cb5723b 3cb70ec0     ?L.<2..<;r.<...<
24025d20:	3cb85a66 3cb95417 3cb9fb02 3cba4e9b     fZ.<.T.<...<.N.<
24025d30:	3cba4e9b 3cb9fb02 3cb95417 3cb85a66     .N.<...<.T.<fZ.<
24025d40:	3cb70ec0 3cb5723b 3cb38632 3cb14c3f     ...<;r.<2..<?L.<
24025d50:	3caec63f 3cabf64d 3ca8debd 3ca58222     ?..<M..<...<"..<
24025d60:	3ca1e342 3c9e051a 3c99ead5 3c9597d0     B..<...<...<...<
24025d70:	3c910f90 3c8c55c1 3c876e32 3c825cd4     ...<.U.<2n.<.\.<
24025d80:	3c7a4b5f 3c6f99cf 3c64ad5f 3c598e98     _Kz<..o<_.d<..Y<
24025d90:	3c4e4617 3c42dc87 3c375a96 3c2bc8ef     .FN<..B<.Z7<..+<
24025da0:	3c203031 3c1498e7 3c090b7d 3bfb2081     10 <...<}..<. .;
24025db0:	3be45e8f 3bcde112 3bb7b744 3ba1f023     .^.;...;D..;#..;
24025dc0:	3b8c99eb 3b6f8484 3b46ec81 3b1f8474     ...;..o;..F;t..;
24025dd0:	3af2c6f4 3aa93e79 3a452f57 3977ba7e     ...:y>.:W/E:~.w9
24025de0:	b986053f ba3d68ae ba988766 bacee3bd     ?....h=.f.......
24025df0:	bb00db2a bb1877e5 bb2e422d bb4235ed     *....w..-B...5B.
24025e00:	bb5450e1 bb649293 bb72fc4f bb7f9117     .PT...d.O.r.....
24025e10:	bb852aca bb89a809 bb8d4438 bb900408     .*......8D......
24025e20:	bb91ece2 bb9304df bb9352bb bb92ddd2     .........R......
24025e30:	bb91ae0b bb8fcbd2 bb8d400e bb8a1414     .........@......
24025e40:	bb86519e bb8202b3 bb7a6344 bb6fd1f5     .Q......Dcz...o.
24025e50:	bb6466f8 bb583801 bb4b5af5 bb3de5df     .fd..8X..ZK...=.
24025e60:	bb2feeae bb218b2f bb12d120 bb03d5ba     .././.!. .......
24025e70:	bae95c17 bacadd15 baac5673 ba8deee8     .\......sV......
24025e80:	ba5f97b7 ba242269 b9d3850d b942e4f6     .._.i"$.......B.
24025e90:	37d77bf0 39718c0c 39e00c98 3a2173f0     .{.7..q9...9.s!:
24025ea0:	3a507e56 3a7cfc27 3a936431 3aa6e135     V~P:'.|:1d.:5..:
24025eb0:	3ab8e70b 3ac969cb 3ad85fca 3ae5c178     ...:.i.:._.:x..:
24025ec0:	3af18984 3afbb4a1 3b0220d1 3b0598ad     ...:...:. .;...;
24025ed0:	3b084345 3b0a22ee 3b0b3ae3 3b0b8f36     EC.;.".;.:.;6..;
24025ee0:	3b0b24d0 3b0a0157 3b082b2b 3b05a958     .$.;W..;++.;X..;
24025ef0:	3b028384 3afd83c8 3af4da5a 3aeb1d0f     ...;...:Z..:...:
24025f00:	3ae05ef6 3ad4b3ca 3ac82fcf 3abae7ba     .^.:...:./.:...:
24025f10:	3aacf08e 3a9e5f80 3a8f49dd 3a7f89ee     ...:._.:.I.:...:
24025f20:	3a5fcbeb 3a3f83aa 3a1eda75 39fbf1c1     .._:..?:u..:...9
24025f30:	39ba0cf7 3970a6d7 38dc3d92 b7977a12     ...9..p9.=.8.z..
24025f40:	b911fa83 b9874074 b9c403b6 b9ff0d36     ....t@......6...
24025f50:	ba1c1385 ba378fa3 ba51e414 ba6afc11     ......7...Q...j.
24025f60:	ba81627a ba8c9720 ba9714b8 baa0d598     zb.. ...........
24025f70:	baa9d398 bab20ce9 bab97c33 bac020dd     ........3|... ..
24025f80:	bac5fa63 bacb0835 bacf4b22 bad2c562     c...5..."K..b...
24025f90:	bad579f5 bad76c55 bad8a0a1 bad91bd2     .y..Ul..........
24025fa0:	bad8e3b4 bad7feb8 bad673c9 bad44a3b     .........s..;J..
24025fb0:	bad189cf bace3aae baca656b bac612e3     .....:..ke......
24025fc0:	bac14c35 babc1aa3 bab6878d bab09c57     5L..........W...
24025fd0:	baaa626d baa3e336 ba9d2813 ba963a50     mb..6....(..P:..
24025fe0:	ba8f230a ba87eb28 ba809b59 ba727810     .#..(...Y....xr.
24025ff0:	ba63aa9a ba54ddd7 ba4620a9 ba37814f     ..c...T.. F.O.7.
24026000:	ba290d34 ba1ad0e7 ba0cd837 b9fe5c44     4.).....7...D\..
24026010:	b9e3b93b b9c9d98e b9b0cdf5 b998a4fe     ;...............
24026020:	b9816b8d b9565a81 b92be653 b9038b35     .k...ZV.S.+.5...
24026030:	b8baa9fe b8653559 b7bbd1b2 370212d7     ....Y5e........7
24026040:	38161265 388164bf 38b35ec6 38e105ed     e..8.d.8.^.8...8
24026050:	3905369c 3917d5d4 39286e00 39370e41     .6.9...9.n(9A.79
24026060:	3943c748 394eab18 3957ccd4 395f40df     H.C9..N9..W9.@_9
24026070:	39651c4d 39697544 396c61c5 396df933     M.e9Dui9.al93.m9
24026080:	396e5212 396d83e8 396ba5b4 3968ce3b     .Rn9..m9..k9;.h9
24026090:	39651479 39608eab 395b5287 39557593     y.e9..`9.R[9.uU9
240260a0:	394f0c66 39482acb 3940e410 39394aa4     f.O9.*H9..@9.J99
240260b0:	39316fd0 39296412 39213708 3918f72d     .o19.d)9.7!9-..9
240260c0:	3910b1f1 390873a9 390047dc 38f07210     ...9.s.9.G.9.r.8
240260d0:	38e0a0ea 38d12cdc 38c22506 38b3963b     ...8.,.8.%.8;..8
240260e0:	38a58bc7 38980eb6 388b26f1 387db4fb     ...8...8.&.8..}8
240260f0:	38665c17 385048f6 383b7f0e 3827ff7f     .\f8.HP8..;8..'8
24026100:	3815c901 3804d820 37ea4e7d 37cd5dd4     ...8 ..8}N.7.].7
24026110:	37b2cd08 379a88b4 37847a8c 37611473     ...7...7.z.7s.a7
24026120:	373d3b4e 371d33b6 3700c5e1 378e3f75     N;=7.3.7...7u?.7

24026130 <__leaf_table_fir32XLow>:
24026130:	3b4d823f 3a55cf8c 3a706768 3a862154     ?.M;..U:hgp:T!.:
24026140:	3a94a66d 3aa3bb15 3ab34fb9 3ac34e76     m..:...:.O.:vN.:
24026150:	3ad3a680 3ae44a48 3af51ddb 3b03044e     ...:HJ.:...:N..;
24026160:	3b0b7dd5 3b13e618 3b1c3764 3b24600c     .}.;...;d7.;.`$;
24026170:	3b2c53cc 3b340320 3b3b5eab 3b425663     .S,; .4;.^;;cVB;
24026180:	3b48d99d 3b4ed8d5 3b5442af 3b5905bf     ..H;..N;.BT;..Y;
24026190:	3b5d122c 3b605670 3b62c4a8 3b644ecf     ,.];pV`;..b;.Nd;
240261a0:	3b64e873 3b648692 3b631c8a 3b60a16c     s.d;..d;..c;l.`;
240261b0:	3b5d0942 3b584b18 3b525ee2 3b4b3c43     B.];.KX;.^R;C<K;
240261c0:	3b42dec7 3b39449f 3b2e6f08 3b226389     ..B;.D9;.o.;.c";
240261d0:	3b152695 3b06c368 3aee657c 3acd0b17     .&.;h..;|e.:...:
240261e0:	3aa96cdc 3a83abbe 3a37fed3 39ca654b     .l.:...:..7:Ke.9
240261f0:	38755daf b992c8e5 ba250bc7 ba81b2f1     .]u8......%.....
24026200:	bab18f78 bae162bb bb09638c bb21c289     x....b...c....!.
24026210:	bb3a3c2f bb528115 bb6a7228 bb80f569     /<:...R.(rj.i...
24026220:	bb8c63e6 bb977162 bba209ef bbac1b4f     .c..bq......O...
24026230:	bbb59193 bbbe58cf bbc66170 bbcd96b4     .....X..pa......
24026240:	bbd3e8d0 bbd9453b bbdd9b53 bbe0daf0     ....;E..S.......
24026250:	bbe2f508 bbe3dbe7 bbe38246 bbe1dcc3     ........F.......
24026260:	bbdee124 bbda8646 bbd4c572 bbcd9860     $...F...r...`...
24026270:	bbc4fa9c bbbae8e0 bbaf612b bba264d0     ........+a...d..
24026280:	bb93f53a bb841897 bb65a92c bb406171     :.......,.e.qa@.
24026290:	bb186d28 badbc095 ba81a933 b98b4d61     (m......3...aM..
240262a0:	3a00f888 3aa7f811 3b09b08f 3b41247c     ...:...:...;|$A;
240262b0:	3b7a4676 3b9a65a0 3bb844d9 3bd6a786     vFz;.e.;.D.;...;
240262c0:	3bf56f48 3c0a420f 3c19e611 3c2991e9     Ho.;.B.<...<..)<
240262d0:	3c39348f 3c48c41c 3c5832ea 3c676665     .49<..H<.2X<efg<
240262e0:	3c765f76 3c8280f8 3c89a26d 3c908c1b     v_v<...<m..<...<
240262f0:	3c97372d 3c9d9ca9 3ca3b5ec 3ca97c87     -7.<...<...<.|.<
24026300:	3caeea30 3cb3f976 3cb8a527 3cbce7e7     0..<v..<'..<...<
24026310:	3cc0bd91 3cc42181 3cc71049 3cc986bb     ...<.!.<I..<...<
24026320:	3ccb8252 3ccd0101 3cce0113 3cce8175     R..<...<...<u..<
24026330:	3cce8175 3cce0113 3ccd0101 3ccb8252     u..<...<...<R..<
24026340:	3cc986bb 3cc71049 3cc42181 3cc0bd91     ...<I..<.!.<...<
24026350:	3cbce7e7 3cb8a527 3cb3f976 3caeea30     ...<'..<v..<0..<
24026360:	3ca97c87 3ca3b5ec 3c9d9ca9 3c97372d     .|.<...<...<-7.<
24026370:	3c908c1b 3c89a26d 3c8280f8 3c765f76     ...<m..<...<v_v<
24026380:	3c676665 3c5832ea 3c48c41c 3c39348f     efg<.2X<..H<.49<
24026390:	3c2991e9 3c19e611 3c0a420f 3bf56f48     ..)<...<.B.<Ho.;
240263a0:	3bd6a786 3bb844d9 3b9a65a0 3b7a4676     ...;.D.;.e.;vFz;
240263b0:	3b41247c 3b09b08f 3aa7f811 3a00f888     |$A;...;...:...:
240263c0:	b98b4d61 ba81a933 badbc095 bb186d28     aM..3.......(m..
240263d0:	bb406171 bb65a92c bb841897 bb93f53a     qa@.,.e.....:...
240263e0:	bba264d0 bbaf612b bbbae8e0 bbc4fa9c     .d..+a..........
240263f0:	bbcd9860 bbd4c572 bbda8646 bbdee124     `...r...F...$...
24026400:	bbe1dcc3 bbe38246 bbe3dbe7 bbe2f508     ....F...........
24026410:	bbe0daf0 bbdd9b53 bbd9453b bbd3e8d0     ....S...;E......
24026420:	bbcd96b4 bbc66170 bbbe58cf bbb59193     ....pa...X......
24026430:	bbac1b4f bba209ef bb977162 bb8c63e6     O.......bq...c..
24026440:	bb80f569 bb6a7228 bb528115 bb3a3c2f     i...(rj...R./<:.
24026450:	bb21c289 bb09638c bae162bb bab18f78     ..!..c...b..x...
24026460:	ba81b2f1 ba250bc7 b992c8e5 38755daf     ......%......]u8
24026470:	39ca654b 3a37fed3 3a83abbe 3aa96cdc     Ke.9..7:...:.l.:
24026480:	3acd0b17 3aee657c 3b06c368 3b152695     ...:|e.:h..;.&.;
24026490:	3b226389 3b2e6f08 3b39449f 3b42dec7     .c";.o.;.D9;..B;
240264a0:	3b4b3c43 3b525ee2 3b584b18 3b5d0942     C<K;.^R;.KX;B.];
240264b0:	3b60a16c 3b631c8a 3b648692 3b64e873     l.`;..c;..d;s.d;
240264c0:	3b644ecf 3b62c4a8 3b605670 3b5d122c     .Nd;..b;pV`;,.];
240264d0:	3b5905bf 3b5442af 3b4ed8d5 3b48d99d     ..Y;.BT;..N;..H;
240264e0:	3b425663 3b3b5eab 3b340320 3b2c53cc     cVB;.^;; .4;.S,;
240264f0:	3b24600c 3b1c3764 3b13e618 3b0b7dd5     .`$;d7.;...;.}.;
24026500:	3b03044e 3af51ddb 3ae44a48 3ad3a680     N..;...:HJ.:...:
24026510:	3ac34e76 3ab34fb9 3aa3bb15 3a94a66d     vN.:.O.:...:m..:
24026520:	3a862154 3a706768 3a55cf8c 3b4d823f     T!.:hgp:..U:?.M;

24026530 <__leaf_table_fir4XHigh>:
24026530:	b6a7f358 b72fedf5 b7aaa2cd b7ed6056     X...../.....V`..
24026540:	b80ec5da b80cc44b b7efbf3c b7b64219     ....K...<....B..
24026550:	b79ecb73 b7d1317d b82dfbcd b8883541     s...}1....-.A5..
24026560:	b8b68ada b8cde484 b8c1173f b893894b     ........?...K...
24026570:	b8353635 b7dcf20b b80bfc6d b88ff4fe     565.....m.......
24026580:	b900045b b934aad9 b94be12c b9364a21     [.....4.,.K.!J6.
24026590:	b8f04abf b831eb28 36c491b7 b5f4edc1     .J..(.1....6....
240265a0:	b89ab241 b944211f b999503c b9b07a4e     A....!D.<P..Nz..
240265b0:	b996e536 b9250469 3481383c 38dfe43d     6...i.%.<8.4=..8
240265c0:	38cdf035 b82e1383 b989e0e3 b9f554e8     5..8.........T..
240265d0:	ba105b84 b9ed29c3 b94e6a44 38e23c24     .[...)..DjN.$<.8
240265e0:	39a493d2 399e1aee 383ff92f b9bc63ae     ...9...9/.?8.c..
240265f0:	ba3f76fb ba65dc1d ba3657f3 b976fdb8     .v?...e..W6...v.
24026600:	39a16ee2 3a3018e5 3a2a84cf 3957cc7e     .n.9..0:..*:~.W9
24026610:	ba00f89c ba937638 bab36c76 ba8a594d     ....8v..vl..MY..
24026620:	b99076c9 3a26ac5f 3aa26bd3 3a9d0a9f     .v.._.&:.k.:...:
24026630:	39f14ea8 ba33a7ab bae09378 bb0998a4     .N.9..3.x.......
24026640:	bacf420a b9a6d731 3a95c0ce 3b096af6     .B..1......:.j.;
24026650:	3b0441c3 3a5b75cd ba7f6db0 bb295330     .A.;.u[:.m..0S).
24026660:	bb4fe177 bb19972a b9befeff 3af95ea0     w.O.*........^.:
24026670:	3b5c85f0 3b52fc8c 3ab4b41d bab979d4     ..\;..R;...:.y..
24026680:	bb7deacf bb9badd1 bb626b25 b9d83d30     ..}.....%kb.0=..
24026690:	3b47a285 3bac2bfb 3ba3cf81 3b0dd391     ..G;.+.;...;...;
240266a0:	bb09fa80 bbbf7826 bbea488d bba8466e     ....&x...H..nF..
240266b0:	b9f05478 3b9eaea3 3c069182 3bff3007     xT.....;...<.0.;
240266c0:	3b5d4aa6 bb55e210 bc14e98e bc36455d     .J];..U.....]E6.
240266d0:	bc0203b4 ba02b937 3c030c90 3c5ca432     ....7......<2.\<
240266e0:	3c51e3bd 3bb65f23 bbb59a53 bc7e1f98     ..Q<#_.;S.....~.
240266f0:	bc9d3c27 bc61dfd6 ba0abc68 3c7a1b04     '<....a.h.....z<
24026700:	3cd5e46d 3cd14f59 3c3b02df bc4a2cd8     m..<YO.<..;<.,J.
24026710:	bd141ca5 bd443969 bd190353 ba0f1a80     ....i9D.S.......
24026720:	3d6cd273 3dfff00c 3e3c22ac 3e5f30ad     s.l=...=."<>.0_>
24026730:	3e5f30ad 3e3c22ac 3dfff00c 3d6cd273     .0_>."<>...=s.l=
24026740:	ba0f1a80 bd190353 bd443969 bd141ca5     ....S...i9D.....
24026750:	bc4a2cd8 3c3b02df 3cd14f59 3cd5e46d     .,J...;<YO.<m..<
24026760:	3c7a1b04 ba0abc68 bc61dfd6 bc9d3c27     ..z<h.....a.'<..
24026770:	bc7e1f98 bbb59a53 3bb65f23 3c51e3bd     ..~.S...#_.;..Q<
24026780:	3c5ca432 3c030c90 ba02b937 bc0203b4     2.\<...<7.......
24026790:	bc36455d bc14e98e bb55e210 3b5d4aa6     ]E6.......U..J];
240267a0:	3bff3007 3c069182 3b9eaea3 b9f05478     .0.;...<...;xT..
240267b0:	bba8466e bbea488d bbbf7826 bb09fa80     nF...H..&x......
240267c0:	3b0dd391 3ba3cf81 3bac2bfb 3b47a285     ...;...;.+.;..G;
240267d0:	b9d83d30 bb626b25 bb9badd1 bb7deacf     0=..%kb.......}.
240267e0:	bab979d4 3ab4b41d 3b52fc8c 3b5c85f0     .y.....:..R;..\;
240267f0:	3af95ea0 b9befeff bb19972a bb4fe177     .^.:....*...w.O.
24026800:	bb295330 ba7f6db0 3a5b75cd 3b0441c3     0S)..m...u[:.A.;
24026810:	3b096af6 3a95c0ce b9a6d731 bacf420a     .j.;...:1....B..
24026820:	bb0998a4 bae09378 ba33a7ab 39f14ea8     ....x.....3..N.9
24026830:	3a9d0a9f 3aa26bd3 3a26ac5f b99076c9     ...:.k.:_.&:.v..
24026840:	ba8a594d bab36c76 ba937638 ba00f89c     MY..vl..8v......
24026850:	3957cc7e 3a2a84cf 3a3018e5 39a16ee2     ~.W9..*:..0:.n.9
24026860:	b976fdb8 ba3657f3 ba65dc1d ba3f76fb     ..v..W6...e..v?.
24026870:	b9bc63ae 383ff92f 399e1aee 39a493d2     .c../.?8...9...9
24026880:	38e23c24 b94e6a44 b9ed29c3 ba105b84     $<.8DjN..)...[..
24026890:	b9f554e8 b989e0e3 b82e1383 38cdf035     .T..........5..8
240268a0:	38dfe43d 3481383c b9250469 b996e536     =..8<8.4i.%.6...
240268b0:	b9b07a4e b999503c b944211f b89ab241     Nz..<P...!D.A...
240268c0:	b5f4edc1 36c491b7 b831eb28 b8f04abf     .......6(.1..J..
240268d0:	b9364a21 b94be12c b934aad9 b900045b     !J6.,.K...4.[...
240268e0:	b88ff4fe b80bfc6d b7dcf20b b8353635     ....m.......565.
240268f0:	b893894b b8c1173f b8cde484 b8b68ada     K...?...........
24026900:	b8883541 b82dfbcd b7d1317d b79ecb73     A5....-.}1..s...
24026910:	b7b64219 b7efbf3c b80cc44b b80ec5da     .B..<...K.......
24026920:	b7ed6056 b7aaa2cd b72fedf5 b6a7f358     V`......../.X...

24026930 <__leaf_table_fir4XLow>:
24026930:	3a364090 bb0d9324 bba560cf bc143329     .@6:$....`..)3..
24026940:	bc538b8e bc77a919 bc6a6237 bc230d1e     ..S...w.7bj...#.
24026950:	bb3931b1 3ba3d1cc 3c3023d4 3c44cae5     .19....;.#0<..D<
24026960:	3c008e54 ba032f44 bc201e77 bc8184bc     T..<D/..w. .....
24026970:	bc79e9d3 bbecc8ca 3bbf3a91 3c990052     ..y......:.;R..<
24026980:	3ccd8bf1 3ca8719f 3b98a2e0 bc927492     ...<.q.<...;.t..
24026990:	bd1bae49 bd390efa bcff2783 3bd6bce9     I.....9..'.....;
240269a0:	3d80a944 3e00cf9b 3e3864cf 3e5887a9     D..=...>.d8>..X>
240269b0:	3e5887a9 3e3864cf 3e00cf9b 3d80a944     ..X>.d8>...>D..=
240269c0:	3bd6bce9 bcff2783 bd390efa bd1bae49     ...;.'....9.I...
240269d0:	bc927492 3b98a2e0 3ca8719f 3ccd8bf1     .t.....;.q.<...<
240269e0:	3c990052 3bbf3a91 bbecc8ca bc79e9d3     R..<.:.;......y.
240269f0:	bc8184bc bc201e77 ba032f44 3c008e54     ....w. .D/..T..<
24026a00:	3c44cae5 3c3023d4 3ba3d1cc bb3931b1     ..D<.#0<...;.19.
24026a10:	bc230d1e bc6a6237 bc77a919 bc538b8e     ..#.7bj...w...S.
24026a20:	bc143329 bba560cf bb0d9324 3a364090     )3...`..$....@6:

24026a30 <__leaf_table_fir64XHigh>:
24026a30:	37c035ea 36b40ce5 36c8e77c 36df33f6     .5.7...6|..6.3.6
24026a40:	36f6fd4d 37082b0d 3715a2f7 3723f0eb     M..6.+.7...7..#7
24026a50:	37331958 374323a1 3754181b 3765fad3     X.37.#C7..T7..e7
24026a60:	3778d427 37865585 3790c240 379bb3e5     '.x7.U.7@..7...7
24026a70:	37a72dba 37b332b4 37bfc58a 37cce962     .-.7.2.7...7b..7
24026a80:	37daa169 37e8efd2 37f7d758 3803ad78     i..7...7X..7x..8
24026a90:	380bbe60 38141f5b 381cd170 3825d5b4     `..8[..8p..8..%8
24026aa0:	382f2cf6 3838d7c2 3842d6ae 384d2a36     .,/8..88..B86*M8
24026ab0:	3857d2c3 3862d090 386e2394 3879cbc6     ..W8..b8.#n8..y8
24026ac0:	3882e48a 38890da3 388f60f1 3895de2d     ...8...8.`.8-..8
24026ad0:	389c8514 38a3554e 38aa4e5e 38b16fb1     ...8NU.8^N.8.o.8
24026ae0:	38b8b8a6 38c0288d 38c7be9a 38cf79e3     ...8.(.8...8.y.8
24026af0:	38d75959 38df5bd4 38e78018 38efc4d6     YY.8.[.8...8...8
24026b00:	38f8289e 390054ef 3904a378 3908ff10     .(.8.T.9x..9...9
24026b10:	390d66d8 3911d9e6 39165740 391adddd     .f.9...9@W.9...9
24026b20:	391f6caa 39240289 39289e4a 392d3ea2     .l.9..$9J.(9.>-9
24026b30:	3931e237 393687a3 393b2d70 393fd210     7.19..69p-;9..?9
24026b40:	394473ef 39491174 394da90a 3952390d     .sD9t.I9..M9.9R9
24026b50:	3956bfd6 395b3bb2 395faaea 39640bbc     ..V9.;[9.._9..d9
24026b60:	39685c41 396c9a75 3970c441 3974d784     A\h9u.l9A.p9..t9
24026b70:	3978d20a 397cb19c 39803a10 39820bca     ..x9..|9.:.9...9
24026b80:	3983ccf8 39857c9b 398719ad 3988a30b     ...9.|.9...9...9
24026b90:	398a176f 398b757f 398cbbe5 398de954     o..9.u.9...9T..9
24026ba0:	398efcbc 398ff55f 3990d26c 399192e7     ...9_..9l..9...9
24026bb0:	39923536 3992b71a 399316cd 39935425     65.9...9...9%T.9
24026bc0:	399370f5 39936c11 39933937 3992e777     .p.9.l.979.9w..9
24026bd0:	39926ac3 3991c606 3990f779 398ffe03     .j.9...9y..9...9
24026be0:	398ed8c1 398d8690 398c068f 398a57cc     ...9...9...9.W.9
24026bf0:	39887945 39866a35 398429b6 3981b6ed     Ey.95j.9.).9...9
24026c00:	397e2244 39786f2a 39725322 396bccdc     D"~9*ox9"Sr9..k9
24026c10:	3964db36 395d7d14 3955b161 394d774c     6.d9.}]9a.U9LwM9
24026c20:	3944ce19 393bb50d 39322b95 39283147     ..D9..;9.+29G1(9
24026c30:	391dc5de 3912e921 39079af6 38f7b6de     ...9!..9...9...8
24026c40:	38df557b 38c61279 38abeec6 3890eb94     {U.8y..8...8...8
24026c50:	386a14f6 38309ad5 37eada32 37624235     ..j8..082..75Bb7
24026c60:	b5bea9e6 b78c3c69 b807e35a b84b3d71     ....i<..Z...q=K.
24026c70:	b888124a b8ab4818 b8cf3b7b b8f3e774     J....H..{;..t...
24026c80:	b90ca359 b91fa9ce b9330420 b946af27     Y....... .3.'.F.
24026c90:	b95aa790 b96ee9e0 b981b93f b98c1ed7     ..Z...n.?.......
24026ca0:	b996a3c3 b9a145fd b9ac0365 b9b6d9ce     .....E..e.......
24026cb0:	b9c1c6f5 b9ccc87e b9d7dbfd b9e2fef3     ....~...........
24026cc0:	b9ee2ed6 b9f9690a ba025571 ba07f8d4     .....i..qU......
24026cd0:	ba0d9d4c ba134171 ba18e3cc ba1e82e1     L...qA..........
24026ce0:	ba241d2a ba29b11f ba2f3d33 ba34bfd4     *.$...).3=/...4.
24026cf0:	ba3a376e ba3fa26d ba44ff39 ba4a4c31     n7:.m.?.9.D.1LJ.
24026d00:	ba4f87ab ba54affe ba59c37d ba5ec077     ..O...T.}.Y.w.^.
24026d10:	ba63a547 ba68704d ba6d1fe4 ba71b265     G.c.Mph...m.e.q.
24026d20:	ba76261e ba7a795d ba7eaa6f ba815bda     .&v.]yz.o.~..[..
24026d30:	ba834fd3 ba85305e ba86fcad ba88b3ed     .O..^0..........
24026d40:	ba8a5544 ba8bdffb ba8d5370 ba8eaef4     DU......pS......
24026d50:	ba8ff1aa ba911ab3 ba9229ac ba931e2f     .........)../...
24026d60:	ba93f6b4 ba94b396 ba9553a2 ba95d682     .........S......
24026d70:	ba963ba1 ba968274 ba96aa8a ba96b362     .;..t.......b...
24026d80:	ba969c95 ba9665bd ba960e75 ba95966e     .....e..u...n...
24026d90:	ba94fd59 ba9442ef ba9366f6 ba92693d     Y....B...f..=i..
24026da0:	ba91499b ba9007f0 ba8ea429 ba8d1e3d     .I......)...=...
24026db0:	ba8b7629 ba89abf5 ba87bfba ba85b195     )v..............
24026dc0:	ba8381b0 ba81303f ba7d7b05 ba78538e     ....?0...{}..Sx.
24026dd0:	ba72eac4 ba6d416a ba675859 ba613086     ..r.jAm.YXg..0a.
24026de0:	ba5acafb ba5428d4 ba4d4b43 ba463396     ..Z..(T.CKM..3F.
24026df0:	ba3ee32f ba375b89 ba2f9e30 ba27acca     /.>..[7.0./...'.
24026e00:	ba1f8912 ba1734dd ba0eb215 ba0602b5     .....4..........
24026e10:	b9fa519e b9e84d0e b9d5fc2c b9c36398     .Q...M..,....c..
24026e20:	b9b0880f b99d6e79 b98a1be0 b96d2aee     ....yn.......*m.
24026e30:	b945c126 b91e0553 b8ec0532 b89b88a6     &.E.S...2.......
24026e40:	b8155869 364f10e4 382f9b1d 38a93a72     iX....O6../8r:.8
24026e50:	38faa655 3925fbff 394e8b00 3976f35b     U..8..%9..N9[.v9
24026e60:	398f940f 39a38e1b 39b76141 39cb06e3     ...9...9Aa.9...9
24026e70:	39de785b 39f1aef5 3a0251fe 3a0ba85c     [x.9...9.Q.:\..:
24026e80:	3a14d73d 3a1ddb4e 3a26b13b 3a2f55b3     =..:N..:;.&:.U/:
24026e90:	3a37c569 3a3ffd11 3a47f966 3a4fb731     i.7:..?:f.G:1.O:
24026ea0:	3a57334a 3a5e6a91 3a6559ed 3a6bfe51     J3W:.j^:.Ye:Q.k:
24026eb0:	3a7254b5 3a785a26 3a7e0bca 3a81b370     .Tr:&Zx:..~:p..:
24026ec0:	3a84345a 3a868749 3a88aaef 3a8a9e0c     Z4.:I..:...:...:
24026ed0:	3a8c5f74 3a8dee0e 3a8f48b6 3a906e4f     t_.:...:.H.:On.:
24026ee0:	3a915dde 3a921688 3a92976c 3a92df8e     .].:...:l..:...:
24026ef0:	3a92ee3e 3a92c2ff 3a925cc5 3a91bb60     >..:...:.\.:`..:
24026f00:	3a90de14 3a8fc48a 3a8e6e63 3a8cdb4b     ...:...:cn.:K..:
24026f10:	3a8b0b1a 3a88fd9c 3a86b2c9 3a842aa6     ...:...:...:.*.:
24026f20:	3a816542 3a7cc59c 3a764716 3a6f4f93     Be.:..|:.Gv:.Oo:
24026f30:	3a67dfe9 3a5ff919 3a579c4c 3a4ecaca     ..g:.._:L.W:..N:
24026f40:	3a458612 3a3bcfd3 3a31a9db 3a271623     ..E:..;:..1:#.':
24026f50:	3a1c16d5 3a10ae47 3a04def9 39f1571b     ...:G..:...:.W.9
24026f60:	39d82dad 39be47a0 39a3ab44 39885f35     .-.9.G.9D..95_.9
24026f70:	3958d4b1 391fa7d1 38ca8dec 3827077a     ..X9...9...8z.'8
24026f80:	b796b95b b8a0e6a0 b90f011b b94e6e89     [............nN.
24026f90:	b9875484 b9a7cec0 b9c89c2e b9e9b2c3     .T..............
24026fa0:	ba05841a ba1648fc ba2722a6 ba380b9f     .....H..."'...8.
24026fb0:	ba48fe55 ba59f51d ba6aea33 ba7bd7bf     U.H...Y.3.j...{.
24026fc0:	ba865be8 ba8ec234 ba971bba ba9f6568     .[..4.......he..
24026fd0:	baa79c28 baafbcdd bab7c463 babfaf94     (.......c.......
24026fe0:	bac77b42 bacf2442 bad6a762 bade0171     B{..B$..b...q...
24026ff0:	bae52f3f baec2d9b baf2f959 baf98f4d     ?/...-..Y...M...
24027000:	baffec4f bb03069d bb05f778 bb08c72d     O.......x...-...
24027010:	bb0b7435 bb0dfd0b bb106032 bb129c30     5t......2`..0...
24027020:	bb14af90 bb1698e3 bb1856c1 bb19e7ca     .........V......
24027030:	bb1b4aa8 bb1c7e07 bb1d809f bb1e512f     .J...~....../Q..
24027040:	bb1eee7f bb1f5765 bb1f8abf bb1f8775     ....eW......u...
24027050:	bb1f4c77 bb1ed8c2 bb1e2b62 bb1d436e     wL......b+..nC..
24027060:	bb1c200a bb1ac063 bb1923b0 bb174943     . ..c....#..CI..
24027070:	bb153074 bb12d8a8 bb10414c bb0d69eb     t0......LA...i..
24027080:	bb0a521d bb06f976 bb035fa9 baff0915     .R..v...._......
24027090:	baf6cf98 baee12d3 bae4d288 badb0ec4     ................
240270a0:	bad0c7b3 bac5fd88 babab0c2 baaee1d7     ................
240270b0:	baa29177 ba95c079 ba886fbc ba7540b1     w...y....o...@u.
240270c0:	ba58a70c ba3b1529 ba1c8df1 b9fa293c     ..X.).;.....<)..
240270d0:	b9b95958 b96d6728 b8c8ff58 381fcabf     XY..(gm.X......8
240270e0:	3937ddf1 39a59799 39f0e946 3a1eecc3     ..79...9F..9...:
240270f0:	3a462ead 3a6e34a9 3a8b7c64 3aa03a71     ..F:.4n:d|.:q:.:
24027100:	3ab55148 3acabd97 3ae07bf4 3af688dc     HQ.:...:.{.:...:
24027110:	3b067058 3b11bfdd 3b1d3112 3b28c204     Xp.;...;.1.;..(;
24027120:	3b3470b4 3b403b18 3b4c1f1c 3b581aa2     .p4;.;@;..L;..X;
24027130:	3b642b82 3b704f8a 3b7c8482 3b846414     .+d;.Op;..|;.d.;
24027140:	3b8a8c1b 3b90b92e 3b96ea22 3b9d1dca     ...;...;"..;...;
24027150:	3ba352f6 3ba98873 3bafbd0e 3bb5ef90     .R.;s..;...;...;
24027160:	3bbc1ec2 3bc2496d 3bc86e56 3bce8c44     ...;mI.;Vn.;D..;
24027170:	3bd4a1ff 3bdaae4c 3be0aff2 3be6a5ba     ...;L..;...;...;
24027180:	3bec8e6c 3bf268d3 3bf833ba 3bfdedf1     l..;.h.;.3.;...;
24027190:	3c01cb24 3c0495c8 3c075651 3c0a0c2b     $..<...<QV.<+..<
240271a0:	3c0cb6c5 3c0f5590 3c11e7fd 3c146d81     ...<.U.<...<.m.<
240271b0:	3c16e594 3c194faf 3c1bab4e 3c1df7f2     ...<.O.<N..<...<
240271c0:	3c20351b 3c22624f 3c247f16 3c268afa     .5 <Ob"<..$<..&<
240271d0:	3c28858d 3c2a6e60 3c2c4509 3c2e0921     ..(<`n*<.E,<!..<
240271e0:	3c2fba48 3c31581e 3c32e24a 3c345876     H./<.X1<J.2<vX4<
240271f0:	3c35ba50 3c37078a 3c383fdc 3c396301     P.5<..7<.?8<.c9<
24027200:	3c3a70ba 3c3b68cb 3c3c4afe 3c3d1721     .p:<.h;<.J<<!.=<
24027210:	3c3dcd07 3c3e6c88 3c3ef582 3c3f67d6     ..=<.l><..><.g?<
24027220:	3c3fc369 3c40082b 3c403609 3c404cfb     i.?<+.@<.6@<.L@<
24027230:	3c404cfb 3c403609 3c40082b 3c3fc369     .L@<.6@<+.@<i.?<
24027240:	3c3f67d6 3c3ef582 3c3e6c88 3c3dcd07     .g?<..><.l><..=<
24027250:	3c3d1721 3c3c4afe 3c3b68cb 3c3a70ba     !.=<.J<<.h;<.p:<
24027260:	3c396301 3c383fdc 3c37078a 3c35ba50     .c9<.?8<..7<P.5<
24027270:	3c345876 3c32e24a 3c31581e 3c2fba48     vX4<J.2<.X1<H./<
24027280:	3c2e0921 3c2c4509 3c2a6e60 3c28858d     !..<.E,<`n*<..(<
24027290:	3c268afa 3c247f16 3c22624f 3c20351b     ..&<..$<Ob"<.5 <
240272a0:	3c1df7f2 3c1bab4e 3c194faf 3c16e594     ...<N..<.O.<...<
240272b0:	3c146d81 3c11e7fd 3c0f5590 3c0cb6c5     .m.<...<.U.<...<
240272c0:	3c0a0c2b 3c075651 3c0495c8 3c01cb24     +..<QV.<...<$..<
240272d0:	3bfdedf1 3bf833ba 3bf268d3 3bec8e6c     ...;.3.;.h.;l..;
240272e0:	3be6a5ba 3be0aff2 3bdaae4c 3bd4a1ff     ...;...;L..;...;
240272f0:	3bce8c44 3bc86e56 3bc2496d 3bbc1ec2     D..;Vn.;mI.;...;
24027300:	3bb5ef90 3bafbd0e 3ba98873 3ba352f6     ...;...;s..;.R.;
24027310:	3b9d1dca 3b96ea22 3b90b92e 3b8a8c1b     ...;"..;...;...;
24027320:	3b846414 3b7c8482 3b704f8a 3b642b82     .d.;..|;.Op;.+d;
24027330:	3b581aa2 3b4c1f1c 3b403b18 3b3470b4     ..X;..L;.;@;.p4;
24027340:	3b28c204 3b1d3112 3b11bfdd 3b067058     ..(;.1.;...;Xp.;
24027350:	3af688dc 3ae07bf4 3acabd97 3ab55148     ...:.{.:...:HQ.:
24027360:	3aa03a71 3a8b7c64 3a6e34a9 3a462ead     q:.:d|.:.4n:..F:
24027370:	3a1eecc3 39f0e946 39a59799 3937ddf1     ...:F..9...9..79
24027380:	381fcabf b8c8ff58 b96d6728 b9b95958     ...8X...(gm.XY..
24027390:	b9fa293c ba1c8df1 ba3b1529 ba58a70c     <)......).;...X.
240273a0:	ba7540b1 ba886fbc ba95c079 baa29177     .@u..o..y...w...
240273b0:	baaee1d7 babab0c2 bac5fd88 bad0c7b3     ................
240273c0:	badb0ec4 bae4d288 baee12d3 baf6cf98     ................
240273d0:	baff0915 bb035fa9 bb06f976 bb0a521d     ....._..v....R..
240273e0:	bb0d69eb bb10414c bb12d8a8 bb153074     .i..LA......t0..
240273f0:	bb174943 bb1923b0 bb1ac063 bb1c200a     CI...#..c.... ..
24027400:	bb1d436e bb1e2b62 bb1ed8c2 bb1f4c77     nC..b+......wL..
24027410:	bb1f8775 bb1f8abf bb1f5765 bb1eee7f     u.......eW......
24027420:	bb1e512f bb1d809f bb1c7e07 bb1b4aa8     /Q.......~...J..
24027430:	bb19e7ca bb1856c1 bb1698e3 bb14af90     .....V..........
24027440:	bb129c30 bb106032 bb0dfd0b bb0b7435     0...2`......5t..
24027450:	bb08c72d bb05f778 bb03069d baffec4f     -...x.......O...
24027460:	baf98f4d baf2f959 baec2d9b bae52f3f     M...Y....-..?/..
24027470:	bade0171 bad6a762 bacf2442 bac77b42     q...b...B$..B{..
24027480:	babfaf94 bab7c463 baafbcdd baa79c28     ....c.......(...
24027490:	ba9f6568 ba971bba ba8ec234 ba865be8     he......4....[..
240274a0:	ba7bd7bf ba6aea33 ba59f51d ba48fe55     ..{.3.j...Y.U.H.
240274b0:	ba380b9f ba2722a6 ba1648fc ba05841a     ..8.."'..H......
240274c0:	b9e9b2c3 b9c89c2e b9a7cec0 b9875484     .............T..
240274d0:	b94e6e89 b90f011b b8a0e6a0 b796b95b     .nN.........[...
240274e0:	3827077a 38ca8dec 391fa7d1 3958d4b1     z.'8...8...9..X9
240274f0:	39885f35 39a3ab44 39be47a0 39d82dad     5_.9D..9.G.9.-.9
24027500:	39f1571b 3a04def9 3a10ae47 3a1c16d5     .W.9...:G..:...:
24027510:	3a271623 3a31a9db 3a3bcfd3 3a458612     #.':..1:..;:..E:
24027520:	3a4ecaca 3a579c4c 3a5ff919 3a67dfe9     ..N:L.W:.._:..g:
24027530:	3a6f4f93 3a764716 3a7cc59c 3a816542     .Oo:.Gv:..|:Be.:
24027540:	3a842aa6 3a86b2c9 3a88fd9c 3a8b0b1a     .*.:...:...:...:
24027550:	3a8cdb4b 3a8e6e63 3a8fc48a 3a90de14     K..:cn.:...:...:
24027560:	3a91bb60 3a925cc5 3a92c2ff 3a92ee3e     `..:.\.:...:>..:
24027570:	3a92df8e 3a92976c 3a921688 3a915dde     ...:l..:...:.].:
24027580:	3a906e4f 3a8f48b6 3a8dee0e 3a8c5f74     On.:.H.:...:t_.:
24027590:	3a8a9e0c 3a88aaef 3a868749 3a84345a     ...:...:I..:Z4.:
240275a0:	3a81b370 3a7e0bca 3a785a26 3a7254b5     p..:..~:&Zx:.Tr:
240275b0:	3a6bfe51 3a6559ed 3a5e6a91 3a57334a     Q.k:.Ye:.j^:J3W:
240275c0:	3a4fb731 3a47f966 3a3ffd11 3a37c569     1.O:f.G:..?:i.7:
240275d0:	3a2f55b3 3a26b13b 3a1ddb4e 3a14d73d     .U/:;.&:N..:=..:
240275e0:	3a0ba85c 3a0251fe 39f1aef5 39de785b     \..:.Q.:...9[x.9
240275f0:	39cb06e3 39b76141 39a38e1b 398f940f     ...9Aa.9...9...9
24027600:	3976f35b 394e8b00 3925fbff 38faa655     [.v9..N9..%9U..8
24027610:	38a93a72 382f9b1d 364f10e4 b8155869     r:.8../8..O6iX..
24027620:	b89b88a6 b8ec0532 b91e0553 b945c126     ....2...S...&.E.
24027630:	b96d2aee b98a1be0 b99d6e79 b9b0880f     .*m.....yn......
24027640:	b9c36398 b9d5fc2c b9e84d0e b9fa519e     .c..,....M...Q..
24027650:	ba0602b5 ba0eb215 ba1734dd ba1f8912     .........4......
24027660:	ba27acca ba2f9e30 ba375b89 ba3ee32f     ..'.0./..[7./.>.
24027670:	ba463396 ba4d4b43 ba5428d4 ba5acafb     .3F.CKM..(T...Z.
24027680:	ba613086 ba675859 ba6d416a ba72eac4     .0a.YXg.jAm...r.
24027690:	ba78538e ba7d7b05 ba81303f ba8381b0     .Sx..{}.?0......
240276a0:	ba85b195 ba87bfba ba89abf5 ba8b7629     ............)v..
240276b0:	ba8d1e3d ba8ea429 ba9007f0 ba91499b     =...)........I..
240276c0:	ba92693d ba9366f6 ba9442ef ba94fd59     =i...f...B..Y...
240276d0:	ba95966e ba960e75 ba9665bd ba969c95     n...u....e......
240276e0:	ba96b362 ba96aa8a ba968274 ba963ba1     b.......t....;..
240276f0:	ba95d682 ba9553a2 ba94b396 ba93f6b4     .....S..........
24027700:	ba931e2f ba9229ac ba911ab3 ba8ff1aa     /....)..........
24027710:	ba8eaef4 ba8d5370 ba8bdffb ba8a5544     ....pS......DU..
24027720:	ba88b3ed ba86fcad ba85305e ba834fd3     ........^0...O..
24027730:	ba815bda ba7eaa6f ba7a795d ba76261e     .[..o.~.]yz..&v.
24027740:	ba71b265 ba6d1fe4 ba68704d ba63a547     e.q...m.Mph.G.c.
24027750:	ba5ec077 ba59c37d ba54affe ba4f87ab     w.^.}.Y...T...O.
24027760:	ba4a4c31 ba44ff39 ba3fa26d ba3a376e     1LJ.9.D.m.?.n7:.
24027770:	ba34bfd4 ba2f3d33 ba29b11f ba241d2a     ..4.3=/...).*.$.
24027780:	ba1e82e1 ba18e3cc ba134171 ba0d9d4c     ........qA..L...
24027790:	ba07f8d4 ba025571 b9f9690a b9ee2ed6     ....qU...i......
240277a0:	b9e2fef3 b9d7dbfd b9ccc87e b9c1c6f5     ........~.......
240277b0:	b9b6d9ce b9ac0365 b9a145fd b996a3c3     ....e....E......
240277c0:	b98c1ed7 b981b93f b96ee9e0 b95aa790     ....?.....n...Z.
240277d0:	b946af27 b9330420 b91fa9ce b90ca359     '.F. .3.....Y...
240277e0:	b8f3e774 b8cf3b7b b8ab4818 b888124a     t...{;...H..J...
240277f0:	b84b3d71 b807e35a b78c3c69 b5bea9e6     q=K.Z...i<......
24027800:	37624235 37eada32 38309ad5 386a14f6     5Bb72..7..08..j8
24027810:	3890eb94 38abeec6 38c61279 38df557b     ...8...8y..8{U.8
24027820:	38f7b6de 39079af6 3912e921 391dc5de     ...8...9!..9...9
24027830:	39283147 39322b95 393bb50d 3944ce19     G1(9.+29..;9..D9
24027840:	394d774c 3955b161 395d7d14 3964db36     LwM9a.U9.}]96.d9
24027850:	396bccdc 39725322 39786f2a 397e2244     ..k9"Sr9*ox9D"~9
24027860:	3981b6ed 398429b6 39866a35 39887945     ...9.).95j.9Ey.9
24027870:	398a57cc 398c068f 398d8690 398ed8c1     .W.9...9...9...9
24027880:	398ffe03 3990f779 3991c606 39926ac3     ...9y..9...9.j.9
24027890:	3992e777 39933937 39936c11 399370f5     w..979.9.l.9.p.9
240278a0:	39935425 399316cd 3992b71a 39923536     %T.9...9...965.9
240278b0:	399192e7 3990d26c 398ff55f 398efcbc     ...9l..9_..9...9
240278c0:	398de954 398cbbe5 398b757f 398a176f     T..9...9.u.9o..9
240278d0:	3988a30b 398719ad 39857c9b 3983ccf8     ...9...9.|.9...9
240278e0:	39820bca 39803a10 397cb19c 3978d20a     ...9.:.9..|9..x9
240278f0:	3974d784 3970c441 396c9a75 39685c41     ..t9A.p9u.l9A\h9
24027900:	39640bbc 395faaea 395b3bb2 3956bfd6     ..d9.._9.;[9..V9
24027910:	3952390d 394da90a 39491174 394473ef     .9R9..M9t.I9.sD9
24027920:	393fd210 393b2d70 393687a3 3931e237     ..?9p-;9..697.19
24027930:	392d3ea2 39289e4a 39240289 391f6caa     .>-9J.(9..$9.l.9
24027940:	391adddd 39165740 3911d9e6 390d66d8     ...9@W.9...9.f.9
24027950:	3908ff10 3904a378 390054ef 38f8289e     ...9x..9.T.9.(.8
24027960:	38efc4d6 38e78018 38df5bd4 38d75959     ...8...8.[.8YY.8
24027970:	38cf79e3 38c7be9a 38c0288d 38b8b8a6     .y.8...8.(.8...8
24027980:	38b16fb1 38aa4e5e 38a3554e 389c8514     .o.8^N.8NU.8...8
24027990:	3895de2d 388f60f1 38890da3 3882e48a     -..8.`.8...8...8
240279a0:	3879cbc6 386e2394 3862d090 3857d2c3     ..y8.#n8..b8..W8
240279b0:	384d2a36 3842d6ae 3838d7c2 382f2cf6     6*M8..B8..88.,/8
240279c0:	3825d5b4 381cd170 38141f5b 380bbe60     ..%8p..8[..8`..8
240279d0:	3803ad78 37f7d758 37e8efd2 37daa169     x..8X..7...7i..7
240279e0:	37cce962 37bfc58a 37b332b4 37a72dba     b..7...7.2.7.-.7
240279f0:	379bb3e5 3790c240 37865585 3778d427     ...7@..7.U.7'.x7
24027a00:	3765fad3 3754181b 374323a1 37331958     ..e7..T7.#C7X.37
24027a10:	3723f0eb 3715a2f7 37082b0d 36f6fd4d     ..#7...7.+.7M..6
24027a20:	36df33f6 36c8e77c 36b40ce5 37c035ea     .3.6|..6...6.5.7

24027a30 <__leaf_table_fir64XLow>:
24027a30:	bbf82708 397c7d50 397e6c70 39821da2     .'..P}|9pl~9...9
24027a40:	3986c984 398d8650 3995ccce 399fe675     ...9P..9...9u..9
24027a50:	39abcbc5 39b9757a 39c8b92b 39d9ac19     ...9zu.9+..9...9
24027a60:	39ec4a34 3a0048b9 3a0b3c31 3a170525     4J.9.H.:1<.:%..:
24027a70:	3a23a076 3a310957 3a3f3cb9 3a4e3d10     v.#:W.1:.<?:.=N:
24027a80:	3a5e0aa7 3a6ea2f3 3a800486 3a89201e     ..^:..n:...:. .:
24027a90:	3a92a4b3 3a9c8db9 3aa6dcb0 3ab190da     ...:...:...:...:
24027aa0:	3abcaa5e 3ac8227c 3ad40480 3ae04f82     ^..:|".:...:.O.:
24027ab0:	3aed0218 3afa0204 3b03bdbb 3b0aa866     ...:...:...;f..;
24027ac0:	3b11d12d 3b185204 3b20de8e 3b287a73     -..;.R.;.. ;sz(;
24027ad0:	3b3034bf 3b381c0e 3b403ba5 3b488642     .40;..8;.;@;B.H;
24027ae0:	3b5102f0 3b59af6c 3b628976 3b6b8b43     ..Q;l.Y;v.b;C.k;
24027af0:	3b74b663 3b7e0948 3b83c13b 3b888fd1     c.t;H.~;;..;...;
24027b00:	3b8d7074 3b926230 3b9763de 3b9c74a9     tp.;0b.;.c.;.t.;
24027b10:	3ba19460 3ba6c287 3babfe16 3bb146bd     `..;...;...;.F.;
24027b20:	3bb69c05 3bbbfd1d 3bc167c8 3bc6dbb8     ...;...;.g.;...;
24027b30:	3bcc57fe 3bd1dc09 3bd7653c 3bdcf668     .W.;...;<e.;h..;
24027b40:	3be28e26 3be82ad8 3bedc269 3bf364ce     &..;.*.;i..;.d.;
24027b50:	3bf904ba 3bfea800 3c0217a8 3c04f8e6     ...;...;...<...<
24027b60:	3c07c2f8 3c0a89e5 3c0d4f27 3c101408     ...<...<'O.<...<
24027b70:	3c12d514 3c15931a 3c184d03 3c1b01df     ...<...<.M.<...<
24027b80:	3c1db021 3c2057f0 3c22f8b9 3c2591ed     !..<.W <.."<..%<
24027b90:	3c2822d7 3c2aab4e 3c2d2aba 3c2fa068     ."(<N.*<.*-<h./<
24027ba0:	3c320bd9 3c346cd3 3c36c2f9 3c390d92     ..2<.l4<..6<..9<
24027bb0:	3c3b4c4e 3c3d7ebe 3c3fa451 3c41bbc0     NL;<.~=<Q.?<..A<
24027bc0:	3c43c500 3c45bfb2 3c47abb9 3c4987c1     ..C<..E<..G<..I<
24027bd0:	3c4b55a6 3c4d1478 3c4ec32a 3c505abc     .UK<x.M<*.N<.ZP<
24027be0:	3c51e854 3c53614b 3c54c99c 3c5619ee     T.Q<KaS<..T<..V<
24027bf0:	3c576516 3c5892d6 3c59ad78 3c5ab5e6     .eW<..X<x.Y<..Z<
24027c00:	3c5bacef 3c5c8fb8 3c5d5f13 3c5e1a55     ..[<..\<._]<U.^<
24027c10:	3c5ec111 3c5f5276 3c5fcf2f 3c60373b     ..^<vR_</._<;7`<
24027c20:	3c608a88 3c60c8e6 3c60f2a0 3c61079b     ..`<..`<..`<..a<
24027c30:	3c61079b 3c60f2a0 3c60c8e6 3c608a88     ..a<..`<..`<..`<
24027c40:	3c60373b 3c5fcf2f 3c5f5276 3c5ec111     ;7`</._<vR_<..^<
24027c50:	3c5e1a55 3c5d5f13 3c5c8fb8 3c5bacef     U.^<._]<..\<..[<
24027c60:	3c5ab5e6 3c59ad78 3c5892d6 3c576516     ..Z<x.Y<..X<.eW<
24027c70:	3c5619ee 3c54c99c 3c53614b 3c51e854     ..V<..T<KaS<T.Q<
24027c80:	3c505abc 3c4ec32a 3c4d1478 3c4b55a6     .ZP<*.N<x.M<.UK<
24027c90:	3c4987c1 3c47abb9 3c45bfb2 3c43c500     ..I<..G<..E<..C<
24027ca0:	3c41bbc0 3c3fa451 3c3d7ebe 3c3b4c4e     ..A<Q.?<.~=<NL;<
24027cb0:	3c390d92 3c36c2f9 3c346cd3 3c320bd9     ..9<..6<.l4<..2<
24027cc0:	3c2fa068 3c2d2aba 3c2aab4e 3c2822d7     h./<.*-<N.*<."(<
24027cd0:	3c2591ed 3c22f8b9 3c2057f0 3c1db021     ..%<.."<.W <!..<
24027ce0:	3c1b01df 3c184d03 3c15931a 3c12d514     ...<.M.<...<...<
24027cf0:	3c101408 3c0d4f27 3c0a89e5 3c07c2f8     ...<'O.<...<...<
24027d00:	3c04f8e6 3c0217a8 3bfea800 3bf904ba     ...<...<...;...;
24027d10:	3bf364ce 3bedc269 3be82ad8 3be28e26     .d.;i..;.*.;&..;
24027d20:	3bdcf668 3bd7653c 3bd1dc09 3bcc57fe     h..;<e.;...;.W.;
24027d30:	3bc6dbb8 3bc167c8 3bbbfd1d 3bb69c05     ...;.g.;...;...;
24027d40:	3bb146bd 3babfe16 3ba6c287 3ba19460     .F.;...;...;`..;
24027d50:	3b9c74a9 3b9763de 3b926230 3b8d7074     .t.;.c.;0b.;tp.;
24027d60:	3b888fd1 3b83c13b 3b7e0948 3b74b663     ...;;..;H.~;c.t;
24027d70:	3b6b8b43 3b628976 3b59af6c 3b5102f0     C.k;v.b;l.Y;..Q;
24027d80:	3b488642 3b403ba5 3b381c0e 3b3034bf     B.H;.;@;..8;.40;
24027d90:	3b287a73 3b20de8e 3b185204 3b11d12d     sz(;.. ;.R.;-..;
24027da0:	3b0aa866 3b03bdbb 3afa0204 3aed0218     f..;...;...:...:
24027db0:	3ae04f82 3ad40480 3ac8227c 3abcaa5e     .O.:...:|".:^..:
24027dc0:	3ab190da 3aa6dcb0 3a9c8db9 3a92a4b3     ...:...:...:...:
24027dd0:	3a89201e 3a800486 3a6ea2f3 3a5e0aa7     . .:...:..n:..^:
24027de0:	3a4e3d10 3a3f3cb9 3a310957 3a23a076     .=N:.<?:W.1:v.#:
24027df0:	3a170525 3a0b3c31 3a0048b9 39ec4a34     %..:1<.:.H.:4J.9
24027e00:	39d9ac19 39c8b92b 39b9757a 39abcbc5     ...9+..9zu.9...9
24027e10:	399fe675 3995ccce 398d8650 3986c984     u..9...9P..9...9
24027e20:	39821da2 397e6c70 397c7d50 bbf82708     ...9pl~9P}|9.'..

24027e30 <__leaf_table_fir8XHigh>:
24027e30:	38043205 38cf1c59 38faaa28 39502274     .2.8Y..8(..8t"P9
24027e40:	398d5f9c 39bbe8f8 39e9f72f 3a0b70f1     ._.9...9/..9.p.:
24027e50:	3a1e7233 3a2bff54 3a31c175 3a2df84d     3r.:T.+:u.1:M.-:
24027e60:	3a1f75c7 3a05fc36 39c4b74f 395a2706     .u.:6..:O..9.'Z9
24027e70:	37b26be8 b932489c b9b6b90c ba021894     .k.7.H2.........
24027e80:	ba1c6a77 ba26d408 ba1f31f5 ba051ded     wj....&..1......
24027e90:	b9b44f6d b90772e3 38f3710c 39c017cf     mO...r...q.8...9
24027ea0:	3a1b996e 3a49c705 3a6432ac 3a6639d5     n..:..I:.2d:.9f:
24027eb0:	3a4da99f 3a1b3a55 39a56eee b7a5bb05     ..M:U:.:.n.9....
24027ec0:	b9c6d29f ba3d72ee ba8432b8 ba9d2087     .....r=..2... ..
24027ed0:	baa596a0 ba9b4b0c ba7bf990 ba1f4b27     .....K....{.'K..
24027ee0:	b9235e83 39b6c31f 3a5ecfa2 3aa8edc0     .^#....9..^:...:
24027ef0:	3ad2d6d2 3ae70241 3ae16cd5 3ac0d776     ...:A..:.l.:v..:
24027f00:	3a871f93 39e513b7 b983d9b1 ba7b8759     ...:...9....Y.{.
24027f10:	bad2514b bb09fe4d bb1cd0fa bb1e6411     KQ..M........d..
24027f20:	bb0d4f5c bad4907d ba60d76d 38805058     \O..}...m.`.XP.8
24027f30:	3a87d9c6 3b003110 3b3162d6 3b50e287     ...:.1.;.b1;..P;
24027f40:	3b59b787 3b4942b3 3b1fbb94 3ac0b15b     ..Y;.BI;...;[..:
24027f50:	398929bb ba8b0d76 bb19dbdd bb61a3c7     .).9v.........a.
24027f60:	bb89b991 bb93ea15 bb8d276c bb6a23d6     ........l'...#j.
24027f70:	bb1aa680 ba4c7f6c 3a8391ff 3b371438     ....l.L....:8.7;
24027f80:	3b8f65dc 3bb5cb9d 3bc92e21 3bc5dbfd     .e.;...;!..;...;
24027f90:	3baa9053 3b718e01 3ad308d9 ba560b09     S..;..q;...:..V.
24027fa0:	bb5a4feb bbb8d634 bbf43d0a bc0b7caa     .OZ.4....=...|..
24027fb0:	bc0d72e3 bbfcfe4b bbbdfa3a bb450835     .r..K...:...5.E.
24027fc0:	39cfdbde 3b850f86 3bf82e53 3c2c16c8     ...9...;S..;..,<
24027fd0:	3c4be14d 3c560d28 3c47244e 3c1e35e4     M.K<(.V<N$G<.5.<
24027fe0:	3bba5f46 3a0f0c69 bbaddea1 bc38a554     F_.;i..:....T.8.
24027ff0:	bc887cde bcaa214b bcbbbcb3 bcb8aa28     .|..K!......(...
24028000:	bc9da361 bc524e75 bb5de0b7 3c0ff417     a...uNR...]....<
24028010:	3cbd53d3 3d1ef81c 3d61142c 3d90690b     .S.<...=,.a=.i.=
24028020:	3dad00dd 3dc462cf 3dd4f248 3ddd8745     ...=.b.=H..=E..=
24028030:	3ddd8745 3dd4f248 3dc462cf 3dad00dd     E..=H..=.b.=...=
24028040:	3d90690b 3d61142c 3d1ef81c 3cbd53d3     .i.=,.a=...=.S.<
24028050:	3c0ff417 bb5de0b7 bc524e75 bc9da361     ...<..].uNR.a...
24028060:	bcb8aa28 bcbbbcb3 bcaa214b bc887cde     (.......K!...|..
24028070:	bc38a554 bbaddea1 3a0f0c69 3bba5f46     T.8.....i..:F_.;
24028080:	3c1e35e4 3c47244e 3c560d28 3c4be14d     .5.<N$G<(.V<M.K<
24028090:	3c2c16c8 3bf82e53 3b850f86 39cfdbde     ..,<S..;...;...9
240280a0:	bb450835 bbbdfa3a bbfcfe4b bc0d72e3     5.E.:...K....r..
240280b0:	bc0b7caa bbf43d0a bbb8d634 bb5a4feb     .|...=..4....OZ.
240280c0:	ba560b09 3ad308d9 3b718e01 3baa9053     ..V....:..q;S..;
240280d0:	3bc5dbfd 3bc92e21 3bb5cb9d 3b8f65dc     ...;!..;...;.e.;
240280e0:	3b371438 3a8391ff ba4c7f6c bb1aa680     8.7;...:l.L.....
240280f0:	bb6a23d6 bb8d276c bb93ea15 bb89b991     .#j.l'..........
24028100:	bb61a3c7 bb19dbdd ba8b0d76 398929bb     ..a.....v....).9
24028110:	3ac0b15b 3b1fbb94 3b4942b3 3b59b787     [..:...;.BI;..Y;
24028120:	3b50e287 3b3162d6 3b003110 3a87d9c6     ..P;.b1;.1.;...:
24028130:	38805058 ba60d76d bad4907d bb0d4f5c     XP.8m.`.}...\O..
24028140:	bb1e6411 bb1cd0fa bb09fe4d bad2514b     .d......M...KQ..
24028150:	ba7b8759 b983d9b1 39e513b7 3a871f93     Y.{........9...:
24028160:	3ac0d776 3ae16cd5 3ae70241 3ad2d6d2     v..:.l.:A..:...:
24028170:	3aa8edc0 3a5ecfa2 39b6c31f b9235e83     ...:..^:...9.^#.
24028180:	ba1f4b27 ba7bf990 ba9b4b0c baa596a0     'K....{..K......
24028190:	ba9d2087 ba8432b8 ba3d72ee b9c6d29f     . ...2...r=.....
240281a0:	b7a5bb05 39a56eee 3a1b3a55 3a4da99f     .....n.9U:.:..M:
240281b0:	3a6639d5 3a6432ac 3a49c705 3a1b996e     .9f:.2d:..I:n..:
240281c0:	39c017cf 38f3710c b90772e3 b9b44f6d     ...9.q.8.r..mO..
240281d0:	ba051ded ba1f31f5 ba26d408 ba1c6a77     .....1....&.wj..
240281e0:	ba021894 b9b6b90c b932489c 37b26be8     .........H2..k.7
240281f0:	395a2706 39c4b74f 3a05fc36 3a1f75c7     .'Z9O..96..:.u.:
24028200:	3a2df84d 3a31c175 3a2bff54 3a1e7233     M.-:u.1:T.+:3r.:
24028210:	3a0b70f1 39e9f72f 39bbe8f8 398d5f9c     .p.:/..9...9._.9
24028220:	39502274 38faaa28 38cf1c59 38043205     t"P9(..8Y..8.2.8

24028230 <__leaf_table_fir8XLow>:
24028230:	3a3113b2 3991b987 392d5280 b909bab8     ..1:...9.R-9....
24028240:	ba3015e8 bac60f1a bb30678a bb8ab640     ..0......g0.@...
24028250:	bbc8a16f bc082551 bc2f506a bc5784fa     o...Q%..jP/...W.
24028260:	bc7dbc3f bc8f3286 bc9aba48 bc9f63cf     ?.}..2..H....c..
24028270:	bc9b2dc4 bc8c56d2 bc6310bb bc13feff     .-...V....c.....
24028280:	bb2d6747 3baacfd0 3c6b27bb 3cc898a3     Gg-....;.'k<...<
24028290:	3d10599f 3d3d22c8 3d68ac6c 3d8875f5     .Y.=."==l.h=.u.=
240282a0:	3d99f4c7 3da7f0c9 3db1b147 3db6b35e     ...=...=G..=^..=
240282b0:	3db6b35e 3db1b147 3da7f0c9 3d99f4c7     ^..=G..=...=...=
240282c0:	3d8875f5 3d68ac6c 3d3d22c8 3d10599f     .u.=l.h=."==.Y.=
240282d0:	3cc898a3 3c6b27bb 3baacfd0 bb2d6747     ...<.'k<...;Gg-.
240282e0:	bc13feff bc6310bb bc8c56d2 bc9b2dc4     ......c..V...-..
240282f0:	bc9f63cf bc9aba48 bc8f3286 bc7dbc3f     .c..H....2..?.}.
24028300:	bc5784fa bc2f506a bc082551 bbc8a16f     ..W.jP/.Q%..o...
24028310:	bb8ab640 bb30678a bac60f1a ba3015e8     @....g0.......0.
24028320:	b909bab8 392d5280 3991b987 3a3113b2     .....R-9...9..1:

24028330 <__leaf_table_sinewave>:
24028330:	00000000 3b47e282 3bc8de2b 3c1691a7     ......G;+..;...<
24028340:	3c49081c 3c7b00bd 3c96bb99 3cafb7e9     ..I<..{<...<...<
24028350:	3cc9081c 3ce2046c 3cfb3fa7 3d0a1dfc     ...<l..<.?.<...=
24028360:	3d16bb99 3d23443d 3d2fc265 3d3c6003     ...==D#=e./=.`<=
24028370:	3d48de2b 3d557bc8 3d62046c 3d6e8295     +.H=.{U=l.b=..n=
24028380:	3d7b2032 3d83cf2d 3d8a0e41 3d90624e     2 {=-..=A..=Nb.=
24028390:	3d96a162 3d9ce076 3da31f8a 3da96e59     b..=v..=...=Yn.=
240283a0:	3dafad6d 3db5f1bf 3dbc30d3 3dc26fe7     m..=...=.0.=.o.=
240283b0:	3dc8aefb 3dceee0f 3dd53261 3ddb7176     ...=...=a2.=vq.=
240283c0:	3de1b08a 3de7ef9e 3dee2eb2 3df46dc6     ...=...=...=.m.=
240283d0:	3dfab218 3e0070b9 3e039043 3e06afcd     ...=.p.>C..>...>
240283e0:	3e09c77a 3e0ce704 3e10092d 3e1320da     z..>...>-..>. .>
240283f0:	3e163886 3e195810 3e1c6fbd 3e1f8f47     .8.>.X.>.o.>G..>
24028400:	3e22a6f4 3e25c140 3e28d8ed 3e2bf099     ..">@.%>..(>..+>
24028410:	3e2f0846 3e3227d0 3e3537a0 3e384f4c     F./>.'2>.75>LO8>
24028420:	3e3b66f9 3e3e8145 3e4198f2 3e44a8c1     .f;>E.>>..A>..D>
24028430:	3e47c06e 3e4ad81b 3e4de7ea 3e50ff97     n.G>..J>..M>..P>
24028440:	3e540f67 3e571f36 3e5a36e3 3e5d46b2     g.T>6.W>.6Z>.F]>
24028450:	3e605921 3e6368f1 3e6678c0 3e698890     !Y`>.hc>.xf>..i>
24028460:	3e6c985f 3e6fa051 3e72b021 3e75bff0     _.l>Q.o>!.r>..u>
24028470:	3e78c7e3 3e7bd7b2 3e7edfa4 3e80f7ba     ..x>..{>..~>...>
24028480:	3e827bb3 3e83ffac 3e8583a5 3e87079e     .{.>...>...>...>
24028490:	3e888b97 3e8a0f91 3e8b938a 3e8d1394     ...>...>...>...>
240284a0:	3e8e978d 3e901798 3e919b91 3e931b9b     ...>...>...>...>
240284b0:	3e949ba6 3e961f9f 3e979fa9 3e991fb4     ...>...>...>...>
240284c0:	3e9a9bd0 3e9c1bda 3e9d9be5 3e9f1bef     ...>...>...>...>
240284d0:	3ea0980b 3ea21427 3ea39431 3ea5104d     ...>'..>1..>M..>
240284e0:	3ea68c69 3ea80885 3ea984a1 3eaaff6d     i..>...>...>m..>
240284f0:	3eac7b89 3eadf3b6 3eaf6fd2 3eb0e7ff     .{.>...>.o.>...>
24028500:	3eb2602d 3eb3d85a 3eb55476 3eb6cca3     -`.>Z..>vT.>...>
24028510:	3eb83f92 3eb9b7bf 3ebb2fec 3ebca42b     .?.>...>./.>+..>
24028520:	3ebe1c58 3ebf9097 3ec10386 3ec277c4     X..>...>...>.w.>
24028530:	3ec3ec03 3ec56042 3ec6d480 3ec84381     ...>B`.>...>.C.>
24028540:	3ec9b7bf 3ecb280f 3ecc985f 3ece075f     ...>.(.>_..>_..>
24028550:	3ecf77af 3ed0e7ff 3ed2584f 3ed3c361     .w.>...>OX.>a..>
24028560:	3ed533b1 3ed6a012 3ed80c74 3ed97785     .3.>...>t..>.w.>
24028570:	3edae3e7 3edc5048 3eddbb5a 3edf23cd     ...>HP.>Z..>.#.>
24028580:	3ee0902e 3ee1f8a1 3ee35fc4 3ee4c836     ...>...>._.>6..>
24028590:	3ee62f5a 3ee797cc 3ee8fc50 3eea6373     Z/.>...>P..>sc.>
240285a0:	3eebc7f7 3eed2c7c 3eee8fb0 3eeff434     ...>|,.>...>4..>
240285b0:	3ef15769 3ef2bbed 3ef41c82 3ef57bc8     iW.>...>...>.{.>
240285c0:	3ef6dc5d 3ef83ba3 3ef99c39 3efafb7f     ]..>.;.>9..>...>
240285d0:	3efc5c14 3efdb76b 3eff1412 3f0037b5     .\.>k..>...>.7.?
240285e0:	3f00e608 3f0193b4 3f024207 3f02edbb     ...?...?.B.?...?
240285f0:	3f039a17 3f0447c3 3f04f228 3f059ddc     ...?.G.?(..?...?
24028600:	3f064a38 3f06f3f5 3f07a051 3f084a0e     8J.?...?Q..?.J.?
24028610:	3f08f3cb 3f099e30 3f0a47ed 3f0aefb3     ...?0..?.G.?...?
24028620:	3f0b9820 3f0c41dd 3f0cea4b 3f0d9019      ..?.A.?K..?...?
24028630:	3f0e37df 3f0ee04c 3f0f861a 3f102be9     .7.?L..?...?.+.?
24028640:	3f10d1b7 3f11782d 3f121dfc 3f12c1d3     ...?-x.?...?...?
24028650:	3f136651 3f140a28 3f14ae00 3f1551d7     Qf.?(..?...?.Q.?
24028660:	3f15f5ae 3f169835 3f173a15 3f17dbf5     ...?5..?.:.?...?
24028670:	3f187dd4 3f191fb4 3f19c044 3f1a602d     .}.?...?D..?-`.?
24028680:	3f1b020c 3f1b9ffd 3f1c3fe6 3f1cdfce     ...?...?.?.?...?
24028690:	3f1d7dbf 3f1e1bb0 3f1eba49 3f1f583a     .}.?...?I..?:X.?
240286a0:	3f1ff62b 3f209225 3f212e1f 3f21ca19     +..?%. ?..!?..!?
240286b0:	3f226613 3f23020c 3f239c0f 3f243611     .f"?..#?..#?.6$?
240286c0:	3f24d014 3f256a16 3f260419 3f269c24     ..$?.j%?..&?$.&?
240286d0:	3f27342f 3f27cc3a 3f286445 3f28fc50     /4'?:.'?Ed(?P.(?
240286e0:	3f2991bc 3f2a27d0 3f2abde4 3f2b53f8     ..)?.'*?..*?.S+?
240286f0:	3f2bea0c 3f2c7e28 3f2d1245 3f2da5b9     ..+?(~,?E.-?..-?
24028700:	3f2e39d6 3f2ecdf2 3f2f6018 3f2ff23d     .9.?...?.`/?=./?
24028710:	3f3083ba 3f3115df 3f31a60d 3f32363b     ..0?..1?..1?;62?
24028720:	3f32c7b9 3f3355ef 3f33e61d 3f347454     ..2?.U3?..3?Tt4?
24028730:	3f3503da 3f359210 3f361e4f 3f36abde     ..5?..5?O.6?..6?
24028740:	3f37381d 3f37c3b5 3f384ff4 3f38dc33     .87?..7?.O8?3.8?
24028750:	3f3965d4 3f39f01c 3f3a79bc 3f3b0404     .e9?..9?.y:?..;?
24028760:	3f3b8e4c 3f3c15f4 3f3c9e45 3f3d25ee     L.;?..<?E.<?.%=?
24028770:	3f3dae3e 3f3e33f0 3f3eba49 3f3f3ffb     >.=?.3>?I.>?.???
24028780:	3f3fc5ac 3f404a0e 3f40cfc0 3f415422     ..??.J@?..@?"TA?
24028790:	3f41d5e5 3f425a47 3f42dc0a 3f435dcc     ..A?GZB?..B?.]C?
240287a0:	3f43e037 3f4461fa 3f44e1c6 3f456239     7.C?.aD?..D?9bE?
240287b0:	3f45e204 3f4661d0 3f46e04c 3f475e20     ..E?.aF?L.F? ^G?
240287c0:	3f47dbf5 3f4859c9 3f48d64d 3f495422     ..G?.YH?M.H?"TI?
240287d0:	3f49cfff 3f4a49e4 3f4ac5c1 3f4b404f     ..I?.IJ?..J?O@K?
240287e0:	3f4bba34 3f4c341a 3f4cac08 3f4d25ee     4.K?.4L?..L?.%M?
240287f0:	3f4d9ddc 3f4e13d3 3f4e8bc1 3f4f01b8     ..M?..N?..N?..O?
24028800:	3f4f77af 3f4fee4e 3f50624e 3f50d845     .wO?N.O?NbP?E.P?
24028810:	3f514c44 3f51be4d 3f52324d 3f52a3ad     DLQ?M.Q?M2R?..R?
24028820:	3f5315b5 3f5387be 3f53f7cf 3f5469d7     ..S?..S?..S?.iT?
24028830:	3f54d9e8 3f554802 3f55b813 3f56262d     ..T?.HU?..U?-&V?
24028840:	3f569446 3f5701b8 3f576ddb 3f57d9fd     F.V?..W?.mW?..W?
24028850:	3f584620 3f58b242 3f591bc5 3f5985f0      FX?B.X?..Y?..Y?
24028860:	3f59f01c 3f5a5a47 3f5ac1d3 3f5b2a06     ..Y?GZZ?..Z?.*[?
24028870:	3f5b923a 3f5bf9c6 3f5c6003 3f5cc63f     :.[?..[?.`\??.\?
24028880:	3f5d2bd4 3f5d9019 3f5df3b6 3f5e57fb     .+]?..]?..]?.W^?
24028890:	3f5ebc41 3f5f1de7 3f5f822c 3f5fe3d2     A.^?.._?,._?.._?
240288a0:	3f604428 3f60a3d7 3f610625 3f6163dc     (D`?..`?%.a?.ca?
240288b0:	3f61c433 3f6221ea 3f628049 3f62de01     3.a?.!b?I.b?..b?
240288c0:	3f6339c1 3f639629 3f63f1e9 3f644e51     .9c?).c?..c?QNd?
240288d0:	3f64a81a 3f6501e2 3f655c53 3f65b61c     ..d?..e?S\e?..e?
240288e0:	3f660ded 3f6665bf 3f66bc41 3f671412     ..f?.ef?A.f?..g?
240288f0:	3f6769ec 3f67bfc6 3f681451 3f686a2b     .ig?..g?Q.h?+jh?
24028900:	3f68be0e 3f690ff9 3f6963dc 3f69b5c8     ..h?..i?.ci?..i?
24028910:	3f6a07b3 3f6a584f 3f6aaa3b 3f6afa2f     ..j?OXj?;.j?/.j?
24028920:	3f6b4a23 3f6b9820 3f6be61d 3f6c341a     #Jk? .k?..k?.4l?
24028930:	3f6c8217 3f6cce1c 3f6d1a22 3f6d6627     ..l?..l?".m?'fm?
24028940:	3f6db036 3f6dfc3b 3f6e4452 3f6e8db9     6.m?;.m?RDn?..n?
24028950:	3f6ed5d0 3f6f1de7 3f6f65fe 3f6fae14     ..n?..o?.eo?..o?
24028960:	3f6ff434 3f703a54 3f707dd4 3f70c3f4     4.o?T:p?.}p?..p?
24028970:	3f71081c 3f714a4d 3f718dce 3f71cfff     ..q?MJq?..q?..q?
24028980:	3f721230 3f7251c2 3f7293f3 3f72d235     0.r?.Qr?..r?5.r?
24028990:	3f7311c7 3f735200 3f739043 3f73cbe6     ..s?.Rs?C.s?..s?
240289a0:	3f740a28 3f7445cc 3f748217 3f74bdba     (.t?.Et?..t?..t?
240289b0:	3f74f80e 3f7531ba 3f756c0d 3f75a3c2     ..t?.1u?.lu?..u?
240289c0:	3f75dc1e 3f7613d3 3f764c30 3f7681ed     ..u?..v?0Lv?..v?
240289d0:	3f76b852 3f76ee0f 3f7721d5 3f775643     R.v?..v?.!w?CVw?
240289e0:	3f778a09 3f77bbd8 3f77f045 3f78201d     ..w?..w?E.w?. x?
240289f0:	3f7851ec 3f7881c3 3f78b242 3f78e219     .Qx?..x?B.x?..x?
24028a00:	3f790ff9 3f793dd9 3f796bba 3f799a41     ..y?.=y?.ky?A.y?
24028a10:	3f79c62a 3f79f213 3f7a1c04 3f7a47ed     *.y?..y?..z?.Gz?
24028a20:	3f7a71de 3f7a99d9 3f7ac3ca 3f7aebc4     .qz?..z?..z?..z?
24028a30:	3f7b11c7 3f7b39c1 3f7b5fc4 3f7b85c6     ..{?.9{?._{?..{?
24028a40:	3f7ba9d2 3f7bcfd5 3f7bf3e0 3f7c15f4     ..{?..{?..{?..|?
24028a50:	3f7c3a00 3f7c5c14 3f7c7c31 3f7c9e45     .:|?.\|?1||?E.|?
24028a60:	3f7cbdba 3f7cddd7 3f7cfbfc 3f7d1a22     ..|?..|?..|?".}?
24028a70:	3f7d3847 3f7d55c5 3f7d71f3 3f7d8e22     G8}?.U}?.q}?".}?
24028a80:	3f7daa50 3f7dc3df 3f7dde16 3f7df84d     P.}?..}?..}?M.}?
24028a90:	3f7e11dc 3f7e2a1b 3f7e41b3 3f7e57fb     ..~?.*~?.A~?.W~?
24028aa0:	3f7e6e44 3f7e83e4 3f7e9a2c 3f7eadd6     Dn~?..~?,.~?..~?
24028ab0:	3f7ec227 3f7ed5d0 3f7ee829 3f7ef9db     '.~?..~?).~?..~?
24028ac0:	3f7f0c35 3f7f1de7 3f7f2e49 3f7f3e03     5..?...?I..?.>.?
24028ad0:	3f7f4bc7 3f7f5a32 3f7f67f5 3f7f75b8     .K.?2Z.?.g.?.u.?
24028ae0:	3f7f822c 3f7f8df8 3f7f99c4 3f7fa440     ,..?...?...?@..?
24028af0:	3f7fb00c 3f7fb7e9 3f7fc1be 3f7fca43     ...?...?...?C..?
24028b00:	3f7fd220 3f7fd806 3f7fdfe3 3f7fe5c9      ..?...?...?...?
24028b10:	3f7fe9b8 3f7fee4e 3f7ff23d 3f7ff62b     ...?N..?=..?+..?
24028b20:	3f7ffa1a 3f7ffc11 3f7ffc11 3f7ffe09     ...?...?...?...?
24028b30:	3f7ffe09 3f7ffe09 3f7ffc11 3f7ffc11     ...?...?...?...?
24028b40:	3f7ffa1a 3f7ff62b 3f7ff23d 3f7fee4e     ...?+..?=..?N..?
24028b50:	3f7fe9b8 3f7fe5c9 3f7fdfe3 3f7fd806     ...?...?...?...?
24028b60:	3f7fd220 3f7fca43 3f7fc1be 3f7fb7e9      ..?C..?...?...?
24028b70:	3f7fb00c 3f7fa440 3f7f99c4 3f7f8df8     ...?@..?...?...?
24028b80:	3f7f822c 3f7f75b8 3f7f67f5 3f7f5a32     ,..?.u.?.g.?2Z.?
24028b90:	3f7f4bc7 3f7f3e03 3f7f2e49 3f7f1de7     .K.?.>.?I..?...?
24028ba0:	3f7f0c35 3f7ef9db 3f7ee829 3f7ed5d0     5..?..~?).~?..~?
24028bb0:	3f7ec227 3f7eadd6 3f7e9a2c 3f7e83e4     '.~?..~?,.~?..~?
24028bc0:	3f7e6e44 3f7e57fb 3f7e41b3 3f7e2a1b     Dn~?.W~?.A~?.*~?
24028bd0:	3f7e11dc 3f7df84d 3f7dde16 3f7dc3df     ..~?M.}?..}?..}?
24028be0:	3f7daa50 3f7d8e22 3f7d71f3 3f7d55c5     P.}?".}?.q}?.U}?
24028bf0:	3f7d3847 3f7d1a22 3f7cfbfc 3f7cddd7     G8}?".}?..|?..|?
24028c00:	3f7cbdba 3f7c9e45 3f7c7c31 3f7c5c14     ..|?E.|?1||?.\|?
24028c10:	3f7c3a00 3f7c15f4 3f7bf3e0 3f7bcfd5     .:|?..|?..{?..{?
24028c20:	3f7ba9d2 3f7b85c6 3f7b5fc4 3f7b39c1     ..{?..{?._{?.9{?
24028c30:	3f7b11c7 3f7aebc4 3f7ac3ca 3f7a99d9     ..{?..z?..z?..z?
24028c40:	3f7a71de 3f7a47ed 3f7a1c04 3f79f213     .qz?.Gz?..z?..y?
24028c50:	3f79c62a 3f799a41 3f796bba 3f793dd9     *.y?A.y?.ky?.=y?
24028c60:	3f790ff9 3f78e219 3f78b242 3f7881c3     ..y?..x?B.x?..x?
24028c70:	3f7851ec 3f78201d 3f77f045 3f77bbd8     .Qx?. x?E.w?..w?
24028c80:	3f778a09 3f775643 3f7721d5 3f76ee0f     ..w?CVw?.!w?..v?
24028c90:	3f76b852 3f7681ed 3f764c30 3f7613d3     R.v?..v?0Lv?..v?
24028ca0:	3f75dc1e 3f75a3c2 3f756c0d 3f7531ba     ..u?..u?.lu?.1u?
24028cb0:	3f74f80e 3f74bdba 3f748217 3f7445cc     ..t?..t?..t?.Et?
24028cc0:	3f740a28 3f73cbe6 3f739043 3f735200     (.t?..s?C.s?.Rs?
24028cd0:	3f7311c7 3f72d235 3f7293f3 3f7251c2     ..s?5.r?..r?.Qr?
24028ce0:	3f721230 3f71cfff 3f718dce 3f714a4d     0.r?..q?..q?MJq?
24028cf0:	3f71081c 3f70c3f4 3f707dd4 3f703a54     ..q?..p?.}p?T:p?
24028d00:	3f6ff434 3f6fae14 3f6f65fe 3f6f1de7     4.o?..o?.eo?..o?
24028d10:	3f6ed5d0 3f6e8db9 3f6e4452 3f6dfc3b     ..n?..n?RDn?;.m?
24028d20:	3f6db036 3f6d6627 3f6d1a22 3f6cce1c     6.m?'fm?".m?..l?
24028d30:	3f6c8217 3f6c341a 3f6be61d 3f6b9820     ..l?.4l?..k? .k?
24028d40:	3f6b4a23 3f6afa2f 3f6aaa3b 3f6a584f     #Jk?/.j?;.j?OXj?
24028d50:	3f6a07b3 3f69b5c8 3f6963dc 3f690ff9     ..j?..i?.ci?..i?
24028d60:	3f68be0e 3f686a2b 3f681451 3f67bfc6     ..h?+jh?Q.h?..g?
24028d70:	3f6769ec 3f671412 3f66bc41 3f6665bf     .ig?..g?A.f?.ef?
24028d80:	3f660ded 3f65b61c 3f655c53 3f6501e2     ..f?..e?S\e?..e?
24028d90:	3f64a81a 3f644e51 3f63f1e9 3f639629     ..d?QNd?..c?).c?
24028da0:	3f6339c1 3f62de01 3f628049 3f6221ea     .9c?..b?I.b?.!b?
24028db0:	3f61c433 3f6163dc 3f610625 3f60a3d7     3.a?.ca?%.a?..`?
24028dc0:	3f604428 3f5fe3d2 3f5f822c 3f5f1de7     (D`?.._?,._?.._?
24028dd0:	3f5ebc41 3f5e57fb 3f5df3b6 3f5d9019     A.^?.W^?..]?..]?
24028de0:	3f5d2bd4 3f5cc63f 3f5c6003 3f5bf9c6     .+]??.\?.`\?..[?
24028df0:	3f5b923a 3f5b2a06 3f5ac1d3 3f5a5a47     :.[?.*[?..Z?GZZ?
24028e00:	3f59f01c 3f5985f0 3f591bc5 3f58b242     ..Y?..Y?..Y?B.X?
24028e10:	3f584620 3f57d9fd 3f576ddb 3f5701b8      FX?..W?.mW?..W?
24028e20:	3f569446 3f56262d 3f55b813 3f554802     F.V?-&V?..U?.HU?
24028e30:	3f54d9e8 3f5469d7 3f53f7cf 3f5387be     ..T?.iT?..S?..S?
24028e40:	3f5315b5 3f52a3ad 3f52324d 3f51be4d     ..S?..R?M2R?M.Q?
24028e50:	3f514c44 3f50d845 3f50624e 3f4fee4e     DLQ?E.P?NbP?N.O?
24028e60:	3f4f77af 3f4f01b8 3f4e8bc1 3f4e13d3     .wO?..O?..N?..N?
24028e70:	3f4d9ddc 3f4d25ee 3f4cac08 3f4c341a     ..M?.%M?..L?.4L?
24028e80:	3f4bba34 3f4b404f 3f4ac5c1 3f4a49e4     4.K?O@K?..J?.IJ?
24028e90:	3f49cfff 3f495422 3f48d64d 3f4859c9     ..I?"TI?M.H?.YH?
24028ea0:	3f47dbf5 3f475e20 3f46e04c 3f4661d0     ..G? ^G?L.F?.aF?
24028eb0:	3f45e204 3f456239 3f44e1c6 3f4461fa     ..E?9bE?..D?.aD?
24028ec0:	3f43e037 3f435dcc 3f42dc0a 3f425a47     7.C?.]C?..B?GZB?
24028ed0:	3f41d5e5 3f415422 3f40cfc0 3f404a0e     ..A?"TA?..@?.J@?
24028ee0:	3f3fc5ac 3f3f3ffb 3f3eba49 3f3e33f0     ..??.???I.>?.3>?
24028ef0:	3f3dae3e 3f3d25ee 3f3c9e45 3f3c15f4     >.=?.%=?E.<?..<?
24028f00:	3f3b8e4c 3f3b0404 3f3a79bc 3f39f01c     L.;?..;?.y:?..9?
24028f10:	3f3965d4 3f38dc33 3f384ff4 3f37c3b5     .e9?3.8?.O8?..7?
24028f20:	3f37381d 3f36abde 3f361e4f 3f359210     .87?..6?O.6?..5?
24028f30:	3f3503da 3f347454 3f33e61d 3f3355ef     ..5?Tt4?..3?.U3?
24028f40:	3f32c7b9 3f32363b 3f31a60d 3f3115df     ..2?;62?..1?..1?
24028f50:	3f3083ba 3f2ff23d 3f2f6018 3f2ecdf2     ..0?=./?.`/?...?
24028f60:	3f2e39d6 3f2da5b9 3f2d1245 3f2c7e28     .9.?..-?E.-?(~,?
24028f70:	3f2bea0c 3f2b53f8 3f2abde4 3f2a27d0     ..+?.S+?..*?.'*?
24028f80:	3f2991bc 3f28fc50 3f286445 3f27cc3a     ..)?P.(?Ed(?:.'?
24028f90:	3f27342f 3f269c24 3f260419 3f256a16     /4'?$.&?..&?.j%?
24028fa0:	3f24d014 3f243611 3f239c0f 3f23020c     ..$?.6$?..#?..#?
24028fb0:	3f226613 3f21ca19 3f212e1f 3f209225     .f"?..!?..!?%. ?
24028fc0:	3f1ff62b 3f1f583a 3f1eba49 3f1e1bb0     +..?:X.?I..?...?
24028fd0:	3f1d7dbf 3f1cdfce 3f1c3fe6 3f1b9ffd     .}.?...?.?.?...?
24028fe0:	3f1b020c 3f1a602d 3f19c044 3f191fb4     ...?-`.?D..?...?
24028ff0:	3f187dd4 3f17dbf5 3f173a15 3f169835     .}.?...?.:.?5..?
24029000:	3f15f5ae 3f1551d7 3f14ae00 3f140a28     ...?.Q.?...?(..?
24029010:	3f136651 3f12c1d3 3f121dfc 3f11782d     Qf.?...?...?-x.?
24029020:	3f10d1b7 3f102be9 3f0f861a 3f0ee04c     ...?.+.?...?L..?
24029030:	3f0e37df 3f0d9019 3f0cea4b 3f0c41dd     .7.?...?K..?.A.?
24029040:	3f0b9820 3f0aefb3 3f0a47ed 3f099e30      ..?...?.G.?0..?
24029050:	3f08f3cb 3f084a0e 3f07a051 3f06f3f5     ...?.J.?Q..?...?
24029060:	3f064a38 3f059ddc 3f04f228 3f0447c3     8J.?...?(..?.G.?
24029070:	3f039a17 3f02edbb 3f024207 3f0193b4     ...?...?.B.?...?
24029080:	3f00e608 3f0037b5 3eff1412 3efdb76b     ...?.7.?...>k..>
24029090:	3efc5c14 3efafb7f 3ef99c39 3ef83ba3     .\.>...>9..>.;.>
240290a0:	3ef6dc5d 3ef57bc8 3ef41c82 3ef2bbed     ]..>.{.>...>...>
240290b0:	3ef15769 3eeff434 3eee8fb0 3eed2c7c     iW.>4..>...>|,.>
240290c0:	3eebc7f7 3eea6373 3ee8fc50 3ee797cc     ...>sc.>P..>...>
240290d0:	3ee62f5a 3ee4c836 3ee35fc4 3ee1f8a1     Z/.>6..>._.>...>
240290e0:	3ee0902e 3edf23cd 3eddbb5a 3edc5048     ...>.#.>Z..>HP.>
240290f0:	3edae3e7 3ed97785 3ed80c74 3ed6a012     ...>.w.>t..>...>
24029100:	3ed533b1 3ed3c361 3ed2584f 3ed0e7ff     .3.>a..>OX.>...>
24029110:	3ecf77af 3ece075f 3ecc985f 3ecb280f     .w.>_..>_..>.(.>
24029120:	3ec9b7bf 3ec84381 3ec6d480 3ec56042     ...>.C.>...>B`.>
24029130:	3ec3ec03 3ec277c4 3ec10386 3ebf9097     ...>.w.>...>...>
24029140:	3ebe1c58 3ebca42b 3ebb2fec 3eb9b7bf     X..>+..>./.>...>
24029150:	3eb83f92 3eb6cca3 3eb55476 3eb3d85a     .?.>...>vT.>Z..>
24029160:	3eb2602d 3eb0e7ff 3eaf6fd2 3eadf3b6     -`.>...>.o.>...>
24029170:	3eac7b89 3eaaff6d 3ea984a1 3ea80885     .{.>m..>...>...>
24029180:	3ea68c69 3ea5104d 3ea39431 3ea21427     i..>M..>1..>'..>
24029190:	3ea0980b 3e9f1bef 3e9d9be5 3e9c1bda     ...>...>...>...>
240291a0:	3e9a9bd0 3e991fb4 3e979fa9 3e961f9f     ...>...>...>...>
240291b0:	3e949ba6 3e931b9b 3e919b91 3e901798     ...>...>...>...>
240291c0:	3e8e978d 3e8d1394 3e8b938a 3e8a0f91     ...>...>...>...>
240291d0:	3e888b97 3e87079e 3e8583a5 3e83ffac     ...>...>...>...>
240291e0:	3e827bb3 3e80f7ba 3e7edfa4 3e7bd7b2     .{.>...>..~>..{>
240291f0:	3e78c7e3 3e75bff0 3e72b021 3e6fa051     ..x>..u>!.r>Q.o>
24029200:	3e6c985f 3e698890 3e6678c0 3e6368f1     _.l>..i>.xf>.hc>
24029210:	3e605921 3e5d46b2 3e5a36e3 3e571f36     !Y`>.F]>.6Z>6.W>
24029220:	3e540f67 3e50ff97 3e4de7ea 3e4ad81b     g.T>..P>..M>..J>
24029230:	3e47c06e 3e44a8c1 3e4198f2 3e3e8145     n.G>..D>..A>E.>>
24029240:	3e3b66f9 3e384f4c 3e3537a0 3e3227d0     .f;>LO8>.75>.'2>
24029250:	3e2f0846 3e2bf099 3e28d8ed 3e25c140     F./>..+>..(>@.%>
24029260:	3e22a6f4 3e1f8f47 3e1c6fbd 3e195810     ..">G..>.o.>.X.>
24029270:	3e163886 3e1320da 3e10092d 3e0ce704     .8.>. .>-..>...>
24029280:	3e09c77a 3e06afcd 3e039043 3e0070b9     z..>...>C..>.p.>
24029290:	3dfab218 3df46dc6 3dee2eb2 3de7ef9e     ...=.m.=...=...=
240292a0:	3de1b08a 3ddb7176 3dd53261 3dceee0f     ...=vq.=a2.=...=
240292b0:	3dc8aefb 3dc26fe7 3dbc30d3 3db5f1bf     ...=.o.=.0.=...=
240292c0:	3dafad6d 3da96e59 3da31f8a 3d9ce076     m..=Yn.=...=v..=
240292d0:	3d96a162 3d90624e 3d8a0e41 3d83cf2d     b..=Nb.=A..=-..=
240292e0:	3d7b2032 3d6e8295 3d62046c 3d557bc8     2 {=..n=l.b=.{U=
240292f0:	3d48de2b 3d3c6003 3d2fc265 3d23443d     +.H=.`<=e./==D#=
24029300:	3d16bb99 3d0a1dfc 3cfb3fa7 3ce2046c     ...=...=.?.<l..<
24029310:	3cc9081c 3cafb7e9 3c96bb99 3c7b00bd     ...<...<...<..{<
24029320:	3c49081c 3c1691a7 3bc8de2b 3b47e282     ..I<...<+..;..G;
24029330:	00000000 bb49d9d3 bbc9d9d3 bc170f7c     ......I.....|...
24029340:	bc4985f0 bc7b7e91 bc96fa83 bcaff6d3     ..I..~{.........
24029350:	bcc94706 bce24357 bcfb7e91 bd0a3d71     .G..WC...~..q=..
24029360:	bd16db0e bd2363b2 bd2fe1da bd3c7f78     .....c#.../.x.<.
24029370:	bd48fda0 bd559b3d bd6223e2 bd6ea20a     ..H.=.U..#b...n.
24029380:	bd7b3fa7 bd83dee8 bd8a1dfc bd907208     .?{..........r..
24029390:	bd96b11c bd9cf030 bda32f45 bda97e13     ....0...E/...~..
240293a0:	bdafc265 bdb60179 bdbc408e bdc27fa2     e...y....@......
240293b0:	bdc8beb6 bdcefdca bdd5421c bddb8130     .........B..0...
240293c0:	bde1c044 bde7ff58 bdee3e6c bdf47d80     D...X...l>...}..
240293d0:	bdfac1d3 be007896 be039820 be06b7aa     .....x.. .......
240293e0:	be09cf57 be0ceee1 be10110a be1328b7     W............(..
240293f0:	be164064 be195fee be1c779a be1f9724     d@..._...w..$...
24029400:	be22aed1 be25c91d be28e0ca be2bf877     .."...%...(.w.+.
24029410:	be2f1023 be322fad be353f7d be38572a     #./../2.}?5.*W8.
24029420:	be3b6ed6 be3e8922 be41a0cf be44b09f     .n;.".>...A...D.
24029430:	be47c84b be4adff8 be4defc8 be510774     K.G...J...M.t.Q.
24029440:	be541744 be572713 be5a3ec0 be5d512f     D.T..'W..>Z./Q].
24029450:	be6060fe be6370ce be66809d be69906d     .``..pc...f.m.i.
24029460:	be6ca03c be6fa82f be72b7fe be75c7ce     <.l./.o...r...u.
24029470:	be78cfc0 be7bdf8f be7ee782 be80fba9     ..x...{...~.....
24029480:	be827fa2 be84039b be858794 be870b8d     ................
24029490:	be888f86 be8a137f be8b9778 be8d1783     ........x.......
240294a0:	be8e9b7c be901b86 be919f80 be931f8a     |...............
240294b0:	be949f95 be96238e be97a398 be9923a3     .....#.......#..
240294c0:	be9a9fbe be9c1fc9 be9d9fd3 be9f1fde     ................
240294d0:	bea09bfa bea21816 bea39820 bea5143c     ........ ...<...
240294e0:	bea69058 bea80c74 bea98890 beab035c     X...t.......\...
240294f0:	beac7f78 beadf7a5 beaf73c1 beb0ebee     x........s......
24029500:	beb2641b beb3dc48 beb55864 beb6d091     .d..H...dX......
24029510:	beb84381 beb9bbae bebb33db bebca81a     .C.......3......
24029520:	bebe2047 bebf9485 bec10774 bec27bb3     G ......t....{..
24029530:	bec3eff2 bec56430 bec6d86f bec8476f     ....0d..o...oG..
24029540:	bec9bbae becb2bfe becc9c4e bece0c9e     .....+..N.......
24029550:	becf7b9e bed0ebee bed25c3e bed3c89f     .{......>\......
24029560:	bed537a0 bed6a401 bed81062 bed97b74     .7......b...t{..
24029570:	bedae7d5 bedc5437 beddc098 bedf27bb     ....7T.......'..
24029580:	bee0941d bee1fc8f bee363b2 bee4cc25     .........c..%...
24029590:	bee63498 bee79bbb bee9003f beea6762     .4......?...bg..
240295a0:	beebcbe6 beed306a beee939f beeff823     ....j0......#...
240295b0:	bef15ca7 bef2bfdb bef42071 bef57fb7     .\......q ......
240295c0:	bef6e04c bef83f92 bef9a027 befaff6d     L....?..'...m...
240295d0:	befc6003 befdbb5a beff1801 bf003a54     .`..Z.......T:..
240295e0:	bf00e7ff bf019653 bf0243fe bf02efb3     ....S....C......
240295f0:	bf039c0f bf0449ba bf04f41f bf059fd3     .....I..........
24029600:	bf064c30 bf06f5ed bf07a249 bf084c06     0L......I....L..
24029610:	bf08f5c3 bf09a027 bf0a49e4 bf0af252     ....'....I..R...
24029620:	bf0b9a17 bf0c43d4 bf0cec42 bf0d9210     .....C..B.......
24029630:	bf0e39d6 bf0ee243 bf0f8812 bf102de0     .9..C........-..
24029640:	bf10d3ae bf117a25 bf121ff3 bf12c3ca     ....%z..........
24029650:	bf136849 bf140c20 bf14aff7 bf1553ce     Ih.. ........S..
24029660:	bf15f84d bf169a2c bf173c0c bf17ddec     M...,....<......
24029670:	bf187fcc bf192253 bf19c23b bf1a6224     ....S"..;...$b..
24029680:	bf1b0404 bf1ba1f5 bf1c41dd bf1ce1c6     .........A......
24029690:	bf1d7fb7 bf1e1e4f bf1ebc41 bf1f5a32     ....O...A...2Z..
240296a0:	bf1ff823 bf20941d bf213016 bf21cc10     #..... ..0!...!.
240296b0:	bf22680a bf230404 bf239e06 bf243809     .h"...#...#..8$.
240296c0:	bf24d20b bf256c0d bf260610 bf269e1b     ..$..l%...&...&.
240296d0:	bf273626 bf27ce31 bf28663c bf28fe48     &6'.1.'.<f(.H.(.
240296e0:	bf2993b4 bf2a29c7 bf2abfdb bf2b55ef     ..)..)*...*..U+.
240296f0:	bf2bec03 bf2c801f bf2d143c bf2da7b1     ..+...,.<.-...-.
24029700:	bf2e3bcd bf2ecfea bf2f620f bf2ff434     .;.......b/.4./.
24029710:	bf3085b2 bf3117d7 bf31a805 bf323832     ..0...1...1.282.
24029720:	bf32c9b0 bf3357e6 bf33e814 bf34764b     ..2..W3...3.Kv4.
24029730:	bf3505d1 bf359408 bf362047 bf36add6     ..5...5.G 6...6.
24029740:	bf373a15 bf37c5ac bf3851ec bf38de2b     .:7...7..Q8.+.8.
24029750:	bf3967cb bf39f213 bf3a7bb3 bf3b05fb     .g9...9..{:...;.
24029760:	bf3b9043 bf3c17ec bf3ca03c bf3d27e5     C.;...<.<.<..'=.
24029770:	bf3db036 bf3e35e7 bf3ebc41 bf3f41f2     6.=..5>.A.>..A?.
24029780:	bf3fc84b bf404c06 bf40d1b7 bf415619     K.?..L@...@..VA.
24029790:	bf41d7dc bf425c3e bf42de01 bf435fc4     ..A.>\B...B.._C.
240297a0:	bf43e22e bf4463f1 bf44e3bd bf456430     ..C..cD...D.0dE.
240297b0:	bf45e3fc bf4663c7 bf46e243 bf476018     ..E..cF.C.F..`G.
240297c0:	bf47ddec bf485bc0 bf48d845 bf495619     ..G..[H.E.H..VI.
240297d0:	bf49d1f6 bf4a4bdc bf4ac7b9 bf4b4246     ..I..KJ...J.FBK.
240297e0:	bf4bbc2c bf4c3611 bf4cae00 bf4d27e5     ,.K..6L...L..'M.
240297f0:	bf4d9fd3 bf4e15ca bf4e8db9 bf4f03b0     ..M...N...N...O.
24029800:	bf4f7a4e bf4ff045 bf506445 bf50da3c     NzO.E.O.EdP.<.P.
24029810:	bf514e3c bf51c044 bf523444 bf52a64c     <NQ.D.Q.D4R.L.R.
24029820:	bf5317ad bf5389b5 bf53f9c6 bf546bcf     ..S...S...S..kT.
24029830:	bf54dbe0 bf5549f9 bf55ba0a bf562824     ..T..IU...U.$(V.
24029840:	bf56963e bf5703b0 bf576fd2 bf57dbf5     >.V...W..oW...W.
24029850:	bf584817 bf58b439 bf591dbd bf5987e8     .HX.9.X...Y...Y.
24029860:	bf59f213 bf5a5c3e bf5ac3ca bf5b2bfe     ..Y.>\Z...Z..+[.
24029870:	bf5b9431 bf5bfbbd bf5c61fa bf5cc836     1.[...[..a\.6.\.
24029880:	bf5d2dcb bf5d9210 bf5df5ae bf5e59f3     .-]...]...]..Y^.
24029890:	bf5ebe38 bf5f1fde bf5f8423 bf5fe5c9     8.^..._.#._..._.
240298a0:	bf604620 bf60a5ce bf61081c bf6165d4      F`...`...a..ea.
240298b0:	bf61c62a bf6223e2 bf628241 bf62dff8     *.a..#b.A.b...b.
240298c0:	bf633bb8 bf639820 bf63f3e0 bf645048     .;c. .c...c.HPd.
240298d0:	bf64aa11 bf6503da bf655e4a bf65b813     ..d...e.J^e...e.
240298e0:	bf660fe4 bf6667b6 bf66be38 bf671609     ..f..gf.8.f...g.
240298f0:	bf676be3 bf67c1be bf681648 bf686c22     .kg...g.H.h."lh.
24029900:	bf68c005 bf6911f1 bf6965d4 bf69b7bf     ..h...i..ei...i.
24029910:	bf6a0a52 bf6a5a47 bf6aac32 bf6afc26     R.j.GZj.2.j.&.j.
24029920:	bf6b4c1b bf6b9a17 bf6be814 bf6c3611     .Lk...k...k..6l.
24029930:	bf6c840e bf6cd014 bf6d1c19 bf6d681f     ..l...l...m..hm.
24029940:	bf6db22d bf6dfe33 bf6e464a bf6e8fb0     -.m.3.m.JFn...n.
24029950:	bf6ed7c7 bf6f1fde bf6f67f5 bf6fb00c     ..n...o..go...o.
24029960:	bf6ff62b bf703c4b bf707fcc bf70c5eb     +.o.K<p...p...p.
24029970:	bf710a13 bf714c44 bf718fc5 bf71d1f6     ..q.DLq...q...q.
24029980:	bf721427 bf7253b9 bf7295ea bf72d42c     '.r..Sr...r.,.r.
24029990:	bf7313be bf7353f8 bf73923a bf73cddd     ..s..Ss.:.s...s.
240299a0:	bf740c20 bf7447c3 bf74840e bf74bfb1      .t..Gt...t...t.
240299b0:	bf74fa05 bf7533b1 bf756e05 bf75a5b9     ..t..3u..nu...u.
240299c0:	bf75de16 bf7615ca bf764e27 bf7683e4     ..u...v.'Nv...v.
240299d0:	bf76ba49 bf76f007 bf7723cd bf77583a     I.v...v..#w.:Xw.
240299e0:	bf778c00 bf77bdcf bf77f23d bf782214     ..w...w.=.w.."x.
240299f0:	bf7853e3 bf7883ba bf78b439 bf78e411     .Sx...x.9.x...x.
24029a00:	bf7911f1 bf793fd1 bf796db1 bf799c39     ..y..?y..my.9.y.
24029a10:	bf79c821 bf79f40a bf7a1dfc bf7a49e4     !.y...y...z..Iz.
24029a20:	bf7a73d6 bf7a9bd0 bf7ac5c1 bf7aedbb     .sz...z...z...z.
24029a30:	bf7b13be bf7b3bb8 bf7b61bb bf7b87be     ..{..;{..a{...{.
24029a40:	bf7babc9 bf7bd1cc bf7bf5d8 bf7c17ec     ..{...{...{...|.
24029a50:	bf7c3bf7 bf7c5e0b bf7c7e28 bf7ca03c     .;|..^|.(~|.<.|.
24029a60:	bf7cbfb1 bf7cdfce bf7cfdf4 bf7d1c19     ..|...|...|...}.
24029a70:	bf7d3a3f bf7d57bc bf7d73eb bf7d9019     ?:}..W}..s}...}.
24029a80:	bf7dac47 bf7dc5d6 bf7de00d bf7dfa44     G.}...}...}.D.}.
24029a90:	bf7e13d3 bf7e2c13 bf7e4452 bf7e59f3     ..~..,~.RD~..Y~.
24029aa0:	bf7e703b bf7e85db bf7e9c24 bf7eafcd     ;p~...~.$.~...~.
24029ab0:	bf7ec41e bf7ed7c7 bf7eea21 bf7efbd2     ..~...~.!.~...~.
24029ac0:	bf7f0e2c bf7f1fde bf7f3040 bf7f3ffb     ,.......@0...?..
24029ad0:	bf7f4dbe bf7f5c29 bf7f69ec bf7f77af     .M..)\...i...w..
24029ae0:	bf7f8423 bf7f8fef bf7f9bbb bf7fa637     #...........7...
24029af0:	bf7fb203 bf7fb9e0 bf7fc3b5 bf7fcc3a     ............:...
24029b00:	bf7fd417 bf7fd9fd bf7fe1da bf7fe7c0     ................
24029b10:	bf7febaf bf7ff045 bf7ff434 bf7ff823     ....E...4...#...
24029b20:	bf7ffc11 bf7ffe09 bf7ffe09 bf800000     ................
24029b30:	bf800000 bf800000 bf7ffe09 bf7ffe09     ................
24029b40:	bf7ffc11 bf7ff823 bf7ff434 bf7ff045     ....#...4...E...
24029b50:	bf7febaf bf7fe7c0 bf7fe1da bf7fd9fd     ................
24029b60:	bf7fd417 bf7fcc3a bf7fc3b5 bf7fb9e0     ....:...........
24029b70:	bf7fb203 bf7fa637 bf7f9bbb bf7f8fef     ....7...........
24029b80:	bf7f8423 bf7f77af bf7f69ec bf7f5c29     #....w...i..)\..
24029b90:	bf7f4dbe bf7f3ffb bf7f3040 bf7f1fde     .M...?..@0......
24029ba0:	bf7f0e2c bf7efbd2 bf7eea21 bf7ed7c7     ,.....~.!.~...~.
24029bb0:	bf7ec41e bf7eafcd bf7e9c24 bf7e85db     ..~...~.$.~...~.
24029bc0:	bf7e703b bf7e59f3 bf7e4452 bf7e2c13     ;p~..Y~.RD~..,~.
24029bd0:	bf7e13d3 bf7dfa44 bf7de00d bf7dc5d6     ..~.D.}...}...}.
24029be0:	bf7dac47 bf7d9019 bf7d73eb bf7d57bc     G.}...}..s}..W}.
24029bf0:	bf7d3a3f bf7d1c19 bf7cfdf4 bf7cdfce     ?:}...}...|...|.
24029c00:	bf7cbfb1 bf7ca03c bf7c7e28 bf7c5e0b     ..|.<.|.(~|..^|.
24029c10:	bf7c3bf7 bf7c17ec bf7bf5d8 bf7bd1cc     .;|...|...{...{.
24029c20:	bf7babc9 bf7b87be bf7b61bb bf7b3bb8     ..{...{..a{..;{.
24029c30:	bf7b13be bf7aedbb bf7ac5c1 bf7a9bd0     ..{...z...z...z.
24029c40:	bf7a73d6 bf7a49e4 bf7a1dfc bf79f40a     .sz..Iz...z...y.
24029c50:	bf79c821 bf799c39 bf796db1 bf793fd1     !.y.9.y..my..?y.
24029c60:	bf7911f1 bf78e411 bf78b439 bf7883ba     ..y...x.9.x...x.
24029c70:	bf7853e3 bf782214 bf77f23d bf77bdcf     .Sx.."x.=.w...w.
24029c80:	bf778c00 bf77583a bf7723cd bf76f007     ..w.:Xw..#w...v.
24029c90:	bf76ba49 bf7683e4 bf764e27 bf7615ca     I.v...v.'Nv...v.
24029ca0:	bf75de16 bf75a5b9 bf756e05 bf7533b1     ..u...u..nu..3u.
24029cb0:	bf74fa05 bf74bfb1 bf74840e bf7447c3     ..t...t...t..Gt.
24029cc0:	bf740c20 bf73cddd bf73923a bf7353f8      .t...s.:.s..Ss.
24029cd0:	bf7313be bf72d42c bf7295ea bf7253b9     ..s.,.r...r..Sr.
24029ce0:	bf721427 bf71d1f6 bf718fc5 bf714c44     '.r...q...q.DLq.
24029cf0:	bf710a13 bf70c5eb bf707fcc bf703c4b     ..q...p...p.K<p.
24029d00:	bf6ff62b bf6fb00c bf6f67f5 bf6f1fde     +.o...o..go...o.
24029d10:	bf6ed7c7 bf6e8fb0 bf6e464a bf6dfe33     ..n...n.JFn.3.m.
24029d20:	bf6db22d bf6d681f bf6d1c19 bf6cd014     -.m..hm...m...l.
24029d30:	bf6c840e bf6c3611 bf6be814 bf6b9a17     ..l..6l...k...k.
24029d40:	bf6b4c1b bf6afc26 bf6aac32 bf6a5a47     .Lk.&.j.2.j.GZj.
24029d50:	bf6a0a52 bf69b7bf bf6965d4 bf6911f1     R.j...i..ei...i.
24029d60:	bf68c005 bf686c22 bf681648 bf67c1be     ..h."lh.H.h...g.
24029d70:	bf676be3 bf671609 bf66be38 bf6667b6     .kg...g.8.f..gf.
24029d80:	bf660fe4 bf65b813 bf655e4a bf6503da     ..f...e.J^e...e.
24029d90:	bf64aa11 bf645048 bf63f3e0 bf639820     ..d.HPd...c. .c.
24029da0:	bf633bb8 bf62dff8 bf628241 bf6223e2     .;c...b.A.b..#b.
24029db0:	bf61c62a bf6165d4 bf61081c bf60a5ce     *.a..ea...a...`.
24029dc0:	bf604620 bf5fe5c9 bf5f8423 bf5f1fde      F`..._.#._..._.
24029dd0:	bf5ebe38 bf5e59f3 bf5df5ae bf5d9210     8.^..Y^...]...].
24029de0:	bf5d2dcb bf5cc836 bf5c61fa bf5bfbbd     .-].6.\..a\...[.
24029df0:	bf5b9431 bf5b2bfe bf5ac3ca bf5a5c3e     1.[..+[...Z.>\Z.
24029e00:	bf59f213 bf5987e8 bf591dbd bf58b439     ..Y...Y...Y.9.X.
24029e10:	bf584817 bf57dbf5 bf576fd2 bf5703b0     .HX...W..oW...W.
24029e20:	bf56963e bf562824 bf55ba0a bf5549f9     >.V.$(V...U..IU.
24029e30:	bf54dbe0 bf546bcf bf53f9c6 bf5389b5     ..T..kT...S...S.
24029e40:	bf5317ad bf52a64c bf523444 bf51c044     ..S.L.R.D4R.D.Q.
24029e50:	bf514e3c bf50da3c bf506445 bf4ff045     <NQ.<.P.EdP.E.O.
24029e60:	bf4f7a4e bf4f03b0 bf4e8db9 bf4e15ca     NzO...O...N...N.
24029e70:	bf4d9fd3 bf4d27e5 bf4cae00 bf4c3611     ..M..'M...L..6L.
24029e80:	bf4bbc2c bf4b4246 bf4ac7b9 bf4a4bdc     ,.K.FBK...J..KJ.
24029e90:	bf49d1f6 bf495619 bf48d845 bf485bc0     ..I..VI.E.H..[H.
24029ea0:	bf47ddec bf476018 bf46e243 bf4663c7     ..G..`G.C.F..cF.
24029eb0:	bf45e3fc bf456430 bf44e3bd bf4463f1     ..E.0dE...D..cD.
24029ec0:	bf43e22e bf435fc4 bf42de01 bf425c3e     ..C.._C...B.>\B.
24029ed0:	bf41d7dc bf415619 bf40d1b7 bf404c06     ..A..VA...@..L@.
24029ee0:	bf3fc84b bf3f41f2 bf3ebc41 bf3e35e7     K.?..A?.A.>..5>.
24029ef0:	bf3db036 bf3d27e5 bf3ca03c bf3c17ec     6.=..'=.<.<...<.
24029f00:	bf3b9043 bf3b05fb bf3a7bb3 bf39f213     C.;...;..{:...9.
24029f10:	bf3967cb bf38de2b bf3851ec bf37c5ac     .g9.+.8..Q8...7.
24029f20:	bf373a15 bf36add6 bf362047 bf359408     .:7...6.G 6...5.
24029f30:	bf3505d1 bf34764b bf33e814 bf3357e6     ..5.Kv4...3..W3.
24029f40:	bf32c9b0 bf323832 bf31a805 bf3117d7     ..2.282...1...1.
24029f50:	bf3085b2 bf2ff434 bf2f620f bf2ecfea     ..0.4./..b/.....
24029f60:	bf2e3bcd bf2da7b1 bf2d143c bf2c801f     .;....-.<.-...,.
24029f70:	bf2bec03 bf2b55ef bf2abfdb bf2a29c7     ..+..U+...*..)*.
24029f80:	bf2993b4 bf28fe48 bf28663c bf27ce31     ..).H.(.<f(.1.'.
24029f90:	bf273626 bf269e1b bf260610 bf256c0d     &6'...&...&..l%.
24029fa0:	bf24d20b bf243809 bf239e06 bf230404     ..$..8$...#...#.
24029fb0:	bf22680a bf21cc10 bf213016 bf20941d     .h"...!..0!... .
24029fc0:	bf1ff823 bf1f5a32 bf1ebc41 bf1e1e4f     #...2Z..A...O...
24029fd0:	bf1d7fb7 bf1ce1c6 bf1c41dd bf1ba1f5     .........A......
24029fe0:	bf1b0404 bf1a6224 bf19c23b bf192253     ....$b..;...S"..
24029ff0:	bf187fcc bf17ddec bf173c0c bf169a2c     .........<..,...
2402a000:	bf15f84d bf1553ce bf14aff7 bf140c20     M....S...... ...
2402a010:	bf136849 bf12c3ca bf121ff3 bf117a25     Ih..........%z..
2402a020:	bf10d3ae bf102de0 bf0f8812 bf0ee243     .....-......C...
2402a030:	bf0e39d6 bf0d9210 bf0cec42 bf0c43d4     .9......B....C..
2402a040:	bf0b9a17 bf0af252 bf0a49e4 bf09a027     ....R....I..'...
2402a050:	bf08f5c3 bf084c06 bf07a249 bf06f5ed     .....L..I.......
2402a060:	bf064c30 bf059fd3 bf04f41f bf0449ba     0L...........I..
2402a070:	bf039c0f bf02efb3 bf0243fe bf019653     .........C..S...
2402a080:	bf00e7ff bf003a54 beff1801 befdbb5a     ....T:......Z...
2402a090:	befc6003 befaff6d bef9a027 bef83f92     .`..m...'....?..
2402a0a0:	bef6e04c bef57fb7 bef42071 bef2bfdb     L.......q ......
2402a0b0:	bef15ca7 beeff823 beee939f beed306a     .\..#.......j0..
2402a0c0:	beebcbe6 beea6762 bee9003f bee79bbb     ....bg..?.......
2402a0d0:	bee63498 bee4cc25 bee363b2 bee1fc8f     .4..%....c......
2402a0e0:	bee0941d bedf27bb beddc098 bedc5437     .....'......7T..
2402a0f0:	bedae7d5 bed97b74 bed81062 bed6a401     ....t{..b.......
2402a100:	bed537a0 bed3c89f bed25c3e bed0ebee     .7......>\......
2402a110:	becf7b9e bece0c9e becc9c4e becb2bfe     .{......N....+..
2402a120:	bec9bbae bec8476f bec6d86f bec56430     ....oG..o...0d..
2402a130:	bec3eff2 bec27bb3 bec10774 bebf9485     .....{..t.......
2402a140:	bebe2047 bebca81a bebb33db beb9bbae     G .......3......
2402a150:	beb84381 beb6d091 beb55864 beb3dc48     .C......dX..H...
2402a160:	beb2641b beb0ebee beaf73c1 beadf7a5     .d.......s......
2402a170:	beac7f78 beab035c bea98890 bea80c74     x...\.......t...
2402a180:	bea69058 bea5143c bea39820 bea21816     X...<... .......
2402a190:	bea09bfa be9f1fde be9d9fd3 be9c1fc9     ................
2402a1a0:	be9a9fbe be9923a3 be97a398 be96238e     .....#.......#..
2402a1b0:	be949f95 be931f8a be919f80 be901b86     ................
2402a1c0:	be8e9b7c be8d1783 be8b9778 be8a137f     |.......x.......
2402a1d0:	be888f86 be870b8d be858794 be84039b     ................
2402a1e0:	be827fa2 be80fba9 be7ee782 be7bdf8f     ..........~...{.
2402a1f0:	be78cfc0 be75c7ce be72b7fe be6fa82f     ..x...u...r./.o.
2402a200:	be6ca03c be69906d be66809d be6370ce     <.l.m.i...f..pc.
2402a210:	be6060fe be5d512f be5a3ec0 be572713     .``./Q]..>Z..'W.
2402a220:	be541744 be510774 be4defc8 be4adff8     D.T.t.Q...M...J.
2402a230:	be47c84b be44b09f be41a0cf be3e8922     K.G...D...A.".>.
2402a240:	be3b6ed6 be38572a be353f7d be322fad     .n;.*W8.}?5../2.
2402a250:	be2f1023 be2bf877 be28e0ca be25c91d     #./.w.+...(...%.
2402a260:	be22aed1 be1f9724 be1c779a be195fee     ..".$....w..._..
2402a270:	be164064 be1328b7 be10110a be0ceee1     d@...(..........
2402a280:	be09cf57 be06b7aa be039820 be007896     W....... ....x..
2402a290:	bdfac1d3 bdf47d80 bdee3e6c bde7ff58     .....}..l>..X...
2402a2a0:	bde1c044 bddb8130 bdd5421c bdcefdca     D...0....B......
2402a2b0:	bdc8beb6 bdc27fa2 bdbc408e bdb60179     .........@..y...
2402a2c0:	bdafc265 bda97e13 bda32f45 bd9cf030     e....~..E/..0...
2402a2d0:	bd96b11c bd907208 bd8a1dfc bd83dee8     .....r..........
2402a2e0:	bd7b3fa7 bd6ea20a bd6223e2 bd559b3d     .?{...n..#b.=.U.
2402a2f0:	bd48fda0 bd3c7f78 bd2fe1da bd2363b2     ..H.x.<.../..c#.
2402a300:	bd16db0e bd0a3d71 bcfb7e91 bce24357     ....q=...~..WC..
2402a310:	bcc94706 bcaff6d3 bc96fa83 bc7b7e91     .G...........~{.
2402a320:	bc4985f0 bc170f7c bbc9d9d3 bb49d9d3     ..I.|.........I.

2402a330 <__leaf_tablesize_firNumTaps>:
2402a330:	00000020 00000040 00000040 00000080      ...@...@.......
2402a340:	00000100 00000100 00000080 00000100     ................
2402a350:	00000100 00000200 00000200 00000400     ................
	...
2402a3b0:	33323130 37363534 62613938 66656463     0123456789abcdef
2402a3c0:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
2402a3d0:	7a797877 00000000                       wxyz....

2402a3d8 <__exp2f_data>:
2402a3d8:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
2402a3e8:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
2402a3f8:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
2402a408:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
2402a418:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
2402a428:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
2402a438:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
2402a448:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
2402a458:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
2402a468:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
2402a478:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
2402a488:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
2402a498:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
2402a4a8:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
2402a4b8:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
2402a4c8:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
2402a4d8:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
2402a4e8:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
2402a4f8:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
2402a508:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
2402a518:	ff0c52d6 3f962e42                       .R..B..?

2402a520 <__logf_data>:
2402a520:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
2402a530:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
2402a540:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
2402a550:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
2402a560:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
2402a570:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
2402a580:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
2402a590:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
2402a5a0:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
2402a5b0:	00000000 3ff00000 00000000 00000000     .......?........
2402a5c0:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
2402a5d0:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
2402a5e0:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
2402a5f0:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
2402a600:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
2402a610:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
2402a620:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
2402a630:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

2402a640 <__exp_data>:
2402a640:	652b82fe 40671547 00000000 43380000     ..+eG.g@......8C
2402a650:	fefa0000 bf762e42 bc9e3b3a bd0cf79a     ....B.v.:;......
2402a660:	fffffdbd 3fdfffff 5555543c 3fc55555     .......?<TUUUU.?
2402a670:	cf172b91 3fa55555 67a4d017 3f811111     .+..UU.?...g...?
2402a680:	00000000 42c80000 fefa39ef 3fe62e42     .......B.9..B..?
2402a690:	ff82c424 3fcebfbd d70cf4b5 3fac6b08     $......?.....k.?
2402a6a0:	d24650cc 3f83b2ab 9b4e3a84 3f55d7e0     .PF....?.:N...U?
	...
2402a6bc:	3ff00000 1a88bf6e 3c9b3b4f a9fb3335     ...?n...O;.<53..
2402a6cc:	3feff63d 9cd8dc5d bc716013 3e778061     =..?]....`q.a.w>
2402a6dc:	3fefec9a 108766d1 bc905e7a e86e7f85     ...?.f..z^....n.
2402a6ec:	3fefe315 3567f613 3c8cd252 d3158574     ...?..g5R..<t...
2402a6fc:	3fefd9b0 23f98efa bc8bce80 29ddf6de     ...?...#.......)
2402a70c:	3fefd06b 61e6c861 3c60f74e 18759bc8     k..?a..aN.`<..u.
2402a71c:	3fefc745 5b33d399 3c90a3e4 cac6f383     E..?..3[...<....
2402a72c:	3fefbe3e 5d837b6d 3c979aa6 6cf9890f     >..?m{.]...<...l
2402a73c:	3fefb558 92fdeffc 3c8eb51a 2b7247f7     X..?.......<.Gr+
2402a74c:	3fefac92 702f9cd1 3c3ebe3d 32d3d1a2     ...?../p=.><...2
2402a75c:	3fefa3ec 89906e0b bc6a0334 affed31b     ...?.n..4.j.....
2402a76c:	3fef9b66 2a2fbd0e bc955652 d0125b51     f..?../*RV..Q[..
2402a77c:	3fef9301 8c4eea55 bc5080ef c06c31cc     ...?U.N...P..1l.
2402a78c:	3fef8abd b9d5f416 bc91c923 aea92de0     ...?....#....-..
2402a79c:	3fef829a e95c55af 3c80d3e3 c8a58e51     ...?.U\....<Q...
2402a7ac:	3fef7a98 eaa59348 bc801b15 3c7d517b     .z.?H.......{Q}<
2402a7bc:	3fef72b8 55de323d bc8f1ff0 388c8dea     .r.?=2.U.......8
2402a7cc:	3fef6af9 3f1353bf 3c8b898c eb6fcb75     .j.?.S.?...<u.o.
2402a7dc:	3fef635b 7611eb26 bc96d99c 84045cd4     [c.?&..v.....\..
2402a7ec:	3fef5be0 3e3a2f60 3c9aecf7 3168b9aa     .[.?`/:>...<..h1
2402a7fc:	3fef5487 cb86389d bc8fe782 22fcd91d     .T.?.8........."
2402a80c:	3fef4d50 44a6c38d 3c8a6f41 88628cd6     PM.?...DAo.<..b.
2402a81c:	3fef463b b0e4047d 3c807a05 917ddc96     ;F.?}....z.<..}.
2402a82c:	3fef3f49 e3a8a894 3c968efd 6e756238     I?.?.......<8bun
2402a83c:	3fef387a f274487d 3c875e18 4fb2a63f     z8.?}Ht..^.<?..O
2402a84c:	3fef31ce 981fe7f2 3c80472b 65e27cdd     .1.?....+G.<.|.e
2402a85c:	3fef2b45 3f71085e bc96b87b e1f56381     E+.?^.q?{....c..
2402a86c:	3fef24df 6d09ab31 3c82f7e1 f51fdee1     .$.?1..m...<....
2402a87c:	3fef1e9d 1a6fbffa bc3d219b d0dad990     ...?..o..!=.....
2402a88c:	3fef187f 720c0ab4 3c8b3782 a6e4030b     ...?...r.7.<....
2402a89c:	3fef1285 89cecb8f 3c6e1492 a93e2f56     ...?......n<V/>.
2402a8ac:	3fef0caf 4db0abb6 3c834d75 0a31b715     ...?...MuM.<..1.
2402a8bc:	3fef06fe e2ac744c 3c864201 fc4cd831     ...?Lt...B.<1.L.
2402a8cc:	3fef0170 5dd3f84a 3c8fdd39 b26416ff     p..?J..]9..<..d.
2402a8dc:	3feefc08 3b8e5b04 bc86a380 5f929ff1     ...?.[.;......._
2402a8ec:	3feef6c5 cc4b5068 bc924aed 373aa9cb     ...?hPK..J....:7
2402a8fc:	3feef1a7 1b512d8e bc9907f8 6d05d866     ...?.-Q.....f..m
2402a90c:	3feeecae 3e9436d2 bc71d1e8 34e59ff7     ...?.6.>..q....4
2402a91c:	3feee7db b3ce1b15 bc991919 c313a8e5     ...?............
2402a92c:	3feee32d a72a4c6d 3c859f48 4c123422     -..?mL*.H..<"4.L
2402a93c:	3feedea6 7a28698a bc931260 04ac801c     ...?.i(z`.......
2402a94c:	3feeda45 4817895b bc58a78f 21f72e2a     E..?[..H..X.*..!
2402a95c:	3feed60a 67499a1b bc7c2c9b d950a897     ...?..Ig.,|...P.
2402a96c:	3feed1f5 60c2ac11 3c4363ed 6061892d     ...?...`.cC<-.a`
2402a97c:	3feece08 3b0664ef 3c966609 ed1d0057     ...?.d.;.f.<W...
2402a98c:	3feeca41 daa10379 3c6ecce1 b5c13cd0     A..?y.....n<.<..
2402a99c:	3feec6a2 3f0f1230 3c93ff8e f0d7d3de     ...?0..?...<....
2402a9ac:	3feec32a bb7aafb0 3c7690ce d5362a27     *..?..z...v<'*6.
2402a9bc:	3feebfda eb54e077 3c931dbd 99fddd0d     ...?w.T....<....
2402a9cc:	3feebcb2 0071a38e bc8f9434 769d2ca7     ...?..q.4....,.v
2402a9dc:	3feeb9b2 dc93a349 bc87decc a2cf6642     ...?I.......Bf..
2402a9ec:	3feeb6da bd0f385f bc78dec6 569d4f82     ...?_8....x..O.V
2402a9fc:	3feeb42b ec7b5cf6 bc861246 ca5d920f     +..?.\{.F.....].
2402aa0c:	3feeb1a4 18fdd78e 3c933505 36b527da     ...?.....5.<.'.6
2402aa1c:	3feeaf47 2f8a9b05 3c7b98b7 d497c7fd     G..?.../..{<....
2402aa2c:	3feead12 e21c5409 3c9063e1 dd485429     ...?.T...c.<)TH.
2402aa3c:	3feeab07 5019c6ea 3c34c785 8a5946b7     ...?...P..4<.FY.
2402aa4c:	3feea926 2b64c035 3c9432e6 15ad2148     &..?5.d+.2.<H!..
2402aa5c:	3feea76f 6199769f bc8ce44a b976dc09     o..?.v.aJ.....v.
2402aa6c:	3feea5e1 3bef4da8 bc8c33c5 b03a5585     ...?.M.;.3...U:.
2402aa7c:	3feea47e 892be9ae bc845378 34ccc320     ~..?..+.xS.. ..4
2402aa8c:	3feea346 78565858 bc93cedd 82552225     F..?XXVx....%"U.
2402aa9c:	3feea238 807e1964 3c5710aa d44ca973     8..?d.~...W<s.L.
2402aaac:	3feea155 bf5e2228 bc93b3ef 667f3bcd     U..?("^......;.f
2402aabc:	3feea09e 8734b982 bc6a12ad 750bdabf     ...?..4...j....u
2402aacc:	3feea012 b86da9ee bc6367ef 3c651a2f     ...?..m..gc./.e<
2402aadc:	3fee9fb2 54e08851 bc80dc3d f9519484     ...?Q..T=.....Q.
2402aaec:	3fee9f7d 7e5a3ecf bc781f64 e8ec5f74     }..?.>Z~d.x.t_..
2402aafc:	3fee9f75 c08b7db0 bc86ee4a 48a58174     u..?.}..J...t..H
2402ab0c:	3fee9f9a 1e55e68a bc861932 564267c9     ...?..U.2....gBV
2402ab1c:	3fee9feb 5e09d4d3 3c909ccb 4fde5d3f     ...?...^...<?].O
2402ab2c:	3feea069 b94da51d bc7b32dc 73eb0187     i..?..M..2{....s
2402ab3c:	3feea114 5467c06b 3c94ecfd 0130c132     ...?k.gT...<2.0.
2402ab4c:	3feea1ed abd66c55 3c65ebe1 36cf4e62     ...?Ul....e<bN.6
2402ab5c:	3feea2f3 2fb3cf42 bc88a1c5 543e1a12     ...?B../......>T
2402ab6c:	3feea427 f13b3734 bc9369b6 994cce13     '..?47;..i....L.
2402ab7c:	3feea589 3a19ff1e bc805e84 4623c7ad     ...?...:.^....#F
2402ab8c:	3feea71a d872576e bc94d450 9b4492ed     ...?nWr.P.....D.
2402ab9c:	3feea8d9 5b0e8a00 3c90ad67 d98a6699     ...?...[g..<.f..
2402abac:	3feeaac7 c1f0eab4 3c8db72f 422aa0db     ...?..../..<..*B
2402abbc:	3feeace5 9cc5e7ff bc65b660 16b5448c     ...?....`.e..D..
2402abcc:	3feeaf32 59f35f44 3c7bf683 99157736     2..?D_.Y..{<6w..
2402abdc:	3feeb1ae a71e3d83 bc93091f 0b91ffc6     ...?.=..........
2402abec:	3feeb45b 8b6c1e29 bc5da9b8 b0cdc5e5     [..?).l...].....
2402abfc:	3feeb737 7c90b959 bc6c23f9 cbc8520f     7..?Y..|.#l..R..
2402ac0c:	3feeba44 22f4f9aa bc924343 9fde4e50     D..?..."CC..PN..
2402ac1c:	3feebd82 d7668e4b bc85ca6c 70ca07ba     ...?K.f.l......p
2402ac2c:	3feec0f1 2b91ce27 3c71affc 82a3f090     ...?'..+..q<....
2402ac3c:	3feec491 e10a73bb 3c6dd235 19e32323     ...?.s..5.m<##..
2402ac4c:	3feec863 22622263 bc87c504 7b5de565     c..?c"b"....e.]{
2402ac5c:	3feecc66 e3e231d5 3c8b1c86 ec4a2d33     f..?.1.....<3-J.
2402ac6c:	3feed09b d3bcbb15 bc91bbd1 b23e255d     ...?........]%>.
2402ac7c:	3feed503 9cee31d2 3c90cc31 1330b358     ...?.1..1..<X.0.
2402ac8c:	3feed99e 6e735ab3 3c846984 5579fdbf     ...?.Zsn.i.<..yU
2402ac9c:	3feede6b 978e9db4 bc82dfcd bfd3f37a     k..?........z...
2402acac:	3feee36b 92cb3387 3c8c1a77 995ad3ad     k..?.3..w..<..Z.
2402acbc:	3feee89f 4ad1d9fa bc907b8f 298db666     ...?...J.{..f..)
2402accc:	3feeee07 56dcaeba bc55c3d9 b84f15fb     ...?...V..U...O.
2402acdc:	3feef3a2 3da6f640 bc90a40e 8de5593a     ...?@..=....:Y..
2402acec:	3feef972 38ad9334 bc68d6f4 f2fb5e47     r..?4..8..h.G^..
2402acfc:	3feeff76 6b588a35 bc91eee2 30a1064a     v..?5.Xk....J..0
2402ad0c:	3fef05b0 0a5fddcd 3c74ffd7 904bc1d2     ...?.._...t<..K.
2402ad1c:	3fef0c1e fa9298ac bc91bdfb 5bd71e09     ...?...........[
2402ad2c:	3fef12c2 30af0cb3 3c736eae dd85529c     ...?...0.ns<.R..
2402ad3c:	3fef199b 5c9ffd94 3c8ee332 5fffd07a     ...?...\2..<z.._
2402ad4c:	3fef20ab d10959ac 3c84e08f 2e57d14b     . .?.Y.....<K.W.
2402ad5c:	3fef27f1 384e1a67 3c63cdaf 9406e7b5     .'.?g.N8..c<....
2402ad6c:	3fef2f6d 6c921968 3c676b2c dcef9069     m/.?h..l,kg<i...
2402ad7c:	3fef3720 83ccb5d2 bc808a18 555dc3fa      7.?..........]U
2402ad8c:	3fef3f0b 3ffffa6f bc8fad5d 4a07897c     .?.?o..?]...|..J
2402ad9c:	3fef472d 3875a949 bc900dae 080d89f2     -G.?I.u8........
2402adac:	3fef4f87 a63d07a7 3c74a385 dcfba487     .O.?..=...t<....
2402adbc:	3fef5818 2040220f bc82919e 16c98398     .X.?."@ ........
2402adcc:	3fef60e3 d5c192ac 3c8e5a50 03db3285     .`.?....PZ.<.2..
2402addc:	3fef69e6 ac016b4b 3c843a59 f301b460     .i.?Kk..Y:.<`...
2402adec:	3fef7321 07b43e1f bc82d521 337b9b5f     !s.?.>..!..._.{3
2402adfc:	3fef7c97 3b470dc9 bc892ab9 14f5a129     .|.?..G;.*..)...
2402ae0c:	3fef8646 603a88d3 3c74b604 e78b3ff6     F..?..:`..t<.?..
2402ae1c:	3fef902e 519d7271 3c83c5ec fbc74c83     ...?qr.Q...<.L..
2402ae2c:	3fef9a51 8fd391f0 bc8ff712 a2a490da     Q..?............
2402ae3c:	3fefa4af e223747d bc8dae98 2d8e67f1     ...?}t#......g.-
2402ae4c:	3fefaf48 41aa2008 3c8ec3bc ee615a27     H..?. .A...<'Za.
2402ae5c:	3fefba1b c3a9eb32 3c842b94 376bba97     ...?2....+.<..k7
2402ae6c:	3fefc52b 31d185ee 3c8a64a9 5b6e4540     +..?...1.d.<@En[
2402ae7c:	3fefd076 e43be3ed bc8e37ba ad9cbe14     v..?..;..7......
2402ae8c:	3fefdbfd 4d91cd9d 3c77893b 819e90d8     ...?...M;.w<....
2402ae9c:	3fefe7c1 4160cc89 3c5305c1 2b8f71f1     ...?..`A..S<.q.+
2402aeac:	3feff3c2                                ...?

2402aeb0 <__log2f_data>:
2402aeb0:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
2402aec0:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
2402aed0:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
2402aee0:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
2402aef0:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
2402af00:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
2402af10:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
2402af20:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
2402af30:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
2402af40:	00000000 3ff00000 00000000 00000000     .......?........
2402af50:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
2402af60:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
2402af70:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
2402af80:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
2402af90:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
2402afa0:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
2402afb0:	f70a7e4d bfd712b6 496832e0 3fdecabf     M~.......2hI...?
2402afc0:	9ffae3de bfe71547 5f35c8b8 3ff71547     ....G.....5_G..?

2402afd0 <npio2_hw>:
2402afd0:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
2402afe0:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
2402aff0:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
2402b000:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
2402b010:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
2402b020:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
2402b030:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
2402b040:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

2402b050 <two_over_pi>:
2402b050:	000000a2 000000f9 00000083 0000006e     ............n...
2402b060:	0000004e 00000044 00000015 00000029     N...D.......)...
2402b070:	000000fc 00000027 00000057 000000d1     ....'...W.......
2402b080:	000000f5 00000034 000000dd 000000c0     ....4...........
2402b090:	000000db 00000062 00000095 00000099     ....b...........
2402b0a0:	0000003c 00000043 00000090 00000041     <...C.......A...
2402b0b0:	000000fe 00000051 00000063 000000ab     ....Q...c.......
2402b0c0:	000000de 000000bb 000000c5 00000061     ............a...
2402b0d0:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
2402b0e0:	00000042 0000004d 000000d2 000000e0     B...M...........
2402b0f0:	00000006 00000049 0000002e 000000ea     ....I...........
2402b100:	00000009 000000d1 00000092 0000001c     ................
2402b110:	000000fe 0000001d 000000eb 0000001c     ................
2402b120:	000000b1 00000029 000000a7 0000003e     ....).......>...
2402b130:	000000e8 00000082 00000035 000000f5     ........5.......
2402b140:	0000002e 000000bb 00000044 00000084     ........D.......
2402b150:	000000e9 0000009c 00000070 00000026     ........p...&...
2402b160:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
2402b170:	00000039 00000091 000000d6 00000039     9...........9...
2402b180:	00000083 00000053 00000039 000000f4     ....S...9.......
2402b190:	0000009c 00000084 0000005f 0000008b     ........_.......
2402b1a0:	000000bd 000000f9 00000028 0000003b     ........(...;...
2402b1b0:	0000001f 000000f8 00000097 000000ff     ................
2402b1c0:	000000de 00000005 00000098 0000000f     ................
2402b1d0:	000000ef 0000002f 00000011 0000008b     ..../...........
2402b1e0:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
2402b1f0:	0000006d 00000036 0000007e 000000cf     m...6...~.......
2402b200:	00000027 000000cb 00000009 000000b7     '...............
2402b210:	0000004f 00000046 0000003f 00000066     O...F...?...f...
2402b220:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
2402b230:	00000075 00000027 000000ba 000000c7     u...'...........
2402b240:	000000eb 000000e5 000000f1 0000007b     ............{...
2402b250:	0000003d 00000007 00000039 000000f7     =.......9.......
2402b260:	0000008a 00000052 00000092 000000ea     ....R...........
2402b270:	0000006b 000000fb 0000005f 000000b1     k......._.......
2402b280:	0000001f 0000008d 0000005d 00000008     ........].......
2402b290:	00000056 00000003 00000030 00000046     V.......0...F...
2402b2a0:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
2402b2b0:	000000f0 000000cf 000000bc 00000020     ............ ...
2402b2c0:	0000009a 000000f4 00000036 0000001d     ........6.......
2402b2d0:	000000a9 000000e3 00000091 00000061     ............a...
2402b2e0:	0000005e 000000e6 0000001b 00000008     ^...............
2402b2f0:	00000065 00000099 00000085 0000005f     e..........._...
2402b300:	00000014 000000a0 00000068 00000040     ........h...@...
2402b310:	0000008d 000000ff 000000d8 00000080     ................
2402b320:	0000004d 00000073 00000027 00000031     M...s...'...1...
2402b330:	00000006 00000006 00000015 00000056     ............V...
2402b340:	000000ca 00000073 000000a8 000000c9     ....s...........
2402b350:	00000060 000000e2 0000007b 000000c0     `.......{.......
2402b360:	0000008c 0000006b                       ....k...

2402b368 <npio2_hw>:
2402b368:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
2402b378:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
2402b388:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
2402b398:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
2402b3a8:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
2402b3b8:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
2402b3c8:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
2402b3d8:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

2402b3e8 <two_over_pi>:
2402b3e8:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
2402b3f8:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
2402b408:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
2402b418:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
2402b428:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
2402b438:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
2402b448:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
2402b458:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
2402b468:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
2402b478:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
2402b488:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
2402b498:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
2402b4a8:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
2402b4b8:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
2402b4c8:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
2402b4d8:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
2402b4e8:	0060e27b 00c08c6b                       {.`.k...

2402b4f0 <__powf_log2_data>:
2402b4f0:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
2402b500:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
2402b510:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
2402b520:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
2402b530:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
2402b540:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
2402b550:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
2402b560:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
2402b570:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
2402b580:	00000000 3ff00000 00000000 00000000     .......?........
2402b590:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
2402b5a0:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
2402b5b0:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
2402b5c0:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
2402b5d0:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
2402b5e0:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
2402b5f0:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
2402b600:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
2402b610:	652ab82b 3ff71547                       +.*eG..?

2402b618 <PIo2>:
2402b618:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
2402b628:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
2402b638:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
2402b648:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

2402b658 <init_jk>:
2402b658:	00000002 00000003 00000004 00000006     ................

2402b668 <PIo2>:
2402b668:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
2402b678:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
2402b688:	1fc40000 1bc60000 17440000              ..........D.

2402b694 <init_jk>:
2402b694:	00000004 00000007 00000009              ............

2402b6a0 <_init>:
2402b6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2402b6a2:	bf00      	nop
2402b6a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
2402b6a6:	bc08      	pop	{r3}
2402b6a8:	469e      	mov	lr, r3
2402b6aa:	4770      	bx	lr

2402b6ac <_fini>:
2402b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2402b6ae:	bf00      	nop
2402b6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
2402b6b2:	bc08      	pop	{r3}
2402b6b4:	469e      	mov	lr, r3
2402b6b6:	4770      	bx	lr

2402b6b8 <__audioInitString3_veneer>:
2402b6b8:	f85f f000 	ldr.w	pc, [pc]	; 2402b6bc <__audioInitString3_veneer+0x4>
2402b6bc:	00007821 	.word	0x00007821

2402b6c0 <__parsePreset_veneer>:
2402b6c0:	f85f f000 	ldr.w	pc, [pc]	; 2402b6c4 <__parsePreset_veneer+0x4>
2402b6c4:	00001c81 	.word	0x00001c81

2402b6c8 <__HAL_SPI_TxRxCpltCallback_veneer>:
2402b6c8:	f85f f000 	ldr.w	pc, [pc]	; 2402b6cc <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
2402b6cc:	00005f21 	.word	0x00005f21

2402b6d0 <__audioFreeString2_veneer>:
2402b6d0:	f85f f000 	ldr.w	pc, [pc]	; 2402b6d4 <__audioFreeString2_veneer+0x4>
2402b6d4:	00006d61 	.word	0x00006d61

2402b6d8 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
2402b6d8:	f85f f000 	ldr.w	pc, [pc]	; 2402b6dc <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
2402b6dc:	00005ea1 	.word	0x00005ea1

2402b6e0 <__audioFreeString1_veneer>:
2402b6e0:	f85f f000 	ldr.w	pc, [pc]	; 2402b6e4 <__audioFreeString1_veneer+0x4>
2402b6e4:	00006681 	.word	0x00006681

2402b6e8 <__HAL_SAI_TxCpltCallback_veneer>:
2402b6e8:	f85f f000 	ldr.w	pc, [pc]	; 2402b6ec <__HAL_SAI_TxCpltCallback_veneer+0x4>
2402b6ec:	00001541 	.word	0x00001541

2402b6f0 <__audioInitVocal_veneer>:
2402b6f0:	f85f f000 	ldr.w	pc, [pc]	; 2402b6f4 <__audioInitVocal_veneer+0x4>
2402b6f4:	0000b661 	.word	0x0000b661

2402b6f8 <__HAL_SAI_TxHalfCpltCallback_veneer>:
2402b6f8:	f85f f000 	ldr.w	pc, [pc]	; 2402b6fc <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
2402b6fc:	00001741 	.word	0x00001741

2402b700 <__randomNumber_veneer>:
2402b700:	f85f f000 	ldr.w	pc, [pc]	; 2402b704 <__randomNumber_veneer+0x4>
2402b704:	00001c41 	.word	0x00001c41

2402b708 <__audioInitAdditive_veneer>:
2402b708:	f85f f000 	ldr.w	pc, [pc]	; 2402b70c <__audioInitAdditive_veneer+0x4>
2402b70c:	00000401 	.word	0x00000401

2402b710 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
2402b710:	f85f f000 	ldr.w	pc, [pc]	; 2402b714 <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
2402b714:	00006241 	.word	0x00006241

2402b718 <__HAL_SAI_ErrorCallback_veneer>:
2402b718:	f85f f000 	ldr.w	pc, [pc]	; 2402b71c <__HAL_SAI_ErrorCallback_veneer+0x4>
2402b71c:	00001921 	.word	0x00001921

2402b720 <__HAL_I2C_ErrorCallback_veneer>:
2402b720:	f85f f000 	ldr.w	pc, [pc]	; 2402b724 <__HAL_I2C_ErrorCallback_veneer+0x4>
2402b724:	00005ee1 	.word	0x00005ee1

Disassembly of section .itcmram:

00000400 <audioInitAdditive>:
}
     400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     404:	f8df c3f4 	ldr.w	ip, [pc, #1012]	; 7fc <audioInitAdditive+0x3fc>
     408:	4fe2      	ldr	r7, [pc, #904]	; (794 <audioInitAdditive+0x394>)
     40a:	49e3      	ldr	r1, [pc, #908]	; (798 <audioInitAdditive+0x398>)
     40c:	4ae3      	ldr	r2, [pc, #908]	; (79c <audioInitAdditive+0x39c>)
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
     40e:	4ce4      	ldr	r4, [pc, #912]	; (7a0 <audioInitAdditive+0x3a0>)
     410:	f101 053c 	add.w	r5, r1, #60	; 0x3c
     414:	48e3      	ldr	r0, [pc, #908]	; (7a4 <audioInitAdditive+0x3a4>)
     416:	4be4      	ldr	r3, [pc, #912]	; (7a8 <audioInitAdditive+0x3a8>)
}
     418:	4606      	mov	r6, r0
     41a:	ed2d 8b10 	vpush	{d8-d15}
        p->curr = pickupOut;
     41e:	edd7 2a00 	vldr	s5, [r7]
}
     422:	b083      	sub	sp, #12
     424:	6014      	str	r4, [r2, #0]
     426:	461a      	mov	r2, r3
     428:	ed9c 4a00 	vldr	s8, [ip]
    __HAL_DMA_ENABLE(hdma);
     42c:	460c      	mov	r4, r1
     42e:	eddc 4a01 	vldr	s9, [ip, #4]
     432:	ed97 3a01 	vldr	s6, [r7, #4]
     436:	edd7 3a02 	vldr	s7, [r7, #8]
     43a:	ed97 5a03 	vldr	s10, [r7, #12]
     43e:	edd7 5a04 	vldr	s11, [r7, #16]
     442:	ed97 6a05 	vldr	s12, [r7, #20]
     446:	edd7 6a06 	vldr	s13, [r7, #24]
     44a:	ed97 7a07 	vldr	s14, [r7, #28]
     44e:	edd7 7a08 	vldr	s15, [r7, #32]
     452:	ecf2 9a01 	vldmia	r2!, {s19}
     456:	ecf4 aa01 	vldmia	r4!, {s21}
     45a:	ecb6 aa01 	vldmia	r6!, {s20}
     45e:	ee72 2aa9 	vadd.f32	s5, s5, s19
     462:	ed92 9a11 	vldr	s18, [r2, #68]	; 0x44
     466:	42a5      	cmp	r5, r4
     468:	edd2 8a23 	vldr	s17, [r2, #140]	; 0x8c
     46c:	ee34 4a2a 	vadd.f32	s8, s8, s21
     470:	ed92 8a35 	vldr	s16, [r2, #212]	; 0xd4
     474:	ee74 4a8a 	vadd.f32	s9, s9, s20
     478:	ed92 0a47 	vldr	s0, [r2, #284]	; 0x11c
     47c:	ee33 3a09 	vadd.f32	s6, s6, s18
     480:	edd2 0a59 	vldr	s1, [r2, #356]	; 0x164
     484:	ee73 3aa8 	vadd.f32	s7, s7, s17
     488:	ed92 1a6b 	vldr	s2, [r2, #428]	; 0x1ac
     48c:	ee35 5a08 	vadd.f32	s10, s10, s16
     490:	edd2 1a7d 	vldr	s3, [r2, #500]	; 0x1f4
     494:	ee75 5a80 	vadd.f32	s11, s11, s0
     498:	ed92 2a8f 	vldr	s4, [r2, #572]	; 0x23c
     49c:	ee36 6a20 	vadd.f32	s12, s12, s1
     4a0:	ee76 6a81 	vadd.f32	s13, s13, s2
     4a4:	ee37 7a21 	vadd.f32	s14, s14, s3
     4a8:	ee77 7a82 	vadd.f32	s15, s15, s4
     4ac:	d1d1      	bne.n	452 <audioInitAdditive+0x52>
}
     4ae:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
     4b2:	edc7 2a00 	vstr	s5, [r7]
     4b6:	4abd      	ldr	r2, [pc, #756]	; (7ac <audioInitAdditive+0x3ac>)
}
     4b8:	ed8c 4a00 	vstr	s8, [ip]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4bc:	ee8a aaa2 	vdiv.f32	s20, s21, s5
     4c0:	edcc 4a01 	vstr	s9, [ip, #4]
  __HAL_LOCK(hdma);
     4c4:	ed87 3a01 	vstr	s6, [r7, #4]
    __HAL_DMA_ENABLE(hdma);
     4c8:	edc7 3a02 	vstr	s7, [r7, #8]
     4cc:	ed87 5a03 	vstr	s10, [r7, #12]
}
     4d0:	edc7 5a04 	vstr	s11, [r7, #16]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
     4d4:	eeca 9a83 	vdiv.f32	s19, s21, s6
     4d8:	ed87 6a05 	vstr	s12, [r7, #20]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
     4dc:	edc7 6a06 	vstr	s13, [r7, #24]
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
     4e0:	ed87 7a07 	vstr	s14, [r7, #28]
     4e4:	edc7 7a08 	vstr	s15, [r7, #32]
     4e8:	ee8a 9aa3 	vdiv.f32	s18, s21, s7
     4ec:	eeca 8a85 	vdiv.f32	s17, s21, s10
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
     4f0:	ed82 aa00 	vstr	s20, [r2]
     4f4:	ee8a 8aa5 	vdiv.f32	s16, s21, s11
     4f8:	edc2 9a01 	vstr	s19, [r2, #4]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     4fc:	ee8a 0a86 	vdiv.f32	s0, s21, s12
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
     500:	ed82 9a02 	vstr	s18, [r2, #8]
     504:	eeca 0aa6 	vdiv.f32	s1, s21, s13
     508:	edc2 8a03 	vstr	s17, [r2, #12]
      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
     50c:	ee8a 1a87 	vdiv.f32	s2, s21, s14
     510:	ed82 8a04 	vstr	s16, [r2, #16]
     514:	eeca 1aa7 	vdiv.f32	s3, s21, s15
     518:	ed82 0a05 	vstr	s0, [r2, #20]
     51c:	ee8a 2a84 	vdiv.f32	s4, s21, s8
     520:	edc2 0a06 	vstr	s1, [r2, #24]
     524:	eeca 2aa4 	vdiv.f32	s5, s21, s9
     528:	ed82 1a07 	vstr	s2, [r2, #28]
     52c:	edc2 1a08 	vstr	s3, [r2, #32]
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     530:	4a9f      	ldr	r2, [pc, #636]	; (7b0 <audioInitAdditive+0x3b0>)
     532:	ed82 2a00 	vstr	s4, [r2]
     536:	edc2 2a01 	vstr	s5, [r2, #4]
     53a:	edd3 7a00 	vldr	s15, [r3]
     53e:	ed91 3a00 	vldr	s6, [r1]
     542:	ee67 7a8a 	vmul.f32	s15, s15, s20
     546:	edd0 3a00 	vldr	s7, [r0]
     54a:	ee22 3a03 	vmul.f32	s6, s4, s6
     54e:	ee62 3aa3 	vmul.f32	s7, s5, s7
     552:	ece3 7a01 	vstmia	r3!, {s15}
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     556:	ed93 4a11 	vldr	s8, [r3, #68]	; 0x44
     55a:	edd3 4a23 	vldr	s9, [r3, #140]	; 0x8c
     55e:	ed93 5a35 	vldr	s10, [r3, #212]	; 0xd4
     562:	ee24 4a29 	vmul.f32	s8, s8, s19
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
     566:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
        return HAL_ERROR;
     56a:	ee64 4a89 	vmul.f32	s9, s9, s18
        hdma->ErrorCode = HAL_DMA_ERROR_TE;
     56e:	ed93 6a59 	vldr	s12, [r3, #356]	; 0x164
        __HAL_UNLOCK(hdma);
     572:	ee25 5a28 	vmul.f32	s10, s10, s17
        hdma->State = HAL_DMA_STATE_READY;
     576:	edd3 6a6b 	vldr	s13, [r3, #428]	; 0x1ac
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
     57a:	ee65 5a88 	vmul.f32	s11, s11, s16
     57e:	ed93 7a7d 	vldr	s14, [r3, #500]	; 0x1f4
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
     582:	ee26 6a00 	vmul.f32	s12, s12, s0
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
     586:	edd3 7a8f 	vldr	s15, [r3, #572]	; 0x23c
     58a:	ee66 6aa0 	vmul.f32	s13, s13, s1
     58e:	ee27 7a01 	vmul.f32	s14, s14, s2
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
     592:	eca1 3a01 	vstmia	r1!, {s6}
     596:	ee67 7aa1 	vmul.f32	s15, s15, s3
     59a:	428d      	cmp	r5, r1
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     59c:	ece0 3a01 	vstmia	r0!, {s7}
     5a0:	ed83 4a11 	vstr	s8, [r3, #68]	; 0x44
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
     5a4:	edc3 4a23 	vstr	s9, [r3, #140]	; 0x8c
     5a8:	ed83 5a35 	vstr	s10, [r3, #212]	; 0xd4
     5ac:	edc3 5a47 	vstr	s11, [r3, #284]	; 0x11c
     5b0:	ed83 6a59 	vstr	s12, [r3, #356]	; 0x164
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
     5b4:	edc3 6a6b 	vstr	s13, [r3, #428]	; 0x1ac
     5b8:	ed83 7a7d 	vstr	s14, [r3, #500]	; 0x1f4
     5bc:	edc3 7a8f 	vstr	s15, [r3, #572]	; 0x23c
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c0:	d1bb      	bne.n	53a <audioInitAdditive+0x13a>
  return status;
     5c2:	4b7c      	ldr	r3, [pc, #496]	; (7b4 <audioInitAdditive+0x3b4>)
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     5c8:	4c7b      	ldr	r4, [pc, #492]	; (7b8 <audioInitAdditive+0x3b8>)
     5ca:	ed93 8a01 	vldr	s16, [r3, #4]

static inline void sub_collector_save(_sub_collector* collector, _auto_correlation_info info)
{
    collector->_fundamental = info;
    collector->_fundamental._harmonic = 1;
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     5ce:	ed93 0a04 	vldr	s0, [r3, #16]
     5d2:	f104 083c 	add.w	r8, r4, #60	; 0x3c
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
     5d6:	edd3 0a07 	vldr	s1, [r3, #28]
     5da:	edd3 9a00 	vldr	s19, [r3]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     5de:	ed93 6a02 	vldr	s12, [r3, #8]
     5e2:	ed93 9a03 	vldr	s18, [r3, #12]
	pb->buf[i++] = (BYTE)c;
     5e6:	ee78 4a69 	vsub.f32	s9, s16, s19
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
	pb->nchr++;
     5ea:	edd3 6a05 	vldr	s13, [r3, #20]
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
     5ee:	ee36 6a48 	vsub.f32	s12, s12, s16
	pb->nchr++;
     5f2:	edd3 8a06 	vldr	s17, [r3, #24]
				while (j++ < w) putc_bfd(&pb, ' ');
     5f6:	ee30 5a49 	vsub.f32	s10, s0, s18
     5fa:	ed93 7a08 	vldr	s14, [r3, #32]
     5fe:	ee76 6ac0 	vsub.f32	s13, s13, s0
     602:	ee70 5ae8 	vsub.f32	s11, s1, s17
     606:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 800 <audioInitAdditive+0x400>
     60a:	ee37 7a60 	vsub.f32	s14, s14, s1
     60e:	4f6b      	ldr	r7, [pc, #428]	; (7bc <audioInitAdditive+0x3bc>)
			}
			while (*p) putc_bfd(&pb, *p++);
			while (j++ < w) putc_bfd(&pb, ' ');
     610:	eec7 daa4 	vdiv.f32	s27, s15, s9
			while (*p) putc_bfd(&pb, *p++);
     614:	4e6a      	ldr	r6, [pc, #424]	; (7c0 <audioInitAdditive+0x3c0>)
     616:	eddf aa6b 	vldr	s21, [pc, #428]	; 7c4 <audioInitAdditive+0x3c4>
     61a:	ed9f aa6b 	vldr	s20, [pc, #428]	; 7c8 <audioInitAdditive+0x3c8>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     61e:	4b6b      	ldr	r3, [pc, #428]	; (7cc <audioInitAdditive+0x3cc>)
     620:	486b      	ldr	r0, [pc, #428]	; (7d0 <audioInitAdditive+0x3d0>)
     622:	ee87 da86 	vdiv.f32	s26, s15, s12
		switch (d) {				/* Type is... */
     626:	496b      	ldr	r1, [pc, #428]	; (7d4 <audioInitAdditive+0x3d4>)
     628:	4a6b      	ldr	r2, [pc, #428]	; (7d8 <audioInitAdditive+0x3d8>)
     62a:	4d6c      	ldr	r5, [pc, #432]	; (7dc <audioInitAdditive+0x3dc>)
     62c:	eec7 ca85 	vdiv.f32	s25, s15, s10
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     630:	ee87 caa6 	vdiv.f32	s24, s15, s13
     634:	eec7 baa5 	vdiv.f32	s23, s15, s11
     638:	ee87 ba87 	vdiv.f32	s22, s15, s14
	if (i < 0) return;
     63c:	edd3 4a12 	vldr	s9, [r3, #72]	; 0x48
	pb->buf[i++] = (BYTE)c;
     640:	3304      	adds	r3, #4
     642:	ed53 2a01 	vldr	s5, [r3, #-4]
     646:	ecb5 2a01 	vldmia	r5!, {s4}
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     64a:	ecb4 6a01 	vldmia	r4!, {s12}
	pb->buf[i++] = (BYTE)c;
     64e:	ee87 4aa4 	vdiv.f32	s8, s15, s9
	pb->nchr++;
     652:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
	pb->idx = i;
     656:	ed93 5a47 	vldr	s10, [r3, #284]	; 0x11c
	pb->nchr++;
     65a:	45a0      	cmp	r8, r4
     65c:	edd3 3a35 	vldr	s7, [r3, #212]	; 0xd4
     660:	ed93 7a59 	vldr	s14, [r3, #356]	; 0x164
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     664:	edd3 1a7d 	vldr	s3, [r3, #500]	; 0x1f4
     668:	eec7 ea82 	vdiv.f32	s29, s15, s4
     66c:	edd3 5a6b 	vldr	s11, [r3, #428]	; 0x1ac
		i = (bw == (UINT)i) ? 0 : -1;
     670:	ed93 3a8f 	vldr	s6, [r3, #572]	; 0x23c
     674:	ee87 2aa2 	vdiv.f32	s4, s15, s5
     678:	eec7 4a85 	vdiv.f32	s9, s15, s10
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
     67c:	eec7 faa3 	vdiv.f32	s31, s15, s7
     680:	ee87 5aa1 	vdiv.f32	s10, s15, s3
	if (i < 0) return;
     684:	eec7 3aa5 	vdiv.f32	s7, s15, s11
     688:	eec7 5a86 	vdiv.f32	s11, s15, s12
	pb->buf[i++] = (BYTE)c;
     68c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
     690:	eec7 6a87 	vdiv.f32	s13, s15, s14
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     694:	ee87 7a83 	vdiv.f32	s14, s15, s6
	pb->buf[i++] = (BYTE)c;
     698:	ee74 1a42 	vsub.f32	s3, s8, s4
	pb->nchr++;
     69c:	ee35 3a63 	vsub.f32	s6, s10, s7
	pb->idx = i;
     6a0:	ee74 2aef 	vsub.f32	s5, s9, s31
	pb->nchr++;
     6a4:	ee61 1aad 	vmul.f32	s3, s3, s27
	return EOF;
     6a8:	ee75 5aee 	vsub.f32	s11, s11, s29
	}

	va_end(arp);

	return putc_flush(&pb);
}
     6ac:	ee36 6a44 	vsub.f32	s12, s12, s8
     6b0:	ee29 1aa1 	vmul.f32	s2, s19, s3
     6b4:	ece0 1a01 	vstmia	r0!, {s3}
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     6b8:	ee76 6ae4 	vsub.f32	s13, s13, s9
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
     6bc:	ee65 5aaa 	vmul.f32	s11, s11, s21
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6c0:	ee26 6a0d 	vmul.f32	s12, s12, s26
     6c4:	eca1 1a01 	vstmia	r1!, {s2}
     6c8:	ee32 2a41 	vsub.f32	s4, s4, s2
		i = (bw == (UINT)i) ? 0 : -1;
     6cc:	ee37 7a45 	vsub.f32	s14, s14, s10
     6d0:	ecec 5a01 	vstmia	ip!, {s11}
     6d4:	ee62 2aac 	vmul.f32	s5, s5, s25
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6d8:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
     6dc:	ee66 6a8c 	vmul.f32	s13, s13, s24
     6e0:	eca2 2a01 	vstmia	r2!, {s4}
		i = (bw == (UINT)i) ? 0 : -1;
     6e4:	ee27 7a0b 	vmul.f32	s14, s14, s22
     6e8:	ee23 3a2b 	vmul.f32	s6, s6, s23
     6ec:	edc0 2a1d 	vstr	s5, [r0, #116]	; 0x74
				while (j++ < w) putc_bfd(&pb, ' ');
     6f0:	ee25 fa8a 	vmul.f32	s30, s11, s20
     6f4:	edc0 6a2c 	vstr	s13, [r0, #176]	; 0xb0
     6f8:	ee28 ea06 	vmul.f32	s28, s16, s12
     6fc:	ed80 7a4a 	vstr	s14, [r0, #296]	; 0x128
			  for (int k = 0; k < 2; k++)
			  {
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;

				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     700:	ee29 1a22 	vmul.f32	s2, s18, s5
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     704:	ed80 3a3b 	vstr	s6, [r0, #236]	; 0xec
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     708:	ee60 1a26 	vmul.f32	s3, s0, s13
		  decayAf1[i] = decayAfParts[i] * 123.0f;
     70c:	eca7 fa01 	vstmia	r7!, {s30}
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     710:	ee28 2a83 	vmul.f32	s4, s17, s6
     714:	ed81 ea0e 	vstr	s28, [r1, #56]	; 0x38
     718:	ee20 6a87 	vmul.f32	s12, s1, s14
     71c:	ed81 1a1d 	vstr	s2, [r1, #116]	; 0x74
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
     720:	ee7e eacf 	vsub.f32	s29, s29, s30
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     724:	edc1 1a2c 	vstr	s3, [r1, #176]	; 0xb0

				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     728:	ee34 4a4e 	vsub.f32	s8, s8, s28
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     72c:	ed81 2a3b 	vstr	s4, [r1, #236]	; 0xec
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     730:	ee7f 5ac1 	vsub.f32	s11, s31, s2
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     734:	ed81 6a4a 	vstr	s12, [r1, #296]	; 0x128
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     738:	ee74 4ae1 	vsub.f32	s9, s9, s3
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
     73c:	ece6 ea01 	vstmia	r6!, {s29}
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     740:	ee73 3ac2 	vsub.f32	s7, s7, s4
     744:	ed82 4a0e 	vstr	s8, [r2, #56]	; 0x38
     748:	ee35 5a46 	vsub.f32	s10, s10, s12
     74c:	edc2 5a1d 	vstr	s11, [r2, #116]	; 0x74
     750:	edc2 4a2c 	vstr	s9, [r2, #176]	; 0xb0
     754:	edc2 3a3b 	vstr	s7, [r2, #236]	; 0xec
     758:	ed82 5a4a 	vstr	s10, [r2, #296]	; 0x128
	for (int i = 0; i < NUM_OVERTONES; i++)
     75c:	f47f af6e 	bne.w	63c <audioInitAdditive+0x23c>
     760:	4b1f      	ldr	r3, [pc, #124]	; (7e0 <audioInitAdditive+0x3e0>)
     762:	f04f 0b00 	mov.w	fp, #0
     766:	4f1f      	ldr	r7, [pc, #124]	; (7e4 <audioInitAdditive+0x3e4>)
     768:	9300      	str	r3, [sp, #0]
     76a:	4b1f      	ldr	r3, [pc, #124]	; (7e8 <audioInitAdditive+0x3e8>)
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     76c:	eddf 9a1f 	vldr	s19, [pc, #124]	; 7ec <audioInitAdditive+0x3ec>
     770:	9301      	str	r3, [sp, #4]
     772:	4b1a      	ldr	r3, [pc, #104]	; (7dc <audioInitAdditive+0x3dc>)
			tCycle_init(&additive[i][j], &leaf);
     774:	f8df a08c 	ldr.w	sl, [pc, #140]	; 804 <audioInitAdditive+0x404>
     778:	f103 093c 	add.w	r9, r3, #60	; 0x3c
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     77c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 808 <audioInitAdditive+0x408>
     780:	ed9f 9a1b 	vldr	s18, [pc, #108]	; 7f0 <audioInitAdditive+0x3f0>
     784:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 7f4 <audioInitAdditive+0x3f4>
			tExpSmooth_init(&tensionAdd[i], 0.0f, 0.001f, &leaf);
     788:	eddf 8a1b 	vldr	s17, [pc, #108]	; 7f8 <audioInitAdditive+0x3f8>
     78c:	9e01      	ldr	r6, [sp, #4]
     78e:	4d13      	ldr	r5, [pc, #76]	; (7dc <audioInitAdditive+0x3dc>)
     790:	9c00      	ldr	r4, [sp, #0]
     792:	e03b      	b.n	80c <audioInitAdditive+0x40c>
     794:	20001160 	.word	0x20001160
     798:	200000c0 	.word	0x200000c0
     79c:	200010d4 	.word	0x200010d4
     7a0:	3d888889 	.word	0x3d888889
     7a4:	20000108 	.word	0x20000108
     7a8:	200003fc 	.word	0x200003fc
     7ac:	200010a0 	.word	0x200010a0
     7b0:	20001098 	.word	0x20001098
     7b4:	200003d8 	.word	0x200003d8
     7b8:	20000078 	.word	0x20000078
     7bc:	20000f6c 	.word	0x20000f6c
     7c0:	20000fe4 	.word	0x20000fe4
     7c4:	3b84a9fa 	.word	0x3b84a9fa
     7c8:	42f60000 	.word	0x42f60000
     7cc:	20000150 	.word	0x20000150
     7d0:	20000c9c 	.word	0x20000c9c
     7d4:	20000b34 	.word	0x20000b34
     7d8:	20000e04 	.word	0x20000e04
     7dc:	20000030 	.word	0x20000030
     7e0:	20000a3c 	.word	0x20000a3c
     7e4:	20001150 	.word	0x20001150
     7e8:	20000ab4 	.word	0x20000ab4
     7ec:	447a0000 	.word	0x447a0000
     7f0:	43160000 	.word	0x43160000
     7f4:	00000000 	.word	0x00000000
     7f8:	3a83126f 	.word	0x3a83126f
     7fc:	20001158 	.word	0x20001158
     800:	20000fa8 	.word	0x20000fa8
     804:	2000528c 	.word	0x2000528c
     808:	200011b0 	.word	0x200011b0
			tCycle_init(&additive[i][j], &leaf);
     80c:	4620      	mov	r0, r4
     80e:	4651      	mov	r1, sl
     810:	f00b fbb2 	bl	bf78 <__tCycle_init_veneer>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     814:	ecf5 0a01 	vldmia	r5!, {s1}
     818:	eef0 1a49 	vmov.f32	s3, s18
     81c:	4653      	mov	r3, sl
     81e:	eeb0 1a48 	vmov.f32	s2, s16
     822:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     826:	4630      	mov	r0, r6
     828:	ee60 0aa9 	vmul.f32	s1, s1, s19
     82c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
     830:	4641      	mov	r1, r8
     832:	f00b fab9 	bl	bda8 <__tADSRT_init_veneer>
			tExpSmooth_init(&tensionAdd[i], 0.0f, 0.001f, &leaf);
     836:	eef0 0a68 	vmov.f32	s1, s17
     83a:	eeb0 0a48 	vmov.f32	s0, s16
     83e:	4651      	mov	r1, sl
     840:	4638      	mov	r0, r7
		for (int j = 0; j < NUM_OVERTONES; j++)
     842:	3404      	adds	r4, #4
			tExpSmooth_init(&tensionAdd[i], 0.0f, 0.001f, &leaf);
     844:	f00b fcc8 	bl	c1d8 <__tExpSmooth_init_veneer>
			tExpSmooth_setDest(&tensionAdd[i], 0.0f);
     848:	eeb0 0a48 	vmov.f32	s0, s16
     84c:	4638      	mov	r0, r7
		for (int j = 0; j < NUM_OVERTONES; j++)
     84e:	3604      	adds	r6, #4
			tExpSmooth_setDest(&tensionAdd[i], 0.0f);
     850:	f00b fc0a 	bl	c068 <__tExpSmooth_setDest_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
     854:	45a9      	cmp	r9, r5
     856:	d1d9      	bne.n	80c <audioInitAdditive+0x40c>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
     858:	9b00      	ldr	r3, [sp, #0]
     85a:	f10b 0b0f 	add.w	fp, fp, #15
     85e:	3704      	adds	r7, #4
     860:	333c      	adds	r3, #60	; 0x3c
     862:	f1bb 0f1e 	cmp.w	fp, #30
     866:	9300      	str	r3, [sp, #0]
     868:	9b01      	ldr	r3, [sp, #4]
     86a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
     86e:	9301      	str	r3, [sp, #4]
     870:	d18c      	bne.n	78c <audioInitAdditive+0x38c>
		}
		//tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
	}
}
     872:	b003      	add	sp, #12
     874:	ecbd 8b10 	vpop	{d8-d15}
     878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     87c:	f3af 8000 	nop.w

00000880 <audioFreeAdditive>:


void __ATTR_ITCMRAM audioFreeAdditive()
{

}
     880:	4770      	bx	lr
     882:	bf00      	nop
     884:	f3af 8000 	nop.w
     888:	f3af 8000 	nop.w
     88c:	f3af 8000 	nop.w
     890:	f3af 8000 	nop.w
     894:	f3af 8000 	nop.w
     898:	f3af 8000 	nop.w
     89c:	f3af 8000 	nop.w

000008a0 <audioSwitchToAdditive>:

void __ATTR_ITCMRAM audioSwitchToAdditive()
{
     8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tVZFilter_setFrequencyAndResonance(&noiseFilt,1760.0f, 2.5f);
     8a4:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
     8a8:	ed9f 0a27 	vldr	s0, [pc, #156]	; 948 <audioSwitchToAdditive+0xa8>
     8ac:	4827      	ldr	r0, [pc, #156]	; (94c <audioSwitchToAdditive+0xac>)
	tVZFilter_setFrequencyAndResonance(&noiseFilt2,61.0f, 2.5f);
	for (int i = 0; i < 12; i++)
     8ae:	2500      	movs	r5, #0
     8b0:	4c27      	ldr	r4, [pc, #156]	; (950 <audioSwitchToAdditive+0xb0>)
		}
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}
		knobFrozen[i] = 1;
     8b2:	f04f 0901 	mov.w	r9, #1
     8b6:	4f27      	ldr	r7, [pc, #156]	; (954 <audioSwitchToAdditive+0xb4>)
     8b8:	4e27      	ldr	r6, [pc, #156]	; (958 <audioSwitchToAdditive+0xb8>)
     8ba:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 974 <audioSwitchToAdditive+0xd4>
     8be:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 978 <audioSwitchToAdditive+0xd8>
{
     8c2:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
     8c6:	ed9f 8a25 	vldr	s16, [pc, #148]	; 95c <audioSwitchToAdditive+0xbc>
	tVZFilter_setFrequencyAndResonance(&noiseFilt,1760.0f, 2.5f);
     8ca:	f00b faf1 	bl	beb0 <__tVZFilter_setFrequencyAndResonance_veneer>
	tVZFilter_setFrequencyAndResonance(&noiseFilt2,61.0f, 2.5f);
     8ce:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
     8d2:	ed9f 0a23 	vldr	s0, [pc, #140]	; 960 <audioSwitchToAdditive+0xc0>
     8d6:	4823      	ldr	r0, [pc, #140]	; (964 <audioSwitchToAdditive+0xc4>)
     8d8:	f00b faea 	bl	beb0 <__tVZFilter_setFrequencyAndResonance_veneer>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
     8dc:	4620      	mov	r0, r4
     8de:	eeb0 0a48 	vmov.f32	s0, s16
     8e2:	f00b fa6d 	bl	bdc0 <__tExpSmooth_setFactor_veneer>
		if (voice == 61)
     8e6:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
     8ea:	4620      	mov	r0, r4
		if (voice == 61)
     8ec:	2b3d      	cmp	r3, #61	; 0x3d
     8ee:	d01f      	beq.n	930 <audioSwitchToAdditive+0x90>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
     8f0:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 12; i++)
     8f4:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
     8f6:	f00b fb67 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
     8fa:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 12; i++)
     8fe:	3501      	adds	r5, #1
     900:	3704      	adds	r7, #4
     902:	2d0c      	cmp	r5, #12
     904:	d1ea      	bne.n	8dc <audioSwitchToAdditive+0x3c>
	}
	for (int i = 0; i < numStringsThisBoard; i++)
     906:	4e18      	ldr	r6, [pc, #96]	; (968 <audioSwitchToAdditive+0xc8>)
     908:	7833      	ldrb	r3, [r6, #0]
     90a:	b16b      	cbz	r3, 928 <audioSwitchToAdditive+0x88>
     90c:	4d17      	ldr	r5, [pc, #92]	; (96c <audioSwitchToAdditive+0xcc>)
     90e:	2400      	movs	r4, #0
	{
		tADSRT_setSustain(&fenvelopes[i], 0.0f);
     910:	ed9f 8a17 	vldr	s16, [pc, #92]	; 970 <audioSwitchToAdditive+0xd0>
     914:	4628      	mov	r0, r5
     916:	eeb0 0a48 	vmov.f32	s0, s16
     91a:	f00b fa55 	bl	bdc8 <__tADSRT_setSustain_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
     91e:	3401      	adds	r4, #1
     920:	7833      	ldrb	r3, [r6, #0]
     922:	3504      	adds	r5, #4
     924:	42a3      	cmp	r3, r4
     926:	dcf5      	bgt.n	914 <audioSwitchToAdditive+0x74>
	}

}
     928:	ecbd 8b02 	vpop	{d8}
     92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[i], additiveDefaults[i]);
     930:	ecb7 0a01 	vldmia	r7!, {s0}
	for (int i = 0; i < 12; i++)
     934:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], additiveDefaults[i]);
     936:	f00b fb47 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
     93a:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 12; i++)
     93e:	3501      	adds	r5, #1
     940:	3604      	adds	r6, #4
     942:	2d0c      	cmp	r5, #12
     944:	d1ca      	bne.n	8dc <audioSwitchToAdditive+0x3c>
     946:	e7de      	b.n	906 <audioSwitchToAdditive+0x66>
     948:	44dc0000 	.word	0x44dc0000
     94c:	200052ec 	.word	0x200052ec
     950:	20005238 	.word	0x20005238
     954:	20000000 	.word	0x20000000
     958:	20018678 	.word	0x20018678
     95c:	3a83126f 	.word	0x3a83126f
     960:	42740000 	.word	0x42740000
     964:	200052f0 	.word	0x200052f0
     968:	20000694 	.word	0x20000694
     96c:	200051bc 	.word	0x200051bc
     970:	00000000 	.word	0x00000000
     974:	20014250 	.word	0x20014250
     978:	200051d4 	.word	0x200051d4
     97c:	f3af 8000 	nop.w

00000980 <audioTickAdditive>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickAdditive(void)
{
     980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     984:	4cac      	ldr	r4, [pc, #688]	; (c38 <audioTickAdditive+0x2b8>)
     986:	4dad      	ldr	r5, [pc, #692]	; (c3c <audioTickAdditive+0x2bc>)
     988:	f104 0630 	add.w	r6, r4, #48	; 0x30
     98c:	ed2d 8b10 	vpush	{d8-d15}
     990:	b087      	sub	sp, #28
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
     992:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
     994:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
     996:	f00b fa7b 	bl	be90 <__tExpSmooth_tick_veneer>
     99a:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
     99e:	42b4      	cmp	r4, r6
     9a0:	d1f7      	bne.n	992 <audioTickAdditive+0x12>
	}


	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
     9a2:	48a7      	ldr	r0, [pc, #668]	; (c40 <audioTickAdditive+0x2c0>)
     9a4:	f00b f948 	bl	bc38 <__tNoise_tick_veneer>
     9a8:	48a6      	ldr	r0, [pc, #664]	; (c44 <audioTickAdditive+0x2c4>)
     9aa:	f00b fb45 	bl	c038 <__tVZFilter_tickEfficient_veneer>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     9ae:	48a4      	ldr	r0, [pc, #656]	; (c40 <audioTickAdditive+0x2c0>)
	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
     9b0:	eef0 da40 	vmov.f32	s27, s0
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     9b4:	f00b f940 	bl	bc38 <__tNoise_tick_veneer>
     9b8:	48a3      	ldr	r0, [pc, #652]	; (c48 <audioTickAdditive+0x2c8>)
     9ba:	f00b fb3d 	bl	c038 <__tVZFilter_tickEfficient_veneer>
	filtNoise *= 2.0f;
	float stretch = knobScaled[0];
     9be:	4b9e      	ldr	r3, [pc, #632]	; (c38 <audioTickAdditive+0x2b8>)
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
	float oneMinusPickup = (1.0f - knobScaled[4]);
	float pickup = knobScaled[4];
	float freqWeightKnob = knobScaled[1];
	float oneMinusFreqWeightKnob = 1.0f - knobScaled[1];
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     9c0:	48a2      	ldr	r0, [pc, #648]	; (c4c <audioTickAdditive+0x2cc>)
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     9c2:	eef0 8a40 	vmov.f32	s17, s0
	float stretch = knobScaled[0];
     9c6:	ed93 9a00 	vldr	s18, [r3]
	float oneMinusPickup = (1.0f - knobScaled[4]);
     9ca:	edd3 aa04 	vldr	s21, [r3, #16]
	float freqWeightKnob = knobScaled[1];
     9ce:	ed93 aa01 	vldr	s20, [r3, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     9d2:	f00b fa5d 	bl	be90 <__tExpSmooth_tick_veneer>
	//float Env2 = 0.0f;
	for (int i = 0; i < numStringsThisBoard; i++)
     9d6:	4b9e      	ldr	r3, [pc, #632]	; (c50 <audioTickAdditive+0x2d0>)
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     9d8:	eeb0 da40 	vmov.f32	s26, s0
	for (int i = 0; i < numStringsThisBoard; i++)
     9dc:	781b      	ldrb	r3, [r3, #0]
     9de:	2b00      	cmp	r3, #0
     9e0:	f000 810e 	beq.w	c00 <audioTickAdditive+0x280>
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
     9e4:	ee29 9a09 	vmul.f32	s18, s18, s18
     9e8:	4b9a      	ldr	r3, [pc, #616]	; (c54 <audioTickAdditive+0x2d4>)
	float oneMinusPickup = (1.0f - knobScaled[4]);
     9ea:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
     9ee:	eddf 7a9a 	vldr	s15, [pc, #616]	; c58 <audioTickAdditive+0x2d8>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     9f2:	ee7d daa8 	vadd.f32	s27, s27, s17
     9f6:	9303      	str	r3, [sp, #12]
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
     9f8:	ee29 9a09 	vmul.f32	s18, s18, s18
     9fc:	4b97      	ldr	r3, [pc, #604]	; (c5c <audioTickAdditive+0x2dc>)
	float tempSamp = 0.0f;
     9fe:	eddf 8a98 	vldr	s17, [pc, #608]	; c60 <audioTickAdditive+0x2e0>
	float oneMinusPickup = (1.0f - knobScaled[4]);
     a02:	ee78 ca6a 	vsub.f32	s25, s16, s21
     a06:	9304      	str	r3, [sp, #16]
	filtNoise *= 2.0f;
     a08:	ee3d 7aad 	vadd.f32	s14, s27, s27
     a0c:	4b95      	ldr	r3, [pc, #596]	; (c64 <audioTickAdditive+0x2e4>)
	float oneMinusFreqWeightKnob = 1.0f - knobScaled[1];
     a0e:	ee38 ca4a 	vsub.f32	s24, s16, s20
	stretch = (stretch*stretch*stretch*stretch) * 0.3f;
     a12:	ee29 9a27 	vmul.f32	s18, s18, s15
	{
		float thisTension = tExpSmooth_tick(&tensionAdd[i]);
		thisTension = knobScaled[5] * thisTension;
		float tensionSpeed = (1.0f - knobScaled[6]);
		tensionSpeed = tensionSpeed*tensionSpeed*tensionSpeed*tensionSpeed;
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);
     a16:	ed9f ea94 	vldr	s28, [pc, #592]	; c68 <audioTickAdditive+0x2e8>
		invGainSum[i] = 1.0f;
		if(gainSum[i] > 0.0001f)
		{
			invGainSum[i] = 1.0f / gainSum[i];
		}
		gainSum[i] = 0.0f;
     a1a:	eef0 9a68 	vmov.f32	s19, s17
     a1e:	9302      	str	r3, [sp, #8]
		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
			//float tempFreq = 0.0f;
			float tempGain = ((tempFreq - 15000.0f) * 0.00025f);
     a20:	eddf ba92 	vldr	s23, [pc, #584]	; c6c <audioTickAdditive+0x2ec>
	float oneMinusFreqWeightKnob = 1.0f - knobScaled[1];
     a24:	2300      	movs	r3, #0
			//float tempGain = LEAF_map(tempFreq, 15000.0f, 19000.0f, 0.0, 1.0f);
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     a26:	ed9f ba92 	vldr	s22, [pc, #584]	; c70 <audioTickAdditive+0x2f0>
     a2a:	f8df a280 	ldr.w	sl, [pc, #640]	; cac <audioTickAdditive+0x32c>
     a2e:	f8df b280 	ldr.w	fp, [pc, #640]	; cb0 <audioTickAdditive+0x330>
     a32:	4f90      	ldr	r7, [pc, #576]	; (c74 <audioTickAdditive+0x2f4>)
	filtNoise *= 2.0f;
     a34:	ed8d 7a05 	vstr	s14, [sp, #20]
	float oneMinusFreqWeightKnob = 1.0f - knobScaled[1];
     a38:	9300      	str	r3, [sp, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
     a3a:	9301      	str	r3, [sp, #4]
		float thisTension = tExpSmooth_tick(&tensionAdd[i]);
     a3c:	9d03      	ldr	r5, [sp, #12]
		float tensionSpeed = (1.0f - knobScaled[6]);
     a3e:	4c7e      	ldr	r4, [pc, #504]	; (c38 <audioTickAdditive+0x2b8>)
		float thisTension = tExpSmooth_tick(&tensionAdd[i]);
     a40:	4628      	mov	r0, r5
     a42:	f00b fa25 	bl	be90 <__tExpSmooth_tick_veneer>
		float tensionSpeed = (1.0f - knobScaled[6]);
     a46:	edd4 7a06 	vldr	s15, [r4, #24]
		float thisTension = tExpSmooth_tick(&tensionAdd[i]);
     a4a:	eef0 fa40 	vmov.f32	s31, s0
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);
     a4e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; c78 <audioTickAdditive+0x2f8>
		float tensionSpeed = (1.0f - knobScaled[6]);
     a52:	ee78 7a67 	vsub.f32	s15, s16, s15
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);
     a56:	4628      	mov	r0, r5
     a58:	eeb0 0a4e 	vmov.f32	s0, s28
		thisTension = knobScaled[5] * thisTension;
     a5c:	edd4 ea05 	vldr	s29, [r4, #20]
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);
     a60:	ee67 7aa7 	vmul.f32	s15, s15, s15
     a64:	ee67 7aa7 	vmul.f32	s15, s15, s15
     a68:	eea7 0a87 	vfma.f32	s0, s15, s14
     a6c:	f00b f9a8 	bl	bdc0 <__tExpSmooth_setFactor_veneer>
		float theMIDI = (stringMIDIPitches[i]+ stringOctave[i]) + thisTension;
     a70:	9b04      	ldr	r3, [sp, #16]
     a72:	9a01      	ldr	r2, [sp, #4]
     a74:	ecb3 fa01 	vldmia	r3!, {s30}
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     a78:	9802      	ldr	r0, [sp, #8]
		float theMIDI = (stringMIDIPitches[i]+ stringOctave[i]) + thisTension;
     a7a:	9304      	str	r3, [sp, #16]
     a7c:	4b7f      	ldr	r3, [pc, #508]	; (c7c <audioTickAdditive+0x2fc>)
     a7e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     a82:	edd2 7a00 	vldr	s15, [r2]
     a86:	eeee 7aaf 	vfma.f32	s15, s29, s31
     a8a:	ee3f fa27 	vadd.f32	s30, s30, s15
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     a8e:	f00b f8e3 	bl	bc58 <__tADSRT_tick_veneer>
		tempSamp += filtNoise * noiseEnv *  knobScaled[2];
     a92:	edd4 7a02 	vldr	s15, [r4, #8]
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     a96:	eeb0 7a40 	vmov.f32	s14, s0
		tempSamp += filtNoise * noiseEnv *  knobScaled[2];
     a9a:	eddd 6a05 	vldr	s13, [sp, #20]
		stringFrequencies[i] = mtofTableLookup(theMIDI);
     a9e:	eeb0 0a4f 	vmov.f32	s0, s30
		tempSamp += filtNoise * noiseEnv *  knobScaled[2];
     aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
     aa6:	eee7 8a27 	vfma.f32	s17, s14, s15
		stringFrequencies[i] = mtofTableLookup(theMIDI);
     aaa:	f00b fa45 	bl	bf38 <__mtofTableLookup_veneer>
		if(gainSum[i] > 0.0001f)
     aae:	ecf7 7a01 	vldmia	r7!, {s15}
		stringFrequencies[i] = mtofTableLookup(theMIDI);
     ab2:	ecaa 0a01 	vstmia	sl!, {s0}
		if(gainSum[i] > 0.0001f)
     ab6:	eef4 7ace 	vcmpe.f32	s15, s28
		invGainSum[i] = 1.0f;
     aba:	ecab 8a01 	vstmia	fp!, {s16}
		if(gainSum[i] > 0.0001f)
     abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     ac2:	dd03      	ble.n	acc <audioTickAdditive+0x14c>
			invGainSum[i] = 1.0f / gainSum[i];
     ac4:	ee88 7a27 	vdiv.f32	s14, s16, s15
     ac8:	ed0b 7a01 	vstr	s14, [fp, #-4]
		gainSum[i] = 0.0f;
     acc:	9b00      	ldr	r3, [sp, #0]
		for (int j = 0; j < NUM_OVERTONES; j++)
     ace:	2400      	movs	r4, #0
     ad0:	4a6b      	ldr	r2, [pc, #428]	; (c80 <audioTickAdditive+0x300>)
		gainSum[i] = 0.0f;
     ad2:	ed47 9a01 	vstr	s19, [r7, #-4]
		for (int j = 0; j < NUM_OVERTONES; j++)
     ad6:	18d6      	adds	r6, r2, r3
     ad8:	4a6a      	ldr	r2, [pc, #424]	; (c84 <audioTickAdditive+0x304>)
     ada:	18d5      	adds	r5, r2, r3
     adc:	4a6a      	ldr	r2, [pc, #424]	; (c88 <audioTickAdditive+0x308>)
     ade:	eb02 0903 	add.w	r9, r2, r3
     ae2:	4a6a      	ldr	r2, [pc, #424]	; (c8c <audioTickAdditive+0x30c>)
     ae4:	eb02 0803 	add.w	r8, r2, r3
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     ae8:	ee0f 4a10 	vmov	s30, r4
     aec:	4630      	mov	r0, r6
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     aee:	3401      	adds	r4, #1
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     af0:	f00b f8b2 	bl	bc58 <__tADSRT_tick_veneer>
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     af4:	eeb8 facf 	vcvt.f32.s32	s30, s30
     af8:	ed5a 6a01 	vldr	s13, [sl, #-4]
     afc:	eeb0 7a48 	vmov.f32	s14, s16
     b00:	ee07 4a90 	vmov	s15, r4
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     b04:	eef0 0a48 	vmov.f32	s1, s16
		for (int j = 0; j < NUM_OVERTONES; j++)
     b08:	3604      	adds	r6, #4
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     b0a:	eef8 fae7 	vcvt.f32.s32	s31, s15
     b0e:	eeaf 7a09 	vfma.f32	s14, s30, s18
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     b12:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     b16:	ee6f faa6 	vmul.f32	s31, s31, s13
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     b1a:	eef0 da40 	vmov.f32	s27, s0
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     b1e:	eeb0 0a69 	vmov.f32	s0, s19
			tCycle_setFreq(&additive[i][j], tempFreq);
			float upRamp = (j * invNumOvertones);
			float downRamp = 1.0f - (j * invNumOvertones);
			float freqWeight = (upRamp * freqWeightKnob) + (downRamp * oneMinusFreqWeightKnob);
			gainSum[i] += freqWeight * finalGains[i][j];
			float thisWeight = oneMinusPickup + pickupWeights[i][j] * pickup;
     b22:	eef0 ea6c 	vmov.f32	s29, s25
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     b26:	ee6f fa87 	vmul.f32	s31, s31, s14
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     b2a:	ee3b 7aef 	vsub.f32	s14, s23, s31
     b2e:	eee7 0a0b 	vfma.f32	s1, s14, s22
     b32:	f00b f989 	bl	be48 <__LEAF_clip_veneer>
			tCycle_setFreq(&additive[i][j], tempFreq);
     b36:	eeb0 0a6f 	vmov.f32	s0, s31
     b3a:	4628      	mov	r0, r5
     b3c:	f00b f94c 	bl	bdd8 <__tCycle_setFreq_veneer>
			float upRamp = (j * invNumOvertones);
     b40:	4b53      	ldr	r3, [pc, #332]	; (c90 <audioTickAdditive+0x310>)
			gainSum[i] += freqWeight * finalGains[i][j];
     b42:	ed17 7a01 	vldr	s14, [r7, #-4]
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * thisWeight * freqWeight * invGainSum[i];
     b46:	4628      	mov	r0, r5
			float upRamp = (j * invNumOvertones);
     b48:	edd3 6a00 	vldr	s13, [r3]
		for (int j = 0; j < NUM_OVERTONES; j++)
     b4c:	3504      	adds	r5, #4
			gainSum[i] += freqWeight * finalGains[i][j];
     b4e:	ecb9 6a01 	vldmia	r9!, {s12}
			float upRamp = (j * invNumOvertones);
     b52:	ee2f fa26 	vmul.f32	s30, s30, s13
			float thisWeight = oneMinusPickup + pickupWeights[i][j] * pickup;
     b56:	ecf8 5a01 	vldmia	r8!, {s11}
     b5a:	eeea eaa5 	vfma.f32	s29, s21, s11
			float downRamp = 1.0f - (j * invNumOvertones);
     b5e:	ee78 fa4f 	vsub.f32	s31, s16, s30
			float freqWeight = (upRamp * freqWeightKnob) + (downRamp * oneMinusFreqWeightKnob);
     b62:	ee6f fa8c 	vmul.f32	s31, s31, s24
     b66:	eeea fa0f 	vfma.f32	s31, s20, s30
			gainSum[i] += freqWeight * finalGains[i][j];
     b6a:	eea6 7a2f 	vfma.f32	s14, s12, s31
     b6e:	ed07 7a01 	vstr	s14, [r7, #-4]
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * thisWeight * freqWeight * invGainSum[i];
     b72:	f00b f975 	bl	be60 <__tCycle_tick_veneer>
     b76:	ee20 0a2d 	vmul.f32	s0, s0, s27
     b7a:	ed5b 7a01 	vldr	s15, [fp, #-4]
		for (int j = 0; j < NUM_OVERTONES; j++)
     b7e:	2c0f      	cmp	r4, #15
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * thisWeight * freqWeight * invGainSum[i];
     b80:	ee60 7a27 	vmul.f32	s15, s0, s15
     b84:	ee67 7aae 	vmul.f32	s15, s15, s29
     b88:	eeef 8aa7 	vfma.f32	s17, s31, s15
		for (int j = 0; j < NUM_OVERTONES; j++)
     b8c:	d1ac      	bne.n	ae8 <audioTickAdditive+0x168>
	for (int i = 0; i < numStringsThisBoard; i++)
     b8e:	9a03      	ldr	r2, [sp, #12]
     b90:	9b01      	ldr	r3, [sp, #4]
     b92:	3204      	adds	r2, #4
     b94:	3301      	adds	r3, #1
     b96:	9203      	str	r2, [sp, #12]
     b98:	9a02      	ldr	r2, [sp, #8]
     b9a:	9301      	str	r3, [sp, #4]
     b9c:	3204      	adds	r2, #4
     b9e:	9202      	str	r2, [sp, #8]
     ba0:	9a00      	ldr	r2, [sp, #0]
     ba2:	323c      	adds	r2, #60	; 0x3c
     ba4:	9200      	str	r2, [sp, #0]
     ba6:	4a2a      	ldr	r2, [pc, #168]	; (c50 <audioTickAdditive+0x2d0>)
     ba8:	7812      	ldrb	r2, [r2, #0]
     baa:	429a      	cmp	r2, r3
     bac:	f73f af46 	bgt.w	a3c <audioTickAdditive+0xbc>
     bb0:	ed9f 7a38 	vldr	s14, [pc, #224]	; c94 <audioTickAdditive+0x314>
		}
	}

	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
     bb4:	ee2d 6a0d 	vmul.f32	s12, s26, s26
     bb8:	eddf 7a37 	vldr	s15, [pc, #220]	; c98 <audioTickAdditive+0x318>
     bbc:	ed9f 5a37 	vldr	s10, [pc, #220]	; c9c <audioTickAdditive+0x31c>
     bc0:	eeed 7a07 	vfma.f32	s15, s26, s14
     bc4:	eddf 5a36 	vldr	s11, [pc, #216]	; ca0 <audioTickAdditive+0x320>
     bc8:	ee6d 6a06 	vmul.f32	s13, s26, s12
     bcc:	ed9f 7a35 	vldr	s14, [pc, #212]	; ca4 <audioTickAdditive+0x324>
     bd0:	ee2d 7a07 	vmul.f32	s14, s26, s14
     bd4:	eee6 7a85 	vfma.f32	s15, s13, s10
     bd8:	eee6 7a65 	vfms.f32	s15, s12, s11
     bdc:	eee6 7ac7 	vfms.f32	s15, s13, s14


	tempSamp *= 0.5f;
	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
     be0:	4b31      	ldr	r3, [pc, #196]	; (ca8 <audioTickAdditive+0x328>)
     be2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
     be6:	ed93 0a00 	vldr	s0, [r3]
     bea:	ee20 0a07 	vmul.f32	s0, s0, s14
     bee:	ee20 0a28 	vmul.f32	s0, s0, s17
	return tempSamp;
}
     bf2:	ee20 0a27 	vmul.f32	s0, s0, s15
     bf6:	b007      	add	sp, #28
     bf8:	ecbd 8b10 	vpop	{d8-d15}
     bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c00:	ed9f 7a24 	vldr	s14, [pc, #144]	; c94 <audioTickAdditive+0x314>
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
     c04:	ee60 6a00 	vmul.f32	s13, s0, s0
     c08:	eddf 7a23 	vldr	s15, [pc, #140]	; c98 <audioTickAdditive+0x318>
     c0c:	eddf 5a23 	vldr	s11, [pc, #140]	; c9c <audioTickAdditive+0x31c>
     c10:	eee0 7a07 	vfma.f32	s15, s0, s14
     c14:	ed9f 6a22 	vldr	s12, [pc, #136]	; ca0 <audioTickAdditive+0x320>
     c18:	ee20 7a26 	vmul.f32	s14, s0, s13
     c1c:	ed9f 5a21 	vldr	s10, [pc, #132]	; ca4 <audioTickAdditive+0x324>
	float tempSamp = 0.0f;
     c20:	eddf 8a0f 	vldr	s17, [pc, #60]	; c60 <audioTickAdditive+0x2e0>
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
     c24:	ee20 da05 	vmul.f32	s26, s0, s10
     c28:	eee7 7a25 	vfma.f32	s15, s14, s11
     c2c:	eee6 7ac6 	vfms.f32	s15, s13, s12
     c30:	eee7 7a4d 	vfms.f32	s15, s14, s26
     c34:	e7d4      	b.n	be0 <audioTickAdditive+0x260>
     c36:	bf00      	nop
     c38:	200051e8 	.word	0x200051e8
     c3c:	20005238 	.word	0x20005238
     c40:	200052e4 	.word	0x200052e4
     c44:	200052ec 	.word	0x200052ec
     c48:	200052f0 	.word	0x200052f0
     c4c:	2001425c 	.word	0x2001425c
     c50:	20000694 	.word	0x20000694
     c54:	20001150 	.word	0x20001150
     c58:	3e99999a 	.word	0x3e99999a
     c5c:	20014224 	.word	0x20014224
     c60:	00000000 	.word	0x00000000
     c64:	200051bc 	.word	0x200051bc
     c68:	38d1b717 	.word	0x38d1b717
     c6c:	466a6000 	.word	0x466a6000
     c70:	3983126f 	.word	0x3983126f
     c74:	200010c4 	.word	0x200010c4
     c78:	3c23d70a 	.word	0x3c23d70a
     c7c:	2001421c 	.word	0x2001421c
     c80:	20000ab4 	.word	0x20000ab4
     c84:	20000a3c 	.word	0x20000a3c
     c88:	20001020 	.word	0x20001020
     c8c:	200010d8 	.word	0x200010d8
     c90:	200010d4 	.word	0x200010d4
     c94:	3ef1ac0b 	.word	0x3ef1ac0b
     c98:	3bdc4213 	.word	0x3bdc4213
     c9c:	40caa285 	.word	0x40caa285
     ca0:	4022be0a 	.word	0x4022be0a
     ca4:	40516313 	.word	0x40516313
     ca8:	2000068c 	.word	0x2000068c
     cac:	200141d4 	.word	0x200141d4
     cb0:	200010cc 	.word	0x200010cc
     cb4:	f3af 8000 	nop.w
     cb8:	f3af 8000 	nop.w
     cbc:	f3af 8000 	nop.w

00000cc0 <audioFrameAdditive>:
	uint32_t tempCountFrame = DWT->CYCCNT;
     cc0:	4b85      	ldr	r3, [pc, #532]	; (ed8 <audioFrameAdditive+0x218>)
{
     cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (resetStringInputs)
     cc6:	4f85      	ldr	r7, [pc, #532]	; (edc <audioFrameAdditive+0x21c>)
		for (int i = 0; i < numStringsThisBoard; i++)
     cc8:	f8df b268 	ldr.w	fp, [pc, #616]	; f34 <audioFrameAdditive+0x274>
{
     ccc:	ed2d 8b10 	vpush	{d8-d15}
	uint32_t tempCountFrame = DWT->CYCCNT;
     cd0:	685b      	ldr	r3, [r3, #4]
{
     cd2:	b091      	sub	sp, #68	; 0x44
	uint32_t tempCountFrame = DWT->CYCCNT;
     cd4:	930a      	str	r3, [sp, #40]	; 0x28
	if (resetStringInputs)
     cd6:	783b      	ldrb	r3, [r7, #0]
{
     cd8:	900b      	str	r0, [sp, #44]	; 0x2c
	if (resetStringInputs)
     cda:	2b00      	cmp	r3, #0
     cdc:	f040 80b5 	bne.w	e4a <audioFrameAdditive+0x18a>
	for (int i = 0; i < numStringsThisBoard; i++)
     ce0:	4b7f      	ldr	r3, [pc, #508]	; (ee0 <audioFrameAdditive+0x220>)
     ce2:	9307      	str	r3, [sp, #28]
		for (int i = 0; i < numStringsThisBoard; i++)
     ce4:	f89b 3000 	ldrb.w	r3, [fp]
	for (int i = 0; i < numStringsThisBoard; i++)
     ce8:	2b00      	cmp	r3, #0
     cea:	f000 80d8 	beq.w	e9e <audioFrameAdditive+0x1de>
     cee:	4c7d      	ldr	r4, [pc, #500]	; (ee4 <audioFrameAdditive+0x224>)
     cf0:	2500      	movs	r5, #0
		additivePickupPos[i] = (knobScaled[3] * 0.4f) + 0.1f;
     cf2:	ed9f 9a7d 	vldr	s18, [pc, #500]	; ee8 <audioFrameAdditive+0x228>
     cf6:	eddf 8a7d 	vldr	s17, [pc, #500]	; eec <audioFrameAdditive+0x22c>
			pickupWeights[i][j] = arm_sin_f32((j + 1) * x0);
     cfa:	ed9f 8a7d 	vldr	s16, [pc, #500]	; ef0 <audioFrameAdditive+0x230>
     cfe:	4e7d      	ldr	r6, [pc, #500]	; (ef4 <audioFrameAdditive+0x234>)
     d00:	f8df 9234 	ldr.w	r9, [pc, #564]	; f38 <audioFrameAdditive+0x278>
		additivePickupPos[i] = (knobScaled[3] * 0.4f) + 0.1f;
     d04:	eeb0 0a68 	vmov.f32	s0, s17
     d08:	edd9 7a03 	vldr	s15, [r9, #12]
     d0c:	46b0      	mov	r8, r6
		for (int j = 0; j < NUM_OVERTONES; j++)
     d0e:	2700      	movs	r7, #0
		additivePickupPos[i] = (knobScaled[3] * 0.4f) + 0.1f;
     d10:	eea7 0a89 	vfma.f32	s0, s15, s18
     d14:	eca4 0a01 	vstmia	r4!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
     d18:	e001      	b.n	d1e <audioFrameAdditive+0x5e>
			Lfloat x0 = additivePickupPos[i] * PI;
     d1a:	ed14 0a01 	vldr	s0, [r4, #-4]
			pickupWeights[i][j] = arm_sin_f32((j + 1) * x0);
     d1e:	3701      	adds	r7, #1
     d20:	ee07 7a90 	vmov	s15, r7
     d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     d28:	ee67 7a88 	vmul.f32	s15, s15, s16
     d2c:	ee27 0a80 	vmul.f32	s0, s15, s0
     d30:	f00b f8d2 	bl	bed8 <__arm_sin_f32_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
     d34:	2f0f      	cmp	r7, #15
			pickupWeights[i][j] = arm_sin_f32((j + 1) * x0);
     d36:	eca8 0a01 	vstmia	r8!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
     d3a:	d1ee      	bne.n	d1a <audioFrameAdditive+0x5a>
	for (int i = 0; i < numStringsThisBoard; i++)
     d3c:	3501      	adds	r5, #1
     d3e:	f89b 3000 	ldrb.w	r3, [fp]
     d42:	363c      	adds	r6, #60	; 0x3c
     d44:	42ab      	cmp	r3, r5
     d46:	dcdd      	bgt.n	d04 <audioFrameAdditive+0x44>
	if (newPluck)
     d48:	9a07      	ldr	r2, [sp, #28]
     d4a:	6812      	ldr	r2, [r2, #0]
     d4c:	2a00      	cmp	r2, #0
     d4e:	d04e      	beq.n	dee <audioFrameAdditive+0x12e>
		for (int i = 0; i < numStringsThisBoard; i++)
     d50:	2b00      	cmp	r3, #0
     d52:	d049      	beq.n	de8 <audioFrameAdditive+0x128>
     d54:	4a68      	ldr	r2, [pc, #416]	; (ef8 <audioFrameAdditive+0x238>)
     d56:	f04f 0800 	mov.w	r8, #0
     d5a:	f8df a1e0 	ldr.w	sl, [pc, #480]	; f3c <audioFrameAdditive+0x27c>
     d5e:	9203      	str	r2, [sp, #12]
     d60:	4a66      	ldr	r2, [pc, #408]	; (efc <audioFrameAdditive+0x23c>)
					thisDecay *= 2000.0f * knobScaled[10];
     d62:	ed9f ca67 	vldr	s24, [pc, #412]	; f00 <audioFrameAdditive+0x240>
     d66:	9208      	str	r2, [sp, #32]
     d68:	4a66      	ldr	r2, [pc, #408]	; (f04 <audioFrameAdditive+0x244>)
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     d6a:	eddf ea67 	vldr	s29, [pc, #412]	; f08 <audioFrameAdditive+0x248>
     d6e:	9206      	str	r2, [sp, #24]
     d70:	4a66      	ldr	r2, [pc, #408]	; (f0c <audioFrameAdditive+0x24c>)
     d72:	eddf fa67 	vldr	s31, [pc, #412]	; f10 <audioFrameAdditive+0x250>
     d76:	9205      	str	r2, [sp, #20]
     d78:	4a66      	ldr	r2, [pc, #408]	; (f14 <audioFrameAdditive+0x254>)
     d7a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
     d7e:	9204      	str	r2, [sp, #16]
     d80:	f8cd a008 	str.w	sl, [sp, #8]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
     d84:	9a02      	ldr	r2, [sp, #8]
     d86:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
     d8a:	b292      	uxth	r2, r2
     d8c:	b932      	cbnz	r2, d9c <audioFrameAdditive+0xdc>
     d8e:	4a62      	ldr	r2, [pc, #392]	; (f18 <audioFrameAdditive+0x258>)
     d90:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
     d94:	b292      	uxth	r2, r2
     d96:	2a00      	cmp	r2, #0
     d98:	f040 80d2 	bne.w	f40 <audioFrameAdditive+0x280>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
     d9c:	9a02      	ldr	r2, [sp, #8]
     d9e:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
     da2:	b292      	uxth	r2, r2
     da4:	b132      	cbz	r2, db4 <audioFrameAdditive+0xf4>
     da6:	4a5c      	ldr	r2, [pc, #368]	; (f18 <audioFrameAdditive+0x258>)
     da8:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
     dac:	b292      	uxth	r2, r2
     dae:	2a00      	cmp	r2, #0
     db0:	f000 8083 	beq.w	eba <audioFrameAdditive+0x1fa>
     db4:	9c08      	ldr	r4, [sp, #32]
     db6:	343c      	adds	r4, #60	; 0x3c
		for (int i = 0; i < numStringsThisBoard; i++)
     db8:	9a03      	ldr	r2, [sp, #12]
			previousStringInputs[i] = stringInputs[i];
     dba:	9902      	ldr	r1, [sp, #8]
		for (int i = 0; i < numStringsThisBoard; i++)
     dbc:	3204      	adds	r2, #4
     dbe:	9408      	str	r4, [sp, #32]
     dc0:	9203      	str	r2, [sp, #12]
     dc2:	9a06      	ldr	r2, [sp, #24]
     dc4:	323c      	adds	r2, #60	; 0x3c
     dc6:	9206      	str	r2, [sp, #24]
     dc8:	9a05      	ldr	r2, [sp, #20]
     dca:	3204      	adds	r2, #4
     dcc:	9205      	str	r2, [sp, #20]
     dce:	9a04      	ldr	r2, [sp, #16]
     dd0:	3204      	adds	r2, #4
     dd2:	9204      	str	r2, [sp, #16]
			previousStringInputs[i] = stringInputs[i];
     dd4:	4a50      	ldr	r2, [pc, #320]	; (f18 <audioFrameAdditive+0x258>)
     dd6:	f832 2018 	ldrh.w	r2, [r2, r8, lsl #1]
     dda:	b292      	uxth	r2, r2
     ddc:	f821 2018 	strh.w	r2, [r1, r8, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     de0:	f108 0801 	add.w	r8, r8, #1
     de4:	4543      	cmp	r3, r8
     de6:	dccd      	bgt.n	d84 <audioFrameAdditive+0xc4>
		newPluck = 0;
     de8:	2300      	movs	r3, #0
     dea:	9a07      	ldr	r2, [sp, #28]
     dec:	6013      	str	r3, [r2, #0]
     dee:	4c4b      	ldr	r4, [pc, #300]	; (f1c <audioFrameAdditive+0x25c>)
     df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     df2:	f504 7500 	add.w	r5, r4, #512	; 0x200
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     df6:	ed9f 8a4a 	vldr	s16, [pc, #296]	; f20 <audioFrameAdditive+0x260>
     dfa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
     dfe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     e02:	f7ff fdbd 	bl	980 <audioTickAdditive>
     e06:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     e0a:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     e0c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     e10:	42ac      	cmp	r4, r5
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     e12:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
     e16:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     e1a:	d1f2      	bne.n	e02 <audioFrameAdditive+0x142>
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     e1c:	4841      	ldr	r0, [pc, #260]	; (f24 <audioFrameAdditive+0x264>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
     e1e:	4b2e      	ldr	r3, [pc, #184]	; (ed8 <audioFrameAdditive+0x218>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     e20:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
     e24:	685b      	ldr	r3, [r3, #4]
     e26:	980a      	ldr	r0, [sp, #40]	; 0x28
     e28:	493f      	ldr	r1, [pc, #252]	; (f28 <audioFrameAdditive+0x268>)
     e2a:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     e2c:	4a3f      	ldr	r2, [pc, #252]	; (f2c <audioFrameAdditive+0x26c>)
     e2e:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
     e32:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
     e38:	ee67 7a87 	vmul.f32	s15, s15, s14
     e3c:	edc2 7a00 	vstr	s15, [r2]
}
     e40:	b011      	add	sp, #68	; 0x44
     e42:	ecbd 8b10 	vpop	{d8-d15}
     e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
     e4a:	f89b 3000 	ldrb.w	r3, [fp]
     e4e:	b373      	cbz	r3, eae <audioFrameAdditive+0x1ee>
     e50:	2500      	movs	r5, #0
     e52:	4e29      	ldr	r6, [pc, #164]	; (ef8 <audioFrameAdditive+0x238>)
     e54:	4c36      	ldr	r4, [pc, #216]	; (f30 <audioFrameAdditive+0x270>)
     e56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; f3c <audioFrameAdditive+0x27c>
			previousStringInputs[i] = 0;
     e5a:	46a8      	mov	r8, r5
     e5c:	f1a4 093c 	sub.w	r9, r4, #60	; 0x3c
				tADSRT_clear(&additiveEnv[i][j]);
     e60:	4648      	mov	r0, r9
			for (int j = 0; j < NUM_OVERTONES; j++)
     e62:	f109 0904 	add.w	r9, r9, #4
				tADSRT_clear(&additiveEnv[i][j]);
     e66:	f00b f913 	bl	c090 <__tADSRT_clear_veneer>
			for (int j = 0; j < NUM_OVERTONES; j++)
     e6a:	45a1      	cmp	r9, r4
     e6c:	d1f8      	bne.n	e60 <audioFrameAdditive+0x1a0>
			tADSRT_clear(&fenvelopes[i]);
     e6e:	4630      	mov	r0, r6
		for (int i = 0; i < numStringsThisBoard; i++)
     e70:	f109 043c 	add.w	r4, r9, #60	; 0x3c
			tADSRT_clear(&fenvelopes[i]);
     e74:	f00b f90c 	bl	c090 <__tADSRT_clear_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
     e78:	f89b 3000 	ldrb.w	r3, [fp]
			previousStringInputs[i] = 0;
     e7c:	f82a 8015 	strh.w	r8, [sl, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     e80:	3501      	adds	r5, #1
			previousStringInputs[i] = 0;
     e82:	f04f 0200 	mov.w	r2, #0
		for (int i = 0; i < numStringsThisBoard; i++)
     e86:	3604      	adds	r6, #4
     e88:	42ab      	cmp	r3, r5
     e8a:	dce7      	bgt.n	e5c <audioFrameAdditive+0x19c>
		resetStringInputs = 0;
     e8c:	703a      	strb	r2, [r7, #0]
		newPluck = 1;
     e8e:	4a14      	ldr	r2, [pc, #80]	; (ee0 <audioFrameAdditive+0x220>)
     e90:	4611      	mov	r1, r2
     e92:	9207      	str	r2, [sp, #28]
     e94:	2201      	movs	r2, #1
     e96:	600a      	str	r2, [r1, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
     e98:	2b00      	cmp	r3, #0
     e9a:	f47f af28 	bne.w	cee <audioFrameAdditive+0x2e>
	if (newPluck)
     e9e:	9b07      	ldr	r3, [sp, #28]
     ea0:	681b      	ldr	r3, [r3, #0]
     ea2:	2b00      	cmp	r3, #0
     ea4:	d0a3      	beq.n	dee <audioFrameAdditive+0x12e>
		newPluck = 0;
     ea6:	2300      	movs	r3, #0
     ea8:	9a07      	ldr	r2, [sp, #28]
     eaa:	6013      	str	r3, [r2, #0]
     eac:	e79f      	b.n	dee <audioFrameAdditive+0x12e>
		newPluck = 1;
     eae:	4a0c      	ldr	r2, [pc, #48]	; (ee0 <audioFrameAdditive+0x220>)
		resetStringInputs = 0;
     eb0:	703b      	strb	r3, [r7, #0]
		newPluck = 1;
     eb2:	2301      	movs	r3, #1
     eb4:	9207      	str	r2, [sp, #28]
     eb6:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
     eb8:	e7f1      	b.n	e9e <audioFrameAdditive+0x1de>
     eba:	9d08      	ldr	r5, [sp, #32]
     ebc:	f105 043c 	add.w	r4, r5, #60	; 0x3c
					tADSRT_off(&additiveEnv[i][j]);
     ec0:	4628      	mov	r0, r5
				for (int j = 0; j < NUM_OVERTONES; j++)
     ec2:	3504      	adds	r5, #4
					tADSRT_off(&additiveEnv[i][j]);
     ec4:	f00b f938 	bl	c138 <__tADSRT_off_veneer>
				for (int j = 0; j < NUM_OVERTONES; j++)
     ec8:	42ac      	cmp	r4, r5
     eca:	d1f9      	bne.n	ec0 <audioFrameAdditive+0x200>
				tADSRT_off(&fenvelopes[i]);
     ecc:	9803      	ldr	r0, [sp, #12]
     ece:	f00b f933 	bl	c138 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
     ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     ed4:	781b      	ldrb	r3, [r3, #0]
     ed6:	e76f      	b.n	db8 <audioFrameAdditive+0xf8>
     ed8:	e0001000 	.word	0xe0001000
     edc:	20005771 	.word	0x20005771
     ee0:	200052e8 	.word	0x200052e8
     ee4:	20000b2c 	.word	0x20000b2c
     ee8:	3ecccccd 	.word	0x3ecccccd
     eec:	3dcccccd 	.word	0x3dcccccd
     ef0:	40490fdb 	.word	0x40490fdb
     ef4:	200010d8 	.word	0x200010d8
     ef8:	200051bc 	.word	0x200051bc
     efc:	20000ab4 	.word	0x20000ab4
     f00:	44fa0000 	.word	0x44fa0000
     f04:	20001020 	.word	0x20001020
     f08:	3ffeb852 	.word	0x3ffeb852
     f0c:	20014224 	.word	0x20014224
     f10:	00000000 	.word	0x00000000
     f14:	200141d4 	.word	0x200141d4
     f18:	20014204 	.word	0x20014204
     f1c:	30000000 	.word	0x30000000
     f20:	4b000000 	.word	0x4b000000
     f24:	20000684 	.word	0x20000684
     f28:	20014244 	.word	0x20014244
     f2c:	200051cc 	.word	0x200051cc
     f30:	20000af0 	.word	0x20000af0
     f34:	20000694 	.word	0x20000694
     f38:	200051e8 	.word	0x200051e8
     f3c:	20005358 	.word	0x20005358
				float amplitz = stringInputs[i] * 0.000015259021897f;
     f40:	4bdf      	ldr	r3, [pc, #892]	; (12c0 <audioFrameAdditive+0x600>)
     f42:	eddf 7ae0 	vldr	s15, [pc, #896]	; 12c4 <audioFrameAdditive+0x604>
     f46:	f833 3018 	ldrh.w	r3, [r3, r8, lsl #1]
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     f4a:	48df      	ldr	r0, [pc, #892]	; (12c8 <audioFrameAdditive+0x608>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
     f4c:	b29b      	uxth	r3, r3
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     f4e:	eb00 0088 	add.w	r0, r0, r8, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
     f52:	ee0a 3a90 	vmov	s21, r3
     f56:	eef8 aaea 	vcvt.f32.s32	s21, s21
     f5a:	ee6a aaa7 	vmul.f32	s21, s21, s15
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     f5e:	eeb0 0a6a 	vmov.f32	s0, s21
     f62:	f00a fec9 	bl	bcf8 <__tExpSmooth_setVal_veneer>
				stringOctave[i] = octave;
     f66:	4bd9      	ldr	r3, [pc, #868]	; (12cc <audioFrameAdditive+0x60c>)
     f68:	9c05      	ldr	r4, [sp, #20]
     f6a:	681b      	ldr	r3, [r3, #0]
				tADSRT_setDecay(&fenvelopes[i], 50.0f);
     f6c:	9d03      	ldr	r5, [sp, #12]
				stringOctave[i] = octave;
     f6e:	6023      	str	r3, [r4, #0]
				tADSRT_setDecay(&fenvelopes[i], 50.0f);
     f70:	ed9f 0ad7 	vldr	s0, [pc, #860]	; 12d0 <audioFrameAdditive+0x610>
     f74:	4628      	mov	r0, r5
     f76:	f00b f87b 	bl	c070 <__tADSRT_setDecay_veneer>
				tADSRT_on(&fenvelopes[i], amplitz);
     f7a:	eeb0 0a6a 	vmov.f32	s0, s21
     f7e:	4628      	mov	r0, r5
     f80:	f00b f916 	bl	c1b0 <__tADSRT_on_veneer>
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     f84:	4bd3      	ldr	r3, [pc, #844]	; (12d4 <audioFrameAdditive+0x614>)
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     f86:	ea4f 0288 	mov.w	r2, r8, lsl #2
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     f8a:	edd4 7a00 	vldr	s15, [r4]
     f8e:	4413      	add	r3, r2
     f90:	ed93 0a00 	vldr	s0, [r3]
     f94:	ee30 0a27 	vadd.f32	s0, s0, s15
     f98:	f00a ffce 	bl	bf38 <__mtofTableLookup_veneer>
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     fa0:	ed99 6a0b 	vldr	s12, [r9, #44]	; 0x2c
     fa4:	eef0 6a0c 	vmov.f32	s13, #12	; 0x40600000  3.5
     fa8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     fac:	9b04      	ldr	r3, [sp, #16]
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     fae:	ee37 7a46 	vsub.f32	s14, s14, s12
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     fb2:	ed83 0a00 	vstr	s0, [r3]
				int thisString = i + firstString;
     fb6:	4bc8      	ldr	r3, [pc, #800]	; (12d8 <audioFrameAdditive+0x618>)
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     fb8:	eee7 7a26 	vfma.f32	s15, s14, s13
				int thisString = i + firstString;
     fbc:	681b      	ldr	r3, [r3, #0]
     fbe:	4443      	add	r3, r8
				if (thisString < 6)
     fc0:	2b05      	cmp	r3, #5
				int thisString = i + firstString;
     fc2:	930c      	str	r3, [sp, #48]	; 0x30
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     fc4:	ee20 9a27 	vmul.f32	s18, s0, s15
					stringFade = (float)thisString * 0.2f;
     fc8:	ee07 3a90 	vmov	s15, r3
     fcc:	eef8 9ae7 	vcvt.f32.s32	s19, s15
				if (thisString < 6)
     fd0:	f340 8130 	ble.w	1234 <audioFrameAdditive+0x574>
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     fd4:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     fd8:	4dc0      	ldr	r5, [pc, #768]	; (12dc <audioFrameAdditive+0x61c>)
     fda:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
     fde:	eef0 1a6f 	vmov.f32	s3, s31
     fe2:	ed95 1a05 	vldr	s2, [r5, #20]
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     fe6:	ee79 9ae7 	vsub.f32	s19, s19, s15
     fea:	eddf 7abd 	vldr	s15, [pc, #756]	; 12e0 <audioFrameAdditive+0x620>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     fee:	edd5 0a03 	vldr	s1, [r5, #12]
     ff2:	eeb0 0a49 	vmov.f32	s0, s18
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     ff6:	ee69 9aa7 	vmul.f32	s19, s19, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     ffa:	f00a ff79 	bl	bef0 <__LEAF_map_veneer>
     ffe:	eeb0 1a6e 	vmov.f32	s2, s29
    1002:	eef0 0a40 	vmov.f32	s1, s0
    1006:	eeb0 0a6f 	vmov.f32	s0, s31
    100a:	f00a ff1d 	bl	be48 <__LEAF_clip_veneer>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    100e:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1012:	eeb0 ba40 	vmov.f32	s22, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1016:	ed95 1a02 	vldr	s2, [r5, #8]
    101a:	eef0 1a6f 	vmov.f32	s3, s31
    101e:	edd5 0a00 	vldr	s1, [r5]
    1022:	eeb0 0a49 	vmov.f32	s0, s18
    1026:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 12f4 <audioFrameAdditive+0x634>
    102a:	f00a ff61 	bl	bef0 <__LEAF_map_veneer>
    102e:	eeb0 1a6e 	vmov.f32	s2, s29
    1032:	eef0 0a40 	vmov.f32	s1, s0
    1036:	4cab      	ldr	r4, [pc, #684]	; (12e4 <audioFrameAdditive+0x624>)
    1038:	eeb0 0a6f 	vmov.f32	s0, s31
    103c:	4eaa      	ldr	r6, [pc, #680]	; (12e8 <audioFrameAdditive+0x628>)
    103e:	f00a ff03 	bl	be48 <__LEAF_clip_veneer>
				int height1Int = floor(height1);
    1042:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
				int height2Int = floor(height2);
    1046:	eeb7 7acb 	vcvt.f64.f32	d7, s22
    104a:	49a8      	ldr	r1, [pc, #672]	; (12ec <audioFrameAdditive+0x62c>)
				float oneMinusStringFade = 1.0f - stringFade;
    104c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    1050:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
				int height1Int = floor(height1);
    1054:	febb 6b46 	vrintm.f64	d6, d6
    1058:	eebd 6bc6 	vcvt.s32.f64	s12, d6
				int height2Int = floor(height2);
    105c:	febb 7b47 	vrintm.f64	d7, d7
    1060:	eebd 7bc7 	vcvt.s32.f64	s14, d7
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1064:	ee38 eac0 	vsub.f32	s28, s17, s0
    1068:	46d0      	mov	r8, sl
    106a:	ee16 3a10 	vmov	r3, s12
				float height1Float = height1 - height1Int;
    106e:	eef8 7ac6 	vcvt.f32.s32	s15, s12
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1072:	ee78 dacb 	vsub.f32	s27, s17, s22
				float height2Float = height2 - height2Int;
    1076:	9f08      	ldr	r7, [sp, #32]
    1078:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    107c:	ee17 3a10 	vmov	r3, s14
    1080:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    1084:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
				float height1Float = height1 - height1Int;
    1088:	ee30 da67 	vsub.f32	s26, s0, s15
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    108c:	ee3e ea27 	vadd.f32	s28, s28, s15
    1090:	00db      	lsls	r3, r3, #3
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1092:	ee7d 7a87 	vadd.f32	s15, s27, s14
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1096:	eef0 ba40 	vmov.f32	s23, s0
				float oneMinusStringFade = 1.0f - stringFade;
    109a:	f103 0bd8 	add.w	fp, r3, #216	; 0xd8
    109e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
    10a2:	ee38 aae9 	vsub.f32	s20, s17, s19
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10a6:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
    10aa:	18cb      	adds	r3, r1, r3
				float height2Float = height2 - height2Int;
    10ac:	ee7b ca47 	vsub.f32	s25, s22, s14
				for (int j = 0; j < NUM_OVERTONES; j++)
    10b0:	448b      	add	fp, r1
    10b2:	9300      	str	r3, [sp, #0]
    10b4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    10b8:	461a      	mov	r2, r3
    10ba:	f503 7390 	add.w	r3, r3, #288	; 0x120
    10be:	9301      	str	r3, [sp, #4]
    10c0:	4692      	mov	sl, r2
				float height2Float = height2 - height2Int;
    10c2:	9b06      	ldr	r3, [sp, #24]
    10c4:	9309      	str	r3, [sp, #36]	; 0x24
    10c6:	e070      	b.n	11aa <audioFrameAdditive+0x4ea>
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    10c8:	edd3 7a00 	vldr	s15, [r3]
						if (height2 < 1.0f)
    10cc:	eeb4 bae8 	vcmpe.f32	s22, s17
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10d0:	9b00      	ldr	r3, [sp, #0]
    10d2:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    10d6:	ee6d 7a27 	vmul.f32	s15, s26, s15
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10da:	ed93 8a00 	vldr	s16, [r3]
						if (height2 < 1.0f)
    10de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10e2:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
    10e6:	ee2c 8a88 	vmul.f32	s16, s25, s16
    10ea:	eea7 8a26 	vfma.f32	s16, s14, s13
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    10ee:	ed9a 7a36 	vldr	s14, [sl, #216]	; 0xd8
    10f2:	eee7 7a0e 	vfma.f32	s15, s14, s28
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);
    10f6:	ee2a 8a08 	vmul.f32	s16, s20, s16
    10fa:	eea9 8aa7 	vfma.f32	s16, s19, s15
						if (height2 < 1.0f)
    10fe:	f100 80ce 	bmi.w	129e <audioFrameAdditive+0x5de>
							d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
    1102:	eef0 0a49 	vmov.f32	s1, s18
    1106:	ed95 1a08 	vldr	s2, [r5, #32]
    110a:	ed95 0a07 	vldr	s0, [r5, #28]
    110e:	edd4 da4b 	vldr	s27, [r4, #300]	; 0x12c
    1112:	f00a fe99 	bl	be48 <__LEAF_clip_veneer>
    1116:	ed98 7a4b 	vldr	s14, [r8, #300]	; 0x12c
    111a:	eead 7a80 	vfma.f32	s14, s27, s0
    111e:	eec8 da87 	vdiv.f32	s27, s17, s14
						if (height1 < 1.0f)
    1122:	eef4 bae8 	vcmpe.f32	s23, s17
    1126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    112a:	f100 80a7 	bmi.w	127c <audioFrameAdditive+0x5bc>
							d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    112e:	eef0 0a49 	vmov.f32	s1, s18
    1132:	ed95 1a05 	vldr	s2, [r5, #20]
    1136:	ed95 0a04 	vldr	s0, [r5, #16]
    113a:	ed94 fa2d 	vldr	s30, [r4, #180]	; 0xb4
    113e:	f00a fe83 	bl	be48 <__LEAF_clip_veneer>
    1142:	ed98 7a2d 	vldr	s14, [r8, #180]	; 0xb4
    1146:	eeaf 7a00 	vfma.f32	s14, s30, s0
    114a:	eec8 6a87 	vdiv.f32	s13, s17, s14
						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
    114e:	ee6d 7a8a 	vmul.f32	s15, s27, s20
    1152:	eee6 7aa9 	vfma.f32	s15, s13, s19
				for (int j = 0; j < NUM_OVERTONES; j++)
    1156:	9b01      	ldr	r3, [sp, #4]
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * randomFactors[currentRandom]);
    1158:	4638      	mov	r0, r7
					thisDecay *= 2000.0f * knobScaled[10];
    115a:	ed99 0a0a 	vldr	s0, [r9, #40]	; 0x28
				for (int j = 0; j < NUM_OVERTONES; j++)
    115e:	3404      	adds	r4, #4
    1160:	3304      	adds	r3, #4
    1162:	f108 0804 	add.w	r8, r8, #4
					thisDecay *= 2000.0f * knobScaled[10];
    1166:	ee20 0a0c 	vmul.f32	s0, s0, s24
				for (int j = 0; j < NUM_OVERTONES; j++)
    116a:	f10a 0a04 	add.w	sl, sl, #4
    116e:	9301      	str	r3, [sp, #4]
    1170:	f10b 0b04 	add.w	fp, fp, #4
    1174:	9b00      	ldr	r3, [sp, #0]
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * randomFactors[currentRandom]);
    1176:	ee20 0a27 	vmul.f32	s0, s0, s15
				for (int j = 0; j < NUM_OVERTONES; j++)
    117a:	3304      	adds	r3, #4
    117c:	9300      	str	r3, [sp, #0]
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * randomFactors[currentRandom]);
    117e:	f00a ff77 	bl	c070 <__tADSRT_setDecay_veneer>
					currentRandom++;
    1182:	7833      	ldrb	r3, [r6, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * thisGain);
    1184:	4638      	mov	r0, r7
    1186:	ee28 0a2a 	vmul.f32	s0, s16, s21
				for (int j = 0; j < NUM_OVERTONES; j++)
    118a:	3704      	adds	r7, #4
					currentRandom++;
    118c:	3301      	adds	r3, #1
    118e:	7033      	strb	r3, [r6, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * thisGain);
    1190:	f00b f80e 	bl	c1b0 <__tADSRT_on_veneer>
					finalGains[i][j] = thisGain;
    1194:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1196:	eca3 8a01 	vstmia	r3!, {s16}
    119a:	9309      	str	r3, [sp, #36]	; 0x24
					currentRandom++;
    119c:	7833      	ldrb	r3, [r6, #0]
    119e:	3301      	adds	r3, #1
    11a0:	7033      	strb	r3, [r6, #0]
				for (int j = 0; j < NUM_OVERTONES; j++)
    11a2:	4b53      	ldr	r3, [pc, #332]	; (12f0 <audioFrameAdditive+0x630>)
    11a4:	42a3      	cmp	r3, r4
    11a6:	f000 80c9 	beq.w	133c <audioFrameAdditive+0x67c>
					if (thisString < 6)
    11aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    11ac:	2b05      	cmp	r3, #5
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11ae:	9b01      	ldr	r3, [sp, #4]
					if (thisString < 6)
    11b0:	dd8a      	ble.n	10c8 <audioFrameAdditive+0x408>
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11b2:	ed93 7a00 	vldr	s14, [r3]
						if (height2 < 1.0f)
    11b6:	eeb4 bae8 	vcmpe.f32	s22, s17
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    11ba:	9b00      	ldr	r3, [sp, #0]
    11bc:	ed9b 8a00 	vldr	s16, [fp]
    11c0:	edd3 7a00 	vldr	s15, [r3]
						if (height2 < 1.0f)
    11c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    11c8:	eea7 8aac 	vfma.f32	s16, s15, s25
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11cc:	edda 7a00 	vldr	s15, [sl]
    11d0:	eee7 7a0d 	vfma.f32	s15, s14, s26
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);
    11d4:	ee2a 8a08 	vmul.f32	s16, s20, s16
    11d8:	eea9 8aa7 	vfma.f32	s16, s19, s15
						if (height2 < 1.0f)
    11dc:	f100 809d 	bmi.w	131a <audioFrameAdditive+0x65a>
							d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    11e0:	eef0 0a49 	vmov.f32	s1, s18
    11e4:	ed95 1a05 	vldr	s2, [r5, #20]
    11e8:	ed95 0a04 	vldr	s0, [r5, #16]
    11ec:	edd4 da2d 	vldr	s27, [r4, #180]	; 0xb4
    11f0:	f00a fe2a 	bl	be48 <__LEAF_clip_veneer>
    11f4:	ed98 7a2d 	vldr	s14, [r8, #180]	; 0xb4
    11f8:	eead 7a80 	vfma.f32	s14, s27, s0
    11fc:	ee88 fa87 	vdiv.f32	s30, s17, s14
						if (height1 < 1.0f)
    1200:	eef4 bae8 	vcmpe.f32	s23, s17
    1204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1208:	d476      	bmi.n	12f8 <audioFrameAdditive+0x638>
							d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    120a:	eef0 0a49 	vmov.f32	s1, s18
    120e:	ed95 1a02 	vldr	s2, [r5, #8]
    1212:	ed95 0a01 	vldr	s0, [r5, #4]
    1216:	edd4 da0f 	vldr	s27, [r4, #60]	; 0x3c
    121a:	f00a fe15 	bl	be48 <__LEAF_clip_veneer>
    121e:	ed98 7a0f 	vldr	s14, [r8, #60]	; 0x3c
    1222:	eead 7a80 	vfma.f32	s14, s27, s0
    1226:	eec8 6a87 	vdiv.f32	s13, s17, s14
						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
    122a:	ee6f 7a0a 	vmul.f32	s15, s30, s20
    122e:	eee6 7aa9 	vfma.f32	s15, s13, s19
    1232:	e790      	b.n	1156 <audioFrameAdditive+0x496>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1234:	4d29      	ldr	r5, [pc, #164]	; (12dc <audioFrameAdditive+0x61c>)
    1236:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					stringFade = (float)thisString * 0.2f;
    123a:	eddf 7a29 	vldr	s15, [pc, #164]	; 12e0 <audioFrameAdditive+0x620>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    123e:	eef0 1a6f 	vmov.f32	s3, s31
    1242:	ed95 1a08 	vldr	s2, [r5, #32]
    1246:	eeb0 0a49 	vmov.f32	s0, s18
    124a:	edd5 0a06 	vldr	s1, [r5, #24]
					stringFade = (float)thisString * 0.2f;
    124e:	ee69 9aa7 	vmul.f32	s19, s19, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1252:	f00a fe4d 	bl	bef0 <__LEAF_map_veneer>
    1256:	eeb0 1a6e 	vmov.f32	s2, s29
    125a:	eef0 0a40 	vmov.f32	s1, s0
    125e:	eeb0 0a6f 	vmov.f32	s0, s31
    1262:	f00a fdf1 	bl	be48 <__LEAF_clip_veneer>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1266:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    126a:	eeb0 ba40 	vmov.f32	s22, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    126e:	ed95 1a05 	vldr	s2, [r5, #20]
    1272:	eef0 1a6f 	vmov.f32	s3, s31
    1276:	edd5 0a03 	vldr	s1, [r5, #12]
    127a:	e6d2      	b.n	1022 <audioFrameAdditive+0x362>
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    127c:	eef0 0a49 	vmov.f32	s1, s18
    1280:	ed95 1a04 	vldr	s2, [r5, #16]
    1284:	ed95 0a03 	vldr	s0, [r5, #12]
    1288:	ed94 fa1e 	vldr	s30, [r4, #120]	; 0x78
    128c:	f00a fddc 	bl	be48 <__LEAF_clip_veneer>
    1290:	ed98 7a1e 	vldr	s14, [r8, #120]	; 0x78
    1294:	eeaf 7a00 	vfma.f32	s14, s30, s0
    1298:	eec8 6a87 	vdiv.f32	s13, s17, s14
    129c:	e757      	b.n	114e <audioFrameAdditive+0x48e>
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    129e:	eef0 0a49 	vmov.f32	s1, s18
    12a2:	ed95 1a07 	vldr	s2, [r5, #28]
    12a6:	ed95 0a06 	vldr	s0, [r5, #24]
    12aa:	edd4 da3c 	vldr	s27, [r4, #240]	; 0xf0
    12ae:	f00a fdcb 	bl	be48 <__LEAF_clip_veneer>
    12b2:	ed98 7a3c 	vldr	s14, [r8, #240]	; 0xf0
    12b6:	eead 7a80 	vfma.f32	s14, s27, s0
    12ba:	eec8 da87 	vdiv.f32	s27, s17, s14
    12be:	e730      	b.n	1122 <audioFrameAdditive+0x462>
    12c0:	20014204 	.word	0x20014204
    12c4:	37800080 	.word	0x37800080
    12c8:	20001150 	.word	0x20001150
    12cc:	200052f4 	.word	0x200052f4
    12d0:	42480000 	.word	0x42480000
    12d4:	2001421c 	.word	0x2001421c
    12d8:	200051c4 	.word	0x200051c4
    12dc:	200003d8 	.word	0x200003d8
    12e0:	3e4ccccd 	.word	0x3e4ccccd
    12e4:	20000c9c 	.word	0x20000c9c
    12e8:	20014454 	.word	0x20014454
    12ec:	200003fc 	.word	0x200003fc
    12f0:	20000cd8 	.word	0x20000cd8
    12f4:	20000e04 	.word	0x20000e04
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    12f8:	eef0 0a49 	vmov.f32	s1, s18
    12fc:	ed95 1a01 	vldr	s2, [r5, #4]
    1300:	ed95 0a00 	vldr	s0, [r5]
    1304:	edd4 da00 	vldr	s27, [r4]
    1308:	f00a fd9e 	bl	be48 <__LEAF_clip_veneer>
    130c:	ed98 7a00 	vldr	s14, [r8]
    1310:	eead 7a80 	vfma.f32	s14, s27, s0
    1314:	eec8 6a87 	vdiv.f32	s13, s17, s14
    1318:	e787      	b.n	122a <audioFrameAdditive+0x56a>
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    131a:	eef0 0a49 	vmov.f32	s1, s18
    131e:	ed95 1a04 	vldr	s2, [r5, #16]
    1322:	ed95 0a03 	vldr	s0, [r5, #12]
    1326:	edd4 da1e 	vldr	s27, [r4, #120]	; 0x78
    132a:	f00a fd8d 	bl	be48 <__LEAF_clip_veneer>
    132e:	ed98 7a1e 	vldr	s14, [r8, #120]	; 0x78
    1332:	eead 7a80 	vfma.f32	s14, s27, s0
    1336:	ee88 fa87 	vdiv.f32	s30, s17, s14
    133a:	e761      	b.n	1200 <audioFrameAdditive+0x540>
    133c:	9c08      	ldr	r4, [sp, #32]
		for (int i = 0; i < numStringsThisBoard; i++)
    133e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1340:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    1344:	343c      	adds	r4, #60	; 0x3c
    1346:	781b      	ldrb	r3, [r3, #0]
    1348:	e536      	b.n	db8 <audioFrameAdditive+0xf8>
    134a:	bf00      	nop
	...

00001360 <audioFrameWaiting>:


void __ATTR_ITCMRAM audioFrameWaiting(uint16_t buffer_offset)
{
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
	uint32_t tempCountFrame = DWT->CYCCNT;
    1360:	4a17      	ldr	r2, [pc, #92]	; (13c0 <audioFrameWaiting+0x60>)
    1362:	4918      	ldr	r1, [pc, #96]	; (13c4 <audioFrameWaiting+0x64>)
    1364:	eb02 0380 	add.w	r3, r2, r0, lsl #2
{
    1368:	b410      	push	{r4}
	uint32_t tempCountFrame = DWT->CYCCNT;
    136a:	684c      	ldr	r4, [r1, #4]
	//mono operation, no need to compute right channel. Also for loop iterating by 2 instead of 1 to avoid if statement.
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    136c:	0759      	lsls	r1, r3, #29
    136e:	d11b      	bne.n	13a8 <audioFrameWaiting+0x48>
    1370:	f503 7200 	add.w	r2, r3, #512	; 0x200
	{
		int iplusbuffer = buffer_offset + i;
		audioOutBuffer[iplusbuffer] = 0;
    1374:	2000      	movs	r0, #0
    1376:	2100      	movs	r1, #0
    1378:	e8e3 0102 	strd	r0, r1, [r3], #8
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    137c:	4293      	cmp	r3, r2
    137e:	d1fb      	bne.n	1378 <audioFrameWaiting+0x18>
		audioOutBuffer[iplusbuffer + 1] = 0;
	}
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1380:	4b10      	ldr	r3, [pc, #64]	; (13c4 <audioFrameWaiting+0x64>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1382:	4811      	ldr	r0, [pc, #68]	; (13c8 <audioFrameWaiting+0x68>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1384:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1386:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    138a:	1b1b      	subs	r3, r3, r4
    138c:	490f      	ldr	r1, [pc, #60]	; (13cc <audioFrameWaiting+0x6c>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    138e:	4a10      	ldr	r2, [pc, #64]	; (13d0 <audioFrameWaiting+0x70>)
    1390:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    1394:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1396:	eef8 7a67 	vcvt.f32.u32	s15, s15
    139a:	ee67 7a87 	vmul.f32	s15, s15, s14
    139e:	edc2 7a00 	vstr	s15, [r2]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}
    13a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    13a6:	4770      	bx	lr
    13a8:	f502 7100 	add.w	r1, r2, #512	; 0x200
    13ac:	0080      	lsls	r0, r0, #2
		audioOutBuffer[iplusbuffer] = 0;
    13ae:	2200      	movs	r2, #0
    13b0:	4401      	add	r1, r0
		audioOutBuffer[iplusbuffer + 1] = 0;
    13b2:	e9c3 2200 	strd	r2, r2, [r3]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    13b6:	3308      	adds	r3, #8
    13b8:	428b      	cmp	r3, r1
    13ba:	d1fa      	bne.n	13b2 <audioFrameWaiting+0x52>
    13bc:	e7e0      	b.n	1380 <audioFrameWaiting+0x20>
    13be:	bf00      	nop
    13c0:	30000000 	.word	0x30000000
    13c4:	e0001000 	.word	0xe0001000
    13c8:	20000684 	.word	0x20000684
    13cc:	20014244 	.word	0x20014244
    13d0:	200051cc 	.word	0x200051cc
    13d4:	f3af 8000 	nop.w
    13d8:	f3af 8000 	nop.w
    13dc:	f3af 8000 	nop.w

000013e0 <updateStateFromSPIMessage>:
{
    13e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int modeBit = SPI_LEVERS_RX[24 + offset];
    13e2:	4a3e      	ldr	r2, [pc, #248]	; (14dc <updateStateFromSPIMessage+0xfc>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    13e4:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
	uint32_t tempCountSPI = DWT->CYCCNT;
    13e8:	4b3d      	ldr	r3, [pc, #244]	; (14e0 <updateStateFromSPIMessage+0x100>)
	octaveAction = (modeBit >> 6) & 1;
    13ea:	4d3e      	ldr	r5, [pc, #248]	; (14e4 <updateStateFromSPIMessage+0x104>)
	uint32_t tempCountSPI = DWT->CYCCNT;
    13ec:	685c      	ldr	r4, [r3, #4]
	int modeBit = SPI_LEVERS_RX[24 + offset];
    13ee:	1813      	adds	r3, r2, r0
	voice = SPI_LEVERS_RX[25 + offset];
    13f0:	4e3d      	ldr	r6, [pc, #244]	; (14e8 <updateStateFromSPIMessage+0x108>)
	int modeBit = SPI_LEVERS_RX[24 + offset];
    13f2:	7e19      	ldrb	r1, [r3, #24]
	voice = SPI_LEVERS_RX[25 + offset];
    13f4:	7e5f      	ldrb	r7, [r3, #25]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    13f6:	f001 030f 	and.w	r3, r1, #15
    13fa:	3b05      	subs	r3, #5
    13fc:	ee07 3a90 	vmov	s15, r3
	octaveAction = (modeBit >> 6) & 1;
    1400:	f3c1 1380 	ubfx	r3, r1, #6, #1
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	octaveAction = (modeBit >> 6) & 1;
    1408:	702b      	strb	r3, [r5, #0]
	voice = SPI_LEVERS_RX[25 + offset];
    140a:	6037      	str	r7, [r6, #0]
	dualSlider = (modeBit >> 5) & 1;
    140c:	f3c1 1640 	ubfx	r6, r1, #5, #1
	if (octaveAction)
    1410:	782b      	ldrb	r3, [r5, #0]
	edit = (modeBit >> 4) & 1;
    1412:	f3c1 1100 	ubfx	r1, r1, #4, #1
	dualSlider = (modeBit >> 5) & 1;
    1416:	4d35      	ldr	r5, [pc, #212]	; (14ec <updateStateFromSPIMessage+0x10c>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1418:	ee67 7a87 	vmul.f32	s15, s15, s14
	dualSlider = (modeBit >> 5) & 1;
    141c:	602e      	str	r6, [r5, #0]
	edit = (modeBit >> 4) & 1;
    141e:	4d34      	ldr	r5, [pc, #208]	; (14f0 <updateStateFromSPIMessage+0x110>)
    1420:	6029      	str	r1, [r5, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1422:	4934      	ldr	r1, [pc, #208]	; (14f4 <updateStateFromSPIMessage+0x114>)
    1424:	edc1 7a00 	vstr	s15, [r1]
	if (octaveAction)
    1428:	b14b      	cbz	r3, 143e <updateStateFromSPIMessage+0x5e>
		for (int i = 0; i < numStringsThisBoard; i++)
    142a:	4b33      	ldr	r3, [pc, #204]	; (14f8 <updateStateFromSPIMessage+0x118>)
    142c:	781b      	ldrb	r3, [r3, #0]
    142e:	b133      	cbz	r3, 143e <updateStateFromSPIMessage+0x5e>
			stringOctave[i] = octave;
    1430:	4932      	ldr	r1, [pc, #200]	; (14fc <updateStateFromSPIMessage+0x11c>)
		for (int i = 0; i < numStringsThisBoard; i++)
    1432:	2b01      	cmp	r3, #1
			stringOctave[i] = octave;
    1434:	edc1 7a00 	vstr	s15, [r1]
    1438:	bf18      	it	ne
    143a:	edc1 7a01 	vstrne	s15, [r1, #4]
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    143e:	4410      	add	r0, r2
    1440:	492f      	ldr	r1, [pc, #188]	; (1500 <updateStateFromSPIMessage+0x120>)
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1442:	4a30      	ldr	r2, [pc, #192]	; (1504 <updateStateFromSPIMessage+0x124>)
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    1444:	7e85      	ldrb	r5, [r0, #26]
    1446:	7ec3      	ldrb	r3, [r0, #27]
	volumePedal = volumePedalInt * 0.0002442002442f;
    1448:	eddf 7a2f 	vldr	s15, [pc, #188]	; 1508 <updateStateFromSPIMessage+0x128>
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    144c:	eb03 2305 	add.w	r3, r3, r5, lsl #8
	volumePedal = volumePedalInt * 0.0002442002442f;
    1450:	4e2e      	ldr	r6, [pc, #184]	; (150c <updateStateFromSPIMessage+0x12c>)
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    1452:	b29b      	uxth	r3, r3
    1454:	800b      	strh	r3, [r1, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    1456:	880b      	ldrh	r3, [r1, #0]
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1458:	7811      	ldrb	r1, [r2, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    145a:	b29b      	uxth	r3, r3
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    145c:	b2c9      	uxtb	r1, r1
	volumePedal = volumePedalInt * 0.0002442002442f;
    145e:	ee00 3a10 	vmov	s0, r3
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1462:	7f03      	ldrb	r3, [r0, #28]
    1464:	7f40      	ldrb	r0, [r0, #29]
	volumePedal = volumePedalInt * 0.0002442002442f;
    1466:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    146a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    146e:	4b28      	ldr	r3, [pc, #160]	; (1510 <updateStateFromSPIMessage+0x130>)
    1470:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
	volumePedal = volumePedalInt * 0.0002442002442f;
    1474:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    1478:	7811      	ldrb	r1, [r2, #0]
    147a:	4826      	ldr	r0, [pc, #152]	; (1514 <updateStateFromSPIMessage+0x134>)
    147c:	b2c9      	uxtb	r1, r1
	volumePedal = volumePedalInt * 0.0002442002442f;
    147e:	ed86 0a00 	vstr	s0, [r6]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    1482:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
    1486:	7811      	ldrb	r1, [r2, #0]
    1488:	b2c9      	uxtb	r1, r1
    148a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    148e:	428d      	cmp	r5, r1
    1490:	d01a      	beq.n	14c8 <updateStateFromSPIMessage+0xe8>
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    1492:	7811      	ldrb	r1, [r2, #0]
    1494:	7812      	ldrb	r2, [r2, #0]
    1496:	b2c9      	uxtb	r1, r1
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    1498:	eddf 6a1f 	vldr	s13, [pc, #124]	; 1518 <updateStateFromSPIMessage+0x138>
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    149c:	b2d2      	uxtb	r2, r2
    149e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
    14a2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    14a6:	ed93 7a00 	vldr	s14, [r3]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    14aa:	edd3 7a01 	vldr	s15, [r3, #4]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    14ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    14b2:	4b1a      	ldr	r3, [pc, #104]	; (151c <updateStateFromSPIMessage+0x13c>)
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    14b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    14b8:	ee27 7a26 	vmul.f32	s14, s14, s13
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    14bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    14c0:	ed83 7a00 	vstr	s14, [r3]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    14c4:	edc3 7a01 	vstr	s15, [r3, #4]
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    14c8:	4815      	ldr	r0, [pc, #84]	; (1520 <updateStateFromSPIMessage+0x140>)
    14ca:	f00a fdcd 	bl	c068 <__tExpSmooth_setDest_veneer>
	timeSPI = DWT->CYCCNT - tempCountSPI;
    14ce:	4b04      	ldr	r3, [pc, #16]	; (14e0 <updateStateFromSPIMessage+0x100>)
    14d0:	4a14      	ldr	r2, [pc, #80]	; (1524 <updateStateFromSPIMessage+0x144>)
    14d2:	685b      	ldr	r3, [r3, #4]
    14d4:	1b1b      	subs	r3, r3, r4
    14d6:	6013      	str	r3, [r2, #0]
}
    14d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14da:	bf00      	nop
    14dc:	30000800 	.word	0x30000800
    14e0:	e0001000 	.word	0xe0001000
    14e4:	200052f8 	.word	0x200052f8
    14e8:	20014250 	.word	0x20014250
    14ec:	200051b4 	.word	0x200051b4
    14f0:	200051b8 	.word	0x200051b8
    14f4:	200052f4 	.word	0x200052f4
    14f8:	20000694 	.word	0x20000694
    14fc:	20014224 	.word	0x20014224
    1500:	20014258 	.word	0x20014258
    1504:	20014260 	.word	0x20014260
    1508:	39800801 	.word	0x39800801
    150c:	20014254 	.word	0x20014254
    1510:	2001422c 	.word	0x2001422c
    1514:	20014234 	.word	0x20014234
    1518:	3b000000 	.word	0x3b000000
    151c:	20001190 	.word	0x20001190
    1520:	2001425c 	.word	0x2001425c
    1524:	20014248 	.word	0x20014248
    1528:	f3af 8000 	nop.w
    152c:	f3af 8000 	nop.w
    1530:	f3af 8000 	nop.w
    1534:	f3af 8000 	nop.w
    1538:	f3af 8000 	nop.w
    153c:	f3af 8000 	nop.w

00001540 <HAL_SAI_TxCpltCallback>:
{
    1540:	b570      	push	{r4, r5, r6, lr}
	if ((!diskBusy)&& (presetReady))
    1542:	4d67      	ldr	r5, [pc, #412]	; (16e0 <HAL_SAI_TxCpltCallback+0x1a0>)
    1544:	782b      	ldrb	r3, [r5, #0]
    1546:	b91b      	cbnz	r3, 1550 <HAL_SAI_TxCpltCallback+0x10>
    1548:	4b66      	ldr	r3, [pc, #408]	; (16e4 <HAL_SAI_TxCpltCallback+0x1a4>)
    154a:	681b      	ldr	r3, [r3, #0]
    154c:	2b00      	cmp	r3, #0
    154e:	d167      	bne.n	1620 <HAL_SAI_TxCpltCallback+0xe0>
	if (voice != prevVoice)
    1550:	4c65      	ldr	r4, [pc, #404]	; (16e8 <HAL_SAI_TxCpltCallback+0x1a8>)
    1552:	4e66      	ldr	r6, [pc, #408]	; (16ec <HAL_SAI_TxCpltCallback+0x1ac>)
    1554:	6822      	ldr	r2, [r4, #0]
    1556:	6833      	ldr	r3, [r6, #0]
    1558:	429a      	cmp	r2, r3
    155a:	d066      	beq.n	162a <HAL_SAI_TxCpltCallback+0xea>
		if (voice == 63)
    155c:	6823      	ldr	r3, [r4, #0]
    155e:	2b3f      	cmp	r3, #63	; 0x3f
    1560:	d078      	beq.n	1654 <HAL_SAI_TxCpltCallback+0x114>
		else if (voice == 62)
    1562:	6823      	ldr	r3, [r4, #0]
    1564:	2b3e      	cmp	r3, #62	; 0x3e
    1566:	d065      	beq.n	1634 <HAL_SAI_TxCpltCallback+0xf4>
		else if (voice == 61)
    1568:	6823      	ldr	r3, [r4, #0]
    156a:	2b3d      	cmp	r3, #61	; 0x3d
    156c:	f000 8081 	beq.w	1672 <HAL_SAI_TxCpltCallback+0x132>
		else if (voice == 60)
    1570:	6823      	ldr	r3, [r4, #0]
    1572:	2b3c      	cmp	r3, #60	; 0x3c
    1574:	f000 808f 	beq.w	1696 <HAL_SAI_TxCpltCallback+0x156>
		else if (voice == 59)
    1578:	6823      	ldr	r3, [r4, #0]
    157a:	2b3b      	cmp	r3, #59	; 0x3b
    157c:	f000 809d 	beq.w	16ba <HAL_SAI_TxCpltCallback+0x17a>
			presetWaitingToLoad = 1;
    1580:	4b5b      	ldr	r3, [pc, #364]	; (16f0 <HAL_SAI_TxCpltCallback+0x1b0>)
    1582:	2201      	movs	r2, #1
			presetNumberToLoad = voice;
    1584:	485b      	ldr	r0, [pc, #364]	; (16f4 <HAL_SAI_TxCpltCallback+0x1b4>)
			presetWaitingToLoad = 1;
    1586:	601a      	str	r2, [r3, #0]
			presetNumberToLoad = voice;
    1588:	6823      	ldr	r3, [r4, #0]
			audioFrameFunction = audioFrameWaiting;
    158a:	495b      	ldr	r1, [pc, #364]	; (16f8 <HAL_SAI_TxCpltCallback+0x1b8>)
			presetNumberToLoad = voice;
    158c:	b2db      	uxtb	r3, r3
    158e:	7003      	strb	r3, [r0, #0]
			audioFrameFunction = audioFrameWaiting;
    1590:	485a      	ldr	r0, [pc, #360]	; (16fc <HAL_SAI_TxCpltCallback+0x1bc>)
			presetReady = 0;
    1592:	4b54      	ldr	r3, [pc, #336]	; (16e4 <HAL_SAI_TxCpltCallback+0x1a4>)
			audioFrameFunction = audioFrameWaiting;
    1594:	6008      	str	r0, [r1, #0]
			presetReady = 0;
    1596:	2100      	movs	r1, #0
    1598:	6019      	str	r1, [r3, #0]
			if (prevVoice > 59)
    159a:	6833      	ldr	r3, [r6, #0]
    159c:	2b3b      	cmp	r3, #59	; 0x3b
    159e:	dc46      	bgt.n	162e <HAL_SAI_TxCpltCallback+0xee>
			frameLoadOverCount = 0;
    15a0:	2200      	movs	r2, #0
    15a2:	4957      	ldr	r1, [pc, #348]	; (1700 <HAL_SAI_TxCpltCallback+0x1c0>)
    15a4:	4613      	mov	r3, r2
    15a6:	600a      	str	r2, [r1, #0]
			whichModel = 1;
    15a8:	4d56      	ldr	r5, [pc, #344]	; (1704 <HAL_SAI_TxCpltCallback+0x1c4>)
			audioOutBuffer[i] = 0;
    15aa:	2000      	movs	r0, #0
			whichModel = 1;
    15ac:	4a56      	ldr	r2, [pc, #344]	; (1708 <HAL_SAI_TxCpltCallback+0x1c8>)
			audioOutBuffer[i] = 0;
    15ae:	2100      	movs	r1, #0
			whichModel = 1;
    15b0:	7013      	strb	r3, [r2, #0]
    15b2:	462b      	mov	r3, r5
    15b4:	f505 6280 	add.w	r2, r5, #1024	; 0x400
			audioOutBuffer[i] = 0;
    15b8:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    15bc:	4293      	cmp	r3, r2
    15be:	d1fb      	bne.n	15b8 <HAL_SAI_TxCpltCallback+0x78>
	prevVoice = voice;
    15c0:	6823      	ldr	r3, [r4, #0]
	uint32_t tempCountClean = DWT->CYCCNT;
    15c2:	4952      	ldr	r1, [pc, #328]	; (170c <HAL_SAI_TxCpltCallback+0x1cc>)
	prevVoice = voice;
    15c4:	6033      	str	r3, [r6, #0]
	uint32_t tempCountClean = DWT->CYCCNT;
    15c6:	6848      	ldr	r0, [r1, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    15c8:	f3bf 8f4f 	dsb	sy

      __DSB();

      do {
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    15cc:	4b50      	ldr	r3, [pc, #320]	; (1710 <HAL_SAI_TxCpltCallback+0x1d0>)
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15ce:	4a51      	ldr	r2, [pc, #324]	; (1714 <HAL_SAI_TxCpltCallback+0x1d4>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    15d0:	f103 0420 	add.w	r4, r3, #32
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15d4:	f8c2 5270 	str.w	r5, [r2, #624]	; 0x270
    15d8:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
    15dc:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    15e0:	f103 0440 	add.w	r4, r3, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15e4:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    15e8:	f103 0460 	add.w	r4, r3, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15ec:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    15f0:	f103 0480 	add.w	r4, r3, #128	; 0x80
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15f4:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    15f8:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    15fc:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    1600:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
    1604:	33e0      	adds	r3, #224	; 0xe0
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1606:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
    160a:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
    160e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1612:	f3bf 8f6f 	isb	sy
	timeClean = DWT->CYCCNT - tempCountClean;
    1616:	684b      	ldr	r3, [r1, #4]
    1618:	4a3f      	ldr	r2, [pc, #252]	; (1718 <HAL_SAI_TxCpltCallback+0x1d8>)
    161a:	1a1b      	subs	r3, r3, r0
    161c:	6013      	str	r3, [r2, #0]
}
    161e:	bd70      	pop	{r4, r5, r6, pc}
		audioFrameFunction(HALF_BUFFER_SIZE);
    1620:	4b35      	ldr	r3, [pc, #212]	; (16f8 <HAL_SAI_TxCpltCallback+0x1b8>)
    1622:	2080      	movs	r0, #128	; 0x80
    1624:	681b      	ldr	r3, [r3, #0]
    1626:	4798      	blx	r3
    1628:	e792      	b.n	1550 <HAL_SAI_TxCpltCallback+0x10>
    162a:	4d36      	ldr	r5, [pc, #216]	; (1704 <HAL_SAI_TxCpltCallback+0x1c4>)
    162c:	e7c8      	b.n	15c0 <HAL_SAI_TxCpltCallback+0x80>
				resetStringInputs = 1;
    162e:	4b3b      	ldr	r3, [pc, #236]	; (171c <HAL_SAI_TxCpltCallback+0x1dc>)
    1630:	701a      	strb	r2, [r3, #0]
    1632:	e7b5      	b.n	15a0 <HAL_SAI_TxCpltCallback+0x60>
			audioFrameFunction = audioFrameWaiting;
    1634:	4b30      	ldr	r3, [pc, #192]	; (16f8 <HAL_SAI_TxCpltCallback+0x1b8>)
    1636:	4a31      	ldr	r2, [pc, #196]	; (16fc <HAL_SAI_TxCpltCallback+0x1bc>)
    1638:	601a      	str	r2, [r3, #0]
			audioSwitchToString2();
    163a:	f005 fbb1 	bl	6da0 <audioSwitchToString2>
			currentActivePreset = voice;
    163e:	6823      	ldr	r3, [r4, #0]
    1640:	4a37      	ldr	r2, [pc, #220]	; (1720 <HAL_SAI_TxCpltCallback+0x1e0>)
    1642:	b2db      	uxtb	r3, r3
    1644:	7013      	strb	r3, [r2, #0]
			resetStringInputs = 1;
    1646:	2201      	movs	r2, #1
    1648:	4b34      	ldr	r3, [pc, #208]	; (171c <HAL_SAI_TxCpltCallback+0x1dc>)
    164a:	701a      	strb	r2, [r3, #0]
			diskBusy = 0;
    164c:	2200      	movs	r2, #0
    164e:	2302      	movs	r3, #2
    1650:	702a      	strb	r2, [r5, #0]
			whichModel = 2;
    1652:	e7a9      	b.n	15a8 <HAL_SAI_TxCpltCallback+0x68>
			audioFrameFunction = audioFrameWaiting;
    1654:	4b28      	ldr	r3, [pc, #160]	; (16f8 <HAL_SAI_TxCpltCallback+0x1b8>)
    1656:	4a29      	ldr	r2, [pc, #164]	; (16fc <HAL_SAI_TxCpltCallback+0x1bc>)
    1658:	601a      	str	r2, [r3, #0]
			audioSwitchToString1();
    165a:	f005 f841 	bl	66e0 <audioSwitchToString1>
			currentActivePreset = voice;
    165e:	6823      	ldr	r3, [r4, #0]
    1660:	4a2f      	ldr	r2, [pc, #188]	; (1720 <HAL_SAI_TxCpltCallback+0x1e0>)
    1662:	b2db      	uxtb	r3, r3
    1664:	7013      	strb	r3, [r2, #0]
			resetStringInputs = 1;
    1666:	2301      	movs	r3, #1
    1668:	4a2c      	ldr	r2, [pc, #176]	; (171c <HAL_SAI_TxCpltCallback+0x1dc>)
    166a:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    166c:	2200      	movs	r2, #0
    166e:	702a      	strb	r2, [r5, #0]
			whichModel = 1;
    1670:	e79a      	b.n	15a8 <HAL_SAI_TxCpltCallback+0x68>
			audioFrameFunction = audioFrameAdditive;
    1672:	4b21      	ldr	r3, [pc, #132]	; (16f8 <HAL_SAI_TxCpltCallback+0x1b8>)
    1674:	4a2b      	ldr	r2, [pc, #172]	; (1724 <HAL_SAI_TxCpltCallback+0x1e4>)
    1676:	601a      	str	r2, [r3, #0]
			audioSwitchToAdditive();
    1678:	f7ff f912 	bl	8a0 <audioSwitchToAdditive>
			currentActivePreset = voice;
    167c:	6823      	ldr	r3, [r4, #0]
    167e:	4a28      	ldr	r2, [pc, #160]	; (1720 <HAL_SAI_TxCpltCallback+0x1e0>)
    1680:	b2db      	uxtb	r3, r3
			presetReady = 1;
    1682:	4918      	ldr	r1, [pc, #96]	; (16e4 <HAL_SAI_TxCpltCallback+0x1a4>)
			currentActivePreset = voice;
    1684:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    1686:	2200      	movs	r2, #0
			presetReady = 1;
    1688:	2301      	movs	r3, #1
			diskBusy = 0;
    168a:	702a      	strb	r2, [r5, #0]
			resetStringInputs = 1;
    168c:	4a23      	ldr	r2, [pc, #140]	; (171c <HAL_SAI_TxCpltCallback+0x1dc>)
			presetReady = 1;
    168e:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    1690:	7013      	strb	r3, [r2, #0]
			whichModel = 3;
    1692:	2303      	movs	r3, #3
    1694:	e788      	b.n	15a8 <HAL_SAI_TxCpltCallback+0x68>
			audioFrameFunction = audioFrameVocal;
    1696:	4b18      	ldr	r3, [pc, #96]	; (16f8 <HAL_SAI_TxCpltCallback+0x1b8>)
    1698:	4a23      	ldr	r2, [pc, #140]	; (1728 <HAL_SAI_TxCpltCallback+0x1e8>)
    169a:	601a      	str	r2, [r3, #0]
			audioSwitchToVocal();
    169c:	f00a f810 	bl	b6c0 <audioSwitchToVocal>
			currentActivePreset = voice;
    16a0:	6823      	ldr	r3, [r4, #0]
    16a2:	4a1f      	ldr	r2, [pc, #124]	; (1720 <HAL_SAI_TxCpltCallback+0x1e0>)
    16a4:	b2db      	uxtb	r3, r3
			presetReady = 1;
    16a6:	490f      	ldr	r1, [pc, #60]	; (16e4 <HAL_SAI_TxCpltCallback+0x1a4>)
			currentActivePreset = voice;
    16a8:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    16aa:	2200      	movs	r2, #0
			presetReady = 1;
    16ac:	2301      	movs	r3, #1
			diskBusy = 0;
    16ae:	702a      	strb	r2, [r5, #0]
			resetStringInputs = 1;
    16b0:	4a1a      	ldr	r2, [pc, #104]	; (171c <HAL_SAI_TxCpltCallback+0x1dc>)
			presetReady = 1;
    16b2:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    16b4:	7013      	strb	r3, [r2, #0]
			whichModel = 4;
    16b6:	2304      	movs	r3, #4
    16b8:	e776      	b.n	15a8 <HAL_SAI_TxCpltCallback+0x68>
			audioFrameFunction = audioFrameString3;
    16ba:	4b0f      	ldr	r3, [pc, #60]	; (16f8 <HAL_SAI_TxCpltCallback+0x1b8>)
    16bc:	4a1b      	ldr	r2, [pc, #108]	; (172c <HAL_SAI_TxCpltCallback+0x1ec>)
    16be:	601a      	str	r2, [r3, #0]
			audioSwitchToString3();
    16c0:	f006 f8ee 	bl	78a0 <audioSwitchToString3>
			currentActivePreset = voice;
    16c4:	6823      	ldr	r3, [r4, #0]
    16c6:	4a16      	ldr	r2, [pc, #88]	; (1720 <HAL_SAI_TxCpltCallback+0x1e0>)
    16c8:	b2db      	uxtb	r3, r3
			presetReady = 1;
    16ca:	4906      	ldr	r1, [pc, #24]	; (16e4 <HAL_SAI_TxCpltCallback+0x1a4>)
			currentActivePreset = voice;
    16cc:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    16ce:	2200      	movs	r2, #0
			presetReady = 1;
    16d0:	2301      	movs	r3, #1
			diskBusy = 0;
    16d2:	702a      	strb	r2, [r5, #0]
			resetStringInputs = 1;
    16d4:	4a11      	ldr	r2, [pc, #68]	; (171c <HAL_SAI_TxCpltCallback+0x1dc>)
			presetReady = 1;
    16d6:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    16d8:	7013      	strb	r3, [r2, #0]
			whichModel = 5;
    16da:	2305      	movs	r3, #5
    16dc:	e764      	b.n	15a8 <HAL_SAI_TxCpltCallback+0x68>
    16de:	bf00      	nop
    16e0:	20014490 	.word	0x20014490
    16e4:	2000534c 	.word	0x2000534c
    16e8:	20014250 	.word	0x20014250
    16ec:	2000069c 	.word	0x2000069c
    16f0:	2001a470 	.word	0x2001a470
    16f4:	2001a46e 	.word	0x2001a46e
    16f8:	2000118c 	.word	0x2000118c
    16fc:	00001361 	.word	0x00001361
    1700:	200051c8 	.word	0x200051c8
    1704:	30000000 	.word	0x30000000
    1708:	2001ca75 	.word	0x2001ca75
    170c:	e0001000 	.word	0xe0001000
    1710:	30000020 	.word	0x30000020
    1714:	e000ed00 	.word	0xe000ed00
    1718:	20014240 	.word	0x20014240
    171c:	20005771 	.word	0x20005771
    1720:	200006a5 	.word	0x200006a5
    1724:	00000cc1 	.word	0x00000cc1
    1728:	0000b8c1 	.word	0x0000b8c1
    172c:	00007b21 	.word	0x00007b21
    1730:	f3af 8000 	nop.w
    1734:	f3af 8000 	nop.w
    1738:	f3af 8000 	nop.w
    173c:	f3af 8000 	nop.w

00001740 <HAL_SAI_TxHalfCpltCallback>:
{
    1740:	b570      	push	{r4, r5, r6, lr}
	if ((!diskBusy)&& (presetReady))
    1742:	4d63      	ldr	r5, [pc, #396]	; (18d0 <HAL_SAI_TxHalfCpltCallback+0x190>)
    1744:	7828      	ldrb	r0, [r5, #0]
    1746:	b918      	cbnz	r0, 1750 <HAL_SAI_TxHalfCpltCallback+0x10>
    1748:	4b62      	ldr	r3, [pc, #392]	; (18d4 <HAL_SAI_TxHalfCpltCallback+0x194>)
    174a:	681b      	ldr	r3, [r3, #0]
    174c:	2b00      	cmp	r3, #0
    174e:	d160      	bne.n	1812 <HAL_SAI_TxHalfCpltCallback+0xd2>
	if (voice != prevVoice)
    1750:	4c61      	ldr	r4, [pc, #388]	; (18d8 <HAL_SAI_TxHalfCpltCallback+0x198>)
    1752:	4e62      	ldr	r6, [pc, #392]	; (18dc <HAL_SAI_TxHalfCpltCallback+0x19c>)
    1754:	6822      	ldr	r2, [r4, #0]
    1756:	6833      	ldr	r3, [r6, #0]
    1758:	429a      	cmp	r2, r3
    175a:	d05e      	beq.n	181a <HAL_SAI_TxHalfCpltCallback+0xda>
		if (voice == 63)
    175c:	6823      	ldr	r3, [r4, #0]
    175e:	2b3f      	cmp	r3, #63	; 0x3f
    1760:	d070      	beq.n	1844 <HAL_SAI_TxHalfCpltCallback+0x104>
		else if (voice == 62)
    1762:	6823      	ldr	r3, [r4, #0]
    1764:	2b3e      	cmp	r3, #62	; 0x3e
    1766:	d05d      	beq.n	1824 <HAL_SAI_TxHalfCpltCallback+0xe4>
		else if (voice == 61)
    1768:	6823      	ldr	r3, [r4, #0]
    176a:	2b3d      	cmp	r3, #61	; 0x3d
    176c:	d079      	beq.n	1862 <HAL_SAI_TxHalfCpltCallback+0x122>
		else if (voice == 60)
    176e:	6823      	ldr	r3, [r4, #0]
    1770:	2b3c      	cmp	r3, #60	; 0x3c
    1772:	f000 8088 	beq.w	1886 <HAL_SAI_TxHalfCpltCallback+0x146>
		else if (voice == 59)
    1776:	6823      	ldr	r3, [r4, #0]
    1778:	2b3b      	cmp	r3, #59	; 0x3b
    177a:	f000 8096 	beq.w	18aa <HAL_SAI_TxHalfCpltCallback+0x16a>
			presetWaitingToLoad = 1;
    177e:	4b58      	ldr	r3, [pc, #352]	; (18e0 <HAL_SAI_TxHalfCpltCallback+0x1a0>)
    1780:	2201      	movs	r2, #1
			presetNumberToLoad = voice;
    1782:	4858      	ldr	r0, [pc, #352]	; (18e4 <HAL_SAI_TxHalfCpltCallback+0x1a4>)
			presetWaitingToLoad = 1;
    1784:	601a      	str	r2, [r3, #0]
			presetNumberToLoad = voice;
    1786:	6823      	ldr	r3, [r4, #0]
			audioFrameFunction = audioFrameWaiting;
    1788:	4957      	ldr	r1, [pc, #348]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x1a8>)
			presetNumberToLoad = voice;
    178a:	b2db      	uxtb	r3, r3
    178c:	7003      	strb	r3, [r0, #0]
			audioFrameFunction = audioFrameWaiting;
    178e:	4857      	ldr	r0, [pc, #348]	; (18ec <HAL_SAI_TxHalfCpltCallback+0x1ac>)
			presetReady = 0;
    1790:	4b50      	ldr	r3, [pc, #320]	; (18d4 <HAL_SAI_TxHalfCpltCallback+0x194>)
			audioFrameFunction = audioFrameWaiting;
    1792:	6008      	str	r0, [r1, #0]
			presetReady = 0;
    1794:	2100      	movs	r1, #0
    1796:	6019      	str	r1, [r3, #0]
			if (prevVoice > 59)
    1798:	6833      	ldr	r3, [r6, #0]
    179a:	2b3b      	cmp	r3, #59	; 0x3b
    179c:	dc3f      	bgt.n	181e <HAL_SAI_TxHalfCpltCallback+0xde>
			frameLoadOverCount = 0;
    179e:	2200      	movs	r2, #0
    17a0:	4953      	ldr	r1, [pc, #332]	; (18f0 <HAL_SAI_TxHalfCpltCallback+0x1b0>)
    17a2:	4613      	mov	r3, r2
    17a4:	600a      	str	r2, [r1, #0]
			whichModel = 1;
    17a6:	4d53      	ldr	r5, [pc, #332]	; (18f4 <HAL_SAI_TxHalfCpltCallback+0x1b4>)
			audioOutBuffer[i] = 0;
    17a8:	2000      	movs	r0, #0
			whichModel = 1;
    17aa:	4a53      	ldr	r2, [pc, #332]	; (18f8 <HAL_SAI_TxHalfCpltCallback+0x1b8>)
			audioOutBuffer[i] = 0;
    17ac:	2100      	movs	r1, #0
			whichModel = 1;
    17ae:	7013      	strb	r3, [r2, #0]
    17b0:	462b      	mov	r3, r5
    17b2:	f505 6280 	add.w	r2, r5, #1024	; 0x400
			audioOutBuffer[i] = 0;
    17b6:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    17ba:	4293      	cmp	r3, r2
    17bc:	d1fb      	bne.n	17b6 <HAL_SAI_TxHalfCpltCallback+0x76>
	prevVoice = voice;
    17be:	6823      	ldr	r3, [r4, #0]
    17c0:	6033      	str	r3, [r6, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    17c2:	f3bf 8f4f 	dsb	sy
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    17c6:	4b4d      	ldr	r3, [pc, #308]	; (18fc <HAL_SAI_TxHalfCpltCallback+0x1bc>)
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17c8:	4a4d      	ldr	r2, [pc, #308]	; (1900 <HAL_SAI_TxHalfCpltCallback+0x1c0>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    17ca:	f103 0120 	add.w	r1, r3, #32
    17ce:	f103 0040 	add.w	r0, r3, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17d2:	f8c2 5270 	str.w	r5, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    17d6:	f103 0480 	add.w	r4, r3, #128	; 0x80
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17da:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
    17de:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    17e2:	f103 0160 	add.w	r1, r3, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17e6:	f8c2 0270 	str.w	r0, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    17ea:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17ee:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    17f2:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
    17f6:	33e0      	adds	r3, #224	; 0xe0
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17f8:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
    17fc:	f8c2 0270 	str.w	r0, [r2, #624]	; 0x270
    1800:	f8c2 1270 	str.w	r1, [r2, #624]	; 0x270
    1804:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
    1808:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    180c:	f3bf 8f6f 	isb	sy
}
    1810:	bd70      	pop	{r4, r5, r6, pc}
		audioFrameFunction(0);
    1812:	4b35      	ldr	r3, [pc, #212]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x1a8>)
    1814:	681b      	ldr	r3, [r3, #0]
    1816:	4798      	blx	r3
    1818:	e79a      	b.n	1750 <HAL_SAI_TxHalfCpltCallback+0x10>
    181a:	4d36      	ldr	r5, [pc, #216]	; (18f4 <HAL_SAI_TxHalfCpltCallback+0x1b4>)
    181c:	e7cf      	b.n	17be <HAL_SAI_TxHalfCpltCallback+0x7e>
				resetStringInputs = 1;
    181e:	4b39      	ldr	r3, [pc, #228]	; (1904 <HAL_SAI_TxHalfCpltCallback+0x1c4>)
    1820:	701a      	strb	r2, [r3, #0]
    1822:	e7bc      	b.n	179e <HAL_SAI_TxHalfCpltCallback+0x5e>
			audioFrameFunction = audioFrameWaiting;
    1824:	4b30      	ldr	r3, [pc, #192]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x1a8>)
    1826:	4a31      	ldr	r2, [pc, #196]	; (18ec <HAL_SAI_TxHalfCpltCallback+0x1ac>)
    1828:	601a      	str	r2, [r3, #0]
			audioSwitchToString2();
    182a:	f005 fab9 	bl	6da0 <audioSwitchToString2>
			currentActivePreset = voice;
    182e:	6823      	ldr	r3, [r4, #0]
    1830:	4a35      	ldr	r2, [pc, #212]	; (1908 <HAL_SAI_TxHalfCpltCallback+0x1c8>)
    1832:	b2db      	uxtb	r3, r3
    1834:	7013      	strb	r3, [r2, #0]
			resetStringInputs = 1;
    1836:	2201      	movs	r2, #1
    1838:	4b32      	ldr	r3, [pc, #200]	; (1904 <HAL_SAI_TxHalfCpltCallback+0x1c4>)
    183a:	701a      	strb	r2, [r3, #0]
			diskBusy = 0;
    183c:	2200      	movs	r2, #0
    183e:	2302      	movs	r3, #2
    1840:	702a      	strb	r2, [r5, #0]
			whichModel = 2;
    1842:	e7b0      	b.n	17a6 <HAL_SAI_TxHalfCpltCallback+0x66>
			audioFrameFunction = audioFrameWaiting;
    1844:	4b28      	ldr	r3, [pc, #160]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x1a8>)
    1846:	4a29      	ldr	r2, [pc, #164]	; (18ec <HAL_SAI_TxHalfCpltCallback+0x1ac>)
    1848:	601a      	str	r2, [r3, #0]
			audioSwitchToString1();
    184a:	f004 ff49 	bl	66e0 <audioSwitchToString1>
			currentActivePreset = voice;
    184e:	6823      	ldr	r3, [r4, #0]
    1850:	4a2d      	ldr	r2, [pc, #180]	; (1908 <HAL_SAI_TxHalfCpltCallback+0x1c8>)
    1852:	b2db      	uxtb	r3, r3
    1854:	7013      	strb	r3, [r2, #0]
			resetStringInputs = 1;
    1856:	2301      	movs	r3, #1
    1858:	4a2a      	ldr	r2, [pc, #168]	; (1904 <HAL_SAI_TxHalfCpltCallback+0x1c4>)
    185a:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    185c:	2200      	movs	r2, #0
    185e:	702a      	strb	r2, [r5, #0]
			whichModel = 1;
    1860:	e7a1      	b.n	17a6 <HAL_SAI_TxHalfCpltCallback+0x66>
			audioFrameFunction = audioFrameAdditive;
    1862:	4b21      	ldr	r3, [pc, #132]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x1a8>)
    1864:	4a29      	ldr	r2, [pc, #164]	; (190c <HAL_SAI_TxHalfCpltCallback+0x1cc>)
    1866:	601a      	str	r2, [r3, #0]
			audioSwitchToAdditive();
    1868:	f7ff f81a 	bl	8a0 <audioSwitchToAdditive>
			currentActivePreset = voice;
    186c:	6823      	ldr	r3, [r4, #0]
    186e:	4a26      	ldr	r2, [pc, #152]	; (1908 <HAL_SAI_TxHalfCpltCallback+0x1c8>)
    1870:	b2db      	uxtb	r3, r3
			presetReady = 1;
    1872:	4918      	ldr	r1, [pc, #96]	; (18d4 <HAL_SAI_TxHalfCpltCallback+0x194>)
			currentActivePreset = voice;
    1874:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    1876:	2200      	movs	r2, #0
			presetReady = 1;
    1878:	2301      	movs	r3, #1
			diskBusy = 0;
    187a:	702a      	strb	r2, [r5, #0]
			resetStringInputs = 1;
    187c:	4a21      	ldr	r2, [pc, #132]	; (1904 <HAL_SAI_TxHalfCpltCallback+0x1c4>)
			presetReady = 1;
    187e:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    1880:	7013      	strb	r3, [r2, #0]
			whichModel = 3;
    1882:	2303      	movs	r3, #3
    1884:	e78f      	b.n	17a6 <HAL_SAI_TxHalfCpltCallback+0x66>
			audioFrameFunction = audioFrameVocal;
    1886:	4b18      	ldr	r3, [pc, #96]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x1a8>)
    1888:	4a21      	ldr	r2, [pc, #132]	; (1910 <HAL_SAI_TxHalfCpltCallback+0x1d0>)
    188a:	601a      	str	r2, [r3, #0]
			audioSwitchToVocal();
    188c:	f009 ff18 	bl	b6c0 <audioSwitchToVocal>
			currentActivePreset = voice;
    1890:	6823      	ldr	r3, [r4, #0]
    1892:	4a1d      	ldr	r2, [pc, #116]	; (1908 <HAL_SAI_TxHalfCpltCallback+0x1c8>)
    1894:	b2db      	uxtb	r3, r3
			presetReady = 1;
    1896:	490f      	ldr	r1, [pc, #60]	; (18d4 <HAL_SAI_TxHalfCpltCallback+0x194>)
			currentActivePreset = voice;
    1898:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    189a:	2200      	movs	r2, #0
			presetReady = 1;
    189c:	2301      	movs	r3, #1
			diskBusy = 0;
    189e:	702a      	strb	r2, [r5, #0]
			resetStringInputs = 1;
    18a0:	4a18      	ldr	r2, [pc, #96]	; (1904 <HAL_SAI_TxHalfCpltCallback+0x1c4>)
			presetReady = 1;
    18a2:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    18a4:	7013      	strb	r3, [r2, #0]
			whichModel = 4;
    18a6:	2304      	movs	r3, #4
    18a8:	e77d      	b.n	17a6 <HAL_SAI_TxHalfCpltCallback+0x66>
			audioFrameFunction = audioFrameString3;
    18aa:	4b0f      	ldr	r3, [pc, #60]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x1a8>)
    18ac:	4a19      	ldr	r2, [pc, #100]	; (1914 <HAL_SAI_TxHalfCpltCallback+0x1d4>)
    18ae:	601a      	str	r2, [r3, #0]
			audioSwitchToString3();
    18b0:	f005 fff6 	bl	78a0 <audioSwitchToString3>
			currentActivePreset = voice;
    18b4:	6823      	ldr	r3, [r4, #0]
    18b6:	4a14      	ldr	r2, [pc, #80]	; (1908 <HAL_SAI_TxHalfCpltCallback+0x1c8>)
    18b8:	b2db      	uxtb	r3, r3
			presetReady = 1;
    18ba:	4906      	ldr	r1, [pc, #24]	; (18d4 <HAL_SAI_TxHalfCpltCallback+0x194>)
			currentActivePreset = voice;
    18bc:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    18be:	2200      	movs	r2, #0
			presetReady = 1;
    18c0:	2301      	movs	r3, #1
			diskBusy = 0;
    18c2:	702a      	strb	r2, [r5, #0]
			resetStringInputs = 1;
    18c4:	4a0f      	ldr	r2, [pc, #60]	; (1904 <HAL_SAI_TxHalfCpltCallback+0x1c4>)
			presetReady = 1;
    18c6:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    18c8:	7013      	strb	r3, [r2, #0]
			whichModel = 5;
    18ca:	2305      	movs	r3, #5
    18cc:	e76b      	b.n	17a6 <HAL_SAI_TxHalfCpltCallback+0x66>
    18ce:	bf00      	nop
    18d0:	20014490 	.word	0x20014490
    18d4:	2000534c 	.word	0x2000534c
    18d8:	20014250 	.word	0x20014250
    18dc:	2000069c 	.word	0x2000069c
    18e0:	2001a470 	.word	0x2001a470
    18e4:	2001a46e 	.word	0x2001a46e
    18e8:	2000118c 	.word	0x2000118c
    18ec:	00001361 	.word	0x00001361
    18f0:	200051c8 	.word	0x200051c8
    18f4:	30000000 	.word	0x30000000
    18f8:	2001ca75 	.word	0x2001ca75
    18fc:	30000020 	.word	0x30000020
    1900:	e000ed00 	.word	0xe000ed00
    1904:	20005771 	.word	0x20005771
    1908:	200006a5 	.word	0x200006a5
    190c:	00000cc1 	.word	0x00000cc1
    1910:	0000b8c1 	.word	0x0000b8c1
    1914:	00007b21 	.word	0x00007b21
    1918:	f3af 8000 	nop.w
    191c:	f3af 8000 	nop.w

00001920 <HAL_SAI_ErrorCallback>:
}
    1920:	4770      	bx	lr
    1922:	bf00      	nop
	...

00001940 <scaleDefault>:
}
    1940:	4770      	bx	lr
    1942:	bf00      	nop
    1944:	f3af 8000 	nop.w
    1948:	f3af 8000 	nop.w
    194c:	f3af 8000 	nop.w
    1950:	f3af 8000 	nop.w
    1954:	f3af 8000 	nop.w
    1958:	f3af 8000 	nop.w
    195c:	f3af 8000 	nop.w

00001960 <scaleOscPitch>:
	return ((input * 2.0f) - 1.0f);
    1960:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    1964:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
    1968:	eee0 7a07 	vfma.f32	s15, s0, s14
    196c:	eeb0 0a67 	vmov.f32	s0, s15
    1970:	4770      	bx	lr
    1972:	bf00      	nop
    1974:	f3af 8000 	nop.w
    1978:	f3af 8000 	nop.w
    197c:	f3af 8000 	nop.w

00001980 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    1980:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1994 <scaleOscFine+0x14>
    1984:	eddf 7a04 	vldr	s15, [pc, #16]	; 1998 <scaleOscFine+0x18>
}
    1988:	eee0 7a07 	vfma.f32	s15, s0, s14
    198c:	eeb0 0a67 	vmov.f32	s0, s15
    1990:	4770      	bx	lr
    1992:	bf00      	nop
    1994:	43480000 	.word	0x43480000
    1998:	c2c80000 	.word	0xc2c80000
    199c:	f3af 8000 	nop.w

000019a0 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    19a0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 19b4 <scaleOscFreq+0x14>
    19a4:	eddf 7a04 	vldr	s15, [pc, #16]	; 19b8 <scaleOscFreq+0x18>
}
    19a8:	eee0 7a07 	vfma.f32	s15, s0, s14
    19ac:	eeb0 0a67 	vmov.f32	s0, s15
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop
    19b4:	457a0000 	.word	0x457a0000
    19b8:	c4fa0000 	.word	0xc4fa0000
    19bc:	f3af 8000 	nop.w

000019c0 <scaleFilterCutoff>:
	return (input * 127.0f);
    19c0:	eddf 7a02 	vldr	s15, [pc, #8]	; 19cc <scaleFilterCutoff+0xc>
}
    19c4:	ee20 0a27 	vmul.f32	s0, s0, s15
    19c8:	4770      	bx	lr
    19ca:	bf00      	nop
    19cc:	42fe0000 	.word	0x42fe0000
    19d0:	f3af 8000 	nop.w
    19d4:	f3af 8000 	nop.w
    19d8:	f3af 8000 	nop.w
    19dc:	f3af 8000 	nop.w

000019e0 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    19e0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 19f4 <scaleFinalLowpass+0x14>
    19e4:	eddf 7a04 	vldr	s15, [pc, #16]	; 19f8 <scaleFinalLowpass+0x18>
}
    19e8:	eee0 7a07 	vfma.f32	s15, s0, s14
    19ec:	eeb0 0a67 	vmov.f32	s0, s15
    19f0:	4770      	bx	lr
    19f2:	bf00      	nop
    19f4:	428c0000 	.word	0x428c0000
    19f8:	42680000 	.word	0x42680000
    19fc:	f3af 8000 	nop.w

00001a00 <blankFunction>:
}
    1a00:	4770      	bx	lr
    1a02:	bf00      	nop
    1a04:	f3af 8000 	nop.w
    1a08:	f3af 8000 	nop.w
    1a0c:	f3af 8000 	nop.w
    1a10:	f3af 8000 	nop.w
    1a14:	f3af 8000 	nop.w
    1a18:	f3af 8000 	nop.w
    1a1c:	f3af 8000 	nop.w

00001a20 <scaleTranspose>:
{
    1a20:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    1a24:	ed9f 0a07 	vldr	s0, [pc, #28]	; 1a44 <scaleTranspose+0x24>
    1a28:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    1a2c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    1a2e:	f00a fa0b 	bl	be48 <__LEAF_clip_veneer>
	return (input * 96.0f) - 48.0f;
    1a32:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1a48 <scaleTranspose+0x28>
    1a36:	eddf 7a05 	vldr	s15, [pc, #20]	; 1a4c <scaleTranspose+0x2c>
}
    1a3a:	eee0 7a07 	vfma.f32	s15, s0, s14
    1a3e:	eeb0 0a67 	vmov.f32	s0, s15
    1a42:	bd08      	pop	{r3, pc}
    1a44:	00000000 	.word	0x00000000
    1a48:	42c00000 	.word	0x42c00000
    1a4c:	c2400000 	.word	0xc2400000
    1a50:	f3af 8000 	nop.w
    1a54:	f3af 8000 	nop.w
    1a58:	f3af 8000 	nop.w
    1a5c:	f3af 8000 	nop.w

00001a60 <scalePitchBend>:
{
    1a60:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    1a64:	ed9f 0a05 	vldr	s0, [pc, #20]	; 1a7c <scalePitchBend+0x1c>
    1a68:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    1a6c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    1a6e:	f00a f9eb 	bl	be48 <__LEAF_clip_veneer>
	return (input * 48.0f);
    1a72:	eddf 7a03 	vldr	s15, [pc, #12]	; 1a80 <scalePitchBend+0x20>
}
    1a76:	ee20 0a27 	vmul.f32	s0, s0, s15
    1a7a:	bd08      	pop	{r3, pc}
    1a7c:	00000000 	.word	0x00000000
    1a80:	42400000 	.word	0x42400000
    1a84:	f3af 8000 	nop.w
    1a88:	f3af 8000 	nop.w
    1a8c:	f3af 8000 	nop.w
    1a90:	f3af 8000 	nop.w
    1a94:	f3af 8000 	nop.w
    1a98:	f3af 8000 	nop.w
    1a9c:	f3af 8000 	nop.w

00001aa0 <scaleFilterResonance>:
{
    1aa0:	b510      	push	{r4, lr}
    1aa2:	ed2d 8b02 	vpush	{d8}
    1aa6:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1aaa:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 1b18 <scaleFilterResonance+0x78>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1aae:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 1b1c <scaleFilterResonance+0x7c>
	input *= 2047.0f;
    1ab2:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1ab6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1aba:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1abe:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ac2:	1c63      	adds	r3, r4, #1
    1ac4:	ee00 3a90 	vmov	s1, r3
    1ac8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1acc:	f00a f9bc 	bl	be48 <__LEAF_clip_veneer>
    1ad0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1ad4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1ad8:	4b11      	ldr	r3, [pc, #68]	; (1b20 <scaleFilterResonance+0x80>)
	float inputFloat = (float)inputInt - input;
    1ada:	ee78 0ac8 	vsub.f32	s1, s17, s16
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1ade:	ed9f 0a11 	vldr	s0, [pc, #68]	; 1b24 <scaleFilterResonance+0x84>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ae2:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1ae6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1aea:	ee38 8a27 	vadd.f32	s16, s16, s15
    1aee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1af2:	edd4 7a00 	vldr	s15, [r4]
    1af6:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    1afa:	ed93 7a00 	vldr	s14, [r3]
    1afe:	ee38 8a68 	vsub.f32	s16, s16, s17
    1b02:	ee60 0a87 	vmul.f32	s1, s1, s14
    1b06:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    1b0a:	ecbd 8b02 	vpop	{d8}
    1b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1b12:	f00a b999 	b.w	be48 <__LEAF_clip_veneer>
    1b16:	bf00      	nop
    1b18:	44ffe000 	.word	0x44ffe000
    1b1c:	00000000 	.word	0x00000000
    1b20:	2001a8d0 	.word	0x2001a8d0
    1b24:	3dcccccd 	.word	0x3dcccccd
    1b28:	f3af 8000 	nop.w
    1b2c:	f3af 8000 	nop.w
    1b30:	f3af 8000 	nop.w
    1b34:	f3af 8000 	nop.w
    1b38:	f3af 8000 	nop.w
    1b3c:	f3af 8000 	nop.w

00001b40 <scaleEnvTimes>:
{
    1b40:	b510      	push	{r4, lr}
    1b42:	ed2d 8b02 	vpush	{d8}
    1b46:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1b4a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1ba8 <scaleEnvTimes+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1b4e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1bac <scaleEnvTimes+0x6c>
	input *= 2047.0f;
    1b52:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1b56:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1b5a:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1b5e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1b62:	1c63      	adds	r3, r4, #1
    1b64:	ee00 3a90 	vmov	s1, r3
    1b68:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1b6c:	f00a f96c 	bl	be48 <__LEAF_clip_veneer>
    1b70:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1b74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1b78:	4b0d      	ldr	r3, [pc, #52]	; (1bb0 <scaleEnvTimes+0x70>)
	float inputFloat = (float)inputInt - input;
    1b7a:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1b7e:	ee10 2a10 	vmov	r2, s0
    1b82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1b86:	ee38 8a07 	vadd.f32	s16, s16, s14
    1b8a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1b8e:	ed94 7a00 	vldr	s14, [r4]
    1b92:	edd3 6a00 	vldr	s13, [r3]
    1b96:	ee38 8a68 	vsub.f32	s16, s16, s17
    1b9a:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    1b9e:	eea7 0a08 	vfma.f32	s0, s14, s16
    1ba2:	ecbd 8b02 	vpop	{d8}
    1ba6:	bd10      	pop	{r4, pc}
    1ba8:	44ffe000 	.word	0x44ffe000
    1bac:	00000000 	.word	0x00000000
    1bb0:	200144e8 	.word	0x200144e8
    1bb4:	f3af 8000 	nop.w
    1bb8:	f3af 8000 	nop.w
    1bbc:	f3af 8000 	nop.w

00001bc0 <scaleLFORates>:
{
    1bc0:	b510      	push	{r4, lr}
    1bc2:	ed2d 8b02 	vpush	{d8}
    1bc6:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1bca:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1c28 <scaleLFORates+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1bce:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1c2c <scaleLFORates+0x6c>
	input *= 2047.0f;
    1bd2:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1bd6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1bda:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1bde:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1be2:	1c63      	adds	r3, r4, #1
    1be4:	ee00 3a90 	vmov	s1, r3
    1be8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1bec:	f00a f92c 	bl	be48 <__LEAF_clip_veneer>
    1bf0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1bf8:	4b0d      	ldr	r3, [pc, #52]	; (1c30 <scaleLFORates+0x70>)
	float inputFloat = (float)inputInt - input;
    1bfa:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1bfe:	ee10 2a10 	vmov	r2, s0
    1c02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1c06:	ee38 8a07 	vadd.f32	s16, s16, s14
    1c0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1c0e:	ed94 7a00 	vldr	s14, [r4]
    1c12:	edd3 6a00 	vldr	s13, [r3]
    1c16:	ee38 8a68 	vsub.f32	s16, s16, s17
    1c1a:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    1c1e:	eea7 0a08 	vfma.f32	s0, s14, s16
    1c22:	ecbd 8b02 	vpop	{d8}
    1c26:	bd10      	pop	{r4, pc}
    1c28:	44ffe000 	.word	0x44ffe000
    1c2c:	00000000 	.word	0x00000000
    1c30:	20016644 	.word	0x20016644
    1c34:	f3af 8000 	nop.w
    1c38:	f3af 8000 	nop.w
    1c3c:	f3af 8000 	nop.w

00001c40 <randomNumber>:
	return random_values[currentRandom++];
    1c40:	4a04      	ldr	r2, [pc, #16]	; (1c54 <randomNumber+0x14>)
    1c42:	4b05      	ldr	r3, [pc, #20]	; (1c58 <randomNumber+0x18>)
    1c44:	7811      	ldrb	r1, [r2, #0]
    1c46:	1c48      	adds	r0, r1, #1
    1c48:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1c4c:	7010      	strb	r0, [r2, #0]
}
    1c4e:	ed93 0a00 	vldr	s0, [r3]
    1c52:	4770      	bx	lr
    1c54:	20014454 	.word	0x20014454
    1c58:	2001a4cc 	.word	0x2001a4cc
    1c5c:	f3af 8000 	nop.w

00001c60 <scaleTwo>:
}
    1c60:	ee30 0a00 	vadd.f32	s0, s0, s0
    1c64:	4770      	bx	lr
    1c66:	bf00      	nop
    1c68:	f3af 8000 	nop.w
    1c6c:	f3af 8000 	nop.w
    1c70:	f3af 8000 	nop.w
    1c74:	f3af 8000 	nop.w
    1c78:	f3af 8000 	nop.w
    1c7c:	f3af 8000 	nop.w

00001c80 <parsePreset>:
{
    1c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	currentPresetSize = size;
    1c84:	4bf0      	ldr	r3, [pc, #960]	; (2048 <parsePreset+0x3c8>)
{
    1c86:	ed2d 8b02 	vpush	{d8}
    1c8a:	b08d      	sub	sp, #52	; 0x34
	currentPresetSize = size;
    1c8c:	6018      	str	r0, [r3, #0]
{
    1c8e:	e9cd 0101 	strd	r0, r1, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1c92:	b672      	cpsid	i
	 presetReady = 0;
    1c94:	2400      	movs	r4, #0
    1c96:	4bed      	ldr	r3, [pc, #948]	; (204c <parsePreset+0x3cc>)
		 audioOutBuffer[i] = 0;
    1c98:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1c9c:	48ec      	ldr	r0, [pc, #944]	; (2050 <parsePreset+0x3d0>)
    1c9e:	4621      	mov	r1, r4
	 presetReady = 0;
    1ca0:	601c      	str	r4, [r3, #0]
	if (buffer[bufferIndex] == 17)
    1ca2:	f8df 93c8 	ldr.w	r9, [pc, #968]	; 206c <parsePreset+0x3ec>
		 audioOutBuffer[i] = 0;
    1ca6:	f00a f957 	bl	bf58 <__memset_veneer>
	audioMasterLevel = 0.0f;
    1caa:	2200      	movs	r2, #0
    1cac:	49e9      	ldr	r1, [pc, #932]	; (2054 <parsePreset+0x3d4>)
	chorusAssignment = 255;
    1cae:	23ff      	movs	r3, #255	; 0xff
	if (buffer[bufferIndex] == 17)
    1cb0:	f899 6000 	ldrb.w	r6, [r9]
	audioMasterLevel = 0.0f;
    1cb4:	600a      	str	r2, [r1, #0]
	chorusAssignment = 255;
    1cb6:	4ae8      	ldr	r2, [pc, #928]	; (2058 <parsePreset+0x3d8>)
	if (buffer[bufferIndex] == 17)
    1cb8:	2e11      	cmp	r6, #17
	chorusAssignment = 255;
    1cba:	7013      	strb	r3, [r2, #0]
	delayAssignment = 255;
    1cbc:	4ae7      	ldr	r2, [pc, #924]	; (205c <parsePreset+0x3dc>)
    1cbe:	7013      	strb	r3, [r2, #0]
	if (buffer[bufferIndex] == 17)
    1cc0:	f000 84d1 	beq.w	2666 <parsePreset+0x9e6>
	uint16_t bufferIndex = 0;
    1cc4:	4623      	mov	r3, r4
		if (buffer[bufferIndex + 1] == 18)
    1cc6:	f899 7001 	ldrb.w	r7, [r9, #1]
	uint16_t presetVersionNumber = 0;
    1cca:	46a2      	mov	sl, r4
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1ccc:	1c9a      	adds	r2, r3, #2
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cce:	9902      	ldr	r1, [sp, #8]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1cd0:	f819 2002 	ldrb.w	r2, [r9, r2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cd4:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1cd8:	9203      	str	r2, [sp, #12]
    1cda:	1cda      	adds	r2, r3, #3
    1cdc:	f819 8002 	ldrb.w	r8, [r9, r2]
    1ce0:	1d1a      	adds	r2, r3, #4
    1ce2:	f819 0002 	ldrb.w	r0, [r9, r2]
    1ce6:	1d5a      	adds	r2, r3, #5
    1ce8:	f819 2002 	ldrb.w	r2, [r9, r2]
    1cec:	9004      	str	r0, [sp, #16]
    1cee:	9205      	str	r2, [sp, #20]
    1cf0:	1d9a      	adds	r2, r3, #6
    1cf2:	f819 0002 	ldrb.w	r0, [r9, r2]
    1cf6:	1dda      	adds	r2, r3, #7
    1cf8:	f819 b002 	ldrb.w	fp, [r9, r2]
    1cfc:	f103 0208 	add.w	r2, r3, #8
    1d00:	9006      	str	r0, [sp, #24]
    1d02:	20c8      	movs	r0, #200	; 0xc8
    1d04:	f819 5002 	ldrb.w	r5, [r9, r2]
    1d08:	f103 0209 	add.w	r2, r3, #9
    1d0c:	fb01 f000 	mul.w	r0, r1, r0
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d10:	49d3      	ldr	r1, [pc, #844]	; (2060 <parsePreset+0x3e0>)
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d12:	f819 e002 	ldrb.w	lr, [r9, r2]
    1d16:	f103 020a 	add.w	r2, r3, #10
    1d1a:	9507      	str	r5, [sp, #28]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d1c:	460d      	mov	r5, r1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d1e:	f819 c002 	ldrb.w	ip, [r9, r2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d22:	eb01 0144 	add.w	r1, r1, r4, lsl #1
		presetName[i] = buffer[bufferIndex];
    1d26:	4acf      	ldr	r2, [pc, #828]	; (2064 <parsePreset+0x3e4>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d28:	0064      	lsls	r4, r4, #1
		presetName[i] = buffer[bufferIndex];
    1d2a:	7016      	strb	r6, [r2, #0]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d2c:	552e      	strb	r6, [r5, r4]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d2e:	f103 060b 	add.w	r6, r3, #11
		presetName[i] = buffer[bufferIndex];
    1d32:	9c03      	ldr	r4, [sp, #12]
    1d34:	7057      	strb	r7, [r2, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d36:	704f      	strb	r7, [r1, #1]
		presetName[i] = buffer[bufferIndex];
    1d38:	7094      	strb	r4, [r2, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d3a:	708c      	strb	r4, [r1, #2]
		presetName[i] = buffer[bufferIndex];
    1d3c:	9c04      	ldr	r4, [sp, #16]
    1d3e:	f882 8003 	strb.w	r8, [r2, #3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d42:	f881 8003 	strb.w	r8, [r1, #3]
		presetName[i] = buffer[bufferIndex];
    1d46:	7114      	strb	r4, [r2, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d48:	710c      	strb	r4, [r1, #4]
		presetName[i] = buffer[bufferIndex];
    1d4a:	9c05      	ldr	r4, [sp, #20]
    1d4c:	7154      	strb	r4, [r2, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d4e:	714c      	strb	r4, [r1, #5]
		presetName[i] = buffer[bufferIndex];
    1d50:	9c06      	ldr	r4, [sp, #24]
    1d52:	7194      	strb	r4, [r2, #6]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d54:	718c      	strb	r4, [r1, #6]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d56:	f819 7006 	ldrb.w	r7, [r9, r6]
    1d5a:	f103 060c 	add.w	r6, r3, #12
		presetName[i] = buffer[bufferIndex];
    1d5e:	9c07      	ldr	r4, [sp, #28]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d60:	f819 6006 	ldrb.w	r6, [r9, r6]
		presetName[i] = buffer[bufferIndex];
    1d64:	f882 b007 	strb.w	fp, [r2, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d68:	f881 b007 	strb.w	fp, [r1, #7]
		presetName[i] = buffer[bufferIndex];
    1d6c:	7214      	strb	r4, [r2, #8]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d6e:	720c      	strb	r4, [r1, #8]
		presetName[i] = buffer[bufferIndex];
    1d70:	f882 e009 	strb.w	lr, [r2, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d74:	f881 e009 	strb.w	lr, [r1, #9]
		presetName[i] = buffer[bufferIndex];
    1d78:	f882 c00a 	strb.w	ip, [r2, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d7c:	f881 c00a 	strb.w	ip, [r1, #10]
		presetName[i] = buffer[bufferIndex];
    1d80:	72d7      	strb	r7, [r2, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d82:	72cf      	strb	r7, [r1, #11]
		presetName[i] = buffer[bufferIndex];
    1d84:	7316      	strb	r6, [r2, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d86:	730e      	strb	r6, [r1, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d88:	f103 060d 	add.w	r6, r3, #13
    1d8c:	4cb6      	ldr	r4, [pc, #728]	; (2068 <parsePreset+0x3e8>)
    1d8e:	f819 6006 	ldrb.w	r6, [r9, r6]
		presetName[i] = buffer[bufferIndex];
    1d92:	7356      	strb	r6, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d94:	f103 020e 	add.w	r2, r3, #14
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d98:	734e      	strb	r6, [r1, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d9a:	f103 010f 	add.w	r1, r3, #15
    1d9e:	f819 2002 	ldrb.w	r2, [r9, r2]
    1da2:	f819 1001 	ldrb.w	r1, [r9, r1]
    1da6:	5422      	strb	r2, [r4, r0]
    1da8:	1822      	adds	r2, r4, r0
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    1daa:	f103 007e 	add.w	r0, r3, #126	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1dae:	7051      	strb	r1, [r2, #1]
    1db0:	f103 0110 	add.w	r1, r3, #16
    1db4:	f819 1001 	ldrb.w	r1, [r9, r1]
    1db8:	7091      	strb	r1, [r2, #2]
    1dba:	f103 0111 	add.w	r1, r3, #17
    1dbe:	f819 1001 	ldrb.w	r1, [r9, r1]
    1dc2:	70d1      	strb	r1, [r2, #3]
    1dc4:	f103 0112 	add.w	r1, r3, #18
    1dc8:	f819 1001 	ldrb.w	r1, [r9, r1]
    1dcc:	7111      	strb	r1, [r2, #4]
    1dce:	f103 0113 	add.w	r1, r3, #19
    1dd2:	f819 1001 	ldrb.w	r1, [r9, r1]
    1dd6:	7151      	strb	r1, [r2, #5]
    1dd8:	f103 0114 	add.w	r1, r3, #20
    1ddc:	f819 1001 	ldrb.w	r1, [r9, r1]
    1de0:	7191      	strb	r1, [r2, #6]
    1de2:	f103 0115 	add.w	r1, r3, #21
    1de6:	f819 1001 	ldrb.w	r1, [r9, r1]
    1dea:	71d1      	strb	r1, [r2, #7]
    1dec:	f103 0116 	add.w	r1, r3, #22
    1df0:	f819 1001 	ldrb.w	r1, [r9, r1]
    1df4:	7211      	strb	r1, [r2, #8]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1df6:	f103 0117 	add.w	r1, r3, #23
    1dfa:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1dfe:	7291      	strb	r1, [r2, #10]
    1e00:	f103 0118 	add.w	r1, r3, #24
    1e04:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e08:	72d1      	strb	r1, [r2, #11]
    1e0a:	f103 0119 	add.w	r1, r3, #25
    1e0e:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e12:	7311      	strb	r1, [r2, #12]
    1e14:	f103 011a 	add.w	r1, r3, #26
    1e18:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e1c:	7351      	strb	r1, [r2, #13]
    1e1e:	f103 011b 	add.w	r1, r3, #27
    1e22:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e26:	7391      	strb	r1, [r2, #14]
    1e28:	f103 011c 	add.w	r1, r3, #28
    1e2c:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e30:	73d1      	strb	r1, [r2, #15]
    1e32:	f103 011d 	add.w	r1, r3, #29
    1e36:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e3a:	7411      	strb	r1, [r2, #16]
    1e3c:	f103 011e 	add.w	r1, r3, #30
    1e40:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e44:	7451      	strb	r1, [r2, #17]
    1e46:	f103 011f 	add.w	r1, r3, #31
    1e4a:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e4e:	7491      	strb	r1, [r2, #18]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1e50:	f103 0120 	add.w	r1, r3, #32
    1e54:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1e58:	7511      	strb	r1, [r2, #20]
    1e5a:	f103 0121 	add.w	r1, r3, #33	; 0x21
    1e5e:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e62:	7551      	strb	r1, [r2, #21]
    1e64:	f103 0122 	add.w	r1, r3, #34	; 0x22
    1e68:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e6c:	7591      	strb	r1, [r2, #22]
    1e6e:	f103 0123 	add.w	r1, r3, #35	; 0x23
    1e72:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e76:	75d1      	strb	r1, [r2, #23]
    1e78:	f103 0124 	add.w	r1, r3, #36	; 0x24
    1e7c:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e80:	7611      	strb	r1, [r2, #24]
    1e82:	f103 0125 	add.w	r1, r3, #37	; 0x25
    1e86:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e8a:	7651      	strb	r1, [r2, #25]
    1e8c:	f103 0126 	add.w	r1, r3, #38	; 0x26
    1e90:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e94:	7691      	strb	r1, [r2, #26]
    1e96:	f103 0127 	add.w	r1, r3, #39	; 0x27
    1e9a:	f819 1001 	ldrb.w	r1, [r9, r1]
    1e9e:	76d1      	strb	r1, [r2, #27]
    1ea0:	f103 0128 	add.w	r1, r3, #40	; 0x28
    1ea4:	f819 1001 	ldrb.w	r1, [r9, r1]
    1ea8:	7711      	strb	r1, [r2, #28]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1eaa:	f103 0129 	add.w	r1, r3, #41	; 0x29
    1eae:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1eb2:	7791      	strb	r1, [r2, #30]
    1eb4:	f103 012a 	add.w	r1, r3, #42	; 0x2a
    1eb8:	f819 1001 	ldrb.w	r1, [r9, r1]
    1ebc:	77d1      	strb	r1, [r2, #31]
    1ebe:	f103 012b 	add.w	r1, r3, #43	; 0x2b
    1ec2:	f819 1001 	ldrb.w	r1, [r9, r1]
    1ec6:	f882 1020 	strb.w	r1, [r2, #32]
    1eca:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    1ece:	f819 1001 	ldrb.w	r1, [r9, r1]
    1ed2:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
    1ed6:	f103 012d 	add.w	r1, r3, #45	; 0x2d
    1eda:	f819 1001 	ldrb.w	r1, [r9, r1]
    1ede:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1ee2:	f103 012e 	add.w	r1, r3, #46	; 0x2e
    1ee6:	f819 1001 	ldrb.w	r1, [r9, r1]
    1eea:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    1eee:	f103 012f 	add.w	r1, r3, #47	; 0x2f
    1ef2:	f819 1001 	ldrb.w	r1, [r9, r1]
    1ef6:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    1efa:	f103 0130 	add.w	r1, r3, #48	; 0x30
    1efe:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f02:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
    1f06:	f103 0131 	add.w	r1, r3, #49	; 0x31
    1f0a:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f0e:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1f12:	f103 0132 	add.w	r1, r3, #50	; 0x32
    1f16:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1f1a:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    1f1e:	f103 0133 	add.w	r1, r3, #51	; 0x33
    1f22:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f26:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    1f2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
    1f2e:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f32:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    1f36:	f103 0135 	add.w	r1, r3, #53	; 0x35
    1f3a:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f3e:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    1f42:	f103 0136 	add.w	r1, r3, #54	; 0x36
    1f46:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f4a:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
    1f4e:	f103 0137 	add.w	r1, r3, #55	; 0x37
    1f52:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f56:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
    1f5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
    1f5e:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f62:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
    1f66:	f103 0139 	add.w	r1, r3, #57	; 0x39
    1f6a:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f6e:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
    1f72:	f103 013a 	add.w	r1, r3, #58	; 0x3a
    1f76:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f7a:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1f7e:	f103 013b 	add.w	r1, r3, #59	; 0x3b
    1f82:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1f86:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
    1f8a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    1f8e:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f92:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
    1f96:	f103 013d 	add.w	r1, r3, #61	; 0x3d
    1f9a:	f819 1001 	ldrb.w	r1, [r9, r1]
    1f9e:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
    1fa2:	f103 013e 	add.w	r1, r3, #62	; 0x3e
    1fa6:	f819 1001 	ldrb.w	r1, [r9, r1]
    1faa:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
    1fae:	f103 013f 	add.w	r1, r3, #63	; 0x3f
    1fb2:	f819 1001 	ldrb.w	r1, [r9, r1]
    1fb6:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
    1fba:	f103 0140 	add.w	r1, r3, #64	; 0x40
    1fbe:	f819 1001 	ldrb.w	r1, [r9, r1]
    1fc2:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
    1fc6:	f103 0141 	add.w	r1, r3, #65	; 0x41
    1fca:	f819 1001 	ldrb.w	r1, [r9, r1]
    1fce:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
    1fd2:	f103 0142 	add.w	r1, r3, #66	; 0x42
    1fd6:	f819 1001 	ldrb.w	r1, [r9, r1]
    1fda:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
    1fde:	f103 0143 	add.w	r1, r3, #67	; 0x43
    1fe2:	f819 1001 	ldrb.w	r1, [r9, r1]
    1fe6:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1fea:	f103 0144 	add.w	r1, r3, #68	; 0x44
    1fee:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1ff2:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
    1ff6:	f103 0145 	add.w	r1, r3, #69	; 0x45
    1ffa:	f819 1001 	ldrb.w	r1, [r9, r1]
    1ffe:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    2002:	f103 0146 	add.w	r1, r3, #70	; 0x46
    2006:	f819 1001 	ldrb.w	r1, [r9, r1]
    200a:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
    200e:	f103 0147 	add.w	r1, r3, #71	; 0x47
    2012:	f819 1001 	ldrb.w	r1, [r9, r1]
    2016:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    201a:	f103 0148 	add.w	r1, r3, #72	; 0x48
    201e:	f819 1001 	ldrb.w	r1, [r9, r1]
    2022:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    2026:	f103 0149 	add.w	r1, r3, #73	; 0x49
    202a:	f819 1001 	ldrb.w	r1, [r9, r1]
    202e:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
    2032:	f103 014a 	add.w	r1, r3, #74	; 0x4a
    2036:	f819 1001 	ldrb.w	r1, [r9, r1]
    203a:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
    203e:	f103 014b 	add.w	r1, r3, #75	; 0x4b
    2042:	f819 1001 	ldrb.w	r1, [r9, r1]
    2046:	e013      	b.n	2070 <parsePreset+0x3f0>
    2048:	20014450 	.word	0x20014450
    204c:	2000534c 	.word	0x2000534c
    2050:	30000000 	.word	0x30000000
    2054:	200006a0 	.word	0x200006a0
    2058:	200006a4 	.word	0x200006a4
    205c:	200006ac 	.word	0x200006ac
    2060:	30042000 	.word	0x30042000
    2064:	2001a460 	.word	0x2001a460
    2068:	30043380 	.word	0x30043380
    206c:	30042380 	.word	0x30042380
    2070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    2074:	f103 014c 	add.w	r1, r3, #76	; 0x4c
    2078:	f819 1001 	ldrb.w	r1, [r9, r1]
    207c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    2080:	f103 014d 	add.w	r1, r3, #77	; 0x4d
    2084:	f819 1001 	ldrb.w	r1, [r9, r1]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2088:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
    208c:	f103 014e 	add.w	r1, r3, #78	; 0x4e
    2090:	f819 1001 	ldrb.w	r1, [r9, r1]
    2094:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
    2098:	f103 014f 	add.w	r1, r3, #79	; 0x4f
    209c:	f819 1001 	ldrb.w	r1, [r9, r1]
    20a0:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
    20a4:	f103 0150 	add.w	r1, r3, #80	; 0x50
    20a8:	f819 1001 	ldrb.w	r1, [r9, r1]
    20ac:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
    20b0:	f103 0151 	add.w	r1, r3, #81	; 0x51
    20b4:	f819 1001 	ldrb.w	r1, [r9, r1]
    20b8:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
    20bc:	f103 0152 	add.w	r1, r3, #82	; 0x52
    20c0:	f819 1001 	ldrb.w	r1, [r9, r1]
    20c4:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
    20c8:	f103 0153 	add.w	r1, r3, #83	; 0x53
    20cc:	f819 1001 	ldrb.w	r1, [r9, r1]
    20d0:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
    20d4:	f103 0154 	add.w	r1, r3, #84	; 0x54
    20d8:	f819 1001 	ldrb.w	r1, [r9, r1]
    20dc:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
    20e0:	f103 0155 	add.w	r1, r3, #85	; 0x55
    20e4:	f819 1001 	ldrb.w	r1, [r9, r1]
    20e8:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    20ec:	f103 0156 	add.w	r1, r3, #86	; 0x56
    20f0:	f819 1001 	ldrb.w	r1, [r9, r1]
    20f4:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
    20f8:	f103 0157 	add.w	r1, r3, #87	; 0x57
    20fc:	f819 1001 	ldrb.w	r1, [r9, r1]
    2100:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    2104:	f103 0158 	add.w	r1, r3, #88	; 0x58
    2108:	f819 1001 	ldrb.w	r1, [r9, r1]
    210c:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
    2110:	f103 0159 	add.w	r1, r3, #89	; 0x59
    2114:	f819 1001 	ldrb.w	r1, [r9, r1]
    2118:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
    211c:	f103 015a 	add.w	r1, r3, #90	; 0x5a
    2120:	f819 1001 	ldrb.w	r1, [r9, r1]
    2124:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
    2128:	f103 015b 	add.w	r1, r3, #91	; 0x5b
    212c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2130:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
    2134:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    2138:	f819 1001 	ldrb.w	r1, [r9, r1]
    213c:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
    2140:	f103 015d 	add.w	r1, r3, #93	; 0x5d
    2144:	f819 1001 	ldrb.w	r1, [r9, r1]
    2148:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
    214c:	f103 015e 	add.w	r1, r3, #94	; 0x5e
    2150:	f819 1001 	ldrb.w	r1, [r9, r1]
    2154:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
    2158:	f103 015f 	add.w	r1, r3, #95	; 0x5f
    215c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2160:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
    2164:	f103 0160 	add.w	r1, r3, #96	; 0x60
    2168:	f819 1001 	ldrb.w	r1, [r9, r1]
    216c:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
    2170:	f103 0161 	add.w	r1, r3, #97	; 0x61
    2174:	f819 1001 	ldrb.w	r1, [r9, r1]
    2178:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
    217c:	f103 0162 	add.w	r1, r3, #98	; 0x62
    2180:	f819 1001 	ldrb.w	r1, [r9, r1]
    2184:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
    2188:	f103 0163 	add.w	r1, r3, #99	; 0x63
    218c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2190:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    2194:	f103 0164 	add.w	r1, r3, #100	; 0x64
    2198:	f819 1001 	ldrb.w	r1, [r9, r1]
    219c:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
    21a0:	f103 0165 	add.w	r1, r3, #101	; 0x65
    21a4:	f819 1001 	ldrb.w	r1, [r9, r1]
    21a8:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
    21ac:	f103 0166 	add.w	r1, r3, #102	; 0x66
    21b0:	f819 1001 	ldrb.w	r1, [r9, r1]
    21b4:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
    21b8:	f103 0167 	add.w	r1, r3, #103	; 0x67
    21bc:	f819 1001 	ldrb.w	r1, [r9, r1]
    21c0:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    21c4:	f103 0168 	add.w	r1, r3, #104	; 0x68
    21c8:	f819 1001 	ldrb.w	r1, [r9, r1]
    21cc:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    21d0:	f103 0169 	add.w	r1, r3, #105	; 0x69
    21d4:	f819 1001 	ldrb.w	r1, [r9, r1]
    21d8:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    21dc:	f103 016a 	add.w	r1, r3, #106	; 0x6a
    21e0:	f819 1001 	ldrb.w	r1, [r9, r1]
    21e4:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
    21e8:	f103 016b 	add.w	r1, r3, #107	; 0x6b
    21ec:	f819 1001 	ldrb.w	r1, [r9, r1]
    21f0:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
    21f4:	f103 016c 	add.w	r1, r3, #108	; 0x6c
    21f8:	f819 1001 	ldrb.w	r1, [r9, r1]
    21fc:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
    2200:	f103 016d 	add.w	r1, r3, #109	; 0x6d
    2204:	f819 1001 	ldrb.w	r1, [r9, r1]
    2208:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    220c:	f103 016e 	add.w	r1, r3, #110	; 0x6e
    2210:	f819 1001 	ldrb.w	r1, [r9, r1]
    2214:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
    2218:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    221c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2220:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
    2224:	f103 0170 	add.w	r1, r3, #112	; 0x70
    2228:	f819 1001 	ldrb.w	r1, [r9, r1]
    222c:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
    2230:	f103 0171 	add.w	r1, r3, #113	; 0x71
    2234:	f819 1001 	ldrb.w	r1, [r9, r1]
    2238:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    223c:	f103 0172 	add.w	r1, r3, #114	; 0x72
    2240:	f819 1001 	ldrb.w	r1, [r9, r1]
    2244:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
    2248:	f103 0173 	add.w	r1, r3, #115	; 0x73
    224c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2250:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
    2254:	f103 0174 	add.w	r1, r3, #116	; 0x74
    2258:	f819 1001 	ldrb.w	r1, [r9, r1]
    225c:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    2260:	f103 0175 	add.w	r1, r3, #117	; 0x75
    2264:	f819 1001 	ldrb.w	r1, [r9, r1]
    2268:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
    226c:	f103 0176 	add.w	r1, r3, #118	; 0x76
    2270:	f819 1001 	ldrb.w	r1, [r9, r1]
    2274:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
    2278:	f103 0177 	add.w	r1, r3, #119	; 0x77
    227c:	f819 1001 	ldrb.w	r1, [r9, r1]
    2280:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
    2284:	f103 0178 	add.w	r1, r3, #120	; 0x78
    2288:	f819 1001 	ldrb.w	r1, [r9, r1]
    228c:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
    2290:	f103 0179 	add.w	r1, r3, #121	; 0x79
    2294:	f819 1001 	ldrb.w	r1, [r9, r1]
    2298:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
    229c:	f103 017a 	add.w	r1, r3, #122	; 0x7a
    22a0:	f819 1001 	ldrb.w	r1, [r9, r1]
    22a4:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    22a8:	f103 017b 	add.w	r1, r3, #123	; 0x7b
    22ac:	f819 1001 	ldrb.w	r1, [r9, r1]
    22b0:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
    22b4:	f103 017c 	add.w	r1, r3, #124	; 0x7c
    22b8:	f819 1001 	ldrb.w	r1, [r9, r1]
    22bc:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
    22c0:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    22c4:	f819 1001 	ldrb.w	r1, [r9, r1]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    22c8:	f8df 94a8 	ldr.w	r9, [pc, #1192]	; 2774 <parsePreset+0xaf4>
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    22cc:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
			macroNamesArray[presetNumber][j+8][k] = 32;
    22d0:	2120      	movs	r1, #32
    22d2:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
    22d6:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    22da:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
    22de:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
    22e2:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
    22e6:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
    22ea:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
    22ee:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
    22f2:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
    22f6:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
    22fa:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
    22fe:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
    2302:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    2306:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
    230a:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
    230e:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
    2312:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    2316:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    231a:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
    231e:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
    2322:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
    2326:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    232a:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
    232e:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
    2332:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
    2336:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    233a:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
    233e:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    2342:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
    2346:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
    234a:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
    234e:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
    2352:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
    2356:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    235a:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
    235e:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
    2362:	f882 1078 	strb.w	r1, [r2, #120]	; 0x78
    2366:	f882 1079 	strb.w	r1, [r2, #121]	; 0x79
    236a:	f882 107a 	strb.w	r1, [r2, #122]	; 0x7a
    236e:	f882 107b 	strb.w	r1, [r2, #123]	; 0x7b
    2372:	f882 107c 	strb.w	r1, [r2, #124]	; 0x7c
    2376:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    237a:	f882 107e 	strb.w	r1, [r2, #126]	; 0x7e
    237e:	f882 107f 	strb.w	r1, [r2, #127]	; 0x7f
    2382:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
    2386:	f882 1082 	strb.w	r1, [r2, #130]	; 0x82
    238a:	f882 1083 	strb.w	r1, [r2, #131]	; 0x83
    238e:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
    2392:	f882 1085 	strb.w	r1, [r2, #133]	; 0x85
    2396:	f882 1086 	strb.w	r1, [r2, #134]	; 0x86
    239a:	f882 1087 	strb.w	r1, [r2, #135]	; 0x87
    239e:	f882 1088 	strb.w	r1, [r2, #136]	; 0x88
    23a2:	f882 1089 	strb.w	r1, [r2, #137]	; 0x89
    23a6:	f882 108a 	strb.w	r1, [r2, #138]	; 0x8a
    23aa:	f882 108c 	strb.w	r1, [r2, #140]	; 0x8c
    23ae:	f882 108d 	strb.w	r1, [r2, #141]	; 0x8d
    23b2:	f882 108e 	strb.w	r1, [r2, #142]	; 0x8e
    23b6:	f882 108f 	strb.w	r1, [r2, #143]	; 0x8f
    23ba:	f882 1090 	strb.w	r1, [r2, #144]	; 0x90
    23be:	f882 1091 	strb.w	r1, [r2, #145]	; 0x91
    23c2:	f882 1092 	strb.w	r1, [r2, #146]	; 0x92
    23c6:	f882 1093 	strb.w	r1, [r2, #147]	; 0x93
    23ca:	f882 1094 	strb.w	r1, [r2, #148]	; 0x94
    23ce:	f882 1096 	strb.w	r1, [r2, #150]	; 0x96
    23d2:	f882 1097 	strb.w	r1, [r2, #151]	; 0x97
    23d6:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    23da:	f882 1099 	strb.w	r1, [r2, #153]	; 0x99
    23de:	f882 109a 	strb.w	r1, [r2, #154]	; 0x9a
    23e2:	f882 109b 	strb.w	r1, [r2, #155]	; 0x9b
    23e6:	f882 109c 	strb.w	r1, [r2, #156]	; 0x9c
    23ea:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    23ee:	f882 109e 	strb.w	r1, [r2, #158]	; 0x9e
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    23f2:	eb09 0200 	add.w	r2, r9, r0
    23f6:	f819 1000 	ldrb.w	r1, [r9, r0]
    23fa:	7852      	ldrb	r2, [r2, #1]
    23fc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	if (paramCount > size)
    2400:	9901      	ldr	r1, [sp, #4]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2402:	b292      	uxth	r2, r2
	if (paramCount > size)
    2404:	428a      	cmp	r2, r1
    2406:	dc0c      	bgt.n	2422 <parsePreset+0x7a2>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    2408:	eb00 0142 	add.w	r1, r0, r2, lsl #1
	if (paramEndCheck != 0xefef)
    240c:	f64e 76ef 	movw	r6, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    2410:	0054      	lsls	r4, r2, #1
    2412:	4449      	add	r1, r9
    2414:	788f      	ldrb	r7, [r1, #2]
    2416:	78c8      	ldrb	r0, [r1, #3]
    2418:	eb00 2007 	add.w	r0, r0, r7, lsl #8
	if (paramEndCheck != 0xefef)
    241c:	b280      	uxth	r0, r0
    241e:	42b0      	cmp	r0, r6
    2420:	d00c      	beq.n	243c <parsePreset+0x7bc>
		audioMasterLevel = 1.0f;
    2422:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    2426:	4bbb      	ldr	r3, [pc, #748]	; (2714 <parsePreset+0xa94>)
    2428:	2200      	movs	r2, #0
		audioMasterLevel = 1.0f;
    242a:	48bb      	ldr	r0, [pc, #748]	; (2718 <parsePreset+0xa98>)
    242c:	6001      	str	r1, [r0, #0]
		presetWaitingToParse = 0;
    242e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    2430:	b662      	cpsie	i
}
    2432:	b00d      	add	sp, #52	; 0x34
    2434:	ecbd 8b02 	vpop	{d8}
    2438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    243c:	7908      	ldrb	r0, [r1, #4]
    243e:	7949      	ldrb	r1, [r1, #5]
    2440:	eb01 2100 	add.w	r1, r1, r0, lsl #8
    2444:	b288      	uxth	r0, r1
    2446:	9005      	str	r0, [sp, #20]
	if (presetVersionNumber == 0)
    2448:	f1ba 0f00 	cmp.w	sl, #0
    244c:	f000 8118 	beq.w	2680 <parsePreset+0xa00>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    2450:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2454:	f103 0184 	add.w	r1, r3, #132	; 0x84
    2458:	4410      	add	r0, r2
    245a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    245e:	b289      	uxth	r1, r1
	if (mappingEndLocation > size)
    2460:	9801      	ldr	r0, [sp, #4]
    2462:	4281      	cmp	r1, r0
    2464:	dcdd      	bgt.n	2422 <parsePreset+0x7a2>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    2466:	eb09 0501 	add.w	r5, r9, r1
    246a:	f819 0001 	ldrb.w	r0, [r9, r1]
    246e:	7869      	ldrb	r1, [r5, #1]
    2470:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    2474:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    2478:	b289      	uxth	r1, r1
    247a:	4281      	cmp	r1, r0
    247c:	d1d1      	bne.n	2422 <parsePreset+0x7a2>
	bufferIndex = bufferIndex + 2;
    247e:	f103 0780 	add.w	r7, r3, #128	; 0x80
    2482:	463d      	mov	r5, r7
	for (int i = 0; i < paramCount; i++)
    2484:	2a00      	cmp	r2, #0
    2486:	f001 82be 	beq.w	3a06 <parsePreset+0x1d86>
    248a:	4427      	add	r7, r4
    248c:	48a3      	ldr	r0, [pc, #652]	; (271c <parsePreset+0xa9c>)
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    248e:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 2720 <parsePreset+0xaa0>
    2492:	b2bf      	uxth	r7, r7
	for (int i = 0; i < paramCount; i++)
    2494:	4683      	mov	fp, r0
    2496:	4604      	mov	r4, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2498:	eb09 0105 	add.w	r1, r9, r5
    249c:	f819 6005 	ldrb.w	r6, [r9, r5]
		bufferIndex += 2;
    24a0:	3502      	adds	r5, #2
	for (int i = 0; i < paramCount; i++)
    24a2:	341c      	adds	r4, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    24a4:	7849      	ldrb	r1, [r1, #1]
		bufferIndex += 2;
    24a6:	b2ad      	uxth	r5, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    24a8:	eb01 2106 	add.w	r1, r1, r6, lsl #8
	for (int i = 0; i < paramCount; i++)
    24ac:	42bd      	cmp	r5, r7
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    24ae:	ee07 1a90 	vmov	s15, r1
    24b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    24b6:	ee67 7a87 	vmul.f32	s15, s15, s14
    24ba:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
    24be:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    24c2:	d1e9      	bne.n	2498 <parsePreset+0x818>
    24c4:	ebc2 04c2 	rsb	r4, r2, r2, lsl #3
    24c8:	4994      	ldr	r1, [pc, #592]	; (271c <parsePreset+0xa9c>)
    24ca:	4e96      	ldr	r6, [pc, #600]	; (2724 <parsePreset+0xaa4>)
    24cc:	eb00 0484 	add.w	r4, r0, r4, lsl #2
		params[i].setParam = &blankFunction;
    24d0:	614e      	str	r6, [r1, #20]
	for (int i = 0; i < paramCount; i++)
    24d2:	311c      	adds	r1, #28
    24d4:	42a1      	cmp	r1, r4
    24d6:	d1fb      	bne.n	24d0 <parsePreset+0x850>
    24d8:	4993      	ldr	r1, [pc, #588]	; (2728 <parsePreset+0xaa8>)
		params[i].scaleFunc = &scaleDefault;
    24da:	6101      	str	r1, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    24dc:	301c      	adds	r0, #28
    24de:	42a0      	cmp	r0, r4
    24e0:	d1fb      	bne.n	24da <parsePreset+0x85a>
		bufferIndex += 2;
    24e2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    24e6:	3380      	adds	r3, #128	; 0x80
    24e8:	b29d      	uxth	r5, r3
	for (int i = paramCount; i < NUM_PARAMS; i++)
    24ea:	2a9c      	cmp	r2, #156	; 0x9c
    24ec:	f001 8288 	beq.w	3a00 <parsePreset+0x1d80>
    24f0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    24f4:	4c8d      	ldr	r4, [pc, #564]	; (272c <parsePreset+0xaac>)
    24f6:	4e8b      	ldr	r6, [pc, #556]	; (2724 <parsePreset+0xaa4>)
    24f8:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
    24fc:	498a      	ldr	r1, [pc, #552]	; (2728 <parsePreset+0xaa8>)
			params[i].zeroToOneVal[v] = 0.0f;
    24fe:	2200      	movs	r2, #0
    2500:	601a      	str	r2, [r3, #0]
    2502:	605a      	str	r2, [r3, #4]
		params[i].setParam = &blankFunction;
    2504:	e9c3 1604 	strd	r1, r6, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    2508:	331c      	adds	r3, #28
    250a:	42a3      	cmp	r3, r4
    250c:	d1f8      	bne.n	2500 <parsePreset+0x880>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    250e:	4a88      	ldr	r2, [pc, #544]	; (2730 <parsePreset+0xab0>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    2510:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    2514:	4b87      	ldr	r3, [pc, #540]	; (2734 <parsePreset+0xab4>)
	for (int i = 0; i < NUM_EFFECT; i++)
    2516:	2700      	movs	r7, #0
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    2518:	f8cb 22e8 	str.w	r2, [fp, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    251c:	f8cb 2454 	str.w	r2, [fp, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    2520:	f8cb 25c0 	str.w	r2, [fp, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    2524:	4a84      	ldr	r2, [pc, #528]	; (2738 <parsePreset+0xab8>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    2526:	f8cb 3be0 	str.w	r3, [fp, #3040]	; 0xbe0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    252a:	f8cb 2304 	str.w	r2, [fp, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    252e:	f8cb 2470 	str.w	r2, [fp, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    2532:	f8cb 25dc 	str.w	r2, [fp, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    2536:	4a81      	ldr	r2, [pc, #516]	; (273c <parsePreset+0xabc>)
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    2538:	f8cb 3bfc 	str.w	r3, [fp, #3068]	; 0xbfc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    253c:	f8cb 2aac 	str.w	r2, [fp, #2732]	; 0xaac
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    2540:	f8cb 2b54 	str.w	r2, [fp, #2900]	; 0xb54
	params[Transpose].scaleFunc = &scaleTranspose;
    2544:	4a7e      	ldr	r2, [pc, #504]	; (2740 <parsePreset+0xac0>)
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    2546:	f8cb 3c34 	str.w	r3, [fp, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    254a:	f8cb 3c88 	str.w	r3, [fp, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    254e:	f8cb 3ca4 	str.w	r3, [fp, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    2552:	f8cb 3cdc 	str.w	r3, [fp, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    2556:	f8cb 3d30 	str.w	r3, [fp, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    255a:	f8cb 3d4c 	str.w	r3, [fp, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    255e:	f8cb 3d84 	str.w	r3, [fp, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    2562:	f8cb 3dd8 	str.w	r3, [fp, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    2566:	f8cb 3df4 	str.w	r3, [fp, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    256a:	f8cb 3e2c 	str.w	r3, [fp, #3628]	; 0xe2c
	params[Transpose].scaleFunc = &scaleTranspose;
    256e:	f8cb 21d0 	str.w	r2, [fp, #464]	; 0x1d0
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    2572:	4b74      	ldr	r3, [pc, #464]	; (2744 <parsePreset+0xac4>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    2574:	4a74      	ldr	r2, [pc, #464]	; (2748 <parsePreset+0xac8>)
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    2576:	4e75      	ldr	r6, [pc, #468]	; (274c <parsePreset+0xacc>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    2578:	f8cb 32cc 	str.w	r3, [fp, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    257c:	f8cb 3358 	str.w	r3, [fp, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    2580:	f8cb 3438 	str.w	r3, [fp, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    2584:	f8cb 34c4 	str.w	r3, [fp, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    2588:	f8cb 35a4 	str.w	r3, [fp, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    258c:	f8cb 3630 	str.w	r3, [fp, #1584]	; 0x630
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    2590:	f8cb 21ec 	str.w	r2, [fp, #492]	; 0x1ec
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    2594:	4b6e      	ldr	r3, [pc, #440]	; (2750 <parsePreset+0xad0>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    2596:	4a6f      	ldr	r2, [pc, #444]	; (2754 <parsePreset+0xad4>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    2598:	f8cb 3e80 	str.w	r3, [fp, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    259c:	f8cb 3f0c 	str.w	r3, [fp, #3852]	; 0xf0c
    25a0:	f6a2 181c 	subw	r8, r2, #2332	; 0x91c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    25a4:	f8cb 6ae4 	str.w	r6, [fp, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    25a8:	f8cb 6b8c 	str.w	r6, [fp, #2956]	; 0xb8c
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    25ac:	f8cb 3f98 	str.w	r3, [fp, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    25b0:	6253      	str	r3, [r2, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    25b2:	4b69      	ldr	r3, [pc, #420]	; (2758 <parsePreset+0xad8>)
    25b4:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    25b8:	edd8 7a00 	vldr	s15, [r8]
			setEffectsFunctions(effectType, i);
    25bc:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    25be:	ee67 7a87 	vmul.f32	s15, s15, s14
    25c2:	fef8 7a67 	vrinta.f32	s15, s15
    25c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    25ca:	edcd 7a01 	vstr	s15, [sp, #4]
    25ce:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    25d2:	280d      	cmp	r0, #13
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    25d4:	bf88      	it	hi
    25d6:	f8c8 6064 	strhi.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    25da:	f009 fbe9 	bl	bdb0 <__setEffectsFunctions_veneer>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    25de:	edd8 7a01 	vldr	s15, [r8, #4]
			setEffectsFunctions(effectType, i);
    25e2:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    25e4:	ee67 7a87 	vmul.f32	s15, s15, s14
    25e8:	fef8 7a67 	vrinta.f32	s15, s15
    25ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    25f0:	edcd 7a01 	vstr	s15, [sp, #4]
    25f4:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    25f8:	280d      	cmp	r0, #13
    25fa:	d949      	bls.n	2690 <parsePreset+0xa10>
	for (int i = 0; i < NUM_EFFECT; i++)
    25fc:	3701      	adds	r7, #1
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    25fe:	f8c8 6064 	str.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    2602:	f009 fbd5 	bl	bdb0 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    2606:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    260a:	2f04      	cmp	r7, #4
    260c:	d1d4      	bne.n	25b8 <parsePreset+0x938>
    260e:	4f43      	ldr	r7, [pc, #268]	; (271c <parsePreset+0xa9c>)
    2610:	46bb      	mov	fp, r7
    2612:	463e      	mov	r6, r7
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    2614:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    2616:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    2618:	ed16 0a07 	vldr	s0, [r6, #-28]	; 0xffffffe4
    261c:	4798      	blx	r3
    261e:	ed06 0a05 	vstr	s0, [r6, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    2622:	42a6      	cmp	r6, r4
    2624:	d1f6      	bne.n	2614 <parsePreset+0x994>
    2626:	4e3d      	ldr	r6, [pc, #244]	; (271c <parsePreset+0xa9c>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    2628:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    262a:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    262c:	ed16 0a06 	vldr	s0, [r6, #-24]	; 0xffffffe8
    2630:	4798      	blx	r3
    2632:	ed06 0a04 	vstr	s0, [r6, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    2636:	42a6      	cmp	r6, r4
    2638:	d1f6      	bne.n	2628 <parsePreset+0x9a8>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    263a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    263e:	eddb 7af7 	vldr	s15, [fp, #988]	; 0x3dc
    2642:	ee67 7a87 	vmul.f32	s15, s15, s14
    2646:	fef8 7a67 	vrinta.f32	s15, s15
    264a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    264e:	ee17 3a90 	vmov	r3, s15
	switch (oscshape)
    2652:	2b05      	cmp	r3, #5
    2654:	d837      	bhi.n	26c6 <parsePreset+0xa46>
    2656:	e8df f013 	tbh	[pc, r3, lsl #1]
    265a:	09a9      	.short	0x09a9
    265c:	09a40033 	.word	0x09a40033
    2660:	099a099f 	.word	0x099a099f
    2664:	0995      	.short	0x0995
		if (buffer[bufferIndex + 1] == 18)
    2666:	f899 7001 	ldrb.w	r7, [r9, #1]
    266a:	2f12      	cmp	r7, #18
    266c:	d019      	beq.n	26a2 <parsePreset+0xa22>
	uint16_t bufferIndex = 0;
    266e:	4623      	mov	r3, r4
	uint16_t presetVersionNumber = 0;
    2670:	46a2      	mov	sl, r4
		if (buffer[bufferIndex + 1] == 19) //this means its an internal model, not the subtractive synth
    2672:	2f13      	cmp	r7, #19
    2674:	f000 85f8 	beq.w	3268 <parsePreset+0x15e8>
		presetName[i] = buffer[bufferIndex];
    2678:	f819 6004 	ldrb.w	r6, [r9, r4]
    267c:	f7ff bb26 	b.w	1ccc <parsePreset+0x4c>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    2680:	f103 0184 	add.w	r1, r3, #132	; 0x84
    2684:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2688:	4421      	add	r1, r4
    268a:	4401      	add	r1, r0
    268c:	b289      	uxth	r1, r1
    268e:	e6e7      	b.n	2460 <parsePreset+0x7e0>
			setEffectsFunctions(effectType, i);
    2690:	4639      	mov	r1, r7
	for (int i = 0; i < NUM_EFFECT; i++)
    2692:	3701      	adds	r7, #1
			setEffectsFunctions(effectType, i);
    2694:	f009 fb8c 	bl	bdb0 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    2698:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    269c:	2f04      	cmp	r7, #4
    269e:	d18b      	bne.n	25b8 <parsePreset+0x938>
    26a0:	e7b5      	b.n	260e <parsePreset+0x98e>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    26a2:	f899 2002 	ldrb.w	r2, [r9, #2]
    26a6:	f899 3003 	ldrb.w	r3, [r9, #3]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    26aa:	f899 7005 	ldrb.w	r7, [r9, #5]
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    26ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    26b2:	fa1f fa83 	uxth.w	sl, r3
			whichModel = 0; //this is a synth preset
    26b6:	4b29      	ldr	r3, [pc, #164]	; (275c <parsePreset+0xadc>)
    26b8:	701c      	strb	r4, [r3, #0]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    26ba:	2404      	movs	r4, #4
			bufferIndex = 4;
    26bc:	4623      	mov	r3, r4
    26be:	e7d8      	b.n	2672 <parsePreset+0x9f2>
			  shapeTick[i] = &sineTriTick;
    26c0:	4b27      	ldr	r3, [pc, #156]	; (2760 <parsePreset+0xae0>)
    26c2:	4a28      	ldr	r2, [pc, #160]	; (2764 <parsePreset+0xae4>)
    26c4:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    26c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    26ca:	ed9b 7aaa 	vldr	s14, [fp, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    26ce:	4a26      	ldr	r2, [pc, #152]	; (2768 <parsePreset+0xae8>)
    26d0:	4926      	ldr	r1, [pc, #152]	; (276c <parsePreset+0xaec>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    26d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    26d6:	edd2 7a00 	vldr	s15, [r2]
    26da:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    26de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    26e2:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscsEnabled[i] = 0;
    26e6:	bfd4      	ite	le
    26e8:	2000      	movle	r0, #0
			oscsEnabled[i] = 1;
    26ea:	2001      	movgt	r0, #1
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    26ec:	fef8 7a67 	vrinta.f32	s15, s15
    26f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    26f4:	7008      	strb	r0, [r1, #0]
			enabledCount++;
    26f6:	4603      	mov	r3, r0
    26f8:	491d      	ldr	r1, [pc, #116]	; (2770 <parsePreset+0xaf0>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    26fa:	ee17 2a90 	vmov	r2, s15
    26fe:	6008      	str	r0, [r1, #0]
	switch (oscshape)
    2700:	2a05      	cmp	r2, #5
    2702:	d83c      	bhi.n	277e <parsePreset+0xafe>
    2704:	e8df f012 	tbh	[pc, r2, lsl #1]
    2708:	00380939 	.word	0x00380939
    270c:	092f0934 	.word	0x092f0934
    2710:	0925092a 	.word	0x0925092a
    2714:	2001a474 	.word	0x2001a474
    2718:	200006a0 	.word	0x200006a0
    271c:	20019320 	.word	0x20019320
    2720:	377ffff6 	.word	0x377ffff6
    2724:	00001a01 	.word	0x00001a01
    2728:	00001941 	.word	0x00001941
    272c:	2001a430 	.word	0x2001a430
    2730:	00001981 	.word	0x00001981
    2734:	00001b41 	.word	0x00001b41
    2738:	000019a1 	.word	0x000019a1
    273c:	000019c1 	.word	0x000019c1
    2740:	00001a21 	.word	0x00001a21
    2744:	00001961 	.word	0x00001961
    2748:	00001a61 	.word	0x00001a61
    274c:	00001aa1 	.word	0x00001aa1
    2750:	00001bc1 	.word	0x00001bc1
    2754:	2001a320 	.word	0x2001a320
    2758:	000019e1 	.word	0x000019e1
    275c:	2001ca75 	.word	0x2001ca75
    2760:	2001d830 	.word	0x2001d830
    2764:	000082e1 	.word	0x000082e1
    2768:	20019868 	.word	0x20019868
    276c:	2001d68c 	.word	0x2001d68c
    2770:	20019314 	.word	0x20019314
    2774:	30042380 	.word	0x30042380
			  shapeTick[i] = &sineTriTick;
    2778:	4a15      	ldr	r2, [pc, #84]	; (27d0 <parsePreset+0xb50>)
    277a:	4816      	ldr	r0, [pc, #88]	; (27d4 <parsePreset+0xb54>)
    277c:	6050      	str	r0, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    277e:	4a16      	ldr	r2, [pc, #88]	; (27d8 <parsePreset+0xb58>)
    2780:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2784:	ed92 7a00 	vldr	s14, [r2]
    2788:	eeb4 7ae7 	vcmpe.f32	s14, s15
    278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2790:	f341 80aa 	ble.w	38e8 <parsePreset+0x1c68>
			enabledCount++;
    2794:	3301      	adds	r3, #1
			oscOn[i] = 1;
    2796:	2201      	movs	r2, #1
			enabledCount++;
    2798:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    279a:	4610      	mov	r0, r2
    279c:	4c0f      	ldr	r4, [pc, #60]	; (27dc <parsePreset+0xb5c>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    279e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    27a2:	6048      	str	r0, [r1, #4]
    27a4:	7062      	strb	r2, [r4, #1]
    27a6:	4a0e      	ldr	r2, [pc, #56]	; (27e0 <parsePreset+0xb60>)
    27a8:	edd2 7a00 	vldr	s15, [r2]
    27ac:	ee67 7a87 	vmul.f32	s15, s15, s14
    27b0:	fef8 7a67 	vrinta.f32	s15, s15
    27b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    27b8:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    27bc:	2a05      	cmp	r2, #5
    27be:	d814      	bhi.n	27ea <parsePreset+0xb6a>
    27c0:	e8df f012 	tbh	[pc, r2, lsl #1]
    27c4:	08bd08c2 	.word	0x08bd08c2
    27c8:	08b308b8 	.word	0x08b308b8
    27cc:	08ae0010 	.word	0x08ae0010
    27d0:	2001d830 	.word	0x2001d830
    27d4:	000082e1 	.word	0x000082e1
    27d8:	20019734 	.word	0x20019734
    27dc:	2001d68c 	.word	0x2001d68c
    27e0:	200199d4 	.word	0x200199d4
			  shapeTick[i] = &sineTick;
    27e4:	4a99      	ldr	r2, [pc, #612]	; (2a4c <parsePreset+0xdcc>)
    27e6:	489a      	ldr	r0, [pc, #616]	; (2a50 <parsePreset+0xdd0>)
    27e8:	6090      	str	r0, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    27ea:	4a9a      	ldr	r2, [pc, #616]	; (2a54 <parsePreset+0xdd4>)
    27ec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    27f0:	ed92 7a00 	vldr	s14, [r2]
    27f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    27f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    27fc:	f341 807b 	ble.w	38f6 <parsePreset+0x1c76>
			enabledCount++;
    2800:	3301      	adds	r3, #1
			oscOn[i] = 1;
    2802:	2201      	movs	r2, #1
			enabledCount++;
    2804:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    2806:	4610      	mov	r0, r2
	if (params[Noise].realVal[0]  > 0.5f)
    2808:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    280c:	4e92      	ldr	r6, [pc, #584]	; (2a58 <parsePreset+0xdd8>)
	if (params[Noise].realVal[0]  > 0.5f)
    280e:	ed9b 6a80 	vldr	s12, [fp, #512]	; 0x200
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2812:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    2816:	6088      	str	r0, [r1, #8]
	oscAmpMult = oscAmpMultArray[enabledCount];
    2818:	f206 4444 	addw	r4, r6, #1092	; 0x444
    281c:	498f      	ldr	r1, [pc, #572]	; (2a5c <parsePreset+0xddc>)
	if (params[Noise].realVal[0]  > 0.5f)
    281e:	eeb4 6ae7 	vcmpe.f32	s12, s15
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2822:	edd6 7a00 	vldr	s15, [r6]
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    2826:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    282a:	708a      	strb	r2, [r1, #2]
	oscAmpMult = oscAmpMultArray[enabledCount];
    282c:	4a8c      	ldr	r2, [pc, #560]	; (2a60 <parsePreset+0xde0>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    282e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (params[Noise].realVal[0]  > 0.5f)
    2832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	oscAmpMult = oscAmpMultArray[enabledCount];
    2836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    283a:	4a8a      	ldr	r2, [pc, #552]	; (2a64 <parsePreset+0xde4>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    283c:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    2840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    2844:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2846:	4633      	mov	r3, r6
	if (params[Noise].realVal[0]  > 0.5f)
    2848:	bfcc      	ite	gt
    284a:	2301      	movgt	r3, #1
    284c:	2300      	movle	r3, #0
	oscAmpMult = oscAmpMultArray[enabledCount];
    284e:	6011      	str	r1, [r2, #0]
		setFilterTypes(filterType, i);
    2850:	ee17 0a90 	vmov	r0, s15
	if (params[Noise].realVal[0]  > 0.5f)
    2854:	4a84      	ldr	r2, [pc, #528]	; (2a68 <parsePreset+0xde8>)
		setFilterTypes(filterType, i);
    2856:	2100      	movs	r1, #0
	if (params[Noise].realVal[0]  > 0.5f)
    2858:	7013      	strb	r3, [r2, #0]
		setFilterTypes(filterType, i);
    285a:	f009 fc89 	bl	c170 <__setFilterTypes_veneer>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    285e:	edd6 7a2a 	vldr	s15, [r6, #168]	; 0xa8
	for (int i = 0; i < NUM_LFOS; i++)
    2862:	460e      	mov	r6, r1
		setFilterTypes(filterType, i);
    2864:	2101      	movs	r1, #1
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2866:	ee67 7aa6 	vmul.f32	s15, s15, s13
    286a:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    286e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2872:	ee17 0a90 	vmov	r0, s15
    2876:	f009 fc7b 	bl	c170 <__setFilterTypes_veneer>
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    287a:	4623      	mov	r3, r4
		setLFOShapes(LFOShape, i);
    287c:	4631      	mov	r1, r6
	for (int i = 0; i < NUM_LFOS; i++)
    287e:	3601      	adds	r6, #1
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    2880:	348c      	adds	r4, #140	; 0x8c
    2882:	edd3 7a00 	vldr	s15, [r3]
    2886:	ee67 7a87 	vmul.f32	s15, s15, s14
    288a:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    288e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2892:	ee17 0a90 	vmov	r0, s15
    2896:	f009 fa57 	bl	bd48 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    289a:	2e04      	cmp	r6, #4
    289c:	d1ed      	bne.n	287a <parsePreset+0xbfa>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    289e:	4873      	ldr	r0, [pc, #460]	; (2a6c <parsePreset+0xdec>)
	for (int i = 0; i < NUM_PARAMS; i++)
    28a0:	f04f 0800 	mov.w	r8, #0
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    28a4:	4b72      	ldr	r3, [pc, #456]	; (2a70 <parsePreset+0xdf0>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    28a6:	f8cb 02d0 	str.w	r0, [fp, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    28aa:	f8cb 043c 	str.w	r0, [fp, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    28ae:	f8cb 05a8 	str.w	r0, [fp, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    28b2:	4870      	ldr	r0, [pc, #448]	; (2a74 <parsePreset+0xdf4>)
	params[OutputTone].setParam = &setFinalLowpass;
    28b4:	4e70      	ldr	r6, [pc, #448]	; (2a78 <parsePreset+0xdf8>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    28b6:	f8cb 035c 	str.w	r0, [fp, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    28ba:	f8cb 04c8 	str.w	r0, [fp, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    28be:	f8cb 0634 	str.w	r0, [fp, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    28c2:	6818      	ldr	r0, [r3, #0]
	params[Effect1Mix].setParam = &fxMixSet;
    28c4:	496d      	ldr	r1, [pc, #436]	; (2a7c <parsePreset+0xdfc>)
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    28c6:	f8cb 0714 	str.w	r0, [fp, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    28ca:	6858      	ldr	r0, [r3, #4]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    28cc:	4c6c      	ldr	r4, [pc, #432]	; (2a80 <parsePreset+0xe00>)
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    28ce:	f8cb 0730 	str.w	r0, [fp, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    28d2:	6898      	ldr	r0, [r3, #8]
	params[Effect1Mix].setParam = &fxMixSet;
    28d4:	f8cb 17a0 	str.w	r1, [fp, #1952]	; 0x7a0
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    28d8:	f8cb 074c 	str.w	r0, [fp, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    28dc:	68d8      	ldr	r0, [r3, #12]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    28de:	f8cb 47bc 	str.w	r4, [fp, #1980]	; 0x7bc
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    28e2:	f8cb 0768 	str.w	r0, [fp, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    28e6:	6918      	ldr	r0, [r3, #16]
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    28e8:	4a66      	ldr	r2, [pc, #408]	; (2a84 <parsePreset+0xe04>)
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    28ea:	f8cb 0784 	str.w	r0, [fp, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    28ee:	6958      	ldr	r0, [r3, #20]
    28f0:	f8cb 07f4 	str.w	r0, [fp, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    28f4:	6998      	ldr	r0, [r3, #24]
    28f6:	f8cb 0810 	str.w	r0, [fp, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    28fa:	69d8      	ldr	r0, [r3, #28]
    28fc:	f8cb 082c 	str.w	r0, [fp, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
    2900:	4861      	ldr	r0, [pc, #388]	; (2a88 <parsePreset+0xe08>)
    2902:	f8cb 0228 	str.w	r0, [fp, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    2906:	4861      	ldr	r0, [pc, #388]	; (2a8c <parsePreset+0xe0c>)
    2908:	f8cb 0260 	str.w	r0, [fp, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    290c:	4860      	ldr	r0, [pc, #384]	; (2a90 <parsePreset+0xe10>)
    290e:	f8cb 0244 	str.w	r0, [fp, #580]	; 0x244
	params[Master].setParam = &setMaster;
    2912:	4860      	ldr	r0, [pc, #384]	; (2a94 <parsePreset+0xe14>)
    2914:	f8cb 004c 	str.w	r0, [fp, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    2918:	485f      	ldr	r0, [pc, #380]	; (2a98 <parsePreset+0xe18>)
    291a:	f8cb 01d4 	str.w	r0, [fp, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    291e:	485f      	ldr	r0, [pc, #380]	; (2a9c <parsePreset+0xe1c>)
    2920:	f8cb 01f0 	str.w	r0, [fp, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    2924:	485e      	ldr	r0, [pc, #376]	; (2aa0 <parsePreset+0xe20>)
    2926:	f8c6 00d0 	str.w	r0, [r6, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    292a:	6a18      	ldr	r0, [r3, #32]
    292c:	f8cb 0848 	str.w	r0, [fp, #2120]	; 0x848
	params[Effect2Mix].setParam = &fxMixSet;
    2930:	f8cb 1880 	str.w	r1, [fp, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
    2934:	f8cb 1960 	str.w	r1, [fp, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
    2938:	f8cb 1a40 	str.w	r1, [fp, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    293c:	6a59      	ldr	r1, [r3, #36]	; 0x24
	params[Effect2PostGain].setParam = &fxPostGainSet;
    293e:	f8cb 489c 	str.w	r4, [fp, #2204]	; 0x89c
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    2942:	f8cb 1864 	str.w	r1, [fp, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    2946:	6a99      	ldr	r1, [r3, #40]	; 0x28
	params[Effect3PostGain].setParam = &fxPostGainSet;
    2948:	f8cb 497c 	str.w	r4, [fp, #2428]	; 0x97c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    294c:	f8cb 18d4 	str.w	r1, [fp, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2950:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	params[Effect4PostGain].setParam = &fxPostGainSet;
    2952:	f8cb 4a5c 	str.w	r4, [fp, #2652]	; 0xa5c
		params[i].objectNumber = 0;
    2956:	4644      	mov	r4, r8
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2958:	f8cb 18f0 	str.w	r1, [fp, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    295c:	6b19      	ldr	r1, [r3, #48]	; 0x30
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    295e:	4851      	ldr	r0, [pc, #324]	; (2aa4 <parsePreset+0xe24>)
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    2960:	f8cb 190c 	str.w	r1, [fp, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    2964:	6b59      	ldr	r1, [r3, #52]	; 0x34
    2966:	f8cb 1928 	str.w	r1, [fp, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    296a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    296c:	f8cb 1944 	str.w	r1, [fp, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    2970:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    2972:	f8cb 19b4 	str.w	r1, [fp, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    2976:	6c19      	ldr	r1, [r3, #64]	; 0x40
    2978:	f8cb 19d0 	str.w	r1, [fp, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    297c:	6c59      	ldr	r1, [r3, #68]	; 0x44
    297e:	f8cb 19ec 	str.w	r1, [fp, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    2982:	6c99      	ldr	r1, [r3, #72]	; 0x48
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    2984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    2986:	f8cb 1a08 	str.w	r1, [fp, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    298a:	f8cb 3a24 	str.w	r3, [fp, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    298e:	6813      	ldr	r3, [r2, #0]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    2990:	4945      	ldr	r1, [pc, #276]	; (2aa8 <parsePreset+0xe28>)
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    2992:	f8cb 3ae8 	str.w	r3, [fp, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    2996:	6853      	ldr	r3, [r2, #4]
    2998:	f8cb 3acc 	str.w	r3, [fp, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    299c:	6893      	ldr	r3, [r2, #8]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    299e:	f8cb 1be4 	str.w	r1, [fp, #3044]	; 0xbe4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    29a2:	f8cb 3b90 	str.w	r3, [fp, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    29a6:	68d3      	ldr	r3, [r2, #12]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    29a8:	f8cb 1c8c 	str.w	r1, [fp, #3212]	; 0xc8c
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    29ac:	f8cb 3b74 	str.w	r3, [fp, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    29b0:	4b3e      	ldr	r3, [pc, #248]	; (2aac <parsePreset+0xe2c>)
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    29b2:	f8cb 1d34 	str.w	r1, [fp, #3380]	; 0xd34
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    29b6:	f8cb 3c00 	str.w	r3, [fp, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    29ba:	f8cb 3ca8 	str.w	r3, [fp, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    29be:	f8cb 3d50 	str.w	r3, [fp, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    29c2:	f8cb 3df8 	str.w	r3, [fp, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    29c6:	4b3a      	ldr	r3, [pc, #232]	; (2ab0 <parsePreset+0xe30>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    29c8:	f8cb 1ddc 	str.w	r1, [fp, #3548]	; 0xddc
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    29cc:	f8cb 3c1c 	str.w	r3, [fp, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    29d0:	f8cb 3cc4 	str.w	r3, [fp, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    29d4:	f8cb 3d6c 	str.w	r3, [fp, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    29d8:	f8cb 3e14 	str.w	r3, [fp, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    29dc:	4b35      	ldr	r3, [pc, #212]	; (2ab4 <parsePreset+0xe34>)
    29de:	f8cb 3c38 	str.w	r3, [fp, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    29e2:	f8cb 3ce0 	str.w	r3, [fp, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    29e6:	f8cb 3d88 	str.w	r3, [fp, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    29ea:	f8cb 3e30 	str.w	r3, [fp, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    29ee:	4b32      	ldr	r3, [pc, #200]	; (2ab8 <parsePreset+0xe38>)
    29f0:	f8cb 3c54 	str.w	r3, [fp, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    29f4:	f8cb 3cfc 	str.w	r3, [fp, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    29f8:	f8cb 3da4 	str.w	r3, [fp, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    29fc:	f8cb 3e4c 	str.w	r3, [fp, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    2a00:	6803      	ldr	r3, [r0, #0]
    2a02:	f8cb 3e84 	str.w	r3, [fp, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    2a06:	68c3      	ldr	r3, [r0, #12]
    2a08:	f8cb 3f10 	str.w	r3, [fp, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    2a0c:	6983      	ldr	r3, [r0, #24]
    2a0e:	f8cb 3f9c 	str.w	r3, [fp, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    2a12:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2a14:	62b3      	str	r3, [r6, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    2a16:	6843      	ldr	r3, [r0, #4]
    2a18:	f8cb 3ea0 	str.w	r3, [fp, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    2a1c:	6903      	ldr	r3, [r0, #16]
    2a1e:	f8cb 3f2c 	str.w	r3, [fp, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    2a22:	69c3      	ldr	r3, [r0, #28]
    2a24:	f8cb 3fb8 	str.w	r3, [fp, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    2a28:	6a83      	ldr	r3, [r0, #40]	; 0x28
    2a2a:	6473      	str	r3, [r6, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    2a2c:	6883      	ldr	r3, [r0, #8]
    2a2e:	f8cb 3ebc 	str.w	r3, [fp, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    2a32:	6943      	ldr	r3, [r0, #20]
    2a34:	f8cb 3f48 	str.w	r3, [fp, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    2a38:	6a03      	ldr	r3, [r0, #32]
    2a3a:	f8cb 3fd4 	str.w	r3, [fp, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    2a3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2a40:	6633      	str	r3, [r6, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    2a42:	4b1e      	ldr	r3, [pc, #120]	; (2abc <parsePreset+0xe3c>)
    2a44:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
			params[i].objectNumber = 1;
    2a48:	2601      	movs	r6, #1
    2a4a:	e039      	b.n	2ac0 <parsePreset+0xe40>
    2a4c:	2001d830 	.word	0x2001d830
    2a50:	000083e1 	.word	0x000083e1
    2a54:	200198a0 	.word	0x200198a0
    2a58:	20019da8 	.word	0x20019da8
    2a5c:	2001d68c 	.word	0x2001d68c
    2a60:	200008d4 	.word	0x200008d4
    2a64:	200008d0 	.word	0x200008d0
    2a68:	2001d660 	.word	0x2001d660
    2a6c:	00008901 	.word	0x00008901
    2a70:	20014494 	.word	0x20014494
    2a74:	00008961 	.word	0x00008961
    2a78:	2001a320 	.word	0x2001a320
    2a7c:	00009a01 	.word	0x00009a01
    2a80:	00009a21 	.word	0x00009a21
    2a84:	200164e8 	.word	0x200164e8
    2a88:	0000a741 	.word	0x0000a741
    2a8c:	0000a7e1 	.word	0x0000a7e1
    2a90:	0000a7a1 	.word	0x0000a7a1
    2a94:	00008f21 	.word	0x00008f21
    2a98:	00008f41 	.word	0x00008f41
    2a9c:	00008f61 	.word	0x00008f61
    2aa0:	00008f81 	.word	0x00008f81
    2aa4:	20018644 	.word	0x20018644
    2aa8:	00008e41 	.word	0x00008e41
    2aac:	00008e61 	.word	0x00008e61
    2ab0:	00008e81 	.word	0x00008e81
    2ab4:	00008ea1 	.word	0x00008ea1
    2ab8:	00008ec1 	.word	0x00008ec1
    2abc:	00008f01 	.word	0x00008f01
		if ((i >= Osc1) && (i < Osc2))
    2ac0:	f1a8 0318 	sub.w	r3, r8, #24
		params[i].objectNumber = 0;
    2ac4:	763c      	strb	r4, [r7, #24]
		if ((i >= Osc1) && (i < Osc2))
    2ac6:	2b0c      	cmp	r3, #12
    2ac8:	f240 829d 	bls.w	3006 <parsePreset+0x1386>
		else if ((i >= Osc2) && (i < Osc3))
    2acc:	f1a8 0325 	sub.w	r3, r8, #37	; 0x25
    2ad0:	2b72      	cmp	r3, #114	; 0x72
    2ad2:	f200 8298 	bhi.w	3006 <parsePreset+0x1386>
    2ad6:	e8df f013 	tbh	[pc, r3, lsl #1]
    2ada:	0073      	.short	0x0073
    2adc:	00730073 	.word	0x00730073
    2ae0:	00730073 	.word	0x00730073
    2ae4:	00730073 	.word	0x00730073
    2ae8:	00730073 	.word	0x00730073
    2aec:	00730073 	.word	0x00730073
    2af0:	00730073 	.word	0x00730073
    2af4:	02900290 	.word	0x02900290
    2af8:	02900290 	.word	0x02900290
    2afc:	02900290 	.word	0x02900290
    2b00:	02900290 	.word	0x02900290
    2b04:	02900290 	.word	0x02900290
    2b08:	02900290 	.word	0x02900290
    2b0c:	02960290 	.word	0x02960290
    2b10:	02960296 	.word	0x02960296
    2b14:	02960296 	.word	0x02960296
    2b18:	02960296 	.word	0x02960296
    2b1c:	00730296 	.word	0x00730296
    2b20:	00730073 	.word	0x00730073
    2b24:	00730073 	.word	0x00730073
    2b28:	00730073 	.word	0x00730073
    2b2c:	02900073 	.word	0x02900073
    2b30:	02900290 	.word	0x02900290
    2b34:	02900290 	.word	0x02900290
    2b38:	02900290 	.word	0x02900290
    2b3c:	02930290 	.word	0x02930290
    2b40:	02930293 	.word	0x02930293
    2b44:	02930293 	.word	0x02930293
    2b48:	02930293 	.word	0x02930293
    2b4c:	02960293 	.word	0x02960293
    2b50:	02960296 	.word	0x02960296
    2b54:	02960296 	.word	0x02960296
    2b58:	00730296 	.word	0x00730296
    2b5c:	00730073 	.word	0x00730073
    2b60:	00730073 	.word	0x00730073
    2b64:	00730073 	.word	0x00730073
    2b68:	02960296 	.word	0x02960296
    2b6c:	02960296 	.word	0x02960296
    2b70:	02960296 	.word	0x02960296
    2b74:	00730073 	.word	0x00730073
    2b78:	00730073 	.word	0x00730073
    2b7c:	00730073 	.word	0x00730073
    2b80:	02900290 	.word	0x02900290
    2b84:	02900290 	.word	0x02900290
    2b88:	02900290 	.word	0x02900290
    2b8c:	02930293 	.word	0x02930293
    2b90:	02930293 	.word	0x02930293
    2b94:	02930293 	.word	0x02930293
    2b98:	02960296 	.word	0x02960296
    2b9c:	02960296 	.word	0x02960296
    2ba0:	00730296 	.word	0x00730296
    2ba4:	00730073 	.word	0x00730073
    2ba8:	00730073 	.word	0x00730073
    2bac:	02900290 	.word	0x02900290
    2bb0:	02900290 	.word	0x02900290
    2bb4:	02930290 	.word	0x02930290
    2bb8:	02930293 	.word	0x02930293
    2bbc:	02930293 	.word	0x02930293
			params[i].objectNumber = 1;
    2bc0:	2001      	movs	r0, #1
    2bc2:	763e      	strb	r6, [r7, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2bc4:	ed97 0a02 	vldr	s0, [r7, #8]
    2bc8:	2100      	movs	r1, #0
    2bca:	697b      	ldr	r3, [r7, #20]
	for (int i = 0; i < NUM_PARAMS; i++)
    2bcc:	f108 0801 	add.w	r8, r8, #1
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2bd0:	4798      	blx	r3
    2bd2:	ed97 0a03 	vldr	s0, [r7, #12]
    2bd6:	697b      	ldr	r3, [r7, #20]
    2bd8:	2101      	movs	r1, #1
    2bda:	7e38      	ldrb	r0, [r7, #24]
	for (int i = 0; i < NUM_PARAMS; i++)
    2bdc:	371c      	adds	r7, #28
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2bde:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    2be0:	f1b8 0f9c 	cmp.w	r8, #156	; 0x9c
    2be4:	f47f af6c 	bne.w	2ac0 <parsePreset+0xe40>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2be8:	eddb 7a09 	vldr	s15, [fp, #36]	; 0x24
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2bec:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2bf0:	ed9b 7a02 	vldr	s14, [fp, #8]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2bf4:	493a      	ldr	r1, [pc, #232]	; (2ce0 <parsePreset+0x1060>)
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2bf6:	ee37 7a67 	vsub.f32	s14, s14, s15
    2bfa:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 2ce4 <parsePreset+0x1064>
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2bfe:	ed91 6a38 	vldr	s12, [r1, #224]	; 0xe0
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2c02:	eddf 5a39 	vldr	s11, [pc, #228]	; 2ce8 <parsePreset+0x1068>
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2c06:	eeb4 6ae6 	vcmpe.f32	s12, s13
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2c0a:	4b38      	ldr	r3, [pc, #224]	; (2cec <parsePreset+0x106c>)
    2c0c:	ee85 6a07 	vdiv.f32	s12, s10, s14
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2c14:	ee67 7aa5 	vmul.f32	s15, s15, s11
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2c18:	bfcc      	ite	gt
    2c1a:	2201      	movgt	r2, #1
    2c1c:	2200      	movle	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2c1e:	ed83 6a00 	vstr	s12, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2c22:	4b33      	ldr	r3, [pc, #204]	; (2cf0 <parsePreset+0x1070>)
    2c24:	edc3 7a00 	vstr	s15, [r3]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2c28:	4b32      	ldr	r3, [pc, #200]	; (2cf4 <parsePreset+0x1074>)
    2c2a:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    2c2c:	f1ba 0f00 	cmp.w	sl, #0
    2c30:	f000 865e 	beq.w	38f0 <parsePreset+0x1c70>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    2c34:	edd1 7a3f 	vldr	s15, [r1, #252]	; 0xfc
    2c38:	eef4 7ae6 	vcmpe.f32	s15, s13
    2c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2c40:	bfcc      	ite	gt
    2c42:	2301      	movgt	r3, #1
    2c44:	2300      	movle	r3, #0
	numMappings = 0;
    2c46:	2400      	movs	r4, #0
		knobFrozen[i] = 0;
    2c48:	4a2b      	ldr	r2, [pc, #172]	; (2cf8 <parsePreset+0x1078>)
		pedalTicked[i] = 0;
    2c4a:	482c      	ldr	r0, [pc, #176]	; (2cfc <parsePreset+0x107c>)
	bufferIndex += 2;
    2c4c:	3504      	adds	r5, #4
		knobFrozen[i] = 0;
    2c4e:	7014      	strb	r4, [r2, #0]
		pedalTicked[i] = 0;
    2c50:	4621      	mov	r1, r4
		knobFrozen[i] = 0;
    2c52:	7054      	strb	r4, [r2, #1]
	bufferIndex += 2;
    2c54:	fa1f f885 	uxth.w	r8, r5
		knobFrozen[i] = 0;
    2c58:	7094      	strb	r4, [r2, #2]
    2c5a:	70d4      	strb	r4, [r2, #3]
    2c5c:	7114      	strb	r4, [r2, #4]
    2c5e:	7154      	strb	r4, [r2, #5]
    2c60:	7194      	strb	r4, [r2, #6]
    2c62:	71d4      	strb	r4, [r2, #7]
    2c64:	7214      	strb	r4, [r2, #8]
    2c66:	7254      	strb	r4, [r2, #9]
    2c68:	7294      	strb	r4, [r2, #10]
    2c6a:	72d4      	strb	r4, [r2, #11]
		knobTicked[i] = 0;
    2c6c:	4a24      	ldr	r2, [pc, #144]	; (2d00 <parsePreset+0x1080>)
    2c6e:	e9c2 4400 	strd	r4, r4, [r2]
    2c72:	e9c2 4402 	strd	r4, r4, [r2, #8]
    2c76:	e9c2 4404 	strd	r4, r4, [r2, #16]
    2c7a:	e9c2 4406 	strd	r4, r4, [r2, #24]
    2c7e:	e9c2 4408 	strd	r4, r4, [r2, #32]
    2c82:	e9c2 440a 	strd	r4, r4, [r2, #40]	; 0x28
    2c86:	4a1f      	ldr	r2, [pc, #124]	; (2d04 <parsePreset+0x1084>)
    2c88:	7013      	strb	r3, [r2, #0]
		pedalTicked[i] = 0;
    2c8a:	2228      	movs	r2, #40	; 0x28
	numMappings = 0;
    2c8c:	4b1e      	ldr	r3, [pc, #120]	; (2d08 <parsePreset+0x1088>)
    2c8e:	701c      	strb	r4, [r3, #0]
		lfoOn[i] = 0;
    2c90:	4b1e      	ldr	r3, [pc, #120]	; (2d0c <parsePreset+0x108c>)
    2c92:	601c      	str	r4, [r3, #0]
		envOn[i] = 0;
    2c94:	4b1e      	ldr	r3, [pc, #120]	; (2d10 <parsePreset+0x1090>)
    2c96:	601c      	str	r4, [r3, #0]
		pedalTicked[i] = 0;
    2c98:	f009 f95e 	bl	bf58 <__memset_veneer>
    2c9c:	4b1d      	ldr	r3, [pc, #116]	; (2d14 <parsePreset+0x1094>)
		mappings[i].destNumber = 255;
    2c9e:	22ff      	movs	r2, #255	; 0xff
    2ca0:	f503 6118 	add.w	r1, r3, #2432	; 0x980
    2ca4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2ca6:	334c      	adds	r3, #76	; 0x4c
		mappings[i].hookActive[0] = 0;
    2ca8:	f843 4c04 	str.w	r4, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2cac:	428b      	cmp	r3, r1
    2cae:	d1f9      	bne.n	2ca4 <parsePreset+0x1024>
	for (int i = 0; i < mappingCount; i++)
    2cb0:	9b05      	ldr	r3, [sp, #20]
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	f000 828f 	beq.w	31d6 <parsePreset+0x1556>
    2cb8:	2300      	movs	r3, #0
			for (int v = 0; v < numStringsThisBoard; v++)
    2cba:	f8cd b01c 	str.w	fp, [sp, #28]
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2cbe:	ed9f 8a16 	vldr	s16, [pc, #88]	; 2d18 <parsePreset+0x1098>
			for (int v = 0; v < numStringsThisBoard; v++)
    2cc2:	4656      	mov	r6, sl
    2cc4:	46cb      	mov	fp, r9
	for (int i = 0; i < mappingCount; i++)
    2cc6:	9301      	str	r3, [sp, #4]
		uint8_t destNumber = buffer[bufferIndex+1];
    2cc8:	eb0b 0308 	add.w	r3, fp, r8
    2ccc:	7858      	ldrb	r0, [r3, #1]
		if (presetVersionNumber > 0)
    2cce:	2e00      	cmp	r6, #0
    2cd0:	f000 81ac 	beq.w	302c <parsePreset+0x13ac>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    2cd4:	795d      	ldrb	r5, [r3, #5]
		uint8_t whichHook = 0;
    2cd6:	2300      	movs	r3, #0
    2cd8:	4a0e      	ldr	r2, [pc, #56]	; (2d14 <parsePreset+0x1094>)
    2cda:	461f      	mov	r7, r3
    2cdc:	461c      	mov	r4, r3
    2cde:	e021      	b.n	2d24 <parsePreset+0x10a4>
    2ce0:	2001a320 	.word	0x2001a320
    2ce4:	3c010204 	.word	0x3c010204
    2ce8:	42fe0000 	.word	0x42fe0000
    2cec:	20019304 	.word	0x20019304
    2cf0:	20019308 	.word	0x20019308
    2cf4:	20016611 	.word	0x20016611
    2cf8:	200051d4 	.word	0x200051d4
    2cfc:	2001a434 	.word	0x2001a434
    2d00:	20016614 	.word	0x20016614
    2d04:	2001a430 	.word	0x2001a430
    2d08:	20019310 	.word	0x20019310
    2d0c:	2001d41c 	.word	0x2001d41c
    2d10:	2001d318 	.word	0x2001d318
    2d14:	200186c8 	.word	0x200186c8
    2d18:	37fffffc 	.word	0x37fffffc
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2d1c:	3301      	adds	r3, #1
    2d1e:	324c      	adds	r2, #76	; 0x4c
    2d20:	2b20      	cmp	r3, #32
    2d22:	d00c      	beq.n	2d3e <parsePreset+0x10be>
			if (mappings[j].destNumber == destNumber)
    2d24:	7811      	ldrb	r1, [r2, #0]
    2d26:	4281      	cmp	r1, r0
    2d28:	d1f8      	bne.n	2d1c <parsePreset+0x109c>
				foundOne = 1;
    2d2a:	2701      	movs	r7, #1
    2d2c:	b2dc      	uxtb	r4, r3
				if (presetVersionNumber == 0)
    2d2e:	2e00      	cmp	r6, #0
    2d30:	d1f4      	bne.n	2d1c <parsePreset+0x109c>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2d32:	3301      	adds	r3, #1
					whichHook = mappings[j].numHooks;
    2d34:	f892 504b 	ldrb.w	r5, [r2, #75]	; 0x4b
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2d38:	324c      	adds	r2, #76	; 0x4c
    2d3a:	2b20      	cmp	r3, #32
    2d3c:	d1f2      	bne.n	2d24 <parsePreset+0x10a4>
		if (foundOne == 0)
    2d3e:	b99f      	cbnz	r7, 2d68 <parsePreset+0x10e8>
			whichMapping = numMappings;
    2d40:	49be      	ldr	r1, [pc, #760]	; (303c <parsePreset+0x13bc>)
			mappings[whichMapping].dest = &params[destNumber];
    2d42:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    2d46:	9c07      	ldr	r4, [sp, #28]
			if (presetVersionNumber == 0)
    2d48:	2e00      	cmp	r6, #0
			whichMapping = numMappings;
    2d4a:	780b      	ldrb	r3, [r1, #0]
			mappings[whichMapping].dest = &params[destNumber];
    2d4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			if (presetVersionNumber == 0)
    2d50:	bf08      	it	eq
    2d52:	2500      	moveq	r5, #0
			mappings[whichMapping].destNumber = destNumber;
    2d54:	461c      	mov	r4, r3
			numMappings++;
    2d56:	3301      	adds	r3, #1
    2d58:	700b      	strb	r3, [r1, #0]
			mappings[whichMapping].destNumber = destNumber;
    2d5a:	234c      	movs	r3, #76	; 0x4c
    2d5c:	49b8      	ldr	r1, [pc, #736]	; (3040 <parsePreset+0x13c0>)
    2d5e:	fb03 f304 	mul.w	r3, r3, r4
    2d62:	54c8      	strb	r0, [r1, r3]
    2d64:	440b      	add	r3, r1
			mappings[whichMapping].dest = &params[destNumber];
    2d66:	605a      	str	r2, [r3, #4]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2d68:	224c      	movs	r2, #76	; 0x4c
    2d6a:	4fb5      	ldr	r7, [pc, #724]	; (3040 <parsePreset+0x13c0>)
    2d6c:	1c69      	adds	r1, r5, #1
		int source = buffer[bufferIndex];
    2d6e:	f81b 3008 	ldrb.w	r3, [fp, r8]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2d72:	fb02 f204 	mul.w	r2, r2, r4
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2d76:	2b03      	cmp	r3, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2d78:	eb02 00c5 	add.w	r0, r2, r5, lsl #3
    2d7c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
    2d80:	443a      	add	r2, r7
    2d82:	4438      	add	r0, r7
    2d84:	4faf      	ldr	r7, [pc, #700]	; (3044 <parsePreset+0x13c4>)
    2d86:	442a      	add	r2, r5
    2d88:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    2d8c:	f107 0704 	add.w	r7, r7, #4
    2d90:	60c7      	str	r7, [r0, #12]
    2d92:	48ac      	ldr	r0, [pc, #688]	; (3044 <parsePreset+0x13c4>)
    2d94:	4faa      	ldr	r7, [pc, #680]	; (3040 <parsePreset+0x13c0>)
    2d96:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    2d9a:	5078      	str	r0, [r7, r1]
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2d9c:	bfd4      	ite	le
    2d9e:	2100      	movle	r1, #0
    2da0:	2101      	movgt	r1, #1
    2da2:	b218      	sxth	r0, r3
    2da4:	f882 1020 	strb.w	r1, [r2, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2da8:	f1a3 0218 	sub.w	r2, r3, #24
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2dac:	00e9      	lsls	r1, r5, #3
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2dae:	2a03      	cmp	r2, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2db0:	9103      	str	r1, [sp, #12]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2db2:	f200 812f 	bhi.w	3014 <parsePreset+0x1394>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    2db6:	4aa4      	ldr	r2, [pc, #656]	; (3048 <parsePreset+0x13c8>)
    2db8:	f04f 0101 	mov.w	r1, #1
    2dbc:	441a      	add	r2, r3
    2dbe:	f802 1c18 	strb.w	r1, [r2, #-24]
		if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    2dc2:	2b02      	cmp	r3, #2
    2dc4:	d803      	bhi.n	2dce <parsePreset+0x114e>
			oscOn[source - OSC_SOURCE_OFFSET] = 1;
    2dc6:	4aa1      	ldr	r2, [pc, #644]	; (304c <parsePreset+0x13cc>)
    2dc8:	f04f 0101 	mov.w	r1, #1
    2dcc:	54d1      	strb	r1, [r2, r3]
		if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    2dce:	2b03      	cmp	r3, #3
    2dd0:	f000 812e 	beq.w	3030 <parsePreset+0x13b0>
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2dd4:	1f1f      	subs	r7, r3, #4
    2dd6:	2f0b      	cmp	r7, #11
    2dd8:	f240 816d 	bls.w	30b6 <parsePreset+0x1436>
		if ((source >= PEDAL_SOURCE_OFFSET) && (source < (PEDAL_SOURCE_OFFSET + 10)))
    2ddc:	3b1c      	subs	r3, #28
    2dde:	2b09      	cmp	r3, #9
    2de0:	d803      	bhi.n	2dea <parsePreset+0x116a>
			pedalTicked[source - PEDAL_SOURCE_OFFSET] = 1;
    2de2:	4a9b      	ldr	r2, [pc, #620]	; (3050 <parsePreset+0x13d0>)
    2de4:	2101      	movs	r1, #1
    2de6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		int scalar = buffer[bufferIndex+2];
    2dea:	eb0b 0308 	add.w	r3, fp, r8
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2dee:	4a99      	ldr	r2, [pc, #612]	; (3054 <parsePreset+0x13d4>)
		int scalar = buffer[bufferIndex+2];
    2df0:	789f      	ldrb	r7, [r3, #2]
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2df2:	f1a7 0904 	sub.w	r9, r7, #4
    2df6:	b239      	sxth	r1, r7
			if (scalar == 0xff)
    2df8:	2fff      	cmp	r7, #255	; 0xff
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2dfa:	f1a7 0a18 	sub.w	sl, r7, #24
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2dfe:	fa5f f389 	uxtb.w	r3, r9
    2e02:	9109      	str	r1, [sp, #36]	; 0x24
    2e04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e08:	9308      	str	r3, [sp, #32]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2e0a:	f1a7 0314 	sub.w	r3, r7, #20
    2e0e:	9306      	str	r3, [sp, #24]
					uint8_t whichMacro = scalar - MACRO_SOURCE_OFFSET;
    2e10:	fa5f f389 	uxtb.w	r3, r9
    2e14:	9303      	str	r3, [sp, #12]
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    2e16:	f1a7 031c 	sub.w	r3, r7, #28
    2e1a:	9304      	str	r3, [sp, #16]
			if (scalar == 0xff)
    2e1c:	f000 8126 	beq.w	306c <parsePreset+0x13ec>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2e20:	234c      	movs	r3, #76	; 0x4c
    2e22:	1d2a      	adds	r2, r5, #4
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2e24:	f1ba 0f03 	cmp.w	sl, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2e28:	fb03 f304 	mul.w	r3, r3, r4
    2e2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2e30:	4a83      	ldr	r2, [pc, #524]	; (3040 <parsePreset+0x13c0>)
    2e32:	4413      	add	r3, r2
    2e34:	4a83      	ldr	r2, [pc, #524]	; (3044 <parsePreset+0x13c4>)
    2e36:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    2e3a:	605a      	str	r2, [r3, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2e3c:	f200 8125 	bhi.w	308a <parsePreset+0x140a>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2e40:	4b81      	ldr	r3, [pc, #516]	; (3048 <parsePreset+0x13c8>)
    2e42:	f04f 0201 	mov.w	r2, #1
    2e46:	443b      	add	r3, r7
    2e48:	f803 2c18 	strb.w	r2, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2e4c:	2f02      	cmp	r7, #2
    2e4e:	d803      	bhi.n	2e58 <parsePreset+0x11d8>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2e50:	4b7e      	ldr	r3, [pc, #504]	; (304c <parsePreset+0x13cc>)
    2e52:	f04f 0201 	mov.w	r2, #1
    2e56:	55da      	strb	r2, [r3, r7]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2e58:	2f03      	cmp	r7, #3
    2e5a:	f000 8157 	beq.w	310c <parsePreset+0x148c>
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2e5e:	f1b9 0f0b 	cmp.w	r9, #11
    2e62:	f240 8188 	bls.w	3176 <parsePreset+0x14f6>
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    2e66:	9b04      	ldr	r3, [sp, #16]
    2e68:	2b09      	cmp	r3, #9
    2e6a:	d803      	bhi.n	2e74 <parsePreset+0x11f4>
					pedalTicked[scalar - PEDAL_SOURCE_OFFSET] = 1;
    2e6c:	4a78      	ldr	r2, [pc, #480]	; (3050 <parsePreset+0x13d0>)
    2e6e:	2101      	movs	r1, #1
    2e70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2e74:	224c      	movs	r2, #76	; 0x4c
    2e76:	00eb      	lsls	r3, r5, #3
    2e78:	4971      	ldr	r1, [pc, #452]	; (3040 <parsePreset+0x13c0>)
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2e7a:	f1ba 0f03 	cmp.w	sl, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2e7e:	fb02 3304 	mla	r3, r2, r4, r3
    2e82:	ea4f 0247 	mov.w	r2, r7, lsl #1
    2e86:	440b      	add	r3, r1
    2e88:	f102 0201 	add.w	r2, r2, #1
    2e8c:	496d      	ldr	r1, [pc, #436]	; (3044 <parsePreset+0x13c4>)
    2e8e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2e92:	629a      	str	r2, [r3, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2e94:	f200 8104 	bhi.w	30a0 <parsePreset+0x1420>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2e98:	4b6b      	ldr	r3, [pc, #428]	; (3048 <parsePreset+0x13c8>)
    2e9a:	f04f 0201 	mov.w	r2, #1
    2e9e:	443b      	add	r3, r7
    2ea0:	f803 2c18 	strb.w	r2, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2ea4:	2f02      	cmp	r7, #2
    2ea6:	d803      	bhi.n	2eb0 <parsePreset+0x1230>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2ea8:	4b68      	ldr	r3, [pc, #416]	; (304c <parsePreset+0x13cc>)
    2eaa:	f04f 0201 	mov.w	r2, #1
    2eae:	55da      	strb	r2, [r3, r7]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2eb0:	2f03      	cmp	r7, #3
    2eb2:	f000 8130 	beq.w	3116 <parsePreset+0x1496>
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2eb6:	f1b9 0f0b 	cmp.w	r9, #11
    2eba:	f240 8131 	bls.w	3120 <parsePreset+0x14a0>
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    2ebe:	9b04      	ldr	r3, [sp, #16]
    2ec0:	2b09      	cmp	r3, #9
    2ec2:	d803      	bhi.n	2ecc <parsePreset+0x124c>
					pedalTicked[scalar - PEDAL_SOURCE_OFFSET] = 1;
    2ec4:	4a62      	ldr	r2, [pc, #392]	; (3050 <parsePreset+0x13d0>)
    2ec6:	2101      	movs	r1, #1
    2ec8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2ecc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
		mappings[whichMapping].hookActive[whichHook] = 1;
    2ed0:	495b      	ldr	r1, [pc, #364]	; (3040 <parsePreset+0x13c0>)
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2ed2:	eb0b 0208 	add.w	r2, fp, r8
		mappings[whichMapping].hookActive[whichHook] = 1;
    2ed6:	204c      	movs	r0, #76	; 0x4c
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2ed8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		mappings[whichMapping].hookActive[whichHook] = 1;
    2edc:	fb00 1404 	mla	r4, r0, r4, r1
    2ee0:	f04f 0001 	mov.w	r0, #1
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2ee4:	442b      	add	r3, r5
		mappings[whichMapping].hookActive[whichHook] = 1;
    2ee6:	4425      	add	r5, r4
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2ee8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2eec:	78d1      	ldrb	r1, [r2, #3]
    2eee:	7912      	ldrb	r2, [r2, #4]
		mappings[whichMapping].hookActive[whichHook] = 1;
    2ef0:	f885 0048 	strb.w	r0, [r5, #72]	; 0x48
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2ef4:	eb02 2201 	add.w	r2, r2, r1, lsl #8
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2ef8:	b212      	sxth	r2, r2
    2efa:	ee07 2a90 	vmov	s15, r2
    2efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2f02:	ee67 7a88 	vmul.f32	s15, s15, s16
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2f06:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
    2f0a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    2f0e:	3301      	adds	r3, #1
    2f10:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		if (presetVersionNumber > 0)
    2f14:	2e00      	cmp	r6, #0
    2f16:	d078      	beq.n	300a <parsePreset+0x138a>
			bufferIndex += 6;
    2f18:	f108 0806 	add.w	r8, r8, #6
    2f1c:	fa1f f888 	uxth.w	r8, r8
	for (int i = 0; i < mappingCount; i++)
    2f20:	9b01      	ldr	r3, [sp, #4]
    2f22:	9a05      	ldr	r2, [sp, #20]
    2f24:	3301      	adds	r3, #1
    2f26:	4293      	cmp	r3, r2
    2f28:	9301      	str	r3, [sp, #4]
    2f2a:	f47f aecd 	bne.w	2cc8 <parsePreset+0x1048>
	for (int i = 0; i < numMappings; i++)
    2f2e:	4b43      	ldr	r3, [pc, #268]	; (303c <parsePreset+0x13bc>)
    2f30:	781a      	ldrb	r2, [r3, #0]
    2f32:	2a00      	cmp	r2, #0
    2f34:	f000 814f 	beq.w	31d6 <parsePreset+0x1556>
    2f38:	4c47      	ldr	r4, [pc, #284]	; (3058 <parsePreset+0x13d8>)
    2f3a:	f04f 0800 	mov.w	r8, #0
			for (int v = 0; v < numStringsThisBoard; v++)
    2f3e:	4f47      	ldr	r7, [pc, #284]	; (305c <parsePreset+0x13dc>)
    2f40:	e005      	b.n	2f4e <parsePreset+0x12ce>
	for (int i = 0; i < numMappings; i++)
    2f42:	f108 0801 	add.w	r8, r8, #1
    2f46:	344c      	adds	r4, #76	; 0x4c
    2f48:	4542      	cmp	r2, r8
    2f4a:	f340 8144 	ble.w	31d6 <parsePreset+0x1556>
		if (mappings[i].destNumber != 255)
    2f4e:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    2f52:	2bff      	cmp	r3, #255	; 0xff
    2f54:	d0f5      	beq.n	2f42 <parsePreset+0x12c2>
			for (int v = 0; v < numStringsThisBoard; v++)
    2f56:	783b      	ldrb	r3, [r7, #0]
    2f58:	2b00      	cmp	r3, #0
    2f5a:	d0f2      	beq.n	2f42 <parsePreset+0x12c2>
    2f5c:	4626      	mov	r6, r4
    2f5e:	2500      	movs	r5, #0
					if (mappings[i].hookActive[j])
    2f60:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				float unsmoothedValue = 0.0f;
    2f64:	eddf 7a3e 	vldr	s15, [pc, #248]	; 3060 <parsePreset+0x13e0>
					if (mappings[i].hookActive[j])
    2f68:	b15b      	cbz	r3, 2f82 <parsePreset+0x1302>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2f6a:	6832      	ldr	r2, [r6, #0]
    2f6c:	69f3      	ldr	r3, [r6, #28]
    2f6e:	edd2 7a00 	vldr	s15, [r2]
    2f72:	edd3 6a00 	vldr	s13, [r3]
    2f76:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
    2f7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    2f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
					if (mappings[i].hookActive[j])
    2f82:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    2f86:	b15b      	cbz	r3, 2fa0 <parsePreset+0x1320>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2f88:	68b2      	ldr	r2, [r6, #8]
    2f8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
						unsmoothedValue += sum;
    2f8c:	ed92 7a00 	vldr	s14, [r2]
    2f90:	ed93 6a00 	vldr	s12, [r3]
    2f94:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    2f98:	ee27 7a06 	vmul.f32	s14, s14, s12
    2f9c:	eee7 7a26 	vfma.f32	s15, s14, s13
					if (mappings[i].hookActive[j])
    2fa0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    2fa4:	b15b      	cbz	r3, 2fbe <parsePreset+0x133e>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2fa6:	6932      	ldr	r2, [r6, #16]
    2fa8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
						unsmoothedValue += sum;
    2faa:	ed92 7a00 	vldr	s14, [r2]
    2fae:	ed93 6a00 	vldr	s12, [r3]
    2fb2:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    2fb6:	ee27 7a06 	vmul.f32	s14, s14, s12
    2fba:	eee7 7a26 	vfma.f32	s15, s14, s13
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2fbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
			for (int v = 0; v < numStringsThisBoard; v++)
    2fc2:	3604      	adds	r6, #4
    2fc4:	eb03 0985 	add.w	r9, r3, r5, lsl #2
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2fc8:	691b      	ldr	r3, [r3, #16]
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2fca:	ed99 0a00 	vldr	s0, [r9]
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2fce:	ee37 0a80 	vadd.f32	s0, s15, s0
    2fd2:	4798      	blx	r3
    2fd4:	ed89 0a02 	vstr	s0, [r9, #8]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2fd8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2fdc:	4629      	mov	r1, r5
    2fde:	eb03 0285 	add.w	r2, r3, r5, lsl #2
    2fe2:	7e18      	ldrb	r0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    2fe4:	3501      	adds	r5, #1
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2fe6:	ed92 0a02 	vldr	s0, [r2, #8]
    2fea:	695a      	ldr	r2, [r3, #20]
    2fec:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    2fee:	783b      	ldrb	r3, [r7, #0]
    2ff0:	42ab      	cmp	r3, r5
    2ff2:	dcb5      	bgt.n	2f60 <parsePreset+0x12e0>
	for (int i = 0; i < numMappings; i++)
    2ff4:	4b11      	ldr	r3, [pc, #68]	; (303c <parsePreset+0x13bc>)
    2ff6:	781a      	ldrb	r2, [r3, #0]
    2ff8:	e7a3      	b.n	2f42 <parsePreset+0x12c2>
			params[i].objectNumber = 2;
    2ffa:	2002      	movs	r0, #2
    2ffc:	7638      	strb	r0, [r7, #24]
    2ffe:	e5e1      	b.n	2bc4 <parsePreset+0xf44>
			params[i].objectNumber = 3;
    3000:	2003      	movs	r0, #3
    3002:	7638      	strb	r0, [r7, #24]
    3004:	e5de      	b.n	2bc4 <parsePreset+0xf44>
		if ((i >= Osc1) && (i < Osc2))
    3006:	2000      	movs	r0, #0
    3008:	e5dc      	b.n	2bc4 <parsePreset+0xf44>
			bufferIndex += 5;
    300a:	f108 0805 	add.w	r8, r8, #5
    300e:	fa1f f888 	uxth.w	r8, r8
    3012:	e785      	b.n	2f20 <parsePreset+0x12a0>
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    3014:	f1a3 0214 	sub.w	r2, r3, #20
    3018:	2a03      	cmp	r2, #3
    301a:	f63f aed2 	bhi.w	2dc2 <parsePreset+0x1142>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    301e:	4a11      	ldr	r2, [pc, #68]	; (3064 <parsePreset+0x13e4>)
    3020:	f04f 0101 	mov.w	r1, #1
    3024:	441a      	add	r2, r3
    3026:	f802 1c14 	strb.w	r1, [r2, #-20]
    302a:	e6ca      	b.n	2dc2 <parsePreset+0x1142>
		uint8_t whichHook = 0;
    302c:	4635      	mov	r5, r6
    302e:	e652      	b.n	2cd6 <parsePreset+0x1056>
			noiseOn = 1;
    3030:	4b0d      	ldr	r3, [pc, #52]	; (3068 <parsePreset+0x13e8>)
    3032:	f04f 0201 	mov.w	r2, #1
    3036:	701a      	strb	r2, [r3, #0]
		if ((source >= PEDAL_SOURCE_OFFSET) && (source < (PEDAL_SOURCE_OFFSET + 10)))
    3038:	e6d7      	b.n	2dea <parsePreset+0x116a>
    303a:	bf00      	nop
    303c:	20019310 	.word	0x20019310
    3040:	200186c8 	.word	0x200186c8
    3044:	2001d8ac 	.word	0x2001d8ac
    3048:	2001d41c 	.word	0x2001d41c
    304c:	2001d68c 	.word	0x2001d68c
    3050:	2001a434 	.word	0x2001a434
    3054:	20005238 	.word	0x20005238
    3058:	200186d0 	.word	0x200186d0
    305c:	20000694 	.word	0x20000694
    3060:	00000000 	.word	0x00000000
    3064:	2001d318 	.word	0x2001d318
    3068:	2001d660 	.word	0x2001d660
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    306c:	234c      	movs	r3, #76	; 0x4c
    306e:	1d29      	adds	r1, r5, #4
    3070:	00ea      	lsls	r2, r5, #3
    3072:	486c      	ldr	r0, [pc, #432]	; (3224 <parsePreset+0x15a4>)
    3074:	fb03 f304 	mul.w	r3, r3, r4
    3078:	441a      	add	r2, r3
    307a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    307e:	496a      	ldr	r1, [pc, #424]	; (3228 <parsePreset+0x15a8>)
    3080:	4402      	add	r2, r0
    3082:	4403      	add	r3, r0
    3084:	6291      	str	r1, [r2, #40]	; 0x28
    3086:	6059      	str	r1, [r3, #4]
    3088:	e720      	b.n	2ecc <parsePreset+0x124c>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    308a:	9b06      	ldr	r3, [sp, #24]
    308c:	2b03      	cmp	r3, #3
    308e:	f63f aedd 	bhi.w	2e4c <parsePreset+0x11cc>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    3092:	4b66      	ldr	r3, [pc, #408]	; (322c <parsePreset+0x15ac>)
    3094:	f04f 0201 	mov.w	r2, #1
    3098:	443b      	add	r3, r7
    309a:	f803 2c14 	strb.w	r2, [r3, #-20]
    309e:	e6d5      	b.n	2e4c <parsePreset+0x11cc>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    30a0:	9b06      	ldr	r3, [sp, #24]
    30a2:	2b03      	cmp	r3, #3
    30a4:	f63f aefe 	bhi.w	2ea4 <parsePreset+0x1224>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    30a8:	4b60      	ldr	r3, [pc, #384]	; (322c <parsePreset+0x15ac>)
    30aa:	f04f 0201 	mov.w	r2, #1
    30ae:	443b      	add	r3, r7
    30b0:	f803 2c14 	strb.w	r2, [r3, #-20]
    30b4:	e6f6      	b.n	2ea4 <parsePreset+0x1224>
			for (int v = 0; v < numStringsThisBoard; v++)
    30b6:	4b5e      	ldr	r3, [pc, #376]	; (3230 <parsePreset+0x15b0>)
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    30b8:	b2ff      	uxtb	r7, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    30ba:	781a      	ldrb	r2, [r3, #0]
    30bc:	2a00      	cmp	r2, #0
    30be:	f000 80ac 	beq.w	321a <parsePreset+0x159a>
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    30c2:	4b5c      	ldr	r3, [pc, #368]	; (3234 <parsePreset+0x15b4>)
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    30c4:	f107 0a03 	add.w	sl, r7, #3
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    30c8:	0092      	lsls	r2, r2, #2
    30ca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    30ce:	9b07      	ldr	r3, [sp, #28]
    30d0:	ebca 01ca 	rsb	r1, sl, sl, lsl #3
    30d4:	ea4f 09ca 	mov.w	r9, sl, lsl #3
    30d8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    30dc:	3108      	adds	r1, #8
    30de:	f008 fef3 	bl	bec8 <__memcpy_veneer>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    30e2:	9a07      	ldr	r2, [sp, #28]
    30e4:	eba9 030a 	sub.w	r3, r9, sl
    30e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    30ec:	ed93 0a02 	vldr	s0, [r3, #8]
    30f0:	4b51      	ldr	r3, [pc, #324]	; (3238 <parsePreset+0x15b8>)
    30f2:	eb03 0087 	add.w	r0, r3, r7, lsl #2
    30f6:	f008 ff67 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[whichMacro] = 1;
    30fa:	4b50      	ldr	r3, [pc, #320]	; (323c <parsePreset+0x15bc>)
    30fc:	f04f 0201 	mov.w	r2, #1
    3100:	55da      	strb	r2, [r3, r7]
			knobTicked[whichMacro] = 1;
    3102:	2201      	movs	r2, #1
    3104:	4b4e      	ldr	r3, [pc, #312]	; (3240 <parsePreset+0x15c0>)
    3106:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
		if ((source >= PEDAL_SOURCE_OFFSET) && (source < (PEDAL_SOURCE_OFFSET + 10)))
    310a:	e66e      	b.n	2dea <parsePreset+0x116a>
					noiseOn = 1;
    310c:	4b4d      	ldr	r3, [pc, #308]	; (3244 <parsePreset+0x15c4>)
    310e:	f04f 0201 	mov.w	r2, #1
    3112:	701a      	strb	r2, [r3, #0]
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    3114:	e6a7      	b.n	2e66 <parsePreset+0x11e6>
					noiseOn = 1;
    3116:	4b4b      	ldr	r3, [pc, #300]	; (3244 <parsePreset+0x15c4>)
    3118:	f04f 0201 	mov.w	r2, #1
    311c:	701a      	strb	r2, [r3, #0]
				if ((scalar >= MACRO_SOURCE_OFFSET) && (scalar < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    311e:	e6ce      	b.n	2ebe <parsePreset+0x123e>
					for (int v = 0; v < numStringsThisBoard; v++)
    3120:	4b43      	ldr	r3, [pc, #268]	; (3230 <parsePreset+0x15b0>)
    3122:	781a      	ldrb	r2, [r3, #0]
    3124:	2a00      	cmp	r2, #0
    3126:	f000 8464 	beq.w	39f2 <parsePreset+0x1d72>
						sourceValues[scalar][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    312a:	4b42      	ldr	r3, [pc, #264]	; (3234 <parsePreset+0x15b4>)
    312c:	0092      	lsls	r2, r2, #2
    312e:	9909      	ldr	r1, [sp, #36]	; 0x24
    3130:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3134:	9b03      	ldr	r3, [sp, #12]
    3136:	f103 0903 	add.w	r9, r3, #3
						sourceValues[scalar][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    313a:	9b07      	ldr	r3, [sp, #28]
    313c:	ebc9 01c9 	rsb	r1, r9, r9, lsl #3
    3140:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    3144:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3148:	3108      	adds	r1, #8
    314a:	f008 febd 	bl	bec8 <__memcpy_veneer>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    314e:	eba7 0309 	sub.w	r3, r7, r9
    3152:	e9dd 2007 	ldrd	r2, r0, [sp, #28]
    3156:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    315a:	ed93 0a02 	vldr	s0, [r3, #8]
    315e:	f008 ff33 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    3162:	4a36      	ldr	r2, [pc, #216]	; (323c <parsePreset+0x15bc>)
    3164:	9b03      	ldr	r3, [sp, #12]
    3166:	f04f 0101 	mov.w	r1, #1
    316a:	54d1      	strb	r1, [r2, r3]
					knobTicked[whichMacro] = 1;
    316c:	2101      	movs	r1, #1
    316e:	4a34      	ldr	r2, [pc, #208]	; (3240 <parsePreset+0x15c0>)
    3170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    3174:	e6aa      	b.n	2ecc <parsePreset+0x124c>
					for (int v = 0; v < numStringsThisBoard; v++)
    3176:	4b2e      	ldr	r3, [pc, #184]	; (3230 <parsePreset+0x15b0>)
    3178:	781a      	ldrb	r2, [r3, #0]
    317a:	2a00      	cmp	r2, #0
    317c:	f000 8431 	beq.w	39e2 <parsePreset+0x1d62>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3180:	9b03      	ldr	r3, [sp, #12]
						sourceValues[scalar][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    3182:	0092      	lsls	r2, r2, #2
    3184:	492b      	ldr	r1, [pc, #172]	; (3234 <parsePreset+0x15b4>)
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3186:	f103 0c03 	add.w	ip, r3, #3
						sourceValues[scalar][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    318a:	9809      	ldr	r0, [sp, #36]	; 0x24
    318c:	9b07      	ldr	r3, [sp, #28]
    318e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3192:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    3196:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    319a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    319e:	3108      	adds	r1, #8
    31a0:	e9cd 3c0a 	strd	r3, ip, [sp, #40]	; 0x28
    31a4:	f008 fe90 	bl	bec8 <__memcpy_veneer>
    31a8:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    31ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    31ae:	9808      	ldr	r0, [sp, #32]
    31b0:	eba2 030c 	sub.w	r3, r2, ip
    31b4:	9a07      	ldr	r2, [sp, #28]
    31b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    31ba:	ed93 0a02 	vldr	s0, [r3, #8]
    31be:	f008 ff03 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    31c2:	4a1e      	ldr	r2, [pc, #120]	; (323c <parsePreset+0x15bc>)
    31c4:	9b03      	ldr	r3, [sp, #12]
    31c6:	f04f 0101 	mov.w	r1, #1
    31ca:	54d1      	strb	r1, [r2, r3]
					knobTicked[whichMacro] = 1;
    31cc:	2101      	movs	r1, #1
    31ce:	4a1c      	ldr	r2, [pc, #112]	; (3240 <parsePreset+0x15c0>)
    31d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if ((scalar >= PEDAL_SOURCE_OFFSET) && (scalar < (PEDAL_SOURCE_OFFSET + 10)))
    31d4:	e64e      	b.n	2e74 <parsePreset+0x11f4>
	audioSwitchToSynth();
    31d6:	f008 ffab 	bl	c130 <__audioSwitchToSynth_veneer>
	presetWaitingToParse = 0;
    31da:	2400      	movs	r4, #0
    31dc:	4b1a      	ldr	r3, [pc, #104]	; (3248 <parsePreset+0x15c8>)
	overSampled = 1;
    31de:	2501      	movs	r5, #1
	currentActivePreset = presetNumber;
    31e0:	f89d 2008 	ldrb.w	r2, [sp, #8]
	presetWaitingToParse = 0;
    31e4:	601c      	str	r4, [r3, #0]
	changeOversampling(overSampled);
    31e6:	4628      	mov	r0, r5
	currentActivePreset = presetNumber;
    31e8:	4b18      	ldr	r3, [pc, #96]	; (324c <parsePreset+0x15cc>)
    31ea:	701a      	strb	r2, [r3, #0]
	audioMasterLevel = 1.0f;
    31ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    31f0:	4a17      	ldr	r2, [pc, #92]	; (3250 <parsePreset+0x15d0>)
    31f2:	6013      	str	r3, [r2, #0]
	oscToTick = NUM_OSC;
    31f4:	2203      	movs	r2, #3
    31f6:	4b17      	ldr	r3, [pc, #92]	; (3254 <parsePreset+0x15d4>)
    31f8:	701a      	strb	r2, [r3, #0]
	overSampled = 1;
    31fa:	4b17      	ldr	r3, [pc, #92]	; (3258 <parsePreset+0x15d8>)
    31fc:	601d      	str	r5, [r3, #0]
	changeOversampling(overSampled);
    31fe:	f008 fde7 	bl	bdd0 <__changeOversampling_veneer>
    3202:	b662      	cpsie	i
	diskBusy = 0;
    3204:	4a15      	ldr	r2, [pc, #84]	; (325c <parsePreset+0x15dc>)
	receivingI2C = 0;
    3206:	4b16      	ldr	r3, [pc, #88]	; (3260 <parsePreset+0x15e0>)
	presetReady = 1;
    3208:	4916      	ldr	r1, [pc, #88]	; (3264 <parsePreset+0x15e4>)
	diskBusy = 0;
    320a:	7014      	strb	r4, [r2, #0]
	presetReady = 1;
    320c:	600d      	str	r5, [r1, #0]
	receivingI2C = 0;
    320e:	701c      	strb	r4, [r3, #0]
}
    3210:	b00d      	add	sp, #52	; 0x34
    3212:	ecbd 8b02 	vpop	{d8}
    3216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    321a:	f107 0a03 	add.w	sl, r7, #3
    321e:	ea4f 09ca 	mov.w	r9, sl, lsl #3
    3222:	e75e      	b.n	30e2 <parsePreset+0x1462>
    3224:	200186c8 	.word	0x200186c8
    3228:	200006a8 	.word	0x200006a8
    322c:	2001d318 	.word	0x2001d318
    3230:	20000694 	.word	0x20000694
    3234:	2001d8ac 	.word	0x2001d8ac
    3238:	20005238 	.word	0x20005238
    323c:	200051d4 	.word	0x200051d4
    3240:	20016614 	.word	0x20016614
    3244:	2001d660 	.word	0x2001d660
    3248:	2001a474 	.word	0x2001a474
    324c:	200006a5 	.word	0x200006a5
    3250:	200006a0 	.word	0x200006a0
    3254:	200008e4 	.word	0x200008e4
    3258:	200008e8 	.word	0x200008e8
    325c:	20014490 	.word	0x20014490
    3260:	2001a8cc 	.word	0x2001a8cc
    3264:	2000534c 	.word	0x2000534c
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    3268:	9a02      	ldr	r2, [sp, #8]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    326a:	20c8      	movs	r0, #200	; 0xc8
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    326c:	4cfb      	ldr	r4, [pc, #1004]	; (365c <parsePreset+0x19dc>)
    326e:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
				presetName[i] = buffer[bufferIndex];
    3272:	f899 5004 	ldrb.w	r5, [r9, #4]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    3276:	fb02 f000 	mul.w	r0, r2, r0
				presetName[i] = buffer[bufferIndex];
    327a:	4af9      	ldr	r2, [pc, #996]	; (3660 <parsePreset+0x19e0>)
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    327c:	eb04 0143 	add.w	r1, r4, r3, lsl #1
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    3280:	ed9f 7af8 	vldr	s14, [pc, #992]	; 3664 <parsePreset+0x19e4>
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    3284:	005b      	lsls	r3, r3, #1
				presetName[i] = buffer[bufferIndex];
    3286:	7015      	strb	r5, [r2, #0]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    3288:	54e5      	strb	r5, [r4, r3]
				presetName[i] = buffer[bufferIndex];
    328a:	f899 3005 	ldrb.w	r3, [r9, #5]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    328e:	4cf6      	ldr	r4, [pc, #984]	; (3668 <parsePreset+0x19e8>)
				presetName[i] = buffer[bufferIndex];
    3290:	7053      	strb	r3, [r2, #1]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    3292:	704b      	strb	r3, [r1, #1]
				presetName[i] = buffer[bufferIndex];
    3294:	f899 3006 	ldrb.w	r3, [r9, #6]
    3298:	7093      	strb	r3, [r2, #2]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    329a:	708b      	strb	r3, [r1, #2]
				presetName[i] = buffer[bufferIndex];
    329c:	f899 3007 	ldrb.w	r3, [r9, #7]
    32a0:	70d3      	strb	r3, [r2, #3]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32a2:	70cb      	strb	r3, [r1, #3]
				presetName[i] = buffer[bufferIndex];
    32a4:	f899 3008 	ldrb.w	r3, [r9, #8]
    32a8:	7113      	strb	r3, [r2, #4]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32aa:	710b      	strb	r3, [r1, #4]
				presetName[i] = buffer[bufferIndex];
    32ac:	f899 3009 	ldrb.w	r3, [r9, #9]
    32b0:	7153      	strb	r3, [r2, #5]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32b2:	714b      	strb	r3, [r1, #5]
				presetName[i] = buffer[bufferIndex];
    32b4:	f899 300a 	ldrb.w	r3, [r9, #10]
    32b8:	7193      	strb	r3, [r2, #6]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32ba:	718b      	strb	r3, [r1, #6]
				presetName[i] = buffer[bufferIndex];
    32bc:	f899 300b 	ldrb.w	r3, [r9, #11]
    32c0:	71d3      	strb	r3, [r2, #7]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32c2:	71cb      	strb	r3, [r1, #7]
				presetName[i] = buffer[bufferIndex];
    32c4:	f899 300c 	ldrb.w	r3, [r9, #12]
    32c8:	7213      	strb	r3, [r2, #8]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32ca:	720b      	strb	r3, [r1, #8]
				presetName[i] = buffer[bufferIndex];
    32cc:	f899 300d 	ldrb.w	r3, [r9, #13]
    32d0:	7253      	strb	r3, [r2, #9]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32d2:	724b      	strb	r3, [r1, #9]
				presetName[i] = buffer[bufferIndex];
    32d4:	f899 300e 	ldrb.w	r3, [r9, #14]
    32d8:	7293      	strb	r3, [r2, #10]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32da:	728b      	strb	r3, [r1, #10]
				presetName[i] = buffer[bufferIndex];
    32dc:	f899 5010 	ldrb.w	r5, [r9, #16]
    32e0:	f899 300f 	ldrb.w	r3, [r9, #15]
    32e4:	72d3      	strb	r3, [r2, #11]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32e6:	72cb      	strb	r3, [r1, #11]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    32e8:	1823      	adds	r3, r4, r0
				presetName[i] = buffer[bufferIndex];
    32ea:	7315      	strb	r5, [r2, #12]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32ec:	730d      	strb	r5, [r1, #12]
				presetName[i] = buffer[bufferIndex];
    32ee:	f899 5011 	ldrb.w	r5, [r9, #17]
    32f2:	7355      	strb	r5, [r2, #13]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    32f4:	f899 2015 	ldrb.w	r2, [r9, #21]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    32f8:	734d      	strb	r5, [r1, #13]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    32fa:	5422      	strb	r2, [r4, r0]
    32fc:	f899 2016 	ldrb.w	r2, [r9, #22]
			whichModel = buffer[bufferIndex]; // not a synth preset, maybe string or additive or something
    3300:	f899 5014 	ldrb.w	r5, [r9, #20]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    3304:	705a      	strb	r2, [r3, #1]
    3306:	f899 2017 	ldrb.w	r2, [r9, #23]
    330a:	49d8      	ldr	r1, [pc, #864]	; (366c <parsePreset+0x19ec>)
    330c:	709a      	strb	r2, [r3, #2]
    330e:	f899 2018 	ldrb.w	r2, [r9, #24]
    3312:	f101 0450 	add.w	r4, r1, #80	; 0x50
    3316:	70da      	strb	r2, [r3, #3]
    3318:	f899 2019 	ldrb.w	r2, [r9, #25]
    331c:	711a      	strb	r2, [r3, #4]
    331e:	f899 201a 	ldrb.w	r2, [r9, #26]
    3322:	715a      	strb	r2, [r3, #5]
    3324:	f899 201b 	ldrb.w	r2, [r9, #27]
    3328:	719a      	strb	r2, [r3, #6]
    332a:	f899 201c 	ldrb.w	r2, [r9, #28]
    332e:	71da      	strb	r2, [r3, #7]
    3330:	f899 201d 	ldrb.w	r2, [r9, #29]
    3334:	721a      	strb	r2, [r3, #8]
    3336:	f899 201e 	ldrb.w	r2, [r9, #30]
    333a:	729a      	strb	r2, [r3, #10]
			whichModel = buffer[bufferIndex]; // not a synth preset, maybe string or additive or something
    333c:	4acc      	ldr	r2, [pc, #816]	; (3670 <parsePreset+0x19f0>)
    333e:	7015      	strb	r5, [r2, #0]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    3340:	f899 201f 	ldrb.w	r2, [r9, #31]
    3344:	72da      	strb	r2, [r3, #11]
    3346:	f899 2020 	ldrb.w	r2, [r9, #32]
    334a:	731a      	strb	r2, [r3, #12]
    334c:	f899 2021 	ldrb.w	r2, [r9, #33]	; 0x21
    3350:	735a      	strb	r2, [r3, #13]
    3352:	f899 2022 	ldrb.w	r2, [r9, #34]	; 0x22
    3356:	739a      	strb	r2, [r3, #14]
    3358:	f899 2023 	ldrb.w	r2, [r9, #35]	; 0x23
    335c:	73da      	strb	r2, [r3, #15]
    335e:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
    3362:	741a      	strb	r2, [r3, #16]
    3364:	f899 2025 	ldrb.w	r2, [r9, #37]	; 0x25
    3368:	745a      	strb	r2, [r3, #17]
    336a:	f899 2026 	ldrb.w	r2, [r9, #38]	; 0x26
    336e:	749a      	strb	r2, [r3, #18]
    3370:	f899 2027 	ldrb.w	r2, [r9, #39]	; 0x27
    3374:	751a      	strb	r2, [r3, #20]
    3376:	f899 2028 	ldrb.w	r2, [r9, #40]	; 0x28
    337a:	755a      	strb	r2, [r3, #21]
    337c:	f899 2029 	ldrb.w	r2, [r9, #41]	; 0x29
    3380:	759a      	strb	r2, [r3, #22]
    3382:	f899 202a 	ldrb.w	r2, [r9, #42]	; 0x2a
    3386:	75da      	strb	r2, [r3, #23]
    3388:	f899 202b 	ldrb.w	r2, [r9, #43]	; 0x2b
    338c:	761a      	strb	r2, [r3, #24]
    338e:	f899 202c 	ldrb.w	r2, [r9, #44]	; 0x2c
    3392:	765a      	strb	r2, [r3, #25]
    3394:	f899 202d 	ldrb.w	r2, [r9, #45]	; 0x2d
    3398:	769a      	strb	r2, [r3, #26]
    339a:	f899 202e 	ldrb.w	r2, [r9, #46]	; 0x2e
    339e:	76da      	strb	r2, [r3, #27]
    33a0:	f899 202f 	ldrb.w	r2, [r9, #47]	; 0x2f
    33a4:	771a      	strb	r2, [r3, #28]
    33a6:	f899 2030 	ldrb.w	r2, [r9, #48]	; 0x30
    33aa:	779a      	strb	r2, [r3, #30]
    33ac:	f899 2031 	ldrb.w	r2, [r9, #49]	; 0x31
    33b0:	77da      	strb	r2, [r3, #31]
    33b2:	f899 2032 	ldrb.w	r2, [r9, #50]	; 0x32
    33b6:	f883 2020 	strb.w	r2, [r3, #32]
    33ba:	f899 2033 	ldrb.w	r2, [r9, #51]	; 0x33
    33be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    33c2:	f899 2034 	ldrb.w	r2, [r9, #52]	; 0x34
    33c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    33ca:	f899 2035 	ldrb.w	r2, [r9, #53]	; 0x35
    33ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    33d2:	f899 2036 	ldrb.w	r2, [r9, #54]	; 0x36
    33d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    33da:	f899 2037 	ldrb.w	r2, [r9, #55]	; 0x37
    33de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    33e2:	f899 2038 	ldrb.w	r2, [r9, #56]	; 0x38
    33e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    33ea:	f899 2039 	ldrb.w	r2, [r9, #57]	; 0x39
    33ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    33f2:	f899 203a 	ldrb.w	r2, [r9, #58]	; 0x3a
    33f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    33fa:	f899 203b 	ldrb.w	r2, [r9, #59]	; 0x3b
    33fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    3402:	f899 203c 	ldrb.w	r2, [r9, #60]	; 0x3c
    3406:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    340a:	f899 203d 	ldrb.w	r2, [r9, #61]	; 0x3d
    340e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    3412:	f899 203e 	ldrb.w	r2, [r9, #62]	; 0x3e
    3416:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    341a:	f899 203f 	ldrb.w	r2, [r9, #63]	; 0x3f
    341e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    3422:	f899 2040 	ldrb.w	r2, [r9, #64]	; 0x40
    3426:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    342a:	f899 2041 	ldrb.w	r2, [r9, #65]	; 0x41
    342e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    3432:	f899 2042 	ldrb.w	r2, [r9, #66]	; 0x42
    3436:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    343a:	f899 2043 	ldrb.w	r2, [r9, #67]	; 0x43
    343e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    3442:	f899 2044 	ldrb.w	r2, [r9, #68]	; 0x44
    3446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    344a:	f899 2045 	ldrb.w	r2, [r9, #69]	; 0x45
    344e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    3452:	f899 2046 	ldrb.w	r2, [r9, #70]	; 0x46
    3456:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    345a:	f899 2047 	ldrb.w	r2, [r9, #71]	; 0x47
    345e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    3462:	f899 2048 	ldrb.w	r2, [r9, #72]	; 0x48
    3466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    346a:	f899 2049 	ldrb.w	r2, [r9, #73]	; 0x49
    346e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    3472:	f899 204a 	ldrb.w	r2, [r9, #74]	; 0x4a
    3476:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    347a:	f899 204b 	ldrb.w	r2, [r9, #75]	; 0x4b
    347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    3482:	f899 204c 	ldrb.w	r2, [r9, #76]	; 0x4c
    3486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    348a:	f899 204d 	ldrb.w	r2, [r9, #77]	; 0x4d
    348e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    3492:	f899 204e 	ldrb.w	r2, [r9, #78]	; 0x4e
    3496:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    349a:	f899 204f 	ldrb.w	r2, [r9, #79]	; 0x4f
    349e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    34a2:	f899 2050 	ldrb.w	r2, [r9, #80]	; 0x50
    34a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    34aa:	f899 2051 	ldrb.w	r2, [r9, #81]	; 0x51
    34ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    34b2:	f899 2052 	ldrb.w	r2, [r9, #82]	; 0x52
    34b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    34ba:	f899 2053 	ldrb.w	r2, [r9, #83]	; 0x53
    34be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    34c2:	f899 2054 	ldrb.w	r2, [r9, #84]	; 0x54
    34c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    34ca:	f899 2055 	ldrb.w	r2, [r9, #85]	; 0x55
    34ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    34d2:	f899 2056 	ldrb.w	r2, [r9, #86]	; 0x56
    34d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    34da:	f899 2057 	ldrb.w	r2, [r9, #87]	; 0x57
    34de:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    34e2:	f899 2058 	ldrb.w	r2, [r9, #88]	; 0x58
    34e6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    34ea:	f899 2059 	ldrb.w	r2, [r9, #89]	; 0x59
    34ee:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
    34f2:	f899 205a 	ldrb.w	r2, [r9, #90]	; 0x5a
    34f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    34fa:	f899 205b 	ldrb.w	r2, [r9, #91]	; 0x5b
    34fe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    3502:	f899 205c 	ldrb.w	r2, [r9, #92]	; 0x5c
    3506:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    350a:	f899 205d 	ldrb.w	r2, [r9, #93]	; 0x5d
    350e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    3512:	f899 205e 	ldrb.w	r2, [r9, #94]	; 0x5e
    3516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    351a:	f899 205f 	ldrb.w	r2, [r9, #95]	; 0x5f
    351e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    3522:	f899 2060 	ldrb.w	r2, [r9, #96]	; 0x60
    3526:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    352a:	f899 2061 	ldrb.w	r2, [r9, #97]	; 0x61
    352e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    3532:	f899 2062 	ldrb.w	r2, [r9, #98]	; 0x62
    3536:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    353a:	f899 2063 	ldrb.w	r2, [r9, #99]	; 0x63
    353e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    3542:	f899 2064 	ldrb.w	r2, [r9, #100]	; 0x64
    3546:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
    354a:	f899 2065 	ldrb.w	r2, [r9, #101]	; 0x65
    354e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    3552:	f899 2066 	ldrb.w	r2, [r9, #102]	; 0x66
    3556:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
    355a:	f899 2067 	ldrb.w	r2, [r9, #103]	; 0x67
    355e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
    3562:	f899 2068 	ldrb.w	r2, [r9, #104]	; 0x68
    3566:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
    356a:	f899 2069 	ldrb.w	r2, [r9, #105]	; 0x69
    356e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    3572:	f899 206a 	ldrb.w	r2, [r9, #106]	; 0x6a
    3576:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    357a:	f899 206b 	ldrb.w	r2, [r9, #107]	; 0x6b
    357e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
    3582:	f899 206c 	ldrb.w	r2, [r9, #108]	; 0x6c
    3586:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
    358a:	f899 206d 	ldrb.w	r2, [r9, #109]	; 0x6d
    358e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    3592:	f899 206e 	ldrb.w	r2, [r9, #110]	; 0x6e
    3596:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    359a:	f899 206f 	ldrb.w	r2, [r9, #111]	; 0x6f
    359e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
    35a2:	f899 2070 	ldrb.w	r2, [r9, #112]	; 0x70
    35a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
    35aa:	f899 2071 	ldrb.w	r2, [r9, #113]	; 0x71
    35ae:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    35b2:	f899 2072 	ldrb.w	r2, [r9, #114]	; 0x72
    35b6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    35ba:	f899 2073 	ldrb.w	r2, [r9, #115]	; 0x73
    35be:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    35c2:	f899 2074 	ldrb.w	r2, [r9, #116]	; 0x74
    35c6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    35ca:	f899 2075 	ldrb.w	r2, [r9, #117]	; 0x75
    35ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    35d2:	f899 2076 	ldrb.w	r2, [r9, #118]	; 0x76
    35d6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    35da:	f899 2077 	ldrb.w	r2, [r9, #119]	; 0x77
    35de:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    35e2:	f899 2078 	ldrb.w	r2, [r9, #120]	; 0x78
    35e6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
    35ea:	f899 2079 	ldrb.w	r2, [r9, #121]	; 0x79
    35ee:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    35f2:	f899 207a 	ldrb.w	r2, [r9, #122]	; 0x7a
    35f6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    35fa:	f899 207b 	ldrb.w	r2, [r9, #123]	; 0x7b
    35fe:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
    3602:	f899 207c 	ldrb.w	r2, [r9, #124]	; 0x7c
    3606:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
    360a:	f899 207d 	ldrb.w	r2, [r9, #125]	; 0x7d
    360e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    3612:	f899 207e 	ldrb.w	r2, [r9, #126]	; 0x7e
    3616:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    361a:	f899 207f 	ldrb.w	r2, [r9, #127]	; 0x7f
    361e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
    3622:	f899 2080 	ldrb.w	r2, [r9, #128]	; 0x80
    3626:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
    362a:	f899 2081 	ldrb.w	r2, [r9, #129]	; 0x81
    362e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    3632:	f899 2082 	ldrb.w	r2, [r9, #130]	; 0x82
    3636:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    363a:	f899 2083 	ldrb.w	r2, [r9, #131]	; 0x83
    363e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
    3642:	f899 2084 	ldrb.w	r2, [r9, #132]	; 0x84
    3646:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
					macroNamesArray[presetNumber][j+12][k] = buffer[bufferIndex];
    364a:	f899 2085 	ldrb.w	r2, [r9, #133]	; 0x85
    364e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    3652:	f899 2086 	ldrb.w	r2, [r9, #134]	; 0x86
    3656:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    365a:	e00b      	b.n	3674 <parsePreset+0x19f4>
    365c:	30042000 	.word	0x30042000
    3660:	2001a460 	.word	0x2001a460
    3664:	377ffff6 	.word	0x377ffff6
    3668:	30043380 	.word	0x30043380
    366c:	20018678 	.word	0x20018678
    3670:	2001ca75 	.word	0x2001ca75
    3674:	f899 2087 	ldrb.w	r2, [r9, #135]	; 0x87
    3678:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
    367c:	f899 2088 	ldrb.w	r2, [r9, #136]	; 0x88
    3680:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
    3684:	f899 2089 	ldrb.w	r2, [r9, #137]	; 0x89
    3688:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    368c:	f899 208a 	ldrb.w	r2, [r9, #138]	; 0x8a
    3690:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    3694:	f899 208b 	ldrb.w	r2, [r9, #139]	; 0x8b
    3698:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    369c:	f899 208c 	ldrb.w	r2, [r9, #140]	; 0x8c
    36a0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    36a4:	f899 208d 	ldrb.w	r2, [r9, #141]	; 0x8d
    36a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    36ac:	f899 208e 	ldrb.w	r2, [r9, #142]	; 0x8e
    36b0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    36b4:	f899 208f 	ldrb.w	r2, [r9, #143]	; 0x8f
    36b8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
    36bc:	f899 2090 	ldrb.w	r2, [r9, #144]	; 0x90
    36c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    36c4:	f899 2091 	ldrb.w	r2, [r9, #145]	; 0x91
    36c8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    36cc:	f899 2092 	ldrb.w	r2, [r9, #146]	; 0x92
    36d0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    36d4:	f899 2093 	ldrb.w	r2, [r9, #147]	; 0x93
    36d8:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
    36dc:	f899 2094 	ldrb.w	r2, [r9, #148]	; 0x94
    36e0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    36e4:	f899 2095 	ldrb.w	r2, [r9, #149]	; 0x95
    36e8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    36ec:	f899 2096 	ldrb.w	r2, [r9, #150]	; 0x96
    36f0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
    36f4:	f899 2097 	ldrb.w	r2, [r9, #151]	; 0x97
    36f8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    36fc:	f899 2098 	ldrb.w	r2, [r9, #152]	; 0x98
    3700:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
    3704:	f899 2099 	ldrb.w	r2, [r9, #153]	; 0x99
    3708:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    370c:	f899 209a 	ldrb.w	r2, [r9, #154]	; 0x9a
    3710:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
    3714:	f899 209b 	ldrb.w	r2, [r9, #155]	; 0x9b
    3718:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    371c:	f899 209c 	ldrb.w	r2, [r9, #156]	; 0x9c
    3720:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
    3724:	f899 209d 	ldrb.w	r2, [r9, #157]	; 0x9d
    3728:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
    372c:	f899 209e 	ldrb.w	r2, [r9, #158]	; 0x9e
    3730:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    3734:	f899 209f 	ldrb.w	r2, [r9, #159]	; 0x9f
    3738:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    373c:	f899 20a0 	ldrb.w	r2, [r9, #160]	; 0xa0
    3740:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    3744:	f899 20a1 	ldrb.w	r2, [r9, #161]	; 0xa1
    3748:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
    374c:	f899 20a2 	ldrb.w	r2, [r9, #162]	; 0xa2
    3750:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    3754:	f899 20a3 	ldrb.w	r2, [r9, #163]	; 0xa3
    3758:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
    375c:	f899 20a4 	ldrb.w	r2, [r9, #164]	; 0xa4
    3760:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    3764:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
    3768:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
    376c:	f899 20a6 	ldrb.w	r2, [r9, #166]	; 0xa6
    3770:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    3774:	f899 20a7 	ldrb.w	r2, [r9, #167]	; 0xa7
    3778:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    377c:	f899 20a8 	ldrb.w	r2, [r9, #168]	; 0xa8
    3780:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
    3784:	f899 20a9 	ldrb.w	r2, [r9, #169]	; 0xa9
    3788:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    378c:	f899 20aa 	ldrb.w	r2, [r9, #170]	; 0xaa
    3790:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
    3794:	f899 20ab 	ldrb.w	r2, [r9, #171]	; 0xab
    3798:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    379c:	f899 20ac 	ldrb.w	r2, [r9, #172]	; 0xac
    37a0:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
    37a4:	f899 20ad 	ldrb.w	r2, [r9, #173]	; 0xad
    37a8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    37ac:	f899 20ae 	ldrb.w	r2, [r9, #174]	; 0xae
    37b0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
    37b4:	f899 20af 	ldrb.w	r2, [r9, #175]	; 0xaf
    37b8:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
    37bc:	f899 20b0 	ldrb.w	r2, [r9, #176]	; 0xb0
    37c0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    37c4:	f899 20b1 	ldrb.w	r2, [r9, #177]	; 0xb1
    37c8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    37cc:	f899 20b2 	ldrb.w	r2, [r9, #178]	; 0xb2
    37d0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    37d4:	f899 20b3 	ldrb.w	r2, [r9, #179]	; 0xb3
    37d8:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
    37dc:	f899 20b4 	ldrb.w	r2, [r9, #180]	; 0xb4
    37e0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    37e4:	f899 20b5 	ldrb.w	r2, [r9, #181]	; 0xb5
    37e8:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
    37ec:	f899 20b6 	ldrb.w	r2, [r9, #182]	; 0xb6
    37f0:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
    37f4:	f899 20b7 	ldrb.w	r2, [r9, #183]	; 0xb7
    37f8:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
    37fc:	f899 20b8 	ldrb.w	r2, [r9, #184]	; 0xb8
    3800:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    3804:	f899 20b9 	ldrb.w	r2, [r9, #185]	; 0xb9
    3808:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    380c:	f899 20ba 	ldrb.w	r2, [r9, #186]	; 0xba
    3810:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
    3814:	f899 20bb 	ldrb.w	r2, [r9, #187]	; 0xbb
    3818:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    381c:	f899 20bc 	ldrb.w	r2, [r9, #188]	; 0xbc
    3820:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
    3824:	f899 20bd 	ldrb.w	r2, [r9, #189]	; 0xbd
    3828:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
    382c:	f899 20be 	ldrb.w	r2, [r9, #190]	; 0xbe
    3830:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
    3834:	f899 20bf 	ldrb.w	r2, [r9, #191]	; 0xbf
    3838:	f899 00c0 	ldrb.w	r0, [r9, #192]	; 0xc0
    383c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    3840:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
    3844:	f899 00c1 	ldrb.w	r0, [r9, #193]	; 0xc1
    3848:	4a71      	ldr	r2, [pc, #452]	; (3a10 <parsePreset+0x1d90>)
    384a:	f883 00ba 	strb.w	r0, [r3, #186]	; 0xba
    384e:	f899 00c2 	ldrb.w	r0, [r9, #194]	; 0xc2
    3852:	f883 00bb 	strb.w	r0, [r3, #187]	; 0xbb
    3856:	f899 00c3 	ldrb.w	r0, [r9, #195]	; 0xc3
    385a:	f883 00bc 	strb.w	r0, [r3, #188]	; 0xbc
    385e:	f899 00c4 	ldrb.w	r0, [r9, #196]	; 0xc4
    3862:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
    3866:	f899 00c5 	ldrb.w	r0, [r9, #197]	; 0xc5
    386a:	f883 00bf 	strb.w	r0, [r3, #191]	; 0xbf
    386e:	f899 00c6 	ldrb.w	r0, [r9, #198]	; 0xc6
    3872:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
    3876:	f899 00c7 	ldrb.w	r0, [r9, #199]	; 0xc7
    387a:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
    387e:	f899 00c8 	ldrb.w	r0, [r9, #200]	; 0xc8
    3882:	f883 00c2 	strb.w	r0, [r3, #194]	; 0xc2
    3886:	f899 00c9 	ldrb.w	r0, [r9, #201]	; 0xc9
    388a:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
    388e:	f899 00ca 	ldrb.w	r0, [r9, #202]	; 0xca
    3892:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
    3896:	f899 00cb 	ldrb.w	r0, [r9, #203]	; 0xcb
    389a:	f883 00c5 	strb.w	r0, [r3, #197]	; 0xc5
    389e:	f899 00cc 	ldrb.w	r0, [r9, #204]	; 0xcc
    38a2:	f883 00c6 	strb.w	r0, [r3, #198]	; 0xc6
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    38a6:	f892 00cd 	ldrb.w	r0, [r2, #205]	; 0xcd
			for (int i = 0; i < 20; i++)
    38aa:	3202      	adds	r2, #2
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    38ac:	f892 30cc 	ldrb.w	r3, [r2, #204]	; 0xcc
    38b0:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    38b4:	ee07 3a90 	vmov	s15, r3
    38b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    38bc:	ee67 7a87 	vmul.f32	s15, s15, s14
    38c0:	ece1 7a01 	vstmia	r1!, {s15}
			for (int i = 0; i < 20; i++)
    38c4:	428c      	cmp	r4, r1
    38c6:	d1ee      	bne.n	38a6 <parsePreset+0x1c26>
			presetWaitingToParse = 0;
    38c8:	4b52      	ldr	r3, [pc, #328]	; (3a14 <parsePreset+0x1d94>)
    38ca:	2100      	movs	r1, #0
			currentActivePreset = presetNumber;
    38cc:	f89d 2008 	ldrb.w	r2, [sp, #8]
			if (whichModel == 1)
    38d0:	2d01      	cmp	r5, #1
			presetWaitingToParse = 0;
    38d2:	6019      	str	r1, [r3, #0]
			currentActivePreset = presetNumber;
    38d4:	4b50      	ldr	r3, [pc, #320]	; (3a18 <parsePreset+0x1d98>)
    38d6:	701a      	strb	r2, [r3, #0]
			if (whichModel == 1)
    38d8:	d011      	beq.n	38fe <parsePreset+0x1c7e>
			else if (whichModel == 2)
    38da:	3d02      	subs	r5, #2
    38dc:	2d03      	cmp	r5, #3
    38de:	d810      	bhi.n	3902 <parsePreset+0x1c82>
    38e0:	e8df f005 	tbb	[pc, r5]
    38e4:	696f757b 	.word	0x696f757b
			oscOn[i] = 0;
    38e8:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    38ea:	4610      	mov	r0, r2
    38ec:	f7fe bf56 	b.w	279c <parsePreset+0xb1c>
		pedalControlsMaster = 1;
    38f0:	2301      	movs	r3, #1
    38f2:	f7ff b9a8 	b.w	2c46 <parsePreset+0xfc6>
			oscOn[i] = 0;
    38f6:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    38f8:	4610      	mov	r0, r2
    38fa:	f7fe bf85 	b.w	2808 <parsePreset+0xb88>
				switchStrings = 1;
    38fe:	4b47      	ldr	r3, [pc, #284]	; (3a1c <parsePreset+0x1d9c>)
    3900:	601d      	str	r5, [r3, #0]
			audioMasterLevel = 1.0f;
    3902:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    3906:	4a46      	ldr	r2, [pc, #280]	; (3a20 <parsePreset+0x1da0>)
    3908:	6013      	str	r3, [r2, #0]
    390a:	b662      	cpsie	i
			diskBusy = 0;
    390c:	2300      	movs	r3, #0
			presetReady = 1;
    390e:	2001      	movs	r0, #1
			diskBusy = 0;
    3910:	4944      	ldr	r1, [pc, #272]	; (3a24 <parsePreset+0x1da4>)
			receivingI2C = 0;
    3912:	4a45      	ldr	r2, [pc, #276]	; (3a28 <parsePreset+0x1da8>)
			presetReady = 1;
    3914:	4c45      	ldr	r4, [pc, #276]	; (3a2c <parsePreset+0x1dac>)
			diskBusy = 0;
    3916:	700b      	strb	r3, [r1, #0]
			presetReady = 1;
    3918:	6020      	str	r0, [r4, #0]
			receivingI2C = 0;
    391a:	7013      	strb	r3, [r2, #0]
			return;
    391c:	f7fe bd89 	b.w	2432 <parsePreset+0x7b2>
			  shapeTick[i] = &triTick;
    3920:	4a43      	ldr	r2, [pc, #268]	; (3a30 <parsePreset+0x1db0>)
    3922:	4844      	ldr	r0, [pc, #272]	; (3a34 <parsePreset+0x1db4>)
    3924:	6090      	str	r0, [r2, #8]
			  break;
    3926:	f7fe bf60 	b.w	27ea <parsePreset+0xb6a>
			  shapeTick[i] = &pulseTick;
    392a:	4a41      	ldr	r2, [pc, #260]	; (3a30 <parsePreset+0x1db0>)
    392c:	4842      	ldr	r0, [pc, #264]	; (3a38 <parsePreset+0x1db8>)
    392e:	6090      	str	r0, [r2, #8]
			  break;
    3930:	f7fe bf5b 	b.w	27ea <parsePreset+0xb6a>
			  shapeTick[i] = &sawTick;
    3934:	4a3e      	ldr	r2, [pc, #248]	; (3a30 <parsePreset+0x1db0>)
    3936:	4841      	ldr	r0, [pc, #260]	; (3a3c <parsePreset+0x1dbc>)
    3938:	6090      	str	r0, [r2, #8]
			  break;
    393a:	f7fe bf56 	b.w	27ea <parsePreset+0xb6a>
			  shapeTick[i] = &sineTriTick;
    393e:	4a3c      	ldr	r2, [pc, #240]	; (3a30 <parsePreset+0x1db0>)
    3940:	483f      	ldr	r0, [pc, #252]	; (3a40 <parsePreset+0x1dc0>)
    3942:	6090      	str	r0, [r2, #8]
			  break;
    3944:	f7fe bf51 	b.w	27ea <parsePreset+0xb6a>
			  shapeTick[i] = &sawSquareTick;
    3948:	4a39      	ldr	r2, [pc, #228]	; (3a30 <parsePreset+0x1db0>)
    394a:	483e      	ldr	r0, [pc, #248]	; (3a44 <parsePreset+0x1dc4>)
    394c:	6090      	str	r0, [r2, #8]
			  break;
    394e:	f7fe bf4c 	b.w	27ea <parsePreset+0xb6a>
			  shapeTick[i] = &triTick;
    3952:	4a37      	ldr	r2, [pc, #220]	; (3a30 <parsePreset+0x1db0>)
    3954:	4837      	ldr	r0, [pc, #220]	; (3a34 <parsePreset+0x1db4>)
    3956:	6050      	str	r0, [r2, #4]
			  break;
    3958:	f7fe bf11 	b.w	277e <parsePreset+0xafe>
			  shapeTick[i] = &sineTick;
    395c:	4a34      	ldr	r2, [pc, #208]	; (3a30 <parsePreset+0x1db0>)
    395e:	483a      	ldr	r0, [pc, #232]	; (3a48 <parsePreset+0x1dc8>)
    3960:	6050      	str	r0, [r2, #4]
			  break;
    3962:	f7fe bf0c 	b.w	277e <parsePreset+0xafe>
			  shapeTick[i] = &pulseTick;
    3966:	4a32      	ldr	r2, [pc, #200]	; (3a30 <parsePreset+0x1db0>)
    3968:	4833      	ldr	r0, [pc, #204]	; (3a38 <parsePreset+0x1db8>)
    396a:	6050      	str	r0, [r2, #4]
			  break;
    396c:	f7fe bf07 	b.w	277e <parsePreset+0xafe>
			  shapeTick[i] = &sawTick;
    3970:	4a2f      	ldr	r2, [pc, #188]	; (3a30 <parsePreset+0x1db0>)
    3972:	4832      	ldr	r0, [pc, #200]	; (3a3c <parsePreset+0x1dbc>)
    3974:	6050      	str	r0, [r2, #4]
			  break;
    3976:	f7fe bf02 	b.w	277e <parsePreset+0xafe>
			  shapeTick[i] = &sawSquareTick;
    397a:	4a2d      	ldr	r2, [pc, #180]	; (3a30 <parsePreset+0x1db0>)
    397c:	4831      	ldr	r0, [pc, #196]	; (3a44 <parsePreset+0x1dc4>)
    397e:	6050      	str	r0, [r2, #4]
			  break;
    3980:	f7fe befd 	b.w	277e <parsePreset+0xafe>
			  shapeTick[i] = &triTick;
    3984:	4b2a      	ldr	r3, [pc, #168]	; (3a30 <parsePreset+0x1db0>)
    3986:	4a2b      	ldr	r2, [pc, #172]	; (3a34 <parsePreset+0x1db4>)
    3988:	601a      	str	r2, [r3, #0]
			  break;
    398a:	f7fe be9c 	b.w	26c6 <parsePreset+0xa46>
			  shapeTick[i] = &sineTick;
    398e:	4b28      	ldr	r3, [pc, #160]	; (3a30 <parsePreset+0x1db0>)
    3990:	4a2d      	ldr	r2, [pc, #180]	; (3a48 <parsePreset+0x1dc8>)
    3992:	601a      	str	r2, [r3, #0]
			  break;
    3994:	f7fe be97 	b.w	26c6 <parsePreset+0xa46>
			  shapeTick[i] = &pulseTick;
    3998:	4b25      	ldr	r3, [pc, #148]	; (3a30 <parsePreset+0x1db0>)
    399a:	4a27      	ldr	r2, [pc, #156]	; (3a38 <parsePreset+0x1db8>)
    399c:	601a      	str	r2, [r3, #0]
			  break;
    399e:	f7fe be92 	b.w	26c6 <parsePreset+0xa46>
			  shapeTick[i] = &sawTick;
    39a2:	4b23      	ldr	r3, [pc, #140]	; (3a30 <parsePreset+0x1db0>)
    39a4:	4a25      	ldr	r2, [pc, #148]	; (3a3c <parsePreset+0x1dbc>)
    39a6:	601a      	str	r2, [r3, #0]
			  break;
    39a8:	f7fe be8d 	b.w	26c6 <parsePreset+0xa46>
			  shapeTick[i] = &sawSquareTick;
    39ac:	4b20      	ldr	r3, [pc, #128]	; (3a30 <parsePreset+0x1db0>)
    39ae:	4a25      	ldr	r2, [pc, #148]	; (3a44 <parsePreset+0x1dc4>)
    39b0:	601a      	str	r2, [r3, #0]
			  break;
    39b2:	f7fe be88 	b.w	26c6 <parsePreset+0xa46>
				audioFrameFunction = audioFrameString3;
    39b6:	4b25      	ldr	r3, [pc, #148]	; (3a4c <parsePreset+0x1dcc>)
    39b8:	4a25      	ldr	r2, [pc, #148]	; (3a50 <parsePreset+0x1dd0>)
    39ba:	601a      	str	r2, [r3, #0]
				audioSwitchToString3();
    39bc:	f003 ff70 	bl	78a0 <audioSwitchToString3>
    39c0:	e79f      	b.n	3902 <parsePreset+0x1c82>
				audioFrameFunction = audioFrameVocal;
    39c2:	4b22      	ldr	r3, [pc, #136]	; (3a4c <parsePreset+0x1dcc>)
    39c4:	4a23      	ldr	r2, [pc, #140]	; (3a54 <parsePreset+0x1dd4>)
    39c6:	601a      	str	r2, [r3, #0]
				audioSwitchToVocal();
    39c8:	f007 fe7a 	bl	b6c0 <audioSwitchToVocal>
    39cc:	e799      	b.n	3902 <parsePreset+0x1c82>
				audioFrameFunction = audioFrameAdditive;
    39ce:	4b1f      	ldr	r3, [pc, #124]	; (3a4c <parsePreset+0x1dcc>)
    39d0:	4a21      	ldr	r2, [pc, #132]	; (3a58 <parsePreset+0x1dd8>)
    39d2:	601a      	str	r2, [r3, #0]
				audioSwitchToAdditive();
    39d4:	f7fc ff64 	bl	8a0 <audioSwitchToAdditive>
    39d8:	e793      	b.n	3902 <parsePreset+0x1c82>
				switchStrings = 2;
    39da:	4b10      	ldr	r3, [pc, #64]	; (3a1c <parsePreset+0x1d9c>)
    39dc:	2202      	movs	r2, #2
    39de:	601a      	str	r2, [r3, #0]
    39e0:	e78f      	b.n	3902 <parsePreset+0x1c82>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    39e2:	9b03      	ldr	r3, [sp, #12]
    39e4:	f103 0c03 	add.w	ip, r3, #3
    39e8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
    39ec:	920a      	str	r2, [sp, #40]	; 0x28
    39ee:	f7ff bbdd 	b.w	31ac <parsePreset+0x152c>
    39f2:	9b03      	ldr	r3, [sp, #12]
    39f4:	f103 0903 	add.w	r9, r3, #3
    39f8:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    39fc:	f7ff bba7 	b.w	314e <parsePreset+0x14ce>
    3a00:	4c16      	ldr	r4, [pc, #88]	; (3a5c <parsePreset+0x1ddc>)
    3a02:	f7fe bd84 	b.w	250e <parsePreset+0x88e>
    3a06:	f8df b058 	ldr.w	fp, [pc, #88]	; 3a60 <parsePreset+0x1de0>
    3a0a:	f7fe bd6e 	b.w	24ea <parsePreset+0x86a>
    3a0e:	bf00      	nop
    3a10:	30042380 	.word	0x30042380
    3a14:	2001a474 	.word	0x2001a474
    3a18:	200006a5 	.word	0x200006a5
    3a1c:	2001423c 	.word	0x2001423c
    3a20:	200006a0 	.word	0x200006a0
    3a24:	20014490 	.word	0x20014490
    3a28:	2001a8cc 	.word	0x2001a8cc
    3a2c:	2000534c 	.word	0x2000534c
    3a30:	2001d830 	.word	0x2001d830
    3a34:	00008421 	.word	0x00008421
    3a38:	00008381 	.word	0x00008381
    3a3c:	00008341 	.word	0x00008341
    3a40:	000082e1 	.word	0x000082e1
    3a44:	00008281 	.word	0x00008281
    3a48:	000083e1 	.word	0x000083e1
    3a4c:	2000118c 	.word	0x2000118c
    3a50:	00007b21 	.word	0x00007b21
    3a54:	0000b8c1 	.word	0x0000b8c1
    3a58:	00000cc1 	.word	0x00000cc1
    3a5c:	2001a430 	.word	0x2001a430
    3a60:	20019320 	.word	0x20019320
    3a64:	f3af 8000 	nop.w
    3a68:	f3af 8000 	nop.w
    3a6c:	f3af 8000 	nop.w
    3a70:	f3af 8000 	nop.w
    3a74:	f3af 8000 	nop.w
    3a78:	f3af 8000 	nop.w
    3a7c:	f3af 8000 	nop.w

00003a80 <handleSPI>:
	if (foundBrainFirmware)
    3a80:	4972      	ldr	r1, [pc, #456]	; (3c4c <handleSPI+0x1cc>)
	interruptChecker = 1;
    3a82:	4b73      	ldr	r3, [pc, #460]	; (3c50 <handleSPI+0x1d0>)
{
    3a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 1;
    3a88:	2501      	movs	r5, #1
{
    3a8a:	4604      	mov	r4, r0
    3a8c:	ed2d 8b02 	vpush	{d8}
	if (foundBrainFirmware)
    3a90:	780a      	ldrb	r2, [r1, #0]
{
    3a92:	b089      	sub	sp, #36	; 0x24
	interruptChecker = 1;
    3a94:	701d      	strb	r5, [r3, #0]
	if (foundBrainFirmware)
    3a96:	b34a      	cbz	r2, 3aec <handleSPI+0x6c>
		if (brainFirmwareEndSignal)
    3a98:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 3c68 <handleSPI+0x1e8>
    3a9c:	f8d9 0000 	ldr.w	r0, [r9]
    3aa0:	2800      	cmp	r0, #0
    3aa2:	d041      	beq.n	3b28 <handleSPI+0xa8>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    3aa4:	4b6b      	ldr	r3, [pc, #428]	; (3c54 <handleSPI+0x1d4>)
    3aa6:	20f9      	movs	r0, #249	; 0xf9
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    3aa8:	4a6b      	ldr	r2, [pc, #428]	; (3c58 <handleSPI+0x1d8>)
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    3aaa:	4423      	add	r3, r4
			brainFirmwareSendInProgress = 0;
    3aac:	4c6b      	ldr	r4, [pc, #428]	; (3c5c <handleSPI+0x1dc>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    3aae:	6812      	ldr	r2, [r2, #0]
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    3ab0:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
			brainFirmwareEndSignal = 0;
    3ab4:	2000      	movs	r0, #0
			foundBrainFirmware = 0;
    3ab6:	7008      	strb	r0, [r1, #0]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    3ab8:	0c11      	lsrs	r1, r2, #16
			brainFirmwareSendInProgress = 0;
    3aba:	6020      	str	r0, [r4, #0]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    3abc:	0e14      	lsrs	r4, r2, #24
			brainFirmwareEndSignal = 0;
    3abe:	f8c9 0000 	str.w	r0, [r9]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    3ac2:	0a10      	lsrs	r0, r2, #8
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    3ac4:	3a00      	subs	r2, #0
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    3ac6:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
			SPI_LEVERS_TX[offset+31] = 254;
    3aca:	f04f 01fe 	mov.w	r1, #254	; 0xfe
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    3ace:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    3ad2:	bf18      	it	ne
    3ad4:	2201      	movne	r2, #1
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    3ad6:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
			SPI_LEVERS_TX[offset+31] = 254;
    3ada:	f883 105f 	strb.w	r1, [r3, #95]	; 0x5f
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    3ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
    3ae2:	b009      	add	sp, #36	; 0x24
    3ae4:	ecbd 8b02 	vpop	{d8}
    3ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (SPI_LEVERS_RX[offset] == ReceivingPitches)
    3aec:	4f59      	ldr	r7, [pc, #356]	; (3c54 <handleSPI+0x1d4>)
    3aee:	5c3b      	ldrb	r3, [r7, r0]
    3af0:	2b01      	cmp	r3, #1
    3af2:	f000 80bd 	beq.w	3c70 <handleSPI+0x1f0>
		else if (SPI_LEVERS_RX[offset] == ReceivingPreset)
    3af6:	2b0e      	cmp	r3, #14
    3af8:	f200 8266 	bhi.w	3fc8 <handleSPI+0x548>
    3afc:	2b01      	cmp	r3, #1
    3afe:	f240 8145 	bls.w	3d8c <handleSPI+0x30c>
    3b02:	3b02      	subs	r3, #2
    3b04:	2b0c      	cmp	r3, #12
    3b06:	f200 8141 	bhi.w	3d8c <handleSPI+0x30c>
    3b0a:	e8df f013 	tbh	[pc, r3, lsl #1]
    3b0e:	0970      	.short	0x0970
    3b10:	013f09c5 	.word	0x013f09c5
    3b14:	0b7e013f 	.word	0x0b7e013f
    3b18:	013f0adb 	.word	0x013f0adb
    3b1c:	0b68013f 	.word	0x0b68013f
    3b20:	013f0964 	.word	0x013f0964
    3b24:	0427030b 	.word	0x0427030b
		else if (brainFirmwareSendInProgress)
    3b28:	4a4c      	ldr	r2, [pc, #304]	; (3c5c <handleSPI+0x1dc>)
    3b2a:	6813      	ldr	r3, [r2, #0]
    3b2c:	2b00      	cmp	r3, #0
    3b2e:	f000 8263 	beq.w	3ff8 <handleSPI+0x578>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    3b32:	4f48      	ldr	r7, [pc, #288]	; (3c54 <handleSPI+0x1d4>)
    3b34:	23fb      	movs	r3, #251	; 0xfb
    3b36:	f8df b134 	ldr.w	fp, [pc, #308]	; 3c6c <handleSPI+0x1ec>
    3b3a:	eb07 0a04 	add.w	sl, r7, r4
    3b3e:	4d48      	ldr	r5, [pc, #288]	; (3c60 <handleSPI+0x1e0>)
    3b40:	f8db 2000 	ldr.w	r2, [fp]
    3b44:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
			for (int i = 0; i < 30; i++)
    3b48:	4b46      	ldr	r3, [pc, #280]	; (3c64 <handleSPI+0x1e4>)
    3b4a:	8819      	ldrh	r1, [r3, #0]
    3b4c:	e032      	b.n	3bb4 <handleSPI+0x134>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b4e:	2e3a      	cmp	r6, #58	; 0x3a
    3b50:	f000 8298 	beq.w	4084 <_Min_Heap_Size+0x84>
    3b54:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
					positionInRowLine = 0;
    3b58:	f04f 0100 	mov.w	r1, #0
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3b5c:	bf08      	it	eq
    3b5e:	3202      	addeq	r2, #2
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b60:	18ab      	adds	r3, r5, r2
    3b62:	789b      	ldrb	r3, [r3, #2]
    3b64:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3b66:	bf08      	it	eq
    3b68:	3203      	addeq	r2, #3
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b6a:	18ab      	adds	r3, r5, r2
    3b6c:	78db      	ldrb	r3, [r3, #3]
    3b6e:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3b70:	bf08      	it	eq
    3b72:	3204      	addeq	r2, #4
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b74:	18ab      	adds	r3, r5, r2
    3b76:	791b      	ldrb	r3, [r3, #4]
    3b78:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3b7a:	bf08      	it	eq
    3b7c:	3205      	addeq	r2, #5
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b7e:	18ab      	adds	r3, r5, r2
    3b80:	795b      	ldrb	r3, [r3, #5]
    3b82:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3b84:	bf08      	it	eq
    3b86:	3206      	addeq	r2, #6
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b88:	18ab      	adds	r3, r5, r2
    3b8a:	799b      	ldrb	r3, [r3, #6]
    3b8c:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3b8e:	bf08      	it	eq
    3b90:	3207      	addeq	r2, #7
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b92:	18ab      	adds	r3, r5, r2
    3b94:	79db      	ldrb	r3, [r3, #7]
    3b96:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3b98:	bf08      	it	eq
    3b9a:	3208      	addeq	r2, #8
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3b9c:	18ab      	adds	r3, r5, r2
    3b9e:	7a1b      	ldrb	r3, [r3, #8]
    3ba0:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3ba2:	bf08      	it	eq
    3ba4:	3209      	addeq	r2, #9
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3ba6:	18ab      	adds	r3, r5, r2
    3ba8:	7a5b      	ldrb	r3, [r3, #9]
    3baa:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3bac:	bf08      	it	eq
    3bae:	320a      	addeq	r2, #10
			for (int i = 0; i < 30; i++)
    3bb0:	281e      	cmp	r0, #30
    3bb2:	d03a      	beq.n	3c2a <handleSPI+0x1aa>
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    3bb4:	5cae      	ldrb	r6, [r5, r2]
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    3bb6:	f102 0c01 	add.w	ip, r2, #1
	if (('0' <= value) && (value <= '9'))
    3bba:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    3bbe:	f815 e00c 	ldrb.w	lr, [r5, ip]
	if (('0' <= value) && (value <= '9'))
    3bc2:	b2db      	uxtb	r3, r3
    3bc4:	2b09      	cmp	r3, #9
    3bc6:	f240 823e 	bls.w	4046 <_Min_Heap_Size+0x46>
	if (('a' <= value) && (value <= 'f'))
    3bca:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
    3bce:	2b05      	cmp	r3, #5
    3bd0:	f240 824c 	bls.w	406c <_Min_Heap_Size+0x6c>
	if (('A' <= value) && (value <= 'F'))
    3bd4:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
    3bd8:	2b05      	cmp	r3, #5
    3bda:	f240 824d 	bls.w	4078 <_Min_Heap_Size+0x78>
    3bde:	2300      	movs	r3, #0
	if (('0' <= value) && (value <= '9'))
    3be0:	f1ae 0830 	sub.w	r8, lr, #48	; 0x30
    3be4:	fa5f f888 	uxtb.w	r8, r8
    3be8:	f1b8 0f09 	cmp.w	r8, #9
    3bec:	f240 8235 	bls.w	405a <_Min_Heap_Size+0x5a>
	if (('a' <= value) && (value <= 'f'))
    3bf0:	f1ae 0861 	sub.w	r8, lr, #97	; 0x61
    3bf4:	f1b8 0f05 	cmp.w	r8, #5
    3bf8:	f240 8232 	bls.w	4060 <_Min_Heap_Size+0x60>
	if (('A' <= value) && (value <= 'F'))
    3bfc:	f1ae 0841 	sub.w	r8, lr, #65	; 0x41
    3c00:	f1b8 0f05 	cmp.w	r8, #5
    3c04:	d804      	bhi.n	3c10 <handleSPI+0x190>
		return (uint8_t) (10 + value - 'A');
    3c06:	f1ae 0837 	sub.w	r8, lr, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    3c0a:	ea43 0308 	orr.w	r3, r3, r8
    3c0e:	b2db      	uxtb	r3, r3
				if (positionInRowLine < 294)
    3c10:	f5b1 7f93 	cmp.w	r1, #294	; 0x126
    3c14:	d29b      	bcs.n	3b4e <handleSPI+0xce>
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    3c16:	eb0a 0600 	add.w	r6, sl, r0
			for (int i = 0; i < 30; i++)
    3c1a:	3001      	adds	r0, #1
				positionInRowLine++;
    3c1c:	3101      	adds	r1, #1
					brainFirmwareBufferIndex += 2;
    3c1e:	3202      	adds	r2, #2
			for (int i = 0; i < 30; i++)
    3c20:	281e      	cmp	r0, #30
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    3c22:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
				positionInRowLine++;
    3c26:	b289      	uxth	r1, r1
			for (int i = 0; i < 30; i++)
    3c28:	d1c4      	bne.n	3bb4 <handleSPI+0x134>
    3c2a:	4b0e      	ldr	r3, [pc, #56]	; (3c64 <handleSPI+0x1e4>)
			SPI_LEVERS_TX[offset+31] = 254;
    3c2c:	4427      	add	r7, r4
    3c2e:	f8cb 2000 	str.w	r2, [fp]
    3c32:	8019      	strh	r1, [r3, #0]
    3c34:	23fe      	movs	r3, #254	; 0xfe
    3c36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    3c3a:	4b07      	ldr	r3, [pc, #28]	; (3c58 <handleSPI+0x1d8>)
    3c3c:	681b      	ldr	r3, [r3, #0]
    3c3e:	4293      	cmp	r3, r2
    3c40:	f63f af4f 	bhi.w	3ae2 <handleSPI+0x62>
				brainFirmwareEndSignal = 1;
    3c44:	2301      	movs	r3, #1
    3c46:	f8c9 3000 	str.w	r3, [r9]
    3c4a:	e74a      	b.n	3ae2 <handleSPI+0x62>
    3c4c:	20016610 	.word	0x20016610
    3c50:	20016613 	.word	0x20016613
    3c54:	30000800 	.word	0x30000800
    3c58:	20014444 	.word	0x20014444
    3c5c:	20014440 	.word	0x20014440
    3c60:	c1e00000 	.word	0xc1e00000
    3c64:	2001a45c 	.word	0x2001a45c
    3c68:	2001443c 	.word	0x2001443c
    3c6c:	20014438 	.word	0x20014438
			 for (int i = 0; i < numStringsThisBoard; i++)
    3c70:	4bc9      	ldr	r3, [pc, #804]	; (3f98 <handleSPI+0x518>)
    3c72:	7818      	ldrb	r0, [r3, #0]
    3c74:	2800      	cmp	r0, #0
    3c76:	f000 8083 	beq.w	3d80 <handleSPI+0x300>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3c7a:	49c8      	ldr	r1, [pc, #800]	; (3f9c <handleSPI+0x51c>)
			 uint8_t currentByte = offset+1;
    3c7c:	1c63      	adds	r3, r4, #1
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3c7e:	eddf 6ac8 	vldr	s13, [pc, #800]	; 3fa0 <handleSPI+0x520>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3c82:	680a      	ldr	r2, [r1, #0]
    3c84:	b2db      	uxtb	r3, r3
    3c86:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3c8a:	5cd2      	ldrb	r2, [r2, r3]
    3c8c:	0212      	lsls	r2, r2, #8
    3c8e:	ee07 2a90 	vmov	s15, r2
    3c92:	680a      	ldr	r2, [r1, #0]
    3c94:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    3c9c:	441a      	add	r2, r3
    3c9e:	7852      	ldrb	r2, [r2, #1]
    3ca0:	ee07 2a90 	vmov	s15, r2
    3ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3cac:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3cb0:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3cb8:	dd09      	ble.n	3cce <handleSPI+0x24e>
    3cba:	eddf 6aba 	vldr	s13, [pc, #744]	; 3fa4 <handleSPI+0x524>
    3cbe:	eef4 7a66 	vcmp.f32	s15, s13
    3cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3cc6:	d502      	bpl.n	3cce <handleSPI+0x24e>
					stringMIDIPitches[i] = myPitch;
    3cc8:	4ab7      	ldr	r2, [pc, #732]	; (3fa8 <handleSPI+0x528>)
    3cca:	ed82 7a00 	vstr	s14, [r2]
			 for (int i = 0; i < numStringsThisBoard; i++)
    3cce:	2801      	cmp	r0, #1
    3cd0:	d056      	beq.n	3d80 <handleSPI+0x300>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3cd2:	680a      	ldr	r2, [r1, #0]
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3cd4:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 3fa4 <handleSPI+0x524>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3cd8:	3201      	adds	r2, #1
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3cda:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 3fa0 <handleSPI+0x520>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3cde:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3ce2:	5cd2      	ldrb	r2, [r2, r3]
    3ce4:	0212      	lsls	r2, r2, #8
    3ce6:	ee07 2a90 	vmov	s15, r2
    3cea:	680a      	ldr	r2, [r1, #0]
    3cec:	3201      	adds	r2, #1
    3cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3cf2:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3cf6:	441a      	add	r2, r3
    3cf8:	7852      	ldrb	r2, [r2, #1]
    3cfa:	ee06 2a90 	vmov	s13, r2
    3cfe:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    3d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3d06:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3d0a:	ee27 7a87 	vmul.f32	s14, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d12:	d507      	bpl.n	3d24 <handleSPI+0x2a4>
    3d14:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d1c:	dd02      	ble.n	3d24 <handleSPI+0x2a4>
					stringMIDIPitches[i] = myPitch;
    3d1e:	4aa2      	ldr	r2, [pc, #648]	; (3fa8 <handleSPI+0x528>)
    3d20:	ed82 7a01 	vstr	s14, [r2, #4]
			 for (int i = 0; i < numStringsThisBoard; i++)
    3d24:	2802      	cmp	r0, #2
    3d26:	d02b      	beq.n	3d80 <handleSPI+0x300>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3d28:	680a      	ldr	r2, [r1, #0]
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3d2a:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 3fa0 <handleSPI+0x520>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3d2e:	3202      	adds	r2, #2
    3d30:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3d34:	5cd2      	ldrb	r2, [r2, r3]
    3d36:	0212      	lsls	r2, r2, #8
    3d38:	ee07 2a90 	vmov	s15, r2
    3d3c:	680a      	ldr	r2, [r1, #0]
    3d3e:	3202      	adds	r2, #2
    3d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3d44:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    3d48:	441a      	add	r2, r3
    3d4a:	7852      	ldrb	r2, [r2, #1]
    3d4c:	ee06 2a90 	vmov	s13, r2
    3d50:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    3d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3d58:	ee27 7a87 	vmul.f32	s14, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3d5c:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d64:	dd09      	ble.n	3d7a <handleSPI+0x2fa>
    3d66:	eddf 6a8f 	vldr	s13, [pc, #572]	; 3fa4 <handleSPI+0x524>
    3d6a:	eef4 7a66 	vcmp.f32	s15, s13
    3d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d72:	d502      	bpl.n	3d7a <handleSPI+0x2fa>
					stringMIDIPitches[i] = myPitch;
    3d74:	4a8c      	ldr	r2, [pc, #560]	; (3fa8 <handleSPI+0x528>)
    3d76:	ed82 7a02 	vstr	s14, [r2, #8]
			 for (int i = 0; i < numStringsThisBoard; i++)
    3d7a:	2803      	cmp	r0, #3
    3d7c:	f040 8187 	bne.w	408e <_Min_Heap_Size+0x8e>
			 whichBar = 0;
    3d80:	4b8a      	ldr	r3, [pc, #552]	; (3fac <handleSPI+0x52c>)
    3d82:	2200      	movs	r2, #0
			 updateStateFromSPIMessage(offset);
    3d84:	4620      	mov	r0, r4
			 whichBar = 0;
    3d86:	701a      	strb	r2, [r3, #0]
			 updateStateFromSPIMessage(offset);
    3d88:	f7fd fb2a 	bl	13e0 <updateStateFromSPIMessage>
			if (boardNumber == 0)
    3d8c:	4b88      	ldr	r3, [pc, #544]	; (3fb0 <handleSPI+0x530>)
    3d8e:	781b      	ldrb	r3, [r3, #0]
    3d90:	2b00      	cmp	r3, #0
    3d92:	f47f aea6 	bne.w	3ae2 <handleSPI+0x62>
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    3d96:	1c62      	adds	r2, r4, #1
    3d98:	4886      	ldr	r0, [pc, #536]	; (3fb4 <handleSPI+0x534>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    3d9a:	443c      	add	r4, r7
    3d9c:	23fd      	movs	r3, #253	; 0xfd
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3d9e:	443a      	add	r2, r7
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    3da0:	4985      	ldr	r1, [pc, #532]	; (3fb8 <handleSPI+0x538>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    3da2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3da6:	25c8      	movs	r5, #200	; 0xc8
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3da8:	4b84      	ldr	r3, [pc, #528]	; (3fbc <handleSPI+0x53c>)
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3daa:	4f85      	ldr	r7, [pc, #532]	; (3fc0 <handleSPI+0x540>)
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3dac:	781e      	ldrb	r6, [r3, #0]
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    3dae:	f8df c214 	ldr.w	ip, [pc, #532]	; 3fc4 <handleSPI+0x544>
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3db2:	f882 6040 	strb.w	r6, [r2, #64]	; 0x40
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    3db6:	781a      	ldrb	r2, [r3, #0]
    3db8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3dbc:	0052      	lsls	r2, r2, #1
    3dbe:	5c8a      	ldrb	r2, [r1, r2]
    3dc0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    3dc4:	781a      	ldrb	r2, [r3, #0]
    3dc6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3dca:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3dce:	7852      	ldrb	r2, [r2, #1]
    3dd0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    3dd4:	781a      	ldrb	r2, [r3, #0]
    3dd6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3dda:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3dde:	7892      	ldrb	r2, [r2, #2]
    3de0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    3de4:	781a      	ldrb	r2, [r3, #0]
    3de6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3dea:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3dee:	78d2      	ldrb	r2, [r2, #3]
    3df0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    3df4:	781a      	ldrb	r2, [r3, #0]
    3df6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3dfa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3dfe:	7912      	ldrb	r2, [r2, #4]
    3e00:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    3e04:	781a      	ldrb	r2, [r3, #0]
    3e06:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e0a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e0e:	7952      	ldrb	r2, [r2, #5]
    3e10:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    3e14:	781a      	ldrb	r2, [r3, #0]
    3e16:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e1a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e1e:	7992      	ldrb	r2, [r2, #6]
    3e20:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    3e24:	781a      	ldrb	r2, [r3, #0]
    3e26:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e2a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e2e:	79d2      	ldrb	r2, [r2, #7]
    3e30:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    3e34:	781a      	ldrb	r2, [r3, #0]
    3e36:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e3a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e3e:	7a12      	ldrb	r2, [r2, #8]
    3e40:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    3e44:	781a      	ldrb	r2, [r3, #0]
    3e46:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e4a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e4e:	7a52      	ldrb	r2, [r2, #9]
    3e50:	f884 204b 	strb.w	r2, [r4, #75]	; 0x4b
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3e54:	781a      	ldrb	r2, [r3, #0]
    3e56:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e5a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e5e:	7a92      	ldrb	r2, [r2, #10]
    3e60:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    3e64:	781a      	ldrb	r2, [r3, #0]
    3e66:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e6a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e6e:	7ad2      	ldrb	r2, [r2, #11]
    3e70:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    3e74:	781a      	ldrb	r2, [r3, #0]
    3e76:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e7a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3e7e:	7b12      	ldrb	r2, [r2, #12]
    3e80:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    3e84:	781a      	ldrb	r2, [r3, #0]
    3e86:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e8a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    3e8e:	7b4a      	ldrb	r2, [r1, #13]
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3e90:	781e      	ldrb	r6, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3e92:	7839      	ldrb	r1, [r7, #0]
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3e94:	fb05 f606 	mul.w	r6, r5, r6
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    3e98:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3e9c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3ea0:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
				whichMacroToSendName = (whichMacroToSendName + 1);
    3ea4:	3101      	adds	r1, #1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3ea6:	eb06 0642 	add.w	r6, r6, r2, lsl #1
				whichMacroToSendName = (whichMacroToSendName + 1);
    3eaa:	b2c9      	uxtb	r1, r1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3eac:	5d86      	ldrb	r6, [r0, r6]
    3eae:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    3eb2:	781e      	ldrb	r6, [r3, #0]
    3eb4:	fb05 f606 	mul.w	r6, r5, r6
    3eb8:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3ebc:	4406      	add	r6, r0
    3ebe:	7876      	ldrb	r6, [r6, #1]
    3ec0:	f884 6052 	strb.w	r6, [r4, #82]	; 0x52
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    3ec4:	781e      	ldrb	r6, [r3, #0]
    3ec6:	fb05 f606 	mul.w	r6, r5, r6
    3eca:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3ece:	4406      	add	r6, r0
    3ed0:	78b6      	ldrb	r6, [r6, #2]
    3ed2:	f884 6053 	strb.w	r6, [r4, #83]	; 0x53
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    3ed6:	781e      	ldrb	r6, [r3, #0]
    3ed8:	fb05 f606 	mul.w	r6, r5, r6
    3edc:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3ee0:	4406      	add	r6, r0
    3ee2:	78f6      	ldrb	r6, [r6, #3]
    3ee4:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    3ee8:	781e      	ldrb	r6, [r3, #0]
    3eea:	fb05 f606 	mul.w	r6, r5, r6
    3eee:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3ef2:	4406      	add	r6, r0
    3ef4:	7936      	ldrb	r6, [r6, #4]
    3ef6:	f884 6055 	strb.w	r6, [r4, #85]	; 0x55
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    3efa:	781e      	ldrb	r6, [r3, #0]
    3efc:	fb05 f606 	mul.w	r6, r5, r6
    3f00:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3f04:	4406      	add	r6, r0
    3f06:	7976      	ldrb	r6, [r6, #5]
    3f08:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    3f0c:	781e      	ldrb	r6, [r3, #0]
    3f0e:	fb05 f606 	mul.w	r6, r5, r6
    3f12:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3f16:	4406      	add	r6, r0
    3f18:	79b6      	ldrb	r6, [r6, #6]
    3f1a:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    3f1e:	781e      	ldrb	r6, [r3, #0]
    3f20:	fb05 f606 	mul.w	r6, r5, r6
    3f24:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3f28:	4406      	add	r6, r0
    3f2a:	79f6      	ldrb	r6, [r6, #7]
    3f2c:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    3f30:	781e      	ldrb	r6, [r3, #0]
    3f32:	fb05 f606 	mul.w	r6, r5, r6
    3f36:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    3f3a:	4406      	add	r6, r0
    3f3c:	7a36      	ldrb	r6, [r6, #8]
    3f3e:	f884 6059 	strb.w	r6, [r4, #89]	; 0x59
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    3f42:	781e      	ldrb	r6, [r3, #0]
    3f44:	fb06 f505 	mul.w	r5, r6, r5
    3f48:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3f4c:	4410      	add	r0, r2
    3f4e:	7a42      	ldrb	r2, [r0, #9]
    3f50:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    3f54:	f8bc 2000 	ldrh.w	r2, [ip]
    3f58:	b292      	uxth	r2, r2
    3f5a:	3a00      	subs	r2, #0
    3f5c:	bf18      	it	ne
    3f5e:	2201      	movne	r2, #1
				if (whichMacroToSendName >= 20)
    3f60:	2913      	cmp	r1, #19
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    3f62:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
				SPI_LEVERS_TX[offset+31] = 254;
    3f66:	f04f 02fe 	mov.w	r2, #254	; 0xfe
    3f6a:	f884 205f 	strb.w	r2, [r4, #95]	; 0x5f
				SPI_LEVERS_TX[offset+27] = 13;
    3f6e:	f04f 020d 	mov.w	r2, #13
    3f72:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
				SPI_LEVERS_TX[offset+28] = 13;
    3f76:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
				SPI_LEVERS_TX[offset+29] = 13;
    3f7a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
				if (whichMacroToSendName >= 20)
    3f7e:	d95c      	bls.n	403a <_Min_Heap_Size+0x3a>
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3f80:	781a      	ldrb	r2, [r3, #0]
					whichMacroToSendName = 0;
    3f82:	2100      	movs	r1, #0
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3f84:	3201      	adds	r2, #1
					whichMacroToSendName = 0;
    3f86:	7039      	strb	r1, [r7, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3f88:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    3f8c:	701a      	strb	r2, [r3, #0]
}
    3f8e:	b009      	add	sp, #36	; 0x24
    3f90:	ecbd 8b02 	vpop	{d8}
    3f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3f98:	20000694 	.word	0x20000694
    3f9c:	200051c4 	.word	0x200051c4
    3fa0:	3b000080 	.word	0x3b000080
    3fa4:	478bff74 	.word	0x478bff74
    3fa8:	2001421c 	.word	0x2001421c
    3fac:	20014260 	.word	0x20014260
    3fb0:	20014435 	.word	0x20014435
    3fb4:	30043380 	.word	0x30043380
    3fb8:	30042000 	.word	0x30042000
    3fbc:	2001ca76 	.word	0x2001ca76
    3fc0:	2001ca74 	.word	0x2001ca74
    3fc4:	20005772 	.word	0x20005772
    3fc8:	2bfd      	cmp	r3, #253	; 0xfd
    3fca:	f47f aedf 	bne.w	3d8c <handleSPI+0x30c>
			if(writingState == ReceivingPreset)
    3fce:	4b48      	ldr	r3, [pc, #288]	; (40f0 <_Min_Heap_Size+0xf0>)
    3fd0:	7819      	ldrb	r1, [r3, #0]
    3fd2:	2902      	cmp	r1, #2
    3fd4:	f47f aeda 	bne.w	3d8c <handleSPI+0x30c>
				 presetNumberToLoad = presetNumberToSave;
    3fd8:	4846      	ldr	r0, [pc, #280]	; (40f4 <_Min_Heap_Size+0xf4>)
				 writingState = 0;
    3fda:	701a      	strb	r2, [r3, #0]
				 presetNumberToLoad = presetNumberToSave;
    3fdc:	7803      	ldrb	r3, [r0, #0]
				 presetWaitingToParse = bufferPos;
    3fde:	4a46      	ldr	r2, [pc, #280]	; (40f8 <_Min_Heap_Size+0xf8>)
				 presetNumberToLoad = presetNumberToSave;
    3fe0:	4946      	ldr	r1, [pc, #280]	; (40fc <_Min_Heap_Size+0xfc>)
    3fe2:	b2db      	uxtb	r3, r3
    3fe4:	700b      	strb	r3, [r1, #0]
				 presetWaitingToParse = bufferPos;
    3fe6:	8813      	ldrh	r3, [r2, #0]
    3fe8:	4945      	ldr	r1, [pc, #276]	; (4100 <_Min_Heap_Size+0x100>)
    3fea:	b29b      	uxth	r3, r3
    3fec:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    3fee:	8813      	ldrh	r3, [r2, #0]
    3ff0:	4a44      	ldr	r2, [pc, #272]	; (4104 <_Min_Heap_Size+0x104>)
    3ff2:	b29b      	uxth	r3, r3
    3ff4:	6013      	str	r3, [r2, #0]
    3ff6:	e6c9      	b.n	3d8c <handleSPI+0x30c>
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    3ff8:	4b43      	ldr	r3, [pc, #268]	; (4108 <_Min_Heap_Size+0x108>)
    3ffa:	20fc      	movs	r0, #252	; 0xfc
    3ffc:	4943      	ldr	r1, [pc, #268]	; (410c <_Min_Heap_Size+0x10c>)
    3ffe:	f8df b120 	ldr.w	fp, [pc, #288]	; 4120 <_Min_Heap_Size+0x120>
			brainFirmwareSendInProgress = 1;
    4002:	6015      	str	r5, [r2, #0]
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    4004:	190a      	adds	r2, r1, r4
    4006:	1c5d      	adds	r5, r3, #1
    4008:	f8db 1000 	ldr.w	r1, [fp]
    400c:	f103 0464 	add.w	r4, r3, #100	; 0x64
    4010:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
			for (uint8_t i = 0; i<100; i++)
    4014:	461a      	mov	r2, r3
				if (brainFirmwareBuffer[i] ==  0x3a)
    4016:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    401a:	283a      	cmp	r0, #58	; 0x3a
    401c:	d101      	bne.n	4022 <_Min_Heap_Size+0x22>
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    401e:	3202      	adds	r2, #2
    4020:	1b51      	subs	r1, r2, r5
			for (uint8_t i = 0; i<100; i++)
    4022:	42a3      	cmp	r3, r4
    4024:	d1f6      	bne.n	4014 <_Min_Heap_Size+0x14>
			positionInRowLine = 0;
    4026:	4b3a      	ldr	r3, [pc, #232]	; (4110 <_Min_Heap_Size+0x110>)
    4028:	2200      	movs	r2, #0
    402a:	f8cb 1000 	str.w	r1, [fp]
    402e:	801a      	strh	r2, [r3, #0]
}
    4030:	b009      	add	sp, #36	; 0x24
    4032:	ecbd 8b02 	vpop	{d8}
    4036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				whichMacroToSendName = (whichMacroToSendName + 1);
    403a:	7039      	strb	r1, [r7, #0]
}
    403c:	b009      	add	sp, #36	; 0x24
    403e:	ecbd 8b02 	vpop	{d8}
    4042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (('0' <= value) && (value <= '9'))
    4046:	f1ae 0830 	sub.w	r8, lr, #48	; 0x30
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    404a:	011b      	lsls	r3, r3, #4
	if (('0' <= value) && (value <= '9'))
    404c:	fa5f f888 	uxtb.w	r8, r8
    4050:	b2db      	uxtb	r3, r3
    4052:	f1b8 0f09 	cmp.w	r8, #9
    4056:	f63f adcb 	bhi.w	3bf0 <handleSPI+0x170>
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    405a:	ea48 0303 	orr.w	r3, r8, r3
    405e:	e5d7      	b.n	3c10 <handleSPI+0x190>
		return (uint8_t) (10 + value - 'a');
    4060:	f1ae 0857 	sub.w	r8, lr, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    4064:	ea43 0308 	orr.w	r3, r3, r8
    4068:	b2db      	uxtb	r3, r3
		return (uint8_t) (10 + value - 'a');
    406a:	e5d1      	b.n	3c10 <handleSPI+0x190>
    406c:	f1a6 0357 	sub.w	r3, r6, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    4070:	011b      	lsls	r3, r3, #4
    4072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'a');
    4076:	e5b3      	b.n	3be0 <handleSPI+0x160>
		return (uint8_t) (10 + value - 'A');
    4078:	f1a6 0337 	sub.w	r3, r6, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    407c:	011b      	lsls	r3, r3, #4
    407e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'A');
    4082:	e5ad      	b.n	3be0 <handleSPI+0x160>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    4084:	18ab      	adds	r3, r5, r2
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    4086:	4662      	mov	r2, ip
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    4088:	f893 e002 	ldrb.w	lr, [r3, #2]
    408c:	e562      	b.n	3b54 <handleSPI+0xd4>
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    408e:	ed9f 6a21 	vldr	s12, [pc, #132]	; 4114 <_Min_Heap_Size+0x114>
			 for (int i = 0; i < numStringsThisBoard; i++)
    4092:	2503      	movs	r5, #3
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    4094:	eddf 6a20 	vldr	s13, [pc, #128]	; 4118 <_Min_Heap_Size+0x118>
					stringMIDIPitches[i] = myPitch;
    4098:	4e20      	ldr	r6, [pc, #128]	; (411c <_Min_Heap_Size+0x11c>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    409a:	680a      	ldr	r2, [r1, #0]
					stringMIDIPitches[i] = myPitch;
    409c:	eb06 0c85 	add.w	ip, r6, r5, lsl #2
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    40a0:	442a      	add	r2, r5
    40a2:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    40a6:	5cd2      	ldrb	r2, [r2, r3]
    40a8:	0212      	lsls	r2, r2, #8
    40aa:	ee07 2a90 	vmov	s15, r2
    40ae:	680a      	ldr	r2, [r1, #0]
    40b0:	442a      	add	r2, r5
    40b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    40b6:	3501      	adds	r5, #1
    40b8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    40bc:	441a      	add	r2, r3
    40be:	7852      	ldrb	r2, [r2, #1]
    40c0:	ee07 2a10 	vmov	s14, r2
    40c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    40c8:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    40cc:	ee27 7a86 	vmul.f32	s14, s15, s12
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    40d0:	eeb5 7a40 	vcmp.f32	s14, #0.0
    40d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    40d8:	dd06      	ble.n	40e8 <_Min_Heap_Size+0xe8>
    40da:	eef4 7a66 	vcmp.f32	s15, s13
    40de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    40e2:	d501      	bpl.n	40e8 <_Min_Heap_Size+0xe8>
					stringMIDIPitches[i] = myPitch;
    40e4:	ed8c 7a00 	vstr	s14, [ip]
			 for (int i = 0; i < numStringsThisBoard; i++)
    40e8:	42a8      	cmp	r0, r5
    40ea:	dcd6      	bgt.n	409a <_Min_Heap_Size+0x9a>
    40ec:	e648      	b.n	3d80 <handleSPI+0x300>
    40ee:	bf00      	nop
    40f0:	2001ca77 	.word	0x2001ca77
    40f4:	2001a46f 	.word	0x2001a46f
    40f8:	2001444c 	.word	0x2001444c
    40fc:	2001a46e 	.word	0x2001a46e
    4100:	2001a474 	.word	0x2001a474
    4104:	2001a478 	.word	0x2001a478
    4108:	c1dfffff 	.word	0xc1dfffff
    410c:	30000800 	.word	0x30000800
    4110:	2001a45c 	.word	0x2001a45c
    4114:	3b000080 	.word	0x3b000080
    4118:	478bff74 	.word	0x478bff74
    411c:	2001421c 	.word	0x2001421c
    4120:	20014438 	.word	0x20014438
			 uint8_t currentByte = offset+1;
    4124:	f100 0801 	add.w	r8, r0, #1
				if (knobFrozen[whichKnob])
    4128:	4e87      	ldr	r6, [pc, #540]	; (4348 <_Min_Heap_Size+0x348>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    412a:	fa5f f888 	uxtb.w	r8, r8
				if (knobFrozen[whichKnob])
    412e:	7b33      	ldrb	r3, [r6, #12]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4130:	f817 9008 	ldrb.w	r9, [r7, r8]
				if (knobFrozen[whichKnob])
    4134:	2b00      	cmp	r3, #0
    4136:	f001 821c 	beq.w	5572 <_Min_Heap_Size+0x1572>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    413a:	4d84      	ldr	r5, [pc, #528]	; (434c <_Min_Heap_Size+0x34c>)
    413c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    413e:	3303      	adds	r3, #3
    4140:	4599      	cmp	r9, r3
    4142:	dc03      	bgt.n	414c <_Min_Heap_Size+0x14c>
    4144:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    4146:	3b03      	subs	r3, #3
    4148:	4599      	cmp	r9, r3
    414a:	da03      	bge.n	4154 <_Min_Heap_Size+0x154>
						knobFrozen[whichKnob] = 0;
    414c:	2300      	movs	r3, #0
    414e:	7333      	strb	r3, [r6, #12]
						prevKnobByte[whichKnob] = newByte;
    4150:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4154:	eb07 0308 	add.w	r3, r7, r8
    4158:	f893 9001 	ldrb.w	r9, [r3, #1]
				if (knobFrozen[whichKnob])
    415c:	7b73      	ldrb	r3, [r6, #13]
    415e:	2b00      	cmp	r3, #0
    4160:	f001 81f8 	beq.w	5554 <_Min_Heap_Size+0x1554>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4164:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    4166:	3303      	adds	r3, #3
    4168:	4599      	cmp	r9, r3
    416a:	dc03      	bgt.n	4174 <_Min_Heap_Size+0x174>
    416c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    416e:	3b03      	subs	r3, #3
    4170:	4599      	cmp	r9, r3
    4172:	da03      	bge.n	417c <_Min_Heap_Size+0x17c>
						knobFrozen[whichKnob] = 0;
    4174:	2300      	movs	r3, #0
    4176:	7373      	strb	r3, [r6, #13]
						prevKnobByte[whichKnob] = newByte;
    4178:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    417c:	eb07 0308 	add.w	r3, r7, r8
    4180:	f893 9002 	ldrb.w	r9, [r3, #2]
				if (knobFrozen[whichKnob])
    4184:	7bb3      	ldrb	r3, [r6, #14]
    4186:	2b00      	cmp	r3, #0
    4188:	f001 81d5 	beq.w	5536 <_Min_Heap_Size+0x1536>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    418c:	6bab      	ldr	r3, [r5, #56]	; 0x38
    418e:	3303      	adds	r3, #3
    4190:	4599      	cmp	r9, r3
    4192:	dc03      	bgt.n	419c <_Min_Heap_Size+0x19c>
    4194:	6bab      	ldr	r3, [r5, #56]	; 0x38
    4196:	3b03      	subs	r3, #3
    4198:	4599      	cmp	r9, r3
    419a:	da03      	bge.n	41a4 <_Min_Heap_Size+0x1a4>
						knobFrozen[whichKnob] = 0;
    419c:	2300      	movs	r3, #0
    419e:	73b3      	strb	r3, [r6, #14]
						prevKnobByte[whichKnob] = newByte;
    41a0:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    41a4:	eb07 0308 	add.w	r3, r7, r8
    41a8:	f893 9003 	ldrb.w	r9, [r3, #3]
				if (knobFrozen[whichKnob])
    41ac:	7bf3      	ldrb	r3, [r6, #15]
    41ae:	2b00      	cmp	r3, #0
    41b0:	f001 81b2 	beq.w	5518 <_Min_Heap_Size+0x1518>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    41b4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    41b6:	3303      	adds	r3, #3
    41b8:	4599      	cmp	r9, r3
    41ba:	dc03      	bgt.n	41c4 <_Min_Heap_Size+0x1c4>
    41bc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    41be:	3b03      	subs	r3, #3
    41c0:	4599      	cmp	r9, r3
    41c2:	da03      	bge.n	41cc <_Min_Heap_Size+0x1cc>
						knobFrozen[whichKnob] = 0;
    41c4:	2300      	movs	r3, #0
    41c6:	73f3      	strb	r3, [r6, #15]
						prevKnobByte[whichKnob] = newByte;
    41c8:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    41cc:	eb07 0308 	add.w	r3, r7, r8
    41d0:	f893 9004 	ldrb.w	r9, [r3, #4]
				if (knobFrozen[whichKnob])
    41d4:	7c33      	ldrb	r3, [r6, #16]
    41d6:	2b00      	cmp	r3, #0
    41d8:	f001 818f 	beq.w	54fa <_Min_Heap_Size+0x14fa>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    41dc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    41de:	3303      	adds	r3, #3
    41e0:	4599      	cmp	r9, r3
    41e2:	dc03      	bgt.n	41ec <_Min_Heap_Size+0x1ec>
    41e4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    41e6:	3b03      	subs	r3, #3
    41e8:	4599      	cmp	r9, r3
    41ea:	da03      	bge.n	41f4 <_Min_Heap_Size+0x1f4>
						knobFrozen[whichKnob] = 0;
    41ec:	2300      	movs	r3, #0
    41ee:	7433      	strb	r3, [r6, #16]
						prevKnobByte[whichKnob] = newByte;
    41f0:	f8c5 9040 	str.w	r9, [r5, #64]	; 0x40
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    41f4:	eb07 0308 	add.w	r3, r7, r8
    41f8:	f893 9005 	ldrb.w	r9, [r3, #5]
				if (knobFrozen[whichKnob])
    41fc:	7c73      	ldrb	r3, [r6, #17]
    41fe:	2b00      	cmp	r3, #0
    4200:	f001 816c 	beq.w	54dc <_Min_Heap_Size+0x14dc>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4204:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    4206:	3303      	adds	r3, #3
    4208:	4599      	cmp	r9, r3
    420a:	dc03      	bgt.n	4214 <_Min_Heap_Size+0x214>
    420c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    420e:	3b03      	subs	r3, #3
    4210:	4599      	cmp	r9, r3
    4212:	da03      	bge.n	421c <_Min_Heap_Size+0x21c>
						knobFrozen[whichKnob] = 0;
    4214:	2300      	movs	r3, #0
    4216:	7473      	strb	r3, [r6, #17]
						prevKnobByte[whichKnob] = newByte;
    4218:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    421c:	eb07 0308 	add.w	r3, r7, r8
    4220:	f893 9006 	ldrb.w	r9, [r3, #6]
				if (knobFrozen[whichKnob])
    4224:	7cb3      	ldrb	r3, [r6, #18]
    4226:	2b00      	cmp	r3, #0
    4228:	f001 8149 	beq.w	54be <_Min_Heap_Size+0x14be>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    422c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    422e:	3303      	adds	r3, #3
    4230:	4599      	cmp	r9, r3
    4232:	dc03      	bgt.n	423c <_Min_Heap_Size+0x23c>
    4234:	6cab      	ldr	r3, [r5, #72]	; 0x48
    4236:	3b03      	subs	r3, #3
    4238:	4599      	cmp	r9, r3
    423a:	da03      	bge.n	4244 <_Min_Heap_Size+0x244>
						knobFrozen[whichKnob] = 0;
    423c:	2300      	movs	r3, #0
    423e:	74b3      	strb	r3, [r6, #18]
						prevKnobByte[whichKnob] = newByte;
    4240:	f8c5 9048 	str.w	r9, [r5, #72]	; 0x48
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4244:	eb07 0308 	add.w	r3, r7, r8
    4248:	f893 9007 	ldrb.w	r9, [r3, #7]
				if (knobFrozen[whichKnob])
    424c:	7cf3      	ldrb	r3, [r6, #19]
    424e:	2b00      	cmp	r3, #0
    4250:	f001 8126 	beq.w	54a0 <_Min_Heap_Size+0x14a0>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    4254:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    4256:	3303      	adds	r3, #3
    4258:	454b      	cmp	r3, r9
    425a:	db03      	blt.n	4264 <_Min_Heap_Size+0x264>
    425c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    425e:	3b03      	subs	r3, #3
    4260:	454b      	cmp	r3, r9
    4262:	dd03      	ble.n	426c <_Min_Heap_Size+0x26c>
						knobFrozen[whichKnob] = 0;
    4264:	2300      	movs	r3, #0
    4266:	74f3      	strb	r3, [r6, #19]
						prevKnobByte[whichKnob] = newByte;
    4268:	f8c5 904c 	str.w	r9, [r5, #76]	; 0x4c
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    426c:	eb07 0308 	add.w	r3, r7, r8
    4270:	f893 9008 	ldrb.w	r9, [r3, #8]
				if (knobFrozen[whichKnob])
    4274:	7a33      	ldrb	r3, [r6, #8]
    4276:	2b00      	cmp	r3, #0
    4278:	f001 81b8 	beq.w	55ec <_Min_Heap_Size+0x15ec>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    427c:	6a2b      	ldr	r3, [r5, #32]
    427e:	3303      	adds	r3, #3
    4280:	4599      	cmp	r9, r3
    4282:	dc03      	bgt.n	428c <_Min_Heap_Size+0x28c>
    4284:	6a2b      	ldr	r3, [r5, #32]
    4286:	3b03      	subs	r3, #3
    4288:	4599      	cmp	r9, r3
    428a:	da03      	bge.n	4294 <_Min_Heap_Size+0x294>
						knobFrozen[whichKnob] = 0;
    428c:	2300      	movs	r3, #0
    428e:	7233      	strb	r3, [r6, #8]
						prevKnobByte[whichKnob] = newByte;
    4290:	f8c5 9020 	str.w	r9, [r5, #32]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4294:	eb07 0308 	add.w	r3, r7, r8
    4298:	f893 9009 	ldrb.w	r9, [r3, #9]
				if (knobFrozen[whichKnob])
    429c:	7a73      	ldrb	r3, [r6, #9]
    429e:	2b00      	cmp	r3, #0
    42a0:	f001 8195 	beq.w	55ce <_Min_Heap_Size+0x15ce>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    42a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    42a6:	3303      	adds	r3, #3
    42a8:	4599      	cmp	r9, r3
    42aa:	dc03      	bgt.n	42b4 <_Min_Heap_Size+0x2b4>
    42ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    42ae:	3b03      	subs	r3, #3
    42b0:	4599      	cmp	r9, r3
    42b2:	da03      	bge.n	42bc <_Min_Heap_Size+0x2bc>
						knobFrozen[whichKnob] = 0;
    42b4:	2300      	movs	r3, #0
    42b6:	7273      	strb	r3, [r6, #9]
						prevKnobByte[whichKnob] = newByte;
    42b8:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    42bc:	eb07 0308 	add.w	r3, r7, r8
    42c0:	f893 900a 	ldrb.w	r9, [r3, #10]
				if (knobFrozen[whichKnob])
    42c4:	7ab3      	ldrb	r3, [r6, #10]
    42c6:	2b00      	cmp	r3, #0
    42c8:	f001 8172 	beq.w	55b0 <_Min_Heap_Size+0x15b0>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    42cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    42ce:	3303      	adds	r3, #3
    42d0:	4599      	cmp	r9, r3
    42d2:	dc03      	bgt.n	42dc <_Min_Heap_Size+0x2dc>
    42d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    42d6:	3b03      	subs	r3, #3
    42d8:	4599      	cmp	r9, r3
    42da:	da03      	bge.n	42e4 <_Min_Heap_Size+0x2e4>
						knobFrozen[whichKnob] = 0;
    42dc:	2300      	movs	r3, #0
    42de:	72b3      	strb	r3, [r6, #10]
						prevKnobByte[whichKnob] = newByte;
    42e0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    42e4:	44b8      	add	r8, r7
				if (knobFrozen[whichKnob])
    42e6:	7af3      	ldrb	r3, [r6, #11]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    42e8:	f898 800b 	ldrb.w	r8, [r8, #11]
				if (knobFrozen[whichKnob])
    42ec:	2b00      	cmp	r3, #0
    42ee:	f001 8150 	beq.w	5592 <_Min_Heap_Size+0x1592>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    42f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    42f4:	3303      	adds	r3, #3
    42f6:	4543      	cmp	r3, r8
    42f8:	db03      	blt.n	4302 <_Min_Heap_Size+0x302>
    42fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    42fc:	3b03      	subs	r3, #3
    42fe:	4543      	cmp	r3, r8
    4300:	dd03      	ble.n	430a <_Min_Heap_Size+0x30a>
						knobFrozen[whichKnob] = 0;
    4302:	2300      	movs	r3, #0
    4304:	72f3      	strb	r3, [r6, #11]
						prevKnobByte[whichKnob] = newByte;
    4306:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
			currentByte += 12;
    430a:	f104 060d 	add.w	r6, r4, #13
    430e:	4d10      	ldr	r5, [pc, #64]	; (4350 <_Min_Heap_Size+0x350>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    4310:	ed9f 8a10 	vldr	s16, [pc, #64]	; 4354 <_Min_Heap_Size+0x354>
    4314:	b2f6      	uxtb	r6, r6
    4316:	f105 0828 	add.w	r8, r5, #40	; 0x28
    431a:	3e01      	subs	r6, #1
    431c:	443e      	add	r6, r7
    431e:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    4322:	4628      	mov	r0, r5
			for (int i = 0; i < 10; i++)
    4324:	3504      	adds	r5, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    4326:	ee00 3a10 	vmov	s0, r3
    432a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    432e:	ee20 0a08 	vmul.f32	s0, s0, s16
    4332:	f007 fe99 	bl	c068 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    4336:	45a8      	cmp	r8, r5
    4338:	d1f1      	bne.n	431e <_Min_Heap_Size+0x31e>
			whichBar = 1;
    433a:	4b07      	ldr	r3, [pc, #28]	; (4358 <_Min_Heap_Size+0x358>)
    433c:	2201      	movs	r2, #1
			updateStateFromSPIMessage(offset);
    433e:	4620      	mov	r0, r4
			whichBar = 1;
    4340:	701a      	strb	r2, [r3, #0]
			updateStateFromSPIMessage(offset);
    4342:	f7fd f84d 	bl	13e0 <updateStateFromSPIMessage>
    4346:	e521      	b.n	3d8c <handleSPI+0x30c>
    4348:	200051d4 	.word	0x200051d4
    434c:	2001a47c 	.word	0x2001a47c
    4350:	20005324 	.word	0x20005324
    4354:	3b808081 	.word	0x3b808081
    4358:	20014260 	.word	0x20014260
			if (boardNumber == 0)
    435c:	4b19      	ldr	r3, [pc, #100]	; (43c4 <_Min_Heap_Size+0x3c4>)
    435e:	781b      	ldrb	r3, [r3, #0]
    4360:	2b00      	cmp	r3, #0
    4362:	f47f abbe 	bne.w	3ae2 <handleSPI+0x62>
				uint_fast8_t  currentByte = offset+1;
    4366:	1c42      	adds	r2, r0, #1
				presetNumberToSave = SPI_LEVERS_RX[currentByte];
    4368:	f8df 9074 	ldr.w	r9, [pc, #116]	; 43e0 <_Min_Heap_Size+0x3e0>
    436c:	4816      	ldr	r0, [pc, #88]	; (43c8 <_Min_Heap_Size+0x3c8>)
    436e:	5cb9      	ldrb	r1, [r7, r2]
    4370:	18bd      	adds	r5, r7, r2
    4372:	eb00 0c04 	add.w	ip, r0, r4
    4376:	f889 1000 	strb.w	r1, [r9]
				bufferPos = 0;
    437a:	4914      	ldr	r1, [pc, #80]	; (43cc <_Min_Heap_Size+0x3cc>)
    437c:	800b      	strh	r3, [r1, #0]
				for (int i = 0; i < 18; i++)
    437e:	4b14      	ldr	r3, [pc, #80]	; (43d0 <_Min_Heap_Size+0x3d0>)
					buffer[bufferPos++] = SPI_LEVERS_RX[currentByte++];
    4380:	8808      	ldrh	r0, [r1, #0]
    4382:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    4386:	b280      	uxth	r0, r0
				for (int i = 0; i < 18; i++)
    4388:	45ac      	cmp	ip, r5
					buffer[bufferPos++] = SPI_LEVERS_RX[currentByte++];
    438a:	541e      	strb	r6, [r3, r0]
    438c:	f100 0001 	add.w	r0, r0, #1
    4390:	b280      	uxth	r0, r0
    4392:	8008      	strh	r0, [r1, #0]
				for (int i = 0; i < 18; i++)
    4394:	d1f4      	bne.n	4380 <_Min_Heap_Size+0x380>
				if (whichModel != 0)
    4396:	480f      	ldr	r0, [pc, #60]	; (43d4 <_Min_Heap_Size+0x3d4>)
    4398:	7806      	ldrb	r6, [r0, #0]
    439a:	2e00      	cmp	r6, #0
    439c:	f001 8274 	beq.w	5888 <_Min_Heap_Size+0x1888>
					bufferPos = 20;//first byte after name
    43a0:	2014      	movs	r0, #20
					for (int j = 0; j < 8; j++)
    43a2:	f04f 0800 	mov.w	r8, #0
					bufferPos = 20;//first byte after name
    43a6:	8008      	strh	r0, [r1, #0]
					buffer[bufferPos] = whichModel; // not a synth preset, maybe string or additive or something
    43a8:	880d      	ldrh	r5, [r1, #0]
					bufferPos++;
    43aa:	8808      	ldrh	r0, [r1, #0]
					buffer[bufferPos] = whichModel; // not a synth preset, maybe string or additive or something
    43ac:	b2ad      	uxth	r5, r5
					bufferPos++;
    43ae:	3001      	adds	r0, #1
    43b0:	b280      	uxth	r0, r0
    43b2:	8008      	strh	r0, [r1, #0]
					buffer[1] = 19; // instead of the 18 that was sent by the brain, to signal that this is an internal model, not synth
    43b4:	2013      	movs	r0, #19
    43b6:	7058      	strb	r0, [r3, #1]
					buffer[bufferPos] = whichModel; // not a synth preset, maybe string or additive or something
    43b8:	555e      	strb	r6, [r3, r5]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    43ba:	26c8      	movs	r6, #200	; 0xc8
    43bc:	4d06      	ldr	r5, [pc, #24]	; (43d8 <_Min_Heap_Size+0x3d8>)
    43be:	4807      	ldr	r0, [pc, #28]	; (43dc <_Min_Heap_Size+0x3dc>)
    43c0:	e010      	b.n	43e4 <_Min_Heap_Size+0x3e4>
    43c2:	bf00      	nop
    43c4:	20014435 	.word	0x20014435
    43c8:	30000813 	.word	0x30000813
    43cc:	2001444c 	.word	0x2001444c
    43d0:	30042380 	.word	0x30042380
    43d4:	2001ca75 	.word	0x2001ca75
    43d8:	200006a5 	.word	0x200006a5
    43dc:	30043380 	.word	0x30043380
    43e0:	2001a46f 	.word	0x2001a46f
    43e4:	f895 e000 	ldrb.w	lr, [r5]
    43e8:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
    43ec:	f8b1 a000 	ldrh.w	sl, [r1]
					for (int j = 0; j < 8; j++)
    43f0:	f108 0801 	add.w	r8, r8, #1
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    43f4:	fb06 fe0e 	mul.w	lr, r6, lr
					for (int j = 0; j < 8; j++)
    43f8:	f1b8 0f08 	cmp.w	r8, #8
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    43fc:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4400:	f810 b00e 	ldrb.w	fp, [r0, lr]
    4404:	fa1f fe8a 	uxth.w	lr, sl
    4408:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    440c:	f8b1 e000 	ldrh.w	lr, [r1]
    4410:	f10e 0e01 	add.w	lr, lr, #1
    4414:	fa1f fe8e 	uxth.w	lr, lr
    4418:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    441c:	f895 e000 	ldrb.w	lr, [r5]
    4420:	f8b1 a000 	ldrh.w	sl, [r1]
    4424:	fb06 fe0e 	mul.w	lr, r6, lr
    4428:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    442c:	4486      	add	lr, r0
    442e:	f89e b001 	ldrb.w	fp, [lr, #1]
    4432:	fa1f fe8a 	uxth.w	lr, sl
    4436:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    443a:	f8b1 e000 	ldrh.w	lr, [r1]
    443e:	f10e 0e01 	add.w	lr, lr, #1
    4442:	fa1f fe8e 	uxth.w	lr, lr
    4446:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    444a:	f895 e000 	ldrb.w	lr, [r5]
    444e:	f8b1 a000 	ldrh.w	sl, [r1]
    4452:	fb06 fe0e 	mul.w	lr, r6, lr
    4456:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    445a:	4486      	add	lr, r0
    445c:	f89e b002 	ldrb.w	fp, [lr, #2]
    4460:	fa1f fe8a 	uxth.w	lr, sl
    4464:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4468:	f8b1 e000 	ldrh.w	lr, [r1]
    446c:	f10e 0e01 	add.w	lr, lr, #1
    4470:	fa1f fe8e 	uxth.w	lr, lr
    4474:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4478:	f895 e000 	ldrb.w	lr, [r5]
    447c:	f8b1 a000 	ldrh.w	sl, [r1]
    4480:	fb06 fe0e 	mul.w	lr, r6, lr
    4484:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4488:	4486      	add	lr, r0
    448a:	f89e b003 	ldrb.w	fp, [lr, #3]
    448e:	fa1f fe8a 	uxth.w	lr, sl
    4492:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4496:	f8b1 e000 	ldrh.w	lr, [r1]
    449a:	f10e 0e01 	add.w	lr, lr, #1
    449e:	fa1f fe8e 	uxth.w	lr, lr
    44a2:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    44a6:	f895 e000 	ldrb.w	lr, [r5]
    44aa:	f8b1 a000 	ldrh.w	sl, [r1]
    44ae:	fb06 fe0e 	mul.w	lr, r6, lr
    44b2:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    44b6:	4486      	add	lr, r0
    44b8:	f89e b004 	ldrb.w	fp, [lr, #4]
    44bc:	fa1f fe8a 	uxth.w	lr, sl
    44c0:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    44c4:	f8b1 e000 	ldrh.w	lr, [r1]
    44c8:	f10e 0e01 	add.w	lr, lr, #1
    44cc:	fa1f fe8e 	uxth.w	lr, lr
    44d0:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    44d4:	f895 e000 	ldrb.w	lr, [r5]
    44d8:	f8b1 a000 	ldrh.w	sl, [r1]
    44dc:	fb06 fe0e 	mul.w	lr, r6, lr
    44e0:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    44e4:	4486      	add	lr, r0
    44e6:	f89e b005 	ldrb.w	fp, [lr, #5]
    44ea:	fa1f fe8a 	uxth.w	lr, sl
    44ee:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    44f2:	f8b1 e000 	ldrh.w	lr, [r1]
    44f6:	f10e 0e01 	add.w	lr, lr, #1
    44fa:	fa1f fe8e 	uxth.w	lr, lr
    44fe:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4502:	f895 e000 	ldrb.w	lr, [r5]
    4506:	f8b1 a000 	ldrh.w	sl, [r1]
    450a:	fb06 fe0e 	mul.w	lr, r6, lr
    450e:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4512:	4486      	add	lr, r0
    4514:	f89e b006 	ldrb.w	fp, [lr, #6]
    4518:	fa1f fe8a 	uxth.w	lr, sl
    451c:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4520:	f8b1 e000 	ldrh.w	lr, [r1]
    4524:	f10e 0e01 	add.w	lr, lr, #1
    4528:	fa1f fe8e 	uxth.w	lr, lr
    452c:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    4530:	f895 e000 	ldrb.w	lr, [r5]
    4534:	f8b1 a000 	ldrh.w	sl, [r1]
    4538:	fb06 fe0e 	mul.w	lr, r6, lr
    453c:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4540:	4486      	add	lr, r0
    4542:	f89e b007 	ldrb.w	fp, [lr, #7]
    4546:	fa1f fe8a 	uxth.w	lr, sl
    454a:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    454e:	f8b1 e000 	ldrh.w	lr, [r1]
    4552:	f10e 0e01 	add.w	lr, lr, #1
    4556:	fa1f fe8e 	uxth.w	lr, lr
    455a:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    455e:	f895 e000 	ldrb.w	lr, [r5]
    4562:	fb06 fe0e 	mul.w	lr, r6, lr
    4566:	eb0e 0c4c 	add.w	ip, lr, ip, lsl #1
    456a:	f8b1 e000 	ldrh.w	lr, [r1]
    456e:	4484      	add	ip, r0
    4570:	f89c a008 	ldrb.w	sl, [ip, #8]
    4574:	fa1f fc8e 	uxth.w	ip, lr
    4578:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    457c:	f8b1 c000 	ldrh.w	ip, [r1]
    4580:	f10c 0c01 	add.w	ip, ip, #1
    4584:	fa1f fc8c 	uxth.w	ip, ip
    4588:	f8a1 c000 	strh.w	ip, [r1]
					for (int j = 0; j < 8; j++)
    458c:	f47f af2a 	bne.w	43e4 <_Min_Heap_Size+0x3e4>
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4590:	f895 e000 	ldrb.w	lr, [r5]
							bufferPos++;
    4594:	f04f 080c 	mov.w	r8, #12
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4598:	f8b1 c000 	ldrh.w	ip, [r1]
    459c:	fb06 0e0e 	mla	lr, r6, lr, r0
    45a0:	fa1f fc8c 	uxth.w	ip, ip
    45a4:	f89e e050 	ldrb.w	lr, [lr, #80]	; 0x50
    45a8:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    45ac:	f8b1 c000 	ldrh.w	ip, [r1]
    45b0:	f10c 0c01 	add.w	ip, ip, #1
    45b4:	fa1f fc8c 	uxth.w	ip, ip
    45b8:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    45bc:	f895 e000 	ldrb.w	lr, [r5]
    45c0:	f8b1 c000 	ldrh.w	ip, [r1]
    45c4:	fb06 0e0e 	mla	lr, r6, lr, r0
    45c8:	fa1f fc8c 	uxth.w	ip, ip
    45cc:	f89e e051 	ldrb.w	lr, [lr, #81]	; 0x51
    45d0:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    45d4:	f8b1 c000 	ldrh.w	ip, [r1]
    45d8:	f10c 0c01 	add.w	ip, ip, #1
    45dc:	fa1f fc8c 	uxth.w	ip, ip
    45e0:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    45e4:	f895 e000 	ldrb.w	lr, [r5]
    45e8:	f8b1 c000 	ldrh.w	ip, [r1]
    45ec:	fb06 0e0e 	mla	lr, r6, lr, r0
    45f0:	fa1f fc8c 	uxth.w	ip, ip
    45f4:	f89e e052 	ldrb.w	lr, [lr, #82]	; 0x52
    45f8:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    45fc:	f8b1 c000 	ldrh.w	ip, [r1]
    4600:	f10c 0c01 	add.w	ip, ip, #1
    4604:	fa1f fc8c 	uxth.w	ip, ip
    4608:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    460c:	f895 e000 	ldrb.w	lr, [r5]
    4610:	f8b1 c000 	ldrh.w	ip, [r1]
    4614:	fb06 0e0e 	mla	lr, r6, lr, r0
    4618:	fa1f fc8c 	uxth.w	ip, ip
    461c:	f89e e053 	ldrb.w	lr, [lr, #83]	; 0x53
    4620:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4624:	f8b1 c000 	ldrh.w	ip, [r1]
    4628:	f10c 0c01 	add.w	ip, ip, #1
    462c:	fa1f fc8c 	uxth.w	ip, ip
    4630:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4634:	f895 e000 	ldrb.w	lr, [r5]
    4638:	f8b1 c000 	ldrh.w	ip, [r1]
    463c:	fb06 0e0e 	mla	lr, r6, lr, r0
    4640:	fa1f fc8c 	uxth.w	ip, ip
    4644:	f89e e054 	ldrb.w	lr, [lr, #84]	; 0x54
    4648:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    464c:	f8b1 c000 	ldrh.w	ip, [r1]
    4650:	f10c 0c01 	add.w	ip, ip, #1
    4654:	fa1f fc8c 	uxth.w	ip, ip
    4658:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    465c:	f895 e000 	ldrb.w	lr, [r5]
    4660:	f8b1 c000 	ldrh.w	ip, [r1]
    4664:	fb06 0e0e 	mla	lr, r6, lr, r0
    4668:	fa1f fc8c 	uxth.w	ip, ip
    466c:	f89e e055 	ldrb.w	lr, [lr, #85]	; 0x55
    4670:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4674:	f8b1 c000 	ldrh.w	ip, [r1]
    4678:	f10c 0c01 	add.w	ip, ip, #1
    467c:	fa1f fc8c 	uxth.w	ip, ip
    4680:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4684:	f895 e000 	ldrb.w	lr, [r5]
    4688:	f8b1 c000 	ldrh.w	ip, [r1]
    468c:	fb06 0e0e 	mla	lr, r6, lr, r0
    4690:	fa1f fc8c 	uxth.w	ip, ip
    4694:	f89e e056 	ldrb.w	lr, [lr, #86]	; 0x56
    4698:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    469c:	f8b1 c000 	ldrh.w	ip, [r1]
    46a0:	f10c 0c01 	add.w	ip, ip, #1
    46a4:	fa1f fc8c 	uxth.w	ip, ip
    46a8:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    46ac:	f895 e000 	ldrb.w	lr, [r5]
    46b0:	f8b1 c000 	ldrh.w	ip, [r1]
    46b4:	fb06 0e0e 	mla	lr, r6, lr, r0
    46b8:	fa1f fc8c 	uxth.w	ip, ip
    46bc:	f89e e057 	ldrb.w	lr, [lr, #87]	; 0x57
    46c0:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    46c4:	f8b1 c000 	ldrh.w	ip, [r1]
    46c8:	f10c 0c01 	add.w	ip, ip, #1
    46cc:	fa1f fc8c 	uxth.w	ip, ip
    46d0:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    46d4:	f895 e000 	ldrb.w	lr, [r5]
    46d8:	f8b1 c000 	ldrh.w	ip, [r1]
    46dc:	fb06 0e0e 	mla	lr, r6, lr, r0
    46e0:	fa1f fc8c 	uxth.w	ip, ip
    46e4:	f89e e058 	ldrb.w	lr, [lr, #88]	; 0x58
    46e8:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    46ec:	f8b1 c000 	ldrh.w	ip, [r1]
    46f0:	f10c 0c01 	add.w	ip, ip, #1
    46f4:	fa1f fc8c 	uxth.w	ip, ip
    46f8:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    46fc:	f895 e000 	ldrb.w	lr, [r5]
    4700:	f8b1 c000 	ldrh.w	ip, [r1]
    4704:	fb06 0e0e 	mla	lr, r6, lr, r0
    4708:	fa1f fc8c 	uxth.w	ip, ip
    470c:	f89e e059 	ldrb.w	lr, [lr, #89]	; 0x59
    4710:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4714:	f8b1 c000 	ldrh.w	ip, [r1]
    4718:	f10c 0c01 	add.w	ip, ip, #1
    471c:	fa1f fc8c 	uxth.w	ip, ip
    4720:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4724:	f895 e000 	ldrb.w	lr, [r5]
    4728:	f8b1 c000 	ldrh.w	ip, [r1]
    472c:	fb06 0e0e 	mla	lr, r6, lr, r0
    4730:	fa1f fc8c 	uxth.w	ip, ip
    4734:	f89e e05a 	ldrb.w	lr, [lr, #90]	; 0x5a
    4738:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    473c:	f8b1 c000 	ldrh.w	ip, [r1]
    4740:	f10c 0c01 	add.w	ip, ip, #1
    4744:	fa1f fc8c 	uxth.w	ip, ip
    4748:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    474c:	f895 e000 	ldrb.w	lr, [r5]
    4750:	f8b1 c000 	ldrh.w	ip, [r1]
    4754:	fb06 0e0e 	mla	lr, r6, lr, r0
    4758:	fa1f fc8c 	uxth.w	ip, ip
    475c:	f89e e05b 	ldrb.w	lr, [lr, #91]	; 0x5b
    4760:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4764:	f8b1 c000 	ldrh.w	ip, [r1]
    4768:	f10c 0c01 	add.w	ip, ip, #1
    476c:	fa1f fc8c 	uxth.w	ip, ip
    4770:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4774:	f895 e000 	ldrb.w	lr, [r5]
    4778:	f8b1 c000 	ldrh.w	ip, [r1]
    477c:	fb06 0e0e 	mla	lr, r6, lr, r0
    4780:	fa1f fc8c 	uxth.w	ip, ip
    4784:	f89e e05c 	ldrb.w	lr, [lr, #92]	; 0x5c
    4788:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    478c:	f8b1 c000 	ldrh.w	ip, [r1]
    4790:	f10c 0c01 	add.w	ip, ip, #1
    4794:	fa1f fc8c 	uxth.w	ip, ip
    4798:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    479c:	f895 e000 	ldrb.w	lr, [r5]
    47a0:	f8b1 c000 	ldrh.w	ip, [r1]
    47a4:	fb06 0e0e 	mla	lr, r6, lr, r0
    47a8:	fa1f fc8c 	uxth.w	ip, ip
    47ac:	f89e e05d 	ldrb.w	lr, [lr, #93]	; 0x5d
    47b0:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    47b4:	f8b1 c000 	ldrh.w	ip, [r1]
    47b8:	f10c 0c01 	add.w	ip, ip, #1
    47bc:	fa1f fc8c 	uxth.w	ip, ip
    47c0:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    47c4:	f895 e000 	ldrb.w	lr, [r5]
    47c8:	f8b1 c000 	ldrh.w	ip, [r1]
    47cc:	fb06 0e0e 	mla	lr, r6, lr, r0
    47d0:	fa1f fc8c 	uxth.w	ip, ip
    47d4:	f89e e05e 	ldrb.w	lr, [lr, #94]	; 0x5e
    47d8:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    47dc:	f8b1 c000 	ldrh.w	ip, [r1]
    47e0:	f10c 0c01 	add.w	ip, ip, #1
    47e4:	fa1f fc8c 	uxth.w	ip, ip
    47e8:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    47ec:	f895 e000 	ldrb.w	lr, [r5]
    47f0:	f8b1 c000 	ldrh.w	ip, [r1]
    47f4:	fb06 0e0e 	mla	lr, r6, lr, r0
    47f8:	fa1f fc8c 	uxth.w	ip, ip
    47fc:	f89e e05f 	ldrb.w	lr, [lr, #95]	; 0x5f
    4800:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4804:	f8b1 c000 	ldrh.w	ip, [r1]
    4808:	f10c 0c01 	add.w	ip, ip, #1
    480c:	fa1f fc8c 	uxth.w	ip, ip
    4810:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4814:	f895 e000 	ldrb.w	lr, [r5]
    4818:	f8b1 c000 	ldrh.w	ip, [r1]
    481c:	fb06 0e0e 	mla	lr, r6, lr, r0
    4820:	fa1f fc8c 	uxth.w	ip, ip
    4824:	f89e e060 	ldrb.w	lr, [lr, #96]	; 0x60
    4828:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    482c:	f8b1 c000 	ldrh.w	ip, [r1]
    4830:	f10c 0c01 	add.w	ip, ip, #1
    4834:	fa1f fc8c 	uxth.w	ip, ip
    4838:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    483c:	f895 e000 	ldrb.w	lr, [r5]
    4840:	f8b1 c000 	ldrh.w	ip, [r1]
    4844:	fb06 0e0e 	mla	lr, r6, lr, r0
    4848:	fa1f fc8c 	uxth.w	ip, ip
    484c:	f89e e061 	ldrb.w	lr, [lr, #97]	; 0x61
    4850:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4854:	f8b1 c000 	ldrh.w	ip, [r1]
    4858:	f10c 0c01 	add.w	ip, ip, #1
    485c:	fa1f fc8c 	uxth.w	ip, ip
    4860:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4864:	f895 e000 	ldrb.w	lr, [r5]
    4868:	f8b1 c000 	ldrh.w	ip, [r1]
    486c:	fb06 0e0e 	mla	lr, r6, lr, r0
    4870:	fa1f fc8c 	uxth.w	ip, ip
    4874:	f89e e062 	ldrb.w	lr, [lr, #98]	; 0x62
    4878:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    487c:	f8b1 c000 	ldrh.w	ip, [r1]
    4880:	f10c 0c01 	add.w	ip, ip, #1
    4884:	fa1f fc8c 	uxth.w	ip, ip
    4888:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    488c:	f895 e000 	ldrb.w	lr, [r5]
    4890:	f8b1 c000 	ldrh.w	ip, [r1]
    4894:	fb06 0e0e 	mla	lr, r6, lr, r0
    4898:	fa1f fc8c 	uxth.w	ip, ip
    489c:	f89e e063 	ldrb.w	lr, [lr, #99]	; 0x63
    48a0:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    48a4:	f8b1 c000 	ldrh.w	ip, [r1]
    48a8:	f10c 0c01 	add.w	ip, ip, #1
    48ac:	fa1f fc8c 	uxth.w	ip, ip
    48b0:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    48b4:	f895 e000 	ldrb.w	lr, [r5]
    48b8:	f8b1 c000 	ldrh.w	ip, [r1]
    48bc:	fb06 0e0e 	mla	lr, r6, lr, r0
    48c0:	fa1f fc8c 	uxth.w	ip, ip
    48c4:	f89e e064 	ldrb.w	lr, [lr, #100]	; 0x64
    48c8:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    48cc:	f8b1 c000 	ldrh.w	ip, [r1]
    48d0:	f10c 0c01 	add.w	ip, ip, #1
    48d4:	fa1f fc8c 	uxth.w	ip, ip
    48d8:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    48dc:	f895 e000 	ldrb.w	lr, [r5]
    48e0:	f8b1 c000 	ldrh.w	ip, [r1]
    48e4:	fb06 0e0e 	mla	lr, r6, lr, r0
    48e8:	fa1f fc8c 	uxth.w	ip, ip
    48ec:	f89e e065 	ldrb.w	lr, [lr, #101]	; 0x65
    48f0:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    48f4:	f8b1 c000 	ldrh.w	ip, [r1]
    48f8:	f10c 0c01 	add.w	ip, ip, #1
    48fc:	fa1f fc8c 	uxth.w	ip, ip
    4900:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4904:	f895 e000 	ldrb.w	lr, [r5]
    4908:	f8b1 c000 	ldrh.w	ip, [r1]
    490c:	fb06 0e0e 	mla	lr, r6, lr, r0
    4910:	fa1f fc8c 	uxth.w	ip, ip
    4914:	f89e e066 	ldrb.w	lr, [lr, #102]	; 0x66
    4918:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    491c:	f8b1 c000 	ldrh.w	ip, [r1]
    4920:	f10c 0c01 	add.w	ip, ip, #1
    4924:	fa1f fc8c 	uxth.w	ip, ip
    4928:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    492c:	f895 e000 	ldrb.w	lr, [r5]
    4930:	f8b1 c000 	ldrh.w	ip, [r1]
    4934:	fb06 0e0e 	mla	lr, r6, lr, r0
    4938:	fa1f fc8c 	uxth.w	ip, ip
    493c:	f89e e067 	ldrb.w	lr, [lr, #103]	; 0x67
    4940:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4944:	f8b1 c000 	ldrh.w	ip, [r1]
    4948:	f10c 0c01 	add.w	ip, ip, #1
    494c:	fa1f fc8c 	uxth.w	ip, ip
    4950:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4954:	f895 e000 	ldrb.w	lr, [r5]
    4958:	f8b1 c000 	ldrh.w	ip, [r1]
    495c:	fb06 0e0e 	mla	lr, r6, lr, r0
    4960:	fa1f fc8c 	uxth.w	ip, ip
    4964:	f89e e068 	ldrb.w	lr, [lr, #104]	; 0x68
    4968:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    496c:	f8b1 c000 	ldrh.w	ip, [r1]
    4970:	f10c 0c01 	add.w	ip, ip, #1
    4974:	fa1f fc8c 	uxth.w	ip, ip
    4978:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    497c:	f895 c000 	ldrb.w	ip, [r5]
    4980:	fb06 0c0c 	mla	ip, r6, ip, r0
    4984:	880e      	ldrh	r6, [r1, #0]
    4986:	f89c c069 	ldrb.w	ip, [ip, #105]	; 0x69
    498a:	b2b6      	uxth	r6, r6
    498c:	f803 c006 	strb.w	ip, [r3, r6]
							bufferPos++;
    4990:	880e      	ldrh	r6, [r1, #0]
    4992:	3601      	adds	r6, #1
    4994:	b2b6      	uxth	r6, r6
    4996:	800e      	strh	r6, [r1, #0]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4998:	26c8      	movs	r6, #200	; 0xc8
    499a:	f895 e000 	ldrb.w	lr, [r5]
    499e:	f8b1 c000 	ldrh.w	ip, [r1]
    49a2:	fb06 0e0e 	mla	lr, r6, lr, r0
    49a6:	fa1f fc8c 	uxth.w	ip, ip
    49aa:	f89e e06a 	ldrb.w	lr, [lr, #106]	; 0x6a
    49ae:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    49b2:	f8b1 c000 	ldrh.w	ip, [r1]
    49b6:	f10c 0c01 	add.w	ip, ip, #1
    49ba:	fa1f fc8c 	uxth.w	ip, ip
    49be:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    49c2:	f895 e000 	ldrb.w	lr, [r5]
    49c6:	f8b1 c000 	ldrh.w	ip, [r1]
    49ca:	fb06 0e0e 	mla	lr, r6, lr, r0
    49ce:	fa1f fc8c 	uxth.w	ip, ip
    49d2:	f89e e06b 	ldrb.w	lr, [lr, #107]	; 0x6b
    49d6:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    49da:	f8b1 c000 	ldrh.w	ip, [r1]
    49de:	f10c 0c01 	add.w	ip, ip, #1
    49e2:	fa1f fc8c 	uxth.w	ip, ip
    49e6:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    49ea:	f895 e000 	ldrb.w	lr, [r5]
    49ee:	f8b1 c000 	ldrh.w	ip, [r1]
    49f2:	fb06 0e0e 	mla	lr, r6, lr, r0
    49f6:	fa1f fc8c 	uxth.w	ip, ip
    49fa:	f89e e06c 	ldrb.w	lr, [lr, #108]	; 0x6c
    49fe:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4a02:	f8b1 c000 	ldrh.w	ip, [r1]
    4a06:	f10c 0c01 	add.w	ip, ip, #1
    4a0a:	fa1f fc8c 	uxth.w	ip, ip
    4a0e:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4a12:	f895 e000 	ldrb.w	lr, [r5]
    4a16:	f8b1 c000 	ldrh.w	ip, [r1]
    4a1a:	fb06 0e0e 	mla	lr, r6, lr, r0
    4a1e:	fa1f fc8c 	uxth.w	ip, ip
    4a22:	f89e e06d 	ldrb.w	lr, [lr, #109]	; 0x6d
    4a26:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4a2a:	f8b1 c000 	ldrh.w	ip, [r1]
    4a2e:	f10c 0c01 	add.w	ip, ip, #1
    4a32:	fa1f fc8c 	uxth.w	ip, ip
    4a36:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4a3a:	f895 e000 	ldrb.w	lr, [r5]
    4a3e:	f8b1 c000 	ldrh.w	ip, [r1]
    4a42:	fb06 0e0e 	mla	lr, r6, lr, r0
    4a46:	fa1f fc8c 	uxth.w	ip, ip
    4a4a:	f89e e06e 	ldrb.w	lr, [lr, #110]	; 0x6e
    4a4e:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4a52:	f8b1 c000 	ldrh.w	ip, [r1]
    4a56:	f10c 0c01 	add.w	ip, ip, #1
    4a5a:	fa1f fc8c 	uxth.w	ip, ip
    4a5e:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4a62:	f895 e000 	ldrb.w	lr, [r5]
    4a66:	f8b1 c000 	ldrh.w	ip, [r1]
    4a6a:	fb06 0e0e 	mla	lr, r6, lr, r0
    4a6e:	fa1f fc8c 	uxth.w	ip, ip
    4a72:	f89e e06f 	ldrb.w	lr, [lr, #111]	; 0x6f
    4a76:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4a7a:	f8b1 c000 	ldrh.w	ip, [r1]
    4a7e:	f10c 0c01 	add.w	ip, ip, #1
    4a82:	fa1f fc8c 	uxth.w	ip, ip
    4a86:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4a8a:	f895 e000 	ldrb.w	lr, [r5]
    4a8e:	f8b1 c000 	ldrh.w	ip, [r1]
    4a92:	fb06 0e0e 	mla	lr, r6, lr, r0
    4a96:	fa1f fc8c 	uxth.w	ip, ip
    4a9a:	f89e e070 	ldrb.w	lr, [lr, #112]	; 0x70
    4a9e:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4aa2:	f8b1 c000 	ldrh.w	ip, [r1]
    4aa6:	f10c 0c01 	add.w	ip, ip, #1
    4aaa:	fa1f fc8c 	uxth.w	ip, ip
    4aae:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4ab2:	f895 e000 	ldrb.w	lr, [r5]
    4ab6:	f8b1 c000 	ldrh.w	ip, [r1]
    4aba:	fb06 0e0e 	mla	lr, r6, lr, r0
    4abe:	fa1f fc8c 	uxth.w	ip, ip
    4ac2:	f89e e071 	ldrb.w	lr, [lr, #113]	; 0x71
    4ac6:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4aca:	f8b1 c000 	ldrh.w	ip, [r1]
    4ace:	f10c 0c01 	add.w	ip, ip, #1
    4ad2:	fa1f fc8c 	uxth.w	ip, ip
    4ad6:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4ada:	f895 e000 	ldrb.w	lr, [r5]
    4ade:	f8b1 c000 	ldrh.w	ip, [r1]
    4ae2:	fb06 0e0e 	mla	lr, r6, lr, r0
    4ae6:	fa1f fc8c 	uxth.w	ip, ip
    4aea:	f89e e072 	ldrb.w	lr, [lr, #114]	; 0x72
    4aee:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4af2:	f8b1 c000 	ldrh.w	ip, [r1]
    4af6:	f10c 0c01 	add.w	ip, ip, #1
    4afa:	fa1f fc8c 	uxth.w	ip, ip
    4afe:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4b02:	f895 e000 	ldrb.w	lr, [r5]
    4b06:	f8b1 c000 	ldrh.w	ip, [r1]
    4b0a:	fb06 0e0e 	mla	lr, r6, lr, r0
    4b0e:	fa1f fc8c 	uxth.w	ip, ip
    4b12:	f89e e073 	ldrb.w	lr, [lr, #115]	; 0x73
    4b16:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4b1a:	f8b1 c000 	ldrh.w	ip, [r1]
    4b1e:	f10c 0c01 	add.w	ip, ip, #1
    4b22:	fa1f fc8c 	uxth.w	ip, ip
    4b26:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4b2a:	f895 e000 	ldrb.w	lr, [r5]
    4b2e:	f8b1 c000 	ldrh.w	ip, [r1]
    4b32:	fb06 0e0e 	mla	lr, r6, lr, r0
    4b36:	fa1f fc8c 	uxth.w	ip, ip
    4b3a:	f89e e074 	ldrb.w	lr, [lr, #116]	; 0x74
    4b3e:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4b42:	f8b1 c000 	ldrh.w	ip, [r1]
    4b46:	f10c 0c01 	add.w	ip, ip, #1
    4b4a:	fa1f fc8c 	uxth.w	ip, ip
    4b4e:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4b52:	f895 e000 	ldrb.w	lr, [r5]
    4b56:	f8b1 c000 	ldrh.w	ip, [r1]
    4b5a:	fb06 0e0e 	mla	lr, r6, lr, r0
    4b5e:	fa1f fc8c 	uxth.w	ip, ip
    4b62:	f89e e075 	ldrb.w	lr, [lr, #117]	; 0x75
    4b66:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4b6a:	f8b1 c000 	ldrh.w	ip, [r1]
    4b6e:	f10c 0c01 	add.w	ip, ip, #1
    4b72:	fa1f fc8c 	uxth.w	ip, ip
    4b76:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4b7a:	f895 e000 	ldrb.w	lr, [r5]
    4b7e:	f8b1 c000 	ldrh.w	ip, [r1]
    4b82:	fb06 0e0e 	mla	lr, r6, lr, r0
    4b86:	fa1f fc8c 	uxth.w	ip, ip
    4b8a:	f89e e076 	ldrb.w	lr, [lr, #118]	; 0x76
    4b8e:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4b92:	f8b1 c000 	ldrh.w	ip, [r1]
    4b96:	f10c 0c01 	add.w	ip, ip, #1
    4b9a:	fa1f fc8c 	uxth.w	ip, ip
    4b9e:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    4ba2:	f895 e000 	ldrb.w	lr, [r5]
    4ba6:	f8b1 c000 	ldrh.w	ip, [r1]
    4baa:	fb06 0e0e 	mla	lr, r6, lr, r0
    4bae:	fa1f fc8c 	uxth.w	ip, ip
    4bb2:	f89e e077 	ldrb.w	lr, [lr, #119]	; 0x77
    4bb6:	f803 e00c 	strb.w	lr, [r3, ip]
							bufferPos++;
    4bba:	f8b1 c000 	ldrh.w	ip, [r1]
    4bbe:	f10c 0c01 	add.w	ip, ip, #1
    4bc2:	fa1f fc8c 	uxth.w	ip, ip
    4bc6:	f8a1 c000 	strh.w	ip, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4bca:	f895 e000 	ldrb.w	lr, [r5]
    4bce:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
    4bd2:	f8b1 a000 	ldrh.w	sl, [r1]
					for (int j = 0; j < 8; j++)
    4bd6:	f108 0801 	add.w	r8, r8, #1
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4bda:	fb06 fe0e 	mul.w	lr, r6, lr
					for (int j = 0; j < 8; j++)
    4bde:	f1b8 0f14 	cmp.w	r8, #20
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4be2:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4be6:	f810 b00e 	ldrb.w	fp, [r0, lr]
    4bea:	fa1f fe8a 	uxth.w	lr, sl
    4bee:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4bf2:	f8b1 e000 	ldrh.w	lr, [r1]
    4bf6:	f10e 0e01 	add.w	lr, lr, #1
    4bfa:	fa1f fe8e 	uxth.w	lr, lr
    4bfe:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4c02:	f895 e000 	ldrb.w	lr, [r5]
    4c06:	f8b1 a000 	ldrh.w	sl, [r1]
    4c0a:	fb06 fe0e 	mul.w	lr, r6, lr
    4c0e:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4c12:	4486      	add	lr, r0
    4c14:	f89e b001 	ldrb.w	fp, [lr, #1]
    4c18:	fa1f fe8a 	uxth.w	lr, sl
    4c1c:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4c20:	f8b1 e000 	ldrh.w	lr, [r1]
    4c24:	f10e 0e01 	add.w	lr, lr, #1
    4c28:	fa1f fe8e 	uxth.w	lr, lr
    4c2c:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4c30:	f895 e000 	ldrb.w	lr, [r5]
    4c34:	f8b1 a000 	ldrh.w	sl, [r1]
    4c38:	fb06 fe0e 	mul.w	lr, r6, lr
    4c3c:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4c40:	4486      	add	lr, r0
    4c42:	f89e b002 	ldrb.w	fp, [lr, #2]
    4c46:	fa1f fe8a 	uxth.w	lr, sl
    4c4a:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4c4e:	f8b1 e000 	ldrh.w	lr, [r1]
    4c52:	f10e 0e01 	add.w	lr, lr, #1
    4c56:	fa1f fe8e 	uxth.w	lr, lr
    4c5a:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4c5e:	f895 e000 	ldrb.w	lr, [r5]
    4c62:	f8b1 a000 	ldrh.w	sl, [r1]
    4c66:	fb06 fe0e 	mul.w	lr, r6, lr
    4c6a:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4c6e:	4486      	add	lr, r0
    4c70:	f89e b003 	ldrb.w	fp, [lr, #3]
    4c74:	fa1f fe8a 	uxth.w	lr, sl
    4c78:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4c7c:	f8b1 e000 	ldrh.w	lr, [r1]
    4c80:	f10e 0e01 	add.w	lr, lr, #1
    4c84:	fa1f fe8e 	uxth.w	lr, lr
    4c88:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4c8c:	f895 e000 	ldrb.w	lr, [r5]
    4c90:	f8b1 a000 	ldrh.w	sl, [r1]
    4c94:	fb06 fe0e 	mul.w	lr, r6, lr
    4c98:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4c9c:	4486      	add	lr, r0
    4c9e:	f89e b004 	ldrb.w	fp, [lr, #4]
    4ca2:	fa1f fe8a 	uxth.w	lr, sl
    4ca6:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4caa:	f8b1 e000 	ldrh.w	lr, [r1]
    4cae:	f10e 0e01 	add.w	lr, lr, #1
    4cb2:	fa1f fe8e 	uxth.w	lr, lr
    4cb6:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4cba:	f895 e000 	ldrb.w	lr, [r5]
    4cbe:	f8b1 a000 	ldrh.w	sl, [r1]
    4cc2:	fb06 fe0e 	mul.w	lr, r6, lr
    4cc6:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4cca:	4486      	add	lr, r0
    4ccc:	f89e b005 	ldrb.w	fp, [lr, #5]
    4cd0:	fa1f fe8a 	uxth.w	lr, sl
    4cd4:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4cd8:	f8b1 e000 	ldrh.w	lr, [r1]
    4cdc:	f10e 0e01 	add.w	lr, lr, #1
    4ce0:	fa1f fe8e 	uxth.w	lr, lr
    4ce4:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4ce8:	f895 e000 	ldrb.w	lr, [r5]
    4cec:	f8b1 a000 	ldrh.w	sl, [r1]
    4cf0:	fb06 fe0e 	mul.w	lr, r6, lr
    4cf4:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4cf8:	4486      	add	lr, r0
    4cfa:	f89e b006 	ldrb.w	fp, [lr, #6]
    4cfe:	fa1f fe8a 	uxth.w	lr, sl
    4d02:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4d06:	f8b1 e000 	ldrh.w	lr, [r1]
    4d0a:	f10e 0e01 	add.w	lr, lr, #1
    4d0e:	fa1f fe8e 	uxth.w	lr, lr
    4d12:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4d16:	f895 e000 	ldrb.w	lr, [r5]
    4d1a:	f8b1 a000 	ldrh.w	sl, [r1]
    4d1e:	fb06 fe0e 	mul.w	lr, r6, lr
    4d22:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4d26:	4486      	add	lr, r0
    4d28:	f89e b007 	ldrb.w	fp, [lr, #7]
    4d2c:	fa1f fe8a 	uxth.w	lr, sl
    4d30:	f803 b00e 	strb.w	fp, [r3, lr]
							bufferPos++;
    4d34:	f8b1 e000 	ldrh.w	lr, [r1]
    4d38:	f10e 0e01 	add.w	lr, lr, #1
    4d3c:	fa1f fe8e 	uxth.w	lr, lr
    4d40:	f8a1 e000 	strh.w	lr, [r1]
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    4d44:	f895 e000 	ldrb.w	lr, [r5]
    4d48:	fb06 fe0e 	mul.w	lr, r6, lr
    4d4c:	eb0e 0c4c 	add.w	ip, lr, ip, lsl #1
    4d50:	f8b1 e000 	ldrh.w	lr, [r1]
    4d54:	4484      	add	ip, r0
    4d56:	f89c a008 	ldrb.w	sl, [ip, #8]
    4d5a:	fa1f fc8e 	uxth.w	ip, lr
    4d5e:	f803 a00c 	strb.w	sl, [r3, ip]
							bufferPos++;
    4d62:	f8b1 c000 	ldrh.w	ip, [r1]
    4d66:	f10c 0c01 	add.w	ip, ip, #1
    4d6a:	fa1f fc8c 	uxth.w	ip, ip
    4d6e:	f8a1 c000 	strh.w	ip, [r1]
					for (int j = 0; j < 8; j++)
    4d72:	f47f af2a 	bne.w	4bca <_Min_Heap_Size+0xbca>
    4d76:	f8df e11c 	ldr.w	lr, [pc, #284]	; 4e94 <_Min_Heap_Size+0xe94>
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    4d7a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 4e58 <_Min_Heap_Size+0xe58>
    4d7e:	f10e 0850 	add.w	r8, lr, #80	; 0x50
    4d82:	ecfe 7a01 	vldmia	lr!, {s15}
						buffer[bufferPos] = integerVersion >> 8;
    4d86:	f8b1 c000 	ldrh.w	ip, [r1]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    4d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
						buffer[bufferPos+1] = integerVersion & 255;
    4d8e:	880e      	ldrh	r6, [r1, #0]
						bufferPos = bufferPos + 2;
    4d90:	880d      	ldrh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    4d92:	fa1f fc8c 	uxth.w	ip, ip
						buffer[bufferPos+1] = integerVersion & 255;
    4d96:	fa13 f686 	uxtah	r6, r3, r6
					for (int i = 0; i < 20; i++)
    4d9a:	45f0      	cmp	r8, lr
						bufferPos = bufferPos + 2;
    4d9c:	f105 0502 	add.w	r5, r5, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    4da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
						bufferPos = bufferPos + 2;
    4da4:	b2ad      	uxth	r5, r5
    4da6:	800d      	strh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    4da8:	ee17 5a90 	vmov	r5, s15
						buffer[bufferPos] = integerVersion >> 8;
    4dac:	f3c5 2a07 	ubfx	sl, r5, #8, #8
    4db0:	f803 a00c 	strb.w	sl, [r3, ip]
						buffer[bufferPos+1] = integerVersion & 255;
    4db4:	7075      	strb	r5, [r6, #1]
					for (int i = 0; i < 20; i++)
    4db6:	d1e4      	bne.n	4d82 <_Min_Heap_Size+0xd82>
					 presetNumberToLoad = presetNumberToSave;
    4db8:	f899 3000 	ldrb.w	r3, [r9]
    4dbc:	4d27      	ldr	r5, [pc, #156]	; (4e5c <_Min_Heap_Size+0xe5c>)
    4dbe:	b2db      	uxtb	r3, r3
    4dc0:	702b      	strb	r3, [r5, #0]
					 presetWaitingToParse = bufferPos;
    4dc2:	880b      	ldrh	r3, [r1, #0]
    4dc4:	4d26      	ldr	r5, [pc, #152]	; (4e60 <_Min_Heap_Size+0xe60>)
    4dc6:	b29b      	uxth	r3, r3
    4dc8:	602b      	str	r3, [r5, #0]
					 presetWaitingToWrite = bufferPos;
    4dca:	880b      	ldrh	r3, [r1, #0]
    4dcc:	4925      	ldr	r1, [pc, #148]	; (4e64 <_Min_Heap_Size+0xe64>)
    4dce:	b29b      	uxth	r3, r3
    4dd0:	600b      	str	r3, [r1, #0]
    4dd2:	f7fe bfe2 	b.w	3d9a <handleSPI+0x31a>
			if (boardNumber == 0)
    4dd6:	4b24      	ldr	r3, [pc, #144]	; (4e68 <_Min_Heap_Size+0xe68>)
    4dd8:	781b      	ldrb	r3, [r3, #0]
    4dda:	2b00      	cmp	r3, #0
    4ddc:	f47e ae81 	bne.w	3ae2 <handleSPI+0x62>
				brainFirmwareUpdateRequested = 1;
    4de0:	2101      	movs	r1, #1
    4de2:	4b22      	ldr	r3, [pc, #136]	; (4e6c <_Min_Heap_Size+0xe6c>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    4de4:	1842      	adds	r2, r0, r1
				brainFirmwareUpdateRequested = 1;
    4de6:	6019      	str	r1, [r3, #0]
    4de8:	4821      	ldr	r0, [pc, #132]	; (4e70 <_Min_Heap_Size+0xe70>)
    4dea:	f7fe bfd6 	b.w	3d9a <handleSPI+0x31a>
			 if (writingState != ReceivingPreset)
    4dee:	4a21      	ldr	r2, [pc, #132]	; (4e74 <_Min_Heap_Size+0xe74>)
    4df0:	7813      	ldrb	r3, [r2, #0]
    4df2:	2b02      	cmp	r3, #2
    4df4:	f000 8409 	beq.w	560a <_Min_Heap_Size+0x160a>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    4df8:	4b1f      	ldr	r3, [pc, #124]	; (4e78 <_Min_Heap_Size+0xe78>)
    4dfa:	2102      	movs	r1, #2
    4dfc:	0758      	lsls	r0, r3, #29
    4dfe:	7011      	strb	r1, [r2, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    4e00:	f040 87b6 	bne.w	5d70 <_Min_Heap_Size+0x1d70>
    4e04:	f503 6280 	add.w	r2, r3, #1024	; 0x400
						audioOutBuffer[i] = 0;
    4e08:	2000      	movs	r0, #0
    4e0a:	2100      	movs	r1, #0
    4e0c:	e8e3 0102 	strd	r0, r1, [r3], #8
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    4e10:	4293      	cmp	r3, r2
    4e12:	d1fb      	bne.n	4e0c <_Min_Heap_Size+0xe0c>
				 diskBusy = 1;
    4e14:	4a19      	ldr	r2, [pc, #100]	; (4e7c <_Min_Heap_Size+0xe7c>)
    4e16:	2101      	movs	r1, #1
				 audioMasterLevel = 0.0f;
    4e18:	4b19      	ldr	r3, [pc, #100]	; (4e80 <_Min_Heap_Size+0xe80>)
				 diskBusy = 1;
    4e1a:	7011      	strb	r1, [r2, #0]
				 audioMasterLevel = 0.0f;
    4e1c:	2200      	movs	r2, #0
				 bufferPos = 0;
    4e1e:	4919      	ldr	r1, [pc, #100]	; (4e84 <_Min_Heap_Size+0xe84>)
				 audioMasterLevel = 0.0f;
    4e20:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    4e22:	2300      	movs	r3, #0
    4e24:	800b      	strh	r3, [r1, #0]
			 presetNumberToSave = SPI_LEVERS_RX[offset + 1];
    4e26:	193b      	adds	r3, r7, r4
    4e28:	4a17      	ldr	r2, [pc, #92]	; (4e88 <_Min_Heap_Size+0xe88>)
    4e2a:	4e18      	ldr	r6, [pc, #96]	; (4e8c <_Min_Heap_Size+0xe8c>)
    4e2c:	785b      	ldrb	r3, [r3, #1]
    4e2e:	7013      	strb	r3, [r2, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    4e30:	1ca3      	adds	r3, r4, #2
    4e32:	b2db      	uxtb	r3, r3
    4e34:	1e58      	subs	r0, r3, #1
    4e36:	441e      	add	r6, r3
    4e38:	4b15      	ldr	r3, [pc, #84]	; (4e90 <_Min_Heap_Size+0xe90>)
    4e3a:	4438      	add	r0, r7
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    4e3c:	880a      	ldrh	r2, [r1, #0]
    4e3e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    4e42:	b292      	uxth	r2, r2
			 for (int i = 0; i < 28; i++)
    4e44:	4286      	cmp	r6, r0
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    4e46:	549d      	strb	r5, [r3, r2]
    4e48:	f102 0201 	add.w	r2, r2, #1
    4e4c:	b292      	uxth	r2, r2
    4e4e:	800a      	strh	r2, [r1, #0]
			 for (int i = 0; i < 28; i++)
    4e50:	d1f4      	bne.n	4e3c <_Min_Heap_Size+0xe3c>
    4e52:	f7fe bf9b 	b.w	3d8c <handleSPI+0x30c>
    4e56:	bf00      	nop
    4e58:	47800000 	.word	0x47800000
    4e5c:	2001a46e 	.word	0x2001a46e
    4e60:	2001a474 	.word	0x2001a474
    4e64:	2001a478 	.word	0x2001a478
    4e68:	20014435 	.word	0x20014435
    4e6c:	20014448 	.word	0x20014448
    4e70:	30043380 	.word	0x30043380
    4e74:	2001ca77 	.word	0x2001ca77
    4e78:	30000000 	.word	0x30000000
    4e7c:	20014490 	.word	0x20014490
    4e80:	200006a0 	.word	0x200006a0
    4e84:	2001444c 	.word	0x2001444c
    4e88:	2001a46f 	.word	0x2001a46f
    4e8c:	3000081b 	.word	0x3000081b
    4e90:	30042380 	.word	0x30042380
    4e94:	200051e8 	.word	0x200051e8
			uint8_t currentByte = offset+1;
    4e98:	f100 0801 	add.w	r8, r0, #1
				if (knobFrozen[i])
    4e9c:	4e85      	ldr	r6, [pc, #532]	; (50b4 <_Min_Heap_Size+0x10b4>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    4e9e:	fa5f f888 	uxtb.w	r8, r8
				if (knobFrozen[i])
    4ea2:	7833      	ldrb	r3, [r6, #0]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4ea4:	f817 9008 	ldrb.w	r9, [r7, r8]
				if (knobFrozen[i])
    4ea8:	2b00      	cmp	r3, #0
    4eaa:	f000 8248 	beq.w	533e <_Min_Heap_Size+0x133e>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4eae:	4d82      	ldr	r5, [pc, #520]	; (50b8 <_Min_Heap_Size+0x10b8>)
    4eb0:	682b      	ldr	r3, [r5, #0]
    4eb2:	3303      	adds	r3, #3
    4eb4:	454b      	cmp	r3, r9
    4eb6:	db03      	blt.n	4ec0 <_Min_Heap_Size+0xec0>
    4eb8:	682b      	ldr	r3, [r5, #0]
    4eba:	3b03      	subs	r3, #3
    4ebc:	454b      	cmp	r3, r9
    4ebe:	dd03      	ble.n	4ec8 <_Min_Heap_Size+0xec8>
						knobFrozen[i] = 0;
    4ec0:	2300      	movs	r3, #0
    4ec2:	7033      	strb	r3, [r6, #0]
						prevKnobByte[i] = newByte;
    4ec4:	f8c5 9000 	str.w	r9, [r5]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4ec8:	eb07 0308 	add.w	r3, r7, r8
    4ecc:	f893 9001 	ldrb.w	r9, [r3, #1]
				if (knobFrozen[i])
    4ed0:	7873      	ldrb	r3, [r6, #1]
    4ed2:	2b00      	cmp	r3, #0
    4ed4:	f000 8225 	beq.w	5322 <_Min_Heap_Size+0x1322>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4ed8:	686b      	ldr	r3, [r5, #4]
    4eda:	3303      	adds	r3, #3
    4edc:	454b      	cmp	r3, r9
    4ede:	db03      	blt.n	4ee8 <_Min_Heap_Size+0xee8>
    4ee0:	686b      	ldr	r3, [r5, #4]
    4ee2:	3b03      	subs	r3, #3
    4ee4:	454b      	cmp	r3, r9
    4ee6:	dd03      	ble.n	4ef0 <_Min_Heap_Size+0xef0>
						knobFrozen[i] = 0;
    4ee8:	2300      	movs	r3, #0
    4eea:	7073      	strb	r3, [r6, #1]
						prevKnobByte[i] = newByte;
    4eec:	f8c5 9004 	str.w	r9, [r5, #4]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4ef0:	eb07 0308 	add.w	r3, r7, r8
    4ef4:	f893 9002 	ldrb.w	r9, [r3, #2]
				if (knobFrozen[i])
    4ef8:	78b3      	ldrb	r3, [r6, #2]
    4efa:	2b00      	cmp	r3, #0
    4efc:	f000 8203 	beq.w	5306 <_Min_Heap_Size+0x1306>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4f00:	68ab      	ldr	r3, [r5, #8]
    4f02:	3303      	adds	r3, #3
    4f04:	454b      	cmp	r3, r9
    4f06:	db03      	blt.n	4f10 <_Min_Heap_Size+0xf10>
    4f08:	68ab      	ldr	r3, [r5, #8]
    4f0a:	3b03      	subs	r3, #3
    4f0c:	454b      	cmp	r3, r9
    4f0e:	dd03      	ble.n	4f18 <_Min_Heap_Size+0xf18>
						knobFrozen[i] = 0;
    4f10:	2300      	movs	r3, #0
    4f12:	70b3      	strb	r3, [r6, #2]
						prevKnobByte[i] = newByte;
    4f14:	f8c5 9008 	str.w	r9, [r5, #8]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4f18:	eb07 0308 	add.w	r3, r7, r8
    4f1c:	f893 9003 	ldrb.w	r9, [r3, #3]
				if (knobFrozen[i])
    4f20:	78f3      	ldrb	r3, [r6, #3]
    4f22:	2b00      	cmp	r3, #0
    4f24:	f000 81e1 	beq.w	52ea <_Min_Heap_Size+0x12ea>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4f28:	68eb      	ldr	r3, [r5, #12]
    4f2a:	3303      	adds	r3, #3
    4f2c:	4599      	cmp	r9, r3
    4f2e:	dc03      	bgt.n	4f38 <_Min_Heap_Size+0xf38>
    4f30:	68eb      	ldr	r3, [r5, #12]
    4f32:	3b03      	subs	r3, #3
    4f34:	454b      	cmp	r3, r9
    4f36:	dd03      	ble.n	4f40 <_Min_Heap_Size+0xf40>
						knobFrozen[i] = 0;
    4f38:	2300      	movs	r3, #0
    4f3a:	70f3      	strb	r3, [r6, #3]
						prevKnobByte[i] = newByte;
    4f3c:	f8c5 900c 	str.w	r9, [r5, #12]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4f40:	eb07 0308 	add.w	r3, r7, r8
    4f44:	f893 9004 	ldrb.w	r9, [r3, #4]
				if (knobFrozen[i])
    4f48:	7933      	ldrb	r3, [r6, #4]
    4f4a:	2b00      	cmp	r3, #0
    4f4c:	f000 829a 	beq.w	5484 <_Min_Heap_Size+0x1484>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4f50:	692b      	ldr	r3, [r5, #16]
    4f52:	3303      	adds	r3, #3
    4f54:	4599      	cmp	r9, r3
    4f56:	dc03      	bgt.n	4f60 <_Min_Heap_Size+0xf60>
    4f58:	692b      	ldr	r3, [r5, #16]
    4f5a:	3b03      	subs	r3, #3
    4f5c:	454b      	cmp	r3, r9
    4f5e:	dd03      	ble.n	4f68 <_Min_Heap_Size+0xf68>
						knobFrozen[i] = 0;
    4f60:	2300      	movs	r3, #0
    4f62:	7133      	strb	r3, [r6, #4]
						prevKnobByte[i] = newByte;
    4f64:	f8c5 9010 	str.w	r9, [r5, #16]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4f68:	eb07 0308 	add.w	r3, r7, r8
    4f6c:	f893 9005 	ldrb.w	r9, [r3, #5]
				if (knobFrozen[i])
    4f70:	7973      	ldrb	r3, [r6, #5]
    4f72:	2b00      	cmp	r3, #0
    4f74:	f000 8278 	beq.w	5468 <_Min_Heap_Size+0x1468>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4f78:	696b      	ldr	r3, [r5, #20]
    4f7a:	3303      	adds	r3, #3
    4f7c:	4599      	cmp	r9, r3
    4f7e:	dc03      	bgt.n	4f88 <_Min_Heap_Size+0xf88>
    4f80:	696b      	ldr	r3, [r5, #20]
    4f82:	3b03      	subs	r3, #3
    4f84:	4599      	cmp	r9, r3
    4f86:	da03      	bge.n	4f90 <_Min_Heap_Size+0xf90>
						knobFrozen[i] = 0;
    4f88:	2300      	movs	r3, #0
    4f8a:	7173      	strb	r3, [r6, #5]
						prevKnobByte[i] = newByte;
    4f8c:	f8c5 9014 	str.w	r9, [r5, #20]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4f90:	eb07 0308 	add.w	r3, r7, r8
    4f94:	f893 9006 	ldrb.w	r9, [r3, #6]
				if (knobFrozen[i])
    4f98:	79b3      	ldrb	r3, [r6, #6]
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	f000 8224 	beq.w	53e8 <_Min_Heap_Size+0x13e8>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4fa0:	69ab      	ldr	r3, [r5, #24]
    4fa2:	3303      	adds	r3, #3
    4fa4:	4599      	cmp	r9, r3
    4fa6:	dc03      	bgt.n	4fb0 <_Min_Heap_Size+0xfb0>
    4fa8:	69ab      	ldr	r3, [r5, #24]
    4faa:	3b03      	subs	r3, #3
    4fac:	4599      	cmp	r9, r3
    4fae:	da03      	bge.n	4fb8 <_Min_Heap_Size+0xfb8>
						knobFrozen[i] = 0;
    4fb0:	2300      	movs	r3, #0
    4fb2:	71b3      	strb	r3, [r6, #6]
						prevKnobByte[i] = newByte;
    4fb4:	f8c5 9018 	str.w	r9, [r5, #24]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4fb8:	eb07 0308 	add.w	r3, r7, r8
    4fbc:	f893 9007 	ldrb.w	r9, [r3, #7]
				if (knobFrozen[i])
    4fc0:	79f3      	ldrb	r3, [r6, #7]
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	f000 8202 	beq.w	53cc <_Min_Heap_Size+0x13cc>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4fc8:	69eb      	ldr	r3, [r5, #28]
    4fca:	3303      	adds	r3, #3
    4fcc:	454b      	cmp	r3, r9
    4fce:	db03      	blt.n	4fd8 <_Min_Heap_Size+0xfd8>
    4fd0:	69eb      	ldr	r3, [r5, #28]
    4fd2:	3b03      	subs	r3, #3
    4fd4:	454b      	cmp	r3, r9
    4fd6:	dd03      	ble.n	4fe0 <_Min_Heap_Size+0xfe0>
						knobFrozen[i] = 0;
    4fd8:	2300      	movs	r3, #0
    4fda:	71f3      	strb	r3, [r6, #7]
						prevKnobByte[i] = newByte;
    4fdc:	f8c5 901c 	str.w	r9, [r5, #28]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    4fe0:	eb07 0308 	add.w	r3, r7, r8
    4fe4:	f893 9008 	ldrb.w	r9, [r3, #8]
				if (knobFrozen[i])
    4fe8:	7a33      	ldrb	r3, [r6, #8]
    4fea:	2b00      	cmp	r3, #0
    4fec:	f000 81e0 	beq.w	53b0 <_Min_Heap_Size+0x13b0>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    4ff0:	6a2b      	ldr	r3, [r5, #32]
    4ff2:	3303      	adds	r3, #3
    4ff4:	4599      	cmp	r9, r3
    4ff6:	dc03      	bgt.n	5000 <_Min_Heap_Size+0x1000>
    4ff8:	6a2b      	ldr	r3, [r5, #32]
    4ffa:	3b03      	subs	r3, #3
    4ffc:	4599      	cmp	r9, r3
    4ffe:	da03      	bge.n	5008 <_Min_Heap_Size+0x1008>
						knobFrozen[i] = 0;
    5000:	2300      	movs	r3, #0
    5002:	7233      	strb	r3, [r6, #8]
						prevKnobByte[i] = newByte;
    5004:	f8c5 9020 	str.w	r9, [r5, #32]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    5008:	eb07 0308 	add.w	r3, r7, r8
    500c:	f893 9009 	ldrb.w	r9, [r3, #9]
				if (knobFrozen[i])
    5010:	7a73      	ldrb	r3, [r6, #9]
    5012:	2b00      	cmp	r3, #0
    5014:	f000 81be 	beq.w	5394 <_Min_Heap_Size+0x1394>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    5018:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    501a:	3303      	adds	r3, #3
    501c:	4599      	cmp	r9, r3
    501e:	dc03      	bgt.n	5028 <_Min_Heap_Size+0x1028>
    5020:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5022:	3b03      	subs	r3, #3
    5024:	4599      	cmp	r9, r3
    5026:	da03      	bge.n	5030 <_Min_Heap_Size+0x1030>
						knobFrozen[i] = 0;
    5028:	2300      	movs	r3, #0
    502a:	7273      	strb	r3, [r6, #9]
						prevKnobByte[i] = newByte;
    502c:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    5030:	eb07 0308 	add.w	r3, r7, r8
    5034:	f893 900a 	ldrb.w	r9, [r3, #10]
				if (knobFrozen[i])
    5038:	7ab3      	ldrb	r3, [r6, #10]
    503a:	2b00      	cmp	r3, #0
    503c:	f000 819c 	beq.w	5378 <_Min_Heap_Size+0x1378>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    5040:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5042:	3303      	adds	r3, #3
    5044:	454b      	cmp	r3, r9
    5046:	db03      	blt.n	5050 <_Min_Heap_Size+0x1050>
    5048:	6aab      	ldr	r3, [r5, #40]	; 0x28
    504a:	3b03      	subs	r3, #3
    504c:	454b      	cmp	r3, r9
    504e:	dd03      	ble.n	5058 <_Min_Heap_Size+0x1058>
						knobFrozen[i] = 0;
    5050:	2300      	movs	r3, #0
    5052:	72b3      	strb	r3, [r6, #10]
						prevKnobByte[i] = newByte;
    5054:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    5058:	44b8      	add	r8, r7
				if (knobFrozen[i])
    505a:	7af3      	ldrb	r3, [r6, #11]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    505c:	f898 800b 	ldrb.w	r8, [r8, #11]
				if (knobFrozen[i])
    5060:	2b00      	cmp	r3, #0
    5062:	f000 817b 	beq.w	535c <_Min_Heap_Size+0x135c>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    5066:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    5068:	3303      	adds	r3, #3
    506a:	4543      	cmp	r3, r8
    506c:	db03      	blt.n	5076 <_Min_Heap_Size+0x1076>
    506e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    5070:	3b03      	subs	r3, #3
    5072:	4543      	cmp	r3, r8
    5074:	dd03      	ble.n	507e <_Min_Heap_Size+0x107e>
						knobFrozen[i] = 0;
    5076:	2300      	movs	r3, #0
    5078:	72f3      	strb	r3, [r6, #11]
						prevKnobByte[i] = newByte;
    507a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
			currentByte += 12;
    507e:	f104 060d 	add.w	r6, r4, #13
    5082:	4d0e      	ldr	r5, [pc, #56]	; (50bc <_Min_Heap_Size+0x10bc>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5084:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 50c0 <_Min_Heap_Size+0x10c0>
    5088:	b2f6      	uxtb	r6, r6
    508a:	f105 0828 	add.w	r8, r5, #40	; 0x28
    508e:	3e01      	subs	r6, #1
    5090:	443e      	add	r6, r7
    5092:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    5096:	4628      	mov	r0, r5
			for (int i = 0; i < 10; i++)
    5098:	3504      	adds	r5, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    509a:	ee00 3a10 	vmov	s0, r3
    509e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    50a2:	ee20 0a08 	vmul.f32	s0, s0, s16
    50a6:	f006 ffdf 	bl	c068 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    50aa:	45a8      	cmp	r8, r5
    50ac:	d1f1      	bne.n	5092 <_Min_Heap_Size+0x1092>
    50ae:	f7ff b944 	b.w	433a <_Min_Heap_Size+0x33a>
    50b2:	bf00      	nop
    50b4:	200051d4 	.word	0x200051d4
    50b8:	2001a47c 	.word	0x2001a47c
    50bc:	20005324 	.word	0x20005324
    50c0:	3b808081 	.word	0x3b808081
			if (presetReady)
    50c4:	4bcf      	ldr	r3, [pc, #828]	; (5404 <_Min_Heap_Size+0x1404>)
    50c6:	681b      	ldr	r3, [r3, #0]
    50c8:	2b00      	cmp	r3, #0
    50ca:	f43e ae5f 	beq.w	3d8c <handleSPI+0x30c>
				uint8_t currentByte = offset+1;
    50ce:	1c43      	adds	r3, r0, #1
    50d0:	f8df 8388 	ldr.w	r8, [pc, #904]	; 545c <_Min_Heap_Size+0x145c>
				uint8_t foundOne = 0;
    50d4:	f04f 0c00 	mov.w	ip, #0
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    50d8:	f04f 0a20 	mov.w	sl, #32
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    50dc:	b2db      	uxtb	r3, r3
    50de:	5cf9      	ldrb	r1, [r7, r3]
    50e0:	443b      	add	r3, r7
    50e2:	785d      	ldrb	r5, [r3, #1]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    50e4:	795e      	ldrb	r6, [r3, #5]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    50e6:	eb05 2501 	add.w	r5, r5, r1, lsl #8
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    50ea:	7919      	ldrb	r1, [r3, #4]
				uint8_t whichSlot = (SPI_LEVERS_RX[currentByte+2]);
    50ec:	f893 e002 	ldrb.w	lr, [r3, #2]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    50f0:	eb06 2601 	add.w	r6, r6, r1, lsl #8
				uint8_t mappingChangeType = (SPI_LEVERS_RX[currentByte+3]);
    50f4:	f893 9003 	ldrb.w	r9, [r3, #3]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    50f8:	b2ad      	uxth	r5, r5
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    50fa:	4641      	mov	r1, r8
    50fc:	b236      	sxth	r6, r6
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    50fe:	4663      	mov	r3, ip
					if (mappings[j].destNumber == destNumber)
    5100:	7808      	ldrb	r0, [r1, #0]
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    5102:	314c      	adds	r1, #76	; 0x4c
					if (mappings[j].destNumber == destNumber)
    5104:	4285      	cmp	r5, r0
    5106:	d102      	bne.n	510e <_Min_Heap_Size+0x110e>
						whichMapping = j;
    5108:	b2da      	uxtb	r2, r3
						foundOne = 1;
    510a:	f04f 0c01 	mov.w	ip, #1
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    510e:	28ff      	cmp	r0, #255	; 0xff
    5110:	d103      	bne.n	511a <_Min_Heap_Size+0x111a>
    5112:	459a      	cmp	sl, r3
    5114:	bfc8      	it	gt
    5116:	fa5f fa83 	uxtbgt.w	sl, r3
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    511a:	3301      	adds	r3, #1
    511c:	2b20      	cmp	r3, #32
    511e:	d1ef      	bne.n	5100 <_Min_Heap_Size+0x1100>
				if (foundOne == 0)
    5120:	f1bc 0f00 	cmp.w	ip, #0
    5124:	d110      	bne.n	5148 <_Min_Heap_Size+0x1148>
					numMappings++;
    5126:	49b8      	ldr	r1, [pc, #736]	; (5408 <_Min_Heap_Size+0x1408>)
					mappings[whichMapping].destNumber = destNumber;
    5128:	234c      	movs	r3, #76	; 0x4c
					mappings[whichMapping].dest = &params[destNumber];
    512a:	4652      	mov	r2, sl
					numMappings++;
    512c:	7808      	ldrb	r0, [r1, #0]
					mappings[whichMapping].destNumber = destNumber;
    512e:	fb03 f30a 	mul.w	r3, r3, sl
					numMappings++;
    5132:	3001      	adds	r0, #1
					mappings[whichMapping].destNumber = destNumber;
    5134:	f808 5003 	strb.w	r5, [r8, r3]
					mappings[whichMapping].dest = &params[destNumber];
    5138:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
					mappings[whichMapping].destNumber = destNumber;
    513c:	4443      	add	r3, r8
					numMappings++;
    513e:	7008      	strb	r0, [r1, #0]
					mappings[whichMapping].dest = &params[destNumber];
    5140:	49b2      	ldr	r1, [pc, #712]	; (540c <_Min_Heap_Size+0x140c>)
    5142:	eb01 0185 	add.w	r1, r1, r5, lsl #2
    5146:	6059      	str	r1, [r3, #4]
				if (mappingChangeType == SourceID)
    5148:	f1b9 0f00 	cmp.w	r9, #0
    514c:	f040 825f 	bne.w	560e <_Min_Heap_Size+0x160e>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    5150:	234c      	movs	r3, #76	; 0x4c
    5152:	2001      	movs	r0, #1
					if (source == 255)
    5154:	2eff      	cmp	r6, #255	; 0xff
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    5156:	fb02 f303 	mul.w	r3, r2, r3
    515a:	eb08 0a03 	add.w	sl, r8, r3
    515e:	eb0a 050e 	add.w	r5, sl, lr
    5162:	f885 0020 	strb.w	r0, [r5, #32]
					if (source == 255)
    5166:	f000 860d 	beq.w	5d84 <_Min_Heap_Size+0x1d84>
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    516a:	f8df c2f4 	ldr.w	ip, [pc, #756]	; 5460 <_Min_Heap_Size+0x1460>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    516e:	f10e 0104 	add.w	r1, lr, #4
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    5172:	f10e 0a01 	add.w	sl, lr, #1
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    5176:	2e03      	cmp	r6, #3
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    5178:	eb0c 0bc6 	add.w	fp, ip, r6, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    517c:	f8df c2e4 	ldr.w	ip, [pc, #740]	; 5464 <_Min_Heap_Size+0x1464>
    5180:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
						mappings[whichMapping].hookActive[whichSlot] = 1;
    5184:	f885 0048 	strb.w	r0, [r5, #72]	; 0x48
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    5188:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
    518c:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    5190:	4441      	add	r1, r8
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    5192:	f848 b00a 	str.w	fp, [r8, sl]
    5196:	f10b 0b04 	add.w	fp, fp, #4
    519a:	4443      	add	r3, r8
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    519c:	f8c1 c004 	str.w	ip, [r1, #4]
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    51a0:	f8c3 b00c 	str.w	fp, [r3, #12]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    51a4:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    51a8:	f340 85d5 	ble.w	5d56 <_Min_Heap_Size+0x1d56>
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    51ac:	f1a6 0318 	sub.w	r3, r6, #24
    51b0:	2b03      	cmp	r3, #3
    51b2:	f200 8640 	bhi.w	5e36 <_Min_Heap_Size+0x1e36>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    51b6:	4b96      	ldr	r3, [pc, #600]	; (5410 <_Min_Heap_Size+0x1410>)
    51b8:	4433      	add	r3, r6
    51ba:	f803 0c18 	strb.w	r0, [r3, #-24]
						if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    51be:	2e03      	cmp	r6, #3
    51c0:	d102      	bne.n	51c8 <_Min_Heap_Size+0x11c8>
							noiseOn = 1;
    51c2:	4b94      	ldr	r3, [pc, #592]	; (5414 <_Min_Heap_Size+0x1414>)
    51c4:	2101      	movs	r1, #1
    51c6:	7019      	strb	r1, [r3, #0]
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    51c8:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    51cc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    51d0:	2200      	movs	r2, #0
    51d2:	4473      	add	r3, lr
    51d4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    51d8:	63da      	str	r2, [r3, #60]	; 0x3c
    51da:	f7fe bdd7 	b.w	3d8c <handleSPI+0x30c>
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    51de:	183b      	adds	r3, r7, r0
    51e0:	eddf 6a8d 	vldr	s13, [pc, #564]	; 5418 <_Min_Heap_Size+0x1418>
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    51e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    51e8:	4a8c      	ldr	r2, [pc, #560]	; (541c <_Min_Heap_Size+0x141c>)
    51ea:	785b      	ldrb	r3, [r3, #1]
    51ec:	ee07 3a90 	vmov	s15, r3
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    51f0:	4b8b      	ldr	r3, [pc, #556]	; (5420 <_Min_Heap_Size+0x1420>)
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    51f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    51f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    51fa:	ee27 7a87 	vmul.f32	s14, s15, s14
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    51fe:	edc2 7a00 	vstr	s15, [r2]
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    5202:	ed83 7a00 	vstr	s14, [r3]
    5206:	f7fe bdc1 	b.w	3d8c <handleSPI+0x30c>
			if (presetReady)
    520a:	4b7e      	ldr	r3, [pc, #504]	; (5404 <_Min_Heap_Size+0x1404>)
    520c:	681b      	ldr	r3, [r3, #0]
    520e:	2b00      	cmp	r3, #0
    5210:	f43e adbc 	beq.w	3d8c <handleSPI+0x30c>
				uint8_t currentByte = offset+1;
    5214:	1c43      	adds	r3, r0, #1
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    5216:	ed9f 7a83 	vldr	s14, [pc, #524]	; 5424 <_Min_Heap_Size+0x1424>
    521a:	4e7c      	ldr	r6, [pc, #496]	; (540c <_Min_Heap_Size+0x140c>)
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    521c:	b2db      	uxtb	r3, r3
    521e:	18fa      	adds	r2, r7, r3
    5220:	5cfb      	ldrb	r3, [r7, r3]
    5222:	7855      	ldrb	r5, [r2, #1]
    5224:	eb05 2503 	add.w	r5, r5, r3, lsl #8
				currentByte = currentByte + 2;
    5228:	1cc3      	adds	r3, r0, #3
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    522a:	b2db      	uxtb	r3, r3
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    522c:	b2ad      	uxth	r5, r5
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    522e:	18f9      	adds	r1, r7, r3
    5230:	5cfa      	ldrb	r2, [r7, r3]
    5232:	f1a5 083f 	sub.w	r8, r5, #63	; 0x3f
    5236:	784b      	ldrb	r3, [r1, #1]
    5238:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    523c:	fa1f f288 	uxth.w	r2, r8
    5240:	ee07 3a90 	vmov	s15, r3
    5244:	00eb      	lsls	r3, r5, #3
    5246:	2a18      	cmp	r2, #24
    5248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    524c:	9301      	str	r3, [sp, #4]
    524e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    5252:	ee67 7a87 	vmul.f32	s15, s15, s14
    5256:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    525a:	edc3 7a00 	vstr	s15, [r3]
    525e:	edc3 7a01 	vstr	s15, [r3, #4]
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    5262:	d805      	bhi.n	5270 <_Min_Heap_Size+0x1270>
    5264:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    5268:	40d3      	lsrs	r3, r2
    526a:	07d9      	lsls	r1, r3, #31
    526c:	f100 8465 	bmi.w	5b3a <_Min_Heap_Size+0x1b3a>
    5270:	00eb      	lsls	r3, r5, #3
			 for (int i = 0; i < numStringsThisBoard; i++)
    5272:	f04f 0b00 	mov.w	fp, #0
    5276:	46a1      	mov	r9, r4
    5278:	eba3 0805 	sub.w	r8, r3, r5
    527c:	465c      	mov	r4, fp
    527e:	eb06 0888 	add.w	r8, r6, r8, lsl #2
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    5282:	46c2      	mov	sl, r8
    5284:	ecb8 0a01 	vldmia	r8!, {s0}
    5288:	f8da 3010 	ldr.w	r3, [sl, #16]
    528c:	4798      	blx	r3
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    528e:	4621      	mov	r1, r4
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    5290:	ed88 0a01 	vstr	s0, [r8, #4]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    5294:	f8da 3014 	ldr.w	r3, [sl, #20]
    5298:	f89a 0018 	ldrb.w	r0, [sl, #24]
    529c:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    529e:	b314      	cbz	r4, 52e6 <_Min_Heap_Size+0x12e6>
    52a0:	f1a5 0323 	sub.w	r3, r5, #35	; 0x23
    52a4:	464c      	mov	r4, r9
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    52a6:	b299      	uxth	r1, r3
    52a8:	291a      	cmp	r1, #26
    52aa:	d804      	bhi.n	52b6 <_Min_Heap_Size+0x12b6>
    52ac:	4a5e      	ldr	r2, [pc, #376]	; (5428 <_Min_Heap_Size+0x1428>)
    52ae:	40ca      	lsrs	r2, r1
    52b0:	07d2      	lsls	r2, r2, #31
    52b2:	f100 849a 	bmi.w	5bea <_Min_Heap_Size+0x1bea>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    52b6:	f1a5 0218 	sub.w	r2, r5, #24
    52ba:	b291      	uxth	r1, r2
    52bc:	291a      	cmp	r1, #26
    52be:	f240 8215 	bls.w	56ec <_Min_Heap_Size+0x16ec>
				if ((whichParam == Noise))
    52c2:	2d12      	cmp	r5, #18
    52c4:	f040 84ee 	bne.w	5ca4 <_Min_Heap_Size+0x1ca4>
					if (params[whichParam].realVal[0]  > 0.5f)
    52c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    52cc:	ed96 7a80 	vldr	s14, [r6, #512]	; 0x200
    52d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    52d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    52d8:	f77e ad58 	ble.w	3d8c <handleSPI+0x30c>
						noiseOn = 1;
    52dc:	4b4d      	ldr	r3, [pc, #308]	; (5414 <_Min_Heap_Size+0x1414>)
    52de:	2201      	movs	r2, #1
    52e0:	701a      	strb	r2, [r3, #0]
    52e2:	f7fe bd53 	b.w	3d8c <handleSPI+0x30c>
    52e6:	2401      	movs	r4, #1
    52e8:	e7cc      	b.n	5284 <_Min_Heap_Size+0x1284>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    52ea:	ee07 9a90 	vmov	s15, r9
    52ee:	484f      	ldr	r0, [pc, #316]	; (542c <_Min_Heap_Size+0x142c>)
    52f0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    52f4:	eddf 7a4e 	vldr	s15, [pc, #312]	; 5430 <_Min_Heap_Size+0x1430>
    52f8:	ee20 0a27 	vmul.f32	s0, s0, s15
    52fc:	f006 feb4 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5300:	f8c5 900c 	str.w	r9, [r5, #12]
    5304:	e61c      	b.n	4f40 <_Min_Heap_Size+0xf40>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5306:	ee07 9a90 	vmov	s15, r9
    530a:	484a      	ldr	r0, [pc, #296]	; (5434 <_Min_Heap_Size+0x1434>)
    530c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5310:	eddf 7a47 	vldr	s15, [pc, #284]	; 5430 <_Min_Heap_Size+0x1430>
    5314:	ee20 0a27 	vmul.f32	s0, s0, s15
    5318:	f006 fea6 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    531c:	f8c5 9008 	str.w	r9, [r5, #8]
    5320:	e5fa      	b.n	4f18 <_Min_Heap_Size+0xf18>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5322:	ee07 9a90 	vmov	s15, r9
    5326:	4844      	ldr	r0, [pc, #272]	; (5438 <_Min_Heap_Size+0x1438>)
    5328:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    532c:	eddf 7a40 	vldr	s15, [pc, #256]	; 5430 <_Min_Heap_Size+0x1430>
    5330:	ee20 0a27 	vmul.f32	s0, s0, s15
    5334:	f006 fe98 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5338:	f8c5 9004 	str.w	r9, [r5, #4]
    533c:	e5d8      	b.n	4ef0 <_Min_Heap_Size+0xef0>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    533e:	ee07 9a90 	vmov	s15, r9
					prevKnobByte[i] = newByte;
    5342:	4d3e      	ldr	r5, [pc, #248]	; (543c <_Min_Heap_Size+0x143c>)
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5344:	483e      	ldr	r0, [pc, #248]	; (5440 <_Min_Heap_Size+0x1440>)
    5346:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    534a:	eddf 7a39 	vldr	s15, [pc, #228]	; 5430 <_Min_Heap_Size+0x1430>
    534e:	ee20 0a27 	vmul.f32	s0, s0, s15
    5352:	f006 fe89 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5356:	f8c5 9000 	str.w	r9, [r5]
    535a:	e5b5      	b.n	4ec8 <_Min_Heap_Size+0xec8>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    535c:	ee07 8a90 	vmov	s15, r8
    5360:	4838      	ldr	r0, [pc, #224]	; (5444 <_Min_Heap_Size+0x1444>)
    5362:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5366:	eddf 7a32 	vldr	s15, [pc, #200]	; 5430 <_Min_Heap_Size+0x1430>
    536a:	ee20 0a27 	vmul.f32	s0, s0, s15
    536e:	f006 fe7b 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    5372:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
    5376:	e682      	b.n	507e <_Min_Heap_Size+0x107e>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5378:	ee07 9a90 	vmov	s15, r9
    537c:	4832      	ldr	r0, [pc, #200]	; (5448 <_Min_Heap_Size+0x1448>)
    537e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5382:	eddf 7a2b 	vldr	s15, [pc, #172]	; 5430 <_Min_Heap_Size+0x1430>
    5386:	ee20 0a27 	vmul.f32	s0, s0, s15
    538a:	f006 fe6d 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    538e:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
    5392:	e661      	b.n	5058 <_Min_Heap_Size+0x1058>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5394:	ee07 9a90 	vmov	s15, r9
    5398:	482c      	ldr	r0, [pc, #176]	; (544c <_Min_Heap_Size+0x144c>)
    539a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    539e:	eddf 7a24 	vldr	s15, [pc, #144]	; 5430 <_Min_Heap_Size+0x1430>
    53a2:	ee20 0a27 	vmul.f32	s0, s0, s15
    53a6:	f006 fe5f 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    53aa:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
    53ae:	e63f      	b.n	5030 <_Min_Heap_Size+0x1030>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    53b0:	ee07 9a90 	vmov	s15, r9
    53b4:	4826      	ldr	r0, [pc, #152]	; (5450 <_Min_Heap_Size+0x1450>)
    53b6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    53ba:	eddf 7a1d 	vldr	s15, [pc, #116]	; 5430 <_Min_Heap_Size+0x1430>
    53be:	ee20 0a27 	vmul.f32	s0, s0, s15
    53c2:	f006 fe51 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    53c6:	f8c5 9020 	str.w	r9, [r5, #32]
    53ca:	e61d      	b.n	5008 <_Min_Heap_Size+0x1008>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    53cc:	ee07 9a90 	vmov	s15, r9
    53d0:	4820      	ldr	r0, [pc, #128]	; (5454 <_Min_Heap_Size+0x1454>)
    53d2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    53d6:	eddf 7a16 	vldr	s15, [pc, #88]	; 5430 <_Min_Heap_Size+0x1430>
    53da:	ee20 0a27 	vmul.f32	s0, s0, s15
    53de:	f006 fe43 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    53e2:	f8c5 901c 	str.w	r9, [r5, #28]
    53e6:	e5fb      	b.n	4fe0 <_Min_Heap_Size+0xfe0>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    53e8:	ee07 9a90 	vmov	s15, r9
    53ec:	481a      	ldr	r0, [pc, #104]	; (5458 <_Min_Heap_Size+0x1458>)
    53ee:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    53f2:	eddf 7a0f 	vldr	s15, [pc, #60]	; 5430 <_Min_Heap_Size+0x1430>
    53f6:	ee20 0a27 	vmul.f32	s0, s0, s15
    53fa:	f006 fe35 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    53fe:	f8c5 9018 	str.w	r9, [r5, #24]
    5402:	e5d9      	b.n	4fb8 <_Min_Heap_Size+0xfb8>
    5404:	2000534c 	.word	0x2000534c
    5408:	20019310 	.word	0x20019310
    540c:	20019320 	.word	0x20019320
    5410:	2001d41c 	.word	0x2001d41c
    5414:	2001d660 	.word	0x2001d660
    5418:	3c23d70a 	.word	0x3c23d70a
    541c:	2000068c 	.word	0x2000068c
    5420:	20000690 	.word	0x20000690
    5424:	377ffff6 	.word	0x377ffff6
    5428:	04002001 	.word	0x04002001
    542c:	20005244 	.word	0x20005244
    5430:	3b808081 	.word	0x3b808081
    5434:	20005240 	.word	0x20005240
    5438:	2000523c 	.word	0x2000523c
    543c:	2001a47c 	.word	0x2001a47c
    5440:	20005238 	.word	0x20005238
    5444:	20005264 	.word	0x20005264
    5448:	20005260 	.word	0x20005260
    544c:	2000525c 	.word	0x2000525c
    5450:	20005258 	.word	0x20005258
    5454:	20005254 	.word	0x20005254
    5458:	20005250 	.word	0x20005250
    545c:	200186c8 	.word	0x200186c8
    5460:	2001d8ac 	.word	0x2001d8ac
    5464:	200006a8 	.word	0x200006a8
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5468:	ee07 9a90 	vmov	s15, r9
    546c:	488b      	ldr	r0, [pc, #556]	; (569c <_Min_Heap_Size+0x169c>)
    546e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5472:	eddf 7a8b 	vldr	s15, [pc, #556]	; 56a0 <_Min_Heap_Size+0x16a0>
    5476:	ee20 0a27 	vmul.f32	s0, s0, s15
    547a:	f006 fdf5 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    547e:	f8c5 9014 	str.w	r9, [r5, #20]
    5482:	e585      	b.n	4f90 <_Min_Heap_Size+0xf90>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5484:	ee07 9a90 	vmov	s15, r9
    5488:	4886      	ldr	r0, [pc, #536]	; (56a4 <_Min_Heap_Size+0x16a4>)
    548a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    548e:	eddf 7a84 	vldr	s15, [pc, #528]	; 56a0 <_Min_Heap_Size+0x16a0>
    5492:	ee20 0a27 	vmul.f32	s0, s0, s15
    5496:	f006 fde7 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    549a:	f8c5 9010 	str.w	r9, [r5, #16]
    549e:	e563      	b.n	4f68 <_Min_Heap_Size+0xf68>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    54a0:	ee07 9a90 	vmov	s15, r9
    54a4:	4880      	ldr	r0, [pc, #512]	; (56a8 <_Min_Heap_Size+0x16a8>)
    54a6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    54aa:	eddf 7a7d 	vldr	s15, [pc, #500]	; 56a0 <_Min_Heap_Size+0x16a0>
    54ae:	ee20 0a27 	vmul.f32	s0, s0, s15
    54b2:	f006 fdd9 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    54b6:	f8c5 904c 	str.w	r9, [r5, #76]	; 0x4c
    54ba:	f7fe bed7 	b.w	426c <_Min_Heap_Size+0x26c>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    54be:	ee07 9a90 	vmov	s15, r9
    54c2:	487a      	ldr	r0, [pc, #488]	; (56ac <_Min_Heap_Size+0x16ac>)
    54c4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    54c8:	eddf 7a75 	vldr	s15, [pc, #468]	; 56a0 <_Min_Heap_Size+0x16a0>
    54cc:	ee20 0a27 	vmul.f32	s0, s0, s15
    54d0:	f006 fdca 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    54d4:	f8c5 9048 	str.w	r9, [r5, #72]	; 0x48
    54d8:	f7fe beb4 	b.w	4244 <_Min_Heap_Size+0x244>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    54dc:	ee07 9a90 	vmov	s15, r9
    54e0:	4873      	ldr	r0, [pc, #460]	; (56b0 <_Min_Heap_Size+0x16b0>)
    54e2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    54e6:	eddf 7a6e 	vldr	s15, [pc, #440]	; 56a0 <_Min_Heap_Size+0x16a0>
    54ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    54ee:	f006 fdbb 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    54f2:	f8c5 9044 	str.w	r9, [r5, #68]	; 0x44
    54f6:	f7fe be91 	b.w	421c <_Min_Heap_Size+0x21c>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    54fa:	ee07 9a90 	vmov	s15, r9
    54fe:	486d      	ldr	r0, [pc, #436]	; (56b4 <_Min_Heap_Size+0x16b4>)
    5500:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5504:	eddf 7a66 	vldr	s15, [pc, #408]	; 56a0 <_Min_Heap_Size+0x16a0>
    5508:	ee20 0a27 	vmul.f32	s0, s0, s15
    550c:	f006 fdac 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    5510:	f8c5 9040 	str.w	r9, [r5, #64]	; 0x40
    5514:	f7fe be6e 	b.w	41f4 <_Min_Heap_Size+0x1f4>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5518:	ee07 9a90 	vmov	s15, r9
    551c:	4866      	ldr	r0, [pc, #408]	; (56b8 <_Min_Heap_Size+0x16b8>)
    551e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5522:	eddf 7a5f 	vldr	s15, [pc, #380]	; 56a0 <_Min_Heap_Size+0x16a0>
    5526:	ee20 0a27 	vmul.f32	s0, s0, s15
    552a:	f006 fd9d 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    552e:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
    5532:	f7fe be4b 	b.w	41cc <_Min_Heap_Size+0x1cc>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5536:	ee07 9a90 	vmov	s15, r9
    553a:	4860      	ldr	r0, [pc, #384]	; (56bc <_Min_Heap_Size+0x16bc>)
    553c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    5540:	eddf 7a57 	vldr	s15, [pc, #348]	; 56a0 <_Min_Heap_Size+0x16a0>
    5544:	ee20 0a27 	vmul.f32	s0, s0, s15
    5548:	f006 fd8e 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    554c:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
    5550:	f7fe be28 	b.w	41a4 <_Min_Heap_Size+0x1a4>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5554:	ee07 9a90 	vmov	s15, r9
    5558:	4859      	ldr	r0, [pc, #356]	; (56c0 <_Min_Heap_Size+0x16c0>)
    555a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    555e:	eddf 7a50 	vldr	s15, [pc, #320]	; 56a0 <_Min_Heap_Size+0x16a0>
    5562:	ee20 0a27 	vmul.f32	s0, s0, s15
    5566:	f006 fd7f 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    556a:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
    556e:	f7fe be05 	b.w	417c <_Min_Heap_Size+0x17c>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5572:	ee07 9a90 	vmov	s15, r9
					prevKnobByte[whichKnob] = newByte;
    5576:	4d53      	ldr	r5, [pc, #332]	; (56c4 <_Min_Heap_Size+0x16c4>)
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    5578:	4853      	ldr	r0, [pc, #332]	; (56c8 <_Min_Heap_Size+0x16c8>)
    557a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    557e:	eddf 7a48 	vldr	s15, [pc, #288]	; 56a0 <_Min_Heap_Size+0x16a0>
    5582:	ee20 0a27 	vmul.f32	s0, s0, s15
    5586:	f006 fd6f 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    558a:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
    558e:	f7fe bde1 	b.w	4154 <_Min_Heap_Size+0x154>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    5592:	ee07 8a90 	vmov	s15, r8
    5596:	484d      	ldr	r0, [pc, #308]	; (56cc <_Min_Heap_Size+0x16cc>)
    5598:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    559c:	eddf 7a40 	vldr	s15, [pc, #256]	; 56a0 <_Min_Heap_Size+0x16a0>
    55a0:	ee20 0a27 	vmul.f32	s0, s0, s15
    55a4:	f006 fd60 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    55a8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
    55ac:	f7fe bead 	b.w	430a <_Min_Heap_Size+0x30a>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    55b0:	ee07 9a90 	vmov	s15, r9
    55b4:	4846      	ldr	r0, [pc, #280]	; (56d0 <_Min_Heap_Size+0x16d0>)
    55b6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    55ba:	eddf 7a39 	vldr	s15, [pc, #228]	; 56a0 <_Min_Heap_Size+0x16a0>
    55be:	ee20 0a27 	vmul.f32	s0, s0, s15
    55c2:	f006 fd51 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    55c6:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
    55ca:	f7fe be8b 	b.w	42e4 <_Min_Heap_Size+0x2e4>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    55ce:	ee07 9a90 	vmov	s15, r9
    55d2:	4840      	ldr	r0, [pc, #256]	; (56d4 <_Min_Heap_Size+0x16d4>)
    55d4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    55d8:	eddf 7a31 	vldr	s15, [pc, #196]	; 56a0 <_Min_Heap_Size+0x16a0>
    55dc:	ee20 0a27 	vmul.f32	s0, s0, s15
    55e0:	f006 fd42 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    55e4:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
    55e8:	f7fe be68 	b.w	42bc <_Min_Heap_Size+0x2bc>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    55ec:	ee07 9a90 	vmov	s15, r9
    55f0:	4839      	ldr	r0, [pc, #228]	; (56d8 <_Min_Heap_Size+0x16d8>)
    55f2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    55f6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 56a0 <_Min_Heap_Size+0x16a0>
    55fa:	ee20 0a27 	vmul.f32	s0, s0, s15
    55fe:	f006 fd33 	bl	c068 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    5602:	f8c5 9020 	str.w	r9, [r5, #32]
    5606:	f7fe be45 	b.w	4294 <_Min_Heap_Size+0x294>
    560a:	4934      	ldr	r1, [pc, #208]	; (56dc <_Min_Heap_Size+0x16dc>)
    560c:	e40b      	b.n	4e26 <_Min_Heap_Size+0xe26>
				else if (mappingChangeType == Amount)
    560e:	f1b9 0f01 	cmp.w	r9, #1
    5612:	f000 83d5 	beq.w	5dc0 <_Min_Heap_Size+0x1dc0>
				else if (mappingChangeType == ScalarID)
    5616:	f1b9 0f02 	cmp.w	r9, #2
    561a:	f47e abb7 	bne.w	3d8c <handleSPI+0x30c>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    561e:	4830      	ldr	r0, [pc, #192]	; (56e0 <_Min_Heap_Size+0x16e0>)
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    5620:	234c      	movs	r3, #76	; 0x4c
						if (scalar == 0xff)
    5622:	2eff      	cmp	r6, #255	; 0xff
    5624:	ea4f 0a46 	mov.w	sl, r6, lsl #1
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5628:	f1a6 0918 	sub.w	r9, r6, #24
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    562c:	f1a6 0c14 	sub.w	ip, r6, #20
    5630:	7801      	ldrb	r1, [r0, #0]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    5632:	fb02 f303 	mul.w	r3, r2, r3
    5636:	f10e 0504 	add.w	r5, lr, #4
						if (scalar == 0xff)
    563a:	f000 83f0 	beq.w	5e1e <_Min_Heap_Size+0x1e1e>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    563e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    5642:	4d28      	ldr	r5, [pc, #160]	; (56e4 <_Min_Heap_Size+0x16e4>)
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5644:	f1b9 0f03 	cmp.w	r9, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    5648:	4443      	add	r3, r8
    564a:	eb05 0bc6 	add.w	fp, r5, r6, lsl #3
    564e:	f8c3 b004 	str.w	fp, [r3, #4]
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5652:	f200 83d8 	bhi.w	5e06 <_Min_Heap_Size+0x1e06>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    5656:	4b24      	ldr	r3, [pc, #144]	; (56e8 <_Min_Heap_Size+0x16e8>)
    5658:	f04f 0b01 	mov.w	fp, #1
    565c:	4433      	add	r3, r6
    565e:	f803 bc18 	strb.w	fp, [r3, #-24]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    5662:	234c      	movs	r3, #76	; 0x4c
								noiseOn = 1;
    5664:	2e03      	cmp	r6, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    5666:	f10a 0a01 	add.w	sl, sl, #1
    566a:	fb02 f303 	mul.w	r3, r2, r3
								noiseOn = 1;
    566e:	bf08      	it	eq
    5670:	2101      	moveq	r1, #1
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    5672:	eb05 058a 	add.w	r5, r5, sl, lsl #2
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5676:	f1b9 0f03 	cmp.w	r9, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    567a:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
    567e:	4443      	add	r3, r8
    5680:	629d      	str	r5, [r3, #40]	; 0x28
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    5682:	f200 83b7 	bhi.w	5df4 <_Min_Heap_Size+0x1df4>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    5686:	4b18      	ldr	r3, [pc, #96]	; (56e8 <_Min_Heap_Size+0x16e8>)
    5688:	2201      	movs	r2, #1
    568a:	4433      	add	r3, r6
    568c:	f803 2c18 	strb.w	r2, [r3, #-24]
								noiseOn = 1;
    5690:	2e03      	cmp	r6, #3
    5692:	bf08      	it	eq
    5694:	2101      	moveq	r1, #1
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5696:	7001      	strb	r1, [r0, #0]
    5698:	f7fe bb78 	b.w	3d8c <handleSPI+0x30c>
    569c:	2000524c 	.word	0x2000524c
    56a0:	3b808081 	.word	0x3b808081
    56a4:	20005248 	.word	0x20005248
    56a8:	20005284 	.word	0x20005284
    56ac:	20005280 	.word	0x20005280
    56b0:	2000527c 	.word	0x2000527c
    56b4:	20005278 	.word	0x20005278
    56b8:	20005274 	.word	0x20005274
    56bc:	20005270 	.word	0x20005270
    56c0:	2000526c 	.word	0x2000526c
    56c4:	2001a47c 	.word	0x2001a47c
    56c8:	20005268 	.word	0x20005268
    56cc:	20005264 	.word	0x20005264
    56d0:	20005260 	.word	0x20005260
    56d4:	2000525c 	.word	0x2000525c
    56d8:	20005258 	.word	0x20005258
    56dc:	2001444c 	.word	0x2001444c
    56e0:	2001d660 	.word	0x2001d660
    56e4:	2001d8ac 	.word	0x2001d8ac
    56e8:	2001d41c 	.word	0x2001d41c
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    56ec:	4b5b      	ldr	r3, [pc, #364]	; (585c <_Min_Heap_Size+0x185c>)
    56ee:	410b      	asrs	r3, r1
    56f0:	f013 0301 	ands.w	r3, r3, #1
    56f4:	d123      	bne.n	573e <_Min_Heap_Size+0x173e>
					if (params[whichParam].realVal[0]  > 0.5f)
    56f6:	9901      	ldr	r1, [sp, #4]
    56f8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    56fc:	1b49      	subs	r1, r1, r5
    56fe:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    5702:	ed91 7a02 	vldr	s14, [r1, #8]
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    5706:	4956      	ldr	r1, [pc, #344]	; (5860 <_Min_Heap_Size+0x1860>)
					if (params[whichParam].realVal[0]  > 0.5f)
    5708:	eeb4 7ae7 	vcmpe.f32	s14, s15
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    570c:	fb81 0102 	smull	r0, r1, r1, r2
    5710:	17d2      	asrs	r2, r2, #31
					if (params[whichParam].realVal[0]  > 0.5f)
    5712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    5716:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
					if (params[whichParam].realVal[0]  > 0.5f)
    571a:	dd02      	ble.n	5722 <_Min_Heap_Size+0x1722>
						oscOn[whichOsc] = 1;
    571c:	2301      	movs	r3, #1
    571e:	4951      	ldr	r1, [pc, #324]	; (5864 <_Min_Heap_Size+0x1864>)
    5720:	548b      	strb	r3, [r1, r2]
    5722:	4951      	ldr	r1, [pc, #324]	; (5868 <_Min_Heap_Size+0x1868>)
    5724:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
						enabledCount += oscsEnabled[j];
    5728:	e9d1 3200 	ldrd	r3, r2, [r1]
    572c:	4413      	add	r3, r2
					oscAmpMult = oscAmpMultArray[enabledCount];
    572e:	688a      	ldr	r2, [r1, #8]
    5730:	4413      	add	r3, r2
    5732:	4a4e      	ldr	r2, [pc, #312]	; (586c <_Min_Heap_Size+0x186c>)
    5734:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5738:	681a      	ldr	r2, [r3, #0]
    573a:	4b4d      	ldr	r3, [pc, #308]	; (5870 <_Min_Heap_Size+0x1870>)
    573c:	601a      	str	r2, [r3, #0]
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    573e:	2d87      	cmp	r5, #135	; 0x87
    5740:	d005      	beq.n	574e <_Min_Heap_Size+0x174e>
    5742:	2d8c      	cmp	r5, #140	; 0x8c
    5744:	d003      	beq.n	574e <_Min_Heap_Size+0x174e>
    5746:	2d91      	cmp	r5, #145	; 0x91
    5748:	d001      	beq.n	574e <_Min_Heap_Size+0x174e>
    574a:	2d96      	cmp	r5, #150	; 0x96
    574c:	d16e      	bne.n	582c <_Min_Heap_Size+0x182c>
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    574e:	9b01      	ldr	r3, [sp, #4]
    5750:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    5754:	4a47      	ldr	r2, [pc, #284]	; (5874 <_Min_Heap_Size+0x1874>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5756:	f04f 0a00 	mov.w	sl, #0
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    575a:	1b5b      	subs	r3, r3, r5
    575c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5760:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    5764:	f1a5 0387 	sub.w	r3, r5, #135	; 0x87
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    5768:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    576c:	fb82 1203 	smull	r1, r2, r2, r3
    5770:	17db      	asrs	r3, r3, #31
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    5772:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    5776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    577a:	ebc3 0862 	rsb	r8, r3, r2, asr #1
					setLFOShapes(LFOShape, whichLFO);
    577e:	ee17 0a90 	vmov	r0, s15
    5782:	4641      	mov	r1, r8
    5784:	f006 fae0 	bl	bd48 <__setLFOShapes_veneer>
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    5788:	493b      	ldr	r1, [pc, #236]	; (5878 <_Min_Heap_Size+0x1878>)
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    578a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    578e:	9703      	str	r7, [sp, #12]
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    5790:	eb08 0848 	add.w	r8, r8, r8, lsl #1
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    5794:	f103 0984 	add.w	r9, r3, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    5798:	f103 0285 	add.w	r2, r3, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    579c:	3386      	adds	r3, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    579e:	eb01 0088 	add.w	r0, r1, r8, lsl #2
    57a2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
    57a6:	f851 1028 	ldr.w	r1, [r1, r8, lsl #2]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    57aa:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    57ae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    57b2:	eb06 0b82 	add.w	fp, r6, r2, lsl #2
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    57b6:	eb06 0283 	add.w	r2, r6, r3, lsl #2
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    57ba:	ea4f 0389 	mov.w	r3, r9, lsl #2
    57be:	eb06 0989 	add.w	r9, r6, r9, lsl #2
    57c2:	4617      	mov	r7, r2
    57c4:	f103 0840 	add.w	r8, r3, #64	; 0x40
    57c8:	f8c9 1014 	str.w	r1, [r9, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    57cc:	6841      	ldr	r1, [r0, #4]
    57ce:	44b0      	add	r8, r6
    57d0:	f8cb 1014 	str.w	r1, [fp, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    57d4:	6881      	ldr	r1, [r0, #8]
    57d6:	6151      	str	r1, [r2, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    57d8:	f103 0108 	add.w	r1, r3, #8
    57dc:	1871      	adds	r1, r6, r1
    57de:	9102      	str	r1, [sp, #8]
    57e0:	f103 0124 	add.w	r1, r3, #36	; 0x24
    57e4:	1873      	adds	r3, r6, r1
    57e6:	9301      	str	r3, [sp, #4]
    57e8:	4623      	mov	r3, r4
    57ea:	462c      	mov	r4, r5
    57ec:	4655      	mov	r5, sl
    57ee:	469a      	mov	sl, r3
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    57f0:	9b02      	ldr	r3, [sp, #8]
    57f2:	4629      	mov	r1, r5
    57f4:	f899 0018 	ldrb.w	r0, [r9, #24]
    57f8:	ecb3 0a01 	vldmia	r3!, {s0}
    57fc:	9302      	str	r3, [sp, #8]
    57fe:	f8d9 3014 	ldr.w	r3, [r9, #20]
    5802:	4798      	blx	r3
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    5804:	9b01      	ldr	r3, [sp, #4]
    5806:	4629      	mov	r1, r5
    5808:	f89b 0018 	ldrb.w	r0, [fp, #24]
    580c:	ecb3 0a01 	vldmia	r3!, {s0}
    5810:	9301      	str	r3, [sp, #4]
    5812:	f8db 3014 	ldr.w	r3, [fp, #20]
    5816:	4798      	blx	r3
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    5818:	ecb8 0a01 	vldmia	r8!, {s0}
    581c:	4629      	mov	r1, r5
    581e:	697b      	ldr	r3, [r7, #20]
    5820:	7e38      	ldrb	r0, [r7, #24]
    5822:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5824:	b1c5      	cbz	r5, 5858 <_Min_Heap_Size+0x1858>
    5826:	4625      	mov	r5, r4
    5828:	9f03      	ldr	r7, [sp, #12]
    582a:	4654      	mov	r4, sl
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    582c:	2d01      	cmp	r5, #1
    582e:	f240 81bc 	bls.w	5baa <_Min_Heap_Size+0x1baa>
				if (whichParam == FXOrder)
    5832:	2d9a      	cmp	r5, #154	; 0x9a
    5834:	f040 81cf 	bne.w	5bd6 <_Min_Heap_Size+0x1bd6>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    5838:	4a10      	ldr	r2, [pc, #64]	; (587c <_Min_Heap_Size+0x187c>)
    583a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    583e:	4b10      	ldr	r3, [pc, #64]	; (5880 <_Min_Heap_Size+0x1880>)
    5840:	ed92 7a38 	vldr	s14, [r2, #224]	; 0xe0
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    5844:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    584c:	bfcc      	ite	gt
    584e:	2201      	movgt	r2, #1
    5850:	2200      	movle	r2, #0
    5852:	701a      	strb	r2, [r3, #0]
    5854:	f7fe ba9a 	b.w	3d8c <handleSPI+0x30c>
    5858:	2501      	movs	r5, #1
    585a:	e7c9      	b.n	57f0 <_Min_Heap_Size+0x17f0>
    585c:	fbffdffe 	.word	0xfbffdffe
    5860:	4ec4ec4f 	.word	0x4ec4ec4f
    5864:	2001d68c 	.word	0x2001d68c
    5868:	20019314 	.word	0x20019314
    586c:	200008d4 	.word	0x200008d4
    5870:	200008d0 	.word	0x200008d0
    5874:	66666667 	.word	0x66666667
    5878:	20018644 	.word	0x20018644
    587c:	2001a320 	.word	0x2001a320
    5880:	20016611 	.word	0x20016611
    5884:	47800000 	.word	0x47800000
					bufferPos = 138;//first byte after name
    5888:	208a      	movs	r0, #138	; 0x8a
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    588a:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 5884 <_Min_Heap_Size+0x1884>
					bufferPos = 138;//first byte after name
    588e:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    5890:	f8b1 a000 	ldrh.w	sl, [r1]
						buffer[bufferPos+1] = integerVersion & 255;
    5894:	f8b1 8000 	ldrh.w	r8, [r1]
						bufferPos = bufferPos + 2;
    5898:	8808      	ldrh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    589a:	fa1f fa8a 	uxth.w	sl, sl
						buffer[bufferPos+1] = integerVersion & 255;
    589e:	fa13 f888 	uxtah	r8, r3, r8
						bufferPos = bufferPos + 2;
    58a2:	3002      	adds	r0, #2
    58a4:	b280      	uxth	r0, r0
    58a6:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    58a8:	f8b1 e000 	ldrh.w	lr, [r1]
						buffer[bufferPos+1] = integerVersion & 255;
    58ac:	f8b1 c000 	ldrh.w	ip, [r1]
						bufferPos = bufferPos + 2;
    58b0:	8808      	ldrh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    58b2:	fa1f fe8e 	uxth.w	lr, lr
						buffer[bufferPos+1] = integerVersion & 255;
    58b6:	fa13 fc8c 	uxtah	ip, r3, ip
						bufferPos = bufferPos + 2;
    58ba:	3002      	adds	r0, #2
    58bc:	b280      	uxth	r0, r0
    58be:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    58c0:	880e      	ldrh	r6, [r1, #0]
						buffer[bufferPos+1] = integerVersion & 255;
    58c2:	8808      	ldrh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    58c4:	b2b6      	uxth	r6, r6
						buffer[bufferPos+1] = integerVersion & 255;
    58c6:	fa13 f080 	uxtah	r0, r3, r0
    58ca:	9004      	str	r0, [sp, #16]
						bufferPos = bufferPos + 2;
    58cc:	8808      	ldrh	r0, [r1, #0]
    58ce:	3002      	adds	r0, #2
    58d0:	b280      	uxth	r0, r0
    58d2:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    58d4:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    58d6:	48d2      	ldr	r0, [pc, #840]	; (5c20 <_Min_Heap_Size+0x1c20>)
						buffer[bufferPos] = integerVersion >> 8;
    58d8:	b2ad      	uxth	r5, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    58da:	ed90 5a00 	vldr	s10, [r0]
						buffer[bufferPos] = integerVersion >> 8;
    58de:	9501      	str	r5, [sp, #4]
						buffer[bufferPos+1] = integerVersion & 255;
    58e0:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    58e2:	ee25 5a27 	vmul.f32	s10, s10, s15
    58e6:	edd0 5a01 	vldr	s11, [r0, #4]
    58ea:	ed90 6a02 	vldr	s12, [r0, #8]
    58ee:	edd0 6a03 	vldr	s13, [r0, #12]
    58f2:	ee65 5aa7 	vmul.f32	s11, s11, s15
    58f6:	ed90 7a04 	vldr	s14, [r0, #16]
						buffer[bufferPos+1] = integerVersion & 255;
    58fa:	fa13 f085 	uxtah	r0, r3, r5
						bufferPos = bufferPos + 2;
    58fe:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5900:	eebc 5ac5 	vcvt.u32.f32	s10, s10
    5904:	ee26 6a27 	vmul.f32	s12, s12, s15
						buffer[bufferPos+1] = integerVersion & 255;
    5908:	9006      	str	r0, [sp, #24]
						bufferPos = bufferPos + 2;
    590a:	3502      	adds	r5, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    590c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
    5910:	ee66 6aa7 	vmul.f32	s13, s13, s15
    5914:	ee15 ba10 	vmov	fp, s10
						bufferPos = bufferPos + 2;
    5918:	b2ad      	uxth	r5, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    591a:	ee27 7a27 	vmul.f32	s14, s14, s15
    591e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    5922:	ee15 0a90 	vmov	r0, s11
						bufferPos = bufferPos + 2;
    5926:	800d      	strh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    5928:	f3cb 2b07 	ubfx	fp, fp, #8, #8
    592c:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    592e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    5932:	eebc 7ac7 	vcvt.u32.f32	s14, s14
						buffer[bufferPos] = integerVersion >> 8;
    5936:	f803 b00a 	strb.w	fp, [r3, sl]
    593a:	b2ad      	uxth	r5, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    593c:	ed8d 6a03 	vstr	s12, [sp, #12]
    5940:	edcd 6a05 	vstr	s13, [sp, #20]
						buffer[bufferPos] = integerVersion >> 8;
    5944:	9502      	str	r5, [sp, #8]
    5946:	ee15 5a10 	vmov	r5, s10
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    594a:	ed8d 7a07 	vstr	s14, [sp, #28]
						buffer[bufferPos+1] = integerVersion & 255;
    594e:	f888 5001 	strb.w	r5, [r8, #1]
						buffer[bufferPos] = integerVersion >> 8;
    5952:	ee16 5a10 	vmov	r5, s12
    5956:	f3c0 2807 	ubfx	r8, r0, #8, #8
    595a:	f803 800e 	strb.w	r8, [r3, lr]
						buffer[bufferPos+1] = integerVersion & 255;
    595e:	f88c 0001 	strb.w	r0, [ip, #1]
						buffer[bufferPos] = integerVersion >> 8;
    5962:	f3c5 2c07 	ubfx	ip, r5, #8, #8
    5966:	9801      	ldr	r0, [sp, #4]
    5968:	f803 c006 	strb.w	ip, [r3, r6]
						buffer[bufferPos+1] = integerVersion & 255;
    596c:	9e04      	ldr	r6, [sp, #16]
    596e:	7075      	strb	r5, [r6, #1]
						buffer[bufferPos] = integerVersion >> 8;
    5970:	ee16 5a90 	vmov	r5, s13
    5974:	f3c5 2607 	ubfx	r6, r5, #8, #8
    5978:	541e      	strb	r6, [r3, r0]
						buffer[bufferPos+1] = integerVersion & 255;
    597a:	9806      	ldr	r0, [sp, #24]
    597c:	7045      	strb	r5, [r0, #1]
						buffer[bufferPos] = integerVersion >> 8;
    597e:	ee17 0a10 	vmov	r0, s14
    5982:	9d02      	ldr	r5, [sp, #8]
    5984:	f3c0 2607 	ubfx	r6, r0, #8, #8
    5988:	555e      	strb	r6, [r3, r5]
						buffer[bufferPos+1] = integerVersion & 255;
    598a:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    598c:	4ea4      	ldr	r6, [pc, #656]	; (5c20 <_Min_Heap_Size+0x1c20>)
						buffer[bufferPos+1] = integerVersion & 255;
    598e:	fa13 f585 	uxtah	r5, r3, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5992:	edd6 5a05 	vldr	s11, [r6, #20]
						buffer[bufferPos+1] = integerVersion & 255;
    5996:	7068      	strb	r0, [r5, #1]
						bufferPos = bufferPos + 2;
    5998:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    599a:	ee65 5aa7 	vmul.f32	s11, s11, s15
    599e:	ed96 6a06 	vldr	s12, [r6, #24]
						bufferPos = bufferPos + 2;
    59a2:	3502      	adds	r5, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    59a4:	edd6 6a07 	vldr	s13, [r6, #28]
    59a8:	ed96 7a08 	vldr	s14, [r6, #32]
    59ac:	eefc 5ae5 	vcvt.u32.f32	s11, s11
						bufferPos = bufferPos + 2;
    59b0:	b2ad      	uxth	r5, r5
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    59b2:	ee26 6a27 	vmul.f32	s12, s12, s15
    59b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
						bufferPos = bufferPos + 2;
    59ba:	800d      	strh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    59bc:	ee27 7a27 	vmul.f32	s14, s14, s15
						buffer[bufferPos] = integerVersion >> 8;
    59c0:	f8b1 8000 	ldrh.w	r8, [r1]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    59c4:	eebc 6ac6 	vcvt.u32.f32	s12, s12
						buffer[bufferPos+1] = integerVersion & 255;
    59c8:	f8b1 e000 	ldrh.w	lr, [r1]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    59cc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
						bufferPos = bufferPos + 2;
    59d0:	880d      	ldrh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    59d2:	fa1f f888 	uxth.w	r8, r8
						buffer[bufferPos+1] = integerVersion & 255;
    59d6:	fa13 fe8e 	uxtah	lr, r3, lr
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    59da:	eebc 7ac7 	vcvt.u32.f32	s14, s14
						bufferPos = bufferPos + 2;
    59de:	3502      	adds	r5, #2
    59e0:	b2ad      	uxth	r5, r5
    59e2:	800d      	strh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    59e4:	f8b1 c000 	ldrh.w	ip, [r1]
						buffer[bufferPos+1] = integerVersion & 255;
    59e8:	880e      	ldrh	r6, [r1, #0]
						bufferPos = bufferPos + 2;
    59ea:	880d      	ldrh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    59ec:	fa1f fc8c 	uxth.w	ip, ip
						buffer[bufferPos+1] = integerVersion & 255;
    59f0:	fa13 f686 	uxtah	r6, r3, r6
						bufferPos = bufferPos + 2;
    59f4:	3502      	adds	r5, #2
    59f6:	b2ad      	uxth	r5, r5
    59f8:	800d      	strh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    59fa:	880d      	ldrh	r5, [r1, #0]
    59fc:	b2a8      	uxth	r0, r5
						buffer[bufferPos+1] = integerVersion & 255;
    59fe:	880d      	ldrh	r5, [r1, #0]
    5a00:	fa13 f585 	uxtah	r5, r3, r5
    5a04:	9504      	str	r5, [sp, #16]
						bufferPos = bufferPos + 2;
    5a06:	880d      	ldrh	r5, [r1, #0]
    5a08:	3502      	adds	r5, #2
    5a0a:	b2ad      	uxth	r5, r5
    5a0c:	800d      	strh	r5, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    5a0e:	880d      	ldrh	r5, [r1, #0]
    5a10:	b2ad      	uxth	r5, r5
    5a12:	9502      	str	r5, [sp, #8]
						buffer[bufferPos+1] = integerVersion & 255;
    5a14:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5a16:	ed8d 6a01 	vstr	s12, [sp, #4]
						buffer[bufferPos+1] = integerVersion & 255;
    5a1a:	fa13 fa85 	uxtah	sl, r3, r5
						bufferPos = bufferPos + 2;
    5a1e:	880d      	ldrh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5a20:	edcd 6a03 	vstr	s13, [sp, #12]
						bufferPos = bufferPos + 2;
    5a24:	3502      	adds	r5, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5a26:	ed8d 7a05 	vstr	s14, [sp, #20]
						bufferPos = bufferPos + 2;
    5a2a:	b2ad      	uxth	r5, r5
    5a2c:	800d      	strh	r5, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5a2e:	ee15 5a90 	vmov	r5, s11
						buffer[bufferPos] = integerVersion >> 8;
    5a32:	f3c5 2b07 	ubfx	fp, r5, #8, #8
    5a36:	f803 b008 	strb.w	fp, [r3, r8]
						buffer[bufferPos+1] = integerVersion & 255;
    5a3a:	f88e 5001 	strb.w	r5, [lr, #1]
						buffer[bufferPos] = integerVersion >> 8;
    5a3e:	ee16 5a10 	vmov	r5, s12
    5a42:	f8b1 8000 	ldrh.w	r8, [r1]
    5a46:	f3c5 2507 	ubfx	r5, r5, #8, #8
						buffer[bufferPos+1] = integerVersion & 255;
    5a4a:	f8b1 e000 	ldrh.w	lr, [r1]
						buffer[bufferPos] = integerVersion >> 8;
    5a4e:	fa1f f888 	uxth.w	r8, r8
    5a52:	f803 500c 	strb.w	r5, [r3, ip]
						buffer[bufferPos+1] = integerVersion & 255;
    5a56:	ee16 5a10 	vmov	r5, s12
    5a5a:	fa13 fe8e 	uxtah	lr, r3, lr
    5a5e:	7075      	strb	r5, [r6, #1]
						buffer[bufferPos] = integerVersion >> 8;
    5a60:	ee16 6a90 	vmov	r6, s13
    5a64:	f3c6 2507 	ubfx	r5, r6, #8, #8
    5a68:	541d      	strb	r5, [r3, r0]
						buffer[bufferPos+1] = integerVersion & 255;
    5a6a:	9804      	ldr	r0, [sp, #16]
    5a6c:	7046      	strb	r6, [r0, #1]
						buffer[bufferPos] = integerVersion >> 8;
    5a6e:	ee17 6a10 	vmov	r6, s14
    5a72:	9802      	ldr	r0, [sp, #8]
    5a74:	f3c6 2507 	ubfx	r5, r6, #8, #8
    5a78:	541d      	strb	r5, [r3, r0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5a7a:	4869      	ldr	r0, [pc, #420]	; (5c20 <_Min_Heap_Size+0x1c20>)
						buffer[bufferPos+1] = integerVersion & 255;
    5a7c:	f88a 6001 	strb.w	r6, [sl, #1]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5a80:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
    5a84:	ed90 6a09 	vldr	s12, [r0, #36]	; 0x24
    5a88:	edd0 6a0a 	vldr	s13, [r0, #40]	; 0x28
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    5a8c:	4865      	ldr	r0, [pc, #404]	; (5c24 <_Min_Heap_Size+0x1c24>)
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5a8e:	ee26 6a27 	vmul.f32	s12, s12, s15
    5a92:	ee66 6aa7 	vmul.f32	s13, s13, s15
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    5a96:	f8d0 a000 	ldr.w	sl, [r0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
						bufferPos = bufferPos + 2;
    5a9e:	8808      	ldrh	r0, [r1, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5aa0:	eebc 7ac6 	vcvt.u32.f32	s14, s12
						bufferPos = bufferPos + 2;
    5aa4:	3002      	adds	r0, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
						bufferPos = bufferPos + 2;
    5aaa:	b280      	uxth	r0, r0
    5aac:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    5aae:	f8b1 c000 	ldrh.w	ip, [r1]
						buffer[bufferPos+1] = integerVersion & 255;
    5ab2:	880e      	ldrh	r6, [r1, #0]
						bufferPos = bufferPos + 2;
    5ab4:	8808      	ldrh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    5ab6:	fa1f fc8c 	uxth.w	ip, ip
						buffer[bufferPos+1] = integerVersion & 255;
    5aba:	fa13 f686 	uxtah	r6, r3, r6
						bufferPos = bufferPos + 2;
    5abe:	3002      	adds	r0, #2
    5ac0:	b280      	uxth	r0, r0
    5ac2:	8008      	strh	r0, [r1, #0]
						buffer[bufferPos] = integerVersion >> 8;
    5ac4:	880d      	ldrh	r5, [r1, #0]
						buffer[bufferPos+1] = integerVersion & 255;
    5ac6:	8808      	ldrh	r0, [r1, #0]
						bufferPos = bufferPos + 2;
    5ac8:	f8b1 b000 	ldrh.w	fp, [r1]
						buffer[bufferPos] = integerVersion >> 8;
    5acc:	b2ad      	uxth	r5, r5
						buffer[bufferPos+1] = integerVersion & 255;
    5ace:	fa13 f080 	uxtah	r0, r3, r0
						bufferPos = bufferPos + 2;
    5ad2:	f10b 0b02 	add.w	fp, fp, #2
    5ad6:	fa1f fb8b 	uxth.w	fp, fp
    5ada:	f8a1 b000 	strh.w	fp, [r1]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5ade:	ee17 1a10 	vmov	r1, s14
					 presetNumberToLoad = presetNumberToSave;
    5ae2:	f899 9000 	ldrb.w	r9, [r9]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5ae6:	eebc 7ae6 	vcvt.u32.f32	s14, s13
					 presetNumberToLoad = presetNumberToSave;
    5aea:	f8df b16c 	ldr.w	fp, [pc, #364]	; 5c58 <_Min_Heap_Size+0x1c58>
    5aee:	fa5f f989 	uxtb.w	r9, r9
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    5af2:	edcd 7a02 	vstr	s15, [sp, #8]
    5af6:	ed8d 7a01 	vstr	s14, [sp, #4]
					 presetNumberToLoad = presetNumberToSave;
    5afa:	f88b 9000 	strb.w	r9, [fp]
						buffer[bufferPos] = integerVersion >> 8;
    5afe:	f3c1 2907 	ubfx	r9, r1, #8, #8
    5b02:	f803 9008 	strb.w	r9, [r3, r8]
						buffer[bufferPos+1] = integerVersion & 255;
    5b06:	f88e 1001 	strb.w	r1, [lr, #1]
						buffer[bufferPos] = integerVersion >> 8;
    5b0a:	ee17 1a10 	vmov	r1, s14
    5b0e:	f3c1 2107 	ubfx	r1, r1, #8, #8
    5b12:	f803 100c 	strb.w	r1, [r3, ip]
						buffer[bufferPos+1] = integerVersion & 255;
    5b16:	ee17 1a10 	vmov	r1, s14
    5b1a:	7071      	strb	r1, [r6, #1]
						buffer[bufferPos] = integerVersion >> 8;
    5b1c:	ee17 6a90 	vmov	r6, s15
    5b20:	f3c6 2107 	ubfx	r1, r6, #8, #8
    5b24:	5559      	strb	r1, [r3, r5]
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    5b26:	4b40      	ldr	r3, [pc, #256]	; (5c28 <_Min_Heap_Size+0x1c28>)
						buffer[bufferPos+1] = integerVersion & 255;
    5b28:	7046      	strb	r6, [r0, #1]
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    5b2a:	f8c3 a000 	str.w	sl, [r3]
					 presetWaitingToWrite = currentPresetSize;
    5b2e:	4b3f      	ldr	r3, [pc, #252]	; (5c2c <_Min_Heap_Size+0x1c2c>)
    5b30:	483f      	ldr	r0, [pc, #252]	; (5c30 <_Min_Heap_Size+0x1c30>)
    5b32:	f8c3 a000 	str.w	sl, [r3]
    5b36:	f7fe b930 	b.w	3d9a <handleSPI+0x31a>
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    5b3a:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
					param *FXAlias = &params[whichParam + 1];
    5b3e:	f105 0901 	add.w	r9, r5, #1
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    5b42:	ea4f 08e8 	mov.w	r8, r8, asr #3
					param *FXAlias = &params[whichParam + 1];
    5b46:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    5b4a:	ee67 7a87 	vmul.f32	s15, s15, s14
					param *FXAlias = &params[whichParam + 1];
    5b4e:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
    5b52:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    5b56:	fef8 7a67 	vrinta.f32	s15, s15
    5b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5b5e:	edcd 7a02 	vstr	s15, [sp, #8]
    5b62:	f89d 0008 	ldrb.w	r0, [sp, #8]
					if (effectType > FXLowpass)
    5b66:	280d      	cmp	r0, #13
    5b68:	d902      	bls.n	5b70 <_Min_Heap_Size+0x1b70>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    5b6a:	4a32      	ldr	r2, [pc, #200]	; (5c34 <_Min_Heap_Size+0x1c34>)
    5b6c:	f8ca 2048 	str.w	r2, [sl, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    5b70:	4641      	mov	r1, r8
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    5b72:	eb08 0888 	add.w	r8, r8, r8, lsl #2
					setEffectsFunctions(effectType, whichEffect);
    5b76:	f006 f91b 	bl	bdb0 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    5b7a:	4a2f      	ldr	r2, [pc, #188]	; (5c38 <_Min_Heap_Size+0x1c38>)
    5b7c:	ebab 0309 	sub.w	r3, fp, r9
    5b80:	eb02 0188 	add.w	r1, r2, r8, lsl #2
    5b84:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    5b88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5b8c:	615a      	str	r2, [r3, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    5b8e:	684b      	ldr	r3, [r1, #4]
    5b90:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    5b94:	688b      	ldr	r3, [r1, #8]
    5b96:	f8ca 304c 	str.w	r3, [sl, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    5b9a:	68cb      	ldr	r3, [r1, #12]
    5b9c:	f8ca 3068 	str.w	r3, [sl, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    5ba0:	690b      	ldr	r3, [r1, #16]
    5ba2:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
    5ba6:	f7ff bb63 	b.w	5270 <_Min_Heap_Size+0x1270>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5baa:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
    5bae:	ed96 7a02 	vldr	s14, [r6, #8]
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5bb2:	eddf 6a22 	vldr	s13, [pc, #136]	; 5c3c <_Min_Heap_Size+0x1c3c>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5bb6:	ee37 7a67 	vsub.f32	s14, s14, s15
    5bba:	ed9f 6a21 	vldr	s12, [pc, #132]	; 5c40 <_Min_Heap_Size+0x1c40>
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5bbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5bc2:	4b20      	ldr	r3, [pc, #128]	; (5c44 <_Min_Heap_Size+0x1c44>)
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5bc4:	4a20      	ldr	r2, [pc, #128]	; (5c48 <_Min_Heap_Size+0x1c48>)
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5bc6:	eec6 6a07 	vdiv.f32	s13, s12, s14
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    5bca:	edc2 7a00 	vstr	s15, [r2]
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    5bce:	edc3 6a00 	vstr	s13, [r3]
				if (whichParam == PedalControlsMaster)
    5bd2:	f7fe b8db 	b.w	3d8c <handleSPI+0x30c>
    5bd6:	2d9b      	cmp	r5, #155	; 0x9b
    5bd8:	f47e a8d8 	bne.w	3d8c <handleSPI+0x30c>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    5bdc:	4a1b      	ldr	r2, [pc, #108]	; (5c4c <_Min_Heap_Size+0x1c4c>)
    5bde:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5be2:	4b1b      	ldr	r3, [pc, #108]	; (5c50 <_Min_Heap_Size+0x1c50>)
    5be4:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
    5be8:	e62c      	b.n	5844 <_Min_Heap_Size+0x1844>
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    5bea:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    5bee:	edda 7a02 	vldr	s15, [sl, #8]
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    5bf2:	4a18      	ldr	r2, [pc, #96]	; (5c54 <_Min_Heap_Size+0x1c54>)
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    5bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    5bf8:	fb82 1203 	smull	r1, r2, r2, r3
    5bfc:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    5bfe:	fef8 7a67 	vrinta.f32	s15, s15
    5c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    5c06:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    5c0a:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    5c0e:	2a05      	cmp	r2, #5
    5c10:	f63f ab51 	bhi.w	52b6 <_Min_Heap_Size+0x12b6>
    5c14:	e8df f002 	tbb	[pc, r2]
    5c18:	2e343a40 	.word	0x2e343a40
    5c1c:	2228      	.short	0x2228
    5c1e:	bf00      	nop
    5c20:	200051e8 	.word	0x200051e8
    5c24:	20014450 	.word	0x20014450
    5c28:	2001a474 	.word	0x2001a474
    5c2c:	2001a478 	.word	0x2001a478
    5c30:	30043380 	.word	0x30043380
    5c34:	00001aa1 	.word	0x00001aa1
    5c38:	20014494 	.word	0x20014494
    5c3c:	42fe0000 	.word	0x42fe0000
    5c40:	3c010204 	.word	0x3c010204
    5c44:	20019304 	.word	0x20019304
    5c48:	20019308 	.word	0x20019308
    5c4c:	2001a320 	.word	0x2001a320
    5c50:	2001a430 	.word	0x2001a430
    5c54:	4ec4ec4f 	.word	0x4ec4ec4f
    5c58:	2001a46e 	.word	0x2001a46e
			  shapeTick[i] = &triTick;
    5c5c:	4a80      	ldr	r2, [pc, #512]	; (5e60 <_Min_Heap_Size+0x1e60>)
    5c5e:	4981      	ldr	r1, [pc, #516]	; (5e64 <_Min_Heap_Size+0x1e64>)
    5c60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    5c64:	f7ff bb27 	b.w	52b6 <_Min_Heap_Size+0x12b6>
			  shapeTick[i] = &sineTick;
    5c68:	4a7d      	ldr	r2, [pc, #500]	; (5e60 <_Min_Heap_Size+0x1e60>)
    5c6a:	497f      	ldr	r1, [pc, #508]	; (5e68 <_Min_Heap_Size+0x1e68>)
    5c6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    5c70:	f7ff bb21 	b.w	52b6 <_Min_Heap_Size+0x12b6>
			  shapeTick[i] = &pulseTick;
    5c74:	4a7a      	ldr	r2, [pc, #488]	; (5e60 <_Min_Heap_Size+0x1e60>)
    5c76:	497d      	ldr	r1, [pc, #500]	; (5e6c <_Min_Heap_Size+0x1e6c>)
    5c78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    5c7c:	f7ff bb1b 	b.w	52b6 <_Min_Heap_Size+0x12b6>
			  shapeTick[i] = &sawTick;
    5c80:	4a77      	ldr	r2, [pc, #476]	; (5e60 <_Min_Heap_Size+0x1e60>)
    5c82:	497b      	ldr	r1, [pc, #492]	; (5e70 <_Min_Heap_Size+0x1e70>)
    5c84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    5c88:	f7ff bb15 	b.w	52b6 <_Min_Heap_Size+0x12b6>
			  shapeTick[i] = &sineTriTick;
    5c8c:	4a74      	ldr	r2, [pc, #464]	; (5e60 <_Min_Heap_Size+0x1e60>)
    5c8e:	4979      	ldr	r1, [pc, #484]	; (5e74 <_Min_Heap_Size+0x1e74>)
    5c90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    5c94:	f7ff bb0f 	b.w	52b6 <_Min_Heap_Size+0x12b6>
			  shapeTick[i] = &sawSquareTick;
    5c98:	4a71      	ldr	r2, [pc, #452]	; (5e60 <_Min_Heap_Size+0x1e60>)
    5c9a:	4977      	ldr	r1, [pc, #476]	; (5e78 <_Min_Heap_Size+0x1e78>)
    5c9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    5ca0:	f7ff bb09 	b.w	52b6 <_Min_Heap_Size+0x12b6>
				if ((whichParam == Filter1Type) || (whichParam == Filter2Type))
    5ca4:	2d60      	cmp	r5, #96	; 0x60
    5ca6:	d002      	beq.n	5cae <_Min_Heap_Size+0x1cae>
    5ca8:	2d66      	cmp	r5, #102	; 0x66
    5caa:	f47f ad48 	bne.w	573e <_Min_Heap_Size+0x173e>
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    5cae:	9b01      	ldr	r3, [sp, #4]
    5cb0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    5cb4:	4971      	ldr	r1, [pc, #452]	; (5e7c <_Min_Heap_Size+0x1e7c>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5cb6:	f04f 0900 	mov.w	r9, #0
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    5cba:	1b5b      	subs	r3, r3, r5
    5cbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5cc0:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    5cc4:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    5cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    5ccc:	fb81 2103 	smull	r2, r1, r1, r3
    5cd0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    5cd4:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    5cd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5cdc:	ee17 0a90 	vmov	r0, s15
    5ce0:	f006 fa46 	bl	c170 <__setFilterTypes_veneer>
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    5ce4:	4866      	ldr	r0, [pc, #408]	; (5e80 <_Min_Heap_Size+0x1e80>)
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    5ce6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    5cea:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    5cee:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    5cf2:	005b      	lsls	r3, r3, #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    5cf4:	f8dc 0004 	ldr.w	r0, [ip, #4]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    5cf8:	f103 0863 	add.w	r8, r3, #99	; 0x63
					int filterGainParamNum = Filter1Gain + (whichFilter * FilterParamsNum);
    5cfc:	3362      	adds	r3, #98	; 0x62
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    5cfe:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    5d02:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    5d06:	ea4f 0a88 	mov.w	sl, r8, lsl #2
    5d0a:	eb06 0888 	add.w	r8, r6, r8, lsl #2
    5d0e:	f10a 0b08 	add.w	fp, sl, #8
    5d12:	f1aa 0a14 	sub.w	sl, sl, #20
    5d16:	f8c8 1014 	str.w	r1, [r8, #20]
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    5d1a:	eb06 0183 	add.w	r1, r6, r3, lsl #2
    5d1e:	44b3      	add	fp, r6
    5d20:	009b      	lsls	r3, r3, #2
    5d22:	44b2      	add	sl, r6
    5d24:	6148      	str	r0, [r1, #20]
    5d26:	9302      	str	r3, [sp, #8]
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    5d28:	ecbb 0a01 	vldmia	fp!, {s0}
    5d2c:	4649      	mov	r1, r9
    5d2e:	f898 0018 	ldrb.w	r0, [r8, #24]
    5d32:	f8d8 3014 	ldr.w	r3, [r8, #20]
    5d36:	4798      	blx	r3
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    5d38:	9b02      	ldr	r3, [sp, #8]
    5d3a:	ecba 0a01 	vldmia	sl!, {s0}
    5d3e:	4649      	mov	r1, r9
    5d40:	18f3      	adds	r3, r6, r3
    5d42:	695a      	ldr	r2, [r3, #20]
    5d44:	7e18      	ldrb	r0, [r3, #24]
    5d46:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5d48:	f1b9 0f00 	cmp.w	r9, #0
    5d4c:	f47f acf7 	bne.w	573e <_Min_Heap_Size+0x173e>
    5d50:	f04f 0901 	mov.w	r9, #1
    5d54:	e7e8      	b.n	5d28 <_Min_Heap_Size+0x1d28>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5d56:	f1a6 0314 	sub.w	r3, r6, #20
    5d5a:	f885 9020 	strb.w	r9, [r5, #32]
    5d5e:	2b03      	cmp	r3, #3
    5d60:	d841      	bhi.n	5de6 <_Min_Heap_Size+0x1de6>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    5d62:	4b48      	ldr	r3, [pc, #288]	; (5e84 <_Min_Heap_Size+0x1e84>)
    5d64:	2101      	movs	r1, #1
    5d66:	4433      	add	r3, r6
    5d68:	f803 1c14 	strb.w	r1, [r3, #-20]
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    5d6c:	f7ff ba27 	b.w	51be <_Min_Heap_Size+0x11be>
						audioOutBuffer[i] = 0;
    5d70:	2200      	movs	r2, #0
    5d72:	f503 6180 	add.w	r1, r3, #1024	; 0x400
						audioOutBuffer[i + 1] = 0;
    5d76:	e9c3 2200 	strd	r2, r2, [r3]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    5d7a:	3308      	adds	r3, #8
    5d7c:	4299      	cmp	r1, r3
    5d7e:	d1fa      	bne.n	5d76 <_Min_Heap_Size+0x1d76>
    5d80:	f7ff b848 	b.w	4e14 <_Min_Heap_Size+0xe14>
						mappings[whichMapping].hookActive[whichSlot] = 0;
    5d84:	f885 9048 	strb.w	r9, [r5, #72]	; 0x48
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5d88:	464d      	mov	r5, r9
							mappings[whichMapping].destNumber = 255;
    5d8a:	f808 6003 	strb.w	r6, [r8, r3]
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    5d8e:	f8da 3004 	ldr.w	r3, [sl, #4]
    5d92:	eb03 0685 	add.w	r6, r3, r5, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    5d96:	691b      	ldr	r3, [r3, #16]
    5d98:	ed96 0a00 	vldr	s0, [r6]
    5d9c:	4798      	blx	r3
    5d9e:	ed86 0a02 	vstr	s0, [r6, #8]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    5da2:	f8da 3004 	ldr.w	r3, [sl, #4]
    5da6:	4629      	mov	r1, r5
    5da8:	eb03 0685 	add.w	r6, r3, r5, lsl #2
    5dac:	695a      	ldr	r2, [r3, #20]
    5dae:	7e18      	ldrb	r0, [r3, #24]
    5db0:	ed96 0a02 	vldr	s0, [r6, #8]
    5db4:	4790      	blx	r2
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5db6:	2d00      	cmp	r5, #0
    5db8:	f47d afe8 	bne.w	3d8c <handleSPI+0x30c>
    5dbc:	2501      	movs	r5, #1
    5dbe:	e7e6      	b.n	5d8e <_Min_Heap_Size+0x1d8e>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    5dc0:	ee07 6a90 	vmov	s15, r6
    5dc4:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    5dc8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 5e88 <_Min_Heap_Size+0x1e88>
    5dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5dd0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    5dd4:	4473      	add	r3, lr
    5dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
    5dda:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    5dde:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    5de2:	f7fd bfd3 	b.w	3d8c <handleSPI+0x30c>
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    5de6:	2e02      	cmp	r6, #2
    5de8:	f63f a9e9 	bhi.w	51be <_Min_Heap_Size+0x11be>
							oscOn[source - OSC_SOURCE_OFFSET] = 1;
    5dec:	4b27      	ldr	r3, [pc, #156]	; (5e8c <_Min_Heap_Size+0x1e8c>)
    5dee:	5598      	strb	r0, [r3, r6]
    5df0:	f7ff b9e5 	b.w	51be <_Min_Heap_Size+0x11be>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5df4:	f1bc 0f03 	cmp.w	ip, #3
    5df8:	d823      	bhi.n	5e42 <_Min_Heap_Size+0x1e42>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    5dfa:	4b22      	ldr	r3, [pc, #136]	; (5e84 <_Min_Heap_Size+0x1e84>)
    5dfc:	2201      	movs	r2, #1
    5dfe:	4433      	add	r3, r6
    5e00:	f803 2c14 	strb.w	r2, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    5e04:	e444      	b.n	5690 <_Min_Heap_Size+0x1690>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5e06:	f1bc 0f03 	cmp.w	ip, #3
    5e0a:	d921      	bls.n	5e50 <_Min_Heap_Size+0x1e50>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    5e0c:	2e02      	cmp	r6, #2
    5e0e:	f63f ac28 	bhi.w	5662 <_Min_Heap_Size+0x1662>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    5e12:	4b1e      	ldr	r3, [pc, #120]	; (5e8c <_Min_Heap_Size+0x1e8c>)
    5e14:	f04f 0b01 	mov.w	fp, #1
    5e18:	f803 b006 	strb.w	fp, [r3, r6]
    5e1c:	e421      	b.n	5662 <_Min_Heap_Size+0x1662>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    5e1e:	eb03 02ce 	add.w	r2, r3, lr, lsl #3
    5e22:	7001      	strb	r1, [r0, #0]
    5e24:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    5e28:	4d19      	ldr	r5, [pc, #100]	; (5e90 <_Min_Heap_Size+0x1e90>)
    5e2a:	4442      	add	r2, r8
    5e2c:	4443      	add	r3, r8
    5e2e:	6295      	str	r5, [r2, #40]	; 0x28
    5e30:	605d      	str	r5, [r3, #4]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    5e32:	f7fd bfab 	b.w	3d8c <handleSPI+0x30c>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    5e36:	f1a6 0314 	sub.w	r3, r6, #20
    5e3a:	2b03      	cmp	r3, #3
    5e3c:	d991      	bls.n	5d62 <_Min_Heap_Size+0x1d62>
    5e3e:	f7ff b9be 	b.w	51be <_Min_Heap_Size+0x11be>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    5e42:	2e02      	cmp	r6, #2
    5e44:	f63f ac24 	bhi.w	5690 <_Min_Heap_Size+0x1690>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    5e48:	4b10      	ldr	r3, [pc, #64]	; (5e8c <_Min_Heap_Size+0x1e8c>)
    5e4a:	2201      	movs	r2, #1
    5e4c:	559a      	strb	r2, [r3, r6]
    5e4e:	e41f      	b.n	5690 <_Min_Heap_Size+0x1690>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    5e50:	4b0c      	ldr	r3, [pc, #48]	; (5e84 <_Min_Heap_Size+0x1e84>)
    5e52:	f04f 0b01 	mov.w	fp, #1
    5e56:	4433      	add	r3, r6
    5e58:	f803 bc14 	strb.w	fp, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    5e5c:	e401      	b.n	5662 <_Min_Heap_Size+0x1662>
    5e5e:	bf00      	nop
    5e60:	2001d830 	.word	0x2001d830
    5e64:	00008421 	.word	0x00008421
    5e68:	000083e1 	.word	0x000083e1
    5e6c:	00008381 	.word	0x00008381
    5e70:	00008341 	.word	0x00008341
    5e74:	000082e1 	.word	0x000082e1
    5e78:	00008281 	.word	0x00008281
    5e7c:	2aaaaaab 	.word	0x2aaaaaab
    5e80:	200164e8 	.word	0x200164e8
    5e84:	2001d318 	.word	0x2001d318
    5e88:	37fffffc 	.word	0x37fffffc
    5e8c:	2001d68c 	.word	0x2001d68c
    5e90:	200006a8 	.word	0x200006a8
    5e94:	f3af 8000 	nop.w
    5e98:	f3af 8000 	nop.w
    5e9c:	f3af 8000 	nop.w

00005ea0 <HAL_I2C_SlaveRxCpltCallback>:
	presetWaitingToParse = 4096;
    5ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    5ea4:	4b02      	ldr	r3, [pc, #8]	; (5eb0 <HAL_I2C_SlaveRxCpltCallback+0x10>)
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    5ea6:	4903      	ldr	r1, [pc, #12]	; (5eb4 <HAL_I2C_SlaveRxCpltCallback+0x14>)
    5ea8:	4803      	ldr	r0, [pc, #12]	; (5eb8 <HAL_I2C_SlaveRxCpltCallback+0x18>)
	presetWaitingToParse = 4096;
    5eaa:	601a      	str	r2, [r3, #0]
	HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, 4096);
    5eac:	f006 b93c 	b.w	c128 <__HAL_I2C_Slave_Receive_IT_veneer>
    5eb0:	2001a474 	.word	0x2001a474
    5eb4:	30042380 	.word	0x30042380
    5eb8:	2001438c 	.word	0x2001438c
    5ebc:	f3af 8000 	nop.w

00005ec0 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    5ec0:	4b01      	ldr	r3, [pc, #4]	; (5ec8 <HAL_I2C_MasterTxCpltCallback+0x8>)
    5ec2:	2200      	movs	r2, #0
    5ec4:	701a      	strb	r2, [r3, #0]
}
    5ec6:	4770      	bx	lr
    5ec8:	20016612 	.word	0x20016612
    5ecc:	f3af 8000 	nop.w
    5ed0:	f3af 8000 	nop.w
    5ed4:	f3af 8000 	nop.w
    5ed8:	f3af 8000 	nop.w
    5edc:	f3af 8000 	nop.w

00005ee0 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    5ee0:	2100      	movs	r1, #0
	I2CErrors++;
    5ee2:	4a05      	ldr	r2, [pc, #20]	; (5ef8 <HAL_I2C_ErrorCallback+0x18>)
	i2cSending = 0;
    5ee4:	4b05      	ldr	r3, [pc, #20]	; (5efc <HAL_I2C_ErrorCallback+0x1c>)
	receivingI2C = 0;
    5ee6:	4806      	ldr	r0, [pc, #24]	; (5f00 <HAL_I2C_ErrorCallback+0x20>)
	i2cSending = 0;
    5ee8:	7019      	strb	r1, [r3, #0]
	I2CErrors++;
    5eea:	7813      	ldrb	r3, [r2, #0]
	receivingI2C = 0;
    5eec:	7001      	strb	r1, [r0, #0]
	I2CErrors++;
    5eee:	3301      	adds	r3, #1
    5ef0:	b2db      	uxtb	r3, r3
    5ef2:	7013      	strb	r3, [r2, #0]
}
    5ef4:	4770      	bx	lr
    5ef6:	bf00      	nop
    5ef8:	20014434 	.word	0x20014434
    5efc:	20016612 	.word	0x20016612
    5f00:	2001a8cc 	.word	0x2001a8cc
    5f04:	f3af 8000 	nop.w
    5f08:	f3af 8000 	nop.w
    5f0c:	f3af 8000 	nop.w
    5f10:	f3af 8000 	nop.w
    5f14:	f3af 8000 	nop.w
    5f18:	f3af 8000 	nop.w
    5f1c:	f3af 8000 	nop.w

00005f20 <HAL_SPI_TxRxCpltCallback>:
{
    5f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hspi == &hspi6)
    5f22:	4cb5      	ldr	r4, [pc, #724]	; (61f8 <HAL_SPI_TxRxCpltCallback+0x2d8>)
	interrupted = 1;
    5f24:	2201      	movs	r2, #1
    5f26:	4bb5      	ldr	r3, [pc, #724]	; (61fc <HAL_SPI_TxRxCpltCallback+0x2dc>)
	if (hspi == &hspi6)
    5f28:	4284      	cmp	r4, r0
	interrupted = 1;
    5f2a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi6)
    5f2c:	d04b      	beq.n	5fc6 <HAL_SPI_TxRxCpltCallback+0xa6>
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    5f2e:	4cb4      	ldr	r4, [pc, #720]	; (6200 <HAL_SPI_TxRxCpltCallback+0x2e0>)
  __ASM volatile ("dsb 0xF":::"memory");
    5f30:	f3bf 8f4f 	dsb	sy
    5f34:	4bb3      	ldr	r3, [pc, #716]	; (6204 <HAL_SPI_TxRxCpltCallback+0x2e4>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    5f36:	f104 0620 	add.w	r6, r4, #32
    5f3a:	f104 0540 	add.w	r5, r4, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    5f3e:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    5f42:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
    5f46:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    5f4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5f4e:	f3bf 8f6f 	isb	sy
		if ((SPI_LEVERS_RX[62] == 254) && (SPI_LEVERS_RX[63] == 253))
    5f52:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
    5f56:	2bfe      	cmp	r3, #254	; 0xfe
    5f58:	d104      	bne.n	5f64 <HAL_SPI_TxRxCpltCallback+0x44>
    5f5a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    5f5e:	2bfd      	cmp	r3, #253	; 0xfd
    5f60:	f000 8142 	beq.w	61e8 <HAL_SPI_TxRxCpltCallback+0x2c8>
			HAL_SPI_Abort(&hspi1);
    5f64:	4fa8      	ldr	r7, [pc, #672]	; (6208 <HAL_SPI_TxRxCpltCallback+0x2e8>)
    5f66:	4638      	mov	r0, r7
    5f68:	f005 fe56 	bl	bc18 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI1_FORCE_RESET();
    5f6c:	4ba7      	ldr	r3, [pc, #668]	; (620c <HAL_SPI_TxRxCpltCallback+0x2ec>)
    5f6e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5f72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    5f76:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI1_RELEASE_RESET();
    5f7a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5f7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    5f82:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI1_Init();
    5f86:	f006 f833 	bl	bff0 <__MX_SPI1_Init_veneer>
			__HAL_SPI_ENABLE(&hspi1);
    5f8a:	6839      	ldr	r1, [r7, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    5f8c:	4a9c      	ldr	r2, [pc, #624]	; (6200 <HAL_SPI_TxRxCpltCallback+0x2e0>)
    5f8e:	4638      	mov	r0, r7
			__HAL_SPI_ENABLE(&hspi1);
    5f90:	680b      	ldr	r3, [r1, #0]
    5f92:	f043 0301 	orr.w	r3, r3, #1
    5f96:	600b      	str	r3, [r1, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    5f98:	2340      	movs	r3, #64	; 0x40
    5f9a:	18d1      	adds	r1, r2, r3
    5f9c:	f006 f848 	bl	c030 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    5fa0:	4a9b      	ldr	r2, [pc, #620]	; (6210 <HAL_SPI_TxRxCpltCallback+0x2f0>)
    5fa2:	7813      	ldrb	r3, [r2, #0]
    5fa4:	3301      	adds	r3, #1
    5fa6:	b2db      	uxtb	r3, r3
    5fa8:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    5faa:	f3bf 8f4f 	dsb	sy
    5fae:	4b95      	ldr	r3, [pc, #596]	; (6204 <HAL_SPI_TxRxCpltCallback+0x2e4>)
    5fb0:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    5fb4:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
    5fb8:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    5fbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5fc0:	f3bf 8f6f 	isb	sy
}
    5fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    5fc6:	4b93      	ldr	r3, [pc, #588]	; (6214 <HAL_SPI_TxRxCpltCallback+0x2f4>)
    5fc8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    5fcc:	2afe      	cmp	r2, #254	; 0xfe
    5fce:	f040 80d5 	bne.w	617c <HAL_SPI_TxRxCpltCallback+0x25c>
    5fd2:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
    5fd6:	2afd      	cmp	r2, #253	; 0xfd
    5fd8:	f040 80d0 	bne.w	617c <HAL_SPI_TxRxCpltCallback+0x25c>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    5fdc:	4a8e      	ldr	r2, [pc, #568]	; (6218 <HAL_SPI_TxRxCpltCallback+0x2f8>)
    5fde:	7811      	ldrb	r1, [r2, #0]
    5fe0:	2900      	cmp	r1, #0
    5fe2:	f000 8105 	beq.w	61f0 <HAL_SPI_TxRxCpltCallback+0x2d0>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    5fe6:	4a8d      	ldr	r2, [pc, #564]	; (621c <HAL_SPI_TxRxCpltCallback+0x2fc>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    5fe8:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    5fea:	6814      	ldr	r4, [r2, #0]
    5fec:	6810      	ldr	r0, [r2, #0]
    5fee:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    5ff2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    5ff6:	f894 5061 	ldrb.w	r5, [r4, #97]	; 0x61
    5ffa:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    5ffe:	4888      	ldr	r0, [pc, #544]	; (6220 <HAL_SPI_TxRxCpltCallback+0x300>)
    6000:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6004:	b2a4      	uxth	r4, r4
    6006:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6008:	f000 80f2 	beq.w	61f0 <HAL_SPI_TxRxCpltCallback+0x2d0>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    600c:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    600e:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6010:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6014:	f894 5063 	ldrb.w	r5, [r4, #99]	; 0x63
    6018:	6814      	ldr	r4, [r2, #0]
    601a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    601e:	f894 4064 	ldrb.w	r4, [r4, #100]	; 0x64
    6022:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6026:	b2a4      	uxth	r4, r4
    6028:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    602a:	f000 80e1 	beq.w	61f0 <HAL_SPI_TxRxCpltCallback+0x2d0>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    602e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6030:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6032:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6036:	f894 5065 	ldrb.w	r5, [r4, #101]	; 0x65
    603a:	6814      	ldr	r4, [r2, #0]
    603c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6040:	f894 4066 	ldrb.w	r4, [r4, #102]	; 0x66
    6044:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6048:	b2a4      	uxth	r4, r4
    604a:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    604c:	f000 80d0 	beq.w	61f0 <HAL_SPI_TxRxCpltCallback+0x2d0>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6050:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6052:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6054:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6058:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    605c:	6814      	ldr	r4, [r2, #0]
    605e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6062:	f894 4068 	ldrb.w	r4, [r4, #104]	; 0x68
    6066:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    606a:	b2a4      	uxth	r4, r4
    606c:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    606e:	f000 80bf 	beq.w	61f0 <HAL_SPI_TxRxCpltCallback+0x2d0>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6072:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6074:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6076:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    607a:	f894 5069 	ldrb.w	r5, [r4, #105]	; 0x69
    607e:	6814      	ldr	r4, [r2, #0]
    6080:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6084:	f894 406a 	ldrb.w	r4, [r4, #106]	; 0x6a
    6088:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    608c:	b2a4      	uxth	r4, r4
    608e:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6090:	f000 80ae 	beq.w	61f0 <HAL_SPI_TxRxCpltCallback+0x2d0>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6094:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6096:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6098:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    609c:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
    60a0:	6814      	ldr	r4, [r2, #0]
    60a2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    60a6:	f894 406c 	ldrb.w	r4, [r4, #108]	; 0x6c
    60aa:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    60ae:	b2a4      	uxth	r4, r4
    60b0:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    60b2:	f000 809d 	beq.w	61f0 <HAL_SPI_TxRxCpltCallback+0x2d0>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    60b6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    60b8:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    60ba:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    60be:	f894 506d 	ldrb.w	r5, [r4, #109]	; 0x6d
    60c2:	6814      	ldr	r4, [r2, #0]
    60c4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    60c8:	f894 406e 	ldrb.w	r4, [r4, #110]	; 0x6e
    60cc:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    60d0:	b2a4      	uxth	r4, r4
    60d2:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    60d4:	f000 808c 	beq.w	61f0 <HAL_SPI_TxRxCpltCallback+0x2d0>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    60d8:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    60da:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    60dc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    60e0:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
    60e4:	6814      	ldr	r4, [r2, #0]
    60e6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    60ea:	f894 4070 	ldrb.w	r4, [r4, #112]	; 0x70
    60ee:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    60f2:	b2a4      	uxth	r4, r4
    60f4:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    60f6:	d07b      	beq.n	61f0 <HAL_SPI_TxRxCpltCallback+0x2d0>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    60f8:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    60fa:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    60fc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6100:	f894 5071 	ldrb.w	r5, [r4, #113]	; 0x71
    6104:	6814      	ldr	r4, [r2, #0]
    6106:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    610a:	f894 4072 	ldrb.w	r4, [r4, #114]	; 0x72
    610e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6112:	b2a4      	uxth	r4, r4
    6114:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6116:	d06b      	beq.n	61f0 <HAL_SPI_TxRxCpltCallback+0x2d0>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6118:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    611a:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    611c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6120:	f894 5073 	ldrb.w	r5, [r4, #115]	; 0x73
    6124:	6814      	ldr	r4, [r2, #0]
    6126:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    612a:	f894 4074 	ldrb.w	r4, [r4, #116]	; 0x74
    612e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6132:	b2a4      	uxth	r4, r4
    6134:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6136:	d05b      	beq.n	61f0 <HAL_SPI_TxRxCpltCallback+0x2d0>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6138:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    613a:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    613c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6140:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
    6144:	6814      	ldr	r4, [r2, #0]
    6146:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    614a:	f894 4076 	ldrb.w	r4, [r4, #118]	; 0x76
    614e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6152:	b2a4      	uxth	r4, r4
    6154:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6156:	d04b      	beq.n	61f0 <HAL_SPI_TxRxCpltCallback+0x2d0>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6158:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    615a:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    615c:	6815      	ldr	r5, [r2, #0]
    615e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6162:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    6166:	f894 4077 	ldrb.w	r4, [r4, #119]	; 0x77
    616a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    616e:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    6172:	b29b      	uxth	r3, r3
    6174:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6176:	d03b      	beq.n	61f0 <HAL_SPI_TxRxCpltCallback+0x2d0>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    6178:	6813      	ldr	r3, [r2, #0]
    617a:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi6);
    617c:	481e      	ldr	r0, [pc, #120]	; (61f8 <HAL_SPI_TxRxCpltCallback+0x2d8>)
    617e:	f005 fd4b 	bl	bc18 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI6_FORCE_RESET();
    6182:	4b22      	ldr	r3, [pc, #136]	; (620c <HAL_SPI_TxRxCpltCallback+0x2ec>)
    6184:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    6188:	f042 0220 	orr.w	r2, r2, #32
    618c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			__HAL_RCC_SPI6_RELEASE_RESET();
    6190:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    6194:	f022 0220 	bic.w	r2, r2, #32
    6198:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			MX_SPI6_Init();
    619c:	f005 ff54 	bl	c048 <__MX_SPI6_Init_veneer>
			__HAL_SPI_ENABLE(&hspi6);
    61a0:	6825      	ldr	r5, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    61a2:	4a20      	ldr	r2, [pc, #128]	; (6224 <HAL_SPI_TxRxCpltCallback+0x304>)
    61a4:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi6);
    61a6:	682c      	ldr	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    61a8:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    61ac:	4812      	ldr	r0, [pc, #72]	; (61f8 <HAL_SPI_TxRxCpltCallback+0x2d8>)
			__HAL_SPI_ENABLE(&hspi6);
    61ae:	f044 0401 	orr.w	r4, r4, #1
    61b2:	602c      	str	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    61b4:	f005 ff3c 	bl	c030 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    61b8:	4a15      	ldr	r2, [pc, #84]	; (6210 <HAL_SPI_TxRxCpltCallback+0x2f0>)
    61ba:	7813      	ldrb	r3, [r2, #0]
    61bc:	3301      	adds	r3, #1
    61be:	b2db      	uxtb	r3, r3
    61c0:	7013      	strb	r3, [r2, #0]
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    61c2:	4a18      	ldr	r2, [pc, #96]	; (6224 <HAL_SPI_TxRxCpltCallback+0x304>)
  __ASM volatile ("dsb 0xF":::"memory");
    61c4:	f3bf 8f4f 	dsb	sy
    61c8:	4b0e      	ldr	r3, [pc, #56]	; (6204 <HAL_SPI_TxRxCpltCallback+0x2e4>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    61ca:	f102 0020 	add.w	r0, r2, #32
    61ce:	f102 0140 	add.w	r1, r2, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    61d2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    61d6:	f8c3 0270 	str.w	r0, [r3, #624]	; 0x270
    61da:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
    61de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    61e2:	f3bf 8f6f 	isb	sy
}
    61e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			handleSPI(LEVER_BUFFER_SIZE);
    61e8:	2020      	movs	r0, #32
    61ea:	f7fd fc49 	bl	3a80 <handleSPI>
    61ee:	e6dc      	b.n	5faa <HAL_SPI_TxRxCpltCallback+0x8a>
			newPluck = 1;
    61f0:	4b0d      	ldr	r3, [pc, #52]	; (6228 <HAL_SPI_TxRxCpltCallback+0x308>)
    61f2:	2201      	movs	r2, #1
    61f4:	601a      	str	r2, [r3, #0]
    61f6:	e7e4      	b.n	61c2 <HAL_SPI_TxRxCpltCallback+0x2a2>
    61f8:	2001cfb0 	.word	0x2001cfb0
    61fc:	200051d0 	.word	0x200051d0
    6200:	30000800 	.word	0x30000800
    6204:	e000ed00 	.word	0xe000ed00
    6208:	2001cf10 	.word	0x2001cf10
    620c:	58024400 	.word	0x58024400
    6210:	20019311 	.word	0x20019311
    6214:	38000000 	.word	0x38000000
    6218:	20000694 	.word	0x20000694
    621c:	200051c4 	.word	0x200051c4
    6220:	20014204 	.word	0x20014204
    6224:	38000040 	.word	0x38000040
    6228:	200052e8 	.word	0x200052e8
    622c:	f3af 8000 	nop.w
    6230:	f3af 8000 	nop.w
    6234:	f3af 8000 	nop.w
    6238:	f3af 8000 	nop.w
    623c:	f3af 8000 	nop.w

00006240 <HAL_SPI_TxRxHalfCpltCallback>:
{
    6240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hspi == &hspi6)
    6242:	4cb4      	ldr	r4, [pc, #720]	; (6514 <HAL_SPI_TxRxHalfCpltCallback+0x2d4>)
	interrupted = 1;
    6244:	2201      	movs	r2, #1
    6246:	4bb4      	ldr	r3, [pc, #720]	; (6518 <HAL_SPI_TxRxHalfCpltCallback+0x2d8>)
	if (hspi == &hspi6)
    6248:	4284      	cmp	r4, r0
	interrupted = 1;
    624a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi6)
    624c:	d049      	beq.n	62e2 <HAL_SPI_TxRxHalfCpltCallback+0xa2>
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    624e:	4cb3      	ldr	r4, [pc, #716]	; (651c <HAL_SPI_TxRxHalfCpltCallback+0x2dc>)
  __ASM volatile ("dsb 0xF":::"memory");
    6250:	f3bf 8f4f 	dsb	sy
    6254:	4bb2      	ldr	r3, [pc, #712]	; (6520 <HAL_SPI_TxRxHalfCpltCallback+0x2e0>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    6256:	f104 0620 	add.w	r6, r4, #32
    625a:	f104 0540 	add.w	r5, r4, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    625e:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    6262:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
    6266:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    626a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    626e:	f3bf 8f6f 	isb	sy
		if ((SPI_LEVERS_RX[30] == 254) && (SPI_LEVERS_RX[31] == 253))
    6272:	7fa3      	ldrb	r3, [r4, #30]
    6274:	2bfe      	cmp	r3, #254	; 0xfe
    6276:	d103      	bne.n	6280 <HAL_SPI_TxRxHalfCpltCallback+0x40>
    6278:	7fe3      	ldrb	r3, [r4, #31]
    627a:	2bfd      	cmp	r3, #253	; 0xfd
    627c:	f000 8142 	beq.w	6504 <HAL_SPI_TxRxHalfCpltCallback+0x2c4>
			HAL_SPI_Abort(&hspi1);
    6280:	4fa8      	ldr	r7, [pc, #672]	; (6524 <HAL_SPI_TxRxHalfCpltCallback+0x2e4>)
    6282:	4638      	mov	r0, r7
    6284:	f005 fcc8 	bl	bc18 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI1_FORCE_RESET();
    6288:	4ba7      	ldr	r3, [pc, #668]	; (6528 <HAL_SPI_TxRxHalfCpltCallback+0x2e8>)
    628a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    628e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    6292:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI1_RELEASE_RESET();
    6296:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    629a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    629e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI1_Init();
    62a2:	f005 fea5 	bl	bff0 <__MX_SPI1_Init_veneer>
			__HAL_SPI_ENABLE(&hspi1);
    62a6:	6839      	ldr	r1, [r7, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    62a8:	4a9c      	ldr	r2, [pc, #624]	; (651c <HAL_SPI_TxRxHalfCpltCallback+0x2dc>)
    62aa:	4638      	mov	r0, r7
			__HAL_SPI_ENABLE(&hspi1);
    62ac:	680b      	ldr	r3, [r1, #0]
    62ae:	f043 0301 	orr.w	r3, r3, #1
    62b2:	600b      	str	r3, [r1, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    62b4:	2340      	movs	r3, #64	; 0x40
    62b6:	18d1      	adds	r1, r2, r3
    62b8:	f005 feba 	bl	c030 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    62bc:	4a9b      	ldr	r2, [pc, #620]	; (652c <HAL_SPI_TxRxHalfCpltCallback+0x2ec>)
    62be:	7813      	ldrb	r3, [r2, #0]
    62c0:	3301      	adds	r3, #1
    62c2:	b2db      	uxtb	r3, r3
    62c4:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    62c6:	f3bf 8f4f 	dsb	sy
    62ca:	4b95      	ldr	r3, [pc, #596]	; (6520 <HAL_SPI_TxRxHalfCpltCallback+0x2e0>)
    62cc:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    62d0:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
    62d4:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    62d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    62dc:	f3bf 8f6f 	isb	sy
}
    62e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    62e2:	4b93      	ldr	r3, [pc, #588]	; (6530 <HAL_SPI_TxRxHalfCpltCallback+0x2f0>)
    62e4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    62e8:	2afe      	cmp	r2, #254	; 0xfe
    62ea:	f040 80d5 	bne.w	6498 <HAL_SPI_TxRxHalfCpltCallback+0x258>
    62ee:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
    62f2:	2afd      	cmp	r2, #253	; 0xfd
    62f4:	f040 80d0 	bne.w	6498 <HAL_SPI_TxRxHalfCpltCallback+0x258>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    62f8:	4a8e      	ldr	r2, [pc, #568]	; (6534 <HAL_SPI_TxRxHalfCpltCallback+0x2f4>)
    62fa:	7811      	ldrb	r1, [r2, #0]
    62fc:	2900      	cmp	r1, #0
    62fe:	f000 8105 	beq.w	650c <HAL_SPI_TxRxHalfCpltCallback+0x2cc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6302:	4a8d      	ldr	r2, [pc, #564]	; (6538 <HAL_SPI_TxRxHalfCpltCallback+0x2f8>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6304:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6306:	6814      	ldr	r4, [r2, #0]
    6308:	6810      	ldr	r0, [r2, #0]
    630a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    630e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    6312:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
    6316:	f890 4042 	ldrb.w	r4, [r0, #66]	; 0x42
    631a:	4888      	ldr	r0, [pc, #544]	; (653c <HAL_SPI_TxRxHalfCpltCallback+0x2fc>)
    631c:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6320:	b2a4      	uxth	r4, r4
    6322:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6324:	f000 80f2 	beq.w	650c <HAL_SPI_TxRxHalfCpltCallback+0x2cc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6328:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    632a:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    632c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6330:	f894 5043 	ldrb.w	r5, [r4, #67]	; 0x43
    6334:	6814      	ldr	r4, [r2, #0]
    6336:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    633a:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
    633e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6342:	b2a4      	uxth	r4, r4
    6344:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6346:	f000 80e1 	beq.w	650c <HAL_SPI_TxRxHalfCpltCallback+0x2cc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    634a:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    634c:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    634e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6352:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    6356:	6814      	ldr	r4, [r2, #0]
    6358:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    635c:	f894 4046 	ldrb.w	r4, [r4, #70]	; 0x46
    6360:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6364:	b2a4      	uxth	r4, r4
    6366:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6368:	f000 80d0 	beq.w	650c <HAL_SPI_TxRxHalfCpltCallback+0x2cc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    636c:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    636e:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6370:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6374:	f894 5047 	ldrb.w	r5, [r4, #71]	; 0x47
    6378:	6814      	ldr	r4, [r2, #0]
    637a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    637e:	f894 4048 	ldrb.w	r4, [r4, #72]	; 0x48
    6382:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    6386:	b2a4      	uxth	r4, r4
    6388:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    638a:	f000 80bf 	beq.w	650c <HAL_SPI_TxRxHalfCpltCallback+0x2cc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    638e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6390:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6392:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6396:	f894 5049 	ldrb.w	r5, [r4, #73]	; 0x49
    639a:	6814      	ldr	r4, [r2, #0]
    639c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    63a0:	f894 404a 	ldrb.w	r4, [r4, #74]	; 0x4a
    63a4:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    63a8:	b2a4      	uxth	r4, r4
    63aa:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    63ac:	f000 80ae 	beq.w	650c <HAL_SPI_TxRxHalfCpltCallback+0x2cc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    63b0:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    63b2:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    63b4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    63b8:	f894 504b 	ldrb.w	r5, [r4, #75]	; 0x4b
    63bc:	6814      	ldr	r4, [r2, #0]
    63be:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    63c2:	f894 404c 	ldrb.w	r4, [r4, #76]	; 0x4c
    63c6:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    63ca:	b2a4      	uxth	r4, r4
    63cc:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    63ce:	f000 809d 	beq.w	650c <HAL_SPI_TxRxHalfCpltCallback+0x2cc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    63d2:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    63d4:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    63d6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    63da:	f894 504d 	ldrb.w	r5, [r4, #77]	; 0x4d
    63de:	6814      	ldr	r4, [r2, #0]
    63e0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    63e4:	f894 404e 	ldrb.w	r4, [r4, #78]	; 0x4e
    63e8:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    63ec:	b2a4      	uxth	r4, r4
    63ee:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    63f0:	f000 808c 	beq.w	650c <HAL_SPI_TxRxHalfCpltCallback+0x2cc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    63f4:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    63f6:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    63f8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    63fc:	f894 504f 	ldrb.w	r5, [r4, #79]	; 0x4f
    6400:	6814      	ldr	r4, [r2, #0]
    6402:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6406:	f894 4050 	ldrb.w	r4, [r4, #80]	; 0x50
    640a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    640e:	b2a4      	uxth	r4, r4
    6410:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6412:	d07b      	beq.n	650c <HAL_SPI_TxRxHalfCpltCallback+0x2cc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6414:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6416:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6418:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    641c:	f894 5051 	ldrb.w	r5, [r4, #81]	; 0x51
    6420:	6814      	ldr	r4, [r2, #0]
    6422:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6426:	f894 4052 	ldrb.w	r4, [r4, #82]	; 0x52
    642a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    642e:	b2a4      	uxth	r4, r4
    6430:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6432:	d06b      	beq.n	650c <HAL_SPI_TxRxHalfCpltCallback+0x2cc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6434:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6436:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6438:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    643c:	f894 5053 	ldrb.w	r5, [r4, #83]	; 0x53
    6440:	6814      	ldr	r4, [r2, #0]
    6442:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6446:	f894 4054 	ldrb.w	r4, [r4, #84]	; 0x54
    644a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    644e:	b2a4      	uxth	r4, r4
    6450:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6452:	d05b      	beq.n	650c <HAL_SPI_TxRxHalfCpltCallback+0x2cc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6454:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6456:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6458:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    645c:	f894 5055 	ldrb.w	r5, [r4, #85]	; 0x55
    6460:	6814      	ldr	r4, [r2, #0]
    6462:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    6466:	f894 4056 	ldrb.w	r4, [r4, #86]	; 0x56
    646a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    646e:	b2a4      	uxth	r4, r4
    6470:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6472:	d04b      	beq.n	650c <HAL_SPI_TxRxHalfCpltCallback+0x2cc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6474:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6476:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6478:	6815      	ldr	r5, [r2, #0]
    647a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    647e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    6482:	f894 4057 	ldrb.w	r4, [r4, #87]	; 0x57
    6486:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    648a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    648e:	b29b      	uxth	r3, r3
    6490:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    6492:	d03b      	beq.n	650c <HAL_SPI_TxRxHalfCpltCallback+0x2cc>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    6494:	6813      	ldr	r3, [r2, #0]
    6496:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi6);
    6498:	481e      	ldr	r0, [pc, #120]	; (6514 <HAL_SPI_TxRxHalfCpltCallback+0x2d4>)
    649a:	f005 fbbd 	bl	bc18 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI6_FORCE_RESET();
    649e:	4b22      	ldr	r3, [pc, #136]	; (6528 <HAL_SPI_TxRxHalfCpltCallback+0x2e8>)
    64a0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    64a4:	f042 0220 	orr.w	r2, r2, #32
    64a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			__HAL_RCC_SPI6_RELEASE_RESET();
    64ac:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    64b0:	f022 0220 	bic.w	r2, r2, #32
    64b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			MX_SPI6_Init();
    64b8:	f005 fdc6 	bl	c048 <__MX_SPI6_Init_veneer>
			__HAL_SPI_ENABLE(&hspi6);
    64bc:	6825      	ldr	r5, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    64be:	4a20      	ldr	r2, [pc, #128]	; (6540 <HAL_SPI_TxRxHalfCpltCallback+0x300>)
    64c0:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi6);
    64c2:	682c      	ldr	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    64c4:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    64c8:	4812      	ldr	r0, [pc, #72]	; (6514 <HAL_SPI_TxRxHalfCpltCallback+0x2d4>)
			__HAL_SPI_ENABLE(&hspi6);
    64ca:	f044 0401 	orr.w	r4, r4, #1
    64ce:	602c      	str	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi6, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    64d0:	f005 fdae 	bl	c030 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    64d4:	4a15      	ldr	r2, [pc, #84]	; (652c <HAL_SPI_TxRxHalfCpltCallback+0x2ec>)
    64d6:	7813      	ldrb	r3, [r2, #0]
    64d8:	3301      	adds	r3, #1
    64da:	b2db      	uxtb	r3, r3
    64dc:	7013      	strb	r3, [r2, #0]
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    64de:	4a18      	ldr	r2, [pc, #96]	; (6540 <HAL_SPI_TxRxHalfCpltCallback+0x300>)
  __ASM volatile ("dsb 0xF":::"memory");
    64e0:	f3bf 8f4f 	dsb	sy
    64e4:	4b0e      	ldr	r3, [pc, #56]	; (6520 <HAL_SPI_TxRxHalfCpltCallback+0x2e0>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    64e6:	f102 0020 	add.w	r0, r2, #32
    64ea:	f102 0140 	add.w	r1, r2, #64	; 0x40
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    64ee:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    64f2:	f8c3 0270 	str.w	r0, [r3, #624]	; 0x270
    64f6:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
    64fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    64fe:	f3bf 8f6f 	isb	sy
}
    6502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			handleSPI(0);
    6504:	2000      	movs	r0, #0
    6506:	f7fd fabb 	bl	3a80 <handleSPI>
    650a:	e6dc      	b.n	62c6 <HAL_SPI_TxRxHalfCpltCallback+0x86>
			newPluck = 1;
    650c:	4b0d      	ldr	r3, [pc, #52]	; (6544 <HAL_SPI_TxRxHalfCpltCallback+0x304>)
    650e:	2201      	movs	r2, #1
    6510:	601a      	str	r2, [r3, #0]
    6512:	e7e4      	b.n	64de <HAL_SPI_TxRxHalfCpltCallback+0x29e>
    6514:	2001cfb0 	.word	0x2001cfb0
    6518:	200051d0 	.word	0x200051d0
    651c:	30000800 	.word	0x30000800
    6520:	e000ed00 	.word	0xe000ed00
    6524:	2001cf10 	.word	0x2001cf10
    6528:	58024400 	.word	0x58024400
    652c:	20019311 	.word	0x20019311
    6530:	38000000 	.word	0x38000000
    6534:	20000694 	.word	0x20000694
    6538:	200051c4 	.word	0x200051c4
    653c:	20014204 	.word	0x20014204
    6540:	38000040 	.word	0x38000040
    6544:	200052e8 	.word	0x200052e8
	...

00006560 <audioInitString1>:
tSimpleLivingString3 livStr[NUM_STRINGS_PER_BOARD];
tPickupNonLinearity pu[NUM_STRINGS_PER_BOARD];
tExpSmooth pitchSmootherS[NUM_STRINGS_PER_BOARD];
float string1Defaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};
void __ATTR_ITCMRAM audioInitString1()
{
    6560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (whichStringModelLoaded != String1Loaded)
    6564:	f8df a100 	ldr.w	sl, [pc, #256]	; 6668 <audioInitString1+0x108>
    6568:	f89a 3000 	ldrb.w	r3, [sl]
    656c:	2b01      	cmp	r3, #1
{
    656e:	ed2d 8b06 	vpush	{d8-d10}
	if (whichStringModelLoaded != String1Loaded)
    6572:	d055      	beq.n	6620 <audioInitString1+0xc0>
	{

		if (whichStringModelLoaded == String2Loaded)
    6574:	2b02      	cmp	r3, #2
    6576:	d05a      	beq.n	662e <audioInitString1+0xce>
		{
			audioFreeString2();
		}
		else if (whichStringModelLoaded == SynthLoaded)
    6578:	2b04      	cmp	r3, #4
    657a:	d055      	beq.n	6628 <audioInitString1+0xc8>
		{
			audioFreeSynth();
		}

		for (int v = 0; v < numStringsThisBoard; v++)
    657c:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 666c <audioInitString1+0x10c>
    6580:	f899 3000 	ldrb.w	r3, [r9]
    6584:	2b00      	cmp	r3, #0
    6586:	d048      	beq.n	661a <audioInitString1+0xba>
    6588:	4c2a      	ldr	r4, [pc, #168]	; (6634 <audioInitString1+0xd4>)
    658a:	2500      	movs	r5, #0
    658c:	4f2a      	ldr	r7, [pc, #168]	; (6638 <audioInitString1+0xd8>)
    658e:	4e2b      	ldr	r6, [pc, #172]	; (663c <audioInitString1+0xdc>)
		{

			tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    6590:	ed9f aa2b 	vldr	s20, [pc, #172]	; 6640 <audioInitString1+0xe0>
    6594:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 6644 <audioInitString1+0xe4>
    6598:	eddf 9a2b 	vldr	s19, [pc, #172]	; 6648 <audioInitString1+0xe8>
    659c:	ed9f 9a2b 	vldr	s18, [pc, #172]	; 664c <audioInitString1+0xec>
    65a0:	eddf 8a2b 	vldr	s17, [pc, #172]	; 6650 <audioInitString1+0xf0>
													 0.01f, 0, &mediumPool);
			tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
			tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
			tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
			tSimpleLivingString3_setLevMode(&livStr[v], 1);
			tPickupNonLinearity_init(&pu[v], &leaf);
    65a4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 6670 <audioInitString1+0x110>
			tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    65a8:	4b2a      	ldr	r3, [pc, #168]	; (6654 <audioInitString1+0xf4>)
    65aa:	eef0 2a4a 	vmov.f32	s5, s20
    65ae:	eef0 1a48 	vmov.f32	s3, s16
    65b2:	ed9f 2a23 	vldr	s4, [pc, #140]	; 6640 <audioInitString1+0xe0>
    65b6:	eeb0 1a69 	vmov.f32	s2, s19
    65ba:	2200      	movs	r2, #0
    65bc:	eef0 0a49 	vmov.f32	s1, s18
    65c0:	2104      	movs	r1, #4
    65c2:	4620      	mov	r0, r4
    65c4:	eeb0 0a68 	vmov.f32	s0, s17
    65c8:	f005 fc46 	bl	be58 <__tSimpleLivingString3_initToPool_veneer>
			tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    65cc:	4620      	mov	r0, r4
    65ce:	ed9f 0a22 	vldr	s0, [pc, #136]	; 6658 <audioInitString1+0xf8>
		for (int v = 0; v < numStringsThisBoard; v++)
    65d2:	3501      	adds	r5, #1
			tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    65d4:	f005 fd00 	bl	bfd8 <__tSimpleLivingString3_setTargetLev_veneer>
			tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
    65d8:	4620      	mov	r0, r4
    65da:	ed9f 0a20 	vldr	s0, [pc, #128]	; 665c <audioInitString1+0xfc>
    65de:	f005 fc1b 	bl	be18 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
			tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
    65e2:	eeb0 0a48 	vmov.f32	s0, s16
    65e6:	4620      	mov	r0, r4
    65e8:	f005 fc1a 	bl	be20 <__tSimpleLivingString3_setLevStrength_veneer>
			tSimpleLivingString3_setLevMode(&livStr[v], 1);
    65ec:	4620      	mov	r0, r4
    65ee:	2101      	movs	r1, #1
		for (int v = 0; v < numStringsThisBoard; v++)
    65f0:	3404      	adds	r4, #4
			tSimpleLivingString3_setLevMode(&livStr[v], 1);
    65f2:	f005 fd0d 	bl	c010 <__tSimpleLivingString3_setLevMode_veneer>
			tPickupNonLinearity_init(&pu[v], &leaf);
    65f6:	4638      	mov	r0, r7
    65f8:	4641      	mov	r1, r8
		for (int v = 0; v < numStringsThisBoard; v++)
    65fa:	3704      	adds	r7, #4
			tPickupNonLinearity_init(&pu[v], &leaf);
    65fc:	f005 fba8 	bl	bd50 <__tPickupNonLinearity_init_veneer>
			tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    6600:	4630      	mov	r0, r6
    6602:	4641      	mov	r1, r8
    6604:	eddf 0a16 	vldr	s1, [pc, #88]	; 6660 <audioInitString1+0x100>
    6608:	ed9f 0a16 	vldr	s0, [pc, #88]	; 6664 <audioInitString1+0x104>
		for (int v = 0; v < numStringsThisBoard; v++)
    660c:	3604      	adds	r6, #4
			tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    660e:	f005 fde3 	bl	c1d8 <__tExpSmooth_init_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    6612:	f899 3000 	ldrb.w	r3, [r9]
    6616:	42ab      	cmp	r3, r5
    6618:	dcc6      	bgt.n	65a8 <audioInitString1+0x48>
		}
		whichStringModelLoaded = String1Loaded;
    661a:	2301      	movs	r3, #1
    661c:	f88a 3000 	strb.w	r3, [sl]
	}

}
    6620:	ecbd 8b06 	vpop	{d8-d10}
    6624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			audioFreeSynth();
    6628:	f005 fd42 	bl	c0b0 <__audioFreeSynth_veneer>
    662c:	e7a6      	b.n	657c <audioInitString1+0x1c>
			audioFreeString2();
    662e:	f000 fb97 	bl	6d60 <audioFreeString2>
    6632:	e7a3      	b.n	657c <audioInitString1+0x1c>
    6634:	2001d04c 	.word	0x2001d04c
    6638:	2001d05c 	.word	0x2001d05c
    663c:	2001d054 	.word	0x2001d054
    6640:	3c23d70a 	.word	0x3c23d70a
    6644:	00000000 	.word	0x00000000
    6648:	3f7fff58 	.word	0x3f7fff58
    664c:	4684d000 	.word	0x4684d000
    6650:	435c0000 	.word	0x435c0000
    6654:	200052e0 	.word	0x200052e0
    6658:	3d40c0f0 	.word	0x3d40c0f0
    665c:	3cf753bf 	.word	0x3cf753bf
    6660:	3f19999a 	.word	0x3f19999a
    6664:	42800000 	.word	0x42800000
    6668:	20014261 	.word	0x20014261
    666c:	20000694 	.word	0x20000694
    6670:	2000528c 	.word	0x2000528c
    6674:	f3af 8000 	nop.w
    6678:	f3af 8000 	nop.w
    667c:	f3af 8000 	nop.w

00006680 <audioFreeString1>:


void __ATTR_ITCMRAM audioFreeString1()
{
    6680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    6684:	f8df 8044 	ldr.w	r8, [pc, #68]	; 66cc <audioFreeString1+0x4c>
    6688:	f898 3000 	ldrb.w	r3, [r8]
    668c:	b1ab      	cbz	r3, 66ba <audioFreeString1+0x3a>
    668e:	4f0c      	ldr	r7, [pc, #48]	; (66c0 <audioFreeString1+0x40>)
    6690:	2400      	movs	r4, #0
    6692:	4e0c      	ldr	r6, [pc, #48]	; (66c4 <audioFreeString1+0x44>)
    6694:	4d0c      	ldr	r5, [pc, #48]	; (66c8 <audioFreeString1+0x48>)
	{
		tExpSmooth_free(&pitchSmootherS[v]);
    6696:	4638      	mov	r0, r7
	for (int v = 0; v < numStringsThisBoard; v++)
    6698:	3401      	adds	r4, #1
		tExpSmooth_free(&pitchSmootherS[v]);
    669a:	f005 fcc1 	bl	c020 <__tExpSmooth_free_veneer>
		tSimpleLivingString3_free(&livStr[v]);
    669e:	4630      	mov	r0, r6
    66a0:	f005 fb76 	bl	bd90 <__tSimpleLivingString3_free_veneer>
		tPickupNonLinearity_free(&pu[v]);
    66a4:	4628      	mov	r0, r5
    66a6:	f005 fb9f 	bl	bde8 <__tPickupNonLinearity_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    66aa:	f898 3000 	ldrb.w	r3, [r8]
    66ae:	3704      	adds	r7, #4
    66b0:	3604      	adds	r6, #4
    66b2:	42a3      	cmp	r3, r4
    66b4:	f105 0504 	add.w	r5, r5, #4
    66b8:	dced      	bgt.n	6696 <audioFreeString1+0x16>
	}
}
    66ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66be:	bf00      	nop
    66c0:	2001d054 	.word	0x2001d054
    66c4:	2001d04c 	.word	0x2001d04c
    66c8:	2001d05c 	.word	0x2001d05c
    66cc:	20000694 	.word	0x20000694
    66d0:	f3af 8000 	nop.w
    66d4:	f3af 8000 	nop.w
    66d8:	f3af 8000 	nop.w
    66dc:	f3af 8000 	nop.w

000066e0 <audioSwitchToString1>:

void __ATTR_ITCMRAM audioSwitchToString1()
{
    66e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    66e4:	4c1f      	ldr	r4, [pc, #124]	; (6764 <audioSwitchToString1+0x84>)

	audioInitString1();
	//load string1 default params:
	for (int i = 0; i < 12; i++)
    66e6:	2500      	movs	r5, #0
    66e8:	4f1f      	ldr	r7, [pc, #124]	; (6768 <audioSwitchToString1+0x88>)
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}

		knobFrozen[i] = 1;
    66ea:	f04f 0901 	mov.w	r9, #1
    66ee:	4e1f      	ldr	r6, [pc, #124]	; (676c <audioSwitchToString1+0x8c>)
    66f0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 6788 <audioSwitchToString1+0xa8>
    66f4:	f8df a094 	ldr.w	sl, [pc, #148]	; 678c <audioSwitchToString1+0xac>
{
    66f8:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    66fc:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 6770 <audioSwitchToString1+0x90>
	audioInitString1();
    6700:	f7ff ff2e 	bl	6560 <audioInitString1>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    6704:	4620      	mov	r0, r4
    6706:	eeb0 0a48 	vmov.f32	s0, s16
    670a:	f005 fb59 	bl	bdc0 <__tExpSmooth_setFactor_veneer>
		if (voice == 63)
    670e:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    6712:	4620      	mov	r0, r4
		if (voice == 63)
    6714:	2b3f      	cmp	r3, #63	; 0x3f
    6716:	d019      	beq.n	674c <audioSwitchToString1+0x6c>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    6718:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 12; i++)
    671c:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    671e:	f005 fc53 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    6722:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 12; i++)
    6726:	3501      	adds	r5, #1
    6728:	3704      	adds	r7, #4
    672a:	2d0c      	cmp	r5, #12
    672c:	d1ea      	bne.n	6704 <audioSwitchToString1+0x24>
	}
	tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
    672e:	4811      	ldr	r0, [pc, #68]	; (6774 <audioSwitchToString1+0x94>)
    6730:	ed9f 0a11 	vldr	s0, [pc, #68]	; 6778 <audioSwitchToString1+0x98>
    6734:	f005 fa98 	bl	bc68 <__tVZFilter_setFreq_veneer>
	audioFrameFunction = audioFrameString1;
    6738:	4910      	ldr	r1, [pc, #64]	; (677c <audioSwitchToString1+0x9c>)
    673a:	4811      	ldr	r0, [pc, #68]	; (6780 <audioSwitchToString1+0xa0>)
	presetReady = 1;
    673c:	2201      	movs	r2, #1
    673e:	4b11      	ldr	r3, [pc, #68]	; (6784 <audioSwitchToString1+0xa4>)
	audioFrameFunction = audioFrameString1;
    6740:	6008      	str	r0, [r1, #0]
	presetReady = 1;
    6742:	601a      	str	r2, [r3, #0]
}
    6744:	ecbd 8b02 	vpop	{d8}
    6748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    674c:	ecb7 0a01 	vldmia	r7!, {s0}
	for (int i = 0; i < 12; i++)
    6750:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    6752:	f005 fc39 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    6756:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 12; i++)
    675a:	3501      	adds	r5, #1
    675c:	3604      	adds	r6, #4
    675e:	2d0c      	cmp	r5, #12
    6760:	d1d0      	bne.n	6704 <audioSwitchToString1+0x24>
    6762:	e7e4      	b.n	672e <audioSwitchToString1+0x4e>
    6764:	20005238 	.word	0x20005238
    6768:	200006b0 	.word	0x200006b0
    676c:	20018678 	.word	0x20018678
    6770:	3a83126f 	.word	0x3a83126f
    6774:	200052f0 	.word	0x200052f0
    6778:	45504000 	.word	0x45504000
    677c:	2000118c 	.word	0x2000118c
    6780:	00006aa1 	.word	0x00006aa1
    6784:	2000534c 	.word	0x2000534c
    6788:	20014250 	.word	0x20014250
    678c:	200051d4 	.word	0x200051d4
    6790:	f3af 8000 	nop.w
    6794:	f3af 8000 	nop.w
    6798:	f3af 8000 	nop.w
    679c:	f3af 8000 	nop.w

000067a0 <audioTickString1>:
}



float __ATTR_ITCMRAM audioTickString1(void)
{
    67a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
    67a4:	4b9f      	ldr	r3, [pc, #636]	; (6a24 <audioTickString1+0x284>)
    67a6:	4ca0      	ldr	r4, [pc, #640]	; (6a28 <audioTickString1+0x288>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    67a8:	48a0      	ldr	r0, [pc, #640]	; (6a2c <audioTickString1+0x28c>)
    67aa:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 6a8c <audioTickString1+0x2ec>
    67ae:	4625      	mov	r5, r4
    67b0:	f104 0930 	add.w	r9, r4, #48	; 0x30
{
    67b4:	ed2d 8b0a 	vpush	{d8-d12}
    67b8:	b087      	sub	sp, #28
	float note[numStringsThisBoard];
    67ba:	781b      	ldrb	r3, [r3, #0]
{
    67bc:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
    67be:	009b      	lsls	r3, r3, #2
    67c0:	3307      	adds	r3, #7
    67c2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    67c6:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    67ca:	f005 fb61 	bl	be90 <__tExpSmooth_tick_veneer>
    67ce:	eef0 8a40 	vmov.f32	s17, s0
	float note[numStringsThisBoard];
    67d2:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    67d4:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
    67d6:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    67da:	f005 fb59 	bl	be90 <__tExpSmooth_tick_veneer>
    67de:	eca5 0a01 	vstmia	r5!, {s0}
	for (int i = 0; i < 12; i++)
    67e2:	45a9      	cmp	r9, r5
    67e4:	d1f6      	bne.n	67d4 <audioTickString1+0x34>
	}
	pluckPos = knobScaled[9];

	for (int i = 0; i < numStringsThisBoard; i++)
    67e6:	4b8f      	ldr	r3, [pc, #572]	; (6a24 <audioTickString1+0x284>)
	pluckPos = knobScaled[9];
    67e8:	4a91      	ldr	r2, [pc, #580]	; (6a30 <audioTickString1+0x290>)
    67ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
	for (int i = 0; i < numStringsThisBoard; i++)
    67ec:	781b      	ldrb	r3, [r3, #0]
	pluckPos = knobScaled[9];
    67ee:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    67f0:	2b00      	cmp	r3, #0
    67f2:	f000 80fc 	beq.w	69ee <audioTickString1+0x24e>
    67f6:	4b8f      	ldr	r3, [pc, #572]	; (6a34 <audioTickString1+0x294>)
    67f8:	2200      	movs	r2, #0
	float temp = 0.0f;
    67fa:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 6a38 <audioTickString1+0x298>
    67fe:	f8df 9290 	ldr.w	r9, [pc, #656]	; 6a90 <audioTickString1+0x2f0>
    6802:	f8df a290 	ldr.w	sl, [pc, #656]	; 6a94 <audioTickString1+0x2f4>
	{
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
    6806:	eeb0 9a48 	vmov.f32	s18, s16
    680a:	f8df 828c 	ldr.w	r8, [pc, #652]	; 6a98 <audioTickString1+0x2f8>
    680e:	617b      	str	r3, [r7, #20]
    6810:	4b8a      	ldr	r3, [pc, #552]	; (6a3c <audioTickString1+0x29c>)
    6812:	ed9f ba8b 	vldr	s22, [pc, #556]	; 6a40 <audioTickString1+0x2a0>
    6816:	613b      	str	r3, [r7, #16]
		{
			decay = (knobScaled[10] * 800.0f) + 10.0f;
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
		tSimpleLivingString3_setDecay(&livStr[i], decay);
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    6818:	4633      	mov	r3, r6
		float decay = 0.1f;
    681a:	eddf aa8a 	vldr	s21, [pc, #552]	; 6a44 <audioTickString1+0x2a4>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    681e:	4616      	mov	r6, r2
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    6820:	eddf ba89 	vldr	s23, [pc, #548]	; 6a48 <audioTickString1+0x2a8>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    6824:	4652      	mov	r2, sl
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    6826:	ed9f aa89 	vldr	s20, [pc, #548]	; 6a4c <audioTickString1+0x2ac>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    682a:	46ca      	mov	sl, r9
    682c:	4d88      	ldr	r5, [pc, #544]	; (6a50 <audioTickString1+0x2b0>)
    682e:	46c1      	mov	r9, r8
    6830:	f8df b268 	ldr.w	fp, [pc, #616]	; 6a9c <audioTickString1+0x2fc>
    6834:	eddf 9a87 	vldr	s19, [pc, #540]	; 6a54 <audioTickString1+0x2b4>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    6838:	4987      	ldr	r1, [pc, #540]	; (6a58 <audioTickString1+0x2b8>)
			note[i] = 0.0f;
    683a:	eeb0 ca49 	vmov.f32	s24, s18
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    683e:	ea4f 0886 	mov.w	r8, r6, lsl #2
    6842:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    6846:	edd1 7a00 	vldr	s15, [r1]
    684a:	6979      	ldr	r1, [r7, #20]
    684c:	ecb1 7a01 	vldmia	r1!, {s14}
    6850:	ee77 7a87 	vadd.f32	s15, s15, s14
    6854:	6179      	str	r1, [r7, #20]
		if (note[i] < 0.0f)
    6856:	eef5 7ac0 	vcmpe.f32	s15, #0.0
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    685a:	ece3 7a01 	vstmia	r3!, {s15}
		if (note[i] < 0.0f)
    685e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6862:	f100 80c1 	bmi.w	69e8 <audioTickString1+0x248>
    6866:	ed43 7a01 	vstr	s15, [r3, #-4]
		if (note[i] > 127.0f)
    686a:	fe87 cacb 	vminnm.f32	s24, s15, s22
		if (lsDecay[i])
    686e:	6938      	ldr	r0, [r7, #16]
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    6870:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
		float decay = 0.1f;
    6874:	eef0 ca6a 	vmov.f32	s25, s21
    6878:	ed03 ca01 	vstr	s24, [r3, #-4]
		if (lsDecay[i])
    687c:	f810 1b01 	ldrb.w	r1, [r0], #1
    6880:	6138      	str	r0, [r7, #16]
    6882:	b129      	cbz	r1, 6890 <audioTickString1+0xf0>
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    6884:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    6888:	eee7 7a2b 	vfma.f32	s15, s14, s23
    688c:	eef0 ca67 	vmov.f32	s25, s15
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    6890:	4628      	mov	r0, r5
    6892:	ed94 0a08 	vldr	s0, [r4, #32]
	for (int i = 0; i < numStringsThisBoard; i++)
    6896:	3601      	adds	r6, #1
    6898:	e9c7 3201 	strd	r3, r2, [r7, #4]
    689c:	4b6f      	ldr	r3, [pc, #444]	; (6a5c <audioTickString1+0x2bc>)
    689e:	4498      	add	r8, r3
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    68a0:	f005 faea 	bl	be78 <__tSimpleLivingString3_setPickupPoint_veneer>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    68a4:	4628      	mov	r0, r5
    68a6:	eeb0 0a6c 	vmov.f32	s0, s25
    68aa:	f005 fbe9 	bl	c080 <__tSimpleLivingString3_setDecay_veneer>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    68ae:	4628      	mov	r0, r5
    68b0:	eeb0 0a69 	vmov.f32	s0, s19
    68b4:	f005 fa5c 	bl	bd70 <__tSimpleLivingString3_setDampFreq_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    68b8:	ed94 0a00 	vldr	s0, [r4]
    68bc:	4628      	mov	r0, r5
    68be:	ee20 0a0a 	vmul.f32	s0, s0, s20
    68c2:	f005 faad 	bl	be20 <__tSimpleLivingString3_setLevStrength_veneer>

		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    68c6:	edd4 7a05 	vldr	s15, [r4, #20]
    68ca:	eddf 6a65 	vldr	s13, [pc, #404]	; 6a60 <audioTickString1+0x2c0>
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    68ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		livStr[i]->rippleDelay = knobScaled[11];
    68d2:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    68d6:	eeb0 0a4c 	vmov.f32	s0, s24
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    68da:	ee67 7aa6 	vmul.f32	s15, s15, s13
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    68de:	60fd      	str	r5, [r7, #12]
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    68e0:	f855 0b04 	ldr.w	r0, [r5], #4
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    68e4:	ee37 6a87 	vadd.f32	s12, s15, s14
		livStr[i]->rippleDelay = knobScaled[11];
    68e8:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    68ec:	edc0 7a19 	vstr	s15, [r0, #100]	; 0x64
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    68f0:	eec7 6a06 	vdiv.f32	s13, s14, s12
    68f4:	edc0 6a1b 	vstr	s13, [r0, #108]	; 0x6c
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    68f8:	f005 fb22 	bl	bf40 <__mtof_veneer>
    68fc:	4648      	mov	r0, r9
    68fe:	f005 fbb3 	bl	c068 <__tExpSmooth_setDest_veneer>
		float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    6902:	4648      	mov	r0, r9
    6904:	f005 fac4 	bl	be90 <__tExpSmooth_tick_veneer>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    6908:	68f9      	ldr	r1, [r7, #12]
	for (int i = 0; i < numStringsThisBoard; i++)
    690a:	f109 0904 	add.w	r9, r9, #4
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    690e:	4608      	mov	r0, r1
    6910:	f005 fb5e 	bl	bfd0 <__tSimpleLivingString3_setFreq_veneer>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    6914:	4b53      	ldr	r3, [pc, #332]	; (6a64 <audioTickString1+0x2c4>)
    6916:	eddb 7a00 	vldr	s15, [fp]
		if (barDelta > 0.2f)
		{
			barDelta = 0.0f; //to avoid noise on open string glitches
		}
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    691a:	4640      	mov	r0, r8
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    691c:	edd3 6a00 	vldr	s13, [r3]
		if (barDelta > 0.2f)
    6920:	ed9f 7a51 	vldr	s14, [pc, #324]	; 6a68 <audioTickString1+0x2c8>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    6924:	ee77 7ae6 	vsub.f32	s15, s15, s13
    6928:	eeb0 0ae7 	vabs.f32	s0, s15
			barDelta = 0.0f; //to avoid noise on open string glitches
    692c:	eeb4 0a47 	vcmp.f32	s0, s14
    6930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6934:	fe39 0a00 	vselgt.f32	s0, s18, s0
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    6938:	f005 fb96 	bl	c068 <__tExpSmooth_setDest_veneer>
		barDelta = tExpSmooth_tick(&barSlideSmoother[i]);
    693c:	4640      	mov	r0, r8
    693e:	f005 faa7 	bl	be90 <__tExpSmooth_tick_veneer>
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    6942:	4650      	mov	r0, sl
    6944:	f005 f9b8 	bl	bcb8 <__tEnvelopeFollower_tick_veneer>
		prevBarInMIDI[0] = barInMIDI[0];
    6948:	4b46      	ldr	r3, [pc, #280]	; (6a64 <audioTickString1+0x2c4>)
    694a:	f8db 0000 	ldr.w	r0, [fp]
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    694e:	eeb0 ca40 	vmov.f32	s24, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    6952:	f10a 0a04 	add.w	sl, sl, #4
		prevBarInMIDI[0] = barInMIDI[0];
    6956:	6018      	str	r0, [r3, #0]
		//tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));

		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    6958:	4844      	ldr	r0, [pc, #272]	; (6a6c <audioTickString1+0x2cc>)
    695a:	f005 f96d 	bl	bc38 <__tNoise_tick_veneer>
    695e:	4844      	ldr	r0, [pc, #272]	; (6a70 <audioTickString1+0x2d0>)
    6960:	f005 fb6a 	bl	c038 <__tVZFilter_tickEfficient_veneer>
		//filtNoise = tVZFilter_tickEfficient(&noiseFilt2, filtNoise);
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    6964:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    6968:	edd4 7a01 	vldr	s15, [r4, #4]

		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    696c:	68f9      	ldr	r1, [r7, #12]
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    696e:	ee67 7a87 	vmul.f32	s15, s15, s14
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    6972:	4608      	mov	r0, r1
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    6974:	ee67 7a8c 	vmul.f32	s15, s15, s24
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    6978:	ee27 0a80 	vmul.f32	s0, s15, s0
    697c:	f005 fc34 	bl	c1e8 <__tSimpleLivingString3_tick_veneer>
    6980:	68ba      	ldr	r2, [r7, #8]
    6982:	4610      	mov	r0, r2
    6984:	60fa      	str	r2, [r7, #12]
    6986:	f005 fafb 	bl	bf80 <__tPickupNonLinearity_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    698a:	4b26      	ldr	r3, [pc, #152]	; (6a24 <audioTickString1+0x284>)
    698c:	68fa      	ldr	r2, [r7, #12]
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    698e:	ee38 8a00 	vadd.f32	s16, s16, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    6992:	7819      	ldrb	r1, [r3, #0]
    6994:	3204      	adds	r2, #4
    6996:	687b      	ldr	r3, [r7, #4]
    6998:	42b1      	cmp	r1, r6
    699a:	f73f af4d 	bgt.w	6838 <audioTickString1+0x98>
    699e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 6a74 <audioTickString1+0x2d4>
	}

	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);

	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    69a2:	ee28 6aa8 	vmul.f32	s12, s17, s17
    69a6:	eddf 7a34 	vldr	s15, [pc, #208]	; 6a78 <audioTickString1+0x2d8>
    69aa:	ed9f 5a34 	vldr	s10, [pc, #208]	; 6a7c <audioTickString1+0x2dc>
    69ae:	eee8 7a87 	vfma.f32	s15, s17, s14
    69b2:	eddf 5a33 	vldr	s11, [pc, #204]	; 6a80 <audioTickString1+0x2e0>
    69b6:	ee68 6a86 	vmul.f32	s13, s17, s12
    69ba:	ed9f 7a32 	vldr	s14, [pc, #200]	; 6a84 <audioTickString1+0x2e4>
    69be:	ee28 7a87 	vmul.f32	s14, s17, s14
    69c2:	eee6 7a85 	vfma.f32	s15, s13, s10
    69c6:	eee6 7a65 	vfms.f32	s15, s12, s11
    69ca:	eee6 7ac7 	vfms.f32	s15, s13, s14


	//temp = input;
	temp *= outVol * masterVolFromBrain;
    69ce:	4b2e      	ldr	r3, [pc, #184]	; (6a88 <audioTickString1+0x2e8>)
    69d0:	ee28 0a27 	vmul.f32	s0, s16, s15

	return temp;
}
    69d4:	371c      	adds	r7, #28
	temp *= outVol * masterVolFromBrain;
    69d6:	edd3 7a00 	vldr	s15, [r3]
    69da:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    69de:	46bd      	mov	sp, r7
    69e0:	ecbd 8b0a 	vpop	{d8-d12}
    69e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    69e8:	ed03 9a01 	vstr	s18, [r3, #-4]
		if (note[i] > 127.0f)
    69ec:	e73f      	b.n	686e <audioTickString1+0xce>
    69ee:	ed9f 7a21 	vldr	s14, [pc, #132]	; 6a74 <audioTickString1+0x2d4>
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    69f2:	ee68 6aa8 	vmul.f32	s13, s17, s17
    69f6:	eddf 7a20 	vldr	s15, [pc, #128]	; 6a78 <audioTickString1+0x2d8>
    69fa:	eddf 5a20 	vldr	s11, [pc, #128]	; 6a7c <audioTickString1+0x2dc>
    69fe:	eee8 7a87 	vfma.f32	s15, s17, s14
    6a02:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 6a80 <audioTickString1+0x2e0>
    6a06:	ee28 7aa6 	vmul.f32	s14, s17, s13
    6a0a:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 6a84 <audioTickString1+0x2e4>
	float temp = 0.0f;
    6a0e:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 6a38 <audioTickString1+0x298>
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    6a12:	ee68 8a85 	vmul.f32	s17, s17, s10
    6a16:	eee7 7a25 	vfma.f32	s15, s14, s11
    6a1a:	eee6 7ac6 	vfms.f32	s15, s13, s12
    6a1e:	eee7 7a68 	vfms.f32	s15, s14, s17
    6a22:	e7d4      	b.n	69ce <audioTickString1+0x22e>
    6a24:	20000694 	.word	0x20000694
    6a28:	200051e8 	.word	0x200051e8
    6a2c:	2001425c 	.word	0x2001425c
    6a30:	20000698 	.word	0x20000698
    6a34:	20014224 	.word	0x20014224
    6a38:	00000000 	.word	0x00000000
    6a3c:	200052dc 	.word	0x200052dc
    6a40:	42fe0000 	.word	0x42fe0000
    6a44:	3dcccccd 	.word	0x3dcccccd
    6a48:	44480000 	.word	0x44480000
    6a4c:	3d108950 	.word	0x3d108950
    6a50:	2001d04c 	.word	0x2001d04c
    6a54:	46768933 	.word	0x46768933
    6a58:	2001421c 	.word	0x2001421c
    6a5c:	200011a0 	.word	0x200011a0
    6a60:	bcf5c28f 	.word	0xbcf5c28f
    6a64:	20005350 	.word	0x20005350
    6a68:	3e4ccccd 	.word	0x3e4ccccd
    6a6c:	200052e4 	.word	0x200052e4
    6a70:	200052f0 	.word	0x200052f0
    6a74:	3ef1ac0b 	.word	0x3ef1ac0b
    6a78:	3bdc4213 	.word	0x3bdc4213
    6a7c:	40caa285 	.word	0x40caa285
    6a80:	4022be0a 	.word	0x4022be0a
    6a84:	40516313 	.word	0x40516313
    6a88:	2000068c 	.word	0x2000068c
    6a8c:	20005238 	.word	0x20005238
    6a90:	20001198 	.word	0x20001198
    6a94:	2001d05c 	.word	0x2001d05c
    6a98:	2001d054 	.word	0x2001d054
    6a9c:	20001190 	.word	0x20001190

00006aa0 <audioFrameString1>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    6aa0:	4a70      	ldr	r2, [pc, #448]	; (6c64 <audioFrameString1+0x1c4>)
	if (resetStringInputs)
    6aa2:	4b71      	ldr	r3, [pc, #452]	; (6c68 <audioFrameString1+0x1c8>)
{
    6aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6aa8:	ed2d 8b04 	vpush	{d8-d9}
	uint32_t tempCountFrame = DWT->CYCCNT;
    6aac:	f8d2 b004 	ldr.w	fp, [r2, #4]
{
    6ab0:	b083      	sub	sp, #12
	if (resetStringInputs)
    6ab2:	781a      	ldrb	r2, [r3, #0]
{
    6ab4:	4605      	mov	r5, r0
	if (resetStringInputs)
    6ab6:	2a00      	cmp	r2, #0
    6ab8:	d170      	bne.n	6b9c <audioFrameString1+0xfc>
    6aba:	4f6c      	ldr	r7, [pc, #432]	; (6c6c <audioFrameString1+0x1cc>)
	if (newPluck)
    6abc:	683b      	ldr	r3, [r7, #0]
    6abe:	2b00      	cmp	r3, #0
    6ac0:	d03f      	beq.n	6b42 <audioFrameString1+0xa2>
		for (int i = 0; i < numStringsThisBoard; i++)
    6ac2:	4b6b      	ldr	r3, [pc, #428]	; (6c70 <audioFrameString1+0x1d0>)
    6ac4:	7818      	ldrb	r0, [r3, #0]
    6ac6:	2800      	cmp	r0, #0
    6ac8:	d039      	beq.n	6b3e <audioFrameString1+0x9e>
    6aca:	4b6a      	ldr	r3, [pc, #424]	; (6c74 <audioFrameString1+0x1d4>)
    6acc:	4639      	mov	r1, r7
				tExpSmooth_setValAndDest(&pitchSmootherS[i], mtof(note));
    6ace:	eddf 9a6a 	vldr	s19, [pc, #424]	; 6c78 <audioFrameString1+0x1d8>
    6ad2:	462f      	mov	r7, r5
    6ad4:	ed9f 9a69 	vldr	s18, [pc, #420]	; 6c7c <audioFrameString1+0x1dc>
    6ad8:	461d      	mov	r5, r3
				float amplitz = stringInputs[i] * 0.000015259021897f;
    6ada:	eddf 8a69 	vldr	s17, [pc, #420]	; 6c80 <audioFrameString1+0x1e0>
		for (int i = 0; i < numStringsThisBoard; i++)
    6ade:	2400      	movs	r4, #0
    6ae0:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 6cbc <audioFrameString1+0x21c>
    6ae4:	460b      	mov	r3, r1
    6ae6:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 6cc0 <audioFrameString1+0x220>
    6aea:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 6ca0 <audioFrameString1+0x200>
    6aee:	4e65      	ldr	r6, [pc, #404]	; (6c84 <audioFrameString1+0x1e4>)
    6af0:	4a65      	ldr	r2, [pc, #404]	; (6c88 <audioFrameString1+0x1e8>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    6af2:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
    6af6:	b289      	uxth	r1, r1
    6af8:	b921      	cbnz	r1, 6b04 <audioFrameString1+0x64>
    6afa:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    6afe:	b289      	uxth	r1, r1
    6b00:	2900      	cmp	r1, #0
    6b02:	d15d      	bne.n	6bc0 <audioFrameString1+0x120>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    6b04:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
    6b08:	b289      	uxth	r1, r1
    6b0a:	b139      	cbz	r1, 6b1c <audioFrameString1+0x7c>
    6b0c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    6b10:	b289      	uxth	r1, r1
    6b12:	b919      	cbnz	r1, 6b1c <audioFrameString1+0x7c>
				lsDecay[i] = 0;
    6b14:	f888 1000 	strb.w	r1, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
    6b18:	4955      	ldr	r1, [pc, #340]	; (6c70 <audioFrameString1+0x1d0>)
    6b1a:	7808      	ldrb	r0, [r1, #0]
			previousStringInputs[i] = stringInputs[i];
    6b1c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    6b20:	3504      	adds	r5, #4
    6b22:	f10a 0a04 	add.w	sl, sl, #4
    6b26:	f109 0904 	add.w	r9, r9, #4
			previousStringInputs[i] = stringInputs[i];
    6b2a:	b289      	uxth	r1, r1
		for (int i = 0; i < numStringsThisBoard; i++)
    6b2c:	f108 0801 	add.w	r8, r8, #1
			previousStringInputs[i] = stringInputs[i];
    6b30:	f826 1014 	strh.w	r1, [r6, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    6b34:	3401      	adds	r4, #1
    6b36:	42a0      	cmp	r0, r4
    6b38:	dcdb      	bgt.n	6af2 <audioFrameString1+0x52>
    6b3a:	463d      	mov	r5, r7
    6b3c:	461f      	mov	r7, r3
		newPluck = 0;
    6b3e:	2300      	movs	r3, #0
    6b40:	603b      	str	r3, [r7, #0]
    6b42:	4c52      	ldr	r4, [pc, #328]	; (6c8c <audioFrameString1+0x1ec>)
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    6b44:	ed9f 8a52 	vldr	s16, [pc, #328]	; 6c90 <audioFrameString1+0x1f0>
    6b48:	f504 7300 	add.w	r3, r4, #512	; 0x200
    6b4c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    6b50:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    6b54:	f7ff fe24 	bl	67a0 <audioTickString1>
    6b58:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    6b5c:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    6b5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    6b62:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    6b64:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[iplusbuffer + 1] = current_sample;
    6b68:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    6b6c:	d1f2      	bne.n	6b54 <audioFrameString1+0xb4>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    6b6e:	4b3d      	ldr	r3, [pc, #244]	; (6c64 <audioFrameString1+0x1c4>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    6b70:	4848      	ldr	r0, [pc, #288]	; (6c94 <audioFrameString1+0x1f4>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    6b72:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    6b74:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    6b78:	eba3 030b 	sub.w	r3, r3, fp
    6b7c:	4946      	ldr	r1, [pc, #280]	; (6c98 <audioFrameString1+0x1f8>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    6b7e:	4a47      	ldr	r2, [pc, #284]	; (6c9c <audioFrameString1+0x1fc>)
    6b80:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    6b84:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    6b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
    6b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
    6b8e:	edc2 7a00 	vstr	s15, [r2]
}
    6b92:	b003      	add	sp, #12
    6b94:	ecbd 8b04 	vpop	{d8-d9}
    6b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    6b9c:	4a34      	ldr	r2, [pc, #208]	; (6c70 <audioFrameString1+0x1d0>)
    6b9e:	7811      	ldrb	r1, [r2, #0]
    6ba0:	b141      	cbz	r1, 6bb4 <audioFrameString1+0x114>
			lsDecay[i] = 0;
    6ba2:	2200      	movs	r2, #0
    6ba4:	483e      	ldr	r0, [pc, #248]	; (6ca0 <audioFrameString1+0x200>)
			previousStringInputs[i] = 0;
    6ba6:	4e37      	ldr	r6, [pc, #220]	; (6c84 <audioFrameString1+0x1e4>)
		for (int i = 0; i < numStringsThisBoard; i++)
    6ba8:	2901      	cmp	r1, #1
			lsDecay[i] = 0;
    6baa:	7002      	strb	r2, [r0, #0]
			previousStringInputs[i] = 0;
    6bac:	8032      	strh	r2, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    6bae:	d001      	beq.n	6bb4 <audioFrameString1+0x114>
			lsDecay[i] = 0;
    6bb0:	7042      	strb	r2, [r0, #1]
			previousStringInputs[i] = 0;
    6bb2:	8072      	strh	r2, [r6, #2]
		resetStringInputs = 0;
    6bb4:	2200      	movs	r2, #0
		newPluck = 1;
    6bb6:	4f2d      	ldr	r7, [pc, #180]	; (6c6c <audioFrameString1+0x1cc>)
		resetStringInputs = 0;
    6bb8:	701a      	strb	r2, [r3, #0]
		newPluck = 1;
    6bba:	2301      	movs	r3, #1
    6bbc:	603b      	str	r3, [r7, #0]
    6bbe:	e77d      	b.n	6abc <audioFrameString1+0x1c>
				float note = stringMIDIPitches[i] + stringOctave[i];
    6bc0:	4938      	ldr	r1, [pc, #224]	; (6ca4 <audioFrameString1+0x204>)
    6bc2:	9301      	str	r3, [sp, #4]
    6bc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    6bc8:	ed91 0a00 	vldr	s0, [r1]
				stringOctave[i] = octave;
    6bcc:	4936      	ldr	r1, [pc, #216]	; (6ca8 <audioFrameString1+0x208>)
    6bce:	edd1 7a00 	vldr	s15, [r1]
				float note = stringMIDIPitches[i] + stringOctave[i];
    6bd2:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    6bd6:	edc5 7a00 	vstr	s15, [r5]
				tExpSmooth_setValAndDest(&pitchSmootherS[i], mtof(note));
    6bda:	fe80 0a29 	vmaxnm.f32	s0, s0, s19
    6bde:	fe80 0a49 	vminnm.f32	s0, s0, s18
    6be2:	f005 f9ad 	bl	bf40 <__mtof_veneer>
    6be6:	4650      	mov	r0, sl
    6be8:	f005 f9ee 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
				float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    6bec:	4650      	mov	r0, sl
    6bee:	f005 f94f 	bl	be90 <__tExpSmooth_tick_veneer>
				tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    6bf2:	4648      	mov	r0, r9
    6bf4:	f005 f9ec 	bl	bfd0 <__tSimpleLivingString3_setFreq_veneer>
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    6bf8:	492c      	ldr	r1, [pc, #176]	; (6cac <audioFrameString1+0x20c>)
    6bfa:	482d      	ldr	r0, [pc, #180]	; (6cb0 <audioFrameString1+0x210>)
    6bfc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    6c00:	f891 c000 	ldrb.w	ip, [r1]
    6c04:	ed90 7a02 	vldr	s14, [r0, #8]
    6c08:	482a      	ldr	r0, [pc, #168]	; (6cb4 <audioFrameString1+0x214>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
    6c0a:	4a1f      	ldr	r2, [pc, #124]	; (6c88 <audioFrameString1+0x1e8>)
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    6c0c:	ee71 7a47 	vsub.f32	s15, s2, s14
    6c10:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    6c14:	ed9f 0a18 	vldr	s0, [pc, #96]	; 6c78 <audioFrameString1+0x1d8>
    6c18:	edd0 6a00 	vldr	s13, [r0]
    6c1c:	4826      	ldr	r0, [pc, #152]	; (6cb8 <audioFrameString1+0x218>)
    6c1e:	eee6 7a87 	vfma.f32	s15, s13, s14
    6c22:	edd0 0a00 	vldr	s1, [r0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    6c26:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
    6c2a:	b283      	uxth	r3, r0
    6c2c:	ee08 3a10 	vmov	s16, r3
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    6c30:	ee60 0aa7 	vmul.f32	s1, s1, s15
    6c34:	f005 f908 	bl	be48 <__LEAF_clip_veneer>
    6c38:	4648      	mov	r0, r9
				float amplitz = stringInputs[i] * 0.000015259021897f;
    6c3a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    6c3e:	eef0 0a40 	vmov.f32	s1, s0
    6c42:	ee28 0a28 	vmul.f32	s0, s16, s17
    6c46:	f005 f82b 	bl	bca0 <__tSimpleLivingString3_pluck_veneer>
				currentRandom++;
    6c4a:	4918      	ldr	r1, [pc, #96]	; (6cac <audioFrameString1+0x20c>)
		for (int i = 0; i < numStringsThisBoard; i++)
    6c4c:	4b08      	ldr	r3, [pc, #32]	; (6c70 <audioFrameString1+0x1d0>)
				currentRandom++;
    6c4e:	7808      	ldrb	r0, [r1, #0]
			{
    6c50:	4a0d      	ldr	r2, [pc, #52]	; (6c88 <audioFrameString1+0x1e8>)
				currentRandom++;
    6c52:	3001      	adds	r0, #1
    6c54:	7008      	strb	r0, [r1, #0]
				lsDecay[i] = 1;
    6c56:	2101      	movs	r1, #1
		for (int i = 0; i < numStringsThisBoard; i++)
    6c58:	7818      	ldrb	r0, [r3, #0]
				lsDecay[i] = 1;
    6c5a:	f888 1000 	strb.w	r1, [r8]
			{
    6c5e:	9b01      	ldr	r3, [sp, #4]
    6c60:	e75c      	b.n	6b1c <audioFrameString1+0x7c>
    6c62:	bf00      	nop
    6c64:	e0001000 	.word	0xe0001000
    6c68:	20005771 	.word	0x20005771
    6c6c:	200052e8 	.word	0x200052e8
    6c70:	20000694 	.word	0x20000694
    6c74:	20014224 	.word	0x20014224
    6c78:	00000000 	.word	0x00000000
    6c7c:	42fe0000 	.word	0x42fe0000
    6c80:	37800080 	.word	0x37800080
    6c84:	20005358 	.word	0x20005358
    6c88:	20014204 	.word	0x20014204
    6c8c:	30000000 	.word	0x30000000
    6c90:	4b000000 	.word	0x4b000000
    6c94:	20000684 	.word	0x20000684
    6c98:	20014244 	.word	0x20014244
    6c9c:	200051cc 	.word	0x200051cc
    6ca0:	200052dc 	.word	0x200052dc
    6ca4:	2001421c 	.word	0x2001421c
    6ca8:	200052f4 	.word	0x200052f4
    6cac:	20014454 	.word	0x20014454
    6cb0:	200051e8 	.word	0x200051e8
    6cb4:	20005370 	.word	0x20005370
    6cb8:	20000698 	.word	0x20000698
    6cbc:	2001d054 	.word	0x2001d054
    6cc0:	2001d04c 	.word	0x2001d04c
	...

00006ce0 <audioInitString2>:
};



void __ATTR_ITCMRAM audioInitString2()
{
    6ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (whichStringModelLoaded != String2Loaded)
    6ce4:	f8df 806c 	ldr.w	r8, [pc, #108]	; 6d54 <audioInitString2+0x74>
    6ce8:	f898 3000 	ldrb.w	r3, [r8]
    6cec:	2b02      	cmp	r3, #2
    6cee:	d023      	beq.n	6d38 <audioInitString2+0x58>
	{
		if (whichStringModelLoaded == String1Loaded)
    6cf0:	2b01      	cmp	r3, #1
    6cf2:	d026      	beq.n	6d42 <audioInitString2+0x62>
		{
			audioFreeString1();
		}
		else if (whichStringModelLoaded == SynthLoaded)
    6cf4:	2b04      	cmp	r3, #4
    6cf6:	d021      	beq.n	6d3c <audioInitString2+0x5c>
		{
			audioFreeSynth();
		}
		for (int v = 0; v < numStringsThisBoard; v++)
    6cf8:	4e13      	ldr	r6, [pc, #76]	; (6d48 <audioInitString2+0x68>)
    6cfa:	7833      	ldrb	r3, [r6, #0]
    6cfc:	b1cb      	cbz	r3, 6d32 <audioInitString2+0x52>
    6cfe:	4d13      	ldr	r5, [pc, #76]	; (6d4c <audioInitString2+0x6c>)
    6d00:	2400      	movs	r4, #0
    6d02:	4f13      	ldr	r7, [pc, #76]	; (6d50 <audioInitString2+0x70>)
		{
			 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    6d04:	f8df 9050 	ldr.w	r9, [pc, #80]	; 6d58 <audioInitString2+0x78>
    6d08:	4628      	mov	r0, r5
    6d0a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
    6d0e:	464a      	mov	r2, r9
    6d10:	2101      	movs	r1, #1
    6d12:	f005 f879 	bl	be08 <__tTString_initToPool_veneer>
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    6d16:	6839      	ldr	r1, [r7, #0]
    6d18:	4628      	mov	r0, r5
		for (int v = 0; v < numStringsThisBoard; v++)
    6d1a:	3504      	adds	r5, #4
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    6d1c:	4421      	add	r1, r4
		for (int v = 0; v < numStringsThisBoard; v++)
    6d1e:	3401      	adds	r4, #1
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    6d20:	2903      	cmp	r1, #3
    6d22:	bfd4      	ite	le
    6d24:	2100      	movle	r1, #0
    6d26:	2101      	movgt	r1, #1
    6d28:	f005 f91a 	bl	bf60 <__tTString_setWoundOrUnwound_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    6d2c:	7833      	ldrb	r3, [r6, #0]
    6d2e:	42a3      	cmp	r3, r4
    6d30:	dcea      	bgt.n	6d08 <audioInitString2+0x28>
		}

		whichStringModelLoaded = String2Loaded;
    6d32:	2302      	movs	r3, #2
    6d34:	f888 3000 	strb.w	r3, [r8]
	}
}
    6d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			audioFreeSynth();
    6d3c:	f005 f9b8 	bl	c0b0 <__audioFreeSynth_veneer>
    6d40:	e7da      	b.n	6cf8 <audioInitString2+0x18>
			audioFreeString1();
    6d42:	f7ff fc9d 	bl	6680 <audioFreeString1>
    6d46:	e7d7      	b.n	6cf8 <audioInitString2+0x18>
    6d48:	20000694 	.word	0x20000694
    6d4c:	2001d064 	.word	0x2001d064
    6d50:	200051c4 	.word	0x200051c4
    6d54:	20014261 	.word	0x20014261
    6d58:	200052e0 	.word	0x200052e0
    6d5c:	f3af 8000 	nop.w

00006d60 <audioFreeString2>:


void __ATTR_ITCMRAM audioFreeString2()
{
    6d60:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    6d62:	4e07      	ldr	r6, [pc, #28]	; (6d80 <audioFreeString2+0x20>)
    6d64:	7833      	ldrb	r3, [r6, #0]
    6d66:	b14b      	cbz	r3, 6d7c <audioFreeString2+0x1c>
    6d68:	4d06      	ldr	r5, [pc, #24]	; (6d84 <audioFreeString2+0x24>)
    6d6a:	2400      	movs	r4, #0
	{
		tTString_free(&strings[v]);
    6d6c:	4628      	mov	r0, r5
	for (int v = 0; v < numStringsThisBoard; v++)
    6d6e:	3401      	adds	r4, #1
		tTString_free(&strings[v]);
    6d70:	f005 f9b6 	bl	c0e0 <__tTString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    6d74:	7833      	ldrb	r3, [r6, #0]
    6d76:	3504      	adds	r5, #4
    6d78:	42a3      	cmp	r3, r4
    6d7a:	dcf7      	bgt.n	6d6c <audioFreeString2+0xc>
	}
}
    6d7c:	bd70      	pop	{r4, r5, r6, pc}
    6d7e:	bf00      	nop
    6d80:	20000694 	.word	0x20000694
    6d84:	2001d064 	.word	0x2001d064
    6d88:	f3af 8000 	nop.w
    6d8c:	f3af 8000 	nop.w
    6d90:	f3af 8000 	nop.w
    6d94:	f3af 8000 	nop.w
    6d98:	f3af 8000 	nop.w
    6d9c:	f3af 8000 	nop.w

00006da0 <audioSwitchToString2>:

void __ATTR_ITCMRAM audioSwitchToString2()
{
    6da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (whichStringModelLoaded != String2Loaded)
    6da4:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 6ea4 <audioSwitchToString2+0x104>
{
    6da8:	ed2d 8b02 	vpush	{d8}
	if (whichStringModelLoaded != String2Loaded)
    6dac:	f898 3000 	ldrb.w	r3, [r8]
    6db0:	2b02      	cmp	r3, #2
    6db2:	d023      	beq.n	6dfc <audioSwitchToString2+0x5c>
		if (whichStringModelLoaded == String1Loaded)
    6db4:	2b01      	cmp	r3, #1
    6db6:	d05e      	beq.n	6e76 <audioSwitchToString2+0xd6>
		else if (whichStringModelLoaded == SynthLoaded)
    6db8:	2b04      	cmp	r3, #4
    6dba:	d059      	beq.n	6e70 <audioSwitchToString2+0xd0>
		for (int v = 0; v < numStringsThisBoard; v++)
    6dbc:	4e2f      	ldr	r6, [pc, #188]	; (6e7c <audioSwitchToString2+0xdc>)
    6dbe:	7833      	ldrb	r3, [r6, #0]
    6dc0:	b1cb      	cbz	r3, 6df6 <audioSwitchToString2+0x56>
    6dc2:	4d2f      	ldr	r5, [pc, #188]	; (6e80 <audioSwitchToString2+0xe0>)
    6dc4:	2400      	movs	r4, #0
    6dc6:	4f2f      	ldr	r7, [pc, #188]	; (6e84 <audioSwitchToString2+0xe4>)
			 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    6dc8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 6ea8 <audioSwitchToString2+0x108>
    6dcc:	4628      	mov	r0, r5
    6dce:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
    6dd2:	464a      	mov	r2, r9
    6dd4:	2101      	movs	r1, #1
    6dd6:	f005 f817 	bl	be08 <__tTString_initToPool_veneer>
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    6dda:	6839      	ldr	r1, [r7, #0]
    6ddc:	4628      	mov	r0, r5
		for (int v = 0; v < numStringsThisBoard; v++)
    6dde:	3504      	adds	r5, #4
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    6de0:	4421      	add	r1, r4
		for (int v = 0; v < numStringsThisBoard; v++)
    6de2:	3401      	adds	r4, #1
			 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    6de4:	2903      	cmp	r1, #3
    6de6:	bfd4      	ite	le
    6de8:	2100      	movle	r1, #0
    6dea:	2101      	movgt	r1, #1
    6dec:	f005 f8b8 	bl	bf60 <__tTString_setWoundOrUnwound_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    6df0:	7833      	ldrb	r3, [r6, #0]
    6df2:	429c      	cmp	r4, r3
    6df4:	dbea      	blt.n	6dcc <audioSwitchToString2+0x2c>
		whichStringModelLoaded = String2Loaded;
    6df6:	2302      	movs	r3, #2
    6df8:	f888 3000 	strb.w	r3, [r8]
    6dfc:	4c22      	ldr	r4, [pc, #136]	; (6e88 <audioSwitchToString2+0xe8>)
		for (int v = 0; v < numStringsThisBoard; v++)
    6dfe:	2500      	movs	r5, #0
    6e00:	4f22      	ldr	r7, [pc, #136]	; (6e8c <audioSwitchToString2+0xec>)
		}
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}
		knobFrozen[i] = 1;
    6e02:	f04f 0901 	mov.w	r9, #1
    6e06:	4e22      	ldr	r6, [pc, #136]	; (6e90 <audioSwitchToString2+0xf0>)
    6e08:	f104 0b50 	add.w	fp, r4, #80	; 0x50
    6e0c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 6eac <audioSwitchToString2+0x10c>
    6e10:	f8df a09c 	ldr.w	sl, [pc, #156]	; 6eb0 <audioSwitchToString2+0x110>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    6e14:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 6e94 <audioSwitchToString2+0xf4>
    6e18:	4620      	mov	r0, r4
    6e1a:	eeb0 0a48 	vmov.f32	s0, s16
    6e1e:	f004 ffcf 	bl	bdc0 <__tExpSmooth_setFactor_veneer>
		if (voice == 62)
    6e22:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    6e26:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
    6e28:	3404      	adds	r4, #4
		if (voice == 62)
    6e2a:	2b3e      	cmp	r3, #62	; 0x3e
    6e2c:	d014      	beq.n	6e58 <audioSwitchToString2+0xb8>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    6e2e:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 20; i++)
    6e32:	3704      	adds	r7, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    6e34:	f005 f8c8 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
	for (int i = 0; i < 20; i++)
    6e38:	455c      	cmp	r4, fp
		knobFrozen[i] = 1;
    6e3a:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 20; i++)
    6e3e:	f105 0501 	add.w	r5, r5, #1
    6e42:	d1e9      	bne.n	6e18 <audioSwitchToString2+0x78>
	}
	audioFrameFunction = audioFrameString2;
    6e44:	4914      	ldr	r1, [pc, #80]	; (6e98 <audioSwitchToString2+0xf8>)
	presetReady = 1;
    6e46:	2201      	movs	r2, #1
	audioFrameFunction = audioFrameString2;
    6e48:	4814      	ldr	r0, [pc, #80]	; (6e9c <audioSwitchToString2+0xfc>)
	presetReady = 1;
    6e4a:	4b15      	ldr	r3, [pc, #84]	; (6ea0 <audioSwitchToString2+0x100>)
	audioFrameFunction = audioFrameString2;
    6e4c:	6008      	str	r0, [r1, #0]
	presetReady = 1;
    6e4e:	601a      	str	r2, [r3, #0]
}
    6e50:	ecbd 8b02 	vpop	{d8}
    6e54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    6e58:	ecb7 0a01 	vldmia	r7!, {s0}
	for (int i = 0; i < 20; i++)
    6e5c:	3604      	adds	r6, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    6e5e:	f005 f8b3 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
	for (int i = 0; i < 20; i++)
    6e62:	455c      	cmp	r4, fp
		knobFrozen[i] = 1;
    6e64:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 20; i++)
    6e68:	f105 0501 	add.w	r5, r5, #1
    6e6c:	d1d4      	bne.n	6e18 <audioSwitchToString2+0x78>
    6e6e:	e7e9      	b.n	6e44 <audioSwitchToString2+0xa4>
			audioFreeSynth();
    6e70:	f005 f91e 	bl	c0b0 <__audioFreeSynth_veneer>
    6e74:	e7a2      	b.n	6dbc <audioSwitchToString2+0x1c>
			audioFreeString1();
    6e76:	f7ff fc03 	bl	6680 <audioFreeString1>
    6e7a:	e79f      	b.n	6dbc <audioSwitchToString2+0x1c>
    6e7c:	20000694 	.word	0x20000694
    6e80:	2001d064 	.word	0x2001d064
    6e84:	200051c4 	.word	0x200051c4
    6e88:	20005238 	.word	0x20005238
    6e8c:	200006e0 	.word	0x200006e0
    6e90:	20018678 	.word	0x20018678
    6e94:	3a83126f 	.word	0x3a83126f
    6e98:	2000118c 	.word	0x2000118c
    6e9c:	00007681 	.word	0x00007681
    6ea0:	2000534c 	.word	0x2000534c
    6ea4:	20014261 	.word	0x20014261
    6ea8:	200052e0 	.word	0x200052e0
    6eac:	20014250 	.word	0x20014250
    6eb0:	200051d4 	.word	0x200051d4
    6eb4:	f3af 8000 	nop.w
    6eb8:	f3af 8000 	nop.w
    6ebc:	f3af 8000 	nop.w

00006ec0 <audioTickString2>:
}

uint32_t thisFrameCount = 0;

float __ATTR_ITCMRAM audioTickString2(void)
{
    6ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float theNote[NUM_STRINGS_PER_BOARD];

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    6ec4:	48e5      	ldr	r0, [pc, #916]	; (725c <audioTickString2+0x39c>)
    6ec6:	4ee6      	ldr	r6, [pc, #920]	; (7260 <audioTickString2+0x3a0>)
    6ec8:	4de6      	ldr	r5, [pc, #920]	; (7264 <audioTickString2+0x3a4>)
    6eca:	4634      	mov	r4, r6
    6ecc:	f106 0750 	add.w	r7, r6, #80	; 0x50
{
    6ed0:	ed2d 8b10 	vpush	{d8-d15}
    6ed4:	b085      	sub	sp, #20
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    6ed6:	f004 ffdb 	bl	be90 <__tExpSmooth_tick_veneer>
    6eda:	eeb0 9a40 	vmov.f32	s18, s0

	for (int i = 0; i < 20; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    6ede:	4628      	mov	r0, r5
	for (int i = 0; i < 20; i++)
    6ee0:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    6ee2:	f004 ffd5 	bl	be90 <__tExpSmooth_tick_veneer>
    6ee6:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 20; i++)
    6eea:	42a7      	cmp	r7, r4
    6eec:	d1f7      	bne.n	6ede <audioTickString2+0x1e>
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
    6eee:	f8df 83bc 	ldr.w	r8, [pc, #956]	; 72ac <audioTickString2+0x3ec>
    6ef2:	f8d8 3000 	ldr.w	r3, [r8]
    6ef6:	2b00      	cmp	r3, #0
    6ef8:	f040 827f 	bne.w	73fa <audioTickString2+0x53a>
	{
		for (int i = 0; i < numStringsThisBoard; i++)
    6efc:	4bda      	ldr	r3, [pc, #872]	; (7268 <audioTickString2+0x3a8>)
			}
			previousStringInputs[i] = stringInputs[i];
		}
		newPluck = 0;
	}
	for (int i = 0; i < numStringsThisBoard; i++)
    6efe:	ed9f aadb 	vldr	s20, [pc, #876]	; 726c <audioTickString2+0x3ac>
		for (int i = 0; i < numStringsThisBoard; i++)
    6f02:	781a      	ldrb	r2, [r3, #0]
    6f04:	9302      	str	r3, [sp, #8]
	for (int i = 0; i < numStringsThisBoard; i++)
    6f06:	2a00      	cmp	r2, #0
    6f08:	f000 82cd 	beq.w	74a6 <audioTickString2+0x5e6>
		{

			float thisString = (firstString + i);
			float thisStringProportion = thisString * invNumStrings;
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    6f0c:	eef0 ca00 	vmov.f32	s25, #0	; 0x40000000  2.0
    6f10:	4bd7      	ldr	r3, [pc, #860]	; (7270 <audioTickString2+0x3b0>)
    6f12:	eef0 9a4a 	vmov.f32	s19, s20
    6f16:	f8df 8398 	ldr.w	r8, [pc, #920]	; 72b0 <audioTickString2+0x3f0>
    6f1a:	f8df 9398 	ldr.w	r9, [pc, #920]	; 72b4 <audioTickString2+0x3f4>
	for (int i = 0; i < numStringsThisBoard; i++)
    6f1e:	2500      	movs	r5, #0
    6f20:	4cd4      	ldr	r4, [pc, #848]	; (7274 <audioTickString2+0x3b4>)
    6f22:	ed9f cad5 	vldr	s24, [pc, #852]	; 7278 <audioTickString2+0x3b8>
    6f26:	4fd5      	ldr	r7, [pc, #852]	; (727c <audioTickString2+0x3bc>)
    6f28:	f8df b38c 	ldr.w	fp, [pc, #908]	; 72b8 <audioTickString2+0x3f8>
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    6f2c:	eddf bad4 	vldr	s23, [pc, #848]	; 7280 <audioTickString2+0x3c0>
    6f30:	ed9f bad4 	vldr	s22, [pc, #848]	; 7284 <audioTickString2+0x3c4>
    6f34:	eddf aad4 	vldr	s21, [pc, #848]	; 7288 <audioTickString2+0x3c8>
    6f38:	9303      	str	r3, [sp, #12]
		theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    6f3a:	9b03      	ldr	r3, [sp, #12]
    6f3c:	46a2      	mov	sl, r4
    6f3e:	ecf8 7a01 	vldmia	r8!, {s15}
    6f42:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6f46:	edd3 8a00 	vldr	s17, [r3]
    6f4a:	ee78 8aa7 	vadd.f32	s17, s17, s15
    6f4e:	fec8 8acc 	vminnm.f32	s17, s17, s24
    6f52:	fec8 8aa9 	vmaxnm.f32	s17, s17, s19
		float finalFreq = mtofTableLookup(theNote[i]);
    6f56:	eeb0 0a68 	vmov.f32	s0, s17
    6f5a:	f004 ffed 	bl	bf38 <__mtofTableLookup_veneer>
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    6f5e:	edd4 7a00 	vldr	s15, [r4]
		float finalFreq = mtofTableLookup(theNote[i]);
    6f62:	eeb0 da40 	vmov.f32	s26, s0
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    6f66:	ee38 0ae7 	vsub.f32	s0, s17, s15
    6f6a:	f004 ffe5 	bl	bf38 <__mtofTableLookup_veneer>
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    6f6e:	eeb0 2a6b 	vmov.f32	s4, s23
    6f72:	eef0 1a4b 	vmov.f32	s3, s22
    6f76:	eddf 0ac5 	vldr	s1, [pc, #788]	; 728c <audioTickString2+0x3cc>
    6f7a:	eeb0 1a6a 	vmov.f32	s2, s21
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    6f7e:	eeb0 8a40 	vmov.f32	s16, s0
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    6f82:	f004 ffb5 	bl	bef0 <__LEAF_map_veneer>
    6f86:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    6f8a:	4648      	mov	r0, r9
    6f8c:	ee17 1a90 	vmov	r1, s15
    6f90:	f005 f87a 	bl	c088 <__tTString_setWindingsPerInch_veneer>
		if (thisFrameCount == 0)
    6f94:	6839      	ldr	r1, [r7, #0]
    6f96:	2900      	cmp	r1, #0
    6f98:	f000 81e3 	beq.w	7362 <audioTickString2+0x4a2>




		//tTString_setPickupAmount(&strings[i], knobScaled[7]);
		tTString_setBarPosition(&strings[i],barInMIDI[i]);
    6f9c:	ed94 0a00 	vldr	s0, [r4]
    6fa0:	4648      	mov	r0, r9
    6fa2:	f004 fee1 	bl	bd68 <__tTString_setBarPosition_veneer>
		//tTString_setBarDrive(&strings[i],knobScaled[4]);
		tTString_setOpenStringFrequency(&strings[i], openStringFreq);
    6fa6:	eeb0 0a48 	vmov.f32	s0, s16
    6faa:	4648      	mov	r0, r9

		tTString_setFreq(&strings[i], finalFreq);



		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    6fac:	eef8 8a00 	vmov.f32	s17, #128	; 0xc0000000 -2.0
		tTString_setOpenStringFrequency(&strings[i], openStringFreq);
    6fb0:	f004 feaa 	bl	bd08 <__tTString_setOpenStringFrequency_veneer>
		tTString_setFeedbackStrength(&strings[i],knobScaled[6]);
    6fb4:	ed96 0a06 	vldr	s0, [r6, #24]
    6fb8:	4648      	mov	r0, r9
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    6fba:	eeb1 ea00 	vmov.f32	s28, #16	; 0x40800000  4.0
		tTString_setFeedbackStrength(&strings[i],knobScaled[6]);
    6fbe:	f004 fecf 	bl	bd60 <__tTString_setFeedbackStrength_veneer>
		tTString_setFeedbackReactionSpeed(&strings[i],knobScaled[7]);
    6fc2:	ed96 0a07 	vldr	s0, [r6, #28]
    6fc6:	4648      	mov	r0, r9
    6fc8:	f004 ff4e 	bl	be68 <__tTString_setFeedbackReactionSpeed_veneer>
		tTString_setRippleDepth(&strings[i],knobScaled[9]);
    6fcc:	ed96 0a09 	vldr	s0, [r6, #36]	; 0x24
    6fd0:	4648      	mov	r0, r9
    6fd2:	f005 f815 	bl	c000 <__tTString_setRippleDepth_veneer>
		tTString_setFreq(&strings[i], finalFreq);
    6fd6:	eeb0 0a4d 	vmov.f32	s0, s26
    6fda:	4648      	mov	r0, r9
    6fdc:	f004 fea0 	bl	bd20 <__tTString_setFreq_veneer>
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    6fe0:	eef0 0a68 	vmov.f32	s1, s17
    6fe4:	edd6 7a00 	vldr	s15, [r6]
    6fe8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    6fec:	eee7 0a8e 	vfma.f32	s1, s15, s28
    6ff0:	f005 f812 	bl	c018 <__fastPowf_veneer>
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    6ff4:	eef0 0a68 	vmov.f32	s1, s17
    6ff8:	edd6 7a01 	vldr	s15, [r6, #4]
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    6ffc:	eef0 da40 	vmov.f32	s27, s0
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    7000:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    7004:	eee7 0a8e 	vfma.f32	s1, s15, s28
    7008:	f005 f806 	bl	c018 <__fastPowf_veneer>
		float alpha = 0.0f;
		float oneMinusAlpha = 1.0f;
		for (int i = 0; i < 9; i++)
		{
			//find the closest open string frequency and interpolate
			if (stringParams[i][0][0] > openStringFreq)
    700c:	eddb 0a00 	vldr	s1, [fp]
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    7010:	eeb0 da40 	vmov.f32	s26, s0
			if (stringParams[i][0][0] > openStringFreq)
    7014:	eeb4 8ae0 	vcmpe.f32	s16, s1
    7018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    701c:	f100 8178 	bmi.w	7310 <audioTickString2+0x450>
		float oneMinusAlpha = 1.0f;
    7020:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
			{
				if (stringParams[i+1][0][0] < openStringFreq)
    7024:	ed9b 7a09 	vldr	s14, [fp, #36]	; 0x24
		float alpha = 0.0f;
    7028:	eef0 8a69 	vmov.f32	s17, s19
			if (stringParams[i][0][0] > openStringFreq)
    702c:	eeb4 8ac7 	vcmpe.f32	s16, s14
    7030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7034:	f100 8160 	bmi.w	72f8 <audioTickString2+0x438>
				if (stringParams[i+1][0][0] < openStringFreq)
    7038:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
    703c:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
    7040:	2300      	movs	r3, #0
			if (stringParams[i][0][0] > openStringFreq)
    7042:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    7046:	ed9b 7a1b 	vldr	s14, [fp, #108]	; 0x6c
			if (stringParams[i][0][0] > openStringFreq)
    704a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    704e:	d505      	bpl.n	705c <audioTickString2+0x19c>
				if (stringParams[i+1][0][0] < openStringFreq)
    7050:	eeb4 8ac7 	vcmpe.f32	s16, s14
    7054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7058:	f300 8256 	bgt.w	7508 <audioTickString2+0x648>
			if (stringParams[i][0][0] > openStringFreq)
    705c:	eeb4 8ac7 	vcmpe.f32	s16, s14
				if (stringParams[i+1][0][0] < openStringFreq)
    7060:	eddb 0a24 	vldr	s1, [fp, #144]	; 0x90
			if (stringParams[i][0][0] > openStringFreq)
    7064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7068:	d505      	bpl.n	7076 <audioTickString2+0x1b6>
				if (stringParams[i+1][0][0] < openStringFreq)
    706a:	eeb4 8ae0 	vcmpe.f32	s16, s1
    706e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7072:	f300 8235 	bgt.w	74e0 <audioTickString2+0x620>
			if (stringParams[i][0][0] > openStringFreq)
    7076:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    707a:	ed9b 7a2d 	vldr	s14, [fp, #180]	; 0xb4
			if (stringParams[i][0][0] > openStringFreq)
    707e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7082:	d505      	bpl.n	7090 <audioTickString2+0x1d0>
				if (stringParams[i+1][0][0] < openStringFreq)
    7084:	eeb4 8ac7 	vcmpe.f32	s16, s14
    7088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    708c:	f300 82b9 	bgt.w	7602 <audioTickString2+0x742>
			if (stringParams[i][0][0] > openStringFreq)
    7090:	eeb4 8ac7 	vcmpe.f32	s16, s14
				if (stringParams[i+1][0][0] < openStringFreq)
    7094:	eddb 0a36 	vldr	s1, [fp, #216]	; 0xd8
			if (stringParams[i][0][0] > openStringFreq)
    7098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    709c:	d505      	bpl.n	70aa <audioTickString2+0x1ea>
				if (stringParams[i+1][0][0] < openStringFreq)
    709e:	eeb4 8ae0 	vcmpe.f32	s16, s1
    70a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70a6:	f300 8298 	bgt.w	75da <audioTickString2+0x71a>
			if (stringParams[i][0][0] > openStringFreq)
    70aa:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    70ae:	ed9b 7a3f 	vldr	s14, [fp, #252]	; 0xfc
			if (stringParams[i][0][0] > openStringFreq)
    70b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70b6:	d505      	bpl.n	70c4 <audioTickString2+0x204>
				if (stringParams[i+1][0][0] < openStringFreq)
    70b8:	eeb4 8ac7 	vcmpe.f32	s16, s14
    70bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70c0:	f300 8279 	bgt.w	75b6 <audioTickString2+0x6f6>
			if (stringParams[i][0][0] > openStringFreq)
    70c4:	eeb4 8ac7 	vcmpe.f32	s16, s14
				if (stringParams[i+1][0][0] < openStringFreq)
    70c8:	eddb 0a48 	vldr	s1, [fp, #288]	; 0x120
			if (stringParams[i][0][0] > openStringFreq)
    70cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70d0:	d505      	bpl.n	70de <audioTickString2+0x21e>
				if (stringParams[i+1][0][0] < openStringFreq)
    70d2:	eeb4 8ae0 	vcmpe.f32	s16, s1
    70d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70da:	f300 8258 	bgt.w	758e <audioTickString2+0x6ce>
			if (stringParams[i][0][0] > openStringFreq)
    70de:	eeb4 8ae0 	vcmpe.f32	s16, s1
    70e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70e6:	d50a      	bpl.n	70fe <audioTickString2+0x23e>
				if (stringParams[i+1][0][0] < openStringFreq)
    70e8:	ed9b 1a51 	vldr	s2, [fp, #324]	; 0x144
    70ec:	eeb4 8ac1 	vcmpe.f32	s16, s2
    70f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70f4:	f300 823d 	bgt.w	7572 <audioTickString2+0x6b2>
    70f8:	eef2 ea04 	vmov.f32	s29, #36	; 0x41200000  10.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
					oneMinusAlpha = 1.0f - alpha;
				}
				else if (i == 8)
				{
					which = 9;
    70fc:	2309      	movs	r3, #9
				}
			}
		}

		float barHeight = barInMIDI[i] / 12.0f;
    70fe:	edda 7a00 	vldr	s15, [sl]

		uint32_t barHeightInt = (uint32_t)barHeight;
		float barHeightAlpha = barHeight - barHeightInt;
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    7102:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
		float barHeight = barInMIDI[i] / 12.0f;
    7106:	ed9f 7a62 	vldr	s14, [pc, #392]	; 7290 <audioTickString2+0x3d0>
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    710a:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
    710e:	9301      	str	r3, [sp, #4]
    7110:	eeb0 0a69 	vmov.f32	s0, s19
		float barHeight = barInMIDI[i] / 12.0f;
    7114:	ee67 7a87 	vmul.f32	s15, s15, s14
		uint32_t barHeightInt = (uint32_t)barHeight;
    7118:	3404      	adds	r4, #4
    711a:	eebc eae7 	vcvt.u32.f32	s28, s15
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    711e:	ee7f fae7 	vsub.f32	s31, s31, s15
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    7122:	ee1e 3a10 	vmov	r3, s28
		float barHeightAlpha = barHeight - barHeightInt;
    7126:	eeb8 7a4e 	vcvt.f32.u32	s14, s28
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    712a:	3301      	adds	r3, #1
		float barHeightAlpha = barHeight - barHeightInt;
    712c:	ee37 8ac7 	vsub.f32	s16, s15, s14
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    7130:	ee00 3a90 	vmov	s1, r3
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    7134:	ee7f fa87 	vadd.f32	s31, s31, s14
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    7138:	eef8 0a60 	vcvt.f32.u32	s1, s1
    713c:	f004 fe84 	bl	be48 <__LEAF_clip_veneer>
    7140:	eef0 7a40 	vmov.f32	s15, s0

		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    7144:	eeb2 1a02 	vmov.f32	s2, #34	; 0x41100000  9.0
    7148:	eef0 0a6e 	vmov.f32	s1, s29
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    714c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    7150:	eeb0 0a69 	vmov.f32	s0, s19
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    7154:	ee17 aa90 	vmov	sl, s15
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    7158:	f004 fe76 	bl	be48 <__LEAF_clip_veneer>
			float decayRatio2 = stringParams[0][barHeightIntPlusOne][2] / stringParams[0][barHeightIntPlusOne][0];

			decayTime = (decayRatio1 * barHeightOneMinusAlpha + decayRatio2 * barHeightAlpha) * openStringFreq;
		}

		if (which == 9)
    715c:	9b01      	ldr	r3, [sp, #4]
    715e:	2b09      	cmp	r3, #9
    7160:	f000 80e3 	beq.w	732a <audioTickString2+0x46a>
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    7164:	eefc 7ac0 	vcvt.u32.f32	s15, s0
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
		}

		else
		{
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7168:	ee1e 2a10 	vmov	r2, s28
    716c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
	for (int i = 0; i < numStringsThisBoard; i++)
    7170:	3501      	adds	r5, #1
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7172:	eb02 0142 	add.w	r1, r2, r2, lsl #1
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    7176:	ee17 2a90 	vmov	r2, s15
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    717a:	eb0a 00ca 	add.w	r0, sl, sl, lsl #3
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    717e:	009b      	lsls	r3, r3, #2
    7180:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7184:	0080      	lsls	r0, r0, #2
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7186:	0092      	lsls	r2, r2, #2
    7188:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    718c:	445a      	add	r2, fp
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    718e:	ed92 7a02 	vldr	s14, [r2, #8]
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    7192:	edd2 7a01 	vldr	s15, [r2, #4]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    7196:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    719a:	ee28 7a87 	vmul.f32	s14, s17, s14
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    719e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    71a2:	ee68 7aa7 	vmul.f32	s15, s17, s15
    71a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    71aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    71ae:	445a      	add	r2, fp
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    71b0:	445b      	add	r3, fp
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    71b2:	4459      	add	r1, fp
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    71b4:	ed92 6a02 	vldr	s12, [r2, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    71b8:	edd2 6a01 	vldr	s13, [r2, #4]
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    71bc:	ed91 0a02 	vldr	s0, [r1, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    71c0:	edd1 5a01 	vldr	s11, [r1, #4]
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    71c4:	ee28 0a80 	vmul.f32	s0, s17, s0
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    71c8:	edd3 4a02 	vldr	s9, [r3, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    71cc:	ee68 8aa5 	vmul.f32	s17, s17, s11
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    71d0:	ed93 5a01 	vldr	s10, [r3, #4]
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    71d4:	eea4 7a8f 	vfma.f32	s14, s9, s30
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    71d8:	eea6 0a0f 	vfma.f32	s0, s12, s30
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    71dc:	eee6 8a8f 	vfma.f32	s17, s13, s30
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    71e0:	eee5 7a0f 	vfma.f32	s15, s10, s30
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    71e4:	ee28 0a00 	vmul.f32	s0, s16, s0
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    71e8:	ee28 8a28 	vmul.f32	s16, s16, s17
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    71ec:	eeaf 0a87 	vfma.f32	s0, s31, s14
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    71f0:	eeaf 8aa7 	vfma.f32	s16, s31, s15
		}


		tTString_setDecayInSeconds(&strings[i],decayTime * decayScaling);
    71f4:	4648      	mov	r0, r9
    71f6:	ee2d 0a80 	vmul.f32	s0, s27, s0
    71fa:	f004 fed5 	bl	bfa8 <__tTString_setDecayInSeconds_veneer>
		tTString_setFilterFreqDirectly(&strings[i], filterFreq * filterScaling);
    71fe:	4648      	mov	r0, r9
    7200:	ee2d 0a08 	vmul.f32	s0, s26, s16
    7204:	f004 ffc8 	bl	c198 <__tTString_setFilterFreqDirectly_veneer>

		temp += tTString_tick(&strings[i]) * 0.5f;
    7208:	4648      	mov	r0, r9
    720a:	f004 fe61 	bl	bed0 <__tTString_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    720e:	9b02      	ldr	r3, [sp, #8]
		temp += tTString_tick(&strings[i]) * 0.5f;
    7210:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	for (int i = 0; i < numStringsThisBoard; i++)
    7214:	f109 0904 	add.w	r9, r9, #4
    7218:	781b      	ldrb	r3, [r3, #0]
    721a:	42ab      	cmp	r3, r5
		temp += tTString_tick(&strings[i]) * 0.5f;
    721c:	eea0 aa27 	vfma.f32	s20, s0, s15
	for (int i = 0; i < numStringsThisBoard; i++)
    7220:	f73f ae8b 	bgt.w	6f3a <audioTickString2+0x7a>
	}
	thisFrameCount = (thisFrameCount + 1) & 63;
    7224:	eddf 7a1b 	vldr	s15, [pc, #108]	; 7294 <audioTickString2+0x3d4>
	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7228:	ee29 7a09 	vmul.f32	s14, s18, s18
    722c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 7298 <audioTickString2+0x3d8>
    7230:	eddf 5a1a 	vldr	s11, [pc, #104]	; 729c <audioTickString2+0x3dc>
    7234:	eea9 0a27 	vfma.f32	s0, s18, s15
    7238:	ed9f 6a19 	vldr	s12, [pc, #100]	; 72a0 <audioTickString2+0x3e0>
    723c:	ee67 7a09 	vmul.f32	s15, s14, s18
    7240:	eddf 6a18 	vldr	s13, [pc, #96]	; 72a4 <audioTickString2+0x3e4>

	temp *= outVol * masterVolFromBrain;
    7244:	4a18      	ldr	r2, [pc, #96]	; (72a8 <audioTickString2+0x3e8>)
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7246:	ee29 9a26 	vmul.f32	s18, s18, s13
	thisFrameCount = (thisFrameCount + 1) & 63;
    724a:	683b      	ldr	r3, [r7, #0]
	temp *= outVol * masterVolFromBrain;
    724c:	edd2 6a00 	vldr	s13, [r2]
	thisFrameCount = (thisFrameCount + 1) & 63;
    7250:	3301      	adds	r3, #1
    7252:	eea7 0aa5 	vfma.f32	s0, s15, s11
    7256:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    725a:	e031      	b.n	72c0 <audioTickString2+0x400>
    725c:	2001425c 	.word	0x2001425c
    7260:	200051e8 	.word	0x200051e8
    7264:	20005238 	.word	0x20005238
    7268:	20000694 	.word	0x20000694
    726c:	00000000 	.word	0x00000000
    7270:	2001421c 	.word	0x2001421c
    7274:	20001190 	.word	0x20001190
    7278:	42fe0000 	.word	0x42fe0000
    727c:	2001d06c 	.word	0x2001d06c
    7280:	42f00000 	.word	0x42f00000
    7284:	428c0000 	.word	0x428c0000
    7288:	43770000 	.word	0x43770000
    728c:	42f60000 	.word	0x42f60000
    7290:	3daaaaab 	.word	0x3daaaaab
    7294:	3ef1ac0b 	.word	0x3ef1ac0b
    7298:	3bdc4213 	.word	0x3bdc4213
    729c:	40caa285 	.word	0x40caa285
    72a0:	4022be0a 	.word	0x4022be0a
    72a4:	40516313 	.word	0x40516313
    72a8:	2000068c 	.word	0x2000068c
    72ac:	200052e8 	.word	0x200052e8
    72b0:	20014224 	.word	0x20014224
    72b4:	2001d064 	.word	0x2001d064
    72b8:	20000730 	.word	0x20000730
    72bc:	3f7ae148 	.word	0x3f7ae148
    72c0:	603b      	str	r3, [r7, #0]
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    72c2:	eea7 0a46 	vfms.f32	s0, s14, s12
    72c6:	eea7 0ac9 	vfms.f32	s0, s15, s18
	temp *= outVol * masterVolFromBrain;
    72ca:	ee20 0a26 	vmul.f32	s0, s0, s13
	temp = tanhf(temp);
    72ce:	ee20 0a0a 	vmul.f32	s0, s0, s20
    72d2:	f004 fccd 	bl	bc70 <__tanhf_veneer>
    72d6:	eef0 0a40 	vmov.f32	s1, s0
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    72da:	ed5f 7a08 	vldr	s15, [pc, #-32]	; 72bc <audioTickString2+0x3fc>
    72de:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    72e2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    72e6:	ee60 0aa7 	vmul.f32	s1, s1, s15
}
    72ea:	b005      	add	sp, #20
    72ec:	ecbd 8b10 	vpop	{d8-d15}
    72f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    72f4:	f004 bda8 	b.w	be48 <__LEAF_clip_veneer>
				if (stringParams[i+1][0][0] < openStringFreq)
    72f8:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
    72fc:	eeb4 8ae0 	vcmpe.f32	s16, s1
    7300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7304:	f300 8121 	bgt.w	754a <audioTickString2+0x68a>
    7308:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
    730c:	2300      	movs	r3, #0
    730e:	e698      	b.n	7042 <audioTickString2+0x182>
    7310:	ed9b 7a09 	vldr	s14, [fp, #36]	; 0x24
    7314:	eeb4 8ac7 	vcmpe.f32	s16, s14
    7318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    731c:	f300 8106 	bgt.w	752c <audioTickString2+0x66c>
		float oneMinusAlpha = 1.0f;
    7320:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
		float alpha = 0.0f;
    7324:	eef0 8a69 	vmov.f32	s17, s19
    7328:	e680      	b.n	702c <audioTickString2+0x16c>
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    732a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
			float freq1 = stringParams[9][barHeightInt][1];
    732e:	ee1e 3a10 	vmov	r3, s28
	for (int i = 0; i < numStringsThisBoard; i++)
    7332:	3501      	adds	r5, #1
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    7334:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
			float freq1 = stringParams[9][barHeightInt][1];
    7338:	eb03 0143 	add.w	r1, r3, r3, lsl #1
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    733c:	ed9a 0a53 	vldr	s0, [sl, #332]	; 0x14c
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    7340:	edda 7a52 	vldr	s15, [sl, #328]	; 0x148
			float freq1 = stringParams[9][barHeightInt][1];
    7344:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    7348:	ee28 0a00 	vmul.f32	s0, s16, s0
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    734c:	ee28 8a27 	vmul.f32	s16, s16, s15
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    7350:	edd1 6a53 	vldr	s13, [r1, #332]	; 0x14c
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    7354:	ed91 7a52 	vldr	s14, [r1, #328]	; 0x148
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    7358:	eeaf 0aa6 	vfma.f32	s0, s31, s13
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    735c:	eeaf 8a87 	vfma.f32	s16, s31, s14
		tTString_setDecayInSeconds(&strings[i],decayTime * decayScaling);
    7360:	e748      	b.n	71f4 <audioTickString2+0x334>
			float thisString = (firstString + i);
    7362:	4bb4      	ldr	r3, [pc, #720]	; (7634 <audioTickString2+0x774>)
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    7364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7368:	edd6 5a0b 	vldr	s11, [r6, #44]	; 0x2c
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    736c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
			float thisString = (firstString + i);
    7370:	681b      	ldr	r3, [r3, #0]
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    7372:	eeb0 0a68 	vmov.f32	s0, s17
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    7376:	ed96 6a0a 	vldr	s12, [r6, #40]	; 0x28
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    737a:	eef0 8a6c 	vmov.f32	s17, s25
			float thisString = (firstString + i);
    737e:	442b      	add	r3, r5
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    7380:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
    7384:	ed9f 2aac 	vldr	s4, [pc, #688]	; 7638 <audioTickString2+0x778>
			float thisString = (firstString + i);
    7388:	ee07 3a90 	vmov	s15, r3
			float thisStringProportion = thisString * invNumStrings;
    738c:	4bab      	ldr	r3, [pc, #684]	; (763c <audioTickString2+0x77c>)
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    738e:	eddf 1aac 	vldr	s3, [pc, #688]	; 7640 <audioTickString2+0x780>
			float thisString = (firstString + i);
    7392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float thisStringProportion = thisString * invNumStrings;
    7396:	ed93 5a00 	vldr	s10, [r3]
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    739a:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 7644 <audioTickString2+0x784>
    739e:	9101      	str	r1, [sp, #4]
			float thisStringProportion = thisString * invNumStrings;
    73a0:	ee67 7a85 	vmul.f32	s15, s15, s10
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    73a4:	ee37 7a67 	vsub.f32	s14, s14, s15
    73a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
    73ac:	eee6 7a07 	vfma.f32	s15, s12, s14
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    73b0:	eee7 8aa6 	vfma.f32	s17, s15, s13
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    73b4:	f004 fd9c 	bl	bef0 <__LEAF_map_veneer>
			if (knobScaled[5] > 0.05f)
    73b8:	edd6 0a05 	vldr	s1, [r6, #20]
    73bc:	eddf 7aa2 	vldr	s15, [pc, #648]	; 7648 <audioTickString2+0x788>
    73c0:	9901      	ldr	r1, [sp, #4]
    73c2:	eef4 0ae7 	vcmpe.f32	s1, s15
    73c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73ca:	dd6e      	ble.n	74aa <audioTickString2+0x5ea>
				inHarm = LEAF_clip(0.00000001f, inHarm * knobScaled[5], 0.01f);
    73cc:	ed9f 1a9f 	vldr	s2, [pc, #636]	; 764c <audioTickString2+0x78c>
    73d0:	ee60 0a80 	vmul.f32	s1, s1, s0
    73d4:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 7650 <audioTickString2+0x790>
    73d8:	f004 fd36 	bl	be48 <__LEAF_clip_veneer>
				tTString_setHarmonicity(&strings[i], inHarm, finalFreq);
    73dc:	eef0 0a4d 	vmov.f32	s1, s26
    73e0:	4648      	mov	r0, r9
    73e2:	f004 fdb1 	bl	bf48 <__tTString_setHarmonicity_veneer>
				tTString_setInharmonic(&strings[i], 1);
    73e6:	4648      	mov	r0, r9
    73e8:	2101      	movs	r1, #1
    73ea:	f004 fd4d 	bl	be88 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],harmonic);
    73ee:	eeb0 0a68 	vmov.f32	s0, s17
    73f2:	4648      	mov	r0, r9
    73f4:	f004 fec0 	bl	c178 <__tTString_setHarmonic_veneer>
    73f8:	e5d0      	b.n	6f9c <audioTickString2+0xdc>
		for (int i = 0; i < numStringsThisBoard; i++)
    73fa:	4b96      	ldr	r3, [pc, #600]	; (7654 <audioTickString2+0x794>)
    73fc:	781a      	ldrb	r2, [r3, #0]
    73fe:	9302      	str	r3, [sp, #8]
    7400:	2a00      	cmp	r2, #0
    7402:	f000 8110 	beq.w	7626 <audioTickString2+0x766>
    7406:	f8df a274 	ldr.w	sl, [pc, #628]	; 767c <audioTickString2+0x7bc>
    740a:	2400      	movs	r4, #0
				float finalFreq = mtofTableLookup(theNote[i]);
    740c:	eddf 9a92 	vldr	s19, [pc, #584]	; 7658 <audioTickString2+0x798>
    7410:	eddf 8a92 	vldr	s17, [pc, #584]	; 765c <audioTickString2+0x79c>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    7414:	ed9f 8a92 	vldr	s16, [pc, #584]	; 7660 <audioTickString2+0x7a0>
    7418:	4d92      	ldr	r5, [pc, #584]	; (7664 <audioTickString2+0x7a4>)
    741a:	4f93      	ldr	r7, [pc, #588]	; (7668 <audioTickString2+0x7a8>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    741c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    7420:	b29b      	uxth	r3, r3
    7422:	2b00      	cmp	r3, #0
    7424:	d14c      	bne.n	74c0 <audioTickString2+0x600>
    7426:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    742a:	b29b      	uxth	r3, r3
    742c:	2b00      	cmp	r3, #0
    742e:	d047      	beq.n	74c0 <audioTickString2+0x600>
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    7430:	4a8e      	ldr	r2, [pc, #568]	; (766c <audioTickString2+0x7ac>)
				stringOctave[i] = octave;
    7432:	4b8f      	ldr	r3, [pc, #572]	; (7670 <audioTickString2+0x7b0>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    7434:	eb02 0284 	add.w	r2, r2, r4, lsl #2
				stringOctave[i] = octave;
    7438:	edd3 7a00 	vldr	s15, [r3]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    743c:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    7440:	ed92 0a00 	vldr	s0, [r2]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    7444:	fa1f f983 	uxth.w	r9, r3
				stringOctave[i] = octave;
    7448:	4b8a      	ldr	r3, [pc, #552]	; (7674 <audioTickString2+0x7b4>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    744a:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    744e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
				float finalFreq = mtofTableLookup(theNote[i]);
    7452:	fe80 0a69 	vminnm.f32	s0, s0, s19
				stringOctave[i] = octave;
    7456:	edc3 7a00 	vstr	s15, [r3]
				float finalFreq = mtofTableLookup(theNote[i]);
    745a:	fe80 0a28 	vmaxnm.f32	s0, s0, s17
    745e:	f004 fd6b 	bl	bf38 <__mtofTableLookup_veneer>
				tTString_setFreq(&strings[i], finalFreq);
    7462:	4650      	mov	r0, sl
    7464:	f004 fc5c 	bl	bd20 <__tTString_setFreq_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    7468:	ee07 9a90 	vmov	s15, r9
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    746c:	ed96 0a02 	vldr	s0, [r6, #8]
    7470:	4650      	mov	r0, sl
				float amplitz = stringInputs[i] * 0.000015259021897f;
    7472:	eef8 0ae7 	vcvt.f32.s32	s1, s15
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    7476:	ee60 0a88 	vmul.f32	s1, s1, s16
    747a:	f004 fda1 	bl	bfc0 <__tTString_pluck_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    747e:	9b02      	ldr	r3, [sp, #8]
    7480:	781a      	ldrb	r2, [r3, #0]
			previousStringInputs[i] = stringInputs[i];
    7482:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    7486:	f10a 0a04 	add.w	sl, sl, #4
			previousStringInputs[i] = stringInputs[i];
    748a:	b29b      	uxth	r3, r3
    748c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    7490:	3401      	adds	r4, #1
    7492:	42a2      	cmp	r2, r4
    7494:	dcc2      	bgt.n	741c <audioTickString2+0x55c>
		newPluck = 0;
    7496:	2300      	movs	r3, #0
	for (int i = 0; i < numStringsThisBoard; i++)
    7498:	ed9f aa70 	vldr	s20, [pc, #448]	; 765c <audioTickString2+0x79c>
		newPluck = 0;
    749c:	f8c8 3000 	str.w	r3, [r8]
	for (int i = 0; i < numStringsThisBoard; i++)
    74a0:	2a00      	cmp	r2, #0
    74a2:	f47f ad33 	bne.w	6f0c <audioTickString2+0x4c>
    74a6:	4f74      	ldr	r7, [pc, #464]	; (7678 <audioTickString2+0x7b8>)
    74a8:	e6bc      	b.n	7224 <audioTickString2+0x364>
				tTString_setInharmonic(&strings[i], 0);
    74aa:	4648      	mov	r0, r9
    74ac:	f004 fcec 	bl	be88 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],(uint32_t)harmonic);
    74b0:	eebc 0ae8 	vcvt.u32.f32	s0, s17
    74b4:	4648      	mov	r0, r9
    74b6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    74ba:	f004 fe5d 	bl	c178 <__tTString_setHarmonic_veneer>
    74be:	e56d      	b.n	6f9c <audioTickString2+0xdc>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    74c0:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    74c4:	b29b      	uxth	r3, r3
    74c6:	2b00      	cmp	r3, #0
    74c8:	d0db      	beq.n	7482 <audioTickString2+0x5c2>
    74ca:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    74ce:	b29b      	uxth	r3, r3
    74d0:	2b00      	cmp	r3, #0
    74d2:	d1d6      	bne.n	7482 <audioTickString2+0x5c2>
				tTString_mute(&strings[i]);
    74d4:	4650      	mov	r0, sl
    74d6:	f004 fca7 	bl	be28 <__tTString_mute_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    74da:	9b02      	ldr	r3, [sp, #8]
    74dc:	781a      	ldrb	r2, [r3, #0]
    74de:	e7d0      	b.n	7482 <audioTickString2+0x5c2>
					oneMinusAlpha = 1.0f - alpha;
    74e0:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    74e4:	eeb0 1a60 	vmov.f32	s2, s1
    74e8:	eeb0 0a48 	vmov.f32	s0, s16
    74ec:	eef0 0a47 	vmov.f32	s1, s14
    74f0:	f004 fdd2 	bl	c098 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    74f4:	eef1 ea00 	vmov.f32	s29, #16	; 0x40800000  4.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    74f8:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    74fc:	eddb 0a24 	vldr	s1, [fp, #144]	; 0x90
					oneMinusAlpha = 1.0f - alpha;
    7500:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    7504:	2303      	movs	r3, #3
    7506:	e5b6      	b.n	7076 <audioTickString2+0x1b6>
					oneMinusAlpha = 1.0f - alpha;
    7508:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    750c:	eeb0 1a47 	vmov.f32	s2, s14
    7510:	eeb0 0a48 	vmov.f32	s0, s16
    7514:	f004 fdc0 	bl	c098 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    7518:	eef0 ea08 	vmov.f32	s29, #8	; 0x40400000  3.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    751c:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    7520:	ed9b 7a1b 	vldr	s14, [fp, #108]	; 0x6c
					oneMinusAlpha = 1.0f - alpha;
    7524:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    7528:	2302      	movs	r3, #2
    752a:	e597      	b.n	705c <audioTickString2+0x19c>
					oneMinusAlpha = 1.0f - alpha;
    752c:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7530:	eeb0 1a47 	vmov.f32	s2, s14
    7534:	eeb0 0a48 	vmov.f32	s0, s16
    7538:	f004 fdae 	bl	c098 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    753c:	ed9b 7a09 	vldr	s14, [fp, #36]	; 0x24
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7540:	eef0 8a40 	vmov.f32	s17, s0
					oneMinusAlpha = 1.0f - alpha;
    7544:	ee3f fa40 	vsub.f32	s30, s30, s0
    7548:	e570      	b.n	702c <audioTickString2+0x16c>
    754a:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    754e:	eeb0 1a60 	vmov.f32	s2, s1
    7552:	eeb0 0a48 	vmov.f32	s0, s16
    7556:	eef0 0a47 	vmov.f32	s1, s14
    755a:	f004 fd9d 	bl	c098 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    755e:	eef0 ea00 	vmov.f32	s29, #0	; 0x40000000  2.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7562:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    7566:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
					oneMinusAlpha = 1.0f - alpha;
    756a:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    756e:	2301      	movs	r3, #1
    7570:	e567      	b.n	7042 <audioTickString2+0x182>
					oneMinusAlpha = 1.0f - alpha;
    7572:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7576:	eeb0 0a48 	vmov.f32	s0, s16
    757a:	f004 fd8d 	bl	c098 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    757e:	eef2 ea02 	vmov.f32	s29, #34	; 0x41100000  9.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7582:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    7586:	2308      	movs	r3, #8
					oneMinusAlpha = 1.0f - alpha;
    7588:	ee3f fa40 	vsub.f32	s30, s30, s0
    758c:	e5b7      	b.n	70fe <audioTickString2+0x23e>
    758e:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7592:	eeb0 1a60 	vmov.f32	s2, s1
    7596:	eeb0 0a48 	vmov.f32	s0, s16
    759a:	eef0 0a47 	vmov.f32	s1, s14
    759e:	f004 fd7b 	bl	c098 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    75a2:	eef2 ea00 	vmov.f32	s29, #32	; 0x41000000  8.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    75a6:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    75aa:	eddb 0a48 	vldr	s1, [fp, #288]	; 0x120
					oneMinusAlpha = 1.0f - alpha;
    75ae:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    75b2:	2307      	movs	r3, #7
    75b4:	e593      	b.n	70de <audioTickString2+0x21e>
					oneMinusAlpha = 1.0f - alpha;
    75b6:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    75ba:	eeb0 1a47 	vmov.f32	s2, s14
    75be:	eeb0 0a48 	vmov.f32	s0, s16
    75c2:	f004 fd69 	bl	c098 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    75c6:	eef1 ea0c 	vmov.f32	s29, #28	; 0x40e00000  7.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    75ca:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    75ce:	ed9b 7a3f 	vldr	s14, [fp, #252]	; 0xfc
					oneMinusAlpha = 1.0f - alpha;
    75d2:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    75d6:	2306      	movs	r3, #6
    75d8:	e574      	b.n	70c4 <audioTickString2+0x204>
					oneMinusAlpha = 1.0f - alpha;
    75da:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    75de:	eeb0 1a60 	vmov.f32	s2, s1
    75e2:	eeb0 0a48 	vmov.f32	s0, s16
    75e6:	eef0 0a47 	vmov.f32	s1, s14
    75ea:	f004 fd55 	bl	c098 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    75ee:	eef1 ea08 	vmov.f32	s29, #24	; 0x40c00000  6.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    75f2:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    75f6:	eddb 0a36 	vldr	s1, [fp, #216]	; 0xd8
					oneMinusAlpha = 1.0f - alpha;
    75fa:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    75fe:	2305      	movs	r3, #5
    7600:	e553      	b.n	70aa <audioTickString2+0x1ea>
					oneMinusAlpha = 1.0f - alpha;
    7602:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7606:	eeb0 1a47 	vmov.f32	s2, s14
    760a:	eeb0 0a48 	vmov.f32	s0, s16
    760e:	f004 fd43 	bl	c098 <__LEAF_mapToZeroToOneOutput_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    7612:	eef1 ea04 	vmov.f32	s29, #20	; 0x40a00000  5.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    7616:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    761a:	ed9b 7a2d 	vldr	s14, [fp, #180]	; 0xb4
					oneMinusAlpha = 1.0f - alpha;
    761e:	ee3f fa40 	vsub.f32	s30, s30, s0
					which = i;
    7622:	2304      	movs	r3, #4
    7624:	e534      	b.n	7090 <audioTickString2+0x1d0>
		newPluck = 0;
    7626:	ed9f aa0d 	vldr	s20, [pc, #52]	; 765c <audioTickString2+0x79c>
    762a:	4f13      	ldr	r7, [pc, #76]	; (7678 <audioTickString2+0x7b8>)
    762c:	f8c8 2000 	str.w	r2, [r8]
	for (int i = 0; i < numStringsThisBoard; i++)
    7630:	e5f8      	b.n	7224 <audioTickString2+0x364>
    7632:	bf00      	nop
    7634:	200051c4 	.word	0x200051c4
    7638:	3727c5ac 	.word	0x3727c5ac
    763c:	20000688 	.word	0x20000688
    7640:	38d1b717 	.word	0x38d1b717
    7644:	42980000 	.word	0x42980000
    7648:	3d4ccccd 	.word	0x3d4ccccd
    764c:	3c23d70a 	.word	0x3c23d70a
    7650:	322bcc77 	.word	0x322bcc77
    7654:	20000694 	.word	0x20000694
    7658:	42fe0000 	.word	0x42fe0000
    765c:	00000000 	.word	0x00000000
    7660:	37800080 	.word	0x37800080
    7664:	20005358 	.word	0x20005358
    7668:	20014204 	.word	0x20014204
    766c:	2001421c 	.word	0x2001421c
    7670:	200052f4 	.word	0x200052f4
    7674:	20014224 	.word	0x20014224
    7678:	2001d06c 	.word	0x2001d06c
    767c:	2001d064 	.word	0x2001d064

00007680 <audioFrameString2>:
{
    7680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uint32_t tempCountFrame = DWT->CYCCNT;
    7684:	4b57      	ldr	r3, [pc, #348]	; (77e4 <audioFrameString2+0x164>)
{
    7686:	4680      	mov	r8, r0
		if (resetStringInputs)
    7688:	f8df b188 	ldr.w	fp, [pc, #392]	; 7814 <audioFrameString2+0x194>
			for (int i = 0; i < numStringsThisBoard; i++)
    768c:	f8df 9188 	ldr.w	r9, [pc, #392]	; 7818 <audioFrameString2+0x198>
{
    7690:	ed2d 8b04 	vpush	{d8-d9}
		uint32_t tempCountFrame = DWT->CYCCNT;
    7694:	685e      	ldr	r6, [r3, #4]
		if (resetStringInputs)
    7696:	f89b 3000 	ldrb.w	r3, [fp]
    769a:	2b00      	cmp	r3, #0
    769c:	f040 8081 	bne.w	77a2 <audioFrameString2+0x122>
			for (int i = 0; i < numStringsThisBoard; i++)
    76a0:	f899 3000 	ldrb.w	r3, [r9]
		for (int i = 0; i < numStringsThisBoard; i++)
    76a4:	2b00      	cmp	r3, #0
    76a6:	d051      	beq.n	774c <audioFrameString2+0xcc>
    76a8:	4c4f      	ldr	r4, [pc, #316]	; (77e8 <audioFrameString2+0x168>)
    76aa:	2700      	movs	r7, #0
			tTString_setPickupFilterFreq(&strings[i],knobScaled[8]*6000.0f + 1000.0f);
    76ac:	ed9f 8a4f 	vldr	s16, [pc, #316]	; 77ec <audioFrameString2+0x16c>
    76b0:	ed9f 9a4f 	vldr	s18, [pc, #316]	; 77f0 <audioFrameString2+0x170>
			tTString_setPeakFilterFreq(&strings[i],knobScaled[16]*6000.0f + 60.0f);
    76b4:	eddf 8a4f 	vldr	s17, [pc, #316]	; 77f4 <audioFrameString2+0x174>
    76b8:	4d4f      	ldr	r5, [pc, #316]	; (77f8 <audioFrameString2+0x178>)
			tTString_setPickupPos(&strings[i],knobScaled[3]);
    76ba:	4620      	mov	r0, r4
    76bc:	ed95 0a03 	vldr	s0, [r5, #12]
    76c0:	f004 fc52 	bl	bf68 <__tTString_setPickupPos_veneer>
			tTString_setSlideGain(&strings[i],knobScaled[4]);
    76c4:	4620      	mov	r0, r4
    76c6:	ed95 0a04 	vldr	s0, [r5, #16]
		for (int i = 0; i < numStringsThisBoard; i++)
    76ca:	3701      	adds	r7, #1
			tTString_setSlideGain(&strings[i],knobScaled[4]);
    76cc:	f004 fb44 	bl	bd58 <__tTString_setSlideGain_veneer>
			tTString_setPickupFilterFreq(&strings[i],knobScaled[8]*6000.0f + 1000.0f);
    76d0:	eeb0 0a49 	vmov.f32	s0, s18
    76d4:	edd5 7a08 	vldr	s15, [r5, #32]
    76d8:	4620      	mov	r0, r4
    76da:	eea7 0a88 	vfma.f32	s0, s15, s16
    76de:	f004 fb17 	bl	bd10 <__tTString_setPickupFilterFreq_veneer>
			tTString_setPickupModFreq(&strings[i],(knobScaled[12]));
    76e2:	4620      	mov	r0, r4
    76e4:	ed95 0a0c 	vldr	s0, [r5, #48]	; 0x30
    76e8:	f004 fcda 	bl	c0a0 <__tTString_setPickupModFreq_veneer>
			tTString_setPickupModAmp(&strings[i],knobScaled[13]);
    76ec:	4620      	mov	r0, r4
    76ee:	ed95 0a0d 	vldr	s0, [r5, #52]	; 0x34
    76f2:	f004 faa5 	bl	bc40 <__tTString_setPickupModAmp_veneer>
			tTString_setPhantomHarmonicsGain(&strings[i],knobScaled[14]);
    76f6:	4620      	mov	r0, r4
    76f8:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
    76fc:	f004 fd50 	bl	c1a0 <__tTString_setPhantomHarmonicsGain_veneer>
			tTString_setPickupFilterQ(&strings[i],knobScaled[15]+0.5f);
    7700:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    7704:	ed95 0a0f 	vldr	s0, [r5, #60]	; 0x3c
    7708:	4620      	mov	r0, r4
    770a:	ee30 0a27 	vadd.f32	s0, s0, s15
    770e:	f004 fa8b 	bl	bc28 <__tTString_setPickupFilterQ_veneer>
			tTString_setPeakFilterFreq(&strings[i],knobScaled[16]*6000.0f + 60.0f);
    7712:	eeb0 0a68 	vmov.f32	s0, s17
    7716:	edd5 7a10 	vldr	s15, [r5, #64]	; 0x40
    771a:	4620      	mov	r0, r4
    771c:	eea7 0a88 	vfma.f32	s0, s15, s16
    7720:	f004 fc3e 	bl	bfa0 <__tTString_setPeakFilterFreq_veneer>
			tTString_setPeakFilterQ(&strings[i],knobScaled[17]);
    7724:	4620      	mov	r0, r4
    7726:	ed95 0a11 	vldr	s0, [r5, #68]	; 0x44
    772a:	f004 fb65 	bl	bdf8 <__tTString_setPeakFilterQ_veneer>
			tTString_setTensionGain(&strings[i],knobScaled[18]);
    772e:	4620      	mov	r0, r4
    7730:	ed95 0a12 	vldr	s0, [r5, #72]	; 0x48
    7734:	f004 fa68 	bl	bc08 <__tTString_setTensionGain_veneer>
			tTString_setPickupAmount(&strings[i],knobScaled[19]);
    7738:	4620      	mov	r0, r4
    773a:	ed95 0a13 	vldr	s0, [r5, #76]	; 0x4c
		for (int i = 0; i < numStringsThisBoard; i++)
    773e:	3404      	adds	r4, #4
			tTString_setPickupAmount(&strings[i],knobScaled[19]);
    7740:	f004 fab6 	bl	bcb0 <__tTString_setPickupAmount_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    7744:	f899 3000 	ldrb.w	r3, [r9]
    7748:	42bb      	cmp	r3, r7
    774a:	dcb6      	bgt.n	76ba <audioFrameString2+0x3a>
    774c:	4c2b      	ldr	r4, [pc, #172]	; (77fc <audioFrameString2+0x17c>)
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    774e:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 7800 <audioFrameString2+0x180>
    7752:	f504 7500 	add.w	r5, r4, #512	; 0x200
    7756:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    775a:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    775e:	f7ff fbaf 	bl	6ec0 <audioTickString2>
    7762:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    7766:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    7768:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    776c:	42a5      	cmp	r5, r4
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    776e:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    7772:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    7776:	d1f2      	bne.n	775e <audioFrameString2+0xde>
		timeFrame = DWT->CYCCNT - tempCountFrame;
    7778:	4b1a      	ldr	r3, [pc, #104]	; (77e4 <audioFrameString2+0x164>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    777a:	4822      	ldr	r0, [pc, #136]	; (7804 <audioFrameString2+0x184>)
		timeFrame = DWT->CYCCNT - tempCountFrame;
    777c:	685b      	ldr	r3, [r3, #4]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    777e:	ed90 7a00 	vldr	s14, [r0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    7782:	1b9b      	subs	r3, r3, r6
    7784:	4920      	ldr	r1, [pc, #128]	; (7808 <audioFrameString2+0x188>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7786:	4a21      	ldr	r2, [pc, #132]	; (780c <audioFrameString2+0x18c>)
    7788:	ee07 3a90 	vmov	s15, r3
		timeFrame = DWT->CYCCNT - tempCountFrame;
    778c:	600b      	str	r3, [r1, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    778e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    7792:	ee67 7a87 	vmul.f32	s15, s15, s14
    7796:	edc2 7a00 	vstr	s15, [r2]
}
    779a:	ecbd 8b04 	vpop	{d8-d9}
    779e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (int i = 0; i < numStringsThisBoard; i++)
    77a2:	f899 3000 	ldrb.w	r3, [r9]
    77a6:	b1bb      	cbz	r3, 77d8 <audioFrameString2+0x158>
    77a8:	2400      	movs	r4, #0
    77aa:	4d0f      	ldr	r5, [pc, #60]	; (77e8 <audioFrameString2+0x168>)
    77ac:	f8df a06c 	ldr.w	sl, [pc, #108]	; 781c <audioFrameString2+0x19c>
				previousStringInputs[i] = 0;
    77b0:	4627      	mov	r7, r4
				tTString_mute(&strings[i]);
    77b2:	4628      	mov	r0, r5
			for (int i = 0; i < numStringsThisBoard; i++)
    77b4:	3504      	adds	r5, #4
				tTString_mute(&strings[i]);
    77b6:	f004 fb37 	bl	be28 <__tTString_mute_veneer>
			for (int i = 0; i < numStringsThisBoard; i++)
    77ba:	f899 3000 	ldrb.w	r3, [r9]
				previousStringInputs[i] = 0;
    77be:	f82a 7014 	strh.w	r7, [sl, r4, lsl #1]
			for (int i = 0; i < numStringsThisBoard; i++)
    77c2:	3401      	adds	r4, #1
				previousStringInputs[i] = 0;
    77c4:	f04f 0200 	mov.w	r2, #0
			for (int i = 0; i < numStringsThisBoard; i++)
    77c8:	42a3      	cmp	r3, r4
    77ca:	dcf2      	bgt.n	77b2 <audioFrameString2+0x132>
			resetStringInputs = 0;
    77cc:	f88b 2000 	strb.w	r2, [fp]
			newPluck = 1;
    77d0:	2101      	movs	r1, #1
    77d2:	4a0f      	ldr	r2, [pc, #60]	; (7810 <audioFrameString2+0x190>)
    77d4:	6011      	str	r1, [r2, #0]
    77d6:	e765      	b.n	76a4 <audioFrameString2+0x24>
			resetStringInputs = 0;
    77d8:	f88b 3000 	strb.w	r3, [fp]
			newPluck = 1;
    77dc:	2301      	movs	r3, #1
    77de:	4a0c      	ldr	r2, [pc, #48]	; (7810 <audioFrameString2+0x190>)
    77e0:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    77e2:	e7b3      	b.n	774c <audioFrameString2+0xcc>
    77e4:	e0001000 	.word	0xe0001000
    77e8:	2001d064 	.word	0x2001d064
    77ec:	45bb8000 	.word	0x45bb8000
    77f0:	447a0000 	.word	0x447a0000
    77f4:	42700000 	.word	0x42700000
    77f8:	200051e8 	.word	0x200051e8
    77fc:	30000000 	.word	0x30000000
    7800:	4b000000 	.word	0x4b000000
    7804:	20000684 	.word	0x20000684
    7808:	20014244 	.word	0x20014244
    780c:	200051cc 	.word	0x200051cc
    7810:	200052e8 	.word	0x200052e8
    7814:	20005771 	.word	0x20005771
    7818:	20000694 	.word	0x20000694
    781c:	20005358 	.word	0x20005358

00007820 <audioInitString3>:
float finalPuPos[NUM_STRINGS_PER_BOARD];

float string3Defaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};

void __ATTR_ITCMRAM audioInitString3()
{
    7820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	for (int v = 0; v < numStringsThisBoard; v++)
    7822:	4e08      	ldr	r6, [pc, #32]	; (7844 <audioInitString3+0x24>)
    7824:	7833      	ldrb	r3, [r6, #0]
    7826:	b163      	cbz	r3, 7842 <audioInitString3+0x22>
    7828:	4d07      	ldr	r5, [pc, #28]	; (7848 <audioInitString3+0x28>)
    782a:	2400      	movs	r4, #0
	{
		tStiffString_init(&stringsC[v], 70, &leaf);
    782c:	4f07      	ldr	r7, [pc, #28]	; (784c <audioInitString3+0x2c>)
    782e:	4628      	mov	r0, r5
    7830:	463a      	mov	r2, r7
    7832:	2146      	movs	r1, #70	; 0x46
	for (int v = 0; v < numStringsThisBoard; v++)
    7834:	3401      	adds	r4, #1
		tStiffString_init(&stringsC[v], 70, &leaf);
    7836:	f004 faa7 	bl	bd88 <__tStiffString_init_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    783a:	7833      	ldrb	r3, [r6, #0]
    783c:	3504      	adds	r5, #4
    783e:	42a3      	cmp	r3, r4
    7840:	dcf5      	bgt.n	782e <audioInitString3+0xe>
	}
}
    7842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7844:	20000694 	.word	0x20000694
    7848:	2001d098 	.word	0x2001d098
    784c:	2000528c 	.word	0x2000528c
    7850:	f3af 8000 	nop.w
    7854:	f3af 8000 	nop.w
    7858:	f3af 8000 	nop.w
    785c:	f3af 8000 	nop.w

00007860 <audioFreeString3>:


void __ATTR_ITCMRAM audioFreeString3()
{
    7860:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    7862:	4e07      	ldr	r6, [pc, #28]	; (7880 <audioFreeString3+0x20>)
    7864:	7833      	ldrb	r3, [r6, #0]
    7866:	b14b      	cbz	r3, 787c <audioFreeString3+0x1c>
    7868:	4d06      	ldr	r5, [pc, #24]	; (7884 <audioFreeString3+0x24>)
    786a:	2400      	movs	r4, #0
	{
		tStiffString_free(&stringsC[v]);
    786c:	4628      	mov	r0, r5
	for (int v = 0; v < numStringsThisBoard; v++)
    786e:	3401      	adds	r4, #1
		tStiffString_free(&stringsC[v]);
    7870:	f004 f9c6 	bl	bc00 <__tStiffString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    7874:	7833      	ldrb	r3, [r6, #0]
    7876:	3504      	adds	r5, #4
    7878:	42a3      	cmp	r3, r4
    787a:	dcf7      	bgt.n	786c <audioFreeString3+0xc>
	}
}
    787c:	bd70      	pop	{r4, r5, r6, pc}
    787e:	bf00      	nop
    7880:	20000694 	.word	0x20000694
    7884:	2001d098 	.word	0x2001d098
    7888:	f3af 8000 	nop.w
    788c:	f3af 8000 	nop.w
    7890:	f3af 8000 	nop.w
    7894:	f3af 8000 	nop.w
    7898:	f3af 8000 	nop.w
    789c:	f3af 8000 	nop.w

000078a0 <audioSwitchToString3>:

void __ATTR_ITCMRAM audioSwitchToString3()
{
    78a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    78a4:	4c1a      	ldr	r4, [pc, #104]	; (7910 <audioSwitchToString3+0x70>)
	for (int i = 0; i < 12; i++)
    78a6:	2500      	movs	r5, #0
    78a8:	4f1a      	ldr	r7, [pc, #104]	; (7914 <audioSwitchToString3+0x74>)
		}
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}
		knobFrozen[i] = 1;
    78aa:	f04f 0901 	mov.w	r9, #1
    78ae:	4e1a      	ldr	r6, [pc, #104]	; (7918 <audioSwitchToString3+0x78>)
    78b0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7920 <audioSwitchToString3+0x80>
    78b4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 7924 <audioSwitchToString3+0x84>
{
    78b8:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    78bc:	ed9f 8a17 	vldr	s16, [pc, #92]	; 791c <audioSwitchToString3+0x7c>
    78c0:	4620      	mov	r0, r4
    78c2:	eeb0 0a48 	vmov.f32	s0, s16
    78c6:	f004 fa7b 	bl	bdc0 <__tExpSmooth_setFactor_veneer>
		if (voice == 59)
    78ca:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    78ce:	4620      	mov	r0, r4
		if (voice == 59)
    78d0:	2b3b      	cmp	r3, #59	; 0x3b
    78d2:	d00e      	beq.n	78f2 <audioSwitchToString3+0x52>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    78d4:	ecb6 0a01 	vldmia	r6!, {s0}
	for (int i = 0; i < 12; i++)
    78d8:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    78da:	f004 fb75 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    78de:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 12; i++)
    78e2:	3501      	adds	r5, #1
    78e4:	3704      	adds	r7, #4
    78e6:	2d0c      	cmp	r5, #12
    78e8:	d1ea      	bne.n	78c0 <audioSwitchToString3+0x20>
	}
}
    78ea:	ecbd 8b02 	vpop	{d8}
    78ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[i], string3Defaults[i]);
    78f2:	ecb7 0a01 	vldmia	r7!, {s0}
	for (int i = 0; i < 12; i++)
    78f6:	3404      	adds	r4, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], string3Defaults[i]);
    78f8:	f004 fb66 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    78fc:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 12; i++)
    7900:	3501      	adds	r5, #1
    7902:	3604      	adds	r6, #4
    7904:	2d0c      	cmp	r5, #12
    7906:	d1db      	bne.n	78c0 <audioSwitchToString3+0x20>
}
    7908:	ecbd 8b02 	vpop	{d8}
    790c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7910:	20005238 	.word	0x20005238
    7914:	20000898 	.word	0x20000898
    7918:	20018678 	.word	0x20018678
    791c:	3a83126f 	.word	0x3a83126f
    7920:	20014250 	.word	0x20014250
    7924:	200051d4 	.word	0x200051d4
    7928:	f3af 8000 	nop.w
    792c:	f3af 8000 	nop.w
    7930:	f3af 8000 	nop.w
    7934:	f3af 8000 	nop.w
    7938:	f3af 8000 	nop.w
    793c:	f3af 8000 	nop.w

00007940 <audioTickString3>:
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickString3(void)
{
    7940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	float temp = 0.0f;


	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    7944:	485d      	ldr	r0, [pc, #372]	; (7abc <audioTickString3+0x17c>)
    7946:	4c5e      	ldr	r4, [pc, #376]	; (7ac0 <audioTickString3+0x180>)
    7948:	4d5e      	ldr	r5, [pc, #376]	; (7ac4 <audioTickString3+0x184>)
    794a:	f104 0630 	add.w	r6, r4, #48	; 0x30
{
    794e:	ed2d 8b06 	vpush	{d8-d10}
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    7952:	f004 fa9d 	bl	be90 <__tExpSmooth_tick_veneer>
    7956:	eef0 8a40 	vmov.f32	s17, s0

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    795a:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    795c:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    795e:	f004 fa97 	bl	be90 <__tExpSmooth_tick_veneer>
    7962:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    7966:	42a6      	cmp	r6, r4
    7968:	d1f7      	bne.n	795a <audioTickString3+0x1a>
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
    796a:	4f57      	ldr	r7, [pc, #348]	; (7ac8 <audioTickString3+0x188>)
	{
		float theNote[NUM_STRINGS_PER_BOARD];
		for (int i = 0; i < numStringsThisBoard; i++)
    796c:	4e57      	ldr	r6, [pc, #348]	; (7acc <audioTickString3+0x18c>)
	if (newPluck)
    796e:	683b      	ldr	r3, [r7, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    7970:	7832      	ldrb	r2, [r6, #0]
	if (newPluck)
    7972:	2b00      	cmp	r3, #0
    7974:	d049      	beq.n	7a0a <audioTickString3+0xca>
		for (int i = 0; i < numStringsThisBoard; i++)
    7976:	2a00      	cmp	r2, #0
    7978:	f000 8099 	beq.w	7aae <audioTickString3+0x16e>
    797c:	f8df 916c 	ldr.w	r9, [pc, #364]	; 7aec <audioTickString3+0x1ac>
    7980:	2400      	movs	r4, #0
				}
				if (isnan(theNote[i]))
				{
					theNote[i] = 64.0f;
				}
				float finalFreq = mtofTableLookup(theNote[i]);
    7982:	ed9f aa53 	vldr	s20, [pc, #332]	; 7ad0 <audioTickString3+0x190>
    7986:	eddf 9a53 	vldr	s19, [pc, #332]	; 7ad4 <audioTickString3+0x194>
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    798a:	ed9f 9a53 	vldr	s18, [pc, #332]	; 7ad8 <audioTickString3+0x198>
    798e:	4d53      	ldr	r5, [pc, #332]	; (7adc <audioTickString3+0x19c>)
    7990:	f8df 8178 	ldr.w	r8, [pc, #376]	; 7b0c <audioTickString3+0x1cc>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    7994:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    7998:	b29b      	uxth	r3, r3
    799a:	2b00      	cmp	r3, #0
    799c:	d178      	bne.n	7a90 <audioTickString3+0x150>
    799e:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    79a2:	b29b      	uxth	r3, r3
    79a4:	2b00      	cmp	r3, #0
    79a6:	d073      	beq.n	7a90 <audioTickString3+0x150>
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    79a8:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    79ac:	b29b      	uxth	r3, r3
    79ae:	ee08 3a10 	vmov	s16, r3
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    79b2:	4b4b      	ldr	r3, [pc, #300]	; (7ae0 <audioTickString3+0x1a0>)
    79b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    79b8:	ed93 0a00 	vldr	s0, [r3]
				stringOctave[i] = octave;
    79bc:	4b49      	ldr	r3, [pc, #292]	; (7ae4 <audioTickString3+0x1a4>)
    79be:	edd3 7a00 	vldr	s15, [r3]
    79c2:	4b49      	ldr	r3, [pc, #292]	; (7ae8 <audioTickString3+0x1a8>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    79c4:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    79c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
				float finalFreq = mtofTableLookup(theNote[i]);
    79cc:	fe80 0a4a 	vminnm.f32	s0, s0, s20
				stringOctave[i] = octave;
    79d0:	edc3 7a00 	vstr	s15, [r3]
				float finalFreq = mtofTableLookup(theNote[i]);
    79d4:	fe80 0a29 	vmaxnm.f32	s0, s0, s19
    79d8:	f004 faae 	bl	bf38 <__mtofTableLookup_veneer>
				tStiffString_setFreq(&stringsC[i], finalFreq);
    79dc:	4648      	mov	r0, r9
    79de:	f004 fbb3 	bl	c148 <__tStiffString_setFreq_veneer>
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    79e2:	eeb8 0ac8 	vcvt.f32.s32	s0, s16
				tStiffString_pluck(&stringsC[i], str3Amp);
    79e6:	4648      	mov	r0, r9
    79e8:	ee20 0a09 	vmul.f32	s0, s0, s18
    79ec:	f004 fb38 	bl	c060 <__tStiffString_pluck_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    79f0:	7832      	ldrb	r2, [r6, #0]
			{
				//note off
				tStiffString_mute(&stringsC[i]);
				//tTString_mute(&strings[i]);
			}
			previousStringInputs[i] = stringInputs[i];
    79f2:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    79f6:	f109 0904 	add.w	r9, r9, #4
			previousStringInputs[i] = stringInputs[i];
    79fa:	b29b      	uxth	r3, r3
    79fc:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    7a00:	3401      	adds	r4, #1
    7a02:	42a2      	cmp	r2, r4
    7a04:	dcc6      	bgt.n	7994 <audioTickString3+0x54>
		}
		newPluck = 0;
    7a06:	2300      	movs	r3, #0
    7a08:	603b      	str	r3, [r7, #0]
	}
	for (int i = 0; i < numStringsThisBoard; i++)
    7a0a:	2a00      	cmp	r2, #0
    7a0c:	d053      	beq.n	7ab6 <audioTickString3+0x176>
	{

		temp += tStiffString_tick(&stringsC[i]) * 0.5f;
    7a0e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
    7a12:	4d36      	ldr	r5, [pc, #216]	; (7aec <audioTickString3+0x1ac>)
	for (int i = 0; i < numStringsThisBoard; i++)
    7a14:	2400      	movs	r4, #0
    7a16:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 7ad4 <audioTickString3+0x194>
		temp += tStiffString_tick(&stringsC[i]) * 0.5f;
    7a1a:	4628      	mov	r0, r5
	for (int i = 0; i < numStringsThisBoard; i++)
    7a1c:	3401      	adds	r4, #1
		temp += tStiffString_tick(&stringsC[i]) * 0.5f;
    7a1e:	f004 f8ff 	bl	bc20 <__tStiffString_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    7a22:	7833      	ldrb	r3, [r6, #0]
		temp += tStiffString_tick(&stringsC[i]) * 0.5f;
    7a24:	eea0 8a09 	vfma.f32	s16, s0, s18
	for (int i = 0; i < numStringsThisBoard; i++)
    7a28:	3504      	adds	r5, #4
    7a2a:	42a3      	cmp	r3, r4
    7a2c:	dcf5      	bgt.n	7a1a <audioTickString3+0xda>
	}
	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7a2e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 7af0 <audioTickString3+0x1b0>
    7a32:	ee68 6aa8 	vmul.f32	s13, s17, s17
    7a36:	eddf 7a2f 	vldr	s15, [pc, #188]	; 7af4 <audioTickString3+0x1b4>
    7a3a:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 7af8 <audioTickString3+0x1b8>
    7a3e:	eee8 7a87 	vfma.f32	s15, s17, s14
    7a42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 7afc <audioTickString3+0x1bc>
    7a46:	ee26 7aa8 	vmul.f32	s14, s13, s17
    7a4a:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 7b00 <audioTickString3+0x1c0>

	temp *= outVol * masterVolFromBrain;
    7a4e:	4b2d      	ldr	r3, [pc, #180]	; (7b04 <audioTickString3+0x1c4>)
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7a50:	ee68 8a86 	vmul.f32	s17, s17, s12
	temp *= outVol * masterVolFromBrain;
    7a54:	ed93 6a00 	vldr	s12, [r3]
    7a58:	eee7 7a05 	vfma.f32	s15, s14, s10
    7a5c:	eee6 7ae5 	vfms.f32	s15, s13, s11
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    7a60:	eee7 7a68 	vfms.f32	s15, s14, s17
	temp *= outVol * masterVolFromBrain;
    7a64:	ee27 0a86 	vmul.f32	s0, s15, s12
	temp = tanhf(temp);
    7a68:	ee20 0a08 	vmul.f32	s0, s0, s16
    7a6c:	f004 f900 	bl	bc70 <__tanhf_veneer>
    7a70:	eef0 0a40 	vmov.f32	s1, s0
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    7a74:	eddf 7a24 	vldr	s15, [pc, #144]	; 7b08 <audioTickString3+0x1c8>
    7a78:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    7a7c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    7a80:	ee60 0aa7 	vmul.f32	s1, s1, s15
}
    7a84:	ecbd 8b06 	vpop	{d8-d10}
    7a88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    7a8c:	f004 b9dc 	b.w	be48 <__LEAF_clip_veneer>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    7a90:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    7a94:	b29b      	uxth	r3, r3
    7a96:	2b00      	cmp	r3, #0
    7a98:	d0ab      	beq.n	79f2 <audioTickString3+0xb2>
    7a9a:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    7a9e:	b29b      	uxth	r3, r3
    7aa0:	2b00      	cmp	r3, #0
    7aa2:	d1a6      	bne.n	79f2 <audioTickString3+0xb2>
				tStiffString_mute(&stringsC[i]);
    7aa4:	4648      	mov	r0, r9
    7aa6:	f004 f917 	bl	bcd8 <__tStiffString_mute_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    7aaa:	7832      	ldrb	r2, [r6, #0]
    7aac:	e7a1      	b.n	79f2 <audioTickString3+0xb2>
		newPluck = 0;
    7aae:	ed9f 8a09 	vldr	s16, [pc, #36]	; 7ad4 <audioTickString3+0x194>
    7ab2:	603a      	str	r2, [r7, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    7ab4:	e7bb      	b.n	7a2e <audioTickString3+0xee>
    7ab6:	ed9f 8a07 	vldr	s16, [pc, #28]	; 7ad4 <audioTickString3+0x194>
    7aba:	e7b8      	b.n	7a2e <audioTickString3+0xee>
    7abc:	2001425c 	.word	0x2001425c
    7ac0:	200051e8 	.word	0x200051e8
    7ac4:	20005238 	.word	0x20005238
    7ac8:	200052e8 	.word	0x200052e8
    7acc:	20000694 	.word	0x20000694
    7ad0:	42fe0000 	.word	0x42fe0000
    7ad4:	00000000 	.word	0x00000000
    7ad8:	37800080 	.word	0x37800080
    7adc:	20005358 	.word	0x20005358
    7ae0:	2001421c 	.word	0x2001421c
    7ae4:	200052f4 	.word	0x200052f4
    7ae8:	20014224 	.word	0x20014224
    7aec:	2001d098 	.word	0x2001d098
    7af0:	3ef1ac0b 	.word	0x3ef1ac0b
    7af4:	3bdc4213 	.word	0x3bdc4213
    7af8:	40caa285 	.word	0x40caa285
    7afc:	4022be0a 	.word	0x4022be0a
    7b00:	40516313 	.word	0x40516313
    7b04:	2000068c 	.word	0x2000068c
    7b08:	3f7ae148 	.word	0x3f7ae148
    7b0c:	20014204 	.word	0x20014204
    7b10:	f3af 8000 	nop.w
    7b14:	f3af 8000 	nop.w
    7b18:	f3af 8000 	nop.w
    7b1c:	f3af 8000 	nop.w

00007b20 <audioFrameString3>:
		uint32_t tempCountFrame = DWT->CYCCNT;
    7b20:	4bc6      	ldr	r3, [pc, #792]	; (7e3c <audioFrameString3+0x31c>)
{
    7b22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (resetStringInputs)
    7b26:	4cc6      	ldr	r4, [pc, #792]	; (7e40 <audioFrameString3+0x320>)
{
    7b28:	ed2d 8b08 	vpush	{d8-d11}
		uint32_t tempCountFrame = DWT->CYCCNT;
    7b2c:	685b      	ldr	r3, [r3, #4]
{
    7b2e:	b08b      	sub	sp, #44	; 0x2c
		uint32_t tempCountFrame = DWT->CYCCNT;
    7b30:	9304      	str	r3, [sp, #16]
		if (resetStringInputs)
    7b32:	7823      	ldrb	r3, [r4, #0]
{
    7b34:	9005      	str	r0, [sp, #20]
		if (resetStringInputs)
    7b36:	2b00      	cmp	r3, #0
    7b38:	f040 8152 	bne.w	7de0 <audioFrameString3+0x2c0>
			for (int i = 0; i < numStringsThisBoard; i++)
    7b3c:	4bc1      	ldr	r3, [pc, #772]	; (7e44 <audioFrameString3+0x324>)
    7b3e:	9303      	str	r3, [sp, #12]
    7b40:	781b      	ldrb	r3, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    7b42:	2b00      	cmp	r3, #0
    7b44:	f000 8118 	beq.w	7d78 <audioFrameString3+0x258>
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    7b48:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    7b4c:	4bbe      	ldr	r3, [pc, #760]	; (7e48 <audioFrameString3+0x328>)
    7b4e:	f8df b35c 	ldr.w	fp, [pc, #860]	; 7eac <audioFrameString3+0x38c>
		for (int i = 0; i < numStringsThisBoard; i++)
    7b52:	2400      	movs	r4, #0
    7b54:	4ebd      	ldr	r6, [pc, #756]	; (7e4c <audioFrameString3+0x32c>)
    7b56:	eddf aabe 	vldr	s21, [pc, #760]	; 7e50 <audioFrameString3+0x330>
    7b5a:	eddf 9abe 	vldr	s19, [pc, #760]	; 7e54 <audioFrameString3+0x334>
			float newStiffness = (knobScaled[0] * 100.0f);
    7b5e:	ed9f aabe 	vldr	s20, [pc, #760]	; 7e58 <audioFrameString3+0x338>
				float squishedStiffness = (newStiffness*0.01f) ;
    7b62:	ed9f babe 	vldr	s22, [pc, #760]	; 7e5c <audioFrameString3+0x33c>
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    7b66:	ed9f 9abe 	vldr	s18, [pc, #760]	; 7e60 <audioFrameString3+0x340>
    7b6a:	4fbe      	ldr	r7, [pc, #760]	; (7e64 <audioFrameString3+0x344>)
    7b6c:	f8df 9340 	ldr.w	r9, [pc, #832]	; 7eb0 <audioFrameString3+0x390>
    7b70:	4dbd      	ldr	r5, [pc, #756]	; (7e68 <audioFrameString3+0x348>)
    7b72:	f8df 8340 	ldr.w	r8, [pc, #832]	; 7eb4 <audioFrameString3+0x394>
    7b76:	f8df a340 	ldr.w	sl, [pc, #832]	; 7eb8 <audioFrameString3+0x398>
    7b7a:	9301      	str	r3, [sp, #4]
			theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    7b7c:	4bbb      	ldr	r3, [pc, #748]	; (7e6c <audioFrameString3+0x34c>)
    7b7e:	ecfb 7a01 	vldmia	fp!, {s15}
    7b82:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7b86:	ed93 8a00 	vldr	s16, [r3]
    7b8a:	ee38 8a27 	vadd.f32	s16, s16, s15
    7b8e:	fe88 8a6a 	vminnm.f32	s16, s16, s21
    7b92:	fe88 8a29 	vmaxnm.f32	s16, s16, s19
			float finalFreq = mtofTableLookup(theNote[i]);
    7b96:	eeb0 0a48 	vmov.f32	s0, s16
    7b9a:	f004 f9cd 	bl	bf38 <__mtofTableLookup_veneer>
    7b9e:	4bb4      	ldr	r3, [pc, #720]	; (7e70 <audioFrameString3+0x350>)
			theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    7ba0:	00a0      	lsls	r0, r4, #2
			float finalFreq = mtofTableLookup(theNote[i]);
    7ba2:	eef0 ba40 	vmov.f32	s23, s0
			tStiffString_setFreqNoUpdate(&stringsC[i], finalFreq);
    7ba6:	4418      	add	r0, r3
    7ba8:	9002      	str	r0, [sp, #8]
    7baa:	f004 fa55 	bl	c058 <__tStiffString_setFreqNoUpdate_veneer>
			float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    7bae:	9b01      	ldr	r3, [sp, #4]
    7bb0:	ecb3 0a01 	vldmia	r3!, {s0}
    7bb4:	ee38 0a40 	vsub.f32	s0, s16, s0
    7bb8:	9301      	str	r3, [sp, #4]
    7bba:	f004 f9bd 	bl	bf38 <__mtofTableLookup_veneer>
			volatile float ratioOfOpenStringToNote=(finalFreq/ openStringFreq);
    7bbe:	ee8b 6a80 	vdiv.f32	s12, s23, s0
			float newStiffness = (knobScaled[0] * 100.0f);
    7bc2:	ed9a 8a00 	vldr	s16, [sl]
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    7bc6:	edd5 7a00 	vldr	s15, [r5]
    7bca:	9802      	ldr	r0, [sp, #8]
			volatile float ratioOfNoteToOpenString = openStringFreq/ finalFreq;
    7bcc:	eec0 6a2b 	vdiv.f32	s13, s0, s23
			float newStiffness = (knobScaled[0] * 100.0f);
    7bd0:	ee28 8a0a 	vmul.f32	s16, s16, s20
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    7bd4:	ee37 7aa8 	vadd.f32	s14, s15, s17
    7bd8:	eeb4 7ac8 	vcmpe.f32	s14, s16
			volatile float ratioOfOpenStringToNote=(finalFreq/ openStringFreq);
    7bdc:	ed8d 6a06 	vstr	s12, [sp, #24]
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    7be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volatile float ratioOfNoteToOpenString = openStringFreq/ finalFreq;
    7be4:	edcd 6a07 	vstr	s13, [sp, #28]
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    7be8:	d406      	bmi.n	7bf8 <audioFrameString3+0xd8>
    7bea:	ee77 7ae8 	vsub.f32	s15, s15, s17
    7bee:	eef4 7ac8 	vcmpe.f32	s15, s16
    7bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7bf6:	dd0b      	ble.n	7c10 <audioFrameString3+0xf0>
				float squishedStiffness = (newStiffness*0.01f) ;
    7bf8:	ee68 ba0b 	vmul.f32	s23, s16, s22
				if ( squishedStiffness != prevSquishedStiffness[i])
    7bfc:	edd8 7a00 	vldr	s15, [r8]
    7c00:	eef4 7a6b 	vcmp.f32	s15, s23
    7c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c08:	f040 8165 	bne.w	7ed6 <audioFrameString3+0x3b6>
				prevStiffness[i] = newStiffness;
    7c0c:	ed85 8a00 	vstr	s16, [r5]
			float newpuPos = (knobScaled[10] * 200.0f);
    7c10:	ed9f 7a98 	vldr	s14, [pc, #608]	; 7e74 <audioFrameString3+0x354>
    7c14:	ed9a 8a0a 	vldr	s16, [sl, #40]	; 0x28
			if ((newpuPos > (prevPuPos[i] + 1.0f))|| (newpuPos < (prevPuPos[i] - 1.0f)))
    7c18:	edd6 7a00 	vldr	s15, [r6]
			float newpuPos = (knobScaled[10] * 200.0f);
    7c1c:	ee28 8a07 	vmul.f32	s16, s16, s14
			if ((newpuPos > (prevPuPos[i] + 1.0f))|| (newpuPos < (prevPuPos[i] - 1.0f)))
    7c20:	ee37 7aa8 	vadd.f32	s14, s15, s17
    7c24:	eeb4 7ac8 	vcmpe.f32	s14, s16
    7c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c2c:	d406      	bmi.n	7c3c <audioFrameString3+0x11c>
    7c2e:	ee77 7ae8 	vsub.f32	s15, s15, s17
    7c32:	eef4 7ac8 	vcmpe.f32	s15, s16
    7c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c3a:	dd30      	ble.n	7c9e <audioFrameString3+0x17e>
				float squishedPuPos = (newpuPos*0.005f) ;
    7c3c:	eddf ba8e 	vldr	s23, [pc, #568]	; 7e78 <audioFrameString3+0x358>
				if ( squishedPuPos != prevSquishedPuPos[i])
    7c40:	edd7 7a00 	vldr	s15, [r7]
				float squishedPuPos = (newpuPos*0.005f) ;
    7c44:	ee68 ba2b 	vmul.f32	s23, s16, s23
				if ( squishedPuPos != prevSquishedPuPos[i])
    7c48:	eef4 7a6b 	vcmp.f32	s15, s23
    7c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c50:	d023      	beq.n	7c9a <audioFrameString3+0x17a>
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    7c52:	ee78 7aeb 	vsub.f32	s15, s17, s23
					if (ratioOfNoteToOpenString < pickupKnobVal)
    7c56:	ed9d 7a07 	vldr	s14, [sp, #28]
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    7c5a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
					finalPuPos[i] = squishedPuPos;
    7c5e:	edc9 ba00 	vstr	s23, [r9]
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    7c62:	ee67 7aa6 	vmul.f32	s15, s15, s13
					if (ratioOfNoteToOpenString < pickupKnobVal)
    7c66:	eeb4 7ae7 	vcmpe.f32	s14, s15
    7c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7c6e:	f100 8125 	bmi.w	7ebc <audioFrameString3+0x39c>
					float pickupKnobVal2 = pickupKnobVal;
    7c72:	eef0 6a67 	vmov.f32	s13, s15
					float pickuppos = (pickupKnobVal * knobScaled[1]) + (pickupKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[1]);
    7c76:	ed9a 7a01 	vldr	s14, [sl, #4]
    7c7a:	ed9d 6a06 	vldr	s12, [sp, #24]
    7c7e:	ee38 0ac7 	vsub.f32	s0, s17, s14
					tStiffString_setPickupPosNoUpdate(&stringsC[i], (pickuppos));
    7c82:	9002      	str	r0, [sp, #8]
					float pickuppos = (pickupKnobVal * knobScaled[1]) + (pickupKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[1]);
    7c84:	ee20 0a06 	vmul.f32	s0, s0, s12
    7c88:	ee20 0a26 	vmul.f32	s0, s0, s13
					tStiffString_setPickupPosNoUpdate(&stringsC[i], (pickuppos));
    7c8c:	eea7 0a27 	vfma.f32	s0, s14, s15
    7c90:	f004 f816 	bl	bcc0 <__tStiffString_setPickupPosNoUpdate_veneer>
					prevSquishedPuPos[i] = squishedPuPos;
    7c94:	9802      	ldr	r0, [sp, #8]
    7c96:	edc7 ba00 	vstr	s23, [r7]
				prevPuPos[i] = newpuPos;
    7c9a:	ed86 8a00 	vstr	s16, [r6]
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    7c9e:	ed9a 7a0b 	vldr	s14, [sl, #44]	; 0x2c
    7ca2:	eef0 7a49 	vmov.f32	s15, s18
    7ca6:	ed9f 6a75 	vldr	s12, [pc, #468]	; 7e7c <audioFrameString3+0x35c>
    7caa:	ee38 7ac7 	vsub.f32	s14, s17, s14
			if (ratioOfNoteToOpenString < pluckKnobVal)
    7cae:	eddd 6a07 	vldr	s13, [sp, #28]
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    7cb2:	eee7 7a06 	vfma.f32	s15, s14, s12
			if (ratioOfNoteToOpenString < pluckKnobVal)
    7cb6:	eef4 6ae7 	vcmpe.f32	s13, s15
    7cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7cbe:	f140 808c 	bpl.w	7dda <audioFrameString3+0x2ba>
				volatile float difference = pluckKnobVal - ratioOfNoteToOpenString;
    7cc2:	ed9d 7a07 	vldr	s14, [sp, #28]
    7cc6:	ee37 7ac7 	vsub.f32	s14, s15, s14
    7cca:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24
				pluckKnobVal2 = ratioOfNoteToOpenString-difference;
    7cce:	eddd 6a07 	vldr	s13, [sp, #28]
    7cd2:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
    7cd6:	ee76 6ac7 	vsub.f32	s13, s13, s14
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    7cda:	ed9a 7a02 	vldr	s14, [sl, #8]
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    7cde:	eeb0 0a49 	vmov.f32	s0, s18
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    7ce2:	ed9d 6a06 	vldr	s12, [sp, #24]
    7ce6:	ee78 0ac7 	vsub.f32	s1, s17, s14
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    7cea:	ed9f 1a65 	vldr	s2, [pc, #404]	; 7e80 <audioFrameString3+0x360>
    7cee:	9002      	str	r0, [sp, #8]
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    7cf0:	ee60 0a86 	vmul.f32	s1, s1, s12
    7cf4:	ee60 0aa6 	vmul.f32	s1, s1, s13
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    7cf8:	eee7 0a27 	vfma.f32	s1, s14, s15
    7cfc:	f004 f8a4 	bl	be48 <__LEAF_clip_veneer>
    7d00:	9802      	ldr	r0, [sp, #8]
    7d02:	f004 fa31 	bl	c168 <__tStiffString_setPluckPosNoUpdate_veneer>
			float mainDecay = (1.0f - knobScaled[8]);
    7d06:	edda 7a08 	vldr	s15, [sl, #32]
			if (mainDecay < 0.01f)
    7d0a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 7e84 <audioFrameString3+0x364>
			float dampKnob = (1.0f - knobScaled[9]);
    7d0e:	ed9a 8a09 	vldr	s16, [sl, #36]	; 0x24
			if (mainDecay < 0.01f)
    7d12:	eef4 7ac7 	vcmpe.f32	s15, s14
    7d16:	9802      	ldr	r0, [sp, #8]
			float dampKnob = (1.0f - knobScaled[9]);
    7d18:	ee38 8ac8 	vsub.f32	s16, s17, s16
			if (mainDecay < 0.01f)
    7d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7d20:	dc58      	bgt.n	7dd4 <audioFrameString3+0x2b4>
			float mainDecay = (1.0f - knobScaled[8]);
    7d22:	ee78 7ae7 	vsub.f32	s15, s17, s15
			tStiffString_setDecayNoUpdate(&stringsC[i], mainDecay * mainDecay * mainDecay * 0.001f);
    7d26:	ed9f 7a58 	vldr	s14, [pc, #352]	; 7e88 <audioFrameString3+0x368>
    7d2a:	ee27 0aa7 	vmul.f32	s0, s15, s15
    7d2e:	ee20 0a07 	vmul.f32	s0, s0, s14
    7d32:	ee20 0a27 	vmul.f32	s0, s0, s15
    7d36:	9002      	str	r0, [sp, #8]
    7d38:	f004 f93a 	bl	bfb0 <__tStiffString_setDecayNoUpdate_veneer>
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    7d3c:	ee28 0a08 	vmul.f32	s0, s16, s16
    7d40:	eddf 7a52 	vldr	s15, [pc, #328]	; 7e8c <audioFrameString3+0x36c>
    7d44:	9802      	ldr	r0, [sp, #8]
		for (int i = 0; i < numStringsThisBoard; i++)
    7d46:	3401      	adds	r4, #1
    7d48:	3604      	adds	r6, #4
    7d4a:	3704      	adds	r7, #4
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    7d4c:	ee20 0a27 	vmul.f32	s0, s0, s15
		for (int i = 0; i < numStringsThisBoard; i++)
    7d50:	f109 0904 	add.w	r9, r9, #4
    7d54:	3504      	adds	r5, #4
    7d56:	f108 0804 	add.w	r8, r8, #4
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    7d5a:	ee20 0a08 	vmul.f32	s0, s0, s16
    7d5e:	f004 f8df 	bl	bf20 <__tStiffString_setDecayHighFreqNoUpdate_veneer>
			tStiffString_updateOscillators(&stringsC[i]);
    7d62:	9802      	ldr	r0, [sp, #8]
    7d64:	f003 ffbc 	bl	bce0 <__tStiffString_updateOscillators_veneer>
			tStiffString_updateOutputWeights(&stringsC[i]);
    7d68:	9802      	ldr	r0, [sp, #8]
    7d6a:	f003 ff45 	bl	bbf8 <__tStiffString_updateOutputWeights_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    7d6e:	9b03      	ldr	r3, [sp, #12]
    7d70:	781b      	ldrb	r3, [r3, #0]
    7d72:	42a3      	cmp	r3, r4
    7d74:	f73f af02 	bgt.w	7b7c <audioFrameString3+0x5c>
    7d78:	4c45      	ldr	r4, [pc, #276]	; (7e90 <audioFrameString3+0x370>)
    7d7a:	9b05      	ldr	r3, [sp, #20]
    7d7c:	f504 7500 	add.w	r5, r4, #512	; 0x200
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    7d80:	ed9f 8a44 	vldr	s16, [pc, #272]	; 7e94 <audioFrameString3+0x374>
    7d84:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    7d88:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    7d8c:	f7ff fdd8 	bl	7940 <audioTickString3>
    7d90:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    7d94:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    7d96:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    7d9a:	42ac      	cmp	r4, r5
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    7d9c:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    7da0:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    7da4:	d1f2      	bne.n	7d8c <audioFrameString3+0x26c>
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7da6:	483c      	ldr	r0, [pc, #240]	; (7e98 <audioFrameString3+0x378>)
		timeFrame = DWT->CYCCNT - tempCountFrame;
    7da8:	4b24      	ldr	r3, [pc, #144]	; (7e3c <audioFrameString3+0x31c>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7daa:	ed90 7a00 	vldr	s14, [r0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    7dae:	685b      	ldr	r3, [r3, #4]
    7db0:	9804      	ldr	r0, [sp, #16]
    7db2:	493a      	ldr	r1, [pc, #232]	; (7e9c <audioFrameString3+0x37c>)
    7db4:	1a1b      	subs	r3, r3, r0
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7db6:	4a3a      	ldr	r2, [pc, #232]	; (7ea0 <audioFrameString3+0x380>)
    7db8:	ee07 3a90 	vmov	s15, r3
		timeFrame = DWT->CYCCNT - tempCountFrame;
    7dbc:	600b      	str	r3, [r1, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    7dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
    7dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
    7dc6:	edc2 7a00 	vstr	s15, [r2]
}
    7dca:	b00b      	add	sp, #44	; 0x2c
    7dcc:	ecbd 8b08 	vpop	{d8-d11}
    7dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7dd4:	eeb0 0a69 	vmov.f32	s0, s19
    7dd8:	e7ad      	b.n	7d36 <audioFrameString3+0x216>
			float pluckKnobVal2 = pluckKnobVal;
    7dda:	eef0 6a67 	vmov.f32	s13, s15
    7dde:	e77c      	b.n	7cda <audioFrameString3+0x1ba>
			for (int i = 0; i < numStringsThisBoard; i++)
    7de0:	4b18      	ldr	r3, [pc, #96]	; (7e44 <audioFrameString3+0x324>)
    7de2:	9303      	str	r3, [sp, #12]
    7de4:	781b      	ldrb	r3, [r3, #0]
    7de6:	b31b      	cbz	r3, 7e30 <audioFrameString3+0x310>
				previousStringInputs[i] = 0;
    7de8:	4a2e      	ldr	r2, [pc, #184]	; (7ea4 <audioFrameString3+0x384>)
    7dea:	2100      	movs	r1, #0
			for (int i = 0; i < numStringsThisBoard; i++)
    7dec:	2b01      	cmp	r3, #1
				previousStringInputs[i] = 0;
    7dee:	8011      	strh	r1, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
    7df0:	d01e      	beq.n	7e30 <audioFrameString3+0x310>
    7df2:	2b02      	cmp	r3, #2
				previousStringInputs[i] = 0;
    7df4:	8051      	strh	r1, [r2, #2]
			for (int i = 0; i < numStringsThisBoard; i++)
    7df6:	d01b      	beq.n	7e30 <audioFrameString3+0x310>
    7df8:	2b03      	cmp	r3, #3
				previousStringInputs[i] = 0;
    7dfa:	8091      	strh	r1, [r2, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
    7dfc:	d018      	beq.n	7e30 <audioFrameString3+0x310>
    7dfe:	2b04      	cmp	r3, #4
				previousStringInputs[i] = 0;
    7e00:	80d1      	strh	r1, [r2, #6]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e02:	d015      	beq.n	7e30 <audioFrameString3+0x310>
    7e04:	2b05      	cmp	r3, #5
				previousStringInputs[i] = 0;
    7e06:	8111      	strh	r1, [r2, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e08:	d012      	beq.n	7e30 <audioFrameString3+0x310>
    7e0a:	2b06      	cmp	r3, #6
				previousStringInputs[i] = 0;
    7e0c:	8151      	strh	r1, [r2, #10]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e0e:	d00f      	beq.n	7e30 <audioFrameString3+0x310>
    7e10:	2b07      	cmp	r3, #7
				previousStringInputs[i] = 0;
    7e12:	8191      	strh	r1, [r2, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e14:	d00c      	beq.n	7e30 <audioFrameString3+0x310>
    7e16:	2b08      	cmp	r3, #8
				previousStringInputs[i] = 0;
    7e18:	81d1      	strh	r1, [r2, #14]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e1a:	d009      	beq.n	7e30 <audioFrameString3+0x310>
    7e1c:	2b09      	cmp	r3, #9
				previousStringInputs[i] = 0;
    7e1e:	8211      	strh	r1, [r2, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e20:	d006      	beq.n	7e30 <audioFrameString3+0x310>
    7e22:	2b0a      	cmp	r3, #10
				previousStringInputs[i] = 0;
    7e24:	8251      	strh	r1, [r2, #18]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e26:	d003      	beq.n	7e30 <audioFrameString3+0x310>
    7e28:	2b0b      	cmp	r3, #11
				previousStringInputs[i] = 0;
    7e2a:	8291      	strh	r1, [r2, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
    7e2c:	d000      	beq.n	7e30 <audioFrameString3+0x310>
				previousStringInputs[i] = 0;
    7e2e:	82d1      	strh	r1, [r2, #22]
			resetStringInputs = 0;
    7e30:	2200      	movs	r2, #0
			newPluck = 1;
    7e32:	2101      	movs	r1, #1
			resetStringInputs = 0;
    7e34:	7022      	strb	r2, [r4, #0]
			newPluck = 1;
    7e36:	4a1c      	ldr	r2, [pc, #112]	; (7ea8 <audioFrameString3+0x388>)
    7e38:	6011      	str	r1, [r2, #0]
    7e3a:	e682      	b.n	7b42 <audioFrameString3+0x22>
    7e3c:	e0001000 	.word	0xe0001000
    7e40:	20005771 	.word	0x20005771
    7e44:	20000694 	.word	0x20000694
    7e48:	20001190 	.word	0x20001190
    7e4c:	2001d078 	.word	0x2001d078
    7e50:	42fe0000 	.word	0x42fe0000
    7e54:	00000000 	.word	0x00000000
    7e58:	42c80000 	.word	0x42c80000
    7e5c:	3c23d70a 	.word	0x3c23d70a
    7e60:	3dcccccd 	.word	0x3dcccccd
    7e64:	2001d080 	.word	0x2001d080
    7e68:	2001d090 	.word	0x2001d090
    7e6c:	2001421c 	.word	0x2001421c
    7e70:	2001d098 	.word	0x2001d098
    7e74:	43480000 	.word	0x43480000
    7e78:	3ba3d70a 	.word	0x3ba3d70a
    7e7c:	3ecccccd 	.word	0x3ecccccd
    7e80:	3f666666 	.word	0x3f666666
    7e84:	3f7d70a4 	.word	0x3f7d70a4
    7e88:	3a83126f 	.word	0x3a83126f
    7e8c:	3983126f 	.word	0x3983126f
    7e90:	30000000 	.word	0x30000000
    7e94:	4b000000 	.word	0x4b000000
    7e98:	20000684 	.word	0x20000684
    7e9c:	20014244 	.word	0x20014244
    7ea0:	200051cc 	.word	0x200051cc
    7ea4:	20005358 	.word	0x20005358
    7ea8:	200052e8 	.word	0x200052e8
    7eac:	20014224 	.word	0x20014224
    7eb0:	2001d070 	.word	0x2001d070
    7eb4:	2001d088 	.word	0x2001d088
    7eb8:	200051e8 	.word	0x200051e8
						volatile float difference = pickupKnobVal - ratioOfNoteToOpenString;
    7ebc:	ed9d 7a07 	vldr	s14, [sp, #28]
    7ec0:	ee37 7ac7 	vsub.f32	s14, s15, s14
    7ec4:	ed8d 7a08 	vstr	s14, [sp, #32]
						pickupKnobVal2 = ratioOfNoteToOpenString-difference;
    7ec8:	eddd 6a07 	vldr	s13, [sp, #28]
    7ecc:	ed9d 7a08 	vldr	s14, [sp, #32]
    7ed0:	ee76 6ac7 	vsub.f32	s13, s13, s14
    7ed4:	e6cf      	b.n	7c76 <audioFrameString3+0x156>
					tStiffString_setStiffnessNoUpdate(&stringsC[i],squishedStiffness );
    7ed6:	eeb0 0a6b 	vmov.f32	s0, s23
    7eda:	9002      	str	r0, [sp, #8]
    7edc:	f004 f964 	bl	c1a8 <__tStiffString_setStiffnessNoUpdate_veneer>
					prevSquishedStiffness[i] = squishedStiffness;
    7ee0:	9802      	ldr	r0, [sp, #8]
    7ee2:	edc8 ba00 	vstr	s23, [r8]
    7ee6:	e691      	b.n	7c0c <audioFrameString3+0xec>
	...

00007f00 <oscillator_tick>:
{
    7f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		oscOuts[0][i][string] = 0.0f;
    7f04:	0082      	lsls	r2, r0, #2
    7f06:	4cd1      	ldr	r4, [pc, #836]	; (824c <_Min_Stack_Size+0x24c>)
    7f08:	1c85      	adds	r5, r0, #2
    7f0a:	f04f 0b00 	mov.w	fp, #0
		oscOuts[1][i][string] = 0.0f;
    7f0e:	f100 0108 	add.w	r1, r0, #8
		oscOuts[0][i][string] = 0.0f;
    7f12:	1d07      	adds	r7, r0, #4
    7f14:	eb04 0a80 	add.w	sl, r4, r0, lsl #2
		oscOuts[1][i][string] = 0.0f;
    7f18:	1d86      	adds	r6, r0, #6
{
    7f1a:	4603      	mov	r3, r0
		oscOuts[1][i][string] = 0.0f;
    7f1c:	300a      	adds	r0, #10
	for (int osc = 0; osc < oscToTick; osc++)
    7f1e:	f8df 9350 	ldr.w	r9, [pc, #848]	; 8270 <_Min_Stack_Size+0x270>
		oscOuts[1][i][string] = 0.0f;
    7f22:	eb04 0686 	add.w	r6, r4, r6, lsl #2
{
    7f26:	ed2d 8b04 	vpush	{d8-d9}
    7f2a:	b089      	sub	sp, #36	; 0x24
		oscOuts[0][i][string] = 0.0f;
    7f2c:	f8ca b000 	str.w	fp, [sl]
		oscOuts[1][i][string] = 0.0f;
    7f30:	f8c6 b000 	str.w	fp, [r6]
		oscOuts[0][i][string] = 0.0f;
    7f34:	9200      	str	r2, [sp, #0]
    7f36:	eb04 0285 	add.w	r2, r4, r5, lsl #2
		oscOuts[1][i][string] = 0.0f;
    7f3a:	9101      	str	r1, [sp, #4]
		oscOuts[0][i][string] = 0.0f;
    7f3c:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    7f40:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    7f44:	9002      	str	r0, [sp, #8]
    7f46:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[0][i][string] = 0.0f;
    7f4a:	eb04 0287 	add.w	r2, r4, r7, lsl #2
    7f4e:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    7f52:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    7f56:	f8c2 b000 	str.w	fp, [r2]
	for (int osc = 0; osc < oscToTick; osc++)
    7f5a:	f899 2000 	ldrb.w	r2, [r9]
    7f5e:	b19a      	cbz	r2, 7f88 <oscillator_tick+0x88>
		if (oscOn[osc])
    7f60:	f8df 8310 	ldr.w	r8, [pc, #784]	; 8274 <_Min_Stack_Size+0x274>
    7f64:	eeb0 8a40 	vmov.f32	s16, s0
    7f68:	f898 0000 	ldrb.w	r0, [r8]
    7f6c:	b988      	cbnz	r0, 7f92 <oscillator_tick+0x92>
	for (int osc = 0; osc < oscToTick; osc++)
    7f6e:	2a01      	cmp	r2, #1
    7f70:	d90a      	bls.n	7f88 <oscillator_tick+0x88>
		if (oscOn[osc])
    7f72:	f898 1001 	ldrb.w	r1, [r8, #1]
    7f76:	2900      	cmp	r1, #0
    7f78:	d16e      	bne.n	8058 <_Min_Stack_Size+0x58>
	for (int osc = 0; osc < oscToTick; osc++)
    7f7a:	2a02      	cmp	r2, #2
    7f7c:	d904      	bls.n	7f88 <oscillator_tick+0x88>
		if (oscOn[osc])
    7f7e:	f898 2002 	ldrb.w	r2, [r8, #2]
    7f82:	2a00      	cmp	r2, #0
    7f84:	f040 80e6 	bne.w	8154 <_Min_Stack_Size+0x154>
}
    7f88:	b009      	add	sp, #36	; 0x24
    7f8a:	ecbd 8b04 	vpop	{d8-d9}
    7f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float freqOffset= oscParams[OscFreq].realVal[string];
    7f92:	00a9      	lsls	r1, r5, #2
    7f94:	4aae      	ldr	r2, [pc, #696]	; (8250 <_Min_Stack_Size+0x250>)
    7f96:	9305      	str	r3, [sp, #20]
    7f98:	440a      	add	r2, r1
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    7f9a:	9b00      	ldr	r3, [sp, #0]
    7f9c:	48ad      	ldr	r0, [pc, #692]	; (8254 <_Min_Stack_Size+0x254>)
			float freqToSmooth = (note + (fine*0.01f));
    7f9e:	ed92 7ab6 	vldr	s14, [r2, #728]	; 0x2d8
    7fa2:	eddf 7aad 	vldr	s15, [pc, #692]	; 8258 <_Min_Stack_Size+0x258>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    7fa6:	4418      	add	r0, r3
			float shape = oscParams[OscShape].realVal[string];
    7fa8:	edd2 0ac4 	vldr	s1, [r2, #784]	; 0x310
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    7fac:	eea7 0a27 	vfma.f32	s0, s14, s15
			float filterSend = oscParams[OscFilterSend].realVal[string];
    7fb0:	edd2 8afc 	vldr	s17, [r2, #1008]	; 0x3f0
			float freqOffset= oscParams[OscFreq].realVal[string];
    7fb4:	edd2 9abd 	vldr	s19, [r2, #756]	; 0x2f4
			float amp = oscParams[OscAmp].realVal[string];
    7fb8:	ed92 9acb 	vldr	s18, [r2, #812]	; 0x32c
			float shape = oscParams[OscShape].realVal[string];
    7fbc:	edcd 0a04 	vstr	s1, [sp, #16]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    7fc0:	9003      	str	r0, [sp, #12]
    7fc2:	f004 f851 	bl	c068 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    7fc6:	9803      	ldr	r0, [sp, #12]
    7fc8:	f003 ff62 	bl	be90 <__tExpSmooth_tick_veneer>
    7fcc:	9b00      	ldr	r3, [sp, #0]
    7fce:	4aa3      	ldr	r2, [pc, #652]	; (825c <_Min_Stack_Size+0x25c>)
    7fd0:	441a      	add	r2, r3
    7fd2:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    7fd6:	ee30 0a27 	vadd.f32	s0, s0, s15
    7fda:	f003 ffad 	bl	bf38 <__mtofTableLookup_veneer>
    7fde:	9b00      	ldr	r3, [sp, #0]
    7fe0:	4a9f      	ldr	r2, [pc, #636]	; (8260 <_Min_Stack_Size+0x260>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    7fe2:	a807      	add	r0, sp, #28
    7fe4:	499f      	ldr	r1, [pc, #636]	; (8264 <_Min_Stack_Size+0x264>)
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    7fe6:	441a      	add	r2, r3
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    7fe8:	9b05      	ldr	r3, [sp, #20]
			float sample = 0.0f;
    7fea:	f8cd b01c 	str.w	fp, [sp, #28]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    7fee:	edd2 7a00 	vldr	s15, [r2]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    7ff2:	2200      	movs	r2, #0
    7ff4:	f8d1 b000 	ldr.w	fp, [r1]
    7ff8:	eee0 9a27 	vfma.f32	s19, s0, s15
    7ffc:	4611      	mov	r1, r2
    7ffe:	eddd 0a04 	vldr	s1, [sp, #16]
    8002:	9303      	str	r3, [sp, #12]
    8004:	eeb0 0a69 	vmov.f32	s0, s19
    8008:	47d8      	blx	fp
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    800a:	4a91      	ldr	r2, [pc, #580]	; (8250 <_Min_Stack_Size+0x250>)
    800c:	9b03      	ldr	r3, [sp, #12]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    800e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			sample *= amp;
    8012:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8016:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			sourceValues[osc][string] = sample;
    801a:	9900      	ldr	r1, [sp, #0]
			sample *= amp;
    801c:	ee29 7a07 	vmul.f32	s14, s18, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8020:	ed92 6aaa 	vldr	s12, [r2, #680]	; 0x2a8
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8024:	ee77 7ae8 	vsub.f32	s15, s15, s17
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8028:	4a8f      	ldr	r2, [pc, #572]	; (8268 <_Min_Stack_Size+0x268>)
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    802a:	ee68 8a86 	vmul.f32	s17, s17, s12
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    802e:	edd2 6a00 	vldr	s13, [r2]
			sourceValues[osc][string] = sample;
    8032:	4a8e      	ldr	r2, [pc, #568]	; (826c <_Min_Stack_Size+0x26c>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8034:	ee67 6a26 	vmul.f32	s13, s14, s13
			sourceValues[osc][string] = sample;
    8038:	440a      	add	r2, r1
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    803a:	ee67 7aa6 	vmul.f32	s15, s15, s13
			sourceValues[osc][string] = sample;
    803e:	ed82 7a00 	vstr	s14, [r2]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8042:	ee68 8aa6 	vmul.f32	s17, s17, s13
	for (int osc = 0; osc < oscToTick; osc++)
    8046:	f899 2000 	ldrb.w	r2, [r9]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    804a:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    804e:	edca 8a00 	vstr	s17, [sl]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8052:	edc6 7a00 	vstr	s15, [r6]
    8056:	e78a      	b.n	7f6e <oscillator_tick+0x6e>
			float freqOffset= oscParams[OscFreq].realVal[string];
    8058:	4e7d      	ldr	r6, [pc, #500]	; (8250 <_Min_Stack_Size+0x250>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    805a:	eeb0 0a48 	vmov.f32	s0, s16
    805e:	487d      	ldr	r0, [pc, #500]	; (8254 <_Min_Stack_Size+0x254>)
			float freqOffset= oscParams[OscFreq].realVal[string];
    8060:	ea4f 0a85 	mov.w	sl, r5, lsl #2
			float fine = oscParams[OscFine].realVal[string];
    8064:	f206 4244 	addw	r2, r6, #1092	; 0x444
			float freqToSmooth = (note + (fine*0.01f));
    8068:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8258 <_Min_Stack_Size+0x258>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    806c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    8070:	9304      	str	r3, [sp, #16]
			float fine = oscParams[OscFine].realVal[string];
    8072:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8076:	9000      	str	r0, [sp, #0]
			float freqToSmooth = (note + (fine*0.01f));
    8078:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    807c:	f506 628c 	add.w	r2, r6, #1120	; 0x460
    8080:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8084:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    8088:	edd2 9a00 	vldr	s19, [r2]
			float shape = oscParams[OscShape].realVal[string];
    808c:	f206 427c 	addw	r2, r6, #1148	; 0x47c
    8090:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    8094:	edd2 0a00 	vldr	s1, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    8098:	f506 6293 	add.w	r2, r6, #1176	; 0x498
    809c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			float shape = oscParams[OscShape].realVal[string];
    80a0:	edcd 0a03 	vstr	s1, [sp, #12]
			float amp = oscParams[OscAmp].realVal[string];
    80a4:	ed92 9a00 	vldr	s18, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    80a8:	f206 525c 	addw	r2, r6, #1372	; 0x55c
    80ac:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    80b0:	edd2 8a00 	vldr	s17, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    80b4:	f003 ffd8 	bl	c068 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    80b8:	9800      	ldr	r0, [sp, #0]
    80ba:	f003 fee9 	bl	be90 <__tExpSmooth_tick_veneer>
    80be:	4a67      	ldr	r2, [pc, #412]	; (825c <_Min_Stack_Size+0x25c>)
    80c0:	4452      	add	r2, sl
    80c2:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    80c6:	ee30 0a27 	vadd.f32	s0, s0, s15
    80ca:	f003 ff35 	bl	bf38 <__mtofTableLookup_veneer>
    80ce:	4a64      	ldr	r2, [pc, #400]	; (8260 <_Min_Stack_Size+0x260>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    80d0:	9b04      	ldr	r3, [sp, #16]
    80d2:	2101      	movs	r1, #1
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    80d4:	4452      	add	r2, sl
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    80d6:	a807      	add	r0, sp, #28
    80d8:	eddd 0a03 	vldr	s1, [sp, #12]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    80dc:	edd2 7a00 	vldr	s15, [r2]
			float sample = 0.0f;
    80e0:	2200      	movs	r2, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    80e2:	9300      	str	r3, [sp, #0]
    80e4:	eee0 9a27 	vfma.f32	s19, s0, s15
			float sample = 0.0f;
    80e8:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    80ea:	4a5e      	ldr	r2, [pc, #376]	; (8264 <_Min_Stack_Size+0x264>)
    80ec:	f8d2 b004 	ldr.w	fp, [r2, #4]
    80f0:	2200      	movs	r2, #0
    80f2:	eeb0 0a69 	vmov.f32	s0, s19
    80f6:	47d8      	blx	fp
			sample *= amp;
    80f8:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    80fc:	9b01      	ldr	r3, [sp, #4]
    80fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8102:	4859      	ldr	r0, [pc, #356]	; (8268 <_Min_Stack_Size+0x268>)
			sample *= amp;
    8104:	ee29 7a07 	vmul.f32	s14, s18, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8108:	eb04 0183 	add.w	r1, r4, r3, lsl #2
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    810c:	9b00      	ldr	r3, [sp, #0]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    810e:	edd0 6a00 	vldr	s13, [r0]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8112:	ee77 7ae8 	vsub.f32	s15, s15, s17
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8116:	f203 1005 	addw	r0, r3, #261	; 0x105
	for (int osc = 0; osc < oscToTick; osc++)
    811a:	f899 2000 	ldrb.w	r2, [r9]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    811e:	ee67 6a26 	vmul.f32	s13, s14, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8122:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	for (int osc = 0; osc < oscToTick; osc++)
    8126:	2a02      	cmp	r2, #2
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8128:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    812c:	ed96 6a00 	vldr	s12, [r6]
    8130:	ee68 8a86 	vmul.f32	s17, s17, s12
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8134:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8138:	ee68 8aa6 	vmul.f32	s17, s17, s13
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    813c:	edc1 7a00 	vstr	s15, [r1]
			sourceValues[osc][string] = sample;
    8140:	494a      	ldr	r1, [pc, #296]	; (826c <_Min_Stack_Size+0x26c>)
    8142:	4451      	add	r1, sl
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8144:	44a2      	add	sl, r4
			sourceValues[osc][string] = sample;
    8146:	ed81 7a00 	vstr	s14, [r1]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    814a:	edca 8a00 	vstr	s17, [sl]
	for (int osc = 0; osc < oscToTick; osc++)
    814e:	f63f af16 	bhi.w	7f7e <oscillator_tick+0x7e>
    8152:	e719      	b.n	7f88 <oscillator_tick+0x88>
			float freqOffset= oscParams[OscFreq].realVal[string];
    8154:	4e3e      	ldr	r6, [pc, #248]	; (8250 <_Min_Stack_Size+0x250>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8156:	eeb0 0a48 	vmov.f32	s0, s16
    815a:	483e      	ldr	r0, [pc, #248]	; (8254 <_Min_Stack_Size+0x254>)
			float fine = oscParams[OscFine].realVal[string];
    815c:	f506 62b6 	add.w	r2, r6, #1456	; 0x5b0
			float freqToSmooth = (note + (fine*0.01f));
    8160:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8258 <_Min_Stack_Size+0x258>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    8164:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    8168:	9303      	str	r3, [sp, #12]
			float fine = oscParams[OscFine].realVal[string];
    816a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    816e:	9000      	str	r0, [sp, #0]
    8170:	00bf      	lsls	r7, r7, #2
			float freqToSmooth = (note + (fine*0.01f));
    8172:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    8176:	f206 52cc 	addw	r2, r6, #1484	; 0x5cc
    817a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    817e:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    8182:	ed92 9a00 	vldr	s18, [r2]
			float shape = oscParams[OscShape].realVal[string];
    8186:	f506 62bd 	add.w	r2, r6, #1512	; 0x5e8
    818a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    818e:	edd2 0a00 	vldr	s1, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    8192:	f206 6204 	addw	r2, r6, #1540	; 0x604
    8196:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			float shape = oscParams[OscShape].realVal[string];
    819a:	edcd 0a01 	vstr	s1, [sp, #4]
			float amp = oscParams[OscAmp].realVal[string];
    819e:	ed92 8a00 	vldr	s16, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    81a2:	f506 62d9 	add.w	r2, r6, #1736	; 0x6c8
    81a6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    81aa:	edd2 8a00 	vldr	s17, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    81ae:	f003 ff5b 	bl	c068 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    81b2:	9800      	ldr	r0, [sp, #0]
    81b4:	f003 fe6c 	bl	be90 <__tExpSmooth_tick_veneer>
    81b8:	4a28      	ldr	r2, [pc, #160]	; (825c <_Min_Stack_Size+0x25c>)
    81ba:	443a      	add	r2, r7
    81bc:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    81c0:	ee30 0a27 	vadd.f32	s0, s0, s15
    81c4:	f003 feb8 	bl	bf38 <__mtofTableLookup_veneer>
    81c8:	4a25      	ldr	r2, [pc, #148]	; (8260 <_Min_Stack_Size+0x260>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    81ca:	9b03      	ldr	r3, [sp, #12]
    81cc:	a807      	add	r0, sp, #28
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    81ce:	443a      	add	r2, r7
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    81d0:	eddd 0a01 	vldr	s1, [sp, #4]
    81d4:	2102      	movs	r1, #2
    81d6:	9300      	str	r3, [sp, #0]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    81d8:	edd2 7a00 	vldr	s15, [r2]
			float sample = 0.0f;
    81dc:	2200      	movs	r2, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    81de:	eea0 9a27 	vfma.f32	s18, s0, s15
			float sample = 0.0f;
    81e2:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    81e4:	4a1f      	ldr	r2, [pc, #124]	; (8264 <_Min_Stack_Size+0x264>)
    81e6:	6895      	ldr	r5, [r2, #8]
    81e8:	2200      	movs	r2, #0
    81ea:	eeb0 0a49 	vmov.f32	s0, s18
    81ee:	47a8      	blx	r5
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    81f0:	9b00      	ldr	r3, [sp, #0]
			sample *= amp;
    81f2:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    81f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    81fa:	f503 73b0 	add.w	r3, r3, #352	; 0x160
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    81fe:	491a      	ldr	r1, [pc, #104]	; (8268 <_Min_Stack_Size+0x268>)
			sample *= amp;
    8200:	ee28 7a07 	vmul.f32	s14, s16, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8204:	9802      	ldr	r0, [sp, #8]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8206:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			sourceValues[osc][string] = sample;
    820a:	4b18      	ldr	r3, [pc, #96]	; (826c <_Min_Stack_Size+0x26c>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    820c:	ed91 6a00 	vldr	s12, [r1]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8210:	ee77 7ae8 	vsub.f32	s15, s15, s17
			sourceValues[osc][string] = sample;
    8214:	443b      	add	r3, r7
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8216:	edd6 6a00 	vldr	s13, [r6]
    821a:	19e2      	adds	r2, r4, r7
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    821c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
			sourceValues[osc][string] = sample;
    8220:	ed83 7a00 	vstr	s14, [r3]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    8224:	ee27 7a06 	vmul.f32	s14, s14, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8228:	ee66 8aa8 	vmul.f32	s17, s13, s17
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    822c:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8230:	ee68 8a87 	vmul.f32	s17, s17, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    8234:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    8238:	edc2 8a00 	vstr	s17, [r2]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    823c:	edc4 7a00 	vstr	s15, [r4]
}
    8240:	b009      	add	sp, #36	; 0x24
    8242:	ecbd 8b04 	vpop	{d8-d9}
    8246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    824a:	bf00      	nop
    824c:	2001d690 	.word	0x2001d690
    8250:	20019320 	.word	0x20019320
    8254:	2001d768 	.word	0x2001d768
    8258:	3c23d70a 	.word	0x3c23d70a
    825c:	2001d600 	.word	0x2001d600
    8260:	2001d394 	.word	0x2001d394
    8264:	2001d830 	.word	0x2001d830
    8268:	200008d0 	.word	0x200008d0
    826c:	2001d8ac 	.word	0x2001d8ac
    8270:	200008e4 	.word	0x200008e4
    8274:	2001d68c 	.word	0x2001d68c
    8278:	f3af 8000 	nop.w
    827c:	f3af 8000 	nop.w

00008280 <sawSquareTick>:
{
    8280:	b538      	push	{r3, r4, r5, lr}
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    8282:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    8286:	4c0e      	ldr	r4, [pc, #56]	; (82c0 <sawSquareTick+0x40>)
{
    8288:	4605      	mov	r5, r0
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    828a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    828e:	ed2d 8b02 	vpush	{d8}
    8292:	eeb0 8a60 	vmov.f32	s16, s1
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    8296:	4620      	mov	r0, r4
    8298:	f003 ff2a 	bl	c0f0 <__tPBSawSquare_setFreq_veneer>
	tPBSawSquare_setShape(&sawPaired[v][string], shape);
    829c:	4620      	mov	r0, r4
    829e:	eeb0 0a48 	vmov.f32	s0, s16
    82a2:	f003 fdb5 	bl	be10 <__tPBSawSquare_setShape_veneer>
    *sample += tPBSawSquare_tick(&sawPaired[v][string]);
    82a6:	4620      	mov	r0, r4
    82a8:	f003 ff5a 	bl	c160 <__tPBSawSquare_tick_veneer>
    82ac:	edd5 7a00 	vldr	s15, [r5]
    82b0:	ee37 0a80 	vadd.f32	s0, s15, s0
    82b4:	ed85 0a00 	vstr	s0, [r5]
}
    82b8:	ecbd 8b02 	vpop	{d8}
    82bc:	bd38      	pop	{r3, r4, r5, pc}
    82be:	bf00      	nop
    82c0:	2001d7d8 	.word	0x2001d7d8
    82c4:	f3af 8000 	nop.w
    82c8:	f3af 8000 	nop.w
    82cc:	f3af 8000 	nop.w
    82d0:	f3af 8000 	nop.w
    82d4:	f3af 8000 	nop.w
    82d8:	f3af 8000 	nop.w
    82dc:	f3af 8000 	nop.w

000082e0 <sineTriTick>:
{
    82e0:	b538      	push	{r3, r4, r5, lr}
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    82e2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    82e6:	4c0e      	ldr	r4, [pc, #56]	; (8320 <sineTriTick+0x40>)
{
    82e8:	4605      	mov	r5, r0
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    82ea:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    82ee:	ed2d 8b02 	vpush	{d8}
    82f2:	eeb0 8a60 	vmov.f32	s16, s1
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    82f6:	4620      	mov	r0, r4
    82f8:	f003 fee2 	bl	c0c0 <__tPBSineTriangle_setFreq_veneer>
    tPBSineTriangle_setShape(&sinePaired[v][string],shape);
    82fc:	4620      	mov	r0, r4
    82fe:	eeb0 0a48 	vmov.f32	s0, s16
    8302:	f003 fd3d 	bl	bd80 <__tPBSineTriangle_setShape_veneer>
    *sample += tPBSineTriangle_tick(&sinePaired[v][string]);
    8306:	4620      	mov	r0, r4
    8308:	f003 fe76 	bl	bff8 <__tPBSineTriangle_tick_veneer>
    830c:	edd5 7a00 	vldr	s15, [r5]
    8310:	ee37 0a80 	vadd.f32	s0, s15, s0
    8314:	ed85 0a00 	vstr	s0, [r5]
}
    8318:	ecbd 8b02 	vpop	{d8}
    831c:	bd38      	pop	{r3, r4, r5, pc}
    831e:	bf00      	nop
    8320:	2001d894 	.word	0x2001d894
    8324:	f3af 8000 	nop.w
    8328:	f3af 8000 	nop.w
    832c:	f3af 8000 	nop.w
    8330:	f3af 8000 	nop.w
    8334:	f3af 8000 	nop.w
    8338:	f3af 8000 	nop.w
    833c:	f3af 8000 	nop.w

00008340 <sawTick>:
	tPBSaw_setFreq(&saw[v][string], freq);
    8340:	4a0a      	ldr	r2, [pc, #40]	; (836c <sawTick+0x2c>)
    8342:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    8346:	b510      	push	{r4, lr}
    8348:	4604      	mov	r4, r0
    834a:	b082      	sub	sp, #8
	tPBSaw_setFreq(&saw[v][string], freq);
    834c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    8350:	9001      	str	r0, [sp, #4]
    8352:	f003 fd55 	bl	be00 <__tPBSaw_setFreq_veneer>
    *sample += tPBSaw_tick(&saw[v][string]);
    8356:	9801      	ldr	r0, [sp, #4]
    8358:	f003 fd8a 	bl	be70 <__tPBSaw_tick_veneer>
    835c:	edd4 7a00 	vldr	s15, [r4]
    8360:	ee37 0a80 	vadd.f32	s0, s15, s0
    8364:	ed84 0a00 	vstr	s0, [r4]
}
    8368:	b002      	add	sp, #8
    836a:	bd10      	pop	{r4, pc}
    836c:	2001d7c0 	.word	0x2001d7c0
    8370:	f3af 8000 	nop.w
    8374:	f3af 8000 	nop.w
    8378:	f3af 8000 	nop.w
    837c:	f3af 8000 	nop.w

00008380 <pulseTick>:
{
    8380:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_setFreq(&pulse[v][string], freq);
    8382:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    8386:	4c0e      	ldr	r4, [pc, #56]	; (83c0 <pulseTick+0x40>)
{
    8388:	4605      	mov	r5, r0
    tPBPulse_setFreq(&pulse[v][string], freq);
    838a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    838e:	ed2d 8b02 	vpush	{d8}
    8392:	eeb0 8a60 	vmov.f32	s16, s1
    tPBPulse_setFreq(&pulse[v][string], freq);
    8396:	4620      	mov	r0, r4
    8398:	f003 fcee 	bl	bd78 <__tPBPulse_setFreq_veneer>
    tPBPulse_setWidth(&pulse[v][string], shape);
    839c:	4620      	mov	r0, r4
    839e:	eeb0 0a48 	vmov.f32	s0, s16
    83a2:	f003 fdd5 	bl	bf50 <__tPBPulse_setWidth_veneer>
    *sample += tPBPulse_tick(&pulse[v][string]);
    83a6:	4620      	mov	r0, r4
    83a8:	f003 fe4a 	bl	c040 <__tPBPulse_tick_veneer>
    83ac:	edd5 7a00 	vldr	s15, [r5]
    83b0:	ee37 0a80 	vadd.f32	s0, s15, s0
    83b4:	ed85 0a00 	vstr	s0, [r5]
}
    83b8:	ecbd 8b02 	vpop	{d8}
    83bc:	bd38      	pop	{r3, r4, r5, pc}
    83be:	bf00      	nop
    83c0:	2001d7a4 	.word	0x2001d7a4
    83c4:	f3af 8000 	nop.w
    83c8:	f3af 8000 	nop.w
    83cc:	f3af 8000 	nop.w
    83d0:	f3af 8000 	nop.w
    83d4:	f3af 8000 	nop.w
    83d8:	f3af 8000 	nop.w
    83dc:	f3af 8000 	nop.w

000083e0 <sineTick>:
    tCycle_setFreq(&sine[v][string], freq);
    83e0:	4a0a      	ldr	r2, [pc, #40]	; (840c <sineTick+0x2c>)
    83e2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    83e6:	b510      	push	{r4, lr}
    83e8:	4604      	mov	r4, r0
    83ea:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
    83ec:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    83f0:	9001      	str	r0, [sp, #4]
    83f2:	f003 fcf1 	bl	bdd8 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
    83f6:	9801      	ldr	r0, [sp, #4]
    83f8:	f003 fd32 	bl	be60 <__tCycle_tick_veneer>
    83fc:	edd4 7a00 	vldr	s15, [r4]
    8400:	ee37 0a80 	vadd.f32	s0, s15, s0
    8404:	ed84 0a00 	vstr	s0, [r4]
}
    8408:	b002      	add	sp, #8
    840a:	bd10      	pop	{r4, pc}
    840c:	2001d87c 	.word	0x2001d87c
    8410:	f3af 8000 	nop.w
    8414:	f3af 8000 	nop.w
    8418:	f3af 8000 	nop.w
    841c:	f3af 8000 	nop.w

00008420 <triTick>:
{
    8420:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_setFreq(&tri[v][string], freq);
    8422:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    8426:	4c0e      	ldr	r4, [pc, #56]	; (8460 <triTick+0x40>)
{
    8428:	4605      	mov	r5, r0
    tPBTriangle_setFreq(&tri[v][string], freq);
    842a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    842e:	ed2d 8b02 	vpush	{d8}
    8432:	eeb0 8a60 	vmov.f32	s16, s1
    tPBTriangle_setFreq(&tri[v][string], freq);
    8436:	4620      	mov	r0, r4
    8438:	f003 fe4a 	bl	c0d0 <__tPBTriangle_setFreq_veneer>
    tPBTriangle_setSkew(&tri[v][string], shape);
    843c:	4620      	mov	r0, r4
    843e:	eeb0 0a48 	vmov.f32	s0, s16
    8442:	f003 fde1 	bl	c008 <__tPBTriangle_setSkew_veneer>
    *sample += tPBTriangle_tick(&tri[v][string]);
    8446:	4620      	mov	r0, r4
    8448:	f003 fcf2 	bl	be30 <__tPBTriangle_tick_veneer>
    844c:	edd5 7a00 	vldr	s15, [r5]
    8450:	ee37 0a80 	vadd.f32	s0, s15, s0
    8454:	ed85 0a00 	vstr	s0, [r5]
}
    8458:	ecbd 8b02 	vpop	{d8}
    845c:	bd38      	pop	{r3, r4, r5, pc}
    845e:	bf00      	nop
    8460:	2001da18 	.word	0x2001da18
    8464:	f3af 8000 	nop.w
    8468:	f3af 8000 	nop.w
    846c:	f3af 8000 	nop.w
    8470:	f3af 8000 	nop.w
    8474:	f3af 8000 	nop.w
    8478:	f3af 8000 	nop.w
    847c:	f3af 8000 	nop.w

00008480 <userTick>:
}
    8480:	4770      	bx	lr
    8482:	bf00      	nop
    8484:	f3af 8000 	nop.w
    8488:	f3af 8000 	nop.w
    848c:	f3af 8000 	nop.w
    8490:	f3af 8000 	nop.w
    8494:	f3af 8000 	nop.w
    8498:	f3af 8000 	nop.w
    849c:	f3af 8000 	nop.w

000084a0 <filter_tick>:
		float enabled = filtParams[FilterEnabled].realVal[string];
    84a0:	4b52      	ldr	r3, [pc, #328]	; (85ec <filter_tick+0x14c>)
    84a2:	f201 229b 	addw	r2, r1, #667	; 0x29b
		if (!enabledFilt[f]) continue;
    84a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    84aa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
{
    84ae:	b570      	push	{r4, r5, r6, lr}
    84b0:	ed2d 8b04 	vpush	{d8-d9}
		float enabled = filtParams[FilterEnabled].realVal[string];
    84b4:	ed92 7a00 	vldr	s14, [r2]
{
    84b8:	460c      	mov	r4, r1
    84ba:	4605      	mov	r5, r0
		if (!enabledFilt[f]) continue;
    84bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    84c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    84c4:	d97d      	bls.n	85c2 <filter_tick+0x122>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    84c6:	1c8a      	adds	r2, r1, #2
    84c8:	f503 612f 	add.w	r1, r3, #2800	; 0xaf0
    84cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		float valueToTest = MIDIcutoff + (note  * keyFollow);
    84d0:	edd1 7a00 	vldr	s15, [r1]
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    84d4:	f603 219c 	addw	r1, r3, #2716	; 0xa9c
    84d8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
		float valueToTest = MIDIcutoff + (note  * keyFollow);
    84dc:	edd2 6a00 	vldr	s13, [r2]
    84e0:	eee0 6a27 	vfma.f32	s13, s0, s15
		float enabled = filtParams[FilterEnabled].realVal[string];
    84e4:	f204 22c5 	addw	r2, r4, #709	; 0x2c5
		if (!enabledFilt[f]) continue;
    84e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    84ec:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    84f0:	ed92 9a00 	vldr	s18, [r2]
		if (!enabledFilt[f]) continue;
    84f4:	eeb4 9ae7 	vcmpe.f32	s18, s15
    84f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    84fc:	d953      	bls.n	85a6 <filter_tick+0x106>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    84fe:	1ca1      	adds	r1, r4, #2
    8500:	4a3b      	ldr	r2, [pc, #236]	; (85f0 <filter_tick+0x150>)
	if (enabledFilt[0])
    8502:	eeb4 7ae7 	vcmpe.f32	s14, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    8506:	f204 20ef 	addw	r0, r4, #751	; 0x2ef
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    850a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    850e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		float valueToTest = MIDIcutoff + (note  * keyFollow);
    8512:	edd1 5a00 	vldr	s11, [r1]
	if (enabledFilt[0])
    8516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float valueToTest = MIDIcutoff + (note  * keyFollow);
    851a:	ed11 6a15 	vldr	s12, [r1, #-84]	; 0xffffffac
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    851e:	ed93 8a00 	vldr	s16, [r3]
		float valueToTest = MIDIcutoff + (note  * keyFollow);
    8522:	eea0 6a25 	vfma.f32	s12, s0, s11
    8526:	eef0 8a46 	vmov.f32	s17, s12
	if (enabledFilt[0])
    852a:	dd1f      	ble.n	856c <filter_tick+0xcc>
		filterTick[0](&samples[0], 0, cutoff[0], string);
    852c:	4e31      	ldr	r6, [pc, #196]	; (85f4 <filter_tick+0x154>)
    852e:	eeb0 0a66 	vmov.f32	s0, s13
    8532:	4622      	mov	r2, r4
    8534:	2100      	movs	r1, #0
    8536:	6833      	ldr	r3, [r6, #0]
    8538:	4628      	mov	r0, r5
    853a:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
    853c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	if (enabledFilt[1])
    8540:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	samples[1] += sendToFilter2;
    8544:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    8548:	edd5 7a00 	vldr	s15, [r5]
    854c:	ee37 7a48 	vsub.f32	s14, s14, s16
	if (enabledFilt[1])
    8550:	eeb4 9ae6 	vcmpe.f32	s18, s13
	samples[1] += sendToFilter2;
    8554:	eea7 0a87 	vfma.f32	s0, s15, s14
	if (enabledFilt[1])
    8558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	samples[1] += sendToFilter2;
    855c:	ed85 0a01 	vstr	s0, [r5, #4]
	if (enabledFilt[1])
    8560:	dc11      	bgt.n	8586 <filter_tick+0xe6>
	return samples[1] + (samples[0] * sp);
    8562:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    8566:	ecbd 8b04 	vpop	{d8-d9}
    856a:	bd70      	pop	{r4, r5, r6, pc}
	float sendToFilter2 = samples[0] * (1.0f - sp);
    856c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    8570:	edd5 7a01 	vldr	s15, [r5, #4]
    8574:	edd5 6a00 	vldr	s13, [r5]
    8578:	4e1e      	ldr	r6, [pc, #120]	; (85f4 <filter_tick+0x154>)
	float sendToFilter2 = samples[0] * (1.0f - sp);
    857a:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    857e:	eee6 7a87 	vfma.f32	s15, s13, s14
    8582:	edc5 7a01 	vstr	s15, [r5, #4]
		filterTick[1](&samples[1], 1, cutoff[1], string);
    8586:	eeb0 0a68 	vmov.f32	s0, s17
    858a:	6873      	ldr	r3, [r6, #4]
    858c:	4622      	mov	r2, r4
    858e:	2101      	movs	r1, #1
    8590:	1d28      	adds	r0, r5, #4
    8592:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
    8594:	ed95 0a01 	vldr	s0, [r5, #4]
    8598:	edd5 7a00 	vldr	s15, [r5]
    859c:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    85a0:	ecbd 8b04 	vpop	{d8-d9}
    85a4:	bd70      	pop	{r4, r5, r6, pc}
	if (enabledFilt[0])
    85a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    85aa:	f204 22ef 	addw	r2, r4, #751	; 0x2ef
    85ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (enabledFilt[0])
    85b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    85b6:	ed93 8a00 	vldr	s16, [r3]
	if (enabledFilt[0])
    85ba:	dd05      	ble.n	85c8 <filter_tick+0x128>
	float cutoff[2] = {0.0f, 0.0f};
    85bc:	eddf 8a0e 	vldr	s17, [pc, #56]	; 85f8 <filter_tick+0x158>
    85c0:	e7b4      	b.n	852c <filter_tick+0x8c>
    85c2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 85f8 <filter_tick+0x158>
    85c6:	e78d      	b.n	84e4 <filter_tick+0x44>
	float sendToFilter2 = samples[0] * (1.0f - sp);
    85c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    85cc:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    85d0:	edd5 7a00 	vldr	s15, [r5]
    85d4:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    85d8:	eea7 0a27 	vfma.f32	s0, s14, s15
    85dc:	ed85 0a01 	vstr	s0, [r5, #4]
	return samples[1] + (samples[0] * sp);
    85e0:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    85e4:	ecbd 8b04 	vpop	{d8-d9}
    85e8:	bd70      	pop	{r4, r5, r6, pc}
    85ea:	bf00      	nop
    85ec:	20019320 	.word	0x20019320
    85f0:	20019eb8 	.word	0x20019eb8
    85f4:	2001d37c 	.word	0x2001d37c
    85f8:	00000000 	.word	0x00000000
    85fc:	f3af 8000 	nop.w

00008600 <lowpassTick>:
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    8600:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    8604:	4b0d      	ldr	r3, [pc, #52]	; (863c <lowpassTick+0x3c>)
{
    8606:	b530      	push	{r4, r5, lr}
    8608:	4605      	mov	r5, r0
    860a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    860c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    8610:	0094      	lsls	r4, r2, #2
    8612:	9001      	str	r0, [sp, #4]
    8614:	f003 fce8 	bl	bfe8 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    8618:	ed95 0a00 	vldr	s0, [r5]
    861c:	9801      	ldr	r0, [sp, #4]
    861e:	f003 fd5b 	bl	c0d8 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    8622:	4b07      	ldr	r3, [pc, #28]	; (8640 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    8624:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    8628:	4423      	add	r3, r4
    862a:	edd3 7a00 	vldr	s15, [r3]
    862e:	ee67 7a80 	vmul.f32	s15, s15, s0
    8632:	edc5 7a00 	vstr	s15, [r5]
}
    8636:	b003      	add	sp, #12
    8638:	bd30      	pop	{r4, r5, pc}
    863a:	bf00      	nop
    863c:	2001d4f0 	.word	0x2001d4f0
    8640:	2001d36c 	.word	0x2001d36c
    8644:	f3af 8000 	nop.w
    8648:	f3af 8000 	nop.w
    864c:	f3af 8000 	nop.w
    8650:	f3af 8000 	nop.w
    8654:	f3af 8000 	nop.w
    8658:	f3af 8000 	nop.w
    865c:	f3af 8000 	nop.w

00008660 <highpassTick>:
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    8660:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    8664:	4b0d      	ldr	r3, [pc, #52]	; (869c <highpassTick+0x3c>)
{
    8666:	b530      	push	{r4, r5, lr}
    8668:	4605      	mov	r5, r0
    866a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    866c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    8670:	0094      	lsls	r4, r2, #2
    8672:	9001      	str	r0, [sp, #4]
    8674:	f003 fcb8 	bl	bfe8 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
    8678:	ed95 0a00 	vldr	s0, [r5]
    867c:	9801      	ldr	r0, [sp, #4]
    867e:	f003 fd2b 	bl	c0d8 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    8682:	4b07      	ldr	r3, [pc, #28]	; (86a0 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
    8684:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    8688:	4423      	add	r3, r4
    868a:	edd3 7a00 	vldr	s15, [r3]
    868e:	ee67 7a80 	vmul.f32	s15, s15, s0
    8692:	edc5 7a00 	vstr	s15, [r5]
}
    8696:	b003      	add	sp, #12
    8698:	bd30      	pop	{r4, r5, pc}
    869a:	bf00      	nop
    869c:	2001d3ec 	.word	0x2001d3ec
    86a0:	2001d36c 	.word	0x2001d36c
    86a4:	f3af 8000 	nop.w
    86a8:	f3af 8000 	nop.w
    86ac:	f3af 8000 	nop.w
    86b0:	f3af 8000 	nop.w
    86b4:	f3af 8000 	nop.w
    86b8:	f3af 8000 	nop.w
    86bc:	f3af 8000 	nop.w

000086c0 <bandpassTick>:
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    86c0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    86c4:	4b0d      	ldr	r3, [pc, #52]	; (86fc <bandpassTick+0x3c>)
{
    86c6:	b530      	push	{r4, r5, lr}
    86c8:	4605      	mov	r5, r0
    86ca:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    86cc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    86d0:	0094      	lsls	r4, r2, #2
    86d2:	9001      	str	r0, [sp, #4]
    86d4:	f003 fc88 	bl	bfe8 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    86d8:	ed95 0a00 	vldr	s0, [r5]
    86dc:	9801      	ldr	r0, [sp, #4]
    86de:	f003 fcfb 	bl	c0d8 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    86e2:	4b07      	ldr	r3, [pc, #28]	; (8700 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    86e4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    86e8:	4423      	add	r3, r4
    86ea:	edd3 7a00 	vldr	s15, [r3]
    86ee:	ee67 7a80 	vmul.f32	s15, s15, s0
    86f2:	edc5 7a00 	vstr	s15, [r5]
}
    86f6:	b003      	add	sp, #12
    86f8:	bd30      	pop	{r4, r5, pc}
    86fa:	bf00      	nop
    86fc:	2001d218 	.word	0x2001d218
    8700:	2001d36c 	.word	0x2001d36c
    8704:	f3af 8000 	nop.w
    8708:	f3af 8000 	nop.w
    870c:	f3af 8000 	nop.w
    8710:	f3af 8000 	nop.w
    8714:	f3af 8000 	nop.w
    8718:	f3af 8000 	nop.w
    871c:	f3af 8000 	nop.w

00008720 <diodeLowpassTick>:
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    8720:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    8724:	4b0d      	ldr	r3, [pc, #52]	; (875c <diodeLowpassTick+0x3c>)
{
    8726:	b530      	push	{r4, r5, lr}
    8728:	4605      	mov	r5, r0
    872a:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    872c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    8730:	0094      	lsls	r4, r2, #2
    8732:	9001      	str	r0, [sp, #4]
    8734:	f003 fca0 	bl	c078 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    8738:	ed95 0a00 	vldr	s0, [r5]
    873c:	9801      	ldr	r0, [sp, #4]
    873e:	f003 fd0b 	bl	c158 <__tDiodeFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    8742:	4b07      	ldr	r3, [pc, #28]	; (8760 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    8744:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    8748:	4423      	add	r3, r4
    874a:	edd3 7a00 	vldr	s15, [r3]
    874e:	ee67 7a80 	vmul.f32	s15, s15, s0
    8752:	edc5 7a00 	vstr	s15, [r5]
}
    8756:	b003      	add	sp, #12
    8758:	bd30      	pop	{r4, r5, pc}
    875a:	bf00      	nop
    875c:	2001d2f8 	.word	0x2001d2f8
    8760:	2001d36c 	.word	0x2001d36c
    8764:	f3af 8000 	nop.w
    8768:	f3af 8000 	nop.w
    876c:	f3af 8000 	nop.w
    8770:	f3af 8000 	nop.w
    8774:	f3af 8000 	nop.w
    8778:	f3af 8000 	nop.w
    877c:	f3af 8000 	nop.w

00008780 <VZpeakTick>:
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    8780:	4b09      	ldr	r3, [pc, #36]	; (87a8 <VZpeakTick+0x28>)
    8782:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    8786:	b510      	push	{r4, lr}
    8788:	4604      	mov	r4, r0
    878a:	b082      	sub	sp, #8
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    878c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    8790:	9001      	str	r0, [sp, #4]
    8792:	f003 fc01 	bl	bf98 <__tVZFilterBell_setFreq_veneer>
	*sample = tVZFilterBell_tick(&VZfilterPeak[v][string], *sample);
    8796:	9801      	ldr	r0, [sp, #4]
    8798:	ed94 0a00 	vldr	s0, [r4]
    879c:	f003 fc8c 	bl	c0b8 <__tVZFilterBell_tick_veneer>
    87a0:	ed84 0a00 	vstr	s0, [r4]
}
    87a4:	b002      	add	sp, #8
    87a6:	bd10      	pop	{r4, pc}
    87a8:	2001d200 	.word	0x2001d200
    87ac:	f3af 8000 	nop.w
    87b0:	f3af 8000 	nop.w
    87b4:	f3af 8000 	nop.w
    87b8:	f3af 8000 	nop.w
    87bc:	f3af 8000 	nop.w

000087c0 <VZlowshelfTick>:
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    87c0:	4b09      	ldr	r3, [pc, #36]	; (87e8 <VZlowshelfTick+0x28>)
    87c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    87c6:	b510      	push	{r4, lr}
    87c8:	4604      	mov	r4, r0
    87ca:	b082      	sub	sp, #8
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    87cc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    87d0:	9001      	str	r0, [sp, #4]
    87d2:	f003 fc3d 	bl	c050 <__tVZFilterLS_setFreqFast_veneer>
	*sample = tVZFilterLS_tick(&VZfilterLS[v][string], *sample);
    87d6:	9801      	ldr	r0, [sp, #4]
    87d8:	ed94 0a00 	vldr	s0, [r4]
    87dc:	f003 fcf4 	bl	c1c8 <__tVZFilterLS_tick_veneer>
    87e0:	ed84 0a00 	vstr	s0, [r4]
}
    87e4:	b002      	add	sp, #8
    87e6:	bd10      	pop	{r4, pc}
    87e8:	2001d1f0 	.word	0x2001d1f0
    87ec:	f3af 8000 	nop.w
    87f0:	f3af 8000 	nop.w
    87f4:	f3af 8000 	nop.w
    87f8:	f3af 8000 	nop.w
    87fc:	f3af 8000 	nop.w

00008800 <VZhighshelfTick>:
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    8800:	4b09      	ldr	r3, [pc, #36]	; (8828 <VZhighshelfTick+0x28>)
    8802:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    8806:	b510      	push	{r4, lr}
    8808:	4604      	mov	r4, r0
    880a:	b082      	sub	sp, #8
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    880c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    8810:	9001      	str	r0, [sp, #4]
    8812:	f003 fb11 	bl	be38 <__tVZFilterHS_setFreqFast_veneer>
	*sample = tVZFilterHS_tick(&VZfilterHS[v][string], *sample);
    8816:	9801      	ldr	r0, [sp, #4]
    8818:	ed94 0a00 	vldr	s0, [r4]
    881c:	f003 fc98 	bl	c150 <__tVZFilterHS_tick_veneer>
    8820:	ed84 0a00 	vstr	s0, [r4]
}
    8824:	b002      	add	sp, #8
    8826:	bd10      	pop	{r4, pc}
    8828:	2001d1e0 	.word	0x2001d1e0
    882c:	f3af 8000 	nop.w
    8830:	f3af 8000 	nop.w
    8834:	f3af 8000 	nop.w
    8838:	f3af 8000 	nop.w
    883c:	f3af 8000 	nop.w

00008840 <VZbandrejectTick>:
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    8840:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    8844:	4b0d      	ldr	r3, [pc, #52]	; (887c <VZbandrejectTick+0x3c>)
{
    8846:	b530      	push	{r4, r5, lr}
    8848:	4605      	mov	r5, r0
    884a:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    884c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    8850:	0094      	lsls	r4, r2, #2
    8852:	9001      	str	r0, [sp, #4]
    8854:	f003 fb60 	bl	bf18 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    8858:	ed95 0a00 	vldr	s0, [r5]
    885c:	9801      	ldr	r0, [sp, #4]
    885e:	f003 fbeb 	bl	c038 <__tVZFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    8862:	4b07      	ldr	r3, [pc, #28]	; (8880 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    8864:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    8868:	4423      	add	r3, r4
    886a:	edd3 7a00 	vldr	s15, [r3]
    886e:	ee67 7a80 	vmul.f32	s15, s15, s0
    8872:	edc5 7a00 	vstr	s15, [r5]
}
    8876:	b003      	add	sp, #12
    8878:	bd30      	pop	{r4, r5, pc}
    887a:	bf00      	nop
    887c:	2001d1d0 	.word	0x2001d1d0
    8880:	2001d36c 	.word	0x2001d36c
    8884:	f3af 8000 	nop.w
    8888:	f3af 8000 	nop.w
    888c:	f3af 8000 	nop.w
    8890:	f3af 8000 	nop.w
    8894:	f3af 8000 	nop.w
    8898:	f3af 8000 	nop.w
    889c:	f3af 8000 	nop.w

000088a0 <LadderLowpassTick>:
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    88a0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    88a4:	4b0d      	ldr	r3, [pc, #52]	; (88dc <LadderLowpassTick+0x3c>)
{
    88a6:	b530      	push	{r4, r5, lr}
    88a8:	4605      	mov	r5, r0
    88aa:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    88ac:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    88b0:	0094      	lsls	r4, r2, #2
    88b2:	9001      	str	r0, [sp, #4]
    88b4:	f003 fc68 	bl	c188 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    88b8:	ed95 0a00 	vldr	s0, [r5]
    88bc:	9801      	ldr	r0, [sp, #4]
    88be:	f003 f9f3 	bl	bca8 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v][string];
    88c2:	4b07      	ldr	r3, [pc, #28]	; (88e0 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    88c4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    88c8:	4423      	add	r3, r4
    88ca:	edd3 7a00 	vldr	s15, [r3]
    88ce:	ee67 7a80 	vmul.f32	s15, s15, s0
    88d2:	edc5 7a00 	vstr	s15, [r5]
}
    88d6:	b003      	add	sp, #12
    88d8:	bd30      	pop	{r4, r5, pc}
    88da:	bf00      	nop
    88dc:	2001d1c0 	.word	0x2001d1c0
    88e0:	2001d36c 	.word	0x2001d36c
    88e4:	f3af 8000 	nop.w
    88e8:	f3af 8000 	nop.w
    88ec:	f3af 8000 	nop.w
    88f0:	f3af 8000 	nop.w
    88f4:	f3af 8000 	nop.w
    88f8:	f3af 8000 	nop.w
    88fc:	f3af 8000 	nop.w

00008900 <setFreqMultPitch>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    8900:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    8904:	4b0f      	ldr	r3, [pc, #60]	; (8944 <setFreqMultPitch+0x44>)
    8906:	0042      	lsls	r2, r0, #1
	pitch *= 24.0f;
    8908:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    890c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    8910:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    8914:	3020      	adds	r0, #32
	pitch *= 24.0f;
    8916:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    891a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    891e:	4408      	add	r0, r1
    8920:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8924:	ed93 7a02 	vldr	s14, [r3, #8]
    8928:	eeb4 7ae7 	vcmpe.f32	s14, s15
    892c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8930:	dd01      	ble.n	8936 <setFreqMultPitch+0x36>
		pitch = roundf(pitch);
    8932:	feb8 0a40 	vrinta.f32	s0, s0
	midiAdd[osc][string] = pitch;
    8936:	4b04      	ldr	r3, [pc, #16]	; (8948 <setFreqMultPitch+0x48>)
    8938:	440a      	add	r2, r1
    893a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    893e:	ed83 0a00 	vstr	s0, [r3]
}
    8942:	4770      	bx	lr
    8944:	20019320 	.word	0x20019320
    8948:	2001d600 	.word	0x2001d600
    894c:	f3af 8000 	nop.w
    8950:	f3af 8000 	nop.w
    8954:	f3af 8000 	nop.w
    8958:	f3af 8000 	nop.w
    895c:	f3af 8000 	nop.w

00008960 <setFreqMultHarm>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    8960:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    8964:	4b17      	ldr	r3, [pc, #92]	; (89c4 <setFreqMultHarm+0x64>)
    8966:	0042      	lsls	r2, r0, #1
	harm *= 15.0f;
    8968:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    896c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    8970:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    8974:	3020      	adds	r0, #32
	harm *= 15.0f;
    8976:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    897a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    897e:	4408      	add	r0, r1
    8980:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8984:	ed93 7a02 	vldr	s14, [r3, #8]
    8988:	eeb4 7ae7 	vcmpe.f32	s14, s15
    898c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8990:	dd01      	ble.n	8996 <setFreqMultHarm+0x36>
		harm = roundf(harm);
    8992:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
    8996:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		freqMult[osc][string] = (harm + 1);
    899a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
    899e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    89a2:	db08      	blt.n	89b6 <setFreqMultHarm+0x56>
		freqMult[osc][string] = (harm + 1);
    89a4:	ee30 0a27 	vadd.f32	s0, s0, s15
    89a8:	4b07      	ldr	r3, [pc, #28]	; (89c8 <setFreqMultHarm+0x68>)
    89aa:	440a      	add	r2, r1
    89ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    89b0:	ed83 0a00 	vstr	s0, [r3]
}
    89b4:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    89b6:	ee30 0a67 	vsub.f32	s0, s0, s15
    89ba:	eeb0 7ac0 	vabs.f32	s14, s0
    89be:	ee87 0a87 	vdiv.f32	s0, s15, s14
    89c2:	e7f1      	b.n	89a8 <setFreqMultHarm+0x48>
    89c4:	20019320 	.word	0x20019320
    89c8:	2001d394 	.word	0x2001d394
    89cc:	f3af 8000 	nop.w
    89d0:	f3af 8000 	nop.w
    89d4:	f3af 8000 	nop.w
    89d8:	f3af 8000 	nop.w
    89dc:	f3af 8000 	nop.w

000089e0 <lowpassSetQ>:
    tSVF_setQ(&lowpass[v][string], q);
    89e0:	4b03      	ldr	r3, [pc, #12]	; (89f0 <lowpassSetQ+0x10>)
    89e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    89e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    89ea:	f003 ba9d 	b.w	bf28 <__tSVF_setQ_veneer>
    89ee:	bf00      	nop
    89f0:	2001d4f0 	.word	0x2001d4f0
    89f4:	f3af 8000 	nop.w
    89f8:	f3af 8000 	nop.w
    89fc:	f3af 8000 	nop.w

00008a00 <highpassSetQ>:
    tSVF_setQ(&highpass[v][string], q);
    8a00:	4b03      	ldr	r3, [pc, #12]	; (8a10 <highpassSetQ+0x10>)
    8a02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8a06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a0a:	f003 ba8d 	b.w	bf28 <__tSVF_setQ_veneer>
    8a0e:	bf00      	nop
    8a10:	2001d3ec 	.word	0x2001d3ec
    8a14:	f3af 8000 	nop.w
    8a18:	f3af 8000 	nop.w
    8a1c:	f3af 8000 	nop.w

00008a20 <bandpassSetQ>:
    tSVF_setQ(&bandpass[v][string], q);
    8a20:	4b03      	ldr	r3, [pc, #12]	; (8a30 <bandpassSetQ+0x10>)
    8a22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8a26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a2a:	f003 ba7d 	b.w	bf28 <__tSVF_setQ_veneer>
    8a2e:	bf00      	nop
    8a30:	2001d218 	.word	0x2001d218
    8a34:	f3af 8000 	nop.w
    8a38:	f3af 8000 	nop.w
    8a3c:	f3af 8000 	nop.w

00008a40 <diodeLowpassSetQ>:
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    8a40:	4b03      	ldr	r3, [pc, #12]	; (8a50 <diodeLowpassSetQ+0x10>)
    8a42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8a46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a4a:	f003 ba01 	b.w	be50 <__tDiodeFilter_setQ_veneer>
    8a4e:	bf00      	nop
    8a50:	2001d2f8 	.word	0x2001d2f8
    8a54:	f3af 8000 	nop.w
    8a58:	f3af 8000 	nop.w
    8a5c:	f3af 8000 	nop.w

00008a60 <VZpeakSetQ>:
	tVZFilterBell_setBandwidth(&VZfilterPeak[v][string], q);
    8a60:	4b03      	ldr	r3, [pc, #12]	; (8a70 <VZpeakSetQ+0x10>)
    8a62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8a66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a6a:	f003 b8f1 	b.w	bc50 <__tVZFilterBell_setBandwidth_veneer>
    8a6e:	bf00      	nop
    8a70:	2001d200 	.word	0x2001d200
    8a74:	f3af 8000 	nop.w
    8a78:	f3af 8000 	nop.w
    8a7c:	f3af 8000 	nop.w

00008a80 <VZlowshelfSetQ>:
	tVZFilterLS_setResonance(&VZfilterLS[v][string], q);
    8a80:	4b03      	ldr	r3, [pc, #12]	; (8a90 <VZlowshelfSetQ+0x10>)
    8a82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8a86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a8a:	f003 b939 	b.w	bd00 <__tVZFilterLS_setResonance_veneer>
    8a8e:	bf00      	nop
    8a90:	2001d1f0 	.word	0x2001d1f0
    8a94:	f3af 8000 	nop.w
    8a98:	f3af 8000 	nop.w
    8a9c:	f3af 8000 	nop.w

00008aa0 <VZhighshelfSetQ>:
	tVZFilterHS_setResonance(&VZfilterHS[v][string], q);
    8aa0:	4b03      	ldr	r3, [pc, #12]	; (8ab0 <VZhighshelfSetQ+0x10>)
    8aa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8aa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8aaa:	f003 b9fd 	b.w	bea8 <__tVZFilterHS_setResonance_veneer>
    8aae:	bf00      	nop
    8ab0:	2001d1e0 	.word	0x2001d1e0
    8ab4:	f3af 8000 	nop.w
    8ab8:	f3af 8000 	nop.w
    8abc:	f3af 8000 	nop.w

00008ac0 <VZbandrejectSetQ>:
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    8ac0:	4b03      	ldr	r3, [pc, #12]	; (8ad0 <VZbandrejectSetQ+0x10>)
    8ac2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8ac6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8aca:	f003 b8d5 	b.w	bc78 <__tVZFilter_setResonance_veneer>
    8ace:	bf00      	nop
    8ad0:	2001d1d0 	.word	0x2001d1d0
    8ad4:	f3af 8000 	nop.w
    8ad8:	f3af 8000 	nop.w
    8adc:	f3af 8000 	nop.w

00008ae0 <LadderLowpassSetQ>:
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    8ae0:	4b03      	ldr	r3, [pc, #12]	; (8af0 <LadderLowpassSetQ+0x10>)
    8ae2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8ae6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8aea:	f003 b881 	b.w	bbf0 <__tLadderFilter_setQ_veneer>
    8aee:	bf00      	nop
    8af0:	2001d1c0 	.word	0x2001d1c0
    8af4:	f3af 8000 	nop.w
    8af8:	f3af 8000 	nop.w
    8afc:	f3af 8000 	nop.w

00008b00 <lowpassSetGain>:
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    8b00:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    8b04:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    8b08:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    8b0a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    8b0e:	4605      	mov	r5, r0
    8b10:	460c      	mov	r4, r1
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    8b12:	eeb0 0a67 	vmov.f32	s0, s15
    8b16:	f003 f9d3 	bl	bec0 <__dbToATableLookup_veneer>
    8b1a:	4b04      	ldr	r3, [pc, #16]	; (8b2c <lowpassSetGain+0x2c>)
    8b1c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8b20:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8b24:	ed83 0a00 	vstr	s0, [r3]
}
    8b28:	bd38      	pop	{r3, r4, r5, pc}
    8b2a:	bf00      	nop
    8b2c:	2001d36c 	.word	0x2001d36c
    8b30:	f3af 8000 	nop.w
    8b34:	f3af 8000 	nop.w
    8b38:	f3af 8000 	nop.w
    8b3c:	f3af 8000 	nop.w

00008b40 <highpassSetGain>:
    8b40:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    8b44:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    8b48:	b538      	push	{r3, r4, r5, lr}
    8b4a:	eee0 7a07 	vfma.f32	s15, s0, s14
    8b4e:	4605      	mov	r5, r0
    8b50:	460c      	mov	r4, r1
    8b52:	eeb0 0a67 	vmov.f32	s0, s15
    8b56:	f003 f9b3 	bl	bec0 <__dbToATableLookup_veneer>
    8b5a:	4b04      	ldr	r3, [pc, #16]	; (8b6c <highpassSetGain+0x2c>)
    8b5c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8b60:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8b64:	ed83 0a00 	vstr	s0, [r3]
    8b68:	bd38      	pop	{r3, r4, r5, pc}
    8b6a:	bf00      	nop
    8b6c:	2001d36c 	.word	0x2001d36c
    8b70:	f3af 8000 	nop.w
    8b74:	f3af 8000 	nop.w
    8b78:	f3af 8000 	nop.w
    8b7c:	f3af 8000 	nop.w

00008b80 <bandpassSetGain>:
    8b80:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    8b84:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    8b88:	b538      	push	{r3, r4, r5, lr}
    8b8a:	eee0 7a07 	vfma.f32	s15, s0, s14
    8b8e:	4605      	mov	r5, r0
    8b90:	460c      	mov	r4, r1
    8b92:	eeb0 0a67 	vmov.f32	s0, s15
    8b96:	f003 f993 	bl	bec0 <__dbToATableLookup_veneer>
    8b9a:	4b04      	ldr	r3, [pc, #16]	; (8bac <bandpassSetGain+0x2c>)
    8b9c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8ba0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8ba4:	ed83 0a00 	vstr	s0, [r3]
    8ba8:	bd38      	pop	{r3, r4, r5, pc}
    8baa:	bf00      	nop
    8bac:	2001d36c 	.word	0x2001d36c
    8bb0:	f3af 8000 	nop.w
    8bb4:	f3af 8000 	nop.w
    8bb8:	f3af 8000 	nop.w
    8bbc:	f3af 8000 	nop.w

00008bc0 <diodeLowpassSetGain>:
    8bc0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    8bc4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    8bc8:	b538      	push	{r3, r4, r5, lr}
    8bca:	eee0 7a07 	vfma.f32	s15, s0, s14
    8bce:	4605      	mov	r5, r0
    8bd0:	460c      	mov	r4, r1
    8bd2:	eeb0 0a67 	vmov.f32	s0, s15
    8bd6:	f003 f973 	bl	bec0 <__dbToATableLookup_veneer>
    8bda:	4b04      	ldr	r3, [pc, #16]	; (8bec <diodeLowpassSetGain+0x2c>)
    8bdc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8be0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8be4:	ed83 0a00 	vstr	s0, [r3]
    8be8:	bd38      	pop	{r3, r4, r5, pc}
    8bea:	bf00      	nop
    8bec:	2001d36c 	.word	0x2001d36c
    8bf0:	f3af 8000 	nop.w
    8bf4:	f3af 8000 	nop.w
    8bf8:	f3af 8000 	nop.w
    8bfc:	f3af 8000 	nop.w

00008c00 <VZpeakSetGain>:
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8c00:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8c04:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8c2c <VZpeakSetGain+0x2c>
{
    8c08:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8c0a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    8c0e:	4605      	mov	r5, r0
    8c10:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8c12:	eeb0 0a67 	vmov.f32	s0, s15
    8c16:	f003 f953 	bl	bec0 <__dbToATableLookup_veneer>
    8c1a:	4b05      	ldr	r3, [pc, #20]	; (8c30 <VZpeakSetGain+0x30>)
    8c1c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8c20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8c28:	f003 b886 	b.w	bd38 <__tVZFilterBell_setGain_veneer>
    8c2c:	42480000 	.word	0x42480000
    8c30:	2001d200 	.word	0x2001d200
    8c34:	f3af 8000 	nop.w
    8c38:	f3af 8000 	nop.w
    8c3c:	f3af 8000 	nop.w

00008c40 <VZlowshelfSetGain>:
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8c40:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8c44:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8c6c <VZlowshelfSetGain+0x2c>
{
    8c48:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8c4a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    8c4e:	4605      	mov	r5, r0
    8c50:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8c52:	eeb0 0a67 	vmov.f32	s0, s15
    8c56:	f003 f933 	bl	bec0 <__dbToATableLookup_veneer>
    8c5a:	4b05      	ldr	r3, [pc, #20]	; (8c70 <VZlowshelfSetGain+0x30>)
    8c5c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8c60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8c68:	f003 b94a 	b.w	bf00 <__tVZFilterLS_setGain_veneer>
    8c6c:	42480000 	.word	0x42480000
    8c70:	2001d1f0 	.word	0x2001d1f0
    8c74:	f3af 8000 	nop.w
    8c78:	f3af 8000 	nop.w
    8c7c:	f3af 8000 	nop.w

00008c80 <VZhighshelfSetGain>:
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8c80:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8c84:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8cac <VZhighshelfSetGain+0x2c>
{
    8c88:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8c8a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    8c8e:	4605      	mov	r5, r0
    8c90:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8c92:	eeb0 0a67 	vmov.f32	s0, s15
    8c96:	f003 f913 	bl	bec0 <__dbToATableLookup_veneer>
    8c9a:	4b05      	ldr	r3, [pc, #20]	; (8cb0 <VZhighshelfSetGain+0x30>)
    8c9c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8ca0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    8ca8:	f002 bfce 	b.w	bc48 <__tVZFilterHS_setGain_veneer>
    8cac:	42480000 	.word	0x42480000
    8cb0:	2001d1e0 	.word	0x2001d1e0
    8cb4:	f3af 8000 	nop.w
    8cb8:	f3af 8000 	nop.w
    8cbc:	f3af 8000 	nop.w

00008cc0 <VZbandrejectSetGain>:
    8cc0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    8cc4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    8cc8:	b538      	push	{r3, r4, r5, lr}
    8cca:	eee0 7a07 	vfma.f32	s15, s0, s14
    8cce:	4605      	mov	r5, r0
    8cd0:	460c      	mov	r4, r1
    8cd2:	eeb0 0a67 	vmov.f32	s0, s15
    8cd6:	f003 f8f3 	bl	bec0 <__dbToATableLookup_veneer>
    8cda:	4b04      	ldr	r3, [pc, #16]	; (8cec <VZbandrejectSetGain+0x2c>)
    8cdc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8ce0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8ce4:	ed83 0a00 	vstr	s0, [r3]
    8ce8:	bd38      	pop	{r3, r4, r5, pc}
    8cea:	bf00      	nop
    8cec:	2001d36c 	.word	0x2001d36c
    8cf0:	f3af 8000 	nop.w
    8cf4:	f3af 8000 	nop.w
    8cf8:	f3af 8000 	nop.w
    8cfc:	f3af 8000 	nop.w

00008d00 <LadderLowpassSetGain>:
    8d00:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    8d04:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    8d08:	b538      	push	{r3, r4, r5, lr}
    8d0a:	eee0 7a07 	vfma.f32	s15, s0, s14
    8d0e:	4605      	mov	r5, r0
    8d10:	460c      	mov	r4, r1
    8d12:	eeb0 0a67 	vmov.f32	s0, s15
    8d16:	f003 f8d3 	bl	bec0 <__dbToATableLookup_veneer>
    8d1a:	4b04      	ldr	r3, [pc, #16]	; (8d2c <LadderLowpassSetGain+0x2c>)
    8d1c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8d20:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    8d24:	ed83 0a00 	vstr	s0, [r3]
    8d28:	bd38      	pop	{r3, r4, r5, pc}
    8d2a:	bf00      	nop
    8d2c:	2001d36c 	.word	0x2001d36c
    8d30:	f3af 8000 	nop.w
    8d34:	f3af 8000 	nop.w
    8d38:	f3af 8000 	nop.w
    8d3c:	f3af 8000 	nop.w

00008d40 <envelope_tick>:
{
    8d40:	b538      	push	{r3, r4, r5, lr}
		if (envOn[v])
    8d42:	4d1d      	ldr	r5, [pc, #116]	; (8db8 <envelope_tick+0x78>)
{
    8d44:	4604      	mov	r4, r0
		if (envOn[v])
    8d46:	782b      	ldrb	r3, [r5, #0]
    8d48:	bb53      	cbnz	r3, 8da0 <envelope_tick+0x60>
    8d4a:	786b      	ldrb	r3, [r5, #1]
    8d4c:	b9e3      	cbnz	r3, 8d88 <envelope_tick+0x48>
    8d4e:	78ab      	ldrb	r3, [r5, #2]
    8d50:	b973      	cbnz	r3, 8d70 <envelope_tick+0x30>
    8d52:	78eb      	ldrb	r3, [r5, #3]
    8d54:	b903      	cbnz	r3, 8d58 <envelope_tick+0x18>
}
    8d56:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    8d58:	4b18      	ldr	r3, [pc, #96]	; (8dbc <envelope_tick+0x7c>)
    8d5a:	1da0      	adds	r0, r4, #6
    8d5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8d60:	f003 f8be 	bl	bee0 <__tADSRT_tickNoInterp_veneer>
    8d64:	4b16      	ldr	r3, [pc, #88]	; (8dc0 <envelope_tick+0x80>)
    8d66:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8d6a:	ed83 0a2e 	vstr	s0, [r3, #184]	; 0xb8
}
    8d6e:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    8d70:	4b12      	ldr	r3, [pc, #72]	; (8dbc <envelope_tick+0x7c>)
    8d72:	1d20      	adds	r0, r4, #4
    8d74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8d78:	f003 f8b2 	bl	bee0 <__tADSRT_tickNoInterp_veneer>
    8d7c:	4b10      	ldr	r3, [pc, #64]	; (8dc0 <envelope_tick+0x80>)
    8d7e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8d82:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
    8d86:	e7e4      	b.n	8d52 <envelope_tick+0x12>
    8d88:	4b0c      	ldr	r3, [pc, #48]	; (8dbc <envelope_tick+0x7c>)
    8d8a:	1ca0      	adds	r0, r4, #2
    8d8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8d90:	f003 f8a6 	bl	bee0 <__tADSRT_tickNoInterp_veneer>
    8d94:	4b0a      	ldr	r3, [pc, #40]	; (8dc0 <envelope_tick+0x80>)
    8d96:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8d9a:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
    8d9e:	e7d6      	b.n	8d4e <envelope_tick+0xe>
    8da0:	4806      	ldr	r0, [pc, #24]	; (8dbc <envelope_tick+0x7c>)
    8da2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    8da6:	f003 f89b 	bl	bee0 <__tADSRT_tickNoInterp_veneer>
    8daa:	4b05      	ldr	r3, [pc, #20]	; (8dc0 <envelope_tick+0x80>)
    8dac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8db0:	ed83 0a28 	vstr	s0, [r3, #160]	; 0xa0
    8db4:	e7c9      	b.n	8d4a <envelope_tick+0xa>
    8db6:	bf00      	nop
    8db8:	2001d318 	.word	0x2001d318
    8dbc:	2001d31c 	.word	0x2001d31c
    8dc0:	2001d8ac 	.word	0x2001d8ac
    8dc4:	f3af 8000 	nop.w
    8dc8:	f3af 8000 	nop.w
    8dcc:	f3af 8000 	nop.w
    8dd0:	f3af 8000 	nop.w
    8dd4:	f3af 8000 	nop.w
    8dd8:	f3af 8000 	nop.w
    8ddc:	f3af 8000 	nop.w

00008de0 <lfo_tick>:
{
    8de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8de4:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8e34 <lfo_tick+0x54>
    8de8:	b082      	sub	sp, #8
    8dea:	4d10      	ldr	r5, [pc, #64]	; (8e2c <lfo_tick+0x4c>)
    8dec:	4607      	mov	r7, r0
    8dee:	4e10      	ldr	r6, [pc, #64]	; (8e30 <lfo_tick+0x50>)
    8df0:	f108 0904 	add.w	r9, r8, #4
    8df4:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    8df8:	4644      	mov	r4, r8
			float sample = 0.0f;
    8dfa:	f04f 0a00 	mov.w	sl, #0
    8dfe:	eba4 0108 	sub.w	r1, r4, r8
		if (lfoOn[i])
    8e02:	f814 3b01 	ldrb.w	r3, [r4], #1
			lfoShapeTick[i](&sample,i, string);
    8e06:	463a      	mov	r2, r7
    8e08:	a801      	add	r0, sp, #4
		if (lfoOn[i])
    8e0a:	b133      	cbz	r3, 8e1a <lfo_tick+0x3a>
			lfoShapeTick[i](&sample,i, string);
    8e0c:	6833      	ldr	r3, [r6, #0]
			float sample = 0.0f;
    8e0e:	f8cd a004 	str.w	sl, [sp, #4]
			lfoShapeTick[i](&sample,i, string);
    8e12:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    8e14:	9b01      	ldr	r3, [sp, #4]
    8e16:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    8e1a:	454c      	cmp	r4, r9
    8e1c:	f106 0604 	add.w	r6, r6, #4
    8e20:	f105 0508 	add.w	r5, r5, #8
    8e24:	d1eb      	bne.n	8dfe <lfo_tick+0x1e>
}
    8e26:	b002      	add	sp, #8
    8e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8e2c:	2001d8ac 	.word	0x2001d8ac
    8e30:	2001d480 	.word	0x2001d480
    8e34:	2001d41c 	.word	0x2001d41c
    8e38:	f3af 8000 	nop.w
    8e3c:	f3af 8000 	nop.w

00008e40 <setEnvelopeAttack>:
	a = a + 0.001f;
    8e40:	eddf 7a05 	vldr	s15, [pc, #20]	; 8e58 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
    8e44:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8e48:	4b04      	ldr	r3, [pc, #16]	; (8e5c <setEnvelopeAttack+0x1c>)
    8e4a:	ee30 0a27 	vadd.f32	s0, s0, s15
    8e4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8e52:	f002 bf4d 	b.w	bcf0 <__tADSRT_setAttack_veneer>
    8e56:	bf00      	nop
    8e58:	3a83126f 	.word	0x3a83126f
    8e5c:	2001d31c 	.word	0x2001d31c

00008e60 <setEnvelopeDecay>:
	d = d + 0.001f;
    8e60:	eddf 7a05 	vldr	s15, [pc, #20]	; 8e78 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
    8e64:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8e68:	4b04      	ldr	r3, [pc, #16]	; (8e7c <setEnvelopeDecay+0x1c>)
    8e6a:	ee30 0a27 	vadd.f32	s0, s0, s15
    8e6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8e72:	f003 b8fd 	b.w	c070 <__tADSRT_setDecay_veneer>
    8e76:	bf00      	nop
    8e78:	3a83126f 	.word	0x3a83126f
    8e7c:	2001d31c 	.word	0x2001d31c

00008e80 <setEnvelopeSustain>:
	tADSRT_setSustain(&envs[v][string], s);
    8e80:	4b03      	ldr	r3, [pc, #12]	; (8e90 <setEnvelopeSustain+0x10>)
    8e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8e8a:	f002 bf9d 	b.w	bdc8 <__tADSRT_setSustain_veneer>
    8e8e:	bf00      	nop
    8e90:	2001d31c 	.word	0x2001d31c
    8e94:	f3af 8000 	nop.w
    8e98:	f3af 8000 	nop.w
    8e9c:	f3af 8000 	nop.w

00008ea0 <setEnvelopeRelease>:
	r = r + 0.001f;
    8ea0:	eddf 7a05 	vldr	s15, [pc, #20]	; 8eb8 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
    8ea4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8ea8:	4b04      	ldr	r3, [pc, #16]	; (8ebc <setEnvelopeRelease+0x1c>)
    8eaa:	ee30 0a27 	vadd.f32	s0, s0, s15
    8eae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8eb2:	f003 b881 	b.w	bfb8 <__tADSRT_setRelease_veneer>
    8eb6:	bf00      	nop
    8eb8:	3a83126f 	.word	0x3a83126f
    8ebc:	2001d31c 	.word	0x2001d31c

00008ec0 <setEnvelopeLeak>:
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    8ec0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    8ec4:	eddf 6a08 	vldr	s13, [pc, #32]	; 8ee8 <setEnvelopeLeak+0x28>
    8ec8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8eec <setEnvelopeLeak+0x2c>
    8ecc:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8ed0:	4b07      	ldr	r3, [pc, #28]	; (8ef0 <setEnvelopeLeak+0x30>)
    8ed2:	ee77 7ac0 	vsub.f32	s15, s15, s0
    8ed6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8eda:	eea7 7aa6 	vfma.f32	s14, s15, s13
    8ede:	eeb0 0a47 	vmov.f32	s0, s14
    8ee2:	f002 bf69 	b.w	bdb8 <__tADSRT_setLeakFactor_veneer>
    8ee6:	bf00      	nop
    8ee8:	3851b717 	.word	0x3851b717
    8eec:	3f7ffcb9 	.word	0x3f7ffcb9
    8ef0:	2001d31c 	.word	0x2001d31c
    8ef4:	f3af 8000 	nop.w
    8ef8:	f3af 8000 	nop.w
    8efc:	f3af 8000 	nop.w

00008f00 <setAmp>:
	amplitude[string] = amp;
    8f00:	4b02      	ldr	r3, [pc, #8]	; (8f0c <setAmp+0xc>)
    8f02:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8f06:	ed81 0a00 	vstr	s0, [r1]
}
    8f0a:	4770      	bx	lr
    8f0c:	2001d210 	.word	0x2001d210
    8f10:	f3af 8000 	nop.w
    8f14:	f3af 8000 	nop.w
    8f18:	f3af 8000 	nop.w
    8f1c:	f3af 8000 	nop.w

00008f20 <setMaster>:
	finalMaster[string] = amp;
    8f20:	4b02      	ldr	r3, [pc, #8]	; (8f2c <setMaster+0xc>)
    8f22:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8f26:	ed81 0a00 	vstr	s0, [r1]
}
    8f2a:	4770      	bx	lr
    8f2c:	2001d38c 	.word	0x2001d38c
    8f30:	f3af 8000 	nop.w
    8f34:	f3af 8000 	nop.w
    8f38:	f3af 8000 	nop.w
    8f3c:	f3af 8000 	nop.w

00008f40 <setTranspose>:
	transpose = in;
    8f40:	4b01      	ldr	r3, [pc, #4]	; (8f48 <setTranspose+0x8>)
    8f42:	ed83 0a00 	vstr	s0, [r3]
}
    8f46:	4770      	bx	lr
    8f48:	2001da14 	.word	0x2001da14
    8f4c:	f3af 8000 	nop.w
    8f50:	f3af 8000 	nop.w
    8f54:	f3af 8000 	nop.w
    8f58:	f3af 8000 	nop.w
    8f5c:	f3af 8000 	nop.w

00008f60 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    8f60:	eddf 7a03 	vldr	s15, [pc, #12]	; 8f70 <setPitchBendRange+0x10>
    8f64:	4b03      	ldr	r3, [pc, #12]	; (8f74 <setPitchBendRange+0x14>)
    8f66:	ee20 0a27 	vmul.f32	s0, s0, s15
    8f6a:	ed83 0a00 	vstr	s0, [r3]
}
    8f6e:	4770      	bx	lr
    8f70:	39000200 	.word	0x39000200
    8f74:	200008c8 	.word	0x200008c8
    8f78:	f3af 8000 	nop.w
    8f7c:	f3af 8000 	nop.w

00008f80 <setFinalLowpass>:
	tSVF_setFreqFast(&finalLowpass[string], in);
    8f80:	4802      	ldr	r0, [pc, #8]	; (8f8c <setFinalLowpass+0xc>)
    8f82:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    8f86:	f003 b82f 	b.w	bfe8 <__tSVF_setFreqFast_veneer>
    8f8a:	bf00      	nop
    8f8c:	2001d384 	.word	0x2001d384
    8f90:	f3af 8000 	nop.w
    8f94:	f3af 8000 	nop.w
    8f98:	f3af 8000 	nop.w
    8f9c:	f3af 8000 	nop.w

00008fa0 <tickMappings>:
{
    8fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < numMappings; i++)
    8fa4:	f8df 915c 	ldr.w	r9, [pc, #348]	; 9104 <tickMappings+0x164>
	interruptChecker = 0;
    8fa8:	f04f 0b00 	mov.w	fp, #0
    8fac:	4b51      	ldr	r3, [pc, #324]	; (90f4 <tickMappings+0x154>)
	for (int i = 0; i < numMappings; i++)
    8fae:	f899 2000 	ldrb.w	r2, [r9]
{
    8fb2:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    8fb6:	f883 b000 	strb.w	fp, [r3]
	for (int i = 0; i < numMappings; i++)
    8fba:	2a00      	cmp	r2, #0
    8fbc:	f000 8087 	beq.w	90ce <tickMappings+0x12e>
    8fc0:	4c4d      	ldr	r4, [pc, #308]	; (90f8 <tickMappings+0x158>)
			for (int v = 0; v < numStringsThisBoard; v++)
    8fc2:	f8df 8144 	ldr.w	r8, [pc, #324]	; 9108 <tickMappings+0x168>
    8fc6:	e004      	b.n	8fd2 <tickMappings+0x32>
	for (int i = 0; i < numMappings; i++)
    8fc8:	f10b 0b01 	add.w	fp, fp, #1
    8fcc:	344c      	adds	r4, #76	; 0x4c
    8fce:	455a      	cmp	r2, fp
    8fd0:	dd7d      	ble.n	90ce <tickMappings+0x12e>
		if (mappings[i].destNumber != 255)
    8fd2:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    8fd6:	2bff      	cmp	r3, #255	; 0xff
    8fd8:	d0f6      	beq.n	8fc8 <tickMappings+0x28>
			for (int v = 0; v < numStringsThisBoard; v++)
    8fda:	f898 3000 	ldrb.w	r3, [r8]
    8fde:	2b00      	cmp	r3, #0
    8fe0:	d0f2      	beq.n	8fc8 <tickMappings+0x28>
    8fe2:	4b46      	ldr	r3, [pc, #280]	; (90fc <tickMappings+0x15c>)
    8fe4:	4626      	mov	r6, r4
    8fe6:	2500      	movs	r5, #0
    8fe8:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
					if (mappings[i].hookActive[j])
    8fec:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    8ff0:	2b00      	cmp	r3, #0
    8ff2:	d070      	beq.n	90d6 <tickMappings+0x136>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    8ff4:	6832      	ldr	r2, [r6, #0]
    8ff6:	69f3      	ldr	r3, [r6, #28]
    8ff8:	ed92 8a00 	vldr	s16, [r2]
    8ffc:	ed93 7a00 	vldr	s14, [r3]
    9000:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    9004:	ee28 8a07 	vmul.f32	s16, s16, s14
						if (mappings[i].sourceSmoothed[j])
    9008:	7e21      	ldrb	r1, [r4, #24]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    900a:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (mappings[i].sourceSmoothed[j])
    900e:	2900      	cmp	r1, #0
    9010:	d069      	beq.n	90e6 <tickMappings+0x146>
							smoothedValue += sum;
    9012:	eef0 7a48 	vmov.f32	s15, s16
				float unsmoothedValue = 0.0f;
    9016:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 9100 <tickMappings+0x160>
					if (mappings[i].hookActive[j])
    901a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    901e:	b183      	cbz	r3, 9042 <tickMappings+0xa2>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    9020:	68b2      	ldr	r2, [r6, #8]
    9022:	6a73      	ldr	r3, [r6, #36]	; 0x24
    9024:	ed92 7a00 	vldr	s14, [r2]
    9028:	ed93 6a00 	vldr	s12, [r3]
    902c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    9030:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    9034:	7e61      	ldrb	r1, [r4, #25]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    9036:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    903a:	2900      	cmp	r1, #0
    903c:	d156      	bne.n	90ec <tickMappings+0x14c>
							unsmoothedValue += sum;
    903e:	ee38 8a07 	vadd.f32	s16, s16, s14
					if (mappings[i].hookActive[j])
    9042:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    9046:	b183      	cbz	r3, 906a <tickMappings+0xca>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    9048:	6932      	ldr	r2, [r6, #16]
    904a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    904c:	ed92 7a00 	vldr	s14, [r2]
    9050:	ed93 6a00 	vldr	s12, [r3]
    9054:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    9058:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    905c:	7ea1      	ldrb	r1, [r4, #26]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    905e:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    9062:	2900      	cmp	r1, #0
    9064:	d13c      	bne.n	90e0 <tickMappings+0x140>
							unsmoothedValue += sum;
    9066:	ee38 8a07 	vadd.f32	s16, s16, s14
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    906a:	f854 3c04 	ldr.w	r3, [r4, #-4]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    906e:	4638      	mov	r0, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    9070:	3604      	adds	r6, #4
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    9072:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    9076:	ed93 0a00 	vldr	s0, [r3]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    907a:	ee37 0a80 	vadd.f32	s0, s15, s0
    907e:	f002 fff3 	bl	c068 <__tExpSmooth_setDest_veneer>
				smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    9082:	4638      	mov	r0, r7
    9084:	f002 ff04 	bl	be90 <__tExpSmooth_tick_veneer>
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    9088:	f854 ac04 	ldr.w	sl, [r4, #-4]
    908c:	ee30 0a08 	vadd.f32	s0, s0, s16
			for (int v = 0; v < numStringsThisBoard; v++)
    9090:	3704      	adds	r7, #4
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    9092:	f8da 3010 	ldr.w	r3, [sl, #16]
    9096:	4798      	blx	r3
    9098:	1cab      	adds	r3, r5, #2
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    909a:	4629      	mov	r1, r5
			for (int v = 0; v < numStringsThisBoard; v++)
    909c:	3501      	adds	r5, #1
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    909e:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    90a2:	ed82 0a00 	vstr	s0, [r2]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    90a6:	f854 0c04 	ldr.w	r0, [r4, #-4]
    90aa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    90ae:	6942      	ldr	r2, [r0, #20]
    90b0:	7e00      	ldrb	r0, [r0, #24]
    90b2:	ed93 0a00 	vldr	s0, [r3]
    90b6:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    90b8:	f898 3000 	ldrb.w	r3, [r8]
    90bc:	42ab      	cmp	r3, r5
    90be:	dc95      	bgt.n	8fec <tickMappings+0x4c>
	for (int i = 0; i < numMappings; i++)
    90c0:	f899 2000 	ldrb.w	r2, [r9]
    90c4:	f10b 0b01 	add.w	fp, fp, #1
    90c8:	344c      	adds	r4, #76	; 0x4c
    90ca:	455a      	cmp	r2, fp
    90cc:	dc81      	bgt.n	8fd2 <tickMappings+0x32>
}
    90ce:	ecbd 8b02 	vpop	{d8}
    90d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				float smoothedValue = 0.0f;
    90d6:	eddf 7a0a 	vldr	s15, [pc, #40]	; 9100 <tickMappings+0x160>
				float unsmoothedValue = 0.0f;
    90da:	eeb0 8a67 	vmov.f32	s16, s15
    90de:	e79c      	b.n	901a <tickMappings+0x7a>
							smoothedValue += sum;
    90e0:	ee77 7a87 	vadd.f32	s15, s15, s14
    90e4:	e7c1      	b.n	906a <tickMappings+0xca>
				float smoothedValue = 0.0f;
    90e6:	eddf 7a06 	vldr	s15, [pc, #24]	; 9100 <tickMappings+0x160>
    90ea:	e796      	b.n	901a <tickMappings+0x7a>
							smoothedValue += sum;
    90ec:	ee77 7a87 	vadd.f32	s15, s15, s14
    90f0:	e7a7      	b.n	9042 <tickMappings+0xa2>
    90f2:	bf00      	nop
    90f4:	20016613 	.word	0x20016613
    90f8:	200186d0 	.word	0x200186d0
    90fc:	2001d500 	.word	0x2001d500
    9100:	00000000 	.word	0x00000000
    9104:	20019310 	.word	0x20019310
    9108:	20000694 	.word	0x20000694
    910c:	f3af 8000 	nop.w
    9110:	f3af 8000 	nop.w
    9114:	f3af 8000 	nop.w
    9118:	f3af 8000 	nop.w
    911c:	f3af 8000 	nop.w

00009120 <lfoSawSquareTick>:
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    9120:	4b05      	ldr	r3, [pc, #20]	; (9138 <lfoSawSquareTick+0x18>)
    9122:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    9126:	b510      	push	{r4, lr}
    9128:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    912a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    912e:	f003 f82f 	bl	c190 <__tSawSquareLFO_tick_veneer>
    9132:	ed84 0a00 	vstr	s0, [r4]
}
    9136:	bd10      	pop	{r4, pc}
    9138:	2001d460 	.word	0x2001d460
    913c:	f3af 8000 	nop.w

00009140 <lfoSineTriTick>:
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    9140:	4b05      	ldr	r3, [pc, #20]	; (9158 <lfoSineTriTick+0x18>)
    9142:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    9146:	b510      	push	{r4, lr}
    9148:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    914a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    914e:	f002 ffab 	bl	c0a8 <__tSineTriLFO_tick_veneer>
    9152:	ed84 0a00 	vstr	s0, [r4]
}
    9156:	bd10      	pop	{r4, pc}
    9158:	2001d4b0 	.word	0x2001d4b0
    915c:	f3af 8000 	nop.w

00009160 <lfoSineTick>:
    *sample = tCycle_tick(&lfoSine[v][string]);
    9160:	4b05      	ldr	r3, [pc, #20]	; (9178 <lfoSineTick+0x18>)
    9162:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    9166:	b510      	push	{r4, lr}
    9168:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    916a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    916e:	f002 fe77 	bl	be60 <__tCycle_tick_veneer>
    9172:	ed84 0a00 	vstr	s0, [r4]
}
    9176:	bd10      	pop	{r4, pc}
    9178:	2001d490 	.word	0x2001d490
    917c:	f3af 8000 	nop.w

00009180 <lfoTriTick>:
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    9180:	4b05      	ldr	r3, [pc, #20]	; (9198 <lfoTriTick+0x18>)
    9182:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    9186:	b510      	push	{r4, lr}
    9188:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    918a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    918e:	f002 ffb7 	bl	c100 <__tTriLFO_tick_veneer>
    9192:	ed84 0a00 	vstr	s0, [r4]
}
    9196:	bd10      	pop	{r4, pc}
    9198:	2001d4d0 	.word	0x2001d4d0
    919c:	f3af 8000 	nop.w

000091a0 <lfoSawTick>:
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    91a0:	4b08      	ldr	r3, [pc, #32]	; (91c4 <lfoSawTick+0x24>)
    91a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    91a6:	b510      	push	{r4, lr}
    91a8:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    91aa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    91ae:	f002 fd9b 	bl	bce8 <__tIntPhasor_tick_veneer>
    91b2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    91b6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    91ba:	eee0 7a07 	vfma.f32	s15, s0, s14
    91be:	edc4 7a00 	vstr	s15, [r4]
}
    91c2:	bd10      	pop	{r4, pc}
    91c4:	2001d440 	.word	0x2001d440
    91c8:	f3af 8000 	nop.w
    91cc:	f3af 8000 	nop.w
    91d0:	f3af 8000 	nop.w
    91d4:	f3af 8000 	nop.w
    91d8:	f3af 8000 	nop.w
    91dc:	f3af 8000 	nop.w

000091e0 <lfoPulseTick>:
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    91e0:	4b05      	ldr	r3, [pc, #20]	; (91f8 <lfoPulseTick+0x18>)
    91e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    91e6:	b510      	push	{r4, lr}
    91e8:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    91ea:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    91ee:	f002 ffe3 	bl	c1b8 <__tSquareLFO_tick_veneer>
    91f2:	ed84 0a00 	vstr	s0, [r4]
}
    91f6:	bd10      	pop	{r4, pc}
    91f8:	2001d420 	.word	0x2001d420
    91fc:	f3af 8000 	nop.w

00009200 <lfoSawSquareSetRate>:
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    9200:	4b03      	ldr	r3, [pc, #12]	; (9210 <lfoSawSquareSetRate+0x10>)
    9202:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    920a:	f002 bd01 	b.w	bc10 <__tSawSquareLFO_setFreq_veneer>
    920e:	bf00      	nop
    9210:	2001d460 	.word	0x2001d460
    9214:	f3af 8000 	nop.w
    9218:	f3af 8000 	nop.w
    921c:	f3af 8000 	nop.w

00009220 <lfoSineTriSetRate>:
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    9220:	4b03      	ldr	r3, [pc, #12]	; (9230 <lfoSineTriSetRate+0x10>)
    9222:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9226:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    922a:	f002 bfd1 	b.w	c1d0 <__tSineTriLFO_setFreq_veneer>
    922e:	bf00      	nop
    9230:	2001d4b0 	.word	0x2001d4b0
    9234:	f3af 8000 	nop.w
    9238:	f3af 8000 	nop.w
    923c:	f3af 8000 	nop.w

00009240 <lfoSineSetRate>:
	tCycle_setFreq(&lfoSine[v][string], r);
    9240:	4b03      	ldr	r3, [pc, #12]	; (9250 <lfoSineSetRate+0x10>)
    9242:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9246:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    924a:	f002 bdc5 	b.w	bdd8 <__tCycle_setFreq_veneer>
    924e:	bf00      	nop
    9250:	2001d490 	.word	0x2001d490
    9254:	f3af 8000 	nop.w
    9258:	f3af 8000 	nop.w
    925c:	f3af 8000 	nop.w

00009260 <lfoTriSetRate>:
	tTriLFO_setFreq(&lfoTri[v][string], r);
    9260:	4b03      	ldr	r3, [pc, #12]	; (9270 <lfoTriSetRate+0x10>)
    9262:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9266:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    926a:	f002 bf59 	b.w	c120 <__tTriLFO_setFreq_veneer>
    926e:	bf00      	nop
    9270:	2001d4d0 	.word	0x2001d4d0
    9274:	f3af 8000 	nop.w
    9278:	f3af 8000 	nop.w
    927c:	f3af 8000 	nop.w

00009280 <lfoSawSetRate>:
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    9280:	4b03      	ldr	r3, [pc, #12]	; (9290 <lfoSawSetRate+0x10>)
    9282:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    928a:	f002 bcd1 	b.w	bc30 <__tIntPhasor_setFreq_veneer>
    928e:	bf00      	nop
    9290:	2001d440 	.word	0x2001d440
    9294:	f3af 8000 	nop.w
    9298:	f3af 8000 	nop.w
    929c:	f3af 8000 	nop.w

000092a0 <lfoPulseSetRate>:
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    92a0:	4b03      	ldr	r3, [pc, #12]	; (92b0 <lfoPulseSetRate+0x10>)
    92a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    92a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    92aa:	f002 bebd 	b.w	c028 <__tSquareLFO_setFreq_veneer>
    92ae:	bf00      	nop
    92b0:	2001d420 	.word	0x2001d420
    92b4:	f3af 8000 	nop.w
    92b8:	f3af 8000 	nop.w
    92bc:	f3af 8000 	nop.w

000092c0 <lfoSawSquareSetPhase>:
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    92c0:	4b03      	ldr	r3, [pc, #12]	; (92d0 <lfoSawSquareSetPhase+0x10>)
    92c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    92c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    92ca:	f002 bf25 	b.w	c118 <__tSawSquareLFO_setPhase_veneer>
    92ce:	bf00      	nop
    92d0:	2001d460 	.word	0x2001d460
    92d4:	f3af 8000 	nop.w
    92d8:	f3af 8000 	nop.w
    92dc:	f3af 8000 	nop.w

000092e0 <lfoSineTriSetPhase>:
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    92e0:	4b03      	ldr	r3, [pc, #12]	; (92f0 <lfoSineTriSetPhase+0x10>)
    92e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    92e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    92ea:	f002 bcf1 	b.w	bcd0 <__tSineTriLFO_setPhase_veneer>
    92ee:	bf00      	nop
    92f0:	2001d4b0 	.word	0x2001d4b0
    92f4:	f3af 8000 	nop.w
    92f8:	f3af 8000 	nop.w
    92fc:	f3af 8000 	nop.w

00009300 <lfoSineSetPhase>:
	tCycle_setPhase(&lfoSine[v][string],p);
    9300:	4b03      	ldr	r3, [pc, #12]	; (9310 <lfoSineSetPhase+0x10>)
    9302:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9306:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    930a:	f002 bdfd 	b.w	bf08 <__tCycle_setPhase_veneer>
    930e:	bf00      	nop
    9310:	2001d490 	.word	0x2001d490
    9314:	f3af 8000 	nop.w
    9318:	f3af 8000 	nop.w
    931c:	f3af 8000 	nop.w

00009320 <lfoTriSetPhase>:
	tTriLFO_setPhase(&lfoTri[v][string],p);
    9320:	4b03      	ldr	r3, [pc, #12]	; (9330 <lfoTriSetPhase+0x10>)
    9322:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9326:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    932a:	f002 bd09 	b.w	bd40 <__tTriLFO_setPhase_veneer>
    932e:	bf00      	nop
    9330:	2001d4d0 	.word	0x2001d4d0
    9334:	f3af 8000 	nop.w
    9338:	f3af 8000 	nop.w
    933c:	f3af 8000 	nop.w

00009340 <lfoSawSetPhase>:
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    9340:	4b03      	ldr	r3, [pc, #12]	; (9350 <lfoSawSetPhase+0x10>)
    9342:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9346:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    934a:	f002 bebd 	b.w	c0c8 <__tIntPhasor_setPhase_veneer>
    934e:	bf00      	nop
    9350:	2001d440 	.word	0x2001d440
    9354:	f3af 8000 	nop.w
    9358:	f3af 8000 	nop.w
    935c:	f3af 8000 	nop.w

00009360 <lfoPulseSetPhase>:
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    9360:	4b03      	ldr	r3, [pc, #12]	; (9370 <lfoPulseSetPhase+0x10>)
    9362:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9366:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    936a:	f002 bd69 	b.w	be40 <__tSquareLFO_setPhase_veneer>
    936e:	bf00      	nop
    9370:	2001d420 	.word	0x2001d420
    9374:	f3af 8000 	nop.w
    9378:	f3af 8000 	nop.w
    937c:	f3af 8000 	nop.w

00009380 <lfoSawSquareSetShape>:
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    9380:	4b03      	ldr	r3, [pc, #12]	; (9390 <lfoSawSquareSetShape+0x10>)
    9382:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9386:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    938a:	f002 bcd1 	b.w	bd30 <__tSawSquareLFO_setShape_veneer>
    938e:	bf00      	nop
    9390:	2001d460 	.word	0x2001d460
    9394:	f3af 8000 	nop.w
    9398:	f3af 8000 	nop.w
    939c:	f3af 8000 	nop.w

000093a0 <lfoSineTriSetShape>:
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    93a0:	4b03      	ldr	r3, [pc, #12]	; (93b0 <lfoSineTriSetShape+0x10>)
    93a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    93a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    93aa:	f002 bee9 	b.w	c180 <__tSineTriLFO_setShape_veneer>
    93ae:	bf00      	nop
    93b0:	2001d4b0 	.word	0x2001d4b0
    93b4:	f3af 8000 	nop.w
    93b8:	f3af 8000 	nop.w
    93bc:	f3af 8000 	nop.w

000093c0 <lfoSineSetShape>:
}
    93c0:	4770      	bx	lr
    93c2:	bf00      	nop
    93c4:	f3af 8000 	nop.w
    93c8:	f3af 8000 	nop.w
    93cc:	f3af 8000 	nop.w
    93d0:	f3af 8000 	nop.w
    93d4:	f3af 8000 	nop.w
    93d8:	f3af 8000 	nop.w
    93dc:	f3af 8000 	nop.w

000093e0 <lfoTriSetShape>:
    93e0:	4770      	bx	lr
    93e2:	bf00      	nop
    93e4:	f3af 8000 	nop.w
    93e8:	f3af 8000 	nop.w
    93ec:	f3af 8000 	nop.w
    93f0:	f3af 8000 	nop.w
    93f4:	f3af 8000 	nop.w
    93f8:	f3af 8000 	nop.w
    93fc:	f3af 8000 	nop.w

00009400 <lfoSawSetShape>:
    9400:	4770      	bx	lr
    9402:	bf00      	nop
    9404:	f3af 8000 	nop.w
    9408:	f3af 8000 	nop.w
    940c:	f3af 8000 	nop.w
    9410:	f3af 8000 	nop.w
    9414:	f3af 8000 	nop.w
    9418:	f3af 8000 	nop.w
    941c:	f3af 8000 	nop.w

00009420 <lfoPulseSetShape>:
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    9420:	4b03      	ldr	r3, [pc, #12]	; (9430 <lfoPulseSetShape+0x10>)
    9422:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9426:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    942a:	f002 bee1 	b.w	c1f0 <__tSquareLFO_setPulseWidth_veneer>
    942e:	bf00      	nop
    9430:	2001d420 	.word	0x2001d420
    9434:	f3af 8000 	nop.w
    9438:	f3af 8000 	nop.w
    943c:	f3af 8000 	nop.w

00009440 <param1Linear>:
	param1[v][string] = value;
    9440:	4b03      	ldr	r3, [pc, #12]	; (9450 <param1Linear+0x10>)
    9442:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9446:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    944a:	ed83 0a00 	vstr	s0, [r3]
}
    944e:	4770      	bx	lr
    9450:	2001d6c8 	.word	0x2001d6c8
    9454:	f3af 8000 	nop.w
    9458:	f3af 8000 	nop.w
    945c:	f3af 8000 	nop.w

00009460 <clipperGainSet>:
	param1[v][string] = dbToATableLookup(value * 24.0f);
    9460:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    9464:	b538      	push	{r3, r4, r5, lr}
    9466:	4605      	mov	r5, r0
    9468:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 24.0f);
    946a:	ee20 0a27 	vmul.f32	s0, s0, s15
    946e:	f002 fd27 	bl	bec0 <__dbToATableLookup_veneer>
    9472:	4b04      	ldr	r3, [pc, #16]	; (9484 <clipperGainSet+0x24>)
    9474:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    9478:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    947c:	ed83 0a00 	vstr	s0, [r3]
}
    9480:	bd38      	pop	{r3, r4, r5, pc}
    9482:	bf00      	nop
    9484:	2001d6c8 	.word	0x2001d6c8
    9488:	f3af 8000 	nop.w
    948c:	f3af 8000 	nop.w
    9490:	f3af 8000 	nop.w
    9494:	f3af 8000 	nop.w
    9498:	f3af 8000 	nop.w
    949c:	f3af 8000 	nop.w

000094a0 <wavefolderParam1>:
	param1[v][string] = dbToATableLookup(value * 12.0f);
    94a0:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    94a4:	b538      	push	{r3, r4, r5, lr}
    94a6:	4605      	mov	r5, r0
    94a8:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 12.0f);
    94aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    94ae:	f002 fd07 	bl	bec0 <__dbToATableLookup_veneer>
    94b2:	4b04      	ldr	r3, [pc, #16]	; (94c4 <wavefolderParam1+0x24>)
    94b4:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    94b8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    94bc:	ed83 0a00 	vstr	s0, [r3]
}
    94c0:	bd38      	pop	{r3, r4, r5, pc}
    94c2:	bf00      	nop
    94c4:	2001d6c8 	.word	0x2001d6c8
    94c8:	f3af 8000 	nop.w
    94cc:	f3af 8000 	nop.w
    94d0:	f3af 8000 	nop.w
    94d4:	f3af 8000 	nop.w
    94d8:	f3af 8000 	nop.w
    94dc:	f3af 8000 	nop.w

000094e0 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    94e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    94e4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    94e8:	4b07      	ldr	r3, [pc, #28]	; (9508 <wavefolderParam3+0x28>)
	param3[v][string] = value;
    94ea:	4a08      	ldr	r2, [pc, #32]	; (950c <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
    94ec:	ee70 6a27 	vadd.f32	s13, s0, s15
    94f0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    94f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    94f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    94fc:	ed82 0a00 	vstr	s0, [r2]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    9500:	ed83 7a00 	vstr	s14, [r3]
}
    9504:	4770      	bx	lr
    9506:	bf00      	nop
    9508:	2001d3fc 	.word	0x2001d3fc
    950c:	2001d708 	.word	0x2001d708
    9510:	f3af 8000 	nop.w
    9514:	f3af 8000 	nop.w
    9518:	f3af 8000 	nop.w
    951c:	f3af 8000 	nop.w

00009520 <tiltParam1>:
{
    9520:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    9522:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    9526:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    952a:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    952e:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
    9532:	0084      	lsls	r4, r0, #2
{
    9534:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    9538:	eee0 7a68 	vfms.f32	s15, s0, s17
    953c:	eeb0 0a67 	vmov.f32	s0, s15
    9540:	f002 fcbe 	bl	bec0 <__dbToATableLookup_veneer>
    9544:	4808      	ldr	r0, [pc, #32]	; (9568 <tiltParam1+0x48>)
    9546:	4420      	add	r0, r4
    9548:	f002 fcda 	bl	bf00 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    954c:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    9550:	eea8 0a28 	vfma.f32	s0, s16, s17
    9554:	f002 fcb4 	bl	bec0 <__dbToATableLookup_veneer>
    9558:	4804      	ldr	r0, [pc, #16]	; (956c <tiltParam1+0x4c>)
}
    955a:	ecbd 8b02 	vpop	{d8}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    955e:	4420      	add	r0, r4
}
    9560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    9564:	f002 bb70 	b.w	bc48 <__tVZFilterHS_setGain_veneer>
    9568:	2001d83c 	.word	0x2001d83c
    956c:	2001d85c 	.word	0x2001d85c
    9570:	f3af 8000 	nop.w
    9574:	f3af 8000 	nop.w
    9578:	f3af 8000 	nop.w
    957c:	f3af 8000 	nop.w

00009580 <tiltParam2>:
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    9580:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    9584:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 95b8 <tiltParam2+0x38>
    9588:	eddf 7a0c 	vldr	s15, [pc, #48]	; 95bc <tiltParam2+0x3c>
    958c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 95c0 <tiltParam2+0x40>
    9590:	eee0 0a07 	vfma.f32	s1, s0, s14
    9594:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 95c4 <tiltParam2+0x44>
{
    9598:	b538      	push	{r3, r4, r5, lr}
    959a:	4605      	mov	r5, r0
    959c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    959e:	ee60 0aa7 	vmul.f32	s1, s1, s15
    95a2:	f002 fc51 	bl	be48 <__LEAF_clip_veneer>
	tVZFilterBell_setFreq(&bell1[v][string], value);
    95a6:	4b08      	ldr	r3, [pc, #32]	; (95c8 <tiltParam2+0x48>)
    95a8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    95ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    95b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setFreq(&bell1[v][string], value);
    95b4:	f002 bcf0 	b.w	bf98 <__tVZFilterBell_setFreq_veneer>
    95b8:	429a0000 	.word	0x429a0000
    95bc:	420fb824 	.word	0x420fb824
    95c0:	457ff000 	.word	0x457ff000
    95c4:	00000000 	.word	0x00000000
    95c8:	2001d248 	.word	0x2001d248
    95cc:	f3af 8000 	nop.w
    95d0:	f3af 8000 	nop.w
    95d4:	f3af 8000 	nop.w
    95d8:	f3af 8000 	nop.w
    95dc:	f3af 8000 	nop.w

000095e0 <tiltParam3>:
	tVZFilterBell_setBandwidth(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    95e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    95e4:	4b06      	ldr	r3, [pc, #24]	; (9600 <tiltParam3+0x20>)
    95e6:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    95ea:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    95ee:	ee30 0a07 	vadd.f32	s0, s0, s14
    95f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    95f6:	ee20 0a27 	vmul.f32	s0, s0, s15
    95fa:	f002 bb29 	b.w	bc50 <__tVZFilterBell_setBandwidth_veneer>
    95fe:	bf00      	nop
    9600:	2001d248 	.word	0x2001d248
    9604:	f3af 8000 	nop.w
    9608:	f3af 8000 	nop.w
    960c:	f3af 8000 	nop.w
    9610:	f3af 8000 	nop.w
    9614:	f3af 8000 	nop.w
    9618:	f3af 8000 	nop.w
    961c:	f3af 8000 	nop.w

00009620 <tiltParam4>:
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    9620:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    9624:	ed9f 7a09 	vldr	s14, [pc, #36]	; 964c <tiltParam4+0x2c>
{
    9628:	b538      	push	{r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    962a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    962e:	4605      	mov	r5, r0
    9630:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    9632:	eeb0 0a67 	vmov.f32	s0, s15
    9636:	f002 fc43 	bl	bec0 <__dbToATableLookup_veneer>
    963a:	4b05      	ldr	r3, [pc, #20]	; (9650 <tiltParam4+0x30>)
    963c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    9640:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    9644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    9648:	f002 bb76 	b.w	bd38 <__tVZFilterBell_setGain_veneer>
    964c:	42080000 	.word	0x42080000
    9650:	2001d248 	.word	0x2001d248
    9654:	f3af 8000 	nop.w
    9658:	f3af 8000 	nop.w
    965c:	f3af 8000 	nop.w

00009660 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    9660:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    9664:	4b04      	ldr	r3, [pc, #16]	; (9678 <compressorParam1+0x18>)
    9666:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    966a:	ee20 0a27 	vmul.f32	s0, s0, s15
    966e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    9672:	ed83 0a03 	vstr	s0, [r3, #12]
}
    9676:	4770      	bx	lr
    9678:	2001d268 	.word	0x2001d268
    967c:	f3af 8000 	nop.w

00009680 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    9680:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9684:	4b0a      	ldr	r3, [pc, #40]	; (96b0 <compressorParam2+0x30>)
    9686:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    968a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    968e:	eeb0 7a67 	vmov.f32	s14, s15
    9692:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    9696:	eea0 7a26 	vfma.f32	s14, s0, s13
    969a:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    969e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    96a2:	edd3 6a04 	vldr	s13, [r3, #16]
    96a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    96aa:	ed83 7a07 	vstr	s14, [r3, #28]
}
    96ae:	4770      	bx	lr
    96b0:	2001d268 	.word	0x2001d268
    96b4:	f3af 8000 	nop.w
    96b8:	f3af 8000 	nop.w
    96bc:	f3af 8000 	nop.w

000096c0 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    96c0:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    96c4:	4b04      	ldr	r3, [pc, #16]	; (96d8 <compressorParam3+0x18>)
    96c6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    96ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    96ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    96d2:	ed83 0a06 	vstr	s0, [r3, #24]
}
    96d6:	4770      	bx	lr
    96d8:	2001d268 	.word	0x2001d268
    96dc:	f3af 8000 	nop.w

000096e0 <compressorParam4>:
	comp[v][string]->tauAttack = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    96e0:	4b0b      	ldr	r3, [pc, #44]	; (9710 <compressorParam4+0x30>)
    96e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
    96e6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 9714 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    96ea:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    96ee:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    96f0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    96f4:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    96f8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    96fc:	ee20 0a07 	vmul.f32	s0, s0, s14
    9700:	ee87 0a80 	vdiv.f32	s0, s15, s0
    9704:	f002 fabc 	bl	bc80 <__fastExp4_veneer>
    9708:	ed84 0a01 	vstr	s0, [r4, #4]
}
    970c:	bd10      	pop	{r4, pc}
    970e:	bf00      	nop
    9710:	2001d268 	.word	0x2001d268
    9714:	3a83126f 	.word	0x3a83126f
    9718:	f3af 8000 	nop.w
    971c:	f3af 8000 	nop.w

00009720 <compressorParam5>:
	comp[v][string]->tauRelease = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    9720:	4b0b      	ldr	r3, [pc, #44]	; (9750 <compressorParam5+0x30>)
    9722:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
    9726:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 9754 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    972a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    972e:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    9730:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    9734:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fastExp4(-1.0f/(value * comp[v][string]->sampleRate));
    9738:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    973c:	ee20 0a07 	vmul.f32	s0, s0, s14
    9740:	ee87 0a80 	vdiv.f32	s0, s15, s0
    9744:	f002 fa9c 	bl	bc80 <__fastExp4_veneer>
    9748:	ed84 0a02 	vstr	s0, [r4, #8]
}
    974c:	bd10      	pop	{r4, pc}
    974e:	bf00      	nop
    9750:	2001d268 	.word	0x2001d268
    9754:	3a83126f 	.word	0x3a83126f
    9758:	f3af 8000 	nop.w
    975c:	f3af 8000 	nop.w

00009760 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    9760:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    9764:	4b05      	ldr	r3, [pc, #20]	; (977c <offsetParam2+0x1c>)
    9766:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    976a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    976e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9772:	eee0 7a07 	vfma.f32	s15, s0, s14
    9776:	edc3 7a00 	vstr	s15, [r3]
}
    977a:	4770      	bx	lr
    977c:	2001d6e8 	.word	0x2001d6e8

00009780 <param2Linear>:
	param2[v][string] = value;
    9780:	4b03      	ldr	r3, [pc, #12]	; (9790 <param2Linear+0x10>)
    9782:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9786:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    978a:	ed83 0a00 	vstr	s0, [r3]
}
    978e:	4770      	bx	lr
    9790:	2001d6e8 	.word	0x2001d6e8
    9794:	f3af 8000 	nop.w
    9798:	f3af 8000 	nop.w
    979c:	f3af 8000 	nop.w

000097a0 <param3Linear>:
	param3[v][string] = value;
    97a0:	4b03      	ldr	r3, [pc, #12]	; (97b0 <param3Linear+0x10>)
    97a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    97a6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    97aa:	ed83 0a00 	vstr	s0, [r3]
}
    97ae:	4770      	bx	lr
    97b0:	2001d708 	.word	0x2001d708
    97b4:	f3af 8000 	nop.w
    97b8:	f3af 8000 	nop.w
    97bc:	f3af 8000 	nop.w

000097c0 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    97c0:	eddf 6a10 	vldr	s13, [pc, #64]	; 9804 <param3Soft+0x44>
    97c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    97c8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 9808 <param3Soft+0x48>
    97cc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    97d0:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 980c <param3Soft+0x4c>
    97d4:	eee0 7a26 	vfma.f32	s15, s0, s13
    97d8:	4a0d      	ldr	r2, [pc, #52]	; (9810 <param3Soft+0x50>)
    97da:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    97de:	4b0d      	ldr	r3, [pc, #52]	; (9814 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
    97e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    97e4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    97e8:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    97ec:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    97f0:	eee5 6a86 	vfma.f32	s13, s11, s12
    97f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    97f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
    97fc:	edc3 6a00 	vstr	s13, [r3]
}
    9800:	4770      	bx	lr
    9802:	bf00      	nop
    9804:	3f7d70a4 	.word	0x3f7d70a4
    9808:	3c23d70a 	.word	0x3c23d70a
    980c:	3eaaaaaa 	.word	0x3eaaaaaa
    9810:	2001d708 	.word	0x2001d708
    9814:	2001d810 	.word	0x2001d810
    9818:	f3af 8000 	nop.w
    981c:	f3af 8000 	nop.w

00009820 <param3Hard>:
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    9820:	eddf 6a17 	vldr	s13, [pc, #92]	; 9880 <param3Hard+0x60>
    9824:	eddf 7a17 	vldr	s15, [pc, #92]	; 9884 <param3Hard+0x64>
    9828:	ed9f 7a17 	vldr	s14, [pc, #92]	; 9888 <param3Hard+0x68>
    982c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    9830:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    9832:	4b16      	ldr	r3, [pc, #88]	; (988c <param3Hard+0x6c>)
    9834:	0045      	lsls	r5, r0, #1
    9836:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    983a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    983c:	ee27 0a87 	vmul.f32	s0, s15, s14
    9840:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9844:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
    9848:	f002 fb46 	bl	bed8 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    984c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    9850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9854:	d00a      	beq.n	986c <param3Hard+0x4c>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    9856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    985a:	4b0d      	ldr	r3, [pc, #52]	; (9890 <param3Hard+0x70>)
    985c:	4425      	add	r5, r4
    985e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    9862:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    9866:	edc3 7a00 	vstr	s15, [r3]
}
    986a:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    986c:	4b08      	ldr	r3, [pc, #32]	; (9890 <param3Hard+0x70>)
    986e:	4425      	add	r5, r4
    9870:	eddf 7a08 	vldr	s15, [pc, #32]	; 9894 <param3Hard+0x74>
    9874:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    9878:	edc3 7a00 	vstr	s15, [r3]
}
    987c:	bd38      	pop	{r3, r4, r5, pc}
    987e:	bf00      	nop
    9880:	3f7d70a4 	.word	0x3f7d70a4
    9884:	3c23d70a 	.word	0x3c23d70a
    9888:	3fc90fdb 	.word	0x3fc90fdb
    988c:	2001d708 	.word	0x2001d708
    9890:	2001d7f0 	.word	0x2001d7f0
    9894:	4479ffff 	.word	0x4479ffff
    9898:	f3af 8000 	nop.w
    989c:	f3af 8000 	nop.w

000098a0 <param3Poly>:
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    98a0:	eddf 6a17 	vldr	s13, [pc, #92]	; 9900 <param3Poly+0x60>
    98a4:	eddf 7a17 	vldr	s15, [pc, #92]	; 9904 <param3Poly+0x64>
    98a8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 9908 <param3Poly+0x68>
    98ac:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    98b0:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    98b2:	4b16      	ldr	r3, [pc, #88]	; (990c <param3Poly+0x6c>)
    98b4:	0045      	lsls	r5, r0, #1
    98b6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    98ba:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    98bc:	ee27 0a87 	vmul.f32	s0, s15, s14
    98c0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    98c4:	ed83 0a00 	vstr	s0, [r3]
    float tempDiv = fastSine(param3[v][string]);
    98c8:	f002 fa8a 	bl	bde0 <__fastSine_veneer>
    if (tempDiv == 0.0f)
    98cc:	eeb5 0a40 	vcmp.f32	s0, #0.0
    98d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    98d4:	d00a      	beq.n	98ec <param3Poly+0x4c>
    polyDivider[v][string] = 1.0f/tempDiv;
    98d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    98da:	4b0d      	ldr	r3, [pc, #52]	; (9910 <param3Poly+0x70>)
    98dc:	4425      	add	r5, r4
    98de:	eec7 7a00 	vdiv.f32	s15, s14, s0
    98e2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    98e6:	edc3 7a00 	vstr	s15, [r3]
}
    98ea:	bd38      	pop	{r3, r4, r5, pc}
    polyDivider[v][string] = 1.0f/tempDiv;
    98ec:	4b08      	ldr	r3, [pc, #32]	; (9910 <param3Poly+0x70>)
    98ee:	4425      	add	r5, r4
    98f0:	eddf 7a08 	vldr	s15, [pc, #32]	; 9914 <param3Poly+0x74>
    98f4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    98f8:	edc3 7a00 	vstr	s15, [r3]
}
    98fc:	bd38      	pop	{r3, r4, r5, pc}
    98fe:	bf00      	nop
    9900:	3f7d70a4 	.word	0x3f7d70a4
    9904:	3c23d70a 	.word	0x3c23d70a
    9908:	3fc90fdb 	.word	0x3fc90fdb
    990c:	2001d708 	.word	0x2001d708
    9910:	2001d780 	.word	0x2001d780
    9914:	4479ffff 	.word	0x4479ffff
    9918:	f3af 8000 	nop.w
    991c:	f3af 8000 	nop.w

00009920 <param4Linear>:
	param4[v][string] = value;
    9920:	4b03      	ldr	r3, [pc, #12]	; (9930 <param4Linear+0x10>)
    9922:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9926:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    992a:	ed83 0a00 	vstr	s0, [r3]
}
    992e:	4770      	bx	lr
    9930:	2001d728 	.word	0x2001d728
    9934:	f3af 8000 	nop.w
    9938:	f3af 8000 	nop.w
    993c:	f3af 8000 	nop.w

00009940 <param5Linear>:
	param5[v][string] = value;
    9940:	4b03      	ldr	r3, [pc, #12]	; (9950 <param5Linear+0x10>)
    9942:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9946:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    994a:	ed83 0a00 	vstr	s0, [r3]
}
    994e:	4770      	bx	lr
    9950:	2001d748 	.word	0x2001d748
    9954:	f3af 8000 	nop.w
    9958:	f3af 8000 	nop.w
    995c:	f3af 8000 	nop.w

00009960 <param2BC>:
	tCrusher_setQuality (&bc[v][string],value);
    9960:	4b03      	ldr	r3, [pc, #12]	; (9970 <param2BC+0x10>)
    9962:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9966:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    996a:	f002 bc39 	b.w	c1e0 <__tCrusher_setQuality_veneer>
    996e:	bf00      	nop
    9970:	2001d228 	.word	0x2001d228
    9974:	f3af 8000 	nop.w
    9978:	f3af 8000 	nop.w
    997c:	f3af 8000 	nop.w

00009980 <param3BC>:
	value = ((1.0f - value)* inv_oversample) + 0.01f;
    9980:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9984:	4a08      	ldr	r2, [pc, #32]	; (99a8 <param3BC+0x28>)
    9986:	ed9f 7a09 	vldr	s14, [pc, #36]	; 99ac <param3BC+0x2c>
	tCrusher_setSamplingRatio (&bc[v][string], value);
    998a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = ((1.0f - value)* inv_oversample) + 0.01f;
    998e:	edd2 6a00 	vldr	s13, [r2]
    9992:	ee77 7ac0 	vsub.f32	s15, s15, s0
	tCrusher_setSamplingRatio (&bc[v][string], value);
    9996:	4b06      	ldr	r3, [pc, #24]	; (99b0 <param3BC+0x30>)
    9998:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    999c:	eea7 7aa6 	vfma.f32	s14, s15, s13
    99a0:	eeb0 0a47 	vmov.f32	s0, s14
    99a4:	f002 bc28 	b.w	c1f8 <__tCrusher_setSamplingRatio_veneer>
    99a8:	200008cc 	.word	0x200008cc
    99ac:	3c23d70a 	.word	0x3c23d70a
    99b0:	2001d228 	.word	0x2001d228
    99b4:	f3af 8000 	nop.w
    99b8:	f3af 8000 	nop.w
    99bc:	f3af 8000 	nop.w

000099c0 <param4BC>:
	tCrusher_setRound(&bc[v][string], value);
    99c0:	4b03      	ldr	r3, [pc, #12]	; (99d0 <param4BC+0x10>)
    99c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    99c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    99ca:	f002 b961 	b.w	bc90 <__tCrusher_setRound_veneer>
    99ce:	bf00      	nop
    99d0:	2001d228 	.word	0x2001d228
    99d4:	f3af 8000 	nop.w
    99d8:	f3af 8000 	nop.w
    99dc:	f3af 8000 	nop.w

000099e0 <param5BC>:
	tCrusher_setOperation(&bc[v][string], value);
    99e0:	4b03      	ldr	r3, [pc, #12]	; (99f0 <param5BC+0x10>)
    99e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    99e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    99ea:	f002 ba7d 	b.w	bee8 <__tCrusher_setOperation_veneer>
    99ee:	bf00      	nop
    99f0:	2001d228 	.word	0x2001d228
    99f4:	f3af 8000 	nop.w
    99f8:	f3af 8000 	nop.w
    99fc:	f3af 8000 	nop.w

00009a00 <fxMixSet>:
	fxMix[v][string] = value;
    9a00:	4b03      	ldr	r3, [pc, #12]	; (9a10 <fxMixSet+0x10>)
    9a02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9a06:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9a0a:	ed83 0a00 	vstr	s0, [r3]
}
    9a0e:	4770      	bx	lr
    9a10:	2001d3ac 	.word	0x2001d3ac
    9a14:	f3af 8000 	nop.w
    9a18:	f3af 8000 	nop.w
    9a1c:	f3af 8000 	nop.w

00009a20 <fxPostGainSet>:
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    9a20:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    9a24:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    9a28:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    9a2a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    9a2e:	4605      	mov	r5, r0
    9a30:	460c      	mov	r4, r1
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    9a32:	eeb0 0a67 	vmov.f32	s0, s15
    9a36:	f002 fa43 	bl	bec0 <__dbToATableLookup_veneer>
    9a3a:	4b04      	ldr	r3, [pc, #16]	; (9a4c <fxPostGainSet+0x2c>)
    9a3c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    9a40:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9a44:	ed83 0a00 	vstr	s0, [r3]
}
    9a48:	bd38      	pop	{r3, r4, r5, pc}
    9a4a:	bf00      	nop
    9a4c:	2001d3cc 	.word	0x2001d3cc
    9a50:	f3af 8000 	nop.w
    9a54:	f3af 8000 	nop.w
    9a58:	f3af 8000 	nop.w
    9a5c:	f3af 8000 	nop.w

00009a60 <wavefolderTick>:
{
    9a60:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    9a62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    float fbSample = wfState[v][string];
    9a66:	4d36      	ldr	r5, [pc, #216]	; (9b40 <wavefolderTick+0xe0>)
    9a68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    9a6c:	4b35      	ldr	r3, [pc, #212]	; (9b44 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
    9a6e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    9a72:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    9a76:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9a7a:	4a33      	ldr	r2, [pc, #204]	; (9b48 <wavefolderTick+0xe8>)
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    9a7c:	eddf 3a33 	vldr	s7, [pc, #204]	; 9b4c <wavefolderTick+0xec>
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    9a80:	0084      	lsls	r4, r0, #2
    9a82:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float fb = curFB * fbSample;
    9a86:	ed9f 3a32 	vldr	s6, [pc, #200]	; 9b50 <wavefolderTick+0xf0>
{
    9a8a:	ed2d 8b02 	vpush	{d8}
    9a8e:	ed95 6a00 	vldr	s12, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    9a92:	edd3 7a00 	vldr	s15, [r3]
    9a96:	fe86 6a66 	vminnm.f32	s12, s12, s13
    9a9a:	fe86 6a24 	vmaxnm.f32	s12, s12, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    9a9e:	ee26 7a06 	vmul.f32	s14, s12, s12
    float curFB = param3[v][string];
    9aa2:	4b2c      	ldr	r3, [pc, #176]	; (9b54 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    9aa4:	ee30 0a27 	vadd.f32	s0, s0, s15
    9aa8:	edd2 5a00 	vldr	s11, [r2]
    float curFB = param3[v][string];
    9aac:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
    9ab0:	4a29      	ldr	r2, [pc, #164]	; (9b58 <wavefolderTick+0xf8>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    9ab2:	ee67 7a23 	vmul.f32	s15, s14, s7
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    9ab6:	ee20 7a25 	vmul.f32	s14, s0, s11
    float fb = curFB * fbSample;
    9aba:	ed93 4a00 	vldr	s8, [r3]
    float curFF = param4[v][string];
    9abe:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9ac2:	4b26      	ldr	r3, [pc, #152]	; (9b5c <wavefolderTick+0xfc>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    9ac4:	ee76 7ae7 	vsub.f32	s15, s13, s15
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9ac8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 9b60 <wavefolderTick+0x100>
    9acc:	fec7 5a66 	vminnm.f32	s11, s14, s13
    float fb = curFB * fbSample;
    9ad0:	ee24 4a03 	vmul.f32	s8, s8, s6
    9ad4:	fec5 5aa4 	vmaxnm.f32	s11, s11, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    9ad8:	ee65 4aa5 	vmul.f32	s9, s11, s11
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    9adc:	ee67 7a86 	vmul.f32	s15, s15, s12
    float curFF = param4[v][string];
    9ae0:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9ae4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9ae8:	ee27 0a00 	vmul.f32	s0, s14, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    9aec:	ee76 2ac5 	vsub.f32	s5, s13, s10
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    9af0:	ee24 6aa3 	vmul.f32	s12, s9, s7
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9af4:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
    9af8:	ee67 7a84 	vmul.f32	s15, s15, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9afc:	ee25 5a03 	vmul.f32	s10, s10, s6
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    9b00:	ee76 6ac6 	vsub.f32	s13, s13, s12
    9b04:	eee2 7a87 	vfma.f32	s15, s5, s14
    9b08:	ee66 6aa5 	vmul.f32	s13, s13, s11
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9b0c:	eee6 7a85 	vfma.f32	s15, s13, s10
    9b10:	eeb0 8a67 	vmov.f32	s16, s15
    9b14:	f002 f9e0 	bl	bed8 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    9b18:	4b12      	ldr	r3, [pc, #72]	; (9b64 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    9b1a:	4813      	ldr	r0, [pc, #76]	; (9b68 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9b1c:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    9b20:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    9b22:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
    9b24:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    9b28:	eee8 7ac0 	vfms.f32	s15, s17, s0
    9b2c:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    9b30:	ee27 0a87 	vmul.f32	s0, s15, s14
}
    9b34:	ecbd 8b02 	vpop	{d8}
    9b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    9b3c:	f002 ba50 	b.w	bfe0 <__tHighpass_tick_veneer>
    9b40:	2001da34 	.word	0x2001da34
    9b44:	2001d6e8 	.word	0x2001d6e8
    9b48:	2001d6c8 	.word	0x2001d6c8
    9b4c:	3eaaaaaa 	.word	0x3eaaaaaa
    9b50:	3fbffff8 	.word	0x3fbffff8
    9b54:	2001d708 	.word	0x2001d708
    9b58:	2001d728 	.word	0x2001d728
    9b5c:	2001d748 	.word	0x2001d748
    9b60:	40c90fdb 	.word	0x40c90fdb
    9b64:	2001d3fc 	.word	0x2001d3fc
    9b68:	2001d288 	.word	0x2001d288
    9b6c:	f3af 8000 	nop.w
    9b70:	f3af 8000 	nop.w
    9b74:	f3af 8000 	nop.w
    9b78:	f3af 8000 	nop.w
    9b7c:	f3af 8000 	nop.w

00009b80 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    9b80:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    9b84:	ed9f 7a05 	vldr	s14, [pc, #20]	; 9b9c <chorusParam1+0x1c>
    9b88:	4b05      	ldr	r3, [pc, #20]	; (9ba0 <chorusParam1+0x20>)
    9b8a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9b8e:	eee0 7a07 	vfma.f32	s15, s0, s14
    9b92:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9b96:	edc3 7a00 	vstr	s15, [r3]
}
    9b9a:	4770      	bx	lr
    9b9c:	45b4a000 	.word	0x45b4a000
    9ba0:	2001d6c8 	.word	0x2001d6c8
    9ba4:	f3af 8000 	nop.w
    9ba8:	f3af 8000 	nop.w
    9bac:	f3af 8000 	nop.w
    9bb0:	f3af 8000 	nop.w
    9bb4:	f3af 8000 	nop.w
    9bb8:	f3af 8000 	nop.w
    9bbc:	f3af 8000 	nop.w

00009bc0 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    9bc0:	eddf 7a05 	vldr	s15, [pc, #20]	; 9bd8 <chorusParam2+0x18>
    9bc4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9bc8:	4b04      	ldr	r3, [pc, #16]	; (9bdc <chorusParam2+0x1c>)
    9bca:	ee20 0a27 	vmul.f32	s0, s0, s15
    9bce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9bd2:	ed83 0a00 	vstr	s0, [r3]
}
    9bd6:	4770      	bx	lr
    9bd8:	3dcccccd 	.word	0x3dcccccd
    9bdc:	2001d6e8 	.word	0x2001d6e8

00009be0 <chorusParam3>:
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    9be0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 9c00 <chorusParam3+0x20>
    9be4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9be8:	eddf 7a06 	vldr	s15, [pc, #24]	; 9c04 <chorusParam3+0x24>
    9bec:	4b06      	ldr	r3, [pc, #24]	; (9c08 <chorusParam3+0x28>)
    9bee:	eee0 7a07 	vfma.f32	s15, s0, s14
    9bf2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9bf6:	eeb0 0a67 	vmov.f32	s0, s15
    9bfa:	f002 b8ed 	b.w	bdd8 <__tCycle_setFreq_veneer>
    9bfe:	bf00      	nop
    9c00:	3ecccccd 	.word	0x3ecccccd
    9c04:	3c23d70a 	.word	0x3c23d70a
    9c08:	2001d618 	.word	0x2001d618
    9c0c:	f3af 8000 	nop.w
    9c10:	f3af 8000 	nop.w
    9c14:	f3af 8000 	nop.w
    9c18:	f3af 8000 	nop.w
    9c1c:	f3af 8000 	nop.w

00009c20 <chorusParam4>:
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    9c20:	ed9f 7a07 	vldr	s14, [pc, #28]	; 9c40 <chorusParam4+0x20>
    9c24:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9c28:	eddf 7a06 	vldr	s15, [pc, #24]	; 9c44 <chorusParam4+0x24>
    9c2c:	4b06      	ldr	r3, [pc, #24]	; (9c48 <chorusParam4+0x28>)
    9c2e:	eee0 7a07 	vfma.f32	s15, s0, s14
    9c32:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9c36:	eeb0 0a67 	vmov.f32	s0, s15
    9c3a:	f002 b8cd 	b.w	bdd8 <__tCycle_setFreq_veneer>
    9c3e:	bf00      	nop
    9c40:	3ee38e37 	.word	0x3ee38e37
    9c44:	3c343958 	.word	0x3c343958
    9c48:	2001d638 	.word	0x2001d638
    9c4c:	f3af 8000 	nop.w
    9c50:	f3af 8000 	nop.w
    9c54:	f3af 8000 	nop.w
    9c58:	f3af 8000 	nop.w
    9c5c:	f3af 8000 	nop.w

00009c60 <delayParam1>:
    tTapeDelay_setDelay(&tapeDelay[string], value * 30000.0f + 1.0f);
    9c60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9c64:	ed9f 7a05 	vldr	s14, [pc, #20]	; 9c7c <delayParam1+0x1c>
    9c68:	4805      	ldr	r0, [pc, #20]	; (9c80 <delayParam1+0x20>)
    9c6a:	eee0 7a07 	vfma.f32	s15, s0, s14
    9c6e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    9c72:	eeb0 0a67 	vmov.f32	s0, s15
    9c76:	f002 baa3 	b.w	c1c0 <__tTapeDelay_setDelay_veneer>
    9c7a:	bf00      	nop
    9c7c:	46ea6000 	.word	0x46ea6000
    9c80:	2001d9dc 	.word	0x2001d9dc
    9c84:	f3af 8000 	nop.w
    9c88:	f3af 8000 	nop.w
    9c8c:	f3af 8000 	nop.w
    9c90:	f3af 8000 	nop.w
    9c94:	f3af 8000 	nop.w
    9c98:	f3af 8000 	nop.w
    9c9c:	f3af 8000 	nop.w

00009ca0 <delayParam2>:
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    9ca0:	ed9f 1a09 	vldr	s2, [pc, #36]	; 9cc8 <delayParam2+0x28>
{
    9ca4:	b538      	push	{r3, r4, r5, lr}
    9ca6:	4605      	mov	r5, r0
    9ca8:	460c      	mov	r4, r1
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    9caa:	ee60 0a01 	vmul.f32	s1, s0, s2
    9cae:	ed9f 0a07 	vldr	s0, [pc, #28]	; 9ccc <delayParam2+0x2c>
    9cb2:	f002 f8c9 	bl	be48 <__LEAF_clip_veneer>
    9cb6:	4b06      	ldr	r3, [pc, #24]	; (9cd0 <delayParam2+0x30>)
    9cb8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    9cbc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9cc0:	ed83 0a00 	vstr	s0, [r3]
}
    9cc4:	bd38      	pop	{r3, r4, r5, pc}
    9cc6:	bf00      	nop
    9cc8:	3f8ccccd 	.word	0x3f8ccccd
    9ccc:	00000000 	.word	0x00000000
    9cd0:	2001d6e8 	.word	0x2001d6e8
    9cd4:	f3af 8000 	nop.w
    9cd8:	f3af 8000 	nop.w
    9cdc:	f3af 8000 	nop.w

00009ce0 <delayParam3>:
    tSVF_setFreqFast(&FXlowpass[v][string], (value * 127.0f));
    9ce0:	eddf 7a05 	vldr	s15, [pc, #20]	; 9cf8 <delayParam3+0x18>
    9ce4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9ce8:	4b04      	ldr	r3, [pc, #16]	; (9cfc <delayParam3+0x1c>)
    9cea:	ee20 0a27 	vmul.f32	s0, s0, s15
    9cee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9cf2:	f002 b979 	b.w	bfe8 <__tSVF_setFreqFast_veneer>
    9cf6:	bf00      	nop
    9cf8:	42fe0000 	.word	0x42fe0000
    9cfc:	2001d1a0 	.word	0x2001d1a0

00009d00 <delayParam4>:
    tSVF_setFreqFast(&FXhighpass[v][string], (value * 127.0f));
    9d00:	eddf 7a05 	vldr	s15, [pc, #20]	; 9d18 <delayParam4+0x18>
    9d04:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9d08:	4b04      	ldr	r3, [pc, #16]	; (9d1c <delayParam4+0x1c>)
    9d0a:	ee20 0a27 	vmul.f32	s0, s0, s15
    9d0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9d12:	f002 b969 	b.w	bfe8 <__tSVF_setFreqFast_veneer>
    9d16:	bf00      	nop
    9d18:	42fe0000 	.word	0x42fe0000
    9d1c:	2001d180 	.word	0x2001d180

00009d20 <delayParam5>:
	param5[v][string] = (value * 1.5f) + 1.0f;
    9d20:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
    9d24:	4b05      	ldr	r3, [pc, #20]	; (9d3c <delayParam5+0x1c>)
    9d26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    9d2a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    9d2e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    9d32:	eee0 7a07 	vfma.f32	s15, s0, s14
    9d36:	edc3 7a00 	vstr	s15, [r3]
}
    9d3a:	4770      	bx	lr
    9d3c:	2001d748 	.word	0x2001d748

00009d40 <chorusTick>:

float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    9d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tLinearDelay_setDelay(&delay1[string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    9d44:	eb01 0340 	add.w	r3, r1, r0, lsl #1
    9d48:	4a2b      	ldr	r2, [pc, #172]	; (9df8 <chorusTick+0xb8>)
    9d4a:	4f2c      	ldr	r7, [pc, #176]	; (9dfc <chorusTick+0xbc>)
    9d4c:	008c      	lsls	r4, r1, #2
    9d4e:	482c      	ldr	r0, [pc, #176]	; (9e00 <chorusTick+0xc0>)
    9d50:	eb02 0883 	add.w	r8, r2, r3, lsl #2
    9d54:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    9d58:	4e2a      	ldr	r6, [pc, #168]	; (9e04 <chorusTick+0xc4>)
    9d5a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    9d5e:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    9d62:	009d      	lsls	r5, r3, #2
{
    9d64:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    9d68:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    9d6c:	edd7 9a00 	vldr	s19, [r7]
{
    9d70:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    9d74:	ed98 9a00 	vldr	s18, [r8]
    9d78:	f002 f872 	bl	be60 <__tCycle_tick_veneer>
    9d7c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 9e08 <chorusTick+0xc8>
    9d80:	eef0 7a48 	vmov.f32	s15, s16
    9d84:	4630      	mov	r0, r6
    9d86:	ee29 9a07 	vmul.f32	s18, s18, s14
    9d8a:	eee9 7a80 	vfma.f32	s15, s19, s0
    9d8e:	ee29 0a27 	vmul.f32	s0, s18, s15
    9d92:	f002 f881 	bl	be98 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    9d96:	481d      	ldr	r0, [pc, #116]	; (9e0c <chorusTick+0xcc>)
    9d98:	4b1d      	ldr	r3, [pc, #116]	; (9e10 <chorusTick+0xd0>)
    9d9a:	edd7 9a00 	vldr	s19, [r7]
    9d9e:	4428      	add	r0, r5
    9da0:	441c      	add	r4, r3
    9da2:	ed98 9a00 	vldr	s18, [r8]
    9da6:	f002 f85b 	bl	be60 <__tCycle_tick_veneer>
    9daa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    9dae:	eea9 8ac0 	vfms.f32	s16, s19, s0
    9db2:	4620      	mov	r0, r4
    9db4:	ee29 0a27 	vmul.f32	s0, s18, s15
    9db8:	ee20 0a08 	vmul.f32	s0, s0, s16
    9dbc:	f002 f86c 	bl	be98 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[string], sample) - sample;
    9dc0:	eeb0 0a68 	vmov.f32	s0, s17
    9dc4:	4630      	mov	r0, r6
    9dc6:	f002 f8d3 	bl	bf70 <__tLinearDelay_tick_veneer>
    9dca:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[string], sample) - sample;
    9dce:	4620      	mov	r0, r4
    9dd0:	eeb0 0a68 	vmov.f32	s0, s17
    9dd4:	f002 f8cc 	bl	bf70 <__tLinearDelay_tick_veneer>
    9dd8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    9ddc:	ee38 0a00 	vadd.f32	s0, s16, s0
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    9de0:	480c      	ldr	r0, [pc, #48]	; (9e14 <chorusTick+0xd4>)
    9de2:	4428      	add	r0, r5
    9de4:	eea8 0ae7 	vfms.f32	s0, s17, s15
    9de8:	f002 f8fa 	bl	bfe0 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    9dec:	eeb1 0a40 	vneg.f32	s0, s0
    9df0:	ecbd 8b04 	vpop	{d8-d9}
    9df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9df8:	2001d6c8 	.word	0x2001d6c8
    9dfc:	2001d6e8 	.word	0x2001d6e8
    9e00:	2001d618 	.word	0x2001d618
    9e04:	2001d2c8 	.word	0x2001d2c8
    9e08:	3f34fdf4 	.word	0x3f34fdf4
    9e0c:	2001d638 	.word	0x2001d638
    9e10:	2001d2d0 	.word	0x2001d2d0
    9e14:	2001d288 	.word	0x2001d288
    9e18:	f3af 8000 	nop.w
    9e1c:	f3af 8000 	nop.w

00009e20 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * (param1[v][string]+1.0f);
    9e20:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    9e24:	4a11      	ldr	r2, [pc, #68]	; (9e6c <shaperTick+0x4c>)
    sample = sample * (param1[v][string]+1.0f);
    9e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    9e2a:	4b11      	ldr	r3, [pc, #68]	; (9e70 <shaperTick+0x50>)
    9e2c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    9e30:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
    9e34:	b510      	push	{r4, lr}
    sample = sample * (param1[v][string]+1.0f);
    9e36:	4c0f      	ldr	r4, [pc, #60]	; (9e74 <shaperTick+0x54>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    9e38:	edd2 6a00 	vldr	s13, [r2]
    sample = sample * (param1[v][string]+1.0f);
    9e3c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    9e40:	edd3 0a00 	vldr	s1, [r3]
    sample = sample * (param1[v][string]+1.0f);
    9e44:	edd4 7a00 	vldr	s15, [r4]
    9e48:	0084      	lsls	r4, r0, #2
    9e4a:	ee37 7a87 	vadd.f32	s14, s15, s14
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    9e4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    9e52:	eee7 7a00 	vfma.f32	s15, s14, s0
    9e56:	eeb0 0a67 	vmov.f32	s0, s15
    9e5a:	f002 f959 	bl	c110 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    9e5e:	4806      	ldr	r0, [pc, #24]	; (9e78 <shaperTick+0x58>)
    9e60:	4420      	add	r0, r4
    return temp;
}
    9e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    9e66:	f002 b8bb 	b.w	bfe0 <__tHighpass_tick_veneer>
    9e6a:	bf00      	nop
    9e6c:	2001d6e8 	.word	0x2001d6e8
    9e70:	2001d708 	.word	0x2001d708
    9e74:	2001d6c8 	.word	0x2001d6c8
    9e78:	2001d288 	.word	0x2001d288
    9e7c:	f3af 8000 	nop.w

00009e80 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    9e80:	4770      	bx	lr
    9e82:	bf00      	nop
    9e84:	f3af 8000 	nop.w
    9e88:	f3af 8000 	nop.w
    9e8c:	f3af 8000 	nop.w
    9e90:	f3af 8000 	nop.w
    9e94:	f3af 8000 	nop.w
    9e98:	f3af 8000 	nop.w
    9e9c:	f3af 8000 	nop.w

00009ea0 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    9ea0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    9ea4:	4b08      	ldr	r3, [pc, #32]	; (9ec8 <tiltFilterTick+0x28>)
{
    9ea6:	b510      	push	{r4, lr}
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    9ea8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    9eac:	008c      	lsls	r4, r1, #2
    9eae:	f002 f98b 	bl	c1c8 <__tVZFilterLS_tick_veneer>
    sample = tVZFilterHS_tick(&shelf2[v][string], sample);
    9eb2:	4806      	ldr	r0, [pc, #24]	; (9ecc <tiltFilterTick+0x2c>)
    9eb4:	4420      	add	r0, r4
    9eb6:	f002 f94b 	bl	c150 <__tVZFilterHS_tick_veneer>
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    9eba:	4805      	ldr	r0, [pc, #20]	; (9ed0 <tiltFilterTick+0x30>)
    9ebc:	4420      	add	r0, r4
    return sample;
}
    9ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    9ec2:	f002 b8f9 	b.w	c0b8 <__tVZFilterBell_tick_veneer>
    9ec6:	bf00      	nop
    9ec8:	2001d83c 	.word	0x2001d83c
    9ecc:	2001d85c 	.word	0x2001d85c
    9ed0:	2001d248 	.word	0x2001d248
    9ed4:	f3af 8000 	nop.w
    9ed8:	f3af 8000 	nop.w
    9edc:	f3af 8000 	nop.w

00009ee0 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
    9ee0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = fast_tanh5(sample + (param2[v][string]*gain));
    9ee4:	4a0d      	ldr	r2, [pc, #52]	; (9f1c <tanhTick+0x3c>)
    9ee6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
    9eea:	4b0d      	ldr	r3, [pc, #52]	; (9f20 <tanhTick+0x40>)
    float temp = fast_tanh5(sample + (param2[v][string]*gain));
    9eec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    float gain = param1[v][string];
    9ef0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    9ef4:	b510      	push	{r4, lr}
    9ef6:	edd2 6a00 	vldr	s13, [r2]
    float gain = param1[v][string];
    9efa:	008c      	lsls	r4, r1, #2
    9efc:	edd3 7a00 	vldr	s15, [r3]
    float temp = fast_tanh5(sample + (param2[v][string]*gain));
    9f00:	eea6 0a87 	vfma.f32	s0, s13, s14
    9f04:	ee27 0a80 	vmul.f32	s0, s15, s0
    9f08:	f001 ff46 	bl	bd98 <__fast_tanh5_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    9f0c:	4805      	ldr	r0, [pc, #20]	; (9f24 <tanhTick+0x44>)
    9f0e:	4420      	add	r0, r4
    9f10:	f002 f866 	bl	bfe0 <__tHighpass_tick_veneer>
    //temp *= param4[v][string];
    temp = fast_tanh5(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    9f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = fast_tanh5(temp);
    9f18:	f001 bf3e 	b.w	bd98 <__fast_tanh5_veneer>
    9f1c:	2001d6e8 	.word	0x2001d6e8
    9f20:	2001d6c8 	.word	0x2001d6c8
    9f24:	2001d288 	.word	0x2001d288
    9f28:	f3af 8000 	nop.w
    9f2c:	f3af 8000 	nop.w
    9f30:	f3af 8000 	nop.w
    9f34:	f3af 8000 	nop.w
    9f38:	f3af 8000 	nop.w
    9f3c:	f3af 8000 	nop.w

00009f40 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    9f40:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    9f44:	4a11      	ldr	r2, [pc, #68]	; (9f8c <softClipTick+0x4c>)
    sample = sample + param2[v][string];
    9f46:	4b12      	ldr	r3, [pc, #72]	; (9f90 <softClipTick+0x50>)
    9f48:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string];
    9f4c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    9f50:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    sample = sample + param2[v][string];
    9f54:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9f58:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
    9f5c:	ed92 5a00 	vldr	s10, [r2]
    9f60:	edd3 7a00 	vldr	s15, [r3]
    9f64:	eddf 6a0b 	vldr	s13, [pc, #44]	; 9f94 <softClipTick+0x54>
    9f68:	eee5 7a00 	vfma.f32	s15, s10, s0
    {
        sample = 1.5f * (sample) - (((sample * sample * sample))* 0.3333333f);
        //sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    9f6c:	480a      	ldr	r0, [pc, #40]	; (9f98 <softClipTick+0x58>)
    9f6e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    9f72:	fec7 7ae5 	vminnm.f32	s15, s15, s11
    9f76:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = 1.5f * (sample) - (((sample * sample * sample))* 0.3333333f);
    9f7a:	ee27 6ae7 	vnmul.f32	s12, s15, s15
    9f7e:	eea6 7a26 	vfma.f32	s14, s12, s13
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    9f82:	ee27 0a27 	vmul.f32	s0, s14, s15
    9f86:	f002 b82b 	b.w	bfe0 <__tHighpass_tick_veneer>
    9f8a:	bf00      	nop
    9f8c:	2001d6c8 	.word	0x2001d6c8
    9f90:	2001d6e8 	.word	0x2001d6e8
    9f94:	3eaaaaaa 	.word	0x3eaaaaaa
    9f98:	2001d288 	.word	0x2001d288
    9f9c:	f3af 8000 	nop.w

00009fa0 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    9fa0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    9fa4:	4a1a      	ldr	r2, [pc, #104]	; (a010 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
    9fa6:	4b1b      	ldr	r3, [pc, #108]	; (a014 <hardClipTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    9fa8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    9fac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    9fb0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    9fb4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    9fb8:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    9fba:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    9fbe:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    9fc0:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    9fc4:	4e14      	ldr	r6, [pc, #80]	; (a018 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
    9fc6:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    9fca:	4d14      	ldr	r5, [pc, #80]	; (a01c <hardClipTick+0x7c>)
    9fcc:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    9fd0:	4425      	add	r5, r4
    9fd2:	ed96 7a00 	vldr	s14, [r6]
    9fd6:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    9fda:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    9fde:	ee27 0a87 	vmul.f32	s0, s15, s14
    9fe2:	f001 ff79 	bl	bed8 <__arm_sin_f32_veneer>
    9fe6:	ed96 7a00 	vldr	s14, [r6]
    9fea:	edd5 7a00 	vldr	s15, [r5]
    9fee:	ee67 7a87 	vmul.f32	s15, s15, s14
    9ff2:	ee27 0a80 	vmul.f32	s0, s15, s0
    9ff6:	f001 ff6f 	bl	bed8 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    9ffa:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    9ffe:	4808      	ldr	r0, [pc, #32]	; (a020 <hardClipTick+0x80>)
    a000:	ee20 0a27 	vmul.f32	s0, s0, s15
    a004:	4420      	add	r0, r4
    return sample;
}
    a006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    a00a:	f001 bfe9 	b.w	bfe0 <__tHighpass_tick_veneer>
    a00e:	bf00      	nop
    a010:	2001d6c8 	.word	0x2001d6c8
    a014:	2001d6e8 	.word	0x2001d6e8
    a018:	2001d708 	.word	0x2001d708
    a01c:	2001d7f0 	.word	0x2001d7f0
    a020:	2001d288 	.word	0x2001d288
    a024:	f3af 8000 	nop.w
    a028:	f3af 8000 	nop.w
    a02c:	f3af 8000 	nop.w
    a030:	f3af 8000 	nop.w
    a034:	f3af 8000 	nop.w
    a038:	f3af 8000 	nop.w
    a03c:	f3af 8000 	nop.w

0000a040 <polynomialShaperTick>:


float __ATTR_ITCMRAM polynomialShaperTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    a040:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    a044:	4a1a      	ldr	r2, [pc, #104]	; (a0b0 <polynomialShaperTick+0x70>)
    sample = sample + param2[v][string];
    a046:	4b1b      	ldr	r3, [pc, #108]	; (a0b4 <polynomialShaperTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }

	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    a048:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    a04c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    a050:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    a054:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    a058:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    a05a:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    a05e:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    a060:	edd3 7a00 	vldr	s15, [r3]
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    a064:	4e14      	ldr	r6, [pc, #80]	; (a0b8 <polynomialShaperTick+0x78>)
    sample = sample + param2[v][string];
    a066:	eee5 7a80 	vfma.f32	s15, s11, s0
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    a06a:	4d14      	ldr	r5, [pc, #80]	; (a0bc <polynomialShaperTick+0x7c>)
    a06c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    a070:	4425      	add	r5, r4
    a072:	ed96 7a00 	vldr	s14, [r6]
    a076:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    a07a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    a07e:	ee27 0a87 	vmul.f32	s0, s15, s14
    a082:	f001 fead 	bl	bde0 <__fastSine_veneer>
    a086:	ed96 7a00 	vldr	s14, [r6]
    a08a:	edd5 7a00 	vldr	s15, [r5]
    a08e:	ee67 7a87 	vmul.f32	s15, s15, s14
    a092:	ee27 0a80 	vmul.f32	s0, s15, s0
    a096:	f001 fea3 	bl	bde0 <__fastSine_veneer>
	sample = sample * polyDivider[v][string];
    a09a:	edd5 7a00 	vldr	s15, [r5]


    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    a09e:	4808      	ldr	r0, [pc, #32]	; (a0c0 <polynomialShaperTick+0x80>)
    a0a0:	ee20 0a27 	vmul.f32	s0, s0, s15
    a0a4:	4420      	add	r0, r4
    return sample;
}
    a0a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    a0aa:	f001 bf99 	b.w	bfe0 <__tHighpass_tick_veneer>
    a0ae:	bf00      	nop
    a0b0:	2001d6c8 	.word	0x2001d6c8
    a0b4:	2001d6e8 	.word	0x2001d6e8
    a0b8:	2001d708 	.word	0x2001d708
    a0bc:	2001d780 	.word	0x2001d780
    a0c0:	2001d288 	.word	0x2001d288
    a0c4:	f3af 8000 	nop.w
    a0c8:	f3af 8000 	nop.w
    a0cc:	f3af 8000 	nop.w
    a0d0:	f3af 8000 	nop.w
    a0d4:	f3af 8000 	nop.w
    a0d8:	f3af 8000 	nop.w
    a0dc:	f3af 8000 	nop.w

0000a0e0 <satTick>:
float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
    a0e0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabsf(sample + param2[v][string]));
    a0e4:	4b14      	ldr	r3, [pc, #80]	; (a138 <satTick+0x58>)
    sample = sample * param1[v][string];
    a0e6:	4a15      	ldr	r2, [pc, #84]	; (a13c <satTick+0x5c>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabsf(sample + param2[v][string]));
    a0e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    a0ec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    a0f0:	4813      	ldr	r0, [pc, #76]	; (a140 <satTick+0x60>)
    sample = sample * param1[v][string];
    a0f2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    a0f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
    a0fa:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabsf(sample + param2[v][string]));
    a0fc:	edd3 7a00 	vldr	s15, [r3]
    sample = sample * param1[v][string];
    a100:	008c      	lsls	r4, r1, #2
    a102:	edd2 6a00 	vldr	s13, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabsf(sample + param2[v][string]));
    a106:	eeb0 7a67 	vmov.f32	s14, s15
    a10a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    a10e:	eea6 7a80 	vfma.f32	s14, s13, s0
    a112:	eee6 7a80 	vfma.f32	s15, s13, s0
    a116:	eeb0 0ac7 	vabs.f32	s0, s14
    a11a:	ee30 0a06 	vadd.f32	s0, s0, s12
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    a11e:	ee87 0a80 	vdiv.f32	s0, s15, s0
    a122:	f001 ff5d 	bl	bfe0 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    a126:	4807      	ldr	r0, [pc, #28]	; (a144 <satTick+0x64>)
    a128:	4420      	add	r0, r4
    a12a:	f001 ff59 	bl	bfe0 <__tHighpass_tick_veneer>
    temp = fast_tanh5(temp);
    return temp;
}
    a12e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = fast_tanh5(temp);
    a132:	f001 be31 	b.w	bd98 <__fast_tanh5_veneer>
    a136:	bf00      	nop
    a138:	2001d6e8 	.word	0x2001d6e8
    a13c:	2001d6c8 	.word	0x2001d6c8
    a140:	2001d288 	.word	0x2001d288
    a144:	2001d2a8 	.word	0x2001d2a8
    a148:	f3af 8000 	nop.w
    a14c:	f3af 8000 	nop.w
    a150:	f3af 8000 	nop.w
    a154:	f3af 8000 	nop.w
    a158:	f3af 8000 	nop.w
    a15c:	f3af 8000 	nop.w

0000a160 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    a160:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    a164:	4b05      	ldr	r3, [pc, #20]	; (a17c <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
    a166:	4806      	ldr	r0, [pc, #24]	; (a180 <bcTick+0x20>)
    sample = sample * param1[v][string];
    a168:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    a16c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    a170:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    a174:	ee20 0a27 	vmul.f32	s0, s0, s15
    a178:	f001 bda6 	b.w	bcc8 <__tCrusher_tick_veneer>
    a17c:	2001d6c8 	.word	0x2001d6c8
    a180:	2001d228 	.word	0x2001d228
    a184:	f3af 8000 	nop.w
    a188:	f3af 8000 	nop.w
    a18c:	f3af 8000 	nop.w
    a190:	f3af 8000 	nop.w
    a194:	f3af 8000 	nop.w
    a198:	f3af 8000 	nop.w
    a19c:	f3af 8000 	nop.w

0000a1a0 <compressorTick>:
}


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
    a1a0:	4b03      	ldr	r3, [pc, #12]	; (a1b0 <compressorTick+0x10>)
    a1a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a1a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a1aa:	f001 beed 	b.w	bf88 <__tCompressor_tickWithTableHardKnee_veneer>
    a1ae:	bf00      	nop
    a1b0:	2001d268 	.word	0x2001d268
    a1b4:	f3af 8000 	nop.w
    a1b8:	f3af 8000 	nop.w
    a1bc:	f3af 8000 	nop.w

0000a1c0 <FXlowpassTick>:
	//return tCompressor_tick(&comp[v][string], sample);
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
    a1c0:	4b03      	ldr	r3, [pc, #12]	; (a1d0 <FXlowpassTick+0x10>)
    a1c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a1c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a1ca:	f001 bf85 	b.w	c0d8 <__tSVF_tick_veneer>
    a1ce:	bf00      	nop
    a1d0:	2001d1a0 	.word	0x2001d1a0
    a1d4:	f3af 8000 	nop.w
    a1d8:	f3af 8000 	nop.w
    a1dc:	f3af 8000 	nop.w

0000a1e0 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
    a1e0:	4b03      	ldr	r3, [pc, #12]	; (a1f0 <FXhighpassTick+0x10>)
    a1e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a1e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a1ea:	f001 bf75 	b.w	c0d8 <__tSVF_tick_veneer>
    a1ee:	bf00      	nop
    a1f0:	2001d180 	.word	0x2001d180
    a1f4:	f3af 8000 	nop.w
    a1f8:	f3af 8000 	nop.w
    a1fc:	f3af 8000 	nop.w

0000a200 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
    a200:	4b03      	ldr	r3, [pc, #12]	; (a210 <FXbandpassTick+0x10>)
    a202:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a20a:	f001 bf65 	b.w	c0d8 <__tSVF_tick_veneer>
    a20e:	bf00      	nop
    a210:	2001d140 	.word	0x2001d140
    a214:	f3af 8000 	nop.w
    a218:	f3af 8000 	nop.w
    a21c:	f3af 8000 	nop.w

0000a220 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    a220:	4b03      	ldr	r3, [pc, #12]	; (a230 <FXdiodeLowpassTick+0x10>)
    a222:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a226:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a22a:	f001 bd35 	b.w	bc98 <__tDiodeFilter_tick_veneer>
    a22e:	bf00      	nop
    a230:	2001d160 	.word	0x2001d160
    a234:	f3af 8000 	nop.w
    a238:	f3af 8000 	nop.w
    a23c:	f3af 8000 	nop.w

0000a240 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilterBell_tick(&FXVZfilterPeak[v][string], sample);
    a240:	4b03      	ldr	r3, [pc, #12]	; (a250 <FXVZpeakTick+0x10>)
    a242:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a246:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a24a:	f001 bf35 	b.w	c0b8 <__tVZFilterBell_tick_veneer>
    a24e:	bf00      	nop
    a250:	2001d120 	.word	0x2001d120
    a254:	f3af 8000 	nop.w
    a258:	f3af 8000 	nop.w
    a25c:	f3af 8000 	nop.w

0000a260 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilterLS_tick(&FXVZfilterLS[v][string], sample);
    a260:	4b03      	ldr	r3, [pc, #12]	; (a270 <FXVZlowshelfTick+0x10>)
    a262:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a266:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a26a:	f001 bfad 	b.w	c1c8 <__tVZFilterLS_tick_veneer>
    a26e:	bf00      	nop
    a270:	2001d100 	.word	0x2001d100
    a274:	f3af 8000 	nop.w
    a278:	f3af 8000 	nop.w
    a27c:	f3af 8000 	nop.w

0000a280 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilterHS_tick(&FXVZfilterHS[v][string], sample);
    a280:	4b03      	ldr	r3, [pc, #12]	; (a290 <FXVZhighshelfTick+0x10>)
    a282:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a28a:	f001 bf61 	b.w	c150 <__tVZFilterHS_tick_veneer>
    a28e:	bf00      	nop
    a290:	2001d0e0 	.word	0x2001d0e0
    a294:	f3af 8000 	nop.w
    a298:	f3af 8000 	nop.w
    a29c:	f3af 8000 	nop.w

0000a2a0 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    a2a0:	4b03      	ldr	r3, [pc, #12]	; (a2b0 <FXVZbandrejectTick+0x10>)
    a2a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a2a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a2aa:	f001 bec5 	b.w	c038 <__tVZFilter_tickEfficient_veneer>
    a2ae:	bf00      	nop
    a2b0:	2001d0c0 	.word	0x2001d0c0
    a2b4:	f3af 8000 	nop.w
    a2b8:	f3af 8000 	nop.w
    a2bc:	f3af 8000 	nop.w

0000a2c0 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    a2c0:	4b03      	ldr	r3, [pc, #12]	; (a2d0 <FXLadderLowpassTick+0x10>)
    a2c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a2c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a2ca:	f001 bced 	b.w	bca8 <__tLadderFilter_tick_veneer>
    a2ce:	bf00      	nop
    a2d0:	2001d0a0 	.word	0x2001d0a0
    a2d4:	f3af 8000 	nop.w
    a2d8:	f3af 8000 	nop.w
    a2dc:	f3af 8000 	nop.w

0000a2e0 <FXLowpassParam1>:
}
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a2e0:	ed9f 7a07 	vldr	s14, [pc, #28]	; a300 <FXLowpassParam1+0x20>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    a2e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a2e8:	eddf 7a06 	vldr	s15, [pc, #24]	; a304 <FXLowpassParam1+0x24>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    a2ec:	4b06      	ldr	r3, [pc, #24]	; (a308 <FXLowpassParam1+0x28>)
    a2ee:	eee0 7a07 	vfma.f32	s15, s0, s14
    a2f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a2f6:	eeb0 0a67 	vmov.f32	s0, s15
    a2fa:	f001 be75 	b.w	bfe8 <__tSVF_setFreqFast_veneer>
    a2fe:	bf00      	nop
    a300:	429a0000 	.word	0x429a0000
    a304:	42280000 	.word	0x42280000
    a308:	2001d1a0 	.word	0x2001d1a0
    a30c:	f3af 8000 	nop.w
    a310:	f3af 8000 	nop.w
    a314:	f3af 8000 	nop.w
    a318:	f3af 8000 	nop.w
    a31c:	f3af 8000 	nop.w

0000a320 <FXHighpassParam1>:
}
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a320:	ed9f 7a07 	vldr	s14, [pc, #28]	; a340 <FXHighpassParam1+0x20>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    a324:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a328:	eddf 7a06 	vldr	s15, [pc, #24]	; a344 <FXHighpassParam1+0x24>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    a32c:	4b06      	ldr	r3, [pc, #24]	; (a348 <FXHighpassParam1+0x28>)
    a32e:	eee0 7a07 	vfma.f32	s15, s0, s14
    a332:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a336:	eeb0 0a67 	vmov.f32	s0, s15
    a33a:	f001 be55 	b.w	bfe8 <__tSVF_setFreqFast_veneer>
    a33e:	bf00      	nop
    a340:	429a0000 	.word	0x429a0000
    a344:	42280000 	.word	0x42280000
    a348:	2001d180 	.word	0x2001d180
    a34c:	f3af 8000 	nop.w
    a350:	f3af 8000 	nop.w
    a354:	f3af 8000 	nop.w
    a358:	f3af 8000 	nop.w
    a35c:	f3af 8000 	nop.w

0000a360 <FXBandpassParam1>:
}

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a360:	ed9f 7a07 	vldr	s14, [pc, #28]	; a380 <FXBandpassParam1+0x20>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    a364:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a368:	eddf 7a06 	vldr	s15, [pc, #24]	; a384 <FXBandpassParam1+0x24>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    a36c:	4b06      	ldr	r3, [pc, #24]	; (a388 <FXBandpassParam1+0x28>)
    a36e:	eee0 7a07 	vfma.f32	s15, s0, s14
    a372:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a376:	eeb0 0a67 	vmov.f32	s0, s15
    a37a:	f001 be35 	b.w	bfe8 <__tSVF_setFreqFast_veneer>
    a37e:	bf00      	nop
    a380:	429a0000 	.word	0x429a0000
    a384:	42280000 	.word	0x42280000
    a388:	2001d140 	.word	0x2001d140
    a38c:	f3af 8000 	nop.w
    a390:	f3af 8000 	nop.w
    a394:	f3af 8000 	nop.w
    a398:	f3af 8000 	nop.w
    a39c:	f3af 8000 	nop.w

0000a3a0 <FXDiodeParam1>:
}

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a3a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; a3c0 <FXDiodeParam1+0x20>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    a3a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a3a8:	eddf 7a06 	vldr	s15, [pc, #24]	; a3c4 <FXDiodeParam1+0x24>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    a3ac:	4b06      	ldr	r3, [pc, #24]	; (a3c8 <FXDiodeParam1+0x28>)
    a3ae:	eee0 7a07 	vfma.f32	s15, s0, s14
    a3b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a3b6:	eeb0 0a67 	vmov.f32	s0, s15
    a3ba:	f001 be5d 	b.w	c078 <__tDiodeFilter_setFreqFast_veneer>
    a3be:	bf00      	nop
    a3c0:	429a0000 	.word	0x429a0000
    a3c4:	42280000 	.word	0x42280000
    a3c8:	2001d160 	.word	0x2001d160
    a3cc:	f3af 8000 	nop.w
    a3d0:	f3af 8000 	nop.w
    a3d4:	f3af 8000 	nop.w
    a3d8:	f3af 8000 	nop.w
    a3dc:	f3af 8000 	nop.w

0000a3e0 <FXPeakParam1>:
}
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a3e0:	ed9f 7a07 	vldr	s14, [pc, #28]	; a400 <FXPeakParam1+0x20>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    a3e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a3e8:	eddf 7a06 	vldr	s15, [pc, #24]	; a404 <FXPeakParam1+0x24>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    a3ec:	4b06      	ldr	r3, [pc, #24]	; (a408 <FXPeakParam1+0x28>)
    a3ee:	eee0 7a07 	vfma.f32	s15, s0, s14
    a3f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a3f6:	eeb0 0a67 	vmov.f32	s0, s15
    a3fa:	f001 bdcd 	b.w	bf98 <__tVZFilterBell_setFreq_veneer>
    a3fe:	bf00      	nop
    a400:	429a0000 	.word	0x429a0000
    a404:	42280000 	.word	0x42280000
    a408:	2001d120 	.word	0x2001d120
    a40c:	f3af 8000 	nop.w
    a410:	f3af 8000 	nop.w
    a414:	f3af 8000 	nop.w
    a418:	f3af 8000 	nop.w
    a41c:	f3af 8000 	nop.w

0000a420 <FXLowShelfParam1>:
}
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a420:	ed9f 7a07 	vldr	s14, [pc, #28]	; a440 <FXLowShelfParam1+0x20>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    a424:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a428:	eddf 7a06 	vldr	s15, [pc, #24]	; a444 <FXLowShelfParam1+0x24>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    a42c:	4b06      	ldr	r3, [pc, #24]	; (a448 <FXLowShelfParam1+0x28>)
    a42e:	eee0 7a07 	vfma.f32	s15, s0, s14
    a432:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a436:	eeb0 0a67 	vmov.f32	s0, s15
    a43a:	f001 be09 	b.w	c050 <__tVZFilterLS_setFreqFast_veneer>
    a43e:	bf00      	nop
    a440:	429a0000 	.word	0x429a0000
    a444:	42280000 	.word	0x42280000
    a448:	2001d100 	.word	0x2001d100
    a44c:	f3af 8000 	nop.w
    a450:	f3af 8000 	nop.w
    a454:	f3af 8000 	nop.w
    a458:	f3af 8000 	nop.w
    a45c:	f3af 8000 	nop.w

0000a460 <FXHighShelfParam1>:
}
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a460:	ed9f 7a07 	vldr	s14, [pc, #28]	; a480 <FXHighShelfParam1+0x20>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    a464:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a468:	eddf 7a06 	vldr	s15, [pc, #24]	; a484 <FXHighShelfParam1+0x24>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    a46c:	4b06      	ldr	r3, [pc, #24]	; (a488 <FXHighShelfParam1+0x28>)
    a46e:	eee0 7a07 	vfma.f32	s15, s0, s14
    a472:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a476:	eeb0 0a67 	vmov.f32	s0, s15
    a47a:	f001 bcdd 	b.w	be38 <__tVZFilterHS_setFreqFast_veneer>
    a47e:	bf00      	nop
    a480:	429a0000 	.word	0x429a0000
    a484:	42280000 	.word	0x42280000
    a488:	2001d0e0 	.word	0x2001d0e0
    a48c:	f3af 8000 	nop.w
    a490:	f3af 8000 	nop.w
    a494:	f3af 8000 	nop.w
    a498:	f3af 8000 	nop.w
    a49c:	f3af 8000 	nop.w

0000a4a0 <FXNotchParam1>:
}
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a4a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; a4c0 <FXNotchParam1+0x20>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    a4a4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a4a8:	eddf 7a06 	vldr	s15, [pc, #24]	; a4c4 <FXNotchParam1+0x24>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    a4ac:	4b06      	ldr	r3, [pc, #24]	; (a4c8 <FXNotchParam1+0x28>)
    a4ae:	eee0 7a07 	vfma.f32	s15, s0, s14
    a4b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a4b6:	eeb0 0a67 	vmov.f32	s0, s15
    a4ba:	f001 bd2d 	b.w	bf18 <__tVZFilter_setFreqFast_veneer>
    a4be:	bf00      	nop
    a4c0:	429a0000 	.word	0x429a0000
    a4c4:	42280000 	.word	0x42280000
    a4c8:	2001d0c0 	.word	0x2001d0c0
    a4cc:	f3af 8000 	nop.w
    a4d0:	f3af 8000 	nop.w
    a4d4:	f3af 8000 	nop.w
    a4d8:	f3af 8000 	nop.w
    a4dc:	f3af 8000 	nop.w

0000a4e0 <FXLadderParam1>:
}
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a4e0:	ed9f 7a07 	vldr	s14, [pc, #28]	; a500 <FXLadderParam1+0x20>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    a4e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    a4e8:	eddf 7a06 	vldr	s15, [pc, #24]	; a504 <FXLadderParam1+0x24>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    a4ec:	4b06      	ldr	r3, [pc, #24]	; (a508 <FXLadderParam1+0x28>)
    a4ee:	eee0 7a07 	vfma.f32	s15, s0, s14
    a4f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a4f6:	eeb0 0a67 	vmov.f32	s0, s15
    a4fa:	f001 be45 	b.w	c188 <__tLadderFilter_setFreqFast_veneer>
    a4fe:	bf00      	nop
    a500:	429a0000 	.word	0x429a0000
    a504:	42280000 	.word	0x42280000
    a508:	2001d0a0 	.word	0x2001d0a0
    a50c:	f3af 8000 	nop.w
    a510:	f3af 8000 	nop.w
    a514:	f3af 8000 	nop.w
    a518:	f3af 8000 	nop.w
    a51c:	f3af 8000 	nop.w

0000a520 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a520:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    a524:	ed9f 7a09 	vldr	s14, [pc, #36]	; a54c <FXPeakParam2+0x2c>
{
    a528:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a52a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    a52e:	4605      	mov	r5, r0
    a530:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a532:	eeb0 0a67 	vmov.f32	s0, s15
    a536:	f001 fcc3 	bl	bec0 <__dbToATableLookup_veneer>
    a53a:	4b05      	ldr	r3, [pc, #20]	; (a550 <FXPeakParam2+0x30>)
    a53c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    a540:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    a544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a548:	f001 bbf6 	b.w	bd38 <__tVZFilterBell_setGain_veneer>
    a54c:	42480000 	.word	0x42480000
    a550:	2001d120 	.word	0x2001d120
    a554:	f3af 8000 	nop.w
    a558:	f3af 8000 	nop.w
    a55c:	f3af 8000 	nop.w

0000a560 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a560:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    a564:	ed9f 7a09 	vldr	s14, [pc, #36]	; a58c <FXLowShelfParam2+0x2c>
{
    a568:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a56a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    a56e:	4605      	mov	r5, r0
    a570:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a572:	eeb0 0a67 	vmov.f32	s0, s15
    a576:	f001 fca3 	bl	bec0 <__dbToATableLookup_veneer>
    a57a:	4b05      	ldr	r3, [pc, #20]	; (a590 <FXLowShelfParam2+0x30>)
    a57c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    a580:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    a584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a588:	f001 bcba 	b.w	bf00 <__tVZFilterLS_setGain_veneer>
    a58c:	42480000 	.word	0x42480000
    a590:	2001d100 	.word	0x2001d100
    a594:	f3af 8000 	nop.w
    a598:	f3af 8000 	nop.w
    a59c:	f3af 8000 	nop.w

0000a5a0 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a5a0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    a5a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; a5cc <FXHighShelfParam2+0x2c>
{
    a5a8:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a5aa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    a5ae:	4605      	mov	r5, r0
    a5b0:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a5b2:	eeb0 0a67 	vmov.f32	s0, s15
    a5b6:	f001 fc83 	bl	bec0 <__dbToATableLookup_veneer>
    a5ba:	4b05      	ldr	r3, [pc, #20]	; (a5d0 <FXHighShelfParam2+0x30>)
    a5bc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    a5c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    a5c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a5c8:	f001 bb3e 	b.w	bc48 <__tVZFilterHS_setGain_veneer>
    a5cc:	42480000 	.word	0x42480000
    a5d0:	2001d0e0 	.word	0x2001d0e0
    a5d4:	f3af 8000 	nop.w
    a5d8:	f3af 8000 	nop.w
    a5dc:	f3af 8000 	nop.w

0000a5e0 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a5e0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    a5e4:	ed9f 7a09 	vldr	s14, [pc, #36]	; a60c <FXNotchParam2+0x2c>
{
    a5e8:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a5ea:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    a5ee:	4605      	mov	r5, r0
    a5f0:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a5f2:	eeb0 0a67 	vmov.f32	s0, s15
    a5f6:	f001 fc63 	bl	bec0 <__dbToATableLookup_veneer>
    a5fa:	4b05      	ldr	r3, [pc, #20]	; (a610 <FXNotchParam2+0x30>)
    a5fc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    a600:	eb03 0080 	add.w	r0, r3, r0, lsl #2

}
    a604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    a608:	f001 bb8e 	b.w	bd28 <__tVZFilter_setGain_veneer>
    a60c:	42480000 	.word	0x42480000
    a610:	2001d0c0 	.word	0x2001d0c0
    a614:	f3af 8000 	nop.w
    a618:	f3af 8000 	nop.w
    a61c:	f3af 8000 	nop.w

0000a620 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
    a620:	4b03      	ldr	r3, [pc, #12]	; (a630 <FXLowpassParam3+0x10>)
    a622:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a626:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a62a:	f001 bc7d 	b.w	bf28 <__tSVF_setQ_veneer>
    a62e:	bf00      	nop
    a630:	2001d1a0 	.word	0x2001d1a0
    a634:	f3af 8000 	nop.w
    a638:	f3af 8000 	nop.w
    a63c:	f3af 8000 	nop.w

0000a640 <FXHighpassParam3>:
}

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
    a640:	4b03      	ldr	r3, [pc, #12]	; (a650 <FXHighpassParam3+0x10>)
    a642:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a646:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a64a:	f001 bc6d 	b.w	bf28 <__tSVF_setQ_veneer>
    a64e:	bf00      	nop
    a650:	2001d180 	.word	0x2001d180
    a654:	f3af 8000 	nop.w
    a658:	f3af 8000 	nop.w
    a65c:	f3af 8000 	nop.w

0000a660 <FXBandpassParam3>:
}

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
    a660:	4b03      	ldr	r3, [pc, #12]	; (a670 <FXBandpassParam3+0x10>)
    a662:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a666:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a66a:	f001 bc5d 	b.w	bf28 <__tSVF_setQ_veneer>
    a66e:	bf00      	nop
    a670:	2001d140 	.word	0x2001d140
    a674:	f3af 8000 	nop.w
    a678:	f3af 8000 	nop.w
    a67c:	f3af 8000 	nop.w

0000a680 <FXDiodeParam3>:
}

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
    a680:	4b03      	ldr	r3, [pc, #12]	; (a690 <FXDiodeParam3+0x10>)
    a682:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a686:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a68a:	f001 bbe1 	b.w	be50 <__tDiodeFilter_setQ_veneer>
    a68e:	bf00      	nop
    a690:	2001d160 	.word	0x2001d160
    a694:	f3af 8000 	nop.w
    a698:	f3af 8000 	nop.w
    a69c:	f3af 8000 	nop.w

0000a6a0 <FXPeakParam3>:
}


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
	tVZFilterBell_setBandwidth(&FXVZfilterPeak[v][string], value);
    a6a0:	4b03      	ldr	r3, [pc, #12]	; (a6b0 <FXPeakParam3+0x10>)
    a6a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a6a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a6aa:	f001 bad1 	b.w	bc50 <__tVZFilterBell_setBandwidth_veneer>
    a6ae:	bf00      	nop
    a6b0:	2001d120 	.word	0x2001d120
    a6b4:	f3af 8000 	nop.w
    a6b8:	f3af 8000 	nop.w
    a6bc:	f3af 8000 	nop.w

0000a6c0 <FXLowShelfParam3>:
}


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
	tVZFilterLS_setResonance(&FXVZfilterLS[v][string], value);
    a6c0:	4b03      	ldr	r3, [pc, #12]	; (a6d0 <FXLowShelfParam3+0x10>)
    a6c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a6c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a6ca:	f001 bb19 	b.w	bd00 <__tVZFilterLS_setResonance_veneer>
    a6ce:	bf00      	nop
    a6d0:	2001d100 	.word	0x2001d100
    a6d4:	f3af 8000 	nop.w
    a6d8:	f3af 8000 	nop.w
    a6dc:	f3af 8000 	nop.w

0000a6e0 <FXHighShelfParam3>:
}


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
	tVZFilterHS_setResonance(&FXVZfilterHS[v][string], value);
    a6e0:	4b03      	ldr	r3, [pc, #12]	; (a6f0 <FXHighShelfParam3+0x10>)
    a6e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a6e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a6ea:	f001 bbdd 	b.w	bea8 <__tVZFilterHS_setResonance_veneer>
    a6ee:	bf00      	nop
    a6f0:	2001d0e0 	.word	0x2001d0e0
    a6f4:	f3af 8000 	nop.w
    a6f8:	f3af 8000 	nop.w
    a6fc:	f3af 8000 	nop.w

0000a700 <FXNotchParam3>:
}


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
    a700:	4b03      	ldr	r3, [pc, #12]	; (a710 <FXNotchParam3+0x10>)
    a702:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a706:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a70a:	f001 bab5 	b.w	bc78 <__tVZFilter_setResonance_veneer>
    a70e:	bf00      	nop
    a710:	2001d0c0 	.word	0x2001d0c0
    a714:	f3af 8000 	nop.w
    a718:	f3af 8000 	nop.w
    a71c:	f3af 8000 	nop.w

0000a720 <FXLadderParam3>:
}


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
    a720:	4b03      	ldr	r3, [pc, #12]	; (a730 <FXLadderParam3+0x10>)
    a722:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    a726:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a72a:	f001 ba61 	b.w	bbf0 <__tLadderFilter_setQ_veneer>
    a72e:	bf00      	nop
    a730:	2001d0a0 	.word	0x2001d0a0
    a734:	f3af 8000 	nop.w
    a738:	f3af 8000 	nop.w
    a73c:	f3af 8000 	nop.w

0000a740 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    a740:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    a742:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    a746:	008c      	lsls	r4, r1, #2
{
    a748:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    a74c:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    a750:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    a754:	eee0 7a68 	vfms.f32	s15, s0, s17
    a758:	eeb0 0a67 	vmov.f32	s0, s15
    a75c:	f001 fbb0 	bl	bec0 <__dbToATableLookup_veneer>
    a760:	4808      	ldr	r0, [pc, #32]	; (a784 <noiseSetTilt+0x44>)
    a762:	4420      	add	r0, r4
    a764:	f001 fbcc 	bl	bf00 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    a768:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    a76c:	eea8 0a28 	vfma.f32	s0, s16, s17
    a770:	f001 fba6 	bl	bec0 <__dbToATableLookup_veneer>
    a774:	4804      	ldr	r0, [pc, #16]	; (a788 <noiseSetTilt+0x48>)
}
    a776:	ecbd 8b02 	vpop	{d8}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    a77a:	4420      	add	r0, r4
}
    a77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    a780:	f001 ba62 	b.w	bc48 <__tVZFilterHS_setGain_veneer>
    a784:	2001d674 	.word	0x2001d674
    a788:	2001d67c 	.word	0x2001d67c
    a78c:	f3af 8000 	nop.w
    a790:	f3af 8000 	nop.w
    a794:	f3af 8000 	nop.w
    a798:	f3af 8000 	nop.w
    a79c:	f3af 8000 	nop.w

0000a7a0 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    a7a0:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    a7a4:	ed9f 7a08 	vldr	s14, [pc, #32]	; a7c8 <noiseSetGain+0x28>
{
    a7a8:	b510      	push	{r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    a7aa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    a7ae:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    a7b0:	eeb0 0a67 	vmov.f32	s0, s15
    a7b4:	f001 fb84 	bl	bec0 <__dbToATableLookup_veneer>
    a7b8:	4804      	ldr	r0, [pc, #16]	; (a7cc <noiseSetGain+0x2c>)
    a7ba:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    a7be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    a7c2:	f001 bab9 	b.w	bd38 <__tVZFilterBell_setGain_veneer>
    a7c6:	bf00      	nop
    a7c8:	42080000 	.word	0x42080000
    a7cc:	2001d658 	.word	0x2001d658
    a7d0:	f3af 8000 	nop.w
    a7d4:	f3af 8000 	nop.w
    a7d8:	f3af 8000 	nop.w
    a7dc:	f3af 8000 	nop.w

0000a7e0 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    a7e0:	ed9f 7a09 	vldr	s14, [pc, #36]	; a808 <noiseSetFreq+0x28>
    a7e4:	eddf 7a09 	vldr	s15, [pc, #36]	; a80c <noiseSetFreq+0x2c>
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    a7e8:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    a7ec:	b510      	push	{r4, lr}
    a7ee:	460c      	mov	r4, r1
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    a7f0:	eeb0 0a67 	vmov.f32	s0, s15
    a7f4:	f001 fa34 	bl	bc60 <__faster_mtof_veneer>
    a7f8:	4805      	ldr	r0, [pc, #20]	; (a810 <noiseSetFreq+0x30>)
    a7fa:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	//value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);

}
    a7fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    a802:	f001 bbc9 	b.w	bf98 <__tVZFilterBell_setFreq_veneer>
    a806:	bf00      	nop
    a808:	429a0000 	.word	0x429a0000
    a80c:	42280000 	.word	0x42280000
    a810:	2001d658 	.word	0x2001d658
    a814:	f3af 8000 	nop.w
    a818:	f3af 8000 	nop.w
    a81c:	f3af 8000 	nop.w

0000a820 <noise_tick>:


void __ATTR_ITCMRAM noise_tick(int string)
{
    a820:	b538      	push	{r3, r4, r5, lr}
	float enabled = params[Noise].realVal[string];
    a822:	4b28      	ldr	r3, [pc, #160]	; (a8c4 <noise_tick+0xa4>)
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    a824:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    a828:	4d27      	ldr	r5, [pc, #156]	; (a8c8 <noise_tick+0xa8>)
    a82a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	float enabled = params[Noise].realVal[string];
    a82e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    a832:	4926      	ldr	r1, [pc, #152]	; (a8cc <noise_tick+0xac>)
{
    a834:	4604      	mov	r4, r0
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    a836:	4826      	ldr	r0, [pc, #152]	; (a8d0 <noise_tick+0xb0>)
	float filterSend = params[NoiseFilterSend].realVal[string];
    a838:	4613      	mov	r3, r2
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    a83a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
{
    a83e:	ed2d 8b04 	vpush	{d8-d9}
	float enabled = params[Noise].realVal[string];
    a842:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float amp = params[NoiseAmp].realVal[string];
    a846:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    a84a:	782a      	ldrb	r2, [r5, #0]
	float filterSend = params[NoiseFilterSend].realVal[string];
    a84c:	ed93 8aa3 	vldr	s16, [r3, #652]	; 0x28c
	float sample = (random_values[randomValPointer++] * 2.0f) - 1.0f;
    a850:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    a854:	3201      	adds	r2, #1
    a856:	ed91 7a00 	vldr	s14, [r1]
    a85a:	702a      	strb	r2, [r5, #0]
    a85c:	00a5      	lsls	r5, r4, #2
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    a85e:	eea7 0a27 	vfma.f32	s0, s14, s15
    a862:	f001 fcb1 	bl	c1c8 <__tVZFilterLS_tick_veneer>
	sample = tVZFilterHS_tick(&noiseShelf2[string], sample);
    a866:	481b      	ldr	r0, [pc, #108]	; (a8d4 <noise_tick+0xb4>)
    a868:	4428      	add	r0, r5
    a86a:	f001 fc71 	bl	c150 <__tVZFilterHS_tick_veneer>
	sample = tVZFilterBell_tick(&noiseBell1[string], sample);
    a86e:	481a      	ldr	r0, [pc, #104]	; (a8d8 <noise_tick+0xb8>)
    a870:	4428      	add	r0, r5
    a872:	f001 fc21 	bl	c0b8 <__tVZFilterBell_tick_veneer>
	if (!isfinite(sample))
	{
		nanChuckTest++;
		sample = 0.0f;
	}
	float normSample = (sample + 1.f) * 0.5f;
    a876:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    a87a:	ed9f 6a18 	vldr	s12, [pc, #96]	; a8dc <noise_tick+0xbc>
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
    a87e:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
    a882:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	noiseOuts[0][string] = sample * filterSend *  enabled;
    a886:	4b16      	ldr	r3, [pc, #88]	; (a8e0 <noise_tick+0xc0>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    a888:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    a88c:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
    a890:	ee28 0a80 	vmul.f32	s0, s17, s0
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    a894:	4a13      	ldr	r2, [pc, #76]	; (a8e4 <noise_tick+0xc4>)
	noiseOuts[0][string] = sample * filterSend *  enabled;
    a896:	441d      	add	r5, r3
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    a898:	ee28 8a09 	vmul.f32	s16, s16, s18
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    a89c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	float normSample = (sample + 1.f) * 0.5f;
    a8a0:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
    a8a4:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    a8a8:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    a8ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
    a8b0:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    a8b4:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    a8b8:	edc2 7a06 	vstr	s15, [r2, #24]
}
    a8bc:	ecbd 8b04 	vpop	{d8-d9}
    a8c0:	bd38      	pop	{r3, r4, r5, pc}
    a8c2:	bf00      	nop
    a8c4:	20019320 	.word	0x20019320
    a8c8:	2001d7bc 	.word	0x2001d7bc
    a8cc:	2001a4cc 	.word	0x2001a4cc
    a8d0:	2001d674 	.word	0x2001d674
    a8d4:	2001d67c 	.word	0x2001d67c
    a8d8:	2001d658 	.word	0x2001d658
    a8dc:	00000000 	.word	0x00000000
    a8e0:	2001d664 	.word	0x2001d664
    a8e4:	2001d8ac 	.word	0x2001d8ac
    a8e8:	f3af 8000 	nop.w
    a8ec:	f3af 8000 	nop.w
    a8f0:	f3af 8000 	nop.w
    a8f4:	f3af 8000 	nop.w
    a8f8:	f3af 8000 	nop.w
    a8fc:	f3af 8000 	nop.w

0000a900 <audioTickSynth>:
{
    a900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountTick = DWT->CYCCNT;
    a904:	4db6      	ldr	r5, [pc, #728]	; (abe0 <audioTickSynth+0x2e0>)
		if (knobTicked[i])
    a906:	4cb7      	ldr	r4, [pc, #732]	; (abe4 <audioTickSynth+0x2e4>)
{
    a908:	ed2d 8b08 	vpush	{d8-d11}
    a90c:	b08f      	sub	sp, #60	; 0x3c
    a90e:	af00      	add	r7, sp, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    a910:	686b      	ldr	r3, [r5, #4]
    a912:	603b      	str	r3, [r7, #0]
	uint32_t tempCountMap = DWT->CYCCNT;
    a914:	686e      	ldr	r6, [r5, #4]
	tickMappings();
    a916:	f7fe fb43 	bl	8fa0 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    a91a:	686b      	ldr	r3, [r5, #4]
    a91c:	4ab2      	ldr	r2, [pc, #712]	; (abe8 <audioTickSynth+0x2e8>)
    a91e:	1b9b      	subs	r3, r3, r6
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    a920:	48b2      	ldr	r0, [pc, #712]	; (abec <audioTickSynth+0x2ec>)
	timeMap = DWT->CYCCNT - tempCountMap;
    a922:	6013      	str	r3, [r2, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    a924:	686d      	ldr	r5, [r5, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    a926:	f001 fab3 	bl	be90 <__tExpSmooth_tick_veneer>
		if (knobTicked[i])
    a92a:	6823      	ldr	r3, [r4, #0]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    a92c:	eeb0 9a40 	vmov.f32	s18, s0
		if (knobTicked[i])
    a930:	2b00      	cmp	r3, #0
    a932:	f040 849e 	bne.w	b272 <audioTickSynth+0x972>
    a936:	4bae      	ldr	r3, [pc, #696]	; (abf0 <audioTickSynth+0x2f0>)
    a938:	623b      	str	r3, [r7, #32]
    a93a:	6863      	ldr	r3, [r4, #4]
    a93c:	2b00      	cmp	r3, #0
    a93e:	f040 84af 	bne.w	b2a0 <audioTickSynth+0x9a0>
    a942:	68a3      	ldr	r3, [r4, #8]
    a944:	2b00      	cmp	r3, #0
    a946:	f040 82d9 	bne.w	aefc <audioTickSynth+0x5fc>
    a94a:	68e3      	ldr	r3, [r4, #12]
    a94c:	2b00      	cmp	r3, #0
    a94e:	f040 82eb 	bne.w	af28 <audioTickSynth+0x628>
    a952:	6923      	ldr	r3, [r4, #16]
    a954:	2b00      	cmp	r3, #0
    a956:	f040 82fd 	bne.w	af54 <audioTickSynth+0x654>
    a95a:	6963      	ldr	r3, [r4, #20]
    a95c:	2b00      	cmp	r3, #0
    a95e:	f040 830f 	bne.w	af80 <audioTickSynth+0x680>
    a962:	69a3      	ldr	r3, [r4, #24]
    a964:	2b00      	cmp	r3, #0
    a966:	f040 8321 	bne.w	afac <audioTickSynth+0x6ac>
    a96a:	69e3      	ldr	r3, [r4, #28]
    a96c:	2b00      	cmp	r3, #0
    a96e:	f040 8333 	bne.w	afd8 <audioTickSynth+0x6d8>
    a972:	6a23      	ldr	r3, [r4, #32]
    a974:	2b00      	cmp	r3, #0
    a976:	f040 8345 	bne.w	b004 <audioTickSynth+0x704>
    a97a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a97c:	2b00      	cmp	r3, #0
    a97e:	f040 8357 	bne.w	b030 <audioTickSynth+0x730>
    a982:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a984:	2b00      	cmp	r3, #0
    a986:	f040 8369 	bne.w	b05c <audioTickSynth+0x75c>
    a98a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a98c:	2b00      	cmp	r3, #0
    a98e:	f040 837b 	bne.w	b088 <audioTickSynth+0x788>
		if (pedalTicked[i])
    a992:	4c98      	ldr	r4, [pc, #608]	; (abf4 <audioTickSynth+0x2f4>)
    a994:	6823      	ldr	r3, [r4, #0]
    a996:	2b00      	cmp	r3, #0
    a998:	f040 83a2 	bne.w	b0e0 <audioTickSynth+0x7e0>
    a99c:	6863      	ldr	r3, [r4, #4]
    a99e:	2b00      	cmp	r3, #0
    a9a0:	f040 83b4 	bne.w	b10c <audioTickSynth+0x80c>
    a9a4:	68a3      	ldr	r3, [r4, #8]
    a9a6:	2b00      	cmp	r3, #0
    a9a8:	f040 83c6 	bne.w	b138 <audioTickSynth+0x838>
    a9ac:	68e3      	ldr	r3, [r4, #12]
    a9ae:	2b00      	cmp	r3, #0
    a9b0:	f040 83d8 	bne.w	b164 <audioTickSynth+0x864>
    a9b4:	6923      	ldr	r3, [r4, #16]
    a9b6:	2b00      	cmp	r3, #0
    a9b8:	f040 83ea 	bne.w	b190 <audioTickSynth+0x890>
    a9bc:	6963      	ldr	r3, [r4, #20]
    a9be:	2b00      	cmp	r3, #0
    a9c0:	f040 83fc 	bne.w	b1bc <audioTickSynth+0x8bc>
    a9c4:	69a3      	ldr	r3, [r4, #24]
    a9c6:	2b00      	cmp	r3, #0
    a9c8:	f040 840e 	bne.w	b1e8 <audioTickSynth+0x8e8>
    a9cc:	69e3      	ldr	r3, [r4, #28]
    a9ce:	2b00      	cmp	r3, #0
    a9d0:	f040 8420 	bne.w	b214 <audioTickSynth+0x914>
    a9d4:	6a23      	ldr	r3, [r4, #32]
    a9d6:	2b00      	cmp	r3, #0
    a9d8:	f040 8432 	bne.w	b240 <audioTickSynth+0x940>
    a9dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a9de:	2b00      	cmp	r3, #0
    a9e0:	f040 8472 	bne.w	b2c8 <audioTickSynth+0x9c8>
	for (int v = 0; v < numStringsThisBoard; v++)
    a9e4:	6a3b      	ldr	r3, [r7, #32]
    a9e6:	781a      	ldrb	r2, [r3, #0]
    a9e8:	2a00      	cmp	r2, #0
    a9ea:	f000 81da 	beq.w	ada2 <audioTickSynth+0x4a2>
    a9ee:	4b82      	ldr	r3, [pc, #520]	; (abf8 <audioTickSynth+0x2f8>)
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    a9f0:	4982      	ldr	r1, [pc, #520]	; (abfc <audioTickSynth+0x2fc>)
	for (int v = 0; v < numStringsThisBoard; v++)
    a9f2:	2a01      	cmp	r2, #1
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    a9f4:	6809      	ldr	r1, [r1, #0]
    a9f6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	for (int v = 0; v < numStringsThisBoard; v++)
    a9fa:	dd01      	ble.n	aa00 <audioTickSynth+0x100>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    a9fc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	float note[numStringsThisBoard];
    aa00:	0093      	lsls	r3, r2, #2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    aa02:	f8df a1dc 	ldr.w	sl, [pc, #476]	; abe0 <audioTickSynth+0x2e0>
	uint32_t tempPerStringTick = DWT->CYCCNT;
    aa06:	eddf 8a7e 	vldr	s17, [pc, #504]	; ac00 <audioTickSynth+0x300>
    aa0a:	f04f 0b00 	mov.w	fp, #0
	float note[numStringsThisBoard];
    aa0e:	3307      	adds	r3, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    aa10:	f8da 2004 	ldr.w	r2, [sl, #4]
    aa14:	eeb0 aa68 	vmov.f32	s20, s17
    aa18:	eddf aa7a 	vldr	s21, [pc, #488]	; ac04 <audioTickSynth+0x304>
	float note[numStringsThisBoard];
    aa1c:	f023 0307 	bic.w	r3, r3, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    aa20:	1b52      	subs	r2, r2, r5
			float sample = 0.0f;
    aa22:	eef0 9a68 	vmov.f32	s19, s17
	uint32_t tempPerStringTick = DWT->CYCCNT;
    aa26:	46d8      	mov	r8, fp
	float note[numStringsThisBoard];
    aa28:	ebad 0d03 	sub.w	sp, sp, r3
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    aa2c:	4b76      	ldr	r3, [pc, #472]	; (ac08 <audioTickSynth+0x308>)
    aa2e:	601a      	str	r2, [r3, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    aa30:	f8da 3004 	ldr.w	r3, [sl, #4]
    aa34:	f8c7 d010 	str.w	sp, [r7, #16]
    aa38:	607b      	str	r3, [r7, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    aa3a:	4b74      	ldr	r3, [pc, #464]	; (ac0c <audioTickSynth+0x30c>)
    aa3c:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
    aa40:	627b      	str	r3, [r7, #36]	; 0x24
    aa42:	4b73      	ldr	r3, [pc, #460]	; (ac10 <audioTickSynth+0x310>)
    aa44:	61fb      	str	r3, [r7, #28]
    aa46:	4b73      	ldr	r3, [pc, #460]	; (ac14 <audioTickSynth+0x314>)
    aa48:	617b      	str	r3, [r7, #20]
    aa4a:	4b73      	ldr	r3, [pc, #460]	; (ac18 <audioTickSynth+0x318>)
    aa4c:	62bb      	str	r3, [r7, #40]	; 0x28
    aa4e:	4b73      	ldr	r3, [pc, #460]	; (ac1c <audioTickSynth+0x31c>)
    aa50:	61bb      	str	r3, [r7, #24]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    aa52:	4b73      	ldr	r3, [pc, #460]	; (ac20 <audioTickSynth+0x320>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    aa54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    aa56:	edd3 7a00 	vldr	s15, [r3]
    aa5a:	4b72      	ldr	r3, [pc, #456]	; (ac24 <audioTickSynth+0x324>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    aa5c:	4a72      	ldr	r2, [pc, #456]	; (ac28 <audioTickSynth+0x328>)
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    aa5e:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    aa62:	4b72      	ldr	r3, [pc, #456]	; (ac2c <audioTickSynth+0x32c>)
    aa64:	440a      	add	r2, r1
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    aa66:	6a79      	ldr	r1, [r7, #36]	; 0x24
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    aa68:	eb03 0388 	add.w	r3, r3, r8, lsl #2
    aa6c:	edd2 6a00 	vldr	s13, [r2]
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    aa70:	f8da 2004 	ldr.w	r2, [sl, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    aa74:	460d      	mov	r5, r1
    aa76:	ed93 8a00 	vldr	s16, [r3]
    aa7a:	693b      	ldr	r3, [r7, #16]
    aa7c:	ee38 8a26 	vadd.f32	s16, s16, s13
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    aa80:	ee78 7a67 	vsub.f32	s15, s16, s15
    aa84:	fe88 8a6a 	vminnm.f32	s16, s16, s21
    aa88:	fe88 8a0a 	vmaxnm.f32	s16, s16, s20
    aa8c:	eca3 8a01 	vstmia	r3!, {s16}
    aa90:	613b      	str	r3, [r7, #16]
    aa92:	ee67 7a87 	vmul.f32	s15, s15, s14
    aa96:	edc1 7a00 	vstr	s15, [r1]
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    aa9a:	f8da 3004 	ldr.w	r3, [sl, #4]
    aa9e:	1a9b      	subs	r3, r3, r2
    aaa0:	4a63      	ldr	r2, [pc, #396]	; (ac30 <audioTickSynth+0x330>)
    aaa2:	6013      	str	r3, [r2, #0]
    aaa4:	1d0a      	adds	r2, r1, #4
		if (envOn[v])
    aaa6:	4b63      	ldr	r3, [pc, #396]	; (ac34 <audioTickSynth+0x334>)
    aaa8:	627a      	str	r2, [r7, #36]	; 0x24
    aaaa:	781b      	ldrb	r3, [r3, #0]
		uint32_t tempCountEnv = DWT->CYCCNT;
    aaac:	f8da 4004 	ldr.w	r4, [sl, #4]
		if (envOn[v])
    aab0:	2b00      	cmp	r3, #0
    aab2:	f040 819f 	bne.w	adf4 <audioTickSynth+0x4f4>
    aab6:	4b5f      	ldr	r3, [pc, #380]	; (ac34 <audioTickSynth+0x334>)
    aab8:	785b      	ldrb	r3, [r3, #1]
    aaba:	2b00      	cmp	r3, #0
    aabc:	f040 8191 	bne.w	ade2 <audioTickSynth+0x4e2>
    aac0:	4b5c      	ldr	r3, [pc, #368]	; (ac34 <audioTickSynth+0x334>)
    aac2:	789b      	ldrb	r3, [r3, #2]
    aac4:	2b00      	cmp	r3, #0
    aac6:	f040 8183 	bne.w	add0 <audioTickSynth+0x4d0>
    aaca:	4b5a      	ldr	r3, [pc, #360]	; (ac34 <audioTickSynth+0x334>)
    aacc:	78db      	ldrb	r3, [r3, #3]
    aace:	2b00      	cmp	r3, #0
    aad0:	f040 8175 	bne.w	adbe <audioTickSynth+0x4be>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    aad4:	f8da 3004 	ldr.w	r3, [sl, #4]
    aad8:	3d88      	subs	r5, #136	; 0x88
    aada:	4a57      	ldr	r2, [pc, #348]	; (ac38 <audioTickSynth+0x338>)
    aadc:	1b1b      	subs	r3, r3, r4
    aade:	f8df b184 	ldr.w	fp, [pc, #388]	; ac64 <audioTickSynth+0x364>
    aae2:	4e56      	ldr	r6, [pc, #344]	; (ac3c <audioTickSynth+0x33c>)
    aae4:	6013      	str	r3, [r2, #0]
		uint32_t tempCountLFO = DWT->CYCCNT;
    aae6:	465c      	mov	r4, fp
    aae8:	f8da 9004 	ldr.w	r9, [sl, #4]
			float sample = 0.0f;
    aaec:	eba4 010b 	sub.w	r1, r4, fp
		if (lfoOn[i])
    aaf0:	f814 3b01 	ldrb.w	r3, [r4], #1
			lfoShapeTick[i](&sample,i, string);
    aaf4:	4642      	mov	r2, r8
    aaf6:	f107 0030 	add.w	r0, r7, #48	; 0x30
		if (lfoOn[i])
    aafa:	b133      	cbz	r3, ab0a <audioTickSynth+0x20a>
			lfoShapeTick[i](&sample,i, string);
    aafc:	6833      	ldr	r3, [r6, #0]
			float sample = 0.0f;
    aafe:	edc7 9a0c 	vstr	s19, [r7, #48]	; 0x30
			lfoShapeTick[i](&sample,i, string);
    ab02:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    ab04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ab06:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    ab0a:	4b4d      	ldr	r3, [pc, #308]	; (ac40 <audioTickSynth+0x340>)
    ab0c:	3604      	adds	r6, #4
    ab0e:	3508      	adds	r5, #8
    ab10:	429c      	cmp	r4, r3
    ab12:	d1eb      	bne.n	aaec <audioTickSynth+0x1ec>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    ab14:	f8da 3004 	ldr.w	r3, [sl, #4]
		oscillator_tick(note[v], v);
    ab18:	eeb0 0a48 	vmov.f32	s0, s16
		timeLFO = DWT->CYCCNT - tempCountLFO;
    ab1c:	4a49      	ldr	r2, [pc, #292]	; (ac44 <audioTickSynth+0x344>)
		oscillator_tick(note[v], v);
    ab1e:	4640      	mov	r0, r8
		timeLFO = DWT->CYCCNT - tempCountLFO;
    ab20:	eba3 0309 	sub.w	r3, r3, r9
    ab24:	6013      	str	r3, [r2, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    ab26:	f8da 4004 	ldr.w	r4, [sl, #4]
		oscillator_tick(note[v], v);
    ab2a:	f7fd f9e9 	bl	7f00 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    ab2e:	f8da 3004 	ldr.w	r3, [sl, #4]
    ab32:	4a45      	ldr	r2, [pc, #276]	; (ac48 <audioTickSynth+0x348>)
    ab34:	1b1b      	subs	r3, r3, r4
    ab36:	6013      	str	r3, [r2, #0]
		if (noiseOn)
    ab38:	4b44      	ldr	r3, [pc, #272]	; (ac4c <audioTickSynth+0x34c>)
		uint32_t tempCountNoise = DWT->CYCCNT;
    ab3a:	f8da 4004 	ldr.w	r4, [sl, #4]
		if (noiseOn)
    ab3e:	781b      	ldrb	r3, [r3, #0]
    ab40:	2b00      	cmp	r3, #0
    ab42:	f040 8138 	bne.w	adb6 <audioTickSynth+0x4b6>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    ab46:	f8da 3004 	ldr.w	r3, [sl, #4]
    ab4a:	4a41      	ldr	r2, [pc, #260]	; (ac50 <audioTickSynth+0x350>)
    ab4c:	1b1b      	subs	r3, r3, r4
    ab4e:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < oscToTick; i++)
    ab50:	4b40      	ldr	r3, [pc, #256]	; (ac54 <audioTickSynth+0x354>)
    ab52:	781b      	ldrb	r3, [r3, #0]
    ab54:	2b00      	cmp	r3, #0
    ab56:	f000 8199 	beq.w	ae8c <audioTickSynth+0x58c>
			filterSamps[0] += oscOuts[0][i][v];
    ab5a:	69ba      	ldr	r2, [r7, #24]
		for (int i = 0; i < oscToTick; i++)
    ab5c:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
    ab5e:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
    ab62:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
    ab66:	d011      	beq.n	ab8c <audioTickSynth+0x28c>
			filterSamps[0] += oscOuts[0][i][v];
    ab68:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
    ab6c:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
    ab6e:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
    ab72:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    ab76:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
    ab7a:	d007      	beq.n	ab8c <audioTickSynth+0x28c>
			filterSamps[0] += oscOuts[0][i][v];
    ab7c:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
    ab80:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
    ab84:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    ab88:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
    ab8c:	697b      	ldr	r3, [r7, #20]
		sample = filter_tick(&filterSamps[0], note[v], v);
    ab8e:	eeb0 0a48 	vmov.f32	s0, s16
    ab92:	4641      	mov	r1, r8
    ab94:	f107 0030 	add.w	r0, r7, #48	; 0x30
		filterSamps[0] += noiseOuts[0][v];
    ab98:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
    ab9c:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
    aba0:	ee76 6a86 	vadd.f32	s13, s13, s12
    aba4:	617b      	str	r3, [r7, #20]
		filterSamps[1] += noiseOuts[1][v];
    aba6:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
    abaa:	edc7 6a0c 	vstr	s13, [r7, #48]	; 0x30
		filterSamps[1] += noiseOuts[1][v];
    abae:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		uint32_t tempCountFilt = DWT->CYCCNT;
    abb2:	f8da 4004 	ldr.w	r4, [sl, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    abb6:	f7fd fc73 	bl	84a0 <filter_tick>
		timeFilt = DWT->CYCCNT - tempCountFilt;
    abba:	f8da 3004 	ldr.w	r3, [sl, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    abbe:	eeb0 8a40 	vmov.f32	s16, s0
		timeFilt = DWT->CYCCNT - tempCountFilt;
    abc2:	4a25      	ldr	r2, [pc, #148]	; (ac58 <audioTickSynth+0x358>)
    abc4:	1b1b      	subs	r3, r3, r4
    abc6:	6013      	str	r3, [r2, #0]
		if (fxPre)
    abc8:	4b24      	ldr	r3, [pc, #144]	; (ac5c <audioTickSynth+0x35c>)
    abca:	781b      	ldrb	r3, [r3, #0]
    abcc:	b123      	cbz	r3, abd8 <audioTickSynth+0x2d8>
			sample *= amplitude[v];
    abce:	69fb      	ldr	r3, [r7, #28]
    abd0:	edd3 7a00 	vldr	s15, [r3]
    abd4:	ee20 8a27 	vmul.f32	s16, s0, s15
		if (overSampled)
    abd8:	4b21      	ldr	r3, [pc, #132]	; (ac60 <audioTickSynth+0x360>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    abda:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    abde:	e043      	b.n	ac68 <audioTickSynth+0x368>
    abe0:	e0001000 	.word	0xe0001000
    abe4:	20016614 	.word	0x20016614
    abe8:	2001d9f4 	.word	0x2001d9f4
    abec:	2001425c 	.word	0x2001425c
    abf0:	20000694 	.word	0x20000694
    abf4:	2001a434 	.word	0x2001a434
    abf8:	2001d8ac 	.word	0x2001d8ac
    abfc:	20014254 	.word	0x20014254
    ac00:	00000000 	.word	0x00000000
    ac04:	42fe0000 	.word	0x42fe0000
    ac08:	2001da08 	.word	0x2001da08
    ac0c:	2001d934 	.word	0x2001d934
    ac10:	2001d210 	.word	0x2001d210
    ac14:	2001d664 	.word	0x2001d664
    ac18:	2001d31c 	.word	0x2001d31c
    ac1c:	2001d690 	.word	0x2001d690
    ac20:	20019308 	.word	0x20019308
    ac24:	20019304 	.word	0x20019304
    ac28:	20014224 	.word	0x20014224
    ac2c:	2001421c 	.word	0x2001421c
    ac30:	2001d9ec 	.word	0x2001d9ec
    ac34:	2001d318 	.word	0x2001d318
    ac38:	2001d9e4 	.word	0x2001d9e4
    ac3c:	2001d480 	.word	0x2001d480
    ac40:	2001d420 	.word	0x2001d420
    ac44:	2001d9f0 	.word	0x2001d9f0
    ac48:	2001da00 	.word	0x2001da00
    ac4c:	2001d660 	.word	0x2001d660
    ac50:	2001d9f8 	.word	0x2001d9f8
    ac54:	200008e4 	.word	0x200008e4
    ac58:	2001d9e8 	.word	0x2001d9e8
    ac5c:	20016611 	.word	0x20016611
    ac60:	200008e8 	.word	0x200008e8
    ac64:	2001d41c 	.word	0x2001d41c
		if (overSampled)
    ac68:	681c      	ldr	r4, [r3, #0]
		uint32_t tempCountOS = DWT->CYCCNT;
    ac6a:	f8da 3004 	ldr.w	r3, [sl, #4]
    ac6e:	60fb      	str	r3, [r7, #12]
		if (overSampled)
    ac70:	2c00      	cmp	r4, #0
    ac72:	f040 80c6 	bne.w	ae02 <audioTickSynth+0x502>
    ac76:	4a88      	ldr	r2, [pc, #544]	; (ae98 <audioTickSynth+0x598>)
    ac78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac7a:	f8df 927c 	ldr.w	r9, [pc, #636]	; aef8 <audioTickSynth+0x5f8>
    ac7e:	18d6      	adds	r6, r2, r3
    ac80:	4a86      	ldr	r2, [pc, #536]	; (ae9c <audioTickSynth+0x59c>)
    ac82:	18d5      	adds	r5, r2, r3
				if (effectsActive[i])
    ac84:	f819 3b01 	ldrb.w	r3, [r9], #1
					sample = effectTick[i](sample, i, v); //run the effect
    ac88:	eeb0 0a48 	vmov.f32	s0, s16
    ac8c:	4620      	mov	r0, r4
    ac8e:	4641      	mov	r1, r8
				if (effectsActive[i])
    ac90:	b17b      	cbz	r3, acb2 <audioTickSynth+0x3b2>
					sample = effectTick[i](sample, i, v); //run the effect
    ac92:	4b83      	ldr	r3, [pc, #524]	; (aea0 <audioTickSynth+0x5a0>)
    ac94:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    ac98:	4798      	blx	r3
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    ac9a:	ed96 7a00 	vldr	s14, [r6]
					sample *= fxPostGain[i][v];
    ac9e:	edd5 6a00 	vldr	s13, [r5]
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    aca2:	ee67 7a00 	vmul.f32	s15, s14, s0
    aca6:	ee3b 7a47 	vsub.f32	s14, s22, s14
    acaa:	eee7 7a08 	vfma.f32	s15, s14, s16
					sample *= fxPostGain[i][v];
    acae:	ee27 8aa6 	vmul.f32	s16, s15, s13
			for (int i = 0; i < NUM_EFFECT; i++)
    acb2:	3401      	adds	r4, #1
    acb4:	3608      	adds	r6, #8
    acb6:	3508      	adds	r5, #8
    acb8:	2c04      	cmp	r4, #4
    acba:	d1e3      	bne.n	ac84 <audioTickSynth+0x384>
		timeOS = DWT->CYCCNT - tempCountOS;
    acbc:	f8da 3004 	ldr.w	r3, [sl, #4]
    acc0:	68fa      	ldr	r2, [r7, #12]
    acc2:	1a9b      	subs	r3, r3, r2
    acc4:	4a77      	ldr	r2, [pc, #476]	; (aea4 <audioTickSynth+0x5a4>)
    acc6:	6013      	str	r3, [r2, #0]
		if (!fxPre)
    acc8:	4b77      	ldr	r3, [pc, #476]	; (aea8 <audioTickSynth+0x5a8>)
    acca:	781b      	ldrb	r3, [r3, #0]
    accc:	b923      	cbnz	r3, acd8 <audioTickSynth+0x3d8>
			sample *= amplitude[v];
    acce:	69fb      	ldr	r3, [r7, #28]
    acd0:	edd3 7a00 	vldr	s15, [r3]
    acd4:	ee28 8a27 	vmul.f32	s16, s16, s15
	for (int v = 0; v < numStringsThisBoard; v++)
    acd8:	69fb      	ldr	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    acda:	eeb0 0a48 	vmov.f32	s0, s16
    acde:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	for (int v = 0; v < numStringsThisBoard; v++)
    ace0:	f108 0801 	add.w	r8, r8, #1
    ace4:	3304      	adds	r3, #4
    ace6:	61fb      	str	r3, [r7, #28]
    ace8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    acea:	3304      	adds	r3, #4
    acec:	62bb      	str	r3, [r7, #40]	; 0x28
    acee:	69bb      	ldr	r3, [r7, #24]
    acf0:	3304      	adds	r3, #4
    acf2:	61bb      	str	r3, [r7, #24]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    acf4:	4b6d      	ldr	r3, [pc, #436]	; (aeac <audioTickSynth+0x5ac>)
    acf6:	1918      	adds	r0, r3, r4
    acf8:	f001 f9ee 	bl	c0d8 <__tSVF_tick_veneer>
		masterSample += sample * finalMaster[v];
    acfc:	4b6c      	ldr	r3, [pc, #432]	; (aeb0 <audioTickSynth+0x5b0>)
    acfe:	ed93 7a00 	vldr	s14, [r3]
    ad02:	4b6c      	ldr	r3, [pc, #432]	; (aeb4 <audioTickSynth+0x5b4>)
    ad04:	4423      	add	r3, r4
    ad06:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
    ad0a:	1d23      	adds	r3, r4, #4
    ad0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		masterSample += sample * finalMaster[v];
    ad0e:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int v = 0; v < numStringsThisBoard; v++)
    ad12:	6a3b      	ldr	r3, [r7, #32]
    ad14:	781b      	ldrb	r3, [r3, #0]
		masterSample += sample * finalMaster[v];
    ad16:	eee0 8a27 	vfma.f32	s17, s0, s15
	for (int v = 0; v < numStringsThisBoard; v++)
    ad1a:	4543      	cmp	r3, r8
    ad1c:	f73f ae99 	bgt.w	aa52 <audioTickSynth+0x152>
	uint32_t tempVolumePoly = DWT->CYCCNT;
    ad20:	4b65      	ldr	r3, [pc, #404]	; (aeb8 <audioTickSynth+0x5b8>)
	if (pedalControlsMaster)
    ad22:	4a66      	ldr	r2, [pc, #408]	; (aebc <audioTickSynth+0x5bc>)
	uint32_t tempVolumePoly = DWT->CYCCNT;
    ad24:	6859      	ldr	r1, [r3, #4]
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    ad26:	687c      	ldr	r4, [r7, #4]
    ad28:	685b      	ldr	r3, [r3, #4]
    ad2a:	4865      	ldr	r0, [pc, #404]	; (aec0 <audioTickSynth+0x5c0>)
    ad2c:	1b1b      	subs	r3, r3, r4
	if (pedalControlsMaster)
    ad2e:	7812      	ldrb	r2, [r2, #0]
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    ad30:	6003      	str	r3, [r0, #0]
	if (pedalControlsMaster)
    ad32:	b1ca      	cbz	r2, ad68 <audioTickSynth+0x468>
    ad34:	ed9f 7a63 	vldr	s14, [pc, #396]	; aec4 <audioTickSynth+0x5c4>
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    ad38:	ee29 6a09 	vmul.f32	s12, s18, s18
    ad3c:	eddf 7a62 	vldr	s15, [pc, #392]	; aec8 <audioTickSynth+0x5c8>
    ad40:	ed9f 5a62 	vldr	s10, [pc, #392]	; aecc <audioTickSynth+0x5cc>
    ad44:	eee9 7a07 	vfma.f32	s15, s18, s14
    ad48:	eddf 5a61 	vldr	s11, [pc, #388]	; aed0 <audioTickSynth+0x5d0>
    ad4c:	ee66 6a09 	vmul.f32	s13, s12, s18
    ad50:	ed9f 7a60 	vldr	s14, [pc, #384]	; aed4 <audioTickSynth+0x5d4>
    ad54:	ee29 7a07 	vmul.f32	s14, s18, s14
    ad58:	eee6 7a45 	vfms.f32	s15, s12, s10
    ad5c:	eee6 7aa5 	vfma.f32	s15, s13, s11
    ad60:	eee6 7ac7 	vfms.f32	s15, s13, s14
		masterSample *= outVol;
    ad64:	ee68 8aa7 	vmul.f32	s17, s17, s15
	timeVolumePoly = DWT->CYCCNT - tempVolumePoly;
    ad68:	4a53      	ldr	r2, [pc, #332]	; (aeb8 <audioTickSynth+0x5b8>)
    ad6a:	4c5b      	ldr	r4, [pc, #364]	; (aed8 <audioTickSynth+0x5d8>)
    ad6c:	6853      	ldr	r3, [r2, #4]
	return masterSample * audioMasterLevel * 0.98f;
    ad6e:	485b      	ldr	r0, [pc, #364]	; (aedc <audioTickSynth+0x5dc>)
	timeVolumePoly = DWT->CYCCNT - tempVolumePoly;
    ad70:	1a5b      	subs	r3, r3, r1
	return masterSample * audioMasterLevel * 0.98f;
    ad72:	eddf 7a5b 	vldr	s15, [pc, #364]	; aee0 <audioTickSynth+0x5e0>
	timeTick = DWT->CYCCNT - tempCountTick;
    ad76:	495b      	ldr	r1, [pc, #364]	; (aee4 <audioTickSynth+0x5e4>)
	timeVolumePoly = DWT->CYCCNT - tempVolumePoly;
    ad78:	6023      	str	r3, [r4, #0]
	timeTick = DWT->CYCCNT - tempCountTick;
    ad7a:	6853      	ldr	r3, [r2, #4]
	return masterSample * audioMasterLevel * 0.98f;
    ad7c:	ed90 0a00 	vldr	s0, [r0]
	timeTick = DWT->CYCCNT - tempCountTick;
    ad80:	683a      	ldr	r2, [r7, #0]
}
    ad82:	373c      	adds	r7, #60	; 0x3c
	return masterSample * audioMasterLevel * 0.98f;
    ad84:	ee20 0a27 	vmul.f32	s0, s0, s15
	timeTick = DWT->CYCCNT - tempCountTick;
    ad88:	1a9b      	subs	r3, r3, r2
	return masterSample * audioMasterLevel * 0.98f;
    ad8a:	ee20 0a28 	vmul.f32	s0, s0, s17
	timeTick = DWT->CYCCNT - tempCountTick;
    ad8e:	600b      	str	r3, [r1, #0]
}
    ad90:	46bd      	mov	sp, r7
    ad92:	ecbd 8b08 	vpop	{d8-d11}
    ad96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pedalTicked[i])
    ad9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ad9c:	2b00      	cmp	r3, #0
    ad9e:	f040 8294 	bne.w	b2ca <audioTickSynth+0x9ca>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    ada2:	4a45      	ldr	r2, [pc, #276]	; (aeb8 <audioTickSynth+0x5b8>)
    ada4:	4950      	ldr	r1, [pc, #320]	; (aee8 <audioTickSynth+0x5e8>)
    ada6:	6853      	ldr	r3, [r2, #4]
	float masterSample = 0.0f;
    ada8:	eddf 8a50 	vldr	s17, [pc, #320]	; aeec <audioTickSynth+0x5ec>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    adac:	1b5b      	subs	r3, r3, r5
    adae:	600b      	str	r3, [r1, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    adb0:	6853      	ldr	r3, [r2, #4]
    adb2:	607b      	str	r3, [r7, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    adb4:	e7b4      	b.n	ad20 <audioTickSynth+0x420>
			noise_tick(v);
    adb6:	4640      	mov	r0, r8
    adb8:	f7ff fd32 	bl	a820 <noise_tick>
    adbc:	e6c3      	b.n	ab46 <audioTickSynth+0x246>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    adbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    adc0:	f103 0018 	add.w	r0, r3, #24
    adc4:	f001 f88c 	bl	bee0 <__tADSRT_tickNoInterp_veneer>
    adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    adca:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    adce:	e681      	b.n	aad4 <audioTickSynth+0x1d4>
    add0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    add2:	f103 0010 	add.w	r0, r3, #16
    add6:	f001 f883 	bl	bee0 <__tADSRT_tickNoInterp_veneer>
    adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    addc:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    ade0:	e673      	b.n	aaca <audioTickSynth+0x1ca>
    ade2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ade4:	f103 0008 	add.w	r0, r3, #8
    ade8:	f001 f87a 	bl	bee0 <__tADSRT_tickNoInterp_veneer>
    adec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    adee:	ed83 0a07 	vstr	s0, [r3, #28]
    adf2:	e665      	b.n	aac0 <audioTickSynth+0x1c0>
    adf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    adf6:	f001 f873 	bl	bee0 <__tADSRT_tickNoInterp_veneer>
    adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    adfc:	ed83 0a05 	vstr	s0, [r3, #20]
    ae00:	e659      	b.n	aab6 <audioTickSynth+0x1b6>
			tOversampler_upsample(&os[v], sample, oversamplerArray);
    ae02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ae04:	eeb0 0a48 	vmov.f32	s0, s16
    ae08:	4b39      	ldr	r3, [pc, #228]	; (aef0 <audioTickSynth+0x5f0>)
			for (int i = 0; i < 4; i++)
    ae0a:	2400      	movs	r4, #0
    ae0c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; aef8 <audioTickSynth+0x5f8>
    ae10:	1898      	adds	r0, r3, r2
    ae12:	4b21      	ldr	r3, [pc, #132]	; (ae98 <audioTickSynth+0x598>)
			tOversampler_upsample(&os[v], sample, oversamplerArray);
    ae14:	4937      	ldr	r1, [pc, #220]	; (aef4 <audioTickSynth+0x5f4>)
    ae16:	189e      	adds	r6, r3, r2
    ae18:	4b20      	ldr	r3, [pc, #128]	; (ae9c <audioTickSynth+0x59c>)
    ae1a:	ee0b 0a90 	vmov	s23, r0
    ae1e:	189d      	adds	r5, r3, r2
    ae20:	f001 f876 	bl	bf10 <__tOversampler_upsample_veneer>
    ae24:	4641      	mov	r1, r8
    ae26:	46c8      	mov	r8, r9
    ae28:	46ab      	mov	fp, r5
				if (effectsActive[i])
    ae2a:	f818 3b01 	ldrb.w	r3, [r8], #1
    ae2e:	b973      	cbnz	r3, ae4e <audioTickSynth+0x54e>
			for (int i = 0; i < 4; i++)
    ae30:	3401      	adds	r4, #1
    ae32:	3608      	adds	r6, #8
    ae34:	f10b 0b08 	add.w	fp, fp, #8
    ae38:	2c04      	cmp	r4, #4
    ae3a:	d1f6      	bne.n	ae2a <audioTickSynth+0x52a>
    ae3c:	4688      	mov	r8, r1
			sample = tOversampler_downsample(&os[v], oversamplerArray);
    ae3e:	ee1b 0a90 	vmov	r0, s23
    ae42:	492c      	ldr	r1, [pc, #176]	; (aef4 <audioTickSynth+0x5f4>)
    ae44:	f001 f950 	bl	c0e8 <__tOversampler_downsample_veneer>
    ae48:	eeb0 8a40 	vmov.f32	s16, s0
    ae4c:	e736      	b.n	acbc <audioTickSynth+0x3bc>
    ae4e:	4d29      	ldr	r5, [pc, #164]	; (aef4 <audioTickSynth+0x5f4>)
    ae50:	f105 0908 	add.w	r9, r5, #8
						float dry = oversamplerArray[j]; //store the dry value to mix later
    ae54:	ed95 8a00 	vldr	s16, [r5]
						oversamplerArray[j] = effectTick[i](dry, i, v); //run the effect
    ae58:	4620      	mov	r0, r4
    ae5a:	4b11      	ldr	r3, [pc, #68]	; (aea0 <audioTickSynth+0x5a0>)
    ae5c:	eeb0 0a48 	vmov.f32	s0, s16
    ae60:	60b9      	str	r1, [r7, #8]
    ae62:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    ae66:	4798      	blx	r3
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    ae68:	edd6 7a00 	vldr	s15, [r6]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    ae6c:	ed9b 7a00 	vldr	s14, [fp]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    ae70:	ee20 0a27 	vmul.f32	s0, s0, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    ae74:	68b9      	ldr	r1, [r7, #8]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    ae76:	ee7b 7a67 	vsub.f32	s15, s22, s15
    ae7a:	eea7 0a88 	vfma.f32	s0, s15, s16
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    ae7e:	ee67 7a00 	vmul.f32	s15, s14, s0
    ae82:	ece5 7a01 	vstmia	r5!, {s15}
					for (int j = 0; j < OVERSAMPLE; j++)
    ae86:	454d      	cmp	r5, r9
    ae88:	d1e4      	bne.n	ae54 <audioTickSynth+0x554>
    ae8a:	e7d1      	b.n	ae30 <audioTickSynth+0x530>
		for (int i = 0; i < oscToTick; i++)
    ae8c:	eddf 7a17 	vldr	s15, [pc, #92]	; aeec <audioTickSynth+0x5ec>
    ae90:	eeb0 6a67 	vmov.f32	s12, s15
    ae94:	e67a      	b.n	ab8c <audioTickSynth+0x28c>
    ae96:	bf00      	nop
    ae98:	2001d3ac 	.word	0x2001d3ac
    ae9c:	2001d3cc 	.word	0x2001d3cc
    aea0:	2001d308 	.word	0x2001d308
    aea4:	2001d9fc 	.word	0x2001d9fc
    aea8:	20016611 	.word	0x20016611
    aeac:	2001d384 	.word	0x2001d384
    aeb0:	20000690 	.word	0x20000690
    aeb4:	2001d38c 	.word	0x2001d38c
    aeb8:	e0001000 	.word	0xe0001000
    aebc:	2001a430 	.word	0x2001a430
    aec0:	2001da04 	.word	0x2001da04
    aec4:	3ef1ac0b 	.word	0x3ef1ac0b
    aec8:	3bdc4213 	.word	0x3bdc4213
    aecc:	4022be0a 	.word	0x4022be0a
    aed0:	40caa285 	.word	0x40caa285
    aed4:	40516313 	.word	0x40516313
    aed8:	2001da10 	.word	0x2001da10
    aedc:	200006a0 	.word	0x200006a0
    aee0:	3f7ae148 	.word	0x3f7ae148
    aee4:	2001da0c 	.word	0x2001da0c
    aee8:	2001da08 	.word	0x2001da08
    aeec:	00000000 	.word	0x00000000
    aef0:	2001d684 	.word	0x2001d684
    aef4:	2001d6c0 	.word	0x2001d6c0
    aef8:	200144e4 	.word	0x200144e4
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    aefc:	486c      	ldr	r0, [pc, #432]	; (b0b0 <audioTickSynth+0x7b0>)
    aefe:	f000 ffc7 	bl	be90 <__tExpSmooth_tick_veneer>
    af02:	4b6c      	ldr	r3, [pc, #432]	; (b0b4 <audioTickSynth+0x7b4>)
    af04:	ed83 0a02 	vstr	s0, [r3, #8]
			for (int v = 0; v < numStringsThisBoard; v++)
    af08:	6a3b      	ldr	r3, [r7, #32]
    af0a:	781a      	ldrb	r2, [r3, #0]
    af0c:	2a00      	cmp	r2, #0
    af0e:	f43f ad1c 	beq.w	a94a <audioTickSynth+0x4a>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    af12:	4b69      	ldr	r3, [pc, #420]	; (b0b8 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    af14:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    af16:	ed83 0a0c 	vstr	s0, [r3, #48]	; 0x30
    af1a:	bf18      	it	ne
    af1c:	ed83 0a0d 	vstrne	s0, [r3, #52]	; 0x34
		if (knobTicked[i])
    af20:	68e3      	ldr	r3, [r4, #12]
    af22:	2b00      	cmp	r3, #0
    af24:	f43f ad15 	beq.w	a952 <audioTickSynth+0x52>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    af28:	4864      	ldr	r0, [pc, #400]	; (b0bc <audioTickSynth+0x7bc>)
    af2a:	f000 ffb1 	bl	be90 <__tExpSmooth_tick_veneer>
    af2e:	4b61      	ldr	r3, [pc, #388]	; (b0b4 <audioTickSynth+0x7b4>)
    af30:	ed83 0a03 	vstr	s0, [r3, #12]
			for (int v = 0; v < numStringsThisBoard; v++)
    af34:	6a3b      	ldr	r3, [r7, #32]
    af36:	781a      	ldrb	r2, [r3, #0]
    af38:	2a00      	cmp	r2, #0
    af3a:	f43f ad0a 	beq.w	a952 <audioTickSynth+0x52>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    af3e:	4b5e      	ldr	r3, [pc, #376]	; (b0b8 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    af40:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    af42:	ed83 0a0e 	vstr	s0, [r3, #56]	; 0x38
    af46:	bf18      	it	ne
    af48:	ed83 0a0f 	vstrne	s0, [r3, #60]	; 0x3c
		if (knobTicked[i])
    af4c:	6923      	ldr	r3, [r4, #16]
    af4e:	2b00      	cmp	r3, #0
    af50:	f43f ad03 	beq.w	a95a <audioTickSynth+0x5a>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    af54:	485a      	ldr	r0, [pc, #360]	; (b0c0 <audioTickSynth+0x7c0>)
    af56:	f000 ff9b 	bl	be90 <__tExpSmooth_tick_veneer>
    af5a:	4b56      	ldr	r3, [pc, #344]	; (b0b4 <audioTickSynth+0x7b4>)
    af5c:	ed83 0a04 	vstr	s0, [r3, #16]
			for (int v = 0; v < numStringsThisBoard; v++)
    af60:	6a3b      	ldr	r3, [r7, #32]
    af62:	781a      	ldrb	r2, [r3, #0]
    af64:	2a00      	cmp	r2, #0
    af66:	f43f acf8 	beq.w	a95a <audioTickSynth+0x5a>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    af6a:	4b53      	ldr	r3, [pc, #332]	; (b0b8 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    af6c:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    af6e:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    af72:	bf18      	it	ne
    af74:	ed83 0a11 	vstrne	s0, [r3, #68]	; 0x44
		if (knobTicked[i])
    af78:	6963      	ldr	r3, [r4, #20]
    af7a:	2b00      	cmp	r3, #0
    af7c:	f43f acf1 	beq.w	a962 <audioTickSynth+0x62>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    af80:	4850      	ldr	r0, [pc, #320]	; (b0c4 <audioTickSynth+0x7c4>)
    af82:	f000 ff85 	bl	be90 <__tExpSmooth_tick_veneer>
    af86:	4b4b      	ldr	r3, [pc, #300]	; (b0b4 <audioTickSynth+0x7b4>)
    af88:	ed83 0a05 	vstr	s0, [r3, #20]
			for (int v = 0; v < numStringsThisBoard; v++)
    af8c:	6a3b      	ldr	r3, [r7, #32]
    af8e:	781a      	ldrb	r2, [r3, #0]
    af90:	2a00      	cmp	r2, #0
    af92:	f43f ace6 	beq.w	a962 <audioTickSynth+0x62>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    af96:	4b48      	ldr	r3, [pc, #288]	; (b0b8 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    af98:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    af9a:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
    af9e:	bf18      	it	ne
    afa0:	ed83 0a13 	vstrne	s0, [r3, #76]	; 0x4c
		if (knobTicked[i])
    afa4:	69a3      	ldr	r3, [r4, #24]
    afa6:	2b00      	cmp	r3, #0
    afa8:	f43f acdf 	beq.w	a96a <audioTickSynth+0x6a>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    afac:	4846      	ldr	r0, [pc, #280]	; (b0c8 <audioTickSynth+0x7c8>)
    afae:	f000 ff6f 	bl	be90 <__tExpSmooth_tick_veneer>
    afb2:	4b40      	ldr	r3, [pc, #256]	; (b0b4 <audioTickSynth+0x7b4>)
    afb4:	ed83 0a06 	vstr	s0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    afb8:	6a3b      	ldr	r3, [r7, #32]
    afba:	781a      	ldrb	r2, [r3, #0]
    afbc:	2a00      	cmp	r2, #0
    afbe:	f43f acd4 	beq.w	a96a <audioTickSynth+0x6a>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    afc2:	4b3d      	ldr	r3, [pc, #244]	; (b0b8 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    afc4:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    afc6:	ed83 0a14 	vstr	s0, [r3, #80]	; 0x50
    afca:	bf18      	it	ne
    afcc:	ed83 0a15 	vstrne	s0, [r3, #84]	; 0x54
		if (knobTicked[i])
    afd0:	69e3      	ldr	r3, [r4, #28]
    afd2:	2b00      	cmp	r3, #0
    afd4:	f43f accd 	beq.w	a972 <audioTickSynth+0x72>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    afd8:	483c      	ldr	r0, [pc, #240]	; (b0cc <audioTickSynth+0x7cc>)
    afda:	f000 ff59 	bl	be90 <__tExpSmooth_tick_veneer>
    afde:	4b35      	ldr	r3, [pc, #212]	; (b0b4 <audioTickSynth+0x7b4>)
    afe0:	ed83 0a07 	vstr	s0, [r3, #28]
			for (int v = 0; v < numStringsThisBoard; v++)
    afe4:	6a3b      	ldr	r3, [r7, #32]
    afe6:	781a      	ldrb	r2, [r3, #0]
    afe8:	2a00      	cmp	r2, #0
    afea:	f43f acc2 	beq.w	a972 <audioTickSynth+0x72>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    afee:	4b32      	ldr	r3, [pc, #200]	; (b0b8 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    aff0:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    aff2:	ed83 0a16 	vstr	s0, [r3, #88]	; 0x58
    aff6:	bf18      	it	ne
    aff8:	ed83 0a17 	vstrne	s0, [r3, #92]	; 0x5c
		if (knobTicked[i])
    affc:	6a23      	ldr	r3, [r4, #32]
    affe:	2b00      	cmp	r3, #0
    b000:	f43f acbb 	beq.w	a97a <audioTickSynth+0x7a>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b004:	4832      	ldr	r0, [pc, #200]	; (b0d0 <audioTickSynth+0x7d0>)
    b006:	f000 ff43 	bl	be90 <__tExpSmooth_tick_veneer>
    b00a:	4b2a      	ldr	r3, [pc, #168]	; (b0b4 <audioTickSynth+0x7b4>)
    b00c:	ed83 0a08 	vstr	s0, [r3, #32]
			for (int v = 0; v < numStringsThisBoard; v++)
    b010:	6a3b      	ldr	r3, [r7, #32]
    b012:	781a      	ldrb	r2, [r3, #0]
    b014:	2a00      	cmp	r2, #0
    b016:	f43f acb0 	beq.w	a97a <audioTickSynth+0x7a>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b01a:	4b27      	ldr	r3, [pc, #156]	; (b0b8 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b01c:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b01e:	ed83 0a18 	vstr	s0, [r3, #96]	; 0x60
    b022:	bf18      	it	ne
    b024:	ed83 0a19 	vstrne	s0, [r3, #100]	; 0x64
		if (knobTicked[i])
    b028:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b02a:	2b00      	cmp	r3, #0
    b02c:	f43f aca9 	beq.w	a982 <audioTickSynth+0x82>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b030:	4828      	ldr	r0, [pc, #160]	; (b0d4 <audioTickSynth+0x7d4>)
    b032:	f000 ff2d 	bl	be90 <__tExpSmooth_tick_veneer>
    b036:	4b1f      	ldr	r3, [pc, #124]	; (b0b4 <audioTickSynth+0x7b4>)
    b038:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
			for (int v = 0; v < numStringsThisBoard; v++)
    b03c:	6a3b      	ldr	r3, [r7, #32]
    b03e:	781a      	ldrb	r2, [r3, #0]
    b040:	2a00      	cmp	r2, #0
    b042:	f43f ac9e 	beq.w	a982 <audioTickSynth+0x82>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b046:	4b1c      	ldr	r3, [pc, #112]	; (b0b8 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b048:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b04a:	ed83 0a1a 	vstr	s0, [r3, #104]	; 0x68
    b04e:	bf18      	it	ne
    b050:	ed83 0a1b 	vstrne	s0, [r3, #108]	; 0x6c
		if (knobTicked[i])
    b054:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b056:	2b00      	cmp	r3, #0
    b058:	f43f ac97 	beq.w	a98a <audioTickSynth+0x8a>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b05c:	481e      	ldr	r0, [pc, #120]	; (b0d8 <audioTickSynth+0x7d8>)
    b05e:	f000 ff17 	bl	be90 <__tExpSmooth_tick_veneer>
    b062:	4b14      	ldr	r3, [pc, #80]	; (b0b4 <audioTickSynth+0x7b4>)
    b064:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
			for (int v = 0; v < numStringsThisBoard; v++)
    b068:	6a3b      	ldr	r3, [r7, #32]
    b06a:	781a      	ldrb	r2, [r3, #0]
    b06c:	2a00      	cmp	r2, #0
    b06e:	f43f ac8c 	beq.w	a98a <audioTickSynth+0x8a>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b072:	4b11      	ldr	r3, [pc, #68]	; (b0b8 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b074:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b076:	ed83 0a1c 	vstr	s0, [r3, #112]	; 0x70
    b07a:	bf18      	it	ne
    b07c:	ed83 0a1d 	vstrne	s0, [r3, #116]	; 0x74
		if (knobTicked[i])
    b080:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    b082:	2b00      	cmp	r3, #0
    b084:	f43f ac85 	beq.w	a992 <audioTickSynth+0x92>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b088:	4814      	ldr	r0, [pc, #80]	; (b0dc <audioTickSynth+0x7dc>)
    b08a:	f000 ff01 	bl	be90 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b08e:	6a3a      	ldr	r2, [r7, #32]
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b090:	4b08      	ldr	r3, [pc, #32]	; (b0b4 <audioTickSynth+0x7b4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b092:	7812      	ldrb	r2, [r2, #0]
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b094:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
			for (int v = 0; v < numStringsThisBoard; v++)
    b098:	2a00      	cmp	r2, #0
    b09a:	f43f ac7a 	beq.w	a992 <audioTickSynth+0x92>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b09e:	4b06      	ldr	r3, [pc, #24]	; (b0b8 <audioTickSynth+0x7b8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b0a0:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b0a2:	ed83 0a1e 	vstr	s0, [r3, #120]	; 0x78
			for (int v = 0; v < numStringsThisBoard; v++)
    b0a6:	f43f ac74 	beq.w	a992 <audioTickSynth+0x92>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b0aa:	ed83 0a1f 	vstr	s0, [r3, #124]	; 0x7c
			for (int v = 0; v < numStringsThisBoard; v++)
    b0ae:	e470      	b.n	a992 <audioTickSynth+0x92>
    b0b0:	20005240 	.word	0x20005240
    b0b4:	200051e8 	.word	0x200051e8
    b0b8:	2001d8ac 	.word	0x2001d8ac
    b0bc:	20005244 	.word	0x20005244
    b0c0:	20005248 	.word	0x20005248
    b0c4:	2000524c 	.word	0x2000524c
    b0c8:	20005250 	.word	0x20005250
    b0cc:	20005254 	.word	0x20005254
    b0d0:	20005258 	.word	0x20005258
    b0d4:	2000525c 	.word	0x2000525c
    b0d8:	20005260 	.word	0x20005260
    b0dc:	20005264 	.word	0x20005264
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b0e0:	4883      	ldr	r0, [pc, #524]	; (b2f0 <audioTickSynth+0x9f0>)
    b0e2:	f000 fed5 	bl	be90 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b0e6:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b0e8:	4e82      	ldr	r6, [pc, #520]	; (b2f4 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b0ea:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b0ec:	ed86 0a00 	vstr	s0, [r6]
			for (int v = 0; v < numStringsThisBoard; v++)
    b0f0:	2a00      	cmp	r2, #0
    b0f2:	f43f ac53 	beq.w	a99c <audioTickSynth+0x9c>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b0f6:	4b80      	ldr	r3, [pc, #512]	; (b2f8 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b0f8:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b0fa:	ed83 0a38 	vstr	s0, [r3, #224]	; 0xe0
    b0fe:	bf18      	it	ne
    b100:	ed83 0a39 	vstrne	s0, [r3, #228]	; 0xe4
		if (pedalTicked[i])
    b104:	6863      	ldr	r3, [r4, #4]
    b106:	2b00      	cmp	r3, #0
    b108:	f43f ac4c 	beq.w	a9a4 <audioTickSynth+0xa4>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b10c:	487b      	ldr	r0, [pc, #492]	; (b2fc <audioTickSynth+0x9fc>)
    b10e:	f000 febf 	bl	be90 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b112:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b114:	4e77      	ldr	r6, [pc, #476]	; (b2f4 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b116:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b118:	ed86 0a01 	vstr	s0, [r6, #4]
			for (int v = 0; v < numStringsThisBoard; v++)
    b11c:	2a00      	cmp	r2, #0
    b11e:	f43f ac41 	beq.w	a9a4 <audioTickSynth+0xa4>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b122:	4b75      	ldr	r3, [pc, #468]	; (b2f8 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b124:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b126:	ed83 0a3a 	vstr	s0, [r3, #232]	; 0xe8
    b12a:	bf18      	it	ne
    b12c:	ed83 0a3b 	vstrne	s0, [r3, #236]	; 0xec
		if (pedalTicked[i])
    b130:	68a3      	ldr	r3, [r4, #8]
    b132:	2b00      	cmp	r3, #0
    b134:	f43f ac3a 	beq.w	a9ac <audioTickSynth+0xac>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b138:	4871      	ldr	r0, [pc, #452]	; (b300 <audioTickSynth+0xa00>)
    b13a:	f000 fea9 	bl	be90 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b13e:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b140:	4e6c      	ldr	r6, [pc, #432]	; (b2f4 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b142:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b144:	ed86 0a02 	vstr	s0, [r6, #8]
			for (int v = 0; v < numStringsThisBoard; v++)
    b148:	2a00      	cmp	r2, #0
    b14a:	f43f ac2f 	beq.w	a9ac <audioTickSynth+0xac>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b14e:	4b6a      	ldr	r3, [pc, #424]	; (b2f8 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b150:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b152:	ed83 0a3c 	vstr	s0, [r3, #240]	; 0xf0
    b156:	bf18      	it	ne
    b158:	ed83 0a3d 	vstrne	s0, [r3, #244]	; 0xf4
		if (pedalTicked[i])
    b15c:	68e3      	ldr	r3, [r4, #12]
    b15e:	2b00      	cmp	r3, #0
    b160:	f43f ac28 	beq.w	a9b4 <audioTickSynth+0xb4>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b164:	4867      	ldr	r0, [pc, #412]	; (b304 <audioTickSynth+0xa04>)
    b166:	f000 fe93 	bl	be90 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b16a:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b16c:	4e61      	ldr	r6, [pc, #388]	; (b2f4 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b16e:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b170:	ed86 0a03 	vstr	s0, [r6, #12]
			for (int v = 0; v < numStringsThisBoard; v++)
    b174:	2a00      	cmp	r2, #0
    b176:	f43f ac1d 	beq.w	a9b4 <audioTickSynth+0xb4>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b17a:	4b5f      	ldr	r3, [pc, #380]	; (b2f8 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b17c:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b17e:	ed83 0a3e 	vstr	s0, [r3, #248]	; 0xf8
    b182:	bf18      	it	ne
    b184:	ed83 0a3f 	vstrne	s0, [r3, #252]	; 0xfc
		if (pedalTicked[i])
    b188:	6923      	ldr	r3, [r4, #16]
    b18a:	2b00      	cmp	r3, #0
    b18c:	f43f ac16 	beq.w	a9bc <audioTickSynth+0xbc>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b190:	485d      	ldr	r0, [pc, #372]	; (b308 <audioTickSynth+0xa08>)
    b192:	f000 fe7d 	bl	be90 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b196:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b198:	4e56      	ldr	r6, [pc, #344]	; (b2f4 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b19a:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b19c:	ed86 0a04 	vstr	s0, [r6, #16]
			for (int v = 0; v < numStringsThisBoard; v++)
    b1a0:	2a00      	cmp	r2, #0
    b1a2:	f43f ac0b 	beq.w	a9bc <audioTickSynth+0xbc>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b1a6:	4b54      	ldr	r3, [pc, #336]	; (b2f8 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b1a8:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b1aa:	ed83 0a40 	vstr	s0, [r3, #256]	; 0x100
    b1ae:	bf18      	it	ne
    b1b0:	ed83 0a41 	vstrne	s0, [r3, #260]	; 0x104
		if (pedalTicked[i])
    b1b4:	6963      	ldr	r3, [r4, #20]
    b1b6:	2b00      	cmp	r3, #0
    b1b8:	f43f ac04 	beq.w	a9c4 <audioTickSynth+0xc4>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b1bc:	4853      	ldr	r0, [pc, #332]	; (b30c <audioTickSynth+0xa0c>)
    b1be:	f000 fe67 	bl	be90 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b1c2:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b1c4:	4e4b      	ldr	r6, [pc, #300]	; (b2f4 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b1c6:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b1c8:	ed86 0a05 	vstr	s0, [r6, #20]
			for (int v = 0; v < numStringsThisBoard; v++)
    b1cc:	2a00      	cmp	r2, #0
    b1ce:	f43f abf9 	beq.w	a9c4 <audioTickSynth+0xc4>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b1d2:	4b49      	ldr	r3, [pc, #292]	; (b2f8 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b1d4:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b1d6:	ed83 0a42 	vstr	s0, [r3, #264]	; 0x108
    b1da:	bf18      	it	ne
    b1dc:	ed83 0a43 	vstrne	s0, [r3, #268]	; 0x10c
		if (pedalTicked[i])
    b1e0:	69a3      	ldr	r3, [r4, #24]
    b1e2:	2b00      	cmp	r3, #0
    b1e4:	f43f abf2 	beq.w	a9cc <audioTickSynth+0xcc>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b1e8:	4849      	ldr	r0, [pc, #292]	; (b310 <audioTickSynth+0xa10>)
    b1ea:	f000 fe51 	bl	be90 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b1ee:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b1f0:	4e40      	ldr	r6, [pc, #256]	; (b2f4 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b1f2:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b1f4:	ed86 0a06 	vstr	s0, [r6, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    b1f8:	2a00      	cmp	r2, #0
    b1fa:	f43f abe7 	beq.w	a9cc <audioTickSynth+0xcc>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b1fe:	4b3e      	ldr	r3, [pc, #248]	; (b2f8 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b200:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b202:	ed83 0a44 	vstr	s0, [r3, #272]	; 0x110
    b206:	bf18      	it	ne
    b208:	ed83 0a45 	vstrne	s0, [r3, #276]	; 0x114
		if (pedalTicked[i])
    b20c:	69e3      	ldr	r3, [r4, #28]
    b20e:	2b00      	cmp	r3, #0
    b210:	f43f abe0 	beq.w	a9d4 <audioTickSynth+0xd4>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b214:	483f      	ldr	r0, [pc, #252]	; (b314 <audioTickSynth+0xa14>)
    b216:	f000 fe3b 	bl	be90 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b21a:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b21c:	4e35      	ldr	r6, [pc, #212]	; (b2f4 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b21e:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b220:	ed86 0a07 	vstr	s0, [r6, #28]
			for (int v = 0; v < numStringsThisBoard; v++)
    b224:	2a00      	cmp	r2, #0
    b226:	f43f abd5 	beq.w	a9d4 <audioTickSynth+0xd4>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b22a:	4b33      	ldr	r3, [pc, #204]	; (b2f8 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b22c:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b22e:	ed83 0a46 	vstr	s0, [r3, #280]	; 0x118
    b232:	bf18      	it	ne
    b234:	ed83 0a47 	vstrne	s0, [r3, #284]	; 0x11c
		if (pedalTicked[i])
    b238:	6a23      	ldr	r3, [r4, #32]
    b23a:	2b00      	cmp	r3, #0
    b23c:	f43f abce 	beq.w	a9dc <audioTickSynth+0xdc>
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b240:	4835      	ldr	r0, [pc, #212]	; (b318 <audioTickSynth+0xa18>)
    b242:	f000 fe25 	bl	be90 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b246:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b248:	4e2a      	ldr	r6, [pc, #168]	; (b2f4 <audioTickSynth+0x9f4>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b24a:	781a      	ldrb	r2, [r3, #0]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b24c:	ed86 0a08 	vstr	s0, [r6, #32]
			for (int v = 0; v < numStringsThisBoard; v++)
    b250:	2a00      	cmp	r2, #0
    b252:	f43f ada2 	beq.w	ad9a <audioTickSynth+0x49a>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b256:	4b28      	ldr	r3, [pc, #160]	; (b2f8 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b258:	2a01      	cmp	r2, #1
		if (pedalTicked[i])
    b25a:	6a62      	ldr	r2, [r4, #36]	; 0x24
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b25c:	ed83 0a48 	vstr	s0, [r3, #288]	; 0x120
    b260:	bf18      	it	ne
    b262:	ed83 0a49 	vstrne	s0, [r3, #292]	; 0x124
		if (pedalTicked[i])
    b266:	2a00      	cmp	r2, #0
    b268:	d12f      	bne.n	b2ca <audioTickSynth+0x9ca>
	for (int v = 0; v < numStringsThisBoard; v++)
    b26a:	6a3a      	ldr	r2, [r7, #32]
    b26c:	7812      	ldrb	r2, [r2, #0]
    b26e:	f7ff bbbf 	b.w	a9f0 <audioTickSynth+0xf0>
			for (int v = 0; v < numStringsThisBoard; v++)
    b272:	4e2a      	ldr	r6, [pc, #168]	; (b31c <audioTickSynth+0xa1c>)
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b274:	482a      	ldr	r0, [pc, #168]	; (b320 <audioTickSynth+0xa20>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b276:	623e      	str	r6, [r7, #32]
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b278:	f000 fe0a 	bl	be90 <__tExpSmooth_tick_veneer>
    b27c:	4b29      	ldr	r3, [pc, #164]	; (b324 <audioTickSynth+0xa24>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b27e:	7832      	ldrb	r2, [r6, #0]
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b280:	ed83 0a00 	vstr	s0, [r3]
			for (int v = 0; v < numStringsThisBoard; v++)
    b284:	2a00      	cmp	r2, #0
    b286:	f43f ab58 	beq.w	a93a <audioTickSynth+0x3a>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b28a:	4b1b      	ldr	r3, [pc, #108]	; (b2f8 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b28c:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b28e:	ed83 0a08 	vstr	s0, [r3, #32]
    b292:	bf18      	it	ne
    b294:	ed83 0a09 	vstrne	s0, [r3, #36]	; 0x24
		if (knobTicked[i])
    b298:	6863      	ldr	r3, [r4, #4]
    b29a:	2b00      	cmp	r3, #0
    b29c:	f43f ab51 	beq.w	a942 <audioTickSynth+0x42>
			knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b2a0:	4821      	ldr	r0, [pc, #132]	; (b328 <audioTickSynth+0xa28>)
    b2a2:	f000 fdf5 	bl	be90 <__tExpSmooth_tick_veneer>
    b2a6:	4b1f      	ldr	r3, [pc, #124]	; (b324 <audioTickSynth+0xa24>)
    b2a8:	ed83 0a01 	vstr	s0, [r3, #4]
			for (int v = 0; v < numStringsThisBoard; v++)
    b2ac:	6a3b      	ldr	r3, [r7, #32]
    b2ae:	781a      	ldrb	r2, [r3, #0]
    b2b0:	2a00      	cmp	r2, #0
    b2b2:	f43f ab46 	beq.w	a942 <audioTickSynth+0x42>
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b2b6:	4b10      	ldr	r3, [pc, #64]	; (b2f8 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b2b8:	2a01      	cmp	r2, #1
				sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    b2ba:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    b2be:	bf18      	it	ne
    b2c0:	ed83 0a0b 	vstrne	s0, [r3, #44]	; 0x2c
			for (int v = 0; v < numStringsThisBoard; v++)
    b2c4:	f7ff bb3d 	b.w	a942 <audioTickSynth+0x42>
    b2c8:	4e0a      	ldr	r6, [pc, #40]	; (b2f4 <audioTickSynth+0x9f4>)
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b2ca:	4818      	ldr	r0, [pc, #96]	; (b32c <audioTickSynth+0xa2c>)
    b2cc:	f000 fde0 	bl	be90 <__tExpSmooth_tick_veneer>
			for (int v = 0; v < numStringsThisBoard; v++)
    b2d0:	6a3b      	ldr	r3, [r7, #32]
			pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    b2d2:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
			for (int v = 0; v < numStringsThisBoard; v++)
    b2d6:	781a      	ldrb	r2, [r3, #0]
    b2d8:	2a00      	cmp	r2, #0
    b2da:	f43f ad62 	beq.w	ada2 <audioTickSynth+0x4a2>
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b2de:	4b06      	ldr	r3, [pc, #24]	; (b2f8 <audioTickSynth+0x9f8>)
			for (int v = 0; v < numStringsThisBoard; v++)
    b2e0:	2a01      	cmp	r2, #1
				sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    b2e2:	ed83 0a4a 	vstr	s0, [r3, #296]	; 0x128
    b2e6:	bf18      	it	ne
    b2e8:	ed83 0a4b 	vstrne	s0, [r3, #300]	; 0x12c
			for (int v = 0; v < numStringsThisBoard; v++)
    b2ec:	e7bd      	b.n	b26a <audioTickSynth+0x96a>
    b2ee:	bf00      	nop
    b2f0:	20005324 	.word	0x20005324
    b2f4:	200052fc 	.word	0x200052fc
    b2f8:	2001d8ac 	.word	0x2001d8ac
    b2fc:	20005328 	.word	0x20005328
    b300:	2000532c 	.word	0x2000532c
    b304:	20005330 	.word	0x20005330
    b308:	20005334 	.word	0x20005334
    b30c:	20005338 	.word	0x20005338
    b310:	2000533c 	.word	0x2000533c
    b314:	20005340 	.word	0x20005340
    b318:	20005344 	.word	0x20005344
    b31c:	20000694 	.word	0x20000694
    b320:	20005238 	.word	0x20005238
    b324:	200051e8 	.word	0x200051e8
    b328:	2000523c 	.word	0x2000523c
    b32c:	20005348 	.word	0x20005348
    b330:	f3af 8000 	nop.w
    b334:	f3af 8000 	nop.w
    b338:	f3af 8000 	nop.w
    b33c:	f3af 8000 	nop.w

0000b340 <audioFrameSynth>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    b340:	4ba4      	ldr	r3, [pc, #656]	; (b5d4 <audioFrameSynth+0x294>)
{
    b342:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (resetStringInputs)
    b346:	f8df 92ec 	ldr.w	r9, [pc, #748]	; b634 <audioFrameSynth+0x2f4>
{
    b34a:	4607      	mov	r7, r0
    b34c:	ed2d 8b04 	vpush	{d8-d9}
	uint32_t tempCountFrame = DWT->CYCCNT;
    b350:	685b      	ldr	r3, [r3, #4]
{
    b352:	b087      	sub	sp, #28
	uint32_t tempCountFrame = DWT->CYCCNT;
    b354:	9301      	str	r3, [sp, #4]
	if (resetStringInputs)
    b356:	f899 3000 	ldrb.w	r3, [r9]
    b35a:	2b00      	cmp	r3, #0
    b35c:	f040 8084 	bne.w	b468 <audioFrameSynth+0x128>
    b360:	f8df 82d4 	ldr.w	r8, [pc, #724]	; b638 <audioFrameSynth+0x2f8>
	if (newPluck)
    b364:	f8d8 3000 	ldr.w	r3, [r8]
    b368:	2b00      	cmp	r3, #0
    b36a:	d03a      	beq.n	b3e2 <audioFrameSynth+0xa2>
		for (int i = 0; i < numStringsThisBoard; i++)
    b36c:	4e9a      	ldr	r6, [pc, #616]	; (b5d8 <audioFrameSynth+0x298>)
    b36e:	7833      	ldrb	r3, [r6, #0]
    b370:	2b00      	cmp	r3, #0
    b372:	d033      	beq.n	b3dc <audioFrameSynth+0x9c>
    b374:	4a99      	ldr	r2, [pc, #612]	; (b5dc <audioFrameSynth+0x29c>)
    b376:	2500      	movs	r5, #0
    b378:	4999      	ldr	r1, [pc, #612]	; (b5e0 <audioFrameSynth+0x2a0>)
    b37a:	9702      	str	r7, [sp, #8]
    b37c:	9603      	str	r6, [sp, #12]
    b37e:	460f      	mov	r7, r1
				float amplitz = stringInputs[i] * 0.000015259021897f;
    b380:	eddf 8a98 	vldr	s17, [pc, #608]	; b5e4 <audioFrameSynth+0x2a4>
    b384:	4616      	mov	r6, r2
    b386:	f8df 92b4 	ldr.w	r9, [pc, #692]	; b63c <audioFrameSynth+0x2fc>
    b38a:	f8df b2b4 	ldr.w	fp, [pc, #692]	; b640 <audioFrameSynth+0x300>
    b38e:	4c96      	ldr	r4, [pc, #600]	; (b5e8 <audioFrameSynth+0x2a8>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    b390:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    b394:	b292      	uxth	r2, r2
    b396:	b932      	cbnz	r2, b3a6 <audioFrameSynth+0x66>
    b398:	4a94      	ldr	r2, [pc, #592]	; (b5ec <audioFrameSynth+0x2ac>)
    b39a:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    b39e:	b292      	uxth	r2, r2
    b3a0:	2a00      	cmp	r2, #0
    b3a2:	f040 808c 	bne.w	b4be <audioFrameSynth+0x17e>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    b3a6:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    b3aa:	b292      	uxth	r2, r2
    b3ac:	b132      	cbz	r2, b3bc <audioFrameSynth+0x7c>
    b3ae:	4a8f      	ldr	r2, [pc, #572]	; (b5ec <audioFrameSynth+0x2ac>)
    b3b0:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    b3b4:	b292      	uxth	r2, r2
    b3b6:	2a00      	cmp	r2, #0
    b3b8:	f000 80ea 	beq.w	b590 <audioFrameSynth+0x250>
			previousStringInputs[i] = stringInputs[i];
    b3bc:	4a8b      	ldr	r2, [pc, #556]	; (b5ec <audioFrameSynth+0x2ac>)
		for (int i = 0; i < numStringsThisBoard; i++)
    b3be:	3604      	adds	r6, #4
    b3c0:	f109 0904 	add.w	r9, r9, #4
    b3c4:	f10b 0b04 	add.w	fp, fp, #4
			previousStringInputs[i] = stringInputs[i];
    b3c8:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    b3cc:	3704      	adds	r7, #4
			previousStringInputs[i] = stringInputs[i];
    b3ce:	b292      	uxth	r2, r2
    b3d0:	f824 2015 	strh.w	r2, [r4, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    b3d4:	3501      	adds	r5, #1
    b3d6:	42ab      	cmp	r3, r5
    b3d8:	dcda      	bgt.n	b390 <audioFrameSynth+0x50>
    b3da:	9f02      	ldr	r7, [sp, #8]
		newPluck = 0;
    b3dc:	2300      	movs	r3, #0
    b3de:	f8c8 3000 	str.w	r3, [r8]
    b3e2:	4c83      	ldr	r4, [pc, #524]	; (b5f0 <audioFrameSynth+0x2b0>)
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    b3e4:	ed9f 8a83 	vldr	s16, [pc, #524]	; b5f4 <audioFrameSynth+0x2b4>
    b3e8:	f504 7500 	add.w	r5, r4, #512	; 0x200
    b3ec:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    b3f0:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    b3f4:	f7ff fa84 	bl	a900 <audioTickSynth>
    b3f8:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    b3fc:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    b3fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    b402:	42ac      	cmp	r4, r5
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    b404:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    b408:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    b40c:	d1f2      	bne.n	b3f4 <audioFrameSynth+0xb4>
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    b40e:	487a      	ldr	r0, [pc, #488]	; (b5f8 <audioFrameSynth+0x2b8>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    b410:	4b70      	ldr	r3, [pc, #448]	; (b5d4 <audioFrameSynth+0x294>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    b412:	edd0 6a00 	vldr	s13, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    b416:	685b      	ldr	r3, [r3, #4]
    b418:	9801      	ldr	r0, [sp, #4]
	if (frameLoadPercentage > .99f)
    b41a:	ed9f 7a78 	vldr	s14, [pc, #480]	; b5fc <audioFrameSynth+0x2bc>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    b41e:	1a1b      	subs	r3, r3, r0
    b420:	4977      	ldr	r1, [pc, #476]	; (b600 <audioFrameSynth+0x2c0>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    b422:	4a78      	ldr	r2, [pc, #480]	; (b604 <audioFrameSynth+0x2c4>)
    b424:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    b428:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    b42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    b42e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (frameLoadPercentage > .99f)
    b432:	eef4 7ac7 	vcmpe.f32	s15, s14
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    b436:	edc2 7a00 	vstr	s15, [r2]
	if (frameLoadPercentage > .99f)
    b43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b43e:	dd0e      	ble.n	b45e <audioFrameSynth+0x11e>
		frameLoadOverCount++;
    b440:	4a71      	ldr	r2, [pc, #452]	; (b608 <audioFrameSynth+0x2c8>)
    b442:	6813      	ldr	r3, [r2, #0]
    b444:	3301      	adds	r3, #1
		if (frameLoadOverCount > 3)
    b446:	2b03      	cmp	r3, #3
		frameLoadOverCount++;
    b448:	6013      	str	r3, [r2, #0]
		if (frameLoadOverCount > 3)
    b44a:	d908      	bls.n	b45e <audioFrameSynth+0x11e>
			if (overSampled == 1)
    b44c:	4b6f      	ldr	r3, [pc, #444]	; (b60c <audioFrameSynth+0x2cc>)
    b44e:	681a      	ldr	r2, [r3, #0]
    b450:	2a01      	cmp	r2, #1
    b452:	d02b      	beq.n	b4ac <audioFrameSynth+0x16c>
			else if (oscToTick > 0)
    b454:	4a6e      	ldr	r2, [pc, #440]	; (b610 <audioFrameSynth+0x2d0>)
    b456:	7813      	ldrb	r3, [r2, #0]
    b458:	b10b      	cbz	r3, b45e <audioFrameSynth+0x11e>
				oscToTick--;
    b45a:	3b01      	subs	r3, #1
    b45c:	7013      	strb	r3, [r2, #0]
}
    b45e:	b007      	add	sp, #28
    b460:	ecbd 8b04 	vpop	{d8-d9}
    b464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    b468:	4e5b      	ldr	r6, [pc, #364]	; (b5d8 <audioFrameSynth+0x298>)
    b46a:	7833      	ldrb	r3, [r6, #0]
    b46c:	b1ab      	cbz	r3, b49a <audioFrameSynth+0x15a>
    b46e:	2500      	movs	r5, #0
    b470:	f8df 81d0 	ldr.w	r8, [pc, #464]	; b644 <audioFrameSynth+0x304>
    b474:	4c5c      	ldr	r4, [pc, #368]	; (b5e8 <audioFrameSynth+0x2a8>)
				previousStringInputs[i] = 0;
    b476:	46aa      	mov	sl, r5
    b478:	f1a8 0b20 	sub.w	fp, r8, #32
				tADSRT_clear(&envs[v][i]);
    b47c:	4658      	mov	r0, fp
			for (int v = 0; v < NUM_ENV; v++)
    b47e:	f10b 0b08 	add.w	fp, fp, #8
				tADSRT_clear(&envs[v][i]);
    b482:	f000 fe05 	bl	c090 <__tADSRT_clear_veneer>
				previousStringInputs[i] = 0;
    b486:	f824 a015 	strh.w	sl, [r4, r5, lsl #1]
			for (int v = 0; v < NUM_ENV; v++)
    b48a:	45c3      	cmp	fp, r8
    b48c:	d1f6      	bne.n	b47c <audioFrameSynth+0x13c>
		for (int i = 0; i < numStringsThisBoard; i++)
    b48e:	3501      	adds	r5, #1
    b490:	7833      	ldrb	r3, [r6, #0]
    b492:	f108 0804 	add.w	r8, r8, #4
    b496:	42ab      	cmp	r3, r5
    b498:	dcee      	bgt.n	b478 <audioFrameSynth+0x138>
		resetStringInputs = 0;
    b49a:	2300      	movs	r3, #0
		newPluck = 1;
    b49c:	f8df 8198 	ldr.w	r8, [pc, #408]	; b638 <audioFrameSynth+0x2f8>
		resetStringInputs = 0;
    b4a0:	f889 3000 	strb.w	r3, [r9]
		newPluck = 1;
    b4a4:	2301      	movs	r3, #1
    b4a6:	f8c8 3000 	str.w	r3, [r8]
    b4aa:	e75b      	b.n	b364 <audioFrameSynth+0x24>
				overSampled = 0;
    b4ac:	2000      	movs	r0, #0
    b4ae:	6018      	str	r0, [r3, #0]
}
    b4b0:	b007      	add	sp, #28
    b4b2:	ecbd 8b04 	vpop	{d8-d9}
    b4b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				changeOversampling(overSampled);
    b4ba:	f000 bc89 	b.w	bdd0 <__changeOversampling_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    b4be:	4b4b      	ldr	r3, [pc, #300]	; (b5ec <audioFrameSynth+0x2ac>)
    b4c0:	f5ab 7213 	sub.w	r2, fp, #588	; 0x24c
    b4c4:	f8df a168 	ldr.w	sl, [pc, #360]	; b630 <audioFrameSynth+0x2f0>
						if (useVelocity == 0) envVel = 1.f;
    b4c8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    b4cc:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    b4d0:	f10a 0104 	add.w	r1, sl, #4
						voiceSounding = 1;
    b4d4:	9504      	str	r5, [sp, #16]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    b4d6:	b29b      	uxth	r3, r3
						voiceSounding = 1;
    b4d8:	4655      	mov	r5, sl
    b4da:	9405      	str	r4, [sp, #20]
    b4dc:	46ca      	mov	sl, r9
				float amplitz = stringInputs[i] * 0.000015259021897f;
    b4de:	ee08 3a10 	vmov	s16, r3
				stringOctave[i] = octave;
    b4e2:	4b4c      	ldr	r3, [pc, #304]	; (b614 <audioFrameSynth+0x2d4>)
						voiceSounding = 1;
    b4e4:	4614      	mov	r4, r2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    b4e6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				stringOctave[i] = octave;
    b4ea:	681b      	ldr	r3, [r3, #0]
    b4ec:	603b      	str	r3, [r7, #0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    b4ee:	ee28 8a28 	vmul.f32	s16, s16, s17
					if (envOn[v])
    b4f2:	f815 3b01 	ldrb.w	r3, [r5], #1
						tADSRT_on(&envs[v][i], envVel);
    b4f6:	4650      	mov	r0, sl
					if (envOn[v])
    b4f8:	b16b      	cbz	r3, b516 <audioFrameSynth+0x1d6>
						if (useVelocity == 0) envVel = 1.f;
    b4fa:	edd4 7a00 	vldr	s15, [r4]
    b4fe:	eef5 7a40 	vcmp.f32	s15, #0.0
    b502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						tADSRT_on(&envs[v][i], envVel);
    b506:	fe09 0a08 	vseleq.f32	s0, s18, s16
    b50a:	f000 fe51 	bl	c1b0 <__tADSRT_on_veneer>
						voiceSounding = 1;
    b50e:	2001      	movs	r0, #1
    b510:	4b41      	ldr	r3, [pc, #260]	; (b618 <audioFrameSynth+0x2d8>)
    b512:	4942      	ldr	r1, [pc, #264]	; (b61c <audioFrameSynth+0x2dc>)
    b514:	7018      	strb	r0, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    b516:	42a9      	cmp	r1, r5
    b518:	f10a 0a08 	add.w	sl, sl, #8
    b51c:	f104 04a8 	add.w	r4, r4, #168	; 0xa8
    b520:	d1e7      	bne.n	b4f2 <audioFrameSynth+0x1b2>
						if (noteOnSync > 0.5f)
    b522:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				for (int v = 0; v < NUM_ENV; v++)
    b526:	f8df a0f8 	ldr.w	sl, [pc, #248]	; b620 <audioFrameSynth+0x2e0>
						if (noteOnSync > 0.5f)
    b52a:	e9dd 5404 	ldrd	r5, r4, [sp, #16]
				for (int v = 0; v < NUM_ENV; v++)
    b52e:	f8cd 8014 	str.w	r8, [sp, #20]
    b532:	ebc5 7385 	rsb	r3, r5, r5, lsl #30
    b536:	46a0      	mov	r8, r4
    b538:	465c      	mov	r4, fp
    b53a:	009b      	lsls	r3, r3, #2
    b53c:	330c      	adds	r3, #12
    b53e:	9304      	str	r3, [sp, #16]
						if (noteOnSync > 0.5f)
    b540:	4b37      	ldr	r3, [pc, #220]	; (b620 <audioFrameSynth+0x2e0>)
    b542:	ebaa 0003 	sub.w	r0, sl, r3
					if (lfoOn[v])
    b546:	f81a 3b01 	ldrb.w	r3, [sl], #1
    b54a:	b163      	cbz	r3, b566 <audioFrameSynth+0x226>
						if (noteOnSync > 0.5f)
    b54c:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
    b550:	eef4 7ac9 	vcmpe.f32	s15, s18
    b554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b558:	dd05      	ble.n	b566 <audioFrameSynth+0x226>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    b55a:	9b04      	ldr	r3, [sp, #16]
    b55c:	4629      	mov	r1, r5
    b55e:	ed94 0a00 	vldr	s0, [r4]
    b562:	58e3      	ldr	r3, [r4, r3]
    b564:	4798      	blx	r3
				for (int v = 0; v < NUM_LFOS; v++)
    b566:	4b2f      	ldr	r3, [pc, #188]	; (b624 <audioFrameSynth+0x2e4>)
    b568:	348c      	adds	r4, #140	; 0x8c
    b56a:	4553      	cmp	r3, sl
    b56c:	d1e8      	bne.n	b540 <audioFrameSynth+0x200>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = random_values[randomValPointer++]; // scale between zero and one
    b56e:	482e      	ldr	r0, [pc, #184]	; (b628 <audioFrameSynth+0x2e8>)
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    b570:	4644      	mov	r4, r8
				sourceValues[RANDOM_SOURCE_OFFSET][i] = random_values[randomValPointer++]; // scale between zero and one
    b572:	492e      	ldr	r1, [pc, #184]	; (b62c <audioFrameSynth+0x2ec>)
    b574:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    b576:	9b03      	ldr	r3, [sp, #12]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = random_values[randomValPointer++]; // scale between zero and one
    b578:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    b57c:	3201      	adds	r2, #1
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    b57e:	f8dd 8014 	ldr.w	r8, [sp, #20]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = random_values[randomValPointer++]; // scale between zero and one
    b582:	7002      	strb	r2, [r0, #0]
    b584:	680a      	ldr	r2, [r1, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    b586:	781b      	ldrb	r3, [r3, #0]
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    b588:	ed86 8a00 	vstr	s16, [r6]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = random_values[randomValPointer++]; // scale between zero and one
    b58c:	60b2      	str	r2, [r6, #8]
			{
    b58e:	e715      	b.n	b3bc <audioFrameSynth+0x7c>
					if (envOn[v])
    b590:	4b27      	ldr	r3, [pc, #156]	; (b630 <audioFrameSynth+0x2f0>)
    b592:	781b      	ldrb	r3, [r3, #0]
    b594:	b95b      	cbnz	r3, b5ae <audioFrameSynth+0x26e>
    b596:	4b26      	ldr	r3, [pc, #152]	; (b630 <audioFrameSynth+0x2f0>)
    b598:	785b      	ldrb	r3, [r3, #1]
    b59a:	b9b3      	cbnz	r3, b5ca <audioFrameSynth+0x28a>
    b59c:	4b24      	ldr	r3, [pc, #144]	; (b630 <audioFrameSynth+0x2f0>)
    b59e:	789b      	ldrb	r3, [r3, #2]
    b5a0:	b973      	cbnz	r3, b5c0 <audioFrameSynth+0x280>
    b5a2:	4b23      	ldr	r3, [pc, #140]	; (b630 <audioFrameSynth+0x2f0>)
    b5a4:	78db      	ldrb	r3, [r3, #3]
    b5a6:	b933      	cbnz	r3, b5b6 <audioFrameSynth+0x276>
		for (int i = 0; i < numStringsThisBoard; i++)
    b5a8:	9b03      	ldr	r3, [sp, #12]
    b5aa:	781b      	ldrb	r3, [r3, #0]
    b5ac:	e706      	b.n	b3bc <audioFrameSynth+0x7c>
						tADSRT_off(&envs[v][i]);
    b5ae:	4648      	mov	r0, r9
    b5b0:	f000 fdc2 	bl	c138 <__tADSRT_off_veneer>
    b5b4:	e7ef      	b.n	b596 <audioFrameSynth+0x256>
    b5b6:	f109 0018 	add.w	r0, r9, #24
    b5ba:	f000 fdbd 	bl	c138 <__tADSRT_off_veneer>
    b5be:	e7f3      	b.n	b5a8 <audioFrameSynth+0x268>
    b5c0:	f109 0010 	add.w	r0, r9, #16
    b5c4:	f000 fdb8 	bl	c138 <__tADSRT_off_veneer>
    b5c8:	e7eb      	b.n	b5a2 <audioFrameSynth+0x262>
    b5ca:	f109 0008 	add.w	r0, r9, #8
    b5ce:	f000 fdb3 	bl	c138 <__tADSRT_off_veneer>
    b5d2:	e7e3      	b.n	b59c <audioFrameSynth+0x25c>
    b5d4:	e0001000 	.word	0xe0001000
    b5d8:	20000694 	.word	0x20000694
    b5dc:	2001d93c 	.word	0x2001d93c
    b5e0:	20014224 	.word	0x20014224
    b5e4:	37800080 	.word	0x37800080
    b5e8:	20005358 	.word	0x20005358
    b5ec:	20014204 	.word	0x20014204
    b5f0:	30000000 	.word	0x30000000
    b5f4:	4b000000 	.word	0x4b000000
    b5f8:	20000684 	.word	0x20000684
    b5fc:	3f7d70a4 	.word	0x3f7d70a4
    b600:	20014244 	.word	0x20014244
    b604:	200051cc 	.word	0x200051cc
    b608:	200051c8 	.word	0x200051c8
    b60c:	200008e8 	.word	0x200008e8
    b610:	200008e4 	.word	0x200008e4
    b614:	200052f4 	.word	0x200052f4
    b618:	2001da30 	.word	0x2001da30
    b61c:	2001d31c 	.word	0x2001d31c
    b620:	2001d41c 	.word	0x2001d41c
    b624:	2001d420 	.word	0x2001d420
    b628:	2001d7bc 	.word	0x2001d7bc
    b62c:	2001a4cc 	.word	0x2001a4cc
    b630:	2001d318 	.word	0x2001d318
    b634:	20005771 	.word	0x20005771
    b638:	200052e8 	.word	0x200052e8
    b63c:	2001d31c 	.word	0x2001d31c
    b640:	2001a1d0 	.word	0x2001a1d0
    b644:	2001d33c 	.word	0x2001d33c
	...

0000b660 <audioInitVocal>:
tVoc vocal[NUM_STRINGS_PER_BOARD];
int prevTractLength[NUM_STRINGS_PER_BOARD] = {22, 22};
int32_t prevActualTractLength[NUM_STRINGS_PER_BOARD] = {22, 22};
float vocalDefaults[12] = {0.5f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};
void __ATTR_ITCMRAM audioInitVocal()
{
    b660:	b510      	push	{r4, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{
		tVoc_init(&vocal[v], 22, 65, &leaf);
    b662:	4c07      	ldr	r4, [pc, #28]	; (b680 <audioInitVocal+0x20>)
    b664:	2241      	movs	r2, #65	; 0x41
    b666:	4b07      	ldr	r3, [pc, #28]	; (b684 <audioInitVocal+0x24>)
    b668:	2116      	movs	r1, #22
    b66a:	4620      	mov	r0, r4
    b66c:	f000 fb0c 	bl	bc88 <__tVoc_init_veneer>
    b670:	1d20      	adds	r0, r4, #4
    b672:	4b04      	ldr	r3, [pc, #16]	; (b684 <audioInitVocal+0x24>)
    b674:	2241      	movs	r2, #65	; 0x41
    b676:	2116      	movs	r1, #22
	}
}
    b678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tVoc_init(&vocal[v], 22, 65, &leaf);
    b67c:	f000 bb04 	b.w	bc88 <__tVoc_init_veneer>
    b680:	2001da54 	.word	0x2001da54
    b684:	2000528c 	.word	0x2000528c
    b688:	f3af 8000 	nop.w
    b68c:	f3af 8000 	nop.w
    b690:	f3af 8000 	nop.w
    b694:	f3af 8000 	nop.w
    b698:	f3af 8000 	nop.w
    b69c:	f3af 8000 	nop.w

0000b6a0 <audioFreeVocal>:

void __ATTR_ITCMRAM audioFreeVocal()
{
	;
}
    b6a0:	4770      	bx	lr
    b6a2:	bf00      	nop
    b6a4:	f3af 8000 	nop.w
    b6a8:	f3af 8000 	nop.w
    b6ac:	f3af 8000 	nop.w
    b6b0:	f3af 8000 	nop.w
    b6b4:	f3af 8000 	nop.w
    b6b8:	f3af 8000 	nop.w
    b6bc:	f3af 8000 	nop.w

0000b6c0 <audioSwitchToVocal>:

void __ATTR_ITCMRAM audioSwitchToVocal()
{
    b6c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6c4:	4c1a      	ldr	r4, [pc, #104]	; (b730 <audioSwitchToVocal+0x70>)
	for (int i = 0; i < 12; i++)
    b6c6:	2500      	movs	r5, #0
    b6c8:	4e1a      	ldr	r6, [pc, #104]	; (b734 <audioSwitchToVocal+0x74>)
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}

		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
		knobFrozen[i] = 1;
    b6ca:	f04f 0901 	mov.w	r9, #1
    b6ce:	4f1a      	ldr	r7, [pc, #104]	; (b738 <audioSwitchToVocal+0x78>)
    b6d0:	f8df 806c 	ldr.w	r8, [pc, #108]	; b740 <audioSwitchToVocal+0x80>
    b6d4:	f8df a06c 	ldr.w	sl, [pc, #108]	; b744 <audioSwitchToVocal+0x84>
{
    b6d8:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.01f);
    b6dc:	ed9f 8a17 	vldr	s16, [pc, #92]	; b73c <audioSwitchToVocal+0x7c>
    b6e0:	e00e      	b.n	b700 <audioSwitchToVocal+0x40>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    b6e2:	ecb7 0a01 	vldmia	r7!, {s0}
    b6e6:	f000 fc6f 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    b6ea:	4620      	mov	r0, r4
    b6ec:	ecb6 0a01 	vldmia	r6!, {s0}
    b6f0:	f000 fc6a 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    b6f4:	f80a 9005 	strb.w	r9, [sl, r5]
	for (int i = 0; i < 12; i++)
    b6f8:	3501      	adds	r5, #1
    b6fa:	3404      	adds	r4, #4
    b6fc:	2d0c      	cmp	r5, #12
    b6fe:	d013      	beq.n	b728 <audioSwitchToVocal+0x68>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.01f);
    b700:	4620      	mov	r0, r4
    b702:	eeb0 0a48 	vmov.f32	s0, s16
    b706:	f000 fb5b 	bl	bdc0 <__tExpSmooth_setFactor_veneer>
		if (voice == 60)
    b70a:	f8d8 3000 	ldr.w	r3, [r8]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    b70e:	4620      	mov	r0, r4
		if (voice == 60)
    b710:	2b3c      	cmp	r3, #60	; 0x3c
    b712:	d1e6      	bne.n	b6e2 <audioSwitchToVocal+0x22>
			tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    b714:	46b3      	mov	fp, r6
    b716:	ecb6 0a01 	vldmia	r6!, {s0}
    b71a:	f000 fc55 	bl	bfc8 <__tExpSmooth_setValAndDest_veneer>
	for (int i = 0; i < 12; i++)
    b71e:	3704      	adds	r7, #4
		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    b720:	4620      	mov	r0, r4
    b722:	ed9b 0a00 	vldr	s0, [fp]
    b726:	e7e3      	b.n	b6f0 <audioSwitchToVocal+0x30>
	}
}
    b728:	ecbd 8b02 	vpop	{d8}
    b72c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b730:	20005238 	.word	0x20005238
    b734:	20000904 	.word	0x20000904
    b738:	20018678 	.word	0x20018678
    b73c:	3c23d70a 	.word	0x3c23d70a
    b740:	20014250 	.word	0x20014250
    b744:	200051d4 	.word	0x200051d4
    b748:	f3af 8000 	nop.w
    b74c:	f3af 8000 	nop.w
    b750:	f3af 8000 	nop.w
    b754:	f3af 8000 	nop.w
    b758:	f3af 8000 	nop.w
    b75c:	f3af 8000 	nop.w

0000b760 <audioTickVocal>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickVocal(void)
{
    b760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b764:	4c3f      	ldr	r4, [pc, #252]	; (b864 <audioTickVocal+0x104>)
    b766:	4d40      	ldr	r5, [pc, #256]	; (b868 <audioTickVocal+0x108>)
    b768:	f104 0630 	add.w	r6, r4, #48	; 0x30
    b76c:	ed2d 8b04 	vpush	{d8-d9}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b770:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    b772:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    b774:	f000 fb8c 	bl	be90 <__tExpSmooth_tick_veneer>
    b778:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    b77c:	42a6      	cmp	r6, r4
    b77e:	d1f7      	bne.n	b770 <audioTickVocal+0x10>

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);



	for (int i = 0; i < numStringsThisBoard; i++)
    b780:	f8df 9110 	ldr.w	r9, [pc, #272]	; b894 <audioTickVocal+0x134>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    b784:	4839      	ldr	r0, [pc, #228]	; (b86c <audioTickVocal+0x10c>)
    b786:	f000 fb83 	bl	be90 <__tExpSmooth_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    b78a:	f899 3000 	ldrb.w	r3, [r9]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    b78e:	eeb0 8a40 	vmov.f32	s16, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    b792:	2b00      	cmp	r3, #0
    b794:	d054      	beq.n	b840 <audioTickVocal+0xe0>
    b796:	4d36      	ldr	r5, [pc, #216]	; (b870 <audioTickVocal+0x110>)
    b798:	2400      	movs	r4, #0
    b79a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; b898 <audioTickVocal+0x138>
    b79e:	4f35      	ldr	r7, [pc, #212]	; (b874 <audioTickVocal+0x114>)
	float tempSamp = 0.0f;
    b7a0:	ed9f 9a35 	vldr	s18, [pc, #212]	; b878 <audioTickVocal+0x118>
    b7a4:	f8df b0f4 	ldr.w	fp, [pc, #244]	; b89c <audioTickVocal+0x13c>
    b7a8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; b8a0 <audioTickVocal+0x140>
	{
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    b7ac:	4628      	mov	r0, r5
    b7ae:	00a6      	lsls	r6, r4, #2
    b7b0:	f000 fb76 	bl	bea0 <__tVoc_tick_veneer>
    b7b4:	eef0 8a40 	vmov.f32	s17, s0
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    b7b8:	4456      	add	r6, sl
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    b7ba:	eb0b 0084 	add.w	r0, fp, r4, lsl #2
    b7be:	f000 fb8f 	bl	bee0 <__tADSRT_tickNoInterp_veneer>
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    b7c2:	ecf8 7a01 	vldmia	r8!, {s15}
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    b7c6:	eea8 9a80 	vfma.f32	s18, s17, s0
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    b7ca:	ed96 0a00 	vldr	s0, [r6]
	for (int i = 0; i < numStringsThisBoard; i++)
    b7ce:	3401      	adds	r4, #1
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    b7d0:	ee30 0a27 	vadd.f32	s0, s0, s15
    b7d4:	f000 fbb0 	bl	bf38 <__mtofTableLookup_veneer>
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    b7d8:	4628      	mov	r0, r5
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    b7da:	eca7 0a01 	vstmia	r7!, {s0}
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    b7de:	f000 fb07 	bl	bdf0 <__tVoc_setFreq_veneer>
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    b7e2:	4628      	mov	r0, r5
    b7e4:	eeb0 0a48 	vmov.f32	s0, s16
    b7e8:	f000 fc8e 	bl	c108 <__tVoc_set_tenseness_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    b7ec:	f899 3000 	ldrb.w	r3, [r9]
    b7f0:	3504      	adds	r5, #4
    b7f2:	42a3      	cmp	r3, r4
    b7f4:	dcda      	bgt.n	b7ac <audioTickVocal+0x4c>
    b7f6:	ed9f 7a21 	vldr	s14, [pc, #132]	; b87c <audioTickVocal+0x11c>
		//tVoc_set_tongue_shape(&vocal[i], tongue, 2.9f * knobScaled[1] + 0.1f);

	}
	//float outVol = 0.0265625f - (0.2467348f * volumeSmoothed) + (1.253049f * volumeSmoothed * volumeSmoothed);
	//float outVol = 0.008315613f + 0.3774075f*volumeSmoothed - 1.785774f*volumeSmoothed*volumeSmoothed + 4.218241f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 0.8576009f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed - 0.9656285f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    b7fa:	ee68 6a08 	vmul.f32	s13, s16, s16
    b7fe:	eddf 7a20 	vldr	s15, [pc, #128]	; b880 <audioTickVocal+0x120>
    b802:	eddf 5a20 	vldr	s11, [pc, #128]	; b884 <audioTickVocal+0x124>
    b806:	eee8 7a07 	vfma.f32	s15, s16, s14
    b80a:	ed9f 6a1f 	vldr	s12, [pc, #124]	; b888 <audioTickVocal+0x128>
    b80e:	ed9f 5a1f 	vldr	s10, [pc, #124]	; b88c <audioTickVocal+0x12c>

	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
    b812:	eee6 7ae5 	vfms.f32	s15, s13, s11
    b816:	4b1e      	ldr	r3, [pc, #120]	; (b890 <audioTickVocal+0x130>)
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    b818:	ee28 7a26 	vmul.f32	s14, s16, s13
    b81c:	ee28 8a05 	vmul.f32	s16, s16, s10
	tempSamp *= masterVolFromBrain;
    b820:	ed93 0a00 	vldr	s0, [r3]
    b824:	eee7 7a06 	vfma.f32	s15, s14, s12
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    b828:	eee7 7a48 	vfms.f32	s15, s14, s16
    b82c:	ee29 9a27 	vmul.f32	s18, s18, s15
	return tanhf(tempSamp);
    b830:	ee29 0a00 	vmul.f32	s0, s18, s0
}
    b834:	ecbd 8b04 	vpop	{d8-d9}
    b838:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return tanhf(tempSamp);
    b83c:	f000 ba18 	b.w	bc70 <__tanhf_veneer>
    b840:	ed9f 7a0e 	vldr	s14, [pc, #56]	; b87c <audioTickVocal+0x11c>
	float outVol = 0.006721744f + 0.4720157f*volumeSmoothed - 2.542849f*volumeSmoothed*volumeSmoothed + 6.332339f*volumeSmoothed*volumeSmoothed*volumeSmoothed - 3.271672f*volumeSmoothed*volumeSmoothed*volumeSmoothed*volumeSmoothed;
    b844:	ee60 6a00 	vmul.f32	s13, s0, s0
    b848:	eddf 7a0d 	vldr	s15, [pc, #52]	; b880 <audioTickVocal+0x120>
    b84c:	eddf 5a0d 	vldr	s11, [pc, #52]	; b884 <audioTickVocal+0x124>
    b850:	eee0 7a07 	vfma.f32	s15, s0, s14
    b854:	ed9f 6a0c 	vldr	s12, [pc, #48]	; b888 <audioTickVocal+0x128>
    b858:	ed9f 5a0c 	vldr	s10, [pc, #48]	; b88c <audioTickVocal+0x12c>
	float tempSamp = 0.0f;
    b85c:	ed9f 9a06 	vldr	s18, [pc, #24]	; b878 <audioTickVocal+0x118>
    b860:	e7d7      	b.n	b812 <audioTickVocal+0xb2>
    b862:	bf00      	nop
    b864:	200051e8 	.word	0x200051e8
    b868:	20005238 	.word	0x20005238
    b86c:	2001425c 	.word	0x2001425c
    b870:	2001da54 	.word	0x2001da54
    b874:	200141d4 	.word	0x200141d4
    b878:	00000000 	.word	0x00000000
    b87c:	3ef1ac0b 	.word	0x3ef1ac0b
    b880:	3bdc4213 	.word	0x3bdc4213
    b884:	4022be0a 	.word	0x4022be0a
    b888:	40caa285 	.word	0x40caa285
    b88c:	40516313 	.word	0x40516313
    b890:	2000068c 	.word	0x2000068c
    b894:	20000694 	.word	0x20000694
    b898:	20014224 	.word	0x20014224
    b89c:	200051bc 	.word	0x200051bc
    b8a0:	2001421c 	.word	0x2001421c
    b8a4:	f3af 8000 	nop.w
    b8a8:	f3af 8000 	nop.w
    b8ac:	f3af 8000 	nop.w
    b8b0:	f3af 8000 	nop.w
    b8b4:	f3af 8000 	nop.w
    b8b8:	f3af 8000 	nop.w
    b8bc:	f3af 8000 	nop.w

0000b8c0 <audioFrameVocal>:
{
    b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
    b8c4:	4bb0      	ldr	r3, [pc, #704]	; (bb88 <audioFrameVocal+0x2c8>)
{
    b8c6:	4680      	mov	r8, r0
	if (resetStringInputs)
    b8c8:	f8df b310 	ldr.w	fp, [pc, #784]	; bbdc <audioFrameVocal+0x31c>
		for (int i = 0; i < numStringsThisBoard; i++)
    b8cc:	4faf      	ldr	r7, [pc, #700]	; (bb8c <audioFrameVocal+0x2cc>)
{
    b8ce:	ed2d 8b08 	vpush	{d8-d11}
	uint32_t tempCountFrame = DWT->CYCCNT;
    b8d2:	685e      	ldr	r6, [r3, #4]
{
    b8d4:	b083      	sub	sp, #12
	if (resetStringInputs)
    b8d6:	f89b 3000 	ldrb.w	r3, [fp]
    b8da:	2b00      	cmp	r3, #0
    b8dc:	f040 80cf 	bne.w	ba7e <audioFrameVocal+0x1be>
	if (newPluck)
    b8e0:	4dab      	ldr	r5, [pc, #684]	; (bb90 <audioFrameVocal+0x2d0>)
		for (int i = 0; i < numStringsThisBoard; i++)
    b8e2:	7839      	ldrb	r1, [r7, #0]
	if (newPluck)
    b8e4:	682b      	ldr	r3, [r5, #0]
    b8e6:	2b00      	cmp	r3, #0
    b8e8:	f040 80e6 	bne.w	bab8 <audioFrameVocal+0x1f8>
	for (int i = 0; i < numStringsThisBoard; i++)
    b8ec:	2900      	cmp	r1, #0
    b8ee:	f000 809a 	beq.w	ba26 <audioFrameVocal+0x166>
		float doublecompute = knobScaled[1] > 0.5f;
    b8f2:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    b8f6:	4da7      	ldr	r5, [pc, #668]	; (bb94 <audioFrameVocal+0x2d4>)
    b8f8:	f8df 92e4 	ldr.w	r9, [pc, #740]	; bbe0 <audioFrameVocal+0x320>
	for (int i = 0; i < numStringsThisBoard; i++)
    b8fc:	f04f 0b00 	mov.w	fp, #0
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    b900:	eddf aaa5 	vldr	s21, [pc, #660]	; bb98 <audioFrameVocal+0x2d8>
			int32_t squishedTract = (newTractLength*0.168f) ;
    b904:	ed9f aaa5 	vldr	s20, [pc, #660]	; bb9c <audioFrameVocal+0x2dc>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[3]) + 0.01f);
    b908:	eddf 9aa5 	vldr	s19, [pc, #660]	; bba0 <audioFrameVocal+0x2e0>
    b90c:	ed9f 9aa5 	vldr	s18, [pc, #660]	; bba4 <audioFrameVocal+0x2e4>
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    b910:	eddf 8aa5 	vldr	s17, [pc, #660]	; bba8 <audioFrameVocal+0x2e8>
    b914:	f8df a2cc 	ldr.w	sl, [pc, #716]	; bbe4 <audioFrameVocal+0x324>
    b918:	4ca4      	ldr	r4, [pc, #656]	; (bbac <audioFrameVocal+0x2ec>)
    b91a:	9601      	str	r6, [sp, #4]
		float doublecompute = knobScaled[1] > 0.5f;
    b91c:	edd4 7a01 	vldr	s15, [r4, #4]
    b920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    b924:	f8d9 3000 	ldr.w	r3, [r9]
		float doublecompute = knobScaled[1] > 0.5f;
    b928:	eeb0 6a04 	vmov.f32	s12, #4	; 0x40200000  2.5
    b92c:	eef4 7acb 	vcmpe.f32	s15, s22
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    b930:	ed94 8a00 	vldr	s16, [r4]
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    b934:	f103 020a 	add.w	r2, r3, #10
    b938:	3b0a      	subs	r3, #10
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    b93a:	ee28 8a2a 	vmul.f32	s16, s16, s21
	for (int i = 0; i < numStringsThisBoard; i++)
    b93e:	f10b 0b01 	add.w	fp, fp, #1
		float doublecompute = knobScaled[1] > 0.5f;
    b942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    b946:	ee06 2a90 	vmov	s13, r2
    b94a:	ee07 3a90 	vmov	s15, r3
    b94e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		float doublecompute = knobScaled[1] > 0.5f;
    b952:	fe37 7a06 	vselgt.f32	s14, s14, s12
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    b956:	ee28 8a07 	vmul.f32	s16, s16, s14
		float doublecompute = knobScaled[1] > 0.5f;
    b95a:	bfcc      	ite	gt
    b95c:	2601      	movgt	r6, #1
    b95e:	2600      	movle	r6, #0
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    b960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			int32_t squishedTract = (newTractLength*0.168f) ;
    b964:	ee28 7a0a 	vmul.f32	s14, s16, s20
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    b968:	eef4 6ac8 	vcmpe.f32	s13, s16
			int32_t squishedTract = (newTractLength*0.168f) ;
    b96c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    b970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			int32_t squishedTract = (newTractLength*0.168f) ;
    b974:	ee17 3a10 	vmov	r3, s14
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    b978:	d404      	bmi.n	b984 <audioFrameVocal+0xc4>
    b97a:	eef4 7ac8 	vcmpe.f32	s15, s16
    b97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b982:	dd0f      	ble.n	b9a4 <audioFrameVocal+0xe4>
			if ( squishedTract != prevActualTractLength[i])
    b984:	f8da 2000 	ldr.w	r2, [sl]
				tVoc_set_tractLength(&vocal[i],squishedTract   + 2);
    b988:	4628      	mov	r0, r5
    b98a:	1c99      	adds	r1, r3, #2
			if ( squishedTract != prevActualTractLength[i])
    b98c:	9300      	str	r3, [sp, #0]
    b98e:	429a      	cmp	r2, r3
    b990:	d004      	beq.n	b99c <audioFrameVocal+0xdc>
				tVoc_set_tractLength(&vocal[i],squishedTract   + 2);
    b992:	f000 fa91 	bl	beb8 <__tVoc_set_tractLength_veneer>
				prevActualTractLength[i] = squishedTract;
    b996:	9b00      	ldr	r3, [sp, #0]
    b998:	f8ca 3000 	str.w	r3, [sl]
			prevTractLength[i] = newTractLength;
    b99c:	eebd 8ac8 	vcvt.s32.f32	s16, s16
    b9a0:	ed89 8a00 	vstr	s16, [r9]
		tVoc_setDoubleComputeFlag(&vocal[i], doublecompute);
    b9a4:	4631      	mov	r1, r6
    b9a6:	4628      	mov	r0, r5
    b9a8:	f000 fac2 	bl	bf30 <__tVoc_setDoubleComputeFlag_veneer>
		tVoc_setTurbulenceNoiseGain(&vocal[i], knobScaled[4]);
    b9ac:	4628      	mov	r0, r5
    b9ae:	ed94 0a04 	vldr	s0, [r4, #16]
	for (int i = 0; i < numStringsThisBoard; i++)
    b9b2:	f109 0904 	add.w	r9, r9, #4
		tVoc_setTurbulenceNoiseGain(&vocal[i], knobScaled[4]);
    b9b6:	f000 fa63 	bl	be80 <__tVoc_setTurbulenceNoiseGain_veneer>
		tVoc_setAspirationNoiseGain(&vocal[i], knobScaled[5]);
    b9ba:	4628      	mov	r0, r5
    b9bc:	ed94 0a05 	vldr	s0, [r4, #20]
	for (int i = 0; i < numStringsThisBoard; i++)
    b9c0:	f10a 0a04 	add.w	sl, sl, #4
		tVoc_setAspirationNoiseGain(&vocal[i], knobScaled[5]);
    b9c4:	f000 fa98 	bl	bef8 <__tVoc_setAspirationNoiseGain_veneer>
		tVoc_setAspirationNoiseFilterFreq(&vocal[i], knobScaled[6]);
    b9c8:	4628      	mov	r0, r5
    b9ca:	ed94 0a06 	vldr	s0, [r4, #24]
    b9ce:	f000 fadf 	bl	bf90 <__tVoc_setAspirationNoiseFilterFreq_veneer>
		tVoc_setAspirationNoiseFilterQ(&vocal[i], knobScaled[7]);
    b9d2:	4628      	mov	r0, r5
    b9d4:	ed94 0a07 	vldr	s0, [r4, #28]
    b9d8:	f000 fbb2 	bl	c140 <__tVoc_setAspirationNoiseFilterQ_veneer>
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    b9dc:	edd4 1a0b 	vldr	s3, [r4, #44]	; 0x2c
    b9e0:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    b9e4:	4628      	mov	r0, r5
    b9e6:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    b9ea:	ed94 0a08 	vldr	s0, [r4, #32]
    b9ee:	f000 fb83 	bl	c0f8 <__tVoc_set_tongue_shape_and_touch_veneer>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[3]) + 0.01f);
    b9f2:	eeb0 0a49 	vmov.f32	s0, s18
    b9f6:	edd4 7a03 	vldr	s15, [r4, #12]
    b9fa:	4628      	mov	r0, r5
    b9fc:	eea7 0aa9 	vfma.f32	s0, s15, s19
    ba00:	f000 f9ce 	bl	bda0 <__tVoc_set_velum_veneer>
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    ba04:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
    ba08:	eeb0 0a68 	vmov.f32	s0, s17
    ba0c:	ed94 7a02 	vldr	s14, [r4, #8]
    ba10:	4628      	mov	r0, r5
	for (int i = 0; i < numStringsThisBoard; i++)
    ba12:	3504      	adds	r5, #4
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    ba14:	eea7 0a27 	vfma.f32	s0, s14, s15
    ba18:	f000 f97e 	bl	bd18 <__tVoc_rescaleDiameter_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    ba1c:	783b      	ldrb	r3, [r7, #0]
    ba1e:	455b      	cmp	r3, fp
    ba20:	f73f af7c 	bgt.w	b91c <audioFrameVocal+0x5c>
    ba24:	9e01      	ldr	r6, [sp, #4]
    ba26:	4c62      	ldr	r4, [pc, #392]	; (bbb0 <audioFrameVocal+0x2f0>)
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    ba28:	ed9f 8a62 	vldr	s16, [pc, #392]	; bbb4 <audioFrameVocal+0x2f4>
    ba2c:	f504 7500 	add.w	r5, r4, #512	; 0x200
    ba30:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    ba34:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    ba38:	f7ff fe92 	bl	b760 <audioTickVocal>
    ba3c:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    ba40:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    ba42:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    ba46:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    ba48:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    ba4c:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    ba50:	d1f2      	bne.n	ba38 <audioFrameVocal+0x178>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    ba52:	4b4d      	ldr	r3, [pc, #308]	; (bb88 <audioFrameVocal+0x2c8>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    ba54:	4858      	ldr	r0, [pc, #352]	; (bbb8 <audioFrameVocal+0x2f8>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    ba56:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    ba58:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    ba5c:	1b9b      	subs	r3, r3, r6
    ba5e:	4957      	ldr	r1, [pc, #348]	; (bbbc <audioFrameVocal+0x2fc>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    ba60:	4a57      	ldr	r2, [pc, #348]	; (bbc0 <audioFrameVocal+0x300>)
    ba62:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    ba66:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    ba68:	eef8 7a67 	vcvt.f32.u32	s15, s15
    ba6c:	ee67 7a87 	vmul.f32	s15, s15, s14
    ba70:	edc2 7a00 	vstr	s15, [r2]
}
    ba74:	b003      	add	sp, #12
    ba76:	ecbd 8b08 	vpop	{d8-d11}
    ba7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    ba7e:	7839      	ldrb	r1, [r7, #0]
    ba80:	2900      	cmp	r1, #0
    ba82:	d04c      	beq.n	bb1e <audioFrameVocal+0x25e>
    ba84:	2400      	movs	r4, #0
    ba86:	4d4f      	ldr	r5, [pc, #316]	; (bbc4 <audioFrameVocal+0x304>)
    ba88:	f8df 915c 	ldr.w	r9, [pc, #348]	; bbe8 <audioFrameVocal+0x328>
			previousStringInputs[i] = 0;
    ba8c:	46a2      	mov	sl, r4
			tADSRT_clear(&fenvelopes[i]);
    ba8e:	4628      	mov	r0, r5
		for (int i = 0; i < numStringsThisBoard; i++)
    ba90:	3504      	adds	r5, #4
			tADSRT_clear(&fenvelopes[i]);
    ba92:	f000 fafd 	bl	c090 <__tADSRT_clear_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    ba96:	7839      	ldrb	r1, [r7, #0]
			previousStringInputs[i] = 0;
    ba98:	f829 a014 	strh.w	sl, [r9, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    ba9c:	3401      	adds	r4, #1
			previousStringInputs[i] = 0;
    ba9e:	f04f 0300 	mov.w	r3, #0
		for (int i = 0; i < numStringsThisBoard; i++)
    baa2:	42a1      	cmp	r1, r4
    baa4:	dcf3      	bgt.n	ba8e <audioFrameVocal+0x1ce>
		resetStringInputs = 0;
    baa6:	f88b 3000 	strb.w	r3, [fp]
		newPluck = 1;
    baaa:	2301      	movs	r3, #1
    baac:	4d38      	ldr	r5, [pc, #224]	; (bb90 <audioFrameVocal+0x2d0>)
    baae:	602b      	str	r3, [r5, #0]
	if (newPluck)
    bab0:	682b      	ldr	r3, [r5, #0]
    bab2:	2b00      	cmp	r3, #0
    bab4:	f43f af1a 	beq.w	b8ec <audioFrameVocal+0x2c>
		for (int i = 0; i < numStringsThisBoard; i++)
    bab8:	2900      	cmp	r1, #0
    baba:	d063      	beq.n	bb84 <audioFrameVocal+0x2c4>
    babc:	f8df b104 	ldr.w	fp, [pc, #260]	; bbc4 <audioFrameVocal+0x304>
    bac0:	2400      	movs	r4, #0
    bac2:	4b41      	ldr	r3, [pc, #260]	; (bbc8 <audioFrameVocal+0x308>)
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bac4:	9500      	str	r5, [sp, #0]
    bac6:	465d      	mov	r5, fp
				float amplitz = stringInputs[i] * 0.000015259021897f;
    bac8:	eddf 8a40 	vldr	s17, [pc, #256]	; bbcc <audioFrameVocal+0x30c>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bacc:	469b      	mov	fp, r3
    bace:	f8df a11c 	ldr.w	sl, [pc, #284]	; bbec <audioFrameVocal+0x32c>
    bad2:	f8df 9114 	ldr.w	r9, [pc, #276]	; bbe8 <audioFrameVocal+0x328>
    bad6:	4a3e      	ldr	r2, [pc, #248]	; (bbd0 <audioFrameVocal+0x310>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    bad8:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    badc:	b29b      	uxth	r3, r3
    bade:	b91b      	cbnz	r3, bae8 <audioFrameVocal+0x228>
    bae0:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    bae4:	b29b      	uxth	r3, r3
    bae6:	bb1b      	cbnz	r3, bb30 <audioFrameVocal+0x270>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    bae8:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    baec:	b29b      	uxth	r3, r3
    baee:	b123      	cbz	r3, bafa <audioFrameVocal+0x23a>
    baf0:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    baf4:	b29b      	uxth	r3, r3
    baf6:	2b00      	cmp	r3, #0
    baf8:	d03e      	beq.n	bb78 <audioFrameVocal+0x2b8>
			previousStringInputs[i] = stringInputs[i];
    bafa:	f832 c014 	ldrh.w	ip, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    bafe:	f10b 0b04 	add.w	fp, fp, #4
    bb02:	f10a 0a04 	add.w	sl, sl, #4
    bb06:	3504      	adds	r5, #4
			previousStringInputs[i] = stringInputs[i];
    bb08:	fa1f fc8c 	uxth.w	ip, ip
    bb0c:	f829 c014 	strh.w	ip, [r9, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    bb10:	3401      	adds	r4, #1
    bb12:	42a1      	cmp	r1, r4
    bb14:	dce0      	bgt.n	bad8 <audioFrameVocal+0x218>
    bb16:	9d00      	ldr	r5, [sp, #0]
		newPluck = 0;
    bb18:	2300      	movs	r3, #0
    bb1a:	602b      	str	r3, [r5, #0]
    bb1c:	e6e6      	b.n	b8ec <audioFrameVocal+0x2c>
		newPluck = 1;
    bb1e:	4d1c      	ldr	r5, [pc, #112]	; (bb90 <audioFrameVocal+0x2d0>)
    bb20:	2301      	movs	r3, #1
		resetStringInputs = 0;
    bb22:	f88b 1000 	strb.w	r1, [fp]
		newPluck = 1;
    bb26:	602b      	str	r3, [r5, #0]
	if (newPluck)
    bb28:	682b      	ldr	r3, [r5, #0]
    bb2a:	2b00      	cmp	r3, #0
    bb2c:	d1f4      	bne.n	bb18 <audioFrameVocal+0x258>
    bb2e:	e77a      	b.n	ba26 <audioFrameVocal+0x166>
				stringOctave[i] = octave;
    bb30:	4b28      	ldr	r3, [pc, #160]	; (bbd4 <audioFrameVocal+0x314>)
    bb32:	edd3 7a00 	vldr	s15, [r3]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bb36:	4b28      	ldr	r3, [pc, #160]	; (bbd8 <audioFrameVocal+0x318>)
				stringOctave[i] = octave;
    bb38:	edcb 7a00 	vstr	s15, [fp]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bb3c:	eb03 0184 	add.w	r1, r3, r4, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    bb40:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bb44:	ed91 0a00 	vldr	s0, [r1]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    bb48:	b29b      	uxth	r3, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bb4a:	ee37 0a80 	vadd.f32	s0, s15, s0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    bb4e:	ee08 3a10 	vmov	s16, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bb52:	f000 f9f5 	bl	bf40 <__mtof_veneer>
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    bb56:	4628      	mov	r0, r5
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    bb58:	ed8a 0a00 	vstr	s0, [sl]
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    bb5c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    bb60:	f000 f932 	bl	bdc8 <__tADSRT_setSustain_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    bb64:	eeb8 0ac8 	vcvt.f32.s32	s0, s16
				tADSRT_on(&fenvelopes[i], amplitz);
    bb68:	4628      	mov	r0, r5
    bb6a:	ee20 0a28 	vmul.f32	s0, s0, s17
    bb6e:	f000 fb1f 	bl	c1b0 <__tADSRT_on_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    bb72:	7839      	ldrb	r1, [r7, #0]
			{
    bb74:	4a16      	ldr	r2, [pc, #88]	; (bbd0 <audioFrameVocal+0x310>)
    bb76:	e7c0      	b.n	bafa <audioFrameVocal+0x23a>
				tADSRT_off(&fenvelopes[i]);
    bb78:	4628      	mov	r0, r5
    bb7a:	f000 fadd 	bl	c138 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    bb7e:	7839      	ldrb	r1, [r7, #0]
    bb80:	4a13      	ldr	r2, [pc, #76]	; (bbd0 <audioFrameVocal+0x310>)
    bb82:	e7ba      	b.n	bafa <audioFrameVocal+0x23a>
		newPluck = 0;
    bb84:	6029      	str	r1, [r5, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    bb86:	e74e      	b.n	ba26 <audioFrameVocal+0x166>
    bb88:	e0001000 	.word	0xe0001000
    bb8c:	20000694 	.word	0x20000694
    bb90:	200052e8 	.word	0x200052e8
    bb94:	2001da54 	.word	0x2001da54
    bb98:	42c80000 	.word	0x42c80000
    bb9c:	3e2c0831 	.word	0x3e2c0831
    bba0:	3ecccccd 	.word	0x3ecccccd
    bba4:	3c23d70a 	.word	0x3c23d70a
    bba8:	3cc8b439 	.word	0x3cc8b439
    bbac:	200051e8 	.word	0x200051e8
    bbb0:	30000000 	.word	0x30000000
    bbb4:	4b000000 	.word	0x4b000000
    bbb8:	20000684 	.word	0x20000684
    bbbc:	20014244 	.word	0x20014244
    bbc0:	200051cc 	.word	0x200051cc
    bbc4:	200051bc 	.word	0x200051bc
    bbc8:	20014224 	.word	0x20014224
    bbcc:	37800080 	.word	0x37800080
    bbd0:	20014204 	.word	0x20014204
    bbd4:	200052f4 	.word	0x200052f4
    bbd8:	2001421c 	.word	0x2001421c
    bbdc:	20005771 	.word	0x20005771
    bbe0:	200008fc 	.word	0x200008fc
    bbe4:	200008f4 	.word	0x200008f4
    bbe8:	20005358 	.word	0x20005358
    bbec:	200141d4 	.word	0x200141d4

0000bbf0 <__tLadderFilter_setQ_veneer>:
    bbf0:	f85f f000 	ldr.w	pc, [pc]	; bbf4 <__tLadderFilter_setQ_veneer+0x4>
    bbf4:	240143ad 	.word	0x240143ad

0000bbf8 <__tStiffString_updateOutputWeights_veneer>:
    bbf8:	f85f f000 	ldr.w	pc, [pc]	; bbfc <__tStiffString_updateOutputWeights_veneer+0x4>
    bbfc:	24017f05 	.word	0x24017f05

0000bc00 <__tStiffString_free_veneer>:
    bc00:	f85f f000 	ldr.w	pc, [pc]	; bc04 <__tStiffString_free_veneer+0x4>
    bc04:	24017dcd 	.word	0x24017dcd

0000bc08 <__tTString_setTensionGain_veneer>:
    bc08:	f85f f000 	ldr.w	pc, [pc]	; bc0c <__tTString_setTensionGain_veneer+0x4>
    bc0c:	24017895 	.word	0x24017895

0000bc10 <__tSawSquareLFO_setFreq_veneer>:
    bc10:	f85f f000 	ldr.w	pc, [pc]	; bc14 <__tSawSquareLFO_setFreq_veneer+0x4>
    bc14:	24015c91 	.word	0x24015c91

0000bc18 <__HAL_SPI_Abort_veneer>:
    bc18:	f85f f000 	ldr.w	pc, [pc]	; bc1c <__HAL_SPI_Abort_veneer+0x4>
    bc1c:	2400b4e1 	.word	0x2400b4e1

0000bc20 <__tStiffString_tick_veneer>:
    bc20:	f85f f000 	ldr.w	pc, [pc]	; bc24 <__tStiffString_tick_veneer+0x4>
    bc24:	24018099 	.word	0x24018099

0000bc28 <__tTString_setPickupFilterQ_veneer>:
    bc28:	f85f f000 	ldr.w	pc, [pc]	; bc2c <__tTString_setPickupFilterQ_veneer+0x4>
    bc2c:	24017d9d 	.word	0x24017d9d

0000bc30 <__tIntPhasor_setFreq_veneer>:
    bc30:	f85f f000 	ldr.w	pc, [pc]	; bc34 <__tIntPhasor_setFreq_veneer+0x4>
    bc34:	24015925 	.word	0x24015925

0000bc38 <__tNoise_tick_veneer>:
    bc38:	f85f f000 	ldr.w	pc, [pc]	; bc3c <__tNoise_tick_veneer+0x4>
    bc3c:	24015831 	.word	0x24015831

0000bc40 <__tTString_setPickupModAmp_veneer>:
    bc40:	f85f f000 	ldr.w	pc, [pc]	; bc44 <__tTString_setPickupModAmp_veneer+0x4>
    bc44:	240177f9 	.word	0x240177f9

0000bc48 <__tVZFilterHS_setGain_veneer>:
    bc48:	f85f f000 	ldr.w	pc, [pc]	; bc4c <__tVZFilterHS_setGain_veneer+0x4>
    bc4c:	24013165 	.word	0x24013165

0000bc50 <__tVZFilterBell_setBandwidth_veneer>:
    bc50:	f85f f000 	ldr.w	pc, [pc]	; bc54 <__tVZFilterBell_setBandwidth_veneer+0x4>
    bc54:	24013409 	.word	0x24013409

0000bc58 <__tADSRT_tick_veneer>:
    bc58:	f85f f000 	ldr.w	pc, [pc]	; bc5c <__tADSRT_tick_veneer+0x4>
    bc5c:	24011395 	.word	0x24011395

0000bc60 <__faster_mtof_veneer>:
    bc60:	f85f f000 	ldr.w	pc, [pc]	; bc64 <__faster_mtof_veneer+0x4>
    bc64:	24014be1 	.word	0x24014be1

0000bc68 <__tVZFilter_setFreq_veneer>:
    bc68:	f85f f000 	ldr.w	pc, [pc]	; bc6c <__tVZFilter_setFreq_veneer+0x4>
    bc6c:	24012809 	.word	0x24012809

0000bc70 <__tanhf_veneer>:
    bc70:	f85f f000 	ldr.w	pc, [pc]	; bc74 <__tanhf_veneer+0x4>
    bc74:	2401a325 	.word	0x2401a325

0000bc78 <__tVZFilter_setResonance_veneer>:
    bc78:	f85f f000 	ldr.w	pc, [pc]	; bc7c <__tVZFilter_setResonance_veneer+0x4>
    bc7c:	24012b45 	.word	0x24012b45

0000bc80 <__fastExp4_veneer>:
    bc80:	f85f f000 	ldr.w	pc, [pc]	; bc84 <__fastExp4_veneer+0x4>
    bc84:	240145ad 	.word	0x240145ad

0000bc88 <__tVoc_init_veneer>:
    bc88:	f85f f000 	ldr.w	pc, [pc]	; bc8c <__tVoc_init_veneer+0x4>
    bc8c:	24019351 	.word	0x24019351

0000bc90 <__tCrusher_setRound_veneer>:
    bc90:	f85f f000 	ldr.w	pc, [pc]	; bc94 <__tCrusher_setRound_veneer+0x4>
    bc94:	24010ec5 	.word	0x24010ec5

0000bc98 <__tDiodeFilter_tick_veneer>:
    bc98:	f85f f000 	ldr.w	pc, [pc]	; bc9c <__tDiodeFilter_tick_veneer+0x4>
    bc9c:	240137c5 	.word	0x240137c5

0000bca0 <__tSimpleLivingString3_pluck_veneer>:
    bca0:	f85f f000 	ldr.w	pc, [pc]	; bca4 <__tSimpleLivingString3_pluck_veneer+0x4>
    bca4:	240163f1 	.word	0x240163f1

0000bca8 <__tLadderFilter_tick_veneer>:
    bca8:	f85f f000 	ldr.w	pc, [pc]	; bcac <__tLadderFilter_tick_veneer+0x4>
    bcac:	240140f9 	.word	0x240140f9

0000bcb0 <__tTString_setPickupAmount_veneer>:
    bcb0:	f85f f000 	ldr.w	pc, [pc]	; bcb4 <__tTString_setPickupAmount_veneer+0x4>
    bcb4:	240177f1 	.word	0x240177f1

0000bcb8 <__tEnvelopeFollower_tick_veneer>:
    bcb8:	f85f f000 	ldr.w	pc, [pc]	; bcbc <__tEnvelopeFollower_tick_veneer+0x4>
    bcbc:	24010351 	.word	0x24010351

0000bcc0 <__tStiffString_setPickupPosNoUpdate_veneer>:
    bcc0:	f85f f000 	ldr.w	pc, [pc]	; bcc4 <__tStiffString_setPickupPosNoUpdate_veneer+0x4>
    bcc4:	240181fd 	.word	0x240181fd

0000bcc8 <__tCrusher_tick_veneer>:
    bcc8:	f85f f000 	ldr.w	pc, [pc]	; bccc <__tCrusher_tick_veneer+0x4>
    bccc:	24010de5 	.word	0x24010de5

0000bcd0 <__tSineTriLFO_setPhase_veneer>:
    bcd0:	f85f f000 	ldr.w	pc, [pc]	; bcd4 <__tSineTriLFO_setPhase_veneer+0x4>
    bcd4:	24015f5d 	.word	0x24015f5d

0000bcd8 <__tStiffString_mute_veneer>:
    bcd8:	f85f f000 	ldr.w	pc, [pc]	; bcdc <__tStiffString_mute_veneer+0x4>
    bcdc:	24018135 	.word	0x24018135

0000bce0 <__tStiffString_updateOscillators_veneer>:
    bce0:	f85f f000 	ldr.w	pc, [pc]	; bce4 <__tStiffString_updateOscillators_veneer+0x4>
    bce4:	24017e21 	.word	0x24017e21

0000bce8 <__tIntPhasor_tick_veneer>:
    bce8:	f85f f000 	ldr.w	pc, [pc]	; bcec <__tIntPhasor_tick_veneer+0x4>
    bcec:	24015905 	.word	0x24015905

0000bcf0 <__tADSRT_setAttack_veneer>:
    bcf0:	f85f f000 	ldr.w	pc, [pc]	; bcf4 <__tADSRT_setAttack_veneer+0x4>
    bcf4:	2401129d 	.word	0x2401129d

0000bcf8 <__tExpSmooth_setVal_veneer>:
    bcf8:	f85f f000 	ldr.w	pc, [pc]	; bcfc <__tExpSmooth_setVal_veneer+0x4>
    bcfc:	240118c9 	.word	0x240118c9

0000bd00 <__tVZFilterLS_setResonance_veneer>:
    bd00:	f85f f000 	ldr.w	pc, [pc]	; bd04 <__tVZFilterLS_setResonance_veneer+0x4>
    bd04:	24012edd 	.word	0x24012edd

0000bd08 <__tTString_setOpenStringFrequency_veneer>:
    bd08:	f85f f000 	ldr.w	pc, [pc]	; bd0c <__tTString_setOpenStringFrequency_veneer+0x4>
    bd0c:	240178ad 	.word	0x240178ad

0000bd10 <__tTString_setPickupFilterFreq_veneer>:
    bd10:	f85f f000 	ldr.w	pc, [pc]	; bd14 <__tTString_setPickupFilterFreq_veneer+0x4>
    bd14:	24017d95 	.word	0x24017d95

0000bd18 <__tVoc_rescaleDiameter_veneer>:
    bd18:	f85f f000 	ldr.w	pc, [pc]	; bd1c <__tVoc_rescaleDiameter_veneer+0x4>
    bd1c:	24019869 	.word	0x24019869

0000bd20 <__tTString_setFreq_veneer>:
    bd20:	f85f f000 	ldr.w	pc, [pc]	; bd24 <__tTString_setFreq_veneer+0x4>
    bd24:	24017719 	.word	0x24017719

0000bd28 <__tVZFilter_setGain_veneer>:
    bd28:	f85f f000 	ldr.w	pc, [pc]	; bd2c <__tVZFilter_setGain_veneer+0x4>
    bd2c:	24012b0d 	.word	0x24012b0d

0000bd30 <__tSawSquareLFO_setShape_veneer>:
    bd30:	f85f f000 	ldr.w	pc, [pc]	; bd34 <__tSawSquareLFO_setShape_veneer+0x4>
    bd34:	24015d3d 	.word	0x24015d3d

0000bd38 <__tVZFilterBell_setGain_veneer>:
    bd38:	f85f f000 	ldr.w	pc, [pc]	; bd3c <__tVZFilterBell_setGain_veneer+0x4>
    bd3c:	24013661 	.word	0x24013661

0000bd40 <__tTriLFO_setPhase_veneer>:
    bd40:	f85f f000 	ldr.w	pc, [pc]	; bd44 <__tTriLFO_setPhase_veneer+0x4>
    bd44:	24015de5 	.word	0x24015de5

0000bd48 <__setLFOShapes_veneer>:
    bd48:	f85f f000 	ldr.w	pc, [pc]	; bd4c <__setLFOShapes_veneer+0x4>
    bd4c:	240024c1 	.word	0x240024c1

0000bd50 <__tPickupNonLinearity_init_veneer>:
    bd50:	f85f f000 	ldr.w	pc, [pc]	; bd54 <__tPickupNonLinearity_init_veneer+0x4>
    bd54:	24015f95 	.word	0x24015f95

0000bd58 <__tTString_setSlideGain_veneer>:
    bd58:	f85f f000 	ldr.w	pc, [pc]	; bd5c <__tTString_setSlideGain_veneer+0x4>
    bd5c:	240178cd 	.word	0x240178cd

0000bd60 <__tTString_setFeedbackStrength_veneer>:
    bd60:	f85f f000 	ldr.w	pc, [pc]	; bd64 <__tTString_setFeedbackStrength_veneer+0x4>
    bd64:	2401796d 	.word	0x2401796d

0000bd68 <__tTString_setBarPosition_veneer>:
    bd68:	f85f f000 	ldr.w	pc, [pc]	; bd6c <__tTString_setBarPosition_veneer+0x4>
    bd6c:	2401789d 	.word	0x2401789d

0000bd70 <__tSimpleLivingString3_setDampFreq_veneer>:
    bd70:	f85f f000 	ldr.w	pc, [pc]	; bd74 <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    bd74:	24016371 	.word	0x24016371

0000bd78 <__tPBPulse_setFreq_veneer>:
    bd78:	f85f f000 	ldr.w	pc, [pc]	; bd7c <__tPBPulse_setFreq_veneer+0x4>
    bd7c:	240155dd 	.word	0x240155dd

0000bd80 <__tPBSineTriangle_setShape_veneer>:
    bd80:	f85f f000 	ldr.w	pc, [pc]	; bd84 <__tPBSineTriangle_setShape_veneer+0x4>
    bd84:	240154f1 	.word	0x240154f1

0000bd88 <__tStiffString_init_veneer>:
    bd88:	f85f f000 	ldr.w	pc, [pc]	; bd8c <__tStiffString_init_veneer+0x4>
    bd8c:	24018091 	.word	0x24018091

0000bd90 <__tSimpleLivingString3_free_veneer>:
    bd90:	f85f f000 	ldr.w	pc, [pc]	; bd94 <__tSimpleLivingString3_free_veneer+0x4>
    bd94:	24016291 	.word	0x24016291

0000bd98 <__fast_tanh5_veneer>:
    bd98:	f85f f000 	ldr.w	pc, [pc]	; bd9c <__fast_tanh5_veneer+0x4>
    bd9c:	24014851 	.word	0x24014851

0000bda0 <__tVoc_set_velum_veneer>:
    bda0:	f85f f000 	ldr.w	pc, [pc]	; bda4 <__tVoc_set_velum_veneer+0x4>
    bda4:	24019489 	.word	0x24019489

0000bda8 <__tADSRT_init_veneer>:
    bda8:	f85f f000 	ldr.w	pc, [pc]	; bdac <__tADSRT_init_veneer+0x4>
    bdac:	240111d5 	.word	0x240111d5

0000bdb0 <__setEffectsFunctions_veneer>:
    bdb0:	f85f f000 	ldr.w	pc, [pc]	; bdb4 <__setEffectsFunctions_veneer+0x4>
    bdb4:	24001d85 	.word	0x24001d85

0000bdb8 <__tADSRT_setLeakFactor_veneer>:
    bdb8:	f85f f000 	ldr.w	pc, [pc]	; bdbc <__tADSRT_setLeakFactor_veneer+0x4>
    bdbc:	24011331 	.word	0x24011331

0000bdc0 <__tExpSmooth_setFactor_veneer>:
    bdc0:	f85f f000 	ldr.w	pc, [pc]	; bdc4 <__tExpSmooth_setFactor_veneer+0x4>
    bdc4:	2401189d 	.word	0x2401189d

0000bdc8 <__tADSRT_setSustain_veneer>:
    bdc8:	f85f f000 	ldr.w	pc, [pc]	; bdcc <__tADSRT_setSustain_veneer+0x4>
    bdcc:	240112ed 	.word	0x240112ed

0000bdd0 <__changeOversampling_veneer>:
    bdd0:	f85f f000 	ldr.w	pc, [pc]	; bdd4 <__changeOversampling_veneer+0x4>
    bdd4:	2400439d 	.word	0x2400439d

0000bdd8 <__tCycle_setFreq_veneer>:
    bdd8:	f85f f000 	ldr.w	pc, [pc]	; bddc <__tCycle_setFreq_veneer+0x4>
    bddc:	24014fe9 	.word	0x24014fe9

0000bde0 <__fastSine_veneer>:
    bde0:	f85f f000 	ldr.w	pc, [pc]	; bde4 <__fastSine_veneer+0x4>
    bde4:	24014885 	.word	0x24014885

0000bde8 <__tPickupNonLinearity_free_veneer>:
    bde8:	f85f f000 	ldr.w	pc, [pc]	; bdec <__tPickupNonLinearity_free_veneer+0x4>
    bdec:	24015fad 	.word	0x24015fad

0000bdf0 <__tVoc_setFreq_veneer>:
    bdf0:	f85f f000 	ldr.w	pc, [pc]	; bdf4 <__tVoc_setFreq_veneer+0x4>
    bdf4:	24019469 	.word	0x24019469

0000bdf8 <__tTString_setPeakFilterQ_veneer>:
    bdf8:	f85f f000 	ldr.w	pc, [pc]	; bdfc <__tTString_setPeakFilterQ_veneer+0x4>
    bdfc:	24017db9 	.word	0x24017db9

0000be00 <__tPBSaw_setFreq_veneer>:
    be00:	f85f f000 	ldr.w	pc, [pc]	; be04 <__tPBSaw_setFreq_veneer+0x4>
    be04:	240156c1 	.word	0x240156c1

0000be08 <__tTString_initToPool_veneer>:
    be08:	f85f f000 	ldr.w	pc, [pc]	; be0c <__tTString_initToPool_veneer+0x4>
    be0c:	24016705 	.word	0x24016705

0000be10 <__tPBSawSquare_setShape_veneer>:
    be10:	f85f f000 	ldr.w	pc, [pc]	; be14 <__tPBSawSquare_setShape_veneer+0x4>
    be14:	240157d5 	.word	0x240157d5

0000be18 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    be18:	f85f f000 	ldr.w	pc, [pc]	; be1c <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    be1c:	240163cd 	.word	0x240163cd

0000be20 <__tSimpleLivingString3_setLevStrength_veneer>:
    be20:	f85f f000 	ldr.w	pc, [pc]	; be24 <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    be24:	240163d5 	.word	0x240163d5

0000be28 <__tTString_mute_veneer>:
    be28:	f85f f000 	ldr.w	pc, [pc]	; be2c <__tTString_mute_veneer+0x4>
    be2c:	24017811 	.word	0x24017811

0000be30 <__tPBTriangle_tick_veneer>:
    be30:	f85f f000 	ldr.w	pc, [pc]	; be34 <__tPBTriangle_tick_veneer+0x4>
    be34:	24015095 	.word	0x24015095

0000be38 <__tVZFilterHS_setFreqFast_veneer>:
    be38:	f85f f000 	ldr.w	pc, [pc]	; be3c <__tVZFilterHS_setFreqFast_veneer+0x4>
    be3c:	240130d9 	.word	0x240130d9

0000be40 <__tSquareLFO_setPhase_veneer>:
    be40:	f85f f000 	ldr.w	pc, [pc]	; be44 <__tSquareLFO_setPhase_veneer+0x4>
    be44:	24015b61 	.word	0x24015b61

0000be48 <__LEAF_clip_veneer>:
    be48:	f85f f000 	ldr.w	pc, [pc]	; be4c <__LEAF_clip_veneer+0x4>
    be4c:	240147a1 	.word	0x240147a1

0000be50 <__tDiodeFilter_setQ_veneer>:
    be50:	f85f f000 	ldr.w	pc, [pc]	; be54 <__tDiodeFilter_setQ_veneer+0x4>
    be54:	24013fe1 	.word	0x24013fe1

0000be58 <__tSimpleLivingString3_initToPool_veneer>:
    be58:	f85f f000 	ldr.w	pc, [pc]	; be5c <__tSimpleLivingString3_initToPool_veneer+0x4>
    be5c:	24016011 	.word	0x24016011

0000be60 <__tCycle_tick_veneer>:
    be60:	f85f f000 	ldr.w	pc, [pc]	; be64 <__tCycle_tick_veneer+0x4>
    be64:	24014f9d 	.word	0x24014f9d

0000be68 <__tTString_setFeedbackReactionSpeed_veneer>:
    be68:	f85f f000 	ldr.w	pc, [pc]	; be6c <__tTString_setFeedbackReactionSpeed_veneer+0x4>
    be6c:	240179b5 	.word	0x240179b5

0000be70 <__tPBSaw_tick_veneer>:
    be70:	f85f f000 	ldr.w	pc, [pc]	; be74 <__tPBSaw_tick_veneer+0x4>
    be74:	24015671 	.word	0x24015671

0000be78 <__tSimpleLivingString3_setPickupPoint_veneer>:
    be78:	f85f f000 	ldr.w	pc, [pc]	; be7c <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    be7c:	240166fd 	.word	0x240166fd

0000be80 <__tVoc_setTurbulenceNoiseGain_veneer>:
    be80:	f85f f000 	ldr.w	pc, [pc]	; be84 <__tVoc_setTurbulenceNoiseGain_veneer+0x4>
    be84:	24019495 	.word	0x24019495

0000be88 <__tTString_setInharmonic_veneer>:
    be88:	f85f f000 	ldr.w	pc, [pc]	; be8c <__tTString_setInharmonic_veneer+0x4>
    be8c:	24017d1d 	.word	0x24017d1d

0000be90 <__tExpSmooth_tick_veneer>:
    be90:	f85f f000 	ldr.w	pc, [pc]	; be94 <__tExpSmooth_tick_veneer+0x4>
    be94:	240118dd 	.word	0x240118dd

0000be98 <__tLinearDelay_setDelay_veneer>:
    be98:	f85f f000 	ldr.w	pc, [pc]	; be9c <__tLinearDelay_setDelay_veneer+0x4>
    be9c:	2401063d 	.word	0x2401063d

0000bea0 <__tVoc_tick_veneer>:
    bea0:	f85f f000 	ldr.w	pc, [pc]	; bea4 <__tVoc_tick_veneer+0x4>
    bea4:	240193c1 	.word	0x240193c1

0000bea8 <__tVZFilterHS_setResonance_veneer>:
    bea8:	f85f f000 	ldr.w	pc, [pc]	; beac <__tVZFilterHS_setResonance_veneer+0x4>
    beac:	240131c1 	.word	0x240131c1

0000beb0 <__tVZFilter_setFrequencyAndResonance_veneer>:
    beb0:	f85f f000 	ldr.w	pc, [pc]	; beb4 <__tVZFilter_setFrequencyAndResonance_veneer+0x4>
    beb4:	24012b7d 	.word	0x24012b7d

0000beb8 <__tVoc_set_tractLength_veneer>:
    beb8:	f85f f000 	ldr.w	pc, [pc]	; bebc <__tVoc_set_tractLength_veneer+0x4>
    bebc:	24019475 	.word	0x24019475

0000bec0 <__dbToATableLookup_veneer>:
    bec0:	f85f f000 	ldr.w	pc, [pc]	; bec4 <__dbToATableLookup_veneer+0x4>
    bec4:	24000739 	.word	0x24000739

0000bec8 <__memcpy_veneer>:
    bec8:	f85f f000 	ldr.w	pc, [pc]	; becc <__memcpy_veneer+0x4>
    becc:	240199fd 	.word	0x240199fd

0000bed0 <__tTString_tick_veneer>:
    bed0:	f85f f000 	ldr.w	pc, [pc]	; bed4 <__tTString_tick_veneer+0x4>
    bed4:	24016e15 	.word	0x24016e15

0000bed8 <__arm_sin_f32_veneer>:
    bed8:	f85f f000 	ldr.w	pc, [pc]	; bedc <__arm_sin_f32_veneer+0x4>
    bedc:	240006a1 	.word	0x240006a1

0000bee0 <__tADSRT_tickNoInterp_veneer>:
    bee0:	f85f f000 	ldr.w	pc, [pc]	; bee4 <__tADSRT_tickNoInterp_veneer+0x4>
    bee4:	24011659 	.word	0x24011659

0000bee8 <__tCrusher_setOperation_veneer>:
    bee8:	f85f f000 	ldr.w	pc, [pc]	; beec <__tCrusher_setOperation_veneer+0x4>
    beec:	24010e65 	.word	0x24010e65

0000bef0 <__LEAF_map_veneer>:
    bef0:	f85f f000 	ldr.w	pc, [pc]	; bef4 <__LEAF_map_veneer+0x4>
    bef4:	24014401 	.word	0x24014401

0000bef8 <__tVoc_setAspirationNoiseGain_veneer>:
    bef8:	f85f f000 	ldr.w	pc, [pc]	; befc <__tVoc_setAspirationNoiseGain_veneer+0x4>
    befc:	240194a1 	.word	0x240194a1

0000bf00 <__tVZFilterLS_setGain_veneer>:
    bf00:	f85f f000 	ldr.w	pc, [pc]	; bf04 <__tVZFilterLS_setGain_veneer+0x4>
    bf04:	24012e7d 	.word	0x24012e7d

0000bf08 <__tCycle_setPhase_veneer>:
    bf08:	f85f f000 	ldr.w	pc, [pc]	; bf0c <__tCycle_setPhase_veneer+0x4>
    bf0c:	24015001 	.word	0x24015001

0000bf10 <__tOversampler_upsample_veneer>:
    bf10:	f85f f000 	ldr.w	pc, [pc]	; bf14 <__tOversampler_upsample_veneer+0x4>
    bf14:	24010c31 	.word	0x24010c31

0000bf18 <__tVZFilter_setFreqFast_veneer>:
    bf18:	f85f f000 	ldr.w	pc, [pc]	; bf1c <__tVZFilter_setFreqFast_veneer+0x4>
    bf1c:	24012839 	.word	0x24012839

0000bf20 <__tStiffString_setDecayHighFreqNoUpdate_veneer>:
    bf20:	f85f f000 	ldr.w	pc, [pc]	; bf24 <__tStiffString_setDecayHighFreqNoUpdate_veneer+0x4>
    bf24:	24018255 	.word	0x24018255

0000bf28 <__tSVF_setQ_veneer>:
    bf28:	f85f f000 	ldr.w	pc, [pc]	; bf2c <__tSVF_setQ_veneer+0x4>
    bf2c:	24012295 	.word	0x24012295

0000bf30 <__tVoc_setDoubleComputeFlag_veneer>:
    bf30:	f85f f000 	ldr.w	pc, [pc]	; bf34 <__tVoc_setDoubleComputeFlag_veneer+0x4>
    bf34:	24019461 	.word	0x24019461

0000bf38 <__mtofTableLookup_veneer>:
    bf38:	f85f f000 	ldr.w	pc, [pc]	; bf3c <__mtofTableLookup_veneer+0x4>
    bf3c:	240007b5 	.word	0x240007b5

0000bf40 <__mtof_veneer>:
    bf40:	f85f f000 	ldr.w	pc, [pc]	; bf44 <__mtof_veneer+0x4>
    bf44:	24014b8d 	.word	0x24014b8d

0000bf48 <__tTString_setHarmonicity_veneer>:
    bf48:	f85f f000 	ldr.w	pc, [pc]	; bf4c <__tTString_setHarmonicity_veneer+0x4>
    bf4c:	24017cc5 	.word	0x24017cc5

0000bf50 <__tPBPulse_setWidth_veneer>:
    bf50:	f85f f000 	ldr.w	pc, [pc]	; bf54 <__tPBPulse_setWidth_veneer+0x4>
    bf54:	240155f5 	.word	0x240155f5

0000bf58 <__memset_veneer>:
    bf58:	f85f f000 	ldr.w	pc, [pc]	; bf5c <__memset_veneer+0x4>
    bf5c:	24019999 	.word	0x24019999

0000bf60 <__tTString_setWoundOrUnwound_veneer>:
    bf60:	f85f f000 	ldr.w	pc, [pc]	; bf64 <__tTString_setWoundOrUnwound_veneer+0x4>
    bf64:	24017d31 	.word	0x24017d31

0000bf68 <__tTString_setPickupPos_veneer>:
    bf68:	f85f f000 	ldr.w	pc, [pc]	; bf6c <__tTString_setPickupPos_veneer+0x4>
    bf6c:	240177e9 	.word	0x240177e9

0000bf70 <__tLinearDelay_tick_veneer>:
    bf70:	f85f f000 	ldr.w	pc, [pc]	; bf74 <__tLinearDelay_tick_veneer+0x4>
    bf74:	24010545 	.word	0x24010545

0000bf78 <__tCycle_init_veneer>:
    bf78:	f85f f000 	ldr.w	pc, [pc]	; bf7c <__tCycle_init_veneer+0x4>
    bf7c:	24014f25 	.word	0x24014f25

0000bf80 <__tPickupNonLinearity_tick_veneer>:
    bf80:	f85f f000 	ldr.w	pc, [pc]	; bf84 <__tPickupNonLinearity_tick_veneer+0x4>
    bf84:	24015fb5 	.word	0x24015fb5

0000bf88 <__tCompressor_tickWithTableHardKnee_veneer>:
    bf88:	f85f f000 	ldr.w	pc, [pc]	; bf8c <__tCompressor_tickWithTableHardKnee_veneer+0x4>
    bf8c:	24010f7d 	.word	0x24010f7d

0000bf90 <__tVoc_setAspirationNoiseFilterFreq_veneer>:
    bf90:	f85f f000 	ldr.w	pc, [pc]	; bf94 <__tVoc_setAspirationNoiseFilterFreq_veneer+0x4>
    bf94:	240194ad 	.word	0x240194ad

0000bf98 <__tVZFilterBell_setFreq_veneer>:
    bf98:	f85f f000 	ldr.w	pc, [pc]	; bf9c <__tVZFilterBell_setFreq_veneer+0x4>
    bf9c:	24013495 	.word	0x24013495

0000bfa0 <__tTString_setPeakFilterFreq_veneer>:
    bfa0:	f85f f000 	ldr.w	pc, [pc]	; bfa4 <__tTString_setPeakFilterFreq_veneer+0x4>
    bfa4:	24017dad 	.word	0x24017dad

0000bfa8 <__tTString_setDecayInSeconds_veneer>:
    bfa8:	f85f f000 	ldr.w	pc, [pc]	; bfac <__tTString_setDecayInSeconds_veneer+0x4>
    bfac:	24017799 	.word	0x24017799

0000bfb0 <__tStiffString_setDecayNoUpdate_veneer>:
    bfb0:	f85f f000 	ldr.w	pc, [pc]	; bfb4 <__tStiffString_setDecayNoUpdate_veneer+0x4>
    bfb4:	2401824d 	.word	0x2401824d

0000bfb8 <__tADSRT_setRelease_veneer>:
    bfb8:	f85f f000 	ldr.w	pc, [pc]	; bfbc <__tADSRT_setRelease_veneer+0x4>
    bfbc:	24011309 	.word	0x24011309

0000bfc0 <__tTString_pluck_veneer>:
    bfc0:	f85f f000 	ldr.w	pc, [pc]	; bfc4 <__tTString_pluck_veneer+0x4>
    bfc4:	240179f1 	.word	0x240179f1

0000bfc8 <__tExpSmooth_setValAndDest_veneer>:
    bfc8:	f85f f000 	ldr.w	pc, [pc]	; bfcc <__tExpSmooth_setValAndDest_veneer+0x4>
    bfcc:	240118d1 	.word	0x240118d1

0000bfd0 <__tSimpleLivingString3_setFreq_veneer>:
    bfd0:	f85f f000 	ldr.w	pc, [pc]	; bfd4 <__tSimpleLivingString3_setFreq_veneer+0x4>
    bfd4:	240162d1 	.word	0x240162d1

0000bfd8 <__tSimpleLivingString3_setTargetLev_veneer>:
    bfd8:	f85f f000 	ldr.w	pc, [pc]	; bfdc <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    bfdc:	240163c5 	.word	0x240163c5

0000bfe0 <__tHighpass_tick_veneer>:
    bfe0:	f85f f000 	ldr.w	pc, [pc]	; bfe4 <__tHighpass_tick_veneer+0x4>
    bfe4:	24012385 	.word	0x24012385

0000bfe8 <__tSVF_setFreqFast_veneer>:
    bfe8:	f85f f000 	ldr.w	pc, [pc]	; bfec <__tSVF_setFreqFast_veneer+0x4>
    bfec:	24012211 	.word	0x24012211

0000bff0 <__MX_SPI1_Init_veneer>:
    bff0:	f85f f000 	ldr.w	pc, [pc]	; bff4 <__MX_SPI1_Init_veneer+0x4>
    bff4:	240036b9 	.word	0x240036b9

0000bff8 <__tPBSineTriangle_tick_veneer>:
    bff8:	f85f f000 	ldr.w	pc, [pc]	; bffc <__tPBSineTriangle_tick_veneer+0x4>
    bffc:	240152f9 	.word	0x240152f9

0000c000 <__tTString_setRippleDepth_veneer>:
    c000:	f85f f000 	ldr.w	pc, [pc]	; c004 <__tTString_setRippleDepth_veneer+0x4>
    c004:	240178d5 	.word	0x240178d5

0000c008 <__tPBTriangle_setSkew_veneer>:
    c008:	f85f f000 	ldr.w	pc, [pc]	; c00c <__tPBTriangle_setSkew_veneer+0x4>
    c00c:	24015231 	.word	0x24015231

0000c010 <__tSimpleLivingString3_setLevMode_veneer>:
    c010:	f85f f000 	ldr.w	pc, [pc]	; c014 <__tSimpleLivingString3_setLevMode_veneer+0x4>
    c014:	240163dd 	.word	0x240163dd

0000c018 <__fastPowf_veneer>:
    c018:	f85f f000 	ldr.w	pc, [pc]	; c01c <__fastPowf_veneer+0x4>
    c01c:	24014685 	.word	0x24014685

0000c020 <__tExpSmooth_free_veneer>:
    c020:	f85f f000 	ldr.w	pc, [pc]	; c024 <__tExpSmooth_free_veneer+0x4>
    c024:	24011895 	.word	0x24011895

0000c028 <__tSquareLFO_setFreq_veneer>:
    c028:	f85f f000 	ldr.w	pc, [pc]	; c02c <__tSquareLFO_setFreq_veneer+0x4>
    c02c:	24015af1 	.word	0x24015af1

0000c030 <__HAL_SPI_TransmitReceive_DMA_veneer>:
    c030:	f85f f000 	ldr.w	pc, [pc]	; c034 <__HAL_SPI_TransmitReceive_DMA_veneer+0x4>
    c034:	2400b2a5 	.word	0x2400b2a5

0000c038 <__tVZFilter_tickEfficient_veneer>:
    c038:	f85f f000 	ldr.w	pc, [pc]	; c03c <__tVZFilter_tickEfficient_veneer+0x4>
    c03c:	240123c9 	.word	0x240123c9

0000c040 <__tPBPulse_tick_veneer>:
    c040:	f85f f000 	ldr.w	pc, [pc]	; c044 <__tPBPulse_tick_veneer+0x4>
    c044:	24015549 	.word	0x24015549

0000c048 <__MX_SPI6_Init_veneer>:
    c048:	f85f f000 	ldr.w	pc, [pc]	; c04c <__MX_SPI6_Init_veneer+0x4>
    c04c:	24003711 	.word	0x24003711

0000c050 <__tVZFilterLS_setFreqFast_veneer>:
    c050:	f85f f000 	ldr.w	pc, [pc]	; c054 <__tVZFilterLS_setFreqFast_veneer+0x4>
    c054:	24012df1 	.word	0x24012df1

0000c058 <__tStiffString_setFreqNoUpdate_veneer>:
    c058:	f85f f000 	ldr.w	pc, [pc]	; c05c <__tStiffString_setFreqNoUpdate_veneer+0x4>
    c05c:	24018245 	.word	0x24018245

0000c060 <__tStiffString_pluck_veneer>:
    c060:	f85f f000 	ldr.w	pc, [pc]	; c064 <__tStiffString_pluck_veneer+0x4>
    c064:	24018141 	.word	0x24018141

0000c068 <__tExpSmooth_setDest_veneer>:
    c068:	f85f f000 	ldr.w	pc, [pc]	; c06c <__tExpSmooth_setDest_veneer+0x4>
    c06c:	240118c1 	.word	0x240118c1

0000c070 <__tADSRT_setDecay_veneer>:
    c070:	f85f f000 	ldr.w	pc, [pc]	; c074 <__tADSRT_setDecay_veneer+0x4>
    c074:	240112c5 	.word	0x240112c5

0000c078 <__tDiodeFilter_setFreqFast_veneer>:
    c078:	f85f f000 	ldr.w	pc, [pc]	; c07c <__tDiodeFilter_setFreqFast_veneer+0x4>
    c07c:	24013f85 	.word	0x24013f85

0000c080 <__tSimpleLivingString3_setDecay_veneer>:
    c080:	f85f f000 	ldr.w	pc, [pc]	; c084 <__tSimpleLivingString3_setDecay_veneer+0x4>
    c084:	24016379 	.word	0x24016379

0000c088 <__tTString_setWindingsPerInch_veneer>:
    c088:	f85f f000 	ldr.w	pc, [pc]	; c08c <__tTString_setWindingsPerInch_veneer+0x4>
    c08c:	24017d85 	.word	0x24017d85

0000c090 <__tADSRT_clear_veneer>:
    c090:	f85f f000 	ldr.w	pc, [pc]	; c094 <__tADSRT_clear_veneer+0x4>
    c094:	24011389 	.word	0x24011389

0000c098 <__LEAF_mapToZeroToOneOutput_veneer>:
    c098:	f85f f000 	ldr.w	pc, [pc]	; c09c <__LEAF_mapToZeroToOneOutput_veneer+0x4>
    c09c:	2401442d 	.word	0x2401442d

0000c0a0 <__tTString_setPickupModFreq_veneer>:
    c0a0:	f85f f000 	ldr.w	pc, [pc]	; c0a4 <__tTString_setPickupModFreq_veneer+0x4>
    c0a4:	24017801 	.word	0x24017801

0000c0a8 <__tSineTriLFO_tick_veneer>:
    c0a8:	f85f f000 	ldr.w	pc, [pc]	; c0ac <__tSineTriLFO_tick_veneer+0x4>
    c0ac:	24015e91 	.word	0x24015e91

0000c0b0 <__audioFreeSynth_veneer>:
    c0b0:	f85f f000 	ldr.w	pc, [pc]	; c0b4 <__audioFreeSynth_veneer+0x4>
    c0b4:	24004275 	.word	0x24004275

0000c0b8 <__tVZFilterBell_tick_veneer>:
    c0b8:	f85f f000 	ldr.w	pc, [pc]	; c0bc <__tVZFilterBell_tick_veneer+0x4>
    c0bc:	240133b1 	.word	0x240133b1

0000c0c0 <__tPBSineTriangle_setFreq_veneer>:
    c0c0:	f85f f000 	ldr.w	pc, [pc]	; c0c4 <__tPBSineTriangle_setFreq_veneer+0x4>
    c0c4:	240154c1 	.word	0x240154c1

0000c0c8 <__tIntPhasor_setPhase_veneer>:
    c0c8:	f85f f000 	ldr.w	pc, [pc]	; c0cc <__tIntPhasor_setPhase_veneer+0x4>
    c0cc:	2401593d 	.word	0x2401593d

0000c0d0 <__tPBTriangle_setFreq_veneer>:
    c0d0:	f85f f000 	ldr.w	pc, [pc]	; c0d4 <__tPBTriangle_setFreq_veneer+0x4>
    c0d4:	24015219 	.word	0x24015219

0000c0d8 <__tSVF_tick_veneer>:
    c0d8:	f85f f000 	ldr.w	pc, [pc]	; c0dc <__tSVF_tick_veneer+0x4>
    c0dc:	24012135 	.word	0x24012135

0000c0e0 <__tTString_free_veneer>:
    c0e0:	f85f f000 	ldr.w	pc, [pc]	; c0e4 <__tTString_free_veneer+0x4>
    c0e4:	24016d01 	.word	0x24016d01

0000c0e8 <__tOversampler_downsample_veneer>:
    c0e8:	f85f f000 	ldr.w	pc, [pc]	; c0ec <__tOversampler_downsample_veneer+0x4>
    c0ec:	24010d05 	.word	0x24010d05

0000c0f0 <__tPBSawSquare_setFreq_veneer>:
    c0f0:	f85f f000 	ldr.w	pc, [pc]	; c0f4 <__tPBSawSquare_setFreq_veneer+0x4>
    c0f4:	240157bd 	.word	0x240157bd

0000c0f8 <__tVoc_set_tongue_shape_and_touch_veneer>:
    c0f8:	f85f f000 	ldr.w	pc, [pc]	; c0fc <__tVoc_set_tongue_shape_and_touch_veneer+0x4>
    c0fc:	240197c9 	.word	0x240197c9

0000c100 <__tTriLFO_tick_veneer>:
    c100:	f85f f000 	ldr.w	pc, [pc]	; c104 <__tTriLFO_tick_veneer+0x4>
    c104:	24015d99 	.word	0x24015d99

0000c108 <__tVoc_set_tenseness_veneer>:
    c108:	f85f f000 	ldr.w	pc, [pc]	; c10c <__tVoc_set_tenseness_veneer+0x4>
    c10c:	2401947d 	.word	0x2401947d

0000c110 <__LEAF_shaper_veneer>:
    c110:	f85f f000 	ldr.w	pc, [pc]	; c114 <__LEAF_shaper_veneer+0x4>
    c114:	240146dd 	.word	0x240146dd

0000c118 <__tSawSquareLFO_setPhase_veneer>:
    c118:	f85f f000 	ldr.w	pc, [pc]	; c11c <__tSawSquareLFO_setPhase_veneer+0x4>
    c11c:	24015cd9 	.word	0x24015cd9

0000c120 <__tTriLFO_setFreq_veneer>:
    c120:	f85f f000 	ldr.w	pc, [pc]	; c124 <__tTriLFO_setFreq_veneer+0x4>
    c124:	24015dcd 	.word	0x24015dcd

0000c128 <__HAL_I2C_Slave_Receive_IT_veneer>:
    c128:	f85f f000 	ldr.w	pc, [pc]	; c12c <__HAL_I2C_Slave_Receive_IT_veneer+0x4>
    c12c:	24006ead 	.word	0x24006ead

0000c130 <__audioSwitchToSynth_veneer>:
    c130:	f85f f000 	ldr.w	pc, [pc]	; c134 <__audioSwitchToSynth_veneer+0x4>
    c134:	240042b1 	.word	0x240042b1

0000c138 <__tADSRT_off_veneer>:
    c138:	f85f f000 	ldr.w	pc, [pc]	; c13c <__tADSRT_off_veneer+0x4>
    c13c:	24011379 	.word	0x24011379

0000c140 <__tVoc_setAspirationNoiseFilterQ_veneer>:
    c140:	f85f f000 	ldr.w	pc, [pc]	; c144 <__tVoc_setAspirationNoiseFilterQ_veneer+0x4>
    c144:	240194cd 	.word	0x240194cd

0000c148 <__tStiffString_setFreq_veneer>:
    c148:	f85f f000 	ldr.w	pc, [pc]	; c14c <__tStiffString_setFreq_veneer+0x4>
    c14c:	24018129 	.word	0x24018129

0000c150 <__tVZFilterHS_tick_veneer>:
    c150:	f85f f000 	ldr.w	pc, [pc]	; c154 <__tVZFilterHS_tick_veneer+0x4>
    c154:	24013085 	.word	0x24013085

0000c158 <__tDiodeFilter_tickEfficient_veneer>:
    c158:	f85f f000 	ldr.w	pc, [pc]	; c15c <__tDiodeFilter_tickEfficient_veneer+0x4>
    c15c:	24013ba5 	.word	0x24013ba5

0000c160 <__tPBSawSquare_tick_veneer>:
    c160:	f85f f000 	ldr.w	pc, [pc]	; c164 <__tPBSawSquare_tick_veneer+0x4>
    c164:	24015711 	.word	0x24015711

0000c168 <__tStiffString_setPluckPosNoUpdate_veneer>:
    c168:	f85f f000 	ldr.w	pc, [pc]	; c16c <__tStiffString_setPluckPosNoUpdate_veneer+0x4>
    c16c:	24018221 	.word	0x24018221

0000c170 <__setFilterTypes_veneer>:
    c170:	f85f f000 	ldr.w	pc, [pc]	; c174 <__setFilterTypes_veneer+0x4>
    c174:	24002329 	.word	0x24002329

0000c178 <__tTString_setHarmonic_veneer>:
    c178:	f85f f000 	ldr.w	pc, [pc]	; c17c <__tTString_setHarmonic_veneer+0x4>
    c17c:	24017959 	.word	0x24017959

0000c180 <__tSineTriLFO_setShape_veneer>:
    c180:	f85f f000 	ldr.w	pc, [pc]	; c184 <__tSineTriLFO_setShape_veneer+0x4>
    c184:	24015f8d 	.word	0x24015f8d

0000c188 <__tLadderFilter_setFreqFast_veneer>:
    c188:	f85f f000 	ldr.w	pc, [pc]	; c18c <__tLadderFilter_setFreqFast_veneer+0x4>
    c18c:	24014349 	.word	0x24014349

0000c190 <__tSawSquareLFO_tick_veneer>:
    c190:	f85f f000 	ldr.w	pc, [pc]	; c194 <__tSawSquareLFO_tick_veneer+0x4>
    c194:	24015c0d 	.word	0x24015c0d

0000c198 <__tTString_setFilterFreqDirectly_veneer>:
    c198:	f85f f000 	ldr.w	pc, [pc]	; c19c <__tTString_setFilterFreqDirectly_veneer+0x4>
    c19c:	2401783d 	.word	0x2401783d

0000c1a0 <__tTString_setPhantomHarmonicsGain_veneer>:
    c1a0:	f85f f000 	ldr.w	pc, [pc]	; c1a4 <__tTString_setPhantomHarmonicsGain_veneer+0x4>
    c1a4:	240178c5 	.word	0x240178c5

0000c1a8 <__tStiffString_setStiffnessNoUpdate_veneer>:
    c1a8:	f85f f000 	ldr.w	pc, [pc]	; c1ac <__tStiffString_setStiffnessNoUpdate_veneer+0x4>
    c1ac:	240181dd 	.word	0x240181dd

0000c1b0 <__tADSRT_on_veneer>:
    c1b0:	f85f f000 	ldr.w	pc, [pc]	; c1b4 <__tADSRT_on_veneer+0x4>
    c1b4:	24011355 	.word	0x24011355

0000c1b8 <__tSquareLFO_tick_veneer>:
    c1b8:	f85f f000 	ldr.w	pc, [pc]	; c1bc <__tSquareLFO_tick_veneer+0x4>
    c1bc:	24015aa9 	.word	0x24015aa9

0000c1c0 <__tTapeDelay_setDelay_veneer>:
    c1c0:	f85f f000 	ldr.w	pc, [pc]	; c1c4 <__tTapeDelay_setDelay_veneer+0x4>
    c1c4:	24010b59 	.word	0x24010b59

0000c1c8 <__tVZFilterLS_tick_veneer>:
    c1c8:	f85f f000 	ldr.w	pc, [pc]	; c1cc <__tVZFilterLS_tick_veneer+0x4>
    c1cc:	24012d9d 	.word	0x24012d9d

0000c1d0 <__tSineTriLFO_setFreq_veneer>:
    c1d0:	f85f f000 	ldr.w	pc, [pc]	; c1d4 <__tSineTriLFO_setFreq_veneer+0x4>
    c1d4:	24015f2d 	.word	0x24015f2d

0000c1d8 <__tExpSmooth_init_veneer>:
    c1d8:	f85f f000 	ldr.w	pc, [pc]	; c1dc <__tExpSmooth_init_veneer+0x4>
    c1dc:	240117fd 	.word	0x240117fd

0000c1e0 <__tCrusher_setQuality_veneer>:
    c1e0:	f85f f000 	ldr.w	pc, [pc]	; c1e4 <__tCrusher_setQuality_veneer+0x4>
    c1e4:	24010e79 	.word	0x24010e79

0000c1e8 <__tSimpleLivingString3_tick_veneer>:
    c1e8:	f85f f000 	ldr.w	pc, [pc]	; c1ec <__tSimpleLivingString3_tick_veneer+0x4>
    c1ec:	24016549 	.word	0x24016549

0000c1f0 <__tSquareLFO_setPulseWidth_veneer>:
    c1f0:	f85f f000 	ldr.w	pc, [pc]	; c1f4 <__tSquareLFO_setPulseWidth_veneer+0x4>
    c1f4:	24015b21 	.word	0x24015b21

0000c1f8 <__tCrusher_setSamplingRatio_veneer>:
    c1f8:	f85f f000 	ldr.w	pc, [pc]	; c1fc <__tCrusher_setSamplingRatio_veneer+0x4>
    c1fc:	24010ecd 	.word	0x24010ecd
